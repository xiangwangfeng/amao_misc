/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct _NSZone NSZone;

typedef struct _NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	double latitude;
	double longitude;
} XXStruct_zYrK5D;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct unz_global_info_s {
	unsigned _field1;
	unsigned _field2;
} unz_global_info_s;

typedef struct tm_unz_s {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
} tm_unz_s;

typedef struct unz_file_info_s {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned _field9;
	unsigned _field10;
	unsigned _field11;
	unsigned _field12;
	unsigned _field13;
	unsigned _field14;
	tm_unz_s _field15;
} unz_file_info_s;

typedef struct opaqueCMSampleBuffer opaqueCMSampleBuffer;

typedef struct dispatch_queue_s dispatch_queue_s;

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct dispatch_group_s dispatch_group_s;

typedef struct CGAffineTransform {
	float a;
	float b;
	float c;
	float d;
	float tx;
	float ty;
} CGAffineTransform;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} XXStruct_pwHToB;

typedef struct {
	long long package;
	int version;
	int ID;
	int stickerOptions;
} XXStruct_PILIWD;

typedef struct dispatch_source_s dispatch_source_s;

typedef struct {
	int _field1;
	/*function-pointer*/ void* _field2;
	/*function-pointer*/ void* _field3;
	/*function-pointer*/ void* _field4;
	/*function-pointer*/ void* _field5;
} XXStruct_MSEYlC;

typedef struct __CTLine* CTLineRef;

typedef struct CGPath* CGPathRef;

typedef struct CGContext* CGContextRef;

typedef struct __CTFrame* CTFrameRef;

typedef struct {
	int _field1;
	int _field2;
} XXStruct_K5nmsA;

typedef struct __CTRun* CTRunRef;

typedef struct __CTParagraphStyle* CTParagraphStyleRef;

typedef struct dispatch_io_s dispatch_io_s;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __SecTrust SecTrust;

typedef struct __CFArray* CFArrayRef;

typedef struct {
	unsigned code : 1;
} XXStruct_PMaOsD;

typedef struct {
	unsigned latitude : 1;
	unsigned longitude : 1;
} XXStruct_JTAGoB;

typedef struct z_stream_s {
	char* next_in;
	unsigned avail_in;
	unsigned total_in;
	char* next_out;
	unsigned avail_out;
	unsigned total_out;
	char* msg;
	internal_state* state;
	/*function-pointer*/ void* zalloc;
	/*function-pointer*/ void* zfree;
	void* opaque;
	int data_type;
	unsigned adler;
	unsigned reserved;
} z_stream_s;

typedef struct {
	unsigned state : 1;
	unsigned eventNo : 1;
	unsigned receiverCount : 1;
	unsigned successCount : 1;
	unsigned failCount : 1;
	unsigned cancelCount : 1;
	unsigned unregisterCount : 1;
	unsigned timestamp : 1;
} XXStruct_H4r_ZD;

typedef struct __aslmsg aslmsg;

typedef struct __CFData* CFDataRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct internal_state internal_state;

typedef struct {
	BOOL _field1[64];
	BOOL _field2[32];
	int _field3;
	int _field4;
	int _field5;
	int _field6;
	int _field7;
	char* _field8;
	int _field9;
	char* _field10;
	void* _field11;
} XXStruct_F9SeBD;

typedef struct {
	float _field1;
	float _field2;
	float _field3;
} XXStruct_NwkmQC;

typedef struct {
	unsigned char _field1;
	unsigned char _field2;
	unsigned char _field3;
	unsigned char _field4;
} XXStruct_zTWGjB;

typedef struct {
	XXStruct_NwkmQC _field1;
	CGPoint _field2;
	XXStruct_zTWGjB _field3;
} XXStruct_ha8rUD;

typedef struct TinyAmpCallHandle TinyAmpCallHandle;

typedef struct {
	BOOL name[64];
	BOOL passwd[256];
	BOOL domain[256];
	BOOL proxy[256];
	unsigned port;
	BOOL logurl[256];
	void* reserve;
} XXStruct_vZMKvD;

typedef struct OpaqueAudioComponentInstance OpaqueAudioComponentInstance;

typedef struct ToneContext {
	unsigned _field1;
	int _field2;
	unsigned _field3;
} ToneContext;

typedef struct ToneState {
	ToneContext _field1;
	ToneContext _field2;
} ToneState;

typedef struct AMPTonePlayerIvars {
	OpaqueAudioComponentInstance* _field1;
	BOOL _field2;
	struct {
		unsigned _field1;
		unsigned _field2;
		ToneState _field3;
	} _field3;
	unsigned _field4;
} AMPTonePlayerIvars;

typedef struct AMPVideoRenderViewIvars {
	id _field1;
	BOOL _field2;
	id _field3;
	id _field4;
	id _field5;
	id _field6;
	BOOL _field7;
	int _field8;
	unsigned _field9;
	unsigned _field10[3];
	id _field11;
	CGSize _field12;
	CGRect _field13;
	void* _field14;
	int _field15;
	int _field16;
	int _field17;
	BOOL _field18;
	int _field19;
	unsigned _field20;
	unsigned _field21;
	unsigned _field22;
	unsigned _field23;
	unsigned _field24;
	unsigned _field25;
	id _field26;
} AMPVideoRenderViewIvars;

typedef struct AudioStreamBasicDescription {
	double _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned _field9;
} AudioStreamBasicDescription;

typedef struct SMPTETime {
	short _field1;
	short _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	short _field6;
	short _field7;
	short _field8;
	short _field9;
} SMPTETime;

typedef struct AudioTimeStamp {
	double _field1;
	unsigned long long _field2;
	double _field3;
	unsigned long long _field4;
	SMPTETime _field5;
	unsigned _field6;
	unsigned _field7;
} AudioTimeStamp;

typedef struct AudioBuffer {
	unsigned _field1;
	unsigned _field2;
	void* _field3;
} AudioBuffer;

typedef struct AudioBufferList {
	unsigned _field1;
	AudioBuffer _field2[1];
} AudioBufferList;

typedef struct {
	BOOL _field1[64];
	BOOL _field2[32];
	int _field3;
	int _field4;
	char* _field5;
	int _field6;
	int _field7;
	void* _field8;
} XXStruct_1LNtyB;

typedef struct AmpSvc AmpSvc;

typedef struct StdAmpCallHandle StdAmpCallHandle;

typedef struct _Plcrash__CrashReport {
	ProtobufCMessage _field1;
	Plcrash__CrashReport__SystemInfo* _field2;
	Plcrash__CrashReport__ApplicationInfo* _field3;
	unsigned _field4;
	Plcrash__CrashReport__Thread** _field5;
	unsigned _field6;
	Plcrash__CrashReport__BinaryImage** _field7;
	Plcrash__CrashReport__Exception* _field8;
	Plcrash__CrashReport__Signal* _field9;
	Plcrash__CrashReport__ProcessInfo* _field10;
	Plcrash__CrashReport__MachineInfo* _field11;
	Plcrash__CrashReport__ReportInfo* _field12;
} Plcrash__CrashReport;

typedef struct _PLCrashReportDecoder {
	Plcrash__CrashReport* _field1;
} PLCrashReportDecoder;

typedef struct _ProtobufCMessageDescriptor ProtobufCMessageDescriptor;

typedef struct _ProtobufCMessageUnknownField ProtobufCMessageUnknownField;

typedef struct _ProtobufCMessage {
	ProtobufCMessageDescriptor* _field1;
	unsigned _field2;
	ProtobufCMessageUnknownField* _field3;
} ProtobufCMessage;

typedef struct _Plcrash__CrashReport__SystemInfo {
	ProtobufCMessage _field1;
	int _field2;
	int _field3;
	char* _field4;
	int _field5;
	long long _field6;
	char* _field7;
} Plcrash__CrashReport__SystemInfo;

typedef struct _Plcrash__CrashReport__ApplicationInfo {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
} Plcrash__CrashReport__ApplicationInfo;

typedef struct _Plcrash__CrashReport__Thread Plcrash__CrashReport__Thread;

typedef struct _Plcrash__CrashReport__BinaryImage Plcrash__CrashReport__BinaryImage;

typedef struct _Plcrash__CrashReport__Exception {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
	unsigned _field4;
	Plcrash__CrashReport__Thread__StackFrame** _field5;
} Plcrash__CrashReport__Exception;

typedef struct _Plcrash__CrashReport__Signal {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
	unsigned long long _field4;
} Plcrash__CrashReport__Signal;

typedef struct _Plcrash__CrashReport__ProcessInfo {
	ProtobufCMessage _field1;
	char* _field2;
	unsigned _field3;
	char* _field4;
	char* _field5;
	unsigned _field6;
	int _field7;
} Plcrash__CrashReport__ProcessInfo;

typedef struct _Plcrash__CrashReport__MachineInfo {
	ProtobufCMessage _field1;
	char* _field2;
	Plcrash__CrashReport__Processor* _field3;
	unsigned _field4;
	unsigned _field5;
} Plcrash__CrashReport__MachineInfo;

typedef struct _Plcrash__CrashReport__ReportInfo {
	ProtobufCMessage _field1;
	char* _field2;
} Plcrash__CrashReport__ReportInfo;

typedef struct _Plcrash__CrashReport__Processor {
	ProtobufCMessage _field1;
	int _field2;
	int _field3;
	unsigned long long _field4;
	unsigned long long _field5;
} Plcrash__CrashReport__Processor;

typedef struct _Plcrash__CrashReport__Thread__StackFrame {
	ProtobufCMessage _field1;
	unsigned long long _field2;
} Plcrash__CrashReport__Thread__StackFrame;

typedef struct PLCrashReporterCallbacks {
	unsigned short _field1;
	void* _field2;
	/*function-pointer*/ void* _field3;
} PLCrashReporterCallbacks;

typedef struct __darwin_sigaltstack {
	void* ss_sp;
	unsigned ss_size;
	int ss_flags;
} darwin_sigaltstack;

typedef struct opaqueCMFormatDescription opaqueCMFormatDescription;

typedef union {
	NSMutableData* data;
	struct {
		NSString* path;
		NSFileHandle* handle;
	} file;
} XXUnion_6XAQHD;

typedef struct __CVBuffer* CVBufferRef;

typedef struct {
	XXStruct_pwHToB start;
	XXStruct_pwHToB duration;
} XXStruct_yD8eWC;

typedef struct __CFHTTPMessage* CFHTTPMessageRef;

typedef struct _CFHTTPAuthentication* CFHTTPAuthenticationRef;

typedef struct __SecIdentity SecIdentity;

typedef struct {
	int version;
	void* info;
	/*function-pointer*/ void* retain;
	/*function-pointer*/ void* release;
	/*function-pointer*/ void* copyDescription;
} XXStruct_4pnlqD;

typedef struct __CFString* CFStringRef;

typedef struct __aslclient aslclient;

typedef struct sqlite3 sqlite3;

typedef struct sqlite3_stmt sqlite3_stmt;

typedef struct __SecRandom SecRandom;

typedef struct JKHashTableEntry {
	unsigned _field1;
	id _field2;
	id _field3;
} JKHashTableEntry;

typedef struct JKConstPtrRange {
	char* _field1;
	unsigned _field2;
} JKConstPtrRange;

typedef struct JKConstBuffer {
	JKConstPtrRange _field1;
} JKConstBuffer;

typedef struct JKTokenCacheItem* JKTokenCacheItemRef;

typedef struct JKTokenValue {
	JKConstPtrRange _field1;
	unsigned _field2;
	unsigned _field3;
	union {
		long long _field1;
		unsigned long long _field2;
		double _field3;
	} _field4;
	JKTokenCacheItemRef _field5;
} JKTokenValue;

typedef struct JKPtrRange {
	char* _field1;
	unsigned _field2;
} JKPtrRange;

typedef struct JKManagedBuffer {
	JKPtrRange _field1;
	unsigned _field2;
	unsigned _field3;
} JKManagedBuffer;

typedef struct JKParseToken {
	JKConstPtrRange _field1;
	unsigned _field2;
	JKTokenValue _field3;
	JKManagedBuffer _field4;
} JKParseToken;

typedef struct JKObjectStack {
	void** _field1;
	void** _field2;
	unsigned* _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
} JKObjectStack;

typedef struct JKTokenCache {
	JKTokenCacheItemRef _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned char _field4[1024];
} JKTokenCache;

typedef struct JKObjCImpCache {
	Class _field1;
	/*function-pointer*/ void* _field2;
	/*function-pointer*/ void* _field3;
} JKObjCImpCache;

typedef struct JKParseState {
	unsigned _field1;
	JKConstBuffer _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	JKParseToken _field9;
	JKObjectStack _field10;
	JKTokenCache _field11;
	JKObjCImpCache _field12;
	id _field13;
	int _field14;
	BOOL _field15;
} JKParseState;

typedef struct JKFastClassLookup {
	void* _field1;
	void* _field2;
	void* _field3;
	void* _field4;
	void* _field5;
} JKFastClassLookup;

typedef struct JKEncodeCache {
	id _field1;
	unsigned _field2;
	unsigned _field3;
} JKEncodeCache;

typedef struct JKEncodeState {
	JKManagedBuffer _field1;
	JKManagedBuffer _field2;
	unsigned _field3;
	JKFastClassLookup _field4;
	JKEncodeCache _field5[1024];
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	id _field9;
	id _field10;
	SEL _field11;
	/*function-pointer*/ void* _field12;
	id _field13;
	/*function-pointer*/ void _field14;
} JKEncodeState;

typedef struct LCJKParseState {
	unsigned _field1;
	JKConstBuffer _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	JKParseToken _field9;
	JKObjectStack _field10;
	JKTokenCache _field11;
	JKObjCImpCache _field12;
	id _field13;
	int _field14;
	BOOL _field15;
} LCJKParseState;

typedef struct CATransform3D {
	float m11;
	float m12;
	float m13;
	float m14;
	float m21;
	float m22;
	float m23;
	float m24;
	float m31;
	float m32;
	float m33;
	float m34;
	float m41;
	float m42;
	float m43;
	float m44;
} CATransform3D;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct in_addr {
	unsigned _field1;
} in_addr;

typedef struct sockaddr_in {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	in_addr _field4;
	BOOL _field5[8];
} sockaddr_in;

typedef struct tm_zip_s {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
} tm_zip_s;

typedef struct {
	tm_zip_s _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
} XXStruct_z_NMMB;

typedef struct zbar_image_s zbar_image_s;

typedef struct CGImage* CGImageRef;

typedef struct zbar_image_scanner_s zbar_image_scanner_s;

typedef struct zbar_symbol_s zbar_symbol_s;

typedef struct zbar_symbol_set_s zbar_symbol_set_s;

typedef struct IImage {
	/*function-pointer*/ void** _field1;
} IImage;

typedef struct spdylay_map_entry spdylay_map_entry;

typedef struct {
	void** _field1;
	unsigned _field2;
	unsigned _field3;
	/*function-pointer*/ void* _field4;
} XXStruct_h4Ai9C;

typedef struct spdylay_buffer_chunk {
	char* _field1;
	spdylay_buffer_chunk* _field2;
} spdylay_buffer_chunk;

typedef struct spdylay_buffer_chunk spdylay_buffer_chunk;

typedef struct {
	z_stream_s _field1;
	unsigned short _field2;
} XXStruct_jCQcJC;

typedef struct spdylay_origin spdylay_origin;

typedef struct spdylay_session {
	unsigned short _field1;
	unsigned char _field2;
	unsigned _field3;
	int _field4;
	unsigned _field5;
	long long _field6;
	struct {
		spdylay_map_entry* _field1;
		unsigned _field2;
	} _field7;
	unsigned _field8;
	unsigned _field9;
	XXStruct_h4Ai9C _field10;
	XXStruct_h4Ai9C _field11;
	struct {
		CGPoint* _field1;
		char* _field2;
		unsigned _field3;
		unsigned _field4;
		unsigned _field5;
	} _field12;
	struct {
		int _field1;
		unsigned char _field2[8];
		unsigned _field3;
		char* _field4;
		unsigned _field5;
		unsigned _field6;
		unsigned _field7;
		unsigned _field8;
		struct {
			unsigned _field1;
			spdylay_buffer_chunk _field2;
			spdylay_buffer_chunk* _field3;
			unsigned _field4;
			unsigned _field5;
		} _field9;
		int _field10;
	} _field13;
	char* _field14;
	unsigned _field15;
	XXStruct_jCQcJC _field16;
	XXStruct_jCQcJC _field17;
	unsigned _field18;
	unsigned char _field19;
	int _field20;
	unsigned char _field21;
	unsigned _field22[9];
	unsigned _field23[9];
	unsigned _field24;
	unsigned _field25;
	struct {
		spdylay_origin** _field1;
		unsigned _field2;
		unsigned _field3;
		unsigned _field4;
	} _field26;
	struct {
		/*function-pointer*/ void* _field1;
		/*function-pointer*/ void* _field2;
		/*function-pointer*/ void* _field3;
		/*function-pointer*/ void* _field4;
		/*function-pointer*/ void* _field5;
		/*function-pointer*/ void* _field6;
		/*function-pointer*/ void* _field7;
		/*function-pointer*/ void* _field8;
		/*function-pointer*/ void* _field9;
		/*function-pointer*/ void* _field10;
		/*function-pointer*/ void* _field11;
		/*function-pointer*/ void* _field12;
		/*function-pointer*/ void* _field13;
		/*function-pointer*/ void* _field14;
		/*function-pointer*/ void* _field15;
		/*function-pointer*/ void* _field16;
		/*function-pointer*/ void* _field17;
	} _field27;
	void* _field28;
} spdylay_session;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct {
	struct {
		unsigned short _field1;
		unsigned short _field2;
		unsigned char _field3;
		int _field4;
	} _field1;
	int _field2;
	int _field3;
	unsigned char _field4;
	unsigned char _field5;
	char** _field6;
} XXStruct_7rsQpC;

typedef struct _tagEFFECTTRANSFER {
	int _field1;
	char* _field2;
	char* _field3;
	int _field4;
	int _field5;
	int _field6;
	int _field7;
	int _field8;
	int _field9;
	int _field10;
} tagEFFECTTRANSFER;

typedef struct __SecKey SecKey;

typedef struct _Plcrash__CrashReport__ApplicationInfo {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
	char* _field4;
	int _field5;
	long long _field6;
} Plcrash__CrashReport__ApplicationInfo;

typedef struct _Plcrash__CrashReport__Thread__StackFrame {
	ProtobufCMessage _field1;
	unsigned long long _field2;
	char* _field3;
	int _field4;
	unsigned long long _field5;
} Plcrash__CrashReport__Thread__StackFrame;

typedef struct _CCCryptor* CCCryptorRef;

typedef struct __CTFont* CTFontRef;

@protocol NSCoding
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
@end

@protocol UITableViewDataSource <NSObject>
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
@optional
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
@end

@protocol UIScrollViewDelegate <NSObject>
@optional
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
@end

@protocol NSObject
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(Class)superclass;
-(Class)class;
-(id)self;
-(NSZone*)zone;
-(id)performSelector:(SEL)selector;
-(id)performSelector:(SEL)selector withObject:(id)object;
-(id)performSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(BOOL)isProxy;
-(BOOL)isKindOfClass:(Class)aClass;
-(BOOL)isMemberOfClass:(Class)aClass;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)respondsToSelector:(SEL)selector;
-(id)retain;
-(oneway void)release;
-(id)autorelease;
-(unsigned)retainCount;
-(id)description;
-(id)debugDescription;
@end

@protocol NLMessageContentSelectable <NSObject>
@property(assign, nonatomic, getter=isSelected) BOOL selected;
@end

@protocol UITextFieldDelegate <NSObject>
@optional
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

@protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(BOOL)textView:(id)view shouldInteractWithTextAttachment:(id)textAttachment inRange:(NSRange)range;
-(BOOL)textView:(id)view shouldInteractWithURL:(id)url inRange:(NSRange)range;
-(void)textViewDidChangeSelection:(id)textView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
@end

@protocol NSFetchedResultsControllerDelegate
@optional
-(id)controller:(id)controller sectionIndexTitleForSectionName:(id)sectionName;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)controller:(id)controller didChangeSection:(id)section atIndex:(unsigned)index forChangeType:(unsigned)changeType;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
@end

@protocol UIActionSheetDelegate <NSObject>
@optional
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

@protocol UIAlertViewDelegate <NSObject>
@optional
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@protocol UINavigationControllerDelegate <NSObject>
@optional
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(id)navigationController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)navigationControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)navigationControllerSupportedInterfaceOrientations:(id)orientations;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@protocol NLGrowingTextViewDelegate <NSObject>
@optional
-(void)growingTextViewDidTapTextView:(id)growingTextView;
-(void)growingTextViewIsGoingToExceedInputMaxLength:(id)exceedInputMaxLength;
-(BOOL)growingTextViewShouldReturn:(id)growingTextView;
-(void)growingTextViewDidChangeSelection:(id)growingTextView;
-(void)growingTextView:(id)view didChangeHeight:(float)height;
-(void)growingTextView:(id)view willChangeHeight:(float)height;
-(void)growingTextViewDidChange:(id)growingTextView;
-(BOOL)growingTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)growingTextViewDidEndEditing:(id)growingTextView;
-(void)growingTextViewDidBeginEditing:(id)growingTextView;
-(BOOL)growingTextViewShouldEndEditing:(id)growingTextView;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
@end

@protocol FileAttachmentDelegate
-(void)attachImage:(id)image withPicker:(id)picker;
-(void)attachImage:(id)image;
-(void)attachLocation:(id)location;
@optional
-(void)attachedMedia;
@end

@protocol LineKeyboardDelegate <NSObject>
-(void)lineKeyboard:(id)keyboard stickerTapped:(int)tapped;
-(void)lineKeyboardDidDeleteBackwards:(id)lineKeyboard;
-(void)lineKeyboardWillDeleteBackwards:(id)lineKeyboard;
@end

@protocol ABUnknownPersonViewControllerDelegate <NSObject>
-(void)unknownPersonViewController:(id)controller didResolveToPerson:(void*)person;
@optional
-(BOOL)unknownPersonViewController:(id)controller shouldPerformDefaultActionForPerson:(void*)person property:(int)property identifier:(int)identifier;
@end

@protocol ABPeoplePickerNavigationControllerDelegate <NSObject>
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
@end

@protocol UIGestureRecognizerDelegate <NSObject>
@optional
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
@end

@protocol MessageViewCellActionDelegate <NSObject>
@optional
-(void)cell:(id)cell attributedLabel:(id)label linkLongTapped:(id)tapped url:(id)url type:(unsigned)type;
-(void)cell:(id)cell attributedLabel:(id)label linkTapped:(id)tapped url:(id)url type:(unsigned)type;
@end

@protocol NLProfilePopupViewerDelegate <NSObject>
@optional
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)profilePopupViewer:(id)viewer willSelectButtonItem:(id)item;
@end

@protocol LocationDetailViewControllerDelegate <NSObject>
-(void)dismissOrPopSelfAndShareLocation:(id)location;
@end

@protocol LineProgressDelegate <NSObject>
@optional
-(void)progressViewCancelled:(id)cancelled;
@end

@protocol NMTextSelectorViewVisibilityDelegate <NSObject>
-(BOOL)selectorView:(id)view isVisibleAt:(CGPoint)at;
@end

@protocol NLChatMenuViewControllerDelegate <NSObject>
-(id)chatMenuViewController:(id)controller didSelectItem:(id)item;
@optional
-(void)chatMenuViewControllerDidCanceled:(id)chatMenuViewController;
-(void)chatMenuViewController:(id)controller didPressChatMenuButton:(id)button withStateOpened:(BOOL)stateOpened;
@end

@protocol FriendsPickerViewControllerDelegate <NSObject>
-(void)friendsPickerViewController:(id)controller didFinishPickingItems:(id)items;
@optional
-(void)friendsPickerViewControllerDidCancel:(id)friendsPickerViewController;
@end

@protocol VoiceMessageControllerDelegate <NSObject>
@optional
-(void)controllerHideControl:(id)control;
-(void)controllerShowControl:(id)control;
@end

@protocol NLMessageAudioViewDelegate <NSObject>
-(void)messageAudioView:(id)view exportButtonTapped:(id)tapped;
-(void)messageAudioView:(id)view playButtonTapped:(id)tapped;
@end

@protocol MFMailComposeViewControllerDelegate <NSObject>
@optional
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

@protocol NLMessageInputBarDelegate <NSObject>
-(void)onSendMessageBar:(id)bar;
@optional
-(void)onToggleMessageBar:(id)bar;
-(void)onAttachMessageBar:(id)bar;
@end

@protocol ImageMapReloadViewDelegate <NSObject>
-(void)ImageMapReloadViewTappedReloadButton:(id)button;
@end

@protocol MKMapViewDelegate <NSObject>
@optional
-(void)mapView:(id)view didAddOverlayViews:(id)views;
-(id)mapView:(id)view viewForOverlay:(id)overlay;
-(void)mapView:(id)view didAddOverlayRenderers:(id)renderers;
-(id)mapView:(id)view rendererForOverlay:(id)overlay;
-(void)mapView:(id)view didChangeUserTrackingMode:(int)mode animated:(BOOL)animated;
-(void)mapView:(id)view annotationView:(id)view2 didChangeDragState:(unsigned)state fromOldState:(unsigned)oldState;
-(void)mapView:(id)view didFailToLocateUserWithError:(id)error;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)mapViewDidStopLocatingUser:(id)mapView;
-(void)mapViewWillStartLocatingUser:(id)mapView;
-(void)mapView:(id)view didDeselectAnnotationView:(id)view2;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(void)mapView:(id)view annotationView:(id)view2 calloutAccessoryControlTapped:(id)tapped;
-(void)mapView:(id)view didAddAnnotationViews:(id)views;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapViewDidFinishRenderingMap:(id)mapView fullyRendered:(BOOL)rendered;
-(void)mapViewWillStartRenderingMap:(id)mapView;
-(void)mapViewDidFailLoadingMap:(id)mapView withError:(id)error;
-(void)mapViewDidFinishLoadingMap:(id)mapView;
-(void)mapViewWillStartLoadingMap:(id)mapView;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
@end

@protocol MKReverseGeocoderDelegate <NSObject>
-(void)reverseGeocoder:(id)geocoder didFailWithError:(id)error;
-(void)reverseGeocoder:(id)geocoder didFindPlacemark:(id)placemark;
@end

@protocol LineCoinHistoryFooterDelegate
-(void)footerEvent:(int)event;
@end

@protocol LAAlbumDataDelegate <NSObject>
-(void)fullFetchAlbumList:(id)list lastDict:(id)dict groupID:(id)anId;
-(void)updatedAlbumList:(id)list lastDict:(id)dict groupID:(id)anId;
@end

@protocol UIBarPositioningDelegate <NSObject>
@optional
-(int)positionForBar:(id)bar;
@end

@protocol UISearchBarDelegate <UIBarPositioningDelegate>
@optional
-(void)searchBar:(id)bar selectedScopeButtonIndexDidChange:(int)selectedScopeButtonIndex;
-(void)searchBarResultsListButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarBookmarkButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
@end

@protocol MBBlockManagerDelegate <NSObject>
@optional
-(void)blockManager:(id)manager didFinishCommittingWithError:(id)error;
-(void)blockManager:(id)manager didFinishFetchingWithError:(id)error;
@end

@protocol MBActorObserving
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
@end

@protocol NLObjectStorageOpRequest <NSObject>
@property(retain, nonatomic) NSString* temporaryFileUploadPath;
@property(retain, nonatomic) NSString* temporaryFileDownloadPath;
@property(retain, nonatomic) NSString* downloadDestinationPath;
@property(readonly, assign, nonatomic) BOOL isFinished;
@property(readonly, assign, nonatomic) BOOL isCancelled;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSData* responseData;
@property(readonly, assign, nonatomic) NSString* responseString;
@property(readonly, assign, nonatomic) NSDictionary* responseHeaders;
@property(readonly, assign, nonatomic) int responseStatusCode;
@property(readonly, assign, nonatomic) NSDictionary* requestHeaders;
@property(assign, nonatomic) id<NLObjectStorageOpProgressDelegate> uploadProgressDelegate;
@property(copy, nonatomic) id uploadProgressBlock;
@property(copy, nonatomic) id downloadProgressBlock;
@property(copy, nonatomic) id failedBlock;
@property(copy, nonatomic) id completionBlock;
+(BOOL)isNetworkError:(id)error;
+(BOOL)isCanceledError:(id)error;
-(void)removeTemporaryUploadFile;
-(void)removeTemporaryDownloadFile;
-(void)setPostBodyFilePath:(id)path;
-(void)setShouldStreamPostDataFromDisk:(BOOL)streamPostDataFromDisk;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)addRequestHeader:(id)header value:(id)value;
-(void)setUserAgentString:(id)string;
-(void)setFile:(id)file forKey:(id)key;
-(void)setPostValue:(id)value forKey:(id)key;
-(void)setPostBodyParameters:(id)parameters;
-(void)setPostBodyString:(id)string;
-(void)setPostBody:(id)body;
-(void)setRequestMethod:(id)method;
-(void)setNumberOfTimesToRetryOnTimeout:(int)retryOnTimeout;
-(void)setShouldAttemptPersistentConnection:(BOOL)attemptPersistentConnection;
-(void)setTimeOutSeconds:(double)seconds;
-(void)setCachePolicy:(unsigned)policy;
-(void)setShouldContinueWhenAppEntersBackground:(BOOL)continueWhenAppEntersBackground;
-(void)setUserInfo:(id)info;
-(id)userInfo;
-(id)requestURL;
-(id)initWithURL:(id)url uploadFormData:(BOOL)data;
-(id)requestOperation;
-(id)requestOperationWith:(id)with;
-(id)retryOperationWith:(id)with;
@end

@protocol MBActivityContent <NSCoding>
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
@end

@protocol UITextInputTraits <NSObject>
@optional
@property(assign, nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property(assign, nonatomic) BOOL enablesReturnKeyAutomatically;
@property(assign, nonatomic) int returnKeyType;
@property(assign, nonatomic) int keyboardAppearance;
@property(assign, nonatomic) int keyboardType;
@property(assign, nonatomic) int spellCheckingType;
@property(assign, nonatomic) int autocorrectionType;
@property(assign, nonatomic) int autocapitalizationType;
@end

@protocol UIKeyInput <UITextInputTraits>
-(void)deleteBackward;
-(void)insertText:(id)text;
-(BOOL)hasText;
@end

@protocol MBDataManagerDelegate <NSObject>
@optional
-(void)dataManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)dataManager:(id)manager didFinishUpdatingWithError:(id)error;
@end

@protocol MBPostManagerDelegate <MBDataManagerDelegate>
@optional
-(void)postManager:(id)manager didFinishUpdatingPostWithPost:(id)post error:(id)error;
-(void)postManager:(id)manager didFinishCreatingPostForShareWithPost:(id)post error:(id)error;
-(void)postManager:(id)manager didFinishDeletingLikeWithError:(id)error;
-(void)postManager:(id)manager didFinishCreatingLikeWithError:(id)error;
-(void)postManager:(id)manager didFinishDeletingCommentWithError:(id)error;
-(void)postManager:(id)manager didFinishCreatingCommentWithError:(id)error;
-(void)postManager:(id)manager didFinishDeletingPostWithError:(id)error;
@end

@protocol MBPhotoCloseViewControllerDelegate <NSObject>
-(void)showAllImageButtonImageView;
-(void)setVisiblePhotoIndex:(int)index;
-(id)imageWithIndex:(int)index;
@end

@protocol NLCallSearchInfoDelegate <NSObject>
-(void)refreshCurrencyInfo:(id)info withOption:(id)option;
-(void)responseSearchResult:(id)result withOption:(id)option;
@end

@protocol MBActionable <NSObject>
-(BOOL)hasActions;
-(void)performActionWithName:(id)name sender:(id)sender userInfo:(id)info;
-(void)setActionWithName:(id)name block:(id)block;
@end

@protocol NMAttributedLabelDelegate <NSObject>
-(bool)noLinkTapped:(id)tapped;
-(void)attributedLabel:(id)label linkLongTapped:(id)tapped url:(id)url type:(unsigned)type;
-(void)attributedLabel:(id)label linkTapped:(id)tapped url:(id)url type:(unsigned)type;
@end

@protocol MBChildCellView <NSObject>
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
@end

@protocol MBMyHomeGroupFriendsPickerViewControllerDelegate <NSObject>
-(void)didFinishedPickFriends:(id)friends friends:(id)friends2;
@end

@protocol MBURLImageObserving
-(void)URLImage:(id)image didLoadImage:(id)image2 error:(id)error;
@end

@protocol MBLikeLayerViewDelegate <NSObject>
@optional
-(void)likeLayerView:(id)view didLikeButtonActionWithLikeType:(id)likeType;
@end

@protocol MBTableViewPullDelegate <NSObject>
@optional
-(void)startFetch:(id)fetch fetchCount:(int)count;
-(void)startUpdate:(id)update;
@end

@protocol MBActivityListManagerDelegate <MBDataManagerDelegate>
@optional
-(void)activityListManager:(id)manager didFinishDeletingActivity:(id)activity error:(id)error;
-(void)activityListManager:(id)manager didFinishCreatingLikeOnActivity:(id)activity error:(id)error;
@end

@protocol MBTimelineManagerDelegate <MBActivityListManagerDelegate>
@optional
-(void)timelineManager:(id)manager didFinishCreatingPostForShareWithPost:(id)post error:(id)error;
-(void)timelineManager:(id)manager didFinishAddHideWithError:(id)error;
-(void)timelineManager:(id)manager didFisnishUpdateStatusWithData:(id)data error:(id)error;
@end

@protocol LAPhotoErrorViewDelegate <NSObject>
-(void)photoErrorView:(id)view didTapRetryButton:(id)button;
@end

@protocol LABottomBarViewDelegate <NSObject>
-(void)bottomBarView:(id)view didTapButtonAtIndex:(unsigned)index;
@end

@protocol LAThumbnailsCellDelegate <NSObject>
-(BOOL)thumbnailCellDidTapCheckButtonAtIndex:(unsigned)thumbnailCell;
-(void)thumbnailCellDidTapThumbnailAtIndex:(unsigned)thumbnailCell;
@end

@protocol MFMessageComposeViewControllerDelegate <NSObject>
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
@end

@protocol NLThemeShopDownloadViewDelegate <NSObject>
-(id)downloadViewProduct;
-(void)downloadViewShowRegisterAlertView;
-(void)downloadView:(id)view didSelectedButtonType:(int)type;
@end

@protocol NLThemePackageManagerDelegate <NSObject>
-(void)themePackageDownloadFailed:(id)failed;
-(void)themePackageDownloadEnded:(id)ended;
-(void)themePackageDownloadStarted:(id)started;
-(void)themePackage:(id)package downloaded:(float)downloaded;
@optional
-(void)themePackageEndInstall:(id)install;
-(void)themePackageStartInatall:(id)inatall;
-(void)themePackageDownloadCancel:(id)cancel;
@end

@protocol LineStickerDataSource
-(void)stickerTapped:(id)tapped viewController:(id)controller;
-(id)lineStickerKeyboardInputViewDelegate:(id)delegate backgroundImage:(id)image;
-(id)lineStickerKeyboardInputViewDelegate:(id)delegate topBorder:(id)border;
-(BOOL)isStickerPackagePurchased:(id)purchased;
-(CGSize)sizeForKeyboardSticker:(id)keyboardSticker;
-(CGSize)sizeForRegularSticker:(id)regularSticker;
-(float)heightForKeyboardSticker:(id)keyboardSticker;
-(float)heightForRegularSticker:(id)regularSticker;
-(void)downloadImageForKeyboardSticker:(id)keyboardSticker completionBlock:(id)block;
-(void)downloadImageForRegularSticker:(id)regularSticker completionBlock:(id)block;
@end

@protocol UIWebViewDelegate <NSObject>
@optional
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@protocol SticonImageComponentDelegate <NSObject>
-(void)sticonDrawImage:(id)image PKG_CODE:(unsigned)code CODE:(unsigned)code3;
-(unsigned)sticonCODE;
-(unsigned)sticonPKG_CODE;
@end

@protocol NLPasswordInputViewDelegate <NSObject>
-(void)passwordInputView:(id)view didFinishInputPassword:(id)password;
@optional
-(id)passwordInputViewMinimumPasswordLengthErrorMessage:(id)message;
-(id)passwordInputViewPasswordMismatchErrorMessage:(id)message;
-(void)passwordInputView:(id)view textFieldDidEndEditing:(id)textField;
-(void)passwordInputView:(id)view textFieldDidBeginEditing:(id)textField;
-(void)passwordInputViewDidSkip:(id)passwordInputView;
@end

@protocol ItemSelectionViewControllerDelegate <NSObject>
-(void)itemSelectionViewController:(id)controller didCommitItem:(id)item atIndex:(int)index;
-(void)itemSelectionViewController:(id)controller didSelectItem:(id)item atIndex:(int)index;
@end

@protocol NLTextViewDelegate <UITextViewDelegate>
-(void)insertRawSticonString:(id)string;
@optional
-(void)textViewDidTapTextView:(id)textView;
@end

@protocol LineNavigationControllerDelegate <NSObject>
-(BOOL)shouldDismissViewController;
@end

@protocol StickerShopSegmentControllerDelegate <NSObject>
-(void)changeSegment:(id)segment;
@optional
-(void)tappedRightButton:(id)button;
@end

@protocol UISearchDisplayDelegate <NSObject>
@optional
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
@end

@protocol MBUIViewLayout <NSObject>
-(CGSize)preferredSize:(CGSize)size;
-(void)layout;
@end

@protocol UIApplicationDelegate <NSObject>
@optional
@property(retain, nonatomic) UIWindow* window;
-(void)application:(id)application didDecodeRestorableStateWithCoder:(id)coder;
-(void)application:(id)application willEncodeRestorableStateWithCoder:(id)coder;
-(BOOL)application:(id)application shouldRestoreApplicationState:(id)state;
-(BOOL)application:(id)application shouldSaveApplicationState:(id)state;
-(id)application:(id)application viewControllerWithRestorationIdentifierPath:(id)restorationIdentifierPath coder:(id)coder;
-(unsigned)application:(id)application supportedInterfaceOrientationsForWindow:(id)window;
-(void)applicationProtectedDataDidBecomeAvailable:(id)applicationProtectedData;
-(void)applicationProtectedDataWillBecomeUnavailable:(id)applicationProtectedData;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)application:(id)application handleEventsForBackgroundURLSession:(id)backgroundURLSession completionHandler:(id)handler;
-(void)application:(id)application performFetchWithCompletionHandler:(id)completionHandler;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification fetchCompletionHandler:(id)handler;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application willChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application didChangeStatusBarOrientation:(int)orientation;
-(void)application:(id)application willChangeStatusBarOrientation:(int)orientation duration:(double)duration;
-(void)applicationSignificantTimeChange:(id)change;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(BOOL)application:(id)application willFinishLaunchingWithOptions:(id)options;
-(void)applicationDidFinishLaunching:(id)application;
@end

@protocol PasscodeViewControllerDelegate <NSObject>
@optional
-(void)passcodeViewControllerDidChangePasscode:(id)passcodeViewController;
-(void)passcodeViewControllerRejected:(id)rejected;
-(void)passcodeViewControllerCancelled:(id)cancelled;
-(void)passcodeViewControllerUnlocked:(id)unlocked;
@end

@protocol UITabBarControllerDelegate <NSObject>
@optional
-(id)tabBarController:(id)controller animationControllerForTransitionFromViewController:(id)viewController toViewController:(id)viewController3;
-(id)tabBarController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)tabBarControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)tabBarControllerSupportedInterfaceOrientations:(id)orientations;
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willBeginCustomizingViewControllers:(id)controllers;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
@end

@protocol BWQuincyManagerDelegate <NSObject>
@optional
-(void)userDidChooseSendAlways;
-(void)willShowSubmitCrashReportAlert;
-(void)connectionClosed;
-(void)connectionOpened;
-(id)crashReportDescription;
-(id)crashReportContact;
-(id)crashReportUserID;
@end

@protocol LGPhotoViewDataSource <NSObject>
-(unsigned)numberOfAssets;
-(id)assetWithSection:(unsigned)section row:(unsigned)row;
-(unsigned)numberOfAssetsAtSection:(unsigned)section;
-(unsigned)numberOfAssetSections;
@optional
-(id)editedImageTempPath;
-(id)originalImageTempPath;
-(void)removeEditedImage;
-(void)setEditedImage:(id)image;
-(id)groupName;
-(id)tableView;
-(BOOL)isAssetsFullyLoaded;
@end

@protocol LGImageCropDataSource <NSObject>
-(id)assetWithSection:(unsigned)section row:(unsigned)row;
@end

@protocol LGInstantViewDelegate <NSObject>
-(void)refreshDataAnimated:(BOOL)animated;
-(void)didClickWithAreaId:(id)areaId action:(id)action;
-(id)assetsLibrary;
@end

@protocol HitokotoBalloonViewDelegate
-(void)hitokotoTouchUpInside:(id)inside;
@end

@protocol SWTableViewCellDelegate <NSObject>
@optional
-(void)swippableTableViewCell:(id)cell scrollingToState:(int)state;
-(void)swippableTableViewCell:(id)cell didTriggerRightUtilityButtonWithIndex:(int)index;
-(void)swippableTableViewCell:(id)cell didTriggerLeftUtilityButtonWithIndex:(int)index;
@end

@protocol NLOverlayViewDelegate <NSObject>
-(BOOL)shouldBlockGesturesByOverlayView:(id)view;
-(BOOL)pointInside:(CGPoint)inside inOverlayView:(id)overlayView withEvent:(id)event;
@end

@protocol UIImagePickerControllerDelegate <NSObject>
@optional
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
@end

@protocol LGImagePickerDelegate <UINavigationControllerDelegate, UIImagePickerControllerDelegate>
-(void)lgImagePickerControllerDidCancel:(id)lgImagePickerController;
-(void)lgImagePickerController:(id)controller didFinishPickingMediaWithInfos:(id)infos;
@optional
-(BOOL)lgImagePickerController:(id)controller shouldSelectAssetForRatio:(float)ratio;
-(void)lgImagePickerController:(id)controller didSavedAlbumAssetsRefreshedWithLastAssets:(id)lastAssets;
-(void)lgImagePickerController:(id)controller didSavedAlbumAssetsRefreshedAfterDate:(id)date;
-(void)lgImagePickerController:(id)controller didMoveOnGalleryEnd:(int)end assetsCount:(int)count;
-(void)lgImagePickerController:(id)controller didClickWithAreaId:(id)areaId action:(id)action;
-(void)lgImagePickerControllerDidReachMaxLimit:(id)lgImagePickerController;
-(void)lgImagePickerControllerDidSelectOverPlayTimeVideo:(id)lgImagePickerController;
@end

@protocol LineStickerPackageManagerDelegate <NSObject>
-(void)stickerPackage:(id)package movedFromIndex:(unsigned)index toIndex:(unsigned)index3;
-(void)stickerPackageRemoved:(id)removed;
-(void)stickerPackageChanged:(id)changed;
-(void)stickerPackageAddedToKeyboard:(id)keyboard;
@end

@protocol LineSticonPackageManagerDelegate <NSObject>
-(void)sticonPackage:(id)package movedFromIndex:(unsigned)index toIndex:(unsigned)index3;
-(void)sticonPackageRemoved:(id)removed;
-(void)sticonPackageChanged:(id)changed;
-(void)sticonPackageAddedToKeyboard:(id)keyboard;
@end

@protocol MapOverlayViewDelegate <NSObject>
-(void)mapOverlayViewSendMenuTapped;
@end

@protocol BuddyTableViewCellDelegate <NSObject>
@optional
-(void)buddyAddButtonWasPressed:(id)pressed;
-(void)friendCellHitokotoTouchUpInside:(id)inside;
@end

@protocol NLMultiInvitationCellDelegate <NSObject>
@optional
-(void)multiInvitationCellInviteButtonTapped:(id)tapped;
-(void)multiInvitationCellTapped:(id)tapped;
@end

@protocol ASIHTTPRequestDelegate <NSObject>
@optional
-(void)proxyAuthenticationNeededForRequest:(id)request;
-(void)authenticationNeededForRequest:(id)request;
-(void)request:(id)request didReceiveData:(id)data;
-(void)requestRedirected:(id)redirected;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request willRedirectToURL:(id)url;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)requestStarted:(id)started;
@end

@protocol ASIProgressDelegate <NSObject>
@optional
-(void)request:(id)request incrementUploadSizeBy:(long long)by;
-(void)request:(id)request incrementDownloadSizeBy:(long long)by;
-(void)request:(id)request didSendBytes:(long long)bytes;
-(void)request:(id)request didReceiveBytes:(long long)bytes;
-(void)setProgress:(float)progress;
@end

@protocol NJSURLImageObserving
-(void)URLImage:(id)image didLoadImage:(id)image2 error:(id)error;
@end

@protocol NLCallSettingInfoDelegate <NSObject>
-(id)getMyAccountText;
-(id)getCreditBalance;
@end

@protocol NLCallCountryListDelegate <NSObject>
-(void)eventInvoker:(id)invoker dismissWithSelectionInfo:(id)selectionInfo;
@end

@protocol ZBarReaderDelegate <UIImagePickerControllerDelegate>
@optional
-(void)readerControllerDidFailToRead:(id)readerController withRetry:(BOOL)retry;
@end

@protocol ZBarReaderViewDelegate <NSObject>
-(void)readerView:(id)view didReadSymbols:(id)symbols fromImage:(id)image;
@optional
-(void)readerView:(id)view didStopWithError:(id)error;
-(void)readerViewDidStart:(id)readerView;
@end

@protocol CLLocationManagerDelegate <NSObject>
@optional
-(void)locationManager:(id)manager didFinishDeferredUpdatesWithError:(id)error;
-(void)locationManagerDidResumeLocationUpdates:(id)locationManager;
-(void)locationManagerDidPauseLocationUpdates:(id)locationManager;
-(void)locationManager:(id)manager didStartMonitoringForRegion:(id)region;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)locationManager:(id)manager monitoringDidFailForRegion:(id)monitoring withError:(id)error;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didExitRegion:(id)region;
-(void)locationManager:(id)manager didEnterRegion:(id)region;
-(void)locationManager:(id)manager rangingBeaconsDidFailForRegion:(id)rangingBeacons withError:(id)error;
-(void)locationManager:(id)manager didRangeBeacons:(id)beacons inRegion:(id)region;
-(void)locationManager:(id)manager didDetermineState:(int)state forRegion:(id)region;
-(BOOL)locationManagerShouldDisplayHeadingCalibration:(id)locationManager;
-(void)locationManager:(id)manager didUpdateHeading:(id)heading;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
@end

@protocol LAAlbumModelObserving <NSObject>
@optional
-(void)launchGallery:(id)gallery groupID:(id)anId;
-(void)updateAlbumNotificationAPIError:(id)error albumID:(id)anId groupID:(id)anId3;
-(void)updateAlbumNotificationDeleted:(id)deleted groupID:(id)anId;
-(void)updateAlbumNotificationPhotoAddCompleted:(id)completed groupID:(id)anId;
-(void)updateAlbumNotificationURLConnectedPhotoList:(id)list shouldReload:(BOOL)reload;
-(void)updateAlbumNotificationCachedPhotoList:(id)list;
-(void)updateAlbumNotificationURLConnectedAlbumList:(id)list shouldReload:(BOOL)reload albumUpdated:(BOOL)updated;
-(void)updateAlbumNotificationCachedAlbumList:(id)list;
@end

@protocol LASyncStatusObserving
@optional
-(void)syncOBSNotificationPhotoAddCanceled:(id)canceled groupID:(id)anId packageType:(int)type;
-(void)syncOBSNotificationPhotoAddFailed:(id)failed groupID:(id)anId error:(id)error;
-(void)syncOBSNotificationPhotoAddCompleted:(id)completed groupID:(id)anId;
-(void)syncOBSNotificationPhotoProgress:(float)progress albumID:(id)anId groupID:(id)anId3;
-(void)syncOBSNotificationPhotoAdd:(id)add added:(int)added total:(int)total albumID:(id)anId groupID:(id)anId5 error:(id)error;
@end

@protocol LAPhotoListTitleViewDelegate <NSObject>
-(void)photoListTitleView:(id)view didTapFoldButton:(id)button;
@end

@protocol LAPhotoOptionViewDelegate <NSObject>
-(void)photoOptionView:(id)view didTapOptionType:(int)type;
@end

@protocol LAAlbumAddPhotosViewDelegate <NSObject>
-(void)albumPhotoChooseCompleted:(int)completed;
@end

@protocol NMTextSelectorViewDelegate <NSObject>
-(void)selectorViewSelectionEnded;
-(void)selectorViewResignSelectorViewDelegate;
-(void)selectorViewEndSelectorMoved:(CGPoint)moved;
-(void)selectorViewStartSelectorMoved:(CGPoint)moved;
@end

@protocol UIInputViewAudioFeedback <NSObject>
@optional
@property(readonly, assign, nonatomic) BOOL enableInputClicksWhenVisible;
@end

@protocol LineEmojiKeyboardScrollViewDelegate <NSObject>
-(void)deleteEmoji:(id)emoji;
@end

@protocol MBHiddenManagerDelegate <NSObject>
@optional
-(void)hiddenManager:(id)manager didFinishRequestHideListWithData:(id)data error:(id)error;
-(void)hiddenManager:(id)manager didFinishDelHideWithData:(id)data error:(id)error;
-(void)hiddenManager:(id)manager didFinishAddHideWithError:(id)error;
-(void)hiddenManager:(id)manager didFinishUpdateAutoOpenWithError:(id)error;
-(void)hiddenManager:(id)manager didFinishRequestAutoOpenWithError:(id)error;
@end

@protocol LAPhotoNavigationViewDelegate <NSObject>
@optional
-(void)photoNavigationView:(id)view didTapCheckButton:(id)button;
-(void)photoNavigationView:(id)view didTapBackButton:(id)button;
-(void)photoNavigationView:(id)view didTapCloseButton:(id)button;
@end

@protocol LAPagingScrollViewDelegate <NSObject>
-(id)photoViewDataSource;
@optional
-(void)pagingScrollViewDidStartDragging;
-(void)pagingScrollViewDidChangeIndex;
-(void)pagingScrollViewDidChangePhotoGroup:(BOOL)pagingScrollView;
-(void)pagingScrollViewDidTilePages:(int)pagingScrollView total:(unsigned)total;
@end

@protocol LEGYUserBehaviorLoggerExternal <NSObject>
-(void)log:(long long)log param1:(int)a1 value1:(id)a13 param2:(int)a2 value2:(id)a25;
-(void)log:(long long)log param1:(int)a1 value1:(id)a13;
-(void)log:(long long)log;
@end

@protocol CarrierChangeDelegate
-(void)changedCarrier:(id)carrier;
@end

@protocol CountryViewChangeDelegate
-(void)changedCountry:(id)country;
@end

@protocol LGProgressHUDDelegate <NSObject>
@optional
-(void)hudWasHidden;
-(void)hudWasHidden:(id)hidden;
@end

@protocol NSXMLParserDelegate <NSObject>
@optional
-(void)parser:(id)parser validationErrorOccurred:(id)occurred;
-(void)parser:(id)parser parseErrorOccurred:(id)occurred;
-(id)parser:(id)parser resolveExternalEntityName:(id)name systemID:(id)anId;
-(void)parser:(id)parser foundCDATA:(id)cdata;
-(void)parser:(id)parser foundComment:(id)comment;
-(void)parser:(id)parser foundProcessingInstructionWithTarget:(id)target data:(id)data;
-(void)parser:(id)parser foundIgnorableWhitespace:(id)whitespace;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndMappingPrefix:(id)prefix;
-(void)parser:(id)parser didStartMappingPrefix:(id)prefix toURI:(id)uri;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parser:(id)parser foundExternalEntityDeclarationWithName:(id)name publicID:(id)anId systemID:(id)anId4;
-(void)parser:(id)parser foundInternalEntityDeclarationWithName:(id)name value:(id)value;
-(void)parser:(id)parser foundElementDeclarationWithName:(id)name model:(id)model;
-(void)parser:(id)parser foundAttributeDeclarationWithName:(id)name forElement:(id)element type:(id)type defaultValue:(id)value;
-(void)parser:(id)parser foundUnparsedEntityDeclarationWithName:(id)name publicID:(id)anId systemID:(id)anId4 notationName:(id)name5;
-(void)parser:(id)parser foundNotationDeclarationWithName:(id)name publicID:(id)anId systemID:(id)anId4;
-(void)parserDidEndDocument:(id)parser;
-(void)parserDidStartDocument:(id)parser;
@end

@protocol CurrentPositionMenuViewDelegate <NSObject>
-(void)menuTapped:(id)tapped;
@end

@protocol LGPhotoScrollViewDelegate <NSObject>
-(void)stopLoadingIndicator:(unsigned)indicator;
-(void)startLoadingIndicator:(unsigned)indicator;
-(void)cancelPreloadQueue;
-(void)loadFullScreenImageAtIndex:(unsigned)index;
-(void)preloadAssets:(unsigned)assets;
@optional
-(void)didDisplayFullImage:(id)image;
-(id)imagePickerController;
@end

@protocol LGEndTopMenuBarViewDelegate <NSObject>
-(void)didTapRightButtonInMenuBar:(id)menuBar;
-(void)didTapLeftButtonInMenuBar:(id)menuBar;
@end

@protocol EmailPasswordDelegate
-(void)changeFocus:(int)focus in:(BOOL)anIn;
-(void)clickConfirm:(id)confirm password:(id)password;
@optional
-(void)lastFieldDidEndEditing;
-(void)naverInfo;
@end

@protocol MKAnnotation <NSObject>
@optional
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(readonly, copy, nonatomic) NSString* title;
@required
@property(readonly, assign, nonatomic) XXStruct_zYrK5D coordinate;
@optional
-(void)setCoordinate:(XXStruct_zYrK5D)coordinate;
@end

@protocol LCNoticeDelegate <NSObject>
-(void)moveToAppLinkURL:(id)appLinkURL;
@optional
-(void)didFinishShowNotifications;
-(void)showBannerWithNotificationInfo:(id)notificationInfo;
@end

@protocol LinePackageManagerDelegate <NSObject>
-(void)package:(id)package movedFromIndex:(unsigned)index toIndex:(unsigned)index3;
-(void)packageRemoved:(id)removed;
-(void)packageChanged:(id)changed;
-(void)packageAddedToKeyboard:(id)keyboard;
@end

@protocol NLStickerDownloadDelegate <NSObject>
@optional
-(void)stickerPackageDownloadFailed:(id)failed;
-(void)stickerPackageDownloadCanceled:(id)canceled;
-(void)stickerPackageDownloadSuccess:(id)success;
-(void)stickerPackage:(id)package downloaded:(float)downloaded;
-(void)stickerPackageJustDownloadEnded:(id)ended;
-(void)stickerPackageDownloadStarted:(id)started;
@end

@protocol PSTCollectionViewDelegate <UIScrollViewDelegate>
@optional
-(void)collectionView:(id)view performAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view canPerformAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view shouldShowMenuForItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingSupplementaryView:(id)view2 forElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didDeselectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldDeselectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldSelectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didUnhighlightItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didHighlightItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldHighlightItemAtIndexPath:(id)indexPath;
@end

@protocol PSTCollectionViewDelegateFlowLayout <PSTCollectionViewDelegate>
@optional
-(id)layoutAttributesForSupplementaryViewOfKind:(id)kind atIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForFooterInSection:(int)section;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForHeaderInSection:(int)section;
-(float)collectionView:(id)view layout:(id)layout minimumInteritemSpacingForSectionAtIndex:(int)index;
-(float)collectionView:(id)view layout:(id)layout minimumLineSpacingForSectionAtIndex:(int)index;
-(UIEdgeInsets)collectionView:(id)view layout:(id)layout insetForSectionAtIndex:(int)index;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
@end

@protocol PSTCollectionViewDataSource <NSObject>
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
@optional
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
@end

@protocol NLThemeListItemViewDelegate <NSObject>
-(void)onTap:(id)tap item:(id)item;
@end

@protocol LAProgressHUDDelegate <NSObject>
@optional
-(void)hudWasHidden:(id)hidden;
@end

@protocol UIDocumentInteractionControllerDelegate <NSObject>
@optional
-(BOOL)documentInteractionController:(id)controller performAction:(SEL)action;
-(BOOL)documentInteractionController:(id)controller canPerformAction:(SEL)action;
-(void)documentInteractionController:(id)controller didEndSendingToApplication:(id)application;
-(void)documentInteractionController:(id)controller willBeginSendingToApplication:(id)application;
-(void)documentInteractionControllerDidDismissOpenInMenu:(id)documentInteractionController;
-(void)documentInteractionControllerWillPresentOpenInMenu:(id)documentInteractionController;
-(void)documentInteractionControllerDidDismissOptionsMenu:(id)documentInteractionController;
-(void)documentInteractionControllerWillPresentOptionsMenu:(id)documentInteractionController;
-(void)documentInteractionControllerDidEndPreview:(id)documentInteractionController;
-(void)documentInteractionControllerWillBeginPreview:(id)documentInteractionController;
-(id)documentInteractionControllerViewForPreview:(id)preview;
-(CGRect)documentInteractionControllerRectForPreview:(id)preview;
-(id)documentInteractionControllerViewControllerForPreview:(id)preview;
@end

@protocol MigrationCodeViewControllerDelegate <NSObject>
-(void)migrationCodeViewController:(id)controller didFinishWithPincode:(id)pincode;
@end

@protocol ChannelLoadingFailedViewDelegate <NSObject>
@optional
-(void)loadingFailedViewDidRetryButtonTouched:(id)loadingFailedView;
-(void)loadingFailedViewDidCloseButtonTouched:(id)loadingFailedView;
@end

@protocol LineNetworkErrorViewDelegate
-(void)retry;
@end

@protocol CountryViewSelectDelegate
-(void)selectCountry:(id)country;
@end

@protocol SMSInfoViewDeleagete <NSObject>
-(void)didConfirmSMSInfoView:(id)view;
-(void)didCancelSMSInfoView:(id)view;
@end

@protocol UsableStickerListDelegate <NSObject>
-(void)usableStickerListDidUpdate:(id)usableStickerList;
@optional
-(void)usableStickerListFailedToUpdate:(id)update;
@end

@protocol LGAlbumsDataControllerDelegate <NSObject>
-(void)didChangeLazyAssetGroups;
-(void)willChangeLazyAssetGroups;
-(void)didChangeAssetGroups;
-(void)willChangeAssetGroups;
-(void)didLoadNumberOfAssets:(id)assets;
-(int)countOfViewControllers;
-(id)pickerConfig;
-(id)assetsLibrarySafeExecutor;
@end

@protocol MBNetworkService <NSObject>
-(void)requestWithUrlRequest:(id)urlRequest requestInfo:(id)info response:(id)response;
-(BOOL)canLegyRequest:(id)request;
@end

@protocol MBMyhomeGroupManagerDelegate <NSObject>
@optional
-(void)myhomeGroupManager:(id)manager didFinishSyncWithError:(id)error;
-(void)myhomeGroupManager:(id)manager didFinishMemberUpdated:(BOOL)updated error:(id)error;
-(void)myhomeGroupManager:(id)manager didFinishMembers:(id)members error:(id)error;
-(void)myhomeGroupManager:(id)manager didFinishUpdateWithError:(id)error;
-(void)myhomeGroupManager:(id)manager didFinishDeleteWithError:(id)error;
-(void)myhomeGroupManager:(id)manager didFinishCreateWithError:(id)error;
@end

@protocol SKPaymentTransactionObserver <NSObject>
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
@optional
-(void)paymentQueue:(id)queue updatedDownloads:(id)downloads;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueue:(id)queue removedTransactions:(id)transactions;
@end

@protocol NLShakeShakeSessionDelegate <NSObject>
-(void)shakeSessionResultsUpdated:(id)updated;
@end

@protocol LineProductPackageForKeyboard <NSObject>
-(id)keyboardOrder;
-(unsigned)keyboardActionStatus;
-(void)downloadSelectedTabImageCompletionBlock:(id)block;
-(void)downloadTabImageCompletionBlock:(id)block;
-(BOOL)isReadyToUse;
-(id)download;
-(BOOL)downloading;
-(BOOL)downloaded;
-(long long)ID;
@end

@protocol MBLikeListManagerDelegate <NSObject>
@optional
-(void)likeListManager:(id)manager didFisnishFetchLikeTypeWithData:(id)data error:(id)error;
@end

@protocol LVSnapMoviePickerControllerDelegate <NSObject>
-(void)lvSnapMoviePickerController:(id)controller didFinishPickingMovieWithURL:(id)url;
@optional
-(void)lvSnapMoviePickerControllerDidCancel:(id)lvSnapMoviePickerController;
@end

@protocol LALineImageObserving
-(void)lineImage:(id)image didLoadImage:(id)image2 error:(id)error;
@end

@protocol AVAudioRecorderDelegate <NSObject>
@optional
-(void)audioRecorderEndInterruption:(id)interruption;
-(void)audioRecorderEndInterruption:(id)interruption withFlags:(unsigned)flags;
-(void)audioRecorderEndInterruption:(id)interruption withOptions:(unsigned)options;
-(void)audioRecorderBeginInterruption:(id)interruption;
-(void)audioRecorderEncodeErrorDidOccur:(id)audioRecorderEncodeError error:(id)error;
-(void)audioRecorderDidFinishRecording:(id)audioRecorder successfully:(BOOL)successfully;
@end

@protocol AVAudioSessionDelegate <NSObject>
@optional
-(void)inputIsAvailableChanged:(BOOL)changed;
-(void)endInterruption;
-(void)endInterruptionWithFlags:(unsigned)flags;
-(void)beginInterruption;
@end

@protocol VoiceTalkControlDelegate <NSObject>
@optional
-(void)voiceTalkControlCallButtonTapped:(id)tapped;
-(void)voiceTalkControlClosed:(id)closed;
@end

@protocol NLVoiceRecordViewDelegate <NSObject>
@optional
-(void)voiceRecordViewDidCancelRecording:(id)voiceRecordView;
-(void)voiceRecordViewlDidEndRecording:(id)voiceRecordViewl;
-(void)voiceRecordViewDidBeginRecording:(id)voiceRecordView;
@end

@protocol SKRequestDelegate <NSObject>
@optional
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
@end

@protocol SKProductsRequestDelegate <SKRequestDelegate>
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
@end

@protocol NLSearchBarDelegate
@optional
-(void)searchBar:(id)bar didTapExtraButton:(id)button;
@end

@protocol AMPSessionDelegate <NSObject>
@end

@protocol AMPCallSessionDelegate <AMPSessionDelegate>
-(void)session:(id)session didReceiveCallEvent:(id)event;
@end

@protocol LineMoreManagerDelegate <NSObject>
-(void)lineMoreItemNewIconUpdated:(id)updated;
-(void)lineMoreItemDownloadFailed;
-(void)lineMoreItemsHasNoUpdate;
-(void)lineMoreItemsHasUpdated;
@optional
-(void)lineMoreitemCategoryCacheUpdated;
-(void)lineMoreItemBadgeCountMightBeUpdated;
@end

@protocol LAUploadedUserCellDelegate <NSObject>
-(unsigned)numberOfUploadedUsersPerRow;
-(void)uploadedUserCellDidTapMoreButton:(id)uploadedUserCell;
@end

@protocol MBCellViewLayout <NSObject>
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGRect)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
@end

@protocol MBPhotoCommentViewControllerDelegate <NSObject>
-(void)didFinishDeletingCommentWithError:(id)error;
-(void)didFinishCreateingCommentWithError:(id)error;
-(void)didFinishUpdatingWithError:(id)error;
-(void)didFinishFetchingWithError:(id)error;
-(void)viewWillRotate;
-(void)viewDidUnload;
-(void)viewDidDisappear;
-(void)viewWillAppear;
@end

@protocol SKStoreProductViewControllerDelegate <NSObject>
@optional
-(void)productViewControllerDidFinish:(id)productViewController;
@end

@protocol NLProfileStatusMessageViewDelegate
-(void)statusMessageTouchUpInside:(id)inside;
@end

@protocol NLProfilePopupViewControllerDelegate <NSObject>
-(void)profilePopupViewController:(id)controller tappedButtonItem:(id)item;
@optional
-(void)profilePopupViewController:(id)controller nameEditButtonTapped:(id)tapped;
-(void)profilePopupViewController:(id)controller favoriteButtonTapped:(id)tapped;
-(void)profilePopupViewController:(id)controller thumbnailTapped:(id)tapped;
-(void)profilePopupViewController:(id)controller phoneNumberButtonTapped:(id)tapped;
-(void)profilePopupViewControllerClosed:(id)closed;
@end

@protocol MBLineDelegate <NSObject>
-(BOOL)mbLineViewController:(id)controller shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
@end

@protocol LinePictureCropToolBarDelegate <NSObject>
-(void)actionCropToolBarChooseButton:(id)button;
-(void)actionCropToolBarCancelButton:(id)button;
@end

@protocol LineImageUploadProgressViewDelegate <NSObject>
-(void)actionImageUploadFailedButton:(id)button;
-(void)actionImageUploadCancelButton:(id)button;
@end

@protocol MBLineDataSource <NSObject>
-(int)photoSizeType;
@end

@protocol LAPhotoDataDelegate <NSObject>
-(void)updatedPhotoList:(id)list lastDict:(id)dict albumID:(id)anId groupID:(id)anId4;
-(void)fullFetchPhotoList:(id)list lastDict:(id)dict albumID:(id)anId groupID:(id)anId4;
@end

@protocol LineCafeDataSource <NSObject>
-(void)loadAndPlayMovieWithObsServiceCode:(id)obsServiceCode spaceId:(id)anId oid:(id)oid viewController:(id)controller;
-(void)requestWithUrlRequest:(id)urlRequest requestInfo:(id)info response:(id)response;
-(BOOL)isCallingByVOIP;
-(BOOL)canRecordVideo;
-(void)showAudioAlertOnlyOnceIfMicOffAndExcuteBlock:(id)block;
-(id)oneToOneNoteNewItemExistNotificationName;
-(id)groupNoteNewItemExistNotificationName;
-(id)nameOfMyHomeGroupChangeSelectedNotification;
-(id)imageForMBGroupSelectTabIconImage:(BOOL)mbgroupSelectTabIconImage highlighted:(BOOL)highlighted;
-(id)newMyHomeGroupSelectViewWithViewController:(id)viewController;
-(id)openChatMID;
-(void)channelTokenWithId:(id)anId withResultBlock:(id)resultBlock;
-(void)showStickerShop:(id)shop viewController:(id)controller;
-(CGSize)imageSizeForSticker:(id)sticker;
-(void)imageForSticker:(id)sticker withResultBlock:(id)resultBlock;
-(id)imageForSticker:(id)sticker;
-(void)selectStickerForWriteViewController:(id)writeViewController;
-(void)selectGroupForWriteViewController:(id)writeViewController;
-(void)selectLocationForWriteViewController:(id)writeViewController;
-(BOOL)viewController:(id)controller shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)myEncryptedAccessToken:(id)token;
-(void)thumbImage:(id)image imageType:(int)type withResultBlock:(id)resultBlock;
-(void)user:(id)user withResultBlock:(id)resultBlock;
-(id)myJoiningGroupArray;
-(id)urlScrapServerHost;
-(int)photoSizeType;
-(void)resetAccessToken;
-(id)lineAccessToken;
-(id)myAccessToken;
-(id)myName;
-(id)myMid;
-(BOOL)checkJoiningGroup:(id)group;
-(id)groupWithId:(id)anId;
@end

@protocol LineTableViewSectionHeaderDelegate <NSObject>
@optional
-(void)requestedToLayoutSubviews:(id)layoutSubviews;
-(void)sectionHeaderTapped:(id)tapped;
@end

@protocol NDeviceSessionDelegate <NSObject>
-(void)selectorName:(id)name didReceiveCallEvent:(id)event;
-(void)updateVoipMode;
@end

@protocol NDeviceErrorDelegate <NSObject>
-(void)closeView;
-(void)updateCallViewErrorVideoPeerNotSupportedWithUserMid:(id)userMid isCloseView:(BOOL)view;
-(void)updateCallViewErrorNotVideoCameraWithUserMid:(id)userMid;
-(void)updateCallViewErrorNotSupportedWithUserMid:(id)userMid;
-(void)processErrorNoResponseFinalizing:(id)finalizing;
-(void)noResponseRecieve:(id)recieve;
-(BOOL)isSessionNil;
-(BOOL)isWindowPresenting;
@end

@protocol NCallViewControllerDelegate <NSObject>
-(void)callViewControllerSendDTMF:(id)dtmf;
-(void)callViewController:(id)controller didChangeCameraPauseState:(id)state;
-(void)callViewControllerChangeCameraSide:(id)side;
-(void)callViewControllerMaximizeView:(id)view;
-(void)callViewControllerMinimizeView:(id)view;
-(void)callViewControllerRejectCall:(id)call;
-(void)callViewControllerAcceptVoiceOnly:(id)only;
-(void)callViewControllerAcceptCall:(id)call;
-(void)callViewControllerEndCall:(id)call;
-(void)callViewController:(id)controller didChangeVideoCallState:(id)state;
-(void)callViewController:(id)controller didChangeSpeakerState:(id)state;
-(void)callViewController:(id)controller didChangeMuteState:(id)state;
@end

@protocol NCallCustomAlertViewDelegate <NSObject>
-(void)callAlertView:(id)view clickedButtonAtIndex:(int)index;
@end

@protocol NLCallLineInfoDelegate <NSObject>
-(void)showTalkErrorManager;
-(unsigned)supportedInterfaceOrientations:(id)orientations;
-(id)myLineMid;
-(void)profileImage:(id)image withCompletionBlock:(id)completionBlock;
-(void)updateAttachTurboMode:(double)mode;
-(BOOL)updateWarmupForVoIP;
-(BOOL)updateWarmupForVoIPForTimeCheck;
-(BOOL)updateCallingInfo;
-(void)checkCancelPendingRequestForCallRoute;
-(void)issueVoIPRouteForUser:(id)user withCompletionBlock:(id)completionBlock;
-(void)changeProfileInfo:(id)info;
-(void)updateFriendName:(id)name withCompletionBlock:(id)completionBlock;
@end

@protocol LGLineAlbumTooltipViewDelegate <NSObject>
-(void)cleanUpTooltipView;
-(id)viewForTooltipCenterPosition;
-(id)viewForTooltipYPosition;
@optional
-(void)sendToAlbumIfExpired;
@end

@protocol LAPhotoBottomBarViewDelegate <NSObject>
@optional
-(void)photoBottomBarView:(id)view didTapSelectButton:(id)button;
-(void)photoBottomBarView:(id)view didTapSaveInAblumButton:(id)ablumButton;
-(void)photoBottomBarView:(id)view didTapSaveToCameraRollButton:(id)cameraRollButton;
-(void)photoBottomBarView:(id)view didTapEditButton:(id)button;
-(void)photoBottomBarView:(id)view didTapShareButton:(id)button;
-(void)photoBottomBarView:(id)view didTapInfoButton:(id)button;
@end

@protocol LAPhotoInfoViewDelegate <NSObject>
-(id)photoViewDataSource;
-(void)photoInfoView:(id)view didDismissWithButton:(id)button;
@end

@protocol TTransport <NSObject>
-(void)flush;
-(void)write:(const char*)write offset:(unsigned)offset length:(unsigned)length;
-(int)readAll:(char*)all offset:(int)offset length:(int)length;
@optional
-(void)consume:(unsigned)consume;
-(const char*)borrow:(char*)borrow length:(unsigned*)length;
@end

@protocol TProtocolFactory <NSObject>
-(id)newProtocolOnTransport:(id)transport;
@end

@protocol TProtocol <NSObject>
-(void)writeListEnd;
-(void)writeListBeginWithElementType:(int)elementType size:(int)size;
-(void)writeSetEnd;
-(void)writeSetBeginWithElementType:(int)elementType size:(int)size;
-(void)writeMapEnd;
-(void)writeMapBeginWithKeyType:(int)keyType valueType:(int)type size:(int)size;
-(void)writeFieldEnd;
-(void)writeFieldStop;
-(void)writeBinary:(id)binary;
-(void)writeBool:(BOOL)aBool;
-(void)writeDouble:(double)aDouble;
-(void)writeString:(id)string;
-(void)writeByte:(unsigned char)byte;
-(void)writeI16:(short)a16;
-(void)writeI64:(long long)a64;
-(void)writeI32:(int)a32;
-(void)writeFieldBeginWithName:(id)name type:(int)type fieldID:(int)anId;
-(void)writeStructEnd;
-(void)writeStructBeginWithName:(id)name;
-(void)writeMessageEnd;
-(void)writeMessageBeginWithName:(id)name type:(int)type sequenceID:(int)anId;
-(void)readListEnd;
-(void)readListBeginReturningElementType:(int*)type size:(int*)size;
-(void)readSetEnd;
-(void)readSetBeginReturningElementType:(int*)type size:(int*)size;
-(void)readMapEnd;
-(void)readMapBeginReturningKeyType:(int*)type valueType:(int*)type2 size:(int*)size;
-(id)readBinary;
-(double)readDouble;
-(long long)readI64;
-(int)readI32;
-(short)readI16;
-(unsigned char)readByte;
-(BOOL)readBool;
-(id)readString;
-(void)readFieldEnd;
-(void)readFieldBeginReturningName:(id*)name type:(int*)type fieldID:(int*)anId;
-(void)readStructEnd;
-(void)readStructBeginReturningName:(id*)name;
-(void)readMessageEnd;
-(void)readMessageBeginReturningName:(id*)name type:(int*)type sequenceID:(int*)anId;
-(id)transport;
@end

@protocol NLObjectStorageOpProgressDelegate <NSObject>
-(void)setProgress:(float)progress;
@end

@protocol NLGridControlDelegate <NSObject>
-(void)gridControl:(id)control didSelectItem:(id)item atIndexPath:(id)indexPath;
@optional
-(void)gridControl:(id)control configureButtonTitleLabel:(id)label atIndexPath:(id)indexPath;
-(void)gridControl:(id)control configureButton:(id)button atIndexPath:(id)indexPath;
-(float)gridControl:(id)control widthForButtonAtIndexPath:(id)indexPath;
-(float)gridControl:(id)control heightForRow:(int)row;
@end

@protocol LAPhotoViewDataSource <NSObject>
-(void)cancelDownloading;
-(void)downloadFullImageAtIndex:(int)index progressBlock:(id)block completion:(id)completion;
-(void)saveSelectedImagesToCameraRollWithCompletion:(id)completion;
-(void)removeAllSelectedIndexes;
-(void)selectIndexes:(id)indexes;
-(void)selectAllIndexes;
-(id)selectedIndexes;
-(unsigned)numberOfSelectedIndexes;
-(BOOL)isSelectedAtIndex:(int)index;
-(void)setSelected:(BOOL)selected atIndex:(int)index;
-(void)cleanup;
-(void)cancelAllOperations;
-(void)setLoadCompletion:(id)completion;
-(id)loadCompletion;
-(void)setLoadProgressBlock:(id)block;
-(id)loadProgressBlock;
-(id)preloadKeyAtIndex:(int)index;
-(void)preloadImagesAroundIndex:(int)index;
-(void)preloadImagesAfterLoadingImageAtIndex:(int)index;
-(void)imageInfo:(id)info atIndex:(int)index;
-(CGSize)sizeOfThumbnailAtIndex:(int)index;
-(id)thumbnailAtIndex:(int)index;
-(id)fullImageAtIndex:(int)index;
-(void)requestToUpdateObjectAtIndex:(int)index completion:(id)completion;
-(void)requestToDeleteObjectAtIndex:(int)index completion:(id)completion;
-(void)cancelLoadingPhotoGroup;
-(void)setupPhotoGroup:(id)group;
-(void)jumpAlbumWithDirection:(unsigned)direction cacheCompletion:(id)completion fetchCompletion:(id)completion3;
-(BOOL)hasNextPhotoGroup;
-(BOOL)hasPrevPhotoGroup;
-(id)photoGroupInfo;
-(unsigned)numberOfObjectsInNextPhotoGroup;
-(unsigned)numberOfObjectsInPrevPhotoGroup;
-(id)titleOfNextPhotoGroup;
-(id)titleOfPrevPhotoGroup;
-(id)photoInfoAtIndex:(int)index;
-(void)removeObjectAtIndex:(int)index;
-(BOOL)hasObjectAtIndex:(int)index;
-(id)objectAtIndex:(int)index;
-(unsigned)numberOfObjects;
-(void)setSortType:(unsigned)type;
-(void)setStartIndex:(unsigned)index;
-(unsigned)startIndex;
-(id)title;
@optional
-(BOOL)isEndedTranstion;
-(BOOL)isEnableVerticalSwipeTransition;
@end

@protocol LAPhotoPreloaderDelegate <NSObject>
-(void)cancelLoadingImages;
-(void)cancelLoadingImageExceptIndexes:(id)indexes;
-(void)loadImageAtIndex:(int)index completion:(id)completion;
@end

@protocol LAPhotoPreloaderDataSource <NSObject>
-(id)preloadKeyAtIndex:(int)index;
-(unsigned)numberOfPhotos;
@end

@protocol LASaveProgressViewDelegate <NSObject>
-(void)saveProgressView:(id)view didTapCancelButton:(id)button;
@end

@protocol SSZipArchiveDelegate <NSObject>
@optional
-(void)zipArchiveDidUnzipFileAtIndex:(int)zipArchive totalFiles:(int)files archivePath:(id)path fileInfo:(unz_file_info_s)info;
-(void)zipArchiveWillUnzipFileAtIndex:(int)zipArchive totalFiles:(int)files archivePath:(id)path fileInfo:(unz_file_info_s)info;
-(void)zipArchiveDidUnzipArchiveAtPath:(id)zipArchive zipInfo:(unz_global_info_s)info unzippedPath:(id)path;
-(void)zipArchiveWillUnzipArchiveAtPath:(id)zipArchive zipInfo:(unz_global_info_s)info;
@end

@protocol RenrenDelegate
-(void)renrenDidLogout:(id)renren;
-(void)renrenDidloginFail:(id)fail withError:(id)error;
-(void)renrenDidLogin:(id)renren;
@end

@protocol SinaWeiboDelegate <NSObject>
@optional
-(void)sinaweibo:(id)sinaweibo accessTokenInvalidOrExpired:(id)expired;
-(void)sinaweibo:(id)sinaweibo logInDidFailWithError:(id)logIn;
-(void)sinaweiboLogInDidCancel:(id)sinaweiboLogIn;
-(void)sinaweiboDidLogOut:(id)sinaweibo;
-(void)sinaweiboDidLogIn:(id)sinaweibo;
@end

@protocol SinaWeiboRequestDelegate <NSObject>
@optional
-(void)request:(id)request didFinishLoadingWithResult:(id)result;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didReceiveRawData:(id)data;
-(void)request:(id)request didReceiveResponse:(id)response;
@end

@protocol LineSNSDelegate
-(void)handleAuthURL:(id)url;
-(BOOL)canHandleAuthURL:(id)url;
-(void)cancelAuthorizeWithCompletionBlock:(id)completionBlock;
-(void)authorizeWithCompletionBlock:(id)completionBlock;
-(id)getAccessToken;
-(BOOL)isLoggedin;
@end

@protocol FexinDelegate
-(void)fexinDidLogout:(id)fexin;
-(void)fexinDidloginFail:(id)fail withError:(id)error;
-(void)fexinDidLogin:(id)fexin;
@end

@protocol NLThemeShopDetailViewDelegate <NSObject>
-(id)detailViewProduct;
-(void)detailView:(id)view didSelectedRetryButtonPreviewImageType:(int)type;
-(void)detailView:(id)view didSelectedPreviewImageType:(int)type;
-(void)detailView:(id)view didSelectedButtonType:(int)type;
@end

@protocol SinaWeiboAuthorizeViewDelegate <NSObject>
-(void)authorizeViewDidCancel:(id)authorizeView;
-(void)authorizeView:(id)view didFailWithErrorInfo:(id)errorInfo;
-(void)authorizeView:(id)view didRecieveAuthorizationCode:(id)code;
@end

@protocol LAPhotoCellDelegate <NSObject>
@optional
-(void)photoCellDidTapImageButtonAtIndex:(unsigned)photoCell;
@end

@protocol LAPhotoCellDataSource <NSObject>
-(BOOL)photoCellIsUploading;
-(id)photosForPhotoCell;
@end

@protocol LAPhotoListHeaderViewDelegate <NSObject>
-(void)photoListHeaderViewDidChageFoldState:(id)photoListHeaderView;
@end

@protocol MBMyhomeManagerDelegate <MBActivityListManagerDelegate>
@optional
-(void)myhomeManager:(id)manager didFinishCreatingPostForShareWithPost:(id)post error:(id)error;
-(void)myhomeManager:(id)manager didFinishUploadUpdatingMyhomeWithError:(id)error;
-(void)myhomeManager:(id)manager didFinishUpdatingMyhomeWithError:(id)error;
@end

@protocol NL15SliceImageViewDelegate <NSObject>
-(void)tapped:(id)tapped;
@end

@protocol NLAgeVerificationDelegate <NSObject>
-(void)authorizationForceClose;
-(void)authorizationFailed:(id)failed;
-(void)authorizationSuccess:(int)success;
@end

@protocol LGAssetsGroupsDelegate <NSObject>
-(void)lgAssetsLibraryDidLoadLazyAssetGroups:(id)lgAssetsLibrary;
-(void)lgAssetsLibraryDidLoadAssetGroups:(id)lgAssetsLibrary;
@end

@protocol MBLineUIProvider <NSObject>
-(void)sendMessageSendBar:(id)bar;
-(id)searchKeywordForSuggest:(id)suggest;
-(void)restoreFromBackup:(id)backup textMetadataArray:(id)array;
-(void)resetRecallUsers:(id)users;
-(id)textMetadataArray:(id)array;
-(id)recallUsers:(id)users;
-(void)addRecallUserFromCommentMessageSendBar:(id)commentMessageSendBar displayName:(id)name mid:(id)mid;
-(void)addRecallUserMessageSendBar:(id)bar displayName:(id)name mid:(id)mid;
-(void)setEmojiShown:(id)shown selected:(BOOL)selected;
-(void)clearMessageSendBar:(id)bar;
-(void)becomeFirstResponderMessageSendBar:(id)bar;
-(void)resignFirstResponderMessageSendBar:(id)bar;
-(void)setEnableSendButtonMessageSendBar:(id)bar enabled:(BOOL)enabled;
-(void)setTextColorMessageSendBar:(id)bar color:(id)color;
-(void)setAttributedTextMessageSendBar:(id)bar attributedText:(id)text;
-(void)setTextMessageSendBar:(id)bar text:(id)text;
-(BOOL)messageSendBarRespondsToAttributedText:(id)attributedText;
-(id)messageSendBarInputAttributedText:(id)text;
-(id)messageSendBarInputText:(id)text;
-(id)messageSendBar:(id)bar;
-(id)lineMessageSendBarWithMaxLength:(int)maxLength placeHolderText:(id)text delegate:(id)delegate;
-(id)welcomeViewTimeLine:(CGRect)line;
-(id)tabbarController;
-(id)currentVisibleViewController;
@end

@protocol LAChatPhotoDataSource <NSObject>
-(void)changeThumbnailAtIndex:(unsigned)index data:(id)data size:(CGSize)size;
-(void)editImageAtIndex:(unsigned)index;
-(void)postImageToAlbumAtIndex:(unsigned)index;
-(void)postImageToNoteAtIndex:(unsigned)index;
-(void)sendImageToOtherChatRoomAtIndex:(unsigned)index;
-(void)postImageToMyHomeAtIndex:(unsigned)index fromViewController:(id)viewController;
-(void)cancelDownloading:(BOOL)downloading;
-(void)downloadImageAtIndex:(unsigned)index completionBlock:(id)block;
-(void)setUpdateImageInfoBlock:(id)block;
-(void)loadImageObjectsWithInitialIndex:(unsigned)initialIndex completionBlock:(id)block;
-(id)chatRoomName;
-(id)imageInfoAtIndex:(unsigned)index;
-(unsigned)numberOfLineImages;
-(int)loadingIndex;
-(double)obsExpiryTimestamp;
-(id)obsInfoAtIndex:(unsigned)index;
-(id)unsupportedIndexesFromIndexes:(id)indexes;
-(id)expiredIndexSet:(BOOL)set;
-(id)chatObjectAtIndex:(unsigned)index;
-(id)imageFileUrlAtIndex:(unsigned)index;
-(id)imageObjectsInRange:(NSRange)range;
-(id)imageDataAtIndex:(unsigned)index;
-(id)thumbnailImageDataAtIndex:(unsigned)index;
-(id)openChatMID;
-(BOOL)canUseAlbum;
-(BOOL)hasInitialImage;
@optional
-(BOOL)isEndedTranstion;
-(BOOL)isEnableVerticalSwipeTransition;
@end

@protocol QLPreviewControllerDataSource
-(id)previewController:(id)controller previewItemAtIndex:(int)index;
-(int)numberOfPreviewItemsInPreviewController:(id)previewController;
@end

@protocol QLPreviewControllerDelegate <NSObject>
@optional
-(id)previewController:(id)controller transitionImageForPreviewItem:(id)previewItem contentRect:(CGRect*)rect;
-(CGRect)previewController:(id)controller frameForPreviewItem:(id)previewItem inSourceView:(id*)sourceView;
-(BOOL)previewController:(id)controller shouldOpenURL:(id)url forPreviewItem:(id)previewItem;
-(void)previewControllerDidDismiss:(id)previewController;
-(void)previewControllerWillDismiss:(id)previewController;
@end

@protocol QLPreviewItem <NSObject>
@optional
@property(readonly, assign) NSString* previewItemTitle;
@required
@property(readonly, assign) NSURL* previewItemURL;
@end

@protocol LATooltipViewDelegate <NSObject>
@optional
-(void)toolTipViewDidTapCloseButton:(id)toolTipView;
-(void)toolTipViewDidTapView:(id)toolTipView;
@end

@protocol NLObjectStorageQueueOperation <NSObject>
-(BOOL)cancelOperationWithUploadProgressDelegate:(id)uploadProgressDelegate;
-(id)operationWithObjectID:(id)objectID;
-(void)enumerateOperationsUsingBlock:(id)block;
-(id)operations;
-(unsigned)operationCount;
-(void)cancelOperation:(id)operation;
@end

@protocol NLMessageInputBarPolicy <NSObject>
-(BOOL)isUseRecallUsers;
-(int)returnKeyType;
-(unsigned)inputBarType;
@end

@protocol NJKWebViewProgressDelegate <NSObject>
-(void)webViewProgress:(id)progress updateProgress:(float)progress2;
@end

@protocol ABPersonViewControllerDelegate <NSObject>
-(BOOL)personViewController:(id)controller shouldPerformDefaultActionForPerson:(void*)person property:(int)property identifier:(int)identifier;
@end

@protocol ABNewPersonViewControllerDelegate <NSObject>
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
@end

@protocol LGFilterListViewDelegate <NSObject>
-(void)filterListView:(id)view didFilterImage:(id)image filteredImage:(id)image3 filterIndex:(unsigned)index;
-(void)filterListView:(id)view willFilterImageWithIndex:(unsigned)index;
-(void)filterListViewDidFilterThumbnailImages:(id)filterListView;
@end

@protocol LEGYConnectionInfoAcquisitorExternal <NSObject>
-(id)userAgent;
-(id)applicationInfo;
-(id)accessToken;
-(id)carrierInfoForConnectionInfo;
-(id)countryCodeFromTelSIMLocale;
-(void)save;
-(void)setCachedConnectionInfo:(id)info withKey:(id)key;
-(void)resetCachedConnectionInfoDate;
-(id)cachedConnectionInfoDate;
-(id)cachedConnectionInfoWithKey:(id)key;
-(id)talkServerHosts;
-(void)setLastSuccessfulHost:(id)host withKey:(id)key;
-(id)lastSuccessfulHostWithKey:(id)key;
@end

@protocol LEGYDeviceManagerExternal <NSObject>
-(id)carrierInfo;
-(id)carrierCountryCode;
-(id)telCountryCode;
-(id)localeRegion;
@end

@protocol PurchaseCoinDelegate
-(void)purcahseCoinWithCoinItem:(id)coinItem;
@end

@protocol SMSPinCodeConfirmDelegate <NSObject>
-(void)didConfirmSMSPinCode:(id)code;
@end

@protocol LAAlbumSaveTooltipViewDelegate <NSObject>
@optional
-(void)toolTipViewDidTapCloseButton:(id)toolTipView;
-(void)toolTipViewDidTapView:(id)toolTipView;
@end

@protocol StickerDownloadProgressDelegate <NSObject>
-(void)cancelButtonTapped:(id)tapped;
@end

@protocol NLBuddyVideoHeaderViewDelegate <NSObject>
-(void)didTappedVideoQualityButton:(id)button;
-(void)didTappedRotateButton:(id)button;
-(void)didTappedCloseButton:(id)button;
-(void)didTappedPlayer:(id)player gesture:(id)gesture;
@end

@protocol LineAlbumDataSource <NSObject>
-(void)requestWithUrlRequest:(id)urlRequest requestInfo:(id)info response:(id)response;
-(id)albumNewItemExistNotificationName;
-(void)sendEditImageToLineCamera:(id)lineCamera mid:(id)mid;
-(void)sendImageToOtherChatRoom:(id)otherChatRoom;
-(void)postImageToMyHome:(id)myHome fromViewController:(id)viewController;
-(id)fileURLForStore:(id)store subStore:(id)store2;
-(int)photoSizeType;
-(BOOL)isJoiningGroup:(id)group;
-(id)myName;
-(id)myMid;
-(void)thumbImage:(id)image withResultBlock:(id)resultBlock;
-(void)lineUser:(id)user completionBlock:(id)block;
-(id)groupMembers:(id)members;
-(void)resetAccessToken;
-(id)lineAlbumChannelToken;
-(id)lineAccessToken;
@end

@protocol NLThemeListViewCellDelegate <NSObject>
-(void)onTap:(id)tap item:(id)item inCell:(id)cell;
@end

@protocol NLCallMenuEventDelegate <NSObject>
-(void)eventInvoker:(id)invoker withEventType:(int)eventType withInfo:(id)info;
@end

@protocol NLCallMenubarDelegate <NSObject>
-(void)isExistSearchResult:(id)result withStartFlag:(BOOL)startFlag;
-(void)animationSearchTapped:(id)tapped withStartFlag:(BOOL)startFlag;
@end

@protocol NSCopying
-(id)copyWithZone:(NSZone*)zone;
@end

@protocol NSMutableCopying
-(id)mutableCopyWithZone:(NSZone*)zone;
@end

@protocol AMPGLDrawable <NSObject>
-(void)draw;
@end

@protocol PLCrashReportFormatter
-(id)formatReport:(id)report error:(id*)error;
@end

@protocol LVVideoProcessorDelegate <NSObject>
-(void)recordingDidStop;
-(void)recordingWillStop;
-(void)recordingDidStart;
-(void)recordingWillStart;
@optional
-(void)recordingWithDuration:(double)duration;
@end

@protocol AVAudioPlayerDelegate <NSObject>
@optional
-(void)audioPlayerEndInterruption:(id)interruption;
-(void)audioPlayerEndInterruption:(id)interruption withFlags:(unsigned)flags;
-(void)audioPlayerEndInterruption:(id)interruption withOptions:(unsigned)options;
-(void)audioPlayerBeginInterruption:(id)interruption;
-(void)audioPlayerDecodeErrorDidOccur:(id)audioPlayerDecodeError error:(id)error;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
@end

@protocol LVSoundDelegate <NSObject>
-(void)stopSound;
-(void)playSound:(id)sound;
-(void)cancelDownload:(id)download;
-(void)downloadSound:(id)sound;
@end

@protocol LVFileDownloadOperationDelegate <NSObject>
@optional
-(void)fileDownloadOperation:(id)operation didFailWithError:(id)error;
-(void)fileDownloadOperationDidFinish:(id)fileDownloadOperation;
-(void)fileDownloadOperation:(id)operation didReceiveDataInProgress:(float)progress;
-(void)fileDownloadOperationWillStart:(id)fileDownloadOperation;
@end

@protocol AVCaptureAudioDataOutputSampleBufferDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
@end

@protocol AVCaptureVideoDataOutputSampleBufferDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didDropSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
@end

@protocol LCRemoteImageObserving
-(void)remoteImage:(id)image didLoadImage:(id)image2 error:(id)error;
@end

@protocol LCProgressHUDDelegate <NSObject>
@optional
-(void)hudWasHidden;
-(void)hudWasHidden:(id)hidden;
@end

@protocol LCPostWriteViewControllerDelegate <NSObject>
@optional
-(void)postWriteCanceled;
-(void)postEditFinished:(id)finished;
-(void)postWriteFinished;
-(void)postWriteDidCreated;
@end

@protocol LCLinkableUserCandidatesViewDelegate <NSObject>
-(id)textForLinkableUserCandidatesView;
-(void)setTextForLinkableUserCandidatesView:(id)linkableUserCandidatesView;
-(void)linkableUserCandidatesViewDidCancel;
-(void)linkableUserCandidatesViewDidSelected:(id)linkableUserCandidatesView;
@end

@protocol LCHorizontalTableViewDelegate <NSObject>
-(id)horizontalNoDataCell;
-(float)heightForRowAtIndexPath:(id)indexPath;
-(BOOL)isEmpty;
-(int)numberOfRows;
-(void)fillCellContentView:(id)view atIndexPath:(id)indexPath;
-(id)setUpCellContentView:(id)view;
@optional
-(void)horizontalScrollViewDidScroll:(id)horizontalScrollView;
-(void)didSelectRowAtIndexPath:(id)indexPath;
-(void)didTouchRowAtIndexPath:(id)indexPath;
-(void)moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath2;
@end

@protocol LCImageDetailErrorViewDelegate <NSObject>
-(void)photoErrorView:(id)view didTapRetryButton:(id)button;
@end

@protocol NSStreamDelegate <NSObject>
@optional
-(void)stream:(id)stream handleEvent:(unsigned)event;
@end

@protocol LCStreamUploaderDelegate <NSObject>
@optional
-(void)uploadStreamInProgress:(int)progress totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)didEndUpload:(id)upload;
-(void)didStartUpload;
@end

@protocol LCLineImageObserving
-(void)lineImage:(id)image didLoadImage:(id)image2 error:(id)error;
@end

@protocol LCUploadUrlViewCellDelegate <NSObject>
@end

@protocol LCUploadUrlViewControllerDelegate <NSObject>
-(void)setStateMarkTo:(int)to hidden:(BOOL)hidden;
-(id)navigationController;
-(void)checkEnableToPostButton;
-(void)setupFlikingPart;
@end

@protocol LCPostAttachBarDelegate <NSObject>
-(void)postAttachBar:(id)bar didSelectIndex:(int)index;
@end

@protocol LCUploadListViewDelegate <NSObject>
-(void)uploadListView:(id)view didDeleteUploadMedia:(id)media;
-(void)uploadListView:(id)view didClickUploadMedia:(id)media;
-(void)uploadListView:(id)view didClickCenterButtonWithState:(int)state;
-(void)uploadListView:(id)view didClickRightButtonWithState:(int)state;
-(void)uploadListView:(id)view didClickLeftButtonWithState:(int)state;
-(id)reorderingUploadVideoArray;
-(id)reorderingUploadImageArray;
@end

@protocol LCAttachStickerListViewDelegate <NSObject>
-(void)attachStickerListView:(id)view didClickCancelButton:(id)button;
-(void)attachStickerListView:(id)view didClickAttachButton:(id)button;
-(void)attachStickerListView:(id)view didClickAddStickerButton:(id)button;
@end

@protocol LCMediaUploaderDelegate <NSObject>
-(void)mediaUploader:(id)uploader didFailUploadMedia:(id)media;
-(void)mediaUploader:(id)uploader didSucceedUploadMedia:(id)media;
-(void)mediaUploader:(id)uploader uploadInProgress:(int)progress;
@end

@protocol LCImageViewControllerDataSource <NSObject>
-(unsigned)numberOfUploadImages;
-(id)uploadImageAtIndex:(int)index;
@end

@protocol UIAppearance <NSObject>
+(id)appearanceWhenContainedIn:(Class)anIn;
+(id)appearance;
@end

@protocol ASICacheDelegate <NSObject>
-(void)clearCachedResponsesForStoragePolicy:(int)storagePolicy;
-(id)pathToStoreCachedResponseDataForRequest:(id)request;
-(id)pathToStoreCachedResponseHeadersForRequest:(id)request;
-(id)pathToCachedResponseHeadersForURL:(id)url;
-(id)pathToCachedResponseDataForURL:(id)url;
-(id)cachedResponseDataForURL:(id)url;
-(id)cachedResponseHeadersForURL:(id)url;
-(void)removeCachedDataForURL:(id)url;
-(void)storeResponseForRequest:(id)request maxAge:(double)age;
-(BOOL)isCachedDataCurrentForRequest:(id)request;
-(void)removeCachedDataForRequest:(id)request;
-(BOOL)canUseCachedDataForRequest:(id)request;
-(void)updateExpiryForRequest:(id)request maxAge:(double)age;
-(id)expiryDateForRequest:(id)request maxAge:(double)age;
-(int)defaultCachePolicy;
@end

@protocol DDLogFormatter <NSObject>
-(id)formatLogMessage:(id)message;
@optional
-(void)willRemoveFromLogger:(id)logger;
-(void)didAddToLogger:(id)logger;
@end

@protocol DDLogFileManager <NSObject>
@property(assign) unsigned maximumNumberOfLogFiles;
-(id)createNewLogFile;
-(id)sortedLogFileInfos;
-(id)sortedLogFileNames;
-(id)sortedLogFilePaths;
-(id)unsortedLogFileInfos;
-(id)unsortedLogFileNames;
-(id)unsortedLogFilePaths;
-(id)logsDirectory;
@optional
-(void)didRollAndArchiveLogFile:(id)file;
-(void)didArchiveLogFile:(id)file;
@end

@protocol DDLogger <NSObject>
-(void)setLogFormatter:(id)formatter;
-(id)logFormatter;
-(void)logMessage:(id)message;
@optional
-(id)loggerName;
-(dispatch_queue_s*)loggerQueue;
-(void)flush;
-(void)willRemoveLogger;
-(void)didAddLogger;
@end

@protocol NSCacheDelegate <NSObject>
@optional
-(void)cache:(id)cache willEvictObject:(id)object;
@end

@protocol FBCacheIndexFileDelegate <NSObject>
-(void)cacheIndex:(id)index deleteFileWithName:(id)name;
-(void)cacheIndex:(id)index writeFileWithName:(id)name data:(id)data;
@end

@protocol FBRequestDelegate <NSObject>
@optional
-(void)request:(id)request didLoadRawResponse:(id)response;
-(void)request:(id)request didLoad:(id)load;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didReceiveResponse:(id)response;
-(void)requestLoading:(id)loading;
@end

@protocol FBGraphObjectSelectionChangedDelegate <NSObject>
-(void)graphObjectTableSelectionDidChange:(id)graphObjectTableSelection;
@end

@protocol FBGraphObjectViewControllerDelegate <NSObject>
-(id)graphObjectTableDataSource:(id)source titleOfItem:(id)item;
@optional
-(void)graphObjectTableDataSource:(id)source customizeTableCell:(id)cell;
-(BOOL)graphObjectTableDataSource:(id)source filterIncludesItem:(id)item;
-(id)graphObjectTableDataSource:(id)source pictureUrlOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source subtitleOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source titleSuffixOfItem:(id)item;
@end

@protocol FBGraphObjectPagingLoaderDelegate <NSObject>
@optional
-(void)pagingLoaderWasCancelled:(id)cancelled;
-(void)pagingLoader:(id)loader handleError:(id)error;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)pagingLoader:(id)loader didLoadData:(id)data;
-(void)pagingLoader:(id)loader willLoadURL:(id)url;
@end

@protocol FBGraphObjectDataSourceDataNeededDelegate <NSObject>
-(void)graphObjectTableDataSourceNeedsData:(id)data triggeredByIndexPath:(id)path;
@end

@protocol FBGraphObjectSelectionQueryDelegate <NSObject>
-(BOOL)graphObjectTableDataSource:(id)source selectionIncludesItem:(id)item;
@end

@protocol FBGraphObject <NSObject>
@optional
@property(assign, nonatomic) BOOL provisionedForPost;
@required
-(void)setObject:(id)object forKey:(id)key;
-(void)removeObjectForKey:(id)key;
-(id)keyEnumerator;
-(id)objectForKey:(id)key;
-(unsigned)count;
@end

@protocol FBLoginDialogDelegate <NSObject>
-(void)fbDialogNotLogin:(BOOL)login;
-(void)fbDialogLogin:(id)login expirationDate:(id)date;
@end

@protocol FBSessionLoginStrategy <NSObject>
@property(readonly, assign) NSString* methodName;
-(BOOL)tryPerformAuthorizeWithParams:(id)params session:(id)session logger:(id)logger;
@end

@protocol FBDialogDelegate <NSObject>
@optional
-(BOOL)dialog:(id)dialog shouldOpenURLInExternalBrowser:(id)externalBrowser;
-(void)dialog:(id)dialog didFailWithError:(id)error;
-(void)dialogDidNotComplete:(id)dialog;
-(void)dialogDidNotCompleteWithUrl:(id)dialog;
-(void)dialogCompleteWithUrl:(id)url;
-(void)dialogDidComplete:(id)dialog;
@end

@protocol FBWebDialogsDelegate <NSObject>
@optional
-(void)webDialogsWillDismissDialog:(id)webDialogs parameters:(id)parameters session:(id)session result:(int*)result url:(id*)url error:(id*)error;
-(BOOL)webDialogsDialog:(id)dialog parameters:(id)parameters session:(id)session shouldAutoHandleURL:(id)url;
-(void)webDialogsWillPresentDialog:(id)webDialogs parameters:(id)parameters session:(id)session;
@end

@protocol FBFrictionlessDialogSupportDelegate <FBWebDialogsDelegate>
-(id)frictionlessSettings;
-(BOOL)frictionlessShouldMakeViewInvisible;
@end

@protocol NSFastEnumeration
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
@end

@protocol LCAPIParser <NSObject>
-(id)parseWithDictionary:(id)dictionary;
@end

@protocol NJPurchaseTransactionDelegate <NSObject>
-(void)transaction:(id)transaction didFailWithError:(id)error;
-(void)transaction:(id)transaction didFinish:(id)finish;
-(BOOL)transactionShouldVerify:(id)transaction;
-(BOOL)transactionShouldPayment:(id)transaction;
-(BOOL)transactionShouldReserve:(id)transaction;
@end

@protocol UIPopoverControllerDelegate <NSObject>
@optional
-(void)popoverController:(id)controller willRepositionPopoverToRect:(inout CGRect*)rect inView:(inout id*)view;
-(void)popoverControllerDidDismissPopover:(id)popoverController;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
@end

@protocol LEGYConnectionDelegate
-(void)connection:(id)connection readyToWrite:(id)write;
-(void)connection:(id)connection readyToRead:(id)read;
-(void)connection:(id)connection hasDisconnectedWithError:(id)error;
-(void)connectionHasConnected:(id)connected;
@end

@protocol LEGYProtocolProviderDelegate <NSObject>
-(void)protocolUnusable:(id)unusable;
-(void)protocolGracefullyDisconnecting:(id)disconnecting;
-(void)protocol:(id)protocol usableWithTypes:(unsigned)types;
-(void)protocolProviderExhaustedConnectionsForRequestTypes:(unsigned)requestTypes;
-(void)protocolProviderDidGoOffline;
-(void)protocolProviderWillGoOffline:(id)protocolProvider;
-(void)protocolProviderDidComeOnline;
@end

@protocol LEGYProtocolDelegate <NSObject>
-(void)protocol:(id)protocol didReceiveResponse:(id)response;
-(void)protocol:(id)protocol didSendRequest:(id)request;
-(void)protocol:(id)protocol didReceiveSessionKey:(id)key;
-(void)protocolHandshakeReciprocated:(id)reciprocated;
@end

@protocol ACTReportingInfoDelegate <NSObject>
-(id)reportingURLPrefix;
-(id)queryParameterSeparator;
-(id)queryParameters;
-(BOOL)shouldReport;
@end

@protocol ACTPingerDelegate <NSObject>
-(void)ping:(id)ping didFailWithError:(id)error;
-(void)pingDidSucceed:(id)ping;
@end

@protocol NSURLConnectionDelegate <NSObject>
@optional
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
@end

@protocol CDVCommandDelegate <NSObject>
-(BOOL)execute:(id)execute;
-(id)getCommandInstance:(id)instance;
-(id)pathForResource:(id)resource;
@end

@protocol UIAccelerometerDelegate <NSObject>
@optional
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
@end

@protocol ThriftNeloEventServer <NSObject>
-(int)ackedAppendList:(id)list;
-(int)ackedAppend:(id)append;
-(void)appendList:(id)list;
-(void)append:(id)append;
@end

@protocol NeloTProcessor <NSObject>
-(BOOL)processOnInputProtocol:(id)protocol outputProtocol:(id)protocol2;
@end

@protocol NeloTProtocolFactory <NSObject>
-(id)newProtocolOnTransport:(id)transport;
@end

@protocol NeloTProtocol <NSObject>
-(void)writeListEnd;
-(void)writeListBeginWithElementType:(int)elementType size:(int)size;
-(void)writeSetEnd;
-(void)writeSetBeginWithElementType:(int)elementType size:(int)size;
-(void)writeMapEnd;
-(void)writeMapBeginWithKeyType:(int)keyType valueType:(int)type size:(int)size;
-(void)writeFieldEnd;
-(void)writeFieldStop;
-(void)writeBinary:(id)binary;
-(void)writeBool:(BOOL)aBool;
-(void)writeDouble:(double)aDouble;
-(void)writeString:(id)string;
-(void)writeByte:(unsigned char)byte;
-(void)writeI16:(short)a16;
-(void)writeI64:(long long)a64;
-(void)writeI32:(int)a32;
-(void)writeFieldBeginWithName:(id)name type:(int)type fieldID:(int)anId;
-(void)writeStructEnd;
-(void)writeStructBeginWithName:(id)name;
-(void)writeMessageEnd;
-(void)writeMessageBeginWithName:(id)name type:(int)type sequenceID:(int)anId;
-(void)readListEnd;
-(void)readListBeginReturningElementType:(int*)type size:(int*)size;
-(void)readSetEnd;
-(void)readSetBeginReturningElementType:(int*)type size:(int*)size;
-(void)readMapEnd;
-(void)readMapBeginReturningKeyType:(int*)type valueType:(int*)type2 size:(int*)size;
-(id)readBinary;
-(double)readDouble;
-(long long)readI64;
-(int)readI32;
-(short)readI16;
-(unsigned char)readByte;
-(BOOL)readBool;
-(id)readString;
-(void)readFieldEnd;
-(void)readFieldBeginReturningName:(id*)name type:(int*)type fieldID:(int*)anId;
-(void)readStructEnd;
-(void)readStructBeginReturningName:(id*)name;
-(void)readMessageEnd;
-(void)readMessageBeginReturningName:(id*)name type:(int*)type sequenceID:(int*)anId;
-(id)transport;
@end

@protocol NeloTTransport <NSObject>
-(void)close;
-(void)flush;
-(void)write:(const char*)write offset:(unsigned)offset length:(unsigned)length;
-(int)readAll:(char*)all offset:(int)offset length:(int)length;
@end

@protocol __ARCLiteKeyedSubscripting__
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
@end

@protocol __ARCLiteIndexedSubscripting__
-(void)setObject:(id)object atIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
@end

@interface NJBBSNotice : NSObject {
	NSString* mDocumentId;
	NSString* mTitle;
	NSString* mContent;
	double mCreated;
	double mUpdated;
	BOOL mIsNewItem;
	BOOL mIsOpenedItem;
	BOOL mIsLoadingItem;
}
@property(readonly, assign, nonatomic) NSString* documentId;
@property(readonly, assign, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* content;
@property(readonly, assign, nonatomic) double created;
@property(readonly, assign, nonatomic) double updated;
@property(assign, nonatomic, setter=setNewItem:) BOOL isNewItem;
@property(assign, nonatomic, setter=setOpenedItem:) BOOL isOpenedItem;
@property(assign, nonatomic, setter=setLoadingItem:) BOOL isLoadingItem;
-(id)initWithDictionary:(id)dictionary;
-(void)dealloc;
-(id)description;
@end

@interface NJBBSNoticeCell : UITableViewCell {
	UILabel* mTitleLabel1;
	UILabel* mTitleLabel2;
	UILabel* mCreatedLabel;
	UIView* mBackLinesView;
	UIImageView* mNewImageView;
	UIImageView* mHighlightImageView;
	UIImageView* mOnView;
	UIImageView* mOffView;
	UITextView* mContentTextView;
	UIImageView* mContentTextBackGroundView;
	UIImageView* mDetailTopLineView;
	UIImageView* mDetailBottomLineView;
}
+(float)height;
+(float)contentHeight:(id)height inRect:(CGRect)rect;
+(float)heightOfNoticeItem:(id)noticeItem inRect:(CGRect)rect;
+(id)cellWithFetch:(BOOL)fetch inRect:(CGRect)rect;
+(id)errorCell:(CGRect)cell;
+(id)noDataCell:(CGRect)cell;
+(id)loadingCell:(CGRect)cell;
+(id)cellWithNotice:(id)notice forTableView:(id)tableView;
-(BOOL)hasHighResScreenForBBS;
-(id)imageWithRetinaNamedForBBS:(id)bbs;
-(id)dateInFormat:(double)format;
-(unsigned)sizeStringToFit:(id)fit width:(int)width height:(float)height min:(int)min max:(int)max;
-(unsigned)sizeStringToFit:(id)fit width:(float)width height:(float)height;
-(void)setupBackground:(id)background inRect:(CGRect)rect;
-(void)setupBackgroundContentsPart:(id)part inRect:(CGRect)rect;
-(void)setupCellContentView:(CGRect)view;
-(void)setToggleView:(BOOL)view;
-(void)setContentWithNotice:(id)notice inRect:(CGRect)rect;
-(void)setContentDetailWithNotice:(id)notice inRect:(CGRect)rect;
-(void)addMessageBackgroundView;
@end

@interface NJBBSNoticeInfo : NSObject <NSCoding> {
	NSString* mVersion;
	NSMutableDictionary* mNoticeInfoDic;
}
@property(retain, nonatomic) NSString* version;
@property(retain, nonatomic) NSMutableDictionary* noticeInfoDic;
-(id)init;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)noticeInfoDictionaryWithLanguage:(id)language language:(id)language2;
-(id)readDateWithLanguage:(id)language language:(id)language2;
-(void)setDateWithLanguage:(id)language serviceId:(id)anId language:(id)language3;
@end

@interface NJBBSNoticeManager : NSObject {
	id mDelegateForView;
	NSString* mServiceId;
	NSString* mLanguage;
	NSString* mDefaultLanguage;
	NSSet* mLanguageSet;
	NSString* mPhase;
	NSOperationQueue* mOperationQueue;
	NSOperation* mFetchOperation;
	NSOperation* mFetchDetailOperation;
	NSOperation* mFetchNewOperation;
	NSMutableArray* mNoticeArray;
	unsigned mCurrentPage;
	unsigned mTotalPage;
	unsigned mPageSize;
	BOOL mIsUseNewMark;
	int mCellDesignType;
	BOOL mIsChangeLanguage;
	NSString* mConturyCode;
	NSString* mMcc;
	BOOL mIsError;
	unsigned mCachePeriodMinutes;
	BOOL mDateFlag;
}
@property(retain, nonatomic) NSString* serviceId;
@property(retain, nonatomic) NSString* phase;
@property(assign, nonatomic) unsigned pageSize;
@property(assign, nonatomic, setter=setUseNewMark:) BOOL isUseNewMark;
@property(assign, nonatomic) int cellDesignType;
@property(retain, nonatomic) NSString* conturyCode;
@property(retain, nonatomic) NSString* mcc;
@property(assign, nonatomic, setter=setError:) BOOL isError;
@property(assign, nonatomic) unsigned cachePeriodMinutes;
@property(assign, nonatomic, setter=setDateFlag:) BOOL dateFlag;
+(id)sharedManager;
+(id)allocWithZone:(NSZone*)zone;
+(id)version;
-(id)copyWithZone:(NSZone*)zone;
-(id)retain;
-(unsigned)retainCount;
-(oneway void)release;
-(id)autorelease;
-(void)cancelAllOperations;
-(id)init;
-(void)dealloc;
-(void)setTotalPage:(unsigned)page;
-(id)defaultLanguage;
-(id)currentLanguageString;
-(id)bbsNoticesRequest:(unsigned)request pageSize:(unsigned)size;
-(id)getBBSNotices:(unsigned)notices pageSize:(unsigned)size delegate:(id)delegate;
-(id)bbsNoticeInfoRequest:(id)request;
-(id)getBBSNoticeInfo:(id)info isNewItem:(BOOL)item delegate:(id)delegate;
-(id)bbsNoticeNewCountRequest:(id)request;
-(id)getBBSNewCount:(id)count serviceId:(id)anId language:(id)language delegate:(id)delegate;
-(void)client:(id)client didReceiveBBSNotices:(id)notices totalPage:(unsigned)page error:(id)error;
-(void)client:(id)client didReceiveBBSNoticeInfo:(id)info error:(id)error;
-(void)clientOperation:(id)operation didReceiveBbsNoticesResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceiveBbsNoticeInfoResult:(id)result error:(id)error;
-(void)saveStartTimeForCacheTime:(id)cacheTime language:(id)language;
-(void)clientOperation:(id)operation didReceiveBbsNewCountResult:(id)result error:(id)error;
-(void)setSupportLanguages:(id)languages defaultLanguage:(id)language;
-(void)fetchBadgeNewCount:(id)count;
-(int)noticeItemCount;
-(id)noticeItemAtIndex:(int)index;
-(BOOL)isLastPage;
-(void)setDelegateForView:(id)view;
-(void)resetData;
-(void)fetch;
-(void)fetchMore;
-(void)fetchDetail:(id)detail isNewItem:(BOOL)item;
-(BOOL)isFetching;
-(BOOL)isDetailFetching;
-(BOOL)isNewFetching;
-(void)saveSettingDate;
-(void)setSettingDate;
-(void)resetNewItem;
-(void)resetNewCount;
-(void)checkChangeLanguageAndsettingTime;
-(id)keyForStartTime:(id)startTime language:(id)language;
-(id)keyForStartTime;
-(id)keyForSettingDate;
-(id)keyForNewCount:(id)newCount language:(id)language;
-(id)keyForNewCount;
-(id)keyForBeforeLanguage;
-(id)domainInfo;
-(int)stringToNJLanguage:(id)njlanguage;
-(void)showAlertForBBS:(id)bbs;
@end

@interface NJBBSNoticeSettings : NSObject {
}
+(void)saveNoticeInfoFromUserDefaults:(id)userDefaults;
+(id)noticeInfoFromUserDefaults;
+(void)clearNoticeInfo;
+(id)settingDate:(id)date language:(id)language;
+(void)setSettingDate:(id)date serviceId:(id)anId language:(id)language;
@end

@interface NJBBSNoticeViewController : UIViewController <UITableViewDataSource, UITableViewDelegate> {
	UITableView* mTableView;
	int mOldSelectedRow;
	float mBeforeContentHeight;
	float mBeforeContentOffset;
}
@property(assign, nonatomic) UITableView* tableView;
-(id)init;
-(void)dealloc;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)viewDidUnload;
-(unsigned)heightForRow:(unsigned)row;
-(id)cellForRow:(unsigned)row forTableView:(id)tableView;
-(id)fetchMoreCell;
-(id)noDataCell;
-(id)errorCell;
-(id)loadingCell;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)closeOpenedItemWhenTheOtherItemClicked:(int)clicked;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)fetchMore;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)reloadTable;
-(void)setPageSize:(int)size;
-(void)setupTableView;
-(void)resetData;
-(void)updateFetchMoreView;
@end

@interface NJBBSNoticeResource : NSObject {
}
+(id)localizedStringInfoJapanese;
+(id)localizedStringInfoKorean;
+(id)localizedStringInfoEnglish;
+(id)localizedStringInfoChinese;
+(id)localizedStringInfoZhtChinese;
+(id)localizedStringInfo;
+(BOOL)isSupportedLanguage:(id)language;
+(id)systemLanguage;
+(id)localizedStringForKey:(id)key;
+(id)resize:(id)resize;
+(id)highImageInfo;
+(id)imageInfo;
+(id)highImageWithName:(id)name;
+(id)imageWithName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface MessageViewController : NLStatusBarControllableViewController <UITextFieldDelegate, UITextViewDelegate, UITableViewDelegate, UITableViewDataSource, NSFetchedResultsControllerDelegate, UIActionSheetDelegate, UIAlertViewDelegate, UINavigationControllerDelegate, NLGrowingTextViewDelegate, FileAttachmentDelegate, LineKeyboardDelegate, UIActionSheetDelegate, ABUnknownPersonViewControllerDelegate, ABPeoplePickerNavigationControllerDelegate, UIGestureRecognizerDelegate, MessageViewCellActionDelegate, NLProfilePopupViewerDelegate, LocationDetailViewControllerDelegate, LineProgressDelegate, NMTextSelectorViewVisibilityDelegate, NLChatMenuViewControllerDelegate, FriendsPickerViewControllerDelegate, VoiceMessageControllerDelegate, NLMessageAudioViewDelegate, MFMailComposeViewControllerDelegate, NLMessageInputBarDelegate, ImageMapReloadViewDelegate> {
	int fetchLimit;
	NSFetchedResultsController* _membersFetchedResultsController;
	BOOL loadingOlderMessages;
	BOOL viewDidLoaded;
	BOOL viewDidAppearOnce;
	BOOL scrollToBottom;
	BOOL autoToggle;
	BOOL hasScrolled;
	BOOL preventingCustomKeyboardFromClosing;
	BOOL isTableViewScrollAnimating_;
	BOOL isScrollToBottomQueued_;
	NSMutableDictionary* mAttributedStringsDics;
	NSMutableSet* stringsWithLinksAddedPortrait_;
	NSMutableSet* stringsWithLinksAddedLandscape_;
	dispatch_group_s* addLinksDispatchGroup;
	dispatch_queue_s* addLinksDispatchQueue;
	NSMutableDictionary* mMessageHeightDics;
	BOOL shouldCancelOpenLocation;
	BOOL shouldHideFreeCallView;
	NLInputStatusView* inputStatusView;
	NewMessageView* newMessageView;
	BOOL isScrollToBottomForce_;
	BOOL needToScrollBottom_;
	BOOL needToScrollStop_;
	NSMutableArray* temporaryInsertedMessages_;
	BOOL isPrevPortraitOrientation;
	float insetTopView_;
	float insetTopKeyboard_;
	AddBlockBarView* addBlockBarView_;
	SpammerWarningLabelView* warningLabelView_;
	BOOL receivedMemoryWarning;
	NSMutableArray* attachmentActionsMapping;
	NSString* temporaryInputText_;
	NLUnreadChatPositionManager* unreadPositionManager_;
	BOOL isCheckedUnreadPosition_;
	BOOL wasMessageSendBarFirstResponder_;
	int visibleRowAtBottom_;
	NLBuddyVideoOnAirView* videoOnAirView_;
	NSMutableSet* canceledVideoMessageObjectIdSet;
	NLStickerPreview* _stickerPreview;
	double _lastSoundPlayedStickerTime;
	float _yLastContentOffset;
	BOOL mKeyboardMoved;
	BOOL isGetBuddyDetail;
	BOOL isRefreshNaviBar;
	BOOL hasOlderMessagesNotShown;
	BOOL _needLoadSkinImage;
	BOOL _doNotMarkChatAsRead;
	BOOL _doNotRotateFlag;
	BOOL _sendTypeSelectionPopupOpened;
	BOOL _exportingVoiceMessage;
	BOOL _appearInAppBrowser;
	BOOL _editMessageMode;
	BOOL _isContentModeBottomSkinView;
	BOOL _isAddedPhotoViewControllerObserver;
	int toType;
	NSString* mid;
	TalkChatObject* chatObject;
	TalkUserObject* friendObject;
	TalkGroupObject* groupObject;
	MemberListScrollView* memberListView;
	UITableView* tableView;
	NSMutableDictionary* progressViews;
	NLProfilePopupViewer* profilePopupViewer;
	NLMessageInputBar* messageSendBar;
	NSFetchedResultsController* fetchedResultsController;
	VoiceMessageController* voiceMessageController;
	NLAttachedFileLoader* _attchedFileLoader;
	NSMutableDictionary* activeUploaders;
	NLMessageSendTypeSelectionView* _sendTypeSelectionPopupView;
	float _lastKeyboardHeight;
	NLEditMessageTitleBar* _editTitleBar;
	NLEditMessageButtonBar* _editButtonBar;
	MessageImagePickerDelegate* _imagePickerDelegate;
	NLChatMenuViewController* _chatMenuViewController;
	NSArray* _sendTypeOptionButtons;
	int _storedSendButtonType;
	UILongPressGestureRecognizer* _sendButtonLongPressRecognizer;
	UIDocumentInteractionController* _docInteractionController;
	NLAudioURLLoader* _audioURLLoaderForExporting;
	NLBuddyOnAirDataPoller* _onAirPoller;
	NLSafeUnretainedObject* _weakSelf;
	NLBuddyOnAirChatUIHandler* _onAirUIHandler;
	TalkMessageObject* _longPressedTalkMessageObject;
	NLTalkMessageEditManager* _talkMessageEditManager;
	id _photoViewRestoreBlock;
	LineGalleryChatPhotoDataSource* _photoDataSource;
	NSArray* _rightItems;
	UIBarButtonItem* _leftItem;
	long long oldestMessageOffset;
}
@property(retain, nonatomic) UIBarButtonItem* leftItem;
@property(retain, nonatomic) NSArray* rightItems;
@property(retain, nonatomic) LineGalleryChatPhotoDataSource* photoDataSource;
@property(copy, nonatomic) id photoViewRestoreBlock;
@property(assign, nonatomic) BOOL isAddedPhotoViewControllerObserver;
@property(assign, nonatomic) BOOL isContentModeBottomSkinView;
@property(retain, nonatomic) NLTalkMessageEditManager* talkMessageEditManager;
@property(retain, nonatomic) TalkMessageObject* longPressedTalkMessageObject;
@property(assign, nonatomic) BOOL editMessageMode;
@property(retain, nonatomic) NLBuddyOnAirChatUIHandler* onAirUIHandler;
@property(assign, nonatomic) BOOL appearInAppBrowser;
@property(retain, nonatomic) NLSafeUnretainedObject* weakSelf;
@property(retain, nonatomic) NLBuddyOnAirDataPoller* onAirPoller;
@property(retain, nonatomic) NLAudioURLLoader* audioURLLoaderForExporting;
@property(assign, nonatomic) BOOL exportingVoiceMessage;
@property(retain, nonatomic) UIDocumentInteractionController* docInteractionController;
@property(assign, nonatomic) BOOL sendTypeSelectionPopupOpened;
@property(retain, nonatomic) UILongPressGestureRecognizer* sendButtonLongPressRecognizer;
@property(assign, nonatomic) int storedSendButtonType;
@property(retain, nonatomic) NSArray* sendTypeOptionButtons;
@property(retain, nonatomic) NLChatMenuViewController* chatMenuViewController;
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(retain, nonatomic) NSMutableDictionary* activeUploaders;
@property(retain, nonatomic) NLAttachedFileLoader* attchedFileLoader;
@property(retain, nonatomic) MessageImagePickerDelegate* imagePickerDelegate;
@property(retain, nonatomic) NSMutableDictionary* progressViews;
@property(retain, nonatomic) NLEditMessageButtonBar* editButtonBar;
@property(retain, nonatomic) NLEditMessageTitleBar* editTitleBar;
@property(retain, nonatomic) VoiceMessageController* voiceMessageController;
@property(readonly, assign, nonatomic) NLChatMenuViewController* chatMoreMenuController;
@property(assign, nonatomic) float lastKeyboardHeight;
@property(assign, nonatomic) BOOL doNotRotateFlag;
@property(assign, nonatomic) BOOL doNotMarkChatAsRead;
@property(assign, nonatomic) BOOL needLoadSkinImage;
@property(assign, nonatomic) BOOL hasOlderMessagesNotShown;
@property(assign, nonatomic) long long oldestMessageOffset;
@property(assign, nonatomic) BOOL isRefreshNaviBar;
@property(retain, nonatomic) NSFetchedResultsController* fetchedResultsController;
@property(retain, nonatomic) NLMessageSendTypeSelectionView* sendTypeSelectionPopupView;
@property(retain, nonatomic) NLMessageInputBar* messageSendBar;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) MemberListScrollView* memberListView;
@property(retain, nonatomic) TalkGroupObject* groupObject;
@property(retain, nonatomic) TalkUserObject* friendObject;
@property(retain, nonatomic) TalkChatObject* chatObject;
@property(retain, nonatomic) NSString* mid;
@property(assign, nonatomic) int toType;
+(unsigned)currentKeyboardType;
+(id)dateBarDateFormatTemplate;
+(void)markChatAsReadWithManagedObjectID:(id)managedObjectID;
+(id)createProgressView;
+(id)viewController;
-(void).cxx_destruct;
-(CGAffineTransform)transformWithFromFrame:(CGRect)frame toFrame:(CGRect)frame2 keepRatio:(BOOL)ratio;
-(CGRect)bgViewFrameForImageDetailViewWithBaseFrame:(CGRect)baseFrame;
-(CGRect)naviViewFrameForImageDetailViewWithBaseFrame:(CGRect)baseFrame;
-(BOOL)isVisibledImageTypeCellWithMessageViewCell:(id)messageViewCell;
-(void)updateNavigationItemsFrameUpdateForImageDetail;
-(void)photoViewVerticalSwipeEnd:(id)end;
-(void)photoViewVerticalSwipeBegan:(id)began;
-(void)removeObserverForImageDeatilView;
-(void)addObserverForImageDeatilView;
-(void)dismissImageDetailView:(id)view;
-(void)openImageDetailView:(id)view;
-(void)postWriteDidCreated;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)deselectEmojiButton;
-(void)didTapInputBarWhenVoiceRecord;
-(void)didChangeLineTheme:(id)theme;
-(void)changedTheme;
-(void)changeWarningLabelHidden:(BOOL)hidden;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)messageAudioView:(id)view exportButtonTapped:(id)tapped;
-(void)setupDocumentControllerWithURL:(id)url;
-(void)messageAudioView:(id)view playButtonTapped:(id)tapped;
-(void)friendsPickerViewController:(id)controller didFinishPickingItems:(id)items;
-(void)reloadInputText;
-(BOOL)selectorView:(id)view isVisibleAt:(CGPoint)at;
-(BOOL)isGroupBoardTooltipReaded;
-(void)setGroupBoardTooltipReaded:(BOOL)readed;
-(BOOL)useNoteNavigationBarItem;
-(BOOL)needShowGroupBoardTooltip;
-(void)showGroupBoardTooltipOnlyOnceWithInterfaceOrientation:(int)interfaceOrientation withDelay:(float)delay;
-(void)groupBoardButtonPressed:(id)pressed;
-(void)layoutGroupBoardTooltipWithInterfaceOrientation:(int)interfaceOrientation;
-(void)showGroupBoardTooltip:(BOOL)tooltip withInterfaceOrientation:(int)interfaceOrientation;
-(void)removeGroupBoardTooltipHitView;
-(void)tooltipTapped:(id)tapped;
-(void)getBuddyDetail;
-(void)didChangeOnAirStatusWithData:(id)data;
-(void)rotateOnAirView;
-(void)stopOnAir;
-(void)startOnAir;
-(id)videoOnAirView;
-(id)buddyOnAirView;
-(void)controllerHideControl:(id)control;
-(void)controllerShowControl:(id)control;
-(void)progressViewCancelled:(id)cancelled;
-(void)dismissOrPopSelfAndShareLocation:(id)location;
-(void)logLinkTapIfBuddyWithMessage:(id)message URLString:(id)string;
-(void)cell:(id)cell attributedLabel:(id)label linkTapped:(id)tapped url:(id)url type:(unsigned)type;
-(BOOL)isConfirmNeededToOpenLinkForCell:(id)cell;
-(void)cell:(id)cell attributedLabel:(id)label linkLongTapped:(id)tapped url:(id)url type:(unsigned)type;
-(void)openLink:(id)link url:(id)url type:(unsigned)type needConfirm:(BOOL)confirm;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(void)unknownPersonViewController:(id)controller didResolveToPerson:(void*)person;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)timeZoneChange;
-(void)localeOrSignificantTimeChange;
-(void)localeChange;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)addStuffWhenFriendshipRestored;
-(void)removeStuffWhenFriendshipLost;
-(void)lineKeyboard:(id)keyboard stickerTapped:(int)tapped;
-(void)lineKeyboardDidDeleteBackwards:(id)lineKeyboard;
-(void)lineKeyboardWillDeleteBackwards:(id)lineKeyboard;
-(void)attachLocation:(id)location;
-(void)attachedMedia;
-(void)attachImage:(id)image withPicker:(id)picker;
-(void)attachImage:(id)image;
-(void)tappedCafePostTypeCellView:(id)view;
-(void)sendSharingMessages;
-(void)sendSharingOBSContent;
-(void)sendSharingContact;
-(void)sendSharingAudio;
-(void)sendSharingLocation;
-(void)sendSharingImagesPreviewViewWithImage;
-(void)openAttachedFile:(id)file;
-(void)openLineBrush:(id)brush;
-(void)openLineCard:(id)card;
-(void)openLineCamera:(id)camera;
-(void)openNote;
-(void)openContactKind;
-(void)openMyStickerOfStickerPackge:(id)stickerPackge withStickerId:(id)stickerId;
-(void)openStickerDetailVCWithStickerPackage:(id)stickerPackage stickerId:(id)anId;
-(void)onTappedSticker:(id)sticker;
-(void)openMediaPicker:(unsigned)picker source:(unsigned)source;
-(void)openCameraViewForPhotosOnly;
-(void)openCameraView;
-(void)sendSnapMovie:(id)movie;
-(void)openPhotoLibraryForMoviesOnly;
-(void)openPhotoLibraryForPhotosOnly;
-(void)openLocationView;
-(void)openLocationDetailView:(id)view;
-(void)sendVoiceMessage;
-(void)hideAttachmentInputViewNewRibbonWithAttachmentAction:(id)attachmentAction;
-(void)showVoiceTalkControlWithType:(int)type;
-(void)textSelectorWillBecomeVisibleNotification:(id)textSelector;
-(void)playMovie:(id)movie;
-(void)playAudio:(id)audio;
-(void)keyboardWillChangeFrameNotification:(id)keyboard;
-(void)keyboardDidShowNotification:(id)keyboard;
-(void)keyboardDidChangeFrameNotification:(id)keyboard;
-(void)keyboardHide:(id)hide;
-(void)openUserPopupView:(id)view;
-(void)onProfileImageTapped:(id)tapped;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)showUserPopupWithDataObject:(id)dataObject contactType:(int)type;
-(void)showUserPopupWithDataObject:(id)dataObject;
-(void)setKeyboard:(unsigned)keyboard;
-(BOOL)growingTextViewShouldReturn:(id)growingTextView;
-(void)growingTextViewDidTapTextView:(id)growingTextView;
-(void)growingTextViewDidEndEditing:(id)growingTextView;
-(void)growingTextViewDidBeginEditing:(id)growingTextView;
-(void)updateSendButtonTypeFromTextView:(id)textView;
-(void)growingTextViewDidChangeSelection:(id)growingTextView;
-(void)growingTextView:(id)view willChangeHeight:(float)height;
-(void)growingTextViewDidChange:(id)growingTextView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)updateLastSoundPlayedStickerTime;
-(void)playVisibleAnimationStickersIsNeedInterval:(BOOL)interval;
-(void)playAnimationOfStickerView:(id)stickerView ofStickerPackage:(id)stickerPackage;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollToFirstUnread;
-(void)tableViewScrollToBottom:(BOOL)bottom;
-(void)controllerDidChangeContent:(id)controller;
-(void)__scrollToBottom;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)checkScrollAvailable;
-(void)setForceScrollToBottom;
-(void)controller:(id)controller didChangeSection:(id)section atIndex:(unsigned)index forChangeType:(unsigned)changeType;
-(void)controllerWillChangeContent:(id)controller;
-(float)topmarginWithCurrentDay:(id)currentDay previousDay:(id)day row:(int)row message:(id)message;
-(id)messageAtIndexPath:(id)indexPath;
-(id)indexPathForObject:(id)object;
-(id)invertedIndexPath:(id)path;
-(id)invertedIndexPath:(id)path numberOfRows:(unsigned)rows;
-(void)incrementFetchLimit;
-(id)newMembersFetchedResultsControllerForRootObject:(id)rootObject;
-(id)requestForChat;
-(id)predicateForMoreFetch;
-(long long)oldestMessageOffsetAtNextPage;
-(void)updateTableViewContentInset;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)bubbleHeightOfMessage:(id)message contentType:(short)type bubbleDirection:(unsigned)direction;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)checkMessageViewCellWithIndexPath:(id)indexPath;
-(void)noLongerAvailableMessageAlertByContentType:(short)type;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(Class)tableViewCellClass;
-(void)updateCell:(id)cell atIndexPath:(id)indexPath withManagedObject:(id)managedObject animating:(BOOL)animating;
-(void)updateProgressViewWithMessage:(id)message;
-(void)initSystemMessageLabel:(id)label managedObject:(id)object topMargin:(float)margin;
-(void)setupAudioBubbleInCell:(id)cell withMessage:(id)message direction:(unsigned)direction;
-(BOOL)canExportVoiceMessage:(id)message;
-(void)setupVideoBubbleInCell:(id)cell withMessage:(id)message direction:(unsigned)direction;
-(void)initSendMessageLabel:(id)label managedObject:(id)object topMargin:(float)margin;
-(void)initReceivedMessageLabel:(id)label managedObject:(id)object topMargin:(float)margin;
-(void)configureCellSelectivity:(id)selectivity withContentView:(id)contentView andTalkMessageObject:(id)object;
-(void)configureGestureRecognizerWithContentView:(id)contentView andTapGesture:(id)gesture;
-(void)setDataToCellForAnimationSticker:(id)animationSticker managedObject:(id)object;
-(void)setDataToCellForGeneralSticker:(id)generalSticker managedObject:(id)object;
-(void)setDataToCellForType:(short)type cellView:(id)view managedObject:(id)object bubbleDirection:(unsigned)direction;
-(void)reloadCell:(id)cell;
-(void)setText:(id)text forMessage:(id)message onCell:(id)cell;
-(void)setText:(id)text forMessage:(id)message onCell:(id)cell forOrientation:(int)orientation;
-(float)maxWidthForCafe:(float)cafe;
-(CGSize)calculateMessageHeightForCoupon:(id)coupon;
-(CGSize)calculateMessageHeightForCoupon:(id)coupon forOrientation:(int)orientation;
-(CGSize)calculateMessageHeightForAppLink:(id)appLink;
-(CGSize)calculateMessageHeightForAppLink:(id)appLink forOrientation:(int)orientation;
-(CGSize)calculateMessageHeightForCafe:(id)cafe messageType:(unsigned)type;
-(CGSize)calculateMessageHeightForCafe:(id)cafe forOrientation:(int)orientation messageType:(unsigned)type;
-(CGSize)calculateMessageHeightForLocation:(id)location managedObject:(id)object;
-(CGSize)calculateMessageHeight:(id)height managedObject:(id)object;
-(CGSize)calculateMessageHeightForLocation:(id)location managedObject:(id)object forOrientation:(int)orientation;
-(CGSize)calculateMessageHeight:(id)height managedObject:(id)object forOrientation:(int)orientation;
-(CGSize)calculateMessageHeight:(id)height managedObject:(id)object forOrientation:(int)orientation isForLocation:(BOOL)location;
-(float)widthForMessageForOrientation:(int)orientation isForLocation:(BOOL)location messageType:(unsigned)type;
-(id)attributedStringWithString:(id)string forOrientation:(int)orientation isForLocation:(BOOL)location isForGroupBoard:(BOOL)groupBoard shouldForceCharWrap:(BOOL)wrap messageType:(unsigned)type;
-(id)attributedStringDictionaryForWidth:(int)width shouldCharWrap:(BOOL)wrap;
-(id)getWideSpacingNewLineString;
-(id)getWideSpacingDictionary;
-(float)addDateBar:(id)bar currentDay:(id)day previousDay:(id)day3 row:(int)row message:(id)message;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)actionLeftRightSwipeAction:(id)action;
-(void)actionTouchNewMessageAlert;
-(void)hideInputStatusView;
-(void)showInputStatusViewWithInterval:(float)interval;
-(void)layoutInputView;
-(void)hideNewMessageView;
-(void)showNewMessageViewWith:(id)with;
-(void)rotateNewMessageViewToInterfaceOrientation:(int)interfaceOrientation;
-(void)layoutAddBlockBarForOrientation:(int)orientation;
-(void)layoutNewMessageNow;
-(void)layoutNewMessage;
-(void)layoutNewMessageWithAnimated:(BOOL)animated;
-(BOOL)isSeenPreviousMessage;
-(void)checkSeenPreviousMessage;
-(id)lastIndexPath;
-(BOOL)turnOffVoiceRecord;
-(id)badgeValueKVOKey;
-(id)badgeValueKVOObject;
-(void)updateBackButtonUnreadCountInInterfaceOrientation:(int)interfaceOrientation;
-(void)updateBackButtonWithUnreadCount:(id)unreadCount interfaceOrientation:(int)orientation forceUpdate:(BOOL)update;
-(void)willProcessPendingChanges;
-(void)didBecomeKey:(id)key;
-(void)disableMarkChatRead;
-(void)enableMarkChatReadAddToObserber;
-(void)enableMarkChatRead;
-(void)turnSpeakerImage;
-(void)toggleMemberView:(id)view;
-(void)showMemberView;
-(void)hideMemberView;
-(void)openRoomMemberView:(id)view;
-(BOOL)addBlockBarExists;
-(void)presentMyHomeView;
-(void)abortAllActiveUploaders;
-(void)sendMessageWithContentSourceURL:(id)contentSourceURL contentType:(short)type thumbnail:(id)thumbnail sharableObject:(id)object;
-(void)sendMessageWithContentSourceURL:(id)contentSourceURL contentType:(short)type thumbnail:(id)thumbnail;
-(void)sendMessageWithContentSourceURL:(id)contentSourceURL contentType:(short)type;
-(void)sendMessageWithMediaInfo:(id)mediaInfo sendNow:(BOOL)now;
-(id)thumbnailForMovieURL:(id)movieURL;
-(void)serverCopyWithMovieWithMediaInfo:(id)mediaInfo;
-(void)sendMessageWithMovieWithMediaInfo:(id)mediaInfo;
-(void)sendMessageWithAudioFileAtURL:(id)url;
-(void)sendMessageWithContentType:(short)contentType metadata:(id)metadata;
-(void)sendMessageWithLocation:(id)location;
-(void)sendMessageWithImage:(id)image sharableObject:(id)object;
-(void)sendMessageWithImage:(id)image;
-(void)sendMessageWithSticker:(int)sticker;
-(void)sendMessageWithText:(id)text;
-(int)stickerIdShouldSendInsteadOfText:(id)stickerId;
-(void)sendMessageWithText:(id)text image:(id)image location:(id)location latitude:(id)latitude sticker:(int)sticker contentType:(short)type metadata:(id)metadata;
-(void)resendMessage:(id)message;
-(void)sendMessageWithText:(id)text requestSequence:(int)sequence image:(id)image location:(id)location latitude:(id)latitude sticker:(int)sticker contentType:(short)type metadata:(id)metadata;
-(BOOL)isHitokotoViewcontroller;
-(id)systemTextWithMessageObject:(id)messageObject;
-(id)safeChatTextColor;
-(void)failedConfirm:(id)confirm;
-(id)timeToDateString:(id)dateString;
-(id)timeString:(id)string;
-(unsigned)skinType;
-(BOOL)hasDefaultSkinImage;
-(id)userSkinImage;
-(BOOL)hasLineSkinImage;
-(id)skinImageForAllRoom;
-(id)skinImageForThisRoom;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)didPresentActionSheet:(id)sheet;
-(void)blockedSendingFailureMenuActionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)sendingFailureMenuActionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionDeleteWithSendingFailureActionSheet:(id)sendingFailureActionSheet;
-(void)actionResendWithSendingFailureActionSheet:(id)sendingFailureActionSheet;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)didPresentAlertView:(id)view;
-(void)stickerTabMenuItemSelected:(id)selected;
-(void)detailMenuItemSelected:(id)selected;
-(void)deleteMenuItemSelected:(id)selected;
-(void)noteMenuItemSelected:(id)selected;
-(void)forwardMenuItemSelected:(id)selected;
-(void)copyMenuItemSelected:(id)selected;
-(BOOL)canBecomeFirstResponder;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)cellContentViewLongPressed:(id)pressed;
-(void)tappedContactMessageCell:(id)cell;
-(void)showLinkMessageInstallInfomation:(id)infomation installUri:(id)uri;
-(void)tappedCouponPostCell:(id)cell;
-(void)tappedAppLinkPostCell:(id)cell;
-(void)onTapImageMapContentView:(id)view;
-(void)ImageMapReloadViewTappedReloadButton:(id)button;
-(void)sentPresentButtonTapped:(id)tapped;
-(void)receivePresentButtonTapped:(id)tapped;
-(void)setSendButtonType:(int)type;
-(int)sendButtonType;
-(void)sendButtonLongPressed:(id)pressed;
-(void)setSendTypeSelectionPopupHidden:(BOOL)hidden;
-(void)sendTypeOptionButtonTapped:(id)tapped;
-(void)__delayed__hidePopup;
-(void)updateSendTypeOptionSelected;
-(id)supportedSendTypes;
-(void)saveSendButtonType;
-(void)initializeSendType;
-(void)tmpResetSendButtonTypeUserDefaults;
-(id)sendButtonTypeUserDefaultsKey;
-(void)removeLongPressGestureRecognizerOnSendButton:(id)button;
-(void)addLongPressGestureRecognizerOnSendButton:(id)button;
-(void)configureSendButton:(id)button;
-(BOOL)canSelectSendButtonType;
-(void)onSendMessageBar:(id)bar;
-(void)closeAttachmentInputView;
-(BOOL)canOpenAttachmentInputView;
-(void)onToggleMessageBar:(id)bar;
-(void)onAttachMessageBar:(id)bar;
-(void)refreshActionMapping;
-(id)attachmentActionsMapping;
-(id)imageNameForAttachmentKey:(unsigned)attachmentKey installed:(BOOL)installed;
-(id)chatMenuViewController:(id)controller didSelectItem:(id)item;
-(void)updateMenuItems;
-(void)chatMenuViewController:(id)controller didPressChatMenuButton:(id)button withStateOpened:(BOOL)stateOpened;
-(void)closeProcessWhenHideStickerPreview;
-(void)hideStickerPreview;
-(void)sendMessageWithStickerWhenExistPreviewSticker;
-(void)showStickerPreviewGuide;
-(void)saveStickerInputHistory;
-(id)stickerPreview;
-(id)makeShareOptionsToNote;
-(void)shareTalkMessagesToOthers;
-(void)shareTalkMessagesToNote;
-(void)loadOlderMessagesWhenDeletedAllShowingMessages;
-(void)deleteTalkMessages;
-(void)actionEditBarRightButton;
-(void)actionEditBarLeftButton;
-(void)updateEditButtonBar;
-(void)scrollToBottomIfLastCellIsVisible:(BOOL)bottomIfLastCellIsVisible;
-(void)refreshToEditModeWithIndex:(unsigned)index;
-(void)endEditMessages:(BOOL)messages;
-(void)startEditMessages;
-(void)openAlbum;
-(void)openGallery;
-(void)groupHomeButtonPressed:(id)pressed;
-(void)createGroup;
-(void)editDisplayName;
-(void)openEditGroup;
-(void)leaveGroup;
-(void)confirmLeaveGroup;
-(void)leaveRoom;
-(void)confirmLeaveRoom;
-(void)setNotificationOn:(BOOL)on;
-(void)setBlockOn:(BOOL)on;
-(void)openPresent;
-(void)openGame;
-(void)openGroupBoard;
-(void)openTalkSettings;
-(void)makeALineCall;
-(void)makeAVideoCall;
-(void)makeACall;
-(void)openInviteView;
-(void)onBackPressed:(id)pressed;
-(void)didReceiveCallWindowWillAppearNotification:(id)didReceiveCallWindow;
-(void)didReceiveMenuControllerWillHideNotification:(id)didReceiveMenuController;
-(void)willDisAppearInAppBrowser:(id)appBrowser;
-(void)willAppearInAppBrowser:(id)appBrowser;
-(void)delayOnTalkChatObjectInviterMidUpdated;
-(void)didReceivedChangedInputStatusNotification:(id)notification;
-(void)onTalkChatObjectInviterMidUpdated:(id)updated;
-(void)forceReorientWithMask:(unsigned)mask;
-(void)onCallWindowDidRemoved:(id)onCallWindow;
-(void)onCallWindowDidMaximized:(id)onCallWindow;
-(void)prepareForUnreadPosition:(id)unreadPosition;
-(id)maskImageForThemeWithDirection:(unsigned)direction;
-(id)chatTitleview;
-(float)titleViewRightItemExtraWidth;
-(float)titleViewLeftItemExtraWidth;
-(void)refreshTitleView;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)handleVoiceMessageInterfaceOrientation:(int)orientation;
-(void)handleSendTypeInterfaceOrientation:(int)orientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)adjustTableViewOffsetWhenRotate;
-(void)resizeVisibleMessagesForInterfaceOrientation:(int)interfaceOrientation;
-(void)setMessageTextViewEditable:(BOOL)editable;
-(id)textForLocationBubble:(id)locationBubble;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)willMoveToParentViewController:(id)parentViewController;
-(void)recoverUIStates;
-(BOOL)isVisibleViewController;
-(void)forceSetButtonTypeToSendIfHasText;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadSkin;
-(void)applyLineSkinStyleToCell;
-(void)adjustSkinViewContentModeWithSkinImageName:(id)skinImageName;
-(void)changeSkinViewContentModeToOrientation:(int)orientation;
-(void)setSkinImageToBackgroundView;
-(void)tableViewTapped:(id)tapped;
-(void)configureWarningView;
-(void)configureMemberListView;
-(void)viewDidLoad;
-(void)addAddBlockBarViewOnRoomIfNeeded;
-(BOOL)wasRoomDeleted;
-(BOOL)isJoinedGroup;
-(BOOL)isShowOnetoOneNoteButton;
-(void)setRightBarButtonItemWithInterfaceOrientation:(int)interfaceOrientation;
-(id)cellForMessageObject:(id)messageObject;
-(void)configManagedObjects;
-(void)recordDeleted;
-(void)objectChangedNotificationReceived:(id)received;
-(void)updateNavigationControls;
-(void)updateAddBlockBarView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithChat:(id)chat;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LAURLManager : NSObject {
}
+(id)getPhotoSyncFailLog:(id)log;
+(id)getAlbumSyncFailLog:(id)log;
+(id)getAlbumListNewMarkUnMark;
+(id)getCheckNewMarkURL;
+(id)getPhotoInfoURL:(id)url;
+(id)getPhotoDeleteURL:(id)url;
+(id)getPhotosUpdateURL:(id)url;
+(id)getPhotosFullFetchURL:(id)url;
+(id)getAlbumDeleteURL:(id)url;
+(id)getAlbumsUpdateURL:(id)url;
+(id)getAlbumsFullFetchURL:(id)url;
+(id)uploadPhotoURL:(id)url;
+(id)modifyAlbumURL:(id)url;
+(id)createAlbumURL:(id)url;
+(id)urlWithPath:(id)path param:(id)param version:(id)version;
+(id)queryFromDictionary:(id)dictionary;
+(id)escapeString:(id)string;
+(BOOL)shouldUseSecureURL;
+(BOOL)isOBSURL:(id)obsurl;
+(id)baseURL;
+(id)obsUploadURLSSL;
+(id)obsUploadURL;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface NLCallPuchaseHistoryCell : UITableViewCell {
	UILabel* _puchaseTypeLabel;
	UILabel* _creditLabel;
	UILabel* _puchaseDate;
	UIImageView* _giftIcon;
	UIView* _bottomLine;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)addGiftIcon;
-(void)setEmptyData;
-(void)setHistoryInfo:(id)info;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LGAssetInfoView : LGPhotoInfoView <MKMapViewDelegate, MKReverseGeocoderDelegate> {
	LGAsset* _asset;
	NSString* _groupName;
	MKMapView* _mapView;
	UIGestureRecognizer* _panGesture;
	MKReverseGeocoder* _reverseGeocoder;
	UILabel* _locationValueLabel;
	UIImageView* _locationBgImageView;
}
@property(retain, nonatomic) UIImageView* locationBgImageView;
@property(retain, nonatomic) UILabel* locationValueLabel;
@property(retain, nonatomic) MKReverseGeocoder* reverseGeocoder;
@property(retain, nonatomic) UIGestureRecognizer* panGesture;
@property(retain, nonatomic) MKMapView* mapView;
@property(retain, nonatomic) NSString* groupName;
@property(retain, nonatomic) LGAsset* asset;
-(void).cxx_destruct;
-(void)reverseGeocoder:(id)geocoder didFindPlacemark:(id)placemark;
-(void)reverseGeocoder:(id)geocoder didFailWithError:(id)error;
-(void)reverseGeocodeLocation:(id)location;
-(void)didPanGesture:(id)gesture;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)setPlaceMark:(id)mark;
-(void)layoutSubviews;
-(void)addLocationRow;
-(void)addDefaultInfoRows;
-(id)bundleName;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame asset:(id)asset groupName:(id)name delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface MBDataManager : NSObject {
	NSOperationQueue* mOperationQueue;
	MBDataResultsController* mResultsController;
	NSDate* mLastUpdateDate;
	BOOL mUpdating;
	BOOL mFetching;
	BOOL mFetchEnded;
	BOOL mLoaded;
	id<MBDataManagerDelegate> mDelegate;
}
@property(assign, nonatomic) id<MBDataManagerDelegate> delegate;
-(void).cxx_destruct;
-(void)unarchive;
-(void)archiveAndDrain;
-(void)archiveWithData:(id)data;
-(void)archive;
-(BOOL)fetchWithFetchCount:(int)fetchCount;
-(BOOL)fetch;
-(BOOL)isFetching;
-(BOOL)canFetch;
-(BOOL)update;
-(BOOL)isUpdating;
-(void)load;
-(BOOL)shouldRetryIfNotLoaded;
-(BOOL)canLoad;
-(void)reset;
-(id)lastUpdateDate;
-(void)resetLastUpdateDate;
-(void)setFetchEnded:(BOOL)ended;
-(id)dataResultsController;
-(id)fetchedResultsController;
-(id)operationQueue;
-(id)initWithArchiveName:(id)archiveName;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBTransitionCustomScheme : NSObject {
}
+(id)transitionWithCustomScheme:(id)customScheme;
@end

__attribute__((visibility("hidden")))
@interface NLThemePurchaseHistoryViewController : NLTableViewController <LineCoinHistoryFooterDelegate> {
	NLSafeUnretainedObject* _uSelf;
	NSString* _shopId;
	NSMutableArray* _purchaseRecordList;
	UIView* _restoreFooterView;
	UIView* _loadingFooterView;
	UIView* _noResultView;
	BOOL _isFetching;
}
-(void).cxx_destruct;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)footerEvent:(int)event;
-(id)newNoResultView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(BOOL)isMaintenanceShownBecauseOfError:(id)error;
-(void)fetchPurchaseList;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LANotificationView : UIControl {
	UIImageView* _backgroundImageView;
	UIImageView* _newMarkView;
	UILabel* _label;
	unsigned _type;
	id _delegate;
}
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) unsigned type;
-(void).cxx_destruct;
-(void)hide;
-(void)showInView:(id)view duration:(float)duration;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame type:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface MBTimelinePostFooterView : MBBaseChildCellView {
	MBActivity* mActivity;
	int mPostViewType;
	UIImageView* mBackgroundView;
	MBPostFeedbackView* mPostFeedbackView;
	MBPostFeedbackCountView* mPostFeedbackCountView;
}
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(void)setCellData:(id)data;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface MBAPIRequest : NSObject {
	NSURL* mBaseURL;
	NSString* mPath;
	NSMutableDictionary* mQuery;
	int mRequestContentType;
	int mServerType;
	unsigned mOption;
}
@property(assign, nonatomic) unsigned option;
@property(assign, nonatomic) int requestContentType;
@property(readonly, assign, nonatomic) int serverType;
@property(readonly, assign, nonatomic) NSString* path;
+(id)hasNewPostWithMID:(id)mid;
+(id)userPopupDetailRequest;
+(id)userPopupRequest;
+(id)postStatusRequestWithPostID:(id)postID userMID:(id)mid;
+(id)postListRequest;
+(id)postPhotoGetRequest;
+(id)postGetRequest;
+(id)postDeleteRequest;
+(id)postShareToTalkRoomRequest;
+(id)postUpdateRequest;
+(id)postCreateRequest;
+(id)myhomeUpdateCoverImageRequest;
+(id)myhomeInfoGetRequest;
+(id)syncMemberMyhomeGroupRequest;
+(id)syncMyhomeGroupRequest;
+(id)memberUpdateMyhomeGroupRequest;
+(id)membersMyhomeGroupRequest;
+(id)updateMyhomeGroupRequest;
+(id)deleteMyhomeGroupRequest;
+(id)createMyhomeGroupRequest;
+(id)mergeActivityListRequest;
+(id)statusInfoRequest;
+(id)statusNewPostRequest;
+(id)hideRequest;
+(id)delHideRequest;
+(id)addHideRequest;
+(id)udpateAutoOpenRequest;
+(id)autoOpenRequest;
+(id)autoOpenInitRequest;
+(id)blockListRequest;
+(id)blockRemoveRequest;
+(id)blockAddRequest;
+(id)commentListRequest;
+(id)commentDeleteRequest;
+(id)commentCreateRequest;
+(id)likeUserListRequest;
+(id)likeListRequest;
+(id)likeDeleteRequest;
+(id)likeCreateRequest;
+(id)activityListRequest;
+(id)activityGetRequest;
+(id)homeTalkRoomAPIPath:(id)path;
+(id)homeUserPopupAPIPath:(id)path;
+(id)homeAPIPath:(id)path;
+(id)timelineListAPIPath:(id)path;
+(id)timelineSAPIPath:(id)path;
+(id)timelineAPIPath:(id)path;
+(id)deviceOperatingSystem;
+(void)initialize;
-(void).cxx_destruct;
-(id)request;
-(void)setValue:(id)value forQueryKey:(id)queryKey;
-(id)valueForQueryKey:(id)queryKey;
-(id)description;
-(id)initWithBaseURL:(id)baseURL serverType:(int)type path:(id)path;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumDataProxy : NSObject <LAAlbumDataDelegate> {
	unsigned mBgTask;
	NSMutableDictionary* mIsFetching;
	NSOperationQueue* mAlbumManagerQueue;
	LAAlbumProtocol* mAlbumProtocol;
	NSMutableDictionary* _recoverDate;
	NSMutableDictionary* _shouldDeleteDict;
}
@property(retain, nonatomic) NSMutableDictionary* shouldDeleteDict;
@property(retain, nonatomic) NSMutableDictionary* recoverDate;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)updatedAlbumList:(id)list lastDict:(id)dict groupID:(id)anId;
-(void)fullFetchAlbumList:(id)list lastDict:(id)dict groupID:(id)anId;
-(void)setAlbumLastID:(id)anId groupID:(id)anId2;
-(void)updateAlbumNotificationDeleted:(id)deleted groupID:(id)anId;
-(void)updateAlbumNotificationPhotoAddCompleted:(id)completed groupID:(id)anId;
-(BOOL)isFetching:(id)fetching;
-(void)requestRecoverFullFetch:(id)fetch message:(id)message;
-(void)requestPullDownRefresh:(BOOL)refresh groupID:(id)anId;
-(void)requestAlbumList:(id)list;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupFriendsPickerViewController : MBViewController <NSFetchedResultsControllerDelegate, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, MBBlockManagerDelegate> {
	NLSegmentedControl* mSegmentControl;
	UISearchBar* mSearchField;
	UITableView* mTableView;
	NSMutableSet* mCheckedGroups;
	NSMutableSet* mCheckedFriends;
	NSMutableSet* mCheckedDuplicated;
	NSMutableArray* mFilteredListContent;
	NSMutableSet* mMaskedFriends;
	NSMutableArray* mGroups;
	NSFetchedResultsController* mUsersFetchedResultsController;
	NSFetchedResultsController* mFavoriteUsersFetchedResultsController;
	NSFetchedResultsController* mGroupsFetchedResultsController;
	MBBlockManager* mBlockManager;
	NSError* mError;
	id mDelegate;
	BOOL mIsFiltering;
}
-(void).cxx_destruct;
-(void)blockManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(id)filterGroupContentForSearchText:(id)searchText;
-(id)filterFriendContentForSearchText:(id)searchText;
-(void)filterContentForSearchText:(id)searchText scope:(id)scope;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)messageCellForTableView:(id)tableView;
-(id)emptyCellForTableView:(id)tableView;
-(id)guideCellForTable:(id)table segmentIndex:(int)index;
-(id)cellForTableView:(id)tableView managedObject:(id)object;
-(id)groupCellForTableView:(id)tableView managedObject:(id)object;
-(id)userCellForTableView:(id)tableView managedObject:(id)object;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)hasFavorite;
-(BOOL)isEmpty;
-(void)updateNavigationRightButtonLabel;
-(BOOL)updateSelectionWithItem:(id)item;
-(BOOL)isSelectedItem:(id)item;
-(void)addToCheckedFriends:(id)checkedFriends;
-(void)removeFromCheckedFriends:(id)checkedFriends;
-(void)removeCheckedFriendWithDuplicated:(id)duplicated;
-(BOOL)isBlockedFriend:(id)aFriend;
-(BOOL)isSelectedFriend:(id)aFriend;
-(id)groupsFetchedResultsController;
-(id)favoriteUsersFetchedResultsController;
-(id)usersFetchedResultsController;
-(id)groups;
-(id)maskedFriends;
-(id)filteredListContent;
-(id)fileterScopeForSelectedSegmentIndex;
-(int)fetchedObjectsCountForSelectedSegmentIndex;
-(id)fetchedObjectForSelectedSegmentIndexWithSection:(int)section;
-(id)fetchedResultControllerForSelectedSegmentIndex;
-(id)blockManager;
-(void)done:(id)done;
-(void)cancel:(id)cancel;
-(void)initilizeSearchBar;
-(void)initilizeTableView;
-(void)initilizeSegmentedTab;
-(void)initilizeNavigationBar;
-(void)didReceiveKeyboardWillHideNotification:(id)didReceiveKeyboard;
-(void)didReceiveKeyboardDidShowNotification:(id)didReceiveKeyboard;
-(void)changeSegment:(id)segment;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initBlockManager;
-(void)addFriendsToCheckedFriendsAndCheckedGroups:(id)checkedFriendsAndCheckedGroups;
-(void)initDataModels;
-(id)initWithFriends:(id)friends delegate:(id)delegate;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface MBActivity : MBBaseActivityContent <MBActorObserving> {
	int mAppSn;
	int mActivityType;
	MBActor* mFromUser;
	NSString* mFromDevice;
	NSString* mCreatedAt;
	NSString* mMyHomeCreatedAt;
	NSDate* mCreateDate;
	NSDate* mUpdateDate;
	NSString* mTimelineUpdatedAt;
	BOOL mLiked;
	BOOL mLikeEnabled;
	int mLikeCount;
	NSArray* mLikeList;
	NSString* mMyLikeType;
	int mCommentCount;
	NSArray* mCommentList;
	MBExtData* mExtData;
	NSString* mContentType;
	NSArray* mURLs;
	int mStatus;
	float mTimelineRowHeight;
	float mMyhomeRowHeight;
	float mTimelineEndRowHeight;
	NSString* externalID;
	NSString* activityID;
	int _activityServerType;
	NSString* _mergeID;
}
@property(assign, nonatomic) float timelineEndRowHeight;
@property(assign, nonatomic) float myhomeRowHeight;
@property(assign, nonatomic) float timelineRowHeight;
@property(assign, nonatomic) int status;
@property(readonly, assign, nonatomic) NSArray* URLs;
@property(readonly, assign, nonatomic) NSString* contentType;
@property(readonly, assign, nonatomic) MBExtData* extData;
@property(readonly, assign, nonatomic) NSArray* commentList;
@property(readonly, assign, nonatomic) int commentCount;
@property(retain, nonatomic) NSString* myLikeType;
@property(readonly, assign, nonatomic) NSArray* likeList;
@property(readonly, assign, nonatomic) int likeCount;
@property(assign, nonatomic, getter=isLikeEnabled) BOOL likeEnabled;
@property(readonly, assign, nonatomic) BOOL liked;
@property(readonly, assign, nonatomic) NSString* timelineUpdatedAt;
@property(readonly, assign, nonatomic) NSDate* updateDate;
@property(readonly, assign, nonatomic) NSDate* createDate;
@property(readonly, assign, nonatomic) NSString* myHomeCreatedAt;
@property(readonly, assign, nonatomic) NSString* createdAt;
@property(readonly, assign, nonatomic) NSString* fromDevice;
@property(readonly, assign, nonatomic) MBActor* fromUser;
@property(retain, nonatomic) NSString* mergeID;
@property(readonly, assign, nonatomic) NSString* activityID;
@property(readonly, assign, nonatomic) NSString* externalID;
@property(readonly, assign, nonatomic) int activityType;
@property(readonly, assign, nonatomic) int activityServerType;
@property(readonly, assign, nonatomic) int appSn;
+(int)activityTypeWithTypeNumber:(int)typeNumber;
-(void).cxx_destruct;
-(void)notifyIsLikeActive;
-(void)resetRowHeights;
-(BOOL)openURL;
-(void)updateComments:(id)comments countDiff:(int)diff;
-(void)updateLikeInfo:(id)info;
-(BOOL)isEqual:(id)equal;
-(id)author;
-(id)postID;
-(BOOL)isUseComment;
-(BOOL)isUseLike;
-(BOOL)isFeedback;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(int)postStatusWithStringValue:(id)stringValue;
-(id)commentListWithCommentInfos:(id)commentInfos parent:(id)parent;
-(id)likeListWithLikeInfos:(id)likeInfos parent:(id)parent;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(void)dealloc;
-(id)initWithMyhomeInfo:(id)myhomeInfo;
-(id)initWithTimelineInfo:(id)timelineInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupEditCell : MBTableViewActionCell {
	UILabel* mGroupName;
	UIButton* mGroupCount;
	UIButton* mEditButton;
	NLMyhomeGroup* mGroup;
}
-(void).cxx_destruct;
-(void)setData:(id)data;
-(id)group;
-(void)layoutSubviews;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageOpRequestASIHTTP : NSObject <NLObjectStorageOpRequest> {
	id _completionBlock;
	id _failedBlock;
	id _downloadProgressBlock;
	id _uploadProgressBlock;
	id<NLObjectStorageOpProgressDelegate> _uploadProgressDelegate;
	ASIHTTPRequest* _request;
	NSURL* _URL;
}
@property(retain, nonatomic) NSString* temporaryFileUploadPath;
@property(retain, nonatomic) NSString* temporaryFileDownloadPath;
@property(retain, nonatomic) NSString* downloadDestinationPath;
@property(readonly, assign, nonatomic) BOOL isFinished;
@property(readonly, assign, nonatomic) BOOL isCancelled;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSData* responseData;
@property(readonly, assign, nonatomic) NSString* responseString;
@property(readonly, assign, nonatomic) NSDictionary* responseHeaders;
@property(readonly, assign, nonatomic) int responseStatusCode;
@property(readonly, assign, nonatomic) NSDictionary* requestHeaders;
@property(assign, nonatomic) id<NLObjectStorageOpProgressDelegate> uploadProgressDelegate;
@property(copy, nonatomic) id uploadProgressBlock;
@property(copy, nonatomic) id downloadProgressBlock;
@property(copy, nonatomic) id failedBlock;
@property(copy, nonatomic) id completionBlock;
@property(retain, nonatomic) NSURL* URL;
@property(readonly, assign, nonatomic) ASIHTTPRequest* request;
+(BOOL)isNetworkError:(id)error;
+(BOOL)isCanceledError:(id)error;
-(void).cxx_destruct;
-(id)description;
-(void)setProgress:(float)progress;
-(void)removeTemporaryUploadFile;
-(void)removeTemporaryDownloadFile;
-(void)setPostBodyFilePath:(id)path;
-(void)setShouldStreamPostDataFromDisk:(BOOL)streamPostDataFromDisk;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)addRequestHeader:(id)header value:(id)value;
-(void)setUserAgentString:(id)string;
-(void)setFile:(id)file forKey:(id)key;
-(void)setPostValue:(id)value forKey:(id)key;
-(void)setPostBodyParameters:(id)parameters;
-(void)setPostBodyString:(id)string;
-(void)setPostBody:(id)body;
-(void)setRequestMethod:(id)method;
-(void)setUserInfo:(id)info;
-(id)userInfo;
-(void)setNumberOfTimesToRetryOnTimeout:(int)retryOnTimeout;
-(void)setShouldAttemptPersistentConnection:(BOOL)attemptPersistentConnection;
-(void)setTimeOutSeconds:(double)seconds;
-(void)setCachePolicy:(unsigned)policy;
-(void)setShouldContinueWhenAppEntersBackground:(BOOL)continueWhenAppEntersBackground;
-(id)requestURL;
-(id)requestOperation;
-(id)requestOperationWith:(id)with;
-(id)retryOperationWith:(id)with;
-(void)dealloc;
-(id)initWithURL:(id)url uploadFormData:(BOOL)data;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoRetryView : UIView {
	UIView* mBackgroundView;
	UILabel* mMessageLabel;
	MBRoundButton* mRetryButton;
	UIButton* mCloseButton;
	id mImageViewDelegate;
}
@property(assign, nonatomic) id imageViewDelegate;
+(id)photoRetryViewWithActionBlock:(id)actionBlock message:(id)message delegate:(id)delegate closeAction:(id)action;
-(void).cxx_destruct;
-(id)backgroundView;
-(void)handleTap:(id)tap;
-(void)layoutSubviews;
-(id)createHeaderCloseButton:(id)button block:(id)block;
-(id)initWithFrame:(CGRect)frame message:(id)message block:(id)block closeAction:(id)action;
-(id)initWithFrame:(CGRect)frame block:(id)block closeAction:(id)action;
@end

__attribute__((visibility("hidden")))
@interface LAUploaderDisk : NSObject {
	NSString* mCacheDir;
	dispatch_queue_s* mExifInfoQueue;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)deleteExifForKey:(id)key;
-(void)exifForKey:(id)key block:(id)block;
-(void)saveExif:(id)exif forKey:(id)key;
-(void)deleteQueueForKey:(id)key;
-(id)queueForKey:(id)key;
-(BOOL)saveQueue:(id)queue forKey:(id)key;
-(void)removeUploadQueueForKey:(id)key;
-(void)addMainUploadQueue:(id)queue;
-(id)queueList;
-(id)exifPathForKey:(id)key;
-(id)pathForKey:(id)key;
-(id)pathForUpload;
-(void)dealloc;
-(id)init;
-(void)createLineAlbumImageCacheFolder;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBBaseActivityContent : NSObject <MBActivityContent> {
	MBActivity* mParentActivity;
}
@property(assign, nonatomic) MBActivity* parentActivity;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBPhoto : NSObject <NSCoding> {
	NSString* mObjectID;
	NSURL* mSourceURL;
	NSURL* mListThumbnailURL;
	NSURL* mListMultiThumbnailURL;
	NSURL* mViewThumbnailURL;
	CGSize mSize;
	NSString* mServiceName;
	NSString* mNamespace;
	NSMutableDictionary* mQuery;
	BOOL mIsPreferCdn;
	BOOL mIsForbiddenSave;
}
@property(readonly, assign, nonatomic) BOOL isForbiddenSave;
@property(readonly, assign, nonatomic) BOOL isPreferCdn;
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, assign, nonatomic) NSURL* viewThumbnailURL;
@property(readonly, assign, nonatomic) NSURL* listMultiThumbnailURL;
@property(readonly, assign, nonatomic) NSURL* listThumbnailURL;
@property(readonly, assign, nonatomic) NSURL* sourceURL;
@property(readonly, assign, nonatomic) NSString* objectID;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)isExternal;
-(BOOL)isEqual:(id)equal;
-(id)description;
-(id)initWithShareActivity:(id)shareActivity;
-(id)initWithShareActivityInfo:(id)shareActivityInfo;
-(id)initWithExternalInfo:(id)externalInfo;
-(id)initWithMediaInfo:(id)mediaInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLThemeListItemView : PSUICollectionViewCell_ <UIGestureRecognizerDelegate> {
	UIImageView* _imageView;
	UIButton* _button;
	UIImageView* _newIcon;
	UILabel* _titleLabel;
	UILabel* _priceLabel;
	LineShopProductDetail* _item;
	NLSafeUnretainedObject* _uSelf;
	UIActivityIndicatorView* _act;
	LineFileDownload* _currentDownload;
	id<NLThemeListItemViewDelegate> _tapDelegate;
}
@property(assign) id<NLThemeListItemViewDelegate> tapDelegate;
+(CGSize)sizeOfCellForText:(id)text;
+(id)labelForPrice;
+(id)labelForTitle;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)onTap:(id)tap;
-(void)setupSubviews;
-(void)setup;
-(void)loadImage;
-(void)setErrorImage;
-(void)setItem:(id)item;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBDataResultsController : NSFetchedResultsController {
	NSMutableArray* mObjects;
	NSString* mArchiveName;
}
+(void)initialize;
+(void)removeCacheFolder;
+(id)cachePathWithName:(id)name;
+(id)cacheDirPath;
-(void).cxx_destruct;
-(BOOL)deleteObjectsAtIndexSet:(id)indexSet;
-(BOOL)deleteObject:(id)object;
-(void)replaceObject:(id)object;
-(void)addObjectsFromArray:(id)array;
-(void)insertObjects:(id)objects atIndexes:(id)indexes;
-(void)setObjects:(id)objects;
-(id)indexPathForObject:(id)object;
-(id)objectsAtIndexSet:(id)indexSet;
-(id)objectAtIndexPath:(id)indexPath;
-(id)fetchedObjects;
-(BOOL)performFetch:(id*)fetch;
-(id)initWithArchiveName:(id)archiveName;
-(void)unarchiveWithName:(id)name;
-(void)unarchive;
-(void)archiveAndDrain;
-(void)archive;
-(void)archiveWithData:(id)data;
-(id)archiveName;
-(void)deleteObjectDuplicatedIdWithObjects:(id)objects fromObject:(id)object;
@end

__attribute__((visibility("hidden")))
@interface MBTextInfo : NSObject {
	unsigned mStart;
	unsigned mEnd;
	NSString* mActorId;
	MBActor* mActor;
	MBUrl* mUrl;
	BOOL mUserValid;
	BOOL mIsBold;
}
@property(readonly, assign, nonatomic) BOOL isBold;
@property(readonly, assign, nonatomic) BOOL userValid;
@property(readonly, assign, nonatomic) MBUrl* url;
@property(readonly, assign, nonatomic) MBActor* actor;
@property(readonly, assign, nonatomic) NSString* actorId;
@property(readonly, assign, nonatomic) unsigned end;
@property(readonly, assign, nonatomic) unsigned start;
+(id)initWithTextInfoArray:(id)textInfoArray;
-(void).cxx_destruct;
-(id)initWithActor:(id)actor;
-(id)initWithTextInfo:(id)textInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBUIViewVerticalLinearLayout : MBBaseLayout {
	NSArray* mSubViews;
	int mOrientation;
}
@property(assign, nonatomic) int orientation;
+(id)createWithSubviews:(id)subviews;
-(void).cxx_destruct;
-(CGSize)preferredSize:(CGSize)size;
-(void)layout;
-(id)initWithSubviews:(id)subviews;
@end

__attribute__((visibility("hidden")))
@interface NLCallBaseViewController : NLStatusBarControllableViewController {
	unsigned _callViewMode;
	id<NCallViewControllerDelegate> _delegate;
}
@property(assign, nonatomic) id<NCallViewControllerDelegate> delegate;
@property(assign, nonatomic) unsigned callViewMode;
-(void)setVideoViewLayout:(unsigned)layout;
-(id)buttonVideoCameraSwitching;
-(id)viewLoading;
-(id)viewVideoCallingAccept;
-(id)imageViewVideoRotatableMuteIcon;
-(id)viewRemoteVideoRendering;
-(id)viewLocalVideoRendering;
-(id)imageViewVideoRotatableCameraIcon;
-(id)buttonVideoCameraOff;
-(id)buttonVideoCall;
-(void)updateViewNetworkStatusSetHidden:(BOOL)hidden;
-(void)resetViews;
-(void)updateLayout;
-(void)updateMuteButton;
-(void)updateSpeakerButton;
-(void)updateCallViewErrorNotSupproted;
-(void)processOnMaximizingCallView;
-(void)processOnMinimizingCallView;
-(void)processOnEnteringForeground;
-(void)processOnEnteringBackground;
-(void)showCallStatusBarDutation:(double)dutation isInit:(BOOL)init;
-(void)presentNetworkStatus:(int)status;
-(void)setUserGuideHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)showMessagePopup:(int)popup animated:(BOOL)animated;
-(void)hideMesssgePopupAnimated:(BOOL)animated;
-(void)updateAcceptCall;
-(void)updateLineCallPaidInfo:(id)info;
-(void)updateCallingUser:(id)user;
-(void)updateCallViewModes:(unsigned)modes;
-(void)showVoiceCallingView;
-(void)updateCallDurationView:(BOOL)view;
-(int)preferredStatusBarStyle;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoCommentViewController : MBActivityEndViewController {
	UIWindow* keyWindow;
	UIWindow* window;
	MBActivity* activity;
	int currentStatusBarStyle;
	MBPhotoViewerViewController* photoViewer;
	UIButton* background;
	BOOL isReloadViews;
	NSAttributedString* inputAttributedText;
	NSString* inputText;
	BOOL emojiSelected;
	BOOL willClose;
	BOOL _commentEditable;
	BOOL _shouldRotatable;
	MBPhotoCommentView* _photoCommentView;
	MBPhotoCommentViewActions* _photoActions;
	int _statusBarStyle;
	NSArray* _savedTextMetadataArray;
}
@property(copy, nonatomic) NSArray* savedTextMetadataArray;
@property(assign, nonatomic) int statusBarStyle;
@property(readonly, assign, nonatomic) MBPhotoCommentViewActions* photoActions;
@property(readonly, assign, nonatomic) MBPhotoCommentView* photoCommentView;
@property(assign, nonatomic, getter=isShouldRotatable) BOOL shouldRotatable;
@property(assign, nonatomic, getter=isCommentEditable) BOOL commentEditable;
-(void).cxx_destruct;
-(void)attemptRotationToDeviceOrientation;
-(void)statusBarOrientationDidChanged:(id)statusBarOrientation;
-(void)didTapped:(id)tapped;
-(void)callCancelBlockAction;
-(void)callAddFriendAction;
-(void)presentModalViewController:(id)controller animated:(BOOL)animated;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(void)showIndicatorLayer;
-(void)showPostDetailErrorAlert:(id)alert showRetry:(BOOL)retry;
-(void)postManager:(id)manager didFinishDeletingCommentWithError:(id)error;
-(void)postManager:(id)manager didFinishCreatingCommentWithError:(id)error;
-(void)dataManager:(id)manager didFinishUpdatingWithError:(id)error;
-(void)dataManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(unsigned)supportedInterfaceOrientations;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(int)preferredStatusBarStyle;
-(void)setStatusBarStyleForiOS7:(int)a7;
-(void)saveInputText;
-(void)restoreInputText;
-(void)viewUnload;
-(void)viewLoad;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)dealloc;
-(void)setBackgroundAlphaRate:(float)rate;
-(void)hideInAppBrowser:(id)appBrowser;
-(void)hidePhotoCommentViewController;
-(void)showPhotoCommentViewController;
-(id)initWithActivity:(id)activity sourceType:(id)type photoViewer:(id)viewer;
@end

__attribute__((visibility("hidden")))
@interface LAUploadMediaModel : LAUploadAssetModel <NSCoding> {
	NSString* _oid;
	NSString* _sourceOBSPathForCopy;
}
@property(retain, nonatomic) NSString* sourceOBSPathForCopy;
@property(retain, nonatomic) NSString* oid;
-(void).cxx_destruct;
-(BOOL)canOBSCopy;
-(void)setSourceOBSPathForCopyFromCopyOption:(id)copyOption;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLDummyTextInput : UIView <UIKeyInput> {
}
@property(assign, nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property(assign, nonatomic) BOOL enablesReturnKeyAutomatically;
@property(assign, nonatomic) int returnKeyType;
@property(assign, nonatomic) int keyboardAppearance;
@property(assign, nonatomic) int keyboardType;
@property(assign, nonatomic) int spellCheckingType;
@property(assign, nonatomic) int autocorrectionType;
@property(assign, nonatomic) int autocapitalizationType;
-(void)deleteBackward;
-(void)insertText:(id)text;
-(BOOL)hasText;
-(BOOL)canBecomeFirstResponder;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeCellActivityContentViewMap : MBActivityContentViewMap {
}
-(void)callBackAddCellView:(int)view contentView:(id)view2;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeCell : MBTableViewActionCell {
	MBActivityCellContainer* mActivityCellContainer;
	UIImageView* mBackImageView;
	UIButton* mHideButton;
	MBActivityContentViewMap* mActivityContentViewMap;
}
@property(readonly, assign, nonatomic) MBActivityCellContainer* activityCellContainer;
+(UIEdgeInsets)marginWithCellView:(Class)cellView;
+(UIEdgeInsets)margin;
+(id)myhomeHeightForTableView:(id)tableView data:(id)data postViewType:(int)type;
+(id)myhomeCellForTableView:(id)tableView data:(id)data postViewType:(int)type;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)reLayout:(id)layout reload:(BOOL)reload;
-(float)height;
-(void)resetLayout;
-(void)redraw;
-(void)layoutCellContainer;
-(void)setData:(id)data;
-(void)initHideButton;
-(void)initBackImageView;
-(id)initWithActivity:(id)activity postViewType:(int)type reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBRichTextContentView : MBBaseChildCellView {
	MBTextLocation* mTextLocation;
	int mPostViewType;
	NMAttributedLabel* mTextView;
	MBCellAttributedLabelDelegate* mTextDelegate;
}
@property(readonly, assign, nonatomic) MBTextLocation* textLocation;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(void)setCellData:(id)data;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupSettingCell : MBTableViewActionCell {
	UIButton* mAddGroupButton;
	UIButton* mSettingsButton;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoContentView : MBBaseChildCellView {
	int mPostViewType;
	MBActivity* mActivity;
	MBPhotos* mPhotos;
	MBTextLocation* mTextLocation;
	MBPostSingleImageView* mSingleImageView;
	MBPostMultiImageView* mMultiImageView;
	BOOL mIsShare;
}
@property(assign, nonatomic) BOOL isShare;
@property(readonly, assign, nonatomic) MBPostMultiImageView* multiImageView;
@property(readonly, assign, nonatomic) MBPostSingleImageView* singleImageView;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
+(UIEdgeInsets)marginWithType:(int)type activity:(id)activity;
-(void).cxx_destruct;
-(UIEdgeInsets)margin;
-(BOOL)existImage;
-(void)setCellData:(id)data;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface MBShareWriteViewController : MBViewController <UITextViewDelegate, MBPostManagerDelegate> {
	UITextView* mTextView;
	UILabel* mPlaceholderLabel;
	UIView* mToolbar;
	UIButton* mMyhomeGroupButton;
	UIView* mKeyboardView;
	MBMyHomeGroupSelectView* mGroupSelectView;
	UIImageView* mStateMarkImageView;
	MBToastView* mToastView;
	MBIndicatorLayerView* mIndicatorLayer;
	MBPostManager* mPostManager;
	CGRect mKeyboardRect;
	id mDelegate;
	BOOL mIsEditMode;
	BOOL mIsModified;
	BOOL mIsHomeManager;
	BOOL mIsViewDidLoad;
}
-(void).cxx_destruct;
-(void)postManager:(id)manager didFinishUpdatingPostWithPost:(id)post error:(id)error;
-(void)postManager:(id)manager didFinishCreatingPostForShareWithPost:(id)post error:(id)error;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidChange:(id)textView;
-(void)groupModified:(id)modified;
-(void)groupChanged:(id)changed;
-(void)didShowKeyboard:(id)keyboard;
-(void)willChangeKeyboardStatus:(id)status;
-(void)showPostDetailErrorAlert:(id)alert;
-(void)hideToastInAlertView;
-(void)updatePost;
-(void)createPostForShare;
-(void)adjustTextViewContentOffsetForIos7;
-(void)didModified;
-(id)postManager;
-(id)textView;
-(id)userText;
-(id)readPermissionInfo;
-(BOOL)showToolBar;
-(void)setNavigationBarForEdit;
-(void)setNavigationBar;
-(void)setDataForEditMode;
-(void)initViews;
-(void)layoutViews;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initForEditWithData:(id)data originActivity:(id)activity sourceType:(id)type homeManager:(BOOL)manager delegate:(id)delegate;
-(id)initWithData:(id)data sourceType:(id)type delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface MBPostImageView : MBBaseChildCellView <UIScrollViewDelegate, MBPhotoCloseViewControllerDelegate> {
	MBActivity* mActivity;
	MBActivity* mPhotoOwner;
	int mPostViewType;
	int mActivityType;
	MBPhotos* mPhotos;
	MBMovie* mMovie;
	MBSnapMovie* mSnapMovie;
	id mImageUpdateBlock;
	id mImageActionBlock;
	BOOL mMoreContent;
	BOOL mUseFooter;
	BOOL mIsShare;
	BOOL mAllowPostShare;
}
@property(readonly, assign, nonatomic) int activityType;
@property(assign, nonatomic) BOOL isShare;
@property(retain, nonatomic) MBPhotos* photos;
+(id)postImageViewWithType:(int)type;
-(void).cxx_destruct;
-(void)setPostImageWithURLImageButton:(id)urlimageButton WithURL:(id)url;
-(BOOL)isURLEqual:(id)equal withURL2:(id)url2;
-(id)makeImageButton;
-(id)photoOwner;
-(id)snapMovie;
-(id)movie;
-(id)post;
-(void)showAllImageButtonImageView;
-(id)imageWithIndex:(int)index;
-(void)setVisiblePhotoIndex:(int)index;
-(void)setCellData:(id)data;
-(void)setImageButtonBlock;
-(id)initWithFrame:(CGRect)frame type:(int)type;
@end

__attribute__((visibility("hidden")))
@interface MBUnTouchableUIView : UIView {
}
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface LineAlbumManager : NSObject {
	NSString* phase;
	NSString* obsApplicationHeader;
	id<LineAlbumDataSource> dataSource;
	NSString* _obsServerUrl;
	NSString* _obsSSLServerUrl;
}
@property(retain, nonatomic) NSString* obsApplicationHeader;
@property(assign, nonatomic) id<LineAlbumDataSource> dataSource;
@property(copy, nonatomic) NSString* obsSSLServerUrl;
@property(copy, nonatomic) NSString* obsServerUrl;
@property(retain, nonatomic) NSString* phase;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)updateMyProfileImage;
-(void)setBlocked:(BOOL)blocked forUser:(id)user;
-(unsigned)hasNewWithMid:(id)mid;
-(void)setHasNewStatus:(unsigned)status mid:(id)mid;
-(void)setHasNew:(BOOL)aNew mid:(id)mid albumId:(id)anId;
-(id)photoQuality;
-(void)user:(id)user completionBlock:(id)block;
-(id)groupMembers:(id)members;
-(id)currentUser;
-(void)checkNewMarkAPI:(id)api resultBlock:(id)block;
-(BOOL)openAlbumURLScheme:(id)scheme currentViewController:(id)controller;
-(id)schemeParseURI:(id)uri;
-(void)messageImage:(id)image cafeID:(id)anId groupID:(id)anId3 withResultBlock:(id)resultBlock;
-(void)presentPhotoListOfGroup:(id)group albumID:(id)anId photoId:(id)anId3 fromViewController:(id)viewController;
-(void)presentAlbumListOfGroup:(id)group picker:(id)picker mediaInfos:(id)infos fromViewController:(id)viewController;
-(void)presentAlbumListOfGroup:(id)group object:(id)object presentationStyle:(int)style fromViewController:(id)viewController;
-(void)presentAlbumListOfGroup:(id)group type:(int)type presentationStyle:(int)style fromViewController:(id)viewController;
-(void)presentViewController:(id)controller fromViewController:(id)viewController withPresentationStyle:(int)presentationStyle;
-(id)channelAccessToken;
-(void)setupObsApplicationHeader:(id)header;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoViewChatDataSource : LAPhotoViewBaseDataSource {
	BOOL _dataLoaded;
	BOOL _joiningGroup;
	BOOL _shouldPreload;
	id<LAChatPhotoDataSource> _lineChatPhotoDataSource;
	unsigned _centerImageIndex;
}
@property(assign, nonatomic) unsigned centerImageIndex;
@property(assign, nonatomic) BOOL shouldPreload;
@property(assign, nonatomic, getter=isJoiningGroup) BOOL joiningGroup;
@property(retain, nonatomic) id<LAChatPhotoDataSource> lineChatPhotoDataSource;
@property(assign, nonatomic) BOOL dataLoaded;
-(void).cxx_destruct;
-(BOOL)isEndedTranstion;
-(BOOL)isEnableVerticalSwipeTransition;
-(void)selectAllIndexes;
-(void)setSelected:(BOOL)selected atIndex:(int)index;
-(void)makeThumbnailAtIndex:(unsigned)index;
-(float)floatCeil:(float)ceil;
-(CGSize)resizeTo:(CGSize)to source:(CGSize)source;
-(float)thumbnailCompressionQuality;
-(void)cleanup;
-(void)cancelAllOperations;
-(void)preloadNextImage:(unsigned)image;
-(void)cancelDownloading;
-(void)downloadFullImageAtIndex:(int)index progressBlock:(id)block completion:(id)completion;
-(void)downloadImageAtIndex:(int)index;
-(void)preloadImagesAroundIndex:(int)index;
-(void)preloadImagesAfterLoadingImageAtIndex:(int)index;
-(void)imageInfo:(id)info atIndex:(int)index;
-(CGSize)sizeOfThumbnailAtIndex:(int)index;
-(id)thumbnailAtIndex:(int)index;
-(id)fullImageAtIndex:(int)index;
-(id)photoInfoAtIndex:(int)index;
-(void)removeObjectAtIndex:(int)index;
-(id)objectAtIndex:(int)index;
-(unsigned)numberOfObjects;
-(id)title;
-(void)setChatObjectUpdateBlock:(id)block;
-(void)loadChatObjectsWithCompletion:(id)completion;
-(void)checkJoiningGroup;
-(id)initWithChatDataSource:(id)chatDataSource;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineInfoPageControl : UIPageControl {
	NSMutableArray* mImageViews;
}
-(void).cxx_destruct;
-(void)setCurrentPage:(int)page;
-(void)layoutSubviews;
-(void)setNumberOfPages:(int)pages;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallKeypadViewController : NLCallMenuCommonViewController <UITableViewDelegate, UITableViewDataSource, NLCallSearchInfoDelegate, UIActionSheetDelegate> {
	BOOL _isNeedRefreshCallingInfo;
	BOOL _isExistUserSettingCurrency;
	BOOL _isValidPhoneNumber;
	BOOL _isUserRegisterPhoneNumber;
	UIView* _viewInputArea;
	UIView* _viewUserDisplayArea;
	UIView* _viewUserDisplayLongpressArea;
	UILabel* _labelCountryName;
	NLActiveHitButton* _buttonCountry;
	NLCallCopyableLabel* _labelInputNumber;
	UILabel* _labelName;
	UILabel* _labelCurrencyInfo;
	UIView* _viewUserInfoArea;
	UIView* _viewUserTapArea;
	UIView* _viewTopLine;
	NLCallImageView* _imageViewUserInfo;
	UILabel* _lableUserName;
	NMAttributedLabel* _labelUserNumber;
	NLCallMoreButton* _btnMore;
	UIButton* _buttonDelete;
	UIView* _viewCallHistory;
	UITableView* _tableViewCallHistory;
	UIButton* _buttonCancel;
	NLCallKeypadView* _viewKeypad;
	UIView* _viewTopLineKeypad;
	UIButton* _buttonCall;
	NLCallUserInfo* _autoCompleteUserInfo;
	NSString* _startPhoneNumber;
	NSString* _startRegionNumber;
	NSArray* _currentRegionInfo;
	NSDictionary* _keypadDictionary;
	NSTimer* _longPressedTimer;
	NSTimer* _callingTimer;
	NSDictionary* _accountInfoDictionary;
	NSMutableArray* _arraySearchResult;
	NSMutableDictionary* _aictionarySearchForHistoryResult;
	NLCallContractLoader* _contractLoader;
	NSDictionary* _currencyExchangeRate;
	LinePaidCallDialing* _currentCallInfo;
	UIActionSheet* _actionSheet;
	NSString* _userInputPhoneNumber;
	AMPTonePlayer* _tonePlayer;
}
@property(retain, nonatomic) AMPTonePlayer* tonePlayer;
@property(retain, nonatomic) NSString* userInputPhoneNumber;
@property(retain, nonatomic) UIActionSheet* actionSheet;
@property(assign, nonatomic) BOOL isUserRegisterPhoneNumber;
@property(assign, nonatomic) BOOL isValidPhoneNumber;
@property(assign, nonatomic) BOOL isExistUserSettingCurrency;
@property(retain, nonatomic) LinePaidCallDialing* currentCallInfo;
@property(retain, nonatomic) NSDictionary* currencyExchangeRate;
@property(retain, nonatomic) NLCallContractLoader* contractLoader;
@property(retain, nonatomic) NSMutableDictionary* aictionarySearchForHistoryResult;
@property(retain, nonatomic) NSMutableArray* arraySearchResult;
@property(retain, nonatomic) NSDictionary* accountInfoDictionary;
@property(retain, nonatomic) NSTimer* callingTimer;
@property(retain, nonatomic) NSTimer* longPressedTimer;
@property(retain, nonatomic) NSDictionary* keypadDictionary;
@property(assign, nonatomic) BOOL isNeedRefreshCallingInfo;
@property(retain, nonatomic) NSArray* currentRegionInfo;
@property(retain, nonatomic) NSString* startRegionNumber;
@property(retain, nonatomic) NSString* startPhoneNumber;
@property(retain, nonatomic) NLCallUserInfo* autoCompleteUserInfo;
@property(assign, nonatomic) UIButton* buttonCall;
@property(assign, nonatomic) UIView* viewTopLineKeypad;
@property(assign, nonatomic) NLCallKeypadView* viewKeypad;
@property(assign, nonatomic) UIButton* buttonCancel;
@property(assign, nonatomic) UITableView* tableViewCallHistory;
@property(retain, nonatomic) UIView* viewCallHistory;
@property(assign, nonatomic) UIButton* buttonDelete;
@property(assign, nonatomic) NLCallMoreButton* btnMore;
@property(assign, nonatomic) NMAttributedLabel* labelUserNumber;
@property(assign, nonatomic) UILabel* lableUserName;
@property(assign, nonatomic) NLCallImageView* imageViewUserInfo;
@property(assign, nonatomic) UIView* viewTopLine;
@property(assign, nonatomic) UIView* viewUserTapArea;
@property(assign, nonatomic) UIView* viewUserInfoArea;
@property(assign, nonatomic) UILabel* labelCurrencyInfo;
@property(assign, nonatomic) UILabel* labelName;
@property(assign, nonatomic) NLCallCopyableLabel* labelInputNumber;
@property(assign, nonatomic) NLActiveHitButton* buttonCountry;
@property(assign, nonatomic) UILabel* labelCountryName;
@property(assign, nonatomic) UIView* viewUserDisplayLongpressArea;
@property(assign, nonatomic) UIView* viewUserDisplayArea;
@property(assign, nonatomic) UIView* viewInputArea;
-(void).cxx_destruct;
-(id)getFontWithName:(id)name withFontSize:(float)fontSize;
-(void)authenticatedPhoneNumberByUser;
-(void)clearInputAreaByCallingFromOtherViews:(id)otherViews;
-(void)changedCurrencyOrCountryInfo:(id)info;
-(void)enableCalling;
-(void)disableCalling;
-(BOOL)isClearableLongPressInputMode;
-(BOOL)isSelectedValidatedRegionInfo;
-(BOOL)isDirectRegionNumberInputMode;
-(void)settingUserInfoAndCall:(id)call;
-(BOOL)isAvailableUpdateCurrencyInfo;
-(id)lookupPhoneNumber;
-(BOOL)isCallableCondition;
-(id)createProfileImageForCallHistory;
-(id)createNameForCallHistory;
-(void)updateLayoutForScreenSmallerThan4Inchi;
-(void)readyForSearch;
-(void)togglePasteEventViewArea;
-(void)toggleVisibleViewUserInfoArea;
-(BOOL)isPressedNotNumberKeys:(int)keys;
-(void)refreshCurrencyInfo:(id)info withOption:(id)option;
-(void)responseSearchResult:(id)result withOption:(id)option;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)updatePasteAfter:(id)after;
-(void)showCallMenuButton:(id)button;
-(void)layoutTableView;
-(void)showSearchedView;
-(void)updateUserInfoFromAddress:(id)address;
-(void)actionMoreAutoComplete:(id)complete;
-(void)actionDelete:(id)aDelete;
-(void)actionShowCountryList:(id)list;
-(void)actionDimmLocalhistory:(id)localhistory;
-(void)actionKeypadButton:(id)button;
-(void)cancelDeleteTimer;
-(void)actionDeleteTimer;
-(BOOL)isNumeric:(id)numeric;
-(void)deleteFromBackbutton;
-(void)refreshUserCurrencyInfoFromServer;
-(void)refreshUserCurrencyInfo;
-(void)resetCountryDirectInputMode;
-(void)updateInputAreaByInputChangedDirectModeSearchRegionNumber;
-(void)updateInputAreaByInputChangedDirectModeSearch;
-(void)updateInputAreaByInputChangedDirectMode;
-(void)updateInputAreaByInputChanged;
-(void)addInputNumbers:(id)numbers;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)sendSms;
-(void)calling;
-(void)searchCurrencyInfoCompletedPhoneNumber;
-(void)requestSearchPhoneNumbers;
-(void)reqeustRemoteAccountInfo;
-(void)reqeustRemoteCountryInfo;
-(void)resetLoading;
-(void)updateCountryButtonReSize;
-(void)updateRegionInfoOfLabel;
-(void)updateRegionInfos:(id)infos;
-(void)updateLabelUserPhoneName;
-(void)resetAutoComplete;
-(void)updateDeleteButton;
-(BOOL)isNotEqualCurrentUser:(id)user;
-(void)refreshUserInfoAreaSubViews;
-(void)updateViewUserInfoAreaData:(id)data;
-(void)updateViewUserInfoArea;
-(void)tapCountryButton:(id)button;
-(void)refreshUserInfoArea:(id)area;
-(void)tapAutocomplete:(id)autocomplete;
-(void)tapInputNumberArea:(id)area;
-(void)longPressDeleteButton:(id)button;
-(void)longPressZeroButton:(id)button;
-(void)addGestureCountrybutton;
-(void)addGestureAutoComplete;
-(void)addGestureInputNumbers;
-(void)addGestureDeletebutton;
-(void)addGestureZerobutton;
-(void)setCellsBackgroundImageWithCell:(id)cell atIndexPath:(id)indexPath;
-(void)updateLableAccountInfo:(id)info;
-(void)updateByAuthPhoneNumber;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)initContentsRemoteInfo;
-(BOOL)isFisrtLoadWithNumber;
-(void)initContentsLocalInfo;
-(void)initContents;
-(void)initSubviewsHistoryArea;
-(void)initSubviewsAutoComplete;
-(void)initSubviewsDisplayArea;
-(void)initSubviewsKeypadArea;
-(void)initSubviewsLayouts;
-(void)initSubviews;
-(void)refreshView:(id)view;
-(void)initSetting;
-(void)addGestures;
-(void)reloadAutoComplete;
-(void)initViewController;
-(void)dealloc;
-(void)updateCallingInfoByCallButton:(id)button;
-(void)didReceiveMemoryWarning;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBAction : NSObject <MBActionable> {
	NSMutableDictionary* mActions;
}
-(void).cxx_destruct;
-(BOOL)hasActions;
-(void)performActionWithName:(id)name sender:(id)sender userInfo:(id)info;
-(void)setActionWithName:(id)name block:(id)block;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBCellAttributedLabelDelegate : NSObject <NMAttributedLabelDelegate> {
	UIView* mSenderView;
	id mNoLinkActionBlock;
}
@property(copy, nonatomic) id noLinkActionBlock;
-(void).cxx_destruct;
-(void)dealloc;
-(bool)noLinkTapped:(id)tapped;
-(void)attributedLabel:(id)label linkLongTapped:(id)tapped url:(id)url type:(unsigned)type;
-(void)attributedLabel:(id)label linkTapped:(id)tapped url:(id)url type:(unsigned)type;
-(id)initWithSender:(id)sender;
@end

__attribute__((visibility("hidden")))
@interface MBMoviePlayerView : UIView {
	AVPlayerLayer* mAVPlayerLayer;
	AVURLAsset* mMovieAsset;
	UIButton* mPlayControlButton;
	UIButton* mMuteButton;
	UIButton* mPausedButton;
	NSURL* mURL;
	UIView* mAttachedView;
	NSCache* mMoviePlayerViewTimeCache;
	NSCache* mCaptureImageViewCache;
	NSString* mCacheKey;
	CGRect mRect;
	float mVolume;
	int mPlayerState;
	BOOL _runSaveLastPlayState;
	id _captureAfterBlock;
}
@property(assign, nonatomic) BOOL runSaveLastPlayState;
@property(copy, nonatomic) id captureAfterBlock;
@property(readonly, assign, nonatomic) int playerState;
@property(copy, nonatomic) NSString* cacheKey;
@property(copy, nonatomic) NSURL* URL;
@property(readonly, assign, nonatomic) float volume;
@property(readonly, assign, nonatomic) AVPlayerLayer* aVPlayerLayer;
+(BOOL)isSoundOn;
+(id)cacheKeyFromString:(id)string;
+(id)cacheKey:(id)key;
+(id)moviePlayerView;
-(void).cxx_destruct;
-(void)changedHeadphonePlugState:(BOOL)state;
-(void)headphoneUnpluggedNotification:(id)notification;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)aVPlayerItemDidPlayToEndTime:(id)aVPlayerItem;
-(void)removeObserverForPlayer;
-(void)addObserverForPlayer;
-(void)saveImageAtTime:(XXStruct_pwHToB)time;
-(void)saveLastPlayState;
-(void)hideCaptugreImageView:(id)view;
-(void)playAtURL:(id)url;
-(void)infinitePlay;
-(void)checkListMovieAutoPlayNoti:(BOOL)noti notificaton:(id)notificaton;
-(BOOL)checkSameMovieURL:(id)url;
-(id)currentPlayMovieURL;
-(void)resetPlayerView;
-(void)clearPausedTimeForURL:(id)url attachedView:(id)view;
-(void)stopPlayer;
-(void)pausePlayer;
-(void)setMuteButtonByVolume;
-(void)resetMute;
-(void)setMute:(float)mute;
-(void)tappedPlayControlButton;
-(void)playDelay;
-(void)playMovie;
-(void)loadMovieFromAsset;
-(void)attachMovieToView:(id)view frame:(CGRect)frame URL:(id)url;
-(void)layoutPlayControlButton;
-(void)dealloc;
-(void)initCache;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoManager : NSObject {
	int mTotalCount;
	int mCurrentIndex;
	MBPhoto* mCurrentItem;
	NSMutableArray* mOlderItems;
	NSMutableArray* mNewerItems;
	NSString* mMID;
	NSOperationQueue* mOperationQueue;
	id<MBPhotoManagerDelegate> mDelegate;
}
@property(assign, nonatomic) id<MBPhotoManagerDelegate> delegate;
-(void).cxx_destruct;
-(id)newerItems;
-(id)olderItems;
-(id)currentItem;
-(BOOL)selectItem:(id)item;
-(void)selectItemAtIndex:(unsigned)index fromArray:(id)array counterpartArray:(id)array3;
-(int)currentIndex;
-(int)totalCount;
-(void)update;
-(id)initWithPhoto:(id)photo activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineViewControllerActions : NSObject {
	MBTimelineViewController* mController;
}
+(id)actionsWithContoller:(id)contoller;
-(void).cxx_destruct;
-(id)createTouchEndedAction;
-(id)createAddFriendAction;
-(id)createUserProfileAction;
-(id)createShareButtonAction;
-(id)createHideButtonAction;
-(id)createCommonUrlAction;
-(void)commonUrlAction:(id)action userInfo:(id)info;
-(id)createDetailViewContentMovieAction;
-(id)createDetailViewContentImageAction;
-(id)createViewCommentButtonAction;
-(void)commetAction:(id)action userInfo:(id)info;
-(id)createViewLikeButtonAction;
-(void)likeAction:(id)action userInfo:(id)info;
-(id)createDetailViewContentLocationAction;
-(id)createViewUserProfileAction;
-(id)initWithController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface LGAssetGroup : NSObject {
	unsigned _alAssetsGroupType;
	NSString* _name;
	NSString* _persistentID;
	NSURL* _URL;
	int _beforeAssetsCount;
	int _assetsCount;
	UIImage* _posterImage;
	ALAssetsGroup* _originalAssetsGroup;
	int _pickerType;
	NSThread* _executableThread;
}
@property(assign, nonatomic) __weak NSThread* executableThread;
@property(assign, nonatomic) int pickerType;
@property(retain, nonatomic) ALAssetsGroup* originalAssetsGroup;
@property(retain, nonatomic) UIImage* posterImage;
@property(assign, nonatomic) int assetsCount;
@property(assign, nonatomic) int beforeAssetsCount;
@property(retain, nonatomic) NSURL* URL;
@property(retain, nonatomic) NSString* persistentID;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) unsigned alAssetsGroupType;
+(id)lgGroupWithALAsset:(id)alasset pickerConfig:(id)config executableThread:(id)thread;
-(void).cxx_destruct;
-(id)valueForProperty:(id)property;
-(void)setAssetsGroupPropertyValue:(id)value;
-(BOOL)isValid;
-(int)assetsCountForDisplay;
-(void)dealloc;
-(id)initWithExecutableThread:(id)executableThread;
@end

__attribute__((visibility("hidden")))
@interface NLCallTalkServerManager : NSObject {
}
+(BOOL)isNetworkAvailable:(BOOL)available completionBlock:(id)block;
+(BOOL)isNetworkAvailable;
+(void)openSpotProfileViewWithUserMid:(id)userMid withPhoneNumber:(id)phoneNumber withRegionNumber:(id)regionNumber;
+(void)validateUserCredit:(id)credit withCompletionBlock:(id)completionBlock;
+(id)searchOfSearchSpotInfoWithKeyWord:(id)keyWord withOptionGPS:(id)optionGPS withOptionCategory:(int)optionCategory withCompletionBlock:(id)completionBlock;
+(id)arraySpotToUserInfo:(id)userInfo withRegionNumber:(id)regionNumber;
+(id)searchOfSearchSpotInfoWithRegion:(id)region withPhoneNumber:(id)phoneNumber withCompletionBlock:(id)completionBlock;
+(void)listOfCategories:(id)categories;
@end

__attribute__((visibility("hidden")))
@interface MBStickerManager : NSObject {
	BOOL _isPlaySoundForAnimationSticker;
	BOOL _isPlaySoundCommentForAnimationSticker;
	NSString* _lastInsertedActivityID;
	NSString* _lastInsertedActivityCommentID;
}
@property(assign, nonatomic) BOOL isPlaySoundCommentForAnimationSticker;
@property(copy, nonatomic) NSString* lastInsertedActivityCommentID;
@property(assign, nonatomic) BOOL isPlaySoundForAnimationSticker;
@property(copy, nonatomic) NSString* lastInsertedActivityID;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void).cxx_destruct;
-(id)activityCommentID:(id)anId comment:(int)comment;
-(void)clearLastComment;
-(void)clearLastActivity;
-(void)saveLastComment:(id)comment;
-(void)saveLastActivity:(id)activity;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLCallSpotCategoriesCollectionViewCell : PSUICollectionViewCell_ {
	NLCallSpotCategoriesItem* _button;
}
@property(retain, nonatomic) NLCallSpotCategoriesItem* button;
-(void).cxx_destruct;
-(void)addButtonAtIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoViewerActions : NSObject {
	MBPhotoViewerViewController* mController;
}
+(id)actionsWithContoller:(id)contoller;
-(id)createSaveButtonAction;
-(id)createCloseButtonAction;
-(id)commentLikeListAction;
-(id)commentListButtonAction;
-(void)openCommentListWithKeyboard;
-(id)createLikeButtonAction;
-(id)initWithController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface NLTalkMessageEditManager : NSObject {
	unsigned _nonOBSMessageCount;
	unsigned _OBSMessageCount;
	unsigned _editModeCategory;
	NSMutableSet* _talkMessageSet;
	NLSafeUnretainedObject* _weakSelf;
	unsigned _locationMessageCount;
}
@property(readonly, assign, nonatomic) unsigned locationMessageCount;
@property(readonly, assign, nonatomic) unsigned OBSMessageCount;
@property(readonly, assign, nonatomic) unsigned nonOBSMessageCount;
@property(retain, nonatomic) NLSafeUnretainedObject* weakSelf;
@property(retain, nonatomic) NSMutableSet* talkMessageSet;
@property(readonly, assign, nonatomic) unsigned editModeCategory;
@property(readonly, assign, nonatomic) NSSet* talkMessages;
@property(readonly, assign, nonatomic) NSArray* sortedTalkMessages;
@property(readonly, assign, nonatomic) NSArray* sortedSharableObject;
+(id)fileInfoForFileMessage:(id)fileMessage;
+(id)dataInfoForSharableMessage:(id)sharableMessage;
+(id)dataInfoForMediaTypeMessage:(id)mediaTypeMessage;
+(id)obsInfoForMediaTypeMessage:(id)mediaTypeMessage;
+(BOOL)isOBSMessageForContentType:(short)contentType;
-(void).cxx_destruct;
-(void)decreaseMessageCountWithContentType:(short)contentType;
-(void)increseMessageCountWithContentType:(short)contentType;
-(BOOL)findFileWithFileMessage:(id)fileMessage;
-(BOOL)findVoiceMessageFileWithMessage:(id)message;
-(BOOL)findVideoMessageFileWithMessage:(id)message;
-(BOOL)findImageMessageFileWithMessage:(id)message;
-(void)checkExistAssetFileWithMessage:(id)message completionBlock:(id)block;
-(BOOL)hasAssetFilePath:(id)path;
-(void)checkLocalFileWithMessage:(id)message completionBlock:(id)block;
-(void)processSendableMessage:(id)message completionBlock:(id)block;
-(void)confirmSendableMessage:(id)message withCompletionBlock:(id)completionBlock;
-(BOOL)needCheckSendableForMessage:(id)message;
-(id)noExistFileError;
-(void)removeAllMessages;
-(BOOL)containsMessage:(id)message;
-(void)removeMessage:(id)message;
-(void)addMessage:(id)message;
-(int)availableMessageCountForContentType:(short)contentType;
-(void)dealloc;
-(id)initWithCategory:(unsigned)category;
@end

__attribute__((visibility("hidden")))
@interface MBBaseChildCellView : UIView <MBChildCellView> {
	id mPostSetupBlock;
}
@property(copy, nonatomic) id postSetupBlock;
+(float)heightForAttributedString:(id)attributedString size:(CGSize)size;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
+(id)createChildCellViewWithClass:(Class)aClass postViewType:(int)type activity:(id)activity;
-(void).cxx_destruct;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)postSetup;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface MBPostManager : MBDataManager {
	NSString* mPostID;
	MBActivity* mActivity;
	MBActor* mAuthor;
	NSString* mSourceType;
	BOOL mCreatingComment;
	BOOL mIsDidUpdated;
	MBActivity* _originActivity;
}
@property(assign, nonatomic) BOOL isDidUpdated;
@property(readonly, assign, nonatomic) NSString* postID;
@property(readonly, assign, nonatomic) NSString* sourceType;
@property(readonly, assign, nonatomic) MBActor* author;
@property(readonly, assign, nonatomic) MBActivity* originActivity;
@property(readonly, assign, nonatomic) MBActivity* activity;
@property(assign, nonatomic) id<MBPostManagerDelegate> delegate;
-(void).cxx_destruct;
-(void)updatePost:(id)post;
-(void)updatePost:(id)post groupInfo:(id)info;
-(void)updatePostForHomeManager:(id)homeManager userMid:(id)mid;
-(id)updatePostRequest:(id)request groupInfo:(id)info;
-(void)createPostForShare:(id)share groupInfo:(id)info sourceType:(id)type;
-(void)deleteLike:(id)like;
-(void)createLikeWithType:(id)type;
-(void)deleteComment:(id)comment;
-(void)createCommentWithData:(id)data;
-(id)createRequestCommentInfoWithData:(id)data;
-(BOOL)isCreatingComment;
-(void)deletePostWithUserMid:(id)userMid;
-(BOOL)allowEdit;
-(BOOL)allowPostShare;
-(BOOL)isMyPost;
-(id)handleFetch:(id)fetch;
-(id)handleUpdate:(id)update;
-(id)fetchRequestWithFetchCount:(int)fetchCount;
-(id)updateRequest;
-(void)activityDidUpdate:(id)activity;
-(BOOL)canFetch;
-(void)dealloc;
-(id)initWithPostID:(id)postID userMID:(id)mid sourceType:(id)type;
-(id)initWithActivity:(id)activity originActivity:(id)activity2 sourceType:(id)type;
-(id)initWithActivity:(id)activity sourceType:(id)type;
@end

__attribute__((visibility("hidden")))
@interface MBNicknameButton : UIButton {
}
+(id)replyCommentNicknameButton;
+(id)commentNicknameButton;
+(id)postNicknameButton;
@end

__attribute__((visibility("hidden")))
@interface NLConfigService : NSObject {
}
+(void)getConfigurationsWithRevision:(long long)revision completionBlock:(id)block errorBlock:(id)block3;
@end

__attribute__((visibility("hidden")))
@interface MBShareActivityView : MBBaseChildCellView <MBActorObserving, MBPhotoCloseViewControllerDelegate> {
	MBActivity* mActivity;
	MBShareActivity* mShareActivity;
	int mPostViewType;
	UIButton* mLinkButton;
	UIButton* mDownloadButton;
	UIImageView* mTopLine;
	UIView* mBottomLine;
	UIImageView* mDownloadLine;
	MBURLImageView* mThumbnail;
	UIImageView* mThumbnailBg;
	UIImageView* mThumbnailFrame;
	NMAttributedLabel* mTitleLabel;
	NMAttributedLabel* mText1Label;
	NMAttributedLabel* mText2Label;
	MBCellAttributedLabelDelegate* mTitleLabelDelegate;
	MBCellAttributedLabelDelegate* mText1LabelDelegate;
	MBCellAttributedLabelDelegate* mText2LabelDelegate;
	NSObject<MBCellViewLayout>* mShareActivityViewLayout;
	NSMutableAttributedString* mAttributedStringTitle;
	NSMutableAttributedString* mAttributedStringText1;
	NSMutableAttributedString* mAttributedStringText2;
}
@property(readonly, assign, nonatomic) NSMutableAttributedString* attributedStringText2;
@property(readonly, assign, nonatomic) NSMutableAttributedString* attributedStringText1;
@property(readonly, assign, nonatomic) NSMutableAttributedString* attributedStringTitle;
@property(readonly, assign, nonatomic) UIButton* downloadButton;
@property(readonly, assign, nonatomic) UIImageView* downloadLine;
@property(readonly, assign, nonatomic) UIButton* linkButton;
@property(readonly, assign, nonatomic) UIImageView* thumbnailFrame;
@property(readonly, assign, nonatomic) UIImageView* thumbnailBg;
@property(readonly, assign, nonatomic) MBURLImageView* thumbnail;
@property(readonly, assign, nonatomic) UIView* bottomLine;
@property(readonly, assign, nonatomic) UIImageView* topLine;
@property(readonly, assign, nonatomic) NMAttributedLabel* text2Label;
@property(readonly, assign, nonatomic) NMAttributedLabel* text1Label;
@property(readonly, assign, nonatomic) NMAttributedLabel* titleLabel;
@property(readonly, assign, nonatomic) int postViewType;
@property(readonly, assign, nonatomic) MBShareActivity* shareActivity;
@property(readonly, assign, nonatomic) MBActivity* activity;
+(id)getAttributeText:(id)text metaData:(id)data activity:(id)activity;
+(id)attributedTitleStringWithTitle:(id)title titleMega:(id)mega activity:(id)activity;
+(float)heightForAttributedString:(id)attributedString attributes:(id)attributes origin:(CGPoint)origin width:(float)width;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)cropThumbnail:(id)thumbnail;
-(void)addActorObserver:(id)observer metaData:(id)data;
-(void)removeActorObserver;
-(void)downloadButtonAction;
-(void)linkButtonAction;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)resetCellData;
-(void)drawCellData;
-(void)setImages;
-(void)setCellData:(id)data;
-(void)showAllImageButtonImageView;
-(id)imageWithIndex:(int)index;
-(void)setVisiblePhotoIndex:(int)index;
-(void)dealloc;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageOpNetwork : NSObject {
}
+(BOOL)isNetworkError:(id)error;
+(BOOL)isCanceledError:(id)error;
+(id)requestWithURL:(id)url uploadFormData:(BOOL)data;
+(id)operationQueue;
+(Class)opRequestClass;
+(Class)opQueueClass;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupSelectView : UIView <UITableViewDataSource, UITableViewDelegate, NSFetchedResultsControllerDelegate, MBMyHomeGroupFriendsPickerViewControllerDelegate, MBBlockManagerDelegate> {
	UITableView* mTableView;
	UIView* mDimmedView;
	MBIndicatorView* mIndicatorView;
	UIView* mGuideView;
	NSFetchedResultsController* mFetchedResultsController;
	MBMyhomeGroupManager* mGroupManager;
	id mViewController;
	BOOL mIsGroupSelected;
	NSMutableSet* mSelectedGroups;
}
-(void).cxx_destruct;
-(void)myhomeGroupManager:(id)manager didFinishSyncWithError:(id)error;
-(void)didFinishedPickFriends:(id)friends friends:(id)friends2;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)setActionForSettingCell:(id)settingCell;
-(id)settingCellForTableView:(id)tableView;
-(id)cellForTableView:(id)tableView managedObject:(id)object;
-(id)groupCellForTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)markImageForAccessoryView;
-(BOOL)isSelectedObject:(id)object;
-(void)selectedObject:(id)object;
-(id)managedObjectForGroupId:(id)groupId;
-(id)managedObjectAtIndexPath:(id)indexPath;
-(void)dealloc;
-(BOOL)isSubset:(id)subset;
-(BOOL)containsGid:(id)gid;
-(id)groupInfo;
-(void)showGuideView;
-(void)hideLoadingView;
-(void)showLoadingView;
-(void)initViewsWithFrame:(CGRect)frame;
-(id)initForEditWithViewController:(id)viewController readPermissionInfo:(id)info;
-(id)initWithViewController:(id)viewController;
@end

__attribute__((visibility("hidden")))
@interface MBFeedbackButton : UIButton {
	int mType;
	int mCount;
	MBActivity* mActivity;
}
+(id)feedbackButtonWithType:(int)type;
+(id)numberFont;
-(void).cxx_destruct;
-(void)changedLikeActive:(id)active;
-(void)drawCellData;
-(void)drawCellTitleByCount:(int)count withMaxCount:(int)maxCount withPrintCount:(int)printCount;
-(void)setCellData:(id)data;
-(CGSize)preferredSizeThatFits:(CGSize)fits;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame type:(int)type;
@end

__attribute__((visibility("hidden")))
@interface MBMyhome : NSObject <NSCoding> {
	NSURL* mCoverImageURL;
	MBActor* mUser;
	int mHomeType;
	NSString* mProfileDesc;
	NSString* mProfileUrl;
	long mFriendCount;
	BOOL mIsHomeManager;
}
@property(readonly, assign, nonatomic) BOOL isHomeManager;
@property(assign, nonatomic) long friendCount;
@property(readonly, assign, nonatomic) NSString* profileUrl;
@property(readonly, assign, nonatomic) NSString* profileDesc;
@property(readonly, assign, nonatomic) int homeType;
@property(readonly, assign, nonatomic) MBActor* user;
@property(readonly, assign, nonatomic) NSURL* coverImageURL;
+(id)homeTypeStrWithType:(int)type;
+(int)homeTypeWithStr:(id)str;
-(void).cxx_destruct;
-(BOOL)isOfficialHome;
-(void)updateCoverImageWithObjectInfo:(id)objectInfo;
-(id)initWithMID:(id)mid;
-(id)initWithMyhomeInfo:(id)myhomeInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)coverImageURLWithMyhomeInfo:(id)myhomeInfo;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeBlindCell : MBTableViewActionCell {
	UILabel* mMsgLabel;
	UIButton* mDeleteButton;
	MBActivity* _activity;
}
@property(retain, nonatomic) MBActivity* activity;
+(id)listBlindCellForTableView:(id)tableView;
-(void).cxx_destruct;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(float)height;
@end

__attribute__((visibility("hidden")))
@interface MBMessageTitleLabel : UILabel {
}
+(id)label;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallParameters : NSObject {
	NSString* myID_;
	BOOL _isVideoCallHost;
	unsigned _callOrientation;
	NSString* _domain;
	NSString* _host;
	NSString* _port;
	NSString* _friendID;
	NSString* _callToken;
	NSString* _scenarioType;
	NSString* _sourceVoIPZone;
	NSString* _destinationVoIPZone;
	NSString* _serviceDomain;
	NSMutableDictionary* _callOptions;
	NSString* _myName;
	NSString* _friendName;
	UIImage* _myThumbnail;
	UIImage* _friendThumbnail;
	LinePaidCallDialing* _paidCallDialing;
	int _callType;
	int _callingSeq;
	double _timestamp;
}
@property(assign, nonatomic) int callingSeq;
@property(assign, nonatomic) int callType;
@property(retain, nonatomic) LinePaidCallDialing* paidCallDialing;
@property(retain, nonatomic) UIImage* friendThumbnail;
@property(retain, nonatomic) UIImage* myThumbnail;
@property(retain, nonatomic) NSString* friendName;
@property(retain, nonatomic) NSString* myName;
@property(retain, nonatomic) NSMutableDictionary* callOptions;
@property(assign, nonatomic) double timestamp;
@property(retain, nonatomic) NSString* serviceDomain;
@property(retain, nonatomic) NSString* destinationVoIPZone;
@property(retain, nonatomic) NSString* sourceVoIPZone;
@property(retain, nonatomic) NSString* scenarioType;
@property(retain, nonatomic) NSString* callToken;
@property(retain, nonatomic) NSString* friendID;
@property(readonly, assign, nonatomic) NSString* myID;
@property(retain, nonatomic) NSString* port;
@property(retain, nonatomic) NSString* host;
@property(retain, nonatomic) NSString* domain;
@property(assign, nonatomic) BOOL isVideoCallHost;
@property(assign, nonatomic) unsigned callOrientation;
+(id)callParametersWithCallParameters:(id)callParameters;
+(id)setAudioOnlyModeWithDictionary:(id)dictionary;
+(id)setVideoModeWithDictionary:(id)dictionary;
-(void).cxx_destruct;
-(BOOL)isLineCall;
-(BOOL)isVideoMode;
-(void)disableVideoMode;
-(void)enableVideoMode;
-(void)enableFakeMode;
-(BOOL)isReady;
-(void)dealloc;
-(void)resetLineCall;
-(void)resetFreeCall;
-(id)initStandardCallWithMid:(id)mid;
-(id)initWithMid:(id)mid;
@end

__attribute__((visibility("hidden")))
@interface MBComment : MBBaseActivityContent <NSCoding> {
	int mCommentSn;
	int mGroupNo;
	NSString* mSeqNo;
	NSString* mText;
	NSDate* mCreateDate;
	MBActor* mFromUser;
	NSArray* mRecallUserList;
	MBSticker* mSticker;
	BOOL mIsBlind;
	BOOL mIsNew;
	float mRowHeight;
	BOOL _isNew;
}
@property(assign, nonatomic) float rowHeight;
@property(assign, nonatomic) BOOL isNew;
@property(readonly, assign, nonatomic) BOOL isBlind;
@property(readonly, assign, nonatomic) MBSticker* sticker;
@property(readonly, assign, nonatomic) NSArray* recallUserList;
@property(readonly, assign, nonatomic) MBActor* fromUser;
@property(readonly, assign, nonatomic) NSDate* createDate;
@property(readonly, assign, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) NSString* seqNo;
@property(readonly, assign, nonatomic) int groupNo;
@property(readonly, assign, nonatomic) int commentSn;
-(void).cxx_destruct;
-(id)initWithCommentInfo:(id)commentInfo parent:(id)parent;
-(void)initWithCommentInfo:(id)commentInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)setupRecallUserListWithUsers:(id)users;
-(id)recallUserAtIndex:(unsigned)index;
-(void)recallUserRemoveObserver:(id)observer;
-(void)recallUserAddObserver:(id)observer;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoViewerViewController : MBActivityEndViewController <MBURLImageObserving, MBLikeLayerViewDelegate> {
	id postImageView;
	UIWindow* window;
	UIWindow* keyWindow;
	UIView* backgroundView;
	MBPhotoPageScrollView* pagingScrollView;
	MBPhotoRetryView* retryView;
	MBLoadingIndicatorView* loadingIndicator;
	int currentStatusBarStyle;
	int statusOrientation;
	MBActivity* photoOwner;
	NSArray* photos;
	CGRect thumbnailFrame;
	int photoIndex;
	int initPhotoIndex;
	NSMutableDictionary* urlImages;
	CGPoint photoScrollOffset;
	int draggingClose;
	BOOL willDraggingClose;
	BOOL willDismiss;
	BOOL isRotating;
	BOOL navigationBarHiddenByDoubleTap;
	BOOL isPostStatusNormal;
	BOOL statusBarHidden;
	MBPhotoViewerActions* photoViewerActions;
	BOOL _shouldRotate;
	MBActivity* _activity;
	MBPhotoPostDetailContentView* _postDetailContentView;
	MBPhotoCommentViewer* _photoCommentViewer;
	int _statusBarStyle;
}
@property(readonly, assign, nonatomic) MBIndicatorLayerView* indicatorLayer;
@property(assign, nonatomic) BOOL shouldRotate;
@property(readonly, assign, nonatomic) int statusBarStyle;
@property(retain, nonatomic) MBPhotoCommentViewer* photoCommentViewer;
@property(readonly, assign, nonatomic) MBPhotoPostDetailContentView* postDetailContentView;
@property(readonly, assign, nonatomic) MBActivity* activity;
-(void).cxx_destruct;
-(void)attemptRotationToDeviceOrientation;
-(void)statusBarOrientationDidChanged:(id)statusBarOrientation;
-(void)photoViewer:(id)viewer presentModalViewController:(id)controller animated:(BOOL)animated;
-(void)showErrorAlert:(id)alert;
-(void)likeLayerView:(id)view didLikeButtonActionWithLikeType:(id)likeType;
-(void)postManager:(id)manager didFinishCreatingLikeWithError:(id)error;
-(void)activityDidUpdate:(id)activity;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)update;
-(void)registerActions;
-(void)saveImage:(id)image;
-(void)save;
-(void)close;
-(void)closeButtonAction;
-(void)URLImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)imageDidFinishSavingWithError:(id)image;
-(void)imageSavedToPhotosAlbum:(id)photosAlbum didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)photoPageScrollViewClose;
-(id)photoPageScrollView:(id)view imageAtIndex:(int)index;
-(void)photoPageScrollView:(id)view requestImageAtIndex:(int)index;
-(void)photoPageScrollViewDidDoubleTapZoomOut:(id)photoPageScrollView;
-(void)photoPageScrollViewDidDoubleTapZoomIn:(id)photoPageScrollView;
-(void)photoPageScrollViewDidTap:(id)photoPageScrollView;
-(void)photoPageScrollViewDidEndScrolling:(id)photoPageScrollView;
-(void)photoPageScrollViewDidBeginScrolling:(id)photoPageScrollView;
-(void)photoPageScrollView:(id)view willScrollAtIndex:(int)index;
-(BOOL)photoPageScrollViewShouldTile;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)photoImageScrollViewDidEndScrolling:(id)photoImageScrollView;
-(void)photoImageScrollViewDidScroll:(id)photoImageScrollView;
-(id)photoPageScrollView:(id)view photoForPageIndex:(int)pageIndex;
-(void)loadPostStatusWithLoadingIndicator:(BOOL)loadingIndicator;
-(void)hideRetryMessage;
-(void)showRetryMessage;
-(void)hideActivityIndicator;
-(void)showActivityIndicator:(BOOL)indicator;
-(void)hideTargetImageView;
-(void)showDetailContentView;
-(void)hideDetailContentViewWithAnimation:(BOOL)animation;
-(int)preferredStatusBarStyle;
-(void)setStatusBarStyleForiOS7:(int)a7;
-(BOOL)prefersStatusBarHidden;
-(void)setStatusBarForiOS7:(BOOL)a7;
-(void)showNavigationBar;
-(void)hideNavigationBarWithAnimation:(BOOL)animation;
-(void)updateNavigationBar;
-(BOOL)forbiddenSavingPhotoWithIndex:(int)index;
-(void)clearTitle;
-(void)updateTitleWithPageIndex:(int)pageIndex;
-(int)photoIndexForURL:(id)url;
-(CGSize)contentSizeForPagingScrollView;
-(CGRect)frameForPagingScrollView;
-(void)removeURLImageObserver;
-(BOOL)savingPhotoAvailable;
-(void)layoutPostContentView;
-(void)layoutPagingScrollView;
-(void)layout;
-(void)setupPostContentView;
-(void)setupPagingScrollView;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(unsigned)supportedInterfaceOrientations;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(void)didEnterBackground:(id)background;
-(void)didReceiveMemoryWarning;
-(void)viewWillHideWithPhotoViewer:(id)view;
-(void)viewWillShowWithPhotoViewer:(id)view;
-(void)photoViewSetHidden:(id)hidden;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(void)hideInAppBrowser:(id)appBrowser;
-(void)hidePhotoViewController;
-(void)showPhotoViewController;
-(id)initWithPhotoOwner:(id)photoOwner sourceType:(id)type photoIndex:(int)index photoFrame:(CGRect)frame contentView:(id)view;
@end

__attribute__((visibility("hidden")))
@interface MBRecallInfo : NSObject {
	unsigned mStart;
	unsigned mEnd;
	NSString* mActorId;
	MBActor* mActor;
	BOOL mUserValid;
}
@property(readonly, assign, nonatomic) BOOL userValid;
@property(readonly, assign, nonatomic) MBActor* actor;
@property(readonly, assign, nonatomic) NSString* actorId;
@property(readonly, assign, nonatomic) unsigned end;
@property(readonly, assign, nonatomic) unsigned start;
+(id)initWithTextInfoArray:(id)textInfoArray;
-(void).cxx_destruct;
-(id)initWithRecallInfo:(id)recallInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineInfoPageView : UIView {
	CGRect mRect;
	int mIndex;
	float mPageControlYPos;
	UILabel* mTitleLabel;
	UILabel* mSubLabel;
	MBURLImageView* mGuideImageView;
	UIButton* mActionButton;
	UILabel* mActionButtonLabel;
	id mDelegate;
}
@property(assign, nonatomic) float pageControlYPos;
@property(readonly, assign, nonatomic) int index;
-(void).cxx_destruct;
-(void)actionHide;
-(void)actionTimelineMenuGoSetting;
-(void)actionGotoPage;
-(void)gotoAction;
-(id)initWithRect:(CGRect)rect delegateTo:(id)to;
-(void)drawSubviews:(int)subviews;
-(void)setButton:(id)button isGreen:(BOOL)green withFontSize:(float)fontSize withTextColor:(int)textColor withShadowColor:(id)shadowColor;
-(void)setSubLabel:(id)label withFontSize:(float)fontSize withTextColor:(int)textColor withShadowAlpha:(float)shadowAlpha;
-(void)setTitleLabel:(id)label;
-(void)setupSubviews;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeOfficialProfileCell : MBTableViewActionCell {
	UIImageView* mBackgroundImage;
	UILabel* mProfileDescLabel;
	UIImageView* mArrowImage;
}
+(float)officialProfileHeightForTableView:(id)tableView data:(id)data;
+(id)officialProfileCellForTableView:(id)tableView;
-(void).cxx_destruct;
-(void)setData:(id)data;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)initViews;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeCoverCell : MBTableViewActionCell {
	MBCoverView* mCoverView;
}
+(float)height;
+(id)myhomeCoverCellForTableView:(id)tableView;
-(void).cxx_destruct;
-(void)setNotUsedMyhome:(id)myhome postCount:(int)count;
-(void)setMyhome:(id)myhome postCount:(int)count;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineViewController : MBPostViewController <UITableViewDelegate, UITableViewDataSource, MBTableViewPullDelegate, MBActivityListManagerDelegate, NSFetchedResultsControllerDelegate, MBLikeLayerViewDelegate, UIActionSheetDelegate, MBTimelineManagerDelegate> {
	MBTimelineViewControllerActions* mTimelineActions;
	MBTableView* mTableView;
	MBLikeLayerView* mLikeLayer;
	MBTimelineMenuView* mMenuView;
	MBTimelineInfoView* mInfoView;
	NSDictionary* mActionSheetInfo;
	int mHidePathRow;
	BOOL mIsShowMenuView;
	MBTimelineTopSlideView* mTopSlideView;
	UIImageView* mProfileBgImageView;
	UIImageView* mProfileStrokeImageView;
	UIActivityIndicatorView* mNewsUpdateIndicator;
	BOOL _isViewDidLoad;
	BOOL needUpdateForImageQuality;
	MBTimelineManager* _timelineManager;
}
@property(readonly, assign, nonatomic) MBTimelineManager* timelineManager;
@property(readonly, assign, nonatomic) MBLikeLayerView* likeLayer;
@property(readonly, assign, nonatomic) MBTableView* tableView;
+(void)initialize;
-(void).cxx_destruct;
-(void)timelineManager:(id)manager didFinishAddHideWithError:(id)error;
-(void)didTapped:(id)tapped;
-(void)postDidCreate:(id)post;
-(void)postWillCreate:(id)post;
-(void)likeLayerView:(id)view didLikeButtonActionWithLikeType:(id)likeType;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)activityListManager:(id)manager didFinishCreatingLikeOnActivity:(id)activity error:(id)error;
-(void)timelineManager:(id)manager didFisnishUpdateStatusWithData:(id)data error:(id)error;
-(void)dataManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)dataManager:(id)manager didFinishUpdatingWithError:(id)error;
-(void)startFetch:(id)fetch fetchCount:(int)count;
-(void)startUpdate:(id)update;
-(void)scrollToTop;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)timelineCellForRowAtIndexPath:(id)indexPath aTableView:(id)view;
-(void)redrawCell:(id)cell;
-(void)setActionAtCell:(id)cell activity:(id)activity;
-(id)sectionCellForRowAtIndexPath:(id)indexPath;
-(id)cellForRowAtIndexPathForErrorSection:(id)errorSection;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tryPreload;
-(void)tryPreloadWithIndexPath:(id)indexPath;
-(void)actionClickTimelineNewsButton;
-(void)actionTimelineMenuGoInfo;
-(void)postNotificationMyHomeSetting:(id)setting;
-(void)actionMyHomePublicSettingNotification;
-(void)actionTimelineMenuGoSetting;
-(void)actionTimelineMenuGoHome;
-(void)actionClickNavigationBar;
-(id)hideTimelineInfoView;
-(void)showTimelineInfoView:(BOOL)view;
-(void)hideTimelineMenuView;
-(void)showTimelineMenuView;
-(void)openTimelineHidden:(id)hidden;
-(void)hideTimelineHiddenButton:(id)button;
-(void)reLayoutVisibleCells;
-(void)update;
-(void)initializeTimeline;
-(void)hideTimelineHiddenButtonDelay;
-(void)setTimelineNewsButton;
-(void)setHeaderViewDate;
-(void)setTopSlideView;
-(void)setTimelineContentInset;
-(void)showViewsForViewDidLoad;
-(void)initTimelineMenuWithFrame:(CGRect)frame;
-(void)initTopSlideViewWithFrame:(CGRect)frame;
-(void)initTableViewWithFrame:(CGRect)frame;
-(void)setLeftBarEnabled:(BOOL)enabled;
-(void)setNavigationBarRightButton;
-(void)initNavigationBar;
-(void)viewWillDisappearWithPhotoViewer:(id)view;
-(void)viewWillAppearWithPhotoViewer:(id)view;
-(void)willEnterForeground:(id)foreground;
-(void)didEnterBackground:(id)background;
-(void)checkUpdateStatus;
-(void)updateTimelineWhenTimelineTabHighlighted;
-(void)hideTimelineHighlightWhenOpenedInMoreTab;
-(void)setTimelineTabDidSelectedWhenOpenedInMoreTab;
-(void)hideNewButtonDidSelectTimelineTabWhenHighlighted;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)__delayed__updateTimeline;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)updateStatusNewPostIfNeed;
-(void)setFooterViewByCanFecth;
-(void)setupTableviewFooter;
-(void)setupTableviewHeader;
-(void)updateNotificationBadgeCount:(int)count;
-(void)showHideSuccessAlert;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoScrollView : UIScrollView <UIScrollViewDelegate, LAPhotoErrorViewDelegate> {
	int _index;
	NSString* _preloadKey;
	UIImage* _image;
	unsigned _loadStatus;
	UIImageView* _imageView;
	LAPhotoProgressView* _progressView;
	LAPhotoErrorView* _errorView;
	NSTimer* _timer;
	id<LAPhotoViewDataSource> _dataSource;
	LAViewerNoPhotosView* _noPhotosView;
	UIView* _loadingView;
}
@property(retain, nonatomic) UIView* loadingView;
@property(retain, nonatomic) LAViewerNoPhotosView* noPhotosView;
@property(assign, nonatomic) id<LAPhotoViewDataSource> dataSource;
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) LAPhotoErrorView* errorView;
@property(retain, nonatomic) LAPhotoProgressView* progressView;
@property(retain, nonatomic) UIImageView* imageView;
@property(readonly, assign, nonatomic) unsigned loadStatus;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSString* preloadKey;
@property(assign, nonatomic) int index;
-(void).cxx_destruct;
-(void)hidActivityIndicator;
-(void)showActivityIndicator;
-(void)hideNoPhotosView;
-(void)showNoPhotosView;
-(BOOL)checkIfPhotoGroupExists;
-(BOOL)checkIfPhotoObjectExists;
-(id)error;
-(BOOL)isFullImageLoaded;
-(void)resetScrollProperties;
-(void)setLoadStatus:(unsigned)status;
-(void)photoErrorView:(id)view didTapRetryButton:(id)button;
-(void)showErrorView:(id)view;
-(void)setLoadProgress:(unsigned)progress totalLength:(unsigned)length forKey:(id)key instantly:(BOOL)instantly;
-(void)centerImage;
-(void)setMaxMinZoomScalesForCurrentBounds:(unsigned)currentBounds;
-(void)setMaxMinZoomScalesForCurrentBounds;
-(void)zoomInOnPoint:(CGPoint)onPoint;
-(void)zoomOut;
-(CGSize)getCurrentImageSize:(unsigned)size;
-(CGSize)getCurrentImageSize;
-(void)setImage:(id)image isThumbnail:(BOOL)thumbnail;
-(void)displayFullImageOnMainThread:(id)thread error:(id)error forKey:(id)key;
-(void)displayFullImage;
-(void)displayThumbnail;
-(void)updateViewOnTimer:(id)timer;
-(void)updateViewInstantly:(BOOL)instantly;
-(void)updateFrame:(CGRect)frame index:(int)index dataSource:(id)source instantly:(BOOL)instantly;
-(void)prepareDisplay;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)doubleTapAction:(CGPoint)action;
-(void)invalidateImageTimer;
-(void)clearImageView;
-(void)layoutSubviews;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoCloseViewController : MBViewController {
	id mImageView;
	int mPhotoIndex;
	CGRect mStartFrame;
	UIImage* mImage;
	UIImageView* mFirstHalfImageView;
	UIImageView* mSecondHalfImageView;
	int mPhotoCount;
	MBPhotoViewerViewController* mPhotoViewController;
}
-(void).cxx_destruct;
-(void)close;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(void)viewDidUnload;
-(id)resizeImage:(id)image to:(CGSize)to;
-(void)viewDidLoad;
-(id)initWithContentView:(id)contentView parent:(id)parent photoIndex:(int)index photoCount:(int)count startFrame:(CGRect)frame image:(id)image;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumAddPhotosBaseViewController : LABaseViewController <LABottomBarViewDelegate, LAThumbnailsCellDelegate, UITableViewDataSource, UITableViewDelegate> {
	BOOL _shouldSelectAll;
	id<LAAlbumAddPhotosViewDelegate> _delegate;
	NSString* _albumId;
	UITableView* _tableView;
	LABottomBarView* _bottomBarView;
	int _type;
	NSString* _albumTitle;
	LAAlbumTitleInputView* _albumTitleInputView;
	UIActivityIndicatorView* _indicatorView;
	NSRange _uploadRange;
}
@property(assign, nonatomic) BOOL shouldSelectAll;
@property(assign, nonatomic) NSRange uploadRange;
@property(retain, nonatomic) UIActivityIndicatorView* indicatorView;
@property(retain, nonatomic) LAAlbumTitleInputView* albumTitleInputView;
@property(retain, nonatomic) NSString* albumTitle;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) LABottomBarView* bottomBarView;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) NSString* albumId;
@property(assign, nonatomic) id<LAAlbumAddPhotosViewDelegate> delegate;
-(void).cxx_destruct;
-(BOOL)thumbnailCellDidTapCheckButtonAtIndex:(unsigned)thumbnailCell;
-(void)thumbnailCellDidTapThumbnailAtIndex:(unsigned)thumbnailCell;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)completeAction;
-(void)requestOBSUpload:(id)upload packageType:(int)type addableCount:(unsigned)count;
-(void)requestAlbumModify;
-(void)requestAlbumCreate;
-(unsigned)numberOfUploadMedias;
-(id)createUploadMediaModels:(NSRange)models targetAlbumId:(id)anId;
-(void)doneAction;
-(void)bottomBarView:(id)view didTapButtonAtIndex:(unsigned)index;
-(void)setUserInteractionEnabled:(BOOL)enabled;
-(void)didTapCloseButton:(id)button;
-(void)didTapBackButton:(id)button;
-(void)setupNavigationBarWithInterfaceOrientation:(int)interfaceOrientation;
-(void)updateView;
-(BOOL)checkIfInvalidImageExists;
-(void)selectValidPhotos;
-(void)viewWillDisappear:(BOOL)view;
-(void)didFinishSelectingValidPhotos;
-(void)selectValidPhotosInBackground;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithGroupId:(id)groupId albumId:(id)anId originalTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface MBPublicSettingHeaderCell : UITableViewCell {
}
+(float)height;
+(id)descLabel;
+(id)publicSettingHeaderCell:(id)cell;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBStickerListCell : MBTableViewActionCell {
	MBDetailPostFooterView* mFooterView;
}
+(id)stickerListHeightForTableView:(id)tableView data:(id)data postViewType:(int)type;
+(id)stickerListCellForTableView:(id)tableView data:(id)data postViewType:(int)type;
-(void).cxx_destruct;
-(float)height;
-(void)layoutSubviews;
-(id)initWithActivity:(id)activity postViewType:(int)type reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBMyhomeManager : MBActivityListManager {
	NSString* mMID;
	MBMyhome* mMyhome;
	int mPostCount;
	NSString* mSourceType;
}
@property(retain, nonatomic) NSString* sourceType;
@property(readonly, assign, nonatomic) int postCount;
@property(readonly, assign, nonatomic) MBMyhome* myhome;
@property(readonly, assign, nonatomic) NSString* MID;
@property(assign, nonatomic) id<MBMyhomeManagerDelegate> delegate;
+(BOOL)isNeedUpdateWithImageQuality:(int)imageQuality;
+(void)saveMyhomeConfigImageQuality:(int)quality;
+(id)myhomeCacheWithMid:(id)mid;
+(id)myhomeCacheWithPath:(id)path;
-(void).cxx_destruct;
-(void)coverImageDidUpdate:(id)coverImage;
-(void)deleteObjectWithPostID:(id)postID;
-(void)postDidCreate:(id)post;
-(void)activityDidDeleteWithId:(id)activity;
-(void)activityDidDelete:(id)activity;
-(void)activityDidUpdate:(id)activity;
-(void)updateMyHome:(id)home;
-(id)handleFetch:(id)fetch;
-(id)handleUpdate:(id)update;
-(id)fetchRequestWithFetchCount:(int)fetchCount;
-(id)updateRequest;
-(void)setNotificationForHomeManager;
-(BOOL)isOfficialHome;
-(BOOL)isMyMyhome;
-(void)dealloc;
-(id)initWithMID:(id)mid;
-(id)init;
-(void)archiveRootObject:(id)object toFile:(id)file;
-(id)myhomeCachePath;
@end

__attribute__((visibility("hidden")))
@interface MBServiceNameButton : UIButton {
}
+(id)serviceNameFont;
+(id)serviceNameButton;
-(float)boundingHeightWithWidth:(float)width text:(id)text;
-(void)setText:(id)text;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBPostCommentMoreCell : MBTableViewActionCell {
	MBCommentMoreButton* mCommentMoreButton;
}
+(id)postCommentMoreIncludedCellForTable:(id)table;
+(id)postCommentMoreCellForTable:(id)table;
-(void).cxx_destruct;
-(float)height;
-(void)setState:(int)state;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBActivityMock : NSObject {
}
-(id)loadActivities:(id)activities bundleClass:(Class)aClass;
-(void)setUp;
@end

__attribute__((visibility("hidden")))
@interface FetchOpOperation : NSManagedObject {
}
@property(retain, nonatomic) NSString* extra;
@property(retain, nonatomic) NSNumber* error;
@property(retain, nonatomic) NSNumber* failed_count;
@property(retain, nonatomic) NSNumber* status;
@property(retain, nonatomic) NSNumber* insert_time;
@property(retain, nonatomic) NSNumber* msg_totype;
@property(retain, nonatomic) NSString* msg_to;
@property(retain, nonatomic) id msg_location;
@property(retain, nonatomic) NSNumber* msg_has_contents;
@property(retain, nonatomic) NSString* msg_from;
@property(retain, nonatomic) NSNumber* msg_dtime;
@property(retain, nonatomic) NSNumber* msg_ctime;
@property(retain, nonatomic) NSNumber* msg_type;
@property(retain, nonatomic) NSData* msg_preview;
@property(retain, nonatomic) id msg_meta;
@property(retain, nonatomic) NSString* msg_text;
@property(retain, nonatomic) NSString* msg_id;
@property(retain, nonatomic) NSNumber* op_status;
@property(retain, nonatomic) NSString* param3;
@property(retain, nonatomic) NSString* param2;
@property(retain, nonatomic) NSString* param1;
@property(retain, nonatomic) NSNumber* create_time;
@property(retain, nonatomic) NSNumber* from_this;
@property(retain, nonatomic) NSNumber* reqseq;
@property(retain, nonatomic) NSNumber* revision;
@property(retain, nonatomic) NSNumber* op_type;
@property(retain, nonatomic) NSNumber* seq;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineManager : MBActivityListManager {
	NSOperationQueue* mOperationQueue;
	BOOL mTimerEnable;
}
@property(assign, nonatomic) id<MBTimelineManagerDelegate> delegate;
+(int)timelineTabCoolDownInterval;
+(double)timeIntervalTimelineTabHighlightEnable;
+(BOOL)canHighlightTimelineTab;
+(void)saveTimelineTabHighlightRemoveDateToUserDefaults;
+(BOOL)isNeedUpdateWithImageQuality:(int)imageQuality;
+(void)saveTimelineConfigImageQuality:(int)quality;
+(BOOL)timelineStatusNeedUpdateStatusNewPost;
+(void)saveTimelineStatusNeedUpdateStatusNewPost:(BOOL)post;
+(BOOL)timelineStatusNeedUpdateFromUserDefaults;
+(void)saveTimelineStatusNeedUpdateToUserDefaults:(BOOL)userDefaults;
+(int)timelineStatusCallPeriodFromUserDefaults;
+(void)saveTimelineStatusCallPeriodToUserDefaults:(int)userDefaults;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)addHide:(id)hide;
-(void)archive;
-(void)applicationDidEnterBackground:(id)application;
-(void)postDidCreate:(id)post;
-(void)activityDidReplace:(id)activity;
-(void)activityDidDeleteWithId:(id)activity;
-(void)activityDidDelete:(id)activity;
-(void)activityDidUpdate:(id)activity;
-(id)handleFetch:(id)fetch;
-(id)handleUpdate:(id)update;
-(id)fetchRequestWithFetchCount:(int)fetchCount;
-(id)updateRequest;
-(void)updateStatusInfo;
-(void)notifyStatusNewPost:(id)post;
-(BOOL)updateStatusNewPostWhenIsNotExistData:(int)data isNewPostInserted:(BOOL)inserted;
-(void)updateStatusNewPost:(BOOL)post;
-(BOOL)shouldRetryIfNotLoaded;
-(BOOL)canLoad;
-(void)reset;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBPostCommentLoadingCell : UITableViewCell {
}
+(float)height;
+(id)commentLoadingCellTableView:(id)view;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LineMainTabScheme : NSObject {
}
+(BOOL)isMoreSchemeWithURLString:(id)urlstring;
+(BOOL)isAddFriendSchemeWithURLString:(id)urlstring;
+(BOOL)isTimelineSchemeWithURLString:(id)urlstring;
+(BOOL)isChatSchemeWithURLString:(id)urlstring;
+(BOOL)isFriendSchemeWithURLString:(id)urlstring;
+(id)moreSchemeURL;
+(id)moreScheme;
+(id)addFriendSchemeURL;
+(id)addFriendScheme;
+(id)timelineSchemeURL;
+(id)timelineScheme;
+(id)chatSchemeURL;
+(id)chatScheme;
+(id)friendSchemeURL;
+(id)friendScheme;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
@end

__attribute__((visibility("hidden")))
@interface MBPublicSettingCell : MBTableViewActionCell {
	UIButton* mCheckButton;
	MBURLImageView* mProfileImageView;
	UILabel* mNicknameLabel;
	UIView* mUpLine;
	UIView* mDownLine;
	MBFriend* mFriend;
}
@property(retain, nonatomic) MBFriend* friend;
+(float)height;
+(id)publicSettingCellForTableView:(id)tableView;
-(void).cxx_destruct;
-(void)setFriendButton:(BOOL)button;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface MBCoverView : UIView <MBActorObserving> {
	UIImageView* mTopShadow;
	MBURLImageButton* mCoverImageButton;
	UIImageView* mCoverPlaceHolderImageView;
	UIImageView* mBottomImageView;
	MBCoverProfileButton* mProfileImageButton;
	UILabel* mNicknameLabel;
	UIButton* mSettingButton;
	UIImageView* mSettingImageView;
	UILabel* mPostsCountLabel;
	UIImageView* mAccountIcon;
	UIImageView* mFriendIcon;
	UILabel* mFriendCount;
	UIImageView* mLine;
	MBMyhome* mMyhome;
	int mPostCount;
	BOOL mIsMyHome;
}
@property(readonly, assign, nonatomic) UIImageView* coverPlaceHolderImageView;
+(float)height;
+(id)coverView;
-(void).cxx_destruct;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)setMyhome:(id)myhome postCount:(int)count showEmpty:(BOOL)empty;
-(BOOL)setCoverImageWithImage:(id)image button:(id)button delegate:(id)delegate;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLOfficialAccountBannerImageSource : LineImageSource {
}
-(id)initWithBuddyBanner:(id)buddyBanner;
@end

__attribute__((visibility("hidden")))
@interface NLEmoticonStickerResizeInfoCalculator : NSObject {
}
+(void)doCalc;
+(CGRect)getBoundsRect:(id)rect;
@end

__attribute__((visibility("hidden")))
@interface NLScrollViewNextResponder : UIScrollView {
}
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface RegisterAccountPinCodeViewController : NLViewController <UITextFieldDelegate, MFMailComposeViewControllerDelegate, MFMessageComposeViewControllerDelegate> {
	UIScrollView* bgScrollView_;
	BOOL canShowMail_;
	BOOL isShowingDoneAlertView_;
	LineEmailConfirmationSession* session;
	NSString* _email;
}
@property(retain, nonatomic) NSString* email;
@property(retain, nonatomic) LineEmailConfirmationSession* session;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)showEmailRegisteredAlertIfNeeded;
-(void)moveViewOffset:(float)offset;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)textChanged:(id)changed;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)sendMail;
-(void)setPincode:(id)pincode withVerifier:(id)verifier;
-(void)resend;
-(void)close;
-(void)closeWithAlert;
-(void)confirm;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)layoutSubviews;
-(void)removeObserver;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)popViewControllerAnimated;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LAToolTipView : UIControl {
	UIImageView* _leftImage;
	UIImageView* _centerImage;
	UIImageView* _rightImage;
	UILabel* _label;
	UIButton* _button;
	id<LATooltipViewDelegate> _delegate;
}
@property(assign, nonatomic) id<LATooltipViewDelegate> delegate;
-(void).cxx_destruct;
-(void)setHiddenIfAvailable:(BOOL)available;
-(void)remove:(id)remove;
-(void)didTapView:(id)view;
-(void)didTapButton:(id)button;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame text:(id)text delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface MBDetailPostFooterView : MBBaseChildCellView {
	MBActivity* mActivity;
	MBPostFeedbackView* mPostFeedbackView;
	MBStickerProfileListView* mStickerProfileListView;
	UIView* mBackgroundView;
	UIView* mTopLine;
	UIView* mBottom1Line;
	UIView* mBottom2Line;
	UIButton* mStickerMoreButton;
	UILabel* mStickerCountLabel;
}
-(void).cxx_destruct;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(id)activity;
-(id)createStickerMoreButton;
-(id)createStickerCountLabel;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface MBFileUtilities : NSObject {
}
+(BOOL)setExcludedFromBackup:(BOOL)backup ofItemsInDirectoryAtURL:(id)url error:(id*)error;
+(BOOL)setExcludedFromBackup:(BOOL)backup ofItemsInDirectoryAtPath:(id)path error:(id*)error;
+(BOOL)setExcludedFromBackup:(BOOL)backup ofItemAtURL:(id)url error:(id*)error;
+(BOOL)setExcludedFromBackup:(BOOL)backup ofItemAtPath:(id)path error:(id*)error;
@end

__attribute__((visibility("hidden")))
@interface MBURLImageOperation : MBURLConnectionOperation {
	MBURLImage* mURLImage;
	BOOL mInvalid;
}
@property(assign, nonatomic) MBURLImage* URLImage;
-(void)transferToURLImageFromFile:(id)file;
-(void)transferToURLImage;
-(void)didFinishLoading;
-(void)didFail;
-(void)didReceiveResponse;
-(void)willStart;
@end

__attribute__((visibility("hidden")))
@interface MBURLImage : NSObject {
	MBURLImageOperation* mOperation;
	NSURL* mURL;
	NSString* mScope;
	UIImage* mImage;
	NSError* mError;
	NSMutableSet* mObservers;
	id mCompletionBlock;
	BOOL mKeepConnection;
	BOOL mResumeEnabled;
	BOOL mIsShouldReload;
	int mImageSrcType;
	int mRetryCount;
	int mRetryIndex;
}
@property(assign, nonatomic) int imageSrcType;
@property(assign, nonatomic) BOOL isShouldReload;
@property(assign, nonatomic) BOOL resumeEnabled;
@property(readonly, assign, nonatomic) NSString* path;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) UIImage* image;
@property(readonly, assign, nonatomic) NSString* scope;
@property(readonly, assign, nonatomic) NSURL* URL;
+(void)resetShouldReloadForProfileImages;
+(id)imageInfoForURL:(id)url;
+(id)cachedUIImageForURL:(id)url;
+(void)setTimeoutInterval:(double)interval;
+(void)setRetryInterval:(double)interval;
+(id)imageWithURLPreLoadCacheOnMainThread:(id)urlpreLoadCacheOnMainThread scope:(id)scope retry:(int)retry resume:(BOOL)resume completion:(id)completion;
+(id)imageWithURL:(id)url scope:(id)scope retry:(int)retry resume:(BOOL)resume completion:(id)completion;
+(id)imageWithURL:(id)url scope:(id)scope retry:(int)retry completion:(id)completion;
+(id)imageWithURL:(id)url postprocessor:(SEL)postprocessor;
+(id)imageWithURL:(id)url;
+(void)initialize;
+(void)timerFired:(id)fired;
+(void)scheduleTimer;
-(void).cxx_destruct;
-(void)clearURLImageScope;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)retryIfNotLoaded;
-(void)reload;
-(void)keepConnection;
-(id)description;
-(void)dealloc;
-(id)init;
-(id)imageForURL:(id)url scope:(id)scope;
-(void)setData:(id)data forURL:(id)url scope:(id)scope;
-(void)deleteResumeDownloadedTmpFileWithUrl:(id)url scope:(id)scope;
-(id)pathForURL:(id)url scope:(id)scope;
-(id)cacheScopeWithScope:(id)scope;
-(void)callbackObservers;
-(void)unregisterTimerHandler;
-(void)registerTimerHandler;
-(void)setURLPreLoadCacheOnMainThread:(id)thread;
-(void)setURL:(id)url;
-(void)setRetryCount:(int)count;
-(void)setScope:(id)scope;
-(void)setCompletionBlock:(id)block;
-(void)loadFromURLConnection;
-(void)timerFired:(id)fired;
-(void)didFinishLoadingData:(id)data error:(id)error;
-(BOOL)shouldCache;
-(BOOL)shouldReload;
@end

__attribute__((visibility("hidden")))
@interface NLThemeShopDownloadViewController : NLViewController <NLThemeShopDownloadViewDelegate, NLThemePackageManagerDelegate> {
	BOOL _hasCompleted;
	BOOL _isGoingToOpenAccountRegistrationView;
	BOOL _isSelectedApplyButton;
	int _showingType;
	NLSafeUnretainedObject* _uSelf;
	LineShopProductDetail* _product;
	NLThemePackage* _package;
	NLThemeShopDownloadView* _downloadView;
	NSMutableArray* _alertViews;
}
@property(assign, nonatomic) BOOL isSelectedApplyButton;
@property(assign, nonatomic) BOOL isGoingToOpenAccountRegistrationView;
@property(assign, nonatomic) BOOL hasCompleted;
@property(retain, nonatomic) NSMutableArray* alertViews;
@property(retain, nonatomic) NLThemeShopDownloadView* downloadView;
@property(retain, nonatomic) NLThemePackage* package;
@property(retain, nonatomic) LineShopProductDetail* product;
@property(retain, nonatomic) NLSafeUnretainedObject* uSelf;
@property(assign, nonatomic) int showingType;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)notifyAppliedEventWithPackage:(id)package;
-(void)themePackageEndInstall:(id)install;
-(void)themePackageStartInatall:(id)inatall;
-(void)themePackageDownloadCancel:(id)cancel;
-(void)themePackageDownloadFailed:(id)failed;
-(void)themePackageDownloadEnded:(id)ended;
-(void)themePackageDownloadStarted:(id)started;
-(void)themePackage:(id)package downloaded:(float)downloaded;
-(void)dismissModalViewControllerIfSelectedApplyButton:(id)button;
-(void)showRegistorAccountViewController;
-(void)downloadView:(id)view didSelectedButtonType:(int)type;
-(void)downloadViewShowRegisterAlertView;
-(id)downloadViewProduct;
-(void)onClosePressed:(id)pressed;
-(void)initDownloadView;
-(void)downloadImageWithURL:(id)url completionBlock:(id)block;
-(void)requestDownloadIcon;
-(id)downloadingLabelString;
-(id)successTitleString;
-(id)titleString;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithProduct:(id)product;
@end

__attribute__((visibility("hidden")))
@interface MBUserPostHeaderView : MBBaseChildCellView <MBActorObserving> {
	MBActivity* mActivity;
	int mPostViewType;
	MBProfileImageView* mProfileImageView;
	MBNicknameButton* mNicknameButton;
	MBTimeLabel* mTimeLabel;
	MBServiceNameButton* mServiceNameButton;
	UIButton* mReadPermissionButton;
}
@property(readonly, assign, nonatomic) MBActivity* activity;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(void)dealloc;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface FriendsPickerViewController : NLViewController <NSFetchedResultsControllerDelegate, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate> {
	BOOL _filtering;
	BOOL _multipleSelectionEnabled;
	id<FriendsPickerViewControllerDelegate> _delegate;
	unsigned _tag;
	NSString* _titleForDoneButton;
	int _midType;
	NLSearchBar* _searchField;
	UITableView* _tableView;
	NSFetchedResultsController* _usersFetchedResultsController;
	NSMutableSet* _checkedFriends;
	NSMutableArray* _filteredListContent;
	NSMutableSet* _maskedFriends;
	UILabel* _emptinessDescriptionLabel;
}
@property(retain, nonatomic) UILabel* emptinessDescriptionLabel;
@property(assign, nonatomic) BOOL multipleSelectionEnabled;
@property(assign, nonatomic) BOOL filtering;
@property(retain, nonatomic) NSMutableSet* maskedFriends;
@property(retain, nonatomic) NSMutableArray* filteredListContent;
@property(retain, nonatomic) NSMutableSet* checkedFriends;
@property(retain, nonatomic) NSFetchedResultsController* usersFetchedResultsController;
@property(assign, nonatomic) UITableView* tableView;
@property(assign, nonatomic) NLSearchBar* searchField;
@property(assign, nonatomic) int midType;
@property(retain, nonatomic) NSString* titleForDoneButton;
@property(assign, nonatomic) unsigned tag;
@property(assign, nonatomic) id<FriendsPickerViewControllerDelegate> delegate;
+(void)showAlertMaxGroupRoomInviteeCount:(int)count isGroup:(BOOL)group;
-(void).cxx_destruct;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)updateSelectionWithItem:(id)item;
-(BOOL)isSelectedItem:(id)item;
-(id)cellForTableView:(id)tableView managedObject:(id)object;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveKeyboardWillHideNotification:(id)didReceiveKeyboard;
-(void)didReceiveKeyboardDidShowNotification:(id)didReceiveKeyboard;
-(void)showNoFriendsMessageIfNeededWithAnimated:(BOOL)animated;
-(BOOL)isEmpty;
-(void)updateButtonLabel;
-(void)filterContentForSearchText:(id)searchText scope:(id)scope;
-(id)managedObjectAtIndexPath:(id)indexPath;
-(void)done:(id)done;
-(void)cancel:(id)cancel;
-(void)configureNavigationItem;
-(void)dismissNoFriendsMessageWithAnimated:(BOOL)animated;
-(BOOL)isBlockingUser:(id)user;
-(id)userForKey:(id)key;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLDownloadAllStickersInfoView : UIView {
	float _viewHeight;
	UIImageView* _backgroundImageView;
	UIButton* _moveToDownloadViewButton;
	UILabel* _mainLabel;
	UILabel* _subLabel;
}
@property(retain, nonatomic) UILabel* subLabel;
@property(retain, nonatomic) UILabel* mainLabel;
@property(retain, nonatomic) UIButton* moveToDownloadViewButton;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(assign, nonatomic) float viewHeight;
-(void).cxx_destruct;
-(void)showMySticker;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineStickerDataSourceManager : NSObject <LineStickerDataSource, LineKeyboardDelegate> {
	id<LineStickerEventDelegate> _delegate;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedDataSource;
-(void)lineKeyboard:(id)keyboard stickerTapped:(int)tapped;
-(void)lineKeyboardDidDeleteBackwards:(id)lineKeyboard;
-(void)lineKeyboardWillDeleteBackwards:(id)lineKeyboard;
-(id)_dictionaryForStickerID:(int)stickerID;
-(id)_packageWithDictionary:(id)dictionary stickerTuple:(XXStruct_PILIWD*)tuple;
-(id)_packageWithDictionary:(id)dictionary;
-(void)stickerTapped:(id)tapped viewController:(id)controller;
-(id)lineStickerKeyboardInputViewDelegate:(id)delegate backgroundImage:(id)image;
-(id)lineStickerKeyboardInputViewDelegate:(id)delegate topBorder:(id)border;
-(BOOL)isStickerPackagePurchased:(id)purchased;
-(CGSize)sizeForKeyboardSticker:(id)keyboardSticker;
-(CGSize)sizeForRegularSticker:(id)regularSticker;
-(float)heightForKeyboardSticker:(id)keyboardSticker;
-(float)heightForRegularSticker:(id)regularSticker;
-(void)downloadImageOfType:(unsigned)type forSticker:(id)sticker completionBlock:(id)block;
-(void)downloadImageForKeyboardSticker:(id)keyboardSticker completionBlock:(id)block;
-(void)downloadImageForRegularSticker:(id)regularSticker completionBlock:(id)block;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomePublicNotiLayer : UIView {
	UIImageView* mMainView;
	UIImageView* mTitleView;
	UILabel* mSubTitleLabel;
	UILabel* mDescLabel;
	UIImageView* mMainImageView;
	UIButton* mCloseButton;
	UIButton* mSettingMoveButton;
	MBMyHomeViewController* mMyHomeViewController;
}
@property(retain, nonatomic) MBMyHomeViewController* myHomeViewController;
+(id)myHomePublicNotiLayerWithViewController:(id)viewController;
+(BOOL)didMyHomePublicInfoConfirmFromUserDefaults;
+(void)deleteMyHomePublicInfoConfirmFromUserDefaults;
+(void)saveMyHomePublicInfoConfirmFromUserDefaults;
-(void).cxx_destruct;
-(void)show;
-(void)hide;
-(id)initWithFrame:(CGRect)frame;
-(void)setupSubviews;
@end

__attribute__((visibility("hidden")))
@interface LineServiceManager : NSObject {
}
+(unsigned)currentSessionStatus;
+(void)unregisterSessionStatusNotifierCallbackBlock:(id)block;
+(void)registerSessionStatusNotifierCallbackBlock:(id)block;
+(void)setResendTimeLimit:(double)limit;
+(void)updateAutoResendTimeLimit:(BOOL)limit;
+(void)resumeTurboMode;
+(void)suspendTurboMode;
+(void)setAttachTurboMode:(BOOL)mode;
+(void)setTurboMode:(BOOL)mode;
+(void)setTurboModeForTyping:(BOOL)typing withToMid:(id)mid;
+(id)userAgenForDownload;
+(id)userAgent;
+(id)applicationInfo;
+(void)disconnect;
+(void)shutDown;
+(void)endTransaction;
+(void)startTransaction;
+(void)performInTransaction:(id)transaction;
+(id)sendRequest:(id)request withService:(unsigned)service options:(unsigned)options response:(id)response queue:(dispatch_queue_s*)queue;
+(void)cancelRequest:(id)request;
+(void)resendRequest:(id)request queue:(dispatch_queue_s*)queue;
+(void)sendRequest:(id)request;
+(id)requestPushHandler:(id)handler sleepResponseRequestBlock:(id)block flushResponseRequestBlock:(id)block3 fetch_processOperationsBlock:(id)block4;
+(id)requestForURLRequest:(id)urlrequest destination:(unsigned)destination options:(unsigned)options response:(id)response queue:(dispatch_queue_s*)queue;
+(id)_requestWithData:(id)data onService:(unsigned)service options:(unsigned)options response:(id)response responseDataBlock:(id)block queue:(dispatch_queue_s*)queue;
+(id)requestWithData:(id)data onService:(unsigned)service options:(unsigned)options response:(id)response queue:(dispatch_queue_s*)queue;
+(id)requestTyping:(id)typing;
+(id)request:(id)request onService:(unsigned)service options:(unsigned)options response:(id)response queue:(dispatch_queue_s*)queue;
+(void)setupActionBlocks;
+(void)setupTalkProtocol:(id)protocol;
+(void)setUpConnectionInfo:(id)info;
+(void)setUpHeaderField;
+(void)updateAccessToken;
+(void)setUpUpdateAccessToken;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface NLChatListCell : UITableViewCell {
	ProfileImageView* profileImageView;
	UIImageView* profileImageBorderView;
	UILabel* nameLabel;
	UIButton* memberCountButton;
	UIImageView* muteImageView;
	UIImageView* onAirImageView;
	UILabel* timeLabel;
	NMAttributedLabel* lastMessageLabel;
	UIButton* unreadCountButton;
	UIImageView* _errorImageView;
}
@property(assign, nonatomic) UIButton* unreadCountButton;
@property(assign, nonatomic) NMAttributedLabel* lastMessageLabel;
@property(assign, nonatomic) UILabel* timeLabel;
@property(assign, nonatomic) UIImageView* errorImageView;
@property(assign, nonatomic) UIImageView* onAirImageView;
@property(assign, nonatomic) UIImageView* muteImageView;
@property(assign, nonatomic) UIButton* memberCountButton;
@property(assign, nonatomic) UILabel* nameLabel;
@property(assign, nonatomic) UIImageView* profileImageBorderView;
@property(assign, nonatomic) ProfileImageView* profileImageView;
+(int)numberOfLinesWithAttributedString:(id)attributedString constrainedTo:(CGSize)to;
+(CGSize)suggestFrameSizeWithAttributedString:(id)attributedString constrainedTo:(CGSize)to;
+(id)attributedStringWithLastMessage:(id)lastMessage textColor:(id)color;
+(float)defaultHeight;
-(BOOL)render;
-(void)showLastMessage:(id)message;
-(void)configureUnreadCountButton:(id)button;
-(void)configureLastMessageLabel:(id)label;
-(void)configureTimeLabel:(id)label;
-(void)configureMuteImageView:(id)view;
-(void)configureOnAirImageView:(id)view;
-(void)configureMemberCountButton:(id)button;
-(void)configureNameLabel:(id)label;
-(void)configureProfileImageView:(id)view;
-(void)configureCellOnAwakeFromNib;
-(void)configureCellOnInit;
-(void)willTransitionToState:(unsigned)state;
-(void)layoutLastMessageLabel:(id)label;
-(void)layoutUnreadCountButton:(id)button;
-(void)layoutTimeLabel:(id)label;
-(void)layoutOnAirImageView:(id)view;
-(void)layoutMuteImageView:(id)view;
-(void)layoutMembersCountButton:(id)button;
-(void)layoutNameLabel:(id)label;
-(void)layoutSubviews;
-(id)lastMessageTextColor;
-(id)leftViewOfView:(id)view;
-(id)viewDisplayOrders;
-(void)awakeFromNib;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLCallWebViewController : NLCallSettingCommonSubViewController <UIWebViewDelegate, UIActionSheetDelegate> {
	UIWebView* webView;
	NSString* url;
	NSString* _titleString;
}
@property(retain, nonatomic) NSString* titleString;
@property(retain, nonatomic) UIWebView* webView;
@property(retain, nonatomic) NSString* url;
-(void).cxx_destruct;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)onClosePressed:(id)pressed;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLUserLocaleUpdater : NSObject {
}
+(void)updateSettingsIfChanged;
+(void)updateSettings;
+(id)currentLocaleString;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface NLThemeViewComponent : NSObject {
}
+(void)decorateDownloadFooterLabel:(id)label;
+(void)decorateDownloadApplyNowButton:(id)button;
+(void)decorateDownloadReadyToDownloadLabel:(id)downloadLabel;
+(void)decorateDownloadDownloadingLabel:(id)label;
+(void)decorateDownloadStopButton:(id)button;
+(void)decorateDownloadThumbnailImageView:(id)view;
+(void)decorateDownloadExpiredDateLabel:(id)label;
+(void)decorateDownloadNameLabel:(id)label;
+(void)decorateThemeShopButtonApplyingStyle:(id)style;
+(void)decorateThemeShopButtonApplyStyle:(id)style;
+(void)decorateThemeShopButtonUpdateStyle:(id)style;
+(void)decorateThemeShopButtonPurchaseStyle:(id)style;
+(void)decorateThemeShopButtonPresentStyle:(id)style;
+(void)decorateDetailCopyRightLabel:(id)label;
+(void)decorateDetailPreviewImageView:(id)view;
+(void)decorateDetailDescriptionLabel:(id)label;
+(void)decorateDetailSeparatorView:(id)view;
+(void)decorateDetailPresentLabel:(id)label;
+(void)decorateDetailPriceLabel:(id)label;
+(void)decorateDetailValidDaysLabel:(id)label;
+(void)decorateDetailNameLabel:(id)label;
+(void)decorateDetailAuthLabel:(id)label;
@end

__attribute__((visibility("hidden")))
@interface NLSticonImageLayer : CALayer <SticonImageComponentDelegate> {
	BOOL _needToRemoveSelfFromDelegateArray;
	unsigned _PKG_CODE;
	unsigned _CODE;
}
@property(readonly, assign, nonatomic) unsigned CODE;
@property(readonly, assign, nonatomic) unsigned PKG_CODE;
+(id)layerWithFrame:(CGRect)frame PKG_CODE:(unsigned)code CODE:(unsigned)code3;
-(void)dealloc;
-(void)sticonDrawImage:(id)image PKG_CODE:(unsigned)code CODE:(unsigned)code3;
-(unsigned)sticonCODE;
-(unsigned)sticonPKG_CODE;
@end

__attribute__((visibility("hidden")))
@interface CoreDataMigrationViewController : NLViewController {
	UILabel* messageLabel_;
	UIActivityIndicatorView* indicator_;
}
-(void).cxx_destruct;
-(void)startMigration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface NLStyledTextView : UIView {
	BOOL _highlighted;
	BOOL shouldNotVerticalAlign;
	NSAttributedString* _attString;
	UIColor* textShadowColor;
	UIColor* highlightedTextColor;
	UIColor* initialTextColor;
	int maximumNumberOfLines;
	CGSize textShadowOffset;
}
@property(retain, nonatomic) UIColor* initialTextColor;
@property(assign, nonatomic) int maximumNumberOfLines;
@property(assign, nonatomic) BOOL shouldNotVerticalAlign;
@property(retain, nonatomic) UIColor* highlightedTextColor;
@property(assign, nonatomic) BOOL highlighted;
@property(assign, nonatomic) CGSize textShadowOffset;
@property(retain, nonatomic) UIColor* textShadowColor;
@property(retain, nonatomic) NSAttributedString* attString;
+(int)numberOfLinesWithAttributedString:(id)attributedString constrainedTo:(CGSize)to;
+(CGSize)suggestFrameSizeWithAttributedString:(id)attributedString maximumNumberOfLines:(int)lines constrainedTo:(CGSize)to;
+(CGSize)suggestFrameSizeWithAttributedString:(id)attributedString constrainedTo:(CGSize)to;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLStyledTextMarkupParser : NSObject {
	BOOL isBold;
	UIColor* currentTextColor;
	NLStyledTextMarkupParserOptions* _options;
}
@property(retain, nonatomic) NLStyledTextMarkupParserOptions* options;
@property(retain, nonatomic) UIColor* currentTextColor;
@property(assign, nonatomic) BOOL isBold;
-(void).cxx_destruct;
-(id)attrStringFromMarkup:(id)markup;
-(id)initWithOptions:(id)options;
@end

__attribute__((visibility("hidden")))
@interface NoStatusBarImagePickerController : NLImagePickerController {
}
-(id)childViewControllerForStatusBarHidden;
-(BOOL)prefersStatusBarHidden;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoNavigationView : UIView {
	unsigned _leftButtonType;
	unsigned _rightButtonType;
	UIButton* _leftButton;
	UIButton* _rightButton;
	id<LAPhotoNavigationViewDelegate> _delegate;
	UILabel* _titleLabel;
	UILabel* _indexLabel;
}
@property(retain, nonatomic) UILabel* indexLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(assign, nonatomic) id<LAPhotoNavigationViewDelegate> delegate;
@property(retain, nonatomic) UIButton* rightButton;
@property(retain, nonatomic) UIButton* leftButton;
-(void).cxx_destruct;
-(void)didTapCheckButton:(id)button;
-(void)didTapBackButton:(id)button;
-(void)didTapCloseButton:(id)button;
-(void)layoutSubviews;
-(void)setRightButtonType:(unsigned)type;
-(void)setLeftButtonType:(unsigned)type;
-(void)resetIndex;
-(void)setSelected:(BOOL)selected;
-(void)updateIndex:(int)index total:(unsigned)total;
-(void)updateTitle:(id)title;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface MigrationCodeViewController : NLViewController <NLPasswordInputViewDelegate, UIGestureRecognizerDelegate> {
	id<MigrationCodeViewControllerDelegate> _delegate;
	NLPasswordInputView* _passwordInputView;
}
@property(retain, nonatomic) NLPasswordInputView* passwordInputView;
@property(assign, nonatomic) id<MigrationCodeViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)didTapView:(id)view;
-(void)openHelp:(id)help;
-(void)passwordInputView:(id)view didFinishInputPassword:(id)password;
-(id)passwordInputViewMinimumPasswordLengthErrorMessage:(id)message;
-(void)_configurePasswordInputView;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface NLSimCardInfoManager : NSObject {
}
+(void)setChangedSimCard:(BOOL)card;
+(BOOL)isChangedSimCard;
+(void)setHideCallerIDMode:(BOOL)mode;
+(BOOL)isHideCallerIDMode;
+(BOOL)hasSimCardInfo;
+(void)postSimCardChangedNotification;
+(void)updateSimCardInfo;
+(id)CoreTelephonyCarrier;
+(id)defaultSimInfo;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface ImageMapRootObject : NSObject {
	NSDictionary* images_;
	NSDictionary* scenes_;
	NSDictionary* actions_;
	ImageMapCanvasObject* _canvas;
}
@property(readonly, retain, nonatomic) ImageMapCanvasObject* canvas;
-(void).cxx_destruct;
-(id)description;
-(BOOL)isAvailable;
-(void)linkObjects;
-(void)parseData:(id)data;
-(CGRect)parseRectFromArray:(id)array;
-(CGRect)parseRectFromDictionary:(id)dictionary;
-(id)actionObjectForName:(id)name;
-(id)sceneObjectForName:(id)name;
-(id)imageObjectForName:(id)name;
-(id)initWithJsonData:(id)jsonData;
@end

__attribute__((visibility("hidden")))
@interface NLBuddyOnAirDataPoller : NSObject {
	NSString* _mid;
	id _resultBlock;
	NSTimer* _timer;
}
@property(retain, nonatomic) NSTimer* timer;
@property(readonly, assign, nonatomic) BOOL isPolling;
@property(copy, nonatomic) id resultBlock;
@property(copy, nonatomic) NSString* mid;
+(id)onAirDataPollerWithMid:(id)mid;
-(void).cxx_destruct;
-(void)resetTimer;
-(void)requestOnAirData;
-(void)startOnAirDataPoller:(double)poller;
-(void)dealloc;
-(void)stopPoll;
-(void)startPoll:(id)poll;
@end

__attribute__((visibility("hidden")))
@interface LGNavigationBar : UINavigationBar {
	NSString* _bundleName;
	UIImageView* _backgroundImageView;
	NSMutableDictionary* _backgroundImages;
}
@property(retain, nonatomic) NSMutableDictionary* backgroundImages;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(retain, nonatomic) NSString* bundleName;
-(void).cxx_destruct;
-(id)defaultThemelandscapeImage;
-(id)defautThemeImage;
-(void)layoutSubviews;
-(void)drawRect:(CGRect)rect;
-(void)updateBackgroundImage;
-(void)setBackgroundImage:(id)image forBarMetrics:(int)barMetrics;
-(id)initWithBundleName:(id)bundleName;
@end

__attribute__((visibility("hidden")))
@interface NLActiveHitButton : UIButton {
	float extraHitMarginValue;
}
@property(assign, nonatomic) float extraHitMarginValue;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineNavigationController : NLAppearanceCustomizedNavigationController <UINavigationControllerDelegate> {
	id<UINavigationControllerDelegate> originalDelegate_;
	NSString* closeButtonTitle_;
	BOOL shouldShowCloseButtonOnRightSide_;
	BOOL shouldHideRightButtonWhenNonTopStack_;
	BOOL dismissActionAnimated_;
	id dismissedBlock_;
}
@property(copy, nonatomic) id dismissedBlock;
@property(assign, nonatomic) BOOL dismissActionAnimated;
@property(assign, nonatomic) BOOL shouldHideRightButtonWhenNonTopStack;
@property(assign, nonatomic) BOOL shouldShowCloseButtonOnRightSide;
+(id)doseNotAppliedThemeViewControllers;
+(void)showPresentViewController:(id)controller;
-(void).cxx_destruct;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(BOOL)isNotAppliedThemeViewController:(id)controller;
-(void)setCloseButtonTitle:(id)title;
-(void)dismissModalViewController;
-(id)popViewControllerAnimated:(BOOL)animated;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithRootViewController:(id)rootViewController;
@end

__attribute__((visibility("hidden")))
@interface NotificationNotiCenterSettingsViewController : NLTableViewController <ItemSelectionViewControllerDelegate> {
	BOOL isDirty_;
	NSArray* channelSettings_;
	NSArray* approvedChannels_;
	LineChannelSettings* unapprovedChannelSetting_;
	NSArray* noticenterOnlyChannelTags_;
	NSArray* othersChannelTags_;
}
-(void).cxx_destruct;
-(void)itemSelectionViewController:(id)controller didCommitItem:(id)item atIndex:(int)index;
-(void)itemSelectionViewController:(id)controller didSelectItem:(id)item atIndex:(int)index;
-(void)updateUnapprovedChannelSetting:(id)setting;
-(void)notiCenterOnlyChannelsChangedNotificationOnOff:(id)off;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)saveSettingsUsingSetterBlock:(id)block completeBlock:(id)block2;
-(void)loadUnapprovedSetting;
-(void)loadSettings;
-(id)cellWithSwitch:(id)aSwitch withIdentifier:(id)identifier withTag:(int)tag withTitle:(id)title withReceivable:(BOOL)receivable withAction:(SEL)action;
-(id)unapprovedSettingCell:(id)cell cellForRowAtIndexPath:(id)indexPath;
-(int)sectionCount;
-(BOOL)isUnapprovedChannelSettingSection:(int)section;
-(BOOL)isChannelsOthersSection:(int)section;
-(BOOL)isChannelsNotificationOnlySection:(int)section;
-(void)fetchApprovedChannels;
-(void)updateApprovedChannels;
-(BOOL)isDirty;
-(void)resetDirty;
-(void)setDirty;
-(void)reloadTableIfAvailable;
-(void)saveCurrentSettings;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)willMoveToParentViewController:(id)parentViewController;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithStyle:(int)style;
-(id)init;
-(id)rowsForSection:(int)section;
-(id)rowsInOthersChannelSection;
-(id)rowsInNotiCenterOnlyChannels;
@end

__attribute__((visibility("hidden")))
@interface LAURLImageControl : UIControl {
	UIImageView* _lineView;
	LAURLImageView* _urlImageView;
}
@property(retain, nonatomic) LAURLImageView* urlImageView;
@property(retain, nonatomic) UIImageView* lineView;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setOid:(id)oid size:(id)size albumId:(id)anId groupId:(id)anId4;
-(void)setFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBMergeExtDatas : MBBaseActivityContent {
	NSArray* mergeExtDatas;
	MBMergeExtData* _mergeExtData;
	unsigned _mergeExtDataIndex;
}
@property(assign, nonatomic) unsigned mergeExtDataIndex;
@property(assign, nonatomic) MBMergeExtData* mergeExtData;
-(void).cxx_destruct;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(unsigned)count;
-(id)mergeIdWithIndex:(int)index;
-(void)setTimelineMultiMergeIndex:(unsigned)index;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LAUserCache : NSObject {
	NSMutableDictionary* users;
}
@property(retain, nonatomic) NSMutableDictionary* users;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)setBlocked:(BOOL)blocked forUser:(id)user;
-(void)userWithMid:(id)mid completeBlock:(id)block;
-(void)setupUserCache:(id)cache;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallPushNotificationHandler : NSObject {
}
+(void)handleAPNSPayload:(id)payload;
+(BOOL)isCallPushNotification:(id)notification;
@end

__attribute__((visibility("hidden")))
@interface MBRecommendView : MBBaseChildCellView <MBActorObserving> {
	int mPostViewType;
	int mRecommendType;
	MBRecommend* mRecommend;
	UIButton* mActionButton;
	MBURLImageView* mThumbnail;
	UIImageView* mThumbnailBg;
	UIImageView* mThumbnailFrame;
	UIImageView* mDownloadImage;
	UIImageView* mAddFriendImage;
	UILabel* mTitleLabel;
	NMAttributedLabel* mTextLabel;
	UIImageView* mDownloadLine;
	UIButton* mDownloadButton;
	UIView* mBottomLine;
	BOOL mIsAlreadyUsed;
	NSString* cacheKey;
}
+(float)height;
+(float)lineHeight;
+(id)recommendViewWithType:(int)type;
-(void).cxx_destruct;
-(id)cutTextAttributes;
-(id)cutAttributedString:(id)string;
-(id)textLabel;
-(id)cacheKey;
-(void)clearCache;
-(void)removeActorObserver;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)reloadView;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)layoutForText;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)resetCellData;
-(void)drawCellData;
-(void)setBottomLineHidden;
-(id)imageForDownloadButton;
-(BOOL)isHiddenDownloadButton;
-(BOOL)checkIsAlreadyUsed;
-(void)setCellData:(id)data;
-(id)cropThumbnail:(id)thumbnail;
-(void)addFriendForRecommendTypeOfficial;
-(void)downloadButtonAction;
-(void)actionForRecommendTypeApp;
-(void)actionForRecommendTypeSticker;
-(void)actionForRecommendTypeOfficial;
-(void)actionButtonAction;
-(void)addedBuddyNotification:(id)notification;
-(void)renderTheme;
-(void)dealloc;
-(id)initWithType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface LineSKProductsRequest : SKProductsRequest {
	NSString* queueNumber;
}
@property(retain, nonatomic) NSString* queueNumber;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LineValidationManager : NSObject {
}
+(BOOL)checkParam:(id)param paramCount:(int)count;
+(BOOL)validateOperationParameter:(id)parameter;
@end

__attribute__((visibility("hidden")))
@interface MBPostFeedbackCountView : MBBaseChildCellView {
	MBActivity* mActivity;
	int mPostViewType;
	MBFeedbackButton* mLikeButton;
	MBFeedbackButton* mCommentButton;
}
+(id)postFeedbackCountViewWithType:(int)type;
-(void).cxx_destruct;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)setCellData:(id)data;
-(id)initWithType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface NLSearchBar : UISearchBar {
	BOOL _isVisibleExtraButton;
	UIImage* _searchBarBackgroundImage;
	UIImage* _searchFieldBackgroundImage;
	UIImage* _searchIconImage;
	UIImage* _clearButtonImage;
	UIImage* _highlightedClearButtonImage;
	UIImage* _cancelButtonImage;
	UIImage* _highlightedCancelButtonImage;
	UIColor* _textColor;
	UIFont* _font;
	UIFont* _placeholderTextFont;
	UIColor* _placeholderTextColor;
	UIColor* _cancelButtonTextColor;
	UIFont* _cancelButtonTextFont;
	UIColor* _cancelButtonTextShadowColor;
	UIButton* _extraButton;
	UIImageView* _searchFieldBgImageView;
	UIImageView* _searchFieldIconImageView;
	CGSize _cancelButtonTextShadowOffset;
	CGSize _searchFieldDefaultSize;
}
@property(retain, nonatomic) UIImageView* searchFieldIconImageView;
@property(retain, nonatomic) UIImageView* searchFieldBgImageView;
@property(readonly, assign, nonatomic) int themeStatusBarStyle;
@property(readonly, assign, nonatomic) UIColor* themeBackgroundColor;
@property(assign, nonatomic) BOOL isVisibleExtraButton;
@property(retain, nonatomic) UIButton* extraButton;
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) CGSize searchFieldDefaultSize;
@property(assign, nonatomic) CGSize cancelButtonTextShadowOffset;
@property(retain, nonatomic) UIColor* cancelButtonTextShadowColor;
@property(retain, nonatomic) UIFont* cancelButtonTextFont;
@property(retain, nonatomic) UIColor* cancelButtonTextColor;
@property(retain, nonatomic) UIColor* placeholderTextColor;
@property(retain, nonatomic) UIFont* placeholderTextFont;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIImage* highlightedCancelButtonImage;
@property(retain, nonatomic) UIImage* cancelButtonImage;
@property(retain, nonatomic) UIImage* highlightedClearButtonImage;
@property(retain, nonatomic) UIImage* clearButtonImage;
@property(retain, nonatomic) UIImage* searchIconImage;
@property(retain, nonatomic) UIImage* searchFieldBackgroundImage;
@property(retain, nonatomic) UIImage* searchBarBackgroundImage;
-(void).cxx_destruct;
-(BOOL)render;
-(void)didTapExtraButton:(id)button;
-(void)layoutSubviews;
-(void)layoutButtons;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(void)_customizeSubviews;
-(void)initDefaultThemeValues;
-(void)_init;
@end

__attribute__((visibility("hidden")))
@interface NLGrowingTextView : UIView <NLTextViewDelegate, UIKeyInput> {
	BOOL _iOS7;
	NLDummyTextInput* _dummyTextInput;
	BOOL _isAcceptingAutoCorrection;
	float _minHeight;
	BOOL _didInputEnterKey;
	BOOL _lastTouchPositionWasInside;
	UIFont* _font;
	UIColor* _textColor;
	id<NLGrowingTextViewDelegate> _delegate;
	float _maxHeight;
	int _maxNumberOfLines;
	int _inputMaxLength;
	UIColor* _recallUserTextColor;
	UIColor* _recallUserBackgroundColor;
	UIView* _placeholderView;
	NLTextView* _internalTextView;
}
@property(assign, nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property(assign, nonatomic) int keyboardAppearance;
@property(assign, nonatomic) int spellCheckingType;
@property(retain, nonatomic) NLTextView* internalTextView;
@property(assign, nonatomic) int autocapitalizationType;
@property(assign, nonatomic) int autocorrectionType;
@property(assign, nonatomic, getter=isActionDisabled) BOOL actionDisabled;
@property(assign, nonatomic) BOOL enablesReturnKeyAutomatically;
@property(readonly, assign, nonatomic) NSDictionary* defaultTypingAttributes;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIView* inputView;
@property(assign, nonatomic) int keyboardType;
@property(assign, nonatomic) int returnKeyType;
@property(assign, nonatomic) unsigned dataDetectorTypes;
@property(assign, nonatomic, getter=isEditable) BOOL editable;
@property(retain, nonatomic) UIFont* font;
@property(assign, nonatomic) NSRange selectedRange;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSAttributedString* attributedText;
@property(retain, nonatomic) UIView* placeholderView;
@property(retain, nonatomic) UIColor* recallUserBackgroundColor;
@property(retain, nonatomic) UIColor* recallUserTextColor;
@property(assign, nonatomic) BOOL lastTouchPositionWasInside;
@property(readonly, assign, nonatomic) NSArray* allTextMetadataArray;
@property(retain, nonatomic) NSString* rawString;
@property(assign, nonatomic) int inputMaxLength;
@property(assign, nonatomic) int maxNumberOfLines;
@property(assign, nonatomic) float maxHeight;
@property(assign, nonatomic) id<NLGrowingTextViewDelegate> delegate;
+(void)initialize;
-(void).cxx_destruct;
-(void)textViewDidTapTextView:(id)textView;
-(void)handleSticonImageChangedNotification:(id)notification;
-(void)insertRawSticonString:(id)string;
-(id)attributedStringAndTextMetadataArrayWithRawString:(id)rawString andMaxLength:(unsigned)length;
-(CGSize)sizeThatFits:(CGSize)fits;
-(BOOL)isFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)textViewDidChangeSelection:(id)textView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)adjustScrollPosition;
-(void)invokeDidChangeHeightDelegate:(float)invoke;
-(void)invokeWillChangeHeightDelegate:(float)invoke;
-(void)resizeTextView:(float)view;
-(void)adjustViewHeightIfNeeded;
-(float)contentHeight;
-(void)acceptAutoCorrectionSuggestion;
-(void)reloadInputViews;
-(void)scrollRangeToVisible:(NSRange)visible;
-(void)resetUserRecalls;
-(BOOL)userRecallExistsAtLocation:(unsigned)location effectiveRange:(NSRange*)range;
-(unsigned)numberOfUserRecalls;
-(BOOL)isUserRecallExistsWithMID:(id)mid;
-(void)insertUserRecallWithUserName:(id)userName andMID:(id)mid;
-(void)restoreTextMetadata:(id)metadata;
-(id)rawStringAndTextMetadataWithOptions:(unsigned)options;
-(id)rawStringWithOptions:(unsigned)options;
-(BOOL)insertAttributedString:(id)string withTextMetadataArray:(id)textMetadataArray;
-(void)insertText:(id)text;
-(void)insertAttributedString:(id)string;
-(void)insertTextAttachmentWithMetadata:(id)metadata;
-(id)attributedStringWithTextMetadata:(id)textMetadata;
-(BOOL)respondsToAttributedText;
-(BOOL)canInsertText:(id)text;
-(BOOL)hasText;
-(void)deleteBackward;
-(float)heightForNumberOfLines:(int)lines;
-(void)dealloc;
-(void)initialize;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface StickerShopViewController : NLTableViewController <FriendsPickerViewControllerDelegate, UIScrollViewDelegate, UIAlertViewDelegate, LineNavigationControllerDelegate, StickerShopSegmentControllerDelegate, UISearchBarDelegate, UISearchDisplayDelegate> {
	StickerShopSegmentController* segmentControl_;
	UITableViewCell* segmentControlCell_;
	UITableViewCell* emptyCell_;
	LineProductList* popularProductList_;
	LineProductList* newestProductList_;
	LineProductList* eventProductList_;
	LineProductList* categoryProductList_;
	LineProductList* filteredProductList_;
	NSArray* categoryTitleList_;
	LineProductCategory* currentSelectedCategory_;
	long long currentSelectedCategoryId_;
	long long newItemPublishedSince_;
	long long eventItemPublishedSince_;
	UIActivityIndicatorView* act_;
	UITableViewCell* bannerCell_;
	UILabel* noResultLabel_;
	UIImageView* noEventImageView_;
	unsigned BannerSeq;
	BOOL _isAppearing;
	BOOL _loggedBannerViewEvent[4];
	BOOL isFetchMoreLoading;
	BOOL isAlertViewShown;
	int popularFetchOffset;
	int newestFetchOffset;
	int eventFetchOffset;
	int categoryFetchOffset;
	BOOL isDownloadingPopularList_;
	BOOL isDownloadingNewestList_;
	BOOL isDownloadingEventList_;
	BOOL isDownloadingCategoryItemtList_;
	BOOL isDownloadingCategoryList_;
	LEGYRequestResponseHandler* request_;
	BOOL hasResults_;
	unsigned searchOffset_;
	BOOL reachedEndOfResults_;
	NSString* searchTerm_;
	NSTimer* timer_;
	double searchInterval_;
	BOOL searchResultsTableViewHasLoaded;
	NSMutableArray* popularList;
	NSMutableArray* newestList;
	NSMutableArray* eventList;
	NSMutableArray* categoryList;
	NSMutableArray* filteredList;
	int bannerLinkType;
	NSString* bannerTargetPath;
	unsigned selectedIndex;
	LineProduct* selectedProduct;
	UISearchDisplayController* searchDisplayController_;
	UISearchBar* searchBar_;
	UIImage* _bannerErrorImage;
}
@property(retain, nonatomic) UISearchBar* searchBar;
@property(retain, nonatomic) UISearchDisplayController* searchDisplayController;
@property(retain, nonatomic) UIImage* bannerErrorImage;
@property(retain, nonatomic) LineProduct* selectedProduct;
@property(assign, nonatomic) unsigned selectedIndex;
@property(retain, nonatomic) NSString* bannerTargetPath;
@property(assign, nonatomic) int bannerLinkType;
@property(retain, nonatomic) NSMutableArray* filteredList;
@property(retain, nonatomic) NSMutableArray* categoryList;
@property(retain, nonatomic) NSMutableArray* eventList;
@property(retain, nonatomic) NSMutableArray* newestList;
@property(retain, nonatomic) NSMutableArray* popularList;
-(void).cxx_destruct;
-(BOOL)prefersStatusBarHidden;
-(void)logBannerViewEvent;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)isSearchTableView:(id)view;
-(void)search;
-(void)resetSearchState;
-(void)friendsPickerViewController:(id)controller didFinishPickingItems:(id)items;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)loadMore;
-(void)tappedRightButton:(id)button;
-(void)changeSegment:(id)segment;
-(void)updateProduct:(id)product forTableView:(id)tableView;
-(void)updateProduct:(id)product;
-(void)loadCategoryStickerPackages;
-(void)loadCategoryStickerLists;
-(void)setupTitleByCategory;
-(void)loadEventStickerPackages;
-(void)loadNewlyStickerPackages;
-(void)loadPopularStickerPackages;
-(void)setLoadingFooterViewAtThisTable:(id)thisTable;
-(void)stickerPackagesChanged;
-(void)openBanner:(id)banner;
-(void)cancelAction;
-(void)onTapMyStickersButton:(id)button;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)showNoResultLabelByError;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)dataIndexFromIndexPath:(id)indexPath;
-(int)isDataIndex:(id)index;
-(BOOL)isBannerRow:(id)row;
-(BOOL)isSegmentControlRow:(id)row;
-(void)addFooterViewAtThisTable:(id)thisTable;
-(id)productListArrayForTable:(id)table;
-(id)productListForTable:(id)table;
-(BOOL)isDownloadingListForTable:(id)table;
-(void)clearEventBadge:(id)badge;
-(void)clearNewBadge:(id)badge;
-(BOOL)isShowingItemsInCategory;
-(BOOL)isShowingCategoryList;
-(BOOL)shouldDismissViewController;
-(int)preferredStatusBarStyle;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)setupAtInit;
-(id)description;
-(id)initWithCategoryId:(long long)categoryId;
-(id)initWithCategory:(id)category;
-(id)initWithSegment:(unsigned)segment;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface NLCallUseHistoryCell : UITableViewCell {
	UILabel* _recipientLabel;
	UILabel* _paymentInfoLabel;
	UILabel* _dateLabel;
	UILabel* _timeLabel;
	UIImageView* _phoneIcon;
	UIView* _bottomLine;
}
-(void).cxx_destruct;
-(id)timeLabelFromDuration:(long long)duration;
-(void)layoutSubviews;
-(void)setHistoryInfo:(id)info;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBBaseLayout : NSObject <MBUIViewLayout> {
	UIView* mContainer;
}
@property(assign, nonatomic) UIView* container;
-(CGSize)preferredSize:(CGSize)size;
-(void)layout;
@end

__attribute__((visibility("hidden")))
@interface NLStickerDownloadProgressView : UIView {
	UIImageView* progressBackground;
	UIImageView* progressBar;
	UILabel* sizeLabel;
	UIButton* cancelButton;
	UIImageView* _progressBackground;
	UIImageView* _progressBar;
	UILabel* _sizeLabel;
	UIButton* _cancelButton;
	id<StickerDownloadProgressDelegate> thisDelegate;
}
@property(assign, nonatomic) id<StickerDownloadProgressDelegate> thisDelegate;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UILabel* sizeLabel;
@property(retain, nonatomic) UIImageView* progressBar;
@property(retain, nonatomic) UIImageView* progressBackground;
-(void).cxx_destruct;
-(void)setDownloadedSize:(float)size andWholeSize:(float)size2;
-(void)setProgress:(float)progress;
-(void)onTapStopButton:(id)button;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCustomField : UITextField {
	UIEdgeInsets borderRectInsets;
	UIEdgeInsets textRectInsets;
	UIEdgeInsets placeholderRectInsets;
	UIEdgeInsets editingRectInsets;
	UIEdgeInsets clearButtonRectInsets;
	UIEdgeInsets leftViewRectInsets;
	UIEdgeInsets rightViewRectInsets;
}
@property(assign, nonatomic) UIEdgeInsets rightViewRectInsets;
@property(assign, nonatomic) UIEdgeInsets leftViewRectInsets;
@property(assign, nonatomic) UIEdgeInsets clearButtonRectInsets;
@property(assign, nonatomic) UIEdgeInsets editingRectInsets;
@property(assign, nonatomic) UIEdgeInsets placeholderRectInsets;
@property(assign, nonatomic) UIEdgeInsets textRectInsets;
@property(assign, nonatomic) UIEdgeInsets borderRectInsets;
-(CGRect)rightViewRectForBounds:(CGRect)bounds;
-(CGRect)leftViewRectForBounds:(CGRect)bounds;
-(CGRect)clearButtonRectForBounds:(CGRect)bounds;
-(CGRect)editingRectForBounds:(CGRect)bounds;
-(CGRect)placeholderRectForBounds:(CGRect)bounds;
-(CGRect)textRectForBounds:(CGRect)bounds;
-(CGRect)borderRectForBounds:(CGRect)bounds;
@end

__attribute__((visibility("hidden")))
@interface LGBadgeButton : UIButton {
	BOOL _isBackgroundImageDisabled;
	NSString* _bundleName;
	unsigned _selectedCount;
	UILabel* _checkedBadgeLabel;
	UIImageView* _checkedBadgeView;
}
@property(assign, nonatomic) BOOL isBackgroundImageDisabled;
@property(retain, nonatomic) UIImageView* checkedBadgeView;
@property(retain, nonatomic) UILabel* checkedBadgeLabel;
@property(assign, nonatomic) unsigned selectedCount;
@property(retain, nonatomic) NSString* bundleName;
-(void).cxx_destruct;
-(void)setBackgroundImageLikeDisabled:(BOOL)disabled;
-(void)setCheckedBadgeCount:(unsigned)count animated:(BOOL)animated;
-(id)newCheckedBadgeLabel;
-(id)newCheckedBadgeView;
-(id)initWithFrame:(CGRect)frame isMultipleSelection:(BOOL)selection bundleName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface NLManagedStickerPackageID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _NLManagedStickerPackage : NSManagedObject {
}
@property(assign) int versionValue;
@property(retain, nonatomic) NSNumber* version;
@property(assign) int stickerIDStartValue;
@property(retain, nonatomic) NSNumber* stickerIDStart;
@property(assign) int stickerIDEndValue;
@property(retain, nonatomic) NSNumber* stickerIDEnd;
@property(assign) long long packageIDValue;
@property(retain, nonatomic) NSNumber* packageID;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(void)setPrimitiveVersionValue:(int)value;
-(int)primitiveVersionValue;
-(void)setPrimitiveStickerIDStartValue:(int)value;
-(int)primitiveStickerIDStartValue;
-(void)setPrimitiveStickerIDEndValue:(int)value;
-(int)primitiveStickerIDEndValue;
-(void)setPrimitivePackageIDValue:(long long)value;
-(long long)primitivePackageIDValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface ProgressBar : UIView {
	UIImage* bgImage;
	UIImage* barImage;
	float _progress;
}
@property(retain, nonatomic) UIImage* barImage;
@property(retain, nonatomic) UIImage* bgImage;
@property(assign, nonatomic) float progress;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(void)setupImages;
@end

__attribute__((visibility("hidden")))
@interface MBLocationContentView : MBBaseChildCellView {
	MBTextLocation* mTextLocation;
	int mPostViewType;
	MBLocationButton* mLocationButton;
}
@property(readonly, assign, nonatomic) MBTextLocation* textLocation;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(void)setCellData:(id)data;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface TalkAppDelegate : UIResponder <UIApplicationDelegate, NSFetchedResultsControllerDelegate, PasscodeViewControllerDelegate, UITabBarControllerDelegate, UINavigationControllerDelegate, UIAlertViewDelegate, BWQuincyManagerDelegate> {
	NSFetchedResultsController* fetchedResultsController_;
	NSString* _openChatMID;
	BOOL _checkedRegistrationState;
	BOOL _showingLaunchImage;
	NLManagedMetadata* _managedMetadata;
	BOOL isShowingCallWindow;
	BOOL statusBarWasNotHidden;
	BOOL returningFromBackground;
	BOOL _migratingCoreData;
	BOOL _launchingApplication;
	BOOL _isLocked;
	BOOL _navigationInProgress;
	AVAudioPlayer* player;
	PasscodeViewController* _passcodeViewController;
	UIWindow* _passcodeWindow;
	UIWindow* callWindow;
	UIWindow* _window;
	UITabBarController* _tabBarController;
	NSString* temporaryResourceUrl_;
	NSString* temporarySourceApplication_;
	int _applicationState;
	int _unreadMessageCount;
}
@property(retain, nonatomic) UIWindow* window;
@property(assign, nonatomic) BOOL navigationInProgress;
@property(retain, nonatomic) NSString* temporarySourceApplication;
@property(retain, nonatomic) NSString* temporaryResourceUrl;
@property(assign, nonatomic) BOOL statusBarWasNotHidden;
@property(assign, nonatomic) BOOL isShowingCallWindow;
@property(retain, nonatomic) UIWindow* callWindow;
@property(retain, nonatomic) UIWindow* passcodeWindow;
@property(retain, nonatomic) PasscodeViewController* passcodeViewController;
@property(retain, nonatomic) AVAudioPlayer* player;
@property(readonly, assign, nonatomic) NSFetchedResultsController* fetchedResultsController;
@property(assign, nonatomic) int unreadMessageCount;
@property(assign, nonatomic) BOOL isLocked;
@property(retain) NSString* openChatMID;
@property(assign) int applicationState;
@property(assign, nonatomic) BOOL launchingApplication;
@property(assign, nonatomic) BOOL returningFromBackground;
@property(assign, nonatomic) BOOL migratingCoreData;
@property(readonly, assign, nonatomic) int interfaceOrientation;
@property(readonly, assign, nonatomic) SettingsViewController* settingsViewController;
@property(readonly, assign, nonatomic) RecommendationViewController* recommendationViewController;
@property(readonly, assign, nonatomic) MBTimelineViewController* timelineViewController;
@property(readonly, assign, nonatomic) MessageViewController* messageViewController;
@property(readonly, assign, nonatomic) ChatListViewController* chatListViewController;
@property(readonly, assign, nonatomic) MoreViewController* moreViewController;
@property(readonly, assign, nonatomic) FriendsViewController* friendsViewController;
@property(retain, nonatomic) UITabBarController* tabBarController;
+(id)badgeValueForUnreadMessageCount:(int)unreadMessageCount;
+(id)sharedAppDelegate;
-(void).cxx_destruct;
-(void)shutDown;
-(void)processAppAuthTask;
-(BOOL)needDismissWithLocKey:(id)locKey;
-(void)passcodeViewControllerUnlocked:(id)unlocked;
-(void)didRecieveChangedTheme:(id)theme;
-(void)releaseSubviews:(id)subviews;
-(void)callViewDidUnloadWithViewController:(id)callView currentViewController:(id)controller;
-(void)releaseUnvisibleViewControllers;
-(void)didReceiveCallWindowWillMaximizing:(id)didReceiveCallWindow;
-(void)didReceiveCallWindowWillMinimizing:(id)didReceiveCallWindow;
-(void)didReceiveCallWindowDidDisappear:(id)didReceiveCallWindow;
-(void)didReceiveCallWindowDidAppear:(id)didReceiveCallWindow;
-(void)openChatWithMID:(id)mid type:(int)type beforeSave:(id)save beforeOpen:(id)open;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(void)openURL:(id)url baseViewController:(id)controller;
-(void)openURL:(id)url;
-(void)showSharingTargetSelectorViewWithItem:(id)item;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)syncAppBadge;
-(void)updateBadgeOnChatsTab:(int)tab;
-(void)setupChatTabBadge;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification fetchCompletionHandler:(id)handler;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)__delayed__unblockNavigationFlag;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
-(void)updateBadgeOnTimelineTab;
-(void)__delayed__updateNotiBadge;
-(void)initTabBarControl;
-(void)initTabBarDesign;
-(id)make3rdRootVCInTab;
-(id)selectedViewController;
-(id)currentVisibleViewController;
-(id)selectMoreView;
-(BOOL)isChatTabSelected;
-(id)selectChatListViewByNavigationSchemeWithAnimation:(BOOL)animation;
-(id)selectChatListViewWithAnimation:(BOOL)animation;
-(id)selectedChatListViewWithAnimationIfNeeded;
-(id)selectChatListView;
-(id)selectTimelineView;
-(id)selectRecommendationView;
-(id)selectFriendListView;
-(id)friendListViewController;
-(id)selectFriendsView;
-(id)selectFriendsViewNoAnimation;
-(void)dismissNotificationCenterPopupIfExists;
-(void)removeMyHomeViewerIfExists;
-(void)removeUserInfoViewIfExists;
-(void)runProfileUpdateScenario;
-(void)closeAllWindowsIfExists;
-(void)closeAllPopupsIfExists;
-(void)doNotMarkChatAsReadWhenChatRoomOpened:(id)opened;
-(void)processRemoteNotification:(id)notification fetchCompletionHandler:(id)handler;
-(void)processRemoteNotification:(id)notification;
-(void)removeMigrationWindow;
-(void)processLocalNotification:(id)notification;
-(BOOL)needToMoveChatRoomWithLocKey:(id)locKey;
-(void)dismissIfExistModalViewController;
-(id)viewControllerClassNamesNotToDismiss;
-(BOOL)isCafeWritingState:(id)state;
-(void)dismissAlertViewIfExists;
-(void)dismissActionSheetIfExists;
-(void)dismissAllModalViews;
-(void)removeUFOLineSinceIOS7;
-(void)createMainWindow;
-(void)discardPasscodeView;
-(void)preparePasscodeView;
-(void)dismissPasscodeLock;
-(void)showPasscodeLock;
-(void)dismissLaunchImage;
-(void)presentLaunchImage;
-(void)checkRegistrationState:(unsigned)state;
-(void)applicationProtectedDataDidBecomeAvailable:(id)applicationProtectedData;
-(void)applicationProtectedDataWillBecomeUnavailable:(id)applicationProtectedData;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(void)initializeLineApplication;
-(void)checkNoName;
-(void)startLineModules;
-(void)removeObservers;
-(void)addObservers;
-(void)initializeLineApplication:(id)application withOptions:(id)options;
-(void)checkAndShowPhoneNumberOrSNSVerificationIfBothNotFound;
-(void)initializeEmojiComponents;
@end

__attribute__((visibility("hidden")))
@interface NJAnimation : NSObject {
}
+(void)fadeOut:(id)anOut remove:(id)remove;
+(void)fadeIn:(id)anIn add:(id)add;
+(void)addDownTransitionAnimation:(id)animation;
+(void)addUpTransitionAnimation:(id)animation;
+(void)addLeftTransitionAnimation:(id)animation;
+(void)addRightTransitionAnimation:(id)animation;
+(void)removeViewWithCurlDownAnimation:(id)curlDownAnimation nextView:(id)view;
+(void)addSubviewWithCurlupAnimation:(id)curlupAnimation nextView:(id)view;
@end

__attribute__((visibility("hidden")))
@interface MessageViewCell : UITableViewCell <NMAttributedLabelDelegate> {
	id<MessageViewCellActionDelegate> actionSheetDelegate_;
	float profileImageOffsetFromLeftEdge;
	float timeLabelOffsetFromBottom;
	BOOL hasUnreadMark;
	BOOL _editMode;
	short contentType;
	short sendStatus;
	unsigned messageCellType;
	float topMargin;
	NSAttributedString* attributedString;
	UIImage* contentImage;
	NLInformationDateView* _dateView;
	NLInformationSystemMessageView* _systemView;
	ProfileImageView* _profileImageView;
	UILabel* _userNameLabel;
	UILabel* _timeLabel;
	UIView* _statusView;
	UILabel* _sendTimeLabel;
	UILabel* _readCountLabel;
	UIButton* _failureButton;
	NLInformationUnreadView* _unreadMarkView;
	UIImageView* _soundImageView;
	NLMessageCouponView* _couponView;
	NLMessagePresentView* _presentView;
	NLMessageCallView* _callBubbleView;
	NLMessageAudioView* _audioBubbleView;
	NLMessageVideoView* _videoBubbleView;
	NLMessageGroupBoardView* _groupBoardView;
	NLMessageAppLinkView* _appLinkView;
	NLMessageContactView* _contactView;
	NLMessageTextView* _textView;
	NLMessageLocationView* _locationView;
	NLMessagePictureView* _pictureView;
	NLMessageStickerView* _stickerView;
	NLMessageImageMapView* _imageMapView;
	UIImageView* _autoResendIndicator;
	NLMessageFileView* _fileView;
	UIButton* _editCheckButton;
	int _currentSkinType;
	CGRect mTextBounds;
}
@property(readonly, assign, getter=isLandscape) BOOL landscape;
@property(assign, nonatomic) id<MessageViewCellActionDelegate> actionSheetDelegate;
@property(assign, nonatomic) int currentSkinType;
@property(retain, nonatomic) UIImageView* soundImageView;
@property(retain, nonatomic) UIButton* editCheckButton;
@property(assign, nonatomic) BOOL editMode;
@property(assign, nonatomic) BOOL hasUnreadMark;
@property(retain, nonatomic) UIImage* contentImage;
@property(retain, nonatomic) NSAttributedString* attributedString;
@property(assign, nonatomic) short sendStatus;
@property(assign, nonatomic) short contentType;
@property(assign, nonatomic) unsigned messageCellType;
@property(assign, nonatomic) float topMargin;
@property(retain, nonatomic) NLInformationSystemMessageView* systemView;
@property(retain, nonatomic) NLInformationUnreadView* unreadMarkView;
@property(retain, nonatomic) NLInformationDateView* dateView;
@property(retain, nonatomic) NLMessageFileView* fileView;
@property(retain, nonatomic) NLMessageStickerView* stickerView;
@property(retain, nonatomic) NLMessageImageMapView* imageMapView;
@property(retain, nonatomic) NLMessagePictureView* pictureView;
@property(retain, nonatomic) NLMessageLocationView* locationView;
@property(retain, nonatomic) NLMessageTextView* textView;
@property(retain, nonatomic) NLMessageContactView* contactView;
@property(retain, nonatomic) NLMessagePresentView* presentView;
@property(retain, nonatomic) NLMessageVideoView* videoBubbleView;
@property(retain, nonatomic) NLMessageAudioView* audioBubbleView;
@property(retain, nonatomic) NLMessageCallView* callBubbleView;
@property(retain, nonatomic) NLMessageCouponView* couponView;
@property(retain, nonatomic) NLMessageAppLinkView* appLinkView;
@property(retain, nonatomic) NLMessageGroupBoardView* groupBoardView;
@property(retain, nonatomic) ProfileImageView* profileImageView;
@property(retain, nonatomic) UIButton* failureButton;
@property(retain, nonatomic) UILabel* readCountLabel;
@property(retain, nonatomic) UIImageView* autoResendIndicator;
@property(retain, nonatomic) UILabel* sendTimeLabel;
@property(retain, nonatomic) UIView* statusView;
@property(retain, nonatomic) UILabel* timeLabel;
@property(retain, nonatomic) UILabel* userNameLabel;
@property(assign, nonatomic) CGRect textBounds;
+(id)noProfileViewType;
+(id)noNameLabelType;
+(CGSize)sizeForNoImageTypeWithMessageType:(unsigned)messageType;
+(BOOL)isMessageContentView:(id)view;
-(void).cxx_destruct;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)contentViewForMessageType:(short)messageType;
-(id)usingContentViews;
-(void)attributedLabel:(id)label linkTapped:(id)tapped url:(id)url type:(unsigned)type;
-(void)attributedLabel:(id)label linkLongTapped:(id)tapped url:(id)url type:(unsigned)type;
-(void)prepareForReuse;
-(void)setTheme:(unsigned)theme;
-(void)layoutEditModeIfNeeded;
-(void)layoutSubviewsForSystemMessage;
-(void)layoutSubviewsForSentMessage;
-(void)layoutSubviewsForReceivedMessage;
-(float)adjustUnreadMarkOrigin:(float)origin;
-(id)layoutSubviewsForMessageType:(short)messageType bubbleDirection:(unsigned)direction;
-(float)textWidthForCurrentOrientation;
-(void)layoutSubviews;
-(void)setFrame:(CGRect)frame;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(unsigned)messageTypeFromIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBActivityListManager : MBDataManager {
}
@property(assign, nonatomic) id<MBActivityListManagerDelegate> delegate;
-(void)deleteActivity:(id)activity;
-(void)createLikeOnActivity:(id)activity withType:(id)type sourceType:(id)type3;
@end

__attribute__((visibility("hidden")))
@interface NLMessageInputBarForRecallUsers : NSObject <NLGrowingTextViewDelegate> {
	NLMessageInputBar* mMessageInputBar;
	NSRange mSearchRange;
	BOOL _recallState;
}
@property(assign, nonatomic) BOOL recallState;
-(BOOL)isExceedMaxUsers;
-(BOOL)isExistEqualRecallUser:(id)user;
-(void)addRecallUser:(id)user mid:(id)mid;
-(void)addRecallUserFromComment:(id)comment mid:(id)mid;
-(id)recallUsers;
-(id)textMetadataArray;
-(void)resetRecallUsers;
-(id)searchKeywordForSuggest;
-(void)restoreFromBackup:(id)backup;
-(void)dealloc;
-(id)initWithMessageInputBar:(id)messageInputBar;
@end

__attribute__((visibility("hidden")))
@interface NLAgeVerificationWebViewViewController : NLViewController <UIWebViewDelegate> {
	UIWebView* webView;
	id<NLAgeVerificationDelegate> avDelegate;
	NSMutableArray* _cachedLink;
	int _carrierCode;
	NSString* _sessionId;
	NSString* _verificationToken;
	id _networkActivityIndicatorHandle;
}
@property(retain, nonatomic) id networkActivityIndicatorHandle;
@property(retain, nonatomic) NSString* verificationToken;
@property(retain, nonatomic) NSString* sessionId;
@property(assign, nonatomic) int carrierCode;
@property(retain, nonatomic) NSMutableArray* cachedLink;
@property(assign, nonatomic) id<NLAgeVerificationDelegate> avDelegate;
@property(retain, nonatomic) UIWebView* webView;
-(void).cxx_destruct;
-(BOOL)regularExpression:(id)expression URL:(id)url;
-(BOOL)isCallbackURL:(id)url;
-(BOOL)isRedirectDocomoURL:(id)url;
-(void)clearCookie;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)checkUserAgeWithVerifier:(id)verifier redirectURL:(id)url;
-(void)retrieveAuthURL;
-(void)loadWebViewWithURL:(id)url;
-(void)onBackPressed:(id)pressed;
-(void)close;
-(void)closeViewController;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLStickerPreview : UIView {
	id closeBlock;
	id attachBlock;
	UIButton* attachButton;
	UIButton* stickerButton;
	UIButton* _speakerButton;
	int _stickerID;
	unsigned _previewType;
	NLAnimationImageView* _stickerImageView;
	UIView* _alphaView;
	UIView* _lineView;
	UIButton* _closeButton;
	CGRect _messageSendBarRect;
}
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) UIView* lineView;
@property(retain, nonatomic) UIView* alphaView;
@property(retain, nonatomic) NLAnimationImageView* stickerImageView;
@property(assign, nonatomic) CGRect messageSendBarRect;
@property(assign, nonatomic) unsigned previewType;
@property(assign, nonatomic) int stickerID;
+(BOOL)shownStickerPreviewGuide;
+(BOOL)useStickerPreview;
-(void).cxx_destruct;
-(void)tappedStickerButton;
-(void)tappedAttachButton;
-(void)tappedSpeakerButton;
-(void)setAttachBlock:(id)block;
-(void)setCloseBlock:(id)block;
-(void)hideStickerPreview;
-(void)loadStickerImageForPreview:(CGRect)preview;
-(void)layoutStickerImageView;
-(void)layoutStickerPreview;
-(void)setupStickerPreview;
@end

__attribute__((visibility("hidden")))
@interface LAThumbnailListViewController : LABaseViewController <UITableViewDataSource, UITableViewDelegate, LAThumbnailsCellDelegate, LABottomBarViewDelegate> {
	int _toInterfaceOrientation;
	int _lastOrientation;
	float _lastScrollPosition;
	BOOL _shouldScrollToBottom;
	id<LAPhotoViewDataSource> _dataSource;
	unsigned _currentType;
	unsigned _defaultType;
	UITableView* _tableView;
	UIActivityIndicatorView* _activityIndicator;
	NSIndexPath* _indexPathToScroll;
	float _offsetSizeForLandscape;
	LABottomBarView* _bottomBarView;
	LACheckButton* _checkButton;
}
@property(retain, nonatomic) LACheckButton* checkButton;
@property(retain, nonatomic) LABottomBarView* bottomBarView;
@property(retain, nonatomic) id<LAPhotoViewDataSource> dataSource;
@property(assign, nonatomic) float offsetSizeForLandscape;
@property(retain, nonatomic) NSIndexPath* indexPathToScroll;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)updateBadgeAnimated:(BOOL)animated;
-(void)reloadView:(BOOL)view;
-(void)setType:(unsigned)type;
-(void)thumbnailCellDidTapThumbnailAtIndex:(unsigned)thumbnailCell;
-(BOOL)thumbnailCellDidTapCheckButtonAtIndex:(unsigned)thumbnailCell;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)updateTableFooterViewFrame;
-(void)setupTableFooterView;
-(float)tableContentOffsetAfterRotation;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(int)tableViewOrientation;
-(int)currentInterfaceOrientation;
-(CGRect)currentBounds;
-(CGRect)tableViewFrame;
-(void)scrollToLastOffset;
-(void)scrollToIndexPath;
-(void)scrollToBottom;
-(void)adjustScrollIfNeeded;
-(void)saveCompleted;
-(void)bottomBarView:(id)view didTapButtonAtIndex:(unsigned)index;
-(void)setupBottomBarButton;
-(void)setupBottomBarIfNeeded;
-(void)setupEmptyBarButtonItemIfNeeded;
-(void)updateRightBarButtonItem:(int)item;
-(void)didTapCancelButton:(id)button;
-(void)didTapCloseButton:(id)button;
-(void)setupNavigationBarButtonItems:(int)items;
-(void)setupTitleView:(id)view interfaceOrientation:(int)orientation;
-(void)setupNavigationBarWithInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithGroupID:(id)groupID type:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface LGSortOptionButton : UIButton {
}
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface LGAssetsViewController : LGThumbnailsViewController <LGPhotoViewDataSource, LGImageCropDataSource, LGInstantViewDelegate> {
	BOOL _isAssetsFullyLoaded;
	BOOL _isRequestingAssetsFullyLoaded;
	LGAssetGroup* _group;
	LGAssetSections* _assetSections;
	LGMenuBarView* _bottomMenuBarView;
	UIView* _dimdView;
	UIView* _sortOptionView;
	int _lastSelectButtonTag;
	double _lastSelectTime;
}
@property(assign, nonatomic) int lastSelectButtonTag;
@property(assign, nonatomic) double lastSelectTime;
@property(assign, nonatomic) BOOL isRequestingAssetsFullyLoaded;
@property(assign, nonatomic) BOOL isAssetsFullyLoaded;
@property(retain, nonatomic) UIView* sortOptionView;
@property(retain, nonatomic) UIView* dimdView;
@property(retain, nonatomic) LGMenuBarView* bottomMenuBarView;
@property(retain, nonatomic) LGAssetSections* assetSections;
@property(retain, nonatomic) LGAssetGroup* group;
-(void).cxx_destruct;
-(void)showPhotoViewControllerForAssetURL:(id)assetURL backwardIndex:(int)index;
-(void)resetSelectedAssets;
-(void)setupSortOptionTitleView;
-(void)loadAllAssets;
-(void)updateForCurrentLanuage;
-(void)reloadGalleryData;
-(void)didChangePageDisappearValue;
-(void)setupNavigationBar;
-(id)nClickAreaId;
-(void)refreshDataAnimated:(BOOL)animated;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)groupName;
-(unsigned)numberOfAssets;
-(id)assetWithSection:(unsigned)section row:(unsigned)row;
-(unsigned)numberOfAssetsAtSection:(unsigned)section;
-(unsigned)numberOfAssetSections;
-(void)selectAllAsset;
-(void)didAssetCheckBoxSelected:(id)selected;
-(void)didAssetSelected:(id)selected;
-(void)playVideo:(id)video;
-(void)lgAssetsLibraryDidGetAssetSections:(id)lgAssetsLibrary;
-(void)updateLastPhotoThumbnail:(id)thumbnail;
-(void)updateLastPhotoThumbnailOnMainThread;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)didTapShowSortOptionButton:(id)button;
-(void)cleanUpShowSortOptionButton;
-(void)didTapSortOptionButton:(id)button;
-(id)photoViewController;
-(void)updateTableFooterForCurrentLanguage;
-(void)updateTableFooterViewFrame;
-(BOOL)showPhotoViewControllerWithSection:(int)section row:(int)row animated:(BOOL)animated;
-(unsigned)numberOfThumbnailsInSection:(unsigned)section;
-(id)updateCheckedBadgeCountOfMenuBar:(BOOL)menuBar;
-(void)repositionMenuBar;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithAssetGroup:(id)assetGroup assetsLibrary:(id)library;
@end

__attribute__((visibility("hidden")))
@interface MBDetailPostLineView : MBBaseChildCellView {
	UIView* mTopLine;
}
-(void).cxx_destruct;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface NLCallPriceTableViewCell : UITableViewCell {
	UILabel* _labelFixedLines;
	UILabel* _labelFixedLineRate;
	UILabel* _labelFixedLinePer;
}
@property(assign, nonatomic) UILabel* labelFixedLinePer;
@property(assign, nonatomic) UILabel* labelFixedLineRate;
@property(assign, nonatomic) UILabel* labelFixedLines;
+(id)viewFromNib;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)initDefault;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLToolbar : UIImageView {
	NSMutableArray* _buttons;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)addButtonWithType:(unsigned)type title:(id)title target:(id)target action:(SEL)action;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallAddressTableViewCell : NLCallCommonTableViewCell {
	NLCallImageView* _imageViewProfile;
	NMAttributedLabel* _viewName;
	NLCallSenderButton* _buttonCall;
	UIView* _viewVerticalLine;
	UIView* _viewBottomLine;
}
@property(assign, nonatomic) UIView* viewBottomLine;
@property(assign, nonatomic) UIView* viewVerticalLine;
@property(assign, nonatomic) NLCallSenderButton* buttonCall;
@property(assign, nonatomic) NMAttributedLabel* viewName;
@property(assign, nonatomic) NLCallImageView* imageViewProfile;
+(id)viewFromNib;
-(void)actionButtonCall:(id)call;
-(void)setUserInfo:(id)info withDelegate:(id)delegate withSearchKeyword:(id)searchKeyword;
-(void)initDefault;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageURLSession : NSObject {
	NSMutableDictionary* _backgroundSessions;
}
@property(retain, nonatomic) NSMutableDictionary* backgroundSessions;
+(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
+(void)handleEventsForBackgroundURLSession:(id)backgroundURLSession completionHandler:(id)handler;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)callCompletionHandlerForSession:(id)session;
-(void)addCompletionHandler:(id)handler forSession:(id)session;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLShakeViewController : NLViewController {
	NLShakeSession* _session;
	CMMotionManager* _motionManager;
	double _motionTimestamp;
	CLLocation* foundLocation;
	NLShakeTitleView* _shakingHandsView;
	UIView* _footerView;
	UIView* _notFoundFooterView;
}
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)shakeSession:(id)session didChangeShakeStatus:(unsigned)status;
-(void)shakeShake;
-(void)startObservingDeviceMotion;
-(void)tappedQRCode;
-(void)pushSearchID;
-(void)tappedSearchByID;
-(void)setShowingInitialView:(BOOL)view;
-(void)viewWillLayoutSubviews;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)onBackButtonPressed:(id)pressed;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface FriendsViewController : NLViewController <UITableViewDelegate, UITableViewDataSource, NSFetchedResultsControllerDelegate, UISearchBarDelegate, UISearchDisplayDelegate, UIScrollViewDelegate, NLProfilePopupViewerDelegate, HitokotoBalloonViewDelegate, SWTableViewCellDelegate> {
	UITableView* tableView_;
	UIBarButtonItem* editButton_;
	SocialGraphSectionManager* sectionsMgr_;
	BOOL userDrivenDataModelChange_;
	BOOL _updateCells;
	BOOL shouldReloadDataAfterEditing_;
	NSTimer* contextSaveTimer_;
	UIView* tableFooterView;
	NLProfilePopupViewer* profilePopupViewer_;
	NSArray* _promotionInfo;
}
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(retain, nonatomic) NSArray* promotionInfo;
-(void).cxx_destruct;
-(void)swippableTableViewCell:(id)cell didTriggerRightUtilityButtonWithIndex:(int)index;
-(void)themeManagerDidApplyPackageNotification:(id)themeManager;
-(void)openHitokoto:(id)hitokoto;
-(void)hitokotoTouchUpInside:(id)inside;
-(void)updateContacts;
-(void)updateRecommendBadge;
-(void)receivedGroupNoteMessage:(id)message;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controllerWillChangeContent:(id)controller;
-(id)relatedTableViewForFetchedResultController:(id)fetchedResultController;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)setEditing:(BOOL)editing;
-(BOOL)isOfficialDirectoryCellWithIndexPath:(id)indexPath;
-(void)checkInvalidateCreatedTime;
-(void)reloadNewFriendsResult;
-(void)saveContextAfterEditingIfNeeded:(BOOL)needed;
-(void)reloadDataAfterEditingIfNeeded:(BOOL)needed;
-(void)showDefaultViewIfNeed;
-(void)contextSaveTimer:(id)timer;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)configureCell:(id)cell withManagedObject:(id)managedObject isInNewFriendsSection:(BOOL)newFriendsSection;
-(void)actionSelectedCellDuringEditingWithTableView:(id)tableView atIndexPath:(id)indexPath;
-(void)actionSelectedCellWithTableView:(id)tableView atIndexPath:(id)indexPath;
-(void)profileImageView:(id)view wasTouched:(id)touched tapCount:(int)count;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)showDetailPopupWithContact:(id)contact;
-(void)showDetailPopupFromOutsideWithMid:(id)mid;
-(void)showDetailPopupWithDataObject:(id)dataObject;
-(void)showDetailPopupForMyProfile;
-(void)onTellPressed:(id)pressed;
-(void)onAddGroupPressed:(id)pressed;
-(void)onAddPressed:(id)pressed;
-(void)onEditPressed:(id)pressed;
-(int)preferredStatusBarStyle;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)openFriendsEvent;
-(void)showFriendsEventPopup;
-(void)checkFriendsEvent;
-(void)initializeSections;
-(void)updateNavigationBarTitle;
-(void)updateMyprofile;
-(void)updateBadge;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setRightBarButton;
-(void)uninitialize;
-(void)commonInitialize;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)updateGroupNewMarkFromCafe;
-(id)arrayGroupIDs;
@end

__attribute__((visibility("hidden")))
@interface RoundedLabel : UILabel {
	UIColor* textColor;
}
-(void)setTextColor:(id)color;
-(id)textColor;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame title:(id)title;
@end

__attribute__((visibility("hidden")))
@interface FriendsTableViewCell : SWTableViewCell {
	UILabel* nameLabel_;
	UILabel* recommendLabel_;
	ProfileImageView* profileImageView_;
	TalkUserObject* user_;
	HitokotoBalloonView* hitokotoView_;
	UIButton* addButton_;
	UIImageView* buddyIconView_;
	BOOL enableHighlightingNewFriend_;
	BOOL isInNewFriendsSection_;
	BOOL inittedAsSWTableViewCell_;
	BOOL ignoreButtonTouch_;
	BOOL isShowBuddyIcon_;
}
@property(readonly, assign, nonatomic) ProfileImageView* profileImageView;
@property(assign, nonatomic) BOOL isShowBuddyIcon;
@property(assign, nonatomic) BOOL isInNewFriendsSection;
@property(assign, nonatomic) BOOL enableHighlightingNewFriend;
@property(retain, nonatomic) TalkUserObject* user;
@property(retain, nonatomic) UILabel* nameLabel;
-(void).cxx_destruct;
-(BOOL)render;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)setRecommendReasonVisible:(BOOL)visible;
-(void)addFriend:(id)aFriend;
-(void)setAddButtonVisibleAndHitokotoHidden:(BOOL)hidden;
-(void)setHitokotoUserInteractiveEnabled:(BOOL)enabled;
-(void)setHitokoto:(id)hitokoto;
-(void)layoutSubviews;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier containingTableView:(id)view leftUtilityButtons:(id)buttons rightUtilityButtons:(id)buttons5;
-(id)initWithFrame:(CGRect)frame;
-(void)init_;
@end

__attribute__((visibility("hidden")))
@interface LGAssetGroupCell : UITableViewCell {
	BOOL _isLineConfigLoaded;
	NSArray* _albumDummy2ImageArray;
	NSArray* _albumDummy3ImageArray;
	UIImage* _albumNoImage;
	UIImageView* _albumImageView;
	UILabel* _albumNameLabel;
	UILabel* _albumAssetCountLabel;
	UILabel* _checkedCountLabel;
	UIImageView* _checkedMarkImageView;
	UIImageView* _checkedBadgeImageView;
	UIImageView* _bulletImageView;
}
@property(assign, nonatomic) BOOL isLineConfigLoaded;
@property(retain, nonatomic) UIImageView* bulletImageView;
@property(retain, nonatomic) UIImageView* checkedBadgeImageView;
@property(retain, nonatomic) UIImageView* checkedMarkImageView;
@property(retain, nonatomic) UILabel* checkedCountLabel;
@property(retain, nonatomic) UILabel* albumAssetCountLabel;
@property(retain, nonatomic) UILabel* albumNameLabel;
@property(retain, nonatomic) UIImageView* albumImageView;
@property(retain, nonatomic) UIImage* albumNoImage;
@property(retain, nonatomic) NSArray* albumDummy3ImageArray;
@property(retain, nonatomic) NSArray* albumDummy2ImageArray;
+(float)heightOfCell;
-(void).cxx_destruct;
-(int)gapInFrontOfBullet;
-(int)checkedPhotosTopMargin;
-(int)checkedPhotosImageHeight;
-(id)albumDummyImageView;
-(void)setAssetGroup:(id)group delegate:(id)delegate;
-(void)layoutSubviews;
-(id)initWithBundleName:(id)bundleName reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden"),objc_exception))
@interface TProtocolException : TException {
}
@end

__attribute__((visibility("hidden")))
@interface SWUtilityButtonView : UIView {
	NSArray* _utilityButtons;
	float _utilityButtonWidth;
	SWTableViewCell* _parentCell;
	SEL _utilityButtonSelector;
}
@property(assign, nonatomic) SEL utilityButtonSelector;
@property(assign, nonatomic) SWTableViewCell* parentCell;
@property(assign, nonatomic) float utilityButtonWidth;
@property(retain, nonatomic) NSArray* utilityButtons;
-(void).cxx_destruct;
-(void)setHeight:(float)height;
-(void)populateUtilityButtons;
-(float)utilityButtonsWidth;
-(float)calculateUtilityButtonWidth;
-(id)initWithFrame:(CGRect)frame utilityButtons:(id)buttons parentCell:(id)cell utilityButtonSelector:(SEL)selector;
-(id)initWithUtilityButtons:(id)utilityButtons parentCell:(id)cell utilityButtonSelector:(SEL)selector;
@end

__attribute__((visibility("hidden")))
@interface SWTableViewCell : LineTableViewCell <UIScrollViewDelegate, NLOverlayViewDelegate> {
	int _cellState;
	float additionalRightPadding;
	NSArray* _leftUtilityButtons;
	NSArray* _rightUtilityButtons;
	id<SWTableViewCellDelegate> _delegate;
	UIScrollView* _cellScrollView;
	float _height;
	UIView* _scrollViewContentView;
	SWUtilityButtonView* _scrollViewButtonViewLeft;
	SWUtilityButtonView* _scrollViewButtonViewRight;
	UIView* _optionsMask;
	NLOverlayView* _overlay;
	UITableView* _containingTableView;
	CGPoint _pointTouchBegan;
}
@property(assign, nonatomic) UITableView* containingTableView;
@property(assign, nonatomic) CGPoint pointTouchBegan;
@property(retain, nonatomic) NLOverlayView* overlay;
@property(retain, nonatomic) UIView* optionsMask;
@property(retain, nonatomic) SWUtilityButtonView* scrollViewButtonViewRight;
@property(retain, nonatomic) SWUtilityButtonView* scrollViewButtonViewLeft;
@property(assign, nonatomic) UIView* scrollViewContentView;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) UIScrollView* cellScrollView;
@property(retain, nonatomic) id<SWTableViewCellDelegate> delegate;
@property(retain, nonatomic) NSArray* rightUtilityButtons;
@property(retain, nonatomic) NSArray* leftUtilityButtons;
-(void).cxx_destruct;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollToLeft:(inout CGPoint*)left;
-(void)scrollToCenter:(inout CGPoint*)center;
-(void)scrollToRight:(inout CGPoint*)right;
-(CGPoint)scrollViewContentOffset;
-(float)utilityButtonsPadding;
-(float)rightUtilityButtonsWidth;
-(float)leftUtilityButtonsWidth;
-(void)layoutSubviews;
-(void)hideUtilityButtonsAnimated:(BOOL)animated;
-(void)leftUtilityButtonHandler:(id)handler;
-(void)rightUtilityButtonHandler:(id)handler;
-(void)setCellHeight:(float)height;
-(void)setBackgroundColor:(id)color;
-(void)timerEndCellHighlight:(id)highlight;
-(void)scrollViewPressed:(id)pressed;
-(void)scrollViewLongPressed:(id)pressed;
-(void)setHighlighted:(BOOL)highlighted;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)removeOverlay;
-(BOOL)shouldBlockGesturesByOverlayView:(id)view;
-(BOOL)pointInside:(CGPoint)inside inOverlayView:(id)overlayView withEvent:(id)event;
-(void)dealloc;
-(void)initializer;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)init;
-(id)initWithCoder:(id)coder;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier containingTableView:(id)view leftUtilityButtons:(id)buttons rightUtilityButtons:(id)buttons5;
@end

__attribute__((visibility("hidden")))
@interface NLCDVLocationCommand : CDVLocation {
}
-(void)stopHeading:(id)heading withDict:(id)dict;
-(void)getCurrentHeading:(id)heading withDict:(id)dict;
-(void)stopLocation:(id)location withDict:(id)dict;
-(void)startLocation:(id)location withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface LAAlbum : NSObject <NSCoding> {
	BOOL newFlag;
	BOOL uploading;
	NSString* albumId;
	NSDate* created;
	NSDate* lastPosted;
	LAUser* owner;
	NSString* title;
	NSArray* recentPhotos;
	NSArray* photoList;
	unsigned photoCount;
	NSArray* postedUsers;
}
@property(assign, nonatomic, getter=isUploading) BOOL uploading;
@property(retain, nonatomic) NSArray* postedUsers;
@property(assign, nonatomic) BOOL newFlag;
@property(assign, nonatomic) unsigned photoCount;
@property(retain, nonatomic) NSArray* photoList;
@property(retain, nonatomic) NSArray* recentPhotos;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) LAUser* owner;
@property(retain, nonatomic) NSDate* lastPosted;
@property(retain, nonatomic) NSDate* created;
@property(retain, nonatomic) NSString* albumId;
-(void).cxx_destruct;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface TProtocolUtil : NSObject {
}
+(void)skipType:(int)type onProtocol:(id)protocol;
@end

__attribute__((visibility("hidden"),objc_exception))
@interface TApplicationException : TException {
	int mType;
}
+(id)exceptionWithType:(int)type reason:(id)reason;
+(id)read:(id)read;
-(void)write:(id)write;
-(id)initWithType:(int)type reason:(id)reason;
@end

__attribute__((visibility("hidden")))
@interface LANoAlbumsPagingView : UIView <UIScrollViewDelegate> {
	BOOL _shouldBlockPaging;
	LAPageControl* _pageControl;
	UIScrollView* _scrollView;
}
@property(assign, nonatomic) BOOL shouldBlockPaging;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(retain, nonatomic) LAPageControl* pageControl;
-(void).cxx_destruct;
-(void)resetContentOffset;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(CGRect)currentBounds;
-(void)layoutSubviews;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)pageAtIndex:(unsigned)index;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface AgeCheckService : NSObject {
}
+(void)checkUserAgeWithDocomoWithOpenIdRedirectUrl:(id)openIdRedirectUrl standardAge:(int)age verifier:(id)verifier completionBlock:(id)block;
+(void)retrieveOpenIdAuthUrlWithDocomoWithCompletionBlock:(id)completionBlock;
+(void)checkUserAgeWithCarrier:(int)carrier sessionId:(id)anId verifier:(id)verifier standardAge:(int)age completionBlock:(id)block;
+(void)retrieveRequestToken:(int)token completionBlock:(id)block;
@end

__attribute__((visibility("hidden"),objc_exception))
@interface TException : NSException {
}
+(id)exceptionWithName:(id)name reason:(id)reason error:(id)error;
+(id)exceptionWithName:(id)name reason:(id)reason;
+(id)exceptionWithName:(id)name;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface LANoAlbumsView : UIView <UIScrollViewDelegate> {
	UIScrollView* _scrollView;
	UIImageView* _imageView;
	UILabel* _label;
	UIImageView* _labelBgImageView;
}
@property(retain, nonatomic) UIImageView* labelBgImageView;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) UIScrollView* scrollView;
-(void).cxx_destruct;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)resetContentOffset;
-(void)layoutSubviews;
-(id)getPhotoViewerTitleWithTitleText:(id)titleText indexLabel:(id)label;
-(id)getAlbumInfoLabel:(id)label;
-(id)getAlbumTitleView:(unsigned)view;
-(void)setupViewWithImageName:(id)imageName text:(id)text;
-(void)setupView:(unsigned)view;
-(id)initWithFrame:(CGRect)frame atIndex:(unsigned)index;
@end

__attribute__((visibility("hidden"),objc_exception))
@interface TTransportException : TException {
}
+(id)exceptionWithReason:(id)reason;
+(id)exceptionWithReason:(id)reason error:(id)error;
@end

__attribute__((visibility("hidden")))
@interface NLEditMessageButtonBar : UIImageView {
	UIButton* leftButton;
	UIButton* rightButton;
	unsigned _editMode;
}
@property(assign, nonatomic) unsigned editMode;
@property(readonly, assign, nonatomic) UIButton* rightButton;
@property(readonly, assign, nonatomic) UIButton* leftButton;
-(void).cxx_destruct;
-(void)setRightTitle:(id)title;
-(void)setLeftTitle:(id)title;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ChangeMigrationCodeViewController : NLViewController <NLPasswordInputViewDelegate, UIGestureRecognizerDelegate> {
	unsigned _type;
	UIScrollView* _scrollView;
	NLPasswordInputView* _passwordInputView;
}
@property(retain, nonatomic) NLPasswordInputView* passwordInputView;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) unsigned type;
-(void).cxx_destruct;
-(void)didReceiveKeyboardNotification:(id)notification;
-(void)showErrorAlertView;
-(void)showSuccessAlertView;
-(id)passwordInputViewMinimumPasswordLengthErrorMessage:(id)message;
-(id)passwordInputViewPasswordMismatchErrorMessage:(id)message;
-(void)passwordInputView:(id)view didFinishInputPassword:(id)password;
-(void)passwordInputView:(id)view textFieldDidBeginEditing:(id)textField;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)didTapScrollView:(id)view;
-(void)_configurePasswordInputView;
-(void)viewDidLoad;
-(BOOL)isMigrationCodeAlreadySet;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLReachabilityMonitor : NSObject {
	BOOL _monitoring;
	Reachability* reachability;
}
@property(assign, nonatomic, getter=isMonitoring) BOOL monitoring;
@property(retain, nonatomic) Reachability* reachability;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)didReceiveApplicationWillEnterForegroundNotification:(id)didReceiveApplication;
-(void)didReceiveApplicationDidEnterBackgroundNotification:(id)didReceiveApplication;
-(BOOL)isUsingWifiNetwork;
-(BOOL)isUsingMobileNetwork;
-(void)stopMonitoring;
-(void)startMonitoring;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface ChatListViewController : NLViewController <NSFetchedResultsControllerDelegate, MFMailComposeViewControllerDelegate, FriendsPickerViewControllerDelegate, UIAlertViewDelegate, UITableViewDataSource, UITableViewDelegate> {
	NSFetchedResultsController* fetchedResultsController_;
	BOOL _haveBegunTableUpdates;
	BOOL _updateCells;
	UIView* tableFooterView;
	NLChatListCell* tmpCell;
	UINib* cellNib;
	UITableView* _tableView;
	NSMutableIndexSet* _selectedRowIndexes;
	UIBarButtonItem* _createChatButtonItem;
	UIBarButtonItem* _removeChatsButtonItem;
	UIBarButtonItem* _customEditButtonItem;
}
@property(retain, nonatomic) UIBarButtonItem* customEditButtonItem;
@property(retain, nonatomic) UIBarButtonItem* removeChatsButtonItem;
@property(retain, nonatomic) UIBarButtonItem* createChatButtonItem;
@property(retain, nonatomic) NSMutableIndexSet* selectedRowIndexes;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) UINib* cellNib;
@property(assign, nonatomic) NLChatListCell* tmpCell;
@property(readonly, assign, nonatomic) NSFetchedResultsController* fetchedResultsController;
-(void).cxx_destruct;
-(void)friendsPickerViewController:(id)controller didFinishPickingItems:(id)items;
-(void)customReloadData;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controllerWillChangeContent:(id)controller;
-(void)createChat;
-(void)toggleEditing:(id)editing;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)removeChatWithMID:(id)mid inContext:(id)context;
-(void)removeChats:(id)chats;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)updateSelectedRowIndexesInTableView:(id)tableView;
-(void)pushMessageViewControllerWithChat:(id)chat animated:(BOOL)animated;
-(void)configureCell:(id)cell withChat:(id)chat;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onAddPressed:(id)pressed;
-(id)noteView:(int)view;
-(void)setupTableOverlay;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)updateNavigationButtonItems;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)showDeleteConfirmationAlertView:(id)view;
-(void)removeBarButtonTapped:(id)tapped;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface SettingsViewController : NLSettingsTableViewController <UIActionSheetDelegate, UIAlertViewDelegate> {
	BOOL hasNewNotices;
	BOOL hasNewStickerPresents;
	BOOL hasNewStickersOnShop;
}
@property(assign, nonatomic) BOOL hasNewStickersOnShop;
@property(assign, nonatomic) BOOL hasNewStickerPresents;
@property(assign, nonatomic) BOOL hasNewNotices;
-(void)pushProfileViewController;
-(void)updateBadge;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(void)presentViewController:(id)controller forIndexPath:(id)indexPath rowKey:(int)key;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)showNewBadgeOnCell:(id)cell;
-(void)setVoiceCallsOn:(BOOL)on;
-(void)setVoiceCallsOn:(BOOL)on forCell:(id)cell;
-(void)setNotificationsOn:(BOOL)on;
-(void)setNotificationsOn:(BOOL)on forCell:(id)cell;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)newRowKeySections;
-(void)configureRowInfoMapping:(id)mapping;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface ContactService : NSObject {
}
+(void)sendInvitationSmsWithPhoneNumberList:(id)phoneNumberList completionBlock:(id)block errorBlock:(id)block3;
+(void)setDisplayNameContactWithMID:(id)mid value:(id)value completionBlock:(id)block errorBlock:(id)block4;
+(void)hideContactWithMID:(id)mid value:(BOOL)value completionBlock:(id)block;
+(void)hideContactWithMID:(id)mid value:(BOOL)value forBulkEditing:(BOOL)bulkEditing completionBlock:(id)block;
+(void)markFavoriteContactWithMID:(id)mid value:(BOOL)value completionBlock:(id)block;
+(void)invalidateUserTicketCompletionBlock:(id)block errorBlock:(id)block2;
+(void)findContactByUserTicket:(id)ticket completionBlock:(id)block errorBlock:(id)block3;
+(void)generateUserTicket:(id)ticket completionBlock:(id)block errorBlock:(id)block3;
+(void)invite:(id)invite viaEmail:(id)email completionBlock:(id)block errorBlock:(id)block4;
+(void)getBlockedRecommendationMIDs:(id)mids errorBlock:(id)block;
+(void)getRecommendedContactMIDs:(id)mids errorBlock:(id)block;
+(void)deleteContactWithMID:(id)mid value:(BOOL)value completionBlock:(id)block errorBlock:(id)block4;
+(void)unblockContactRecommendedWithMID:(id)mid completionBlock:(id)block errorBlock:(id)block3;
+(void)unblockContactRecommendedWithMID:(id)mid completionBlock:(id)block;
+(void)blockContactRecommendedWithMID:(id)mid completionBlock:(id)block errorBlock:(id)block3;
+(void)unblockContactWithMID:(id)mid completionBlock:(id)block errorBlock:(id)block3;
+(void)unblockContactWithMID:(id)mid completionBlock:(id)block;
+(void)blockContactWithMID:(id)mid completionBlock:(id)block errorBlock:(id)block3;
+(void)blockContactWithMID:(id)mid forBulkEditing:(BOOL)bulkEditing completionBlock:(id)block errorBlock:(id)block4;
+(void)getBlockedContactMIDs:(id)mids errorBlock:(id)block;
+(void)getContactsWithMIDs:(id)mids completionBlock:(id)block errorBlock:(id)block3;
+(void)getContactRegistrationByMID:(id)mid whenFinished:(id)finished errorBlock:(id)block;
+(void)getContactByMID:(id)mid whenFinished:(id)finished errorBlock:(id)block;
+(void)getAllContactMIDs:(id)mids errorBlock:(id)block;
+(void)findContactByUserID:(id)anId completionBlock:(id)block errorBlock:(id)block3;
+(void)syncLocalContacts:(id)contacts completionBlock:(id)block errorBlock:(id)block3;
+(void)findAndAddContactsByMID:(id)mid contactType:(int)type completionBlock:(id)block errorBlock:(id)block4;
+(void)findAndAddContactsByMID:(id)mid completionBlock:(id)block errorBlock:(id)block3;
+(void)findAndAddContactsByUserID:(id)anId completionBlock:(id)block errorBlock:(id)block3;
@end

__attribute__((visibility("hidden")))
@interface MBActivityCellContainer : MBCompositeCellView {
	MBActivity* mActivity;
	BOOL mFlagOfRedraw;
}
@property(readonly, assign, nonatomic) MBActivity* activity;
+(id)createWithCellViews:(id)cellViews postViewType:(int)type activity:(id)activity;
-(void).cxx_destruct;
-(void)reLayout;
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(id)initWithCellViews:(id)cellViews postViewType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface ProfileEditViewController : NLViewController <UIActionSheetDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, UITableViewDataSource, UITableViewDelegate, UIAlertViewDelegate, LGImagePickerDelegate> {
	BOOL hasCamera;
	BOOL hasProfileImage;
	LineProfileThumbnailSource* _imageSource;
	UIButton* updatePhoneBtn;
	UIButton* homeBtn;
	UISwitch* searchIDSwitch;
	UIView* tableHeader;
	UIButton* photo;
	UILabel* phoneNumber;
	UILabel* phoneNumberLabel;
	UISwitch* publishNewPhotoSwitch;
	UIView* _footerViewForNewPhoto;
	UIView* _footerViewForPublicId;
}
@property(retain, nonatomic) UIView* footerViewForNewPhoto;
@property(retain, nonatomic) UIView* footerViewForPublicId;
@property(retain, nonatomic) UISwitch* publishNewPhotoSwitch;
@property(retain, nonatomic) UILabel* phoneNumberLabel;
@property(retain, nonatomic) UILabel* phoneNumber;
@property(retain, nonatomic) UIButton* photo;
@property(retain, nonatomic) UIView* tableHeader;
+(id)blankToNotSet:(id)notSet;
+(id)currentViewController;
-(void).cxx_destruct;
-(void)loadPhotoWithImageSource:(id)imageSource;
-(void)setPhotoWithImage:(id)image;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)makeLongFooterFor:(unsigned)aFor;
-(void)makeLongFooterViews;
-(void)openDeleteAccountActionView;
-(id)makeDeleteAccountView;
-(void)lgImagePickerControllerDidCancel:(id)lgImagePickerController;
-(void)lgImagePickerController:(id)controller didFinishPickingMediaWithInfos:(id)infos;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)openHome;
-(void)updatePhone;
-(void)changedSearchability:(id)searchability;
-(void)editPhoto:(id)photo;
-(void)setPublishingProfilePhotoToTimeLine:(id)timeLine;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)onNotification:(id)notification;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)closeView;
@end

__attribute__((visibility("hidden")))
@interface ProfileService : NSObject {
}
+(void)updateUserIDSearchability:(BOOL)searchability UISwitch:(id)aSwitch;
+(void)updateUserIDSearchability:(BOOL)searchability completionBlock:(id)block errorBlock:(id)block3;
+(void)getProfileInBackground:(id)background errorBlock:(id)block;
+(void)registerUserID:(id)anId withCompletionBlock:(id)completionBlock errorBlock:(id)block;
+(void)isUserIDAvailable:(id)available withCompletionBlock:(id)completionBlock errorBlock:(id)block;
+(void)setValue:(id)value forProfileAttribute:(int)profileAttribute completionBlock:(id)block errorBlock:(id)block4;
+(void)updateRegion:(id)region withCompletionBlock:(id)completionBlock errorBlock:(id)block;
+(void)updateProfileName:(id)name withCompletionBlock:(id)completionBlock errorBlock:(id)block;
+(void)updateProfile:(id)profile withCompletionBlock:(id)completionBlock errorBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface LAOBSNotification : NSObject {
	NSMutableSet* mObservers;
}
+(id)defaultCenter;
-(void).cxx_destruct;
-(void)sendOBSNotification:(id)notification type:(int)type;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ChatService : NSObject {
}
+(void)receivedContent:(id)content in:(id)anIn completionBlock:(id)block errorBlock:(id)block4;
+(void)reportSpammerWithSpammerMid:(id)spammerMid spammerReasons:(id)reasons spamMessageIds:(id)ids completionBlock:(id)block errorBlock:(id)block5;
+(void)removeAllMessages:(id)messages completionBlock:(id)block errorBlock:(id)block3;
+(void)deletedUpToMessage:(id)message in:(id)anIn completionBlock:(id)block errorBlock:(id)block4;
+(id)readUpToMessage:(id)message in:(id)anIn completionBlock:(id)block;
+(void)sendMessage:(id)message usingRequestSequence:(int)sequence whenFinished:(id)finished errorBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface ProfileImageView : LineImageSourceView {
	id _userData;
}
@property(retain, nonatomic) id userData;
-(void).cxx_destruct;
-(id)defaultImage;
-(void)init_;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MemberListScrollView : UIView <UITableViewDataSource, UITableViewDelegate> {
	UITableView* tableview;
	UIView* clickTargetView;
	UIImageView* backgroundView_;
	UIImageView* arrowView_;
	NSArray* members;
}
-(void).cxx_destruct;
-(BOOL)render;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)setMembers:(id)members;
-(BOOL)hasMembers;
-(void)layoutSubviews;
-(void)dealloc;
-(void)initSubviews;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface GroupTableViewCell : LineTableViewCell {
	UILabel* nameLabel_;
	UILabel* membersLabel_;
	UIButton* numMembersButton_;
	ProfileImageView* groupImageView_;
	TalkGroupObject* groupObject_;
	UIImageView* newIconView_;
	BOOL enableHighlightingNewGroup;
}
@property(assign, nonatomic) BOOL groupImageTouchEnabled;
@property(assign, nonatomic) BOOL enableHighlightingNewGroup;
@property(retain, nonatomic) TalkGroupObject* groupObject;
-(void).cxx_destruct;
-(BOOL)render;
-(void)addProfileImageGestureRecognizer:(id)recognizer;
-(void)layoutSubviews;
-(void)layoutMembersCountButton;
-(void)layoutLabels;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)init_;
@end

__attribute__((visibility("hidden")))
@interface MBMergeExtData : NSObject <NSCoding> {
	BOOL _useLike;
	BOOL _useComment;
	NSString* _mergeId;
	int _activityType;
	unsigned _mergeEndType;
	unsigned _mergeUserCount;
	unsigned _mergeItemCount;
	NSString* _body;
	NSArray* _textInfos;
	MBUrl* _url;
}
@property(assign, nonatomic) BOOL useComment;
@property(assign, nonatomic) BOOL useLike;
@property(retain, nonatomic) MBUrl* url;
@property(retain, nonatomic) NSArray* textInfos;
@property(retain, nonatomic) NSString* body;
@property(assign, nonatomic) unsigned mergeItemCount;
@property(assign, nonatomic) unsigned mergeUserCount;
@property(assign, nonatomic) unsigned mergeEndType;
@property(assign, nonatomic) int activityType;
@property(retain, nonatomic) NSString* mergeId;
+(id)mergeExtDatasWithData:(id)data;
-(void).cxx_destruct;
-(id)initWithData:(id)data;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface UserIDTextField : UITextField {
}
-(void)drawPlaceholderInRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface AddFriendByUserIDViewController : NLViewController <UITextFieldDelegate> {
	UIView* _myIdBackView;
	UILabel* _myIdCaptionLabel;
	UILabel* _myIdLabel;
	UIImageView* _myIdRegisterImageView;
	UITextField* searchTextField_;
	UIButton* searchButton_;
	UIButton* clearButton_;
	UIActivityIndicatorView* indicator_;
	UILabel* nowSearchingLabel_;
	UIImageView* profileImageBackground_;
	ProfileImageView* profileImageView_;
	UILabel* userNameLabel_;
	UIButton* addFriendOrTalkButton;
	UILabel* alreadyYourFriendLabel_;
	UILabel* itsMeLabel_;
	UILabel* noResultsLabel_;
	NSString* userID_;
	NSString* userMID_;
	BOOL isAlreadyFriend;
	LineContact* contact_;
}
@property(retain, nonatomic) LineContact* contact;
@property(retain, nonatomic) NSString* userMID;
@property(retain, nonatomic) NSString* userID;
-(void).cxx_destruct;
-(void)startToTalkWithUser;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)updateClearButtonShow:(BOOL)show;
-(void)clearSearchText:(id)text;
-(void)searchTextChanged:(id)changed;
-(void)onAddButtonPressed:(id)pressed;
-(void)onSearchPressed:(id)pressed;
-(void)setButtonToTalk:(BOOL)talk;
-(void)doSearch;
-(void)goSetUserId;
-(void)updateUserIdView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface GroupDetailViewController : NLViewController <NSFetchedResultsControllerDelegate, UIActionSheetDelegate, UIAlertViewDelegate, FriendsPickerViewControllerDelegate, NLProfilePopupViewerDelegate> {
	UIView* topButtonsView_;
	UIImageView* groupCoverView_;
	ProfileImageView* groupImageView_;
	UIImageView* newIconView_;
	UIImageView* memberIconView_;
	UILabel* memberStringLabel_;
	UILabel* memberCountLabel_;
	TalkGroupObject* group_;
	NSMutableArray* checkedUserList;
	ImageDetailViewController* imageViewController_;
	NSFetchedResultsController* fetchedResultsController_;
	NSFetchedResultsController* pendingResultController_;
	int _sectionCnt;
	NSString* _prevPictureStatus;
	BOOL isBeingInvited_;
	BOOL isProcessingJoinOrDecline_;
	BOOL isGoingToOpenTalk_;
	NSString* loadingGroupId_;
	NSTimer* closeTimer_;
	BOOL isKickedOutAlready_;
	BOOL shouldCloseSelf_;
	FriendsPickerViewController* membersViewController_;
	BOOL reconstructUIdelayed_;
	UITableView* _tableView;
	NLProfilePopupViewer* profilePopupViewer;
	NSFetchedResultsController* groupResultsController;
}
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(retain, nonatomic) TalkGroupObject* group;
@property(retain, nonatomic) UITableView* tableView;
@property(readonly, assign, nonatomic) NSFetchedResultsController* pendingResultController;
@property(readonly, assign, nonatomic) NSFetchedResultsController* fetchedResultsController;
@property(readonly, assign, nonatomic) NSFetchedResultsController* groupResultsController;
-(void).cxx_destruct;
-(void)renderGroupTopInfoView;
-(void)openHitokoto:(id)hitokoto;
-(void)hitokotoTouchUpInside:(id)inside;
-(void)groupProfileImageViewTapped:(id)tapped;
-(void)onKickedOut:(id)anOut;
-(void)receivedGroupNoteMessage:(id)message;
-(void)friendsPickerViewControllerDidCancel:(id)friendsPickerViewController;
-(void)friendsPickerViewController:(id)controller didFinishPickingItems:(id)items;
-(void)validationGroupInfo;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controllerWillChangeContent:(id)controller;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)configureCell:(id)cell withObject:(id)object;
-(id)tableDataByIndexPath:(id)path withController:(id)controller;
-(id)fetchRequestControllerInSection:(int)section;
-(bool)isPendingGroup:(int)group;
-(BOOL)isInviteCellSection:(int)section;
-(int)sectionCount;
-(void)friendCellHitokotoTouchUpInside:(id)inside;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)showDetailPopupWithDataObject:(id)dataObject;
-(void)showDetailPopupForMyProfile;
-(id)pendingUserForMID:(id)mid;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)leaveGroup;
-(void)confirmLeaveGroup;
-(void)showCafeMain:(id)main;
-(void)chat:(id)chat;
-(void)join:(id)join;
-(void)deny:(id)deny;
-(void)failedToDeclineOrJoin;
-(void)onHasJoined:(id)joined;
-(void)onHasDenied:(id)denied;
-(void)onHasCanceled:(id)canceled;
-(void)onGroupCreated:(id)created;
-(void)onDoneGetGroup:(id)group;
-(void)reconstructUI;
-(void)close:(BOOL)close;
-(void)close;
-(void)removeNotificationObserver;
-(void)addMember;
-(void)groupEditButtonPressed:(id)pressed;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)setInvitedGroupMid:(id)mid;
-(void)updateGroupInfoViewData;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)updateNewMarkFromCafe;
-(void)viewDidDisappear:(BOOL)view;
-(void)onCloseTimer:(id)timer;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)makeGroupTopInfoView;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LAThumbnailsCell : UITableViewCell {
	id<LAThumbnailsCellDelegate> _delegate;
	float _offsetSizeForLandscape;
	NSMutableArray* _buttons;
}
@property(retain, nonatomic) NSMutableArray* buttons;
@property(assign, nonatomic) float offsetSizeForLandscape;
@property(assign, nonatomic) id<LAThumbnailsCellDelegate> delegate;
+(id)thumbnailCellWithObject:(id)object atRow:(unsigned)row type:(unsigned)type orientation:(int)orientation tableView:(id)view;
+(int)numberOfThumbnailsPerCell:(int)thumbnailsPerCell;
+(int)numberOfThumbnailsPerCell;
-(void).cxx_destruct;
-(void)didTapThumbnailCheckButton:(id)button;
-(void)didTapThumbnailButton:(id)button;
-(void)setObject:(id)object atRow:(unsigned)row type:(unsigned)type orientation:(int)orientation;
-(unsigned)indexOfFirstThumbnail;
-(float)leftMargin:(int)margin;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier orientation:(int)orientation;
@end

__attribute__((visibility("hidden")))
@interface ImageMapSceneObject : NSObject {
	NSString* _name;
	NSArray* _draws;
	NSArray* _listeners;
}
@property(readonly, retain, nonatomic) NSArray* listeners;
@property(readonly, retain, nonatomic) NSArray* draws;
@property(readonly, retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)description;
-(id)initWithName:(id)name draws:(id)draws listeners:(id)listeners;
@end

__attribute__((visibility("hidden")))
@interface NLKeyboardTabViewDataSource : NSObject <LineStickerPackageManagerDelegate, LineSticonPackageManagerDelegate> {
	unsigned _type;
	id<LinePackageManagerDelegate> _delegate;
}
@property(assign, nonatomic) id<LinePackageManagerDelegate> delegate;
-(void)sticonPackage:(id)package movedFromIndex:(unsigned)index toIndex:(unsigned)index3;
-(void)sticonPackageRemoved:(id)removed;
-(void)sticonPackageChanged:(id)changed;
-(void)sticonPackageAddedToKeyboard:(id)keyboard;
-(void)stickerPackage:(id)package movedFromIndex:(unsigned)index toIndex:(unsigned)index3;
-(void)stickerPackageRemoved:(id)removed;
-(void)stickerPackageChanged:(id)changed;
-(void)stickerPackageAddedToKeyboard:(id)keyboard;
-(id)activePackageIDs;
-(id)packageWithID:(long long)anId;
-(void)dealloc;
-(id)initForType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineCellActivityContentViewMap : MBActivityContentViewMap {
}
-(void)callBackAddCellView:(int)view contentView:(id)view2;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineCell : MBTableViewActionCell {
	MBActivityCellContainer* mActivityCellContainer;
	UIImageView* mBackImageView;
	UIButton* mHideButton;
	MBActivityContentViewMap* mActivityContentViewMap;
}
@property(readonly, assign, nonatomic) MBActivityCellContainer* activityCellContainer;
+(UIEdgeInsets)marginWithCellView:(Class)cellView;
+(UIEdgeInsets)margin;
+(id)timelineHeightForTableView:(id)tableView data:(id)data postViewType:(int)type;
+(id)timelineCellForTableView:(id)tableView data:(id)data postViewType:(int)type;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(BOOL)changeHideButton;
-(void)showHideButton:(BOOL)button;
-(float)height;
-(void)reLayout:(id)layout reload:(BOOL)reload;
-(void)resetLayout;
-(void)redraw;
-(void)layoutCellContainer;
-(void)setData:(id)data;
-(void)initHideButton;
-(void)initBackImageView;
-(id)initWithActivity:(id)activity postViewType:(int)type reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLCallLayoutUtil : NSObject {
}
+(float)windowHeight;
+(CGRect)windowRect;
+(BOOL)isScreenSmallerThan4Inchi;
+(float)navigationHeight;
@end

__attribute__((visibility("hidden")))
@interface GroupService : NSObject {
}
+(void)declineInvitationToGroup:(id)group completionBlock:(id)block errorBlock:(id)block3;
+(void)acceptInvitationToGroup:(id)group completionBlock:(id)block errorBlock:(id)block3;
+(void)leaveGroup:(id)group completionBlock:(id)block errorBlock:(id)block3;
+(void)kickout:(id)kickout fromGroup:(id)group completionBlock:(id)block errorBlock:(id)block4;
+(void)cancelInvitationFor:(id)aFor toGroup:(id)group completionBlock:(id)block errorBlock:(id)block4;
+(void)invite:(id)invite toGroup:(id)group completionBlock:(id)block errorBlock:(id)block4;
+(void)getGroups:(id)groups completionBlock:(id)block;
+(void)getGroup:(id)group completionBlock:(id)block errorBlock:(id)block3;
+(void)getGroupWithoutMembers:(id)members completionBlock:(id)block errorBlock:(id)block3;
+(void)updateGroup:(id)group completionBlock:(id)block errorBlock:(id)block3;
+(void)createGroupWithName:(id)name contactMIDs:(id)mids completionBlock:(id)block errorBlock:(id)block4;
+(void)getInvitedGroupMIDs:(id)mids errorBlock:(id)block;
+(void)getJoinedGroupMIDs:(id)mids errorBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface RoomService : NSObject {
}
+(void)leaveRoom:(id)room whenFinished:(id)finished errorBlock:(id)block;
+(void)invite:(id)invite to:(id)to whenFinished:(id)finished errorBlock:(id)block;
+(void)createRoom:(id)room whenFinished:(id)finished errorBlock:(id)block;
+(void)getRoom:(id)room whenFinished:(id)finished errorBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface NLImagePickerController : UIImagePickerController {
}
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface NLGCDTimer : NSObject {
	dispatch_source_s* _timerSource;
	BOOL _repeats;
	BOOL _timerSuspending;
	id _eventBlock;
	double _tolerance;
	double _interval;
}
@property(assign, nonatomic) BOOL timerSuspending;
@property(assign, nonatomic) double interval;
@property(assign, nonatomic) double tolerance;
@property(assign, nonatomic) BOOL repeats;
@property(copy, nonatomic) id eventBlock;
+(id)timerWithTimeInterval:(double)timeInterval repeats:(BOOL)repeats tolerance:(double)tolerance eventBlock:(id)block;
-(void).cxx_destruct;
-(void)invalidate;
-(void)resume;
-(void)rescheduleWithTimeInterval:(double)timeInterval;
-(void)suspend;
-(void)schedule;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ServerSettingsService : NSObject {
}
+(void)updateServerSettingsWithAttribute:(int)attribute settings:(id)settings completionBlock:(id)block;
+(void)getCustomModeSettingsUsingCompletionBlock:(id)block;
+(void)getAccountManagementSettingsUsingCompletionBlock:(id)block;
+(void)getLineAndSNSAccountSettingsUsingCompletionBlock:(id)block;
+(void)getLineAccountSettingsUsingCompletionBlock:(id)block;
+(void)getServerSettingsWithOptions:(int)options usingCompletionBlock:(id)block;
+(void)setNotificationsEnabled:(BOOL)enabled forMID:(id)mid withType:(int)type completionBlock:(id)block;
+(void)updatePushDeviceToken:(id)token;
+(void)serverSettingsWithAttribute:(int)attribute CompletionBlock:(id)block;
+(void)getServerSettingsWithCompletionBlock:(id)completionBlock;
@end

__attribute__((visibility("hidden")))
@interface LABadgeView : UIView {
	UIImageView* _imageView;
	unsigned _count;
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
@property(readonly, assign, nonatomic) unsigned count;
@property(retain, nonatomic) UIImageView* imageView;
-(void).cxx_destruct;
-(void)setBadge:(unsigned)badge animated:(BOOL)animated;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _NLToggleButton : UIButton {
}
-(void)configurateStateImages;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineMenuView : UIView {
	UIButton* mBg;
	UIView* mMenuBg;
	UIButton* mHomeButton;
	UIButton* mSettingButton;
	UIButton* mInfoButton;
	BOOL mIsAnimating;
	int mTextColor;
	int mShadowColor;
}
+(id)timelineMenuViewWithFrame:(CGRect)frame delegate:(id)delegate;
-(void).cxx_destruct;
-(BOOL)isShown;
-(void)showMenu:(BOOL)menu animated:(BOOL)animated;
-(void)hideMenuView;
-(void)relayoutSubviewsWithButton:(id)button;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
-(void)setImageViewLabelLocation:(id)location label:(id)label withParentView:(id)parentView;
@end

__attribute__((visibility("hidden")))
@interface NLCDVFileCommand : CDVFile {
}
-(void)truncateFile:(id)file withDict:(id)dict;
-(void)getFreeDiskSpace:(id)space withDict:(id)dict;
-(void)testDirectoryExists:(id)exists withDict:(id)dict;
-(void)testFileExists:(id)exists withDict:(id)dict;
-(void)write:(id)write withDict:(id)dict;
-(void)readAsDataURL:(id)url withDict:(id)dict;
-(void)readFile:(id)file withDict:(id)dict;
-(void)readEntries:(id)entries withDict:(id)dict;
-(void)getFileMetadata:(id)metadata withDict:(id)dict;
-(void)doCopyMove:(id)move withDict:(id)dict isCopy:(BOOL)copy;
-(void)moveTo:(id)to withDict:(id)dict;
-(void)copyTo:(id)to withDict:(id)dict;
-(void)remove:(id)remove withDict:(id)dict;
-(void)removeRecursively:(id)recursively withDict:(id)dict;
-(void)getMetadata:(id)metadata withDict:(id)dict;
-(void)getParent:(id)parent withDict:(id)dict;
-(void)getFile:(id)file withDict:(id)dict;
-(void)getDirectory:(id)directory withDict:(id)dict;
-(void)resolveLocalFileSystemURI:(id)uri withDict:(id)dict;
-(void)requestFileSystem:(id)system withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface NJSImageEndDiskCache : NSObject {
	NSString* mCacheDir;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedDiskCache;
-(void).cxx_destruct;
-(id)imageForRemoteURL:(id)remoteURL scope:(id)scope;
-(id)dataForRemoteURL:(id)remoteURL scope:(id)scope;
-(BOOL)setImage:(id)image forRemoteURL:(id)remoteURL scope:(id)scope;
-(BOOL)setData:(id)data forRemoteURL:(id)remoteURL scope:(id)scope;
-(void)emptyImageEndMaxNum:(long)num;
-(void)emptyScope:(id)scope;
-(BOOL)addScope:(id)scope;
-(id)pathForRemoteURL:(id)remoteURL scope:(id)scope;
-(id)pathForScope:(id)scope;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
-(void)emptyCacheThreadWithParam:(id)param;
-(void)removeItemOverMaxNum:(id)num maxNum:(int)num2 timeLimit:(long)limit;
-(void)createLineAlbumImageCacheFolder;
@end

__attribute__((visibility("hidden")))
@interface LGLineAlbumTooltipView : UIView {
	BOOL _isManyPhotosCanShareToLineAlbum;
	id<LGLineAlbumTooltipViewDelegate> _delegate;
	UIImageView* _bgImageView;
	UIImageView* _bgPointedImageView;
	UIButton* _closeButton;
	UIButton* _albumSendButton;
	UILabel* _tooltipLabel;
}
@property(retain, nonatomic) UILabel* tooltipLabel;
@property(retain, nonatomic) UIButton* albumSendButton;
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) UIImageView* bgPointedImageView;
@property(retain, nonatomic) UIImageView* bgImageView;
@property(assign, nonatomic) id<LGLineAlbumTooltipViewDelegate> delegate;
@property(assign, nonatomic) BOOL isManyPhotosCanShareToLineAlbum;
-(void).cxx_destruct;
-(void)gallerySendToAlbum;
-(void)removeFromSuperviewAnimated;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame isManyPhotosCanShareToLineAlbum:(BOOL)lineAlbum maxSelectCount:(unsigned)count delegate:(id)delegate;
-(id)initWithFrame:(CGRect)frame albumButton:(BOOL)button delegate:(id)delegate;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface NLTextView : UITextView <UIGestureRecognizerDelegate> {
	UITapGestureRecognizer* _myTapGestureRecognizer;
	BOOL _actionDisabled;
	BOOL _isDeleting;
	BOOL _pasting;
	NSMutableArray* _textMetadataArray;
	NSMutableDictionary* _defaultTypingAttributes;
	NSRegularExpression* _sticonRegularExpression;
	unsigned _shiftFromLocation;
	unsigned _textLengthBeforeChange;
	unsigned _metaDataRawLengthTotal;
}
@property(readonly, assign, nonatomic) NSRegularExpression* sticonRegularExpression;
@property(readonly, assign, nonatomic) NSMutableArray* textMetadataArray;
@property(readonly, assign, nonatomic) unsigned metaDataRawLengthTotal;
@property(assign, nonatomic) unsigned textLengthBeforeChange;
@property(assign, nonatomic) unsigned shiftFromLocation;
@property(readonly, assign, nonatomic, getter=isPasting) BOOL pasting;
@property(assign, nonatomic) BOOL isDeleting;
@property(readonly, assign, nonatomic) NSMutableDictionary* defaultTypingAttributes;
@property(assign, nonatomic, getter=isActionDisabled) BOOL actionDisabled;
-(void).cxx_destruct;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)onTap:(id)tap;
-(void)addGestureRecognizer:(id)recognizer;
-(void)removeDictationResultPlaceholder:(id)placeholder willInsertResult:(BOOL)result;
-(id)insertDictationResultPlaceholder;
-(void)didReceiveUndoRedoNotification:(id)notification;
-(void)refreshTextMetadataRange;
-(void)resetToDefaultAttributesWithTextMetadataArray:(id)textMetadataArray;
-(void)resetToDefaultAttributesWithRange:(NSRange)range;
-(id)allTextMetadataArray;
-(void)removeAllTextMetadata;
-(void)removeTextMetadata:(id)metadata;
-(void)insertTextMetadata:(id)metadata;
-(void)shiftTextMetadataRangeFrom:(unsigned)from delta:(int)delta;
-(id)_textMetadataArrayFromInternalArrayWithTextRange:(NSRange)textRange effectiveRange:(NSRange*)range;
-(id)_textMetadataArrayFromAttributedStringWithTextRange:(NSRange)textRange effectiveRange:(NSRange*)range;
-(id)textMetadataArrayWithTextRange:(NSRange)textRange effectiveRange:(NSRange*)range;
-(void)setContentSize:(CGSize)size;
-(void)setContentInset:(UIEdgeInsets)inset;
-(void)setContentOffset:(CGPoint)offset;
-(void)insertWhiteSpaceIfNeededWithRange:(NSRange)range;
-(void)shiftTextMetadataRangesIfNeeded;
-(unsigned)rawStringLengthInRange:(NSRange)range;
-(unsigned)rawStringLengthInSelectedRange;
-(void)enumerateTextMetadataInRange:(NSRange)range options:(unsigned)options effectiveStringBlock:(id)block textMetadataBlock:(id)block4;
-(void)deleteBackward;
-(void)updateTypingAttributes;
-(void)replaceCharactersInRange:(NSRange)range withAttributedString:(id)attributedString deleteMetadata:(id)metadata insertMetadata:(id)metadata4;
-(void)replaceCharactersInRange:(NSRange)range withString:(id)string;
-(void)replaceCharactersInRange:(NSRange)range withAttributedString:(id)attributedString;
-(void)insertAttributedString:(id)string;
-(BOOL)respondsToAttributedText;
-(id)attributedText;
-(void)paste:(id)paste;
-(void)cut:(id)cut;
-(void)copy:(id)copy;
-(void)copyInRange:(NSRange)range effectiveRange:(NSRange*)range2 textMetadataArray:(id*)array;
-(void)select:(id)select;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(id)myTapGestureRecognizer;
-(void)dealloc;
-(void)_initialize;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame textContainer:(id)container;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LocationSearchViewController : NLViewController <MapOverlayViewDelegate, UIGestureRecognizerDelegate, UISearchBarDelegate, MKMapViewDelegate, MKReverseGeocoderDelegate> {
	MKLocalSearch* _localSearch;
	MKReverseGeocoder* reverseGeocoder;
	double mLastTimeOnCurrentLocation;
	XXStruct_zYrK5D mLastCenterCoodinate;
	UIView* mCoverView;
	id _networkActivityIndicatorHandle;
	BOOL mDoneAddressRequest;
	BOOL mCancelShowMenuOnce;
	BOOL mIsPanning;
	BOOL mIsMoving;
	MKMapView* mapView;
	UISearchBar* searchBar;
	id<FileAttachmentDelegate> fileAttachmentDelegate;
	MapOverlayView* mOverlayView;
	UIImageView* _searchBarShadow;
	UIButton* _currentLocationButton;
	int _currentLocationActionRetryCount;
	NSTimer* _reverseGeocodingTimer;
}
@property(retain, nonatomic) NSTimer* reverseGeocodingTimer;
@property(assign, nonatomic) int currentLocationActionRetryCount;
@property(assign, nonatomic) UIButton* currentLocationButton;
@property(retain, nonatomic) MKReverseGeocoder* reverseGeocoder;
@property(assign, nonatomic) MapOverlayView* overlayView;
@property(assign, nonatomic) MKMapView* mapView;
@property(assign, nonatomic) UIImageView* searchBarShadow;
@property(assign, nonatomic) UISearchBar* searchBar;
@property(assign, nonatomic) id<FileAttachmentDelegate> fileAttachmentDelegate;
-(void).cxx_destruct;
-(void)retryCurrentLocationActionIfNeeded;
-(void)currentLocationAction:(id)action;
-(void)reverseGeocoder:(id)geocoder didFindPlacemark:(id)placemark;
-(void)reverseGeocoder:(id)geocoder didFailWithError:(id)error;
-(void)onTimer:(id)timer;
-(void)mapView:(id)view didDeselectAnnotationView:(id)view2;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(id)pictureForView:(id)view;
-(void)cancelAction:(id)action;
-(void)localSearchCompletion:(id)completion error:(id)error;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)dealloc;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)pan:(id)pan;
-(XXStruct_zYrK5D)centerCoordinate;
-(void)mapOverlayViewSendMenuTapped;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)onTap:(id)tap;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)showOverlayView;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LocationSearchViewToolbar : UIToolbar {
}
-(void)drawRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface LGProgressHUD : UIView {
	int mode;
	int animationType;
	SEL methodForExecution;
	id targetForExecution;
	id objectForExecution;
	BOOL useAnimation;
	float yOffset;
	float xOffset;
	float width;
	float height;
	float margin;
	BOOL dimBackground;
	BOOL taskInProgress;
	float graceTime;
	float minShowTime;
	NSTimer* graceTimer;
	NSTimer* minShowTimer;
	NSDate* showStarted;
	UIView* indicator;
	UILabel* label;
	UILabel* detailsLabel;
	float progress;
	id<LGProgressHUDDelegate> delegate;
	NSString* labelText;
	NSString* detailsLabelText;
	float opacity;
	UIFont* labelFont;
	UIFont* detailsLabelFont;
	BOOL isFinished;
	BOOL removeFromSuperViewOnHide;
	UIView* customView;
	CGAffineTransform rotationTransform;
}
@property(retain) NSDate* showStarted;
@property(retain) NSTimer* minShowTimer;
@property(retain) NSTimer* graceTimer;
@property(assign) float height;
@property(assign) float width;
@property(retain) UIView* indicator;
@property(assign) float progress;
@property(retain) UIFont* detailsLabelFont;
@property(retain) UIFont* labelFont;
@property(assign) BOOL removeFromSuperViewOnHide;
@property(assign) BOOL taskInProgress;
@property(assign) float minShowTime;
@property(assign) float graceTime;
@property(assign) BOOL dimBackground;
@property(assign) float margin;
@property(assign) float yOffset;
@property(assign) float xOffset;
@property(assign) float opacity;
@property(copy) NSString* detailsLabelText;
@property(copy) NSString* labelText;
@property(assign) id<LGProgressHUDDelegate> delegate;
@property(assign) int animationType;
@property(assign) int mode;
@property(retain) UIView* customView;
+(BOOL)hideHUDForView:(id)view animated:(BOOL)animated;
+(id)showHUDAddedTo:(id)to animated:(BOOL)animated;
-(void).cxx_destruct;
-(void)setTransformForCurrentOrientation:(BOOL)currentOrientation;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)drawRect:(CGRect)rect;
-(void)hideUsingAnimation:(BOOL)animation;
-(void)showUsingAnimation:(BOOL)animation;
-(void)cleanUp;
-(void)done;
-(void)animationFinished:(id)finished finished:(BOOL)finished2 context:(void*)context;
-(void)launchExecution;
-(void)showWhileExecuting:(SEL)executing onTarget:(id)target withObject:(id)object animated:(BOOL)animated;
-(void)handleMinShowTimer:(id)timer;
-(void)handleGraceTimer:(id)timer;
-(void)hideDelayed:(id)delayed;
-(void)hide:(BOOL)hide afterDelay:(double)delay;
-(void)hide:(BOOL)hide;
-(void)show:(BOOL)show;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithView:(id)view;
-(id)initWithWindow:(id)window;
-(void)updateIndicators;
-(void)updateProgress;
-(void)updateDetailsLabelText:(id)text;
-(void)updateLabelText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface LGRoundProgressView : UIView {
	float _progress;
}
@property(assign, nonatomic) float progress;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBPostKindLabel : UILabel {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLProfileImageFacade : NSObject {
}
+(void)loadProfileImageForMID:(id)mid pictureStatus:(id)status picturePath:(id)path viewSize:(CGSize)size contentMode:(int)mode completionHandler:(id)handler;
+(void)loadProfileImageForMID:(id)mid inManagedContext:(id)managedContext defaultStatus:(BOOL)status viewSize:(CGSize)size contentMode:(int)mode completionHandler:(id)handler;
+(void)setProfileImageOfView:(id)view forMID:(id)mid pictureStatus:(id)status picturePath:(id)path;
+(void)setProfileImageOfView:(id)view forMID:(id)mid inManagedContext:(id)managedContext defaultStatus:(BOOL)status;
+(id)newProfileImageViewWithFrame:(CGRect)frame contentMode:(int)mode defaultImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface ShowcaseObject : _ShowcaseObject {
}
@end

__attribute__((visibility("hidden")))
@interface AddFriendListViewCell : UITableViewCell {
	UIView* _topSeparator;
	UIView* _bottomSeparator;
	UIView* _selectedBackground;
	UIImageView* _checkImageView;
	ProfileImageView* _profileImageView;
	UILabel* _nameLabel;
	UIImageView* _buddyIcon;
	HitokotoBalloonView* _hitokotoView;
	BOOL _selectionEnabled;
	BOOL _buddyIconEnabled;
	BOOL _hitokotoEnabled;
	short _userType;
}
@property(assign, nonatomic) short userType;
@property(assign, nonatomic) BOOL hitokotoEnabled;
@property(assign, nonatomic) BOOL buddyIconEnabled;
@property(assign, nonatomic) BOOL selectionEnabled;
-(void).cxx_destruct;
-(BOOL)render;
-(void)configureForContact:(id)contact userType:(short)type;
-(void)configureForManagedUser:(id)managedUser;
-(void)setTopSeparatorHidden:(BOOL)hidden;
-(void)changeSelectedBackgroundView:(BOOL)view;
-(void)changeSelectedDisabledEffect:(BOOL)effect;
-(void)changeSelectedCheckmark:(BOOL)checkmark;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setHitokoto:(id)hitokoto;
-(void)setThumbnailSource:(id)source;
-(void)setName:(id)name;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface UserIDViewController : ProfileTextEditViewController {
	BOOL canSubmitUserID;
	NSRegularExpression* regex;
}
-(void).cxx_destruct;
-(void)buttonTapped;
-(void)textChanged;
-(unsigned)maxLength;
-(unsigned)minLength;
-(BOOL)checkRegex;
-(id)inputName;
-(void)setCustomUIForSettingUserId;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)changeToChangeID;
-(void)changeToCheckID;
@end

__attribute__((visibility("hidden")))
@interface DisplayNameViewController : ProfileTextEditViewController {
}
-(void)buttonTapped;
-(void)inputTextChanged;
-(unsigned)maxLength;
-(unsigned)minLength;
-(id)inputName;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MBSticker : MBBaseActivityContent {
	int mStickerId;
	long long mPackageId;
	unsigned mPackageVersion;
	CGSize mSize;
	UIImage* mSticker;
	BOOL mLoading;
	BOOL _isAnimationSticker;
	BOOL _hasAnimation;
	BOOL _hasSound;
	BOOL _isSticon;
}
@property(readonly, assign, nonatomic) BOOL isSticon;
@property(readonly, assign, nonatomic) BOOL hasSound;
@property(readonly, assign, nonatomic) BOOL hasAnimation;
@property(readonly, assign, nonatomic) BOOL isAnimationSticker;
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, assign, nonatomic) UIImage* sticker;
@property(readonly, assign, nonatomic) unsigned packageVersion;
@property(readonly, assign, nonatomic) long long packageId;
@property(readonly, assign, nonatomic) int stickerId;
-(void).cxx_destruct;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(id)initWithExternalInfo:(id)externalInfo;
-(id)initWithStickerInfo:(id)stickerInfo;
-(void)setup:(id)setup;
-(id)stickerInfo;
-(float)height;
-(id)loadSticker;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)requestSticker;
-(void)setSticker:(id)sticker;
-(void)didLoadSticker:(id)sticker;
@end

__attribute__((visibility("hidden")))
@interface ProfileTextEditViewController : NLViewController {
	UILabel* feedbackLabel;
	UILabel* characterCountLabel;
	UITextField* inputText;
	UIImageView* inputTextBackImageView;
	UIButton* button;
	NSString* normalizedInput;
}
@property(retain, nonatomic) NSString* normalizedInput;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UIImageView* inputTextBackImageView;
@property(retain, nonatomic) UITextField* inputText;
@property(retain, nonatomic) UILabel* characterCountLabel;
@property(retain, nonatomic) UILabel* feedbackLabel;
-(void).cxx_destruct;
-(BOOL)checkMaxLength;
-(BOOL)checkMinLength;
-(void)textChanged;
-(unsigned)indexOfFirstUnnormalizedCharacter;
-(void)normalizeInput;
-(id)inputName;
-(void)inputTextChanged;
-(unsigned)maxLength;
-(unsigned)minLength;
-(void)buttonTapped;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
@end

__attribute__((visibility("hidden")))
@interface ContactDAO : NSObject {
}
+(void)contact:(id)contact recommendedInContext:(id)context;
+(void)user:(id)user unregisteredTime:(long long)time inContext:(id)context;
+(void)registerAddressBookuser:(id)bookuser luid:(id)luid status:(int)status inContext:(id)context notificationContext:(id)context5;
+(void)registerSNSUser:(id)user snsType:(int)type snsId:(id)anId inContext:(id)context;
+(void)user:(id)user registeredWithRegistrationType:(int)registrationType luid:(id)luid status:(int)status inContext:(id)context notificationContext:(id)context6;
+(void)user:(id)user unblockContactInContext:(id)context;
+(void)user:(id)user addContactInContext:(id)context;
+(void)user:(id)user addedYouAsContactInContext:(id)context;
+(void)profileOfUser:(id)user updatedAttribute:(int)attribute inContext:(id)context;
+(void)updateBuddyAttributesWithMid:(id)mid;
+(id)getAndMakeFriendListWithMidList:(id)midList inManagedObjectContext:(id)managedObjectContext;
+(id)getAndMakeFriendList:(id)list inManagedObjectContext:(id)managedObjectContext;
@end

__attribute__((visibility("hidden")))
@interface NLTextMetadata : NSObject {
	NSString* _displayText;
	int _displayTextLength;
	NSRange _range;
}
@property(readonly, assign, nonatomic) int displayTextLength;
@property(retain, nonatomic) NSString* rawString;
@property(retain, nonatomic) NSString* displayText;
@property(assign, nonatomic) NSRange range;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface GroupDAO : NSObject {
}
+(void)insertSystemMessage:(id)message group:(id)group at:(long long)at action:(int)action;
+(void)users:(id)users kickedOutOfGroup:(id)group by:(id)by at:(long long)at inContext:(id)context;
+(void)user:(id)user acceptedInvitationToGroup:(id)group at:(long long)at inContext:(id)context notificationContext:(id)context5;
+(void)user:(id)user leftGroup:(id)group at:(long long)at inContext:(id)context;
+(void)users:(id)users noLongerInvitedToGroup:(id)group by:(id)by at:(long long)at inContext:(id)context;
+(void)users:(id)users invitedToGroup:(id)group by:(id)by at:(long long)at inContext:(id)context insertSystemMessage:(id)message;
+(void)users:(id)users invitedToGroup:(id)group by:(id)by at:(long long)at inContext:(id)context notificationContext:(id)context6;
+(void)groupObject:(id)object name:(id)name updatedBy:(id)by updatedAttribute:(int)attribute at:(long long)at inContext:(id)context;
+(void)group:(id)group updatedBy:(id)by updatedAttribute:(int)attribute at:(long long)at inContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface ChatDAO : NSObject {
}
+(BOOL)checkExistMid:(id)mid type:(int)type inContext:(id)context;
+(void)user:(id)user leftRoom:(id)room at:(long long)at inContext:(id)context;
+(void)users:(id)users invitedIntoRoom:(id)room by:(id)by at:(long long)at inContext:(id)context;
+(void)readMessagesSent:(id)sent inContext:(id)context;
+(void)messagesRead:(id)read by:(id)by inContext:(id)context;
+(void)receivedMessage:(id)message inContext:(id)context notificationContext:(id)context3;
+(void)deleteMessages:(id)messages inChat:(id)chat;
+(void)deleteChat:(id)chat inContext:(id)context;
+(void)deleteChat:(id)chat;
+(void)insertContactMessageUserWithInfo:(id)info messageID:(id)anId inContext:(id)context;
+(BOOL)updateOnAirStatus:(BOOL)status mid:(id)mid buddyInfo:(id)info inContext:(id)context;
+(void)checkOnAirStatus:(id)status;
+(void)updateMessageReadCount:(id)count inContext:(id)context;
+(void)insertLeaveRoomMessage:(id)message room:(id)room at:(long long)at inContext:(id)context;
+(void)insertInvitedRoomMessage:(id)message by:(id)by room:(id)room at:(long long)at inContext:(id)context;
+(void)insertSystemMessage:(id)message chat:(id)chat at:(long long)at action:(int)action;
+(void)insertMessage:(id)message inChat:(id)chat notificationContext:(id)context;
+(void)makeChatAndSaveMessage:(id)message inContext:(id)context notificationContext:(id)context3;
+(void)makeToManyChatAndSaveMessage:(id)manyChatAndSaveMessage inContext:(id)context notificationContext:(id)context3;
+(void)makeGroupChatAndSaveMessage:(id)message inContext:(id)context notificationContext:(id)context3;
+(void)getAndMakeRoom:(id)room inContext:(id)context whenFinished:(id)finished;
@end

__attribute__((visibility("hidden")))
@interface TalkUtil : NSObject {
}
+(void)swizzleSelector:(SEL)selector ofClass:(Class)aClass withSelector:(SEL)selector3;
+(BOOL)checkAvailableSpace:(unsigned long long)space;
+(id)unitStringFromBytes:(double)bytes withFlags:(unsigned char)flags;
+(void)globalResignFirstResponderRec:(id)rec;
+(void)globalResignFirstResponder;
+(void)globallyDismissKeyboard;
+(BOOL)isPortraitOrientation;
+(BOOL)isRetinaDisplay;
+(BOOL)isReachable;
+(BOOL)isKR;
+(BOOL)isJP;
+(id)currentLanguageCode;
+(void)makeAPhoneCall:(id)call;
+(id)makeContentImageBubble:(id)bubble maxSize:(CGSize)size minSize:(CGSize)size3 mask:(id)mask supportsRetinalDisplay:(BOOL)display;
+(id)resizeImage:(id)image to:(CGSize)to;
+(CGSize)resizeTo:(CGSize)to source:(CGSize)source;
+(CGSize)resizeTo:(CGSize)to source:(CGSize)source withMinimumSize:(CGSize)minimumSize;
+(BOOL)isNaverAccount;
+(BOOL)isEmpty:(id)empty;
+(BOOL)isNotEmpty:(id)empty;
@end

__attribute__((visibility("hidden")))
@interface RecommendationViewController : NLViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, NSFetchedResultsControllerDelegate, NLProfilePopupViewerDelegate, BuddyTableViewCellDelegate, NLMultiInvitationCellDelegate, MFMessageComposeViewControllerDelegate, SWTableViewCellDelegate> {
	UITableView* tableView_;
	RecommendAddFriendPanelView* addFriendPanelView_;
	UIView* noteView_;
	NSMutableArray* promotedBuddyList_;
	NSArray* newlyReleasedBuddiesNotSorted_;
	NSFetchedResultsController* recommendedUsersFetchedResultsController_;
	NSArray* usersToInvite_;
	BOOL needReloadTable_;
	LineTableViewSectionHeader* headerViewForRecommendedFriends_;
	MoreDetailSectionHeader* headerViewForPromotedBuddy_;
	MoreDetailSectionHeader* headerViewForUsersToInvite_;
	NLProfilePopupViewer* profilePopupViewer;
	NSArray* _invitedGroups;
	NSString* _recommendUserMid;
}
@property(retain, nonatomic) NSString* recommendUserMid;
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(readonly, assign, nonatomic) UIView* noteView;
@property(readonly, assign, nonatomic) NSArray* invitedGroups;
@property(readonly, assign, nonatomic) NSArray* recommendedUsers;
@property(readonly, assign, nonatomic) NSFetchedResultsController* recommendedUsersFetchedResultsController;
-(void).cxx_destruct;
-(void)swippableTableViewCell:(id)cell didTriggerRightUtilityButtonWithIndex:(int)index;
-(void)onFriendsManagementMenu:(id)menu;
-(void)multiInvitationCellInviteButtonTapped:(id)tapped;
-(void)buddyAddButtonWasPressed:(id)pressed;
-(void)checkInvalidateUser;
-(void)addTargetInviteesHeader;
-(void)addTargetPromotionHeader;
-(void)reloadServerSetting;
-(void)updatePromotedBuddyNewMark;
-(void)updatePromotedBuddyList;
-(void)removeBuddy:(id)buddy reloadData:(id)data;
-(void)pushViewController:(id)controller;
-(void)onInviteFromKakaotalkButtonPressed:(id)kakaotalkButtonPressed;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)openInvitationEmailView;
-(void)openInvitationSmsView;
-(void)onInviteFromContactsButtonPressed:(id)contactsButtonPressed;
-(void)onBackButtonPressed:(id)pressed;
-(void)onFriendImageTapped:(id)tapped;
-(void)onAddGroupPressed:(id)pressed;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(void)updateUsersToInviteSectionHeaderTitle;
-(void)updatePromotedBuddySectionHeaderTitle;
-(void)updateRecommendedFriendsSectionHeaderTitle;
-(id)headerViewForUsersToInvite;
-(id)headerViewForPromotedBuddy;
-(id)headerViewForFriends;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controllerWillChangeContent:(id)controller;
-(id)recommendedUserObjectForMID:(id)mid;
-(id)fetchObjects:(id)objects;
-(void)clearNoteViewWithAnimated:(BOOL)animated;
-(void)showNoteViewIfNeededWithAnimated:(BOOL)animated;
-(void)checkRecommendationFriendView;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)showDetailPopupWithDataObject:(id)dataObject;
-(void)showGeneratedQRCodeView;
-(void)showInvitationView;
-(void)dislike:(id)dislike;
-(void)hide:(id)hide;
-(void)declineInvitationWithGroup:(id)group;
-(void)updateObjectViewState;
-(BOOL)hasObjectsAtSection:(int)section;
-(id)objectsAtSection:(int)section;
-(BOOL)hasSomeEntities;
-(BOOL)hasNoEntity;
-(void)setupTableFooterView;
-(void)setupTableHeaderView;
-(void)setupTableView;
-(void)setupAddFriendPanel;
-(void)updateBadge;
-(void)updateBadgeWithDelay;
-(void)uninitialize;
-(void)commonInitialize;
-(void)initInviteesAndReloadTable;
-(void)showDetailPopupFromOutside;
-(void)showDetailPopupForMid:(id)mid;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LGMovieMenuBarView : UIView {
	LGMoviePlayerViewController* _delegate;
	UIButton* _playButton;
	UIButton* _selectButton;
}
@property(retain, nonatomic) UIButton* selectButton;
@property(retain, nonatomic) UIButton* playButton;
@property(assign, nonatomic) __weak LGMoviePlayerViewController* delegate;
-(void).cxx_destruct;
-(id)bundleName;
-(void)setPlayButtonStateIsPaying:(BOOL)paying;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLCallHistoryTalbeViewCell : NLCallCommonTableViewCell {
	NSArray* mInfoArray;
	UILabel* _labelName;
	UILabel* _labelCount;
	UILabel* _labelTime;
	NLCallImageView* _imageViewProfile;
	UIImageView* _imageViewInOut;
	UIImageView* _imageViewPhoneIcon;
	UILabel* _labelCallStatus;
	NLCallSenderButton* _buttonCall;
	UIView* _viewBottomLine;
	UIView* _viewVerticalLine;
	unsigned _totalCount;
}
@property(assign, nonatomic) unsigned totalCount;
@property(assign, nonatomic) UIView* viewVerticalLine;
@property(assign, nonatomic) UIView* viewBottomLine;
@property(assign, nonatomic) NLCallSenderButton* buttonCall;
@property(assign, nonatomic) UILabel* labelCallStatus;
@property(assign, nonatomic) UIImageView* imageViewPhoneIcon;
@property(assign, nonatomic) UIImageView* imageViewInOut;
@property(assign, nonatomic) NLCallImageView* imageViewProfile;
@property(assign, nonatomic) UILabel* labelTime;
@property(assign, nonatomic) UILabel* labelCount;
@property(assign, nonatomic) UILabel* labelName;
+(id)viewFromNib;
-(void).cxx_destruct;
-(void)updateInfoAreaWithUserInfo:(id)userInfo withArrayCount:(unsigned)arrayCount withDelegate:(id)delegate;
-(void)setUserInfo:(id)info withDelegate:(id)delegate;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface MBDebugManager : NSObject {
	UIView* mDebugView;
	UITextView* mDebugText;
	NSMutableString* mMessage;
	NSDateFormatter* mDateFormatter;
}
+(void)saveTimelineHighlightIntervalToUserDefaults:(int)userDefaults;
+(int)timelineHighlightIntervalFromUserDefaults;
+(float)thumbnailQualityFromUserDefaults;
+(void)saveThumbnailQualityToUserDefaults:(float)userDefaults;
+(id)thumbnailSizeFromUserDefaults;
+(void)saveThumbnailSizeToUserDefaults:(id)userDefaults;
+(BOOL)snapMovieSoundOnOff;
+(void)saveSnapMovieSoundOnOff;
+(void)saveTimelineLoadPostCountToUserDefaults:(int)userDefaults;
+(int)timelineLoadPostCountFromUserDefaults;
+(void)saveMyhomeLoadPostCountToUserDefaults:(int)userDefaults;
+(int)myhomeLoadPostCountFromUserDefaults;
+(void)hideDebugView;
+(void)setDebugMessage:(id)message;
+(BOOL)settingDebugModeFromUserDefaults;
+(void)clearHomeCache;
+(void)saveSettingDebugModeToUserDefaults:(BOOL)userDefaults;
+(id)debugManager;
-(void).cxx_destruct;
-(void)setDebugMessage:(id)message;
-(id)init;
-(void)hideDebugView;
-(void)showDebugView;
-(void)setText;
-(void)initViews;
-(void)initializeDirectory;
-(id)cacheDirPath;
-(void)writeToTextFile;
-(void)dealloc;
-(id)timestamp;
@end

__attribute__((visibility("hidden")))
@interface NLFixedSizeInputView : UIView {
}
-(void)resizeToOrientation:(int)orientation;
-(unsigned)autoresizingMask;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface GroupInputTextField : UITextField {
}
-(CGRect)editingRectForBounds:(CGRect)bounds;
-(CGRect)textRectForBounds:(CGRect)bounds;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface TalkUserObject : _TalkUserObject {
	BOOL statusUpdated;
	BOOL hadNewPosts;
	BOOL isFreePhoneCallable;
	NSString* phoneNumberToDial;
}
@property(assign, nonatomic) BOOL isFreePhoneCallable;
@property(retain, nonatomic) NSString* phoneNumberToDial;
@property(retain, nonatomic) NSString* picturePath;
@property(assign, nonatomic) BOOL statusUpdated;
@property(assign, nonatomic) BOOL hadNewPosts;
+(id)chineseSortableName:(id)name;
+(id)koreanSortableName:(id)name;
+(id)japaneseSortableName:(id)name;
+(id)sortableName:(id)name name:(id)name2;
+(id)sortableNameByCurrrentLanguageWithName:(id)name;
+(id)insertNonameUserWithMID:(id)mid inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithContact:(id)contact inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithBuddySearchResult:(id)buddySearchResult inManagedObjectContext:(id)managedObjectContext;
+(id)displayNameOfUserWithMID:(id)mid inContext:(id)context;
+(id)usersWithMids:(id)mids asFaults:(BOOL)faults inManagedObjectContext:(id)managedObjectContext;
+(id)usersWithMids:(id)mids inManagedObjectContext:(id)managedObjectContext;
+(id)userWithObjectID:(id)objectID inManagedObjectContext:(id)managedObjectContext;
+(id)userWithKey:(id)key inManagedObjectContext:(id)managedObjectContext;
+(id)usersByAscendingFavoriteOrder:(BOOL)order inContext:(id)context;
+(int)numberOfFavoriteUsersInContext:(id)context;
+(long long)maxOfFavoriteOrderInContext:(id)context;
+(unsigned)numberOfFriendsInContext:(id)context;
+(id)addressBookUserInManagedObjectContext:(id)managedObjectContext;
+(id)predicateForOfficialAccount;
+(id)predicateForRecommendarationInvalidateUser;
+(id)predicateForInvalidateUser;
+(id)predicateForFavoriteUsers;
+(id)predicateForNotViewedRecommendedUsers;
+(id)predicateForNoFriendsWithAndPrediciate:(id)andPrediciate;
+(id)predicateForNoFriends;
+(id)predicateForFriendsWithAndPredicate:(id)andPredicate;
+(id)predicateForFriends;
-(void).cxx_destruct;
-(id)description;
-(id)memberId;
-(void)updateSortableName;
-(void)setSortableName:(id)name;
-(void)setCustomName:(id)name;
-(void)setAddressbookName:(id)name;
-(void)setName:(id)name;
-(void)setStatusNewFriends;
-(BOOL)isFavorite;
-(BOOL)isPublicBuddy;
-(BOOL)isMediaBuddy;
-(BOOL)isLocalBuddy;
-(BOOL)isAvaialableOnAirBuddy;
-(BOOL)isLineAtBuddy;
-(BOOL)isLineBuddy;
-(BOOL)isBuddy;
-(void)updateBuddyAttributes;
-(void)synchronization;
-(BOOL)isSyncing;
-(id)updateWithContact:(id)contact;
-(id)displayUserNameNoAddressBook;
-(id)displayUserName;
-(void)updateCapabilities:(id)capabilities;
-(void)updateBuddyAttributesWithBuddyDetail:(id)buddyDetail;
@end

__attribute__((visibility("hidden")))
@interface TalkGroupObject : _TalkGroupObject {
	BOOL hasNewPost;
}
@property(readonly, assign, nonatomic) NSString* picturePath;
@property(assign, nonatomic) BOOL hasNewPost;
+(id)insertOrUpdateGroupWithGroup:(id)group inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithGroup:(id)group inManagedObjectContext:(id)managedObjectContext;
+(id)insertUnkonwnGroupWithGroupMid:(id)groupMid inManagedObjectContext:(id)managedObjectContext;
+(id)groupWithObjectID:(id)objectID inManagedObjectContext:(id)managedObjectContext;
+(id)groupWithMID:(id)mid inManagedObjectContext:(id)managedObjectContext;
+(id)predicateForInvalidateGroup;
+(id)predicateForNotViewedInvitedGroups;
+(id)predicateForInvitedGroupsWithAndPrediciate:(id)andPrediciate;
+(id)predicateForInvitedGroups;
+(id)predicateForGroups;
+(id)predicateForEnableWithAndPredicate:(id)andPredicate;
+(id)predicateForEnableGroups;
-(id)groupId;
-(id)updateWithoutGroupMembers:(id)members;
-(id)updateWithGroup:(id)group;
-(void)updateAttributesWithGroup:(id)group;
-(void)updateAttributesWithGroup:(id)group groupHasMembersAndInvitees:(BOOL)invitees;
@end

__attribute__((visibility("hidden")))
@interface TalkChatObject : _TalkChatObject {
	BOOL _changedSection;
	BOOL isAvailableOnAir;
	BOOL isOnAir;
	BOOL hasNewNote;
	NSArray* sharingImagesTemporary;
	LineLocation* sharingLocationTemporary;
	NSURL* sharingAudioTemporary;
	NSDictionary* sharingContactTemporary;
	NLSharableObject* sharingOBSTemporary;
	NSArray* sharingMessagesTemporary;
	unsigned albumNewState;
}
@property(assign, nonatomic) unsigned albumNewState;
@property(assign, nonatomic) BOOL hasNewNote;
@property(readonly, assign, nonatomic) BOOL isOnAir;
@property(readonly, assign, nonatomic) BOOL isAvailableOnAir;
@property(retain, nonatomic) NSArray* sharingMessagesTemporary;
@property(retain, nonatomic) NLSharableObject* sharingOBSTemporary;
@property(retain, nonatomic) NSDictionary* sharingContactTemporary;
@property(retain, nonatomic) NSURL* sharingAudioTemporary;
@property(retain, nonatomic) LineLocation* sharingLocationTemporary;
@property(retain, nonatomic) NSArray* sharingImagesTemporary;
+(void)removeAllLastMessagesInManagedObjectContext:(id)managedObjectContext;
+(id)lastMessageTextFromMessage:(id)message;
+(id)insertOrUpdateRoom:(id)room inManagedObjectContext:(id)managedObjectContext;
+(id)insertUnknownChatWithMid:(id)mid type:(int)type inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithRoom:(id)room inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithMid:(id)mid type:(int)type members:(id)members lastUpdated:(id)updated alert:(BOOL)alert inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithUser:(id)user inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithGroup:(id)group inManagedObjectContext:(id)managedObjectContext;
+(id)skinnedChatsInManagedObjectContext:(id)managedObjectContext;
+(id)chatAutocreatedWithMID:(id)mid type:(int)type inManagedObjectContext:(id)managedObjectContext;
+(id)chatWithObjectID:(id)objectID inManagedObjectContext:(id)managedObjectContext;
+(id)chatWithMID:(id)mid inManagedObjectContext:(id)managedObjectContext;
+(id)chatsInManagedObjectContext:(id)managedObjectContext;
+(void)configureDates;
+(void)configLocale;
+(BOOL)forwardMessagesWithSharableObjects:(id)sharableObjects chatObject:(id)object;
+(void)notifyServerForAllUnsyncedChatsInContext:(id)context;
+(void)sendMessageWithChatObject:(id)chatObject text:(id)text requestSequence:(int)sequence image:(id)image thumbnail:(id)thumbnail location:(id)location latitude:(id)latitude sticker:(XXStruct_PILIWD)sticker contentType:(unsigned)type metadata:(id)metadata;
+(id)sendMessageWithThumbnail:(id)thumbnail chatObject:(id)object;
-(void).cxx_destruct;
-(id)description;
-(void)resetData;
-(void)refreshAlert;
-(id)deleteAndSave;
-(void)prepareForDeletion;
-(void)updateLastReceivedMessageID:(id)anId;
-(void)adjustTotalUnreadBy:(int)by;
-(void)incrementChatMessagesUnread;
-(void)setEnable:(id)enable;
-(void)setUnread:(id)unread;
-(BOOL)isEmptyRoom;
-(int)midType;
-(id)titleWithMemberCount:(BOOL)memberCount;
-(id)lastUpdatedString;
-(id)addMember:(id)member;
-(void)updateIfNecessaryWithMessage:(id)message;
-(id)messagesWithPredicate:(id)predicate includingDeletedMessages:(BOOL)messages ascending:(BOOL)ascending;
-(id)fetchRequestForMessagesWithPredicate:(id)predicate includingDeletedMessages:(BOOL)messages ascending:(BOOL)ascending;
-(id)messages;
-(id)updateWithRoom:(id)room;
-(id)initInsertedIntoManagedObjectContext:(id)context;
-(id)nameOfLogFile;
-(id)dataForLogFile;
-(id)chatLogForReport;
-(id)chatLog;
-(void)syncAppBadgeOnContextSave;
-(void)syncChatAsReadUpToMessageWithID:(id)anId;
-(void)markChatAsReadAndNotifyServer;
-(BOOL)canMarkChatAsReadRemotely;
-(BOOL)canMarkChatAsReadLocally;
-(void)markChatAsReadLocally;
-(void)notifyServerAsHavingReadUpToMessageWithID:(id)anId;
-(unsigned)fetchReceivedMessageCountAfterMessageWithID:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface CountryViewController : NLTableViewController <UIAlertViewDelegate> {
	NSArray* countryInitials;
	NSDictionary* countryList;
	id<CountryViewChangeDelegate> _changeDelegate;
	id<CountryViewSelectDelegate> _selectDelegate;
	NSArray* _selectedCountry;
}
@property(retain, nonatomic) NSArray* selectedCountry;
@property(assign, nonatomic) id<CountryViewSelectDelegate> selectDelegate;
@property(assign, nonatomic) id<CountryViewChangeDelegate> changeDelegate;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)selected;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)toggleCheckmarkedCell:(id)cell;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithStyle:(int)style;
-(void)initData;
@end

__attribute__((visibility("hidden")))
@interface NLEditMessageTitleBar : UIImageView {
	UILabel* titleLabel;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface RoomMembersViewController : NLTableViewController <NLProfilePopupViewerDelegate> {
	BOOL shouldOpenInviteView;
	NSArray* _members;
	MessageViewController* _messageViewController;
	int _toType;
	NLProfilePopupViewer* _profilePopupViewer;
}
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(assign, nonatomic) int toType;
@property(retain, nonatomic) MessageViewController* messageViewController;
@property(retain, nonatomic) NSArray* members;
-(void).cxx_destruct;
-(void)openHitokoto:(id)hitokoto;
-(void)hitokotoTouchUpInside:(id)inside;
-(void)inviteAction:(id)action;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)profilePopupViewer:(id)viewer willSelectButtonItem:(id)item;
-(void)showUserPopupWithDataObject:(id)dataObject;
-(void)showDetailPopupForMyProfile;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface NLCDVDebugConsoleCommand : CDVDebugConsole {
}
-(void)log:(id)log withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface NLCallPurchaseHistoryViewController : NLCallSettingCommonTableSubViewController {
	NSArray* _puchaseDate;
	BOOL _is3MonthsMode;
	NSMutableArray* _arrayHistory;
	unsigned _currentPageIndex;
	NSDate* _baseDate;
	unsigned _currentStartPeriod;
	UIButton* _moreButton;
	UILabel* _noDataLabel;
	CGRect _headerRect;
}
@property(retain, nonatomic) UILabel* noDataLabel;
@property(retain, nonatomic) UIButton* moreButton;
@property(assign, nonatomic) CGRect headerRect;
@property(assign, nonatomic) unsigned currentStartPeriod;
@property(assign, nonatomic) BOOL is3MonthsMode;
@property(retain, nonatomic) NSDate* baseDate;
@property(assign, nonatomic) unsigned currentPageIndex;
@property(retain, nonatomic) NSMutableArray* arrayHistory;
-(void).cxx_destruct;
-(void)moreButtonAction:(id)action;
-(void)setTableFooter;
-(void)setTableHeaderWithTitle:(id)title;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)refreshMoreTitle;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(BOOL)isOveredMaxDateRange;
-(void)purchaseList;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ContentUpload : NSObject {
}
+(id)uploadURLSSLFromID:(id)anId;
+(id)uploadChannelURLWithPicturePath:(id)picturePath;
+(id)uploadURLFromID:(id)anId;
+(id)idFor:(id)aFor type:(int)type;
@end

__attribute__((visibility("hidden")))
@interface ContentUploadService : NSObject {
}
+(id)uploadURLForPicturePath:(id)picturePath;
+(int)profileTypeForPicturePath:(id)picturePath;
+(id)uploadURLSSLFromID:(id)anId type:(int)type;
+(id)uploadChannelURLWithPicurePath:(id)picurePath;
+(id)uploadURLFromID:(id)anId type:(int)type;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineTopNewButton : UIView {
	UIButton* mNewsButton;
	BOOL mIsHidden;
}
+(id)timelineTopButtonWithOrigin:(CGPoint)origin;
-(void).cxx_destruct;
-(void)setAnimateHidden:(BOOL)hidden;
-(void)setNoAnimateHidden:(BOOL)hidden;
-(void)setNewsButtonHiddenByScrollViewYPos:(float)pos isHiddenTopSlideView:(BOOL)view;
-(void)setNewsButton;
-(void)showNewCheck;
-(void)hideNewNotification;
-(void)showNewNotification;
-(void)renderTheme;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumManager : NSObject {
	NSOperationQueue* mFileFetchQueue;
}
+(id)makeRecentPhotoArray:(id)array;
+(id)findCurrentAlbum:(id)album albumID:(id)anId;
+(id)sharedMananger;
-(void).cxx_destruct;
-(void)updateAlbumUploading:(BOOL)uploading albumID:(id)anId groupID:(id)anId3 block:(id)block;
-(void)updateAlbumTitle:(id)title albumID:(id)anId groupID:(id)anId3;
-(void)updateAlbumInfo:(id)info albumID:(id)anId groupID:(id)anId3;
-(void)removePhoto:(id)photo albumID:(id)anId groupID:(id)anId3;
-(void)removeAlbum:(id)album groupID:(id)anId;
-(int)addAlbum:(id)album groupID:(id)anId;
-(int)mergePhotos:(id)photos info:(id)info remove:(id)remove albumID:(id)anId groupID:(id)anId5;
-(int)mergeAlbums:(id)albums remove:(id)remove groupID:(id)anId;
-(void)fullFetchPhotos:(id)photos info:(id)info albumID:(id)anId groupID:(id)anId4;
-(void)fullFetchAlbums:(id)albums groupID:(id)anId;
-(void)hasPhotoList:(id)list groupID:(id)anId block:(id)block;
-(void)hasAlbumList:(id)list block:(id)block;
-(id)fetchAlbumNameWithAlbumID:(id)albumID groupID:(id)anId;
-(id)fetchAlbumNameWithGroupID:(id)groupID;
-(void)fetchAlbumWithAlbumID:(id)albumID groupId:(id)anId block:(id)block;
-(void)fetchAlbumListWithGroupID:(id)groupID block:(id)block;
-(void)flushAlbumEndForKey:(id)key groupID:(id)anId;
-(void)flushAlbumListForKey:(id)key;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LAErrorMessageView : LAMessageView {
}
+(id)errorMessageView:(CGRect)view withError:(id)error actionBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface BlockingFriendsViewController : NLViewController <UITableViewDelegate, UITableViewDataSource, NSFetchedResultsControllerDelegate, UIActionSheetDelegate> {
	UITableView* tableView_;
	NSFetchedResultsController* fetchedResultsController_;
	UIView* loadingView_;
	UILabel* _messageLabel;
}
@property(retain, nonatomic) UILabel* messageLabel;
@property(readonly, assign, nonatomic) NSFetchedResultsController* fetchedResultsController;
@property(readonly, assign, nonatomic) unsigned blockingCount;
-(void).cxx_destruct;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)onEditPressed:(id)pressed;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(id)createInfoHeaderView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)fetchedObjects;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)reloadView;
-(void)reloadEmptyNotice;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface SkinSettingViewController : NLViewController <UITableViewDelegate, UITableViewDataSource, UINavigationControllerDelegate, UIImagePickerControllerDelegate, FileAttachmentDelegate, LGImagePickerDelegate> {
	UITableView* tableView_;
	NSString* chatMID;
	NSDictionary* imageInfo;
}
@property(retain, nonatomic) NSDictionary* imageInfo;
@property(retain, nonatomic) NSString* chatMID;
+(void)clearUserSkinAndLineSkinSettingForAllChatsWithBlock:(id)block;
+(void)clearLineSkinSettingForAllChatsWithBlock:(id)block;
-(void).cxx_destruct;
-(void)saveDefaultSkinImage:(id)image;
-(BOOL)saveSkinImage:(id)image withFileName:(id)fileName;
-(void)saveChatRoomSkinImage:(id)image withURL:(id)url;
-(void)attachImage:(id)image withPicker:(id)picker withUrl:(id)url;
-(void)attachImage:(id)image;
-(void)attachLocation:(id)location;
-(void)lgImagePickerControllerDidCancel:(id)lgImagePickerController;
-(void)lgImagePickerController:(id)controller didFinishPickingMediaWithInfos:(id)infos;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)setRefreshSkinImageOfChatRoom;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)sectionForCurrentSection:(int)currentSection;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)deselectRowEffectWithAnimated:(BOOL)animated;
-(void)onClosePressed:(id)pressed;
-(void)takePhoto;
-(void)choosePhotoFromLibrary;
-(BOOL)isCameraRollAvailable;
-(BOOL)canUserPickPhotosFromPhotoLibrary;
-(BOOL)isPhotoLibraryAvailable;
-(BOOL)doesCameraSupportTakingPhotos;
-(BOOL)isCameraAvalilable;
-(BOOL)doesCameraSupportMediaType:(id)type onSourceType:(int)type2;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface ImageDetailViewController : NLViewController <UIScrollViewDelegate, UIActionSheetDelegate> {
	NSNumberFormatter* _numberFormatter;
	NSString* _totalLength;
	LineImageSource* _imageSource;
	NSObject* _imageSourceDownloadHandle;
	BOOL _isClosing;
	int viewMode;
	UIScrollView* scrollView;
	UIImageView* imageView;
	id<FileAttachmentDelegate> fileAttachmentDelegate;
	ProgressView* _progressView;
	UIActivityIndicatorView* _spinner;
	TalkMessageObject* messageObj;
}
@property(assign, nonatomic) BOOL isClosing;
@property(retain, nonatomic) TalkMessageObject* messageObj;
@property(assign, nonatomic) id<FileAttachmentDelegate> fileAttachmentDelegate;
@property(retain, nonatomic) ProgressView* progressView;
@property(retain, nonatomic) UIActivityIndicatorView* spinner;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) int viewMode;
-(void).cxx_destruct;
-(void)downloadEnded:(id)ended;
-(void)downloadProgressed:(float)progressed dataLength:(long long)length totalLength:(long long)length3;
-(void)onDoubleTapped:(id)tapped;
-(void)onSingleTapped:(id)tapped;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)onSavePressed:(id)pressed;
-(void)onClosePressed:(id)pressed;
-(void)onConfirmModeSavePressed:(id)pressed;
-(void)onSendPressed:(id)pressed;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)setThumbnailSource:(id)source;
-(void)setImageSource:(id)source;
-(void)clearImage;
-(void)setImage:(id)image;
-(void)__dettached__setImage:(id)image;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)setupProgressView;
-(void)updateNavigationItemsWhenImageNotYetSet;
-(void)updateNavigationItemsWhenImageSet;
-(void)adjustScrollViewContentInset;
-(void)fadeInControls;
-(void)fadeOutControls;
-(void)attachCurrentImage;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface SkinSelectionViewController : NLViewController <UIScrollViewDelegate, UIAlertViewDelegate, ASIHTTPRequestDelegate, ASIProgressDelegate> {
	UIScrollView* scrollView_;
	NSArray* skins_;
	int currentSkinIndex_;
	ASINetworkQueue* queue_;
	NSString* chatMID;
}
@property(readonly, assign, nonatomic) unsigned numberOfSkins;
@property(retain, nonatomic) NSString* chatMID;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)startDownloadingWithSkinIndex:(int)skinIndex;
-(BOOL)isDownloadableWallPaperSkinName:(id)name;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)layoutSkinThumbnails;
-(void)onCancelDownloadPressed:(id)pressed;
-(BOOL)isCanceledRequest:(id)request withSkinIndex:(int)skinIndex;
-(void)onDownloadPressed:(id)pressed;
-(void)onSkinPressed:(id)pressed;
-(void)selectSkinOrDownloadWithIndex:(int)index;
-(BOOL)selectSkinWithIndex:(int)index;
-(id)createSkinViewWithIndex:(int)index;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphBuddyOfficialAccountSection : SocialGraphSection {
}
-(BOOL)canBeShownInSearchResult;
-(BOOL)needsShownInSearchResult;
-(id)titleForFilteredSection;
-(id)titleForSection;
-(float)heightForHeaderWithTableView:(id)tableView;
-(id)filteredFetchRequest;
-(id)fetchRequest;
@end

__attribute__((visibility("hidden")))
@interface TalkIndicatorView : UIView {
	UIView* centeringView;
	UIActivityIndicatorView* indicator;
	UILabel* loadingLabel;
	UILabel* additionalMessageLabel;
}
@property(retain, nonatomic) UILabel* loadingLabel;
@property(retain, nonatomic) UIActivityIndicatorView* indicator;
@property(retain, nonatomic) UIView* centeringView;
@property(retain, nonatomic) UILabel* additionalMessageLabel;
+(void)resetIndicator;
+(id)currentModalIndicatorInView:(id)view;
+(id)currentIndicatorView;
+(id)showRotateableModalIndicator;
+(id)showModalIndicatorInView:(id)view;
+(id)showModalIndicator;
-(void).cxx_destruct;
-(void)layoutForCurrentParentView;
-(BOOL)isAnimating;
-(void)stopAnimating;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBCommentMoreButton : UIButton {
	UIActivityIndicatorView* mIndicator;
	UIImageView* mMoreImage;
	UILabel* mMessage;
	int mState;
}
@property(assign, nonatomic) int state;
+(float)height;
+(id)commentMoreView;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
-(void)initViews;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoViewAlbumDataSource : LAPhotoViewBaseDataSource <NJSURLImageObserving> {
	NSString* _groupId;
	NSMutableDictionary* _urlImageDict;
	LAAlbum* _curAlbum;
	LAAlbum* _prevAlbum;
	LAAlbum* _nextAlbum;
	NSArray* _albums;
	id _photoGroupLoadCompletion;
}
@property(copy, nonatomic) id photoGroupLoadCompletion;
@property(retain, nonatomic) NSArray* albums;
@property(retain, nonatomic) LAAlbum* nextAlbum;
@property(retain, nonatomic) LAAlbum* prevAlbum;
@property(retain, nonatomic) LAAlbum* curAlbum;
@property(retain, nonatomic) NSMutableDictionary* urlImageDict;
@property(retain, nonatomic) NSString* groupId;
-(void).cxx_destruct;
-(void)cleanup;
-(void)cancelLoadingImages;
-(void)cancelLoadingImageExceptIndexes:(id)indexes;
-(void)loadImageAtIndex:(int)index completion:(id)completion;
-(id)preloadKeyAtIndex:(int)index;
-(unsigned)numberOfPhotos;
-(void)cancelDownloading;
-(void)URLImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)downloadFullImageAtIndex:(int)index progressBlock:(id)block completion:(id)completion;
-(CGSize)sizeOfThumbnailAtIndex:(int)index;
-(id)thumbnailAtIndex:(int)index;
-(id)fullImageAtIndex:(int)index;
-(void)requestToUpdateObjectAtIndex:(int)index completion:(id)completion;
-(void)requestToDeleteObjectAtIndex:(int)index completion:(id)completion;
-(void)updateAlbumNotificationAPIError:(id)error albumID:(id)anId groupID:(id)anId3;
-(void)updateAlbumNotificationURLConnectedPhotoList:(id)list shouldReload:(BOOL)reload;
-(void)updateAlbumNotificationURLConnectedAlbumList:(id)list shouldReload:(BOOL)reload albumUpdated:(BOOL)updated;
-(void)setupPhotoGroup:(id)group;
-(void)didFinishLoadingCurrentPhotoGroup:(BOOL)group;
-(void)fetchAlbumIfNeeded:(id)needed completion:(id)completion;
-(void)jumpAlbumWithDirection:(unsigned)direction cacheCompletion:(id)completion fetchCompletion:(id)completion3;
-(BOOL)hasPhotoObjectInAlbum:(id)album;
-(void)cancelLoadingPhotoGroup;
-(BOOL)hasNextPhotoGroup;
-(BOOL)hasPrevPhotoGroup;
-(id)photoGroupInfo;
-(unsigned)numberOfObjectsInNextPhotoGroup;
-(unsigned)numberOfObjectsInPrevPhotoGroup;
-(id)titleOfNextPhotoGroup;
-(id)titleOfPrevPhotoGroup;
-(id)photoInfoAtIndex:(int)index;
-(unsigned)numberOfObjects;
-(void)removeObjectAtIndex:(int)index;
-(id)objectAtIndex:(int)index;
-(id)title;
-(void)dealloc;
-(id)initWithAlbum:(id)album groupId:(id)anId index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface AnnouncementService : NSObject {
}
+(void)receivedAnnouncement:(int)announcement;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedService;
-(void)loadAnnouncementsFrom:(int)from completionBlock:(id)block;
-(void)loadLastAnnouncementIndexCompletionBlock:(id)block;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface ImageMapActionObject : NSObject {
	NSString* _name;
	unsigned _type;
	NSDictionary* _params;
	ImageMapSceneObject* _nextScene;
	NSString* _message;
}
@property(assign, nonatomic) NSString* message;
@property(assign, nonatomic) ImageMapSceneObject* nextScene;
@property(readonly, retain, nonatomic) NSDictionary* params;
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)linkURL;
-(id)description;
-(id)initWithName:(id)name type:(unsigned)type params:(id)params;
@end

__attribute__((visibility("hidden")))
@interface NLAddFriendsHandler : NSObject {
}
+(void)upsertContactsByMID:(id)mid contactType:(int)type withCompleteBlock:(id)completeBlock onError:(id)error;
+(void)findContactWithMID:(id)mid withCallback:(id)callback;
+(void)showBuddyAuthorizedViewControllerWithDetail:(id)detail contactType:(int)type withOnComplte:(id)onComplte withOnError:(id)onError withCancel:(id)cancel;
+(void)showAuthorizedBuddyViewControllerIfNeededWithMID:(id)mid contactType:(int)type withIsBuddy:(BOOL)isBuddy withOnComplete:(id)onComplete withOnError:(id)onError withCancel:(id)cancel;
+(void)addFriendOrBuddyWithContact:(id)contact contactType:(int)type withOnComplete:(id)onComplete withOnError:(id)onError withOnCancel:(id)onCancel;
+(void)addFriendOrBuddyWithContact:(id)contact withOnComplete:(id)onComplete withOnError:(id)onError withOnCancel:(id)onCancel;
+(void)addFriendOrBuddyWithMID:(id)mid contactType:(int)type withOnComplete:(id)onComplete withOnError:(id)onError withOnCancel:(id)onCancel;
+(void)addFriendOrBuddyWithMID:(id)mid withOnComplete:(id)onComplete withOnError:(id)onError withOnCancel:(id)onCancel;
@end

__attribute__((visibility("hidden")))
@interface AddGroupTableViewCell : LineTableViewCell {
	UIImageView* checkImageView_;
	UILabel* separatorTop_;
	UILabel* separatorTopPlus_;
	UILabel* nameLabel_;
	UILabel* membersLabel_;
	UIButton* numMembersButton_;
	ProfileImageView* groupImageView_;
	TalkGroupObject* groupObject_;
	UIView* selectedMarkView_;
	BOOL enableHighlightingNewGroup;
}
@property(assign, nonatomic) BOOL groupImageTouchEnabled;
@property(assign, nonatomic) BOOL enableHighlightingNewGroup;
@property(retain, nonatomic) TalkGroupObject* groupObject;
-(void).cxx_destruct;
-(BOOL)render;
-(void)addProfileImageGestureRecognizer:(id)recognizer;
-(void)changeSelectedCheckmark:(BOOL)checkmark;
-(void)changeSelectedBackgroundView:(BOOL)view;
-(void)setGroupObject:(id)object maskedFriends:(id)friends;
-(void)layoutSubviews;
-(void)layoutLabels;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)initViews;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageInfoOperation : NLObjectStorageOperation {
}
-(void)buildRequest;
-(id)initWithOperationParameters:(id)operationParameters;
@end

__attribute__((visibility("hidden")))
@interface MBMessageCell : MBTableViewActionCell {
	UIView* mMessageView;
	int mType;
	CGSize mParentSize;
}
@property(assign, nonatomic) CGSize parentSize;
@property(retain, nonatomic) UIView* messageView;
+(float)heightWithTableView:(id)tableView type:(int)type;
+(id)messageCellWithTableView:(id)tableView type:(int)type;
+(id)messageCellIdentifierWithType:(int)type;
-(void).cxx_destruct;
-(BOOL)isMyHomeCell;
-(float)heightWithType:(int)type;
-(void)setType:(int)type;
-(void)layoutSubviews;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LocationDetailViewController : NLViewController <MKMapViewDelegate, UIActionSheetDelegate, UIGestureRecognizerDelegate> {
	MKMapView* mapView;
	LocationDetailAnnotation* _givenLocationAnnotation;
	LineLocation* objectToSend_;
	id<LocationDetailViewControllerDelegate> delegate;
}
@property(assign, nonatomic) id<LocationDetailViewControllerDelegate> delegate;
@property(retain, nonatomic) MKMapView* mapView;
-(void).cxx_destruct;
-(void)mapView:(id)view didDeselectAnnotationView:(id)view2;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(void)onTap:(id)tap;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)openInGoogleMaps:(id)googleMaps fromLocation:(id)location;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)sentLocationAction:(id)action;
-(void)currentLocationAction:(id)action;
-(void)onOpenPressed:(id)pressed;
-(void)onClosePressed:(id)pressed;
-(CGPoint)mapFlagAnchorPoint;
-(id)mapFlagImage;
-(BOOL)canOpenInGoogleMaps;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidAppear:(BOOL)view;
-(void)addAnotation:(id)anotation subtitle:(id)subtitle latitude:(double)latitude longitude:(double)longitude;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MBURLMovieOperation : MBURLConnectionOperation {
	MBURLMovie* mURLMovie;
	BOOL mInvalid;
	BOOL mIsCancel;
}
@property(assign, nonatomic) MBURLMovie* URLMovie;
-(void)didFail;
-(void)didFinishLoading;
-(void)didReceiveBodyData:(int)data totalBytesRead:(long long)read totalBytesExpectedToRead:(long long)read3;
-(void)cancelDownload;
-(void)didReceiveResponse;
@end

__attribute__((visibility("hidden")))
@interface MBURLMovie : NSObject {
	NSString* mFilePath;
	MBURLMovieOperation* mOperation;
	NSURL* mURL;
	NSError* mError;
	int mRetryRemainCount;
	id mCompletionBlock;
	id mReceiveDataBlock;
}
@property(assign, nonatomic) int retryRemainCount;
@property(readonly, assign, nonatomic) NSString* filePath;
@property(readonly, assign, nonatomic) NSURL* URL;
@property(readonly, assign, nonatomic) NSError* error;
+(id)movieWithURL:(id)url completion:(id)completion receiveData:(id)data;
+(void)initialize;
+(BOOL)shouldDownloadAtURLString:(id)urlstring;
+(id)moviePathForURL:(id)url;
-(void).cxx_destruct;
-(void)receiveDataProgressTotalBytesRead:(long long)read totalBytesExpectedToRead:(long long)read2;
-(void)completeFilePath:(id)path WithError:(id)error;
-(void)cancel;
-(BOOL)shouldDownload;
-(void)loadFromURLConnection;
-(void)setReceiveDataBlock:(id)block;
-(void)setCompletionBlock:(id)block;
-(void)setURL:(id)url;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NotificationSettingsViewController : NLTableViewController <UIActionSheetDelegate, ItemSelectionViewControllerDelegate> {
	BOOL changedNotificationsOff;
	BOOL notificationsOff_;
	BOOL notificationConflict;
	BOOL changedNotificationsMessages_;
	int _selectedIndexForNotificationSound;
	NSArray* _notificationSoundItems;
}
@property(retain, nonatomic) NSArray* notificationSoundItems;
@property(assign, nonatomic) int selectedIndexForNotificationSound;
-(void).cxx_destruct;
-(void)itemSelectionViewController:(id)controller didCommitItem:(id)item atIndex:(int)index;
-(void)itemSelectionViewController:(id)controller didSelectItem:(id)item atIndex:(int)index;
-(void)saveNotificationSoundSetting;
-(id)mutedUntilStringWithLineTimestamp:(long long)lineTimestamp;
-(void)calculateNotificationConflict;
-(void)changedVibrateOnOff:(id)off;
-(void)changedSoundOnOff:(id)off;
-(void)changedInAppAlertOnOff:(id)appAlertOnOff;
-(void)changedGroupMessagesOnOff:(id)off;
-(void)changedMessagesOnOff:(id)off;
-(void)changedPreviewOnOff:(id)off;
-(void)changedNotificationOnOff:(id)off;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)saveSettings:(id)settings options:(int)options;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)willMoveToParentViewController:(id)parentViewController;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithStyle:(int)style;
-(id)init;
-(int)rowTagAtIndexPath:(id)indexPath;
-(int)rowAtIndexPath:(id)indexPath;
-(id)rowsForSection:(int)section;
-(id)rowsInInAppSection;
-(id)rowsInGroupInvitationsSection;
-(id)rowsInNotificationCenterSection;
-(id)rowsInMessagesSection;
-(id)rowsInNotificationsSection;
-(int)findIndexOfNotificationSoundItemWithFileName:(id)fileName;
@end

__attribute__((visibility("hidden")))
@interface NJURLConnection : NSOperation {
	NSURLConnection* mConnection;
	NSMutableData* mData;
	NSURLResponse* mResponse;
	id mDelegate;
	SEL mSelector;
	id mContext;
	BOOL mContextRetained;
	BOOL mExecuting;
	BOOL mFinished;
	NSDictionary* mUserInfo;
}
@property(retain, nonatomic) NSDictionary* userInfo;
@property(assign, nonatomic) id context;
@property(assign, nonatomic) SEL selector;
@property(assign, nonatomic) id delegate;
@property(readonly, assign, nonatomic) NSURLResponse* response;
+(id)customUserAgent;
+(void)setCustomUserAgent:(id)agent;
+(void)setPageType:(id)type;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)retainContext;
-(BOOL)contextRetained;
-(void)setRequest:(id)request;
-(void)stop;
-(void)cancel;
-(void)start;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isConcurrent;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface GroupNameButton : UIButton {
	id groupController;
}
-(void).cxx_destruct;
-(void)hideMenu:(id)menu;
-(void)reset:(id)reset;
-(void)remove:(id)remove;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)showMenu:(id)menu;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(BOOL)canBecomeFirstResponder;
-(void)setGroupController:(id)controller;
-(id)initWithFrame:(CGRect)frame title:(id)title font:(id)font titleHorizontalMargin:(float)margin;
@end

__attribute__((visibility("hidden")))
@interface InAppWebViewController : NLViewController <UIWebViewDelegate, UIActionSheetDelegate> {
	UIWebView* webView;
	NSString* url;
	id _networkActivityIndicatorHandle;
	NSString* _titleString;
}
@property(retain, nonatomic) NSString* titleString;
@property(retain, nonatomic) UIWebView* webView;
@property(retain, nonatomic) NSString* url;
-(void).cxx_destruct;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)onBackPressed:(id)pressed;
-(void)onClosePressed:(id)pressed;
-(void)viewWillDisappear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface CoreDataSyncService : NSObject {
}
+(void)forceSyncOfCategory:(int)category atRevision:(long long)revision MIDs:(id)mids actionType:(int)type;
+(void)syncRequestedForMID:(id)mid type:(int)type severity:(id)severity;
+(void)updateUserAlertSettings;
+(void)checkJapanDeviceAgeSettings;
+(void)recoveryRegion;
+(void)updateMySettings;
+(void)updateAddressbookUserDisplayName;
+(void)syncSortableName;
+(void)syncBlockList;
+(void)syncGroupsWithMIDs:(id)mids syncExceptionCode:(int)code;
+(void)syncRecommend;
+(void)syncGroupData;
+(void)syncFriendsData;
+(void)syncLineCoinInfo;
+(void)syncMyhomeSetting;
+(void)syncProfileData;
+(void)syncChannelNotificationCenterSettings;
+(void)syncNotificationSettings;
+(void)initializeAddressBookPolicy;
+(void)updateSearchableIDSettings;
+(void)updateAddressbookPolicy;
+(void)syncAllDataWithCompletionBlock:(id)completionBlock;
+(void)syncAllData;
@end

__attribute__((visibility("hidden")))
@interface MBUIViewHorizontalLinearLayout : MBBaseLayout {
	NSArray* mSubviews;
	int mOrientation;
}
@property(assign, nonatomic) int orientation;
+(id)createWithSubviews:(id)subviews orientation:(int)orientation;
-(void).cxx_destruct;
-(CGSize)preferredSize:(CGSize)size;
-(void)layout;
-(id)initWithSubviews:(id)subviews orientation:(int)orientation;
@end

__attribute__((visibility("hidden")))
@interface TalkMessageObject : _TalkMessageObject {
	BOOL containsTooLongLine;
	BOOL containsTooLongLineLandscape;
	BOOL hasUnreadMark;
	BOOL checkedForEdit;
	BOOL checkingForEdit;
	float cellHeight;
	float cellHeightLandscape;
	id contentMetadataModel;
	NSString* sourceOBSPathForCopy;
	unsigned obsUploadForEditType;
	XXStruct_PILIWD _stickerTuple;
}
@property(readonly, assign, nonatomic) unsigned callType;
@property(retain, nonatomic) NSString* callPhoneNumber;
@property(assign, nonatomic) unsigned obsUploadForEditType;
@property(assign, nonatomic) BOOL checkingForEdit;
@property(assign, nonatomic) BOOL checkedForEdit;
@property(retain, nonatomic) NSString* sourceOBSPathForCopy;
@property(retain, nonatomic) id contentMetadataModel;
@property(assign, nonatomic) XXStruct_PILIWD stickerTuple;
@property(assign, nonatomic) BOOL hasUnreadMark;
@property(assign, nonatomic) BOOL containsTooLongLineLandscape;
@property(assign, nonatomic) BOOL containsTooLongLine;
@property(assign, nonatomic) float cellHeightLandscape;
@property(assign, nonatomic) float cellHeight;
@property(assign, nonatomic) int sticker;
@property(assign, nonatomic) double callInterval;
@property(assign, nonatomic) unsigned callResult;
@property(assign, nonatomic) CGSize thumbnailSize;
@property(readonly, assign, nonatomic) NSDate* displayDate;
+(id)configureDataForChatEventWithMessage:(id)message from:(id)from;
+(void)deleteAllAttachedFilesInManagedObjectContext:(id)managedObjectContext;
+(void)removeAllMessagesInManagedObjectContext:(id)managedObjectContext;
+(void)resetAllMessageCellHeightInManagedObjectContext:(id)managedObjectContext;
+(id)imageMessagesInChat:(id)chat inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithMessage:(id)message reqSeq:(int)seq inManagedObjectContext:(id)managedObjectContext;
+(id)lastMessageInManagedObjectContext:(id)managedObjectContext;
+(id)messageWithObjectID:(id)objectID inManagedObjectContext:(id)managedObjectContext;
+(id)messageWithID:(id)anId inManagedObjectContext:(id)managedObjectContext;
+(BOOL)messageExistsWithID:(id)anId inManagedObjectContext:(id)managedObjectContext;
+(id)timeLabelFromInterval:(double)interval;
+(unsigned)callTypeFromString:(id)string;
+(unsigned)callResultFromString:(id)string;
+(void)initialize;
+(unsigned)availableTasksWithMessageObject:(id)messageObject buddy:(BOOL)buddy toType:(int)type wasRoomDeleted:(BOOL)deleted;
+(BOOL)saveImageFileWithProperCompressionRatioWithImage:(id)image toURL:(id)url;
+(BOOL)saveImageFileWithData:(id)data toURL:(id)url;
+(id)convertDataFromImage:(id)image;
+(id)dataForThumbnailImage:(id)thumbnailImage;
+(id)thumbnailForChatRoom:(id)chatRoom;
+(id)newTemporaryIDWithRequestSequence:(int)requestSequence;
+(id)messageByRequestSequence:(int)sequence inContext:(id)context;
+(id)messageSendContent:(id)content withRequestSequence:(int)requestSequence inContext:(id)context;
+(id)messageFailed:(id)failed withRequestSequence:(int)requestSequence inContext:(id)context;
+(id)messageSent:(id)sent withRequestSequence:(int)requestSequence inContext:(id)context;
+(id)makeMetaDataWithStickerTuple:(XXStruct_PILIWD)stickerTuple;
+(id)newMessageInChat:(id)chat withText:(id)text requestSequence:(int)sequence image:(id)image thumbnail:(id)thumbnail location:(id)location sticker:(XXStruct_PILIWD)sticker contentType:(short)type contentMetadata:(id)metadata;
+(id)newMessageInChat:(id)chat withText:(id)text requestSequence:(int)sequence imageURL:(id)url location:(id)location sticker:(XXStruct_PILIWD)sticker contentType:(short)type contentMetadata:(id)metadata;
-(void).cxx_destruct;
-(id)description;
-(BOOL)deleteOBSContent;
-(BOOL)isMediaTypeMessageAndSupportReqSeqIDForUpload;
-(BOOL)isMediaTypeMessage;
-(BOOL)shouldIncrementChatMessagesUnread;
-(BOOL)isSendMessage;
-(BOOL)isReceivedMessage;
-(BOOL)isSystemMessage;
-(void)setSender:(id)sender;
-(id)textForExport:(id)export;
-(BOOL)isMyMessage;
-(id)lineCallLabelLong;
-(id)lineCallLabelShort;
-(id)lineCallLabelWithKeySuffix:(id)keySuffix;
-(id)callLabelLong;
-(id)callLabelShort;
-(id)callLabelWithKeySuffix:(id)keySuffix;
-(BOOL)line_isSending;
-(void)line_setSending:(BOOL)sending;
-(id)sendStatus;
-(void)setSendStatus:(id)status;
-(unsigned)messageTypeEnum;
-(void)setChat:(id)chat;
-(void)didSave;
-(id)initInsertedIntoManagedObjectContext:(id)context;
-(void)mergeContentMetadataWithLineMessage:(id)lineMessage;
-(BOOL)updateImageTypeMessageWithMessageId:(id)messageId;
-(id)lineLocation;
-(int)line_contentUploadType;
-(unsigned long long)attachedFileSize;
-(id)attachedFileURL;
-(id)attachedFileDownloadURL;
-(id)attachedFileNameToStore;
-(id)attachedFileName;
-(BOOL)textIsTempAudioURL;
-(id)audioFileURL;
-(id)audioFileName;
-(id)imageData;
-(id)imageFileURL;
-(id)imageName;
-(id)imageURL;
-(id)temporaryImageName;
-(id)address;
-(id)locationText;
-(id)lineMessageValue;
-(id)requestKey;
-(int)requestSequence;
-(BOOL)hasTemporaryID;
-(void)setTemporaryIDWithRequestSequence:(int)requestSequence;
-(void)line_updateWithLineMessage:(id)lineMessage;
-(void)line_messageFailed;
-(void)line_messageSent:(id)sent;
-(void)line_uploadFilePath:(id)path startOffset:(unsigned long long)offset;
-(void)line_uploadVideoFileWithOffset:(unsigned long long)offset;
-(void)line_uploadfileTypeFileWithOffset:(unsigned long long)offset;
-(void)line_uploadAV:(short)av uploadOffset:(unsigned long long)offset exportedMoviePath:(id)path;
-(void)line_uploadAV:(short)av uploadOffset:(unsigned long long)offset;
-(void)line_uploadImageWithUploadOffset:(unsigned long long)uploadOffset;
-(void)line_copyOBSContent;
-(BOOL)line_checkExistFileForUpload:(id)upload;
-(void)line_checkResumeUploadInfo:(short)info;
-(void)line_sendContent;
-(void)cancel;
-(void)send;
-(id)initWithLineMessage:(id)lineMessage from:(id)from inContext:(id)context;
-(BOOL)stickerTypeObjectFromInfoDictionary:(id)infoDictionary;
-(id)stickerModel;
-(void)callTypeObjectFromMessageObj;
-(BOOL)callTypeObjectFromInfoDictionary:(id)infoDictionary;
-(id)callModel;
-(BOOL)fileTypeObjectFromInfoDictionary:(id)infoDictionary;
-(id)attachedFileModel;
-(BOOL)contactTypeObjectFromInfoDictionary:(id)infoDictionary;
-(id)contactModel;
-(BOOL)couponTypeObjectFromInfoDictionary:(id)infoDictionary title:(id)title;
-(id)couponModel;
-(BOOL)appLinkTypeObjectFromInfoDictionary:(id)infoDictionary;
-(id)appLinkModel;
-(BOOL)imageMapTypeObjectFromInfoDictionary:(id)infoDictionary;
-(id)imageMapStateManager;
-(BOOL)groupBoardTypeObjectFromInfoDictionary:(id)infoDictionary;
-(id)groupBoardModel;
-(void)makeMetadataModelWithMessageObj;
-(BOOL)makeMetadataModelWithInfoDict:(id)infoDict;
@end

__attribute__((visibility("hidden")))
@interface ImageMapCanvasObject : NSObject {
	NSString* _widthHint;
	unsigned _alignHint;
	unsigned _style;
	float _width;
	float _height;
	NSString* _initialSceneName;
}
@property(readonly, retain, nonatomic) NSString* initialSceneName;
@property(readonly, assign, nonatomic) float height;
@property(readonly, assign, nonatomic) float width;
@property(readonly, assign, nonatomic) unsigned style;
@property(readonly, assign, nonatomic) unsigned alignHint;
@property(readonly, retain, nonatomic) NSString* widthHint;
-(void).cxx_destruct;
-(id)description;
-(id)initWithWidthHint:(id)widthHint alignHint:(unsigned)hint style:(unsigned)style width:(float)width height:(float)height initialScene:(id)scene;
@end

__attribute__((visibility("hidden")))
@interface TalkContactObject : _TalkContactObject {
}
+(BOOL)isUserForKey:(id)key inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithDictionary:(id)dictionary inContext:(id)context;
+(id)insertWithLUID:(id)luid key:(id)key type:(int)type name:(id)name inContext:(id)context;
+(id)contactsWithMID:(id)mid inManagedObjectContext:(id)managedObjectContext;
+(id)contactWithLUID:(id)luid key:(id)key type:(id)type inManagedObjectContext:(id)managedObjectContext;
+(id)contactsWithKey:(id)key type:(id)type inManagedObjectContext:(id)managedObjectContext;
+(id)contactsWithLUID:(id)luid inManagedObjectContext:(id)managedObjectContext;
+(id)contactsNotSyncedInManagedObjectContext:(id)managedObjectContext;
+(id)contactsNotRegisteredInManagedObjectContext:(id)managedObjectContext;
+(id)contactsRegisteredInManagedObjectContext:(id)managedObjectContext;
+(id)contactsInManagedObjectContext:(id)managedObjectContext;
+(unsigned)numberOfKeysInManagedObjectContext:(id)managedObjectContext;
+(id)predicateForContacts;
-(id)contactName;
@end

__attribute__((visibility("hidden")))
@interface InvitationTableViewCell : UITableViewCell {
	UIImageView* userIcon_;
	UIButton* inviteButton_;
}
@property(readonly, assign, nonatomic) UIButton* inviteButton;
-(void).cxx_destruct;
-(void)setContactName:(id)name userType:(int)type;
-(void)layoutSubviews;
-(void)dealloc;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)applyLabelShadow:(BOOL)shadow;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)initWithFrame:(CGRect)frame;
-(void)init_;
@end

__attribute__((visibility("hidden")))
@interface NLCallCountryListViewController : NLViewController <UISearchBarDelegate, UISearchDisplayDelegate, UITableViewDataSource, UITableViewDelegate> {
	BOOL _isAnimated;
	BOOL _isKeyboardOpened;
	id<NLCallCountryListDelegate> _eventDelegate;
	UIView* _viewTitleArea;
	UILabel* _labelTitle;
	UIView* _viewContents;
	UIScrollView* _scrollView;
	UIView* _emptyView;
	NLCallSearchBar* _searchBar;
	UITableView* _tableView;
	UIButton* _buttonDimm;
	NSArray* _defaultCountryList;
	NSMutableDictionary* _defaultCountryListMap;
	NSArray* _searchedCountryList;
	NSArray* _favoriteCountryList;
	NSString* _currentSelectedRegionCode;
	CGRect _defaultTitleRect;
	CGRect _defaultBodyRect;
	CGRect _searchBarDefaultRect;
	CGRect _tableViewDefaultRect;
}
@property(assign, nonatomic) BOOL isKeyboardOpened;
@property(assign, nonatomic) CGRect tableViewDefaultRect;
@property(assign, nonatomic) CGRect searchBarDefaultRect;
@property(assign, nonatomic) BOOL isAnimated;
@property(retain, nonatomic) NSString* currentSelectedRegionCode;
@property(assign, nonatomic) CGRect defaultBodyRect;
@property(assign, nonatomic) CGRect defaultTitleRect;
@property(retain, nonatomic) NSArray* favoriteCountryList;
@property(retain, nonatomic) NSArray* searchedCountryList;
@property(retain, nonatomic) NSMutableDictionary* defaultCountryListMap;
@property(retain, nonatomic) NSArray* defaultCountryList;
@property(assign, nonatomic) UIButton* buttonDimm;
@property(assign, nonatomic) UITableView* tableView;
@property(assign, nonatomic) NLCallSearchBar* searchBar;
@property(assign, nonatomic) UIView* emptyView;
@property(assign, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) UIView* viewContents;
@property(assign, nonatomic) UILabel* labelTitle;
@property(assign, nonatomic) UIView* viewTitleArea;
@property(assign, nonatomic) id<NLCallCountryListDelegate> eventDelegate;
-(void).cxx_destruct;
-(void)setColorBeforeSearcheMode;
-(void)setColorSearchedMode;
-(void)dimmedAfterChangeBackgroundColor:(BOOL)color;
-(BOOL)isExistSearchResult;
-(void)searchBarAnimationMoveDown;
-(void)searchbarAnimationMoveUp;
-(void)animationDimmed;
-(void)animationSearchbarTouched;
-(void)dissMissList;
-(void)scrollViewMoveToTarget:(CGRect)target;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)actionClose:(id)close;
-(void)actionDimm:(id)dimm;
-(id)searchListWithString:(id)string;
-(id)searchListWithNumber:(id)number;
-(void)searchList;
-(void)searchCountryList;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)addKeyboardNotification;
-(void)setCellsBackgroundImageWithCell:(id)cell atIndexPath:(id)indexPath;
-(void)refreshBodyViews;
-(void)initSubviewsTableView;
-(void)initSubviews;
-(void)initContents;
-(void)initSetting;
-(void)initViewController;
-(int)preferredStatusBarStyle;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MBRecentPhoto : NSObject <NSCoding> {
	NSString* mPostId;
	NSString* mObjectID;
	NSString* mMediaType;
	NSString* mServiceName;
	NSString* mNamespace;
	NSMutableDictionary* mQuery;
	CGSize mSize;
}
@property(readonly, assign, nonatomic) NSURL* thumbnailUrl;
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, assign, nonatomic) NSString* mediaType;
@property(readonly, assign, nonatomic) NSString* objectId;
@property(readonly, assign, nonatomic) NSString* postId;
+(id)recentPhotoWithData:(id)data withMid:(id)mid;
-(void).cxx_destruct;
-(id)initWithData:(id)data withMid:(id)mid;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBProfilePhoto : NSObject <NSCoding> {
	BOOL mIsOwner;
	BOOL mHasNewPost;
	double mExpireTime;
	double mTalkRoomExpireTime;
	NSString* mUserMid;
	NSString* mCoverObjectID;
	NSURL* mCoverUrl;
	NSMutableArray* mRecentPhotos;
	double _talkRoomExpireTime;
}
@property(readonly, assign, nonatomic) NSMutableArray* recentPhotos;
@property(readonly, assign, nonatomic) NSURL* coverUrl;
@property(readonly, assign, nonatomic) NSString* coverObjectId;
@property(readonly, assign, nonatomic) NSString* userMid;
@property(assign, nonatomic) double talkRoomExpireTime;
@property(assign, nonatomic) double expireTime;
@property(assign, nonatomic) BOOL hasNewPost;
@property(readonly, assign, nonatomic) BOOL isOwner;
+(id)cachePathWithName:(id)name;
+(id)cacheDirPath;
+(void)clearHasNewPostWithMid:(id)mid;
+(id)profilePhotoUnarchiveWithMid:(id)mid;
+(id)profilePhotoForTalkRoomWithData:(id)data withOldData:(id)oldData;
+(id)profilePhotoWithData:(id)data withOldData:(id)oldData;
-(void).cxx_destruct;
-(void)dealloc;
-(id)initWithData:(id)data withOldData:(id)oldData;
-(id)initWithDataForTalkRoom:(id)talkRoom withOldData:(id)oldData;
-(void)archiveForTalkRoom;
-(void)archive;
-(BOOL)needRefresh;
-(BOOL)compareProfilePhoto:(id)photo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLMoreTabCollectionViewCell : PSUICollectionViewCell_ {
	MoreTabButtonView* _button;
}
@property(retain, nonatomic) MoreTabButtonView* button;
-(void).cxx_destruct;
-(void)addButtonAtIndexPath:(id)indexPath;
-(void)updateItem:(id)item;
@end

__attribute__((visibility("hidden")))
@interface RegistrationVerifyIndigoViewController : NLViewController {
	BOOL _onCall;
}
@property(assign, nonatomic) BOOL onCall;
-(void)processRegistration;
-(void)verifyIVR;
-(void)onCall:(id)call;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)configureLabel:(id)label;
-(void)popViewControllerAnimated;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface QRCodeGeneratorViewController : NLViewController <UIActionSheetDelegate, MFMailComposeViewControllerDelegate> {
	NLSafeUnretainedObject* safeSelf;
	UIButton* _cameraButton;
}
@property(retain, nonatomic) UIButton* cameraButton;
-(void).cxx_destruct;
-(void)sendEmailWithImage;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)hideQRCodeReaderButton;
-(void)saveQRCode;
-(void)back;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)menuAction:(id)action;
-(void)dealloc;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)setBottomBar;
-(void)loadView;
-(void)onBackButtonPressed:(id)pressed;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallSettingTableViewController : NLTableViewController <NLCallSettingInfoDelegate, NLCallCountryListDelegate> {
	NSArray* _sections;
	NSArray* _rows;
	BOOL _willMoveCreditCharge;
	UIView* _titleView;
	int _directOpenMenuType;
	NSArray* _balanceList;
}
@property(assign, nonatomic) BOOL willMoveCreditCharge;
@property(retain, nonatomic) NSArray* balanceList;
@property(assign, nonatomic) int directOpenMenuType;
@property(retain, nonatomic) UIView* titleView;
-(void).cxx_destruct;
-(void)callerIdStatusChanged:(id)changed;
-(id)lineCallHelpURLString;
-(id)aboutLineCallURLString;
-(id)termsAndPolicyLineCallURLString;
-(void)eventInvoker:(id)invoker dismissWithSelectionInfo:(id)selectionInfo;
-(id)getMyAccountText;
-(id)getCreditBalance;
-(void)selectedCountry:(id)country countryLabelInfo:(id)info;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)calcMonthlyProducNameHeight:(id)height;
-(float)calcSectionFooterHeight:(int)height;
-(float)calcCellHeight:(id)height;
-(void)switchToggled:(id)toggled;
-(int)rowKey:(id)key;
-(id)titleForCell:(id)cell;
-(void)setBottomLine:(id)line withIndexPath:(id)indexPath;
-(void)addTopLine:(id)line withSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)rowsForSectionKey:(int)sectionKey;
-(id)sectionsForCallSetting;
-(void)loadDataSource;
-(void)checkDirectMenuMode;
-(void)moveChargeCredit;
-(void)willMoveChargeCredit;
-(void)initContents;
-(void)callDissmissViewController;
-(int)preferredStatusBarStyle;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface QRCodeViewController : NLViewController <ZBarReaderDelegate, ZBarReaderViewDelegate, UIAlertViewDelegate> {
	ZBarReaderView* _readerView;
	UIButton* _createQrButton;
}
@property(readonly, assign, nonatomic) UIButton* createQrButton;
-(void).cxx_destruct;
-(void)applicationWillChangeStatusBarFrame:(id)application;
-(void)createQR;
-(void)photoLibrary;
-(void)processQRURL:(id)qrurl;
-(void)readerView:(id)view didReadSymbols:(id)symbols fromImage:(id)image;
-(void)readerControllerDidFailToRead:(id)readerController withRetry:(BOOL)retry;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)setBottomBar;
-(void)viewDidLoad;
-(void)onBackButtonPressed:(id)pressed;
-(void)loadView;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLShakeSession : NSObject <CLLocationManagerDelegate> {
	CLLocationManager* _locationManager;
	CLLocation* _location;
	NSTimer* _locationTimeoutTimer;
	BOOL _updatingLocation;
	BOOL _shouldShowAlertForLocationUpdateFailures;
	BOOL _startDisabled;
	unsigned _checkMatchCount;
	NSTimer* _checkMatchTimer;
	id _networkRequest;
	id<NLShakeShakeSessionDelegate> _delegate;
	NSString* _sessionId;
	unsigned _status;
	NSMutableArray* _matchedFriends;
	NSMutableArray* _matchedBuddies;
	NSSet* _acceptedMIDs;
}
@property(readonly, assign, nonatomic) NSSet* acceptedMIDs;
@property(readonly, assign, nonatomic) NSMutableArray* matchedBuddies;
@property(readonly, assign, nonatomic) NSMutableArray* matchedFriends;
@property(assign, nonatomic) unsigned status;
@property(retain, nonatomic) NSString* sessionId;
@property(assign, nonatomic) id<NLShakeShakeSessionDelegate> delegate;
-(void).cxx_destruct;
-(void)checkMatchContacts;
-(void)stopMatchContactsTimer;
-(void)startMatchContactsTimerWithTimeInterval:(double)timeInterval;
-(void)closeProximityMatch;
-(void)getAcceptedProximityMatchesWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
-(void)acceptProximityMatchesMid:(id)mid completionBlock:(id)block errorBlock:(id)block3;
-(void)openProximityMatchSession:(id)session completionBlock:(id)block errorBlock:(id)block3;
-(void)locationManagerDidResumeLocationUpdates:(id)locationManager;
-(void)locationManagerDidPauseLocationUpdates:(id)locationManager;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(BOOL)showLocationUpdateFailureAlert;
-(void)forceTimeout;
-(void)onLocationTimeout:(id)timeout;
-(BOOL)checkLocationUpdated;
-(void)onFailedUpdatingCurrentLocation;
-(void)onFinishUpdatingCurrentLocation:(id)location;
-(void)stopUpdatingLocation;
-(void)startUpdatingLocation;
-(void)reset;
-(void)start;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallPriceTableViewController : NLCallSettingCommonSubViewController <UISearchBarDelegate, UISearchDisplayDelegate, UITableViewDataSource, UITableViewDelegate> {
	BOOL _isShowedKeyboard;
	UIView* _viewTitle;
	UIButton* _buttonBack;
	UILabel* _labelTitle;
	UIView* _viewContentsBackground;
	NLCallSearchBar* _searchBar;
	UIButton* _buttonSelect;
	UIView* _bottomLine;
	UITableView* _currencyTableView;
	UITableView* _tableView;
	UIView* _dimedBackView;
	UIButton* _buttonCancel;
	UIButton* _buttonDimmed;
	NLCallEmptyDataView* _emptyView;
	NSArray* _defaultCountryList;
	NSMutableArray* _searchedCountryList;
	NSArray* _currentCountryInfo;
	NSArray* _arrayPriceTableInfos;
	NSDictionary* _currentCurrencyInfo;
	NLCallCountryListViewController* _countryListViewController;
	UITableView* _countryListTableView;
	CGRect _tableViewDefaultRect;
}
@property(assign, nonatomic) CGRect tableViewDefaultRect;
@property(assign, nonatomic) BOOL isShowedKeyboard;
@property(retain, nonatomic) UITableView* countryListTableView;
@property(retain, nonatomic) NLCallCountryListViewController* countryListViewController;
@property(retain, nonatomic) NSDictionary* currentCurrencyInfo;
@property(retain, nonatomic) NSArray* arrayPriceTableInfos;
@property(retain, nonatomic) NSArray* currentCountryInfo;
@property(retain, nonatomic) NSMutableArray* searchedCountryList;
@property(retain, nonatomic) NSArray* defaultCountryList;
@property(assign, nonatomic) NLCallEmptyDataView* emptyView;
@property(assign, nonatomic) UIButton* buttonDimmed;
@property(assign, nonatomic) UIButton* buttonCancel;
@property(assign, nonatomic) UIView* dimedBackView;
@property(assign, nonatomic) UITableView* tableView;
@property(assign, nonatomic) UITableView* currencyTableView;
@property(assign, nonatomic) UIView* bottomLine;
@property(assign, nonatomic) UIButton* buttonSelect;
@property(assign, nonatomic) NLCallSearchBar* searchBar;
@property(assign, nonatomic) UIView* viewContentsBackground;
@property(assign, nonatomic) UILabel* labelTitle;
@property(assign, nonatomic) UIButton* buttonBack;
@property(assign, nonatomic) UIView* viewTitle;
-(void).cxx_destruct;
-(void)searchList;
-(void)actionDimmed:(id)dimmed;
-(void)actionCancel:(id)cancel;
-(void)actionClose:(id)close;
-(void)countrySelectAction:(id)action;
-(void)searchModeDimmed;
-(void)searchModeApplied;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)addKeyboardNotification;
-(void)initSubviewsTableView;
-(void)initSubviews;
-(void)updateSelectedButton;
-(void)requestPaidCallUserRate:(id)rate;
-(void)initContents;
-(void)initSetting;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MBMergePostHeaderView : MBBaseChildCellView <MBActorObserving> {
	MBActivity* activity;
	NMAttributedLabel* textView;
	MBMergePostHeaderViewLayout* mergePostHeaderViewLayout;
	UIButton* actionButton;
	UIView* lineView;
	UIImageView* arrowImageView;
	UILabel* themeLabel;
	NSString* cacheKey;
	CGSize mSize;
	CGSize mTextSize;
	NSMutableAttributedString* attributedString;
}
@property(readonly, assign, nonatomic) NSMutableAttributedString* attributedString;
+(CGSize)cachedTextSizeWithCacheKey:(id)cacheKey;
+(id)attributedStringWithActivity:(id)activity;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(id)mergeExtDatas;
-(id)recommendText;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)tappedActionButton;
-(void)resetCellData;
-(void)drawCellData;
-(id)headerTextForActivityType;
-(void)removeActorObserver;
-(void)setCellData:(id)data;
-(id)cachedText;
-(CGSize)cachedTextSize;
-(id)cacheKey;
-(void)saveCache;
-(void)clearCache;
-(void)renderTheme;
-(id)activity;
-(void)dealloc;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface NLCallKeypadButton : UIButton {
}
-(id)buttonTitle;
-(BOOL)isButtonSharp;
-(BOOL)isButtonStar;
-(id)updateLabelTitleText;
-(float)fontSize;
-(id)createSubTitleLabel;
-(id)createTitleLabel;
-(id)getFontWithName:(id)name withFontSize:(float)fontSize;
-(void)addButtonLabels;
-(void)cancelTrackingWithEvent:(id)event;
-(void)endTrackingWithTouch:(id)touch withEvent:(id)event;
-(BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
-(void)buttonAnimationFadeOut;
-(void)buttonAnimationFadeIn;
-(void)initViews;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBSnapMovie : MBBaseActivityContent {
	NSString* mObjectID;
	NSString* mNamespace;
	NSString* mServiceName;
	NSURL* mThumbnailURL;
	NSURL* mExternalURL;
	CGSize mSize;
	BOOL mIsDeleted;
	BOOL mIsCancel;
	BOOL mIsUseOriginalMovie;
}
@property(assign, nonatomic) BOOL isUseOriginalMovie;
@property(assign, nonatomic) BOOL isCancel;
@property(assign, nonatomic) BOOL isDeleted;
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, assign, nonatomic) NSURL* externalURL;
@property(readonly, assign, nonatomic) NSURL* thumbnailURL;
@property(readonly, assign, nonatomic) NSString* serviceName;
@property(readonly, assign, nonatomic) NSString* namespace;
@property(readonly, assign, nonatomic) NSString* objectID;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)isExternal;
-(id)snapMovieURLForOriginal;
-(id)snapMovieURL;
-(id)description;
-(id)initWithExternalInfo:(id)externalInfo;
-(id)initWithMediaInfo:(id)mediaInfo;
-(void)setupWithExternalInfo:(id)externalInfo;
-(void)setupWithMediaInfo:(id)mediaInfo;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumListHeaderView : UIView {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface QRCodeGenerator : NSObject {
}
+(void)getUserTicketIDCompletionBlock:(id)block errorBlock:(id)block2;
+(void)findMidWithTicketURL:(id)ticketURL completionBlock:(id)block errorBlock:(id)block3;
+(void)getQRImageCompletionBlock:(id)block errorBlock:(id)block2;
+(id)getUserTicketID;
+(BOOL)isExpiredTicket:(id)ticket;
+(id)generateQRImageFromString:(id)string;
@end

__attribute__((visibility("hidden")))
@interface AddFriendByMIDViewController : NLViewController {
	UIActivityIndicatorView* indicator_;
	UIImageView* profileLineTop_;
	UIImageView* profileLineBottom_;
	UIImageView* profileImageBackground_;
	ProfileImageView* profileImageView_;
	UILabel* userNameLabel_;
	UIButton* addFriendButton;
	UILabel* itsMeLabel_;
	LineContact* _userContact;
	int _contactType;
}
@property(assign, nonatomic) int contactType;
@property(retain, nonatomic) LineContact* userContact;
-(void).cxx_destruct;
-(void)onAddButtonPressed:(id)pressed;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)setButtonToTalk;
-(void)findAndDisplayFriend;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MBNoCommentMessageView : MBMessageView {
}
+(id)noCommentMessageView;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineTableViewCell : UITableViewCell {
	unsigned state_;
	BOOL isLastCell;
}
@property(assign, nonatomic) BOOL isLastCell;
@property(readonly, assign, nonatomic) float accessoryViewOriginX;
@property(readonly, assign, nonatomic) BOOL existAccessoryView;
@property(readonly, assign, nonatomic) float leftEditOffset;
@property(readonly, assign, nonatomic) UIView* deleteConfirmationControl;
@property(readonly, assign, nonatomic) BOOL tableEditing;
-(void)clearState;
-(void)willTransitionToState:(unsigned)state;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)getSinglePixelWithColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoListViewController : LABaseViewController <LAAlbumModelObserving, LASyncStatusObserving, LAPhotoListTitleViewDelegate, LAPhotoOptionViewDelegate, LAAlbumAddPhotosViewDelegate> {
	BOOL mNotNeedUpdateAPI;
	BOOL mFirstTableViewAnimate;
	LAPhotoListTitleView* _titleView;
	LAPhotoListTableView* _tableView;
	LAPhotoOptionView* _optionView;
	LAAlbum* _album;
	NSString* _albumID;
	NSString* _photoIDToScroll;
	NSError* _error;
	UIActivityIndicatorView* _activityIndicatorView;
	UIAlertView* _alertView;
	LAActionSheet* _actionSheet;
	LALineGalleryImagePickerDelegate* _lineGalleryImagePickerDelegate;
}
@property(retain, nonatomic) LALineGalleryImagePickerDelegate* lineGalleryImagePickerDelegate;
@property(retain, nonatomic) LAActionSheet* actionSheet;
@property(retain, nonatomic) UIAlertView* alertView;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicatorView;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSString* photoIDToScroll;
@property(retain, nonatomic) NSString* albumID;
@property(retain, nonatomic) LAAlbum* album;
@property(retain, nonatomic) LAPhotoOptionView* optionView;
@property(retain, nonatomic) LAPhotoListTableView* tableView;
@property(retain, nonatomic) LAPhotoListTitleView* titleView;
-(void).cxx_destruct;
-(void)didTapProfileImageView:(id)view;
-(void)didTapRetryButton:(id)button;
-(void)showUploadCancelAlert:(id)alert groupId:(id)anId;
-(void)showUploadErrorAlert:(id)alert groupId:(id)anId;
-(void)didTapProgressView:(id)view;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)resetPhotoIDToScroll;
-(void)scrollToPhotoOrShowAlert:(BOOL)photoOrShowAlert;
-(void)syncOBSNotificationPhotoAddCanceled:(id)canceled groupID:(id)anId packageType:(int)type;
-(void)syncOBSNotificationPhotoAddFailed:(id)failed groupID:(id)anId error:(id)error;
-(void)launchGallery:(id)gallery groupID:(id)anId;
-(void)updateAlbumNotificationAPIError:(id)error albumID:(id)anId groupID:(id)anId3;
-(void)updateAlbumNotificationDeleted:(id)deleted groupID:(id)anId;
-(void)updateAlbumNotificationURLConnectedPhotoList:(id)list shouldReload:(BOOL)reload;
-(void)updateAlbumNotificationCachedPhotoList:(id)list;
-(void)albumPhotoChooseCompleted:(int)completed;
-(void)showAlertForDelete;
-(void)pushAlbumSettingsViewController;
-(void)updateAlbumInfoAfterSortingPhotoList:(id)list error:(id)error;
-(int)selectedOptionType;
-(void)photoOptionView:(id)view didTapOptionType:(int)type;
-(void)photoListTitleView:(id)view didTapFoldButton:(id)button;
-(void)didTapListButton:(id)button;
-(void)launchGallery;
-(void)didTapAddButton:(id)button;
-(void)didTapCloseButton:(id)button;
-(void)didTapBackButton:(id)button;
-(void)setNavigationBarItemEnabled:(BOOL)enabled;
-(void)setupNavigationBarWithInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)isFetching;
-(void)requestRefresh;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithAlbum:(id)album groupID:(id)anId;
-(id)initWithAlbumID:(id)albumID groupID:(id)anId photoID:(id)anId3;
-(id)initWithAlbumID:(id)albumID groupID:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface AuthNumberField : UITextField {
}
-(CGRect)placeholderRectForBounds:(CGRect)bounds;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBDetailCommentNoticeView : UIView {
	UIImageView* mBackgroundView;
	UIImageView* mNoticeIcon;
	UILabel* mNoticeLabel;
}
+(id)commentNoticeView;
-(void).cxx_destruct;
-(float)height;
-(void)layoutSubviews;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBPublicSettingViewController : MBViewController <UITableViewDelegate, UITableViewDataSource, MBBlockManagerDelegate> {
	MBTableView* mTableView;
	MBBlockManager* mBlockManager;
	NSArray* mFriendsList;
	MBIndicatorLayerView* mIndicatorLayer;
	id<MBLineDataSource> mDataSource;
}
@property(retain, nonatomic) MBIndicatorLayerView* indicatorLayer;
@property(retain, nonatomic) MBBlockManager* blockManager;
@property(assign, nonatomic) id<MBLineDataSource> dataSource;
-(void).cxx_destruct;
-(void)blockManager:(id)manager didFinishCommittingWithError:(id)error;
-(void)blockManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)setTitle:(id)title;
-(void)setupNavigationBar;
-(void)setupFetchData;
-(id)friendObjectOfIndex:(int)index;
-(void)showBackAlert;
-(void)showSuccessAlert;
-(void)showErrorAlert;
@end

__attribute__((visibility("hidden")))
@interface NLCallStandardViewController : NLCallBaseViewController {
	BOOL isAnimating;
	LinePaidCallDialing* _paidCallBalance;
	float _balance;
	float _callRate;
	NSString* _balanceDisplayString;
	NSString* _paidChargeDisplayString;
	BOOL _isKeypadView;
	BOOL _isPlayBalanceAlram;
	UIButton* _endButton_k;
	UIButton* _hideButton_k;
	UIImageView* _profileImage;
	UILabel* _profileNameLabel;
	UILabel* _profileNameLabel_k;
	UILabel* _callStatusInfoLabel;
	UILabel* _callStatusInfoLabel_k;
	UIButton* _muteButton;
	UIButton* _speakerButton;
	UIButton* _keypadButton;
	UIButton* _endButton;
	UIButton* _displayLineMenuButton;
	UIView* _callAnimationGray;
	UIView* _callAnimationGreen;
	UIView* _callAnimationContainer;
	UIView* _keypadView;
	UILabel* _inputLabel;
	UIView* _keypad;
	UIView* _viewCallStatusBar;
	UIView* _callStatusCenterView;
	UIButton* _callStatusBarButton;
	UILabel* _callStatusBarTitle;
	UILabel* _callStatusBarDuration;
	UIView* _callStatusBarCenter;
	UIView* _networkStatusView;
	UILabel* _networkStatusMessage;
	UIView* _callerIdStatusView;
	UILabel* _callerIdStatusMessage;
	NLCallUserInfo* _userInfo;
	AMPTonePlayer* _tonePlayer;
	UIView* _creditInfoTopLine;
	UIView* _creditInfoBottomLine;
	UIView* _creditInfoTopLine_k;
	UILabel* _paidInfoLabel;
	UILabel* _paidInfoLabel_k;
}
@property(assign) BOOL isPlayBalanceAlram;
@property(assign) BOOL isKeypadView;
@property(retain, nonatomic) UILabel* paidInfoLabel_k;
@property(retain, nonatomic) UILabel* paidInfoLabel;
@property(retain, nonatomic) UIView* creditInfoTopLine_k;
@property(retain, nonatomic) UIView* creditInfoBottomLine;
@property(retain, nonatomic) UIView* creditInfoTopLine;
@property(retain, nonatomic) AMPTonePlayer* tonePlayer;
@property(retain, nonatomic) NLCallUserInfo* userInfo;
@property(retain, nonatomic) UILabel* callerIdStatusMessage;
@property(retain, nonatomic) UIView* callerIdStatusView;
@property(retain, nonatomic) UILabel* networkStatusMessage;
@property(retain, nonatomic) UIView* networkStatusView;
@property(retain, nonatomic) UIView* callStatusBarCenter;
@property(retain, nonatomic) UILabel* callStatusBarDuration;
@property(retain, nonatomic) UILabel* callStatusBarTitle;
@property(retain, nonatomic) UIButton* callStatusBarButton;
@property(retain, nonatomic) UIView* callStatusCenterView;
@property(retain, nonatomic) UIView* viewCallStatusBar;
@property(retain, nonatomic) UIView* keypad;
@property(retain, nonatomic) UILabel* inputLabel;
@property(retain, nonatomic) UIView* keypadView;
@property(retain, nonatomic) UIView* callAnimationContainer;
@property(retain, nonatomic) UIView* callAnimationGreen;
@property(retain, nonatomic) UIView* callAnimationGray;
@property(retain, nonatomic) UIButton* displayLineMenuButton;
@property(retain, nonatomic) UIButton* endButton;
@property(retain, nonatomic) UIButton* keypadButton;
@property(retain, nonatomic) UIButton* speakerButton;
@property(retain, nonatomic) UIButton* muteButton;
@property(retain, nonatomic) UILabel* callStatusInfoLabel_k;
@property(retain, nonatomic) UILabel* callStatusInfoLabel;
@property(retain, nonatomic) UILabel* profileNameLabel_k;
@property(retain, nonatomic) UILabel* profileNameLabel;
@property(retain, nonatomic) UIImageView* profileImage;
@property(retain, nonatomic) UIButton* hideButton_k;
@property(retain, nonatomic) UIButton* endButton_k;
-(void).cxx_destruct;
-(void)callerIdStatusChanged;
-(void)applicationWillEnterForeground;
-(void)receivedResultCodeAMPCallEventTypeConnected;
-(void)receivedResultCodeAMPCallEventTypeOfferNewCall;
-(void)receivedResultCodeAMPCallEventTypeWaitAccept;
-(void)updateViewCallerIdStatusSetHidden:(BOOL)hidden;
-(void)presentNetworkStatus:(int)status;
-(void)updateViewNetworkStatusSetHidden:(BOOL)hidden;
-(void)updateAcceptCall;
-(void)showVoiceCallingView;
-(void)updateCallViewErrorNotSupproted;
-(void)processOnMinimizingCallView;
-(void)processOnEnteringForeground;
-(void)playBalanceAlram;
-(void)updateCreditInfo:(int)info init:(BOOL)init;
-(void)showCallStatusBarDutation:(double)dutation isInit:(BOOL)init;
-(void)showCallStatusBarDutation:(id)dutation;
-(void)updateMuteButton;
-(void)updateSpeakerButton;
-(void)hideButtonAction:(id)action;
-(void)keypadButtonPress:(id)press;
-(void)keypadButtonAction:(BOOL)action;
-(void)speakerButtonAction:(id)action;
-(void)_toggleS:(id)s;
-(void)muteButtonAction:(id)action;
-(void)_toggleM:(id)m;
-(void)callStatusBarControlTouched:(id)touched;
-(void)minimizeButtonPressed:(id)pressed;
-(void)endButtonAction:(id)action;
-(void)layoutCallerIdStatusView:(id)view;
-(void)layoutNetworkStatusView:(id)view;
-(void)layoutCallStatusBar;
-(void)layoutDisplayMenuButton;
-(void)layoutSubViews;
-(unsigned)supportedInterfaceOrientations;
-(void)endCallingAnimation;
-(void)startCallingAnimation;
-(void)dealloc;
-(void)setAnimationView;
-(void)updateLineCallPaidInfo:(id)info;
-(void)updateCallingUser:(id)user;
-(void)prepareLocalizedStrings;
-(void)resetViews;
-(void)initViewController;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLResizableNavigationBar : UINavigationBar {
	CGSize _newSize;
}
@property(assign, nonatomic) CGSize newSize;
-(CGSize)sizeThatFits:(CGSize)fits;
@end

__attribute__((visibility("hidden")))
@interface VoIPService : NSObject {
}
+(BOOL)hasPendingRequestForCallRoute;
+(void)cancelPendingRequestForCallRoute;
+(void)issueVoIPRouteForUser:(id)user completionBlock:(id)block errorBlock:(id)block3;
+(void)issueVoIPTicketForUser:(id)user completionBlock:(id)block errorBlock:(id)block3;
@end

__attribute__((visibility("hidden")))
@interface ProgressView : LineProgressInterface {
	BOOL _hidesTitle;
	BOOL _hidesProgressText;
	BOOL _hidesWhenCompleted;
	UILabel* _titleLabel;
	UIProgressView* _progressBar;
	UILabel* _progressLabel;
	UIButton* _cancelButton;
	unsigned _style;
	unsigned _cancelButtonStyle;
	id<LineProgressDelegate> _delegate;
}
@property(retain, nonatomic) NSString* progressText;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) BOOL hidesWhenCompleted;
@property(assign, nonatomic) BOOL hidesProgressText;
@property(assign, nonatomic) BOOL hidesTitle;
@property(assign, nonatomic) unsigned cancelButtonStyle;
@property(assign, nonatomic) unsigned style;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UILabel* progressLabel;
@property(retain, nonatomic) UIProgressView* progressBar;
@property(retain, nonatomic) UILabel* titleLabel;
+(id)viewFromNib;
+(int)viewTag;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void).cxx_destruct;
-(void)cancelButtonPressed:(id)pressed;
-(float)progress;
-(void)setProgress:(float)progress;
-(void)layoutSubviews;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface CallSettingsViewController : NLTableViewController {
	BOOL changedSettings;
}
-(void)toggleCallAllow:(id)allow;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillDisappear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)loadView;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLMessageCallView : UIView <NLMessageContentSelectable> {
	BOOL _selected;
	unsigned _bubbleType;
	unsigned _resultImageType;
	UIImageView* _bgImageView;
	UIImageView* _phoneImageView;
	UILabel* _textLabel;
	unsigned _callPhoneImageType;
	UILabel* _lineCallLabel;
	UIView* _maskView;
	UIImage* _maskImage;
}
@property(assign, nonatomic, getter=isSelected) BOOL selected;
@property(retain, nonatomic) UIImage* maskImage;
@property(retain, nonatomic) UIView* maskView;
@property(retain, nonatomic) UILabel* lineCallLabel;
@property(retain, nonatomic) UIImageView* phoneImageView;
@property(retain, nonatomic) UIImageView* bgImageView;
@property(retain, nonatomic) UILabel* textLabel;
@property(assign, nonatomic) unsigned callPhoneImageType;
@property(assign, nonatomic) unsigned resultImageType;
@property(assign, nonatomic) unsigned bubbleType;
+(int)viewTag;
-(void).cxx_destruct;
-(void)updateMaskImage;
-(CGRect)maskViewFrame;
-(void)layoutMaskView;
-(void)removeMaskView;
-(void)addMaskViewWithAlpha:(float)alpha;
-(BOOL)render;
-(void)layoutSubviews;
-(void)layout;
-(id)initWithFrame:(CGRect)frame;
-(void)initSubviews;
-(void)changePhoneImage;
-(void)changeLinecallLabelProperty;
-(void)changeTextLabelProperty;
-(void)changeBgSourceImage;
@end

__attribute__((visibility("hidden")))
@interface NLTouchTesterForAnotherView : UIView {
	UIView* targetView_;
	BOOL haveDetectedTouch;
}
-(void).cxx_destruct;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(id)initWithRegisteredView:(id)registeredView;
@end

__attribute__((visibility("hidden")))
@interface BWCrashReportTextFormatter : NSObject {
}
+(id)stringValueForCrashReport:(id)crashReport;
+(id)formatStackFrame:(id)frame frameIndex:(unsigned)index report:(id)report;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupSettingViewController : MBViewController <UITableViewDelegate, UITableViewDataSource, NSFetchedResultsControllerDelegate> {
	UITableView* mTableView;
	UIImageView* mSettingView;
	UIButton* mAddGroupButton;
	UIButton* mSettingsButton;
	NSFetchedResultsController* mFetchedResultsController;
}
-(void).cxx_destruct;
-(void)didFinishedPickFriends:(id)friends friends:(id)friends2;
-(void)controllerDidChangeContent:(id)controller;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)managedObjectAtIndexPath:(id)indexPath;
-(void)setActionAtMessageCell:(id)messageCell;
-(void)setActionAtGroupEditCell:(id)groupEditCell;
-(id)noDataCellForTableView:(id)tableView;
-(id)cellForTableView:(id)tableView managedObject:(id)object;
-(void)layoutSettingView;
-(void)initSettingView;
-(void)initTableView;
-(void)initNavigationBar;
-(void)close:(id)close;
-(void)moveToFriendsPickerViewController;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MBRecallRecommendView : UIView <UITableViewDataSource, UITableViewDelegate> {
	NSMutableDictionary* mSelectedUserList;
	NSMutableArray* mFilteredListContent;
	NSMutableSet* mMaskedFriends;
	NSFetchedResultsController* mUsersFetchedResultsController;
	UITableView* mTableView;
	id mKeyboard;
	NSString* mSearchText;
	UILabel* mThemeLabel;
}
@property(readonly, assign, nonatomic) NSString* searchText;
-(void).cxx_destruct;
-(id)maskedFriends;
-(id)filteredListContent;
-(id)usersFetchedResultsController;
-(id)filterFriendContentForSearchText:(id)searchText;
-(void)filterContentForSearchText:(id)searchText;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)setFriendNameLabel:(id)label;
-(id)userCellForTableView:(id)tableView managedObject:(id)object;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)recallInfoWithLocation:(NSRange)location forKey:(id)key;
-(id)recallInfosWithInputInfos:(id)inputInfos;
-(void)reset;
-(void)removeRecallUserWithDisplayName:(id)displayName;
-(void)insertRecallUserWithDisplayName:(id)displayName mid:(id)mid;
-(void)hide;
-(void)dealloc;
-(void)initilizeTableView;
-(id)initWithFrame:(CGRect)frame keyboard:(id)keyboard;
@end

__attribute__((visibility("hidden")))
@interface LGLogger : NSObject {
	int logLevel;
}
@property(assign, nonatomic) int logLevel;
+(id)sharedInstance;
-(id)descriptionOfLogLevel;
-(void)logWithLogLevel:(int)logLevel logFormat:(id)format;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLPasswordInputView : UIView <UITextFieldDelegate> {
	BOOL _hidesConfirmTextField;
	NSRegularExpression* _nonNumberRegularExpression;
	id<NLPasswordInputViewDelegate> _delegate;
	UILabel* _descriptionLabel;
	UILabel* _passwordTitleLabel;
	NLCustomField* _passwordTextField;
	NLCustomField* _confirmTextField;
	UIButton* _confirmButton;
	UIButton* _skipButton;
	int _minimumPasswordLength;
	int _maximumPasswordLength;
	int _keyboardType;
}
@property(readonly, assign, nonatomic) NSRegularExpression* nonNumberRegularExpression;
@property(assign, nonatomic) int keyboardType;
@property(assign, nonatomic) BOOL hidesConfirmTextField;
@property(assign, nonatomic) int maximumPasswordLength;
@property(assign, nonatomic) int minimumPasswordLength;
@property(retain, nonatomic) UIButton* skipButton;
@property(retain, nonatomic) UIButton* confirmButton;
@property(retain, nonatomic) NLCustomField* confirmTextField;
@property(retain, nonatomic) NLCustomField* passwordTextField;
@property(retain, nonatomic) UILabel* passwordTitleLabel;
@property(retain, nonatomic) UILabel* descriptionLabel;
@property(assign, nonatomic) id<NLPasswordInputViewDelegate> delegate;
-(void).cxx_destruct;
-(void)skipButtonPressed:(id)pressed;
-(void)confirmButtonPressed:(id)pressed;
-(void)textFieldDidChange:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(void)_configurePasswordTextField:(id)field;
-(void)initialize;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NMAttributedLabel : UIView <NMTextSelectorViewDelegate> {
	NSAttributedString* mText;
	NSMutableArray* mLayers;
	float mFontAscent;
	float mFontDescent;
	int mEditingLineIndex;
	NSRange mHighlightedRange;
	NSRange mGoingToHighlightRange;
	BOOL mCancelStartHighlight;
	BOOL mCancelEndHighlight;
	BOOL mCancelOpen;
	id mDelegate;
	UIColor* mHighlightColor;
	NSValue* mLastTouchBeganTarget;
	NSRange mPossibleLinkRange;
	UIColor* mLinkHighlightedColor;
	BOOL mIsWaitingForCopySelection;
	BOOL mCancelCopy;
	BOOL mIsSelectingAll;
	BOOL mCancelRepop;
	BOOL mIsMenuVisible;
	BOOL mIsShowingCandidates;
	id mFirstResponder;
	BOOL mIsViewHighlighted;
	BOOL mShouldDrawTightly;
	NSMutableArray* mLinePositions;
	float mLineSpacingWhenDrawingTightly;
	float mLastLineBottomInset;
	int mInterfaceOrientation;
	BOOL mEnabledHighlightColor;
	BOOL mEnabledTappedOnlyEvent;
	BOOL mIsSelectale;
	NSSet* mDisabledMenuItems;
}
@property(assign, nonatomic) BOOL isSelectable;
@property(retain, nonatomic) NSSet* disabledMenuItems;
@property(retain, nonatomic) UIColor* linkHighlightedColor;
@property(assign, nonatomic) BOOL enabledTappedOnlyEvent;
@property(assign, nonatomic) BOOL enabledHighlightColor;
@property(assign, nonatomic) float lineSpacingWhenDrawingTightly;
@property(assign, nonatomic) BOOL shouldDrawTightly;
@property(readonly, assign, nonatomic) int numberOfLines;
@property(assign, nonatomic) BOOL isShowingCandidates;
@property(assign, nonatomic) BOOL isMenuVisible;
@property(retain, nonatomic) NSAttributedString* attributedString;
@property(assign, nonatomic) id<NMAttributedLabelDelegate> delegate;
+(XXStruct_MSEYlC)runDelegateCallbacks;
-(void).cxx_destruct;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(NSRange)nearestLinkRangeAroundPoint:(CGPoint)point;
-(BOOL)canDetectLinkRange:(NSRange*)range atPoint:(CGPoint)point;
-(NSRange)getLinkRangeAroundIndex:(int)index;
-(void)didHideMenu;
-(void)willHideMenu;
-(void)willShowMenu;
-(void)orientationChanged:(id)changed;
-(void)selectAll:(id)all;
-(void)invokeLinkDelegateMethod;
-(NSRange)getHighlightRagneForDelegate;
-(void)endHighlight;
-(void)beginHighlight:(id)highlight;
-(void)selectorViewResignSelectorViewDelegate;
-(void)selectorViewSelectionEnded;
-(void)selectorViewEndSelectorMoved:(CGPoint)moved;
-(void)selectorViewStartSelectorMoved:(CGPoint)moved;
-(void)beginCopy:(id)copy;
-(void)popupMenu;
-(CGRect)rectContainsAllRects:(id)rects;
-(void)copy:(id)copy;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)resignFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(BOOL)isSelectedAll;
-(void)postNotificationWhenTappedNoLink;
-(int)binarySearchIndexForLines:(id)lines point:(CGPoint)point min:(int)min max:(int)max;
-(NSRange)findRangeWithPosition:(CGPoint)position;
-(void)drawRect:(CGRect)rect;
-(float)getHeightAfterDraw;
-(float)getWidthFromFrame;
-(id)getLineYPositions;
-(void)setEnabledHighlightWithHighlightedAttrString:(id)highlightedAttrString;
-(BOOL)isHighlighted;
-(BOOL)setHighlighted:(BOOL)highlighted;
-(id)humanReadableStringForRange:(NSRange)range;
-(id)rawSticonStringForRange:(NSRange)range;
-(int)closestIndexToPoint:(CGPoint)point;
-(id)rectsForRange:(NSRange)range;
-(id)contRectsForRange:(NSRange)range;
-(id)rectsForRange:(XXStruct_K5nmsA)range inRun:(CTRunRef)run line:(CTLineRef)line index:(int)index finalIndex:(int)index5 frameOrigin:(CGPoint)origin lineOrigin:(CGPoint)origin7 lineHeight:(float)height lineYPos:(float)pos;
-(CGRect)rectForRange:(NSRange)range;
-(CGRect)boundsWithWidth:(float)width;
-(void)clearSelectionAndQuitCopyMode;
-(void)getLineOrigin:(CTFrameRef)origin atIndex:(int)index point:(CGPoint*)point;
-(float)getBaseOriginY;
-(void)setHighlightRange:(NSRange)range;
-(void)setFrame:(CGRect)frame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(void)setupMenuControllerTestView;
-(id)accessibilityLabel;
-(BOOL)isAccessibilityElement;
-(void)doLayout;
-(void)resetCellData;
-(void)drawCellData;
-(id)getCellAttributeString;
-(void)setCellData:(id)data path:(id)path;
-(CGSize)preferredSizeThatFits:(CGSize)fits;
-(id)getDrawCellData;
-(void)setCellAttributeString:(id)string;
-(id)cellAttributeString;
-(void)setDrawCellDataBlock:(id)block;
-(void)setCellAttributeStringCallBlock:(id)block;
-(void)drawNaverEmojis;
-(void)drawSticonOfPackageCode:(unsigned)packageCode code:(unsigned)code layer:(id)layer;
-(void)drawEllipsis;
-(void)drawViewBoundingBox;
-(void)drawGuideForComponentsAtContext:(CGContextRef)context;
-(void)drawHighlightForComponentsAtContext:(CGContextRef)context;
-(void)drawGuideForRunsInLine:(CTLineRef)line atContext:(CGContextRef)context lineTypoInfo:(id)info;
-(void)fillPath:(CGPathRef)path atContext:(CGContextRef)context;
-(void)drawPath:(CGPathRef)path atContext:(CGContextRef)context;
-(void)registerNotifications;
-(void)endSelection;
-(void)showMenu;
-(id)lineTypoInfo:(CTLineRef)info;
@end

__attribute__((visibility("hidden")))
@interface NMCaretView : UIView {
	NSTimer* mBlinkTimer;
}
-(void).cxx_destruct;
-(void)delayBlink;
-(void)dealloc;
-(void)didMoveToSuperview;
-(void)blink;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBAlertView : NSObject <UIAlertViewDelegate> {
	UIAlertView* mAlertView;
	NSMutableArray* mHandlers;
	BOOL mSynchronous;
	MBAlertView* mStrongSelf;
}
@property(assign, nonatomic, getter=isSynchronous) BOOL synchronous;
@property(readonly, assign, nonatomic, getter=isVisible) BOOL visible;
@property(copy, nonatomic) NSString* message;
@property(copy, nonatomic) NSString* title;
+(id)confirmAlertViewWithTitle:(id)title message:(id)message;
+(id)alertViewWithTitle:(id)title message:(id)message;
+(void)showErrorWithMessage:(id)message onView:(id)view;
+(void)showError:(id)error onView:(id)view;
+(id)errorDescriptionWithError:(id)error;
+(void)showAPIServerAlertViewWithError:(id)error confirmBlock:(id)block;
+(void)showServerErrorAlertViewWithBlock:(id)block;
+(void)showNetworErrorkAlertViewWithBlock:(id)block;
+(BOOL)isTemporaryError:(id)error;
+(BOOL)isNotReadyError:(id)error;
+(BOOL)isAPIError:(id)error;
+(BOOL)isUserNotFoundError:(id)error;
+(BOOL)isMaintenanceError:(id)error;
+(BOOL)isNetworkError:(id)error;
+(BOOL)isUseServerErrorMessage:(id)message;
+(BOOL)isCommentLikeNotAllowedError:(id)error;
+(BOOL)isActionNeedsError:(id)error;
+(void)showAlertViewWithError:(id)error confirmBlock:(id)block;
+(void)showServerErrorAlertViewWithMessage:(id)message block:(id)block;
+(void)showServerErrorAlertViewWithMessage:(id)message;
+(void)showServerErrorAlertView;
+(void)showNetworkAlertView;
-(void).cxx_destruct;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)dismissWithClickedButtonIndex:(int)clickedButtonIndex animated:(BOOL)animated;
-(void)show;
-(void)addBlockForConfirmAlert:(id)confirmAlert;
-(int)addButtonWithTitle:(id)title block:(id)block;
-(int)addButtonWithTitle:(id)title invocation:(id)invocation;
-(int)addButtonWithTitle:(id)title target:(id)target action:(SEL)action object:(id)object;
-(void)dealloc;
-(id)initWithTitle:(id)title message:(id)message cancelButton:(id)button otherButton:(id)button4;
@end

__attribute__((visibility("hidden")))
@interface LGConfig : NSObject {
	BOOL _canMultiSelect;
	BOOL _groupingByDate;
	BOOL _isStatusBarHiddenAlways;
	BOOL _disableUpdatingForALAssetsDidChangedNotification;
	BOOL _usingAssetsFilterFirstOnly;
	BOOL _usingAssetsPartiallyLoad;
	BOOL _usingPreview;
	BOOL _usingInstantView;
	BOOL _usingSortOption;
	BOOL _usingEdit;
	BOOL _isSupportedTakingPhoto;
	BOOL _usingSendToLineAlbum;
	BOOL _isSupportedRedesign;
	NSString* _bundleName;
	int _pickerType;
	unsigned _maxSelectCount;
	id<LGImagePickerDelegate> _imagePickerDelegate;
	NSSet* _supportedInterfaceOrientationSet;
	unsigned _supportedInterfaceOrientationMask;
	UIViewController* _pickerParentViewController;
	int _imageEndPresentStyle;
	CGSize _cropSize;
	double _maxVideoDuration;
}
@property(assign, nonatomic) double maxVideoDuration;
@property(assign, nonatomic) BOOL isSupportedRedesign;
@property(assign, nonatomic) BOOL usingSendToLineAlbum;
@property(assign, nonatomic) BOOL isSupportedTakingPhoto;
@property(assign, nonatomic) CGSize cropSize;
@property(assign, nonatomic) BOOL usingEdit;
@property(assign, nonatomic) int imageEndPresentStyle;
@property(assign, nonatomic) BOOL usingSortOption;
@property(assign, nonatomic) BOOL usingInstantView;
@property(assign, nonatomic) BOOL usingPreview;
@property(assign, nonatomic) __weak UIViewController* pickerParentViewController;
@property(assign, nonatomic) unsigned supportedInterfaceOrientationMask;
@property(retain, nonatomic) NSSet* supportedInterfaceOrientationSet;
@property(assign, nonatomic) __weak id<LGImagePickerDelegate> imagePickerDelegate;
@property(assign, nonatomic) BOOL usingAssetsPartiallyLoad;
@property(assign, nonatomic) BOOL usingAssetsFilterFirstOnly;
@property(assign, nonatomic) BOOL disableUpdatingForALAssetsDidChangedNotification;
@property(assign, nonatomic) BOOL isStatusBarHiddenAlways;
@property(assign, nonatomic) BOOL groupingByDate;
@property(assign, nonatomic) unsigned maxSelectCount;
@property(assign, nonatomic) BOOL canMultiSelect;
@property(assign, nonatomic) int pickerType;
@property(retain, nonatomic) NSString* bundleName;
+(id)configWithConfig:(id)config;
+(id)multiVideoSelectConfigWithParentViewController:(id)parentViewController imagePickerDelegate:(id)delegate maxSelectCount:(unsigned)count maxVideoDuration:(double)duration;
+(id)singleVideoSelectConfigWithParentViewController:(id)parentViewController imagePickerDelegate:(id)delegate maxVideoDuration:(double)duration;
+(id)multiImageSelectConfigWithParentViewController:(id)parentViewController imagePickerDelegate:(id)delegate maxSelectCount:(unsigned)count;
+(id)singleImageSelectConfigWithParentViewController:(id)parentViewController imagePickerDelegate:(id)delegate;
+(id)commonConfig;
+(BOOL)getShowFilterViewFlag;
+(void)saveShowFilterViewFlag:(BOOL)flag;
-(void).cxx_destruct;
-(void)restoreSortOption;
-(void)saveSortOption;
-(void)toNotSupportRotationConfig;
-(void)toLINEConfig;
@end

__attribute__((visibility("hidden")))
@interface NLCallCurrencySettingViewController : NLCallSettingCommonTableSubViewController <UITableViewDataSource, UITableViewDelegate> {
	NSArray* _currencyList;
	NSString* _selectedCurrencyCode;
	unsigned _selectedIndex;
	UILabel* _footerViewLabel;
}
@property(retain, nonatomic) UILabel* footerViewLabel;
@property(assign, nonatomic) unsigned selectedIndex;
@property(retain, nonatomic) NSString* selectedCurrencyCode;
@property(retain, nonatomic) NSArray* currencyList;
-(void).cxx_destruct;
-(void)setFooter;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)loadCurrencyList;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface NMEmojiManager : NSObject {
	NSMutableArray* _packages;
	NLStraySticonDownloadQueueArray* _straySticonDownloadQueue;
	BOOL _isDownloadingStraySticon;
	NSMutableArray* _packageDownloadQueue;
	NSMutableDictionary* _tappednewVersionDictionary;
	NSCache* _imageCache;
	unsigned _defaultPackagePkgCode;
	NSArray* _packageIDs;
	id<LineSticonPackageManagerDelegate> _keyboardDelegate;
	XXStruct_PILIWD _lastSendingStickerTuple;
}
@property(assign, nonatomic) id<LineSticonPackageManagerDelegate> keyboardDelegate;
@property(assign, nonatomic) XXStruct_PILIWD lastSendingStickerTuple;
@property(readonly, assign, nonatomic) NSArray* packageIDs;
@property(readonly, assign, nonatomic) NSArray* packages;
+(id)imageCacheKeyWithPKG_CODE:(unsigned)pkg_CODE CODE:(unsigned)code type:(unsigned)type;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)didReceiveMemoryWarningNotification:(id)notification;
-(void)jibaku;
-(id)blueCallSticonMetadata;
-(id)greenCallSticonMetadata;
-(void)removeDelegate:(id)delegate;
-(void)setDelegate:(id)delegate;
-(void)_invokeCompletionBlockAndRemoveFromQueue:(long long)queue;
-(void)_showDownloadFailureAlertWithDownloadInfo:(id)downloadInfo;
-(void)proceedDownloadingPackage;
-(void)downloadPackage:(id)package completionBlock:(id)block;
-(void)silentlyDownloadPackage:(id)package completionBlock:(id)block;
-(BOOL)isPackageInDownloadQueue:(id)downloadQueue;
-(void)downloadStraySticon;
-(BOOL)isNewPackage:(long long)package;
-(void)tappedPackage:(long long)package;
-(id)imageForPKG_CODE:(unsigned)pkg_CODE CODE:(unsigned)code type:(unsigned)type;
-(id)packageContainsStickerId:(long long)anId;
-(id)packageWithPackageCODE:(unsigned)packageCODE;
-(id)packageWithID:(long long)anId;
-(id)activePackageIDs;
-(unsigned)maximumEmojiCount;
-(unsigned)defaultPackagePkgCode;
-(void)saveSummary;
-(void)loadSummary;
-(id)summaryFileURLPath;
-(void)loadTabImages;
-(void)checkUpdates;
-(id)packageByCreatingNewDirectoryForPackageId:(int)packageId version:(int)version;
-(void)checkOwnedProductSummariesIfNeeded;
-(void)updateSticonMetadataByUEN;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineHiddenSettingHeaderCell : UITableViewCell {
}
+(float)height;
+(id)descLabel;
+(id)timelineHiddenSettingHeaderCell:(id)cell;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBPostDetailViewController : MBActivityEndViewController <UITableViewDelegate, UITableViewDataSource, MBTableViewPullDelegate, MBPostManagerDelegate, NSFetchedResultsControllerDelegate, MBLikeLayerViewDelegate, MBActorObserving, UIActionSheetDelegate, UIActionSheetDelegate, UITextViewDelegate> {
	MBPostDetailViewControllerActions* mDetailActions;
	MBTableView* mTableView;
	MBLikeLayerView* mLikeLayer;
	UIView* mKeyboardView;
	UIButton* mKeyboardActionView;
	BOOL mCommentEditable;
	BOOL mKeyboardVisible;
	BOOL mStickerSended;
	MBMyHomeViewController* mMyHomeViewController;
	MBRecallRecommendView* mRecallRecommendView;
	CGRect mLikeAreaRect;
	NSDictionary* mActionSheetInfo;
	NSError* mPostError;
	CGRect mKeyboardRect;
	LineMyhomeKeyboard* mKeyboard;
	UIButton* mEditableBlindView;
	NLStickerPreview* _stickerPreview;
	NSMutableSet* _playedStickers;
	BOOL mIsNotiCalled;
	BOOL mIsLoad;
	BOOL mIsHomeManager;
}
@property(retain, nonatomic) MBMyHomeViewController* myHomeViewController;
@property(assign, nonatomic) BOOL isHomeManager;
@property(assign, nonatomic, getter=isKeyboardVisible) BOOL keyboardVisible;
@property(assign, nonatomic, getter=isCommentEditable) BOOL commentEditable;
-(void).cxx_destruct;
-(void)navigationBarTitleTapped:(id)tapped;
-(void)moveToHome:(id)home;
-(void)textViewDidChange:(id)textView;
-(float)maxTextViewHeight;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)didTapped:(id)tapped;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showEditForm;
-(void)showDeleteAlert;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)openStickerPackage:(id)package;
-(void)showStickerPreviewGuide;
-(void)configureStickerPreview:(id)preview;
-(void)saveStickerInputHistory;
-(void)hideStickerPreviewGuide;
-(void)hideStickerPreview;
-(id)stickerPreviewStickerID;
-(id)stickerPreview;
-(void)growingTextViewDidChangeSelection;
-(void)didChangedRecallUserNameInTextView:(id)textView;
-(void)showAlert;
-(void)createCommentWithData:(id)data;
-(void)sendTapped:(id)tapped;
-(void)stickerTapped:(id)tapped;
-(void)emojiButtonToggle:(id)toggle;
-(void)onFocusMessageBar:(id)bar;
-(void)keyboardViewDidChange;
-(void)likeLayerView:(id)view didLikeButtonActionWithLikeType:(id)likeType;
-(void)keyboardViewCancel;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)activityDidDeleteWithId:(id)activity;
-(void)likeLayerDidHide:(id)likeLayer;
-(void)likeLayerDidShow:(id)likeLayer;
-(void)hideToastInAlertView;
-(void)postManager:(id)manager didFinishDeletingLikeWithError:(id)error;
-(void)postManager:(id)manager didFinishCreatingLikeWithError:(id)error;
-(void)postManager:(id)manager didFinishDeletingCommentWithError:(id)error;
-(void)postManager:(id)manager didFinishCreatingCommentWithError:(id)error;
-(void)didFinishCreateingCommentWithError:(id)error;
-(void)postManager:(id)manager didFinishDeletingPostWithError:(id)error;
-(void)dataManager:(id)manager didFinishUpdatingWithError:(id)error;
-(void)dataManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)reloadTableView;
-(void)reloadDataTableView;
-(void)startUpdate:(id)update;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)update;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)insertRecallUserForComment:(id)comment;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)commentMoreCellForRowAtIndexPath:(id)indexPath;
-(id)marginCellForRowAtIndexPath:(id)indexPath;
-(id)messageCellForRowAtIndexPath:(id)indexPath;
-(id)commentCellForRowAtIndexPath:(id)indexPath aTableView:(id)view;
-(id)postCellForRowAtIndexPath:(id)indexPath aIndexPath:(id)path;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)reLayoutVisibleCells;
-(void)viewWillDisappearWithPhotoViewer:(id)view;
-(void)viewWillAppearWithPhotoViewer:(id)view;
-(void)willEnterForeground:(id)foreground;
-(void)unRegistDetailNotification;
-(void)registDetailNotification;
-(void)registPhotoViewerNotification;
-(void)setNotificationForViewWillAppear;
-(void)setNotificationForViewWillDisappear;
-(void)setInAppBrowserWillDisappear;
-(void)setInAppBrowserWillAppear;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)checkSnapMovieType;
-(void)viewDidLoad;
-(void)callCancelBlockAction;
-(void)callAddFriendAction;
-(void)setupKeyboardAction;
-(void)resizeRecallRecommendView;
-(void)setTitle:(id)title;
-(void)setNavigationBarRightButton;
-(void)showShareActionSheet;
-(void)setNavigationBarTitleWithNickName:(id)nickName;
-(void)setNavigationBar;
-(void)setTableviewHeader;
-(BOOL)confirmError:(id)error;
-(void)messageSendBarClear:(id)clear;
-(void)becomeFirstResponderMessageSendBar;
-(void)showLikeLayer:(id)layer;
-(void)resizeCommentView;
-(void)focusingForLikeLayer;
-(void)setLikeAreaRectOfPostView;
-(BOOL)isLowSystemVersion;
-(void)scrollToBottom;
-(void)didEnterBackground:(id)background;
-(id)detailActions;
-(void)dealloc;
-(void)deallocKeyboard;
-(id)getKeyboard;
-(id)initForTestOnlyWithActivity:(id)activity sourceType:(id)type;
-(id)initWithActivity:(id)activity sourceType:(id)type;
-(id)initWithPostID:(id)postID userMID:(id)mid sourceType:(id)type;
-(void)showPostDetailErrorAlert:(id)alert;
-(void)disappearDetailViewController;
-(void)dismissDetailViewControllerNoAni;
-(void)dismissDetailViewController;
-(void)dismissDetailView:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface NMFrame : NSObject {
	float mConstrainedWidth;
	CGSize mSize;
	CTFrameRef mFrameRef;
	CTFrameRef mHighlightedFrameRef;
	float mLastDescent;
	float mTopMargin;
	float mOverWidth;
	BOOL mIsTruncated;
	BOOL mIsRTL;
	CTLineRef mTokenLine;
	CTLineRef mHighlightedTokenLine;
	NSAttributedString* mTokenText;
	BOOL mHasInvalidCharactor;
}
@property(readonly, assign, nonatomic) NSAttributedString* tokenText;
@property(readonly, assign, nonatomic) CTLineRef highlightedTokenLine;
@property(readonly, assign, nonatomic) CTLineRef tokenLine;
@property(readonly, assign, nonatomic) BOOL isRTL;
@property(readonly, assign, nonatomic) BOOL hasInvalidCharactor;
@property(readonly, assign, nonatomic) BOOL isTruncated;
@property(readonly, assign, nonatomic) float overWidth;
@property(readonly, assign, nonatomic) float topMargin;
@property(readonly, assign, nonatomic) float lastDescent;
@property(readonly, assign, nonatomic) CTFrameRef highlightedFrameRef;
@property(readonly, assign, nonatomic) CTFrameRef frameRef;
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, assign, nonatomic) float constrainedWidth;
-(void).cxx_destruct;
-(void)dealloc;
-(id)initWithAttributedString:(id)attributedString constrainedToSize:(CGSize)size;
-(id)initWithAttributedString:(id)attributedString constrainedToSize:(CGSize)size truncated:(BOOL)truncated withToken:(id)token;
-(id)initWithAttributedString:(id)attributedString constrainedToSize:(CGSize)size truncated:(BOOL)truncated;
-(CTFrameRef)createCTFrameWithAttributedString:(id)attributedString constrainedToSize:(CGSize)size;
-(CTFrameRef)createCTFrameWithAttributedString:(id)attributedString constrainedToSize:(CGSize)size truncated:(BOOL)truncated;
-(void)replaceHighlightedFrameRef:(CTFrameRef)ref;
@end

__attribute__((visibility("hidden")))
@interface NMIndexedPosition : UITextPosition {
	unsigned mIndex;
	id<UITextInputDelegate> mInputDelegate;
}
@property(assign, nonatomic) unsigned index;
+(id)positionWithIndex:(unsigned)index;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface NMIndexedRange : UITextRange {
	NSRange mRange;
}
@property(assign, nonatomic) NSRange range;
+(id)rangeWithNSRange:(NSRange)nsrange;
-(BOOL)isEmpty;
-(id)end;
-(id)start;
@end

__attribute__((visibility("hidden")))
@interface NMLoupeManager : UIView {
	id mDelegate;
	UIView* mTargetView;
	UIWindow* mLoupeLayer;
	UIWindow* mPrimaryWindow;
	UIView* mLoupe;
	UIImageView* mLoupeContent;
	NSMutableArray* mDelegateArray;
	NSTimer* mTimer;
	UITouch* mTouch;
	CGPoint mFadeOutPoint;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedLoupeManager;
-(void).cxx_destruct;
-(void)removeDelegate:(id)delegate;
-(void)addDelegate:(id)delegate;
-(void)initLoupeWindow;
-(void)updateLayerStatus;
-(id)init;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)hideLoupeAtPoint:(CGPoint)point inView:(id)view;
-(void)showLoupeAtPoint:(CGPoint)point inView:(id)view;
-(void)moveLoupeAtPoint:(CGPoint)point inView:(id)view;
-(void)hideLoupe;
-(void)showLoupe;
-(BOOL)isShowingLoupe;
-(void)updateLoupeAndCallDelegate;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(id)screenshotOnRect:(CGRect)rect;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NMTextSelectorView : UIView {
	id mDelegate;
	UIView* mTargetView;
	UIView* mStartSelector;
	UIView* mEndSelector;
	UIView* mStartBorder;
	UIView* mEndBorder;
	UIImageView* mStartSelectorImage;
	UIImageView* mEndSelectorImage;
	UIView* mLens;
	UIImageView* mLensContent;
	BOOL mIsDraggingStartSelector;
	BOOL mIsDraggingEndSelector;
	CGPoint mBorderPoints[4];
	UIWindow* mLensLayer;
	UIWindow* mPrimaryWindow;
	BOOL mWillBeDeselected;
	float mYAdjustValue;
}
@property(readonly, assign, nonatomic) BOOL willBeDeselected;
@property(readonly, assign, nonatomic) id delegate;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedSelectorView;
-(void).cxx_destruct;
-(void)dealloc;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)refreshByTouch:(id)touch;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)moveLensAtPoint:(CGPoint)point inView:(id)view;
-(void)setTextRects:(id)rects;
-(void)removeDelegate:(id)delegate;
-(void)setInView:(id)view;
-(void)setVisible:(BOOL)visible;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
-(void)orientationChanged:(id)changed;
-(void)setYAdjustValue:(float)value;
-(void)hideLens;
-(void)showLens;
-(void)showMenu;
-(BOOL)isEndSelectorInEdgeOf:(id)of;
-(BOOL)isStartSelectorInEdgeOf:(id)of;
-(id)getBorderSuperView:(id)view;
-(id)getVisibilityDelegate:(id)delegate;
-(void)hideMenu;
-(void)registerNotifications;
-(id)screenshotOnRect:(CGRect)rect;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NMTypoInfo : NSObject {
	float mAscent;
	float mDescent;
	float mLeading;
	double mWidth;
	CGPoint mOrigin;
}
@property(assign, nonatomic) CGPoint origin;
@property(assign, nonatomic) double width;
@property(assign, nonatomic) float leading;
@property(assign, nonatomic) float descent;
@property(assign, nonatomic) float ascent;
-(CGRect)frame;
-(CGRect)bounds;
-(id)initWithCTLine:(CTLineRef)ctline;
-(id)initWithCTRun:(CTRunRef)ctrun range:(XXStruct_K5nmsA)range;
-(id)initWithAscent:(float)ascent descent:(float)descent leading:(float)leading width:(double)width;
@end

__attribute__((visibility("hidden")))
@interface MBStickerContentView : MBBaseChildCellView <UIGestureRecognizerDelegate> {
	int _postViewType;
	NLAnimationImageView* _stickerView;
	UITapGestureRecognizer* _tapGesture;
	UIImageView* _speakerView;
	BOOL _isShare;
	BOOL _isLockPlayAnimationAfterDownload;
	BOOL _needPlayAnimation;
	MBSticker* _sticker;
	NSString* _activityID;
}
@property(readonly, assign, nonatomic) NSString* activityID;
@property(assign, nonatomic) BOOL needPlayAnimation;
@property(retain, nonatomic) NLAnimationImageView* stickerView;
@property(assign, nonatomic) BOOL isLockPlayAnimationAfterDownload;
@property(assign, nonatomic) BOOL isShare;
@property(readonly, assign, nonatomic) MBSticker* sticker;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
+(UIEdgeInsets)marginWithType:(int)type activity:(id)activity;
-(void).cxx_destruct;
-(void)touchEndedAction;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)stickerTapped;
-(UIEdgeInsets)margin;
-(BOOL)isEqualSticker:(id)sticker;
-(void)didLoadedSticker:(id)sticker;
-(BOOL)needPlaySoundActivity;
-(void)playAnimationWithoutSound;
-(void)downloadAnimationSticker;
-(void)resetCellData;
-(void)drawCellData;
-(BOOL)isNoPurchasedSticker;
-(void)setCellData:(id)data;
-(void)dealloc;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(BOOL)isDownloadedSticker;
-(void)detailMenuItemSelected:(id)selected;
-(BOOL)canBecomeFirstResponder;
-(void)stickerLongPressed:(id)pressed;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface NLLEGYStatusBar : UIControl {
	UIImageView* _iconImageView;
	UILabel* _messageLabel;
}
@property(assign, nonatomic) UILabel* messageLabel;
@property(assign, nonatomic) UIImageView* iconImageView;
+(id)viewFromNib;
-(void)layoutSubviews;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageContentUploadOperation : NLObjectStorageOperation {
}
-(void)buildRequest;
@end

__attribute__((visibility("hidden")))
@interface LineCustomKeyboardView : NLFixedSizeInputView <UIInputViewAudioFeedback, UIAlertViewDelegate, LineEmojiKeyboardScrollViewDelegate> {
	UIResponder<UIKeyInput>* m_textInput;
	id<LineKeyboardDelegate> keyboardDelegate;
	id _stickerBackButtonAction;
	UIImageView* backgroundImageView;
	UIView* topLineView;
	LineCustomKeyboardScrollView* scrollView;
	LinePageControl* pageControl;
	LineStickerTabView* stickerTabView;
	LineSticonTabView* sticonTabView;
	unsigned currentTabType;
	unsigned _stickerTabViewOptions;
	id _sticonBackButtonAction;
}
@property(readonly, assign, nonatomic) BOOL enableInputClicksWhenVisible;
@property(copy, nonatomic) id stickerBackButtonAction;
@property(copy, nonatomic) id sticonBackButtonAction;
@property(assign, nonatomic) id<LineKeyboardDelegate> keyboardDelegate;
+(void)initialize;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)hideStickerPreview;
-(void)tappedStickerPreviewSettingButton:(id)button;
-(void)decorateButtonStyle:(id)style isGray:(BOOL)gray;
-(void)setupButtonForStickerPreview:(id)stickerPreview;
-(void)hideStickerPreviewGuide;
-(void)showStickerPreviewGuide;
-(void)layoutStickerPreview;
-(BOOL)isCurrentlySticonKeyboard;
-(BOOL)isCurrentlyStickerKeyboard;
-(void)selectLastPackageFromCurrentInvalidPackage:(id)currentInvalidPackage;
-(void)tappedKaomojiButton:(id)button;
-(void)addStickerInputHistory:(int)history;
-(void)tappedStickerButton:(id)button;
-(void)deleteEmoji:(id)emoji;
-(void)tappedEmojiButton:(id)button;
-(void)showKaomojiScrollView;
-(void)closeStickersTab;
-(void)closeSticonsTab;
-(void)removeStickersTab;
-(void)removeSticonsTab;
-(void)refreshStickerPackage:(id)package;
-(void)refreshSticonPackage:(id)package;
-(void)retryDownloadSticon:(id)sticon;
-(id)firstActiveDownloadedPackage;
-(void)openStickerPackage:(id)package isAllowGotoFirstPage:(BOOL)page;
-(void)openStickerPackage:(id)package;
-(void)openSticonPackage:(id)package isAllowGotoFirstPage:(BOOL)page;
-(void)openSticonPackage:(id)package;
-(void)openStickersTab;
-(void)showSticonScrollView;
-(void)openSticonTab;
-(void)pageControlValueChanged;
-(void)willMoveToSuperview:(id)superview;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initStickerOnlyWithBackButtonAction:(id)backButtonAction backgroundImage:(id)image;
-(id)initStickerOnlyWithBackButtonAction:(id)backButtonAction topBorder:(id)border;
-(void)openTabs;
-(id)initWithTextInput:(id)textInput tabViewOptions:(unsigned)options;
-(id)initWithTextInput:(id)textInput;
@end

__attribute__((visibility("hidden")))
@interface LineEmojiKeyboardScrollView : LineCustomKeyboardScrollView <UIScrollViewDelegate> {
	NSTimer* deleteTimer_;
	BOOL hasAdditionalView;
	UIScrollView* additionalView;
	id<LineEmojiKeyboardScrollViewDelegate> _deleteButtonTarget;
	id<LineProductPackageForKeyboard> _sticonPackage;
}
@property(retain, nonatomic) id<LineProductPackageForKeyboard> sticonPackage;
@property(assign, nonatomic) id<LineEmojiKeyboardScrollViewDelegate> deleteButtonTarget;
-(void).cxx_destruct;
-(void)deleteButtonStopDeleting;
-(void)deleteButtonDeleteFaster;
-(void)deleteButtonStartDeleting;
-(int)pageForButtonTag:(int)buttonTag;
-(int)tagForButtonOnPage:(int)buttonOnPage atIndex:(int)index;
-(void)setFrameForButton:(id)button onPage:(int)page atIndex:(int)index;
-(CGSize)sizeForButtonNumber:(int)buttonNumber;
-(int)maxNumberOfButtonsOnPage:(int)buttonsOnPage;
-(int)numberOfSpecialPages;
-(int)numberOfButtons;
-(UIEdgeInsets)landscapeMarginEdgeInsets;
-(UIEdgeInsets)portraitMarginEdgeInsets;
-(UIEdgeInsets)landscapeEdgeInsets;
-(UIEdgeInsets)portraitEdgeInsets;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(int)integerForButtonIndex:(int)buttonIndex;
-(id)stringForButtonIndex:(int)buttonIndex;
-(void)didConfigurePage:(int)page;
-(void)configureHistoryPage:(int)page;
-(BOOL)isLandscape;
-(void)layoutSubviews;
-(void)hideAdditionalView;
-(void)retryDownload;
-(void)showAdditionalViewForNeedToRetryState;
-(void)showAdditionalViewForDownloadingState;
-(void)showAndCleanAdditionalView;
-(void)configureButton:(id)button onPage:(int)page atIndex:(int)index;
-(void)configureButton:(id)button;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageRTSOperation : NLObjectStorageOperation {
}
-(void)buildRequest;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageRTSResponse : NSObject {
	BOOL directPlayable;
	BOOL seekable;
	BOOL livemode;
	NSString* result;
	NSString* resultMessage;
	NSString* streamingURL;
	NSString* downloadURL;
}
@property(assign, nonatomic) BOOL livemode;
@property(assign, nonatomic) BOOL seekable;
@property(retain, nonatomic) NSString* downloadURL;
@property(retain, nonatomic) NSString* streamingURL;
@property(assign, nonatomic) BOOL directPlayable;
@property(retain, nonatomic) NSString* resultMessage;
@property(retain, nonatomic) NSString* result;
+(id)RTSResponseFromJSONData:(id)jsondata;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LineCustomKeyboardScrollView : UIScrollView <UIScrollViewDelegate> {
	NSMutableSet* visibleButtons;
	NSMutableSet* recycledButtons;
	float m_lastBoundsWidth;
	int m_firstNeededPageIndex;
	int m_lastNeededPageIndex;
	LinePageControl* pageControl;
	id buttonTarget;
	SEL buttonAction;
	LineInputHistory* inputHistory;
}
@property(retain, nonatomic) LineInputHistory* inputHistory;
@property(assign, nonatomic) SEL buttonAction;
@property(assign, nonatomic) id buttonTarget;
@property(retain, nonatomic) LinePageControl* pageControl;
-(void).cxx_destruct;
-(void)configureDummyPage:(int)page;
-(void)configureHistoryPage:(int)page;
-(id)stickerCodes:(int)codes;
-(NSRange)rangeOfButtonIndicesForPage:(int)page;
-(int)pageForButtonRange:(NSRange)buttonRange;
-(int)pageForButtonTag:(int)buttonTag;
-(int)tagForButtonOnPage:(int)buttonOnPage atIndex:(int)index;
-(CGSize)sizeForButtonNumber:(int)buttonNumber;
-(int)numberOfSpecialPages;
-(int)numberOfPages;
-(int)maxNumberOfButtonsOnPage:(int)buttonsOnPage;
-(int)numberOfHistoryButtons;
-(int)numberOfButtons;
-(UIEdgeInsets)landscapeMarginEdgeInsets;
-(UIEdgeInsets)portraitMarginEdgeInsets;
-(UIEdgeInsets)landscapeEdgeInsets;
-(UIEdgeInsets)portraitEdgeInsets;
-(int)integerForButtonIndex:(int)buttonIndex;
-(id)stringForButtonIndex:(int)buttonIndex;
-(int)numberWithPage:(int)page index:(int)index;
-(CGPoint)contentOffsetForPage:(int)page;
-(CGRect)rectForPage:(int)page;
-(void)didConfigurePage:(int)page;
-(void)configureButton:(id)button onPage:(int)page atIndex:(int)index;
-(void)setFrameForButton:(id)button onPage:(int)page atIndex:(int)index;
-(void)playInputClick;
-(void)configureButton:(id)button;
-(void)enqueueButton:(id)button;
-(id)dequeueButton;
-(void)updateCurrentPageOfPageControl;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(BOOL)touchesShouldCancelInContentView:(id)touches;
-(void)recalculateContentSize;
-(void)layoutSubviews;
-(void)setNeedsLayout;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineHomeSettingViewController : MBViewController <UITableViewDelegate, UITableViewDataSource, MBHiddenManagerDelegate> {
	MBTableView* mTableView;
	MBHiddenManager* mHiddenManager;
	MBIndicatorLayerView* mIndicatorLayer;
	UIButton* mSyncButton;
}
-(void).cxx_destruct;
-(void)hiddenManager:(id)manager didFinishUpdateAutoOpenWithError:(id)error;
-(void)hiddenManager:(id)manager didFinishRequestAutoOpenWithError:(id)error;
-(void)setMovieAutoPlay:(id)play;
-(void)requestAutoOpen:(id)open;
-(void)setupFetchData;
-(void)syncButtonPressed:(id)pressed;
-(id)syncButton;
-(void)changedMainMenu:(id)menu;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)setTitle:(id)title;
-(void)setupNavigationBar;
-(void)showErrorAlert:(BOOL)alert;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoErrorView : UIView {
	id<LAPhotoErrorViewDelegate> _delegate;
	unsigned _index;
	NSError* _error;
	UIImageView* _iconImageView;
	UILabel* _detailLabel;
	UIButton* _button;
}
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UILabel* detailLabel;
@property(retain, nonatomic) UIImageView* iconImageView;
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) unsigned index;
@property(assign, nonatomic) id<LAPhotoErrorViewDelegate> delegate;
-(void).cxx_destruct;
-(BOOL)isAuthorizationError;
-(BOOL)isObjectStorageError;
-(BOOL)isNetworkError;
-(BOOL)isExpiredError;
-(BOOL)isNotFoundError;
-(BOOL)isSafeFilterError;
-(void)didTapButton:(id)button;
-(void)layoutSubviews;
-(void)setError:(id)error delegate:(id)delegate atIndex:(unsigned)index;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LAPullDownHeaderView : UIView {
	BOOL albumEnd;
	UIView* messageView;
	UIView* bottomLineView;
	NSString* subMessage;
	UIView* customView;
	UIActivityIndicatorView* activityIndicator;
	UILabel* messageLabel;
	UILabel* subMessageLabel;
	int state;
	NSTimer* _timer;
}
@property(retain, nonatomic) NSTimer* timer;
@property(assign, nonatomic) BOOL albumEnd;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) UILabel* subMessageLabel;
@property(retain, nonatomic) UILabel* messageLabel;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UIView* customView;
@property(copy, nonatomic) NSString* subMessage;
@property(retain, nonatomic) UIView* bottomLineView;
@property(retain, nonatomic) UIView* messageView;
-(void).cxx_destruct;
-(BOOL)isReadyState;
-(void)invalidateTimer;
-(void)onTimer:(id)timer;
-(void)startTimer;
-(void)setSubMessageIfNotNil:(id)aNil;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineStickerKeyboardScrollView : LineCustomKeyboardScrollView <UIActionSheetDelegate> {
	LineStickerPackage* stickerPackage;
	BOOL hasAdditionalView;
	UIScrollView* additionalView;
}
@property(retain, nonatomic) LineStickerPackage* stickerPackage;
+(void)initialize;
-(void).cxx_destruct;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)deletePackage;
-(void)rePurchase;
-(void)openDetailView;
-(BOOL)isLandscape;
-(void)layoutSubviews;
-(void)removeAdditionalViews;
-(void)showNoStickerLabel;
-(void)showPurchaseOrDeleteView;
-(void)showStickerAllDownloadView;
-(void)showAndCleanAdditionalView;
-(int)integerForButtonIndex:(int)buttonIndex;
-(id)stringForButtonIndex:(int)buttonIndex;
-(UIEdgeInsets)landscapeEdgeInsets;
-(UIEdgeInsets)portraitEdgeInsets;
-(CGSize)sizeForButtonNumber:(int)buttonNumber;
-(int)maxNumberOfButtonsOnPage:(int)buttonsOnPage;
-(int)numberOfSpecialPages;
-(int)numberOfButtons;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)configureButton:(id)button onPage:(int)page atIndex:(int)index;
-(void)configureHistoryPage:(int)page;
-(void)configureButton:(id)button;
@end

__attribute__((visibility("hidden")))
@interface MyProductObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _MyProductObject : NSManagedObject {
}
@property(retain, nonatomic) NSString* versionString;
@property(assign) long long versionValue;
@property(retain, nonatomic) NSNumber* version;
@property(retain, nonatomic) NSDate* validUntil;
@property(assign) int validForValue;
@property(retain, nonatomic) NSNumber* validFor;
@property(retain, nonatomic) NSDate* updateDate;
@property(assign) BOOL terminationAlertedValue;
@property(retain, nonatomic) NSNumber* terminationAlerted;
@property(assign) long long salesFlagsValue;
@property(retain, nonatomic) NSNumber* salesFlags;
@property(retain, nonatomic) NSString* productType;
@property(retain, nonatomic) NSString* productID;
@property(assign) short priceTierValue;
@property(retain, nonatomic) NSNumber* priceTier;
@property(retain, nonatomic) NSString* priceString;
@property(retain, nonatomic) NSString* priceInLineCoin;
@property(assign) short packageStatusValue;
@property(retain, nonatomic) NSNumber* packageStatus;
@property(assign) BOOL ownedValue;
@property(retain, nonatomic) NSNumber* owned;
@property(assign) BOOL onSaleValue;
@property(retain, nonatomic) NSNumber* onSale;
@property(retain, nonatomic) NSString* notice;
@property(retain, nonatomic) NSString* name;
@property(assign) short localVersionValue;
@property(retain, nonatomic) NSNumber* localVersion;
@property(retain, nonatomic) NSString* latestVersionString;
@property(assign) long long latestVersionValue;
@property(retain, nonatomic) NSNumber* latestVersion;
@property(retain, nonatomic) NSData* images;
@property(assign) BOOL grantedByDefaultValue;
@property(retain, nonatomic) NSNumber* grantedByDefault;
@property(assign) BOOL expiredAlertedValue;
@property(retain, nonatomic) NSNumber* expiredAlerted;
@property(assign) short displayOrderValue;
@property(retain, nonatomic) NSNumber* displayOrder;
@property(retain, nonatomic) NSString* details;
@property(retain, nonatomic) NSString* copyright;
@property(retain, nonatomic) NSString* billingItemId;
@property(assign) BOOL availableForPresentValue;
@property(retain, nonatomic) NSNumber* availableForPresent;
@property(assign) BOOL availableForMyselfValue;
@property(retain, nonatomic) NSNumber* availableForMyself;
@property(retain, nonatomic) NSString* author;
@property(retain, nonatomic) NSString* applicationVersionRange;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(void)setPrimitiveVersionValue:(long long)value;
-(long long)primitiveVersionValue;
-(void)setPrimitiveValidForValue:(int)value;
-(int)primitiveValidForValue;
-(void)setPrimitiveTerminationAlertedValue:(BOOL)value;
-(BOOL)primitiveTerminationAlertedValue;
-(void)setPrimitiveSalesFlagsValue:(long long)value;
-(long long)primitiveSalesFlagsValue;
-(void)setPrimitivePriceTierValue:(short)value;
-(short)primitivePriceTierValue;
-(void)setPrimitivePackageStatusValue:(short)value;
-(short)primitivePackageStatusValue;
-(void)setPrimitiveOwnedValue:(BOOL)value;
-(BOOL)primitiveOwnedValue;
-(void)setPrimitiveOnSaleValue:(BOOL)value;
-(BOOL)primitiveOnSaleValue;
-(void)setPrimitiveLocalVersionValue:(short)value;
-(short)primitiveLocalVersionValue;
-(void)setPrimitiveLatestVersionValue:(long long)value;
-(long long)primitiveLatestVersionValue;
-(void)setPrimitiveGrantedByDefaultValue:(BOOL)value;
-(BOOL)primitiveGrantedByDefaultValue;
-(void)setPrimitiveExpiredAlertedValue:(BOOL)value;
-(BOOL)primitiveExpiredAlertedValue;
-(void)setPrimitiveDisplayOrderValue:(short)value;
-(short)primitiveDisplayOrderValue;
-(void)setPrimitiveAvailableForPresentValue:(BOOL)presentValue;
-(BOOL)primitiveAvailableForPresentValue;
-(void)setPrimitiveAvailableForMyselfValue:(BOOL)myselfValue;
-(BOOL)primitiveAvailableForMyselfValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface NLThemeShopPreviewViewController : NLViewController <LAPhotoNavigationViewDelegate, LAPagingScrollViewDelegate, UIActionSheetDelegate> {
	NLThemeShopPreviewDataSource* _dataSource;
	NLSafeUnretainedObject* _uSelf;
	LAPagingScrollView* _pagingScrollView;
	LAPhotoNavigationView* _navigationView;
	int _backupedStatusBarStyle;
}
@property(assign, nonatomic) int backupedStatusBarStyle;
@property(retain, nonatomic) LAPhotoNavigationView* navigationView;
@property(retain, nonatomic) LAPagingScrollView* pagingScrollView;
@property(retain, nonatomic) NLSafeUnretainedObject* uSelf;
@property(retain, nonatomic) NLThemeShopPreviewDataSource* dataSource;
-(void).cxx_destruct;
-(void)photoNavigationView:(id)view didTapCloseButton:(id)button;
-(void)onDoubleTapped:(id)tapped;
-(void)onSingleTapped:(id)tapped;
-(void)registerGestureRecognizers;
-(id)photoViewDataSource;
-(void)pagingScrollViewDidTilePages:(int)pagingScrollView total:(unsigned)total;
-(void)setLoadProgress:(unsigned)progress totalLength:(unsigned)length key:(id)key;
-(void)setImage:(id)image error:(id)error key:(id)key;
-(void)removeBlockToDataSource;
-(void)addBlockToDataSource;
-(BOOL)prefersStatusBarHidden;
-(void)setStatusBarHidden:(BOOL)hidden;
-(void)initSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineKaomojiKeyboardScrollView : LineCustomKeyboardScrollView {
}
+(void)initialize;
-(int)integerForButtonIndex:(int)buttonIndex;
-(id)stringForButtonIndex:(int)buttonIndex;
-(UIEdgeInsets)landscapeMarginEdgeInsets;
-(UIEdgeInsets)portraitMarginEdgeInsets;
-(UIEdgeInsets)landscapeEdgeInsets;
-(UIEdgeInsets)portraitEdgeInsets;
-(int)pageForButtonTag:(int)buttonTag;
-(CGSize)sizeForButtonNumber:(int)buttonNumber;
-(int)maxNumberOfButtonsOnPage:(int)buttonsOnPage;
-(int)numberOfButtons;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)configureButton:(id)button onPage:(int)page atIndex:(int)index;
-(void)configureButton:(id)button;
@end

__attribute__((visibility("hidden")))
@interface MBToastView : UIView {
	UIImageView* mBackgroundView;
	UILabel* mMessageLabel;
}
+(id)toastViewWithMessage:(id)message;
+(id)toastView;
-(void).cxx_destruct;
-(float)offsetYwithHeight:(float)height position:(int)position;
-(void)layoutViewsWithMessage:(id)message position:(int)position;
-(void)initViews;
-(id)initWithMessage:(id)message;
-(id)init;
-(void)showWithMessage:(id)message onSuperView:(id)view bottomMargin:(float)margin;
-(void)showOnSuperView:(id)view bottomMargin:(float)margin;
-(void)showOnSuperView:(id)view topMargin:(float)margin;
-(void)hideAfterDelay:(double)delay;
-(void)showWithMessage:(id)message position:(int)position;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoViewerErrorMessageView : MBMessageView {
	UIButton* mRefreshButton;
	UILabel* mMessageLabel;
	float mHeight;
}
+(id)errorMessageView;
-(void).cxx_destruct;
-(float)height;
-(void)layoutSubviews;
-(void)layout;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LEGYUserBehaviorLoggerExternalImpl : NSObject <LEGYUserBehaviorLoggerExternal> {
}
-(void)log:(long long)log param1:(int)a1 value1:(id)a13 param2:(int)a2 value2:(id)a25;
-(void)log:(long long)log param1:(int)a1 value1:(id)a13;
-(void)log:(long long)log;
@end

__attribute__((visibility("hidden")))
@interface LAObjectStorageService : NSObject {
}
+(id)thumbURLWithObjectID:(id)objectID size:(id)size;
+(id)objectURLWithObjectID:(id)objectID;
+(void)setupDefaultParameters:(id)parameters;
@end

__attribute__((visibility("hidden")))
@interface NLCallCountryTableViewCell : NLCallCommonTableViewCell {
	NSString* _regionName;
	NSString* _regionNumber;
	BOOL _isUsedCountryFlag;
	UIImageView* _imageViewCountry;
	NMAttributedLabel* _viewCountryName;
	NMAttributedLabel* _labelCountryNumber;
	UIImageView* _imageviewSelected;
	UIView* _viewBottomLine;
	NSString* _stringSearchKeyword;
}
@property(assign, nonatomic) BOOL isUsedCountryFlag;
@property(retain, nonatomic) NSString* stringSearchKeyword;
@property(assign, nonatomic) UIView* viewBottomLine;
@property(assign, nonatomic) UIImageView* imageviewSelected;
@property(assign, nonatomic) NMAttributedLabel* labelCountryNumber;
@property(assign, nonatomic) NMAttributedLabel* viewCountryName;
@property(assign, nonatomic) UIImageView* imageViewCountry;
+(id)viewFromNib;
-(void).cxx_destruct;
-(void)updateSelectedIcon:(BOOL)icon;
-(void)setSelected:(BOOL)selected;
-(void)layoutSubviews;
-(void)setCountryInfoWithCountryInfo:(id)countryInfo;
@end

__attribute__((visibility("hidden")))
@interface LANavigationBar : UINavigationBar {
}
-(id)defaultThemelandscapeImage;
-(id)defautThemeImage;
-(void)layoutSubviews;
-(void)drawRect:(CGRect)rect;
-(BOOL)isPatternTypeForThemeBackground;
@end

__attribute__((visibility("hidden")))
@interface MBBarButtonItem : UIBarButtonItem {
}
+(id)topCancelButtonWithActionBlock:(id)actionBlock;
+(id)topCompleteHighlitedButtonWithActionBlock:(id)actionBlock;
+(id)topCloseButtonWithActionBlock:(id)actionBlock;
+(id)topCompleteButtonWithActionBlock:(id)actionBlock;
+(id)topSaveButtonWithActionBlock:(id)actionBlock;
+(id)topShareButtonWithActionBlock:(id)actionBlock;
+(id)topEtcButtonWithActionBlock:(id)actionBlock;
+(id)topBackButtonLandscapeWithActionBlock:(id)actionBlock;
+(id)topBackButtonWithActionBlock:(id)actionBlock;
+(id)topNotificationButtonWithActionBlock:(id)actionBlock;
+(id)topAddFriendButtonWithActionBlock:(id)actionBlock;
@end

__attribute__((visibility("hidden")))
@interface LGErrorView : UIView {
	NSString* _bundleName;
	UIImageView* _errorIconImageView;
	UILabel* _descriptionLabel;
	UIButton* _button;
	NSError* _error;
}
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UILabel* descriptionLabel;
@property(retain, nonatomic) UIImageView* errorIconImageView;
@property(retain, nonatomic) NSString* bundleName;
-(void).cxx_destruct;
-(void)updateForCurrentLanuage;
-(void)showError:(id)error;
-(void)layoutSubviews;
-(id)initWithBundleName:(id)bundleName;
@end

__attribute__((visibility("hidden")))
@interface LinePageControl : UIControl {
	UIView* container;
	unsigned numberOfPages;
	unsigned numberOfSpecialPages;
	int currentPage;
	UIImage* _currentPageImage;
	UIImage* _pageImage;
}
@property(retain, nonatomic) UIImage* pageImage;
@property(retain, nonatomic) UIImage* currentPageImage;
@property(assign, nonatomic) int currentPage;
@property(assign, nonatomic) unsigned numberOfSpecialPages;
@property(assign, nonatomic) unsigned numberOfPages;
-(void).cxx_destruct;
-(id)_pageIndicatorCurrentImageForPage:(int)page;
-(id)_pageIndicatorImageForPage:(int)page;
-(void)setCurrentPage:(int)page sendActionsForValueChangedEvent:(BOOL)valueChangedEvent;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)addSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineEndManager : MBDataManager {
	MBActivity* originActivity;
	NSArray* newActivities;
	unsigned _mergeItemCount;
}
@property(readonly, assign, nonatomic) unsigned mergeItemCount;
@property(readonly, assign, nonatomic) int mergeEndType;
-(void).cxx_destruct;
-(void)activityDidDeleteWithId:(id)activity;
-(void)activityDidDelete:(id)activity;
-(void)activityDidUpdate:(id)activity;
-(void)handelMergeReplace;
-(id)handleMergeActivity:(id)activity;
-(id)handleFetch:(id)fetch;
-(id)handleUpdate:(id)update;
-(id)fetchRequestWithFetchCount:(int)fetchCount;
-(id)updateRequest;
-(void)dealloc;
-(id)initWithActivity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumError : NSObject {
}
+(void)sendNotification:(id)notification albumID:(id)anId groupID:(id)anId3;
+(int)serverDefinedErrorCode:(id)code;
+(id)localizedDescription:(id)description;
+(BOOL)isAuthorizationError:(id)error;
+(BOOL)isServerDefinedAlbumError:(id)error;
+(BOOL)isNetworkError:(id)error;
+(id)errorObject:(id)object;
@end

__attribute__((visibility("hidden")))
@interface LineInputHistory : NSObject <NSCoding> {
	NSMutableArray* unprocessedInput;
	NSArray* predictions;
	int _mode;
}
@property(readonly, assign, nonatomic) BOOL hasUnprocessedInput;
@property(assign, nonatomic) int mode;
@property(retain, nonatomic) NSArray* predictions;
-(void).cxx_destruct;
-(id)predict;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)processUnprocessedInput;
-(void)addSticonInput:(id)input;
-(void)addInput:(int)input;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface RegistrationPhoneSetViewController : NLViewController <UITextFieldDelegate, UITableViewDataSource, UITableViewDelegate, UIScrollViewDelegate, CarrierChangeDelegate, CountryViewChangeDelegate> {
	BOOL _isHideSns;
	NSArray* _userCountry;
	NSArray* _userCarrier;
	NSString* _phoneNumber;
	UITableView* _tableView;
	UIButton* _doneButton;
	UILabel* _textLabel;
	UIView* _separatorLineView;
	UIButton* _facebookButton;
	UIView* _chineseSNSButtonsView;
	UITextField* _phoneNumberField;
	UILabel* _subLabel;
	NSRegularExpression* _phoneNumRegex;
}
@property(retain, nonatomic) NSRegularExpression* phoneNumRegex;
@property(assign, nonatomic) BOOL isHideSns;
@property(assign, nonatomic) UILabel* subLabel;
@property(retain, nonatomic) UITextField* phoneNumberField;
@property(assign, nonatomic) UIView* chineseSNSButtonsView;
@property(assign, nonatomic) UIButton* facebookButton;
@property(assign, nonatomic) UIView* separatorLineView;
@property(assign, nonatomic) UILabel* textLabel;
@property(assign, nonatomic) UIButton* doneButton;
@property(assign, nonatomic) UITableView* tableView;
@property(retain, nonatomic) NSString* phoneNumber;
@property(retain, nonatomic) NSArray* userCarrier;
@property(retain, nonatomic) NSArray* userCountry;
-(void).cxx_destruct;
-(void)changedCarrier:(id)carrier;
-(void)changedCountry:(id)country;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)canEnableConfirm;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)configureNavigationItem;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)textChanged:(id)changed;
-(void)feixinButtonTapped:(id)tapped;
-(void)renrenButtonTapped:(id)tapped;
-(void)weiboButtonTapped:(id)tapped;
-(void)facebookButtonTapped:(id)tapped;
-(void)backgroundTapped:(id)tapped;
-(void)processRegistration;
-(void)doneButtonTapped:(id)tapped;
-(void)close:(id)close;
-(void)openHelp:(id)help;
-(void)connectToSNS:(int)sns;
-(id)selectedCountryCode;
-(void)initCurrentCountry;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)configurePhoneNumberField:(id)field;
-(void)configureChineseSNSButtonsView:(id)view;
-(void)configureFacebookButton:(id)button;
-(void)configureSeparatorLineView:(id)view;
-(void)configureSubtextLabel:(id)label;
-(void)configureTextLabel:(id)label;
-(void)configureDoneButton:(id)button;
-(void)configureTableView:(id)view;
-(void)configureSubviews;
-(int)rowTypeFromIndexPath:(id)indexPath;
-(id)currentUserCarrierName;
-(id)currentUserCountryName;
@end

__attribute__((visibility("hidden")))
@interface NLShakeTitleView : UIView {
	UIImageView* _shakingHandsImageView;
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setTitleTextColor:(id)color;
-(void)setTitleText:(id)text subtitleText:(id)text2;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface RegistrationVerifySmsViewController : NLViewController <UITextFieldDelegate, UIActionSheetDelegate> {
	NSString* _authNumber;
	RegistrationInputField* _inputField;
	UILabel* _descriptionLabel;
	UIButton* _verificationButton;
	UILabel* _helpLabel;
	UIButton* _resendButton;
	UIButton* _ivrButton;
	int _resendCount;
}
@property(assign, nonatomic) int resendCount;
@property(assign, nonatomic) UIButton* ivrButton;
@property(assign, nonatomic) UIButton* resendButton;
@property(assign, nonatomic) UILabel* helpLabel;
@property(assign, nonatomic) UIButton* verificationButton;
@property(assign, nonatomic) UILabel* descriptionLabel;
@property(assign, nonatomic) RegistrationInputField* inputField;
@property(retain, nonatomic) NSString* authNumber;
-(void).cxx_destruct;
-(void)processRegistration;
-(void)textChanged:(id)changed;
-(void)ivrButtonPressed:(id)pressed;
-(void)resendButtonPressed:(id)pressed;
-(void)verificationButtonPressed:(id)pressed;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)openHelp:(id)help;
-(void)popViewControllerAnimated;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)customizeSubviews;
@end

__attribute__((visibility("hidden")))
@interface RegistrationProfileSetViewController : NLViewController <UITextFieldDelegate, UIActionSheetDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, LGImagePickerDelegate> {
	BOOL _hasCamera;
	BOOL _hasProfileImage;
	NSString* _myName;
	NSData* _imageData;
	UIButton* _profileImageButton;
	RegistrationInputField* _nameField;
	UILabel* _descriptionLabel;
	UILabel* _descriptionLabel2;
	UILabel* _charactersCountLabel;
	UIButton* _okButton;
}
@property(assign, nonatomic) BOOL hasProfileImage;
@property(assign, nonatomic) BOOL hasCamera;
@property(assign, nonatomic) UIButton* okButton;
@property(assign, nonatomic) UILabel* charactersCountLabel;
@property(assign, nonatomic) UILabel* descriptionLabel2;
@property(assign, nonatomic) UILabel* descriptionLabel;
@property(assign, nonatomic) RegistrationInputField* nameField;
@property(assign, nonatomic) UIButton* profileImageButton;
@property(retain, nonatomic) NSData* imageData;
@property(retain, nonatomic) NSString* myName;
-(void).cxx_destruct;
-(void)textChanged:(id)changed;
-(void)okButtonPressed:(id)pressed;
-(void)profileImageButtonPressed:(id)pressed;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)lgImagePickerControllerDidCancel:(id)lgImagePickerController;
-(void)lgImagePickerController:(id)controller didFinishPickingMediaWithInfos:(id)infos;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)setImageWithData:(id)data;
-(void)setPhotoWithURL:(id)url;
-(void)setPhotoWithImage:(id)image;
-(void)refreshFriendsView;
-(void)updateCharactersCount;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)customizeSubviews;
@end

__attribute__((visibility("hidden")))
@interface LGFilterThumbnailCell : UITableViewCell {
	UIImageView* _filterImageView;
	UILabel* _filterLabel;
	CALayer* _dimmedLayer;
}
@property(retain, nonatomic) CALayer* dimmedLayer;
@property(retain, nonatomic) UILabel* filterLabel;
@property(retain, nonatomic) UIImageView* filterImageView;
+(float)heightForThumbnailImage:(id)thumbnailImage;
+(id)cellForFilterIndex:(unsigned)filterIndex forTableView:(id)tableView bundleName:(id)name;
-(void).cxx_destruct;
-(void)setFilterThumbnail:(id)thumbnail filterName:(id)name isOriginal:(BOOL)original selected:(BOOL)selected dimmed:(BOOL)dimmed;
@end

__attribute__((visibility("hidden")))
@interface LAUploadPackage : NSObject {
	BOOL _invalidMediaExists;
	int _packageType;
	LGAssetsLibrarySafeExecutor* _assetsLibrarySafeExecutor;
	NSMutableDictionary* _mediaThumbImageDictionary;
	NSArray* _medias;
	NSArray* _uploadModels;
	NSMutableArray* _checkedStatusArray;
	NSArray* _originalSelectedAssets;
	NSMutableArray* _validStatusArray;
	unsigned _addableCount;
}
@property(assign, nonatomic) unsigned addableCount;
@property(assign, nonatomic) BOOL invalidMediaExists;
@property(retain, nonatomic) NSMutableArray* validStatusArray;
@property(retain, nonatomic) NSArray* originalSelectedAssets;
@property(retain, nonatomic) NSMutableArray* checkedStatusArray;
@property(retain, nonatomic) NSArray* uploadModels;
@property(retain, nonatomic) NSArray* medias;
@property(retain, nonatomic) NSMutableDictionary* mediaThumbImageDictionary;
@property(retain, nonatomic) LGAssetsLibrarySafeExecutor* assetsLibrarySafeExecutor;
@property(assign, nonatomic) int packageType;
+(void)invalidateSelectedStatusWithAssets:(id)assets;
-(void).cxx_destruct;
-(BOOL)isValidAtIndex:(unsigned)index;
-(BOOL)isSelectedAtIndex:(unsigned)index;
-(BOOL)isEdittedAtIndex:(unsigned)index;
-(id)thumbnailImageAtIndex:(unsigned)index;
-(unsigned)countOfCheckedStatus;
-(void)mergeSelectedMedias:(id)medias;
-(void)fillCheckedStatusArrayForMedias;
-(id)initWithAddableCount:(unsigned)addableCount;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LAUploadProgressView : UIControl <UIAlertViewDelegate, UIActionSheetDelegate> {
	BOOL _failed;
	BOOL _shoudShowErrorImage;
	unsigned _total;
	unsigned _value;
	int _viewType;
	NSString* _groupId;
	NSString* _albumId;
	LACircularProgressView* _progressView;
	UILabel* _progressLabel;
	UIButton* _retryButton;
	UIImageView* _errorImageView;
	UIImageView* _lineView;
}
@property(assign, nonatomic) BOOL shoudShowErrorImage;
@property(assign, nonatomic) BOOL failed;
@property(retain, nonatomic) UIImageView* lineView;
@property(retain, nonatomic) UIImageView* errorImageView;
@property(retain, nonatomic) UIButton* retryButton;
@property(retain, nonatomic) UILabel* progressLabel;
@property(retain, nonatomic) LACircularProgressView* progressView;
@property(retain, nonatomic) NSString* albumId;
@property(retain, nonatomic) NSString* groupId;
@property(assign, nonatomic) int viewType;
@property(assign, nonatomic) unsigned value;
@property(assign, nonatomic) unsigned total;
-(void).cxx_destruct;
-(id)userInfoForNotification;
-(void)didTapProgressView:(id)view;
-(void)didTapRetryButton:(id)button;
-(void)layoutSubviews;
-(void)setProgressFailed:(BOOL)failed;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(void)setValue:(float)value total:(float)total currentProgress:(float)progress faiiled:(BOOL)faiiled animated:(BOOL)animated;
-(void)updateProgress:(BOOL)progress animated:(BOOL)animated;
-(void)commonInit;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LGAlertHUD : NSObject <LGProgressHUDDelegate> {
	LGProgressHUD* hud;
	id<LGProgressHUDDelegate> hudDelegate;
}
@property(assign, nonatomic) __weak id<LGProgressHUDDelegate> hudDelegate;
@property(retain, nonatomic) LGProgressHUD* hud;
+(void)hideHUDAfterDelay:(double)delay;
+(void)showLoadingHUD:(id)hud;
+(void)cleanUp;
+(id)hud;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)hudWasHidden:(id)hidden;
-(id)showHUD:(id)hud;
@end

__attribute__((visibility("hidden")))
@interface PasscodeSettingsViewController : NLTableViewController <PasscodeViewControllerDelegate> {
	BOOL passcodeEnabled;
}
@property(assign, nonatomic) BOOL passcodeEnabled;
-(void)passcodeViewControllerDidChangePasscode:(id)passcodeViewController;
-(void)passcodeViewControllerCancelled:(id)cancelled;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)onSwitched:(id)switched;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)updateView;
-(void)didReceiveMemoryWarning;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface MBShareInfoContentView : MBBaseChildCellView <UIActionSheetDelegate> {
	int mPostViewType;
	MBActivity* mActivity;
	UIButton* mShareButton;
	UIImageView* mIconShareCount;
	UILabel* mShareCount;
	BOOL mIsShare;
}
@property(assign, nonatomic) BOOL isShare;
+(UIEdgeInsets)marginWithPostType:(int)postType activity:(id)activity;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
+(float)height;
-(void).cxx_destruct;
-(UIEdgeInsets)margin;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin view:(id)view;
-(void)setCellData:(id)data;
-(id)activity;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageUploadOperation : NLObjectStorageOperation {
}
-(void)buildRequest;
-(void)preprocessOnCompletion:(id)completion;
-(id)request;
-(id)initWithOperationParameters:(id)operationParameters;
@end

__attribute__((visibility("hidden")))
@interface NJSURLImageView : UIImageView <NJSURLImageObserving> {
	NJSURLImage* mURLImage;
	id mUpdateCallbackBlock;
}
-(void).cxx_destruct;
-(void)URLImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)setImageAnimateWithImage:(id)image;
-(void)setUpdateCallback:(id)callback;
-(void)setURLImage:(id)image callback:(id)callback;
-(void)setURLImage:(id)image;
-(id)URLImage;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MBFindOrCreateMerge : NSObject {
	id mCompareBlock;
	id mCreateBlock;
	id mReplaceBlock;
	id mDeleteBlock;
}
@property(copy, nonatomic) id deleteBlock;
@property(copy, nonatomic) id replaceBlock;
@property(copy, nonatomic) id createBlock;
@property(copy, nonatomic) id compareBlock;
-(void).cxx_destruct;
-(void)mergeWithNewObjects:(id)newObjects oldObjects:(id)objects context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface PasscodeViewController : NLViewController {
	BOOL isDigitFieldHidden_;
	BOOL _allowsCancel;
	int _cursor;
	NSDictionary* _keyTagsDict;
	NSMutableArray* _digitStack;
	int _state;
	NSString* _code1;
	NSString* _code2;
	id<PasscodeViewControllerDelegate> _delegate;
	int _mode;
	UILabel* _titleLabel;
	UILabel* _messageLabel;
	UIView* _labelsOuterWrapperView;
	UIView* _labelsInnerWrapperView;
	UIButton* _cancelButton;
	UIImageView* _dot1;
	UIImageView* _dot2;
	UIImageView* _dot3;
	UIImageView* _dot4;
	UIImageView* _dotField1;
	UIImageView* _dotField2;
	UIImageView* _dotField3;
	UIImageView* _dotField4;
	UIButton* _deleteButton;
	UIImageView* _labelAreaBackgroundView;
	UIImageView* _digitAreaBackgroundView;
	UIView* _inputView;
}
@property(retain, nonatomic) NSString* code2;
@property(retain, nonatomic) NSString* code1;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSMutableArray* digitStack;
@property(retain, nonatomic) NSDictionary* keyTagsDict;
@property(assign, nonatomic) int cursor;
@property(assign, nonatomic) UIView* inputView;
@property(assign, nonatomic) UIImageView* digitAreaBackgroundView;
@property(assign, nonatomic) UIImageView* labelAreaBackgroundView;
@property(assign, nonatomic) UIImageView* dotField4;
@property(assign, nonatomic) UIImageView* dotField3;
@property(assign, nonatomic) UIImageView* dotField2;
@property(assign, nonatomic) UIImageView* dotField1;
@property(retain, nonatomic) UIImageView* dot4;
@property(retain, nonatomic) UIImageView* dot3;
@property(retain, nonatomic) UIImageView* dot2;
@property(retain, nonatomic) UIImageView* dot1;
@property(retain, nonatomic) UIButton* deleteButton;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UIView* labelsInnerWrapperView;
@property(retain, nonatomic) UIView* labelsOuterWrapperView;
@property(retain, nonatomic) UILabel* messageLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(assign, nonatomic) BOOL allowsCancel;
@property(assign, nonatomic) int mode;
@property(assign, nonatomic) id<PasscodeViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(BOOL)prefersStatusBarHidden;
-(void)renderViews;
-(void)restart;
-(void)digitButtonTapped:(id)tapped;
-(void)deleteButtonTapped:(id)tapped;
-(void)cancelButtonTapped:(id)tapped;
-(void)didReceiveMemoryWarning;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)updateThemeLayoutData;
-(void)clearDigits;
-(void)popDigit;
-(void)pushDigit:(id)digit;
-(void)compareIfNeeded;
-(void)updateFieldsThemeWithFieldImages:(id)fieldImages dotImages:(id)images;
-(void)updateFields;
-(void)reentryCode;
-(void)compareCodes;
-(void)feedbackWithVibration;
-(void)feedbackWithFlashScreen;
-(void)updateLabels;
-(id)digitFromTag:(int)tag;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)setupKeyTagsDict;
@end

__attribute__((visibility("hidden")))
@interface BWQuincyManager : NSObject <NSXMLParserDelegate> {
	NSString* _submissionURL;
	id<BWQuincyManagerDelegate> _delegate;
	BOOL _loggingEnabled;
	BOOL _showAlwaysButton;
	BOOL _feedbackActivated;
	BOOL _autoSubmitCrashReport;
	BOOL _didCrashInLastSession;
	NSString* _appIdentifier;
	NSString* _feedbackRequestID;
	float _feedbackDelayInterval;
	NSMutableString* _contentOfProperty;
	int _serverResult;
	int _analyzerStarted;
	NSString* _crashesDir;
	BOOL _crashIdenticalCurrentVersion;
	BOOL _crashReportActivated;
	NSMutableArray* _crashFiles;
	NSMutableData* _responseData;
	int _statusCode;
	NSURLConnection* _urlConnection;
	NSData* _crashData;
	NSString* _languageStyle;
	BOOL _sendingInProgress;
	NSFileManager* _fileManager;
}
@property(retain, nonatomic) NSFileManager* fileManager;
@property(retain, nonatomic) NSString* appIdentifier;
@property(readonly, assign, nonatomic) BOOL didCrashInLastSession;
@property(assign, nonatomic, getter=isAutoSubmitCrashReport) BOOL autoSubmitCrashReport;
@property(assign, nonatomic, getter=isFeedbackActivated) BOOL feedbackActivated;
@property(assign, nonatomic, getter=isShowingAlwaysButton) BOOL showAlwaysButton;
@property(retain, nonatomic) NSString* languageStyle;
@property(assign, nonatomic, getter=isLoggingEnabled) BOOL loggingEnabled;
@property(assign, nonatomic) id<BWQuincyManagerDelegate> delegate;
@property(retain, nonatomic) NSString* submissionURL;
+(id)sharedQuincyManager;
-(void)handleCrashReport;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)_postXML:(id)xml toURL:(id)url;
-(void)_checkForFeedbackStatus;
-(void)_sendCrashReports;
-(void)_cleanCrashReports;
-(void)_performSendingCrashReports;
-(id)_getDevicePlatform;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)showCrashStatusMessage;
-(BOOL)hasPendingCrashReport;
-(BOOL)hasNonApprovedCrashReports;
-(void)startManager;
-(BOOL)autoSendCrashReports;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ChatCustomMigrationPolicy : NSEntityMigrationPolicy {
}
-(BOOL)createDestinationInstancesForSourceInstance:(id)sourceInstance entityMapping:(id)mapping manager:(id)manager error:(id*)error;
@end

__attribute__((visibility("hidden")))
@interface MBLoadingIndicatorView : UIView {
	UIView* mBackgroundView;
	UIActivityIndicatorView* mActivityIndicatorView;
}
@property(readonly, assign, nonatomic) UIActivityIndicatorView* activityIndicatorView;
@property(readonly, assign, nonatomic) UIView* backgroundView;
-(void).cxx_destruct;
-(void)stopAnimating;
-(void)startAnimating;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallModel : NSObject {
	unsigned _type;
	NSNumber* _dudration;
	NSString* _phoneNumber;
	NSNumber* _cause;
	unsigned _result;
}
@property(assign, nonatomic) unsigned result;
@property(retain, nonatomic) NSNumber* cause;
@property(retain, nonatomic) NSString* phoneNumber;
@property(retain, nonatomic) NSNumber* dudration;
@property(assign, nonatomic) unsigned type;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface CarrierViewController : NLTableViewController {
	id<CarrierChangeDelegate> _changeDelegate;
	NSArray* _carriers;
	NSString* _selectedCarrierCode;
}
@property(retain, nonatomic) NSString* selectedCarrierCode;
@property(retain, nonatomic) NSArray* carriers;
@property(assign, nonatomic) id<CarrierChangeDelegate> changeDelegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)toggleCheckmarkedCell:(id)cell;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
@end

__attribute__((visibility("hidden")))
@interface LineUrlManager : NSObject {
}
+(id)parseURLParams:(id)params;
+(id)decodedParameterFromUrl:(id)url parameterName:(id)name;
+(BOOL)isRunUrl:(id)url;
+(BOOL)isDebugUrl:(id)url;
+(id)LineCallHelpURL;
+(id)aboutLineCallURL;
+(id)privacyLineCallURL;
+(id)termsAndPolicyLineCallURLString;
+(id)paymentPolicyCallURL;
+(id)timelineUrlSSL;
+(id)timelineURL;
+(id)myhomeApiUrlSSL;
+(id)myhomeApiUrl;
+(id)myhomeUrlSSL;
+(id)myhomeUrl;
+(id)registerReceiptURL;
+(id)obsAuthURLByCurrentConnectivityUsingRequester:(id)requester;
+(id)obsRequestAuthURLBaseSSL;
+(id)obsRequestAuthURLBase;
+(id)SkinDownloadBaseURL;
+(id)SkinListURL;
+(id)LineShopURL;
+(id)obsCDNURL;
+(id)LineStickersURL;
+(id)LineBadWordsInfoURL;
+(id)LineBadWordsListURL;
+(id)LineMoreTabListURL;
+(id)naverPasswordReminderURL;
+(id)naverIdReminderURL;
+(id)ebiz_rulesURL;
+(id)settlementURL;
+(id)LineInquiryKR;
+(id)LineInquiryUrlKR;
+(id)LineInquiryMeUrl;
+(id)LineInquiryUrl;
+(id)LinePrivacyPolicyKrUrl;
+(id)LinePrivacyPolicyUrl;
+(id)LineTermsUrl;
+(id)LineHelpUrl;
+(id)LineAccountMigrationHelpUrl;
+(id)LineAuthHelpUrl;
+(id)LineRegistrationHelpUrl;
+(int)ApplicationTypeEnum;
+(id)ApplicationType;
+(id)ProfileCDNServerURL;
+(id)ChannelGatewayAppAuthURL;
+(id)ChannelGatewayURLSSL;
+(BOOL)shouldUseSecureURL;
+(BOOL)isOBSURL:(id)obsurl;
+(id)TalkServerUploadURLSSL;
+(id)TalkServerUploadURL;
+(id)talkServerHosts;
+(id)connectionInfoAcquisitor;
+(void)checkUpdateConnectionInfoByRevision:(int)revision;
+(void)setPhase:(id)phase;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface MoreTableViewCell : LineTableViewCell {
	UIButton* _moreButton;
}
-(void).cxx_destruct;
-(BOOL)render;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)initViews;
@end

__attribute__((visibility("hidden")))
@interface NLLineCallPurchaseManager : NSObject {
	LineCoinProductItem* coinItem;
	id callback;
}
@property(copy, nonatomic) id callback;
@property(retain, nonatomic) LineCoinProductItem* coinItem;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)getCallCreditProductsWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
-(void)purchaseCoin:(id)coin completionBlock:(id)block;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MapOverlayView : UIImageView <CurrentPositionMenuViewDelegate> {
	id<MapOverlayViewDelegate> _delegate;
	CurrentPositionMenuView* mMenuView;
	LineLocation* _location;
}
@property(retain, nonatomic) LineLocation* location;
@property(assign, nonatomic) id<MapOverlayViewDelegate> delegate;
-(void).cxx_destruct;
-(void)menuTapped:(id)tapped;
-(void)setIsLoading:(BOOL)loading;
-(void)showMenu;
-(void)hideMenu;
-(void)setSpotName:(id)name;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface CurrentPositionMenuView : UIView {
	UIImage* mDefaultSlice[15];
	UIImage* mHighlightedSlice[15];
	UILabel* mMainLabel;
	UILabel* mSubLabel;
	CGPoint mMainLabelOrigin;
	CGPoint mSubLabelOrigin;
	CGPoint mTargetPoint;
	BOOL mIsHighlighted;
	UIActivityIndicatorView* mAct;
	id<CurrentPositionMenuViewDelegate> mDelegate;
}
@property(assign, nonatomic) id<CurrentPositionMenuViewDelegate> delegate;
-(void).cxx_destruct;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setIsLoading:(BOOL)loading;
-(id)subLabelText;
-(void)setSubLabel:(id)label;
-(void)setMainLabel:(id)label;
-(void)setTargetPoint:(CGPoint)point;
-(void)refreshFrame;
-(void)drawRect:(CGRect)rect;
-(void)setFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLSharingTargetSelectorViewController : NLViewController <NSFetchedResultsControllerDelegate, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, UISearchDisplayDelegate> {
	SocialGraphSectionManager* sectionsMgr;
	BOOL _isMovingViewController;
	UISearchDisplayController* searchDisplayController_;
	NSFetchedResultsController* chatsFetchedResultsController_;
	unsigned _contentsType;
	UISearchBar* _searchBar;
	UITableView* _tableView;
	UISegmentedControl* _segmentedControl;
	UIView* _emptyView;
	UILabel* _emptyViewDescriptionLabel;
	UIView* _bottomView;
	UIButton* _homeWriteButton;
	NSMutableArray* _filteredListContent;
	NSString* _chatMid;
	NSString* _emphasizedChatMID;
	NSString* _message;
	NSArray* _images;
	NSURL* _audioURL;
	NSString* _postId;
	NSString* _postUserMid;
	LineLocation* _location;
	NLSafeUnretainedObject* _weakSelf;
	TalkUserObject* _talkUserObject;
	NLSharableObject* _sharableObject;
	NSArray* _sharableObjects;
}
@property(assign, nonatomic) BOOL isMovingViewController;
@property(retain, nonatomic) NSFetchedResultsController* chatsFetchedResultsController;
@property(retain, nonatomic) NSArray* sharableObjects;
@property(retain, nonatomic) NLSharableObject* sharableObject;
@property(retain, nonatomic) TalkUserObject* talkUserObject;
@property(retain, nonatomic) NLSafeUnretainedObject* weakSelf;
@property(retain, nonatomic) LineLocation* location;
@property(retain, nonatomic) NSString* postUserMid;
@property(retain, nonatomic) NSString* postId;
@property(retain, nonatomic) NSURL* audioURL;
@property(retain, nonatomic) NSArray* images;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* emphasizedChatMID;
@property(retain, nonatomic) NSString* chatMid;
@property(retain, nonatomic) NSMutableArray* filteredListContent;
@property(retain, nonatomic) UISearchDisplayController* searchDisplayController;
@property(retain, nonatomic) UIButton* homeWriteButton;
@property(retain, nonatomic) UIView* bottomView;
@property(retain, nonatomic) UILabel* emptyViewDescriptionLabel;
@property(retain, nonatomic) UIView* emptyView;
@property(retain, nonatomic) UISegmentedControl* segmentedControl;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) UISearchBar* searchBar;
@property(assign, nonatomic) unsigned contentsType;
-(void).cxx_destruct;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)filterContentForSearchText:(id)searchText scope:(id)scope;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(id)managedObjectContext;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)midTypeForSelectedSegmentIndex;
-(id)fileterScopeForSelectedSegmentIndex;
-(id)fetchedObjectForSelectedSegmentIndex:(int)selectedSegmentIndex;
-(id)chatIdWithTarget:(id)target;
-(unsigned)midTypeOfTargetObject:(id)targetObject;
-(BOOL)isShowWriteHomeButtonBar;
-(void)selectRowWithChatMid;
-(id)indexPathMatchedChatMid;
-(void)updateEmptyView;
-(void)updateSearchBarShowStatus:(BOOL)status;
-(void)updateEmptyDescription;
-(id)currentEmptyDescription;
-(void)startChatWithTarget:(id)target;
-(void)shareOBSContentTypeWithTargetManagedObject:(id)targetManagedObject;
-(void)shareImageTypeWithTargetManagedObject:(id)targetManagedObject;
-(void)shareMessageTypeWithTargetManagedObject:(id)targetManagedObject;
-(BOOL)isBuddyTargetObject:(id)object;
-(void)askToShareImageWithTarget:(id)target;
-(void)askTargetToShareWithManagedObject:(id)managedObject;
-(BOOL)canSendToGroupBoard;
-(void)showConfirmAlertWithTarget:(id)target completionBlock:(id)block;
-(void)showChatWithTarget:(id)target;
-(void)openTalkRoomWithMID:(id)mid MIDType:(int)type beforeSave:(id)save beforeOpen:(id)open;
-(void)showAlbumListWithTarget:(id)target;
-(void)showWriteToGroupboardViewWithTarget:(id)target;
-(void)showWriteToHomeView;
-(void)cancelAction;
-(void)cancel:(id)cancel;
-(void)changeSegment:(id)segment;
-(int)preferredStatusBarStyle;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)dealloc;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)initializeSections;
-(id)initWithSharableObjects:(id)sharableObjects;
-(id)initWithSharableObject:(id)sharableObject;
-(id)initWithTalkUserObject:(id)talkUserObject;
-(id)initWithMyHomePostInfo:(id)myHomePostInfo;
-(id)initWithAudioURL:(id)audioURL;
-(id)initWithLocation:(id)location;
-(id)initWithImages:(id)images chatMid:(id)mid;
-(id)initWithImages:(id)images;
-(id)initWithImage:(id)image;
-(id)initWithMessage:(id)message;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LGPhotoPagingScrollView : UIScrollView {
	BOOL disableSetContentOffset;
}
@property(assign, nonatomic) BOOL disableSetContentOffset;
-(void)setContentOffset:(CGPoint)offset;
@end

__attribute__((visibility("hidden")))
@interface LGPhotoViewController : LGBaseViewController <UIScrollViewDelegate, LGPhotoScrollViewDelegate, LGEndTopMenuBarViewDelegate> {
	LGPhotoPagingScrollView* _pagingScrollView;
	NSMutableSet* _recycledPages;
	NSMutableSet* _visiblePages;
	int _firstVisiblePageIndexBeforeRotation;
	float _percentScrolledIntoFirstVisiblePage;
	BOOL _shouldTilePages;
	BOOL _menuHidden;
	BOOL _isClosing;
	unsigned _startIndex;
	id<LGPhotoViewDataSource> _photoDataSource;
	NSMutableIndexSet* _preloaderIndexSet;
	unsigned _alAssetsGroupType;
	NSOperationQueue* _preloadQueue;
	NSDate* _lastDateOnVisiblePages;
	UIView* _lineView;
	LGEndTopMenuBarView* _topMenuBarView;
	LGEndMenuBarView* _bottomMenuBarView;
	UIButton* _infoButton;
	LGPhotoInfoView* _infoView;
}
@property(retain, nonatomic) LGPhotoInfoView* infoView;
@property(retain, nonatomic) UIButton* infoButton;
@property(retain, nonatomic) LGEndMenuBarView* bottomMenuBarView;
@property(retain, nonatomic) LGEndTopMenuBarView* topMenuBarView;
@property(retain, nonatomic) UIView* lineView;
@property(retain, nonatomic) NSDate* lastDateOnVisiblePages;
@property(retain, nonatomic) NSOperationQueue* preloadQueue;
@property(assign, nonatomic) unsigned alAssetsGroupType;
@property(retain, nonatomic) NSMutableIndexSet* preloaderIndexSet;
@property(retain, nonatomic) id<LGPhotoViewDataSource> photoDataSource;
@property(assign, nonatomic) unsigned startIndex;
@property(retain, nonatomic) LGPhotoPagingScrollView* pagingScrollView;
-(void).cxx_destruct;
-(void)loadFullScreenImageOnBackground:(id)background;
-(void)cleanPreloader;
-(void)updateCheckedBadgeCountOfMenuEndView:(BOOL)menuEndView;
-(id)editedImageWithGalleryAsset:(id)galleryAsset;
-(int)indexBySection:(int)section row:(int)row;
-(unsigned)numberOfAssetsAtSection:(unsigned)section;
-(id)assetWithSection:(unsigned)section row:(unsigned)row;
-(unsigned)numberOfAssets;
-(unsigned)numberOfSection;
-(id)currentGalleryAsset;
-(void)getSection:(int*)section row:(int*)row forIndex:(int)index;
-(id)getAssetByIndex:(int)index;
-(void)updateEditedButton:(id)button;
-(void)updateTitlePositionWithStatusBarHeight:(float)statusBarHeight;
-(void)applicationWillChangeStatusBarFrame:(id)application;
-(BOOL)isTempImageMode;
-(BOOL)isLineAlbumTempImageForAddingPhotos;
-(void)stopLoadingIndicator:(unsigned)indicator;
-(void)startLoadingIndicator:(unsigned)indicator;
-(void)reloadGalleryData;
-(void)didChangePageDisappearValue;
-(void)viewForceLoad;
-(void)setSection:(int)section assetIndex:(int)index;
-(id)findPage:(unsigned)page;
-(id)currentPage;
-(BOOL)isPreviewStatus;
-(void)setMenuHidden:(BOOL)hidden;
-(void)updateForCurrentLanuage;
-(void)scrollToIndex:(unsigned)index;
-(unsigned)currentDisplayIndex;
-(unsigned)currentIndex;
-(void)reloadCurrentImage;
-(void)reloadData;
-(void)didSelectedSelectButton:(id)button;
-(void)didSelectedInfoViewCloseButton:(id)button;
-(void)didSelectedInfoButton:(id)button;
-(void)didSelectedRotateButton:(id)button;
-(void)didSelectedEditButton:(id)button;
-(CGSize)contentSizeForPagingScrollView;
-(CGRect)frameForPageAtIndex:(unsigned)index;
-(CGRect)currentBounds;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)preloadAssets:(unsigned)assets;
-(void)configurePage:(id)page forIndex:(unsigned)index instantly:(BOOL)instantly;
-(void)emptyFullScreenImageAtIndex:(unsigned)index;
-(void)loadFullScreenImageAtIndex:(unsigned)index;
-(void)setupCheckedBox;
-(void)setupTitle;
-(id)dequeueRecycledPage;
-(BOOL)isDisplayingPageForIndex:(unsigned)index;
-(void)tilePagesInstantly:(BOOL)instantly;
-(void)didTapRightButtonInMenuBar:(id)menuBar;
-(void)didTapLeftButtonInMenuBar:(id)menuBar;
-(void)cancelPreloadQueue;
-(BOOL)hasInfo;
-(void)setupInfoView;
-(void)setupInfoButton;
-(void)setupContentView;
-(void)onDoubleTapped:(id)tapped;
-(void)onSingleTapped:(id)tapped;
-(void)registerGestureRecognizers;
-(void)setStatusBarAndNavigationBar:(BOOL)bar;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithALAsset:(id)alasset;
-(id)initWithSection:(unsigned)section row:(int)row photoDataSource:(id)source;
@end

__attribute__((visibility("hidden")))
@interface LGPreviewPhotoDataSource : NSObject <LGPhotoViewDataSource> {
	LGAsset* _previewAsset;
}
@property(retain, nonatomic) LGAsset* previewAsset;
-(void).cxx_destruct;
-(unsigned)numberOfAssets;
-(id)assetWithSection:(unsigned)section row:(unsigned)row;
-(unsigned)numberOfAssetsAtSection:(unsigned)section;
-(unsigned)numberOfAssetSections;
-(id)initWithALAsset:(id)alasset;
@end

__attribute__((visibility("hidden")))
@interface PrivacySettingsViewController : NLViewController <UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate, UIActionSheetDelegate> {
	UITableView* tableView_;
	NLSafeUnretainedObject* safeSelf;
}
-(void).cxx_destruct;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)changedRejectStrangeMessagesSetting:(id)setting;
-(void)changedUserIDSearchability:(id)searchability;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface FriendsManagementViewController : NLTableViewController {
}
-(void)changedSearchability:(id)searchability;
-(void)onNotification:(id)notification;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface NLCallSpotCategoriesItem : UIButton {
	unsigned _index;
}
@property(assign, nonatomic) unsigned index;
-(id)findCategoriesTitle:(unsigned)title;
-(id)findCategoriesImageName:(unsigned)name;
-(void)drawRect:(CGRect)rect;
-(id)initWithIndexPath:(unsigned)indexPath;
@end

__attribute__((visibility("hidden")))
@interface RegisterAccountViewController : NLViewController <EmailPasswordDelegate, UIAlertViewDelegate> {
	float startY;
	BOOL shownRegistrationAlertLabel;
	id successAlertDelegate;
	NSString* redirectURL;
}
@property(retain, nonatomic) NSString* redirectURL;
@property(assign, nonatomic) id successAlertDelegate;
@property(assign, nonatomic, getter=isShownRegistrationAlertLabel) BOOL shownRegistrationAlertLabel;
-(void).cxx_destruct;
-(void)moveViewOffset:(float)offset;
-(void)lastFieldDidEndEditing;
-(void)changeFocus:(int)focus in:(BOOL)anIn;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)registerEmailWithAccountId:(id)accountId password:(id)password ignore:(BOOL)ignore;
-(void)clickConfirm:(id)confirm password:(id)password;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LocationDetailAnnotation : LineLocation <MKAnnotation> {
	LocationDetailCalloutAnnotation* mCalloutAnnotation;
	NSString* subtitle;
}
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) XXStruct_zYrK5D coordinate;
@property(retain, nonatomic) LocationDetailCalloutAnnotation* calloutAnnotation;
@property(readonly, copy, nonatomic) NSString* subtitle;
-(void).cxx_destruct;
-(void)setCoordinate:(XXStruct_zYrK5D)coordinate;
@end

__attribute__((visibility("hidden")))
@interface LocationDetailCalloutAnnotation : NSObject <MKAnnotation> {
	NSString* mTitle;
	NSString* mSubtitle;
	XXStruct_zYrK5D mCoordinate_;
	id<MKAnnotation> mRealAnnotation;
}
@property(assign, nonatomic) id<MKAnnotation> realAnnotation;
@property(assign, nonatomic) XXStruct_zYrK5D coordinate;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LocationDetailCalloutAnnotationView : MKAnnotationView {
	NSString* mTitle;
	NSString* mSubtitle;
	CurrentPositionMenuView* mMenuView;
	id<CurrentPositionMenuViewDelegate> mDelegate;
}
@property(assign, nonatomic) id<CurrentPositionMenuViewDelegate> delegate;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(void)setSubLabel:(id)label;
-(void)setLabel:(id)label;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)adjustYPosition:(int)position;
-(id)initWithAnnotation:(id)annotation reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLLANManager : NSObject <LCNoticeDelegate> {
}
+(id)appInfoDictFrom:(id)from;
+(void)_showInAppBrowser:(id)appBrowser;
+(void)showNotice;
+(void)getLANNotification:(id)notification;
+(void)setSettingsAtRegistration;
+(void)initialize;
+(id)sharedManager;
-(void)moveToAppLinkURL:(id)appLinkURL;
@end

__attribute__((visibility("hidden")))
@interface AccountChangeTopViewController : NLTableViewController <UIActionSheetDelegate> {
	UIView* headerView_;
	int hasNextActoion;
}
@property(assign, nonatomic) int hasNextActoion;
-(void).cxx_destruct;
-(void)authorization;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)openUnregistAccountActionSheet;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)makeDeleteAccountView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)checkEmailConfirmation;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)initWithStyle:(int)style;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ChangeAccountViewController : NLViewController <EmailPasswordDelegate> {
	float _startHeight;
	float _heightLineDrawn;
}
-(void)moveViewOffset:(float)offset;
-(void)lastFieldDidEndEditing;
-(void)changeFocus:(int)focus in:(BOOL)anIn;
-(void)registerEmailWithAccountId:(id)accountId password:(id)password ignore:(BOOL)ignore;
-(void)clickConfirm:(id)confirm password:(id)password;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface AddGroupListViewCell : UITableViewCell {
}
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumAddAssetsViewController : LAAlbumAddPhotosBaseViewController {
	LAUploadPackage* _package;
	float _offsetSizeForLandscape;
}
@property(assign, nonatomic) float offsetSizeForLandscape;
@property(retain, nonatomic) LAUploadPackage* package;
-(void).cxx_destruct;
-(unsigned)numberOfUploadMedias;
-(BOOL)thumbnailCellDidTapCheckButtonAtIndex:(unsigned)thumbnailCell;
-(void)thumbnailCellDidTapThumbnailAtIndex:(unsigned)thumbnailCell;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)uploadPackage;
-(id)tempImageAssetFromGallery;
-(id)findGalleryImageEnd;
-(void)updateSelectedAssets:(id)assets aStartIndex:(int)index;
-(void)replaceSelectedAssets:(id)assets;
-(void)mergeSelectedMedias:(id)medias;
-(id)createUploadMediaModels:(NSRange)models targetAlbumId:(id)anId;
-(void)didTapBackButton:(id)button;
-(void)viewWillDisappear:(BOOL)view;
-(void)updateView;
-(BOOL)checkIfInvalidImageExists;
-(void)selectValidPhotos;
-(void)viewDidLoad;
-(id)initWithPackage:(id)package albumId:(id)anId groupID:(id)anId3 originalTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface NLCDVSoundCommand : CDVSound {
}
-(void)stopAudioRecord:(id)record withDict:(id)dict;
-(void)startAudioRecord:(id)record withDict:(id)dict;
-(void)prepare:(id)prepare withDict:(id)dict;
-(void)getCurrentPosition:(id)position withDict:(id)dict;
-(void)release:(id)release withDict:(id)dict;
-(void)stop:(id)stop withDict:(id)dict;
-(void)pause:(id)pause withDict:(id)dict;
-(void)play:(id)play withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface AboutViewController : NLSettingsTableViewController {
}
+(id)localizedURLStringWithBaseURLString:(id)baseURLString;
-(void)didCheckNewVersion:(id)version;
-(void)presentViewController:(id)controller forIndexPath:(id)indexPath rowKey:(int)key;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidLoad;
-(id)updateInfoFromUserDefault;
-(id)updateInfoFromCachedData;
-(id)lastestVersion;
-(BOOL)hasNewerVersion:(id)version;
-(void)checkLineVersion;
-(id)newRowKeySections;
-(void)configureRowInfoMapping:(id)mapping;
@end

__attribute__((visibility("hidden")))
@interface LineAlbumStatusManager : NSObject {
}
+(id)sharedInstance;
-(void)checkHasNewAndPostNotificationIfHasNewNone:(id)none albums:(id)albums;
-(void)setHasNewAndPostNotification:(BOOL)notification mid:(id)mid albumId:(id)anId;
-(unsigned)checkHasNewAllAlbum:(id)album;
-(unsigned)hasNewWithMid:(id)mid;
-(void)setHasNewStatus:(unsigned)status mid:(id)mid;
-(void)setHasNew:(BOOL)aNew mid:(id)mid albumId:(id)anId;
-(void)setHasNew:(BOOL)aNew mid:(id)mid albumIds:(id)ids;
-(id)init;
-(void)postNotificationWithMid:(id)mid albumId:(id)anId hasNew:(BOOL)aNew;
-(id)statusFilePath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface NLCallSettingCommonTableSubViewController : NLTableViewController {
	UIView* _titleView;
}
@property(retain, nonatomic) UIView* titleView;
-(void).cxx_destruct;
-(void)didReceiveMemoryWarning;
-(void)popCurrentViewAnimated;
-(void)setTitle:(id)title;
-(void)initDefault;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineEndViewController : MBPostViewController <UITableViewDelegate, UITableViewDataSource, MBDataManagerDelegate, MBTableViewPullDelegate, NSFetchedResultsControllerDelegate> {
	MBTableView* mTableView;
	MBActivity* mActivity;
	int mMergeItemCount;
	BOOL needUpdate;
	MBTimelineEndManager* _timelineEndManager;
}
@property(retain, nonatomic) MBTimelineEndManager* timelineEndManager;
-(void).cxx_destruct;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)dataManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)dataManager:(id)manager didFinishUpdatingWithError:(id)error;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)startFetch:(id)fetch fetchCount:(int)count;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(BOOL)confirmError:(id)error;
-(id)errorCellForRowAtIndexPath:(id)indexPath;
-(id)emptyCellForRowAtIndexPath:(id)indexPath;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)setFooterViewByCanFecth;
-(id)mergeExtDatasWithActivity:(id)activity;
-(id)title;
-(void)dealloc;
-(id)initWithActivity:(id)activity sourceType:(id)type;
-(void)setupTableviewFooter;
-(void)setNavigationBarTitle;
-(void)setupNavigationBar;
@end

__attribute__((visibility("hidden")))
@interface AddChatListViewCell : UITableViewCell {
	BOOL needToEmphasize_;
	NSString* messageText;
}
@property(assign, nonatomic) BOOL needToEmphasize;
@property(retain, nonatomic) NSString* messageText;
-(void).cxx_destruct;
-(id)lastMessageAttributes;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NotificationMuteViewController : NLTableViewController {
	int selectedRow;
	NSIndexPath* userSelectedIndexPath;
}
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)loadView;
-(void)saveMute:(long long)mute setAt:(id)at;
-(void)calcSelectedRow;
-(id)initWithStyle:(int)style;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBRecommendAction : NSObject <NSCoding> {
	int _recommendType;
	NSString* _officialMid;
	int _stickerId;
	int _stickerPackage;
	MBUrl* _appUrl;
}
@property(readonly, assign, nonatomic) MBUrl* appUrl;
@property(readonly, assign, nonatomic) int stickerPackage;
@property(readonly, assign, nonatomic) int stickerId;
@property(readonly, assign, nonatomic) NSString* officialMid;
@property(readonly, assign, nonatomic) int recommendType;
+(id)recommendAction:(id)action;
-(void).cxx_destruct;
-(id)initWithData:(id)data;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBRecommend : NSObject <NSCoding> {
	CGSize thumbnailSize;
	NSString* objectID;
	NSString* serviceName;
	NSString* namespace;
	NSMutableDictionary* query;
	BOOL isPreferCdn;
	NSURL* thumbnailUrl;
	NSString* _title;
	NSString* _description;
	NSArray* _descriptionMetas;
	MBRecommendAction* _action;
}
@property(readonly, assign, nonatomic) MBRecommendAction* action;
@property(readonly, assign, nonatomic) NSURL* thumbnailUrl;
@property(readonly, assign, nonatomic) NSArray* descriptionMetas;
@property(readonly, assign, nonatomic) NSString* description;
@property(readonly, assign, nonatomic) NSString* title;
+(void)initialize;
+(id)recommendListWithData:(id)data;
-(void).cxx_destruct;
-(id)initWithData:(id)data;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NewMessageView : UIView {
	UILabel* newMessageName_;
	NMAttributedLabel* newMessageText_;
	UIImageView* backgroundView_;
	UIImageView* arrowImageView_;
	UIImageView* seperatorImageView_;
	NSString* name_;
	BOOL isTextIncludeLineEmoji_;
	BOOL isSystemMessage_;
	NSAttributedString* textCached_;
	NSAttributedString* tokenText_;
	UITapGestureRecognizer* tapRecognizer_;
	id target_;
	SEL selector_;
}
-(void).cxx_destruct;
-(void)setTarget:(id)target selector:(SEL)selector;
-(void)setNewName:(id)name andText:(id)text isSystemMessage:(BOOL)message;
-(void)actionTouch:(id)touch;
-(void)layoutSubviews;
-(void)adjustTextFrameInTruncatedTextCase:(float)truncatedTextCase;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ImageScrollView : UIScrollView <UIScrollViewDelegate> {
	UIView* imageView_;
	unsigned index_;
	ProgressView* progressView_;
	float bestZoomScale_;
	float minimumZoomScale_;
	UIImage* imageToShow_;
	NSData* waitingImageData_;
	NSManagedObjectID* waitingMessageObjectID_;
	BOOL isLoading_;
	NSTimer* timer_;
	BOOL isLoaded_;
	float nextZoomScale_;
	BOOL isInAnimation_;
	int lastLayoutWidth_;
	NSURL* currentMessageObjectImageURL_;
	UIEdgeInsets cropInsets;
}
@property(assign, nonatomic) UIEdgeInsets cropInsets;
@property(assign, nonatomic) BOOL isInAnimation;
@property(readonly, assign, nonatomic) ProgressView* progressView;
@property(assign, nonatomic) unsigned index;
-(void).cxx_destruct;
-(void)doubleTap:(CGPoint)tap;
-(void)doZoom;
-(void)reconfigureImage;
-(void)configureForImageSize:(CGSize)imageSize;
-(void)loadImage:(id)image;
-(void)displayImage:(id)image;
-(void)setImageLoaded:(BOOL)loaded;
-(id)imageView;
-(void)loadCancel;
-(void)loadImageFromData:(id)data forMessage:(id)message;
-(void)beginLoad:(id)load;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBBackgroundTask : NSObject {
	unsigned mBackgroundTaskID;
	id mCompletionBlock;
}
@property(copy, nonatomic) id completionBlock;
+(id)backgroundTaskWithCompletionBlock:(id)completionBlock;
-(void).cxx_destruct;
-(void)endTask;
-(void)beginTask;
-(void)dealloc;
-(id)init;
-(void)endBackgroundTask;
@end

__attribute__((visibility("hidden")))
@interface MBPostViewController : MBViewController <UIScrollViewDelegate, UIActionSheetDelegate, UIGestureRecognizerDelegate> {
	BOOL mUpdateByUserAction;
	BOOL mIsStopMovie;
	int mLastAlertTime;
	MBPostViewControllerActions* mActions;
	MBMoviePlayerView* mMoviePlayerView;
	MBToastView* mToastView;
	MBIndicatorLayerView* mIndicatorLayer;
	NSString* mSourceType;
	MBActivity* mWillShareActivity;
	NSString* mPostId;
	NSString* mActorId;
	int mHomeType;
	int mShareType;
	NSDictionary* mActionSheetInfo;
	UIView* mPlayingMovieContentView;
	MBTableView* mCurrentTableView;
	NSMutableDictionary* mVisibleMovieViews;
	double mLastOffsetCapture;
	CGPoint mLastOffset;
	CGRect mKeyboardRect;
	CGSize mLastContentSize;
	BOOL isNeedToUnlockAnimationStickers;
	BOOL isNeedMoveToDetailView;
	MBActivity* moveActivity;
	BOOL _isViewWillDisappear;
}
@property(readonly, assign, nonatomic) BOOL isViewWillDisappear;
@property(readonly, assign, nonatomic) NSString* sourceType;
@property(readonly, assign, nonatomic) MBIndicatorLayerView* indicatorLayer;
@property(readonly, assign, nonatomic) MBMoviePlayerView* moviePlayerView;
@property(retain, nonatomic) MBPostViewControllerActions* actions;
-(void).cxx_destruct;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)unRegistKeyboardNotification;
-(void)registKeyboardNotification;
-(void)moveToDetailView;
-(void)didCompleteSharePost:(id)post;
-(void)cancelBlockActionWithMessage:(id)message sender:(id)sender activity:(id)activity block:(id)block;
-(void)addFriendActionWithMessage:(id)message sender:(id)sender activity:(id)activity block:(id)block;
-(int)getUserStatusForPostShare;
-(int)preloadCellCount;
-(int)fetchCount;
-(void)moveCurrentPostPosition;
-(void)plusSharedCountToPost;
-(void)processPostShareReady;
-(void)tappedPostShareButton:(id)button userinfo:(id)userinfo;
-(void)showShareActionSheet;
-(void)shareToTalk;
-(void)shareToPost;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)checkScrollSpeed:(id)speed;
-(BOOL)isSufficientMovieAreaOnScreen:(id)screen;
-(BOOL)isDisappearMovieAreaOnScreenWithView:(id)view;
-(void)checkDisappearMovieViewOnScreen;
-(void)resetPlayingMovieContentView:(id)view;
-(void)stopMovie;
-(void)downloadMovieCompleteAttachMovieToView:(id)view frame:(CGRect)frame URL:(id)url;
-(void)showMovie;
-(void)updateStickerViewsLockedOf:(id)of isLock:(BOOL)lock;
-(void)playVisibleAnimationSticker:(id)sticker;
-(void)showContentsAfterScroll:(id)scroll;
-(void)setPlayingMovieContentView:(id)view;
-(void)checkVisibleMovie:(id)movie showMovie:(id)movie2;
-(void)searchVisibleMovieAreaWhenNotExistPlayingMovie;
-(BOOL)isSnapMovieType:(id)type;
-(void)checkNeedMoviePlayerView:(id)view;
-(void)setCurrentTableView;
-(void)setEnableMoviePlayerView;
-(void)hideTextSelectionMenu;
-(void)showTextSelectionMenu;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(BOOL)confirmError:(id)error;
-(void)processForHomeWithData:(id)data viewController:(id)controller;
-(void)processWithData:(id)data viewController:(id)controller;
-(void)setActionSheetInfo:(id)info url:(id)url;
-(void)didTapped:(id)tapped;
-(void)unRegistNotifications;
-(void)registNotifications;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)setIsStopMovie;
-(void)deallocMoviePlayer;
-(void)anotherViewWillDisappear;
-(void)anotherViewWillAppear;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didBecomeActive:(id)active;
-(void)willResignActive:(id)active;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MBMarginContentView : MBBaseChildCellView {
	UIEdgeInsets mMargin;
}
+(id)createWithMargin:(UIEdgeInsets)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(id)initWithMargin:(UIEdgeInsets)margin;
@end

__attribute__((visibility("hidden")))
@interface LineStickerTabView : UIView <UIAlertViewDelegate, LinePackageManagerDelegate, NLStickerDownloadDelegate, UIScrollViewDelegate> {
	UIButton* backButton;
	UIButton* sticonToggleButton;
	LineCustomKeyboardView* controller;
	NLKeyboardTabViewDataSource* _dataManager;
	UIView* mTabBase;
	LineStickerTabButton* selectedTabButton;
	UIScrollView* tabScrollView;
	float nextX;
	CGPoint lastContentOffset;
	BOOL isShowShopIcon;
	UIImageView* shopIconView;
	LineStickerTabButton* historyButton;
	LineStickerTabButton* plusButton;
	LineStickerTabButton* settingButton;
	NSArray* availableForVisibleVCArray;
}
-(void).cxx_destruct;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)bringToFrontShopIconView;
-(void)adjustScrollViewSizeForShopIcon;
-(void)showShopIcon;
-(void)hideShopIcon;
-(void)createShopIconView;
-(void)stickerPackageDownloadSuccess:(id)success;
-(void)stickerPackage:(id)package downloaded:(float)downloaded;
-(void)stickerPackageDownloadFailed:(id)failed;
-(void)stickerPackageDownloadCanceled:(id)canceled;
-(void)packageRemoved:(id)removed;
-(void)package:(id)package movedFromIndex:(unsigned)index toIndex:(unsigned)index3;
-(void)packageChanged:(id)changed;
-(void)packageAddedToKeyboard:(id)keyboard;
-(void)stickerPackageDownloadStarted:(id)started;
-(void)showAnimationStickerNoUseAlert:(id)alert;
-(void)letControllerOpenPackage:(id)package;
-(void)tappedButton:(id)button event:(id)event;
-(void)downloadThumbnailImages:(id)images;
-(void)controlProgressViewWithPackage:(id)package WithProgress:(float)progress;
-(void)scrollToTabWithPackageID:(long long)packageID animated:(BOOL)animated;
-(void)setSelectedPackage:(id)package;
-(void)removeTabButton:(id)button animated:(BOOL)animated;
-(id)newTabButtonForPackage:(id)package animated:(BOOL)animated addTo:(id)to touchUpAction:(SEL)action;
-(void)configureButton:(id)button forPackage:(id)package;
-(id)tabButtonForPackage:(id)package;
-(int)stickerTabCount;
-(void)layoutSubviews;
-(void)refreshWidthOfScrollView;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)resetController;
-(void)initTabDatasource;
-(void)moveTailButtonsWithSuperview:(id)superview offsetX:(float)x;
-(void)addTailButtons;
-(void)setSticonToggleButtonAction;
-(void)setBackButtonAction;
-(BOOL)shouldShowShopIcon;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame controllerView:(id)view options:(unsigned)options;
@end

__attribute__((visibility("hidden")))
@interface LineStickerTabButton : UIButton {
	UIImageView* _newIcon;
	UIImageView* _aniStickerIcon;
}
-(void).cxx_destruct;
-(void)setSelected:(BOOL)selected;
-(void)setSelectedImage:(id)image;
-(void)setImage:(id)image;
-(void)setNewIconVisible:(BOOL)visible;
-(void)setAniStickerIcon:(BOOL)icon isAnimation:(BOOL)animation;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ChangePasswordViewController : NLViewController <EmailPasswordDelegate> {
}
-(void)clickConfirm:(id)confirm password:(id)password;
-(void)moveViewOffset:(float)offset;
-(void)lastFieldDidEndEditing;
-(void)changeFocus:(int)focus in:(BOOL)anIn;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface RemoteSessionListViewController : NLTableViewController <UIAlertViewDelegate> {
	NSMutableArray* sessionList;
	NSMutableDictionary* arraysForType;
	NSArray* typeList;
}
@property(retain, nonatomic) NSArray* typeList;
@property(retain, nonatomic) NSMutableDictionary* arraysForType;
@property(retain, nonatomic) NSMutableArray* sessionList;
+(id)applicationTypeName:(int)name;
-(void).cxx_destruct;
-(void)logout:(id)logout;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)sessionRefresh;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)prepareData;
-(id)getIndexPathUsingViewTag:(id)tag;
-(void)setIndexPath:(id)path usingViewTag:(id)tag;
-(id)typeForSection:(int)section;
-(id)arrayForSection:(int)section;
-(id)arrayForType:(id)type;
-(void)didReceiveMemoryWarning;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface AccountService : NSObject {
}
+(void)updateAccountMigrationPincode:(id)pincode completionBlock:(id)block errorBlock:(id)block3;
+(void)confirmEmailWithVerifier:(id)verifier pincode:(id)pincode completionBlock:(id)block errorBlock:(id)block4;
+(void)registEmailConfirmationCompletionBlock:(id)block errorBlock:(id)block2;
+(void)registEmailWithAccountId:(id)accountId accountPassword:(id)password ignore:(BOOL)ignore completionBlock:(id)block errorBlock:(id)block5;
+(void)requestResendEmailConfirmation:(id)confirmation completionBlock:(id)block errorBlock:(id)block3;
+(void)requestEmailConfirmationWithEmailConfirmation:(id)emailConfirmation completionBlock:(id)block errorBlock:(id)block3;
+(void)loginWithQRAuthKey:(id)qrauthKey pinCode:(id)code completionBlock:(id)block errorBlock:(id)block4;
+(void)logoutSessionWithTokenKey:(id)tokenKey completionBlock:(id)block errorBlock:(id)block3;
+(void)getSessionList:(id)list errorBlock:(id)block;
+(void)requestIdentityUnbindWithProvider:(int)provider identifier:(id)identifier completionBlock:(id)block errorBlock:(id)block4;
+(void)requestAccountPasswordResetWithProvider:(int)provider identifier:(id)identifier completionBlock:(id)block errorBlock:(id)block4;
+(void)clearIdentityCredentialWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
+(void)setAccountWithProvider:(int)provider accountID:(id)anId password:(id)password completionBlock:(id)block errorBlock:(id)block5;
+(void)setIdentityCredentialWithAccountProvider:(int)accountProvider accountId:(id)anId accountPassword:(id)password completionBlock:(id)block errorBlock:(id)block5;
+(void)isAccountIdAvailableWithAccountProvider:(int)accountProvider accountId:(id)anId completionBlock:(id)block errorBlock:(id)block4;
+(void)getRSAidentityCredentialProvider:(int)provider accountID:(id)anId password:(id)password completionBlock:(id)block errorBlock:(id)block5;
@end

__attribute__((visibility("hidden")))
@interface NLSticonURLManager : NSObject {
}
+(id)URLforSticonStrayImage:(int)image code:(int)code;
+(id)URLforSticonTabImage:(BOOL)image id:(int)anId packageVersion:(int)version;
+(id)URLforSticonMetadata:(int)metadata packageVersion:(int)version metaVersion:(int)version3;
+(id)URLforSticonPackage:(int)package packageVersion:(int)version;
+(id)baseURL:(int)url version:(int)version;
+(id)baseURL:(int)url;
@end

__attribute__((visibility("hidden")))
@interface OwnOperationService : NSObject {
}
+(void)cancelGroupInvitationFor:(id)aFor toGroup:(id)group at:(long long)at inContext:(id)context;
+(void)acceptGroupInvitation:(id)invitation inContext:(id)context;
+(void)deleteGroupAndChat:(id)chat inContext:(id)context;
+(void)createGroupWithID:(id)anId inContext:(id)context;
+(id)createGroup:(id)group inContext:(id)context;
+(void)inviteMembers:(id)members toChatMid:(id)chatMid inContext:(id)context;
+(void)removeAllMessagesInManagedObjectContext:(id)managedObjectContext;
+(void)deleteChatMessage:(id)message inContext:(id)context;
+(void)readUpToMessageID:(id)messageID inChatWithMID:(id)mid inContext:(id)context;
+(void)removeRoom:(id)room inContext:(id)context;
+(id)createRoomWithMid:(id)mid inContext:(id)context;
+(id)createRoom:(id)room inContext:(id)context;
+(void)user:(id)user changeDisplayName:(id)name inContext:(id)context;
+(void)user:(id)user hide:(BOOL)hide inContext:(id)context;
+(void)user:(id)user withTimestamp:(long long)timestamp markFavoriteContactInContext:(id)context;
+(void)user:(id)user deleteContactInContext:(id)context;
+(void)user:(id)user blockContactInContext:(id)context;
+(void)updateContactWithMID:(id)mid contactSettingAttribute:(int)attribute inContext:(id)context;
+(void)updatedSettingsAttribute:(int)attribute inContext:(id)context;
+(void)updateProfileAttribute:(int)attribute;
@end

__attribute__((visibility("hidden")))
@interface MBAPIResponse : NSObject {
	int mResultCode;
	id mResult;
	NSError* mError;
}
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) id result;
@property(readonly, assign, nonatomic) int resultCode;
+(id)responseWithResult:(id)result error:(id)error;
-(void).cxx_destruct;
-(id)description;
-(id)initWithResult:(id)result error:(id)error;
@end

__attribute__((visibility("hidden")))
@interface MBPlainTextContentView : MBBaseChildCellView {
	MBTextLocation* mTextLocation;
	int mPostViewType;
	NMAttributedLabel* mPlainTextView;
	MBCellAttributedLabelDelegate* mPlainTextDelegate;
	NSString* cacheKey;
}
+(id)moreAttrSettings;
+(UIEdgeInsets)marginForTimelineEnd;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(UIEdgeInsets)margin;
-(id)didSelectedUserInfo;
-(int)postViewType;
-(id)textLocation;
-(void)resetCellData;
-(void)setCellData:(id)data;
-(void)resetCacheKey;
-(id)cacheKeyWithWidth:(float)width;
-(id)cacheKey;
-(id)cutAttributedString:(id)string maxLength:(int)length;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface NLThemeListViewCell : UITableViewCell <PSTCollectionViewDelegateFlowLayout, PSTCollectionViewDelegate, PSTCollectionViewDataSource, NLThemeListItemViewDelegate> {
	NSArray* _items;
	UIView* _background;
	PSUICollectionView_* _collectionView;
	UIView* _layoutGuide;
	NSDictionary* _sizeCacheForProduct;
	id<NLThemeListViewCellDelegate> _tapDelegate;
}
@property(assign) id<NLThemeListViewCellDelegate> tapDelegate;
+(CGSize)sizeOfCellForItems:(id)items;
-(void).cxx_destruct;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)onTap:(id)tap item:(id)item;
-(void)layoutSubviews;
-(void)setupSubviews;
-(void)setItems:(id)items;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface RequestSequenceManager : NSObject {
	NSMutableArray* requestSequenceList;
}
@property(readonly, assign, nonatomic) int nextRequestSequence;
+(void)createDirectoryForURL:(id)url;
+(id)managerFileURL;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedSequenceManager;
-(void).cxx_destruct;
-(void)removeOldSequence;
-(void)reset;
-(void)saveToFile;
-(void)insertSequence:(int)sequence;
-(BOOL)isProcessedRequestSequenceInOperation:(id)operation;
-(BOOL)isProcessedRequestSequence:(int)sequence;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBURLImageView : UIImageView <MBURLImageObserving> {
	MBURLImage* mURLImage;
	id mUpdateCallbackBlock;
}
-(void).cxx_destruct;
-(void)URLImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)setImageAnimateWithImage:(id)image;
-(void)setUpdateCallback:(id)callback;
-(void)setURLImage:(id)image callback:(id)callback;
-(void)setURLImage:(id)image;
-(id)URLImage;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LAAlertHUD : NSObject <LAProgressHUDDelegate> {
	LAProgressHUD* _hud;
}
@property(retain, nonatomic) LAProgressHUD* hud;
+(void)hideHUD;
+(void)showFailHUDWithLabelText:(id)labelText detailLabelText:(id)text;
+(void)showNetworkErrorHUD:(id)hud;
+(void)showSuccessHUDWithLabelText:(id)labelText;
+(void)showHUDWithCustomView:(id)customView;
+(id)hud;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)hudWasHidden:(id)hidden;
-(id)showHUD:(BOOL)hud;
-(id)showHUD;
@end

__attribute__((visibility("hidden")))
@interface NMParagraphStyle : NSObject {
	float mMaxLineSpacing;
	CTParagraphStyleRef mStyle;
}
@property(readonly, assign, nonatomic) CTParagraphStyleRef style;
+(id)defaultParagraphStyle;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLBuddyManager : NSObject {
}
+(void)refreshNewlyAddedBuddies:(id)buddies fromThisCountry:(id)thisCountry;
@end

__attribute__((visibility("hidden")))
@interface RegistrationTermKrViewController : NLViewController <UIWebViewDelegate> {
	UILabel* _serviceContractTitleLabel;
	UIView* _serviceContractView;
	UIWebView* _serviceContractContentView;
	UILabel* _serviceContractAgreeLabel;
	UILabel* _privacyContractTitleLabel;
	UIView* _privacyContractView;
	UIWebView* _privacyContractContentView;
	UILabel* _privacyContractAgreeLabel;
	UIButton* _agreeButton;
	UIButton* _serviceContractCheckBox;
	UIButton* _privacyContractCheckBox;
}
@property(assign, nonatomic) UIButton* privacyContractCheckBox;
@property(assign, nonatomic) UIButton* serviceContractCheckBox;
@property(assign, nonatomic) UIButton* agreeButton;
@property(assign, nonatomic) UILabel* privacyContractAgreeLabel;
@property(assign, nonatomic) UIWebView* privacyContractContentView;
@property(assign, nonatomic) UIView* privacyContractView;
@property(assign, nonatomic) UILabel* privacyContractTitleLabel;
@property(assign, nonatomic) UILabel* serviceContractAgreeLabel;
@property(assign, nonatomic) UIWebView* serviceContractContentView;
@property(assign, nonatomic) UIView* serviceContractView;
@property(assign, nonatomic) UILabel* serviceContractTitleLabel;
-(void)openHelp:(id)help;
-(void)privacyPolicyAgreeSectionPressed;
-(void)termsOfServiceAgreeSectionPressed;
-(void)agreeButtonPressed:(id)pressed;
-(void)checkBoxPressed:(id)pressed;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(BOOL)canEnableConfirm;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)loadTermsContent;
-(void)customizeSubviews;
-(void)configureNavigationItem;
@end

__attribute__((visibility("hidden")))
@interface SMSInfoView : UIView {
	UIImageView* phoneNumberBgView;
	UILabel* phoneNumberLabel;
	UILabel* descriptionLabel;
	UIButton* cancelButton;
	UIButton* okButton;
	UIImageView* flexiblePopupBg;
	UIImageView* popupTopBg;
	UIView* popupContentView;
	UIView* bottomFrame;
	id<SMSInfoViewDeleagete> delegate;
	NSString* _phoneNumber;
}
@property(assign, nonatomic) UIView* bottomFrame;
@property(assign, nonatomic) UIView* popupContentView;
@property(assign, nonatomic) UIImageView* popupTopBg;
@property(assign, nonatomic) UIImageView* flexiblePopupBg;
@property(assign, nonatomic) UIButton* okButton;
@property(assign, nonatomic) UIButton* cancelButton;
@property(assign, nonatomic) UILabel* descriptionLabel;
@property(assign, nonatomic) UILabel* phoneNumberLabel;
@property(assign, nonatomic) UIImageView* phoneNumberBgView;
@property(retain, nonatomic) NSString* phoneNumber;
@property(assign, nonatomic) id<SMSInfoViewDeleagete> delegate;
+(id)viewFromNib;
-(void).cxx_destruct;
-(void)okButtonPressed:(id)pressed;
-(void)cancelButtonPressed:(id)pressed;
-(void)layoutSubviews;
-(void)awakeFromNib;
-(void)customizeAccessibility;
-(void)setupLocalizedStrings;
-(void)customizeSubviews;
@end

__attribute__((visibility("hidden")))
@interface ChatSettingsViewController : NLSettingsTableViewController <UIActionSheetDelegate> {
}
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)toggleCallAllow:(id)allow;
-(void)onChangedAutoResendOnOff:(id)off;
-(void)onChangedReturnKeyOnOff:(id)off;
-(void)onChangedStickerPreviewOnOff:(id)off;
-(void)doActionOrientationSection;
-(void)doActionKeyboardSection;
-(void)doActionAttachedFilesSection;
-(void)doActionClearHistorySection;
-(void)doActionPhotoSizeSection;
-(void)doActionFontTypeSection;
-(void)doActionBackgroundSection;
-(id)voipSectionFooter;
-(id)autoResendFooter;
-(id)orientationSectionFooter;
-(id)keyboardSectionFooter;
-(id)stickerPreviewSectionFooter;
-(id)fontTypeSectionFooter;
-(void)configureVoipSectionCell:(id)cell;
-(void)configureAttachedFilesSectionCell:(id)cell;
-(void)configureClearHistorySectionCell:(id)cell;
-(void)configureAutoResendSectionCell:(id)cell;
-(void)configurePhotoSizeSectionCell:(id)cell;
-(void)configureOrientationSectionCell:(id)cell;
-(void)configureKeyboardSectionCell:(id)cell;
-(void)configureStickerPreviewSectionCell:(id)cell;
-(void)configureFontTypeSectionCell:(id)cell;
-(void)configureBackgroundSectionCell:(id)cell;
-(id)currentOrientationTypeString;
-(BOOL)currentVoipSetting;
-(BOOL)currentAutoResendSetting;
-(BOOL)currentSendWithReturnKeySetting;
-(BOOL)currentStickerPreviewSetting;
-(id)currentChatFontSizeType;
-(id)currentPhotoSizeString;
-(id)newRowKeySections;
-(void)configureRowInfoMapping:(id)mapping;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface ChatFontSizeSelectionViewController : NLTableViewController <UITableViewDelegate, UITableViewDataSource> {
	NSIndexPath* oldFontSizeIndexPath_;
	int initialFontSizeType_;
}
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)doActionChatFontSizeSelectionSectionAtRow:(int)row;
-(void)configureSectionChatFontSizeSectionCell:(id)cell atRow:(int)row;
-(void)resetCellHeightsOfAllMessages;
-(void)initializeUI;
-(BOOL)isCurrentChatFontSizeTypeWithRow:(int)row;
-(int)chatTypeOnRow:(int)row;
-(int)rowOnChatFontType:(int)type;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface LAActionSheet : UIActionSheet <UIActionSheetDelegate> {
}
+(id)actionSheetWithTitle:(id)title message:(id)message destructiveButtonTitle:(id)title3 buttons:(id)buttons showInView:(id)view onDismiss:(id)dismiss onCancel:(id)cancel;
+(id)actionSheetWithTitle:(id)title message:(id)message buttons:(id)buttons showInView:(id)view onDismiss:(id)dismiss onCancel:(id)cancel;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(id)initWithWithTitle:(id)title message:(id)message destructiveButtonTitle:(id)title3 buttons:(id)buttons showInView:(id)view onDismiss:(id)dismiss onCancel:(id)cancel;
@end

__attribute__((visibility("hidden")))
@interface ItemSelectionViewController : NLTableViewController {
	BOOL _reselectable;
	BOOL _isDirty;
	NSArray* _items;
	id<ItemSelectionViewControllerDelegate> _delegate;
	int _tag;
	int _lastUpdatedIndex;
	int _selectedIndex;
}
@property(assign, nonatomic) BOOL isDirty;
@property(assign, nonatomic) int lastUpdatedIndex;
@property(assign, nonatomic) BOOL reselectable;
@property(assign, nonatomic) int selectedIndex;
@property(assign, nonatomic) int tag;
@property(assign, nonatomic) id<ItemSelectionViewControllerDelegate> delegate;
@property(retain, nonatomic) NSArray* items;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)selectItem:(id)item;
-(id)titleForRowAtIndexPath:(id)indexPath;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)removeObservers;
-(void)addObservers;
-(void)__noti__willResignActive:(id)active;
-(void)commit;
-(void)dealloc;
-(id)initWithStyle:(int)style;
-(id)initWithItems:(id)items selectedIndex:(int)index;
-(id)initWithItems:(id)items;
@end

__attribute__((visibility("hidden")))
@interface NotificationSoundSelectionViewController : ItemSelectionViewController {
	NSMutableDictionary* _cachedSounds;
}
@property(retain, nonatomic) NSMutableDictionary* cachedSounds;
-(void).cxx_destruct;
-(void)selectItem:(id)item;
-(id)titleForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface EachTalkSettingsViewController : NLTableViewController <UIAlertViewDelegate, UIActionSheetDelegate, UIDocumentInteractionControllerDelegate> {
	NLSafeUnretainedObject* _weakSelf;
	BOOL _wroteData;
	BOOL _canOpenPlainTextFiles;
	UIDocumentInteractionController* docController_;
	MessageViewController* _parentController;
	TalkChatObject* _chatObject;
	int _roomType;
	NSString* _tmpFilePath;
	NSString* _chatHistory;
}
@property(readonly, assign, nonatomic) UIDocumentInteractionController* docController;
@property(assign, nonatomic) BOOL canOpenPlainTextFiles;
@property(assign, nonatomic) BOOL wroteData;
@property(retain, nonatomic) NSString* chatHistory;
@property(retain, nonatomic) NSString* tmpFilePath;
@property(assign, nonatomic) int roomType;
@property(retain, nonatomic) TalkChatObject* chatObject;
@property(assign, nonatomic) MessageViewController* parentController;
-(void).cxx_destruct;
-(void)documentInteractionControllerDidDismissOpenInMenu:(id)documentInteractionController;
-(void)documentInteractionController:(id)controller willBeginSendingToApplication:(id)application;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)didReceiveMemoryWarning;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)configureNavitationItem;
-(void)openSkinSettingView;
-(void)deleteAllRecords;
-(void)tryToPresentNewMailComposer;
-(void)onClosePressed:(id)pressed;
-(void)dealloc;
-(id)initWithChatObject:(id)chatObject;
@end

__attribute__((visibility("hidden")))
@interface MBUnknownContentView : MBBaseChildCellView {
	UILabel* mLabel;
}
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(UIEdgeInsets)margin;
-(void)setCellData:(id)data;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface MBIndicatorLayerView : UIView {
	UIImageView* mBgImage;
	UIActivityIndicatorView* mIndicatorView;
	UIImageView* mIconView;
	UILabel* mMessageLabel;
	int mType;
	CGRect _superRect;
}
@property(assign, nonatomic) CGRect superRect;
+(id)indicatorLayerViewWithType:(int)type;
+(id)indicatorLayerView;
-(void).cxx_destruct;
-(void)hideWithDuration:(float)duration;
-(void)hide;
-(void)showWithLoadingMessage:(id)loadingMessage;
-(void)layoutViews;
-(id)initWithFrame:(CGRect)frame type:(int)type;
@end

__attribute__((visibility("hidden")))
@interface AuthenticationCompleteViewController : NLViewController {
}
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)popViewControllerAnimated;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface UserActionChoiceViewController : NLViewController {
	UIImageView* _imageView;
	UILabel* _messageTitle;
	UILabel* _messageDescription;
	UIButton* _button1;
	UIButton* _button2;
	UIImageView* _messageViewBackground;
	UIImageView* _buttonsViewBackground;
	UIView* _centeringView;
	UIView* _messageView;
	UIView* _buttonsView;
}
@property(assign, nonatomic) UIView* buttonsView;
@property(assign, nonatomic) UIView* messageView;
@property(assign, nonatomic) UIView* centeringView;
@property(assign, nonatomic) UIImageView* buttonsViewBackground;
@property(assign, nonatomic) UIImageView* messageViewBackground;
@property(assign, nonatomic) UIButton* button2;
@property(assign, nonatomic) UIButton* button1;
@property(assign, nonatomic) UILabel* messageDescription;
@property(assign, nonatomic) UILabel* messageTitle;
@property(assign, nonatomic) UIImageView* imageView;
-(void)buttonPressed:(id)pressed;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)updateLayouts;
-(void)layoutCenteringView;
-(void)layoutSubviewsOfCenteringView;
-(void)layoutMessageView;
-(void)layoutButtonsView;
-(void)layoutSubviewsOfButtonsView;
-(void)customizeFramesAfterLayouts;
-(void)addSubviewsBeforeLayouts;
-(void)button2Pressed;
-(void)button1Pressed;
-(id)button2Title;
-(id)button1Title;
-(BOOL)useButton2;
-(BOOL)useButton1;
-(id)messageDescriptionText;
-(id)messageTitleText;
-(id)mainImageName;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DeviceNotAvailableErrorViewController : UserActionChoiceViewController <UIAlertViewDelegate> {
}
-(void)button2Pressed;
-(id)button2Title;
-(BOOL)useButton2;
-(BOOL)useButton1;
-(id)messageDescriptionText;
-(id)messageTitleText;
-(id)mainImageName;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface ServiceNotAvailableErrorViewController : UserActionChoiceViewController <MigrationCodeViewControllerDelegate> {
	int _availableType;
	NSString* _SNSAccessToken;
	NSString* _migrationPincodeSessionId;
	TalkIndicatorView* _indicatorView;
}
@property(retain, nonatomic) TalkIndicatorView* indicatorView;
@property(retain, nonatomic) NSString* migrationPincodeSessionId;
@property(retain, nonatomic) NSString* SNSAccessToken;
@property(assign, nonatomic) int availableType;
-(void).cxx_destruct;
-(void)dismissModalViewController;
-(BOOL)prefersStatusBarHidden;
-(void)button2Pressed;
-(void)registerWithSnsId;
-(void)migrationCodeViewController:(id)controller didFinishWithPincode:(id)pincode;
-(void)button1Pressed;
-(id)button2Title;
-(id)button1Title;
-(id)messageDescriptionText;
-(id)messageTitleText;
-(id)mainImageName;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface RegistrationAccountConnectViewController : NLViewController <UIAlertViewDelegate, UITextFieldDelegate> {
	RegistrationInputField* _accountField;
	RegistrationInputField* _passwordField;
	UIButton* _loginButton;
	UIButton* _skipButton;
	UIButton* _whenForgotPasswordButton;
	UIView* _whenForgotPasswordUnderline;
	UIButton* _switchingToNaverIDButton;
	UIView* _switchingToNaverIDUnderlineView;
	UIButton* _switchingToEmailButton;
	UIView* _switchingToEmailUnderlineView;
	UIView* _separatorLineView;
	UIButton* _facebookButton;
	UIView* _chineseSNSButtonsView;
	int _accountType;
	UITextField* _editingTextField;
}
@property(retain, nonatomic) UITextField* editingTextField;
@property(assign, nonatomic) int accountType;
@property(assign, nonatomic) UIView* chineseSNSButtonsView;
@property(assign, nonatomic) UIButton* facebookButton;
@property(assign, nonatomic) UIView* separatorLineView;
@property(assign, nonatomic) UIView* switchingToEmailUnderlineView;
@property(assign, nonatomic) UIButton* switchingToEmailButton;
@property(assign, nonatomic) UIView* switchingToNaverIDUnderlineView;
@property(assign, nonatomic) UIButton* switchingToNaverIDButton;
@property(assign, nonatomic) UIView* whenForgotPasswordUnderline;
@property(assign, nonatomic) UIButton* whenForgotPasswordButton;
@property(assign, nonatomic) UIButton* skipButton;
@property(assign, nonatomic) UIButton* loginButton;
@property(assign, nonatomic) RegistrationInputField* passwordField;
@property(assign, nonatomic) RegistrationInputField* accountField;
-(void).cxx_destruct;
-(void)feixinButtonTapped:(id)tapped;
-(void)renrenButtonTapped:(id)tapped;
-(void)weiboButtonTapped:(id)tapped;
-(void)facebookButtonTapped:(id)tapped;
-(void)connectToSNS:(int)sns;
-(void)switchingToEmailButtonTapped:(id)emailButtonTapped;
-(void)switchingToNaverIDButtonTapped:(id)naverIDButtonTapped;
-(void)passwordTextChanged:(id)changed;
-(void)whenForgotPasswordButtonPressed:(id)pressed;
-(void)skipButtonPressed:(id)pressed;
-(void)okButtonPressed:(id)pressed;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)reloadView;
-(void)scrollDown;
-(void)scrollUpToField:(id)field;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)configureChineseSNSButtonsView:(id)view;
-(void)configureFacebookButton:(id)button;
-(void)configureSeparatorLineView:(id)view;
-(void)configureSwitchingToEmailUnderlineView:(id)emailUnderlineView;
-(void)configureSwitchingToEmailButton:(id)emailButton;
-(void)configureSwitchingToNaverIDUnderlineView:(id)naverIDUnderlineView;
-(void)configureSwitchingToNaverIDButton:(id)naverIDButton;
-(void)configureWhenForgotPasswordUnderlineView:(id)view;
-(void)configureWhenForgotPasswordButton:(id)button;
-(void)configureSkipButton:(id)button;
-(void)configureLoginButton:(id)button;
-(void)configurePasswordField:(id)field;
-(void)configureAccountField:(id)field;
-(void)configureSubviews;
-(void)configureNavigationItem;
@end

__attribute__((visibility("hidden")))
@interface LineRSAUtils : NSObject {
}
+(id)rsaEncryptWithSessionKey:(id)sessionKey userID:(id)anId password:(id)password publicKey:(id)key;
+(void)loadAuthJSLibrary:(id)library;
@end

__attribute__((visibility("hidden")))
@interface RegisterAccountKRViewController : NLViewController <UITextFieldDelegate> {
	BOOL shownRegistrationAlertLabel;
	UIView* formView;
	UIImageView* formBgView;
	RegistrationInputField* accountField;
	RegistrationInputField* passwordField;
	UIButton* loginButton;
	UIButton* findAccountButton;
	UIButton* findPasswordButton;
	UIButton* agreeButton;
	UIButton* agreeButtonBacked;
	UILabel* agreeDescriptionLabel;
	UIButton* agreeDescriptionButton;
	UIView* agreeDescriptionUnderline;
	UILabel* registrationAlertLabel;
	id successAlertDelegate;
	NSString* redirectURL;
}
@property(retain, nonatomic) NSString* redirectURL;
@property(assign, nonatomic) id successAlertDelegate;
@property(assign, nonatomic, getter=isShownRegistrationAlertLabel) BOOL shownRegistrationAlertLabel;
@property(assign, nonatomic) UILabel* registrationAlertLabel;
@property(assign, nonatomic) UIView* agreeDescriptionUnderline;
@property(assign, nonatomic) UIButton* agreeDescriptionButton;
@property(assign, nonatomic) UILabel* agreeDescriptionLabel;
@property(assign, nonatomic) UIButton* agreeButtonBacked;
@property(assign, nonatomic) UIButton* agreeButton;
@property(assign, nonatomic) UIButton* findPasswordButton;
@property(assign, nonatomic) UIButton* findAccountButton;
@property(assign, nonatomic) UIButton* loginButton;
@property(assign, nonatomic) RegistrationInputField* passwordField;
@property(assign, nonatomic) RegistrationInputField* accountField;
@property(assign, nonatomic) UIImageView* formBgView;
@property(assign, nonatomic) UIView* formView;
-(void).cxx_destruct;
-(void)agreeDescriptionLinkClicked:(id)clicked;
-(void)agreeButtonPressed:(id)pressed;
-(void)textChanged:(id)changed;
-(void)findPasswordButtonPressed:(id)pressed;
-(void)findAccountButtonPressed:(id)pressed;
-(void)processRegistration;
-(void)loginButtonPressed:(id)pressed;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)updateLoginButtonEnabled;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)customizeSubviews;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumTitleInputView : UIView <UITextFieldDelegate> {
	UILabel* _titleLabel;
	UILabel* _countLabel;
	UITextField* _textField;
	NSString* _albumTitle;
	NSString* _groupID;
	unsigned _titleLength;
}
@property(assign, nonatomic) unsigned titleLength;
@property(retain, nonatomic) NSString* groupID;
@property(retain, nonatomic) NSString* albumTitle;
@property(retain, nonatomic) UITextField* textField;
@property(retain, nonatomic) UILabel* countLabel;
@property(retain, nonatomic) UILabel* titleLabel;
-(void).cxx_destruct;
-(BOOL)checkIfTitleIsValid;
-(id)initialAlbumTitle;
-(id)currentAlbumTitle;
-(void)resetTemporaryAlbumName;
-(void)saveTemporaryAlbumName;
-(id)defaultAlbumTitle;
-(id)findNextPlaceHolder:(id)holder defaultTitle:(id)title;
-(id)formattedDefaultDateTitle;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)setCountLabelText;
-(void)fixTextForIOS4;
-(void)textFieldDidChange;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(id)numberPatternStringInString:(id)string;
-(id)currentInputString;
-(void)setupTextField;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame albumId:(id)anId groupID:(id)anId3 originalTitle:(id)title acceptFlatTheme:(BOOL)theme;
-(id)initWithFrame:(CGRect)frame flatTheme:(BOOL)theme;
-(void)setupNormalView;
-(void)setupFlatThemeView;
@end

__attribute__((visibility("hidden")))
@interface RegistrationAgeVerificationViewController : UserActionChoiceViewController {
}
-(void)customizeFramesAfterLayouts;
-(void)addSubviewsBeforeLayouts;
-(void)button2Pressed;
-(void)button1Pressed;
-(id)button2Title;
-(id)button1Title;
-(BOOL)useButton2;
-(BOOL)useButton1;
-(id)messageDescriptionText;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AccountChangeTopKRViewController : NLTableViewController <UIActionSheetDelegate, UIAlertViewDelegate> {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)openDeleteAccountActionSheet;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)makeDeleteAccountView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface NaverKrLoginInformationViewController : NLViewController {
}
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)descriptionDotLabelWithText:(id)text maxWidth:(float)width;
-(void)closeView;
@end

__attribute__((visibility("hidden")))
@interface LAChatPhotoNavigationController : NLAppearanceCustomizedNavigationController {
}
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(int)preferredStatusBarStyle;
-(id)dataSource;
-(id)initWithDataSource:(id)dataSource;
@end

__attribute__((visibility("hidden")))
@interface NLCallNavigationTitleView : UIView {
	UILabel* _labelTitle;
}
@property(retain, nonatomic) UILabel* labelTitle;
-(void).cxx_destruct;
-(void)setFrame:(CGRect)frame;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ChannelLocalURLProtocol : NSURLProtocol {
}
+(BOOL)requestIsCacheEquivalent:(id)equivalent toRequest:(id)request;
+(id)canonicalRequestForRequest:(id)request;
+(BOOL)canInitWithRequest:(id)request;
+(void)setRootPath:(id)path;
+(void)unregisterChannelLocalURLProtocol;
+(void)registerChannelLocalURLProtocol;
-(void)stopLoading;
-(void)startLoading;
-(BOOL)parsePathComponentsFromURL:(id)url name:(id*)name ext:(id*)ext bundleDirectory:(id*)directory;
@end

__attribute__((visibility("hidden")))
@interface ChannelBrowserCommand : CDVPlugin {
	NSString* shakeCallbackID;
	NSString* resizeCallbackID;
	NSString* installStatusCallbackID;
	NSString* launchStatusCallBackID;
}
@property(retain, nonatomic) NSString* launchStatusCallBackID;
@property(retain, nonatomic) NSString* installStatusCallbackID;
@property(retain, nonatomic) NSString* resizeCallbackID;
@property(retain, nonatomic) NSString* shakeCallbackID;
-(void).cxx_destruct;
-(id)currentBrowser;
-(void)applicationLaunchStatus:(id)status withDict:(id)dict;
-(void)applicationInstallStatus:(id)status withDict:(id)dict;
-(void)enableScrollToTop:(id)top withDict:(id)dict;
-(void)callbackResizeEvent:(CGSize)event;
-(void)unwatchSizeChanged:(id)changed withDict:(id)dict;
-(void)watchSizeChanged:(id)changed withDict:(id)dict;
-(void)callbackShakeEvent;
-(void)unwatchShaking:(id)shaking withDict:(id)dict;
-(void)watchShaking:(id)shaking withDict:(id)dict;
-(void)hideStatusBar:(id)bar withDict:(id)dict;
-(void)showStatusBar:(id)bar withDict:(id)dict;
-(void)rotateBrowser:(id)browser withDict:(id)dict;
-(void)closeBrowser:(id)browser withDict:(id)dict;
-(void)openBrowser:(id)browser withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface NLAgeVerificationViewController : NLTableViewController {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface ChannelBrowserViewController : CDVViewController <UINavigationControllerDelegate, UIImagePickerControllerDelegate, ChannelLoadingFailedViewDelegate, UITextFieldDelegate, UITableViewDataSource, UITableViewDelegate, UIActionSheetDelegate> {
	UIView* inputBgView_;
	UITextField* inputAddress_;
	UITableView* urlHistoryView_;
	NSArray* urlHistoryArray_;
	dispatch_source_s* timer_;
	CDVWhitelist* channelWhiteList_;
	UIWebView* webView_;
	UIActivityIndicatorView* indicatorView_;
	ChannelLoadingFailedView* loadingFailedView_;
	BOOL isInitialLoadingCompleted_;
	NSString* urlString_;
	BOOL needsDeviceEventObserving_;
	BOOL availableTextInput_;
	NSTimer* timeoutTimer_;
	BOOL isStartPage_;
	BOOL isClosing;
	BOOL isRegisteredWebCallback;
	BOOL isCheckedTitleBarTypeVersion;
	BOOL isWatchShake;
	BOOL isWatchResize;
	BOOL mustShowNavigationBar;
	BOOL isProfilingMode;
	BOOL isBrowserMenuHidden;
	NSArray* supportedOrientations_;
	int presentType_;
	int orientType_;
	int animationType_;
	int statusBar_;
	NSMutableArray* navigationCache_;
	NSString* channelId_;
	int toInterfaceOrientation;
	ChannelBrowserCommand* browserCommand;
	LineTitleBarCommand* titleBarCommand;
	int maxInputLength;
}
@property(assign, nonatomic, setter=setBrowserMenuHidden:) BOOL isBrowserMenuHidden;
@property(assign, nonatomic, setter=setProfilingMode:) BOOL isProfilingMode;
@property(assign, nonatomic, setter=setWatchResize:) BOOL isWatchResize;
@property(assign, nonatomic, setter=setWatchShake:) BOOL isWatchShake;
@property(assign, nonatomic) int maxInputLength;
@property(assign, nonatomic) BOOL mustShowNavigationBar;
@property(assign, nonatomic) int statusBar;
@property(assign, nonatomic) int animationType;
@property(assign, nonatomic) int orientType;
@property(assign, nonatomic) int presentType;
@property(retain, nonatomic) NSString* urlString;
@property(retain, nonatomic) NSArray* supportedOrientations;
@property(assign, nonatomic) LineTitleBarCommand* titleBarCommand;
@property(assign, nonatomic) ChannelBrowserCommand* browserCommand;
@property(assign, nonatomic) int toInterfaceOrientation;
@property(retain, nonatomic) NSString* channelId;
@property(retain, nonatomic) NSMutableArray* navigationCache;
@property(assign, nonatomic) BOOL isCheckedTitleBarTypeVersion;
@property(assign, nonatomic) BOOL isRegisteredWebCallback;
+(BOOL)isSkipCheckWhiteList;
+(void)startCheckingWhiteList;
+(void)stopCheckingWhiteList;
+(BOOL)isDeveloperMode;
+(void)setDeveloperMode:(BOOL)mode;
+(id)viewControllerForUrl:(id)url;
+(void)initialize;
+(void)applyPropertyWithButton:(id)button model:(id)model;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)pathForResource:(id)resource;
-(BOOL)execute:(id)execute;
-(id)getCommandInstance:(id)instance;
-(BOOL)isLoding;
-(BOOL)enableScrollToTop:(BOOL)top;
-(void)releaseForcelyCDVPluginRetainProperty;
-(void)rotateBrowser:(int)browser animation:(BOOL)animation;
-(void)hideStatusBar;
-(void)showStatusBar;
-(void)showChannelErrorViewWithRetryURLString:(id)retryURLString;
-(void)reload;
-(void)closeForChat;
-(void)close;
-(void)prepareToClose;
-(void)openURL:(id)url;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)willChangeStatusBarOrientation:(id)orientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(int)preferredStatusBarStyle;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)initWebEnviroment;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
-(void)removeBasicObservingEvents;
-(void)addBasicObservingEvents;
-(void)initPhoneGapComponent;
-(void)motionEnded:(int)ended withEvent:(id)event;
-(BOOL)canBecomeFirstResponder;
-(void)setChannelWhiteList;
-(void)setPlatformCookie;
-(void)adjustViewPosition:(id)position;
-(void)rotateView:(int)view animation:(BOOL)animation;
-(void)makeContentView;
-(BOOL)isWhiteUrl:(id)url;
-(BOOL)canOpenToChannelBrowserWithUrl:(id)url;
-(void)openInAppBrowser:(id)appBrowser;
-(void)redirectBlackListWithURL:(id)url;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)updateTitleBar:(id)bar;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidStartLoad:(id)webView;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)doesRequest:(id)request comeFromWebView:(id)webView;
-(void)addLineSpecificDeviceInfo;
-(void)loadingFailedViewDidRetryButtonTouched:(id)loadingFailedView;
-(void)loadingFailedViewDidCloseButtonTouched:(id)loadingFailedView;
-(void)requestTimeout:(id)timeout;
-(void)startRequestTimeoutTimer;
-(void)stopRequestTimeoutTimer;
-(BOOL)isShowingFailedView;
-(void)showFailedToLoadView:(BOOL)loadView;
-(void)resetButton;
-(void)updateOrientationForModel:(id)model;
-(void)applyViewPropertys;
-(void)actionTitleControl:(id)control;
-(void)actionButtonControl:(id)control;
-(void)createOrUpdateCenterView:(id)view;
-(void)createOrUpdateRightUIBarButtonItem:(id)item;
-(void)createOrUpdateLeftUIBarButtonItem:(id)item;
-(id)modelFromPageKey:(id)pageKey backIndex:(unsigned)index;
-(int)indexNavigationBarModelWithPageKey:(id)pageKey;
-(void)controlOptimizeStackListWithOptions:(id)options completionBlock:(id)block;
-(void)controlUpdateStackListWithOptions:(id)options completionBlock:(id)block;
-(void)controlGetStackListWithOptions:(id)options completionBlock:(id)block;
-(void)controlGetStackInfoWithOptions:(id)options completionBlock:(id)block;
-(void)updateTitleBarTypeWithModel:(id)model;
-(id)navigationBarModel;
-(void)didDownloadResourceFiles:(id)files;
-(void)updateNavigationBarForOrientationInfo:(id)orientationInfo;
-(void)setLeftBackButtonForcely;
-(void)setRightCloseButtonForcely;
-(void)updateChannelNavigationBarWithModel:(id)model;
-(void)controlTitleBarStackWithOtions:(id)otions completion:(id)completion;
-(void)setNavigationModel:(id)model;
-(BOOL)hasDuplicateKeyToLastModelWithNewModel:(id)newModel;
-(id)navigationBarModelWithPageKey:(id)pageKey;
-(id)caches;
-(void)setCaches:(id)caches;
-(void)clearModels;
-(int)countModel;
-(id)lastModel;
-(id)popModel;
-(BOOL)pushModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface LGPhotoScrollView : UIScrollView <UIScrollViewDelegate> {
	UIImageView* _imageView;
	UILabel* _label;
	LGErrorView* _errorView;
	LGProgressView* _progressView;
	unsigned _index;
	UIImage* _image;
	LGAsset* _asset;
	NSTimer* _imageTimer;
	id<LGPhotoScrollViewDelegate> _viewControllerDelegate;
}
@property(assign, nonatomic) __weak id<LGPhotoScrollViewDelegate> viewControllerDelegate;
@property(retain, nonatomic) NSTimer* imageTimer;
@property(retain, nonatomic) LGAsset* asset;
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) unsigned index;
@property(readonly, assign) LGProgressView* progressView;
@property(readonly, assign) LGErrorView* errorView;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIImageView* imageView;
-(void).cxx_destruct;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)zoomInOnPoint:(CGPoint)onPoint;
-(void)zoomOut;
-(void)onDoubleTapped:(CGPoint)tapped;
-(void)showError:(id)error delegate:(id)delegate;
-(void)invalidateImageTimer;
-(void)displayAssetOnTimer:(id)timer;
-(void)displayAsset:(BOOL)asset;
-(void)setFullScreenImageOnMainThread:(id)thread index:(id)index;
-(void)setupViewWithAsset:(id)asset delegate:(id)delegate instantly:(BOOL)instantly;
-(void)setupViewWithImage:(id)image delegate:(id)delegate;
-(void)prepareDisplay;
-(void)clearImageView;
-(void)setMaxMinZoomScalesForCurrentBounds;
-(void)setRotatedImageToImageView:(id)imageView imageOrientation:(int)orientation;
-(void)setImageToImageView:(id)imageView isThumbnail:(BOOL)thumbnail;
-(void)displayFullImage:(id)image;
-(void)displayThumbnailImage:(id)image;
-(void)centerImage;
-(void)setContentSize:(CGSize)size;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithBundleName:(id)bundleName;
@end

__attribute__((visibility("hidden")))
@interface ChannelBrowserHistory : NSObject {
}
+(id)loadBrowserHistoryUrl;
+(BOOL)saveBrowserHistory:(id)history;
@end

__attribute__((visibility("hidden")))
@interface LineSocialGraphCommand : CDVPlugin {
	NSString* callbackID_;
}
-(void).cxx_destruct;
-(void)getBuddyDetail:(id)detail withDict:(id)dict;
-(void)searchLineFriend:(id)aFriend withDict:(id)dict;
-(void)getLineGroupInviteeList:(id)list withDict:(id)dict;
-(void)getLineGroupMemberList:(id)list withDict:(id)dict;
-(void)getLineGroup:(id)group withDict:(id)dict;
-(void)getLineGroupList:(id)list withDict:(id)dict;
-(void)getTotalLineGroupListCount:(id)count withDict:(id)dict;
-(void)getLineFriendListFromMIDs:(id)mids withDict:(id)dict;
-(void)getLineFriend:(id)aFriend withDict:(id)dict;
-(void)getLineFriendList:(id)list withDict:(id)dict;
-(void)getTotalLineFriendListCount:(id)count withDict:(id)dict;
-(void)getBuddyDetailDictionaryFromMID:(id)mid withCompletionBlock:(id)completionBlock;
-(id)groupInviteeFromMID:(id)mid withSortType:(int)sortType startIndex:(int)index length:(int)length;
-(id)groupMembersFromMID:(id)mid withSortType:(int)sortType startIndex:(int)index length:(int)length;
-(int)groupTotalInviteesCountFromMID:(id)mid;
-(int)groupTotalMembersCountFromMID:(id)mid;
-(id)groupObjectFromMID:(id)mid;
-(id)currentGroupsWithSortType:(int)sortType startIndex:(int)index length:(int)length;
-(unsigned)currentTotalGroupsCount;
-(id)friendObjectFromName:(id)name withSortType:(int)sortType startIndex:(int)index length:(int)length includesBot:(BOOL)bot;
-(unsigned)currentTotalFriendObjectCountFromName:(id)name includesBot:(BOOL)bot;
-(id)friendObjectFromMIDs:(id)mids;
-(id)friendObjectFromMID:(id)mid;
-(id)currentFriendsWithSortType:(int)sortType startIndex:(int)index length:(int)length includesBot:(BOOL)bot;
-(unsigned)currentTotalFriendsCountIncludesBot:(BOOL)bot;
-(id)makeInformationToExportFrom:(id)from withExcludeAttributes:(id)excludeAttributes;
-(id)initWithWebView:(id)webView;
-(id)castToPictureurlFromObject:(id)object;
@end

__attribute__((visibility("hidden")))
@interface LineAuthenticationCommand : CDVPlugin {
	NSString* callbackID;
}
@property(retain, nonatomic) NSString* callbackID;
-(void).cxx_destruct;
-(void)getAccessToken:(id)token withDict:(id)dict;
-(void)acquireAccessTokenWithChannel:(id)channel;
-(void)requestAccessTokenWithChannel:(id)channel;
-(void)showPermissionNeededToUserWithChannel:(id)channel;
-(void)notifyToWebErrorWithDescription:(id)description;
-(void)notifyToWebAccessToken:(id)webAccessToken;
-(void)getProfile:(id)profile withDict:(id)dict;
-(void)getSessionInfo:(id)info withDict:(id)dict;
-(id)sessionInfo;
-(id)initWithWebView:(id)webView;
@end

__attribute__((visibility("hidden")))
@interface LineHttpRequestCommand : CDVPlugin {
	NSString* callbackID;
}
@property(retain, nonatomic) NSString* callbackID;
-(void).cxx_destruct;
-(void)curl:(id)curl withDict:(id)dict;
-(id)httpRequestWithURL:(id)url method:(id)method headers:(id)headers params:(id)params encoding:(id)encoding;
-(BOOL)needsThisRequestBase64Encoding:(id)encoding;
-(id)stringForObject:(id)object;
-(id)encodeURL:(id)url withEncodingName:(id)encodingName;
-(unsigned)encodingFromEncodingName:(id)encodingName;
-(id)initWithWebView:(id)webView;
@end

__attribute__((visibility("hidden")))
@interface LineNativeUICommand : CDVPlugin <NLProfilePopupViewerDelegate, LocationDetailViewControllerDelegate, UIActionSheetDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate> {
	NSString* callbackID;
	UIView* datePickerContainerView;
	UIView* datePickerActionView;
	UIDatePicker* datePicker;
	NLProfilePopupViewer* profilePopupViewer;
}
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(retain, nonatomic) UIDatePicker* datePicker;
@property(retain, nonatomic) UIView* datePickerActionView;
@property(retain, nonatomic) UIView* datePickerContainerView;
@property(retain, nonatomic) NSString* callbackID;
-(void).cxx_destruct;
-(void)callByLineCall:(id)call withDict:(id)dict;
-(void)showVideoPlayer:(id)player withDict:(id)dict;
-(void)showWriteView:(id)view withDict:(id)dict;
-(void)showErrorView:(id)view withDict:(id)dict;
-(void)showDatePicker:(id)picker withDict:(id)dict;
-(void)changeLineProfileImage:(id)image withDict:(id)dict;
-(void)openDetailMap:(id)map withDict:(id)dict;
-(void)showProfile:(id)profile withDict:(id)dict;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)profilePopupViewer:(id)viewer willSelectButtonItem:(id)item;
-(void)dismissOrPopSelfAndShareLocation:(id)location;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)pickerDone:(id)done;
-(void)pickerCancel:(id)cancel;
-(void)hidePickerView;
-(void)showDateTimePickerWithPickerMode:(int)pickerMode withSetDate:(id)setDate minDate:(id)date maxDate:(id)date4;
-(void)notifyWriteFailResultToWebAppWithCode:(int)code message:(id)message;
-(void)notifyWriteSuccessResultToWebAppWithOptions:(id)options;
-(void)notifyChangeLineProfileImageResultToWebApp:(int)webApp;
-(void)openProfileImageEditActionSheet;
-(void)showUserProfileViewWithMID:(id)mid;
-(void)showProfileView:(id)view;
-(id)myProfileView;
-(id)userProfileViewByUser:(id)user;
-(void)determineButtonItemsOfViewer:(id)viewer fromUser:(id)user;
-(id)initWithWebView:(id)webView;
@end

__attribute__((visibility("hidden")))
@interface ImageMapListenerObject : NSObject {
	NSString* _actionName;
	unsigned _type;
	ImageMapActionObject* _actionObject;
	CGRect _rect;
}
@property(retain, nonatomic) ImageMapActionObject* actionObject;
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, assign, nonatomic) CGRect rect;
@property(readonly, retain, nonatomic) NSString* actionName;
-(void).cxx_destruct;
-(id)description;
-(id)initWithActionName:(id)actionName rect:(CGRect)rect type:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface MBTableViewActionCell : UITableViewCell <MBActionable> {
	MBAction* mAction;
	NSIndexPath* _indexPath;
}
@property(retain, nonatomic) NSIndexPath* indexPath;
-(void).cxx_destruct;
-(void)reLayout:(id)layout reload:(BOOL)reload;
-(BOOL)hasActions;
-(void)performActionWithName:(id)name sender:(id)sender userInfo:(id)info;
-(void)setActionWithName:(id)name block:(id)block;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLCallCurrencyCell : UITableViewCell {
	UILabel* _currencyName;
	UIView* _boxView;
	id _delegate;
	NSString* _currencyCode;
	UIImageView* _checkMark;
}
@property(retain, nonatomic) UIImageView* checkMark;
@property(retain, nonatomic) NSString* currencyCode;
@property(assign, nonatomic) id delegate;
-(void).cxx_destruct;
-(void)setCurrencyName:(id)name withDefault:(id)aDefault;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface UnreadChatMigrationPolicy : NSEntityMigrationPolicy {
	NSArray* unreadMessageResults_;
}
-(void).cxx_destruct;
-(BOOL)endInstanceCreationForEntityMapping:(id)entityMapping manager:(id)manager error:(id*)error;
-(BOOL)createDestinationInstancesForSourceInstance:(id)sourceInstance entityMapping:(id)mapping manager:(id)manager error:(id*)error;
-(BOOL)beginEntityMapping:(id)mapping manager:(id)manager error:(id*)error;
@end

__attribute__((visibility("hidden")))
@interface MessageSendStatusMigrationPolicy : NSEntityMigrationPolicy {
}
-(BOOL)createDestinationInstancesForSourceInstance:(id)sourceInstance entityMapping:(id)mapping manager:(id)manager error:(id*)error;
@end

__attribute__((visibility("hidden")))
@interface NLThemeShopPresentConfirmViewController : NLViewController <LineNetworkErrorViewDelegate> {
	NLSafeUnretainedObject* _uSelf;
	NLFrameImageView* _thumbNailImageView;
	UIButton* _purchaseButton;
	StickerPresentTemplateChooseView* _templateView;
	BOOL _isGoingToOpenTalk;
	NSString* _userId;
	LineShopProductDetail* _productDetail;
	UILabel* _priceLabel;
}
@property(retain, nonatomic) UILabel* priceLabel;
@property(retain, nonatomic) LineShopProductDetail* productDetail;
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(void)retry;
-(void)onTapPurchasePresentButton:(id)button;
-(void)showNetworkError;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface EmailPasswordView : UIView <UITextFieldDelegate> {
	UIButton* checkbox;
	LineUnderLineLabel* underline;
	BOOL hasCheckBox;
	BOOL passwordLabelFieldHidden;
	BOOL emailAddressLabelFieldHidden;
	BOOL emailFieldHidden;
	BOOL confirmFieldHidden;
	BOOL emailFieldEnable;
	BOOL confirmFieldEnable;
	NSString* emailAddressLabelText;
	NSString* passwordLabelText;
	NSString* confirmBtnLabel;
	UIButton* confirmBtn;
	id<EmailPasswordDelegate> delegate;
	float _startHeight;
}
@property(retain, nonatomic) UIButton* confirmBtn;
@property(retain, nonatomic) NSString* confirmBtnLabel;
@property(assign, nonatomic) BOOL confirmFieldEnable;
@property(assign, nonatomic) BOOL emailFieldEnable;
@property(assign, nonatomic) BOOL emailAddressLabelFieldHidden;
@property(assign, nonatomic) BOOL passwordLabelFieldHidden;
@property(assign, nonatomic) BOOL confirmFieldHidden;
@property(assign, nonatomic) BOOL emailFieldHidden;
@property(retain, nonatomic) NSString* passwordLabelText;
@property(retain, nonatomic) NSString* emailAddressLabelText;
@property(assign, nonatomic) float startHeight;
@property(assign, nonatomic) BOOL hasCheckBox;
@property(assign, nonatomic) id<EmailPasswordDelegate> delegate;
-(void).cxx_destruct;
-(void)naverInfo;
-(void)resignTextField;
-(id)accountID;
-(BOOL)doesPasswordHaveUnavailableChars:(id)chars;
-(void)confirm;
-(void)check;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)textChanged:(id)changed;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setEmailAddress:(id)address;
-(void)layoutSubviews;
-(void)initViews;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoProtocol : NSObject {
	NSOperation* mOperation;
	id mDelegate;
}
@property(assign, nonatomic) id<LAPhotoDataDelegate> delegate;
-(void).cxx_destruct;
-(void)deleteAlbum:(id)album groupID:(id)anId;
-(void)updatePhotoList:(id)list groupID:(id)anId;
-(void)fullFetchPhotoList:(id)list groupID:(id)anId message:(id)message type:(id)type;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface HitokotoBalloonView : UIView {
	NSString* label_;
	float maximumWidth_;
	UIFont* font_;
	NMAttributedLabel* sLabel;
	unsigned direction_;
	BOOL useHighlightedImage_;
	UIImageView* arrow_;
	UIButton* button_;
	unsigned color_;
	int customColor_;
	UIEdgeInsets insets_;
	BOOL isAppliedEdgeInset_;
	id<HitokotoBalloonViewDelegate> delegate;
}
@property(assign, nonatomic) unsigned color;
@property(assign, nonatomic) BOOL useHighlightedImage;
@property(assign, nonatomic) id<HitokotoBalloonViewDelegate> delegate;
@property(retain, nonatomic) UIFont* font;
@property(assign, nonatomic) float maximumWidth;
@property(retain, nonatomic) NSString* label;
-(void).cxx_destruct;
-(void)renderWithRuleset:(id)ruleset;
-(void)showArrow:(BOOL)arrow;
-(void)onTouchUpInside:(id)inside;
-(CGSize)render;
-(id)initWithDirection:(unsigned)direction;
-(void)updateBackground;
-(unsigned long long)accessibilityTraits;
-(BOOL)isAccessibilityElement;
-(id)accessibilityLabel;
@end

__attribute__((visibility("hidden")))
@interface QRAuthLoginViewController : NLViewController {
	NSString* QRAuthKey;
}
@property(retain, nonatomic) NSString* QRAuthKey;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)login;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)popViewControllerAnimated;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MessageBoxService : NSObject {
}
+(void)removeFromMyHomeMessage:(id)myHomeMessage completionBlock:(id)block;
+(void)postMessage:(id)message requestSequence:(int)sequence completionBlock:(id)block;
+(void)myHomeMessagesBySequenceNumber:(id)number startSeq:(long long)seq endSeq:(long long)seq3 completionBlock:(id)block;
+(void)myHomeMessageBoxesForLastMessageCount:(int)lastMessageCount completionBlock:(id)block;
+(void)myHomeMessageBoxForID:(id)anId lastMessagesCount:(int)count completionBlock:(id)block;
+(void)removeMessage:(id)message completionBlock:(id)block;
+(void)messagesBySequenceNumber:(id)number channelID:(id)anId startSeq:(long long)seq endSeq:(long long)seq4 completionBlock:(id)block;
+(void)messageBoxesInChannelForID:(id)anId lastMessageCount:(int)count completionBlock:(id)block;
+(void)messageBoxForID:(id)anId channelID:(id)anId2 lastMessagesCount:(int)count completionBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface RegistrationSession : NSObject {
	BOOL _hasAccount;
	BOOL _allowAddressbook;
	BOOL _isNeedTermsAfterUpdatingPhone;
	BOOL _isAgreedTermsAfterUpdatingPhone;
	BOOL _anotherVerificationRequired;
	BOOL _shouldSyncSnsFriends;
	BOOL _profileNameUploaded;
	BOOL _registered;
	BOOL _skipHandlingError;
	LineVerificationSessionData* _sessionData;
	NSArray* _userCountry;
	NSArray* _userCarrier;
	NSString* _userPhonenumber;
	int _provider;
	NSString* _accountID;
	NSString* _password;
	int _initialMethod;
	int _currentMethod;
	int _verificationResult;
	NSString* _enteredPinCode;
	LineUserAuthStatus* _userAuthStatus;
	int _anotherVerificationMethod;
	int _snsType;
	NSString* _snsAccessToken;
	LineSnsIdUserStatus* _snsUserStatus;
	LineSnsProfile* _snsProfile;
	NSString* _profileName;
	NSData* _profileImageData;
	int _profileImageUploadingState;
	NSError* _error;
	int _errorState;
	unsigned _deviceStatus;
	NSString* _migrationPincodeSessionId;
	NSString* _enteredMigrationPinCode;
}
@property(retain, nonatomic) NSString* enteredMigrationPinCode;
@property(assign, nonatomic) int accountMigrationCheckType;
@property(retain, nonatomic) NSString* migrationPincodeSessionId;
@property(assign, nonatomic) unsigned deviceStatus;
@property(assign, nonatomic) BOOL skipHandlingError;
@property(assign, nonatomic) int errorState;
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) BOOL registered;
@property(assign, nonatomic) int profileImageUploadingState;
@property(assign, nonatomic) BOOL profileNameUploaded;
@property(retain, nonatomic) NSData* profileImageData;
@property(retain, nonatomic) NSString* profileName;
@property(assign, nonatomic) BOOL shouldSyncSnsFriends;
@property(retain, nonatomic) LineSnsProfile* snsProfile;
@property(retain, nonatomic) LineSnsIdUserStatus* snsUserStatus;
@property(retain, nonatomic) NSString* snsAccessToken;
@property(assign, nonatomic) int snsType;
@property(assign, nonatomic) int anotherVerificationMethod;
@property(assign, nonatomic) BOOL anotherVerificationRequired;
@property(retain, nonatomic) LineUserAuthStatus* userAuthStatus;
@property(retain, nonatomic) NSString* enteredPinCode;
@property(assign, nonatomic) int verificationResult;
@property(assign, nonatomic) int currentMethod;
@property(assign, nonatomic) int initialMethod;
@property(assign, nonatomic) BOOL isAgreedTermsAfterUpdatingPhone;
@property(assign, nonatomic) BOOL isNeedTermsAfterUpdatingPhone;
@property(assign, nonatomic) BOOL allowAddressbook;
@property(assign, nonatomic) BOOL hasAccount;
@property(retain, nonatomic) NSString* password;
@property(retain, nonatomic) NSString* accountID;
@property(assign, nonatomic) int provider;
@property(retain, nonatomic) NSString* userPhonenumber;
@property(retain, nonatomic) NSArray* userCarrier;
@property(retain, nonatomic) NSArray* userCountry;
@property(retain, nonatomic) LineVerificationSessionData* sessionData;
+(void)registerWithExistingSnsIdAndIdentityCredentialWithIdentityCredentialProvider:(int)identityCredentialProvider accountId:(id)anId accountPassword:(id)password region:(id)region migrationPincodeSessionId:(id)anId5 completionBlock:(id)block errorBlock:(id)block7;
+(void)registerWithSnsIdAndIdentityCredentialWithSnsIdType:(int)snsIdType snsAccessToken:(id)token provider:(int)provider accountId:(id)anId accountPassword:(id)password region:(id)region migrationPincodeSessionId:(id)anId7 completionBlock:(id)block errorBlock:(id)block9;
+(void)findSnsIdUserStatusWithSnsIdType:(int)snsIdType snsAccessToken:(id)token migrationPincodeSessionId:(id)anId completionBlock:(id)block errorBlock:(id)block5;
+(void)getCountryWithRequestIpWithCompletionBlock:(id)completionBlock;
+(void)registerWithSnsIdWithSnsIdType:(int)snsIdType accessToken:(id)token region:(id)region mid:(id)mid migrationPincodeSessionId:(id)anId completionBlock:(id)block errorBlock:(id)block7;
+(void)verifyAccountMigrationPincode:(id)pincode migrationPincodeSessionId:(id)anId completionBlock:(id)block errorBlock:(id)block4;
+(void)createAccountMigrationPincodeSessionWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
+(void)updateDeviceUUIDIfNecessary;
+(void)unregisterDeviceWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
+(void)registerDeviceCredentialWithoutPhoneNumberWithProvider:(int)provider accountID:(id)anId password:(id)password region:(id)region mid:(id)mid migrationPincodeSessionId:(id)anId6 completionBlock:(id)block errorBlock:(id)block8;
+(void)verifyIdentityCredentialWithResult:(int)result accountID:(id)anId password:(id)password migrationPincodeSessionId:(id)anId4 completionBlock:(id)block;
+(void)verifyWithProvider:(int)provider accountID:(id)anId password:(id)password completionBlock:(id)block errorBlock:(id)block5;
+(void)verifyIdentityCredentialWithProvider:(int)provider accountId:(id)anId accountPassword:(id)password completionBlock:(id)block errorBlock:(id)block5;
+(void)registerDeviceWithoutPhoneNumberWithIdentityCredentialWithRegion:(id)region provider:(int)provider accountId:(id)anId accountPassword:(id)password mid:(id)mid migrationPincodeSessionId:(id)anId6 completionBlock:(id)block errorBlock:(id)block8;
+(void)registerDeviceWithoutPhoneNumberWithRegion:(id)region completionBlock:(id)block errorBlock:(id)block3;
-(void).cxx_destruct;
-(void)registerAndSyncWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
-(void)verifyIdentityCredentialWithResultWithCompletionBlock:(id)completionBlock;
-(void)registerDeviceCredentialWithPhoneNumberWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
-(void)registerDeviceWithIdentityCredentialWithProvider:(int)provider accountId:(id)anId accountPassword:(id)password migrationPincodeSessionId:(id)anId4 completionBlock:(id)block errorBlock:(id)block6;
-(void)registerDeviceWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
-(void)resendPinCodeWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
-(void)verifyPhoneWithConfirmationCode:(id)confirmationCode completionBlock:(id)block errorBlock:(id)block3;
-(void)changeVerificationMethod:(int)method completionBlock:(id)block errorBlock:(id)block3;
-(void)finishUpdateVerificationWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
-(void)startUpdateVerificationWithRegion:(id)region phone:(id)phone completionBlock:(id)block errorBlock:(id)block4;
-(void)verifyUserWithRegion:(id)region phone:(id)phone mid:(id)mid completionBlock:(id)block errorBlock:(id)block5;
-(void)verifyUserWithRegion:(id)region phone:(id)phone mid:(id)mid update:(BOOL)update completionBlock:(id)block errorBlock:(id)block6;
-(void)verifyAccountMigrationPincode:(id)pincode navigationController:(id)controller;
-(void)verifyPhoneWithPinCode:(id)pinCode navigationController:(id)controller;
-(void)phoneSetWithRegion:(id)region phone:(id)phone navigationController:(id)controller;
-(void)verifyPhoneNumber;
-(id)networkCode;
-(BOOL)availableTTS;
-(id)userCountryCode;
-(id)userCountryNumber;
-(int)carrierCode;
@end

__attribute__((visibility("hidden")))
@interface RegistrationStartViewController : NLViewController <UIAlertViewDelegate> {
	UIView* statusBarBGView;
	UIView* _contentView;
	UIImageView* _imageView;
	UILabel* _textLabel;
	UIButton* _existingUserButton;
	UIButton* _joinButton;
}
@property(assign, nonatomic) UIButton* joinButton;
@property(assign, nonatomic) UIButton* existingUserButton;
@property(assign, nonatomic) UILabel* textLabel;
@property(assign, nonatomic) UIImageView* imageView;
@property(assign, nonatomic) UIView* contentView;
-(void).cxx_destruct;
-(BOOL)prefersStatusBarHidden;
-(void)sallyButtonTapped:(id)tapped;
-(void)joinButtonTapped:(id)tapped;
-(void)existingUserButtonTapped:(id)tapped;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)configureStatusBGView;
-(void)configureJoinButton:(id)button;
-(void)configureExistingUserButton:(id)button;
-(void)configureTextLabel:(id)label;
-(void)configureImageView:(id)view;
-(void)configureSubviews;
@end

__attribute__((visibility("hidden")))
@interface RegistrationTermViewController : NLViewController <UIWebViewDelegate> {
	UILabel* _termsTitleLabel;
	UIView* _termsView;
	UIImageView* _termsBgView;
	UIWebView* _termsContentView;
	UIView* _privacyView;
	UILabel* _privacyTitleLabel;
	UIImageView* _privacyBgView;
	UIWebView* _privacyContentView;
	UILabel* _confirmLabel;
	UIButton* _agreeButton;
}
@property(assign, nonatomic) UIButton* agreeButton;
@property(assign, nonatomic) UILabel* confirmLabel;
@property(assign, nonatomic) UIWebView* privacyContentView;
@property(assign, nonatomic) UIImageView* privacyBgView;
@property(assign, nonatomic) UILabel* privacyTitleLabel;
@property(assign, nonatomic) UIView* privacyView;
@property(assign, nonatomic) UIWebView* termsContentView;
@property(assign, nonatomic) UIImageView* termsBgView;
@property(assign, nonatomic) UIView* termsView;
@property(assign, nonatomic) UILabel* termsTitleLabel;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)openHelp:(id)help;
-(void)agreeButtonPressed:(id)pressed;
-(void)updateLayouts;
-(void)loadTermsContent;
-(void)configureSubviews;
-(void)setupLocalizedStrings;
-(void)configureNavigationItem;
@end

__attribute__((visibility("hidden")))
@interface NLCallCreditProductView : UIView {
	UILabel* _labelProductive;
}
@property(retain, nonatomic) UILabel* labelProductive;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface RegistrationAddressBookViewController : NLViewController <UITableViewDataSource, UITableViewDelegate, CountryViewSelectDelegate> {
	UISwitch* autoAddToggle;
	UISwitch* allowAddToggle;
	UIScrollView* _scrollView;
	UIButton* _agreeButton;
}
@property(assign, nonatomic) UIButton* agreeButton;
@property(assign, nonatomic) UIScrollView* scrollView;
-(void).cxx_destruct;
-(void)processRegistration;
-(void)agreeButtonPressed:(id)pressed;
-(void)selectCountry:(id)country;
-(void)viewDidUnload;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)customizeSubviews;
@end

__attribute__((visibility("hidden")))
@interface RegistrationDeviceDuplicatedViewController : NLViewController {
	UIScrollView* _bgView;
	UIView* _contentOuterWrapperView;
	UIView* _contentWrapperView;
	UIImageView* _imageView;
	UILabel* _titleLabel1;
	UILabel* _descriptionLabel1;
	UILabel* _titleLabel2;
	UILabel* _descriptionLabel2;
	UIView* _contentWrapperView2;
	UIImageView* _section2BgImageView;
	UIButton* _okButton;
	UIButton* _alreadyButton;
}
@property(assign, nonatomic) UIButton* alreadyButton;
@property(assign, nonatomic) UIButton* okButton;
@property(assign, nonatomic) UIImageView* section2BgImageView;
@property(assign, nonatomic) UIView* contentWrapperView2;
@property(assign, nonatomic) UILabel* descriptionLabel2;
@property(assign, nonatomic) UILabel* titleLabel2;
@property(assign, nonatomic) UILabel* descriptionLabel1;
@property(assign, nonatomic) UILabel* titleLabel1;
@property(assign, nonatomic) UIImageView* imageView;
@property(assign, nonatomic) UIView* contentWrapperView;
@property(assign, nonatomic) UIView* contentOuterWrapperView;
@property(assign, nonatomic) UIScrollView* bgView;
-(void)alreadyButtonPressed:(id)pressed;
-(void)okButtonPressed:(id)pressed;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)popViewControllerAnimated;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)customizeSubviews;
@end

__attribute__((visibility("hidden")))
@interface NLCommonUILibrary : NSObject {
}
+(void)decorateProfileHomeButton:(id)button withTitle:(id)title maximumWidth:(float)width;
+(void)decorateProfileNoPhoneButton:(id)button withTitle:(id)title maximumWidth:(float)width;
+(void)decorateFriendAddInviteButton:(id)button withTitle:(id)title;
+(void)decoratePrivacyPlusAddBtnButton:(id)button withTitle:(id)title;
+(void)decorateStickerDownloadButtonStyle2:(id)a2;
+(void)decorateStickerDownloadButtonStyle1:(id)a1;
+(void)decorateWaitingForDownloadAtDownloadingView:(id)downloadingView;
+(void)decorateDownloadByteLabel:(id)label;
+(void)decorateSerialNumberTextfield:(id)textfield;
+(void)decorateSerialNumberLabel:(id)label;
+(void)decorateRegistrationInputFieldStyle4:(id)a4;
+(void)decorateRegistrationInputFieldStyle3:(id)a3;
+(void)decorateRegistrationInputFieldStyle2:(id)a2;
+(void)decorateRegistrationInputFieldStyle1:(id)a1;
+(void)decorateAuthorizingDesktopDescLabelStyle1:(id)a1;
+(void)decorateRegistrationRoundedBoxStyle1:(id)a1;
+(void)decorateCoinPopupLabel:(id)label;
+(void)decorateAccountVerifyLostEmailLabel:(id)label;
+(void)decorateAccountVerifyTopLabel:(id)label;
+(id)stickerManagementNoResultLabel;
+(id)stickerShopNoResultLabel;
+(void)decorateStickerShopLabelStyle1:(id)a1;
+(void)decorateRegistrationLabelStyle22:(id)a22;
+(void)decorateRegistrationLabelStyle21:(id)a21;
+(void)decorateRegistrationLabelStyle20:(id)a20;
+(void)decorateRegistrationLabelStyle17:(id)a17;
+(void)decorateRegistrationLabelStyle16:(id)a16;
+(void)decorateRegistrationLabelStyle15:(id)a15;
+(void)decorateRegistrationLabelStyle12:(id)a12;
+(void)decorateRegistrationLabelStyle10:(id)a10;
+(void)decorateRegistrationLabelStyle6:(id)a6;
+(void)decorateRegistrationLabelStyle5:(id)a5;
+(void)decorateRegistrationLabelStyle4:(id)a4;
+(void)decorateRegistrationLabelStyle3:(id)a3;
+(void)decorateRegistrationLabelStyle2:(id)a2;
+(void)decorateRegistrationLabelStyle1:(id)a1;
+(void)decorateCoinPopupButton:(id)button;
+(void)decorateDeleteAccountCancelButtonStyle:(id)style;
+(void)decorateDeleteAccountButtonStyle:(id)style;
+(void)decorateChannelRevokeButtonStyle2:(id)a2;
+(void)decorateStickerShopButtonStyle2:(id)a2;
+(void)decorateStickerShopButtonStyle1:(id)a1;
+(void)decorateRegistrationCheckBoxStyle2:(id)a2;
+(void)decorateSNSIntegrateButtonStyle:(id)style withSNSImage:(id)snsimage;
+(void)decorateChineseSNSButtonsView:(id)view;
+(void)decorateVerticalContentLayoutOnButton:(id)button imageAdjustment:(int)adjustment titleAdjustment:(int)adjustment3;
+(void)_decorate360ButtonsTextStyle1:(id)a1;
+(void)decorateFacebookConnectButtonStyle1:(id)a1;
+(void)decorateButtonWithHeaderViewStyle1:(id)headerViewStyle1;
+(void)decorateRegistrationButtonStyle11:(id)a11;
+(void)decorateRegistrationButtonStyle10:(id)a10;
+(void)decorateRegistrationButtonStyle9:(id)a9;
+(void)decorateRegistrationButtonStyle8:(id)a8;
+(void)decorateRegistrationButtonStyle6:(id)a6;
+(void)decorateRegistrationButtonStyle5:(id)a5;
+(void)decorateRegistrationButtonStyle4:(id)a4;
+(void)decorateRegistrationButtonStyle3:(id)a3;
+(void)decorateRegistrationButtonStyle2:(id)a2;
+(void)decorateRegistrationButtonStyle1:(id)a1;
+(void)decorateButtonCommonStyle:(id)style;
+(id)facebookConnectionButton;
+(void)decorateRegistrationSeparatorLineStyle1:(id)a1;
+(id)contentImageWithLabel:(id)label;
+(id)bottomBorderForSelectedCellBackground;
+(id)bottomBorderForCellBackground;
+(id)topBorderForSelectedCellBackground;
+(id)topBorderForCellBackground;
+(id)friendsCellBorderColor;
+(id)badgeStyle2WithNumber:(int)number;
+(id)badgeStyle2WithText:(id)text;
+(id)badgeStyle1WithNumber:(int)number;
+(id)badgeStyle1WithText:(id)text;
+(id)newBadge;
+(id)badgeForNewPresentsCount:(int)newPresentsCount;
+(id)selectedCellBackgroundViewStyle1ForRuleset:(id)ruleset;
+(id)cellBackgroundViewStyle1ForRuleset:(id)ruleset;
+(id)cellBorderColorStyle1ForRuleset:(id)ruleset;
+(id)selectedCellBackgroundViewStyle1;
+(id)cellBackgroundViewStyle1;
+(id)cellBorderColorStyle1;
+(id)registrationCommonBgColor;
@end

__attribute__((visibility("hidden")))
@interface NJSURLConnectionOperation : NSOperation {
	NSThread* mThread;
	NSTimer* mTimer;
	NSURLConnection* mConnection;
	NSURLRequest* mRequest;
	NSURLResponse* mResponse;
	NSError* mError;
	int mTotalBytesRead;
	int mTotalBytesExpectedToRead;
	double mTimeoutInterval;
	int mRetryCount;
	int mRetryIndex;
	NJSBackgroundTask* mBackgroundTask;
	BOOL mAutoRetryAfterWakeup;
	BOOL mUsesTempFile;
	BOOL mAsyncScheduled;
	BOOL mCompleted;
	int mState;
	NSMutableData* data;
	NSString* path;
	NSFileHandle* handle;
}
@property(readonly, assign, nonatomic) int state;
@property(readonly, assign, nonatomic) NSString* filePath;
@property(readonly, assign, nonatomic) NSData* data;
@property(retain, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSURLResponse* response;
@property(copy, nonatomic) NSURLRequest* request;
@property(assign, nonatomic) BOOL usesTempFile;
@property(assign, nonatomic) int retryCount;
@property(assign, nonatomic) double timeoutInterval;
@property(assign, nonatomic) BOOL autoRetryAfterWakeup;
-(void).cxx_destruct;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)cancel;
-(void)main;
-(void)unscheduleInCurrentRunLoop;
-(void)scheduleInCurrentRunLoop;
-(void)unschedule;
-(void)schedule;
-(id)URLRequest;
-(void)retry;
-(void)timerFired:(id)fired;
-(void)resetTimer;
-(void)keepRunningInBackground;
-(void)resumeConnection;
-(void)suspendConnection;
-(void)finishConnectionWithError:(id)error;
-(void)cancelConnection;
-(void)dealloc;
-(id)init;
-(void)didFinishLoading;
-(void)didFail;
-(void)didCancel;
-(void)willRetryWithAttempt:(int)attempt;
-(BOOL)shouldRetryWithAttempt:(int)attempt;
-(void)didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)didReceiveBodyData:(int)data totalBytesRead:(int)read totalBytesExpectedToRead:(int)read3;
-(void)didReceiveData:(id)data;
-(void)didReceiveResponse;
-(id)needNewBodyStream:(id)stream;
-(id)willSendRequest:(id)request redirectResponse:(id)response;
-(id)willCacheResponse:(id)response;
-(void)willStart;
@end

__attribute__((visibility("hidden")))
@interface NLCallSettingCell : UITableViewCell {
	unsigned _type;
	UIColor* _bgColor;
	UIColor* _bgHighlightedColor;
	UIView* _bottomLine;
	UIView* _bgView;
	UILabel* _title;
	UILabel* _info;
	UIButton* _arrowIcon;
	UILabel* _monthlyName;
	UILabel* _monthlyPeriod;
}
@property(retain, nonatomic) UILabel* monthlyPeriod;
@property(retain, nonatomic) UILabel* monthlyName;
@property(retain, nonatomic) UIButton* arrowIcon;
@property(retain, nonatomic) UILabel* info;
@property(retain, nonatomic) UILabel* title;
@property(retain, nonatomic) UIView* bgView;
@property(retain, nonatomic) UIView* bottomLine;
+(float)getToggleSwitchOriginX;
-(void).cxx_destruct;
-(void)setCellInfo:(id)info;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)layoutSubviews;
-(void)updateInfo:(unsigned)info withDelegate:(id)delegate;
-(void)setCellType:(unsigned)type withDelegate:(id)delegate;
-(id)arrowImagewithHighlighted:(BOOL)highlighted;
-(void)createMoreIcon;
-(void)setMonthlyPlanInfo:(id)info;
-(void)createMonthlyPlan;
-(void)setInfoLabelMaxX:(float)x withWidht:(float)widht;
-(void)createInfoLabel;
-(void)setTitleLabelWidth:(float)width;
-(void)createTitleLabel;
-(void)setTitleText:(id)text;
-(void)setBottomLineColor:(id)color withStyle:(unsigned)style;
-(void)setBackgroundViewColor:(id)color highlightColor:(id)color2;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface AdXTracking : NSObject <NSXMLParserDelegate, UIWebViewDelegate> {
	BOOL _Is_upgrade;
	BOOL _advertisingTrackingEnabled;
	BOOL _OptOut;
	BOOL _hasASIdentifierManager;
	NSString* _URLScheme;
	NSString* _ClientId;
	NSString* _AppleId;
	NSString* _BundleID;
	NSString* _CountryCode;
	NSString* _UserAgent;
	NSString* _IDFV;
	NSString* _currentElement;
	NSString* _advertisingIdentifier;
	NSMutableDictionary* _dict;
	NSMutableArray* _productArray;
	NSDate* _connectionStartTime;
	UIWebView* _uAwebView;
	NSMutableString* _referral;
	NSMutableString* _clickID;
	ASIdentifierManager* _identifierManager;
	NSString* _attributionID;
	NSString* _serverIP;
	NSString* _serverIP_Q;
	int _seencount;
	NSOperationQueue* _networkQueue;
	int _iAd;
}
@property(assign) int iAd;
@property(retain, nonatomic) NSOperationQueue* networkQueue;
@property(assign, nonatomic) BOOL hasASIdentifierManager;
@property(assign, nonatomic) BOOL OptOut;
@property(assign) BOOL advertisingTrackingEnabled;
@property(assign) int seencount;
@property(retain, nonatomic) NSString* serverIP_Q;
@property(retain, nonatomic) NSString* serverIP;
@property(retain, nonatomic) NSString* attributionID;
@property(retain, nonatomic) ASIdentifierManager* identifierManager;
@property(retain, nonatomic) NSMutableString* clickID;
@property(retain, nonatomic) NSMutableString* referral;
@property(retain, nonatomic) UIWebView* uAwebView;
@property(retain, nonatomic) NSDate* connectionStartTime;
@property(retain, nonatomic) NSMutableArray* productArray;
@property(retain, nonatomic) NSMutableDictionary* dict;
@property(retain, nonatomic) NSString* advertisingIdentifier;
@property(retain, nonatomic) NSString* currentElement;
@property(retain, nonatomic) NSString* IDFV;
@property(retain, nonatomic) NSString* UserAgent;
@property(assign) BOOL Is_upgrade;
@property(retain, nonatomic) NSString* CountryCode;
@property(retain, nonatomic) NSString* BundleID;
@property(retain, nonatomic) NSString* AppleId;
@property(retain, nonatomic) NSString* ClientId;
@property(retain, nonatomic) NSString* URLScheme;
-(void).cxx_destruct;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser foundCDATA:(id)cdata;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(BOOL)parseResponse:(id)response;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(BOOL)addSkipBackupAttributeToItemAtURL:(id)url;
-(BOOL)connectedToNetwork;
-(id)urlEncode:(id)encode;
-(BOOL)handleOpenURL:(id)url;
-(int)swishAttempts;
-(BOOL)recentSwish;
-(BOOL)doSwish;
-(void)doReportAppOpen;
-(void)checkForiAdConversion;
-(void)reportAppOpen;
-(void)reportExtendedEventToAdX:(id)adX;
-(void)reportAppEventToAdX:(id)adX;
-(void)reportAppOpenToAdX:(bool)adX;
-(void)reportAppOpenToAdXNow;
-(id)getOldDID;
-(id)odin1;
-(id)macAddress;
-(void)useQAServerUntilYear:(int)year month:(int)month day:(int)day;
-(void)isUpgrade:(BOOL)upgrade;
-(id)getAdXDeviceIDForEvents;
-(id)adXGetBundleID;
-(id)getTransactionID;
-(int)isFirstInstall;
-(id)getDLReferral;
-(id)getReferral;
-(void)addProductToList:(id)list ofPrice:(float)price forQuantity:(int)quantity;
-(void)addProductToList:(id)list;
-(void)setEventParameterOfName:(id)name withValue:(id)value;
-(void)setEventParameter:(int)parameter withValue:(id)value;
-(void)startNewEvent;
-(void)sendExtendedEventOfName:(id)name;
-(void)sendExtendedEvent:(int)event;
-(void)sendAndValidateSaleEvent:(id)event withValue:(id)value andCurrency:(id)currency andCustomData:(id)data;
-(void)sendEvent:(id)event withData:(id)data andCurrency:(id)currency andCustomData:(id)data4;
-(void)sendEvent:(id)event withData:(id)data andCurrency:(id)currency;
-(void)sendEvent:(id)event withData:(id)data;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCommonUIHelper : NSObject {
}
+(BOOL)hasFourInchDisplay;
+(CGSize)statusBarSizeForInterfaceOrientation:(int)interfaceOrientation;
+(CGSize)statusBarSizeForCurrentOrientation;
+(CGSize)mainScreenSizeForInterfaceOrientation:(int)interfaceOrientation;
+(CGSize)mainScreenSizeForCurrentOrientation;
+(CGRect)contentsFrame:(id)frame;
+(CGRect)applicationFrame;
+(CGRect)screenBounds;
+(void)configureSelectedBackgroundViewOfCell:(id)cell forRowAtIndexPath:(id)indexPath inTableView:(id)tableView;
+(id)placeholderLabelInTextField:(id)textField;
+(CGSize)fittedTextSizeOfLabel:(id)label;
+(CGSize)textSizeOfLabelForLimitedToNumberOfLines:(id)lines;
+(CGSize)textSizeOfLabel:(id)label;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupCell : UITableViewCell {
	UIImageView* mGroupIcon;
	UILabel* mNameLabel;
	UIButton* mNumberIcon;
	UILabel* mGuideLabel;
	UIView* mBottomLine1;
	UIView* mBottomLine2;
}
-(void).cxx_destruct;
-(float)height;
-(void)setData:(id)data;
-(void)layout;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface HitokotoViewController : MessageViewController {
	NSManagedObjectContext* managedObjectContext_;
	TalkUserObject* mainContextFriend_;
	HitokotoViewHeaderView* headerView;
	UIView* topShadowBar;
	UIView* noResultsView;
	BOOL messagePopulating;
	int pageNumber;
	id unsentAction;
	long long lastSeq_;
}
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)canSelectSendButtonType;
-(void)updateSendButton:(id)button;
-(void)configureSendButton:(id)button;
-(int)storedSendButtonType;
-(void)initializeSendType;
-(void)growingTextViewDidChange:(id)growingTextView;
-(void)actionDeleteWithSendingFailureActionSheet:(id)sendingFailureActionSheet;
-(void)actionResendWithSendingFailureActionSheet:(id)sendingFailureActionSheet;
-(void)dismissOrPopSelfAndShareLocation:(id)location;
-(void)showUserPopupWithDataObject:(id)dataObject contactType:(int)type;
-(void)checkScrollAvailable;
-(void)incrementFetchLimit;
-(id)requestForChat;
-(void)sendMessageWithText:(id)text requestSequence:(int)sequence image:(id)image location:(id)location latitude:(id)latitude sticker:(int)sticker contentType:(short)type metadata:(id)metadata;
-(int)stickerIdShouldSendInsteadOfText:(id)stickerId;
-(BOOL)isConfirmNeededToOpenLinkForCell:(id)cell;
-(void)keyboardWillChangeFrameNotification:(id)keyboard;
-(void)initReceivedMessageLabel:(id)label managedObject:(id)object topMargin:(float)margin;
-(float)addDateBar:(id)bar currentDay:(id)day previousDay:(id)day3 row:(int)row message:(id)message;
-(Class)tableViewCellClass;
-(id)timeString:(id)string;
-(void)setRightBarButtonItemWithInterfaceOrientation:(int)interfaceOrientation;
-(void)updateBackButtonWithUnreadCount:(id)unreadCount interfaceOrientation:(int)orientation forceUpdate:(BOOL)update;
-(void)configManagedObjects;
-(id)attachmentActionsMapping;
-(void)controllerDidChangeContent:(id)controller;
-(unsigned)supportedInterfaceOrientations;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)hasUnsentMessages;
-(void)performBlockIfOkayToClose:(id)close;
-(void)populateWithMessages:(id)messages removingOtherMessages:(BOOL)messages2;
-(void)downloadDataWithIndicator:(BOOL)indicator;
-(void)clearMessageBoxCache;
-(id)loadMessageBoxCache;
-(void)saveMessageBoxCache:(id)cache;
-(void)rowCountChanged;
-(void)openChatWithQuotedText:(id)quotedText;
-(void)displayNoHitokotoView;
-(void)reply:(id)reply;
-(void)call;
-(void)chat;
-(void)closeHitokoto;
-(void)lineKeyboard:(id)keyboard stickerTapped:(int)tapped;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)forceReOrient;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithFriend:(id)aFriend;
-(void)updateTableViewContentInset;
@end

__attribute__((visibility("hidden")))
@interface UpdatePhoneViewController : NLViewController <UITextFieldDelegate, UITableViewDataSource, UITableViewDelegate, CarrierChangeDelegate, CountryViewChangeDelegate, SMSInfoViewDeleagete> {
	UITableView* formTableView;
	UIButton* verificationButton;
	AuthNumberField* phoneNumberField;
	SMSInfoView* smsInfoView;
	NSString* _phoneNumber;
	NSArray* _userCountry;
	NSArray* _userCarrier;
	id<SMSInfoViewDeleagete> _smsInfoDelegate;
}
@property(retain, nonatomic) SMSInfoView* smsInfoView;
@property(assign, nonatomic) BOOL isNeedTerms;
@property(readonly, assign, nonatomic) BOOL isAgreedTerms;
@property(readonly, assign, nonatomic) BOOL has360Account;
@property(readonly, assign, nonatomic) BOOL isCN;
@property(readonly, assign, nonatomic) BOOL isKR;
@property(readonly, assign, nonatomic) BOOL isJP;
@property(assign, nonatomic) __weak id<SMSInfoViewDeleagete> smsInfoDelegate;
@property(retain, nonatomic) NSString* phoneNumber;
@property(retain, nonatomic) NSArray* userCarrier;
@property(retain, nonatomic) NSArray* userCountry;
@property(retain, nonatomic) AuthNumberField* phoneNumberField;
@property(retain, nonatomic) UIButton* verificationButton;
@property(retain, nonatomic) UITableView* formTableView;
-(void).cxx_destruct;
-(void)didConfirmSMSInfoView:(id)view;
-(void)verificatePhoneNumber;
-(void)didCancelSMSInfoView:(id)view;
-(void)changedCarrier:(id)carrier;
-(void)changedCountry:(id)country;
-(void)textFieldDidChange:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)canEnableConfirm;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)verificationButtonPressed:(id)pressed;
-(void)showSmsInfoView;
-(void)initCurrentCountry;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(int)rowTypeFromIndexPath:(id)indexPath;
-(id)currentUserCarrierName;
-(id)currentUserCountryName;
@end

__attribute__((visibility("hidden")))
@interface NLAnimationImageView : UIImageView {
	BOOL _isInAnimation;
	BOOL _isDecoding;
	BOOL _isPlayingReserved;
	BOOL _isPlayingAnimationReserved;
	BOOL _isPlayingSoundReserved;
	id _completionBlock;
	NSURL* _animationFileUrl;
	NSURL* _soundFileUrl;
	NLApngObject* _apngObject;
	CAKeyframeAnimation* _keyFrameAnimation;
	NSString* _soundCategoryReserved;
	AVAudioPlayer* _soundPlayer;
}
@property(retain, nonatomic) AVAudioPlayer* soundPlayer;
@property(retain, nonatomic) NSString* soundCategoryReserved;
@property(assign, nonatomic) BOOL isPlayingSoundReserved;
@property(assign, nonatomic) BOOL isPlayingAnimationReserved;
@property(assign, nonatomic) BOOL isPlayingReserved;
@property(assign, nonatomic) BOOL isDecoding;
@property(assign, nonatomic) BOOL isInAnimation;
@property(retain, nonatomic) CAKeyframeAnimation* keyFrameAnimation;
@property(retain, nonatomic) NLApngObject* apngObject;
@property(retain, nonatomic) NSURL* soundFileUrl;
@property(retain, nonatomic) NSURL* animationFileUrl;
@property(copy, nonatomic) id completionBlock;
+(void)stopCurrentlyPlayingSound;
+(void)initialize;
-(void).cxx_destruct;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)dealloc;
-(void)willMoveToSuperview:(id)superview;
-(void)clearBlocks;
-(void)clearSound;
-(void)clearAnimation;
-(void)stopPlaying;
-(void)playSound;
-(void)playContentsOfAnimation:(BOOL)animation sound:(BOOL)sound soundCategory:(id)category;
-(void)setupSoundOfURL:(id)url;
-(void)setupAnimationOfURL:(id)url;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface UpdatePhoneSMSViewController : NLViewController <UITextFieldDelegate, UIActionSheetDelegate> {
	NSString* authNumber;
	UIButton* _confirmBtn;
	int _resendCount;
	id<SMSPinCodeConfirmDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<SMSPinCodeConfirmDelegate> delegate;
@property(assign, nonatomic) int resendCount;
@property(retain, nonatomic) NSString* authNumber;
@property(retain, nonatomic) UIButton* confirmBtn;
-(void).cxx_destruct;
-(void)didConfirmSMSPinCode:(id)code;
-(void)help:(id)help;
-(void)IVR:(id)ivr;
-(void)resendSMS:(id)sms;
-(void)clickConfirm:(id)confirm;
-(void)popViewControllerAnimated;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)textFieldDidChange:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBAudioSession : NSObject {
	BOOL _checkedPluggedHeadphone;
	BOOL _pluggedHeadphone;
	BOOL _isSnapMovieSoundOn;
}
@property(assign, nonatomic) BOOL isSnapMovieSoundOn;
@property(assign, nonatomic) BOOL pluggedHeadphone;
@property(assign, nonatomic) BOOL checkedPluggedHeadphone;
+(BOOL)isPluggedHeadphone;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedAudioSession;
-(void)allowMixing:(BOOL)mixing;
-(void)setAudioSesstionCategoryByVolume:(float)volume;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageCopyOperation : NLObjectStorageOperation {
}
-(void)buildRequest;
-(void)preprocessOnCompletion:(id)completion;
-(id)request;
-(id)initWithOperationParameters:(id)operationParameters;
@end

__attribute__((visibility("hidden")))
@interface UpdatePhoneIVRViewController : NLViewController <UIActionSheetDelegate> {
	BOOL onCall;
	NSString* countryNumber;
	NSString* phoneNumber;
	NSString* verifyCallNumber;
}
@property(assign, nonatomic) BOOL onCall;
@property(retain, nonatomic) NSString* verifyCallNumber;
@property(retain, nonatomic) NSString* phoneNumber;
@property(retain, nonatomic) NSString* countryNumber;
-(void).cxx_destruct;
-(void)verifyIVR;
-(void)onCall:(id)call;
-(void)viewDidLoad;
-(id)configureLabel:(id)label;
-(void)popViewControllerAnimated;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface UpdatePhoneDuplicateDeviceViewController : RegistrationDeviceDuplicatedViewController {
}
-(void)alreadyButtonPressed:(id)pressed;
-(void)okButtonPressed:(id)pressed;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface HitokotoViewHeaderView : UIView {
	TalkUserObject* user_;
	ProfileImageView* profileImageView_;
	UIImageView* profileCoverView_;
	UILabel* nameLabel_;
	UIButton* talkButton_;
	UIButton* callButton_;
}
@property(readonly, assign, nonatomic) UIButton* callButton;
@property(readonly, assign, nonatomic) UIButton* talkButton;
-(void).cxx_destruct;
-(BOOL)render;
-(id)initWithFrame:(CGRect)frame WithUserObject:(id)userObject;
-(void)updateHeaderForMyself;
-(void)updateHeaderForUser:(id)user;
@end

__attribute__((visibility("hidden")))
@interface NLCallSettingCommonSubViewController : NLViewController {
	BOOL _isDirectMode;
	UIView* _titleView;
	UIButton* _closeButton;
}
@property(retain, nonatomic) UIButton* closeButton;
@property(assign, nonatomic) BOOL isDirectMode;
@property(retain, nonatomic) UIView* titleView;
-(void).cxx_destruct;
-(void)didReceiveMemoryWarning;
-(void)popCurrentViewAnimated;
-(void)setTitle:(id)title;
-(void)initDefault;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LARecentPhotosView : UIView {
	LAUploadProgressView* _progressView;
	NSString* _groupID;
	LAAlbum* _album;
	NSArray* _urlImageControls;
	LAAlbumNoPhotosView* _noPhotosView;
}
@property(retain, nonatomic) LAAlbumNoPhotosView* noPhotosView;
@property(retain, nonatomic) NSArray* urlImageControls;
@property(retain, nonatomic) LAAlbum* album;
@property(retain, nonatomic) NSString* groupID;
@property(retain, nonatomic) LAUploadProgressView* progressView;
+(CGSize)size;
+(CGSize)size:(BOOL)size;
-(void).cxx_destruct;
-(void)launchGallery;
-(void)setHighlighted:(BOOL)highlighted;
-(id)getThumbnailTypes;
-(unsigned)numberOfThumbnails;
-(void)setupPhotosFrames:(CGRect [6][6])frames isLandscape:(BOOL)landscape;
-(void)setViewFrames;
-(void)layoutSubviews;
-(void)setupUrlImages;
-(void)setupProgressView;
-(void)updateWithAlbum:(id)album groupID:(id)anId;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBMarginCell : UITableViewCell {
}
+(id)marginCellWithHeight:(float)height tableView:(id)view;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface HitokotoMessageCellView : MessageViewCell {
	UIImageView* replyButton;
}
@property(readonly, assign, nonatomic) UIImageView* replyButton;
-(void).cxx_destruct;
-(void)setTheme:(unsigned)theme;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface RegistrationInputField : NLCustomField {
	UIView* customizedClearButton;
}
@property(retain, nonatomic) UIView* customizedClearButton;
-(void).cxx_destruct;
-(CGRect)rightViewRectForBounds:(CGRect)bounds;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(void)_init;
-(void)editingDidEnd;
-(void)editingDidBegin;
-(void)textChanged:(id)changed;
-(void)rightViewPressed:(id)pressed;
@end

__attribute__((visibility("hidden")))
@interface NLInputStatusView : UIView {
	UIImageView* _backgroundView;
	UILabel* _inputStatusMessageView;
	MessageViewController* _delegate;
	NLSafeUnretainedObject* _weakSelf;
	NLGCDTimer* _gcdTimer;
	NLGCDTimer* _gcdAnimationTimer;
}
-(void).cxx_destruct;
-(void)startAnimation;
-(void)resetInputStatus;
-(void)showInputStatusViewWithInterval:(float)interval;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface NLConfigurationManager : NSObject {
	long long _revision;
	BOOL _useLineCallSpot;
	unsigned _mobileNetworkExpirePeriod;
	BOOL _showContactsAtFriendList;
	BOOL _useLineCall;
	BOOL _useMusic;
	BOOL _showTimelineAtMainTab;
	BOOL _useValidateCallerID;
	BOOL _showCallAddressInFriendList;
	NSDictionary* _configuration;
	int _groupMaxSize;
	int _roomMaxSize;
}
@property(readonly, assign, nonatomic) int roomMaxSize;
@property(readonly, assign, nonatomic) int groupMaxSize;
@property(readonly, assign, nonatomic) BOOL showCallAddressInFriendList;
@property(readonly, assign, nonatomic) unsigned mobileNetworkExpirePeriod;
@property(readonly, assign, nonatomic) BOOL useValidateCallerID;
@property(readonly, assign, nonatomic) BOOL showTimelineAtMainTab;
@property(readonly, assign, nonatomic) BOOL useLineCallSpot;
@property(readonly, assign, nonatomic) BOOL useMusic;
@property(readonly, assign, nonatomic) BOOL useLineCall;
@property(readonly, assign, nonatomic) BOOL showContactsAtFriendList;
@property(readonly, assign, nonatomic) NSDictionary* configuration;
+(id)defaultConfiguration;
+(void)createDirectoryForURL:(id)url;
+(id)managerFileURL;
+(BOOL)canDirectLineCallAtChatRoomForLineAtOfficialID;
+(BOOL)canDirectLineCallAtProfilePopup;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)resetShowCallAddressInFriendList;
-(void)refreshConfiguration;
-(void)setConfigurationWithData:(id)data;
-(id)getConfiguration;
-(void)saveConfiguration:(id)configuration revision:(long long)revision;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ChannelUtil : NSObject {
}
+(void)verifyAndFixDatabaseLocations;
+(void)printCookieStorage;
+(void)deleteCookieUsingPredicator:(id)predicator;
+(void)setCookieWithName:(id)name value:(id)value forDomain:(id)domain;
+(id)mimeTypeForExtension:(id)extension;
+(id)appSDKVersion;
@end

__attribute__((visibility("hidden")))
@interface MTStatusBarOverlay : UIWindow <UITableViewDataSource> {
	UIControl* backgroundView_;
	UIControl* detailView_;
	UIImageView* statusBarBackgroundImageView_;
	UILabel* statusLabel1_;
	UILabel* statusLabel2_;
	UILabel* hiddenStatusLabel_;
	UIActivityIndicatorView* activityIndicator_;
	UILabel* finishedLabel_;
	BOOL hidesActivity_;
	UIImage* grayStatusBarImage_;
	UIImage* grayStatusBarImageSmall_;
	int animation_;
	CGRect smallFrame_;
	CGRect oldBackgroundViewFrame_;
	BOOL hideInProgress_;
	BOOL active_;
	NSMutableArray* messageQueue_;
	BOOL canRemoveImmediateMessagesFromQueue_;
	int detailViewMode_;
	NSString* detailText_;
	UITextView* detailTextView_;
	NSMutableArray* messageHistory_;
	UITableView* historyTableView_;
	id<MTStatusBarOverlayDelegate> delegate_;
}
@property(retain, nonatomic) UITableView* historyTableView;
@property(retain, nonatomic) NSMutableArray* messageQueue;
@property(retain, nonatomic) UITextView* detailTextView;
@property(readonly, assign, nonatomic, getter=isReallyHidden) BOOL reallyHidden;
@property(assign, getter=isActive) BOOL active;
@property(assign, getter=isHideInProgress) BOOL hideInProgress;
@property(assign, nonatomic) CGRect oldBackgroundViewFrame;
@property(readonly, assign, nonatomic) UILabel* visibleStatusLabel;
@property(assign, nonatomic) UILabel* hiddenStatusLabel;
@property(retain, nonatomic) UILabel* statusLabel2;
@property(retain, nonatomic) UILabel* statusLabel1;
@property(retain, nonatomic) UIImage* grayStatusBarImageSmall;
@property(retain, nonatomic) UIImage* grayStatusBarImage;
@property(retain, nonatomic) UIImageView* statusBarBackgroundImageView;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(assign, nonatomic) id<MTStatusBarOverlayDelegate> delegate;
@property(copy, nonatomic) NSString* detailText;
@property(assign, nonatomic) int detailViewMode;
@property(assign, nonatomic) BOOL canRemoveImmediateMessagesFromQueue;
@property(assign, nonatomic, getter=isHistoryEnabled) BOOL historyEnabled;
@property(retain, nonatomic) NSMutableArray* messageHistory;
@property(readonly, assign, nonatomic, getter=isDetailViewHidden) BOOL detailViewHidden;
@property(readonly, assign, nonatomic, getter=isShrinked) BOOL shrinked;
@property(assign, nonatomic) BOOL hidesActivity;
@property(retain, nonatomic) UILabel* finishedLabel;
@property(assign, nonatomic) int animation;
@property(assign, nonatomic) CGRect smallFrame;
@property(retain, nonatomic) UIControl* detailView;
@property(retain, nonatomic) UIControl* backgroundView;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)setHidden:(BOOL)hidden useAlpha:(BOOL)alpha;
-(void)setHiddenUsingAlpha:(BOOL)alpha;
-(void)clearHistory;
-(void)addMessageToHistory:(id)history;
-(void)updateDetailTextViewHeight;
-(void)callDelegateWithNewMessage:(id)newMessage;
-(void)updateUIForMessageType:(int)messageType duration:(double)duration;
-(void)setColorSchemeForStatusBarStyle:(int)statusBarStyle;
-(void)setStatusBarBackgroundForStyle:(int)style;
-(void)contentViewClicked:(id)clicked;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)setDetailViewHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setShrinked:(BOOL)shrinked animated:(BOOL)animated;
-(void)rotateToStatusBarFrame:(id)statusBarFrame;
-(void)didChangeStatusBarFrame:(id)frame;
-(void)hide;
-(void)showNextMessage;
-(void)postImmediateMessage:(id)message type:(int)type duration:(double)duration animated:(BOOL)animated;
-(void)postMessage:(id)message type:(int)type duration:(double)duration animated:(BOOL)animated immediate:(BOOL)immediate;
-(void)postImmediateErrorMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postErrorMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postErrorMessage:(id)message duration:(double)duration;
-(void)postImmediateFinishMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postFinishMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postFinishMessage:(id)message duration:(double)duration;
-(void)postImmediateMessage:(id)message animated:(BOOL)animated;
-(void)postMessage:(id)message animated:(BOOL)animated;
-(void)postMessage:(id)message;
-(void)addSubviewToBackgroundView:(id)backgroundView atIndex:(int)index;
-(void)addSubviewToBackgroundView:(id)backgroundView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineApiCommand : CDVPlugin {
	BOOL isDownloadOperation_;
	NSString* callbackID;
}
@property(retain, nonatomic) NSString* callbackID;
-(void).cxx_destruct;
-(void)getChannels:(id)channels withDict:(id)dict;
-(void)getLineEmojiMappingTable:(id)table withDict:(id)dict;
-(void)saveImageToAlbum:(id)album withDict:(id)dict;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)notifySaveImageToAlbumResult:(int)albumResult;
-(void)notifyResultToWeb:(id)web;
-(id)initWithWebView:(id)webView;
@end

__attribute__((visibility("hidden")))
@interface TapDetectingWindow : UIWindow {
	UIView* viewToObserve;
	id<TapDetectingWindowDelegate> controllerThatObserves;
}
@property(assign, nonatomic) id<TapDetectingWindowDelegate> controllerThatObserves;
@property(retain, nonatomic) UIView* viewToObserve;
-(void).cxx_destruct;
-(void)sendEvent:(id)event;
-(void)forwardTap:(id)tap;
-(id)initWithViewToObserver:(id)observer andDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface LEGYFetchOpQueue : NSObject {
	NSManagedObjectContext* _writeManagedObjectContext;
	NSManagedObjectModel* _managedObjectModel;
	NSPersistentStoreCoordinator* _persistentStoreCoordinator;
	LEGYFetchOpDao* fetchOpDao;
	id _onAddedCallback;
}
+(id)instance:(id)instance;
-(void).cxx_destruct;
-(void)fail:(id)fail withError:(int)error;
-(void)doneOperations:(id)operations;
-(void)deleteDone;
-(id)get:(int)get;
-(void)append:(id)append requestFetchOp:(id)op withAsyncFetchOp:(BOOL)asyncFetchOp;
-(id)persistentStoreCoordinator;
-(id)managedObjectModel;
-(id)writeManagedObjectContext;
-(id)initWithOnAddedCallback:(id)onAddedCallback;
@end

__attribute__((visibility("hidden")))
@interface LineProgressInterface : UIView {
	float progress;
	id<LineProgressDelegate> delegate;
}
@property(assign, nonatomic) id<LineProgressDelegate> delegate;
@property(assign, nonatomic) float progress;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumProtocol : NSObject {
	NSOperation* mOperation;
	id mDelegate;
}
@property(assign, nonatomic) id<LAAlbumDataDelegate> delegate;
-(void).cxx_destruct;
-(void)updateAlbumListType:(id)type groupID:(id)anId;
-(void)fullFetchAlbumList:(id)list message:(id)message groupID:(id)anId;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCustomKeyboardButton : UIButton <SticonImageComponentDelegate> {
	unsigned _PKG_CODE;
	unsigned _CODE;
}
@property(assign, nonatomic) unsigned CODE;
@property(assign, nonatomic) unsigned PKG_CODE;
-(void)sticonDrawImage:(id)image PKG_CODE:(unsigned)code CODE:(unsigned)code3;
-(unsigned)sticonCODE;
-(unsigned)sticonPKG_CODE;
-(void)setImageForSticon:(unsigned)sticon CODE:(unsigned)code;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LineImageUploadProgressView : LineProgressInterface {
	UIImageView* bgImageView_;
	UIImageView* thumbView_;
	UIImageView* thumbCoverView_;
	UIProgressView* progressBar_;
	UILabel* stateLabel_;
	UIButton* cancelButton_;
	UIButton* failedButton_;
	BOOL isSendable_;
	id<LineImageUploadProgressViewDelegate> uploadDelegate;
}
@property(assign, nonatomic) id<LineImageUploadProgressViewDelegate> uploadDelegate;
@property(assign, nonatomic) BOOL isSendable;
-(void).cxx_destruct;
-(void)dealloc;
-(void)setThumbnail:(id)thumbnail;
-(void)setProgress:(float)progress;
-(void)actionFailed:(id)failed;
-(void)actionCancel:(id)cancel;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAOBSUploaderFile : NSObject {
}
+(id)pathFromURL:(id)url scope:(id)scope;
+(id)pathFromFile:(id)file scope:(id)scope;
+(id)cacheDirectory;
+(id)URLForString:(id)string;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
+(void)createDirectoryForPath:(id)path;
+(id)pathForURL:(id)url withBaseDirectory:(id)baseDirectory scope:(id)scope;
-(id)dataForURL:(id)url;
-(id)dataForURL:(id)url withScope:(id)scope;
-(id)createDirectoryForPath:(id)path;
-(id)cachedDataForName:(id)name withScope:(id)scope;
-(id)cachedDataForURL:(id)url withScope:(id)scope;
-(void)asyncCachedDataForURL:(id)url withScope:(id)scope complmete:(id)complmete;
-(BOOL)cachedDataExistsForURL:(id)url withScope:(id)scope;
-(BOOL)deleteAllCache:(id)cache withType:(id)type;
-(BOOL)deleteCacheWithScope:(id)scope;
-(BOOL)deleteCache:(id)cache withScope:(id)scope;
-(BOOL)deleteCache:(id)cache;
-(BOOL)saveCache:(id)cache forName:(id)name withScope:(id)scope;
-(BOOL)saveCache:(id)cache forURL:(id)url withScope:(id)scope;
-(id)cachePathForURL:(id)url scope:(id)scope;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LAURLImageView : UIView {
	UIImageView* _loadingImageView;
	NJSURLImageView* _urlImageView;
	NSString* _oId;
}
@property(retain, nonatomic) NSString* oId;
@property(retain, nonatomic) NJSURLImageView* urlImageView;
@property(retain, nonatomic) UIImageView* loadingImageView;
-(void).cxx_destruct;
-(void)setOid:(id)oid size:(id)size albumId:(id)anId groupId:(id)anId4;
-(void)setImage:(id)image;
-(void)setFrame:(CGRect)frame;
-(void)setupView;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBSharePostActivityContentViewMap : MBActivityContentViewMap {
}
-(void)callBackAddCellView:(int)view contentView:(id)view2;
@end

__attribute__((visibility("hidden")))
@interface MBSharePostContentView : MBCompositeCellView {
	MBSharePostActivity* mSharePostActivity;
	UIImageView* mBackImageView;
	MBActivityContentViewMap* mActivityContentViewMap;
}
+(UIEdgeInsets)marginWithCellShareView:(Class)cellShareView;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(void)setCellData:(id)data recursive:(BOOL)recursive;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(id)backImageView;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface LAUploaderQueue : NSObject {
	unsigned mBgTask;
	NSString* _albumID;
	NSString* _groupID;
	int _packageType;
	float _quality;
	int _uploadTotalCount;
	NSMutableArray* _uploadReadyQueues;
	NSMutableArray* _uploadCompleteQueues;
	int _currentStatus;
	float _currentUploadPercent;
	dispatch_queue_s* _LineAlbumSerialUploader;
}
@property(assign, nonatomic) dispatch_queue_s* LineAlbumSerialUploader;
@property(assign, nonatomic) float currentUploadPercent;
@property(assign, nonatomic) int currentStatus;
@property(retain, nonatomic) NSMutableArray* uploadCompleteQueues;
@property(retain, nonatomic) NSMutableArray* uploadReadyQueues;
@property(assign, nonatomic) int uploadTotalCount;
@property(assign, nonatomic) float quality;
@property(assign, nonatomic) int packageType;
@property(retain, nonatomic) NSString* groupID;
@property(retain, nonatomic) NSString* albumID;
-(void).cxx_destruct;
-(void)cancelUpload;
-(void)retryUpload;
-(void)startUpload;
-(void)cleanupUploadQueue;
-(void)dealloc;
-(id)init;
-(id)pickUpRemainImage:(id)image;
-(void)startOBSUploadImage;
-(void)startUploadOperation;
-(void)addCompletedPhotosToAPICenter:(id)apicenter info:(id)info;
-(void)beginBackgroundUploadTask;
-(void)sendUnExpectedError;
-(unsigned)completedCount;
-(unsigned)totalCount;
-(BOOL)isUploadCompleted;
-(BOOL)isAvailableToUpload;
@end

__attribute__((visibility("hidden")))
@interface LineSQLiteQueryResult : NSObject {
	NSArray* rows_;
	int rowsAffected_;
	long long insertedID_;
}
@property(assign, nonatomic) long long insertedID;
@property(assign, nonatomic) int rowAffected;
@property(retain, nonatomic) NSArray* rows;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LineLocalStorageCommand : CDVPlugin {
	dispatch_queue_s* executeQueue_;
	NSString* storagePath;
}
@property(retain, nonatomic) NSString* storagePath;
+(id)localStorageURL;
-(void).cxx_destruct;
-(void)clearItems:(id)items withDict:(id)dict;
-(void)existsItem:(id)item withDict:(id)dict;
-(void)removeItems:(id)items withDict:(id)dict;
-(void)getItems:(id)items withDict:(id)dict;
-(void)setItems:(id)items withDict:(id)dict;
-(void)keys:(id)keys withDict:(id)dict;
-(void)cleanupLocalStorage;
-(void)onMemoryWarning;
-(void)onAppTerminate;
-(void)clearAllKeyValuesWhenFinishBlock:(id)block;
-(void)requestRemoveItemValueForKey:(id)key whenFinishBlock:(id)block;
-(void)requestGetItemValueForKey:(id)key whenFinishBlock:(id)block;
-(void)setItemsFromKeyValueArray:(id)keyValueArray whenFinishBlock:(id)block errorBlock:(id)block3;
-(id)stringForObject:(id)object;
-(BOOL)setItemValue:(id)value forKey:(id)key;
-(void)requestCheckExistenceForKey:(id)key whenFinishBlock:(id)block;
-(BOOL)isExistsForKey:(id)key;
-(void)requestKeysWhenFinishBlock:(id)block;
-(void)createKeyValueTableIfNotExists;
-(void)closeAllLocalStoragesExceptMe;
-(void)closeAllLocalStorages;
-(BOOL)closeLocalStorage;
-(BOOL)checkLocalStorage;
-(BOOL)tryToOpenLocalStorage;
-(void)asyncExecuteSqlWithQueryString:(id)queryString bindingParamters:(id)paramters usingFinishedBlock:(id)block;
-(id)executeSqlWithQueryString:(id)queryString bindingParamters:(id)paramters;
-(void)notifyResultWithSuccessResult:(int)successResult resultAsString:(id)string toCallbackID:(id)callbackID;
-(void)notifyResultWithSuccessResult:(int)successResult resultAsArray:(id)array toCallbackID:(id)callbackID;
-(void)notifyResultWithSuccessResult:(int)successResult messageString:(id)string toCallbackID:(id)callbackID;
-(id)currentDBPath;
-(id)openedDBForKey:(id)key;
-(void)removeOpenedDBForKey:(id)key;
-(void)addOpenedDB:(id)db forKey:(id)key;
-(void)dealloc;
-(id)initWithWebView:(id)webView;
@end

__attribute__((visibility("hidden")))
@interface NLStickerPackageViewCell : UITableViewCell {
	unsigned _style;
	unsigned _cellType;
	UIImageView* _packageImageView;
	UIImageView* _newImageView;
	UILabel* _authorLabel;
	UIImageView* _coinImage;
	UILabel* _priceLabel;
	UILabel* _eventExplanationLabel;
	UILabel* _userNameLabel;
	UIActivityIndicatorView* _act;
	UIImageView* _animationStickerBadge;
	UIImageView* _soudeStickerBadge;
	BOOL _isNewlyReceivedGift;
	LineProduct* _product;
	int _priceTier;
	UILabel* _dateLabel;
	UILabel* _mainLabel;
	UIImageView* _accessoryArrow;
	UIButton* _downloadThisStickerButton;
	UILabel* _readyToDownloadLabel;
	NLStickerDownloadProgressView* _progressView;
	int _ranking;
	LineStickerPackage* _package;
}
@property(retain, nonatomic) LineProduct* product;
@property(retain, nonatomic) LineStickerPackage* package;
@property(assign, nonatomic) int ranking;
@property(retain, nonatomic) NLStickerDownloadProgressView* progressView;
@property(retain, nonatomic) UILabel* readyToDownloadLabel;
@property(retain, nonatomic) UIButton* downloadThisStickerButton;
@property(retain, nonatomic) UIImageView* accessoryArrow;
@property(retain, nonatomic) UILabel* mainLabel;
@property(retain, nonatomic) UILabel* dateLabel;
@property(assign, nonatomic) int priceTier;
+(float)heightForStyle:(unsigned)style;
-(void).cxx_destruct;
-(void)setIsNewlyReceivedGift:(BOOL)gift;
-(void)addBorderAtBottomOfView:(id)view;
-(id)getSinglePixelWithColor:(id)color;
-(void)setupBackground:(unsigned)background;
-(void)setupComponents;
-(void)setAnimationSoundStickerBadge;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier stickerCellStyle:(unsigned)style3 cellType:(unsigned)type;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LAProgressHUD : UIView {
	BOOL useAnimation;
	SEL methodForExecution;
	id targetForExecution;
	id objectForExecution;
	UILabel* label;
	UILabel* detailsLabel;
	BOOL isFinished;
	CGAffineTransform rotationTransform;
	BOOL square;
	BOOL dimBackground;
	BOOL taskInProgress;
	BOOL removeFromSuperViewOnHide;
	int animationType;
	id<LAProgressHUDDelegate> delegate;
	float opacity;
	UIColor* color;
	UIFont* labelFont;
	UIFont* detailsLabelFont;
	UIView* indicator;
	float xOffset;
	float yOffset;
	float margin;
	float graceTime;
	float minShowTime;
	NSTimer* graceTimer;
	NSTimer* minShowTimer;
	UIView* customView;
	NSDate* showStarted;
	int mode;
	NSString* labelText;
	NSString* detailsLabelText;
	float progress;
	id completionBlock;
	CGSize minSize;
	CGSize size;
}
@property(assign) CGSize size;
@property(retain) NSDate* showStarted;
@property(retain) NSTimer* minShowTimer;
@property(retain) NSTimer* graceTimer;
@property(retain) UIView* indicator;
@property(assign, getter=isSquare) BOOL square;
@property(assign) CGSize minSize;
@property(assign) float progress;
@property(retain) UIFont* detailsLabelFont;
@property(retain) UIFont* labelFont;
@property(assign) BOOL removeFromSuperViewOnHide;
@property(assign) BOOL taskInProgress;
@property(assign) float minShowTime;
@property(assign) float graceTime;
@property(assign) BOOL dimBackground;
@property(assign) float margin;
@property(assign) float yOffset;
@property(assign) float xOffset;
@property(retain) UIColor* color;
@property(assign) float opacity;
@property(copy) NSString* detailsLabelText;
@property(copy) NSString* labelText;
@property(assign) __weak id<LAProgressHUDDelegate> delegate;
@property(retain) UIView* customView;
@property(assign) int animationType;
@property(assign) int mode;
@property(copy) id completionBlock;
+(id)allHUDsForView:(id)view;
+(id)HUDForView:(id)view;
+(unsigned)hideAllHUDsForView:(id)view animated:(BOOL)animated;
+(BOOL)hideHUDForView:(id)view animated:(BOOL)animated;
+(id)showHUDAddedTo:(id)to animated:(BOOL)animated;
-(void).cxx_destruct;
-(void)setTransformForCurrentOrientation:(BOOL)currentOrientation;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)unregisterFromNotifications;
-(void)registerForNotifications;
-(void)updateUIForKeypath:(id)keypath;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)observableKeypaths;
-(void)unregisterFromKVO;
-(void)registerForKVO;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)updateIndicators;
-(void)setupLabels;
-(void)cleanUp;
-(void)launchExecution;
-(void)showAnimated:(BOOL)animated whileExecutingBlock:(id)block onQueue:(dispatch_queue_s*)queue completionBlock:(id)block4;
-(void)showAnimated:(BOOL)animated whileExecutingBlock:(id)block onQueue:(dispatch_queue_s*)queue;
-(void)showAnimated:(BOOL)animated whileExecutingBlock:(id)block completionBlock:(id)block3;
-(void)showAnimated:(BOOL)animated whileExecutingBlock:(id)block;
-(void)showWhileExecuting:(SEL)executing onTarget:(id)target withObject:(id)object animated:(BOOL)animated;
-(void)done;
-(void)animationFinished:(id)finished finished:(BOOL)finished2 context:(void*)context;
-(void)hideUsingAnimation:(BOOL)animation;
-(void)showUsingAnimation:(BOOL)animation;
-(void)didMoveToSuperview;
-(void)handleMinShowTimer:(id)timer;
-(void)handleGraceTimer:(id)timer;
-(void)hideDelayed:(id)delayed;
-(void)hide:(BOOL)hide afterDelay:(double)delay;
-(void)hide:(BOOL)hide;
-(void)show:(BOOL)show;
-(void)dealloc;
-(id)initWithWindow:(id)window;
-(id)initWithView:(id)view;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LARoundProgressView : UIView {
	BOOL _annular;
	float _progress;
	UIColor* _progressTintColor;
	UIColor* _backgroundTintColor;
}
@property(assign, nonatomic, getter=isAnnular) BOOL annular;
@property(retain, nonatomic) UIColor* backgroundTintColor;
@property(retain, nonatomic) UIColor* progressTintColor;
@property(assign, nonatomic) float progress;
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)observableKeypaths;
-(void)unregisterFromKVO;
-(void)registerForKVO;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LABarProgressView : UIView {
	float _progress;
	UIColor* _lineColor;
	UIColor* _progressRemainingColor;
	UIColor* _progressColor;
}
@property(retain, nonatomic) UIColor* progressColor;
@property(retain, nonatomic) UIColor* progressRemainingColor;
@property(retain, nonatomic) UIColor* lineColor;
@property(assign, nonatomic) float progress;
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)observableKeypaths;
-(void)unregisterFromKVO;
-(void)registerForKVO;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface StickerSettingsViewController : NLTableViewController {
}
-(void)stickerPresentBoxClearPresentBadges;
-(void)selectedMyStickersEdit;
-(void)selectedPresentBox;
-(void)selectedPurchaseHistory;
-(void)selectedMyStickers;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(BOOL)currentStickerPreviewSetting;
-(void)onChangedStickerPreviewOnOff:(id)off;
-(void)customizeStickerPreviewCell:(id)cell;
-(void)customizeMyStickersEditCell:(id)cell;
-(void)updatePresentBoxBadge;
-(void)customizePresentBoxCell:(id)cell;
-(void)customizePurchaseHistoryCell:(id)cell;
-(void)customizeMyStickersCell:(id)cell;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)stickerPreviewSectionFooter;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface StickerDownloadingViewController : NLViewController <UIAlertViewDelegate, NLStickerDownloadDelegate> {
	LineStickerPackage* package_;
	UIImageView* thumbnailImageView_;
	UILabel* packageNameLabel_;
	UILabel* packageExpiredDateLabel_;
	UIImageView* progressBar_;
	NLActiveHitButton* stopButton_;
	UIButton* confirmButton_;
	UIAlertView* alertView_;
	UILabel* downloadingLabel_;
	UILabel* footerLabel_;
	UIImageView* progressBG_;
	BOOL hasCompleted;
	BOOL isGoingToOpenAccountRegistrationView;
	NSMutableArray* alertViews_;
	UILabel* readyToDownloadLabel_;
	NLSafeUnretainedObject* safeSelf;
	BOOL isReceivedGiftProduct;
	NSMutableDictionary* _downloadResults;
}
@property(retain, nonatomic) NSMutableDictionary* downloadResults;
@property(assign, nonatomic) BOOL isReceivedGiftProduct;
-(void).cxx_destruct;
-(void)registerAccount:(id)account;
-(void)onTapStopButton:(id)button;
-(void)onClosePressed:(id)pressed;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)stickerPackageDownloadFailed:(id)failed;
-(void)updateViewToDownloadCompleteState;
-(void)stickerPackageDownloadSuccess:(id)success;
-(void)stickerPackage:(id)package downloaded:(float)downloaded;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(id)initWithProduct:(id)product;
@end

__attribute__((visibility("hidden")))
@interface StickerPackageManagementViewController : NLViewController <UsableStickerListDelegate, UITableViewDataSource, UITableViewDelegate, NLStickerDownloadDelegate> {
	BOOL editMode;
	UILabel* noResultLabel_;
	UsableStickerList* renewingUsableStickerList_;
	BOOL hasToRenewUsableStickerList_;
	UIActivityIndicatorView* act_;
	NLSafeUnretainedObject* safeSelf;
	UIAlertView* shownAlertView;
	BOOL isScrollToDownloadablePackage;
	BOOL _showingSuccessAlert;
	BOOL _showingFailureAlert;
	UsableStickerList* _usableStickerList;
	UITableView* _stickersTableView;
	UIView* _downloadAllView;
	UIView* _bottomView;
	UIButton* _bottomButton;
	int _allDownloadSuccessCount;
}
@property(assign, nonatomic) int allDownloadSuccessCount;
@property(assign, nonatomic, getter=isShowingFailureAlert) BOOL showingFailureAlert;
@property(assign, nonatomic, getter=isShowingSuccessAlert) BOOL showingSuccessAlert;
@property(retain, nonatomic) UIButton* bottomButton;
@property(retain, nonatomic) UIView* bottomView;
@property(retain, nonatomic) UIView* downloadAllView;
@property(retain, nonatomic) UITableView* stickersTableView;
@property(retain, nonatomic) UsableStickerList* usableStickerList;
@property(assign, nonatomic) BOOL isScrollToDownloadablePackage;
-(void).cxx_destruct;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)reloadCellAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)usableStickerListFailedToUpdate:(id)update;
-(void)usableStickerListDidUpdate:(id)usableStickerList;
-(void)usableStickerPackagesChanged;
-(void)goStickerShop;
-(id)defaultFooterView;
-(void)applicationWillChangeStatusBarFrame:(id)application;
-(void)scrollToDownloadablePackage;
-(void)renewUsableStickerList;
-(id)indexForPackage:(id)package;
-(id)packageForIndexPath:(id)indexPath;
-(void)stickerPackageDownloadSuccess:(id)success;
-(void)stickerPackageDownloadCanceled:(id)canceled;
-(void)showFailureMessage:(id)message;
-(void)showSuccessMessage;
-(void)stickerPackageDownloadFailed:(id)failed;
-(void)showAlertViewIfNeededWithStickerPackage:(id)stickerPackage;
-(void)downloadFailedPackages;
-(void)confirmToCancelAllDownloads:(id)cancelAllDownloads;
-(void)confirmToDownloadAllStickers:(id)downloadAllStickers;
-(void)confirmToDownloadThisSticker:(id)downloadThisSticker;
-(void)downloadSticker:(id)sticker;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)moveTableHeader:(BOOL)header;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)isThereAnyPackageUnzipping;
-(void)configureBottomButton:(BOOL)button;
-(void)configureBottomView;
-(void)checkNoNamePackage;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initInEditMode:(BOOL)editMode;
@end

__attribute__((visibility("hidden")))
@interface LinePictureCropToolBar : UIView {
	UIImageView* bgView_;
	UILabel* textLabel_;
	UIButton* cancelButton_;
	UIButton* chooseButton_;
	id<LinePictureCropToolBarDelegate> delegate;
}
@property(assign, nonatomic) id<LinePictureCropToolBarDelegate> delegate;
+(float)height;
+(id)cropToolBar;
-(void).cxx_destruct;
-(void)hideTextLabel;
-(void)actionChoose:(id)choose;
-(void)actionCancel:(id)cancel;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LinePictureCropCoverView : UIView {
	UIView* leftDummy_;
	UIView* rightDummy_;
	UIView* upDummy_;
	UIView* downDummy_;
	UIImageView* cropView_;
	CGSize cropSize_;
}
-(void).cxx_destruct;
-(CGRect)frameCropView;
-(float)emptyWidth;
-(float)emptyHeight;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame withCropSize:(CGSize)cropSize;
@end

__attribute__((visibility("hidden")))
@interface NLLineCallService : NSObject {
}
+(void)cancelPendingRequestForCallRoute;
+(void)searchPaidCallUserRate:(id)rate completionBlock:(id)block errorBlock:(id)block3;
+(void)getCallCreditPurchaseHistoryWithRange:(NSRange)range startDate:(id)date period:(int)period completionBlock:(id)block errorBlock:(id)block5;
+(void)reserveCallCreditPurchaseWithReservation:(id)reservation completionBlock:(id)block errorBlock:(id)block3;
+(void)getCallCreditProductsWithPaymentType:(int)paymentType paymentPgType:(int)type country:(id)country language:(id)language completionBlock:(id)block errorBlock:(id)block6;
+(void)getPaidCallHistoryWithItemIndex:(long long)itemIndex size:(int)size completionBlock:(id)block;
+(void)getPaidCallBalanceListWithCompletionBlock:(id)completionBlock;
+(void)acquirePaidCallRouteByPaidCallType:(int)type dialedNumber:(id)number disableCallerId:(BOOL)anId completionBlock:(id)block;
+(void)lookupPaidCallSilentWithDialedNumber:(id)dialedNumber completionBlock:(id)block;
+(id)lookupPaidCallWithDialedNumber:(id)dialedNumber completionBlock:(id)block errorBlock:(id)block3;
+(void)acquirePaidCallCurrencyExchangeRate:(id)rate errorBlock:(id)block;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineTopSlideView : UIView {
	BOOL mIsShowShadow;
	UIImageView* mTopShadowView;
	UIButton* mWriteButton;
	UIButton* mPhotoButton;
	UIButton* mStickerButton;
	MBTimelineTopNewButton* mNewButton;
	id mDelegate;
	BOOL mIsAnimating;
	float mBaseYPosition;
	float mLastYPostion;
	NSMutableDictionary* mUserInfo;
}
@property(assign, nonatomic) BOOL isShowShadow;
+(float)height;
+(id)myhomeTopSlideViewWithFrame:(CGRect)frame delegate:(id)delegate srcType:(id)type;
+(id)timelineTopSlideViewWithFrame:(CGRect)frame delegate:(id)delegate srcType:(id)type;
-(void).cxx_destruct;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(BOOL)isContainUserInteractionAreaWithPoint:(CGPoint)point;
-(void)setShadowViewHiddenByScrollViewYPos:(float)pos isDraggingTracking:(BOOL)tracking;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)setHiddenNewButton:(BOOL)button;
-(void)setAnimateHiddenNewButton:(BOOL)button;
-(void)setHiddenShadow:(BOOL)shadow;
-(void)hideNoAni;
-(void)hideDelay;
-(void)showAni;
-(void)showView:(BOOL)view animated:(BOOL)animated;
-(void)setY:(float)y;
-(float)getBaseYPosition;
-(void)setBaseYPosition:(float)position;
-(float)height;
-(BOOL)isHiddenState;
-(void)dealloc;
-(void)setLayout;
-(void)showNewCheck;
-(void)setNewButton;
-(id)setButtonTitle:(id)title withButtonAction:(id)buttonAction;
-(void)setButton;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate srcType:(id)type;
-(void)removeAddedUserInfo;
-(void)addUserInfo:(id)info;
-(id)delegate;
-(id)userInfo;
@end

__attribute__((visibility("hidden")))
@interface LGAlbumsViewController : LGBaseViewController <LGInstantViewDelegate, LGAlbumsDataControllerDelegate, UITableViewDataSource, UITableViewDelegate> {
	BOOL _isInitialDataLoad;
	UITableView* _tableView;
	LGAlbumsDataController* _albumsDataController;
	int _numberOfAlbumRowsBefore;
	LGMenuBarView* _bottomMenuBarView;
	NSArray* _albumDummy2ImageArray;
	NSArray* _albumDummy3ImageArray;
	UIImage* _albumNoImage;
}
@property(retain, nonatomic) UIImage* albumNoImage;
@property(retain, nonatomic) NSArray* albumDummy3ImageArray;
@property(retain, nonatomic) NSArray* albumDummy2ImageArray;
@property(retain, nonatomic) LGMenuBarView* bottomMenuBarView;
@property(assign, nonatomic) BOOL isInitialDataLoad;
@property(assign, nonatomic) int numberOfAlbumRowsBefore;
@property(retain, nonatomic) LGAlbumsDataController* albumsDataController;
@property(retain, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)repositionMenuBar;
-(void)reloadDataDidPageAppearOnMainMethod;
-(id)assetGroupWithIndexPath:(id)indexPath;
-(void)didChangeLazyAssetGroups;
-(void)willChangeLazyAssetGroups;
-(void)didChangeAssetGroups;
-(void)willChangeAssetGroups;
-(void)didLoadNumberOfAssets:(id)assets;
-(int)countOfViewControllers;
-(void)didChangePageDisappearValue;
-(void)updateForCurrentLanuage;
-(id)nClickAreaId;
-(void)refreshDataAnimated:(BOOL)animated;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithAssetsLibrary:(id)assetsLibrary;
@end

__attribute__((visibility("hidden")))
@interface NLAsyncFileWriter : NSObject {
	dispatch_io_s* _channel;
	BOOL _closed;
}
-(void)close:(unsigned long)close;
-(void)abort;
-(void)close;
-(void)writeData:(id)data;
-(void)dealloc;
-(id)initWithURL:(id)url append:(BOOL)append closeNotifier:(id)notifier;
@end

__attribute__((visibility("hidden")))
@interface NLCallSwitch : UISwitch {
}
-(id)init;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBURLImageButton : UIButton <MBURLImageObserving> {
	MBURLImage* mURLImage;
	id mUpdateCallbackBlock;
}
-(void).cxx_destruct;
-(void)URLImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)setImageAnimateWithImage:(id)image;
-(void)setUpdateCallback:(id)callback;
-(void)setURLImage:(id)image callback:(id)callback isPrevImageInit:(BOOL)init;
-(void)setURLImage:(id)image callback:(id)callback;
-(void)setURLImage:(id)image;
-(id)URLImage;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface StickerShopDetailViewController : NLViewController <LineStickerPackageManagerDelegate, NLStickerDownloadDelegate, NLProfilePopupViewerDelegate, LineNetworkErrorViewDelegate, FriendsPickerViewControllerDelegate, LineNavigationControllerDelegate, UIScrollViewDelegate, UIGestureRecognizerDelegate> {
	UILabel* packageNameLabel_;
	UILabel* expiredDateLabel_;
	UILabel* lineLabel_;
	UIImageView* coinImage_;
	UILabel* myCoinLabel_;
	UILabel* myCoinAmountLabel_;
	UILabel* presentLabel_;
	UIButton* presentBtn_;
	UIButton* purchaseBtn_;
	UIButton* eventButton_;
	NSTimer* eventTaskCheckTimer_;
	UILabel* tabToPreviewLabel_;
	UIView* _animationStickerPreivewBackView;
	UIView* _animationStickerWhiteBlockBackView;
	NLAnimationImageView* _animationStickerPreviewImageView;
	BOOL isReceivedGiftProduct;
	BOOL _isGoingToDownload;
	BOOL _isClosing;
	NSString* chatMID;
	LinePaymentReservationResult* reservationResult;
	LineStickerPackage* myPackage;
	LineProduct* product;
	NLProfilePopupViewer* profilePopupViewer;
	UIScrollView* _bgScrollView;
	UIActivityIndicatorView* _mainImageAct;
	NLAnimationImageView* _packageIconImageView;
	UILabel* _descriptionLabel;
	UIImageView* _packageDescriptionImageView;
	UILabel* _packagePriceLabel;
	UIImageView* _stickerHeaderBG;
	UIActivityIndicatorView* _listImageAct;
	UILabel* _copyrightLabel;
	UIView* _eventExplanationView;
	TalkIndicatorView* _purchaseIndicator;
	UIActivityIndicatorView* _animationStickerLoadingIndicatorView;
	NSArray* _stickerIds;
	int _numOfTapsToCheckSticker;
}
@property(assign, nonatomic) BOOL isClosing;
@property(assign, nonatomic) BOOL isGoingToDownload;
@property(assign, nonatomic) int numOfTapsToCheckSticker;
@property(retain, nonatomic) NSArray* stickerIds;
@property(retain, nonatomic) UIView* animationStickerWhiteBlockBackView;
@property(retain, nonatomic) UIActivityIndicatorView* animationStickerLoadingIndicatorView;
@property(retain, nonatomic) UIView* animationStickerPreivewBackView;
@property(retain, nonatomic) NLAnimationImageView* animationStickerPreviewImageView;
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(retain, nonatomic) TalkIndicatorView* purchaseIndicator;
@property(retain, nonatomic) UIView* eventExplanationView;
@property(retain, nonatomic) UILabel* copyrightLabel;
@property(retain, nonatomic) UIActivityIndicatorView* listImageAct;
@property(retain, nonatomic) UIImageView* stickerHeaderBG;
@property(retain, nonatomic) UILabel* packagePriceLabel;
@property(retain, nonatomic) UIImageView* packageDescriptionImageView;
@property(retain, nonatomic) UILabel* descriptionLabel;
@property(retain, nonatomic) NLAnimationImageView* packageIconImageView;
@property(retain, nonatomic) UIActivityIndicatorView* mainImageAct;
@property(retain, nonatomic) UIScrollView* bgScrollView;
@property(assign, nonatomic) BOOL isReceivedGiftProduct;
@property(retain, nonatomic) LinePaymentReservationResult* reservationResult;
@property(retain, nonatomic) NSString* chatMID;
@property(retain, nonatomic) LineProduct* product;
@property(retain, nonatomic) LineStickerPackage* myPackage;
-(void).cxx_destruct;
-(void)friendsPickerViewController:(id)controller didFinishPickingItems:(id)items;
-(void)onTimer:(id)timer;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)moveToStickerShop;
-(void)updateProduct;
-(void)download:(id)download;
-(void)download;
-(void)purchaseProduct;
-(void)purchase:(id)purchase;
-(void)present:(id)present;
-(void)updateCoinStatus:(id)status;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)refreshButton;
-(void)onEventButtonTapped:(id)tapped;
-(void)stickerPackageDownloadSuccess:(id)success;
-(void)stickerPackage:(id)package movedFromIndex:(unsigned)index toIndex:(unsigned)index3;
-(void)stickerPackageRemoved:(id)removed;
-(void)stickerPackageDownloadFailed:(id)failed;
-(void)stickerPackageDownloadCanceled:(id)canceled;
-(void)stickerPackageChanged:(id)changed;
-(void)stickerPackageAddedToKeyboard:(id)keyboard;
-(void)stickerPackageDownloadStarted:(id)started;
-(id)packageIDString;
-(BOOL)shouldDismissViewController;
-(void)layoutProductDetails;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)forceFinishAnimationSticker;
-(void)onTappedDescriptionImage:(id)image;
-(void)playMainAnimationSticker;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)showEventView;
-(void)notifyUpdateAddFriends;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)initViews;
-(void)showNetworkError;
-(void)retry;
-(void)viewDidLoad;
-(id)initWithPresentedPackage:(id)presentedPackage;
-(id)initWithPackage:(id)package;
-(id)initWithPackage:(id)package isPresented:(BOOL)presented;
-(id)initWithProduct:(id)product;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LGUtility : NSObject {
}
+(void)convertVideoFile:(id)file toMPEG4File:(id)mpeg4File completionBlock:(id)block;
+(id)pluralizedStringWithKey:(id)key table:(id)table pluralValue:(float)value;
+(id)languageForPlurals:(id)plurals;
+(void)setGalleryBundleForLanguageCode:(id)languageCode bundleName:(id)name;
+(id)pluralsStringForKey:(id)key bundleName:(id)name number:(int)number;
+(id)localizedStringForKey:(id)key bundleName:(id)name;
+(id)currentViewController;
+(void)resumeLayer:(id)layer;
+(void)pauseLayer:(id)layer;
+(void)downloadLineCamera;
+(BOOL)canOpenLineCamera;
+(void)forceToRotateViewControllerInNavigationController:(id)navigationController;
+(float)statusBarHeight;
+(BOOL)isStatusBarOrientationLandscape;
+(int)imageOrientationWithRotateCount:(unsigned)rotateCount fromImageOrientation:(int)imageOrientation;
+(int)nextRotateOrientationFromOrientation:(int)orientation;
+(CGSize)cropImageSizeForDeviceScale;
+(id)fixImageOrientation:(id)orientation;
+(id)imageWithApplyFilterWithIndex:(unsigned)index image:(id)image;
+(id)fullResolutionEditedImage:(id)image forMaxSize:(int)maxSize rotateCount:(unsigned)count;
+(id)fullResolutionEditedImage:(id)image forMaxSize:(int)maxSize;
+(id)rotateImage:(id)image imageOrientation:(int)orientation;
+(id)resizeImage:(id)image forMaxSize:(int)maxSize;
+(id)scaleImage:(id)image toSize:(CGSize)size;
+(id)photoInfoDateFormatter:(BOOL)formatter;
+(id)dateFormatterWithDate:(id)date;
+(BOOL)isSafeFilterResponse:(id)response;
+(id)writableTempFilePath;
+(id)tempFilePath;
+(id)colorWithHex:(unsigned long)hex alpha:(float)alpha;
+(id)colorWithHex:(unsigned long)hex;
+(id)backButtonItemWithTarget:(id)target action:(SEL)action buttonTitle:(id)title bundleName:(id)name;
+(id)actionButtonItemWithText:(id)text target:(id)target action:(SEL)action bundleName:(id)name;
+(id)randomItemFromArray:(id)array;
+(id)stringFromNumber:(id)number;
+(id)image:(id)image stretchableImageWithLeftCapWidth:(int)leftCapWidth topCapHeight:(int)height;
+(id)imageNamedWithScale:(id)scale bundleName:(id)name;
+(id)imageWithRetinaNamed:(id)retinaNamed bundleName:(id)name;
+(BOOL)isIphone5MainScreen;
+(BOOL)isHighResolutionScreen;
+(BOOL)isIOS7EqualOrOver;
+(BOOL)isIOS6EqualOrOver;
+(BOOL)isIOS5EqualOrOver;
+(float)systemVersionAsFloat;
+(BOOL)needToIOS5AssetsLibraryNotificationWorkAround;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface MBURLConnectionNetworkService : NSObject <MBNetworkService> {
}
-(void)requestWithUrlRequest:(id)urlRequest requestInfo:(id)info response:(id)response;
-(BOOL)canLegyRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface StickerPresentBoxViewController : NLViewController <StickerShopSegmentControllerDelegate, UITableViewDataSource, UITableViewDelegate> {
	NSArray* data;
	NSMutableArray* presentsSent;
	NSMutableArray* presentsReceived;
	BOOL isLoadingSentData;
	BOOL isLoadingReceivedData;
	UITableView* tableView_;
	NSArray* newPresents_;
	NSMutableArray* newPresentObjects_;
	BOOL hasMoreSentData;
	BOOL hasMoreReceivedData;
	UILabel* noResultLabel_;
	int fetchOffset;
}
-(void).cxx_destruct;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)loadMore;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)changeSegment:(id)segment;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)tapRightButton;
-(void)tapLeftButton;
-(void)dealloc;
-(void)viewWillAppear:(BOOL)view;
-(void)loadReceivedPresentsFromIndex:(int)index;
-(void)refreshNewPresentMatchingDictionary;
-(void)loadSentPresentsFromIndex:(int)index;
-(void)viewDidLoad;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface NLStickerPurchaseHistoryViewController : NLTableViewController <LineCoinHistoryFooterDelegate> {
	LineProductList* purchaseHistoryList_;
	UIView* noResultView_;
	int fetchOffset;
	NSMutableArray* purchaseList;
}
@property(retain, nonatomic) NSMutableArray* purchaseList;
-(void).cxx_destruct;
-(void)restore;
-(void)footerEvent:(int)event;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)loadMore;
-(void)loadPurchaseHistory;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface MBNavigationBarTitleViewConfigure : NSObject {
}
+(id)buttonItemWithImage:(id)image highlightImage:(id)image2 target:(id)target action:(SEL)action;
+(id)buttonItemWithImage:(id)image target:(id)target action:(SEL)action;
+(id)titleButtonWithTarget:(id)target action:(SEL)action;
+(id)titleButtonWithString:(id)string homeImageView:(id)view target:(id)target action:(SEL)action;
+(id)titleViewWithString:(id)string image:(id)image;
+(id)titleViewWithString:(id)string styleName:(id)name;
+(id)titleLabelWithString:(id)string title2:(id)a2;
+(id)titleLabelWithString:(id)string;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupReabableFriendsViewController : MBViewController <UITableViewDelegate, UITableViewDataSource, MBTableViewPullDelegate, NSFetchedResultsControllerDelegate, MBMyhomeGroupManagerDelegate> {
	MBTableView* mTableView;
	BOOL mUpdateByUserAction;
	int mLastAlertTime;
	NSArray* mGids;
	NSArray* mGroups;
	NSMutableArray* mMembers;
	MBMyhomeGroupManager* mGroupManager;
	NSError* mError;
}
-(void).cxx_destruct;
-(void)myhomeGroupManager:(id)manager didFinishSyncWithError:(id)error;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)moveToMyHomeViewController:(id)myHomeViewController;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)confirmError:(id)error;
-(id)friendsSectionCellForTableView:(id)tableView indexPath:(id)path;
-(id)messageSectionCellForTableView:(id)tableView;
-(id)messageCellForTableView:(id)tableView;
-(id)emptyCellForTableView:(id)tableView;
-(BOOL)showMessageCell;
-(void)fetchData;
-(void)syncData;
-(void)setupNavigationBar;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithGids:(id)gids;
@end

__attribute__((visibility("hidden")))
@interface LGImageCropViewController : LGBaseViewController <UIGestureRecognizerDelegate> {
	UIView* mImageView;
	UIImageView* mPreviewImageView;
	UIImageView* croppedImageView;
	UIImageView* mLeftTopTouchArea;
	UIImageView* mRightTopTouchArea;
	UIImageView* mLeftBottomTouchArea;
	UIImageView* mRightBottomTouchArea;
	UIImage* mResizedImage;
	UIButton* mLeftTopArrowButton;
	UIButton* mRightTopArrowButton;
	UIButton* mLeftBottomArrowButton;
	UIButton* mRightBottomArrowButton;
	UIButton* mRatioButton;
	CALayer* mCropLayer;
	CALayer* mFrameLayer;
	CGSize mCropLayerSize;
	CGRect mFitImageFrame;
	CGPoint mPreviousTouchPoint;
	BOOL mIsMoving;
	BOOL mIsResizing;
	BOOL mIsMovingAreaTouched;
	BOOL mIsLeftTopAreaTouched;
	BOOL mIsRightTopAreaTouched;
	BOOL mIsLeftBottomAreaTouched;
	BOOL mIsRightBottomAreaTouched;
	BOOL isExpansion;
	CGSize mViewSize;
	unsigned mAssetSection;
	unsigned mAssetRow;
	id<LGImageCropDataSource> cropDataSource;
	UIImage* _mPreviewImage;
	NSString* _mOriginalImageTempPath;
}
@property(copy, nonatomic) NSString* mOriginalImageTempPath;
@property(retain, nonatomic) UIImage* mPreviewImage;
-(void).cxx_destruct;
-(void)saveOriginalImageToTempPath:(id)tempPath;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)handlePanGesture:(id)gesture;
-(void)moveCropArea:(CGPoint)area;
-(void)resizeCropArea:(CGPoint)area;
-(float)calculateMovement:(CGPoint)movement;
-(CGRect)calculateNewFrameWithMovement:(float)movement touchPoint:(CGPoint)point;
-(CGRect)adjustFrame:(CGRect)frame withMovement:(float)movement;
-(CGRect)reduceFrame:(CGRect)frame;
-(CGRect)expandFrame:(CGRect)frame;
-(BOOL)isPointInMovingTouchArea:(CGPoint)movingTouchArea;
-(BOOL)isPointInResizingTouchArea:(CGPoint)resizingTouchArea;
-(void)didSelectedSelectButton:(id)button;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(int)preferredStatusBarStyle;
-(void)viewDidUnload;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(id)initWithOriginalImage:(id)originalImage cropSize:(CGSize)size bundleName:(id)name imagePickerDelegate:(id)delegate;
-(id)initWithSection:(unsigned)section row:(unsigned)row cropDataSource:(id)source;
-(id)currentAsset;
-(id)editButtonOfMenuBarView;
-(void)updateCropTouchArea;
-(void)updateDimmedArea;
-(id)resizeCroppedResolutionImage:(id)image;
-(id)resizeCroppedImage:(id)image;
-(id)cropImage;
-(void)calculateCropLayerSize;
-(void)calculateFitImageFrame;
-(float)cropInverseRatioAsFloat;
-(float)cropRatioAsFloat;
-(void)reloadCurrentImage;
-(void)setupGestures;
-(void)setupDimmedArea;
-(void)setupCropArea;
-(void)setupImageView;
-(void)setupMenuBar;
@end

__attribute__((visibility("hidden")))
@interface LineTableViewSectionHeader : UIView {
	UILabel* titleLabel_;
	UIView* topBar_;
	BOOL tapCapable_;
	BOOL collapsed_;
	CALayer* topBar1pxLayer_;
	UIView* favoriteIconView_;
	UIImageView* arrowView_;
	id<LineTableViewSectionHeaderDelegate> delegate_;
	UIView* _bottomBar;
}
@property(assign, nonatomic) id<LineTableViewSectionHeaderDelegate> delegate;
@property(assign, nonatomic, getter=isTapCapable) BOOL tapCapable;
@property(assign, nonatomic, getter=isCollapsed) BOOL collapsed;
@property(readonly, assign, nonatomic) UIImageView* arrowView;
@property(readonly, assign, nonatomic) UIView* favoriteIconView;
@property(retain, nonatomic) UIView* bottomBar;
@property(retain, nonatomic) CALayer* topBar1pxLayer;
@property(readonly, assign, nonatomic) UIView* topBar;
+(id)headerViewWithText:(id)text;
-(void).cxx_destruct;
-(BOOL)render;
-(void)headerTapped;
-(void)layoutSubviews;
-(void)setTitleLabelText:(id)text;
-(id)initWithTitleLabelText:(id)titleLabelText;
-(id)initWithFrame:(CGRect)frame forTapCapable:(BOOL)tapCapable;
-(void)dealloc;
-(id)initForTapAction;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLShopPurchaseManager : NSObject <SKPaymentTransactionObserver> {
	dispatch_queue_s* purchaseQueue;
	id restoreCallback;
	NSArray* myProductIDList;
	NSMutableDictionary* purchasedProductDictionary;
	id _purchaseCallback;
	NSString* _productID;
	NSString* _billingItemID;
	LineShopPrice* _productPrice;
	int _priceTier;
	NSString* _shopID;
	NSString* _recipientMid;
	NSString* _message;
	int _messageTemplate;
}
@property(retain, nonatomic) NSMutableDictionary* purchasedProductDictionary;
@property(retain, nonatomic) NSArray* myProductIDList;
@property(copy, nonatomic) id restoreCallback;
@property(assign, nonatomic) int messageTemplate;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* recipientMid;
@property(retain, nonatomic) NSString* shopID;
@property(assign, nonatomic) int priceTier;
@property(retain, nonatomic) LineShopPrice* productPrice;
@property(retain, nonatomic) NSString* billingItemID;
@property(retain, nonatomic) NSString* productID;
@property(copy, nonatomic) id purchaseCallback;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)restoreSuccessWithProductIDs:(id)productIDs;
-(void)restoreFailedWithError:(id)error;
-(void)addPurchaseQueueWithThemeProductID:(id)themeProductID billingItemId:(id)anId priceTier:(int)tier shopPrice:(id)price free:(BOOL)free;
-(void)purchaseThemeShopProduct:(id)product;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)setupRestoreProductInfo;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
-(void)restoreWithCompletionBlock:(id)completionBlock;
-(void)purchaseCoinProduct;
-(void)buyFreeProduct;
-(void)reservation;
-(id)newPaymentOrder;
-(void)purchaseWithShopID:(id)shopID productID:(id)anId billingItemId:(id)anId3 priceTier:(int)tier shopPrice:(id)price completionBlock:(id)block;
-(void)presentTo:(id)to shopID:(id)anId productID:(id)anId3 billingItemId:(id)anId4 priceTier:(int)tier shopPrice:(id)price message:(id)message messageTemplate:(int)aTemplate completionBlock:(id)block;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LGFilterHelper : NSObject {
}
+(id)imageWithBitsForBHS:(char*)bhs size:(CGSize)size scale:(float)scale;
+(id)imageWithBits:(char*)bits size:(CGSize)size scale:(float)scale;
+(char*)bitmapFromImage:(id)image;
+(id)resizeImage:(id)image size:(CGSize)size;
@end

__attribute__((visibility("hidden")))
@interface GroupInviteTableViewCell : LineTableViewCell {
	UIImageView* plusIconView_;
	UILabel* inviteLabel_;
}
-(void).cxx_destruct;
-(BOOL)render;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)init_;
@end

__attribute__((visibility("hidden")))
@interface NLShakeResultsViewController : NLViewController <UITableViewDataSource, UITableViewDelegate, NLShakeShakeSessionDelegate> {
	NLShakeSession* _session;
	NSMutableArray* _checkedFriendsList;
	NLShakeSearchingView* _searchingView;
	UITableView* _tableView;
	UILabel* _headerLabel;
	NLToolbar* _toolbar;
	UIButton* _addButton;
	BOOL _viewAppeared;
	BOOL _postponedStatusIsSet;
	unsigned _postponedStatus;
}
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)closeMatch;
-(void)refreshMatchStatus;
-(void)acceptMatches;
-(void)shakeSessionResultsUpdated:(id)updated;
-(void)shakeSession:(id)session didChangeShakeStatus:(unsigned)status;
-(void)tappedToolbarButton;
-(void)refreshToolbarButtonLabel;
-(void)refreshToolbar;
-(void)refreshTableHeader;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)isLastIndexPath:(id)path;
-(void)setAccessoryViewForCell:(id)cell forContactStatus:(unsigned)contactStatus;
-(unsigned)statusForEntry:(id)entry;
-(BOOL)isEntryChecked:(id)checked;
-(short)userTypeAtIndexPath:(id)indexPath;
-(id)entryAtIndexPath:(id)indexPath;
-(id)arrayForSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)removeSession;
-(void)dealloc;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface VoiceTalkControl : UIView {
	UIButton* talkButton;
	UIButton* closeButton;
	UIView* buttonsView;
	UIImageView* _backgroundView;
	id<VoiceTalkControlDelegate> _delegate;
	int _interfaceOrientation;
}
@property(assign, nonatomic) int interfaceOrientation;
@property(assign, nonatomic) id<VoiceTalkControlDelegate> delegate;
@property(assign, nonatomic) UIImageView* backgroundView;
@property(assign, nonatomic) UIView* buttonsView;
@property(assign, nonatomic) UIButton* closeButton;
@property(assign, nonatomic) UIButton* talkButton;
+(id)viewFromNib;
-(void)applyStyleRulesetToTalkButtonWithHighlighted:(BOOL)highlighted;
-(void)touchUpInsideCallButton:(id)button forEvent:(id)event;
-(void)touchUpInsideCloseButton:(id)button;
-(void)setSendEnabled:(BOOL)enabled;
-(void)hideButtons;
-(void)showButtons;
-(void)layoutSubviews;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)customizeCloseButton;
-(void)customizeTalkButton;
-(void)customizeBackgroundView;
-(void)updateTalkButtonWithHighlighted:(BOOL)highlighted;
-(void)custimizeVOIPButtons;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface StickerPresentRecipientPickerViewController : FriendsPickerViewController {
	NSFetchedResultsController* _usersFetchedResultsController;
	NSFetchedResultsController* _defaultUsersFetchedResultsController;
	NSMutableSet* _usersInFirstSection;
}
@property(retain, nonatomic) NSMutableSet* usersInFirstSection;
@property(readonly, assign, nonatomic) NSFetchedResultsController* defaultUsersFetchedResultsController;
-(void).cxx_destruct;
-(id)usersFetchedResultsController;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)managedObjectAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(BOOL)isEmpty;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface StickerPresentConfirmViewController : NLViewController <LineNetworkErrorViewDelegate> {
	NSString* userId_;
	LineProduct* product_;
	LineStickerPackage* package_;
	UIImageView* coinImage_;
	UILabel* priceLabel_;
	UILabel* expirationDateLabel_;
	UILabel* myCoinLabel_;
	UILabel* myCoinAmountLabel_;
	StickerPresentTemplateChooseView* templateView_;
	UIButton* purchaseButton_;
	BOOL isGoingToOpenTalk;
}
@property(retain, nonatomic) LineProduct* product;
@property(retain, nonatomic) NSString* userId;
-(void).cxx_destruct;
-(void)retry;
-(void)updateCoinStatus:(id)status;
-(void)showNetworkError;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)onTapPurchasePresentButton:(id)button;
-(void)updateLayout;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface LineStickerManager : NSObject {
}
+(NSRange)_rangeFromArray:(id)array;
+(id)_indexSetFromArray:(id)array;
+(id)_remoteURLForStickerPackageMetadataWithVersion:(long long)version;
+(void)jibaku;
+(void)removeDelegate:(id)delegate;
+(void)addDelegate:(id)delegate;
+(id)delegates;
+(void)updateStickerShopNew;
+(void)updateCachedPackagesFromMetadataChanges:(id)metadataChanges;
+(void)updatePackageMetadataWithVersion:(long long)version;
+(void)updatePackageMetadataIfNecessary;
+(void)updateActivePurchasesWithProducts:(id)products;
+(void)_updateStickerShopNew:(long long)aNew event:(long long)event;
+(void)updateDefaultActivePackageIDsWithCompletionBlock:(id)completionBlock;
+(void)_updateActivePurchasesAndDefaultPackages;
+(void)updateActivePurchases;
+(void)updateActivePurchasesIfNecessary;
+(void)notifySticker:(int)sticker existsInPackageWithID:(long long)anId version:(int)version inContext:(id)context;
+(void)notifySticker:(int)sticker existsInPackageWithID:(long long)anId version:(int)version;
+(CGSize)imageSizeForSticker:(int)sticker;
+(BOOL)isSticonStickerPackageId:(long long)anId;
+(id)packageWithStickerID:(int)stickerID;
+(id)packageWithID:(long long)anId version:(int)version;
+(id)packageWithProduct:(id)product;
+(id)packageWithID:(long long)anId;
+(id)defaultActivePackages;
+(id)defaultActivePackageIDs;
+(void)deletePackage:(id)package atIndex:(unsigned)index;
+(void)deletePackage:(id)package;
+(void)movePackageAtIndex:(unsigned)index toIndex:(unsigned)index2;
+(void)addActivePackage:(id)package;
+(id)activePackages;
+(id)activePackageIDs;
+(void)initialize;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLMoviePlayerController : NLViewController {
	BOOL autoplayIfReady;
	BOOL canceled;
	BOOL _didEnterBackground;
	BOOL _viewDidAppear;
	BOOL _isHiddenShareButton;
	BOOL _isPlaying;
	MPMoviePlayerController* _movieController;
	UIButton* _playButton;
	UIView* _dimView;
	NLMovieURLLoader* _movieURLLoader;
	UIActivityIndicatorView* _spinner;
	UIImageView* _bottomBarView;
	UIButton* _saveButton;
	UIButton* _shareButton;
	NLObjectStorageOperation* _downloadOperation;
	TalkMessageObject* _messageObject;
	NSMutableSet* moviePlayerObservers;
	NSMutableSet* observers;
	UIActivityIndicatorView* _activityIndicator;
	NLSafeUnretainedObject* _weakSelf;
	NSString* _audioCategoryBackup;
}
@property(assign, nonatomic) BOOL isPlaying;
@property(assign, nonatomic) BOOL isHiddenShareButton;
@property(retain, nonatomic) NSString* audioCategoryBackup;
@property(retain, nonatomic) NLSafeUnretainedObject* weakSelf;
@property(retain, nonatomic) NSMutableSet* observers;
@property(retain, nonatomic) NSMutableSet* moviePlayerObservers;
@property(assign, nonatomic) BOOL canceled;
@property(assign, nonatomic) BOOL viewDidAppear;
@property(assign, nonatomic) BOOL didEnterBackground;
@property(assign, nonatomic) BOOL autoplayIfReady;
@property(retain, nonatomic) TalkMessageObject* messageObject;
@property(retain, nonatomic) NLObjectStorageOperation* downloadOperation;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UIButton* shareButton;
@property(retain, nonatomic) UIButton* saveButton;
@property(retain, nonatomic) UIImageView* bottomBarView;
@property(retain, nonatomic) UIActivityIndicatorView* spinner;
@property(retain, nonatomic) UIView* dimView;
@property(retain, nonatomic) UIButton* playButton;
@property(retain, nonatomic) NLMovieURLLoader* movieURLLoader;
@property(retain, nonatomic) MPMoviePlayerController* movieController;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)beforeClose;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)cancel;
-(void)stop;
-(void)playMediaAtURL:(id)url;
-(void)loadAndPlayMovieWithOBSParameters:(id)obsparameters;
-(void)loadAndPlayMovieAtURLOfTalkMessage:(id)talkMessage;
-(void)deactivateAudioSessionForMoviePlay;
-(void)activateAudioSessionForMoviePlay;
-(BOOL)isCallingByVOIP;
-(void)abortDownloading;
-(void)removeObservers;
-(void)addObservers;
-(void)playButtonPressed:(id)pressed;
-(void)share:(id)share;
-(void)save:(id)save;
-(void)close:(id)close;
-(void)prepareForSharingVideoWithFinishBlock:(id)finishBlock;
-(void)showSharingViewController:(id)controller;
-(void)saveDownloadedFileToAlbum:(id)album;
-(void)updateSaveButton;
-(void)showSaveButton:(BOOL)button;
-(void)showMenuBar;
-(void)showSpinner;
-(void)removeMovieNotificationObservers;
-(void)addMovieNotificationObservers;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MBSharePostActivity : MBCompositeActivity {
}
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
@end

__attribute__((visibility("hidden")))
@interface NLMovieURLLoader : NSObject {
	BOOL _isLoading;
	NSString* _messageID;
	id _completion;
	NSURL* _downloadURL;
}
@property(copy, nonatomic) id completion;
@property(assign, nonatomic) BOOL isLoading;
@property(retain, nonatomic) NSURL* downloadURL;
@property(retain, nonatomic) NSString* messageID;
-(void).cxx_destruct;
-(void)finishLoadingMovieWithURL:(id)url;
-(void)informLoadingFailure:(id)failure;
-(void)__dettached__update_expired:(id)expired;
-(void)loadMovieWithOBSParameters:(id)obsparameters;
-(void)validateAndLoadMovieWithOBSParameters:(id)obsparameters;
-(void)loadMovieAtURL:(id)url withOBSParameters:(id)obsparameters completion:(id)completion;
-(void)loadMovieAtURL:(id)url withMessageID:(id)messageID knownDownloadURL:(id)url3 completion:(id)completion;
-(void)findAssetForURL:(id)url resultBlock:(id)block failureBlock:(id)block3;
-(void)queryAssetIsExistsAtURL:(id)url resultBlock:(id)block errorBlock:(id)block3;
@end

__attribute__((visibility("hidden")))
@interface StickerPresentTemplateChooseView : UIView {
	UIButton* buttons[4];
	UIImageView* selectMark;
	int _templateId;
}
@property(assign, nonatomic) int templateId;
-(void).cxx_destruct;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)updateDefaultTemplate:(int)aTemplate;
-(id)initWithDefaultId:(int)defaultId shopID:(id)anId;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLChannel : NSObject <NSCoding> {
	BOOL isLcsAllApiUsable_;
	NSString* channelID_;
	NSString* name_;
	NSString* descriptionText_;
	LineChannelProvider* provider_;
	NSURL* entryURL_;
	NSString* accessToken_;
	NSString* obsToken_;
	NSString* nonEncryptedToken_;
	NSDate* expiredDate_;
	int publicType_;
	NSString* iconImageURL_;
	NSString* iconThumbnailURL_;
	NSDate* approvedAt_;
	NSArray* permissionTexts_;
	NSString* titleBarType_;
	NSArray* configurations_;
	NSSet* allowedPermissions_;
}
@property(retain, nonatomic) NSSet* allowedPermissions;
@property(assign, nonatomic) BOOL isLcsAllApiUsable;
@property(retain, nonatomic) NSArray* configurations;
@property(retain, nonatomic) NSString* titleBarType;
@property(retain, nonatomic) NSArray* permissionTexts;
@property(retain, nonatomic) NSDate* approvedAt;
@property(retain, nonatomic) NSString* iconThumbnailURL;
@property(retain, nonatomic) NSString* iconImageURL;
@property(assign, nonatomic) int publicType;
@property(retain, nonatomic) NSDate* expiredDate;
@property(retain, nonatomic) NSString* nonEncryptedToken;
@property(retain, nonatomic) NSString* obsToken;
@property(retain, nonatomic) NSString* accessToken;
@property(retain, nonatomic) NSURL* entryURL;
@property(retain, nonatomic) LineChannelProvider* provider;
@property(retain, nonatomic) NSString* descriptionText;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* channelID;
+(id)channelWithID:(id)anId name:(id)name;
+(BOOL)isAscendentBySortOrder;
-(void).cxx_destruct;
-(BOOL)canSendToNotificationCenter;
-(BOOL)canSendPushNotificationToUser;
-(BOOL)canSendMessageToUser;
-(void)resetTokens;
-(void)setChannelCookies;
-(BOOL)isHiddenChannel;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface ChannelGatewayService : NSObject {
	NSMutableDictionary* channels_;
	NSMutableSet* whitelist_;
	NSNumber* channelLocalRevision_;
	NSString* currentLanguage_;
	NSDate* expiredTime_;
	NSSet* defaultChannelIDs_;
	dispatch_queue_s* syncQueue_;
}
+(void)deleteAllChannelsCookies;
+(id)myhomeWebAppChannelID;
+(id)LineAtChannelID;
+(id)currentLocaleString;
+(id)sharedService;
-(void).cxx_destruct;
-(BOOL)updateUnapprovedChannelSettingWithChannelSetting:(id)channelSetting withCompleteBlock:(id)completeBlock;
-(BOOL)unapprovedChannelSettingWithCompleteBlock:(id)completeBlock;
-(BOOL)updateNotificationSettings:(id)settings withCompleteBlock:(id)completeBlock;
-(BOOL)notificationSettingsWithChannel:(id)channel completeBlock:(id)block;
-(BOOL)notificationSettingsWithCompleteBlock:(id)completeBlock;
-(void)notificationBadgeCountWithLocalRev:(long long)localRev completionBlock:(id)block;
-(void)fetchNotificationItemsWithLocalRev:(long long)localRev completionBlock:(id)block;
-(id)lineAtChannel;
-(id)lineAlbumChannel;
-(id)groupboardChannel;
-(id)myhomeChannel;
-(id)timelineChannel;
-(void)flushCurrentChannelCache;
-(id)channelWhiteList;
-(BOOL)revokeChannel:(id)channel withCompleteBlock:(id)completeBlock;
-(BOOL)issueRequestTokenWithChannelIDString:(id)channelIDString otpID:(id)anId sourceApplication:(id)application returnUrl:(id)url completeBlock:(id)block;
-(BOOL)approveChannelAndIssueTokenWithChannel:(id)channel withCompleteBlock:(id)completeBlock;
-(BOOL)issueChannelToken:(id)token withCompleteBlock:(id)completeBlock;
-(void)getChannelInfoForChannelIDString:(id)channelIDString withWillRequestBlock:(id)with completeBlock:(id)block;
-(id)cachedChannelForChannelIDString:(id)channelIDString;
-(void)updateApprovedChannelsWithCompleteBlock:(id)completeBlock;
-(id)approvedChannels;
-(void)refreshLineAlbumChannelWithCompleteBlock:(id)completeBlock;
-(void)refreshGroupBoardChannelWithCompleteBlock:(id)completeBlock;
-(void)ensureIssuedChannelTokenWithChannelID:(id)channelID completeBlock:(id)block;
-(void)getUnmanagedChannelsWithCompleteBlock:(id)completeBlock;
-(void)synchronizeIfNeed;
-(void)synchronize;
-(id)lineAlbumChannelID;
-(id)groupboardChannelID;
-(id)myhomeChannelID;
-(id)timelineChannelID;
-(void)reserveCoinsWithRequest:(id)request completionBlock:(id)block;
-(void)getFriendChannelMatricesWithChannelIds:(id)channelIds completeBlock:(id)block;
-(void)requestChannelNotificationSettingsWithChannelID:(id)channelID completeBlock:(id)block;
-(void)requestToUpdateChannelNotificationSettings:(id)updateChannelNotificationSettings withCompleteBlock:(id)completeBlock;
-(void)requestChannelNotificationSettingsWithCompleteBlock:(id)completeBlock;
-(void)requestRequestTokenWithID:(id)anId otpID:(id)anId2 sourceApplication:(id)application returnURL:(id)url completeBlock:(id)block;
-(void)requestRevokeChannelWithChannelID:(id)channelID completeBlock:(id)block;
-(void)requestApproveChannelAndIssueChannelTokenWithChannelID:(id)channelID completeBlock:(id)block;
-(void)requestIssueChannelTokenWithID:(id)anId completeBlock:(id)block;
-(void)setIssuedChannelTokenToChannel:(id)channel withIssuedToken:(id)issuedToken;
-(void)requestSyncChannelDataWithLastSynced:(long long)lastSynced withCompleteBlock:(id)completeBlock;
-(void)requestApprovedChannelsWithCompleteBlock:(id)completeBlock;
-(void)requestChannelInfoWithChannel:(id)channel completeBlock:(id)block;
-(void)requestUnmanagedChannelsWithCompleteBlock:(id)completeBlock;
-(void)processWhitelistDomains:(id)domains;
-(void)processApprovedChannels:(id)channels;
-(void)processChannels:(id)channels;
-(void)processChannelInfo:(id)info;
-(void)updateChannelFromChannelInfo:(id)channelInfo toChannel:(id)channel;
-(BOOL)isEmptyChannelData;
-(id)serviceResponseWithResultBlock:(id)resultBlock;
-(id)serviceResponseWithResultProcessor:(id)resultProcessor completeBlock:(id)block;
-(id)channelErrorFromError:(id)error;
-(int)errorCodeFromLineChannelServiceError:(id)lineChannelServiceError;
-(void)setWhitelist:(id)whitelist;
-(id)mutableWhitelist;
-(void)setSyncedDataExpiredTime:(long long)time;
-(void)setLastSyncedChannelRevision:(long long)revision;
-(id)publicChannelsWithApprovedOnly:(BOOL)approvedOnly;
-(id)mutableChannels;
-(void)removeAllChannels;
-(void)removeChannel:(id)channel;
-(id)channelFromChannelID:(id)channelID;
-(void)setChannel:(id)channel forChannelID:(id)channelID;
-(void)loadChannelCache;
-(void)saveChannelCache;
-(void)onAppWillTerminate:(id)onApp;
-(void)onAppDidEnterBackground:(id)onApp;
-(id)cacheFileURL;
-(void)initializeDefaultChannels;
-(void)removeObservingEvents;
-(void)addObservingEvents;
-(void)initializeCommunicationEnvironment;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LinePurchaseManager : NSObject {
	BOOL IAPEnable;
	BOOL enabledSelfCoin;
	BOOL enabledPresent;
	id callback;
	NSString* userMid;
	NSString* productID;
	NSString* currency;
	NSString* price;
	NSString* confirmURL;
	NSString* orderID;
}
@property(copy, nonatomic) id callback;
@property(retain, nonatomic) NSString* confirmURL;
@property(retain, nonatomic) NSString* orderID;
@property(retain, nonatomic) NSString* price;
@property(retain, nonatomic) NSString* currency;
@property(retain, nonatomic) NSString* userMid;
@property(retain, nonatomic) NSString* productID;
@property(assign, nonatomic) BOOL enabledPresent;
@property(assign, nonatomic) BOOL enabledSelfCoin;
@property(assign, nonatomic) BOOL enabledIAP;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(BOOL)purchaseManager:(id)manager shouldVerifyReceiptWithTransaction:(id)transaction;
-(BOOL)purchaseManager:(id)manager shouldReserveWithTransaction:(id)transaction;
-(void)purchaseManager:(id)manager didFinishTransaction:(id)transaction error:(id)error;
-(void)resetPurchaseInfo;
-(void)purchaseProductWithUserMid:(id)userMid productID:(id)anId currency:(id)currency price:(id)price confirmURL:(id)url orderID:(id)anId6 completionBlock:(id)block;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineStickerPackage : NSObject <LineProductPackageForKeyboard> {
	LineFileDownload* _download;
	NSMutableArray* _keyboardOrder;
	BOOL _hasImagesForDisplayScale;
	BOOL _defaultAnimationFlag;
	BOOL _defaultSoundFlag;
	NSDictionary* _metadataCache;
	NSArray* _purchaseDataCache;
	NSString* _newFromMID;
	BOOL _unzipping;
	unsigned _latestVersion;
	unsigned _downloadedVersion;
	unsigned _fileStore;
	NSURL* _fileURL;
	LineProduct* _lineProduct;
	long long _ID;
}
@property(retain, nonatomic) LineProduct* lineProduct;
@property(readonly, assign, nonatomic) NSString* author;
@property(readonly, assign, nonatomic) BOOL onSale;
@property(readonly, assign, nonatomic) NSString* name;
@property(readonly, assign, nonatomic) NSArray* keyboardOrder;
@property(readonly, assign, nonatomic) int stickerOptions;
@property(readonly, assign, nonatomic) BOOL hasSound;
@property(readonly, assign, nonatomic) BOOL hasAnimation;
@property(assign, nonatomic) BOOL unzipping;
@property(readonly, assign, nonatomic) BOOL downloading;
@property(retain, nonatomic) NSString* fromMid;
@property(readonly, assign, nonatomic) long long validUntil;
@property(assign, nonatomic) unsigned purchaseStatus;
@property(readonly, assign, nonatomic, getter=isDownloaded) BOOL downloaded;
@property(readonly, assign, nonatomic) NSURL* fileURL;
@property(readonly, assign, nonatomic) unsigned fileStore;
@property(readonly, assign, nonatomic) unsigned downloadedVersion;
@property(readonly, assign, nonatomic) unsigned latestVersion;
@property(readonly, assign, nonatomic) BOOL defaultPackage;
@property(readonly, assign, nonatomic) NSNumber* IDNumber;
@property(readonly, assign, nonatomic) NSString* IDString;
@property(readonly, assign, nonatomic) long long ID;
+(id)_imageNameForSticker:(unsigned)sticker type:(unsigned)type;
+(id)_imageScaleSuffix;
+(void)downloadBannerImageWithBannerSeq:(unsigned)bannerSeq language:(id)language completionBlock:(id)block;
-(void).cxx_destruct;
-(unsigned)keyboardActionStatus;
-(void)downloadSelectedTabImageCompletionBlock:(id)block;
-(void)downloadTabImageCompletionBlock:(id)block;
-(BOOL)isReadyToUse;
-(BOOL)downloaded;
-(id)_localizedObject:(id)object;
-(id)_filenameForVersion:(unsigned)version type:(unsigned)type;
-(id)_filenameForVersion:(unsigned)version;
-(id)_bannerURLWithID:(unsigned)anId;
-(id)_remoteURLForVersion:(unsigned)version;
-(id)_remoteURLForStickerMainAnimationWithVersion:(int)version;
-(id)_remoteURLForStickerMainSoundWithVersion:(int)version;
-(id)_remoteURLForStickerAnimationName:(id)stickerAnimationName version:(int)version;
-(id)_remoteURLForStickerSoundName:(id)stickerSoundName version:(int)version;
-(id)_remoteURLForStickerImageName:(id)stickerImageName version:(int)version;
-(id)_remoteURLForStickerImageName:(id)stickerImageName;
-(id)_remoteURLForImageType:(unsigned)imageType;
-(id)_remoteURLForFileType:(unsigned)fileType;
-(unsigned)_fileStoreForImageType:(unsigned)imageType;
-(id)_imageNameForType:(unsigned)type;
-(void)_savePurchaseData:(id)data;
-(id)_purchaseData;
-(id)metadata;
-(void)clearDownload;
-(BOOL)deleteFromDisk;
-(void)downloadMetadataWithCompletion:(id)completion;
-(void)downloadMetadata;
-(id)download;
-(void)setDownload:(id)download;
-(void)downloadForCommonAnimationAndSoundSticker:(unsigned)commonAnimationAndSoundSticker isMainSticker:(BOOL)sticker completionBlock:(id)block;
-(void)downloadForMainAnimationAndSoundStickerWithCompletionBlock:(id)completionBlock;
-(void)downloadForAnimationAndSoundSticker:(unsigned)animationAndSoundSticker completionBlock:(id)block;
-(void)downloadForAnimationSticker:(unsigned)animationSticker type:(unsigned)type version:(unsigned)version completionBlock:(id)block;
-(void)downloadForAnimationSticker:(unsigned)animationSticker type:(unsigned)type completionBlock:(id)block;
-(id)urlForAnimationSticker:(unsigned)animationSticker type:(unsigned)type;
-(void)setDefaultAnimationFlag:(BOOL)flag soundFlag:(BOOL)flag2;
-(void)downloadImageForSticker:(int)sticker type:(unsigned)type version:(int)version completionBlock:(id)block;
-(void)downloadImageForSticker:(int)sticker type:(unsigned)type completionBlock:(id)block;
-(id)imageForSticker:(int)sticker type:(unsigned)type;
-(unsigned)currentVersion;
-(CGSize)imageSizeForSticker:(int)sticker;
-(void)downloadImageForType:(unsigned)type version:(unsigned)version completionBlock:(id)block;
-(void)downloadImageForType:(unsigned)type completionBlock:(id)block;
-(void)applicationDidReceiveMemoryWarning;
-(BOOL)isDownloadableMoon;
-(id)makeKeyboardOrder;
-(unsigned)actionStatusWithPurchaseStatus:(unsigned)purchaseStatus;
-(unsigned)actionStatus;
-(BOOL)setPurchaseStatus:(unsigned)status validUntil:(long long)until fromMid:(id)mid autosave:(BOOL)autosave;
-(BOOL)setPurchaseStatus:(unsigned)status validUntil:(long long)until autosave:(BOOL)autosave;
-(BOOL)setPurchaseStatus:(unsigned)status autosave:(BOOL)autosave;
-(void)setLatestVersion:(unsigned)version;
-(BOOL)initNewPackageDestinationURL:(id)url versionDownloading:(unsigned)downloading alreadyDownloadedOrUpgrading:(BOOL)upgrading;
-(id)initWithFileURL:(id)fileURL inStore:(unsigned)store;
-(id)initWithID:(long long)anId version:(unsigned)version inStore:(unsigned)store;
-(id)initWithID:(long long)anId version:(unsigned)version;
@end

__attribute__((visibility("hidden")))
@interface MBRecallFriendRecommendCell : UITableViewCell {
	NSString* mid;
	NSAttributedString* mFriendName;
	BOOL isShowBuddyIcon;
	TalkUserObject* user;
}
@property(retain, nonatomic) TalkUserObject* user;
@property(assign, nonatomic) BOOL isShowBuddyIcon;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setFriendName:(id)name;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLLEGYStatusBarManager : NSObject {
	BOOL _LEGYStatusBarDisabled;
	BOOL _monitoring;
	unsigned _connectionStatus;
	NLSafeUnretainedObject* _safeSelf;
	id _sessionStatusChangedBlock;
}
@property(assign, nonatomic, getter=isMonitoring) BOOL monitoring;
@property(copy, nonatomic) id sessionStatusChangedBlock;
@property(retain, nonatomic) NLSafeUnretainedObject* safeSelf;
@property(assign, nonatomic, getter=isLEGYStatusBarDisabled) BOOL LEGYStatusBarDisabled;
@property(assign, nonatomic) unsigned connectionStatus;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)didReceiveReachabilityChangedNotification:(id)notification;
-(void)didReceiveApplicationWillEnterForegroundNotification:(id)didReceiveApplication;
-(void)didReceiveApplicationDidEnterBackgroundNotification:(id)didReceiveApplication;
-(void)updateLEGYStatusBar:(BOOL)bar;
-(void)updateConnectionStatusToDisconnectedIfNeeded;
-(void)unregisterCallback;
-(void)registerCallback;
-(void)stopMonitoring;
-(void)startMonitoring;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineFileManager : NSObject {
}
+(id)_imageAtFileURL:(id)fileURL;
+(id)_downloadFileAtURL:(id)url to:(id)to completionBlock:(id)block;
+(id)fileURLForStoreType:(unsigned)storeType;
+(id)downloadAnimationStickerNamed:(id)named atURL:(id)url inStore:(id)store ofType:(unsigned)type completionBlock:(id)block;
+(id)downloadAnimationStickerNamed:(id)named atURL:(id)url inStore:(unsigned)store substore:(id)substore completionBlock:(id)block;
+(id)downloadAnimationStickerNamed:(id)named atURL:(id)url inStore:(unsigned)store completionBlock:(id)block;
+(id)downloadImageNamed:(id)named atURL:(id)url inStore:(id)store ofType:(unsigned)type completionBlock:(id)block;
+(id)downloadImageNamed:(id)named atURL:(id)url inStore:(unsigned)store substore:(id)substore completionBlock:(id)block;
+(id)downloadImageNamed:(id)named atURL:(id)url inStore:(unsigned)store completionBlock:(id)block;
+(id)downloadFileNamed:(id)named atURL:(id)url inStore:(id)store ofType:(unsigned)type completionBlock:(id)block;
+(id)downloadFileNamed:(id)named atURL:(id)url inStore:(unsigned)store substore:(id)substore completionBlock:(id)block;
+(id)downloadFileNamed:(id)named atURL:(id)url inStore:(unsigned)store completionBlock:(id)block;
+(unsigned)storeType:(unsigned)type;
+(id)storeName:(unsigned)name;
+(id)imageNamed:(id)named inStore:(id)store ofType:(unsigned)type;
+(id)imageNamed:(id)named inStore:(unsigned)store substore:(id)substore;
+(id)imageNamed:(id)named inStore:(unsigned)store;
+(id)dataForFileNamed:(id)fileNamed inStore:(id)store ofType:(unsigned)type options:(unsigned)options;
+(id)dataForFileNamed:(id)fileNamed inStore:(unsigned)store options:(unsigned)options;
+(id)dataForFileNamed:(id)fileNamed inStore:(unsigned)store substore:(id)substore;
+(id)dataForFileNamed:(id)fileNamed inStore:(unsigned)store;
+(id)fileURLForFileNamed:(id)fileNamed inStore:(id)store ofType:(unsigned)type;
+(id)fileURLForFileNamed:(id)fileNamed inStore:(unsigned)store substore:(id)substore;
+(id)fileURLForFileNamed:(id)fileNamed inStore:(unsigned)store;
+(id)fileURLForStore:(unsigned)store substore:(id)substore;
+(id)fileURLForStore:(id)store ofType:(unsigned)type;
+(id)fileURLForStore:(unsigned)store;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface MBPostViewControllerActions : NSObject {
	MBPostViewController* mController;
}
+(id)actionsWithContoller:(id)contoller;
-(BOOL)allowLinkUserProfileWithMid:(id)mid ownerMid:(id)mid2 sourceType:(id)type currentSourceType:(int)type4 linkType:(int)type5;
-(id)createNMAttributedLabelActionLinkLongTappedWithSourceType:(id)sourceType ownerMid:(id)mid activity:(id)activity currentSourceType:(int)type;
-(id)createNMAttributedLabelActionLinkTappedWithSourceType:(id)sourceType ownerMid:(id)mid activity:(id)activity currentSourceType:(int)type;
-(id)createReadableFriendsAction;
-(id)createViewUserProfileActionWithSourceType:(id)sourceType activity:(id)activity currentSourceType:(int)type;
-(id)initWithController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface LACacheLastID : NSObject {
	NSDictionary* albumLastDict;
	NSDictionary* photoLastDicts;
	NSString* albumTimestamp;
	NSDictionary* photoTimestamps;
	NSString* albumPollingTimestamp;
	NSDictionary* photoPollingTimestamps;
	NSDictionary* photoDownloadTimestamps;
}
@property(retain, nonatomic) NSDictionary* photoDownloadTimestamps;
@property(retain, nonatomic) NSDictionary* photoTimestamps;
@property(retain, nonatomic) NSString* albumTimestamp;
@property(retain, nonatomic) NSDictionary* photoLastDicts;
@property(retain, nonatomic) NSDictionary* albumLastDict;
@property(retain, nonatomic) NSDictionary* photoPollingTimestamps;
@property(retain, nonatomic) NSString* albumPollingTimestamp;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBActivityContentViewMap : NSObject {
}
+(BOOL)hasShareInfoWithActivity:(id)activity;
+(BOOL)hasLocationWithActivity:(id)activity;
+(BOOL)hasPlainTextWithActivity:(id)activity;
+(id)cellIdentifierWithMergeEndType:(int)mergeEndType;
+(id)cellIdentifierWithActivity:(id)activity;
-(void)callBackAddCellView:(int)view contentView:(id)view2;
-(void)addCellShareInfoView:(int)view array:(id)array activity:(id)activity;
-(void)addCellLocationView:(int)view array:(id)array activity:(id)activity;
-(void)addCellPlainTextView:(int)view array:(id)array activity:(id)activity;
-(void)addCellView:(int)view array:(id)array contentView:(id)view3;
-(id)mergeContentsForMergeEndType:(int)mergeEndType;
-(id)contentsForPostViewType:(int)postViewType activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface LAMessageView : UIView {
	UILabel* _titleLabel;
	UILabel* _detailLabel;
	NSMutableArray* _buttons;
	float _contentHeight;
	int _lastOrientation;
}
-(void).cxx_destruct;
-(float)topMarginOfButton;
-(float)topMarginOfDetailLabel;
-(void)resizeLabels;
-(float)getContentHeight;
-(void)layoutSubviews;
-(void)addButton:(id)button type:(unsigned)type actionBlock:(id)block;
-(void)addButton:(id)button actionBlock:(id)block;
-(void)setTitle:(id)title detail:(id)detail;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBLikeLayerView : UIImageView <MBLikeListManagerDelegate> {
	UIView* mLayerView;
	UIButton* mLikeButton;
	MBActivity* mActivity;
	id<MBLikeLayerViewDelegate> mDelegate;
	MBLikeListManager* mLikeManager;
}
@property(assign, nonatomic) id<MBLikeLayerViewDelegate> delegate;
@property(retain, nonatomic) UIButton* likeButton;
@property(retain, nonatomic) MBActivity* activity;
+(id)likeLayerViewWithDelegate:(id)delegate;
-(void).cxx_destruct;
-(void)likeListManager:(id)manager didFisnishFetchLikeTypeWithData:(id)data error:(id)error;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)showInView:(id)view;
-(void)show:(id)show;
-(void)show;
-(void)hide;
-(void)removeLayer;
-(void)setLocationInMainView:(id)mainView mainView:(id)view post:(id)post;
-(void)setLocationLayerView:(id)view mainView:(id)view2 post:(id)post;
-(void)setLocationLayerView:(id)view pointRect:(CGRect)rect mainView:(id)view3 post:(id)post;
-(void)setLocationCommentLayerView:(id)view post:(id)post;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(void)setupActionBlock;
-(void)updateButtonWithType:(int)type likeType:(id)type2;
-(void)updateButtonWithType:(int)type;
-(void)dismissLikeButtonHighlighted;
@end

__attribute__((visibility("hidden")))
@interface NLLineCallSpotService : NSObject {
}
+(id)lookupByPhoneNumberWithRegion:(id)region phoneNumber:(id)number completionBlock:(id)block;
+(id)lookupNearbyWithLocation:(id)location spotCategory:(int)category query:(id)query completionBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface LineFileDownload : NSObject {
	NSURL* remoteURL;
	NSURL* originalURL;
	NSMutableSet* localFileURLs;
	NLObjectStorageOperation* operation;
	NSURL* tempFileURL;
	NSMutableData* _dataDownloaded;
	NSMutableArray* progressBlocks;
	long long downloadedByteCount;
	long long expectedByteCount;
	id verificationBlock;
	NSMutableArray* completionBlocks;
	unsigned tryCount;
	unsigned retryCount;
	MessageUBALoggerMessageType* _ubaLoggerMessageType;
	int _statusCode;
}
@property(readonly, assign, nonatomic) NSURL* originalRemoteURL;
@property(readonly, assign, nonatomic) NSURL* remoteURL;
@property(assign, nonatomic) int statusCode;
@property(retain, nonatomic) MessageUBALoggerMessageType* ubaLoggerMessageType;
@property(assign, nonatomic) unsigned retryCount;
@property(copy, nonatomic) id verificationBlock;
@property(readonly, assign, nonatomic) float progress;
@property(readonly, assign, nonatomic) long long expectedByteCount;
@property(readonly, assign, nonatomic) long long downloadedByteCount;
+(id)downloadForURL:(id)url;
+(void)initialize;
-(void).cxx_destruct;
-(void)_removeCachedURLInfo;
-(void)_resetTryCount;
-(BOOL)_needRetry;
-(void)_fireProgressBlocks;
-(void)_finish;
-(void)operationDidReceiveDataWithSize:(unsigned long long)operation total:(unsigned long long)total;
-(void)operationDidFailed;
-(void)operationDidFinishLoading;
-(void)finishDownloadingWithDestinationURL:(id)destinationURL;
-(id)dataDownloaded;
-(void)downloadTo:(id)to completionBlock:(id)block;
-(void)_cancel:(unsigned)cancel;
-(void)cancel;
-(void)download;
-(id)buildTempFileURL;
-(void)removeAllProgressBlocks;
-(void)removeProgressBlock:(id)block;
-(void)addProgressBlock:(id)block;
-(void)removeAllCompletionBlocks;
-(void)removeCompletionBlock:(id)block;
-(void)addCompletionBlock:(id)block;
-(void)addDestinationFileURL:(id)url;
-(BOOL)isConnectionAlive;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface ShopService : NSObject {
}
+(void)getTotalBalanceWithAppStoreCode:(int)appStoreCode completionBlock:(id)block;
+(void)getCoinUseAndRefundHistoryWithRange:(NSRange)range startDate:(id)date period:(int)period completionBlock:(id)block;
+(void)getCoinPurchaseHistoryWithRange:(NSRange)range startDate:(id)date period:(int)period completionBlock:(id)block;
+(void)reserveCoinPurchaseWithRequest:(id)request completionBlock:(id)block;
+(void)getCoinProductsWithAppStoreWithCompletionBlock:(id)completionBlock;
+(void)eventStickerPackagesWithRange:(NSRange)range completionBlock:(id)block;
+(void)newlyReleasedStickerPackagesWithRange:(NSRange)range completionBlock:(id)block;
+(void)popularStickerPackagesWithRange:(NSRange)range completionBlock:(id)block;
+(void)sentPresentsWithRange:(NSRange)range completionBlock:(id)block;
+(void)receivedPresentsWithRange:(NSRange)range completionBlock:(id)block;
+(void)shopUpdatesCompletionBlock:(id)block;
+(void)purchaseHistoryWithRange:(NSRange)range completionBlock:(id)block;
+(void)defaultProductsWithCompletionBlock:(id)completionBlock;
+(void)activePurchasesWithRange:(NSRange)range completionBlock:(id)block;
+(void)versionsOfActivePurchasesWithRange:(NSRange)range completionBlock:(id)block;
+(id)searchProductsWithStart:(long long)start size:(int)size language:(id)language country:(id)country query:(id)query completionBlock:(id)block;
+(void)getProductsForCategoryWithStart:(long long)start size:(int)size language:(id)language country:(id)country category:(long long)category completionBlock:(id)block;
+(void)getProductCategoriesWithLanguage:(id)language country:(id)country completionBlock:(id)block;
+(void)productsWithProductIDs:(id)productIDs completionBlock:(id)block;
+(void)productForPackageID:(long long)packageID completionBlock:(id)block;
+(void)notifyDownloadedPackageWithID:(long long)anId completionBlock:(id)block;
+(void)reservePayment:(id)payment completionBlock:(id)block;
+(void)buyCoinProduct:(id)product completionBlock:(id)block;
+(void)buyMustbuyProduct:(id)product for:(id)aFor serialNumber:(id)number messageTemplate:(int)aTemplate packageId:(long long)anId completionBlock:(id)block;
+(void)buyFreeProduct:(id)product for:(id)aFor messageTemplate:(int)aTemplate packageId:(long long)anId completionBlock:(id)block;
+(void)canSendStickerPackage:(long long)package to:(id)to completionBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface NLCallCreditViewController : NLCallSettingCommonSubViewController {
	UILabel* _labelTotalValue;
	UILabel* _labelNoExpireation;
	UILabel* _labelNoExpireationValue;
	UILabel* _labelExpireation;
	UILabel* _labelExpireationValue;
	UIView* _underLine;
	UIView* _underLine2;
	UIView* _underLineTotal;
	LinePaidCallBalance* _creditBalanceInfo;
}
@property(retain, nonatomic) LinePaidCallBalance* creditBalanceInfo;
@property(assign, nonatomic) UIView* underLineTotal;
@property(assign, nonatomic) UIView* underLine2;
@property(assign, nonatomic) UIView* underLine;
@property(assign, nonatomic) UILabel* labelExpireationValue;
@property(assign, nonatomic) UILabel* labelExpireation;
@property(assign, nonatomic) UILabel* labelNoExpireationValue;
@property(assign, nonatomic) UILabel* labelNoExpireation;
@property(retain, nonatomic) UILabel* labelTotalValue;
-(void).cxx_destruct;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MBLocation : NSObject <NSCoding> {
	NSString* mName;
	XXStruct_zYrK5D mCoordinate;
}
@property(readonly, assign, nonatomic) XXStruct_zYrK5D coordinate;
@property(readonly, assign, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)initWithLocationInfo:(id)locationInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLMessageThumbnailUpdater : NSObject {
}
+(BOOL)needDownloadThumbnailWithMsgID:(id)msgID;
+(void)updateThumbnailWithMid:(id)mid;
+(void)updateThumbnailUsingOperation:(id)operation;
@end

__attribute__((visibility("hidden")))
@interface MessageImagePickerDelegate : NSObject <LGImagePickerDelegate, LVSnapMoviePickerControllerDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, UIAlertViewDelegate> {
	NSOperationQueue* operationQueue_;
	UIViewController* _viewController;
	NSMutableDictionary* mediaInfo;
}
@property(retain, nonatomic) NSMutableDictionary* mediaInfo;
@property(assign, nonatomic) UIViewController* viewController;
-(void).cxx_destruct;
-(void)lvSnapMoviePickerControllerDidCancel:(id)lvSnapMoviePickerController;
-(void)lvSnapMoviePickerController:(id)controller didFinishPickingMovieWithURL:(id)url;
-(void)lgImagePickerController:(id)controller didClickWithAreaId:(id)areaId action:(id)action;
-(void)lgImagePickerControllerDidSelectOverPlayTimeVideo:(id)lgImagePickerController;
-(void)lgImagePickerControllerDidReachMaxLimit:(id)lgImagePickerController;
-(void)lgImagePickerControllerDidCancel:(id)lgImagePickerController;
-(void)lgImagePickerController:(id)controller didFinishPickingMediaWithInfos:(id)infos;
-(id)thumbnailFromAsset:(id)asset filterIndex:(unsigned)index rotateCount:(unsigned)count;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)didPresentAlertView:(id)view;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)writeVideoAtPathToSavedPhotosAlbum:(id)savedPhotosAlbum;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)verifyAndSendMovieFileAtURL:(id)url;
-(void)pushImageDetailControllerForImage:(id)image from:(id)from;
-(void)attachImage:(id)image;
-(void)callBackAndClose;
-(void)closeView;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLMessagePresentView : UIView <NLMessageContentSelectable> {
	UIImageView* mImageView;
	UIImageView* mBubbleView;
	NMAttributedLabel* mMessageLabel;
	NSAttributedString* mAttributedString;
	UIButton* mButton;
	unsigned mImageIndex;
	BOOL mIsSentMessage;
	BOOL _selected;
	NSString* messageText;
	NSString* packageID;
	NSString* productID;
	NSString* shopID;
	UIView* _imageMaskView;
	UIView* _bubbleMaskView;
	UIImage* _bubbleMaskImage;
}
@property(assign, nonatomic, getter=isSelected) BOOL selected;
@property(retain, nonatomic) UIImage* bubbleMaskImage;
@property(retain, nonatomic) UIView* bubbleMaskView;
@property(retain, nonatomic) UIView* imageMaskView;
@property(readonly, assign, nonatomic) NMAttributedLabel* messageLabel;
@property(retain, nonatomic) NSString* shopID;
@property(retain, nonatomic) NSString* productID;
@property(retain, nonatomic) NSString* packageID;
@property(retain, nonatomic) NSString* messageText;
+(float)heightWithImageIndex:(unsigned)imageIndex messageText:(id)text cellWidth:(float)width isSent:(BOOL)sent;
+(id)attributeStringWithMessage:(id)message isSent:(BOOL)sent;
+(id)imageForIndex:(unsigned)index;
-(void).cxx_destruct;
-(void)layoutMaskView;
-(void)removeMaskView;
-(void)addMaskViewWithAlpha:(float)alpha;
-(void)layoutSubviews;
-(BOOL)render;
-(void)sizeToFit;
-(void)tabImage:(id)image;
-(void)addTarget:(id)target action:(SEL)action;
-(void)updateControlPropertiesForTheme;
-(void)setMessage:(id)message;
-(void)setImageIndex:(unsigned)index;
-(void)setIsSentMessage:(BOOL)message;
-(id)initWithFrame:(CGRect)frame;
-(CGSize)buttonTitleShadowOffset;
-(id)buttonTitleShadowColor;
-(id)buttonTitleColor;
-(id)highlightedButtonImage;
-(id)buttonImage;
-(id)buttonTtile;
-(id)bubbleImage;
@end

__attribute__((visibility("hidden")))
@interface MBMessageContentLabel : UILabel {
}
+(id)label;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAOBSUploaderImageCache : NSObject {
	NSCache* _cache;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)clearImageCache;
-(void)removeImageForKey:(id)key;
-(void)setImage:(id)image forKey:(id)key;
-(id)imageForKey:(id)key;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLImagePickerLauncher : NSObject {
	id<UINavigationControllerDelegate, UIImagePickerControllerDelegate> delegate;
	UIViewController* viewController;
}
@property(assign, nonatomic) UIViewController* viewController;
@property(assign, nonatomic) id<UINavigationControllerDelegate, UIImagePickerControllerDelegate> delegate;
-(void)openImagePicker:(unsigned)picker media:(unsigned)media;
-(void)openImagePicker:(unsigned)picker;
@end

__attribute__((visibility("hidden")))
@interface LASyncMananger : NSObject {
	NSMutableDictionary* mUploadQueue;
}
+(id)sharedManager;
-(void).cxx_destruct;
-(void)requestUploadMedia:(id)media type:(int)type albumID:(id)anId groupID:(id)anId4;
-(void)setFinish:(id)finish groupID:(id)anId block:(id)block;
-(void)retryUpload:(id)upload groupID:(id)anId;
-(void)cancelUpload:(id)upload groupID:(id)anId;
-(id)addUploadQueue:(id)queue forKey:(id)key;
-(void)loadUploadTask;
-(unsigned)completedCount:(id)count groupID:(id)anId;
-(unsigned)totalCount:(id)count groupID:(id)anId;
-(float)currentUploadProgress:(id)progress groupID:(id)anId;
-(int)currentUploadStatus:(id)status groupID:(id)anId;
-(BOOL)isAvailableToUpload:(id)upload groupID:(id)anId;
-(id)findUploadQueue:(id)queue groupID:(id)anId;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallImageView : UIImageView {
}
-(void)loadWithRemoteUrl:(id)remoteUrl;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeViewControllerActions : NSObject {
	MBMyHomeViewController* mController;
}
+(id)actionsWithContoller:(id)contoller;
-(id)createTouchEndedAction;
-(id)createShareButtonAction;
-(BOOL)allowLinkUserProfileWithActivity:(id)activity mid:(id)mid;
-(id)createReloadDataAction;
-(id)createCommonUrlAction;
-(void)commonUrlAction:(id)action userInfo:(id)info;
-(id)createBlindDeleteAction;
-(id)createDetailViewContentMovieAction;
-(id)createDetailViewContentImageAction;
-(id)createDetailViewStickerMoreAction;
-(id)createReplyCommentViewUserProfileAction;
-(id)createCommentStickerProfileListUserProfileAction;
-(id)createPostViewUserProfileAction;
-(id)createDetailViewContentLocationAction;
-(id)createCommentButtonAction;
-(void)commentAction:(id)action userInfo:(id)info;
-(id)createLikeButtonAction;
-(void)likeAction:(id)action userInfo:(id)info;
-(id)createPublicSettingAction;
-(id)createCoverViewAction;
-(id)createUserProfileAction;
-(id)initWithController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface LGExecutableThreadHandler : NSObject {
	BOOL _shouldStopRunLoop;
	CFRunLoopRef _executableRunLoopRef;
}
@property(assign, nonatomic) BOOL shouldStopRunLoop;
@property(assign, nonatomic) CFRunLoopRef executableRunLoopRef;
-(void)executableThreadEntryPoint:(id)point;
@end

__attribute__((visibility("hidden")))
@interface LGAssetsLibrarySafeExecutor : NSObject {
	BOOL _doNotRemoveEditedFiles;
	NSMutableArray* _selectedAssets;
	NSMutableDictionary* _editedImagePathDictionary;
	NSMutableDictionary* _filterInfoDictionary;
	NSMutableDictionary* _rotateInfoDictionary;
	LGAssetsLibrary* _assetsLibrary;
	NSThread* _executableThread;
	LGExecutableThreadHandler* _executableThreadHandler;
}
@property(assign, nonatomic) BOOL doNotRemoveEditedFiles;
@property(retain, nonatomic) LGExecutableThreadHandler* executableThreadHandler;
@property(retain, nonatomic) NSThread* executableThread;
@property(retain, nonatomic) LGAssetsLibrary* assetsLibrary;
@property(retain, nonatomic) NSMutableDictionary* rotateInfoDictionary;
@property(retain, nonatomic) NSMutableDictionary* filterInfoDictionary;
@property(retain, nonatomic) NSMutableDictionary* editedImagePathDictionary;
@property(retain, nonatomic) NSMutableArray* selectedAssets;
-(void).cxx_destruct;
-(BOOL)checkEditedForAsset:(id)asset;
-(void)loadEditInfoToAsset:(id)asset;
-(void)saveEditInfoFromAsset:(id)asset;
-(void)removeEditedFiles;
-(void)removeEditedFilePathForAssetURL:(id)assetURL persistentID:(id)anId;
-(id)editedFilePathForAssetURL:(id)assetURL persistentID:(id)anId;
-(BOOL)setEditedImage:(id)image forAssetURL:(id)assetURL persistentID:(id)anId;
-(id)keyForDictionaryWithAssetURL:(id)assetURL persistentID:(id)anId;
-(void)stopExecutableThread;
-(void)healthCheck;
-(void)didReachMaxLimit:(id)limit;
-(void)didSelectOverPlayTimeVideo:(id)video;
-(void)didCancelPicking:(id)picking;
-(BOOL)didFinishPicking:(id)picking;
-(int)getCountOfSelectedAssets;
-(void)resetSelectedAssets;
-(unsigned)getSelectionCountOfGroup:(id)group;
-(void)refreshSelectedState:(id)state;
-(void)refreshSelectedState:(id)state selectedAssets:(id)assets;
-(BOOL)toggleAssetSelection:(id)selection;
-(void)checkAssetsLibraryAccessable:(id)accessable selector:(SEL)selector;
-(id)savedPhotosAssetsGroupOnExecutableThread;
-(void)savedPhotosAssetsGroupWithDictionary:(id)dictionary;
-(void)updateGalleryAsset:(id)asset resultBlock:(id)block;
-(void)updateGalleryAsset:(id)asset;
-(void)loadAllAssets:(id)assets isPartiallyLoad:(BOOL)load delegate:(id)delegate;
-(void)loadLazyAssetGroupsWhenAssetExist:(id)exist;
-(void)loadAllAssetGroups:(id)groups;
-(int)numberOfAssetsForGalleryGroup:(id)galleryGroup;
-(void)setupAssetsLibrary:(id)library;
-(void)dealloc;
-(id)initWithConfig:(id)config;
@end

__attribute__((visibility("hidden")))
@interface UsableStickerList : NSObject <LineStickerPackageManagerDelegate> {
	id mDelegate;
	BOOL mIsFetching;
	NSRange mRange;
	unsigned mFetchCount;
	BOOL mHasNext;
	NSError* mError;
	int cntDownloadableStickers;
	NSArray* defaultPackageList;
	NSMutableArray* packageList;
	NSMutableArray* downloadProductList;
}
@property(retain, nonatomic) NSArray* defaultPackageList;
@property(retain, nonatomic) NSMutableArray* downloadProductList;
@property(assign, nonatomic) id delegate;
@property(retain, nonatomic) NSMutableArray* packageList;
@property(assign, nonatomic) int cntDownloadableStickers;
-(void).cxx_destruct;
-(void)stickerPackage:(id)package movedFromIndex:(unsigned)index toIndex:(unsigned)index3;
-(void)stickerPackageRemoved:(id)removed;
-(void)stickerPackageChanged:(id)changed;
-(void)stickerPackageAddedToKeyboard:(id)keyboard;
-(void)removePackage:(id)package;
-(unsigned)indexOfPackage:(id)package;
-(id)stickerPackageAtIndex:(unsigned)index;
-(unsigned)count;
-(id)error;
-(BOOL)isFetching;
-(BOOL)hasNext;
-(void)fetchNext;
-(void)updateUsablePackages;
-(void)reloadUsablePackages;
-(void)addPackage:(id)package;
-(void)addPackageWithProduct:(id)product;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface NLFooterView : UIView {
	int mStyle;
	UIView* mBorderView;
	UIActivityIndicatorView* mActivityIndicator;
	UILabel* mMessageLabel;
	UILabel* mSubMessageLabel;
}
+(id)footerViewWithStyle:(int)style;
-(void).cxx_destruct;
-(void)updateLastUpdatedDate:(id)date;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame style:(int)style;
-(void)setupErrorView;
-(void)setupLoadingView;
-(id)lastUpdateStringWithDate:(id)date;
-(void)clearSubviews;
@end

__attribute__((visibility("hidden")))
@interface NLTransparentView : UIView {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ChannelLoadingFailedView : UIView {
	ChannelTitleBarView* topTitleBar_;
	UIImageView* noticeImageView_;
	UILabel* noticeLabel_;
	UIButton* retryButton_;
	id<ChannelLoadingFailedViewDelegate> delegate_;
}
@property(assign, nonatomic) id<ChannelLoadingFailedViewDelegate> delegate;
-(void).cxx_destruct;
-(void)actionTouched:(id)touched;
-(void)actionClose:(id)close;
-(void)showTitleBarHidden:(BOOL)hidden;
-(void)dealloc;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupEditViewController : MBViewController <UITableViewDelegate, UITableViewDataSource, UITextFieldDelegate, MBMyHomeGroupFriendsPickerViewControllerDelegate, MBMyhomeGroupManagerDelegate> {
	UIView* mGroupInfoView;
	GroupInputTextField* mGroupNameField;
	UILabel* mGroupLengthLabel;
	UITableView* mTableView;
	UIImageView* mBottomView;
	UIButton* mTableButtonView;
	NLMyhomeGroup* mGroup;
	NSMutableArray* mFriends;
	NSMutableArray* mDelFriends;
	NSMutableArray* mAddFriends;
	MBMyhomeGroupManager* mMyhomeGroupManager;
	MBIndicatorLayerView* mIndicatorLayer;
	int mViewType;
	BOOL mEdited;
	NSError* mError;
}
-(void).cxx_destruct;
-(void)didFinishedPickFriends:(id)friends friends:(id)friends2;
-(void)myhomeGroupManager:(id)manager didFinishSyncWithError:(id)error;
-(void)myhomeGroupManager:(id)manager didFinishDeleteWithError:(id)error;
-(void)myhomeGroupManager:(id)manager didFinishUpdateWithError:(id)error;
-(void)myhomeGroupManager:(id)manager didFinishCreateWithError:(id)error;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)textFieldDidChange:(id)textField;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(id)removeCellForTableView:(id)tableView;
-(id)removeNewCellForTableView:(id)tableView;
-(id)removeEditCellForTableView:(id)tableView;
-(id)messageCellForTableView:(id)tableView;
-(id)memberCellForTableView:(id)tableView cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)deleteMember:(id)member;
-(unsigned)numberOfRemoveCell;
-(void)removeList;
-(void)syncMembers;
-(void)complete;
-(void)backAction;
-(void)showBackAlert;
-(void)addToFriends:(id)friends;
-(void)closeViewController;
-(BOOL)removeFromAddFriends:(id)addFriends;
-(void)addToAddFriends:(id)addFriends;
-(void)addToDeleteFriends:(id)deleteFriends;
-(id)groupNameField;
-(id)friends;
-(id)group;
-(void)configureCell:(id)cell withObject:(id)object;
-(void)reloadNavigationBarButton;
-(void)initNavigationBar;
-(void)setNavigationRightItemForViewTypeEditWithGroupName:(id)groupName;
-(void)setNavigationRightItemForViewTypeNewWithGroupName:(id)groupName;
-(void)setNavigationBarTitle;
-(void)moveToFriendsPickerViewController;
-(void)hideToastInAlertView;
-(void)reloadViews;
-(void)initBottomView;
-(void)initGroupInfoView;
-(void)initTableView;
-(void)initializeWithGroup:(id)group;
-(void)initializeWithNewMembers:(id)newMembers;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithGroup:(id)group;
-(id)initWithMembers:(id)members;
@end

__attribute__((visibility("hidden")))
@interface LAProfileImageView : UIButton <LALineImageObserving> {
	LALineImage* lineImage;
	NSString* _mId;
}
@property(retain, nonatomic) NSString* mId;
@property(retain, nonatomic) LALineImage* lineImage;
-(void).cxx_destruct;
-(id)makeProfileImage:(id)image;
-(id)defaultImage;
-(void)lineImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)setImageWithUser:(id)user;
-(void)setBackgroundImage:(id)image forState:(unsigned)state;
-(void)dealloc;
-(void)showProfileView:(id)view;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ChannelTitleBarView : UIView {
	UIImageView* topTitleBar_;
	UIButton* closeButton_;
}
@property(readonly, assign, nonatomic) UIButton* closeButton;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface VoiceMessageController : NSObject <AVAudioRecorderDelegate, AVAudioSessionDelegate, VoiceTalkControlDelegate, NLVoiceRecordViewDelegate> {
	BOOL isRecording;
	BOOL isLoading;
	BOOL _isPlaying;
	BOOL isCancelled;
	BOOL isShowing;
	BOOL observingStatus;
	BOOL _useCall;
	BOOL _recordingCancelled;
	UIViewController* viewController;
	VoiceTalkControl* voipControl;
	NLVoiceRecordView* voiceControl;
	NSURL* soundFileURL;
	AVAudioRecorder* soundRecorder;
	AVAudioRecorder* oldSoundRecorder;
	dispatch_source_s* _timer;
	AVPlayer* audioPlayer;
	AVPlayerItem* playerItem;
	id timeObserver;
	TalkMessageObject* _messageObject;
	NSMutableSet* recorderObservers;
	NSMutableSet* playerObservers;
	NSString* audioCategoryBackup;
	int _controlType;
	NLVoiceTouchBlockView* _blockUserTouchView;
	UIButton* _recognizerHitEventOnTextView;
	double currentTime;
	double _duration;
	double currentPlayTime;
}
@property(retain, nonatomic) UIButton* recognizerHitEventOnTextView;
@property(assign, nonatomic) BOOL recordingCancelled;
@property(retain, nonatomic) NSString* audioCategoryBackup;
@property(retain, nonatomic) NSMutableSet* playerObservers;
@property(retain, nonatomic) NSMutableSet* recorderObservers;
@property(assign, nonatomic) BOOL observingStatus;
@property(assign, nonatomic) id timeObserver;
@property(retain, nonatomic) AVPlayerItem* playerItem;
@property(retain, nonatomic) AVPlayer* audioPlayer;
@property(assign, nonatomic) double currentTime;
@property(assign, nonatomic) dispatch_source_s* timer;
@property(retain, nonatomic) AVAudioRecorder* oldSoundRecorder;
@property(retain, nonatomic) AVAudioRecorder* soundRecorder;
@property(retain, nonatomic) NSURL* soundFileURL;
@property(retain, nonatomic) NLVoiceTouchBlockView* blockUserTouchView;
@property(retain, nonatomic) VoiceTalkControl* voipControl;
@property(retain, nonatomic) NLVoiceRecordView* voiceControl;
@property(assign, nonatomic) BOOL useCall;
@property(assign, nonatomic) double currentPlayTime;
@property(assign, nonatomic) double duration;
@property(retain, nonatomic) TalkMessageObject* messageObject;
@property(assign, nonatomic) int controlType;
@property(assign, nonatomic) BOOL isShowing;
@property(assign, nonatomic) BOOL isRecording;
@property(assign, nonatomic) BOOL isCancelled;
@property(assign, nonatomic) BOOL isPlaying;
@property(assign, nonatomic) BOOL isLoading;
@property(assign, nonatomic) UIViewController* viewController;
+(void)updateAudioStatus;
+(short)checkDeviceStatus;
-(void).cxx_destruct;
-(void)voiceTalkControlCallButtonTapped:(id)tapped;
-(void)voiceTalkControlClosed:(id)closed;
-(void)voiceRecordViewDidCancelRecording:(id)voiceRecordView;
-(void)voiceRecordViewlDidEndRecording:(id)voiceRecordViewl;
-(void)voiceRecordViewDidBeginRecording:(id)voiceRecordView;
-(void)changeToOrientation:(int)orientation;
-(void)cancel;
-(void)stop;
-(void)setProximityMonitoringEnabled:(BOOL)enabled;
-(void)removePlayerObservers;
-(void)addPlayerObservers;
-(BOOL)isActivatedPlayer;
-(void)stopAndUpdateView;
-(void)setAudioSessioinCagetory;
-(void)playAudioAtURL:(id)url;
-(void)prepareURLAndPlayWithMessage:(id)message;
-(void)setEnabled:(BOOL)enabled;
-(void)hideControls;
-(void)showControls:(int)controls;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)sendAudioFile;
-(void)updateTime;
-(id)timeString;
-(void)finishRecording;
-(void)removeRecorderObservers;
-(void)addRecorderObservers;
-(void)beginRecording;
-(void)unBlockUserTouch;
-(void)blockUserTouch;
-(void)updateView;
-(id)messageViewController;
-(void)cancelTimer;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLMessageAudioView : NLMessageBubbleView {
	BOOL _canExport;
	id<NLMessageAudioViewDelegate> _delegate;
	int _bubbleViewState;
	UIView* _topFrameView;
	UIView* _topCenteredView;
	UIImageView* _iconImageView;
	UIView* _bottomFrameView;
	UIImageView* _hSeparatorImageView;
	UIImageView* _vSeparatorImageView;
	UIButton* _playButton;
	UIButton* _exportButton;
	UIActivityIndicatorView* _loadingIndicatorView;
	UILabel* _minutesLabel;
	UILabel* _secondsLabel;
	UIImageView* _colonImageView;
	UIView* _durationView;
	UIImageView* _expiredIconView;
	NSArray* _playingAnimationImages;
	double _duration;
}
@property(retain, nonatomic) NSArray* playingAnimationImages;
@property(retain, nonatomic) UIImageView* expiredIconView;
@property(retain, nonatomic) UIView* durationView;
@property(retain, nonatomic) UIImageView* colonImageView;
@property(retain, nonatomic) UILabel* secondsLabel;
@property(retain, nonatomic) UILabel* minutesLabel;
@property(retain, nonatomic) UIActivityIndicatorView* loadingIndicatorView;
@property(retain, nonatomic) UIButton* exportButton;
@property(retain, nonatomic) UIButton* playButton;
@property(retain, nonatomic) UIImageView* vSeparatorImageView;
@property(retain, nonatomic) UIImageView* hSeparatorImageView;
@property(retain, nonatomic) UIView* bottomFrameView;
@property(retain, nonatomic) UIImageView* iconImageView;
@property(retain, nonatomic) UIView* topCenteredView;
@property(retain, nonatomic) UIView* topFrameView;
@property(assign, nonatomic) BOOL canExport;
@property(assign, nonatomic) double duration;
@property(assign, nonatomic) int bubbleViewState;
@property(assign, nonatomic) id<NLMessageAudioViewDelegate> delegate;
+(CGSize)bubbleSizeForMessage:(id)message;
+(CGSize)defaultBubbleSize;
-(void).cxx_destruct;
-(BOOL)render;
-(void)applyRulesetStyle;
-(id)playingAnimationImagesFromRuleset;
-(id)disabledExportButtonImage;
-(id)highlightedExportButtonImage;
-(id)exportButtonImage;
-(id)highlightedColonImage;
-(id)colonImage;
-(id)highlightedPauseButtonImage;
-(id)pauseButtonImage;
-(id)disabledPlayButtonImage;
-(id)highlightedPlayButtonImage;
-(id)playButtonImage;
-(id)verticalSeperatorImage;
-(id)horizontalSeperatorImage;
-(id)expiredImage;
-(id)speakerImage;
-(id)imageWithPropertyName:(id)propertyName sentDefaultImage:(id)image recvDefaultImage:(id)image3 attributeName:(id)name;
-(id)imageWithPropertyName:(id)propertyName sentDefaultImage:(id)image recvDefaultImage:(id)image3;
-(void)reloadView;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)setRulesetStyleNameForDirection:(unsigned)direction;
-(void)prepareSubviewsForDirection:(unsigned)direction;
-(void)prepareDefaultSubviewsForDirection:(unsigned)direction;
-(void)export:(id)export;
-(void)play:(id)play;
-(void)topFrameTapped:(id)tapped;
-(void)prepareInitialSubviews;
-(void)prepareSubviewsForState:(int)state;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLAudioURLLoader : NSObject {
	id _completion;
	NLObjectStorageOperation* _pendingOperation;
}
@property(retain, nonatomic) NLObjectStorageOperation* pendingOperation;
@property(copy, nonatomic) id completion;
-(void).cxx_destruct;
-(void)cancel;
-(void)finishLoadingAudioWithURL:(id)url;
-(void)informLoadingFailure:(id)failure;
-(void)__dettached__update_expired:(id)expired;
-(void)downloadAudioFile:(id)file downloadURL:(id)url;
-(void)loadAudioWithObjectID:(id)objectID knownDownloadURL:(id)url;
-(void)loadAudioAtURL:(id)url withMessageID:(id)messageID knownDownloadURL:(id)url3 completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface MBIndicatorView : UIView {
	UIActivityIndicatorView* mIndicatorView;
}
+(id)indicatorViewWithFrame:(CGRect)frame;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLThemeSettingsViewController : NLTableViewController {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)viewWillAppear:(BOOL)view;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBLikeLayerButton : UIButton {
}
+(id)likeLayerButtonWithIndex:(int)index;
+(id)likeStickerLayerWithType:(int)type;
+(id)likeStickerButtonWithIndex:(int)index type:(int)type;
+(id)likeSmallStickerImageNameWithLikeType:(id)likeType;
+(id)likeStickerImageNameWithLikeType:(id)likeType;
+(id)likeStickerImageName:(int)name;
+(id)likeSmallStickerInfo;
+(id)likeStickerInfo;
-(id)initWithFrame:(CGRect)frame;
-(void)updateLikeLayerButtonWithType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface StickerShopSegmentController : UIView {
	unsigned selectedSegmentIndex_;
	unsigned btnCount_;
	unsigned btnWidth_;
	float leftMargin_;
	float rightMargin_;
	UIButton* rightMenuButton_;
	id<StickerShopSegmentControllerDelegate> delegate;
	unsigned selectedSegmentIndex;
}
@property(assign, nonatomic) unsigned selectedSegmentIndex;
@property(assign, nonatomic) id<StickerShopSegmentControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)clearNewBadgeWithIndex:(int)index;
-(void)removeBadge:(id)badge;
-(void)updateBadgeWithIndex:(unsigned)index;
-(void)selectBtn:(id)btn;
-(id)badgeWithIndex:(unsigned)index;
-(int)indexOfButton:(id)button;
-(id)buttonWithIndex:(unsigned)index;
-(void)setTitle:(id)title withIndex:(unsigned)index;
-(id)initWithButtonCount:(int)buttonCount leftMargin:(float)margin rightMargin:(float)margin3;
-(id)initWithButtonCountIncludingRightButton:(int)buttonCountIncludingRightButton;
-(id)initWithButtonCount:(int)buttonCount;
@end

__attribute__((visibility("hidden")))
@interface RTSService : NSObject {
}
+(void)setCookieWithEncryptedAccessToken:(id)encryptedAccessToken cookieName:(id)name cookieDomain:(id)domain;
+(void)setCookieWithEncryptedAccessToken:(id)encryptedAccessToken cookieDomain:(id)domain;
+(void)acquireEncryptedAccessTokenWithType:(int)type completionBlock:(id)block errorBlock:(id)block3;
+(void)acquireEncryptedAccessTokenWithCompletionBlock:(id)completionBlock errorBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface LinePriceManager : NSObject <SKProductsRequestDelegate> {
	BOOL IAPEnable;
	int queueNumber_;
	NSMutableDictionary* tierInfoDictionary;
	NSMutableDictionary* callbackDictionary;
}
@property(retain, nonatomic) NSMutableDictionary* tierInfoDictionary;
@property(copy, nonatomic) NSMutableDictionary* callbackDictionary;
+(void)createDirectoryForPath:(id)path;
+(id)managerFilePath;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)reset;
-(void)saveToFile;
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
-(void)requestProductWith:(id)with completionBlock:(id)block;
-(void)removeCallbackWithKey:(id)key;
-(void)removeCallbackWitNumber:(int)number;
-(void)addCallBack:(id)back withNumber:(int)number;
-(void)priceInfoWithTier:(unsigned)tier productID:(id)anId completionBlock:(id)block;
-(void)loadDefault;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LinePriceTier : NSObject {
	NSNumber* tier;
	NSString* priceString;
	NSString* currency;
	NSDecimalNumber* price;
}
@property(retain, nonatomic) NSDecimalNumber* price;
@property(retain, nonatomic) NSString* currency;
@property(retain, nonatomic) NSString* priceString;
@property(retain, nonatomic) NSNumber* tier;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoInfoView : UIView {
	id<LAPhotoInfoViewDelegate> _delegate;
	unsigned _index;
	UIScrollView* _scrollView;
	UIImageView* _infoBgImageView;
	UIButton* _closeButton;
	UILabel* _titleLabel;
	UILabel* _ownerNameLabel;
	UIView* _backgroundView;
	UIActivityIndicatorView* _indicatorView;
}
@property(retain, nonatomic) UIActivityIndicatorView* indicatorView;
@property(retain, nonatomic) UIView* backgroundView;
@property(retain, nonatomic) UILabel* ownerNameLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) UIImageView* infoBgImageView;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) unsigned index;
@property(assign, nonatomic) id<LAPhotoInfoViewDelegate> delegate;
-(void).cxx_destruct;
-(void)updateObjectInfo:(unsigned)info;
-(void)setImageInfo;
-(void)setObjectInfo;
-(void)removeAllSubviews;
-(void)showInView:(id)view atIndex:(unsigned)index;
-(void)hideContents;
-(void)didTapCloseButton:(id)button;
-(void)updateFrames;
-(void)configValueLabel:(id)label;
-(void)configLabel:(id)label;
-(float)nextRowHeight;
-(float)nextRowYPosition;
-(unsigned)rowCount;
-(void)addBorderInView:(id)view;
-(void)addOwnerNameRowWithTitleText:(id)titleText mid:(id)mid;
-(void)addRowWithTitleText:(id)titleText detailText:(id)text;
-(void)setupBackground;
-(void)addCloseButton;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface MBHiddenManager : NSObject {
	NSOperationQueue* mOperationQueue;
	BOOL mAutoOpen;
	BOOL mAutoOpenAvailable;
	BOOL mAutoOpenRequesting;
	id<MBHiddenManagerDelegate> mdelegate;
	id<MBHiddenManagerDelegate> mDelegate;
}
@property(assign, nonatomic) id<MBHiddenManagerDelegate> delegate;
+(id)existSettingAutoAllowFromUserDefaults;
+(BOOL)settingAutoAllowFromUserDefaults;
+(void)saveSettingAutoAllowToUserDefaults:(BOOL)userDefaults;
-(void).cxx_destruct;
-(void)requestHideList;
-(void)delHide:(id)hide;
-(void)addHide:(id)hide;
-(void)updateAutoOpen:(BOOL)open;
-(void)requestAutoOpen;
-(BOOL)isAutoOpen;
-(BOOL)isAutoOpenRequesting;
-(BOOL)isAutoOpenAvailable;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumPropertyManager : NSObject {
}
+(void)addablePhotoCount:(id)count groupID:(id)anId block:(id)block;
+(void)addablePhotoCountFromAlbumList:(id)albumList groupID:(id)anId block:(id)block;
+(void)addableAlbumCount:(id)count block:(id)block;
+(void)setMaxPhotoCountLimit:(int)limit;
+(int)maxPhotoCountLimit;
+(void)setMaxAlbumCountLimit:(int)limit;
+(int)maxAlbumCountLimit;
+(BOOL)shouldFullFetchPolling:(id)polling groupID:(id)anId;
+(BOOL)shouldFullFetchPolling:(id)polling;
+(id)getTemporaryAlbumName;
+(void)setTemporaryAlbumName:(id)name;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface MBProfileCoverView : NSObject {
	NSString* mMid;
	NLProfilePopupViewController* mDelegate;
	UIView* mCoverParentView;
	UIActivityIndicatorView* mIndicator;
	MBURLImageButton* mCoverImageView;
	NSMutableArray* mPostsView;
	BOOL mIsHiddenPosts;
}
+(id)profileCoverViewWithMid:(id)mid withViewCont:(id)viewCont withView:(id)view hiddenPosts:(BOOL)posts;
-(void).cxx_destruct;
-(void)dealloc;
-(void)setProfilePopupThumbViewWithMBRecentPhoto:(id)mbrecentPhoto withIndex:(int)index;
-(void)createProfilePopupThumbViewWithLeftPos:(float)leftPos;
-(void)animateButton:(id)button image:(id)image withBackImageView:(id)backImageView;
-(void)setPostsViewArea:(id)area;
-(void)setMyhomeAreaWithProfilePhoto:(id)profilePhoto;
-(void)loadMyhomeCoverFromCache;
-(void)loadCoverImage:(id)image;
-(id)cropThumbnail:(id)thumbnail withSize:(CGSize)size;
-(void)getUserPopup:(id)popup;
-(void)getMyhomeArea;
-(id)initWithMid:(id)mid withViewCont:(id)viewCont withView:(id)view hiddenPosts:(BOOL)posts;
@end

__attribute__((visibility("hidden")))
@interface NLMessageBubbleView : UIButton <NLMessageContentSelectable> {
	BOOL _shouldIgnoreAnimation;
	BOOL _selected;
	BOOL _expired;
	unsigned _direction;
	UIImage* _contentImage;
	UIImageView* _contentImageView;
	UIImage* _effectImage;
	UIImageView* _effectImageView;
	UIImage* replacementImage;
	UIActivityIndicatorView* _spinner;
	UIView* _maskView;
	UIImage* _maskImage;
	UIImageView* _expiredIconImageView;
	CGSize bubbleSize;
	CGRect textBounds;
}
@property(assign, nonatomic, getter=isSelected) BOOL selected;
@property(retain, nonatomic) UIImageView* expiredIconImageView;
@property(retain, nonatomic) UIView* maskView;
@property(readonly, assign, nonatomic) CGRect maskViewFrame;
@property(retain, nonatomic) UIImage* maskImage;
@property(assign, nonatomic, getter=isExpired) BOOL expired;
@property(retain, nonatomic) UIActivityIndicatorView* spinner;
@property(retain, nonatomic) UIImage* replacementImage;
@property(retain, nonatomic) UIImageView* contentImageView;
@property(retain, nonatomic) UIImageView* effectImageView;
@property(retain, nonatomic) UIImage* effectImage;
@property(retain, nonatomic) UIImage* contentImage;
@property(assign, nonatomic) CGSize bubbleSize;
@property(assign, nonatomic) unsigned direction;
@property(assign, nonatomic) CGRect textBounds;
+(id)divideLineView;
+(CGSize)bubbleSizeForMessage:(id)message;
+(CGSize)defaultBubbleSize;
-(void).cxx_destruct;
-(BOOL)render;
-(void)updateMaskImage;
-(void)layoutMaskView;
-(void)removeMaskView;
-(void)addMaskViewWithAlpha:(float)alpha showExpiredIcon:(BOOL)icon;
-(void)reloadView;
-(BOOL)isSentMessage;
-(void)reLayoutSubImageViews;
-(void)modifySpinnerPositionToBeCenteredWithoutBubbleTail;
-(void)layoutSubviews;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
-(void)hideEffectImageViews;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)setRulesetStyleNameForDirection:(unsigned)direction;
-(void)prepareSubviewsForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
@end

__attribute__((visibility("hidden")))
@interface NLMessageVideoView : NLMessageBubbleView {
	int _bubbleViewState;
}
@property(assign, nonatomic) int bubbleViewState;
+(CGSize)bubbleSizeForMessage:(id)message;
+(CGSize)defaultBubbleSize;
-(id)highlightedPlayIconImage;
-(id)playIconImage;
-(id)errorIconImage;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(void)hideEffectImageViews;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)reloadView;
-(void)setRulesetStyleNameForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
-(void)prepareSubviewsForState:(int)state;
@end

__attribute__((visibility("hidden")))
@interface NLTransferQualityManager : NSObject {
}
+(id)videoQualityData;
+(id)imageQualityData;
+(id)voiceQualityData;
+(id)qualityLevel;
+(unsigned)transferQualityForDefault;
+(unsigned)transferQuality;
+(unsigned)photoSizeTypeByUserDefined;
+(unsigned)legyTransferQuality;
+(id)connectionInfo;
+(unsigned)legacyPhotoSize;
+(int)videoQualityTypeFromPickerSource:(unsigned)pickerSource;
+(float)myThumbnailCompressionFactor;
+(CGSize)myThumbnailResolution;
+(float)imageCompressionFactor;
+(CGSize)imageResolution;
+(id)voiceBitRate;
+(id)voiceSampleRate;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface GroupBoardModel : NSObject {
	NSString* groupBoardId;
	NSString* text;
	NSString* objectID;
	NSString* postEndURLString;
	NSString* mediaType;
	int otherThumbCount;
	NSString* location;
	NSNumber* stickerId;
	NSNumber* packageId;
	NSNumber* packageVersion;
	float contentMinimumWidth;
	float contentMinimumHeight;
	float extraHeight;
	NSString* othersCountString;
	NSString* serviceType;
	NSString* serviceName;
	NSString* officialName;
	NSString* contentType;
	NSString* albumName;
	NSString* locKey;
	NSString* _chatId;
	NSString* _noteName;
	CGSize thumbSize;
}
@property(retain, nonatomic) NSString* noteName;
@property(retain, nonatomic) NSString* locKey;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSString* contentType;
@property(retain, nonatomic) NSString* officialName;
@property(retain, nonatomic) NSString* serviceName;
@property(retain, nonatomic) NSString* serviceType;
@property(assign, nonatomic) float contentMinimumHeight;
@property(assign, nonatomic) float contentMinimumWidth;
@property(assign, nonatomic) float extraHeight;
@property(assign, nonatomic) CGSize thumbSize;
@property(retain, nonatomic) NSString* othersCountString;
@property(retain, nonatomic) NSNumber* packageVersion;
@property(retain, nonatomic) NSNumber* packageId;
@property(retain, nonatomic) NSNumber* stickerId;
@property(retain, nonatomic) NSString* location;
@property(assign, nonatomic) int otherThumbCount;
@property(retain, nonatomic) NSString* mediaType;
@property(retain, nonatomic) NSString* postEndURLString;
@property(retain, nonatomic) NSString* objectID;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* groupBoardId;
@property(retain, nonatomic) NSString* chatId;
+(CGSize)thumbnailSizeOfImage:(CGSize)image maxSize:(CGSize)size;
-(void).cxx_destruct;
-(id)stickerInfo;
-(BOOL)isNoteType;
-(int)albumMessageType;
-(int)noteContentType;
-(int)postServiceType;
-(int)cafePostKind;
-(CGSize)contentSize;
-(float)calculateExtraHeight;
-(BOOL)setOthersCountText;
-(void)adjustThumbnailSize:(CGSize)size;
-(id)stringForNotificationWithOtherName:(id)otherName;
-(id)stringForExport;
-(id)stringForScrollLock;
-(id)stringForChatListForOther:(id)other;
-(id)stringForChatListForMe;
-(id)stringForGoButton;
-(id)stringForGoButtonContentType;
-(id)stringForMyHomeOfficialName;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageOperationParameters : NSObject {
	unsigned long long _fileSize;
	int operationType;
	NSString* hostName;
	int port;
	NSString* _serviceCode;
	NSString* spaceID;
	NSString* objectID;
	NSString* thumbID;
	int mediaType;
	NSString* _objectName;
	NSString* userID;
	NSString* _languageCode;
	NSString* accessToken;
	NSString* filePath;
	NSData* fileData;
	NSURL* downloadURL;
	NSString* sourceOBSPathForCopy;
	NSString* reqSeq;
	NSString* tomid;
	NSString* _audlen;
	NSString* _sourceAccessTokenHeaderNameForCopy;
	NSString* _sourceAccessTokenForCopy;
	NSString* _quality;
	NSString* _requestImageSize;
	NSString* _groupID;
	NSString* _albumID;
	NSString* _userAgentString;
	int _numberOfTimesToRetryOnTimeout;
	NSNumber* _shouldAttemptPersistentConnection;
	NSURLRequest* _URLRequest;
	NSString* _obsAccessToken;
	unsigned long long offset;
	double _timeOutSeconds;
}
@property(retain, nonatomic) NSString* obsAccessToken;
@property(retain, nonatomic) NSURLRequest* URLRequest;
@property(retain, nonatomic) NSNumber* shouldAttemptPersistentConnection;
@property(assign, nonatomic) int numberOfTimesToRetryOnTimeout;
@property(assign, nonatomic) double timeOutSeconds;
@property(retain, nonatomic) NSString* userAgentString;
@property(retain, nonatomic) NSString* albumID;
@property(retain, nonatomic) NSString* groupID;
@property(retain, nonatomic) NSString* requestImageSize;
@property(retain, nonatomic) NSString* quality;
@property(retain, nonatomic) NSString* sourceAccessTokenForCopy;
@property(retain, nonatomic) NSString* sourceAccessTokenHeaderNameForCopy;
@property(retain, nonatomic) NSString* sourceOBSPathForCopy;
@property(readonly, assign, nonatomic) unsigned long long fileSize;
@property(assign, nonatomic) unsigned long long offset;
@property(retain, nonatomic) NSData* fileData;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSString* audlen;
@property(retain, nonatomic) NSString* tomid;
@property(retain, nonatomic) NSString* reqSeq;
@property(retain, nonatomic) NSURL* downloadURL;
@property(retain, nonatomic) NSString* accessToken;
@property(retain, nonatomic) NSString* languageCode;
@property(retain, nonatomic) NSString* userID;
@property(retain, nonatomic) NSString* objectName;
@property(assign, nonatomic) int mediaType;
@property(retain, nonatomic) NSString* thumbID;
@property(retain, nonatomic) NSString* spaceID;
@property(retain, nonatomic) NSString* objectID;
@property(retain, nonatomic) NSString* serviceCode;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* hostName;
@property(assign, nonatomic) int operationType;
+(id)parametersTalkMessageObjectInfoWithObjectId:(id)objectId;
-(void).cxx_destruct;
-(id)description;
-(id)converToDictionary;
-(id)objectTypeFromMediaType;
-(id)requestKey;
@end

__attribute__((visibility("hidden")))
@interface AddBlockBarView : UIView {
	UIImageView* bg_;
	ProfileImageView* spammerImage_;
	UILabel* spammerName_;
	UILabel* warning_;
	UIButton* blockButton_;
	UIButton* addButton_;
	UIButton* reportButton_;
	int barType_;
	NSManagedObject* userObject_;
}
@property(retain, nonatomic) NSManagedObject* userObject;
-(void).cxx_destruct;
-(BOOL)render;
-(void)onAdd:(id)add;
-(void)onUnblock:(id)unblock;
-(void)onBlock:(id)block;
-(void)onReport:(id)report;
-(void)setIsBlocking:(BOOL)blocking;
-(void)layoutSubviews;
-(float)neededHeightForWarningLabelForWidth:(float)width;
-(id)initWithFrame:(CGRect)frame barType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface BuddyFriendCountView : UIView {
	UIImageView* buddyBgImageView_;
	UIImageView* buddyIconImageView_;
	UILabel* buddyCountLabel_;
}
-(void).cxx_destruct;
-(void)setBuddyCount:(int)count;
-(id)initWithFrame:(CGRect)frame;
-(void)setupView;
@end

__attribute__((visibility("hidden")))
@interface AddFriendByBuddyListViewController : NLViewController <UITableViewDelegate, UISearchBarDelegate, UISearchDisplayDelegate, UITableViewDataSource, NLProfilePopupViewerDelegate, LineNavigationControllerDelegate, LineNetworkErrorViewDelegate, NLSearchBarDelegate> {
	id delegate_;
	UITableView* tableView_;
	UIView* noBuddyView_;
	UIView* tableBottomBorderView;
	UIButton* otherCountryButton_;
	NSMutableArray* popularBuddyList_;
	NSMutableDictionary* categoryMoreForSection_;
	CGPoint tableViewOffset_;
	NSString* selectedCountryCode_;
	BOOL isLoadedBuddyList_;
	BOOL isCompletedBuddyAdd_;
	LEGYRequestResponseHandler* loadBuddyRequest_;
	BOOL dismissAfterConfirm_;
	BOOL isMovingForChat_;
	NSArray* unReadBuddyMids_;
	NSMutableArray* newBuddyMids_;
	BOOL _loggedBannerViewEvent;
	NLSafeUnretainedObject* uSelf_;
	LEGYRequestResponseHandler* request_;
	BOOL hasResults_;
	unsigned searchOffset_;
	BOOL reachedEndOfResults_;
	NSString* searchTerm_;
	NSTimer* timer_;
	double searchInterval_;
	LineImageSourceView* _bannerImageView;
	NLProfilePopupViewer* profilePopupViewer;
	NLSearchBar* searchBar;
	UISearchDisplayController* searchDisplayController;
	NSMutableArray* _filteredListContent;
	LineBuddyBanner* _officialAccountBannerData;
	UIImageView* _bannerErrorView;
}
@property(retain, nonatomic) NSMutableArray* filteredListContent;
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(retain, nonatomic) UIImageView* bannerErrorView;
@property(retain, nonatomic) LineImageSourceView* bannerImageView;
@property(retain, nonatomic) LineBuddyBanner* officialAccountBannerData;
@property(retain, nonatomic) NLSearchBar* searchBar;
@property(retain, nonatomic) UISearchDisplayController* searchDisplayController;
@property(retain, nonatomic) NSString* selectedCountryCode;
@property(assign, nonatomic) id delegate;
-(void).cxx_destruct;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)updateResults:(id)results;
-(void)search;
-(void)resetSearchState;
-(void)retry;
-(BOOL)shouldDismissViewController;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)removeBuddy:(id)buddy reloadData:(id)data;
-(id)findIndexPathForMid:(id)mid;
-(void)changedbuddyCountry:(id)country;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)popUpProfileWithModel:(id)model;
-(void)popUpProfileWithMid:(id)mid;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)loadingCell;
-(id)currentDataSourceWithTableView:(id)tableView;
-(BOOL)isSearchTableView:(id)view;
-(void)searchBar:(id)bar didTapExtraButton:(id)button;
-(void)dealloc;
-(int)preferredStatusBarStyle;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)defaultsDidChange:(id)defaults;
-(void)logBannerViewEvent;
-(void)updateViewForBannerData;
-(void)downloadBannerImageData;
-(void)refreshNewlyReleasedBuddiesListWithCountryCode:(id)countryCode;
-(void)viewDidLoad;
-(void)loadView;
-(id)init;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onCategoryMoreButtonPressed:(id)pressed;
-(void)onOtherCountryBuddyTouched;
-(void)onLineAtPressed:(id)pressed;
-(void)clearHighlightUnReadBuddies;
-(BOOL)hasMoreBuddiesSection:(int)section;
-(void)validateCategoryMoreForSection:(id)section;
-(void)validateUnReadBuddies;
-(void)refreshNoBuddyView;
-(void)clearNoteViewWithAnimated:(BOOL)animated;
-(void)showNoteViewIfNeededWithAnimated:(BOOL)animated;
-(id)noteNoBuddyButton;
-(void)showNetworkError;
-(void)setupNoBuddyView;
-(void)setupTableFooterView;
-(void)setupTableHeaderView;
-(void)setupTableView;
@end

__attribute__((visibility("hidden")))
@interface CustomBadgeView : UIView {
	UIImageView* bgImageCenter_;
}
-(void).cxx_destruct;
-(void)setBadgeValue:(int)value;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface BuddyService : NSObject {
}
+(id)searchBuddiesWithQuery:(id)query range:(NSRange)range source:(int)source completionBlock:(id)block;
+(id)searchBuddiesWithQuery:(id)query country:(id)country range:(NSRange)range source:(int)source completionBlock:(id)block;
+(void)getPopularBuddyBannerWithLanguage:(id)language country:(id)country applicationType:(int)type resourceSpecification:(id)specification completionBlock:(id)block;
+(void)getBuddyOnAirWithBuddyMid:(id)buddyMid completionBlock:(id)block;
+(void)getBuddyDetailWithBuddyMid:(id)buddyMid completionBlock:(id)block;
+(void)getCountriesHavingBuddyWithCompletionBlock:(id)completionBlock;
+(void)getBuddyContactsWithCountry:(id)country classification:(id)classification range:(NSRange)range completionBlock:(id)block;
+(id)getPopularBuddyListsWithCountry:(id)country completionBlock:(id)block;
+(void)getPromotedBuddyContactsWithCompletionBlock:(id)completionBlock;
+(void)getNewlyReleasedBuddyIdsWithCountry:(id)country completionBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface MBSharePostDeleteStatusView : MBBaseChildCellView {
	UIImageView* mDeleteStatusBackImageView;
	UIImageView* mDeleteStatusIconImageView;
	UILabel* mDeleteStatusLabel;
}
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
+(UIEdgeInsets)marginWithType:(int)type;
-(void).cxx_destruct;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface LALineImage : NSObject {
	UIImage* image;
	NSString* imageKey;
	NSError* error;
	NSMutableSet* observers;
}
@property(retain, nonatomic) NSMutableSet* observers;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSString* imageKey;
@property(retain, nonatomic) UIImage* image;
+(void)reloadImageWithMid:(id)mid;
+(id)imageWithMid:(id)mid;
+(void)initialize;
-(void).cxx_destruct;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(BOOL)isObserving:(id)observing;
-(void)dealloc;
-(id)init;
-(void)loadImageWithId:(id)anId;
-(void)callbackObservers;
@end

__attribute__((visibility("hidden")))
@interface RecommendAddFriendPanelView : UIView {
	id delegate_;
	CustomBadgeView* customBadgeView_;
	long long newReleasedBuddyTimestamp_;
	NSMutableArray* newReleasedBuddiesMIDs_;
	UIButton* inviteFriendButton_;
	UIButton* qrCodeButton_;
	UIButton* shakeButton_;
	UIButton* idSearchButton_;
}
@property(assign, nonatomic) long long newReleasedBuddyTimestamp;
@property(assign, nonatomic) RecommendationViewController* delegate;
-(void).cxx_destruct;
-(BOOL)render;
-(void)onUserIDPressed:(id)pressed;
-(void)onQRCodePressed:(id)pressed;
-(void)onBuddyListPressed:(id)pressed;
-(void)onInviteFriendsPressed:(id)pressed;
-(void)onShakeShakePressed:(id)pressed;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)setupAddFriendView;
-(void)rePositionIconView:(id)view;
-(void)buildButton:(id)button withLabelText:(id)labelText icon:(id)icon background:(id)background selected:(id)selected;
@end

__attribute__((visibility("hidden")))
@interface LACheckButton : UIButton {
	unsigned _type;
}
+(id)largeButton;
+(id)mediumButton;
+(id)smallButton;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setupButtonWithType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface SelectBuddyCountryViewController : NLTableViewController <UIAlertViewDelegate> {
	NSMutableArray* countryList_;
	NSMutableArray* buddyProvidedCountryCode_;
	NSString* selectedCountryCode_;
	NSIndexPath* selectedCountryIndexPath_;
	id selectDelegate;
}
@property(assign, nonatomic) id selectDelegate;
@property(retain, nonatomic) NSString* selectedCountryCode;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)toggleCheckmarkedCell:(id)cell;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)selectCountryAction;
-(void)viewDidLoad;
-(id)init;
-(void)makeTableData;
@end

__attribute__((visibility("hidden")))
@interface BuddyTableViewCell : LineTableViewCell <HitokotoBalloonViewDelegate> {
	NSString* userName_;
	NSString* statusMessage_;
	ProfileImageView* profileImageView_;
	UILabel* nameLabel_;
	HitokotoBalloonView* hitokotoView_;
	UIButton* addButton_;
	UIImageView* newUserImageView_;
	BOOL highLightCell_;
	BOOL enableHighlightingNewFriend_;
	NSString* buddyMid_;
	id<BuddyTableViewCellDelegate> delegate;
}
@property(assign, nonatomic) id<BuddyTableViewCellDelegate> delegate;
@property(assign, nonatomic) BOOL enableHighlightingNewFriend;
@property(assign, nonatomic) BOOL profileImageTouchEnabled;
@property(assign, nonatomic) BOOL highLightCell;
@property(retain, nonatomic) ProfileImageView* profileImageView;
@property(retain, nonatomic) NSString* statusMessage;
@property(retain, nonatomic) NSString* userName;
@property(retain, nonatomic) UILabel* nameLabel;
@property(retain, nonatomic) NSString* buddyMid;
-(void).cxx_destruct;
-(BOOL)render;
-(void)addBuddy:(id)buddy;
-(void)setAddButtonVisibleAndHitokotoHidden:(BOOL)hidden;
-(void)setHitokotoUserInteractiveEnabled:(BOOL)enabled;
-(void)hitokotoTouchUpInside:(id)inside;
-(void)setHitokoto:(id)hitokoto;
-(void)clearImage;
-(void)addProfileImageGestureRecognizer:(id)recognizer;
-(void)customizeWithContact:(id)contact;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)setupViews;
@end

__attribute__((visibility("hidden")))
@interface DetailBuddyListViewController : NLViewController <UIScrollViewDelegate, UIAlertViewDelegate, NLProfilePopupViewerDelegate, LineNetworkErrorViewDelegate, LineNavigationControllerDelegate> {
	id delegate_;
	UITableView* tableView_;
	UIView* noBuddyView_;
	NSMutableArray* buddyList_;
	unsigned currentFetchPage;
	BOOL isFetchMoreLoading;
	CGPoint tableViewOffset_;
	NSString* classificationCode_;
	NSString* classificationName_;
	NSString* selectedCountryCode_;
	BOOL isLoadedBuddyList_;
	BOOL isMovingForChat;
	NLFooterView* loadingFooterView;
	UIView* searchTableFooterView;
	NLProfilePopupViewer* profilePopupViewer;
	NSArray* newlyAddedMids_;
	int totalBuddyCount;
}
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(assign, nonatomic) int totalBuddyCount;
@property(retain, nonatomic) NSArray* newlyAddedMids;
@property(retain, nonatomic) NSString* selectedCountryCode;
@property(retain, nonatomic) NSString* classificationName;
@property(retain, nonatomic) NSString* classificationCode;
@property(assign, nonatomic) id delegate;
-(void).cxx_destruct;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)retry;
-(BOOL)shouldDismissViewController;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(void)removeBuddy:(id)buddy reloadData:(id)data;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)init;
-(void)showNetworkError;
-(void)fetchMoreBuddies;
-(void)refreshNoBuddyView;
-(void)clearNoteViewWithAnimated:(BOOL)animated;
-(void)showNoteViewIfNeededWithAnimated:(BOOL)animated;
-(void)setupNoBuddyView;
-(void)setupTableView;
@end

__attribute__((visibility("hidden")))
@interface NLCDVNotificationCommand : CDVNotification {
}
-(void)vibrate:(id)vibrate withDict:(id)dict;
-(void)alert:(id)alert withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface LineResourceManager : NSObject {
}
+(id)imagesFromPasteboardName:(id)pasteboardName;
+(id)presentModalViewController:(id)controller options:(unsigned)options;
+(void)navigationController:(id)controller setTransitionStyle:(id)style;
+(id)navigationControllerToPresent:(id)present parameters:(id)parameters;
+(id)urlCanBeHandleAppsWithScheme:(id)scheme;
+(BOOL)canBeHandleAppsWithScheme:(id)scheme;
+(void)closeAllWindowsIfExists;
+(void)closeSpecificModalViewControllerIfExistWithName:(id)name;
+(void)commonBeforeExecuteScheme:(int)scheme;
+(void)processURL:(id)url withOptions:(unsigned)options;
+(void)processURL:(id)url;
+(void)processURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(int)lineSchemeFromURL:(id)url;
+(Class)lineResourceHandlerFromURL:(id)url;
+(void)closeModalViewControllerIfExists;
+(BOOL)isInWhitelist:(id)whitelist;
+(id)topControllerFromViewController:(id)viewController;
+(id)trimLineSchemeFromURL:(id)url;
+(BOOL)isLineAuthScheme:(id)scheme;
+(BOOL)isLineScheme:(id)scheme;
+(id)lineSchemeNameOnly;
+(id)lineAuthScheme;
+(id)lineScheme;
+(id)lineRedirectOldURL;
+(id)lineRedirectURL;
+(id)lineOldURL;
+(id)lineURL;
+(BOOL)isPhaseBeforeRC;
+(BOOL)isPhaseBeforeReal;
+(id)phase;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface NLMessageGroupBoardView : NLMessageBubbleView {
	UIImage* _defaultThumbnailPhotoImage;
	UIImage* _defaultThumbnailVideoImage;
	UIImage* _defaultThumbnailStickerImage;
	NMAttributedLabel* _cafePostTextLabel;
	UILabel* _cafeTailLabel;
	UIImageView* _cafeThumbImageView;
	UIImageView* _cafeThumbImageBorder;
	UIButton* _cafeGoButton;
	UIImageView* _cafeArrowIconView;
	UIImageView* _cafeFlagIconView;
	UILabel* _cafeAddressLabel;
	UIView* _divideLineView;
	GroupBoardModel* _cafePostObject;
}
@property(assign, nonatomic) CGRect textBounds;
@property(retain, nonatomic) GroupBoardModel* cafePostObject;
@property(readonly, assign, nonatomic) UIView* divideLineView;
@property(readonly, assign, nonatomic) UILabel* cafeAddressLabel;
@property(readonly, assign, nonatomic) UIImageView* cafeFlagIconView;
@property(readonly, assign, nonatomic) UIImageView* cafeArrowIconView;
@property(readonly, assign, nonatomic) UIButton* cafeGoButton;
@property(readonly, assign, nonatomic) UIImageView* cafeThumbImageBorder;
@property(readonly, assign, nonatomic) UIImageView* cafeThumbImageView;
@property(readonly, assign, nonatomic) UILabel* cafeTailLabel;
@property(readonly, assign, nonatomic) NMAttributedLabel* cafePostTextLabel;
-(void).cxx_destruct;
-(BOOL)render;
-(void)applyRulesetStyle;
-(void)applyRulesetStyleToControls;
-(void)setInitialControlProperties;
-(id)deletedIconImage;
-(id)defaultThumbnailImage;
-(float)startYPos;
-(float)startXPos;
-(CGSize)contentSize;
-(void)configureThumbnail;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)setRulesetStyleNameForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
@end

__attribute__((visibility("hidden")))
@interface NLCallDeviceManager : NSObject <AMPCallSessionDelegate> {
	id<NDeviceSessionDelegate> _sessionDelegate;
	id<NDeviceErrorDelegate> _errorDelegate;
	AMPCallSession* _session;
	NSString* _applicationInfo;
	NSString* _mUUID;
}
@property(retain, nonatomic) NSString* mUUID;
@property(retain, nonatomic) NSString* applicationInfo;
@property(retain, nonatomic) AMPCallSession* session;
@property(assign, nonatomic) id<NDeviceErrorDelegate> errorDelegate;
@property(assign, nonatomic) id<NDeviceSessionDelegate> sessionDelegate;
-(void).cxx_destruct;
-(void)sendDTMF:(id)dtmf;
-(id)currentSession;
-(void)releaseResource:(id)resource withParameters:(id)parameters;
-(void)logTimestampDidGetToken;
-(void)logTimestampWillGetToken;
-(BOOL)availableVideoCallDevice;
-(BOOL)isInCallDevice;
-(id)stringAMPReportEventType:(int)type;
-(id)stringAMPCallEventType:(int)type;
-(void)didReceiveAMPReportEvent:(id)event;
-(void)session:(id)session didReceiveCallEvent:(id)event;
-(id)calleeNameFromCallParameters:(id)callParameters;
-(id)generateAMPUserInfoFromCallParameters:(id)callParameters;
-(id)ampLogServerURL;
-(void)initCamera;
-(BOOL)createAMPSession:(id)session;
-(void)dealloc;
-(void)initializeVoIPModule;
-(id)init;
-(void)handleLineCallErrorCode:(int)code withAmpCode:(int)ampCode parameters:(id)parameters;
-(void)handleCallErrorCode:(int)code withAmpCode:(int)ampCode parameters:(id)parameters;
-(int)errorCodeFromAmpKitLineCallTerminationT:(int)ampKitLineCallTerminationT;
-(int)errorCodeFromAmpKitVideoTerminationT:(int)ampKitVideoTerminationT;
-(int)errorCodeFromAmpKitCallTerminationT:(int)ampKitCallTerminationT;
-(int)errorCodeFromAmpKitRetType:(int)ampKitRetType;
-(void)handleAmpKitError:(id)error parameters:(id)parameters;
@end

__attribute__((visibility("hidden")))
@interface LineTicketScheme : NSObject {
}
+(void)startToTalkWithUserMID:(id)userMID;
+(void)showAddFriendsWithVC:(id)vc;
+(void)doAddFriendsWithMID:(id)mid;
+(void)doAddFriendsWithUserID:(id)userID;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
+(id)generateUserTicketOldURLWithTicket:(id)ticket;
+(id)generateUserTicketURLWithTicket:(id)ticket;
+(id)getUserTicketURL:(id)url;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)ticketUserOldURL;
+(id)ticketUserURL;
+(id)ticketUserScheme;
+(id)ticketOldURL;
+(id)ticketURL;
+(id)ticketScheme;
@end

__attribute__((visibility("hidden")))
@interface LineMessageScheme : NSObject {
}
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(id)returnParametersFromContents:(id)contents;
+(id)imagesFromContents:(id)contents;
+(id)messageFromContents:(id)contents;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(BOOL)isImageContentURL:(id)url;
+(BOOL)isMessageContentURL:(id)url;
+(BOOL)isContentURL:(id)url;
+(id)contentURL;
+(id)contentSheme;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
@end

__attribute__((visibility("hidden")))
@interface LineAuthScheme : NSObject {
}
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(BOOL)isEmailAuthURL:(id)url;
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(BOOL)isDesktopAuthURL:(id)url;
+(BOOL)isQRAuthURL:(id)url;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)getQRCodeTicket:(id)ticket;
+(id)extractParametersFromDesktopSchemeUrl:(id)desktopSchemeUrl;
@end

__attribute__((visibility("hidden")))
@interface MBErrorMessageView : MBMessageView {
	UIImageView* mImageView;
	UILabel* mLabel;
	MBRoundButton* mButton;
}
+(id)networkErrorMessageView;
+(id)errorMessageView;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame message:(id)message;
-(void)setupSubviews;
@end

__attribute__((visibility("hidden")))
@interface LAPhoto : NSObject {
	NSString* albumId;
	NSString* photoId;
	NSDate* created;
	NSDate* shotted;
	NSString* oid;
	LAUser* owner;
	NSDictionary* exif;
	int width;
	int height;
}
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) NSDictionary* exif;
@property(retain, nonatomic) LAUser* owner;
@property(retain, nonatomic) NSString* oid;
@property(retain, nonatomic) NSDate* shotted;
@property(retain, nonatomic) NSDate* created;
@property(retain, nonatomic) NSString* photoId;
@property(retain, nonatomic) NSString* albumId;
-(void).cxx_destruct;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LineGroupBoardScheme : NSObject {
}
+(void)openGroupBoard:(id)board;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)cafeURL;
+(id)groupBoardScheme;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumCell : UITableViewCell <LASyncStatusObserving> {
	NSString* _groupID;
	LAAlbum* _album;
	int _type;
	id _delegate;
	UIImageView* _backgroundImageView;
	UILabel* _titleLabel;
	UILabel* _infoLabel;
	UIImageView* _newmarkImageView;
	LANumberView* _photoCountView;
	UIButton* _chooseButton;
	LARecentPhotosView* _recentPhotosView;
}
@property(retain, nonatomic) LARecentPhotosView* recentPhotosView;
@property(retain, nonatomic) UIButton* chooseButton;
@property(retain, nonatomic) LANumberView* photoCountView;
@property(retain, nonatomic) UIImageView* newmarkImageView;
@property(retain, nonatomic) UILabel* infoLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) LAAlbum* album;
@property(retain, nonatomic) NSString* groupID;
+(id)albumCellWithType:(int)type album:(id)album groupID:(id)anId tableView:(id)view;
+(float)height;
-(void).cxx_destruct;
-(void)syncOBSNotificationPhotoAddCanceled:(id)canceled groupID:(id)anId packageType:(int)type;
-(void)syncOBSNotificationPhotoProgress:(float)progress albumID:(id)anId groupID:(id)anId3;
-(void)syncOBSNotificationPhotoAddFailed:(id)failed groupID:(id)anId error:(id)error;
-(void)syncOBSNotificationPhotoAddCompleted:(id)completed groupID:(id)anId;
-(void)syncOBSNotificationPhotoAdd:(id)add added:(int)added total:(int)total albumID:(id)anId groupID:(id)anId5 error:(id)error;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)layoutSubviews;
-(void)updateContents;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBUrl : NSObject <NSCoding> {
	int mType;
	NSString* mTargetUrl;
	NSString* mMarketUrl;
	BOOL mFriendOnly;
}
@property(readonly, assign, nonatomic) BOOL friendOnly;
@property(readonly, assign, nonatomic) NSString* margetUrl;
@property(readonly, assign, nonatomic) NSString* targetUrl;
@property(readonly, assign, nonatomic) int type;
+(int)actionWithUrl:(id)url;
-(void).cxx_destruct;
-(id)initWithUrlInfo:(id)urlInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LineChannelScheme : NSObject {
}
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)channelUrl;
+(id)channelScheme;
+(void)getChannelWithChannelID:(id)channelID parameters:(id)parameters;
+(void)openChannel:(id)channel withParameters:(id)parameters;
+(id)eventNavigationViewController;
+(void)showPermissionNeededToUserWithChannel:(id)channel parameters:(id)parameters;
+(void)openMyHomeWithParameters:(id)parameters;
+(void)showMyhomeViewController:(id)controller;
+(void)openChannelBrowserWithChannel:(id)channel parameters:(id)parameters;
+(void)showLoadingView;
+(void)hideLoadingView;
+(void)setAllowOpenBrowser:(BOOL)browser;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
@end

__attribute__((visibility("hidden")))
@interface NLThemeShopDetailView : UIView <UIScrollViewDelegate> {
	BOOL _isReceivedGiftProduct;
	id<NLThemeShopDetailViewDelegate> _delegate;
	UIScrollView* _bgScrollView;
	NLFrameImageView* _packageIconImageView;
	UILabel* _authorLabel;
	UILabel* _nameLabel;
	UILabel* _validDaysLabel;
	UIImageView* _coinImageView;
	UILabel* _priceLabel;
	UILabel* _presentWarningLabel;
	UIButton* _presentButton;
	UIButton* _purchaseButton;
	UIView* _separatorView;
	UILabel* _descriptionLabel;
	UIScrollView* _previewScrollView;
	UILabel* _copyrightLabel;
	UIView* _imageLoadingErrorBGView;
	UILabel* _imageLoadingErrorLabel;
	UIButton* _imageLoadingErrorButton;
}
@property(assign, nonatomic) BOOL isReceivedGiftProduct;
@property(retain, nonatomic) UIButton* imageLoadingErrorButton;
@property(retain, nonatomic) UILabel* imageLoadingErrorLabel;
@property(retain, nonatomic) UIView* imageLoadingErrorBGView;
@property(retain, nonatomic) UILabel* copyrightLabel;
@property(retain, nonatomic) UIScrollView* previewScrollView;
@property(retain, nonatomic) UILabel* descriptionLabel;
@property(retain, nonatomic) UIView* separatorView;
@property(retain, nonatomic) UIButton* purchaseButton;
@property(retain, nonatomic) UIButton* presentButton;
@property(retain, nonatomic) UILabel* presentWarningLabel;
@property(retain, nonatomic) UILabel* priceLabel;
@property(retain, nonatomic) UIImageView* coinImageView;
@property(retain, nonatomic) UILabel* validDaysLabel;
@property(retain, nonatomic) UILabel* nameLabel;
@property(retain, nonatomic) UILabel* authorLabel;
@property(retain, nonatomic) NLFrameImageView* packageIconImageView;
@property(retain, nonatomic) UIScrollView* bgScrollView;
@property(assign, nonatomic) id<NLThemeShopDetailViewDelegate> delegate;
-(void).cxx_destruct;
-(void)determainTargetContentOffset:(inout CGPoint*)offset velocity:(CGPoint)velocity;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)disablePurchaseButton;
-(void)enablePurchaseButton;
-(void)disablePresentButton;
-(void)enablePresentButton;
-(id)product;
-(void)onPreviewRetryButtonTapped:(id)tapped;
-(void)onPreviewImageButtonTapped:(id)tapped;
-(void)onButtonTapped:(id)tapped;
-(void)layoutSubviews;
-(void)initSubview;
-(void)setPackagePreviewImageType:(int)type image:(id)image;
-(void)setPackageExpiredString:(id)string;
-(void)setPackagePrice:(id)price;
-(void)setPackageIconImage:(id)image;
-(void)hideImageLoadingErrorView;
-(void)showImageLoadingErrorView;
-(void)reloadPackageStateWithPackage:(id)package;
-(void)reloadDetailView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame isPresented:(BOOL)presented;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumNoPhotosView : LAMessageView {
	NSString* _albumId;
	NSString* _groupId;
}
@property(retain, nonatomic) NSString* groupId;
@property(retain, nonatomic) NSString* albumId;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame albumId:(id)anId groupId:(id)anId3 buttonType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface NLSticonKeyboardLoadingView : UIView {
	UIActivityIndicatorView* _activityIndicator;
	UILabel* _loadingLabel;
}
@property(retain, nonatomic) UILabel* loadingLabel;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
-(void).cxx_destruct;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)willMoveToSuperview:(id)superview;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineShopScheme : NSObject {
}
+(id)processShopParameter:(id)parameter query:(id)query withOptions:(unsigned)options;
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)shopUrl;
+(id)shopScheme;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
@end

__attribute__((visibility("hidden")))
@interface LineAppAuthScheme : NSObject {
}
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(void)executeAppAuthWithURL:(id)url sourceApplication:(id)application;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
+(void)getChannelWithChannelID:(id)channelID withCompleteBlock:(id)completeBlock;
+(void)showPermissionNeededToUserWithChannel:(id)channel otpID:(id)anId sourceApplication:(id)application toReturnURL:(id)returnURL;
+(id)appAuthErrorCode:(id)code;
+(void)showLoadingView;
+(void)hideLoadingView;
+(void)invokeReturnUrl:(id)url withParameterString:(id)parameterString;
+(id)makeResultParameterFromResultCode:(id)resultCode resultMessage:(id)message requestToken:(id)token;
+(id)appAuthScheme;
@end

__attribute__((visibility("hidden")))
@interface MBViewController : UIViewController {
	BOOL mIsInitLoading;
	NSError* mError;
	MBIndicatorView* mIndicatorView;
}
@property(assign, nonatomic) BOOL isInitLoading;
-(void).cxx_destruct;
-(id)sourceTypeStringWithType:(int)type;
-(int)sourceTypeWithTypeString:(id)typeString;
-(void)hideLoadingView;
-(void)showLoadingView;
-(void)update;
-(id)childViewControllerForStatusBarStyle;
-(int)preferredStatusBarStyle;
-(BOOL)isBackStatus;
-(BOOL)isCloseStatus;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LAEtagManager : NSObject {
	NSMutableDictionary* mEtagDict;
}
+(id)sharedManager;
-(void).cxx_destruct;
-(id)etag:(id)etag groupID:(id)anId;
-(void)setEtag:(id)etag urlString:(id)string groupID:(id)anId;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MoreViewController : NLViewController <PSTCollectionViewDelegateFlowLayout, PSTCollectionViewDelegate, PSTCollectionViewDataSource, LineMoreManagerDelegate> {
	UIView* headerTabView_;
	UIView* layoutGuide_;
	NSFetchRequest* recommendedUsersFetchRequest_;
	NSFetchRequest* recommendedGroupsFetchRequest_;
	NSDate* lastBuddyUpdate_;
	LineMoreItem* chosenBannerItem_;
	int numberOfItems;
	PSUICollectionView_* collectionView_;
}
@property(retain, nonatomic) PSUICollectionView_* collectionView;
-(void).cxx_destruct;
-(void)updateBuddyBadgeForce;
-(void)checkThemeShopNew;
-(void)updateBuddyBadgeIfNeed;
-(void)badgeNewCount:(id)count count:(unsigned)count2;
-(void)updateMoreItemBadge;
-(void)updateBadgeWithDelay;
-(void)updateBadge;
-(void)lineMoreItemDownloadFailed;
-(void)lineMoreItemBadgeCountMightBeUpdated;
-(void)refreshButtonWithItem:(id)item;
-(void)lineMoreItemNewIconUpdated:(id)updated;
-(void)lineMoreItemsHasNoUpdate;
-(void)lineMoreItemsHasUpdated;
-(float)collectionView:(id)view layout:(id)layout minimumLineSpacingForSectionAtIndex:(int)index;
-(float)collectionView:(id)view layout:(id)layout minimumInteritemSpacingForSectionAtIndex:(int)index;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(void)adjustSubViewOriginForIOS7StatusBar;
-(void)actionTouched:(id)touched;
-(void)updateTabBadge;
-(id)recommendedUsersFetchRequest;
-(void)setupHeaderTabView;
-(void)updateMyprofile;
-(void)presentModalViewController:(id)controller animated:(BOOL)animated;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(id)init;
-(void)initializeLogic;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineHiddenSettingCell : MBTableViewActionCell {
	UIButton* mCheckButton;
	MBURLImageView* mProfileImageView;
	UILabel* mNicknameLabel;
	UIView* mUpLine;
	UIView* mDownLine;
	MBFriend* mFriend;
	NSIndexPath* mIndexPath;
}
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(retain, nonatomic) MBFriend* friend;
+(float)height;
+(id)timelineHiddenSettingCellForTableView:(id)tableView;
-(void).cxx_destruct;
-(void)setFriendButton:(BOOL)button;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface LAUploadAssetModel : NSObject <NSCoding> {
	BOOL _shouldCleanUpFiles;
	NSURL* _originalImageFileURL;
	NSURL* _editedImageFileURL;
	unsigned _filterIndex;
	unsigned _rotateCount;
	NSURL* _assetURL;
}
@property(assign, nonatomic) BOOL shouldCleanUpFiles;
@property(retain, nonatomic) NSURL* assetURL;
@property(assign, nonatomic) unsigned rotateCount;
@property(assign, nonatomic) unsigned filterIndex;
@property(retain, nonatomic) NSURL* editedImageFileURL;
@property(retain, nonatomic) NSURL* originalImageFileURL;
-(void).cxx_destruct;
-(void)cleanUpTempFiles;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineMoreManager : NSObject {
}
+(BOOL)shouldShowNewIcon:(id)icon;
+(void)setTimelineItemHasNewPost:(BOOL)post;
+(id)itemWithArray:(id)array itemId:(int)anId;
+(id)itemWithArray:(id)array itemType:(unsigned)type subType:(unsigned)type3;
+(void)setOfficialAccountsBadge:(int)badge;
+(void)setStickerShopBadge:(int)badge;
+(void)setThemeShopBadge:(int)badge;
+(void)setNotificationsBadge:(int)badge;
+(void)setTimelineBadge:(int)badge;
+(void)setAddFriendsBadge:(int)badge;
+(void)setSettingsBadge:(int)badge;
+(void)updateBadge:(int)badge forSpecialItem:(id)specialItem;
+(void)removeDelegate:(id)delegate;
+(void)addDelegate:(id)delegate;
+(BOOL)validateAliveBannerItem:(long long)item;
+(void)validateAliveBannerItems;
+(id)chooseBannerItem;
+(BOOL)isBannerAtThisIndexPath:(id)thisIndexPath;
+(id)channelInfoForCategoryItemId:(int)categoryItemId;
+(id)rankingItemsForCategoryId:(int)categoryId;
+(id)friendMatrixItemForChannelId:(id)channelId;
+(id)bannerInfoForCategoryItemId:(int)categoryItemId;
+(id)titleForCategoryItemId:(int)categoryItemId;
+(id)itemsForCategoryItemId:(int)categoryItemId;
+(id)items;
+(void)updateHomeAddFriendsItem:(id)item;
+(void)updateHomeTimelineItem:(id)item;
+(id)homeItems;
+(id)itemsForBanner;
+(void)updateRecommendBadge;
+(void)controlTimelineItemBadge;
+(void)setMoreTabOpenedDateForCategoryId:(int)categoryId;
+(void)setMoreTabOpenedDate;
+(void)setOpenedDateForItems:(id)items;
+(void)clearBadgeCountForCategoryId:(int)categoryId;
+(void)clearBadgeCount;
+(void)clearBadgeForItems:(id)items;
+(int)getAllBadgeCount;
+(void)openUrlAtInAppBrowserVC:(id)appBrowserVC;
+(void)actionForItem:(id)item;
+(void)tappedButtonForItem:(id)item;
+(BOOL)saveMoreTabData:(id)data country:(id)country language:(id)language;
+(void)downloadListWithCountry:(id)country language:(id)language;
+(void)updateMoretab;
+(BOOL)checkMoretabData:(id)data;
+(void)initialize;
+(id)moreTabTopItems;
+(id)allVisibleItems;
+(BOOL)version:(id)version isBiggerThanOrEqualTo:(id)to;
+(id)parseBannerlistData:(id)data withItemData:(id)itemData;
+(id)parseCategorylistData:(id)data withItemData:(id)itemData;
+(id)parseMoretabData:(id)data withItemData:(id)itemData;
+(id)parseItemData:(id)data;
+(void)parseList:(id)list;
+(void)setLastUpdatedVersion:(int)version itemId:(int)anId;
+(void)outputDebugInfoToLog;
+(void)jibaku;
+(void)saveToUserDefault;
+(BOOL)isExpiredForCategory:(long long)category statusObject:(id)object forId:(int)anId;
+(BOOL)isExpiredForNewFlag:(long long)newFlag newFlagVersion:(int)version forId:(int)anId;
+(void)setFriendMatricesCache:(id)cache;
+(void)setCacheExpirationTime:(long long)time forCategoryId:(int)categoryId;
+(void)setLastSeenCategoryStatus:(id)status firstSeenDate:(long long)date forId:(int)anId;
+(void)setLastSeenNewFlagVersion:(int)version firstSeenDate:(long long)date forId:(int)anId;
+(void)setLastRecognizedCategoryStatus:(id)status id:(int)anId;
+(void)setLastRecognizedVersion:(int)version id:(int)anId;
+(void)setLastTappedCategoryVersion:(id)version forId:(int)anId;
+(void)setLastTappedVersion:(int)version forId:(int)anId;
+(id)friendMatricesCache;
+(long long)cacheExpirationTimeForCategoryId:(int)categoryId;
+(long long)firstSeenDateForId:(int)anId;
+(id)lastSeenCategoryNewFlagVersionForId:(int)anId;
+(int)lastSeenNewFlagVersionForId:(int)anId;
+(id)lastSeenCategoryNewFlagVersionsAndFirstSeenDateForId:(int)anId;
+(id)lastSeenNewFlagVersionAndFirstSeenDateForId:(int)anId;
+(id)lastRecognizedCategoryStatusForId:(int)anId;
+(int)lastRecognizedVersionForId:(int)anId;
+(int)lastUpdatedVersionForId:(int)anId;
+(id)lastTappedCategoryStatusForId:(int)anId;
+(int)lastTappedVersionForId:(int)anId;
+(id)lastTappedVersionDictionary;
@end

__attribute__((visibility("hidden")))
@interface NLManualLayoutButton : UIButton {
	CGRect _imageViewFrame;
	CGRect _titleLabelFrame;
}
@property(assign, nonatomic) CGRect titleLabelFrame;
@property(assign, nonatomic) CGRect imageViewFrame;
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface LineMoreItem : NSObject {
	NSURL* imageUrlForGridList_;
	NSURL* imageUrlForTable_;
	double lastTimeCalculatedComparisonNumber_;
	NSNumber* cachedComparisonNumber_;
	BOOL isNew_;
	BOOL appearsInBothDepth;
	int itemId_;
	NSString* appId_;
	int version_;
	NSString* url_;
	NSString* title_;
	NSString* subTitle_;
	NSURL* appStoreUrl_;
	NSURL* campaignUrl_;
	unsigned wideItem_;
	unsigned type_;
	int subType_;
	unsigned tabType_;
	unsigned bannerType_;
	NSString* imageUrlBase_;
	int newFlagVersion_;
	NSArray* banners_;
	int badgeType_;
	NSString* channelId_;
	unsigned weight_;
	NSString* themeIconKey_;
	FriendMatrixItem* friendMatrixItem_;
	long long expireDate_;
}
@property(assign, nonatomic) unsigned weight;
@property(retain, nonatomic) NSString* subTitle;
@property(assign, nonatomic) long long expireDate;
@property(assign, nonatomic) unsigned bannerType;
@property(retain, nonatomic) NSString* appId;
@property(retain, nonatomic) NSString* themeIconKey;
@property(retain, nonatomic) FriendMatrixItem* friendMatrixItem;
@property(retain, nonatomic) NSString* channelId;
@property(assign, nonatomic) int badgeType;
@property(assign, nonatomic) BOOL appearsInBothDepth;
@property(retain, nonatomic) NSArray* banners;
@property(assign, nonatomic) int newFlagVersion;
@property(assign, nonatomic) int version;
@property(assign, nonatomic) int itemId;
@property(assign, nonatomic) unsigned wideItem;
@property(assign, nonatomic) BOOL isNew;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSURL* campaignUrl;
@property(retain, nonatomic) NSURL* appStoreUrl;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* imageUrlBase;
@property(assign, nonatomic) unsigned tabType;
@property(assign, nonatomic) int subType;
@property(assign, nonatomic) unsigned type;
+(id)newTimelineItem;
+(id)newNoticeItem;
+(id)newOfficialAccountItem;
+(id)newStickerShopItem;
+(id)newProfileItem;
+(id)newSettingsItem;
+(id)newAddFriendsItem;
+(id)bannerWithItemId:(int)itemId appId:(id)anId version:(int)version bannerType:(unsigned)type imageUrlBase:(id)base url:(id)url title:(id)title subTitle:(id)title8 appStoreUrl:(id)url9 badgeType:(int)type10 weight:(unsigned)weight expireDate:(long long)date;
+(id)itemWithId:(int)anId version:(int)version type:(unsigned)type subType:(int)type4 tabType:(unsigned)type5 imageUrlBase:(id)base url:(id)url title:(id)title appStoreUrl:(id)url9 campaignUrl:(id)url10 newFlagVersion:(int)version11 isNew:(BOOL)aNew badgeType:(int)type13 themeIconKey:(id)key channelId:(id)anId15;
-(void).cxx_destruct;
-(id)numberForComparisonInCategoryRanking;
-(BOOL)isEqualToItemType:(id)itemType;
-(BOOL)isLineCallItem;
-(BOOL)isThemeShopItem;
-(BOOL)isMusicItem;
-(BOOL)isGamesItem;
-(BOOL)isLineAppItem;
-(BOOL)isProfileItem;
-(BOOL)isHomeItem;
-(BOOL)isOfficialAccountItem;
-(BOOL)isStickerShopItem;
-(BOOL)isNotificationItem;
-(BOOL)isTimelineItem;
-(BOOL)isAddFriendsItem;
-(BOOL)isSettingsItem;
-(BOOL)isSpecialNewFlagRuleItem;
-(BOOL)isInstallableNativeApp;
-(id)imageUrlForListType:(unsigned)listType;
-(BOOL)isDefaultItem;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MoreTabButtonView : UIButton {
	MoreTabImageView* imageView_;
	LineMoreItem* item_;
	ProfileImageView* profileImageView_;
	NMAttributedLabel* attributedMainLabel_;
	UILabel* subTitle_;
	UIImageView* nextArrow_;
	UIImageView* specialNotice_;
	unsigned _moretabButtonType;
	unsigned _buttonBGType;
}
@property(assign, nonatomic) unsigned buttonBGType;
@property(assign, nonatomic) unsigned moretabButtonType;
@property(retain, nonatomic) UIImageView* specialNotice;
@property(retain, nonatomic) UIImageView* nextArrow;
@property(retain, nonatomic) UILabel* subTitle;
@property(retain, nonatomic) NMAttributedLabel* attributedMainLabel;
@property(readonly, assign, nonatomic) ProfileImageView* profileImageView;
@property(retain, nonatomic) LineMoreItem* item;
+(float)heightForButtonView;
-(void).cxx_destruct;
-(BOOL)render;
-(void)applyRuleset;
-(void)onTap:(id)tap;
-(void)layoutSubviews;
-(void)initBackgroundImage;
-(id)initWithIndexPath:(id)indexPath;
@end

__attribute__((visibility("hidden")))
@interface LineNavigationScheme : NSObject {
}
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)navigationSchemeURL;
+(id)navigationScheme;
+(id)extractInnerNavigationUrl:(id)url withParentUrl:(id)parentUrl;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
+(id)viewControllerWithPath:(id)path param:(id)param;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphContactsSection : SocialGraphSection {
}
-(BOOL)canBeShownInSearchResult;
-(BOOL)needsShownInSearchResult;
-(id)titleForFilteredSection;
-(id)titleForSection;
-(BOOL)isContactMoreWithIndexPath:(id)indexPath;
-(int)numberOfRowsInSectionWithTableView:(id)tableView;
-(BOOL)hasFilteredObjectInSectionNow;
-(BOOL)hasFilteredObjects;
-(BOOL)hasObjectInSectionNow;
-(BOOL)hasObjects;
-(BOOL)isNormalMode;
-(id)filteredFetchRequest;
-(id)fetchRequest;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationCenterListViewController : NLViewController <NSFetchedResultsControllerDelegate, UITableViewDelegate, UITableViewDataSource> {
	UITableView* _tableView;
	UIImageView* popupBackgroundImageView;
	UILabel* popupTitleLabel;
	UIView* loadingView;
	UIActivityIndicatorView* spinner;
	UIView* errorView;
	UIView* errorCenteringView;
	UIImageView* errorImageView;
	UILabel* errorMessageLabel;
	UIButton* reloadButton;
	UIView* emptyView;
	UIView* emptyCenteringView;
	UIImageView* emptyImageView;
	UILabel* emptyMessageLabel;
	NLNotificationCenterListViewCell* tmpCell;
	UINib* cellNib;
	NSFetchedResultsController* fetchedResultsController;
	NLTimeStringFormatter* timeStringFormatter;
	id fetchingObserver;
	UIButton* _closeNotificationButton;
	UIView* _popupView;
}
@property(retain, nonatomic) id fetchingObserver;
@property(retain, nonatomic) NLTimeStringFormatter* timeStringFormatter;
@property(retain, nonatomic) NSFetchedResultsController* fetchedResultsController;
@property(retain, nonatomic) UINib* cellNib;
@property(assign, nonatomic) NLNotificationCenterListViewCell* tmpCell;
@property(assign, nonatomic) UIView* popupView;
@property(assign, nonatomic) UIButton* closeNotificationButton;
@property(assign, nonatomic) UILabel* emptyMessageLabel;
@property(assign, nonatomic) UIImageView* emptyImageView;
@property(assign, nonatomic) UIView* emptyCenteringView;
@property(assign, nonatomic) UIView* emptyView;
@property(assign, nonatomic) UIButton* reloadButton;
@property(assign, nonatomic) UILabel* errorMessageLabel;
@property(assign, nonatomic) UIImageView* errorImageView;
@property(assign, nonatomic) UIView* errorCenteringView;
@property(assign, nonatomic) UIView* errorView;
@property(assign, nonatomic) UIActivityIndicatorView* spinner;
@property(assign, nonatomic) UIView* loadingView;
@property(assign, nonatomic) UILabel* popupTitleLabel;
@property(assign, nonatomic) UIImageView* popupBackgroundImageView;
@property(assign, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)resetStyledTextViewsCache;
-(void)renderViews;
-(void)reloadButtonTapped:(id)tapped;
-(void)closeView:(id)view;
-(void)controllerDidChangeContent:(id)controller;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)configureCell:(id)cell atIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)updateNewNotifications;
-(void)showEmptyViewIfNeeded;
-(void)showLoadingViewIfNeeded;
-(BOOL)isLastRowIndexPath:(id)path;
-(BOOL)isFirstRowIndexPath:(id)path;
-(id)notificationObjectAtIndexPath:(id)indexPath;
-(void)layoutSubviews;
-(void)configureSubviews;
-(void)configureEmptyView:(id)view;
-(void)configureErrorView:(id)view;
-(void)configureLoadingIndicatorView:(id)view;
-(void)configureLoadingView:(id)view;
-(void)configureEmptyMessageLabel:(id)label;
-(void)configureReloadButton:(id)button;
-(void)configureErrorMessageLabel:(id)label;
-(void)configureTableView:(id)view;
-(void)configurePopupTitleLabel:(id)label;
-(void)configurePopupBackgroundView:(id)view;
-(void)applyLocalizedStrings;
-(void)removeObservers;
-(void)addObservers;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationCenterWindowManager : NSObject {
}
+(BOOL)isShowing;
+(void)hide;
+(void)show;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationCenterListViewCell : UITableViewCell {
	ProfileImageView* thumbnailImageView;
	UIImageView* thumbnailBackgroundImageView;
	UILabel* senderLabel;
	UILabel* timeLabel;
	NLStyledTextView* notificationTextView;
	UIView* topBorder;
	UIView* bottomBorder;
	float height;
	NLNotificationCenterListViewCellUIPolicy* layouter;
	NSString* _lastId;
}
@property(retain, nonatomic) NSString* lastId;
@property(retain, nonatomic) NLNotificationCenterListViewCellUIPolicy* layouter;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) UIView* bottomBorder;
@property(assign, nonatomic) UIView* topBorder;
@property(assign, nonatomic) NLStyledTextView* notificationTextView;
@property(assign, nonatomic) UILabel* timeLabel;
@property(assign, nonatomic) UILabel* senderLabel;
@property(assign, nonatomic) ProfileImageView* thumbnailImageView;
@property(assign, nonatomic) UIImageView* thumbnailBackgroundImageView;
-(void).cxx_destruct;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(void)awakeFromNib;
-(id)initWithCoder:(id)coder;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBActor : NSObject {
	NSString* mActorID;
	NSString* mNickname;
	NSString* mPictureUrl;
	UIImage* mImage;
	UIImage* mListProfileImage;
	UIImage* mCoverProfileImage;
	double mImageLoadTime;
	BOOL mIsShouldReloadImage;
	NSMutableSet* mObservers;
	BOOL mLoading;
	BOOL mIsGetContact;
}
@property(assign, nonatomic) BOOL isShouldReloadImage;
@property(assign, nonatomic) BOOL isGetContact;
@property(retain, nonatomic) NSString* pictureUrl;
@property(retain, nonatomic) NSString* nickname;
@property(readonly, assign, nonatomic) NSString* actorID;
+(void)reloadImageWithMid:(id)mid;
+(void)resetShouldReloadForProfileImages;
+(void)setNickname:(id)nickname forActorWithMID:(id)mid;
+(id)actorWithCommentLikeActorInfo:(id)commentLikeActorInfo;
+(id)actorWithActorInfo:(id)actorInfo;
+(id)actorWithMID:(id)mid nickname:(id)nickname pictureUrl:(id)url;
+(id)actorWithMID:(id)mid;
+(void)initialize;
-(void).cxx_destruct;
-(id)profileImage;
-(void)setProfileImage:(id)image;
-(void)requestImageWithIsListUse:(BOOL)isListUse;
-(id)coverProfileImage;
-(id)listProfileImage;
-(void)resetImages;
-(void)callbackImage;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(BOOL)isMyself;
-(id)nicknameNoDelay;
-(id)currentNickname;
-(void)dealloc;
-(id)initWithMID:(id)mid;
-(void)loadNickname;
-(void)didLoadNickname:(id)nickname;
-(void)callbackObservers;
-(id)profileImageUrl;
@end

__attribute__((visibility("hidden")))
@interface NLSimpleProgressView : UIView {
	UIImageView* trackView;
	UIImageView* progressView;
}
-(void).cxx_destruct;
-(void)setProgress:(float)progress;
-(id)initWithFrame:(CGRect)frame imagesInfo:(id)info;
@end

__attribute__((visibility("hidden")))
@interface NLTimeStringFormatter : NSObject {
	NSDateFormatter* dateFormatter;
}
@property(retain, nonatomic) NSDateFormatter* dateFormatter;
-(void).cxx_destruct;
-(id)timeString:(id)string;
@end

__attribute__((visibility("hidden")))
@interface NL15SliceImageView : UIView {
	UIImage* mDefaultSlice[15];
	UIImage* mHighlightedSlice[15];
	CGPoint mTargetPoint;
	CGSize mContentSize;
	UIEdgeInsets mContentInsets;
	int mXPoints[6];
	int mYPoints[4];
	BOOL mIsHighlighted;
	UIView* mContentView;
	BOOL shouldPointerCenterized_;
	id<NL15SliceImageViewDelegate> mDelegate;
}
@property(assign, nonatomic) BOOL shouldPointerCenterized;
@property(retain, nonatomic) UIView* contentView;
@property(assign, nonatomic) id<NL15SliceImageViewDelegate> delegate;
-(void).cxx_destruct;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)refreshFrame;
-(void)setContentSize:(CGSize)size;
-(void)setTargetPoint:(CGPoint)point;
-(id)initWithImage:(id)image highlightedImage:(id)image2 cutAtX:(id)x Y:(id)y contentInsets:(UIEdgeInsets)insets;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationCenterFetcher : NSObject {
	NSMutableSet* readReservedNotifications_;
	BOOL neededBadgeCountReset_;
	NSManagedObjectContext* _moc;
	BOOL isFetching;
	BOOL readTabBarBadge;
	unsigned numberOfNewNotifications;
}
@property(assign, nonatomic) BOOL readTabBarBadge;
@property(assign, nonatomic) unsigned numberOfNewNotifications;
@property(assign, nonatomic) BOOL isFetching;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedFetcher;
-(void).cxx_destruct;
-(void)insertNotifications:(id)notifications;
-(void)setReadMarkForReadReservedNotifications;
-(void)resetAndInsertNotifications:(id)notifications;
-(void)fetchNotifications;
-(void)fetchNotificationBadgeCount;
-(void)appendReadReservedNotification:(id)notification;
-(id)init;
-(void)restoreLastStates;
-(void)storeCurrentStates;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationObject : _NLNotificationObject {
	NSAttributedString* parsedStyledText;
}
@property(retain, nonatomic) NSAttributedString* parsedStyledText;
+(id)notificationWithRevision:(long long)revision inContext:(id)context;
+(id)allNotificationsInContext:(id)context;
+(id)createNotificationObjectInManagedObjectContext:(id)managedObjectContext;
+(void)setReadMarkForReadReservedNotifications:(id)readReservedNotifications inContext:(id)context;
+(void)insertNotifications:(id)notifications excludingObjects:(id)objects withTempReadItems:(id)tempReadItems inContext:(id)context;
+(long long)lastFetchedRevisionInContext:(id)context;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface MBMovieContentView : MBBaseChildCellView {
	MBPhotoContentView* mPhotoContentView;
	UIImageView* mMovieImage;
	UIImageView* mCaptureImage;
	MBMovie* mMovie;
	MBSnapMovie* mSnapMovie;
	MBURLMovie* mMovieDownloader;
	UIView* mMovieDeletedBackgroundView;
	UIView* mMovieDeletedView;
	UIButton* mMovieDeletedIcon;
	UILabel* mMovieDeletedText;
	UIButton* mPlayAreaButton;
	UIButton* mMuteButton;
	UIButton* mPausedButton;
	UIImageView* mProgressView;
	UIImageView* mProgressBar;
	NSString* mMovieURLString;
	NSString* mExternalID;
	BOOL mIsPhotoSizeSmall;
	BOOL mIsDraw;
	int mActivityType;
	id mDownloadCompletionBlock;
}
@property(readonly, assign, nonatomic) MBMovie* movie;
@property(readonly, assign, nonatomic) NSString* externalID;
@property(readonly, assign, nonatomic) NSString* movieURLString;
@property(readonly, assign, nonatomic) MBPhotoContentView* photoContentView;
-(void).cxx_destruct;
-(void)setMovieDownloadProgress:(float)progress;
-(void)receiveDataMovie:(id)movie progress:(float)progress;
-(void)completeMovieDownload:(id)download;
-(void)downloadMovieResume;
-(void)setMovieDeletedState:(BOOL)state;
-(void)downloadMovie:(id)movie;
-(void)checkDownloadedMovieFile;
-(void)tappedPausedButton;
-(void)setDownloadCompletionBlock:(id)block;
-(BOOL)isEqualMovieURL:(id)url;
-(void)cancelDownload;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(void)dealloc;
-(void)setMovieDeletedTextEffectWithExistImage:(BOOL)existImage;
-(void)initMoviePlayButton;
-(void)initDeletedView;
-(void)headphoneUnpluggedNotification:(id)notification;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface NLCDVFileTransferCommand : CDVFileTransfer {
}
-(void)download:(id)download withDict:(id)dict;
-(void)upload:(id)upload withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface NLImageToDataTransformer : NSValueTransformer {
}
+(Class)transformedValueClass;
+(BOOL)allowsReverseTransformation;
-(id)reverseTransformedValue:(id)value;
-(id)transformedValue:(id)value;
@end

__attribute__((visibility("hidden")))
@interface LGAssetSection : NSObject {
	NSString* _sectionName;
	NSMutableArray* _assets;
}
@property(retain, nonatomic) NSMutableArray* assets;
@property(retain, nonatomic) NSString* sectionName;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallNavigationController : UINavigationController {
}
-(void)didReceiveMemoryWarning;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface NLSkinnedTabBarItem : UIImageView {
	int adjustWidthDelta_;
	BOOL selected;
	UILabel* titleLabel;
	UIImage* selectedImage;
	UIImage* deselectedImage;
	UIImage* eventImage;
	UIImage* backgroundImage;
	UIImageView* iconImageView;
	UIImageView* seperatorImageView;
	UIImageView* badgeView;
	UIImage* badgeBackgroundImage;
	UIColor* titleColor;
	UIColor* selectedTitleColor;
	float userDefinedWidth;
	float iconTopMargin;
	float titleTopMargin;
	UIColor* _titleShadowColor;
	UIColor* _selectedTitleShadowColor;
	CGSize badgeOffset;
}
@property(assign, nonatomic) BOOL selected;
@property(retain, nonatomic) UIColor* selectedTitleShadowColor;
@property(retain, nonatomic) UIColor* titleShadowColor;
@property(assign, nonatomic) CGSize badgeOffset;
@property(retain, nonatomic) UIImage* badgeBackgroundImage;
@property(retain, nonatomic) UIImageView* badgeView;
@property(assign, nonatomic) float titleTopMargin;
@property(assign, nonatomic) float iconTopMargin;
@property(assign, nonatomic) float userDefinedWidth;
@property(retain, nonatomic) UIColor* selectedTitleColor;
@property(retain, nonatomic) UIColor* titleColor;
@property(retain, nonatomic) UIImageView* seperatorImageView;
@property(retain, nonatomic) UIImageView* iconImageView;
@property(retain, nonatomic) UIImage* backgroundImage;
@property(retain, nonatomic) UIImage* eventImage;
@property(retain, nonatomic) UIImage* deselectedImage;
@property(retain, nonatomic) UIImage* selectedImage;
@property(retain, nonatomic) UILabel* titleLabel;
-(void).cxx_destruct;
-(BOOL)render;
-(void)setNeedsBadgeLayout;
-(void)setSeperatorImage:(id)image;
-(void)setBadgeValue:(id)value;
-(void)setSelectedItem:(BOOL)item;
-(void)deselect;
-(void)select;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithTitle:(id)title selectedImage:(id)image deselectedImage:(id)image3 backgroundImage:(id)image4;
@end

__attribute__((visibility("hidden")))
@interface LGAssetSections : NSObject {
	BOOL _groupingByDate;
	int _totalAssetsCount;
	NSArray* _assetSectionArray;
}
@property(assign, nonatomic) BOOL groupingByDate;
@property(retain, nonatomic) NSArray* assetSectionArray;
@property(assign, nonatomic) int totalAssetsCount;
-(void).cxx_destruct;
-(void)findAssetSection:(int*)section assetIndex:(int*)index withAssetURL:(id)assetURL backwardIndex:(int)index4;
-(unsigned)sectionCount;
-(id)assetSection:(int)section;
@end

__attribute__((visibility("hidden")))
@interface LALineGalleryImagePickerDelegate : NSObject <LGImagePickerDelegate> {
	NSString* _albumId;
	NSString* _groupID;
	NSString* _albumTitle;
	UIViewController<LAAlbumAddPhotosViewDelegate>* _ownerViewController;
}
@property(assign, nonatomic) UIViewController<LAAlbumAddPhotosViewDelegate>* ownerViewController;
@property(retain, nonatomic) NSString* albumTitle;
@property(retain, nonatomic) NSString* groupID;
@property(retain, nonatomic) NSString* albumId;
-(void).cxx_destruct;
-(id)uploadPackageFromPicker:(id)picker mediaInfos:(id)infos addableCount:(unsigned)count;
-(void)setEditedImageToPackageDictionary:(id)packageDictionary;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)dismissImagePickerController:(id)controller animated:(BOOL)animated;
-(BOOL)lgImagePickerController:(id)controller shouldSelectAssetForRatio:(float)ratio;
-(void)lgImagePickerControllerDidReachMaxLimit:(id)lgImagePickerController;
-(void)lgImagePickerControllerDidCancel:(id)lgImagePickerController;
-(void)lgImagePickerController:(id)controller didFinishPickingMediaWithInfos:(id)infos;
-(void)dealloc;
-(id)initWithAlbumId:(id)albumId groupID:(id)anId ownerViewController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoListHeaderView : UIView <UITableViewDataSource, UITableViewDelegate, LAUploadedUserCellDelegate> {
	BOOL _folded;
	id<LAPhotoListHeaderViewDelegate> _delegate;
	UILabel* _infoLabel;
	LANumberView* _photoCountView;
	UITableView* _uploadedUserTableView;
	LAAlbum* _album;
}
@property(retain, nonatomic) LAAlbum* album;
@property(retain, nonatomic) UITableView* uploadedUserTableView;
@property(retain, nonatomic) LANumberView* photoCountView;
@property(retain, nonatomic) UILabel* infoLabel;
@property(assign, nonatomic) id<LAPhotoListHeaderViewDelegate> delegate;
@property(assign, nonatomic, getter=isFolded) BOOL folded;
-(void).cxx_destruct;
-(void)uploadedUserCellDidTapMoreButton:(id)uploadedUserCell;
-(unsigned)numberOfUploadedUsersPerRow;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)numberOfRows;
-(void)layoutSubviews;
-(void)updateContents:(id)contents;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumListTableView : UITableView <UITableViewDataSource, UITableViewDelegate> {
	NSString* _groupID;
	NSArray* _albums;
	int _type;
	LANoAlbumsPagingView* _noAlbumsView;
	LAAlbumListViewController* _viewController;
	LAAlbumListHeaderView* _headerView;
	LAPullDownHeaderView* _pullDownView;
	UIActivityIndicatorView* _indicatorView;
	LAErrorMessageView* _errorView;
	NSError* _error;
}
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) LAErrorMessageView* errorView;
@property(retain, nonatomic) UIActivityIndicatorView* indicatorView;
@property(retain, nonatomic) LAPullDownHeaderView* pullDownView;
@property(retain, nonatomic) LAAlbumListHeaderView* headerView;
@property(assign, nonatomic) LAAlbumListViewController* viewController;
@property(retain, nonatomic) LANoAlbumsPagingView* noAlbumsView;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSArray* albums;
@property(retain, nonatomic) NSString* groupID;
-(void).cxx_destruct;
-(void)invalidateAlbumList:(id)list error:(id)error;
-(void)invalidateAlbumList:(id)list scrollToAlbumId:(id)albumId offset:(float)offset;
-(void)clearViewAfterRemoveingCache;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)updateHeaderWillBeginWithUI:(BOOL)updateHeader;
-(void)pullDownScrollUpdateEnd;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)setErrorViewIfNeeded;
-(void)setTableHeaderViewIfNeeded;
-(void)setNoAlbumsViewIfNeeded;
-(void)showExtraViewsIfNeeded;
-(id)initWithType:(int)type groupId:(id)anId viewController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface MBShareActivityViewLayout : NSObject <MBCellViewLayout> {
	MBShareActivityView* mOwner;
	UIButton* mLinkButton;
	MBURLImageView* mThumbnail;
	UIImageView* mThumbnailBg;
	UIImageView* mThumbnailFrame;
	NMAttributedLabel* mTitleLabel;
	NMAttributedLabel* mText1Label;
	NMAttributedLabel* mText2Label;
	UIImageView* mTopLine;
	UIImageView* mDownloadLine;
	UIButton* mDownloadButton;
}
+(id)textAttributes;
+(id)titleAttributes;
+(id)shareActivityViewLayout:(id)layout;
-(void).cxx_destruct;
-(CGRect)getTextFrame:(id)frame attributedString:(id)string attributes:(id)attributes origin:(CGPoint)origin width:(float)width;
-(id)attributedStringText2;
-(id)attributedStringText1;
-(id)attributedStringTitle;
-(int)postViewType;
-(id)activity;
-(id)shareActivity;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGRect)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(float)thumnailMargin;
-(id)initWithOwner:(id)owner;
@end

__attribute__((visibility("hidden")))
@interface LGEndTopMenuBarView : UIView {
	UILabel* _indexLabel;
	UIButton* _leftButton;
	UIButton* _rightButton;
	UIActivityIndicatorView* _loadingIndicator;
	LGBaseViewController* _delegate;
}
@property(assign, nonatomic) __weak LGBaseViewController* delegate;
@property(retain, nonatomic) UIActivityIndicatorView* loadingIndicator;
@property(retain, nonatomic) UIButton* rightButton;
@property(retain, nonatomic) UIButton* leftButton;
@property(retain, nonatomic) UILabel* indexLabel;
-(void).cxx_destruct;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(id)bundleName;
-(void)stopLoadingIndicator;
-(void)startLoadingIndicator;
-(void)updateForCurrentLanuage;
-(void)setupRightButtonWithImage:(id)image selectedImage:(id)image2;
-(void)setupLeftButtonWithImage:(id)image;
-(void)setupIndexLabel;
-(void)setupForGalleryEndThatNeedsLeftButton:(BOOL)galleryEndThatNeedsLeftButton needsRightCheckButton:(BOOL)button;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationCenterListViewCellUIPolicy : NSObject {
	NLNotificationCenterListViewCell* cell;
}
@property(assign, nonatomic) NLNotificationCenterListViewCell* cell;
+(float)cellHeightWithNotification:(id)notification forWidth:(float)width;
+(void)prepareStyledText:(id)text;
+(id)rulesetForNotificationTextView;
+(id)unreadNotificationColorWithCell:(id)cell;
-(void)updateOnTouchesCancelled;
-(void)updateOnTouchesEnded;
-(void)updateOnTouchesBegan;
-(void)layoutSubviews;
-(void)configureCellOnAwakeFromNib;
-(void)configureCellOnInit;
-(void)configureBorder:(id)border;
-(void)configureTimeLabel:(id)label;
-(void)configureSenderLabel:(id)label;
-(void)configureNotificationTextView:(id)view;
-(void)configureThumbnailImageView:(id)view;
-(void)removeGradientFromSelectedBackgroundView;
-(void)addGradientOnSelectedBackgroundView;
-(id)gridentColorsOnSelectedBackgroundView;
-(id)selectedBackgroundView;
-(id)initWithNotificationsViewCell:(id)notificationsViewCell;
@end

__attribute__((visibility("hidden")))
@interface NLCallWindow : UIWindow {
	BOOL _isPresenting;
	BOOL _minimized;
	BOOL _shouldSupportOnlyPortrait;
	UIViewController* _presentedViewController;
	id _orientationObserver;
	int _tmpStoredOrientation;
	int _tmpStoredStatusBarStyle;
	CGRect _mainWindowFrameTempBackup;
}
@property(assign, nonatomic) int tmpStoredStatusBarStyle;
@property(assign, nonatomic) int tmpStoredOrientation;
@property(retain, nonatomic) id orientationObserver;
@property(assign, nonatomic) CGRect mainWindowFrameTempBackup;
@property(readonly, assign, nonatomic) BOOL shouldSupportOnlyPortrait;
@property(assign, nonatomic) BOOL minimized;
@property(assign, nonatomic) BOOL isPresenting;
@property(retain, nonatomic) UIViewController* presentedViewController;
+(CGSize)mainScreenSizeForInterfaceOrientation:(int)interfaceOrientation;
-(void).cxx_destruct;
-(void)resetView;
-(void)maximizeViewControllerAnimated:(BOOL)animated;
-(void)minimizeViewControllerAnimated:(BOOL)animated;
-(void)layoutCallStatusBarForInterfaceOrientation:(int)interfaceOrientation;
-(void)dismissViewControllerAnimated:(BOOL)animated;
-(void)__dismissedWithMinimized;
-(void)__afterDismissing;
-(void)__beginDismissing;
-(void)__beforeDismissing;
-(void)presentViewController:(id)controller animated:(BOOL)animated;
-(void)__afterPresenting;
-(void)__beginPresenting;
-(void)__beforePresenting;
-(CGRect)dismissedWindowFrame;
-(CGRect)presentedWindowFrame;
-(void)removeObserver;
-(void)addObserver;
-(void)becomeKeyWindow;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LGCropPhotoDataSource : NSObject <LGPhotoViewDataSource> {
	LGAsset* _cropAsset;
	NSString* _originalImageTempPath;
	NSString* _editedImageTempPath;
}
@property(retain, nonatomic) NSString* editedImageTempPath;
@property(retain, nonatomic) NSString* originalImageTempPath;
@property(retain, nonatomic) LGAsset* cropAsset;
-(void).cxx_destruct;
-(void)removeEditedImage;
-(void)setEditedImage:(id)image;
-(unsigned)numberOfAssets;
-(id)assetWithSection:(unsigned)section row:(unsigned)row;
-(unsigned)numberOfAssetsAtSection:(unsigned)section;
-(unsigned)numberOfAssetSections;
-(void)dealloc;
-(id)initWithImage:(id)image;
-(void)saveTempFileForEditedImage:(id)editedImage;
-(void)saveTempFileForOriginalImage:(id)originalImage;
@end

__attribute__((visibility("hidden")))
@interface AppAuthViewController : NLViewController <UIWebViewDelegate> {
	NLChannel* thisChannel_;
	NSString* authType_;
	UIWebView* webView_;
	UIActivityIndicatorView* activityIndicator_;
	id _networkActivityIndicator;
	id allowBlock;
	id disallowBlock;
}
@property(copy, nonatomic) id disallowBlock;
@property(copy, nonatomic) id allowBlock;
-(void).cxx_destruct;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)actionEMailRegistration;
-(void)actionDisallow;
-(void)actionAllow;
-(id)jsStringForEmailRegistration;
-(id)jsStringForUserDisallow;
-(id)jsStringForUserAllow;
-(id)jsStringForClass;
-(void)showEmailRegistrationView;
-(void)startLoad;
-(void)makeActivityindicator;
-(void)makeWebView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(void)loadView;
-(id)initWithBuddyChannel:(id)buddyChannel;
-(id)initWithAppChannel:(id)appChannel;
@end

__attribute__((visibility("hidden")))
@interface LACircularProgressLayer : CALayer {
}
@property(assign, nonatomic) float trackBorderWidth;
@property(retain, nonatomic) UIColor* trackBorderColor;
@property(assign, nonatomic) float progressBorderWidth;
@property(retain, nonatomic) UIColor* progressBorderColor;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) float thicknessRatio;
@property(assign, nonatomic) BOOL roundedCorners;
@property(retain, nonatomic) UIColor* progressTintColor;
@property(retain, nonatomic) UIColor* trackTintColor;
+(BOOL)needsDisplayForKey:(id)key;
-(void)drawInContext:(CGContextRef)context;
@end

__attribute__((visibility("hidden")))
@interface LACircularProgressView : UIView {
	float _indeterminateDuration;
}
@property(assign, nonatomic) float trackBorderWidth;
@property(retain, nonatomic) UIColor* trackBorderColor;
@property(assign, nonatomic) float progressBorderWidth;
@property(retain, nonatomic) UIColor* progressBorderColor;
@property(assign, nonatomic) BOOL indeterminate;
@property(assign, nonatomic) float indeterminateDuration;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) float thicknessRatio;
@property(assign, nonatomic) BOOL roundedCorners;
@property(retain, nonatomic) UIColor* progressTintColor;
@property(retain, nonatomic) UIColor* trackTintColor;
+(Class)layerClass;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(void)didMoveToWindow;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
-(void)setupDefaultValue;
-(id)circularProgressLayer;
@end

__attribute__((visibility("hidden")))
@interface ApprovedChannelAppsViewController : NLTableViewController {
	NSArray* approvedChannels_;
	LineChannelSettings* unapprovedChannelSetting_;
	UIView* unapprovedSettingFooterView_;
}
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)unapprovedNotificationSettingFooterView;
-(id)tableView:(id)view unapprovedSettingCellForRowAtIndexPath:(id)indexPath;
-(void)actionRevoke:(id)revoke;
-(void)fetchUnapprovedChannelSetting;
-(void)fetchApprovedChannels;
-(void)updateUnapprovedChannelSetting:(id)setting;
-(void)updateApprovedChannels;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface NLTableViewController : UITableViewController {
}
-(void)setCellsBackgroundImageWithCell:(id)cell atIndexPath:(id)indexPath;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineInfoView : UIView <UIScrollViewDelegate> {
	UIScrollView* mScrollView;
	MBTimelineInfoPageControl* mPageControl;
	NSMutableSet* mVisiblePages;
	NSMutableSet* mRecycledPages;
	BOOL mIsFirstLoaded;
	BOOL mCloseButtonTapped;
	BOOL mSettingButtonTapped;
	id mDelegate;
	UIView* mParentView;
}
@property(assign, nonatomic) BOOL settingButtonTapped;
+(id)timelineInfoViewWithParentView:(id)parentView delegate:(id)delegate;
+(BOOL)timelineInfoViewConfirmFromUserDefaults;
+(void)saveTimelineInfoViewConfirmFromUserDefaults;
-(void).cxx_destruct;
-(void)tilePages;
-(void)setPageControlInfo;
-(void)resizePagingViewContentSize;
-(int)currentPageIndex;
-(void)addPageWithIndex:(int)index;
-(CGRect)frameForPageAtIndex:(int)index;
-(id)dequeueRecycledPage;
-(BOOL)isDisplayingPageForIndex:(unsigned)index;
-(void)gotoPageAction:(id)action;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)show:(BOOL)show;
-(void)hide;
-(void)hideInfoView;
-(void)gotoSettingAction;
-(float)heightShowingView;
-(id)initWithParentView:(id)parentView delegate:(id)delegate;
-(void)setupSubviews;
@end

__attribute__((visibility("hidden")))
@interface ApprovedChannelAppViewCell : UITableViewCell {
	LineFileDownload* currentDownload_;
	NLChannel* channel_;
	UIImageView* appIconView_;
	UILabel* appName_;
	UILabel* appDesc_;
	UILabel* appApprovedTime_;
}
@property(retain, nonatomic) UILabel* appApprovedTime;
@property(retain, nonatomic) UILabel* appDesc;
@property(retain, nonatomic) UILabel* appName;
@property(retain, nonatomic) UIImageView* appIconView;
@property(retain, nonatomic) NLChannel* channel;
+(void)initialize;
+(float)cellHeight;
+(id)identifierName;
-(void).cxx_destruct;
-(void)loadAppIconImageFromRemote;
-(void)layoutSubviews;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)delloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallUserInfo : NSObject {
	BOOL _isLocalHistory;
	BOOL _isVisibleWithRegionFullNumber;
	NSString* _userName;
	NSString* _phoneNumber;
	NSString* _phoneFullNumberForMatchedSearch;
	NSArray* _phoneNumberArray;
	NSString* _callTimeString;
	NSString* _callDurationTime;
	NSString* _callTimeDay;
	UIImage* _userImage;
	NSString* _histCount;
	NSString* _inOutCallFlag;
	unsigned _userLineMemberType;
	unsigned _callStatusType;
	NSString* _callStatusTypeName;
	NSString* _infoKey;
	NSDictionary* _toDictionary;
	NSString* _LUID;
	NSString* _regionCode;
	NSString* _regionNumber;
	NSString* _mid;
}
@property(assign, nonatomic) BOOL isVisibleWithRegionFullNumber;
@property(retain, nonatomic) NSString* mid;
@property(retain, nonatomic) NSString* regionNumber;
@property(retain, nonatomic) NSString* regionCode;
@property(retain, nonatomic) NSString* LUID;
@property(assign, nonatomic) BOOL isLocalHistory;
@property(retain, nonatomic) NSDictionary* toDictionary;
@property(retain, nonatomic) NSString* infoKey;
@property(assign, nonatomic) NSString* callStatusTypeName;
@property(assign, nonatomic) unsigned callStatusType;
@property(assign, nonatomic) unsigned userLineMemberType;
@property(retain, nonatomic) NSString* inOutCallFlag;
@property(retain, nonatomic) NSString* histCount;
@property(retain, nonatomic) UIImage* userImage;
@property(retain, nonatomic) NSString* callTimeDay;
@property(retain, nonatomic) NSString* callDurationTime;
@property(retain, nonatomic) NSString* callTimeString;
@property(retain, nonatomic) NSDate* callTime;
@property(retain, nonatomic) NSArray* phoneNumberArray;
@property(retain, nonatomic) NSString* phoneFullNumberForMatchedSearch;
@property(retain, nonatomic) NSString* phoneNumber;
@property(retain, nonatomic) NSString* userName;
+(id)findQueryByUserName;
+(id)findQueryByPhoneNumber;
+(id)callUserInfoWithLUID:(id)luid;
-(void).cxx_destruct;
-(void)settingUserInfo:(id)info;
-(void)savePhoneNumberForMatchedSearch:(id)matchedSearch;
-(id)calleePhoneNumber;
-(id)phoneNumberForDisplaying;
-(id)phoneNumberDontFormatted;
-(void)setCallStatusTypeWithAMPKitTermCode:(int)ampkitTermCode;
-(BOOL)isCallSuccess;
-(id)callingImage;
-(id)detailImage;
-(id)listImage;
-(id)callTimeStringForDetailSection;
-(id)callTimeStringForList;
-(unsigned)callDateType;
-(void)dealloc;
-(void)settingUserInfoWithTalkContactObject:(id)talkContactObject;
-(id)initWithInfoTalkContactObject:(id)infoTalkContactObject;
-(id)initWithInfoDictionary:(id)infoDictionary;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LGMoviePlayerViewController : MPMoviePlayerViewController {
	BOOL _isSliderChanging;
	LGAsset* _asset;
	NSURL* _contentURL;
	UISlider* _progressIndicator;
	NSTimer* _monitorTimer;
	LGMovieMenuBarView* _movieMnuBarView;
	UILabel* _playedTimeLabel;
	UILabel* _remainedTimeLabel;
	LGAssetsViewController* _delegate;
	double _totalVideoTime;
}
@property(assign, nonatomic) __weak LGAssetsViewController* delegate;
@property(retain, nonatomic) UILabel* remainedTimeLabel;
@property(retain, nonatomic) UILabel* playedTimeLabel;
@property(assign, nonatomic) BOOL isSliderChanging;
@property(retain, nonatomic) LGMovieMenuBarView* movieMnuBarView;
@property(retain, nonatomic) NSTimer* monitorTimer;
@property(assign, nonatomic) double totalVideoTime;
@property(retain, nonatomic) UISlider* progressIndicator;
@property(retain, nonatomic) NSURL* contentURL;
@property(retain, nonatomic) LGAsset* asset;
-(void).cxx_destruct;
-(void)didSelectedSelectButton:(id)button;
-(void)moviePlayerPlaybackStateDidChange:(id)moviePlayerPlaybackState;
-(void)didStopSliderValueChanged:(id)changed;
-(void)didSliderValueChanged:(id)changed;
-(void)monitorPlaybackTime;
-(id)stringFromDuration:(double)duration needMinusSign:(BOOL)sign;
-(void)handleDurationAvailableNotification;
-(void)didReceiveMemoryWarning;
-(void)didPlayButtonTouched:(id)touched;
-(void)didCloseButtonTouched:(id)touched;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)moviePlayerCleanup;
-(id)initWithContentURL:(id)contentURL asset:(id)asset delegate:(id)delegate;
-(void)configureMoviePlayer;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface RecommendedChannelAppViewCell : UITableViewCell {
	LineFileDownload* currentDownload_;
	NLChannel* channel_;
	UIImageView* appIconView_;
	UILabel* appName_;
	UILabel* appDesc_;
}
@property(retain, nonatomic) UILabel* appDesc;
@property(retain, nonatomic) UILabel* appName;
@property(retain, nonatomic) UIImageView* appIconView;
@property(retain, nonatomic) NLChannel* channel;
+(float)cellHeight;
+(id)identifierName;
-(void).cxx_destruct;
-(void)loadAppIconImageFromRemote;
-(void)layoutSubviews;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LAAPICenter : NSObject {
}
+(id)requestWithType:(int)type groupID:(id)anId param:(id)param completion:(id)completion;
+(id)etagHeader:(id)header groupID:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface ChannelDetailInfoViewController : NLViewController {
	UIScrollView* scrollView_;
	UIImageView* iconImageView_;
	UILabel* nameLabel_;
	UILabel* providerNameLabel_;
	UILabel* authLabel_;
	UILabel* approvedAtLabel_;
	UIImageView* infoBackgroundView_;
	UILabel* descriptionLabel_;
	UIImageView* descriptionBackgroundView_;
	UIView* receivingMessageSetBackgroundView_;
	UIView* essentailPermissionsView_;
	UIButton* revokeButton_;
	UIView* permissionBackgroundView_;
	LineFileDownload* currentDownload_;
	NSDateFormatter* dateFormatter_;
	LineChannelNotificationSetting* channelNotificationSettingBackUp_;
	NLChannel* channel_;
	LineChannelNotificationSetting* channelNotificationSetting_;
}
@property(retain, nonatomic) LineChannelNotificationSetting* channelNotificationSetting;
@property(retain, nonatomic) NLChannel* channel;
-(void).cxx_destruct;
-(void)onChangedSwitchValue:(id)value;
-(void)updateReceivingNotification:(BOOL)notification;
-(void)updateReceivingMessage:(BOOL)message;
-(void)updateNotificationSettings;
-(void)actionRevoke:(id)revoke;
-(void)makeUIComponents;
-(float)makePermissionInfosViewWithStartPosition:(float)startPosition;
-(id)makeEachPermissionView:(float)view withText:(id)text;
-(float)makeMessageReceivingSetViewWithStartPosition:(float)startPosition;
-(id)viewForMessageReceivingSetView:(id)messageReceivingSetView switchTag:(int)tag;
-(id)mainLabelForMessageReceivingSetView:(id)messageReceivingSetView maxWidth:(float)width;
-(float)makeDescriptionViewWithStartPosition:(float)startPosition;
-(float)makeInfoViewWithStartPosition:(float)startPosition;
-(void)loadAppIconImageFromRemote;
-(void)restoreChannelNotificationSetting;
-(void)backUpChannelNotificationSetting;
-(void)loadChannelConfigurations;
-(void)setSwitchStatusOfNotificationWithChannelSetting:(id)channelSetting;
-(void)setSwitchStatusOfMessageWithChannelSetting:(id)channelSetting;
-(id)currentChannelAppNotificationSetting;
-(BOOL)loadChannelNotificationSettingFromUserDefaults;
-(void)loadSettings;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface NLTextAttachment : NSTextAttachment {
}
@end

__attribute__((visibility("hidden")))
@interface MBPhotoCommentView : UIView <UITableViewDelegate, UITableViewDataSource, MBPhotoCommentViewControllerDelegate> {
	MBRecallRecommendView* mRecallRecommendView;
	BOOL mEmojiSelected;
	UIView* mBackgroundView;
	UIImageView* mTitleBackgroundView;
	UILabel* mLabel;
	UIButton* mCloseButton;
	MBTableView* mTableView;
	LineMyhomeKeyboard* mKeyboard;
	UIView* mKeyboardView;
	UIButton* mKeyboardActionView;
	MBToastView* mToastView;
	NLStickerPreview* _stickerPreview;
	BOOL mIsResizing;
	int mScrollDirection;
	CGPoint mLastPoint;
	BOOL mIsShowing;
	BOOL mNeedReload;
	BOOL mIsClosing;
	BOOL mStickerSended;
	CGRect mReplyCommentAreaRect;
	float mKeyboardViewY;
	float mKeyboardHeight;
	MBPhotoCommentViewController* mController;
	MBPostManager* mPostManager;
	MBPhotoCommentViewActions* mPhotoActions;
	NSError* mError;
	BOOL _commentEditable;
	BOOL _keyboardVisible;
}
@property(readonly, assign, nonatomic) BOOL emojiSelected;
@property(readonly, assign, nonatomic) MBRecallRecommendView* recallRecommendView;
@property(assign, nonatomic, getter=isKeyboardVisible) BOOL keyboardVisible;
@property(assign, nonatomic, getter=isCommentEditable) BOOL commentEditable;
-(void).cxx_destruct;
-(void)openStickerPackage:(id)package;
-(void)didTappedWithIndex:(id)index;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)showStickerPreviewGuide;
-(void)configureStickerPreview:(id)preview;
-(void)saveStickerInputHistory;
-(void)hideStickerPreview;
-(void)hideStickerPreviewGuide;
-(id)stickerPreviewStickerID;
-(id)stickerPreview;
-(void)growingTextViewDidChangeSelection;
-(void)didChangedRecallUserNameInTextView:(id)textView;
-(void)showAlert;
-(void)messageSendBarClear:(id)clear;
-(void)becomeFirstResponderMessageSendBar;
-(void)emojiButtonToggle:(id)toggle;
-(void)onFocusMessageBar:(id)bar;
-(void)createCommentWithData:(id)data;
-(void)sendTapped:(id)tapped;
-(void)stickerTapped:(id)tapped;
-(void)keyboardViewDidChange;
-(void)keyboardViewCancel;
-(void)showKeyboardWithEmoji:(BOOL)emoji;
-(void)restoreTextMetadataArray:(id)array;
-(void)restoreKeyboardInputText:(id)text;
-(void)restoreKeyboardInputAttributedText:(id)text;
-(id)textMetadataArray;
-(BOOL)keyboardRespondsToAttributedText;
-(id)keyboardInputText;
-(id)keyboardInputAttributedText;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(id)marginCellForRowAtIndexPath:(id)indexPath;
-(id)messageCellForRowAtIndexPath:(id)indexPath;
-(id)commentCellForRowAtIndexPath:(id)indexPath aTableView:(id)view;
-(id)commentMoreCellForRowAtIndexPath:(id)indexPath;
-(id)likeCellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)insertRecallUserForComment:(id)comment;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)setupKeyboardAction;
-(void)didEndScroll;
-(void)scrollToBottom;
-(void)resizeReplyNickNameView;
-(void)resizeCommentView;
-(void)reloadDataWithCompletionBlock:(id)completionBlock;
-(CGRect)commentViewFrame;
-(CGRect)commentViewFrameWithKeyboardWithWidth:(float)width;
-(float)tableHeightWithBounds:(CGRect)bounds;
-(float)tableMaxHeightWithBounds:(CGRect)bounds;
-(float)titleHeight;
-(BOOL)isLandscapeMode;
-(id)postManager;
-(void)didFinishDeletingCommentWithError:(id)error;
-(void)didFinishCreateingCommentWithError:(id)error;
-(void)didFinishUpdatingWithError:(id)error;
-(void)didFinishFetchingWithError:(id)error;
-(void)showErrorToastWithError:(id)error;
-(void)hideToastInAlertView;
-(void)viewWillRotate;
-(void)viewDidUnload;
-(void)viewDidDisappear;
-(void)viewWillDisappear;
-(void)viewWillAppear;
-(void)hideToastView;
-(void)hideCommentView;
-(void)showCommentViewWithAnimated:(BOOL)animated;
-(void)layoutSubviews;
-(id)getKeyboard;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame controller:(id)controller;
-(void)initViews;
@end

__attribute__((visibility("hidden")))
@interface LGInstantViewController : LGBaseViewController <UITableViewDataSource, UITableViewDelegate> {
	id<LGInstantViewDelegate> _delegate;
	id _closeDelegate;
	UITableView* _tableView;
}
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) __weak id closeDelegate;
@property(assign, nonatomic) __weak id<LGInstantViewDelegate> delegate;
-(void).cxx_destruct;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)didAssetCheckBoxSelected:(id)selected;
-(void)didAssetSelected:(id)selected;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate closeDelegate:(id)delegate3;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MBShareActivityButton : UIButton <MBActorObserving> {
	UIImageView* mTopLine;
	MBURLImageView* mThumbnail;
	UIImageView* mThumbnailBg;
	UIImageView* mThumbnailFrame;
	NMAttributedLabel* mTitleLabel;
	NMAttributedLabel* mText1Label;
	NMAttributedLabel* mText2Label;
	MBActivity* mActivity;
	BOOL mIsFastDrawUse;
	id<NMAttributedLabelDelegate> attrDelegate;
}
@property(assign, nonatomic) id<NMAttributedLabelDelegate> attrDelegate;
@property(assign, nonatomic) BOOL isFastDrawUse;
+(id)shareActivityButton;
-(void).cxx_destruct;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)setAttributeText:(id)text label:(id)label metaData:(id)data;
-(void)setAttributeTitle:(id)title;
-(id)attributedStringWithText:(id)text font:(id)font fontColor:(id)color;
-(void)redrawShareActivity;
-(void)setActivity:(id)activity;
-(void)layoutText:(id)text attributes:(id)attributes width:(float)width;
-(id)textAttributes;
-(id)titleAttributes;
-(void)layout;
-(void)dealloc;
-(void)actorRemoveObserver;
-(id)initWithFrame:(CGRect)frame;
-(id)cropThumbnail:(id)thumbnail;
@end

__attribute__((visibility("hidden")))
@interface DeleteAccountViewController : NLTableViewController {
	NSArray* approvedChannels_;
	UITableViewCell* noticeViewCell_;
	float heightForNotice_;
	UITableViewCell* actionViewCell_;
	float heightForAction_;
}
-(void).cxx_destruct;
-(void)actionCancel:(id)cancel;
-(void)actionDelete:(id)aDelete;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)cellForApprovedChannelsForIndexPath:(id)indexPath;
-(id)cellForAction;
-(id)cellForNotice;
-(float)heightForAction;
-(float)heightForNotice;
-(void)reloadAllSections;
-(void)resetActionView;
-(void)resetNoticeView;
-(BOOL)isApprovedChannelsExisted;
-(void)fetchApprovedChannels;
-(void)updateApprovedChannels;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface NLBuddyOnAirView : UIImageView {
	NLBuddyOnAirModel* _onAirModel;
	UIButton* _playButton;
	ProfileImageView* _profileView;
	UIView* _profileCoverView;
	LCAttributedLabel* _onAirMessage;
	UILabel* _enterTitle;
	UILabel* _enterValue;
	UILabel* _targetTitle;
	UILabel* _targetValue;
	UIImageView* _divImageView;
	NSNumberFormatter* _numberFormatter;
}
@property(retain, nonatomic) NSNumberFormatter* numberFormatter;
@property(retain, nonatomic) UIImageView* divImageView;
@property(retain, nonatomic) UILabel* targetValue;
@property(retain, nonatomic) UILabel* targetTitle;
@property(retain, nonatomic) UILabel* enterValue;
@property(retain, nonatomic) UILabel* enterTitle;
@property(retain, nonatomic) LCAttributedLabel* onAirMessage;
@property(retain, nonatomic) UIView* profileCoverView;
@property(retain, nonatomic) ProfileImageView* profileView;
@property(retain, nonatomic) UIButton* playButton;
@property(retain, nonatomic) NLBuddyOnAirModel* onAirModel;
+(void)countLabel:(id)label;
+(void)nameLabel:(id)label;
-(void).cxx_destruct;
-(BOOL)render;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MoreDetailSectionHeader : UIView {
	UILabel* titleLabel_;
	UIView* tailView_;
	UIControl* control_;
	UIView* topBar_;
	UIView* bottomBar;
	CALayer* topBar1pxLayer;
	BOOL hideLinkArrow_;
}
@property(assign, nonatomic) BOOL hideLinkArrow;
@property(readonly, assign, nonatomic) UIControl* control;
+(id)sectionHeader;
-(void).cxx_destruct;
-(BOOL)render;
-(void)setTitle:(id)title tail:(id)tail;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallCreditChargeViewController : NLCallSettingCommonSubViewController {
	BOOL _willDismissViewController;
	UIButton* _buttonBuy;
	UIButton* _buttonPolicy;
	UIImageView* _imageArrow;
	NMAttributedLabel* _labelNote;
	NSArray* _productArray;
}
@property(retain, nonatomic) NSArray* productArray;
@property(assign, nonatomic) NMAttributedLabel* labelNote;
@property(assign, nonatomic) UIImageView* imageArrow;
@property(assign, nonatomic) UIButton* buttonPolicy;
@property(assign, nonatomic) UIButton* buttonBuy;
-(void).cxx_destruct;
-(id)paymentPolicyLineCallURLString;
-(void)actionBuy:(id)buy;
-(void)setDescription;
-(void)willDismissViewController;
-(void)refreshItemView;
-(void)actionPolicyButton;
-(void)dealloc;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface AttachmentScrollView : UIScrollView {
}
-(BOOL)touchesShouldCancelInContentView:(id)touches;
@end

__attribute__((visibility("hidden")))
@interface AttachmentInputView : NLFixedSizeInputView <UIScrollViewDelegate> {
	BOOL _setupSubviews;
	unsigned _totalButtonCount;
	UIView* _topBorder;
	UIScrollView* _scrollView;
	LinePageControl* _pageControl;
	NSMutableArray* pageDividers;
	NSArray* _buttonMappings;
	NSMutableDictionary* _menuItemButtonImages;
}
@property(copy, nonatomic) NSArray* buttonMappings;
-(void).cxx_destruct;
-(BOOL)render;
-(void)acquireMenuItemButtonImages;
-(void)renderPageControl;
-(void)renderBackgroundBorder;
-(id)menuItemImageForAction:(id)action;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)tappedButton:(id)button;
-(void)pageControlValueChanged;
-(void)layoutButton:(id)button withIndex:(unsigned)index resizeLabel:(id)label;
-(CGPoint)originOfButtonAtIndex:(unsigned)index;
-(id)buttonSizes;
-(void)setupButtonsIfPossibleAndNecessary;
-(void)setupLabel:(id)label withFont:(id)font;
-(void)layoutSubviews;
-(void)refreshButtonsIfPossibleAndNecessary;
-(void)hiddenNewRibbon:(BOOL)ribbon withAttachmentActionKey:(unsigned)attachmentActionKey;
-(id)initWithButtonMappings:(id)buttonMappings;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface AttachmentAction : NSObject {
	id _target;
	SEL _action;
	NSString* _title;
	NSString* _imageName;
	BOOL _showNewRibbon;
	unsigned _key;
	unsigned _index;
	BOOL _attachmentEnabled;
	NSNumber* _notInstalled;
}
@property(assign, nonatomic) BOOL attachmentEnabled;
@property(assign, nonatomic) BOOL showNewRibbon;
@property(retain, nonatomic) NSNumber* notInstalled;
@property(copy, nonatomic) NSString* imageName;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) SEL action;
@property(assign, nonatomic) id target;
@property(assign, nonatomic) unsigned key;
@property(assign, nonatomic) unsigned index;
-(void).cxx_destruct;
-(id)initWithKey:(unsigned)key target:(id)target action:(SEL)action title:(id)title imageName:(id)name enabled:(BOOL)enabled;
@end

__attribute__((visibility("hidden")))
@interface NLTableViewRowInfoMapping : NSObject {
	NSMutableDictionary* mapping;
	int currentKey;
}
@property(assign, nonatomic) int currentKey;
@property(retain, nonatomic) NSMutableDictionary* mapping;
-(void).cxx_destruct;
-(id)viewControllerNibNameForRowKey:(int)rowKey;
-(id)viewControllerNameForRowKey:(int)rowKey;
-(id)textForRowKey:(int)rowKey;
-(void)changeViewControllerNibName:(id)name withKey:(int)key;
-(void)changeViewControllerName:(id)name withKey:(int)key;
-(void)changeText:(id)text withKey:(int)key;
-(void)addViewControllerNibName:(id)name;
-(void)addViewControllerName:(id)name;
-(void)addText:(id)text;
-(void)endRow;
-(void)beginRowWithKey:(int)key;
-(id)dictForKey:(int)key;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ContactsTableViewCell : LineTableViewCell {
	UILabel* nameLabel;
	UILabel* phoneNumberLabel;
	UIImageView* callImage;
	TalkContactObject* _contactObject;
}
@property(retain, nonatomic) TalkContactObject* contactObject;
-(void).cxx_destruct;
-(BOOL)render;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)initViews;
@end

__attribute__((visibility("hidden")))
@interface LineExternalSchemeManager : NSObject {
}
+(id)oneTimeChatMid:(id)mid;
+(BOOL)openExternalApp:(id)app extApp:(unsigned)app2;
+(id)makeReturnParameters:(unsigned)parameters data:(id)data;
+(id)valueForParamName:(id)paramName params:(id)params;
+(id)valueForParamName:(id)paramName param:(id)param;
+(id)parametersFromCallbackEncodedString:(id)callbackEncodedString;
+(id)linePasteBoardName;
+(id)stringWithEditImageOnLineGalleryCommand;
+(BOOL)editImageOnLineGalleryWithLineCamera:(id)lineCamera fromViewControllerName:(id)viewControllerName;
+(BOOL)editAndSendImageWithExtApp:(unsigned)extApp chatMid:(id)mid pasteBoardName:(id)name;
+(BOOL)sendImageWithExtApp:(unsigned)extApp chatMid:(id)mid;
+(id)schemeExternalApp:(unsigned)app;
+(BOOL)openAppStoreOutOfApp:(unsigned)app;
+(BOOL)openAppStoreInApp:(unsigned)app;
+(BOOL)downloadExternalApp:(unsigned)app;
+(BOOL)canOpenExternalApp:(unsigned)app;
+(id)lineAppStoreUrl;
@end

__attribute__((visibility("hidden")))
@interface NLStoreProductViewController : SKStoreProductViewController <SKStoreProductViewControllerDelegate> {
	id _networkActivityIndicator;
}
@property(retain, nonatomic) id networkActivityIndicator;
-(void).cxx_destruct;
-(void)productViewControllerDidFinish:(id)productViewController;
@end

__attribute__((visibility("hidden")))
@interface NLCallHistoryDetailTableViewCell : UITableViewCell {
	UIImageView* _imageViewInOutFlag;
	UIImageView* _imageViewIcon;
	UILabel* _labelCallTime;
	UILabel* _labelCallDuration;
}
@property(assign, nonatomic) UILabel* labelCallDuration;
@property(assign, nonatomic) UILabel* labelCallTime;
@property(assign, nonatomic) UIImageView* imageViewIcon;
@property(assign, nonatomic) UIImageView* imageViewInOutFlag;
+(id)viewFromNib;
-(void)setUserInfo:(id)info;
-(void)initDefault;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LADateUtil : NSObject {
}
+(BOOL)canRecoverDate:(id)date pollingDate:(id)date2;
+(BOOL)shouldFullFetchPolling:(id)polling;
+(id)dateTimeStringForOBS;
+(id)relativeDateString:(id)string;
+(id)todayMidnight;
+(void)significantTimeChange:(id)change;
+(void)initialize;
+(id)dateTimeString:(id)string;
+(id)dateString:(id)string;
+(id)dateWithTimestampString:(id)timestampString;
@end

__attribute__((visibility("hidden")))
@interface NLCallMoreButton : UIButton {
	UILabel* _labelCount;
	UIImageView* _imageViewDownArrow;
}
@property(retain, nonatomic) UIImageView* imageViewDownArrow;
@property(retain, nonatomic) UILabel* labelCount;
-(void).cxx_destruct;
-(void)setButtonImage:(id)image;
-(void)addButtonImage:(id)image;
-(void)setHighlighted:(BOOL)highlighted;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLStyledTextMarkupParserOptions : NSObject {
	UIColor* defaultTextColor;
	float fontSize;
	float lineHeight;
	float lineSpacing;
}
@property(assign, nonatomic) float lineSpacing;
@property(assign, nonatomic) float lineHeight;
@property(assign, nonatomic) float fontSize;
@property(retain, nonatomic) UIColor* defaultTextColor;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface NLProfilePopupViewController : NLViewController <NLProfileStatusMessageViewDelegate> {
	BOOL isHiddenMyHomeCover;
	BOOL isFriend;
	BOOL isLoaded;
	BOOL _isHiddenMyHomePosts;
	BOOL _isShownMyHomeButton;
	BOOL _isTransitonAnimating;
	id<NLProfilePopupViewControllerDelegate> delegate;
	UIView* contentView;
	UIView* infoView;
	UIImageView* topBackgroundImageView;
	ProfileImageView* profileImageView;
	UIImageView* profileImageEffectView;
	UILabel* displayNameLabel;
	UILabel* nameLabel;
	UIButton* phoneNumberButton;
	UIButton* closeButton;
	UIView* buttonsView;
	UIButton* favoriteButton;
	UIButton* nameEditButton;
	NSArray* _buttons;
	NSArray* _buttonItems;
	NLProfileStatusMessageView* speechBubbleView;
	NLProfileBuddyCountView* buddyCountView;
	UIView* myHomeView;
	UIImageView* coverImageView;
	id myHomeObj;
	UIImageView* myHomeNewImageView;
	UIButton* goToMyHomeButton;
	NSString* myHomeMid;
}
@property(assign, nonatomic) BOOL isTransitonAnimating;
@property(assign, nonatomic) BOOL isLoaded;
@property(assign, nonatomic) BOOL isFriend;
@property(assign, nonatomic) BOOL isShownMyHomeButton;
@property(assign, nonatomic) BOOL isHiddenMyHomePosts;
@property(assign, nonatomic) BOOL isHiddenMyHomeCover;
@property(retain, nonatomic) NSString* myHomeMid;
@property(retain, nonatomic) id myHomeObj;
@property(retain, nonatomic) NSArray* buttonItems;
@property(retain, nonatomic) NSArray* buttons;
@property(retain, nonatomic) NLProfileBuddyCountView* buddyCountView;
@property(retain, nonatomic) NLProfileStatusMessageView* speechBubbleView;
@property(retain, nonatomic) UIButton* goToMyHomeButton;
@property(assign, nonatomic) UIImageView* myHomeNewImageView;
@property(assign, nonatomic) UIImageView* coverImageView;
@property(assign, nonatomic) UIView* myHomeView;
@property(assign, nonatomic) UIButton* nameEditButton;
@property(assign, nonatomic) UIButton* favoriteButton;
@property(assign, nonatomic) UIView* buttonsView;
@property(assign, nonatomic) UIButton* closeButton;
@property(assign, nonatomic) UIButton* phoneNumberButton;
@property(assign, nonatomic) UILabel* nameLabel;
@property(assign, nonatomic) UILabel* displayNameLabel;
@property(assign, nonatomic) UIImageView* profileImageEffectView;
@property(assign, nonatomic) ProfileImageView* profileImageView;
@property(assign, nonatomic) UIImageView* topBackgroundImageView;
@property(assign, nonatomic) UIView* infoView;
@property(assign, nonatomic) UIView* contentView;
@property(assign, nonatomic) id<NLProfilePopupViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)goToMyHomebuttonTapped:(id)myHomebuttonTapped;
-(void)coverViewTappedWithMid:(id)mid;
-(void)postThumbnailTappedWithMid:(id)mid withPostId:(id)postId;
-(void)didLoadMyHomeInfoNewFlag:(id)flag;
-(void)statusMessageTouchUpInside:(id)inside;
-(void)profileImageViewTapped:(id)tapped;
-(void)nameEditButtonTapped:(id)tapped;
-(void)favoriteButtonTapped:(id)tapped;
-(void)phoneNumberButtonTapped:(id)tapped;
-(void)closeButtonTapped:(id)tapped;
-(void)backgroundTapped:(id)tapped;
-(void)showNameEditButton;
-(void)showFavoriteButtonWithSelectedState:(BOOL)selectedState;
-(void)showStatusMessage:(id)message;
-(id)displayName;
-(id)getTextOfPhoneNumberButton;
-(void)showPhoneNumber:(id)number;
-(void)showBuddyCount:(long long)count animated:(BOOL)animated;
-(void)showDisplayName:(id)name withName:(id)name2;
-(void)addButtonsWithButtonItems:(id)buttonItems;
-(void)close;
-(void)addButtons;
-(void)adjustContentInsetsOfButton:(id)button;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)buttonTapped:(id)tapped;
-(void)setMyHomeCover;
-(void)layoutGoToMyHomeButton:(id)myHomeButton;
-(void)layoutBuddyCountView:(id)view;
-(void)layoutSpeechBubbleView:(id)view;
-(void)layoutButtons:(id)buttons onButtonsView:(id)view;
-(void)layoutPhoneNumberButton:(id)button;
-(void)layoutNameLabel:(id)label;
-(void)layoutDisplayNameLabel:(id)label;
-(BOOL)isOverSizeSpeechBubbleView;
-(void)layoutNameStatusMessageArea;
-(void)layoutInfoViewAreaForOrientation;
-(void)layoutSubviewsAreaForOrientation;
-(void)layoutSubviewsArea;
-(void)layoutForOfficialHome;
-(void)layoutButtons;
-(void)layoutSubviews;
-(void)addGoToMyHomeButton;
-(void)configureButtonsView:(id)view;
-(void)configureFavoriteButton:(id)button;
-(void)configurePhoneNumberButton:(id)button;
-(void)configureNameLabel:(id)label;
-(void)configureProfileImageView:(id)view;
-(void)configureDisplayNameLabel:(id)label;
-(void)configureTopBackgroundImageView:(id)view;
-(void)configureSubviewsArea;
-(void)configureSubviews;
-(void)setMyHomeMidWithMid:(id)mid hiddenPosts:(BOOL)posts;
-(void)addBuddyCountView;
-(void)addSpeechBubbleView;
-(void)applyLocalizedStrings;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
-(void)addTestButtons;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLButtonItem : NSObject {
	int tag;
	NSString* title;
	id target;
	SEL action;
	UIImage* icon;
	id context;
}
@property(retain, nonatomic) id context;
@property(retain, nonatomic) UIImage* icon;
@property(assign, nonatomic) SEL action;
@property(retain, nonatomic) id target;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int tag;
+(id)itemWithTitle:(id)title icon:(id)icon target:(id)target action:(SEL)action;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface MBActivityEndViewController : MBPostViewController <MBPostManagerDelegate, NSFetchedResultsControllerDelegate, MBActorObserving> {
	MBPostManager* mPostManager;
}
@property(readonly, assign, nonatomic) MBPostManager* postManager;
-(void).cxx_destruct;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)postManager:(id)manager didFinishCreatingPostForShareWithError:(id)error;
-(void)postManager:(id)manager didFinishDeletingLikeWithError:(id)error;
-(void)postManager:(id)manager didFinishCreatingLikeWithError:(id)error;
-(void)postManager:(id)manager didFinishDeletingCommentWithError:(id)error;
-(void)postManager:(id)manager didFinishCreatingCommentWithError:(id)error;
-(void)postManager:(id)manager didFinishDeletingPostWithError:(id)error;
-(void)dataManager:(id)manager didFinishUpdatingWithError:(id)error;
-(void)dataManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)dealloc;
-(id)initWithoutLoadingWithActivity:(id)activity sourceType:(id)type;
-(id)initWithActivity:(id)activity sourceType:(id)type;
-(id)initWithPostID:(id)postID userMID:(id)mid sourceType:(id)type;
@end

__attribute__((visibility("hidden")))
@interface NLProfilePopupViewer : NSObject <NLProfilePopupViewControllerDelegate, UIAlertViewDelegate, MFMailComposeViewControllerDelegate, HitokotoBalloonViewDelegate> {
	BOOL _isInvitingGroup;
	UIWindow* window;
	NLProfilePopupViewController* _popupViewController;
	NSArray* buttonItems;
	id _modelObject;
	NLProfilePopupButtonMapper* buttonMapper;
	id<NLProfilePopupViewerDelegate> _delegate;
	ImageDetailViewController* imageDetailViewController;
	int _contactType;
}
@property(retain, nonatomic) NLProfilePopupButtonMapper* buttonMapper;
@property(retain, nonatomic) id modelObject;
@property(assign, nonatomic) int contactType;
@property(assign, nonatomic) BOOL isInvitingGroup;
@property(retain, nonatomic) ImageDetailViewController* imageDetailViewController;
@property(assign, nonatomic) id<NLProfilePopupViewerDelegate> delegate;
@property(retain, nonatomic) NSArray* buttonItems;
@property(retain, nonatomic) NLProfilePopupViewController* popupViewController;
@property(retain, nonatomic) UIWindow* window;
+(id)currentPopupWindow;
-(void).cxx_destruct;
-(void)hitokotoTouchUpInside:(id)inside;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)needUpdateHomeButtonTappedWithMid;
-(void)coverViewTappedWithMid:(id)mid;
-(void)postThumbnailTappedWithMid:(id)mid withPostId:(id)postId;
-(void)profilePopupViewController:(id)controller nameEditButtonTapped:(id)tapped;
-(void)profilePopupViewController:(id)controller favoriteButtonTapped:(id)tapped;
-(void)profilePopupViewController:(id)controller thumbnailTapped:(id)tapped;
-(void)makeALineCallWithPhoneNumber:(id)phoneNumber;
-(void)profilePopupViewController:(id)controller phoneNumberButtonTapped:(id)tapped;
-(void)profilePopupViewController:(id)controller tappedButtonItem:(id)item;
-(void)profilePopupViewControllerClosed:(id)closed;
-(void)enableHitokotoTouch:(BOOL)touch;
-(void)reload;
-(void)hidePopup:(BOOL)popup;
-(id)getPhoneNumber:(id)number;
-(void)changeContactObject:(id)object withUserMID:(id)userMID;
-(BOOL)needGetContactRegistration:(id)registration;
-(void)showPhoneNumber:(id)number withViewController:(id)viewController;
-(void)configureViewController:(id)controller withModel:(id)model;
-(void)configureMyNameWithViewCont:(id)viewCont WithDispName:(id)dispName withCustomName:(id)customName withAddrName:(id)addrName;
-(void)configureMyHome:(id)home withModel:(id)model;
-(void)showPopup:(BOOL)popup delegate:(id)delegate;
-(id)imageFromView:(id)view;
-(void)flipCurrentView:(id)view withNewView:(id)newView reverse:(BOOL)reverse;
-(void)buildButtonItemsByOfficialHome:(BOOL)home withMemberCount:(long long)memberCount;
-(BOOL)isOfficialHome:(int)home;
-(void)configureOfficialHomeWithBuddyInfo:(id)buddyInfo;
-(void)buildButtonItems;
-(void)addButtonWithType:(int)type;
-(void)dealloc;
-(id)initWithModelObject:(id)modelObject;
@end

__attribute__((visibility("hidden")))
@interface LAAPICenterCommon : NSObject {
}
+(id)requestJSONWithURL:(id)url groupID:(id)anId method:(id)method param:(id)param headers:(id)headers completion:(id)completion;
+(id)requestJSONWithURL:(id)url groupID:(id)anId headers:(id)headers completion:(id)completion;
+(void)performCompletionBlock:(id)block result:(id)result lastDict:(id)dict error:(id)error;
+(void)performBlockOnMainThread:(id)thread result:(id)result lastDict:(id)dict error:(id)error;
@end

__attribute__((visibility("hidden")))
@interface NLProfilePopupButtonMapper : NSObject {
	id _modelObject;
	NSMutableArray* mappings;
	int _contactType;
}
@property(assign, nonatomic) int contactType;
@property(retain, nonatomic) NSMutableArray* mappings;
@property(retain, nonatomic) id modelObject;
+(void)chatWithBuddy:(id)buddy;
+(void)addBuddy:(id)buddy;
+(void)showMyHomeWithMID:(id)mid withOriginType:(int)originType;
+(void)showMyHomeWithMID:(id)mid;
+(void)rejectToJoinGroup:(id)joinGroup;
+(void)joinGroup:(id)group;
+(void)addFriend:(id)aFriend contactType:(int)type;
+(void)addFriend:(id)aFriend;
+(void)addWithManagedObject:(id)managedObject;
+(void)showHitokotoOfUser:(id)user onViewController:(id)controller;
+(void)editProfileFromViewController:(id)viewController;
+(void)cancelInvitingUser:(id)user toGroup:(id)group;
+(void)makeACallToUser:(id)user videoOn:(BOOL)on;
+(void)blockRecommendedUser:(id)user;
+(void)unmarkFavoriteUser:(id)user;
+(void)unblockRecommendedUser:(id)user;
+(void)unblockUser:(id)user;
+(void)chatWithManagedObject:(id)managedObject;
+(void)handleButtonTypeForMyself:(int)myself;
+(void)handleButtonType:(int)type forBuddy:(id)buddy;
+(void)handleButtonType:(int)type forGroup:(id)group;
+(void)handleButtonType:(int)type forUser:(id)user contactType:(int)type3;
+(void)doCommonActionWithButtonItem:(id)buttonItem contactType:(int)type;
+(void)doCommonActionWithButtonItem:(id)buttonItem;
-(void).cxx_destruct;
-(id)buildButtonItems;
-(void)addButtonWithType:(int)type;
-(id)initWithModelObject:(id)modelObject contactType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface NLViewOrientationChanger : NSObject {
	BOOL isWorking;
	UIView* _view;
	id rotationEndCallback;
	id orientationObserver;
	int lastOrientation;
}
@property(assign, nonatomic) int lastOrientation;
@property(retain, nonatomic) id orientationObserver;
@property(assign, nonatomic) UIView* view;
@property(copy, nonatomic) id rotationEndCallback;
@property(readonly, assign, nonatomic) BOOL isWorking;
+(void)forceRotateView:(id)view toInterfaceOrientation:(int)interfaceOrientation;
-(void).cxx_destruct;
-(void)stopWorking;
-(void)startWorking;
-(id)initWithView:(id)view;
-(void)removeObserver;
-(void)addObserver;
-(void)rotateViewWithOrientation:(int)orientation;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LineCoinPurchaseHistoryViewController : NLTableViewController <LineCoinHistoryFooterDelegate, LineNetworkErrorViewDelegate, StickerShopSegmentControllerDelegate> {
	StickerShopSegmentController* segmentControl_;
	int coinFetchOffset;
	int coinFetchMonth;
	int lastCoinFetchCount;
	int itemFetchOffset;
	int itemFetchMonth;
	int lastItemFetchCount;
	LineCoinHistoryResult* coinHistoryResult_;
	LineCoinHistoryResult* itemHistoryResult_;
	BOOL loadingCoins_;
	BOOL loadingItems_;
	LineCoinStatusHeaderView* headerView_;
	NSMutableArray* purchaseCoinList_;
	NSMutableArray* purchaseItemList_;
	unsigned selectedIndex;
}
@property(assign, nonatomic) unsigned selectedIndex;
@property(retain, nonatomic) NSMutableArray* purchaseItemList;
@property(retain, nonatomic) NSMutableArray* purchaseCoinList;
-(void).cxx_destruct;
-(void)refreshFooter;
-(void)refreshCoin;
-(void)retry;
-(void)showNetworkError;
-(void)loadMore;
-(id)historyList;
-(id)historyResult;
-(void)loadItemList;
-(void)loadCoinList;
-(void)footerEvent:(int)event;
-(void)changeSegment:(id)segment;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface LineCoinCommand : CDVPlugin {
	NSString* callbackID_;
	NSString* transactionID;
}
@property(retain, nonatomic) NSString* transactionID;
-(void).cxx_destruct;
-(void)reserveCoins:(id)coins withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface LineCoinScheme : NSObject {
}
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
+(id)lineCoinSchemeURL;
+(id)lineCoinScheme;
@end

__attribute__((visibility("hidden")))
@interface LineCoinItemDetailViewController : NLViewController <LineNetworkErrorViewDelegate> {
	UIImageView* topBGView_;
	UIView* bottomBG_;
	NSString* channelID;
	NSString* itemImageURL;
	LineCoinUseReservationItem* item;
	id successBlock;
	id failedBlock;
}
@property(copy, nonatomic) id failedBlock;
@property(copy, nonatomic) id successBlock;
@property(retain, nonatomic) LineCoinUseReservationItem* item;
@property(retain, nonatomic) NSString* itemImageURL;
@property(retain, nonatomic) NSString* channelID;
-(void).cxx_destruct;
-(void)updateCoinStatus:(id)status;
-(void)chargeCoin;
-(void)reserveCoins;
-(void)retry;
-(void)showNetworkError;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithItem:(id)item channelId:(id)anId itemImageURL:(id)url SuccessBlock:(id)block failedBlock:(id)block5;
@end

__attribute__((visibility("hidden")))
@interface LAFoldButton : UIButton {
}
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoListTitleView : UIView {
	UIButton* _foldButton;
	BOOL _folded;
	id<LAPhotoListTitleViewDelegate> _delegate;
}
@property(assign, nonatomic, getter=isFolded) BOOL folded;
@property(assign, nonatomic) id<LAPhotoListTitleViewDelegate> delegate;
-(void).cxx_destruct;
-(void)didTapFoldButton:(id)button;
-(void)updateTitleText:(id)text;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface LineMyhomeNetworkService : NSObject <MBNetworkService> {
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedNetworkService;
-(void)requestWithUrlRequest:(id)urlRequest requestInfo:(id)info response:(id)response;
-(BOOL)canLegyRequest:(id)request;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineMyhomeController : NSObject <NLProfilePopupViewerDelegate, LocationDetailViewControllerDelegate, MBLineDelegate, UIActionSheetDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate> {
	UIViewController* viewController_;
	NSTimer* coolDownCheckTimer;
	BOOL doingPresentViewController;
	BOOL _tabShouldSelected;
	BOOL _timelineTabDidSelected;
	BOOL _timelineTabHighlighted;
	BOOL _itemDeleted;
	NLProfilePopupViewer* profilePopupViewer;
}
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(assign, nonatomic) BOOL itemDeleted;
@property(assign, nonatomic) BOOL timelineTabHighlighted;
@property(assign, nonatomic) BOOL timelineTabDidSelected;
@property(assign, nonatomic) BOOL tabShouldSelected;
+(void)notifyToRefreshProfileImageWithMID:(id)mid;
+(BOOL)isMyhomeChannel:(id)channel;
+(Class)myhomeViewClass;
+(Class)timelineHomeSettingClass;
+(void)syncMyHomeSettings;
+(void)updateMyProfileToMyhome;
+(void)updateMyNameToMyhome;
+(void)updateNewPostStatus;
+(void)showNewPostEventReceived:(BOOL)received;
+(id)myhomeAccessToken;
+(void)hasNewPostWithMID:(id)mid block:(id)block;
+(void)versionUpdated;
+(void)setMyhomeTimelineModulePhase;
+(id)defaultTimelineHost;
+(id)defaultMyhomeApiHost;
+(id)defaultMyhomeHost;
+(void)updateServerInfo;
+(void)initializeMyhomeTimelineModule;
+(void)timelineUpdateStatusInfoSyncHomeGroup;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void).cxx_destruct;
-(id)showMyHomeProfilePopupByUserMID:(id)mid inViewController:(id)viewController inMyHomeView:(id)myHomeView hiddenPosts:(BOOL)posts;
-(void)showMyHomeWriteWithSharableObject:(id)sharableObject withOptionalParameter:(id)optionalParameter fromViewController:(id)viewController;
-(void)showMyHomePublicSettingViewInViewController:(id)viewController byModal:(BOOL)modal;
-(void)showTimelineHomeSettingInViewController:(id)viewController byModal:(BOOL)modal;
-(void)showMyHomePostDetailViewWithMid:(id)mid withPostId:(id)postId inViewController:(id)viewController;
-(void)showMyHomePostDetailViewByParameter:(id)parameter inViewController:(id)viewController;
-(void)showMyHomeViewForMeInViewController:(id)viewController byModal:(BOOL)modal;
-(void)showMyHomeViewByUserMID:(id)mid inViewController:(id)viewController byModal:(BOOL)modal fromOriginType:(int)originType;
-(void)updateMyHomeInViewController:(id)viewController;
-(void)refreshNeededChannelTokensWithCompleteBlock:(id)completeBlock;
-(BOOL)needsRefreshMyhomeToken;
-(void)dismissOrPopSelfAndShareLocation:(id)location;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)profilePopupViewer:(id)viewer willSelectButtonItem:(id)item;
-(void)actionTimelineBuddyGroupChanged:(id)changed;
-(void)actionTimelineRefresh:(id)refresh;
-(void)actionTimelineItemDeleted:(id)deleted;
-(void)actionTimelineItemExist:(id)exist;
-(void)actionSharingBuddyPost:(id)post;
-(void)actionOpenURL:(id)url;
-(void)actionHideNewPostNotification:(id)notification;
-(void)actionShowNewPostNotification:(id)notification;
-(void)actionAccessTokenExpired:(id)expired;
-(void)actionShowMyHomeSetting:(id)setting;
-(void)actionShowUserProfile:(id)profile;
-(void)actionShowCoverSettingView:(id)view;
-(void)actionShowMoviePlayer:(id)player;
-(void)actionShowLocationView:(id)view;
-(void)actionHideNotificationCenter:(id)center;
-(void)actionShowNotificationCenter:(id)center;
-(void)actionMyhomeWriteSticker:(id)sticker;
-(void)actionMyhomeWriteImage:(id)image;
-(void)actionMyhomeWrite:(id)write;
-(id)createPostOption:(id)option withAttachType:(id)attachType;
-(BOOL)highlightedTimelineTabBar;
-(void)checkDidSelectTimelineTabBarWithIndex:(int)check;
-(void)hideTimelineTabBarHighlighted;
-(void)tick:(id)tick;
-(void)checkTimelineHighlightCoolDown;
-(void)showTimelineTabHighlight;
-(int)sourceTypeFromMyhomeOrigin:(int)myhomeOrigin;
-(void)showMyhomeWriteWithPostOption:(id)postOption onViewController:(id)controller fromSource:(id)source;
-(void)showOfficialHomeProfileWithLineContact:(id)lineContact;
-(void)showOfficialHomeProfileViewWithMID:(id)mid;
-(void)showUserProfileViewWithMID:(id)mid;
-(void)showProfileImageDetailViewWithTitle:(id)title thumbnailSource:(id)source;
-(void)showProfileImageDetailViewWithContact:(id)contact;
-(void)showProfileImageDetailViewWithUser:(id)user;
-(void)showProfileView:(id)view;
-(id)myProfileView;
-(id)userProfileViewByUser:(id)user;
-(void)determineButtonItemsOfViewer:(id)viewer fromUser:(id)user;
-(void)willEnterForeground:(id)foreground;
-(void)removeObservers;
-(void)addObserves;
-(BOOL)mbLineViewController:(id)controller shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)initializeModules;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineCoinPurchaseCell : UITableViewCell {
	UIImageView* coinImage_;
	UILabel* coinAmount_;
	UIImageView* coinPlusImage_;
	UILabel* coinAmountPlus_;
	UIButton* purchaseBtn_;
	LineCoinProductItem* coinItem_;
	id<PurchaseCoinDelegate> delegate;
	int priceTier;
}
@property(assign, nonatomic) int priceTier;
@property(retain, nonatomic) LineCoinProductItem* coinItem;
@property(assign, nonatomic) id<PurchaseCoinDelegate> delegate;
-(void).cxx_destruct;
-(void)purchaseCoin:(id)coin;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLCallingLineIDManager : NSObject {
}
+(void)openPhoneVerificationPageWithRootViewController:(id)rootViewController;
+(unsigned)currentCallingLineIDStatus;
+(void)didChangeCountryConfiguration:(id)configuration;
+(void)didReceiveReachabilityChangedNotification:(id)notification;
+(void)endVerification;
+(BOOL)isOverDateWithFromDate:(id)date toDate:(id)date2 interval:(double)interval;
+(void)failedVerifyPhoneNumber;
+(void)cancelVerifyPhoneNumber;
+(void)successVerifyPhoneNumber;
+(BOOL)updateCellularUsingDate:(id)date;
+(BOOL)createCellularUsingDate:(id)date;
+(void)prepareCallingLineID;
+(void)addObserverReachabiliityNotification;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface LineCoverImageHandler : NSObject <UIActionSheetDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, LGImagePickerDelegate> {
	LineImageCropper* imageCropper_;
	LineCoverImageUploder* uploader_;
	UIView* parentView_;
	NSString* serviceCode_;
	NSString* objectSpaceId_;
	int actionSheetSelectedIndex_;
	UIViewController* viewController;
	id resultBlock;
}
@property(copy, nonatomic) id resultBlock;
@property(assign, nonatomic) UIViewController* viewController;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)lgImagePickerControllerDidCancel:(id)lgImagePickerController;
-(void)lgImagePickerController:(id)controller didFinishPickingMediaWithInfos:(id)infos;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)dismissUIImagePickerController;
-(void)openImagePicker:(int)picker;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showImagePickerActionSheet;
-(CGSize)coverImageSize;
-(void)uploadCoverImage:(id)image;
-(void)cropAndUploadCoverImage:(id)image viewController:(id)controller resultBlock:(id)block;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineImageCropper : NSObject <LinePictureCropToolBarDelegate> {
	CGSize cropSize_;
	UIImage* srcImage_;
	LineCoverImageView* imageView_;
	LinePictureCropToolBar* toolBar_;
	LinePictureCropCoverView* coverView_;
	BOOL isCropping_;
	UIView* parentView;
	id resultBlock;
}
@property(copy, nonatomic) id resultBlock;
@property(assign, nonatomic) UIView* parentView;
-(void).cxx_destruct;
-(void)actionCropToolBarChooseButton:(id)button;
-(void)actionCropToolBarCancelButton:(id)button;
-(void)hide;
-(id)cropImage;
-(void)onDoubleTapped:(id)tapped;
-(void)showCropView:(id)view cropSize:(CGSize)size resultBlock:(id)block;
-(id)initWithParentView:(id)parentView;
@end

__attribute__((visibility("hidden")))
@interface LineImageUploderOBSParameter : NSObject {
	NSString* serviceCode;
	NSString* objectSpaceID;
	NSString* obsKey;
}
@property(retain, nonatomic) NSString* obsKey;
@property(retain, nonatomic) NSString* objectSpaceID;
@property(retain, nonatomic) NSString* serviceCode;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LineCoverImageUploder : NSObject <UIActionSheetDelegate, LineImageUploadProgressViewDelegate> {
	LineImageUploadProgressView* progressView_;
	LineImageUploderOBSParameter* obsParameter_;
	NSURL* cacheFileUrl;
	NSString* serviceCode_;
	NSString* objectSpaceId_;
	UIImage* uploadImage_;
	NSString* obsId_;
	UIView* parentView_;
	NLObjectStorageOperation* uploadOperation;
	id resultBlock;
}
@property(copy, nonatomic) id resultBlock;
@property(retain, nonatomic) NLObjectStorageOperation* uploadOperation;
-(void).cxx_destruct;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionImageUploadFailedButton:(id)button;
-(void)actionImageUploadCancelButton:(id)button;
-(BOOL)startUpload;
-(id)temporaryImageNameWithObjectID:(id)objectID;
-(void)cancelUpload;
-(void)restartUpload;
-(void)hideProgressView;
-(void)showProgressView;
-(id)generateUUID;
-(void)uploadImage:(id)image resultBlock:(id)block;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LineUnderLineLabel : UILabel {
	UIColor* underlineColor;
}
@property(retain, nonatomic) UIColor* underlineColor;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(id)initWithUnderlineColor:(id)underlineColor;
@end

__attribute__((visibility("hidden")))
@interface LineCoinStatusHeaderView : UIView {
	UIImageView* coinHeaderViewBG_;
	UIImageView* coinImage_;
	UILabel* coinLabel_;
	UILabel* coinAmountLabel_;
	UIImageView* freeCoinBgView_;
	UILabel* freeCoinAmountLabel_;
}
@property(retain, nonatomic) UILabel* freeCoinAmountLabel;
@property(retain, nonatomic) UILabel* coinAmountLabel;
@property(retain, nonatomic) UILabel* coinLabel;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(float)sumWidthControls;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBLike : MBBaseActivityContent <NSCoding> {
	int mLikeSn;
	NSString* mLikeType;
	MBActor* mFromUser;
}
@property(readonly, assign, nonatomic) MBActor* fromUser;
@property(readonly, assign, nonatomic) NSString* likeType;
@property(readonly, assign, nonatomic) int likeSn;
-(void).cxx_destruct;
-(id)initWithLikeInfo:(id)likeInfo parent:(id)parent;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface StatusMessageViewController : ProfileTextEditViewController {
}
-(void)buttonTapped;
-(unsigned)maxLength;
-(id)inputName;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface LANoAlbumsFirstView : UIView {
	UIImageView* _mainImageView;
	UILabel* _titleLabel;
	UILabel* _detailLabel;
}
@property(retain, nonatomic) UILabel* detailLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIImageView* mainImageView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)configureLabel:(id)label;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAUser : NSObject <NSCoding> {
	BOOL blocked;
	BOOL unregistered;
	NSString* mid;
	NSString* displayName;
}
@property(assign, nonatomic, getter=isUnregistered) BOOL unregistered;
@property(assign, nonatomic, getter=isBlocked) BOOL blocked;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithLineUser:(id)lineUser;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LineMyhomeDataSource : NSObject <MBLineDataSource> {
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedDataSource;
-(int)photoSizeType;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLProfileThumbnailImageUrlProtocol : NSURLProtocol {
	NSObject* _downloadHandle;
}
+(BOOL)requestIsCacheEquivalent:(id)equivalent toRequest:(id)request;
+(id)canonicalRequestForRequest:(id)request;
+(BOOL)canInitWithRequest:(id)request;
+(void)load;
-(void).cxx_destruct;
-(void)stopLoading;
-(void)startLoading;
-(id)extractMIDFromURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface NLOfficialDirectoryViewCell : SWTableViewCell {
	UILabel* _nameLabel;
	UIImageView* _profileImageView;
	UIImageView* _isNewIcon;
	UIImageView* _arrowImageView;
}
@property(retain, nonatomic) UIImageView* arrowImageView;
@property(retain, nonatomic) UIImageView* isNewIcon;
@property(retain, nonatomic) UIImageView* profileImageView;
@property(retain, nonatomic) UILabel* nameLabel;
-(void).cxx_destruct;
-(BOOL)render;
-(void)showNewFriends:(BOOL)friends;
-(void)setOfficialFriendCount:(unsigned)count;
-(void)layoutSubviews;
-(void)initViews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoCommentViewActions : NSObject {
	MBPhotoCommentViewController* mController;
}
+(id)actionsWithController:(id)controller;
-(id)createOpenStickerTabAction;
-(id)createTouchEndedAction;
-(BOOL)allowLinkUserProfileWithMid:(id)mid;
-(id)createRefreshAction;
-(id)createViewContentStickerAction;
-(id)createNMAttributedLabelActionLinkLongTapped;
-(id)createNMAttributedLabelActionLinkTapped;
-(id)createReplyCommentViewUserProfileAction;
-(id)createViewStickerMoreAction;
-(id)createViewUserProfileAction;
-(id)initWithController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface NLThemeShopDownloadView : UIView {
	id<NLThemeShopDownloadViewDelegate> _delegate;
	UIImageView* _backgroundImageView;
	NLFrameImageView* _thumbnailImageView;
	UILabel* _packageNameLabel;
	UILabel* _packageExpiredDateLabel;
	UIImageView* _progressBG;
	UIImageView* _progressBar;
	NLActiveHitButton* _stopButton;
	UIButton* _applyNowButton;
	UIAlertView* _alertView;
	UILabel* _downloadingLabel;
	UILabel* _readyToDownloadLabel;
	UILabel* _footerLabel;
	int _currentViewType;
}
@property(assign, nonatomic) int currentViewType;
@property(retain, nonatomic) UILabel* footerLabel;
@property(retain, nonatomic) UILabel* readyToDownloadLabel;
@property(retain, nonatomic) UILabel* downloadingLabel;
@property(retain, nonatomic) UIAlertView* alertView;
@property(retain, nonatomic) UIButton* applyNowButton;
@property(retain, nonatomic) NLActiveHitButton* stopButton;
@property(retain, nonatomic) UIImageView* progressBar;
@property(retain, nonatomic) UIImageView* progressBG;
@property(retain, nonatomic) UILabel* packageExpiredDateLabel;
@property(retain, nonatomic) UILabel* packageNameLabel;
@property(retain, nonatomic) NLFrameImageView* thumbnailImageView;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(assign, nonatomic) id<NLThemeShopDownloadViewDelegate> delegate;
-(void).cxx_destruct;
-(id)product;
-(void)onButtonTapped:(id)tapped;
-(id)createRegisterScrollView;
-(void)layoutSubviewsForDefault;
-(void)initSubview;
-(void)setDownloadingLabelText:(id)text;
-(void)setProgressValue:(float)value;
-(void)setThumbnailImage:(id)image;
-(void)loadDataForDownloadComplete;
-(void)loadDataForDownloading;
-(void)loadDataForDefault;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface AppLinkModel : NSObject {
	BOOL sent;
	NSString* msgTemplate;
	NSString* appName;
	NSString* previewUrl;
	NSString* linkUri;
	NSString* installUri;
	NSString* chatID;
	NSAttributedString* styledText;
	float contentMinimumWidth;
	float contentMinimumHeight;
	CGSize thumbSize;
	CGSize textSize;
}
@property(assign, nonatomic) float contentMinimumHeight;
@property(assign, nonatomic) float contentMinimumWidth;
@property(assign, nonatomic) CGSize thumbSize;
@property(assign, nonatomic) CGSize textSize;
@property(assign, nonatomic, getter=isSent) BOOL sent;
@property(retain, nonatomic) NSAttributedString* styledText;
@property(retain, nonatomic) NSString* chatID;
@property(retain, nonatomic) NSString* installUri;
@property(retain, nonatomic) NSString* linkUri;
@property(retain, nonatomic) NSString* previewUrl;
@property(retain, nonatomic) NSString* appName;
@property(retain, nonatomic) NSString* msgTemplate;
+(CGSize)thumbnailSizeOfImage:(CGSize)image maxSize:(CGSize)size;
-(void).cxx_destruct;
-(CGSize)totalContentSize;
-(id)styledSentRawText;
-(id)styledReceivedRawText;
-(id)styledSentAppName;
-(id)styledReceivedAppName;
-(id)previewTextFromSelf;
-(id)previewTextWithSenderName:(id)senderName;
-(id)text;
-(unsigned)applinkTemplateType;
-(void)adjustThumbnailSize:(CGSize)size;
@end

__attribute__((visibility("hidden")))
@interface NLMessageAppLinkView : NLMessageBubbleView {
	LineFileDownload* currentDownload_;
	UIView* divideLineView_;
	NLStyledTextView* descriptionLabel_;
	UIImageView* thumbImageView_;
	UIImageView* thumbImageBorder_;
	UIButton* openButton_;
	UIImageView* arrowIconView_;
	AppLinkModel* appLinkPostObject_;
	CGRect textBounds_;
}
@property(assign, nonatomic) CGRect textBounds;
@property(retain, nonatomic) AppLinkModel* appLinkPostObject;
@property(readonly, assign, nonatomic) UIImageView* arrowIconView;
@property(readonly, assign, nonatomic) UIButton* openButton;
@property(readonly, assign, nonatomic) UIImageView* thumbImageBorder;
@property(readonly, assign, nonatomic) UIImageView* thumbImageView;
@property(readonly, assign, nonatomic) NLStyledTextView* descriptionLabel;
-(void).cxx_destruct;
-(CGSize)contentSize;
-(float)leftMargin;
-(void)loadPreviewIconImageFromRemote;
-(void)setDefaultImage;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)prepareSubviewsForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoDataProxy : NSObject <LAPhotoDataDelegate> {
	NSMutableDictionary* mIsFetching;
	NSOperationQueue* mAlbumManagerQueue;
	LAPhotoProtocol* mPhotoProtocol;
	NSMutableDictionary* _recoverDate;
	NSMutableDictionary* _shouldDeleteDict;
}
@property(retain, nonatomic) NSMutableDictionary* shouldDeleteDict;
@property(retain, nonatomic) NSMutableDictionary* recoverDate;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)updatedPhotoList:(id)list lastDict:(id)dict albumID:(id)anId groupID:(id)anId4;
-(void)fullFetchPhotoList:(id)list lastDict:(id)dict albumID:(id)anId groupID:(id)anId4;
-(void)setPhotoLastID:(id)anId albumID:(id)anId2 groupID:(id)anId3;
-(void)updateAlbumNotificationPhotoAddCompleted:(id)completed groupID:(id)anId;
-(void)deleteAlbum:(id)album groupID:(id)anId;
-(void)requestRecoverFullFetch:(id)fetch groupID:(id)anId message:(id)message;
-(void)requestPullDownRefresh:(id)refresh groupID:(id)anId;
-(void)requestPhotoList:(id)list groupID:(id)anId;
-(BOOL)isFetching:(id)fetching groupID:(id)anId;
-(void)endFetching:(id)fetching groupID:(id)anId;
-(void)startFetching:(id)fetching groupID:(id)anId;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLThemePackageViewCell : UITableViewCell {
	LineShopPurchaseRecord* _purchaseRecord;
	LineShopProductDetail* _productDetail;
	unsigned _themeViewCellStyle;
	NSString* _userMid;
	UIView* _borderLine;
	UILabel* _productNameLabel;
	UILabel* _priceLabel;
	UILabel* _purchaseLabel;
	UILabel* _userNameLabel;
	UILabel* _dateLabel;
	NLFrameImageView* _thumbNailImageView;
	UIImageView* _arrowImageView;
	UIImageView* _giftImageView;
	UIImageView* _newImageView;
	UIView* _dividerViewOnTopFirst;
	UIView* _dividerViewOnTopSecond;
}
@property(retain, nonatomic) UIView* dividerViewOnTopSecond;
@property(retain, nonatomic) UIView* dividerViewOnTopFirst;
+(float)heightForCell;
-(void).cxx_destruct;
-(id)purchaseDateTextOfTimestamp:(long long)timestamp;
-(id)userNameWithFromUserMid:(id)userMid andToUserMid:(id)userMid2;
-(void)layoutSubviews;
-(void)setPurchaseRecord:(id)record themeViewCellStyle:(unsigned)style;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LineCoinPurchaseManager : NSObject {
	LineCoinProductItem* coinItem;
	id callback;
}
@property(copy, nonatomic) id callback;
@property(retain, nonatomic) LineCoinProductItem* coinItem;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)purchaseCoin:(id)coin completionBlock:(id)block;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineStickerPurchaseManager : NSObject <SKPaymentTransactionObserver> {
	dispatch_queue_s* purchaseQueue;
	LineProduct* product;
	id callback;
	NSString* userMid;
	NSString* message;
	int messageTemplate;
	NSString* talkingMid;
	id restoreCallback;
	NSArray* myProductIDList;
	NSMutableDictionary* purchasedProductDictionary;
}
@property(retain, nonatomic) NSMutableDictionary* purchasedProductDictionary;
@property(retain, nonatomic) NSArray* myProductIDList;
@property(copy, nonatomic) id restoreCallback;
@property(assign, nonatomic) int messageTemplate;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* userMid;
@property(copy, nonatomic) id callback;
@property(retain, nonatomic) NSString* talkingMid;
@property(retain, nonatomic) LineProduct* product;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)restoreSuccessWithProductIDs:(id)productIDs;
-(void)restoreFailedWithError:(id)error;
-(void)addPurchaseQueueWithShopProductID:(id)shopProductID packageId:(long long)anId currency:(id)currency price:(id)price free:(BOOL)free;
-(void)purchaseStickerShopProduct:(id)product;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)setupRestoreProductInfo;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
-(void)restoreWithCompletionBlock:(id)completionBlock;
-(void)buyFreeProduct;
-(void)purchaseCoinProduct;
-(void)reservation;
-(id)newPaymentReservationForCurrency:(id)currency price:(id)price;
-(void)purchaseWithProduct:(id)product completionBlock:(id)block;
-(void)presentTo:(id)to product:(id)product message:(id)message messageTemplate:(int)aTemplate completionBlock:(id)block;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineCoverImageView : UIScrollView <UIScrollViewDelegate> {
	UIImageView* imageView_;
	float bestZoomScale_;
	float minimumZoomScale_;
	BOOL isNeedCenterAlign_;
	CGSize cropSize;
	UIEdgeInsets cropInsets;
}
@property(assign, nonatomic) CGSize cropSize;
@property(assign, nonatomic) UIEdgeInsets cropInsets;
-(void).cxx_destruct;
-(void)doubleTap:(CGPoint)tap;
-(void)configureForImageSize:(CGSize)imageSize;
-(void)displayImage:(id)image cropRect:(CGSize)rect;
-(id)imageView;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineCoinPurchaseHistoryCell : UITableViewCell {
	UILabel* cancelLabel_;
	UILabel* itemNameLabel_;
	UILabel* purchaseDate_;
	UIImageView* coinImage_;
	UILabel* coinAmountLabel_;
}
+(id)titleFromHistory:(id)history;
+(float)getHeightWithHistory:(id)history;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setHistory:(id)history;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LAURLLegyOperation : NSOperation {
	NSURLRequest* mRequest;
	id mCompletionBlock;
}
-(void).cxx_destruct;
-(id)JSONObjectFromData:(id)data;
-(void)operationCompletedWithData:(id)data lastDict:(id)dict serverError:(id)error;
-(void)didFinishLoadingWithRequest:(id)request responseStatusCode:(int)code responseAllHeaderFields:(id)fields data:(id)data;
-(void)didFailWithError:(id)error;
-(id)requestInfo;
-(void)main;
-(id)initWithRequest:(id)request completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface NLCDVCameraCommand : CDVCamera {
}
-(void)getPicture:(id)picture withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationCenterPushHandler : NSObject {
}
+(void)handleAPNSPayload:(id)payload;
@end

__attribute__((visibility("hidden")))
@interface MBLocationButton : UIButton {
	UIImageView* mIconView;
	UILabel* mAddressLabel;
}
@property(readonly, assign, nonatomic) UILabel* addressLabel;
+(id)locationButton;
-(void).cxx_destruct;
-(float)boundingHeightWithWidth:(float)width text:(id)text;
-(void)setAddressText:(id)text;
-(void)resetCellData;
-(void)drawCellData;
-(CGSize)preferredSizeThatFits:(CGSize)fits;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoViewSelectedChatDataSource : LAPhotoViewBaseDataSource {
	BOOL _hasUnsupportedImage;
	id _loadCompletion;
	id _loadProgressBlock;
	LAPhotoViewChatDataSource* _dataSource;
	unsigned _addableCount;
	NSMutableIndexSet* _selectedIndexSet;
}
@property(retain, nonatomic) NSMutableIndexSet* selectedIndexSet;
@property(assign, nonatomic) BOOL hasUnsupportedImage;
@property(assign, nonatomic) unsigned addableCount;
@property(retain, nonatomic) LAPhotoViewChatDataSource* dataSource;
-(id)loadProgressBlock;
-(id)loadCompletion;
-(void).cxx_destruct;
-(void)removeAllSelectedIndexes;
-(void)selectAllIndexes;
-(unsigned)numberOfSelectedIndexes;
-(BOOL)isSelectedAtIndex:(int)index;
-(void)setSelected:(BOOL)selected atIndex:(int)index;
-(void)cancelAllOperations;
-(void)setLoadCompletion:(id)completion;
-(void)setLoadProgressBlock:(id)block;
-(void)preloadNextImage:(unsigned)image;
-(void)preloadImagesAroundIndex:(int)index;
-(void)preloadImagesAfterLoadingImageAtIndex:(int)index;
-(void)imageUploadInfo:(id)info atIndex:(unsigned)index;
-(void)imageInfo:(id)info atIndex:(int)index;
-(CGSize)sizeOfThumbnailAtIndex:(int)index;
-(id)thumbnailAtIndex:(int)index;
-(id)fullImageAtIndex:(int)index;
-(id)photoInfoAtIndex:(int)index;
-(void)removeObjectAtIndex:(int)index;
-(id)objectAtIndex:(int)index;
-(unsigned)numberOfObjects;
-(id)title;
-(void)cleanup;
-(id)initWithDataSource:(id)dataSource addableCount:(unsigned)count;
@end

__attribute__((visibility("hidden")))
@interface TalkAddressBookManager : NSObject {
	BOOL synchronizing_;
	BOOL needSetNewFriend;
	void* _addressBook;
	NLGCDTimer* _gcdTimer;
	BOOL _needContactsSyncManually;
	NSManagedObjectContext* _backgroundContext;
}
@property(retain, nonatomic) NSManagedObjectContext* backgroundContext;
@property(assign, nonatomic) BOOL needContactsSyncManually;
+(void)updateLineCallUrlScheme:(id)scheme withUpdateType:(BOOL)updateType;
+(id)unformattedPhoneNumber:(id)number;
+(void)validateContactsWithManagedObjectContext:(id)managedObjectContext addressBook:(void*)book;
+(void)validateRegisteredContactsInManagedObjectContext:(id)managedObjectContext;
+(id)checkRemovedAddressBookUserWithAddressbookLUIDs:(id)addressbookLUIDs localContacts:(id)contacts;
+(void)checkOutContacts:(id)contacts inManagedObjectContext:(id)managedObjectContext;
+(BOOL)existContactKey:(id)key withLUID:(id)luid inAddressBook:(void*)addressBook;
+(id)LUIDForPerson:(void*)person;
+(id)keitaiEmailsForPerson:(void*)person;
+(BOOL)isKeitaiEmailAddress:(id)address;
+(id)phoneticNameForSortingForPerson:(void*)person fallback:(id)fallback;
+(id)phoneticNameForPerson:(void*)person;
+(id)nameForPerson:(void*)person;
+(id)phoneNumbersWithPerson:(void*)person;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)synchronizeContactsManuallyWithInterval:(double)interval;
-(void)unregistAddressBookChangeCallback;
-(void)registAddressBookChangeCallback;
-(id)allContactsInAddressBook:(void*)addressBook withKeyword:(id)keyword withSeachType:(unsigned)seachType maxCount:(int)count;
-(BOOL)startSynchronizingAll:(BOOL)all manuallySync:(BOOL)sync withCompletionBlock:(id)completionBlock exceptionBlock:(id)block;
-(BOOL)startSynchronizingAll:(BOOL)all withCompletionBlock:(id)completionBlock exceptionBlock:(id)block;
-(BOOL)firstSynchronizingAllContactsWithCompletionBlock:(id)completionBlock exceptionBlock:(id)block;
-(BOOL)startSynchronizingAllContactsWithCompletionBlock:(id)completionBlock exceptionBlock:(id)block;
-(BOOL)startSynchronizingContactsWithCompletionBlock:(id)completionBlock exceptionBlock:(id)block;
-(BOOL)firstSynchronizingContactsWithCompletionBlock:(id)completionBlock exceptionBlock:(id)block;
-(id)processSyncContactsResponse:(id)response withAddressBook:(void*)addressBook inManagedObjectContext:(id)managedObjectContext;
-(void)synchronizeContacts:(id)contacts completionBlock:(id)block exceptionBlock:(id)block3;
-(BOOL)startSynchronizingWithLUID:(id)luid completionBlock:(id)block exceptionBlock:(id)block3;
-(BOOL)isSynchronizing;
-(BOOL)needsSynchronization;
-(BOOL)synchronizationEnabled;
-(id)allContactsInAddressBook:(void*)addressBook;
-(id)modificationDateOrCreationDateForPerson:(void*)person;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface TalkAddressBookContact : NSObject {
	NSMutableDictionary* keys_;
	NSString* LUID;
	NSString* name;
	NSDate* updatedAt;
	NSString* phoneticName;
	NSString* _phoneticNameForSorting;
	NSString* _matchedPhoneNumber;
}
@property(retain, nonatomic) NSString* matchedPhoneNumber;
@property(readonly, assign, nonatomic) NSDictionary* keys;
@property(readonly, assign, nonatomic) BOOL hasName;
@property(retain, nonatomic) NSDate* updatedAt;
@property(retain, nonatomic) NSString* phoneticNameForSorting;
@property(retain, nonatomic) NSString* phoneticName;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* LUID;
-(void).cxx_destruct;
-(BOOL)hasBeenUpdatedSince:(id)since;
-(id)contactsNotInObjects:(id)objects;
-(id)selectNotContained:(id)contained;
-(BOOL)isEqualToContactObjects:(id)contactObjects;
-(id)keysForType:(unsigned)type;
-(unsigned)count;
-(id)contacts;
-(BOOL)addKey:(id)key withType:(unsigned)type;
-(id)initWithLUID:(id)luid name:(id)name updatedAt:(id)at;
-(id)init;
-(void)init_;
@end

__attribute__((visibility("hidden")))
@interface LineCoinHistoryFooterView : UIView {
	BOOL enableTouchEffect;
	int style;
	id<LineCoinHistoryFooterDelegate> delegate;
}
@property(assign, nonatomic) id<LineCoinHistoryFooterDelegate> delegate;
@property(assign, nonatomic) BOOL enableTouchEffect;
@property(assign, nonatomic) int style;
+(id)noDataViewWithDelegate:(id)delegate month:(id)month;
+(id)chargeViewNoDataWithDelegate:(id)delegate month:(id)month;
+(id)moreViewNoDataWithDelegate:(id)delegate month:(id)month type:(int)type;
+(id)themeRestoreViewWithDelegate:(id)delegate;
+(id)restoreViewWithTitle:(id)title delegate:(id)delegate;
+(id)moreViewWithDelegate:(id)delegate;
+(id)loadingView;
-(void)touchBtn:(id)btn;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)clearSubviews;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LALastIDManager : NSObject {
}
+(void)uncheckNewMarkGroupID:(id)anId;
+(void)uncheckNewMarkAlbum:(id)album groupID:(id)anId;
+(id)getCheckedPhotoDonwloadTimeWithAlbumID:(id)albumID groupID:(id)anId;
+(void)setCheckedPhotoDownloadTimeWithAlbumID:(id)albumID groupID:(id)anId;
+(id)getPullDownTimeWithAlbumID:(id)albumID groupID:(id)anId;
+(id)getPullDownTimeWithGroupID:(id)groupID;
+(id)getPollingTimestampWithAlbumID:(id)albumID groupID:(id)anId;
+(id)getPollingTimestampWithGroupID:(id)groupID;
+(id)getLastDictWithAlbumID:(id)albumID groupID:(id)anId;
+(id)getLastDictWithGroupID:(id)groupID;
+(void)setLastDict:(id)dict timestamp:(id)timestamp albumID:(id)anId groupID:(id)anId4;
+(void)setLastDict:(id)dict timestamp:(id)timestamp groupIDt:(id)dt;
+(void)setPhotoPollingTimestamp:(id)timestamp albumID:(id)anId groupID:(id)anId3;
+(void)setAlbumPollingTimestamp:(id)timestamp groupID:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface LineNetworkErrorView : UIView {
	id<LineNetworkErrorViewDelegate> delegate;
}
@property(assign, nonatomic) id<LineNetworkErrorViewDelegate> delegate;
-(void)retry;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBActivityContentMap : NSObject {
}
+(id)contentTypesForActivityType:(int)activityType;
@end

__attribute__((visibility("hidden")))
@interface LineCafeManagerController : NSObject <LineCafeDataSource, FileAttachmentDelegate, LineKeyboardDelegate> {
	id locationAttachDelegate;
	id stickerAttachDelegate;
}
@property(assign, nonatomic) id stickerAttachDelegate;
@property(assign, nonatomic) id locationAttachDelegate;
+(id)pathInfoForURLString:(id)urlstring;
+(void)updateServerInfo;
+(void)initializeCafeModule;
+(void)initialize;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(id)openChatMID;
-(void)lineKeyboard:(id)keyboard stickerTapped:(int)tapped;
-(void)lineKeyboardDidDeleteBackwards:(id)lineKeyboard;
-(void)lineKeyboardWillDeleteBackwards:(id)lineKeyboard;
-(void)attachLocation:(id)location;
-(void)attachImage:(id)image withPicker:(id)picker;
-(void)attachImage:(id)image;
-(void)channelTokenWithId:(id)anId withResultBlock:(id)resultBlock;
-(void)loadAndPlayMovieWithObsServiceCode:(id)obsServiceCode spaceId:(id)anId oid:(id)oid viewController:(id)controller;
-(void)requestWithUrlRequest:(id)urlRequest requestInfo:(id)info response:(id)response;
-(BOOL)isCallingByVOIP;
-(BOOL)canRecordVideo;
-(void)showAudioAlertOnlyOnceIfMicOffAndExcuteBlock:(id)block;
-(id)oneToOneNoteNewItemExistNotificationName;
-(id)groupNoteNewItemExistNotificationName;
-(id)nameOfMyHomeGroupChangeSelectedNotification;
-(id)imageForMBGroupSelectTabIconImage:(BOOL)mbgroupSelectTabIconImage highlighted:(BOOL)highlighted;
-(id)newMyHomeGroupSelectViewWithViewController:(id)viewController;
-(void)showStickerShop:(id)shop viewController:(id)controller;
-(CGSize)imageSizeForSticker:(id)sticker;
-(void)imageForSticker:(id)sticker withResultBlock:(id)resultBlock;
-(id)imageForSticker:(id)sticker;
-(void)selectStickerForWriteViewController:(id)writeViewController;
-(void)selectGroupForWriteViewController:(id)writeViewController;
-(void)selectLocationForWriteViewController:(id)writeViewController;
-(BOOL)viewController:(id)controller shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)thumbImage:(id)image imageType:(int)type withResultBlock:(id)resultBlock;
-(void)user:(id)user withResultBlock:(id)resultBlock;
-(id)urlScrapServerHost;
-(int)photoSizeType;
-(void)resetAccessToken;
-(id)myJoiningGroupArray;
-(void)myEncryptedAccessToken:(id)token;
-(id)lineAccessToken;
-(id)myAccessToken;
-(id)myName;
-(id)myMid;
-(BOOL)checkJoiningGroup:(id)group;
-(id)groupWithId:(id)anId;
-(id)packageWithSticker:(id)sticker;
-(id)lineCafeErrorFromException:(id)exception;
-(int)errorCodeFromRTSServiceException:(id)rtsserviceException;
-(id)groupDictionaryForCafe:(id)cafe;
-(id)memberDictionaryWithUser:(id)user;
-(id)memberDictionaryWithContact:(id)contact;
-(id)userObject:(id)object managedObjectContext:(id)context;
-(id)groupForKey:(id)key;
-(id)groupObjects;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
-(void)actionOneToNoteItemExist:(id)noteItemExist;
-(void)actionGroupNoteItemExist:(id)exist;
-(void)addObserversForUniversalEvent;
@end

__attribute__((visibility("hidden")))
@interface LineMaintenanceView : UIView {
}
-(id)initWithFrame:(CGRect)frame date:(id)date;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphDataManager : NSObject {
}
+(BOOL)validateCreatedTimeWithGroup:(id)group;
+(BOOL)validateCreatedTimeWithUser:(id)user;
+(void)markViewedWithUsers:(id)users groups:(id)groups onRefreshBlock:(id)block;
+(BOOL)isBlockingUser:(id)user;
+(id)groupForKey:(id)key;
+(id)userForKey:(id)key;
+(BOOL)hasOfficialFriends;
+(unsigned)numbersOfOfficialFriendsSocialGraph;
+(unsigned)numbersOfRecommendedSocialGraph;
+(id)objectIdsForLineCallWithLimit:(unsigned)limit;
+(id)contactsForLineCallWithLimit:(unsigned)limit;
+(id)lineUserLuids;
+(id)objectIdsWithLimit:(unsigned)limit withFilterPredicate:(id)filterPredicate;
+(id)fetchRequestForContactsWithLimit:(unsigned)limit withFilter:(id)filter;
+(id)fetchRequestForNotLineUsersFromSNSProvider:(id)snsprovider withFilter:(id)filter;
+(id)fetchRequestForInvitedGroupsWithFilter:(id)filter;
+(id)fetchRequestForRecommendedUsers;
+(id)fetchRequestForOfficialAccountSearchInContext:(id)context;
+(id)fetchRequestForBuddyOfficialAccountWithFilter:(id)filter;
+(id)fetchRequestForFavorites;
+(id)fetchRequestForGroupsWithFilter:(id)filter;
+(id)fetchRequestForFriendsWithFilter:(id)filter containOfficialAccount:(BOOL)account;
+(id)fetchRequestForMyNewFriends;
+(id)defaultSortDescriptorsWithPropertyName:(id)propertyName;
+(id)managedObjectContext;
@end

__attribute__((visibility("hidden")))
@interface MBUpdateHeaderView : UIView {
	UIActivityIndicatorView* mIndicator;
	UILabel* mUpdateMessage;
	UILabel* mUpdateDate;
	UIImageView* mBottomLine;
	NSDate* mDate;
	int mState;
}
@property(assign, nonatomic) int state;
-(void).cxx_destruct;
-(BOOL)render;
-(void)setDate:(id)date;
-(void)resetUpdateDate;
-(void)showBottomLine;
-(float)height;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)initViews;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphFilterData : NSObject {
	BOOL searchWasActive;
	NSString* savedSearchTerm;
	int savedScopeButtonIndex;
}
@property(assign, nonatomic) BOOL searchWasActive;
@property(assign, nonatomic) int savedScopeButtonIndex;
@property(copy, nonatomic) NSString* savedSearchTerm;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphSection : NSObject <LineTableViewSectionHeaderDelegate> {
	BOOL isCollapsed_;
	NSFetchedResultsController* fetchedResultController_;
	NSFetchedResultsController* filteredFetchedResultController_;
	SocialGraphFilterData* filterData_;
	unsigned sectionIndex_;
	UITableView* tableView_;
	UITableView* searchTableView_;
	id<NSFetchedResultsControllerDelegate> fetchedResultControllerDelegate_;
	LineTableViewSectionHeader* tableSectionHeaderView_;
	LineTableViewSectionHeader* filteredTableSectionHeaderView_;
	int headerType_;
	int _mode;
}
@property(readonly, assign, nonatomic) int mode;
@property(assign, nonatomic) int headerType;
@property(assign, nonatomic) BOOL isCollapsed;
@property(retain, nonatomic) SocialGraphFilterData* filterData;
@property(retain, nonatomic) LineTableViewSectionHeader* filteredTableSectionHeaderView;
@property(retain, nonatomic) LineTableViewSectionHeader* tableSectionHeaderView;
@property(assign, nonatomic) id<NSFetchedResultsControllerDelegate> fetchedResultControllerDelegate;
@property(assign, nonatomic) UITableView* searchTableView;
@property(assign, nonatomic) UITableView* tableView;
@property(assign, nonatomic) unsigned sectionIndex;
@property(retain, nonatomic) NSFetchedResultsController* filteredFetchedResultController;
@property(retain, nonatomic) NSFetchedResultsController* fetchedResultController;
-(void).cxx_destruct;
-(void)requestedToLayoutSubviews:(id)layoutSubviews;
-(void)sectionHeaderTapped:(id)tapped;
-(BOOL)isContactMoreWithIndexPath:(id)indexPath;
-(void)actionForWillDisplayCellEventAtIndexPath:(id)actionFor;
-(void)setCollapsedState:(BOOL)state;
-(void)removeFilteredSectionHeaderViewForSection;
-(void)updateFilteredSectionHeaderTitle;
-(id)filteredTableSectionHeaderViewForSection;
-(void)removeSectionHeaderViewForSection;
-(void)updateSectionHeaderTitle;
-(id)tableSectionHeaderViewForSection;
-(float)heightForHeaderWithTableView:(id)tableView;
-(id)viewForHeaderInSectionWithTableView:(id)tableView;
-(unsigned)filteredFetchedCountsOfSection;
-(unsigned)fetchedCountsOfSection;
-(int)numberOfRowsInSectionWithTableView:(id)tableView;
-(id)objectForIndexPath:(id)indexPath withTableView:(id)tableView;
-(BOOL)isFilteredFetchedResultController:(id)controller;
-(BOOL)isMySection:(int)section;
-(BOOL)hasFilteredObjectInSectionNow;
-(BOOL)hasFilteredObjects;
-(BOOL)hasObjectInSectionNow;
-(BOOL)hasObjects;
-(id)filteredFetchedObjects;
-(id)fetchedObjects;
-(void)reloadFilteredResultController;
-(void)reloadFetchedResultController;
-(void)resetFilteredFetchedResultController;
-(void)resetFectchedResultController;
-(BOOL)canBeShownInSearchResult;
-(BOOL)needsShownInSearchResult;
-(id)titleForFilteredSection;
-(id)titleForSection;
-(void)onSectionHeaderViewProperties;
-(id)filteredManagedObjectContext;
-(id)managedObjectContext;
-(id)filteredFetchRequest;
-(id)fetchRequest;
-(id)fetchedResultControllerWithTableView:(id)tableView;
-(BOOL)isSerchingModeWithTableView:(id)tableView;
-(id)fetchObjects:(id)objects;
-(void)uninitialize;
-(void)initialize;
-(void)dealloc;
-(id)initWithSectionIndex:(unsigned)sectionIndex tableView:(id)view fetchedResultControllerDelegate:(id)delegate mode:(int)mode;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphMyProfileSection : SocialGraphSection {
}
-(id)titleForSection;
-(unsigned)filteredFetchedCountsOfSection;
-(unsigned)fetchedCountsOfSection;
-(BOOL)hasObjectInSectionNow;
-(BOOL)hasObjects;
-(id)objectForIndexPath:(id)indexPath withTableView:(id)tableView;
-(int)numberOfRowsInSectionWithTableView:(id)tableView;
-(id)filteredFetchedResultController;
-(id)fetchedResultController;
-(id)filteredFetchRequest;
-(id)fetchRequest;
@end

__attribute__((visibility("hidden")))
@interface MBNotReadyMessageView : MBMessageView {
}
+(id)notReadyMessageView;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphNewFriendsSection : SocialGraphSection {
}
-(id)titleForSection;
-(id)filteredFetchRequest;
-(id)fetchRequest;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageServiceHelper : NSObject {
}
+(BOOL)isValidTrust:(SecTrust*)trust;
+(BOOL)evaluateServerTrust:(SecTrust*)trust forDomain:(id)domain;
+(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
+(id)URLWithHostAddress:(id)hostAddress supportSSL:(BOOL)ssl;
+(id)sendSynchronousRequest:(id)request returningResponse:(id*)response error:(id*)error;
+(void)scheduledOperationForWarmup;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphFavoritesSection : SocialGraphSection {
}
-(id)titleForSection;
-(void)onSectionHeaderViewProperties;
-(id)filteredFetchRequest;
-(id)fetchRequest;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphFriendsSection : SocialGraphSection {
}
-(BOOL)canBeShownInSearchResult;
-(BOOL)needsShownInSearchResult;
-(id)titleForFilteredSection;
-(id)titleForSection;
-(id)objectForIndexPath:(id)indexPath withTableView:(id)tableView;
-(unsigned)fetchedCountsOfSection;
-(int)numberOfRowsInSectionWithTableView:(id)tableView;
-(BOOL)isCountableMode;
-(BOOL)hasObjectInSectionNow;
-(BOOL)hasObjects;
-(id)filteredFetchRequest;
-(id)fetchRequest;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphGroupsSection : SocialGraphSection {
}
-(BOOL)canBeShownInSearchResult;
-(BOOL)needsShownInSearchResult;
-(id)titleForFilteredSection;
-(id)titleForSection;
-(id)filteredFetchRequest;
-(id)fetchRequest;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineEndCell : MBTableViewActionCell {
	MBActivityCellContainer* mActivityCellContainer;
	MBActivityContentViewMap* mActivityContentViewMap;
	UIView* mLineView;
}
+(id)timelineEndHeightForTableView:(id)tableView data:(id)data mergeEndType:(int)type;
+(id)timelineEndCellForTableView:(id)tableView data:(id)data mergeEndType:(int)type;
-(void).cxx_destruct;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(float)height;
-(void)reLayout:(id)layout reload:(BOOL)reload;
-(void)resetLayout;
-(void)redraw;
-(void)layoutCellContainer;
-(void)setData:(id)data;
-(id)initWithActivity:(id)activity reuseIdentifier:(id)identifier mergeEndType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumDisk : NSObject {
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedDisk;
-(BOOL)setTimestamp:(id)timestamp forKey:(id)key;
-(id)timestampForKey:(id)key;
-(void)removePhotoObjectAlbumID:(id)anId groupID:(id)anId2;
-(BOOL)setCachePhotoObject:(id)object albumID:(id)anId groupID:(id)anId3;
-(BOOL)setCacheAlbumObject:(id)object groupID:(id)anId;
-(id)cachePhotoObjectAlbumID:(id)anId groupID:(id)anId2;
-(id)cacheAlbumObjectForGroupID:(id)groupID;
-(void)flushAlbumEndForAlbumID:(id)albumID groupID:(id)anId;
-(void)flushAlbumListForKey:(id)key;
-(void)removeItemAtPath:(id)path;
-(id)albumListFilePathGroupID:(id)anId;
-(id)photoListFilePathAlbumID:(id)anId groupID:(id)anId2;
-(id)timestampFilePathWithGroupID:(id)groupID;
-(void)checkFilePath:(id)path;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphSectionManager : NSObject {
	NSMutableDictionary* sectionMapping_;
	int mode_;
	UITableView* tableView_;
	id<NSFetchedResultsControllerDelegate> frcDelegate_;
	SocialGraphFilterData* filterData_;
}
@property(retain, nonatomic) SocialGraphFilterData* filterData;
+(void)hideUsers:(id)users withCompleteBlock:(id)completeBlock;
+(void)blockUsers:(id)users withCompleteBlock:(id)completeBlock;
+(void)makeResultWithUsers:(id)users result:(BOOL)result error:(id)error atIndex:(unsigned)index toResultArray:(id)resultArray;
-(void).cxx_destruct;
-(void)destructObjectByHidingAtIndexPath:(id)indexPath inTableView:(id)tableView withCompleteBlock:(id)completeBlock;
-(void)destructObjectAtIndexPath:(id)indexPath inTableView:(id)tableView withCompleteBlock:(id)completeBlock;
-(void)endSearch;
-(void)startSearchWithFilterString:(id)filterString;
-(void)updateHeaderTitleRelatedContacts;
-(void)updateHeaderTitleRelatedGroups;
-(void)updateHeaderTitleRelatedUsers;
-(void)moveFavoritesFromIndex:(id)index toIndex:(id)index2;
-(BOOL)isContactMoreWithIndexPath:(id)indexPath;
-(void)setCurrentSearchTableView:(id)view;
-(BOOL)isEmptySocialGraph;
-(id)objectForIndexPath:(id)indexPath withTableView:(id)tableView;
-(void)routeWillDisplayCellForRowAtIndexPath:(id)route;
-(int)sectionForFetchedResultController:(id)fetchedResultController;
-(id)forIndex:(unsigned)index;
-(unsigned)numberOfSections;
-(void)onAppWillResignActive:(id)onApp;
-(void)onAppWillTerminate:(id)onApp;
-(void)onAppDidEnterBackground:(id)onApp;
-(void)initialzeMapping;
-(void)endMapping;
-(void)addMappingClass:(Class)aClass forSection:(unsigned)section;
-(void)beginMapping;
-(void)saveCurrentCollapsedState;
-(id)loadCollapsedState;
-(void)removeObservingEvents;
-(void)addObservingEvents;
-(void)dealloc;
-(id)initWithTableView:(id)tableView mode:(int)mode fetchedResultControllerDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface HiddenFriendsViewController : NLViewController <UITableViewDelegate, UITableViewDataSource, NSFetchedResultsControllerDelegate, UIActionSheetDelegate> {
	UITableView* tableView_;
	NSFetchedResultsController* fetchedResultsController_;
	UIView* loadingView_;
	UILabel* messageLabel_;
}
@property(retain, nonatomic) UILabel* messageLabel;
@property(readonly, assign, nonatomic) NSFetchedResultsController* fetchedResultsController;
@property(readonly, assign, nonatomic) unsigned hiddenUsersCount;
-(void).cxx_destruct;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)onEditHiddenUser:(id)user;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(id)createInfoHeaderView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)fetchedObjects;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)reloadView;
-(void)reloadEmptyNotice;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MBStickerProfileView : MBBaseChildCellView {
	MBProfileImageView* mProfileImageView;
	UIImageView* mStickerImageView;
	MBLike* mLike;
}
+(id)stickerProfileView;
-(void).cxx_destruct;
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(BOOL)isSetCellDataRecursive;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LGViewUtil : NSObject {
}
+(id)currentTopWindow;
+(id)alertWithMessage:(id)message delegate:(id)delegate cancelButtonTitle:(id)title otherButtonTitles:(id)titles;
+(int)navigatinoBarLabelFontSizeForOrientation;
+(int)navigatinoBarButtonHeightForOrientation;
+(int)navigatinoBarHeightForOrientation;
+(id)sortOptionButton:(id)button backgroundRetinaImageName:(id)name contentEdgeInsets:(UIEdgeInsets)insets bundleName:(id)name4;
+(void)resizeButton:(id)button imageLeftMargin:(int)margin titleRightMargin:(int)margin3 marginBetweenImageAndTitle:(int)title;
@end

__attribute__((visibility("hidden")))
@interface NLViewController : UIViewController <UIGestureRecognizerDelegate> {
}
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)childViewControllerForStatusBarStyle;
-(int)preferredStatusBarStyle;
-(void)setTitle:(id)title;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface NLChangeDisplayNameViewController : ProfileTextEditViewController {
	TalkUserObject* user_;
	BOOL alreadyConfirmed_;
}
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)dismissWhenUnregisteredUserChangeDisplayName;
-(BOOL)isUnregisteredUser;
-(void)buttonTapped;
-(void)setActionUIEnabled:(BOOL)enabled;
-(void)dismiss;
-(void)inputTextChanged;
-(unsigned)maxLength;
-(unsigned)minLength;
-(id)inputName;
-(BOOL)shouldDismissViewController;
-(void)viewDidLoad;
-(id)initWithUser:(id)user;
@end

__attribute__((visibility("hidden")))
@interface LAObjectStorageHelper : NSObject {
}
+(void)findMediaInfo:(id)info albumID:(id)anId groupID:(id)anId3 block:(id)block;
+(id)findExifInfo:(id)info withSize:(CGSize)size oid:(id)oid;
+(id)generateUUID;
+(void)setOBSDownloadHeader:(id)header albumId:(id)anId groupID:(id)anId3;
+(id)generateObjectId;
+(id)dateTimeStringForOBS;
@end

__attribute__((visibility("hidden")))
@interface LGBaseViewController : UIViewController <UIAlertViewDelegate> {
	BOOL _isDirty;
	BOOL _galleryPrefersStatusBarHidden;
	LGSelectedSectionDataSource* _selectedSectionDataSource;
	UIActivityIndicatorView* _loadingIndicator;
	int _galleryPreferredStatusBarUpdateAnimation;
	LGConfig* _pickerConfig;
}
@property(retain, nonatomic) LGConfig* pickerConfig;
@property(assign, nonatomic) int galleryPreferredStatusBarUpdateAnimation;
@property(assign, nonatomic) BOOL galleryPrefersStatusBarHidden;
@property(retain, nonatomic) UIActivityIndicatorView* loadingIndicator;
@property(assign, nonatomic) BOOL isDirty;
@property(retain, nonatomic) LGSelectedSectionDataSource* selectedSectionDataSource;
-(void).cxx_destruct;
-(void)stopAnimatedLoadingIndicator;
-(void)startAnimatedLoadingIndicator:(BOOL)indicator activityIndicatorStyle:(int)style;
-(void)startAnimatedLoadingIndicator:(BOOL)indicator;
-(void)setStatusBarHidden:(BOOL)hidden withAnimation:(int)animation;
-(void)setStatusBarHidden:(BOOL)hidden;
-(id)childViewControllerForStatusBarStyle;
-(BOOL)prefersStatusBarHidden;
-(int)preferredStatusBarUpdateAnimation;
-(int)preferredStatusBarStyle;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)canSelectAssetForRatio:(id)ratio;
-(void)updateForCurrentLanuage;
-(void)loadCameraRollLastAssetsAndCallback;
-(void)didChangePageDisappearValue;
-(void)reloadGalleryData;
-(void)reloadDataDidPageAppearOnMainMethod:(id)reloadData;
-(void)reloadDataDidPageAppear:(id)reloadData;
-(void)setupLeftBarButtonItemAsBack:(id)back;
-(void)setupRightBarButtonItemAsCancel;
-(void)setupNavigationBar;
-(void)setTitle:(id)title;
-(void)setupNavigationBarWithInterfaceOrientation:(int)interfaceOrientation;
-(void)back:(id)back;
-(void)cancel:(id)cancel;
-(id)nClickAreaId;
-(id)pluralsStringForKey:(id)key number:(int)number;
-(id)localizedStringForKey:(id)key;
-(id)imageWithRetinaNamed:(id)retinaNamed;
-(id)bundleName;
-(id)assetsLibrarySafeExecutor;
-(id)assetsLibrary;
-(void)didClickWithAreaId:(id)areaId action:(id)action;
-(BOOL)isImageSelection;
-(BOOL)isMultipleSelection;
-(id)imagePickerController;
-(id)showPhotoViewControllerUsingSelectedAssets:(int)assets selectedSectionDataSource:(id)source;
-(void)makeSelectedSectionDataSource:(id)source;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallManager : NSObject <NDeviceSessionDelegate, NDeviceErrorDelegate, NCallViewControllerDelegate, NCallCustomAlertViewDelegate, UIActionSheetDelegate> {
	BOOL mCalling;
	BOOL _isAuthenticationPhoneNumber;
	BOOL _engineIntialized;
	BOOL _firstFrameReceived;
	BOOL _remotePaused;
	BOOL _isLineCall;
	NLCallWindow* _callWindow;
	NLCallBaseViewController* _callViewController;
	NLCallDeviceManager* _deviceManager;
	NSString* _customServerIP;
	NLCallParameters* _localCallParameters;
	id<NLCallLineInfoDelegate> _commonCallInfoDelegate;
	UINavigationController* _currentLineCallViewController;
	UINavigationController* _currentSettingViewController;
	UINavigationController* _currentAgreementViewController;
	int _requestedDirectViewMenuType;
	id _requestedDirectViewMenuParam;
	NSTimer* _callTimeUpdateTimer;
	NSTimer* _packetLossTimer;
	NSString* _defaultMid;
	NLCallUserInfo* _callTargetUserInfo;
}
@property(retain, nonatomic) NLCallUserInfo* callTargetUserInfo;
@property(assign, nonatomic) BOOL isLineCall;
@property(assign, nonatomic) BOOL remotePaused;
@property(retain, nonatomic) NSString* defaultMid;
@property(assign, nonatomic) BOOL firstFrameReceived;
@property(retain, nonatomic) NSTimer* packetLossTimer;
@property(retain, nonatomic) NSTimer* callTimeUpdateTimer;
@property(assign, nonatomic) BOOL engineIntialized;
@property(assign, nonatomic) BOOL isAuthenticationPhoneNumber;
@property(retain, nonatomic) id requestedDirectViewMenuParam;
@property(assign, nonatomic) int requestedDirectViewMenuType;
@property(retain, nonatomic) UINavigationController* currentAgreementViewController;
@property(retain, nonatomic) UINavigationController* currentSettingViewController;
@property(retain, nonatomic) UINavigationController* currentLineCallViewController;
@property(assign, nonatomic) id<NLCallLineInfoDelegate> commonCallInfoDelegate;
@property(retain, nonatomic) NLCallParameters* localCallParameters;
@property(retain, nonatomic) NSString* customServerIP;
@property(retain, nonatomic) NLCallDeviceManager* deviceManager;
@property(retain, nonatomic) NLCallBaseViewController* callViewController;
@property(retain, nonatomic) NLCallWindow* callWindow;
+(void)openCLIAuthentification;
+(BOOL)isCellularCallConnected;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)callerIdAuthFail:(id)fail;
-(void)callerIdAuthSuccess:(id)success;
-(BOOL)availableCLIAuthentification;
-(void)updateCLILineIDStatus:(int)status;
-(void)updateCLIAuthStatus:(unsigned)status;
-(void)showAcquirePaidCallRouteErrorMessage:(int)message;
-(void)acquireCallerIDStatus:(id)status cancelCallBlock:(id)block;
-(void)callAlertView:(id)view clickedButtonAtIndex:(int)index;
-(void)updateCallLocallHistory:(int)history;
-(void)AMPReportEventTypeRegistrarChanged:(id)changed;
-(void)AMPReportEventTypeServerConnectionUnstable:(id)unstable;
-(void)AMPReportEventTypeVideoFrameFirst:(id)first;
-(void)AMPReportEventTypeVideoInterruptStatus:(id)status;
-(void)AMPReportEventTypeVideoPauseStatus:(id)status;
-(void)AMPReportEventTypeVideoErrorState:(id)state;
-(void)AMPReportEventTypeMedTPInfo:(id)info;
-(void)AMPReportEventTypeAudioRoutingChanged:(id)changed;
-(void)AMPReportEventTypeNetwork:(id)network;
-(void)AMPCallEventTypeVideoResourceReleased:(id)released;
-(void)AMPCallEventTypeVideoDisconnected:(id)disconnected;
-(void)AMPCallEventTypeVideoConnected:(id)connected;
-(void)AMPCallEventTypeVideoReady:(id)ready;
-(void)AMPCallEventTypeResourceReleased:(id)released;
-(void)AMPCallEventTypeDisconnected:(id)disconnected;
-(void)AMPCallEventTypeServiceAvailable:(id)available;
-(void)AMPCallEventTypeConnected:(id)connected;
-(void)AMPCallEventTypeOfferNewCall:(id)call;
-(void)AMPCallEventTypeWaitAccept:(id)accept;
-(void)updateCallViewErrorVideoPeerNotSupportedWithUserMid:(id)userMid isCloseView:(BOOL)view;
-(void)updateCallViewErrorNotVideoCameraWithUserMid:(id)userMid;
-(void)updateCallViewErrorNotSupportedWithUserMid:(id)userMid;
-(void)processErrorNoResponseFinalizing:(id)finalizing;
-(void)noResponseRecieve:(id)recieve;
-(id)lineCallNumberWithMID:(id)mid;
-(BOOL)isSessionNil;
-(BOOL)isWindowPresenting;
-(void)selectorName:(id)name didReceiveCallEvent:(id)event;
-(void)updateVoipMode;
-(void)callViewControllerSendDTMF:(id)dtmf;
-(void)callViewController:(id)controller didChangeCameraPauseState:(id)state;
-(void)callViewControllerChangeCameraSide:(id)side;
-(void)callViewControllerMaximizeView:(id)view;
-(void)callViewControllerMinimizeView:(id)view;
-(void)callViewControllerRejectCall:(id)call;
-(void)callViewControllerAcceptVoiceOnly:(id)only;
-(void)callViewControllerAcceptCall:(id)call;
-(void)callViewControllerEndCall:(id)call;
-(void)callViewController:(id)controller didChangeVideoCallState:(id)state;
-(void)callViewController:(id)controller didChangeSpeakerState:(id)state;
-(void)callViewController:(id)controller didChangeMuteState:(id)state;
-(void)didReceiveApplicationWillEnterForegroundNotification:(id)didReceiveApplication;
-(void)didReceiveApplicationDidEnterBackgroundNotification:(id)didReceiveApplication;
-(float)screenScale;
-(id)currentViewControllerImage;
-(void)__dettached__accept_really_voice;
-(void)__dettached__accept_only_voice;
-(void)__dettached__accept;
-(void)__delayed__close;
-(void)clearTimers;
-(void)__timer__updateCallTime;
-(void)__timer__checkPacketLoss;
-(void)updatedCurrencyInfos:(id)infos;
-(void)addLineCallNotifications;
-(void)initCallManager:(id)manager withApplicationInfo:(id)applicationInfo withUUID:(id)uuid withDefaultMid:(id)defaultMid;
-(void)showRemoteCameraOnOffMessage:(id)message;
-(void)showUserGuideWhenFirstTime;
-(void)showRemoteCameraPausedMessage:(id)message;
-(void)updateVideoLayoutWhenRemoteOnAndLocalOn;
-(void)updateVideoLayoutWhenRemoteOffAndLocalOff;
-(void)updateVideoLayoutWhenRemoteOffAndLocalOn;
-(void)updateVideoLayoutWhenRemoteOnAndLocalOff;
-(void)updateVideoLayoutWhenLocalPaused:(BOOL)paused remotePaused:(BOOL)paused2;
-(void)layoutVideoViewsWhenRemoteCameraOnOff:(id)off;
-(void)setupVideoCall;
-(void)setupVoiceCall:(BOOL)call;
-(void)showViewControllerAnimated:(BOOL)animated;
-(void)forceResetAlertViewIfExists;
-(void)changeCallViewToMode:(unsigned)mode;
-(void)hideMessagePopupAfterDelay;
-(void)hideViewControllerAnimated:(BOOL)animated;
-(void)hideStatusBarAfterDelay;
-(void)setStatusBarHidden:(id)hidden;
-(void)setStatusBarHidden:(BOOL)hidden afterDelay:(float)delay;
-(void)closeView;
-(BOOL)availableVideoCall;
-(BOOL)isInCall;
-(void)endVideoCallByBothSideCameraOff;
-(void)endInterruption;
-(void)beginInterruption;
-(BOOL)isRegisteredUser:(id)user;
-(void)requestCallTokenWithParameters:(id)parameters;
-(void)setParamInfo:(id)info withFriendId:(id)friendId;
-(void)registerUserForCall:(id)call;
-(void)resetViews;
-(void)endVideoCall;
-(void)startVideoCall;
-(void)finishCall;
-(void)acceptCall;
-(void)acceptVoiceOnlyCall;
-(void)startCallWithParameters:(id)parameters;
-(void)ensureModuleInitialized;
-(void)readyAndGoWithParameters:(id)parameters;
-(BOOL)isProcessedCallParameter:(id)parameter;
-(void)cancelCallWithOperation:(id)operation;
-(void)cancelCallWithCallKey:(id)callKey deviceKey:(id)key reason:(id)reason;
-(void)receiveCallWithOperation:(id)operation;
-(void)startCallWithOperation:(id)operation callOrientation:(unsigned)orientation;
-(void)startCallWithPushNotification:(id)pushNotification callOrientation:(unsigned)orientation;
-(void)startCallWithUserInfo:(id)userInfo;
-(void)startCallWithMID:(id)mid videoOn:(BOOL)on;
-(BOOL)canGoAheadInCall;
-(void)didCloseLineCall;
-(void)prepare;
-(void)endCalling;
-(int)beginCalling;
-(BOOL)isCallingWithSeq:(int)seq;
-(BOOL)isCalling;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface FriendsBulkEditViewController : NLViewController <UITableViewDelegate, UITableViewDataSource, NSFetchedResultsControllerDelegate, UISearchBarDelegate, UISearchDisplayDelegate, UIScrollViewDelegate> {
	UITableView* tableView_;
	SocialGraphSectionManager* sectionsMgr_;
	BOOL userDrivenDataModelChange_;
	BOOL shouldReloadDataAfterEditing_;
	NSMutableSet* checkedFriends_;
	UIButton* blockUsersButton_;
	UIButton* hideUsersButton_;
	NLStyledTextView* blockUsersButtonTextView_;
	NLStyledTextView* hideUsersButtonTextView_;
	UIView* bottomView;
}
@property(assign, nonatomic) UIView* bottomView;
-(void).cxx_destruct;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controllerWillChangeContent:(id)controller;
-(void)actionHideUsers:(id)users;
-(void)actionBlockUsers:(id)users;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)configureCell:(id)cell withManagedObject:(id)managedObject;
-(void)actionSelectedCellWithTableView:(id)tableView atIndexPath:(id)indexPath;
-(void)onClosePressed:(id)pressed;
-(void)onSelectAllItemsPressed:(id)pressed;
-(void)hideUsersWithCurrentSelectedUsers;
-(void)blockUsersWithCurrentSelectedUsers;
-(int)preferredStatusBarStyle;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)updateNoFriendsMessageIfNeededWithAnimated:(BOOL)animated;
-(void)updateBottomView;
-(void)updateBottomButtonWithButton:(id)button usingPrefixString:(id)string withNumberColorString:(id)numberColorString;
-(void)hideNoFriendsMessageWithAnimated:(BOOL)animated;
-(void)showNoResultViewWithAnimated:(BOOL)animated;
-(void)configureBottomView;
-(void)configureTableView;
-(void)initializeSections;
-(void)uninitialize;
-(void)commonInitialize;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineRecoveryService : NSObject {
	dispatch_queue_s* _concurrentQueue;
	NSMutableDictionary* _unsyncList;
	NSMutableArray* _userMIDs;
	NSMutableArray* _groupMIDs;
	NSMutableArray* _roomMIDs;
	NSMutableArray* _productIDs;
	NSMutableSet* _userMIDsSyncing;
	NSMutableSet* _groupMIDsSyncing;
	NSMutableSet* _roomMIDsSyncing;
	NSMutableSet* _productIDsSyncing;
}
+(id)managerFileURL;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)saveToFile;
-(void)_finishRecoveryWithDataArray:(id)dataArray syncingSet:(id)set ID:(id)anId;
-(void)_recoverProductIDs:(id)ids;
-(void)_recoverGroupsWithMIDs:(id)mids;
-(void)_recoverRoomsWithMIDs:(id)mids;
-(void)_recoverUsersWithMIDs:(id)mids;
-(void)recover;
-(void)addProductIDs:(id)ids;
-(void)addChatMids:(id)mids;
-(void)addGroupMids:(id)mids;
-(void)addUserMids:(id)mids;
-(BOOL)isRecoveringProductID:(id)anId;
-(BOOL)isRecoveringMid:(id)mid;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBTableView : UITableView {
	UIView* mHeaderView;
	UIView* mFooterView;
	BOOL mIsUsePullTable;
	id<MBTableViewPullDelegate> mPullDelegate;
	NSMutableDictionary* mIncludedTableCells;
	CGSize mPreContentSize;
	double mLastOffsetCapture;
	CGPoint mLastOffset;
	BOOL mFastDrawUse;
	SEL mFastDrawSelector;
	float mScrollSpeedMax;
	Class mFastCellClass;
	BOOL mIsScrollingFast;
	BOOL mIsStartDecelarate;
	BOOL mIsFastMode;
	float mFastScrollSpeedMin;
	float mBaseYPosition;
}
@property(readonly, assign, nonatomic) BOOL isScrollingFast;
@property(assign, nonatomic) Class fastCellClass;
@property(assign, nonatomic) BOOL fastDrawUse;
@property(assign, nonatomic) id<MBTableViewPullDelegate> pullDelegate;
+(id)timelineTableViewWithFrame:(CGRect)frame style:(int)style delegate:(id)delegate;
+(id)tableViewWithFrame:(CGRect)frame style:(int)style delegate:(id)delegate;
-(void).cxx_destruct;
-(BOOL)getFastDrawUse;
-(void)reloadData;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)checkScrollSpeed:(id)speed;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)updateFooterView:(id)view offset:(float)offset;
-(void)updateHeaderView:(id)view offset:(float)offset;
-(void)fetchMoreWillBeginWithFetchCount:(int)fetchMore;
-(void)updateMoreWillBegin;
-(void)resetFooterView;
-(void)resetHeaderView;
-(void)startFetchingWithFetchCount:(int)fetchCount;
-(BOOL)isFetching;
-(BOOL)isUpdating;
-(id)footerView;
-(id)headerView;
-(void)doneFooterFetch;
-(void)doneHeaderUpdate;
-(void)showFooterView;
-(void)hideFooterView;
-(void)showHeaderView;
-(void)hideHeaderView;
-(void)setBaseYPosition:(float)position;
-(void)setFooterView:(id)view;
-(void)setHeaderView:(id)view;
-(id)dequeueIncludedCellWithIdentifier:(id)identifier;
-(void)enqueueIncludedCell:(id)cell identifier:(id)identifier;
-(BOOL)touchesShouldCancelInContentView:(id)touches;
-(id)initWithFrame:(CGRect)frame style:(int)style;
@end

__attribute__((visibility("hidden")))
@interface LineTitleBarCommand : CDVPlugin {
	NSString* updateCallbackId_;
	NSString* appEnvCallbackId_;
}
@property(retain, nonatomic) NSString* appEnvCallbackId;
@property(retain, nonatomic) NSString* updateCallbackId;
-(void).cxx_destruct;
-(id)browser;
-(void)callbackTitleBarEvent:(id)event;
-(void)controlTitleBarStack:(id)stack withDict:(id)dict;
-(void)displayTitleBar:(id)bar withDict:(id)dict;
-(void)checkAppEnv:(id)env withDict:(id)dict;
-(void)updateTitleBar:(id)bar withDict:(id)dict;
-(void)changeTitleBar:(id)bar withDict:(id)dict;
-(void)registerTitleBarCallback:(id)callback withDict:(id)dict;
@end

__attribute__((visibility("hidden")))
@interface LGThumbnailsViewController : LGBaseViewController <UITableViewDataSource, UITableViewDelegate> {
	int _toInterfaceOrientation;
	int _lastOrientation;
	float _lastScrollPosition;
	BOOL _shouldScrollToBottom;
	UITableView* tableView;
	NSIndexPath* indexPathToScroll;
}
@property(retain, nonatomic) NSIndexPath* indexPathToScroll;
@property(retain, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(unsigned)numberOfThumbnailsInSection:(unsigned)section;
-(void)updateTableFooterViewFrame;
-(void)setupTableFooterView;
-(void)updateBarButtonItem;
-(float)tableContentOffsetAfterRotation;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(int)tableViewOrientation;
-(int)currentInterfaceOrientation;
-(CGRect)currentBounds;
-(void)scrollToLastOffset;
-(void)scrollToIndexPath;
-(void)scrollToBottom;
-(void)adjustScrollIfNeeded;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface StickerViewComponent : NSObject {
}
+(id)decorateCopyRightLabel:(id)label;
+(id)decorateDescriptionLabel:(id)label;
+(id)decorateEventButton:(id)button;
+(id)decorateDescriptionLabelEvent:(id)event;
+(id)decorateMyCoinAmountLabel:(id)label;
+(id)decorateMyCoinLabel:(id)label;
+(id)decoratePriceLabel:(id)label;
+(id)decoratePriceLabelEvent:(id)event;
+(id)decoratePresentLabel:(id)label;
+(id)decorateExpiredDateLabel:(id)label;
+(id)decoratePackageNameLabel:(id)label;
+(id)decorateAuthLabel:(id)label;
@end

__attribute__((visibility("hidden")))
@interface NLMessageCouponView : NLMessageBubbleView {
	NLStyledTextView* descriptionLabel_;
	NLStyledTextView* durationLabel_;
	LineFileDownload* currentDownload_;
	UIView* divideLineView_;
	UIImageView* thumbImageView_;
	UIImageView* thumbImageBorder_;
	UIButton* openButton_;
	UIImageView* arrowIconView_;
	CouponModel* couponPostObject_;
	CGRect textBounds_;
}
@property(assign, nonatomic) CGRect textBounds;
@property(retain, nonatomic) CouponModel* couponPostObject;
@property(readonly, assign, nonatomic) UIImageView* arrowIconView;
@property(readonly, assign, nonatomic) UIButton* openButton;
@property(readonly, assign, nonatomic) UIImageView* thumbImageBorder;
@property(readonly, assign, nonatomic) UIImageView* thumbImageView;
-(void).cxx_destruct;
-(BOOL)render;
-(void)applyRulesetStyle;
-(void)applyRulesetStyleToControls;
-(void)setInitialControlProperties;
-(CGSize)contentSize;
-(float)leftMargin;
-(void)loadPreviewIconImageFromRemote;
-(void)setDefaultImage;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)setRulesetStyleNameForDirection:(unsigned)direction;
-(void)prepareSubviewsForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
@end

__attribute__((visibility("hidden")))
@interface CouponModel : NSObject {
	BOOL sent;
	NSString* previewUrl;
	NSString* linkUri;
	NSString* installUri;
	NSString* chatID;
	NSAttributedString* styledText;
	float contentMinimumWidth;
	float contentMinimumHeight;
	NSString* title;
	NSString* durationText;
	NSAttributedString* styledDurationText;
	NSString* iLinkUri;
	NSString* iInstallUri;
	NSString* linkText;
	NSString* channelId;
	UIColor* defaultSentTextColor;
	UIColor* defaultRecvTextColor;
	UIColor* defaultSentDurationTextColor;
	UIColor* defaultRecvDurationTextColor;
	CGSize thumbSize;
	CGSize titleSize;
	CGSize durationTextSize;
}
@property(retain, nonatomic) UIColor* defaultRecvDurationTextColor;
@property(retain, nonatomic) UIColor* defaultSentDurationTextColor;
@property(retain, nonatomic) UIColor* defaultRecvTextColor;
@property(retain, nonatomic) UIColor* defaultSentTextColor;
@property(retain, nonatomic) NSString* channelId;
@property(retain, nonatomic) NSString* linkText;
@property(retain, nonatomic) NSString* iInstallUri;
@property(retain, nonatomic) NSString* iLinkUri;
@property(assign, nonatomic) float contentMinimumHeight;
@property(assign, nonatomic) float contentMinimumWidth;
@property(assign, nonatomic) CGSize thumbSize;
@property(assign, nonatomic) CGSize durationTextSize;
@property(assign, nonatomic) CGSize titleSize;
@property(assign, nonatomic, getter=isSent) BOOL sent;
@property(retain, nonatomic) NSString* durationText;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSAttributedString* styledDurationText;
@property(retain, nonatomic) NSAttributedString* styledText;
@property(retain, nonatomic) NSString* chatID;
@property(retain, nonatomic) NSString* installUri;
@property(retain, nonatomic) NSString* linkUri;
@property(retain, nonatomic) NSString* previewUrl;
-(void).cxx_destruct;
-(id)appName;
-(CGSize)totalContentSize;
-(int)maximumNumberOfLinesOfTitle;
-(id)styledRawTitle;
-(id)previewText;
-(void)resetText;
-(void)adjustThumbnailSize:(CGSize)size;
-(void)initializeDefaultColors;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLMessageContactView : NLMessageBubbleView {
	ProfileImageView* profileView;
	UIImageView* shadowView;
	UILabel* nameLabel;
	UIImageView* arrowIcon;
	ContactModel* contactModel;
}
@property(retain, nonatomic) ContactModel* contactModel;
+(void)setStyleWithDirection:(unsigned)direction label:(id)label;
-(void).cxx_destruct;
-(CGSize)contentSize;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)prepareSubviewsForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
@end

__attribute__((visibility("hidden")))
@interface ContactModel : NSObject {
	NSString* mid;
	NSString* displayName;
}
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* mid;
+(float)height;
-(void).cxx_destruct;
-(id)userObjectWithMid:(id)mid;
-(CGSize)contentSize;
@end

__attribute__((visibility("hidden")))
@interface NLOrientationSetting : NSObject {
	unsigned _orientationType;
}
@property(assign, nonatomic) unsigned orientationType;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedOrientationSetting;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface ChatOrientationSelectionViewController : NLTableViewController {
	int selectedIndex;
}
@property(assign, nonatomic) int selectedIndex;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)titleForRowAtIndexPath:(id)indexPath;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface NLTextCommandHandler : NSObject {
}
+(void)excuteRemoveSnsTokens:(id)tokens;
+(void)excuteReset:(id)reset;
+(void)excutePhotoSize:(id)size;
+(void)excuteMoreTab:(id)tab;
+(void)excuteInAppAlert:(id)appAlert;
+(void)excuteChatGameOnOff:(id)off;
+(void)excuteGroupBoardTooltipReset:(id)reset;
+(void)excuteVoIPServerCommand:(id)command;
+(void)excuteMIDCommand:(id)command;
+(void)excuteCommand:(id)command;
@end

__attribute__((visibility("hidden")))
@interface NLCallVoIPService : NSObject <NLCallLineInfoDelegate> {
}
+(id)searchRegionNumber:(id)number;
+(BOOL)hasPendingRequestForCallRoute;
+(void)cancelPendingRequestForCallRoute;
+(void)issueVoIPRouteForUser:(id)user completionBlock:(id)block errorBlock:(id)block3;
+(void)issueVoIPTicketForUser:(id)user completionBlock:(id)block errorBlock:(id)block3;
+(BOOL)isDirectCallInLineFriendsProfile;
+(void)startLineCallCreditCharge;
+(void)startLineCallAgreement:(unsigned)agreement;
+(void)startLineChatWithLUID:(id)luid;
+(void)startLineCallDirectMode:(id)mode;
+(void)startLineCallSetting;
+(void)startLineCall:(id)call withPhoneNumber:(id)phoneNumber withDirectMenuType:(int)directMenuType;
+(void)startLineCallWithLUID:(id)luid withDirectMenuType:(int)directMenuType;
+(void)startLineCallToProfileWithLUID:(id)luid;
+(void)startLineCallToAddressList;
+(void)startLineCall:(id)call withPhoneNumber:(id)phoneNumber;
+(void)startLineCallToKeyPadWithRegionNumber:(id)regionNumber withPhoneNumber:(id)phoneNumber;
+(void)startLineCall;
+(id)regionNumberWithPhoneNumber:(id)phoneNumber;
+(BOOL)isLineUserWithContactsLUID:(id)contactsLUID withPhoneNumber:(id)phoneNumber;
+(BOOL)isLineUserWithContactsLUID:(id)contactsLUID;
+(void)startCallWithUserInfo:(id)userInfo;
+(void)startCallWithMID:(id)mid videoOn:(BOOL)on;
+(void)setCustomServerIP:(id)ip;
+(id)serverIP;
+(void)cancelCallWithOperation:(id)operation;
+(void)receiveCallWithOperation:(id)operation;
+(BOOL)shouldSupportOnlyPortrait;
+(BOOL)isVoIP;
+(BOOL)availableVideoCall;
+(BOOL)isCurrentlyAgreement;
+(BOOL)isPresenting;
+(BOOL)isFullScreenCall;
+(BOOL)canGoAheadInCall;
+(BOOL)isInCall;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void)showVoiceMessageControlAfterDelay;
-(void)showTalkErrorManager;
-(BOOL)updateWarmupForVoIPForTimeCheck;
-(void)updateAttachTurboMode:(double)mode;
-(BOOL)updateWarmupForVoIP;
-(BOOL)updateCallingInfo;
-(void)profileImage:(id)image withCompletionBlock:(id)completionBlock;
-(unsigned)supportedInterfaceOrientations:(id)orientations;
-(id)myLineMid;
-(void)checkCancelPendingRequestForCallRoute;
-(void)issueVoIPRouteForUser:(id)user withCompletionBlock:(id)completionBlock;
-(void)changeProfileInfo:(id)info;
-(void)updateFriendName:(id)name withCompletionBlock:(id)completionBlock;
-(void)initVoIPService;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LGAssetsLibrary : ALAssetsLibrary {
	LGConfig* _pickerConfig;
	NSThread* _executableThread;
	NSDate* _lastRefreshedDateForGroups;
	NSDate* _lastRefreshedDateForLazyAssetGroups;
}
@property(retain, nonatomic) NSDate* lastRefreshedDateForLazyAssetGroups;
@property(retain, nonatomic) NSDate* lastRefreshedDateForGroups;
@property(assign, nonatomic) __weak NSThread* executableThread;
@property(retain, nonatomic) LGConfig* pickerConfig;
+(id)sortedAssetGroups:(id)groups;
-(void).cxx_destruct;
-(void)checkAssetsLibraryAccessableWithDictionary:(id)dictionary;
-(void)updateALAssetWithDictionary:(id)dictionary;
-(void)makeAssetSectionsWithAssets:(id)assets totalAssetsCount:(int)count andNotifyToDelegate:(id)delegate;
-(void)loadAllAssetsWithDictionary:(id)dictionary;
-(void)loadLazyAssetGroupsWhenAssetExist:(id)exist;
-(void)loadAllAssetGroups:(id)groups;
-(int)numberOfAssetsForGalleryGroup:(id)galleryGroup;
-(void)updateGalleryGroup:(id)group;
-(void)workaroundForIOS5;
-(void)dealloc;
-(id)initWithConfig:(id)config executableThread:(id)thread;
-(id)makeAssetSections:(id)sections;
-(id)makeAssetSectionsWithSortedAssets:(id)sortedAssets;
-(void)makeAssetSection:(int)section end:(int)end sortedArray:(id)array sectionArray:(id)array4;
@end

__attribute__((visibility("hidden")))
@interface LAChatPhotoViewController : LAPhotoViewController <LGLineAlbumTooltipViewDelegate> {
	BOOL _bottomMenuHidden;
	LGLineAlbumTooltipView* _tooltipView;
	LGLineAlbumTooltipView* _expiredTooltipView;
	UIActivityIndicatorView* _activityIndicator;
}
@property(assign, nonatomic) BOOL bottomMenuHidden;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) LGLineAlbumTooltipView* expiredTooltipView;
@property(retain, nonatomic) LGLineAlbumTooltipView* tooltipView;
-(void).cxx_destruct;
-(void)sendToAlbumIfExpired;
-(void)setExpiredTooltipHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)showExpiredTooltipIfNeeded;
-(BOOL)shouldShowExpiredTooltip;
-(void)setMenuHidden:(BOOL)hidden;
-(void)cleanUpTooltipView;
-(id)viewForTooltipYPosition;
-(id)viewForTooltipCenterPosition;
-(void)saveToCameraRollCompleted;
-(void)photoBottomBarView:(id)view didTapSaveInAblumButton:(id)ablumButton;
-(void)photoBottomBarView:(id)view didTapEditButton:(id)button;
-(void)photoNavigationView:(id)view didTapBackButton:(id)button;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)pagingScrollViewDidChangeIndex;
-(void)pagingScrollViewDidTilePages:(int)pagingScrollView total:(unsigned)total;
-(void)showActionSheet;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface ChannelNavigationBar : UINavigationBar {
	UIImage* bgImage_;
	ChannelNavigationBarModel* model_;
}
@property(retain, nonatomic) ChannelNavigationBarModel* model;
@property(retain, nonatomic) UIImage* bgImage;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)drawRect:(CGRect)rect;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(void)_init;
@end

__attribute__((visibility("hidden")))
@interface ChannelNavigationBarModel : NSObject {
	NSDictionary* options;
	NSString* titleBarType;
	NSString* pageKey;
	NSString* pageURL;
	NSNumber* entryPage;
	NSNumber* tempStack;
	NSNumber* preventStackPop;
	NSString* resVersion;
	ChannelNavigationBarItemModel* leftModel;
	ChannelNavigationBarItemModel* rightModel;
	ChannelNavigationBarItemModel* centerModel;
	ChannelBarTextStyleModel* titleStyleModel;
	ChannelBarTextStyleModel* buttonStyleModel;
}
@property(retain, nonatomic) ChannelBarTextStyleModel* buttonStyleModel;
@property(retain, nonatomic) ChannelBarTextStyleModel* titleStyleModel;
@property(retain, nonatomic) ChannelNavigationBarItemModel* centerModel;
@property(retain, nonatomic) ChannelNavigationBarItemModel* rightModel;
@property(retain, nonatomic) ChannelNavigationBarItemModel* leftModel;
@property(retain, nonatomic) NSString* resVersion;
@property(retain, nonatomic) NSNumber* preventStackPop;
@property(retain, nonatomic) NSNumber* tempStack;
@property(retain, nonatomic) NSNumber* entryPage;
@property(retain, nonatomic) NSString* pageURL;
@property(retain, nonatomic) NSString* pageKey;
@property(retain, nonatomic) NSString* titleBarType;
@property(copy, nonatomic) NSDictionary* options;
+(id)modelForEntryPageWithTitle:(id)title type:(id)type;
+(id)closeModel;
+(id)backModel;
-(void).cxx_destruct;
-(void)dealloc;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface ChannelNavigationBarItemModel : NSObject {
	ChannelNavigationBarModel* parentModel;
	unsigned actionType;
	int orientation;
	id target;
	SEL selector;
	NSString* text;
	NSString* imgId;
	NSString* iconId;
	NSNumber* visible;
	NSNumber* enable;
	NSNumber* clickable;
}
@property(retain, nonatomic) NSNumber* clickable;
@property(retain, nonatomic) NSNumber* enable;
@property(retain, nonatomic) NSNumber* visible;
@property(retain, nonatomic) NSString* iconId;
@property(retain, nonatomic) NSString* imgId;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) SEL selector;
@property(assign, nonatomic) id target;
@property(assign, nonatomic) int orientation;
@property(assign, nonatomic) unsigned actionType;
@property(assign, nonatomic) ChannelNavigationBarModel* parentModel;
-(void).cxx_destruct;
-(id)description;
-(id)actionString;
-(id)titleBarType;
-(BOOL)isLandscape;
-(BOOL)getClickable;
-(BOOL)getEnable;
-(BOOL)getVisible;
-(id)iconNameForState:(unsigned)state;
-(id)iconImageForState:(unsigned)state;
-(id)imageNameForState:(unsigned)state;
-(id)normalImageForState:(unsigned)state;
-(id)backImageForState:(unsigned)state;
-(id)backgroundImageForState:(unsigned)state;
@end

__attribute__((visibility("hidden")))
@interface ChannelBarTextStyleModel : NSObject {
	UIColor* _normalColor;
	UIColor* _shadowColor;
	UIColor* _selectColor;
	UIColor* _dimmedColor;
	float _fontSize;
	NSString* _boldEnable;
	UIFont* _font;
	CGSize _shadowOffset;
}
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* boldEnable;
@property(assign, nonatomic) float fontSize;
@property(assign, nonatomic) CGSize shadowOffset;
@property(retain, nonatomic) UIColor* dimmedColor;
@property(retain, nonatomic) UIColor* selectColor;
@property(retain, nonatomic) UIColor* shadowColor;
@property(retain, nonatomic) UIColor* normalColor;
+(id)textStyleModelWithDict:(id)dict;
+(id)buttonTextStyleModel:(id)model resVersion:(id)version;
+(id)titleTextStyleModel:(id)model resVersion:(id)version;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface ChannelWebAppEnvManager : NSObject {
	ChannelBrowserViewController* browser_;
}
@property(assign, nonatomic) ChannelBrowserViewController* browser;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(BOOL)rotateWithMode:(id)mode;
-(BOOL)showUpdatePopup:(id)popup;
-(void)actionShowUpdatePopup;
-(void)procWebEnvWithType:(id)type value:(id)value completionBlock:(id)block;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface CustomLCBoardViewController : LCBoardViewController {
	NSString* _titleString;
}
@property(retain, nonatomic) NSString* titleString;
-(void).cxx_destruct;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webViewDidStartLoad:(id)webView;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(int)preferredStatusBarStyle;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initNaviTypeWithCategory:(id)category;
-(id)initNaviTypeWithCategory:(id)category documentId:(id)anId;
-(id)initModalTypeWithCategory:(id)category;
-(id)initModalTypeWithCategory:(id)category documentId:(id)anId;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLContactMsgTapHandler : NSObject {
}
+(void)forceUpdateProfileNoFriend:(id)aFriend completionBlock:(id)block exceptionBlock:(id)block3;
+(void)tappedMessageForMid:(id)mid delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface AttachmentNewActionView : UIView {
	UIImageView* newIconView;
	BOOL hideEver;
	LinePageControl* pageControl;
	unsigned targetPage;
}
@property(assign, nonatomic) BOOL hideEver;
@property(assign, nonatomic) unsigned targetPage;
@property(retain, nonatomic) LinePageControl* pageControl;
-(void).cxx_destruct;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)sizeToFit;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLWindow : UIWindow {
}
@end

__attribute__((visibility("hidden")))
@interface LAPhotoViewController : LABaseViewController <UIGestureRecognizerDelegate, LAPhotoNavigationViewDelegate, LAPhotoBottomBarViewDelegate, LAPagingScrollViewDelegate, LAPhotoInfoViewDelegate, UIActionSheetDelegate> {
	LAPagingScrollView* _pagingScrollView;
	LAPhotoNavigationView* _navigationView;
	LAPhotoBottomBarView* _bottomBarView;
	unsigned _bottomBarType;
	BOOL _selectable;
	BOOL _closing;
	BOOL _canSelectLoadedImageOnly;
	BOOL _statusBarHidden;
	BOOL _menuHidden;
	id<LAPhotoViewDataSource> _dataSource;
	LAPhotoInfoView* _infoView;
	UIView* _loadingView;
	int _lastIndexBeforeDisappear;
}
@property(assign, nonatomic) int lastIndexBeforeDisappear;
@property(assign, nonatomic, getter=isClosing) BOOL closing;
@property(assign, nonatomic, getter=isMenuHidden) BOOL menuHidden;
@property(assign, nonatomic) BOOL statusBarHidden;
@property(retain, nonatomic) UIView* loadingView;
@property(retain, nonatomic) LAPhotoInfoView* infoView;
@property(retain, nonatomic) LAPhotoBottomBarView* bottomBarView;
@property(retain, nonatomic) LAPhotoNavigationView* navigationView;
@property(retain, nonatomic) LAPagingScrollView* pagingScrollView;
@property(assign, nonatomic) BOOL canSelectLoadedImageOnly;
@property(retain, nonatomic) id<LAPhotoViewDataSource> dataSource;
-(void).cxx_destruct;
-(BOOL)isEndedTranstion;
-(BOOL)isEnableVerticalSwipeTransition;
-(void)setLoadingViewHidden:(BOOL)hidden backgroundColor:(id)color;
-(void)setLoadingViewHidden:(BOOL)hidden;
-(void)showExpiredTooltipIfNeeded;
-(void)updateMenuView;
-(void)updateTitlePositionWithStatusBarHeight:(float)statusBarHeight;
-(void)onPanning:(id)panning;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)onLongPressed:(id)pressed;
-(void)onDoubleTapped:(id)tapped;
-(void)onSingleTapped:(id)tapped;
-(void)registerGestureRecognizers;
-(void)setLoadProgress:(unsigned)progress totalLength:(unsigned)length forKey:(id)key instantly:(BOOL)instantly;
-(void)setImage:(id)image error:(id)error forKey:(id)key;
-(void)hideAlbumCover;
-(void)showAlbumCover;
-(id)photoViewDataSource;
-(void)pagingScrollViewDidStartDragging;
-(void)pagingScrollViewDidChangePhotoGroup:(BOOL)pagingScrollView;
-(void)pagingScrollViewDidTilePages:(int)pagingScrollView total:(unsigned)total;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)showAlertForDelete;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)showActionSheet;
-(void)photoInfoView:(id)view didDismissWithButton:(id)button;
-(void)showInfoView;
-(void)saveToCameraRollCompleted;
-(void)selectCurrentIndexIfNeeded;
-(void)photoBottomBarView:(id)view didTapSelectButton:(id)button;
-(void)photoBottomBarView:(id)view didTapSaveToCameraRollButton:(id)cameraRollButton;
-(void)photoBottomBarView:(id)view didTapEditButton:(id)button;
-(void)photoBottomBarView:(id)view didTapShareButton:(id)button;
-(void)photoBottomBarView:(id)view didTapInfoButton:(id)button;
-(void)updateBadgeAnimated:(BOOL)animated;
-(void)photoNavigationView:(id)view didTapBackButton:(id)button;
-(void)photoNavigationView:(id)view didTapCheckButton:(id)button;
-(void)photoNavigationView:(id)view didTapCloseButton:(id)button;
-(void)updatePhotoNavigationView;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)applicationWillChangeStatusBarFrame:(id)application;
-(void)setStatusBarAppearance:(BOOL)appearance;
-(BOOL)prefersStatusBarHidden;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithGroupId:(id)groupId dataSource:(id)source selectable:(BOOL)selectable bottomBarType:(unsigned)type;
-(id)initWithGroupId:(id)groupId dataSource:(id)source;
@end

__attribute__((visibility("hidden")))
@interface LineThriftTransport : NSObject <TTransport> {
	NSMutableData* _writeBuffer;
	NSData* _readBuffer;
	unsigned _readBufferOffset;
}
@property(assign, nonatomic) NSMutableData* writeBuffer;
@property(assign, nonatomic) NSData* readBuffer;
-(void)consume:(unsigned)consume;
-(const char*)borrow:(char*)borrow length:(unsigned*)length;
-(void)flush;
-(void)write:(const char*)write offset:(unsigned)offset length:(unsigned)length;
-(int)readAll:(char*)all offset:(int)offset length:(int)length;
@end

__attribute__((visibility("hidden")))
@interface TCompactProtocolFactory : NSObject <TProtocolFactory> {
}
+(id)sharedFactory;
-(id)newProtocolOnTransport:(id)transport;
@end

__attribute__((visibility("hidden")))
@interface TCompactProtocol : NSObject <TProtocol> {
	id<TTransport> _transport;
	BOOL _transportSupportsBorrowing;
	struct {
		BOOL hasBoolValue;
		BOOL boolValue;
	} _boolValue;
	BOOL _booleanFieldUnwritten;
	int _booleanFieldType;
	short _booleanFieldID;
	CFArrayRef _lastField;
	short _lastFieldID;
}
-(void).cxx_destruct;
-(void)writeVarint64:(unsigned long long)a64;
-(void)writeVarint32:(unsigned)a32;
-(void)writeCollectionBeginWithElementType:(int)elementType size:(int)size;
-(void)writeFieldBeginInternalWithName:(id)name type:(int)type fieldID:(int)anId typeOverride:(BOOL)override;
-(long long)readVarintWithBuffSize:(unsigned)buffSize;
-(long long)readVarint64;
-(int)readVarint32;
-(id)readBinaryInternalForString:(BOOL)string;
-(void)writeBinary:(id)binary;
-(void)writeString:(id)string;
-(void)writeDouble:(double)aDouble;
-(void)writeI64:(long long)a64;
-(void)writeI32:(int)a32;
-(void)writeI16:(short)a16;
-(void)writeByte:(unsigned char)byte;
-(void)writeBool:(BOOL)aBool;
-(void)writeMapEnd;
-(void)writeMapBeginWithKeyType:(int)keyType valueType:(int)type size:(int)size;
-(void)writeSetEnd;
-(void)writeSetBeginWithElementType:(int)elementType size:(int)size;
-(void)writeListEnd;
-(void)writeListBeginWithElementType:(int)elementType size:(int)size;
-(void)writeStructEnd;
-(void)writeStructBeginWithName:(id)name;
-(void)writeFieldEnd;
-(void)writeFieldStop;
-(void)writeFieldBeginWithName:(id)name type:(int)type fieldID:(int)anId;
-(void)writeMessageEnd;
-(void)writeMessageBeginWithName:(id)name type:(int)type sequenceID:(int)anId;
-(id)readBinary;
-(id)readString;
-(double)readDouble;
-(long long)readI64;
-(int)readI32;
-(short)readI16;
-(unsigned char)readByte;
-(BOOL)readBool;
-(void)readSetEnd;
-(void)readSetBeginReturningElementType:(int*)type size:(int*)size;
-(void)readListEnd;
-(void)readListBeginReturningElementType:(int*)type size:(int*)size;
-(void)readMapEnd;
-(void)readMapBeginReturningKeyType:(int*)type valueType:(int*)type2 size:(int*)size;
-(void)readFieldEnd;
-(void)readFieldBeginReturningName:(id*)name type:(int*)type fieldID:(int*)anId;
-(void)readStructEnd;
-(void)readStructBeginReturningName:(id*)name;
-(void)readMessageEnd;
-(void)readMessageBeginReturningName:(id*)name type:(int*)type sequenceID:(int*)anId;
-(id)transport;
-(void)dealloc;
-(id)initWithTransport:(id)transport;
@end

__attribute__((visibility("hidden")))
@interface MBAPIProtocol : NSURLProtocol {
	NSURLConnection* mConnection;
}
+(id)canonicalRequestForRequest:(id)request;
+(BOOL)canInitWithRequest:(id)request;
+(void)initialize;
+(id)requestInfo:(id)info;
+(id)httpRequest:(id)request;
+(void)prepareLoading;
+(void)setSecureNetwork:(BOOL)network;
+(BOOL)isSecureNetwork;
+(BOOL)isNetworkAvailable;
+(id)cdnSSLURLWithServiceName:(id)serviceName namespace:(id)aNamespace objectId:(id)anId tid:(id)tid;
+(id)cdnURLWithServiceName:(id)serviceName namespace:(id)aNamespace objectId:(id)anId tid:(id)tid;
+(id)objectSSLURLWithServiceName:(id)serviceName namespace:(id)aNamespace query:(id)query;
+(id)objectURLWithServiceName:(id)serviceName namespace:(id)aNamespace query:(id)query;
+(id)homeBaseURL;
+(id)myhomeBaseURL;
+(id)timelineBaseURL;
+(int)myhomeAppSn;
+(id)myhomeChannelID;
+(id)timelineChannelID;
+(id)accessTokenForAppSn:(int)appSn;
+(void)setMyhomeAccessToken:(id)token;
+(id)myhomeAccessToken;
+(void)setTimelineAccessToken:(id)token;
+(id)timelineAccessToken;
+(void)setMID:(id)mid;
+(id)MID;
+(void)setCountryCode:(id)code;
+(id)countryCode;
+(void)setHomeHost:(id)host;
+(id)homeHost;
+(void)setMyHomeHost:(id)host;
+(id)myhomeHost;
+(void)setTimelineHost:(id)host;
+(id)timelineHost;
+(void)setCdnSSLHost:(id)host;
+(id)cdnHost;
+(void)setCdnHost:(id)host;
+(void)setObsSSLHost:(id)host;
+(void)setObsHost:(id)host;
+(void)setPhase:(int)phase;
+(int)phase;
+(BOOL)isRealPhase;
-(void).cxx_destruct;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(void)stopLoading;
-(void)startLoading;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface AccountVerificationViewController : NLViewController <EmailPasswordDelegate, UIWebViewDelegate> {
	UIScrollView* bgScrollView;
}
-(void).cxx_destruct;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)resetEmail;
-(void)lostPassword;
-(void)moveViewOffset:(float)offset;
-(void)changeFocus:(int)focus in:(BOOL)anIn;
-(void)clickConfirm:(id)confirm password:(id)password;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface NLCallHistoryDetailViewController : NLCallMenuCommonViewController <UITableViewDataSource, UITableViewDelegate> {
	UIView* _viewNaviTitle;
	UILabel* _labelNaviTitle;
	UIButton* _buttonBack;
	UIView* _viewUserInfoArea;
	NLCallImageView* _imageViewProfile;
	UIButton* _buttonPhoneNumber;
	UILabel* _labelPhoneNumber;
	UILabel* _labelName;
	UIView* _tableHeaderView;
	UITableView* _tableView;
	NSArray* _arrayCallHistory;
	NSArray* _sectionKeyArray;
	NSMutableDictionary* _historyDictionary;
}
@property(retain, nonatomic) NSMutableDictionary* historyDictionary;
@property(retain, nonatomic) NSArray* sectionKeyArray;
@property(retain, nonatomic) NSArray* arrayCallHistory;
@property(assign, nonatomic) UITableView* tableView;
@property(retain, nonatomic) UIView* tableHeaderView;
@property(assign, nonatomic) UILabel* labelName;
@property(assign, nonatomic) UILabel* labelPhoneNumber;
@property(assign, nonatomic) UIButton* buttonPhoneNumber;
@property(assign, nonatomic) NLCallImageView* imageViewProfile;
@property(assign, nonatomic) UIView* viewUserInfoArea;
@property(assign, nonatomic) UIButton* buttonBack;
@property(assign, nonatomic) UILabel* labelNaviTitle;
@property(assign, nonatomic) UIView* viewNaviTitle;
-(void).cxx_destruct;
-(void)actionAddFriedns:(id)friedns;
-(void)calling:(id)calling;
-(id)comparedTodayDate;
-(id)stringFromDate:(id)date;
-(BOOL)isLastDataNotAdded:(id)added withCurrentCount:(int)currentCount;
-(void)actionBackbutton:(id)backbutton;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)initSubviews;
-(void)initContents;
-(void)initSetting;
-(void)initViewController;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(void)initDefault;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBCompositeCellView : MBBaseChildCellView {
}
+(id)create:(id)create postViewType:(int)type activity:(id)activity;
-(void)setupWithCellViews:(id)cellViews postViewType:(int)type activity:(id)activity;
-(id)initWithCellViews:(id)cellViews postViewType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface LAURLImageCache : NSObject {
	NSCache* mCache;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedCache;
-(void).cxx_destruct;
-(void)clearImageCache;
-(void)removeImageForKey:(id)key;
-(void)setImage:(id)image forKey:(id)key;
-(id)imageForKey:(id)key;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageOperation : NSObject <NLObjectStorageOpProgressDelegate> {
	id<NLObjectStorageOpRequest> _request;
	id _completionBlock;
	id _failedBlock;
	id _downloadProgressBlock;
	id _uploadProgressBlock;
	BOOL _isCancelled;
	BOOL _isOBSURL;
	BOOL _isRetrying;
	NLObjectStorageOperationParameters* _parameters;
	NSURL* _URL;
	NSString* _tempUploadFilePath;
	id _uploadProgressDelegate;
	NSString* _responseObjectID;
	NSManagedObjectID* _managedObjectID;
	int _retryCountOnUnAuthorizedError;
	NSNumber* _reqSeq;
	unsigned _opState;
}
@property(assign, nonatomic) unsigned opState;
@property(retain, nonatomic) NSNumber* reqSeq;
@property(assign, nonatomic) BOOL isRetrying;
@property(assign, nonatomic) int retryCountOnUnAuthorizedError;
@property(retain, nonatomic) id<NLObjectStorageOpRequest> request;
@property(assign, nonatomic) BOOL isOBSURL;
@property(readonly, assign, nonatomic) NSURL* requestURL;
@property(readonly, assign, nonatomic) BOOL isFinished;
@property(readonly, assign, nonatomic) BOOL isCancelled;
@property(readonly, assign, nonatomic) NSString* downloadDestinationPath;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSData* responseData;
@property(readonly, assign, nonatomic) NSString* responseString;
@property(readonly, assign, nonatomic) NSDictionary* responseHeaders;
@property(readonly, assign, nonatomic) int responseStatusCode;
@property(assign, nonatomic) id uploadProgressDelegate;
@property(copy, nonatomic) id uploadProgressBlock;
@property(copy, nonatomic) id downloadProgressBlock;
@property(copy, nonatomic) id failedBlock;
@property(copy, nonatomic) id completionBlock;
@property(retain, nonatomic) NSManagedObjectID* managedObjectID;
@property(retain, nonatomic) NSString* responseObjectID;
@property(retain, nonatomic) NSString* tempUploadFilePath;
@property(retain, nonatomic) NLObjectStorageOperationParameters* parameters;
@property(retain, nonatomic) NSURL* URL;
+(BOOL)isNetworkError:(id)error;
+(BOOL)isCanceledError:(id)error;
-(void).cxx_destruct;
-(void)setProgress:(float)progress;
-(id)dictFromJSONResponse;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)dealloc;
-(id)initWithOperationParameters:(id)operationParameters;
-(id)opStateDesc;
-(id)typeName;
-(BOOL)removeTempUploadFile;
-(id)createTempUploadFile:(id)file offset:(unsigned long long)offset;
-(void)createTempFilePathWithDestFilePath:(id)destFilePath;
-(void)changeKeepAliveIfNeeded;
-(void)addAccessTokenHeader;
-(void)addCommonHeaders;
-(void)buildRequest;
-(BOOL)isObsAccessTokenExpired;
-(BOOL)checkObsAccessToken;
-(void)resetObsAccessTokenIfNotUpdated;
-(BOOL)retryOnFailed:(int)failed error:(id)error;
-(void)processResponseHeaders:(id)headers;
-(void)clearOnFinished;
-(void)postprocessOnFailed;
-(void)preprocessOnFailed:(id)failed;
-(void)postprocessOnCompletion;
-(void)preprocessOnCompletion:(id)completion;
-(BOOL)isSucceeded:(int)succeeded;
-(BOOL)isSucceeded;
@end

__attribute__((visibility("hidden")))
@interface RestoreAccountPhoneSetViewController : RegistrationPhoneSetViewController <SMSInfoViewDeleagete, MigrationCodeViewControllerDelegate> {
	SMSInfoView* _smsInfoView;
	TalkIndicatorView* _indicatorView;
}
@property(retain, nonatomic) TalkIndicatorView* indicatorView;
@property(retain, nonatomic) SMSInfoView* smsInfoView;
-(void).cxx_destruct;
-(void)pushRestoreAccountAddressBookViewController;
-(void)migrationCodeViewController:(id)controller didFinishWithPincode:(id)pincode;
-(void)verifyUserWithRegion:(id)region phone:(id)phone;
-(void)didConfirmSMSInfoView:(id)view;
-(void)didCancelSMSInfoView:(id)view;
-(void)showSmsInfoView;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)processRegistration;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface ShowcaseObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _ShowcaseObject : NSManagedObject {
}
@property(retain, nonatomic) ShopObject* shop;
@property(retain, nonatomic) NSString* showcaseID;
@property(retain, nonatomic) NSString* name;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface RestoreAccountVerifySmsViewController : RegistrationVerifySmsViewController <MigrationCodeViewControllerDelegate> {
}
-(void)pushRestoreAccountAddressBookViewController;
-(void)migrationCodeViewController:(id)controller didFinishWithPincode:(id)pincode;
-(void)processRegistration;
-(void)doneButtonTapped:(id)tapped;
-(void)ivrButtonPressed:(id)pressed;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface RestoreAccountVerifyIndigoViewController : RegistrationVerifyIndigoViewController <MigrationCodeViewControllerDelegate> {
}
-(void)pushRestoreAccountAddressBookViewController;
-(void)migrationCodeViewController:(id)controller didFinishWithPincode:(id)pincode;
-(void)processRegistration;
-(void)popViewControllerAnimated;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface RestoreAccountEmailViewController : AccountVerificationViewController <MigrationCodeViewControllerDelegate> {
	TalkIndicatorView* _indicatorView;
	NSString* _userID;
	NSString* _password;
	NSString* _migrationPincodeSessionId;
}
@property(retain, nonatomic) NSString* migrationPincodeSessionId;
@property(retain, nonatomic) NSString* password;
@property(retain, nonatomic) NSString* userID;
@property(retain, nonatomic) TalkIndicatorView* indicatorView;
-(void).cxx_destruct;
-(void)moveViewOffset:(float)offset;
-(void)changeFocus:(int)focus in:(BOOL)anIn;
-(void)showErrorAndHideIndicator:(id)indicator;
-(void)registerDevice;
-(void)migrationCodeViewController:(id)controller didFinishWithPincode:(id)pincode;
-(void)clickConfirm:(id)confirm password:(id)password;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MessageUBALoggerMessageType : NSObject {
	int _ordinal;
	int _ubaEvent;
	int _ubaFailEvent;
	int _ubaReceiveEvent;
	int _ubaReceiveFailEvent;
	NSArray* _thresHolds;
}
@property(readonly, assign, nonatomic) int ordinal;
+(id)EMOTICON_PACKAGE;
+(id)THEME;
+(id)STICKER_PACKAGE;
+(id)EMOTICON;
+(id)STICKER;
+(id)PROFILE;
+(id)FILE;
+(id)AUDIO;
+(id)VIDEO;
+(id)IMAGE;
+(id)TEXT;
-(void).cxx_destruct;
-(int)thresHold:(unsigned char)hold;
-(int)ubaReceiveFailEvent;
-(int)ubaReceiveEvent;
-(int)ubaFailEvent;
-(int)ubaEvent;
-(id)description;
-(id)initWithUBAEvent:(int)ubaevent ubaFailEvent:(int)event ubaReceiveEvent:(int)event3 ubaReceiveFailEvent:(int)event4 thresHolds:(id)holds;
@end

__attribute__((visibility("hidden")))
@interface NLMessageUBALogger : NSObject {
	int _textMessageCount;
	int _imageMessageCount;
	int _videoMessageCount;
	int _audioMessageCount;
	int _fileMessageCount;
	int _profileMessageCount;
	int _stickerMessageCount;
	int _emoticonMessageCount;
	int _stickerPackageMessageCount;
	int _emoticonPackageMessageCount;
	int _themeCount;
	int _textReceiveMessageCount;
	int _imageReceiveMessageCount;
	int _videoReceiveMessageCount;
	int _audioReceiveMessageCount;
	int _fileReceiveMessageCount;
	int _profileReceiveMessageCount;
	int _stickerReceiveMessageCount;
	int _emoticonReceiveMessageCount;
	int _stickerPackageReceiveMessageCount;
	int _emoticonPackageReceiveMessageCount;
	int _themeReceiveCount;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(long)failReceiveCount:(id)count;
-(long)receiveCount:(id)count;
-(long)failCount:(id)count;
-(long)sendCount:(id)count;
-(void)failReceive:(id)receive responseCode:(int)code error:(id)error;
-(void)didReceive:(id)receive startTime:(double)time messageSize:(unsigned long long)size;
-(void)failSend:(id)send error:(id)error;
-(void)didSend:(id)send startTime:(double)time messageSize:(unsigned long long)size;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface RestoreAccountNaverViewController : RegisterAccountKRViewController <MigrationCodeViewControllerDelegate> {
	TalkIndicatorView* _indicatorView;
	NSString* _migrationPincodeSessionId;
}
@property(retain, nonatomic) NSString* migrationPincodeSessionId;
@property(retain, nonatomic) TalkIndicatorView* indicatorView;
-(void).cxx_destruct;
-(void)showErrorAndHideIndicator:(id)indicator;
-(void)registerDevice;
-(void)migrationCodeViewController:(id)controller didFinishWithPincode:(id)pincode;
-(void)processRegistration;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumSettingsViewController : LABaseViewController <UIAlertViewDelegate> {
	LAAlbum* _album;
	LAAlbumTitleInputView* _albumTitleInputView;
	UIActivityIndicatorView* _indicatorView;
}
@property(retain, nonatomic) UIActivityIndicatorView* indicatorView;
@property(retain, nonatomic) LAAlbumTitleInputView* albumTitleInputView;
@property(retain, nonatomic) LAAlbum* album;
-(void).cxx_destruct;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)didTapSaveButton:(id)button;
-(void)didTapBackButton:(id)button;
-(void)setupNavigationBarWithInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithAlbum:(id)album groupId:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface RestoreAccountAddressBookViewController : RegistrationAddressBookViewController {
}
-(void)processRegistration;
@end

__attribute__((visibility("hidden")))
@interface UpdatePhoneAddressBookViewController : RegistrationAddressBookViewController {
}
-(void)processRegistration;
-(void)popViewControllerAnimated;
@end

__attribute__((visibility("hidden")))
@interface MBTextLocation : MBBaseActivityContent {
	NSString* mPlainText;
	NSString* mText;
	NSArray* mTextInfos;
	MBLocation* mLocation;
	BOOL mIsCut;
	BOOL _isCut;
	NSAttributedString* mAttrPlainString;
	NSAttributedString* mAttrString;
	NSDictionary* mAttrSettings;
}
@property(assign, nonatomic) BOOL isCut;
@property(retain, nonatomic) NSDictionary* attrSettings;
@property(readonly, assign, nonatomic) NSAttributedString* attrString;
@property(readonly, assign, nonatomic) NSAttributedString* attrPlainString;
@property(readonly, assign, nonatomic) MBLocation* location;
@property(readonly, assign, nonatomic) NSArray* textInfos;
@property(readonly, assign, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) NSString* plainText;
-(void).cxx_destruct;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(BOOL)isEmpty;
-(BOOL)isEmptyLocationName;
-(BOOL)isEmptyPlainText;
-(BOOL)isEmptyText;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)decorateAttributes:(id)attributes;
-(id)defaultAttrSettings;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageURLRequestOperation : NLObjectStorageOperation {
}
-(void)buildRequest;
@end

__attribute__((visibility("hidden")))
@interface ChannelNavigationBarManager : NSObject {
}
+(void)clearButtonPorperties:(id)porperties;
+(id)validBarTypeWithTypes:(id)types resVersion:(id)version;
+(id)barItemModelWithOption:(id)option srcItemModel:(id)model;
+(id)navigationBarBgImageNameWithType:(id)type;
+(id)titleViewWithModel:(id)model button:(id)button;
+(id)buttonWithModel:(id)model barItem:(id)item;
+(id)createModelWithOptions:(id)options srcModel:(id)model browser:(id)browser;
@end

__attribute__((visibility("hidden")))
@interface MBPostMultiImageView : MBPostImageView {
	UIScrollView* mParentScrollView;
	UIView* mMultiImgView;
	UIButton* mMultiImgActionButton;
	UIImageView* mMultiNoImageView;
	UILabel* mMultiNoLabel;
	UIImage* mMultiNoImage;
	NSMutableArray* mSubViews;
	int mRows;
	BOOL mCanSaveOffset;
}
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
+(UIEdgeInsets)marginWithIsShare:(BOOL)isShare;
+(id)postImageViewWithType:(int)type;
-(void).cxx_destruct;
-(void)showAllImageButtonImageView;
-(id)imageWithIndex:(int)index;
-(void)setVisiblePhotoIndex:(int)index;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)setMultiImagesLabel;
-(void)setMultiImages;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(id)activity;
-(id)initWithFrame:(CGRect)frame type:(int)type;
@end

__attribute__((visibility("hidden")))
@interface ChannelNavigationBarDecorator : NSObject {
}
+(void)decorateTitleViewWithModel:(id)model button:(id)button;
+(void)decorateButtonWithModel:(id)model button:(id)button;
+(void)setTextStyleWithModel:(id)model button:(id)button;
+(float)maxWidthTextButton:(float)button;
+(void)setButtonImagesWithModel:(id)model button:(id)button;
@end

__attribute__((visibility("hidden")))
@interface LEGYFetchOpDao : NSObject {
}
-(void)failedOperation:(id)operation withError:(int)error inManagedObjectContext:(id)managedObjectContext;
-(void)deleteCompletedOperations:(id)operations;
-(long long)getUncompletedMinimunRevision:(id)revision;
-(long long)completedOperations:(id)operations inManagedObjectContext:(id)managedObjectContext;
-(int)unprocessedOperationCount:(id)count;
-(id)getOperations:(int)operations inManagedObjectContext:(id)managedObjectContext;
-(id)getPredicateForUnprocessedOperation;
-(id)toOperation:(id)operation;
-(void)toFetchOpOperation:(id)fetchOpOperation lineOperation:(id)operation;
-(long long)insertOperations:(id)operations currentRevision:(long long)revision inManagedObjectContext:(id)managedObjectContext;
@end

__attribute__((visibility("hidden")))
@interface ChannelResourceDownloadManager : NSObject {
	LineFileDownload* mDownloader;
	NSString* mTitleBarType;
	NSString* mVersion;
	unsigned mRetryCount;
}
@property(assign, nonatomic) unsigned retryCount;
@property(retain, nonatomic) NSString* version;
@property(retain, nonatomic) NSString* titleBarType;
@property(retain, nonatomic) LineFileDownload* downloader;
+(void)removeManager:(id)manager;
+(BOOL)addManager:(id)manager;
+(BOOL)isNowDownloadingType:(id)type;
+(BOOL)hasNavigationBarResourcForType:(id)type resVersion:(id)version;
+(id)downloadPath:(id)path resVersion:(id)version;
+(id)tempFilePath:(id)path;
+(void)attemptDownload;
+(id)downloadHost;
+(void)initialize;
+(void)requestDownloadTitleBarType:(id)type version:(id)version;
-(void).cxx_destruct;
-(void)dealloc;
-(void)didDownload;
-(void)startDownload;
-(id)downloadURL;
@end

__attribute__((visibility("hidden")))
@interface ChannelNavigationBarResource : NSObject {
}
+(id)imageFromDownloadFolderWithName:(id)name type:(id)type resVersion:(id)version;
+(id)textPropertyInfoFromDownloadFolder:(id)downloadFolder subKey:(id)key resVersion:(id)version;
+(id)downloadedTextPropertyInfo:(id)info subKey:(id)key resVersion:(id)version;
+(BOOL)readableInBundle:(id)bundle;
+(void)initialize;
+(id)imageNamed:(id)named type:(id)type resVersion:(id)version;
+(id)textPropertyInfo:(id)info subKey:(id)key resVersion:(id)version;
+(void)removeCacheInfoForType:(id)type;
@end

__attribute__((visibility("hidden")))
@interface NLProfileChanger : NSObject {
	NLSharableObject* sharingObject_;
}
-(void).cxx_destruct;
-(void)uploadGroupProfileImage:(id)image;
-(void)uploadGroupPictureWithImage:(id)image toGroup:(id)group;
-(void)uploadMyProfilePictureWithImage:(id)image;
-(void)showImageCropperWithImage:(id)image whenFinished:(id)finished;
-(void)uploadProfileImage:(id)image;
-(void)routeImageToGroupProfileWithImage:(id)image;
-(void)routeImageToMyProfileWithImage:(id)image;
-(void)uninitialize;
-(void)initialize;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLSharableObject : NSObject {
	int _type;
	NSString* _text;
	UIImage* _image;
	UIImage* _thumbnail;
	NSURL* _imageFileUrl;
	NSURL* _videoFileUrl;
	NSURL* _audioFileUrl;
	NSDictionary* _obsCopyOptions;
	NSDictionary* _contentMetaData;
	id _location;
	id _contact;
	NSNumber* _audioDuration;
}
@property(retain, nonatomic) NSNumber* audioDuration;
@property(retain, nonatomic) id contact;
@property(retain, nonatomic) id location;
@property(retain, nonatomic) NSDictionary* contentMetaData;
@property(retain, nonatomic) NSDictionary* obsCopyOptions;
@property(copy, nonatomic) NSURL* audioFileUrl;
@property(copy, nonatomic) NSURL* videoFileUrl;
@property(copy, nonatomic) NSURL* imageFileUrl;
@property(copy, nonatomic) UIImage* thumbnail;
@property(copy, nonatomic) UIImage* image;
@property(copy, nonatomic) NSString* text;
@property(assign, nonatomic) int type;
+(id)objectWithFileMetadata:(id)fileMetadata;
+(id)objectWithContact:(id)contact;
+(id)objectWithLocation:(id)location;
+(id)objectWithOBSCopyOptions:(id)obscopyOptions;
+(id)objectWithAudioFileURL:(id)audioFileURL;
+(id)objectWithVideoFileURL:(id)videoFileURL;
+(id)objectWithImageFileURL:(id)imageFileURL;
+(id)objectWithText:(id)text image:(id)image;
+(id)objectWithImage:(id)image;
+(id)objectWithText:(id)text;
-(void).cxx_destruct;
-(id)description;
-(id)sourceOBSPathForCopy;
-(id)dictionaryByKeyValueFormatting;
-(id)object;
-(BOOL)isFileType;
-(BOOL)isAudioType;
-(BOOL)isVideoType;
-(BOOL)isImageType;
-(BOOL)isCompositeObject;
-(BOOL)hasContact;
-(BOOL)hasLocation;
-(BOOL)hasOBSContent;
-(BOOL)hasVideoFileUrl;
-(BOOL)hasImageFileUrl;
-(BOOL)hasImage;
-(BOOL)hasText;
@end

__attribute__((visibility("hidden")))
@interface GroupSelectionViewController : NLViewController <NSFetchedResultsControllerDelegate, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate> {
	TalkGroupObject* checkedGroup_;
	NSMutableArray* filteredListContent_;
	NSString* savedSearchTerm_;
	int savedScopeButtonIndex_;
	BOOL searchWasActive_;
	NSFetchedResultsController* groupsFetchedResultsController_;
	NSFetchedResultsController* groupsFetchedResultsController;
	NSManagedObjectContext* managedObjectContext;
	UITableView* tableView;
	id completeBlock;
	UISearchBar* _searchField;
}
@property(copy, nonatomic) id completeBlock;
@property(assign, nonatomic) UITableView* tableView;
@property(assign, nonatomic) UISearchBar* searchField;
@property(retain, nonatomic) NSManagedObjectContext* managedObjectContext;
@property(readonly, assign, nonatomic) NSFetchedResultsController* groupsFetchedResultsController;
-(void).cxx_destruct;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)filterContentForSearchText:(id)searchText scope:(id)scope;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)done:(id)done;
-(void)cancelAction;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)cellForTableView:(id)tableView managedObject:(id)object;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)updateButtonLabel;
-(void)initializeNavigationBar;
-(void)dismissNoGroupsMessageWithAnimated:(BOOL)animated;
-(void)showNoGroupsMessageIfNeededWithAnimated:(BOOL)animated;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLAppearanceCustomizedNavigationController : UINavigationController <UIGestureRecognizerDelegate, UINavigationControllerDelegate> {
	UIViewController* _viewControllerTransitioningTo;
}
@property(retain, nonatomic) UIViewController* viewControllerTransitioningTo;
-(void).cxx_destruct;
-(void)didChangeTheme:(id)theme;
-(void)addObserver;
-(id)doNotSwipeViewControllersOnLandscape;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)setupIOS7BackItem;
-(id)popViewControllerAnimated:(BOOL)animated;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(int)preferredStatusBarStyle;
-(void)dealloc;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface LGMediaInfo : NSObject {
	NSURL* _originalImageFileURL;
	NSURL* _editedImageFileURL;
	ALAsset* _asset;
	unsigned _filterIndex;
	unsigned _rotateCount;
	NSURL* _assetURL;
	NSString* _groupPersistentID;
}
@property(retain, nonatomic) NSString* groupPersistentID;
@property(retain, nonatomic) NSURL* assetURL;
@property(assign, nonatomic) unsigned rotateCount;
@property(assign, nonatomic) unsigned filterIndex;
@property(retain, nonatomic) ALAsset* asset;
@property(retain, nonatomic) NSURL* editedImageFileURL;
@property(retain, nonatomic) NSURL* originalImageFileURL;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineHomeScheme : NSObject {
}
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
+(id)lineHomeScheme;
+(void)searchMIDWithUserID:(id)userID completionBlock:(id)block inViewController:(id)viewController;
+(id)convertUserID:(id)anId byType:(id)type;
+(void)routePostWithParameters:(id)parameters type:(id)type inViewController:(id)viewController;
+(void)routeProfileWithParameters:(id)parameters type:(id)type inViewController:(id)viewController;
+(void)routeMainWithParameters:(id)parameters type:(id)type inViewController:(id)viewController;
+(void)routeMsgWithParameters:(id)parameters type:(id)type inViewController:(id)viewController;
+(void)routeWithAction:(id)action type:(id)type parameters:(id)parameters;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumAddChatPhotosViewController : LAAlbumAddPhotosBaseViewController {
	LAPhotoViewSelectedChatDataSource* _selectedChatDataSource;
	float _offsetSizeForLandscape;
}
@property(assign, nonatomic) float offsetSizeForLandscape;
@property(retain, nonatomic) LAPhotoViewSelectedChatDataSource* selectedChatDataSource;
-(void).cxx_destruct;
-(unsigned)numberOfUploadMedias;
-(void)completeAction;
-(id)createUploadMediaModels:(NSRange)models targetAlbumId:(id)anId;
-(void)photoBottomBarView:(id)view didTapSelectButton:(id)button;
-(BOOL)thumbnailCellDidTapCheckButtonAtIndex:(unsigned)thumbnailCell;
-(void)thumbnailCellDidTapThumbnailAtIndex:(unsigned)thumbnailCell;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)updateView;
-(BOOL)checkIfInvalidImageExists;
-(void)selectValidPhotos;
-(id)initWithGroupId:(id)groupId albumId:(id)anId dataSource:(id)source addableCount:(unsigned)count;
@end

__attribute__((visibility("hidden")))
@interface LineProfileScheme : NSObject {
}
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
+(id)lineProfileScheme;
+(void)routeWithType:(id)type toTarget:(id)target withParameters:(id)parameters;
@end

__attribute__((visibility("hidden")))
@interface LGPhotoInfoView : UIView {
	LGPhotoViewController* _mDelegate;
	UIScrollView* _scrollView;
	UIButton* _closeButton;
	UIView* _backgroundView;
}
@property(retain, nonatomic) UIView* backgroundView;
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) __weak LGPhotoViewController* mDelegate;
-(void).cxx_destruct;
-(void)didSelectCloseButton:(id)button;
-(void)didTapBackground:(id)background;
-(void)showInfo;
-(void)layoutSubviews;
-(void)configValueLabel:(id)label;
-(void)configLabel:(id)label;
-(float)nextRowHeight;
-(float)nextRowYPosition;
-(unsigned)rowCount;
-(void)addBorderInView:(id)view;
-(void)addRowWithTitleText:(id)titleText detailText:(id)text;
-(void)setupBackground;
-(void)addCloseButton;
-(id)bundleName;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface MoreTabCategoryCell : UITableViewCell {
	LineMoreItem* item_;
	MoreTabImageView* moreIconView_;
	NLStyledTextView* friendInfoLabel_;
	NLStyledTextMarkupParser* parser_;
	UIButton* bgButton_;
	UIButton* downloadButton_;
}
-(void).cxx_destruct;
-(void)onTap:(id)tap;
-(void)prepareForReuse;
-(id)item;
-(void)setItem:(id)item forType:(unsigned)type;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBLikeListViewController : MBViewController <UITableViewDelegate, UITableViewDataSource, MBTableViewPullDelegate, NSFetchedResultsControllerDelegate, MBDataManagerDelegate> {
	MBTableView* mTableView;
	MBLikeListManager* mLikeListManager;
	MBActivity* mActivity;
	BOOL mUpdateByUserAction;
	int mLastAlertTime;
	BOOL mCouldRotate;
	NSString* mParent;
	BOOL mShouldRotate;
}
@property(assign, nonatomic) BOOL couldRotate;
@property(retain, nonatomic) MBLikeListManager* likeListManager;
-(void).cxx_destruct;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)dataManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)dataManager:(id)manager didFinishUpdatingWithError:(id)error;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)moveToMyHomeViewController:(id)myHomeViewController;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)startFetch:(id)fetch fetchCount:(int)count;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(BOOL)confirmError:(id)error;
-(unsigned)supportedInterfaceOrientations;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithActivity:(id)activity parentViewController:(id)controller;
-(void)setupShadow;
-(void)updateNavigationBar;
-(void)setTitle:(id)title;
-(void)setupNavigationBar;
-(void)setupTableviewFooter;
@end

__attribute__((visibility("hidden")))
@interface MoreTabCategoryViewController : NLViewController <UITableViewDataSource, UITableViewDelegate, LineMoreManagerDelegate, StickerShopSegmentControllerDelegate> {
	NSArray* channelInfo_;
	UIView* tabBase_;
	StickerShopSegmentController* segmentControl_;
	MoreCategoryBannerInfo* bannerInfo_;
	UIView* headerBase_;
	UITableView* tableView_;
	int categoryItemId_;
	UIView* emptyView_;
	UIActivityIndicatorView* act_;
	LineFileDownload* currentDownload_;
	BOOL shouldReloadBanner_;
	BOOL bannerIsReady_;
	NSArray* rankingList_;
	NSArray* newList_;
}
-(void).cxx_destruct;
-(void)changeSegment:(id)segment;
-(void)lineMoreitemCategoryCacheUpdated;
-(void)lineMoreItemBadgeCountMightBeUpdated;
-(void)lineMoreItemNewIconUpdated:(id)updated;
-(void)lineMoreItemDownloadFailed;
-(void)lineMoreItemsHasNoUpdate;
-(void)lineMoreItemsHasUpdated;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)headerView;
-(id)tabView;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onApplicationDidBecomeActive:(id)onApplication;
-(BOOL)isShowingPopularTab;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)dealloc;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithCategoryItemId:(int)categoryItemId;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoCell : UITableViewCell <LASyncStatusObserving> {
	id<LAPhotoCellDelegate> _delegate;
	id<LAPhotoCellDataSource> _datasource;
	unsigned _row;
	NSArray* _photos;
	NSString* _groupID;
	NSString* _albumId;
	NSArray* _urlImageControls;
	LAUploadProgressView* _progressView;
	int _targetOrientation;
}
@property(assign, nonatomic) int targetOrientation;
@property(retain, nonatomic) LAUploadProgressView* progressView;
@property(retain, nonatomic) NSArray* urlImageControls;
@property(retain, nonatomic) NSString* albumId;
@property(retain, nonatomic) NSString* groupID;
@property(retain, nonatomic) NSArray* photos;
@property(assign, nonatomic) unsigned row;
@property(assign, nonatomic) id<LAPhotoCellDataSource> datasource;
@property(assign, nonatomic) id<LAPhotoCellDelegate> delegate;
+(unsigned)numberOfPhotosPerRow:(int)photosPerRow;
+(unsigned)numberOfPhotosPerRow;
+(float)height:(int)height;
+(float)height;
+(id)photoCellWithAlbumId:(id)albumId groupID:(id)anId delegate:(id)delegate atRow:(unsigned)row tableView:(id)view;
-(void).cxx_destruct;
-(void)applicationWillChangeStatusBarOrientation:(id)application;
-(void)didTapUrlImageControl:(id)control;
-(void)syncOBSNotificationPhotoAddCanceled:(id)canceled groupID:(id)anId packageType:(int)type;
-(void)syncOBSNotificationPhotoProgress:(float)progress albumID:(id)anId groupID:(id)anId3;
-(void)syncOBSNotificationPhotoAddFailed:(id)failed groupID:(id)anId error:(id)error;
-(void)syncOBSNotificationPhotoAddCompleted:(id)completed groupID:(id)anId;
-(void)syncOBSNotificationPhotoAdd:(id)add added:(int)added total:(int)total albumID:(id)anId groupID:(id)anId5 error:(id)error;
-(void)setupNotification;
-(void)setupProgress;
-(void)setupUrlImages;
-(void)refreshImages;
-(id)visiblePhotos;
-(unsigned)startIndex;
-(BOOL)shouldShowProgress;
-(void)setViewFrames;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface ImageMapReloadView : UIView {
	id<ImageMapReloadViewDelegate> delegate;
	float _preferredHeight;
}
@property(assign, nonatomic) float preferredHeight;
@property(assign, nonatomic) id<ImageMapReloadViewDelegate> delegate;
-(void)onTap:(id)tap;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallContractLoader : NSObject {
	dispatch_queue_s* dQueue;
	dispatch_queue_s* dMergeQueue;
	id<NLCallSearchInfoDelegate> _delegate;
	NSMutableDictionary* _mCachedCallHistory;
	NSMutableDictionary* _mCachedLocalAddress;
	NSMutableDictionary* _mCachedSpot;
	NSString* _mSearchKeyword;
	NSString* _mSearchKeywordLast;
	id _searchSpotRequest;
	NSMutableDictionary* _mDictionarySearchForResult;
	NSMutableArray* _mArraySearchResult;
	id _params;
}
@property(retain, nonatomic) id params;
@property(retain, nonatomic) NSMutableArray* mArraySearchResult;
@property(retain, nonatomic) NSMutableDictionary* mDictionarySearchForResult;
@property(retain, nonatomic) id searchSpotRequest;
@property(retain, nonatomic) NSString* mSearchKeywordLast;
@property(retain, nonatomic) NSString* mSearchKeyword;
@property(retain, nonatomic) NSMutableDictionary* mCachedSpot;
@property(retain, nonatomic) NSMutableDictionary* mCachedLocalAddress;
@property(retain, nonatomic) NSMutableDictionary* mCachedCallHistory;
@property(assign, nonatomic) id<NLCallSearchInfoDelegate> delegate;
-(void).cxx_destruct;
-(void)resetAutocompleteCachedData;
-(id)talkAddressBookContactArrayToUserInfArray:(id)userInfArray;
-(void)searchSpot;
-(void)searchAddress;
-(void)searchLocalHistory;
-(void)updateEventInvoker;
-(void)processMerge:(id)merge;
-(void)mergeSpotSearchResult:(id)result;
-(void)mergeSearch:(id)search withCacheType:(id)cacheType;
-(void)searchCachedData:(id)data;
-(void)searchWithType:(int)type;
-(void)searchAll;
-(void)readyForSearch;
-(void)searchContract:(id)contract withParams:(id)params;
-(BOOL)isSearchKeywordChanged:(id)changed;
-(void)setSearchKeywordLast:(id)last;
-(void)cancelSearchSpot;
-(void)dealloc;
-(void)resetAddressCache:(id)cache;
-(void)initLoader;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLChatMenuViewController : NLViewController <NLGridControlDelegate> {
	BOOL _opened;
	NSArray* _items;
	NSArray* _extraItems;
	id<NLChatMenuViewControllerDelegate> _delegate;
	UIBarButtonItem* _chatMenuBarButtonItem;
	int _currentInterfaceOrientation;
	NLGridMenu* _menuView;
	NLGridMenu* _extraMenuView;
	UIView* _menuContainerView;
	UIView* _backgroundView;
	NLStyleRuleset* _gridMenuRuleset;
}
@property(retain, nonatomic) NLStyleRuleset* gridMenuRuleset;
@property(assign, nonatomic) UIView* backgroundView;
@property(assign, nonatomic) UIView* menuContainerView;
@property(assign, nonatomic) NLGridMenu* extraMenuView;
@property(assign, nonatomic) NLGridMenu* menuView;
@property(assign, nonatomic) int currentInterfaceOrientation;
@property(retain, nonatomic) UIBarButtonItem* chatMenuBarButtonItem;
@property(assign, nonatomic) id<NLChatMenuViewControllerDelegate> delegate;
@property(retain, nonatomic) NSArray* extraItems;
@property(retain, nonatomic) NSArray* items;
@property(assign, nonatomic) BOOL opened;
+(id)menuItemWithKey:(int)key enabled:(BOOL)enabled isNew:(BOOL)aNew;
+(id)menuItemWithKey:(int)key enabled:(BOOL)enabled;
+(id)menuItemWithKey:(int)key;
+(id)itemDisabledImageForKey:(int)key;
+(id)itemImageForKey:(int)key;
+(id)itemTitleForKey:(int)key;
+(void)addMappingWithKey:(int)key title:(id)title image:(id)image disabledImage:(id)image4;
+(void)prepareItemMappings;
+(id)iconImageWithRulesetPropertyKey:(id)rulesetPropertyKey withRuleset:(id)ruleset;
+(void)resetItemMappings;
+(id)itemMappings;
-(void).cxx_destruct;
-(unsigned)supportedInterfaceOrientations;
-(void)gridControl:(id)control didSelectItem:(id)item atIndexPath:(id)indexPath;
-(float)gridControl:(id)control heightForRow:(int)row;
-(BOOL)hasExtraMenu;
-(BOOL)isDefaultMenuIndexPath:(id)path;
-(void)setNewBadgeOn:(BOOL)on atIndexPath:(id)indexPath;
-(void)setNewBadgeOn:(BOOL)on typeKey:(unsigned)key;
-(void)resignChatMenu;
-(void)resetChatMenuBarButtonItem;
-(void)reloadItems;
-(id)chatMenuBarButtonItemByOrientation:(int)orientation;
-(void)setMenuVisible:(BOOL)visible animated:(BOOL)animated;
-(void)changeInterfaceOrientation:(int)orientation;
-(void)replaceItemAtIndexPath:(id)indexPath withItem:(id)item;
-(id)indexPathForItem:(id)item;
-(id)itemForKey:(unsigned)key;
-(void)viewDidUnload;
-(void)renderViews;
-(void)layoutMenuView;
-(void)viewDidLoad;
-(void)loadView;
-(void)chatMenuBarButtonTapped:(id)tapped;
-(void)updateButtonWithCurrentOpenedState:(id)currentOpenedState;
-(void)handleTapGesture:(id)gesture;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MBFetchFooterView : UIView {
	UIActivityIndicatorView* mIndicator;
	int mState;
}
@property(assign, nonatomic) int state;
-(void).cxx_destruct;
-(int)height;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(void)initViews;
@end

__attribute__((visibility("hidden")))
@interface NLGridControlItem : NSObject {
	BOOL _enabled;
	NSString* _title;
	UIImage* _image;
	UIImage* _highlightedImage;
	UIImage* _disabledImage;
	int _tag;
	id _target;
	SEL _action;
}
@property(assign, nonatomic) SEL action;
@property(assign, nonatomic) id target;
@property(assign, nonatomic) int tag;
@property(assign, nonatomic) BOOL enabled;
@property(retain, nonatomic) UIImage* disabledImage;
@property(retain, nonatomic) UIImage* highlightedImage;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(id)description;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLGridControl : UIView {
	BOOL _useShadowView;
	id<NLGridControlDelegate> _delegate;
	NSMutableArray* _items;
	unsigned _numberOfRows;
	unsigned _numberOfColumns;
	int _interfaceOrientation;
	NSArray* _buttons;
	unsigned _gridControlStyle;
	UIImageView* _shadowView;
}
@property(assign, nonatomic) BOOL useShadowView;
@property(retain, nonatomic) UIImageView* shadowView;
@property(assign, nonatomic) unsigned gridControlStyle;
@property(retain, nonatomic) NSArray* buttons;
@property(assign, nonatomic) int interfaceOrientation;
@property(assign, nonatomic) unsigned numberOfColumns;
@property(assign, nonatomic) unsigned numberOfRows;
@property(retain, nonatomic) NSMutableArray* items;
@property(assign, nonatomic) id<NLGridControlDelegate> delegate;
-(void).cxx_destruct;
-(void)reloadAllButtons;
-(void)reloadButtonAtIndexPath:(id)indexPath;
-(void)findAndUpdateButtonWithItem:(id)item;
-(id)findButtonWithItem:(id)item;
-(void)replaceItemAtIndexPath:(id)indexPath withItem:(id)item;
-(id)itemAtIndexPath:(id)indexPath;
-(id)buttonAtIndexPath:(id)indexPath;
-(id)indexPathForItem:(id)item;
-(id)indexPathForButton:(id)button;
-(float)expectedHeight;
-(void)layoutSubviews;
-(void)removeButtons;
-(void)layoutSubviewsInDefaultStyleButton:(id)defaultStyleButton;
-(void)configureButtonImagesForRightmostColumnInBottomRow:(id)bottomRow;
-(void)configureButtonImagesForRightmostColumnsInUpperRows:(id)upperRows;
-(void)configureButtonImagesForMiddleColumnsInBottomRow:(id)bottomRow;
-(void)configureButtonImagesForMiddleColumnsInUpperRows:(id)upperRows;
-(void)configureButtonImagesForLeftmostColumnInBottomRow:(id)bottomRow;
-(void)configureButtonImagesForLeftmostColumnsInUpperRows:(id)upperRows;
-(void)configureButtonWithDefaultStyle:(id)defaultStyle;
-(void)configureDefaultStyleButton:(id)button atIndexPath:(id)indexPath;
-(float)heightForDefaultButtonAtIndexPath:(id)indexPath;
-(unsigned)linearIndexFromIndexPath:(id)indexPath;
-(void)setTitle:(id)title onButton:(id)button enabled:(BOOL)enabled;
-(void)updateButton:(id)button withItem:(id)item;
-(float)heightForButtonAtIndexPath:(id)indexPath;
-(float)widthForButtonAtIndexPath:(id)indexPath;
-(void)layoutSubviewsInButton:(id)button;
-(void)configureButtonImages;
-(void)setButtonBackgroundImages:(id)images withNormalStateImage:(id)normalStateImage highlightedStateImage:(id)image disabledStateImage:(id)image4;
-(id)configuredButtonWithItem:(id)item;
-(void)itemSelected:(id)selected;
-(void)buildMenuButtonsWithItems;
-(void)setupShadowView;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAUtil : NSObject {
}
+(BOOL)isSafeFilterResponse:(id)response;
+(void)sendActionIfUserHasAuthorization:(id)authorization actionBlock:(id)block;
+(id)stringFromInteger:(int)integer;
+(id)uploadQueueKey:(id)key groupID:(id)anId;
+(id)currentLanguageCode;
+(BOOL)isHighResolutionScreen;
+(BOOL)isIphone5MainScreen;
+(BOOL)isIosVersion7;
+(BOOL)isIosVersion6;
+(BOOL)isIosVersion5;
@end

__attribute__((visibility("hidden")))
@interface NLChatTitleView : UIButton {
	UILabel* _titleCenterView;
	UIView* _leftView;
	UIView* _rightView;
	float _titleViewLeftMargin;
	float _titleViewRightMargin;
	float _leftBarItemExtraWidth;
	float _rightBarItemExtraWidth;
}
@property(assign, nonatomic) float rightBarItemExtraWidth;
@property(assign, nonatomic) float leftBarItemExtraWidth;
@property(assign, nonatomic) float titleViewRightMargin;
@property(assign, nonatomic) float titleViewLeftMargin;
@property(retain, nonatomic) UIView* rightView;
@property(retain, nonatomic) UIView* leftView;
@property(retain, nonatomic) UILabel* titleCenterView;
-(void).cxx_destruct;
-(void)setChatTitle:(id)title;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallAgreementViewController : NLViewController <NMAttributedLabelDelegate> {
	UIButton* _checkButton;
	BOOL _isAgreeFlag;
	UIImageView* _titleImageView;
	UIButton* _buttonClose;
	UILabel* _labelTitle;
	UIButton* _buttonAgreement;
	NMAttributedLabel* _labelAgreementLeft;
	UIButton* _buttonAgreementStart;
	UIButton* _buttonAboutLineCall;
	UIImageView* _bottomImageView;
	unsigned _startUpType;
	NSDictionary* _detailTitleInfo;
}
@property(retain, nonatomic) NSDictionary* detailTitleInfo;
@property(assign, nonatomic) BOOL isAgreeFlag;
@property(assign, nonatomic) unsigned startUpType;
@property(assign, nonatomic) UIImageView* bottomImageView;
@property(assign, nonatomic) UIButton* buttonAboutLineCall;
@property(assign, nonatomic) UIButton* buttonAgreementStart;
@property(assign, nonatomic) NMAttributedLabel* labelAgreementLeft;
@property(assign, nonatomic) UIButton* buttonAgreement;
@property(assign, nonatomic) UILabel* labelTitle;
@property(assign, nonatomic) UIButton* buttonClose;
@property(assign, nonatomic) UIImageView* titleImageView;
-(void).cxx_destruct;
-(bool)noLinkTapped:(id)tapped;
-(void)attributedLabel:(id)label linkLongTapped:(id)tapped url:(id)url type:(unsigned)type;
-(void)attributedLabel:(id)label linkTapped:(id)tapped url:(id)url type:(unsigned)type;
-(void)setAgreementLink;
-(void)webViewControllerCloseButtonPressed:(id)pressed;
-(void)presentInAppWebViewControllerWithURLString:(id)urlstring title:(id)title;
-(void)actionAboutLineCall:(id)call;
-(void)toggleStartButton:(BOOL)button;
-(void)actionSwitch:(id)aSwitch;
-(void)actionAgreement:(id)agreement;
-(void)actionClose:(id)close;
-(void)moveToCenterAgreement;
-(void)initSubviews;
-(void)initContents;
-(BOOL)prefersStatusBarHidden;
-(void)initSetting;
-(void)initViewController;
-(int)preferredStatusBarStyle;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface NLManagedStickerPackage : _NLManagedStickerPackage {
}
+(void)importStickerPackageDefinitionsByPackageID:(id)anId changes:(id)changes inContext:(id)context;
+(void)importStickerPackageDefinitions:(id)definitions changes:(id)changes inContext:(id)context;
+(void)importStickerPackageDefinitions:(id)definitions inContext:(id)context;
+(id)newMutableStickerPackageDefinitionsByPackageID:(id)anId;
+(id)stickerPackageForStickerWithID:(int)anId inContext:(id)context;
+(id)stickerPackageForID:(long long)anId inContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface NLGridMenuItem : NLGridControlItem {
	BOOL _isNew;
}
@property(assign, nonatomic) BOOL isNew;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface NLGridMenu : NLGridControl {
	unsigned _layoutStyle;
}
@property(assign, nonatomic) unsigned layoutStyle;
-(BOOL)render;
-(void)setNewBadgeOn:(BOOL)on atIndexPath:(id)indexPath;
-(void)layoutHorizonStyleToButton:(id)button;
-(void)layoutSubviewsInDefaultStyleButton:(id)defaultStyleButton;
-(void)layoutSubviewsInButton:(id)button;
-(void)updateButton:(id)button withItem:(id)item;
-(void)setTitle:(id)title onButton:(id)button enabled:(BOOL)enabled;
-(id)configuredButtonWithItem:(id)item;
-(void)configureButtonWithDefaultStyle:(id)defaultStyle;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBMovie : MBBaseActivityContent {
	NSString* mObjectID;
	NSString* mNamespace;
	NSString* mServiceName;
	NSURL* mThumbnailURL;
	NSURL* mExternalURL;
	CGSize mSize;
}
@property(readonly, assign, nonatomic) CGSize size;
@property(readonly, assign, nonatomic) NSURL* externalURL;
@property(readonly, assign, nonatomic) NSURL* thumbnailURL;
@property(readonly, assign, nonatomic) NSString* serviceName;
@property(readonly, assign, nonatomic) NSString* namespace;
@property(readonly, assign, nonatomic) NSString* objectID;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)isExternal;
-(id)description;
-(id)initWithExternalInfo:(id)externalInfo;
-(id)initWithMediaInfo:(id)mediaInfo;
-(void)setupWithExternalInfo:(id)externalInfo;
-(void)setupWithMediaInfo:(id)mediaInfo;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoViewBaseDataSource : NSObject <LAPhotoViewDataSource, LAPhotoPreloaderDelegate, LAPhotoPreloaderDataSource, LASaveProgressViewDelegate> {
	NSMutableArray* _photos;
	unsigned _startIndex;
	LAPhotoPreloader* _preloader;
	NSMutableArray* _selectedIndexes;
	BOOL _saveCompleted;
	unsigned _sortType;
	id _loadCompletion;
	id _loadProgressBlock;
	unsigned _savingIndex;
	NSMutableIndexSet* _savedIndexes;
	LASaveProgressView* _progressView;
	id _saveCompletion;
}
@property(copy, nonatomic) id saveCompletion;
@property(retain, nonatomic) LASaveProgressView* progressView;
@property(retain, nonatomic) NSMutableIndexSet* savedIndexes;
@property(assign, nonatomic) unsigned savingIndex;
@property(assign, nonatomic) BOOL saveCompleted;
@property(copy, nonatomic) id loadProgressBlock;
@property(copy, nonatomic) id loadCompletion;
@property(assign, nonatomic) unsigned sortType;
-(void).cxx_destruct;
-(void)cancelDownloading;
-(void)downloadFullImageAtIndex:(int)index progressBlock:(id)block completion:(id)completion;
-(void)saveProgressView:(id)view didTapCancelButton:(id)button;
-(void)hideProgressView;
-(void)showProgressView;
-(void)stopSavingSelectedImages;
-(void)saveNextImageIfExists;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)saveImage:(id)image;
-(void)saveSelectedImageToCameraRollAtIndex:(unsigned)index;
-(void)saveSelectedImagesToCameraRollWithCompletion:(id)completion;
-(void)removeAllSelectedIndexes;
-(void)selectIndexes:(id)indexes;
-(void)selectAllIndexes;
-(id)selectedIndexes;
-(unsigned)numberOfSelectedIndexes;
-(BOOL)isSelectedAtIndex:(int)index;
-(void)setSelected:(BOOL)selected atIndex:(int)index;
-(void)cancelLoadingImages;
-(void)cancelLoadingImageExceptIndexes:(id)indexes;
-(void)loadImageAtIndex:(int)index completion:(id)completion;
-(id)preloadKeyAtIndex:(int)index;
-(unsigned)numberOfPhotos;
-(void)cleanup;
-(void)cancelAllOperations;
-(void)preloadImagesAroundIndex:(int)index;
-(void)preloadImagesAfterLoadingImageAtIndex:(int)index;
-(void)imageInfo:(id)info atIndex:(int)index;
-(CGSize)sizeOfThumbnailAtIndex:(int)index;
-(id)thumbnailAtIndex:(int)index;
-(id)fullImageAtIndex:(int)index;
-(void)requestToUpdateObjectAtIndex:(int)index completion:(id)completion;
-(void)requestToDeleteObjectAtIndex:(int)index completion:(id)completion;
-(void)cancelLoadingPhotoGroup;
-(void)setupPhotoGroup:(id)group;
-(void)jumpAlbumWithDirection:(unsigned)direction cacheCompletion:(id)completion fetchCompletion:(id)completion3;
-(BOOL)hasNextPhotoGroup;
-(BOOL)hasPrevPhotoGroup;
-(id)photoGroupInfo;
-(unsigned)numberOfObjectsInNextPhotoGroup;
-(unsigned)numberOfObjectsInPrevPhotoGroup;
-(id)titleOfNextPhotoGroup;
-(id)titleOfPrevPhotoGroup;
-(id)photoInfoAtIndex:(int)index;
-(void)removeObjectAtIndex:(int)index;
-(BOOL)hasObjectAtIndex:(int)index;
-(id)objectAtIndex:(int)index;
-(unsigned)numberOfObjects;
-(void)setStartIndex:(unsigned)index;
-(unsigned)startIndex;
-(id)title;
-(void)dealloc;
-(id)initWithIndex:(unsigned)index objects:(id)objects;
@end

__attribute__((visibility("hidden")))
@interface LABaseViewController : UIViewController {
	NSString* _groupID;
	BOOL _viewAppears;
}
@property(assign, nonatomic) BOOL viewAppears;
@property(retain, nonatomic) NSString* groupID;
-(void).cxx_destruct;
-(void)presentModalNavigationControllerWithRootViewController:(id)rootViewController animated:(BOOL)animated;
-(void)presentModalViewController:(id)controller animated:(BOOL)animated;
-(void)sendActionIfUserHasAuthorization:(id)authorization;
-(void)resizeBarButtonItem;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)setupTitleView:(id)view interfaceOrientation:(int)orientation;
-(void)setupNavigationBarWithInterfaceOrientation:(int)interfaceOrientation;
-(id)childViewControllerForStatusBarStyle;
-(int)preferredStatusBarStyle;
-(BOOL)isModal;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithGroupID:(id)groupID;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumSaveToolTipView : UIControl {
	UIImageView* _backgroundImageView;
	UILabel* _label;
	UIButton* _closeButton;
	id<LAAlbumSaveTooltipViewDelegate> _delegate;
}
@property(assign, nonatomic) id<LAAlbumSaveTooltipViewDelegate> delegate;
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIImageView* backgroundImageView;
-(void).cxx_destruct;
-(void)setHiddenIfAvailable:(BOOL)available;
-(void)remove:(id)remove;
-(void)didTapView:(id)view;
-(void)didTapButton:(id)button;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame text:(id)text delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface NLSegmentedControl : UISegmentedControl {
	BOOL _useCustomButtonWidths;
	BOOL _customized;
	NSMutableArray* _buttons;
	NSArray* _items;
}
@property(retain, nonatomic) NSArray* items;
@property(retain, nonatomic) NSMutableArray* buttons;
@property(assign, nonatomic) BOOL customized;
@property(assign, nonatomic) BOOL useCustomButtonWidths;
-(void).cxx_destruct;
-(BOOL)render;
-(void)applyStyleToButton:(id)button atIndex:(unsigned)index;
-(id)selectedRightTabImage;
-(id)rightTabImage;
-(id)selectedMidTabImage;
-(id)midTabImage;
-(id)selectedLeftTabImage;
-(id)leftTabImage;
-(id)initWithItems:(id)items;
-(void)layoutSubviews;
-(void)updateImagesForButton:(id)button atIndex:(unsigned)index;
-(void)configureButton:(id)button atIndex:(unsigned)index;
-(id)buttonSizes;
-(id)buttonForSegmentAtIndex:(unsigned)index;
-(void)addButtonsFromItems:(id)items;
-(void)buttonTapped:(id)tapped;
@end

__attribute__((visibility("hidden")))
@interface LineCallScheme : NSObject {
}
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)extractParametersFromSchemeUrl:(id)schemeUrl;
+(id)lineCallURL;
+(id)lineCallScheme;
@end

__attribute__((visibility("hidden")))
@interface NLUserRecallMetadata : NLTextMetadata {
	NSString* _MID;
	NSString* _userName;
}
@property(readonly, assign, nonatomic) NSString* userName;
@property(readonly, assign, nonatomic) NSString* MID;
+(id)userRecallRawString;
-(void).cxx_destruct;
-(int)displayTextLength;
-(id)rawString;
-(id)initWithMID:(id)mid andUserName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface NLChatGameToggleFlag : NSObject {
}
+(void)setEnabled:(BOOL)enabled;
+(BOOL)enabled;
@end

__attribute__((visibility("hidden")))
@interface MoreTabImageView : UIView {
	UIImageView* imageView_;
	ProfileImageView* profileImageView_;
	UIActivityIndicatorView* act_;
	LineFileDownload* currentDownload_;
	UIImageView* iconNew_;
	LineMoreItem* item_;
	unsigned type_;
	BOOL isNewIconEnabled;
}
@property(assign, nonatomic) BOOL isNewIconEnabled;
@property(readonly, assign, nonatomic) ProfileImageView* profileImageView;
-(void).cxx_destruct;
-(BOOL)render;
-(void)layoutSubviews;
-(void)applyThemeIconWithMoreItem:(id)moreItem;
-(BOOL)hasThemeIconWithMoreItem:(id)moreItem;
-(id)lineCallIconImage;
-(id)gamesIconImage;
-(id)lineAppIconImage;
-(id)themeShopImage;
-(id)musicIconImage;
-(id)noticeIconImage;
-(id)officalAccountsIconImage;
-(id)stickerShopIconImage;
-(id)settingIconImage;
-(id)timelineNewPostNotiIconImage;
-(id)timelineNewNotiIconImage;
-(id)timelineNewPostIconImage;
-(id)timelineIconImage;
-(id)addFriendsIconImage;
-(void)setItem:(id)item forType:(unsigned)type;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface RegistrationAccountNotYetViewController : NLViewController {
}
-(void)doneButtonTapped:(id)tapped;
-(void)viewDidLoad;
-(void)configureNavigationItem;
@end

__attribute__((visibility("hidden")))
@interface RegistrationRemindAccountViewController : NLViewController <EmailPasswordDelegate> {
	UIScrollView* bgScrollView;
	UIImageView* popupImage;
	UILabel* descriptionLabel;
	UIButton* skipButton;
}
-(void).cxx_destruct;
-(void)didReceiveKeyboardWillShowHideNotification:(id)didReceiveKeyboard;
-(void)naverInfo;
-(void)lastFieldDidEndEditing;
-(void)changeFocus:(int)focus in:(BOOL)anIn;
-(void)clickConfirm:(id)confirm password:(id)password;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)close;
-(void)configureNavigationItem;
@end

__attribute__((visibility("hidden")))
@interface NLTooltipView : UIControl {
	float _fixedSideMaxWidth;
	NSString* _text;
	UILabel* _textLabel;
	UIImageView* _leftCapImageView;
	UIImageView* _leftFlexibleBgImageView;
	UIImageView* _centerTailImageView;
	UIImageView* _rightFlexibleBgImageView;
	UIImageView* _rightCapImageView;
}
@property(retain, nonatomic) UIImageView* rightCapImageView;
@property(retain, nonatomic) UIImageView* rightFlexibleBgImageView;
@property(retain, nonatomic) UIImageView* centerTailImageView;
@property(retain, nonatomic) UIImageView* leftFlexibleBgImageView;
@property(retain, nonatomic) UIImageView* leftCapImageView;
@property(retain, nonatomic) UILabel* textLabel;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) float fixedSideMaxWidth;
-(void).cxx_destruct;
-(BOOL)render;
-(void)layoutSubviews;
-(void)setupSubviews;
-(id)initWithText:(id)text;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLColorLockedLabel : UILabel {
	BOOL isColorLocked;
}
@property(assign, nonatomic) BOOL isColorLocked;
-(void)setBackgroundColor:(id)color;
@end

__attribute__((visibility("hidden")))
@interface NotificationItem : NSObject {
	BOOL _isSummaryMessage;
	int _opType;
	NSString* _userMID;
	NSString* _chatMID;
	NSString* _name;
	NSString* _message;
	NSURL* _imageURL;
}
@property(assign, nonatomic) BOOL isSummaryMessage;
@property(retain, nonatomic) NSURL* imageURL;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* chatMID;
@property(retain, nonatomic) NSString* userMID;
@property(assign, nonatomic) int opType;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface NotificationBarView : UIView {
	NMAttributedLabel* msgLabel;
	UIImageView* lineIcon_;
	UIImageView* bgView_;
	NotificationItem* currentItem_;
}
+(void)removeItemsForMid:(id)mid;
+(id)nextItem;
+(void)addContentQueue:(id)queue;
+(void)onRemainTimer:(id)timer;
+(void)onTimer:(id)timer;
+(void)showWindow;
+(void)hideWindow;
+(CGRect)screenBoundsForCurrentOrientation;
+(id)notificationBarView;
+(void)setShowDuration:(double)duration;
+(void)setShowInterval:(double)interval;
+(id)showNotificationBarForUserMID:(id)userMID chatMID:(id)mid message:(id)message name:(id)name opType:(int)type;
+(id)getBaseView;
+(void)baseViewFrameForCurrentOrientation:(id)currentOrientation;
+(id)queue;
+(void)initialize;
-(void).cxx_destruct;
-(void)showStatusBar;
-(void)tappedNotificationBarView:(id)view;
-(void)boundRectAttributedString:(id)string width:(float)width result:(CGRect*)result;
-(id)getAttributedString:(id)string width:(float)width;
-(id)getMessageAttrs;
-(void)setLastStatus;
-(void)setDisplayStatus;
-(void)setInitialStatus;
-(void)startAnimationIfNeed;
-(void)drawCurrentItem;
-(void)setContent:(id)content;
-(void)didChangeStatusBarOrientation;
-(void)setFrame:(CGRect)frame;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ViewControllerForOrientationMaskAllButUpsideDown : NLViewController {
	unsigned _mask;
}
@property(assign, nonatomic) unsigned mask;
-(unsigned)supportedInterfaceOrientations;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LAPageControl : UIPageControl {
	UIImage* _activeDotImage;
	UIImage* _inactiveDotImage;
}
@property(retain, nonatomic) UIImage* inactiveDotImage;
@property(retain, nonatomic) UIImage* activeDotImage;
-(void).cxx_destruct;
-(void)setCurrentPage:(int)page;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallUsageHistoryViewController : NLCallSettingCommonTableSubViewController {
	UIButton* _moreButton;
	NSMutableArray* _useHistory;
	UILabel* _noDataLabel;
	long long _startIndex;
}
@property(retain, nonatomic) UILabel* noDataLabel;
@property(retain, nonatomic) NSMutableArray* useHistory;
@property(retain, nonatomic) UIButton* moreButton;
@property(assign, nonatomic) long long startIndex;
-(void).cxx_destruct;
-(void)moreButtonAction:(id)action;
-(void)setTableFooter;
-(void)setTableHeaderWithTitle:(id)title;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)reqeustPaidCallHistory;
-(void)initContents;
-(void)didReceiveMemoryWarning;
-(void)initSetting;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LineBadWordsManager : NSObject {
}
+(id)decryptionWithBase64body:(id)base64body keyData:(id)data;
+(BOOL)containsBadWords:(id)words;
+(id)filteredText:(id)text;
+(void)updateBadWordsIfNecessary;
+(void)updateBadWords:(id)words;
+(id)decryptBadWords:(id)words;
+(BOOL)isNecessary;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface LGImageFilterHelper : LGFilterHelper {
	char* originalImageData;
	char* thumbnailImageData;
	NSArray* _filterNames;
	NSArray* _filterIds;
	UIImage* _originalImage;
	UIImage* _thumbnailImage;
	NSDictionary* _filteredThumbnails;
	NSOperationQueue* _operationQueue;
	NSOperationQueue* _thumbnailOperationQueue;
}
@property(retain, nonatomic) NSOperationQueue* thumbnailOperationQueue;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(retain, nonatomic) NSDictionary* filteredThumbnails;
@property(retain, nonatomic) UIImage* thumbnailImage;
@property(retain, nonatomic) UIImage* originalImage;
@property(readonly, assign, nonatomic) NSArray* filterIds;
@property(readonly, assign, nonatomic) NSArray* filterNames;
-(void).cxx_destruct;
-(id)imageWithApplyFilterWithIndex:(int)index image:(id)image;
-(void)applyFilterWithIndex:(int)index image:(id)image completion:(id)completion;
-(id)applyFilterWithIndex:(int)index;
-(void)rotateThumbnails:(id)thumbnails imageOrientation:(int)orientation;
-(void)applyThumbnailsWithImage:(id)image completion:(id)completion;
-(id)applyThumbnailFilterWithIndex:(int)index;
-(id)thumbnailWithFilterIndex:(int)filterIndex;
-(id)thumbnailImageForFilterIndex:(int)filterIndex;
-(void)cancelAllFilterOperation;
-(void)dealloc;
-(id)init;
-(int)applyFilterWithFilterID:(int)filterID patternID:(int)anId sourceData:(char*)data result:(char*)result width:(int)width height:(int)height;
@end

__attribute__((visibility("hidden")))
@interface LineWebFileManager : NSObject {
}
+(id)fileContentForFileKey:(int)fileKey;
+(void)updateFileIfNecessaryForFileKey:(int)fileKey completion:(id)completion;
+(void)setFileIsBrokenForFileKey:(int)fileKey;
+(void)setDataExpirationDate:(id)date forFileKey:(int)fileKey;
+(id)revisionInfoUrlForFileKey:(int)fileKey;
+(id)fileUrlWithKey:(id)key forFileKey:(int)fileKey;
+(float)secondsFromNowToDownloadAgainForFileKey:(int)fileKey;
+(void)setIsDownloading:(BOOL)downloading forFileKey:(int)fileKey;
+(BOOL)isDownloadingForFileKey:(int)fileKey;
+(id)expirationDateForFileKey:(int)fileKey;
+(void)saveFileData:(id)data forFileKey:(int)fileKey;
+(float)maximumIntervalForFileKey:(int)fileKey;
+(BOOL)verifyFileContent:(id)content forFileKey:(int)fileKey;
+(BOOL)shouldDownloadByVersionInfo:(id)info forFileKey:(int)fileKey;
+(id)dictionaryKeyForFileKey:(int)fileKey;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface AccountsManagementViewController : NLTableViewController {
	BOOL isRegisteredLineAccount;
	NSMutableArray* _sections;
}
@property(retain, nonatomic) NSMutableArray* sections;
-(void).cxx_destruct;
-(void)actionChangeAuthoringDesktopSetting:(id)setting;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)logoutFromSNS:(id)sns;
-(void)loginToSNS:(id)sns;
-(id)makeLongFooterFor:(unsigned)aFor;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)sectionValueForSectionIndex:(int)sectionIndex;
-(void)configureSections;
-(void)reloadSettingInfo;
-(BOOL)migrationCodeEnabled;
-(BOOL)isAuthorizingDesktopEnabled;
-(BOOL)registeredPhone;
-(BOOL)registeredEmailAccount;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageOpQueueASIHTTP : NLObjectStorageOpQueue {
	ASINetworkQueue* _queue;
}
@property(readonly, assign, nonatomic) ASINetworkQueue* queue;
-(void).cxx_destruct;
-(BOOL)cancelOperationWithUploadProgressDelegate:(id)uploadProgressDelegate;
-(id)operationWithObjectID:(id)objectID;
-(void)enumerateOperationsUsingBlock:(id)block;
-(id)operations;
-(unsigned)operationCount;
-(void)cancelOperation:(id)operation;
-(void)scheduleOperation:(id)operation;
-(void)requestStarted:(id)started;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineSticonPackage : LineStickerPackage <SSZipArchiveDelegate, LineProductPackageForKeyboard> {
	NSDictionary* metaData;
	NSDictionary* zipData;
	BOOL isDownloadingMeta;
	BOOL isDownloadingPackage;
	BOOL isDownloadingTabOn;
	BOOL isDownloadingTabOff;
	BOOL _isReadyToUseCache;
	BOOL _hasTabImagesCache;
	LineFileDownload* _packageDownloader;
	id _completionBlockForPackage;
	NSDictionary* _sticonCodeByStickerId;
	BOOL _isDownloadingNewPackage;
	int _newVersion;
	LineShopProductSummary* _summary;
}
@property(assign, nonatomic) BOOL isDownloadingNewPackage;
@property(retain, nonatomic) LineShopProductSummary* summary;
@property(assign, nonatomic) int newVersion;
@property(readonly, assign, nonatomic) int metaVersion;
@property(readonly, assign, nonatomic) int PKG_CODE;
+(id)substoreForPackageId:(int)packageId version:(int)version;
+(void)initialize;
-(void).cxx_destruct;
-(void)processUnzippedSticonPackage;
-(void)zipArchiveDidUnzipArchiveAtPath:(id)zipArchive zipInfo:(unz_global_info_s)info unzippedPath:(id)path;
-(BOOL)hasMatchedScaleImage;
-(id)makeKeyboardOrder;
-(unsigned)keyboardActionStatus;
-(BOOL)isReadyToUse;
-(void)downloadSelectedTabImageCompletionBlock:(id)block;
-(void)downloadTabImageCompletionBlock:(id)block;
-(id)download;
-(BOOL)downloading;
-(BOOL)downloaded;
-(BOOL)isDownloaded;
-(id)keywordForCODE:(unsigned)code;
-(XXStruct_PILIWD)stickerInfo:(unsigned)info;
-(id)imageForSticonFromStickerID:(int)stickerID type:(unsigned)type;
-(id)imageForSticon:(unsigned)sticon type:(unsigned)type;
-(void)downloadTabImage:(BOOL)image completionBlock:(id)block;
-(void)downloadTabImages:(id)images;
-(long long)stickerPackageID;
-(BOOL)hasImages;
-(BOOL)hasTabImages;
-(void)finishDownload;
-(void)downloadPackage:(id)package;
-(void)downloadMeta:(id)meta;
-(void)makeMetaData:(id)data version:(int)version;
-(void)removeOlderMetadata:(int)metadata;
-(id)filePathForImages;
-(id)filePathForZip;
-(id)filePathForTab:(BOOL)tab;
-(id)filePathForMeta:(int)meta;
-(unsigned)actionStatus;
-(id)description;
-(void)loadMetadata;
-(id)debugQuickLookObject;
-(id)initWithFileURL:(id)fileURL inStore:(unsigned)store;
@end

__attribute__((visibility("hidden")))
@interface AddressBookSynchronizationSettingsViewController : NLTableViewController <UIAlertViewDelegate, CountryViewSelectDelegate> {
	UIButton* syncButton_;
	BOOL needSetAutoSyncEnabled;
}
@property(readonly, assign) UIButton* syncButton;
-(void).cxx_destruct;
-(void)selectCountry:(id)country;
-(void)synchronizeAddressBookContacts;
-(void)changePhoneNumberSearchability:(BOOL)searchability;
-(void)changeAutoSyncEnabled:(BOOL)enabled;
-(void)updateLastSynchronizedWithCell:(id)cell;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showPhoneRegistAlert;
-(void)addressBookDidSynchronize:(id)addressBook;
-(void)changedPhoneNumberSearchability:(id)searchability;
-(void)syncButtonPressed:(id)pressed;
-(void)changedAddressBookAutoSyncEnabled:(id)enabled;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallNonStandardController : NLCallBaseViewController {
	BOOL _animatingVideoControlsVisibility;
	BOOL _videoControlsHidden;
	UIView* _viewLoading;
	NSString* _networkStatusString;
	NSString* _connectingString;
	NSString* _callingString;
	NSString* _receivedVideoCallString;
	NSString* _receivedVoiceCallString;
	UIView* _viewCallStatusBar;
	UIButton* _buttonCallStatusBarControl;
	UIView* _viewCallStatusBarLabelsCentering;
	UILabel* _labelCallStatusBarTitle;
	UILabel* _labelCallStatusBarDuration;
	UIView* _viewVoiceCall;
	UIButton* _networkUnstableMessageButton;
	UIView* _viewCentering;
	UIView* _viewCallInfo;
	UIImageView* _imageViewThumbnail;
	UIImageView* _imageViewThumbnailShadowImage;
	UILabel* _labelName;
	UILabel* _labelCallDuration;
	UIButton* _buttonMinimize;
	UIView* _viewCallingButtons;
	UIButton* _buttonMute;
	UIButton* _buttonSpeaker;
	UIButton* _buttonCallEnd;
	UIButton* _buttonVideoCall;
	UIView* _viewIncomingButtons;
	UIButton* _buttonReject;
	UIButton* _buttonAccept;
	UIView* _viewVideoCall;
	UIView* _viewMainVideoContainer;
	UIView* _viewSubVideoContainer;
	UIImageView* _imageViewSubVideoCover;
	UIView* _viewSubVideoOff;
	AMPVideoRenderView* _viewLocalVideoRendering;
	AMPVideoRenderView* _viewRemoteVideoRendering;
	AMPVideoRenderView* _currentMainVideoRenderingView;
	AMPVideoRenderView* _currentSubVideoRenderingView;
	UIView* _viewVideoButtons;
	UIButton* _buttonVideoMute;
	UIButton* _buttonVideoEnd;
	UIButton* _buttonVideoCameraOff;
	UIView* _viewVideoCameraSwitchingButtonContainer;
	UIButton* _buttonVideoCameraSwitching;
	UIImageView* _imageViewVideoRotatableCameraSwitchingIcon;
	UIView* _viewVideoMinimizingButtonContainer;
	UIButton* _buttonVideoMinimizing;
	UIImageView* _imageViewVideoRotatableMinimizingIcon;
	UIView* _viewVideoEnding;
	UIView* _viewVideoEndingPopup;
	UIImageView* _imageViewVideoEndingPopupIcon;
	UILabel* _labelVideoEndingPopup;
	UIImageView* _imageViewVideoRotatableMuteIcon;
	UIImageView* _imageViewVideoRotatableEndIcon;
	UIImageView* _imageViewVideoRotatableCameraIcon;
	UIImageView* _imageViewVideoRotatableCameraOffIcon;
	UIView* _viewVideoCallingAccept;
	UIButton* _buttonVideoCallingMinimizing;
	UIButton* _buttonVideoCallingAcceptEnd;
	UIButton* _buttonVideoCallingAcceptVoice;
	UIButton* _buttonVideoCallingAcceptVideo;
	UILabel* _labelVideoCallingName;
	UILabel* _labelVideoCallingCall;
	UIView* _viewVideoCallingProfile;
	UIImageView* _imageViewVideoCallingBgImage;
	UIImageView* _imageViewVideoCallingProfileImage;
	UIView* _viewVideoNetworkStatus;
	UIView* _viewVideoNetworkStatusCentered;
	UIImageView* _imageViewVideoNetworkBGImage;
	UIImageView* _imageViewVideoNetworkStatusIcon;
	UILabel* _labelVideoNetworkStatus;
	UIView* _viewMessagePopup;
	UIImageView* _imageViewMessagePopupBackground;
	UILabel* _labelMessagePopup;
	UIImageView* _imageViewMessagePopupIcon;
	unsigned _videoViewLayout;
	UIView* _viewVideoUserGuide;
	UIImageView* _imageViewVideoUserGuideSubVideoEffect;
	UILabel* _labelVideoUserGuideSubVideoTooltip;
	UILabel* _labelVideoUserGuideMinimizingButtonTooltip;
	UIView* _viewVideoUserGuideTapScreenTooltipCentered;
	UIImageView* _imageViewVideoUserGuideTapScreenTooltipIcon;
	UILabel* _labelVideoUserGuideTapScreenTooltip;
	id _orientationObserver;
	NLCallCustomAlertView* _callAlertView;
	int _localVideoViewContentMode;
	int _remoteVideoViewContentMode;
}
@property(assign, nonatomic) int remoteVideoViewContentMode;
@property(assign, nonatomic) int localVideoViewContentMode;
@property(retain, nonatomic) NLCallCustomAlertView* callAlertView;
@property(retain, nonatomic) id orientationObserver;
@property(assign, nonatomic) BOOL videoControlsHidden;
@property(assign, nonatomic) BOOL animatingVideoControlsVisibility;
@property(assign, nonatomic) UILabel* labelVideoUserGuideTapScreenTooltip;
@property(assign, nonatomic) UIImageView* imageViewVideoUserGuideTapScreenTooltipIcon;
@property(assign, nonatomic) UIView* viewVideoUserGuideTapScreenTooltipCentered;
@property(assign, nonatomic) UILabel* labelVideoUserGuideMinimizingButtonTooltip;
@property(assign, nonatomic) UILabel* labelVideoUserGuideSubVideoTooltip;
@property(assign, nonatomic) UIImageView* imageViewVideoUserGuideSubVideoEffect;
@property(retain, nonatomic) UIView* viewVideoUserGuide;
@property(assign, nonatomic) unsigned videoViewLayout;
@property(assign, nonatomic) UIImageView* imageViewMessagePopupIcon;
@property(assign, nonatomic) UILabel* labelMessagePopup;
@property(assign, nonatomic) UIImageView* imageViewMessagePopupBackground;
@property(assign, nonatomic) UIView* viewMessagePopup;
@property(assign, nonatomic) UILabel* labelVideoNetworkStatus;
@property(assign, nonatomic) UIImageView* imageViewVideoNetworkStatusIcon;
@property(assign, nonatomic) UIImageView* imageViewVideoNetworkBGImage;
@property(assign, nonatomic) UIView* viewVideoNetworkStatusCentered;
@property(assign, nonatomic) UIView* viewVideoNetworkStatus;
@property(assign, nonatomic) UIImageView* imageViewVideoCallingProfileImage;
@property(assign, nonatomic) UIImageView* imageViewVideoCallingBgImage;
@property(assign, nonatomic) UIView* viewVideoCallingProfile;
@property(assign, nonatomic) UILabel* labelVideoCallingCall;
@property(assign, nonatomic) UILabel* labelVideoCallingName;
@property(assign, nonatomic) UIButton* buttonVideoCallingAcceptVideo;
@property(assign, nonatomic) UIButton* buttonVideoCallingAcceptVoice;
@property(assign, nonatomic) UIButton* buttonVideoCallingAcceptEnd;
@property(assign, nonatomic) UIButton* buttonVideoCallingMinimizing;
@property(retain, nonatomic) UIView* viewVideoCallingAccept;
@property(assign, nonatomic) UIImageView* imageViewVideoRotatableCameraOffIcon;
@property(assign, nonatomic) UIImageView* imageViewVideoRotatableCameraIcon;
@property(assign, nonatomic) UIImageView* imageViewVideoRotatableEndIcon;
@property(assign, nonatomic) UIImageView* imageViewVideoRotatableMuteIcon;
@property(assign, nonatomic) UILabel* labelVideoEndingPopup;
@property(assign, nonatomic) UIImageView* imageViewVideoEndingPopupIcon;
@property(assign, nonatomic) UIView* viewVideoEndingPopup;
@property(assign, nonatomic) UIView* viewVideoEnding;
@property(assign, nonatomic) UIImageView* imageViewVideoRotatableMinimizingIcon;
@property(assign, nonatomic) UIButton* buttonVideoMinimizing;
@property(assign, nonatomic) UIView* viewVideoMinimizingButtonContainer;
@property(assign, nonatomic) UIImageView* imageViewVideoRotatableCameraSwitchingIcon;
@property(assign, nonatomic) UIButton* buttonVideoCameraSwitching;
@property(assign, nonatomic) UIView* viewVideoCameraSwitchingButtonContainer;
@property(assign, nonatomic) UIButton* buttonVideoCameraOff;
@property(assign, nonatomic) UIButton* buttonVideoEnd;
@property(assign, nonatomic) UIButton* buttonVideoMute;
@property(assign, nonatomic) UIView* viewVideoButtons;
@property(retain, nonatomic) AMPVideoRenderView* currentSubVideoRenderingView;
@property(retain, nonatomic) AMPVideoRenderView* currentMainVideoRenderingView;
@property(assign, nonatomic) AMPVideoRenderView* viewRemoteVideoRendering;
@property(assign, nonatomic) AMPVideoRenderView* viewLocalVideoRendering;
@property(assign, nonatomic) UIView* viewSubVideoOff;
@property(assign, nonatomic) UIImageView* imageViewSubVideoCover;
@property(assign, nonatomic) UIView* viewSubVideoContainer;
@property(assign, nonatomic) UIView* viewMainVideoContainer;
@property(retain, nonatomic) UIView* viewVideoCall;
@property(assign, nonatomic) UIButton* buttonAccept;
@property(assign, nonatomic) UIButton* buttonReject;
@property(assign, nonatomic) UIView* viewIncomingButtons;
@property(assign, nonatomic) UIButton* buttonVideoCall;
@property(assign, nonatomic) UIButton* buttonCallEnd;
@property(assign, nonatomic) UIButton* buttonSpeaker;
@property(assign, nonatomic) UIButton* buttonMute;
@property(assign, nonatomic) UIView* viewCallingButtons;
@property(assign, nonatomic) UIButton* buttonMinimize;
@property(assign, nonatomic) UILabel* labelCallDuration;
@property(assign, nonatomic) UILabel* labelName;
@property(assign, nonatomic) UIImageView* imageViewThumbnailShadowImage;
@property(assign, nonatomic) UIImageView* imageViewThumbnail;
@property(assign, nonatomic) UIView* viewCallInfo;
@property(assign, nonatomic) UIView* viewCentering;
@property(assign, nonatomic) UIButton* networkUnstableMessageButton;
@property(retain, nonatomic) UIView* viewVoiceCall;
@property(assign, nonatomic) UILabel* labelCallStatusBarDuration;
@property(assign, nonatomic) UILabel* labelCallStatusBarTitle;
@property(assign, nonatomic) UIView* viewCallStatusBarLabelsCentering;
@property(assign, nonatomic) UIButton* buttonCallStatusBarControl;
@property(retain, nonatomic) UIView* viewCallStatusBar;
@property(retain, nonatomic) NSString* receivedVoiceCallString;
@property(retain, nonatomic) NSString* receivedVideoCallString;
@property(retain, nonatomic) NSString* callingString;
@property(retain, nonatomic) NSString* connectingString;
@property(retain, nonatomic) NSString* networkStatusString;
@property(assign, nonatomic) UIView* viewLoading;
-(void).cxx_destruct;
-(void)updateViewNetworkStatusSetHidden:(BOOL)hidden;
-(void)receivedResultCodeAMPCallEventTypeConnected;
-(void)receivedResultCodeAMPCallEventTypeOfferNewCall;
-(void)receivedResultCodeAMPCallEventTypeWaitAccept;
-(void)updateViewBySetupVideoCall:(BOOL)call;
-(void)updateViewBySetupVoiceCall:(BOOL)call withFriendId:(id)friendId;
-(void)updateCallDurationView:(BOOL)view;
-(void)updateAcceptCall;
-(void)updateCallViewErrorNotSupproted;
-(void)showCallStatusBarDutation:(double)dutation isInit:(BOOL)init;
-(void)dealloc;
-(void)processOnMaximizingCallView;
-(void)processOnMinimizingCallView;
-(void)processOnEnteringForeground;
-(void)storeContentModeOfRenderingViews;
-(void)processOnEnteringBackground;
-(void)hideVideoCallAcceptingPopup;
-(void)showVideoCallAcceptingPopup;
-(void)setGestureRecognizersEnabled:(BOOL)enabled;
-(void)setUserGuideHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)showVideoControls;
-(void)hideVideoControlsAutomaticallyWithAnimation;
-(void)hideVideoControlsAutomaticallyAfterDelay:(double)delay;
-(void)hideMesssgePopupAnimated:(BOOL)animated;
-(void)showMessagePopup:(int)popup animated:(BOOL)animated;
-(void)setVideoControlsHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)presentNetworkStatus:(int)status;
-(void)animateVideoCallingProfile;
-(void)resetViewFrame;
-(void)resetViews;
-(void)updateLayout;
-(void)updateMuteButton;
-(void)updateSpeakerButton;
-(void)finishBlinkAnimationOnView:(id)view;
-(void)beginBlinkAnimationOnView:(id)view;
-(void)showCallStatusBarDutation:(id)dutation;
-(void)showName:(id)name;
-(void)showVideoCallingView;
-(void)showAcceptingVideoView;
-(void)showVoiceCallingView;
-(void)showAcceptingVoiceView;
-(void)updateCallingUser:(id)user;
-(void)videoUserGuideCloseButtonTapped:(id)tapped;
-(void)videoCallEndButtonTapped:(id)tapped;
-(void)touchDownCameraOffButton:(id)button;
-(void)_toggleO:(id)o;
-(void)cameraSwitchingButtonTapped:(id)tapped;
-(void)touchDownVideoCallButton:(id)button;
-(void)touchDownSpeakerButton:(id)button;
-(void)_toggleS:(id)s;
-(void)touchDownMuteButton:(id)button;
-(void)_toggleM:(id)m;
-(void)callStatusBarControlTouched:(id)touched;
-(void)minimizeButtonPressed:(id)pressed;
-(void)acceptVoiceOnlyButtonPressed:(id)pressed;
-(void)acceptButtonPressed:(id)pressed;
-(void)rejectButtonPressed:(id)pressed;
-(void)callEndButtonPressed:(id)pressed;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(float)requiredRotationAngleForInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)changeUIForInterfaceOrientation:(int)interfaceOrientation;
-(int)interfaceOrientationFromCurrentDeviceOrientation;
-(BOOL)shouldChangeOrientation;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)configureContentModeOfRenderingViews;
-(void)resetViewsOnVideoCall;
-(void)resetViewsOnVoiceCall;
-(void)updateCallViewModes:(unsigned)modes;
-(void)exchangeMainAndSubVideoView;
-(void)recognizePanGestureOnSubVideoView:(id)view;
-(void)recognizeSingleTapGestureOnSubVideoView:(id)view;
-(void)markContentModeOfRenderingView:(id)renderingView;
-(void)recognizePinchGestureOnMainVideoView:(id)view;
-(void)recognizeDoubleTapGestureOnMainVideoView:(id)view;
-(void)toggleVideoControlsVisibility;
-(void)recognizeSingleTapGestureOnMainVideoView:(id)view;
-(void)prepareUserGuideView;
-(void)prepareLocalizedStrings;
-(void)initSubviews;
-(void)initContents;
-(void)initSetting;
-(void)initViewController;
-(void)viewDidLoad;
-(void)layoutVideoUserGuideTapScreenTooltipCenteredView:(id)view;
-(void)layoutVideoUserGuideMinimizingButtonTooltipLabel:(id)label;
-(void)layoutVideoUserGuideSubVideoTooltipLabel:(id)label;
-(void)layoutVideoNetworkStatusView:(id)view;
-(void)layoutRemoteVideoRenderingView:(id)view;
-(void)layoutCaptureVideoRenderView:(id)view;
-(void)layoutSubVideoContainerView:(id)view;
-(void)layoutVideoCallEndingView:(id)view;
-(void)layoutMinimizeButton:(id)button;
-(void)layoutNetworkUnstableMessage:(id)message;
-(void)layoutCenteringView:(id)view;
-(void)layoutIncomingView:(id)view;
-(void)layoutCallingView:(id)view;
-(void)layoutCallDurationLabel;
-(void)layoutNameLabel;
-(void)layoutMessagePopupView;
-(void)layoutCallStatusBar;
-(void)layoutCallInfoView;
-(void)resetSubVideoContainerViewPosition;
-(void)layoutVideoCallButtons;
-(void)layoutVideoCallingView;
-(void)layoutVideoProfileView;
-(void)layoutAcceptingVideoButtons;
-(void)layoutAcceptingVideoView;
-(void)layoutVoiceCallingView;
-(void)layoutAccpetingVoiceView;
-(void)layoutSubviews;
-(void)configureVideoUserGuideTapScreenTooltipLabel:(id)label;
-(void)configureVideoUserGuideMinimizingButtonTooltipLabel:(id)label;
-(void)configureVideoUserGuideSubVideoTooltipLabel:(id)label;
-(void)configureVideoUserGuideView:(id)view;
-(void)_configureEachVideoUserGuideLabel:(id)label;
-(void)configureMessagePopupLabel:(id)label;
-(void)configureMessagePopupBackgroundImageView:(id)view;
-(void)configureSubVideoContainerView:(id)view;
-(void)configureMainVideoContainerView:(id)view;
-(void)configureVideoNetworkBGImageView:(id)view;
-(void)configureVideoNetworkStatusCenteredView:(id)view;
-(void)configureVideoNetworkStatusLabel:(id)label;
-(void)_configureBackgroundImagesOfButton:(id)button;
-(void)configureVideoCallMinimizingButton:(id)button;
-(void)configureCameraSwitchingButton:(id)button;
-(void)configureVideoCameraOffButton:(id)button;
-(void)configureVideoEndButton:(id)button;
-(void)configureVideoMuteButton:(id)button;
-(void)configureVideoCallEndingInfoLabel:(id)label;
-(void)configureInconmingButtonsView:(id)view;
-(void)configureRemoteVideoRenderingView:(id)view;
-(void)configureLocalVideoRenderingView:(id)view;
-(void)configureLoadingView:(id)view;
-(void)configureCallStatusBarDurationLabel:(id)label;
-(void)configureCallStatusBarTitleLabel:(id)label;
-(void)configureCallStatusBarLabelsCenteringView:(id)view;
-(void)configureCallStatusBarControl:(id)control;
-(void)configureMinimizeButton:(id)button;
-(void)configureAcceptButton:(id)button;
-(void)configureRejectButton:(id)button;
-(void)configureCallEndButton:(id)button;
-(void)configureVideoCallButton:(id)button;
-(void)configureSpeakerButton:(id)button;
-(void)configureMuteButton:(id)button;
-(void)_configureEachCallButton:(id)button;
-(void)configureCallDurationLabel:(id)label;
-(void)configureNameLabel:(id)label;
-(void)configureThumbnailShadowImageView:(id)view;
-(void)configureThumbnailImageView:(id)view;
-(void)configureCenteringView:(id)view;
-(void)configureNetworkUnstableMessageButton:(id)button;
-(void)configureVideoCallingCallLabel:(id)label;
-(void)configureVideoCallingNameLabel:(id)label;
-(void)configureVideoCallingProfileImageView:(id)view;
-(void)configureVideoCallingBgImageView:(id)view;
-(void)configureVideoCallingAcceptVoiceButton:(id)button;
-(void)configureVideoCallingAcceptVideoButton:(id)button;
-(void)configureVideoCallingAcceptEndButton:(id)button;
-(void)configureVideoCallingAcceptEndOnlyButton:(id)button;
-(void)configureSubviews;
@end

__attribute__((visibility("hidden")))
@interface SNSUsersSynchronizationViewController : NLTableViewController {
}
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)configureCell:(id)cell atIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)actonAfterSyncCompletedWithResult:(id)result error:(id)error forProvider:(id)provider;
-(void)reloadSettingInfo;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBLikeListManager : MBDataManager {
	MBActivity* mActivity;
	int mLikeCount;
	id<MBLikeListManagerDelegate> mDelegate;
}
@property(readonly, assign, nonatomic) int likeCount;
-(void).cxx_destruct;
-(void)fetchMyLikeTypeForActivity:(id)activity likeLayerType:(int)type;
-(id)handleFetch:(id)fetch;
-(id)handleUpdate:(id)update;
-(id)fetchRequestWithFetchCount:(int)fetchCount;
-(id)updateRequest;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(id)initWithActivity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface TalkSNSObject : _TalkSNSObject {
}
+(id)snsFriendWithMid:(id)mid inContext:(id)context;
+(id)snsFriendWithSNSType:(int)snstype snsUserId:(id)anId inContext:(id)context;
+(id)snsFriendsWithSNSType:(int)snstype inContext:(id)context;
+(id)snsFriendsAndLineFriendsWithSNSType:(int)snstype inContext:(id)context;
+(id)snsFriendsWithSNSType:(int)snstype snsIds:(id)ids inContext:(id)context;
+(id)insertSNSObjectWithSNSFriend:(id)snsfriend inContext:(id)context;
+(int)snsIDTypeFromRegistrationType:(int)registrationType;
+(id)predicateForSNSProviderIDType:(int)snsproviderIDType withAndPrediciate:(id)andPrediciate;
+(id)predicateForSNSProviderIDType:(int)snsproviderIDType;
-(BOOL)isLineUser;
@end

__attribute__((visibility("hidden")))
@interface NLMessageImageMapView : NLMessageBubbleView {
	ImageMapView* _view;
	UIView* _viewCenterView;
}
@property(readonly, retain, nonatomic) UIView* viewCenterView;
@property(readonly, retain, nonatomic) ImageMapView* view;
-(void).cxx_destruct;
-(void)prepareInitialSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineSNSAuthManager : NSObject {
	NSMutableDictionary* snsDict;
	id currentSns;
}
@property(retain, nonatomic) id currentSns;
@property(retain, nonatomic) NSMutableDictionary* snsDict;
+(void)setLastSyncTimeForSNSType:(int)snstype;
+(BOOL)has360Account;
+(BOOL)is360;
+(BOOL)is360Enabled;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)reLogin:(int)login completionBlock:(id)block;
-(void)logout:(int)logout completionBlock:(id)block;
-(void)login:(int)login completionBlock:(id)block;
-(void)postInvitationMessageToSNSUser:(id)snsuser completionBlock:(id)block;
-(void)snsProfile:(int)profile snsAccessToken:(id)token completionBlock:(id)block;
-(void)snsProfile:(int)profile completionBlock:(id)block;
-(void)getAllMySNSFriends:(int)friends accessToken:(id)token fetchCount:(int)count withMutableArray:(id)mutableArray completionBlock:(id)block errorBlock:(id)block6;
-(void)syncSNSContact:(int)contact withSyncType:(int)syncType completionBlock:(id)block;
-(void)addDispatchSNSGroup:(id)group;
-(unsigned)numberOfIntegratedSNS;
-(id)snsProviderForType:(int)type;
-(id)supportedProvidersWithRenrenIfConnected;
-(id)supportedProviders;
-(id)getAccessToken:(int)token;
-(BOOL)isLoggedIn:(int)anIn;
-(id)userID:(int)anId;
-(BOOL)hasAccount:(int)account;
-(id)snsWithType:(int)type;
-(void)handleOpenURL:(id)url;
-(BOOL)canHandleAuthURL:(id)url;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface Renren : NSObject <UIWebViewDelegate> {
	NSString* mAppId;
	NSString* mAppKey;
	NSString* mSecret;
	NSString* mRedirectUrl;
	NSString* mAccessToken;
	NSDate* mExpirationDate;
	NSString* mSessionKey;
	LoginDialog* mDialog;
	id<RenrenDelegate> mDelegate;
}
@property(assign, nonatomic) id delegate;
@property(copy, nonatomic) NSString* sessionKey;
@property(copy, nonatomic) NSDate* expirationDate;
@property(copy, nonatomic) NSString* accessToken;
@property(copy, nonatomic) NSString* redirectUrl;
@property(copy, nonatomic) NSString* secret;
@property(copy, nonatomic) NSString* appKey;
@property(copy, nonatomic) NSString* appId;
-(void)didCancelAuthorization;
-(void)dealloc;
-(id)init;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webViewDidStartLoad:(id)webView;
-(id)parseURLParams:(id)params;
-(void)dialogDidFailedWithError:(id)dialog;
-(void)dialogDidSucceed:(id)dialog;
-(id)getSessionKeyByToken:(id)token;
-(id)getSecretKeyByToken:(id)token;
-(id)getRequestSessionKeyWithParams:(id)params;
-(id)serializeURL:(id)url params:(id)params;
-(id)serializeURL:(id)url params:(id)params httpMethod:(id)method;
-(id)getDateFromString:(id)string;
-(id)getValueStringFromUrl:(id)url forParam:(id)param;
-(void)logout:(id)logout;
-(void)authorizeWithPermissions:(id)permissions withDelegate:(id)delegate;
-(id)generateURL:(id)url params:(id)params;
-(BOOL)isSessionValid;
@end

__attribute__((visibility("hidden")))
@interface LoginDialog : UIView {
	UIWebView* mWebview;
	UIButton* mCloseButton;
	UIActivityIndicatorView* mIndicator;
	NSURL* mLoadingUrl;
	NSMutableURLRequest* mRequest;
	id<UIWebViewDelegate> mDelegate;
}
-(void)didFinishLoad;
-(void)didStartLoad;
-(void)show;
-(void)bounce1AnimationStopped;
-(void)bounce2AnimationStopped;
-(CGAffineTransform)transformForOrientation;
-(void)loadWithRequest:(id)request;
-(void)load;
-(void)dealloc;
-(id)initWithURLRequest:(id)urlrequest withDelegate:(id)delegate;
-(id)initWithURLRequest:(id)urlrequest withDelegate:(id)delegate frame:(CGRect)frame;
-(id)initWithUrl:(id)url withDelegate:(id)delegate;
-(id)initWithUrl:(id)url withDelegate:(id)delegate frame:(CGRect)frame;
-(void)initViews;
-(void)cancel;
-(void)dismiss;
-(void)postDismissCleanup;
@end

__attribute__((visibility("hidden")))
@interface MBAPIHelper : NSObject {
}
+(void)hasNewPostWithMID:(id)mid block:(id)block;
+(id)getUserPopupWithMID:(id)mid;
+(id)getCachedUserPopupWithMID:(id)mid;
+(void)saveStickerWithTextAlertConfig;
+(BOOL)stickerWithTextAlertConfig;
+(void)setImageConfig:(id)config;
+(void)saveListMovieAutoPlayNoti;
+(BOOL)listMovieAutoPlayNoti;
+(void)saveListMovieAutoPlayConfig:(BOOL)config;
+(BOOL)listMovieAutoPlayConfig;
+(id)listSnapMovieConfig;
+(id)listMovieConfig;
+(id)listPhotoMultiConfig;
+(id)listPhotoConfig;
+(float)uploadImageQuality;
+(int)uploadImageSize;
+(BOOL)isPhotoSizeSmall;
+(void)setIsPhotoSizeSmallInPage;
+(BOOL)isPhotoSizeSmallInPage;
+(id)currentVisibleViewController;
+(void)requestAutoOpen;
+(void)deleteFriendWithMID:(id)mid;
+(void)refreshProfileImageForMID:(id)mid;
+(void)setNickname:(id)nickname forMID:(id)mid;
+(void)fetchMyHomeCoverImage:(id)image completion:(id)completion;
+(void)updateCoverImageWithObjectID:(id)objectID errorBlock:(id)block;
+(id)updateCoverImageOptions;
+(void)sharePostThmbnailWithOid:(id)oid type:(int)type withResultBlock:(id)resultBlock;
+(id)obsInfoWithMediaOid:(id)mediaOid;
+(void)sharePostToTalkRoomWithInfo:(id)info completionBlock:(id)block;
+(void)createPostWithInfo:(id)info sourceType:(id)type errorBlock:(id)block;
+(id)escapedString:(id)string;
+(void)needSyncMyHomeGroup;
+(void)syncMyHomeGroup;
+(id)createPostOptions;
+(void)updateMyHomeCache;
+(id)networkService;
+(void)setNetworkService:(id)service;
+(id)lineSocialGraphManager;
+(void)setLineSocialGraphManager:(id)manager;
+(id)lineStickerDataSource;
+(void)setLineStickerDataSource:(id)source;
+(id)lineDelegate;
+(void)setLineDelegate:(id)delegate;
+(id)lineUIProvider;
+(void)setLineUIProvider:(id)provider;
+(id)lineDataSource;
+(void)setLineDataSource:(id)source;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface NLCallAddressDetailViewController : NLCallMenuCommonViewController <UITableViewDataSource, UITableViewDelegate> {
	BOOL _isDirectProfileMode;
	UIView* _viewNaviTitle;
	UILabel* _labelTitle;
	UILabel* _labelForTestCallMsg;
	UIView* _viewContents;
	UITableView* _tableView;
	UIView* _tableHeaderView;
	UIImageView* _imageViewProfile;
	UILabel* _labelName;
	UIButton* _buttonBack;
	UIButton* _buttonClose;
	NLCallUserInfo* _currentUserInfo;
	NSArray* _phoneNumberArray;
	NSMutableDictionary* _searchedResult;
	NSString* _currentRegionCode;
	NSArray* _actionSheetTitles;
	unsigned _currentMemberType;
}
@property(assign, nonatomic) BOOL isDirectProfileMode;
@property(assign, nonatomic) unsigned currentMemberType;
@property(retain, nonatomic) NSArray* actionSheetTitles;
@property(retain, nonatomic) NSString* currentRegionCode;
@property(retain, nonatomic) NSMutableDictionary* searchedResult;
@property(retain, nonatomic) NSArray* phoneNumberArray;
@property(retain, nonatomic) NLCallUserInfo* currentUserInfo;
@property(assign, nonatomic) UIButton* buttonClose;
@property(assign, nonatomic) UIButton* buttonBack;
@property(assign, nonatomic) UILabel* labelName;
@property(assign, nonatomic) UIImageView* imageViewProfile;
@property(retain, nonatomic) UIView* tableHeaderView;
@property(assign, nonatomic) UITableView* tableView;
@property(assign, nonatomic) UIView* viewContents;
@property(assign, nonatomic) UILabel* labelForTestCallMsg;
@property(assign, nonatomic) UILabel* labelTitle;
@property(assign, nonatomic) UIView* viewNaviTitle;
-(void).cxx_destruct;
-(void)actionCloseLineCall:(id)call;
-(void)calling:(id)calling;
-(void)actionBack:(id)back;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)initSubviews;
-(void)initRegionInfo;
-(void)initContents;
-(void)initSetting;
-(void)initViewController;
-(void)setDirectProfileMode:(BOOL)mode;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SNSService : NSObject {
}
+(void)removeSnsIdWithSnsIdType:(int)snsIdType completionBlock:(id)block errorBlock:(id)block3;
+(void)addSnsIdWithSnsIdType:(int)snsIdType accessToken:(id)token completionBlock:(id)block errorBlock:(id)block4;
+(void)syncContactBySnsIdsWithModifications:(id)modifications completionBlock:(id)block;
+(void)postSnsInvitationMessageToSnsUserId:(id)snsUserId withSnsIdType:(int)snsIdType snsAccessToken:(id)token completionBlock:(id)block;
+(void)checkSnsIdAndUpdateAccessTokenWithSnsType:(int)snsType completionBlock:(id)block;
+(void)getSnsFriendsWithSnsIdType:(int)snsIdType snsAccessToken:(id)token startIdx:(int)idx limit:(int)limit completionBlock:(id)block;
+(void)getSnsProfileWithSnsIdType:(int)snsIdType snsAccessToken:(id)token completionBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface SNSAuthFacebook : NSObject {
	FBSession* _fbsession;
}
-(void).cxx_destruct;
-(BOOL)isExpired;
-(void)handleAuthURL:(id)url;
-(BOOL)canHandleAuthURL:(id)url;
-(void)cancelAuthorizeWithCompletionBlock:(id)completionBlock;
-(void)authorizeWithCompletionBlock:(id)completionBlock;
-(id)getAccessToken;
-(BOOL)isLoggedin;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallHistoryViewController : NLCallMenuCommonViewController <UITableViewDataSource, UITableViewDelegate> {
	int loadCount;
	dispatch_queue_s* loadQueue;
	UITableView* _tableView;
	UIView* _emptyView;
	NSMutableArray* _mLocalHistoryArray;
	NSString* _deviceUserPhoneNumber;
}
@property(retain, nonatomic) NSString* deviceUserPhoneNumber;
@property(retain, nonatomic) NSMutableArray* mLocalHistoryArray;
@property(assign, nonatomic) UIView* emptyView;
@property(assign, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)calling:(id)calling;
-(void)showProfilePopup;
-(void)addButtonEvent:(id)event;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)deleteRowsAtIndexPaths:(id)indexPaths withRowAnimation:(int)rowAnimation;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)refreshBodyViews;
-(void)setCellsBackgroundImageWithCell:(id)cell atIndexPath:(id)indexPath;
-(void)initSubviews;
-(void)deleteLocalHistoryData:(id)data;
-(void)refreshHistoryList;
-(void)initSetting;
-(void)initViewController;
-(void)viewWillDisappear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LGEndMenuBarView : UIView {
	BOOL _isMultipleSelection;
	LGBaseViewController* _delegate;
	UIView* _bgView;
	UIButton* _editButton;
	UIButton* _rotateButton;
	UIButton* _infoButton;
	LGBadgeButton* _sendToLineAlbumButton;
	LGBadgeButton* _selectButton;
}
@property(retain, nonatomic) LGBadgeButton* selectButton;
@property(retain, nonatomic) LGBadgeButton* sendToLineAlbumButton;
@property(retain, nonatomic) UIButton* infoButton;
@property(retain, nonatomic) UIButton* rotateButton;
@property(retain, nonatomic) UIButton* editButton;
@property(retain, nonatomic) UIView* bgView;
@property(assign, nonatomic) __weak LGBaseViewController* delegate;
@property(assign, nonatomic) BOOL isMultipleSelection;
-(void).cxx_destruct;
-(id)bundleName;
-(void)checkOnlyCanBeSavedToLineAlbum:(unsigned)lineAlbum selectedCount:(unsigned)count;
-(void)setEditButtonPressed:(BOOL)pressed;
-(void)setModeOfEditButton:(int)editButton edited:(BOOL)edited;
-(void)updateForCurrentLanuage;
-(void)setCheckedBadgeCount:(unsigned)count tableView:(id)view animated:(BOOL)animated;
-(void)setupSendToLineAlbumButton;
-(void)setupSelectButton;
-(void)setupInfoButton;
-(void)setupEditButton;
-(void)setupBackground;
-(id)initWithFrame:(CGRect)frame isMultipleSelection:(BOOL)selection delegate:(id)delegate;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface MBPostSingleImageView : MBPostImageView {
	UIView* mParentView;
	MBPhoto* mPhoto;
	MBURLImageButton* mImageButton;
	BOOL mCornerRadius;
}
+(UIEdgeInsets)marginWithType:(int)type activity:(id)activity;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
+(id)postImageViewWithType:(int)type;
-(void).cxx_destruct;
-(void)setImageRadius;
-(id)imageWithIndex:(int)index;
-(void)setVisiblePhotoIndex:(int)index;
-(UIEdgeInsets)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)movieSize;
-(id)movieURL;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(BOOL)existImage;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame type:(int)type;
@end

__attribute__((visibility("hidden")))
@interface SNSAuthRenren : NSObject <RenrenDelegate> {
	Renren* mRenren;
	id loginCallback;
	id logoutCallback;
}
@property(copy, nonatomic) id logoutCallback;
@property(copy, nonatomic) id loginCallback;
-(void).cxx_destruct;
-(void)renrenDidLogout:(id)renren;
-(void)renrenDidloginFail:(id)fail withError:(id)error;
-(void)renrenDidLogin:(id)renren;
-(BOOL)isExpired;
-(void)handleAuthURL:(id)url;
-(BOOL)canHandleAuthURL:(id)url;
-(void)cancelAuthorizeWithCompletionBlock:(id)completionBlock;
-(void)authorizeWithCompletionBlock:(id)completionBlock;
-(id)getAccessToken;
-(BOOL)isLoggedin;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface SNSAuthWeiBo : NSObject <SinaWeiboDelegate, SinaWeiboRequestDelegate> {
	SinaWeibo* weibo;
	id loginCallback;
	id logoutCallback;
}
@property(copy, nonatomic) id logoutCallback;
@property(copy, nonatomic) id loginCallback;
-(void).cxx_destruct;
-(void)sinaweibo:(id)sinaweibo accessTokenInvalidOrExpired:(id)expired;
-(void)sinaweibo:(id)sinaweibo logInDidFailWithError:(id)logIn;
-(void)sinaweiboLogInDidCancel:(id)sinaweiboLogIn;
-(void)sinaweiboDidLogOut:(id)sinaweibo;
-(void)sinaweiboDidLogIn:(id)sinaweibo;
-(void)handleAuthURL:(id)url;
-(BOOL)canHandleAuthURL:(id)url;
-(void)cancelAuthorizeWithCompletionBlock:(id)completionBlock;
-(void)authorizeWithCompletionBlock:(id)completionBlock;
-(id)getAccessToken;
-(BOOL)isLoggedin;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineSNSProvider : NSObject {
	int _idType;
	NSString* _name;
	UIImage* _ciImage;
	UIImage* _smallCIImage;
}
@property(retain, nonatomic) UIImage* smallCIImage;
@property(retain, nonatomic) UIImage* ciImage;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) int idType;
+(void)resetLastSyncTimeWithProvider:(id)provider;
+(void)setAllowsToSyncFriends:(BOOL)syncFriends provider:(id)provider;
+(BOOL)allowsToSyncFriendsWithProvider:(id)provider;
+(id)providerForIDType:(int)idtype name:(id)name ciImage:(id)image smallCIImnage:(id)imnage;
-(void).cxx_destruct;
-(void)postInvitationMessageToSNSUser:(id)snsuser;
-(void)separateWithCompletionBlock:(id)completionBlock;
-(void)integrateWithCompletionBlock:(id)completionBlock;
-(void)syncFriendsListUsingCompletionBlock:(id)block;
-(BOOL)isSocialGraphAvaiable;
-(id)synchronizedTime;
-(BOOL)isLoggedIn;
-(id)accessToken;
-(id)userID;
-(BOOL)hasAccount;
-(BOOL)isLineAccount;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageFileDownloadOperation : NLObjectStorageOperation {
}
-(void)addCommonHeaders;
-(void)buildRequest;
-(void)preprocessOnFailed:(id)failed;
@end

__attribute__((visibility("hidden")))
@interface LineTalkConstants : NSObject {
}
+(void)initialize;
@end

__attribute__((visibility("hidden"),objc_exception))
@interface LineTalkException : NSException {
	int __code;
	NSString* __reason;
	NSDictionary* __parameterMap;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSDictionary* parameterMap;
@property(retain, nonatomic) NSString* reason;
@property(assign, nonatomic) int code;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineLocation : NSObject {
	NSString* __title;
	NSString* __address;
	double __latitude;
	double __longitude;
	NSString* __phone;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSString* phone;
@property(assign, nonatomic) double longitude;
@property(assign, nonatomic) double latitude;
@property(retain, nonatomic) NSString* address;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(id)mapItem;
-(id)initWithMapItem:(id)mapItem;
-(id)initWithPlacemark:(id)placemark;
-(id)initWithCoordinate:(XXStruct_zYrK5D)coordinate;
@end

__attribute__((visibility("hidden")))
@interface LineMessage : NSObject {
	NSString* __from;
	NSString* __to;
	int __toType;
	NSString* __ID;
	long long __createdTime;
	long long __deliveredTime;
	NSString* __text;
	LineLocation* __location;
	BOOL __hasContent;
	int __contentType;
	NSDictionary* __contentMetadata;
	NSData* __contentPreview;
	NSString* __sessionId;
	NSArray* __chunks;
	struct {
		unsigned toType : 1;
		unsigned createdTime : 1;
		unsigned deliveredTime : 1;
		unsigned hasContent : 1;
		unsigned contentType : 1;
	} __isSet;
}
@property(retain, nonatomic) NSArray* chunks;
@property(retain, nonatomic) NSString* sessionId;
@property(retain, nonatomic) NSData* contentPreview;
@property(retain, nonatomic) NSDictionary* contentMetadata;
@property(assign, nonatomic) int contentType;
@property(assign, nonatomic) BOOL hasContent;
@property(retain, nonatomic) LineLocation* location;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) long long deliveredTime;
@property(assign, nonatomic) long long createdTime;
@property(retain, nonatomic) NSString* ID;
@property(assign, nonatomic) int toType;
@property(retain, nonatomic) NSString* to;
@property(retain, nonatomic) NSString* from;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineTMessageBox : NSObject {
	NSString* __ID;
	NSString* __channelId;
	long long __lastSeq;
	long long __unreadCount;
	long long __lastModifiedTime;
	int __status;
	int __midType;
	NSArray* __lastMessages;
	struct {
		unsigned toType : 1;
		unsigned createdTime : 1;
		unsigned deliveredTime : 1;
		unsigned hasContent : 1;
		unsigned contentType : 1;
	} __isSet;
}
@property(retain, nonatomic) NSArray* lastMessages;
@property(assign, nonatomic) int midType;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) long long lastModifiedTime;
@property(assign, nonatomic) long long unreadCount;
@property(assign, nonatomic) long long lastSeq;
@property(retain, nonatomic) NSString* channelId;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineOperation : NSObject {
	long long __revision;
	long long __createdTime;
	int __type;
	int __reqSeq;
	NSString* __checksum;
	int __status;
	NSString* __param1;
	NSString* __param2;
	NSString* __param3;
	LineMessage* __message;
	struct {
		unsigned toType : 1;
		unsigned createdTime : 1;
		unsigned deliveredTime : 1;
		unsigned hasContent : 1;
		unsigned contentType : 1;
	} __isSet;
}
@property(retain, nonatomic) LineMessage* message;
@property(retain, nonatomic) NSString* param3;
@property(retain, nonatomic) NSString* param2;
@property(retain, nonatomic) NSString* param1;
@property(assign, nonatomic) int status;
@property(retain, nonatomic) NSString* checksum;
@property(assign, nonatomic) int reqSeq;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) long long createdTime;
@property(assign, nonatomic) long long revision;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineVerificationSessionData : NSObject {
	NSString* __sessionId;
	int __method;
	NSString* __callback;
	NSString* __normalizedPhone;
	NSString* __countryCode;
	NSString* __nationalSignificantNumber;
	NSArray* __availableVerificationMethods;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSArray* availableVerificationMethods;
@property(retain, nonatomic) NSString* nationalSignificantNumber;
@property(retain, nonatomic) NSString* countryCode;
@property(retain, nonatomic) NSString* normalizedPhone;
@property(retain, nonatomic) NSString* callback;
@property(assign, nonatomic) int method;
@property(retain, nonatomic) NSString* sessionId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineDeviceInfo : NSObject {
	int __applicationType;
	NSString* __deviceName;
	NSString* __systemName;
	NSString* __systemVersion;
	NSString* __model;
	int __carrierCode;
	NSString* __carrierName;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSString* carrierName;
@property(assign, nonatomic) int carrierCode;
@property(retain, nonatomic) NSString* model;
@property(retain, nonatomic) NSString* systemVersion;
@property(retain, nonatomic) NSString* systemName;
@property(retain, nonatomic) NSString* deviceName;
@property(assign, nonatomic) int applicationType;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineProfile : NSObject {
	NSString* __mid;
	NSString* __userid;
	NSString* __regionCode;
	NSString* __phone;
	NSString* __email;
	NSString* __displayName;
	NSString* __phoneticName;
	NSString* __pictureStatus;
	NSString* __thumbnailUrl;
	NSString* __statusMessage;
	BOOL __allowSearchByUserid;
	BOOL __allowSearchByEmail;
	NSString* __picturePath;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSString* picturePath;
@property(assign, nonatomic, getter=isAllowSearchByEmail) BOOL allowSearchByEmail;
@property(assign, nonatomic, getter=isAllowSearchByUserid) BOOL allowSearchByUserid;
@property(retain, nonatomic) NSString* statusMessage;
@property(retain, nonatomic) NSString* thumbnailUrl;
@property(retain, nonatomic) NSString* pictureStatus;
@property(retain, nonatomic) NSString* phoneticName;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* email;
@property(retain, nonatomic) NSString* phone;
@property(retain, nonatomic) NSString* regionCode;
@property(retain, nonatomic) NSString* userid;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSettings : NSObject <NSCoding> {
	BOOL __notificationEnable;
	long long __notificationMuteExpiration;
	BOOL __notificationNewMessage;
	BOOL __notificationGroupInvitation;
	BOOL __notificationShowMessage;
	BOOL __notificationIncomingCall;
	NSString* __notificationSoundMessage;
	NSString* __notificationSoundGroup;
	BOOL __notificationDisabledWithSub;
	BOOL __privacySyncContacts;
	BOOL __privacySearchByPhoneNumber;
	BOOL __privacySearchByUserid;
	BOOL __privacySearchByEmail;
	BOOL __privacyAllowSecondaryDeviceLogin;
	BOOL __privacyProfileImagePostToMyhome;
	BOOL __privacyReceiveMessagesFromNotFriend;
	BOOL __privacyAgreeUseLineCoinToPaidCall;
	BOOL __privacyAgreeUsePaidCall;
	NSString* __contactMyTicket;
	int __identityProvider;
	NSString* __identityIdentifier;
	NSDictionary* __snsAccounts;
	BOOL __phoneRegistration;
	int __emailConfirmationStatus;
	int __accountMigrationPincodeType;
	NSString* __preferenceLocale;
	NSDictionary* __customModes;
	struct {
		unsigned notificationEnable : 1;
		unsigned notificationMuteExpiration : 1;
		unsigned notificationNewMessage : 1;
		unsigned notificationGroupInvitation : 1;
		unsigned notificationShowMessage : 1;
		unsigned notificationIncomingCall : 1;
		unsigned notificationDisabledWithSub : 1;
		unsigned privacySyncContacts : 1;
		unsigned privacySearchByPhoneNumber : 1;
		unsigned privacySearchByUserid : 1;
		unsigned privacySearchByEmail : 1;
		unsigned privacyAllowSecondaryDeviceLogin : 1;
		unsigned privacyProfileImagePostToMyhome : 1;
		unsigned privacyReceiveMessagesFromNotFriend : 1;
		unsigned privacyAgreeUseLineCoinToPaidCall : 1;
		unsigned privacyAgreeUsePaidCall : 1;
		unsigned identityProvider : 1;
		unsigned phoneRegistration : 1;
		unsigned emailConfirmationStatus : 1;
		unsigned accountMigrationPincodeType : 1;
	} __isSet;
}
@property(retain, nonatomic) NSDictionary* customModes;
@property(retain, nonatomic) NSString* preferenceLocale;
@property(readonly, assign, nonatomic) BOOL accountMigrationPincodeTypeIsSet;
@property(assign, nonatomic) int accountMigrationPincodeType;
@property(readonly, assign, nonatomic) BOOL emailConfirmationStatusIsSet;
@property(assign, nonatomic) int emailConfirmationStatus;
@property(readonly, assign, nonatomic) BOOL phoneRegistrationIsSet;
@property(assign, nonatomic, getter=isPhoneRegistration) BOOL phoneRegistration;
@property(retain, nonatomic) NSDictionary* snsAccounts;
@property(retain, nonatomic) NSString* identityIdentifier;
@property(readonly, assign, nonatomic) BOOL identityProviderIsSet;
@property(assign, nonatomic) int identityProvider;
@property(retain, nonatomic) NSString* contactMyTicket;
@property(readonly, assign, nonatomic) BOOL privacyAgreeUsePaidCallIsSet;
@property(assign, nonatomic, getter=isPrivacyAgreeUsePaidCall) BOOL privacyAgreeUsePaidCall;
@property(readonly, assign, nonatomic) BOOL privacyAgreeUseLineCoinToPaidCallIsSet;
@property(assign, nonatomic, getter=isPrivacyAgreeUseLineCoinToPaidCall) BOOL privacyAgreeUseLineCoinToPaidCall;
@property(readonly, assign, nonatomic) BOOL privacyReceiveMessagesFromNotFriendIsSet;
@property(assign, nonatomic, getter=isPrivacyReceiveMessagesFromNotFriend) BOOL privacyReceiveMessagesFromNotFriend;
@property(readonly, assign, nonatomic) BOOL privacyProfileImagePostToMyhomeIsSet;
@property(assign, nonatomic, getter=isPrivacyProfileImagePostToMyhome) BOOL privacyProfileImagePostToMyhome;
@property(readonly, assign, nonatomic) BOOL privacyAllowSecondaryDeviceLoginIsSet;
@property(assign, nonatomic, getter=isPrivacyAllowSecondaryDeviceLogin) BOOL privacyAllowSecondaryDeviceLogin;
@property(readonly, assign, nonatomic) BOOL privacySearchByEmailIsSet;
@property(assign, nonatomic, getter=isPrivacySearchByEmail) BOOL privacySearchByEmail;
@property(readonly, assign, nonatomic) BOOL privacySearchByUseridIsSet;
@property(assign, nonatomic, getter=isPrivacySearchByUserid) BOOL privacySearchByUserid;
@property(readonly, assign, nonatomic) BOOL privacySearchByPhoneNumberIsSet;
@property(assign, nonatomic, getter=isPrivacySearchByPhoneNumber) BOOL privacySearchByPhoneNumber;
@property(readonly, assign, nonatomic) BOOL privacySyncContactsIsSet;
@property(assign, nonatomic, getter=isPrivacySyncContacts) BOOL privacySyncContacts;
@property(readonly, assign, nonatomic) BOOL notificationDisabledWithSubIsSet;
@property(assign, nonatomic, getter=isNotificationDisabledWithSub) BOOL notificationDisabledWithSub;
@property(retain, nonatomic) NSString* notificationSoundGroup;
@property(retain, nonatomic) NSString* notificationSoundMessage;
@property(readonly, assign, nonatomic) BOOL notificationIncomingCallIsSet;
@property(assign, nonatomic, getter=isNotificationIncomingCall) BOOL notificationIncomingCall;
@property(readonly, assign, nonatomic) BOOL notificationShowMessageIsSet;
@property(assign, nonatomic, getter=isNotificationShowMessage) BOOL notificationShowMessage;
@property(readonly, assign, nonatomic) BOOL notificationGroupInvitationIsSet;
@property(assign, nonatomic, getter=isNotificationGroupInvitation) BOOL notificationGroupInvitation;
@property(readonly, assign, nonatomic) BOOL notificationNewMessageIsSet;
@property(assign, nonatomic, getter=isNotificationNewMessage) BOOL notificationNewMessage;
@property(readonly, assign, nonatomic) BOOL notificationMuteExpirationIsSet;
@property(assign, nonatomic) long long notificationMuteExpiration;
@property(readonly, assign, nonatomic) BOOL notificationEnableIsSet;
@property(assign, nonatomic, getter=isNotificationEnable) BOOL notificationEnable;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LinePublicKey : NSObject {
	int __keyAlgorithm;
	int __keySize;
	NSData* __keyData;
	long long __createdTime;
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} __isSet;
}
@property(assign, nonatomic) long long createdTime;
@property(retain, nonatomic) NSData* keyData;
@property(assign, nonatomic) int keySize;
@property(assign, nonatomic) int keyAlgorithm;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePublicKeychain : NSObject {
	NSSet* __publicKeys;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSSet* publicKeys;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineContact : NSObject {
	NSString* __mid;
	long long __createdTime;
	int __type;
	int __status;
	int __relation;
	NSString* __displayName;
	NSString* __phoneticName;
	NSString* __pictureStatus;
	NSString* __thumbnailUrl;
	NSString* __statusMessage;
	NSString* __displayNameOverridden;
	long long __favoriteTime;
	BOOL __capableVoiceCall;
	BOOL __capableVideoCall;
	BOOL __capableMyhome;
	BOOL __capableBuddy;
	int __attributes;
	long long __settings;
	NSString* __picturePath;
	NSString* __recommendParams;
	int __friendRequestStatus;
	struct {
		unsigned createdTime : 1;
		unsigned type : 1;
		unsigned status : 1;
		unsigned relation : 1;
		unsigned favoriteTime : 1;
		unsigned capableVoiceCall : 1;
		unsigned capableVideoCall : 1;
		unsigned capableMyhome : 1;
		unsigned capableBuddy : 1;
		unsigned attributes : 1;
		unsigned settings : 1;
		unsigned friendRequestStatus : 1;
	} __isSet;
}
@property(assign, nonatomic) int friendRequestStatus;
@property(retain, nonatomic) NSString* recommendParams;
@property(retain, nonatomic) NSString* picturePath;
@property(assign, nonatomic) long long settings;
@property(assign, nonatomic) int attributes;
@property(assign, nonatomic, getter=isCapableBuddy) BOOL capableBuddy;
@property(assign, nonatomic, getter=isCapableMyhome) BOOL capableMyhome;
@property(assign, nonatomic, getter=isCapableVideoCall) BOOL capableVideoCall;
@property(assign, nonatomic, getter=isCapableVoiceCall) BOOL capableVoiceCall;
@property(assign, nonatomic) long long favoriteTime;
@property(retain, nonatomic) NSString* displayNameOverridden;
@property(retain, nonatomic) NSString* statusMessage;
@property(retain, nonatomic) NSString* thumbnailUrl;
@property(retain, nonatomic) NSString* pictureStatus;
@property(retain, nonatomic) NSString* phoneticName;
@property(retain, nonatomic) NSString* displayName;
@property(assign, nonatomic) int relation;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) long long createdTime;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCompactContact : NSObject {
	NSString* __mid;
	long long __createdTime;
	long long __modifiedTime;
	int __status;
	long long __settings;
	NSString* __displayNameOverridden;
	struct {
		unsigned createdTime : 1;
		unsigned modifiedTime : 1;
		unsigned status : 1;
		unsigned settings : 1;
	} __isSet;
}
@property(retain, nonatomic) NSString* displayNameOverridden;
@property(assign, nonatomic) long long settings;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) long long modifiedTime;
@property(assign, nonatomic) long long createdTime;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineGroup : NSObject {
	NSString* __ID;
	long long __createdTime;
	NSString* __name;
	NSString* __pictureStatus;
	NSArray* __members;
	LineContact* __creator;
	NSArray* __invitee;
	BOOL __notificationDisabled;
	NSString* __picturePath;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSString* picturePath;
@property(assign, nonatomic, getter=isNotificationDisabled) BOOL notificationDisabled;
@property(retain, nonatomic) NSArray* invitee;
@property(retain, nonatomic) LineContact* creator;
@property(retain, nonatomic) NSArray* members;
@property(retain, nonatomic) NSString* pictureStatus;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) long long createdTime;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineRoom : NSObject {
	NSString* __mid;
	long long __createdTime;
	NSArray* __contacts;
	BOOL __notificationDisabled;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic, getter=isNotificationDisabled) BOOL notificationDisabled;
@property(retain, nonatomic) NSArray* contacts;
@property(assign, nonatomic) long long createdTime;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineAnnouncement : NSObject {
	int __index;
	BOOL __forceUpdate;
	NSString* __title;
	NSString* __text;
	long long __createdTime;
	NSString* __pictureUrl;
	NSString* __thumbnailUrl;
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} __isSet;
}
@property(retain, nonatomic) NSString* thumbnailUrl;
@property(retain, nonatomic) NSString* pictureUrl;
@property(assign, nonatomic) long long createdTime;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic, getter=isForceUpdate) BOOL forceUpdate;
@property(assign, nonatomic) int index;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePhoneVerificationResult : NSObject {
	int __verificationResult;
	int __accountMigrationCheckType;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) int accountMigrationCheckType;
@property(assign, nonatomic) int verificationResult;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineWapInvitation : NSObject {
	int __type;
	NSString* __inviteeEmail;
	NSString* __inviterMid;
	NSString* __roomMid;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* roomMid;
@property(retain, nonatomic) NSString* inviterMid;
@property(retain, nonatomic) NSString* inviteeEmail;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineContactModification : NSObject {
	int __type;
	NSString* __luid;
	NSArray* __phones;
	NSArray* __emails;
	NSArray* __userids;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSArray* userids;
@property(retain, nonatomic) NSArray* emails;
@property(retain, nonatomic) NSArray* phones;
@property(retain, nonatomic) NSString* luid;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineContactRegistration : NSObject {
	NSString* __luid;
	int __contactType;
	NSString* __contactKey;
	LineContact* __contact;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) LineContact* contact;
@property(retain, nonatomic) NSString* contactKey;
@property(assign, nonatomic) int contactType;
@property(retain, nonatomic) NSString* luid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineContactReport : NSObject {
	NSString* __mid;
	BOOL __exists;
	LineContact* __contact;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) LineContact* contact;
@property(assign, nonatomic, getter=isExists) BOOL exists;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineContactReportResult : NSObject {
	NSString* __mid;
	BOOL __exists;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic, getter=isExists) BOOL exists;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineContactTransition : NSObject {
	NSString* __ownerMid;
	NSString* __targetMid;
	int __previousStatus;
	int __resultStatus;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) int resultStatus;
@property(assign, nonatomic) int previousStatus;
@property(retain, nonatomic) NSString* targetMid;
@property(retain, nonatomic) NSString* ownerMid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineIdentityCredential : NSObject {
	int __provider;
	NSString* __identifier;
	NSString* __password;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* password;
@property(retain, nonatomic) NSString* identifier;
@property(assign, nonatomic) int provider;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineLoginResult : NSObject {
	NSString* __authToken;
	NSString* __certificate;
	NSString* __verifier;
	NSString* __pinCode;
	int __type;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* pinCode;
@property(retain, nonatomic) NSString* verifier;
@property(retain, nonatomic) NSString* certificate;
@property(retain, nonatomic) NSString* authToken;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineRegisterWithSnsIdResult : NSObject {
	NSString* __authToken;
	BOOL __userCreated;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic, getter=isUserCreated) BOOL userCreated;
@property(retain, nonatomic) NSString* authToken;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSnsIdUserStatus : NSObject {
	BOOL __userExisting;
	BOOL __phoneNumberRegistered;
	BOOL __sameDevice;
	int __accountMigrationCheckType;
	struct {
		unsigned createdTime : 1;
		unsigned modifiedTime : 1;
		unsigned status : 1;
		unsigned settings : 1;
	} __isSet;
}
@property(assign, nonatomic) int accountMigrationCheckType;
@property(assign, nonatomic, getter=isSameDevice) BOOL sameDevice;
@property(assign, nonatomic, getter=isPhoneNumberRegistered) BOOL phoneNumberRegistered;
@property(assign, nonatomic, getter=isUserExisting) BOOL userExisting;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineUserAuthStatus : NSObject {
	BOOL __phoneNumberRegistered;
	NSArray* __registeredSnsIdTypes;
	int __accountMigrationCheckType;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) int accountMigrationCheckType;
@property(retain, nonatomic) NSArray* registeredSnsIdTypes;
@property(assign, nonatomic, getter=isPhoneNumberRegistered) BOOL phoneNumberRegistered;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSnsFriend : NSObject {
	NSString* __snsUserId;
	NSString* __snsUserName;
	int __snsIdType;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) int snsIdType;
@property(retain, nonatomic) NSString* snsUserName;
@property(retain, nonatomic) NSString* snsUserId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSnsFriends : NSObject {
	NSArray* __snsFriends;
	BOOL __hasMore;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) BOOL hasMore;
@property(retain, nonatomic) NSArray* snsFriends;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSnsFriendModification : NSObject {
	int __type;
	LineSnsFriend* __snsFriend;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) LineSnsFriend* snsFriend;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSnsFriendContactRegistration : NSObject {
	LineContact* __contact;
	int __snsIdType;
	NSString* __snsUserId;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* snsUserId;
@property(assign, nonatomic) int snsIdType;
@property(retain, nonatomic) LineContact* contact;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSnsProfile : NSObject {
	NSString* __snsUserId;
	NSString* __snsUserName;
	NSString* __email;
	NSString* __thumbnailUrl;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* thumbnailUrl;
@property(retain, nonatomic) NSString* email;
@property(retain, nonatomic) NSString* snsUserName;
@property(retain, nonatomic) NSString* snsUserId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineEmailConfirmationSession : NSObject {
	int __emailConfirmationType;
	NSString* __verifier;
	NSString* __targetEmail;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* targetEmail;
@property(retain, nonatomic) NSString* verifier;
@property(assign, nonatomic) int emailConfirmationType;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineEmailConfirmation : NSObject {
	BOOL __usePasswordSet;
	NSString* __email;
	NSString* __password;
	BOOL __ignoreDuplication;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic, getter=isIgnoreDuplication) BOOL ignoreDuplication;
@property(retain, nonatomic) NSString* password;
@property(retain, nonatomic) NSString* email;
@property(assign, nonatomic, getter=isUsePasswordSet) BOOL usePasswordSet;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineRSAKey : NSObject {
	NSString* __keynm;
	NSString* __nvalue;
	NSString* __evalue;
	NSString* __sessionKey;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* sessionKey;
@property(retain, nonatomic) NSString* evalue;
@property(retain, nonatomic) NSString* nvalue;
@property(retain, nonatomic) NSString* keynm;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineTicket : NSObject <NSCoding> {
	NSString* __ID;
	long long __expirationTime;
	int __maxUseCount;
	XXStruct_JTAGoB __isSet;
}
@property(readonly, assign, nonatomic) BOOL maxUseCountIsSet;
@property(assign, nonatomic) int maxUseCount;
@property(readonly, assign, nonatomic) BOOL expirationTimeIsSet;
@property(assign, nonatomic) long long expirationTime;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LineSystemConfiguration : NSObject {
	NSString* __endpoint;
	NSString* __endpointSsl;
	NSString* __updateUrl;
	NSString* __c2dmAccount;
	NSString* __nniServer;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* nniServer;
@property(retain, nonatomic) NSString* c2dmAccount;
@property(retain, nonatomic) NSString* updateUrl;
@property(retain, nonatomic) NSString* endpointSsl;
@property(retain, nonatomic) NSString* endpoint;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineLoginSession : NSObject {
	NSString* __tokenKey;
	long long __expirationTime;
	int __applicationType;
	NSString* __systemName;
	NSString* __accessLocation;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSString* accessLocation;
@property(retain, nonatomic) NSString* systemName;
@property(assign, nonatomic) int applicationType;
@property(assign, nonatomic) long long expirationTime;
@property(retain, nonatomic) NSString* tokenKey;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePaymentReservation : NSObject {
	NSString* __receiverMid;
	NSString* __productId;
	NSString* __language;
	NSString* __location;
	NSString* __currency;
	NSString* __price;
	int __appStoreCode;
	NSString* __messageText;
	int __messageTemplate;
	long long __packageId;
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} __isSet;
}
@property(assign, nonatomic) long long packageId;
@property(assign, nonatomic) int messageTemplate;
@property(retain, nonatomic) NSString* messageText;
@property(assign, nonatomic) int appStoreCode;
@property(retain, nonatomic) NSString* price;
@property(retain, nonatomic) NSString* currency;
@property(retain, nonatomic) NSString* location;
@property(retain, nonatomic) NSString* language;
@property(retain, nonatomic) NSString* productId;
@property(retain, nonatomic) NSString* receiverMid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePaymentReservationResult : NSObject {
	NSString* __orderId;
	NSString* __confirmUrl;
	NSDictionary* __extras;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSDictionary* extras;
@property(retain, nonatomic) NSString* confirmUrl;
@property(retain, nonatomic) NSString* orderId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineProductCategory : NSObject <NSCoding> {
	long long __productCategoryId;
	NSString* __title;
	int __productCount;
	BOOL __NewFlag;
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} __isSet;
	BOOL _NewFlagIsSet;
}
@property(readonly, assign, nonatomic) BOOL NewFlagIsSet;
@property(assign, nonatomic, getter=isNewFlag) BOOL NewFlag;
@property(readonly, assign, nonatomic) BOOL productCountIsSet;
@property(assign, nonatomic) int productCount;
@property(retain, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) BOOL productCategoryIdIsSet;
@property(assign, nonatomic) long long productCategoryId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(BOOL)newFlagIsSet;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LineProduct : NSObject {
	NSString* __productId;
	long long __packageId;
	int __version;
	NSString* __authorName;
	BOOL __onSale;
	int __validDays;
	int __saleType;
	NSString* __copyright;
	NSString* __title;
	NSString* __descriptionText;
	long long __shopOrderId;
	NSString* __fromMid;
	NSString* __toMid;
	long long __validUntil;
	int __priceTier;
	NSString* __price;
	NSString* __currency;
	NSString* __currencySymbol;
	int __paymentType;
	long long __createDate;
	BOOL __ownFlag;
	int __eventType;
	NSString* __urlSchema;
	NSString* __downloadUrl;
	NSString* __buddyMid;
	long long __publishSince;
	BOOL __NewFlag;
	BOOL __missionFlag;
	NSArray* __categories;
	BOOL __grantedByDefault;
	int __displayOrder;
	BOOL __availableForPresent;
	BOOL __availableForMyself;
	BOOL __hasAnimation;
	BOOL __hasSound;
	struct {
		unsigned packageId : 1;
		unsigned version : 1;
		unsigned onSale : 1;
		unsigned validDays : 1;
		unsigned saleType : 1;
		unsigned shopOrderId : 1;
		unsigned validUntil : 1;
		unsigned priceTier : 1;
		unsigned paymentType : 1;
		unsigned createDate : 1;
		unsigned ownFlag : 1;
		unsigned eventType : 1;
		unsigned publishSince : 1;
		unsigned NewFlag : 1;
		unsigned missionFlag : 1;
		unsigned grantedByDefault : 1;
		unsigned displayOrder : 1;
		unsigned availableForPresent : 1;
		unsigned availableForMyself : 1;
		unsigned hasAnimation : 1;
		unsigned hasSound : 1;
	} __isSet;
}
@property(assign, nonatomic) BOOL hasSound;
@property(assign, nonatomic) BOOL hasAnimation;
@property(assign, nonatomic, getter=isAvailableForMyself) BOOL availableForMyself;
@property(assign, nonatomic, getter=isAvailableForPresent) BOOL availableForPresent;
@property(assign, nonatomic) int displayOrder;
@property(assign, nonatomic, getter=isGrantedByDefault) BOOL grantedByDefault;
@property(retain, nonatomic) NSArray* categories;
@property(assign, nonatomic, getter=isMissionFlag) BOOL missionFlag;
@property(assign, nonatomic, getter=isNewFlag) BOOL NewFlag;
@property(assign, nonatomic) long long publishSince;
@property(retain, nonatomic) NSString* buddyMid;
@property(retain, nonatomic) NSString* downloadUrl;
@property(retain, nonatomic) NSString* urlSchema;
@property(assign, nonatomic) int eventType;
@property(assign, nonatomic, getter=isOwnFlag) BOOL ownFlag;
@property(assign, nonatomic) long long createDate;
@property(assign, nonatomic) int paymentType;
@property(retain, nonatomic) NSString* currencySymbol;
@property(retain, nonatomic) NSString* currency;
@property(retain, nonatomic) NSString* price;
@property(assign, nonatomic) int priceTier;
@property(assign, nonatomic) long long validUntil;
@property(retain, nonatomic) NSString* toMid;
@property(retain, nonatomic) NSString* fromMid;
@property(assign, nonatomic) long long shopOrderId;
@property(retain, nonatomic) NSString* descriptionText;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* copyright;
@property(assign, nonatomic) int saleType;
@property(assign, nonatomic) int validDays;
@property(assign, nonatomic, getter=isOnSale) BOOL onSale;
@property(retain, nonatomic) NSString* authorName;
@property(assign, nonatomic) int version;
@property(assign, nonatomic) long long packageId;
@property(retain, nonatomic) NSString* productId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(id)toUserName;
-(id)fromUserName;
-(id)eventDownloadConditionText;
-(id)expirationeDateText;
-(id)validDaysText;
-(id)purchaseDateText;
-(id)priceText;
-(BOOL)enabledPresentProduct;
-(BOOL)isLineCoinProduct;
-(BOOL)isEventComplete;
-(BOOL)isEvent;
-(BOOL)isFree;
@end

__attribute__((visibility("hidden")))
@interface LineProductList : NSObject {
	BOOL __hasNext;
	long long __bannerSequence;
	int __bannerTargetType;
	NSString* __bannerTargetPath;
	NSArray* __productList;
	NSString* __bannerLang;
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} __isSet;
}
@property(retain, nonatomic) NSString* bannerLang;
@property(retain, nonatomic) NSArray* productList;
@property(retain, nonatomic) NSString* bannerTargetPath;
@property(assign, nonatomic) int bannerTargetType;
@property(assign, nonatomic) long long bannerSequence;
@property(assign, nonatomic) BOOL hasNext;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineProductSimple : NSObject {
	NSString* __productId;
	long long __packageId;
	int __version;
	BOOL __onSale;
	long long __validUntil;
	BOOL __grantedByDefault;
	int __displayOrder;
	struct {
		unsigned packageId : 1;
		unsigned version : 1;
		unsigned onSale : 1;
		unsigned validUntil : 1;
		unsigned grantedByDefault : 1;
		unsigned displayOrder : 1;
	} __isSet;
}
@property(assign, nonatomic) int displayOrder;
@property(assign, nonatomic, getter=isGrantedByDefault) BOOL grantedByDefault;
@property(assign, nonatomic) long long validUntil;
@property(assign, nonatomic, getter=isOnSale) BOOL onSale;
@property(assign, nonatomic) int version;
@property(assign, nonatomic) long long packageId;
@property(retain, nonatomic) NSString* productId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineProductSimpleList : NSObject {
	BOOL __hasNext;
	int __reinvokeHour;
	long long __lastVersionSeq;
	NSArray* __productList;
	long long __recentNewReleaseDate;
	long long __recentEventReleaseDate;
	struct {
		unsigned toType : 1;
		unsigned createdTime : 1;
		unsigned deliveredTime : 1;
		unsigned hasContent : 1;
		unsigned contentType : 1;
	} __isSet;
}
@property(assign, nonatomic) long long recentEventReleaseDate;
@property(assign, nonatomic) long long recentNewReleaseDate;
@property(retain, nonatomic) NSArray* productList;
@property(assign, nonatomic) long long lastVersionSeq;
@property(assign, nonatomic) int reinvokeHour;
@property(assign, nonatomic) BOOL hasNext;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopUpdates : NSObject {
	long long __latestNewReleaseTime;
	long long __latestEventReleaseTime;
	long long __latestCategoryUpdateTime;
	long long __lastVersionSeq;
	struct {
		unsigned createdTime : 1;
		unsigned modifiedTime : 1;
		unsigned status : 1;
		unsigned settings : 1;
	} __isSet;
}
@property(assign, nonatomic) long long lastVersionSeq;
@property(assign, nonatomic) long long latestCategoryUpdateTime;
@property(assign, nonatomic) long long latestEventReleaseTime;
@property(assign, nonatomic) long long latestNewReleaseTime;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineBuddyProfile : NSObject {
	NSString* __buddyId;
	NSString* __mid;
	NSString* __searchId;
	NSString* __displayName;
	NSString* __statusMessage;
	long long __contactCount;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) long long contactCount;
@property(retain, nonatomic) NSString* statusMessage;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* searchId;
@property(retain, nonatomic) NSString* mid;
@property(retain, nonatomic) NSString* buddyId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineUpdateBuddyProfileResult : NSObject {
	NSString* __requestId;
	int __state;
	int __eventNo;
	long long __receiverCount;
	long long __successCount;
	long long __failCount;
	long long __cancelCount;
	long long __unregisterCount;
	long long __timestamp;
	NSString* __message;
	XXStruct_H4r_ZD __isSet;
}
@property(retain, nonatomic) NSString* message;
@property(assign, nonatomic) long long timestamp;
@property(assign, nonatomic) long long unregisterCount;
@property(assign, nonatomic) long long cancelCount;
@property(assign, nonatomic) long long failCount;
@property(assign, nonatomic) long long successCount;
@property(assign, nonatomic) long long receiverCount;
@property(assign, nonatomic) int eventNo;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSString* requestId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSetBuddyOnAirResult : NSObject {
	NSString* __requestId;
	int __state;
	int __eventNo;
	long long __receiverCount;
	long long __successCount;
	long long __failCount;
	long long __cancelCount;
	long long __unregisterCount;
	long long __timestamp;
	NSString* __message;
	XXStruct_H4r_ZD __isSet;
}
@property(retain, nonatomic) NSString* message;
@property(assign, nonatomic) long long timestamp;
@property(assign, nonatomic) long long unregisterCount;
@property(assign, nonatomic) long long cancelCount;
@property(assign, nonatomic) long long failCount;
@property(assign, nonatomic) long long successCount;
@property(assign, nonatomic) long long receiverCount;
@property(assign, nonatomic) int eventNo;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSString* requestId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSendBuddyMessageResult : NSObject {
	NSString* __requestId;
	int __state;
	NSString* __messageId;
	int __eventNo;
	long long __receiverCount;
	long long __successCount;
	long long __failCount;
	long long __cancelCount;
	long long __blockCount;
	long long __unregisterCount;
	long long __timestamp;
	NSString* __message;
	struct {
		unsigned state : 1;
		unsigned eventNo : 1;
		unsigned receiverCount : 1;
		unsigned successCount : 1;
		unsigned failCount : 1;
		unsigned cancelCount : 1;
		unsigned blockCount : 1;
		unsigned unregisterCount : 1;
		unsigned timestamp : 1;
	} __isSet;
}
@property(retain, nonatomic) NSString* message;
@property(assign, nonatomic) long long timestamp;
@property(assign, nonatomic) long long unregisterCount;
@property(assign, nonatomic) long long blockCount;
@property(assign, nonatomic) long long cancelCount;
@property(assign, nonatomic) long long failCount;
@property(assign, nonatomic) long long successCount;
@property(assign, nonatomic) long long receiverCount;
@property(assign, nonatomic) int eventNo;
@property(retain, nonatomic) NSString* messageId;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSString* requestId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineUnregisterBuddyResult : NSObject {
	NSString* __requestId;
	int __state;
	int __eventNo;
	NSString* __message;
	long long __timestamp;
	long long __subscriberCountToRemove;
	long long __subscriberCountRemoved;
	struct {
		unsigned toType : 1;
		unsigned createdTime : 1;
		unsigned deliveredTime : 1;
		unsigned hasContent : 1;
		unsigned contentType : 1;
	} __isSet;
}
@property(assign, nonatomic) long long subscriberCountRemoved;
@property(assign, nonatomic) long long subscriberCountToRemove;
@property(assign, nonatomic) long long timestamp;
@property(retain, nonatomic) NSString* message;
@property(assign, nonatomic) int eventNo;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSString* requestId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineBuddyDetail : NSObject {
	NSString* __mid;
	long long __memberCount;
	BOOL __onAir;
	BOOL __businessAccount;
	BOOL __addable;
	NSSet* __acceptableContentTypes;
	BOOL __capableMyhome;
	BOOL __freePhoneCallable;
	NSString* __phoneNumberToDial;
	BOOL __needPermissionApproval;
	int __channelId;
	NSString* __channelProviderName;
	XXStruct_H4r_ZD __isSet;
}
@property(retain, nonatomic) NSString* channelProviderName;
@property(assign, nonatomic) int channelId;
@property(assign, nonatomic, getter=isNeedPermissionApproval) BOOL needPermissionApproval;
@property(retain, nonatomic) NSString* phoneNumberToDial;
@property(assign, nonatomic, getter=isFreePhoneCallable) BOOL freePhoneCallable;
@property(assign, nonatomic, getter=isCapableMyhome) BOOL capableMyhome;
@property(retain, nonatomic) NSSet* acceptableContentTypes;
@property(assign, nonatomic, getter=isAddable) BOOL addable;
@property(assign, nonatomic, getter=isBusinessAccount) BOOL businessAccount;
@property(assign, nonatomic, getter=isOnAir) BOOL onAir;
@property(assign, nonatomic) long long memberCount;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineBuddySearchResult : NSObject {
	NSString* __mid;
	NSString* __displayName;
	NSString* __pictureStatus;
	NSString* __picturePath;
	NSString* __statusMessage;
	BOOL __businessAccount;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic, getter=isBusinessAccount) BOOL businessAccount;
@property(retain, nonatomic) NSString* statusMessage;
@property(retain, nonatomic) NSString* picturePath;
@property(retain, nonatomic) NSString* pictureStatus;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineBuddyOnAirUrls : NSObject {
	NSDictionary* __hls;
	NSDictionary* __smoothStreaming;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSDictionary* smoothStreaming;
@property(retain, nonatomic) NSDictionary* hls;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineBuddyOnAir : NSObject {
	NSString* __mid;
	long long __freshnessLifetime;
	NSString* __onAirId;
	BOOL __onAir;
	NSString* __text;
	long long __viewerCount;
	long long __targetCount;
	long long __livePlayTime;
	NSString* __screenAspectRate;
	int __onAirType;
	LineBuddyOnAirUrls* __onAirUrls;
	struct {
		unsigned packageId : 1;
		unsigned version : 1;
		unsigned onSale : 1;
		unsigned validUntil : 1;
		unsigned grantedByDefault : 1;
		unsigned displayOrder : 1;
	} __isSet;
}
@property(retain, nonatomic) LineBuddyOnAirUrls* onAirUrls;
@property(assign, nonatomic) int onAirType;
@property(retain, nonatomic) NSString* screenAspectRate;
@property(assign, nonatomic) long long livePlayTime;
@property(assign, nonatomic) long long targetCount;
@property(assign, nonatomic) long long viewerCount;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic, getter=isOnAir) BOOL onAir;
@property(retain, nonatomic) NSString* onAirId;
@property(assign, nonatomic) long long freshnessLifetime;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineBuddyList : NSObject {
	NSString* __classification;
	NSString* __displayName;
	int __totalBuddyCount;
	NSArray* __popularContacts;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSArray* popularContacts;
@property(assign, nonatomic) int totalBuddyCount;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* classification;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineBuddyMessageRequest : NSObject {
	int __contentType;
	NSString* __text;
	LineLocation* __location;
	NSData* __content;
	NSDictionary* __contentMetadata;
	NSString* __sourceContentId;
	BOOL __usePermanent;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic, getter=isUsePermanent) BOOL usePermanent;
@property(retain, nonatomic) NSString* sourceContentId;
@property(retain, nonatomic) NSDictionary* contentMetadata;
@property(retain, nonatomic) NSData* content;
@property(retain, nonatomic) LineLocation* location;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) int contentType;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineBuddyBanner : NSObject {
	int __buddyBannerLinkType;
	NSString* __buddyBannerLink;
	NSString* __buddyBannerImageUrl;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* buddyBannerImageUrl;
@property(retain, nonatomic) NSString* buddyBannerLink;
@property(assign, nonatomic) int buddyBannerLinkType;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoinProductItem : NSObject {
	NSString* __itemId;
	int __coin;
	int __freeCoin;
	NSString* __currency;
	NSString* __price;
	NSString* __displayPrice;
	NSString* __name;
	NSString* __desc;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* displayPrice;
@property(retain, nonatomic) NSString* price;
@property(retain, nonatomic) NSString* currency;
@property(assign, nonatomic) int freeCoin;
@property(assign, nonatomic) int coin;
@property(retain, nonatomic) NSString* itemId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoinPurchaseReservation : NSObject {
	NSString* __productId;
	NSString* __country;
	NSString* __currency;
	NSString* __price;
	int __appStoreCode;
	NSString* __language;
	int __pgCode;
	NSString* __redirectUrl;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSString* redirectUrl;
@property(assign, nonatomic) int pgCode;
@property(retain, nonatomic) NSString* language;
@property(assign, nonatomic) int appStoreCode;
@property(retain, nonatomic) NSString* price;
@property(retain, nonatomic) NSString* currency;
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* productId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoinPurchaseConfirm : NSObject {
	NSString* __orderId;
	int __appStoreCode;
	NSString* __receipt;
	NSString* __signature;
	NSString* __seller;
	NSString* __requestType;
	BOOL __ignoreReceipt;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic, getter=isIgnoreReceipt) BOOL ignoreReceipt;
@property(retain, nonatomic) NSString* requestType;
@property(retain, nonatomic) NSString* seller;
@property(retain, nonatomic) NSString* signature;
@property(retain, nonatomic) NSString* receipt;
@property(assign, nonatomic) int appStoreCode;
@property(retain, nonatomic) NSString* orderId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoinUseReservationItem : NSObject {
	NSString* __itemId;
	NSString* __itemName;
	int __amount;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) int amount;
@property(retain, nonatomic) NSString* itemName;
@property(retain, nonatomic) NSString* itemId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoinUseReservation : NSObject {
	NSString* __channelId;
	NSString* __shopOrderId;
	int __appStoreCode;
	NSArray* __items;
	NSString* __country;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSArray* items;
@property(assign, nonatomic) int appStoreCode;
@property(retain, nonatomic) NSString* shopOrderId;
@property(retain, nonatomic) NSString* channelId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoin : NSObject {
	int __freeCoinBalance;
	int __payedCoinBalance;
	int __totalCoinBalance;
	int __rewardCoinBalance;
	struct {
		unsigned createdTime : 1;
		unsigned modifiedTime : 1;
		unsigned status : 1;
		unsigned settings : 1;
	} __isSet;
}
@property(assign, nonatomic) int rewardCoinBalance;
@property(assign, nonatomic) int totalCoinBalance;
@property(assign, nonatomic) int payedCoinBalance;
@property(assign, nonatomic) int freeCoinBalance;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoinPayLoad : NSObject {
	int __payCoin;
	int __freeCoin;
	int __type;
	int __rewardCoin;
	struct {
		unsigned createdTime : 1;
		unsigned modifiedTime : 1;
		unsigned status : 1;
		unsigned settings : 1;
	} __isSet;
}
@property(assign, nonatomic) int rewardCoin;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) int freeCoin;
@property(assign, nonatomic) int payCoin;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoinHistory : NSObject {
	long long __payDate;
	int __coinBalance;
	int __coin;
	NSString* __price;
	NSString* __title;
	BOOL __refund;
	NSString* __paySeq;
	NSString* __currency;
	NSString* __currencySign;
	NSString* __displayPrice;
	LineCoinPayLoad* __payload;
	NSString* __channelId;
	struct {
		unsigned createdTime : 1;
		unsigned modifiedTime : 1;
		unsigned status : 1;
		unsigned settings : 1;
	} __isSet;
}
@property(retain, nonatomic) NSString* channelId;
@property(retain, nonatomic) LineCoinPayLoad* payload;
@property(retain, nonatomic) NSString* displayPrice;
@property(retain, nonatomic) NSString* currencySign;
@property(retain, nonatomic) NSString* currency;
@property(retain, nonatomic) NSString* paySeq;
@property(assign, nonatomic, getter=isRefund) BOOL refund;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* price;
@property(assign, nonatomic) int coin;
@property(assign, nonatomic) int coinBalance;
@property(assign, nonatomic) long long payDate;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoinHistoryCondition : NSObject {
	long long __start;
	int __size;
	NSString* __language;
	NSString* __eddt;
	int __appStoreCode;
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} __isSet;
}
@property(assign, nonatomic) int appStoreCode;
@property(retain, nonatomic) NSString* eddt;
@property(retain, nonatomic) NSString* language;
@property(assign, nonatomic) int size;
@property(assign, nonatomic) long long start;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCoinHistoryResult : NSObject {
	NSArray* __historys;
	LineCoin* __balance;
	BOOL __hasNext;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) BOOL hasNext;
@property(retain, nonatomic) LineCoin* balance;
@property(retain, nonatomic) NSArray* historys;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineAuthQrcode : NSObject {
	NSString* __qrcode;
	NSString* __verifier;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* verifier;
@property(retain, nonatomic) NSString* qrcode;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineTMessageBoxWrapUp : NSObject {
	LineTMessageBox* __messageBox;
	NSString* __name;
	NSArray* __contacts;
	NSString* __pictureRevision;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* pictureRevision;
@property(retain, nonatomic) NSArray* contacts;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) LineTMessageBox* messageBox;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineTMessageBoxWrapUpResponse : NSObject {
	NSArray* __messageBoxWrapUpList;
	int __totalSize;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) int totalSize;
@property(retain, nonatomic) NSArray* messageBoxWrapUpList;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineProximityMatchCandidateEntry : NSObject {
	LineContact* __contact;
	LineBuddyDetail* __buddyDetail;
	z_stream_s __isSet;
}
@property(retain, nonatomic) LineBuddyDetail* buddyDetail;
@property(retain, nonatomic) LineContact* contact;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineProximityMatchCandidateResult : NSObject {
	NSArray* __users;
	NSArray* __buddies;
	BOOL __endOfResult;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic, getter=isEndOfResult) BOOL endOfResult;
@property(retain, nonatomic) NSArray* buddies;
@property(retain, nonatomic) NSArray* users;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineGeolocation : NSObject {
	double __longitude;
	double __latitude;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) double latitude;
@property(assign, nonatomic) double longitude;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineConfigurations : NSObject {
	long long __revision;
	NSDictionary* __configMap;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSDictionary* configMap;
@property(assign, nonatomic) long long revision;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineChannelToken : NSObject {
	NSString* __token;
	NSString* __obsToken;
	long long __expiration;
	NSString* __refreshToken;
	NSString* __channelAccessToken;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* channelAccessToken;
@property(retain, nonatomic) NSString* refreshToken;
@property(assign, nonatomic) long long expiration;
@property(retain, nonatomic) NSString* obsToken;
@property(retain, nonatomic) NSString* token;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineChannelProvider : NSObject <NSCoding> {
	NSString* __name;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LineChannelInfo : NSObject {
	NSString* __channelId;
	NSString* __name;
	NSString* __entryPageUrl;
	NSString* __descriptionText;
	LineChannelProvider* __provider;
	int __publicType;
	NSString* __iconImage;
	NSArray* __permissions;
	NSString* __iconThumbnailImage;
	NSArray* __channelConfigurations;
	BOOL __lcsAllApiUsable;
	NSSet* __allowedPermissions;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSSet* allowedPermissions;
@property(assign, nonatomic, getter=isLcsAllApiUsable) BOOL lcsAllApiUsable;
@property(retain, nonatomic) NSArray* channelConfigurations;
@property(retain, nonatomic) NSString* iconThumbnailImage;
@property(retain, nonatomic) NSArray* permissions;
@property(retain, nonatomic) NSString* iconImage;
@property(assign, nonatomic) int publicType;
@property(retain, nonatomic) LineChannelProvider* provider;
@property(retain, nonatomic) NSString* descriptionText;
@property(retain, nonatomic) NSString* entryPageUrl;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* channelId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineChannelInfos : NSObject {
	NSArray* __channelInfos;
	long long __revision;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) long long revision;
@property(retain, nonatomic) NSArray* channelInfos;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineApprovedChannelInfo : NSObject {
	LineChannelInfo* __channelInfo;
	long long __approvedAt;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) long long approvedAt;
@property(retain, nonatomic) LineChannelInfo* channelInfo;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineApprovedChannelInfos : NSObject {
	NSArray* __approvedChannelInfos;
	long long __revision;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) long long revision;
@property(retain, nonatomic) NSArray* approvedChannelInfos;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineChannelDomain : NSObject {
	NSString* __host;
	BOOL __removed;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic, getter=isRemoved) BOOL removed;
@property(retain, nonatomic) NSString* host;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineChannelDomains : NSObject {
	NSArray* __channelDomains;
	long long __revision;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) long long revision;
@property(retain, nonatomic) NSArray* channelDomains;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineChannelNotificationSetting : NSObject <NSCoding> {
	NSString* __channelId;
	NSString* __name;
	BOOL __notificationReceivable;
	BOOL __messageReceivable;
	BOOL __showDefault;
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} __isSet;
}
@property(readonly, assign, nonatomic) BOOL showDefaultIsSet;
@property(assign, nonatomic, getter=isShowDefault) BOOL showDefault;
@property(readonly, assign, nonatomic) BOOL messageReceivableIsSet;
@property(assign, nonatomic, getter=isMessageReceivable) BOOL messageReceivable;
@property(readonly, assign, nonatomic) BOOL notificationReceivableIsSet;
@property(assign, nonatomic, getter=isNotificationReceivable) BOOL notificationReceivable;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* channelId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden"),objc_exception))
@interface LineChannelException : NSException {
	int __code;
	NSString* __reason;
	NSDictionary* __parameterMap;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSDictionary* parameterMap;
@property(retain, nonatomic) NSString* reason;
@property(assign, nonatomic) int code;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineNotificationItem : NSObject {
	NSString* __ID;
	NSString* __from;
	NSString* __to;
	NSString* __fromChannel;
	NSString* __toChannel;
	long long __revision;
	long long __createdTime;
	NSDictionary* __content;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSDictionary* content;
@property(assign, nonatomic) long long createdTime;
@property(assign, nonatomic) long long revision;
@property(retain, nonatomic) NSString* toChannel;
@property(retain, nonatomic) NSString* fromChannel;
@property(retain, nonatomic) NSString* to;
@property(retain, nonatomic) NSString* from;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineNotificationFetchResult : NSObject {
	int __fetchMode;
	NSArray* __itemList;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSArray* itemList;
@property(assign, nonatomic) int fetchMode;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineChannelSyncDatas : NSObject {
	NSArray* __channelInfos;
	NSArray* __channelDomains;
	long long __revision;
	long long __expires;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) long long expires;
@property(assign, nonatomic) long long revision;
@property(retain, nonatomic) NSArray* channelDomains;
@property(retain, nonatomic) NSArray* channelInfos;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSimpleChannelContact : NSObject {
	NSString* __mid;
	NSString* __displayName;
	NSString* __pictureStatus;
	NSString* __picturePath;
	NSString* __statusMessage;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* statusMessage;
@property(retain, nonatomic) NSString* picturePath;
@property(retain, nonatomic) NSString* pictureStatus;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineFriendChannelMatrix : NSObject {
	NSString* __channelId;
	NSString* __representMid;
	int __count;
	int __point;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) int point;
@property(assign, nonatomic) int count;
@property(retain, nonatomic) NSString* representMid;
@property(retain, nonatomic) NSString* channelId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineFriendChannelMatricesResponse : NSObject {
	long long __expires;
	NSArray* __matrices;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSArray* matrices;
@property(assign, nonatomic) long long expires;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSimpleChannelClient : NSObject {
	NSString* __applicationType;
	NSString* __applicationVersion;
	NSString* __locale;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* locale;
@property(retain, nonatomic) NSString* applicationVersion;
@property(retain, nonatomic) NSString* applicationType;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineMetaProfile : NSObject {
	long long __createTime;
	NSString* __regionCode;
	NSDictionary* __identities;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSDictionary* identities;
@property(retain, nonatomic) NSString* regionCode;
@property(assign, nonatomic) long long createTime;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineRequestTokenResponse : NSObject {
	NSString* __requestToken;
	NSString* __returnUrl;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* returnUrl;
@property(retain, nonatomic) NSString* requestToken;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineUserTicketResponse : NSObject {
	NSString* __mid;
	NSString* __userTicket;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* userTicket;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineChannelSettings : NSObject {
	BOOL __unapprovedMessageReceivable;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic, getter=isUnapprovedMessageReceivable) BOOL unapprovedMessageReceivable;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineAgeCheckRequestResult : NSObject {
	NSString* __authUrl;
	NSString* __sessionId;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* sessionId;
@property(retain, nonatomic) NSString* authUrl;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineAgeCheckDocomoResult : NSObject {
	NSString* __authUrl;
	int __userAgeType;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) int userAgeType;
@property(retain, nonatomic) NSString* authUrl;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSpotItem : NSObject {
	NSString* __name;
	NSString* __phone;
	int __category;
	NSString* __mid;
	NSString* __countryAreaCode;
	BOOL __freePhoneCallable;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic, getter=isFreePhoneCallable) BOOL freePhoneCallable;
@property(retain, nonatomic) NSString* countryAreaCode;
@property(retain, nonatomic) NSString* mid;
@property(assign, nonatomic) int category;
@property(retain, nonatomic) NSString* phone;
@property(retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSpotNearbyItem : NSObject {
	LineSpotItem* __spotItem;
	LineLocation* __location;
	z_stream_s __isSet;
}
@property(retain, nonatomic) LineLocation* location;
@property(retain, nonatomic) LineSpotItem* spotItem;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSpotNearbyResponse : NSObject {
	NSArray* __spotNearbyItems;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSArray* spotNearbyItems;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineSpotPhoneNumberResponse : NSObject {
	NSArray* __spotItems;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSArray* spotItems;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineCallHost : NSObject {
	NSString* __host;
	int __port;
	NSString* __zone;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* zone;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* host;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePaidCallDialing : NSObject {
	int __type;
	NSString* __dialedNumber;
	NSString* __serviceDomain;
	int __productType;
	NSString* __productName;
	BOOL __multipleProduct;
	int __callerIdStatus;
	int __balance;
	NSString* __unit;
	int __rate;
	NSString* __displayCode;
	struct {
		unsigned packageId : 1;
		unsigned version : 1;
		unsigned onSale : 1;
		unsigned validUntil : 1;
		unsigned grantedByDefault : 1;
		unsigned displayOrder : 1;
	} __isSet;
}
@property(retain, nonatomic) NSString* displayCode;
@property(assign, nonatomic) int rate;
@property(retain, nonatomic) NSString* unit;
@property(assign, nonatomic) int balance;
@property(assign, nonatomic) int callerIdStatus;
@property(assign, nonatomic, getter=isMultipleProduct) BOOL multipleProduct;
@property(retain, nonatomic) NSString* productName;
@property(assign, nonatomic) int productType;
@property(retain, nonatomic) NSString* serviceDomain;
@property(retain, nonatomic) NSString* dialedNumber;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePaidCallCurrencyExchangeRate : NSObject {
	NSString* __currencyCode;
	NSString* __currencyName;
	NSString* __currencySign;
	BOOL __preferred;
	NSString* __coinRate;
	NSString* __creditRate;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* creditRate;
@property(retain, nonatomic) NSString* coinRate;
@property(assign, nonatomic, getter=isPreferred) BOOL preferred;
@property(retain, nonatomic) NSString* currencySign;
@property(retain, nonatomic) NSString* currencyName;
@property(retain, nonatomic) NSString* currencyCode;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePaidCallUserRate : NSObject {
	NSString* __countryCode;
	int __rate;
	NSString* __rateDivision;
	NSString* __rateName;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* rateName;
@property(retain, nonatomic) NSString* rateDivision;
@property(assign, nonatomic) int rate;
@property(retain, nonatomic) NSString* countryCode;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePaidCallResponse : NSObject {
	LineCallHost* __host;
	LinePaidCallDialing* __dialing;
	NSString* __token;
	NSArray* __spotItems;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSArray* spotItems;
@property(retain, nonatomic) NSString* token;
@property(retain, nonatomic) LinePaidCallDialing* dialing;
@property(retain, nonatomic) LineCallHost* host;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePaidCallBalance : NSObject {
	int __productType;
	NSString* __productName;
	NSString* __unit;
	int __limitedPaidBalance;
	int __limitedFreeBalance;
	int __unlimitedPaidBalance;
	int __unlimitedFreeBalance;
	long long __startTime;
	long long __endTime;
	struct {
		unsigned productType : 1;
		unsigned limitedPaidBalance : 1;
		unsigned limitedFreeBalance : 1;
		unsigned unlimitedPaidBalance : 1;
		unsigned unlimitedFreeBalance : 1;
		unsigned startTime : 1;
		unsigned endTime : 1;
	} __isSet;
}
@property(assign, nonatomic) long long endTime;
@property(assign, nonatomic) long long startTime;
@property(assign, nonatomic) int unlimitedFreeBalance;
@property(assign, nonatomic) int unlimitedPaidBalance;
@property(assign, nonatomic) int limitedFreeBalance;
@property(assign, nonatomic) int limitedPaidBalance;
@property(retain, nonatomic) NSString* unit;
@property(retain, nonatomic) NSString* productName;
@property(assign, nonatomic) int productType;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePaidCallHistory : NSObject {
	long long __seq;
	int __type;
	NSString* __dialedNumber;
	NSString* __calledNumber;
	NSString* __toMid;
	NSString* __toName;
	long long __setupTime;
	long long __startTime;
	long long __endTime;
	long long __duration;
	int __terminate;
	int __productType;
	int __charge;
	NSString* __unit;
	NSString* __result;
	struct {
		unsigned state : 1;
		unsigned eventNo : 1;
		unsigned receiverCount : 1;
		unsigned successCount : 1;
		unsigned failCount : 1;
		unsigned cancelCount : 1;
		unsigned blockCount : 1;
		unsigned unregisterCount : 1;
		unsigned timestamp : 1;
	} __isSet;
}
@property(retain, nonatomic) NSString* result;
@property(retain, nonatomic) NSString* unit;
@property(assign, nonatomic) int charge;
@property(assign, nonatomic) int productType;
@property(assign, nonatomic) int terminate;
@property(assign, nonatomic) long long duration;
@property(assign, nonatomic) long long endTime;
@property(assign, nonatomic) long long startTime;
@property(assign, nonatomic) long long setupTime;
@property(retain, nonatomic) NSString* toName;
@property(retain, nonatomic) NSString* toMid;
@property(retain, nonatomic) NSString* calledNumber;
@property(retain, nonatomic) NSString* dialedNumber;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) long long seq;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LinePaidCallHistoryResult : NSObject {
	NSArray* __historys;
	BOOL __hasNext;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) BOOL hasNext;
@property(retain, nonatomic) NSArray* historys;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineLoginRequest : NSObject {
	int __type;
	int __identityProvider;
	NSString* __identifier;
	NSString* __password;
	BOOL __keepLoggedIn;
	NSString* __accessLocation;
	NSString* __systemName;
	NSString* __certificate;
	NSString* __verifier;
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} __isSet;
}
@property(retain, nonatomic) NSString* verifier;
@property(retain, nonatomic) NSString* certificate;
@property(retain, nonatomic) NSString* systemName;
@property(retain, nonatomic) NSString* accessLocation;
@property(assign, nonatomic, getter=isKeepLoggedIn) BOOL keepLoggedIn;
@property(retain, nonatomic) NSString* password;
@property(retain, nonatomic) NSString* identifier;
@property(assign, nonatomic) int identityProvider;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface NLRootTabBarController : UITabBarController {
	BOOL _hasBeenAppeared;
}
-(int)preferredStatusBarStyle;
-(unsigned)supportedInterfaceOrientations;
-(void)setViewControllers:(id)controllers;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(BOOL)shouldAutorotate;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface NLCallCustomAlertView : UIView {
	id<NCallCustomAlertViewDelegate> _delegate;
	UIImageView* _backgroundImageView;
	UIImageView* _mainImageView;
	UILabel* _messageLabel;
	UIButton* _cancelButton;
	UIButton* _okButton;
}
@property(assign, nonatomic) UIButton* okButton;
@property(assign, nonatomic) UIButton* cancelButton;
@property(assign, nonatomic) UILabel* messageLabel;
@property(retain, nonatomic) UIImageView* mainImageView;
@property(assign, nonatomic) UIImageView* backgroundImageView;
@property(assign, nonatomic) id<NCallCustomAlertViewDelegate> delegate;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)ok;
-(void)cancel;
-(void)configureOkButton:(id)button;
-(void)configureCancelButton:(id)button;
-(void)addSubviews;
-(void)showWithMessage:(id)message delegate:(id)delegate okButtonTitle:(id)title cancelButtonTitle:(id)title4 inView:(id)view;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAArrayUtil : NSObject {
}
+(id)modelArrayFromItems:(id)items modelClassName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface MBDateLabel : UILabel {
	NSDate* mDate;
	SEL mAbsoluteStringSelector;
	SEL mRelativeStringSelector;
	double mRelativeStringThreshold;
	BOOL mShowsRelativeStringForFutureDates;
	BOOL mTicking;
}
@property(retain, nonatomic) NSDate* date;
@property(assign, nonatomic) BOOL showsRelativeStringForFutureDates;
@property(assign, nonatomic) double relativeStringThreshold;
@property(assign, nonatomic) SEL relativeStringSelector;
@property(assign, nonatomic) SEL absoluteStringSelector;
+(void)tick:(id)tick;
+(void)initialize;
-(void).cxx_destruct;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(void)checkSpan:(id)span newText:(id)text;
-(void)tick:(id)tick;
-(void)showDate;
-(void)showAbsolute;
-(void)showRelative;
-(BOOL)isRelativeShowing;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupFriendCell : MBTableViewActionCell {
	ProfileImageView* mProfileImage;
	UIButton* mNickNameButton;
	UIView* mUpLine;
	UIView* mDownLine;
	TalkUserObject* mUser;
}
-(void).cxx_destruct;
-(id)userMid;
-(void)setData:(id)data;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLCallMenuCommonViewController : NLViewController {
	id<NLCallMenuEventDelegate> _eventDelegate;
	id<NLCallMenubarDelegate> _menubarDelegate;
	CGRect _bodyRect;
}
@property(assign, nonatomic) id<NLCallMenubarDelegate> menubarDelegate;
@property(assign, nonatomic) id<NLCallMenuEventDelegate> eventDelegate;
@property(assign, nonatomic) CGRect bodyRect;
-(void)didAddedFromSuperView:(id)superView;
-(void)showAuthenticationAlert;
-(BOOL)isAuthenticationLine;
-(void)animationDimmed;
-(void)animationSearchbarTouched;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface NLSnsIntegrationNoticeView : UIView {
	LineSNSProvider* provider_;
	UIImageView* noticeImage_;
	UILabel* noticeLabel_;
	UIButton* integrateButton_;
}
@property(retain, nonatomic) UIButton* integrateButton;
@property(retain, nonatomic) UILabel* noticeLabel;
@property(retain, nonatomic) UIImageView* noticeImage;
@property(retain, nonatomic) LineSNSProvider* provider;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)updateIntegrateButton;
-(void)updateNoticeLabel;
-(void)setupIntegrateButton;
-(void)setupNoticeLabel;
-(void)setupNoticeImage;
-(void)setupViews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface SNSIntegrationViewController : NLViewController {
	LineSNSProvider* provider_;
}
@property(retain, nonatomic) LineSNSProvider* provider;
-(void).cxx_destruct;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)syncFriendsWithProvider:(id)provider;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MBSystemPostHeaderViewLayout : NSObject <MBCellViewLayout> {
	id mOwner;
	MBProfileImageView* mProfileImageView;
	NMAttributedLabel* mTextView;
	MBTimeLabel* mTimeLabel;
	MBServiceNameButton* mServiceNameButton;
	UIButton* mReadPermissionButton;
}
+(id)systemPostHeaderViewLayout:(id)layout;
-(void).cxx_destruct;
-(CGRect)getServiceNameFrame:(CGSize)frame margin:(CGPoint)margin;
-(CGRect)getTextFrame:(CGSize)frame margin:(CGPoint)margin;
-(id)attributedString;
-(id)textLocation;
-(id)activity;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGRect)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(id)initWithOwner:(id)owner;
@end

__attribute__((visibility("hidden")))
@interface RegistrationSessionManager : NSObject <SMSInfoViewDeleagete> {
	BOOL _processing;
	RegistrationSession* _session;
	LineEmailConfirmationSession* _emailSession;
	NSString* _fetchedCountryCodeFromServer;
	unsigned _currentState;
	UINavigationController* _navigationController;
	unsigned _userOption;
	unsigned _nextStateAfterMigrationPincodeVerified;
	SMSInfoView* _smsInfoView;
	TalkIndicatorView* _indicatorView;
}
@property(retain, nonatomic) TalkIndicatorView* indicatorView;
@property(retain, nonatomic) SMSInfoView* smsInfoView;
@property(assign, nonatomic) unsigned nextStateAfterMigrationPincodeVerified;
@property(assign, nonatomic) BOOL processing;
@property(assign, nonatomic) unsigned userOption;
@property(retain, nonatomic) UINavigationController* navigationController;
@property(assign, nonatomic) unsigned currentState;
@property(retain, nonatomic) NSString* fetchedCountryCodeFromServer;
@property(readonly, assign, nonatomic) int country;
@property(retain, nonatomic) LineEmailConfirmationSession* emailSession;
@property(retain, nonatomic) RegistrationSession* session;
+(BOOL)finishProcessAtThisViewController:(id)thisViewController;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)didConfirmSMSInfoView:(id)view;
-(void)didCancelSMSInfoView:(id)view;
-(void)hideAskingSMSPopup;
-(void)showAskingSMSPopup;
-(void)makeTransitionToState:(unsigned)state inViewController:(id)viewController;
-(void)dismissRegistrationModalViewController:(BOOL)controller completion:(id)completion;
-(void)pushViewController:(id)controller;
-(unsigned)nextState;
-(void)clearSession;
-(BOOL)availableTTS;
-(void)downloadAndUploadProfileImageFromSNSProfile:(id)snsprofile;
-(void)uploadProfileImage;
-(void)handleError;
-(void)fetchCountryCodeFromServer;
-(void)enableLogColors;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface SNSAuthFexin : NSObject <LineSNSDelegate, FexinDelegate> {
	Fexin* mFexin;
	id loginCallback;
	id logoutCallback;
}
@property(copy, nonatomic) id logoutCallback;
@property(copy, nonatomic) id loginCallback;
-(void).cxx_destruct;
-(void)fexinDidLogout:(id)fexin;
-(void)fexinDidloginFail:(id)fail withError:(id)error;
-(void)fexinDidLogin:(id)fexin;
-(BOOL)isExpired;
-(void)handleAuthURL:(id)url;
-(BOOL)canHandleAuthURL:(id)url;
-(void)cancelAuthorizeWithCompletionBlock:(id)completionBlock;
-(void)authorizeWithCompletionBlock:(id)completionBlock;
-(id)getAccessToken;
-(BOOL)isLoggedin;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface Fexin : NSObject <UIWebViewDelegate> {
	NSString* mAppKey;
	NSString* mSecret;
	NSString* mCode;
	NSString* mAccessToken;
	NSDate* mExpirationDate;
	NSString* mRefreshToken;
	LoginDialog* mDialog;
	id<FexinDelegate> mDelegate;
}
@property(assign, nonatomic) id delegate;
@property(copy, nonatomic) NSString* refreshToken;
@property(copy, nonatomic) NSDate* expirationDate;
@property(copy, nonatomic) NSString* accessToken;
@property(copy, nonatomic) NSString* code;
@property(copy, nonatomic) NSString* secret;
@property(copy, nonatomic) NSString* appKey;
-(void)didCancelAuthorization;
-(void)dealloc;
-(id)init;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webViewDidStartLoad:(id)webView;
-(id)parseURLParams:(id)params;
-(void)dialogDidFailedWithError:(id)dialog;
-(void)dialogDidSucceed:(id)dialog;
-(void)dialogSuccessAccessTokenData:(id)data;
-(id)getAccessTokenDataWithURL:(id)url;
-(id)serializeURL:(id)url params:(id)params;
-(id)serializeURL:(id)url params:(id)params httpMethod:(id)method;
-(id)getDateFromString:(id)string;
-(id)getValueStringFromUrl:(id)url forParam:(id)param;
-(void)logout:(id)logout;
-(id)makeAuthorizationURL;
-(id)makeAuthCodeURLWithPermission:(id)permission;
-(void)authorizeWithPermissions:(id)permissions withDelegate:(id)delegate;
-(id)generateURL:(id)url params:(id)params;
-(BOOL)isSessionValid;
@end

__attribute__((visibility("hidden")))
@interface SendImageQualitySelectionView : NLTableViewController {
	NSIndexPath* oldPhotoSizeIndexPath_;
	unsigned initialPhotoSizeType_;
}
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)doActionPhotoSizeSelectionSectionAtRow:(int)row;
-(void)configureSectionPhotoSizeSectionCell:(id)cell atRow:(int)row;
-(void)initializeUI;
-(BOOL)isCurrentPhotoSizeTypeWithRow:(int)row;
-(unsigned)photoSizeTypeOnRow:(int)row;
-(int)rowOnPhotoSizeType:(unsigned)type;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)init;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface NLThemeShopDetailViewController : NLViewController <NLThemePackageManagerDelegate, NLThemeShopDetailViewDelegate, LineNetworkErrorViewDelegate, FriendsPickerViewControllerDelegate, NLProfilePopupViewerDelegate> {
	BOOL _isReceivedGiftProduct;
	BOOL _isClosing;
	NSString* _chatMID;
	LinePaymentReservationResult* _reservationResult;
	NLSafeUnretainedObject* _uSelf;
	LineShopProductDetail* _product;
	NLThemePackage* _package;
	NSString* _billingID;
	NLThemeShopDetailView* _detailView;
	NLProfilePopupViewer* _profilePopupViewer;
	UIActivityIndicatorView* _indicatorView;
	NSMutableDictionary* _previewDic;
}
@property(retain, nonatomic) NSMutableDictionary* previewDic;
@property(assign, nonatomic) BOOL isClosing;
@property(retain, nonatomic) UIActivityIndicatorView* indicatorView;
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(retain, nonatomic) NLThemeShopDetailView* detailView;
@property(retain, nonatomic) NSString* billingID;
@property(retain, nonatomic) NLThemePackage* package;
@property(retain, nonatomic) LineShopProductDetail* product;
@property(retain, nonatomic) NLSafeUnretainedObject* uSelf;
@property(assign, nonatomic) BOOL isReceivedGiftProduct;
@property(retain, nonatomic) LinePaymentReservationResult* reservationResult;
@property(retain, nonatomic) NSString* chatMID;
-(void).cxx_destruct;
-(void)didReceiveMemoryWarning;
-(void)friendsPickerViewController:(id)controller didFinishPickingItems:(id)items;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)retry;
-(void)themePackageEndInstall:(id)install;
-(void)themePackageStartInatall:(id)inatall;
-(void)themePackageDownloadCancel:(id)cancel;
-(void)themePackageDownloadFailed:(id)failed;
-(void)themePackageDownloadEnded:(id)ended;
-(void)themePackageDownloadStarted:(id)started;
-(void)themePackage:(id)package downloaded:(float)downloaded;
-(void)didApplyPackage:(id)package;
-(void)addedBuddyNotification:(id)notification;
-(BOOL)shouldDismissViewController;
-(void)detailView:(id)view didSelectedRetryButtonPreviewImageType:(int)type;
-(void)detailView:(id)view didSelectedPreviewImageType:(int)type;
-(void)detailView:(id)view didSelectedButtonType:(int)type;
-(id)detailViewProduct;
-(void)previewImagesReload:(BOOL)reload;
-(void)apply:(BOOL)apply;
-(void)update:(BOOL)update;
-(void)downloadProduct;
-(void)download:(BOOL)download;
-(void)purchaseProduct;
-(void)purchase:(BOOL)purchase;
-(void)present:(BOOL)present;
-(void)onTapThemeShopButton:(id)button;
-(BOOL)needShowImageLoadingErrorView;
-(void)requestImageWithURL:(id)url completionBlock:(id)block;
-(void)requestPreviewImageWithType:(int)type;
-(void)requestPreviewImageAll;
-(void)requestDetailIcon;
-(void)requestInfos;
-(void)processProductDetail:(id)detail error:(id)error uSelf:(id)aSelf;
-(void)updateProductWithShowIndicatorView:(BOOL)showIndicatorView;
-(void)hideIndicator;
-(void)showIndicator;
-(void)showMaintenanceViewWithError:(id)error uSelf:(id)aSelf;
-(void)showNetworkError;
-(void)reloadPackageStatus;
-(void)initDetailView;
-(BOOL)isNJPurchaseError:(id)error;
-(int)previewIndexWithImageType:(int)imageType;
-(id)packageIDString;
-(id)titleString;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithPresentedProduct:(id)presentedProduct;
-(id)initWithProduct:(id)product;
-(id)initWithBillingID:(id)billingID;
-(id)initWithProductID:(id)productID;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallSpotSearchViewController : NLCallMenuCommonViewController <PSTCollectionViewDelegateFlowLayout, PSTCollectionViewDelegate, PSTCollectionViewDataSource, UISearchBarDelegate, UISearchDisplayDelegate, UITableViewDataSource, UITableViewDelegate, UIScrollViewDelegate, CLLocationManagerDelegate, MKMapViewDelegate> {
	double searchInterval_;
	NSTimer* timer_;
	LocationDetailAnnotation* currentAnnotation_;
	BOOL mShowNetworkAlert;
	NLCallSearchBar* _searchBar;
	UIScrollView* _scrollViewBody;
	MKMapView* _mapView;
	UIButton* _moveMyLocationButton;
	UITableView* _tableViewSearchResult;
	UIButton* _buttonDimm;
	UIView* _collectionParentView;
	PSUICollectionView_* _collectionView;
	NLCallEmptyDataView* _emptyView;
	UIBarButtonItem* _leftBarItem;
	NSArray* _mArraySearchResult;
	int _selectedCategory;
	LineLocation* _currentLocation;
	CLLocationManager* _locationManager;
	float _tableViewDefaultRectHeight;
	LEGYRequestResponseHandler* _handler;
	CGRect _searchBarDefaultRect;
	CGRect _scrollViewDefaultRect;
}
@property(assign, nonatomic) LEGYRequestResponseHandler* handler;
@property(assign, nonatomic) CGRect scrollViewDefaultRect;
@property(assign, nonatomic) float tableViewDefaultRectHeight;
@property(assign, nonatomic) CGRect searchBarDefaultRect;
@property(retain, nonatomic) CLLocationManager* locationManager;
@property(retain, nonatomic) LineLocation* currentLocation;
@property(assign, nonatomic) int selectedCategory;
@property(retain, nonatomic) NSArray* mArraySearchResult;
@property(assign, nonatomic) UIBarButtonItem* leftBarItem;
@property(assign, nonatomic) NLCallEmptyDataView* emptyView;
@property(retain, nonatomic) PSUICollectionView_* collectionView;
@property(retain, nonatomic) UIView* collectionParentView;
@property(assign, nonatomic) UIButton* buttonDimm;
@property(assign, nonatomic) UITableView* tableViewSearchResult;
@property(assign, nonatomic) UIButton* moveMyLocationButton;
@property(assign, nonatomic) MKMapView* mapView;
@property(assign, nonatomic) UIScrollView* scrollViewBody;
@property(assign, nonatomic) NLCallSearchBar* searchBar;
-(void).cxx_destruct;
-(void)calling:(id)calling;
-(void)searchModeOff;
-(void)setSearchResultMode;
-(void)searchModeOn;
-(void)refreshEmptyViews;
-(void)animationDimmed;
-(void)animationSearchbarTouched;
-(void)callReRectParentView:(int)view;
-(void)setSearchMode:(int)mode;
-(void)didClickedCategories:(id)categories;
-(void)actionDimm:(id)dimm;
-(void)actionMenuEvent:(id)event;
-(void)searchSpotDB;
-(void)resetSearchState;
-(float)collectionView:(id)view layout:(id)layout minimumLineSpacingForSectionAtIndex:(int)index;
-(float)collectionView:(id)view layout:(id)layout minimumInteritemSpacingForSectionAtIndex:(int)index;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)refreshBodyViews;
-(void)createCategoriCollectionView;
-(void)scrollViewMoveToTarget:(CGRect)target;
-(void)showCurrentAnnotation;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
-(void)currentLocationAction:(id)action;
-(void)initSubviews;
-(void)initContents;
-(void)initSetting;
-(void)initViewController;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)didAddedFromSuperView:(id)superView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)initDefault;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLModalPanel : UIView {
	struct {
		unsigned createdTime : 1;
		unsigned modifiedTime : 1;
		unsigned status : 1;
		unsigned settings : 1;
	} delegateFlags_;
	UIView* contentView_;
	id<NLModalPanelDelegate> delegate_;
}
@property(assign, nonatomic) id<NLModalPanelDelegate> delegate;
@property(retain, nonatomic) UIView* contentView;
+(void)closePanelIfPopuped;
+(void)destoryMainPanel;
+(void)makeMainPanel;
+(id)mainPanel;
-(void).cxx_destruct;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)hideModalWithAnimated:(BOOL)animated;
-(void)showModalWithAnimated:(BOOL)animated;
-(void)showModalWithAnimated:(BOOL)animated inView:(id)view;
-(void)actionHideByTouchingBackgroundView;
-(id)viewForContent;
-(void)layoutSubviews;
-(void)setupContentView;
-(void)setupViews;
-(id)description;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBMergePostHeaderViewLayout : NSObject <MBCellViewLayout> {
	id owner;
	NMAttributedLabel* textView;
	UIButton* actionButton;
	UIView* lineView;
	UIImageView* arrowImageView;
}
+(id)mergePostHeaderViewLayout:(id)layout;
-(void).cxx_destruct;
-(CGRect)getTextFrame:(CGSize)frame margin:(CGPoint)margin;
-(CGSize)cachedTextSize;
-(id)attributedString;
-(id)activity;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGRect)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(id)initWithOwner:(id)owner;
@end

__attribute__((visibility("hidden")))
@interface LGFilterListView : UIView <UITableViewDelegate, UITableViewDataSource> {
	id _delegate;
	LGHorizontalTableView* _tableView;
	UIImage* _originalImage;
	UIImage* _originalThumbnail;
	LGImageFilterHelper* _filterHelper;
	unsigned _selectedIndex;
}
@property(assign, nonatomic) unsigned selectedIndex;
@property(retain, nonatomic) LGImageFilterHelper* filterHelper;
@property(retain, nonatomic) UIImage* originalThumbnail;
@property(retain, nonatomic) UIImage* originalImage;
@property(retain, nonatomic) LGHorizontalTableView* tableView;
@property(assign, nonatomic) __weak id delegate;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)cancelCurrentFilterJob;
-(void)rotateThumbnails:(int)thumbnails;
-(void)resetFilterToOriginalImage;
-(void)setImageForFilter:(id)filter filterIndex:(unsigned)index imageOrientation:(int)orientation;
-(id)makeOriginalThumbnail:(int)thumbnail;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame showBanner:(BOOL)banner delegate:(id)delegate;
-(void)reloadThumbnailsWithAnimation;
-(id)footerViewForLineCameraBanner;
-(id)createBannerLabelWithText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface LASaveProgressView : UIView {
	id<LASaveProgressViewDelegate> _delegate;
	LAUploadProgressView* _progressView;
	UIButton* _cancelButton;
	UIImageView* _backgroundImageView;
}
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) LAUploadProgressView* progressView;
@property(assign, nonatomic) id<LASaveProgressViewDelegate> delegate;
-(void).cxx_destruct;
-(void)setValue:(float)value total:(float)total currentProgress:(float)progress faiiled:(BOOL)faiiled animated:(BOOL)animated;
-(void)hide;
-(void)show;
-(void)didTapCancelButton:(id)button;
-(void)layoutSubviews;
-(CGRect)currentBounds;
-(void)updateTransformAnimated:(BOOL)animated;
-(void)didChangeStatusBarOrientation:(id)orientation;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface NLSnsConfirmModal : NLModalPanel {
	UIImageView* _bannerImage;
	UIImageView* _seperatorImage;
	UILabel* _mainLabel;
	UILabel* _subLabel;
	UIButton* _closeButton;
	UIButton* _cancelButton;
	UIButton* _actionButton;
	id _actionEventBlock;
	id _cancelEventBlock;
}
@property(copy, nonatomic) id cancelEventBlock;
@property(copy, nonatomic) id actionEventBlock;
@property(retain, nonatomic) UIButton* actionButton;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UIButton* closeButton;
@property(retain, nonatomic) UILabel* subLabel;
@property(retain, nonatomic) UILabel* mainLabel;
@property(retain, nonatomic) UIImageView* seperatorImage;
@property(retain, nonatomic) UIImageView* bannerImage;
-(void).cxx_destruct;
-(void)actionDoAction:(id)action;
-(void)actionCancel:(id)cancel;
-(void)actionClose:(id)close;
-(void)layoutSubviews;
-(void)actionHideByTouchingBackgroundView;
-(id)viewForContent;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface SinaWeibo : NSObject <SinaWeiboAuthorizeViewDelegate, SinaWeiboRequestDelegate> {
	NSString* userID;
	NSString* accessToken;
	NSDate* expirationDate;
	id<SinaWeiboDelegate> delegate;
	NSString* appKey;
	NSString* appSecret;
	NSString* appRedirectURI;
	NSString* ssoCallbackScheme;
	SinaWeiboRequest* request;
	NSMutableSet* requests;
	BOOL ssoLoggingIn;
	NSString* refreshToken;
}
@property(copy, nonatomic) NSString* appRedirectURI;
@property(copy, nonatomic) NSString* appSecret;
@property(copy, nonatomic) NSString* appKey;
@property(assign, nonatomic) id<SinaWeiboDelegate> delegate;
@property(copy, nonatomic) NSString* ssoCallbackScheme;
@property(copy, nonatomic) NSString* refreshToken;
@property(copy, nonatomic) NSDate* expirationDate;
@property(copy, nonatomic) NSString* accessToken;
@property(copy, nonatomic) NSString* userID;
-(BOOL)handleOpenURL:(id)url;
-(void)applicationDidBecomeActive;
-(void)request:(id)request didFinishLoadingWithResult:(id)result;
-(void)request:(id)request didFailWithError:(id)error;
-(void)authorizeViewDidCancel:(id)authorizeView;
-(void)authorizeView:(id)view didFailWithErrorInfo:(id)errorInfo;
-(void)authorizeView:(id)view didRecieveAuthorizationCode:(id)code;
-(id)requestWithURL:(id)url params:(id)params httpMethod:(id)method delegate:(id)delegate;
-(void)logOut;
-(void)logIn;
-(BOOL)isAuthValid;
-(BOOL)isAuthorizeExpired;
-(BOOL)isLoggedIn;
-(void)logInDidFailWithErrorInfo:(id)logIn;
-(void)logInDidFinishWithAuthInfo:(id)logIn;
-(void)logInDidCancel;
-(void)notifyTokenExpired:(id)expired;
-(void)requestDidFailWithInvalidToken:(id)request;
-(void)requestDidFinish:(id)request;
-(void)requestAccessTokenWithAuthorizationCode:(id)authorizationCode;
-(id)_getDateFromString:(id)string;
-(id)_urlSchemeString;
-(void)removeAuthData;
-(void)dealloc;
-(id)initWithAppKey:(id)appKey appSecret:(id)secret appRedirectURI:(id)uri ssoCallbackScheme:(id)scheme andDelegate:(id)delegate;
-(id)initWithAppKey:(id)appKey appSecret:(id)secret appRedirectURI:(id)uri andDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface SinaWeiboAuthorizeView : UIView <UIWebViewDelegate> {
	UIWebView* webView;
	UIButton* closeButton;
	UIView* modalBackgroundView;
	UIActivityIndicatorView* indicatorView;
	int previousOrientation;
	id<SinaWeiboAuthorizeViewDelegate> delegate;
	NSString* appRedirectURI;
	NSDictionary* authParams;
}
@property(assign, nonatomic) id<SinaWeiboAuthorizeViewDelegate> delegate;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)cancel;
-(void)hide;
-(void)_hide;
-(void)show;
-(void)showWebView;
-(void)load;
-(void)hideIndicator;
-(void)showIndicator;
-(void)removeObservers;
-(void)addObservers;
-(void)bounce2AnimationStopped;
-(void)bounce1AnimationStopped;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)updateWebOrientation;
-(void)sizeToFitOrientation:(BOOL)fitOrientation;
-(CGAffineTransform)transformForOrientation;
-(BOOL)shouldRotateToOrientation:(int)orientation;
-(id)initWithAuthParams:(id)authParams delegate:(id)delegate;
-(void)dealloc;
-(id)init;
-(void)drawRect:(CGRect)rect;
-(void)strokeLines:(CGRect)lines stroke:(const float*)stroke;
-(void)drawRect:(CGRect)rect fill:(const float*)fill radius:(float)radius;
-(void)addRoundedRectToPath:(CGContextRef)path rect:(CGRect)rect radius:(float)radius;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoListTableView : UITableView <UITableViewDataSource, UITableViewDelegate, LAPhotoCellDelegate, LAPhotoCellDataSource, LAPhotoListHeaderViewDelegate> {
	id viewDelegate;
	NSString* _groupID;
	LAPhotoListViewController* _viewController;
	LAAlbum* _album;
	LAPhotoListHeaderView* _headerView;
	LAPullDownHeaderView* _pullDownView;
	LAAlbumNoPhotosView* _noPhotosView;
	NSString* _albumID;
	UIActivityIndicatorView* _indicatorView;
	LAErrorMessageView* _errorView;
	NSError* _error;
}
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) LAErrorMessageView* errorView;
@property(retain, nonatomic) UIActivityIndicatorView* indicatorView;
@property(retain, nonatomic) NSString* albumID;
@property(retain, nonatomic) LAAlbumNoPhotosView* noPhotosView;
@property(retain, nonatomic) LAPullDownHeaderView* pullDownView;
@property(retain, nonatomic) LAPhotoListHeaderView* headerView;
@property(retain, nonatomic) LAAlbum* album;
@property(assign, nonatomic) LAPhotoListViewController* viewController;
@property(retain, nonatomic) NSString* groupID;
@property(assign, nonatomic) id viewDelegate;
-(void).cxx_destruct;
-(void)photoListHeaderViewDidChageFoldState:(id)photoListHeaderView;
-(BOOL)scrollToPhotoId:(id)photoId;
-(void)updateAlbumInfo:(id)info error:(id)error animated:(BOOL)animated;
-(void)setErrorViewIfNeeded;
-(void)setNoPhotosViewIfNeeded;
-(void)setTableHeaderView;
-(void)showExtraViewsIfNeeded;
-(void)clearViewAfterRemoveingCache;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)updateHeaderWillBeginWithUI:(BOOL)updateHeader;
-(void)pullDownScrollUpdateEnd;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)photosAtRange:(NSRange)range;
-(BOOL)photoCellIsUploading;
-(id)photosForPhotoCell;
-(void)photoCellDidTapImageButtonAtIndex:(unsigned)photoCell;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame albumID:(id)anId groupId:(id)anId3 viewController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface MBNoDataMessageView : MBMessageView {
	UIImageView* mBackgroundView;
	UIImageView* mCurView;
	UIImageView* mImageView;
	UILabel* mTitleLabel;
	UILabel* mTextLabel;
}
+(id)noDataMessageView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeViewController : MBPostViewController <UITableViewDelegate, UITableViewDataSource, MBTableViewPullDelegate, MBMyhomeManagerDelegate, NSFetchedResultsControllerDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, MBLikeLayerViewDelegate, MBActorObserving, UIActionSheetDelegate> {
	MBMyHomeViewControllerActions* mMyHomeActions;
	MBTableView* mTableView;
	MBLikeLayerView* mLikeLayer;
	MBMyhomeManager* mMyhomeManager;
	MBMyHomePublicNotiLayer* mPublicNotiLayer;
	BOOL mIsInvalidUpdate;
	NSDictionary* mActionSheetInfo;
	BOOL mIsWillAppear;
	BOOL mIsShowPhotoViewer;
	MBTimelineTopSlideView* mTopSlideView;
}
@property(readonly, assign, nonatomic) MBTableView* tableView;
@property(readonly, assign, nonatomic) MBLikeLayerView* likeLayer;
@property(readonly, assign, nonatomic) MBMyhomeManager* myhomeManager;
-(void).cxx_destruct;
-(void)scrollToTop;
-(void)didTapped:(id)tapped;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)postDidShare:(id)post;
-(void)postWillShare:(id)post;
-(void)postDidCreate:(id)post;
-(void)likeLayerView:(id)view didLikeButtonActionWithLikeType:(id)likeType;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)activityListManager:(id)manager didFinishDeletingActivity:(id)activity error:(id)error;
-(void)activityListManager:(id)manager didFinishCreatingLikeOnActivity:(id)activity error:(id)error;
-(void)myhomeManager:(id)manager didFinishUploadUpdatingMyhomeWithError:(id)error;
-(void)dataManager:(id)manager didFinishFetchingWithError:(id)error;
-(void)myhomeManager:(id)manager didFinishUpdatingMyhomeWithError:(id)error;
-(void)dataManager:(id)manager didFinishUpdatingWithError:(id)error;
-(void)didFinishLoadingWithError:(id)error;
-(void)startFetch:(id)fetch fetchCount:(int)count;
-(void)startUpdate:(id)update;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)heightForMessageCell;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)officialProfileCellForRowAtIndexPath:(id)indexPath;
-(id)messageCellForRowAtIndexPath:(id)indexPath;
-(id)messageErrorCell:(id)cell sCount:(int)count;
-(id)postCellForRowAtIndexPath:(id)indexPath aTableView:(id)view;
-(void)redrawCell:(id)cell;
-(id)coverCellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tryPreload;
-(void)tryPreloadWithIndexPath:(id)indexPath;
-(void)reloadDataTableView;
-(void)restoreNotificationLayer;
-(void)removeNotificationLayer;
-(void)updateAndClearNewPost;
-(void)reLayoutVisibleCells;
-(void)update;
-(BOOL)isHomeManager;
-(void)viewWillDisappearWithPhotoViewer:(id)view;
-(void)viewWillAppearWithPhotoViewer:(id)view;
-(void)setupNotificationForPostCreate;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)willEnterForeground:(id)foreground;
-(void)didEnterBackground:(id)background;
-(void)setHeaderViewDate;
-(void)setTopSlideView;
-(void)setTimelineContentInset;
-(void)addedBuddyNotification:(id)notification;
-(void)dealloc;
-(id)initWithMID:(id)mid sourceType:(int)type;
-(void)setInvalidUpdate:(BOOL)update;
-(void)setupShadow;
-(void)setTitle:(id)title;
-(void)setupNavigationRightButton;
-(void)setupNavigationBar;
-(void)setupTableviewFooter;
-(void)setupTableviewHeader;
-(void)showMyHomeErrorAlert:(id)alert;
@end

__attribute__((visibility("hidden")))
@interface NLHowToShowTimelineTipView : UIView <NL15SliceImageViewDelegate> {
	NL15SliceImageView* sliceView;
	NSTimer* timer_;
}
-(void).cxx_destruct;
-(id)getTipBalloon;
-(void)close;
-(void)tapped:(id)tapped;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoBottomBarView : LABottomBarView <LABottomBarViewDelegate> {
	unsigned _type;
	id<LAPhotoBottomBarViewDelegate> _photoBottomBarDelegate;
	UIButton* _infoButton;
	UIButton* _shareButton;
	UIButton* _editButton;
}
@property(retain, nonatomic) UIButton* editButton;
@property(retain, nonatomic) UIButton* shareButton;
@property(retain, nonatomic) UIButton* infoButton;
@property(assign, nonatomic) id<LAPhotoBottomBarViewDelegate> photoBottomBarDelegate;
@property(assign, nonatomic) unsigned type;
-(void).cxx_destruct;
-(void)setButtonsEnabled:(BOOL)enabled actionButtonsEnabled:(BOOL)enabled2;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)bottomBarView:(id)view didTapButtonAtIndex:(unsigned)index;
-(void)didTapEditButton:(id)button;
-(void)didTapShareButton:(id)button;
-(void)didTapInfoButton:(id)button;
-(void)removeAllButtons;
-(void)addSaveToCameraRollButton;
-(void)addSaveInAlbumButton;
-(void)addSelectButton;
-(void)addEditButton;
-(void)addShareButton;
-(void)addButtons;
-(void)setupButtonAlignment;
-(id)initWithFrame:(CGRect)frame type:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface SinaWeiboRequest : NSObject {
	SinaWeibo* sinaweibo;
	NSString* url;
	NSString* httpMethod;
	NSDictionary* params;
	NSURLConnection* connection;
	NSMutableData* responseData;
	id<SinaWeiboRequestDelegate> delegate;
}
@property(assign, nonatomic) id<SinaWeiboRequestDelegate> delegate;
@property(retain, nonatomic) NSDictionary* params;
@property(retain, nonatomic) NSString* httpMethod;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) SinaWeibo* sinaweibo;
+(id)requestWithAccessToken:(id)accessToken url:(id)url httpMethod:(id)method params:(id)params delegate:(id)delegate;
+(id)requestWithURL:(id)url httpMethod:(id)method params:(id)params delegate:(id)delegate;
+(id)serializeURL:(id)url params:(id)params httpMethod:(id)method;
+(id)getParamValueFromUrl:(id)url paramName:(id)name;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)disconnect;
-(void)connect;
-(void)failedWithError:(id)error;
-(id)errorWithCode:(int)code userInfo:(id)info;
-(id)parseJSONData:(id)data error:(id*)error;
-(void)handleResponseData:(id)data;
-(id)postBodyHasRawData:(BOOL*)data;
-(void)appendUTF8Body:(id)body dataString:(id)string;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface SFHFKeychainUtils : NSObject {
}
+(BOOL)deleteItemForUsername:(id)username andServiceName:(id)name error:(id*)error;
+(BOOL)storeUsername:(id)username andPassword:(id)password forServiceName:(id)serviceName updateExisting:(BOOL)existing error:(id*)error;
+(id)getPasswordForUsername:(id)username andServiceName:(id)name error:(id*)error;
@end

__attribute__((visibility("hidden")))
@interface RegistrationSNSOldDeviceWillBeClearedViewController : RegistrationErrorViewController {
}
-(void)cancelButtonTapped:(id)tapped;
-(void)doneButtonTapped:(id)tapped;
-(void)viewWillAppear:(BOOL)view;
-(void)setupLocalizedStrings;
@end

__attribute__((visibility("hidden")))
@interface MBStickerProfileListView : MBBaseChildCellView {
	MBActivity* mActivity;
	int mMaxLikeCount;
	NSArray* mStickerProfileList;
	NSMutableArray* mStickerProfileViewList;
	int mPostViewType;
}
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
+(id)stickerProfileListViewWithType:(int)type;
-(void).cxx_destruct;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)initWithType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface LineSNSIntegrateManager : NSObject {
}
+(void)deleteAllSNSTokens;
+(void)checkSnsIdAndUpdateAccessTokenWithSnsType:(int)snsType completionBlock:(id)block;
+(void)logoutWithCompletionBlock:(id)completionBlock param:(id)param;
+(void)loginWithCompletionBlock:(id)completionBlock type:(unsigned)type param:(id)param;
@end

__attribute__((visibility("hidden")))
@interface ImageMapDrawObject : NSObject {
	NSString* _srcName;
	unsigned _type;
	ImageMapImageObject* _imageObject;
	CGRect _rect;
}
@property(retain, nonatomic) ImageMapImageObject* imageObject;
@property(readonly, assign, nonatomic) CGRect rect;
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, retain, nonatomic) NSString* srcName;
-(void).cxx_destruct;
-(id)description;
-(id)initWithSourceName:(id)sourceName type:(unsigned)type rect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface NLCallTopMenuButton : UIButton {
}
-(id)titleText;
-(id)buttonHiglightImage;
-(id)buttonNormalImage;
-(void)initViews;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface RegistrationSNSUserNotFoundViewController : RegistrationErrorViewController {
}
-(void)cancelButtonTapped:(id)tapped;
-(void)doneButtonTapped:(id)tapped;
-(void)viewWillAppear:(BOOL)view;
-(void)setupLocalizedStrings;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoImageView : UIScrollView <UIScrollViewDelegate> {
	id mPhotoImageViewDelegate;
	int mIndex;
	BOOL mIsPhotoImage;
	UIImageView* mImageView;
	MBLoadingIndicatorView* mLoadingIndicatorView;
	MBPhotoRetryView* mReloadView;
	int mScrollDirection;
	CGPoint mLastPoint;
	BOOL mMouseMoving;
}
@property(readonly, assign, nonatomic) UIImageView* imageView;
@property(readonly, assign, nonatomic) BOOL isPhotoImage;
@property(assign, nonatomic) int index;
@property(assign, nonatomic) id photoImageViewDelegate;
-(void).cxx_destruct;
-(id)image;
-(id)photoImage;
-(void)layoutImage;
-(void)clearImage;
-(void)setThumbnailImage:(id)image scaleToFill:(BOOL)fill;
-(void)setPhotoImage:(id)image;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)finishVerticalScroll;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)handleTap:(id)tap;
-(void)handleDoubleTap:(id)tap;
-(void)hideReloadMessage;
-(void)showReloadMessage;
-(void)hideActivityIndicator;
-(void)showActivityIndicator;
-(void)setMaxMinZoomScalesForCurrentBounds;
-(float)zoomScaleForImageSize:(CGSize)imageSize;
-(void)setImage:(id)image;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface RegistrationErrorViewController : NLViewController {
	UIView* _contentView;
	UIImageView* _imageView;
	UILabel* _summaryLabel;
	UILabel* _descriptionLabel;
	UIButton* _doneButton;
	UIButton* _cancelButton;
}
@property(assign, nonatomic) UIButton* cancelButton;
@property(assign, nonatomic) UIButton* doneButton;
@property(assign, nonatomic) UILabel* descriptionLabel;
@property(assign, nonatomic) UILabel* summaryLabel;
@property(assign, nonatomic) UIImageView* imageView;
@property(assign, nonatomic) UIView* contentView;
-(void)cancelButtonTapped:(id)tapped;
-(void)doneButtonTapped:(id)tapped;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)configureCancelButton:(id)button;
-(void)configureDoneButton:(id)button;
-(void)configureDescriptionLabel:(id)label;
-(void)configureSummaryLabel:(id)label;
-(void)configureImageView:(id)view;
-(void)configureSubviews;
-(void)configureNavigationItem;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AccountManagementDeleteOldAccountViewController : RegistrationErrorViewController {
	id doneBlock;
	id cancelBlock;
}
@property(copy, nonatomic) id cancelBlock;
@property(copy, nonatomic) id doneBlock;
-(void).cxx_destruct;
-(void)cancelButtonTapped:(id)tapped;
-(void)doneButtonTapped:(id)tapped;
-(void)setupLocalizedStrings;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface MBMaintenanceMessageView : MBMessageView {
	UIImageView* mImageView;
	UILabel* mTitleLabel;
	UILabel* mMessageLabel;
	UILabel* mInfoLabel;
	UILabel* mTimeLabel;
}
+(id)maintenanceMessageView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setServiceName:(id)name;
-(void)setBeginDate:(id)date endDate:(id)date2;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface RegistrationPhoneOrSNSVerificationRequiredViewController : RegistrationErrorViewController {
	LineUnderLineLabel* _withdrawalLabel;
	UIButton* _transparentWithdrawalButton;
	UIView* _chineseSNSButtonsView;
}
@property(assign, nonatomic) UIView* chineseSNSButtonsView;
@property(assign, nonatomic) UIButton* transparentWithdrawalButton;
@property(assign, nonatomic) LineUnderLineLabel* withdrawalLabel;
@property(readonly, assign, nonatomic) BOOL is360;
-(void)withdrawalButtonTapped:(id)tapped;
-(void)connectToSNS:(int)sns;
-(void)feixinButtonTapped:(id)tapped;
-(void)renrenButtonTapped:(id)tapped;
-(void)weiboButtonTapped:(id)tapped;
-(void)cancelButtonTapped:(id)tapped;
-(void)doneButtonTapped:(id)tapped;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)setupLocalizedStrings;
-(void)configureCancelButton:(id)button;
-(void)addWithdrawalButton;
-(void)addChineseSNSButtonsView;
-(void)configureSubviews;
-(void)updateLayouts;
@end

__attribute__((visibility("hidden")))
@interface MBAPIOperation : MBURLConnectionOperation {
	MBAPIOperationInternal* mInternal;
}
+(id)internalOperationWithRequest:(id)request completion:(id)completion;
+(id)operationWithRequest:(id)request completion:(id)completion;
-(void).cxx_destruct;
-(void)didFinishLoading;
-(void)didFail;
-(void)didCancel;
-(void)willStart;
-(id)initWithInternal:(id)internal;
@end

__attribute__((visibility("hidden")))
@interface MBAPIOperationInternal : NSObject {
	MBAPIRequest* mAPIRequest;
	id mBlock;
	NSData* mData;
	NSURLResponse* mResponse;
	NSError* _error;
	double startTime;
}
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) NSData* data;
@property(retain, nonatomic) NSURLResponse* response;
@property(assign, nonatomic) double startTime;
@property(copy, nonatomic) id block;
@property(retain, nonatomic) MBAPIRequest* apiRequest;
+(id)create:(id)create completion:(id)completion;
-(void).cxx_destruct;
-(id)responseDescription;
-(void)didFinishLoading;
-(void)didFail;
-(void)didCancel;
-(void)willStart;
@end

__attribute__((visibility("hidden")))
@interface NLCallAddressViewController : NLCallMenuCommonViewController <UISearchBarDelegate, UISearchDisplayDelegate, UITableViewDataSource, UITableViewDelegate> {
	BOOL _isShowingAuthorizationAlert;
	dispatch_queue_s* _dImageLoadingQueue;
	void* _addressBook;
	BOOL _isDimmedMode;
	UIScrollView* _scrollView;
	NLCallSearchBar* _searchBar;
	UIButton* _buttonAddFriendsType2;
	UITableView* _tableView;
	UIButton* _buttonDimm;
	UIView* _emptyView;
	unsigned _countTotalContact;
	NSArray* _contactTestCallArray;
	NSArray* _contactAddressArray;
	NSMutableArray* _filteredContacts;
	NSString* _filteringText;
	CGRect _defaultTableRect;
	CGRect _tableViewDefaultRect;
}
@property(copy, nonatomic) NSString* filteringText;
@property(retain, nonatomic) NSMutableArray* filteredContacts;
@property(retain, nonatomic) NSArray* contactAddressArray;
@property(retain, nonatomic) NSArray* contactTestCallArray;
@property(assign, nonatomic) CGRect tableViewDefaultRect;
@property(assign, nonatomic) unsigned countTotalContact;
@property(assign, nonatomic) BOOL isDimmedMode;
@property(assign, nonatomic) CGRect defaultTableRect;
@property(assign, nonatomic) UIView* emptyView;
@property(assign, nonatomic) UIButton* buttonDimm;
@property(assign, nonatomic) UITableView* tableView;
@property(assign, nonatomic) UIButton* buttonAddFriendsType2;
@property(assign, nonatomic) NLCallSearchBar* searchBar;
@property(assign, nonatomic) UIScrollView* scrollView;
-(void).cxx_destruct;
-(void)addressBookDidSynchronize:(id)addressBook;
-(id)selectUserInfo:(id)info;
-(void)calling:(id)calling;
-(void)actionShowAddFriends:(id)friends;
-(void)actionShowSpotDB:(id)db;
-(void)scrollViewMoveToTarget:(CGRect)target;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)setColorBeforeSearcheMode;
-(void)setColorSearchedMode;
-(void)dimmedAfterChangeBackgroundColor:(BOOL)color;
-(void)actionDimmed:(id)dimmed;
-(void)updateSearchResult;
-(void)createTestCallContact;
-(void)animationDimmed;
-(void)animationSearchbarTouched;
-(void)callReRectParentViewStart;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchLocalAddress;
-(id)imageWithLUID:(id)luid withMid:(id)mid;
-(void)reloadPersonTable;
-(void)searchAddressLists;
-(void)loadPersons;
-(void)initAddressBook;
-(void)refreshBodyViews;
-(void)searchAddressBookWithKeyword:(id)keyword;
-(void)initSubviewsTableView;
-(void)initSubviews;
-(void)initContents;
-(void)initSetting;
-(void)initViewController;
-(void)setCellsBackgroundImageWithCell:(id)cell atIndexPath:(id)indexPath;
-(void)viewDidUnload;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface RegistrationAsking360UpdateViewController : NLViewController <UIAlertViewDelegate> {
	UILabel* _textLabel;
	UIView* _contentView;
	UIImageView* _contentBackgroundView;
	UILabel* _contentLabel;
	UIButton* _doneButton;
	UIButton* _cancelButton;
}
@property(assign, nonatomic) UIButton* cancelButton;
@property(assign, nonatomic) UIButton* doneButton;
@property(assign, nonatomic) UILabel* contentLabel;
@property(assign, nonatomic) UIImageView* contentBackgroundView;
@property(assign, nonatomic) UIView* contentView;
@property(assign, nonatomic) UILabel* textLabel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)cancelButtonTapped:(id)tapped;
-(void)doneButtonTapped:(id)tapped;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)openHelp:(id)help;
-(void)layoutSubviews;
-(void)setupLocalizedStrings;
-(void)configureCancelButton:(id)button;
-(void)configureDoneButton:(id)button;
-(void)configureContentLabel:(id)label;
-(void)configureContentBackgroundImageView:(id)view;
-(void)configureContentView:(id)view;
-(void)configureTextLabel:(id)label;
-(void)configureSubviews;
-(void)configureNavigationItem;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface RestoreAccountSNSViewController : NLTableViewController <MigrationCodeViewControllerDelegate> {
	NSArray* providers_;
	TalkIndicatorView* _indicatorView;
	NSString* _SNSAccessToken;
	NSString* _migrationPincodeSessionId;
	LineSNSProvider* _SNSProvider;
}
@property(retain, nonatomic) LineSNSProvider* SNSProvider;
@property(retain, nonatomic) NSString* migrationPincodeSessionId;
@property(retain, nonatomic) NSString* SNSAccessToken;
@property(retain, nonatomic) TalkIndicatorView* indicatorView;
-(void).cxx_destruct;
-(void)registerWithSnsId;
-(void)migrationCodeViewController:(id)controller didFinishWithPincode:(id)pincode;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DeletePrevSnsAccountInfoViewController : RegistrationErrorViewController {
}
@property(readonly, assign, nonatomic) BOOL isCN;
-(void)cancelButtonTapped:(id)tapped;
-(void)doneButtonTapped:(id)tapped;
-(void)setupLocalizedStrings;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface RegistrationStateflowScenarioPhone : NSObject {
}
+(unsigned)nextState;
@end

__attribute__((visibility("hidden")))
@interface MBPostFeedbackView : MBBaseChildCellView {
	MBActivity* mActivity;
	int mPostViewType;
	UIImageView* mDotView;
	UIButton* mLikeTextButton;
	UIButton* mCommentTextButton;
	float mLikeTextButtonWidth;
	float mCommentTextButtonWidth;
}
+(id)postFeedbackViewWithType:(int)type;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(float)textButtonSize:(id)size;
-(id)createTextButton:(id)button text:(id)text;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)setCellData:(id)data;
-(id)activity;
-(id)initWithType:(int)type;
@end

__attribute__((visibility("hidden")))
@interface RegistrationStateflowScenarioEmail : NSObject {
}
+(unsigned)nextState;
@end

__attribute__((visibility("hidden")))
@interface RegistrationStateflowScenarioSNS : NSObject {
}
+(unsigned)nextState;
@end

__attribute__((visibility("hidden")))
@interface RegistrationStateflowScenarioAppUpdate : NSObject {
}
+(unsigned)nextState;
@end

__attribute__((visibility("hidden")))
@interface RegistrationStateflowScenarioProfileUpdate : NSObject {
}
+(unsigned)nextState;
@end

__attribute__((visibility("hidden")))
@interface LineTask : NSObject {
	int priority;
	id task;
}
@property(copy, nonatomic) id task;
@property(assign, nonatomic) int priority;
-(void).cxx_destruct;
-(int)compare:(id)compare;
-(id)initWithPriority:(int)priority task:(id)task;
@end

__attribute__((visibility("hidden")))
@interface LineErrorManager : NSObject {
	NSMutableDictionary* errorDictionary;
	NSMutableDictionary* taskDictionary;
}
@property(retain, nonatomic) NSMutableDictionary* taskDictionary;
@property(retain, nonatomic) NSMutableDictionary* errorDictionary;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)flushError:(id)error;
-(void)processAlert:(id)alert;
-(id)addAction:(id)action priority:(int)priority withList:(id)list;
-(void)setActionList:(id)list withKey:(id)key;
-(id)actionsList:(id)list;
-(void)addActionBlock:(id)block priority:(int)priority withError:(id)error;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLProfileStatusMessageView : UIView {
	NSString* label_;
	float maximumWidth_;
	UIFont* font_;
	NMAttributedLabel* sLabel;
	BOOL useHighlightedImage_;
	UIImageView* arrow_;
	UIButton* button_;
	unsigned color_;
	id<NLProfileStatusMessageViewDelegate> delegate;
}
@property(assign, nonatomic) unsigned color;
@property(assign, nonatomic) BOOL useHighlightedImage;
@property(assign, nonatomic) id<NLProfileStatusMessageViewDelegate> delegate;
@property(retain, nonatomic) UIFont* font;
@property(assign, nonatomic) float maximumWidth;
@property(retain, nonatomic) NSString* label;
-(void).cxx_destruct;
-(void)showArrow:(BOOL)arrow;
-(void)onTouchUpInside:(id)inside;
-(CGSize)render:(int)render;
-(id)init;
-(void)updateBackground;
@end

__attribute__((visibility("hidden")))
@interface NLProfileBuddyCountView : UIView {
	UIImageView* buddyBgImageView_;
	UIImageView* buddyIconImageView_;
	UILabel* buddyCountLabel_;
}
-(void).cxx_destruct;
-(void)setBuddyCount:(long long)count;
-(id)initWithFrame:(CGRect)frame;
-(void)setupView;
@end

__attribute__((visibility("hidden")))
@interface MBMyhomeGroupManager : NSObject {
	NSOperationQueue* mOperationQueue;
	id<MBMyhomeGroupManagerDelegate> mDelegate;
}
@property(assign, nonatomic) id<MBMyhomeGroupManagerDelegate> delegate;
+(BOOL)isSyncAllNow;
+(void)saveMyhomeGroupSyncSuccessToUserDefaults:(BOOL)userDefaults;
+(BOOL)myhomeGroupSyncSuccessFromUserDefaults;
+(BOOL)myhomeGroupDeleteFriendsFromUserDefaults;
+(BOOL)myhomeGroupAddFriendsFromUserDefaults;
+(BOOL)myhomeGroupShowGuideFromUserDefaults;
+(void)saveMyhomeGroupShowGuideToUserDefaults;
+(id)myhomeGroupLastUpdatedFromUserDefaults;
+(void)saveMyhomeGroupLastUpdatedToUserDefaults:(id)userDefaults;
+(BOOL)needToSyncMyhomeGroupForInstall;
+(void)saveMyhomeGroupNeedSyncToUserDefault:(BOOL)userDefault;
+(BOOL)needToSyncMyhomeGroupForVersionUpgrade;
-(void).cxx_destruct;
-(id)needMemberUpdatedGParam:(id)param error:(id*)error;
-(void)requestSyncAll;
-(void)requestSyncMemberWithGids:(id)gids completionBlock:(id)block;
-(void)requestSyncGroupWithCompletionBlock:(id)completionBlock;
-(void)requestUpdateGroupWithGID:(long long)gid name:(id)name addMembers:(id)members deleteMembers:(id)members4;
-(void)requestDeleteGroupWithGID:(long long)gid;
-(void)requestCreateGroupWithName:(id)name members:(id)members;
-(id)initWithDelegate:(id)delegate;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLAgeVerificationManager : NSObject <NLAgeVerificationDelegate> {
	id _callback;
}
@property(copy, nonatomic) id callback;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)authorizationForceClose;
-(void)authorizationFailed:(id)failed;
-(void)authorizationSuccess:(int)success;
-(void)checkAgeVerificationWithCompletionBlock:(id)completionBlock navigationController:(id)controller;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface ReportViewController : NLViewController <UITableViewDataSource, UITableViewDelegate, UIAlertViewDelegate, UIScrollViewDelegate> {
	UITableView* reasonTable_;
	int reasonCode_;
	UILabel* headerLabel_;
	UILabel* footerLabel_;
	UIButton* agreeButton_;
	UIImageView* groupBg_;
	float headerHeight_;
	TalkUserObject* userObject_;
}
-(void).cxx_destruct;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)updateGroupBgPosition;
-(void)blockuser;
-(void)setUserObject:(id)object;
-(void)onTapAgreeButton:(id)button;
-(id)agreeButton;
-(id)footerLabel;
-(id)headerLabel;
-(void)updateCellCheckMark;
-(int)reasonCodeFromRow:(int)row;
-(id)reasonStringForReasonCode:(int)reasonCode;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)viewWillAppear:(BOOL)view;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MBProfileImageView : MBBaseChildCellView <MBActorObserving> {
	MBURLImageButton* mImageButton;
	UIImageView* mImageFrame;
	MBActor* mActor;
	MBActivity* mParentActivity;
	NSString* mActorID;
	id mImageCallback;
	int type;
}
@property(assign, nonatomic) int type;
@property(readonly, assign, nonatomic) MBActivity* parentActivity;
@property(readonly, assign, nonatomic) MBActor* actor;
+(CGSize)proifileImageViewSize;
+(id)profileImageView;
-(void).cxx_destruct;
-(void)setProfileImage;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data path:(id)path;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface SpammerWarningLabelView : UIView {
	float topMargin_;
	UIImageView* bgImage_;
	UILabel* label_;
}
-(void).cxx_destruct;
-(float)getHeightForWidth:(float)width;
-(void)setEmpty;
-(void)setTopMargin:(float)margin;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame aboutDeletedUser:(BOOL)user;
@end

__attribute__((visibility("hidden")))
@interface NLManagedMetadataID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _NLManagedMetadata : NSManagedObject {
}
@property(assign) int unreadMessageCountValue;
@property(retain, nonatomic) NSNumber* unreadMessageCount;
@property(assign) long long stickerDefVersionValue;
@property(retain, nonatomic) NSNumber* stickerDefVersion;
@property(retain, nonatomic) NSDate* stickerDefValidUntil;
@property(assign) long long individualUENRevisionValue;
@property(retain, nonatomic) NSNumber* individualUENRevision;
@property(assign) long long globalUENRevisionValue;
@property(retain, nonatomic) NSNumber* globalUENRevision;
@property(assign) long long fetchOpsRevisionValue;
@property(retain, nonatomic) NSNumber* fetchOpsRevision;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(void)setPrimitiveUnreadMessageCountValue:(int)value;
-(int)primitiveUnreadMessageCountValue;
-(void)setPrimitiveStickerDefVersionValue:(long long)value;
-(long long)primitiveStickerDefVersionValue;
-(void)setPrimitiveIndividualUENRevisionValue:(long long)value;
-(long long)primitiveIndividualUENRevisionValue;
-(void)setPrimitiveGlobalUENRevisionValue:(long long)value;
-(long long)primitiveGlobalUENRevisionValue;
-(void)setPrimitiveFetchOpsRevisionValue:(long long)value;
-(long long)primitiveFetchOpsRevisionValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoPreloader : NSObject {
	id<LAPhotoPreloaderDelegate> _delegate;
	id<LAPhotoPreloaderDataSource> _dataSource;
	NSOperationQueue* _queue;
	NSMutableDictionary* _preloadedImageDict;
	NSMutableSet* _keySet;
}
@property(retain, nonatomic) NSMutableSet* keySet;
@property(retain, nonatomic) NSMutableDictionary* preloadedImageDict;
@property(retain, nonatomic) NSOperationQueue* queue;
@property(assign, nonatomic) id<LAPhotoPreloaderDataSource> dataSource;
@property(assign, nonatomic) id<LAPhotoPreloaderDelegate> delegate;
-(void).cxx_destruct;
-(BOOL)setPreloadedImage:(id)image forKey:(id)key;
-(id)preloadedImageForKey:(id)key;
-(BOOL)setPreloadedImage:(id)image atIndex:(int)index;
-(id)preloadedImageAtIndex:(int)index;
-(void)cancelPreloadingExceptIndexes:(id)indexes;
-(void)addPreloadOperationAtIndex:(int)index;
-(void)preloadImagesAfterLoadingImageAtIndex:(int)index;
-(void)preloadImagesAroundIndex:(int)index;
-(void)addKeyAtIndex:(int)index;
-(void)cancelAllOperations;
-(void)cleanup;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate dataSource:(id)source;
@end

__attribute__((visibility("hidden")))
@interface LGAddressAnnotationView : MKPinAnnotationView {
	UILabel* _addressLabel;
	UIImageView* _leftImageView;
	UIImageView* _centerImageView;
	UIImageView* _rightImageView;
}
@property(retain, nonatomic) UIImageView* rightImageView;
@property(retain, nonatomic) UIImageView* centerImageView;
@property(retain, nonatomic) UIImageView* leftImageView;
@property(retain, nonatomic) UILabel* addressLabel;
-(void).cxx_destruct;
-(void)animateCalloutAppearance;
-(void)didAddSubview:(id)subview;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setAnnotation:(id)annotation;
-(void)updateAnnotation;
-(id)initWithAnnotation:(id)annotation reuseIdentifier:(id)identifier bundleName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface NLCallErrorMessageManager : NSObject {
}
+(void)showDeviceErrorMessage:(unsigned)message;
+(void)showServiceErrorMessage:(int)message;
@end

__attribute__((visibility("hidden")))
@interface LineCoinPopupView : UIView {
	UIView* blackBGView_;
	UIView* bgView_;
	UIButton* confirmButton_;
	id completionBlock;
	int type;
}
@property(copy, nonatomic) id completionBlock;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)close;
-(void)confirm;
-(void)setupComponents;
-(id)initWithPopupType:(int)popupType completionBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface AuthorizingDesktopViewController : NLViewController <UITextFieldDelegate> {
	NSString* _verifier;
	UILabel* _descriptionLabel;
	RegistrationInputField* _inputField;
	UIButton* _verificationButton;
	NSString* _verificationCode;
}
@property(retain, nonatomic) NSString* verificationCode;
@property(assign, nonatomic) UIButton* verificationButton;
@property(assign, nonatomic) RegistrationInputField* inputField;
@property(assign, nonatomic) UILabel* descriptionLabel;
@property(retain, nonatomic) NSString* verifier;
-(void).cxx_destruct;
-(void)textChanged:(id)changed;
-(void)login;
-(void)authButtonPressed:(id)pressed;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)updateLayouts;
-(void)setupLocalizedStrings;
-(void)setupLayout;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBExtData : NSObject <NSCoding> {
	int mOriginAppSn;
	NSString* mOriginAppName;
	MBUrl* mOriginAppUrl;
	MBUrl* mUrl;
	BOOL mUseComment;
	BOOL mUseLike;
	BOOL mReplyPermission;
	BOOL mAllowPostShare;
	BOOL mReplyApproval;
	BOOL mAllowEdit;
	int mSharedCountToTalk;
	int mSharedCountToPost;
	int mHomeType;
	int mAllowProfileLinkType;
	int mReadPermissionType;
	NSArray* mReadPermissionGids;
}
@property(readonly, assign, nonatomic) NSArray* readPermissionGids;
@property(readonly, assign, nonatomic) int readPermissionType;
@property(readonly, assign, nonatomic) int allowProfileLinkType;
@property(readonly, assign, nonatomic) int homeType;
@property(assign, nonatomic) int sharedCountToPost;
@property(assign, nonatomic) int sharedCountToTalk;
@property(readonly, assign, nonatomic) BOOL allowEdit;
@property(readonly, assign, nonatomic) BOOL replyApproval;
@property(readonly, assign, nonatomic) BOOL allowPostShare;
@property(readonly, assign, nonatomic) BOOL replyPermission;
@property(readonly, assign, nonatomic) BOOL useLike;
@property(readonly, assign, nonatomic) BOOL useComment;
@property(readonly, assign, nonatomic) MBUrl* url;
@property(readonly, assign, nonatomic) MBUrl* originAppUrl;
@property(readonly, assign, nonatomic) NSString* originAppName;
@property(readonly, assign, nonatomic) int originAppSn;
-(void).cxx_destruct;
-(int)readPermissionTypeWithString:(id)string;
-(void)setUseLike:(BOOL)like;
-(void)setUseComment:(BOOL)comment;
-(int)allowProfileLinkTypeWithStr:(id)str;
-(void)initWithSharedCount:(id)sharedCount;
-(id)initWithOriginInfo:(id)originInfo layoutInfo:(id)info sharedInfo:(id)info3 readPermittion:(id)permittion;
-(id)initWithExtDataInfo:(id)extDataInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBPostDetailViewControllerActions : NSObject {
	MBPostDetailViewController* mController;
}
+(id)actionsWithContoller:(id)contoller;
-(id)createOpenStickerTabAction;
-(id)createTouchEndedAction;
-(id)createShareButtonAction;
-(BOOL)allowLinkUserProfileWithMid:(id)mid;
-(id)create;
-(id)createReplyCommentViewUserProfileAction;
-(id)createReloadDataAction;
-(id)createCommonUrlAction;
-(void)commonUrlAction:(id)action userInfo:(id)info;
-(id)createViewContentStickerAction;
-(id)createViewContentMovieAction;
-(id)createDetailViewContentImageAction;
-(id)createViewStickerMoreAction;
-(id)createCommentViewUserProfileAction;
-(id)createContentLocationAction;
-(id)createCommentButtonAction;
-(void)commentAction:(id)action userInfo:(id)info;
-(id)createLikeButtonAction;
-(void)likeAction:(id)action userInfo:(id)info;
-(id)initWithController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _NLNotificationObject : NSManagedObject {
}
@property(retain, nonatomic) NSString* toChannel;
@property(retain, nonatomic) NSString* to;
@property(retain, nonatomic) id thumbnail;
@property(retain, nonatomic) NSString* text;
@property(assign) long long revisionValue;
@property(retain, nonatomic) NSNumber* revision;
@property(assign) BOOL readValue;
@property(retain, nonatomic) NSNumber* read;
@property(retain, nonatomic) NSString* id;
@property(retain, nonatomic) NSString* fromChannelName;
@property(retain, nonatomic) NSString* fromChannel;
@property(retain, nonatomic) NSString* from;
@property(retain, nonatomic) NSDate* createdTime;
@property(retain, nonatomic) NSString* actionURL;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(void)setPrimitiveRevisionValue:(long long)value;
-(long long)primitiveRevisionValue;
-(void)setPrimitiveReadValue:(BOOL)value;
-(BOOL)primitiveReadValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface TalkChatObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _TalkChatObject : NSManagedObject {
}
@property(retain, nonatomic) NSSet* messages;
@property(retain, nonatomic) NSSet* members;
@property(assign) int unreadValue;
@property(retain, nonatomic) NSNumber* unread;
@property(assign) short typeValue;
@property(retain, nonatomic) NSNumber* type;
@property(retain, nonatomic) NSString* skin;
@property(assign) long long readUpToMessageIDSyncedValue;
@property(retain, nonatomic) NSNumber* readUpToMessageIDSynced;
@property(assign) long long readUpToMessageIDValue;
@property(retain, nonatomic) NSNumber* readUpToMessageID;
@property(retain, nonatomic) NSString* mid;
@property(assign) short liveValue;
@property(retain, nonatomic) NSNumber* live;
@property(retain, nonatomic) NSDate* lastUpdated;
@property(assign) long long lastReceivedMessageIDValue;
@property(retain, nonatomic) NSNumber* lastReceivedMessageID;
@property(retain, nonatomic) NSString* lastMessage;
@property(retain, nonatomic) NSString* inviterMid;
@property(retain, nonatomic) NSString* inputText;
@property(assign) BOOL enableValue;
@property(retain, nonatomic) NSNumber* enable;
@property(assign) BOOL alertValue;
@property(retain, nonatomic) NSNumber* alert;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(id)messagesSet;
-(id)membersSet;
-(void)setPrimitiveUnreadValue:(int)value;
-(int)primitiveUnreadValue;
-(void)setPrimitiveTypeValue:(short)value;
-(short)primitiveTypeValue;
-(void)setPrimitiveReadUpToMessageIDSyncedValue:(long long)messageIDSyncedValue;
-(long long)primitiveReadUpToMessageIDSyncedValue;
-(void)setPrimitiveReadUpToMessageIDValue:(long long)messageIDValue;
-(long long)primitiveReadUpToMessageIDValue;
-(void)setPrimitiveLiveValue:(short)value;
-(short)primitiveLiveValue;
-(void)setPrimitiveLastReceivedMessageIDValue:(long long)value;
-(long long)primitiveLastReceivedMessageIDValue;
-(void)setPrimitiveEnableValue:(BOOL)value;
-(BOOL)primitiveEnableValue;
-(void)setPrimitiveAlertValue:(BOOL)value;
-(BOOL)primitiveAlertValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface TalkContactObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _TalkContactObject : NSManagedObject {
}
@property(assign) int typeValue;
@property(retain, nonatomic) NSNumber* type;
@property(retain, nonatomic) NSString* sortableName;
@property(assign) BOOL serverSyncedValue;
@property(retain, nonatomic) NSNumber* serverSynced;
@property(retain, nonatomic) NSString* phoneticName;
@property(retain, nonatomic) NSString* phoneNumber;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* mid;
@property(retain, nonatomic) NSString* luid;
@property(retain, nonatomic) NSString* key;
@property(assign) BOOL isRemovedValue;
@property(retain, nonatomic) NSNumber* isRemoved;
@property(assign) BOOL isInvitedValue;
@property(retain, nonatomic) NSNumber* isInvited;
@property(assign) BOOL isInviteableValue;
@property(retain, nonatomic) NSNumber* isInviteable;
@property(retain, nonatomic) NSDate* createdAt;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(void)setPrimitiveTypeValue:(int)value;
-(int)primitiveTypeValue;
-(void)setPrimitiveServerSyncedValue:(BOOL)value;
-(BOOL)primitiveServerSyncedValue;
-(void)setPrimitiveIsRemovedValue:(BOOL)value;
-(BOOL)primitiveIsRemovedValue;
-(void)setPrimitiveIsInvitedValue:(BOOL)value;
-(BOOL)primitiveIsInvitedValue;
-(void)setPrimitiveIsInviteableValue:(BOOL)value;
-(BOOL)primitiveIsInviteableValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface MBLineNetworkServiceOperation : NSOperation {
	MBAPIOperationInternal* mInternal;
}
+(id)operationWithRequest:(id)request completion:(id)completion;
-(void).cxx_destruct;
-(void)main;
-(id)initWithInternal:(id)internal;
@end

__attribute__((visibility("hidden")))
@interface TalkGroupObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _TalkGroupObject : NSManagedObject {
}
@property(retain, nonatomic) NSSet* members;
@property(retain, nonatomic) NSSet* invitee;
@property(retain, nonatomic) TalkUserObject* creator;
@property(retain, nonatomic) NSString* pictureStatus;
@property(retain, nonatomic) NSString* name;
@property(assign) BOOL isViewedValue;
@property(retain, nonatomic) NSNumber* isViewed;
@property(assign) BOOL isAcceptedValue;
@property(retain, nonatomic) NSNumber* isAccepted;
@property(retain, nonatomic) NSString* id;
@property(assign) BOOL enableValue;
@property(retain, nonatomic) NSNumber* enable;
@property(retain, nonatomic) NSDate* createdTime;
@property(assign) BOOL alertValue;
@property(retain, nonatomic) NSNumber* alert;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(id)membersSet;
-(id)inviteeSet;
-(void)setPrimitiveIsViewedValue:(BOOL)value;
-(BOOL)primitiveIsViewedValue;
-(void)setPrimitiveIsAcceptedValue:(BOOL)value;
-(BOOL)primitiveIsAcceptedValue;
-(void)setPrimitiveEnableValue:(BOOL)value;
-(BOOL)primitiveEnableValue;
-(void)setPrimitiveAlertValue:(BOOL)value;
-(BOOL)primitiveAlertValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface MBUIViewCompositeLayout : MBBaseLayout {
	NSArray* mLayouts;
}
+(id)createWithLayouts:(id)layouts;
-(void).cxx_destruct;
-(void)setContainer:(id)container;
-(CGSize)preferredSize:(CGSize)size;
-(void)layout;
-(id)initWithLayouts:(id)layouts;
@end

__attribute__((visibility("hidden")))
@interface TalkMessageObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _TalkMessageObject : NSManagedObject {
}
@property(retain, nonatomic) TalkUserObject* sender;
@property(retain, nonatomic) TalkChatObject* chat;
@property(assign) long long timestampValue;
@property(retain, nonatomic) NSNumber* timestamp;
@property(retain, nonatomic) NSData* thumbnail;
@property(retain, nonatomic) NSString* text;
@property(assign) short sendStatusValue;
@property(retain, nonatomic) NSNumber* sendStatus;
@property(assign) short readCountValue;
@property(retain, nonatomic) NSNumber* readCount;
@property(retain, nonatomic) NSString* messageType;
@property(assign) double longitudeValue;
@property(retain, nonatomic) NSNumber* longitude;
@property(assign) double latitudeValue;
@property(retain, nonatomic) NSNumber* latitude;
@property(retain, nonatomic) NSString* id;
@property(assign) short contentTypeValue;
@property(retain, nonatomic) NSNumber* contentType;
@property(retain, nonatomic) NSData* contentMetadata;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(void)setPrimitiveTimestampValue:(long long)value;
-(long long)primitiveTimestampValue;
-(void)setPrimitiveSendStatusValue:(short)value;
-(short)primitiveSendStatusValue;
-(void)setPrimitiveReadCountValue:(short)value;
-(short)primitiveReadCountValue;
-(void)setPrimitiveLongitudeValue:(double)value;
-(double)primitiveLongitudeValue;
-(void)setPrimitiveLatitudeValue:(double)value;
-(double)primitiveLatitudeValue;
-(void)setPrimitiveContentTypeValue:(short)value;
-(short)primitiveContentTypeValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface TalkSNSObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _TalkSNSObject : NSManagedObject {
}
@property(retain, nonatomic) NSString* snsUserName;
@property(retain, nonatomic) NSString* snsUserId;
@property(assign) short snsTypeValue;
@property(retain, nonatomic) NSNumber* snsType;
@property(retain, nonatomic) NSString* mid;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(void)setPrimitiveSnsTypeValue:(short)value;
-(short)primitiveSnsTypeValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface MBBlockManager : NSObject {
	NSOperationQueue* mOperationQueue;
	NSMutableSet* mPendingBlocks;
	NSMutableSet* mPendingUnblocks;
	NSMutableSet* mCommittedBlocks;
	NSMutableSet* mChangedBlocks;
	id<MBBlockManagerDelegate> mdelegate;
	id<MBBlockManagerDelegate> mDelegate;
}
@property(assign, nonatomic) id<MBBlockManagerDelegate> delegate;
-(void).cxx_destruct;
-(void)setBlocked:(BOOL)blocked forUserMID:(id)userMID;
-(id)blockList;
-(BOOL)isChangedBlockedForUserMID:(id)userMID;
-(BOOL)isBlockedForUserMID:(id)userMID;
-(BOOL)hasUncommittedChanges;
-(BOOL)isAvailable;
-(void)commit;
-(void)fetch;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallSearchBar : UISearchBar {
	BOOL _isFullSearchMode;
	UITextField* _searchTextField;
	UIButton* _cancelButton;
}
@property(assign, nonatomic) BOOL isFullSearchMode;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UITextField* searchTextField;
-(void).cxx_destruct;
-(void)dealloc;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)layoutSubviews;
-(void)setShowsCancelButton:(BOOL)button;
-(void)drawRect:(CGRect)rect;
-(void)initSearchBar;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface TalkUserObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _TalkUserObject : NSManagedObject {
}
@property(retain, nonatomic) NSSet* myhomeGroups;
@property(retain, nonatomic) NSSet* messages;
@property(retain, nonatomic) NSSet* invitedGroups;
@property(retain, nonatomic) NSSet* groups;
@property(retain, nonatomic) NSSet* createGroups;
@property(retain, nonatomic) NSSet* chats;
@property(assign) BOOL voiceCallCapableValue;
@property(retain, nonatomic) NSNumber* voiceCallCapable;
@property(assign) BOOL videoCallCapableValue;
@property(retain, nonatomic) NSNumber* videoCallCapable;
@property(assign) short userTypeValue;
@property(retain, nonatomic) NSNumber* userType;
@property(retain, nonatomic) NSDate* statusUpdatedAt;
@property(retain, nonatomic) NSString* statusMessage;
@property(retain, nonatomic) NSString* sortableName;
@property(retain, nonatomic) NSString* recommendParams;
@property(retain, nonatomic) NSString* profileImage;
@property(retain, nonatomic) NSString* pictureURL;
@property(retain, nonatomic) NSString* pictureStatus;
@property(retain, nonatomic) NSString* name;
@property(assign) BOOL myHomeCapableValue;
@property(retain, nonatomic) NSNumber* myHomeCapable;
@property(retain, nonatomic) NSString* mid;
@property(assign) BOOL isViewedValue;
@property(retain, nonatomic) NSNumber* isViewed;
@property(assign) BOOL isUnregisteredValue;
@property(retain, nonatomic) NSNumber* isUnregistered;
@property(assign) BOOL isRemovedValue;
@property(retain, nonatomic) NSNumber* isRemoved;
@property(assign) BOOL isRecommendedValue;
@property(retain, nonatomic) NSNumber* isRecommended;
@property(assign) BOOL isInAddressBookValue;
@property(retain, nonatomic) NSNumber* isInAddressBook;
@property(assign) BOOL isHiddenValue;
@property(retain, nonatomic) NSNumber* isHidden;
@property(assign) BOOL isFriendValue;
@property(retain, nonatomic) NSNumber* isFriend;
@property(assign) short friendRequestStatusValue;
@property(retain, nonatomic) NSNumber* friendRequestStatus;
@property(assign) long long favoriteOrderValue;
@property(retain, nonatomic) NSNumber* favoriteOrder;
@property(retain, nonatomic) NSString* customName;
@property(retain, nonatomic) NSDate* createdTime;
@property(retain, nonatomic) NSString* country;
@property(assign) short contactTypeValue;
@property(retain, nonatomic) NSNumber* contactType;
@property(assign) short capabilitiesValue;
@property(retain, nonatomic) NSNumber* capabilities;
@property(assign) BOOL blockingValue;
@property(retain, nonatomic) NSNumber* blocking;
@property(assign) BOOL alertValue;
@property(retain, nonatomic) NSNumber* alert;
@property(retain, nonatomic) NSString* addressbookName;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(id)myhomeGroupsSet;
-(id)messagesSet;
-(id)invitedGroupsSet;
-(id)groupsSet;
-(id)createGroupsSet;
-(id)chatsSet;
-(void)setPrimitiveVoiceCallCapableValue:(BOOL)value;
-(BOOL)primitiveVoiceCallCapableValue;
-(void)setPrimitiveVideoCallCapableValue:(BOOL)value;
-(BOOL)primitiveVideoCallCapableValue;
-(void)setPrimitiveUserTypeValue:(short)value;
-(short)primitiveUserTypeValue;
-(void)setPrimitiveMyHomeCapableValue:(BOOL)value;
-(BOOL)primitiveMyHomeCapableValue;
-(void)setPrimitiveIsViewedValue:(BOOL)value;
-(BOOL)primitiveIsViewedValue;
-(void)setPrimitiveIsUnregisteredValue:(BOOL)value;
-(BOOL)primitiveIsUnregisteredValue;
-(void)setPrimitiveIsRemovedValue:(BOOL)value;
-(BOOL)primitiveIsRemovedValue;
-(void)setPrimitiveIsRecommendedValue:(BOOL)value;
-(BOOL)primitiveIsRecommendedValue;
-(void)setPrimitiveIsInAddressBookValue:(BOOL)addressBookValue;
-(BOOL)primitiveIsInAddressBookValue;
-(void)setPrimitiveIsHiddenValue:(BOOL)value;
-(BOOL)primitiveIsHiddenValue;
-(void)setPrimitiveIsFriendValue:(BOOL)value;
-(BOOL)primitiveIsFriendValue;
-(void)setPrimitiveFriendRequestStatusValue:(short)value;
-(short)primitiveFriendRequestStatusValue;
-(void)setPrimitiveFavoriteOrderValue:(long long)value;
-(long long)primitiveFavoriteOrderValue;
-(void)setPrimitiveContactTypeValue:(short)value;
-(short)primitiveContactTypeValue;
-(void)setPrimitiveCapabilitiesValue:(short)value;
-(short)primitiveCapabilitiesValue;
-(void)setPrimitiveBlockingValue:(BOOL)value;
-(BOOL)primitiveBlockingValue;
-(void)setPrimitiveAlertValue:(BOOL)value;
-(BOOL)primitiveAlertValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface LineWelcomeViewManager : NSObject {
}
+(id)_generateWelcomeViewWithParameters:(id)parameters withFrame:(CGRect)frame;
+(id)_parametersForWelcomeViewWithType:(unsigned)type;
+(id)_welcomeViewWithType:(unsigned)type wihtFrame:(CGRect)frame;
+(id)welcomeViewTimeLineList:(CGRect)list;
+(id)welcomeViewChatListWithNoFriends:(CGRect)noFriends;
+(id)welcomeViewChatListWithFriends:(CGRect)friends;
+(id)welcomeViewRecommendList:(CGRect)list;
+(id)welcomeViewFriendsList:(CGRect)list;
@end

__attribute__((visibility("hidden")))
@interface LineWelcomeView : UIView {
	UIView* mBgView;
	UIImageView* mImageView;
	UILabel* mTitleLabel;
	UILabel* mContentLabel;
	UIButton* mButton;
	UIImageView* mArrowImage;
	NSString* mDefaultImageRulesetKey;
	id eventBlock;
}
@property(copy, nonatomic) id eventBlock;
-(void).cxx_destruct;
-(BOOL)render;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame parameters:(id)parameters;
@end

__attribute__((visibility("hidden")))
@interface StickerSerialCheckViewController : NLViewController <UITextFieldDelegate> {
	NSString* _serialNumber;
	LineProduct* _product;
	long long _packageID;
}
@property(retain, nonatomic) LineProduct* product;
@property(retain, nonatomic) NSString* serialNumber;
@property(assign, nonatomic) long long packageID;
-(void).cxx_destruct;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)onConfirm;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)didReceiveMemoryWarning;
-(void)textFieldDidChange:(id)textField;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithPackageID:(long long)packageID serialNumber:(id)number;
-(id)initWithPackageID:(long long)packageID;
-(id)initWithProduct:(id)product;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoOptionView : UIView {
	id<LAPhotoOptionViewDelegate> _delegate;
	int _selectedOptionType;
	int _lastTappedOptionType;
}
@property(assign, nonatomic) int lastTappedOptionType;
@property(assign, nonatomic) int selectedOptionType;
@property(assign, nonatomic) id<LAPhotoOptionViewDelegate> delegate;
-(void)didTapOptionButton:(id)button;
-(id)optionButton:(id)button backgroundImageName:(id)name contentEdgeInsets:(UIEdgeInsets)insets;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface NLNavigationBarAppearanceManager : NSObject {
}
+(void)refreshUINavigationBarAppearance;
+(void)didChangeTheme:(id)theme;
+(void)addObserver;
+(int)preferredStatusBarStyleForCurrentTheme;
+(void)updateNavigationBarAppearance;
+(void)resetTheme;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface MoreCategoryBannerInfo : NSObject {
	NSString* urlString;
	LineMoreItem* referenceItem;
}
@property(retain, nonatomic) LineMoreItem* referenceItem;
@property(retain, nonatomic) NSString* urlString;
-(void).cxx_destruct;
-(id)description;
-(id)imageUrl;
@end

__attribute__((visibility("hidden")))
@interface NLOSyslog : NSObject {
	double _seconds;
	NSString* _senderFilter;
	NSString* _messageFilter;
	NSString* _timeKey;
	NSString* _senderKey;
	NSString* _messageKey;
	NSString* _pidKey;
}
@property(retain, nonatomic) NSString* messageFilter;
@property(retain, nonatomic) NSString* senderFilter;
+(id)syslog;
-(void).cxx_destruct;
-(id)pullLogUsingEntrySelector:(SEL)selector;
-(void)setStringFilter:(id)filter forKey:(char*)key withOptions:(unsigned)options onQuery:(aslmsg*)query;
-(id)objectForFormattedLogEntry:(id)formattedLogEntry;
-(id)objectForLogEntry:(id)logEntry;
-(char*)seconds;
-(id)formattedLog;
-(void)sendFormattedLogToBlock:(id)block;
-(id)rawLog;
-(void)sendRawLogToBlock:(id)block;
-(id)filterForMessagesContainingString:(id)messagesContainingString;
-(id)filterForSendersContainingString:(id)sendersContainingString;
-(id)filterSecondsFromNow:(double)now;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphOfficialAccountSection : SocialGraphSection {
	NLSafeUnretainedObject* _self;
	LEGYRequestResponseHandler* _request;
	NSManagedObjectContext* _moc;
	BOOL _observingSaves;
	BOOL _hasResults;
	unsigned _searchOffset;
	BOOL _reachedEndOfResults;
	NSTimer* _timer;
	double _searchInterval;
}
-(void).cxx_destruct;
-(id)titleForFilteredSection;
-(BOOL)canBeShownInSearchResult;
-(BOOL)needsShownInSearchResult;
-(unsigned)fetchedCountsOfSection;
-(BOOL)hasObjectInSectionNow;
-(BOOL)hasObjects;
-(void)actionForWillDisplayCellEventAtIndexPath:(id)actionFor;
-(void)resetFilteredFetchedResultController;
-(id)filteredFetchRequest;
-(id)filteredManagedObjectContext;
-(id)fetchRequest;
-(id)fetchedResultController;
-(void)updateResults:(id)results;
-(void)search;
-(void)stopObservingContext;
-(void)mergeChangesFromContextDidSaveNotification:(id)mergeChangesFromContext;
-(void)startObservingContext;
-(void)reset;
-(void)dealloc;
-(id)initWithSectionIndex:(unsigned)sectionIndex tableView:(id)view fetchedResultControllerDelegate:(id)delegate mode:(int)mode;
@end

__attribute__((visibility("hidden")))
@interface NLSafeUnretainedObject : NSObject {
	id _obj;
}
-(void)discard;
-(id)object;
-(id)initWithObject:(id)object;
@end

__attribute__((visibility("hidden")))
@interface LineProfileThumbnailSource : LineThumbnailSource {
	NSString* _MID;
	int _MIDType;
	NSString* _pictureStatus;
	NSString* _picturePath;
	BOOL _enabled;
}
@property(readonly, assign, nonatomic) BOOL enabled;
+(void)initialize;
-(void).cxx_destruct;
-(void)line_changedOriginalImage;
-(void)line_uploadData:(id)data completionBlock:(id)block;
-(void)setObject:(id)object uploadBlock:(id)block progressBlock:(id)block3;
-(void)setObject:(id)object upload:(BOOL)upload;
-(id)newFileURLForImageWithSize:(CGSize)size;
-(id)newRemoteURLForSizeAtIndex:(int)index;
-(id)line_sizesAvailableRemotely;
-(id)initForMID:(id)mid type:(int)type defaultStatus:(BOOL)status context:(id)context;
-(id)initForMID:(id)mid type:(int)type defaultStatus:(BOOL)status;
-(id)initForGroup:(id)group;
-(id)initForUser:(id)user enabled:(BOOL)enabled cacheBehavior:(unsigned)behavior;
-(id)initForUser:(id)user;
-(id)initForManagedGroup:(id)managedGroup;
-(id)initForManagedUser:(id)managedUser;
-(id)initForMyself;
-(id)initForMID:(id)mid type:(int)type pictureStatus:(id)status picturePath:(id)path cacheBehavior:(unsigned)behavior;
@end

__attribute__((visibility("hidden")))
@interface LineImageSource : LineObjectSource {
	NSURL* _fileURL;
	UIImage* _image;
	NSURL* _remoteURL;
	LineFileDownload* _download;
	NSData* _rawData;
}
@property(readonly, assign, nonatomic) NSData* rawData;
@property(readonly, assign, nonatomic) NSURL* remoteURL;
@property(readonly, assign, nonatomic) NSURL* fileURL;
-(void).cxx_destruct;
-(void)line_prepareForDiskWrite;
-(void)line_setFileURLForImage:(id)image;
-(void)line_setDataForImage:(id)image;
-(void)line_setImage:(id)image;
-(void)setObject:(id)object uploadBlock:(id)block progressBlock:(id)block3;
-(id)line_remoteURL;
-(void)line_stopDownload;
-(BOOL)line_download:(id)download progressBlock:(id)block downloadHandle:(id*)handle;
-(BOOL)line_loadFromLocalStorage:(id)localStorage;
-(id)object;
-(id)initWithFileURL:(id)fileURL remoteURL:(id)url;
-(id)initWithKey:(id)key fileURL:(id)url remoteURL:(id)url3;
@end

__attribute__((visibility("hidden")))
@interface NLShopCoredataManager : NSObject {
	NSManagedObjectContext* mManagedObjectContext;
	NSManagedObjectModel* mManagedObjectModel;
	NSPersistentStoreCoordinator* mPersistentStoreCoordinator;
	unsigned migrationTask_;
}
@property(readonly, assign, nonatomic) NSManagedObjectContext* mainQueueContext;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedCoreDataManager;
-(void).cxx_destruct;
-(BOOL)isRequiredMigration;
-(void)doMigration;
-(id)persistentStoreCoordinator;
-(id)sqlitePersistentStoreCoordinator;
-(id)managedObjectModel;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLMessageLocationView : NLMessageBubbleView {
	UIImageView* mFlagIconView;
	NMAttributedLabel* mTextLabel;
	id<NMAttributedLabelDelegate> labelDelegate;
}
@property(assign, nonatomic) id<NMAttributedLabelDelegate> labelDelegate;
@property(readonly, assign, nonatomic) NMAttributedLabel* attributedLabel;
-(void).cxx_destruct;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
@end

__attribute__((visibility("hidden")))
@interface NLMessagePictureView : NLMessageBubbleView {
	UIImageView* mPictureView;
	UIImage* mPicture;
}
@property(retain, nonatomic) UIImage* picture;
+(CGSize)sizeForNoImageTypeWithMessageType;
-(void).cxx_destruct;
-(id)imageForNoImageType;
-(void)updateMaskImage;
-(CGRect)maskViewFrame;
-(void)hideEffectImageViews;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
@end

__attribute__((visibility("hidden")))
@interface NJSBackgroundTask : NSObject {
	unsigned mBackgroundTaskID;
	id mCompletionBlock;
}
@property(copy, nonatomic) id completionBlock;
+(id)backgroundTaskWithCompletionBlock:(id)completionBlock;
-(void).cxx_destruct;
-(void)endTask;
-(void)beginTask;
-(void)dealloc;
-(id)init;
-(void)endBackgroundTask;
@end

__attribute__((visibility("hidden")))
@interface NLMessageStickerView : NLMessageBubbleView {
	BOOL _isLoading;
	BOOL _isAnimationPlayedBefore;
	UIImage* _stickerImage;
	NSURL* _soundURL;
	NSURL* _animationURL;
	NLAnimationImageView* _stickerImageView;
}
@property(retain, nonatomic) NLAnimationImageView* stickerImageView;
@property(retain, nonatomic) NSURL* animationURL;
@property(retain, nonatomic) NSURL* soundURL;
@property(retain, nonatomic) UIImage* stickerImage;
@property(assign, nonatomic) BOOL isAnimationPlayedBefore;
@property(assign, nonatomic) BOOL isLoading;
-(void).cxx_destruct;
-(id)imageForNoStickerType;
-(void)resetAnimationSticker;
-(void)updateMaskImage;
-(CGRect)maskViewFrame;
-(void)hideEffectImageViews;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
@end

__attribute__((visibility("hidden")))
@interface NLMessageTextView : NLMessageBubbleView {
	NMAttributedLabel* mTextLabel;
	id<NMAttributedLabelDelegate> labelDelegate;
}
@property(assign, nonatomic) id<NMAttributedLabelDelegate> labelDelegate;
@property(readonly, assign, nonatomic) NMAttributedLabel* attributedLabel;
-(void).cxx_destruct;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
-(id)accessibilityLabel;
-(unsigned long long)accessibilityTraits;
@end

__attribute__((visibility("hidden")))
@interface ShopObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _ShopObject : NSManagedObject {
}
@property(retain, nonatomic) NSSet* showcases;
@property(retain, nonatomic) NSString* shopID;
@property(retain, nonatomic) NSString* name;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(id)showcasesSet;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface LGAlbumsDataController : NSObject <LGAssetsGroupsDelegate> {
	BOOL _isDirty;
	NSArray* _assetGroups;
	NSArray* _lazyAssetGroups;
	NSOperationQueue* _albumsQueue;
	id<LGAlbumsDataControllerDelegate> _mDelegate;
}
@property(assign, nonatomic) __weak id<LGAlbumsDataControllerDelegate> mDelegate;
@property(assign, nonatomic) BOOL isDirty;
@property(retain, nonatomic) NSOperationQueue* albumsQueue;
@property(retain, nonatomic) NSArray* lazyAssetGroups;
@property(retain, nonatomic) NSArray* assetGroups;
-(void).cxx_destruct;
-(void)setAlbumQueueSuspended:(BOOL)suspended afterDelay:(double)delay;
-(void)loadCameraRollLastAssetsAndCallback;
-(void)reloadGalleryDataAfterDelay:(double)delay;
-(void)reloadGalleryData;
-(void)loadLazyAssetGroupsAfterLoadingNumberOfAssets;
-(void)loadAssetGroups;
-(void)setAlbumQueueSuspended:(BOOL)suspended;
-(void)loadNumberOfAssets:(id)assets;
-(void)setNumberOfAssetsOnBackground:(id)assetsOnBackground;
-(void)lgAssetsLibraryDidLoadLazyAssetGroups:(id)lgAssetsLibrary;
-(void)lgAssetsLibraryDidLoadAssetGroups:(id)lgAssetsLibrary;
-(void)updateLastPhotoThumbnail:(id)thumbnail;
-(void)updateLastPhotoThumbnailOnMainThread;
-(void)mergeNewlyAssetGroups:(id)groups toLazyAssetGroupsOrNot:(BOOL)lazyAssetGroupsOrNot;
-(void)dealloc;
-(id)initWithAssetsLibrary:(id)assetsLibrary delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface LAUploadedUserCell : UITableViewCell {
	id<LAUploadedUserCellDelegate> _delegate;
	NSArray* _profileImageViews;
	UIButton* _moreButton;
}
@property(retain, nonatomic) UIButton* moreButton;
@property(retain, nonatomic) NSArray* profileImageViews;
@property(assign, nonatomic) id<LAUploadedUserCellDelegate> delegate;
+(float)height:(BOOL)height;
+(float)width;
+(id)uploadedUserCellWithUsers:(id)users atRow:(unsigned)row folded:(BOOL)folded delegate:(id)delegate tableView:(id)view;
-(void).cxx_destruct;
-(void)didTapMoreButton:(id)button;
-(void)setUsers:(id)users atRow:(unsigned)row folded:(BOOL)folded;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LGSelectedSectionDataSource : NSObject <LGPhotoViewDataSource> {
	LGAssetSection* _selectedSection;
}
@property(retain, nonatomic) LGAssetSection* selectedSection;
-(void).cxx_destruct;
-(unsigned)numberOfAssets;
-(id)assetWithSection:(unsigned)section row:(unsigned)row;
-(unsigned)numberOfAssetsAtSection:(unsigned)section;
-(unsigned)numberOfAssetSections;
-(id)initWithIsImageSelection:(BOOL)isImageSelection selectedAssets:(id)assets bundleName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface LineMyhomeKeyboard : NSObject <LineKeyboardDelegate, NLMessageInputBarDelegate, NLGrowingTextViewDelegate> {
	NLMessageInputBar* mMessageSendBar;
	id mKeyboardDelegate;
	int mMaxInputLength;
	BOOL mAvailableTextInput;
	NLMessageInputBarForRecallUsers* mInputBarForRecallUsers;
}
@property(readonly, assign, nonatomic) NLMessageInputBar* messageSendBar;
-(void).cxx_destruct;
-(void)clearMessageSendBar;
-(void)becomeFirstResponderMessageSendBar;
-(void)resignFirstResponderMessageSendBar;
-(void)setEnableSendButtonMessageSendBar:(BOOL)bar;
-(void)setTextColorMessageSendBar:(id)bar;
-(void)setAttributedTextMessageSendBar:(id)bar;
-(void)setTextMessageSendBar:(id)bar;
-(void)setupPlaceHolderLabel:(id)label;
-(void)convertEmojiToSticker:(id)sticker sticonMetadata:(id)metadata userRecallMetadataArray:(id)array;
-(id)textInfoForCommentWithSticker:(int)sticker;
-(void)onSendMessageBar:(id)bar;
-(void)onToggleMessageBar:(id)bar;
-(void)onAttachMessageBar:(id)bar;
-(void)hideStickerPreview;
-(id)getStickerInfoWithStickerID:(int)stickerID;
-(id)getStickerInfoWithSticonMetadata:(id)sticonMetadata;
-(void)getTextInfoWithSticker:(int)sticker;
-(void)lineKeyboard:(id)keyboard stickerTapped:(int)tapped;
-(void)lineKeyboardDidDeleteBackwards:(id)lineKeyboard;
-(void)lineKeyboardWillDeleteBackwards:(id)lineKeyboard;
-(void)restoreFromBackupTextMetadataArray:(id)backupTextMetadataArray;
-(id)textMetadataArray;
-(void)resetRecallUsers;
-(id)recallUsers;
-(void)addRecallUserFromComment:(id)comment mid:(id)mid;
-(void)addRecallUser:(id)user mid:(id)mid;
-(id)searchKeywordForSuggest;
-(void)growingTextViewIsGoingToExceedInputMaxLength:(id)exceedInputMaxLength;
-(void)growingTextViewDidChange:(id)growingTextView;
-(BOOL)growingTextViewShouldReturn:(id)growingTextView;
-(void)growingTextViewDidChangeSelection:(id)growingTextView;
-(void)growingTextViewDidTapTextView:(id)growingTextView;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
-(void)growingTextView:(id)view willChangeHeight:(float)height;
-(BOOL)growingTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(id)initWithFrame:(CGRect)frame maxLength:(int)length placeHolderText:(id)text delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface LineMyhomeUIProvider : NSObject <MBLineUIProvider> {
	LineMyhomeKeyboard* mKeyboard;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedUIProvider;
-(void).cxx_destruct;
-(void)sendMessageSendBar:(id)bar;
-(id)searchKeywordForSuggest:(id)suggest;
-(void)restoreFromBackup:(id)backup textMetadataArray:(id)array;
-(void)resetRecallUsers:(id)users;
-(id)textMetadataArray:(id)array;
-(id)recallUsers:(id)users;
-(void)addRecallUserFromCommentMessageSendBar:(id)commentMessageSendBar displayName:(id)name mid:(id)mid;
-(void)addRecallUserMessageSendBar:(id)bar displayName:(id)name mid:(id)mid;
-(void)setEmojiShown:(id)shown selected:(BOOL)selected;
-(void)clearMessageSendBar:(id)bar;
-(void)becomeFirstResponderMessageSendBar:(id)bar;
-(void)resignFirstResponderMessageSendBar:(id)bar;
-(void)setEnableSendButtonMessageSendBar:(id)bar enabled:(BOOL)enabled;
-(void)setTextColorMessageSendBar:(id)bar color:(id)color;
-(void)setAttributedTextMessageSendBar:(id)bar attributedText:(id)text;
-(void)setTextMessageSendBar:(id)bar text:(id)text;
-(BOOL)messageSendBarRespondsToAttributedText:(id)attributedText;
-(id)messageSendBarInputAttributedText:(id)text;
-(id)messageSendBarInputText:(id)text;
-(id)messageSendBar:(id)bar;
-(id)lineMessageSendBarWithMaxLength:(int)maxLength placeHolderText:(id)text delegate:(id)delegate;
-(id)welcomeViewTimeLine:(CGRect)line;
-(id)tabbarController;
-(id)currentVisibleViewController;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface SocialGraphInvitedGroupSection : SocialGraphSection {
}
-(BOOL)canBeShownInSearchResult;
-(BOOL)needsShownInSearchResult;
-(id)titleForFilteredSection;
-(id)titleForSection;
-(void)onSectionHeaderViewProperties;
-(id)filteredFetchRequest;
-(id)fetchRequest;
@end

__attribute__((visibility("hidden")))
@interface LineObjectSource : NSObject {
	unsigned _loadState;
	BOOL _skipLoad;
	id<NSCopying> _cacheKey;
}
@property(readonly, assign, nonatomic) id<NSCopying> cacheKey;
-(void).cxx_destruct;
-(void)reset;
-(BOOL)line_download:(id)download progressBlock:(id)block downloadHandle:(id*)handle;
-(BOOL)line_loadFromLocalStorage:(id)localStorage;
-(void)line_setLoadState:(unsigned)state;
-(void)load:(id)load progressBlock:(id)block downloadHandle:(id*)handle;
-(void)load:(id)load progressBlock:(id)block;
-(void)load:(id)load;
-(void)setObject:(id)object uploadBlock:(id)block progressBlock:(id)block3;
-(void)setObject:(id)object upload:(BOOL)upload;
-(id)object;
-(void)dealloc;
-(id)initWithKey:(id)key;
@end

__attribute__((visibility("hidden")))
@interface LineGalleryChatPhotoDataSource : NSObject <LAChatPhotoDataSource> {
	NSManagedObjectContext* backgroundContext_;
	NSManagedObjectContext* originalContext_;
	TalkChatObject* chat_;
	TalkChatObjectID* chatID_;
	TalkMessageObjectID* initialMessageID_;
	NSMutableArray* imageMessageObjectIDArray_;
	NSOperationQueue* operationQueue_;
	unsigned loadingIndex_;
	BOOL canUseAlbum_;
	NSMutableIndexSet* expiredIndexSet_;
	BOOL authorizedStatus_;
	BOOL _enableVerticalSwipeTransition;
	BOOL _endedTranstion;
	NLObjectStorageOperation* activeConnection;
	id updateInfoBlock;
}
@property(assign, nonatomic, getter=isEndedTranstion) BOOL endedTranstion;
@property(assign, nonatomic, getter=isEnableVerticalSwipeTransition) BOOL enableVerticalSwipeTransition;
@property(copy, nonatomic) id updateInfoBlock;
@property(retain, nonatomic) NLObjectStorageOperation* activeConnection;
-(void).cxx_destruct;
-(id)unsupportedIndexesFromIndexes:(id)indexes;
-(id)expiredIndexSet:(BOOL)set;
-(id)openChatMID;
-(void)changeThumbnailAtIndex:(unsigned)index data:(id)data size:(CGSize)size;
-(void)editImageAtIndex:(unsigned)index;
-(void)postImageToNoteAtIndex:(unsigned)index;
-(void)postImageToAlbumAtIndex:(unsigned)index;
-(void)sendImageToOtherChatRoomAtIndex:(unsigned)index;
-(void)postImageToMyHomeAtIndex:(unsigned)index fromViewController:(id)viewController;
-(double)obsExpiryTimestamp;
-(id)obsInfoAtIndex:(unsigned)index;
-(id)chatRoomName;
-(void)message:(id)message atIndex:(unsigned)index;
-(id)imageInfoAtIndex:(unsigned)index;
-(unsigned)numberOfLineImages;
-(int)loadingIndex;
-(id)imageFileUrlAtIndex:(unsigned)index;
-(id)imageObjectsInRange:(NSRange)range;
-(id)imageDataAtIndex:(unsigned)index;
-(id)thumbnailImageDataAtIndex:(unsigned)index;
-(id)chatObjectAtIndex:(unsigned)index;
-(BOOL)canUseAlbum;
-(BOOL)hasInitialImage;
-(void)cancelDownloading:(BOOL)downloading;
-(void)downloadImageAtIndex:(unsigned)index completionBlock:(id)block;
-(void)setUpdateImageInfoBlock:(id)block;
-(void)loadImageObjectsWithInitialIndex:(unsigned)initialIndex completionBlock:(id)block;
-(void)insertImageObject:(id)object;
-(void)loadTalkMessageObjectsWithCompletionBlock:(id)completionBlock;
-(id)initWithChat:(id)chat initialMessage:(id)message canUseAlbum:(BOOL)album usingBackgroundContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface TMoreCompactProtocol : TCompactProtocol {
	CFDataRef _buf;
	CFArrayRef _struct;
	CFDataRef _types;
	CFArrayRef _rtypelist;
	CFDictionaryRef _hexdict;
	CFArrayRef _hexlist;
	unsigned long long _fields;
	long long _last_digit;
	unsigned char _readStringType;
	unsigned char _currentFieldType;
}
-(long long)readVarintWithBuffSize:(unsigned)buffSize;
-(long long)readVarint64;
-(int)readVarint32;
-(void)writeVarint64:(unsigned long long)a64;
-(void)writeVarint32:(unsigned)a32;
-(void)writeI64:(long long)a64;
-(void)writeBinary:(id)binary;
-(id)readString;
-(void)writeString:(id)string;
-(void)writeDouble:(double)aDouble;
-(void)writeByte:(unsigned char)byte;
-(BOOL)readBool;
-(void)writeBool:(BOOL)aBool;
-(void)writeFieldStop;
-(void)writeFieldBeginWithName:(id)name type:(int)type fieldID:(int)anId;
-(void)readFieldBeginReturningName:(id*)name type:(int*)type fieldID:(int*)anId;
-(void)readStructEnd;
-(void)writeStructEnd;
-(void)readStructBeginReturningName:(id*)name;
-(void)writeStructBeginWithName:(id)name;
-(void)readMessageEnd;
-(void)writeMessageEnd;
-(void)readMessageBeginReturningName:(id*)name type:(int*)type sequenceID:(int*)anId;
-(void)writeMessageBeginWithName:(id)name type:(int)type sequenceID:(int)anId;
@end

__attribute__((visibility("hidden")))
@interface LineDefaultImageView : UIImageView {
	UIImage* _defaultImage;
	BOOL _showingDefaultImage;
}
@property(assign, nonatomic) BOOL showingDefaultImage;
@property(retain, nonatomic) UIImage* defaultImage;
-(void).cxx_destruct;
-(void)setImage:(id)image;
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface NLOverlayView : UIView <UIGestureRecognizerDelegate> {
	id _delegate;
}
@property(assign, nonatomic) id delegate;
-(void)dealloc;
-(void)pan:(id)pan;
-(void)tap:(id)tap;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoPageScrollView : UIScrollView <UIScrollViewDelegate> {
	int mPageIndex;
	id<MBPhotoPageScrollViewDelegate> mPhotoPageScrollViewDelegate;
	NSMutableArray* mPhotoImageViews;
	int mPageCount;
	int mInitIndex;
	CGPoint mLastContentOffset;
}
@property(readonly, assign, nonatomic) NSMutableArray* photoImageViews;
@property(assign, nonatomic) id<MBPhotoPageScrollViewDelegate> photoPageScrollViewDelegate;
@property(readonly, assign, nonatomic) int pageIndex;
-(void).cxx_destruct;
-(void)updatePhotoImage:(id)image atIndex:(int)index;
-(id)photoImageViewAtIndex:(int)index;
-(id)photoImageAtIndex:(int)index;
-(BOOL)savingPhotoEnableAtIndex:(int)index;
-(void)layoutPageScrollView;
-(CGRect)frameForPageAtIndex:(int)index;
-(void)showPageAtIndex:(int)index;
-(void)hideActivityIndicator;
-(void)photoImageViewClose;
-(void)photoImageViewReload:(id)reload;
-(void)photoImageViewDidDoubleTapZoomOut:(id)photoImageView;
-(void)photoImageViewDidDoubleTapZoomIn:(id)photoImageView;
-(void)photoImageViewDidTap:(id)photoImageView;
-(void)photoImageScrollViewDidEndScrolling:(id)photoImageScrollView;
-(void)photoImageScrollViewDidScroll:(id)photoImageScrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)setContentOffset:(CGPoint)offset;
-(void)resetPageZoomScale;
-(void)tilePhotoImageView;
-(void)preparePrevPhotoImageViewWithIndex:(int)index;
-(void)prepareNextPhotoImageViewWithIndex:(int)index;
-(void)updatePhotoImageView:(id)view withImage:(id)image;
-(void)refreshContentSize;
-(void)setupPhotoImageView:(id)view forIndex:(int)index;
-(id)photoImageViewForIndex:(int)index;
-(void)setupPhotoImageViews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame pageCount:(int)count pageIndex:(int)index delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface LAHTTPConnection : NSObject {
}
+(id)sendRequestWithURL:(id)url groupID:(id)anId method:(id)method param:(id)param headers:(id)headers completion:(id)completion;
+(id)sendRequestWithURL:(id)url groupID:(id)anId headers:(id)headers completion:(id)completion;
+(id)addHTTPConnectionHeaderFileds:(id)fileds groupID:(id)anId;
+(id)requestWithURL:(id)url;
+(void)initialize;
+(id)acceptLanguage;
+(id)userAgent;
@end

__attribute__((visibility("hidden")))
@interface LineStickerImageSource : LineImageSource {
	int _sticker;
}
-(BOOL)line_download:(id)download progressBlock:(id)block downloadHandle:(id*)handle;
-(BOOL)line_loadFromLocalStorage:(id)localStorage;
-(id)initWithSticker:(int)sticker;
@end

__attribute__((visibility("hidden")))
@interface NLKeyboardTitleButtonView : UIView {
	UILabel* _textLabel;
	UIButton* _button;
}
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UILabel* textLabel;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(CGSize)buttonTextSizeWithMaxWidth:(float)maxWidth;
-(CGSize)textSizeWithMaxWidth:(float)maxWidth;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallSenderButton : UIButton {
	id _parameter;
}
@property(retain, nonatomic) id parameter;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LGImagePickerController : NLAppearanceCustomizedNavigationController {
	BOOL _didPageDisappear;
	BOOL _disableUpdatingForNotification;
	BOOL _didSelectedSendToLineAlbum;
	LGConfig* _pickerConfig;
	NSDate* _savedAlbumAssetsRefreshedMonitoringDate;
	LGAssetsLibrarySafeExecutor* _assetsLibrarySafeExecutor;
}
@property(retain, nonatomic) LGAssetsLibrarySafeExecutor* assetsLibrarySafeExecutor;
@property(assign, nonatomic) BOOL didSelectedSendToLineAlbum;
@property(assign, nonatomic) BOOL disableUpdatingForNotification;
@property(assign, nonatomic) BOOL didPageDisappear;
@property(retain, nonatomic) NSDate* savedAlbumAssetsRefreshedMonitoringDate;
@property(retain, nonatomic) LGConfig* pickerConfig;
+(void)showFilterPhotoViewController:(id)controller maxSize:(CGSize)size bundleName:(id)name imagePickerDelegate:(id)delegate navigationController:(id)controller5 imageEndPresentStyle:(int)style canMultiSelect:(BOOL)select isSupportedRedesign:(BOOL)redesign editingMediaInfo:(id)info;
+(void)showFilterPhotoViewController:(id)controller maxSize:(CGSize)size bundleName:(id)name imagePickerDelegate:(id)delegate navigationController:(id)controller5;
+(void)showCropViewController:(id)controller cropSize:(CGSize)size bundleName:(id)name imagePickerDelegate:(id)delegate navigationController:(id)controller5;
+(void)editWithLineCamera:(id)lineCamera;
+(void)resolveEditedImage:(id)image originalAssetURL:(id)url;
+(void)addRightTransitionAnimationToWindowLayer:(id)windowLayer;
-(void).cxx_destruct;
-(void)resumeWindowLayerAnimationIfNeeded;
-(float)speedOfWindowLayerAnimation;
-(void)cleanUpViewControllers:(id)controllers;
-(void)show;
-(void)didGetAccessable:(id)accessable;
-(id)showPhotoViewControllerUsingSelectedSection:(int)section selectedSectionDataSource:(id)source;
-(id)updateGalleryAssetForALAsset:(id)alasset;
-(void)reloadAllGalleryData;
-(void)scrollPhotoScrollViewToIndex:(unsigned)index;
-(unsigned)currentIndexOfPhotoScrollView;
-(void)updateGalleryForLanguageCode:(id)languageCode;
-(id)assetsLibrary;
-(void)reloadGalleryEnd;
-(void)showGalleryAlbums;
-(void)enableSetContentOffsetOfPagingScrollView:(BOOL)pagingScrollView;
-(void)loadSavedPhotosGroupAndSetupAssetsViewController:(id)controller photoViewController:(id)controller2 photoStartIndex:(unsigned)index;
-(void)showGalleryEndWithALAsset:(id)alasset atIndex:(unsigned)index;
-(void)showGalleryEnd;
-(void)showGalleryImagePicker;
-(void)showUIImagePicker;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(int)preferredStatusBarStyle;
-(void)dealloc;
-(id)initWithConfig:(id)config;
@end

__attribute__((visibility("hidden")))
@interface LineDataSource : LineObjectSource {
}
@end

__attribute__((visibility("hidden")))
@interface LineImageSourceView : LineDefaultImageView {
	LineImageSource* _imageSource;
	NSObject* _downloadHandle;
	id _completionBlock;
}
@property(copy, nonatomic) id completionBlock;
-(void).cxx_destruct;
-(void)setThumbnailSource:(id)source;
-(void)setImageSource:(id)source;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageURLBuilder : NSObject {
}
+(id)buildURLWithOperationParameters:(id)operationParameters;
@end

__attribute__((visibility("hidden")))
@interface FriendMatrixItem : NSObject {
	NSString* channelId_;
	NSString* mid_;
	unsigned count_;
}
@property(assign, nonatomic) unsigned count;
@property(retain, nonatomic) NSString* mid;
@property(retain, nonatomic) NSString* channelId;
-(void).cxx_destruct;
-(id)description;
-(id)initWithChannelId:(id)channelId mid:(id)mid count:(unsigned)count;
@end

__attribute__((visibility("hidden")))
@interface MBMessageView : UIView {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLInformationView : UIView {
	UIImageView* bgView_;
	UILabel* infoLabel_;
	UIEdgeInsets marginInsets_;
	UIEdgeInsets labelPaddingInsets_;
}
@property(assign, nonatomic) UIEdgeInsets labelPaddingInsets;
@property(assign, nonatomic) UIEdgeInsets marginInsets;
@property(retain, nonatomic) UILabel* infoLabel;
@property(retain, nonatomic) UIImageView* bgView;
+(float)getInfoViewHeight:(id)height withWidth:(float)width withFont:(id)font;
+(id)labelFont;
+(CGSize)getInfoLabelSize:(id)size withWidth:(float)width withFont:(id)font;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBPostDetailCellActivityContentViewMap : MBActivityContentViewMap {
}
-(void)callBackAddCellView:(int)view contentView:(id)view2;
@end

__attribute__((visibility("hidden")))
@interface MBPostDetailCell : MBTableViewActionCell {
	MBActivityCellContainer* mActivityCellContainer;
	MBActivityContentViewMap* mActivityContentViewMap;
}
+(id)postDetailHeightForTableView:(id)tableView data:(id)data postViewType:(int)type;
+(id)postDetailCellForTableView:(id)tableView data:(id)data postViewType:(int)type;
-(void).cxx_destruct;
-(float)height;
-(void)reLayout:(id)layout reload:(BOOL)reload;
-(void)resetLayout;
-(void)redraw;
-(void)layoutCellContainer;
-(void)setData:(id)data;
-(id)initWithActivity:(id)activity postViewType:(int)type reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLInformationUnreadView : NLInformationView {
	UIImageView* mUnreadIcon;
}
+(float)getInfoViewHeight:(id)height withWidth:(float)width withFont:(id)font;
+(CGSize)getInfoLabelSize:(id)size withWidth:(float)width withFont:(id)font;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLInformationSystemMessageView : NLInformationView <NLMessageContentSelectable> {
	BOOL _selected;
	UIView* _maskView;
	UIImage* _maskImage;
}
@property(assign, nonatomic, getter=isSelected) BOOL selected;
@property(retain, nonatomic) UIImage* maskImage;
@property(retain, nonatomic) UIView* maskView;
+(float)getInfoViewHeight:(id)height withWidth:(float)width withFont:(id)font;
+(CGSize)getInfoLabelSize:(id)size withWidth:(float)width withFont:(id)font;
-(void).cxx_destruct;
-(void)updateMaskImage;
-(CGRect)maskViewFrame;
-(void)layoutMaskView;
-(void)removeMaskView;
-(void)addMaskViewWithAlpha:(float)alpha;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLInformationDateView : NLInformationView {
}
@end

__attribute__((visibility("hidden")))
@interface LAOBSUploader : NSObject {
	NSData* uploadImageData_;
	NSString* sourceOBSPath_;
	NSString* albumID_;
	NSString* oid_;
	NSString* groupID_;
}
-(void).cxx_destruct;
-(void)startUploadWithBlock:(id)block failBlock:(id)block2 progressBlock:(id)block3;
-(void)copyFromOBSWithBlock:(id)block failBlock:(id)block2;
-(void)checkObjectStorageInfoWithBlock:(id)block retryBlock:(id)block2 failBlock:(id)block3;
-(void)uploadImage:(id)image sourceOBSPath:(id)path oid:(id)oid albumID:(id)anId groupID:(id)anId5 successBlock:(id)block errorBlock:(id)block7 retryBlock:(id)block8 progressBlock:(id)block9;
@end

__attribute__((visibility("hidden")))
@interface MBCoverProfileButton : MBURLImageButton <MBActorObserving> {
	MBActor* mActor;
	id mImageCallback;
}
+(id)coverProfileButton;
-(void).cxx_destruct;
-(void)setProfileImage;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(id)actor;
-(void)setupWithActor:(id)actor;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NonRotatingQLPreviewController : QLPreviewController {
}
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
@end

__attribute__((visibility("hidden")))
@interface NLAttachedFileLoader : NSObject <QLPreviewControllerDataSource, QLPreviewControllerDelegate, UIDocumentInteractionControllerDelegate> {
	NLObjectStorageOperation* downloadOperation_;
	NLAttachedFileQuickLookItem* currentQuickLookItem_;
	int loaderState_;
	MessageViewController* _viewController;
	TalkMessageObject* _message;
	UIDocumentInteractionController* _docInteractionController;
}
@property(retain, nonatomic) UIDocumentInteractionController* docInteractionController;
@property(retain, nonatomic) TalkMessageObject* message;
@property(assign, nonatomic) MessageViewController* viewController;
-(void).cxx_destruct;
-(id)previewController:(id)controller previewItemAtIndex:(int)index;
-(int)numberOfPreviewItemsInPreviewController:(id)previewController;
-(void)previewControllerDidDismiss:(id)previewController;
-(void)documentInteractionControllerDidDismissOpenInMenu:(id)documentInteractionController;
-(void)documentInteractionControllerWillPresentOpenInMenu:(id)documentInteractionController;
-(id)documentInteractionControllerViewControllerForPreview:(id)preview;
-(void)openAttachedFile;
-(BOOL)isEnoughSpaceToSave;
-(void)showByFileURL;
-(void)downloadFile;
-(BOOL)isShowingUI;
-(BOOL)isDownloading;
-(void)setShowingUIState;
-(void)setDownloadingState;
-(void)setInitState;
-(void)showFileInteractionMenu;
-(void)showQuickLookView;
-(void)setupDocumentController;
-(void)removeHardLinkWithAttachedFile;
-(id)makeHardLinkFromAttachedFile;
-(id)hardLinkPathFromAttachedFile;
@end

__attribute__((visibility("hidden")))
@interface NLThemeShopPreviewDataSource : LAPhotoViewBaseDataSource {
	BOOL _pausedDownload;
	NLSafeUnretainedObject* _uSelf;
	LineShopProductDetail* _product;
	int _currentIndex;
	UIImage* _emptyImage;
	CGSize _emptyImageSize;
}
@property(retain, nonatomic) UIImage* emptyImage;
@property(assign, nonatomic) int currentIndex;
@property(retain, nonatomic) LineShopProductDetail* product;
@property(retain, nonatomic) NLSafeUnretainedObject* uSelf;
@property(assign, nonatomic) CGSize emptyImageSize;
@property(assign, nonatomic) BOOL pausedDownload;
-(void).cxx_destruct;
-(void)preloadImagesAfterLoadingImageWithNSNumber:(id)nsnumber;
-(void)preloadImagesAfterLoadingImageAtIndex:(int)index;
-(id)thumbnailAtIndex:(int)index;
-(id)fullImageAtIndex:(int)index;
-(void)dealloc;
-(id)initWithProduct:(id)product;
@end

__attribute__((visibility("hidden")))
@interface NLMessageFileView : NLMessageBubbleView {
	UIImageView* mIconImageView;
	UILabel* mDescLabel;
	UILabel* mDurationLabel;
	UILabel* mFileSizeLabel;
	UIImageView* mArrowIcon;
	AttachedFileModel* _attachedFileModel;
}
@property(retain, nonatomic) AttachedFileModel* attachedFileModel;
+(CGSize)contentSizeWithString:(id)string;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)render;
-(void)applyRulesetStyle;
-(void)setInitialLabelProperties;
-(void)setLabelStylesWithDirection:(unsigned)direction;
-(id)fileSizeText;
-(id)durationText;
-(id)descriptionText;
-(void)layoutSubviewsForDirection:(unsigned)direction;
-(void)setRulesetStyleNameForDirection:(unsigned)direction;
-(void)prepareSubviewsForDirection:(unsigned)direction;
-(void)prepareInitialSubviews;
@end

__attribute__((visibility("hidden")))
@interface MBPostCommentCell : MBTableViewActionCell {
	MBCommentView* mCommentView;
	MBComment* mComment;
	id _data;
}
@property(retain, nonatomic) id data;
+(id)commentHeightForTableView:(id)tableView;
+(id)commentCellForTableView:(id)tableView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(float)height;
-(void)reLayout:(id)layout reload:(BOOL)reload;
-(void)resetLayout;
-(void)redraw;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBURLConnectionOperation : NSOperation {
	NSThread* mThread;
	NSTimer* mTimer;
	NSURLConnection* mConnection;
	NSURLRequest* mRequest;
	NSURLResponse* mResponse;
	NSError* mError;
	long long mTotalBytesRead;
	long long mTotalBytesExpectedToRead;
	double mTimeoutInterval;
	int mRetryCount;
	int mRetryIndex;
	MBBackgroundTask* mBackgroundTask;
	BOOL mAutoRetryAfterWakeup;
	BOOL mIsUseFile;
	BOOL mResumeEnabled;
	BOOL mAsyncScheduled;
	BOOL mCompleted;
	BOOL mFileCreateFailed;
	int mState;
	NSString* mResumedTmpFilePath;
	NSMutableData* data;
	NSString* path;
	NSFileHandle* handle;
	NSString* _resumedTmpFilePath;
	double startTime;
}
@property(copy, nonatomic) NSString* resumedTmpFilePath;
@property(readonly, assign, nonatomic) int state;
@property(assign, nonatomic) double startTime;
@property(readonly, assign, nonatomic) NSString* filePath;
@property(readonly, assign, nonatomic) NSData* data;
@property(retain, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSURLResponse* response;
@property(copy, nonatomic) NSURLRequest* request;
@property(assign, nonatomic) BOOL fileCreateFailed;
@property(assign, nonatomic) BOOL resumeEnabled;
@property(assign, nonatomic) BOOL isUseFile;
@property(assign, nonatomic) int retryCount;
@property(assign, nonatomic) double timeoutInterval;
@property(assign, nonatomic) BOOL autoRetryAfterWakeup;
-(void).cxx_destruct;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)makeTempFilePath;
-(int)getStartBytesWithResponse;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)cancel;
-(void)main;
-(void)unscheduleInCurrentRunLoop;
-(void)scheduleInCurrentRunLoop;
-(void)unschedule;
-(void)schedule;
-(id)requestForDownload;
-(unsigned long long)getResumeDownloadedTmpFileSize;
-(void)setFilePathForResume:(id)resume;
-(void)saveFileForResume;
-(void)retry;
-(void)timerFired:(id)fired;
-(void)resetTimer;
-(void)keepRunningInBackground;
-(void)resumeConnection;
-(void)suspendConnection;
-(void)finishConnectionWithError:(id)error;
-(void)cancelConnection;
-(void)dealloc;
-(id)init;
-(void)didFinishLoading;
-(void)didFail;
-(void)didCancel;
-(void)willRetryWithAttempt:(int)attempt;
-(BOOL)shouldRetryWithAttempt:(int)attempt;
-(void)didSendBodyData:(int)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)didReceiveBodyData:(int)data totalBytesRead:(long long)read totalBytesExpectedToRead:(long long)read3;
-(void)didReceiveData:(id)data;
-(void)didReceiveResponse;
-(id)needNewBodyStream:(id)stream;
-(id)willSendRequest:(id)request redirectResponse:(id)response;
-(id)willCacheResponse:(id)response;
-(void)willStart;
@end

__attribute__((visibility("hidden")))
@interface AttachedFileModel : NSObject {
	CGSize cachedContentSize_;
	NSString* _fileName;
	NSNumber* _fileSize;
	NSDate* _expiredTimestamp;
}
@property(retain, nonatomic) NSDate* expiredTimestamp;
@property(retain, nonatomic) NSNumber* fileSize;
@property(retain, nonatomic) NSString* fileName;
-(void).cxx_destruct;
-(CGSize)contentSize;
-(float)height;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLAttachedFileQuickLookItem : NSObject <QLPreviewItem> {
	NSString* name_;
	NSURL* url_;
}
@property(readonly, assign) NSString* previewItemTitle;
@property(readonly, assign) NSURL* previewItemURL;
-(void).cxx_destruct;
-(id)initWithName:(id)name URL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface NLSticonTextAttachment : NLTextAttachment <SticonImageComponentDelegate> {
	unsigned _PKG_CODE;
	unsigned _CODE;
	NLSticonMetadata* _sticonMetadata;
}
@property(retain, nonatomic) NLSticonMetadata* sticonMetadata;
@property(readonly, assign, nonatomic) unsigned CODE;
@property(readonly, assign, nonatomic) unsigned PKG_CODE;
-(void).cxx_destruct;
-(void)dealloc;
-(void)sticonDrawImage:(id)image PKG_CODE:(unsigned)code CODE:(unsigned)code3;
-(unsigned)sticonCODE;
-(unsigned)sticonPKG_CODE;
-(id)initWithPKG_CODE:(unsigned)pkg_CODE CODE:(unsigned)code type:(unsigned)type metadata:(id)metadata;
@end

__attribute__((visibility("hidden")))
@interface AttachedFileLoadingViewController : NLViewController {
	ProgressView* progressView_;
}
-(void).cxx_destruct;
-(void)setProgress:(float)progress withSize:(unsigned long long)size total:(unsigned long long)total;
-(void)setupProgressView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface MBCompression : NSObject {
}
+(id)compressedDataWithData:(id)data;
+(id)decompressedDataWithData:(id)data;
+(BOOL)setupDeflateWithCompressionStream:(z_stream_s*)compressionStream;
+(BOOL)setupInflateWithCompressionStream:(z_stream_s*)compressionStream;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface MBCompressionZlib : MBCompression {
}
+(BOOL)setupDeflateWithCompressionStream:(z_stream_s*)compressionStream;
+(BOOL)setupInflateWithCompressionStream:(z_stream_s*)compressionStream;
@end

__attribute__((visibility("hidden")))
@interface MBCompressionGzip : MBCompression {
}
+(BOOL)setupDeflateWithCompressionStream:(z_stream_s*)compressionStream;
+(BOOL)setupInflateWithCompressionStream:(z_stream_s*)compressionStream;
@end

__attribute__((visibility("hidden")))
@interface NLUnreadChatPositionManager : NSObject {
	TalkMessageObject* mPrevUnreadMessasge;
	TalkMessageObject* mFirstUnreadMessasge;
	BOOL isMovingToUnreadPosition;
	BOOL isWillReceiveMsgAfterEnterRoom;
	unsigned chatUnreadCountSnapShot;
	NSNumber* readUpToMessageID;
	MessageViewController* messageViewController;
}
@property(assign, nonatomic) MessageViewController* messageViewController;
@property(copy, nonatomic) NSNumber* readUpToMessageID;
@property(assign, nonatomic) unsigned chatUnreadCountSnapShot;
@property(assign, nonatomic) BOOL isWillReceiveMsgAfterEnterRoom;
@property(assign, nonatomic) BOOL isMovingToUnreadPosition;
+(id)sharedManager;
-(void).cxx_destruct;
-(BOOL)_setUnreadMarkToMessageObject;
-(void)_loadUnreadedMessage;
-(BOOL)_fetchUnreadedMessages;
-(void)_showUnreadedLastMessageLayer;
-(void)_moveToUnreadPosition;
-(BOOL)_hasLastReadedMessage;
-(id)_firstUnreadedIndexPath;
-(id)_lastReadedIndexPath;
-(id)_firstUnreadMessageObject:(id)object;
-(id)_readUpToMessageObject;
-(BOOL)_needLoadingUnreadCurrentLoop;
-(BOOL)_needMovingToUnreadPosition;
-(void)clear;
-(BOOL)processUnreadPosition;
@end

__attribute__((visibility("hidden")))
@interface LineThumbnailSource : LineObjectSource {
	NSURL* _baseDirectoryURL;
	NSMutableArray* _sizesAvailableLocally;
	NSMutableArray* _imageSources;
}
+(id)thumbnailSourceForDirectory:(id)directory key:(id)key;
+(id)thumbnailSourceForDirectory:(id)directory;
-(void).cxx_destruct;
-(void)setObject:(id)object uploadBlock:(id)block progressBlock:(id)block3;
-(BOOL)line_loadFromLocalStorage:(id)localStorage;
-(id)object;
-(id)newRemoteURLForSizeAtIndex:(int)index;
-(id)line_sizesAvailableRemotely;
-(id)newImageSourceForFileURL:(id)fileURL remoteURL:(id)url;
-(id)line_newImageSourceForSize:(CGSize)size remoteSizeIndex:(int)index;
-(id)line_fileExtension;
-(id)newFileURLForImageWithSize:(CGSize)size;
-(id)line_bestFitLocalImageSourceForSize:(CGSize)size contentMode:(int)mode size:(CGSize*)size3;
-(id)imageSourceForSize:(CGSize)size contentMode:(int)mode;
-(id)imageSourceForOriginalImage;
-(id)imageSourceForImageView:(id)imageView;
-(id)initWithKey:(id)key baseDirectoryURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface LineDeallocBlockInvocator : NSObject {
	id _block;
}
-(void).cxx_destruct;
-(void)dealloc;
-(id)initWithBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface MBBadgeView : UIView {
}
+(id)badgeView:(id)view;
@end

__attribute__((visibility("hidden")))
@interface StickerSideMenuView : UIView {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBNoHiddenFriendMessageView : MBMessageView {
	UIImageView* mImageView;
	MBMessageContentLabel* mMessageLabel;
}
+(id)noHiddenFriendMessageView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLViewObjectTracker : NSObject {
	UIView* _tracker;
	id _deallocBlock;
}
@property(copy, nonatomic) id deallocBlock;
@property(assign, nonatomic) UIView* tracker;
-(void).cxx_destruct;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLStickerModel : NSObject {
	int _stickerOptions;
}
@property(readonly, assign, nonatomic) int stickerOptions;
-(void)convertStickerOptions:(id)options;
-(BOOL)hasSound;
-(BOOL)hasAnimation;
@end

__attribute__((visibility("hidden")))
@interface NLCallCopyableLabel : UILabel {
	BOOL _isNumberic;
	UIButton* _delLabelButton;
	id _delegateTarget;
	NSString* _originalString;
}
@property(retain, nonatomic) NSString* originalString;
@property(assign, nonatomic) id delegateTarget;
@property(assign, nonatomic) BOOL isNumberic;
@property(retain, nonatomic) UIButton* delLabelButton;
-(void).cxx_destruct;
-(void)addPasteAfterProcess:(id)process;
-(BOOL)canBecomeFirstResponder;
-(void)handleTap:(id)tap;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)paste:(id)paste;
-(void)copy:(id)copy;
-(void)appendAttachTapHandler:(id)handler;
-(void)attachTapHandler;
-(void)awakeFromNib;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLAppearanceCustomizedNavigationBar : UINavigationBar {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLCallSpotUserInfo : NLCallUserInfo {
	BOOL _isFreePhoneCallable;
	int _categoryCode;
	NSString* _lineAtMid;
	LineLocation* _myLocation;
	LineLocation* _location;
	NSString* _address;
}
@property(retain, nonatomic) NSString* address;
@property(retain, nonatomic) LineLocation* location;
@property(retain, nonatomic) LineLocation* myLocation;
@property(assign, nonatomic) BOOL isFreePhoneCallable;
@property(retain, nonatomic) NSString* lineAtMid;
@property(assign, nonatomic) int categoryCode;
+(id)spotUserInfoFromSpotItem:(id)spotItem currentLocation:(id)location spotLocation:(id)location3;
+(id)spotUserInfoFromSpotItem:(id)spotItem;
-(void).cxx_destruct;
-(id)commonCategoriesName:(unsigned)name;
-(id)findSearchImageName:(unsigned)name;
-(id)findListImageName:(unsigned)name;
-(id)findCategoriesImageName:(unsigned)name;
-(id)findProfileImageName:(unsigned)name;
-(id)findCallingImageName:(unsigned)name;
-(id)distanceString;
-(id)distanceStringSimple;
-(id)toDictionary;
-(id)searchListImageSpot;
-(id)callingImageSpot;
-(id)detailImageSpot;
-(id)catImageSpot;
-(id)histListImageSpot;
-(void)settingSpotUserInfo:(id)info;
-(void)dealloc;
-(id)initWithInfoDictionary:(id)infoDictionary;
@end

__attribute__((visibility("hidden")))
@interface MBLikeUserCell : MBTableViewActionCell {
	MBLikeUserView* mLikeUserView;
}
+(float)height;
+(id)likeUserCellForTableView:(id)tableView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setLike:(id)like;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface MBTimeLabel : MBDateLabel {
}
+(id)timeLabel;
+(void)initialize;
-(void)checkSpan:(id)span newText:(id)text;
-(id)initWithFrame:(CGRect)frame;
-(void)layoutSubviewsForActivityView;
-(void)layoutSubviewsForCommentView;
-(void)layoutSubviewsForPostHeaderView;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumValidator : NSObject {
}
+(void)validatePhotoIDs:(id)ids albumID:(id)anId groupID:(id)anId3;
+(void)validateAlbumIDs:(id)ids groupID:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface NLCallNavigationBarDefault : UINavigationBar {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAAlbumListViewController : LABaseViewController <LAAlbumModelObserving, LASyncStatusObserving, LAAlbumAddPhotosViewDelegate, LATooltipViewDelegate> {
	BOOL mNotNeedUpdateAPI;
	BOOL mPullDownUsed;
	BOOL _shouldShowNewAlbumPage;
	BOOL _calledUpdateAPI;
	NSString* uploadAlbumId;
	int _type;
	LAAlbumListTableView* _tableView;
	NSString* _lastViewedAlbumId;
	float _lastViewedAlbumOffset;
	UIAlertView* _alertView;
	LAActionSheet* _actionSheet;
	LAToolTipView* _tooltipView;
	LALineGalleryImagePickerDelegate* _lineGalleryImagePickerDelegate;
	unsigned _notificationViewType;
	NSString* _notificationAlbumId;
	NSArray* _options;
	LAPhotoViewChatDataSource* _photoViewDataSource;
	LGImagePickerController* _picker;
	NSArray* _mediaInfos;
}
@property(assign, nonatomic) BOOL calledUpdateAPI;
@property(assign, nonatomic) BOOL shouldShowNewAlbumPage;
@property(retain, nonatomic) NSArray* mediaInfos;
@property(retain, nonatomic) LGImagePickerController* picker;
@property(retain, nonatomic) LAPhotoViewChatDataSource* photoViewDataSource;
@property(retain, nonatomic) NSArray* options;
@property(retain, nonatomic) NSString* uploadAlbumId;
@property(retain, nonatomic) NSString* notificationAlbumId;
@property(assign, nonatomic) unsigned notificationViewType;
@property(retain, nonatomic) LALineGalleryImagePickerDelegate* lineGalleryImagePickerDelegate;
@property(retain, nonatomic) LAToolTipView* tooltipView;
@property(retain, nonatomic) LAActionSheet* actionSheet;
@property(retain, nonatomic) UIAlertView* alertView;
@property(assign, nonatomic) float lastViewedAlbumOffset;
@property(retain, nonatomic) NSString* lastViewedAlbumId;
@property(retain, nonatomic) LAAlbumListTableView* tableView;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(void)showNewAlbumPageIfNeeded;
-(void)cleanNotificationView;
-(void)willHideNotificationView:(id)view;
-(void)didTapNotificationView:(id)view;
-(void)showNotificationViewIfNeeded;
-(void)toolTipViewDidTapCloseButton:(id)toolTipView;
-(void)toolTipViewDidTapView:(id)toolTipView;
-(void)setTooltipHidden:(BOOL)hidden;
-(void)showTooltipIfNeeded:(id)needed;
-(void)removeTooltipViewIfExists;
-(void)setPullDownUsed:(BOOL)used;
-(void)didTapRetryButton:(id)button;
-(void)showUploadCancelAlert:(id)alert groupId:(id)anId;
-(void)showUploadErrorAlert:(id)alert groupId:(id)anId;
-(void)didTapProgressView:(id)view;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)albumPhotoChooseCompleted:(int)completed;
-(void)resetAlbumIDToScroll;
-(void)syncOBSNotificationPhotoAddCanceled:(id)canceled groupID:(id)anId packageType:(int)type;
-(void)syncOBSNotificationPhotoAddFailed:(id)failed groupID:(id)anId error:(id)error;
-(void)launchGallery:(id)gallery groupID:(id)anId;
-(void)resetLastViewedAlbumID;
-(void)updateAlbumNotificationPhotoAddCompleted:(id)completed groupID:(id)anId;
-(void)updateAlbumNotificationAPIError:(id)error albumID:(id)anId groupID:(id)anId3;
-(void)updateViewAfterURLConnectedNotifictaion:(id)notifictaion;
-(void)updateAlbumNotificationURLConnectedAlbumList:(id)list shouldReload:(BOOL)reload albumUpdated:(BOOL)updated;
-(void)updateAlbumNotificationCachedAlbumList:(id)list;
-(void)checkIfUploadIsAvailable:(id)available;
-(void)presentAddPhotosViewControllerForDirectUpload;
-(void)presentImagePickerController;
-(void)presentViewForUploadWithAlbumId:(id)albumId;
-(void)tableViewDidSelectRowAtIndexPath:(id)tableView;
-(void)didTapNewAlbumButton:(id)button;
-(void)didTapCloseButton:(id)button;
-(void)didTapBackButton:(id)button;
-(void)setNavigationBarItemEnabled:(BOOL)enabled;
-(void)setupNavigationBarWithInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)isFetching;
-(void)requestPullDownRefresh;
-(void)requestRefresh;
-(void)viewDidUnload;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithGroupID:(id)groupID dataSource:(id)source;
-(id)initWithGroupID:(id)groupID picker:(id)picker mediaInfos:(id)infos;
-(id)initWithGroupID:(id)groupID options:(id)options;
-(id)initWithGroupID:(id)groupID type:(int)type;
-(id)initWithGroupID:(id)groupID;
@end

__attribute__((visibility("hidden")))
@interface NJSURLImageOperation : NJSURLConnectionOperation {
	NJSURLImage* mURLImage;
	BOOL mInvalid;
}
@property(assign, nonatomic) NJSURLImage* URLImage;
-(void)transferToURLImage;
-(void)didReceiveBodyData:(int)data totalBytesRead:(int)read totalBytesExpectedToRead:(int)read3;
-(void)didFinishLoading;
-(void)didFail;
-(void)didReceiveResponse;
@end

__attribute__((visibility("hidden")))
@interface NJSURLImage : NSObject {
	NJSURLImageOperation* mOperation;
	NSURL* mURL;
	NSString* mGroupID;
	NSString* mAlbumId;
	NSString* mPhotoOid;
	NSString* mSize;
	NSString* mScope;
	UIImage* mImage;
	NSError* mError;
	NSMutableSet* mObservers;
	id mCompletionBlock;
	id mReceiveBlock;
	BOOL mKeepConnection;
	int mRetryCount;
	int mRetryIndex;
	int mTotalBytesRead;
	int mTotalBytesExpectedToRead;
}
@property(readonly, assign, nonatomic) NSString* path;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) UIImage* image;
@property(readonly, assign, nonatomic) NSString* scope;
@property(readonly, assign, nonatomic) NSString* size;
@property(readonly, assign, nonatomic) NSString* photoOid;
@property(readonly, assign, nonatomic) NSString* albumId;
@property(readonly, assign, nonatomic) NSString* groupID;
@property(readonly, assign, nonatomic) NSURL* URL;
+(void)removeURLObjectForKey:(id)key groupID:(id)anId;
+(void)removeGlobalURLImages;
+(void)setCachedImage:(id)image url:(id)url albumId:(id)anId groupID:(id)anId4;
+(id)cahcedImageWithURL:(id)url albumId:(id)anId groupID:(id)anId3;
+(void)setTimeoutInterval:(double)interval;
+(void)setRetryInterval:(double)interval;
+(id)imageWithURL:(id)url oid:(id)oid size:(id)size albumId:(id)anId groupID:(id)anId5 retry:(int)retry completion:(id)completion recevice:(id)recevice;
+(void)initialize;
+(void)timerFired:(id)fired;
+(void)scheduleTimer;
-(void).cxx_destruct;
-(unsigned)totalBytesExpectedToRead;
-(unsigned)totalBytesRead;
-(void)cancel;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(BOOL)isObserving:(id)observing;
-(void)retryIfNotLoaded;
-(void)reload;
-(void)keepConnection;
-(id)description;
-(void)dealloc;
-(id)init;
-(id)imageForURL:(id)url scope:(id)scope;
-(void)setData:(id)data forURL:(id)url scope:(id)scope;
-(id)pathForURL:(id)url scope:(id)scope;
-(id)cacheScopeWithScope:(id)scope;
-(void)callbackObservers;
-(void)unregisterTimerHandler;
-(void)registerTimerHandler;
-(void)setURL:(id)url;
-(void)setRetryCount:(int)count;
-(void)setSize:(id)size;
-(void)setPhotoOid:(id)oid;
-(void)setAlbumId:(id)anId;
-(void)setGroupID:(id)anId;
-(void)setScope:(id)scope;
-(void)setReceiveBlock:(id)block;
-(void)setCompletionBlock:(id)block;
-(void)loadFromURLConnection;
-(void)timerFired:(id)fired;
-(void)receiveDataProgressTotalBytesRead:(int)read totalBytesExpectedToRead:(int)read2;
-(void)didFinishLoadingData:(id)data error:(id)error;
-(BOOL)shouldCache;
-(BOOL)shouldReload;
@end

__attribute__((visibility("hidden")))
@interface MBRoundButton : UIButton {
}
+(id)myhomeGroupMakeNewListButtonWithAction:(id)action;
+(id)photoRetryButtonWithAction:(id)action;
+(id)retryButtonWithAction:(id)action;
+(id)friendAddButtonWithAction:(id)action;
+(id)writeMyHomePostButtonWithAction:(id)action;
+(id)writeMyPostButtonWithAction:(id)action;
+(id)showLINEAppButtonWithAction:(id)action;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLThemePackagementEditViewController : NLTableViewController <NLThemePackageManagerDelegate, NSFetchedResultsControllerDelegate> {
	NLSafeUnretainedObject* _uSelf;
	UIView* _tableHeaderView;
	UIBarButtonItem* _editButtonItemEdit;
	UIBarButtonItem* _editButtonItemDone;
	NSFetchedResultsController* _fetchedResultsController;
}
@property(readonly, assign, nonatomic) NSFetchedResultsController* fetchedResultsController;
-(void).cxx_destruct;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)didChangeLineTheme:(id)theme;
-(void)themePackageStartInatall:(id)inatall;
-(void)themePackageDownloadFailed:(id)failed;
-(void)themePackageDownloadEnded:(id)ended;
-(void)themePackageDownloadStarted:(id)started;
-(void)themePackage:(id)package downloaded:(float)downloaded;
-(id)objectOfCurrentModeAndIndexPath:(id)currentModeAndIndexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(BOOL)canEditItem:(id)item;
-(void)reloadCellForPackage:(id)package;
-(id)cellForThemePackage:(id)themePackage;
-(id)headerView;
-(void)dealloc;
-(void)dismiss;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LineAlbumDebugManager : NSObject {
}
+(void)setObsExpiryTimestampForDebug:(double)debug;
+(double)obsExpiryTimestampForDebug;
+(void)resetAlbumAllCache:(id)cache;
+(void)resetAlbumEndDataCache:(id)cache groupID:(id)anId;
+(void)resetAlbumAllDataCache:(id)cache;
+(void)resetAlbumEndImageCache:(id)cache groupID:(id)anId;
+(void)resetAlbumImageCache:(id)cache;
+(BOOL)resetImageCacheForOpenedChat:(id)openedChat;
+(BOOL)resetDataCacheForOpenedChat:(id)openedChat;
@end

__attribute__((visibility("hidden")))
@interface MBCommentView : MBBaseChildCellView <MBActorObserving, UIGestureRecognizerDelegate> {
	UIView* mBackgroundView;
	UIImageView* mStickerErrorView;
	MBProfileImageView* mProfileImageView;
	UIImageView* mOfficialAccountIcon;
	MBNicknameButton* mNicknameButton;
	MBTimeLabel* mTimeLabel;
	NMAttributedLabel* mContentView;
	NLAnimationImageView* mStickerImageView;
	MBCellAttributedLabelDelegate* mTextDelegate;
	UIImage* mOfficialImage;
	UIImage* mOfficialLineAtImage;
	UILabel* mThemeLabel;
	UIImageView* _speakerView;
	int mPostViewType;
	BOOL mEditing;
	BOOL mHidden;
	BOOL mIsSetDataRecursive;
	NSString* cacheKey;
	BOOL _isLockPlayAnimationAfterDownload;
	BOOL _needPlayAnimation;
	MBComment* mComment;
	id<NMAttributedLabelDelegate> _attrDelegate;
}
@property(assign, nonatomic) BOOL needPlayAnimation;
@property(retain, nonatomic) NLAnimationImageView* stickerImageView;
@property(retain, nonatomic) MBComment* comment;
@property(assign, nonatomic) id<NMAttributedLabelDelegate> attrDelegate;
@property(assign, nonatomic) BOOL isLockPlayAnimationAfterDownload;
@property(assign, nonatomic) BOOL editing;
+(id)commentViewWithType:(int)type recursiveFlag:(BOOL)flag;
-(void).cxx_destruct;
-(void)touchEndedAction;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(id)cutStringForCommentText:(id)commentText;
-(id)attributedStringForUnKnownActor;
-(id)attributedStringForKnownActor:(id)knownActor;
-(id)fontForCommentTextActor:(id)commentTextActor;
-(id)fontForCommentText:(id)commentText;
-(id)foregroundColorForCommentText;
-(id)setDefaultAttributeForCommentText:(id)commentText;
-(id)commentTextForRecallInfo;
-(id)commentTextForAttributedString;
-(id)blindTextForAttributedString;
-(id)commentText;
-(void)setNickname:(id)nickname;
-(void)didLoadedSticker:(id)sticker;
-(void)actorDidLoadImage:(id)actor;
-(void)relayout;
-(void)actorDidLoadNickname:(id)actor;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeCommentText:(float)text;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)resetCellData;
-(void)loadingAnimation;
-(BOOL)needPlaySoundComment;
-(void)downloadAnimationSticker;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(void)addObserverRecallUser;
-(void)removeObserverRecallUser;
-(void)setOfficialAccountIcon;
-(id)getOfficialAccountImageByHomeType:(int)type;
-(BOOL)isSetCellDataRecursive;
-(void)saveCache:(id)cache;
-(id)cacheKeyWithWidth:(float)width;
-(id)cacheKey;
-(void)refreshCacheForNickname;
-(void)clearCache;
-(void)dealloc;
-(BOOL)needShowOpenStickertab;
-(void)commentMenuItemSelected:(id)selected;
-(void)stickerTabItemSelected:(id)selected;
-(void)detailMenuItemSelected:(id)selected;
-(void)stickerLongPressed:(id)pressed;
-(void)stickerPressed;
-(void)playAnimationWithoutSound;
-(BOOL)canBecomeFirstResponder;
-(id)initWithType:(int)type recursiveFlag:(BOOL)flag;
@end

__attribute__((visibility("hidden")))
@interface MBCompositeActivity : MBActivity {
	NSDictionary* _contents;
}
@property(readonly, assign, nonatomic) NSDictionary* contents;
+(id)myhomeActivityWithInfo:(id)info;
+(id)timelineActivityWithInfo:(id)info;
-(void).cxx_destruct;
-(void)mergeContentsWithContentes:(id)contentes;
-(id)contentWithName:(id)name;
-(id)contentsWithCoder:(id)coder contents:(id)contents;
-(id)myhomeContentsWithInfo:(id)info contents:(id)contents;
-(id)timelineContentsWithInfo:(id)info contents:(id)contents;
-(void)setParentActivityForContents;
-(id)valueForUndefinedKey:(id)undefinedKey;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(void)setTimelineMultiMergeIndex:(int)index;
-(id)initWithMyhomeInfo:(id)myhomeInfo;
-(id)initWithTimelineInfo:(id)timelineInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageOpQueue : NSObject <NLObjectStorageQueueOperation> {
	unsigned _operationReqSeq;
	NSMutableDictionary* _requestOperations;
	dispatch_queue_s* _opQueue;
	dispatch_queue_s* _encTokenQueue;
	dispatch_group_s* _encTokenGroup;
	BOOL _showsNetworkActivityIndicator;
}
@property(assign, nonatomic) BOOL showsNetworkActivityIndicator;
-(void).cxx_destruct;
-(BOOL)cancelOperationWithUploadProgressDelegate:(id)uploadProgressDelegate;
-(id)operationWithObjectID:(id)objectID;
-(void)enumerateOperationsUsingBlock:(id)block;
-(id)operations;
-(unsigned)operationCount;
-(void)cancelOperation:(id)operation;
-(void)buildRequest:(id)request;
-(void)scheduleOperation:(id)operation;
-(void)scheduleOperation:(id)operation withEncryptedToken:(id)encryptedToken;
-(void)scheduleOperation:(id)operation resetObsAccessToken:(BOOL)token;
-(id)obsAccessToken;
-(void)requestDidCancelOperation:(id)request;
-(void)requestDidFinishOperation:(id)request;
-(void)requestDidStartOperation:(id)request;
-(void)requestDidSuspendOperation:(id)request;
-(void)requestDidEnqueOperation:(id)request;
-(void)requestDidScheduleOperation:(id)request;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLStyleRuleset : NSObject {
	int viewContentMode_;
	BOOL viewContentModeIsSet_;
	UIColor* backgroundColor_;
	UIColor* highlightedBackgroundColor_;
	UIColor* selectedBackgroundColor_;
	UIColor* disabledBackgroundColor_;
	UIColor* textColor_;
	UIColor* highlightedTextColor_;
	UIColor* selectedTextColor_;
	UIColor* disabledTextColor_;
	UIColor* textShadowColor_;
	UIColor* highlightedTextShadowColor_;
	UIColor* selectedTextShadowColor_;
	UIColor* disabledTextShadowColor_;
	CGSize textShadowOffset_;
	BOOL textShadowOffsetIsSet_;
	CGSize size_;
	BOOL sizeIsSet_;
	float cornerRadious_;
	BOOL cornerRadiousIsSet_;
	UIImage* image_;
	UIImage* backgroundImage_;
	UIImage* highlightedBackgroundImage_;
	UIImage* selectedBackgroundImage_;
	UIImage* disabledBackgroundImage_;
	UIImage* iconImage_;
	UIImage* highlightedIconImage_;
	UIImage* selectedIconImage_;
	UIImage* disabledIconImage_;
	UIFont* font_;
	float alpha_;
	BOOL alphaIsSet_;
	int textAlignment_;
	BOOL textAlignmentIsSet_;
	int lineBreakMode_;
	BOOL lineBreakModeIsSet_;
	UIEdgeInsets contentEdgeInsets_;
	BOOL contentEdgeInsetsIsSet_;
	UIEdgeInsets titleEdgeInsets_;
	BOOL titleEdgeInsetsIsSet_;
	UIEdgeInsets imageEdgeInsets_;
	BOOL imageEdgeInsetsIsSet_;
	int statusBarStyle_;
	BOOL statusBarStyleIsSet_;
	NSString* _name;
	NSDictionary* _properties;
	NLStyleRuleset* _superSet;
}
@property(retain, nonatomic) NLStyleRuleset* superSet;
@property(retain, nonatomic) NSDictionary* properties;
@property(retain, nonatomic) NSString* name;
+(BOOL)isGlobalVariableName:(id)name;
+(id)convertedValueToPropertyType:(unsigned)propertyType fromValue:(id)value;
-(void).cxx_destruct;
-(int)statusBarStyle;
-(BOOL)hasStatusBarStyle;
-(float)cornerRadious;
-(BOOL)hasCornerRadious;
-(UIEdgeInsets)imageEdgeInsets;
-(BOOL)hasImageEdgeInsets;
-(UIEdgeInsets)titleEdgeInsets;
-(BOOL)hasTitleEdgeInsets;
-(UIEdgeInsets)contentEdgeInsets;
-(BOOL)hasContentEdgeInsets;
-(int)textAlignment;
-(BOOL)hasTextAlignment;
-(float)alpha;
-(BOOL)hasAlpha;
-(id)disabledIconImage;
-(BOOL)hasDisabledIconImage;
-(id)selectedIconImage;
-(BOOL)hasSelectedIconImage;
-(id)highlightedIconImage;
-(BOOL)hasHighlightedIconImage;
-(id)iconImage;
-(BOOL)hasIconImage;
-(id)disabledBackgroundImage;
-(BOOL)hasDisabledBackgroundImage;
-(id)selectedBackgroundImage;
-(BOOL)hasSelectedBackgroundImage;
-(id)highlightedBackgroundImage;
-(BOOL)hasHighlightedBackgroundImage;
-(BOOL)isPatternedBackgroundImage;
-(id)backgroundImage;
-(BOOL)hasBackgroundImage;
-(id)image;
-(BOOL)hasImage;
-(id)font;
-(BOOL)hasFont;
-(CGSize)textShadowOffset;
-(BOOL)hasTextShadowOffset;
-(id)disabledTextShadowColor;
-(BOOL)hasDisabledTextShadowColor;
-(id)selectedTextShadowColor;
-(BOOL)hasSelectedTextShadowColor;
-(id)highlightedTextShadowColor;
-(BOOL)hasHighlightedTextShadowColor;
-(id)textShadowColor;
-(BOOL)hasTextShadowColor;
-(id)disabledTextColor;
-(BOOL)hasDisabledTextColor;
-(id)selectedTextColor;
-(BOOL)hasSelectedTextColor;
-(id)highlightedTextColor;
-(BOOL)hasHighlightedTextColor;
-(id)textColor;
-(BOOL)hasTextColor;
-(id)disabledBackgroundColor;
-(BOOL)hasDisabledBackgroundColor;
-(id)selectedBackgroundColor;
-(BOOL)hasSelectedBackgroundColor;
-(id)highlightedBackgroundColor;
-(BOOL)hasHighlightedBackgroundColor;
-(int)viewContentMode;
-(BOOL)hasViewContentMode;
-(id)backgroundColor;
-(BOOL)hasBackgroundColor;
-(CGSize)size;
-(BOOL)hasSize;
-(id)supersetKeyName;
-(BOOL)hasInheritance;
-(id)normalValueWithPropertyName:(id)propertyName type:(unsigned)type;
-(BOOL)hasNormalValueWithPropertyName:(id)propertyName;
-(id)attributeValueWithName:(id)name withCompositeProperty:(id)compositeProperty type:(unsigned)type;
-(id)compositePropertyWithName:(id)name;
-(id)propertyWithName:(id)name;
-(id)propertyWithName:(id)name type:(unsigned)type;
-(BOOL)hasAttribute:(id)attribute withCompositeProperty:(id)compositeProperty;
-(BOOL)hasCompositePropertyWithName:(id)name;
-(BOOL)hasPropertyWithName:(id)name;
-(unsigned)deducePropertyTypeWithPropertyName:(id)propertyName;
-(id)imageWithPropertyName:(id)propertyName defaultImage:(id)image attributeName:(id)name;
-(id)imageWithPropertyName:(id)propertyName defaultImage:(id)image;
-(void)mergeFromRuleset:(id)ruleset;
-(id)mergeProperties:(id)properties;
-(void)didReceiveMemoryWarning;
-(void)removeCachedObjects;
-(id)description;
-(void)initialize;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLStylesheet : NSObject {
	NLStylesheetManifest* _manifest;
	NSString* _filePath;
	NSString* _productID;
	NSMutableDictionary* _styleRulesets;
}
@property(retain, nonatomic) NSMutableDictionary* styleRulesets;
@property(retain, nonatomic) NSString* productID;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NLStylesheetManifest* manifest;
+(id)currentLanguage;
+(id)defaultThemeProductID;
+(id)defaultStylesheetPath;
+(id)defaultStylesheetName;
+(id)defaultPackageFileExtentsion;
+(id)resourceDirectoryName;
+(id)extentionForStylesheet;
+(id)fileNameForStylesheet;
+(id)stylesheetFileName;
+(id)stylesheetsRootURL;
+(int)revisionForThisAppVersion;
+(void)resetStylesheetPath;
+(void)saveCurrentStylesheetPath:(id)path;
+(id)currentStylesheetPath;
+(void)setCurrentStylesheet:(id)stylesheet;
+(id)loadDefaultStylesheet;
+(BOOL)isDefaultRuleset;
+(id)currentStylesheet;
+(id)loadAndApplyFromPath:(id)path;
+(id)loadAndApplyFromPathURL:(id)pathURL;
+(id)loadFromPathURL:(id)pathURL;
+(void)initialize;
-(void).cxx_destruct;
-(id)globalRuleset;
-(id)rulsetForStyle:(id)style;
-(BOOL)mergeWithStylesheet:(id)stylesheet;
-(void)setRulesets:(id)rulesets;
-(void)setCurrentStylesheetAsDefault;
-(id)description;
-(BOOL)hasLowRevisionCurrentTheme;
-(id)stylesheetName;
-(void)resetToDefaultStylesheet;
-(BOOL)mergeWithStylesheetRulesets:(id)stylesheetRulesets;
-(BOOL)hasRulesetsOnStylesheet:(id)stylesheet;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLStylesheetConverter : NSObject {
}
+(id)fontWithSize:(id)size fontName:(id)name fontWeight:(id)weight;
+(int)statusBarStyleForUIStatusBarStyleString:(id)uistatusBarStyleString;
+(int)viewContentModeForViewContentModeString:(id)viewContentModeString;
+(int)textAlignmentForTextAlignmentString:(id)textAlignmentString;
+(UIEdgeInsets)edgeInsetsForEdgeInsetsString:(id)edgeInsetsString;
+(id)imageFromImageInfoString:(id)imageInfoString;
+(id)loadImageWithFileName:(id)fileName;
+(CGSize)sizeFromStyleSizeString:(id)styleSizeString;
+(id)colorFromHTMLStyleString:(id)htmlstyleString withDefaultValue:(id)defaultValue;
@end

__attribute__((visibility("hidden")))
@interface MBTimelineHiddenSettingViewController : MBViewController <UITableViewDelegate, UITableViewDataSource, MBHiddenManagerDelegate> {
	MBTableView* mTableView;
	MBHiddenManager* mHiddenManager;
	MBIndicatorLayerView* mIndicatorLayer;
	NSIndexPath* mDelIndexPath;
	NSMutableArray* hiddenList;
}
-(void).cxx_destruct;
-(void)hiddenManager:(id)manager didFinishDelHideWithData:(id)data error:(id)error;
-(void)hiddenManager:(id)manager didFinishRequestHideListWithData:(id)data error:(id)error;
-(void)requestHideList;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)setTitle:(id)title;
-(void)setupNavigationBar;
-(void)showErrorAlert;
@end

__attribute__((visibility("hidden")))
@interface NLStylesheetImageCache : NSObject {
	NSCache* cache_;
}
+(id)sharedCache;
-(void).cxx_destruct;
-(void)clear;
-(void)setImage:(id)image forURL:(id)url;
-(id)loadImageFromURL:(id)url;
-(id)imageForURL:(id)url;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBSendButton : UIButton {
}
+(id)sendButtonWithActionBlock:(id)actionBlock;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeNoDataMessageView : MBMessageView {
	UIImageView* mTopImageView;
	UIView* mBoardView;
	UIImageView* mIconImageView;
	UILabel* mMessageLabel;
	float mHeight;
}
+(id)noDataMessageView;
-(void).cxx_destruct;
-(float)height;
-(void)layoutSubviews;
-(void)layout;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLStylesheetManifest : NSObject {
	NSString* _name;
	NSNumber* _schemaVersion;
	NSNumber* _revision;
	NSString* _providerName;
	NSURL* _providerUrl;
}
@property(retain, nonatomic) NSURL* providerUrl;
@property(retain, nonatomic) NSString* providerName;
@property(retain, nonatomic) NSNumber* revision;
@property(retain, nonatomic) NSNumber* schemaVersion;
@property(retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface NLStylesheetPackageManager : NSObject {
}
+(BOOL)unpackageFilesSharedByITunes;
+(BOOL)removeWithFileURL:(id)fileURL;
+(BOOL)unpackageWithFileURL:(id)fileURL;
+(BOOL)isPackageFileWithFileURL:(id)fileURL;
@end

__attribute__((visibility("hidden")))
@interface MBShareActivity : MBBaseActivityContent {
	MBUrl* mUrl;
	NSURL* mThumbnailUrl;
	CGSize mThumbnailSize;
	NSString* mObjectID;
	NSString* mTitle;
	NSString* mText1;
	NSString* mText2;
	NSArray* mTitleMeta;
	NSArray* mText1Meta;
	NSArray* mText2Meta;
	NSString* mServiceName;
	NSString* mNamespace;
	NSMutableDictionary* mQuery;
	BOOL mIsPreferCdn;
	BOOL mIsForbiddenSave;
	NSAttributedString* mAttrTitleString;
	NSAttributedString* mAttrText1String;
	NSAttributedString* mAttrText2String;
	NSDictionary* mAttrSettings;
}
@property(readonly, assign, nonatomic) BOOL isForbiddenSave;
@property(readonly, assign, nonatomic) BOOL isPreferCdn;
@property(retain, nonatomic) NSDictionary* attrSettings;
@property(readonly, assign, nonatomic) NSAttributedString* attrText2String;
@property(readonly, assign, nonatomic) NSAttributedString* attrText1String;
@property(readonly, assign, nonatomic) NSAttributedString* attrTitleString;
@property(readonly, assign, nonatomic) NSArray* text2Meta;
@property(readonly, assign, nonatomic) NSArray* text1Meta;
@property(readonly, assign, nonatomic) NSArray* titleMeta;
@property(readonly, assign, nonatomic) NSString* text2;
@property(readonly, assign, nonatomic) NSString* text1;
@property(readonly, assign, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) NSString* nameSpace;
@property(readonly, assign, nonatomic) NSString* serviceName;
@property(readonly, assign, nonatomic) NSString* objectID;
@property(readonly, assign, nonatomic) CGSize thumbnailSize;
@property(readonly, assign, nonatomic) NSURL* thumbnailUrl;
@property(readonly, assign, nonatomic) MBUrl* url;
+(void)initialize;
-(void).cxx_destruct;
-(void)setupWithAdditionalContentInfo:(id)additionalContentInfo;
-(void)setupWithExternalInfo:(id)externalInfo;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(id)initWithAdditionalContentInfo:(id)additionalContentInfo;
-(id)initWithExternalInfo:(id)externalInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)decorateAttributes:(id)attributes;
-(id)defaultAttrSettings;
@end

__attribute__((visibility("hidden")))
@interface NLStylesheetParser : NSObject {
}
-(void)buildInheritanceStructureBetweenRulesets:(id)rulesets;
-(id)rulesetFromStylesheetObjects:(id)stylesheetObjects;
-(id)manifestFromStylesheetObjects:(id)stylesheetObjects;
-(id)parse:(id)parse;
-(id)stylesheetFromData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface NLMessageInputBarPolicyForLine : NSObject <NLMessageInputBarPolicy> {
}
-(BOOL)isUseRecallUsers;
-(int)returnKeyType;
-(unsigned)inputBarType;
@end

__attribute__((visibility("hidden")))
@interface LANumberView : UIView {
	unsigned _count;
	UIFont* _font;
	UIColor* _color;
	UIColor* _borderColor;
	float _borderWidth;
}
@property(assign, nonatomic) float borderWidth;
@property(retain, nonatomic) UIColor* borderColor;
@property(retain, nonatomic) UIColor* color;
@property(retain, nonatomic) UIFont* font;
@property(assign, nonatomic) unsigned count;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)resize;
-(id)textFromCount;
-(void)setSystemFontOfSize:(unsigned)size;
-(void)setFont:(id)font borderWidth:(float)width;
-(void)dealloc;
-(void)commonInit;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLMessageInputBarPolicyForTimeLine : NSObject <NLMessageInputBarPolicy> {
}
-(BOOL)isUseRecallUsers;
-(int)returnKeyType;
-(unsigned)inputBarType;
@end

__attribute__((visibility("hidden")))
@interface NLMessageInputBar : UIView {
	BOOL _showsAudioMessageLabel;
	id<NLMessageInputBarPolicy> _inputBarPolicy;
	id<NLGrowingTextViewDelegate> _textViewDelegate;
	id<LineKeyboardDelegate> _keyboardDelegate;
	id<NLMessageInputBarDelegate> _sendBarDelegate;
	NLGrowingTextView* _textView;
	UIButton* _attachButton;
	UIButton* _emojiButton;
	UIButton* _sendButton;
	UIImageView* _sendView;
	UIImageView* _messageBgView;
}
@property(retain, nonatomic) UIImageView* messageBgView;
@property(retain, nonatomic) UIImageView* sendView;
@property(assign, nonatomic) BOOL showsAudioMessageLabel;
@property(retain, nonatomic) UIButton* sendButton;
@property(retain, nonatomic) UIButton* emojiButton;
@property(retain, nonatomic) UIButton* attachButton;
@property(retain, nonatomic) NLGrowingTextView* textView;
@property(assign, nonatomic) id<NLMessageInputBarDelegate> sendBarDelegate;
@property(assign, nonatomic) id<LineKeyboardDelegate> keyboardDelegate;
@property(assign, nonatomic) id<NLGrowingTextViewDelegate> textViewDelegate;
@property(retain, nonatomic) id<NLMessageInputBarPolicy> inputBarPolicy;
+(id)messageSendBar;
-(void).cxx_destruct;
-(void)resetButtonImageIconsForStates;
-(BOOL)render;
-(void)enableSendButton:(BOOL)button;
-(void)setTextViewMaxNumberOfLine:(int)line;
-(void)setTextColor:(id)color;
-(id)defaultTypingAttributes;
-(BOOL)respondsToAttributedText;
-(NSRange)selectedRange;
-(void)setSelectedRange:(NSRange)range;
-(id)attributedText;
-(void)setAttributedText:(id)text;
-(id)text;
-(void)setText:(id)text;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)isFirstResponder;
-(int)minimumSizeSendBarSendButton;
-(void)layoutMessageInputBarWhenHasText;
-(void)layoutMessageInputBar;
-(void)hiddenButtonForInputBarType:(unsigned)inputBarType;
-(void)showHideCustomKeyboard:(BOOL)keyboard;
-(void)toggleCustomKeyboard:(id)keyboard;
-(void)actionSend:(id)send;
-(void)actionToggle:(id)toggle;
-(void)actionAttach:(id)attach;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)updateSendButton;
@end

__attribute__((visibility("hidden")))
@interface NLMessageInputBarPolicyForLCS : NSObject <NLMessageInputBarPolicy> {
}
-(BOOL)isUseRecallUsers;
-(int)returnKeyType;
-(unsigned)inputBarType;
@end

__attribute__((visibility("hidden")))
@interface NLMessageSendTypeSelectionView : UIView {
	NSArray* _supportedSendTypes;
	int _currentSendButtonType;
	NSArray* _sendTypeOptionButtons;
}
@property(copy, nonatomic) NSArray* sendTypeOptionButtons;
@property(assign, nonatomic) int currentSendButtonType;
@property(copy, nonatomic) NSArray* supportedSendTypes;
+(id)messageSendTypeSelectionView:(id)view;
-(void).cxx_destruct;
-(BOOL)render;
-(id)sendButtonTypeStringForType:(int)type;
-(void)updateSendTypeOptionSelected:(int)selected;
-(void)updateOptionButtonTarget:(id)target selector:(SEL)selector;
-(id)configureSubviews;
@end

__attribute__((visibility("hidden")))
@interface NLCallCommonTableViewCell : LineTableViewCell {
	UIColor* _colorBackGroundColor;
}
@property(retain, nonatomic) UIColor* colorBackGroundColor;
-(void).cxx_destruct;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)initCustomCells;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLActivityContentHeightMap : NSObject {
}
+(float)heightWithType:(int)type activity:(id)activity width:(float)width class:(Class)aClass;
+(float)mergeContentHeightWithPostViewType:(int)postViewType activity:(id)activity width:(float)width;
+(float)contentHeightWithPostViewType:(int)postViewType activity:(id)activity width:(float)width;
+(float)footerHeightWithType:(int)type activity:(id)activity width:(float)width;
+(UIEdgeInsets)marginWithActivity:(id)activity cellView:(Class)view postViewType:(int)type;
+(UIEdgeInsets)marginWithPostViewType:(int)postViewType;
@end

__attribute__((visibility("hidden")))
@interface CategoryNewStatus : NSObject {
	NSString* _stringFormatNewFlagVersion;
}
-(void).cxx_destruct;
-(id)stringRepresentation;
-(BOOL)isEqualTo:(id)to;
-(BOOL)isGreaterThan:(id)than;
-(id)initWithItems:(id)items;
-(id)initWithString:(id)string;
@end

__attribute__((visibility("hidden")))
@interface NLSocialGraphManager : NSObject {
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(id)filterMatchedContactsWithNumber:(id)number limit:(unsigned)limit error:(id*)error;
-(id)filterContactsWithNumber:(id)number limit:(unsigned)limit error:(id*)error;
-(id)contactsWithLimit:(unsigned)limit error:(id*)error;
-(id)usersWithMids:(id)mids;
-(id)groupsFetchedResultsControllerWithDelegate:(id)delegate;
-(id)favoriteUsersFetchedResultsControllerWithDelegate:(id)delegate markedFriends:(id)friends;
-(id)usersFetchedResultsControllerWithDelegate:(id)delegate markedFriends:(id)friends;
-(id)myhomeGroupsFetchedResultsControllerWithDelegate:(id)delegate;
-(void)updateMyhomeGroupsOrder;
-(void)updateMyhomeGroupWithUpdatedGroups:(id)updatedGroups startIndex:(int)index completionBlockOnMainThread:(id)thread errorBlockOnMainThread:(id)thread4;
-(void)updateMyhomeGroupWithUpdatedGroups:(id)updatedGroups syncMemberUpdated:(BOOL)updated deletedGroups:(id)groups completionBlockOnMainThread:(id)thread errorBlockOnMainThread:(id)thread5;
-(void)updateMyhomeGroupId:(long long)anId name:(id)name memberCnt:(int)cnt memberUpdated:(long long)updated addMembers:(id)members delMembers:(id)members6 completionBlockOnMainThread:(id)thread errorBlockOnMainThread:(id)thread8;
-(void)deleteMyhomeGroupWithGids:(id)gids completionBlockOnMainThread:(id)thread errorBlockOnMainThread:(id)thread3;
-(void)deleteMyhomeGroupWithGid:(long long)gid completionBlockOnMainThread:(id)thread errorBlockOnMainThread:(id)thread3;
-(void)addMyHomeGroupWithData:(id)data completionBlockOnMainThread:(id)thread errorBlockOnMainThread:(id)thread3;
-(id)loadMyHomeGroupMembersWithGroupId:(long long)groupId error:(id*)error;
-(id)myhomeGroupsWithGids:(id)gids error:(id*)error;
-(id)loadMyHomeGroupListWithGroupInfos:(id)groupInfos error:(id*)error;
-(id)loadMyHomeGroupListWithError:(id*)error;
-(unsigned)myhomeGroupCountWithError:(id*)error;
-(id)myhomeGroupForGroupId:(long long)groupId inManagedObjectContext:(id)managedObjectContext;
-(id)myhomeGroupForGroupObject:(id)groupObject;
-(id)groupModelWithData:(id)data syncMemberUpdated:(BOOL)updated inManagedObjectContext:(id)managedObjectContext;
-(id)joiningGroups;
-(BOOL)isJoiningGroup:(id)group;
-(id)groupForID:(id)anId;
-(id)groupFromGroupObject:(id)groupObject;
-(void)unblockUserWithMID:(id)mid completionBlock:(id)block errorBlock:(id)block3;
-(void)unblockFriendWithMID:(id)mid completionBlock:(id)block errorBlock:(id)block3;
-(void)addFriendWithMID:(id)mid contactType:(int)type completionBlock:(id)block errorBlock:(id)block4;
-(id)displayNameIfExistWithMID:(id)mid;
-(BOOL)isBlockedUserWithMID:(id)mid;
-(BOOL)isFriendWithMID:(id)mid;
-(void)loadLineUserForMID:(id)mid completionBlock:(id)block errorBlock:(id)block3;
-(id)lineUserFromUserObject:(id)userObject;
-(id)friendsWithMids:(id)mids error:(id*)error;
-(id)friendsWithOptions:(unsigned)options error:(id*)error;
-(id)managedObjectContextForReadOnly;
-(void)performErrorBlockOnMainThread:(id)thread withError:(id)error;
-(void)performCompletionBlockOnMainThread:(id)thread withResult:(id)result;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLUser : NSObject {
	NSString* _MID;
	NSString* _displayName;
	NSString* _addressbookName;
	NSString* _customName;
	NSString* _statusMessage;
	NSURL* _profileImageURL;
	BOOL _friend;
	BOOL _unregistered;
	BOOL _blocking;
}
@property(assign, nonatomic, getter=isBlocking) BOOL blocking;
@property(assign, nonatomic, getter=isUnregistered) BOOL unregistered;
@property(assign, nonatomic, getter=isFriend) BOOL friend;
@property(retain, nonatomic) NSURL* profileImageURL;
@property(retain, nonatomic) NSString* statusMessage;
@property(retain, nonatomic) NSString* customName;
@property(retain, nonatomic) NSString* addressbookName;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* MID;
+(id)profileImageURLForMID:(id)mid;
-(void).cxx_destruct;
-(id)initWithLineContact:(id)lineContact;
-(id)initWithTalkUserObject:(id)talkUserObject;
@end

__attribute__((visibility("hidden")))
@interface NLGroup : NSObject {
	NSString* _ID;
	NSString* _name;
	NSArray* _members;
}
@property(retain, nonatomic) NSArray* members;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(id)initWithGroupObject:(id)groupObject;
@end

__attribute__((visibility("hidden")))
@interface NLThemePresentBoxViewController : NLTableViewController <StickerShopSegmentControllerDelegate, UITableViewDataSource, UITableViewDelegate> {
	NLSafeUnretainedObject* _uSelf;
	NSString* _shopId;
	int _currentPresentListMode;
	NSMutableArray* _presentsSentList;
	NSMutableArray* _presentsReceivedList;
	BOOL _isFetchingSentData;
	BOOL _isFetchingReceivedData;
	BOOL _hasMoreSentData;
	BOOL _hasMoreReceivedData;
	UILabel* _noResultLabel;
}
-(void).cxx_destruct;
-(void)fetchPresentListOfCurrentMode;
-(BOOL)hasMoreDateOfCurrentMode;
-(id)presentListOfCurrentMode;
-(id)presentOfCurrentModeAndIndex:(id)currentModeAndIndex;
-(void)tappedSentPresentButton;
-(void)tappedReceivedPresentButton;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)isMaintenanceShownBecauseOfError:(id)error;
-(void)updateErrorMessageIsShow:(BOOL)show;
-(void)updateDefaultMessageIsShow:(BOOL)show;
-(void)fetchPresentsReceived;
-(void)fetchPresentsSent;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)changeSegment:(id)segment;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLInAppBrowserView : UIView <UIWebViewDelegate, UIScrollViewDelegate, NJKWebViewProgressDelegate> {
	UIWebView* mWebview;
	NSString* mURLString;
	UIView* mBlackBGView;
	UIView* mNoResultView;
	UILabel* mTitleLabel;
	UIView* mNavigationbarShadow;
	UIButton* mBackwardButton;
	UIButton* mForwardButton;
	UIButton* mReloadButton;
	UIButton* mOtherActionButton;
	UIActivityIndicatorView* mIndicatorView;
	CGPoint mDragStartPoint;
	NSString* mErrorFailingURLString;
	UIProgressView* mProgressBar;
	NJKWebViewProgress* mProgressProxy;
	UIViewController* mBaseViewController;
	BOOL _isShownMoviePalyer;
	int _prevStatusBarStyleForMoviePlayer;
}
@property(assign, nonatomic) int prevStatusBarStyleForMoviePlayer;
@property(assign, nonatomic) BOOL isShownMoviePalyer;
@property(assign, nonatomic) UIViewController* baseViewController;
@property(retain, nonatomic) NSString* urlString;
+(CGRect)rectInWindowBounds:(CGRect)windowBounds statusBarOrientation:(int)orientation statusBarHeight:(float)height;
+(BOOL)suitableLaunchSafariApp:(id)app;
+(void)removeInAppBrowserFromWindow;
+(BOOL)isShownInAppBrowser;
-(void).cxx_destruct;
-(void)webViewScrollToTop;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)webViewProgress:(id)progress updateProgress:(float)progress2;
-(void)webViewIsLoading:(BOOL)loading;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)didTouchedOtherAction;
-(void)didTouchedReloadAction;
-(void)didTouchedForwardAction;
-(void)didTouchedBackwardAction;
-(void)didTouchedCloseAction;
-(void)panGesture:(id)gesture;
-(float)getStatusBarHeight;
-(void)setIfNotEqualTransform:(CGAffineTransform)transform frame:(CGRect)frame;
-(void)rotateAccordingToStatusBarOrientationAndSupportedOrientations;
-(void)statusBarFrameOrOrientationChanged:(id)changed;
-(void)layoutSubviews;
-(void)dismissFromKeyWindow:(id)keyWindow;
-(void)moviePlayerDidExitFullscreenNotification:(id)moviePlayer;
-(void)moviePlayerDidEnterFullscreenNotification:(id)moviePlayer;
-(void)showInKeyWindow;
-(void)dealloc;
-(id)initWithURLString:(id)urlstring;
-(void)hideCurrentViewWithAnimate:(BOOL)animate closeMessage:(id)message;
-(void)showCurrentViewAnimated;
-(void)setupPanGesture;
-(void)setupLeftShadowEffect;
-(void)setupNoResultView;
-(void)setupBottomBar;
-(void)setupWebview;
-(void)setupNavigationBar;
-(id)createBottomBarButton:(CGRect)button normal:(id)normal highlighted:(id)highlighted disabled:(id)disabled action:(SEL)action;
@end

__attribute__((visibility("hidden")))
@interface NLLaunchManager : NSObject {
}
+(void)shutDown;
+(void)synchronizeChannels;
+(void)endTerminationDelay;
+(void)startTerminationDelay;
+(void)executeTaskInWillTerminate;
+(void)executeTaskInDidEnterBackground;
+(void)executeTaskInWillEnterForeground;
+(void)executeTaskInWillResignActive;
+(void)noDelayActiveGroup;
+(void)executeTaskInDidBecomeActive;
+(void)delayLaunchGroup;
+(void)noDelayLaunchGroup;
+(void)launchBeforeCreateMainWindow;
+(void)executeTaskInLaunch;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoPostDetailContentScrollView : UIScrollView {
}
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface MBPhotoPostDetailContentView : UIView <UIScrollViewDelegate, MBActionable> {
	MBActivity* mActivity;
	int mPostViewType;
	MBLikeLayerView* mLikeLayer;
	UIScrollView* mPostTextScrollView;
	UILabel* mTitleLabel;
	UIButton* mSaveButton;
	UIView* mHeaderView;
	UIView* mFooterView;
	UIView* mBackgroundView;
	UIButton* mCommentTextButton;
	UIImageView* mDotView;
	MBAction* mActionable;
	bool mPlainTextDarkness;
}
@property(readonly, assign, nonatomic) UIButton* saveButton;
@property(readonly, assign, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) MBActivity* activity;
+(id)photoPostDetailContentViewWithFrame:(CGRect)frame controller:(id)controller;
-(void).cxx_destruct;
-(void)setHeaderViewHidden:(BOOL)hidden;
-(void)setHeaderViewHiddenNoti;
-(void)resetScrollPosition;
-(void)hideLikeLayer;
-(void)showLikeLayer:(id)layer;
-(BOOL)hasActions;
-(void)performActionWithName:(id)name sender:(id)sender userInfo:(id)info;
-(void)setActionWithName:(id)name block:(id)block;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)createFooterView;
-(id)createRightPaddingView:(id)view;
-(id)createFooterCommentButton:(id)button;
-(id)createFooterLikeButton:(id)button;
-(float)textButtonSize:(id)size;
-(id)createTextButton:(id)button text:(id)text;
-(id)createFooterCommentTextButton:(id)button footer:(id)footer;
-(id)createFooterDotView:(id)view;
-(id)createFooterLikeTextButton:(id)button;
-(id)createFooterBackgroundView:(id)view;
-(id)createBodyView;
-(id)createBodyTextView:(id)view;
-(id)createBodyScrollView:(id)view;
-(id)createBodyBackgroundView:(id)view;
-(id)createHeaderView;
-(id)createHeaderTitleLabel:(id)label;
-(id)createHeaderSaveButton:(id)button;
-(id)createHeaderCloseButton:(id)button;
-(id)createHeaderTopLineView:(id)view;
-(void)dealloc;
-(void)setFooterIsUseComment;
-(void)setFooterViewHidden;
-(id)initWithFrame:(CGRect)frame controller:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface NLManagedMetadata : _NLManagedMetadata {
}
+(id)metadataInContext:(id)context;
+(void)autocreateMetadataInContext:(id)context;
-(void)setStickerDefLatestVersionValue:(long long)value needToDownload:(BOOL)download;
-(long long)stickerDefLatestVersionValue;
-(BOOL)stickerDefVersionAndDataInSync;
-(BOOL)hasStickerDef;
@end

__attribute__((visibility("hidden")))
@interface ShopObject : _ShopObject {
}
@end

__attribute__((visibility("hidden")))
@interface LGAsset : NSObject {
	BOOL _selected;
	BOOL _isValidPlayTime;
	UIImage* _thumbnail;
	UIImage* _thumbnailForEnd;
	NSDate* _savedDate;
	NSURL* _URL;
	NSString* _groupPersistID;
	float _width;
	float _height;
	ALAsset* _originalAsset;
	UIImage* _fullScreenImage;
	NSThread* _executableThread;
	unsigned _filterIndex;
	unsigned _rotateCount;
}
@property(assign, nonatomic) unsigned rotateCount;
@property(assign, nonatomic) unsigned filterIndex;
@property(assign, nonatomic) BOOL isValidPlayTime;
@property(assign, nonatomic) BOOL selected;
@property(assign, nonatomic) __weak NSThread* executableThread;
@property(retain, nonatomic) UIImage* fullScreenImage;
@property(retain, nonatomic) ALAsset* originalAsset;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) float width;
@property(retain, nonatomic) NSString* groupPersistID;
@property(retain, nonatomic) NSURL* URL;
@property(retain, nonatomic) NSDate* savedDate;
@property(retain, nonatomic) UIImage* thumbnailForEnd;
@property(retain, nonatomic) UIImage* thumbnail;
-(void).cxx_destruct;
-(id)valueForProperty:(id)property;
-(void)setAssetPropertyValue:(id)value;
-(BOOL)isValidOriginalAsset;
-(BOOL)isOriginalAssetBroken;
-(BOOL)isEdited;
-(BOOL)setFullScreenImageWithAssetsLibrarySafeExecutor:(id)assetsLibrarySafeExecutor;
-(CGSize)fullScreenSizeForSize:(CGSize)size;
-(void)setALAsset:(id)asset groupPersistID:(id)anId;
-(void)dealloc;
-(id)initWithExecutableThread:(id)executableThread;
@end

__attribute__((visibility("hidden")))
@interface NLMultiInvitationViewController : NLViewController <UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, UISearchDisplayDelegate, UIAlertViewDelegate, ABPersonViewControllerDelegate, ABNewPersonViewControllerDelegate, MFMessageComposeViewControllerDelegate, NLMultiInvitationCellDelegate> {
	UITableView* tableView_;
	NSMutableArray* filteredExpandContent_;
	NSString* savedSearchTerm_;
	BOOL searchWasActive_;
	void* addressBook_;
	BOOL addressBookIsChanged_;
	NSMutableArray* personExpandRecords_;
	BOOL isShowingAuthorizationAlert_;
	BOOL _isExpandingRecords;
	BOOL shouldRestart_;
	CFArrayRef personRecords_;
	long currentIndex_;
	long numContacts_;
	NSTimer* timer_;
	NSMutableDictionary* selectedPersons_;
	BOOL isSMSEnabled;
	BOOL isEmailEnabled;
	UIView* bottomConsoleView_;
	UIButton* inviteButton_;
	UILabel* countLabel_;
	UIView* tableFooterView;
	BOOL _isMultiSelectionEnabled;
	int _method;
}
@property(readonly, assign) void* addressBook;
@property(assign, nonatomic) BOOL isMultiSelectionEnabled;
@property(assign, nonatomic) int method;
-(void).cxx_destruct;
-(BOOL)isAddressBookChanged;
-(void)updateBottomConsoleView;
-(id)bottomConsoleView;
-(void)onCancel:(id)cancel;
-(void)onSMSInvite:(id)invite;
-(void)multiInvitationCellInviteButtonTapped:(id)tapped;
-(void)multiInvitationCellTapped:(id)tapped;
-(BOOL)personViewController:(id)controller shouldPerformDefaultActionForPerson:(void*)person property:(int)property identifier:(int)identifier;
-(void)sendSMS:(id)sms;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onAddPressed:(id)pressed;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)selectDictionaryKeyForInfo:(id)info;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)personInfoAtIndex:(unsigned)index withTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(int)preferredStatusBarStyle;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)releasePersonRecords;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)switchTest:(id)test;
-(void)viewDidLoad;
-(void)updateMultiSelection:(BOOL)selection;
-(BOOL)isLineUser:(void*)user;
-(id)nameForPerson:(void*)person;
-(id)emailForPerson:(void*)person;
-(id)phoneNumberForPerson:(void*)person;
-(unsigned)numberOfPersons;
-(void)reloadPersonTable;
-(void)createDetailedRecords:(id)records;
-(void)startProcessingTimer;
-(void)loadPersons;
-(void)stopIndicator;
-(void)startIndicator;
-(void)close;
-(void)markAddressBookDirty;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface NLInvitedPersonInfo : NSObject {
	BOOL isLineUser;
	NSString* name;
	int type;
	NSString* telEmailString;
	void* person;
	int index;
}
@property(assign, nonatomic) int index;
@property(assign, nonatomic) void* person;
@property(retain, nonatomic) NSString* telEmailString;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) BOOL isLineUser;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LGHorizontalTableView : UITableView <UITableViewDataSource> {
	id<UITableViewDataSource> _horizontalDataSource;
	int _scrollIndicatorPosition;
}
@property(assign, nonatomic) int scrollIndicatorPosition;
-(void).cxx_destruct;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)forwardInvocation:(id)invocation;
-(BOOL)respondsToSelector:(SEL)selector;
-(void)setContentInset:(UIEdgeInsets)inset;
-(void)setScrollIndicatorInsets:(UIEdgeInsets)insets;
-(void)setFrame:(CGRect)frame;
-(void)setDataSource:(id)source;
@end

__attribute__((visibility("hidden")))
@interface NLMultiInvitationCell : UITableViewCell {
	UIButton* _bgButton;
	UIImageView* _userIcon;
	UIImageView* _checkBoxImageView;
	UIButton* _inviteButton;
	UILabel* _subTitle;
	int _cellStyle;
	id _delegate;
	NLInvitedPersonInfo* _info;
}
@property(retain, nonatomic) NLInvitedPersonInfo* info;
@property(assign, nonatomic) id delegate;
-(void).cxx_destruct;
-(void)onTap:(id)tap;
-(void)onTapInvite:(id)invite;
-(void)layoutSubviews;
-(void)setContactName:(id)name telOrEmail:(id)email userType:(int)type isSelected:(BOOL)selected;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(BOOL)render;
-(id)initWithCellStyle:(int)cellStyle tableStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NJSDiskCache : NSObject {
	NSMutableSet* mScopes;
	NSMutableDictionary* mItemMaxCounts;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedDiskCache;
-(void).cxx_destruct;
-(id)imageForRemoteURL:(id)remoteURL scope:(id)scope;
-(id)dataForRemoteURL:(id)remoteURL scope:(id)scope;
-(BOOL)setImage:(id)image forRemoteURL:(id)remoteURL scope:(id)scope;
-(BOOL)setData:(id)data forRemoteURL:(id)remoteURL scope:(id)scope;
-(id)contentsOfScope:(id)scope;
-(void)resetAlbumEndImage:(id)image groupID:(id)anId;
-(void)emptyScope:(id)scope;
-(void)emptyCacheBefore:(id)before duration:(long)duration;
-(void)emptyScope:(id)scope before:(id)before duration:(long)duration;
-(void)resetRepository;
-(BOOL)isValidScope:(id)scope;
-(id)scopes;
-(BOOL)addScope:(id)scope itemMaxCount:(int)count;
-(BOOL)addScope:(id)scope;
-(id)pathForRemoteURL:(id)remoteURL scope:(id)scope;
-(id)pathForScope:(id)scope;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLSticonMetadata : NLTextMetadata {
	NSString* _rawString;
	unsigned _packageCode;
	unsigned _code;
	NSString* _keyword;
}
@property(retain, nonatomic) NSString* keyword;
@property(assign, nonatomic) unsigned code;
@property(assign, nonatomic) unsigned packageCode;
-(void).cxx_destruct;
-(id)description;
-(int)displayTextLength;
-(id)emoticonCompatibleStringIfPossible;
-(id)rawString;
-(void)setRawString:(id)string;
-(id)initWithRawString:(id)rawString;
-(id)initWithPackageCode:(unsigned)packageCode code:(unsigned)code keyword:(id)keyword;
@end

__attribute__((visibility("hidden")))
@interface NLConsoleView : UITextView {
}
-(void)pageDown;
-(void)pageUp;
-(void)scrollToBottom;
-(void)scrollToUp;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ProfileQRCodeGeneratorViewController : QRCodeGeneratorViewController {
}
-(void)didReceiveMemoryWarning;
-(void)profileQRBack;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface NMSticonImageView : UIImageView <SticonImageComponentDelegate> {
	unsigned _PKG_CODE;
	unsigned _CODE;
}
@property(readonly, assign, nonatomic) unsigned CODE;
@property(readonly, assign, nonatomic) unsigned PKG_CODE;
-(void)dealloc;
-(void)sticonDrawImage:(id)image PKG_CODE:(unsigned)code CODE:(unsigned)code3;
-(unsigned)sticonCODE;
-(unsigned)sticonPKG_CODE;
-(id)initWithFrame:(CGRect)frame PKG_CODE:(unsigned)code CODE:(unsigned)code3;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ProfileQRCodeViewController : QRCodeViewController {
}
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
-(void)finishQR;
-(void)createProfileQR;
-(void)onBackButtonPressed;
@end

__attribute__((visibility("hidden")))
@interface CheckHttpSchemeURLProtocol : NSURLProtocol {
}
+(BOOL)requestIsCacheEquivalent:(id)equivalent toRequest:(id)request;
+(id)canonicalRequestForRequest:(id)request;
+(BOOL)canInitWithRequest:(id)request;
+(void)checkWithURL:(id)url headers:(id)headers;
+(id)whitelistHosts;
+(void)initialize;
+(void)load;
+(void)swizzleMethod:(SEL)method inClass:(Class)aClass withMethod:(SEL)method3 fromClass:(Class)aClass4;
-(id)requestHookedWithURL:(id)url;
-(void)stopLoading;
-(void)startLoading;
@end

__attribute__((visibility("hidden")))
@interface NLSettingsTableViewController : NLTableViewController {
	NSArray* _rowKeySections;
	NLTableViewRowInfoMapping* _rowInfoMapping;
}
@property(readonly, assign, nonatomic) NLTableViewRowInfoMapping* rowInfoMapping;
@property(readonly, assign, nonatomic) NSArray* rowKeySections;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)reloadDataSource;
-(id)indexPathWithRowKey:(int)rowKey;
-(int)rowKeyAtIndexPath:(id)indexPath;
-(id)rowKeysInSection:(int)section;
-(id)rowKeysInSectionAtIndexPath:(id)indexPath;
-(void)presentViewController:(id)controller forIndexPath:(id)indexPath rowKey:(int)key;
-(id)newRowKeySections;
-(void)configureRowInfoMapping:(id)mapping;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface LineShopShopConstants : NSObject {
}
+(id)PRESENT_ATTR_PRESENT_MESSAGE_TEMPLATE_ID;
+(id)IMAGE_KEY_PREVIEW_THUMBNAIL;
+(id)IMAGE_KEY_PREVIEW;
+(id)IMAGE_KEY_MY_LIST_ICON;
+(id)IMAGE_KEY_PURCHASE_LIST_ICON;
+(id)IMAGE_KEY_LIST_ICON;
+(id)IMAGE_KEY_DOWNLOAD_ICON;
+(id)IMAGE_KEY_DETAIL_ICON;
+(id)SALES_FLAG_NEW;
+(id)SHOWCASE_ID_ALL;
+(id)PRODUCT_TYPE_STICON;
+(id)PRODUCT_TYPE_THEME;
+(id)PRODUCT_TYPE_STICKER;
+(id)SHOP_ID_STICON;
+(id)SHOP_ID_THEME;
+(id)SHOP_ID_STICKER;
+(long long)PRODUCT_EVENT_FAILED_TO_APPLY;
+(long long)PRODUCT_EVENT_FAILED_TO_INSTALL;
+(long long)PRODUCT_EVENT_UNINSTALLED;
+(long long)PRODUCT_EVENT_UNAPPLIED;
+(long long)PRODUCT_EVENT_APPLIED;
+(long long)PRODUCT_EVENT_INSTALLED;
+(void)initialize;
@end

__attribute__((visibility("hidden"),objc_exception))
@interface LineShopShopException : NSException {
	int __code;
	NSString* __reason;
	NSDictionary* __parameterMap;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSDictionary* parameterMap;
@property(retain, nonatomic) NSString* reason;
@property(assign, nonatomic) int code;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LineShopRequestContext : NSObject {
	NSString* __mid;
	NSString* __applicationType;
	NSString* __applicationVersion;
	NSString* __sourceIp;
	NSString* __display;
	NSString* __country;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* display;
@property(retain, nonatomic) NSString* sourceIp;
@property(retain, nonatomic) NSString* applicationVersion;
@property(retain, nonatomic) NSString* applicationType;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopPrice : NSObject {
	NSString* __currency;
	NSString* __amount;
	NSString* __priceString;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* priceString;
@property(retain, nonatomic) NSString* amount;
@property(retain, nonatomic) NSString* currency;
+(id)priceWithCurrency:(id)currency amount:(id)amount priceString:(id)string;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopApplicationVersionRange : NSObject <NSCoding> {
	NSString* __lowerBound;
	BOOL __lowerBoundInclusive;
	NSString* __upperBound;
	BOOL __upperBoundInclusive;
	XXStruct_JTAGoB __isSet;
}
@property(readonly, assign, nonatomic) BOOL upperBoundInclusiveIsSet;
@property(assign, nonatomic, getter=isUpperBoundInclusive) BOOL upperBoundInclusive;
@property(retain, nonatomic) NSString* upperBound;
@property(readonly, assign, nonatomic) BOOL lowerBoundInclusiveIsSet;
@property(assign, nonatomic, getter=isLowerBoundInclusive) BOOL lowerBoundInclusive;
@property(retain, nonatomic) NSString* lowerBound;
+(id)versionRangeWithString:(id)string;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(int)compareRangeWithAppVersion:(id)appVersion;
-(BOOL)isInRangeWithAppVersion:(id)appVersion;
-(id)versionString;
@end

__attribute__((visibility("hidden")))
@interface LineShopProductDetail : NSObject {
	NSString* __ID;
	NSString* __billingItemId;
	NSString* __type;
	NSString* __name;
	NSString* __author;
	NSString* __details;
	NSString* __copyright;
	NSString* __notice;
	long long __latestVersion;
	NSString* __latestVersionString;
	long long __version;
	NSString* __versionString;
	LineShopApplicationVersionRange* __applicationVersionRange;
	BOOL __owned;
	BOOL __grantedByDefault;
	int __validFor;
	long long __validUntil;
	BOOL __onSale;
	NSSet* __salesFlags;
	BOOL __availableForPresent;
	BOOL __availableForMyself;
	int __priceTier;
	LineShopPrice* __price;
	NSString* __priceInLineCoin;
	NSDictionary* __images;
	NSDictionary* __attributes;
	struct {
		unsigned latestVersion : 1;
		unsigned version : 1;
		unsigned owned : 1;
		unsigned grantedByDefault : 1;
		unsigned validFor : 1;
		unsigned validUntil : 1;
		unsigned onSale : 1;
		unsigned availableForPresent : 1;
		unsigned availableForMyself : 1;
		unsigned priceTier : 1;
	} __isSet;
}
@property(retain, nonatomic) NSDictionary* attributes;
@property(retain, nonatomic) NSDictionary* images;
@property(retain, nonatomic) NSString* priceInLineCoin;
@property(retain, nonatomic) LineShopPrice* price;
@property(assign, nonatomic) int priceTier;
@property(assign, nonatomic, getter=isAvailableForMyself) BOOL availableForMyself;
@property(assign, nonatomic, getter=isAvailableForPresent) BOOL availableForPresent;
@property(retain, nonatomic) NSSet* salesFlags;
@property(assign, nonatomic, getter=isOnSale) BOOL onSale;
@property(assign, nonatomic) long long validUntil;
@property(assign, nonatomic) int validFor;
@property(assign, nonatomic, getter=isGrantedByDefault) BOOL grantedByDefault;
@property(assign, nonatomic, getter=isOwned) BOOL owned;
@property(retain, nonatomic) LineShopApplicationVersionRange* applicationVersionRange;
@property(retain, nonatomic) NSString* versionString;
@property(assign, nonatomic) long long version;
@property(retain, nonatomic) NSString* latestVersionString;
@property(assign, nonatomic) long long latestVersion;
@property(retain, nonatomic) NSString* notice;
@property(retain, nonatomic) NSString* copyright;
@property(retain, nonatomic) NSString* details;
@property(retain, nonatomic) NSString* author;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSString* billingItemId;
@property(retain, nonatomic) NSString* ID;
+(void)requestImageOfProduct:(id)product forImageView:(id)imageView;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)deleteFromDB;
-(void)saveOrUpdateDB;
-(id)priceText;
-(id)validDaysAndVersionText;
-(id)versionText;
-(id)expirationeDateText;
-(id)validDaysText;
-(BOOL)isNew;
-(BOOL)isFree;
-(int)compareRangeAppVersion;
-(BOOL)isInRangeAppVersion;
-(id)urlWithString:(id)string;
-(id)firstItemAsUrlOfList:(id)list;
-(id)previewThumbnailURLWithType:(int)type;
-(id)previewURLWithType:(int)type;
-(id)myListIconURL;
-(id)purchaseListIconURL;
-(id)listIconURL;
-(id)downloadIconURL;
-(id)detailIconURL;
-(id)previewThumbnail;
-(id)preview;
-(id)myListIcon;
-(id)purchaseListIcon;
-(id)listIcon;
-(id)downloadIcon;
-(id)detailIcon;
-(BOOL)isAvailableVersion;
-(BOOL)isNeedUpdate;
-(long long)currentThemeVersion;
-(id)themePackage;
-(void)setSalesFlagesWithValue:(long long)value;
-(long long)salesFlagsValue;
@end

__attribute__((visibility("hidden")))
@interface LineShopProductSummary : NSObject <NSCoding> {
	NSString* __ID;
	long long __latestVersion;
	LineShopApplicationVersionRange* __applicationVersionRange;
	NSDictionary* __attributes;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSDictionary* attributes;
@property(retain, nonatomic) LineShopApplicationVersionRange* applicationVersionRange;
@property(readonly, assign, nonatomic) BOOL latestVersionIsSet;
@property(assign, nonatomic) long long latestVersion;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LineShopBanner : NSObject {
	long long __ID;
	int __linkType;
	NSString* __linkDescriptor;
	NSString* __language;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) NSString* language;
@property(retain, nonatomic) NSString* linkDescriptor;
@property(assign, nonatomic) int linkType;
@property(assign, nonatomic) long long ID;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(id)bannerURL;
@end

__attribute__((visibility("hidden")))
@interface LineShopShowcase : NSObject {
	NSString* __ID;
	NSString* __name;
	NSArray* __productList;
	int __offset;
	int __totalSize;
	LineShopBanner* __banner;
	XXStruct_JTAGoB __isSet;
}
@property(retain, nonatomic) LineShopBanner* banner;
@property(assign, nonatomic) int totalSize;
@property(assign, nonatomic) int offset;
@property(retain, nonatomic) NSArray* productList;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopLocale : NSObject {
	NSString* __language;
	NSString* __country;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* language;
+(id)locale;
+(id)localeWithCountry:(id)country language:(id)language;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopDetailedProductList : NSObject {
	NSArray* __productList;
	int __offset;
	int __totalSize;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) int totalSize;
@property(assign, nonatomic) int offset;
@property(retain, nonatomic) NSArray* productList;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(BOOL)hasNext;
@end

__attribute__((visibility("hidden")))
@interface LineShopProductSummaryList : NSObject {
	NSArray* __productList;
	int __offset;
	int __totalSize;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) int totalSize;
@property(assign, nonatomic) int offset;
@property(retain, nonatomic) NSArray* productList;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
-(BOOL)hasNext;
@end

__attribute__((visibility("hidden")))
@interface LineShopProductValidationScheme : NSObject {
	NSString* __key;
	long long __offset;
	long long __size;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) long long size;
@property(assign, nonatomic) long long offset;
@property(retain, nonatomic) NSString* key;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopProductValidationRequest : NSObject {
	LineShopProductValidationScheme* __validationScheme;
	NSString* __authCode;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* authCode;
@property(retain, nonatomic) LineShopProductValidationScheme* validationScheme;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopProductValidationResult : NSObject {
	BOOL __validated;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic, getter=isValidated) BOOL validated;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopPurchaseOrder : NSObject {
	NSString* __shopId;
	NSString* __productId;
	NSString* __recipientMid;
	LineShopPrice* __price;
	LineShopLocale* __locale;
	NSDictionary* __presentAttributes;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSDictionary* presentAttributes;
@property(retain, nonatomic) LineShopLocale* locale;
@property(retain, nonatomic) LineShopPrice* price;
@property(retain, nonatomic) NSString* recipientMid;
@property(retain, nonatomic) NSString* productId;
@property(retain, nonatomic) NSString* shopId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopPurchaseOrderResponse : NSObject {
	NSString* __orderId;
	NSDictionary* __attributes;
	NSString* __billingConfirmUrl;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSString* billingConfirmUrl;
@property(retain, nonatomic) NSDictionary* attributes;
@property(retain, nonatomic) NSString* orderId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopPurchaseRecord : NSObject {
	LineShopProductDetail* __productDetail;
	long long __purchasedTime;
	NSString* __giver;
	NSString* __recipient;
	XXStruct_PMaOsD __isSet;
}
@property(retain, nonatomic) NSString* recipient;
@property(retain, nonatomic) NSString* giver;
@property(assign, nonatomic) long long purchasedTime;
@property(retain, nonatomic) LineShopProductDetail* productDetail;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopPurchaseRecordList : NSObject {
	NSArray* __purchaseRecords;
	int __offset;
	int __totalSize;
	XXStruct_JTAGoB __isSet;
}
@property(assign, nonatomic) int totalSize;
@property(assign, nonatomic) int offset;
@property(retain, nonatomic) NSArray* purchaseRecords;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopShopUpdates : NSObject {
	NSString* __shopId;
	long long __latestUpdateTime;
	XXStruct_PMaOsD __isSet;
}
@property(assign, nonatomic) long long latestUpdateTime;
@property(retain, nonatomic) NSString* shopId;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LineShopShop : NSObject {
	NSString* __ID;
	NSString* __name;
	NSArray* __showcaseNames;
	z_stream_s __isSet;
}
@property(retain, nonatomic) NSArray* showcaseNames;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)write:(id)write;
-(void)read:(id)read;
@end

__attribute__((visibility("hidden")))
@interface LGFilterPhotoViewController : LGPhotoViewController <LGFilterListViewDelegate, UIActionSheetDelegate, LGLineAlbumTooltipViewDelegate> {
	BOOL _showingFilterList;
	LGFilterListView* _filterListView;
	LGAssetsLibrarySafeExecutor* _assetsLibrarySafeExecutorForPreview;
	LGLineAlbumTooltipView* _tooltipView;
}
@property(retain, nonatomic) LGLineAlbumTooltipView* tooltipView;
@property(retain, nonatomic) LGAssetsLibrarySafeExecutor* assetsLibrarySafeExecutorForPreview;
@property(assign, nonatomic) BOOL showingFilterList;
@property(retain, nonatomic) LGFilterListView* filterListView;
-(void).cxx_destruct;
-(id)assetsLibrarySafeExecutor;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)animationDidStart:(id)animation;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)filterListView:(id)view didFilterImage:(id)image filteredImage:(id)image3 filterIndex:(unsigned)index;
-(void)filterListView:(id)view willFilterImageWithIndex:(unsigned)index;
-(void)filterListViewDidFilterThumbnailImages:(id)filterListView;
-(void)cleanUpTooltipView;
-(id)viewForTooltipCenterPosition;
-(id)viewForTooltipYPosition;
-(void)updateCheckedBadgeCountOfMenuEndView:(BOOL)menuEndView;
-(BOOL)isEditedByLineCamera;
-(id)editedFilePathByLineCamera;
-(void)didSelectSendToLineAlbumButton:(id)lineAlbumButton;
-(void)didSelectedSelectButton:(id)button;
-(void)didSelectedEditWithLineCamera:(id)lineCamera;
-(void)didSelectedRotateButton:(id)button;
-(void)didSelectedEditButton:(id)button;
-(void)didDisplayFullImage:(id)image;
-(void)editCurrentImage;
-(void)resetToOriginalImage;
-(id)editedImageWithGalleryAsset:(id)galleryAsset;
-(int)integerValueOfCheckedBadgeLabel;
-(void)resolveEditedImage:(id)image originalAssetURL:(id)url;
-(void)setMenuHidden:(BOOL)hidden;
-(BOOL)hasInfo;
-(void)setupInfoView;
-(void)setupContentView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMediaInfos:(id)mediaInfos assetsLibrarySafeExecutor:(id)executor config:(id)config;
-(id)initWithImage:(id)image config:(id)config;
-(id)initWithCropedImage:(id)cropedImage config:(id)config;
-(void)showManyPhotosCanShareToLineAlbumTooltip;
-(void)hideHUD;
-(void)showHUD;
-(void)showEditImageActionSheet;
-(BOOL)isEditableLineCamera;
-(void)updateEditedButton:(id)button;
-(void)applyFilterToFilterListView;
-(void)editCurrentImageWithLineCamera;
-(BOOL)loadFullResolutionEditedImageAndEditWithCamera:(id)camera;
-(void)setImageToLinePasteBoard:(id)linePasteBoard;
-(void)resetEditStatus;
-(void)resetFilterTableViewFrame;
-(void)resetFilterListViewFrame;
-(void)hideFilterListView;
-(void)toggleFilterListView;
-(void)resetInfoButtonFrame;
@end

__attribute__((visibility("hidden")))
@interface LineSticonTabView : LineStickerTabView {
	LineStickerTabButton* _kaomojiButton;
}
@property(retain, nonatomic) LineStickerTabButton* kaomojiButton;
-(void).cxx_destruct;
-(void)controlProgressViewWithPackage:(id)package WithProgress:(float)progress;
-(void)stickerPackageJustDownloadEnded:(id)ended;
-(void)stickerPackageDownloadSuccess:(id)success;
-(void)stickerPackageDownloadStarted:(id)started;
-(void)stickerPackageDownloadFailed:(id)failed;
-(void)stickerPackageDownloadCanceled:(id)canceled;
-(void)stickerPackage:(id)package downloaded:(float)downloaded;
-(int)stickerTabCount;
-(void)removeNewBadgeForPackage:(id)package;
-(void)configureButton:(id)button forPackage:(id)package;
-(void)selectKaomojiButton;
-(void)kaomojiButtonPressed:(id)pressed;
-(void)letControllerOpenPackage:(id)package;
-(void)moveTailButtonsWithSuperview:(id)superview offsetX:(float)x;
-(void)addTailButtons;
-(BOOL)shouldShowShopIcon;
-(void)initTabDatasource;
-(void)setSticonToggleButtonAction;
-(void)setBackButtonAction;
-(id)initWithFrame:(CGRect)frame controllerView:(id)view options:(unsigned)options;
@end

__attribute__((visibility("hidden")))
@interface NLOfficialFriendsViewController : NLViewController <UITableViewDelegate, UITableViewDataSource, NSFetchedResultsControllerDelegate, UISearchBarDelegate, UISearchDisplayDelegate, UIScrollViewDelegate, NLProfilePopupViewerDelegate, SWTableViewCellDelegate> {
	UITableView* tableView_;
	UIView* tableFooterView;
	SocialGraphSectionManager* _sectionsMgr;
	NLProfilePopupViewer* _profilePopupViewer;
}
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
@property(retain, nonatomic) SocialGraphSectionManager* sectionsMgr;
-(void).cxx_destruct;
-(void)updateBuddyBadgeForce;
-(void)updateBuddyBadgeIfNeed;
-(void)swippableTableViewCell:(id)cell didTriggerRightUtilityButtonWithIndex:(int)index;
-(void)themeManagerDidApplyPackageNotification:(id)themeManager;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controllerWillChangeContent:(id)controller;
-(id)relatedTableViewForFetchedResultController:(id)fetchedResultController;
-(void)profileImageView:(id)view wasTouched:(id)touched tapCount:(int)count;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)actionSelectedCellWithTableView:(id)tableView atIndexPath:(id)indexPath;
-(void)showDetailPopupWithDataObject:(id)dataObject;
-(void)moveToRecommendList;
-(void)backToFriendsList;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)updateRecommendBadge;
-(void)backToFriendsIfEmpty;
-(void)setRightBarButton;
-(void)updateNavigationBarTitle;
-(void)uninitialize;
-(void)commonInitialize;
-(void)initializeSections;
-(int)preferredStatusBarStyle;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)dealloc;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageLegacyDownloadOperation : NLObjectStorageOperation {
}
-(void)buildRequest;
-(void)preprocessOnFailed:(id)failed;
@end

__attribute__((visibility("hidden")))
@interface URLRequestService : NSObject {
}
+(int)legy2UrlErrorCode:(int)code;
+(id)legy2UrlErrorDomain:(id)domain;
+(void)requestUrl:(id)url requestInfo:(id)info completionBlock:(id)block;
+(BOOL)canLegyRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface LineConnectionInfoAcquisitorExternal : NSObject <LEGYConnectionInfoAcquisitorExternal> {
}
-(id)userAgent;
-(id)applicationInfo;
-(id)accessToken;
-(id)carrierInfoForConnectionInfo;
-(id)countryCodeFromTelSIMLocale;
-(void)save;
-(void)resetCachedConnectionInfoDate;
-(void)setCachedConnectionInfo:(id)info withKey:(id)key;
-(id)cachedConnectionInfoDate;
-(id)cachedConnectionInfoWithKey:(id)key;
-(id)talkServerHosts;
-(void)setLastSuccessfulHost:(id)host withKey:(id)key;
-(id)lastSuccessfulHostWithKey:(id)key;
@end

__attribute__((visibility("hidden")))
@interface MBPhotos : MBBaseActivityContent {
	NSArray* mPhotos;
	float mPhotoListOffset;
}
@property(assign, nonatomic) float photoListOffset;
@property(readonly, assign, nonatomic) NSArray* photos;
-(void).cxx_destruct;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LABadgeButton : UIButton {
	LABadgeView* _badgeView;
}
@property(retain, nonatomic) LABadgeView* badgeView;
-(void).cxx_destruct;
-(void)setEnabled:(BOOL)enabled;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LABottomBarView : UIView {
	UIImageView* _backgroundImageView;
	BOOL _disableButtonWhenHasNoBadge;
	NSMutableArray* _buttons;
	id<LABottomBarViewDelegate> _delegate;
	unsigned _buttonAlignment;
}
@property(assign, nonatomic) unsigned buttonAlignment;
@property(assign, nonatomic) BOOL disableButtonWhenHasNoBadge;
@property(assign, nonatomic) id<LABottomBarViewDelegate> delegate;
@property(retain, nonatomic) NSMutableArray* buttons;
-(void).cxx_destruct;
-(void)setButtonEnabled:(BOOL)enabled atIndex:(unsigned)index;
-(void)setBadge:(unsigned)badge atIndex:(unsigned)index animated:(BOOL)animated;
-(void)didTapButton:(id)button;
-(void)freeWidthLayoutWithMargin:(int)margin;
-(void)updateLayout;
-(void)removeAllButtons;
-(void)addButtonWithImage:(id)image title:(id)title isGrayBg:(BOOL)bg;
-(void)addButtonWithImage:(id)image;
-(void)addButtonWithTitle:(id)title;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate buttonTitles:(id)titles;
@end

__attribute__((visibility("hidden")))
@interface FetchOperationService : NSObject {
}
+(void)_processOperations:(id)operations inContext:(id)context;
+(void)receivedRemoteNotificationWithOpRevision:(long long)opRevision fetchLevel:(unsigned)level fetchCompletionHandler:(id)handler;
+(void)receivedRemoteNotificationWithOpRevision:(long long)opRevision;
+(void)setLastOpRevision:(long long)revision;
+(void)lastOpRevisionWithCompletionBlock:(id)completionBlock;
+(void)shutDown;
+(void)start;
+(id)instance;
@end

__attribute__((visibility("hidden")))
@interface ImageMapView : UIView <UIGestureRecognizerDelegate> {
	ImageMapSceneObject* currentScene_;
	UIView* contentView_;
	UIImage* rootImage_;
	CGAffineTransform affineTransform_;
	CGAffineTransform lastAffineTransform_;
	NSMutableDictionary* drawList_;
	NSMutableDictionary* listenerList_;
	UIImageView* backGroundImage_;
	CALayer* contentMaskLayer_;
	UIActivityIndicatorView* act_;
	NSArray* _actionList;
}
@property(readonly, retain, nonatomic) NSArray* actionList;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setLoading:(BOOL)loading;
-(BOOL)hasImage;
-(void)setRootImage:(id)image;
-(void)updateImageViewFrame:(id)frame;
-(void)setScene:(id)scene;
-(void)setAffineTransform:(CGAffineTransform)transform;
@end

__attribute__((visibility("hidden")))
@interface LicenseContentsViewController : NLViewController {
	NSString* _titleString;
}
@property(retain, nonatomic) NSString* titleString;
-(void).cxx_destruct;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface NLCallSpotSearchTableViewCell : UITableViewCell {
	NSArray* mInfoArray;
	UIImageView* _imageViewSpot;
	NMAttributedLabel* _viewName;
	NMAttributedLabel* _viewExtraInfo;
	UIImageView* _imageViewLineAt;
	NLCallSenderButton* _buttonCall;
	UIView* _viewVerticalLine;
	UIView* _viewBottomLine;
	UILabel* _labelLineATTenpo;
}
@property(assign, nonatomic) UILabel* labelLineATTenpo;
@property(assign, nonatomic) UIView* viewBottomLine;
@property(assign, nonatomic) UIView* viewVerticalLine;
@property(assign, nonatomic) NLCallSenderButton* buttonCall;
@property(assign, nonatomic) UIImageView* imageViewLineAt;
@property(assign, nonatomic) NMAttributedLabel* viewExtraInfo;
@property(assign, nonatomic) NMAttributedLabel* viewName;
@property(assign, nonatomic) UIImageView* imageViewSpot;
+(id)viewFromNib;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setUserInfo:(id)info withDelegate:(id)delegate withKeyWord:(id)keyWord;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)awakeFromNib;
-(void)initDefault;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LEGYDeviceManagerExternalImpl : NSObject <LEGYDeviceManagerExternal> {
}
-(id)carrierInfo;
-(id)carrierCountryCode;
-(id)telCountryCode;
-(id)localeRegion;
@end

__attribute__((visibility("hidden")))
@interface MBRecommendListView : MBBaseChildCellView {
	MBActivity* mActivity;
	NSMutableArray* mRecommendViewArray;
}
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(id)recommendList;
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface MBImageConfig : NSObject <NSCoding> {
	float mWidth;
	float mHeight;
	NSString* mObsNamespace;
	NSString* mServiceName;
	NSString* mType;
	NSString* mTid;
	NSString* mName;
}
@property(readonly, assign, nonatomic) NSString* name;
@property(readonly, assign, nonatomic) NSString* tid;
@property(readonly, assign, nonatomic) NSString* type;
@property(readonly, assign, nonatomic) NSString* serviceName;
@property(readonly, assign, nonatomic) NSString* obsNamespace;
@property(readonly, assign, nonatomic) float height;
@property(readonly, assign, nonatomic) float width;
+(id)snapMovieConfigWithDefault;
+(id)movieConfigWithDefault;
+(id)imageMultiConfigWithDefault;
+(id)imageConfigWithDefault;
+(id)imageConfigWithData:(id)data;
-(void).cxx_destruct;
-(id)initWithData:(id)data;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LAChatThumbnailListViewController : LAThumbnailListViewController {
	BOOL _shouldShowImageEnd;
}
-(void)reloadView:(BOOL)view;
-(void)presentPhotoViewControllerAtIndex:(unsigned)index;
-(void)didTapSelectAllButton:(id)button;
-(void)thumbnailCellDidTapThumbnailAtIndex:(unsigned)thumbnailCell;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)chatDataSource;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithChatDataSource:(id)chatDataSource;
@end

__attribute__((visibility("hidden")))
@interface ImageMapImageObject : NSObject {
	NSString* _name;
	CGRect _rect;
}
@property(readonly, assign, nonatomic) CGRect rect;
@property(readonly, retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)description;
-(id)initWithName:(id)name andRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface NLThemePackageManagementViewController : NLTableViewController <NLThemePackageManagerDelegate, NSFetchedResultsControllerDelegate> {
	NLSafeUnretainedObject* _uSelf;
	UIBarButtonItem* _editButtonItemEdit;
	BOOL _isFirstVisit;
	NSFetchedResultsController* _fetchedResultsController;
	UIActivityIndicatorView* _indicator;
}
@property(retain, nonatomic) UIActivityIndicatorView* indicator;
@property(assign, nonatomic) BOOL isFirstVisit;
@property(readonly, assign, nonatomic) NSFetchedResultsController* fetchedResultsController;
-(void).cxx_destruct;
-(void)didChangeLineTheme:(id)theme;
-(void)cancelDownloadTheme:(id)theme;
-(void)downloadTheme:(id)theme;
-(void)applyTheme:(id)theme;
-(void)notifyAppliedEventWithPackage:(id)package;
-(void)themePackageEndInstall:(id)install;
-(void)themePackageStartInatall:(id)inatall;
-(void)themePackageDownloadFailed:(id)failed;
-(void)themePackageDownloadEnded:(id)ended;
-(void)themePackageDownloadStarted:(id)started;
-(void)themePackage:(id)package downloaded:(float)downloaded;
-(void)controllerDidChangeContent:(id)controller;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(BOOL)isMaintenanceShownBecauseOfError:(id)error;
-(void)fetchProductListFromServer;
-(BOOL)canEditItem:(id)item;
-(void)goThemeShopFromShortcut;
-(void)reloadCellForPackage:(id)package;
-(id)cellForThemePackage:(id)themePackage;
-(void)updateEditButtonVisible;
-(void)goEditMode;
-(id)footerView;
-(void)dealloc;
-(void)dismiss;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LAPagingScrollView : UIScrollView <UIScrollViewDelegate> {
	BOOL _shouldTilePages;
	BOOL _chaningPhotoGroup;
	BOOL _removingPhoto;
	NSString* _groupId;
	id<LAPagingScrollViewDelegate> _pagingDelegate;
	int _firstVisiblePageIndexBeforeRotation;
	float _percentScrolledIntoFirstVisiblePage;
	NSMutableSet* _recyclePages;
	NSMutableSet* _visiblePages;
	unsigned _lastScrollDirection;
	int _lastIndex;
	CGPoint _lastContentOffset;
}
@property(assign, nonatomic) int lastIndex;
@property(assign, nonatomic) CGPoint lastContentOffset;
@property(assign, nonatomic) unsigned lastScrollDirection;
@property(assign, nonatomic) BOOL removingPhoto;
@property(assign, nonatomic) BOOL chaningPhotoGroup;
@property(retain, nonatomic) NSMutableSet* visiblePages;
@property(retain, nonatomic) NSMutableSet* recyclePages;
@property(assign, nonatomic) float percentScrolledIntoFirstVisiblePage;
@property(assign, nonatomic) int firstVisiblePageIndexBeforeRotation;
@property(assign, nonatomic) BOOL shouldTilePages;
@property(assign, nonatomic) id<LAPagingScrollViewDelegate> pagingDelegate;
@property(retain, nonatomic) NSString* groupId;
-(void).cxx_destruct;
-(void)refreshPageAtIndex:(int)index animated:(BOOL)animated;
-(void)refreshPages;
-(void)removeObjectAtIndex:(id)index;
-(void)removeCurrentPage;
-(void)configurePage:(id)page forIndex:(int)index instantly:(BOOL)instantly;
-(id)dequeueRecycledPage;
-(BOOL)isDisplayingPageForIndex:(int)index;
-(void)changePhotoGroupIfNeeded;
-(void)tilePagesInstantly:(BOOL)instantly;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(unsigned)numberOfPages;
-(id)pageForKey:(id)key;
-(id)pageAtIndex:(int)index;
-(id)currentPage;
-(int)currentIndex;
-(float)contentOffsetAtIndex:(int)index;
-(void)setContentOffsetAtIndex:(int)index animated:(BOOL)animated;
-(CGRect)frameForPageAtIndex:(int)index;
-(CGSize)currentContentSize;
-(void)resetContentSizeIfNeeded;
-(CGRect)currentBounds;
-(void)setupView:(BOOL)view;
-(id)initWithFrame:(CGRect)frame pagingDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageEncryptedToken : NSObject {
	double _createdTime;
	int _expireInterval;
	NSString* _encryptedToken;
}
@property(readonly, assign, nonatomic) NSString* encryptedToken;
+(BOOL)isEnabled;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(int)parseEncryptedToken:(id)token;
-(BOOL)isExpired;
-(void)resetEncryptedTokenIfNotUpdated:(id)updated;
-(void)updateEncryptedToken:(id)token;
-(void)saveEncryptedToken;
-(void)loadEncryptedToken;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLShopService : NSObject {
}
+(void)notifyProductEventWithPackageID:(long long)packageID version:(long long)version event:(long long)event completionBlock:(id)block;
+(void)getSticonShopSummaryWithCompletionBlock:(id)completionBlock;
+(void)getSticonShopSummaryWithShopID:(id)shopID withArray:(id)array completionBlock:(id)block;
+(void)getOwnedProductsForSticonWithShopId:(id)shopId range:(NSRange)range completionBlock:(id)block;
+(void)getSummaryProductWithShopID:(id)shopID withArray:(id)array completionBlock:(id)block;
+(void)getOwnendProductWithShopID:(id)shopID withArray:(id)array completionBlock:(id)block;
+(void)getAllSummaryProductWithCompletionBlock:(id)completionBlock;
+(void)getAllOwnendProductWithCompletionBlock:(id)completionBlock;
+(void)getUpdatesWithShopId:(id)shopId completionBlock:(id)block;
+(void)getOwnedProductSummariesWithShopId:(id)shopId range:(NSRange)range completionBlock:(id)block;
+(void)canReceivePresentWithShopId:(id)shopId productID:(id)anId toMID:(id)mid completionBlock:(id)block;
+(void)placePurchaseOrderWithIAP:(id)iap completionBlock:(id)block;
+(void)placePurchaseOrderWithLineCoin:(id)lineCoin completionBlock:(id)block;
+(void)placePurchaseOrderForFreeProduct:(id)freeProduct completionBlock:(id)block;
+(void)getSentPresentsWithShopId:(id)shopId range:(NSRange)range completionBlock:(id)block;
+(void)getReceivedPresentsWithShopId:(id)shopId range:(NSRange)range completionBlock:(id)block;
+(void)getPurchasedProductsWithShopId:(id)shopId range:(NSRange)range completionBlock:(id)block;
+(void)getOwnedProductsWithShopId:(id)shopId range:(NSRange)range completionBlock:(id)block;
+(void)getProductByVersion:(long long)version productID:(id)anId shopID:(id)anId3 completionBlock:(id)block;
+(void)getProductWithBillingIDs:(id)billingIDs shopId:(id)anId completionBlock:(id)block;
+(void)getProductWithProductID:(id)productID shopId:(id)anId completionBlock:(id)block;
+(void)getShowcaseWithShopId:(id)shopId showcaseId:(id)anId range:(NSRange)range completionBlock:(id)block;
+(void)validateProductWithShopPackage:(id)shopPackage validationReq:(id)req completionBlock:(id)block;
+(void)productValidationSchemeWithShopPackage:(id)shopPackage completionBlock:(id)block;
+(void)notifyProductEventWithShopPackage:(id)shopPackage productEvent:(long long)event completionBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface ImageMapStateManager : NSObject {
	ImageMapRootObject* rootObject_;
	NSString* _downloadUrlString;
	ImageMapSceneObject* _currentScene;
	int _specRevision;
	NSString* _altText;
}
@property(retain, nonatomic) NSString* altText;
@property(assign, nonatomic) int specRevision;
@property(retain, nonatomic) ImageMapSceneObject* currentScene;
@property(retain, nonatomic) NSString* downloadUrlString;
-(void).cxx_destruct;
-(BOOL)isAvailable;
-(id)altTextInOneLine;
-(CGRect)getFrameForScreenWidth:(float)screenWidth;
-(CGAffineTransform)affineTransformForScreenWidth:(float)screenWidth;
-(id)initWithJsonDictionary:(id)jsonDictionary;
-(id)initWithRootObject:(id)rootObject;
@end

__attribute__((visibility("hidden")))
@interface NLCallLocalFileManager : NSObject {
	NSMutableArray* historyRawCache;
	NSArray* _mCachedArray;
	NSDate* _mNowDate;
	dispatch_queue_s* dQueue;
	NSString* _regionNumberByAuthentications;
	NSCache* _imageCachingForProfile;
	BOOL _isAuthenticationAddressBook;
	NSDictionary* _duplicatedCountryInfo;
	NSMutableDictionary* _countryInfoByRegionCode;
	NSArray* _localCachedAddressBookAllArray;
	NSString* _currentRegionCode;
	NSMutableDictionary* _countryInfoByRegionNumber;
}
@property(retain, nonatomic) NSMutableDictionary* countryInfoByRegionNumber;
@property(retain, nonatomic) NSString* currentRegionCode;
@property(assign, nonatomic) BOOL isAuthenticationAddressBook;
@property(retain, nonatomic) NSArray* localCachedAddressBookAllArray;
@property(retain, nonatomic) NSMutableDictionary* countryInfoByRegionCode;
@property(retain, nonatomic) NSDictionary* duplicatedCountryInfo;
+(id)stringFromFloat:(float)aFloat maxFractionDigits:(int)digits;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)setNoticeChargeCreditTooltip:(BOOL)tooltip;
-(BOOL)isNoticeChargeCreditTooltip;
-(void)setCLIAuthStatus:(unsigned)status;
-(unsigned)CLIAuthStatus;
-(void)setCLINotDisplayAlert:(BOOL)alert;
-(BOOL)isCLINotDisplayAlert;
-(void)setCLILastLineIDStatus:(int)status;
-(int)CLILastLineIDStatus;
-(void)setCLICarrierVerified:(BOOL)verified;
-(BOOL)isCLICarrierVerified;
-(void)removeLineCallLocalData;
-(void)initLineCallLocalDatas;
-(id)regionNumberByAuthentications;
-(void)savePriceTableSelectedCountryWithRegionCode:(id)regionCode;
-(id)priceTableSelectedCountryWithRegionCode;
-(void)setupAuthenticationAddressBook;
-(id)filterMatchedContactsWithNumber:(id)number;
-(id)imageForKey:(id)key;
-(id)imageWithLUID:(id)luid withImageType:(int)imageType;
-(id)imageWithLUID:(id)luid withDefaultImage:(id)defaultImage;
-(id)imageWithLUID:(id)luid;
-(id)imageWithMid:(id)mid;
-(id)imageWithLUID:(id)luid withMid:(id)mid;
-(BOOL)isAvailableSyncContacts;
-(BOOL)isAvailableAccessToAddressBook;
-(void)setDirectCallLineFriendsProfile:(BOOL)profile;
-(BOOL)directCallLineFriendsProfile;
-(void)updateLineCallAgreemnetWithCompletionBlock:(id)completionBlock;
-(BOOL)isLineCallAgreement;
-(id)searchCountryInfoMatchedWithFullPhoneNumber:(id)fullPhoneNumber;
-(id)searchCountryInfoWithRegionNumber:(id)regionNumber;
-(id)favoriteCountryList;
-(void)saveFavoriteCountryList:(id)list;
-(void)makeCountryInfos;
-(id)allCountries;
-(BOOL)isNeedUpdateCurrencyInfo;
-(void)localAllCurrencyInfoWithIsReset:(BOOL)isReset withCompletionBlock:(id)completionBlock;
-(void)localAllCurrencyInfo:(id)info;
-(void)resetAllCurrencyInfo;
-(void)updateAllCurrencyInfo:(id)info;
-(id)currentCurrencyInfo;
-(void)updateCurrentCurrencyInfo:(id)info;
-(void)addressBookDidUpdated;
-(id)makeUserInfoFromHistoryDictionary:(id)historyDictionary;
-(id)searchCachedArray:(id)array withaRegionNumber:(id)number;
-(void)refreshCache;
-(id)cachedArray;
-(id)arrayForHistoryList;
-(id)searchCachedArray:(id)array;
-(void)removeHistoryWithIndexKeys:(id)indexKeys completionBlock:(id)block;
-(void)addHistoryWithDictInInfo:(id)info completionBlock:(id)block;
-(void)loadHistory;
-(void)saveHistory;
-(BOOL)isSpotUser:(unsigned)user;
-(void)removeCallHistoryToUserDefaultWithKeys:(id)keys;
-(void)saveCallHistory:(id)history;
-(void)initManager;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LGTakePhotoDataSource : NSObject <LGPhotoViewDataSource> {
	BOOL _usingRedesign;
	LGAsset* _asset;
	NSString* _originalImageTempPath;
	NSString* _editedImageTempPath;
}
@property(assign, nonatomic) BOOL usingRedesign;
@property(retain, nonatomic) NSString* editedImageTempPath;
@property(retain, nonatomic) NSString* originalImageTempPath;
@property(retain, nonatomic) LGAsset* asset;
-(void).cxx_destruct;
-(void)removeEditedImage;
-(void)setEditedImage:(id)image;
-(unsigned)numberOfAssets;
-(id)assetWithSection:(unsigned)section row:(unsigned)row;
-(unsigned)numberOfAssetsAtSection:(unsigned)section;
-(unsigned)numberOfAssetSections;
-(void)dealloc;
-(id)initWithImage:(id)image;
-(void)saveTempFileForEditedImage:(id)editedImage;
-(void)saveTempFileForOriginalImage:(id)originalImage;
@end

__attribute__((visibility("hidden")))
@interface NLThemeSettingsCell : UITableViewCell {
	NLFrameImageView* _thumbNailImageView;
	UIView* _borderLine;
	UILabel* _titleLabel;
	UILabel* _durationLabel;
	UIButton* _applyButton;
	UIButton* _downloadButton;
	UIButton* _updateButton;
	UIImageView* _arrowImageView;
	LineShopProductDetail* _productDetail;
	UIView* _dividerViewOnTop;
	NLStickerDownloadProgressView* _progressBar;
	id _updateBlock;
	id _applyBlock;
	id _downloadBlock;
	id _cancelBlock;
	MyProductObject* _productObject;
}
@property(retain, nonatomic) MyProductObject* productObject;
@property(copy, nonatomic) id cancelBlock;
@property(copy, nonatomic) id downloadBlock;
@property(copy, nonatomic) id applyBlock;
@property(copy, nonatomic) id updateBlock;
@property(readonly, assign, nonatomic) UIButton* downloadButton;
@property(readonly, assign, nonatomic) UIButton* applyButton;
@property(readonly, assign, nonatomic) NLStickerDownloadProgressView* progressBar;
@property(retain, nonatomic) UIView* dividerViewOnTop;
-(void).cxx_destruct;
-(id)dividerViewOn:(CGPoint)on;
-(id)productID;
-(void)cancelTheme;
-(void)applyTheme;
-(void)updateTheme;
-(void)downloadTheme;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLCallKeypadView : UIView {
}
+(id)viewFromNibThan35Inchi;
+(id)viewFromNibThan4Inchi;
+(id)viewFromNib;
-(void)addActionKeyButtonEvent:(id)event withSel:(SEL)sel;
-(id)zeroButton;
-(id)callButton;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLThemeManager : NSObject {
}
+(void)showThemeUpateAlert:(id)alert;
+(void)showUnusingTerminationAlert:(id)alert;
+(void)showUsingTerminationAlert:(id)alert;
+(void)showExpiredAlert:(id)alert;
+(void)showUnavailableAlert:(id)alert;
+(void)showForceUpdateAlertAndDownload:(id)download;
+(void)createThemePackageDirectory;
+(BOOL)isDownloadedPackage:(id)package;
+(id)defaultThemePackage;
+(void)notifyFailedApplyThemeWithPackage:(id)package;
+(void)notifyDidApplyThemeWithPackage:(id)notify;
+(id)delegates;
+(void)removeDelegate:(id)delegate;
+(void)addDelegate:(id)delegate;
+(void)failedToApplyTheme:(id)applyTheme;
+(void)showTerminationAlertsIfNeeded:(id)needed;
+(void)showExpiredAlertsIfNeeded:(id)needed;
+(void)checkValidationPerDailyOfCurrentTheme;
+(BOOL)isNeedDailyValidationCheck;
+(void)applyThemeWithPackage:(id)package;
+(void)generateAuthCodeWithPackage:(id)package completionBlock:(id)block;
+(void)checkValidationWithPackage:(id)package completionBlock:(id)block;
+(void)notifyEventWithPackage:(id)package withEvent:(long long)event;
+(void)checkThemeShopNewBadge:(id)badge;
+(void)_checkVaildationIfExistMarkedThemeProductId;
+(void)checkVaildationIfExistMarkedThemeProductId;
+(id)productNameWithStyleSheetPath:(id)styleSheetPath;
+(BOOL)needThemeMigrationStyleSheetPath:(id)path;
+(id)productNameForThemeMigrationAlert:(id)themeMigrationAlert;
+(BOOL)needThemeMigrationAlert:(id)alert;
+(BOOL)isCurrentUsingTheme:(id)theme;
+(BOOL)forceDeleteThemePackageWithProductID:(id)productID;
+(void)forceApplyDefaultTheme;
+(void)checkLocalProduct;
+(void)checkUsingStatusForThemePackages;
+(id)defaultThemeInfo;
+(id)localThemePackages;
+(id)productObjectWithProductID:(id)productID;
+(id)themePackageCurrentUsing;
+(id)themePackageAutocreateWithProductID:(id)productID;
+(id)themePackageForProductID:(id)productID;
+(id)insertThemeWithProductID:(id)productID;
+(id)contentsOfURL:(id)url;
+(id)downloadedThemeDirectories;
+(id)loadDownloadedThemePackages;
+(void)initialize;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface NLThemePackage : NLShopPackage {
	BOOL _isDefaultTheme;
	BOOL _doNotShowDownloadSuccessAlert;
	BOOL _nowUpdating;
	unsigned _usingState;
	unsigned _actionState;
	LineShopProductValidationScheme* _validationScheme;
	LineFileDownload* _download;
	long long _latestVersion;
}
@property(retain, nonatomic) LineFileDownload* download;
@property(readonly, assign, nonatomic) NSString* productURIPath;
@property(assign, nonatomic) BOOL nowUpdating;
@property(assign, nonatomic) BOOL doNotShowDownloadSuccessAlert;
@property(retain, nonatomic) LineShopProductValidationScheme* validationScheme;
@property(readonly, assign, nonatomic) NSURL* themeJsonFileURL;
@property(readonly, assign, nonatomic) NSURL* localDirURL;
@property(readonly, assign, nonatomic) NSURL* themeZipURL;
@property(readonly, assign, nonatomic) NSURL* icon2xURL;
@property(readonly, assign, nonatomic) NSURL* iconURL;
@property(assign, nonatomic) long long latestVersion;
@property(readonly, assign, nonatomic) BOOL isCurrentUsingTheme;
@property(assign, nonatomic) BOOL isDefaultTheme;
@property(assign, nonatomic) unsigned actionState;
@property(assign, nonatomic) unsigned usingState;
+(id)shopHostURL;
+(id)shopID;
+(id)generateProductURIPathWithProductID:(id)productID version:(long long)version;
-(void).cxx_destruct;
-(BOOL)deletePackage;
-(BOOL)isUsingTheme;
-(BOOL)isDownloaded;
-(BOOL)isDownloading;
-(void)cancelDownload;
-(id)downloadWithAlertType:(unsigned)alertType;
-(id)description;
-(id)themeManifest;
-(void)updateRevisionFromManifest;
-(void)checkActionStatus;
-(id)initWithProductName:(id)productName productID:(id)anId productVerion:(long long)verion;
-(id)initWithProductID:(id)productID;
@end

__attribute__((visibility("hidden")))
@interface LineCoinPurchaseViewController : NLTableViewController <PurchaseCoinDelegate, LineNetworkErrorViewDelegate> {
	LineCoinStatusHeaderView* headerView_;
	UIView* coinFooterView_;
	NSArray* coinList;
}
@property(retain, nonatomic) NSArray* coinList;
-(void).cxx_destruct;
-(void)retry;
-(void)showNetworkError;
-(void)purcahseCoinWithCoinItem:(id)coinItem;
-(void)refreshCoin;
-(void)loadCoinList;
-(void)tokutei;
-(void)shinKessai;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(id)warningLabel:(id)label;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface NLStatusBarControllableViewController : NLViewController {
	BOOL _statusBarShouldBeHidden;
	int _statusBarAnimation;
}
@property(assign, nonatomic) int statusBarAnimation;
@property(assign, nonatomic) BOOL statusBarShouldBeHidden;
-(BOOL)prefersStatusBarHidden;
-(int)preferredStatusBarUpdateAnimation;
-(void)setStatusBarHidden:(BOOL)hidden statusBarAnimation:(int)animation;
@end

__attribute__((visibility("hidden")))
@interface LAThumbnailButton : UIControl {
	LACheckButton* _checkButton;
	unsigned _index;
	UIView* _statusMessageView;
	CALayer* _dimmedLayer;
	LAURLImageView* _imageView;
}
@property(retain, nonatomic) LAURLImageView* imageView;
@property(retain, nonatomic) CALayer* dimmedLayer;
@property(retain, nonatomic) UIView* statusMessageView;
@property(assign, nonatomic) unsigned index;
@property(retain, nonatomic) LACheckButton* checkButton;
-(void).cxx_destruct;
-(void)setDimmed:(BOOL)dimmed color:(id)color;
-(void)setObject:(id)object index:(unsigned)index selectable:(BOOL)selectable;
-(void)setupCheckButton;
-(void)setupStatusMessageView;
-(void)updateView:(int)view;
-(void)setupView;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBLikeUserView : UIView <MBActorObserving> {
	MBURLImageButton* mProfileImageButton;
	UIImageView* mStickerImageView;
	UIButton* mNickNameButton;
	UIView* mUpLine;
	UIView* mDownLine;
	MBLike* mLike;
	id mImageCallback;
}
+(id)likeUserView;
-(void).cxx_destruct;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)setLike:(id)like;
-(id)like;
-(void)setProfileImage;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageDownloadOperation : NLObjectStorageOperation {
}
-(void)buildRequest;
@end

__attribute__((visibility("hidden")))
@interface NLCallEmptyDataView : UIView {
}
-(void)initDefault;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLShopPackage : NSObject {
	NSString* _shodID;
	NSString* _productName;
	NSString* _productID;
	NSString* _shopID;
	long long _productVersion;
}
@property(retain, nonatomic) NSString* shopID;
@property(assign, nonatomic) long long productVersion;
@property(retain, nonatomic) NSString* productID;
@property(retain, nonatomic) NSString* productName;
@property(retain, nonatomic) NSString* shodID;
-(void).cxx_destruct;
-(id)initWithProductName:(id)productName productID:(id)anId productVerion:(long long)verion;
-(id)initWithProductID:(id)productID;
@end

__attribute__((visibility("hidden")))
@interface NLCallingLineIDVerificationDelegate : NSObject <SMSPinCodeConfirmDelegate> {
}
+(void)finishVerificationWithSuccess:(BOOL)success;
-(void)didConfirmSMSPinCode:(id)code;
-(void)verificatePhoneNumberWithRootViewController:(id)rootViewController;
@end

__attribute__((visibility("hidden")))
@interface NLShopError : NSObject {
}
+(id)shopErrorFailedToValidateAuthCode;
+(id)shopErrorFailedToGenerateAuthCode;
+(id)shopErrorFailedToApply;
+(id)shopErrorUnknown;
@end

__attribute__((visibility("hidden")))
@interface NLProgressBar : UIView {
	UIImageView* _bgImageView;
	UIImageView* _barImageView;
	UIImage* _bgImage;
	UIImage* _barImage;
	float _progress;
	CGPoint _barImageOffset;
}
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) CGPoint barImageOffset;
@property(retain, nonatomic) UIImage* barImage;
@property(retain, nonatomic) UIImage* bgImage;
-(void).cxx_destruct;
-(void)applyProgress;
-(id)initWithFrame:(CGRect)frame bgImage:(id)image barImage:(id)image3;
@end

__attribute__((visibility("hidden")))
@interface NLGroupEditViewController : NLViewController <UIActionSheetDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, FriendsPickerViewControllerDelegate, LGImagePickerDelegate> {
	UIScrollView* memberListScrollView;
	ProfileImageView* groupImageView;
	UILabel* groupLabel;
	UILabel* groupLengthLabel;
	GroupInputTextField* groupNameField;
	TalkGroupObject* _group;
	NSSet* _originalGroupMembers;
	LineProfileThumbnailSource* _profileImageSource;
	BOOL _hasCamera;
	BOOL _hasChangedPicture;
	NSMutableSet* _members;
	NSString* _tempGroupName;
	UIImage* _tempUIImage;
	TalkIndicatorView* _indicatorView;
	unsigned _remainingChanges;
}
-(void).cxx_destruct;
-(void)lgImagePickerControllerDidCancel:(id)lgImagePickerController;
-(void)lgImagePickerController:(id)controller didFinishPickingMediaWithInfos:(id)infos;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(BOOL)uploadGroupImageForGroup:(id)group;
-(void)setGroupImageToUpload:(id)upload;
-(void)editPhoto;
-(void)friendsPickerViewController:(id)controller didFinishPickingItems:(id)items;
-(void)removeMember:(id)member;
-(void)addMember:(id)member;
-(void)hideKeyboard;
-(void)setInfoStyleLabel:(id)label;
-(void)refreshMemberListScrollView;
-(BOOL)membersModified;
-(void)groupNameChanged:(id)changed;
-(BOOL)isNameModified;
-(void)endSaveEventWithError:(BOOL)error newGroup:(id)group;
-(void)startSaveEvent;
-(void)updateGroup:(id)group;
-(void)kickOutUsers:(id)users fromGroupWithID:(id)anId;
-(void)inviteUsers:(id)users toGroupWithID:(id)anId;
-(void)onGroupCreated:(id)created;
-(void)createGroupWithName:(id)name memberMIDs:(id)mids;
-(void)onSave:(id)save;
-(void)onCancel:(id)cancel;
-(void)closeView:(BOOL)view;
-(BOOL)isGroupModified;
-(void)updateNavigationItem;
-(void)onKickedOut:(id)anOut;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)profileImageSource;
-(void)addMembers:(id)members;
-(void)dealloc;
-(id)initWithGroup:(id)group;
@end

__attribute__((visibility("hidden")))
@interface NLMoreCategoryItem : NSObject {
	BOOL _rankingEnable;
	NSString* _categoryID;
	NSArray* _categorys;
	NSArray* _banners;
	LineMoreItem* _parentCategory;
}
@property(assign, nonatomic) BOOL rankingEnable;
@property(retain, nonatomic) LineMoreItem* parentCategory;
@property(retain, nonatomic) NSArray* banners;
@property(retain, nonatomic) NSArray* categorys;
@property(retain, nonatomic) NSString* categoryID;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface LineAlbumAppDelegate : NSObject {
	unsigned _bgTask;
	BOOL alreadyLaunched;
}
@property(assign, nonatomic) BOOL alreadyLaunched;
+(id)sharedInstance;
-(void)applicationWillTerminate:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(id)currentViewController;
@end

__attribute__((visibility("hidden")))
@interface DevThemeSettingsViewController : NLTableViewController {
	NSMutableArray* _themesInBundle;
	NSMutableArray* _themesInDownloaded;
	NSString* _selectedThemeFile;
	UIView* _footerView;
}
@property(retain, nonatomic) UIView* footerView;
@property(retain, nonatomic) NSString* selectedThemeFile;
@property(retain, nonatomic) NSMutableArray* themesInDownloaded;
@property(retain, nonatomic) NSMutableArray* themesInBundle;
-(void).cxx_destruct;
-(void)actionClearAll:(id)all;
-(BOOL)isCurrentAppliedTheme:(id)theme;
-(void)loadThemesFromDownloaded;
-(id)downloadedRootPath;
-(void)loadThemesFromBundle;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)sourceFromIndexPath:(id)indexPath;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MyProductObject : _MyProductObject {
	LineShopProductDetail* mShopProduct;
}
+(void)getProductWithProductID:(id)productID completionBlock:(id)block;
+(id)insertWithShopProduct:(id)shopProduct inManagedObjectContext:(id)managedObjectContext;
+(id)insertWithShopProductSummary:(id)shopProductSummary inManagedObjectContext:(id)managedObjectContext;
+(id)ownProductsInManagedObjectContext:(id)managedObjectContext;
+(id)productsInManagedObjectContext:(id)managedObjectContext;
+(id)productWithProductID:(id)productID inManagedObjectContext:(id)managedObjectContext;
+(id)predicateForOwnProduct;
+(void)checkPurchaseThemePackagesCompletionBlock:(id)block;
+(void)checkPurchaseThemePackagesSummaryCompletionBlock:(id)block;
+(void)updateMyOwnProductWithSummaryProducts:(id)summaryProducts;
+(void)updateMyOwnProductWithProducts:(id)products;
+(void)updateMyOwnProductWithShowcaseProducts:(id)showcaseProducts;
+(void)resetAlertedValuesWithProductId:(id)productId;
-(void).cxx_destruct;
-(void)didSave;
-(void)clearInfo;
-(id)firstItemAsUrlOfList:(id)list;
-(id)previewThumbnailURL;
-(id)previewURL;
-(id)myListIconURL;
-(id)purchaseListIconURL;
-(id)listIconURL;
-(id)downloadIconURL;
-(id)detailIconURL;
-(id)previewThumbnail;
-(id)preview;
-(id)myListIcon;
-(id)purchaseListIcon;
-(id)listIcon;
-(id)downloadIcon;
-(id)detailIcon;
-(id)unarchivedImages;
-(BOOL)needTerminationAlertedForNotUsingTheme;
-(BOOL)needTerminationAlertedForUsingTheme;
-(BOOL)needExpiredAlerted;
-(BOOL)isExpired;
-(long long)currentThemeVersion;
-(BOOL)deletePackage;
-(BOOL)isNeedUpdate;
-(unsigned)actionStatus;
-(unsigned)usingStatus;
-(BOOL)isDefaultProduct;
-(id)themePackage;
-(BOOL)isSyncing;
-(void)syncProduct;
-(id)shopProduct;
-(id)updateWithShopSummaryProduct:(id)shopSummaryProduct;
-(id)updateWithShopProduct:(id)shopProduct;
@end

__attribute__((visibility("hidden")))
@interface MBTextCacheManager : NSObject {
	NSCache* cache_Comment;
	NSCache* cache_MergePostHeader;
	NSCache* cache_PlainText;
	NSCache* cache_Recommend;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void).cxx_destruct;
-(id)cacheForType:(int)type;
-(void)clearAllCache:(int)cache;
-(void)clearCache:(id)cache cacheType:(int)type;
-(void)saveCacheSize:(CGSize)size cacheKey:(id)key cacheType:(int)type;
-(void)saveCacheText:(id)text cacheKey:(id)key cacheType:(int)type;
-(CGSize)cacheSize:(id)size cacheType:(int)type;
-(id)cacheText:(id)text cacheType:(int)type;
-(id)cacheKeyWithInfo:(id)info cacheType:(int)type;
-(void)dealloc;
-(void)renderTheme;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBFriend : NSObject {
	NSString* mMID;
	NSString* mDisplayName;
	NSURL* mProfileImageURL;
	BOOL mIsBlock;
}
@property(assign, nonatomic) BOOL isBlock;
@property(retain, nonatomic) NSURL* profileImageURL;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* MID;
+(id)friendWithMID:(id)mid displayName:(id)name profileImageURL:(id)url isBlock:(BOOL)block;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationModel : NSObject {
	short _contentType;
	NSString* _userMID;
	NSString* _userInAppName;
	NSString* _userOutAppName;
	NSString* _chatMID;
	NSString* _chatName;
	NSString* _param1;
	NSString* _param2;
	id _param3;
	id _contentMetadataModel;
	NSString* _message;
	int _type;
}
@property(assign, nonatomic) short contentType;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) id contentMetadataModel;
@property(retain, nonatomic) id param3;
@property(retain, nonatomic) NSString* param2;
@property(retain, nonatomic) NSString* param1;
@property(retain, nonatomic) NSString* chatName;
@property(retain, nonatomic) NSString* chatMID;
@property(retain, nonatomic) NSString* userOutAppName;
@property(retain, nonatomic) NSString* userInAppName;
@property(retain, nonatomic) NSString* userMID;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface NLNotificationContext : NSObject {
	unsigned _bgTaskID;
	dispatch_queue_s* _queue;
	NSMutableArray* _queuedNotifications;
	NSCountedSet* _newMessagesPerChatMID;
	BOOL _messageSendSucceeded;
	NSMutableSet* _messageFailedChatMIDs;
	NSMutableDictionary* _previousMessageFailedLocalNotificationData;
}
+(void)present:(id)present asLocalNotificationWithAlertBody:(id)alertBody serverSettings:(id)settings;
+(void)_moveToFriendList:(id)friendList;
+(void)_moveToGroupHome:(id)groupHome;
+(void)_moveToAddFriend:(id)addFriend;
+(void)_moveToChatRoom:(id)chatRoom;
+(id)_whitelistedViewControllers;
+(BOOL)enableChannelAppMessageNotificationWithChannelID:(id)channelID settings:(id)settings;
+(void)_tappedNotificationBarView:(id)view;
+(id)messageForRegisterUserMemberNamed:(id)registerUserMemberNamed;
+(id)messageForNewMemberNamed:(id)newMemberNamed inGroupNamed:(id)groupNamed;
+(id)messageForInvitationToGroupNamed:(id)groupNamed fromUserNamed:(id)userNamed;
+(id)messageForNewMessage:(id)newMessage withContentType:(short)contentType withContentMetadataModel:(id)contentMetadataModel fromUserWithName:(id)name;
+(BOOL)inAppAlertsVisible;
+(BOOL)inAppAlertsEnabled;
+(void)playNotificationSoundForNewMessagesInChats:(id)chats;
+(void)_showNotifications:(id)notifications local:(BOOL)local serverSettings:(id)settings;
+(id)mainContext;
+(void)initialize;
-(void).cxx_destruct;
-(void)clearLocalNotificationsForChatWithMID:(id)mid;
-(void)flush;
-(void)addNotificationOfFailedMessage:(id)failedMessage;
-(void)addNotificationOfSentMessage;
-(void)addNotificationOfRegisterUser:(id)registerUser;
-(void)addNotificationOfNewMember:(id)newMember inGroup:(id)group;
-(void)addNotificationOfInvitationToGroup:(id)group byUser:(id)user;
-(void)addNotificationOfNewMessage:(id)newMessage channelID:(id)anId;
-(void)_endBackgroundTask;
-(void)beginBackgroundTaskIfNecessary;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface TalkUserDefaultManager : NSObject {
}
+(void)setSentAdEvent:(unsigned)event;
+(unsigned)sentAdEvents;
+(void)setLastUsedDateCellularNetwork:(id)network;
+(id)lastUsedDateCellularNetwork;
+(BOOL)didAgreeLineCallUsing;
+(void)agreeLineCallUsingWithCompletionBlock:(id)completionBlock;
+(void)didShowNewMarkChatMoreMenuEditMessage;
+(BOOL)showedNewMarkChatMoreMenuEditMessage;
+(void)didShowNewMarkChatMoreMenu;
+(BOOL)showedNewMarkChatMoreMenu;
+(void)setCameraFlashMode:(int)mode;
+(int)cameraFlashMode;
+(void)didChangedConfiguration:(id)configuration;
+(void)touchAndFixShowsAddFriendsInTabIfLeftDefault;
+(void)setShowsAddFriendsInTab:(BOOL)tab;
+(BOOL)showsAddFriendsInTabForRawValue:(int)rawValue;
+(BOOL)showsAddFriendsInTab;
+(BOOL)shouldShowTipHowToShowAddFriends;
+(BOOL)shouldShowTipHowToShowTimeline;
+(void)markNoLongerShouldShowTipHowToShowAddFriends;
+(void)markNoLongerShouldShowTipHowToShowTimeline;
+(void)setFlag:(BOOL)flag forBit:(int)bit forInteger:(id)integer;
+(BOOL)flagForBit:(int)bit forInteger:(id)integer;
+(BOOL)didShowRejectStrangeMessageWarning;
+(void)markDidShowRejectStrangeMessageWarning;
+(BOOL)didShowNoteNewIcon;
+(void)markDidShowNoteNewIcon;
+(BOOL)hasAskedAudioPermissionForVideo;
+(id)themeValidationCheckedData;
+(void)setThemeValidationCheckedDate:(id)date;
+(void)setMigrationDate:(id)date;
+(id)migrationDate;
+(BOOL)wasAgreedChinaTerms;
+(void)setAgreedChinaTerms:(BOOL)terms;
+(id)lastRegistrationInfo;
+(void)setLastRegistrationInfo:(id)info;
+(void)setAlllowsToSyncFriends:(BOOL)syncFriends withSNSIdType:(int)snsidType;
+(BOOL)alllowsToSyncFriendsWithSNSIdType:(int)snsidType;
+(void)setLastSyncTime:(id)time withSNSIdType:(int)snsidType;
+(id)lastSyncTimeWithSNSIdType:(int)snsidType;
+(void)setSNSSettings:(id)settings withSNSIDType:(int)snsidtype;
+(id)snsSettingsWithSNSIdType:(int)snsidType;
+(void)setSNSSettings:(id)settings;
+(id)snsSettings;
+(void)setHasNewPostArrivedEvent:(BOOL)event;
+(BOOL)hasNewPostArrivedEvent;
+(void)setHasSeenNewWriteButtonInSharingView:(BOOL)sharingView;
+(BOOL)hasSeenNewWriteButtonInSharingView;
+(void)setLastSuccessfulHost:(id)host withKey:(id)key;
+(id)lastSuccessfulHostWithKey:(id)key;
+(void)setCachedConnectionInfo:(id)info withKey:(id)key;
+(void)resetCachedConnectionInfoDate;
+(id)cachedConnectionInfoDate;
+(id)cachedConnectionInfoWithKey:(id)key;
+(id)lastConnectionInfoPropertyName;
+(void)setVerifiedAccount:(BOOL)account;
+(BOOL)verifiedAccount;
+(id)friendsListCollapsedState;
+(void)setFriendsListCollapsedState:(id)state;
+(void)setIsNoNeedToUpdateCoinInfo:(BOOL)updateCoinInfo;
+(BOOL)isNoNeedToUpdateCoinInfo;
+(void)setCoin:(id)coin;
+(id)coin;
+(void)setUnapprovedChannelSetting:(id)setting;
+(id)unapprovedChannelSetting;
+(void)setChannelNotificationSettings:(id)settings;
+(id)notificationChannelsSettings;
+(BOOL)isChannelsNotificationEnabled;
+(void)setChannelNotificationInfo:(id)info;
+(id)channelNotificationInfo;
+(void)setBadWordsDataExpirationDate:(id)date;
+(id)badWordsDataExpirationDate;
+(void)moreListUpdated;
+(BOOL)isExpiredMoreListdata;
+(void)setMoreListdataExpirationDate:(id)date;
+(id)moreListdataExpirationDate;
+(void)setMoreListLastTappedVersionDictionary:(id)dictionary;
+(id)moreListLastTappedVersionDictionary;
+(void)setMoreListLastCountry:(id)country;
+(id)moreListLastCountry;
+(void)setMoreListLastLanguage:(id)language;
+(id)moreListLastLanguage;
+(void)setMoreListVersion:(int)version;
+(int)moreListVersion;
+(BOOL)removeOneTimeMid;
+(void)setOneTimeMid:(id)mid chatMid:(id)mid2;
+(id)chatMidWithOneTimeMid:(id)oneTimeMid;
+(void)setLastLanguageForSortableName:(id)sortableName;
+(id)getLastLanguageForSortableName;
+(BOOL)showedShortcutStickerShopFromTalkRoom;
+(void)setShowedShortcutStickerShopFromTalkRoom:(BOOL)talkRoom;
+(void)clearNewPresents;
+(void)removeNewPresentViewed:(long long)viewed version:(int)version;
+(void)setNewPresentViewed:(long long)viewed version:(int)version;
+(id)getNewPresentArrayKeyFromId:(long long)anId version:(int)version;
+(BOOL)newReleasedBuddyHasUpdate;
+(long long)timestampForNewReleasedBuddyLastUpdate;
+(void)clearNewReleasedBuddyHasUpdate;
+(void)setTimestampForNewReleasedBuddyLastUpdate:(long long)newReleasedBuddyLastUpdate;
+(void)setNewReleasedBuddyMIDs:(id)mids;
+(id)getNewReleasedBuddyMIDs;
+(void)setTimeStampForNewReleasedBuddy:(long long)newReleasedBuddy;
+(long long)timestampForNewReleasedBuddy;
+(BOOL)isLoadedSticonSummaryOnce;
+(void)markLoadedSticonSummaryOnce;
+(id)sticonLastAutoUpdate;
+(void)setSticonLastAutoUpdate:(id)update;
+(id)sticonMetadataLastUpdate;
+(void)setSticonMetadataLastUpdate:(id)update;
+(void)setStickerCategoryHasUpdate:(BOOL)update;
+(BOOL)stickerCategoryHasUpdate;
+(void)setIsReinstalled:(BOOL)reinstalled;
+(BOOL)isReinstalled;
+(id)arrayOfNewPresentsWithIdAndVersionKey;
+(void)setStickerPurchases:(id)purchases;
+(id)stickerPurchases;
+(void)_setStickerShopEventTabLastUpdate:(long long)update;
+(void)_setStickerShopNewTabLastUpdate:(long long)update;
+(void)_setStickerShopEventTabLastChecked:(long long)checked;
+(void)_setStickerShopNewTabLastChecked:(long long)checked;
+(long long)_stickerShopEventTabLastUpdate;
+(long long)_stickerShopNewTabLastUpdate;
+(long long)_stickerShopEventTabLastChecked;
+(long long)_stickerShopNewTabLastChecked;
+(void)clearStickerShopEventTabHasUpdate:(long long)update;
+(BOOL)stickerShopEventTabHasUpdate;
+(void)clearStickerShopNewTabHasUpdate:(long long)update;
+(BOOL)stickerShopNewTabHasUpdate;
+(void)setStickerShopNewTabLastUpdate:(long long)update eventTabLastUpdate:(long long)update2;
+(void)clearStickerShopHasUpdate;
+(long long)stickerShopMostRecentUpdateTimeStamp;
+(void)_setStickerShopHasUpdate:(BOOL)update;
+(BOOL)stickerShopHasUpdate;
+(void)_setThemeShopAllTabLastUpdate:(long long)update;
+(void)_setThemeShopAllTabLastChecked:(long long)checked;
+(long long)_themeShopAllTabLastUpdate;
+(long long)_themeShopAllTabLastChecked;
+(void)clearThemeShopAllTabHasUpdate:(long long)update;
+(void)clearThemeShopAllTabHasUpdateByLastUpdateTimestamp;
+(BOOL)themeShopAllTabHasUpdate;
+(void)setThemeShopLastUpdate:(long long)update;
+(void)clearThemeShopHasUpdate;
+(long long)themeShopMostRecentUpdateTimeStamp;
+(void)_setThemeShopHasUpdate:(BOOL)update;
+(BOOL)themeShopHasUpdate;
+(void)setKeyboardKaomojiInputHistory:(id)history;
+(id)keyboardKaomojiInputHistory;
+(void)setKeyboardLastKaomojiDisplayedRange:(NSRange)range;
+(NSRange)keyboardLastKaomojiDisplayedRange;
+(void)setKeyboardDefaultArrangedStickerPackageIDs:(id)ids;
+(id)keyboardDefaultArrangedStickerPackageIDs;
+(void)setKeyboardArrangedStickerPackageIDs:(id)ids;
+(id)keyboardArrangedStickerPackageIDs;
+(void)setKeyboardStickerInputHistory:(id)history;
+(id)keyboardStickerInputHistory;
+(void)setKeyboardLastStickerDisplayedRange:(NSRange)range forPackage:(id)package;
+(NSRange)keyboardLastStickerDisplayedRangeForPackage:(id)package;
+(void)setKeyboardLastStickerPackageSelected:(id)selected;
+(id)keyboardLastStickerPackageSelected;
+(void)setKeyboardLastStickerPackageOpened:(id)opened;
+(id)keyboardLastStickerPackageOpened;
+(void)setKeyboardDefaultArrangedSticonPackageIDs:(id)ids;
+(id)keyboardDefaultArrangedSticonPackageIDs;
+(void)setKeyboardArrangedSticonPackageIDs:(id)ids;
+(id)keyboardArrangedSticonPackageIDs;
+(void)setKeyboardSticonInputHistory:(id)history;
+(id)keyboardSticonInputHistory;
+(void)setKeyboardLastSticonDisplayedRange:(NSRange)range forPackage:(long long)package;
+(NSRange)keyboardLastSticonDisplayedRangeForPackage:(long long)package;
+(void)setKeyboardLastSticonPackageSelected:(long long)selected;
+(long long)keyboardLastSticonPackageSelected;
+(void)setKeyboardLastSticonPackageOpened:(long long)opened;
+(long long)keyboardLastSticonPackageOpened;
+(void)setSticonLastTappedVersionDictionary:(id)dictionary;
+(id)sticonLastTappedVersionDictionary;
+(void)setKeyboardEmojiInputHistory:(id)history;
+(id)keyboardEmojiInputHistory;
+(void)setKeyboardLastEmojiDisplayedRange:(NSRange)range;
+(NSRange)keyboardLastEmojiDisplayedRange;
+(void)setAttachmentLineBrushUsed:(BOOL)used;
+(BOOL)attachmentLineBrushUsed;
+(void)setAttachmentLineCardUsed:(BOOL)used;
+(BOOL)attachmentLineCardUsed;
+(void)setAttachmentLineCameraUsed:(BOOL)used;
+(BOOL)attachmentLineCameraUsed;
+(void)setAttachmentSnapMovieUsed:(BOOL)used;
+(BOOL)attachmentSnapMovieUsed;
+(void)setKeyboardLastTabOpened:(int)opened;
+(int)keyboardLastTabOpened;
+(void)setReturnKeyTypeSend:(BOOL)send;
+(BOOL)isReturnKeyTypeSend;
+(void)setStickerPreviewUse:(BOOL)use;
+(BOOL)useStickerPreview;
+(void)setShownStickerPreviewGuide:(BOOL)guide;
+(BOOL)shownStickerPreviewGuide;
+(void)setNeed3GWarningOnSendingMovie:(BOOL)movie;
+(BOOL)need3GWarningOnSendingMovie;
+(void)setNeed3GWarningOnReceived:(BOOL)received;
+(BOOL)need3GWarningOnReceived;
+(void)setNeed3GWarningOnCalling:(BOOL)calling;
+(BOOL)need3GWarningOnCalling;
+(double)autoResendTimeLimit;
+(void)setAutoResendOn:(BOOL)on;
+(BOOL)autoResendOn;
+(BOOL)autoResendEnabled;
+(void)setLastAnalyticsReportTime:(double)time;
+(double)lastAnalyticsReportTime;
+(void)setNextRequestSequence:(int)sequence;
+(int)nextRequestSequence;
+(void)setLastOpRevisionWithError:(long long)error;
+(long long)lastOpRevisionWithError;
+(void)setAllowReceiveMessagesFromNotFriend:(BOOL)notFriend;
+(BOOL)allowReceiveMessagesFromNotFriend;
+(BOOL)allowPublishNewProfilePhotoToTimeLine;
+(void)setAllowPublishNewProfilePhotoToTimeLine:(BOOL)timeLine;
+(BOOL)allowSearchByUserID;
+(void)setAllowSearchByUserID:(BOOL)anId;
+(BOOL)allowAddingFriendByPhoneNumber;
+(void)setAllowAddingFriendByPhoneNumber:(BOOL)number;
+(BOOL)addressBookSynchronizationEnabled;
+(void)setAddressBookSynchronizationEnabled:(BOOL)enabled;
+(void)setNeedWarningForAllowAddingFriendByPhoneNumber:(BOOL)allowAddingFriendByPhoneNumber;
+(BOOL)needWarningForAllowAddingFriendByPhoneNumber;
+(void)setNeedWarningForAddressBookSynchronization:(BOOL)addressBookSynchronization;
+(BOOL)needWarningForAddressBookSynchronization;
+(void)setAddressBookLastSynchronizedForOnlyView:(id)onlyView;
+(id)addressBookLastSynchronizedForOnlyView;
+(void)setAddressBookLastSynchronized:(id)synchronized;
+(id)addressBookLastSynchronized;
+(BOOL)areThereNewThemes;
+(void)setAreThereNewThemes:(BOOL)themes;
+(BOOL)areThereNewThemesInSettings;
+(void)setAreThereNewThemesInSettings:(BOOL)settings;
+(id)inviteFriendPromotionInfo;
+(BOOL)capableServerSideSMS;
+(CGSize)photoSizeMaximum;
+(float)photoCompressionRatio;
+(id)photoCompressionValue;
+(void)setPhotoSizeType:(unsigned)type;
+(unsigned)photoSizeType;
+(float)fontSizeWithChatFontSizeType;
+(void)setChatFontSizeType:(int)type;
+(int)chatFontSizeType;
+(void)setVibrationAlertsOn:(BOOL)on;
+(BOOL)vibrationAlertsOn;
+(void)setSoundAlertsOn:(BOOL)on;
+(BOOL)soundAlertsOn;
+(void)setInAppAlertsOn:(BOOL)appAlertsOn;
+(BOOL)inAppAlertsOn;
+(void)setServerSettings:(id)settings;
+(id)snsAccountID:(int)anId;
+(BOOL)hasSNSAccount:(int)account;
+(id)account;
+(int)accountProvider;
+(id)serverSettings;
+(void)setSkinList:(id)list;
+(id)skinList;
+(void)setLastSkinListChecked:(id)checked;
+(id)lastSkinListChecked;
+(void)setBackgroundSkin:(id)skin;
+(id)backgroundSkin;
+(int)userAgeType;
+(void)setUserAgeType:(int)type;
+(void)setStatusMessage:(id)message;
+(id)statusMessage;
+(void)setProfilePicturePath:(id)path;
+(id)profilePicturePath;
+(void)setProfilePictureStatus:(id)status;
+(id)profilePictureStatus;
+(void)setEmail:(id)email;
+(id)email;
+(void)setName:(id)name;
+(id)name;
+(void)setAppInfo:(id)info;
+(id)appInfo;
+(void)reset;
+(void)save;
+(void)setIsThisFirstTimeToEditProfile:(BOOL)editProfile;
+(BOOL)isThisFirstTimeToEditProfile;
+(void)setQRCodeImage:(id)image;
+(id)QRCodeImage;
+(void)setQRCodeTicket:(id)ticket;
+(id)QRCodeTicket;
+(void)removeNeedSyncData:(id)data;
+(void)removeNeedSync:(int)sync;
+(void)addNeedSyncData:(id)data;
+(void)addNeedSync:(int)sync;
+(id)needSyncDataList;
+(void)setNeedAllDataSync:(BOOL)sync;
+(BOOL)needAllDataSync;
+(void)setRegion:(id)region;
+(id)region;
+(void)setSimCardInfo:(id)info;
+(id)simCardInfo;
+(void)didChangedSimCard:(id)card;
+(void)setTelSimLocaleWithRefreshConfig:(BOOL)refreshConfig;
+(id)telSimLocale;
+(void)setTel:(id)tel;
+(id)tel;
+(void)setUid:(id)uid;
+(id)uid;
+(id)mid;
+(void)setRange:(NSRange)range forKey:(id)key;
+(NSRange)rangeForKey:(id)key;
+(void)setNSCodingObject:(id)object forKey:(id)key;
+(id)NSCodingObjectForKey:(id)key;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface RegisterAccountSendingMMSViewController : NLViewController <MFMessageComposeViewControllerDelegate> {
	UIScrollView* bgScrollView_;
	BOOL canShowMail_;
	LineEmailConfirmationSession* session;
	NSString* confirmationEmail;
}
@property(assign, nonatomic) BOOL canShowMail;
@property(retain, nonatomic) NSString* confirmationEmail;
@property(retain, nonatomic) LineEmailConfirmationSession* session;
-(void).cxx_destruct;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)close;
-(void)cancel;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)removeObserver;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)popViewControllerAnimated;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface AccountAuthorizationViewController : NLViewController {
	UIScrollView* bgScrollView_;
}
-(void).cxx_destruct;
-(void)confirm;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoThumbnailListViewController : LAThumbnailListViewController <LAAlbumSaveTooltipViewDelegate> {
	NSString* _albumID;
	LAAlbum* _album;
	LAPhotoListHeaderView* _headerView;
	LAAlbumSaveToolTipView* _tooltipView;
}
@property(retain, nonatomic) LAAlbumSaveToolTipView* tooltipView;
@property(retain, nonatomic) LAPhotoListHeaderView* headerView;
@property(retain, nonatomic) LAAlbum* album;
@property(retain, nonatomic) NSString* albumID;
-(void).cxx_destruct;
-(void)updateAlbumInfos;
-(void)reloadView:(BOOL)view;
-(void)saveCompleted;
-(void)didTapSelectAllButton:(id)button;
-(void)thumbnailCellDidTapThumbnailAtIndex:(unsigned)thumbnailCell;
-(void)updateBadgeAnimated:(BOOL)animated;
-(void)setupNavigationBarButtonItems:(int)items;
-(void)setupTableHeaderView;
-(void)toolTipViewDidTapCloseButton:(id)toolTipView;
-(void)removeTooltipViewIfExists;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithGroupID:(id)groupID album:(id)album;
@end

__attribute__((visibility("hidden")))
@interface NLVoiceRecordView : UIView {
	BOOL _isTouchingInsideRecordButton;
	BOOL _isRecording;
	BOOL _isOverTimeLimit;
	int _interfaceOrientation;
	int _infoPopupType;
	id<NLVoiceRecordViewDelegate> _delegate;
	UIView* _superViewForAlert;
	AVAudioRecorder* _audioRecorder;
	NLVoiceRecordAlertView* _voiceRecordAlertView;
	UIImageView* _bgView;
	UIButton* _recordButton;
	UIImageView* _speakerLeft;
	UIImageView* _speakerRight;
	NSString* _alertString;
	NSString* _timeString;
	NLVoiceRecordInfoView* _voiceRecordGuideView;
	NLVoiceRecordInfoView* _voiceRecordTimeView;
	NLAudioRecordMeterListener* _audioMeterLinster;
}
@property(retain, nonatomic) NLAudioRecordMeterListener* audioMeterLinster;
@property(retain, nonatomic) NLVoiceRecordInfoView* voiceRecordTimeView;
@property(retain, nonatomic) NLVoiceRecordInfoView* voiceRecordGuideView;
@property(retain, nonatomic) NSString* timeString;
@property(retain, nonatomic) NSString* alertString;
@property(assign, nonatomic) BOOL isOverTimeLimit;
@property(assign, nonatomic) BOOL isRecording;
@property(assign, nonatomic) BOOL isTouchingInsideRecordButton;
@property(retain, nonatomic) UIImageView* speakerRight;
@property(retain, nonatomic) UIImageView* speakerLeft;
@property(retain, nonatomic) UIButton* recordButton;
@property(retain, nonatomic) UIImageView* bgView;
@property(retain, nonatomic) NLVoiceRecordAlertView* voiceRecordAlertView;
@property(assign, nonatomic) AVAudioRecorder* audioRecorder;
@property(assign, nonatomic) UIView* superViewForAlert;
@property(assign, nonatomic) id<NLVoiceRecordViewDelegate> delegate;
@property(assign, nonatomic) int infoPopupType;
@property(assign, nonatomic) int interfaceOrientation;
-(void).cxx_destruct;
-(void)resetTouchingInsideStatus;
-(void)stopUpdateAudioMeters;
-(void)startUpdateAudioMeters;
-(void)hideGuideView;
-(void)hideTimeView;
-(void)setPositionInfoView:(id)view;
-(void)showTimeWithString:(id)string;
-(void)showGuideWithString:(id)string;
-(void)showAlertWithString:(id)string;
-(void)animationVolumeWithAveragePower:(float)averagePower;
-(void)didUpdateMetersWithPeak:(float)peak withAvgPower:(float)avgPower;
-(id)imageForRecordButtonRed;
-(id)imageForRecordButtonNavy;
-(void)updateRecordButtonImageWithHighlited:(BOOL)highlited;
-(void)touchDragOutsideTalkButton:(id)button forEvent:(id)event;
-(void)touchDragInsideTalkButton:(id)button forEvent:(id)event;
-(void)touchUpTalkButton:(id)button;
-(void)touchDownRecordButton:(id)button;
-(void)draggingPointWithSender:(id)sender withEvent:(id)event;
-(void)failedBeginRecording;
-(void)setGuideString:(id)string;
-(void)hideControls;
-(void)initSpeakerView;
-(void)initRecordButton;
-(void)initBgView;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLVoiceRecordAlertView : UIView {
	UIImageView* bgImageView;
	UILabel* textLabel;
	NSTimer* timer;
}
+(id)createVoiceRecordAlertView;
-(void).cxx_destruct;
-(void)disappear;
-(void)disppearWithInterval:(double)interval;
-(void)setAlertString:(id)string;
-(void)relayout;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLVoiceRecordInfoView : UIView {
	NL15SliceImageView* bgGuideView;
	NL15SliceImageView* bgTimeRedView;
	UILabel* textLabel;
	int _voiceReocrdInfoType;
}
@property(assign, nonatomic) int voiceReocrdInfoType;
+(id)createVoiceRecordTimeView;
+(id)createVoiceRecordGuideView;
-(void).cxx_destruct;
-(void)setAttributesWithInfoType;
-(void)hide;
-(void)setGuideString:(id)string;
-(void)setTimeString:(id)string;
-(void)relayout;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineMigrationManager : NSObject {
}
+(void)markToThemeProductIdIfNotDefault;
+(void)showThemeMigrationAlertIfNeed;
+(void)refreshNewIconOnSettingsMenuAndThemeRow;
+(void)checkEmailRegistered;
+(void)removeVoiceMessageGuideFlag;
+(void)removeRemovedEmoticonsFromHistory;
+(void)fixAddressbookUser;
+(void)removeUnusedCoinKey;
+(void)adjustGroupMemberData;
+(void)removeUnuseKeys;
+(void)adjustGroupCreateDate;
+(void)migrationExtLinkKey;
+(void)migrationRegion;
+(void)recoveryUserChat;
+(void)updateBuddyAttributes;
+(void)updateUnregisterIsNil;
+(void)updateUsertypeIsNil;
+(void)syncBuddyUser;
+(void)migratePasscodeToNewFormatIfNecessary;
+(void)fixOrderOfDefaultStickerPackages;
+(void)updateMySettings;
+(void)migrateMessageImagesToMessageAttachmentFileStore;
+(void)deleteOldStickerResources;
+(void)removeNotificationMuteSetAtAndUseAbsoluteTimeSpec;
+(void)fixChatLastUpdated;
+(void)migrateToCurrentVersion;
@end

__attribute__((visibility("hidden")))
@interface NLAudioRecordMeterListener : NSObject {
	AVAudioRecorder* _audioRecorder;
	id _updateBlock;
	dispatch_source_s* _timer;
}
@property(assign, nonatomic) dispatch_source_s* timer;
@property(copy, nonatomic) id updateBlock;
@property(assign, nonatomic) AVAudioRecorder* audioRecorder;
-(void).cxx_destruct;
-(void)updateMeter;
-(void)stopUpdate;
-(void)startUpdate;
@end

__attribute__((visibility("hidden")))
@interface NLLocationServiceManager : NSObject {
}
+(BOOL)confirmLocationServiceEnabledWithCompletionHandler:(id)completionHandler;
+(BOOL)confirmLocationServiceEnabled;
@end

__attribute__((visibility("hidden")))
@interface NJKWebViewProgress : NSObject <UIWebViewDelegate> {
	unsigned _loadingCount;
	unsigned _maxLoadCount;
	NSURL* _currentURL;
	BOOL _interactive;
	id<NJKWebViewProgressDelegate> _progressDelegate;
	id<UIWebViewDelegate> _webViewProxyDelegate;
	id _progressBlock;
	float _progress;
}
@property(readonly, assign, nonatomic) float progress;
@property(copy, nonatomic) id progressBlock;
@property(assign, nonatomic) __weak id<UIWebViewDelegate> webViewProxyDelegate;
@property(assign, nonatomic) __weak id<NJKWebViewProgressDelegate> progressDelegate;
-(void).cxx_destruct;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)reset;
-(void)setProgress:(float)progress;
-(void)completeProgress;
-(void)incrementProgress;
-(void)startProgress;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LGMenuBarView : UIView <UIAlertViewDelegate> {
	BOOL _isMultiSelection;
	LGBaseViewController* _delegate;
	LGInstantViewController* _instantViewController;
	UIButton* _instantButton;
	NSString* _nClickAreaId;
	LGBadgeButton* _attachButton;
	UIButton* _cameraButton;
}
@property(retain, nonatomic) UIButton* cameraButton;
@property(retain, nonatomic) LGBadgeButton* attachButton;
@property(retain, nonatomic) NSString* nClickAreaId;
@property(assign, nonatomic) BOOL isMultiSelection;
@property(retain, nonatomic) UIButton* instantButton;
@property(retain, nonatomic) LGInstantViewController* instantViewController;
@property(assign, nonatomic) __weak LGBaseViewController* delegate;
-(void).cxx_destruct;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)didSelectedCameraButton:(id)button;
-(void)didSelectedAttachButton:(id)button;
-(void)didSelectedInstantButton:(id)button;
-(void)didSelectedDoneButton:(id)button;
-(void)closeInstantViewController;
-(void)setCheckedBadgeCount:(unsigned)count tableView:(id)view animated:(BOOL)animated;
-(void)manipulateFrameForTableView:(id)tableView showingMenuOrNot:(BOOL)aNot animated:(BOOL)animated;
-(id)bundleName;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface NLVoiceTouchBlockView : UIView {
}
@end

__attribute__((visibility("hidden")))
@interface LAAlbumNotification : NSObject {
	NSMutableSet* mObserverStore;
}
+(id)defaultCenter;
-(void).cxx_destruct;
-(void)sendAlbumNotification:(id)notification type:(int)type;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LAPhotoProgressView : UIView {
	BOOL _hidesWhenCompleted;
	LACircularProgressView* _progressView;
	UILabel* _progressLabel;
}
@property(retain, nonatomic) NSString* progressText;
@property(assign, nonatomic) BOOL hidesWhenCompleted;
@property(retain, nonatomic) UILabel* progressLabel;
@property(retain, nonatomic) LACircularProgressView* progressView;
-(void).cxx_destruct;
-(void)setProgress:(unsigned)progress totalLength:(unsigned)length instantly:(BOOL)instantly;
-(float)progress;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLCallAddressDetailTableViewCell : UITableViewCell {
	NLCallSenderButton* _buttonCall;
	UILabel* _labelPhoneNumber;
	UIImageView* _imageViewLine;
	UILabel* _labelFreeCall;
}
@property(assign, nonatomic) UILabel* labelFreeCall;
@property(assign, nonatomic) UIImageView* imageViewLine;
@property(assign, nonatomic) UILabel* labelPhoneNumber;
@property(assign, nonatomic) NLCallSenderButton* buttonCall;
+(id)viewFromNib;
-(void)setMemberTypeInfo:(unsigned)info withCatName:(id)catName;
-(void)setUserInfo:(id)info withDelegate:(id)delegate;
-(void)initDefault;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface NLNeloManager : NSObject {
}
+(id)serverSettingsInfo;
+(id)defaultProfileInfo;
+(id)commonErrorMsg:(id)msg;
+(void)markCustomLog:(id)log;
+(BOOL)isCustomLogEnabled;
+(void)finishCustomLogging;
+(void)startCustomLogging;
+(void)logFatalError:(id)error location:(id)location;
+(void)logSystemError:(id)error location:(id)location;
+(void)logMessageDefineError:(id)error location:(id)location;
+(void)logAuthorizationError:(id)error location:(id)location;
+(void)logNetworkError:(id)error location:(id)location;
+(void)initializeTimer;
+(void)setUserInfo;
+(void)initializeQuincy;
+(void)initializeNeloWithAppID:(id)appID;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface NLStickerDownloadManager : NSObject <NLStickerDownloadDelegate, StickerDownloadProgressDelegate> {
	NSMutableArray* delegates;
	NSMutableArray* failedPackages;
	NSMutableDictionary* progressViews;
	NSMutableArray* _downloadingPackages;
}
@property(retain, nonatomic) NSMutableDictionary* progressViews;
@property(retain, nonatomic) NSMutableArray* failedPackages;
@property(retain, nonatomic) NSMutableArray* downloadingPackages;
@property(retain, nonatomic) NSMutableArray* delegates;
+(void)line_notifyDownloadedWithDownloadPackage:(id)downloadPackage statusCallback:(id)callback;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)cancelButtonTapped:(id)tapped;
-(void)cancelAllDownloadPackage;
-(void)stickerPackageDownloadSuccess:(id)success;
-(void)stickerPackageDownloadCanceled:(id)canceled;
-(void)stickerPackageDownloadFailed:(id)failed;
-(void)stickerPackage:(id)package downloaded:(float)downloaded;
-(void)stickerPackageJustDownloadEnded:(id)ended;
-(void)stickerPackageDownloadStarted:(id)started;
-(id)packageWithProgressView:(id)progressView;
-(id)progressViewWithPackageID:(long long)packageID;
-(id)progressViewWithPackage:(id)package;
-(id)createProgressViewWithPackage:(id)package;
-(void)resumeFailedPacakge;
-(id)addDownloadPackage:(id)package;
-(id)verificationBlock:(id)block versionDownloading:(unsigned)downloading;
-(id)fileDownloadPackage:(id)package;
-(id)addDownloadPackage:(id)package progressBlock:(id)block completionBlock:(id)block3;
-(id)downloadPackage:(id)package progressBlock:(id)block completionBlock:(id)block3;
-(void)deleteDownloadPackage:(id)package;
-(BOOL)isStickerDownloading;
-(void)dealloc;
-(id)init;
-(void)removeDelegate:(id)delegate;
-(void)addDelegate:(id)delegate;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineFakeFileDownload : NSObject {
	float _progress;
}
@property(readonly, assign, nonatomic) float progress;
-(void)download;
-(void)cancel;
-(void)setVerificationBlock:(id)block;
-(void)addCompletionBlock:(id)block;
-(void)removeAllProgressBlocks;
-(void)removeAllCompletionBlocks;
-(void)addProgressBlock:(id)block;
@end

__attribute__((visibility("hidden")))
@interface LineFakeFileDownload2 : NSObject {
	NSMutableArray* _completionBlocks;
	float _progress;
}
@property(readonly, assign, nonatomic) float progress;
-(void).cxx_destruct;
-(void)download;
-(void)setVerificationBlock:(id)block;
-(void)addCompletionBlock:(id)block;
-(void)addProgressBlock:(id)block;
-(void)removeAllProgressBlocks;
-(void)removeAllCompletionBlocks;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLBuddyVideoOnAirView : UIView <NLBuddyVideoHeaderViewDelegate> {
	BOOL autoplayIfReady;
	BOOL canceled;
	BOOL _paused;
	NSMutableSet* moviePlayerObservers;
	NLBuddyOnAirModel* _onAirModel;
	int _currentOrientation;
	id _closeBlock;
	id _rotateBlock;
	id _tappedBlock;
	id _showVideoQualityBlock;
	MPMoviePlayerController* _movieController;
	NLBuddyVideoHeaderView* _headerView;
	UIActivityIndicatorView* _spinner;
	unsigned _retryCount;
	NLSafeUnretainedObject* _weakSelf;
}
@property(retain, nonatomic) NLSafeUnretainedObject* weakSelf;
@property(assign, nonatomic) unsigned retryCount;
@property(retain, nonatomic) NSMutableSet* moviePlayerObservers;
@property(assign, nonatomic) BOOL canceled;
@property(assign, nonatomic) BOOL autoplayIfReady;
@property(retain, nonatomic) UIActivityIndicatorView* spinner;
@property(retain, nonatomic) NLBuddyVideoHeaderView* headerView;
@property(retain, nonatomic) MPMoviePlayerController* movieController;
@property(copy, nonatomic) id showVideoQualityBlock;
@property(copy, nonatomic) id tappedBlock;
@property(copy, nonatomic) id rotateBlock;
@property(copy, nonatomic) id closeBlock;
@property(assign, nonatomic) int currentOrientation;
@property(retain, nonatomic) NLBuddyOnAirModel* onAirModel;
@property(assign, nonatomic, getter=isPaused) BOOL paused;
@property(readonly, assign, nonatomic) BOOL isPlaying;
-(void).cxx_destruct;
-(void)didTappedVideoQualityButton:(id)button;
-(void)didTappedRotateButton:(id)button;
-(void)didTappedCloseButton:(id)button;
-(void)didTappedPlayer:(id)player gesture:(id)gesture;
-(void)resizeForOrientation:(int)orientation;
-(void)playButtonPressed:(id)pressed;
-(void)showVideoQualityMenu;
-(void)rotateVideoOnAirPanel;
-(void)beforeClose;
-(void)closeVideoOnAirPanel;
-(BOOL)isPortraitOrientation;
-(void)cancelDelayedAttemptPlay;
-(void)delayedAttemptPlay;
-(void)resume;
-(void)pause;
-(void)cancel;
-(void)stop;
-(void)playOrPrepareToPlay;
-(void)changeMediaAtURL:(id)url autoPlay:(BOOL)play;
-(void)playMediaAtURL:(id)url autoPlay:(BOOL)play;
-(CGSize)playerSizeFittedForRatioOnPortrait;
-(void)removeAudioRouteChangeListener;
-(void)addAudioRouteChangeListener;
-(void)removeMovieNotificationObservers;
-(void)addMovieNotificationObservers;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBNoFriendMessageView : MBMessageView {
	UIImageView* mImageView;
	MBMessageContentLabel* mMessageLabel;
}
+(id)noFriendMessageView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LAViewerNoPhotosView : LAMessageView {
}
-(float)topMarginOfDetailLabel;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NLStraySticonDownloadQueueArray : NSObject {
	NSMutableArray* _data;
}
-(void).cxx_destruct;
-(int)sticonDataCount;
-(void)removeSticonData:(unsigned)data code:(unsigned)code;
-(void)getSticonDataToDownload:(unsigned*)download code:(unsigned*)code;
-(void)addSticonDataIfNotExist:(unsigned)exist code:(unsigned)code;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NLBuddyOnAirModel : NSObject {
	NSString* _mid;
	NSString* _message;
	NSString* _accountName;
	unsigned _onAirStatus;
	unsigned _onAirType;
	NSDictionary* _hls;
	int _playingSecond;
	NSDate* _dateWhenSavePlayingSecond;
	NSString* _screenAspectRate;
	long long _enterCount;
	long long _targetCount;
}
@property(retain, nonatomic) NSString* screenAspectRate;
@property(retain, nonatomic) NSDate* dateWhenSavePlayingSecond;
@property(assign, nonatomic) int playingSecond;
@property(copy, nonatomic) NSDictionary* hls;
@property(assign, nonatomic) unsigned onAirType;
@property(assign, nonatomic) unsigned onAirStatus;
@property(assign, nonatomic) long long targetCount;
@property(assign, nonatomic) long long enterCount;
@property(retain, nonatomic) NSString* accountName;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* mid;
-(void).cxx_destruct;
-(id)ratiosScreenAspect;
-(int)currentPlayingSecond;
-(BOOL)isLivePlay;
-(BOOL)availableMediaPlay;
-(void)setOnAirTypeWithServerType:(int)serverType;
-(unsigned)convertLineOnAirTypeFromTalkType:(int)talkType;
@end

__attribute__((visibility("hidden")))
@interface LGAssetsCell : UITableViewCell {
	BOOL _isMultipleSelection;
	BOOL _isImageSelection;
	BOOL _usingEdit;
	NSMutableArray* _imageButtons;
	NSString* _bundleName;
}
@property(retain, nonatomic) NSString* bundleName;
@property(assign, nonatomic) BOOL usingEdit;
@property(assign, nonatomic) BOOL isImageSelection;
@property(assign, nonatomic) BOOL isMultipleSelection;
@property(retain, nonatomic) NSMutableArray* imageButtons;
+(float)heightOfCell:(int)cell;
+(float)gapSize:(int)size;
+(float)thumbnailSize:(int)size;
+(int)imageCountPerCell:(int)cell;
+(int)imageCountPerCell;
-(void).cxx_destruct;
-(void)setItems:(id)items section:(int)section row:(int)row orientation:(int)orientation delegate:(id)delegate;
-(void)setItems:(id)items section:(int)section row:(int)row delegate:(id)delegate;
-(float)leftMargin:(int)margin;
-(id)stringFromDuration:(double)duration;
-(void)addCheckButtonOnButton:(id)button;
-(void)addEditStatusLabelOnButton:(id)button;
-(void)addVideoDurationLabelOnButton:(id)button;
-(id)initWithBundleName:(id)bundleName isMultipleSelection:(BOOL)selection isImageSelection:(BOOL)selection3 usingEdit:(BOOL)edit reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface NLShopDownloadAlertManager : NSObject {
}
+(BOOL)needShowDownloadResultAlertWithService:(unsigned)service;
+(void)failedDownloadSticker:(id)sticker;
+(void)_failedForceUpdateTheme:(id)theme;
+(void)_successForceUpdateTheme:(id)theme;
+(void)_failedUpdateTheme:(id)theme;
+(void)_successUpdateTheme:(id)theme;
+(void)failedUpdateTheme:(id)theme;
+(void)successUpdateTheme:(id)theme;
+(void)_failedDownloadTheme:(id)theme;
+(void)_successDownloadTheme:(id)theme;
+(void)failedDownloadTheme:(id)theme alertType:(unsigned)type;
+(void)successDownloadTheme:(id)theme alertType:(unsigned)type;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface NLAuthenticationManager : NSObject {
	dispatch_queue_s* _queue;
	dispatch_source_s* _accessTokenUpdateTimer;
	NSString* _accessToken;
	NSString* _MID;
	BOOL _keychainAccessible;
	BOOL _passcodeEnabled;
}
@property(readonly, assign) BOOL passcodeEnabled;
@property(retain, nonatomic) NSString* UUID;
@property(readonly, assign, nonatomic) unsigned authenticationTokenStatus;
@property(readonly, assign, nonatomic) NSString* MID;
@property(readonly, assign, nonatomic) NSString* accessToken;
+(void)deleteFromKeychainWithQuery:(id)query;
+(id)dataFromKeychainForQuery:(id)query errorCode:(int*)code;
+(void)saveToKeychainData:(id)keychainData forQuery:(id)query;
+(id)saltedAndHashedPasscode:(id)passcode salt:(id)salt;
+(id)saltedAndHashedPasscode;
+(id)queryDictionaryForPasscode;
+(id)generateUUID;
+(id)queryDictionaryForUUID;
+(id)queryDictionaryForAuthenticationToken;
+(id)queryDictionaryWithKey:(id)key;
+(id)MIDFromAuthenticationToken:(id)authenticationToken;
+(id)MID;
+(BOOL)isReadyToUse;
+(unsigned)authenticationTokenStatus;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(BOOL)passcodeMatches:(id)matches;
-(void)savePasscode:(id)passcode;
-(id)autosetUUID;
-(void)barrier_generateAccessTokenFromAuthorizationToken:(id)authorizationToken;
-(void)barrier_setAccessToken:(id)token couldAccessKeychain:(BOOL)keychain;
-(void)barrier_deleteAuthenticationTokenAndPasscode;
-(void)deleteAuthenticationTokenAndPasscode;
-(id)getAuthenticationToken;
-(void)saveAuthenticationToken:(id)token;
-(id)barrier_loadAuthenticationTokenAndMIDWithErrorCode:(int*)errorCode;
-(void)barrier_generateAccessToken;
-(void)barrier_setMID:(id)mid;
-(void)barrier_update;
-(void)update;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineAlbumOBSLoader : NSObject {
}
+(void)setData:(id)data forURL:(id)url scope:(id)scope;
+(id)imageForURL:(id)url scope:(id)scope;
+(id)pathForURL:(id)url scope:(id)scope;
+(void)loadOBSImageWitOid:(id)oid cafeID:(id)anId groupID:(id)anId3 completeBlock:(id)block;
+(void)removeOBSImageForKey:(id)key groupID:(id)anId;
+(void)removeGlobalURLImages;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface TalkErrorManager : NSObject {
}
+(BOOL)isNotAvailablePinCodeError:(id)error;
+(BOOL)isNotAllowedSecondaryDeviceError:(id)error;
+(BOOL)isNotValidPinCode:(id)code;
+(BOOL)isNotAllowedAddContactError:(id)error;
+(BOOL)isExternalServiceError:(id)error;
+(BOOL)isShopMessageDefineError:(id)error;
+(BOOL)isMessageDefineError:(id)error;
+(BOOL)isInvalidSnsAccessToken:(id)token;
+(BOOL)isIllegalArgument:(id)argument;
+(BOOL)isNotAvailableIdentity:(id)identity;
+(BOOL)isNotAvailableSession:(id)session;
+(BOOL)isNotReady:(id)ready;
+(BOOL)isExcessiveAccess:(id)access;
+(BOOL)isNotFound:(id)found;
+(BOOL)isNotAMember:(id)member;
+(BOOL)isInvalidMID:(id)mid;
+(BOOL)isSystemError:(id)error;
+(BOOL)isFatalError:(id)error;
+(void)showGenericAlert;
+(void)showGenericAlertForNetworkError;
+(void)showChannelAlertForError:(id)error;
+(void)showNaverCredentialAlertForError:(id)error;
+(void)showSubErrorOfInvalidPasswordFormat:(id)invalidPasswordFormat;
+(void)showIdentityCredentialAlertForError:(id)error;
+(BOOL)hasIdentityCredentialAlert:(id)alert;
+(void)showRegisterAlertForError:(id)error;
+(void)resetAllData;
+(void)tabControllersPopToRootVC;
+(void)resetAppDirectory;
+(void)deleteAccount;
+(void)removeNotAvailableWindows;
+(void)showResetWindow;
+(BOOL)isShownServiceTemporarilyNotAvailableWindow;
+(void)showServiceTemporarilyNotAvailableWindow;
+(void)stopAllTask;
+(void)checkUserAuthorization;
+(void)showLineSSLTimeError:(id)error;
+(void)showLineFatalError:(id)error;
+(void)showLineSystemError:(id)error delegate:(id)delegate;
+(void)showLineSystemError:(id)error;
+(BOOL)hasGenericAlert:(id)alert;
+(void)showGenericAlertForError:(id)error completionBlock:(id)block;
+(void)showGenericAlertForError:(id)error delegate:(id)delegate;
+(void)showGenericAlertForError:(id)error;
+(void)showNetworkAlertForError:(id)error;
+(void)showNetworkAlert;
+(id)genericMessageForError:(id)error;
+(BOOL)isChannelException:(id)exception;
+(BOOL)isLineException:(id)exception;
+(BOOL)isShopException:(id)exception;
+(BOOL)isTalkException:(id)exception;
+(BOOL)isApplicationError:(id)error;
+(BOOL)isNetworkError:(id)error;
+(BOOL)isABAuthorizationError:(id)error;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface TalkFileManager : NSObject {
	NSMutableSet* activeConnections_;
}
+(void)createSkinDirecotry;
+(id)skinDirectoryPath;
+(id)pathFromURL:(id)url scope:(id)scope;
+(id)pathFromFile:(id)file scope:(id)scope;
+(id)cacheDirectory;
+(id)URLForString:(id)string;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
+(void)createDirectoryForPath:(id)path;
+(id)pathForURL:(id)url withBaseDirectory:(id)baseDirectory scope:(id)scope;
-(void).cxx_destruct;
-(BOOL)saveSkin:(id)skin forName:(id)name;
-(id)skinForName:(id)name;
-(BOOL)skinExistsForName:(id)name;
-(id)skinFilePathForName:(id)name;
-(id)dataForURL:(id)url;
-(id)dataForURL:(id)url withScope:(id)scope;
-(id)createDirectoryForPath:(id)path;
-(id)cachedDataForName:(id)name withScope:(id)scope;
-(id)cachedDataForURL:(id)url withScope:(id)scope;
-(void)asyncCachedDataForURL:(id)url withScope:(id)scope complmete:(id)complmete;
-(BOOL)cachedDataExistsForURL:(id)url withScope:(id)scope;
-(BOOL)deleteAllCache:(id)cache withType:(id)type;
-(BOOL)deleteCacheWithScope:(id)scope;
-(BOOL)deleteCache:(id)cache withScope:(id)scope;
-(BOOL)deleteCache:(id)cache;
-(BOOL)saveCache:(id)cache forName:(id)name withScope:(id)scope;
-(BOOL)saveCache:(id)cache forURL:(id)url withScope:(id)scope;
-(id)cachePathForURL:(id)url scope:(id)scope;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageWarmupOperation : NLObjectStorageOperation {
}
-(void)buildRequest;
-(id)initWithOperationParameters:(id)operationParameters;
@end

__attribute__((visibility("hidden")))
@interface ChatListAttributedStringCacheManager : NSObject {
	NSMutableDictionary* mAttributedStringDictionaryForWidth;
	NSMutableDictionary* mFrameDictionaryForWidth;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)didChangeLineTheme:(id)theme;
-(CGRect)getFrameFromText:(id)text width:(float)width withAttrs:(id)attrs;
-(id)getAttributedString:(id)string width:(float)width withAttributes:(id)attributes;
-(id)getAttributedString:(id)string width:(float)width;
-(id)getMessageAttrs;
-(void)reset;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeErrorMessageView : MBMessageView {
	UIImageView* mTopImageView;
	UIView* mBoardView;
	UIImageView* mIconImageView;
	UILabel* mMessageLabel;
	float mHeight;
}
+(id)errorMessageView;
-(void).cxx_destruct;
-(float)height;
-(void)layoutSubviews;
-(void)layout;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBLoadingMessageView : MBMessageView {
	UIActivityIndicatorView* mActivityIndicator;
	int mIndicatorSize;
}
+(id)loadingMessageViewSmall;
+(id)loadingMessageView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame size:(int)size;
@end

__attribute__((visibility("hidden")))
@interface NJSURLImageButton : UIButton <NJSURLImageObserving> {
	NJSURLImage* mURLImage;
	id mUpdateCallbackBlock;
}
-(void).cxx_destruct;
-(void)URLImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)setImageAnimateWithImage:(id)image;
-(void)setUpdateCallback:(id)callback;
-(void)setURLImage:(id)image callback:(id)callback;
-(void)setURLImage:(id)image;
-(id)URLImage;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface MBTimelinePublicNotiLayer : UIView {
	UIImageView* mMainView;
	UIImageView* mTitleView;
	UILabel* mSubTitleLabel;
	UILabel* mDescLabel;
	UIImageView* mMainImageView;
	UIButton* mCloseButton;
	UIButton* mSettingMoveButton;
	UIView* mSettingView;
}
@property(readonly, assign, nonatomic) UIView* settingView;
+(id)timelinePublicNotiLayerWithSettingView:(id)settingView frame:(CGRect)frame;
+(BOOL)timelinePublicInfoConfirmFromUserDefaults;
+(void)saveTimelinePublicInfoConfirmFromUserDefaults;
-(void).cxx_destruct;
-(void)show;
-(void)hide;
-(id)initWithSettingView:(id)settingView frame:(CGRect)frame;
-(void)setupSubviews;
@end

__attribute__((visibility("hidden")))
@interface NLShakeSearchingAnimationView : UIView {
	int _step;
}
-(void)step;
-(void)drawRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface NLShakeSearchingView : UIView {
	NLShakeSearchingAnimationView* _animationView;
	NSTimer* _animationTimer;
	UIImageView* _iconView;
	UILabel* _searchingLabel;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineCoreDataManager : NSObject {
	NSManagedObjectModel* mManagedObjectModel;
	NSPersistentStoreCoordinator* mPersistentStoreCoordinator;
	BOOL indexesNeedAdjusting_;
	BOOL mIsMemoryStore_;
}
+(BOOL)isSafeToSave;
+(id)contextForReadOnlyAnyThread;
+(id)sharedTransientManagedObjectContext;
+(void)setSharedTransientManagedObjectContext:(id)context;
+(id)newTransientManagedObjectContext;
+(void)performBlockWithObjectID:(id)objectID context:(id)context completionBlock:(id)block;
+(void)performBlockOnPrivateQueueWithObjectID:(id)objectID completionBlock:(id)block;
+(void)performBlockOnMainQueueWithObjectID:(id)objectID completionBlock:(id)block;
+(void)performReadOnlyBlockAndWait:(id)wait;
+(void)performBlockWithMainQueueMOC:(id)mainQueueMOC;
+(void)performBlockWithPrivateQueueMOC:(id)privateQueueMOC;
+(id)privateQueueContext;
+(id)mainQueueContext;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedCoreDataManager;
-(void).cxx_destruct;
-(void)cleanupMemoryStore;
-(void)setupInMemoryStore;
-(void)doMigration;
-(BOOL)isRequiredMigration;
-(void)jibaku;
-(void)initContexts;
-(id)persistentStoreCoordinator;
-(id)inMemoryPersistentStoreCoordinator;
-(id)sqlitePersistentStoreCoordinator;
-(id)managedObjectModel;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface LineTransientManagedObjectContext : NSManagedObjectContext {
}
-(BOOL)save:(id*)save;
-(id)save;
@end

__attribute__((visibility("hidden")))
@interface LineSkinManager : NSObject <ASIHTTPRequestDelegate> {
	BOOL checking_;
	NSMutableArray* skinInfos_;
	ASIHTTPRequest* httpRequest_;
	ASINetworkQueue* requestQueue_;
	unsigned thumbnailDownloadRetryCount_;
	id completionBlock_;
}
@property(readonly, assign, nonatomic) ASINetworkQueue* requestQueue;
@property(retain, nonatomic) NSArray* skinInfos;
+(unsigned)themeTypeWithSkinName:(id)skinName;
+(id)skinListURL;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)skinListRequestFailed:(id)failed;
-(void)skinListRequestDone:(id)done;
-(void)thumbnailDownloadsDidFinished:(id)thumbnailDownloads;
-(void)downloadThumnbnails;
-(BOOL)isDownloadingThumbnails;
-(BOOL)hasThumbnails;
-(unsigned)numberOfSkins;
-(id)skinInfoListWithSkinList:(id)skinList;
-(BOOL)updateSkinInfos:(id)infos;
-(BOOL)httpRequestIsActive;
-(BOOL)startCheckingSkinList;
-(BOOL)needsCheckingSkinList;
-(void)readyWithCompletionBlock:(id)completionBlock;
-(void)setThumbnailsDownloadCompletionBlock:(id)block;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface SkinInfo : NSObject {
	NSString* name_;
}
@property(readonly, assign, nonatomic) NSURL* thumbnailURL;
@property(readonly, assign, nonatomic) NSURL* URL;
@property(readonly, assign) UIImage* thumbnail;
@property(readonly, assign, nonatomic) NSString* thumbnailName;
@property(readonly, assign, nonatomic) NSString* fileName;
@property(readonly, assign, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)description;
-(BOOL)needsDownload;
-(unsigned)themeType;
-(id)initWithName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface MBDiskCache : NSObject {
	NSString* mCacheDir;
	NSMutableSet* mScopes;
	NSMutableDictionary* mItemMaxCounts;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedDiskCache;
-(void).cxx_destruct;
-(id)imageForRemoteURL:(id)remoteURL scope:(id)scope;
-(id)dataForRemoteURL:(id)remoteURL scope:(id)scope;
-(BOOL)setImage:(id)image forRemoteURL:(id)remoteURL scope:(id)scope;
-(BOOL)setData:(id)data forRemoteURL:(id)remoteURL scope:(id)scope;
-(id)contentsOfScope:(id)scope;
-(void)removeContentsOfScope:(id)scope;
-(void)emptyScope:(id)scope;
-(void)emptyCacheBefore:(id)before duration:(long)duration;
-(void)emptyScope:(id)scope before:(id)before duration:(long)duration;
-(void)resetRepository;
-(BOOL)isValidScope:(id)scope;
-(id)scopes;
-(BOOL)addScope:(id)scope itemMaxCount:(int)count;
-(BOOL)addScope:(id)scope;
-(id)pathForRemoteURL:(id)remoteURL scope:(id)scope temp:(BOOL)temp;
-(id)pathForRemoteURL:(id)remoteURL scope:(id)scope;
-(id)pathForScope:(id)scope;
-(id)cacheDirectory;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
-(void)setupExistingScope;
-(void)emptyScopeThreadWithParam:(id)param;
-(void)emptyCacheThreadWithParam:(id)param;
-(void)removeItemOverMaxNum:(id)num maxNum:(int)num2 timeLimit:(long)limit;
-(BOOL)removeExpiredItemAtPath:(id)path expiredTime:(int)time timeLimit:(long)limit;
-(id)commonProxyURL:(id)url;
-(void)updateAccessTime:(id)time;
@end

__attribute__((visibility("hidden")))
@interface MBProfileImage : MBURLImage {
	UIImage* mListProfileImage;
	UIImage* mCoverProfileImage;
	UIImage* mTitleProfileImage;
	double mLoadTime;
	BOOL mIsShouldCache;
}
@property(assign, nonatomic) BOOL isShouldCache;
+(id)profileImageWithMID:(id)mid;
+(id)profileImageWithUrl:(id)url;
+(id)noCoverProfileImage;
+(id)noListProfileImage;
+(id)noProfileImage100;
+(id)noProfileImage66;
+(BOOL)isProfileImageEmptyError:(id)error;
-(void).cxx_destruct;
-(BOOL)shouldCache;
-(BOOL)shouldReload;
-(void)reload;
-(id)coverProfileImage;
-(id)listProfileImage;
-(void)resetImages;
@end

__attribute__((visibility("hidden")))
@interface FriendHitokotoMessageBoxCacheManager : NSObject {
	NSMutableDictionary* mMessageBoxDictionaryForKey;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)removeAll;
-(void)removeMessageBox:(id)box;
-(id)getMessageBox:(id)box;
-(void)setMessageBox:(id)box forKey:(id)key;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface FriendHitokotoAttributedStringCacheManager : NSObject {
	NSCache* mAttributedStringDictionaryForKey;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(id)getAttributedString:(id)string width:(float)width font:(id)font sticonHeight:(float)height color:(int)color maximumLines:(int)lines;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLObjectStorageService : NSObject <NLObjectStorageQueueOperation> {
	NLObjectStorageOpQueue* _queue;
}
@property(readonly, assign, nonatomic) NLObjectStorageOpQueue* queue;
+(id)thumbURLWithObjectID:(id)objectID spaceID:(id)anId serviceCode:(id)code quality:(id)quality size:(id)size;
+(id)objectURLWithObjectID:(id)objectID spaceID:(id)anId serviceCode:(id)code quality:(id)quality;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedService;
-(void).cxx_destruct;
-(void)scheduledOperationForWarmup;
-(BOOL)cancelOperationWithUploadProgressDelegate:(id)uploadProgressDelegate;
-(id)operationWithObjectID:(id)objectID;
-(void)enumerateOperationsUsingBlock:(id)block;
-(id)operations;
-(unsigned)operationCount;
-(void)cancelOperation:(id)operation;
-(void)requestDidCancelOperation:(id)request;
-(void)requestDidFinishOperation:(id)request;
-(void)rescheduleOperation:(id)operation;
-(id)scheduledOperationWithParameters:(id)parameters;
-(id)obsAccessToken;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLSoundManager : NSObject {
}
+(void)playError;
+(void)playMessageSendFailed;
+(void)playMessageSent;
+(void)playMessageReceivedInBackground;
+(void)playMessageReceivedInForeground;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface LineImageCacheManager : NSObject {
	NSCache* _cache;
	UIImage* _cachedSkinImage;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)clearSkinImageCache;
-(id)backgroundSkinImage;
-(id)backgroundSkinImageWithName:(id)name;
-(void)clearImageCache;
-(void)removeImageForKey:(id)key;
-(void)setImage:(id)image forKey:(id)key;
-(id)imageForKey:(id)key;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeNoMyDataMessageView : MBMessageView {
	UIImageView* mTopImageView;
	UIView* mBoardView;
	MBRoundButton* mButton;
	UILabel* mMessageLabel;
	float mHeight;
}
+(id)noDataMessageView;
-(void).cxx_destruct;
-(float)height;
-(void)layoutSubviews;
-(void)layout;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LineDeviceManager : NSObject {
}
+(BOOL)isJapanDeviceWithPhoneRegion:(id)phoneRegion;
+(BOOL)isJapanDevice;
+(BOOL)isDocomo;
+(BOOL)isAU;
+(BOOL)isSoftbank;
+(BOOL)isJapanCarrierEmail:(id)email;
+(id)carrierInfoForOBS;
+(id)carrierInfo;
+(BOOL)canDevicePlaceAPhoneCall;
+(void)requestRecordPermissionWithRunOnMainThreadBlock:(id)runOnMainThreadBlock;
+(void)showAudioAlertOnlyOnceAndExecuteBlock:(id)block;
+(id)MACAddressAsString:(BOOL)string;
+(id)MACAddressData;
+(id)MACAddress;
+(BOOL)hasChangeCurrentLanguage;
+(id)userInfo;
+(id)appVersion;
+(id)hardwareModelName;
+(id)deviceModel;
+(id)countryMobileCodes;
+(id)allCountries;
+(BOOL)isNormalConnectionContry;
+(id)currentCountry;
+(id)currentLanguageCode;
+(id)currentLocaleIdentifier;
+(id)countryCodeFromTelSIMLocale;
+(id)countryCodeFromTelSIM;
+(id)countryCodeFromLocale;
+(id)countryCodeFromSIM;
+(id)countryCodeFromTel;
+(id)countryNumberFromTel;
+(id)currentCountryFromTelNumber;
+(id)localCountryInfoFromCarrierWithDefault;
+(id)localCountryInfoFromCarrier;
+(id)detectorTypePhoneNumber;
+(id)systemVersion;
+(id)deviceInfo;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface NLCallNavigationBar : UIView {
	UIButton* _buttonSetting;
	NLCallTopMenuButton* _buttonKeypad;
	NLCallTopMenuButton* _buttonHistory;
	NLCallTopMenuButton* _buttonAddress;
	NLCallTopMenuButton* _buttonSpot;
	UIButton* _buttonClose;
}
@property(assign, nonatomic) UIButton* buttonClose;
@property(assign, nonatomic) NLCallTopMenuButton* buttonSpot;
@property(assign, nonatomic) NLCallTopMenuButton* buttonAddress;
@property(assign, nonatomic) NLCallTopMenuButton* buttonHistory;
@property(assign, nonatomic) NLCallTopMenuButton* buttonKeypad;
@property(assign, nonatomic) UIButton* buttonSetting;
-(void)shfitToLeftForJapanDevice;
-(void)updateLayoutForScreenSmallerThan4Inchi;
-(void)layoutSubviews;
-(void)updateMenuStatus:(int)status;
@end

__attribute__((visibility("hidden")))
@interface LineAdConversionManager : NSObject {
}
+(void)setAdXIsUpgradingIfNeeded;
+(id)parseQueryString:(id)string;
+(id)trackingObjectToString:(int)string;
+(void)setAdXIsUpgrading:(BOOL)upgrading;
+(void)reportAdXTracking:(int)tracking withData:(id)data;
+(void)reportWaitingForSMS;
+(void)reportAdXPingWhenInstalling;
+(void)initAdX;
+(id)getAdxTracker;
+(void)reportInMobiPingWhenInstalling;
+(void)initInMobi;
+(void)reportAdMobPingWhenInstalling;
+(void)reportRegistration;
+(void)reportInstall;
+(void)reportLaunch;
@end

__attribute__((visibility("hidden")))
@interface LAViewUtil : NSObject {
}
+(void)resizeLabel:(id)label maxWidth:(float)width;
+(void)transformView:(id)view scale:(float)scale option:(unsigned)option completion:(id)completion;
+(BOOL)isSupportedRatio:(float)ratio;
+(BOOL)isSupportedSize:(CGSize)size;
+(id)currentTopWindow;
+(void)resizeButton:(id)button imageLeftMargin:(int)margin titleRightMargin:(int)margin3 marginBetweenImageAndTitle:(int)title maxWidth:(float)width;
+(int)navigatinoBarLabelFontSizeForOrientation;
+(int)navigatinoBarButtonHeightForOrientation;
+(int)navigatinoBarHeightForOrientation;
+(int)navigatinoBarHeight:(int)height;
+(float)statusBarHeight:(int)height;
+(float)statusBarHeight;
+(void)nonStyledTitle:(id)title viewController:(id)controller size:(CGSize)size;
+(float)widthBarButtonItem:(id)item;
@end

__attribute__((visibility("hidden")))
@interface NLMediaObsInfoManager : NSObject {
	NSMutableDictionary* _mediaObsInfo;
	NSString* _pListPath;
}
+(int)obsCopyInterval;
+(void)setObsCopyInterval:(int)interval;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void).cxx_destruct;
-(BOOL)isValidatedForDate:(id)date;
-(BOOL)isValidatedForObsInfo:(id)obsInfo;
-(void)checkValidation;
-(id)pListPath;
-(void)saveToFile;
-(void)loadFromFile;
-(id)getObsIDForLocalPath:(id)localPath;
-(BOOL)isValidatedMessage:(id)message;
-(id)obsInfoForMovieAssetURL:(id)movieAssetURL;
-(void)setObsInfoForMovieMessageObject:(id)movieMessageObject localPath:(id)path;
-(BOOL)existMovieForAssetURL:(id)assetURL;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface MBRecommendList : MBBaseActivityContent {
	NSArray* _recommendList;
}
@property(readonly, assign, nonatomic) NSArray* recommendList;
-(void).cxx_destruct;
-(void)setupWithMyhomeInfo:(id)myhomeInfo;
-(void)setupWithTimelineInfo:(id)timelineInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface MBMyHomeGroupEmptyCell : MBMessageView {
	UIView* mBoardView;
	UIImageView* mStickerImageView;
	UILabel* mTitleLabel;
	UILabel* mMessageLabel;
	UILabel* mMakeListButton;
}
+(id)noDataMessageView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBMyhomePostFooterView : MBBaseChildCellView {
	MBActivity* mActivity;
	MBPostFeedbackView* mPostFeedbackView;
	MBPostFeedbackCountView* mPostFeedbackCountView;
	MBStickerProfileListView* mStickerProfileListView;
	UIImageView* mBackgroundView;
	UIImageView* mShadowView;
	NSMutableArray* mCommentViewArray;
}
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)setCellData:(id)data;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface LineLastKeyWindowManager : NSObject {
}
+(void)didBecomeKeyNotification:(id)notification;
+(void)removeObserver;
+(void)addObserver;
@end

__attribute__((visibility("hidden")))
@interface NLBuddyOnAirChatUIHandler : NSObject {
	BOOL _isShowedOnAirOnce;
	NLBuddyOnAirView* _buddyOnAirView;
	NLBuddyVideoOnAirView* _videoOnAirView;
	NLBuddyOnAirModel* _onAirModel;
}
@property(assign, nonatomic) BOOL isShowedOnAirOnce;
@property(retain, nonatomic) NLBuddyOnAirModel* onAirModel;
@property(readonly, assign, nonatomic) NLBuddyVideoOnAirView* videoOnAirView;
@property(readonly, assign, nonatomic) NLBuddyOnAirView* buddyOnAirView;
-(void).cxx_destruct;
-(void)keyboardWillHideNotification:(id)keyboard;
-(void)keyboardDidShowNotification:(id)keyboard;
-(void)didChangeUIDeviceOrientation:(id)orientation;
-(id)chatObject;
-(id)editButtonBar;
-(id)messageSendBar;
-(id)tableView;
-(id)view;
-(id)messageViewController;
-(id)hlsURL;
-(void)showVideoQualityMenu;
-(BOOL)isNeedRotateView;
-(void)hideChatRoomKeyboard;
-(void)showOrHideStatusBar;
-(void)tappedOnAirVideoView;
-(void)rotateForcelyOnAirVideoView;
-(void)showChatOnAirPanel:(BOOL)panel duration:(double)duration;
-(void)recoveryChatArea;
-(void)minizeChatArea;
-(void)adjustChatArea;
-(void)resumePlayer;
-(void)pausePlayer;
-(BOOL)isShowingVideoOnAirView;
-(BOOL)isShowingBuddyOnAirView;
-(void)hideVideoOnAirView;
-(void)showVideoOnAirView;
-(void)hideOnAirViewWithDuration:(double)duration;
-(void)showOnAirViewWithDuration:(double)duration;
-(void)stopOnAir;
-(void)attemptToShowOnAirView;
-(void)removeSubviews;
-(void)removeNotifications;
-(void)addNotifications;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MBOfficialHomeNoDataMessageView : MBMessageView {
	UIView* mBoardView;
	UIImageView* mIconImageView;
	UILabel* mMessageLabel;
	float mHeight;
}
+(id)noDataMessageView;
-(void).cxx_destruct;
-(float)height;
-(void)layoutSubviews;
-(void)layout;
-(void)setMessage:(id)message;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBUIViewFullFillLayout : MBBaseLayout {
	NSArray* mSubviews;
}
+(id)createWithSubviews:(id)subviews;
-(void).cxx_destruct;
-(CGSize)preferredSize:(CGSize)size;
-(void)layout;
-(id)initWithSubviews:(id)subviews;
@end

__attribute__((visibility("hidden")))
@interface MBSystemPostHeaderView : MBBaseChildCellView <MBActorObserving> {
	MBActivity* mActivity;
	MBTextLocation* mTextLocation;
	MBProfileImageView* mProfileImageView;
	NMAttributedLabel* mTextView;
	MBTimeLabel* mTimeLabel;
	MBServiceNameButton* mServiceNameButton;
	MBCellAttributedLabelDelegate* mTextViewDelegate;
	MBSystemPostHeaderViewLayout* mSystemPostHeaderViewLayout;
	UILabel* mThemeLabel;
	UIButton* mReadPermissionButton;
	NSMutableAttributedString* mAttributedString;
}
@property(readonly, assign, nonatomic) NSMutableAttributedString* attributedString;
@property(readonly, assign, nonatomic) UIButton* readPermissionButton;
@property(readonly, assign, nonatomic) MBServiceNameButton* serviceNameButton;
@property(readonly, assign, nonatomic) MBTimeLabel* timeLabel;
@property(readonly, assign, nonatomic) NMAttributedLabel* textView;
@property(readonly, assign, nonatomic) MBProfileImageView* profileImageView;
@property(readonly, assign, nonatomic) MBTextLocation* textLocation;
@property(readonly, assign, nonatomic) MBActivity* activity;
+(id)attributedStringWithActivity:(id)activity;
+(float)heightWithType:(int)type activity:(id)activity width:(float)width;
-(void).cxx_destruct;
-(BOOL)render;
-(void)actorDidLoadImage:(id)actor;
-(void)actorDidLoadNickname:(id)actor;
-(void)layoutFromContainer:(CGSize)container margin:(CGPoint)margin;
-(CGSize)sizeFromContainer:(CGSize)container margin:(CGPoint)margin;
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data;
-(CGRect)getServiceNameFrame:(CGSize)frame margin:(CGPoint)margin;
-(void)dealloc;
-(void)setupWithType:(int)type activity:(id)activity;
@end

__attribute__((visibility("hidden")))
@interface NLCallSearchResultTableViewCell : NLCallCommonTableViewCell {
	NLCallUserInfo* mUserInfo;
	NSString* mUserPhoneNumberInputed;
	NLCallImageView* _imageViewProfile;
	UILabel* _labelUserName;
	NMAttributedLabel* _viewPhoneNumber;
	UIView* _viewBottomLine;
}
@property(assign, nonatomic) UIView* viewBottomLine;
@property(assign, nonatomic) NMAttributedLabel* viewPhoneNumber;
@property(assign, nonatomic) UILabel* labelUserName;
@property(assign, nonatomic) NLCallImageView* imageViewProfile;
+(id)viewFromNib;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setUserInfo:(id)info withUserNumberInputed:(id)userNumberInputed;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface NLMyhomeGroup : NSObject {
	int _memberCnt;
	int _orderNo;
	long long _gid;
	long long _memberUpdated;
	long long _syncMemberUpdated;
	NSString* _name;
	NSArray* _members;
}
@property(retain, nonatomic) NSArray* members;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) long long syncMemberUpdated;
@property(assign, nonatomic) long long memberUpdated;
@property(assign, nonatomic) long long gid;
@property(assign, nonatomic) int orderNo;
@property(assign, nonatomic) int memberCnt;
-(void).cxx_destruct;
-(id)initWithData:(id)data members:(id)members name:(id)name;
-(id)initWithPublicGroupObject:(id)publicGroupObject;
-(id)initWithGid:(long long)gid defaultOrderNo:(int)no;
@end

__attribute__((visibility("hidden")))
@interface LALogger : NSObject {
	int _logLevel;
}
@property(assign, nonatomic) int logLevel;
+(id)sharedInstance;
-(id)descriptionOfLogLevel;
-(void)logWithLogLevel:(int)logLevel logFormat:(id)format;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface MyHomeGroupObjectID : NSManagedObjectID {
}
@end

__attribute__((visibility("hidden")))
@interface _MyHomeGroupObject : NSManagedObject {
}
@property(retain, nonatomic) NSSet* members;
@property(assign) long long syncMemberUpdatedValue;
@property(retain, nonatomic) NSNumber* syncMemberUpdated;
@property(assign) short orderNoValue;
@property(retain, nonatomic) NSNumber* orderNo;
@property(retain, nonatomic) NSString* name;
@property(assign) long long memberUpdatedValue;
@property(retain, nonatomic) NSNumber* memberUpdated;
@property(assign) int memberCntValue;
@property(retain, nonatomic) NSNumber* memberCnt;
@property(assign) long long gidValue;
@property(retain, nonatomic) NSNumber* gid;
+(id)keyPathsForValuesAffectingValueForKey:(id)key;
+(id)entityInManagedObjectContext:(id)managedObjectContext;
+(id)entityName;
+(id)insertInManagedObjectContext:(id)managedObjectContext;
-(id)membersSet;
-(void)setPrimitiveSyncMemberUpdatedValue:(long long)value;
-(long long)primitiveSyncMemberUpdatedValue;
-(void)setPrimitiveOrderNoValue:(short)value;
-(short)primitiveOrderNoValue;
-(void)setPrimitiveMemberUpdatedValue:(long long)value;
-(long long)primitiveMemberUpdatedValue;
-(void)setPrimitiveMemberCntValue:(int)value;
-(int)primitiveMemberCntValue;
-(void)setPrimitiveGidValue:(long long)value;
-(long long)primitiveGidValue;
-(id)objectID;
@end

__attribute__((visibility("hidden")))
@interface NLFrameImageView : UIControl {
	UIImageView* _emptyImageView;
	UIImageView* _innerImageView;
	UIImageView* _maskImageView;
	UIButton* _retryButton;
	id _retryTarget;
	SEL _retryAction;
}
@property(assign, nonatomic) SEL retryAction;
@property(retain, nonatomic) id retryTarget;
@property(retain, nonatomic) UIButton* retryButton;
@property(retain, nonatomic) UIImageView* maskImageView;
@property(retain, nonatomic) UIImageView* innerImageView;
@property(retain, nonatomic) UIImageView* emptyImageView;
-(void).cxx_destruct;
-(void)retryTapAction:(id)action;
-(void)layoutSubviews;
-(void)addRetryAction:(SEL)action target:(id)target;
-(void)addTapAction:(SEL)action target:(id)target;
-(void)hideRetryButton;
-(void)showRetryButton;
-(void)setEmptyImage:(id)image borderColor:(id)color;
-(void)setImageBorderColor:(id)color;
-(void)setImageEdgeInsets:(UIEdgeInsets)insets;
-(void)setImageCornerRadius:(float)radius;
-(id)maskImage;
-(void)setMaskImage:(id)image;
-(id)image;
-(void)setImage:(id)image;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MyHomeGroupObject : _MyHomeGroupObject {
}
+(id)insertWithGroup:(id)group inManagedObjectContext:(id)managedObjectContext;
+(id)groupWithMID:(long long)mid inManagedObjectContext:(id)managedObjectContext;
-(id)updateWithMyHomeGroup:(id)myHomeGroup;
@end

__attribute__((visibility("hidden")))
@interface LineAlbumController : NSObject <LineAlbumDataSource, NLProfilePopupViewerDelegate> {
	NLProfilePopupViewer* _profilePopupViewer;
	UIViewController* _viewController;
}
@property(retain, nonatomic) UIViewController* viewController;
@property(retain, nonatomic) NLProfilePopupViewer* profilePopupViewer;
+(void)updateMyProfile;
+(void)updateServerInfo;
+(void)initialize;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)profilePopupViewDidDisappear;
-(void)profilePopupViewer:(id)viewer didSelectButtonItem:(id)item;
-(void)profilePopupViewer:(id)viewer willSelectButtonItem:(id)item;
-(void)showProfilePopupView:(id)view;
-(void)showUserProfileViewWithMID:(id)mid;
-(void)showProfileImageDetailViewWithTitle:(id)title thumbnailSource:(id)source;
-(void)showProfileView:(id)view;
-(id)myProfileView;
-(id)userProfileViewByUser:(id)user;
-(void)determineButtonItemsOfViewer:(id)viewer fromUser:(id)user;
-(void)requestWithUrlRequest:(id)urlRequest requestInfo:(id)info response:(id)response;
-(id)albumNewItemExistNotificationName;
-(void)sendEditImageToLineCamera:(id)lineCamera mid:(id)mid;
-(void)sendImageToOtherChatRoom:(id)otherChatRoom;
-(void)postImageToMyHome:(id)myHome fromViewController:(id)viewController;
-(id)fileURLForStore:(id)store subStore:(id)store2;
-(void)thumbImage:(id)image withResultBlock:(id)resultBlock;
-(int)photoSizeType;
-(BOOL)isJoiningGroup:(id)group;
-(id)myName;
-(id)myMid;
-(void)lineUser:(id)user completionBlock:(id)block;
-(id)groupMembers:(id)members;
-(void)presentAlbumListOfGroup:(id)group object:(id)object presentationStyle:(int)style fromViewController:(id)viewController;
-(void)presentAlbumListOfGroup:(id)group presentationStyle:(int)style fromViewController:(id)viewController;
-(void)resetAccessToken;
-(id)lineAlbumChannelToken;
-(id)lineAccessToken;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
-(void)actionChatRoomMoreMenuWillAppear:(id)actionChatRoomMoreMenu;
-(void)actionAlbumItemExist:(id)exist;
-(void)addObserversForLineNotification;
@end

__attribute__((visibility("hidden")))
@interface LineAlbumScheme : NSObject {
}
+(void)openLineAlbum:(id)album;
+(void)beforeExecuteSchemeWithOptions:(unsigned)options;
+(void)executeSchemeFromURL:(id)url fromSourceApplication:(id)sourceApplication withOptions:(unsigned)options;
+(int)scheme;
+(BOOL)canBeHandledWithURLString:(id)urlstring;
+(id)albumURL;
+(id)lineAlbumScheme;
@end

__attribute__((visibility("hidden")))
@interface NLThemeShopListViewController : NLTableViewController <NLThemeListViewCellDelegate> {
	UIView* _layoutGuide;
	NSDictionary* _sizeCacheForProduct;
	NSArray* _productList;
	NSString* _shopId;
	NSString* _showcaseId;
	int _totalCount;
	UIView* _footerView;
	LineShopBanner* _bannerInfo;
	NLSafeUnretainedObject* _uSelf;
	BOOL _isDownloadingShowcase;
	UILabel* noResultLabel_;
	UIView* headerBase_;
	UIActivityIndicatorView* act_;
	BOOL shouldReloadBanner_;
	BOOL bannerIsReady_;
	LineFileDownload* currentDownload_;
}
-(void).cxx_destruct;
-(void)onTap:(id)tap item:(id)item inCell:(id)cell;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)onTapMyThemeButton:(id)button;
-(void)showNoResultLabelByError;
-(id)headerView;
-(void)loadNext;
-(BOOL)shouldLoadNext;
-(void)setupWithShopId:(id)shopId showcaseId:(id)anId;
-(id)itemSetForIndexPath:(id)indexPath;
-(void)refreshData;
-(void)updateProduct:(id)product;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithShowcaseId:(id)showcaseId;
@end

__attribute__((visibility("hidden")))
@interface NLUniversalEventManager : NSObject {
}
+(void)createDirectoryForURL:(id)url;
+(id)managerFileURL;
+(void)saveRevision;
+(id)eventQueueDictionary;
+(void)setEventWithKey:(id)key event:(id)event;
+(void)updateEvent:(id)event;
+(void)fetchGlobalEventWithNow:(id)now;
+(void)fetchEventIndividual:(id)individual global:(id)global date:(id)date;
+(void)initialize;
+(long long)globalRevision;
+(long long)individualRevision;
@end

__attribute__((visibility("hidden")))
@interface NLUniversalEventFetcher : NSObject {
}
+(void)notificationSticonMetaDataRefresh;
+(void)notificationConfigRefresh;
+(void)notificationCallRateRefresh;
+(void)notificateNoticeRefresh;
+(void)notificateTimelineInfoRefresh;
+(void)notificateConnectionInfoRefresh;
+(void)notificateBadwordsRefresh;
+(void)notificateChannelRefresh;
+(void)notificateThemeShopNew;
+(void)notificateStickerShopNew;
+(void)notificateOfficialNotificationNew;
+(void)notificateMoreTabRefresh;
+(void)notificateTimelineItemDeleted;
+(void)notificateAlbumItemExist;
+(void)notificateNoteOneToOneNewItemExist;
+(void)notificateTimelineBuddyGroupChanged;
+(void)notificateNoteGroupItemExist;
+(void)notificateTimeLineItemExist;
+(void)notificateNotificationItemExist;
+(void)flushNotification;
+(void)enqueueNotification:(id)notification;
+(void)shutDown;
+(void)didEnterBackground:(id)background;
+(void)willEnterForeground:(id)foreground;
+(void)resetFlushTimer;
+(void)startFlushTimer;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface NLChatRoomNewIconManager : NSObject {
	MessageViewController* chat;
}
@property(assign, nonatomic) MessageViewController* messageViewController;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void)didReceiveAlbumUpdatedNotification:(id)notification;
-(void)didReceiveOneToOneNoteUpdatedNotification:(id)oneNoteUpdatedNotification;
-(void)didReceiveGroupBoardUpdatedNotification:(id)notification;
-(void)refreshNewStatusAlbum;
-(void)refreshNewStatusGroupNote;
-(void)refreshNewStatusOneToOneNote;
-(void)refreshNewStatusOfHome;
-(void)tappedMoreMenuButton;
-(BOOL)hasNewIconAlbumOfMoreMenu;
-(BOOL)hasNewIconMoreMenuButton;
-(BOOL)hasNewIconNoteOrHomeButton;
-(void)refreshNewIconForChatRoom;
-(void)removeObserver;
-(void)addObserver;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface NLCallCommonViewController : NLViewController <NLCallMenuEventDelegate, NLCallMenubarDelegate, ABNewPersonViewControllerDelegate, NLCallCountryListDelegate> {
	NLCallNavigationBar* _viewMenuBar;
	UIView* _viewContents;
	NLCallUserInfo* _callTargetUserInfo;
	NLCallMenuCommonViewController* _mCurrentViewController;
	NLCallKeypadViewController* _mKeyPadViewController;
	NLCallHistoryViewController* _mHistoryViewController;
	NLCallAddressViewController* _mAddressViewController;
	NLCallSpotSearchViewController* _mSpotSearchViewController;
	int _mSelectedMenuType;
	CGRect _defaultMenuBarViewRect;
	CGRect _defaultContentsViewRect;
}
@property(assign, nonatomic) CGRect defaultContentsViewRect;
@property(assign, nonatomic) CGRect defaultMenuBarViewRect;
@property(assign, nonatomic) int mSelectedMenuType;
@property(retain, nonatomic) NLCallSpotSearchViewController* mSpotSearchViewController;
@property(retain, nonatomic) NLCallAddressViewController* mAddressViewController;
@property(retain, nonatomic) NLCallHistoryViewController* mHistoryViewController;
@property(retain, nonatomic) NLCallKeypadViewController* mKeyPadViewController;
@property(retain, nonatomic) NLCallMenuCommonViewController* mCurrentViewController;
@property(retain, nonatomic) NLCallUserInfo* callTargetUserInfo;
@property(assign, nonatomic) UIView* viewContents;
@property(assign, nonatomic) NLCallNavigationBar* viewMenuBar;
+(id)initWithNavigationController:(id)navigationController;
+(id)initWithNavigationController;
-(void).cxx_destruct;
-(void)singleTapGestureOnTooltip:(id)tooltip;
-(void)presetingSettingView:(int)view;
-(int)menuTypeBySender:(id)sender;
-(id)viewControllerForMenu:(int)menu;
-(BOOL)isCanUpdateBodyView:(int)view;
-(void)actionMenu:(id)menu event:(id)event;
-(void)updateViewArea:(int)area;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)eventInvoker:(id)invoker dismissWithSelectionInfo:(id)selectionInfo;
-(float)durationToRollbackSearchBar;
-(float)durationToExpandSearchBar;
-(void)rollBackContentsViewRect;
-(void)expandContentsViewRect;
-(void)isExistSearchResult:(id)result withStartFlag:(BOOL)startFlag;
-(void)animationSearchTapped:(id)tapped withStartFlag:(BOOL)startFlag;
-(void)eventInvoker:(id)invoker withEventType:(int)eventType withInfo:(id)info isDirectOpen:(BOOL)open;
-(void)eventInvoker:(id)invoker withEventType:(int)eventType withInfo:(id)info;
-(void)checkDirectViewMenuType;
-(void)initCreditTooltip;
-(void)initBodyViewController;
-(void)initMenuBarArea;
-(void)initViewController;
-(void)dealloc;
-(void)viewDidDisappear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface NLBuddyVideoHeaderView : UIView <UIGestureRecognizerDelegate> {
	BOOL _isFirstPreparedToPlay;
	unsigned _appearType;
	NLBuddyOnAirModel* _onAirModel;
	int _currentOrientation;
	id<NLBuddyVideoHeaderViewDelegate> _delegate;
	unsigned _playbackStatus;
	UIImageView* _titleBgView;
	UILabel* _buddyNameLabel;
	UIImageView* _centerLiveIcon;
	UILabel* _castInfoLabel;
	UILabel* _attendeeCountLabel;
	UIImageView* _divIcon;
	NLActiveHitButton* _videoQualityButton;
	NLActiveHitButton* _closeButton;
	NLActiveHitButton* _rotateButton;
	UILabel* _timeLabel;
	UIImageView* _leftLiveIcon;
	NLGCDTimer* _disappearTimer;
	NLGCDTimer* _playTimer;
}
@property(retain, nonatomic) NLGCDTimer* playTimer;
@property(retain, nonatomic) NLGCDTimer* disappearTimer;
@property(assign, nonatomic) BOOL isFirstPreparedToPlay;
@property(retain, nonatomic) UIImageView* leftLiveIcon;
@property(retain, nonatomic) UILabel* timeLabel;
@property(retain, nonatomic) NLActiveHitButton* rotateButton;
@property(retain, nonatomic) NLActiveHitButton* closeButton;
@property(retain, nonatomic) NLActiveHitButton* videoQualityButton;
@property(retain, nonatomic) UIImageView* divIcon;
@property(retain, nonatomic) UILabel* attendeeCountLabel;
@property(retain, nonatomic) UILabel* castInfoLabel;
@property(retain, nonatomic) UIImageView* centerLiveIcon;
@property(retain, nonatomic) UILabel* buddyNameLabel;
@property(retain, nonatomic) UIImageView* titleBgView;
@property(assign, nonatomic) unsigned playbackStatus;
@property(assign, nonatomic) id<NLBuddyVideoHeaderViewDelegate> delegate;
@property(assign, nonatomic) int currentOrientation;
@property(retain, nonatomic) NLBuddyOnAirModel* onAirModel;
@property(assign, nonatomic) unsigned appearType;
+(id)castInfoLabel;
+(id)videoHeaderView;
-(void).cxx_destruct;
-(void)actionVideoQualityButton;
-(void)actionRotateButton;
-(void)actionCloseButton;
-(void)tappedBuddyVideoHeaderView:(id)view;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)layoutSubviews;
-(void)initVariables;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)layoutBottomAreaWithSize:(CGSize)size;
-(void)layoutTitleSecondLineAreaWithSize:(CGSize)size;
-(void)layoutTitleFirstLineAreaWithSize:(CGSize)size;
-(void)fireTimeLabelTimer;
-(void)fireDisappearTimer;
-(void)didPause;
-(void)didStop;
-(void)didPlay;
-(int)playTime;
-(void)presentCurrentTouchType;
-(void)cancelDisappearTimer;
-(void)resumeOrSuspendPlayTimerWithAppearType:(unsigned)appearType;
-(void)changeMenuType;
-(void)hiddenSubviewsForCurrentAppearType;
-(void)applyModel;
@end

__attribute__((visibility("hidden")))
@interface LAAnalyticsLog : NSObject {
	NSURL* _directoryURL;
	id _sendBlock;
	id _saveLastReportTimeBlock;
	int _nextFileNum;
	NSMutableData* _writerBuffer;
	NSURL* _writerFileURL;
	unsigned _writerFileSize;
	BOOL _reporting;
	double _lastReportTryTime;
	unsigned _reportFailCount;
	NSMutableArray* _fileURLsReadyToBeSent;
	unsigned _maximumLogCount;
	int _maximumLogSize;
	NSDictionary* _thresholdLogLevelsPerCategory;
	double _reportInterval;
	double _lastReportTime;
	double _timestampOffset;
}
@property(assign, nonatomic) double timestampOffset;
@property(retain, nonatomic) NSDictionary* thresholdLogLevelsPerCategory;
@property(assign, nonatomic) int maximumLogSize;
@property(assign, nonatomic) unsigned maximumLogCount;
@property(assign, nonatomic) double lastReportTime;
@property(assign, nonatomic) double reportInterval;
-(void).cxx_destruct;
-(void)_logEventWithIdentifier:(long long)identifier parameters:(id)parameters;
-(void)logEvent:(long long)event;
-(void)sendLogsThatAreReady;
-(void)_rollLog;
-(void)_flushBuffer;
-(void)flush;
-(void)_deleteLogOverflow;
-(void)_loadLogs;
-(BOOL)_isLoaded;
-(unsigned char)logLevelThresholdForCategory:(int)category;
-(id)initWithDirectoryURL:(id)directoryURL sendBlock:(id)block saveLastReportTimeBlock:(id)block3;
@end

@interface AMPAudioPlayer : NSObject {
	AVAudioPlayer* mAudioPlayer;
	BOOL mNeedToVibrate;
	BOOL mPlaying;
}
+(id)sharedAudioPlayer;
-(void)audioPlayerBeginInterruption:(id)interruption;
-(void)audioPlayerDecodeErrorDidOccur:(id)audioPlayerDecodeError error:(id)error;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
-(void)audioPlayerDidFinish:(id)audioPlayer;
-(void)stop;
-(void)playWithContentsOfFile:(id)file style:(int)style;
-(void)playWithContentsOfFile:(id)file loops:(BOOL)loops;
@end

@interface AMPCallEvent : NSObject {
	int mType;
	NSDictionary* mInfo;
}
@property(readonly, assign, nonatomic) NSString* body;
@property(readonly, assign, nonatomic) NSData* statInfo;
@property(readonly, assign, nonatomic) NSString* videoTermTypeString;
@property(readonly, assign, nonatomic) int videoTermType;
@property(readonly, assign, nonatomic) NSString* termTypeString;
@property(readonly, assign, nonatomic) int termType;
@property(readonly, assign, nonatomic) NSString* callDirectionString;
@property(readonly, assign, nonatomic) int callDirection;
@property(readonly, assign, nonatomic) NSString* domain;
@property(readonly, assign, nonatomic) NSString* username;
@property(readonly, assign, nonatomic) NSString* typeString;
@property(readonly, assign, nonatomic) int type;
-(id)infoDictionary;
-(id)description;
-(void)dealloc;
-(id)initWithType:(int)type param:(XXStruct_F9SeBD*)param;
-(void)setupInfoWithParam:(XXStruct_F9SeBD*)param;
@end

@interface AMPDeviceHandler : NSObject {
	CTCallCenter* mCallCenter;
}
-(void)captureDeviceWasDisconnected:(id)disconnected;
-(void)captureDeviceWasConnected:(id)connected;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)dealloc;
-(id)init;
@end

@interface AMPGLContext : NSObject {
	EAGLContext* mOpenGLContext;
}
-(void)performBlock:(id)block;
-(BOOL)supportsExtension:(id)extension;
-(id)openGLContext;
-(void)dealloc;
-(id)initWithOpenGLContext:(id)openGLContext;
@end

@interface AMPGLRectMesh : AMPGLMesh {
	CGRect mRect;
	CGRect mTexCoord;
	BOOL mFlipHoriz;
	BOOL mFlipVert;
}
-(id)initWithRect:(CGRect)rect texCoord:(CGRect)coord flipHoriz:(BOOL)horiz flipVert:(BOOL)vert context:(id)context;
@end

@interface AMPGLMesh : NSObject <NSCopying, NSMutableCopying, AMPGLDrawable> {
	AMPGLContext* mContext;
	XXStruct_ha8rUD* mVertices;
	int mVertexCount;
	unsigned mBufferObjectID;
	unsigned mArrayObjectID;
}
@property(readonly, assign, nonatomic) XXStruct_ha8rUD* vertices;
@property(readonly, assign, nonatomic) int vertexCount;
+(id)meshWithRect:(CGRect)rect texCoord:(CGRect)coord flipHoriz:(BOOL)horiz flipVert:(BOOL)vert context:(id)context;
+(id)meshWithRect:(CGRect)rect texCoord:(CGRect)coord context:(id)context;
+(id)meshWithRect:(CGRect)rect context:(id)context;
-(void)draw;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)bind;
-(XXStruct_zTWGjB)vertexColorAtIndex:(int)index;
-(CGPoint)vertexTexCoordAtIndex:(int)index;
-(XXStruct_NwkmQC)vertexPositionAtIndex:(int)index;
-(void)getVertices:(XXStruct_ha8rUD*)vertices range:(NSRange)range;
-(id)description;
-(void)dealloc;
-(id)initWithMesh:(id)mesh context:(id)context;
-(id)initWithVerticesNoCopy:(XXStruct_ha8rUD*)verticesNoCopy count:(int)count context:(id)context;
-(id)initWithVertices:(XXStruct_ha8rUD*)vertices count:(int)count context:(id)context;
@end

@interface AMPGLMutableMesh : AMPGLMesh {
}
-(void)draw;
-(id)copyWithZone:(NSZone*)zone;
-(void)removeLastVerticesWithCount:(int)count;
-(void)removeLastVertex;
-(void)addVertices:(XXStruct_ha8rUD*)vertices count:(int)count;
-(void)addVertex:(XXStruct_ha8rUD)vertex;
-(void)setVertexColor:(XXStruct_zTWGjB)color atIndex:(int)index;
-(void)setVertexColors:(XXStruct_zTWGjB*)colors;
-(void)setVertexTexCoord:(CGPoint)coord atIndex:(int)index;
-(void)setVertexTexCoords:(CGPoint*)coords;
-(void)setVertexPosition:(XXStruct_NwkmQC)position atIndex:(int)index;
-(void)setVertexPositions:(XXStruct_NwkmQC*)positions;
-(void)bind;
-(void)setupVertexArrayObject;
-(void)setupVertexBufferObject;
@end

@interface AMPGLProgram : NSObject {
	AMPGLContext* mContext;
	unsigned mHandle;
	NSMutableArray* mShaders;
}
@property(readonly, assign, nonatomic) NSArray* shaders;
@property(readonly, assign, nonatomic) unsigned handle;
-(void)use;
-(void)validate;
-(void)link;
-(int)uniformLocationForName:(id)name;
-(void)bindAttributeLocation:(unsigned)location forName:(id)name;
-(int)attributeLocationForName:(id)name;
-(void)detachShader:(id)shader;
-(void)attachShader:(id)shader;
-(void)dealloc;
-(id)initWithContext:(id)context;
-(id)infoLog;
@end

@interface AMPGLShader : NSObject {
	AMPGLContext* mContext;
	unsigned mHandle;
}
@property(readonly, assign, nonatomic) unsigned handle;
+(id)shaderWithString:(id)string type:(unsigned)type context:(id)context;
+(id)shaderWithPath:(id)path type:(unsigned)type context:(id)context;
-(void)dealloc;
-(id)initWithString:(id)string type:(unsigned)type context:(id)context;
-(void)compileShaderWithString:(id)string type:(unsigned)type;
-(id)infoLog;
@end

@interface AMPGLTexture_32BGRA : AMPGLTexture {
	unsigned mHandle;
	int mWidth;
	int mHeight;
	BOOL mHasImage;
}
-(BOOL)hasImage;
-(void)bind:(unsigned*)bind;
-(void)setImageBuffer:(const void*)buffer;
-(void)setImageWidth:(int)width height:(int)height;
-(void)dealloc;
-(id)initWithContext:(id)context;
@end

@interface AMPGLTexture_I420 : AMPGLTexture {
	unsigned mHandle[3];
	int mWidth;
	int mHeight;
	BOOL mHasImage;
}
-(BOOL)hasImage;
-(void)bind:(unsigned*)bind;
-(void)setImageBuffer:(const void*)buffer;
-(void)setImageWidth:(int)width height:(int)height;
-(void)dealloc;
-(id)initWithContext:(id)context;
@end

@interface AMPGLTexture_NV12 : AMPGLTexture {
	unsigned mHandle[2];
	int mWidth;
	int mHeight;
	BOOL mHasImage;
}
-(BOOL)hasImage;
-(void)bind:(unsigned*)bind;
-(void)setImageBuffer:(const void*)buffer;
-(void)setImageWidth:(int)width height:(int)height;
-(void)dealloc;
-(id)initWithContext:(id)context;
@end

@interface AMPGLTexture : NSObject {
	AMPGLContext* mContext;
}
+(id)textureWithPixelFormat:(id)pixelFormat context:(id)context;
+(BOOL)usesOpenGLTextureFormatRG;
+(void)initialize;
-(BOOL)hasImage;
-(void)bind:(unsigned*)bind;
-(void)setImageBuffer:(const void*)buffer;
-(void)setImageWidth:(int)width height:(int)height;
-(void)dealloc;
-(id)initWithContext:(id)context;
@end

@interface AMPManager : NSObject {
}
+(id)AMPKitRevision;
+(id)AMPKitVersion;
+(void)logStatisticsWithURL:(id)url statInfo:(id)info;
+(void)logTimestamp:(int)timestamp;
+(id)currentSession;
+(id)connectToService:(int)service userInfo:(id)info options:(id)options error:(id*)error;
+(id)respondToCallWithUserInfo:(id)userInfo options:(id)options error:(id*)error;
+(id)makeCallWithName:(id)name userInfo:(id)info options:(id)options error:(id*)error;
+(int)sessionStatus;
+(int)systemStatus;
+(void)sleep;
+(void)setLogLevel:(int)level;
+(int)logLevel;
+(void)setOutputVolume:(int)volume;
+(int)outputVolume;
+(void)disableDownyMode;
+(void)enableDownyModeDynamic;
+(void)enableDownyModeNegotiation;
+(void)setConnFailToneFilePath:(id)path;
+(id)connFailToneFilePath;
+(void)setDisconnectToneFilePath:(id)path;
+(id)disconnectToneFilePath;
+(void)setRingbackTonePSTNFilePath:(id)path;
+(void)setRingbackToneFilePath:(id)path;
+(id)ringbackToneFilePath;
+(void)setRingToneFilePath:(id)path;
+(id)ringToneFilePath;
+(BOOL)setApplicationDataWithType:(int)type field:(id)field value:(id)value error:(id*)error;
+(void)stop;
+(BOOL)startWithDeviceKey:(id)deviceKey error:(id*)error;
+(BOOL)isVideoAvailable;
+(BOOL)isVoiceAvailable;
+(id)deviceHandler;
+(void)reachabilityEventReceived:(int)received param:(void*)param;
+(void)setCurrentSession:(id)session;
+(void)setupCapabilities;
+(void)setupVideoResolution;
+(void)setupCarrierInformation;
+(void)setupDeviceInformation;
+(void)setupOperatingSystemInformation;
+(void)setupCrashReporter;
+(void)setupConfigFilePath;
+(id)configFilePath;
@end

@interface AMPSession : NSObject {
	NSDictionary* mOptions;
	BOOL mAudioOpened;
	BOOL mConnected;
	BOOL mServiceAvailable;
	BOOL mDisconnected;
}
@property(readonly, assign, nonatomic) NSString* videoCodecStatistics;
@property(readonly, assign, nonatomic) int videoQuality;
@property(readonly, assign, nonatomic) int recLevel;
@property(readonly, assign, nonatomic) int playLevel;
@property(readonly, assign, nonatomic) int quality;
@property(readonly, assign, nonatomic) double duration;
@property(readonly, assign, nonatomic) int sessionStatus;
@property(assign, nonatomic) int videoCaptureInterfaceOrientation;
@property(retain, nonatomic) AMPVideoRenderView* videoPeerRenderView;
@property(retain, nonatomic) AMPVideoRenderView* videoCaptureRenderView;
@property(retain, nonatomic) AMPVideoCaptureDevice* videoCaptureDevice;
@property(assign, nonatomic, getter=isVideoInterrupted) BOOL videoInterrupted;
@property(assign, nonatomic, getter=isVideoPaused) BOOL videoPaused;
@property(readonly, assign, nonatomic, getter=isVideoPeerInterrupted) BOOL videoPeerInterrupted;
@property(readonly, assign, nonatomic, getter=isVideoPeerPaused) BOOL videoPeerPaused;
@property(readonly, assign, nonatomic, getter=isVideoConnected) BOOL videoConnected;
@property(readonly, assign, nonatomic, getter=isVideoReady) BOOL videoReady;
@property(assign, nonatomic, getter=isMuted) BOOL muted;
@property(assign, nonatomic) int speakerMode;
@property(readonly, assign, nonatomic, getter=isServiceAvailable) BOOL serviceAvailable;
@property(readonly, assign, nonatomic, getter=isConnected) BOOL connected;
@property(readonly, assign, nonatomic, getter=isVideoSupported) BOOL videoSupported;
@property(readonly, assign, nonatomic) NSDictionary* options;
@property(assign, nonatomic) id<AMPSessionDelegate> delegate;
-(int)videoCaptureRotation;
-(BOOL)disconnectAndWaitWithReason:(int)reason error:(id*)error;
-(BOOL)disconnectWithReason:(int)reason error:(id*)error;
-(BOOL)disconnect:(id*)disconnect;
-(void)setOptions:(id)options;
-(void)closeAudio;
-(void)openAudio;
-(void)resetAudioRoute;
-(void)dealloc;
-(id)initWithOptions:(id)options;
-(id)defaultOptions;
@end

@interface AMPCallSession_TinyAMP : AMPCallSession {
	TinyAmpCallHandle* mCallHandle;
	int mVideoCaptureInterfaceOrientation;
	BOOL mVideoReady;
	BOOL mVideoConnected;
	BOOL mVideoPaused;
	BOOL mVideoInterrupted;
	AMPVideoRenderView* mVideoCaptureRenderView;
	AMPVideoRenderView* mVideoPeerRenderView;
}
-(void)applicationDidBecomeActive:(id)application;
-(id)videoCodecStatistics;
-(int)videoQuality;
-(int)recLevel;
-(int)playLevel;
-(int)quality;
-(double)duration;
-(int)sessionStatus;
-(void)setAudioRoute:(int)route;
-(int)lastAudioRoute;
-(void)setVideoPeerRenderView:(id)view;
-(id)videoPeerRenderView;
-(void)setVideoCaptureRenderView:(id)view;
-(id)videoCaptureRenderView;
-(void)setVideoCaptureInterfaceOrientation:(int)orientation;
-(int)videoCaptureInterfaceOrientation;
-(int)videoCaptureRotation;
-(void)setVideoCaptureDevice:(id)device;
-(id)videoCaptureDevice;
-(void)setVideoInterrupted:(BOOL)interrupted;
-(BOOL)isVideoInterrupted;
-(void)setVideoPaused:(BOOL)paused;
-(BOOL)isVideoPaused;
-(BOOL)isVideoPeerInterrupted;
-(BOOL)isVideoPeerPaused;
-(BOOL)isVideoConnected;
-(BOOL)isVideoReady;
-(BOOL)stopVideoWithReason:(int)reason error:(id*)error;
-(BOOL)stopVideo:(id*)video;
-(BOOL)startVideo:(id*)video;
-(BOOL)mixWaveFileAtPath:(id)path repeat:(int)repeat error:(id*)error;
-(void)setMuted:(BOOL)muted;
-(BOOL)isMuted;
-(BOOL)cancelWithCallKey:(id)callKey deviceKey:(id)key reason:(id)reason error:(id*)error;
-(BOOL)disconnectWithReason:(int)reason error:(id*)error;
-(BOOL)disconnect:(id*)disconnect;
-(BOOL)acceptWithOptions:(id)options error:(id*)error;
-(BOOL)accept:(id*)accept;
-(BOOL)isVideoSupported;
-(void)dealloc;
-(id)initWithOptions:(id)options;
-(unsigned)interruptionTolerance;
-(int)respondToCallWithUserInfo:(id)userInfo;
-(int)makeCallWithName:(id)name userInfo:(id)info;
-(void)reachabilityEventReceived:(int)received param:(void*)param;
-(void)logTimestamp:(int)timestamp;
-(void)didReceiveCallEvent:(int)event param:(XXStruct_F9SeBD*)param;
@end

@interface AMPUserInfo : NSObject {
	XXStruct_vZMKvD mUserInfo;
}
@property(copy, nonatomic) NSString* logURL;
@property(assign, nonatomic) unsigned port;
@property(copy, nonatomic) NSString* proxy;
@property(copy, nonatomic) NSString* domain;
@property(copy, nonatomic) NSString* password;
@property(copy, nonatomic) NSString* username;
-(XXStruct_vZMKvD*)userInfo;
-(id)description;
@end

@interface AMPVideoCapture : NSObject {
	/*function-pointer*/ void* mCallback;
	void* mContext;
	int mOpenCount;
	char* mBuffer;
	int mBufferSize;
	int mWidth;
	int mHeight;
	int mRotation;
}
+(id)sharedVideoCapture;
+(void)switchCaptureDevice:(id)device fallback:(id)fallback;
+(void)setDefaultCaptureDevice:(id)device;
+(id)defaultCaptureDevice;
+(id)deviceWithUniqueID:(id)uniqueID;
+(id)availableDevices;
+(void)refreshAvailableDevices;
+(id)collectAvailableDevices;
+(void)initialize;
-(void)postErrorReportNotificationWithCode:(int)code underlyingError:(id)error;
-(BOOL)isRunningWithDevice:(id)device;
-(BOOL)isRunning;
-(void)stopRunning;
-(void)startRunning;
-(void)setCallback:(/*function-pointer*/ void*)callback context:(void*)context;
-(void*)context;
-(/*function-pointer*/ void*)callback;
-(void)setRotation:(int)rotation;
-(int)rotation;
-(void)setMaximumFrameRate:(int)rate;
-(int)maximumFrameRate;
-(void)setPreset:(id)preset;
-(id)preset;
-(void)setDevice:(id)device;
-(id)device;
-(void)commitConfiguration;
-(void)beginConfiguration;
-(BOOL)isOpened;
-(void)closeInternal;
-(void)openInternal;
-(void)close;
-(void)open;
@end

@interface AMPTonePlayer : NSObject {
	AMPTonePlayerIvars* m;
}
-(void)stopTone;
-(void)playTone:(id)tone;
-(void)playToneWithChar:(BOOL)aChar;
-(void)destroyToneGen;
-(void)createToneGen;
-(void)dealloc;
-(id)init;
@end

@interface AMPVideoCapture_AV : AMPVideoCapture {
	AVCaptureSession* mSession;
	AVCaptureDeviceInput* mInput;
	AVCaptureVideoDataOutput* mOutput;
	int mMaxFrameRate;
	BOOL mErrorStopped;
}
+(id)collectAvailableDevices;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)captureSessionRuntimeError:(id)error;
-(void)captureSessionInterruptionEnded:(id)ended;
-(void)captureSessionWasInterrupted:(id)interrupted;
-(void)captureSessionDidStopRunning:(id)captureSession;
-(void)captureSessionDidStartRunning:(id)captureSession;
-(BOOL)isRunningWithDevice:(id)device;
-(BOOL)isRunning;
-(void)stopRunning;
-(void)startRunning;
-(void)setMaximumFrameRate:(int)rate;
-(int)maximumFrameRate;
-(void)setPreset:(id)preset;
-(id)preset;
-(void)setDevice:(id)device;
-(id)device;
-(void)commitConfiguration;
-(void)beginConfiguration;
-(void)closeInternal;
-(void)openInternal;
@end

@interface AMPVideoRenderView : UIView {
	AMPVideoRenderViewIvars* m;
	CGSize mContentSize;
	CGRect mContentBounds;
}
@property(readonly, assign, nonatomic) CGRect contentBounds;
@property(readonly, assign, nonatomic) CGSize contentSize;
@property(retain, nonatomic) UIColor* blendColor;
+(void)applicationDidBecomeActive:(id)application;
+(Class)layerClass;
+(void)displayAll:(id)all;
+(void)initialize;
+(void)load;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)willMoveToWindow:(id)window;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)display;
-(CGRect)contentRect;
-(void)setContentMode:(int)mode;
-(CGRect)convertRectToBacking:(CGRect)backing;
-(CGRect)convertRectFromBacking:(CGRect)backing;
-(CGRect)backingBounds;
-(void)setupViewport;
-(void)clearRenderBuffer;
-(void)deleteRenderBuffer;
-(void)setupRenderBuffer;
-(void)disposeOpenGL;
-(void)setupOpenGL;
-(void)displayIt;
-(void)removeFromDisplayLoop;
-(void)addToDisplayLoop;
-(void)clear;
-(void)renderWithBuffer:(const void*)buffer size:(int)size width:(int)width height:(int)height mirrored:(BOOL)mirrored orientation:(int)orientation;
-(void)reshape;
-(void)render;
-(void)contentGeometryChanged;
-(void)setupMatrix;
-(void)setupMesh;
-(void)setupTexture;
-(void)setupProgram;
-(void)setupAll;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

@interface AMPNetworkReachability : NSObject {
}
+(void)stop;
+(void)start;
+(void)startObserving;
+(void)removeObserver:(id)observer;
+(void)addObserver:(id)observer selector:(SEL)selector;
+(void)initialize;
@end

@interface AMPVideoCaptureDevice : NSObject {
}
@property(readonly, assign, nonatomic) BOOL canCapture;
@property(readonly, assign, nonatomic) NSArray* supportedPresets;
@property(readonly, assign, nonatomic) int position;
@property(readonly, assign, nonatomic) NSString* uniqueID;
@property(readonly, assign, nonatomic) NSString* name;
+(id)availableDevices;
-(id)description;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
@end

@interface AMPAudioDevice : NSObject {
	int mOpenCount;
	NSString* mSavedCategory;
	NSString* mSavedMode;
	BOOL mReceivingAudioSessionEvents;
	BOOL mActivatedAudioSession;
	BOOL mActivatedVoIPAudioSession;
	int mCurrentOutputRoute;
	unsigned mDefaultInterruptionTolerance;
	float mPreferredIOBufferDuration;
	BOOL mPreferredUsesVoiceProcessingIO;
	BOOL mOverrideSpeaker;
	BOOL mMixWithOthers;
	BOOL mVideoChatMode;
	OpaqueAudioComponentInstance* mInstance;
	int mInterruptSeq;
	BOOL mInterrupted;
	BOOL mStarted;
	BOOL _overrideSpeaker;
}
@property(readonly, assign, nonatomic) int speakerMode;
@property(readonly, assign, nonatomic) int currentOutputRoute;
@property(assign, nonatomic, getter=isVideoChatMode) BOOL videoChatMode;
@property(assign, nonatomic, getter=isMixWithOthers) BOOL mixWithOthers;
@property(assign, nonatomic, getter=isOverrideSpeaker) BOOL overrideSpeaker;
@property(readonly, assign, nonatomic) float outputLatency;
@property(readonly, assign, nonatomic) float inputLatency;
@property(readonly, assign, nonatomic) float IOBufferDuration;
@property(assign, nonatomic) float preferredIOBufferDuration;
@property(readonly, assign, nonatomic) BOOL usesVoiceProcessingIO;
@property(assign, nonatomic) BOOL preferredUsesVoiceProcessingIO;
@property(assign, nonatomic) unsigned defaultInterruptionTolerance;
+(id)sharedAudioDevice;
+(void)initialize;
+(void)load;
-(void)endInterruptionWithFlags:(unsigned)flags;
-(void)beginInterruption;
-(void)audioSessionMediaServicesWereReset:(id)reset;
-(void)audioSessionRouteChange:(id)change;
-(void)audioSessionInterruption:(id)interruption;
-(void)outputRouteChangedWithReason:(unsigned)reason oldRoute:(int)route newRoute:(int)route3;
-(void)postAudioRouteChangeReport;
-(long)render:(unsigned*)render timestamp:(const AudioTimeStamp*)timestamp bus:(unsigned long)bus frames:(unsigned long)frames bufferList:(AudioBufferList*)list;
-(long)stopAudioUnit;
-(long)startAudioUnit;
-(void)disposeAudioUnit;
-(long)createAudioUnitWithStreamDescription:(AudioStreamBasicDescription*)streamDescription inputCallback:(/*function-pointer*/ void*)callback outputCallback:(/*function-pointer*/ void*)callback3 context:(void*)context;
-(BOOL)overrideSpeaker;
-(void)deactivateAudioSession;
-(void)activateAudioSession;
-(void)prepareAudioSession;
-(void)configureAudioSession;
-(void)endReceivingAudioSessionEvents;
-(void)beginReceivingAudioSessionEvents;
-(void)prepareAudioSessionForKeyTone;
-(void)close;
-(void)open;
-(void)restoreAudioSessionState;
-(void)saveAudioSessionState;
@end

@interface AMPGLRenderBuffer : NSObject {
	AMPGLContext* mContext;
	unsigned mColorBuffer;
	unsigned mFrameBuffer;
	int mWidth;
	int mHeight;
}
@property(readonly, assign, nonatomic) int height;
@property(readonly, assign, nonatomic) int width;
-(void)flush;
-(void)bind;
-(void)dealloc;
-(id)initWithContext:(id)context layer:(id)layer;
@end

@interface AMPServiceSession_OnAir : AMPServiceSession {
	int mVideoCaptureInterfaceOrientation;
	BOOL mVideoReady;
	BOOL mVideoConnected;
	BOOL mVideoPaused;
	BOOL mVideoInterrupted;
	AMPVideoRenderView* mVideoCaptureRenderView;
}
-(void)applicationDidBecomeActive:(id)application;
-(id)videoCodecStatistics;
-(int)videoQuality;
-(int)recLevel;
-(int)playLevel;
-(int)quality;
-(double)duration;
-(int)sessionStatus;
-(void)setAudioRoute:(int)route;
-(int)lastAudioRoute;
-(void)setVideoCaptureRenderView:(id)view;
-(id)videoCaptureRenderView;
-(void)setVideoCaptureInterfaceOrientation:(int)orientation;
-(int)videoCaptureInterfaceOrientation;
-(int)videoCaptureRotation;
-(void)setVideoCaptureDevice:(id)device;
-(id)videoCaptureDevice;
-(void)setVideoInterrupted:(BOOL)interrupted;
-(BOOL)isVideoInterrupted;
-(void)setVideoPaused:(BOOL)paused;
-(BOOL)isVideoPaused;
-(BOOL)isVideoConnected;
-(BOOL)isVideoReady;
-(void)setMuted:(BOOL)muted;
-(BOOL)isMuted;
-(BOOL)disconnectWithReason:(int)reason error:(id*)error;
-(BOOL)disconnect:(id*)disconnect;
-(BOOL)isVideoSupported;
-(void)dealloc;
-(id)initWithOptions:(id)options;
-(int)connectToServiceWithType:(int)type userInfo:(id)info;
-(void)didReceiveServiceEvent:(int)event param:(XXStruct_1LNtyB*)param;
@end

@interface AMPServiceEvent : NSObject {
	int mType;
	NSDictionary* mInfo;
}
@property(readonly, assign, nonatomic) NSData* statInfo;
@property(readonly, assign, nonatomic) NSString* termTypeString;
@property(readonly, assign, nonatomic) int termType;
@property(readonly, assign, nonatomic) NSString* serviceTypeString;
@property(readonly, assign, nonatomic) int serviceType;
@property(readonly, assign, nonatomic) NSString* domain;
@property(readonly, assign, nonatomic) NSString* username;
@property(readonly, assign, nonatomic) NSString* typeString;
@property(readonly, assign, nonatomic) int type;
-(id)infoDictionary;
-(id)description;
-(void)dealloc;
-(id)initWithType:(int)type param:(XXStruct_1LNtyB*)param;
-(void)setupInfoWithParam:(XXStruct_1LNtyB*)param;
@end

@interface AMPCallSession : AMPSession {
	id<AMPCallSessionDelegate> mDelegate;
	int mDirection;
}
@property(readonly, assign, nonatomic) int direction;
@property(readonly, assign, nonatomic, getter=isDTMFSupported) BOOL DTMFSupported;
@property(assign, nonatomic) id<AMPCallSessionDelegate> delegate;
+(id)responseSessionWithUserInfo:(id)userInfo options:(id)options error:(id*)error;
+(id)callSessionWithName:(id)name userInfo:(id)info options:(id)options error:(id*)error;
+(id)sessionWithOptions:(id)options;
-(BOOL)stopVideoWithReason:(int)reason error:(id*)error;
-(BOOL)stopVideo:(id*)video;
-(BOOL)startVideo:(id*)video;
-(BOOL)mixWaveFileAtPath:(id)path repeat:(int)repeat error:(id*)error;
-(void)sendDTMF:(id)dtmf;
-(BOOL)cancelWithCallKey:(id)callKey deviceKey:(id)key reason:(id)reason error:(id*)error;
-(BOOL)acceptWithOptions:(id)options error:(id*)error;
-(BOOL)accept:(id*)accept;
-(id)defaultOptions;
@end

@interface AMPServiceSession : AMPSession {
	id<AMPServiceSessionDelegate> mDelegate;
	int mType;
	AmpSvc* mSvcHandle;
}
@property(readonly, assign, nonatomic) int type;
@property(assign, nonatomic) id<AMPServiceSessionDelegate> delegate;
+(id)serviceSessionWithType:(int)type userInfo:(id)info options:(id)options error:(id*)error;
+(id)sessionWithType:(int)type userInfo:(id)info options:(id)options;
-(void)reachabilityEventReceived:(int)received param:(void*)param;
-(void)logTimestamp:(int)timestamp;
-(void)didReceiveServiceEvent:(int)event param:(XXStruct_1LNtyB*)param;
@end

@interface AMPCallSession_StdAMP : AMPCallSession {
	StdAmpCallHandle* mCallHandle;
	int mVideoCaptureInterfaceOrientation;
	BOOL mVideoReady;
	BOOL mVideoConnected;
	BOOL mVideoPaused;
	BOOL mVideoInterrupted;
	AMPVideoRenderView* mVideoCaptureRenderView;
	AMPVideoRenderView* mVideoPeerRenderView;
}
-(void)applicationDidBecomeActive:(id)application;
-(id)videoCodecStatistics;
-(int)videoQuality;
-(int)recLevel;
-(int)playLevel;
-(int)quality;
-(double)duration;
-(int)sessionStatus;
-(void)setAudioRoute:(int)route;
-(int)lastAudioRoute;
-(void)setVideoPeerRenderView:(id)view;
-(id)videoPeerRenderView;
-(void)setVideoCaptureRenderView:(id)view;
-(id)videoCaptureRenderView;
-(void)setVideoCaptureInterfaceOrientation:(int)orientation;
-(int)videoCaptureInterfaceOrientation;
-(int)videoCaptureRotation;
-(void)setVideoCaptureDevice:(id)device;
-(id)videoCaptureDevice;
-(void)setVideoInterrupted:(BOOL)interrupted;
-(BOOL)isVideoInterrupted;
-(void)setVideoPaused:(BOOL)paused;
-(BOOL)isVideoPaused;
-(BOOL)isVideoPeerInterrupted;
-(BOOL)isVideoPeerPaused;
-(BOOL)isVideoConnected;
-(BOOL)isVideoReady;
-(BOOL)stopVideoWithReason:(int)reason error:(id*)error;
-(BOOL)stopVideo:(id*)video;
-(BOOL)startVideo:(id*)video;
-(BOOL)mixWaveFileAtPath:(id)path repeat:(int)repeat error:(id*)error;
-(void)sendDTMF:(id)dtmf;
-(void)setMuted:(BOOL)muted;
-(BOOL)isMuted;
-(BOOL)cancelWithCallKey:(id)callKey deviceKey:(id)key reason:(id)reason error:(id*)error;
-(BOOL)disconnectWithReason:(int)reason error:(id*)error;
-(BOOL)disconnect:(id*)disconnect;
-(BOOL)acceptWithOptions:(id)options error:(id*)error;
-(BOOL)accept:(id*)accept;
-(BOOL)isDTMFSupported;
-(BOOL)isVideoSupported;
-(void)dealloc;
-(id)initWithOptions:(id)options;
-(int)respondToCallWithUserInfo:(id)userInfo;
-(int)makeCallWithName:(id)name userInfo:(id)info;
-(void)reachabilityEventReceived:(int)received param:(void*)param;
-(void)logTimestamp:(int)timestamp;
-(void)didReceiveCallEvent:(int)event param:(XXStruct_F9SeBD*)param;
@end

@interface AMPPLCrashReport : NSObject {
	PLCrashReportDecoder* _decoder;
	AMPPLCrashReportSystemInfo* _systemInfo;
	AMPPLCrashReportMachineInfo* _machineInfo;
	AMPPLCrashReportApplicationInfo* _applicationInfo;
	AMPPLCrashReportProcessInfo* _processInfo;
	AMPPLCrashReportSignalInfo* _signalInfo;
	NSArray* _threads;
	NSArray* _images;
	AMPPLCrashReportExceptionInfo* _exceptionInfo;
}
@property(readonly, assign, nonatomic) AMPPLCrashReportExceptionInfo* exceptionInfo;
@property(readonly, assign, nonatomic) BOOL hasExceptionInfo;
@property(readonly, assign, nonatomic) NSArray* images;
@property(readonly, assign, nonatomic) NSArray* threads;
@property(readonly, assign, nonatomic) AMPPLCrashReportSignalInfo* signalInfo;
@property(readonly, assign, nonatomic) AMPPLCrashReportProcessInfo* processInfo;
@property(readonly, assign, nonatomic) BOOL hasProcessInfo;
@property(readonly, assign, nonatomic) AMPPLCrashReportApplicationInfo* applicationInfo;
@property(readonly, assign, nonatomic) AMPPLCrashReportMachineInfo* machineInfo;
@property(readonly, assign, nonatomic) BOOL hasMachineInfo;
@property(readonly, assign, nonatomic) AMPPLCrashReportSystemInfo* systemInfo;
-(id)imageForAddress:(unsigned long long)address;
-(void)dealloc;
-(id)initWithData:(id)data error:(id*)error;
-(id)extractSignalInfo:(Plcrash__CrashReport__Signal*)info error:(id*)error;
-(id)extractExceptionInfo:(Plcrash__CrashReport__Exception*)info error:(id*)error;
-(id)extractImageInfo:(Plcrash__CrashReport*)info error:(id*)error;
-(id)extractThreadInfo:(Plcrash__CrashReport*)info error:(id*)error;
-(id)extractStackFrameInfo:(Plcrash__CrashReport__Thread__StackFrame*)info error:(id*)error;
-(id)extractProcessInfo:(Plcrash__CrashReport__ProcessInfo*)info error:(id*)error;
-(id)extractApplicationInfo:(Plcrash__CrashReport__ApplicationInfo*)info error:(id*)error;
-(id)extractMachineInfo:(Plcrash__CrashReport__MachineInfo*)info error:(id*)error;
-(id)extractProcessorInfo:(Plcrash__CrashReport__Processor*)info error:(id*)error;
-(id)extractSystemInfo:(Plcrash__CrashReport__SystemInfo*)info error:(id*)error;
-(Plcrash__CrashReport*)decodeCrashData:(id)data error:(id*)error;
@end

@interface AMPPLCrashReportApplicationInfo : NSObject {
	NSString* _applicationIdentifier;
	NSString* _applicationVersion;
}
@property(readonly, assign, nonatomic) NSString* applicationVersion;
@property(readonly, assign, nonatomic) NSString* applicationIdentifier;
-(void)dealloc;
-(id)initWithApplicationIdentifier:(id)applicationIdentifier applicationVersion:(id)version;
@end

@interface AMPPLCrashReportBinaryImageInfo : NSObject {
	AMPPLCrashReportProcessorInfo* _processorInfo;
	unsigned long long _baseAddress;
	unsigned long long _imageSize;
	NSString* _imageName;
	BOOL _hasImageUUID;
	NSString* _imageUUID;
}
@property(readonly, assign, nonatomic) NSString* imageUUID;
@property(readonly, assign, nonatomic) BOOL hasImageUUID;
@property(readonly, assign, nonatomic) NSString* imageName;
@property(readonly, assign, nonatomic) unsigned long long imageSize;
@property(readonly, assign, nonatomic) unsigned long long imageBaseAddress;
@property(readonly, assign, nonatomic) AMPPLCrashReportProcessorInfo* codeType;
-(void)dealloc;
-(id)initWithCodeType:(id)codeType baseAddress:(unsigned long long)address size:(unsigned long long)size name:(id)name uuid:(id)uuid;
@end

@interface AMPPLCrashReporter : NSObject {
	BOOL _enabled;
	NSString* _applicationIdentifier;
	NSString* _applicationVersion;
	NSString* _crashReportDirectory;
}
+(id)sharedReporter;
+(void)initialize;
-(void)setCrashCallbacks:(PLCrashReporterCallbacks*)callbacks;
-(id)generateLiveReportAndReturnError:(id*)error;
-(id)generateLiveReport;
-(BOOL)enableCrashReporterAndReturnError:(id*)error;
-(BOOL)enableCrashReporter;
-(BOOL)purgePendingCrashReportAndReturnError:(id*)error;
-(BOOL)purgePendingCrashReport;
-(id)loadPendingCrashReportDataAndReturnError:(id*)error;
-(id)loadPendingCrashReportData;
-(BOOL)hasPendingCrashReport;
-(id)crashReportPath;
-(id)queuedCrashReportDirectory;
-(id)crashReportDirectory;
-(BOOL)populateCrashReportDirectoryAndReturnError:(id*)error;
-(void)dealloc;
-(id)initWithBundle:(id)bundle;
-(id)initWithApplicationIdentifier:(id)applicationIdentifier appVersion:(id)version;
@end

@interface AMPPLCrashReportExceptionInfo : NSObject {
	NSString* _name;
	NSString* _reason;
	NSArray* _stackFrames;
}
@property(readonly, assign, nonatomic) NSArray* stackFrames;
@property(readonly, assign, nonatomic) NSString* exceptionReason;
@property(readonly, assign, nonatomic) NSString* exceptionName;
-(void)dealloc;
-(id)initWithExceptionName:(id)exceptionName reason:(id)reason stackFrames:(id)frames;
-(id)initWithExceptionName:(id)exceptionName reason:(id)reason;
@end

@interface AMPPLCrashReportMachineInfo : NSObject {
	NSString* _modelName;
	AMPPLCrashReportProcessorInfo* _processorInfo;
	unsigned _processorCount;
	unsigned _logicalProcessorCount;
}
@property(readonly, assign, nonatomic) unsigned logicalProcessorCount;
@property(readonly, assign, nonatomic) unsigned processorCount;
@property(readonly, assign, nonatomic) AMPPLCrashReportProcessorInfo* processorInfo;
@property(readonly, assign, nonatomic) NSString* modelName;
-(void)dealloc;
-(id)initWithModelName:(id)modelName processorInfo:(id)info processorCount:(unsigned)count logicalProcessorCount:(unsigned)count4;
@end

@interface AMPPLCrashReportProcessInfo : NSObject {
	NSString* _processName;
	unsigned _processID;
	NSString* _processPath;
	NSString* _parentProcessName;
	unsigned _parentProcessID;
	BOOL _native;
}
@property(readonly, assign, nonatomic) BOOL native;
@property(readonly, assign, nonatomic) unsigned parentProcessID;
@property(readonly, assign, nonatomic) NSString* parentProcessName;
@property(readonly, assign, nonatomic) NSString* processPath;
@property(readonly, assign, nonatomic) unsigned processID;
@property(readonly, assign, nonatomic) NSString* processName;
-(void)dealloc;
-(id)initWithProcessName:(id)processName processID:(unsigned)anId processPath:(id)path parentProcessName:(id)name parentProcessID:(unsigned)anId5 native:(BOOL)native;
@end

@interface AMPPLCrashReportProcessorInfo : NSObject {
	int _typeEncoding;
	unsigned long long _type;
	unsigned long long _subtype;
}
@property(readonly, assign, nonatomic) unsigned long long subtype;
@property(readonly, assign, nonatomic) unsigned long long type;
@property(readonly, assign, nonatomic) int typeEncoding;
-(id)initWithTypeEncoding:(int)typeEncoding type:(unsigned long long)type subtype:(unsigned long long)subtype;
@end

@interface AMPPLCrashReportSignalInfo : NSObject {
	NSString* _name;
	NSString* _code;
	unsigned long long _address;
}
@property(readonly, assign, nonatomic) unsigned long long address;
@property(readonly, assign, nonatomic) NSString* code;
@property(readonly, assign, nonatomic) NSString* name;
-(void)dealloc;
-(id)initWithSignalName:(id)signalName code:(id)code address:(unsigned long long)address;
@end

@interface AMPPLCrashReportSystemInfo : NSObject {
	int _operatingSystem;
	NSString* _osVersion;
	NSString* _osBuild;
	int _architecture;
	NSDate* _timestamp;
}
@property(readonly, assign, nonatomic) NSDate* timestamp;
@property(readonly, assign, nonatomic) int architecture;
@property(readonly, assign, nonatomic) NSString* operatingSystemBuild;
@property(readonly, assign, nonatomic) NSString* operatingSystemVersion;
@property(readonly, assign, nonatomic) int operatingSystem;
-(void)dealloc;
-(id)initWithOperatingSystem:(int)operatingSystem operatingSystemVersion:(id)version operatingSystemBuild:(id)build architecture:(int)architecture timestamp:(id)timestamp;
-(id)initWithOperatingSystem:(int)operatingSystem operatingSystemVersion:(id)version architecture:(int)architecture timestamp:(id)timestamp;
@end

@interface AMPPLCrashReportTextFormatter : NSObject <PLCrashReportFormatter> {
	int _textFormat;
	unsigned _stringEncoding;
}
+(id)stringValueForCrashReport:(id)crashReport withTextFormat:(int)textFormat;
+(id)formatStackFrame:(id)frame frameIndex:(unsigned)index report:(id)report;
-(id)formatReport:(id)report error:(id*)error;
-(id)initWithTextFormat:(int)textFormat stringEncoding:(unsigned)encoding;
@end

@interface AMPPLCrashReportThreadInfo : NSObject {
	int _threadNumber;
	NSArray* _stackFrames;
	BOOL _crashed;
	NSArray* _registers;
}
@property(readonly, assign, nonatomic) NSArray* registers;
@property(readonly, assign, nonatomic) BOOL crashed;
@property(readonly, assign, nonatomic) NSArray* stackFrames;
@property(readonly, assign, nonatomic) int threadNumber;
-(void)dealloc;
-(id)initWithThreadNumber:(int)threadNumber stackFrames:(id)frames crashed:(BOOL)crashed registers:(id)registers;
@end

@interface AMPPLCrashReportStackFrameInfo : NSObject {
	unsigned long long _instructionPointer;
}
@property(readonly, assign, nonatomic) unsigned long long instructionPointer;
-(id)initWithInstructionPointer:(unsigned long long)instructionPointer;
@end

@interface AMPPLCrashReportRegisterInfo : NSObject {
	NSString* _registerName;
	unsigned long long _registerValue;
}
@property(readonly, assign, nonatomic) unsigned long long registerValue;
@property(readonly, assign, nonatomic) NSString* registerName;
-(void)dealloc;
-(id)initWithRegisterName:(id)registerName registerValue:(unsigned long long)value;
@end

@interface AMPPLCrashSignalHandler : NSObject {
	darwin_sigaltstack _sigstk;
}
+(id)sharedHandler;
-(BOOL)registerHandlerWithCallback:(/*function-pointer*/ void*)callback context:(void*)context error:(id*)error;
-(BOOL)registerHandlerForSignal:(int)signal error:(id*)error;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LVTakeVideoViewController : UIViewController <LVVideoProcessorDelegate> {
	LVVideoProcessor* videoProcessor;
	BOOL _didResignActive;
	LVSnapMoviePickerController* _picker;
	AVCaptureVideoPreviewLayer* _previewLayer;
	UIView* _cameraView;
	UIView* _guideView;
	UILabel* _guideLabel;
	LVCircularProgressView* _progressView;
	UILabel* _progressLabel;
	UIButton* _fullScreenButton;
	UIButton* _nextButton;
	UIButton* _changeCameraButton;
	UIButton* _closeButton;
	double _capturedDuration;
}
@property(assign, nonatomic) BOOL didResignActive;
@property(assign, nonatomic) double capturedDuration;
@property(assign, nonatomic) UIButton* closeButton;
@property(assign, nonatomic) UIButton* changeCameraButton;
@property(assign, nonatomic) UIButton* nextButton;
@property(assign, nonatomic) UIButton* fullScreenButton;
@property(assign, nonatomic) UILabel* progressLabel;
@property(assign, nonatomic) LVCircularProgressView* progressView;
@property(assign, nonatomic) UILabel* guideLabel;
@property(assign, nonatomic) UIView* guideView;
@property(assign, nonatomic) UIView* cameraView;
@property(assign, nonatomic) AVCaptureVideoPreviewLayer* previewLayer;
@property(assign, nonatomic) LVSnapMoviePickerController* picker;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)recordingWithDuration:(double)duration;
-(void)recordingDidStop;
-(void)recordingWillStop;
-(void)recordingDidStart;
-(void)recordingWillStart;
-(void)didClicknextButton:(id)button;
-(void)didClickCloseButton:(id)button;
-(void)didClickChangeCameraButton:(id)button;
-(void)touchUp:(id)up;
-(void)touchDown:(id)down;
-(BOOL)prefersStatusBarHidden;
-(void)didReceiveMemoryWarning;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithPicker:(id)picker;
-(void)showSoundSelectViewController;
-(void)setButtonTouchEnable;
-(void)cleanup;
-(void)resetProgress;
-(void)startCapturePreview;
-(void)didBecomeActive:(id)active;
-(void)willResignActive:(id)active;
@end

__attribute__((visibility("hidden")))
@interface LVUtility : NSObject {
}
+(BOOL)isRealEnv;
+(void)deactivateAudioSessionForMoviePlay:(id)moviePlay;
+(void)activateAudioSessionForMoviePlay;
+(BOOL)isCallingByVOIP;
+(void)setSnapMovieUsedBefore;
+(BOOL)isSnapMovieUsedBefore;
+(id)getThumbnailFromVideo:(id)video;
+(id)resizeImage:(id)image size:(CGSize)size;
+(unsigned)cameraCount;
+(BOOL)isIOS5EqualOrOver;
+(float)systemVersionAsFloat;
+(void)saveVideoToCameraRoll:(id)cameraRoll completion:(id)completion;
+(void)saveVideoToCameraRoll:(id)cameraRoll;
+(void)mixVideos:(id)videos withSound:(id)sound completion:(id)completion;
+(void)soundWithFadeOut:(id)fadeOut duration:(double)duration completion:(id)completion;
+(id)localizedStringForKey:(id)key;
+(id)colorWithHex:(unsigned long)hex alpha:(float)alpha;
+(id)colorWithHex:(unsigned long)hex;
+(void)removeFileAtPath:(id)path;
+(id)tempSoundFilePath;
+(id)tempVideoFilePath;
+(id)tempCaptureFilePath;
+(id)cacheDirectory;
+(id)bundleImageWithRetinaNamed:(id)retinaNamed;
+(id)imageNamedWithScale:(id)scale;
+(BOOL)isHighResolutionScreen;
@end

__attribute__((visibility("hidden")))
@interface LVSoundSelectViewController : UIViewController <UITableViewDataSource, UITableViewDelegate, AVAudioPlayerDelegate, LVSoundDelegate, LVFileDownloadOperationDelegate> {
	BOOL _loadingMetaInfo;
	LVSnapMoviePickerController* _picker;
	UIImage* _videoThumbnail;
	AVAudioPlayer* _audioPlayer;
	NSMutableArray* _soundInfoArray;
	NSOperationQueue* _downloadOperationQueue;
	UITableView* _tableView;
	UIButton* _nextButton;
	UIImageView* _arrowImageView;
	NSIndexPath* _selectedIndexPath;
	NSIndexPath* _playingIndexPath;
	UIActivityIndicatorView* _indicatorView;
	NSString* _thumbnailURLPath;
	NSString* _bgmURLPath;
	NSString* _audioCategoryBackup;
}
@property(retain, nonatomic) NSString* audioCategoryBackup;
@property(retain, nonatomic) NSString* bgmURLPath;
@property(retain, nonatomic) NSString* thumbnailURLPath;
@property(assign, nonatomic) UIActivityIndicatorView* indicatorView;
@property(assign, nonatomic) BOOL loadingMetaInfo;
@property(retain, nonatomic) NSIndexPath* playingIndexPath;
@property(retain, nonatomic) NSIndexPath* selectedIndexPath;
@property(assign, nonatomic) UIImageView* arrowImageView;
@property(assign, nonatomic) UIButton* nextButton;
@property(assign, nonatomic) UITableView* tableView;
@property(retain, nonatomic) NSOperationQueue* downloadOperationQueue;
@property(retain, nonatomic) NSMutableArray* soundInfoArray;
@property(retain, nonatomic) AVAudioPlayer* audioPlayer;
@property(retain, nonatomic) UIImage* videoThumbnail;
@property(assign, nonatomic) LVSnapMoviePickerController* picker;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)fileDownloadOperation:(id)operation didFailWithError:(id)error;
-(void)fileDownloadOperationDidFinish:(id)fileDownloadOperation;
-(void)fileDownloadOperation:(id)operation didReceiveDataInProgress:(float)progress;
-(void)fileDownloadOperationWillStart:(id)fileDownloadOperation;
-(void)audioPlayerBeginInterruption:(id)interruption;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)didClickNextButton:(id)button;
-(void)didClickCloseButton:(id)button;
-(void)didClickBackButton:(id)button;
-(void)cancelDownload:(id)download;
-(void)downloadSound:(id)sound;
-(void)stopSound;
-(void)playSound:(id)sound;
-(BOOL)prefersStatusBarHidden;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithPicker:(id)picker;
-(void)showPreviewVideoViewController:(id)controller;
-(void)setNextButtonEnabled:(BOOL)enabled;
-(id)thumbnailURLOfSoundInfo:(id)soundInfo;
-(id)soundURLOfSoundInfo:(id)soundInfo;
-(id)metaInfoDomain;
-(id)operationForSoundInfo:(id)soundInfo;
-(id)cellForSoundInfo:(id)soundInfo;
-(id)cellForSoundInfoIndex:(int)soundInfoIndex;
-(void)downloadThumbnails;
-(void)downloadSoundInfoList;
-(id)soundMetaInfoURL;
@end

__attribute__((visibility("hidden")))
@interface LVSnapMoviePickerController : UINavigationController <UIActionSheetDelegate> {
	BOOL _usedByMyHome;
	id<LVSnapMoviePickerControllerDelegate> _pickerDelegate;
	unsigned _movieQuality;
	NSString* _metaFileRootPath;
	NSMutableArray* _captureFileURLs;
	NSString* _outputFilePath;
}
@property(retain, nonatomic) NSString* outputFilePath;
@property(retain, nonatomic) NSMutableArray* captureFileURLs;
@property(retain, nonatomic) NSString* metaFileRootPath;
@property(assign, nonatomic) unsigned movieQuality;
@property(assign, nonatomic) BOOL usedByMyHome;
@property(assign, nonatomic) id<LVSnapMoviePickerControllerDelegate> pickerDelegate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)removeOutputFile;
-(void)removeCaptureFiles;
-(double)capturedTotalDuration;
-(id)capturedVideoThumbnail;
-(void)cancelPicker;
-(void)showPickerFromViewController:(id)viewController;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LVPreviewVideoViewController : UIViewController {
	LVSnapMoviePickerController* _picker;
	LVVideoCropManager* _videoCropManager;
	UIImageView* _movieBackgroundView;
	UIView* _loadingView;
	LVProgressView* _progressView;
	UILabel* _loadingLabel;
	UIButton* _sendButton;
	UIButton* _saveButton;
	MPMoviePlayerController* _moviePlayer;
	NSURL* _videoOutputURL;
	NSURL* _soundURL;
	NSString* _audioCategoryBackup;
}
@property(retain, nonatomic) NSString* audioCategoryBackup;
@property(retain, nonatomic) NSURL* soundURL;
@property(retain, nonatomic) NSURL* videoOutputURL;
@property(retain, nonatomic) MPMoviePlayerController* moviePlayer;
@property(assign, nonatomic) UIButton* saveButton;
@property(assign, nonatomic) UIButton* sendButton;
@property(assign, nonatomic) UILabel* loadingLabel;
@property(assign, nonatomic) LVProgressView* progressView;
@property(assign, nonatomic) UIView* loadingView;
@property(assign, nonatomic) UIImageView* movieBackgroundView;
@property(retain, nonatomic) LVVideoCropManager* videoCropManager;
@property(assign, nonatomic) LVSnapMoviePickerController* picker;
-(void)mediaIsPreparedToPlayDidChange:(id)mediaIsPreparedToPlay;
-(void)moviePlayBackDidFinish:(id)moviePlayBack;
-(void)moviePlayBackStateDidChange:(id)moviePlayBackState;
-(void)loadStateDidChange:(id)loadState;
-(void)didClickSendButton:(id)button;
-(void)didClickSaveButton:(id)button;
-(void)didClickCloseButton:(id)button;
-(void)didClickBackButton:(id)button;
-(BOOL)prefersStatusBarHidden;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithPicker:(id)picker soundURL:(id)url;
-(void)mixVideoAndSound;
-(void)toggleMoviePlay:(id)play;
-(void)setupMoviePlayerAndPlay;
-(void)removeTempSoundFile;
-(BOOL)isSaveEnaled;
-(void)cropDidFail:(id)crop;
-(void)cropProgressing:(id)progressing;
-(void)cropDidFinish:(id)crop;
-(void)removeVideoCropManagerNotification;
-(void)addVideoCropManagerNotification;
-(void)mixCropedVideoAndSound;
-(void)cropVideoAndMix;
-(void)removeLoadingView;
-(void)addLoadingView;
@end

__attribute__((visibility("hidden")))
@interface LVCircularProgressLayer : CALayer {
}
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) float thicknessRatio;
@property(assign, nonatomic) int roundedCorners;
@property(retain, nonatomic) UIColor* progressTintColor;
@property(retain, nonatomic) UIColor* trackTintColor;
+(BOOL)needsDisplayForKey:(id)key;
-(void)drawInContext:(CGContextRef)context;
@end

__attribute__((visibility("hidden")))
@interface LVCircularProgressView : UIView {
	float _indeterminateDuration;
}
@property(assign, nonatomic) int indeterminate;
@property(assign, nonatomic) float indeterminateDuration;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) float thicknessRatio;
@property(assign, nonatomic) int roundedCorners;
@property(retain, nonatomic) UIColor* progressTintColor;
@property(retain, nonatomic) UIColor* trackTintColor;
+(Class)layerClass;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(void)didMoveToWindow;
-(id)initWithFrame:(CGRect)frame;
-(id)circularProgressLayer;
@end

__attribute__((visibility("hidden")))
@interface LVVideoProcessor : NSObject <AVCaptureAudioDataOutputSampleBufferDelegate, AVCaptureVideoDataOutputSampleBufferDelegate> {
	id<LVVideoProcessorDelegate> delegate;
	AVCaptureSession* captureSession;
	AVCaptureDeviceInput* videoInput;
	AVCaptureVideoDataOutput* videoOutput;
	AVCaptureAudioDataOutput* audioOutput;
	AVAssetWriter* assetWriter;
	AVAssetWriterInput* assetWriterAudioIn;
	AVAssetWriterInput* assetWriterVideoIn;
	dispatch_queue_s* movieWritingQueue;
	int referenceOrientation;
	int videoOrientation;
	XXStruct_pwHToB startTime;
	XXStruct_pwHToB lastAudioTime;
	XXStruct_pwHToB lastVideoTime;
	XXStruct_pwHToB timeOffset;
	BOOL readyToRecordAudio;
	BOOL readyToRecordVideo;
	BOOL recordingWillBeStarted;
	BOOL recordingWillBeStopped;
	BOOL recording;
	BOOL paused;
	BOOL needAdjustTimeOffset;
	BOOL needsEncodeLowQuality;
}
@property(assign) int videoOrientation;
@property(assign, getter=isPaused) BOOL paused;
@property(assign, getter=isRecording) BOOL recording;
@property(assign) int referenceOrientation;
@property(assign) id<LVVideoProcessorDelegate> delegate;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(id)getPreviewLayer;
-(void)resumeCaptureSession;
-(void)pauseCaptureSession;
-(void)startCaptureSession;
-(void)resumeRecording;
-(void)pauseRecording;
-(void)stopRecording;
-(void)startRecordingWithFileURL:(id)fileURL;
-(void)toggleCamera;
-(void)stopAndTearDownCaptureSession;
-(void)setupAndReadyToStartCaptureSession;
-(void)dealloc;
-(id)initWithEncodeLowQuality:(BOOL)encodeLowQuality;
-(void)processRecordedMovie;
-(opaqueCMSampleBuffer*)adjustTime:(opaqueCMSampleBuffer*)time by:(XXStruct_pwHToB)by;
-(CGAffineTransform)transformFromCurrentVideoOrientationToOrientation:(int)orientation;
-(float)angleOffsetFromPortraitOrientationToOrientation:(int)orientation;
-(void)removeFile:(id)file;
-(void)showError:(id)error;
-(void)sessionInterruptionEnded:(id)ended;
-(void)sessionWasInterrupted:(id)interrupted;
-(void)sessionDidStopRunning:(id)session;
-(void)sessionDidStartRunning:(id)session;
-(void)sessionRuntimeError:(id)error;
-(void)removeSessoinNotification;
-(void)addSessionNotification;
-(void)cleanUpWriter;
-(void)writeSampleBuffer:(opaqueCMSampleBuffer*)buffer ofType:(id)type;
-(BOOL)setupAssetWriterVideoInput:(opaqueCMFormatDescription*)input;
-(id)videoCompressionSettings:(opaqueCMFormatDescription*)settings;
-(BOOL)setupAssetWriterAudioInput:(opaqueCMFormatDescription*)input;
-(id)audioCompressionSettings:(opaqueCMFormatDescription*)settings;
-(BOOL)setupCaptureSession;
-(id)connectionWithMediaType:(id)mediaType fromCaptureOutput:(id)captureOutput;
-(id)audioDevice;
-(id)videoDeviceWithPosition:(int)position;
@end

__attribute__((visibility("hidden")))
@interface LVSoundTableViewCell : UITableViewCell {
	UIImageView* _thumbImageView;
	UILabel* _soundTitleLabel;
	LVProgressView* _progressView;
	LVSoundInfo* _soundInfo;
	id<LVSoundDelegate> _delegate;
}
@property(assign, nonatomic) id<LVSoundDelegate> delegate;
@property(retain, nonatomic) LVSoundInfo* soundInfo;
@property(assign, nonatomic) LVProgressView* progressView;
@property(assign, nonatomic) UILabel* soundTitleLabel;
@property(assign, nonatomic) UIImageView* thumbImageView;
-(void)didClickCancelButton:(id)button;
-(void)reloadProgressView;
-(void)reloadButton;
-(void)setupCellWithSoundInfo:(id)soundInfo;
-(void)setupCellWithTitle:(id)title thumbnailImage:(id)image;
-(id)cancelButton;
-(id)downloadButton;
-(id)stopButton;
-(id)playButton;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LVSoundInfo : NSObject {
	NSString* _metaFileRootPath;
	NSString* _title;
	NSString* _soundName;
	NSString* _thumbnailName;
	unsigned _soundStatus;
	float _downloadingProgress;
}
@property(assign, nonatomic) float downloadingProgress;
@property(assign, nonatomic) unsigned soundStatus;
@property(readonly, assign, nonatomic) UIImage* thumbnailImage;
@property(readonly, assign, nonatomic) NSString* thumbnailFilePath;
@property(readonly, assign, nonatomic) NSString* soundFilePath;
@property(retain, nonatomic) NSString* thumbnailName;
@property(retain, nonatomic) NSString* soundName;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* metaFileRootPath;
-(void)resetSoundStatus;
-(BOOL)thumbnailFileExists;
-(BOOL)soundFileExists;
-(void)dealloc;
-(id)initWithDict:(id)dict metaFileRootPath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface LVFileDownloadOperation : LVURLConnectionOperation {
	id<LVFileDownloadOperationDelegate> _delegate;
	NSString* _downloadFilePath;
	NSDictionary* _userInfo;
}
@property(retain, nonatomic) NSDictionary* userInfo;
@property(retain, nonatomic) NSString* downloadFilePath;
@property(assign, nonatomic) id<LVFileDownloadOperationDelegate> delegate;
-(void)didFinishLoading;
-(void)didFail;
-(void)didReceiveBodyData:(int)data totalBytesRead:(int)read totalBytesExpectedToRead:(int)read3;
-(void)willStart;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LVBackgroundTask : NSObject {
	unsigned mBackgroundTaskID;
	id mCompletionBlock;
}
@property(copy, nonatomic) id completionBlock;
+(id)backgroundTaskWithCompletionBlock:(id)completionBlock;
-(void)endTask;
-(void)beginTask;
-(void)dealloc;
-(id)init;
-(void)endBackgroundTask;
@end

__attribute__((visibility("hidden")))
@interface LVURLConnectionOperation : NSOperation {
	NSThread* mThread;
	NSTimer* mTimer;
	NSURLConnection* mConnection;
	NSURLRequest* mRequest;
	NSURLResponse* mResponse;
	NSError* mError;
	int mTotalBytesRead;
	int mTotalBytesExpectedToRead;
	double mTimeoutInterval;
	int mRetryCount;
	int mRetryIndex;
	LVBackgroundTask* mBackgroundTask;
	BOOL mAutoRetryAfterWakeup;
	BOOL mUsesTempFile;
	BOOL mAsyncScheduled;
	BOOL mCompleted;
	int mState;
	XXUnion_6XAQHD mResult;
}
@property(readonly, assign, nonatomic) int state;
@property(readonly, assign, nonatomic) NSString* filePath;
@property(readonly, assign, nonatomic) NSData* data;
@property(retain, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSURLResponse* response;
@property(copy, nonatomic) NSURLRequest* request;
@property(assign, nonatomic) BOOL usesTempFile;
@property(assign, nonatomic) int retryCount;
@property(assign, nonatomic) double timeoutInterval;
@property(assign, nonatomic) BOOL autoRetryAfterWakeup;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)cancel;
-(void)main;
-(void)unscheduleInCurrentRunLoop;
-(void)scheduleInCurrentRunLoop;
-(void)unschedule;
-(void)schedule;
-(id)URLRequest;
-(void)retry;
-(void)timerFired:(id)fired;
-(void)resetTimer;
-(void)keepRunningInBackground;
-(void)resumeConnection;
-(void)suspendConnection;
-(void)finishConnectionWithError:(id)error;
-(void)cancelConnection;
-(void)dealloc;
-(id)init;
-(void)didFinishLoading;
-(void)didFail;
-(void)didCancel;
-(void)willRetryWithAttempt:(int)attempt;
-(BOOL)shouldRetryWithAttempt:(int)attempt;
-(void)didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)didReceiveBodyData:(int)data totalBytesRead:(int)read totalBytesExpectedToRead:(int)read3;
-(void)didReceiveData:(id)data;
-(void)didReceiveResponse;
-(id)needNewBodyStream:(id)stream;
-(id)willSendRequest:(id)request redirectResponse:(id)response;
-(id)willCacheResponse:(id)response;
-(void)willStart;
@end

__attribute__((visibility("hidden")))
@interface LVProgressView : UIView {
	float _progress;
	CALayer* _progressLayer;
	CALayer* _progressFillLayer;
}
@property(assign, nonatomic) CALayer* progressFillLayer;
@property(assign, nonatomic) CALayer* progressLayer;
@property(assign, nonatomic) float progress;
-(void)layoutSubviews;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LVVideoCropManager : NSObject {
	AVAssetWriter* assetWriter;
	AVAssetWriterInputPixelBufferAdaptor* avAdaptor;
	AVAssetReader* assetReader;
	float duration;
	float progress;
	NSURL* _cropFileURL;
}
@property(retain, nonatomic) NSURL* cropFileURL;
-(void)cropVideo:(id)video;
-(CVBufferRef)modifyImage:(opaqueCMSampleBuffer*)image;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCActionSheet : NSObject <UIActionSheetDelegate> {
	NSString* title;
	UIActionSheet* actionSheet;
	int actionSheetStyle;
	NSDictionary* cancelButtonInfo;
	NSDictionary* destructiveButtonInfo;
	NSMutableArray* otherButtonInfos;
}
@property(retain, nonatomic) NSMutableArray* otherButtonInfos;
@property(retain, nonatomic) NSDictionary* destructiveButtonInfo;
@property(retain, nonatomic) NSDictionary* cancelButtonInfo;
@property(readonly, assign, nonatomic, getter=isVisible) BOOL visible;
@property(assign, nonatomic) int actionSheetStyle;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) UIActionSheet* actionSheet;
+(id)actionSheetWithTitle:(id)title;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(unsigned)otherButtonCount;
-(void)dismissWithClickedButtonIndex:(int)clickedButtonIndex animated:(BOOL)animated;
-(void)showInView:(id)view;
-(void)showFromToolbar:(id)toolbar;
-(void)showFromTabBar:(id)tabBar;
-(void)addButtonWithTitle:(id)title target:(id)target action:(SEL)action object:(id)object;
-(void)addButtonWithTitle:(id)title invocation:(id)invocation;
-(void)setDestructiveButtonTitle:(id)title target:(id)target action:(SEL)action object:(id)object;
-(void)setDestructiveButtonTitle:(id)title invocation:(id)invocation;
-(void)setCancelButtonTitle:(id)title target:(id)target action:(SEL)action object:(id)object;
-(void)setCancelButtonTitle:(id)title invocation:(id)invocation;
-(void)setCancelButtonTitle:(id)title;
-(void)dealloc;
-(id)initWithTitle:(id)title;
-(void)sendActionWithInfo:(id)info;
-(void)addOtherButtons;
-(void)addDestructiveButton;
-(void)addCancelButton;
@end

__attribute__((visibility("hidden")))
@interface LCAttributedLabel : UILabel {
	LCAttributedString* attributedText;
	int truncatedTailType;
	id touchedLink;
	CGSize flowAroundSize;
	NSRange touchedRange;
	UIEdgeInsets edgeInsets;
}
@property(assign, nonatomic) NSRange touchedRange;
@property(assign, nonatomic) id touchedLink;
@property(assign, nonatomic) int truncatedTailType;
@property(assign, nonatomic) CGSize flowAroundSize;
@property(assign, nonatomic) UIEdgeInsets edgeInsets;
@property(copy, nonatomic) LCAttributedString* attributedText;
-(CGRect)textRectForBounds:(CGRect)bounds;
-(id)currentFont;
-(void)setAttributedText:(id)text highlightExpression:(id)expression isBold:(BOOL)bold;
-(void)drawTextInRect:(CGRect)rect;
-(CGSize)sizeThatFits:(CGSize)fits maxHeight:(unsigned)height;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)updateTouchedRangeWithPoint:(CGPoint)point;
-(void)resetTouchedRange;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface LCImageDetailErrorView : UIView {
	id<LCImageDetailErrorViewDelegate> _delegate;
	UIImageView* _iconImageView;
	UILabel* _detailLabel;
	UIButton* _button;
	NSError* _error;
}
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) UIButton* button;
@property(assign, nonatomic) UILabel* detailLabel;
@property(assign, nonatomic) UIImageView* iconImageView;
@property(assign, nonatomic) id<LCImageDetailErrorViewDelegate> delegate;
-(BOOL)isObjectStorageError:(id)error;
-(void)didTapButton:(id)button;
-(void)layoutSubviews;
-(void)setError:(id)error delegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCAttributedString : NSObject {
	void* mBaseObject;
	BOOL truncatedTail;
	BOOL shouldDrawShadow;
	int truncatedTailType;
}
@property(assign, nonatomic) BOOL shouldDrawShadow;
@property(assign, nonatomic) int truncatedTailType;
@property(assign, nonatomic) BOOL truncatedTail;
+(id)attributedString:(id)string systemFontOfSize:(float)size textColor:(id)color;
-(id)attributedSubstringFromRange:(NSRange)range;
-(id)description;
-(BOOL)isEqualToAttributedString:(id)attributedString;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(id)attribute:(id)attribute atIndex:(unsigned)index longestEffectiveRange:(NSRange*)range inRange:(NSRange)range4;
-(id)attribute:(id)attribute atIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(id)attributesAtIndex:(unsigned)index longestEffectiveRange:(NSRange*)range inRange:(NSRange)range3;
-(id)attributesAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(unsigned)length;
-(id)string;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithString:(id)string attributes:(id)attributes;
-(id)initWithAttributedString:(id)attributedString;
-(id)initWithString:(id)string;
-(id)init;
-(void)dealloc;
-(id)initWithoutBaseObject;
-(id)attributedStringByAddingLinksWithLinkableUsers:(id)linkableUsers linkableUserRegularVersion:(int)version;
-(NSRange)rangeOfLinkMatchInString:(id)string range:(NSRange)range;
-(id)attributedStringWithHighlightExpression:(id)highlightExpression isBold:(BOOL)bold;
-(void)drawTouchHighlightingInRect:(CGRect)rect charactersInRange:(NSRange)range;
-(void)drawTouchHighlightingInRect:(CGRect)rect range:(NSRange)range highlightRange:(NSRange)range3;
-(NSRange)rightTrimRange:(NSRange)range;
-(NSRange)leftTrimRange:(NSRange)range;
-(unsigned)characterIndexForPoint:(CGPoint)point width:(float)width;
-(void)drawInRect:(CGRect)rect highlighted:(BOOL)highlighted flowAroundSize:(CGSize)size;
-(void)drawAtPoint:(CGPoint)point highlighted:(BOOL)highlighted range:(NSRange)range limitX:(float)x lastLine:(BOOL)line;
-(void)drawTruncatedStringForString:(id)string font:(id)font color:(id)color stringPoint:(CGPoint)point limitX:(float)x;
-(CGSize)sizeForWidth:(float)width flowAroundSize:(CGSize)size maxHeight:(float)height;
-(CGSize)sizeForWidth:(float)width flowAroundSize:(CGSize)size;
-(CGSize)sizeOfRange:(NSRange)range;
@end

__attribute__((visibility("hidden")))
@interface LCAttributedTextParser : LCTextParser {
}
-(id)attributesForElement:(id)element attributes:(id)attributes;
-(id)defaultAttributes;
-(id)colorWithAttributes:(id)attributes;
-(id)fontWithAttributes:(id)attributes;
@end

__attribute__((visibility("hidden")))
@interface LCButton : UIButton {
	BOOL highlightsByTouchesOnly;
	BOOL highlightDisabled;
}
@property(assign, nonatomic) BOOL highlightDisabled;
@property(assign, nonatomic) BOOL highlightsByTouchesOnly;
-(void)setHighlighted:(BOOL)highlighted;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface LCVideoPlayViewController : UIViewController {
	BOOL isAvailablePlay;
	BOOL isSimplePlayer;
	MPMoviePlayerController* movieController;
	NSURL* movieURL;
	UIButton* playButton;
	UIView* dimView;
	UIImageView* bottomBarView;
	UIButton* saveButton;
	NLObjectStorageOperation* downloadOperation;
	NSString* _audioCategoryBackup;
}
@property(retain, nonatomic) NLObjectStorageOperation* downloadOperation;
@property(retain, nonatomic) NSString* audioCategoryBackup;
@property(assign, nonatomic) UIButton* saveButton;
@property(retain, nonatomic) UIImageView* bottomBarView;
@property(retain, nonatomic) UIView* dimView;
@property(retain, nonatomic) UIButton* playButton;
@property(assign, nonatomic) BOOL isSimplePlayer;
@property(assign, nonatomic) BOOL isAvailablePlay;
@property(retain, nonatomic) NSURL* movieURL;
@property(retain, nonatomic) MPMoviePlayerController* movieController;
-(void)dealloc;
-(void)viewDidLoad;
-(id)initWithURL:(id)url simplePlayer:(BOOL)player;
-(void)deactivateAudioSessionForMoviePlay;
-(void)activateAudioSessionForMoviePlay;
-(BOOL)isCallingByVOIP;
-(int)preferredStatusBarStyle;
-(void)didClickSaveButton:(id)button;
-(void)saveVideoToCameraRoll:(id)cameraRoll;
-(void)dismissViewController;
-(void)playButtonPressed:(id)pressed;
-(void)hiddenMenuBar;
-(void)showMenuBar;
-(void)removeMPObserver;
-(void)didEnterFullscreen:(id)fullscreen;
-(void)didExitFullscreen:(id)fullscreen;
-(void)playbackDidFinish:(id)playback;
-(void)loadStateDidChange:(id)loadState;
-(void)playMediaAtURL:(id)url;
-(void)setNavigationBar;
-(id)barButton;
@end

__attribute__((visibility("hidden")))
@interface LCDiskCache : NJDiskCache {
}
+(id)sharedInstance;
-(id)imageForRemoteURL:(id)remoteURL scope:(id)scope;
-(void)emptyCacheBefore:(id)before duration:(long)duration;
-(id)commonProxyURL:(id)url;
-(BOOL)existCacheForRemoteURL:(id)remoteURL scope:(id)scope fileManager:(id)manager;
-(id)obsDefaultDomain;
@end

__attribute__((visibility("hidden")))
@interface LCFileCache : NSObject {
	NSString* mCacheRootDir;
	double maxCacheTimeInterval;
}
@property(retain, nonatomic) NSString* mCacheRootDir;
@property(assign, nonatomic) double maxCacheTimeInterval;
+(id)sharedFileCache;
-(void)removeTempPost:(id)post;
-(void)saveTempPost:(id)post text:(id)text stickerArray:(id)array mediaArray:(id)array4 uploadUrlArray:(id)array5 location:(id)location;
-(id)tempPostWithUniqueId:(id)uniqueId;
-(id)tempPostPath:(id)path;
-(id)filePathOfCafeDetailPostsIndex;
-(id)cacheFilePathForCafeDetailPosts:(id)cafeDetailPosts uniqueId:(id)anId;
-(id)etagFromSettingInfoForCafeDetailPosts:(id)cafeDetailPosts;
-(id)settingInfoForCafeDetailPosts:(id)cafeDetailPosts;
-(BOOL)setSettingInfoForCafeDetailPosts:(id)cafeDetailPosts etag:(id)etag;
-(BOOL)setCacheObjectsForCafeDetailPosts:(id)cafeDetailPosts objects:(id)objects;
-(id)cacheObjectsForCafeDetailPosts:(id)cafeDetailPosts;
-(id)cacheObjects:(id)objects settingId:(id)anId;
-(id)fetchCafeDetailPosts:(id)posts;
-(id)fetchPosts:(id)posts sort:(id)sort entityName:(id)name;
-(void)insertPosts:(id)posts posts:(id)posts2 entityName:(id)name;
-(void)updatePosts:(id)posts updateType:(int)type;
-(void)updateCafeDetailPosts:(id)posts updateType:(int)type;
-(void)deletePosts:(id)posts;
-(void)deleteCafeDetailPosts:(id)posts;
-(void)resetCafeCache:(id)cache;
-(void)resetCacheIfCrashed;
-(BOOL)resetCache:(id)cache settingId:(id)anId;
-(void)resetCache;
-(void)setAppInBackground:(BOOL)background;
-(id)settingObject:(id)object;
-(void)setSettingInfo:(id)info etag:(id)etag;
-(id)init;
-(void)removeOldCacheForCafeDetailPosts:(id)cafeDetailPosts oldMaxIndex:(int)index;
-(void)resetCacheForCafeDetailPosts;
-(BOOL)resetCacheForCafeDetailPosts:(id)cafeDetailPosts;
-(BOOL)setCacheObjects:(id)objects settingId:(id)anId objects:(id)objects3;
-(id)fileNameOfCafeDetailPosts:(id)cafeDetailPosts uniqueId:(id)anId;
-(id)cacheFilePath:(id)path settingId:(id)anId;
-(void)setPost:(id)post asThisPost:(id)post2 forUpdateType:(int)updateType;
-(id)arrayOfDefaultSettingInfo;
-(void)updateCafeDetailPostsIndex:(id)index removeOrNot:(BOOL)aNot;
-(id)classSuffixWithEntityName:(id)entityName settingId:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface LCHighlightControl : UIControl {
	UIColor* highlightedColor;
	float cornerRadius;
}
@property(assign, nonatomic) float cornerRadius;
@property(retain, nonatomic) UIColor* highlightedColor;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)setHighlighted:(BOOL)highlighted;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCMutableAttributedString : LCAttributedString {
}
-(void)endEditing;
-(void)beginEditing;
-(void)setAttributedString:(id)string;
-(void)replaceCharactersInRange:(NSRange)range withAttributedString:(id)attributedString;
-(void)insertAttributedString:(id)string atIndex:(unsigned)index;
-(void)appendAttributedString:(id)string;
-(void)removeAttribute:(id)attribute range:(NSRange)range;
-(void)addAttributes:(id)attributes range:(NSRange)range;
-(void)addAttribute:(id)attribute value:(id)value range:(NSRange)range;
-(void)setAttributes:(id)attributes range:(NSRange)range;
-(void)deleteCharactersInRange:(NSRange)range;
-(void)replaceCharactersInRange:(NSRange)range withString:(id)string;
-(id)mutableString;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithString:(id)string attributes:(id)attributes;
-(id)initWithAttributedString:(id)attributedString;
-(id)initWithString:(id)string;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCRemoteImage : NSObject {
	BOOL keepConnection;
	NJURLConnection* operation;
	NSURL* URL;
	NSString* cafeId;
	NSString* channelToken;
	NSString* errorImageName;
	NSString* scope;
	SEL postprocessor;
	NSMutableSet* observers;
	UIImage* image;
	NSError* error;
}
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) BOOL keepConnection;
@property(retain, nonatomic) NSMutableSet* observers;
@property(assign, nonatomic) SEL postprocessor;
@property(retain, nonatomic) NSString* scope;
@property(retain, nonatomic) NSString* errorImageName;
@property(retain, nonatomic) NSString* channelToken;
@property(retain, nonatomic) NSString* cafeId;
@property(retain, nonatomic) NSURL* URL;
@property(assign, nonatomic) NJURLConnection* operation;
+(void)removeFromGRemoteImages:(id)gremoteImages;
+(void)setObjectToGRemoteImages:(id)gremoteImages forKey:(id)key;
+(id)objectForKeyFromGRemoteImages:(id)gremoteImages;
+(id)remoteImage;
+(id)imageWithURL:(id)url errorImageName:(id)name postprocessor:(SEL)postprocessor scope:(id)scope cache:(id)cache channelToken:(id)token;
+(id)imageWithURL:(id)url errorImageName:(id)name scope:(id)scope channelToken:(id)token;
+(id)imageWithURL:(id)url scope:(id)scope channelToken:(id)token;
+(id)imageWithURL:(id)url errorImageName:(id)name postprocessor:(SEL)postprocessor scope:(id)scope;
+(id)imageWithURL:(id)url errorImageName:(id)name scope:(id)scope;
+(id)imageWithURL:(id)url scope:(id)scope;
+(void)initialize;
-(void)setErrorImage;
-(void)doBackgroundJob;
-(void)callbackObservers;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(BOOL)isObserving:(id)observing;
-(void)doKeepConnection;
-(id)description;
-(id)key;
-(void)dealloc;
-(id)remoteImageResult:(id)result;
-(id)remoteImageResult;
-(void)makeImage:(id)image error:(id)error obsError:(BOOL)error3;
@end

__attribute__((visibility("hidden")))
@interface LCRemoteImageButton : LCButton <LCRemoteImageObserving> {
	LCRemoteImage* remoteImage;
	UIActivityIndicatorView* indicator;
	UIColor* imageBackgroundColor;
	UIColor* errorBackgroundColor;
}
@property(retain, nonatomic) UIColor* errorBackgroundColor;
@property(retain, nonatomic) UIColor* imageBackgroundColor;
@property(assign, nonatomic) UIActivityIndicatorView* indicator;
@property(assign, nonatomic) LCRemoteImage* remoteImage;
-(void)doCancelHighlighted:(id)highlighted;
-(void)doHighlighted:(id)highlighted;
-(void)setupImageContentMode;
-(void)remoteImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)setNilImage;
-(void)loadMedia:(id)media;
-(void)setRemoteImage:(id)image placeholderImage:(id)image2 isMediaButton:(BOOL)button;
-(void)setRemoteImage:(id)image placeholderImage:(id)image2;
-(void)setImage:(id)image;
-(CGRect)imageRectForContentRect:(CGRect)contentRect;
-(void)setImage:(id)image forState:(unsigned)state;
-(void)setShowIndicator:(BOOL)indicator indicatorStyle:(int)style;
-(void)setShowIndicator:(BOOL)indicator;
-(void)hideIndicator;
-(void)showIndicator;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCRemoteImageView : UIImageView <LCRemoteImageObserving> {
	LCRemoteImage* remoteImage;
	UIColor* errorBackgroundColor;
}
@property(retain, nonatomic) UIColor* errorBackgroundColor;
@property(assign, nonatomic) LCRemoteImage* remoteImage;
-(void)remoteImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)setRemoteImage:(id)image placeholderImage:(id)image2;
-(void)setImage:(id)image;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCTextParser : NSObject {
	LCMutableAttributedString* mAttributedString;
	NSMutableArray* mAttributesStack;
	NSMutableString* mCurrentString;
}
+(id)attributedStringFromXML:(id)xml;
+(id)cleanStringForXML:(id)xml;
+(id)attributedStringFromHTML:(id)html;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(id)attributesForElement:(id)element attributes:(id)attributes;
-(id)defaultAttributes;
-(void)flushCurrentString;
-(id)attributedString;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCClient : NSObject {
	BOOL usingSSL;
	Reachability* serverReachability;
	NSOperationQueue* operationQueue;
}
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(assign, nonatomic) BOOL usingSSL;
@property(retain, nonatomic) Reachability* serverReachability;
+(id)currentClient;
-(id)getVideoURLWithObjectID:(id)objectID delegate:(id)delegate;
-(id)deleteLike:(id)like delegate:(id)delegate;
-(id)createLike:(id)like delegate:(id)delegate;
-(id)getPostLikes:(id)likes cursor:(id)cursor fetchSize:(unsigned)size delegate:(id)delegate;
-(id)deleteReply:(id)reply delegate:(id)delegate;
-(id)getReplies:(id)replies cursor:(id)cursor fetchSize:(unsigned)size delegate:(id)delegate;
-(id)deleteComment:(id)comment delegate:(id)delegate;
-(id)createComment:(id)comment parentId:(id)anId text:(id)text linkableUserScanner:(id)scanner delegate:(id)delegate;
-(id)getPostComments:(id)comments cursor:(id)cursor fetchSize:(unsigned)size replyCount:(unsigned)count delegate:(id)delegate;
-(id)getPostComments:(id)comments cursor:(id)cursor fetchSize:(unsigned)size replyCount:(unsigned)count includeCursor:(unsigned)cursor5 directionType:(id)type delegate:(id)delegate;
-(id)getSiteInfo:(id)info delegate:(id)delegate;
-(id)deletePost:(id)post delegate:(id)delegate;
-(id)editPost:(id)post boardId:(id)anId text:(id)text stickers:(id)stickers medias:(id)medias urls:(id)urls location:(id)location linkableUserScanner:(id)scanner postId:(id)anId9 delegate:(id)delegate;
-(id)createPost:(id)post boardId:(id)anId text:(id)text stickers:(id)stickers medias:(id)medias urls:(id)urls location:(id)location linkableUserScanner:(id)scanner delegate:(id)delegate;
-(id)getSlidePostInfo:(id)info commentCount:(unsigned)count delegate:(id)delegate;
-(id)getSlidePostInfo:(id)info commentCount:(unsigned)count commentCursor:(id)cursor commentDirectionType:(id)type delegate:(id)delegate;
-(id)getCafePosts:(id)posts cursor:(id)cursor fetchSize:(unsigned)size etag:(id)etag delegate:(id)delegate;
-(id)getIsNewMarkOneToOneCafe:(id)oneCafe;
-(id)getIsNewMarkCafes:(id)cafes type:(id)type delegate:(id)delegate;
-(id)getCafeBoards:(id)boards delegate:(id)delegate;
-(id)getCafeInfo:(int)info delegate:(id)delegate;
-(void)updateConnection;
-(void)cancelOperation:(id)operation;
-(void)cancelOperationForContext:(id)context;
-(void)cancelAllOperations;
-(id)addOperation:(id)operation notUsingLegy:(BOOL)legy didReceiveSelector:(SEL)selector context:(id)context;
-(id)addOperation:(id)operation didReceiveSelector:(SEL)selector context:(id)context;
-(void)dealloc;
-(id)init;
-(void)clientOperation:(id)operation didReceiveVideoURLResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didDeleteLikeResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didCreateLikeResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceivePostLikesResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didDeleteCommentResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didCreateCommentResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceiveRepliesResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceivePostCommentsResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didGetSiteInfoResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didDeletePostResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceiveEditPostResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceiveCreatePostResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceiveSlidePostInfoResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceiveCafePostsResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceiveIsNewMarkOneToOneCafe:(id)oneCafe error:(id)error;
-(void)clientOperation:(id)operation didReceiveIsNewMarkCafes:(id)cafes error:(id)error;
-(void)clientOperation:(id)operation didReceiveCafeBoardsResult:(id)result error:(id)error;
-(void)clientOperation:(id)operation didReceiveCafeInfoResult:(id)result error:(id)error;
-(id)valueForEtag:(id)etag;
-(id)errorFromResultDictionary:(id)resultDictionary;
-(id)errorFromResultDictionary:(id)resultDictionary ignoreAuthError:(BOOL)error;
-(id)errorFromResultString:(id)resultString code:(int)code;
-(id)errorFromResultString:(id)resultString;
-(id)getVideoURLRequestWithObjectID:(id)objectID;
-(id)deleteLikeRequest:(id)request;
-(id)createLikeRequest:(id)request;
-(id)getPostLikesRequest:(id)request cursor:(id)cursor fetchSize:(unsigned)size;
-(id)deleteReplyRequest:(id)request;
-(id)getRepliesRequest:(id)request cursor:(id)cursor fetchSize:(unsigned)size;
-(id)deleteCommentRequest:(id)request;
-(id)createCommentRequest:(id)request parentId:(id)anId text:(id)text linkableUsers:(id)users linkableUserRegularVersion:(int)version;
-(id)getPostCommentsRequest:(id)request cursor:(id)cursor fetchSize:(unsigned)size replyCount:(unsigned)count includeCursor:(unsigned)cursor5 directionType:(id)type;
-(id)siteInfoRequest:(id)request;
-(id)deletePostRequest:(id)request;
-(id)editPost:(id)post boardId:(id)anId text:(id)text stickers:(id)stickers medias:(id)medias urls:(id)urls location:(id)location linkableUsers:(id)users linkableUserRegularVersion:(int)version postId:(id)anId10;
-(id)createPost:(id)post boardId:(id)anId text:(id)text stickers:(id)stickers medias:(id)medias urls:(id)urls location:(id)location linkableUsers:(id)users linkableUserRegularVersion:(int)version;
-(id)getSlidePostInfoRequest:(id)request commentCount:(unsigned)count commentCursor:(id)cursor commentDirectionType:(id)type;
-(id)getCafePostsRequest:(id)request cursor:(id)cursor etag:(id)etag fetchSize:(unsigned)size;
-(id)getIsNewMarkOneToOneCafeRequest;
-(id)getIsNewMarkCafesRequest:(id)request type:(id)type;
-(id)getCafeBoardsRequest:(id)request;
-(id)getCafeInfoRequest:(int)request;
-(id)requestWithURL:(id)url httpMethod:(int)method;
-(id)lineCafeHost;
@end

__attribute__((visibility("hidden")))
@interface LCClientOperation : NJURLConnection {
	BOOL _notUsingLegy;
	NSURLRequest* _requestForURLConnection;
	int _fetchResultType;
	double _startTimeInterval;
}
@property(assign, nonatomic) double startTimeInterval;
@property(retain, nonatomic) NSDictionary* userInfo;
@property(assign, nonatomic) int fetchResultType;
@property(retain, nonatomic) NSURLRequest* requestForURLConnection;
@property(assign, nonatomic) BOOL notUsingLegy;
+(id)UserAgent;
+(void)setUserAgent:(id)agent;
+(id)newClientOperation:(id)operation;
+(id)acceptLanguage;
+(void)initialize;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)appendFileLogIfAvailable:(id)available selector:(SEL)selector;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)stop;
-(void)start;
-(void)setRequest:(id)request;
-(id)dictionaryWithRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCCafeBaseViewController : UIViewController <LCProgressHUDDelegate> {
	BOOL isRotationEnabled;
	BOOL isOneToOneNote;
	BOOL _cafePrefersStatusBarHidden;
	UIView* view404;
	UIView* networkErrorView;
	UIButton* scrollToTopButtonOnNaviBar;
	int _cafePreferredStatusBarUpdateAnimation;
}
@property(assign, nonatomic) UIButton* scrollToTopButtonOnNaviBar;
@property(assign, nonatomic) BOOL isOneToOneNote;
@property(assign, nonatomic) int cafePreferredStatusBarUpdateAnimation;
@property(assign, nonatomic) BOOL cafePrefersStatusBarHidden;
@property(assign, nonatomic) BOOL isRotationEnabled;
@property(assign, nonatomic) UIView* networkErrorView;
@property(assign, nonatomic) UIView* view404;
+(id)compatiblePresentingViewController:(id)controller;
-(void)sendActionIfUserIsEligible:(id)eligible;
-(void)setStatusBarHidden:(BOOL)hidden withAnimation:(int)animation;
-(void)setStatusBarHidden:(BOOL)hidden;
-(id)childViewControllerForStatusBarStyle;
-(BOOL)prefersStatusBarHidden;
-(int)preferredStatusBarUpdateAnimation;
-(int)preferredStatusBarStyle;
-(BOOL)isRotatable;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(int)preferredInterfaceOrientationForPresentation;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(id)compatiblePresentingViewController;
-(void)cleanUp;
-(void)dismissViewController;
-(void)backAction;
-(void)hudWasHidden:(id)hidden;
-(void)showNetworkError;
-(void)show404:(id)a404;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)tapNavigationBar:(id)bar;
-(void)unregistTabRecognizer;
-(void)registTabRecognizer;
-(void)resizeTabRecognizeWidth;
-(void)cleanUpNetworkErrorView;
-(void)cleanUpView404;
@end

__attribute__((visibility("hidden")))
@interface LCScrollPosition : NSObject {
	float yPos;
}
@property(assign, nonatomic) float yPos;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCFetchedListViewController : LCListViewController {
	BOOL statusChanged;
	NSString* settingId;
	NSString* entityName;
	NSString* etag;
	double newCacheInterval;
}
@property(assign, nonatomic) BOOL statusChanged;
@property(assign, nonatomic) double newCacheInterval;
@property(copy, nonatomic) NSString* etag;
@property(copy, nonatomic) NSString* entityName;
@property(copy, nonatomic) NSString* settingId;
-(BOOL)removeInvalidCache;
-(int)addObjects:(id)objects;
-(void)setupLastRefreshedTime;
-(void)updateLastRefreshedTimeOfCache:(id)cache;
-(void)refreshCacheInfo:(id)info etag:(id)etag;
-(void)setNewViewDisplay;
-(void)fetchNewCache;
-(void)fetchCachedList;
-(void)initFetch;
-(void)updateCacheArray:(id)array;
-(void)updateCacheArray;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface LCListViewController : LCCafeBaseViewController <UITableViewDataSource, UITableViewDelegate, UIWebViewDelegate> {
	BOOL refreshing;
	BOOL hasError;
	BOOL scrollTopNeeded;
	BOOL isShowNewView;
	BOOL isFetchMore;
	BOOL isFetchByPullup;
	BOOL isFetchByPulldown;
	BOOL showRefreshHeader;
	LCClientOperation* fetchOperation;
	NSString* refreshTime;
	int holeAddIndex;
	int fetchedCount;
	NSString* videoUrl;
	float beforeOffsetY;
	UITableView* listTableView;
	LCObjectList* objectList;
}
@property(assign, nonatomic, getter=isShowRefreshHeader) BOOL showRefreshHeader;
@property(retain, nonatomic) LCObjectList* objectList;
@property(assign, nonatomic) UITableView* listTableView;
@property(assign, nonatomic) float beforeOffsetY;
@property(assign, nonatomic) BOOL isFetchByPulldown;
@property(assign, nonatomic) BOOL isFetchByPullup;
@property(assign, nonatomic) BOOL isFetchMore;
@property(assign, nonatomic) BOOL isShowNewView;
@property(copy, nonatomic) NSString* videoUrl;
@property(assign, nonatomic) int fetchedCount;
@property(assign, nonatomic) int holeAddIndex;
@property(assign, nonatomic) BOOL scrollTopNeeded;
@property(copy, nonatomic) NSString* refreshTime;
@property(assign, nonatomic) BOOL hasError;
@property(assign, nonatomic) BOOL refreshing;
@property(assign, nonatomic) LCClientOperation* fetchOperation;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(id)findButtonInView:(id)view;
-(void)scrollToTop;
-(void)goMovie:(id)movie index:(int)index delegate:(id)delegate;
-(void)backPopAction;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)adjustOverlappedOffset;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
-(void)showPostDetail:(id)detail commentId:(id)anId;
-(void)showErrorForCafe:(id)cafe usingAlert:(BOOL)alert;
-(void)showErrorForCafe:(id)cafe;
-(void)normalizeFooterState;
-(void)normalizeHeaderState;
-(void)refresh;
-(void)reloadForNoUpdate;
-(void)reload;
-(unsigned)heightForRow:(unsigned)row;
-(id)cellForRow:(unsigned)row forTableView:(id)tableView;
-(id)errorCell;
-(id)noDataCell;
-(id)loadingCell;
-(id)viewForFetchMore;
-(id)viewForTableHeader;
-(void)fetchMore;
-(void)fetch;
-(BOOL)isLastPage;
-(void)retryButtonTapped:(id)tapped;
-(void)prepareForReload;
-(id)cursorID;
-(int)addObjects:(id)objects;
-(int)addObjects:(id)objects cursorID:(id)anId;
-(void)setCursorIDForItems:(id)items cursorID:(id)anId;
-(void)cancelFetching;
-(BOOL)isFetching;
-(unsigned)listCount;
-(void)resetList;
-(void)updateFetchMoreView;
-(void)updateDidEnd;
-(void)updateFooterWillBeginWithUI:(BOOL)updateFooter;
-(void)updateHeaderWillBeginWithUI:(BOOL)updateHeader;
-(void)updateFooterView:(id)view offset:(float)offset;
-(void)updateHeaderView:(id)view inTableView:(id)tableView offset:(float)offset;
-(id)headerView;
@end

__attribute__((visibility("hidden")))
@interface LCCafeDetailViewController : LCFetchedListViewController <LCProgressHUDDelegate, LCPostWriteViewControllerDelegate> {
	BOOL beginHeightCalc;
	BOOL isFirstLoad;
	LCCafe* cafe;
	NSMutableArray* boards;
	LCBoard* board;
	UIButton* actionButton;
	UIView* tabBarView;
	float scrollPositionDelta;
	int lastUpdateCount;
	NSArray* scrollPositions;
}
@property(assign, nonatomic) BOOL isFirstLoad;
@property(retain, nonatomic) NSArray* scrollPositions;
@property(assign, nonatomic) int lastUpdateCount;
@property(assign, nonatomic) float scrollPositionDelta;
@property(assign, nonatomic) BOOL beginHeightCalc;
@property(assign, nonatomic) UIView* tabBarView;
@property(assign, nonatomic) UIButton* actionButton;
@property(retain, nonatomic) LCBoard* board;
@property(retain, nonatomic) NSMutableArray* boards;
@property(retain, nonatomic) LCCafe* cafe;
-(void)hudWasHidden:(id)hidden;
-(void)objectList:(id)list didDeleteObject:(id)object atIndex:(unsigned)index;
-(void)objectList:(id)list didReplaceObject:(id)object with:(id)with atIndex:(unsigned)index;
-(void)objectList:(id)list didInsertObject:(id)object;
-(void)postWriteFinished;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)operation:(id)operation didGetCafeInfo:(id)info boards:(id)boards linkableUserRegularExpressions:(id)expressions error:(id)error;
-(void)operation:(id)operation didGetCafePosts:(id)posts cursorId:(id)anId etag:(id)etag error:(id)error;
-(void)retryButtonTapped:(id)tapped;
-(void)showPostDetail:(id)detail commentId:(id)anId;
-(id)noDataCell;
-(unsigned)heightForRow:(unsigned)row;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)cellForRow:(unsigned)row forTableView:(id)tableView;
-(void)setNoPostsBackgroundViewIfNeeded;
-(void)prepareForReload;
-(void)fetchMore;
-(void)fetch;
-(void)fetchCachedList;
-(BOOL)removeInvalidCache;
-(void)refreshCacheInfo:(id)info etag:(id)etag;
-(void)updateCacheArray:(id)array;
-(int)addObjects:(id)objects;
-(void)setupLastRefreshedTime;
-(void)refresh;
-(void)writePost;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithCafe:(id)cafe;
-(id)initWithCafe:(id)cafe boardId:(id)anId;
-(id)postDefaultBoard;
-(unsigned)currentBoardCount;
-(void)adjustScrollPosition;
-(void)saveCurrentScrollPosition;
-(id)currentScrollPosition;
-(void)setNewViewDisplay;
-(void)updateActionButtonImage;
-(void)setupWritableButton;
-(void)fetchCafeInfo;
-(void)setupTabBar;
-(void)setupNavigationBar;
-(void)setupTitleView;
@end

__attribute__((visibility("hidden")))
@interface LCCommentViewCell : LCBaseViewCell {
	LCFullCommentView* commentView;
	UIImageView* shadowImageView;
	UIView* bottomLineView;
}
@property(assign, nonatomic) UIView* bottomLineView;
@property(assign, nonatomic) UIImageView* shadowImageView;
@property(assign, nonatomic) LCFullCommentView* commentView;
+(float)height:(id)height;
+(id)cellOfTableView:(id)tableView withComment:(id)comment post:(id)post firstRow:(BOOL)row;
-(void)dealloc;
-(void)fillContentView:(id)view post:(id)post firstRow:(BOOL)row;
-(void)setupContentView;
-(void)setupBackgroundView;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface LCFetchMoreCommentViewCell : UITableViewCell {
}
+(float)height;
+(id)fetchMoreCell:(BOOL)cell forReply:(BOOL)reply firstRow:(BOOL)row;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface LCImagePreloader : NSObject <LCRemoteImageObserving> {
	NSOperationQueue* mOperationQueue;
	NSMutableArray* mImageBuffer;
	NSFileManager* mFileManager;
}
+(id)sharedPreloader;
-(void)removeObjectFromImageBuffer:(id)imageBuffer;
-(void)addObjectToImageBuffer:(id)imageBuffer;
-(void)preloadPosts:(id)posts;
-(void)preloadPostEnd:(id)end;
-(void)remoteImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCLikeUsersView : UIButton {
	LCProfileImageView* _likeProfileImageViews[7];
	LCMixPost* post;
	UIImageView* shadowImageView;
	UIView* bottomLineView;
	UIImageView* likeIconView;
	UILabel* likeCountLabel;
}
@property(assign, nonatomic) UILabel* likeCountLabel;
@property(assign, nonatomic) UIImageView* likeIconView;
@property(assign, nonatomic) UIView* bottomLineView;
@property(assign, nonatomic) UIImageView* shadowImageView;
@property(assign, nonatomic) LCMixPost* post;
+(float)height:(id)height;
-(void)dealloc;
-(id)init;
-(void)updateWithLike:(id)like;
-(void)setupViews;
-(void)setHighlighted:(BOOL)highlighted;
@end

__attribute__((visibility("hidden")))
@interface LCLikeUsersViewCell : LCBaseViewCell {
	LCLikeUsersView* likeUsersView;
	LCMixPost* post;
}
@property(retain, nonatomic) LCMixPost* post;
@property(assign, nonatomic) LCLikeUsersView* likeUsersView;
+(id)cellOfTableView:(id)tableView withLikeUsers:(id)likeUsers;
-(void)updateWithLike:(id)like;
-(void)likeUserMain;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface LCLikeUsersViewController : LCListViewController {
	LCMixPost* post;
	UILabel* likeCountLabel;
}
@property(assign, nonatomic) UILabel* likeCountLabel;
@property(retain, nonatomic) LCMixPost* post;
-(void)operation:(id)operation didGetPostLikes:(id)likes cursorId:(id)anId error:(id)error;
-(id)noDataCell;
-(unsigned)heightForRow:(unsigned)row;
-(id)cellForRow:(unsigned)row forTableView:(id)tableView;
-(void)fetchMore;
-(void)fetch;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithPost:(id)post;
-(void)setupNavigationBar;
@end

__attribute__((visibility("hidden")))
@interface LCLikeUserViewCell : LCUserViewCell {
	UILabel* dateLabel;
	UIView* bottomLineView;
}
@property(assign, nonatomic) UIView* bottomLineView;
@property(assign, nonatomic) UILabel* dateLabel;
+(id)cellWithLike:(id)like forTableView:(id)tableView;
-(void)updateLayout;
-(void)fillContentAdditionView:(id)view;
-(void)setupContentAdditionView;
@end

__attribute__((visibility("hidden")))
@interface LCMediaViewCell : LCBaseViewCell {
	LCRemoteImageButton* remoteImageButton;
	LCMixPost* mixPost;
	unsigned mediaIndex;
	id delegate;
}
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) unsigned mediaIndex;
@property(retain, nonatomic) LCMixPost* mixPost;
@property(assign, nonatomic) LCRemoteImageButton* remoteImageButton;
+(float)height:(id)height lastRow:(BOOL)row;
+(id)cellOfTableView:(id)tableView post:(id)post mediaIndex:(unsigned)index;
+(CGSize)fitSizeForSize:(CGSize)size;
-(void)showMedia:(id)media;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCPostDetailView : LCPostView {
	id delegate;
}
@property(assign, nonatomic) id delegate;
-(void)setPostInfo:(id)info;
-(void)resizeContentLabel:(id)label;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(void)removeMenu;
-(void)menuItemClicked:(id)clicked;
-(void)handleLongPress:(id)press;
-(BOOL)becomeFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)menuWillShow:(id)menu;
-(void)menuWillHide:(id)menu;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)initLongPress:(id)press;
@end

__attribute__((visibility("hidden")))
@interface LCPostDetailViewController : LCListViewController <LCPostWriteViewControllerDelegate> {
	BOOL isAllowdCafe;
	BOOL isModal;
	id delegate;
	LCMixPost* post;
	NSIndexPath* indexPathToSelect;
	NSIndexPath* indexPathToDelete;
	NSString* slideType;
	NSString* slideValue;
	LCSlidePost* slidePost;
	UIButton* prevButton;
	UIButton* nextButton;
	UIButton* refreshButton;
	unsigned boardCount;
	UIView* tabBarView;
	UIButton* buttonForActionSheet;
	UIActivityIndicatorView* activityIndicator;
	NSString* commentCursorID;
	LCPostDetailView* postDetailView;
	LCComment* parentComment;
	LCBoard* board;
	NSString* cafeId;
	NSString* commentId;
	NSString* refreshPostTime;
	NSString* refreshCommentsTime;
	unsigned fetchingSection;
	unsigned fetchingRow;
	LCComment* deletedComment;
	float offsetYBeforeDelete;
	float offsetSumBeforeDelete;
	LCBigLikeButton* likeButton;
	LCBigCommentButton* commentButton;
	NSString* cafeName;
	long long lastCommentId;
	long long prevLastCommentId;
}
@property(retain, nonatomic) NSString* cafeName;
@property(assign, nonatomic) LCBigCommentButton* commentButton;
@property(assign, nonatomic) LCBigLikeButton* likeButton;
@property(assign, nonatomic) float offsetSumBeforeDelete;
@property(assign, nonatomic) float offsetYBeforeDelete;
@property(retain, nonatomic) LCComment* deletedComment;
@property(assign, nonatomic) long long prevLastCommentId;
@property(assign, nonatomic) long long lastCommentId;
@property(assign, nonatomic) unsigned fetchingRow;
@property(assign, nonatomic) unsigned fetchingSection;
@property(retain, nonatomic) NSString* refreshCommentsTime;
@property(retain, nonatomic) NSString* refreshPostTime;
@property(retain, nonatomic) NSString* commentId;
@property(retain, nonatomic) NSString* cafeId;
@property(assign, nonatomic) BOOL isModal;
@property(assign, nonatomic) BOOL isAllowdCafe;
@property(retain, nonatomic) LCBoard* board;
@property(assign, nonatomic) LCComment* parentComment;
@property(retain, nonatomic) LCPostDetailView* postDetailView;
@property(copy, nonatomic) NSString* commentCursorID;
@property(assign, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(assign, nonatomic) UIButton* buttonForActionSheet;
@property(assign, nonatomic) UIView* tabBarView;
@property(assign, nonatomic) unsigned boardCount;
@property(assign, nonatomic) UIButton* refreshButton;
@property(assign, nonatomic) UIButton* nextButton;
@property(assign, nonatomic) UIButton* prevButton;
@property(retain, nonatomic) LCSlidePost* slidePost;
@property(retain, nonatomic) NSString* slideValue;
@property(retain, nonatomic) NSString* slideType;
@property(copy, nonatomic) NSIndexPath* indexPathToDelete;
@property(copy, nonatomic) NSIndexPath* indexPathToSelect;
@property(retain, nonatomic) LCMixPost* post;
@property(assign, nonatomic) id delegate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)forceRefresh;
-(void)postEditFinished:(id)finished;
-(void)hudWasHidden:(id)hidden;
-(void)needsRefresh:(id)refresh;
-(void)actionAddressCopy:(id)copy;
-(void)actionDelete:(id)aDelete;
-(void)actionEdit:(id)edit;
-(void)operation:(id)operation didGetPostComments:(id)comments cursorId:(id)anId lastCommentId:(long long)anId4 commentReplyTotalCount:(int)count error:(id)error;
-(void)operation:(id)operation didGetReplies:(id)replies cursorId:(id)anId error:(id)error;
-(void)operation:(id)operation didDeleteComment:(id)comment;
-(void)scrollAfterDelete;
-(void)operation:(id)operation didDeletePost:(id)post;
-(void)operation:(id)operation didDeleteLike:(id)like;
-(void)operation:(id)operation didCreateLike:(id)like;
-(void)operation:(id)operation didGetSlidePostInfo:(id)info lastCommentId:(long long)anId error:(id)error;
-(void)checkAddedComments:(id)comments lastCommentId:(long long)anId;
-(void)retryButtonTapped:(id)tapped;
-(void)didGetLikeResponse:(id)response error:(id)error;
-(void)sendLike;
-(void)parentWriteComment;
-(void)writeComment;
-(void)sendActionIfUserIsEligible:(id)eligible;
-(void)listButtonTapped:(id)tapped;
-(void)showPrevNextPage:(id)page;
-(void)preActionShowPrevNextPage;
-(void)showPost:(id)post;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)setCommentPositionToTop:(BOOL)top;
-(void)updateHasReply;
-(void)fetchMoreReply:(id)reply cursorID:(id)anId;
-(void)fetchMoreComment;
-(void)fetchMore;
-(void)fetch;
-(id)noDataCell;
-(void)reload;
-(void)removeObjectAtIndex:(unsigned)index atSection:(unsigned)section;
-(id)objectAtIndex:(unsigned)index atSection:(unsigned)section;
-(unsigned)objectCountAtSection:(unsigned)section;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithPostAndType:(id)postAndType board:(id)board commentId:(id)anId isModal:(BOOL)modal delegate:(id)delegate;
-(id)getOldestCursorId;
-(void)refreshDelegate:(BOOL)delegate;
-(void)redrawLikeUsers:(BOOL)users;
-(BOOL)isMoreComment;
-(void)setButtonSetting:(id)setting;
-(void)resetCommentButton;
-(void)resetLikeButton;
-(void)setupEtcItem;
-(void)setupContentView;
-(void)setupTitle:(id)title;
-(void)setNavigationBarEnable:(BOOL)enable;
-(void)setupNavigationBar;
-(void)resetOtherButton;
-(BOOL)isPreviousViewControllerCafeDetail;
-(BOOL)isMe:(id)me;
-(void)cancelButtonTapped;
-(void)showOtherActionSheet;
-(void)refreshSlideInfo;
-(void)setupSlidePostInfo;
-(void)showErrorToHUD:(id)hud;
@end

__attribute__((visibility("hidden")))
@interface LCWriteCommentViewController : LCCafeBaseViewController <UITextViewDelegate, UITextFieldDelegate, LCLinkableUserCandidatesViewDelegate> {
	BOOL isKeyboardShow;
	id delegate;
	LCPostTextEditView* textEditView;
	NSString* postId;
	LCComment* comment;
	LCClientOperation* commentWriterOperation;
	NSTimer* commentWriterTimer;
	LCLinkableUserScanner* mLinkableUserScanner;
	LCLinkableUserCandidatesView* mLinkableUserCandidatesView;
}
@property(assign, nonatomic) LCLinkableUserCandidatesView* mLinkableUserCandidatesView;
@property(retain, nonatomic) LCLinkableUserScanner* mLinkableUserScanner;
@property(assign, nonatomic) BOOL isKeyboardShow;
@property(retain, nonatomic) NSTimer* commentWriterTimer;
@property(retain, nonatomic) LCClientOperation* commentWriterOperation;
@property(retain, nonatomic) LCComment* comment;
@property(copy, nonatomic) NSString* postId;
@property(assign, nonatomic) LCPostTextEditView* textEditView;
@property(retain, nonatomic) id delegate;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)rotateView:(int)view;
-(void)keyboardWillShow:(id)keyboard;
-(void)applyKeyboardSizeChange:(float)change;
-(void)hudWasHidden:(id)hidden;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)operation:(id)operation didCreateComment:(id)comment error:(id)error;
-(void)dismissLinkableUserCandidatesView;
-(void)adjustTextViewContentOffsetForIos7;
-(id)textForLinkableUserCandidatesView;
-(void)setTextForLinkableUserCandidatesView:(id)linkableUserCandidatesView;
-(void)linkableUserCandidatesViewDidCancel;
-(void)linkableUserCandidatesViewDidSelected:(id)linkableUserCandidatesView;
-(void)handleCommentWriteTimer:(id)timer;
-(void)saveComment;
-(void)close;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidChange:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithComment:(id)comment comment:(id)comment2 delegate:(id)delegate;
-(void)showErrorForExceedingMaxLength;
-(void)showSummonCandidatesView:(id)view;
-(void)resolveLinkableUsersAndSavePost;
-(void)resolveLinkableUserCandicatesArrayWhenReply:(id)reply;
-(void)layoutLandScapeView;
-(void)layoutPortraitView;
-(void)toggleButton;
-(void)setupEtcItem;
-(void)setupNavigationBar;
-(void)setupBackgroundView;
-(void)updateBarButtonItems:(BOOL)items;
-(void)cancelAction;
@end

__attribute__((visibility("hidden")))
@interface LCPostAttachBar : UIView {
	id<LCPostAttachBarDelegate> delegate;
	NSArray* buttons;
}
@property(retain, nonatomic) NSArray* buttons;
@property(assign, nonatomic) id<LCPostAttachBarDelegate> delegate;
-(void)actionButton:(id)button;
-(void)setHighlightState:(BOOL)state atIndex:(int)index;
-(void)animateButtonAtIndex:(int)index;
-(void)setSelectState:(BOOL)state atIndex:(int)index;
-(id)buttonAtIndex:(int)index;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCPostProgressView : UIView {
	UIView* bgBlackView;
	UIImageView* bgImageView;
	UIImageView* bgCountBar;
	UIImageView* bgPercentBar;
	UIImageView* thumbnailView;
	UIImageView* bgThumbView;
	UIImageView* playIcon;
	UIButton* cancelButton;
	UIImageView* countBar;
	UIImageView* percentBar;
	UILabel* countLabel;
	UILabel* countAllLabel;
	UILabel* percentLabel;
	NSString* mediaType;
	id cancelTarget;
	SEL cancelAction;
	int countAll;
	int count;
	int percent;
	UIImage* thumbnail;
}
@property(assign, nonatomic) UIImage* thumbnail;
@property(assign, nonatomic) int percent;
@property(assign, nonatomic) int count;
@property(assign, nonatomic) int countAll;
@property(assign, nonatomic) SEL cancelAction;
@property(assign, nonatomic) id cancelTarget;
@property(retain, nonatomic) NSString* mediaType;
@property(assign, nonatomic) UILabel* percentLabel;
@property(assign, nonatomic) UILabel* countAllLabel;
@property(assign, nonatomic) UILabel* countLabel;
@property(assign, nonatomic) UIImageView* percentBar;
@property(assign, nonatomic) UIImageView* countBar;
@property(assign, nonatomic) UIButton* cancelButton;
@property(assign, nonatomic) UIImageView* playIcon;
@property(assign, nonatomic) UIImageView* bgThumbView;
@property(assign, nonatomic) UIImageView* thumbnailView;
@property(assign, nonatomic) UIImageView* bgPercentBar;
@property(assign, nonatomic) UIImageView* bgCountBar;
@property(assign, nonatomic) UIImageView* bgImageView;
@property(assign, nonatomic) UIView* bgBlackView;
-(void)dealloc;
-(void)didTappedCancelUploadButton;
-(void)adjustCountLabelFrame;
-(void)layoutSubviews;
-(void)setCancelTarget:(id)target action:(SEL)action;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCPostTextEditView : UITextView {
	UILabel* placeholderLabel;
	UIEdgeInsets myInsets;
}
@property(assign, nonatomic) UILabel* placeholderLabel;
@property(assign, nonatomic) UIEdgeInsets myInsets;
-(void)showTextViewHolderText:(BOOL)text;
-(id)textView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCPostWriteViewController : LCPostWriteBaseViewController <UITextViewDelegate, LCPostAttachBarDelegate, LCUploadListViewDelegate, LCAttachStickerListViewDelegate, LCLinkableUserCandidatesViewDelegate, LCMediaUploaderDelegate, LCImageViewControllerDataSource, UIImagePickerControllerDelegate, UINavigationControllerDelegate, LGImagePickerDelegate> {
	BOOL _editModeFlag;
	BOOL _shouldPopOnCafeStack;
	BOOL _isAlreadyRequestCreatePost;
	id<LCPostWriteViewControllerDelegate> _delegate;
	NSString* _postIdForEdit;
	LCCafe* _cafe;
	LCBoard* _postBoard;
	LCClientOperation* _mOperation;
	LCLinkableUserScanner* _mLinkableUserScanner;
	LCLinkableUserCandidatesView* _mLinkableUserCandidatesView;
}
@property(assign, nonatomic) BOOL isAlreadyRequestCreatePost;
@property(assign, nonatomic) BOOL shouldPopOnCafeStack;
@property(assign, nonatomic) LCLinkableUserCandidatesView* mLinkableUserCandidatesView;
@property(retain, nonatomic) LCLinkableUserScanner* mLinkableUserScanner;
@property(retain, nonatomic) LCClientOperation* mOperation;
@property(assign, nonatomic) LCPostProgressView* postProgressView;
@property(retain, nonatomic) LCBoard* postBoard;
@property(retain, nonatomic) LCCafe* cafe;
@property(retain, nonatomic) NSString* postIdForEdit;
@property(assign, nonatomic) BOOL editModeFlag;
@property(assign, nonatomic) id<LCPostWriteViewControllerDelegate> delegate;
-(void)dismissLinkableUserCandidatesView;
-(void)setEditPost:(id)post;
-(void)showExccedMediaCountGuide;
-(void)resolveLinkableUsersAndSavePost;
-(void)updateViewsForLandScape:(int)landScape;
-(int)attachedCount;
-(int)attachedMediaCount;
-(void)cancelPostWriteOperation;
-(void)showLinkableUserCandidatesView:(id)view;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)lgImagePickerControllerDidReachMaxLimit:(id)lgImagePickerController;
-(id)textForLinkableUserCandidatesView;
-(void)setTextForLinkableUserCandidatesView:(id)linkableUserCandidatesView;
-(void)linkableUserCandidatesViewDidCancel;
-(void)linkableUserCandidatesViewDidSelected:(id)linkableUserCandidatesView;
-(void)operation:(id)operation didEditPost:(id)post error:(id)error;
-(void)operation:(id)operation didCreatePost:(id)post error:(id)error;
-(void)hudWasHidden:(id)hidden;
-(void)showErrorForExceedingMaxLength;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)didTappedAddMediaByMultiVideoPicker;
-(void)didTappedAddMediaByMultiImagePicker;
-(void)showImageDetailWithIndex:(int)index;
-(float)uploadImageQuality;
-(int)uploadImageMaxSize;
-(BOOL)checkAttachMoreAndShowAlert;
-(BOOL)canAttachMore;
-(int)maxAttachCount;
-(void)savePost;
-(void)cancelAction;
-(void)removeTempPostIfNeeds;
-(void)updateViewsForViewType:(int)viewType;
-(void)makeNaviBar;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithCafe:(id)cafe postBoard:(id)board delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface LCUploadListView : UIView <LCHorizontalTableViewDelegate> {
	float mScrollOffsetY[6];
	LCHorizontalTableView* _mTableView;
	UIImageView* _stateMark;
	UIButton* _leftButton;
	UIButton* _centerButton;
	UIButton* _rightButton;
	int _viewState;
	id<LCUploadListViewDelegate> _delegate;
}
@property(assign, nonatomic) id<LCUploadListViewDelegate> delegate;
@property(assign, nonatomic) int viewState;
@property(assign, nonatomic) UIButton* rightButton;
@property(assign, nonatomic) UIButton* centerButton;
@property(assign, nonatomic) UIButton* leftButton;
@property(assign, nonatomic) UIImageView* stateMark;
@property(assign, nonatomic) LCHorizontalTableView* mTableView;
-(void)removeKeyValueObserver;
-(void)deleteUploadMedia:(id)media;
-(void)reloadUploadListTableView:(int)view;
-(void)adjustButtons;
-(id)currentReorderingUploadList;
-(BOOL)isTableViewScrollable;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)horizontalNoDataCell;
-(void)didTouchRowAtIndexPath:(id)indexPath;
-(void)moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath2;
-(float)heightForRowAtIndexPath:(id)indexPath;
-(BOOL)isEmpty;
-(int)numberOfRows;
-(void)fillCellContentView:(id)view atIndexPath:(id)indexPath;
-(id)setUpCellContentView:(id)view;
-(void)actionCancelButton:(id)button;
-(void)actionRightButton;
-(void)actionCenterButton;
-(void)actionLeftButton;
-(void)setViewState:(int)state hidden:(BOOL)hidden;
-(void)setCurrentContentOffset;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame viewState:(int)state;
@end

__attribute__((visibility("hidden")))
@interface LCLocation : LCBaseModel {
	NSString* name;
	NSString* address;
	XXStruct_zYrK5D coordinate;
}
@property(assign, nonatomic) XXStruct_zYrK5D coordinate;
@property(retain, nonatomic) NSString* address;
@property(retain, nonatomic) NSString* name;
-(id)displayName;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithAnnotation:(id)annotation;
-(id)initWithGoogleLocalSearchDictionary:(id)googleLocalSearchDictionary;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCLocationManager : NSObject <CLLocationManagerDelegate> {
	id delegate;
	CLLocationManager* locationManager;
	CLLocation* bestEffortAtLocation;
}
@property(retain, nonatomic) CLLocation* bestEffortAtLocation;
@property(retain, nonatomic) CLLocationManager* locationManager;
@property(assign, nonatomic) id delegate;
+(BOOL)isExpiredLocation:(id)location;
+(BOOL)locationServicesEnabled;
+(id)sharedManager;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)stop;
-(void)start:(id)start;
-(void)dealloc;
-(void)stopUpdatingLocationWithTimeOut;
@end

__attribute__((visibility("hidden")))
@interface LCMapAnnotation : NSObject <MKAnnotation> {
	BOOL loading;
	int annotationType;
	NSString* subtitle;
	NSString* title;
	XXStruct_zYrK5D coordinate;
}
@property(assign, nonatomic, getter=isLoading) BOOL loading;
@property(assign, nonatomic) XXStruct_zYrK5D coordinate;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
@property(assign) int annotationType;
-(void)dealloc;
-(id)initWithCoordinate:(XXStruct_zYrK5D)coordinate annotationType:(int)type title:(id)title subtitle:(id)subtitle;
@end

__attribute__((visibility("hidden")))
@interface LCMapEndViewController : LCCafeBaseViewController <MKMapViewDelegate> {
	BOOL isForEndView;
	LCLocation* location;
	MKMapView* mapView;
	UIImageView* addressBackImageView;
	UILabel* addressLabel;
}
@property(assign, nonatomic) UILabel* addressLabel;
@property(assign, nonatomic) UIImageView* addressBackImageView;
@property(assign, nonatomic) MKMapView* mapView;
@property(retain, nonatomic) LCLocation* location;
@property(assign, nonatomic) BOOL isForEndView;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)viewDidUnload;
-(void)sendActionSheet;
-(void)sendToGoogleMap;
-(void)cancelButtonTapped;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithLocation:(id)location isForEndView:(BOOL)endView;
-(id)initWithLocationDic:(id)locationDic isForEndView:(BOOL)endView;
-(void)setupView;
-(void)setupNavigationBar;
@end

__attribute__((visibility("hidden")))
@interface LCImageDetailView : UIScrollView <UIScrollViewDelegate, LCRemoteImageObserving, LCImageDetailErrorViewDelegate> {
	id _eventDelegate;
	UIImageView* _imageView;
	UIActivityIndicatorView* _activityIndicator;
	LCImageDetailErrorView* _errorView;
	LCRemoteImage* _remoteImage;
	NSURL* _url;
	NSString* _channelToken;
	LCImage* _uploadImage;
}
@property(retain, nonatomic) LCImage* uploadImage;
@property(retain, nonatomic) NSString* channelToken;
@property(retain, nonatomic) NSURL* url;
@property(assign, nonatomic) LCRemoteImage* remoteImage;
@property(assign, nonatomic) LCImageDetailErrorView* errorView;
@property(assign, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(assign, nonatomic) UIImageView* imageView;
@property(assign, nonatomic) id eventDelegate;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)photoErrorView:(id)view didTapRetryButton:(id)button;
-(void)remoteImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(id)image;
-(void)loadOriginalImage:(id)image;
-(void)loadImage:(id)image channelToken:(id)token uploadImage:(id)image3;
-(void)setContentSize:(CGSize)size;
-(void)centerImage;
-(void)resetZoomScale;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)singleTab;
-(void)toggleScaleImageView:(CGPoint)view;
-(void)setImage:(id)image;
-(float)maxScaleForSize;
-(float)minScaleForSize:(CGSize)size;
-(BOOL)isAssetURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface LCImageScrollView : UIScrollView {
	LCImageDetailView* _currentImageView;
	LCImageDetailView* _prevImageView;
	LCImageDetailView* _nextImageView;
}
@property(assign, nonatomic) LCImageDetailView* nextImageView;
@property(assign, nonatomic) LCImageDetailView* prevImageView;
@property(assign, nonatomic) LCImageDetailView* currentImageView;
-(id)currentImage;
-(void)loadOriginalImage:(id)image;
-(void)loadNextImageByURL:(id)url image:(id)image channelToken:(id)token uploadImage:(id)image4;
-(void)loadNextImageByURL:(id)url channelToken:(id)token;
-(void)loadCurrentImageByURL:(id)url image:(id)image channelToken:(id)token uploadImage:(id)image4;
-(void)loadCurrentImageByURL:(id)url channelToken:(id)token;
-(void)loadPrevImageByURL:(id)url image:(id)image channelToken:(id)token uploadImage:(id)image4;
-(void)loadPrevImageByURL:(id)url channelToken:(id)token;
-(void)updateContentSize;
-(void)resetCurrentImageZoomScale;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCImageViewController : LCCafeBaseViewController <UIScrollViewDelegate> {
	BOOL isForEndView;
	NSMutableArray* migUrls;
	UILabel* countLabel;
	LCImageScrollView* mScrollView;
	int currentIndex;
	id<LCImageViewControllerDataSource> mDataSource;
	id delegate;
	NSString* channelToken;
	int imageMaxSize;
	UIImageView* naviBarImage;
	UIButton* leftButton;
	UIButton* saveButton;
	UIImageView* _bottomBarView;
}
@property(assign, nonatomic) UIButton* saveButton;
@property(assign, nonatomic) UIButton* leftButton;
@property(assign, nonatomic) UIImageView* naviBarImage;
@property(assign, nonatomic) UIImageView* bottomBarView;
@property(assign, nonatomic) int imageMaxSize;
@property(retain, nonatomic) NSString* channelToken;
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) id<LCImageViewControllerDataSource> mDataSource;
@property(assign, nonatomic) int currentIndex;
@property(assign, nonatomic) LCImageScrollView* mScrollView;
@property(assign, nonatomic) UILabel* countLabel;
@property(retain, nonatomic) NSMutableArray* migUrls;
@property(assign, nonatomic) BOOL isForEndView;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)toggleTopBarHidden;
-(void)updateTopBarFrame;
-(int)preferredStatusBarStyle;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithStartIndex:(int)startIndex dataSource:(id)source;
-(id)initWithMediaArray:(id)mediaArray startIndex:(int)index isForEndView:(BOOL)endView;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)saveImage;
-(void)nextActioned;
-(void)prevActioned;
-(void)loadImage;
-(void)loadUploadImageAtIndex:(unsigned)index position:(int)position;
-(id)imageURLAtIndex:(int)index;
-(void)statusBarFrameWillChange:(id)statusBarFrame;
-(void)setupCountLabel;
-(unsigned)imageCount;
-(id)imageWithImage:(id)image scaledToSize:(CGSize)size;
-(void)updateBarButtonItems;
-(void)setupNavigationItem;
-(void)setupScrollView;
-(void)closeAction;
@end

__attribute__((visibility("hidden")))
@interface LCMedia : LCBaseModel {
	BOOL snapMovieType;
	NSString* mediaId;
	NSString* mediaType;
	NSString* oid;
	NSString* thumbnailOid;
	NSString* runningTime;
	int fileSize;
	int fileWidth;
	int fileHeight;
}
@property(assign, nonatomic) int fileHeight;
@property(assign, nonatomic) int fileWidth;
@property(assign, nonatomic) int fileSize;
@property(retain, nonatomic) NSString* runningTime;
@property(retain, nonatomic) NSString* thumbnailOid;
@property(retain, nonatomic) NSString* oid;
@property(assign, nonatomic) BOOL snapMovieType;
@property(retain, nonatomic) NSString* mediaType;
@property(copy, nonatomic) NSString* mediaId;
+(id)mediasFromArray:(id)array;
+(id)createOBSObjectId:(BOOL)anId;
-(id)objectID;
-(id)thumbnailUrl592x170;
-(id)thumbnailUrl592x870;
-(id)thumbnailUrl300x0;
-(id)thumbnailUrl228x0;
-(id)thumbnailUrl140x140;
-(id)thumbnailUrl;
-(id)migUrl;
-(id)url;
-(id)oidForThumbnail;
-(BOOL)isVideo;
-(BOOL)isImage;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCBaseModel : NSObject {
	NSString* cursorID;
}
@property(copy, nonatomic) NSString* cursorID;
-(BOOL)isHole;
-(id)dateInFormat:(double)format;
-(id)objectID;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCBoard : LCBaseModel {
	BOOL isPostDefaultBoard;
	NSString* boardId;
	LCCafe* cafe;
	NSString* name;
}
@property(assign, nonatomic) BOOL isPostDefaultBoard;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) LCCafe* cafe;
@property(retain, nonatomic) NSString* boardId;
-(id)objectID;
-(BOOL)isAllBoard;
-(BOOL)isPublicType;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCCafe : LCBaseModel {
	BOOL newFlag;
	BOOL isJoined;
	NSString* cafeId;
	NSString* type;
	NSString* name;
	NSString* lineGroupId;
	NSString* lineFriendMid;
	unsigned publicBoardCount;
}
@property(assign, nonatomic) unsigned publicBoardCount;
@property(retain, nonatomic) NSString* lineFriendMid;
@property(retain, nonatomic) NSString* lineGroupId;
@property(assign, nonatomic) BOOL isJoined;
@property(assign, nonatomic) BOOL newFlag;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSString* cafeId;
-(id)uniqueId;
-(id)objectID;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCComment : LCBaseModel {
	BOOL hasReply;
	BOOL isReplyComment;
	BOOL isFetchMoreReply;
	BOOL truncated;
	BOOL isAddedComment;
	NSString* commentId;
	NSString* text;
	NSString* linkableUserReplacedText;
	LCUser* owner;
	NSDate* created;
	NSString* status;
	NSString* parentCommentId;
	NSArray* linkableUsers;
	float listHeight;
	float fullHeight;
	int linkableUserCount;
	int linkableUserRegularVersion;
}
@property(assign, nonatomic) int linkableUserRegularVersion;
@property(assign, nonatomic) int linkableUserCount;
@property(assign, nonatomic) BOOL isAddedComment;
@property(assign, nonatomic) BOOL truncated;
@property(assign, nonatomic) float fullHeight;
@property(assign, nonatomic) float listHeight;
@property(retain, nonatomic) NSArray* linkableUsers;
@property(assign, nonatomic) BOOL isFetchMoreReply;
@property(retain, nonatomic) NSString* parentCommentId;
@property(retain, nonatomic) NSString* status;
@property(retain, nonatomic) NSDate* created;
@property(assign, nonatomic) BOOL isReplyComment;
@property(assign, nonatomic) BOOL hasReply;
@property(retain, nonatomic) LCUser* owner;
@property(retain) NSString* linkableUserReplacedText;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* commentId;
+(id)commentsFromArray:(id)array;
-(id)textWithLinkableUserReplacedText;
-(id)description;
-(id)objectID;
-(BOOL)isDeleted;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCLike : LCBaseModel {
	NSString* likeId;
	LCUser* owner;
	NSDate* created;
}
@property(retain, nonatomic) NSDate* created;
@property(retain, nonatomic) LCUser* owner;
@property(retain, nonatomic) NSString* likeId;
+(id)likesFromArray:(id)array;
-(id)objectID;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCListHole : LCBaseModel {
	BOOL isHoleLoading;
	NSDate* mDate;
}
@property(assign, nonatomic) BOOL isHoleLoading;
@property(retain, nonatomic) NSDate* mDate;
-(id)objectID;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCMixPost : LCBaseModel {
	BOOL isLiked;
	BOOL newFlag;
	BOOL truncated;
	NSString* postId;
	NSString* cafeId;
	NSString* type;
	NSString* url;
	NSString* titleText;
	NSString* text;
	NSString* linkableUserReplacedText;
	LCBoard* board;
	LCUser* writer;
	LCLocation* location;
	NSArray* stickers;
	NSArray* medias;
	unsigned mediaCount;
	NSArray* links;
	NSMutableArray* likeUsers;
	unsigned likeCount;
	NSMutableArray* comments;
	unsigned commentCount;
	unsigned commentReplyTotalCount;
	NSArray* linkableUsers;
	NSString* status;
	float postHeight;
	float commonHeight;
	NSDate* created;
	NSString* commentCursorId;
	int linkableUserCount;
	int linkableUserRegularVersion;
}
@property(assign, nonatomic) int linkableUserRegularVersion;
@property(assign, nonatomic) int linkableUserCount;
@property(retain, nonatomic) NSString* commentCursorId;
@property(assign, nonatomic) BOOL truncated;
@property(assign, nonatomic) float commonHeight;
@property(assign, nonatomic) float postHeight;
@property(retain, nonatomic) NSDate* created;
@property(retain, nonatomic) NSString* status;
@property(assign, nonatomic) BOOL newFlag;
@property(assign, nonatomic) BOOL isLiked;
@property(retain, nonatomic) NSArray* linkableUsers;
@property(assign, nonatomic) unsigned commentReplyTotalCount;
@property(assign, nonatomic) unsigned commentCount;
@property(retain, nonatomic) NSMutableArray* comments;
@property(assign, nonatomic) unsigned likeCount;
@property(retain, nonatomic) NSMutableArray* likeUsers;
@property(retain, nonatomic) NSArray* links;
@property(assign, nonatomic) unsigned mediaCount;
@property(retain, nonatomic) NSArray* medias;
@property(retain, nonatomic) NSArray* stickers;
@property(retain, nonatomic) LCLocation* location;
@property(retain, nonatomic) LCUser* writer;
@property(retain, nonatomic) LCBoard* board;
@property(retain) NSString* linkableUserReplacedText;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* titleText;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSString* cafeId;
@property(retain, nonatomic) NSString* postId;
-(id)textWithLinkableUserReplacedText;
-(BOOL)isDeleted;
-(BOOL)hasLike;
-(id)objectID;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCSettingInfo : LCBaseModel {
	NSDate* lastRefreshed;
	NSString* settingId;
	NSString* etag;
}
@property(copy, nonatomic) NSString* etag;
@property(copy, nonatomic) NSString* settingId;
@property(retain, nonatomic) NSDate* lastRefreshed;
+(id)settingInfoWithId:(id)anId;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCSlidePost : LCBaseModel {
	LCMixPost* currentPost;
	LCMixPost* nextPost;
	LCMixPost* prevPost;
	NSString* slideType;
	NSString* postId;
	NSString* slideValue;
	NSString* targetUserHash;
	NSString* cafeId;
	NSString* previousCursor;
	NSString* nextCursor;
	NSString* prevNotificationType;
	NSString* nextNotificationType;
}
@property(retain, nonatomic) NSString* nextNotificationType;
@property(retain, nonatomic) NSString* prevNotificationType;
@property(retain, nonatomic) NSString* nextCursor;
@property(retain, nonatomic) NSString* previousCursor;
@property(retain, nonatomic) NSString* cafeId;
@property(retain, nonatomic) NSString* targetUserHash;
@property(retain, nonatomic) NSString* slideValue;
@property(retain, nonatomic) NSString* postId;
@property(retain, nonatomic) NSString* slideType;
@property(retain, nonatomic) LCMixPost* nextPost;
@property(retain, nonatomic) LCMixPost* prevPost;
@property(retain, nonatomic) LCMixPost* currentPost;
-(id)typeCode:(id)code;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCUser : LCBaseModel {
	BOOL isUnregistered;
	BOOL isBlocked;
	BOOL isGroupUser;
	NSString* userHash;
	NSString* name;
	NSString* addressbookName;
	NSString* customName;
	int linkableUserOrder;
	NSRange linkableUserRange;
}
@property(assign, nonatomic) BOOL isGroupUser;
@property(assign, nonatomic) NSRange linkableUserRange;
@property(assign, nonatomic) int linkableUserOrder;
@property(assign, nonatomic) BOOL isBlocked;
@property(assign, nonatomic) BOOL isUnregistered;
@property(retain, nonatomic) NSString* customName;
@property(retain, nonatomic) NSString* addressbookName;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* userHash;
+(id)usersFromArray:(id)array;
-(id)objectID;
-(id)displayName;
-(id)linkableUserNickName;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithLineDictionary:(id)lineDictionary;
-(id)initWithDictionary:(id)dictionary;
-(void)setUpLineUserName;
@end

__attribute__((visibility("hidden")))
@interface LCArrayUtil : NSObject {
}
+(BOOL)setHoleIsNotLoading:(id)loading;
+(id)modelArrayFromItems:(id)items modelClassName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface LCDateUtil : NSObject {
}
+(id)dateTimeStringForOBS;
+(id)relativeDateString:(id)string;
+(id)dateTimeString:(id)string;
+(id)dateString:(id)string;
+(id)todayMidnight;
+(void)significantTimeChange:(id)change;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface LCObjectList : NSObject {
	id mDelegate;
	NSMutableDictionary* mObjectDict;
	NSMutableArray* mObjectArray;
	id delegate;
}
@property(assign, nonatomic) id delegate;
-(id)description;
-(id)objectArray;
-(void)removeObjectsAfterIndex:(unsigned)index;
-(unsigned)addFetchHoleResult:(id)result atIndex:(unsigned)index;
-(void)addFetchMoreResult:(id)result;
-(unsigned)addFetchUpdateNoHoleResult:(id)result;
-(unsigned)addFetchUpdateResult:(id)result;
-(void)insertModels:(id)models atIndexes:(id)indexes;
-(void)removeObject:(id)object;
-(void)removeObjectAtIndex:(unsigned)index;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(void)replaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(id)objectAtIndex:(unsigned)index;
-(unsigned)indexOfObject:(id)object compareKey:(id)key;
-(unsigned)indexOfObject:(id)object;
-(unsigned)count;
-(void)reset;
-(BOOL)fetchObjects:(id)objects entityName:(id)name;
-(BOOL)fetchCachedCafeDetailPosts:(id)posts;
-(BOOL)fetchCachedPosts:(id)posts sort:(id)sort entityName:(id)name;
-(void)dealloc;
-(id)init;
-(unsigned)addFetchUpdateResult:(id)result usingHole:(BOOL)hole;
-(void)removeDeletedObjectsWith:(id)with isHoleMode:(BOOL)mode;
-(BOOL)containsModel:(id)model;
-(unsigned)replaceModel:(id)model;
@end

__attribute__((visibility("hidden")))
@interface LCTransitionController : NSObject {
}
+(BOOL)openIfLineScheme:(id)scheme;
+(void)showWithURL:(id)url;
+(void)showCafeMain:(id)main mId:(id)anId lineCafeTransition:(int)transition;
+(void)showCafeMainWithDissolveEffect:(id)dissolveEffect;
+(void)showCafeMain:(id)main;
+(void)showLikeUsers:(id)users;
+(void)showPostDetail:(id)detail cafe:(id)cafe board:(id)board commentId:(id)anId delegate:(id)delegate lineCafeTransition:(int)transition;
+(void)showWebView:(id)view;
+(void)showImageEndView:(id)view startIndex:(int)index isForEndView:(BOOL)endView delegate:(id)delegate;
+(void)showMapEndViewByNCLocaton:(id)locaton isForEndView:(BOOL)endView;
+(void)showMapEndView:(id)view isForEndView:(BOOL)endView;
+(void)showWriteComment:(id)comment comment:(id)comment2 delegate:(id)delegate;
+(id)showEditPost:(id)post postBoard:(id)board post:(id)post3 isKeyboardShowing:(BOOL)showing delegate:(id)delegate;
+(id)showWritePost:(id)post postBoard:(id)board isKeyboardShowing:(BOOL)showing delegate:(id)delegate;
+(id)navigatorWithRootViewController:(id)rootViewController;
+(void)viewController:(id)controller dismissModalViewControllerAnimated:(BOOL)animated;
+(void)popViewController:(id)controller animated:(BOOL)animated;
+(void)pushViewController:(id)controller animated:(BOOL)animated;
+(void)presentModalViewController:(id)controller animated:(BOOL)animated;
+(void)setModalTransitionStyle:(int)style;
+(void)setTemporalCurrentViewController:(id)controller;
+(void)setCurrentViewController:(id)controller;
+(id)currentViewController;
@end

__attribute__((visibility("hidden")))
@interface LCURLUtil : NSObject {
}
+(id)errorFromResultDictionary:(id)resultDictionary ignoreAuthError:(BOOL)error;
+(id)errorFromResultString:(id)resultString code:(int)code;
+(id)errorFromResultString:(id)resultString;
+(id)etagFrom:(id)from;
+(void)setETagRequest:(id)request etag:(id)etag;
+(void)setETagRequest:(id)request settingId:(id)anId;
+(void)setOBSCopyHeader:(id)header sourceChannelId:(id)anId afterBlock:(id)block;
+(void)setLineCafeHeader:(id)header groupId:(id)anId mId:(id)anId3 cafeId:(id)anId4;
+(id)requestForOBSDownload:(id)obsdownload channelToken:(id)token;
+(id)requestForOBSUpload:(id)obsupload channelToken:(id)token;
+(id)requestWithURL:(id)url httpMethod:(int)method;
+(id)requestWithSafeURL:(id)safeURL httpMethod:(int)method;
+(id)makeSafeURL:(id)url;
+(id)escapedURLWithString:(id)string;
+(id)URLWithStringIfNotNil:(id)stringIfNotNil;
@end

__attribute__((visibility("hidden")))
@interface LCUtility : NSObject {
}
+(void)appendFileLogWithString:(id)string;
+(id)base64Encoding:(id)encoding withLineLength:(unsigned)lineLength;
+(id)base64Encoding:(id)encoding;
+(id)AES256DecryptWithData:(id)data withKey:(id)key;
+(id)AES256EncryptWithData:(id)data withKey:(id)key;
+(id)migURLWithOid:(id)oid;
+(id)OBSCafePostDownloadMediaUrl;
+(id)OBSSpaceId;
+(id)OBSCopyUrl:(id)url spaceId:(id)anId objectId:(id)anId3;
+(id)OBSInfoUrl:(id)url spaceId:(id)anId objectdId:(id)anId3;
+(id)OBSPlayVideoUrl:(id)url spaceId:(id)anId;
+(id)OBSDownloadMediaUrl:(id)url spaceId:(id)anId;
+(id)OBSUploadMediaUrl:(id)url spaceId:(id)anId;
+(int)downloadImageQuality;
+(id)OBSDomain:(BOOL)domain;
+(BOOL)isCustomSchemeUrl:(id)url;
+(id)lineScheme;
+(BOOL)hasLinkableUserPrefix:(id)prefix;
+(id)escapeAllSpaces:(id)spaces;
+(id)urlByRemovingFragment:(id)fragment;
+(BOOL)isNumeric:(id)numeric;
+(CGSize)thumbnailSizeOfImage:(CGSize)image maxSize:(CGSize)size;
+(id)formatCountString:(unsigned)string;
+(id)lastCommentsOnList:(id)list;
+(id)subarray:(id)subarray withMaxCount:(unsigned)maxCount;
+(id)pluralsStringForKey:(id)key number:(int)number;
+(id)localizedStringForKey:(id)key;
+(BOOL)scrollToTopScrollViewFromRootView:(id)rootView;
+(id)proxyUrlWithString:(id)string size:(id)size;
+(void)setUpButton:(id)button withNormalImageName:(id)normalImageName highlightedImageName:(id)name selectedImageName:(id)name4;
+(void)setUpLabel:(id)label withTextSize:(float)textSize isBold:(BOOL)bold textColor:(id)color;
+(void)setUpInputTextControl:(id)control;
+(id)currentLanguage;
+(id)getUUID;
+(BOOL)isIosVersion7;
+(BOOL)isIosVersion6;
+(BOOL)isIosVersion5;
+(BOOL)isHighResolutionScreen;
+(unsigned)unitForFormatCountString:(unsigned)formatCountString;
@end

__attribute__((visibility("hidden")))
@interface LCViewUtil : NSObject {
}
+(void)reloadTabBar;
+(void)setUpSearchBar:(id)bar backgroundImage:(id)image;
+(id)multiActionButtonItemWithText:(id)text target:(id)target action:(SEL)action secondAction:(SEL)action4;
+(id)postDoneBarButtonItemWithText:(id)text target:(id)target action:(SEL)action acceptThemeUI:(BOOL)ui;
+(id)otherActionButtonItemWithTarget:(id)target action:(SEL)action acceptThemeUI:(BOOL)ui;
+(id)actionButtonItemWithText:(id)text target:(id)target action:(SEL)action acceptThemeUI:(BOOL)ui;
+(id)multiBackButtonItemWithTarget:(id)target action:(SEL)action secondAction:(SEL)action3;
+(id)backButtonItemWithTarget:(id)target action:(SEL)action;
+(void)dismissAlertViewIfExists;
+(void)addSubviewOnTopWindow:(id)window;
+(id)currentTopWindow;
+(id)progressThumbnailWithAsset:(id)asset;
+(id)progressThumbnailOfMedia:(id)media;
+(id)tableViewCellFromSubview:(id)subview;
+(id)viewWithLineColor:(id)lineColor;
+(id)closeActionButtonItem;
+(id)bottomViewButtonWithText:(id)text;
+(id)imageButtonWithNormalImageName:(id)normalImageName selectedImageName:(id)name highlightedImageName:(id)name3 frame:(CGRect)frame;
+(id)actionNormalBottomWriteButtonWithText:(id)text target:(id)target action:(SEL)action;
+(id)labelWithFont:(id)font textColor:(id)color shadowColor:(id)color3 frame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCFetchMoreView : UIView {
}
+(id)viewWithStyle:(int)style separatorColor:(id)color fetching:(BOOL)fetching;
@end

__attribute__((visibility("hidden")))
@interface LCListFooterView : UIView {
	UIView* customView;
	UIView* topLineView;
	UIActivityIndicatorView* activityIndicator;
	UILabel* messageLabel;
	UILabel* subMessageLabel;
	int state;
	UIView* messageView;
	NSString* subMessage;
}
@property(copy, nonatomic) NSString* subMessage;
@property(assign, nonatomic) UIView* messageView;
@property(assign, nonatomic) int state;
@property(assign, nonatomic) UILabel* subMessageLabel;
@property(assign, nonatomic) UILabel* messageLabel;
@property(assign, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(assign, nonatomic) UIView* topLineView;
@property(assign, nonatomic) UIView* customView;
-(void)dealloc;
-(void)setSubMessageIfNotNil:(id)aNil;
-(id)initWithFrame:(CGRect)frame;
-(void)reset;
-(void)setFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCListHeaderView : UIView {
	UIView* messageView;
	UIView* bottomLineView;
	NSString* subMessage;
	UIView* customView;
	UIActivityIndicatorView* activityIndicator;
	UILabel* messageLabel;
	UILabel* subMessageLabel;
	int state;
}
@property(assign, nonatomic) int state;
@property(assign, nonatomic) UILabel* subMessageLabel;
@property(assign, nonatomic) UILabel* messageLabel;
@property(assign, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(assign, nonatomic) UIView* customView;
@property(copy, nonatomic) NSString* subMessage;
@property(assign, nonatomic) UIView* bottomLineView;
@property(assign, nonatomic) UIView* messageView;
-(void)resizeView;
-(void)setSubMessageIfNotNil:(id)aNil;
-(void)dealloc;
-(id)initWithCustomView:(id)customView;
@end

__attribute__((visibility("hidden")))
@interface LCNotificationView : UIView {
	UIControl* _notificationView;
}
+(id)notificationView;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)dismiss;
-(void)showInView:(id)view target:(id)target;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCBaseViewCell : UITableViewCell {
	UIImageView* customAccessoryDisclosureIndicator;
}
@property(assign, nonatomic) UIImageView* customAccessoryDisclosureIndicator;
-(void)addCustomAccessoryDisclosureIndicator:(id)indicator highlightImageName:(id)name centerY:(unsigned)y rightMargin:(unsigned)margin;
-(id)selectedBackgroundView:(id)view topMargin:(int)margin bottomMargin:(int)margin3;
@end

__attribute__((visibility("hidden")))
@interface LCMessageCell : LCBaseViewCell {
}
+(id)noDataCellWithText:(id)text;
+(id)noPostCell;
+(id)errorCellWithButton:(id)button action:(SEL)action;
+(id)errorCellWithDetail:(id)detail;
+(id)errorCell;
+(id)emptyCell;
+(id)loadingCell;
+(id)commonMessageCell:(id)cell topMargin:(unsigned)margin message:(id)message;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface LCMixPostViewCell : LCBaseViewCell {
	LCMixPost* post;
	LCUser* user;
	LCCafe* cafe;
	LCLocation* location;
	LCPostView* postView;
	UILabel* mediaCountLabel;
	LCStickerThumbnailsView* stickerThumbnailsView;
	LCMediaThumbnailsView* mediaThumbnailsView;
	LCUploadUrlHorizontalListView* uploadUrlsView;
	LCLikeUsersView* likeUsersView;
	LCCommentsView* commentsView;
	UIView* likeSeparatorView;
	UIImageView* cameraView;
	LCLikeButton* likeButton;
	LCCommentButton* commentButton;
	UIView* bottomLineView;
	id delegate;
	UIActivityIndicatorView* loadingActivityView;
}
@property(assign, nonatomic) UIActivityIndicatorView* loadingActivityView;
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) UIView* bottomLineView;
@property(assign, nonatomic) LCCommentButton* commentButton;
@property(assign, nonatomic) LCLikeButton* likeButton;
@property(assign, nonatomic) UIImageView* cameraView;
@property(assign, nonatomic) UIView* likeSeparatorView;
@property(assign, nonatomic) LCCommentsView* commentsView;
@property(assign, nonatomic) LCLikeUsersView* likeUsersView;
@property(assign, nonatomic) LCUploadUrlHorizontalListView* uploadUrlsView;
@property(assign, nonatomic) LCMediaThumbnailsView* mediaThumbnailsView;
@property(assign, nonatomic) LCStickerThumbnailsView* stickerThumbnailsView;
@property(assign, nonatomic) UILabel* mediaCountLabel;
@property(assign, nonatomic) LCPostView* postView;
@property(retain, nonatomic) LCLocation* location;
@property(retain, nonatomic) LCCafe* cafe;
@property(retain, nonatomic) LCUser* user;
@property(retain, nonatomic) LCMixPost* post;
+(id)cellWithCafeMainPost:(id)cafeMainPost board:(id)board boardCount:(unsigned)count forTableView:(id)tableView delegate:(id)delegate;
+(float)commonHeight:(id)height boardCount:(unsigned)count;
+(float)height:(id)height boardCount:(unsigned)count;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)operation:(id)operation didDeleteLike:(id)like;
-(void)operation:(id)operation didCreateLike:(id)like;
-(void)didGetLikeResponse:(id)response error:(id)error;
-(void)redrawLikeUsers:(BOOL)users;
-(void)setCommentId:(id)anId;
-(void)needsRefresh:(id)refresh;
-(void)sendComment;
-(void)sendLike;
-(void)showMedia:(id)media;
-(void)showLocation;
-(void)likeUserMain;
-(void)dealloc;
-(void)fillContentView:(id)view;
-(void)setHiddenMediaCount:(unsigned)count position:(CGPoint)position;
-(void)setupContentView;
-(void)setupListHoleView;
-(void)setupCafeDisplay;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
@end

__attribute__((visibility("hidden")))
@interface LCUserViewCell : LCBaseViewCell {
	LCProfileImageView* profileImageView;
	UILabel* userNickLabel;
	LCUser* user;
}
@property(retain, nonatomic) LCUser* user;
@property(assign, nonatomic) UILabel* userNickLabel;
@property(assign, nonatomic) LCProfileImageView* profileImageView;
+(id)cellWithUser:(id)user forTableView:(id)tableView;
+(float)height;
-(void)dealloc;
-(void)updateLayout;
-(void)fillContentView:(id)view;
-(void)setupContentView;
@end

__attribute__((visibility("hidden")))
@interface LCImagePicker : NSObject {
	UIImagePickerController* _imagePickerController;
	int _sourceType;
	id _delegate;
}
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) int sourceType;
@property(assign, nonatomic) UIImagePickerController* imagePickerController;
-(void)startImagePicker:(int)picker startImage:(BOOL)image delegate:(id)delegate;
-(void)setMediaTypeIfPossible:(BOOL)possible editFlag:(BOOL)flag;
-(void)checkCameraSourceTypeAvailable:(BOOL)available;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LineCafeAppDelegate : NSObject {
	unsigned _bgTask;
	BOOL alreadyLaunched;
}
@property(assign, nonatomic) BOOL alreadyLaunched;
+(id)sharedInstance;
-(void)applicationWillTerminate:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(BOOL)isFirstLaunchOfAppVersion;
@end

__attribute__((visibility("hidden")))
@interface LCProgressHUD : UIView {
	int mode;
	int animationType;
	SEL methodForExecution;
	id targetForExecution;
	id objectForExecution;
	BOOL useAnimation;
	float yOffset;
	float xOffset;
	float width;
	float height;
	float margin;
	BOOL dimBackground;
	BOOL taskInProgress;
	float graceTime;
	float minShowTime;
	NSTimer* graceTimer;
	NSTimer* minShowTimer;
	NSDate* showStarted;
	UIView* indicator;
	UILabel* label;
	UILabel* detailsLabel;
	float progress;
	id<LCProgressHUDDelegate> delegate;
	NSString* labelText;
	NSString* detailsLabelText;
	float opacity;
	UIFont* labelFont;
	UIFont* detailsLabelFont;
	BOOL isFinished;
	BOOL removeFromSuperViewOnHide;
	UIView* customView;
	CGAffineTransform rotationTransform;
}
@property(retain) NSDate* showStarted;
@property(retain) NSTimer* minShowTimer;
@property(retain) NSTimer* graceTimer;
@property(assign) float height;
@property(assign) float width;
@property(retain) UIView* indicator;
@property(assign) float progress;
@property(retain) UIFont* detailsLabelFont;
@property(retain) UIFont* labelFont;
@property(assign) BOOL removeFromSuperViewOnHide;
@property(assign) BOOL taskInProgress;
@property(assign) float minShowTime;
@property(assign) float graceTime;
@property(assign) BOOL dimBackground;
@property(assign) float margin;
@property(assign) float yOffset;
@property(assign) float xOffset;
@property(assign) float opacity;
@property(copy) NSString* detailsLabelText;
@property(copy) NSString* labelText;
@property(assign) id<LCProgressHUDDelegate> delegate;
@property(assign) int animationType;
@property(assign) int mode;
@property(retain) UIView* customView;
+(BOOL)hideHUDForView:(id)view animated:(BOOL)animated;
+(id)showHUDAddedTo:(id)to animated:(BOOL)animated;
-(void)setTransformForCurrentOrientation:(BOOL)currentOrientation;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)drawRect:(CGRect)rect;
-(void)hideUsingAnimation:(BOOL)animation;
-(void)showUsingAnimation:(BOOL)animation;
-(void)cleanUp;
-(void)done;
-(void)animationFinished:(id)finished finished:(BOOL)finished2 context:(void*)context;
-(void)launchExecution;
-(void)showWhileExecuting:(SEL)executing onTarget:(id)target withObject:(id)object animated:(BOOL)animated;
-(void)handleMinShowTimer:(id)timer;
-(void)handleGraceTimer:(id)timer;
-(void)hideDelayed:(id)delayed;
-(void)hide:(BOOL)hide afterDelay:(double)delay;
-(void)hide:(BOOL)hide;
-(void)show:(BOOL)show;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithView:(id)view;
-(id)initWithWindow:(id)window;
-(void)updateIndicators;
-(void)updateProgress;
-(void)updateDetailsLabelText:(id)text;
-(void)updateLabelText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface MBRoundProgressView : UIView {
	float _progress;
}
@property(assign, nonatomic) float progress;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCAlertHUD : NSObject <LCProgressHUDDelegate> {
	LCProgressHUD* hud;
	id<LCProgressHUDDelegate> hudDelegate;
}
@property(assign, nonatomic) id<LCProgressHUDDelegate> hudDelegate;
@property(assign, nonatomic) LCProgressHUD* hud;
+(void)moveHUDForPost:(int)post;
+(void)hideHUDAfterDelay:(double)delay;
+(void)showFailHUD:(id)hud detailText:(id)text delegate:(id)delegate;
+(void)showFailHUD:(id)hud errorCode:(int)code delegate:(id)delegate;
+(void)showFailHUD:(id)hud delegate:(id)delegate;
+(void)showSuccessHUD:(id)hud;
+(void)showLoadingHUD:(id)hud;
+(void)cleanUp;
+(id)hud;
+(id)sharedInstance;
-(void)hudWasHidden:(id)hidden;
-(id)showHUD:(id)hud;
@end

__attribute__((visibility("hidden")))
@interface LCLinkableUserCandidatesView : UIView <UITableViewDelegate, UITableViewDataSource> {
	UITableView* tableView;
	UIImageView* bgImageView;
	UILabel* titleLabel;
	UIButton* cancelButton;
	UIButton* confirmButton;
	LCLinkableUserResult* mLinkableUserResult;
	LCUser* selectedUser;
	int selectedRow;
	id<LCLinkableUserCandidatesViewDelegate> delegate;
}
@property(assign, nonatomic) id<LCLinkableUserCandidatesViewDelegate> delegate;
@property(assign, nonatomic) int selectedRow;
@property(retain, nonatomic) LCUser* selectedUser;
@property(retain, nonatomic) LCLinkableUserResult* mLinkableUserResult;
@property(assign, nonatomic) UIButton* confirmButton;
@property(assign, nonatomic) UIButton* cancelButton;
@property(assign, nonatomic) UILabel* titleLabel;
@property(assign, nonatomic) UIImageView* bgImageView;
@property(assign, nonatomic) UITableView* tableView;
-(void)cancelButtonTapped:(id)tapped;
-(void)rotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(id)initWithLinkableUserResult:(id)linkableUserResult;
-(void)confirmButtonTapped:(id)tapped;
-(void)updateCellAtIndexPath:(id)indexPath checked:(BOOL)checked;
-(void)updateViewWithSelectedIndexPath:(id)selectedIndexPath;
-(float)tableHeight;
-(void)setupView;
@end

__attribute__((visibility("hidden")))
@interface LCLinkableUserCandidateViewCell : LCBaseViewCell {
	BOOL checked;
	UIView* topLineView;
	UIView* bottomLineView;
	UIImageView* checkImageView;
	LCProfileImageView* profileImageView;
	UILabel* nameLabel;
	LCUser* candidate;
}
@property(assign, nonatomic, getter=isChecked) BOOL checked;
@property(retain, nonatomic) LCUser* candidate;
@property(assign, nonatomic) UILabel* nameLabel;
@property(assign, nonatomic) LCProfileImageView* profileImageView;
@property(assign, nonatomic) UIImageView* checkImageView;
@property(assign, nonatomic) UIView* bottomLineView;
@property(assign, nonatomic) UIView* topLineView;
+(id)cellWithTableView:(id)tableView user:(id)user lastRow:(BOOL)row;
+(float)height;
-(void)dealloc;
-(void)fillContentView:(id)view lastRow:(BOOL)row;
-(void)setupView;
@end

__attribute__((visibility("hidden")))
@interface LCIconButton : UIButton {
	UIImageView* iconImageView;
	UILabel* titleLabel;
	NSString* titlePlaceHolder;
}
@property(retain, nonatomic) NSString* titlePlaceHolder;
@property(assign, nonatomic) UILabel* titleLabel;
@property(assign, nonatomic) UIImageView* iconImageView;
+(float)height;
-(void)setTextFromCount:(unsigned)count;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)adjustFrame;
-(void)setupViews;
@end

__attribute__((visibility("hidden")))
@interface LCLikeButton : LCIconButton {
}
+(id)buttonWithTarget:(id)target action:(SEL)action;
-(void)setTextFromCount:(unsigned)count likedByUser:(BOOL)user;
-(void)setupViews;
@end

__attribute__((visibility("hidden")))
@interface LCCommentButton : LCIconButton {
}
+(id)buttonWithTarget:(id)target action:(SEL)action;
-(void)setupViews;
@end

__attribute__((visibility("hidden")))
@interface LCBigIconButton : UIButton {
	NSString* titlePlaceHolder;
}
@property(retain, nonatomic) NSString* titlePlaceHolder;
-(void)setTextFromCount:(unsigned)count;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)setupViews;
@end

__attribute__((visibility("hidden")))
@interface LCBigLikeButton : LCBigIconButton {
}
+(id)buttonWithTarget:(id)target action:(SEL)action;
-(void)setTextFromCount:(unsigned)count likedByUser:(BOOL)user;
-(void)setupViews;
@end

__attribute__((visibility("hidden")))
@interface LCBigCommentButton : LCBigIconButton {
}
+(id)buttonWithTarget:(id)target action:(SEL)action;
-(void)setupViews;
@end

__attribute__((visibility("hidden")))
@interface LCCommentsView : UIView {
	LCShortCommentView* _commentView[6];
	NSArray* comments;
	LCCommentsDescriptionView* descriptionView;
	UIImageView* shadowImageView;
	id delegate;
}
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) UIImageView* shadowImageView;
@property(assign, nonatomic) LCCommentsDescriptionView* descriptionView;
@property(retain, nonatomic) NSArray* comments;
+(float)height:(id)height;
-(void)dealloc;
-(id)init;
-(void)updateViews:(id)views;
-(void)setHighlighted:(BOOL)highlighted;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)commentDescriptionViewTapped:(id)tapped;
-(void)commentViewTapped:(id)tapped;
-(void)setCommentId:(id)anId;
-(void)resetBackground;
-(void)setupViews;
@end

__attribute__((visibility("hidden")))
@interface LCCommentsDescriptionView : UIControl {
	UILabel* descriptionLabel;
	UIImageView* dotImage;
}
@property(assign, nonatomic) UIImageView* dotImage;
@property(assign, nonatomic) UILabel* descriptionLabel;
+(float)height;
-(void)updateDescription:(unsigned)description;
-(void)setupView;
-(void)setHighlighted:(BOOL)highlighted;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCPostView : UIView {
	LCProfileImageView* profileImageView;
	UILabel* userNickLabel;
	UILabel* dateLabel;
	LCAttributedLabel* contentLabel;
	UIImageView* locationImageView;
	LCHighlightControl* locationControl;
	LCAttributedLabel* locationLabel;
	LCUser* user;
	LCLocation* location;
}
@property(retain, nonatomic) LCLocation* location;
@property(retain, nonatomic) LCUser* user;
@property(assign, nonatomic) LCAttributedLabel* locationLabel;
@property(assign, nonatomic) LCHighlightControl* locationControl;
@property(assign, nonatomic) UIImageView* locationImageView;
@property(assign, nonatomic) LCAttributedLabel* contentLabel;
@property(assign, nonatomic) UILabel* dateLabel;
@property(assign, nonatomic) UILabel* userNickLabel;
@property(assign, nonatomic) LCProfileImageView* profileImageView;
+(float)height:(id)height;
+(float)postHeight:(id)height;
+(float)heightOfText:(id)text fontSize:(float)size width:(float)width;
+(id)postViewAttributedString:(id)string;
-(void)fillContentView:(id)view;
-(void)resizeContentLabel:(id)label;
-(void)dealloc;
-(id)init;
-(void)showLocation;
-(void)updateUserLayout:(id)layout;
-(void)setupViews;
@end

__attribute__((visibility("hidden")))
@interface LCVideoPlayerViewController : UIViewController {
	LCCafeBaseViewController* _mpParentViewController;
	BOOL isShowingMedia;
}
@property(assign, nonatomic) BOOL isShowingMedia;
+(id)sharedInstance;
-(void)operation:(id)operation didGetVideoURL:(id)url error:(id)error;
-(void)playVideoWithURL:(id)url parentViewController:(id)controller;
-(void)playVideoWithOid:(id)oid parentViewController:(id)controller;
-(void)setCookieWithDomain:(id)domain name:(id)name value:(id)value;
-(void)playVideoWithCookie:(id)cookie;
-(BOOL)isFromWriteView;
-(void)playbackDidFinish;
-(void)playVideo:(id)video;
-(void)didGetMyEncryptedAccessTokenError:(id)error;
@end

__attribute__((visibility("hidden")))
@interface LCStreamUploader : NSObject <NSStreamDelegate> {
	BOOL isStopped;
	NSURLConnection* connection;
	NSData* bodyPrefixData;
	NSInputStream* fileStream;
	NSData* bodySuffixData;
	NSOutputStream* producerStream;
	NSInputStream* consumerStream;
	const char* buffer;
	char* bufferOnHeap;
	unsigned long bufferOffset;
	unsigned long bufferLimit;
	CFRunLoopRef runLoopRef;
	NSString* _mediaUploadUrl;
	NSString* _channelToken;
	float _imageQuality;
	NSString* _mediaType;
	id<LCStreamUploaderDelegate> _delegate;
}
@property(assign, nonatomic) CFRunLoopRef runLoopRef;
@property(assign, nonatomic) BOOL isStopped;
@property(assign, nonatomic) unsigned long bufferLimit;
@property(assign, nonatomic) unsigned long bufferOffset;
@property(assign, nonatomic) char* bufferOnHeap;
@property(assign, nonatomic) const char* buffer;
@property(retain, nonatomic) NSInputStream* consumerStream;
@property(retain, nonatomic) NSOutputStream* producerStream;
@property(copy, nonatomic) NSData* bodySuffixData;
@property(retain, nonatomic) NSInputStream* fileStream;
@property(copy, nonatomic) NSData* bodyPrefixData;
@property(retain, nonatomic) NSURLConnection* connection;
@property(assign, nonatomic) id<LCStreamUploaderDelegate> delegate;
@property(retain, nonatomic) NSString* mediaType;
@property(assign, nonatomic) float imageQuality;
@property(retain, nonatomic) NSString* channelToken;
@property(retain, nonatomic) NSString* mediaUploadUrl;
+(void)releaseObj:(id)obj;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)stopSendWithStatus:(id)status;
-(id)URLRequest:(id)request;
-(void)startSend:(id)send objectID:(id)anId offset:(unsigned long long)offset delegate:(id)delegate;
-(id)_generateBoundaryString;
-(BOOL)isSending;
-(void)_sendDidStopWithStatus:(id)_send;
-(void)_sendDidStart;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCVideo : LCUploadMedia {
	BOOL thumbnailUploaded;
	BOOL snapMovieType;
	BOOL encodedMPEG4;
	NSURL* videoURL;
	NSString* filePath;
	NSString* thumbnailOid;
	NSNumber* runningTime;
	UIImage* thumbnail;
	NSString* tempThumbnailFilePath;
	XXStruct_yD8eWC timeRange;
}
@property(assign, nonatomic, getter=isEncodedMPEG4) BOOL encodedMPEG4;
@property(assign, nonatomic, getter=isSnapMovie) BOOL snapMovieType;
@property(retain, nonatomic) NSString* tempThumbnailFilePath;
@property(retain, nonatomic) UIImage* thumbnail;
@property(assign, nonatomic) BOOL thumbnailUploaded;
@property(assign, nonatomic) XXStruct_yD8eWC timeRange;
@property(retain, nonatomic) NSNumber* runningTime;
@property(retain, nonatomic) NSString* thumbnailOid;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSURL* videoURL;
-(id)mediaTypeForOBSUpload;
-(void)setRunningTimeFromString:(id)string;
-(id)toDictionary;
-(id)toMyHomeDictionary;
-(void)dealloc;
-(id)initWithSharingDictionary:(id)sharingDictionary usedByMyHome:(BOOL)home;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCMediaUploader : NSObject <LCStreamUploaderDelegate> {
	NSString* serviceName;
	NSString* spaceId;
	NSString* channelToken;
	NSTimer* videoEncoderTimer;
	LCStreamUploader* streamUploader;
	LCUploadMedia* uploadMedia;
	AVAssetExportSession* exportSession;
	int beforeProgressPercent;
	id delegate;
	dispatch_queue_s* _uploadSerialQueue;
	XXStruct_yD8eWC timeRange;
}
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) int beforeProgressPercent;
@property(retain) AVAssetExportSession* exportSession;
@property(assign, nonatomic) dispatch_queue_s* uploadSerialQueue;
@property(retain, nonatomic) LCUploadMedia* uploadMedia;
@property(retain, nonatomic) LCStreamUploader* streamUploader;
@property(assign, nonatomic) XXStruct_yD8eWC timeRange;
@property(retain, nonatomic) NSTimer* videoEncoderTimer;
@property(retain, nonatomic) NSString* channelToken;
@property(retain, nonatomic) NSString* spaceId;
@property(retain, nonatomic) NSString* serviceName;
+(void)removeTempDirectory;
+(void)createTempDirectory;
+(id)tempDirectoryPath;
-(void)cancelUpload;
-(void)uploadVideo:(id)video delegate:(id)delegate;
-(void)uploadImage:(id)image delegate:(id)delegate;
-(void)uploadStreamInProgress:(int)progress totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)didEndUpload:(id)upload;
-(void)doOBSCopy;
-(void)uploadOBSVideo;
-(void)uploadOBSImage;
-(void)uploadVideo;
-(void)checkTypeAndUploadVideo;
-(void)uploadVideoThumbnailImage:(id)image;
-(void)checkObsInfoWithOidBlock:(id)oidBlock createNewOidBlock:(id)block successBlock:(id)block3 failBlock:(id)block4;
-(void)dealloc;
-(id)initWithServiceName:(id)serviceName spaceId:(id)anId channelToken:(id)token;
-(id)init;
-(id)tempFilePath:(id)path;
-(void)didUploadSuccess:(id)success;
-(void)didUploadFail:(id)fail;
-(void)didUploadInProgress:(int)progress;
-(void)cleanUp;
-(void)invalidateExportTimer;
-(BOOL)isChannelUpload;
-(id)currentUploadImage;
-(id)currentUploadVideo;
-(void)encodeVideo;
-(void)encodeDidSucceed;
-(void)encodeDidFail:(id)encode;
-(void)handleVideoEncoderTimer:(id)timer;
@end

__attribute__((visibility("hidden")))
@interface LCImage : LCUploadMedia {
	UIImage* progressThumbnail;
	UIImage* image;
	NSString* tempFilePath;
	int imageWidth;
	int imageHeight;
	unsigned filterIndex;
	unsigned rotateCount;
}
@property(assign, nonatomic) unsigned rotateCount;
@property(assign, nonatomic) unsigned filterIndex;
@property(assign, nonatomic) int imageHeight;
@property(assign, nonatomic) int imageWidth;
@property(retain, nonatomic) NSString* tempFilePath;
@property(retain, nonatomic) UIImage* image;
-(void)setProgressThumbnail:(id)thumbnail;
-(id)progressThumbnail;
-(BOOL)isUnknownImageSize;
-(id)toDictionary;
-(void)dealloc;
-(id)initWithSharingDictionary:(id)sharingDictionary usedByMyHome:(BOOL)home;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCLineImage : NSObject {
	UIImage* image;
	NSString* imageKey;
	int imageType;
	NSError* error;
	NSMutableSet* observers;
}
@property(retain, nonatomic) NSMutableSet* observers;
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) int imageType;
@property(retain, nonatomic) NSString* imageKey;
@property(retain, nonatomic) UIImage* image;
+(id)imageWithId:(id)anId imageType:(int)type;
+(void)initialize;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(BOOL)isObserving:(id)observing;
-(void)dealloc;
-(id)init;
-(void)loadImageWithId:(id)anId;
-(void)callbackObservers;
@end

__attribute__((visibility("hidden")))
@interface LCProfileImageView : UIImageView <LCLineImageObserving> {
	LCLineImage* lineImage;
}
@property(assign, nonatomic) LCLineImage* lineImage;
-(void)lineImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(void)setImageWithUser:(id)user imageType:(int)type;
-(void)setImage:(id)image;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCOBSImage : NSObject <LCRemoteImageObserving> {
	NSString* mediaId;
	int imageSizeType;
	id imageResultBlock;
	LCRemoteImage* remoteImage;
}
@property(retain, nonatomic) LCRemoteImage* remoteImage;
@property(copy, nonatomic) id imageResultBlock;
@property(assign, nonatomic) int imageSizeType;
@property(retain, nonatomic) NSString* mediaId;
-(void)remoteImage:(id)image didLoadImage:(id)image2 error:(id)error;
-(BOOL)loadWithMediaId:(id)mediaId cafeId:(id)anId mediaType:(id)type imageSizeType:(int)type4 withResultBlock:(id)resultBlock;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LineCafeManager : NSObject {
	BOOL isRealEnv;
	BOOL resetedNewMarkCache;
	BOOL enableLogger;
	BOOL enableBenchMark;
	BOOL _useOBS3GTLS;
	BOOL _httpOnlyForOBS;
	id<LineCafeDataSource> dataSource;
	NSMutableArray* loadingImages;
	NSMutableArray* watingNewMarkOperatios;
	LCClientOperation* mOperation;
	NSString* phase;
	NSString* obsApplicationHeader;
	NSString* obsServerUrl;
	NSString* obsSSLServerUrl;
}
@property(assign, nonatomic) BOOL enableBenchMark;
@property(assign, nonatomic) BOOL enableLogger;
@property(readonly, assign, nonatomic) BOOL resetedNewMarkCache;
@property(assign, nonatomic) BOOL httpOnlyForOBS;
@property(assign, nonatomic) BOOL useOBS3GTLS;
@property(copy, nonatomic) NSString* obsSSLServerUrl;
@property(copy, nonatomic) NSString* obsServerUrl;
@property(readonly, assign, nonatomic) BOOL isRealEnv;
@property(retain, nonatomic) NSString* obsApplicationHeader;
@property(retain, nonatomic) LCClientOperation* mOperation;
@property(retain, nonatomic) NSMutableArray* watingNewMarkOperatios;
@property(retain, nonatomic) NSMutableArray* loadingImages;
@property(assign, nonatomic) id<LineCafeDataSource> dataSource;
@property(retain, nonatomic) NSString* phase;
+(id)sharedInstance;
-(void)parseCafe:(id*)cafe post:(id*)post commentId:(id*)anId fromURI:(id)uri;
-(void)operation:(id)operation didGetCafeInfo:(id)info boards:(id)boards linkableUserRegularExpressions:(id)expressions error:(id)error;
-(void)operation:(id)operation didGetIsNewMarkCafes:(id)cafes error:(id)error;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(BOOL)hasNewForOneToOneNote:(id)oneNote;
-(BOOL)hasNewForGroupNote:(id)groupNote;
-(void)setHasNew:(BOOL)aNew mid:(id)mid;
-(void)showWriteViewForOneToOneNote:(id)oneNote fromViewController:(id)viewController;
-(void)showWriteViewForChannel:(id)channel fromViewController:(id)viewController resultBlock:(id)block;
-(void)showWriteViewForGroupBoard:(id)groupBoard fromViewController:(id)viewController;
-(BOOL)viewControllerIsCafeViewController:(id)controller;
-(BOOL)openResource:(id)resource currentViewController:(id)controller lineCafeTransition:(int)transition;
-(void)image:(id)image cafeId:(id)anId mediaType:(id)type imageSizeType:(int)type4 withResultBlock:(id)resultBlock;
-(void)resetNewMarkCache;
-(void)fetchNewMarkGroupArray:(id)array resultBlock:(id)block;
-(void)showCafeMainWithMid:(id)mid currentViewController:(id)controller lineCafeTransition:(int)transition;
-(void)showCafeMain:(id)main currentViewController:(id)controller lineCafeTransition:(int)transition;
-(void)dealloc;
-(id)init;
-(void)showPostWriteViewController:(id)controller postBoard:(id)board options:(id)options fromViewController:(id)viewController;
-(int)selectedTabTypeForMediaList:(id)mediaList;
-(void)shareToNote:(id)note fromViewController:(id)viewController;
-(void)cancelWatingNewMarkOperation;
-(BOOL)isNumeric:(id)numeric;
-(id)shareMediaListFromOptions:(id)options usedByMyHome:(BOOL)home;
-(id)shareTextFromOptions:(id)options;
-(void)fillSharingContentsWithOptions:(id)options postWriteViewController:(id)controller;
-(BOOL)hasMediaList:(id)list;
@end

__attribute__((visibility("hidden")))
@interface LCUserCache : NSObject {
	NSMutableDictionary* users;
}
@property(retain, nonatomic) NSMutableDictionary* users;
+(id)sharedInstance;
-(void)userWithId:(id)anId completeBlock:(id)block;
-(void)setGroupUsers:(id)users;
-(id)currentUser;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCSettings : NSObject {
}
+(void)setIsConfirmedMyHomeMultiImageUploadGuide:(BOOL)guide;
+(BOOL)isConfirmedMyHomeMultiImageUploadGuide;
+(void)setMyHomeIsReadVideoLimigNoticeFlag:(BOOL)flag;
+(BOOL)isReadMyHomeVideoLimitNotice;
+(void)setIsReadVideoLimigNoticeFlag:(BOOL)flag;
+(BOOL)isReadVideoLimitNotice;
+(void)setLinkableUserRegularExpressions:(id)expressions;
+(id)linkableUserRegularExpressions;
+(void)setAppVersion:(id)version;
+(id)appVersion;
+(void)removeSettings;
+(BOOL)isConfirmedForKey:(id)key;
+(void)saveUserDefaults:(id)defaults value:(id)value;
@end

__attribute__((visibility("hidden")))
@interface NJDiskCache : NSObject {
	NSString* mCacheDir;
	NSMutableArray* mScopes;
	NSMutableDictionary* mItemMaxCounts;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedDiskCache;
-(id)imageForRemoteURL:(id)remoteURL scope:(id)scope;
-(id)dataForRemoteURL:(id)remoteURL scope:(id)scope;
-(BOOL)setImage:(id)image forRemoteURL:(id)remoteURL scope:(id)scope;
-(BOOL)setData:(id)data forRemoteURL:(id)remoteURL scope:(id)scope;
-(id)contentsOfScope:(id)scope;
-(void)emptyScope:(id)scope;
-(void)emptyCacheBefore:(id)before duration:(long)duration;
-(void)emptyScope:(id)scope before:(id)before duration:(long)duration;
-(void)resetRepository;
-(BOOL)isValidScope:(id)scope;
-(id)scopes;
-(BOOL)addScope:(id)scope itemMaxCount:(int)count;
-(BOOL)addScope:(id)scope;
-(id)pathForRemoteURL:(id)remoteURL scope:(id)scope;
-(id)pathForScope:(id)scope;
-(id)cacheDirectory;
-(id)init;
-(id)autorelease;
-(oneway void)release;
-(unsigned)retainCount;
-(id)retain;
-(id)copyWithZone:(NSZone*)zone;
-(void)setupExistingScope;
-(void)emptyScopeThreadWithParam:(id)param;
-(void)emptyCacheThreadWithParam:(id)param;
-(void)removeItemOverMaxNum:(id)num maxNum:(int)num2 timeLimit:(long)limit;
-(BOOL)removeExpiredItemAtPath:(id)path expiredTime:(int)time timeLimit:(long)limit;
-(id)commonProxyURL:(id)url;
-(id)stringBySHA256Encoding:(id)encoding;
-(void)updateAccessTime:(id)time;
@end

__attribute__((visibility("hidden")))
@interface LCLinkableUserResult : NSObject {
	NSArray* mLinkableUserCandidateArray;
	NSRange mMatchRange;
}
@property(assign, nonatomic) NSRange mMatchRange;
@property(retain, nonatomic) NSArray* mLinkableUserCandidateArray;
-(id)selectedLinkableUser;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCLinkableUserScanner : NSObject {
	NSString* mText;
	unsigned mLinkableUesrScanLocation;
	NSMutableArray* mLinkableUsersResultArray;
	NSRegularExpression* mLinkableUsersExpression;
	int mLinkableUserRegularVersion;
}
@property(assign, nonatomic) int mLinkableUserRegularVersion;
@property(retain, nonatomic) NSRegularExpression* mLinkableUsersExpression;
@property(retain, nonatomic) NSMutableArray* mLinkableUsersResultArray;
@property(assign, nonatomic) unsigned mLinkableUesrScanLocation;
@property(retain, nonatomic) NSString* mText;
+(id)replaceLabelText:(id)text forLinkableUsers:(id)linkableUsers linkableUserCount:(int)count linkableUserRegularVersion:(int)version;
+(int)lastLinkableUserRegularVersion;
+(void)reloadLinkableUserRegularExpressions;
+(id)linkableUsersPatternForVersion:(int)version;
+(void)initialize;
+(id)lastLinkableUsersPattern;
-(id)lastScanResult;
-(BOOL)scanLinkableUser;
-(void)dealloc;
-(id)initWithText:(id)text;
-(id)linkableUserCandidatesWithNickName:(id)nickName;
@end

__attribute__((visibility("hidden")))
@interface LCLinkableUserRegularExpression : NSObject {
	int mVersion;
	NSString* mPattern;
	NSRegularExpression* mExpression;
}
@property(retain) NSRegularExpression* mExpression;
@property(retain, nonatomic) NSString* mPattern;
@property(assign, nonatomic) int mVersion;
-(id)expression;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCTransitionStack : NSObject {
	NSMutableArray* dataArray;
}
@property(retain, nonatomic) NSMutableArray* dataArray;
+(id)sharedInstance;
-(void)setCurrentCafe:(id)cafe;
-(BOOL)isCurrentGroupJoining;
-(BOOL)isCurrentCafeForOneToOneNote;
-(id)currentMid;
-(id)currentGroupId;
-(id)currentCafeId;
-(void)popCafe;
-(void)pushCafe:(id)cafe groupId:(id)anId mId:(id)anId3;
-(void)pushCafe:(id)cafe groupId:(id)anId;
-(void)setLineUserCache;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCHPostProgressView : UIView {
	UIView* bgBlackView;
	UIImageView* bgImageView;
	UIImageView* bgCountBar;
	UIImageView* bgPercentBar;
	UIImageView* thumbnailView;
	UIImageView* bgThumbView;
	UIImageView* playIcon;
	UIButton* cancelButton;
	UIImageView* countBar;
	UIImageView* percentBar;
	UILabel* countLabel;
	UILabel* countAllLabel;
	UILabel* percentLabel;
	NSString* mediaType;
	id cancelTarget;
	SEL cancelAction;
	int countAll;
	int count;
	int percent;
	UIImage* thumbnail;
}
@property(assign, nonatomic) UIImage* thumbnail;
@property(assign, nonatomic) int percent;
@property(assign, nonatomic) int count;
@property(assign, nonatomic) int countAll;
@property(assign, nonatomic) SEL cancelAction;
@property(assign, nonatomic) id cancelTarget;
@property(retain, nonatomic) NSString* mediaType;
@property(assign, nonatomic) UILabel* percentLabel;
@property(assign, nonatomic) UILabel* countAllLabel;
@property(assign, nonatomic) UILabel* countLabel;
@property(assign, nonatomic) UIImageView* percentBar;
@property(assign, nonatomic) UIImageView* countBar;
@property(assign, nonatomic) UIButton* cancelButton;
@property(assign, nonatomic) UIImageView* playIcon;
@property(assign, nonatomic) UIImageView* bgThumbView;
@property(assign, nonatomic) UIImageView* thumbnailView;
@property(assign, nonatomic) UIImageView* bgPercentBar;
@property(assign, nonatomic) UIImageView* bgCountBar;
@property(assign, nonatomic) UIImageView* bgImageView;
@property(assign, nonatomic) UIView* bgBlackView;
-(void)dealloc;
-(void)didTappedCancelUploadButton;
-(void)adjustCountLabelFrame;
-(void)layoutSubviews;
-(void)setCancelTarget:(id)target action:(SEL)action;
-(id)initWithFrame:(CGRect)frame usingTotalCount:(BOOL)count;
@end

__attribute__((visibility("hidden")))
@interface LCHTransitionController : NSObject {
}
+(void)showMapEndView:(id)view isForEndView:(BOOL)endView;
+(id)showWritePost:(id)post isKeyboardShowing:(BOOL)showing resultBlock:(id)block;
+(id)navigatorWithRootViewController:(id)rootViewController;
+(void)viewController:(id)controller dismissModalViewControllerAnimated:(BOOL)animated;
+(void)popViewController:(id)controller animated:(BOOL)animated;
+(void)presentModalViewController:(id)controller animated:(BOOL)animated;
+(void)setCurrentViewController:(id)controller;
+(id)currentViewController;
@end

__attribute__((visibility("hidden")))
@interface LCHPostWriteViewController : LCPostWriteBaseViewController <UITextViewDelegate, LCPostAttachBarDelegate, LCUploadListViewDelegate, LCAttachStickerListViewDelegate, LCMediaUploaderDelegate, LCImageViewControllerDataSource, UIImagePickerControllerDelegate, UINavigationControllerDelegate, LGImagePickerDelegate, UIGestureRecognizerDelegate> {
	LCHGroupSelectView* _myHomeGroupSelectView;
	NSDictionary* _options;
	id _resultBlock;
	UIImageView* _multiImageUploadGuideImageView;
}
@property(assign, nonatomic) UIImageView* multiImageUploadGuideImageView;
@property(copy, nonatomic) id resultBlock;
@property(retain, nonatomic) NSDictionary* options;
@property(retain, nonatomic) LCHGroupSelectView* myHomeGroupSelectView;
-(void)showMultiImagePickerWithAnimated:(BOOL)animated;
-(id)targetHomeMidFromOptions;
-(void)showMyHomeMultiImageUploadGuideIfNeeds;
-(void)makeWelcomePopupViewIfNeeds;
-(id)firstUploadMedia;
-(BOOL)needsToShowWelcomePopup;
-(void)didNavigationControllerViewTapped;
-(void)updateView:(int)view;
-(id)postDoneBarButtonItemWithText:(id)text target:(id)target action:(SEL)action;
-(id)actionButtonItemWithText:(id)text target:(id)target action:(SEL)action;
-(void)didSelectedGroupChanged:(id)changed;
-(void)updatePrivacyGroupSelectTabImage;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)changePostTabType:(int)type;
-(void)makePostAttachBar;
-(void)postAttachBar:(id)bar didSelectIndex:(int)index;
-(BOOL)isRotatable;
-(void)startMediaUploaderWithUploadMedia:(id)uploadMedia delegate:(id)delegate;
-(id)mediaUploaderWithChannelToken:(id)channelToken;
-(float)uploadImageQuality;
-(int)uploadImageMaxSize;
-(void)didTappedAddMediaByMultiVideoPicker;
-(void)didTappedAddMediaByMultiImagePicker;
-(id)textEditViewPlaceholderText;
-(BOOL)checkAttachMoreAndShowAlert;
-(int)stickerMaxAttachCount;
-(int)videoMaxAttachCount;
-(int)imageMaxAttachCount;
-(BOOL)canAttachMore;
-(BOOL)isAnotherMediaAttached;
-(int)attachedCount;
-(int)attachCountForCurrentTab;
-(int)maxAttachCountForCurrentTab;
-(int)maxAttachCount;
-(void)didTappedSelectPrivacyGroupButton:(id)button;
-(void)showImageDetailWithIndex:(int)index;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)savePost;
-(void)cancelAction;
-(void)makeMyHomeAdditionalViews;
-(void)setupFlikingPart;
-(void)makeNaviBar;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)lgImagePickerControllerDidReachMaxLimit:(id)lgImagePickerController;
-(void)hudWasHidden:(id)hidden;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithOptions:(id)options resultBlock:(id)block;
-(BOOL)isMyHomeGroupSelected;
-(id)dictionaryWithCurrentSelectedGroup;
-(void)removeMyHomeGroupSelectView;
-(void)addMyHomeGroupSelectView;
-(void)makeMyHomeGroupSelectView;
@end

__attribute__((visibility("hidden")))
@interface LCCommentView : UIView {
	LCProfileImageView* profileImageView;
	UIImageView* replyImageView;
	UIImageView* deletedImageView;
	UILabel* userNickLabel;
	UILabel* dateLabel;
	LCAttributedLabel* commentLabel;
	UILabel* deletedLabel;
	LCComment* comment;
}
@property(retain, nonatomic) LCComment* comment;
@property(assign, nonatomic) UILabel* deletedLabel;
@property(assign, nonatomic) UIImageView* deletedImageView;
@property(assign, nonatomic) LCAttributedLabel* commentLabel;
@property(assign, nonatomic) UILabel* dateLabel;
@property(assign, nonatomic) UILabel* userNickLabel;
@property(assign, nonatomic) UIImageView* replyImageView;
@property(assign, nonatomic) LCProfileImageView* profileImageView;
+(float)height:(id)height;
+(float)width:(id)width;
+(float)commonHeight:(id)height;
-(void)updateCommentLabel;
-(void)setViewWithComment:(id)comment;
-(void)fillContentView:(id)view;
-(void)toggleView:(BOOL)view;
-(void)setHighlighted:(BOOL)highlighted;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(float)topMargin;
-(void)updateUserLayout;
-(void)setupDeletedView;
-(void)setupView;
@end

__attribute__((visibility("hidden")))
@interface LCFullCommentView : LCCommentView {
	UIView* highlightView;
}
@property(assign, nonatomic) UIView* highlightView;
+(float)height:(id)height;
+(float)commonHeight:(id)height;
-(void)setViewWithComment:(id)comment;
-(void)toggleView:(BOOL)view;
-(void)setHighlighted:(BOOL)highlighted;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)removeMenu;
-(void)menuItemClicked:(id)clicked;
-(void)handleLongPress:(id)press;
-(BOOL)canBecomeFirstResponder;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)menuWillShow:(id)menu;
-(void)menuWillHide:(id)menu;
-(void)initLongPress;
-(float)topMargin;
-(void)updateCommentLabel;
-(void)setupHighlightView;
@end

__attribute__((visibility("hidden")))
@interface LCShortCommentView : LCCommentView {
	id delegate;
}
@property(assign, nonatomic) id delegate;
+(float)height:(id)height;
+(float)commonHeight:(id)height;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(float)topMargin;
-(void)updateCommentLabel;
@end

__attribute__((visibility("hidden")))
@interface LCCafeCache : NSObject {
	NSDate* lastedNewMarkFetchDate;
	NSMutableDictionary* fetchedNewMarkInfoDict;
}
@property(retain, nonatomic) NSMutableDictionary* fetchedNewMarkInfoDict;
@property(retain, nonatomic) NSDate* lastedNewMarkFetchDate;
+(id)sharedInstance;
-(void)resetNewMarkCache;
-(void)setNewMark:(BOOL)mark groupId:(id)anId;
-(void)setNewMarkCache:(id)cache;
-(id)getNewMarkCache:(id)cache;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCAssetFullResolutionImage : LCRemoteImage {
	LCImage* _uploadImage;
	int _imageMaxSize;
}
@property(assign, nonatomic) int imageMaxSize;
@property(retain, nonatomic) LCImage* uploadImage;
-(int)uploadImageMaxSize;
-(void)doBackgroundJob;
-(void)resolveImage:(id)image error:(id)error;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCUploadMedia : LCBaseModel {
	BOOL _uploaded;
	BOOL _isCanceled;
	NSString* _mediaType;
	UIImage* _progressThumbnail;
	float _tempFileQuality;
	NSString* _oid;
	unsigned _beforeProgressPercent;
	NSURL* _assetURL;
	ALAsset* _mediaAsset;
	LGAssetsLibrarySafeExecutor* _assetsLibrarySafeExecutor;
	NSString* _obsSourceChannelId;
	NSString* _obsSourceServiceCode;
	NSString* _obsSourceSid;
	NSString* _obsSourceOid;
}
@property(retain, nonatomic) NSString* obsSourceOid;
@property(retain, nonatomic) NSString* obsSourceSid;
@property(retain, nonatomic) NSString* obsSourceServiceCode;
@property(retain, nonatomic) NSString* obsSourceChannelId;
@property(assign, nonatomic) BOOL isCanceled;
@property(retain, nonatomic) LGAssetsLibrarySafeExecutor* assetsLibrarySafeExecutor;
@property(retain, nonatomic) ALAsset* mediaAsset;
@property(retain, nonatomic) NSURL* assetURL;
@property(assign, nonatomic) unsigned beforeProgressPercent;
@property(assign, nonatomic) BOOL uploaded;
@property(retain, nonatomic) NSString* oid;
@property(assign, nonatomic) float tempFileQuality;
@property(retain, nonatomic) UIImage* progressThumbnail;
@property(retain, nonatomic) NSString* mediaType;
-(id)toDictionary;
-(void)resetOBSCopyFields;
-(BOOL)isEnableOBSCopy;
-(BOOL)isVideo;
-(BOOL)isImage;
-(void)dealloc;
-(id)initWithSharingDictionary:(id)sharingDictionary usedByMyHome:(BOOL)home;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCAttachStickerListView : UIView {
	float mScrollOffsetX;
	id<LCAttachStickerListViewDelegate> delegate;
	NSMutableArray* recycleButtons;
	UIImageView* stateMark;
	UIScrollView* scrollView;
	UIButton* addStickerButton;
	UIImageView* emptyStickerView;
	NSArray* stickerList;
}
@property(retain, nonatomic) NSArray* stickerList;
@property(retain, nonatomic) UIImageView* emptyStickerView;
@property(retain, nonatomic) UIButton* addStickerButton;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(retain, nonatomic) UIImageView* stateMark;
@property(retain, nonatomic) NSMutableArray* recycleButtons;
@property(assign, nonatomic) id<LCAttachStickerListViewDelegate> delegate;
-(void)actionCancelButton:(id)button;
-(void)actionAttachedButton:(id)button;
-(void)actionAddStickerButton;
-(void)setSelectState:(BOOL)state hidden:(BOOL)hidden;
-(void)layoutSubviewsWhenChangeListState:(BOOL)state;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)scrollToEnd;
-(void)layoutAttachedButtons;
-(void)releaseAttachedButtons;
-(id)subviewsScrollView;
-(id)attachedButton;
@end

__attribute__((visibility("hidden")))
@interface LCSticker : LCBaseModel {
	BOOL _hasSound;
	BOOL _hasAnimation;
	NSString* stickerId;
	NSString* packageId;
	NSString* packageVersion;
	int width;
	int height;
}
@property(assign, nonatomic) BOOL hasAnimation;
@property(assign, nonatomic) BOOL hasSound;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) NSString* packageVersion;
@property(retain, nonatomic) NSString* packageId;
@property(copy, nonatomic) NSString* stickerId;
+(id)stickersFromArray:(id)array;
-(id)toDictionaryForChannel;
-(id)toDictionary;
-(CGSize)size;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCStickerImageButton : UIButton {
	LCSticker* sticker;
	UIActivityIndicatorView* indicator;
}
@property(assign, nonatomic) UIActivityIndicatorView* indicator;
@property(retain, nonatomic) LCSticker* sticker;
-(void)setImageForSticker:(id)sticker;
-(void)hideIndicator;
-(void)showIndicator;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCStickerViewCell : LCBaseViewCell {
	id delegate;
	LCStickerImageButton* stickerButton;
}
@property(assign, nonatomic) LCStickerImageButton* stickerButton;
@property(assign, nonatomic) id delegate;
+(float)height:(id)height lastRow:(BOOL)row;
+(id)cellOfTableView:(id)tableView sticker:(id)sticker;
-(void)didTapSticker:(id)sticker;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface LCHWelcomePopupView : UIView {
}
-(id)initWithFrame:(CGRect)frame;
-(void)setupSubviews;
-(void)hide;
@end

__attribute__((visibility("hidden")))
@interface LCNavigationController : NLAppearanceCustomizedNavigationController {
}
-(int)preferredInterfaceOrientationForPresentation;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
@end

__attribute__((visibility("hidden")))
@interface LCHorizontalTableView : UITableView <UITableViewDataSource, UITableViewDelegate> {
	BOOL _sendTouchesToNextResponder;
	BOOL _canMoveCell;
	id<LCHorizontalTableViewDelegate> _horizontalDelegate;
	NSString* _cellIdentifierForTableView;
	UIView* _tableViewWrapperView;
}
@property(assign, nonatomic) UIView* tableViewWrapperView;
@property(copy, nonatomic) NSString* cellIdentifierForTableView;
@property(assign, nonatomic) BOOL canMoveCell;
@property(assign, nonatomic) id<LCHorizontalTableViewDelegate> horizontalDelegate;
@property(assign, nonatomic) BOOL sendTouchesToNextResponder;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)handleGesture:(id)gesture;
-(id)findUITableViewWrapperView;
-(void)didAddSubview:(id)subview;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)setFrame:(CGRect)frame;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCMediaThumbnailsView : UIView <LCHorizontalTableViewDelegate> {
	LCHorizontalTableView* _mediaTableView;
	NSArray* _medias;
	NSString* _cafeId;
	NSString* _postId;
	id _delegate;
}
@property(assign, nonatomic) id delegate;
@property(retain, nonatomic) NSString* postId;
@property(retain, nonatomic) NSString* cafeId;
@property(retain, nonatomic) NSArray* medias;
@property(assign, nonatomic) LCHorizontalTableView* mediaTableView;
+(float)height:(id)height;
+(BOOL)needToShowCount:(id)showCount;
+(CGSize)tableContentSize:(id)size;
+(CGSize)thumbnailSizeOfMedia:(id)media;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)horizontalScrollViewDidScroll:(id)horizontalScrollView;
-(void)startDisplayMedia;
-(id)horizontalNoDataCell;
-(float)heightForRowAtIndexPath:(id)indexPath;
-(BOOL)isEmpty;
-(int)numberOfRows;
-(void)fillCellContentView:(id)view atIndexPath:(id)indexPath;
-(id)setUpCellContentView:(id)view;
-(void)showMedia:(id)media;
-(void)updateView:(id)view cafeId:(id)anId postId:(id)anId3 delegate:(id)delegate;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCUploadUrlViewCell : LCBaseViewCell {
	LCAttachedButton* _attachedButton;
	LCAttachDeleteButton* _attachDeleteButton;
	id<LCUploadUrlViewCellDelegate> _mDelegate;
}
@property(assign, nonatomic) id<LCUploadUrlViewCellDelegate> mDelegate;
@property(assign, nonatomic) LCAttachDeleteButton* attachDeleteButton;
@property(assign, nonatomic) LCAttachedButton* attachedButton;
+(unsigned)heightForUploadUrl:(id)uploadUrl lastRow:(BOOL)row;
+(id)setUpCellContentView:(id)view usedByMyhome:(BOOL)myhome delegate:(id)delegate;
-(void)fillCellContentView:(id)view;
@end

__attribute__((visibility("hidden")))
@interface LCUrlInputView : LCMessageHUDView {
	UILabel* _mPlaceholderLabel;
	LCUploadUrlViewController* _mDelegate;
	UIView* _mDimmedView;
}
@property(assign, nonatomic) UIView* mDimmedView;
@property(assign, nonatomic) LCUploadUrlViewController* mDelegate;
@property(assign, nonatomic) UILabel* mPlaceholderLabel;
-(void)confirmAction:(id)action;
-(void)cancelAction:(id)action;
-(void)layoutSubviews;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCUploadUrlViewController : LCCafeBaseViewController <LCHorizontalTableViewDelegate, LCUploadUrlViewCellDelegate, UITextViewDelegate> {
	unsigned _maxCount;
	NSMutableArray* _reorderingUploadUrlArray;
	NSMutableArray* _deletedUploadUrlArray;
	LCUrlInputView* _urlInputView;
	LCHorizontalTableView* _horizontalTableView;
	NSMutableDictionary* _operationsForUrl;
	int _mRemoveUrlThumbnailIndex;
	UIImageView* _mStateMarkImageView;
	id<LCUploadUrlViewControllerDelegate> _mDelegate;
	NSRegularExpression* _mExpression;
	NSString* _mLastReplacementText;
	NSRange _mLastChangedRange;
	CGRect _keyboardFrame;
}
@property(retain, nonatomic) NSString* mLastReplacementText;
@property(assign, nonatomic) NSRange mLastChangedRange;
@property(retain, nonatomic) NSRegularExpression* mExpression;
@property(assign, nonatomic) id<LCUploadUrlViewControllerDelegate> mDelegate;
@property(assign, nonatomic) UIImageView* mStateMarkImageView;
@property(assign, nonatomic) int mRemoveUrlThumbnailIndex;
@property(assign, nonatomic) CGRect keyboardFrame;
@property(retain, nonatomic) NSMutableDictionary* operationsForUrl;
@property(retain, nonatomic) LCHorizontalTableView* horizontalTableView;
@property(assign, nonatomic) LCUrlInputView* urlInputView;
@property(retain, nonatomic) NSMutableArray* deletedUploadUrlArray;
@property(retain, nonatomic) NSMutableArray* reorderingUploadUrlArray;
@property(assign, nonatomic) unsigned maxCount;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)changeKeyboardFrame:(id)frame;
-(BOOL)isSupportedScheme:(id)scheme;
-(void)resetTextViewChangedRange;
-(BOOL)isDelegatedByMyHome;
-(void)cleanUpHorizontalTableView;
-(void)showMenuControllerIfExistsUrlOnPasteBoard;
-(unsigned)countOfUploadedUrls;
-(BOOL)addUrl:(id)url fromPopup:(BOOL)popup;
-(int)isThisUrl:(id)url inUploadUrlArray:(id)uploadUrlArray;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)textViewDidChange:(id)textView;
-(float)maxTextViewHeight;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)operation:(id)operation didGetSiteInfo:(id)info error:(id)error;
-(void)didTouchThumbnailButton:(id)button;
-(void)didTouchAddUrlButton:(id)button;
-(BOOL)prepareUploadUrlForFetch:(id)fetch fromPopup:(BOOL)popup;
-(void)setInputTextIfTextHasUrl:(id)url;
-(void)addUrlsFromText:(id)text;
-(void)fetchSiteInfo:(id)info;
-(void)actionCancelButton:(id)button;
-(void)reloadTableViewAndAdjustOffset;
-(id)arrayOfDictionaryForUrl;
-(BOOL)showUrlInputView;
-(void)didTouchRowAtIndexPath:(id)indexPath;
-(void)moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath2;
-(id)horizontalNoDataCell;
-(float)heightForRowAtIndexPath:(id)indexPath;
-(BOOL)isEmpty;
-(int)numberOfRows;
-(void)fillCellContentView:(id)view atIndexPath:(id)indexPath;
-(id)setUpCellContentView:(id)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMaxCount:(unsigned)maxCount delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface LCUploadUrl : LCBaseModel {
	BOOL _usedByMyhome;
	BOOL _isFetched;
	NSString* _uploadTitle;
	NSString* _uploadSummary;
	NSString* _inputUrl;
	NSString* _redirectUrl;
	NSString* _imageUrl;
}
@property(readonly, assign, nonatomic) NSString* uploadDomain;
@property(retain, nonatomic) NSString* imageUrl;
@property(retain, nonatomic) NSString* redirectUrl;
@property(retain, nonatomic) NSString* inputUrl;
@property(retain, nonatomic) NSString* uploadSummary;
@property(retain, nonatomic) NSString* uploadTitle;
@property(assign, nonatomic) BOOL isFetched;
@property(assign, nonatomic) BOOL usedByMyhome;
+(id)uploadUrlsFromArray:(id)array;
-(BOOL)isInputUrlHasLineHost;
-(id)uploadUrl;
-(id)thumbnailUrl130x130;
-(id)linkUrl;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

__attribute__((visibility("hidden")))
@interface LCUploadUrlView : UIView {
	LCRemoteImageButton* _thumbnailButton;
	UILabel* _titleLabel;
	UILabel* _urlLabel;
	UILabel* _summaryLabel;
	LCUploadUrl* _uploadUrl;
}
@property(retain, nonatomic) LCUploadUrl* uploadUrl;
@property(assign, nonatomic) UILabel* summaryLabel;
@property(assign, nonatomic) UILabel* urlLabel;
@property(assign, nonatomic) UILabel* titleLabel;
@property(assign, nonatomic) LCRemoteImageButton* thumbnailButton;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCUploadUrlHorizontalListView : UIView <LCHorizontalTableViewDelegate> {
	LCHorizontalTableView* _uploadUrlTableView;
	UIImageView* _linkImageView;
	UILabel* _uploadUrlCountLabel;
	NSArray* _uploadUrls;
	id _delegate;
}
@property(assign, nonatomic) id delegate;
@property(retain, nonatomic) NSArray* uploadUrls;
@property(assign, nonatomic) UILabel* uploadUrlCountLabel;
@property(assign, nonatomic) UIImageView* linkImageView;
@property(assign, nonatomic) LCHorizontalTableView* uploadUrlTableView;
+(float)height:(id)height;
+(CGSize)tableContentSize:(id)size;
-(id)horizontalNoDataCell;
-(float)heightForRowAtIndexPath:(id)indexPath;
-(BOOL)isEmpty;
-(int)numberOfRows;
-(void)fillCellContentView:(id)view atIndexPath:(id)indexPath;
-(id)setUpCellContentView:(id)view;
-(void)updateView:(id)view delegate:(id)delegate;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)showLinkUrl:(id)url;
@end

__attribute__((visibility("hidden")))
@interface LCPostUploadUrlViewCell : LCBaseViewCell {
	LCUploadUrlView* _uploadUrlView;
}
@property(assign, nonatomic) LCUploadUrlView* uploadUrlView;
+(float)height:(id)height lastRow:(BOOL)row;
+(id)cellOfTableView:(id)tableView uploadUrl:(id)url;
-(void)dealloc;
-(void)showLinkUrl:(id)url;
@end

__attribute__((visibility("hidden")))
@interface LCHUploadUrlView : LCUploadUrlView {
	UILabel* _domainLabel;
}
@property(assign, nonatomic) UILabel* domainLabel;
-(int)heightOfUrlViewCell;
-(void)setUploadUrl:(id)url;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCStickerThumbnailsView : UIView <LCHorizontalTableViewDelegate> {
	LCHorizontalTableView* _stickerTableView;
	NSArray* _stickers;
	id _delegate;
}
@property(assign, nonatomic) id delegate;
@property(retain, nonatomic) NSArray* stickers;
@property(assign, nonatomic) LCHorizontalTableView* stickerTableView;
+(float)height:(id)height;
+(BOOL)needToShowCount:(id)showCount;
+(CGSize)tableContentSize:(id)size;
-(id)horizontalNoDataCell;
-(float)heightForRowAtIndexPath:(id)indexPath;
-(BOOL)isEmpty;
-(int)numberOfRows;
-(void)fillCellContentView:(id)view atIndexPath:(id)indexPath;
-(id)setUpCellContentView:(id)view;
-(void)updateView:(id)view delegate:(id)delegate;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface LCTransitionStackData : NSObject {
	NSString* cafeId;
	NSString* groupId;
	NSString* mId;
}
@property(retain, nonatomic) NSString* mId;
@property(retain, nonatomic) NSString* groupId;
@property(retain, nonatomic) NSString* cafeId;
-(void)dealloc;
-(BOOL)isOneToOneNote;
-(void)replaceCafeId:(id)anId groupId:(id)anId2 mId:(id)anId3;
@end

__attribute__((visibility("hidden")))
@interface LCPostWriteBaseViewController : LCCafeBaseViewController <UITextViewDelegate, UIAlertViewDelegate, LGImagePickerDelegate, LCUploadUrlViewControllerDelegate, LCPostAttachBarDelegate, LCUploadListViewDelegate, LCAttachStickerListViewDelegate, LCMediaUploaderDelegate, LCImageViewControllerDataSource, LVSnapMoviePickerControllerDelegate> {
	BOOL _isUploadCancelFlag;
	BOOL _isKeyboardShow;
	BOOL _isDisplayInAppWebView;
	BOOL _isMemoryWarning;
	BOOL _mShouldSaveTempPost;
	BOOL _mShouldStartUpload;
	BOOL _shouldShowCheckPrivacySettingAlert;
	BOOL _successHudWasHidden;
	LCImagePicker* _imagePicker;
	NSMutableDictionary* _location;
	NSMutableArray* _mediaList;
	NSMutableArray* _reorderingUploadImageArray;
	NSMutableArray* _reorderingUploadVideoArray;
	NSMutableArray* _stickerList;
	int _postTabType;
	LCPostTextEditView* _textEditView;
	LCPostAttachBar* _postAttachTabBar;
	LCUploadListView* _uploadListView;
	LCAttachStickerListView* _attachStickerListView;
	UIView* _stickerKeyboardView;
	NLStickerPreview* _stickerPreview;
	LCPostProgressView* _postProgressView;
	LCHPostProgressView* _postProgressViewForMyHome;
	int _firstResponder;
	LCMediaUploader* _mediaUploader;
	LCUploadUrlViewController* _uploadUrlViewController;
	unsigned _mBackgroundUploadTask;
	NSOperationQueue* _writeSerialQueue;
	ALAssetsLibrary* _assetsLibrary;
	id _mSuccessBlock;
	int _currentStatusBarStyle;
	CGRect _keyboardFrame;
	CGRect _currentTextEditViewCaretRect;
}
@property(assign, nonatomic) int currentStatusBarStyle;
@property(copy, nonatomic) id mSuccessBlock;
@property(assign, nonatomic) BOOL successHudWasHidden;
@property(retain, nonatomic) ALAssetsLibrary* assetsLibrary;
@property(assign, nonatomic) NSOperationQueue* writeSerialQueue;
@property(assign, nonatomic) CGRect currentTextEditViewCaretRect;
@property(assign, nonatomic) BOOL shouldShowCheckPrivacySettingAlert;
@property(assign, nonatomic) unsigned mBackgroundUploadTask;
@property(assign, nonatomic) BOOL mShouldStartUpload;
@property(assign, nonatomic) BOOL mShouldSaveTempPost;
@property(retain, nonatomic) LCUploadUrlViewController* uploadUrlViewController;
@property(retain, nonatomic) LCMediaUploader* mediaUploader;
@property(assign, nonatomic) int firstResponder;
@property(assign, nonatomic) BOOL isMemoryWarning;
@property(assign, nonatomic) LCHPostProgressView* postProgressViewForMyHome;
@property(assign, nonatomic) LCPostProgressView* postProgressView;
@property(retain, nonatomic) NLStickerPreview* stickerPreview;
@property(assign, nonatomic) UIView* stickerKeyboardView;
@property(assign, nonatomic) LCAttachStickerListView* attachStickerListView;
@property(retain, nonatomic) LCUploadListView* uploadListView;
@property(retain, nonatomic) LCPostAttachBar* postAttachTabBar;
@property(retain, nonatomic) LCPostTextEditView* textEditView;
@property(assign, nonatomic) CGRect keyboardFrame;
@property(assign, nonatomic) int postTabType;
@property(assign, nonatomic) BOOL isDisplayInAppWebView;
@property(assign, nonatomic) BOOL isKeyboardShow;
@property(assign, nonatomic) BOOL isUploadCancelFlag;
@property(retain, nonatomic) NSMutableArray* stickerList;
@property(retain, nonatomic) NSMutableArray* reorderingUploadVideoArray;
@property(retain, nonatomic) NSMutableArray* reorderingUploadImageArray;
@property(retain, nonatomic) NSMutableArray* mediaList;
@property(retain, nonatomic) NSMutableDictionary* location;
@property(retain, nonatomic) LCImagePicker* imagePicker;
-(void)actionSheetDeleteLocationSelected:(id)selected;
-(void)actionSheetCurrentLocationSelected:(id)selected;
-(void)actionSheetSpotOnTheMapSelected:(id)selected;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)willDisAppearInAppBrowser:(id)appBrowser;
-(void)willAppearInAppBrowser:(id)appBrowser;
-(void)lvSnapMoviePickerControllerDidCancel:(id)lvSnapMoviePickerController;
-(void)lvSnapMoviePickerController:(id)controller didFinishPickingMovieWithURL:(id)url;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)lgImagePickerControllerDidSelectOverPlayTimeVideo:(id)lgImagePickerController;
-(void)lgImagePickerControllerDidCancel:(id)lgImagePickerController;
-(void)lgImagePickerController:(id)controller didFinishPickingMediaWithInfos:(id)infos;
-(void)attachStickerListView:(id)view didClickCancelButton:(id)button;
-(void)attachStickerListView:(id)view didClickAttachButton:(id)button;
-(void)attachStickerListView:(id)view didClickAddStickerButton:(id)button;
-(void)uploadListView:(id)view didDeleteUploadMedia:(id)media;
-(void)uploadListView:(id)view didClickUploadMedia:(id)media;
-(void)uploadListView:(id)view didClickRightButtonWithState:(int)state;
-(void)uploadListView:(id)view didClickCenterButtonWithState:(int)state;
-(void)uploadListView:(id)view didClickLeftButtonWithState:(int)state;
-(void)postAttachBar:(id)bar didSelectIndex:(int)index;
-(void)mediaUploader:(id)uploader didFailUploadMedia:(id)media;
-(void)mediaUploader:(id)uploader didSucceedUploadMedia:(id)media;
-(void)mediaUploader:(id)uploader uploadInProgress:(int)progress;
-(unsigned)numberOfUploadImages;
-(id)uploadImageAtIndex:(int)index;
-(void)adjustNavigationControllerViewForOrientation:(int)orientation;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)isRotatable;
-(void)resetAutoresizeingMask;
-(void)changeKeyboardFrame:(id)frame;
-(void)saveKeyboardResponder;
-(void)setFirstResponder;
-(void)video:(id)video didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)playVideoWithUploadMedia:(id)uploadMedia;
-(void)showImageDetailWithIndex:(int)index;
-(void)savePost;
-(void)cancelAction;
-(void)checkEnableToPostButton;
-(void)postButtonDisable;
-(void)postButtonEnable;
-(void)didTappedCancelUploadButton;
-(void)didTappedAddMediaByMultiVideoPicker;
-(void)didTappedAddMediaBySnapMoviePicker;
-(void)didTappedAddMediaByVideoCameraButton;
-(void)didTappedAddMediaByMultiImagePicker;
-(void)didTappedAddMediaByCameraButton;
-(void)didTappedSelectPostLocationButton:(id)button;
-(void)didTappedSelectPostUrlButton:(id)button;
-(void)didTappedSelectPostVideoButton:(id)button;
-(void)didTappedSelectPostImageButton:(id)button;
-(void)didTappedSelectAttachStickerButton:(id)button;
-(void)didTappedPostButton:(id)button;
-(void)didTappedCancelButton:(id)button;
-(int)preferredStatusBarStyle;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)updateProgressView:(int)view;
-(void)showProgressView:(id)view;
-(void)removeProgessViewAndSetupFlikingPart;
-(void)removeProgessView;
-(void)setupProgessView;
-(void)adjustTextViewContentOffsetForIos7;
-(void)setupFlikingPart;
-(void)updateViewFrame:(int)frame;
-(void)removeTempPostIfNeeds;
-(void)makeMyHomeAdditionalViews;
-(void)updateViewsForViewType:(int)viewType;
-(void)makeNaviBar;
-(BOOL)isKindOfSnapMovieWithVideoUrl:(id)videoUrl;
-(BOOL)usedByMyHome;
-(void)setupView;
-(void)setStateMarkTo:(int)to hidden:(BOOL)hidden;
-(void)makeUploadListView;
-(void)makeEditView;
-(void)makeBackgroundView;
-(void)didReceiveMemoryWarning;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMaxUploadUrlCount:(unsigned)maxUploadUrlCount;
-(void)didAttachedSticker:(id)sticker;
-(void)attachSticker:(id)sticker;
-(void)removeStickerKeyboardView;
-(void)addStickerKeyboardView:(id)view;
-(void)setupStickerKeyboardView;
-(void)makeAttachStickerListView;
-(void)showStickerPreviewGuide;
-(void)configureStickerPreview:(id)preview;
-(void)saveStickerInputHistory;
-(void)hideStickerPreview;
-(id)stickerPreview;
-(BOOL)isAddedLocation;
-(void)addLocation:(id)location;
-(BOOL)canAttachMore;
-(BOOL)checkAttachMoreAndShowAlert;
-(int)maxAttachCount;
-(int)attachedCount;
-(void)dismissImagePickerController:(id)controller animated:(BOOL)animated;
-(void)setIsReadVideoLimigNoticeFlag:(BOOL)flag;
-(void)cleanUpUIImagePickerConroller;
-(void)startUIImagePickerController:(BOOL)controller usingLibrary:(BOOL)library;
-(void)continueIfRemainUploadMedia;
-(int)currentFileIndex;
-(int)countOfUploadMediaList;
-(id)convertModelToDictionaryInMediaList;
-(float)uploadImageQuality;
-(int)uploadImageMaxSize;
-(id)arrayOfDictionaryForSticker;
-(void)didReachabilityChanged:(id)changed;
-(BOOL)uploadStart;
-(void)createUploadImageAndStartUpload;
-(void)setVideoThumbnailImageFromValidAssetRepresentation:(id)validAssetRepresentation;
-(void)setUploadImageFromValidAssetRepresentation:(id)validAssetRepresentation;
-(void)checkOidAndUpload:(id)upload;
-(void)startMediaUploaderWithUploadMedia:(id)uploadMedia delegate:(id)delegate;
-(id)currentMediaForUpload;
-(int)countOfNotUploadedMedia;
-(void)endBackgroundUploadTask;
-(void)addUploadMediasFromArray:(id)array;
-(void)addUploadMedia:(id)media;
-(void)addUploadUrlIfExsitsUrlText;
-(void)removeUploadUrlView;
-(void)addUploadUrlView;
-(BOOL)isBlueToothKeyboard;
-(void)toggleKeyboard;
-(unsigned)lengthOfContentTextViewEscapedText;
-(unsigned)maxLengthOfPostText;
-(id)textEditViewPlaceholderText;
-(void)beginURLAttachBarButtonAnimation;
-(void)changePostTabType:(int)type;
-(void)makePostAttachBar;
-(id)tabButtonWithOriginX:(unsigned)originX normalImage:(id)image selectedImage:(id)image3;
@end

__attribute__((visibility("hidden")))
@interface LCAttachDeleteButton : UIButton {
}
+(id)attachDeleteButton:(id)button;
@end

__attribute__((visibility("hidden")))
@interface LCAttachedButton : UIButton {
	UIImageView* _mThumbnailImageView;
	UIImageView* _mPlayIconImageView;
	LCUploadUrlView* _mUploadUrlView;
	UIActivityIndicatorView* _mIndicator;
}
@property(assign, nonatomic) UIActivityIndicatorView* mIndicator;
@property(assign, nonatomic) LCUploadUrlView* mUploadUrlView;
@property(assign, nonatomic) UIImageView* mPlayIconImageView;
@property(assign, nonatomic) UIImageView* mThumbnailImageView;
+(id)attachedButton:(BOOL)button delegate:(id)delegate;
+(id)attachedButton;
@end

__attribute__((visibility("hidden")))
@interface LCHUDView : UIView {
	NSString* _labelText;
	NSString* _detailsLabelText;
	float _width;
	float _height;
}
@property(assign) float height;
@property(assign) float width;
@property(copy) NSString* detailsLabelText;
@property(copy) NSString* labelText;
-(void)updateDetailsLabelText:(id)text;
-(void)updateLabelText:(id)text;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCMessageHUDView : LCHUDView {
	UILabel* _label;
	UITextView* _textView;
	UIButton* _closeButton;
	float _fixedTextViewHeight;
	UIButton* _confirmButton;
	UIButton* _cancelButton;
	SEL _confirmAction;
	SEL _cancelAction;
	NSString* _confirmButtonText;
	NSString* _cancelButtonText;
}
@property(retain, nonatomic) NSString* cancelButtonText;
@property(retain, nonatomic) NSString* confirmButtonText;
@property(assign, nonatomic) SEL cancelAction;
@property(assign, nonatomic) SEL confirmAction;
@property(assign, nonatomic) UIButton* cancelButton;
@property(assign, nonatomic) UIButton* confirmButton;
@property(assign, nonatomic) float fixedTextViewHeight;
@property(assign, nonatomic) UITextView* textView;
-(void)cancelAction:(id)action;
-(void)confirmAction:(id)action;
-(void)closeAction:(id)action;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LCUploadListViewTableViewCell : UITableViewCell {
	LCAttachedButton* attachedButton;
	LCAttachDeleteButton* attachDeleteButton;
}
@property(assign, nonatomic) LCAttachDeleteButton* attachDeleteButton;
@property(assign, nonatomic) LCAttachedButton* attachedButton;
+(unsigned)heightForMedia:(id)media;
+(id)setUpCellContentView:(id)view delegate:(id)delegate;
-(void)fillCellContentView:(id)view;
@end

__attribute__((visibility("hidden")))
@interface LCHGroupSelectView : UIView {
	UIView* _myhomeGroupSelectView;
	UIImageView* _stateMarkImageView;
}
@property(assign, nonatomic) UIImageView* stateMarkImageView;
@property(assign, nonatomic) UIView* myhomeGroupSelectView;
-(id)initWithFrame:(CGRect)frame viewController:(id)controller;
@end

__attribute__((visibility("hidden")))
@interface LCCafeStatusManager : NSObject {
	dispatch_queue_s* writingQueue;
}
+(id)sharedInstance;
-(void)operation:(id)operation didGetIsNewMarkOneToOneCafe:(id)oneCafe error:(id)error;
-(void)operation:(id)operation didGetIsNewMarkCafes:(id)cafes error:(id)error;
-(BOOL)hasNewForOneToOneNote:(id)oneNote;
-(BOOL)hasNewForGroupNote:(id)groupNote;
-(void)setHasNew:(BOOL)aNew mid:(id)mid;
-(id)init;
-(id)cacheRootDir;
@end

__attribute__((visibility("hidden")))
@interface LCNoPostsCell : LCBaseViewCell {
}
+(float)height;
+(id)cellInTableView:(id)tableView;
-(id)bubbleWithImage:(id)image text:(id)text;
-(id)initWithFrame:(CGRect)frame;
@end

@interface OHAttributedLabel : UILabel <UIAppearance> {
	NSAttributedString* _attributedText;
	NSAttributedString* _attributedTextWithLinks;
	BOOL _needsRecomputeLinksInText;
	NSDataDetector* _linksDetector;
	CTFrameRef textFrame;
	CGRect drawingRect;
	NSMutableArray* _customLinks;
	CGPoint _touchStartPoint;
	BOOL _centerVertically;
	BOOL _onlyCatchTouchesOnLinks;
	BOOL _extendBottomToFit;
	NSTextCheckingResult* _activeLink;
	UIColor* _linkColor;
	UIColor* _highlightedLinkColor;
	unsigned _linkUnderlineStyle;
	id<OHAttributedLabelDelegate> _delegate;
	unsigned long long _automaticallyAddLinksForType;
}
@property(retain, nonatomic) NSTextCheckingResult* activeLink;
@property(assign, nonatomic) BOOL extendBottomToFit;
@property(assign, nonatomic) BOOL centerVertically;
@property(assign, nonatomic) id<OHAttributedLabelDelegate> delegate;
@property(assign, nonatomic) BOOL onlyCatchTouchesOnLinks;
@property(assign, nonatomic) unsigned linkUnderlineStyle;
@property(retain, nonatomic) UIColor* highlightedLinkColor;
@property(retain, nonatomic) UIColor* linkColor;
@property(readonly, assign, nonatomic) NSDataDetector* linksDataDetector;
@property(assign, nonatomic) unsigned long long automaticallyAddLinksForType;
@property(copy, nonatomic) NSAttributedString* attributedText;
-(void)setNumberOfLines:(int)lines;
-(void)setAdjustsFontSizeToFitWidth:(BOOL)fitWidth;
-(void)warnAboutKnownIssues_CheckAdjustsFontSizeToFitWidth_FromXIB:(BOOL)xib;
-(void)warnAboutKnownIssues_CheckLineBreakMode_FromXIB:(BOOL)xib;
-(void)setNeedsDisplay;
-(void)setUnderlineLinks:(BOOL)links;
-(void)setLineBreakMode:(int)mode;
-(void)setTextAlignment:(int)alignment;
-(void)setTextColor:(id)color;
-(void)setFont:(id)font;
-(void)setText:(id)text;
-(void)resetAttributedText;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)drawActiveLinkHighlightForRect:(CGRect)rect;
-(void)drawTextInRect:(CGRect)rect;
-(void)resetTextFrame;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)linkAtPoint:(CGPoint)point;
-(id)linkAtCharacterIndex:(long)characterIndex;
-(void)recomputeLinksInTextIfNeeded;
-(void)setNeedsRecomputeLinksInText;
-(void)removeAllCustomLinks;
-(void)addCustomLink:(id)link inRange:(NSRange)range;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(void)commonInit;
@end

@interface OHASMarkupParserBase : NSObject {
}
+(id)attributedStringByProcessingMarkupInString:(id)string;
+(id)attributedStringByProcessingMarkupInAttributedString:(id)attributedString;
+(void)processMarkupInAttributedString:(id)attributedString;
+(id)tagMappings;
@end

@interface OHASBasicHTMLParser : OHASMarkupParserBase {
}
+(id)tagMappings;
@end

@interface OHASBasicMarkupParser : OHASMarkupParserBase {
}
+(id)tagMappings;
@end

@interface OHParagraphStyle : NSObject <NSCopying> {
	unsigned char _textAlignment;
	unsigned char _lineBreakMode;
	BOOL _baseWritingDirection;
	float _lineSpacing;
	float _paragraphSpacing;
	float _firstLineHeadIndent;
	float _headIndent;
	float _tailIndent;
	float _minimumLineHeight;
	float _maximumLineHeight;
	float _lineHeightMultiple;
	float _paragraphSpacingBefore;
}
@property(assign, nonatomic) float paragraphSpacingBefore;
@property(assign, nonatomic) float lineHeightMultiple;
@property(assign, nonatomic) float maximumLineHeight;
@property(assign, nonatomic) float minimumLineHeight;
@property(assign, nonatomic) BOOL baseWritingDirection;
@property(assign, nonatomic) float tailIndent;
@property(assign, nonatomic) float headIndent;
@property(assign, nonatomic) float firstLineHeadIndent;
@property(assign, nonatomic) unsigned char lineBreakMode;
@property(assign, nonatomic) unsigned char textAlignment;
@property(assign, nonatomic) float paragraphSpacing;
@property(assign, nonatomic) float lineSpacing;
+(id)paragraphStyleWithCTParagraphStyle:(CTParagraphStyleRef)ctparagraphStyle;
+(id)defaultParagraphStyle;
-(id)copyWithZone:(NSZone*)zone;
-(CTParagraphStyleRef)createCTParagraphStyle;
-(id)initWithCTParagraphStyle:(CTParagraphStyleRef)ctparagraphStyle;
-(id)init;
@end

@interface PodsDummy_Pods : NSObject {
}
@end

@interface ASIAutorotatingViewController : UIViewController {
}
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
@end

@interface ASIAuthenticationDialog : ASIAutorotatingViewController <UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource> {
	ASIHTTPRequest* request;
	int type;
	UITableView* tableView;
	UIViewController* presentingController;
	BOOL didEnableRotationNotifications;
}
@property(retain) UITableView* tableView;
@property(retain, nonatomic) UIViewController* presentingController;
@property(assign) BOOL didEnableRotationNotifications;
@property(assign) int type;
@property(retain) ASIHTTPRequest* request;
+(void)dismiss;
+(void)presentAuthenticationDialogForRequest:(id)request;
+(void)initialize;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)loginWithCredentialsFromDialog:(id)dialog;
-(void)presentNextDialog;
-(id)requestsRequiringTheseCredentials;
-(void)cancelAuthenticationFromDialog:(id)dialog;
-(void)show;
-(void)showTitle;
-(void)dismiss;
-(void)viewDidDisappear:(BOOL)view;
-(id)domainField;
-(id)passwordField;
-(id)usernameField;
-(id)textFieldInRow:(unsigned)row section:(unsigned)section;
-(void)orientationChanged:(id)changed;
-(void)keyboardWillShow:(id)keyboard;
-(void)dealloc;
-(id)init;
@end

@interface ASIDataCompressor : NSObject {
	BOOL streamReady;
	z_stream_s zStream;
}
@property(readonly, assign) BOOL streamReady;
+(id)deflateErrorWithCode:(int)code;
+(BOOL)compressDataFromFile:(id)file toFile:(id)file2 error:(id*)error;
+(id)compressData:(id)data error:(id*)error;
+(id)compressor;
-(id)compressBytes:(char*)bytes length:(unsigned)length error:(id*)error shouldFinish:(BOOL)finish;
-(id)closeStream;
-(id)setupStream;
-(void)dealloc;
@end

@interface ASIDataDecompressor : NSObject {
	BOOL streamReady;
	z_stream_s zStream;
}
@property(readonly, assign) BOOL streamReady;
+(id)inflateErrorWithCode:(int)code;
+(BOOL)uncompressDataFromFile:(id)file toFile:(id)file2 error:(id*)error;
+(id)uncompressData:(id)data error:(id*)error;
+(id)decompressor;
-(id)uncompressBytes:(char*)bytes length:(unsigned)length error:(id*)error;
-(id)closeStream;
-(id)setupStream;
-(void)dealloc;
@end

@interface ASIDownloadCache : NSObject <ASICacheDelegate> {
	int defaultCachePolicy;
	NSString* storagePath;
	NSRecursiveLock* accessLock;
	BOOL shouldRespectCacheControlHeaders;
}
@property(assign) BOOL shouldRespectCacheControlHeaders;
@property(retain) NSRecursiveLock* accessLock;
@property(retain, nonatomic) NSString* storagePath;
@property(assign, nonatomic) int defaultCachePolicy;
+(id)keyForURL:(id)url;
+(BOOL)serverAllowsResponseCachingForRequest:(id)request;
+(id)fileExtensionsToHandleAsHTML;
+(id)sharedCache;
+(void)initialize;
-(BOOL)canUseCachedDataForRequest:(id)request;
-(void)clearCachedResponsesForStoragePolicy:(int)storagePolicy;
-(BOOL)isCachedDataCurrentForRequest:(id)request;
-(void)removeCachedDataForRequest:(id)request;
-(void)removeCachedDataForURL:(id)url;
-(id)pathToStoreCachedResponseHeadersForRequest:(id)request;
-(id)pathToStoreCachedResponseDataForRequest:(id)request;
-(id)pathToFile:(id)file;
-(id)pathToCachedResponseHeadersForURL:(id)url;
-(id)pathToCachedResponseDataForURL:(id)url;
-(id)cachedResponseDataForURL:(id)url;
-(id)cachedResponseHeadersForURL:(id)url;
-(void)storeResponseForRequest:(id)request maxAge:(double)age;
-(id)expiryDateForRequest:(id)request maxAge:(double)age;
-(void)updateExpiryForRequest:(id)request maxAge:(double)age;
-(void)dealloc;
-(id)init;
@end

@interface ASIFormDataRequest : ASIHTTPRequest <NSCopying> {
	NSMutableArray* postData;
	NSMutableArray* fileData;
	int postFormat;
	unsigned stringEncoding;
}
@property(retain) NSMutableArray* fileData;
@property(retain) NSMutableArray* postData;
@property(assign) unsigned stringEncoding;
@property(assign) int postFormat;
+(id)requestWithURL:(id)url;
-(id)copyWithZone:(NSZone*)zone;
-(void)appendPostString:(id)string;
-(void)buildURLEncodedPostBody;
-(void)buildMultipartFormDataPostBody;
-(void)buildPostBody;
-(void)setData:(id)data withFileName:(id)fileName andContentType:(id)type forKey:(id)key;
-(void)setData:(id)data forKey:(id)key;
-(void)addData:(id)data withFileName:(id)fileName andContentType:(id)type forKey:(id)key;
-(void)addData:(id)data forKey:(id)key;
-(void)setFile:(id)file withFileName:(id)fileName andContentType:(id)type forKey:(id)key;
-(void)setFile:(id)file forKey:(id)key;
-(void)addFile:(id)file withFileName:(id)fileName andContentType:(id)type forKey:(id)key;
-(void)addFile:(id)file forKey:(id)key;
-(void)setPostValue:(id)value forKey:(id)key;
-(void)addPostValue:(id)value forKey:(id)key;
-(void)dealloc;
-(id)initWithURL:(id)url;
-(id)encodeURL:(id)url;
@end

@interface ASIHTTPRequest : NSOperation <NSCopying> {
	NSURL* url;
	NSURL* originalURL;
	NSURL* redirectURL;
	id<ASIHTTPRequestDelegate> delegate;
	id<ASIHTTPRequestDelegate, ASIProgressDelegate> queue;
	NSString* requestMethod;
	NSMutableData* postBody;
	NSData* compressedPostBody;
	BOOL shouldStreamPostDataFromDisk;
	NSString* postBodyFilePath;
	NSString* compressedPostBodyFilePath;
	BOOL didCreateTemporaryPostDataFile;
	NSOutputStream* postBodyWriteStream;
	NSInputStream* postBodyReadStream;
	NSMutableDictionary* requestHeaders;
	BOOL haveBuiltRequestHeaders;
	NSDictionary* responseHeaders;
	NSMutableArray* requestCookies;
	NSArray* responseCookies;
	BOOL useCookiePersistence;
	BOOL useKeychainPersistence;
	BOOL useSessionPersistence;
	BOOL allowCompressedResponse;
	BOOL shouldCompressRequestBody;
	NSString* downloadDestinationPath;
	NSString* temporaryFileDownloadPath;
	NSString* temporaryUncompressedDataDownloadPath;
	NSOutputStream* fileDownloadOutputStream;
	NSOutputStream* inflatedFileDownloadOutputStream;
	BOOL complete;
	BOOL finished;
	BOOL cancelled;
	NSError* error;
	NSString* username;
	NSString* password;
	NSString* userAgentString;
	NSString* domain;
	NSString* proxyUsername;
	NSString* proxyPassword;
	NSString* proxyDomain;
	id<ASIProgressDelegate> uploadProgressDelegate;
	id<ASIProgressDelegate> downloadProgressDelegate;
	BOOL haveExaminedHeaders;
	NSMutableData* rawResponseData;
	CFHTTPMessageRef request;
	NSInputStream* readStream;
	CFHTTPAuthenticationRef requestAuthentication;
	NSDictionary* requestCredentials;
	int authenticationRetryCount;
	NSString* authenticationScheme;
	NSString* authenticationRealm;
	BOOL shouldPresentAuthenticationDialog;
	BOOL shouldPresentProxyAuthenticationDialog;
	CFHTTPAuthenticationRef proxyAuthentication;
	NSDictionary* proxyCredentials;
	int proxyAuthenticationRetryCount;
	NSString* proxyAuthenticationScheme;
	NSString* proxyAuthenticationRealm;
	int responseStatusCode;
	NSString* responseStatusMessage;
	unsigned long long contentLength;
	unsigned long long partialDownloadSize;
	unsigned long long postLength;
	unsigned long long totalBytesRead;
	unsigned long long totalBytesSent;
	unsigned long long lastBytesRead;
	unsigned long long lastBytesSent;
	NSRecursiveLock* cancelledLock;
	SEL didStartSelector;
	SEL didReceiveResponseHeadersSelector;
	SEL willRedirectSelector;
	SEL didFinishSelector;
	SEL didFailSelector;
	SEL didReceiveDataSelector;
	NSDate* lastActivityTime;
	double timeOutSeconds;
	BOOL shouldResetUploadProgress;
	BOOL shouldResetDownloadProgress;
	ASIHTTPRequest* mainRequest;
	BOOL showAccurateProgress;
	BOOL updatedProgress;
	BOOL haveBuiltPostBody;
	unsigned long long uploadBufferSize;
	unsigned defaultResponseEncoding;
	unsigned responseEncoding;
	BOOL allowResumeForFileDownloads;
	NSDictionary* userInfo;
	int tag;
	BOOL useHTTPVersionOne;
	BOOL shouldRedirect;
	BOOL needsRedirect;
	int redirectCount;
	BOOL validatesSecureCertificate;
	NSString* hostnameForSecureCertificate;
	SecIdentity* clientCertificateIdentity;
	NSArray* clientCertificates;
	NSString* proxyHost;
	int proxyPort;
	NSString* proxyType;
	NSURL* PACurl;
	int authenticationNeeded;
	BOOL shouldPresentCredentialsBeforeChallenge;
	BOOL inProgress;
	BOOL readStreamIsScheduled;
	int numberOfTimesToRetryOnTimeout;
	int retryCount;
	BOOL willRetryRequest;
	BOOL shouldAttemptPersistentConnection;
	double persistentConnectionTimeoutSeconds;
	BOOL connectionCanBeReused;
	NSMutableDictionary* connectionInfo;
	BOOL shouldUseRFC2616RedirectBehaviour;
	BOOL downloadComplete;
	NSNumber* requestID;
	NSString* runLoopMode;
	NSTimer* statusTimer;
	id<ASICacheDelegate> downloadCache;
	int cachePolicy;
	int cacheStoragePolicy;
	BOOL didUseCachedResponse;
	double secondsToCache;
	BOOL shouldContinueWhenAppEntersBackground;
	unsigned backgroundTask;
	ASIDataDecompressor* dataDecompressor;
	BOOL shouldWaitToInflateCompressedResponses;
	BOOL isPACFileRequest;
	ASIHTTPRequest* PACFileRequest;
	NSInputStream* PACFileReadStream;
	NSMutableData* PACFileData;
	BOOL isSynchronous;
	id startedBlock;
	id headersReceivedBlock;
	id completionBlock;
	id failureBlock;
	id bytesReceivedBlock;
	id bytesSentBlock;
	id downloadSizeIncrementedBlock;
	id uploadSizeIncrementedBlock;
	id dataReceivedBlock;
	id authenticationNeededBlock;
	id proxyAuthenticationNeededBlock;
	id requestRedirectedBlock;
}
@property(assign, nonatomic, setter=setSynchronous:) BOOL isSynchronous;
@property(retain, nonatomic) NSMutableData* PACFileData;
@property(retain, nonatomic) NSInputStream* PACFileReadStream;
@property(retain, nonatomic) ASIHTTPRequest* PACFileRequest;
@property(assign, nonatomic) BOOL isPACFileRequest;
@property(retain, nonatomic) NSURL* redirectURL;
@property(retain, nonatomic) NSTimer* statusTimer;
@property(assign, nonatomic) NSString* runLoopMode;
@property(assign, nonatomic) BOOL downloadComplete;
@property(assign, nonatomic) BOOL readStreamIsScheduled;
@property(retain, nonatomic) NSInputStream* readStream;
@property(retain, nonatomic) NSMutableDictionary* connectionInfo;
@property(assign) BOOL willRetryRequest;
@property(retain, nonatomic) NSString* compressedPostBodyFilePath;
@property(retain, nonatomic) NSData* compressedPostBody;
@property(assign, nonatomic) int redirectCount;
@property(assign, nonatomic) BOOL needsRedirect;
@property(assign, nonatomic) BOOL updatedProgress;
@property(retain, nonatomic) NSOutputStream* inflatedFileDownloadOutputStream;
@property(retain, nonatomic) NSOutputStream* fileDownloadOutputStream;
@property(retain) NSRecursiveLock* cancelledLock;
@property(assign, nonatomic) unsigned long long lastBytesSent;
@property(assign, nonatomic) unsigned long long lastBytesRead;
@property(retain, nonatomic) NSInputStream* postBodyReadStream;
@property(retain, nonatomic) NSOutputStream* postBodyWriteStream;
@property(assign, nonatomic) unsigned long long uploadBufferSize;
@property(retain, nonatomic) NSDate* lastActivityTime;
@property(assign) BOOL shouldWaitToInflateCompressedResponses;
@property(retain) ASIDataDecompressor* dataDecompressor;
@property(assign) BOOL shouldContinueWhenAppEntersBackground;
@property(retain) NSArray* clientCertificates;
@property(assign) double secondsToCache;
@property(assign) BOOL didUseCachedResponse;
@property(assign) int cacheStoragePolicy;
@property(assign) int cachePolicy;
@property(assign) id<ASICacheDelegate> downloadCache;
@property(retain) NSNumber* requestID;
@property(assign) BOOL connectionCanBeReused;
@property(assign) BOOL shouldUseRFC2616RedirectBehaviour;
@property(assign) double persistentConnectionTimeoutSeconds;
@property(assign) BOOL shouldAttemptPersistentConnection;
@property(assign) int retryCount;
@property(assign) int numberOfTimesToRetryOnTimeout;
@property(assign) BOOL inProgress;
@property(assign, nonatomic) BOOL haveBuiltPostBody;
@property(assign) BOOL haveBuiltRequestHeaders;
@property(assign) int proxyAuthenticationRetryCount;
@property(assign) int authenticationRetryCount;
@property(assign) BOOL shouldPresentCredentialsBeforeChallenge;
@property(assign) int authenticationNeeded;
@property(assign) BOOL shouldPresentProxyAuthenticationDialog;
@property(assign) BOOL shouldPresentAuthenticationDialog;
@property(retain) NSString* proxyAuthenticationScheme;
@property(retain) NSString* authenticationScheme;
@property(retain) NSURL* PACurl;
@property(assign) BOOL shouldCompressRequestBody;
@property(retain) NSString* hostnameForSecureCertificate;
@property(assign) BOOL validatesSecureCertificate;
@property(assign) BOOL shouldRedirect;
@property(assign) unsigned long long partialDownloadSize;
@property(assign) BOOL useHTTPVersionOne;
@property(assign) BOOL didCreateTemporaryPostDataFile;
@property(assign) BOOL shouldStreamPostDataFromDisk;
@property(retain) NSString* postBodyFilePath;
@property(assign) int tag;
@property(retain) NSDictionary* userInfo;
@property(assign) BOOL allowResumeForFileDownloads;
@property(assign) BOOL allowCompressedResponse;
@property(assign) unsigned responseEncoding;
@property(assign) unsigned defaultResponseEncoding;
@property(assign) unsigned long long totalBytesSent;
@property(assign) unsigned long long totalBytesRead;
@property(assign) BOOL showAccurateProgress;
@property(assign) ASIHTTPRequest* mainRequest;
@property(assign) BOOL shouldResetUploadProgress;
@property(assign) BOOL shouldResetDownloadProgress;
@property(assign) unsigned long long postLength;
@property(assign) unsigned long long contentLength;
@property(retain) NSMutableData* postBody;
@property(retain, nonatomic) NSString* requestMethod;
@property(assign) double timeOutSeconds;
@property(retain) NSMutableData* rawResponseData;
@property(retain) NSString* responseStatusMessage;
@property(assign) int responseStatusCode;
@property(retain) NSDictionary* proxyCredentials;
@property(retain) NSDictionary* requestCredentials;
@property(assign) BOOL useCookiePersistence;
@property(retain) NSArray* responseCookies;
@property(retain) NSMutableArray* requestCookies;
@property(retain) NSMutableDictionary* requestHeaders;
@property(retain) NSDictionary* responseHeaders;
@property(assign) BOOL complete;
@property(retain) NSError* error;
@property(retain) NSString* proxyAuthenticationRealm;
@property(retain) NSString* authenticationRealm;
@property(assign) SEL didReceiveDataSelector;
@property(assign) SEL didFailSelector;
@property(assign) SEL didFinishSelector;
@property(assign) SEL willRedirectSelector;
@property(assign) SEL didReceiveResponseHeadersSelector;
@property(assign) SEL didStartSelector;
@property(retain) NSString* temporaryUncompressedDataDownloadPath;
@property(retain) NSString* temporaryFileDownloadPath;
@property(retain) NSString* downloadDestinationPath;
@property(assign) BOOL useSessionPersistence;
@property(assign) BOOL useKeychainPersistence;
@property(assign, nonatomic) id downloadProgressDelegate;
@property(assign, nonatomic) id uploadProgressDelegate;
@property(retain, nonatomic) id queue;
@property(assign, nonatomic) id delegate;
@property(retain) NSURL* originalURL;
@property(retain, nonatomic, setter=setURL:) NSURL* url;
@property(retain) NSString* proxyType;
@property(assign) int proxyPort;
@property(retain) NSString* proxyHost;
@property(retain) NSString* proxyDomain;
@property(retain) NSString* proxyPassword;
@property(retain) NSString* proxyUsername;
@property(retain) NSString* domain;
@property(retain) NSString* userAgentString;
@property(retain) NSString* password;
@property(retain) NSString* username;
+(void)parseMimeType:(id*)type andResponseEncoding:(unsigned*)encoding fromContentType:(id)contentType;
+(id)dateFromRFC1123String:(id)rfc1123String;
+(id)expiryDateForRequest:(id)request maxAge:(double)age;
+(id)base64forData:(id)data;
+(BOOL)isMultitaskingSupported;
+(void)runRequests;
+(id)threadForRequest:(id)request;
+(void)hideNetworkActivityIndicatorIfNeeeded;
+(void)hideNetworkActivityIndicatorAfterDelay;
+(void)hideNetworkActivityIndicator;
+(void)showNetworkActivityIndicator;
+(void)setShouldUpdateNetworkActivityIndicator:(BOOL)updateNetworkActivityIndicator;
+(BOOL)isNetworkInUse;
+(id)defaultCache;
+(void)setDefaultCache:(id)cache;
+(id)sharedQueue;
+(void)reachabilityChanged:(id)changed;
+(BOOL)isNetworkReachableViaWWAN;
+(void)unsubscribeFromNetworkReachabilityNotifications;
+(void)registerForNetworkReachabilityNotifications;
+(void)throttleBandwidthForWWANUsingLimit:(unsigned long)wwanusingLimit;
+(void)setShouldThrottleBandwidthForWWAN:(BOOL)throttleBandwidthForWWAN;
+(unsigned long)maxUploadReadLength;
+(void)measureBandwidthUsage;
+(unsigned long)averageBandwidthUsedPerSecond;
+(void)recordBandwidthUsage;
+(void)incrementBandwidthUsedInLastSecond:(unsigned long)lastSecond;
+(void)setMaxBandwidthPerSecond:(unsigned long)second;
+(unsigned long)maxBandwidthPerSecond;
+(BOOL)isBandwidthThrottled;
+(id)mimeTypeForFileAtPath:(id)path;
+(void)setDefaultUserAgentString:(id)string;
+(id)defaultUserAgentString;
+(void)clearSession;
+(void)addSessionCookie:(id)cookie;
+(void)setSessionCookies:(id)cookies;
+(id)sessionCookies;
+(void)removeCredentialsForProxy:(id)proxy port:(int)port realm:(id)realm;
+(void)removeCredentialsForHost:(id)host port:(int)port protocol:(id)protocol realm:(id)realm;
+(id)savedCredentialsForProxy:(id)proxy port:(int)port protocol:(id)protocol realm:(id)realm;
+(id)savedCredentialsForHost:(id)host port:(int)port protocol:(id)protocol realm:(id)realm;
+(void)saveCredentials:(id)credentials forProxy:(id)proxy port:(int)port realm:(id)realm;
+(void)saveCredentials:(id)credentials forHost:(id)host port:(int)port protocol:(id)protocol realm:(id)realm;
+(void)removeAuthenticationCredentialsFromSessionStore:(id)sessionStore;
+(void)removeProxyAuthenticationCredentialsFromSessionStore:(id)sessionStore;
+(void)storeAuthenticationCredentialsInSessionStore:(id)sessionStore;
+(void)storeProxyAuthenticationCredentialsInSessionStore:(id)sessionStore;
+(id)sessionCredentialsStore;
+(id)sessionProxyCredentialsStore;
+(void)setDefaultTimeOutSeconds:(double)seconds;
+(double)defaultTimeOutSeconds;
+(void)expirePersistentConnections;
+(BOOL)removeFileAtPath:(id)path error:(id*)error;
+(void)updateProgressIndicator:(id*)indicator withProgress:(unsigned long long)progress ofTotal:(unsigned long long)total;
+(void)performInvocation:(id)invocation onTarget:(id*)target releasingObject:(id)object;
+(void)performSelector:(SEL)selector onTarget:(id*)target withObject:(id)object amount:(void*)amount callerToRetain:(id)retain;
+(void)releaseBlocks:(id)blocks;
+(id)requestWithURL:(id)url usingCache:(id)cache andCachePolicy:(int)policy;
+(id)requestWithURL:(id)url usingCache:(id)cache;
+(id)requestWithURL:(id)url;
+(void)initialize;
-(void)setRequestRedirectedBlock:(id)block;
-(void)setProxyAuthenticationNeededBlock:(id)block;
-(void)setAuthenticationNeededBlock:(id)block;
-(void)setDataReceivedBlock:(id)block;
-(void)setUploadSizeIncrementedBlock:(id)block;
-(void)setDownloadSizeIncrementedBlock:(id)block;
-(void)setBytesSentBlock:(id)block;
-(void)setBytesReceivedBlock:(id)block;
-(void)setFailedBlock:(id)block;
-(void)setCompletionBlock:(id)block;
-(void)setHeadersReceivedBlock:(id)block;
-(void)setStartedBlock:(id)block;
-(void)performThrottling;
-(id)findSessionAuthenticationCredentials;
-(id)findSessionProxyAuthenticationCredentials;
-(void)setClientCertificateIdentity:(SecIdentity*)identity;
-(id)copyWithZone:(NSZone*)zone;
-(id)connectionID;
-(void)finishedDownloadingPACFile:(id)file;
-(void)runPACScript:(id)script;
-(void)timeOutPACRead;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)fetchPACFile;
-(BOOL)configureProxies;
-(BOOL)removeTemporaryCompressedUploadFile;
-(BOOL)removeTemporaryUploadFile;
-(BOOL)removeTemporaryUncompressedDownloadFile;
-(BOOL)removeTemporaryDownloadFile;
-(void)unscheduleReadStream;
-(void)scheduleReadStream;
-(void)destroyReadStream;
-(void)handleStreamError;
-(BOOL)retryUsingNewConnection;
-(void)useDataFromCache;
-(void)markAsFinished;
-(void)handleStreamComplete;
-(void)handleBytesAvailable;
-(BOOL)willAskDelegateToConfirmRedirect;
-(void)handleNetworkEvent:(unsigned long)event;
-(void)addBasicAuthenticationHeaderWithUsername:(id)username andPassword:(id)password;
-(void)attemptToApplyCredentialsAndResume;
-(BOOL)showAuthenticationDialog;
-(void)attemptToApplyProxyCredentialsAndResume;
-(void)askDelegateForCredentials;
-(BOOL)willAskDelegateForCredentials;
-(void)askDelegateForProxyCredentials;
-(BOOL)willAskDelegateForProxyCredentials;
-(BOOL)showProxyAuthenticationDialog;
-(void)failAuthentication;
-(void)cancelAuthentication;
-(void)retryUsingSuppliedCredentials;
-(id)findCredentials;
-(id)findProxyCredentials;
-(BOOL)applyCredentials:(id)credentials;
-(BOOL)applyProxyCredentials:(id)credentials;
-(void)saveCredentialsToKeychain:(id)keychain;
-(void)saveProxyCredentialsToKeychain:(id)keychain;
-(void)parseStringEncodingFromHeaders;
-(BOOL)willRedirect;
-(void)readResponseHeaders;
-(void)failWithError:(id)error;
-(void)passOnReceivedData:(id)data;
-(void)reportFailure;
-(void)reportFinished;
-(void)requestFinished;
-(void)requestWillRedirectToURL:(id)request;
-(void)requestReceivedResponseHeaders:(id)headers;
-(void)requestRedirected;
-(void)requestStarted;
-(void)callBlock:(id)block;
-(void)performBlockOnMainThread:(id)thread;
-(void)removeUploadProgressSoFar;
-(void)incrementUploadSizeBy:(long long)by;
-(void)incrementDownloadSizeBy:(long long)by;
-(void)updateUploadProgress;
-(void)updateDownloadProgress;
-(void)updateProgressIndicators;
-(id)HEADRequest;
-(void)cancelLoad;
-(void)checkRequestStatus;
-(BOOL)shouldTimeOut;
-(void)redirectToURL:(id)url;
-(void)performRedirect;
-(void)updateStatus:(id)status;
-(void)startRequest;
-(void)updatePartialDownloadSize;
-(void)buildRequestHeaders;
-(void)applyCookieHeader;
-(void)applyAuthorizationHeader;
-(void)main;
-(BOOL)isExecuting;
-(BOOL)isFinished;
-(BOOL)isConcurrent;
-(void)startAsynchronous;
-(void)start;
-(void)startSynchronous;
-(id)responseData;
-(BOOL)isResponseCompressed;
-(id)responseString;
-(BOOL)isCancelled;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)cancelOnRequestThread;
-(void)appendPostDataFromFile:(id)file;
-(void)appendPostData:(id)data;
-(void)setupPostBody;
-(void)buildPostBody;
-(void)addRequestHeader:(id)header value:(id)value;
-(void)releaseBlocksOnMainThread;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

@interface ASIInputStream : NSObject <NSStreamDelegate> {
	NSInputStream* stream;
	id<NSStreamDelegate> delegate;
	/*function-pointer*/ void* copiedCallback;
	XXStruct_4pnlqD copiedContext;
	unsigned long requestedEvents;
	ASIHTTPRequest* request;
}
@property(assign, nonatomic) ASIHTTPRequest* request;
+(BOOL)resolveInstanceMethod:(SEL)method;
+(id)inputStreamWithData:(id)data request:(id)request;
+(id)inputStreamWithFileAtPath:(id)path request:(id)request;
+(void)initialize;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)unscheduleFromCFRunLoop:(CFRunLoopRef)cfrunLoop forMode:(CFStringRef)mode;
-(BOOL)setCFClientFlags:(unsigned long)flags callback:(/*function-pointer*/ void*)callback context:(XXStruct_4pnlqD*)context;
-(void)scheduleInCFRunLoop:(CFRunLoopRef)cfrunLoop forMode:(CFStringRef)mode;
-(BOOL)hasBytesAvailable;
-(BOOL)getBuffer:(char**)buffer length:(unsigned*)length;
-(int)read:(char*)read maxLength:(unsigned)length;
-(id)streamError;
-(unsigned)streamStatus;
-(BOOL)setProperty:(id)property forKey:(id)key;
-(id)propertyForKey:(id)key;
-(void)removeFromRunLoop:(id)runLoop forMode:(id)mode;
-(void)scheduleInRunLoop:(id)runLoop forMode:(id)mode;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)close;
-(void)open;
-(void)dealloc;
-(id)initWithInputStream:(id)inputStream;
@end

@interface ASINetworkQueue : NSOperationQueue <ASIProgressDelegate, ASIHTTPRequestDelegate, NSCopying> {
	id delegate;
	SEL requestDidStartSelector;
	SEL requestDidReceiveResponseHeadersSelector;
	SEL requestWillRedirectSelector;
	SEL requestDidFinishSelector;
	SEL requestDidFailSelector;
	SEL queueDidFinishSelector;
	id uploadProgressDelegate;
	unsigned long long bytesUploadedSoFar;
	unsigned long long totalBytesToUpload;
	id downloadProgressDelegate;
	unsigned long long bytesDownloadedSoFar;
	unsigned long long totalBytesToDownload;
	BOOL shouldCancelAllRequestsOnFailure;
	int requestsCount;
	BOOL showAccurateProgress;
	NSDictionary* userInfo;
}
@property(assign) unsigned long long totalBytesToDownload;
@property(assign) unsigned long long bytesDownloadedSoFar;
@property(assign) unsigned long long totalBytesToUpload;
@property(assign) unsigned long long bytesUploadedSoFar;
@property(retain) NSDictionary* userInfo;
@property(assign) int requestsCount;
@property(assign) BOOL showAccurateProgress;
@property(assign) id delegate;
@property(assign) BOOL shouldCancelAllRequestsOnFailure;
@property(assign) SEL queueDidFinishSelector;
@property(assign) SEL requestDidFailSelector;
@property(assign) SEL requestDidFinishSelector;
@property(assign) SEL requestWillRedirectSelector;
@property(assign) SEL requestDidReceiveResponseHeadersSelector;
@property(assign) SEL requestDidStartSelector;
@property(assign, nonatomic, setter=setDownloadProgressDelegate:) id downloadProgressDelegate;
@property(assign, nonatomic, setter=setUploadProgressDelegate:) id uploadProgressDelegate;
+(id)queue;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)respondsToSelector:(SEL)selector;
-(void)proxyAuthenticationNeededForRequest:(id)request;
-(void)authenticationNeededForRequest:(id)request;
-(void)request:(id)request incrementUploadSizeBy:(long long)by;
-(void)request:(id)request incrementDownloadSizeBy:(long long)by;
-(void)request:(id)request didSendBytes:(long long)bytes;
-(void)request:(id)request didReceiveBytes:(long long)bytes;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request willRedirectToURL:(id)url;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)requestStarted:(id)started;
-(void)addOperation:(id)operation;
-(void)addHEADOperation:(id)operation;
-(void)resetProgressDelegate:(id*)delegate;
-(void)cancelAllOperations;
-(void)go;
-(void)reset;
-(void)setSuspended:(BOOL)suspended;
-(void)dealloc;
-(id)init;
@end

@interface PodsDummy_Pods_ASIHTTPRequest : NSObject {
}
@end

@interface DDASLLogCapture : NSObject {
}
+(void)captureAslLogs;
+(void)aslMessageRecieved:(aslmsg*)recieved;
+(void)configureAslQuery:(aslmsg*)query;
+(void)setCaptureLogLevel:(int)level;
+(int)captureLogLevel;
+(void)stop;
+(void)start;
@end

@interface DDASLLogger : DDAbstractLogger <DDLogger> {
	aslclient* client;
}
+(id)sharedInstance;
-(id)loggerName;
-(void)logMessage:(id)message;
-(id)init;
@end

@interface DDAbstractDatabaseLogger : DDAbstractLogger {
	unsigned saveThreshold;
	double saveInterval;
	double maxAge;
	double deleteInterval;
	BOOL deleteOnEverySave;
	BOOL saveTimerSuspended;
	unsigned unsavedCount;
	unsigned long long unsavedTime;
	dispatch_source_s* saveTimer;
	unsigned long long lastDeleteTime;
	dispatch_source_s* deleteTimer;
}
@property(assign) BOOL deleteOnEverySave;
@property(assign) double deleteInterval;
@property(assign) double maxAge;
@property(assign) double saveInterval;
@property(assign) unsigned saveThreshold;
-(void)flush;
-(void)logMessage:(id)message;
-(void)willRemoveLogger;
-(void)didAddLogger;
-(void)deleteOldLogEntries;
-(void)savePendingLogEntries;
-(void)createAndStartDeleteTimer;
-(void)updateDeleteTimer;
-(void)destroyDeleteTimer;
-(void)createSuspendedSaveTimer;
-(void)updateAndResumeSaveTimer;
-(void)destroySaveTimer;
-(void)performDelete;
-(void)performSaveAndSuspendSaveTimer;
-(void)db_saveAndDelete;
-(void)db_delete;
-(void)db_save;
-(BOOL)db_log:(id)log;
-(void)dealloc;
-(id)init;
@end

@interface DDContextWhitelistFilterLogFormatter : NSObject <DDLogFormatter> {
	DDLoggingContextSet* contextSet;
}
-(void).cxx_destruct;
-(id)formatLogMessage:(id)message;
-(BOOL)isOnWhitelist:(int)whitelist;
-(id)whitelist;
-(void)removeFromWhitelist:(int)whitelist;
-(void)addToWhitelist:(int)whitelist;
-(id)init;
@end

@interface DDContextBlacklistFilterLogFormatter : NSObject <DDLogFormatter> {
	DDLoggingContextSet* contextSet;
}
-(void).cxx_destruct;
-(id)formatLogMessage:(id)message;
-(BOOL)isOnBlacklist:(int)blacklist;
-(id)blacklist;
-(void)removeFromBlacklist:(int)blacklist;
-(void)addToBlacklist:(int)blacklist;
-(id)init;
@end

@interface DDLoggingContextSet : NSObject {
	int lock;
	NSMutableSet* set;
}
-(void).cxx_destruct;
-(BOOL)isInSet:(int)set;
-(id)currentSet;
-(void)removeFromSet:(int)set;
-(void)addToSet:(int)set;
-(id)init;
@end

@interface DDDispatchQueueLogFormatter : NSObject <DDLogFormatter> {
	NSString* dateFormatString;
	int atomicLoggerCount;
	NSDateFormatter* threadUnsafeDateFormatter;
	int lock;
	unsigned _minQueueLength;
	unsigned _maxQueueLength;
	NSMutableDictionary* _replacements;
}
@property(assign) unsigned maxQueueLength;
@property(assign) unsigned minQueueLength;
-(void).cxx_destruct;
-(void)willRemoveFromLogger:(id)logger;
-(void)didAddToLogger:(id)logger;
-(id)formatLogMessage:(id)message;
-(id)queueThreadLabelForLogMessage:(id)logMessage;
-(id)stringFromDate:(id)date;
-(void)setReplacementString:(id)string forQueueLabel:(id)queueLabel;
-(id)replacementStringForQueueLabel:(id)queueLabel;
-(id)init;
@end

@interface DDLogFileManagerDefault : NSObject <DDLogFileManager> {
	unsigned maximumNumberOfLogFiles;
	NSString* _logsDirectory;
	NSString* _defaultFileProtectionLevel;
}
@property(assign) unsigned maximumNumberOfLogFiles;
-(void).cxx_destruct;
-(id)applicationName;
-(id)createNewLogFile;
-(id)newLogFileName;
-(id)sortedLogFileInfos;
-(id)sortedLogFileNames;
-(id)sortedLogFilePaths;
-(id)unsortedLogFileInfos;
-(id)unsortedLogFileNames;
-(id)unsortedLogFilePaths;
-(id)logFileDateFormatter;
-(BOOL)isLogFile:(id)file;
-(id)logsDirectory;
-(id)defaultLogsDirectory;
-(void)deleteOldLogFiles;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(id)initWithLogsDirectory:(id)logsDirectory defaultFileProtectionLevel:(id)level;
-(id)initWithLogsDirectory:(id)logsDirectory;
-(id)init;
@end

@interface DDLogFileFormatterDefault : NSObject <DDLogFormatter> {
	NSDateFormatter* dateFormatter;
}
-(void).cxx_destruct;
-(id)formatLogMessage:(id)message;
-(id)initWithDateFormatter:(id)dateFormatter;
-(id)init;
@end

@interface DDFileLogger : DDAbstractLogger <DDLogger> {
	id<DDLogFileManager> logFileManager;
	DDLogFileInfo* currentLogFileInfo;
	NSFileHandle* currentLogFileHandle;
	dispatch_source_s* currentLogFileVnode;
	dispatch_source_s* rollingTimer;
	unsigned long long maximumFileSize;
	double rollingFrequency;
	BOOL _doNotReuseLogFiles;
}
@property(readonly, assign, nonatomic) id<DDLogFileManager> logFileManager;
@property(assign) BOOL doNotReuseLogFiles;
@property(assign) double rollingFrequency;
@property(assign) unsigned long long maximumFileSize;
-(void).cxx_destruct;
-(id)loggerName;
-(void)willRemoveLogger;
-(void)logMessage:(id)message;
-(id)currentLogFileHandle;
-(id)currentLogFileInfo;
-(void)maybeRollLogFileDueToSize;
-(void)maybeRollLogFileDueToAge;
-(void)rollLogFileNow;
-(void)rollLogFileWithCompletionBlock:(id)completionBlock;
-(void)rollLogFile;
-(void)scheduleTimerToRollLogFileDueToAge;
-(void)dealloc;
-(id)initWithLogFileManager:(id)logFileManager;
-(id)init;
@end

@interface DDLogFileInfo : NSObject {
	NSString* filePath;
	NSString* fileName;
	NSDictionary* fileAttributes;
	NSDate* creationDate;
	NSDate* modificationDate;
	unsigned long long fileSize;
}
@property(assign, nonatomic) BOOL isArchived;
@property(readonly, assign, nonatomic) double age;
@property(readonly, assign, nonatomic) unsigned long long fileSize;
@property(readonly, assign, nonatomic) NSDate* modificationDate;
@property(readonly, assign, nonatomic) NSDate* creationDate;
@property(readonly, assign, nonatomic) NSDictionary* fileAttributes;
@property(readonly, assign, nonatomic) NSString* fileName;
@property(readonly, assign, nonatomic) NSString* filePath;
+(id)logFileWithPath:(id)path;
-(void).cxx_destruct;
-(int)reverseCompareByModificationDate:(id)date;
-(int)reverseCompareByCreationDate:(id)date;
-(BOOL)isEqual:(id)equal;
-(void)removeExtendedAttributeWithName:(id)name;
-(void)addExtendedAttributeWithName:(id)name;
-(BOOL)hasExtendedAttributeWithName:(id)name;
-(void)renameFile:(id)file;
-(void)reset;
-(id)description;
-(id)initWithFilePath:(id)filePath;
@end

@interface DDLog : NSObject {
}
+(void)lt_flush;
+(void)lt_log:(id)log;
+(id)lt_allLoggers;
+(void)lt_removeAllLoggers;
+(void)lt_removeLogger:(id)logger;
+(void)lt_addLogger:(id)logger logLevel:(int)level;
+(void)setLogLevel:(int)level forClassWithName:(id)name;
+(void)setLogLevel:(int)level forClass:(Class)aClass;
+(int)logLevelForClassWithName:(id)name;
+(int)logLevelForClass:(Class)aClass;
+(id)registeredClassNames;
+(id)registeredClasses;
+(BOOL)isRegisteredClass:(Class)aClass;
+(void)flushLog;
+(void)log:(BOOL)log message:(id)message;
+(void)log:(BOOL)log level:(int)level flag:(int)flag context:(int)context file:(const char*)file function:(const char*)function line:(int)line tag:(id)tag format:(id)format args:(void*)args;
+(void)log:(BOOL)log level:(int)level flag:(int)flag context:(int)context file:(const char*)file function:(const char*)function line:(int)line tag:(id)tag format:(id)format;
+(void)queueLogMessage:(id)message asynchronously:(BOOL)asynchronously;
+(id)allLoggers;
+(void)removeAllLoggers;
+(void)removeLogger:(id)logger;
+(void)addLogger:(id)logger withLogLevel:(int)logLevel;
+(void)addLogger:(id)logger;
+(void)applicationWillTerminate:(id)application;
+(dispatch_queue_s*)loggingQueue;
+(void)initialize;
@end

@interface DDLoggerNode : NSObject {
	id<DDLogger> logger;
	dispatch_queue_s* loggerQueue;
	int logLevel;
}
@property(readonly, assign, nonatomic) int logLevel;
+(id)nodeWithLogger:(id)logger loggerQueue:(dispatch_queue_s*)queue logLevel:(int)level;
-(void).cxx_destruct;
-(void)dealloc;
-(id)initWithLogger:(id)logger loggerQueue:(dispatch_queue_s*)queue logLevel:(int)level;
@end

@interface DDLogMessage : NSObject <NSCopying> {
	int logLevel;
	int logFlag;
	int logContext;
	NSString* logMsg;
	NSDate* timestamp;
	char* file;
	char* function;
	int lineNumber;
	unsigned machThreadID;
	char* queueLabel;
	NSString* threadName;
	id tag;
	int options;
}
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)methodName;
-(id)fileName;
-(id)threadID;
-(id)initWithLogMsg:(id)logMsg level:(int)level flag:(int)flag context:(int)context file:(const char*)file function:(const char*)function line:(int)line tag:(id)tag options:(int)options timestamp:(id)timestamp;
-(id)initWithLogMsg:(id)logMsg level:(int)level flag:(int)flag context:(int)context file:(const char*)file function:(const char*)function line:(int)line tag:(id)tag options:(int)options;
@end

@interface DDAbstractLogger : NSObject <DDLogger> {
	id<DDLogFormatter> formatter;
	dispatch_queue_s* loggerQueue;
}
-(void).cxx_destruct;
-(BOOL)isOnInternalLoggerQueue;
-(BOOL)isOnGlobalLoggingQueue;
-(id)loggerName;
-(dispatch_queue_s*)loggerQueue;
-(void)setLogFormatter:(id)formatter;
-(id)logFormatter;
-(void)logMessage:(id)message;
-(void)dealloc;
-(id)init;
@end

@interface DDMultiFormatter : NSObject <DDLogFormatter> {
	dispatch_queue_s* _queue;
	NSMutableArray* _formatters;
}
@property(readonly, assign) NSArray* formatters;
-(void).cxx_destruct;
-(BOOL)isFormattingWithFormatter:(id)formatter;
-(void)removeAllFormatters;
-(void)removeFormatter:(id)formatter;
-(void)addFormatter:(id)formatter;
-(id)logMessageForLine:(id)line originalMessage:(id)message;
-(id)formatLogMessage:(id)message;
-(void)dealloc;
-(id)init;
@end

@interface DDTTYLogger : DDAbstractLogger <DDLogger> {
	NSCalendar* calendar;
	unsigned calendarUnitFlags;
	NSString* appName;
	char* app;
	unsigned long appLen;
	NSString* processID;
	char* pid;
	unsigned long pidLen;
	BOOL colorsEnabled;
	NSMutableArray* colorProfilesArray;
	NSMutableDictionary* colorProfilesDict;
}
@property(assign) BOOL colorsEnabled;
+(id)sharedInstance;
+(unsigned)codeIndexForColor:(id)color;
+(void)getRed:(float*)red green:(float*)green blue:(float*)blue fromColor:(id)color;
+(void)initialize_colors_256;
+(void)initialize_colors_16;
-(void).cxx_destruct;
-(id)loggerName;
-(void)logMessage:(id)message;
-(void)clearAllColors;
-(void)clearColorsForAllTags;
-(void)clearColorsForAllFlags;
-(void)clearColorsForTag:(id)tag;
-(void)clearColorsForFlag:(int)flag context:(int)context;
-(void)clearColorsForFlag:(int)flag;
-(void)setForegroundColor:(id)color backgroundColor:(id)color2 forTag:(id)tag;
-(void)setForegroundColor:(id)color backgroundColor:(id)color2 forFlag:(int)flag context:(int)context;
-(void)setForegroundColor:(id)color backgroundColor:(id)color2 forFlag:(int)flag;
-(void)loadDefaultColorProfiles;
-(id)init;
@end

@interface DDTTYLoggerColorProfile : NSObject {
	int mask;
	int context;
	unsigned char fg_r;
	unsigned char fg_g;
	unsigned char fg_b;
	unsigned char bg_r;
	unsigned char bg_g;
	unsigned char bg_b;
	unsigned fgCodeIndex;
	NSString* fgCodeRaw;
	unsigned bgCodeIndex;
	NSString* bgCodeRaw;
	BOOL fgCode[24];
	unsigned long fgCodeLen;
	BOOL bgCode[24];
	unsigned long bgCodeLen;
	BOOL resetCode[8];
	unsigned long resetCodeLen;
}
-(void).cxx_destruct;
-(id)description;
-(id)initWithForegroundColor:(id)foregroundColor backgroundColor:(id)color flag:(int)flag context:(int)context;
@end

@interface PodsDummy_Pods_CocoaLumberjack : NSObject {
}
@end

@interface FBAccessTokenData : NSObject <NSCopying> {
	NSString* _accessToken;
	NSArray* _permissions;
	NSDate* _expirationDate;
	int _loginType;
	NSDate* _refreshDate;
	NSDate* _permissionsRefreshDate;
}
@property(copy, nonatomic) NSDate* permissionsRefreshDate;
@property(copy, nonatomic) NSDate* refreshDate;
@property(readonly, assign, nonatomic) int loginType;
@property(readonly, copy, nonatomic) NSDate* expirationDate;
@property(copy, nonatomic) NSArray* permissions;
@property(readonly, copy, nonatomic) NSString* accessToken;
+(id)createTokenFromString:(id)string permissions:(id)permissions expirationDate:(id)date loginType:(int)type refreshDate:(id)date5 permissionsRefreshDate:(id)date6;
+(id)createTokenFromString:(id)string permissions:(id)permissions expirationDate:(id)date loginType:(int)type refreshDate:(id)date5;
+(id)createTokenFromDictionary:(id)dictionary;
+(id)createTokenFromFacebookURL:(id)facebookURL appID:(id)anId urlSchemeSuffix:(id)suffix;
-(id)description;
-(id)dictionary;
-(BOOL)isEqualToAccessTokenData:(id)accessTokenData;
-(id)copyWithZone:(NSZone*)zone;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(void)dealloc;
-(id)initWithToken:(id)token permissions:(id)permissions expirationDate:(id)date loginType:(int)type refreshDate:(id)date5 permissionsRefreshDate:(id)date6;
@end

@interface FBAppBridge : NSObject {
	NSMutableDictionary* _pendingAppCalls;
	NSMutableDictionary* _callbacks;
	FBAppBridgeTypeToJSONConverter* _jsonConverter;
	NSString* _appID;
	NSString* _bundleID;
	NSString* _appName;
}
@property(copy, nonatomic) NSString* appName;
@property(copy, nonatomic) NSString* bundleID;
@property(copy, nonatomic) NSString* appID;
@property(retain, nonatomic) FBAppBridgeTypeToJSONConverter* jsonConverter;
@property(retain, nonatomic) NSMutableDictionary* callbacks;
@property(retain, nonatomic) NSMutableDictionary* pendingAppCalls;
+(id)errorFromDictionary:(id)dictionary;
+(id)appIconFromBundleInfo:(id)bundleInfo;
+(id)installedFBNativeAppVersionForMethod:(id)method minVersion:(id)version;
+(id)urlForMethod:(id)method queryParams:(id)params version:(id)version;
+(id)symmetricKeyAndForceRefresh:(BOOL)refresh;
+(id)sharedInstance;
-(void)deletePasteboardsForAppCallID:(id)appCallID;
-(void)savePasteboardNames:(id)names forAppCallID:(id)appCallID;
-(id)dictionaryFromJSONString:(id)jsonstring;
-(id)jsonStringFromDictionary:(id)dictionary;
-(void)stopTrackingCallWithID:(id)anId;
-(void)trackAppCall:(id)call withCompletionHandler:(id)completionHandler;
-(void)addAppMetadataToDictionary:(id)dictionary;
-(id)decryptUrlQueryParams:(id)params method:(id)method fallbackHandler:(id)handler;
-(BOOL)processResponse:(id)response method:(id)method session:(id)session fallbackHandler:(id)handler;
-(void)handleDidBecomeActive;
-(BOOL)handleOpenURL:(id)url sourceApplication:(id)application session:(id)session fallbackHandler:(id)handler;
-(void)invoke:(id)invoke forFailedAppCall:(id)failedAppCall withMessage:(id)message;
-(void)performDialogAppCall:(id)call version:(id)version session:(id)session completionHandler:(id)handler;
-(void)dispatchDialogAppCall:(id)call version:(id)version session:(id)session completionHandler:(id)handler;
-(void)dealloc;
-(id)init;
@end

@interface FBAppBridgeTypeToJSONConverter : NSObject {
	NSMutableArray* _createdPasteboardNames;
}
@property(retain, nonatomic) NSMutableArray* createdPasteboardNames;
+(id)appBridgeTypeFromJSON:(id)json;
-(id)jsonFromData:(id)data tag:(id)tag;
-(id)convertedArrayFromArray:(id)array convertingToJSON:(BOOL)json;
-(id)convertedDictionaryFromDictionary:(id)dictionary convertingToJSON:(BOOL)json;
-(id)convertedObjectFromObject:(id)object convertingToJSON:(BOOL)json;
-(id)dictionaryWithAppBridgeTypesFromJSONDictionary:(id)jsondictionary;
-(id)jsonDictionaryFromDictionaryWithAppBridgeTypes:(id)appBridgeTypes;
-(void)dealloc;
@end

@interface FBAppCall : NSObject {
	NSString* _ID;
	NSError* _error;
	FBDialogsData* _dialogData;
	FBAppLinkData* _appLinkData;
	FBAccessTokenData* _accessTokenData;
}
@property(retain, nonatomic) FBAccessTokenData* accessTokenData;
@property(retain, nonatomic) FBAppLinkData* appLinkData;
@property(retain, nonatomic) FBDialogsData* dialogData;
@property(retain, nonatomic) NSError* error;
@property(copy, nonatomic) NSString* ID;
+(void)openDeferredAppLink:(id)link;
+(void)invokeHandler:(id)handler withError:(id)error;
+(BOOL)invokeHandler:(id)handler withAccessToken:(id)accessToken appLinkData:(id)data;
+(BOOL)tryOpenSession:(id)session withAccessToken:(id)accessToken;
+(void)handleDidBecomeActiveWithSession:(id)handle;
+(void)handleDidBecomeActive;
+(BOOL)handleOpenURL:(id)url sourceApplication:(id)application withSession:(id)session fallbackHandler:(id)handler;
+(BOOL)handleOpenURL:(id)url sourceApplication:(id)application withSession:(id)session;
+(BOOL)handleOpenURL:(id)url sourceApplication:(id)application fallbackHandler:(id)handler;
+(BOOL)handleOpenURL:(id)url sourceApplication:(id)application;
+(id)appCallFromURL:(id)url;
+(id)appCallFromApplinkArgs_v2:(id)applinkArgs_v2 applinkArgs:(id)args createTimeUTC:(id)utc originalQueryParameters:(id)parameters;
-(BOOL)isValid;
-(unsigned)hash;
-(BOOL)isEqualToAppCall:(id)appCall;
-(BOOL)isEqual:(id)equal;
-(id)description;
-(void)dealloc;
-(id)initWithID:(id)anId enforceScheme:(BOOL)scheme appID:(id)anId3 urlSchemeSuffix:(id)suffix;
-(id)init:(BOOL)init;
-(id)init;
@end

@interface FBAppEvents : NSObject {
	BOOL _haveOutstandingPersistedData;
	BOOL _appSupportsImplicitLogging;
	BOOL _haveFetchedAppSettings;
	int _flushBehavior;
	FBSession* _lastSessionLoggedTo;
	FBSession* _anonymousSession;
	NSMutableDictionary* _appAuthSessions;
	NSTimer* _flushTimer;
	NSTimer* _attributionIDRecheckTimer;
	int _appSupportsAttributionStatus;
	NSRegularExpression* _eventNameRegex;
	NSMutableSet* _validatedIdentifiers;
}
@property(retain) NSMutableDictionary* appAuthSessions;
@property(retain) NSMutableSet* validatedIdentifiers;
@property(retain) NSRegularExpression* eventNameRegex;
@property(assign) BOOL haveFetchedAppSettings;
@property(assign) BOOL appSupportsImplicitLogging;
@property(assign) int appSupportsAttributionStatus;
@property(retain) NSTimer* attributionIDRecheckTimer;
@property(retain) NSTimer* flushTimer;
@property(retain) FBSession* anonymousSession;
@property(retain) FBSession* lastSessionLoggedTo;
@property(assign) BOOL haveOutstandingPersistedData;
@property(assign) int flushBehavior;
+(id)flushReasonToString:(int)string;
+(id)customAudienceThirdPartyIDRequest:(id)request;
+(void)ensureOnMainThread;
+(id)persistenceFilePath;
+(void)clearPersistedAppEventData;
+(id)retrievePersistedAppEventData;
+(void)persistAppEventsData:(id)data;
+(void)logAndNotify:(id)notify;
+(long)unixTimeNow;
+(id)unaffinitizedSessionFromToken:(id)token appID:(id)anId;
+(id)singleton;
+(void)flush;
+(void)setFlushBehavior:(int)behavior;
+(int)flushBehavior;
+(void)activateApp;
+(void)setLimitEventUsage:(BOOL)usage;
+(BOOL)limitEventUsage;
+(void)logConversionPixel:(id)pixel valueOfPixel:(double)pixel2 session:(id)session;
+(void)logPurchase:(double)purchase currency:(id)currency parameters:(id)parameters session:(id)session;
+(void)logPurchase:(double)purchase currency:(id)currency parameters:(id)parameters;
+(void)logPurchase:(double)purchase currency:(id)currency;
+(void)logImplicitEvent:(id)event valueToSum:(id)sum parameters:(id)parameters session:(id)session;
+(void)logEvent:(id)event valueToSum:(id)sum parameters:(id)parameters session:(id)session;
+(void)logEvent:(id)event valueToSum:(double)sum parameters:(id)parameters;
+(void)logEvent:(id)event parameters:(id)parameters;
+(void)logEvent:(id)event valueToSum:(double)sum;
+(void)logEvent:(id)event;
-(id)instanceCustomAudienceThirdPartyIDRequest:(id)request;
-(void)persistDataIfNotInFlight;
-(void)applicationTerminating;
-(void)applicationMovingFromActiveState;
-(BOOL)updateAppEventsStateWithPersistedData:(id)persistedData;
-(void)applicationDidBecomeActive;
-(void)attributionIDRecheckTimerFired:(id)fired;
-(void)flushTimerFired:(id)fired;
-(void)handleActivitiesPostCompletion:(id)completion loggingEntry:(id)entry session:(id)session;
-(id)sessionToSendRequestTo:(id)to;
-(BOOL)doesSessionHaveUserToken:(id)token;
-(void)appendAttributionAndAdvertiserIDs:(id)ids session:(id)session;
-(void)flushOnMainQueue:(int)queue session:(id)session;
-(void)flush:(int)flush session:(id)session;
-(void)instanceFlush:(int)flush;
-(void)instanceLogEvent:(id)event valueToSum:(id)sum parameters:(id)parameters isImplicitlyLogged:(BOOL)logged session:(id)session;
-(BOOL)regexValidateIdentifier:(id)identifier;
-(BOOL)validateIdentifier:(id)identifier;
-(id)init;
@end

@interface FBAppLinkData : NSObject {
	NSURL* _targetURL;
	NSArray* _actionTypes;
	NSArray* _actionIDs;
	NSArray* _ref;
	NSDictionary* _originalQueryParameters;
	NSURL* _originalURL;
	NSDictionary* _arguments;
}
@property(copy) NSDictionary* arguments;
@property(retain) NSURL* originalURL;
@property(copy) NSDictionary* originalQueryParameters;
@property(copy) NSArray* ref;
@property(copy) NSArray* actionIDs;
@property(copy) NSArray* actionTypes;
@property(retain) NSURL* targetURL;
+(id)createFromURL:(id)url;
-(id)description;
-(BOOL)isValid;
-(void)dealloc;
-(id)initWithURL:(id)url targetURL:(id)url2 ref:(id)ref originalQueryParameters:(id)parameters arguments:(id)arguments;
-(id)initWithURL:(id)url;
@end

@interface FBCacheDescriptor : NSObject {
}
-(void)prefetchAndCacheForSession:(id)session;
@end

@interface FBCacheIndex : NSObject <NSCacheDelegate> {
	id<FBCacheIndexFileDelegate> _delegate;
	NSCache* _cachedEntries;
	unsigned _currentDiskUsage;
	unsigned _diskCapacity;
	sqlite3* _database;
	sqlite3_stmt* _insertStatement;
	sqlite3_stmt* _removeByKeyStatement;
	sqlite3_stmt* _selectByKeyStatement;
	sqlite3_stmt* _selectByKeyFragmentStatement;
	sqlite3_stmt* _selectExcludingKeyFragmentStatement;
	sqlite3_stmt* _trimStatement;
	sqlite3_stmt* _updateStatement;
	dispatch_queue_s* _databaseQueue;
}
@property(readonly, assign, nonatomic) dispatch_queue_s* databaseQueue;
@property(assign, nonatomic) unsigned entryCacheCountLimit;
@property(assign, nonatomic) unsigned diskCapacity;
@property(readonly, assign, nonatomic) unsigned currentDiskUsage;
@property(assign) id delegate;
-(void)_trimDatabase;
-(void)_flushOrphanedFiles;
-(void)_dropTrimmingTable;
-(void)_removeEntryFromDatabaseForKey:(id)key;
-(id)_entryForKey:(id)key;
-(void)_fetchCurrentDiskUsage;
-(id)_createCacheEntityInfo:(sqlite3_stmt*)info;
-(id)_readEntriesFromDatabase:(id)database excludingFragment:(BOOL)fragment;
-(id)_readEntryFromDatabase:(id)database;
-(void)_writeEntryInDatabase:(id)database;
-(void)_updateEntryInDatabaseForKey:(id)key entry:(id)entry;
-(void)cache:(id)cache willEvictObject:(id)object;
-(void)removeEntries:(id)entries excludingFragment:(BOOL)fragment;
-(void)removeEntryForKey:(id)key;
-(id)storeFileForKey:(id)key withData:(id)data;
-(id)fileNameForKey:(id)key;
-(void)dealloc;
-(id)initWithCacheFolder:(id)cacheFolder;
@end

@interface FBCacheEntityInfo : NSObject {
	NSString* _uuid;
	NSString* _key;
	double _accessTime;
	unsigned _fileSize;
	BOOL _dirty;
}
@property(assign, getter=isDirty) BOOL dirty;
@property(readonly, assign) unsigned fileSize;
@property(readonly, assign) double accessTime;
@property(readonly, copy) NSString* uuid;
@property(readonly, copy) NSString* key;
-(void)registerAccess;
-(void)dealloc;
-(id)initWithKey:(id)key uuid:(id)uuid accessTime:(double)time fileSize:(unsigned)size;
@end

@interface FBCrypto : NSObject {
	NSData* _encryptionKeyData;
	NSData* _macKeyData;
}
+(id)randomBytes:(unsigned)bytes;
+(id)makeMasterKey;
-(id)decrypt:(id)decrypt additionalSignedData:(id)data;
-(id)encrypt:(id)encrypt additionalDataToSign:(id)sign;
-(id)_macForIV:(id)iv cipherData:(id)data additionalDataToSign:(id)sign;
-(void)dealloc;
-(id)initWithEncryptionKey:(id)encryptionKey macKey:(id)key;
-(id)initWithMasterKey:(id)masterKey;
@end

@interface FBDataDiskCache : NSObject <FBCacheIndexFileDelegate> {
	NSCache* _inMemoryCache;
	FBCacheIndex* _cacheIndex;
	NSString* _dataCachePath;
	dispatch_queue_s* _fileQueue;
}
@property(copy, nonatomic) NSString* dataCachePath;
@property(readonly, assign, nonatomic) dispatch_queue_s* fileQueue;
@property(assign, nonatomic) unsigned cacheSizeMemory;
+(id)sharedCache;
-(void)setData:(id)data forURL:(id)url;
-(void)removeDataForSession:(id)session;
-(void)removeDataForUrl:(id)url;
-(id)dataForURL:(id)url;
-(BOOL)_doesFileExist:(id)exist;
-(void)cacheIndex:(id)index deleteFileWithName:(id)name;
-(void)cacheIndex:(id)index writeFileWithName:(id)name data:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface FBDialog : UIView <UIWebViewDelegate> {
	id<FBDialogDelegate> _delegate;
	NSMutableDictionary* _params;
	NSString* _serverURL;
	NSURL* _loadingURL;
	UIWebView* _webView;
	UIActivityIndicatorView* _spinner;
	UIButton* _closeButton;
	int _orientation;
	BOOL _showingKeyboard;
	BOOL _isViewInvisible;
	FBFrictionlessRequestSettings* _frictionlessSettings;
	UIView* _modalBackgroundView;
	BOOL _everShown;
}
@property(retain, nonatomic) NSMutableDictionary* params;
@property(assign, nonatomic) id<FBDialogDelegate> delegate;
-(void)dialogDidCancel:(id)dialog;
-(void)dialogDidSucceed:(id)dialog;
-(void)dialogWillDisappear;
-(void)dialogWillAppear;
-(void)dismissWithError:(id)error animated:(BOOL)animated;
-(void)dismissWithSuccess:(BOOL)success animated:(BOOL)animated;
-(void)show;
-(void)loadURL:(id)url get:(id)get;
-(void)load;
-(id)initWithURL:(id)url params:(id)params isViewInvisible:(BOOL)invisible frictionlessSettings:(id)settings delegate:(id)delegate;
-(id)getStringFromUrl:(id)url needle:(id)needle;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)deviceOrientationDidChange:(void*)deviceOrientation;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)hideSpinner;
-(void)showSpinner;
-(void)showWebView;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)init;
-(void)dialogSuccessHandleFrictionlessResponses:(id)responses;
-(BOOL)testBoolUrlParam:(id)param param:(id)param2;
-(void)cancel;
-(void)dismiss:(BOOL)dismiss;
-(void)postDismissCleanup;
-(void)removeObservers;
-(void)addObservers;
-(id)generateURL:(id)url params:(id)params;
-(void)bounce2AnimationStopped;
-(void)bounce1AnimationStopped;
-(void)updateWebOrientation;
-(void)sizeToFitOrientation:(BOOL)fitOrientation;
-(CGAffineTransform)transformForOrientation;
-(BOOL)shouldRotateToOrientation:(int)orientation;
-(void)strokeLines:(CGRect)lines stroke:(const float*)stroke;
-(void)drawRect:(CGRect)rect fill:(const float*)fill radius:(float)radius;
-(void)addRoundedRectToPath:(CGContextRef)path rect:(CGRect)rect radius:(float)radius;
@end

@interface FBDialogClosePNG : NSObject {
}
+(id)image;
@end

@interface FBDialogs : NSObject {
}
+(id)createError:(id)error session:(id)session;
+(id)composeViewControllerWithSession:(id)session handler:(id)handler;
+(id)presentShareDialogWithOpenGraphAction:(id)openGraphAction actionType:(id)type previewPropertyName:(id)name clientState:(id)state handler:(id)handler;
+(id)presentShareDialogWithOpenGraphAction:(id)openGraphAction actionType:(id)type previewPropertyName:(id)name handler:(id)handler;
+(id)presentShareDialogWithOpenGraphActionParams:(id)openGraphActionParams clientState:(id)state handler:(id)handler;
+(BOOL)canPresentShareDialogWithOpenGraphActionParams:(id)openGraphActionParams;
+(id)presentShareDialogWithLink:(id)link name:(id)name caption:(id)caption description:(id)description picture:(id)picture clientState:(id)state handler:(id)handler;
+(id)presentShareDialogWithLink:(id)link name:(id)name handler:(id)handler;
+(id)presentShareDialogWithLink:(id)link handler:(id)handler;
+(id)presentShareDialogWithParams:(id)params clientState:(id)state handler:(id)handler;
+(BOOL)canPresentShareDialogWithParams:(id)params;
+(id)presentLoginDialogWithParams:(id)params clientState:(id)state handler:(id)handler;
+(BOOL)canPresentLoginDialogWithParams:(id)params;
+(BOOL)canPresentOSIntegratedShareDialogWithSession:(id)session;
+(BOOL)presentOSIntegratedShareDialogModallyFrom:(id)from session:(id)session initialText:(id)text images:(id)images urls:(id)urls handler:(id)handler;
+(BOOL)presentOSIntegratedShareDialogModallyFrom:(id)from initialText:(id)text images:(id)images urls:(id)urls handler:(id)handler;
+(BOOL)presentOSIntegratedShareDialogModallyFrom:(id)from initialText:(id)text image:(id)image url:(id)url handler:(id)handler;
@end

@interface FBDialogsData : NSObject {
	NSString* _method;
	NSDictionary* _arguments;
	NSDictionary* _clientState;
	NSDictionary* _results;
}
@property(copy, nonatomic) NSDictionary* results;
@property(copy, nonatomic) NSDictionary* clientState;
@property(copy, nonatomic) NSDictionary* arguments;
@property(copy, nonatomic) NSString* method;
-(BOOL)isValid;
-(void)dealloc;
-(id)description;
-(id)initWithMethod:(id)method arguments:(id)arguments;
@end

@interface FBDialogsParams : NSObject {
}
-(id)validate;
-(id)appBridgeVersion;
-(id)dictionaryMethodArgs;
@end

@interface FBDynamicFrameworkLoader : NSObject {
}
+(void)setSqlitePath:(id)path;
+(id)sqlitePath;
+(void)setFrameworkPathTemplate:(id)aTemplate;
+(id)frameworkPathTemplate;
+(void*)loadSymbol:(id)symbol withFramework:(id)framework;
+(SecRandom*)loadkSecRandomDefault;
+(id)loadStringConstant:(id)constant withFramework:(id)framework;
+(Class)loadClass:(id)aClass withFramework:(id)framework;
@end

@interface FBErrorUtility : NSObject {
}
+(id)fberrorForSystemPasswordChange:(id)systemPasswordChange;
+(id)fberrorForRetry:(id)retry;
+(void)fberrorGetCodeValueForError:(id)error index:(unsigned)index code:(int*)code subcode:(int*)subcode;
+(BOOL)fberrorIsErrorFromSystemSession:(id)systemSession;
+(int)fberrorCategoryFromError:(id)error code:(int)code subcode:(int)subcode returningUserMessage:(id*)message andShouldNotifyUser:(BOOL*)anAnd;
+(id)userMessageForError:(id)error;
+(BOOL)shouldNotifyUserForError:(id)error;
+(int)errorCategoryForError:(id)error;
@end

@interface FBFetchedAppSettings : NSObject {
	BOOL _supportsAttribution;
	BOOL _supportsImplicitSdkLogging;
	BOOL _suppressNativeGdp;
	NSString* _serverAppName;
	NSString* _appID;
}
@property(retain, nonatomic) NSString* appID;
@property(assign) BOOL suppressNativeGdp;
@property(assign) BOOL supportsImplicitSdkLogging;
@property(assign) BOOL supportsAttribution;
@property(copy, nonatomic) NSString* serverAppName;
-(void)dealloc;
-(id)initWithAppID:(id)appID;
-(id)init;
@end

@interface FBFrictionlessRecipientCache : FBCacheDescriptor <FBFrictionlessDialogSupportDelegate, FBWebDialogsDelegate> {
	BOOL _frictionlessShouldMakeViewInvisible;
	FBFrictionlessRequestSettings* _frictionlessSettings;
}
@property(retain, nonatomic) FBFrictionlessRequestSettings* frictionlessSettings;
@property(assign, nonatomic) BOOL frictionlessShouldMakeViewInvisible;
@property(copy, nonatomic) NSArray* recipientIDs;
-(void)webDialogsWillPresentDialog:(id)webDialogs parameters:(id)parameters session:(id)session;
-(void)prefetchAndCacheForSession:(id)session completionHandler:(id)handler;
-(void)prefetchAndCacheForSession:(id)session;
-(BOOL)areFrictionlessRecipients:(id)recipients;
-(BOOL)isFrictionlessRecipient:(id)recipient;
-(void)dealloc;
-(id)init;
@end

@interface FBFrictionlessRequestSettings : NSObject <FBRequestDelegate> {
	NSArray* _allowedRecipients;
	FBRequest* _activeRequest;
	BOOL _enabled;
}
@property(retain) FBRequest* activeRequest;
@property(retain) NSArray* allowedRecipients;
@property(readonly, assign, nonatomic) NSArray* recipientIDs;
@property(readonly, assign, nonatomic) BOOL enabled;
-(void)dealloc;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didLoad:(id)load;
-(void)updateRecipientCacheWithRequestResult:(id)requestResult;
-(BOOL)isFrictionlessEnabledForRecipients:(id)recipients;
-(BOOL)isFrictionlessEnabledForRecipient:(id)recipient;
-(void)updateRecipientCacheWithRecipients:(id)recipients;
-(void)reloadRecipientCacheWithFacebook:(id)facebook;
-(void)enableWithFacebook:(id)facebook;
-(id)init;
@end

@interface FBFriendPickerCacheDescriptor : FBCacheDescriptor <FBGraphObjectPagingLoaderDelegate> {
	BOOL _hasCompletedFetch;
	BOOL _usePageLimitOfOne;
	NSSet* _fieldsForRequest;
	NSString* _userID;
	FBGraphObjectPagingLoader* _loader;
}
@property(assign, nonatomic) BOOL usePageLimitOfOne;
@property(assign, nonatomic) BOOL hasCompletedFetch;
@property(retain, nonatomic) FBGraphObjectPagingLoader* loader;
@property(copy, nonatomic) NSString* userID;
@property(copy, nonatomic) NSSet* fieldsForRequest;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)setUsePageLimitOfOne;
-(void)prefetchAndCacheForSession:(id)session;
-(void)dealloc;
-(id)initWithUserID:(id)userID fieldsForRequest:(id)request;
-(id)initWithFieldsForRequest:(id)request;
-(id)initWithUserID:(id)userID;
-(id)init;
@end

@interface FBFriendPickerViewController : FBViewController <FBGraphObjectSelectionChangedDelegate, FBGraphObjectViewControllerDelegate, FBGraphObjectPagingLoaderDelegate> {
	BOOL _allowsMultipleSelection;
	BOOL _trackActiveSession;
	FBGraphObjectTableDataSource* _dataSource;
	id<FBViewControllerDelegate> _delegate;
	NSSet* _fieldsForRequest;
	FBGraphObjectTableSelection* _selectionManager;
	UIActivityIndicatorView* _spinner;
	UITableView* _tableView;
	NSString* _userID;
	FBGraphObjectPagingLoader* _loader;
	int _sortOrdering;
	int _displayOrdering;
	FBSession* _session;
}
@property(assign, nonatomic) BOOL trackActiveSession;
@property(retain, nonatomic) FBGraphObjectPagingLoader* loader;
@property(retain, nonatomic) FBGraphObjectTableSelection* selectionManager;
@property(retain, nonatomic) FBGraphObjectTableDataSource* dataSource;
@property(assign, nonatomic) int displayOrdering;
@property(assign, nonatomic) int sortOrdering;
@property(readonly, retain, nonatomic) NSArray* selection;
@property(copy, nonatomic) NSString* userID;
@property(retain, nonatomic) FBSession* session;
@property(copy, nonatomic) NSSet* fieldsForRequest;
@property(assign, nonatomic) BOOL itemPicturesEnabled;
@property(assign, nonatomic) BOOL allowsMultipleSelection;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) UIActivityIndicatorView* spinner;
+(id)requestWithUserID:(id)userID fields:(id)fields dataSource:(id)source session:(id)session;
+(id)cacheDescriptorWithUserID:(id)userID fieldsForRequest:(id)request;
+(id)cacheDescriptor;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)pagingLoaderWasCancelled:(id)cancelled;
-(void)pagingLoader:(id)loader handleError:(id)error;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)pagingLoader:(id)loader didLoadData:(id)data;
-(void)pagingLoader:(id)loader willLoadURL:(id)url;
-(void)graphObjectTableDataSource:(id)source customizeTableCell:(id)cell;
-(id)graphObjectTableDataSource:(id)source pictureUrlOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source titleSuffixOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source titleOfItem:(id)item;
-(BOOL)graphObjectTableDataSource:(id)source filterIncludesItem:(id)item;
-(void)graphObjectTableSelectionDidChange:(id)graphObjectTableSelection;
-(void)logAppEvents:(BOOL)events;
-(void)centerAndStartSpinner;
-(void)loadDataSkippingRoundTripIfCached:(id)cached;
-(id)requestForLoadData;
-(void)clearData;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)removeSessionObserver:(id)observer;
-(void)addSessionObserver:(id)observer;
-(void)clearSelection;
-(void)updateView;
-(void)loadData;
-(void)configureUsingCachedDescriptor:(id)descriptor;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(void)initialize;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

@interface FBFriendPickerViewDefaultPNG : NSObject {
}
+(id)image;
@end

@interface FBGraphObject : NSMutableDictionary <FBGraphObject> {
	NSMutableDictionary* _jsonObject;
}
@property(assign, nonatomic) BOOL provisionedForPost;
+(BOOL)isProtocolImplementationInferable:(id)inferable checkFBGraphObjectAdoption:(BOOL)adoption;
+(int)inferredImplTypeForSelector:(SEL)selector;
+(id)graphObjectWrappingObject:(id)object;
+(BOOL)isGraphObjectID:(id)anId sameAs:(id)as;
+(id)openGraphObjectForPostWithType:(id)type title:(id)title image:(id)image url:(id)url description:(id)description;
+(id)openGraphObjectForPost;
+(id)openGraphActionForPost;
+(id)graphObjectWrappingDictionary:(id)dictionary;
+(id)graphObject;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)keyEnumerator;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)graphObjectifyAll;
-(id)graphObjectifyAtKey:(id)key;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)respondsToSelector:(SEL)selector;
-(void)dealloc;
-(id)initWrappingDictionary:(id)dictionary;
@end

@interface FBGraphObjectArray : NSMutableArray {
	NSMutableArray* _jsonArray;
}
-(void)replaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(void)removeLastObject;
-(void)addObject:(id)object;
-(void)removeObjectAtIndex:(unsigned)index;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(id)reverseObjectEnumerator;
-(id)objectEnumerator;
-(id)objectAtIndex:(unsigned)index;
-(void)graphObjectifyAll;
-(id)graphObjectifyAtIndex:(unsigned)index;
-(unsigned)count;
-(void)dealloc;
-(id)initWrappingArray:(id)array;
@end

@interface FBGraphObjectPagingLoader : NSObject <FBGraphObjectDataSourceDataNeededDelegate> {
	BOOL _isResultFromCache;
	BOOL _skipRoundtripIfCached;
	UITableView* _tableView;
	FBGraphObjectTableDataSource* _dataSource;
	int _pagingMode;
	NSString* _nextLink;
	FBSession* _session;
	FBRequestConnection* _connection;
	id<FBGraphObjectPagingLoaderDelegate> _delegate;
	NSString* _cacheIdentity;
}
@property(assign, nonatomic) BOOL skipRoundtripIfCached;
@property(copy, nonatomic) NSString* cacheIdentity;
@property(retain, nonatomic) FBRequestConnection* connection;
@property(retain, nonatomic) NSString* nextLink;
@property(readonly, assign, nonatomic) BOOL isResultFromCache;
@property(assign, nonatomic) int pagingMode;
@property(assign, nonatomic) id<FBGraphObjectPagingLoaderDelegate> delegate;
@property(retain, nonatomic) FBSession* session;
@property(retain, nonatomic) FBGraphObjectTableDataSource* dataSource;
@property(retain, nonatomic) UITableView* tableView;
-(void)graphObjectTableDataSourceNeedsData:(id)data triggeredByIndexPath:(id)path;
-(void)requestCompleted:(id)completed result:(id)result error:(id)error;
-(void)reset;
-(void)cancel;
-(void)startLoadingWithRequest:(id)request cacheIdentity:(id)identity skipRoundtripIfCached:(BOOL)cached;
-(void)followNextLink;
-(void)addResultsAndUpdateView:(id)view;
-(void)updateView;
-(void)dealloc;
-(id)initWithDataSource:(id)dataSource pagingMode:(int)mode;
@end

@interface FBGraphObjectTableCell : UITableViewCell {
	BOOL _boldTitle;
	BOOL _boldTitleSuffix;
	UIImageView* _pictureView;
	UILabel* _titleSuffixLabel;
	UIActivityIndicatorView* _activityIndicator;
}
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UILabel* titleSuffixLabel;
@property(retain, nonatomic) UIImageView* pictureView;
@property(retain, nonatomic) UIImage* picture;
@property(copy, nonatomic) NSString* subtitle;
@property(assign, nonatomic) BOOL boldTitleSuffix;
@property(assign, nonatomic) BOOL boldTitle;
@property(copy, nonatomic) NSString* titleSuffix;
@property(copy, nonatomic) NSString* title;
+(float)rowHeight;
-(void)createTitleSuffixLabel;
-(void)updateFonts;
-(void)stopAnimatingActivityIndicator;
-(void)startAnimatingActivityIndicator;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface FBGraphObjectTableDataSource : NSObject <UITableViewDataSource> {
	BOOL _useCollation;
	BOOL _showSections;
	BOOL _itemTitleSuffixEnabled;
	BOOL _itemPicturesEnabled;
	BOOL _itemSubtitleEnabled;
	BOOL _expectingMoreGraphObjects;
	NSArray* _data;
	UIImage* _defaultPicture;
	id<FBGraphObjectViewControllerDelegate> _controllerDelegate;
	NSString* _groupByField;
	NSArray* _indexKeys;
	NSDictionary* _indexMap;
	NSMutableSet* _pendingURLConnections;
	id<FBGraphObjectSelectionQueryDelegate> _selectionDelegate;
	NSArray* _sortDescriptors;
	id<FBGraphObjectDataSourceDataNeededDelegate> _dataNeededDelegate;
	UILocalizedIndexedCollation* _collation;
}
@property(assign, nonatomic) BOOL showSections;
@property(retain, nonatomic) UILocalizedIndexedCollation* collation;
@property(assign, nonatomic) BOOL expectingMoreGraphObjects;
@property(retain, nonatomic) NSMutableSet* pendingURLConnections;
@property(retain, nonatomic) NSDictionary* indexMap;
@property(retain, nonatomic) NSArray* indexKeys;
@property(retain, nonatomic) NSArray* data;
@property(copy, nonatomic) NSArray* sortDescriptors;
@property(assign, nonatomic) id<FBGraphObjectDataSourceDataNeededDelegate> dataNeededDelegate;
@property(assign, nonatomic) id<FBGraphObjectSelectionQueryDelegate> selectionDelegate;
@property(assign, nonatomic) BOOL itemSubtitleEnabled;
@property(assign, nonatomic) BOOL itemPicturesEnabled;
@property(assign, nonatomic) BOOL itemTitleSuffixEnabled;
@property(assign, nonatomic) BOOL useCollation;
@property(copy, nonatomic) NSString* groupByField;
@property(assign, nonatomic) id<FBGraphObjectViewControllerDelegate> controllerDelegate;
@property(retain, nonatomic) UIImage* defaultPicture;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)addOrRemovePendingConnection:(id)connection;
-(id)tableView:(id)view imageForItem:(id)item;
-(id)sectionItemsForSection:(int)section;
-(id)titleForSection:(int)section;
-(BOOL)isActivityIndicatorIndexPath:(id)path;
-(BOOL)isLastSection:(int)section;
-(id)indexPathForItem:(id)item;
-(id)itemAtIndexPath:(id)indexPath;
-(id)indexKeyOfItem:(id)item;
-(id)cellWithTableView:(id)tableView;
-(void)setSortingBySingleField:(id)field ascending:(BOOL)ascending;
-(void)setSortingByFields:(id)fields ascending:(BOOL)ascending;
-(BOOL)filterIncludesItem:(id)item;
-(void)update;
-(void)cancelPendingRequests;
-(void)bindTableView:(id)view;
-(BOOL)hasGraphObjects;
-(void)appendGraphObjects:(id)objects;
-(void)clearGraphObjects;
-(void)prepareForNewRequest;
-(id)fieldsForRequestIncluding:(id)requestIncluding;
-(void)dealloc;
-(id)init;
@end

@interface FBGraphObjectTableSelection : NSObject <FBGraphObjectSelectionQueryDelegate, UITableViewDelegate> {
	BOOL _allowMultipleSelection;
	FBGraphObjectTableDataSource* _dataSource;
	NSObject<FBGraphObjectSelectionChangedDelegate>* _delegate;
	NSArray* _selection;
}
@property(retain, nonatomic) FBGraphObjectTableDataSource* dataSource;
@property(assign, nonatomic) BOOL allowsMultipleSelection;
@property(retain, nonatomic) NSArray* selection;
@property(assign, nonatomic) NSObject<FBGraphObjectSelectionChangedDelegate>* delegate;
-(id)description;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)graphObjectTableDataSource:(id)source selectionIncludesItem:(id)item;
-(BOOL)selectionIncludesItem:(id)item;
-(void)selectionChanged;
-(void)deselectItems:(id)items tableView:(id)view;
-(void)deselectItem:(id)item cell:(id)cell raiseSelectionChanged:(BOOL)changed;
-(void)selectItem:(id)item cell:(id)cell;
-(void)clearSelectionInTableView:(id)tableView;
-(void)dealloc;
-(id)initWithDataSource:(id)dataSource;
@end

@interface FBImageResourceLoader : NSObject {
}
+(id)imageNamed:(id)named fromBytes:(const char*)bytes length:(unsigned)length fromRetinaBytes:(const char*)retinaBytes retinaLength:(unsigned)length5;
+(id)imageFromBytes:(const char*)bytes length:(unsigned)length fromRetinaBytes:(const char*)retinaBytes retinaLength:(unsigned)length4;
+(id)loadImageFromBytes:(const char*)bytes length:(unsigned)length scale:(float)scale;
@end

@interface FBInsights : NSObject {
}
+(void)flush;
+(void)setFlushBehavior:(int)behavior;
+(int)flushBehavior;
+(void)logConversionPixel:(id)pixel valueOfPixel:(double)pixel2 session:(id)session;
+(void)logConversionPixel:(id)pixel valueOfPixel:(double)pixel2;
+(void)logPurchase:(double)purchase currency:(id)currency parameters:(id)parameters session:(id)session;
+(void)logPurchase:(double)purchase currency:(id)currency parameters:(id)parameters;
+(void)logPurchase:(double)purchase currency:(id)currency;
+(void)setAppVersion:(id)version;
+(id)appVersion;
@end

@interface FBLogger : NSObject {
	BOOL _isActive;
	NSMutableString* _internalContents;
	NSString* _loggingBehavior;
	unsigned _loggerSerialNumber;
}
@property(readonly, retain, nonatomic) NSMutableString* internalContents;
@property(readonly, assign, nonatomic) BOOL isActive;
@property(readonly, copy, nonatomic) NSString* loggingBehavior;
@property(readonly, assign, nonatomic) unsigned loggerSerialNumber;
@property(copy, nonatomic) NSString* contents;
+(void)registerStringToReplace:(id)replace replaceWith:(id)with;
+(void)registerCurrentTime:(id)time withTag:(id)tag;
+(void)singleShotLogEntry:(id)entry timestampTag:(id)tag formatString:(id)string;
+(void)singleShotLogEntry:(id)entry formatString:(id)string;
+(void)singleShotLogEntry:(id)entry logEntry:(id)entry2;
+(unsigned)newSerialNumber;
-(void)emitToNSLog;
-(void)appendKey:(id)key value:(id)value;
-(void)appendFormat:(id)format;
-(void)appendString:(id)string;
-(void)dealloc;
-(id)initWithLoggingBehavior:(id)loggingBehavior;
@end

@interface FBLoginDialog : FBDialog {
	id<FBLoginDialogDelegate> _loginDelegate;
}
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)dialogDidCancel:(id)dialog;
-(void)dialogDidSucceed:(id)dialog;
-(id)initWithURL:(id)url loginParams:(id)params delegate:(id)delegate;
@end

@interface FBLoginDialogParams : FBDialogsParams {
	BOOL _isRefreshOnly;
	NSArray* _permissions;
	int _writePrivacy;
	FBSession* _session;
}
@property(retain, nonatomic) FBSession* session;
@property(assign) BOOL isRefreshOnly;
@property(assign, nonatomic) int writePrivacy;
@property(copy, nonatomic) NSArray* permissions;
-(id)appBridgeVersion;
-(id)dictionaryMethodArgs;
-(void)dealloc;
@end

@interface FBLoginView : UIView <UIActionSheetDelegate> {
	NSArray* _permissions;
	NSArray* _readPermissions;
	NSArray* _publishPermissions;
	int _defaultAudience;
	id<FBLoginViewDelegate> _delegate;
	UILabel* _label;
	UIButton* _button;
	FBSession* _session;
	FBRequestConnection* _request;
	id<FBGraphUser> _user;
	id _sessionStateHandler;
	id _requestHandler;
	NSNumber* _lastObservedStateWasOpen;
}
@property(copy) NSNumber* lastObservedStateWasOpen;
@property(copy, nonatomic) id requestHandler;
@property(copy, nonatomic) id sessionStateHandler;
@property(retain, nonatomic) id<FBGraphUser> user;
@property(retain, nonatomic) FBRequestConnection* request;
@property(retain, nonatomic) FBSession* session;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UILabel* label;
@property(assign, nonatomic) id<FBLoginViewDelegate> delegate;
@property(assign, nonatomic) int defaultAudience;
@property(copy, nonatomic) NSArray* publishPermissions;
@property(copy, nonatomic) NSArray* readPermissions;
@property(copy) NSArray* permissions;
-(void)buttonPressed:(id)pressed;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)handleActiveSessionUnsetNotifications:(id)notifications;
-(void)handleActiveSessionSetNotifications:(id)notifications;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)unwireViewForSession;
-(void)wireViewForSession:(id)session userInfo:(id)info;
-(void)wireViewForSessionWithoutOpening:(id)sessionWithoutOpening;
-(void)informDelegateOfError:(id)error;
-(void)informDelegate:(BOOL)delegate;
-(void)fetchMeInfo;
-(void)configureViewForStateLoggedIn:(BOOL)anIn;
-(id)logOutText;
-(id)logInText;
-(CGSize)sizeThatFits:(CGSize)fits;
-(CGSize)intrinsicContentSize;
-(void)initialize;
-(void)initializeBlocks;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithPublishPermissions:(id)publishPermissions defaultAudience:(int)audience;
-(id)initWithReadPermissions:(id)readPermissions;
-(id)initWithPermissions:(id)permissions;
-(id)init;
@end

@interface FBShadowLabel : UILabel {
}
-(void)drawTextInRect:(CGRect)rect;
@end

@interface FBLoginViewButtonPNG : NSObject {
}
+(id)image;
@end

@interface FBLoginViewButtonPressedPNG : NSObject {
}
+(id)image;
@end

@interface FBNativeDialogs : NSObject {
}
+(BOOL)canPresentShareDialogWithSession:(id)session;
+(BOOL)presentShareDialogModallyFrom:(id)from session:(id)session initialText:(id)text images:(id)images urls:(id)urls handler:(id)handler;
+(BOOL)presentShareDialogModallyFrom:(id)from initialText:(id)text images:(id)images urls:(id)urls handler:(id)handler;
+(BOOL)presentShareDialogModallyFrom:(id)from initialText:(id)text image:(id)image url:(id)url handler:(id)handler;
+(id)handlerFromHandler:(id)handler;
@end

@interface FBOpenGraphActionShareDialogParams : FBDialogsParams {
	id<FBOpenGraphAction> _action;
	NSString* _previewPropertyName;
	NSString* _actionType;
}
@property(copy, nonatomic) NSString* actionType;
@property(copy, nonatomic) NSString* previewPropertyName;
@property(retain, nonatomic) id<FBOpenGraphAction> action;
+(id)getIdOrUrlFromObject:(id)object;
+(id)getPostedObjectTypeFromObject:(id)object;
-(BOOL)containsUIImages:(id)images;
-(id)appBridgeVersion;
-(id)dictionaryMethodArgs;
-(id)flattenGraphObjects:(id)objects;
-(id)flattenObject:(id)object;
-(id)validate;
-(void)dealloc;
@end

@interface FBPlacePickerCacheDescriptor : FBCacheDescriptor <FBGraphObjectPagingLoaderDelegate> {
	BOOL _hasCompletedFetch;
	int _radiusInMeters;
	int _resultsLimit;
	NSString* _searchText;
	NSSet* _fieldsForRequest;
	FBGraphObjectPagingLoader* _loader;
	XXStruct_zYrK5D _locationCoordinate;
}
@property(assign, nonatomic) BOOL hasCompletedFetch;
@property(retain, nonatomic) FBGraphObjectPagingLoader* loader;
@property(copy, nonatomic) NSSet* fieldsForRequest;
@property(copy, nonatomic) NSString* searchText;
@property(assign, nonatomic) int resultsLimit;
@property(assign, nonatomic) int radiusInMeters;
@property(assign, nonatomic) XXStruct_zYrK5D locationCoordinate;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)prefetchAndCacheForSession:(id)session;
-(void)dealloc;
-(id)initWithLocationCoordinate:(XXStruct_zYrK5D)locationCoordinate radiusInMeters:(int)meters searchText:(id)text resultsLimit:(int)limit fieldsForRequest:(id)request;
@end

@interface FBPlacePickerViewController : FBViewController <FBGraphObjectSelectionChangedDelegate, FBGraphObjectViewControllerDelegate, FBGraphObjectPagingLoaderDelegate> {
	BOOL _hasSearchTextChangedSinceLastQuery;
	BOOL _trackActiveSession;
	FBGraphObjectTableDataSource* _dataSource;
	id<FBViewControllerDelegate> _delegate;
	NSSet* _fieldsForRequest;
	FBGraphObjectPagingLoader* _loader;
	int _radiusInMeters;
	int _resultsLimit;
	NSString* _searchText;
	NSTimer* _searchTextChangedTimer;
	FBGraphObjectTableSelection* _selectionManager;
	UIActivityIndicatorView* _spinner;
	UITableView* _tableView;
	FBSession* _session;
	XXStruct_zYrK5D _locationCoordinate;
}
@property(assign, nonatomic) BOOL trackActiveSession;
@property(retain, nonatomic) NSTimer* searchTextChangedTimer;
@property(retain, nonatomic) FBGraphObjectPagingLoader* loader;
@property(retain, nonatomic) FBGraphObjectTableSelection* selectionManager;
@property(retain, nonatomic) FBGraphObjectTableDataSource* dataSource;
@property(readonly, retain, nonatomic) id<FBGraphPlace> selection;
@property(retain, nonatomic) FBSession* session;
@property(copy, nonatomic) NSString* searchText;
@property(assign, nonatomic) int resultsLimit;
@property(assign, nonatomic) int radiusInMeters;
@property(assign, nonatomic) XXStruct_zYrK5D locationCoordinate;
@property(assign, nonatomic) BOOL itemPicturesEnabled;
@property(copy, nonatomic) NSSet* fieldsForRequest;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) UIActivityIndicatorView* spinner;
+(id)requestForPlacesSearchAtCoordinate:(XXStruct_zYrK5D)coordinate radiusInMeters:(int)meters resultsLimit:(int)limit searchText:(id)text fields:(id)fields datasource:(id)datasource session:(id)session;
+(id)cacheDescriptorWithLocationCoordinate:(XXStruct_zYrK5D)locationCoordinate radiusInMeters:(int)meters searchText:(id)text resultsLimit:(int)limit fieldsForRequest:(id)request;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)pagingLoaderWasCancelled:(id)cancelled;
-(void)pagingLoader:(id)loader handleError:(id)error;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)pagingLoader:(id)loader didLoadData:(id)data;
-(void)pagingLoader:(id)loader willLoadURL:(id)url;
-(id)graphObjectTableDataSource:(id)source pictureUrlOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source subtitleOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source titleOfItem:(id)item;
-(BOOL)graphObjectTableDataSource:(id)source filterIncludesItem:(id)item;
-(void)graphObjectTableSelectionDidChange:(id)graphObjectTableSelection;
-(void)logAppEvents:(BOOL)events;
-(void)clearData;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)removeSessionObserver:(id)observer;
-(void)addSessionObserver:(id)observer;
-(void)centerAndStartSpinner;
-(void)searchTextChangedTimerFired:(id)fired;
-(id)createSearchTextChangedTimer;
-(void)updateView;
-(void)loadDataPostThrottleSkippingRoundTripIfCached:(id)cached;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)clearSelection;
-(void)configureUsingCachedDescriptor:(id)descriptor;
-(void)loadData;
-(void)dealloc;
-(void)initialize;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

@interface FBPlacePickerViewGenericPlacePNG : NSObject {
}
+(id)image;
@end

@interface FBProfilePictureView : UIView {
	NSString* _profileID;
	int _pictureCropping;
	FBURLConnection* _connection;
	UIImageView* _imageView;
	NSString* _previousImageQueryParamString;
}
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) FBURLConnection* connection;
@property(retain, nonatomic) NSString* previousImageQueryParamString;
@property(readonly, assign, nonatomic) NSString* imageQueryParamString;
@property(assign, nonatomic) int pictureCropping;
@property(copy, nonatomic) NSString* profileID;
-(CGSize)intrinsicContentSize;
-(void)layoutSubviews;
-(void)ensureImageViewContentMode;
-(void)refreshImage:(BOOL)image;
-(void)initialize;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithProfileID:(id)profileID pictureCropping:(int)cropping;
-(id)init;
-(void)dealloc;
@end

@interface FBProfilePictureViewBlankProfilePortraitPNG : NSObject {
}
+(id)image;
@end

@interface FBProfilePictureViewBlankProfileSquarePNG : NSObject {
}
+(id)image;
@end

@interface FBRequest : NSObject {
	id<FBRequestDelegate> _delegate;
	NSString* _url;
	NSURLConnection* _connection;
	NSMutableData* _responseText;
	unsigned _state;
	NSError* _error;
	BOOL _sessionDidExpire;
	id<FBGraphObject> _graphObject;
	BOOL _canCloseSessionOnError;
	NSMutableDictionary* _parameters;
	FBSession* _session;
	NSString* _graphPath;
	NSString* _restMethod;
	NSString* _HTTPMethod;
}
@property(assign, nonatomic) BOOL canCloseSessionOnError;
@property(retain, nonatomic) id<FBGraphObject> graphObject;
@property(copy, nonatomic) NSString* HTTPMethod;
@property(copy, nonatomic) NSString* restMethod;
@property(copy, nonatomic) NSString* graphPath;
@property(retain, nonatomic) FBSession* session;
@property(readonly, retain, nonatomic) NSMutableDictionary* parameters;
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) BOOL sessionDidExpire;
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) NSMutableData* responseText;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSMutableDictionary* params;
@property(copy, nonatomic) NSString* httpMethod;
@property(copy, nonatomic) NSString* url;
@property(assign, nonatomic) id<FBRequestDelegate> delegate;
+(id)requestForUpdateOpenGraphObjectWithId:(id)anId graphObject:(id)object;
+(id)requestForUploadStagingResourceWithImage:(id)image;
+(id)requestForUpdateOpenGraphObjectWithId:(id)anId title:(id)title image:(id)image url:(id)url description:(id)description objectProperties:(id)properties;
+(id)requestForUpdateOpenGraphObject:(id)updateOpenGraphObject;
+(id)requestForPostOpenGraphObjectWithType:(id)type title:(id)title image:(id)image url:(id)url description:(id)description objectProperties:(id)properties;
+(id)requestForPostOpenGraphObject:(id)postOpenGraphObject;
+(id)requestForCustomAudienceThirdPartyID:(id)customAudienceThirdPartyID;
+(id)requestForPlacesSearchAtCoordinate:(XXStruct_zYrK5D)coordinate radiusInMeters:(int)meters resultsLimit:(int)limit searchText:(id)text;
+(id)requestWithGraphPath:(id)graphPath parameters:(id)parameters HTTPMethod:(id)method;
+(id)requestForPostStatusUpdate:(id)postStatusUpdate place:(id)place tags:(id)tags;
+(id)requestForPostStatusUpdate:(id)postStatusUpdate;
+(id)requestForPostWithGraphPath:(id)graphPath graphObject:(id)object;
+(id)requestForDeleteObject:(id)deleteObject;
+(id)requestForGraphPath:(id)graphPath;
+(id)requestForUploadPhoto:(id)uploadPhoto;
+(id)requestForMyFriends;
+(id)requestForMe;
+(id)serializeURL:(id)url params:(id)params httpMethod:(id)method;
+(id)serializeURL:(id)url params:(id)params;
-(id)createRequestConnection;
-(id)startWithCompletionHandler:(id)completionHandler;
-(void)dealloc;
-(id)initWithSession:(id)session graphPath:(id)path parameters:(id)parameters HTTPMethod:(id)method;
-(id)initWithSession:(id)session restMethod:(id)method parameters:(id)parameters HTTPMethod:(id)method4;
-(id)initForPostWithSession:(id)session graphPath:(id)path graphObject:(id)object;
-(id)initWithSession:(id)session graphPath:(id)path;
-(id)init;
-(id)description;
-(BOOL)loading;
@end

@interface FBRequestBody : NSObject {
	NSMutableData* _mutableData;
}
@property(readonly, retain, nonatomic) NSMutableData* mutableData;
@property(readonly, retain, nonatomic) NSData* data;
+(id)mimeContentType;
-(void)appendWithKey:(id)key dataValue:(id)value logger:(id)logger;
-(void)appendWithKey:(id)key imageValue:(id)value logger:(id)logger;
-(void)appendWithKey:(id)key formValue:(id)value logger:(id)logger;
-(void)appendRecordBoundary;
-(void)appendUTF8:(id)a8;
-(void)dealloc;
-(id)init;
@end

@interface FBRequestConnection : NSObject {
	BOOL _errorBehavior;
	BOOL _isResultFromCache;
	NSHTTPURLResponse* _urlResponse;
	FBURLConnection* _connection;
	NSMutableArray* _requests;
	int _state;
	NSMutableURLRequest* _internalUrlRequest;
	FBRequest* _deprecatedRequest;
	FBLogger* _logger;
	unsigned long _requestStartTime;
	FBRequestConnectionRetryManager* _retryManager;
	double _timeout;
}
@property(retain, nonatomic) FBRequestConnectionRetryManager* retryManager;
@property(readonly, assign, nonatomic) BOOL isResultFromCache;
@property(assign, nonatomic) unsigned long requestStartTime;
@property(retain, nonatomic) FBLogger* logger;
@property(retain, nonatomic) FBRequest* deprecatedRequest;
@property(retain, nonatomic) NSMutableURLRequest* internalUrlRequest;
@property(assign, nonatomic) double timeout;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSMutableArray* requests;
@property(retain, nonatomic) FBURLConnection* connection;
@property(assign, nonatomic) int errorBehavior;
@property(retain, nonatomic) NSHTTPURLResponse* urlResponse;
@property(retain, nonatomic) NSMutableURLRequest* urlRequest;
+(void)addRequestToRefreshPermissionsSession:(id)refreshPermissionsSession connection:(id)connection;
+(void)addRequestToExtendTokenForSession:(id)session connection:(id)connection;
+(id)userAgent;
+(void)processGraphObject:(id)object forPath:(id)path withAction:(id)action;
+(void)processGraphObjectPropertyKey:(id)key value:(id)value action:(id)action passByValue:(BOOL)value4;
+(id)startForUploadStagingResourceWithImage:(id)image completionHandler:(id)handler;
+(id)startForUpdateOpenGraphObjectWithId:(id)anId title:(id)title image:(id)image url:(id)url description:(id)description objectProperties:(id)properties completionHandler:(id)handler;
+(id)startForUpdateOpenGraphObject:(id)updateOpenGraphObject completionHandler:(id)handler;
+(id)startForPostOpenGraphObjectWithType:(id)type title:(id)title image:(id)image url:(id)url description:(id)description objectProperties:(id)properties completionHandler:(id)handler;
+(id)startForPostOpenGraphObject:(id)postOpenGraphObject completionHandler:(id)handler;
+(id)startWithGraphPath:(id)graphPath parameters:(id)parameters HTTPMethod:(id)method completionHandler:(id)handler;
+(id)startForPostWithGraphPath:(id)graphPath graphObject:(id)object completionHandler:(id)handler;
+(id)startForDeleteObject:(id)deleteObject completionHandler:(id)handler;
+(id)startWithGraphPath:(id)graphPath completionHandler:(id)handler;
+(id)startForCustomAudienceThirdPartyID:(id)customAudienceThirdPartyID completionHandler:(id)handler;
+(id)startForPlacesSearchAtCoordinate:(XXStruct_zYrK5D)coordinate radiusInMeters:(int)meters resultsLimit:(int)limit searchText:(id)text completionHandler:(id)handler;
+(id)startForPostStatusUpdate:(id)postStatusUpdate place:(id)place tags:(id)tags completionHandler:(id)handler;
+(id)startForPostStatusUpdate:(id)postStatusUpdate completionHandler:(id)handler;
+(id)startForUploadPhoto:(id)uploadPhoto completionHandler:(id)handler;
+(id)startForMyFriendsWithCompletionHandler:(id)completionHandler;
+(id)startForMeWithCompletionHandler:(id)completionHandler;
-(id)description;
-(id)getRequestMetadata:(id)metadata;
-(void)addPiggybackRequests;
-(void)registerTokenToOmitFromLog:(id)log;
-(BOOL)isExpiredTokenError:(id)error resultIndex:(unsigned)index;
-(BOOL)isPasswordChangeError:(id)error resultIndex:(unsigned)index;
-(BOOL)isInvalidSessionError:(id)error resultIndex:(unsigned)index;
-(BOOL)isInsufficientPermissionError:(id)error resultIndex:(unsigned)index;
-(id)checkConnectionError:(id)error statusCode:(int)code parsedJSONResponse:(id)response;
-(id)errorWithCode:(int)code statusCode:(int)code2 parsedJSONResponse:(id)response innerError:(id)error message:(id)message;
-(id)errorFromResult:(id)result;
-(void)completeWithResults:(id)results orError:(id)error;
-(BOOL)shouldCloseRequestSession:(id)session;
-(id)unpackIndividualJSONResponseError:(id)error;
-(void)completeDeprecatedWithData:(id)data results:(id)results orError:(id)error;
-(id)parseJSONOrOtherwise:(id)otherwise error:(id*)error;
-(id)parseJSONResponse:(id)response error:(id*)error statusCode:(int)code;
-(void)completeWithResponse:(id)response data:(id)data orError:(id)error;
-(void)appendAttachments:(id)attachments toBody:(id)body addFormData:(BOOL)data logger:(id)logger;
-(BOOL)isAttachment:(id)attachment;
-(void)addRequest:(id)request toBatch:(id)batch attachments:(id)attachments;
-(void)appendJSONRequests:(id)requests toBody:(id)body andNameAttachments:(id)attachments logger:(id)logger;
-(id)getBatchAppID:(id)anId;
-(id)urlStringForSingleRequest:(id)singleRequest forBatch:(BOOL)batch;
-(void)logRequest:(id)request bodyLength:(unsigned)length bodyLogger:(id)logger attachmentLogger:(id)logger4;
-(id)requestWithBatch:(id)batch timeout:(double)timeout;
-(id)newFBURLConnection;
-(void)startURLConnectionWithRequest:(id)request skipRoundTripIfCached:(BOOL)cached completionHandler:(id)handler;
-(void)startWithCacheIdentity:(id)cacheIdentity skipRoundtripIfCached:(BOOL)cached;
-(void)cancel;
-(void)start;
-(void)addRequest:(id)request completionHandler:(id)handler batchParameters:(id)parameters behavior:(int)behavior;
-(void)addRequest:(id)request completionHandler:(id)handler batchParameters:(id)parameters;
-(void)addRequest:(id)request completionHandler:(id)handler batchEntryName:(id)name;
-(void)addRequest:(id)request completionHandler:(id)handler;
-(void)dealloc;
-(id)initWithMetadata:(id)metadata;
-(id)initWithTimeout:(double)timeout;
-(id)init;
@end

@interface FBRequestConnectionRetryManagerAlertViewHelper : NSObject <UIAlertViewDelegate> {
	id _callback;
}
@property(copy, nonatomic) id callback;
-(void)dealloc;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)show:(id)show message:(id)message cancelButtonTitle:(id)title handler:(id)handler;
@end

@interface FBRequestConnectionRetryManager : NSObject {
	FBRequestConnection* _requestConnection;
	int _state;
	FBSession* _sessionToReconnect;
	NSString* _alertMessage;
	NSMutableArray* _requestMetadatas;
	FBRequestConnectionRetryManagerAlertViewHelper* _alertViewHelper;
}
@property(retain, nonatomic) FBRequestConnectionRetryManagerAlertViewHelper* alertViewHelper;
@property(retain, nonatomic) NSMutableArray* requestMetadatas;
@property(copy, nonatomic) NSString* alertMessage;
@property(retain, nonatomic) FBSession* sessionToReconnect;
@property(assign, nonatomic) int state;
@property(assign, nonatomic) FBRequestConnection* requestConnection;
-(void)dealloc;
-(void)repairFailed;
-(void)repairSuccess;
-(void)performRetries;
-(void)addRequestMetadata:(id)metadata;
-(id)initWithFBRequestConnection:(id)fbrequestConnection;
@end

@interface FBRequestHandlerFactory : NSObject {
}
+(id)handlerThatReconnects:(id)reconnects forRequest:(id)request;
+(id)handlerThatAlertsUser:(id)user forRequest:(id)request;
+(id)handlerThatRetries:(id)retries forRequest:(id)request;
@end

@interface FBRequestMetadata : NSObject {
	FBRequest* _request;
	id _completionHandler;
	NSDictionary* _batchParameters;
	int _behavior;
	id _originalCompletionHandler;
	int _retryCount;
	id _originalResult;
	NSError* _originalError;
}
@property(retain, nonatomic) NSError* originalError;
@property(retain, nonatomic) id originalResult;
@property(assign, nonatomic) int retryCount;
@property(copy, nonatomic) id originalCompletionHandler;
@property(assign, nonatomic) int behavior;
@property(copy, nonatomic) NSDictionary* batchParameters;
@property(copy, nonatomic) id completionHandler;
@property(retain, nonatomic) FBRequest* request;
-(id)description;
-(void)invokeCompletionHandlerForConnection:(id)connection withResults:(id)results error:(id)error;
-(void)dealloc;
-(id)initWithRequest:(id)request completionHandler:(id)handler batchParameters:(id)parameters behavior:(int)behavior;
@end

@interface FBSession : NSObject <FBLoginDialogDelegate> {
	NSString* _urlSchemeSuffix;
	BOOL _isInStateTransition;
	int _loginTypeOfPendingOpenUrlCallback;
	int _defaultDefaultAudience;
	BOOL _isRepairing;
	int _state;
	NSString* _appID;
	FBAccessTokenData* _accessTokenData;
	NSArray* _initializedPermissions;
	int _lastRequestedSystemAudience;
	FBSessionTokenCachingStrategy* _tokenCachingStrategy;
	NSDate* _attemptedRefreshDate;
	NSDate* _attemptedPermissionsRefreshDate;
	id _loginHandler;
	id _reauthorizeHandler;
	FBLoginDialog* _loginDialog;
	NSThread* _affinitizedThread;
	FBSessionAppEventsState* _appEventsState;
	FBSessionAuthLogger* _authLogger;
}
@property(retain) FBSessionAuthLogger* authLogger;
@property(retain) FBSessionAppEventsState* appEventsState;
@property(retain) NSThread* affinitizedThread;
@property(retain) FBLoginDialog* loginDialog;
@property(readonly, assign) NSString* appBaseUrl;
@property(copy) id reauthorizeHandler;
@property(copy) id loginHandler;
@property(copy) NSDate* attemptedPermissionsRefreshDate;
@property(copy) NSDate* attemptedRefreshDate;
@property(retain) FBSessionTokenCachingStrategy* tokenCachingStrategy;
@property(assign) BOOL isRepairing;
@property(assign) int lastRequestedSystemAudience;
@property(copy) NSArray* initializedPermissions;
@property(copy) FBAccessTokenData* accessTokenData;
@property(readonly, assign) int loginType;
@property(readonly, copy) NSArray* permissions;
@property(readonly, copy) NSDate* expirationDate;
@property(readonly, copy) NSString* accessToken;
@property(copy) NSString* urlSchemeSuffix;
@property(copy) NSString* appID;
@property(assign) int state;
@property(readonly, assign) BOOL isOpen;
+(id)sdkSurfacedErrorForNativeLoginError:(id)nativeLoginError;
+(id)activeSessionIfOpen;
+(id)activeSessionIfExists;
+(BOOL)openActiveSessionWithPermissions:(id)permissions allowLoginUI:(BOOL)ui allowSystemAccount:(BOOL)account isRead:(BOOL)read defaultAudience:(int)audience completionHandler:(id)handler;
+(BOOL)automaticallyNotifiesObserversForKey:(id)key;
+(void)renewSystemCredentials:(id)credentials;
+(id)defaultUrlSchemeSuffix;
+(void)setDefaultUrlSchemeSuffix:(id)suffix;
+(id)defaultAppID;
+(void)setDefaultAppID:(id)anId;
+(id)setActiveSession:(id)session userInfo:(id)info;
+(id)setActiveSession:(id)session;
+(id)activeSession;
+(BOOL)openActiveSessionWithPublishPermissions:(id)publishPermissions defaultAudience:(int)audience allowLoginUI:(BOOL)ui completionHandler:(id)handler;
+(BOOL)openActiveSessionWithReadPermissions:(id)readPermissions allowLoginUI:(BOOL)ui completionHandler:(id)handler;
+(BOOL)openActiveSessionWithPermissions:(id)permissions allowLoginUI:(BOOL)ui defaultAudience:(int)audience completionHandler:(id)handler;
+(BOOL)openActiveSessionWithPermissions:(id)permissions allowLoginUI:(BOOL)ui completionHandler:(id)handler;
+(BOOL)openActiveSessionWithAllowLoginUI:(BOOL)allowLoginUI;
-(id)description;
-(void)closeAndClearTokenInformation:(id)information;
-(BOOL)openFromAccessTokenData:(id)accessTokenData completionHandler:(id)handler raiseExceptionIfInvalidState:(BOOL)state;
-(id)jsonClientStateWithDictionary:(id)dictionary;
-(id)errorLoginFailedWithReason:(id)reason errorCode:(id)code innerError:(id)error localizedDescription:(id)description;
-(id)errorLoginFailedWithReason:(id)reason errorCode:(id)code innerError:(id)error;
-(void)callReauthorizeHandlerAndClearState:(id)state;
-(void)transitionAndCallHandlerWithState:(int)state error:(id)error tokenData:(id)data shouldCache:(BOOL)cache;
-(void)fbDialogNotLogin:(BOOL)login;
-(void)fbDialogLogin:(id)login expirationDate:(id)date;
-(void)checkThreadAffinity;
-(void)clearAffinitizedThread;
-(void)refreshPermissions:(id)permissions;
-(BOOL)shouldRefreshPermissions;
-(BOOL)shouldExtendAccessToken;
-(void)refreshAccessToken:(id)token expirationDate:(id)date;
-(void)authorizeRequestWasImplicitlyCancelled;
-(void)completeReauthorizeWithAccessToken:(id)accessToken expirationDate:(id)date permissions:(id)permissions;
-(void)repairWithHandler:(id)handler;
-(void)reauthorizeWithPermissions:(id)permissions isRead:(BOOL)read behavior:(int)behavior defaultAudience:(int)audience completionHandler:(id)handler;
-(void)validateReauthorizedAccessToken:(id)token expirationDate:(id)date;
-(BOOL)handleReauthorize:(id)reauthorize accessToken:(id)token;
-(BOOL)handleAuthorizationOpen:(id)open accessToken:(id)token loginType:(int)type;
-(void)authorizeUsingLoginDialog:(id)dialog;
-(BOOL)tryOpenURL:(id)url;
-(BOOL)authorizeUsingSafari:(id)safari;
-(BOOL)authorizeUsingFacebookApplication:(id)application;
-(BOOL)isURLSchemeRegistered;
-(void)handleDidCompleteNativeLoginForAppCall:(id)handle;
-(id)authorizeUsingFacebookNativeLoginWithPermissions:(id)permissions defaultAudience:(int)audience clientState:(id)state;
-(id)getSystemAccountStoreAdapter;
-(void)authorizeUsingSystemAccountStore:(id)store defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize;
-(void)logIntegratedAuthAppEvent:(id)event permissions:(id)permissions;
-(void)setLoginTypeOfPendingOpenUrlCallback:(int)pendingOpenUrlCallback;
-(void)retryableAuthorizeWithPermissions:(id)permissions defaultAudience:(int)audience integratedAuth:(BOOL)auth FBAppAuth:(BOOL)auth4 safariAuth:(BOOL)auth5 fallback:(BOOL)fallback isReauthorize:(BOOL)reauthorize canFetchAppSettings:(BOOL)settings;
-(void)authorizeWithPermissions:(id)permissions defaultAudience:(int)audience integratedAuth:(BOOL)auth FBAppAuth:(BOOL)auth4 safariAuth:(BOOL)auth5 fallback:(BOOL)fallback isReauthorize:(BOOL)reauthorize canFetchAppSettings:(BOOL)settings;
-(void)authorizeWithPermissions:(id)permissions behavior:(int)behavior defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize;
-(BOOL)transitionToState:(int)state withAccessTokenData:(id)accessTokenData shouldCache:(BOOL)cache;
-(void)setStateChangeHandler:(id)handler;
-(void)handleDidBecomeActive;
-(BOOL)openFromAccessTokenData:(id)accessTokenData completionHandler:(id)handler;
-(BOOL)handleOpenURL:(id)url;
-(BOOL)handleAuthorizationCallbacks:(id)callbacks params:(id)params loginType:(int)type;
-(void)closeAndClearTokenInformation;
-(void)close;
-(void)requestNewPublishPermissions:(id)permissions defaultAudience:(int)audience completionHandler:(id)handler;
-(void)requestNewReadPermissions:(id)permissions completionHandler:(id)handler;
-(void)reauthorizeWithPublishPermissions:(id)publishPermissions defaultAudience:(int)audience completionHandler:(id)handler;
-(void)reauthorizeWithReadPermissions:(id)readPermissions completionHandler:(id)handler;
-(void)reauthorizeWithPermissions:(id)permissions behavior:(int)behavior completionHandler:(id)handler;
-(void)openWithBehavior:(int)behavior completionHandler:(id)handler;
-(void)openWithCompletionHandler:(id)completionHandler;
-(id)refreshDate;
-(void)dealloc;
-(BOOL)initializeFromCachedToken:(id)cachedToken withPermissions:(id)permissions;
-(id)initWithAppID:(id)appID permissions:(id)permissions defaultAudience:(int)audience urlSchemeSuffix:(id)suffix tokenCacheStrategy:(id)strategy;
-(id)initWithAppID:(id)appID permissions:(id)permissions urlSchemeSuffix:(id)suffix tokenCacheStrategy:(id)strategy;
-(id)initWithPermissions:(id)permissions;
-(id)init;
@end

@interface FBSessionAppEventsState : NSObject {
	BOOL requestInFlight;
	NSMutableArray* _accumulatedEvents;
	NSMutableArray* _inFlightEvents;
	int numSkippedEventsDueToFullBuffer;
}
@property(assign) BOOL requestInFlight;
@property(assign) int numSkippedEventsDueToFullBuffer;
@property(retain) NSMutableArray* inFlightEvents;
@property(retain) NSMutableArray* accumulatedEvents;
-(id)jsonEncodeInFlightEvents:(BOOL)flightEvents;
-(void)clearInFlightAndStats;
-(unsigned)getAccumulatedEventCount;
-(void)addEvent:(id)event isImplicit:(BOOL)implicit;
-(void)dealloc;
-(id)init;
@end

@interface FBSessionAppSwitchingLoginStategy : NSObject <FBSessionLoginStrategy> {
	NSString* _methodName;
}
@property(copy) NSString* methodName;
-(BOOL)tryPerformAuthorizeWithParams:(id)params session:(id)session logger:(id)logger;
-(void)dealloc;
-(id)init;
@end

@interface FBSessionAuthLogger : NSObject {
	NSString* _ID;
	NSMutableDictionary* _extras;
	FBSession* _session;
	NSString* _authMethod;
}
@property(copy, nonatomic) NSString* authMethod;
@property(assign, nonatomic) FBSession* session;
@property(retain, nonatomic) NSMutableDictionary* extras;
@property(copy, nonatomic) NSString* ID;
-(id)newEventParameters;
-(void)logEndAuthWithResult:(id)result error:(id)error;
-(void)logEndAuthMethodWithResult:(id)result error:(id)error;
-(void)logStartAuthMethod:(id)method;
-(void)logStartAuth;
-(void)logEvent:(id)event result:(id)result error:(id)error;
-(void)logEvent:(id)event params:(id)params;
-(void)addExtrasForNextEvent:(id)nextEvent;
-(void)dealloc;
-(id)initWithSession:(id)session ID:(id)anId authMethod:(id)method;
-(id)initWithSession:(id)session;
@end

@interface FBSessionFacebookAppNativeLoginStategy : NSObject <FBSessionLoginStrategy> {
}
@property(readonly, assign) NSString* methodName;
-(BOOL)tryPerformAuthorizeWithParams:(id)params session:(id)session logger:(id)logger;
@end

@interface FBSessionFacebookAppWebLoginStategy : NSObject <FBSessionLoginStrategy> {
}
@property(readonly, assign) NSString* methodName;
-(BOOL)tryPerformAuthorizeWithParams:(id)params session:(id)session logger:(id)logger;
@end

@interface FBSessionInlineWebViewLoginStategy : NSObject <FBSessionLoginStrategy> {
}
@property(readonly, assign) NSString* methodName;
-(BOOL)tryPerformAuthorizeWithParams:(id)params session:(id)session logger:(id)logger;
@end

@interface FBSessionLoginStrategyParams : NSObject {
	BOOL _tryIntegratedAuth;
	BOOL _tryFBAppAuth;
	BOOL _trySafariAuth;
	BOOL _tryFallback;
	BOOL _isReauthorize;
	BOOL _canFetchAppSettings;
	int _defaultAudience;
	NSArray* _permissions;
	NSMutableDictionary* _webParams;
}
@property(retain, nonatomic) NSMutableDictionary* webParams;
@property(assign) BOOL canFetchAppSettings;
@property(retain, nonatomic) NSArray* permissions;
@property(assign) int defaultAudience;
@property(assign) BOOL isReauthorize;
@property(assign) BOOL tryFallback;
@property(assign) BOOL trySafariAuth;
@property(assign) BOOL tryFBAppAuth;
@property(assign) BOOL tryIntegratedAuth;
-(void)dealloc;
@end

@interface FBSessionManualTokenCachingStrategy : FBSessionTokenCachingStrategy {
	NSString* _accessToken;
	NSDate* _expirationDate;
}
@property(copy) NSDate* expirationDate;
@property(copy) NSString* accessToken;
-(void)clearToken;
-(id)fetchTokenInformation;
-(void)cacheTokenInformation:(id)information;
-(void)dealloc;
@end

@interface FBSessionSafariLoginStategy : NSObject <FBSessionLoginStrategy> {
}
@property(readonly, assign) NSString* methodName;
-(BOOL)tryPerformAuthorizeWithParams:(id)params session:(id)session logger:(id)logger;
@end

@interface FBSessionSystemLoginStategy : NSObject <FBSessionLoginStrategy> {
}
@property(readonly, assign) NSString* methodName;
-(BOOL)tryPerformAuthorizeWithParams:(id)params session:(id)session logger:(id)logger;
@end

@interface FBSessionTokenCachingStrategyNoOpInstance : FBSessionTokenCachingStrategy {
}
-(void)clearToken;
-(id)fetchTokenInformation;
-(void)cacheTokenInformation:(id)information;
@end

@interface FBSessionTokenCachingStrategy : NSObject {
	NSString* _accessTokenInformationKeyName;
}
+(id)nullCacheInstance;
+(id)defaultInstance;
+(BOOL)isValidTokenInformation:(id)information;
-(id)fetchFBAccessTokenData;
-(void)cacheFBAccessTokenData:(id)data;
-(void)clearToken;
-(id)fetchTokenInformation;
-(void)cacheTokenInformation:(id)information;
-(void)dealloc;
-(id)initWithUserDefaultTokenInformationKeyName:(id)userDefaultTokenInformationKeyName;
-(id)init;
@end

@interface FBSessionUtility : NSObject {
}
+(BOOL)logIfFoundUnexpectedPermissions:(id)permissions isRead:(BOOL)read;
+(void)validateRequestForPermissions:(id)permissions defaultAudience:(int)audience allowSystemAccount:(BOOL)account isRead:(BOOL)read;
+(BOOL)areRequiredPermissions:(id)permissions aSubsetOfPermissions:(id)permissions2;
+(id)expirationDateFromResponseParams:(id)responseParams;
+(void)addWebLoginStartTimeToParams:(id)params;
+(id)sessionStateDescription:(int)description;
+(id)clientStateFromQueryParams:(id)queryParams;
+(id)queryParamsFromLoginURL:(id)loginURL appID:(id)anId urlSchemeSuffix:(id)suffix;
+(BOOL)isOpenSessionResponseURL:(id)url;
@end

@interface FBSettings : NSObject {
}
+(void)publishInstall:(id)install withHandler:(id)handler isAutoPublish:(BOOL)publish;
+(void)publishInstall:(id)install withHandler:(id)handler;
+(void)publishInstall:(id)install;
+(void)setLimitEventAndDataUsage:(BOOL)usage;
+(BOOL)limitEventAndDataUsage;
+(BOOL)isBetaFeatureEnabled:(unsigned)enabled;
+(void)disableBetaFeature:(unsigned)feature;
+(void)enableBetaFeature:(unsigned)feature;
+(void)enableBetaFeatures:(unsigned)features;
+(void)autoPublishInstallImpl:(id)impl;
+(void)autoPublishInstall:(id)install;
+(void)setShouldAutoPublishInstall:(BOOL)autoPublishInstall;
+(BOOL)shouldAutoPublishInstall;
+(float)defaultJPEGCompressionQuality;
+(void)setdefaultJPEGCompressionQuality:(float)quality;
+(id)defaultURLSchemeWithAppID:(id)appID urlSchemeSuffix:(id)suffix;
+(id)defaultUrlSchemeSuffix;
+(void)setDefaultUrlSchemeSuffix:(id)suffix;
+(id)facebookDomainPart;
+(void)setFacebookDomainPart:(id)part;
+(id)resourceBundleName;
+(void)setResourceBundleName:(id)name;
+(id)defaultAppID;
+(void)setDefaultAppID:(id)anId;
+(id)defaultDisplayName;
+(void)setDefaultDisplayName:(id)name;
+(void)setClientToken:(id)token;
+(id)clientToken;
+(void)setAppVersion:(id)version;
+(id)appVersion;
+(void)setLoggingBehavior:(id)behavior;
+(id)loggingBehavior;
+(id)sdkVersion;
@end

@interface FBShareDialogParams : FBDialogsParams {
	BOOL _dataFailuresFatal;
	NSURL* _link;
	NSString* _name;
	NSString* _caption;
	NSString* _description;
	NSURL* _picture;
	NSArray* _friends;
	id _place;
	NSString* _ref;
}
@property(assign, nonatomic) BOOL dataFailuresFatal;
@property(copy, nonatomic) NSString* ref;
@property(copy, nonatomic) id place;
@property(copy, nonatomic) NSArray* friends;
@property(copy, nonatomic) NSURL* picture;
@property(copy, nonatomic) NSString* description;
@property(copy, nonatomic) NSString* caption;
@property(copy, nonatomic) NSString* name;
@property(copy, nonatomic) NSURL* link;
-(id)appBridgeVersion;
-(BOOL)isSupportedScheme:(id)scheme;
-(id)dictionaryMethodArgs;
-(void)dealloc;
@end

@interface FBSystemAccountStoreAdapter : NSObject {
	BOOL _forceBlockingRenew;
	ACAccountStore* _accountStore;
	ACAccountType* _accountTypeFB;
}
@property(readonly, retain, nonatomic) ACAccountType* accountTypeFB;
@property(readonly, retain, nonatomic) ACAccountStore* accountStore;
@property(readonly, assign) BOOL canRequestAccessWithoutUI;
@property(assign) BOOL forceBlockingRenew;
+(void)setSharedInstance:(id)instance;
+(id)sharedInstance;
-(id)renewSystemAuthorizationAsTask;
-(void)renewSystemAuthorization:(id)authorization;
-(void)requestAccessToFacebookAccountStore:(id)facebookAccountStore defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize appID:(id)anId session:(id)session handler:(id)handler;
-(void)requestAccessToFacebookAccountStore:(id)facebookAccountStore handler:(id)handler;
-(id)requestAccessToFacebookAccountStoreAsTask:(id)facebookAccountStoreAsTask;
-(void)dealloc;
-(id)init;
@end

@interface FBTask : NSObject {
	id _result;
	NSError* _error;
	NSException* _exception;
	BOOL _cancelled;
	BOOL _completed;
	NSObject* _lock;
	NSCondition* _condition;
	NSMutableArray* _callbacks;
}
@property(retain, nonatomic) NSMutableArray* callbacks;
@property(assign, nonatomic) BOOL completed;
@property(retain, nonatomic) NSCondition* condition;
@property(retain, nonatomic) NSObject* lock;
+(id)taskWithDelay:(unsigned long long)delay;
+(id)taskDependentOnTasks:(id)tasks;
+(id)cancelledTask;
+(id)taskWithException:(id)exception;
+(id)taskWithError:(id)error;
+(id)taskWithResult:(id)result;
-(id)waitForResult:(id*)result;
-(void)waitUntilFinished;
-(void)warnOperationOnMainThreadNoOp;
-(void)warnOperationOnMainThread;
-(id)completionTaskWithQueue:(dispatch_queue_s*)queue block:(id)block;
-(id)completionTaskWithBlock:(id)block;
-(id)dependentTaskWithBlock:(id)block queue:(dispatch_queue_s*)queue;
-(id)dependentTaskWithBlock:(id)block;
-(void)runContinuations;
-(void)setCompleted;
-(BOOL)isCompleted;
-(BOOL)trySetCancelled;
-(void)cancel;
-(BOOL)isCancelled;
-(BOOL)trySetException:(id)exception;
-(void)setException:(id)exception;
-(id)exception;
-(BOOL)trySetError:(id)error;
-(void)setError:(id)error;
-(id)error;
-(BOOL)trySetResult:(id)result;
-(void)setResult:(id)result;
-(id)result;
-(void)dealloc;
-(id)init;
@end

@interface FBTaskCompletionSource : NSObject {
	FBTask* _task;
}
@property(retain, nonatomic) FBTask* task;
+(id)taskCompletionSource;
-(BOOL)trySetCancelled;
-(BOOL)trySetException:(id)exception;
-(BOOL)trySetError:(id)error;
-(BOOL)trySetResult:(id)result;
-(void)cancel;
-(void)setException:(id)exception;
-(void)setError:(id)error;
-(void)setResult:(id)result;
-(void)dealloc;
-(id)init;
@end

@interface FBTestSession : FBSession {
	BOOL _forceAccessTokenRefresh;
	BOOL _disableReauthorize;
	NSString* _appAccessToken;
	NSString* _testUserID;
	NSString* _testAppID;
	NSString* _testAppSecret;
	int _mode;
	NSString* _machineUniqueUserKey;
	NSString* _sessionUniqueUserTag;
}
@property(assign) int mode;
@property(readonly, copy) NSString* sharedTestUserIdentifier;
@property(readonly, copy) NSString* permissionsString;
@property(copy) NSString* sessionUniqueUserTag;
@property(copy) NSString* machineUniqueUserTag;
@property(assign) BOOL disableReauthorize;
@property(copy) NSString* testAppSecret;
@property(copy) NSString* testAppID;
@property(copy) NSString* testUserID;
@property(copy) NSString* appAccessToken;
+(void)deleteUnitTestUser:(id)user accessToken:(id)token;
+(id)sessionForUnitTestingWithPermissions:(id)permissions mode:(int)mode sessionUniqueUserTag:(id)tag;
+(id)sessionWithPrivateUserWithPermissions:(id)permissions;
+(id)sessionWithSharedUserWithPermissions:(id)permissions;
+(id)sessionWithSharedUserWithPermissions:(id)permissions uniqueUserTag:(id)tag;
-(BOOL)shouldExtendAccessToken;
-(void)authorizeWithPermissions:(id)permissions behavior:(int)behavior defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize;
-(BOOL)transitionToState:(int)state withAccessTokenData:(id)accessTokenData shouldCache:(BOOL)cache;
-(BOOL)forceAccessTokenRefresh;
-(void)setForceAccessTokenRefresh:(BOOL)refresh;
-(void)findOrCreateSharedUser;
-(id)validNameStringFromInteger:(unsigned)integer;
-(void)retrieveTestUsersForApp;
-(void)populateTestUsers:(id)users testAccounts:(id)accounts;
-(void)raiseException:(id)exception;
-(void)transitionToOpenWithToken:(id)token;
-(void)createNewTestUser;
-(void)dealloc;
-(id)initWithAppID:(id)appID appSecret:(id)secret machineUniqueUserTag:(id)tag sessionUniqueUserTag:(id)tag4 mode:(int)mode permissions:(id)permissions tokenCachingStrategy:(id)strategy;
@end

@interface FBURLConnection : NSObject {
	BOOL _skipRoundtripIfCached;
	NSURLConnection* _connection;
	NSMutableData* _data;
	id _handler;
	unsigned _loggerSerialNumber;
	unsigned long _requestStartTime;
	NSURLResponse* _response;
}
@property(assign, nonatomic) BOOL skipRoundtripIfCached;
@property(readonly, assign, nonatomic) unsigned loggerSerialNumber;
@property(assign, nonatomic) unsigned long requestStartTime;
@property(retain, nonatomic) NSURLResponse* response;
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) NSMutableData* data;
@property(retain, nonatomic) NSURLConnection* connection;
+(void)initialize;
-(id)getCache;
-(BOOL)isCDNURL:(id)cdnurl;
-(BOOL)shouldShortCircuitRedirectResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)cancel;
-(void)dealloc;
-(void)logMessage:(id)message;
-(void)invokeHandler:(id)handler error:(id)error response:(id)response responseData:(id)data;
-(void)logAndInvokeHandler:(id)handler cachedData:(id)data forURL:(id)url;
-(void)logAndInvokeHandler:(id)handler response:(id)response responseData:(id)data;
-(void)logAndInvokeHandler:(id)handler error:(id)error;
-(id)initWithRequest:(id)request skipRoundTripIfCached:(BOOL)cached completionHandler:(id)handler;
-(id)initWithURL:(id)url completionHandler:(id)handler;
@end

@interface FBUserSettingsViewController : FBViewController {
	BOOL _attemptingLogin;
	FBProfilePictureView* _profilePicture;
	UILabel* _connectedStateLabel;
	id<FBGraphUser> _me;
	UIButton* _loginLogoutButton;
	NSArray* _permissions;
	NSArray* _readPermissions;
	NSArray* _publishPermissions;
	int _defaultAudience;
	UIImageView* _backgroundImageView;
	NSBundle* _bundle;
	id _sessionStateHandler;
	id _requestHandler;
}
@property(copy, nonatomic) id requestHandler;
@property(copy, nonatomic) id sessionStateHandler;
@property(retain, nonatomic) NSBundle* bundle;
@property(assign, nonatomic) BOOL attemptingLogin;
@property(retain, nonatomic) UIButton* loginLogoutButton;
@property(retain, nonatomic) id<FBGraphUser> me;
@property(retain, nonatomic) UILabel* connectedStateLabel;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(retain, nonatomic) FBProfilePictureView* profilePicture;
@property(assign, nonatomic) int defaultAudience;
@property(copy, nonatomic) NSArray* publishPermissions;
@property(copy, nonatomic) NSArray* readPermissions;
@property(copy, nonatomic) NSArray* permissions;
-(void)handleActiveSessionStateChanged:(id)changed;
-(void)loginLogoutButtonPressed:(id)pressed;
-(void)openSession;
-(void)sessionStateChanged:(id)changed state:(int)state error:(id)error;
-(void)updateControls;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidUnload;
-(void)updateBackgroundImage;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
-(void)initializeBlocks;
@end

@interface FBUtility : NSObject {
}
+(id)dialogBaseURL;
+(void)deleteFacebookCookies;
+(BOOL)isSystemAccountStoreAvailable;
+(BOOL)isMultitaskingSupported;
+(id)buildFacebookUrlWithPre:(id)pre withPost:(id)post;
+(id)buildFacebookUrlWithPre:(id)pre;
+(BOOL)isRegisteredURLScheme:(id)scheme;
+(id)newUUIDString;
+(BOOL)isRetinaDisplay;
+(id)simpleJSONDecode:(id)decode error:(id*)error;
+(id)simpleJSONDecode:(id)decode;
+(id)simpleJSONEncode:(id)encode error:(id*)error writingOptions:(unsigned)options;
+(id)simpleJSONEncode:(id)encode;
+(void)updateParametersWithEventUsageLimitsAndBundleInfo:(id)eventUsageLimitsAndBundleInfo;
+(int)advertisingTrackingStatus;
+(id)advertiserID;
+(id)attributionID;
+(void)callTheFetchAppSettingsCallback:(id)callback;
+(BOOL)isFetchedFBAppSettingsStale;
+(id)fetchedAppSettings;
+(void)fetchAppSettings:(id)settings callback:(id)callback;
+(id)addBasicInfoPermission:(id)permission;
+(BOOL)areAllPermissionsReadPermissions:(id)permissions;
+(BOOL)isPublishPermission:(id)permission;
+(BOOL)isFacebookBundleIdentifier:(id)identifier;
+(id)localizedStringForKey:(id)key withDefault:(id)aDefault inBundle:(id)bundle;
+(id)localizedStringForKey:(id)key withDefault:(id)aDefault;
+(id)facebookSDKBundle;
+(id)expirationDateFromExpirationTimeIntervalString:(id)expirationTimeIntervalString;
+(id)expirationDateFromExpirationUnixTimeString:(id)expirationUnixTimeString;
+(id)stringAppBaseUrlFromAppId:(id)appId urlSchemeSuffix:(id)suffix;
+(id)stringFBIDFromObject:(id)object;
+(void)centerView:(id)view tableView:(id)view2;
+(id)graphObjectInArray:(id)array withSameIDAs:(id)sameIDAs;
+(double)randomTimeInterval:(double)interval withMaxValue:(double)maxValue;
+(unsigned long)currentTimeInMilliseconds;
+(id)stringByURLEncodingString:(id)string;
+(id)stringByURLDecodingString:(id)string;
+(id)stringBySerializingQueryParameters:(id)parameters;
+(id)dictionaryByParsingURLQueryPart:(id)part;
+(id)queryParamsDictionaryFromFBURL:(id)fburl;
@end

@interface FBViewController : UIViewController {
	BOOL _autoDismiss;
	BOOL _dismissAnimated;
	UIBarButtonItem* _cancelButton;
	UIBarButtonItem* _doneButton;
	id<FBViewControllerDelegate> _delegate;
	UINavigationBar* _navigationBar;
	UIView* _canvasView;
	id _handler;
}
@property(assign, nonatomic) BOOL dismissAnimated;
@property(assign, nonatomic) BOOL autoDismiss;
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) UINavigationBar* navigationBar;
@property(retain, nonatomic) UIView* canvasView;
@property(assign, nonatomic) id<FBViewControllerDelegate> delegate;
@property(retain, nonatomic) UIBarButtonItem* doneButton;
@property(retain, nonatomic) UIBarButtonItem* cancelButton;
-(void)logAppEvents:(BOOL)events;
-(void)doneButtonPressed:(id)pressed;
-(void)cancelButtonPressed:(id)pressed;
-(void)setTitle:(id)title;
-(void)updateBarForNavigationMode;
-(void)updateBarForPresentedMode;
-(void)updateBar;
-(CGRect)contentBounds;
-(void)presentModallyFromViewController:(id)viewController animated:(BOOL)animated handler:(id)handler;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
-(void)commonInit;
@end

@interface FBWebDialogInternalDelegate : NSObject <FBDialogDelegate> {
	BOOL _isSelfRetained;
	id _handler;
	FBDialog* _dialog;
	NSString* _dialogMethod;
	NSDictionary* _parameters;
	FBSession* _session;
	id<FBWebDialogsDelegate> _delegate;
}
@property(assign, nonatomic) id<FBWebDialogsDelegate> delegate;
@property(retain, nonatomic) FBSession* session;
@property(copy, nonatomic) NSDictionary* parameters;
@property(copy, nonatomic) NSString* dialogMethod;
@property(retain, nonatomic) FBDialog* dialog;
@property(copy, nonatomic) id handler;
-(void)dialog:(id)dialog didFailWithError:(id)error;
-(void)dialogDidNotComplete:(id)dialog;
-(void)dialogDidComplete:(id)dialog;
-(void)dialogDidNotCompleteWithUrl:(id)dialog;
-(void)dialogCompleteWithUrl:(id)url;
-(BOOL)dialog:(id)dialog shouldOpenURLInExternalBrowser:(id)externalBrowser;
-(void)completeWithResult:(int)result url:(id)url error:(id)error;
-(void)releaseSelfIfNeeded;
-(void)goRetainYourself;
-(void)dealloc;
-(id)init;
@end

@interface FBWebDialogs : NSObject {
}
+(void)presentFeedDialogModallyWithSession:(id)session parameters:(id)parameters handler:(id)handler;
+(void)presentRequestsDialogModallyWithSession:(id)session message:(id)message title:(id)title parameters:(id)parameters handler:(id)handler friendCache:(id)cache;
+(void)presentRequestsDialogModallyWithSession:(id)session message:(id)message title:(id)title parameters:(id)parameters handler:(id)handler;
+(void)presentDialogModallyWithSession:(id)session dialog:(id)dialog parameters:(id)parameters handler:(id)handler delegate:(id)delegate;
+(void)presentDialogModallyWithSession:(id)session dialog:(id)dialog parameters:(id)parameters handler:(id)handler;
@end

@interface Facebook : NSObject <FBRequestDelegate, FBLoginDialogDelegate> {
	id<FBSessionDelegate> _sessionDelegate;
	NSMutableSet* _requests;
	FBSession* _session;
	FBSessionManualTokenCachingStrategy* _tokenCaching;
	FBDialog* _fbDialog;
	NSString* _appId;
	NSString* _urlSchemeSuffix;
	BOOL _isExtendingAccessToken;
	FBRequest* _requestExtendingAccessToken;
	NSDate* _lastAccessTokenUpdate;
	FBFrictionlessRequestSettings* _frictionlessRequestSettings;
	BOOL _hasUpdatedAccessToken;
}
@property(retain, nonatomic) FBSessionManualTokenCachingStrategy* tokenCaching;
@property(assign, nonatomic) BOOL hasUpdatedAccessToken;
@property(copy, nonatomic) NSString* appId;
@property(retain, nonatomic) FBSession* session;
@property(readonly, assign, nonatomic) BOOL isFrictionlessRequestsEnabled;
@property(copy, nonatomic) NSString* urlSchemeSuffix;
@property(assign, nonatomic) id<FBSessionDelegate> sessionDelegate;
@property(copy, nonatomic) NSDate* expirationDate;
@property(copy, nonatomic) NSString* accessToken;
+(BOOL)automaticallyNotifiesObserversForKey:(id)key;
-(void)requestLoading:(id)loading;
-(void)request:(id)request didReceiveResponse:(id)response;
-(void)request:(id)request didLoadRawResponse:(id)response;
-(void)request:(id)request didLoad:(id)load;
-(void)request:(id)request didFailWithError:(id)error;
-(void)fbDialogNotLogin:(BOOL)login;
-(void)fbDialogLogin:(id)login expirationDate:(id)date;
-(BOOL)isSessionValid;
-(BOOL)isFrictionlessEnabledForRecipients:(id)recipients;
-(BOOL)isFrictionlessEnabledForRecipient:(id)recipient;
-(void)reloadFrictionlessRecipientCache;
-(void)enableFrictionlessRequests;
-(void)dialog:(id)dialog andParams:(id)params andDelegate:(id)delegate;
-(void)dialog:(id)dialog andDelegate:(id)delegate;
-(id)requestWithGraphPath:(id)graphPath andParams:(id)params andHttpMethod:(id)method andDelegate:(id)delegate;
-(id)requestWithGraphPath:(id)graphPath andParams:(id)params andDelegate:(id)delegate;
-(id)requestWithGraphPath:(id)graphPath andDelegate:(id)delegate;
-(id)requestWithMethodName:(id)methodName andParams:(id)params andHttpMethod:(id)method andDelegate:(id)delegate;
-(id)requestWithParams:(id)params andDelegate:(id)delegate;
-(void)logout:(id)logout;
-(void)logout;
-(BOOL)handleOpenURL:(id)url;
-(BOOL)shouldExtendAccessToken;
-(void)extendAccessTokenIfNeeded;
-(void)extendAccessToken;
-(void)authorize:(id)authorize;
-(void)updateSessionIfTokenUpdated;
-(id)parseURLParams:(id)params;
-(id)getOwnBaseUrl;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)observeTokenContextValueForKeyPath:(id)keyPath change:(id)change;
-(void)observeFinishedContextValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change;
-(void)invalidateSession;
-(void)dealloc;
-(id)initWithAppId:(id)appId urlSchemeSuffix:(id)suffix andDelegate:(id)delegate;
-(id)initWithAppId:(id)appId andDelegate:(id)delegate;
@end

@interface PodsDummy_Pods_Facebook_iOS_SDK : NSObject {
}
@end

@interface JKArray : NSMutableArray <NSCopying, NSMutableCopying, NSFastEnumeration> {
	id* objects;
	unsigned count;
	unsigned capacity;
	unsigned mutations;
}
+(id)allocWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)replaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(void)removeObjectAtIndex:(unsigned)index;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(id)objectAtIndex:(unsigned)index;
-(void)getObjects:(id*)objects range:(NSRange)range;
-(unsigned)count;
-(void)dealloc;
@end

@interface JKDictionaryEnumerator : NSEnumerator {
	id collection;
	unsigned nextObject;
}
-(id)nextObject;
-(id)allObjects;
-(void)dealloc;
-(id)initWithJKDictionary:(id)jkdictionary;
@end

@interface JKDictionary : NSMutableDictionary <NSCopying, NSMutableCopying, NSFastEnumeration> {
	unsigned count;
	unsigned capacity;
	unsigned mutations;
	JKHashTableEntry* entry;
}
+(id)allocWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)keyEnumerator;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(void)getObjects:(id*)objects andKeys:(id*)keys;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)dealloc;
@end

@interface JSONDecoder : NSObject {
	JKParseState* parseState;
}
+(id)decoderWithParseOptions:(unsigned)parseOptions;
+(id)decoder;
-(id)mutableObjectWithData:(id)data error:(id*)error;
-(id)mutableObjectWithData:(id)data;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)objectWithData:(id)data error:(id*)error;
-(id)objectWithData:(id)data;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)parseJSONData:(id)data error:(id*)error;
-(id)parseJSONData:(id)data;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length error:(id*)error;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length;
-(void)clearCache;
-(void)dealloc;
-(id)initWithParseOptions:(unsigned)parseOptions;
-(id)init;
@end

@interface JKSerializer : NSObject {
	JKEncodeState* encodeState;
}
+(id)serializeObject:(id)object options:(unsigned)options encodeOption:(unsigned)option block:(id)block delegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(void)dealloc;
-(void)releaseState;
-(id)serializeObject:(id)object options:(unsigned)options encodeOption:(unsigned)option block:(id)block delegate:(id)delegate selector:(SEL)selector error:(id*)error;
@end

@interface PodsDummy_Pods_JSONKit : NSObject {
}
@end

@interface LCAppInfo : NSObject <NSCoding> {
	NSString* mVersion;
	NSString* mMarketAppLink;
	NSString* mMarketBrowserLink;
	NSDictionary* mExtras;
}
@property(retain, nonatomic) NSDictionary* extras;
@property(retain, nonatomic) NSString* marketBrowserLink;
@property(retain, nonatomic) NSString* marketAppLink;
@property(retain, nonatomic) NSString* version;
-(id)description;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
@end

@interface LCAppInfoParser : NSObject <LCAPIParser> {
}
-(id)parseWithDictionary:(id)dictionary;
@end

@interface LCBoardConfig : NSObject {
	NSString* mCategory;
	int mListSize;
	BOOL mIncludeBody;
	int mNewTerm;
	BOOL mPcView;
}
@property(assign, nonatomic, getter=isPcView) BOOL pcView;
@property(assign, nonatomic) int newTerm;
@property(assign, nonatomic, getter=isIncludeBody) BOOL includeBody;
@property(assign, nonatomic) int listSize;
@property(retain, nonatomic) NSString* category;
-(id)pcViewString;
-(id)includeBodyString;
-(void)dealloc;
-(id)initWithDic:(id)dic category:(id)category;
-(id)initWithCategory:(id)category listSize:(int)size includeBody:(BOOL)body newTerm:(int)term;
-(id)initWithCategory:(id)category listSize:(int)size includeBody:(BOOL)body newTerm:(int)term pcView:(BOOL)view;
@end

@interface LCBoardContent : NSObject {
	NSString* mDocucmentId;
	long long mRevision;
	long long mRegistered;
	long long mUpdated;
	BOOL mNewBadge;
	NSString* mTitle;
	NSString* mBody;
	NSString* mFmtRegistered;
	NSDictionary* mExtras;
}
@property(retain, nonatomic) NSDictionary* extras;
@property(retain, nonatomic) NSString* fmtRegistered;
@property(retain, nonatomic) NSString* body;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic, getter=isNewBadge) BOOL newBadge;
@property(assign, nonatomic) long long updated;
@property(assign, nonatomic) long long registered;
@property(assign, nonatomic) long long revision;
@property(retain, nonatomic) NSString* documentId;
-(id)description;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

@interface LCBoardContentParser : NSObject <LCAPIParser> {
}
-(id)parseWithDictionary:(id)dictionary;
@end

@interface LCBoardHeaderViewController : LCBoardViewController {
}
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)webViewDidFinishLoad:(id)webView;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)addBackButtonNavigationItemWithIsLandscape:(BOOL)isLandscape;
-(void)addCloseButtonNavigationItemWithIsLandscape:(BOOL)isLandscape;
-(void)updateBarButtonItemWitIsLandscape:(BOOL)landscape;
-(void)setupNavigationBar;
-(id)buttonItemWithTitle:(id)title target:(id)target action:(SEL)action isLandscape:(BOOL)landscape;
-(id)backButtonItem:(id)item action:(SEL)action isLandscape:(BOOL)landscape;
-(id)backButtonItem:(id)item action:(SEL)action;
-(id)customNavigationBackButtonForLandscape;
-(id)customNavigationBackButton;
-(id)customNavigationButtonForLandscape;
-(id)customNavigationButton;
-(id)image;
-(id)initWithCategory:(id)category;
-(id)initWithCategory:(id)category termsId:(id)anId;
-(id)initWithCategory:(id)category documentId:(id)anId;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface LCBoardListParser : NSObject <LCAPIParser> {
}
-(id)parseWithDictionary:(id)dictionary;
@end

@interface LCBoardListResult : NSObject {
	long long mNextSeq;
	NSArray* mDocuments;
}
@property(retain, nonatomic) NSArray* documents;
@property(assign, nonatomic) long long nextSeq;
-(int)count;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

@interface LCBoardModalNavigationController : UINavigationController {
	LCBoardHeaderViewController* mViewController;
}
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCategory:(id)category;
-(id)initWithCategory:(id)category documentId:(id)anId;
-(id)initWithCategory:(id)category documentId:(id)anId title:(id)title;
-(id)initWithCategory:(id)category termsId:(id)anId title:(id)title;
-(id)boardTitleWithCategory:(id)category;
@end

@interface LCBoardSettings : NSObject {
}
+(id)boardConfigForCategory:(id)category;
+(void)setBoardConfig:(id)config forCategory:(id)category;
+(unsigned)documentNewCountCacheInterval;
+(void)setDocumentNewCountCacheInterval:(unsigned)interval;
+(id)documentId;
+(void)setDocumentId:(id)anId;
+(id)fmt;
+(void)setFmt:(id)fmt;
+(void)initialize;
@end

@interface LCBoardViewController : UIViewController <UIWebViewDelegate> {
	UIWebView* mWebView;
	UIActivityIndicatorView* mIndicator;
	UIView* mIndicatorBackgroundView;
	UIView* mErrorView;
	LCNoticeErrorView* mErrorMessageView;
	NSURL* mReloadURL;
	int mNavigationType;
	NSString* mCategory;
	NSString* mDocumentId;
	LCNoticeManager* mNoticeManager;
}
@property(retain, nonatomic) NSString* documentId;
@property(retain, nonatomic) NSString* category;
-(void)setReloadURL:(id)url;
-(void)close;
-(BOOL)isModal;
-(void)reloadButtonTapped:(id)tapped;
-(void)backButtonTapped:(id)tapped;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)setHiddenErrorUI:(BOOL)ui;
-(void)stopIndicatorAnimating;
-(void)startIndicatorAnimating;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(unsigned)supportedInterfaceOrientations;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithCategory:(id)category;
-(id)initWithCategory:(id)category termsId:(id)anId;
-(id)initWithCategory:(id)category documentId:(id)anId;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface LCError : NSError {
	int mErrorType;
}
@property(assign, nonatomic) int errorType;
+(id)errorWithError:(id)error;
+(id)errorWithType:(int)type domain:(id)domain code:(int)code;
-(id)description;
-(void)dealloc;
-(id)initWithError:(id)error;
-(id)initWithType:(int)type domain:(id)domain code:(int)code;
@end

@interface LCHTTPRequestCenter : NSObject {
}
+(void)registerLogWithDescription:(id)description;
+(id)boardNewCountWithCategory:(id)category;
+(id)boardContentWithCategory:(id)category documentId:(id)anId;
+(id)boardListWithCategory:(id)category nextSeq:(id)seq;
+(id)appInfo;
+(id)notificationListDataWithLocalRevision:(id)localRevision;
+(id)unifiedNoticeResultWithLocalRevision:(id)localRevision;
+(id)requestDataWithURL:(id)url;
+(id)boardNewCountURLWithCategory:(id)category;
+(id)boardContentURLWithCategory:(id)category documentId:(id)anId;
+(id)boardListURLWithCategory:(id)category nextSeq:(id)seq;
+(id)boardContentWebViewURLWithCategory:(id)category documentId:(id)anId;
+(id)boardWebViewURLWithCategory:(id)category;
+(id)appInfoURL;
+(id)notificationListURLWithLocalRevision:(id)localRevision;
+(id)unifiedNoticeResultURLWithLocalRevision:(id)localRevision;
+(id)userAgent;
+(void)checkUserAgentWithItem:(id)item value:(id)value;
+(id)appendExtrasQueryStringWithPath:(id)path;
+(id)baseTermsWebURL;
+(id)baseHelpWebURL;
+(id)baseWebURL;
+(id)baseURL;
+(id)baseHostName;
+(id)termsDomain;
+(id)helpDomain;
+(id)noticeDomain;
+(id)domain;
+(id)lineTermsDomain;
+(id)line3rdTermsDomain;
+(id)lineHelpDomain;
+(id)line3rdHelpDomain;
+(id)lineNoticeDomain;
+(id)line3rdNoticeDomain;
+(id)lineDomain;
+(id)line3rdDomain;
@end

@interface LCJKArray : NSMutableArray <NSCopying, NSMutableCopying, NSFastEnumeration> {
	id* objects;
	unsigned count;
	unsigned capacity;
	unsigned mutations;
}
+(id)allocWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)replaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(void)removeObjectAtIndex:(unsigned)index;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(id)objectAtIndex:(unsigned)index;
-(void)getObjects:(id*)objects range:(NSRange)range;
-(unsigned)count;
-(void)dealloc;
@end

@interface LCJKDictionaryEnumerator : NSEnumerator {
	id collection;
	unsigned nextObject;
}
-(id)nextObject;
-(id)allObjects;
-(void)dealloc;
-(id)initWithJKDictionary:(id)jkdictionary;
@end

@interface LCJKDictionary : NSMutableDictionary <NSCopying, NSMutableCopying, NSFastEnumeration> {
	unsigned count;
	unsigned capacity;
	unsigned mutations;
	JKHashTableEntry* entry;
}
+(id)allocWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)keyEnumerator;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(void)getObjects:(id*)objects andKeys:(id*)keys;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)dealloc;
@end

@interface LCJSONDecoder : NSObject {
	LCJKParseState* parseState;
}
+(id)decoderWithParseOptions:(unsigned)parseOptions;
+(id)decoder;
-(id)mutableObjectWithData:(id)data error:(id*)error;
-(id)mutableObjectWithData:(id)data;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)objectWithData:(id)data error:(id*)error;
-(id)objectWithData:(id)data;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)parseJSONData:(id)data error:(id*)error;
-(id)parseJSONData:(id)data;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length error:(id*)error;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length;
-(void)clearCache;
-(void)dealloc;
-(id)initWithParseOptions:(unsigned)parseOptions;
-(id)init;
@end

@interface LCJKSerializer : NSObject {
	JKEncodeState* encodeState;
}
+(id)serializeObject:(id)object options:(unsigned)options encodeOption:(unsigned)option block:(id)block delegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(void)dealloc;
-(void)releaseState;
-(id)serializeObject:(id)object options:(unsigned)options encodeOption:(unsigned)option block:(id)block delegate:(id)delegate selector:(SEL)selector error:(id*)error;
@end

@interface LCNewCountParser : NSObject <LCAPIParser> {
}
-(id)parseWithDictionary:(id)dictionary;
@end

@interface LCNoticeCommand : NSObject {
	int mType;
	NSString* mURL;
	NSString* mCategory;
	NSString* mDocumentId;
}
@property(retain, nonatomic) NSString* category;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* documentId;
@property(assign, nonatomic) int type;
+(id)noneCommand;
+(id)closeCommand;
+(id)openBoardCommandWithCategory:(id)category documentId:(id)anId;
+(id)openBoardCommandWithCategory:(id)category;
+(id)openSafriCommandWithURL:(id)url;
+(id)loadCommandWithURL:(id)url;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(BOOL)isOpenBoardCommand;
-(BOOL)isOpenSafariCommand;
-(BOOL)isCloseCommand;
-(BOOL)isLoadCommand;
-(BOOL)isNoneCommand;
-(void)dealloc;
-(id)initWithCommandType:(int)commandType URL:(id)url category:(id)category documentId:(id)anId;
-(id)initWithCommandType:(int)commandType category:(id)category documentId:(id)anId;
-(id)initWithCommandType:(int)commandType URL:(id)url;
-(id)initWithCommandType:(int)commandType;
@end

@interface LCNoticeCommonSettings : NSObject {
}
+(id)validUserHosts;
+(void)setValidUserHosts:(id)hosts;
+(id)validDefaultHosts;
+(unsigned)supportedInterfaceOrientations;
+(void)setSupportedInterfaceOrientations:(unsigned)orientations;
+(BOOL)isNewly;
+(void)setIsNewly:(BOOL)newly;
+(id)extras;
+(void)setExtras:(id)extras;
+(id)userHash;
+(id)userId;
+(void)setUserId:(id)anId;
+(void)setPlatformVersion:(id)version;
+(void)setAppVersion:(id)version;
+(id)appVersion;
+(id)country;
+(void)setCountry:(id)country;
+(id)language;
+(void)setLanguage:(id)language;
+(id)defaultLanguage;
+(void)setDefaultLanguage:(id)language;
+(id)appId;
+(void)setAppId:(id)anId;
+(id)marketCode;
+(id)deviceName;
+(id)platformVersion;
+(id)platform;
+(int)phase;
+(void)setPhase:(int)phase;
+(int)domainType;
+(void)setDomainType:(int)type;
+(void)initialize;
@end

@interface LCNoticeErrorView : UIView {
	UIImageView* mAttentionImageView;
	UILabel* mTitleLabel;
	UILabel* mMessageLabel;
	UIButton* mReloadButton;
}
-(void)layoutSubviews;
-(void)layoutLandscapeSubviews;
-(void)layoutPortraitSubviews;
-(void)setFrameToPortrait;
-(void)setFrameToLandscape;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithDelegate:(id)delegate isPortrate:(BOOL)portrate;
@end

@interface LCNoticeLinkProcessor : NSObject {
}
+(id)processLinkWithURL:(id)url linkPath:(int)path noticeDelegate:(id)delegate;
+(id)processNotificationLinkWithURL:(id)url noticeDelegate:(id)delegate;
+(id)processBoardLinkWithURL:(id)url noticeDelegate:(id)delegate;
+(void)setLANUserInfoCookieWithDomain:(id)domain;
+(BOOL)validateHostURL:(id)url;
+(id)convertLinkPath:(int)path;
+(BOOL)isOpenBoardViewControllerLANScheme:(id)scheme;
+(BOOL)isCloseViewControllerLANScheme:(id)scheme;
+(BOOL)isRequestUserInfoLANScheme:(id)scheme;
+(BOOL)isOpenExternalBrowserLANScheme:(id)scheme;
+(BOOL)isLANScheme:(id)scheme;
+(id)URLByTrimmingLANScheme:(id)scheme;
@end

@interface LCNoticeManager : NSObject {
	id<LCNoticeDelegate> mNoticeDelegate;
	NSMutableArray* mNotices;
	NSTimer* mMandatoryTimer;
	id<LCNoticeDelegate> _noticeDelegate;
}
@property(assign, nonatomic) id<LCNoticeDelegate> noticeDelegate;
+(id)sharedManager;
-(void)processBanner:(id)banner;
-(void)processOpenUrl:(id)url;
-(id)processLinkWithURL:(id)url linkPath:(int)path;
-(void)displayNotice;
-(void)appInfoWithCompletion:(id)completion exception:(id)exception;
-(void)appInfoInBackgroundWithArgs:(id)args;
-(void)boardNewCountWithCategory:(id)category completion:(id)completion exception:(id)exception;
-(void)boardContentWithCategory:(id)category documentId:(id)anId completion:(id)completion exception:(id)exception;
-(void)boardContentInBackgroundWithArgs:(id)args;
-(void)boardListWithCategory:(id)category nextSeq:(long long)seq completion:(id)completion exception:(id)exception;
-(void)boardListInBackgroundWithArgs:(id)args;
-(id)boardContentWebViewURLWithCategory:(id)category documentId:(id)anId;
-(id)boardWebViewURLWithCategory:(id)category;
-(void)resetNotifications;
-(BOOL)isStartPolling;
-(void)stopNoticePolling;
-(void)startNoticePolling;
-(void)showNoticePollingWithTimer:(id)timer;
-(void)showNoticePollingInBackground;
-(void)onShowNotificationWithId:(long long)anId readResult:(int)result;
-(id)findNotificationWithId:(long long)anId inArray:(id)array;
-(void)showNoticeExtensionWithRemote:(BOOL)remote option:(id)option completion:(id)completion exception:(id)exception;
-(void)showNoticeExtensionWithRemote:(BOOL)remote completion:(id)completion exception:(id)exception;
-(void)showNoticeWithRemote:(BOOL)remote option:(id)option completion:(id)completion exception:(id)exception;
-(void)showNoticeWithRemote:(BOOL)remote completion:(id)completion exception:(id)exception;
-(void)showNoticeWithCompletionBlock:(id)completionBlock exception:(id)exception forAll:(BOOL)all isRemoteCall:(BOOL)call;
-(void)noticeWithRemote:(BOOL)remote option:(id)option completion:(id)completion exception:(id)exception;
-(void)noticeWithRemote:(BOOL)remote completion:(id)completion exception:(id)exception;
-(void)noticeInBackgroundWithArgs:(id)args;
-(void)boardNewCountInBackgroundWithArgs:(id)args;
-(id)getLocalRevision;
-(void)cleanUpNotificationJob;
-(void)setAppInfoCacheInterval:(int)interval;
-(void)setBoardInfo:(id)info forCategory:(id)category;
-(void)setDocumentNewCountCacheInterval:(unsigned)interval;
-(void)setDocumentId:(id)anId;
-(void)setFmt:(id)fmt;
-(void)setCustomAlertViewClassName:(id)name;
-(void)setStartup:(BOOL)startup;
-(void)setPresentViewController:(id)controller;
-(void)setPollingInterval:(int)interval;
-(void)setValidUserHosts:(id)hosts;
-(void)setSupportedInterfaceOrientations:(unsigned)orientations;
-(void)setExtras:(id)extras;
-(void)setIsNewly:(BOOL)newly;
-(void)setUserId:(id)anId;
-(void)setPlatformVersion:(id)version;
-(void)setAppVersion:(id)version;
-(void)setCountry:(id)country;
-(void)setLanguage:(id)language;
-(void)setDefaultLanguage:(id)language;
-(void)setAppId:(id)anId;
-(void)setPhase:(int)phase;
-(void)setDomainType:(int)type;
-(void)dealloc;
-(id)init;
-(unsigned)supportedInterfaceOrientations;
-(void)resetAppInfoCache;
-(void)resetBoardInfo;
@end

@interface LCNoticeOption : NSObject {
	NSArray* mNotificationTypes;
}
@property(retain, nonatomic) NSArray* notificationTypes;
-(void)dealloc;
-(id)initWithArray:(id)array;
@end

@interface LCNoticePropertyLoader : NSObject {
}
+(void)loadDefaultProperty;
+(void)loadProperty:(id)property;
+(void)setBoardProperties:(id)properties;
+(void)setAppInfoProperties:(id)properties;
+(void)setNotificationProperties:(id)properties;
+(void)setCommonProperties:(id)properties;
@end

@interface LCNoticeResource : NSObject {
}
+(id)localizedDefaultString:(id)string;
+(id)localizedStringInfo:(id)info;
+(void)setLanguage:(id)language defaultLanguage:(id)language2;
+(id)noticeBundle;
@end

@interface LCNoticeUtil : NSObject {
}
+(BOOL)isIOS6Over;
+(BOOL)isIOS5Over;
+(id)savedUserHash;
+(void)setSavedUserHash:(id)hash;
+(BOOL)isInternal;
+(void)setIsInternal:(BOOL)internal;
+(id)convertSha1:(id)a1;
+(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation supportedInterfaceOrientationsMask:(unsigned)mask;
+(unsigned)currentInterfaceOrientations;
+(id)currentCountry;
+(id)currentLanguage;
+(id)cachedDocumentNewCount;
+(void)setCachedDocumentNewCount:(id)count;
+(long long)boardCachedTimestamp;
+(void)setBoardCachedTimestamp:(id)timestamp;
+(id)cachedAppInfo;
+(void)setCachedAppInfo:(id)info;
+(long long)appInfoTimestamp;
+(void)setAppInfoTimestamp:(id)timestamp;
+(id)boardTimestamp;
+(void)setBoardTimestamp:(id)timestamp;
+(id)deviceVersion;
+(id)deviceName;
+(id)country;
+(void)setCountry:(id)country;
+(id)language;
+(void)setLanguage:(id)language;
+(id)noticeInfos;
+(void)setNoticeInfos:(id)infos;
+(id)localTime;
+(void)setLocalTime:(id)time;
+(id)serverTime;
+(void)setServerTime:(id)time;
+(id)lastRevision;
+(void)setLastRevision:(id)revision;
+(void)initialize;
@end

@interface LCNotificationBannerView : UIView <UIWebViewDelegate> {
	UIView* mBackgroundView;
	UIWebView* mContentsView;
	UIButton* mLinkButton;
	UIButton* mCloseButton;
	LCNotificationInfo* mBannerInfo;
	UIActivityIndicatorView* mIndicator;
	UIView* mIndicatorBackgroundView;
	UIView* mErrorView;
	UIImageView* mErrorAttentionImageView;
	UILabel* mErrorTitleLabel;
	UILabel* mErrorMessageLabel;
	id<LCNotificationBannerViewDelegate> mDelegate;
	id<LCNotificationBannerViewDelegate> _delegate;
}
@property(assign, nonatomic) id<LCNotificationBannerViewDelegate> delegate;
@property(retain, nonatomic) LCNotificationInfo* bannerInfo;
-(void)hideErrorUI;
-(void)showErrorUI;
-(void)processLink:(id)link;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)linkButtonTapped:(id)tapped;
-(void)closeButtonTapped:(id)tapped;
-(void)closeBanner;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate position:(CGPoint)position;
-(void)attachErrorUIWithBannerFrame:(CGRect)bannerFrame;
@end

@interface LCNotificationInfo : NSObject <NSCoding> {
	long long mNoticeId;
	long long mRevision;
	int mStatus;
	NSString* mTitle;
	NSString* mContent;
	NSString* mContentUrl;
	long long mOpen;
	long long mClose;
	NSArray* mTargets;
	BOOL mImmediately;
	BOOL mStartupOnly;
	BOOL mRepeat;
	int mInterval;
	NSString* mTypeString;
	int mType;
	int mFormat;
	NSString* mLink;
	BOOL mConfirmed;
	long long mMarkTime;
	NSDictionary* mExtras;
}
@property(assign, nonatomic, getter=isConfirmed) BOOL confirmed;
@property(retain, nonatomic) NSDictionary* extras;
@property(assign, nonatomic) long long markTime;
@property(retain, nonatomic) NSString* link;
@property(assign, nonatomic) int format;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* typeString;
@property(assign, nonatomic) int interval;
@property(assign, nonatomic, getter=isRepeat) BOOL repeat;
@property(assign, nonatomic, getter=isStartupOnly) BOOL startupOnly;
@property(assign, nonatomic, getter=isImmediately) BOOL immediately;
@property(retain, nonatomic) NSArray* targets;
@property(assign, nonatomic) long long close;
@property(assign, nonatomic) long long open;
@property(retain, nonatomic) NSString* contentUrl;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) long long revision;
@property(assign, nonatomic) long long noticeId;
+(BOOL)validateWithDictionary:(id)dictionary;
-(BOOL)isTimeToDisplay;
-(void)markInterval;
-(BOOL)hasLink;
-(BOOL)isMandatory;
-(BOOL)isNoticeAvailable;
-(BOOL)isNoticeExpired;
-(BOOL)isValidVersionsCheck;
-(BOOL)isValid;
-(BOOL)isValidForSave;
-(BOOL)isValidVersions:(id)versions compareVersion:(id)version;
-(id)description;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
-(id)convertTypeStringFromNoticeStatus:(int)noticeStatus;
-(int)convertNoticeTypeFromTypeString:(id)typeString;
@end

@interface LCNotificationPageView : UIView {
	UIWebView* mWebView;
	UIImageView* mBackgroundView;
	UIButton* mCloseButton;
	UIActivityIndicatorView* mIndicator;
	UIView* mIndicatorBackgroundView;
	UIView* mErrorView;
	LCNoticeErrorView* mErrorMessageView;
}
-(void)hideErrorUI;
-(void)showErrorUI;
-(void)stopIndicatorAnimating;
-(void)startIndicatorAnimating;
-(void)stopLoading;
-(void)loadRequest:(id)request;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

@interface LCNotificationPageViewController : UIViewController <UIWebViewDelegate> {
	LCNotificationPageView* mPageView;
	LCNotificationInfo* mNotificationInfo;
	UIViewController* mParentController;
	LCNotificationUIManager* mUIManager;
}
-(void)reloadButtonTapped:(id)tapped;
-(void)isConfirmedButtonTapped:(id)tapped;
-(void)closeButtonTapped:(id)tapped;
-(void)closePage;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithParentController:(id)parentController notificationInfo:(id)info;
@end

@interface LCNotificationParser : NSObject <LCAPIParser> {
	NSMutableArray* mNotices;
	BOOL mIsAll;
	BOOL mIsDataOnly;
}
-(id)parseWithDictionary:(id)dictionary;
-(void)dealloc;
-(id)initWithIsAll:(BOOL)isAll isDataOnly:(BOOL)only;
-(id)mergeIntoNewNotifications:(id)notifications localNotices:(id)notices;
-(void)saveRecentParametersWithNotificationRequest:(id)notificationRequest;
-(void)sortWithNotifications:(id)notifications;
-(void)excludeStartupNotification;
-(void)excludeMaintenanceNotifications;
-(void)excludeOldBannerNotifications;
-(void)excludeOldUpdateNotificationsWithSavedNotifications:(id)savedNotifications;
-(void)excludeOldNotificationsWithType:(int)type;
-(void)excludeOldNotificationsWithType:(int)type notifications:(id)notifications;
-(void)excludeNonImmediatelyNotification;
-(id)convertNoticeJsonToNoticeInfo:(id)noticeInfo;
@end

@interface LCNotificationSettings : NSObject {
}
+(id)customAlertViewClassName;
+(void)setCustomAlertViewClassName:(id)name;
+(unsigned)appInfoCacheInterval;
+(void)setAppInfoCacheInterval:(unsigned)interval;
+(BOOL)isStartup;
+(void)setStartup:(BOOL)startup;
+(id)presentViewController;
+(void)setPresentViewController:(id)controller;
+(int)pollingInterval;
+(void)setPollingInterval:(int)interval;
+(void)initialize;
@end

@interface LCNotificationTarget : NSObject <NSCoding> {
	int mTargetType;
	int mCondition;
	NSString* mVersion;
	LCNotificationVersion* mVersionInfo;
}
@property(retain, nonatomic) NSString* version;
@property(assign, nonatomic) int condition;
@property(assign, nonatomic) int targetType;
+(BOOL)valiateWithDictionary:(id)dictionary;
-(BOOL)isValidWithVersion:(id)version;
-(void)updateVersionInfo;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

@interface LCNotificationUIManager : NSObject {
	id<LCNoticeDelegate> mNoticeDelegate;
	NSMutableArray* mNotices;
	LCNotificationInfo* mCurrentNoticeInfo;
	UIAlertView* mAlertView;
	UIViewController* mPageViewController;
	LCNoticeManager* mNoticeManager;
}
@property(assign, nonatomic) UIViewController* pageViewController;
+(id)sharedManager;
-(void)removeNotificationInfo:(id)info;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)processMaintenanceAlertWithButtonIndex:(int)buttonIndex;
-(void)processUpdateAlertWithButtonIndex:(int)buttonIndex;
-(void)processSystemAlertWithButtonIndex:(int)buttonIndex;
-(void)setNoticeMarked;
-(void)setNoticeConfirmed;
-(void)moveToAlertViewLink;
-(void)moveToBannerLinkWithUserInfo:(id)userInfo;
-(void)moveToLinkInBannerNoticeWithURL:(id)url;
-(void)moveToLinkInPageNoticeWithURL:(id)url;
-(void)processCommand:(id)command;
-(void)setNoticesWithArray:(id)array;
-(BOOL)hasDisplayNotices;
-(void)showNextNotice;
-(id)getLinkButtonStringWithNotificationInfo:(id)notificationInfo;
-(void)setNoticeDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface LCNotificationVersion : NSObject {
	int mMajor;
	int mMinor;
	int mMicro;
	int mNumber;
	NSString* mDescription;
}
@property(assign, nonatomic) int number;
@property(assign, nonatomic) int micro;
@property(assign, nonatomic) int minor;
@property(assign, nonatomic) int major;
+(void)initialize;
-(BOOL)isGreaterThanOrEqualTo:(id)to;
-(BOOL)isGreaterThanOrEqualToNumber:(int)number;
-(BOOL)isGreaterThan:(id)than;
-(BOOL)isGreaterThanNumber:(int)number;
-(BOOL)isLessThanOrEqualTo:(id)to;
-(BOOL)isLessThanOrEqualToNumber:(int)number;
-(BOOL)isLessThan:(id)than;
-(BOOL)isLessThanNumber:(int)number;
-(BOOL)isEqualTo:(id)to;
-(BOOL)isEqualToNumber:(int)number;
-(id)description;
-(void)dealloc;
-(id)initWithString:(id)string;
-(int)parseInt:(id)int formatter:(id)formatter;
-(void)update;
-(id)generateDescriptionWithMajor:(int)major minor:(int)minor micro:(int)micro;
-(int)checkAndGenerateNumberWithMajor:(int)major minor:(int)minor micro:(int)micro;
-(int)generateNumberWithMajor:(int)major minor:(int)minor micro:(int)micro;
-(void)checkNil:(id)aNil;
-(void)checkRange:(int)range;
@end

@interface MJPopupBackgroundView : UIView {
}
-(void)drawRect:(CGRect)rect;
@end

@interface PodsDummy_Pods_LCNotice : NSObject {
}
@end

@interface NJNetworkActivity : NSObject {
}
+(void)endRequest;
+(void)beginRequest;
+(void)end;
+(void)begin;
@end

@interface PodsDummy_Pods_Luna : NSObject {
}
@end

@interface _LLDeallocHandle : NSObject {
	id _block;
}
-(void).cxx_destruct;
-(void)dealloc;
-(id)initWithBlock:(id)block;
@end

@interface NJPurchaseBackgroundTask : NSObject {
	unsigned mBackgroundTaskID;
	id mCompletionBlock;
}
@property(copy, nonatomic) id completionBlock;
+(id)backgroundTaskWithCompletionBlock:(id)completionBlock;
-(void)endTask;
-(void)beginTask;
-(void)dealloc;
-(id)init;
-(void)endBackgroundTask;
@end

@interface NJPurchaseConnOperation : NJPurchaseURLConnectionOperation {
	id mCompletionBlock;
}
+(id)operationWithURL:(id)url payload:(id)payload payloadType:(int)type completion:(id)completion;
-(void)didFinishLoading;
-(void)didFail;
-(void)dealloc;
-(id)initWithRequest:(id)request completion:(id)completion;
@end

@interface NJPurchaseErrors : NSObject {
}
+(BOOL)isAuthenticationError:(id)error;
+(BOOL)isNetworkError:(id)error;
+(id)errorWithDomain:(id)domain code:(int)code reason:(id)reason;
+(id)errorWithAppStoreError:(id)appStoreError;
+(id)verificationErrorWithError:(id)error;
+(id)reservationErrorWithError:(id)error;
@end

@interface NJPurchaseHistory : NSObject {
}
+(id)listFileAtPathWithExtension:(id)extension;
+(void)removeOldHistoryFilesWithInterval:(double)interval;
+(void)removeOrderIdForPaymentOrderId:(id)paymentOrderId;
+(void)removeOrderIdForPaymentTransactionId:(id)paymentTransactionId;
+(void)setPurchaseHistory:(id)history forPaymentOrderId:(id)paymentOrderId;
+(void)setPurchaseHistory:(id)history forPaymentTransactionId:(id)paymentTransactionId;
+(id)purchaseHistoryInfoForPaymentOrderId:(id)paymentOrderId;
+(id)purchaseHistoryInfoForPaymentTransactionId:(id)paymentTransactionId;
+(BOOL)createPurchaseDirectoryIfNotExist;
+(id)purchaseHistoryFilePathWithPaymentOrderId:(id)paymentOrderId;
+(id)purchaseHistoryFilePathWithPaymentTransactionId:(id)paymentTransactionId;
+(id)purchaseHistoryPath;
@end

@interface NJPurchaseHistoryInfo : NSObject <NSCoding> {
	NSString* mOrderId;
	NSURL* mVerifyReceiptURL;
	NSString* mProductIdentifier;
}
@property(readonly, assign, nonatomic) NSString* productIdentifier;
@property(readonly, assign, nonatomic) NSURL* verifyReceiptURL;
@property(readonly, assign, nonatomic) NSString* orderId;
+(id)purchaseHistoryInfoWithArchiveData:(id)archiveData;
+(id)purchaseHistoryInfoWithOrderId:(id)orderId verifyReceiptURL:(id)url productIdentifier:(id)identifier;
-(id)archivedData;
-(id)description;
-(void)dealloc;
-(id)initWithOrderId:(id)orderId verifyReceiptURL:(id)url productIdentifier:(id)identifier;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface NJPurchaseManager : NSObject <NJPurchaseTransactionDelegate, SKPaymentTransactionObserver> {
	NJPurchaserInfo* mPurchaser;
	NSString* mLanguage;
	NSURL* mLossReceiptRegisterServer;
	NSMutableDictionary* mTransactionDict;
	id mPendedTransactionDelegate;
	BOOL mIsLogRegister;
	NSURL* mLogRegisterServer;
}
@property(retain, nonatomic) NSURL* logRegisterServer;
@property(assign, nonatomic) BOOL isLogRegister;
@property(retain, nonatomic) NSURL* lossReceiptRegisterServer;
@property(retain, nonatomic) NSString* language;
+(BOOL)isIAPEnabled;
+(void)setIAPEnabled:(BOOL)enabled;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedManager;
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
-(void)transaction:(id)transaction didFailWithError:(id)error;
-(void)transaction:(id)transaction didFinish:(id)finish;
-(BOOL)transactionShouldVerify:(id)transaction;
-(BOOL)transactionShouldPayment:(id)transaction;
-(BOOL)transactionShouldReserve:(id)transaction;
-(id)purchaseProduct:(id)product serverInfo:(id)info delegate:(id)delegate;
-(void)setPendedTransactionDelegate:(id)delegate;
-(BOOL)setPurchaserUserHash:(id)hash tokenId:(id)anId;
-(id)init;
-(id)autorelease;
-(oneway void)release;
-(unsigned)retainCount;
-(id)retain;
-(id)copyWithZone:(NSZone*)zone;
-(void)finishTransaction:(id)transaction;
-(BOOL)canFinishTransaction:(id)transaction error:(id)error;
-(id)transactions;
-(id)transactionForPaymentTransaction:(id)paymentTransaction;
-(void)removeTransaction:(id)transaction;
-(BOOL)addTransaction:(id)transaction;
-(void)reset;
@end

@interface NJPurchaseProductInfo : NSObject {
	NSString* mProductId;
	NSString* mLocation;
	NSString* mCurrency;
	NSDecimalNumber* mPrice;
	NSString* mReceiverUserHash;
	unsigned mQuantity;
	NSString* mRemoteIP;
}
@property(retain, nonatomic) NSString* remoteIP;
@property(assign, nonatomic) unsigned quantity;
@property(retain, nonatomic) NSString* receiverUserHash;
@property(readonly, assign, nonatomic) NSDecimalNumber* price;
@property(readonly, assign, nonatomic) NSString* currency;
@property(readonly, assign, nonatomic) NSString* location;
@property(readonly, assign, nonatomic) NSString* productId;
+(id)productInfoWithProductId:(id)productId location:(id)location currency:(id)currency price:(id)price;
-(id)jsonNodes;
-(id)parameters;
-(BOOL)validate;
-(void)dealloc;
-(id)initWithProductId:(id)productId location:(id)location currency:(id)currency price:(id)price;
@end

@interface NJPurchaseResource : NSObject {
}
+(id)localizedErrorStringWithCode:(int)code serverMessage:(id)message language:(id)language;
+(id)localizedErrorStringWithError:(id)error language:(id)language;
+(id)localizedStringInfoZhtChinese;
+(id)localizedStringInfoZhsChinese;
+(id)localizedStringInfoKorean;
+(id)localizedStringInfoJapanese;
+(id)localizedStringInfoEnglish;
+(id)localizedStringInfo;
@end

@interface NJPurchaseResult : NSObject {
	int mType;
	int mStatus;
	int mErrorCode;
	NSString* mMessage;
	NSString* mOrderId;
	NSString* mLevel;
	BOOL mIsRetriable;
	NSString* mReturnParam;
	NSString* mRedirectURL;
}
@property(readonly, assign, nonatomic) NSString* redirectURL;
@property(readonly, assign, nonatomic) NSString* returnParam;
@property(readonly, assign, nonatomic) BOOL isRetriable;
@property(readonly, assign, nonatomic) NSString* level;
@property(readonly, assign, nonatomic) NSString* orderId;
@property(readonly, assign, nonatomic) NSString* message;
@property(readonly, assign, nonatomic) int errorCode;
@property(readonly, assign, nonatomic) int status;
@property(readonly, assign, nonatomic) int type;
-(id)error;
-(id)verificationError;
-(id)reservationError;
-(id)reasonDictionary;
-(BOOL)isSuccess;
-(id)description;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary type:(int)type;
-(id)init;
@end

@interface NJPurchaseServerInfo : NSObject {
	NSURL* mShopServerURL;
	NSURL* mBillingServerURL;
	NSURL* mBillingOrderIdSettingURL;
	int mShopPayloadType;
	int mBillingPayloadType;
}
@property(assign, nonatomic) int billingPayloadType;
@property(assign, nonatomic) int shopPayloadType;
@property(readonly, assign, nonatomic) NSURL* billingOrderIdSettingURL;
@property(readonly, assign, nonatomic) NSURL* billingServerURL;
@property(readonly, assign, nonatomic) NSURL* shopServerURL;
+(id)purchaseServerInfoWithBillingOrderIdSettingURL:(id)billingOrderIdSettingURL;
+(id)purchaseServerInfoWithShopServerURL:(id)shopServerURL billingServerURL:(id)url;
-(id)description;
-(BOOL)validate;
-(id)requestVerifyReceiptURLWithOrderId:(id)orderId debugInfo:(id)info;
-(id)billingServerDomain;
-(void)dealloc;
-(id)initWithShopServerURL:(id)shopServerURL billingServerURL:(id)url billingOrderIdSettingURL:(id)url3;
@end

@interface NJPurchaseTransaction : NSObject {
	id mContext;
	NJPurchaserInfo* mPurchaserInfo;
	NJPurchaseProductInfo* mProductInfo;
	NJPurchaseServerInfo* mServerInfo;
	NSURL* mLossReceiptRegisterServer;
	NSString* mLanguage;
	int mRetryRequestType;
	NSString* mReturnParam;
	id<NJPurchaseTransactionDelegate> mDelegate;
	int mState;
	NSOperationQueue* mOperationQueue;
	NSString* mOrderId;
	SKPayment* mPayment;
	SKPaymentTransaction* mPaymentTransaction;
	NJPurchaseResult* mResult;
	BOOL mIsLogRegister;
	NSURL* mLogRegisterServer;
	id mDebuggingInfo;
}
@property(retain, nonatomic) id debuggingInfo;
@property(retain, nonatomic) NSURL* logRegisterServer;
@property(assign, nonatomic) BOOL isLogRegister;
@property(readonly, assign, nonatomic) SKPaymentTransaction* paymentTransaction;
@property(readonly, assign, nonatomic) SKPayment* payment;
@property(readonly, assign, nonatomic) NJPurchaseResult* result;
@property(readonly, assign, nonatomic) NSString* orderId;
@property(assign, nonatomic) id<NJPurchaseTransactionDelegate> delegate;
@property(assign, nonatomic) int retryRequestType;
@property(retain, nonatomic) NSURL* lossReceiptRegisterServer;
@property(retain, nonatomic) NSString* language;
@property(retain, nonatomic) NSString* returnParam;
@property(retain, nonatomic) NJPurchaseServerInfo* serverInfo;
@property(retain, nonatomic) NJPurchaseProductInfo* productInfo;
@property(retain, nonatomic) NJPurchaserInfo* purchaserInfo;
@property(retain, nonatomic) id context;
+(id)pendedTransactionWithPaymentTransaction:(id)paymentTransaction purchaseHistoryInfo:(id)info delegate:(id)delegate;
-(void)registerFailLogWithTransaction:(id)transaction historyFilePaths:(id)paths;
-(void)finishVerifyReceiptWithResult:(id)result error:(id)error;
-(id)verifyReceiptPayload;
-(id)verifyReceiptURL;
-(void)finishAppStorePaymentWithTransaction:(id)transaction;
-(void)finishReserveWithResult:(id)result error:(id)error;
-(id)reservePayload;
-(id)reservePayloadForJSONStringType;
-(id)reservePayloadForRequestParameterType;
-(id)reserveURL;
-(BOOL)validateForParameter;
-(id)purchase;
-(BOOL)isPurchasing;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(id)init;
-(void)lossReceiptPendingVerification;
-(void)requestReceiptVerification;
-(void)requestAppStorePayment;
-(void)requestReservation;
-(void)requestRegisterFailLogWithTransaction:(id)transaction historyFilePaths:(id)paths;
-(void)printFailLog:(id)log;
-(void)setPaymentTransaction:(id)transaction;
-(void)setPayment:(id)payment;
-(void)setOrderId:(id)anId;
-(void)setResult:(id)result;
@end

@interface NJPurchaseURLConnectionOperation : NSOperation {
	NSThread* mThread;
	NSTimer* mTimer;
	NSURLConnection* mConnection;
	NSURLRequest* mRequest;
	NSURLResponse* mResponse;
	NSError* mError;
	int mTotalBytesRead;
	int mTotalBytesExpectedToRead;
	double mTimeoutInterval;
	int mRetryCount;
	int mRetryIndex;
	int mState;
	NJPurchaseBackgroundTask* mBackgroundTask;
	BOOL mAutoRetryAfterWakeup;
	BOOL mUsesTempFile;
	XXUnion_6XAQHD mResult;
}
@property(readonly, assign, nonatomic) NSString* filePath;
@property(readonly, assign, nonatomic) NSData* data;
@property(retain, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSURLResponse* response;
@property(copy, nonatomic) NSURLRequest* request;
@property(assign, nonatomic) BOOL usesTempFile;
@property(assign, nonatomic) int retryCount;
@property(assign, nonatomic) double timeoutInterval;
@property(assign, nonatomic) BOOL autoRetryAfterWakeup;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)didFinishLoading;
-(void)didFail;
-(void)willRetryWithAttempt:(int)attempt;
-(BOOL)shouldRetryWithAttempt:(int)attempt;
-(void)didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)didReceiveBodyData:(int)data totalBytesRead:(int)read totalBytesExpectedToRead:(int)read3;
-(void)didReceiveResponse;
-(id)needNewBodyStream:(id)stream;
-(id)willSendRequest:(id)request redirectResponse:(id)response;
-(id)willCacheResponse:(id)response;
-(void)cancel;
-(void)main;
-(void)retry;
-(void)timerFired:(id)fired;
-(void)resetTimer;
-(void)keepRunningInBackground;
-(void)resumeConnection;
-(void)suspendConnection;
-(void)finishConnectionWithError:(id)error;
-(void)cancelConnection;
-(void)dealloc;
@end

@interface NJPurchaserInfo : NSObject {
	NSString* mUserId;
	NSString* mTokenId;
	NSString* mAccessTokenId;
}
@property(retain, nonatomic) NSString* accessTokenId;
@property(retain, nonatomic) NSString* tokenId;
@property(retain, nonatomic) NSString* userId;
-(id)jsonNodes;
-(id)parameters;
-(BOOL)validate;
-(void)dealloc;
@end

@interface PodsDummy_Pods_NJPurchase : NSObject {
}
@end

@interface SKMockPaymentTransaction : NSObject {
	NSError* mError;
	NSString* mTransactionIdentifier;
	int mTransactionState;
	SKPayment* mPayment;
	NSData* mTransactionReceipt;
	NSDate* mTransactionDate;
}
@property(readonly, assign, nonatomic) NSDate* transactionDate;
@property(retain, nonatomic) NSData* transactionReceipt;
@property(retain, nonatomic) SKPayment* payment;
@property(assign, nonatomic) int transactionState;
@property(retain, nonatomic) NSString* transactionIdentifier;
@property(retain, nonatomic) NSError* error;
-(void)dealloc;
-(id)init;
@end

@interface PSTCollectionViewExt : NSObject {
	id<PSTCollectionViewDelegate> _collectionViewDelegate;
	PSTCollectionViewLayout* _nibLayout;
	NSDictionary* _nibCellsExternalObjects;
	NSDictionary* _supplementaryViewsExternalObjects;
	NSIndexPath* _touchingIndexPath;
	NSIndexPath* _currentIndexPath;
}
@property(retain, nonatomic) NSIndexPath* currentIndexPath;
@property(retain, nonatomic) NSIndexPath* touchingIndexPath;
@property(retain, nonatomic) NSDictionary* supplementaryViewsExternalObjects;
@property(retain, nonatomic) NSDictionary* nibCellsExternalObjects;
@property(retain, nonatomic) PSTCollectionViewLayout* nibLayout;
@property(assign, nonatomic) id<PSTCollectionViewDelegate> collectionViewDelegate;
-(void).cxx_destruct;
@end

@interface PSTCollectionView : UIScrollView <UIScrollViewDelegate> {
	PSTCollectionViewLayout* _layout;
	id<PSTCollectionViewDataSource> _dataSource;
	UIView* _backgroundView;
	NSMutableSet* _indexPathsForSelectedItems;
	NSMutableDictionary* _cellReuseQueues;
	NSMutableDictionary* _supplementaryViewReuseQueues;
	NSMutableDictionary* _decorationViewReuseQueues;
	NSMutableSet* _indexPathsForHighlightedItems;
	int _reloadingSuspendedCount;
	PSTCollectionReusableView* _firstResponderView;
	UIView* _newContentView;
	int _firstResponderViewType;
	NSString* _firstResponderViewKind;
	NSIndexPath* _firstResponderIndexPath;
	NSMutableDictionary* _allVisibleViewsDict;
	NSIndexPath* _pendingSelectionIndexPath;
	NSMutableSet* _pendingDeselectionIndexPaths;
	PSTCollectionViewData* _collectionViewData;
	id _update;
	CGRect _visibleBoundRects;
	CGRect _preRotationBounds;
	CGPoint _rotationBoundsOffset;
	int _rotationAnimationCount;
	int _updateCount;
	NSMutableArray* _insertItems;
	NSMutableArray* _deleteItems;
	NSMutableArray* _reloadItems;
	NSMutableArray* _moveItems;
	NSArray* _originalInsertItems;
	NSArray* _originalDeleteItems;
	UITouch* _currentTouch;
	id _updateCompletionHandler;
	NSMutableDictionary* _cellClassDict;
	NSMutableDictionary* _cellNibDict;
	NSMutableDictionary* _supplementaryViewClassDict;
	NSMutableDictionary* _supplementaryViewNibDict;
	NSMutableDictionary* _cellNibExternalObjectsTables;
	NSMutableDictionary* _supplementaryViewNibExternalObjectsTables;
	struct {
		unsigned delegateShouldHighlightItemAtIndexPath : 1;
		unsigned delegateDidHighlightItemAtIndexPath : 1;
		unsigned delegateDidUnhighlightItemAtIndexPath : 1;
		unsigned delegateShouldSelectItemAtIndexPath : 1;
		unsigned delegateShouldDeselectItemAtIndexPath : 1;
		unsigned delegateDidSelectItemAtIndexPath : 1;
		unsigned delegateDidDeselectItemAtIndexPath : 1;
		unsigned delegateSupportsMenus : 1;
		unsigned delegateDidEndDisplayingCell : 1;
		unsigned delegateDidEndDisplayingSupplementaryView : 1;
		unsigned dataSourceNumberOfSections : 1;
		unsigned dataSourceViewForSupplementaryElement : 1;
		unsigned reloadSkippedDuringSuspension : 1;
		unsigned scheduledUpdateVisibleCells : 1;
		unsigned scheduledUpdateVisibleCellLayoutAttributes : 1;
		unsigned allowsSelection : 1;
		unsigned allowsMultipleSelection : 1;
		unsigned updating : 1;
		unsigned fadeCellsForBoundsChange : 1;
		unsigned updatingLayout : 1;
		unsigned needsReload : 1;
		unsigned reloading : 1;
		unsigned skipLayoutDuringSnapshotting : 1;
		unsigned layoutInvalidatedSinceLastCellUpdate : 1;
		unsigned doneFirstLayout : 1;
	} _collectionViewFlags;
	CGPoint _lastLayoutOffset;
	BOOL filler[200];
}
@property(assign, nonatomic) CGRect visibleBoundRects;
@property(readonly, assign, nonatomic) NSDictionary* visibleViewsDict;
@property(readonly, assign, nonatomic) id currentUpdate;
@property(readonly, assign, nonatomic) PSTCollectionViewExt* extVars;
@property(retain, nonatomic) PSTCollectionViewData* collectionViewData;
@property(assign, nonatomic) BOOL allowsMultipleSelection;
@property(assign, nonatomic) BOOL allowsSelection;
@property(retain, nonatomic) UIView* backgroundView;
@property(assign, nonatomic) id<PSTCollectionViewDataSource> dataSource;
@property(assign, nonatomic) id<PSTCollectionViewDelegate> delegate;
@property(retain, nonatomic) PSTCollectionViewLayout* collectionViewLayout;
-(void).cxx_destruct;
-(void)updateSections:(id)sections updateAction:(int)action;
-(void)updateRowsAtIndexPaths:(id)indexPaths updateAction:(int)action;
-(void)endItemAnimations;
-(void)setupCellAnimations;
-(void)updateWithItems:(id)items;
-(void)prepareLayoutForUpdates;
-(id)arrayForUpdateAction:(int)updateAction;
-(void)resumeReloads;
-(void)suspendReloads;
-(void)addControlledSubview:(id)subview;
-(void)reuseDecorationView:(id)view;
-(void)reuseSupplementaryView:(id)view;
-(void)reuseCell:(id)cell;
-(void)queueReusableView:(id)view inQueue:(id)queue withIdentifier:(id)identifier;
-(id)createPreparedSupplementaryViewForElementOfKind:(id)kind atIndexPath:(id)indexPath withLayoutAttributes:(id)layoutAttributes;
-(id)createPreparedCellForItemAtIndexPath:(id)indexPath withLayoutAttributes:(id)layoutAttributes;
-(void)updateVisibleCellsNow:(BOOL)now;
-(void)invalidateLayout;
-(void)setCollectionViewLayout:(id)layout animated:(BOOL)animated;
-(void)performBatchUpdates:(id)updates completion:(id)completion;
-(void)moveItemAtIndexPath:(id)indexPath toIndexPath:(id)indexPath2;
-(void)reloadItemsAtIndexPaths:(id)indexPaths;
-(void)deleteItemsAtIndexPaths:(id)indexPaths;
-(void)insertItemsAtIndexPaths:(id)indexPaths;
-(void)moveSection:(int)section toSection:(int)section2;
-(void)reloadSections:(id)sections;
-(void)deleteSections:(id)sections;
-(void)insertSections:(id)sections;
-(BOOL)unhighlightItemAtIndexPath:(id)indexPath animated:(BOOL)animated notifyDelegate:(BOOL)delegate shouldCheckHighlight:(BOOL)highlight;
-(BOOL)unhighlightItemAtIndexPath:(id)indexPath animated:(BOOL)animated notifyDelegate:(BOOL)delegate;
-(BOOL)highlightItemAtIndexPath:(id)indexPath animated:(BOOL)animated scrollPosition:(unsigned)position notifyDelegate:(BOOL)delegate;
-(void)deselectItemAtIndexPath:(id)indexPath animated:(BOOL)animated notifyDelegate:(BOOL)delegate;
-(void)deselectItemAtIndexPath:(id)indexPath animated:(BOOL)animated;
-(void)selectItemAtIndexPath:(id)indexPath animated:(BOOL)animated scrollPosition:(unsigned)position;
-(void)selectItemAtIndexPath:(id)indexPath animated:(BOOL)animated scrollPosition:(unsigned)position notifyDelegate:(BOOL)delegate;
-(void)userSelectedItemAtIndexPath:(id)indexPath;
-(void)cellTouchCancelled;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(CGRect)makeRect:(CGRect)rect toScrollPosition:(unsigned)scrollPosition;
-(void)scrollToItemAtIndexPath:(id)indexPath atScrollPosition:(unsigned)scrollPosition animated:(BOOL)animated;
-(id)indexPathsForSelectedItems;
-(id)indexPathsForVisibleItems;
-(id)cellForItemAtIndexPath:(id)indexPath;
-(id)indexPathForCell:(id)cell;
-(id)indexPathForItemAtPoint:(CGPoint)point;
-(id)layoutAttributesForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)layoutAttributesForItemAtIndexPath:(id)indexPath;
-(int)numberOfItemsInSection:(int)section;
-(int)numberOfSections;
-(void)reloadData;
-(id)visibleCells;
-(id)allCells;
-(id)dequeueReusableOrCreateDecorationViewOfKind:(id)kind forIndexPath:(id)indexPath;
-(id)dequeueReusableSupplementaryViewOfKind:(id)kind withReuseIdentifier:(id)reuseIdentifier forIndexPath:(id)indexPath;
-(id)dequeueReusableCellWithReuseIdentifier:(id)reuseIdentifier forIndexPath:(id)indexPath;
-(void)registerNib:(id)nib forSupplementaryViewOfKind:(id)kind withReuseIdentifier:(id)reuseIdentifier;
-(void)registerNib:(id)nib forCellWithReuseIdentifier:(id)reuseIdentifier;
-(void)registerClass:(Class)aClass forSupplementaryViewOfKind:(id)kind withReuseIdentifier:(id)reuseIdentifier;
-(void)registerClass:(Class)aClass forCellWithReuseIdentifier:(id)reuseIdentifier;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)setBounds:(CGRect)bounds;
-(void)setFrame:(CGRect)frame;
-(void)layoutSubviews;
-(id)description;
-(void)awakeFromNib;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame collectionViewLayout:(id)layout;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PSUICollectionView_ : PSTCollectionView {
}
@end

@interface PSUICollectionViewCell_ : PSTCollectionViewCell {
}
@end

@interface PSUICollectionReusableView_ : PSTCollectionReusableView {
}
@end

@interface PSUICollectionViewLayout_ : PSTCollectionViewLayout {
}
@end

@interface PSUICollectionViewFlowLayout_ : PSTCollectionViewFlowLayout {
}
@end

@interface PSUICollectionViewLayoutAttributes_ : PSTCollectionViewLayoutAttributes {
}
@end

@interface PSUICollectionViewController_ : PSTCollectionViewController <PSTCollectionViewDelegate, PSTCollectionViewDataSource> {
}
@end

@interface PSTCollectionReusableView : UIView {
	PSTCollectionViewLayoutAttributes* _layoutAttributes;
	NSString* _reuseIdentifier;
	PSTCollectionView* _collectionView;
	XXStruct_PMaOsD _reusableViewFlags;
	BOOL filler[50];
}
@property(retain, nonatomic) PSTCollectionViewLayoutAttributes* layoutAttributes;
@property(assign, nonatomic) PSTCollectionView* collectionView;
@property(copy, nonatomic) NSString* reuseIdentifier;
-(void).cxx_destruct;
-(void)setInUpdateAnimation:(BOOL)updateAnimation;
-(BOOL)isInUpdateAnimation;
-(void)didTransitionFromLayout:(id)layout toLayout:(id)layout2;
-(void)willTransitionFromLayout:(id)layout toLayout:(id)layout2;
-(void)applyLayoutAttributes:(id)attributes;
-(void)prepareForReuse;
-(void)awakeFromNib;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PSTCollectionViewCell : PSTCollectionReusableView {
	UIView* _contentView;
	UIView* _backgroundView;
	UIView* _selectedBackgroundView;
	UILongPressGestureRecognizer* _menuGesture;
	id _selectionSegueTemplate;
	id _highlightingSupport;
	struct {
		unsigned toType : 1;
		unsigned createdTime : 1;
		unsigned deliveredTime : 1;
		unsigned hasContent : 1;
		unsigned contentType : 1;
	} _collectionCellFlags;
	BOOL _selected;
	BOOL _highlighted;
}
@property(retain, nonatomic) UIView* selectedBackgroundView;
@property(retain, nonatomic) UIView* backgroundView;
@property(assign, nonatomic, getter=isHighlighted) BOOL highlighted;
@property(assign, nonatomic, getter=isSelected) BOOL selected;
@property(readonly, assign, nonatomic) UIView* contentView;
-(void).cxx_destruct;
-(void)performSelectionSegue;
-(void)menuGesture:(id)gesture;
-(void)setHighlighted:(BOOL)highlighted forViews:(id)views;
-(void)updateBackgroundView:(BOOL)view;
-(void)prepareForReuse;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PSTCollectionViewController : UIViewController <PSTCollectionViewDelegate, PSTCollectionViewDataSource> {
	PSTCollectionViewLayout* _layout;
	PSTCollectionView* _collectionView;
	XXStruct_JTAGoB _collectionViewControllerFlags;
	BOOL filler[100];
}
@property(retain, nonatomic) PSTCollectionViewLayout* layout;
@property(assign, nonatomic) BOOL clearsSelectionOnViewWillAppear;
@property(retain, nonatomic) PSTCollectionView* collectionView;
-(void).cxx_destruct;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithCollectionViewLayout:(id)collectionViewLayout;
-(id)initWithCoder:(id)coder;
@end

@interface PSTCollectionViewData : NSObject {
	CGRect _validLayoutRect;
	int _numItems;
	int _numSections;
	int* _sectionItemCounts;
	CGSize _contentSize;
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} _collectionViewDataFlags;
	PSTCollectionView* _collectionView;
	PSTCollectionViewLayout* _layout;
	NSArray* _cachedLayoutAttributes;
}
@property(retain, nonatomic) NSArray* cachedLayoutAttributes;
@property(assign, nonatomic) PSTCollectionViewLayout* layout;
@property(assign, nonatomic) PSTCollectionView* collectionView;
@property(readonly, assign) BOOL layoutIsPrepared;
-(void).cxx_destruct;
-(void)prepareToLoadData;
-(void)updateItemCounts;
-(void)validateItemCounts;
-(id)layoutAttributesForElementsInRect:(CGRect)rect;
-(void)setLayoutIsPrepared:(BOOL)prepared;
-(unsigned)globalIndexForItemAtIndexPath:(id)indexPath;
-(id)indexPathForItemAtGlobalIndex:(int)globalIndex;
-(CGRect)rectForItemAtIndexPath:(id)indexPath;
-(int)numberOfSections;
-(int)numberOfItemsInSection:(int)section;
-(int)numberOfItemsBeforeSection:(int)itemsBeforeSection;
-(int)numberOfItems;
-(void)validateLayoutInRect:(CGRect)rect;
-(CGRect)collectionViewContentRect;
-(void)invalidate;
-(id)description;
-(void)dealloc;
-(id)initWithCollectionView:(id)collectionView layout:(id)layout;
@end

@interface PSTCollectionViewFlowLayout : PSTCollectionViewLayout {
	struct {
		unsigned delegateSizeForItem : 1;
		unsigned delegateReferenceSizeForHeader : 1;
		unsigned delegateReferenceSizeForFooter : 1;
		unsigned delegateInsetForSection : 1;
		unsigned delegateInteritemSpacingForSection : 1;
		unsigned delegateLineSpacingForSection : 1;
		unsigned delegateAlignmentOptions : 1;
		unsigned keepDelegateInfoWhileInvalidating : 1;
		unsigned keepAllDataWhileInvalidating : 1;
		unsigned layoutDataIsValid : 1;
		unsigned delegateInfoIsValid : 1;
	} _gridLayoutFlags;
	float _interitemSpacing;
	float _lineSpacing;
	CGSize _itemSize;
	CGSize _headerReferenceSize;
	CGSize _footerReferenceSize;
	UIEdgeInsets _sectionInset;
	PSTGridLayoutInfo* _data;
	CGSize _currentLayoutSize;
	NSMutableDictionary* _insertedItemsAttributesDict;
	NSMutableDictionary* _insertedSectionHeadersAttributesDict;
	NSMutableDictionary* _insertedSectionFootersAttributesDict;
	NSMutableDictionary* _deletedItemsAttributesDict;
	NSMutableDictionary* _deletedSectionHeadersAttributesDict;
	NSMutableDictionary* _deletedSectionFootersAttributesDict;
	int _scrollDirection;
	NSDictionary* _rowAlignmentsOptionsDictionary;
	CGRect _visibleBounds;
	BOOL filler[200];
}
@property(retain, nonatomic) NSDictionary* rowAlignmentOptions;
@property(assign, nonatomic) UIEdgeInsets sectionInset;
@property(assign, nonatomic) CGSize footerReferenceSize;
@property(assign, nonatomic) CGSize headerReferenceSize;
@property(assign, nonatomic) int scrollDirection;
@property(assign, nonatomic) CGSize itemSize;
@property(assign, nonatomic) float minimumInteritemSpacing;
@property(assign, nonatomic) float minimumLineSpacing;
-(void).cxx_destruct;
-(void)updateItemsLayout;
-(void)getSizingInfos;
-(void)fetchItemsInfo;
-(void)prepareLayout;
-(CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)scrollingVelocity;
-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)boundsChange;
-(void)invalidateLayout;
-(CGSize)collectionViewContentSize;
-(id)layoutAttributesForDecorationViewWithReuseIdentifier:(id)reuseIdentifier atIndexPath:(id)indexPath;
-(id)layoutAttributesForSupplementaryViewOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)layoutAttributesForItemAtIndexPath:(id)indexPath;
-(id)layoutAttributesForElementsInRect:(CGRect)rect;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)init;
-(void)commonInit;
@end

@interface PSTCollectionViewItemKey : NSObject <NSCopying> {
	unsigned _type;
	NSIndexPath* _indexPath;
	NSString* _identifier;
}
@property(retain, nonatomic) NSString* identifier;
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(assign, nonatomic) unsigned type;
+(id)collectionItemKeyForLayoutAttributes:(id)layoutAttributes;
+(id)collectionItemKeyForCellWithIndexPath:(id)indexPath;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(id)description;
@end

@interface PSTCollectionViewLayoutAttributes : NSObject <NSCopying> {
	struct {
		unsigned keyAlgorithm : 1;
		unsigned keySize : 1;
		unsigned createdTime : 1;
	} _layoutFlags;
	BOOL filler[20];
	BOOL _hidden;
	float _alpha;
	int _zIndex;
	NSIndexPath* _indexPath;
	unsigned _elementCategory;
	NSString* _elementKind;
	CGPoint _center;
	CGSize _size;
	CGRect _frame;
	CATransform3D _transform3D;
}
@property(copy, nonatomic) NSString* elementKind;
@property(assign, nonatomic) unsigned elementCategory;
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(assign, nonatomic, getter=isHidden) BOOL hidden;
@property(assign, nonatomic) int zIndex;
@property(assign, nonatomic) float alpha;
@property(assign, nonatomic) CATransform3D transform3D;
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) CGPoint center;
@property(assign, nonatomic) CGRect frame;
+(id)layoutAttributesForDecorationViewOfKind:(id)kind withIndexPath:(id)indexPath;
+(id)layoutAttributesForSupplementaryViewOfKind:(id)kind withIndexPath:(id)indexPath;
+(id)layoutAttributesForCellWithIndexPath:(id)indexPath;
-(void).cxx_destruct;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(id)copyWithZone:(NSZone*)zone;
-(void)updateFrame;
-(BOOL)isCell;
-(BOOL)isSupplementaryView;
-(BOOL)isDecorationView;
-(id)representedElementKind;
-(unsigned)representedElementCategory;
-(id)description;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(id)init;
@end

@interface PSTCollectionViewLayout : NSObject <NSCoding> {
	PSTCollectionView* _collectionView;
	CGSize _collectionViewBoundsSize;
	NSMutableDictionary* _initialAnimationLayoutAttributesDict;
	NSMutableDictionary* _finalAnimationLayoutAttributesDict;
	NSMutableIndexSet* _deletedSectionsSet;
	NSMutableIndexSet* _insertedSectionsSet;
	NSMutableDictionary* _decorationViewClassDict;
	NSMutableDictionary* _decorationViewNibDict;
	NSMutableDictionary* _decorationViewExternalObjectsTables;
	BOOL filler[200];
}
@property(readonly, copy, nonatomic) NSDictionary* decorationViewExternalObjectsTables;
@property(readonly, copy, nonatomic) NSDictionary* decorationViewNibDict;
@property(readonly, copy, nonatomic) NSDictionary* decorationViewClassDict;
@property(assign, nonatomic) PSTCollectionView* collectionView;
+(Class)layoutAttributesClass;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)setCollectionViewBoundsSize:(CGSize)size;
-(void)registerNib:(id)nib forDecorationViewOfKind:(id)kind;
-(void)registerClass:(Class)aClass forDecorationViewOfKind:(id)kind;
-(void)finalizeCollectionViewUpdates;
-(id)finalLayoutAttributesForDeletedSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)initialLayoutAttributesForInsertedSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)finalLayoutAttributesForDisappearingItemAtIndexPath:(id)indexPath;
-(id)initialLayoutAttributesForAppearingItemAtIndexPath:(id)indexPath;
-(void)prepareForCollectionViewUpdates:(id)collectionViewUpdates;
-(CGSize)collectionViewContentSize;
-(CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)scrollingVelocity;
-(id)layoutAttributesForDecorationViewOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)layoutAttributesForSupplementaryViewOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)layoutAttributesForItemAtIndexPath:(id)indexPath;
-(id)layoutAttributesForElementsInRect:(CGRect)rect;
-(void)prepareLayout;
-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)boundsChange;
-(void)invalidateLayout;
-(void)awakeFromNib;
-(id)init;
@end

@interface PSTCollectionViewUpdateItem : NSObject {
	NSIndexPath* _initialIndexPath;
	NSIndexPath* _finalIndexPath;
	int _updateAction;
	id _gap;
}
@property(readonly, assign, nonatomic) int updateAction;
@property(readonly, assign, nonatomic) NSIndexPath* indexPathAfterUpdate;
@property(readonly, assign, nonatomic) NSIndexPath* indexPathBeforeUpdate;
-(void).cxx_destruct;
-(int)inverseCompareIndexPaths:(id)paths;
-(int)compareIndexPaths:(id)paths;
-(id)indexPath;
-(int)action;
-(id)gap;
-(id)newIndexPath;
-(BOOL)isSectionOperation;
-(void)setGap:(id)gap;
-(void)setNewIndexPath:(id)path;
-(id)description;
-(id)initWithOldIndexPath:(id)oldIndexPath newIndexPath:(id)path;
-(id)initWithAction:(int)action forIndexPath:(id)indexPath;
-(id)initWithInitialIndexPath:(id)initialIndexPath finalIndexPath:(id)path updateAction:(int)action;
@end

@interface PSTGridLayoutInfo : NSObject {
	NSMutableArray* _sections;
	CGRect _visibleBounds;
	CGSize _layoutSize;
	BOOL _isValid;
	BOOL _usesFloatingHeaderFooter;
	BOOL _horizontal;
	BOOL _leftToRight;
	NSDictionary* _rowAlignmentOptions;
	float _dimension;
	CGSize _contentSize;
}
@property(assign, nonatomic) CGSize contentSize;
@property(assign, nonatomic) BOOL leftToRight;
@property(assign, nonatomic) BOOL horizontal;
@property(assign, nonatomic) float dimension;
@property(assign, nonatomic) BOOL usesFloatingHeaderFooter;
@property(retain, nonatomic) NSDictionary* rowAlignmentOptions;
@property(retain, nonatomic) NSArray* sections;
-(void).cxx_destruct;
-(void)invalidate:(BOOL)invalidate;
-(id)addSection;
-(CGRect)frameForItemAtIndexPath:(id)indexPath;
-(id)snapshot;
-(id)description;
-(id)init;
@end

@interface PSTGridLayoutItem : NSObject {
	PSTGridLayoutSection* _section;
	PSTGridLayoutRow* _rowObject;
	CGRect _itemFrame;
}
@property(assign, nonatomic) CGRect itemFrame;
@property(assign, nonatomic) PSTGridLayoutRow* rowObject;
@property(assign, nonatomic) PSTGridLayoutSection* section;
-(id)description;
@end

@interface PSTGridLayoutRow : NSObject {
	NSMutableArray* _items;
	BOOL _isValid;
	int _verticalAlignement;
	int _horizontalAlignement;
	BOOL _complete;
	BOOL _fixedItemSize;
	PSTGridLayoutSection* _section;
	int _index;
	int _itemCount;
	CGSize _rowSize;
	CGRect _rowFrame;
}
@property(assign, nonatomic) int itemCount;
@property(assign, nonatomic) BOOL fixedItemSize;
@property(assign, nonatomic) BOOL complete;
@property(assign, nonatomic) int index;
@property(assign, nonatomic) CGRect rowFrame;
@property(assign, nonatomic) CGSize rowSize;
@property(retain, nonatomic) NSArray* items;
@property(assign, nonatomic) PSTGridLayoutSection* section;
-(void).cxx_destruct;
-(id)copyFromSection:(id)section;
-(id)snapshot;
-(void)addItem:(id)item;
-(id)layoutRowAndGenerateRectArray:(BOOL)array;
-(void)layoutRow;
-(id)itemRects;
-(void)invalidate;
-(id)description;
-(id)init;
@end

@interface PSTGridLayoutSection : NSObject {
	NSMutableArray* _items;
	NSMutableArray* _rows;
	BOOL _isValid;
	BOOL _fixedItemSize;
	BOOL _lastRowIncomplete;
	int _itemsCount;
	float _verticalInterstice;
	float _horizontalInterstice;
	float _headerDimension;
	float _footerDimension;
	PSTGridLayoutInfo* _layoutInfo;
	NSDictionary* _rowAlignmentOptions;
	float _otherMargin;
	float _beginMargin;
	float _endMargin;
	float _actualGap;
	float _lastRowBeginMargin;
	float _lastRowEndMargin;
	float _lastRowActualGap;
	int _itemsByRowCount;
	int _indexOfImcompleteRow;
	CGSize _itemSize;
	UIEdgeInsets _sectionMargins;
	CGRect _frame;
	CGRect _headerFrame;
	CGRect _footerFrame;
}
@property(assign, nonatomic) int indexOfImcompleteRow;
@property(assign, nonatomic) int itemsByRowCount;
@property(assign, nonatomic) BOOL lastRowIncomplete;
@property(assign, nonatomic) float lastRowActualGap;
@property(assign, nonatomic) float lastRowEndMargin;
@property(assign, nonatomic) float lastRowBeginMargin;
@property(assign, nonatomic) float actualGap;
@property(assign, nonatomic) float endMargin;
@property(assign, nonatomic) float beginMargin;
@property(assign, nonatomic) float otherMargin;
@property(retain, nonatomic) NSDictionary* rowAlignmentOptions;
@property(assign, nonatomic) PSTGridLayoutInfo* layoutInfo;
@property(assign, nonatomic) float footerDimension;
@property(assign, nonatomic) float headerDimension;
@property(assign, nonatomic) CGRect footerFrame;
@property(assign, nonatomic) CGRect headerFrame;
@property(assign, nonatomic) CGRect frame;
@property(assign, nonatomic) UIEdgeInsets sectionMargins;
@property(assign, nonatomic) float horizontalInterstice;
@property(assign, nonatomic) float verticalInterstice;
@property(assign, nonatomic) int itemsCount;
@property(assign, nonatomic) CGSize itemSize;
@property(assign, nonatomic) BOOL fixedItemSize;
@property(retain, nonatomic) NSArray* rows;
@property(retain, nonatomic) NSArray* items;
-(void).cxx_destruct;
-(id)snapshot;
-(id)addRow;
-(id)addItem;
-(void)recomputeFromIndex:(int)index;
-(void)computeLayout;
-(void)invalidate;
-(id)description;
-(id)init;
@end

@interface PodsDummy_Pods_PSTCollectionView : NSObject {
}
@end

@interface PodsDummy_Pods_Reachability : NSObject {
}
@end

@interface Reachability : NSObject {
	NSString* key_;
	SCNetworkReachabilityRef reachabilityRef;
}
@property(copy) NSString* key;
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)makeAddressKey:(unsigned)key;
+(id)reachabilityWithHostName:(id)hostName;
+(BOOL)accessInstanceVariablesDirectly;
-(unsigned)reachabilityFlags;
-(BOOL)isReachableViaWiFi;
-(BOOL)isReachableViaWWAN;
-(BOOL)isInterventionRequired;
-(BOOL)isConnectionOnDemand;
-(BOOL)connectionRequired;
-(BOOL)isConnectionRequired;
-(BOOL)isReachable;
-(unsigned)currentReachabilityStatus;
-(unsigned)networkStatusForFlags:(unsigned)flags;
-(BOOL)isEqual:(id)equal;
-(void)stopNotifier;
-(BOOL)startNotifier;
-(id)initWithReachabilityRef:(SCNetworkReachabilityRef)reachabilityRef;
-(void)dealloc;
@end

@interface PodsDummy_Pods_SSZipArchive : NSObject {
}
@end

@interface SSZipArchive : NSObject {
	NSString* _path;
	NSString* _filename;
	void* _zip;
}
+(id)_dateWithMSDOSFormat:(unsigned long)msdosformat;
+(BOOL)createZipFileAtPath:(id)path withContentsOfDirectory:(id)directory;
+(BOOL)createZipFileAtPath:(id)path withFilesAtPaths:(id)paths;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination overwrite:(BOOL)overwrite password:(id)password error:(id*)error delegate:(id)delegate;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination delegate:(id)delegate;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination overwrite:(BOOL)overwrite password:(id)password error:(id*)error;
+(BOOL)unzipFileAtPath:(id)path toDestination:(id)destination;
-(BOOL)close;
-(BOOL)writeData:(id)data filename:(id)filename;
-(BOOL)writeFileAtPath:(id)path withFileName:(id)fileName;
-(BOOL)writeFile:(id)file;
-(void)zipInfo:(XXStruct_z_NMMB*)info setDate:(id)date;
-(BOOL)open;
-(void)dealloc;
-(id)initWithPath:(id)path;
@end

@interface PodsDummy_Pods_ZBarSDK : NSObject {
}
@end

@interface ZBarCVImage : ZBarImage {
	CVBufferRef pixelBuffer;
	void* rgbBuffer;
	NSInvocationOperation* conversion;
}
@property(readonly, assign, nonatomic) void* rgbBuffer;
@property(assign, nonatomic) CVBufferRef pixelBuffer;
-(void)convertCVtoRGB;
-(id)UIImageWithOrientation:(int)orientation;
-(void)waitUntilConverted;
-(void)dealloc;
@end

@interface ZBarCameraSimulator : NSObject <UINavigationControllerDelegate, UIImagePickerControllerDelegate, UIPopoverControllerDelegate> {
	UIViewController* viewController;
	ZBarReaderView* readerView;
	UIImagePickerController* picker;
	UIPopoverController* pickerPopover;
}
@property(assign, nonatomic) ZBarReaderView* readerView;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)takePicture;
-(void)didLongPress:(id)press;
-(void)dealloc;
-(id)initWithViewController:(id)viewController;
@end

@interface ZBarCaptureReader : NSObject {
	AVCaptureVideoDataOutput* captureOutput;
	id<ZBarCaptureDelegate> captureDelegate;
	ZBarImageScanner* scanner;
	CGRect scanCrop;
	CGSize size;
	float framesPerSecond;
	BOOL enableCache;
	dispatch_queue_s* queue;
	ZBarImage* image;
	ZBarCVImage* result;
	unsigned state;
	int framecnt;
	unsigned width;
	unsigned height;
	unsigned long long t_frame;
	unsigned long long t_fps;
	unsigned long long t_scan;
	float dt_frame;
}
@property(assign, nonatomic) BOOL enableCache;
@property(readonly, assign, nonatomic) float framesPerSecond;
@property(assign, nonatomic) BOOL enableReader;
@property(readonly, assign, nonatomic) CGSize size;
@property(assign, nonatomic) CGRect scanCrop;
@property(readonly, assign, nonatomic) ZBarImageScanner* scanner;
@property(assign, nonatomic) id<ZBarCaptureDelegate> captureDelegate;
@property(readonly, assign, nonatomic) AVCaptureOutput* captureOutput;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)updateSize:(CFDictionaryRef)size;
-(void)setSize:(CGSize)size;
-(void)updateFPS:(id)fps;
-(void)setFramesPerSecond:(float)second;
-(void)didReadNewSymbolsFromImage:(id)image;
-(void)didTrackSymbols:(id)symbols;
-(void)cropUpdate;
-(void)captureFrame;
-(void)flushCache;
-(void)willStopRunning;
-(void)willStartRunning;
-(void)dealloc;
-(id)init;
-(id)initWithImageScanner:(id)imageScanner;
-(void)initResult;
@end

@interface ZBarHelpController : UIViewController <UIWebViewDelegate, UIAlertViewDelegate> {
	NSString* reason;
	id delegate;
	UIWebView* webView;
	UIToolbar* toolbar;
	UIBarButtonItem* doneBtn;
	UIBarButtonItem* backBtn;
	UIBarButtonItem* space;
	NSURL* linkURL;
	unsigned orientations;
}
@property(assign, nonatomic) id<ZBarHelpDelegate> delegate;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webViewDidFinishLoad:(id)webView;
-(void)dismiss;
-(void)setInterfaceOrientation:(int)orientation supported:(BOOL)supported;
-(BOOL)isInterfaceOrientationSupported:(int)supported;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(void)cleanup;
-(id)init;
-(id)initWithReason:(id)reason;
@end

@interface ZBarImage : NSObject {
	zbar_image_s* zimg;
	double t_convert;
}
@property(readonly, assign, nonatomic) UIImage* UIImage;
@property(readonly, assign, nonatomic) zbar_image_s* zbarImage;
@property(copy, nonatomic) ZBarSymbolSet* symbols;
@property(readonly, assign, nonatomic) unsigned long dataLength;
@property(readonly, assign, nonatomic) const void* data;
@property(assign, nonatomic) CGRect crop;
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) unsigned sequence;
@property(assign, nonatomic) unsigned long format;
+(unsigned long)fourcc:(id)fourcc;
-(void)cleanup;
-(id)UIImageWithOrientation:(int)orientation;
-(void)setData:(const void*)data withLength:(unsigned long)length;
-(zbar_image_s*)image;
-(id)initWithCGImage:(CGImageRef)cgimage;
-(id)initWithCGImage:(CGImageRef)cgimage size:(CGSize)size;
-(id)initWithCGImage:(CGImageRef)cgimage crop:(CGRect)crop size:(CGSize)size;
-(void)dealloc;
-(id)init;
-(id)initWithImage:(zbar_image_s*)image;
@end

@interface ZBarImageScanner : NSObject {
	zbar_image_scanner_s* scanner;
}
@property(readonly, assign, nonatomic) ZBarSymbolSet* results;
@property(assign, nonatomic) BOOL enableCache;
-(int)scanImage:(id)image;
-(void)setSymbology:(int)symbology config:(int)config to:(int)to;
-(void)parseConfig:(id)config;
-(void)dealloc;
-(id)init;
@end

@interface ZBarReaderController : UIImagePickerController <UINavigationControllerDelegate, UIImagePickerControllerDelegate> {
	ZBarImageScanner* scanner;
	ZBarHelpController* help;
	UIView* overlay;
	UIView* boxView;
	CALayer* boxLayer;
	UIToolbar* toolbar;
	UIBarButtonItem* cancelBtn;
	UIBarButtonItem* scanBtn;
	UIBarButtonItem* space[3];
	UIButton* infoBtn;
	id<ZBarReaderDelegate> readerDelegate;
	BOOL showsZBarControls;
	BOOL showsHelpOnFail;
	BOOL takesPicture;
	BOOL enableCache;
	int cameraMode;
	CGRect scanCrop;
	int maxScanDimension;
	BOOL hasOverlay;
	BOOL sampling;
	unsigned long long t_frame;
	double dt_frame;
	ZBarSymbol* symbol;
	BOOL tracksSymbols;
}
@property(assign, nonatomic) int maxScanDimension;
@property(assign, nonatomic) CGRect scanCrop;
@property(assign, nonatomic) BOOL enableCache;
@property(assign, nonatomic) BOOL takesPicture;
@property(assign, nonatomic) BOOL tracksSymbols;
@property(assign, nonatomic) int cameraMode;
@property(assign, nonatomic) BOOL showsHelpOnFail;
@property(assign, nonatomic) BOOL showsZBarControls;
@property(assign, nonatomic) id<ZBarReaderDelegate> readerDelegate;
@property(readonly, assign, nonatomic) ZBarImageScanner* scanner;
-(id)scanImage:(CGImageRef)image;
-(void)helpControllerDidFinish:(id)helpController;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)info;
-(void)showHelpWithReason:(id)reason;
-(void)scanSequence:(id)sequence;
-(void)updateBox:(id)box imageSize:(CGSize)size;
-(id)extractBestResult:(BOOL)result;
-(int)scanImage:(CGImageRef)image withScaling:(float)scaling;
-(void)setDelegate:(id)delegate;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)initScanning;
-(void)reenable;
-(void)cancel;
-(void)scan;
-(void)dealloc;
-(void)viewDidUnload;
-(void)cleanup;
-(void)viewDidLoad;
-(void)initOverlay;
-(id)init;
@end

@interface ZBarReaderView : UIView {
	id<ZBarReaderViewDelegate> readerDelegate;
	ZBarCaptureReader* captureReader;
	CGRect scanCrop;
	CGRect effectiveCrop;
	CGAffineTransform previewTransform;
	float zoom;
	float zoom0;
	float maxZoom;
	UIColor* trackingColor;
	BOOL tracksSymbols;
	BOOL showsFPS;
	int torchMode;
	int interfaceOrientation;
	double animationDuration;
	CALayer* preview;
	CALayer* overlay;
	CALayer* tracking;
	CALayer* cropLayer;
	UIView* fpsView;
	UILabel* fpsLabel;
	UIPinchGestureRecognizer* pinch;
	float imageScale;
	CGSize imageSize;
	BOOL started;
	BOOL running;
	BOOL locked;
}
@property(assign, nonatomic) BOOL enableCache;
@property(readonly, assign, nonatomic) ZBarCaptureReader* captureReader;
@property(readonly, assign, nonatomic) AVCaptureSession* session;
@property(retain, nonatomic) AVCaptureDevice* device;
@property(assign, nonatomic) CGAffineTransform previewTransform;
@property(assign, nonatomic) CGRect scanCrop;
@property(assign, nonatomic) float maxZoom;
@property(assign, nonatomic) float zoom;
@property(assign, nonatomic) BOOL showsFPS;
@property(assign, nonatomic) int torchMode;
@property(assign, nonatomic) BOOL allowsPinchZoom;
@property(retain, nonatomic) UIColor* trackingColor;
@property(assign, nonatomic) BOOL tracksSymbols;
@property(readonly, assign, nonatomic) ZBarImageScanner* scanner;
@property(assign, nonatomic) id<ZBarReaderViewDelegate> readerDelegate;
+(id)alloc;
-(void)didTrackSymbols:(id)symbols;
-(void)updateTracking:(id)tracking withSymbol:(id)symbol;
-(void)handlePinch;
-(void)flushCache;
-(void)stop;
-(void)start;
-(void)setZoom:(float)zoom animated:(BOOL)animated;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)setImageSize:(CGSize)size;
-(void)layoutSubviews;
-(void)updateCrop;
-(void)resetTracking;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(id)init;
-(id)initWithImageScanner:(id)imageScanner;
-(void)_initWithImageScanner:(id)imageScanner;
-(void)initSubviews;
@end

@interface ZBarReaderViewController : UIViewController {
	ZBarImageScanner* scanner;
	id<ZBarReaderDelegate> readerDelegate;
	ZBarReaderView* readerView;
	UIView* cameraOverlayView;
	CGAffineTransform cameraViewTransform;
	CGRect scanCrop;
	unsigned supportedOrientationsMask;
	int cameraDevice;
	int cameraFlashMode;
	int videoQuality;
	BOOL showsZBarControls;
	BOOL tracksSymbols;
	BOOL enableCache;
	ZBarHelpController* helpController;
	UIView* controls;
	UIView* shutter;
	BOOL didHideStatusBar;
	BOOL rotating;
	ZBarCameraSimulator* cameraSim;
}
@property(assign, nonatomic) int maxScanDimension;
@property(assign, nonatomic) BOOL takesPicture;
@property(assign, nonatomic) int cameraMode;
@property(assign, nonatomic) BOOL showsHelpOnFail;
@property(assign, nonatomic) BOOL showsCameraControls;
@property(assign, nonatomic) BOOL allowsImageEditing;
@property(assign, nonatomic) BOOL allowsEditing;
@property(assign, nonatomic) int sourceType;
@property(assign, nonatomic) BOOL enableCache;
@property(readonly, assign, nonatomic) ZBarReaderView* readerView;
@property(assign, nonatomic) int videoQuality;
@property(assign, nonatomic) int cameraCaptureMode;
@property(assign, nonatomic) int cameraFlashMode;
@property(assign, nonatomic) int cameraDevice;
@property(assign, nonatomic) CGAffineTransform cameraViewTransform;
@property(retain, nonatomic) UIView* cameraOverlayView;
@property(assign, nonatomic) CGRect scanCrop;
@property(assign, nonatomic) unsigned supportedOrientationsMask;
@property(assign, nonatomic) BOOL tracksSymbols;
@property(assign, nonatomic) BOOL showsZBarControls;
@property(assign, nonatomic) id<ZBarReaderDelegate> readerDelegate;
@property(readonly, assign, nonatomic) ZBarImageScanner* scanner;
+(id)availableCaptureModesForCameraDevice:(int)cameraDevice;
+(BOOL)isFlashAvailableForCameraDevice:(int)cameraDevice;
+(BOOL)isCameraDeviceAvailable:(int)available;
+(BOOL)isSourceTypeAvailable:(int)available;
-(void)readerViewDidStart:(id)readerView;
-(void)readerView:(id)view didReadSymbols:(id)symbols fromImage:(id)image;
-(void)removeHelp:(id)help done:(id)done context:(void*)context;
-(void)helpControllerDidFinish:(id)helpController;
-(void)takePicture;
-(void)showHelpWithReason:(id)reason;
-(void)info;
-(void)cancel;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)dismissModalViewControllerAnimated:(BOOL)animated;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)initVideoQuality;
-(void)initControls;
-(void)dealloc;
-(void)cleanup;
-(id)initWithCoder:(id)coder;
-(id)init;
-(void)_init;
@end

@interface ZBarReaderViewImpl : ZBarReaderView {
	AVCaptureSession* session;
	AVCaptureDevice* device;
	AVCaptureInput* input;
}
-(id)session;
-(id)device;
-(void)captureReader:(id)reader didReadNewSymbolsFromImage:(id)image;
-(void)captureReader:(id)reader didTrackSymbols:(id)symbols;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)onVideoError:(id)error;
-(void)onVideoStop:(id)stop;
-(void)onVideoStart:(id)start;
-(void)lockDevice;
-(void)configureDevice;
-(void)flushCache;
-(void)stop;
-(void)start;
-(void)setShowsFPS:(BOOL)fps;
-(void)setTorchMode:(int)mode;
-(void)setEnableCache:(BOOL)cache;
-(BOOL)enableCache;
-(void)setDevice:(id)device;
-(id)scanner;
-(void)updateCrop;
-(void)dealloc;
-(void)initSubviews;
-(void)_initWithImageScanner:(id)imageScanner;
@end

@interface ZBarSymbol : NSObject {
	const zbar_symbol_s* symbol;
}
@property(readonly, assign, nonatomic) CGRect bounds;
@property(readonly, assign, nonatomic) const zbar_symbol_s* zbarSymbol;
@property(readonly, assign, nonatomic) ZBarSymbolSet* components;
@property(readonly, assign, nonatomic) int orientation;
@property(readonly, assign, nonatomic) int count;
@property(readonly, assign, nonatomic) int quality;
@property(readonly, assign, nonatomic) NSString* data;
@property(readonly, assign, nonatomic) unsigned modifierMask;
@property(readonly, assign, nonatomic) unsigned configMask;
@property(readonly, assign, nonatomic) NSString* typeName;
@property(readonly, assign, nonatomic) int type;
+(id)nameForType:(int)type;
-(void)dealloc;
-(id)initWithSymbol:(const zbar_symbol_s*)symbol;
@end

@interface ZBarSymbolSet : NSObject <NSFastEnumeration> {
	const zbar_symbol_set_s* set;
	BOOL filterSymbols;
}
@property(assign, nonatomic) BOOL filterSymbols;
@property(readonly, assign, nonatomic) const zbar_symbol_set_s* zbarSymbolSet;
@property(readonly, assign, nonatomic) int count;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(void)dealloc;
-(id)initWithSymbolSet:(const zbar_symbol_set_s*)symbolSet;
@end

@interface PodsDummy_Pods_libextobjc : NSObject {
}
@end

@interface NLApngObject : NSObject {
	IImage* _imageAnimation;
}
@property(readonly, assign, nonatomic) int repeatCount;
@property(readonly, assign, nonatomic) int totalDuration;
@property(readonly, assign, nonatomic) int imageCount;
@property(readonly, assign, nonatomic) int height;
@property(readonly, assign, nonatomic) int width;
@property(readonly, assign, nonatomic) int bytePerPixel;
+(id)decodeAPNG:(id)apng cancelVar:(bool*)var;
+(id)decodeAPNG:(id)apng;
-(void)dealloc;
-(void*)frameData:(int)data;
-(void)setDuration:(int)duration atIndex:(int)index;
-(int)duration:(int)duration;
-(id)initWithImageAnimation:(IImage*)imageAnimation;
@end

@interface PodsDummy_Pods_line_ios_apng : NSObject {
}
@end

__attribute__((visibility("hidden")))
@interface LEGYWarmupper : NSObject {
	LEGYManager* _legyManager;
	LEGYConnectionInfoAcquisitor* _acquisitor;
	id _requestBlock;
	dispatch_queue_s* _turboModeQueue;
	BOOL _turboMode;
	unsigned _turboModeType;
	unsigned _turboModeByteCountForDCH;
	BOOL _turboModeResumed;
	dispatch_source_s* _turboModeTimer;
	unsigned long long _turboModeInterval;
	unsigned _turboModeIterations;
	double _turboModeStartWarmupPingInterval;
	double _turboModeLastTypingInterval;
	BOOL _isSendTyping;
	NSString* _toMid;
}
-(void).cxx_destruct;
-(void)barrier_turboModePing;
-(void)barrier_resumeTurboMode;
-(void)resumeTurboMode;
-(void)barrier_suspendTurboMode;
-(void)suspendTurboMode;
-(void)setTurboModeSettingsFromConnectionInfoWithDefaultInterval:(unsigned long long)defaultInterval;
-(void)setTurboModeInterval:(unsigned long long)interval;
-(void)barrier_setTurboMode:(BOOL)mode turboType:(unsigned)type toMid:(id)mid;
-(void)setTurboMode:(BOOL)mode turboType:(unsigned)type toMid:(id)mid;
-(void)legy_settingsChanged:(id)changed;
-(void)shutDown;
-(void)setupTurboMode:(id)mode request:(id)request;
-(id)initWithManager:(id)manager;
@end

__attribute__((visibility("hidden")))
@interface LEGYSPDYSession : LEGYProtocol <LEGYConnectionDelegate> {
	id _sharedStream;
	unsigned _minWriteSize;
	spdylay_session* _session;
	unsigned _maxRequestCount;
	NSMutableArray* _requestOverflow;
}
-(void).cxx_destruct;
-(void)connection:(id)connection readyToWrite:(id)write;
-(void)connection:(id)connection readyToRead:(id)read;
-(void)connection:(id)connection hasDisconnectedWithError:(id)error;
-(void)connectionHasConnected:(id)connected;
-(void)receivedResponse:(id)response withError:(id)error;
-(void)receivedResponseHeader:(id)header forRequest:(id)request;
-(void)sentRequest:(id)request;
-(unsigned)_ping:(unsigned)ping;
-(void)warmupWithByteCount:(unsigned)byteCount;
-(unsigned)ping;
-(id)yieldUnsentRequests;
-(void)cancelAllRequests;
-(BOOL)_resetStream:(id)stream;
-(void)cancelRequest:(id)request;
-(void)_queueRequest:(id)request;
-(void)sendRequests:(id)requests;
-(void)sendRequest:(id)request;
-(void)performHandshake;
-(void)_disconnectIfAppropriate;
-(void)disconnectWithGracePeriod:(double)gracePeriod;
-(void)dealloc;
-(id)initWithConnection:(id)connection;
@end

__attribute__((visibility("hidden")))
@interface LEGYConnection : NSObject <NSStreamDelegate, LEGYConnectionDelegate> {
	id<LEGYConnectionDelegate> _connectionDelegate;
	LEGYOrigin* _origin;
	LEGYContext* _context;
	unsigned _state;
	unsigned _networkInterfaces;
	NSInputStream* _inputStream;
	NSOutputStream* _outputStream;
	LEGYOutputStream* _bufferOutputStream;
	unsigned _bufferOffset;
	BOOL _registeredEndTransactionObserver;
	BOOL _encryptionInitialized;
	NSData* _encryptionKey;
}
@property(copy, nonatomic) NSData* encryptionKey;
@property(assign, nonatomic) BOOL encryptionInitialized;
@property(readonly, assign, nonatomic) unsigned networkInterfaces;
@property(readonly, assign, nonatomic) unsigned state;
@property(readonly, assign, nonatomic) LEGYContext* context;
@property(readonly, assign, nonatomic) LEGYOrigin* origin;
@property(assign, nonatomic) id<LEGYConnectionDelegate> connectionDelegate;
+(void)initialize;
-(void).cxx_destruct;
-(void)connection:(id)connection readyToWrite:(id)write;
-(void)connection:(id)connection readyToRead:(id)read;
-(void)connection:(id)connection hasDisconnectedWithError:(id)error;
-(void)connectionHasConnected:(id)connected;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)_writeToStream;
-(void)_fillBuffer;
-(void)askForDataToSend;
-(unsigned)outputStreamBufferRemainder;
-(void)_disconnectWithError:(id)error;
-(void)disconnect;
-(void)connect;
-(void)dealloc;
-(id)initWithOrigin:(id)origin context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LEGYOrigin : NSObject {
	NSString* _host;
	unsigned long _port;
	unsigned _transportSecurity;
	unsigned _transport;
	unsigned _requestProtocolType;
}
@property(readonly, assign, nonatomic) BOOL supportsSSL;
@property(readonly, assign, nonatomic) NSURL* URL;
@property(readonly, assign, nonatomic) unsigned requestProtocolType;
@property(readonly, assign, nonatomic) unsigned transport;
@property(readonly, assign, nonatomic) unsigned transportSecurity;
@property(readonly, assign, nonatomic) unsigned long port;
@property(readonly, assign, nonatomic) NSString* host;
-(void).cxx_destruct;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)initWithOrigin:(id)origin requestProtocol:(unsigned)protocol;
-(id)initWithHost:(id)host port:(unsigned long)port transport:(unsigned)transport transportSecurity:(unsigned)security requestProtocol:(unsigned)protocol;
@end

__attribute__((visibility("hidden")))
@interface LEGYSession : NSObject <LEGYProtocolProviderDelegate, LEGYProtocolDelegate> {
	LEGYProtocolProvider* _protocolProvider;
	unsigned _behavior;
	id<LEGYProtocolProviderDelegate> _delegate;
	id _connectionTimeoutTimer;
	NSDate* _connectionTimeoutTimerFireDate;
	NSMutableArray* _requestsSending;
	NSMutableArray* _requestsPending;
	NSMutableDictionary* _headerFields;
	LEGYSessionStatusNotifier* _sessionStatusNotifier;
	double _resendTimeLimit;
	unsigned long long _resendWithinTimeLimitRequestStart;
	unsigned _resendWithinTimeLimitRequestCount;
	id _estabilished;
}
@property(readonly, assign, nonatomic) LEGYSessionStatusNotifier* sessionStatusNotifier;
@property(assign, nonatomic) double resendTimeLimit;
@property(copy, nonatomic) id estabilished;
@property(readonly, assign, nonatomic) LEGYProtocolProvider* protocolProvider;
@property(assign, nonatomic) id<LEGYProtocolProviderDelegate> delegate;
-(void).cxx_destruct;
-(void)legy_hideNetworkActivityIndicatorForRequest:(id)request;
-(void)legy_showNetworkActivityIndicatorForRequest:(id)request;
-(void)_connectionTimedOut;
-(void)_startIfNotStartedConnectionTimeout:(double)timeout;
-(void)protocol:(id)protocol didReceiveResponse:(id)response;
-(void)protocol:(id)protocol didSendRequest:(id)request;
-(void)protocol:(id)protocol didReceiveSessionKey:(id)key;
-(void)protocolHandshakeReciprocated:(id)reciprocated;
-(void)protocolUnusable:(id)unusable;
-(void)protocolGracefullyDisconnecting:(id)disconnecting;
-(void)protocol:(id)protocol usableWithTypes:(unsigned)types;
-(void)protocolProviderExhaustedConnectionsForRequestTypes:(unsigned)requestTypes;
-(void)protocolProviderDidGoOffline;
-(void)protocolProviderWillGoOffline:(id)protocolProvider;
-(void)protocolProviderDidComeOnline;
-(void)cancelAllRequests;
-(void)legy_cleanupRequest:(id)request withError:(id)error forReuse:(BOOL)reuse keepResumed:(BOOL)resumed;
-(void)legy_endPendingRequest:(id)request withStatusCode:(unsigned)statusCode;
-(void)cancelRequest:(id)request;
-(void)queueRequests:(id)requests;
-(void)queueRequest:(id)request;
-(void)_resetResendStartTimeAsNecessary;
-(void)_setResendStartTimeAsNecessary;
-(void)removeHeaderFieldForKey:(id)key;
-(void)addHeaderFieldsFromDictionary:(id)dictionary;
-(id)initWithProtocolProvider:(id)protocolProvider behavior:(unsigned)behavior;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LEGYContext : NSObject {
	NSObject<OS_dispatch_queue>* _queue;
	NSThread* _thread;
	id _showNetworkActivityIndicatorBlock;
	id _hideNetworkActivityIndicatorBlock;
	unsigned _transactionCount;
	NSMutableArray* _transactionEndObservers;
	LEGYReachability* _reachability;
	LEGYConfig* _config;
	LEGYUserBehaviorLogger* _userBehaviorLog;
}
@property(readonly, assign, nonatomic) unsigned availableNetworkInterfaces;
@property(readonly, assign, nonatomic) LEGYReachability* reachability;
@property(copy, nonatomic) id hideNetworkActivityIndicatorBlock;
@property(copy, nonatomic) id showNetworkActivityIndicatorBlock;
@property(readonly, assign, nonatomic) LEGYUserBehaviorLogger* userBehaviorLog;
@property(readonly, assign, nonatomic) LEGYConfig* config;
@property(readonly, assign, nonatomic, getter=isInContext) BOOL inContext;
-(void).cxx_destruct;
-(BOOL)isInTransaction;
-(void)addOneTimeEndTransactionObserver:(id)observer;
-(void)endTransaction;
-(void)startTransaction;
-(void)cancelTimer:(id)timer;
-(void)rescheduleTimer:(id)timer toFireInTimeIntervalSinceNow:(double)timeIntervalSinceNow;
-(void)_timerFired:(id)fired;
-(id)scheduledTimerWithTimeInterval:(double)timeInterval block:(id)block;
-(void)unscheduleReadStream:(CFReadStreamRef)stream writeStream:(CFWriteStreamRef)stream2;
-(void)scheduleReadStream:(CFReadStreamRef)stream writeStream:(CFWriteStreamRef)stream2;
-(void)performAfterDelay:(double)delay block:(id)block;
-(void)performBlockAndWait:(id)wait;
-(void)performBlock:(id)block;
-(void)dealloc;
-(id)initWithThread:(id)thread configPath:(id)path;
-(id)initWithConfigPath:(id)configPath;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LEGYServerPushManager : NSObject {
	NSMutableDictionary* destinationCallbackMap;
	NSMutableDictionary* pushResponseMap;
}
+(id)instance;
-(void).cxx_destruct;
-(id)getHeaders:(XXStruct_7rsQpC*)headers;
-(void)receiveDataFrame:(const char*)frame length:(unsigned long)length last:(BOOL)last streamId:(int)anId session:(id)session;
-(void)receiveSynStreamFrame:(void*)frame session:(id)session;
-(id)generaePushResponseMapKey:(int)key session:(id)session;
-(void)unRegisterCallback:(unsigned)callback;
-(void)registerCallback:(id)callback destination:(unsigned)destination;
-(id)initObj;
@end

__attribute__((visibility("hidden")))
@interface LEGYRequestResponseHandler : NSObject {
	NSURL* _URL;
	NSDictionary* _headerFields;
	NSData* _data;
	NSInputStream* _dataStream;
	unsigned _options;
	unsigned char _priority;
	id _response;
	unsigned _destination;
	unsigned _state;
	int _streamID;
	id _chunkedResponse;
	NSHTTPURLResponse* _responseMetadata;
	NSData* _responseBody;
	NSData* _encryptedData;
	NSInputStream* _encryptedDataStream;
	BOOL _shouldEncryptDataLater;
	unsigned _readOffset;
	BOOL _useSessionKey;
	BOOL _shouldDeflate;
	z_stream_s* _deflateStream;
	BOOL _isUnidirection;
	BOOL _spdyOnly;
	NSString* _httpMethod;
	NSString* _httpOriginalMethod;
}
@property(assign, nonatomic) BOOL spdyOnly;
@property(readonly, assign, nonatomic) BOOL isUnidirection;
@property(readonly, assign, nonatomic) NSURL* URL;
@property(readonly, assign, nonatomic) unsigned destination;
@property(copy, nonatomic) NSString* httpOriginalMethod;
@property(copy, nonatomic) NSString* httpMethod;
@property(readonly, assign, nonatomic) unsigned state;
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, assign, nonatomic) unsigned char priority;
@property(copy, nonatomic) id chunkedResponse;
+(void)setDeflateSize:(int)size;
+(void)setLegyProtocolVersion:(int)version;
-(void).cxx_destruct;
-(void)_reachedEndOfResponseWithError:(id)error;
-(void)_receivedData:(const char*)data ofLength:(unsigned)length;
-(void)_willReceiveDataOfLength:(unsigned)length expectingMore:(BOOL)more;
-(void)_receivedResponse:(id)response;
-(void)resetForReuse;
-(unsigned long)deflate:(char*)deflate destBufLength:(unsigned long)length srcBuf:(char*)buf srcBufLength:(unsigned long)length4 finished:(BOOL)finished;
-(BOOL)isUnidirection:(id)unidirection;
-(void)setEncryptedData:(id)data;
-(void)appendHeaderField:(id)field;
-(id)getDataAll;
-(BOOL)shouldDeflate;
-(BOOL)hasBody;
-(unsigned char)originalPriority;
-(void)dealloc;
-(id)initWithURL:(id)url httpMethod:(id)method headerFields:(id)fields requestBodyBlock:(id)block destination:(unsigned)destination options:(unsigned)options response:(id)response;
-(id)initWithURL:(id)url httpMethod:(id)method headerFields:(id)fields data:(id)data destination:(unsigned)destination options:(unsigned)options response:(id)response;
-(id)initWithURL:(id)url httpMethod:(id)method headerFields:(id)fields destination:(unsigned)destination options:(unsigned)options response:(id)response;
@end

__attribute__((visibility("hidden")))
@interface LEGYProtocol : NSObject <LEGYConnectionDelegate> {
	NSMutableDictionary* _sessionInfoMap;
	BOOL _headerFieldsCached;
	NSMutableDictionary* _settings;
	LEGYConnection* _connection;
	NSMutableArray* _requests;
	BOOL _connectionVerified;
	BOOL _disconnecting;
	id<LEGYConnectionDelegate, LEGYProtocolDelegate> _delegate;
	BOOL _pingDisabled;
	id _pingTimer;
	unsigned _pingIDLastReceived;
	unsigned _pingRetryCount;
	unsigned _pingTries;
	double _pingInterval;
	double _lastCheckEncryptionKeyExpiredTime;
	NSDictionary* _headerFields;
}
@property(assign, nonatomic) double pingInterval;
@property(assign, nonatomic) BOOL pingDisabled;
@property(readonly, assign, nonatomic) BOOL connectionVerified;
@property(readonly, assign, nonatomic) NSDictionary* settings;
@property(retain, nonatomic) NSDictionary* headerFields;
@property(readonly, assign, nonatomic) NSArray* requests;
@property(assign, nonatomic) id<LEGYConnectionDelegate, LEGYProtocolDelegate> delegate;
@property(readonly, assign, nonatomic) LEGYConnection* connection;
@property(readonly, assign, nonatomic) LEGYContext* context;
+(id)newProtocolWithConnection:(id)connection;
-(void).cxx_destruct;
-(void)connection:(id)connection hasDisconnectedWithError:(id)error;
-(void)connection:(id)connection readyToWrite:(id)write;
-(void)connection:(id)connection readyToRead:(id)read;
-(void)connectionHasConnected:(id)connected;
-(void)legy_settingsChanged;
-(void)receivedResponse:(id)response withError:(id)error;
-(void)receivedResponseHeader:(id)header forRequest:(id)request;
-(void)sentRequest:(id)request;
-(id)yieldUnsentRequests;
-(void)cancelAllRequests;
-(void)cancelRequest:(id)request;
-(void)sendRequests:(id)requests;
-(void)sendRequest:(id)request;
-(void)checkEncryptionExpired;
-(void)warmupWithByteCount:(unsigned)byteCount;
-(void)pingAcknowledgedWithID:(unsigned)anId;
-(void)_ping;
-(unsigned)ping;
-(void)resetPingTryCount;
-(void)resetPingTimer;
-(void)setPingRetryCount:(int)count;
-(void)markConnectionAsVerified;
-(void)performHandshake;
-(void)disconnect;
-(void)disconnectWithGracePeriod:(double)gracePeriod;
-(void)dealloc;
-(id)initWithConnection:(id)connection;
@end

__attribute__((visibility("hidden")))
@interface _LEGYRunLoopThread : NSThread {
}
-(void)legy_cancel;
-(void)cancel;
-(void)main;
@end

__attribute__((visibility("hidden")))
@interface LEGYOperationRevisionManager : NSObject {
	long long _aggregateOprevision;
	long long _processOprevision;
	id _saveRevisionBlock;
	NSObject* _syncAggregation;
	NSObject* _syncProcess;
}
+(id)instance;
-(void).cxx_destruct;
-(long long)processOpRevision;
-(void)setProcessOpRevision:(long long)revision;
-(long long)aggregateOpRevision;
-(void)setAggregateOpRevision:(long long)revision;
-(void)setSaveRevisionBlock:(id)block;
-(void)initOpRevision:(long long)revision;
-(id)initSync;
@end

__attribute__((visibility("hidden")))
@interface LEGYPushResponse : NSObject {
	XXStruct_7rsQpC* _stream;
	NSHTTPURLResponse* _httpResponse;
	NSMutableData* _data;
	NSString* _destinationString;
}
@property(readonly, assign, nonatomic) NSString* destinationString;
+(id)instance:(XXStruct_7rsQpC*)instance destinationMap:(id)map;
-(void).cxx_destruct;
-(id)httpResponse:(XXStruct_7rsQpC*)response;
-(id)httpResponse;
-(id)data:(id)data;
-(void)append:(const char*)append length:(unsigned long)length;
-(id)initWithSynStream:(XXStruct_7rsQpC*)synStream destinationMap:(id)map;
@end

__attribute__((visibility("hidden")))
@interface LEGYSettings : NSObject {
	BOOL _typingEnable;
	BOOL _typingVisible;
	int _typingIntervalMultiply;
	long _encryptionRekeyingInterval;
	long _dnsLookupInterval;
}
@property(readonly, assign, nonatomic) long dnsLookupInterval;
@property(readonly, assign, nonatomic) long encryptionRekeyingInterval;
@property(readonly, assign, nonatomic) BOOL typingVisible;
@property(readonly, assign, nonatomic) int typingIntervalMultiply;
@property(readonly, assign, nonatomic) BOOL typingEnable;
+(id)instance;
-(void)setSettings:(id)settings;
@end

__attribute__((visibility("hidden")))
@interface LEGYSessionStatusNotifier : NSObject {
	NSMutableArray* sessionStatusNotifierCallbackList;
	NSMutableArray* connectionList;
	unsigned _sessionStatus;
}
@property(readonly, assign, nonatomic) unsigned sessionStatus;
-(void).cxx_destruct;
-(void)notifyStatusSessionChanged:(unsigned)changed oldSessionStatus:(unsigned)status;
-(void)setSessionStatusChanged:(id)changed newSessionStatus:(unsigned)status;
-(void)removeSessionStatusNotifierCallback:(id)callback;
-(void)addSessionStatusNotifierCallback:(id)callback;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LEGYWifiNetworkChecker : NSObject {
	LEGYContext* context;
	id zombieWifiCheckCallback;
	double lastCheckTime;
	BOOL checkCallbackRunning;
	NSURLConnection* connection;
}
-(void).cxx_destruct;
-(void)checkZombieWifi:(id)wifi;
-(void)detectZombieWifi:(BOOL)wifi;
-(BOOL)canCheck;
-(void)completeZombieWifiCheckCallback;
-(void)updateCheckTime;
-(void)setZombieWifiCheckCallback:(id)callback;
-(id)initWithContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LEGYNotifier : NSObject {
	NSMutableArray* legyNotifierCallbackList;
}
-(void).cxx_destruct;
-(void)notifyChanged:(unsigned)changed withError:(id)error;
-(void)removeLegyNotifierCallback:(id)callback;
-(void)addLegyNotifierCallback:(id)callback;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LEGYHTTPProtocol : LEGYProtocol {
	LEGYRequestResponseHandler* _currentRequest;
	NSMutableData* _requestBuffer;
	unsigned _requestBufferOffset;
	NSMutableData* _responseBuffer;
	unsigned _responseBufferOffset;
	NSMutableDictionary* _responseHeaders;
	BOOL phttpEnabled;
	BOOL phttpHeaderCacheEnabled;
	int contentLength;
	int chunkedBodyOffset;
	int headerLength;
	BOOL parsingCompleted;
}
-(void).cxx_destruct;
-(void)legy_parseResponse;
-(void)legy_parseXLineHttpHeader;
-(int)legy_parseChunkedBody;
-(int)legy_parseChunkSize:(int)size :(int)arg2;
-(BOOL)legy_parseHeader;
-(void)legy_parseLine:(int)line :(int)arg2 :(int)arg3;
-(id)legy_parseValue:(int)value :(int)arg2;
-(id)legy_parseKey:(int)key :(int)arg2;
-(void)connection:(id)connection hasDisconnectedWithError:(id)error;
-(void)connection:(id)connection readyToWrite:(id)write;
-(void)connection:(id)connection readyToRead:(id)read;
-(void)connectionHasConnected:(id)connected;
-(id)makeRequestHeaderString:(id)string;
-(void)legy_resetResponse;
-(void)legy_startNextRequest;
-(void)receivedResponse:(id)response withError:(id)error;
-(id)yieldUnsentRequests;
-(void)cancelAllRequests;
-(void)cancelRequest:(id)request;
-(void)sendRequests:(id)requests;
-(void)sendRequest:(id)request;
-(void)setPingInterval:(double)interval;
-(void)setPingDisabled:(BOOL)disabled;
-(void)performHandshake;
-(void)disconnectWithGracePeriod:(double)gracePeriod;
-(id)initWithConnection:(id)connection;
@end

__attribute__((visibility("hidden")))
@interface LEGYProtocolProvider : NSObject <LEGYConnectionDelegate, LEGYProtocolDelegate> {
	LEGYContext* _context;
	unsigned _behavior;
	int _negativeResumeCount;
	double _blockingProtocolPrevPingInterval;
	double _pingInterval;
	NSArray* _origins;
	NSMutableSet* _originsConfirmedOverWiFi;
	NSMutableSet* _originsConfirmedOverCellular;
	int _originGroupLevel;
	id _originFallbackTimer;
	NSSet* _originsWiFiSet;
	NSSet* _originsCellularSet;
	NSSet* _originsDisabledSet;
	id _originsDisabledExpireTimer;
	unsigned _pendingConnectionRequestTypes;
	NSMutableArray* _pendingWiFiConnections;
	NSMutableArray* _pendingCellularConnections;
	id<LEGYProtocolProviderDelegate, LEGYProtocolDelegate> _delegate;
	NSMutableArray* _pendingProtocols[3];
	LEGYProtocol* _protocols[3];
	NSMutableArray* _disconnectingProtocols;
	unsigned _onlineMode;
	unsigned main_backgroundTaskID;
	BOOL main_resumedViaApplicationStateChange;
	LEGYWifiNetworkChecker* _wifiNetworkChecker;
}
@property(readonly, assign, nonatomic, getter=isPaused) BOOL paused;
@property(readonly, assign, nonatomic) LEGYWifiNetworkChecker* wifiNetworkChecker;
@property(readonly, assign, nonatomic) LEGYContext* context;
@property(assign, nonatomic) id<LEGYProtocolProviderDelegate, LEGYProtocolDelegate> delegate;
-(void).cxx_destruct;
-(void)protocol:(id)protocol didReceiveResponse:(id)response;
-(void)protocol:(id)protocol didSendRequest:(id)request;
-(void)protocol:(id)protocol didReceiveSessionKey:(id)key;
-(void)protocolHandshakeReciprocated:(id)reciprocated;
-(void)connection:(id)connection readyToWrite:(id)write;
-(void)connection:(id)connection readyToRead:(id)read;
-(void)_checkForRequestTypesThatExhaustedConnections;
-(void)connection:(id)connection hasDisconnectedWithError:(id)error;
-(BOOL)_removeFromPendingConnections:(id)pendingConnections;
-(void)connectionHasConnected:(id)connected;
-(void)_redistributeProtocols;
-(void)setProtocol:(id)protocol forRequestTypes:(unsigned)requestTypes;
-(id)allDisconnectingProtocols;
-(id)allActiveProtocols;
-(id)protocolWithRequest:(id)request;
-(id)protocolWithConnection:(id)connection includingPendingAndDisconnecting:(BOOL)disconnecting types:(unsigned*)types;
-(id)protocolWithConnection:(id)connection types:(unsigned*)types;
-(id)protocolForRequestType:(unsigned)requestType autoconnect:(BOOL)autoconnect;
-(id)protocolForRequestType:(unsigned)requestType;
-(void)_disconnectAllExcept:(id)except withGracePeriod:(double)gracePeriod includingPendingConnections:(BOOL)connections;
-(void)_disconnectPendingConnectionsOnInterfaces:(unsigned)interfaces forRequestTypes:(unsigned)requestTypes;
-(void)_finishGoingOfflineWithGracePeriod:(double)gracePeriod;
-(void)_startGoingOfflineWithGracePeriod:(double)gracePeriod;
-(void)_disconnectProtocol:(id)protocol withGracePeriod:(double)gracePeriod;
-(void)_connectToOrigin:(id)origin addingToList:(id)list;
-(void)_addPendingConnectionsForRequestTypes:(unsigned)requestTypes;
-(void)legy_reachabilityChanged:(unsigned)changed;
-(void)_addPendingConnectionsIfNecessaryForRequestTypes:(unsigned)requestTypes;
-(void)reconnectAll;
-(void)disconnectAll;
-(void)_notifyOfNoLongerRequiredProtocolsSupportingRequestTypes:(unsigned)noLongerRequiredProtocolsSupportingRequestTypes interfaces:(unsigned)interfaces;
-(void)notifyOfNoLongerRequiredProtocolsSupportingRequestTypes:(unsigned)noLongerRequiredProtocolsSupportingRequestTypes;
-(void)notifyOfRequiredProtocolsSupportingRequestTypes:(unsigned)requiredProtocolsSupportingRequestTypes;
-(unsigned)requestTypesConnectingOnAnyOfNetworkInterfaces:(unsigned)networkInterfaces;
-(void)main_pause;
-(void)main_resume;
-(void)main_endBackgroundTask;
-(void)_endBackgroundTask;
-(void)main_beginBackgroundTask;
-(void)_pauseAndGoOffline:(BOOL)offline;
-(void)pause;
-(void)_resumeAndComeOnline:(BOOL)online;
-(void)resume;
-(BOOL)canConnect;
-(BOOL)shouldStayConnected;
-(void)reenableDisabledOrigins;
-(void)disableOriginsWithRequestProtocolTypes:(unsigned)requestProtocolTypes expiringAfter:(double)after;
-(void)_resetOriginFallbackForInterfaces:(unsigned)interfaces;
-(void)_resetOriginFallback;
-(void)_startOriginFallbackTimerForNetworkInterfaces:(unsigned)networkInterfaces;
-(void)_fallbackToNextOriginGroup;
-(void)_setOriginGroupLevel:(int)level forInterfaces:(unsigned)interfaces;
-(void)setOriginGroupLevel:(int)level;
-(void)setOriginGroups:(id)groups;
-(void)clearOriginsConfirmed;
-(void)addOriginConfirmed:(id)confirmed onNetworkInterface:(unsigned)interface;
-(id)originsConfirmedForNetworkInterface:(unsigned)networkInterface;
-(void)dealloc;
-(id)initWithOriginGroups:(id)originGroups behavior:(unsigned)behavior context:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LEGYInputStream : NSInputStream {
	NSData* _data;
	unsigned _dataLength;
	unsigned _offset;
}
-(void).cxx_destruct;
-(void)reset;
-(BOOL)hasBytesAvailable;
-(BOOL)getBuffer:(char**)buffer length:(unsigned*)length;
-(int)read:(char*)read maxLength:(unsigned)length;
-(int)readBuffer:(void*)buffer maxLength:(unsigned)length;
-(int)readShort;
-(void)close;
-(void)open;
-(id)initWithData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface LEGYOutputStream : NSOutputStream {
	NSMutableData* _data;
}
@property(readonly, assign, nonatomic) NSMutableData* data;
-(void).cxx_destruct;
-(BOOL)hasSpaceAvailable;
-(int)write:(const char*)write maxLength:(unsigned)length;
-(void)close;
-(void)open;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface LEGYConfig : NSObject {
	NSDictionary* _removeSessionKeyMap;
	NSDictionary* _destinationAdditionalPathsMap;
	NSDictionary* _spdyChangeHeaderMap;
	NSDictionary* _destinationMap;
}
@property(readonly, assign, nonatomic) NSDictionary* destinationMap;
@property(readonly, assign, nonatomic) NSDictionary* spdyChangeHeaderMap;
@property(readonly, assign, nonatomic) NSDictionary* destinationAdditionalPathsMap;
@property(readonly, assign, nonatomic) NSDictionary* removeSessionKeyMap;
-(void).cxx_destruct;
-(id)initWithConfigFilePath:(id)configFilePath;
@end

__attribute__((visibility("hidden")))
@interface LEGYReachability : NSObject {
	SCNetworkReachabilityRef _hostNameReachability;
	SCNetworkReachabilityRef _internetReachability;
	unsigned _lastHostNameFlags;
	NSObject<OS_dispatch_queue>* _queue;
	CFRunLoopRef _runLoop;
	NSMutableArray* _callbacks;
	NSString* _hostName;
}
@property(readonly, assign, nonatomic) unsigned interfacesHostReachable;
@property(copy, nonatomic) NSString* hostName;
-(void).cxx_destruct;
-(void)removeReachabilityChangeCallback:(void*)callback;
-(void*)addReachabilityChangeCallback:(id)callback;
-(void)unscheduleCallbacksOnRunLoop:(CFRunLoopRef)loop inRunLoopMode:(CFStringRef)runLoopMode;
-(void)scheduleCallbacksOnRunLoop:(CFRunLoopRef)loop inRunLoopMode:(CFStringRef)runLoopMode;
-(void)setDispatchQueueForCallbacks:(id)callbacks;
-(BOOL)checkReachabilityNow;
-(void)setLastHostNameFlags:(unsigned)flags;
-(void)dealloc;
-(void)_releaseHostNameReachability;
-(id)initWithDispatchQueue:(id)dispatchQueue orRunLoop:(CFRunLoopRef)loop;
@end

__attribute__((visibility("hidden")))
@interface LEGYTypes : NSObject {
}
+(unsigned)destinationStringToType:(id)type;
+(id)destinationTypeToString:(unsigned)string;
@end

__attribute__((visibility("hidden")))
@interface LEGYUserBehaviorLogger : NSObject {
	NSObject<LEGYUserBehaviorLoggerExternal>* _external;
}
@property(retain, nonatomic) NSObject<LEGYUserBehaviorLoggerExternal>* external;
-(void).cxx_destruct;
-(void)log:(long long)log param1:(int)a1 value1:(id)a13 param2:(int)a2 value2:(id)a25;
-(void)log:(long long)log param1:(int)a1 value1:(id)a13;
-(void)log:(long long)log;
@end

__attribute__((visibility("hidden")))
@interface LEGYFetchOperationRequestResponseHandler : NSObject <LEGYProtocolProviderDelegate> {
	LEGYManager* _legyManager;
	dispatch_queue_s* _queue;
	int _started;
	unsigned _curState;
	unsigned _nextState;
	LEGYRequestResponseHandler* _fetchOperationRequest;
	long long _lastOpRevision;
	dispatch_source_s* _fetchOperationTimeoutTimer;
	unsigned _fetchOperationRetryCount;
	NSMutableArray* _backgroundFetchCompletionBlocks;
	NSMutableArray* _backgroundFetchCompletionBlockTimeoutTimers;
	NSMutableArray* _backgroundFetchOpRevisions;
	int _backgroundFetchScore;
	unsigned _fetchOperationResponseCount;
	unsigned _flushing;
	dispatch_source_s* _flushTimeoutTimer;
	LEGYRequestResponseHandler* _notifySleepRequest;
	id _suspendLEGYCompletionBlock;
	id _createResponseRequestBlock;
	id _createSleepResponseRequestBlock;
	id _createFlushResponseRequestBlock;
	id _processResponseBlock;
}
@property(readonly, assign, nonatomic, getter=isBackgroundFetchRequest) BOOL backgroundFetchRequest;
@property(readonly, assign, nonatomic) long long lastOpRevision;
@property(readonly, assign, nonatomic) dispatch_queue_s* queue;
+(BOOL)isUseFetchOpQueue;
+(void)setUseFetchOpUse:(BOOL)use;
-(void).cxx_destruct;
-(void)_resetFetchOperationsTimeout;
-(void)legy_settingsChanged:(id)changed;
-(void)protocolProviderDidGoOffline;
-(void)protocol:(id)protocol usableWithTypes:(unsigned)types;
-(void)protocolProviderWillGoOffline:(id)protocolProvider;
-(void)protocolProviderDidComeOnline;
-(void)protocolUnusable:(id)unusable;
-(void)protocolGracefullyDisconnecting:(id)disconnecting;
-(void)protocolProviderExhaustedConnectionsForRequestTypes:(unsigned)requestTypes;
-(void)flushFetchOperations;
-(void)_receivedRemoteNotificationWithOpRevision:(long long)opRevision;
-(void)receivedRemoteNotificationWithOpRevision:(long long)opRevision;
-(void)removeBackgroundFetchRequest:(long long)request;
-(void)setLastOpRevision:(long long)revision;
-(void)setLastOpRevisionAndRefetch:(long long)refetch;
-(void)lastOpRevisionWithCompletionBlock:(id)completionBlock;
-(void)setLastOpRevisionValue:(long long)value;
-(void)_cancelAndRefetchOperations;
-(void)_cancelFetchOperations;
-(void)_callBackgroundFetchCompletionBlocksWithFailed;
-(void)fetchAtLevel:(unsigned)level inBackgroundToRevision:(long long)revision withCompletionHandler:(id)completionHandler;
-(void)_fetchOpsFailedWithErrorDomain:(id)errorDomain errorCode:(int)code;
-(void)_fetchOpsSucceededWithResponse:(id)response httpResponse:(id)response2 error:(id)error;
-(void)_fetchOperations;
-(void)suspend:(id)suspend;
-(void)_notifySleep;
-(void)_resume;
-(void)resume;
-(void)shutDown;
-(void)start;
-(void)_performActionForTransitionToCurState;
-(void)_transitionToNextStateFromExpectedState:(unsigned)expectedState;
-(void)_setNextState:(unsigned)state;
-(void)dealloc;
-(id)initWithManager:(id)manager createResponseRequestBlock:(id)block sleepResponseRequestBlock:(id)block3 flushResponseRequestBlock:(id)block4 processResponseBlock:(id)block5;
@end

__attribute__((visibility("hidden")))
@interface LEGYManager : NSObject <LEGYProtocolProviderDelegate> {
	LEGYContext* _legyContext;
	LEGYSession* _legySession;
	LEGYConnectionInfoAcquisitor* _acquisitor;
	BOOL _registered;
	NSMutableArray* _requestsWaitingForRegistration;
	NSSet* _requestsDirectURLs;
	NSMutableArray* _pushRequestHandlers;
}
@property(readonly, assign, nonatomic) LEGYConnectionInfoAcquisitor* acquisitor;
@property(readonly, assign, nonatomic) LEGYSession* session;
@property(readonly, assign, nonatomic) LEGYContext* context;
-(void).cxx_destruct;
-(void)hasConnectionForRequestType:(unsigned)requestType completionBlock:(id)block;
-(void)protocolProviderDidGoOffline;
-(void)protocolUnusable:(id)unusable;
-(void)protocolGracefullyDisconnecting:(id)disconnecting;
-(void)protocol:(id)protocol usableWithTypes:(unsigned)types;
-(void)protocolProviderExhaustedConnectionsForRequestTypes:(unsigned)requestTypes;
-(void)protocolProviderWillGoOffline:(id)protocolProvider;
-(void)protocolProviderDidComeOnline;
-(int)backgroundFetchScoreForLevel:(unsigned)level;
-(void)removePushRequestHandler:(id)handler;
-(void)addPushRequestHandler:(id)handler;
-(void)setResendTimeLimit:(double)limit;
-(void)updateAutoResendTimeLimit:(BOOL)limit;
-(void)cancelRequest:(id)request;
-(void)resendRequest:(id)request queue:(dispatch_queue_s*)queue;
-(void)sendRequest:(id)request;
-(id)requestWithURL:(id)url httpMethod:(id)method headerFields:(id)fields data:(id)data destination:(unsigned)destination options:(unsigned)options response:(id)response;
-(id)requestWithURL:(id)url httpMethod:(id)method headerFields:(id)fields requestBody:(id)body destination:(unsigned)destination options:(unsigned)options response:(id)response;
-(void)setRegistered:(BOOL)registered headerFields:(id)fields;
-(void)reconnect;
-(void)disconnect;
-(void)shutDown;
-(void)endTransaction;
-(void)startTransaction;
-(void)performInTransaction:(id)transaction;
-(id)tweakedOriginGroups:(id)groups;
-(void)setupRequestDirectURLs:(id)urls;
-(void)setupSession:(id)session;
-(void)setupConnectionInfo:(id)info;
-(void)setupWithBaseURL:(id)baseURL acquisitor:(id)acquisitor;
-(id)initWithContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface LEGYModule : NSObject {
	LEGYManager* _legyManager;
	LEGYNotifier* _legyNotifier;
	LEGYWarmupper* _legyWarmupper;
	NSMutableDictionary* _actionBlocks;
}
+(id)instance;
-(void).cxx_destruct;
-(void)setRegistered:(BOOL)registered headerFields:(id)fields;
-(void)disconnect;
-(void)shutDown;
-(void)endTransaction;
-(void)startTransaction;
-(void)performInTransaction:(id)transaction;
-(void)resendRequest:(id)request queue:(dispatch_queue_s*)queue;
-(void)setResendTimeLimit:(double)limit;
-(void)updateAutoResendTimeLimit:(BOOL)limit;
-(id)warmupper;
-(id)legyNotifier;
-(id)wifiNetworkChecker;
-(id)sessionStatusNotifier;
-(id)_responseErrorWithStatusCode:(int)statusCode httpResponse:(id)response body:(id)body;
-(void)cancelRequest:(id)request;
-(void)sendRequest:(id)request;
-(id)requestPushHandler:(id)handler sleepResponseRequestBlock:(id)block flushResponseRequestBlock:(id)block3 processResponseBlock:(id)block4;
-(id)requestHandlerWithDestination:(unsigned)destination url:(id)url httpMethod:(id)method headerFields:(id)fields data:(id)data options:(unsigned)options queue:(dispatch_queue_s*)queue responseBlock:(id)block responseDataBlock:(id)block9;
-(id)requestWithDestination:(unsigned)destination url:(id)url httpMethod:(id)method headerFields:(id)fields data:(id)data options:(unsigned)options queue:(dispatch_queue_s*)queue responseBlock:(id)block responseDataBlock:(id)block9;
-(id)responseErrorBlock:(unsigned)block;
-(void)setupActionBlockWithDestination:(unsigned)destination responseErrorBlock:(id)block;
-(void)setUpWithManager:(id)manager;
@end

__attribute__((visibility("hidden")))
@interface DNSInfo : NSObject <NSCoding> {
	BOOL _expired;
	NSString* _address;
	double _time;
}
@property(assign, nonatomic) BOOL expired;
@property(assign, nonatomic) double time;
@property(copy, nonatomic) NSString* address;
+(id)create:(id)create;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface LEGYDNSManager : NSObject {
	NSMutableDictionary* _dnsInfoMap;
	dispatch_queue_s* _queue;
}
+(id)addressesForHostname:(id)hostname;
+(id)instance;
-(void).cxx_destruct;
-(void)loadDnsInfo;
-(void)executeFindDnsInfo:(id)info;
-(id)getValidDnsInfo:(id)info;
-(BOOL)isUseOBSDNSLookup;
-(id)URLWithHostAddress:(id)hostAddress;
-(id)get:(id)get;
-(id)initMap;
@end

__attribute__((visibility("hidden")))
@interface LEGYNetworkActivityIndicator : NSObject {
}
+(void)endRequest;
+(void)startRequest;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface LEGYDeviceManager : NSObject {
	NSObject<LEGYDeviceManagerExternal>* _external;
	NSString* countryCode_;
	NSString* carrierInfo_;
}
@property(retain, nonatomic) NSObject<LEGYDeviceManagerExternal>* external;
+(id)create:(id)create;
-(void).cxx_destruct;
-(id)carrierInfoForConnectionInfo;
-(id)countryCodes;
-(id)countryCode;
@end

__attribute__((visibility("hidden")))
@interface LEGYConnectionInfoAcquisitor : NSObject {
	int _revision;
	NSString* host_;
	NSDate* expiredTime_;
	NSString* appVersion_;
	NSMutableArray* _fetchScores;
	NSPredicate* predicateTemplateForSSL_;
	NSMutableArray* legyServers_;
	NSMutableArray* obsServers_;
	NSMutableArray* stickerCDNServers_;
	NSMutableArray* shopCDNServers_;
	NSMutableArray* profileCDNServers_;
	NSMutableArray* obsCDNServers_;
	NSMutableArray* myhomeServers_;
	NSMutableArray* myhomeApiServers_;
	NSMutableArray* timelineServers_;
	NSMutableArray* timelineAuthServers_;
	NSMutableArray* defaultLEGYServers_;
	NSMutableArray* defaultObsServers_;
	NSMutableArray* defaultChannelGWServers_;
	NSMutableArray* defaultStickerCDNServers_;
	NSMutableArray* defaultShopCDNServers_;
	NSMutableArray* defaultProfileCDNServers_;
	NSMutableArray* defaultObsCDNServers_;
	NSMutableArray* defaultMyhomeServers_;
	NSMutableArray* defaultMyhomeApiServers_;
	NSMutableArray* defaultTimelineServers_;
	NSMutableArray* defaultTimelineAuthServers_;
	LEGYDeviceManager* deviceManager_;
	NSObject<LEGYConnectionInfoAcquisitorExternal>* externalAPI_;
	ASIHTTPRequest* _request;
	BOOL _encryptionMode;
	BOOL _encryptionWifiMode;
	BOOL _useSSLFalseStart;
	BOOL _useOBS3GTLS;
	BOOL _voiceButtonSize;
	BOOL _neloEnable;
	id needsReconnectBlock_;
	id failedBlock_;
	id updateInfoBlock_;
	int lastKnownRevision_;
	NSString* userAgent_;
	unsigned _warmupState;
	unsigned _warmupInterval;
	unsigned _autoResendState;
	unsigned _autoResendTimeLimit;
	unsigned _bigPingSize;
	int _legyProtocolVersion;
	int _fetchOpsProtocol;
	unsigned _transferQuality;
	int _transferQualityLowLevel;
	int _transferQualityMediumLevel;
	int _transferQualityHighLevel;
	int _sendButtonDefault;
}
@property(readonly, assign, nonatomic) BOOL neloEnable;
@property(readonly, assign, nonatomic) BOOL voiceButtonSize;
@property(readonly, assign, nonatomic) int sendButtonDefault;
@property(readonly, assign, nonatomic) int transferQualityHighLevel;
@property(readonly, assign, nonatomic) int transferQualityMediumLevel;
@property(readonly, assign, nonatomic) int transferQualityLowLevel;
@property(readonly, assign, nonatomic) unsigned transferQuality;
@property(readonly, assign, nonatomic) BOOL useOBS3GTLS;
@property(readonly, assign, nonatomic) int fetchOpsProtocol;
@property(readonly, assign, nonatomic) int legyProtocolVersion;
@property(readonly, assign, nonatomic) BOOL useSSLFalseStart;
@property(readonly, assign, nonatomic) BOOL encryptionWifiMode;
@property(readonly, assign, nonatomic) BOOL encryptionMode;
@property(readonly, assign, nonatomic) NSString* host;
@property(readonly, assign, nonatomic) NSString* userAgent;
@property(readonly, assign, nonatomic) unsigned bigPingSize;
@property(readonly, assign, nonatomic) unsigned autoResendTimeLimit;
@property(readonly, assign, nonatomic) unsigned autoResendState;
@property(readonly, assign, nonatomic) unsigned warmupInterval;
@property(readonly, assign, nonatomic) unsigned warmupState;
@property(readonly, assign, nonatomic) int lastKnownRevision;
@property(copy, nonatomic) id updateInfoBlock;
@property(copy, nonatomic) id failedBlock;
@property(copy, nonatomic) id needsReconnectBlock;
-(void).cxx_destruct;
-(void)requestToGetHosts;
-(void)requestToGetHostsByLegyClient;
-(id)requestUrl;
-(id)hardwareModelName;
-(void)start;
-(void)setLastSuccessfulHost:(id)host withPort:(unsigned)port sslEnabled:(BOOL)enabled;
-(void)addDefaultTimelineAuthServerWithHost:(id)host port:(unsigned)port supportsSSL:(BOOL)ssl;
-(void)addDefaultTimelineServerWithHost:(id)host port:(unsigned)port supportsSSL:(BOOL)ssl;
-(void)addDefaultMyhomeApiServerWithHost:(id)host port:(unsigned)port supportsSSL:(BOOL)ssl;
-(void)addDefaultMyhomeServerWithHost:(id)host port:(unsigned)port supportsSSL:(BOOL)ssl;
-(void)addDefaultObsCDNServerWithHost:(id)host port:(unsigned)port;
-(void)addDefaultProfileCDNServerWithHost:(id)host port:(unsigned)port;
-(void)addDefaultShopCDNServerWithHost:(id)host port:(unsigned)port supportsSSL:(BOOL)ssl;
-(void)addDefaultStickerCDNServerWithHost:(id)host port:(unsigned)port supportsSSL:(BOOL)ssl;
-(void)addDefaultChannelGWServerWithHost:(id)host port:(unsigned)port supportsSSL:(BOOL)ssl;
-(void)addDefaultOBSServerWithHost:(id)host port:(unsigned)port supportsSSL:(BOOL)ssl;
-(void)addDefaultLEGYServerWithProtocol:(id)protocol host:(id)host port:(unsigned)port transportType:(id)type secureType:(id)type5;
-(id)timelineAuthServersUsingSSL;
-(id)timelineAuthServers;
-(id)timelineServersUsingSSL;
-(id)timelineServers;
-(id)myhomeApiServersUsingSSL;
-(id)myhomeApiServers;
-(id)myhomeServersUsingSSL;
-(id)myhomeServers;
-(id)obsCDNServers;
-(id)profileCDNServers;
-(id)shopCDNServers;
-(id)stickerCDNServers;
-(id)obsServersUsingSSL;
-(id)obsServers;
-(id)LEGYServersGroupedByPriority;
-(int)backgroundFetchScoreForLevel:(unsigned)level;
-(BOOL)destinationConnectIsLegy:(unsigned)legy;
-(id)predicateForSSL:(BOOL)ssl;
-(void)routeWithRequest:(id)request responseCode:(int)code responseHeaders:(id)headers;
-(void)routeWithRequest:(id)request;
-(void)retryWithDelay:(unsigned)delay;
-(void)notifyUpdateInfoEvent;
-(void)notifyFailedEventWithError:(id)error;
-(void)notifyReconnectEvent;
-(unsigned)delaySecondsWithResponse:(id)response;
-(unsigned)delaySecondsWithResponseHeader:(id)responseHeader;
-(void)parseWithResponse:(id)response dateRetrieved:(id)retrieved;
-(BOOL)isValidResponse:(id)response;
-(void)addTimelineAuthServerWithHost:(id)host withSupportsSSL:(BOOL)supportsSSL toServer:(id)server;
-(void)addTimelineServerWithHost:(id)host withSupportsSSL:(BOOL)supportsSSL toServer:(id)server;
-(void)addMyhomeApiServerWithHost:(id)host withSupportsSSL:(BOOL)supportsSSL toServer:(id)server;
-(void)addMyhomeServerWithHost:(id)host withSupportsSSL:(BOOL)supportsSSL toServer:(id)server;
-(void)setUseFetchOpQueue:(BOOL)queue;
-(void)setDeflateSize:(id)size;
-(void)setTransferQuality:(id)quality;
-(void)setFetchOpsProtocol:(id)protocol;
-(void)setLegyProtocolVersion:(id)version;
-(void)setEncryptionWifiMode:(BOOL)mode;
-(void)setEncryptionMode:(BOOL)mode;
-(void)setBigPingSizeFromString:(id)string;
-(void)setAutoResend:(id)resend timeLimit:(id)limit;
-(void)setTypingPingCycle:(id)cycle;
-(void)addObsCDNServerConnectionFromHosts:(id)hosts toServer:(id)server;
-(void)addProfileCDNServerConnectionFromHosts:(id)hosts toServer:(id)server;
-(void)addShopCDNServerConnectionFromHosts:(id)hosts withSupportsSSL:(BOOL)supportsSSL toServer:(id)server;
-(void)addStickerCDNServerConnectionFromHosts:(id)hosts withSupportsSSL:(BOOL)supportsSSL toServer:(id)server;
-(void)addChannelGWConnectionFromHosts:(id)hosts withSupportsSSL:(BOOL)supportsSSL toServer:(id)server;
-(void)addObsConnectionFromHosts:(id)hosts withSupportsSSL:(BOOL)supportsSSL toServer:(id)server;
-(void)addLEGYConnectionFromHosts:(id)hosts withTransportType:(id)transportType toServer:(id)server;
-(id)legyOriginWithProtocol:(id)protocol host:(id)host port:(unsigned)port supportsSSL:(BOOL)ssl;
-(unsigned)protocolTypeFromString:(id)string;
-(void)requestToGetNewHosts;
-(id)keyStringWithServerParameter:(id)serverParameter;
-(id)keyStringWithClientParameter:(id)clientParameter;
-(id)md5HashStringFromData:(id)data;
-(void)resetCachedConnectionInfoDate;
-(void)onAppWillEnterForeground:(id)onApp;
-(void)checkUpdateByCurrentRevision:(int)revision;
-(BOOL)hasExpiredConnectionInfo;
-(void)resetConnectionInfo;
-(void)saveConnectionInfo:(id)info;
-(void)loadLastCachedConnectionInfo;
-(void)resetToFallbackHost;
-(void)resetToInitialHost;
-(void)resetServersAndSettings;
-(void)initializeDefaultServers;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate deviceManager:(id)manager;
-(id)secretKey;
-(void)setHost:(id)host;
@end

__attribute__((visibility("hidden")))
@interface LineOrigin : NSObject {
	BOOL supportsSSL_;
	NSString* host_;
	unsigned port_;
}
@property(readonly, assign, nonatomic) NSURL* URL;
@property(assign, nonatomic) BOOL supportsSSL;
@property(assign, nonatomic) unsigned port;
@property(retain, nonatomic) NSString* host;
-(void).cxx_destruct;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface OBSOrigin : LineOrigin {
}
@end

__attribute__((visibility("hidden")))
@interface ChannelGatewayOrigin : LineOrigin {
}
@end

__attribute__((visibility("hidden")))
@interface StickerCDNOrigin : LineOrigin {
}
@end

__attribute__((visibility("hidden")))
@interface ShopCDNOrigin : LineOrigin {
}
@end

__attribute__((visibility("hidden")))
@interface ProfileCDNOrigin : LineOrigin {
}
@end

__attribute__((visibility("hidden")))
@interface MyhomeOrigin : LineOrigin {
}
@end

__attribute__((visibility("hidden")))
@interface MyhomeApiOrigin : LineOrigin {
}
@end

__attribute__((visibility("hidden")))
@interface TimelineOrigin : LineOrigin {
}
@end

__attribute__((visibility("hidden")))
@interface TimelineAuthOrigin : LineOrigin {
}
@end

__attribute__((visibility("hidden")))
@interface LEGYEncryption : NSObject {
}
+(id)decryptAES128:(id)a128 secretKey:(id)key;
+(id)encryptAES128:(id)a128 secretKey:(id)key;
+(id)encryptRSA:(id)rsa;
+(id)randomDataOfLength:(unsigned long)length;
+(void)writeInt2:(id)a2 value:(int)value;
+(void)decryptResponse:(id)response secretKey:(id)key;
+(id)processEncryptBody:(id)body useSessionKey:(BOOL)key shouldEncryptHeader:(BOOL)header request:(id)request bodyData:(id)data;
+(void)processEncryptHeader:(id)header request:(id)request headerFields:(id)fields;
+(void)encryptRequest:(id)request request:(id)request2 useSessionKey:(BOOL)key shouldEncryptBody:(BOOL)body headerFields:(id)fields;
+(int)encryptionPaddingSize;
+(BOOL)isEncryptionWiFiEnabled;
+(void)setEncryptionWiFiEnabled:(BOOL)enabled;
+(BOOL)isEncryptionEnabled;
+(void)setEncryptionEnabled:(BOOL)enabled;
@end

__attribute__((visibility("hidden")))
@interface ACTIAPConversionReporter : ACTConversionReporterPrivate <ACTReportingInfoDelegate, ACTPingerDelegate> {
	NSString* _productID;
}
@property(copy, nonatomic) NSString* productID;
-(void).cxx_destruct;
-(id)reportingURLPrefix;
-(id)queryParameters;
-(id)deduplicationID;
-(void)dealloc;
-(id)initWithProductID:(id)productID value:(id)value isRepeatable:(BOOL)repeatable;
@end

__attribute__((visibility("hidden")))
@interface ACTLog : NSObject {
}
+(void)publicLog:(id)log prefixingClass:(Class)aClass;
+(void)publicLog:(id)log;
@end

__attribute__((visibility("hidden")))
@interface ACTReporter : NSObject {
	ACTReporterPrivate* _reporter;
}
@property(retain, nonatomic) ACTReporterPrivate* reporter;
+(id)SDKVersion;
-(void).cxx_destruct;
-(BOOL)report;
-(id)initWithReporter:(id)reporter;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface GoogleConversionPing : NSObject {
}
+(void)pingWithConversionId:(id)conversionId label:(id)label value:(id)value isRepeatable:(BOOL)repeatable idfaOnly:(BOOL)only;
+(id)sdkVersion;
+(BOOL)registerReferrer:(id)referrer;
+(void)pingRemarketingWithConversionId:(id)conversionId label:(id)label screenName:(id)name customParameters:(id)parameters;
+(void)pingWithConversionId:(id)conversionId type:(int)type label:(id)label value:(id)value isRepeatable:(BOOL)repeatable;
+(void)pingWithConversionId:(id)conversionId label:(id)label value:(id)value isRepeatable:(BOOL)repeatable;
@end

__attribute__((visibility("hidden")))
@interface ACTRemarketingReporter : ACTReporter {
}
+(void)reportWithConversionID:(id)conversionID label:(id)label screenName:(id)name customParameters:(id)parameters;
-(id)initWithConversionID:(id)conversionID label:(id)label screenName:(id)name customParameters:(id)parameters;
@end

__attribute__((visibility("hidden")))
@interface ACTConversionReporter : ACTReporter {
}
@property(copy, nonatomic) NSString* value;
+(BOOL)registerReferrer:(id)referrer;
+(void)reportWithProductID:(id)productID value:(id)value isRepeatable:(BOOL)repeatable;
+(void)reportWithConversionID:(id)conversionID label:(id)label value:(id)value isRepeatable:(BOOL)repeatable;
-(id)initWithProductID:(id)productID value:(id)value isRepeatable:(BOOL)repeatable;
-(id)initWithConversionID:(id)conversionID label:(id)label value:(id)value isRepeatable:(BOOL)repeatable;
@end

__attribute__((visibility("hidden")))
@interface ACTConversionIDReporter : ACTConversionReporterPrivate <ACTReportingInfoDelegate, ACTPingerDelegate> {
	NSString* _conversionID;
	NSString* _label;
}
@property(copy, nonatomic) NSString* label;
@property(copy, nonatomic) NSString* conversionID;
-(void).cxx_destruct;
-(id)reportingURLPrefix;
-(id)queryParameters;
-(id)deduplicationID;
-(void)dealloc;
-(id)initWithConversionID:(id)conversionID label:(id)label value:(id)value isRepeatable:(BOOL)repeatable;
@end

__attribute__((visibility("hidden")))
@interface ACT_GTMStringEncoding : NSObject {
	NSData* charMapData_;
	char* charMap_;
	int reverseCharMap_[128];
	int shift_;
	int mask_;
	BOOL doPad_;
	BOOL paddingChar_;
	int padLen_;
}
+(id)stringEncodingWithString:(id)string;
+(id)rfc4648Base64WebsafeStringEncoding;
+(id)rfc4648Base64StringEncoding;
+(id)crockfordBase32StringEncoding;
+(id)rfc4648Base32HexStringEncoding;
+(id)rfc4648Base32StringEncoding;
+(id)hexStringEncoding;
+(id)binaryStringEncoding;
-(void).cxx_destruct;
-(id)stringByDecoding:(id)decoding;
-(id)decode:(id)decode;
-(id)encodeString:(id)string;
-(id)encode:(id)encode;
-(void)setPaddingChar:(BOOL)aChar;
-(void)setDoPad:(BOOL)pad;
-(BOOL)doPad;
-(void)ignoreCharacters:(id)characters;
-(void)addDecodeSynonyms:(id)synonyms;
-(id)description;
-(id)initWithString:(id)string;
@end

__attribute__((visibility("hidden")))
@interface ACTConversionReporterPrivate : ACTReporterPrivate <ACTReportingInfoDelegate, ACTPingerDelegate> {
	BOOL _isRepeatable;
	NSString* _value;
	NSString* _clickID;
	NSString* _clickString;
}
@property(copy, nonatomic) NSString* clickString;
@property(copy, nonatomic) NSString* clickID;
@property(assign, nonatomic) BOOL isRepeatable;
@property(copy, nonatomic) NSString* value;
+(id)referrerComponentsForReferrerKeyWithSuffix:(id)suffix;
+(BOOL)saveReferrerComponents:(id)components;
+(id)clickReferrerUserDefaultKey:(id)key;
-(void).cxx_destruct;
-(void)pingDidSucceed:(id)ping;
-(void)ping:(id)ping didFailWithError:(id)error;
-(id)reportingURLPrefix;
-(id)queryParameterSeparator;
-(id)queryParameters;
-(BOOL)shouldReport;
-(id)deduplicationID;
-(id)initWithValue:(id)value referrerKeySuffix:(id)suffix isRepeatable:(BOOL)repeatable;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ACTPinger : NSObject <NSURLConnectionDelegate> {
	id<ACTPingerDelegate> _delegate;
	NSURLRequest* _request;
	NSURLConnection* _connection;
	NSURLResponse* _response;
	NSMutableData* _receivedData;
}
@property(retain, nonatomic) NSMutableData* receivedData;
@property(retain, nonatomic) NSURLResponse* response;
@property(retain, nonatomic) NSURLConnection* connection;
@property(copy, nonatomic) NSURLRequest* request;
@property(retain, nonatomic) id<ACTPingerDelegate> delegate;
-(void).cxx_destruct;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)dealloc;
-(void)ping;
-(id)initWithRequest:(id)request;
@end

__attribute__((visibility("hidden")))
@interface ACTRemarketingReporterPrivate : ACTReporterPrivate <ACTReportingInfoDelegate, ACTPingerDelegate> {
	NSDictionary* _parameters;
	NSString* _conversionID;
	NSString* _label;
}
@property(copy, nonatomic) NSString* label;
@property(copy, nonatomic) NSString* conversionID;
@property(copy, nonatomic) NSDictionary* parameters;
-(void).cxx_destruct;
-(void)pingDidSucceed:(id)ping;
-(void)ping:(id)ping didFailWithError:(id)error;
-(id)queryParameterSeparator;
-(id)reportingURLPrefix;
-(id)queryParameters;
-(BOOL)shouldReport;
-(void)dealloc;
-(id)initWithConversionID:(id)conversionID label:(id)label screenName:(id)name customParameters:(id)parameters;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ACTDevice : NSObject {
}
+(BOOL)writeMD5HashedDeviceIdentifierToBuffer:(char*)buffer;
+(id)deviceIdentifierMD5;
+(id)deviceIdentifierBase64;
+(id)bundleID;
+(id)appVersion;
+(id)OSVersion;
+(id)deviceID;
@end

__attribute__((visibility("hidden")))
@interface DCTConversionReporterPrivate : ACTConversionIDReporter {
}
-(id)reportingURLPrefix;
-(id)queryParameterSeparator;
-(id)queryParameters;
-(id)deduplicationID;
-(id)initWithConversionID:(id)conversionID value:(id)value isRepeatable:(BOOL)repeatable;
@end

__attribute__((visibility("hidden")))
@interface ACTPingFactory : NSObject {
}
+(id)sharedInstance;
-(id)makePinger:(id)pinger;
-(BOOL)isDebug;
@end

__attribute__((visibility("hidden")))
@interface DCTConversionReporter : ACTReporter {
}
@property(copy, nonatomic) NSString* value;
+(void)reportWithConversionID:(id)conversionID value:(id)value isRepeatable:(BOOL)repeatable;
-(id)initWithConversionID:(id)conversionID value:(id)value isRepeatable:(BOOL)repeatable;
@end

__attribute__((visibility("hidden")))
@interface ACTReporterPrivate : NSObject {
	id<ACTReportingInfoDelegate> _reportingInfoDelegate;
	id<ACTPingerDelegate> _pingerDelegate;
}
@property(assign, nonatomic) id<ACTPingerDelegate> pingerDelegate;
@property(assign, nonatomic) id<ACTReportingInfoDelegate> reportingInfoDelegate;
-(BOOL)report;
-(id)reportingURLWithQueryParameters:(id)queryParameters;
-(id)commonQueryParameters;
-(void)dealloc;
@end

@interface CDVImagePicker : UIImagePickerController {
	NSString* callbackid;
	int quality;
	NSString* mimeType;
	NSString* callbackId;
}
@property(copy) NSString* mimeType;
@property(copy) NSString* callbackId;
@property(assign) int quality;
-(void)dealloc;
-(unsigned long long)accessibilityTraits;
@end

@interface CDVCapture : CDVPlugin <UIImagePickerControllerDelegate, UINavigationControllerDelegate> {
	CDVImagePicker* pickerController;
	BOOL inUse;
}
@property(assign) BOOL inUse;
-(void)dealloc;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
-(id)getMediaDictionaryFromPath:(id)path ofType:(id)type;
-(void)getFormatData:(id)data withDict:(id)dict;
-(void)getMediaModes:(id)modes withDict:(id)dict;
-(id)processVideo:(id)video forCallbackId:(id)callbackId;
-(void)captureVideo:(id)video withDict:(id)dict;
-(id)processImage:(id)image type:(id)type forCallbackId:(id)callbackId;
-(void)captureImage:(id)image withDict:(id)dict;
-(void)captureAudio:(id)audio withDict:(id)dict;
-(id)initWithWebView:(id)webView;
@end

@interface CDVAudioRecorderViewController : UIViewController <AVAudioRecorderDelegate> {
	unsigned errorCode;
	NSString* callbackId;
	NSNumber* duration;
	CDVCapture* captureCommand;
	UIBarButtonItem* doneButton;
	UIView* recordingView;
	UIButton* recordButton;
	UIImage* recordImage;
	UIImage* stopRecordImage;
	UILabel* timerLabel;
	AVAudioRecorder* avRecorder;
	AVAudioSession* avSession;
	NSString* resultString;
	NSTimer* timer;
	BOOL isTimed;
}
@property(assign, nonatomic) BOOL isTimed;
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) NSString* resultString;
@property(retain, nonatomic) AVAudioSession* avSession;
@property(retain, nonatomic) AVAudioRecorder* avRecorder;
@property(retain, nonatomic) UILabel* timerLabel;
@property(retain, nonatomic) UIImage* stopRecordImage;
@property(retain, nonatomic) UIImage* recordImage;
@property(retain, nonatomic) UIButton* recordButton;
@property(retain, nonatomic) UIView* recordingView;
@property(retain, nonatomic) UIBarButtonItem* doneButton;
@property(retain, nonatomic) CDVCapture* captureCommand;
@property(copy, nonatomic) NSNumber* duration;
@property(copy, nonatomic) NSString* callbackId;
@property(assign, nonatomic) unsigned errorCode;
-(void)dealloc;
-(void)audioRecorderEncodeErrorDidOccur:(id)audioRecorderEncodeError error:(id)error;
-(void)audioRecorderDidFinishRecording:(id)audioRecorder successfully:(BOOL)successfully;
-(id)formatTime:(int)time;
-(void)updateTime;
-(void)dismissAudioView:(id)view;
-(void)stopRecordingCleanup;
-(void)processButton:(id)button;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithCommand:(id)command duration:(id)duration callbackId:(id)anId;
-(id)resolveImageResource:(id)resource;
-(BOOL)isIPad;
@end

@interface CDVPlugin : NSObject {
	UIWebView* webView;
	NSDictionary* settings;
	UIViewController* viewController;
	id<CDVCommandDelegate> commandDelegate;
}
@property(retain, nonatomic) id<CDVCommandDelegate> commandDelegate;
@property(retain, nonatomic) UIViewController* viewController;
@property(retain, nonatomic) NSDictionary* settings;
@property(retain, nonatomic) UIWebView* webView;
-(id)error:(id)error callbackId:(id)anId;
-(id)success:(id)success callbackId:(id)anId;
-(id)writeJavascript:(id)javascript;
-(id)appViewController;
-(id)appDelegate;
-(void)dealloc;
-(void)onMemoryWarning;
-(void)onAppTerminate;
-(void)handleOpenURL:(id)url;
-(BOOL)verifyArguments:(id)arguments withExpectedCount:(unsigned)expectedCount andCallbackId:(id)anId callerFileName:(const char*)name callerFunctionName:(const char*)name5;
-(id)initWithWebView:(id)webView;
-(id)initWithWebView:(id)webView settings:(id)settings;
-(id)currentChannel;
-(BOOL)isApprovedPrivateAccessWithChannel:(id)channel;
-(void)callErrorHandler:(id)handler AndSendPermissionDeniedLogWithApiName:(id)apiName;
-(void)callErrorHandlerWithPermissionErrorMessage:(id)permissionErrorMessage;
-(BOOL)isApprovedPrivateAccess;
-(BOOL)isApprovedWithPermission:(int)permission;
-(void)writeJavascriptDelay:(id)delay;
@end

@interface CDVConnection : CDVPlugin {
	NSString* type;
	CDVReachability* internetReach;
	NSString* connectionType;
}
@property(retain) CDVReachability* internetReach;
@property(copy) NSString* connectionType;
-(void)dealloc;
-(id)initWithWebView:(id)webView;
-(void)onResume;
-(void)onPause;
-(void)prepare;
-(void)updateOnlineStatus;
-(void)updateConnectionType:(id)type;
-(void)updateReachability:(id)reachability;
-(BOOL)isCellularConnection:(id)connection;
-(id)w3cConnectionTypeFor:(id)aFor;
@end

@interface CDVCamera : CDVPlugin <UIImagePickerControllerDelegate, UINavigationControllerDelegate, UIPopoverControllerDelegate> {
	CDVCameraPicker* pickerController;
}
@property(retain) CDVCameraPicker* pickerController;
-(void)dealloc;
-(void)postImage:(id)image withFilename:(id)filename toUrl:(id)url;
-(id)imageCorrectedForCaptureOrientation:(id)captureOrientation;
-(id)imageByScalingAndCroppingForSize:(id)size toSize:(CGSize)size2;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)popoverControllerDidDismissPopover:(id)popoverController;
-(void)getPicture:(id)picture withDict:(id)dict;
-(BOOL)popoverSupported;
@end

@interface CDVCameraPicker : UIImagePickerController {
	int quality;
	NSString* postUrl;
	int returnType;
	NSString* callbackId;
	UIPopoverController* popoverController;
	CGSize targetSize;
	bool correctOrientation;
	bool saveToPhotoAlbum;
	int encodingType;
}
@property(assign) bool saveToPhotoAlbum;
@property(assign) bool correctOrientation;
@property(assign) CGSize targetSize;
@property(retain) UIPopoverController* popoverController;
@property(assign, nonatomic) int encodingType;
@property(assign, nonatomic) int returnType;
@property(copy) NSString* postUrl;
@property(copy) NSString* callbackId;
@property(assign) int quality;
-(void)dealloc;
@end

@interface CDVContactsPicker : ABPeoplePickerNavigationController {
	BOOL allowsEditing;
	NSString* callbackId;
	int selectedId;
}
@property(assign) int selectedId;
@property(copy) NSString* callbackId;
@property(assign) BOOL allowsEditing;
@end

@interface CDVNewContactsController : ABNewPersonViewController {
	NSString* callbackId;
}
@property(copy) NSString* callbackId;
@end

@interface CDVContacts : CDVPlugin <ABNewPersonViewControllerDelegate, ABPersonViewControllerDelegate, ABPeoplePickerNavigationControllerDelegate> {
	void* addressBook;
}
-(void)dealloc;
-(void)remove:(id)remove withDict:(id)dict;
-(void)save:(id)save withDict:(id)dict;
-(void)search:(id)search withDict:(id)dict;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)chooseContact:(id)contact withDict:(id)dict;
-(BOOL)personViewController:(id)controller shouldPerformDefaultActionForPerson:(void*)person property:(int)property identifier:(int)identifier;
-(void)displayContact:(id)contact withDict:(id)dict;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)newContact:(id)contact withDict:(id)dict;
-(void)onAppTerminate;
-(id)initWithWebView:(id)webView;
@end

@interface CDVDisplayContactViewController : ABPersonViewController {
	CDVPlugin* contactsPlugin;
}
@property(retain, nonatomic) CDVPlugin* contactsPlugin;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
@end

@interface CDVBattery : CDVPlugin {
	int state;
	float level;
	NSString* callbackId;
}
@property(retain) NSString* callbackId;
@property(assign, nonatomic) float level;
@property(assign, nonatomic) int state;
-(void)dealloc;
-(id)initWithWebView:(id)webView;
-(void)stop:(id)stop withDict:(id)dict;
-(void)start:(id)start withDict:(id)dict;
-(id)getBatteryStatus;
-(void)updateBatteryStatus:(id)status;
@end

@interface CDVDebugConsole : CDVPlugin {
}
-(void)log:(id)log withDict:(id)dict;
@end

@interface CDVFile : CDVPlugin {
	NSString* appDocsPath;
	NSString* appLibraryPath;
	NSString* appTempPath;
	NSString* persistentPath;
	NSString* temporaryPath;
	BOOL userHasAllowed;
}
@property(assign) BOOL userHasAllowed;
@property(retain, nonatomic) NSString* temporaryPath;
@property(retain, nonatomic) NSString* persistentPath;
@property(retain, nonatomic) NSString* appTempPath;
@property(retain, nonatomic) NSString* appLibraryPath;
@property(retain, nonatomic) NSString* appDocsPath;
-(void)dealloc;
-(void)getFreeDiskSpace:(id)space withDict:(id)dict;
-(void)testDirectoryExists:(id)exists withDict:(id)dict;
-(void)testFileExists:(id)exists withDict:(id)dict;
-(void)writeToFile:(id)file withData:(id)data append:(BOOL)append callback:(id)callback;
-(void)write:(id)write withDict:(id)dict;
-(unsigned long long)truncateFile:(id)file atPosition:(unsigned long long)position;
-(void)truncateFile:(id)file withDict:(id)dict;
-(id)getMimeTypeFromPath:(id)path;
-(void)readAsDataURL:(id)url withDict:(id)dict;
-(void)readFile:(id)file withDict:(id)dict;
-(void)readEntries:(id)entries withDict:(id)dict;
-(void)getFileMetadata:(id)metadata withDict:(id)dict;
-(void)doCopyMove:(id)move withDict:(id)dict isCopy:(BOOL)copy;
-(BOOL)canCopyMoveSrc:(id)src ToDestination:(id)destination;
-(void)moveTo:(id)to withDict:(id)dict;
-(void)copyTo:(id)to withDict:(id)dict;
-(id)doRemove:(id)remove callback:(id)callback;
-(void)removeRecursively:(id)recursively withDict:(id)dict;
-(void)remove:(id)remove withDict:(id)dict;
-(void)getMetadata:(id)metadata withDict:(id)dict;
-(void)getParent:(id)parent withDict:(id)dict;
-(void)getFile:(id)file withDict:(id)dict;
-(void)getDirectory:(id)directory withDict:(id)dict;
-(void)resolveLocalFileSystemURI:(id)uri withDict:(id)dict;
-(id)getDirectoryEntry:(id)entry isDirectory:(BOOL)directory;
-(void)requestFileSystem:(id)system withDict:(id)dict;
-(id)getAppPath:(id)path;
-(id)checkFreeDiskSpace:(id)space;
-(id)initWithWebView:(id)webView;
@end

@interface CDVInvokedUrlCommand : NSObject {
	NSString* className;
	NSString* methodName;
	NSMutableArray* arguments;
	NSMutableDictionary* options;
}
@property(copy) NSString* methodName;
@property(copy) NSString* className;
@property(retain) NSMutableDictionary* options;
@property(retain) NSMutableArray* arguments;
+(id)commandFromObject:(id)object;
-(void)dealloc;
@end

@interface CDVHeadingData : NSObject {
	unsigned headingStatus;
	BOOL headingRepeats;
	CLHeading* headingInfo;
	NSMutableArray* headingCallbacks;
	NSString* headingFilter;
}
@property(retain, nonatomic) NSString* headingFilter;
@property(retain, nonatomic) NSMutableArray* headingCallbacks;
@property(retain, nonatomic) CLHeading* headingInfo;
@property(assign, nonatomic) BOOL headingRepeats;
@property(assign, nonatomic) unsigned headingStatus;
-(void)dealloc;
-(id)init;
@end

@interface CDVLocation : CDVPlugin <CLLocationManagerDelegate> {
	BOOL __locationStarted;
	CDVHeadingData* headingData;
	CLLocationManager* locationManager;
}
@property(retain, nonatomic) CDVHeadingData* headingData;
@property(retain, nonatomic) CLLocationManager* locationManager;
-(void)dealloc;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateHeading:(id)heading;
-(BOOL)locationManagerShouldDisplayHeadingCalibration:(id)locationManager;
-(void)startHeadingWithFilter:(double)filter;
-(void)stopHeading:(id)heading withDict:(id)dict;
-(void)returnHeadingInfo:(id)info keepCallback:(BOOL)callback;
-(void)watchHeadingFilter:(id)filter withDict:(id)dict;
-(void)getCurrentHeading:(id)heading withDict:(id)dict;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)stopLocation:(id)location withDict:(id)dict;
-(void)startLocation:(id)location withDict:(id)dict;
-(BOOL)isLocationServicesEnabled;
-(BOOL)isAuthorized;
-(BOOL)hasHeadingSupport;
-(id)initWithWebView:(id)webView;
@end

@interface CDVNotification : CDVPlugin <UIAlertViewDelegate> {
}
-(void)vibrate:(id)vibrate withDict:(id)dict;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)prompt:(id)prompt withDict:(id)dict;
-(void)alert:(id)alert withDict:(id)dict;
@end

@interface CDVAlertView : UIAlertView {
	NSString* callBackId;
	NSString* callbackId;
}
@property(retain, nonatomic) NSString* callbackId;
-(void)dealloc;
@end

@interface CDVViewController : UIViewController <UIWebViewDelegate, CDVCommandDelegate> {
	CDVCordovaView* webView;
	NSArray* supportedOrientations;
	NSMutableDictionary* pluginObjects;
	NSDictionary* pluginsMap;
	CDVWhitelist* whitelist;
	NSDictionary* settings;
	NSString* sessionKey;
	BOOL loadFromString;
	UIImageView* imageView;
	UIActivityIndicatorView* activityView;
	BOOL useSplashScreen;
	id<CDVCommandDelegate> commandDelegate;
	NSString* wwwFolderName;
	NSString* startPage;
}
@property(copy, nonatomic) NSString* startPage;
@property(copy, nonatomic) NSString* wwwFolderName;
@property(retain, nonatomic) id<CDVCommandDelegate> commandDelegate;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) UIActivityIndicatorView* activityView;
@property(assign, nonatomic) BOOL useSplashScreen;
@property(assign, nonatomic) BOOL loadFromString;
@property(copy, nonatomic) NSString* sessionKey;
@property(retain, nonatomic) NSArray* supportedOrientations;
@property(retain, nonatomic) CDVWhitelist* whitelist;
@property(retain, nonatomic) NSDictionary* settings;
@property(retain, nonatomic) NSDictionary* pluginsMap;
@property(retain, nonatomic) NSMutableDictionary* pluginObjects;
@property(retain, nonatomic) CDVCordovaView* webView;
+(id)cordovaVersion;
+(id)getBundlePlist:(id)plist;
+(id)applicationDocumentsDirectory;
+(id)resolveImageResource:(id)resource;
+(BOOL)isIPad;
-(void)dealloc;
-(void)onAppDidEnterBackground:(id)onApp;
-(void)onAppDidBecomeActive:(id)onApp;
-(void)onAppWillEnterForeground:(id)onApp;
-(void)onAppWillResignActive:(id)onApp;
-(void)onAppWillTerminate:(id)onApp;
-(id)appURLScheme;
-(id)deviceProperties;
-(id)getCommandInstance:(id)instance;
-(BOOL)execute:(id)execute;
-(void)flushCommandQueue;
-(int)executeQueuedCommands;
-(void)receivedOrientationChange;
-(void)showSplashScreen;
-(id)pathForResource:(id)resource;
-(void)javascriptAlert:(id)alert;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)createGapView;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)parseInterfaceOrientations:(id)orientations;
-(void)viewDidLoad;
-(id)init;
@end

@interface CDVCordovaView : UIWebView {
}
-(void)dealloc;
-(void)loadRequest:(id)request;
@end

@interface CDVReachability : NSObject {
	BOOL localWiFiRef;
	SCNetworkReachabilityRef reachabilityRef;
}
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostName:(id)hostName;
-(int)currentReachabilityStatus;
-(BOOL)connectionRequired;
-(int)networkStatusForFlags:(unsigned)flags;
-(int)localWiFiStatusForFlags:(unsigned)flags;
-(void)dealloc;
-(void)stopNotifier;
-(BOOL)startNotifier;
@end

@interface CDVSound : CDVPlugin <AVAudioPlayerDelegate, AVAudioRecorderDelegate> {
	NSMutableDictionary* soundCache;
	AVAudioSession* avSession;
}
@property(retain, nonatomic) AVAudioSession* avSession;
@property(retain, nonatomic) NSMutableDictionary* soundCache;
-(void)dealloc;
-(void)onMemoryWarning;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
-(void)audioRecorderDidFinishRecording:(id)audioRecorder successfully:(BOOL)successfully;
-(void)stopAudioRecord:(id)record withDict:(id)dict;
-(void)startAudioRecord:(id)record withDict:(id)dict;
-(void)getCurrentPosition:(id)position withDict:(id)dict;
-(void)release:(id)release withDict:(id)dict;
-(void)seekTo:(id)to withDict:(id)dict;
-(void)pause:(id)pause withDict:(id)dict;
-(void)stop:(id)stop withDict:(id)dict;
-(void)prepare:(id)prepare withDict:(id)dict;
-(BOOL)prepareToPlay:(id)play withId:(id)anId;
-(void)play:(id)play withDict:(id)dict;
-(id)createMediaErrorWithCode:(unsigned)code message:(id)message;
-(BOOL)hasAudioSession;
-(id)audioFileForResource:(id)resource withId:(id)anId;
-(id)urlForResource:(id)resource;
@end

@interface CDVAudioFile : NSObject {
	NSString* resourcePath;
	NSURL* resourceURL;
	CDVAudioPlayer* player;
	CDVAudioRecorder* recorder;
}
@property(retain, nonatomic) CDVAudioRecorder* recorder;
@property(retain, nonatomic) CDVAudioPlayer* player;
@property(retain, nonatomic) NSURL* resourceURL;
@property(retain, nonatomic) NSString* resourcePath;
-(void)dealloc;
@end

@interface CDVAudioPlayer : AVAudioPlayer {
	NSString* mediaId;
}
@property(copy, nonatomic) NSString* mediaId;
-(void)dealloc;
@end

@interface CDVAudioRecorder : AVAudioRecorder {
	NSString* mediaId;
}
@property(copy, nonatomic) NSString* mediaId;
-(void)dealloc;
@end

@interface CDVAccelerometer : CDVPlugin <UIAccelerometerDelegate> {
	bool _bIsRunning;
}
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
-(void)stop:(id)stop withDict:(id)dict;
-(void)start:(id)start withDict:(id)dict;
@end

@interface CDVContact : NSObject {
	void* record;
	NSDictionary* returnFields;
}
@property(retain, nonatomic) NSDictionary* returnFields;
@property(assign, nonatomic) void* record;
+(id)calcReturnFields:(id)fields;
+(BOOL)isValidW3ContactType:(id)type;
+(id)convertPropertyLabelToContactType:(id)contactType;
+(CFStringRef)convertContactTypeToPropertyLabel:(id)propertyLabel;
+(BOOL)needsConversion:(id)conversion;
+(void)releaseDefaults;
+(id)defaultFields;
+(id)defaultObjectAndProperties;
+(id)defaultW3CtoNull;
+(id)defaultW3CtoAB;
+(id)defaultABtoW3C;
-(void)dealloc;
-(BOOL)searchContactFields:(id)fields forMVDictionaryProperty:(int)mvdictionaryProperty withValue:(id)value;
-(id)labelsForProperty:(int)property inRecord:(void*)record;
-(id)valuesForProperty:(int)property inRecord:(void*)record;
-(BOOL)testMultiValueStrings:(id)strings forProperty:(int)property ofType:(id)type;
-(BOOL)searchContactFields:(id)fields forMVStringProperty:(int)mvstringProperty withValue:(id)value;
-(BOOL)testDateValue:(id)value forW3CProperty:(id)w3CProperty;
-(BOOL)testStringValue:(id)value forW3CProperty:(id)w3CProperty;
-(BOOL)foundValue:(id)value inFields:(id)fields;
-(id)extractPhotos;
-(id)extractOrganizations;
-(id)extractIms;
-(id)extractAddresses;
-(id)extractMultiValue:(id)value;
-(id)extractName;
-(id)getDateAsNumber:(int)number;
-(id)toDictionary:(id)dictionary;
-(bool)setMultiValueDictionary:(id)dictionary forProperty:(int)property inRecord:(void*)record asUpdate:(BOOL)update;
-(id)translateW3Dict:(id)dict forProperty:(int)property;
-(void*)allocDictMultiValueFromArray:(id)array forProperty:(int)property;
-(bool)setMultiValueStrings:(id)strings forProperty:(int)property inRecord:(void*)record asUpdate:(BOOL)update;
-(bool)setValue:(void*)value forProperty:(int)property inRecord:(void*)record;
-(void*)allocStringMultiValueFromArray:(id)array;
-(bool)addToMultiValue:(void*)multiValue fromDictionary:(id)dictionary;
-(bool)removeProperty:(int)property inRecord:(void*)record;
-(bool)setValue:(id)value forProperty:(int)property inRecord:(void*)record asUpdate:(BOOL)update;
-(bool)setFromContactDict:(id)contactDict asUpdate:(BOOL)update;
-(id)initFromABRecord:(void*)abrecord;
-(id)init;
@end

@interface CDVPluginResult : NSObject {
	NSNumber* status;
	id message;
	NSNumber* keepCallback;
	NSString* cast;
}
@property(readonly, assign, nonatomic) NSString* cast;
@property(retain, nonatomic) NSNumber* keepCallback;
@property(readonly, assign, nonatomic) id message;
@property(readonly, assign, nonatomic) NSNumber* status;
+(id)resultWithStatus:(int)status messageToErrorObject:(int)errorObject;
+(id)resultWithStatus:(int)status messageAsDictionary:(id)dictionary cast:(id)cast;
+(id)resultWithStatus:(int)status messageAsDouble:(double)aDouble cast:(id)cast;
+(id)resultWithStatus:(int)status messageAsInt:(int)int cast:(id)cast;
+(id)resultWithStatus:(int)status messageAsArray:(id)array cast:(id)cast;
+(id)resultWithStatus:(int)status messageAsString:(id)string cast:(id)cast;
+(id)resultWithStatus:(int)status messageAsDictionary:(id)dictionary;
+(id)resultWithStatus:(int)status messageAsDouble:(double)aDouble;
+(id)resultWithStatus:(int)status messageAsInt:(int)int;
+(id)resultWithStatus:(int)status messageAsArray:(id)array;
+(id)resultWithStatus:(int)status messageAsString:(id)string;
+(id)resultWithStatus:(int)status;
+(void)releaseStatus;
+(void)initialize;
-(void)dealloc;
-(id)toErrorCallbackString:(id)errorCallbackString;
-(id)toSuccessCallbackString:(id)successCallbackString;
-(id)toJSONString;
-(void)setKeepCallbackAsBool:(BOOL)aBool;
-(id)initWithStatus:(int)status message:(id)message cast:(id)cast;
-(id)init;
@end

@interface CDVFileTransfer : CDVPlugin {
}
-(id)createFileTransferError:(id)error AndSource:(id)source AndTarget:(id)target;
-(void)downloadFail:(id)fail;
-(void)downloadSuccess:(id)success;
-(void)downloadFile:(id)file;
-(void)download:(id)download withDict:(id)dict;
-(void)upload:(id)upload withDict:(id)dict;
@end

@interface CDVFileTransferDelegate : NSObject {
	CDVFileTransfer* command;
	NSString* callbackId;
	NSString* source;
	NSString* target;
	int bytesWritten;
	NSMutableData* responseData;
}
@property(assign) int bytesWritten;
@property(retain, nonatomic) NSString* target;
@property(retain, nonatomic) NSString* source;
@property(retain, nonatomic) NSString* callbackId;
@property(retain, nonatomic) CDVFileTransfer* command;
@property(retain, nonatomic) NSMutableData* responseData;
-(void)dealloc;
-(id)init;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
@end

@interface CDVMotion : CDVPlugin {
	BOOL deviceMotionAvailable;
	BOOL deviceOrientationAvailable;
}
@property(readonly, assign, getter=isDeviceOrientationAvailable) BOOL deviceOrientationAvailable;
@property(readonly, assign, getter=isDeviceMotionAvailable) BOOL deviceMotionAvailable;
-(void)dealloc;
-(BOOL)deviceOrientationAvailable;
-(BOOL)deviceMotionAvailable;
-(id)initWithWebView:(id)webView;
-(void)startDeviceOrientationEvents;
-(void)startDeviceMotionEvents;
@end

@interface CDVSplashScreen : CDVPlugin {
}
-(void)hide:(id)hide withDict:(id)dict;
-(void)show:(id)show withDict:(id)dict;
-(void)__show:(BOOL)show;
@end

@interface CDVWhitelist : NSObject {
	NSArray* whitelist;
	NSArray* expandedWhitelist;
	BOOL allowAll;
}
@property(assign, nonatomic) BOOL allowAll;
@property(retain, nonatomic) NSArray* expandedWhitelist;
@property(retain, nonatomic) NSArray* whitelist;
-(id)errorStringForURL:(id)url;
-(BOOL)URLIsAllowed:(id)allowed;
-(BOOL)schemeIsAllowed:(id)allowed;
-(void)processWhitelist;
-(BOOL)isIPv4Address:(id)address;
-(void)dealloc;
-(id)initWithArray:(id)array;
@end

@interface CDVURLProtocol : NSURLProtocol {
}
+(BOOL)requestIsCacheEquivalent:(id)equivalent toRequest:(id)request;
+(id)canonicalRequestForRequest:(id)request;
+(BOOL)canInitWithRequest:(id)request;
+(void)registerPGHttpURLProtocol;
-(void)stopLoading;
-(void)startLoading;
@end

@interface CDVHTTPURLResponse : NSHTTPURLResponse {
}
-(id)initWithUnauthorizedURL:(id)unauthorizedURL;
@end

@interface ImageLoader : NSObject {
}
@end

@interface ImageHelper : NSObject {
}
+(id)FilterImage:(id)image :(int)arg2;
+(id)PICKImage:(id)image :(tagEFFECTTRANSFER*)arg2;
+(id)BOKEHImage:(id)image;
+(id)GRUNGEImage:(id)image;
+(id)TONEDOWNImage:(id)image;
+(id)NERVOUSImage:(id)image;
+(id)TOYImage:(id)image;
+(id)BWImage:(id)image;
+(id)BRANNANImage:(id)image;
+(id)CALMImage:(id)image;
+(id)PHOTOGENICImage:(id)image;
+(id)PENCIL2Image:(id)image;
+(id)SKETCHImage:(id)image;
+(id)NASHVILLEImage:(id)image;
+(id)CARTOONImage:(id)image;
+(id)PAINTImage:(id)image;
+(id)PENCILImage:(id)image;
+(id)VINTAGEImage:(id)image;
+(id)VIVIDImage:(id)image;
+(id)INKWELLImage:(id)image;
+(id)BBOSHASIImage:(id)image;
+(id)SIPZASUImage:(id)image;
+(id)LOMOImage:(id)image;
+(char*)bitmapFromImage:(id)image;
+(char*)readImage:(id)image;
+(char*)readGrayImage:(id)image;
+(id)imageWithBits:(char*)bits withSize:(CGSize)size;
@end

@interface IATCDataScanner : NSObject {
	NSData* data;
	char* start;
	char* end;
	char* current;
	unsigned length;
	NSCharacterSet* doubleCharacters;
}
@property(retain, nonatomic) NSCharacterSet* doubleCharacters;
@property(readonly, assign, nonatomic) BOOL isAtEnd;
@property(assign, nonatomic) unsigned scanLocation;
@property(retain, nonatomic) NSData* data;
+(id)imScannerWithData:(id)data;
-(id)remainingString;
-(void)skipWhitespace;
-(BOOL)scanNumber:(id*)number;
-(BOOL)scanUpToCharactersFromSet:(id)set intoString:(id*)string;
-(BOOL)scanUpToString:(id)string intoString:(id*)string2;
-(BOOL)scanCharactersFromSet:(id)set intoString:(id*)string;
-(BOOL)scanString:(id)string intoString:(id*)string2;
-(BOOL)scanUTF8String:(const char*)string intoString:(id*)string2;
-(BOOL)scanCharacter:(unsigned short)character;
-(unsigned short)scanCharacter;
-(unsigned short)currentCharacter;
-(void)dealloc;
-(id)init;
@end

@interface IATCJSONScanner : IATCDataScanner {
}
-(BOOL)scanNotQuoteCharactersIntoString:(id*)string;
-(BOOL)scanJSONNumberConstant:(id*)constant error:(id*)error;
-(BOOL)scanJSONStringConstant:(id*)constant error:(id*)error;
-(BOOL)scanJSONArray:(id*)array error:(id*)error;
-(BOOL)scanJSONDictionary:(id*)dictionary error:(id*)error;
-(BOOL)scanJSONObject:(id*)object error:(id*)error;
-(void)setData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface IATCJSONDeserializer : NSObject {
}
+(id)imDeserializer;
-(id)deserializeAsArray:(id)array error:(id*)error;
-(id)deserializeAsDictionary:(id)dictionary error:(id*)error;
-(id)deserialize:(id)deserialize error:(id*)error;
@end

@interface IATCSerializedJSONData : NSObject {
	NSData* data;
}
@property(readonly, assign, nonatomic) NSData* data;
-(void)dealloc;
-(id)initWithData:(id)data;
@end

@interface IATCJSONDataSerializer : NSObject {
}
+(id)imDeserializer;
+(void)initialize;
-(id)serializeDictionary:(id)dictionary;
-(id)serializeArray:(id)array;
-(id)serializeString:(id)string;
-(id)serializeNumber:(id)number;
-(id)serializeNull:(id)null;
-(id)serializeObject:(id)object;
@end

@interface IATCJSONSerializer : NSObject {
	IATCJSONDataSerializer* serializer;
}
+(id)imSerializer;
-(id)serializeDictionary:(id)dictionary;
-(id)serializeArray:(id)array;
-(id)serializeObject:(id)object;
-(void)dealloc;
-(id)init;
@end

@interface IATGoalListData : NSObject {
	NSString* goalName;
	int waitTime;
}
@property(assign, nonatomic) int waitTime;
@property(retain, nonatomic) NSString* goalName;
-(id)initWithGoal:(id)goal;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface IMAdTracker : NSObject <UIWebViewDelegate> {
	IMCommonsNetworkReachability* hostReachable;
	NSUserDefaults* g_userDefaults;
	BOOL hostActive;
	BOOL isInitialized;
	BOOL lastGoalWasSuccess;
	NSMutableArray* g_goalsList;
	NSMutableDictionary* g_goalsMap;
	NSOperationQueue* g_operationQueue;
	UIWebView* g_webView;
	NSMutableDictionary* webViewResponse;
	NSString* iat_appId;
	NSString* iat_deviceIDs;
	NSDate* expiryDate;
}
@property(retain, nonatomic) NSDate* expiryDate;
@property(copy, nonatomic) NSString* iat_deviceIDs;
@property(copy, nonatomic) NSString* iat_appId;
@property(retain, nonatomic) NSMutableDictionary* webViewResponse;
@property(retain, nonatomic) UIWebView* g_webView;
@property(retain, nonatomic) NSOperationQueue* g_operationQueue;
@property(retain, nonatomic) NSMutableDictionary* g_goalsMap;
@property(retain, nonatomic) NSMutableArray* g_goalsList;
@property(assign, nonatomic) BOOL lastGoalWasSuccess;
@property(assign, nonatomic) BOOL isInitialized;
@property(assign, nonatomic) BOOL hostActive;
@property(assign, nonatomic) NSUserDefaults* g_userDefaults;
@property(assign, nonatomic) IMCommonsNetworkReachability* hostReachable;
+(void)reportCustomGoal:(id)goal;
+(void)reportAppDownloadGoal;
+(void)initWithAppID:(id)appID;
+(void)initialize;
-(void)reportCustomGoalPrivate:(id)aPrivate;
-(void)reportAppDownloadGoalPrivate;
-(void)initWithAppIDPrivate:(id)appIDPrivate;
-(void)reportGoalPrivate:(id)aPrivate;
-(void)scheduleReportNextGoal;
-(void)reportNextGoal;
-(void)pingFromURLConnection;
-(void)pingFromWebView;
-(int)parseJSONResponseData:(id)data;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)releaseWebView;
-(void)initWebView:(id)view;
-(void)dequeueGoal:(id)goal;
-(void)enqueueGoal:(id)goal;
-(id)getReportingURL:(id)url Goal:(id)goal Count:(id)count;
-(id)getURLEncoded:(id)encoded;
-(void)checkNetworkStatus:(id)status;
-(void)appWillTerminate:(id)app;
-(void)appWillInactive:(id)app;
-(BOOL)isConnectedToNetwork;
-(void)cleanup;
-(void)syncDefaults;
@end

@interface IMCommonUtil : NSObject {
	int logLevel;
	int deviceIdMask;
	NSString* webViewUserAgent;
	NSMutableString* device_uidMap;
	NSString* appBundleId;
	NSString* appVersion;
	NSString* appDisplayName;
	NSString* localization;
	NSString* simMCC;
	NSString* simMNC;
	NSString* bssid;
	NSString* ssid;
	NSString* timeStamp;
	NSString* zoneOffset;
}
@property(copy, nonatomic) NSString* zoneOffset;
@property(copy, nonatomic) NSString* timeStamp;
@property(copy, nonatomic) NSString* bssid;
@property(copy, nonatomic) NSString* ssid;
@property(copy, nonatomic) NSString* simMNC;
@property(copy, nonatomic) NSString* simMCC;
@property(copy, nonatomic) NSString* localization;
@property(copy, nonatomic) NSString* appDisplayName;
@property(copy, nonatomic) NSString* appVersion;
@property(copy, nonatomic) NSString* appBundleId;
@property(retain, nonatomic) NSMutableString* device_uidMap;
@property(retain, nonatomic) NSString* webViewUserAgent;
@property(assign, nonatomic) int deviceIdMask;
@property(assign, nonatomic) int logLevel;
+(BOOL)viewController:(id)controller respondsToSelector:(SEL)selector;
+(BOOL)delegate:(id)delegate respondsToSelector:(SEL)selector;
+(id)getRandomUIntString;
+(unsigned)getRandomUInt;
+(id)getDecodedURLString:(id)string;
+(id)getURLEncoded:(id)encoded;
+(BOOL)isEmptyString:(id)string;
+(id)getUIDMapEncryptedWithLoginID:(id)loginID SessionID:(id)anId RandomKey:(id)key;
+(id)getUIDMapEncryptedWithLoginID:(id)loginID SessionID:(id)anId DeviceIdMask:(int)mask RandomKey:(id)key AddInMobiODIN1:(BOOL)mobiODIN1;
+(id)getUIDMapKeyVersion;
+(void)reloadNiceParameters;
+(id)zoneOffset;
+(id)timeStamp;
+(id)bssid;
+(id)ssid;
+(id)simMNC;
+(id)simMCC;
+(id)localization;
+(id)appInstanceId;
+(id)appDisplayName;
+(id)appVersion;
+(id)appBundleId;
+(id)getWebViewUserAgent;
+(void)reloadWebViewUserAgent;
+(void)fetchWebViewUserAgent;
+(id)deviceInMobiODIN1;
+(id)deviceStandardODIN1;
+(id)deviceIDIDValues;
+(id)getPathString:(id)string;
+(id)osBuildVersion;
+(id)creationTimeStampforPath:(id)path;
+(id)machineHW;
+(id)requestSysCtlByName:(id)name useIntType:(BOOL)type;
+(id)decodeFromBase64:(id)base64;
+(id)encodeToBase64:(id)base64;
+(id)SHA1Digest:(id)digest;
+(id)MD5Digest:(id)digest;
+(id)MD5Data:(id)data;
+(id)getReleaseVersion;
+(int)getDeviceIdMask;
+(void)setDeviceIdMask:(int)mask;
+(int)getLogLevel;
+(void)setLogLevel:(int)level;
+(id)sharedInstance;
-(id)getUIDMapEncryptedWithLoginID:(id)loginID SessionID:(id)anId DeviceIdMask:(int)mask RandomKey:(id)key AddInMobiODIN1:(BOOL)mobiODIN1;
-(void)addToUIDMap:(id)uidmap Key:(id)key RandomKey:(id)key3;
-(id)XORInput:(id)input WithKey:(id)key;
-(id)stringFromRSAEncryption:(id)rsaencryption;
-(id)EncodeRSA:(id)rsa publicKey:(SecKey*)key;
-(void)reloadNiceParameters;
-(void)fillApplicationInfo;
-(id)init;
@end

@interface IMCommonsNetworkReachability : NSObject {
	BOOL localWiFiRef;
	SCNetworkReachabilityRef reachabilityRef;
}
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostName:(id)hostName;
-(int)currentReachabilityStatus;
-(BOOL)connectionRequired;
-(int)networkStatusForFlags:(unsigned)flags;
-(int)localWiFiStatusForFlags:(unsigned)flags;
-(void)dealloc;
-(void)stopNotifier;
-(BOOL)startNotifier;
@end

@interface IMGTMBase64Private : NSObject {
}
+(unsigned)baseDecode:(const char*)decode srcLen:(unsigned)len destBytes:(char*)bytes destLen:(unsigned)len4 charset:(const char*)charset requirePadding:(BOOL)padding;
+(unsigned)baseEncode:(const char*)encode srcLen:(unsigned)len destBytes:(char*)bytes destLen:(unsigned)len4 charset:(const char*)charset padded:(BOOL)padded;
+(id)baseDecode:(const void*)decode length:(unsigned)length charset:(const char*)charset requirePadding:(BOOL)padding;
+(id)baseEncode:(const void*)encode length:(unsigned)length charset:(const char*)charset padded:(BOOL)padded;
+(id)webSafeDecodeString:(id)string;
+(id)stringByWebSafeEncodingBytes:(const void*)bytes length:(unsigned)length padded:(BOOL)padded;
+(id)stringByWebSafeEncodingData:(id)data padded:(BOOL)padded;
+(id)webSafeDecodeBytes:(const void*)bytes length:(unsigned)length;
+(id)webSafeEncodeBytes:(const void*)bytes length:(unsigned)length padded:(BOOL)padded;
+(id)webSafeDecodeData:(id)data;
+(id)webSafeEncodeData:(id)data padded:(BOOL)padded;
+(id)decodeString:(id)string;
+(id)stringByEncodingBytes:(const void*)bytes length:(unsigned)length;
+(id)stringByEncodingData:(id)data;
+(id)decodeBytes:(const void*)bytes length:(unsigned)length;
+(id)encodeBytes:(const void*)bytes length:(unsigned)length;
+(id)decodeData:(id)data;
+(id)encodeData:(id)data;
@end

@interface PLCrashSignalHandler : NSObject {
	darwin_sigaltstack _sigstk;
}
+(id)sharedHandler;
-(BOOL)registerHandlerWithCallback:(/*function-pointer*/ void*)callback context:(void*)context error:(id*)error;
-(BOOL)registerHandlerForSignal:(int)signal error:(id*)error;
-(id)init;
-(void)populateError:(id*)error errorCode:(int)code description:(id)description cause:(id)cause;
-(void)populateError:(id*)error errnoVal:(int)val description:(id)description;
@end

@interface PLCrashReporter : NSObject {
	BOOL _enabled;
	NSString* _applicationIdentifier;
	NSString* _applicationVersion;
	NSString* _applicationShortVersion;
	long _applicationStartupTimestamp;
	NSString* _crashReportGUID;
	NSString* _crashReportDirectory;
}
+(id)sharedReporter;
-(void)setCrashCallbacks:(PLCrashReporterCallbacks*)callbacks;
-(BOOL)enableCrashReporterAndReturnError:(id*)error;
-(BOOL)enableCrashReporter;
-(BOOL)purgePendingCrashReportAndReturnError:(id*)error;
-(BOOL)purgePendingCrashReport;
-(id)loadPendingCrashReportDataAndReturnError:(id*)error;
-(id)loadPendingCrashReportData;
-(BOOL)hasPendingCrashReport;
-(id)crashReportPath;
-(id)queuedCrashReportDirectory;
-(id)crashReportDirectory;
-(BOOL)populateCrashReportDirectoryAndReturnError:(id*)error;
-(void)dealloc;
-(id)initWithBundle:(id)bundle;
-(id)initWithApplicationIdentifier:(id)applicationIdentifier appVersion:(id)version appShortVersion:(id)version3;
@end

@interface PLCrashReport : NSObject {
	PLCrashReportDecoder* _decoder;
	PLCrashReportReportInfo* _reportInfo;
	PLCrashReportSystemInfo* _systemInfo;
	PLCrashReportMachineInfo* _machineInfo;
	PLCrashReportApplicationInfo* _applicationInfo;
	PLCrashReportProcessInfo* _processInfo;
	PLCrashReportSignalInfo* _signalInfo;
	NSArray* _threads;
	NSArray* _images;
	PLCrashReportExceptionInfo* _exceptionInfo;
}
@property(readonly, assign, nonatomic) PLCrashReportReportInfo* reportInfo;
@property(readonly, assign, nonatomic) BOOL hasReportInfo;
@property(readonly, assign, nonatomic) PLCrashReportExceptionInfo* exceptionInfo;
@property(readonly, assign, nonatomic) BOOL hasExceptionInfo;
@property(readonly, assign, nonatomic) NSArray* images;
@property(readonly, assign, nonatomic) NSArray* threads;
@property(readonly, assign, nonatomic) PLCrashReportSignalInfo* signalInfo;
@property(readonly, assign, nonatomic) PLCrashReportProcessInfo* processInfo;
@property(readonly, assign, nonatomic) BOOL hasProcessInfo;
@property(readonly, assign, nonatomic) PLCrashReportApplicationInfo* applicationInfo;
@property(readonly, assign, nonatomic) PLCrashReportMachineInfo* machineInfo;
@property(readonly, assign, nonatomic) BOOL hasMachineInfo;
@property(readonly, assign, nonatomic) PLCrashReportSystemInfo* systemInfo;
-(id)imageForAddress:(unsigned long long)address;
-(void)dealloc;
-(id)initWithData:(id)data error:(id*)error;
-(id)extractSignalInfo:(Plcrash__CrashReport__Signal*)info error:(id*)error;
-(id)extractExceptionInfo:(Plcrash__CrashReport__Exception*)info error:(id*)error;
-(id)extractImageInfo:(Plcrash__CrashReport*)info error:(id*)error;
-(id)extractThreadInfo:(Plcrash__CrashReport*)info error:(id*)error;
-(id)extractStackFrameInfo:(Plcrash__CrashReport__Thread__StackFrame*)info error:(id*)error;
-(id)extractProcessInfo:(Plcrash__CrashReport__ProcessInfo*)info error:(id*)error;
-(id)extractApplicationInfo:(Plcrash__CrashReport__ApplicationInfo*)info error:(id*)error;
-(id)extractMachineInfo:(Plcrash__CrashReport__MachineInfo*)info error:(id*)error;
-(id)extractProcessorInfo:(Plcrash__CrashReport__Processor*)info error:(id*)error;
-(id)extractSystemInfo:(Plcrash__CrashReport__SystemInfo*)info error:(id*)error;
-(id)extractReportInfo:(Plcrash__CrashReport__ReportInfo*)info error:(id*)error;
-(Plcrash__CrashReport*)decodeCrashData:(id)data error:(id*)error;
@end

@interface PLCrashReportSystemInfo : NSObject {
	int _operatingSystem;
	NSString* _osVersion;
	NSString* _osBuild;
	int _architecture;
	NSDate* _timestamp;
}
@property(readonly, assign, nonatomic) NSDate* timestamp;
@property(readonly, assign, nonatomic) int architecture;
@property(readonly, assign, nonatomic) NSString* operatingSystemBuild;
@property(readonly, assign, nonatomic) NSString* operatingSystemVersion;
@property(readonly, assign, nonatomic) int operatingSystem;
-(void)dealloc;
-(id)initWithOperatingSystem:(int)operatingSystem operatingSystemVersion:(id)version operatingSystemBuild:(id)build architecture:(int)architecture timestamp:(id)timestamp;
-(id)initWithOperatingSystem:(int)operatingSystem operatingSystemVersion:(id)version architecture:(int)architecture timestamp:(id)timestamp;
@end

@interface PLCrashReportApplicationInfo : NSObject {
	NSString* _applicationIdentifier;
	NSString* _applicationVersion;
	NSString* _applicationShortVersion;
	NSDate* _applicationStartupTimestamp;
}
@property(readonly, assign, nonatomic) NSDate* applicationStartupTimestamp;
@property(readonly, assign, nonatomic) NSString* applicationShortVersion;
@property(readonly, assign, nonatomic) NSString* applicationVersion;
@property(readonly, assign, nonatomic) NSString* applicationIdentifier;
-(void)dealloc;
-(id)initWithApplicationIdentifier:(id)applicationIdentifier applicationVersion:(id)version applicationShortVersion:(id)version3 applicationStartupTimestamp:(id)timestamp;
@end

@interface PLCrashReportThreadInfo : NSObject {
	int _threadNumber;
	NSArray* _stackFrames;
	BOOL _crashed;
	NSArray* _registers;
}
@property(readonly, assign, nonatomic) NSArray* registers;
@property(readonly, assign, nonatomic) BOOL crashed;
@property(readonly, assign, nonatomic) NSArray* stackFrames;
@property(readonly, assign, nonatomic) int threadNumber;
-(void)dealloc;
-(id)initWithThreadNumber:(int)threadNumber stackFrames:(id)frames crashed:(BOOL)crashed registers:(id)registers;
@end

@interface PLCrashReportStackFrameInfo : NSObject {
	unsigned long long _instructionPointer;
	unsigned long long _symbolStart;
	NSString* _symbolName;
}
@property(readonly, assign, nonatomic) NSString* symbolName;
@property(readonly, assign, nonatomic) unsigned long long symbolStart;
@property(readonly, assign, nonatomic) unsigned long long instructionPointer;
-(void)dealloc;
-(id)initWithInstructionPointer:(unsigned long long)instructionPointer symbolStart:(unsigned long long)start symbolName:(id)name;
@end

@interface PLCrashReportRegisterInfo : NSObject {
	NSString* _registerName;
	unsigned long long _registerValue;
}
@property(readonly, assign, nonatomic) unsigned long long registerValue;
@property(readonly, assign, nonatomic) NSString* registerName;
-(void)dealloc;
-(id)initWithRegisterName:(id)registerName registerValue:(unsigned long long)value;
@end

@interface PLCrashReportBinaryImageInfo : NSObject {
	PLCrashReportProcessorInfo* _processorInfo;
	unsigned long long _baseAddress;
	unsigned long long _imageSize;
	NSString* _imageName;
	BOOL _hasImageUUID;
	NSString* _imageUUID;
}
@property(readonly, assign, nonatomic) NSString* imageUUID;
@property(readonly, assign, nonatomic) BOOL hasImageUUID;
@property(readonly, assign, nonatomic) NSString* imageName;
@property(readonly, assign, nonatomic) unsigned long long imageSize;
@property(readonly, assign, nonatomic) unsigned long long imageBaseAddress;
@property(readonly, assign, nonatomic) PLCrashReportProcessorInfo* codeType;
-(void)dealloc;
-(id)initWithCodeType:(id)codeType baseAddress:(unsigned long long)address size:(unsigned long long)size name:(id)name uuid:(id)uuid;
@end

@interface PLCrashReportExceptionInfo : NSObject {
	NSString* _name;
	NSString* _reason;
	NSArray* _stackFrames;
}
@property(readonly, assign, nonatomic) NSArray* stackFrames;
@property(readonly, assign, nonatomic) NSString* exceptionReason;
@property(readonly, assign, nonatomic) NSString* exceptionName;
-(void)dealloc;
-(id)initWithExceptionName:(id)exceptionName reason:(id)reason stackFrames:(id)frames;
-(id)initWithExceptionName:(id)exceptionName reason:(id)reason;
@end

@interface PLCrashReportSignalInfo : NSObject {
	NSString* _name;
	NSString* _code;
	unsigned long long _address;
}
@property(readonly, assign, nonatomic) unsigned long long address;
@property(readonly, assign, nonatomic) NSString* code;
@property(readonly, assign, nonatomic) NSString* name;
-(void)dealloc;
-(id)initWithSignalName:(id)signalName code:(id)code address:(unsigned long long)address;
@end

@interface PLCrashReportProcessInfo : NSObject {
	NSString* _processName;
	unsigned _processID;
	NSString* _processPath;
	NSString* _parentProcessName;
	unsigned _parentProcessID;
	BOOL _native;
}
@property(readonly, assign, nonatomic) BOOL native;
@property(readonly, assign, nonatomic) unsigned parentProcessID;
@property(readonly, assign, nonatomic) NSString* parentProcessName;
@property(readonly, assign, nonatomic) NSString* processPath;
@property(readonly, assign, nonatomic) unsigned processID;
@property(readonly, assign, nonatomic) NSString* processName;
-(void)dealloc;
-(id)initWithProcessName:(id)processName processID:(unsigned)anId processPath:(id)path parentProcessName:(id)name parentProcessID:(unsigned)anId5 native:(BOOL)native;
@end

@interface PLCrashReportTextFormatter : NSObject <PLCrashReportFormatter> {
	int _textFormat;
	unsigned _stringEncoding;
}
+(id)stringValueForCrashReport:(id)crashReport withTextFormat:(int)textFormat;
+(id)formatStackFrame:(id)frame frameIndex:(unsigned)index report:(id)report;
-(id)formatReport:(id)report error:(id*)error;
-(id)initWithTextFormat:(int)textFormat stringEncoding:(unsigned)encoding;
@end

@interface PLCrashReportProcessorInfo : NSObject {
	int _typeEncoding;
	unsigned long long _type;
	unsigned long long _subtype;
}
@property(readonly, assign, nonatomic) unsigned long long subtype;
@property(readonly, assign, nonatomic) unsigned long long type;
@property(readonly, assign, nonatomic) int typeEncoding;
-(id)initWithTypeEncoding:(int)typeEncoding type:(unsigned long long)type subtype:(unsigned long long)subtype;
@end

@interface PLCrashReportMachineInfo : NSObject {
	NSString* _modelName;
	PLCrashReportProcessorInfo* _processorInfo;
	unsigned _processorCount;
	unsigned _logicalProcessorCount;
}
@property(readonly, assign, nonatomic) unsigned logicalProcessorCount;
@property(readonly, assign, nonatomic) unsigned processorCount;
@property(readonly, assign, nonatomic) PLCrashReportProcessorInfo* processorInfo;
@property(readonly, assign, nonatomic) NSString* modelName;
-(void)dealloc;
-(id)initWithModelName:(id)modelName processorInfo:(id)info processorCount:(unsigned)count logicalProcessorCount:(unsigned)count4;
@end

@interface PLCrashReportReportInfo : NSObject {
	NSString* _reportGUID;
}
@property(readonly, assign, nonatomic) NSString* reportGUID;
-(void)dealloc;
-(id)initWithReportGUID:(id)reportGUID;
@end

@interface FORCELOAD_NSBundle_Smartling_i18n : NSObject {
}
@end

@interface ThriftNeloEvent : NSObject <NSCoding> {
	NSString* __projectName;
	NSString* __projectVersion;
	NSString* __logType;
	NSString* __logSource;
	NSData* __body;
	long long __sendTime;
	NSString* __host;
	NSMutableDictionary* __fields;
	BOOL __projectName_isset;
	BOOL __projectVersion_isset;
	BOOL __logType_isset;
	BOOL __logSource_isset;
	BOOL __body_isset;
	BOOL __sendTime_isset;
	BOOL __host_isset;
	BOOL __fields_isset;
}
@property(retain, nonatomic, getter=fields, setter=setFields:) NSMutableDictionary* fields;
@property(retain, nonatomic, getter=host, setter=setHost:) NSString* host;
@property(assign, nonatomic, getter=sendTime, setter=setSendTime:) long long sendTime;
@property(retain, nonatomic, getter=body, setter=setBody:) NSData* body;
@property(retain, nonatomic, getter=logSource, setter=setLogSource:) NSString* logSource;
@property(retain, nonatomic, getter=logType, setter=setLogType:) NSString* logType;
@property(retain, nonatomic, getter=projectVersion, setter=setProjectVersion:) NSString* projectVersion;
@property(retain, nonatomic, getter=projectName, setter=setProjectName:) NSString* projectName;
-(id)description;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)unsetFields;
-(BOOL)fieldsIsSet;
-(void)unsetHost;
-(BOOL)hostIsSet;
-(void)unsetSendTime;
-(BOOL)sendTimeIsSet;
-(void)unsetBody;
-(BOOL)bodyIsSet;
-(void)unsetLogSource;
-(BOOL)logSourceIsSet;
-(void)unsetLogType;
-(BOOL)logTypeIsSet;
-(void)unsetProjectVersion;
-(BOOL)projectVersionIsSet;
-(void)unsetProjectName;
-(BOOL)projectNameIsSet;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithProjectName:(id)projectName projectVersion:(id)version logType:(id)type logSource:(id)source body:(id)body sendTime:(long long)time host:(id)host fields:(id)fields;
-(id)init;
@end

@interface nelo2Constants : NSObject {
}
+(void)initialize;
@end

@interface append_args : NSObject <NSCoding> {
	ThriftNeloEvent* __evt;
	BOOL __evt_isset;
}
@property(retain, nonatomic, getter=evt, setter=setEvt:) ThriftNeloEvent* evt;
-(id)description;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)unsetEvt;
-(BOOL)evtIsSet;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithEvt:(id)evt;
-(id)init;
@end

@interface appendList_args : NSObject <NSCoding> {
	NSMutableArray* __evt;
	BOOL __evt_isset;
}
@property(retain, nonatomic, getter=evt, setter=setEvt:) NSMutableArray* evt;
-(id)description;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)unsetEvt;
-(BOOL)evtIsSet;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithEvt:(id)evt;
-(id)init;
@end

@interface ackedAppend_args : NSObject <NSCoding> {
	ThriftNeloEvent* __evt;
	BOOL __evt_isset;
}
@property(retain, nonatomic, getter=evt, setter=setEvt:) ThriftNeloEvent* evt;
-(id)description;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)unsetEvt;
-(BOOL)evtIsSet;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithEvt:(id)evt;
-(id)init;
@end

@interface AckedAppend_result : NSObject <NSCoding> {
	int __success;
	BOOL __success_isset;
}
@property(assign, nonatomic, getter=success, setter=setSuccess:) int success;
-(id)description;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)unsetSuccess;
-(BOOL)successIsSet;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithSuccess:(int)success;
-(id)init;
@end

@interface ackedAppendList_args : NSObject <NSCoding> {
	NSMutableArray* __evt;
	BOOL __evt_isset;
}
@property(retain, nonatomic, getter=evt, setter=setEvt:) NSMutableArray* evt;
-(id)description;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)unsetEvt;
-(BOOL)evtIsSet;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithEvt:(id)evt;
-(id)init;
@end

@interface AckedAppendList_result : NSObject <NSCoding> {
	int __success;
	BOOL __success_isset;
}
@property(assign, nonatomic, getter=success, setter=setSuccess:) int success;
-(id)description;
-(void)write:(id)write;
-(void)read:(id)read;
-(void)unsetSuccess;
-(BOOL)successIsSet;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithSuccess:(int)success;
-(id)init;
@end

@interface ThriftNeloEventServerClient : NSObject <ThriftNeloEventServer> {
	id<NeloTProtocol> inProtocol;
	id<NeloTProtocol> outProtocol;
}
-(int)ackedAppendList:(id)list;
-(int)recv_ackedAppendList;
-(void)send_ackedAppendList:(id)list;
-(int)ackedAppend:(id)append;
-(int)recv_ackedAppend;
-(void)send_ackedAppend:(id)append;
-(void)appendList:(id)list;
-(void)send_appendList:(id)list;
-(void)append:(id)append;
-(void)send_append:(id)append;
-(void)dealloc;
-(id)initWithInProtocol:(id)protocol outProtocol:(id)protocol2;
-(id)initWithProtocol:(id)protocol;
@end

@interface ThriftNeloEventServerProcessor : NSObject <NeloTProcessor> {
	id<ThriftNeloEventServer> mService;
	NSDictionary* mMethodMap;
}
-(void)dealloc;
-(void)process_ackedAppendList_withSequenceID:(int)sequenceID inProtocol:(id)protocol outProtocol:(id)protocol3;
-(void)process_ackedAppend_withSequenceID:(int)sequenceID inProtocol:(id)protocol outProtocol:(id)protocol3;
-(BOOL)processOnInputProtocol:(id)protocol outputProtocol:(id)protocol2;
-(id)service;
-(id)initWithThriftNeloEventServer:(id)thriftNeloEventServer;
@end

@interface NeloBlockQueue : NSObject {
	NSMutableArray* logArray;
	NSCondition* condition;
}
-(id)dataFilePath;
-(void)loadFromFile;
-(void)saveToFile;
-(id)dequeue;
-(void)enqueue:(id)enqueue;
-(void)dealloc;
-(id)init;
@end

@interface NeloTBinaryProtocolFactory : NSObject <NeloTProtocolFactory> {
}
+(id)sharedFactory;
-(id)newProtocolOnTransport:(id)transport;
@end

@interface NeloTBinaryProtocol : NSObject <NeloTProtocol> {
	id<NeloTTransport> mTransport;
	BOOL mStrictRead;
	BOOL mStrictWrite;
	int mMessageSizeLimit;
}
-(void)writeBool:(BOOL)aBool;
-(void)writeListEnd;
-(void)writeListBeginWithElementType:(int)elementType size:(int)size;
-(void)writeSetEnd;
-(void)writeSetBeginWithElementType:(int)elementType size:(int)size;
-(void)writeMapEnd;
-(void)writeMapBeginWithKeyType:(int)keyType valueType:(int)type size:(int)size;
-(void)writeFieldEnd;
-(void)writeFieldStop;
-(void)writeBinary:(id)binary;
-(void)writeString:(id)string;
-(void)writeDouble:(double)aDouble;
-(void)writeI64:(long long)a64;
-(void)writeI16:(short)a16;
-(void)writeI32:(int)a32;
-(void)writeFieldBeginWithName:(id)name type:(int)type fieldID:(int)anId;
-(void)writeStructEnd;
-(void)writeStructBeginWithName:(id)name;
-(void)writeMessageEnd;
-(void)writeMessageBeginWithName:(id)name type:(int)type sequenceID:(int)anId;
-(void)writeByte:(unsigned char)byte;
-(void)readListEnd;
-(void)readListBeginReturningElementType:(int*)type size:(int*)size;
-(void)readSetEnd;
-(void)readSetBeginReturningElementType:(int*)type size:(int*)size;
-(void)readMapEnd;
-(void)readMapBeginReturningKeyType:(int*)type valueType:(int*)type2 size:(int*)size;
-(id)readBinary;
-(double)readDouble;
-(long long)readI64;
-(short)readI16;
-(unsigned char)readByte;
-(BOOL)readBool;
-(id)readString;
-(int)readI32;
-(void)readFieldEnd;
-(void)readFieldBeginReturningName:(id*)name type:(int*)type fieldID:(int*)anId;
-(void)readStructEnd;
-(void)readStructBeginReturningName:(id*)name;
-(void)readMessageEnd;
-(void)readMessageBeginReturningName:(id*)name type:(int*)type sequenceID:(int*)anId;
-(id)readStringBody:(int)body;
-(id)transport;
-(void)dealloc;
-(void)setMessageSizeLimit:(int)limit;
-(int)messageSizeLimit;
-(id)initWithTransport:(id)transport strictRead:(BOOL)read strictWrite:(BOOL)write;
-(id)initWithTransport:(id)transport;
@end

__attribute__((objc_exception))
@interface NeloTProtocolException : NeloTException {
}
@end

__attribute__((objc_exception))
@interface NeloTException : NSException {
}
+(id)exceptionWithName:(id)name reason:(id)reason error:(id)error;
+(id)exceptionWithName:(id)name reason:(id)reason;
+(id)exceptionWithName:(id)name;
-(id)description;
@end

__attribute__((objc_exception))
@interface NeloTTransportException : NeloTException {
}
+(id)exceptionWithReason:(id)reason;
+(id)exceptionWithReason:(id)reason error:(id)error;
@end

@interface NeloLog : NSObject {
}
+(void)applicationDidEnterBackground:(id)application;
+(void)applicationWillEnterForeground:(id)application;
+(void)logSendThread:(id)thread;
+(void)reachabilityChanged:(id)changed;
+(void)setCrashBlock:(id)block;
+(void)enableSendCrashReport;
+(void)neloSendCrash:(void*)crash;
+(id)getNetworkString:(id)string;
+(bool)isValidVersion:(id)version;
+(bool)isValidField:(id)field;
+(id)getIPAddress;
+(void)sendCrashReport;
+(void)transportFile:(id)file fileData:(void*)data fileSize:(unsigned)size errorCode:(id)code logBody:(id)body;
+(void)sendLog:(id)log errorCode:(id)code withMessage:(id)message atLocation:(id)location;
+(void)copyCommonFields:(id)fields;
+(void)warn:(id)warn withMessage:(id)message atLocation:(id)location;
+(void)info:(id)info withMessage:(id)message atLocation:(id)location;
+(void)fatal:(id)fatal withMessage:(id)message atLocation:(id)location;
+(void)error:(id)error withMessage:(id)message atLocation:(id)location;
+(void)debug:(id)debug withMessage:(id)message atLocation:(id)location;
+(void)warn:(id)warn withMessage:(id)message;
+(void)info:(id)info withMessage:(id)message;
+(void)fatal:(id)fatal withMessage:(id)message;
+(void)error:(id)error withMessage:(id)message;
+(void)debug:(id)debug withMessage:(id)message;
+(void)removeAllCustomFields;
+(void)removeCustomFieldForKey:(id)key;
+(void)setCustomField:(id)field forKey:(id)key;
+(void)setLogSource:(id)source;
+(void)setLogType:(id)type;
+(void)setUserId:(id)anId;
+(bool)init:(id)init onPort:(int)port ofProjectName:(id)projectName withProjectVersion:(id)projectVersion forUserId:(id)userId;
+(bool)init:(id)init onPort:(int)port ofProjectName:(id)projectName withProjectVersion:(id)projectVersion;
@end

@interface NeloTFramedTransport : NSObject <NeloTTransport> {
	id<NeloTTransport> mTransport;
	NSMutableData* writeBuffer;
	NSMutableData* readBuffer;
	unsigned readOffset;
	unsigned char dummy_header[4];
}
-(void)close;
-(void)readFrame;
-(int)readAll:(char*)all offset:(int)offset length:(int)length;
-(void)write:(const char*)write offset:(unsigned)offset length:(unsigned)length;
-(void)flush;
-(void)dealloc;
-(id)initWithTransport:(id)transport;
@end

__attribute__((objc_exception))
@interface NeloTApplicationException : NeloTException {
	int mType;
}
+(id)exceptionWithType:(int)type reason:(id)reason;
+(id)read:(id)read;
-(void)write:(id)write;
-(id)initWithType:(int)type reason:(id)reason;
@end

@interface NeloTProtocolUtil : NSObject {
}
+(void)skipType:(int)type onProtocol:(id)protocol;
@end

@interface NeloTSocketClient2 : NSObject <NeloTTransport> {
	int fdSocket;
}
-(void)flush;
-(void)write:(const char*)write offset:(unsigned)offset length:(unsigned)length;
-(int)readAll:(char*)all offset:(int)offset length:(int)length;
-(void)dealloc;
-(void)close;
-(id)initWithHostname:(id)hostname port:(int)port;
@end

@interface NeloReachability : NSObject {
	SCNetworkReachabilityRef reachabilityRef;
	dispatch_queue_s* reachabilitySerialQueue;
	id reachabilityObject;
	id reachableBlock;
	id unreachableBlock;
	BOOL reachableOnWWAN;
}
@property(retain, nonatomic) id reachabilityObject;
@property(assign, nonatomic) dispatch_queue_s* reachabilitySerialQueue;
@property(assign, nonatomic) SCNetworkReachabilityRef reachabilityRef;
@property(assign, nonatomic) BOOL reachableOnWWAN;
@property(copy, nonatomic) id unreachableBlock;
@property(copy, nonatomic) id reachableBlock;
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostname:(id)hostname;
+(id)reachabilityWithHostName:(id)hostName;
-(id)description;
-(void)reachabilityChanged:(unsigned)changed;
-(id)currentReachabilityFlags;
-(id)currentReachabilityString;
-(unsigned)reachabilityFlags;
-(int)currentReachabilityStatus;
-(BOOL)isInterventionRequired;
-(BOOL)isConnectionOnDemand;
-(BOOL)connectionRequired;
-(BOOL)isConnectionRequired;
-(BOOL)isReachableViaWiFi;
-(BOOL)isReachableViaWWAN;
-(BOOL)isReachable;
-(BOOL)isReachableWithFlags:(unsigned)flags;
-(void)stopNotifier;
-(BOOL)startNotifier;
-(void)dealloc;
-(id)initWithReachabilityRef:(SCNetworkReachabilityRef)reachabilityRef;
@end

@interface NeloDeviceInfo : NSObject {
}
+(id)getInstance;
-(id)platformString;
-(unsigned)platformType;
-(id)platform;
-(id)getSysInfoByName:(char*)name;
@end

@interface NeloFormatter : NSObject {
}
+(id)reportKey;
+(id)uuid;
+(id)formatStackFrame:(id)frame frameIndex:(unsigned)index report:(id)report;
+(id)stringValueForCrashReport:(id)crashReport withTextFormat:(int)textFormat;
@end

@interface NeloPhoneInfo : NSObject {
}
+(id)sharedInstance;
-(BOOL)isJailbroken;
-(id)freeSpace;
-(id)freeMemory;
-(id)preferedLanguage;
@end

@interface NeloHandle : NSObject {
	NSString* projectName;
	NSString* projectVersion;
	NSString* collectorUrl;
	int collectorPort;
	NSString* userId;
	NSString* logType;
	NSString* logSource;
	NSString* networkType;
	NSMutableDictionary* customFields;
	NeloReachability* reachability;
	bool isReachable;
}
@property(assign) bool isReachable;
@property(assign) int collectorPort;
@property(retain, nonatomic) NeloReachability* reachability;
@property(retain, nonatomic) NSMutableDictionary* customFields;
@property(retain, nonatomic) NSString* networkType;
@property(retain, nonatomic) NSString* logSource;
@property(retain, nonatomic) NSString* logType;
@property(retain, nonatomic) NSString* userId;
@property(retain, nonatomic) NSString* collectorUrl;
@property(retain, nonatomic) NSString* projectVersion;
@property(retain, nonatomic) NSString* projectName;
-(void)dealloc;
-(id)init;
@end

@interface NSException (LineAdditions)
-(id)toErrorObject;
@end

@interface NSBundle (LAAdditions)
+(id)lineAlbumBundle;
@end

@interface UIImage (MBAdditions)
+(id)mbLocalizablePath;
+(id)mbEnImageNamed:(id)named;
+(id)mbLocalizableImageNamed:(id)named;
+(id)mbImageNamed:(id)named;
-(id)tiledImageWithSize:(CGSize)size;
@end

@interface NSString (MBAdditions)
+(BOOL)isEmpty:(id)empty;
@end

@interface UIButton (ActionBlock)
+(id)buttonWithType:(int)type actionBlock:(id)block;
-(void)__buttonTapped:(id)tapped;
-(id)actionBlock;
-(void)setActionBlock:(id)block;
@end

@interface SKProduct (LineAdditions)
-(id)currency;
-(id)currencySymbol;
-(id)priceString;
@end

@interface CALayer (TalkAdditions)
-(void)enableDebuggingBorder;
@end

@interface UIView (TalkAdditions)
-(void)setEnableDebuggingBorder:(BOOL)border withColor:(id)color isDebuggingLayer:(BOOL)layer;
-(void)debuggingBorderTimeTick:(id)tick;
-(void)enableDebuggingBorder;
@end

@interface NSData (Blocks)
+(void)dataWithContentsOfFile:(id)file completionBlock:(id)block;
+(void)dataWithContentsOfURLOnMainQuque:(id)urlonMainQuque completionBlock:(id)block;
+(void)dataWithContentsOfURL:(id)url completionBlock:(id)block;
@end

@interface UIAlertView (NPAdditions) <UIAlertViewDelegate>
+(BOOL)isShownAlertViews:(id)views;
+(void)dismissAlertViews:(id)views;
+(id)showConfirmTitleWithBody:(id)body completionBlock:(id)block;
+(id)showConfirmTitle:(id)title withBody:(id)body cancelButtonTitle:(id)title3 otherButtonTitle:(id)title4 completionBlock:(id)block;
+(id)showConfirmTitle:(id)title withBody:(id)body otherButtonTitle:(id)title3 completionBlock:(id)block;
+(id)showConfirm:(id)confirm otherButtonTitle:(id)title completionBlock:(id)block;
+(id)showConfirmTitle:(id)title withBody:(id)body completionBlock:(id)block;
+(id)showConfirm:(id)confirm completionBlock:(id)block;
+(id)showAlert:(id)alert cancelButtonTitle:(id)title otherButtonTitle:(id)title3 completionBlock:(id)block;
+(id)showAlert:(id)alert completionBlock:(id)block button1:(id)a1 button2:(id)a2;
+(id)showAlert:(id)alert completionBlock:(id)block;
+(id)showAlertTitle:(id)title withBody:(id)body completionBlock:(id)block;
+(id)showAlertTitleWithBody:(id)body completionBlock:(id)block;
+(id)showingAlertViews;
+(id)activityAlertViewWithMessage:(id)message;
+(id)showError:(id)error delegate:(id)delegate;
+(id)showError:(id)error;
+(id)showConfirmTitleWithBody:(id)body delegate:(id)delegate;
+(id)showConfirmTitle:(id)title withBody:(id)body delegate:(id)delegate;
+(id)showConfirm:(id)confirm delegate:(id)delegate;
+(id)showAlert:(id)alert delegate:(id)delegate;
+(id)showAlertTitle:(id)title withBody:(id)body delegate:(id)delegate;
+(id)showAlertTitle:(id)title withBody:(id)body;
+(id)showAlertTitleWithBody:(id)body delegate:(id)delegate;
+(id)showAlertTitleWithBody:(id)body;
+(id)showAlert:(id)alert;
+(id)showMessage:(id)message;
-(void)makeKeyWindowIfExist;
-(void)setLastKeyWindowForNPAdditions:(id)npadditions;
-(void)dismiss;
-(void)doCompletionBlock:(id)block;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)initWithTitle:(id)title message:(id)message completionBlock:(id)block cancelButtonTitle:(id)title4 otherButtonTitles:(id)titles;
@end

@interface NSError (NPAdditions)
-(BOOL)isUnexpectedError;
-(BOOL)isNetworkError;
-(id)localizedDescriptionPICK;
@end

@interface UITableView (reload)
-(void)reloadDataWithDuration:(float)duration;
@end

@interface NSObject (NilObject)
-(BOOL)isNotNull;
@end

@interface NSNull (NilObject)
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(BOOL)isNotNull;
@end

@interface NSString (NPAdditions)
-(BOOL)validateEmail;
-(id)truncatedStringToFitWidth:(float)fitWidth withFont:(id)font;
-(BOOL)isContainEmojiCharacters;
-(id)stringByRemovingNewLineCharacters;
-(id)stringByRemovingEmojiCharacters;
-(id)stringByAddingPercentEscapes;
-(id)stringByTrimmingWhitespaces;
-(id)stringOrNilIfEmpty;
-(id)string;
-(id)sha1;
-(id)md5;
-(id)XMLString;
@end

@interface NSURL (NPAdditions)
+(id)URLWithStringIfNotNil:(id)stringIfNotNil;
-(id)paramDict;
-(id)normalizedString;
@end

@interface NSMutableArray (SWUtilityButtons)
-(void)sw_addUtilityButtonWithColor:(id)color icon:(id)icon;
-(void)sw_addUtilityButtonWithColor:(id)color title:(id)title;
@end

@interface UIImage (Addition)
+(id)imageWithColor:(id)color;
+(id)rotateToOrientationUp:(id)orientationUp;
+(id)imageNamedWithContentsOfFile:(id)file;
+(id)imageByCropping:(id)cropping toRect:(CGRect)rect;
-(id)imageByRotatingToOrientationUpWithContentMode:(int)contentMode maxSize:(CGSize)size;
-(id)imageByRotatingToOrientationUpWithMaxSize:(CGSize)maxSize;
@end

@interface UIBarButtonItem (TalkAdditions)
+(id)backButtonItemWithTitle:(id)title target:(id)target action:(SEL)action isLandscape:(BOOL)landscape;
+(id)backButtonItemWithBadgeCount:(id)badgeCount target:(id)target action:(SEL)action isLandscape:(BOOL)landscape;
+(id)imageFromText:(id)text withFont:(id)font textColor:(id)color shadowColor:(id)color4 shadowOffset:(CGSize)offset;
+(id)backButtonItemWithCustomView:(id)customView target:(id)target action:(SEL)action isLandscape:(BOOL)landscape;
+(id)backButtonItem:(id)item action:(SEL)action isLandscape:(BOOL)landscape;
+(id)backButtonItem:(id)item action:(SEL)action;
+(id)toggleButtonItemWithTitle:(id)title secondTitle:(id)title2 target:(id)target action:(SEL)action;
+(id)groupedBarButtonItemWithItems:(id)items;
+(id)buttonItemBuddyHomeForLandscape:(id)landscape action:(SEL)action;
+(id)buttonItemBuddyHome:(id)home action:(SEL)action;
+(id)buttonItemLineAt:(id)at action:(SEL)action;
+(id)buttonItemRemove:(id)remove action:(SEL)action;
+(id)buttonItemWrite:(id)write action:(SEL)action;
+(id)buttonItemMySticker:(id)sticker action:(SEL)action;
+(id)buttonItemQuestion:(id)question action:(SEL)action;
+(id)buttonItemEditMenu:(id)menu action:(SEL)action;
+(id)buttonItemEdit:(id)edit action:(SEL)action;
+(id)buttonItemMapMenu:(id)menu action:(SEL)action;
+(id)buttonItemGroupBoardForLandscape:(id)landscape action:(SEL)action;
+(id)buttonItemGroupBoard:(id)board action:(SEL)action;
+(id)buttonItemChatMenuForLandscape:(id)landscape action:(SEL)action;
+(id)buttonItemChatMenu:(id)menu action:(SEL)action;
+(id)buttonItemAddChat:(id)chat action:(SEL)action;
+(id)buttonItemAddGroup:(id)group action:(SEL)action;
+(id)buttonItemAddFriend:(id)aFriend action:(SEL)action;
+(id)buttonItemAdd:(id)add action:(SEL)action;
+(id)buttonItemCoinChargeHighlightedWithTitle:(id)title target:(id)target action:(SEL)action;
+(id)buttonItemStyledHighlightedWithTitle:(id)title target:(id)target action:(SEL)action;
+(id)buttonItemHighlightedWithTitle:(id)title target:(id)target action:(SEL)action;
+(id)defaultStyledButtonItemWithTitle:(id)title target:(id)target action:(SEL)action;
+(id)buttonItemWithTitle:(id)title target:(id)target action:(SEL)action;
+(id)customNavigationBackButtonForLandscape;
+(id)customNavigationBackButton;
+(id)customNavigationButtonForLandscape;
+(id)customNavigationButton;
+(id)defaultStyledCustomNavigationButton;
-(void)setNewIcon:(BOOL)icon onGroupedBarButtonItemAtIndex:(int)index;
-(void)setNewIcon:(BOOL)icon;
@end

@interface UIColor (TalkAdditions)
+(id)colorWithHexString:(id)hexString;
+(id)tableViewBackgroundColor;
-(int)rgbColor;
@end

@interface UIButton (TalkAdditions)
+(id)listButtonTypeWithTitle:(id)title font:(id)font maxButtonWidth:(float)width;
+(id)listButtonTypeWithTitle:(id)title font:(id)font;
+(id)buttonType02WithTitle:(id)title font:(id)font;
+(id)buttonWithImage:(id)image titleLabel:(id)label buttonWidth:(float)width;
+(id)buttonWithImage:(id)image title:(id)title titleFontSize:(float)size buttonWidth:(float)width;
+(id)buttonWithImage:(id)image title:(id)title titleHorizontalMargin:(float)margin fontSize:(float)size;
+(id)buttonWithImage:(id)image title:(id)title titleHorizontalMargin:(float)margin;
+(id)buttonWithImage:(id)image title:(id)title titleHorizontalMargin:(float)margin maxButtonWidth:(float)width;
+(id)buttonWithImage:(id)image imageLeftCapWidth:(float)width title:(id)title titleHorizontalMargin:(float)margin maxButtonWidth:(float)width5;
+(id)buttonWithImage:(id)image imageLeftCapWidth:(float)width title:(id)title titleHorizontalMargin:(float)margin titleFont:(id)font maxButtonWidth:(float)width6;
+(id)titleLabelType3WithText:(id)text;
+(id)titleLabelWithText:(id)text fontSize:(float)size;
+(id)titleLabelWithText:(id)text font:(id)font;
-(void)actionButtonTapped:(id)tapped;
-(void)setActionEventBlock:(id)block;
-(id)actionEventBlock;
-(void)makeTogglable;
@end

@interface UILabel (TalkAdditions)
+(CGSize)sizeOfLabel:(id)label font:(id)font;
+(void)removeLineInView:(id)view;
+(void)drawLine:(float)line offset:(float)offset Y:(float)y topLineColor:(id)color bottomLineColor:(id)color5 inView:(id)view;
+(void)drawLine:(float)line Y:(float)y topLineColor:(id)color bottomLineColor:(id)color4 inView:(id)view;
+(void)drawLine:(float)line Y:(float)y color:(id)color inView:(id)view;
+(void)drawLine:(float)line Y:(float)y inView:(id)view;
-(CGSize)sizeToFitOfLinesAndWidth:(float)linesAndWidth;
-(void)sizeToFitWidth:(float)fitWidth;
@end

@interface NSDate (TalkAdditions)
-(id)dateByAddMinute:(int)minute;
-(id)stringWithFormat:(id)format;
-(id)dateByAddMonths:(int)months;
-(id)dateWithMillisecondsTruncated;
-(long long)lineTimestamp;
-(id)initWithLineTimestamp:(long long)lineTimestamp;
@end

@interface UIFont (NPAdditions)
+(id)boldNumberFontOfSize:(float)size;
+(id)normalNumberFontOfSize:(float)size;
+(id)boldTextFontOfSize:(float)size;
+(id)normalTextFontOfSize:(float)size;
@end

@interface NSError (CommonCryptoErrorDomain)
+(id)errorWithCCCryptorStatus:(int)cccryptorStatus;
@end

@interface NSData (CommonDigest)
-(id)SHA512Hash;
-(id)SHA384Hash;
-(id)SHA256Hash;
-(id)SHA224Hash;
-(id)SHA1Hash;
-(id)MD5Sum;
-(id)MD4Sum;
-(id)MD2Sum;
@end

@interface NSData (CommonCryptor)
-(id)decryptedCASTDataUsingKey:(id)key error:(id*)error;
-(id)CASTEncryptedDataUsingKey:(id)key error:(id*)error;
-(id)decryptedDESDataUsingKey:(id)key error:(id*)error;
-(id)DESEncryptedDataUsingKey:(id)key error:(id*)error;
-(id)decryptedAES256DataUsingKey:(id)key error:(id*)error;
-(id)AES256EncryptedDataUsingKey:(id)key error:(id*)error;
@end

@interface NSData (LowLevelCommonCryptor)
-(id)decryptedDataUsingAlgorithm:(unsigned)algorithm key:(id)key initializationVector:(id)vector options:(unsigned)options error:(int*)error;
-(id)decryptedDataUsingAlgorithm:(unsigned)algorithm key:(id)key options:(unsigned)options error:(int*)error;
-(id)decryptedDataUsingAlgorithm:(unsigned)algorithm key:(id)key error:(int*)error;
-(id)dataEncryptedUsingAlgorithm:(unsigned)algorithm key:(id)key initializationVector:(id)vector options:(unsigned)options error:(int*)error;
-(id)dataEncryptedUsingAlgorithm:(unsigned)algorithm key:(id)key options:(unsigned)options error:(int*)error;
-(id)dataEncryptedUsingAlgorithm:(unsigned)algorithm key:(id)key error:(int*)error;
-(id)_runCryptor:(CCCryptorRef)cryptor result:(int*)result;
@end

@interface NSData (CommonHMAC)
-(id)HMACWithAlgorithm:(unsigned)algorithm key:(id)key;
-(id)HMACWithAlgorithm:(unsigned)algorithm;
@end

@interface NSManagedObject (LineAdditions)
+(unsigned)countUsingPredicate:(id)predicate error:(id*)error inContext:(id)context;
+(unsigned)countUsingPredicate:(id)predicate inContext:(id)context;
+(id)objectsUsingPredicate:(id)predicate sortDescriptors:(id)descriptors limit:(unsigned)limit asFaults:(BOOL)faults error:(id*)error inContext:(id)context;
+(id)objectsAsFaultsUsingPredicate:(id)predicate sortDescriptors:(id)descriptors limit:(unsigned)limit error:(id*)error inContext:(id)context;
+(id)objectsAsFaultsUsingPredicate:(id)predicate sortDescriptors:(id)descriptors limit:(unsigned)limit inContext:(id)context;
+(id)objectsAsFaultsUsingPredicate:(id)predicate sortDescriptors:(id)descriptors inContext:(id)context;
+(id)objectsAsFaultsUsingPredicate:(id)predicate inContext:(id)context;
+(id)objectsUsingPredicate:(id)predicate sortDescriptors:(id)descriptors limit:(unsigned)limit error:(id*)error inContext:(id)context;
+(id)objectsUsingPredicate:(id)predicate sortDescriptors:(id)descriptors limit:(unsigned)limit inContext:(id)context;
+(id)objectsUsingPredicate:(id)predicate sortDescriptors:(id)descriptors inContext:(id)context;
+(id)objectsUsingPredicate:(id)predicate inContext:(id)context;
+(id)objectUsingPredicate:(id)predicate sortDescriptors:(id)descriptors error:(id*)error inContext:(id)context;
+(id)objectUsingPredicate:(id)predicate sortDescriptors:(id)descriptors inContext:(id)context;
+(id)objectUsingPredicate:(id)predicate inContext:(id)context;
+(id)allObjectsInContext:(id)context withPredicate:(id)predicate;
+(id)allObjectsInContext:(id)context;
+(id)fetchRequestInContext:(id)context;
-(void)setValue:(id)value forKey:(id)key withLazyInverseRelationship:(id)lazyInverseRelationship;
-(BOOL)wasDeleted;
-(id)deleteAndSave;
-(void)delete;
-(void)setValuesForKeys:(id)keys withDictionary:(id)dictionary ifShouldSet:(id)anIf;
-(id)existingObjectInContext:(id)context;
-(id)objectInContext:(id)context;
-(BOOL)isContactObject;
-(BOOL)isChatObject;
-(BOOL)isUserObject;
-(BOOL)isGroupObject;
@end

@interface UIViewController (TalkAdditions) <MFMailComposeViewControllerDelegate, MFMessageComposeViewControllerDelegate>
-(void)disableEdgesForExtendedLayout;
-(BOOL)isEnabledSwipeBack;
-(BOOL)isModal;
-(int)preferredInterfaceOrientationForPresentation;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)isRotatable;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)setLogicalParentDepth:(unsigned)depth;
-(unsigned)logicalParentDepth;
-(void)setLogicalModalParentViewController:(id)controller;
-(id)logicalModalParentViewController;
-(unsigned)depth;
-(id)topController;
-(BOOL)isVisibleAndKeyWindow;
-(BOOL)isVisible;
-(BOOL)lineShouldAutorotateToInterfaceOrientation:(int)line;
-(void)presentExportMailComposerWithSubject:(id)subject textAttachment:(id)attachment;
-(void)presentInvitationMailComposerIfPossibleWithRecipient:(id)recipient;
-(void)presentInvitationMailComposerWithRecipient:(id)recipient QRCodeImage:(id)image;
-(void)presentInvitationMailComposerIfPossible;
-(void)_presentInvitationMessageComposerIfPossibleWithRecipient:(id)recipient body:(id)body;
-(void)presentInvitationMessageComposerIfPossibleWithRecipient:(id)recipient;
-(void)popViewControllerAnimated;
-(void)setCellsBackgroundImageWithCell:(id)cell atIndexPath:(id)indexPath inTableView:(id)tableView;
-(void)customizeTableViewBackgroundColor:(id)color;
-(BOOL)customizeBackButtonDesign;
@end

@interface NSManagedObjectContext (LineAdditions)
+(void)checkCoredataError:(id)error;
-(void)mergeChangesWithWorkaroundFromContextDidSaveNotification:(id)mergeChangesWithWorkaroundFromContext;
-(void)lineMerge:(id)merge;
-(id)save;
-(id)blockExistingObjectInContext;
-(void)enqueueNotification:(id)notification;
-(void)setNotificationQueue:(id)queue;
-(id)notificationQueue;
@end

@interface UIButton (LAActionBlock)
+(id)buttonWithType:(int)type actionBlockForLA:(id)la;
-(void)__buttonTappedForLA:(id)la;
-(id)actionBlockForLA;
-(void)setActionBlockForLA:(id)la;
@end

@interface NSObject (NilObject)
-(BOOL)isNotNull;
-(id)yourself;
@end

@interface NSNull (NilObject)
-(BOOL)isNotNull;
-(id)yourself;
@end

@interface NSAttributedString (DataDetecting)
-(id)attributedStringForJapaneseWithFont:(float)font color:(id)color hasParagraphStyle:(BOOL)style;
-(id)attributedStringForJapanese;
-(id)attributedStringByAddingLinksWithOption:(unsigned)option linkInfo:(id)info;
-(id)attributedStringByAddingLinks;
-(id)attributedStringByAddingEmoticonOfUnicode;
-(id)attributedStringByAddingEmoticonOfUnicodeWithImageHeight:(float)imageHeight;
-(id)attributedStringConvertEmoticonToSticon;
-(id)attributedStringByPuttingSpace:(float)space location:(int)location;
@end

@interface NSAttributedString (NMAttributedLabel)
+(id)getTruncatedAttributedStringWithString:(id)string width:(float)width numberOfLines:(int)lines withToken:(id)token;
+(id)getLabelWithString:(id)string range:(NSRange)range tokenText:(id)text;
+(int)numberOfLinesWithString:(id)string;
-(id)attribtuedStringByRemovingFFFDCharactor;
-(BOOL)hasStrangeLine;
-(CGRect)boundingRectWithSize:(CGSize)size;
-(CGRect)boundingRectWithSize:(CGSize)size truncated:(BOOL)truncated;
-(CGRect)boundingRectWithSize:(CGSize)size truncated:(BOOL)truncated withToken:(id)token;
-(id)frame;
-(void)setFrame:(id)frame;
@end

@interface UIImage (EmojiAdditions)
+(id)emojiImageNamed:(id)named;
+(id)scale:(id)scale toSize:(CGSize)size margin:(UIEdgeInsets)margin;
+(BOOL)hasHighResolutionScreen;
@end

@interface NSCharacterSet (LineEmoji)
+(id)customEmojiVer4CharacterSet;
+(id)customEmojiVer3CharacterSet;
+(id)customEmojiVer2CharacterSet;
+(id)customEmojiCharacterSet;
@end

@interface NSString (LineEmoji)
+(void)makePrivatePasteboardString:(id)string forGeneralPasteboardString:(id)generalPasteboardString;
+(id)getRawSticonStringFromPrivatePasteboard;
+(id)rawSticonStringFromPKG_CODE:(unsigned)pkg_CODE CODE:(unsigned)code keyword:(id)keyword;
+(id)stringWithLongCharacter:(unsigned long)longCharacter;
-(void)setEmoticonCompatibleString:(id)string;
-(id)emoticonCompatibleString;
-(id)substringAppleEmojiSafeWithMaxLength:(unsigned)maxLength;
-(int)emojiVersion;
-(BOOL)isConsistsOfNumbers;
-(id)rangesOfCharactersFromSet:(id)set;
-(id)arrayOfSticonMetaData;
-(id)stringConvertEmoticonToSticon;
-(void)setArrayOfSticonMetaData:(id)sticonMetaData;
-(int)stickerInfoFromCustomEmojiString;
-(id)humanReadableCustomEmojiString;
@end

@interface NSAttributedString (LineEmoji)
-(id)attributedSubstringAppleEmojiSafeWithMaxLength:(unsigned)maxLength;
@end

@interface NSString (LineAdditions)
+(id)timeString:(int)string;
+(id)hexStringWithData:(id)data;
+(id)stringWithFormat:(id)format withArray:(id)array;
+(id)flattenHTML:(id)html trimWhiteSpace:(BOOL)space;
-(id)readableStringForAccessibility;
-(id)parseQuery;
-(id)splitStringWithSeperator:(id)seperator;
-(id)splitParams;
-(id)stringByURLDecode;
-(id)stringByURLEncode;
-(id)toURL;
-(BOOL)isUrlString;
-(BOOL)isAlphabet;
-(BOOL)isNumeric;
-(id)trimmingNewLineString;
-(id)trimmingString;
-(BOOL)containsString:(id)string;
-(id)stringByRemovingFFFDCharactor;
-(id)substringToComposedCharacterSequenceIndex:(unsigned)composedCharacterSequenceIndex;
-(unsigned)numberOfComposedCharacterSequences;
@end

@interface NSMutableAttributedString (RichAdditions)
-(void)addLineCallAgreementLink:(id)link type:(unsigned)type range:(NSRange)range;
-(void)addLink:(id)link type:(unsigned)type range:(NSRange)range linkInfo:(id)info;
-(void)addLink:(id)link type:(unsigned)type range:(NSRange)range;
-(void)setForegroundColor:(id)color range:(NSRange)range;
-(void)setFont:(id)font range:(NSRange)range;
@end

@interface UIImage (Sticon)
-(id)sticonImageWithSize:(CGSize)size andContentMode:(int)mode;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface NSDictionary (ValueSupport)
-(BOOL)boolForKey:(id)key defaultValue:(BOOL)value;
-(double)doubleForKey:(id)key defaultValue:(double)value maxValue:(double)value3;
-(double)doubleForKey:(id)key defaultValue:(double)value minValue:(double)value3;
-(double)doubleForKey:(id)key defaultValue:(double)value;
-(float)floatForKey:(id)key defaultValue:(float)value maxValue:(float)value3;
-(float)floatForKey:(id)key defaultValue:(float)value minValue:(float)value3;
-(float)floatForKey:(id)key defaultValue:(float)value;
-(int)integerForKey:(id)key defaultValue:(int)value maxValue:(int)value3;
-(int)integerForKey:(id)key defaultValue:(int)value minValue:(int)value3;
-(int)integerForKey:(id)key defaultValue:(int)value;
-(id)objectForKey:(id)key defaultValue:(id)value;
@end

@interface NSMutableDictionary (ValueSupport)
-(void)setObject:(id)object forKey:(id)key ifNilValue:(id)value;
@end

@interface NSData (LABlocks)
+(void)dataWithContentsOfFileForAlbum:(id)album completionBlock:(id)block;
+(void)dataWithContentsOfURLOnMainQuqueForAlbum:(id)album completionBlock:(id)block;
+(void)dataWithContentsOfURLForAlbum:(id)album completionBlock:(id)block;
@end

@interface NSDictionary (BVJSONString)
-(id)jsonString;
@end

@interface NSArray (BVJSONString)
-(id)jsonString;
@end

@interface NSURL (IDN)
+(id)IDNDecodedURL:(id)url;
+(id)IDNEncodedURL:(id)url;
+(id)IDNDecodedHostname:(id)hostname;
+(id)IDNEncodedHostname:(id)hostname;
+(id)_punycodeDecode:(id)decode;
+(id)_punycodeEncode:(id)encode;
@end

@interface UIImage (GrayScale)
-(id)toGrayscale;
@end

@interface UIView (MBAdditions)
-(void)moveToVerticalCenter;
-(void)moveToHorizontalCenter;
-(void)moveToBottom;
-(void)putBefore:(id)before gap:(float)gap;
-(void)putUnder:(id)under gap:(float)gap;
-(void)putAfter:(id)after gap:(float)gap;
-(void)putAfter:(id)after;
-(void)heightToFit;
-(void)widthToFit;
-(void)setWidth:(float)width;
-(void)setHeight:(float)height;
-(void)moveToY:(float)y;
-(void)moveToX:(float)x;
-(void)setY:(float)y;
-(void)setX:(float)x;
-(void)setLocation:(CGPoint)location;
-(void)setSize:(CGSize)size;
-(void)drawBoundsMB;
@end

@interface UIBarButtonItem (LAAdditions)
+(id)albumMultipleBarButtonItemWithTarget:(id)target firstAction:(SEL)action secondAction:(SEL)action3 landscape:(BOOL)landscape;
+(id)albumBackBarButtonItemWithTarget:(id)target action:(SEL)action acceptTheme:(BOOL)theme landscape:(BOOL)landscape;
+(id)albumBarButtonWithTitle:(id)title target:(id)target action:(SEL)action acceptTheme:(BOOL)theme landscape:(BOOL)landscape;
+(id)albumBluePlusButtonItemTarget:(id)target action:(SEL)action landscape:(BOOL)landscape;
+(id)albumBlueBarButtonItemWithTitle:(id)title target:(id)target action:(SEL)action landscape:(BOOL)landscape;
+(id)albumListBarButtonWithTarget:(id)target action:(SEL)action landscape:(BOOL)landscape;
+(id)albumBluePlusButtonTarget:(id)target action:(SEL)action landscape:(BOOL)landscape;
+(id)albumNormalButtonWithTitle:(id)title target:(id)target action:(SEL)action landscape:(BOOL)landscape;
+(id)imageWithImage:(id)image scaledToSize:(CGSize)size;
+(id)blueBarButtonWithTitle:(id)title target:(id)target action:(SEL)action landscape:(BOOL)landscape;
-(id)albumListBarButtonItemWithTarget:(id)target action:(SEL)action landscape:(BOOL)landscape;
@end

@interface UIViewController (UIBarButtonItem)
-(id)rightBarButtonItem;
-(id)leftBarButtonItem;
@end

@interface UIViewController (UIBarButtonItem)
-(id)rightBarButtonItem;
-(id)leftBarButtonItem;
@end

@interface UIWebView (TalkAdditions)
-(BOOL)setScrollToTop:(BOOL)top;
-(id)scrollViewOnWebView;
@end

@interface NSString (URLEncoding)
-(id)dictionaryWithFormEncodedString;
-(id)stringByUnescapingFromURLQuery;
-(id)stringByEscapingForURLQuery;
@end

@interface NSDictionary (URLEncoding)
-(id)stringWithSortedFormEncodedComponents;
-(id)stringWithFormEncodedComponents;
@end

@interface NSURL (LineAddition)
+(id)validatedURLWithString:(id)string;
-(BOOL)isEquivalent:(id)equivalent;
-(id)URLByAppendingPathComponentFromFullUrl:(id)fullUrl;
-(id)URLByAppendingPathComponentFromBaseUrl:(id)baseUrl;
@end

@interface UITabBar (Skinable)
-(BOOL)render;
-(BOOL)isSetTabBarEventImageAtIndex:(unsigned)index;
-(void)resetTabBarEventImageAtIndex:(unsigned)index;
-(void)setTabBarEventImage:(id)image atIndex:(unsigned)index;
-(void)didSelectTabBarItemAtIndex:(unsigned)index;
-(void)shouldSelectTabBarItemAtIndex:(unsigned)index;
-(void)deselectTabBarItemAtIndex:(unsigned)index;
-(void)addUserWidthTabBarImageItem:(id)item index:(int)index;
-(void)addTabBarImageItem:(id)item index:(int)index;
@end

@interface UITabBarItem (CustomBadge)
-(void)setBadgeValue:(id)value;
-(void)setSkinnedBadgeValue:(id)value;
-(id)skinnedTabBarItem;
-(void)setSkinnedTabBarItem:(id)item;
@end

@interface NSMutableArray (WeakReferences)
+(id)mutableArrayUsingWeakReferencesWithCapacity:(unsigned)capacity;
+(id)mutableArrayUsingWeakReferences;
@end

@interface UITabBarController (LineAddition)
-(void)closeTipView;
-(void)showTipView;
-(void)showTipViewIfNeeded;
-(void)setSelectedViewControllerIndex:(unsigned)index;
@end

@interface UINavigationController (LineAddition)
+(id)styledNavigationControllerWithRootViewController:(id)rootViewController;
+(id)talkNavigationControllerWithViewController:(id)viewController;
-(void)removeViewControllersAfterClass:(Class)aClass exceptsTopViewController:(BOOL)controller;
@end

@interface UINavigationController (ChannelNavigationBar)
-(void)setNaviBgImage:(id)image;
@end

@interface UIImage (URLImagePostProcess)
-(id)coverProfileImageMB;
-(id)profileImageMB;
-(id)activityThumbnailImageMB;
-(id)movieThumbnailMB;
@end

@interface UIViewController (UISearchDisplayThemeHelperOnlyIOS7)
@property(retain, nonatomic) UISearchBar* customSearchBar;
-(void)willEndSearch;
-(void)willBeginSearch;
-(id)searchDisplaySearchBar;
-(int)statusBarStyleWithSearchDisplay;
-(id)backupNavigationViewBGColor;
-(void)setBackupNavigationViewBGColor:(id)color;
-(BOOL)isBeginSearchBar;
-(void)setBeginSearchBar:(BOOL)bar;
@end

@interface UIViewController (LEGYStatusBar)
-(void)LEGYStatusBarPressed:(id)pressed;
-(void)hideLEGYStatusBar:(BOOL)bar;
-(void)showOrHideLEGYStatusBarIfNeeded:(BOOL)needed belowSubview:(id)subview;
-(void)showOrHideLEGYStatusBarIfNeeded:(BOOL)needed;
-(id)LEGYStatusBar;
-(void)setLEGYStatusBar:(id)bar;
@end

@interface UIView (MBActionCellAdditions)
-(BOOL)hasActions;
-(void)performActionWithName:(id)name userInfo:(id)info;
-(id)actionable;
-(id)tableViewActionCell;
-(id)actionNamePath;
-(id)actionName;
-(void)setActionName:(id)name;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UITableView (reload)
-(void)reloadDataWithDuration:(float)duration;
@end

@interface NSError (LineAdditions)
+(id)errorWithSimpleDescription:(id)simpleDescription;
@end

@interface NSIndexPath (NLGridControl)
@property(readonly, assign, nonatomic) unsigned column;
+(id)indexPathForRow:(unsigned)row column:(unsigned)column;
@end

@interface UIActionSheet (LineAddition) <UIActionSheetDelegate>
+(id)actionSheetWithTitle:(id)title message:(id)message destructiveButtonTitle:(id)title3 buttons:(id)buttons showInView:(id)view onDismiss:(id)dismiss onCancel:(id)cancel;
+(id)actionSheetWithTitle:(id)title message:(id)message buttons:(id)buttons showInView:(id)view onDismiss:(id)dismiss onCancel:(id)cancel;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(id)initWithWithTitle:(id)title message:(id)message destructiveButtonTitle:(id)title3 buttons:(id)buttons showInView:(id)view onDismiss:(id)dismiss onCancel:(id)cancel;
@end

@interface NSArray (LineAddition)
-(id)sortedStringASCIIOrder;
-(id)map:(id)map;
@end

@interface UIView (Layout)
+(id)createPreferredSizeBlock:(CGSize)block;
-(void)doLayout:(BOOL)layout;
-(void)doLayout;
-(void)setLayoutCallbackBlock:(id)block;
-(void)setPreferredSizeBlock:(id)block;
-(CGSize)preferredSizeThatFits:(CGSize)fits;
-(CGSize)preferredSize:(CGSize)size;
-(void)setLayoutManager:(id)manager;
-(id)layoutManager;
-(void)setMargin:(UIEdgeInsets)margin;
-(UIEdgeInsets)margin;
@end

@interface NSString (SinaWeiboEncode)
-(id)URLEncodedString;
-(id)URLEncodedStringWithCFStringEncoding:(unsigned long)cfstringEncoding;
@end

@interface NSError (LineAddition)
+(id)generateKey;
-(id)errorReason;
-(id)errorDescription;
-(void)setErrorKey:(id)key;
-(id)errorKey;
@end

@interface NSNumber (LineAddition)
-(id)stringValueWithSeparator:(id)separator groupSize:(int)size;
@end

@interface NSString (UserRecall)
-(id)userRecallImageWithFont:(id)font andTextColor:(id)color andBackgroundColor:(id)color3;
@end

@interface UIButton (Theme)
@property(retain, nonatomic) NSValue* defaultSize;
-(BOOL)render;
@end

@interface UIImageView (Theme)
-(BOOL)render;
@end

@interface UILabel (Theme)
-(BOOL)render;
@end

@interface UINavigationBar (Theme)
-(id)landscapeBgThemeImage;
-(id)portraitBgThemeImage;
@end

@interface UITableView (Theme)
-(BOOL)render;
@end

@interface UITableViewCell (Theme)
-(BOOL)render;
@end

@interface UIView (Theme)
@property(retain, nonatomic) NLStyleRuleset* ruleset;
@property(retain, nonatomic) NSString* rulesetStyleName;
+(void)notifyToRender;
-(void)removeExternalRenderer:(id)renderer;
-(void)addExternalRenderer:(id)renderer action:(SEL)action;
-(id)makeEmptyRenderersDictionary;
-(id)renderersDictionary;
-(void)setRulesetStyleName:(id)name setParentName:(id)name2;
-(void)removeRenderNotificationObserver;
-(void)addRenderNotificationObserver;
-(BOOL)render;
@end

@interface UIView (RulesetAccess)
-(id)disabledImageForKey:(id)key;
-(id)selectedImageForKey:(id)key;
-(id)pressedImageForKey:(id)key;
-(id)normalImageForKey:(id)key;
-(int)viewContentModeForKey:(id)key;
-(id)stringForKey:(id)key;
-(int)textAlignmentForKey:(id)key;
-(id)numberForKey:(id)key;
-(BOOL)boolForKey:(id)key;
-(UIEdgeInsets)insetsForKey:(id)key;
-(CGSize)sizeForKey:(id)key;
-(id)imageForKey:(id)key;
-(id)colorForKey:(id)key;
-(float)floatForKey:(id)key;
@end

@interface UIView (MBCellView)
-(void)resetCellData;
-(void)drawCellData;
-(void)setCellData:(id)data recursive:(BOOL)recursive;
-(BOOL)isSetCellDataRecursive;
-(void)setCellData:(id)data;
-(void)setCellData:(id)data path:(id)path;
-(id)getDrawCellData;
-(id)cellData;
-(void)setCellDataPath:(id)path;
-(id)dataPath;
-(void)setDrawCellDataBlock:(id)block;
-(void)setCellDataBlock:(id)block;
@end

@interface UIAlertView (LAAdditions)
+(void)showErrorForAlbum:(id)album delegate:(id)delegate tag:(int)tag;
+(void)showErrorForAlbum:(id)album;
+(void)showConfirmForAlbum:(id)album delegate:(id)delegate tag:(int)tag;
+(void)showAlertForAlbum:(id)album delegate:(id)delegate tag:(int)tag;
+(void)showAlertForAlbum:(id)album;
@end

@interface UILocalNotification (LineNotificationTypes)
@property(readonly, assign, nonatomic) unsigned notificationType;
@end

@interface NSData (LineAdditions)
+(id)dataWithContentsOfURL:(id)url withOffset:(long long)offset withLength:(long long)length;
@end

@interface NSString (Crypto)
-(id)HMACMD5WithSecret:(id)secret;
@end

@interface AVAssetExportSession (LineAdditions)
+(void)exportVideoFileWithAssetURL:(id)assetURL presetName:(id)name completeBlock:(id)block;
@end

@interface NSString (LAAdditions)
-(id)substringToComposedCharacterSequenceIndexForAlbum:(unsigned)album;
-(unsigned)numberOfComposedCharacterSequencesForAlbum;
-(id)stringByTrimmingWhitespacesForAlbum;
-(id)AES256EncryptAlbumWithKey:(id)key;
@end

@interface NSThread (LineAdditions)
+(void)performOnMainThreadWithBlock:(id)block;
@end

@interface UIView (Orientation)
+(BOOL)isPortraitWithView:(id)view;
@end

@interface NSError (TalkExceptionWrapper)
+(id)errorWithException:(id)exception;
-(void)showGenericAlert;
-(id)reason;
@end

@interface UINavigationItem (iOS7Spacing)
+(void)load;
+(void)mk_swizzle:(SEL)swizzle;
-(void)mk_setRightBarButtonItems:(id)items;
-(void)mk_setRightBarButtonItem:(id)item;
-(void)mk_setLeftBarButtonItems:(id)items;
-(void)mk_setLeftBarButtonItem:(id)item;
-(id)spacer;
-(BOOL)isIOS7;
@end

@interface UINavigationController (MBAdditions)
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
@end

@interface UIImage (LAAdditions)
+(void)removeScaleImagesForAlbum;
+(id)scaleImageForAlbum:(id)album toSize:(CGSize)size;
+(id)imageNamedWithScaleForAlbum:(id)album isBundleImage:(BOOL)image ofType:(id)type;
+(id)stretchableImageNamedForAlbum:(id)album leftCapWidth:(int)width topCapHeight:(int)height;
+(id)imageNamedForAlbum:(id)album;
@end

@interface UIImage (SAT_Decompression_LA)
-(id)initWithContentsOfFileDecompressedForAlbum:(id)album;
@end

@interface NSBundle (MBAdditions)
@end

@interface NSDate (MBTimeLabel)
+(id)todayThreshold;
+(void)significantTimeChange:(id)change;
+(void)setupCustomDateFormatters;
-(id)localizedRelativeDateString;
-(id)localizedAbsoluteDateString;
@end

@interface UIView (RotationOnUIWindow)
+(void)rotateTargetView:(id)view orientation:(int)orientation;
+(void)rotateForCurrentOrientationWithTargetView:(id)targetView;
@end

@interface NSError (LCAdditions)
-(BOOL)isUnexpectedErrorForCafe;
-(BOOL)isNetworkErrorForCafe;
-(id)localizedDescriptionForCafe;
@end

@interface NSString (LCAdditions)
-(BOOL)containsStringForCafe:(id)cafe;
-(id)stringByRemovingEmojiCharactersForCafe;
-(id)stringByAddingPercentEscapesWithWhitespacesForCafe;
-(id)stringByAddingPercentEscapesForCafe;
-(id)stringByTrimmingWhitespacesForCafe;
-(id)stringOrNilIfEmptyForCafe;
-(id)stringForCafe;
-(id)XMLStringForCafe;
@end

@interface UIAlertView (LCAdditions)
+(void)showErrorForCafe:(id)cafe delegate:(id)delegate tag:(int)tag;
+(void)showErrorForCafe:(id)cafe;
+(void)showConfirmForCafe:(id)cafe delegate:(id)delegate tag:(int)tag;
+(void)showAlertForCafe:(id)cafe delegate:(id)delegate tag:(int)tag;
+(void)showAlertForCafe:(id)cafe;
@end

@interface UIColor (LCAdditions)
+(id)colorWithRGBForCafe:(int)cafe alpha:(float)alpha;
+(id)colorWithRGBForCafe:(int)cafe;
@end

@interface UIImage (LCAdditions)
+(id)scaleImageForCafe:(id)cafe toSize:(CGSize)size;
+(id)mediumUserProfileLoadingImageForCafe;
+(id)mediumUserProfileBlankImageForCafe;
+(id)roundedRectImageWithSize:(CGSize)size cornerRadius:(float)radius color:(id)color;
+(id)imageWithRetinaNamedForCafe:(id)cafe;
+(void)removeScaleImagesForCafe;
+(id)imageNamedWithScaleForCafe:(id)cafe isBundleImage:(BOOL)image ofType:(id)type;
-(id)stretchableImageWithLeftCapWidthForCafe:(int)cafe topCapHeight:(int)height;
-(id)videoThumbnailForCafe;
-(id)mediumUserProfileImageForCafe;
-(id)makeVideoThumbnailForCafe;
-(id)fixImageToUploadForCafe:(int)cafe;
-(id)fixImageToUploadForCafe;
@end

@interface UILabel (LCAdditions)
-(CGSize)sizeOfFitLabelForCafe:(float)cafe maxHeight:(float)height;
-(CGSize)sizeOfFitLabelForCafe:(float)cafe;
-(void)fitLabelSizeForCafe:(float)cafe maxHeight:(float)height;
-(void)fitLabelSizeForCafe:(float)cafe;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface NSObject (LCBaseModelAddtion)
-(BOOL)isModelObject;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UIImage (Alpha)
-(id)transparentBorderImage:(unsigned)image;
-(id)imageWithAlpha;
-(BOOL)hasAlpha;
-(CGImageRef)newBorderMask:(unsigned)mask size:(CGSize)size;
@end

@interface UIImage (Resize)
-(CGAffineTransform)transformForOrientation:(CGSize)orientation;
-(id)resizedImage:(CGSize)image transform:(CGAffineTransform)transform drawTransposed:(BOOL)transposed interpolationQuality:(int)quality;
-(id)resizedImageWithContentMode:(int)contentMode bounds:(CGSize)bounds interpolationQuality:(int)quality;
-(id)resizedImage:(CGSize)image interpolationQuality:(int)quality;
-(id)thumbnailImage:(int)image transparentBorder:(unsigned)border cornerRadius:(unsigned)radius interpolationQuality:(int)quality;
-(id)croppedImage:(CGRect)image;
@end

@interface UIImage (RoundedCorner)
-(void)addRoundedRectToPath:(CGRect)path context:(CGContextRef)context ovalWidth:(float)width ovalHeight:(float)height;
-(id)roundedCornerImage:(int)image borderSize:(int)size;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface NSStream (BoundPairAdditions)
+(void)createBoundInputStream:(id*)stream outputStream:(id*)stream2 bufferSize:(unsigned)size;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface UINavigationBar (TouchCustomizing)
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface NSAttributedString (OHCommodityConstructors)
+(id)attributedStringWithAttributedString:(id)attributedString;
+(id)attributedStringWithString:(id)string;
-(id)linkAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(id)paragraphStyleAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(unsigned char)lineBreakModeAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(unsigned char)textAlignmentAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(BOOL)textIsBoldAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(int)textUnderlineStyleAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(BOOL)textIsUnderlinedAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(id)textColorAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(CTFontRef)fontAtIndex:(unsigned)index effectiveRange:(NSRange*)range;
-(CGSize)sizeConstrainedToSize:(CGSize)size fitRange:(NSRange*)range;
-(CGSize)sizeConstrainedToSize:(CGSize)size;
@end

@interface NSMutableAttributedString (OHCommodityStyleModifiers)
-(void)setLink:(id)link range:(NSRange)range;
-(void)setParagraphStyle:(id)style range:(NSRange)range;
-(void)setParagraphStyle:(id)style;
-(void)modifyParagraphStylesInRange:(NSRange)range withBlock:(id)block;
-(void)modifyParagraphStylesWithBlock:(id)block;
-(void)setTextAlignment:(unsigned char)alignment lineBreakMode:(unsigned char)mode range:(NSRange)range;
-(void)setTextAlignment:(unsigned char)alignment lineBreakMode:(unsigned char)mode;
-(void)setTextBold:(BOOL)bold range:(NSRange)range;
-(void)setTextUnderlineStyle:(int)style range:(NSRange)range;
-(void)setTextIsUnderlined:(BOOL)underlined range:(NSRange)range;
-(void)setTextIsUnderlined:(BOOL)underlined;
-(void)setTextColor:(id)color range:(NSRange)range;
-(void)setTextColor:(id)color;
-(void)setFontFamily:(id)family size:(float)size bold:(BOOL)bold italic:(BOOL)italic range:(NSRange)range;
-(void)setFontName:(id)name size:(float)size range:(NSRange)range;
-(void)setFontName:(id)name size:(float)size;
-(void)setFont:(id)font range:(NSRange)range;
-(void)setFont:(id)font;
@end

@interface NSTextCheckingResult (ExtendedURL)
@property(readonly, assign, nonatomic) NSURL* extendedURL;
@end

@interface NSError (FBError)
@property(readonly, copy) NSString* fberrorUserMessage;
@property(readonly, assign) BOOL fberrorShouldNotifyUser;
@property(readonly, assign) int fberrorCategory;
@end

@interface NSString (JSONKitDeserializing)
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONString;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONString;
@end

@interface NSData (JSONKitDeserializing)
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONData;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONData;
@end

@interface NSString (JSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options includeQuotes:(BOOL)quotes error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options includeQuotes:(BOOL)quotes error:(id*)error;
-(id)JSONData;
@end

@interface NSArray (JSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface NSDictionary (JSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface NSArray (JSONKitSerializingBlockAdditions)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
@end

@interface NSDictionary (JSONKitSerializingBlockAdditions)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
@end

@interface NSString (JSONKitDeserializing)
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONString;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONString;
@end

@interface NSData (JSONKitDeserializing)
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONData;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONData;
@end

@interface NSString (LCJSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options includeQuotes:(BOOL)quotes error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options includeQuotes:(BOOL)quotes error:(id*)error;
-(id)JSONData;
@end

@interface NSArray (LCJSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface NSDictionary (LCJSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface NSArray (LCJSONKitSerializingBlockAdditions)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
@end

@interface NSDictionary (LCJSONKitSerializingBlockAdditions)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
@end

@interface UIViewController (MJPopupViewController)
@property(retain, nonatomic) MJPopupBackgroundView* mj_popupBackgroundView;
@property(retain, nonatomic) UIViewController* mj_popupViewController;
-(void)fadeViewOut:(id)anOut sourceView:(id)view overlayView:(id)view3;
-(void)fadeViewIn:(id)anIn sourceView:(id)view overlayView:(id)view3;
-(void)slideViewOut:(id)anOut sourceView:(id)view overlayView:(id)view3 withAnimationType:(int)animationType;
-(void)slideViewIn:(id)anIn sourceView:(id)view overlayView:(id)view3 withAnimationType:(int)animationType;
-(void)dismissPopupViewControllerWithanimation:(id)withanimation;
-(id)topView;
-(void)presentPopupView:(id)view animationType:(int)type;
-(void)dismissPopupViewControllerWithanimationType:(int)type;
-(void)presentPopupViewController:(id)controller animationType:(int)type;
@end

@interface UIWebView (LCNoticeAddition)
-(void)webView:(id)view runJavaScriptAlertPanelWithMessage:(id)message initiatedByFrame:(id)frame;
@end

@interface NSData (Backport)
+(void)load;
-(void)backportEnumerateByteRangesUsingBlock:(id)block;
-(id)backportBase64EncodedStringWithOptions:(unsigned)options;
-(id)initBackportWithBase64EncodedString:(id)base64EncodedString options:(unsigned)options;
@end

@interface NSData (Luna)
-(id)hexadecimalString;
@end

@interface NSData (LunaCommonCrypto)
-(id)hashWithAlgorithm:(unsigned)algorithm;
@end

@interface UIApplication (Backport)
+(void)load;
-(unsigned)backportBeginBackgroundTaskWithName:(id)name expirationHandler:(id)handler;
@end

@interface UIApplication (Luna)
+(id)setNetworkActivityIndicatorVisibleWithHandle;
-(void)setNetworkActivityIndicatorVisibleNested:(BOOL)nested;
@end

@interface UITableView (Backport)
+(void)load;
-(id)backportDequeueReusableCellWithIdentifier:(id)identifier forIndexPath:(id)indexPath;
-(void)backportRegisterClass:(Class)aClass forCellReuseIdentifier:(id)cellReuseIdentifier;
@end

@interface UIView (Backport)
+(void)backportPerformWithoutAnimation:(id)animation;
+(void)load;
@end

@interface NSString (NJPurchaseAddition)
-(id)stringByAddingPercentEscapesForPurchase;
@end

@interface NSIndexPath (PSTCollectionViewAdditions)
+(id)indexPathForItem:(int)item inSection:(int)section;
-(int)item;
@end

@interface NSThread (LEGYAdditions)
+(id)newDefaultModeRunLoopThread;
-(void)legy_addTimer:(id)timer;
-(void)legy_performBlockFromTimer:(id)timer;
-(void)performAfterDelay:(double)delay block:(id)block;
-(void)legy_performBlock:(id)block;
-(void)performBlockAndWait:(id)wait;
-(void)performBlock:(id)block;
@end

@interface NSMutableData (LEGYAdditions)
-(BOOL)legy_getCharAt:(unsigned)at;
-(unsigned char)legy_getByteAt:(unsigned)at;
@end

@interface NSURL (LEGYAdditional)
-(id)urlStringRemovedHost;
@end

@interface NSString (URLEncoding)
-(id)stringByEscapingForURLQuery;
@end

@interface NSDictionary (URLEncoding)
-(id)stringWithFormEncodedComponents;
@end

@interface NSData (LEGYAdditions)
-(id)gzipDeflate;
-(id)gzipInflate;
@end

@interface NSDictionary (ACTQueryParametersAdditions)
-(id)act_formattedSmartPixelDataDictionary;
-(id)act_queryParametersJoinedByString:(id)string;
@end

@interface NSURL (ACTComponentsAdditions)
-(id)act_clickURLReferrerComponents;
@end

@interface NSString (ACTEscapeAdditions)
+(id)act_stringWithBase64EncodedHash:(char*)base64EncodedHash;
-(BOOL)act_writeMD5HashToBuffer:(char*)buffer;
-(id)act_percentEscape;
@end

@interface NSDate (ACTTimestampAdditions)
+(id)act_secondsSince1970;
@end

@interface NSDictionary (org_apache_cordova_NSDictionary_Extension)
-(id)dictionaryWithLowercaseKeys;
-(BOOL)valueForKeyIsNumber:(id)keyIsNumber;
-(BOOL)valueForKeyIsString:(id)keyIsString;
-(BOOL)valueForKeyIsNull:(id)keyIsNull;
-(BOOL)valueForKeyIsArray:(id)keyIsArray;
-(BOOL)typeValueForKey:(id)key isArray:(BOOL*)array isNull:(BOOL*)null isNumber:(BOOL*)number isString:(BOOL*)string;
-(int)integerValueForKey:(id)key defaultValue:(int)value withRange:(NSRange)range;
-(bool)existsValue:(id)value forKey:(id)key;
@end

@interface CLLocation (JSONMethods)
-(id)JSONRepresentation;
@end

@interface NSError (JSONMethods)
-(id)JSONRepresentation;
@end

@interface NSData (Base64)
+(id)dataFromBase64String:(id)base64String;
-(id)base64EncodedString;
@end

@interface NSMutableArray (QueueAdditions)
-(void)enqueue:(id)enqueue;
-(id)pop;
-(id)dequeue;
-(id)queueHead;
@end

@interface NSBundle (Smartling_i18n)
-(id)pluralizedStringWithKey:(id)key defaultValue:(id)value table:(id)table pluralValue:(float)value4;
@end

