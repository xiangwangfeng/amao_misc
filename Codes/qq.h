/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct _NSZone NSZone;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct _NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct CIMEngineMsgStruct {
	char* buffer;
	int bufferLength;
	char* cmd;
	int seq;
} CIMEngineMsgStruct;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	double latitude;
	double longitude;
} XXStruct_zYrK5D;

typedef struct CGColor* CGColorRef;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
} XXStruct_VrsxJB;

template<>
struct JceInputStream<analyticstaf::BufferReader> {
	char* _field1;
	unsigned _field2;
	unsigned _field3;
};

template<>
struct JceOutputStream<analyticstaf::BufferWriter> {
	char* _field1;
	unsigned _field2;
	unsigned _field3;
};

template<>
struct vector<TencentQQ::protobuf::UnknownField, std::allocator<TencentQQ::protobuf::UnknownField> >;

typedef struct UnknownFieldSet {
	vector<TencentQQ::protobuf::UnknownField, std::allocator<TencentQQ::protobuf::UnknownField> >* _field1;
} UnknownFieldSet;

typedef struct MsgHead {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	unsigned long long _field3;
	unsigned long long _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned long long _field9;
	C2CTmpMsgHead* _field10;
	int _field11;
	unsigned _field12[1];
} MsgHead;

typedef struct ContentHead {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	int _field7;
	unsigned _field8[1];
} ContentHead;

typedef struct MsgBody {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	RichText* _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field4;
	int _field5;
	unsigned _field6[1];
} MsgBody;

typedef struct AppShareInfo {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field3;
	PluginInfo* _field4;
	unsigned _field5;
	int _field6;
	unsigned _field7[1];
} AppShareInfo;

typedef struct Msg {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	MsgHead* _field3;
	ContentHead* _field4;
	MsgBody* _field5;
	AppShareInfo* _field6;
	int _field7;
	unsigned _field8[1];
} Msg;

typedef struct CGImage* CGImageRef;

typedef struct _C2C_DUPLICATE_RELATEMARK {
	unsigned short _field1;
	unsigned _field2;
} C2C_DUPLICATE_RELATEMARK;

typedef struct _C2C_DUPLICATE_RELATEMARK_GEN_INPUT_PARAM {
	unsigned long long _field1;
	unsigned _field2;
	unsigned _field3;
} C2C_DUPLICATE_RELATEMARK_GEN_INPUT_PARAM;

typedef struct _Alloc_hider {
	char* _M_p;
} Alloc_hider;

template<>
struct basic_string<char, std::char_traits<char>, std::allocator<char> > {
	Alloc_hider _M_dataplus;
};

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct opaqueCMSampleBuffer opaqueCMSampleBuffer;

typedef struct {
	unsigned short wCmd;
	unsigned short wSubCmd;
	short wRst;
	unsigned dwUsed;
	unsigned dwCalUsed;
	unsigned short wTry;
	unsigned char acHostName[32];
	unsigned char acHostIp[32];
	unsigned short wPort;
	unsigned char cConn;
	unsigned char cNetType;
	unsigned char cNetwork;
	unsigned char acErrorStr[64];
	unsigned short wSendDataLen;
	unsigned short wResvDataLen;
} XXStruct_VowasB;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct Message {
	/*function-pointer*/ void** _field1;
} Message;

typedef struct FileDescriptor FileDescriptor;

typedef struct Descriptor Descriptor;

typedef struct EnumDescriptor EnumDescriptor;

typedef struct FieldDescriptor {
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field4;
	FileDescriptor* _field5;
	int _field6;
	int _field7;
	int _field8;
	bool _field9;
	Descriptor* _field10;
	Descriptor* _field11;
	Descriptor* _field12;
	EnumDescriptor* _field13;
	FieldDescriptor* _field14;
	FieldOptions* _field15;
	bool _field16;
	union {
		int _field1;
		long long _field2;
		unsigned _field3;
		unsigned long long _field4;
		float _field5;
		double _field6;
		bool _field7;
		EnumValueDescriptor* _field8;
		basic_string<char, std::char_traits<char>, std::allocator<char> >* _field9;
	} _field17;
} FieldDescriptor;

typedef struct FieldOptions FieldOptions;

typedef struct EnumValueDescriptor EnumValueDescriptor;

typedef struct AVPicture {
	char* _field1[4];
	int _field2[4];
	int _field3;
	int _field4;
	int _field5;
	int _field6;
} AVPicture;

typedef struct GifState {
	AVPicture _field1;
	int _field2;
	int _field3;
	int _field4;
	int _field5;
	int _field6;
	int _field7;
	unsigned* _field8;
	int _field9;
	int _field10;
	char* _field11;
	char* _field12;
	void* _field13;
	unsigned char _field14[768];
	unsigned char _field15[768];
} GifState;

typedef struct _RecoverConfig {
	unsigned _field1;
	bool _field2;
	unsigned _field3;
	unsigned _field4;
} RecoverConfig;

typedef struct sqlite3 sqlite3;

typedef struct sqlite3_stmt sqlite3_stmt;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct ShowFlags {
	BOOL _isTextFieldTop;
	int _currentInputState;
	int _lastInputState;
} ShowFlags;

typedef struct KeyBoradCoordinate {
	unsigned _xmargin;
	unsigned _ymargin;
	unsigned _controlWidth;
	unsigned _controlHeight;
	unsigned _controlHorSeparator;
	unsigned _controlVerSeparator;
	CGSize _imageSize;
	CGRect _rectTop;
	CGRect _rectBottom;
	unsigned _controlNum;
	unsigned _pageNum;
	unsigned _pageIndex;
	unsigned _onePageMaxControl;
	unsigned _oneRowMaxCount;
} KeyBoradCoordinate;

typedef struct DefineAvatarInfo {
	BOOL _field1;
	BOOL _field2;
} DefineAvatarInfo;

typedef struct CGAffineTransform {
	float a;
	float b;
	float c;
	float d;
	float tx;
	float ty;
} CGAffineTransform;

typedef struct CGContext* CGContextRef;

typedef struct {
	int _field1;
	int _field2;
	int _field3;
	CGRect _field4;
	char* _field5;
	char* _field6;
} XXStruct_dcTzvA;

typedef struct CCrypt {
	/*function-pointer*/ void** _field1;
	unsigned char _field2[16];
	unsigned char _field3;
	unsigned char _field4;
} CCrypt;

typedef struct MicroBlogPacket {
	unsigned char _field1[25];
	unsigned _field2;
	CCrypt _field3;
	unsigned char _field4[16];
	long long _field5;
} MicroBlogPacket;

typedef struct MicroBlogUnPacket {
	CCrypt _field1;
	unsigned char _field2[16];
} MicroBlogUnPacket;

typedef struct {
	int _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	int _field3;
} XXStruct_D6MVsA;

typedef struct {
	int _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	int _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
} XXStruct_V_6rKB;

typedef struct AdMsgInfo {
	long long _field1;
	long long _field2;
	long long _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
} AdMsgInfo;

typedef struct FaceInfo {
	vector<char, std::allocator<char> > _field1;
	int _field2;
} FaceInfo;

typedef struct _Vector_impl {
	FaceInfo* _field1;
	FaceInfo* _field2;
	FaceInfo* _field3;
} Vector_impl;

template<>
struct vector<QQService::FaceInfo, std::allocator<QQService::FaceInfo> > {
	Vector_impl _field1;
};

typedef struct Visitor {
	long long _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	int _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	int _field6;
	int _field7;
	int _field8;
	int _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
} Visitor;

typedef struct _Vector_impl {
	Visitor* _field1;
	Visitor* _field2;
	Visitor* _field3;
} Vector_impl;

template<>
struct vector<QQService::Visitor, std::allocator<QQService::Visitor> > {
	Vector_impl _field1;
};

typedef struct RespHead {
	short _field1;
	int _field2;
	long long _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
} RespHead;

typedef struct TagInfo TagInfo;

typedef struct _Vector_impl {
	TagInfo* _field1;
	TagInfo* _field2;
	TagInfo* _field3;
} Vector_impl;

template<>
struct vector<QQService::TagInfo, std::allocator<QQService::TagInfo> > {
	Vector_impl _field1;
};

typedef struct _Vector_impl {
	char* _field1;
	char* _field2;
	char* _field3;
} Vector_impl;

template<>
struct vector<char, std::allocator<char> > {
	Vector_impl _field1;
};

typedef struct CommonCard {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	short _field2;
	short _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field7;
	int _field8;
	BOOL _field9;
	long long _field10;
	long long _field11;
	vector<QQService::TagInfo, std::allocator<QQService::TagInfo> > _field12;
	int _field13;
	vector<char, std::allocator<char> > _field14;
	int _field15;
	long long _field16;
	int _field17;
} CommonCard;

typedef struct RespCommonCard {
	RespHead _field1;
	CommonCard _field2;
	vector<char, std::allocator<char> > _field3;
	vector<QQService::FaceInfo, std::allocator<QQService::FaceInfo> > _field4;
	int _field5;
	vector<QQService::Visitor, std::allocator<QQService::Visitor> > _field6;
	vector<QQService::Visitor, std::allocator<QQService::Visitor> > _field7;
	int _field8;
	BOOL _field9;
	BOOL _field10;
} RespCommonCard;

typedef struct Intro {
	short _field1;
	vector<char, std::allocator<char> > _field2;
} Intro;

typedef struct MakeFriendsCard {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	short _field2;
	short _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	Intro _field6;
	int _field7;
	vector<char, std::allocator<char> > _field8;
	BOOL _field9;
	long long _field10;
	long long _field11;
	vector<QQService::TagInfo, std::allocator<QQService::TagInfo> > _field12;
	int _field13;
	vector<char, std::allocator<char> > _field14;
	int _field15;
	long long _field16;
	int _field17;
} MakeFriendsCard;

typedef struct RespMakeFriendsCard {
	RespHead _field1;
	MakeFriendsCard _field2;
	long long _field3;
	vector<QQService::FaceInfo, std::allocator<QQService::FaceInfo> > _field4;
	int _field5;
	vector<QQService::Visitor, std::allocator<QQService::Visitor> > _field6;
	vector<QQService::Visitor, std::allocator<QQService::Visitor> > _field7;
	int _field8;
	BOOL _field9;
	BOOL _field10;
} RespMakeFriendsCard;

typedef struct RespHYCommonCard {
	RespHead _field1;
	CommonCard _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	BOOL _field4;
	BOOL _field5;
	vector<QQService::FaceInfo, std::allocator<QQService::FaceInfo> > _field6;
	BOOL _field7;
	BOOL _field8;
	BOOL _field9;
	vector<char, std::allocator<char> > _field10;
	BOOL _field11;
} RespHYCommonCard;

typedef struct RespHYMakeFriendsCard {
	RespHead _field1;
	MakeFriendsCard _field2;
	BOOL _field3;
	BOOL _field4;
	int _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field7;
	int _field8;
	int _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field11;
	vector<QQService::FaceInfo, std::allocator<QQService::FaceInfo> > _field12;
	BOOL _field13;
	BOOL _field14;
	BOOL _field15;
	BOOL _field16;
} RespHYMakeFriendsCard;

typedef struct RespFaceInfo {
	RespHead _field1;
	int _field2;
	vector<QQService::FaceInfo, std::allocator<QQService::FaceInfo> > _field3;
	int _field4;
} RespFaceInfo;

typedef struct UserCntlData {
	long long _field1;
	vector<char, std::allocator<char> > _field2;
} UserCntlData;

typedef struct RespGetFace {
	RespHead _field1;
	UserCntlData _field2;
	vector<QQService::FaceInfo, std::allocator<QQService::FaceInfo> > _field3;
} RespGetFace;

typedef struct RespDelFace {
	RespHead _field1;
	int _field2;
	int _field3;
} RespDelFace;

typedef struct RespAddFace {
	RespHead _field1;
	int _field2;
	int _field3;
} RespAddFace;

typedef struct RespReplaceFace {
	RespHead _field1;
	int _field2;
} RespReplaceFace;

typedef struct RespUpdateIntro {
	RespHead _field1;
} RespUpdateIntro;

typedef struct RespUpdateQQFace {
	RespHead _field1;
} RespUpdateQQFace;

typedef struct RespPicSafetyCheck {
	RespHead _field1;
} RespPicSafetyCheck;

typedef struct UserProfile UserProfile;

typedef struct _Vector_impl {
	UserProfile* _field1;
	UserProfile* _field2;
	UserProfile* _field3;
} Vector_impl;

template<>
struct vector<QQService::UserProfile, std::allocator<QQService::UserProfile> > {
	Vector_impl _field1;
};

typedef struct RespGetVisitorList {
	RespHead _field1;
	long long _field2;
	vector<QQService::UserProfile, std::allocator<QQService::UserProfile> > _field3;
	UserCntlData _field4;
} RespGetVisitorList;

typedef struct RespGetVoterList {
	RespHead _field1;
	long long _field2;
	vector<QQService::UserProfile, std::allocator<QQService::UserProfile> > _field3;
	UserCntlData _field4;
} RespGetVoterList;

typedef struct RespVote {
	RespHead _field1;
	long long _field2;
} RespVote;

typedef struct RespSetCard {
	RespHead _field1;
	int _field2;
} RespSetCard;

typedef struct RespSetCardSwitch {
	RespHead _field1;
	unsigned _field2;
} RespSetCardSwitch;

typedef struct RespGetCardSwitch {
	RespHead _field1;
	unsigned _field2;
} RespGetCardSwitch;

typedef struct RespGetFavoriteList {
	RespHead _field1;
	long long _field2;
	vector<QQService::UserProfile, std::allocator<QQService::UserProfile> > _field3;
	UserCntlData _field4;
	vector<char, std::allocator<char> > _field5;
} RespGetFavoriteList;

typedef struct RespFavorite {
	RespHead _field1;
	long long _field2;
	BOOL _field3;
	vector<char, std::allocator<char> > _field4;
} RespFavorite;

typedef struct PushCardMsg {
	int _field1;
	vector<char, std::allocator<char> > _field2;
} PushCardMsg;

typedef struct {
	id _field1;
	int _field2;
} XXStruct_lMgBbA;

typedef struct HttpUploadReq {
	vector<char, std::allocator<char> > _field1;
	int _field2;
	vector<char, std::allocator<char> > _field3;
	int _field4;
	int _field5;
	vector<char, std::allocator<char> > _field6;
	BOOL _field7;
	DefineAvatarInfo _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field11;
} HttpUploadReq;

typedef struct HttpDownloadReq {
	vector<char, std::allocator<char> > _field1;
	vector<char, std::allocator<char> > _field2;
	int _field3;
	int _field4;
	short _field5;
	int _field6;
} HttpDownloadReq;

typedef struct RespTmpChatPicDownload {
	long long _field1;
	long long _field2;
	int _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
} RespTmpChatPicDownload;

typedef struct _LongLongRange {
	long long _field1;
	long long _field2;
} LongLongRange;

typedef struct DayWeather {
	int _field1;
	int _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	int _field7;
} DayWeather;

typedef struct ThreeDayWeather {
	DayWeather _field1;
	DayWeather _field2;
	DayWeather _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
} ThreeDayWeather;

typedef struct WeatherInfoRes {
	BOOL _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	ThreeDayWeather _field3;
	BOOL _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
} WeatherInfoRes;

typedef struct _Vector_impl {
	int* _field1;
	int* _field2;
	int* _field3;
} Vector_impl;

template<>
struct vector<int, std::allocator<int> > {
	Vector_impl _field1;
};

typedef struct GPicInfo GPicInfo;

typedef struct _Vector_impl {
	GPicInfo* _field1;
	GPicInfo* _field2;
	GPicInfo* _field3;
} Vector_impl;

template<>
struct vector<MessageSvcPack::GPicInfo, std::allocator<MessageSvcPack::GPicInfo> > {
	Vector_impl _field1;
};

typedef struct GroupMsgHead {
	unsigned short _field1;
	BOOL _field2;
	BOOL _field3;
	unsigned short _field4;
	unsigned _field5;
} GroupMsgHead;

typedef struct MarketFaceInfo MarketFaceInfo;

typedef struct _Vector_impl {
	MarketFaceInfo* _field1;
	MarketFaceInfo* _field2;
	MarketFaceInfo* _field3;
} Vector_impl;

template<>
struct vector<MessageSvcPack::MarketFaceInfo, std::allocator<MessageSvcPack::MarketFaceInfo> > {
	Vector_impl _field1;
};

typedef struct stGroupMsgRecord {
	long long _field1;
	BOOL _field2;
	long long _field3;
	long long _field4;
	int _field5;
	long long _field6;
	short _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
	vector<char, std::allocator<char> > _field9;
	unsigned _field10;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field11;
	vector<MessageSvcPack::GPicInfo, std::allocator<MessageSvcPack::GPicInfo> > _field12;
	vector<char, std::allocator<char> > _field13;
	GroupMsgHead _field14;
	unsigned _field15;
	vector<MessageSvcPack::MarketFaceInfo, std::allocator<MessageSvcPack::MarketFaceInfo> > _field16;
} stGroupMsgRecord;

typedef struct {
	long long _field1;
	int _field2;
	char* _field3;
	char* _field4;
	bool _field5;
	long long _field6;
	double _field7;
} XXStruct_VJymoD;

typedef struct AccostMsg {
	short _field1;
	unsigned _field2;
	long long _field3;
	long long _field4;
	int _field5;
	int _field6;
	vector<char, std::allocator<char> > _field7;
	int _field8;
} AccostMsg;

typedef struct MsgItem {
	BOOL _field1;
	vector<char, std::allocator<char> > _field2;
} MsgItem;

typedef struct CPicInfo CPicInfo;

typedef struct _Vector_impl {
	CPicInfo* _field1;
	CPicInfo* _field2;
	CPicInfo* _field3;
} Vector_impl;

template<>
struct vector<OnlinePushPack::CPicInfo, std::allocator<OnlinePushPack::CPicInfo> > {
	Vector_impl _field1;
};

typedef struct shareData {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
} shareData;

typedef struct MsgInfo {
	long long _field1;
	unsigned _field2;
	short _field3;
	short _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	int _field6;
	vector<char, std::allocator<char> > _field7;
	unsigned _field8;
	vector<char, std::allocator<char> > _field9;
	vector<char, std::allocator<char> > _field10;
	long long _field11;
	long long _field12;
	vector<OnlinePushPack::CPicInfo, std::allocator<OnlinePushPack::CPicInfo> > _field13;
	shareData _field14;
	long long _field15;
	vector<char, std::allocator<char> > _field16;
} MsgInfo;

typedef struct MsgType0x210SubMsgType0x2 {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	long long _field5;
	vector<char, std::allocator<char> > _field6;
	vector<char, std::allocator<char> > _field7;
	vector<char, std::allocator<char> > _field8;
	vector<char, std::allocator<char> > _field9;
	unsigned _field10;
	unsigned _field11;
	long long _field12;
	long long _field13;
	vector<char, std::allocator<char> > _field14;
	unsigned _field15;
	unsigned _field16;
} MsgType0x210SubMsgType0x2;

typedef struct MsgType0x210SubMsgType0xb {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	long long _field5;
	unsigned _field6;
	long long _field7;
} MsgType0x210SubMsgType0xb;

typedef struct MsgType0x210SubMsgType0xa {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	long long _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	vector<char, std::allocator<char> > _field9;
	vector<char, std::allocator<char> > _field10;
	long long _field11;
	vector<char, std::allocator<char> > _field12;
	vector<char, std::allocator<char> > _field13;
	long long _field14;
	vector<char, std::allocator<char> > _field15;
	unsigned _field16;
	unsigned _field17;
} MsgType0x210SubMsgType0xa;

typedef struct MsgType0x210SubMsgType0xe {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	long long _field5;
	long long _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
} MsgType0x210SubMsgType0xe;

typedef struct MsgType0x210SubMsgType0x13 {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	long long _field5;
	long long _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned _field9;
	vector<char, std::allocator<char> > _field10;
} MsgType0x210SubMsgType0x13;

typedef struct AddGroup {
	unsigned _field1;
	unsigned _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
} AddGroup;

typedef struct DelGroup {
	unsigned _field1;
} DelGroup;

typedef struct ModGroupName {
	unsigned _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
} ModGroupName;

typedef struct GroupSort GroupSort;

typedef struct _Vector_impl {
	GroupSort* _field1;
	GroupSort* _field2;
	GroupSort* _field3;
} Vector_impl;

template<>
struct vector<IMMsgBodyPack::GroupSort, std::allocator<IMMsgBodyPack::GroupSort> > {
	Vector_impl _field1;
};

typedef struct ModGroupSort {
	vector<IMMsgBodyPack::GroupSort, std::allocator<IMMsgBodyPack::GroupSort> > _field1;
} ModGroupSort;

typedef struct FriendGroup FriendGroup;

typedef struct _Vector_impl {
	FriendGroup* _field1;
	FriendGroup* _field2;
	FriendGroup* _field3;
} Vector_impl;

template<>
struct vector<IMMsgBodyPack::FriendGroup, std::allocator<IMMsgBodyPack::FriendGroup> > {
	Vector_impl _field1;
};

typedef struct ModFriendGroup {
	vector<IMMsgBodyPack::FriendGroup, std::allocator<IMMsgBodyPack::FriendGroup> > _field1;
} ModFriendGroup;

typedef struct MsgType0x210SubMsgType0x17 {
	unsigned _field1;
	AddGroup _field2;
	DelGroup _field3;
	ModGroupName _field4;
	ModGroupSort _field5;
	ModFriendGroup _field6;
} MsgType0x210SubMsgType0x17;

typedef struct MsgType0x210SubMsgType0x20 {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
} MsgType0x210SubMsgType0x20;

typedef struct MsgType0x210SubMsgType0x1d {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
} MsgType0x210SubMsgType0x1d;

typedef struct PluginNum PluginNum;

typedef struct _Vector_impl {
	PluginNum* _field1;
	PluginNum* _field2;
	PluginNum* _field3;
} Vector_impl;

template<>
struct vector<IMMsgBodyPack::PluginNum, std::allocator<IMMsgBodyPack::PluginNum> > {
	Vector_impl _field1;
};

typedef struct MsgType0x210SubMsgType0x24 {
	vector<IMMsgBodyPack::PluginNum, std::allocator<IMMsgBodyPack::PluginNum> > _field1;
} MsgType0x210SubMsgType0x24;

typedef struct MsgType0x210 {
	unsigned _field1;
	MsgType0x210SubMsgType0x2 _field2;
	MsgType0x210SubMsgType0xb _field3;
	MsgType0x210SubMsgType0xa _field4;
	MsgType0x210SubMsgType0xe _field5;
	MsgType0x210SubMsgType0x13 _field6;
	MsgType0x210SubMsgType0x17 _field7;
	MsgType0x210SubMsgType0x20 _field8;
	MsgType0x210SubMsgType0x1d _field9;
	MsgType0x210SubMsgType0x24 _field10;
	vector<char, std::allocator<char> > _field11;
} MsgType0x210;

typedef struct MsgRecord MsgRecord;

typedef struct _Vector_impl {
	MsgRecord* _field1;
	MsgRecord* _field2;
	MsgRecord* _field3;
} Vector_impl;

template<>
struct vector<MessageSvcPack::MsgRecord, std::allocator<MessageSvcPack::MsgRecord> > {
	Vector_impl _field1;
};

typedef struct SvcResponseGetRoamMsgInOneDay {
	long long _field1;
	BOOL _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	long long _field4;
	long long _field5;
	vector<MessageSvcPack::MsgRecord, std::allocator<MessageSvcPack::MsgRecord> > _field6;
	long long _field7;
	vector<char, std::allocator<char> > _field8;
	BOOL _field9;
} SvcResponseGetRoamMsgInOneDay;

typedef struct _Vector_impl {
	MsgInfo* _field1;
	MsgInfo* _field2;
	MsgInfo* _field3;
} Vector_impl;

template<>
struct vector<OnlinePushPack::MsgInfo, std::allocator<OnlinePushPack::MsgInfo> > {
	Vector_impl _field1;
};

typedef struct UinPairMsg {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	unsigned long long _field3;
	unsigned _field4;
	unsigned _field5;
	RepeatedPtrField<msf::msgcomm::Msg> _field6;
	int _field7;
	unsigned _field8[1];
} UinPairMsg;

typedef struct _Vector_impl {
	UinPairMsg* _field1;
	UinPairMsg* _field2;
	UinPairMsg* _field3;
} Vector_impl;

template<>
struct vector<OnlinePushPack::UinPairMsg, std::allocator<OnlinePushPack::UinPairMsg> > {
	Vector_impl _field1;
};

template<>
struct less<std::basic_string<char> >;

typedef struct _Rb_tree_node_base {
	int _field1;
	Rb_tree_node_base* _field2;
	Rb_tree_node_base* _field3;
	Rb_tree_node_base* _field4;
} Rb_tree_node_base;

template<>
struct _Rb_tree_impl<std::less<std::basic_string<char>>, false> {
	less<std::basic_string<char> > _field1;
	Rb_tree_node_base _field2;
	unsigned _field3;
};

template<>
struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>> > {
	_Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

template<>
struct map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>> > {
	_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>> > _field1;
};

typedef struct SvcReqPushMsg {
	long long _field1;
	unsigned _field2;
	vector<OnlinePushPack::MsgInfo, std::allocator<OnlinePushPack::MsgInfo> > _field3;
	int _field4;
	vector<char, std::allocator<char> > _field5;
	vector<OnlinePushPack::UinPairMsg, std::allocator<OnlinePushPack::UinPairMsg> > _field6;
	map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>> > _field7;
	unsigned short _field8;
} SvcReqPushMsg;

typedef struct SvcResponseGetRoamMsg {
	long long _field1;
	BOOL _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	long long _field4;
	long long _field5;
	vector<MessageSvcPack::MsgRecord, std::allocator<MessageSvcPack::MsgRecord> > _field6;
	long long _field7;
	vector<char, std::allocator<char> > _field8;
} SvcResponseGetRoamMsg;

typedef struct SvcGetMsgInfo {
	long long _field1;
	int _field2;
	short _field3;
	short _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	int _field6;
	vector<char, std::allocator<char> > _field7;
	unsigned _field8;
	BOOL _field9;
	vector<char, std::allocator<char> > _field10;
	long long _field11;
	long long _field12;
	long long _field13;
	vector<char, std::allocator<char> > _field14;
} SvcGetMsgInfo;

template<>
struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>>, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>>> > {
	_Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

template<>
struct map<std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>>> > {
	_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>>, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>>> > _field1;
};

template<>
struct less<int>;

template<>
struct _Rb_tree_impl<std::less<int>, false> {
	less<int> _field1;
	Rb_tree_node_base _field2;
	unsigned _field3;
};

template<>
struct _Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int>>, std::less<int>, std::allocator<std::pair<const int, int>> > {
	_Rb_tree_impl<std::less<int>, false> _field1;
};

template<>
struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>> > {
	_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int>>, std::less<int>, std::allocator<std::pair<const int, int>> > _field1;
};

template<>
struct _Rb_tree<int, std::pair<const int, QzoneUserInfo>, std::_Select1st<std::pair<const int, QzoneUserInfo>>, std::less<int>, std::allocator<std::pair<const int, QzoneUserInfo>> > {
	_Rb_tree_impl<std::less<int>, false> _field1;
};

template<>
struct map<int, QzoneUserInfo, std::less<int>, std::allocator<std::pair<const int, QzoneUserInfo>> > {
	_Rb_tree<int, std::pair<const int, QzoneUserInfo>, std::_Select1st<std::pair<const int, QzoneUserInfo>>, std::less<int>, std::allocator<std::pair<const int, QzoneUserInfo>> > _field1;
};

typedef struct QZonePacket {
	unsigned char _field1[25];
	unsigned _field2;
	CCrypt _field3;
	unsigned char _field4[16];
	long long _field5;
	long long _field6;
	map<int, int, std::less<int>, std::allocator<std::pair<const int, int>> > _field7;
	map<int, QzoneUserInfo, std::less<int>, std::allocator<std::pair<const int, QzoneUserInfo>> > _field8;
	map<int, int, std::less<int>, std::allocator<std::pair<const int, int>> > _field9;
	map<int, int, std::less<int>, std::allocator<std::pair<const int, int>> > _field10;
} QZonePacket;

typedef struct QZoneUnPacket QZoneUnPacket;

template<>
struct vector<cannon::Visitor, std::allocator<cannon::Visitor> > {
	Vector_impl _field1;
};

typedef struct {
	int _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	vector<cannon::Visitor, std::allocator<cannon::Visitor> > _field3;
	int _field4;
	int _field5;
} XXStruct_sPpY5A;

typedef struct {
	int _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
} XXStruct_a633_C;

typedef struct TIMSO {
	int _field1;
	int _field2;
	int _field3;
} TIMSO;

typedef struct CIPCSO {
	/*function-pointer*/ void** _field1;
	TIMSO _field2;
} CIPCSO;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct {
	int version;
	void* info;
	/*function-pointer*/ void* retain;
	/*function-pointer*/ void* release;
	/*function-pointer*/ void* copyDescription;
} XXStruct_4pnlqD;

typedef struct in_addr {
	unsigned _field1;
} in_addr;

typedef struct sockaddr_in {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	in_addr _field4;
	BOOL _field5[8];
} sockaddr_in;

typedef struct CGPath* CGPathRef;

typedef struct CGrpImageProtocolPackager {
	CCrypt _field1;
	unsigned char _field2[16];
	unsigned _field3;
	unsigned char _field4[64];
	unsigned short _field5;
	unsigned short _field6;
	unsigned char _field7[16];
	char* _field8;
	char* _field9;
} CGrpImageProtocolPackager;

typedef struct stHttpPostRedirect {
	unsigned short wVersion;
	unsigned short wCommand;
	unsigned short wSeq;
	unsigned dwUIN;
	unsigned char unGrpIDType;
	char* pData;
	unsigned short wDataLen;
	char* pBody;
	unsigned short wBodyLen;
	unsigned unGroupUin;
	unsigned unFileSize;
	unsigned char szFileHash[32];
} stHttpPostRedirect;

typedef struct stIP {
	unsigned short wPort;
	unsigned char szIP[4];
	char* strIP;
} stIP;

typedef struct stHttpPostRedirectRsp {
	unsigned short wReturnCode;
	unsigned short shServerIPNum;
	stIP szServerIPList[3];
	unsigned short wErrorMsgLen;
	unsigned short* wStrMsg;
} stHttpPostRedirectRsp;

typedef struct HostInfo HostInfo;

typedef struct _Vector_impl {
	HostInfo* _field1;
	HostInfo* _field2;
	HostInfo* _field3;
} Vector_impl;

template<>
struct vector<GroupPic::HostInfo, std::allocator<GroupPic::HostInfo> > {
	Vector_impl _field1;
};

typedef struct OpaqueAudioQueue OpaqueAudioQueue;

typedef struct AudioQueueLevelMeterState {
	float _field1;
	float _field2;
} AudioQueueLevelMeterState;

typedef struct LevelMeterColorThreshold {
	float _field1;
	id _field2;
} LevelMeterColorThreshold;

typedef struct IXVECodec {
	/*function-pointer*/ void** _field1;
} IXVECodec;

typedef struct __CFString* CFStringRef;

typedef struct AudioQueueBuffer AudioQueueBuffer;

typedef struct CAStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} CAStreamBasicDescription;

typedef struct __sbuf {
	char* _field1;
	int _field2;
} sbuf;

typedef struct __sFILEX sFILEX;

typedef struct __sFILE {
	char* _field1;
	int _field2;
	int _field3;
	short _field4;
	short _field5;
	sbuf _field6;
	int _field7;
	void* _field8;
	/*function-pointer*/ void* _field9;
	/*function-pointer*/ void* _field10;
	/*function-pointer*/ void* _field11;
	/*function-pointer*/ void* _field12;
	sbuf _field13;
	sFILEX* _field14;
	int _field15;
	unsigned char _field16[3];
	unsigned char _field17[1];
	sbuf _field18;
	int _field19;
	long long _field20;
} FILE;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct _Vector_impl {
	long long* _field1;
	long long* _field2;
	long long* _field3;
} Vector_impl;

template<>
struct vector<long long, std::allocator<long long> > {
	Vector_impl _field1;
};

typedef struct ShareTraceList {
	BOOL _field1;
	vector<long long, std::allocator<long long> > _field2;
	vector<long long, std::allocator<long long> > _field3;
} ShareTraceList;

typedef struct RespHeader {
	short _field1;
	long long _field2;
	int _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
} RespHeader;

typedef struct RespSetShareTrace {
	RespHeader _field1;
} RespSetShareTrace;

typedef struct RespHeader {
	short _field1;
	long long _field2;
	int _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	unsigned _field6;
	unsigned _field7;
} RespHeader;

typedef struct UserData {
	vector<char, std::allocator<char> > _field1;
} UserData;

typedef struct RespGetEvent {
	RespHeader _field1;
	UserData _field2;
} RespGetEvent;

typedef struct UserLastPosition UserLastPosition;

typedef struct _Vector_impl {
	UserLastPosition* _field1;
	UserLastPosition* _field2;
	UserLastPosition* _field3;
} Vector_impl;

template<>
struct vector<NeighborSvc::UserLastPosition, std::allocator<NeighborSvc::UserLastPosition> > {
	Vector_impl _field1;
};

typedef struct RespGetLastPosition {
	RespHeader _field1;
	vector<NeighborSvc::UserLastPosition, std::allocator<NeighborSvc::UserLastPosition> > _field2;
} RespGetLastPosition;

typedef struct RespGetSelfShareTrace {
	RespHeader _field1;
	BOOL _field2;
} RespGetSelfShareTrace;

template<>
struct _Rb_tree<int, std::pair<const int, QQService::VipOpenInfo>, std::_Select1st<std::pair<const int, QQService::VipOpenInfo>>, std::less<int>, std::allocator<std::pair<const int, QQService::VipOpenInfo>> > {
	_Rb_tree_impl<std::less<int>, false> _field1;
};

template<>
struct map<int, QQService::VipOpenInfo, std::less<int>, std::allocator<std::pair<const int, QQService::VipOpenInfo>> > {
	_Rb_tree<int, std::pair<const int, QQService::VipOpenInfo>, std::_Select1st<std::pair<const int, QQService::VipOpenInfo>>, std::less<int>, std::allocator<std::pair<const int, QQService::VipOpenInfo>> > _field1;
};

typedef struct VipBaseInfo {
	map<int, QQService::VipOpenInfo, std::less<int>, std::allocator<std::pair<const int, QQService::VipOpenInfo>> > _field1;
} VipBaseInfo;

typedef struct RespEncounterInfo {
	long long _field1;
	int _field2;
	int _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	short _field5;
	BOOL _field6;
	BOOL _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
	BOOL _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field11;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field12;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field13;
	int _field14;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field15;
	short _field16;
	vector<char, std::allocator<char> > _field17;
	vector<char, std::allocator<char> > _field18;
	int _field19;
	int _field20;
	int _field21;
	BOOL _field22;
	int _field23;
	int _field24;
	int _field25;
	long long _field26;
	BOOL _field27;
	VipBaseInfo _field28;
} RespEncounterInfo;

typedef struct GroupInfo {
	long long _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	int _field6;
	bool _field7;
	int _field8;
} GroupInfo;

typedef struct UserData {
	int _field1;
	int _field2;
	int _field3;
	long long _field4;
	long long _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	vector<char, std::allocator<char> > _field7;
} UserData;

typedef struct _Vector_impl {
	RespEncounterInfo* _field1;
	RespEncounterInfo* _field2;
	RespEncounterInfo* _field3;
} Vector_impl;

template<>
struct vector<EncounterSvc::RespEncounterInfo, std::allocator<EncounterSvc::RespEncounterInfo> > {
	Vector_impl _field1;
};

typedef struct UserDetailLocalInfo {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
} UserDetailLocalInfo;

typedef struct PengYouInfo {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
} PengYouInfo;

typedef struct EctFragmentation {
	int _field1;
	int _field2;
} EctFragmentation;

typedef struct RespGetEncounterV2 {
	long long _field1;
	UserData _field2;
	vector<EncounterSvc::RespEncounterInfo, std::allocator<EncounterSvc::RespEncounterInfo> > _field3;
	UserDetailLocalInfo _field4;
	PengYouInfo _field5;
	EctFragmentation _field6;
	int _field7;
	int _field8;
	vector<char, std::allocator<char> > _field9;
} RespGetEncounterV2;

typedef struct _Vector_impl {
	GroupInfo* _field1;
	GroupInfo* _field2;
	GroupInfo* _field3;
} Vector_impl;

template<>
struct vector<NearbyGroup::GroupInfo, std::allocator<NearbyGroup::GroupInfo> > {
	Vector_impl _field1;
};

typedef struct RspGetNearbyGroup {
	int _field1;
	vector<char, std::allocator<char> > _field2;
	int _field3;
	int _field4;
	vector<NearbyGroup::GroupInfo, std::allocator<NearbyGroup::GroupInfo> > _field5;
} RspGetNearbyGroup;

template<>
struct vector<EncounterSvc::GroupInfo, std::allocator<EncounterSvc::GroupInfo> > {
	Vector_impl _field1;
};

typedef struct Msg {
	short _field1;
	unsigned _field2;
	long long _field3;
	long long _field4;
	int _field5;
	int _field6;
	vector<char, std::allocator<char> > _field7;
	unsigned _field8;
} Msg;

typedef struct NeighborFeedInfo {
	long long _field1;
	int _field2;
	FaceInfo _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field7;
	bool _field8;
} NeighborFeedInfo;

typedef struct _Vector_impl {
	NeighborFeedInfo* _field1;
	NeighborFeedInfo* _field2;
	NeighborFeedInfo* _field3;
} Vector_impl;

template<>
struct vector<QQService::NeighborFeedInfo, std::allocator<QQService::NeighborFeedInfo> > {
	Vector_impl _field1;
};

typedef struct RespNeighborFeedList {
	RespHead _field1;
	vector<QQService::NeighborFeedInfo, std::allocator<QQService::NeighborFeedInfo> > _field2;
	int _field3;
	BOOL _field4;
	int _field5;
} RespNeighborFeedList;

typedef struct RespNewNeighborFeed {
	RespHead _field1;
	int _field2;
	vector<QQService::NeighborFeedInfo, std::allocator<QQService::NeighborFeedInfo> > _field3;
} RespNewNeighborFeed;

typedef struct TMsgIndexInfo {
	long long _field1;
	int _field2;
	double _field3;
	long long _field4;
} TMsgIndexInfo;

typedef struct _List_node_base {
	List_node_base* _field1;
	List_node_base* _field2;
} List_node_base;

typedef struct _List_impl {
	List_node_base _field1;
} List_impl;

template<>
struct list<TMsgIndexInfo, std::allocator<TMsgIndexInfo> > {
	List_impl _field1;
};

typedef struct tm {
	int tm_sec;
	int tm_min;
	int tm_hour;
	int tm_mday;
	int tm_mon;
	int tm_year;
	int tm_wday;
	int tm_yday;
	int tm_isdst;
	long tm_gmtoff;
	char* tm_zone;
} tm;

typedef struct __CTFramesetter* CTFramesetterRef;

typedef struct __CTFrame* CTFrameRef;

typedef struct QQHeadInfo* QQHeadInfoRef;

typedef struct _Vector_impl {
	QQHeadInfoRef _field1;
	QQHeadInfoRef _field2;
	QQHeadInfoRef _field3;
} Vector_impl;

template<>
struct vector<AvatarInfo::QQHeadInfo, std::allocator<AvatarInfo::QQHeadInfo> > {
	Vector_impl _field1;
};

typedef struct QQHeadUrlResp {
	unsigned _field1;
	int _field2;
	vector<AvatarInfo::QQHeadInfo, std::allocator<AvatarInfo::QQHeadInfo> > _field3;
} QQHeadUrlResp;

typedef struct {
	BOOL _field1;
	id _field2;
	double _field3;
	id _field4;
	id _field5;
	id _field6;
	id _field7;
	id _field8;
	id _field9;
	id _field10;
} XXStruct_mtqHHC;

typedef struct UIView {
	Class _field1;
	id _field2;
	id _field3;
	id _field4;
	id _field5;
	id _field6;
	float _field7;
	int _field8;
	id _field9;
	id _field10;
	struct {
		unsigned _field1 : 1;
		unsigned _field2 : 1;
		unsigned _field3 : 1;
		unsigned _field4 : 1;
		unsigned _field5 : 1;
		unsigned _field6 : 1;
		unsigned _field7 : 1;
		unsigned _field8 : 1;
		unsigned _field9 : 1;
		unsigned _field10 : 1;
		unsigned _field11 : 1;
		unsigned _field12 : 1;
		unsigned _field13 : 1;
		unsigned _field14 : 1;
		unsigned _field15 : 1;
		unsigned _field16 : 6;
		unsigned _field17 : 1;
		unsigned _field18 : 1;
		unsigned _field19 : 1;
		unsigned _field20 : 1;
		unsigned _field21 : 1;
		unsigned _field22 : 1;
		unsigned _field23 : 1;
		unsigned _field24 : 1;
		unsigned _field25 : 1;
		unsigned _field26 : 1;
		unsigned _field27 : 1;
		unsigned _field28 : 1;
		unsigned _field29 : 1;
		unsigned _field30 : 1;
		unsigned _field31 : 1;
		unsigned _field32 : 1;
		unsigned _field33 : 1;
		unsigned _field34 : 1;
		unsigned _field35 : 1;
		unsigned _field36 : 1;
		unsigned _field37 : 1;
		unsigned _field38 : 1;
		unsigned _field39 : 1;
		unsigned _field40 : 1;
		unsigned _field41 : 1;
		unsigned _field42 : 1;
		unsigned _field43 : 1;
		unsigned _field44 : 1;
		unsigned _field45 : 1;
		unsigned _field46 : 1;
		unsigned _field47 : 1;
		unsigned _field48 : 1;
		unsigned _field49 : 1;
		unsigned _field50 : 1;
		unsigned _field51 : 1;
		unsigned _field52 : 1;
		unsigned _field53 : 1;
		unsigned _field54 : 1;
	} _field11;
} UIView;

typedef struct NSNumber {
	Class _field1;
} NSNumber;

typedef struct dispatch_queue_s dispatch_queue_s;

typedef struct FileUploadResp {
	long long _field1;
	long long _field2;
	int _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	int _field6;
	unsigned _field7;
	short _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field9;
	vector<char, std::allocator<char> > _field10;
	int _field11;
} FileUploadResp;

typedef struct FileDownloadResp {
	long long _field1;
	long long _field2;
	int _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	unsigned _field6;
	short _field7;
	vector<char, std::allocator<char> > _field8;
	vector<char, std::allocator<char> > _field9;
} FileDownloadResp;

typedef struct __CFHTTPMessage* CFHTTPMessageRef;

typedef struct dispatch_source_s dispatch_source_s;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct SSLContext* SSLContextRef;

typedef struct in6_addr {
	union {
		unsigned char _field1[16];
		unsigned short _field2[8];
		unsigned _field3[4];
	} _field1;
} in6_addr;

typedef struct sockaddr_in6 {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	unsigned _field4;
	in6_addr _field5;
	unsigned _field6;
} sockaddr_in6;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct UserInfo UserInfo;

typedef struct _Vector_impl {
	UserInfo* _field1;
	UserInfo* _field2;
	UserInfo* _field3;
} Vector_impl;

template<>
struct vector<AnyToGroup::UserInfo, std::allocator<AnyToGroup::UserInfo> > {
	Vector_impl _field1;
};

typedef struct _dataElement {
	char* _field1;
	int _field2;
} dataElement;

typedef struct _Vector_impl {
	dataElement** _field1;
	dataElement** _field2;
	dataElement** _field3;
} Vector_impl;

template<>
struct vector<_dataElement *, std::allocator<_dataElement *> > {
	Vector_impl _field1;
};

typedef struct MediaDecoder {
	unsigned char _field1;
	int _field2;
	int _field3;
	int _field4;
	int _field5;
	int _field6;
	int _field7;
	int _field8;
	int _field9;
	int _field10;
	char* _field11;
	int _field12;
	int _field13;
	vector<int, std::allocator<int> > _field14;
	vector<int, std::allocator<int> > _field15;
	vector<int, std::allocator<int> > _field16;
	int _field17[32][100];
	int _field18[32];
	int _field19;
	id _field20;
	id _field21;
} MediaDecoder;

typedef struct SoundGen {
	int _field1;
	int _field2;
	int _field3;
	int _field4;
	int _field5;
	int _field6;
	int _field7;
	int _field8;
	int _field9;
	int _field10;
	double _field11;
	double* _field12;
	char* _field13;
	int _field14;
} SoundGen;

typedef struct VoicePlusPlayer {
	OpaqueAudioQueue* _field1;
	AudioQueueBuffer* _field2[1];
	CAStreamBasicDescription _field3;
	unsigned char _field4;
	unsigned _field5;
	unsigned char _field6;
	char* _field7;
	unsigned _field8;
	unsigned _field9;
} VoicePlusPlayer;

typedef struct VoicePlusRecorder {
	unsigned long long _field1;
	id _field2;
	OpaqueAudioQueue* _field3;
	AudioQueueBuffer* _field4[3];
	CAStreamBasicDescription _field5;
	unsigned char _field6;
} VoicePlusRecorder;

template<>
struct vector<Sc2cPicUpload, std::allocator<Sc2cPicUpload> >;

template<>
struct vector<Sc2cPicDownload, std::allocator<Sc2cPicDownload> >;

typedef struct Sc2cPttDownload {
	unsigned long long _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
	bool _field5;
} Sc2cPttDownload;

typedef struct Sc2cPttDownloadSuc {
	unsigned long long _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
} Sc2cPttDownloadSuc;

template<>
struct _Rb_tree<int, std::pair<const int, std::vector<char, std::allocator<char>>>, std::_Select1st<std::pair<const int, std::vector<char, std::allocator<char>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>> > {
	_Rb_tree_impl<std::less<int>, false> _field1;
};

template<>
struct map<int, std::vector<char, std::allocator<char>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>> > {
	_Rb_tree<int, std::pair<const int, std::vector<char, std::allocator<char>>>, std::_Select1st<std::pair<const int, std::vector<char, std::allocator<char>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>> > _field1;
};

typedef struct MixPackage {
	map<int, std::vector<char, std::allocator<char>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>> > _field1;
} MixPackage;

typedef struct RequestPackage {
	BOOL _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	int _field6;
	vector<char, std::allocator<char> > _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field9;
	BOOL _field10;
	BOOL _field11;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field12;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field13;
} RequestPackage;

typedef struct ResponsePackage {
	BOOL _field1;
	int _field2;
	vector<char, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	BOOL _field5;
	BOOL _field6;
	long long _field7;
} ResponsePackage;

typedef struct SecurityStrategyPackage {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	int _field3;
	int _field4;
} SecurityStrategyPackage;

template<>
struct _Rb_tree<int, std::pair<const int, bool>, std::_Select1st<std::pair<const int, bool>>, std::less<int>, std::allocator<std::pair<const int, bool>> > {
	_Rb_tree_impl<std::less<int>, false> _field1;
};

template<>
struct map<int, bool, std::less<int>, std::allocator<std::pair<const int, bool>> > {
	_Rb_tree<int, std::pair<const int, bool>, std::_Select1st<std::pair<const int, bool>>, std::less<int>, std::allocator<std::pair<const int, bool>> > _field1;
};

typedef struct UploadStrategyPackage {
	int _field1;
	int _field2;
	int _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	map<int, bool, std::less<int>, std::allocator<std::pair<const int, bool>> > _field5;
} UploadStrategyPackage;

typedef struct Attachment {
	BOOL _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	vector<char, std::allocator<char> > _field3;
} Attachment;

typedef struct MobileDetail {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
} MobileDetail;

typedef struct ContactInfo {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
} ContactInfo;

typedef struct RunInfo {
	float _field1;
	float _field2;
	long long _field3;
	long long _field4;
	long long _field5;
} RunInfo;

typedef struct _Vector_impl {
	Attachment* _field1;
	Attachment* _field2;
	Attachment* _field3;
} Vector_impl;

template<>
struct vector<exceptionupload::Attachment, std::allocator<exceptionupload::Attachment> > {
	Vector_impl _field1;
};

typedef struct ExceptionUpload {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	long long _field4;
	vector<exceptionupload::Attachment, std::allocator<exceptionupload::Attachment> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
	MobileDetail _field9;
	RunInfo _field10;
	ContactInfo _field11;
} ExceptionUpload;

typedef struct _Vector_impl {
	ExceptionUpload* _field1;
	ExceptionUpload* _field2;
	ExceptionUpload* _field3;
} Vector_impl;

template<>
struct vector<exceptionupload::ExceptionUpload, std::allocator<exceptionupload::ExceptionUpload> > {
	Vector_impl _field1;
};

typedef struct ExceptionUploadPackage {
	vector<exceptionupload::ExceptionUpload, std::allocator<exceptionupload::ExceptionUpload> > _field1;
} ExceptionUploadPackage;

typedef struct EventRecord {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	bool _field4;
	long long _field5;
	long long _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field7;
	long long _field8;
	int _field9;
} EventRecord;

typedef struct _Vector_impl {
	EventRecord* _field1;
	EventRecord* _field2;
	EventRecord* _field3;
} Vector_impl;

template<>
struct vector<eventrecord::EventRecord, std::allocator<eventrecord::EventRecord> > {
	Vector_impl _field1;
};

typedef struct EventRecordPackage {
	vector<eventrecord::EventRecord, std::allocator<eventrecord::EventRecord> > _field1;
} EventRecordPackage;

typedef struct AppUpdate {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	long long _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	bool _field6;
} AppUpdate;

typedef struct UserAgreement {
	int _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	vector<char, std::allocator<char> > _field3;
} UserAgreement;

typedef struct GrayStrategy {
	bool _field1;
	bool _field2;
	int _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	UserAgreement _field6;
	AppUpdate _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
} GrayStrategy;

typedef struct UserAgreementPackage {
	bool _field1;
	long long _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
} UserAgreementPackage;

typedef struct Attachment {
	BOOL _field1;
	vector<char, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	long long _field4;
} Attachment;

template<>
struct vector<graystrategy::Attachment, std::allocator<graystrategy::Attachment> > {
	Vector_impl _field1;
};

typedef struct UserFeedbackPackage {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	vector<graystrategy::Attachment, std::allocator<graystrategy::Attachment> > _field3;
} UserFeedbackPackage;

typedef struct IpMonitor {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
	long long _field5;
	long long _field6;
	long long _field7;
	long long _field8;
	long long _field9;
	int _field10;
	int _field11;
	vector<char, std::allocator<char> > _field12;
} IpMonitor;

typedef struct DomainMonitor {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	long long _field4;
	long long _field5;
	long long _field6;
	long long _field7;
	long long _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
	long long _field11;
	int _field12;
	int _field13;
	vector<char, std::allocator<char> > _field14;
} DomainMonitor;

typedef struct _Vector_impl {
	IpMonitor* _field1;
	IpMonitor* _field2;
	IpMonitor* _field3;
} Vector_impl;

template<>
struct vector<speedmonitor::IpMonitor, std::allocator<speedmonitor::IpMonitor> > {
	Vector_impl _field1;
};

typedef struct _Vector_impl {
	DomainMonitor* _field1;
	DomainMonitor* _field2;
	DomainMonitor* _field3;
} Vector_impl;

template<>
struct vector<speedmonitor::DomainMonitor, std::allocator<speedmonitor::DomainMonitor> > {
	Vector_impl _field1;
};

typedef struct SpeedMonitorPackage {
	vector<speedmonitor::IpMonitor, std::allocator<speedmonitor::IpMonitor> > _field1;
	vector<speedmonitor::DomainMonitor, std::allocator<speedmonitor::DomainMonitor> > _field2;
} SpeedMonitorPackage;

typedef struct IpSource {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	int _field2;
	int _field3;
} IpSource;

typedef struct DomainSource {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	int _field2;
} DomainSource;

typedef struct _Vector_impl {
	IpSource* _field1;
	IpSource* _field2;
	IpSource* _field3;
} Vector_impl;

template<>
struct vector<strategy::IpSource, std::allocator<strategy::IpSource> > {
	Vector_impl _field1;
};

typedef struct _Vector_impl {
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field3;
} Vector_impl;

template<>
struct vector<std::basic_string<char>, std::allocator<std::basic_string<char>> > {
	Vector_impl _field1;
};

typedef struct _Vector_impl {
	DomainSource* _field1;
	DomainSource* _field2;
	DomainSource* _field3;
} Vector_impl;

template<>
struct vector<strategy::DomainSource, std::allocator<strategy::DomainSource> > {
	Vector_impl _field1;
};

typedef struct SpeedMonitorSource {
	vector<strategy::IpSource, std::allocator<strategy::IpSource> > _field1;
	vector<std::basic_string<char>, std::allocator<std::basic_string<char>> > _field2;
	vector<strategy::DomainSource, std::allocator<strategy::DomainSource> > _field3;
} SpeedMonitorSource;

typedef struct CATransform3D {
	float _field1;
	float _field2;
	float _field3;
	float _field4;
	float _field5;
	float _field6;
	float _field7;
	float _field8;
	float _field9;
	float _field10;
	float _field11;
	float _field12;
	float _field13;
	float _field14;
	float _field15;
	float _field16;
} CATransform3D;

typedef struct GetResourceRespInfo {
	int _field1;
	unsigned _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	unsigned _field4;
	short _field5;
	short _field6;
	short _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field11;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field12;
} GetResourceRespInfo;

typedef struct PluginInfo {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field10;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field11;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field12;
	unsigned _field13;
	int _field14;
	unsigned _field15[1];
} PluginInfo;

template<>
struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, long long>, std::_Select1st<std::pair<const std::basic_string<char>, long long>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, long long>> > {
	_Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

template<>
struct map<std::basic_string<char>, long long, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, long long>> > {
	_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, long long>, std::_Select1st<std::pair<const std::basic_string<char>, long long>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, long long>> > _field1;
};

typedef struct CDBMaxMsgIdManager {
	map<std::basic_string<char>, long long, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, long long>> > _field1;
} CDBMaxMsgIdManager;

template<>
struct RepeatedPtrField<msf::msgcomm::Msg> {
	void** _field1;
	int _field2;
	int _field3;
	int _field4;
};

template<>
struct RepeatedPtrField<msf::msgcomm::UinPairMsg> {
	void** _field1;
	int _field2;
	int _field3;
	int _field4;
};

typedef struct PbGetMsgResp {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field3;
	unsigned _field4;
	int _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field6;
	RepeatedPtrField<msf::msgcomm::UinPairMsg> _field7;
	int _field8;
	unsigned _field9[1];
} PbGetMsgResp;

typedef struct Ptt {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	unsigned long long _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field4;
	unsigned _field5;
	unsigned _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field9;
	int _field10;
	unsigned _field11[1];
} Ptt;

typedef struct C2CTmpMsgHead C2CTmpMsgHead;

typedef struct Attr Attr;

template<>
struct RepeatedPtrField<tencent::im::msg::Elem> {
	void** _field1;
	int _field2;
	int _field3;
	int _field4;
};

typedef struct NotOnlineFile {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field4;
	unsigned _field5;
	unsigned _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field9;
	unsigned _field10;
	unsigned _field11;
	int _field12;
	unsigned _field13[1];
} NotOnlineFile;

typedef struct RichText {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	Attr* _field3;
	RepeatedPtrField<tencent::im::msg::Elem> _field4;
	NotOnlineFile* _field5;
	Ptt* _field6;
	int _field7;
	unsigned _field8[1];
} RichText;

typedef struct TransElem {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field3;
	unsigned _field4;
	int _field5;
	unsigned _field6[1];
} TransElem;

typedef struct SubCmd0x1RspDelTab SubCmd0x1RspDelTab;

typedef struct SubCmd0x2RspFetchTab SubCmd0x2RspFetchTab;

typedef struct SubCmd0x3RspFetchBq SubCmd0x3RspFetchBq;

typedef struct RspBody {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	unsigned _field3;
	int _field4;
	SubCmd0x1RspDelTab* _field5;
	SubCmd0x2RspFetchTab* _field6;
	SubCmd0x3RspFetchBq* _field7;
	int _field8;
	unsigned _field9[1];
} RspBody;

typedef struct SubCmd0x2RspFetchTab_TabInfo {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	int _field6;
	int _field7;
	unsigned _field8[1];
} SubCmd0x2RspFetchTab_TabInfo;

typedef struct SubCmd0x1ReqDelTab SubCmd0x1ReqDelTab;

typedef struct SubCmd0x2ReqFetchTab SubCmd0x2ReqFetchTab;

typedef struct SubCmd0x3ReqFetchBq SubCmd0x3ReqFetchBq;

typedef struct ReqBody {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	unsigned long long _field3;
	SubCmd0x1ReqDelTab* _field4;
	SubCmd0x2ReqFetchTab* _field5;
	SubCmd0x3ReqFetchBq* _field6;
	unsigned _field7;
	int _field8;
	unsigned _field9[1];
} ReqBody;

typedef struct RoutingHead {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	C2C* _field3;
	Grp* _field4;
	GrpTmp* _field5;
	Dis* _field6;
	DisTmp* _field7;
	WPATmp* _field8;
	SecretFileHead* _field9;
	PublicPlat* _field10;
	TransMsg* _field11;
	int _field12;
	unsigned _field13[1];
} RoutingHead;

typedef struct PbSendMsgReq {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	RoutingHead* _field3;
	ContentHead* _field4;
	MsgBody* _field5;
	unsigned _field6;
	unsigned _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field8;
	AppShareInfo* _field9;
	int _field10;
	unsigned _field11[1];
} PbSendMsgReq;

typedef struct Text Text;

typedef struct Face Face;

typedef struct OnlineImage OnlineImage;

typedef struct NotOnlineImage NotOnlineImage;

typedef struct MarketFace MarketFace;

typedef struct ElemFlags ElemFlags;

typedef struct ElemFlags2 ElemFlags2;

typedef struct Elem {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	Text* _field3;
	Face* _field4;
	OnlineImage* _field5;
	NotOnlineImage* _field6;
	TransElem* _field7;
	MarketFace* _field8;
	ElemFlags* _field9;
	ElemFlags2* _field10;
	int _field11;
	unsigned _field12[1];
} Elem;

typedef struct CSplitedEleWithEmo {
	/*function-pointer*/ void** _field1;
	int _field2;
} CSplitedEleWithEmo;

typedef struct C2C C2C;

typedef struct Grp Grp;

typedef struct GrpTmp GrpTmp;

typedef struct Dis Dis;

typedef struct DisTmp DisTmp;

typedef struct WPATmp {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	unsigned long long _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* _field4;
	int _field5;
	unsigned _field6[1];
} WPATmp;

typedef struct SecretFileHead SecretFileHead;

typedef struct PublicPlat PublicPlat;

typedef struct TransMsg TransMsg;

template<>
struct RepeatedField<unsigned int> {
	unsigned* _field1;
	int _field2;
	int _field3;
};

typedef struct CircleRspTimeStamps {
	/*function-pointer*/ void** _field1;
	UnknownFieldSet _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	RepeatedField<unsigned int> _field7;
	RepeatedField<unsigned int> _field8;
	unsigned _field9;
	int _field10;
	unsigned _field11[1];
} CircleRspTimeStamps;

typedef struct JKHashTableEntry {
	unsigned _field1;
	id _field2;
	id _field3;
} JKHashTableEntry;

typedef struct JKConstPtrRange {
	char* _field1;
	unsigned _field2;
} JKConstPtrRange;

typedef struct JKConstBuffer {
	JKConstPtrRange _field1;
} JKConstBuffer;

typedef struct JKTokenCacheItem* JKTokenCacheItemRef;

typedef struct JKTokenValue {
	JKConstPtrRange _field1;
	unsigned _field2;
	unsigned _field3;
	union {
		long long _field1;
		unsigned long long _field2;
		double _field3;
	} _field4;
	JKTokenCacheItemRef _field5;
} JKTokenValue;

typedef struct JKPtrRange {
	char* _field1;
	unsigned _field2;
} JKPtrRange;

typedef struct JKManagedBuffer {
	JKPtrRange _field1;
	unsigned _field2;
	unsigned _field3;
} JKManagedBuffer;

typedef struct JKParseToken {
	JKConstPtrRange _field1;
	unsigned _field2;
	JKTokenValue _field3;
	JKManagedBuffer _field4;
} JKParseToken;

typedef struct JKObjectStack {
	void** _field1;
	void** _field2;
	unsigned* _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
} JKObjectStack;

typedef struct JKTokenCache {
	JKTokenCacheItemRef _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned char _field4[1024];
} JKTokenCache;

typedef struct JKObjCImpCache {
	Class _field1;
	/*function-pointer*/ void* _field2;
	/*function-pointer*/ void* _field3;
} JKObjCImpCache;

typedef struct JKParseState {
	unsigned _field1;
	JKConstBuffer _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	JKParseToken _field9;
	JKObjectStack _field10;
	JKTokenCache _field11;
	JKObjCImpCache _field12;
	id _field13;
	int _field14;
	BOOL _field15;
} JKParseState;

typedef struct JKFastClassLookup {
	void* _field1;
	void* _field2;
	void* _field3;
	void* _field4;
	void* _field5;
} JKFastClassLookup;

typedef struct JKEncodeCache {
	id _field1;
	unsigned _field2;
	unsigned _field3;
} JKEncodeCache;

typedef struct JKEncodeState {
	JKManagedBuffer _field1;
	JKManagedBuffer _field2;
	unsigned _field3;
	JKFastClassLookup _field4;
	JKEncodeCache _field5[1024];
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	id _field9;
	id _field10;
	SEL _field11;
	/*function-pointer*/ void* _field12;
	id _field13;
	/*function-pointer*/ void _field14;
} JKEncodeState;

typedef struct CGGradient* CGGradientRef;

typedef struct __CFNumber* CFNumberRef;

typedef struct __CTFont* CTFontRef;

typedef struct __CTRun* CTRunRef;

typedef struct CTParagraphStyleSetting {
	unsigned _field1;
	unsigned _field2;
	void* _field3;
} CTParagraphStyleSetting;

typedef struct {
	double x;
	double y;
	double z;
} XXStruct_taVrlB;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct {
	id _field1;
	/*function-pointer*/ void _field2;
	id _field3;
	/*function-pointer*/ void _field4;
	id _field5;
	/*function-pointer*/ void _field6;
} XXStruct_0V4DFB;

typedef struct MQZLevelMeterColorThreshold {
	float _field1;
	id _field2;
} MQZLevelMeterColorThreshold;

typedef struct s_user {
	long long _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	int _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	int _field7;
	int _field8;
	int _field9;
	int _field10;
} s_user;

template<>
struct _Rb_tree<int, std::pair<const int, NS_MOBILE_FEEDS::s_picurl>, std::_Select1st<std::pair<const int, NS_MOBILE_FEEDS::s_picurl>>, std::less<int>, std::allocator<std::pair<const int, NS_MOBILE_FEEDS::s_picurl>> > {
	_Rb_tree_impl<std::less<int>, false> _field1;
};

template<>
struct map<int, NS_MOBILE_FEEDS::s_picurl, std::less<int>, std::allocator<std::pair<const int, NS_MOBILE_FEEDS::s_picurl>> > {
	_Rb_tree<int, std::pair<const int, NS_MOBILE_FEEDS::s_picurl>, std::_Select1st<std::pair<const int, NS_MOBILE_FEEDS::s_picurl>>, std::less<int>, std::allocator<std::pair<const int, NS_MOBILE_FEEDS::s_picurl>> > _field1;
};

template<>
struct _Rb_tree<int, std::pair<const int, std::basic_string<char>>, std::_Select1st<std::pair<const int, std::basic_string<char>>>, std::less<int>, std::allocator<std::pair<const int, std::basic_string<char>>> > {
	_Rb_tree_impl<std::less<int>, false> _field1;
};

template<>
struct map<int, std::basic_string<char>, std::less<int>, std::allocator<std::pair<const int, std::basic_string<char>>> > {
	_Rb_tree<int, std::pair<const int, std::basic_string<char>>, std::_Select1st<std::pair<const int, std::basic_string<char>>>, std::less<int>, std::allocator<std::pair<const int, std::basic_string<char>>> > _field1;
};

typedef struct s_imgcrop {
	unsigned _field1;
	unsigned _field2;
} s_imgcrop;

typedef struct s_picdata {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	map<int, NS_MOBILE_FEEDS::s_picurl, std::less<int>, std::allocator<std::pair<const int, NS_MOBILE_FEEDS::s_picurl>> > _field4;
	int _field5;
	bool _field6;
	int _field7;
	int _field8;
	map<int, std::basic_string<char>, std::less<int>, std::allocator<std::pair<const int, std::basic_string<char>>> > _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
	int _field11;
	int _field12;
	unsigned _field13;
	unsigned _field14;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field15;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field16;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field17;
	s_imgcrop _field18;
	long long _field19;
} s_picdata;

typedef struct cell_comm {
	int _field1;
	int _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
	int _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	int _field7;
	int _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field11;
	int _field12;
	int _field13;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field14;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field15;
} cell_comm;

typedef struct cell_userinfo {
	s_user _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
} cell_userinfo;

typedef struct cell_id {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
} cell_id;

typedef struct _Vector_impl {
	s_user* _field1;
	s_user* _field2;
	s_user* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_FEEDS::s_user, std::allocator<NS_MOBILE_FEEDS::s_user> > {
	Vector_impl _field1;
};

typedef struct cell_title {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	vector<NS_MOBILE_FEEDS::s_user, std::allocator<NS_MOBILE_FEEDS::s_user> > _field3;
	int _field4;
} cell_title;

typedef struct cell_summary {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
} cell_summary;

typedef struct _Vector_impl {
	s_picdata* _field1;
	s_picdata* _field2;
	s_picdata* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_FEEDS::s_picdata, std::allocator<NS_MOBILE_FEEDS::s_picdata> > {
	Vector_impl _field1;
};

typedef struct cell_pic {
	vector<NS_MOBILE_FEEDS::s_picdata, std::allocator<NS_MOBILE_FEEDS::s_picdata> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
	int _field5;
	int _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field9;
	long long _field10;
	bool _field11;
	int _field12;
	map<int, std::basic_string<char>, std::less<int>, std::allocator<std::pair<const int, std::basic_string<char>>> > _field13;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field14;
} cell_pic;

typedef struct cell_video {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	map<int, NS_MOBILE_FEEDS::s_picurl, std::less<int>, std::allocator<std::pair<const int, NS_MOBILE_FEEDS::s_picurl>> > _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
} cell_video;

typedef struct cell_gift {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	map<int, std::basic_string<char>, std::less<int>, std::allocator<std::pair<const int, std::basic_string<char>>> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
} cell_gift;

typedef struct s_audio {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	int _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
} s_audio;

typedef struct _Vector_impl {
	s_audio* _field1;
	s_audio* _field2;
	s_audio* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_FEEDS::s_audio, std::allocator<NS_MOBILE_FEEDS::s_audio> > {
	Vector_impl _field1;
};

typedef struct cell_audio {
	vector<NS_MOBILE_FEEDS::s_audio, std::allocator<NS_MOBILE_FEEDS::s_audio> > _field1;
} cell_audio;

typedef struct cell_left_thumb {
	int _field1;
	s_picdata _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	int _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
} cell_left_thumb;

typedef struct cell_music {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
	int _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	int _field7;
} cell_music;

typedef struct s_gps {
	int _field1;
	int _field2;
	int _field3;
} s_gps;

typedef struct cell_lbs {
	s_gps _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
} cell_lbs;

typedef struct cell_remark {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
} cell_remark;

typedef struct s_commment {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	s_user _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	vector<NS_MOBILE_FEEDS::s_reply, std::allocator<NS_MOBILE_FEEDS::s_reply> > _field6;
	int _field7;
	vector<NS_MOBILE_FEEDS::s_picdata, std::allocator<NS_MOBILE_FEEDS::s_picdata> > _field8;
	s_audio _field9;
} s_commment;

typedef struct _Vector_impl {
	s_commment* _field1;
	s_commment* _field2;
	s_commment* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_FEEDS::s_commment, std::allocator<NS_MOBILE_FEEDS::s_commment> > {
	Vector_impl _field1;
};

typedef struct s_reply s_reply;

typedef struct _Vector_impl {
	s_reply* _field1;
	s_reply* _field2;
	s_reply* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_FEEDS::s_reply, std::allocator<NS_MOBILE_FEEDS::s_reply> > {
	Vector_impl _field1;
};

typedef struct cell_comment {
	int _field1;
	vector<NS_MOBILE_FEEDS::s_commment, std::allocator<NS_MOBILE_FEEDS::s_commment> > _field2;
	s_commment _field3;
} cell_comment;

typedef struct s_likeman s_likeman;

typedef struct _Vector_impl {
	s_likeman* _field1;
	s_likeman* _field2;
	s_likeman* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_FEEDS::s_likeman, std::allocator<NS_MOBILE_FEEDS::s_likeman> > {
	Vector_impl _field1;
};

typedef struct cell_like {
	int _field1;
	int _field2;
	vector<NS_MOBILE_FEEDS::s_likeman, std::allocator<NS_MOBILE_FEEDS::s_likeman> > _field3;
} cell_like;

typedef struct cell_share {
	int _field1;
} cell_share;

typedef struct s_picurl {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	int _field2;
	int _field3;
	int _field4;
	int _field5;
} s_picurl;

typedef struct s_outshare {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	map<int, NS_MOBILE_FEEDS::s_picurl, std::less<int>, std::allocator<std::pair<const int, NS_MOBILE_FEEDS::s_picurl>> > _field3;
} s_outshare;

typedef struct cell_forward {
	int _field1;
} cell_forward;

typedef struct cell_visitor {
	int _field1;
	int _field2;
	vector<NS_MOBILE_FEEDS::s_user, std::allocator<NS_MOBILE_FEEDS::s_user> > _field3;
} cell_visitor;

typedef struct cell_operation {
	map<int, std::basic_string<char>, std::less<int>, std::allocator<std::pair<const int, std::basic_string<char>>> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	s_outshare _field4;
} cell_operation;

typedef struct cell_text {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
} cell_text;

typedef struct cell_link {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
} cell_link;

typedef struct _Vector_impl {
	vector<char, std::allocator<char> >* _field1;
	vector<char, std::allocator<char> >* _field2;
	vector<char, std::allocator<char> >* _field3;
} Vector_impl;

template<>
struct vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>> > {
	Vector_impl _field1;
};

typedef struct cell_detail_content {
	vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>> > _field1;
} cell_detail_content;

typedef struct cell_original {
	map<int, std::vector<char, std::allocator<char>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>> > _field1;
} cell_original;

typedef struct single_feed {
	map<int, std::vector<char, std::allocator<char>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>> > _field1;
	unsigned _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
} single_feed;

typedef struct single_detail {
	map<int, std::vector<char, std::allocator<char>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>> > _field1;
} single_detail;

typedef struct Album {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	int _field5;
	int _field6;
	int _field7;
	int _field8;
	int _field9;
} Album;

template<>
struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>>, std::_Select1st<std::pair<const std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>>> > {
	_Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

template<>
struct map<std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>>> > {
	_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>>, std::_Select1st<std::pair<const std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>>> > _field1;
};

template<>
struct map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>> > {
	_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::vector<char, std::allocator<char>>>> > _field1;
};

template<>
struct JceInputStream<taf::BufferReader> {
	char* _field1;
	unsigned _field2;
	unsigned _field3;
};

template<>
struct JceOutputStream<taf::BufferWriter> {
	char* _field1;
	unsigned _field2;
	unsigned _field3;
};

template<>
struct UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator> {
	map<std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>>> > _field1;
	map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>> > _field2;
	short _field3;
	JceInputStream<taf::BufferReader> _field4;
	JceOutputStream<taf::BufferWriter> _field5;
};

template<>
struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::basic_string<char>>, std::_Select1st<std::pair<const std::basic_string<char>, std::basic_string<char>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>> > {
	_Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

template<>
struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>> > {
	_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::basic_string<char>>, std::_Select1st<std::pair<const std::basic_string<char>, std::basic_string<char>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>> > _field1;
};

template<>
struct UniPacket<taf::BufferWriter, taf::BufferReader, std::allocator> {
	short _field1;
	BOOL _field2;
	int _field3;
	int _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	vector<char, std::allocator<char> > _field7;
	int _field8;
	map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>> > _field9;
	map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>> > _field10;
	map<std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>>>>> > _field11;
	map<std::basic_string<char>, std::vector<char, std::allocator<char>>, std::less<std::basic_string<char>>, std::allocator<std::pair<std::basic_string<char>, std::vector<char, std::allocator<char>>>> > _field12;
	short _field13;
	JceInputStream<taf::BufferReader> _field14;
	JceOutputStream<taf::BufferWriter> _field15;
};

typedef struct GeoInfo_V2 {
	int _field1;
	int _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field6;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field9;
} GeoInfo_V2;

typedef struct GPS_V2 {
	int _field1;
	int _field2;
	int _field3;
	int _field4;
} GPS_V2;

typedef struct WeatherInfo_V2 {
	int _field1;
	int _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	int _field5;
	int _field6;
	int _field7;
	int _field8;
	int _field9;
	int _field10;
	int _field11;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field12;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field13;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field14;
	int _field15;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field16;
	int _field17;
	int _field18;
	unsigned _field19;
} WeatherInfo_V2;

typedef struct SvcRequestHead {
	short _field1;
	long long _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	int _field4;
	vector<char, std::allocator<char> > _field5;
	int _field6;
	int _field7;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field8;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field9;
	long long _field10;
	long long _field11;
	int _field12;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field13;
	int _field14;
	int _field15;
	int _field16;
	vector<char, std::allocator<char> > _field17;
	int _field18;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field19;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field20;
	long long _field21;
	int _field22;
	int _field23;
	int _field24;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field25;
	int _field26;
	int _field27;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field28;
	int _field29;
} SvcRequestHead;

typedef struct FileUploadControlReq {
	vector<char, std::allocator<char> > _field1;
} FileUploadControlReq;

typedef struct QpaiQuanInfo QpaiQuanInfo;

typedef struct _Vector_impl {
	QpaiQuanInfo* _field1;
	QpaiQuanInfo* _field2;
	QpaiQuanInfo* _field3;
} Vector_impl;

template<>
struct vector<FileUpload::QpaiQuanInfo, std::allocator<FileUpload::QpaiQuanInfo> > {
	Vector_impl _field1;
};

typedef struct PicExtendInfo {
	int _field1;
	vector<FileUpload::QpaiQuanInfo, std::allocator<FileUpload::QpaiQuanInfo> > _field2;
} PicExtendInfo;

typedef struct MultiPicInfo {
	int _field1;
	int _field2;
	int _field3;
	int _field4;
} MultiPicInfo;

typedef struct stPoi {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field5;
	int _field6;
} stPoi;

typedef struct stWaterTemplate {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
} stWaterTemplate;

typedef struct UploadPicInfoReq {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field4;
	int _field5;
	int _field6;
	int _field7;
	int _field8;
	long long _field9;
	MultiPicInfo _field10;
	PicExtendInfo _field11;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field12;
	int _field13;
	int _field14;
	int _field15;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field16;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field17;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field18;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field19;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field20;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field21;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field22;
	int _field23;
	long long _field24;
	map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>> > _field25;
	int _field26;
	stPoi _field27;
	stWaterTemplate _field28;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field29;
	int _field30;
	vector<char, std::allocator<char> > _field31;
} UploadPicInfoReq;

typedef struct UploadReq {
	unsigned _field1;
	int _field2;
	unsigned short _field3;
	vector<char, std::allocator<char> > _field4;
	int _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	vector<char, std::allocator<char> > _field9;
} UploadReq;

typedef struct UploadVideoInfoReq {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	int _field3;
	long long _field4;
	int _field5;
	vector<char, std::allocator<char> > _field6;
} UploadVideoInfoReq;

typedef struct QZIntSize {
	int _field1;
	int _field2;
} QZIntSize;

typedef struct __CTLine* CTLineRef;

typedef struct template_gift_type_item template_gift_type_item;

typedef struct _Vector_impl {
	template_gift_type_item* _field1;
	template_gift_type_item* _field2;
	template_gift_type_item* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_TEMPLATE_GIFT::template_gift_type_item, std::allocator<NS_MOBILE_TEMPLATE_GIFT::template_gift_type_item> > {
	Vector_impl _field1;
};

typedef struct common_gift_type_item common_gift_type_item;

typedef struct _Vector_impl {
	common_gift_type_item* _field1;
	common_gift_type_item* _field2;
	common_gift_type_item* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_TEMPLATE_GIFT::common_gift_type_item, std::allocator<NS_MOBILE_TEMPLATE_GIFT::common_gift_type_item> > {
	Vector_impl _field1;
};

typedef struct s_gift_item s_gift_item;

typedef struct _Vector_impl {
	s_gift_item* _field1;
	s_gift_item* _field2;
	s_gift_item* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_TEMPLATE_GIFT::s_gift_item, std::allocator<NS_MOBILE_TEMPLATE_GIFT::s_gift_item> > {
	Vector_impl _field1;
};

typedef struct template_gift_item template_gift_item;

typedef struct _Vector_impl {
	template_gift_item* _field1;
	template_gift_item* _field2;
	template_gift_item* _field3;
} Vector_impl;

template<>
struct vector<NS_MOBILE_TEMPLATE_GIFT::template_gift_item, std::allocator<NS_MOBILE_TEMPLATE_GIFT::template_gift_item> > {
	Vector_impl _field1;
};

typedef struct internal_state internal_state;

typedef struct z_stream_s {
	char* next_in;
	unsigned avail_in;
	unsigned total_in;
	char* next_out;
	unsigned avail_out;
	unsigned total_out;
	char* msg;
	internal_state* state;
	/*function-pointer*/ void* zalloc;
	/*function-pointer*/ void* zfree;
	void* opaque;
	int data_type;
	unsigned adler;
	unsigned reserved;
} z_stream_s;

typedef struct _CFHTTPAuthentication* CFHTTPAuthenticationRef;

typedef struct __SecIdentity SecIdentity;

typedef struct _xmlNode xmlNode;

typedef struct _xmlDoc {
	void* _field1;
	int _field2;
	char* _field3;
	xmlNode* _field4;
	xmlNode* _field5;
	xmlNode* _field6;
	xmlNode* _field7;
	xmlNode* _field8;
	xmlDoc* _field9;
	int _field10;
	int _field11;
	xmlDtd* _field12;
	xmlDtd* _field13;
	xmlNs* _field14;
	char* _field15;
	char* _field16;
	void* _field17;
	void* _field18;
	char* _field19;
	int _field20;
	xmlDict* _field21;
	void* _field22;
	int _field23;
	int _field24;
} xmlDoc;

typedef struct _xmlDtd xmlDtd;

typedef struct _xmlNs xmlNs;

typedef struct _xmlDict xmlDict;

typedef struct dispatch_group_s dispatch_group_s;

typedef struct dispatch_semaphore_s dispatch_semaphore_s;

typedef struct RespondQueryQQBindingStat {
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
} RespondQueryQQBindingStat;

typedef struct ResponeBindMobile {
	vector<char, std::allocator<char> > _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
} ResponeBindMobile;

typedef struct ResponeReBindMobile {
	vector<char, std::allocator<char> > _field1;
} ResponeReBindMobile;

typedef struct ResponeVerifySmscode {
	vector<char, std::allocator<char> > _field1;
} ResponeVerifySmscode;

typedef struct ResponeResendSmscode {
	vector<char, std::allocator<char> > _field1;
} ResponeResendSmscode;

typedef struct ResponeUploadAddressBook {
	unsigned _field1;
	vector<char, std::allocator<char> > _field2;
} ResponeUploadAddressBook;

typedef struct ResponeUpdateAddressBook {
	unsigned _field1;
	vector<char, std::allocator<char> > _field2;
} ResponeUpdateAddressBook;

typedef struct MobileContactsDetailInfo MobileContactsDetailInfo;

typedef struct _Vector_impl {
	MobileContactsDetailInfo* _field1;
	MobileContactsDetailInfo* _field2;
	MobileContactsDetailInfo* _field3;
} Vector_impl;

template<>
struct vector<SecurityAccountServer::MobileContactsDetailInfo, std::allocator<SecurityAccountServer::MobileContactsDetailInfo> > {
	Vector_impl _field1;
};

typedef struct ResponeQueryQQMobileContacts {
	unsigned _field1;
	unsigned _field2;
	vector<char, std::allocator<char> > _field3;
	vector<SecurityAccountServer::MobileContactsDetailInfo, std::allocator<SecurityAccountServer::MobileContactsDetailInfo> > _field4;
	vector<SecurityAccountServer::MobileContactsDetailInfo, std::allocator<SecurityAccountServer::MobileContactsDetailInfo> > _field5;
} ResponeQueryQQMobileContacts;

typedef struct ResponseGetRecommendedList {
	unsigned _field1;
	unsigned _field2;
	vector<char, std::allocator<char> > _field3;
	vector<SecurityAccountServer::MobileContactsDetailInfo, std::allocator<SecurityAccountServer::MobileContactsDetailInfo> > _field4;
} ResponseGetRecommendedList;

typedef struct stConfNumInfo stConfNumInfo;

typedef struct _Vector_impl {
	stConfNumInfo* _field1;
	stConfNumInfo* _field2;
	stConfNumInfo* _field3;
} Vector_impl;

template<>
struct vector<MessageSvcPack::stConfNumInfo, std::allocator<MessageSvcPack::stConfNumInfo> > {
	Vector_impl _field1;
};

typedef struct SvcResponseGetConfMsgNum {
	BOOL _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	vector<MessageSvcPack::stConfNumInfo, std::allocator<MessageSvcPack::stConfNumInfo> > _field3;
} SvcResponseGetConfMsgNum;

typedef struct PullDisSeqParam PullDisSeqParam;

typedef struct _Vector_impl {
	PullDisSeqParam* _field1;
	PullDisSeqParam* _field2;
	PullDisSeqParam* _field3;
} Vector_impl;

template<>
struct vector<MessageSvcPack::PullDisSeqParam, std::allocator<MessageSvcPack::PullDisSeqParam> > {
	Vector_impl _field1;
};

typedef struct SvcResponsePullDisMsgSeq {
	BOOL _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	vector<MessageSvcPack::stConfNumInfo, std::allocator<MessageSvcPack::stConfNumInfo> > _field3;
} SvcResponsePullDisMsgSeq;

typedef struct stConfMsgRecord stConfMsgRecord;

typedef struct _Vector_impl {
	stConfMsgRecord* _field1;
	stConfMsgRecord* _field2;
	stConfMsgRecord* _field3;
} Vector_impl;

template<>
struct vector<MessageSvcPack::stConfMsgRecord, std::allocator<MessageSvcPack::stConfMsgRecord> > {
	Vector_impl _field1;
};

typedef struct SvcResponseGetConfMsg {
	BOOL _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	long long _field3;
	long long _field4;
	long long _field5;
	short _field6;
	vector<MessageSvcPack::stConfMsgRecord, std::allocator<MessageSvcPack::stConfMsgRecord> > _field7;
	unsigned _field8;
	unsigned _field9;
} SvcResponseGetConfMsg;

typedef struct SvcResponsePullDisMsg {
	BOOL _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	long long _field3;
	long long _field4;
	long long _field5;
	vector<MessageSvcPack::stConfMsgRecord, std::allocator<MessageSvcPack::stConfMsgRecord> > _field6;
	unsigned _field7;
	unsigned _field8;
} SvcResponsePullDisMsg;

typedef struct SvcResponseSetConfMsgRead {
	BOOL _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
	long long _field3;
	long long _field4;
	long long _field5;
} SvcResponseSetConfMsgRead;

typedef struct DelDisParam DelDisParam;

typedef struct _Vector_impl {
	DelDisParam* _field1;
	DelDisParam* _field2;
	DelDisParam* _field3;
} Vector_impl;

template<>
struct vector<MessageSvcPack::DelDisParam, std::allocator<MessageSvcPack::DelDisParam> > {
	Vector_impl _field1;
};

typedef struct SvcResponseDelDisMsg {
	BOOL _field1;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field2;
} SvcResponseDelDisMsg;

typedef struct {
	id _field1;
	id _field2;
} XXStruct_OzJQfB;

typedef struct {
	id _field1;
	float _field2;
} XXStruct_q$hncC;

typedef struct {
	unsigned color;
	float width;
} XXStruct_L6BlQB;

typedef struct {
	float x;
	float y;
	unsigned color;
	float blur;
} XXStruct_1smS3C;

typedef struct {
	XXStruct_L6BlQB stroke;
	XXStruct_1smS3C shadow;
	float radius;
} XXStruct_k2ZiFA;

typedef struct {
	float _field1;
	XXStruct_L6BlQB _field2;
	XXStruct_OzJQfB _field3;
	XXStruct_k2ZiFA _field4;
} XXStruct_xuEUqC;

typedef struct {
	XXStruct_xuEUqC _field1;
	XXStruct_xuEUqC _field2;
} XXStruct_c9RIqA;

typedef struct {
	float _field1;
	BOOL _field2;
	id _field3;
} XXStruct_C3wjVB;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	XXStruct_C3wjVB _field3;
	XXStruct_1smS3C _field4;
	XXStruct_1smS3C _field5;
} XXStruct_3rHmjD;

typedef struct {
	XXStruct_OzJQfB _field1;
	XXStruct_q$hncC _field2;
} XXStruct_2H8njB;

typedef struct {
	unsigned row : 4;
	unsigned col : 4;
} XXStruct_u8NHVB;

typedef struct CQSSetting {
	/*function-pointer*/ void** _field1;
	unsigned _field2;
	unsigned* _field3;
} CQSSetting;

typedef struct QSMouseItem* QSMouseItemRef;

typedef struct QSMouseManager {
	/*function-pointer*/ void** _field1;
	unsigned _field2;
	QSMouseItemRef _field3;
} QSMouseManager;

typedef struct IQSParam* IQSParamRef;

typedef struct QIMSkinCanvasInterface {
	/*function-pointer*/ void** _field1;
	QIMUIPainter* _field2;
	IQSParamRef _field3;
	UIView* _field4;
} QIMSkinCanvasInterface;

typedef struct QIMSkinPlatformInterface {
	/*function-pointer*/ void** _field1;
} QIMSkinPlatformInterface;

typedef struct IQSCtrl* IQSCtrlRef;

typedef struct QIMSkinMessageInterface {
	/*function-pointer*/ void** _field1;
	IQSParamRef _field2;
	IQSCtrlRef _field3;
} QIMSkinMessageInterface;

typedef struct QIMSkinSpecialStroke {
	/*function-pointer*/ void** _field1;
} QIMSkinSpecialStroke;

typedef struct _QS_RECT {
	float _field1;
	float _field2;
	float _field3;
	float _field4;
} QS_RECT;

typedef struct _QS_KEYBOARD_DATA {
	unsigned short _field1;
	unsigned short _field2;
	unsigned _field3;
	QS_RECT _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
} QS_KEYBOARD_DATA;

typedef struct IQSCanvas* IQSCanvasRef;

typedef struct IQSNotify* IQSNotifyRef;

typedef struct IQSStringPool* IQSStringPoolRef;

typedef struct IQSMouseManager* IQSMouseManagerRef;

typedef struct CQSKeyboard {
	/*function-pointer*/ void** _field1;
	/*function-pointer*/ void** _field2;
	IQSCtrlRef* _field3;
	QS_KEYBOARD_DATA _field4;
	IQSCanvasRef _field5;
	IQSNotifyRef _field6;
	IQSStringPoolRef _field7;
	IQSParamRef _field8;
	IQSMouseManagerRef _field9;
} CQSKeyboard;

typedef struct {
	float size;
	BOOL timid;
	NSString* font;
} XXStruct_VlMhRC;

typedef struct _PY_KERNEL_INTERFACE {
	unsigned _field1;
	/*function-pointer*/ void* _field2;
	/*function-pointer*/ void* _field3;
	/*function-pointer*/ void* _field4;
	/*function-pointer*/ void* _field5;
	/*function-pointer*/ void* _field6;
	/*function-pointer*/ void* _field7;
	/*function-pointer*/ void* _field8;
	/*function-pointer*/ void* _field9;
	/*function-pointer*/ void* _field10;
	/*function-pointer*/ void* _field11;
	/*function-pointer*/ void* _field12;
	/*function-pointer*/ void* _field13;
	/*function-pointer*/ void* _field14;
	/*function-pointer*/ void* _field15;
	/*function-pointer*/ void* _field16;
	/*function-pointer*/ void* _field17;
	/*function-pointer*/ void* _field18;
	/*function-pointer*/ void* _field19;
	/*function-pointer*/ void* _field20;
	/*function-pointer*/ void* _field21;
	/*function-pointer*/ void* _field22;
	/*function-pointer*/ void* _field23;
	/*function-pointer*/ void* _field24;
	/*function-pointer*/ void* _field25;
	/*function-pointer*/ void* _field26;
	/*function-pointer*/ void* _field27;
	/*function-pointer*/ void* _field28;
	/*function-pointer*/ void* _field29;
	/*function-pointer*/ void* _field30;
	/*function-pointer*/ void* _field31;
	/*function-pointer*/ void* _field32;
	/*function-pointer*/ void* _field33;
	/*function-pointer*/ void* _field34;
	/*function-pointer*/ void* _field35;
	/*function-pointer*/ void* _field36;
	/*function-pointer*/ void* _field37;
	/*function-pointer*/ void* _field38;
	/*function-pointer*/ void* _field39;
	/*function-pointer*/ void* _field40;
	/*function-pointer*/ void* _field41;
	/*function-pointer*/ void* _field42;
	/*function-pointer*/ void* _field43;
	/*function-pointer*/ void* _field44;
	/*function-pointer*/ void* _field45;
	/*function-pointer*/ void* _field46;
	/*function-pointer*/ void* _field47;
	/*function-pointer*/ void* _field48;
} PY_KERNEL_INTERFACE;

typedef struct _LT_DICT_MGR_INTERFACE {
	unsigned _field1;
	/*function-pointer*/ void* _field2;
	/*function-pointer*/ void* _field3;
	/*function-pointer*/ void* _field4;
	/*function-pointer*/ void* _field5;
	/*function-pointer*/ void* _field6;
	/*function-pointer*/ void* _field7;
	/*function-pointer*/ void* _field8;
	/*function-pointer*/ void* _field9;
	/*function-pointer*/ void* _field10;
	/*function-pointer*/ void* _field11;
	/*function-pointer*/ void* _field12;
	/*function-pointer*/ void* _field13;
	/*function-pointer*/ void* _field14;
	/*function-pointer*/ void* _field15;
	/*function-pointer*/ void* _field16;
	/*function-pointer*/ void* _field17;
	/*function-pointer*/ void* _field18;
	/*function-pointer*/ void* _field19;
	/*function-pointer*/ void* _field20;
	/*function-pointer*/ void* _field21;
	/*function-pointer*/ void* _field22;
	/*function-pointer*/ void* _field23;
	/*function-pointer*/ void* _field24;
	/*function-pointer*/ void* _field25;
	/*function-pointer*/ void* _field26;
	/*function-pointer*/ void* _field27;
	/*function-pointer*/ void* _field28;
	/*function-pointer*/ void* _field29;
	/*function-pointer*/ void* _field30;
	/*function-pointer*/ void* _field31;
} LT_DICT_MGR_INTERFACE;

typedef struct {
	PY_KERNEL_INTERFACE _field1;
	LT_DICT_MGR_INTERFACE _field2;
} XXStruct_KpJhRD;

typedef struct _IM_COMP_CONTEXT {
	unsigned short szBuffer[128];
	unsigned nLen;
	unsigned short szHistoryBuf[128];
	unsigned nHistoryLen;
	unsigned nFlag;
	unsigned nCaretPos;
	unsigned nWidth;
} IM_COMP_CONTEXT;

typedef struct _IM_ITEM {
	unsigned short wPhraseBegin;
	unsigned short wPhraseLen;
	unsigned short wDataBegin;
	unsigned short wDataLen;
	unsigned short wExtendBegin;
	unsigned short wExtendLen;
	unsigned short wPhraseWidth;
	unsigned short wExtendWidth;
	unsigned short wId;
	unsigned short wReserved;
	unsigned nFlag;
} IM_ITEM;

typedef struct _IM_ITEM_LIST {
	IM_ITEM stList[100];
	unsigned nTotal;
} IM_ITEM_LIST;

typedef struct _IM_CAND_CONTEXT {
	unsigned short szPhraseBuffer[255];
	unsigned short szExtendBuffer[255];
	IM_ITEM_LIST stItemList;
	unsigned nHotspot;
	unsigned nHotItemId;
	unsigned nFlag;
} IM_CAND_CONTEXT;

typedef struct _IM_COMMIT_CONTEXT {
	unsigned short szBuffer[128];
	unsigned short szDataBuffer[128];
	unsigned nLen;
} IM_COMMIT_CONTEXT;

typedef struct _IM_INFO_CONTEXT {
	unsigned short wStateId;
	unsigned short wInputMethodId;
	unsigned short wEnCapMode;
	unsigned short wEnTempCapMode;
	unsigned nCandMode;
	unsigned nFlag;
	unsigned nHWCommond;
	unsigned short wBigramEditLen;
	unsigned short wReserved;
} IM_INFO_CONTEXT;

typedef struct _IM_CONTEXT {
	IM_COMP_CONTEXT _field1;
	IM_CAND_CONTEXT _field2;
	IM_CAND_CONTEXT _field3;
	IM_COMMIT_CONTEXT _field4;
	IM_INFO_CONTEXT _field5;
} IM_CONTEXT;

typedef struct _IM_INTERFACE {
	unsigned nSize;
	/*function-pointer*/ void* pfnGetInstanceSize;
	/*function-pointer*/ void* pfnGetVersion;
	/*function-pointer*/ void* pfnInitialize;
	/*function-pointer*/ void* pfnTerminate;
	/*function-pointer*/ void* pfnReset;
	/*function-pointer*/ void* pfnAddDictBlock;
	/*function-pointer*/ void* pfnDelDictBlock;
	/*function-pointer*/ void* pfnSetOption;
	/*function-pointer*/ void* pfnGetOption;
	/*function-pointer*/ void* pfnGetInputmethodList;
	/*function-pointer*/ void* pfnGetActiveInputMethod;
	/*function-pointer*/ void* pfnSetActiveInputMethod;
	/*function-pointer*/ void* pfnIsRequiredEvent;
	/*function-pointer*/ void* pfnEventHandler;
	/*function-pointer*/ void* pfnGetActionBuffer;
	/*function-pointer*/ void* pfnGetPhraseDefaultEncode;
	/*function-pointer*/ void* pfnGetPhraseEncodeTotal;
	/*function-pointer*/ void* pfnGetPhraseEncodeList;
	/*function-pointer*/ void* pfnSeekToBegin;
	/*function-pointer*/ void* pfnGetNextItem;
	/*function-pointer*/ void* pfnPreItem;
	/*function-pointer*/ void* pfnIsLastItem;
	/*function-pointer*/ void* pfnGetCacheTotal;
	/*function-pointer*/ void* pfnGetCacheItem;
	/*function-pointer*/ void* pfnPageStar;
	/*function-pointer*/ void* pfnPageEnd;
	/*function-pointer*/ void* pfnRollBack;
} IM_INTERFACE;

typedef struct _IM_BLOCK {
	char* pAddress;
	unsigned dwSize;
} IM_BLOCK;

typedef struct _IM_KERNEL_BLOCK {
	unsigned nType;
	IM_BLOCK stBlock;
	unsigned nPriority;
} IM_KERNEL_BLOCK;

typedef struct _IM_OPTION {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned short _field7;
	unsigned short _field8;
	unsigned _field9;
	unsigned _field10;
	unsigned _field11;
} IM_OPTION;

typedef struct {
	CGPoint interval;
	CGPoint margin;
	NSRange grid;
	unsigned preloadCellNum;
	unsigned cellMaxNum;
} XXStruct_s29KnC;

typedef struct {
	NSArray* horizontal;
	NSArray* vertical;
} XXStruct_zXRWsD;

typedef struct {
	XXStruct_zXRWsD separator;
	struct {
		NSArray* stroke;
		float radius;
	} border;
} XXStruct_NYlbBC;

typedef struct {
	unsigned normal;
	unsigned active;
	XXStruct_VlMhRC string;
	XXStruct_1smS3C activeShadow;
	XXStruct_1smS3C normalShadow;
} XXStruct_8o$iUD;

typedef struct {
	NSArray* colors;
	NSArray* locations;
} XXStruct_TpRpED;

typedef struct {
	float radius;
	XXStruct_L6BlQB stroke;
	XXStruct_TpRpED fill;
	XXStruct_k2ZiFA shadow;
} XXStruct_qh8bpB;

typedef struct {
	XXStruct_qh8bpB normal;
	XXStruct_qh8bpB active;
} XXStruct_A6v_xB;

typedef struct {
	CGRect landscape;
	CGRect portrait;
} XXStruct_54obfD;

typedef struct {
	XXStruct_54obfD frame;
	unsigned fill;
	XXStruct_L6BlQB stroke;
	XXStruct_A6v_xB background;
	unsigned style;
	unsigned action;
} XXStruct_YwzZwB;

typedef struct _QIMSkinDataCandidate1 {
	XXStruct_s29KnC _field1;
	XXStruct_NYlbBC _field2;
	XXStruct_8o$iUD _field3;
	XXStruct_A6v_xB _field4;
	XXStruct_54obfD _field5;
	XXStruct_YwzZwB _field6;
	struct {
		XXStruct_54obfD frame;
		unsigned fill;
		XXStruct_L6BlQB stroke;
		unsigned style;
		unsigned action;
	} _field7;
	struct {
		NSString* displayString;
		XXStruct_54obfD frame;
		unsigned innerShadow;
		unsigned outerShadow;
		XXStruct_A6v_xB background;
		XXStruct_8o$iUD text;
		unsigned style;
		unsigned action;
	} _field8;
} QIMSkinDataCandidate1;

typedef struct _QIMSkinDataCandidate2 {
	XXStruct_s29KnC _field1;
	XXStruct_NYlbBC _field2;
	XXStruct_8o$iUD _field3;
	XXStruct_A6v_xB _field4;
	XXStruct_54obfD _field5;
	XXStruct_YwzZwB _field6;
	struct {
		NSString* displayString;
		XXStruct_54obfD frame;
		XXStruct_8o$iUD text;
		XXStruct_A6v_xB background;
		unsigned style;
		unsigned action;
	} _field7;
} QIMSkinDataCandidate2;

typedef struct _QIMSkinDataComposition {
	XXStruct_s29KnC _field1;
	XXStruct_8o$iUD _field2;
	XXStruct_qh8bpB _field3;
	XXStruct_54obfD _field4;
} QIMSkinDataComposition;

typedef struct _QIMSkinDataEnglishInlinePrompt {
	XXStruct_A6v_xB _field1;
	XXStruct_8o$iUD _field2;
	XXStruct_NYlbBC _field3;
	XXStruct_54obfD _field4;
	XXStruct_s29KnC _field5;
} QIMSkinDataEnglishInlinePrompt;

typedef struct _QIMSkinDataSymbolTable {
	XXStruct_qh8bpB _field1;
	XXStruct_qh8bpB _field2;
	XXStruct_8o$iUD _field3;
	NSRange _field4;
	XXStruct_54obfD _field5;
} QIMSkinDataSymbolTable;

typedef struct _QIMSkinDataSymbolTableToolBar {
	XXStruct_qh8bpB _field1;
	XXStruct_qh8bpB _field2;
	XXStruct_qh8bpB _field3;
	XXStruct_zXRWsD _field4;
	XXStruct_8o$iUD _field5;
	XXStruct_54obfD _field6;
	NSRange _field7;
	struct {
		XXStruct_L6BlQB normal;
		XXStruct_L6BlQB active;
	} _field8;
} QIMSkinDataSymbolTableToolBar;

typedef struct _QIMSkinDataPageControl {
	XXStruct_qh8bpB _field1;
	XXStruct_qh8bpB _field2;
	XXStruct_54obfD _field3;
} QIMSkinDataPageControl;

typedef struct {
	XXStruct_L6BlQB strokeNormal;
	XXStruct_L6BlQB strokeActive;
	unsigned fillNormal;
	unsigned fillActive;
	XXStruct_1smS3C shadowNormal;
	XXStruct_1smS3C shadowActive;
} XXStruct_ftmyqA;

typedef struct {
	XXStruct_L6BlQB strokeNormal;
	XXStruct_L6BlQB strokeActive;
	XXStruct_1smS3C shadowNormal;
	XXStruct_1smS3C shadowActive;
} XXStruct_KoxO2A;

typedef struct {
	unsigned fillNormal;
	unsigned fillActive;
	XXStruct_1smS3C shadowNormal;
	XXStruct_1smS3C shadowActive;
} XXStruct_Wv2vSA;

typedef struct _QIMSkinDataCustomButton {
	XXStruct_ftmyqA _field1;
	struct {
		BOOL colorReverse;
		XXStruct_L6BlQB strokeNormal;
		XXStruct_L6BlQB strokeActive;
		XXStruct_1smS3C shadowNormal;
		XXStruct_1smS3C shadowActive;
	} _field2;
	XXStruct_KoxO2A _field3;
	struct {
		unsigned locked : 1;
		XXStruct_L6BlQB strokeNormal;
		XXStruct_L6BlQB strokeActive;
		unsigned fillNormal;
		unsigned fillActive;
		XXStruct_1smS3C shadowNormal;
		XXStruct_1smS3C shadowActive;
	} _field4;
	XXStruct_Wv2vSA _field5;
	XXStruct_Wv2vSA _field6;
	XXStruct_ftmyqA _field7;
	struct {
		XXStruct_L6BlQB strokeNormal;
		XXStruct_L6BlQB strokeActive;
		unsigned fillNormal;
		unsigned fillActive;
		XXStruct_TpRpED capitalizedBackNormal;
		XXStruct_TpRpED capitalizedBackActive;
		XXStruct_TpRpED uppercaseBackNormal;
		XXStruct_TpRpED uppercaseBackActive;
		XXStruct_1smS3C shadowNormal;
		XXStruct_1smS3C shadowActive;
	} _field8;
	XXStruct_KoxO2A _field9;
} QIMSkinDataCustomButton;

typedef struct _QIMSkinDataTooltips {
	XXStruct_qh8bpB _field1;
	XXStruct_A6v_xB _field2;
	XXStruct_8o$iUD _field3;
} QIMSkinDataTooltips;

typedef struct _QIMSkinDataIndicator {
	struct {
		XXStruct_qh8bpB background;
		unsigned logoStroke;
		XXStruct_1smS3C logoShadow;
		unsigned logoFill;
		unsigned logoText;
		unsigned textColor;
		XXStruct_1smS3C textShadow;
		float textSize;
	} _field1;
} QIMSkinDataIndicator;

typedef struct _QIMSkinDataHandWritePanel {
	XXStruct_L6BlQB _field1;
} QIMSkinDataHandWritePanel;

typedef struct _QIMSkinDataOperationPrompt {
	struct {
		unsigned textColor;
		float textSize;
		XXStruct_1smS3C textShadow;
	} _field1;
	struct {
		XXStruct_qh8bpB background;
		unsigned textColor;
	} _field2;
} QIMSkinDataOperationPrompt;

typedef struct IQSRender {
	/*function-pointer*/ void** _field1;
} IQSRender;

typedef struct {
	XXStruct_54obfD _field1;
	unsigned _field2;
	XXStruct_L6BlQB _field3;
	XXStruct_c9RIqA _field4;
	unsigned _field5;
	unsigned _field6;
} XXStruct_7AHB9C;

typedef struct _QIMSkinDataCandidate1 {
	XXStruct_s29KnC _field1;
	XXStruct_2H8njB _field2;
	XXStruct_3rHmjD _field3;
	XXStruct_c9RIqA _field4;
	XXStruct_54obfD _field5;
	XXStruct_7AHB9C _field6;
	struct {
		XXStruct_54obfD frame;
		unsigned fill;
		XXStruct_L6BlQB stroke;
		unsigned style;
		unsigned action;
	} _field7;
	struct {
		id _field1;
		XXStruct_54obfD _field2;
		unsigned _field3;
		unsigned _field4;
		XXStruct_c9RIqA _field5;
		XXStruct_3rHmjD _field6;
		unsigned _field7;
		unsigned _field8;
	} _field8;
} QIMSkinDataCandidate1;

typedef struct _QIMSkinDataCandidate2 {
	XXStruct_s29KnC _field1;
	XXStruct_2H8njB _field2;
	XXStruct_3rHmjD _field3;
	XXStruct_c9RIqA _field4;
	XXStruct_54obfD _field5;
	XXStruct_7AHB9C _field6;
	struct {
		id _field1;
		XXStruct_54obfD _field2;
		XXStruct_3rHmjD _field3;
		XXStruct_c9RIqA _field4;
		unsigned _field5;
		unsigned _field6;
	} _field7;
} QIMSkinDataCandidate2;

typedef struct _QIMSkinDataComposition {
	XXStruct_s29KnC _field1;
	XXStruct_3rHmjD _field2;
	XXStruct_xuEUqC _field3;
	XXStruct_54obfD _field4;
} QIMSkinDataComposition;

typedef struct _QIMSkinDataEnglishInlinePrompt {
	XXStruct_c9RIqA _field1;
	XXStruct_3rHmjD _field2;
	XXStruct_2H8njB _field3;
	XXStruct_54obfD _field4;
	XXStruct_s29KnC _field5;
} QIMSkinDataEnglishInlinePrompt;

typedef struct _QIMSkinDataSymbolTable {
	XXStruct_xuEUqC _field1;
	XXStruct_xuEUqC _field2;
	XXStruct_3rHmjD _field3;
	NSRange _field4;
	XXStruct_54obfD _field5;
} QIMSkinDataSymbolTable;

typedef struct _QIMSkinDataSymbolTableToolBar {
	XXStruct_xuEUqC _field1;
	XXStruct_xuEUqC _field2;
	XXStruct_xuEUqC _field3;
	XXStruct_OzJQfB _field4;
	XXStruct_3rHmjD _field5;
	XXStruct_54obfD _field6;
	NSRange _field7;
	struct {
		XXStruct_L6BlQB normal;
		XXStruct_L6BlQB active;
	} _field8;
} QIMSkinDataSymbolTableToolBar;

typedef struct _QIMSkinDataPageControl {
	XXStruct_xuEUqC _field1;
	XXStruct_xuEUqC _field2;
	XXStruct_54obfD _field3;
} QIMSkinDataPageControl;

typedef struct _QIMSkinDataCustomButton {
	XXStruct_ftmyqA _field1;
	struct {
		BOOL colorReverse;
		XXStruct_L6BlQB strokeNormal;
		XXStruct_L6BlQB strokeActive;
		XXStruct_1smS3C shadowNormal;
		XXStruct_1smS3C shadowActive;
	} _field2;
	XXStruct_KoxO2A _field3;
	struct {
		unsigned locked : 1;
		XXStruct_L6BlQB strokeNormal;
		XXStruct_L6BlQB strokeActive;
		unsigned fillNormal;
		unsigned fillActive;
		XXStruct_1smS3C shadowNormal;
		XXStruct_1smS3C shadowActive;
	} _field4;
	XXStruct_Wv2vSA _field5;
	XXStruct_Wv2vSA _field6;
	XXStruct_ftmyqA _field7;
	struct {
		XXStruct_L6BlQB _field1;
		XXStruct_L6BlQB _field2;
		unsigned _field3;
		unsigned _field4;
		XXStruct_OzJQfB _field5;
		XXStruct_OzJQfB _field6;
		XXStruct_OzJQfB _field7;
		XXStruct_OzJQfB _field8;
		XXStruct_1smS3C _field9;
		XXStruct_1smS3C _field10;
	} _field8;
	XXStruct_KoxO2A _field9;
} QIMSkinDataCustomButton;

typedef struct _QIMSkinDataTooltips {
	XXStruct_xuEUqC _field1;
	XXStruct_c9RIqA _field2;
	XXStruct_3rHmjD _field3;
} QIMSkinDataTooltips;

typedef struct _QIMSkinDataIndicator {
	struct {
		XXStruct_xuEUqC _field1;
		unsigned _field2;
		XXStruct_1smS3C _field3;
		unsigned _field4;
		unsigned _field5;
		unsigned _field6;
		XXStruct_1smS3C _field7;
		float _field8;
	} _field1;
} QIMSkinDataIndicator;

typedef struct _QIMSkinDataOperationPrompt {
	struct {
		unsigned textColor;
		float textSize;
		XXStruct_1smS3C textShadow;
	} _field1;
	struct {
		XXStruct_xuEUqC _field1;
		unsigned _field2;
	} _field2;
} QIMSkinDataOperationPrompt;

typedef struct IQSKeyboard* IQSKeyboardRef;

typedef struct CQSKeyboardMgr {
	/*function-pointer*/ void** _field1;
	IQSKeyboardRef* _field2;
	unsigned _field3;
	int _field4;
	char* _field5;
	IQSCanvasRef _field6;
	IQSParamRef _field7;
} CQSKeyboardMgr;

typedef struct IQSImagePool* IQSImagePoolRef;

typedef struct IQSStylePool* IQSStylePoolRef;

typedef struct IQSRenderPool* IQSRenderPoolRef;

typedef struct IQSCustomRenderPool* IQSCustomRenderPoolRef;

typedef struct IQSFontPool* IQSFontPoolRef;

typedef struct IQSShadowPool* IQSShadowPoolRef;

typedef struct CQSPoolMgr {
	/*function-pointer*/ void** _field1;
	IQSStringPoolRef _field2;
	IQSImagePoolRef _field3;
	IQSStylePoolRef _field4;
	IQSRenderPoolRef _field5;
	IQSCustomRenderPoolRef _field6;
	IQSFontPoolRef _field7;
	IQSShadowPoolRef _field8;
	IQSParamRef _field9;
} CQSPoolMgr;

typedef struct IQSPlatform* IQSPlatformRef;

typedef struct IQSSetting* IQSSettingRef;

typedef struct IQSColorize* IQSColorizeRef;

typedef struct IQSCustomDataMgr* IQSCustomDataMgrRef;

typedef struct IQSKeyboardMgr* IQSKeyboardMgrRef;

typedef struct IQSPoolMgr* IQSPoolMgrRef;

typedef struct IQSSkinManager* IQSSkinManagerRef;

typedef struct IQSAssemblyCtrlMgr* IQSAssemblyCtrlMgrRef;

typedef struct IQSKeyConverter* IQSKeyConverterRef;

typedef struct IQSCustomRender* IQSCustomRenderRef;

typedef struct IQSSymbolEngine* IQSSymbolEngineRef;

typedef struct IQSEngineMgr* IQSEngineMgrRef;

typedef struct IQSCallback* IQSCallbackRef;

typedef struct IQSDict* IQSDictRef;

typedef struct CQIMSkinParam {
	/*function-pointer*/ void** _field1;
	IQSNotifyRef _field2;
	IQSPlatformRef _field3;
	IQSSettingRef _field4;
	IQSColorizeRef _field5;
	IQSMouseManagerRef _field6;
	IQSCustomDataMgrRef _field7;
	IQSKeyboardMgrRef _field8;
	IQSPoolMgrRef _field9;
	IQSSkinManagerRef _field10;
	IQSAssemblyCtrlMgrRef _field11;
	IQSKeyConverterRef _field12;
	IQSCustomRenderRef _field13;
	IQSSymbolEngineRef _field14;
	IQSEngineMgrRef _field15;
	IQSCallbackRef _field16;
	IQSDictRef _field17;
} CQIMSkinParam;

typedef struct IQSCustomData* IQSCustomDataRef;

typedef struct CQSCustomDataMgr {
	/*function-pointer*/ void** _field1;
	IQSCustomDataRef* _field2;
	unsigned _field3;
	IQSParamRef _field4;
} CQSCustomDataMgr;

typedef struct MatchedItem {
	long long _field1;
	vector<char, std::allocator<char> > _field2;
} MatchedItem;

typedef struct RespAddFriend {
	long long _field1;
	BOOL _field2;
} RespAddFriend;

typedef struct _Vector_impl {
	MatchedItem* _field1;
	MatchedItem* _field2;
	MatchedItem* _field3;
} Vector_impl;

template<>
struct vector<BumpSvc::MatchedItem, std::allocator<BumpSvc::MatchedItem> > {
	Vector_impl _field1;
};

typedef struct RespMatchFriends {
	vector<BumpSvc::MatchedItem, std::allocator<BumpSvc::MatchedItem> > _field1;
	vector<char, std::allocator<char> > _field2;
} RespMatchFriends;

typedef struct PushAddFriend {
	MatchedItem _field1;
} PushAddFriend;

typedef struct TTimerCallBack {
	/*function-pointer*/ void* _field1;
	void* _field2;
} TTimerCallBack;

typedef struct IHttpEngineObserver {
	/*function-pointer*/ void** _field1;
} IHttpEngineObserver;

typedef struct IMSFTcpEngineEvent {
	/*function-pointer*/ void** _field1;
} IMSFTcpEngineEvent;

typedef struct IMSFTcpDataDelegate {
	/*function-pointer*/ void** _field1;
} IMSFTcpDataDelegate;

typedef struct IMSFNetEnvEvent {
	/*function-pointer*/ void** _field1;
} IMSFNetEnvEvent;

typedef struct OpaqueAudioComponentInstance OpaqueAudioComponentInstance;

typedef struct AudioComponentDescription {
	unsigned componentType;
	unsigned componentSubType;
	unsigned componentManufacturer;
	unsigned componentFlags;
	unsigned componentFlagsMask;
} AudioComponentDescription;

typedef struct OpaqueAudioComponent OpaqueAudioComponent;

typedef struct AURenderCallbackStruct {
	/*function-pointer*/ void* inputProc;
	void* inputProcRefCon;
} AURenderCallbackStruct;

typedef struct {
	OpaqueAudioComponentInstance* audioUnit;
	AudioComponentDescription desc;
	AudioStreamBasicDescription inDf;
	AudioStreamBasicDescription outDf;
	OpaqueAudioComponent* aComponent;
	AURenderCallbackStruct callbackStruct;
	bool mIsRunning;
} XXStruct_9PRtVC;

typedef struct {
	BOOL acHostName[32];
	unsigned short wPort;
	unsigned short wTimeout;
} XXStruct_9JHstD;

typedef struct timeval {
	int tv_sec;
	int tv_usec;
} timeval;

typedef struct Reader {
	/*function-pointer*/ void** _field1;
	unsigned _field2;
} Reader;

typedef struct Result Result;

template<>
struct Ref<zxing::Result> {
	Result* _field1;
};

typedef struct BinaryBitmap BinaryBitmap;

template<>
struct Ref<zxing::BinaryBitmap> {
	BinaryBitmap* _field1;
};

typedef struct ResultPointCallback ResultPointCallback;

template<>
struct Ref<zxing::ResultPointCallback> {
	ResultPointCallback* _field1;
};

typedef struct zbar_symbol_s zbar_symbol_s;

typedef struct zbar_symbol_set_s zbar_symbol_set_s;

typedef struct zbar_image_s zbar_image_s;

typedef struct zbar_image_scanner_s zbar_image_scanner_s;

typedef struct {
	int _field1;
	int _field2;
	char* _field3;
} XXStruct_vtRafC;

typedef struct {
	id _field1;
	unsigned short _field2;
} XXStruct_c19r_A;

typedef struct __SecKey SecKey;

typedef struct _DDRange {
	unsigned long long _field1;
	unsigned long long _field2;
} DDRange;

typedef union BCPoint {
	XXStruct_zYrK5D _field1;
	double _field2[2];
} BCPoint;

typedef struct BCSegment {
	BCPoint _field1;
	BCPoint _field2;
} BCSegment;

typedef union BCTrapezoid {
	struct {
		BCPoint _field1;
		BCPoint _field2;
		BCPoint _field3;
		BCPoint _field4;
	} _field1;
	BCPoint _field2[4];
} BCTrapezoid;

typedef struct __CFArray* CFArrayRef;

@protocol NSObject
-(id)description;
-(unsigned)retainCount;
-(id)autorelease;
-(oneway void)release;
-(id)retain;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)isMemberOfClass:(Class)aClass;
-(BOOL)isKindOfClass:(Class)aClass;
-(BOOL)isProxy;
-(id)performSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(id)performSelector:(SEL)selector withObject:(id)object;
-(id)performSelector:(SEL)selector;
-(NSZone*)zone;
-(id)self;
-(Class)class;
-(Class)superclass;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
@optional
-(id)debugDescription;
@end

@protocol UITableViewDataSource <NSObject>
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
@optional
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
@end

@protocol UIScrollViewDelegate <NSObject>
@optional
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willDeselectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didUnhighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didHighlightRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
@end

@protocol UITextFieldDelegate <NSObject>
@optional
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

@protocol UIPickerViewDataSource <NSObject>
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
@end

@protocol UIPickerViewDelegate <NSObject>
@optional
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(id)pickerView:(id)view attributedTitleForRow:(int)row forComponent:(int)component;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(float)pickerView:(id)view rowHeightForComponent:(int)component;
-(float)pickerView:(id)view widthForComponent:(int)component;
@end

@protocol UIAlertViewDelegate <NSObject>
@optional
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@protocol SelectBankViewDelegate <NSObject>
@optional
-(void)transferSelectBankViewController:(id)controller changeView:(BOOL)view;
-(void)transferSelectBankViewController:(id)controller selectedIndex:(int)index;
@end

@protocol UIWebViewDelegate <NSObject>
@optional
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@protocol TPM_SBJsonParser
-(id)objectWithString:(id)string;
@end

@protocol SBJsonWriter
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
-(id)stringWithObject:(id)object;
@end

@protocol NSCoding
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@protocol IQQModelLabel <NSObject>
+(void)setSearchModelPriority:(int)priority;
-(int)getSearchModelPriority;
-(int)getSearchModelType;
-(int)compareLabel:(id)label;
-(NSRange)getModelLabelMatchRange;
-(id)getRemarkLabel;
-(id)getModelLabel;
@end

@protocol UIActionSheetDelegate <NSObject>
@optional
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

@protocol IEngineDispatchDelegate <NSObject>
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
@optional
-(void)onMsfPacketStateWithNoErr:(id)noErr;
@end

@protocol TCSignalChannelService_Protected <IEngineDispatchDelegate>
@optional
+(id)RegisteredCommands;
-(id)handleRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)uninit;
@end

@protocol IIncrUpdateDelegate <NSObject>
-(void)notifyRespPBBuffer:(const void*)buffer size:(int)size result:(int)result;
-(void)getReqPBBuffer:(char**)buffer buffEnd:(char**)end;
@optional
-(void)respPushPBBuffer:(const void*)buffer size:(int)size;
@end

@protocol QQPublicAccountDataMgrProtocol <NSObject>
-(void)PublicAccountResponseMsgHandle:(id)handle;
@end

@protocol PPCustomMenuDelegate <NSObject>
@optional
-(void)QQPPPopBtnClick:(id)click param:(id)param;
-(void)QQPPBarBtnClick:(id)click param:(id)param;
-(void)QQPPBarBtnChangeBtnClick:(id)click;
@end

@protocol DBAccountChangedProtocol <NSObject>
-(void)onDBChanged;
@end

@protocol DBAsyncCallbackProtocol <NSObject>
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
@end

@protocol UIApplicationDelegate <NSObject>
@optional
@property(retain, nonatomic) UIWindow* window;
-(void)application:(id)application didDecodeRestorableStateWithCoder:(id)coder;
-(void)application:(id)application willEncodeRestorableStateWithCoder:(id)coder;
-(BOOL)application:(id)application shouldRestoreApplicationState:(id)state;
-(BOOL)application:(id)application shouldSaveApplicationState:(id)state;
-(id)application:(id)application viewControllerWithRestorationIdentifierPath:(id)restorationIdentifierPath coder:(id)coder;
-(unsigned)application:(id)application supportedInterfaceOrientationsForWindow:(id)window;
-(void)applicationProtectedDataDidBecomeAvailable:(id)applicationProtectedData;
-(void)applicationProtectedDataWillBecomeUnavailable:(id)applicationProtectedData;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application willChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application didChangeStatusBarOrientation:(int)orientation;
-(void)application:(id)application willChangeStatusBarOrientation:(int)orientation duration:(double)duration;
-(void)applicationSignificantTimeChange:(id)change;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(BOOL)application:(id)application willFinishLaunchingWithOptions:(id)options;
-(void)applicationDidFinishLaunching:(id)application;
@end

@protocol UITabBarControllerDelegate <NSObject>
@optional
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willBeginCustomizingViewControllers:(id)controllers;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
@end

@protocol QQMsgBarDelegate <NSObject>
-(void)didMsgBarTouch:(id)touch context:(id)context;
@end

@protocol SimpleAlertViewDelegate <NSObject>
@optional
-(void)didSimpleAlertView:(id)view buttonClick:(id)click atIndex:(int)index;
-(void)buttonClick:(id)click atIndex:(int)index;
@end

@protocol QSDataTransformerDelegate
-(void)didTransformFinished:(BOOL)finished;
-(void)didTransformStatus:(int)status;
-(void)didTransformProcess:(int)process totalProcess:(int)process2;
@end

@protocol TipWindowDelegate <NSObject>
@optional
-(void)didWindowHidden;
@end

@protocol QQFriendSelectedViewControllerDelegate <NSObject>
@optional
-(void)didFriendListSelected:(id)selected withFilePath:(id)filePath;
-(void)didSendMsgFinished:(BOOL)finished;
@end

@protocol OnQueryStateReturn <NSObject>
-(void)onQueryStateCallBack:(int)back checkType:(int)type checkResult:(int)result;
@end

@protocol UIImagePickerControllerDelegate <NSObject>
@optional
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
@end

@protocol UINavigationControllerDelegate <NSObject>
@optional
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@protocol QQFileInfoCellDelegate <NSObject>
-(void)didSelectedInfo:(id)info;
@end

@protocol UIPopoverControllerDelegate <NSObject>
@optional
-(void)popoverControllerDidDismissPopover:(id)popoverController;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
@end

@protocol MPMediaPickerControllerDelegate <NSObject>
@optional
-(void)mediaPickerDidCancel:(id)mediaPicker;
-(void)mediaPicker:(id)picker didPickMediaItems:(id)items;
@end

@protocol UIDocumentInteractionControllerDelegate <NSObject>
@optional
-(BOOL)documentInteractionController:(id)controller performAction:(SEL)action;
-(BOOL)documentInteractionController:(id)controller canPerformAction:(SEL)action;
-(void)documentInteractionController:(id)controller didEndSendingToApplication:(id)application;
-(void)documentInteractionController:(id)controller willBeginSendingToApplication:(id)application;
-(void)documentInteractionControllerDidDismissOpenInMenu:(id)documentInteractionController;
-(void)documentInteractionControllerWillPresentOpenInMenu:(id)documentInteractionController;
-(void)documentInteractionControllerDidDismissOptionsMenu:(id)documentInteractionController;
-(void)documentInteractionControllerWillPresentOptionsMenu:(id)documentInteractionController;
-(void)documentInteractionControllerDidEndPreview:(id)documentInteractionController;
-(void)documentInteractionControllerWillBeginPreview:(id)documentInteractionController;
-(id)documentInteractionControllerViewForPreview:(id)preview;
-(CGRect)documentInteractionControllerRectForPreview:(id)preview;
-(id)documentInteractionControllerViewControllerForPreview:(id)preview;
@end

@protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(void)textViewDidChangeSelection:(id)textView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
@end

@protocol SMSEditMenuBackGroundDelegate <NSObject>
-(void)didMenuBackGroundClick:(id)click;
@end

@protocol MBProgressHUDDelegate <NSObject>
@optional
-(void)hudWasHidden:(id)hidden;
@end

@protocol ISkinProtocol <NSObject>
-(void)reloadAppearance;
@end

@protocol QIMTextInputDelegate <NSObject>
@optional
-(CGSize)textInputKeyboardSize:(id)size;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@protocol QQSkinTabBarDelegate <NSObject>
-(void)QQSkinTabBar:(id)bar didClickItemAtIndex:(int)index;
@end

@protocol EventLabelDelegate <NSObject>
-(void)didLabelTouches:(id)touches;
@end

@protocol CIMMicroBlogSvrEngineDelegate <NSObject>
@optional
-(void)CIMMicroBlogSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol TTURLRequestDelegate <NSObject>
@optional
-(void)didOccurFlow:(long long)flow;
-(void)request:(id)request didDownload:(id)download totalLength:(id)length;
-(void)requestDidCancelLoad:(id)request;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)requestDidFinishLoad:(id)request;
-(void)requestDidStartLoad:(id)request;
@end

@protocol AdConfigManagerDelegate <NSObject>
-(void)NotifyConfigUpdated:(short)updated;
@end

@protocol ConfigTransceiverDelegate
-(void)HandleData:(id)data;
@end

@protocol CIMAdSvrEngineDelegate <NSObject>
@optional
-(void)CIMAdSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol CIMCardInfoEngineDelegate <NSObject>
@optional
-(void)CIMCardInfoEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol CardInfoFileTransferDelegate <NSObject>
@optional
-(void)CardInfoFileTransfer:(id)transfer curTransSize:(int)size totalTransSize:(int)size3;
-(void)CardInfoFileTransfer:(id)transfer didFinished:(int)finished;
-(void)CardInfoFileTransfer:(id)transfer verfiyCodePassed:(BOOL)passed;
-(void)CardInfoFileTransfer:(id)transfer verifyCodeData:(id)data codeType:(id)type prompt:(id)prompt;
@end

@protocol QSHttpRequestDelegate
@optional
-(void)request:(id)request didReceiveData:(id)data;
-(void)requestRedirected:(id)redirected;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request willRedirectToURL:(id)url;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)requestStarted:(id)started;
@end

@protocol QSHttpProgressDelegate
@optional
-(void)request:(id)request didSendBytes:(int)bytes;
-(void)request:(id)request didReceiveBytes:(int)bytes;
@end

@protocol SSCMTimerDelegate <NSObject>
-(void)SSCMTimerOut;
@end

@protocol CIMOfflinePictureSvrEngineDelegate <NSObject>
-(void)CIMOfflinePictureSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol JKOffLineImageDelegate <NSObject>
@optional
-(void)jkoffLineImage:(id)image finishDownloadImage:(int)image2;
-(void)jkoffLineImage:(id)image finishUploadImage:(int)image2;
@end

@protocol CLLocationManagerDelegate <NSObject>
@optional
-(void)locationManager:(id)manager didFinishDeferredUpdatesWithError:(id)error;
-(void)locationManagerDidResumeLocationUpdates:(id)locationManager;
-(void)locationManagerDidPauseLocationUpdates:(id)locationManager;
-(void)locationManager:(id)manager didStartMonitoringForRegion:(id)region;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)locationManager:(id)manager monitoringDidFailForRegion:(id)monitoring withError:(id)error;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didExitRegion:(id)region;
-(void)locationManager:(id)manager didEnterRegion:(id)region;
-(BOOL)locationManagerShouldDisplayHeadingCalibration:(id)locationManager;
-(void)locationManager:(id)manager didUpdateHeading:(id)heading;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
@end

@protocol CIMFileStorageSvcListDelegate <NSObject>
-(void)CIMFileStorageSvcList:(id)list didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol QQValidCodeControllerDelegate <NSObject>
@optional
-(BOOL)refreshVerifyCodeWithSessionID:(int)sessionID;
-(BOOL)commitVerifyCode:(id)code sessionID:(int)anId;
@end

@protocol CIMProfileSvrEngineDelgate <NSObject>
@optional
-(void)CIMProfileSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol NSXMLParserDelegate <NSObject>
@optional
-(void)parser:(id)parser validationErrorOccurred:(id)occurred;
-(void)parser:(id)parser parseErrorOccurred:(id)occurred;
-(id)parser:(id)parser resolveExternalEntityName:(id)name systemID:(id)anId;
-(void)parser:(id)parser foundCDATA:(id)cdata;
-(void)parser:(id)parser foundComment:(id)comment;
-(void)parser:(id)parser foundProcessingInstructionWithTarget:(id)target data:(id)data;
-(void)parser:(id)parser foundIgnorableWhitespace:(id)whitespace;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndMappingPrefix:(id)prefix;
-(void)parser:(id)parser didStartMappingPrefix:(id)prefix toURI:(id)uri;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parser:(id)parser foundExternalEntityDeclarationWithName:(id)name publicID:(id)anId systemID:(id)anId4;
-(void)parser:(id)parser foundInternalEntityDeclarationWithName:(id)name value:(id)value;
-(void)parser:(id)parser foundElementDeclarationWithName:(id)name model:(id)model;
-(void)parser:(id)parser foundAttributeDeclarationWithName:(id)name forElement:(id)element type:(id)type defaultValue:(id)value;
-(void)parser:(id)parser foundUnparsedEntityDeclarationWithName:(id)name publicID:(id)anId systemID:(id)anId4 notationName:(id)name5;
-(void)parser:(id)parser foundNotationDeclarationWithName:(id)name publicID:(id)anId systemID:(id)anId4;
-(void)parserDidEndDocument:(id)parser;
-(void)parserDidStartDocument:(id)parser;
@end

@protocol IAccountService
-(id)getLoginNickname;
-(id)getA2;
-(id)getSid;
-(long long)getUin;
@end

@protocol IMSFRegisterQQDelegate <NSObject>
@optional
-(void)OnMSFRQCommitPassResult:(id)result;
-(void)OnMSFRQResendSmsResult:(id)result;
-(void)OnMSFRQQuerySmsStatResult:(id)result;
-(void)OnMSFRQCommitSmsCodeResult:(id)result;
-(void)OnMSFRQCommitMobileResult:(id)result;
@end

@protocol IMSFDelegate <NSObject, IMSFRegisterQQDelegate>
-(void)OnMSFMsg:(id)msg;
-(void)OnMSFIllegalGrayApp:(id)app;
-(void)OnMSFForceOffline:(id)offline;
-(void)OnMSFSocketFlow:(id)flow;
-(void)OnMSFPacketState:(id)state;
-(void)OnMSFApnState:(id)state;
-(void)OnMSFNetworkState:(id)state;
-(void)OnMSFSSOErrorStateResult:(id)result;
-(void)OnMSFRecvDataFromBackend:(const char*)backend buf:(char*)buf bufLen:(int)len seq:(int)seq;
-(void)OnMSFRespondVerifyPic;
-(void)OnMSFExchangeUinResult:(id)result;
-(void)OnMSFAuthResult:(id)result;
@end

@protocol IHandleGarbageService <NSObject>
-(id)getLoginData;
-(void)setLoginData:(id)data;
-(void)handleGarbageEnterBackground;
-(void)handleGarbageEnterForeground;
-(void)handleGarbageFinish;
-(void)handleGarbageTotalProcedure:(BOOL)procedure;
-(void)handleGarbageTroopMsgProcedure:(id)procedure;
-(void)addObserver:(id)observer;
-(void)handleGarbageTroopMsgBackGround;
-(BOOL)handleGarbageTroopMsgForNewVersion;
-(BOOL)checkFirstRun;
@end

@protocol CIMEngineDelegate <NSObject>
-(void)CIMEngine:(id)engine didConnectWithCode:(int)code;
@optional
-(void)CIMEngine:(id)engine didGetSDKUpgrade:(id)upgrade;
-(void)CIMEngine:(id)engine didGet2G3GPicServerList:(id)list WifiPicServerList:(id)list3 result:(int)result nextUpdateTime:(int)time;
-(void)CIMEngine:(id)engine didGet2G3GServerList:(id)list WifiServerList:(id)list3 result:(int)result nextUpdateTime:(int)time;
-(void)CIMEngine:(id)engine didGetCarrierServerList:(id)list result:(int)result nextUpdateTime:(int)time;
-(void)CIMEngine:(id)engine didGetServerList:(id)list result:(int)result nextUpdateTime:(int)time;
-(void)CIMEngine:(id)engine didValidPwdResult:(int)result para:(id)para;
@end

@protocol CIMPushSvrEngineDelegate <NSObject>
@optional
-(void)CIMPushSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol CIMMsgSvrEngineDelegate <NSObject>
@optional
-(void)CIMMsgSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg seqId:(int)anId;
@end

@protocol IPacketSendResultHandler <NSObject>
-(void)notifyMsgSentResult:(id)result result:(int)result2;
@optional
-(BOOL)handleRecivedPacket:(char*)packet bufferLength:(int)length sendingModel:(id)model;
@end

@protocol IMessageListService
-(void)reloadSayHelloMessage;
-(void)filterPubAccountMessage;
-(void)markClusterMessageAsHandled:(id)handled;
-(void)refreshUnreadCount:(id)count type:(int)type withValue:(int)value;
-(void)clearUnreadCount:(id)count type:(int)type;
-(void)clearUnReadCount:(id)count;
-(int)getUnreadMessageCount:(int)count;
-(int)getUnreadMessageCount:(id)count type:(int)type;
-(int)getUnreadMessageCount;
-(int)getUnreadMessageUinCount;
-(BOOL)haveUnReadMsg:(id)msg type:(int)type;
-(BOOL)haveUnReadMsg;
-(BOOL)haveMsg:(id)msg type:(int)type;
-(void)updateAllMessageTime;
-(BOOL)saveMessageList;
-(void)clearMessageList;
-(void)clearAllMessageInfinitly;
-(void)deleteMessage:(id)message type:(int)type;
-(void)deleteMessage:(id)message;
-(void)addMessage:(id)message;
-(id)getMessageKey:(id)key;
-(id)GetMessageModel:(id)model type:(int)type;
-(id)GetMessageModel:(id)model;
-(id)getMessageList;
-(void)changeAccount:(id)account;
@end

@protocol IQSContactsEngineObserver <NSObject>
@optional
-(void)notifyUpdateUnreadRecommendedContacts;
-(void)notifyUpdateRecommendedContacts:(id)contacts;
-(void)notifySetToBeRecommended:(id)beRecommended;
-(void)notifyCancelBinding:(id)binding;
-(void)notifyUpdateContactsStat:(id)stat;
-(void)notifyRequestResendSMSCode:(id)code;
-(void)notifyVerifyBindingSMSCode:(id)code;
-(void)notifyFetchContacts;
-(void)notifySyncContacts:(id)contacts;
-(void)notifyUploadContacts:(id)contacts;
-(void)notifyBindPhoneCode:(id)code;
-(void)notifyIMEIChanged;
-(void)notifyUpdateBindingInfo:(id)info;
@end

@protocol IQFriRecommendEngineObserver <NSObject>
@optional
-(void)NotifyOperationSuccess:(id)success;
-(void)NotifyOperationFailed:(id)failed;
@end

@protocol CIMFriendsSvrEngineDelegate <NSObject>
@optional
-(void)CIMFriendsSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol CIMQZoneSvrEngineDelegate <NSObject>
@optional
-(void)CIMQZoneSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol QQTableFootViewDelegate <NSObject>
@optional
-(void)didTableFootViewBeTouchEnd:(id)end;
@end

@protocol IFaceObserver <NSObject>
@optional
-(void)notifyDownloadHeadImageProgress:(id)progress;
-(void)notifyLoadHeadImageFinished:(id)finished;
-(void)notifyGetHeadImageSuccWithDict:(id)dict;
-(void)notifyGetHeadImageSucc:(id)succ;
@end

@protocol QQRecommendBasicCellDelegate <NSObject>
@optional
-(void)didCellTouchIconAdd:(id)add;
-(void)didCellTouch:(id)touch;
@end

@protocol X8WebFileMgrDelegate <NSObject>
-(void)OnFileDownFinish:(id)finish;
@end

@protocol QQWebviewExecuteJSDelegate <NSObject>
-(void)ExecuteJS:(id)js withParam:(id)param;
@end

@protocol QQWebBottomBarDelegate <NSObject>
@optional
-(void)didWebBottomBar:(id)bar share:(id)share;
-(void)didWebBottomBar:(id)bar reload:(id)reload;
-(void)didWebBottomBar:(id)bar goForward:(id)forward;
-(void)didWebBottomBar:(id)bar goBack:(id)back;
-(void)didWebBottomBar:(id)bar goHome:(id)home;
@end

@protocol QQSetupModelViewDelegate <NSObject>
@optional
-(void)QQSetupModelViewClickEdit:(id)edit;
-(void)QQSetupModelViewClickBack:(id)back;
@end

@protocol SimpleAlertViewExDelegate <NSObject>
@optional
-(void)buttonExClick:(id)click;
@end

@protocol QQTimePickerDelegate <NSObject>
-(void)setPushTimeBegin:(int)begin endTime:(int)time;
@end

@protocol QQActionLabelDelegate <NSObject>
@optional
-(void)touchActionWithType:(int)type actionUrl:(id)url title:(id)title;
@end

@protocol QQSpeakerViewDelegate <NSObject>
-(void)didSelectURL:(id)url;
@end

@protocol SystemRequestCellDelegate <NSObject>
@optional
-(void)didRelationRequest:(id)request TouchManagerAccountInfo:(id)info;
-(void)didRelationRequest:(id)request TouchGroupInfo:(id)info;
-(void)didSystemRequestCell:(id)cell selectedRequestWithModel:(id)model;
-(void)didSystemRequestCell:(id)cell selectedHeadWithModel:(id)model;
@end

@protocol ZebraViewControllerDelegate <NSObject>
@optional
-(void)zebraViewController:(id)controller didFinishWithImage:(id)image exifInfomation:(id)infomation assetURL:(id)url error:(id)error;
-(void)zebraViewControllerDidCancel:(id)zebraViewController;
@end

@protocol QQNetWorkTipsViewDelegate <NSObject>
@optional
-(void)showNetWorkUpLoadTips;
-(void)dismissVocieTips;
-(void)cancelUpLoad;
-(void)QQNetWorkTipsViewHiddenAnimationEnd:(id)end;
-(void)QQNetWorkTipsViewShowAnimationEnd:(id)end;
-(void)QQNetWorkTipsView:(id)view didTouchedWithParam:(id)param;
-(void)QQNetWorkTipsView:(id)view didSelectedCheckButton:(id)button;
@end

@protocol PushBannerViewDelegate <NSObject>
@optional
-(void)didCheckPushBannerViewButton:(id)button;
-(void)didCheckPushBannerView:(id)view bannerIndex:(int)index;
@end

@protocol QQPopMenuDelegate <NSObject>
@optional
-(void)didMenuClick:(int)click;
@end

@protocol GetTroopRemarkProtocol <NSObject>
@optional
-(void)GetMemberRemarkNotify:(id)notify list:(id)list;
-(void)ReGetTroopRemarkNotify:(id)notify;
@end

@protocol QQUIDelegate <NSObject>
@optional
-(void)onQQUIControlTouchCancelled;
-(void)onQQUIControlTouchMove;
-(void)onQQUIControlTouchUp;
-(void)onQQUIControlTouchDown;
@end

@protocol QQAearXMLParserDelegate <NSObject>
-(void)didAearXMLParserEnd:(id)end;
@end

@protocol GetTroopMemberProtocol <NSObject>
-(void)ActionFinishRefreshTroopMemberStatus:(id)status;
-(void)ActionGetTroopMember:(id)member result:(BOOL)result;
@end

@protocol GroupCellControlTouchDelegate <NSObject>
@optional
-(void)higlightedBg:(BOOL)bg;
@end

@protocol MFMailComposeViewControllerDelegate <NSObject>
@optional
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

@protocol QQChatViewTableDelegate <NSObject>
@optional
-(void)showKeyboardForVoice:(id)voice;
-(void)showKeyboard:(id)keyboard;
-(void)deleteMessageModel:(id)model;
-(void)goToManageView:(id)manageView;
-(void)didSelectActionCell:(id)cell;
-(void)reSendStreamPTT:(id)ptt;
-(void)upAmrFile:(id)file;
-(void)reReceivePPT:(id)ppt index:(id)index;
-(void)downLoadC2COfflineImg:(id)img;
-(void)downLoadGroupImg:(id)img isRefresh:(BOOL)refresh;
-(void)tableViewReSendImage:(id)image;
-(void)forwardTo:(id)to;
-(void)saveImgToAlbum:(id)album;
-(void)addSelfImage:(id)image;
-(void)doodleImg:(id)img;
-(void)tableCallPopViewController:(id)controller;
-(void)startdownSecretFileTouch:(id)touch;
-(void)showSecretFileTipsView;
-(void)showSecretFileGuideView:(id)view;
-(void)didSelectSystemNotificationCell:(id)cell;
-(void)tableViewDidTouchMoreCell;
-(void)tableViewDidTouchRecordAtIndexPath:(id)tableView;
-(void)reuploadSecretFileTouch:(id)touch;
-(void)redownloadSecretFileTouch:(id)touch;
-(void)sendVideoTouch:(id)touch;
-(void)headIconTouch:(id)touch;
-(void)didSelectReloadImage:(id)image;
-(void)tableViewDidScroll;
-(void)tableViewImageModelDidTouch:(id)tableViewImageModel;
-(void)didSelectIDNumber:(id)number;
-(void)didSelectLongNumber:(id)number;
-(void)didSelectQQNumber:(id)number;
-(void)didSelectEmail:(id)email;
-(void)didSelectURL:(id)url cellModel:(id)model;
-(void)UITableViewDidTouch;
@end

@protocol QQGrowingTextViewDelegate
@optional
-(BOOL)textView:(id)view shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)sendCustomFace:(id)face data:(id)data;
-(BOOL)QQTextField:(id)field didSendText:(id)text showText:(id)text3;
-(void)faceManageAction;
-(BOOL)growingTextViewShouldReturn:(id)growingTextView;
-(void)growingTextViewDidChangeSelection:(id)growingTextView;
-(void)growingTextView:(id)view didChangeHeight:(float)height;
-(void)growingTextView:(id)view willChangeHeight:(float)height;
-(void)growingTextView:(id)view willChangeHeightWithOffset:(float)offset;
-(BOOL)growingTextViewInputReturnKey:(id)key;
-(void)growingTextViewDidChange:(id)growingTextView;
-(BOOL)growingTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)growingTextViewDidEndEditing:(id)growingTextView;
-(void)growingTextViewDidBeginEditing:(id)growingTextView;
-(BOOL)growingTextViewShouldEndEditing:(id)growingTextView;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
@end

@protocol QQTextFieldDelegate <NSObject, QQGrowingTextViewDelegate>
@optional
-(void)faceManageAction;
-(void)sendCustomFace:(id)face data:(id)data;
-(BOOL)QQTextField:(id)field didSendText:(id)text showText:(id)text3;
@end

@protocol QQDoodleSendDelegate <NSObject>
-(void)sendDoodleImage:(id)image;
@end

@protocol SelectLocationDelegate <NSObject>
-(void)NotifySelectLocation:(XXStruct_zYrK5D)location address:(id)address;
@end

@protocol QQRichKeyBoradDelegate <NSObject>
@optional
-(void)didAnimationToBottomEnd:(id)bottomEnd;
-(void)didAnimationToTopEnd:(id)topEnd;
-(void)didTouchRichKeyBorad:(id)borad selected:(id)selected forEvent:(id)event;
@end

@protocol QMsgSpliteMergeProtocol <NSObject>
-(void)handleNoRoamMessage:(id)message userInfo:(id)info;
-(void)handleGroupMessage:(id)message userInfo:(id)info :(id)arg3 :(long long)arg4;
@end

@protocol MButtonDelegate <NSObject>
-(void)didMButtonTouchEvent:(int)event;
@end

@protocol SecretFileGuideDelegate <NSObject>
-(void)onGuideButtonClicked:(id)clicked;
@end

@protocol QC2CRoamMessageDelegate <NSObject>
-(void)handleC2CRoamMessage:(id)message msgList:(id)list;
@end

@protocol QQFaceKeyBoardDelegate <NSObject>
-(void)cellDidTapped:(id)cell onKeyBoard:(id)board;
@end

@protocol SecretFileTipsDelegate <NSObject>
-(void)onTipsButtonClicked:(id)clicked;
@end

@protocol QQEmotionLabelDelegate <NSObject>
-(void)emotionLabelHandleLongPress:(id)press;
-(void)emotionLabelHandleIDNumber:(id)number;
-(void)emotionLabelHandlePhoneNumber:(id)number;
-(void)emotionLabelHandleQQNumber:(id)number;
-(void)emotionLabelHandleEmail:(id)email;
-(void)emotionLabelHandleUrl:(id)url;
@optional
-(void)emotionLabelTouchClick:(id)click;
@end

@protocol QQImageMaskViewDelegate <NSObject>
-(void)maskViewDidRevealed:(id)maskView;
@end

@protocol QQDoodleContentChangedDelegate
-(void)colorSelChanged:(int)changed colorIndex:(int)index;
-(void)contentChanged:(int)changed;
@end

@protocol UIColorSelectBarDelegate <NSObject>
-(void)colorBarChanged:(id)changed atIndex:(int)index color:(CGColorRef)color;
@end

@protocol UQPaintBoardDelegate <NSObject>
@optional
-(void)didUQPaintBoardStartPaint:(id)paint;
@end

@protocol PenDrawToolViewMenuViewDelegate <NSObject>
@optional
-(void)penDrawToolViewMenuView:(id)view didChangeValue:(float)value withSegmentedControlIndex:(int)segmentedControlIndex;
-(void)penDrawToolViewMenuView:(id)view didSelectAtIndex:(int)index;
@end

@protocol SendPhotoTaskManagerDelegate <NSObject>
@optional
-(void)didPhotoTaskManger:(id)manger endUploading:(id)uploading;
-(void)didPhotoTaskManger:(id)manger startUploading:(id)uploading;
-(void)photoTaskManger:(id)manger sendError:(id)error;
-(void)photoTaskManger:(id)manger sendEnd:(id)end;
-(void)photoTaskManger:(id)manger sendProgress:(id)progress;
-(void)photoTaskManger:(id)manger startUplaod:(id)uplaod;
@end

@protocol UIAccelerometerDelegate <NSObject>
@optional
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
@end

@protocol CIMStreamMsgEngineDelegate <NSObject>
@optional
-(void)StreamMsgEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol PushBannerViewAnimationDelegate <NSObject>
@optional
-(void)didPushBannerView:(id)view animationFinished:(BOOL)finished;
@end

@protocol QQMessageViewCellDelegate <NSObject>
-(void)onPendingMarked:(id)marked number:(id)number;
@end

@protocol IEditViewControllerObserver <NSObject>
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
@optional
-(BOOL)textFieldShouldReturn:(id)textField value:(id)value;
-(BOOL)onEditViewCancel:(id)cancel value:(id)value;
@end

@protocol RefreshRecommendViewController <NSObject>
-(void)RefreshViewController;
@end

@protocol QIMDictManagerDelegate <NSObject>
@optional
-(void)dictManagerDictDidCancelled;
-(void)dictManagerDictDidEndExport:(XXStruct_VrsxJB)dictManagerDict;
-(BOOL)dictManagerDictDidExporting:(float)dictManagerDict currentItem:(id)item;
-(void)dictManagerDictWillBeginExport:(int)dictManagerDict;
-(void)dictManagerDictDidEndImport:(XXStruct_VrsxJB)dictManagerDict;
-(BOOL)dictManagerDictDidImporting:(float)dictManagerDict currentItem:(id)item;
-(void)dictManagerDictWillBeginImport:(int)dictManagerDict;
-(void)dictManagerDictDidError:(int)dictManagerDict;
@end

@protocol CIMLbsSvrEngineDelegate <NSObject>
-(void)CIMLBSSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol ILBSService
-(void)startUpdateLocation;
@end

@protocol NearbyFriendTableViewDelegate <NSObject>
-(BOOL)getMoreData:(id)data;
-(BOOL)refreshTableList:(id)list;
@optional
-(void)deleteData:(id)data index:(id)index;
-(void)scrollViewDidScroll:(id)scrollView;
@end

@protocol SMSEditMenuDelegate <NSObject>
@optional
-(void)didMenuClick:(id)click buttonIndex:(int)index;
@end

@protocol CFFootViewDelegate <NSObject>
@optional
-(void)startRefreshFoot:(id)foot;
-(void)startRefresh:(id)refresh;
@end

@protocol QQCardLabelSetsViewDelegate <NSObject>
-(BOOL)didSelectLabel:(id)label;
@optional
-(void)didSelectEditLabel;
@end

@protocol QQCardLabelShowViewDelegate <NSObject>
-(void)didRemoveLabel:(id)label;
@end

@protocol EGORefreshTableHeaderDelegate
@optional
-(int)egoRefreshTableHeaderDataSourceLastUpdated:(id)updated;
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
@end

@protocol UIGestureRecognizerDelegate <NSObject>
@optional
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
@end

@protocol MKAnnotation <NSObject>
@optional
@property(readonly, assign, nonatomic) NSString* subtitle;
@property(readonly, assign, nonatomic) NSString* title;
@required
@property(readonly, assign, nonatomic) XXStruct_zYrK5D coordinate;
@optional
-(void)setCoordinate:(XXStruct_zYrK5D)coordinate;
@end

@protocol MKMapViewDelegate <NSObject>
@optional
-(void)mapView:(id)view didChangeUserTrackingMode:(int)mode animated:(BOOL)animated;
-(void)mapView:(id)view didAddOverlayViews:(id)views;
-(id)mapView:(id)view viewForOverlay:(id)overlay;
-(void)mapView:(id)view annotationView:(id)view2 didChangeDragState:(unsigned)state fromOldState:(unsigned)oldState;
-(void)mapView:(id)view didFailToLocateUserWithError:(id)error;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)mapViewDidStopLocatingUser:(id)mapView;
-(void)mapViewWillStartLocatingUser:(id)mapView;
-(void)mapView:(id)view didDeselectAnnotationView:(id)view2;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(void)mapView:(id)view annotationView:(id)view2 calloutAccessoryControlTapped:(id)tapped;
-(void)mapView:(id)view didAddAnnotationViews:(id)views;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapViewDidFailLoadingMap:(id)mapView withError:(id)error;
-(void)mapViewDidFinishLoadingMap:(id)mapView;
-(void)mapViewWillStartLoadingMap:(id)mapView;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
@end

@protocol MKReverseGeocoderDelegate <NSObject>
-(void)reverseGeocoder:(id)geocoder didFailWithError:(id)error;
-(void)reverseGeocoder:(id)geocoder didFindPlacemark:(id)placemark;
@end

@protocol QGMapViewDelegate <NSObject>
@optional
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
-(void)didTouchCoordinate:(XXStruct_zYrK5D)coordinate;
@end

@protocol QSDataTransformerTaskDelegate
-(void)didTransformTaskStatus:(int)status;
-(void)didTransformTaskProcess:(int)process totalProcess:(int)process2;
@end

@protocol QQPassWordViewDelegate <NSObject>
@optional
-(void)QQPassWordDidEnd:(id)qqpassWord;
@end

@protocol FriendListViewDelegate <NSObject>
@optional
-(void)friendListViewTotalCountChanged:(int)changed;
-(void)friendListSelected:(id)selected head:(int)head type:(int)type;
-(void)friendListViewDidEndDragging:(id)friendListView willDecelerate:(BOOL)decelerate;
-(void)friendListViewDidScroll:(id)friendListView;
@end

@protocol UITabBarDelegate <NSObject>
@optional
-(void)tabBar:(id)bar didEndCustomizingItems:(id)items changed:(BOOL)changed;
-(void)tabBar:(id)bar willEndCustomizingItems:(id)items changed:(BOOL)changed;
-(void)tabBar:(id)bar didBeginCustomizingItems:(id)items;
-(void)tabBar:(id)bar willBeginCustomizingItems:(id)items;
-(void)tabBar:(id)bar didSelectItem:(id)item;
@end

@protocol QQHeadAlertViewDelegate <NSObject>
@optional
-(void)buttonClick:(id)click atIndex:(int)index;
@end

@protocol GroupListViewDelegate <NSObject>
@optional
-(void)groupListViewDidEndDragging:(id)groupListView willDecelerate:(BOOL)decelerate;
-(void)groupListViewDidScroll:(id)groupListView;
-(void)groupListSelected:(id)selected;
@end

@protocol RichMsgPreviewDialogDelegate <NSObject>
-(void)sendButtonClick:(id)click msg:(id)msg;
@optional
-(void)cancelButtonClick;
@end

@protocol TabMenuDelegate <NSObject>
@optional
-(void)didSelectIndex:(int)index;
@end

@protocol DiscussGroupListViewDelegate <NSObject>
@optional
-(void)discussGroupListViewDidEndDragging:(id)discussGroupListView willDecelerate:(BOOL)decelerate;
-(void)discussGroupListViewDidScroll:(id)discussGroupListView;
-(void)discussGroupListSelected:(id)selected;
@end

@protocol IDiscussGroupListView <NSObject>
-(void)coverSearchState;
-(void)refreshDiscussListFail;
-(void)refreshDiscussList;
-(void)refreshDiscussInfo:(long long)info;
@end

@protocol TencentRequestDelegate <NSObject>
@optional
-(void)request:(id)request didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)request:(id)request didLoadRawResponse:(id)response;
-(void)request:(id)request didLoad:(id)load dat:(id)dat;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didReceiveResponse:(id)response;
-(void)requestLoading:(id)loading;
@end

@protocol QQShareResultDialogDelegate <NSObject>
-(void)buttonClickSuccess:(id)success;
-(void)buttonClickTwo:(id)two;
-(void)buttonClickOne:(id)one;
@end

@protocol QQFileCellDelegate <NSObject>
-(void)didCell:(id)cell browseFileForModel:(id)model;
-(void)didCell:(id)cell touchHeadForModel:(id)model;
-(void)didCell:(id)cell forModel:(id)model;
@end

@protocol CTileScrollViewDelegate <NSObject>
@optional
-(void)scrollView:(id)view didDeleteCellAtIndex:(int)index;
-(void)scrollView:(id)view didTouchCellAtIndex:(int)index;
@end

@protocol CTileScrollViewDataSource <NSObject>
-(id)scrollView:(id)view tileCellAtIndex:(int)index;
-(int)numberOfcells;
@end

@protocol CIMNeighborFeedEngineDelegate <NSObject>
-(void)CIMNeighborFeedEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol UniFileTransEngineObserver
-(void)commonFileUploadFinished:(id)finished sessionID:(int)anId resultCode:(int)code transInfo:(id)info;
-(void)foodPicUploadFinished:(id)finished resultCode:(int)code;
-(void)resourceFileDownloadFinished:(id)finished resultCode:(int)code;
@end

@protocol IMSFConnectService
-(BOOL)isConnected;
-(BOOL)isConnecting;
-(void)disconnect;
-(void)switchIPConnect;
-(void)connect;
@end

@protocol IPacketDispatchService
-(void)setRegisterQQDelegate:(id)delegate;
-(void)setDefaultDispatchDelegete:(id)delegete;
-(BOOL)sendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(BOOL)sendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut;
-(BOOL)sendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately;
-(int)getSeq;
-(void)unregisterDispatchDelegate:(id)delegate;
-(BOOL)registerDispatchDelegate:(id)delegate dispatchDelegate:(id)delegate2;
@optional
-(BOOL)rqCommitPass:(id)pass;
-(BOOL)rqCommitSmsCode:(id)code;
-(BOOL)rqReSendSms;
-(BOOL)rqQueryUpSmsStat;
-(BOOL)rqCommitMobile:(id)mobile;
-(void)setHA3:(char*)a3 length:(int)length;
-(void)setD2:(char*)a2 length:(int)length;
-(void)setA2:(char*)a2 length:(int)length;
-(void)setSid:(char*)sid length:(int)length;
-(void)setKey:(int)key;
-(void)setUin:(long long)uin;
@end

@protocol IServiceFactory <NSObject>
-(id)getCoreMotionService;
-(id)getAlbumService;
-(void)destroyAlbumService;
-(id)createAlbumService;
-(id)getMessageListService;
-(void)destroyMessageListService;
-(id)createMessageListService;
-(id)getFriRecommendService;
-(void)destroyFriRecommendService;
-(id)createFriRecommendService;
-(id)getCircleService;
-(void)destroyCircleService;
-(id)createCircleService;
-(id)getUrlImageService;
-(void)destroyUrlImageService;
-(id)createUrlImageService;
-(id)getMsgSpliteMergeService;
-(id)getContactsService;
-(void)destroyContactsService;
-(id)createContactsService;
-(id)getNetworkFlowStatService;
-(void)destroyNetworkFlowStatService;
-(id)createNetworkFlowStatService;
-(id)getTransportationService;
-(id)createHandleGarbageService;
-(id)getIMService;
-(void)destroyIMService;
-(id)createIMService;
-(id)getVideoChatService;
-(void)destroyVideoChatService;
-(id)createVideoChatService;
-(id)getUIForwardService;
-(void)destroyUIForwardService;
-(id)createUIForwardService;
-(id)getSynInfoService;
-(void)destroySynInfoService;
-(id)createSynInfoService;
-(id)getUserSummaryService;
-(void)destroyUserSummaryService;
-(id)createUserSummaryService;
-(id)getLBSService;
-(void)destroyLBSService;
-(id)createLBSService;
-(id)getFaceService;
-(void)destroyFaceService;
-(id)createFaceService;
-(id)getFriendListService;
-(void)destroyFriendListService;
-(id)createFriendListService;
-(id)getAccountService;
-(void)destroyAccountService;
-(id)createAccountService;
-(id)getMSFConnectService;
-(void)destroyMSFConnectService;
-(id)createMSFConnectService;
-(id)getPacketDispatchService;
-(void)destroyPacketDispatchService;
-(id)createPacketDispatchService;
@end

@protocol TTTAttributedLabel <NSObject>
@property(copy, nonatomic) id text;
@end

@protocol IQSEngineBase
@end

@protocol IDiscussGroupChatEngineDelegate <NSObject>
-(long long)getCurChatViewDicussUin;
@optional
-(void)handleRequestTimeout:(const char*)timeout;
-(void)handleSendDiscussGroupMsg:(unsigned long long)msg msg:(id)msg2;
-(void)handlePushDiscussGroupMsg:(unsigned long long)msg msgArray:(id)array;
-(void)handleGetDiscussGroupMsg:(unsigned long long)msg msgArray:(id)array;
-(void)handleGetOfflineDiscussGroupMsg:(unsigned long long)msg msgArray:(id)array lastLocalMaxSeq:(unsigned)seq;
-(void)handleAsyncGetDiscussGroupMsg:(unsigned long long)msg beforeSeq:(unsigned long long)seq msgArray:(id)array;
-(void)handleAsyncGetRecentDiscussGroupMsg:(unsigned long long)msg msgArray:(id)array;
@end

@protocol IQQPlatform <NSObject>
-(id)QQPluginCenter;
-(id)QQServiceCenter;
@end

@protocol IQQPluginCenter <NSObject>
-(id)getPluginInfoByShareID:(unsigned)anId;
-(BOOL)isApp:(id)app;
-(BOOL)isBrowser:(id)browser;
-(BOOL)isPluginInFavorList:(id)favorList;
-(void)removePluginFromFavorlist:(id)favorlist;
-(void)addPluginToFavorlist:(id)favorlist;
-(id)GetPluginsNotInFavorList;
-(id)GetFavorPlugins;
-(id)shareIDToPluginID:(unsigned)pluginID;
-(unsigned)pluginIDToShareID:(id)shareID;
-(id)getPluginInfo:(id)info;
-(void)RemovePluginManagementListener:(id)listener;
-(void)AddPluginManagementListener:(id)listener;
-(BOOL)unregistPlugin:(id)plugin;
-(BOOL)registWebviewPlugin:(id)plugin ID:(id)anId info:(id)info callbackName:(id)name;
-(BOOL)registPlugin:(id)plugin ID:(id)anId type:(int)type info:(id)info manageable:(BOOL)manageable;
-(BOOL)registPlugin:(id)plugin ID:(id)anId type:(int)type info:(id)info;
-(BOOL)disablePlugin:(id)plugin;
-(BOOL)enablePlugin:(id)plugin;
-(void)ShowPluginAppWithScheme:(id)scheme param:(id)param;
-(void)ShowPlugin:(id)plugin param:(id)param;
-(void)broadCast:(id)cast;
-(BOOL)AsyncSendMessage:(id)message toPlugin:(id)plugin from:(id)from;
-(BOOL)AsyncSendMessage:(id)message to:(id)to;
-(BOOL)SyncSendMessage:(id)message to:(id)to result:(id*)result;
-(BOOL)handleOpenURL:(id)url sourceApplication:(id)application;
-(BOOL)handleOpenURL:(id)url;
@end

@protocol IQQServiceCenter <NSObject>
-(id)recentMsgDB;
-(id)C2CMultiTableDB;
-(id)C2CDBService;
-(id)AppVersionService;
-(id)spliteMergeService;
-(id)GroupDBServie;
-(id)HttpService;
-(id)PluginStatService;
-(id)IMService;
-(id)LBSService;
-(id)TestService;
@end

@protocol IQQPluginInterface <NSObject>
@optional
-(void)OnShow:(id)show;
-(void)OnBroadcast:(id)broadcast;
-(void)OnNotify:(id)notify;
-(void)OnRequest:(id)request result:(id*)result;
-(void)OnAsyncResponse:(id)response;
-(void)OnAsyncRequest:(id)request;
@end

@protocol IQQTestService <NSObject>
-(BOOL)CancelGetPicByOpIndex:(int)index;
-(int)AsynGetPic:(id)pic DstPath:(id)path Listener:(id)listener;
@end

@protocol IQSFileStorageEngine <NSObject>
-(BOOL)saveFriendRequestSetting:(id)setting;
-(id)loadFriendRequestSetting;
-(void)ansySavePushMsgArray:(id)array;
-(BOOL)savePushMsgArray:(id)array;
-(id)loadPushMsgArray;
-(void)asycSaveRecentHistoryHandledCountDic:(id)dic;
-(id)loadRecentHistoryHandledCount;
-(void)ansySaveRecentHistoryUnreadCount:(id)count;
-(BOOL)saveRecentHistoryUnreadCount:(id)count;
-(id)loadRecentHistoryUnreadCount;
-(BOOL)saveGroupMaxSeqDict:(id)dict;
-(id)loadGroupMaxSeqDict;
-(void)cancelCallBackObj:(id)obj;
-(BOOL)ansyLoadPreRenderImageWithPath:(id)path callBackObj:(id)obj callBackParam:(id)param;
-(BOOL)ansyLoadImageWithPath:(id)path callBackObj:(id)obj callBackParam:(id)param;
-(id)loadImageWithPath:(id)path;
-(void)ansySaveCheckedRemarkFriendList:(id)list;
-(BOOL)saveCheckedRemarkFriendList:(id)list;
-(id)loadCheckedRemarkFriendList;
-(void)ansySaveMobilePhoneConfigList:(id)list;
-(BOOL)saveMobilePhoneConfigList:(id)list;
-(id)loadMobilePhoneConfigList;
-(void)ansySaveMobilePhoneWithountCountryList:(id)list;
-(BOOL)saveMobilePhoneWithountCountryList:(id)list;
-(id)loadMobilePhoneWithountCountryList;
-(void)ansySaveContactsChatUINList:(id)list;
-(BOOL)saveContactsChatUINList:(id)list;
-(id)loadContactsChatUINList;
-(void)ansySaveTemporaryUINList:(id)list;
-(BOOL)saveTemporaryUINList:(id)list;
-(id)loadTemporaryUINList;
-(void)ansySaveInvitedList:(id)list;
-(BOOL)saveInvitedList:(id)list;
-(id)loadInvitedList;
-(void)ansySecretFileInfo:(id)info;
-(BOOL)saveSecretFileInfo:(id)info;
-(id)loadSecretFileInfo;
-(void)ansySaveVipInfo:(id)info;
-(BOOL)saveVipInfo:(id)info uin:(long long)uin;
-(id)loadVipInfo:(long long)info;
-(void)ansyRecommendFriendsInfo:(id)info;
-(BOOL)saveRecommendFriendsInfo:(id)info;
-(id)loadRecommendFriendsInfo;
-(void)ansySaveRecommendedFriends:(id)friends;
-(BOOL)saveRecommendedFriends:(id)friends;
-(id)loadRecommendedFriends;
-(void)ansySaveRecommendedContacts:(id)contacts;
-(BOOL)saveRecommendedContacts:(id)contacts;
-(id)loadRecommendedContacts;
-(void)ansySaveQQContacts:(id)contacts;
-(BOOL)saveQQContacts:(id)contacts;
-(id)loadQQContacts;
-(void)ansySaveUploadedContacts:(id)contacts;
-(BOOL)saveUploadedContacts:(id)contacts;
-(id)loadUploadedContacts;
-(void)ansySaveContactBindingInfo:(id)info;
-(BOOL)saveContactsBindingInfo:(id)info;
-(id)loadContactsBindingInfo;
-(void)ansySaveContactsApplyBindingInfo:(id)info;
-(BOOL)saveContactsApplyBindingInfo:(id)info;
-(id)loadContactsApplyBindingInfo;
-(void)ansySaveUniLogDictionary:(id)dictionary;
-(BOOL)saveUniLogDictionary:(id)dictionary;
-(id)loadUniLogDictionary;
-(void)ansySaveAccountNetworkFlowDictionary:(id)dictionary;
-(BOOL)saveAccountNetworkFlowDictionary:(id)dictionary;
-(id)loadAccountNetworkFlowDictionary;
-(void)ansySaveNetworkFlowDictionary:(id)dictionary;
-(BOOL)saveNetworkFlowDictionary:(id)dictionary;
-(id)loadNetworkFlowDictionary;
-(void)ansySaveVoterArray:(id)array withUIN:(long long)uin;
-(BOOL)saveVoterArray:(id)array withUIN:(long long)uin;
-(id)loadVoterArrayWithUIN:(long long)uin;
-(void)ansySaveVisitorArray:(id)array withUIN:(long long)uin;
-(BOOL)saveVisitorArray:(id)array withUIN:(long long)uin;
-(id)loadVisitorArrayWithUIN:(long long)uin;
-(void)ansySaveFaceIDDictionary:(id)dictionary withUIN:(long long)uin;
-(BOOL)saveFaceIDDictionary:(id)dictionary withUIN:(long long)uin;
-(id)loadFaceIDDictionaryWithUIN:(long long)uin;
-(void)ansySaveMakeFriendsCardModel:(id)model withUIN:(long long)uin;
-(BOOL)saveMakeFriendsCardModel:(id)model withUIN:(long long)uin;
-(id)loadMakeFriendsCardModelWithUIN:(long long)uin;
-(void)ansySaveUserSummaryModel:(id)model withUIN:(long long)uin;
-(id)loadUserSummaryModelWithUIN:(long long)uin;
-(void)ansySaveProfileModel:(id)model withUIN:(long long)uin;
-(BOOL)saveProfileModel:(id)model withUIN:(long long)uin;
-(id)loadProfileModelWithUIN:(long long)uin;
-(void)ansySaveCommonCardModel:(id)model withUIN:(long long)uin;
-(BOOL)saveCommonCardModel:(id)model withUIN:(long long)uin;
-(id)loadCommonCardModelWithUIN:(long long)uin;
-(void)ansySaveRecentHistory:(id)history;
-(BOOL)saveRecentHistory:(id)history;
-(id)loadRecentHistory;
-(BOOL)saveGroupInfoData:(id)data;
-(id)loadGroupInfoData;
-(void)ansySaveGroupMemoDictionary:(id)dictionary withPath:(id)path;
-(BOOL)saveGroupMemoDictionary:(id)dictionary withPath:(id)path;
-(id)loadGroupMemoDictionaryWithPath:(id)path;
-(void)ansySaveGroupFriendDictionary:(id)dictionary;
-(BOOL)saveGroupFriendDictionary:(id)dictionary;
-(id)loadGroupFriendDictionary;
-(void)ansySaveStrangerModelDictionary:(id)dictionary;
-(BOOL)saveStrangerModelDictionary:(id)dictionary;
-(id)loadStrangerModelDictionary;
-(void)ansySaveBlackListDictionary:(id)dictionary;
-(BOOL)saveBlackListDictionary:(id)dictionary;
-(id)loadBlackListDictionary;
-(void)ansySaveStrangerListDictionary:(id)dictionary;
-(BOOL)saveStrangerListDictionary:(id)dictionary;
-(id)loadStrangerListDictionary;
-(void)ansySaveFriendListDictionary:(id)dictionary;
-(BOOL)saveFriendListDictionary:(id)dictionary;
-(id)loadFriendListDictionary;
-(void)ansySaveAccountListArray:(id)array;
-(BOOL)saveAccountListArray:(id)array;
-(id)loadAccountListArray;
@end

@protocol IIMService <NSObject>
-(id)getIMEI;
-(void)shareToFriend:(id)aFriend summary:(id)summary img:(id)img appName:(id)name appId:(unsigned)anId url:(id)url currentController:(id)controller;
-(void)printMessageModelSeq:(id)seq;
-(void)playSoundEffectOfRecvingMsg;
-(void)getFriendType:(id)type;
-(void)hideQQMsgBar;
-(void)noHideQQMsgBar;
-(void)showWebUrl:(id)url webTitle:(id)title currentController:(id)controller;
-(void)gotoDetailProfile:(id)profile currentController:(id)controller;
-(void)updateVideoNetFlow:(int)flow size:(unsigned long long)size;
-(void)deleteMessageWithContent:(id)content forUin:(id)uin;
-(void)saveQQMessageToDB:(id)db msgTime:(unsigned)time;
-(void)synEnterChatListController;
-(bool)synInsertMsgToDBInMicroMute:(id)microMute;
-(bool)synInsertMsgToDB:(id)db;
-(id)synGetFriendList;
-(int)synGetBackgroundStatus;
-(id)synGetRootViewController;
-(int)synGetFaceID:(id)anId;
-(id)synGetNick:(id)nick;
@end

@protocol CIMGetAPPPluginInfoDelegate <NSObject>
-(void)didReceiveResponse:(void*)response;
@end

@protocol IQQGetPicListener <NSObject>
-(void)Result:(int)result OpIndex:(int)index;
@optional
-(void)Progress:(int)progress OpIndex:(int)index;
@end

@protocol UrlInputViewEventDelegate <NSObject>
-(void)OnSubmitUrl:(id)url;
@end

@protocol IFriendListService
-(void)updateFriendRemarkSetting:(id)setting withMobilePhoneStr:(id)mobilePhoneStr;
-(void)moveToBlackListFromStrangerList:(unsigned long long)strangerList;
-(void)updateQQFriendModelNameByUin:(unsigned long long)uin remark:(id)remark;
-(id)getRecentAndFriendList;
-(id)getRecentFriendList;
-(id)getGroupList;
-(int)getQQFriendHeadIdByUin:(long long)uin;
-(id)getQQFriendNickByUin:(long long)uin;
-(BOOL)isUinAtFriendList:(id)friendList;
-(id)strangerModelForUin:(id)uin;
-(id)nickForStrangerWithUin:(id)uin;
-(id)getQQFriendModelByUin:(id)uin Cache:(BOOL)cache;
@end

@protocol UISearchBarDelegate <NSObject>
@optional
-(void)searchBar:(id)bar selectedScopeButtonIndexDidChange:(int)selectedScopeButtonIndex;
-(void)searchBarResultsListButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarBookmarkButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
@end

@protocol UISearchDisplayDelegate <NSObject>
@optional
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
@end

@protocol MemHeadViewDelegate <NSObject>
@optional
-(void)memBtnClick:(id)click;
-(void)onAllMembersRemoved:(id)removed members:(id)members;
-(void)onMemberRemoved:(id)removed memberUIN:(id)uin;
-(void)removeAllMem;
-(void)memHeadView:(id)view removeMem:(int)mem;
@end

@protocol MSFSearchBarDelegate <NSObject>
-(void)searchBarValueChange:(id)change;
-(void)searchBarEndEdit:(id)edit;
-(void)searchBarStartEdit:(id)edit;
@optional
-(void)searchBar:(id)bar rightButtonModel:(int)model;
-(void)searchBar:(id)bar cancelButtonClick:(BOOL)click;
@end

@protocol FriendListHeaderViewDelegate <NSObject>
-(void)friendListHeaderViewDidTouch:(id)friendListHeaderView;
@end

@protocol RelationAllTableViewSelectRowCallback <NSObject>
-(void)onTitleIndexBarDisappear;
-(void)onPublicAccountModelSelected:(id)selected;
-(void)onFriendModelSelected:(id)selected;
-(BOOL)onClusterModelSelected:(id)selected;
@end

@protocol IQQGroupPersonalCardViewController <NSObject>
-(void)didModifyGroupCard:(unsigned)card uin:(long long)uin groupNick:(id)nick gender:(BOOL)gender phone:(id)phone mail:(id)mail remark:(id)remark;
@end

@protocol IQQGroupProfileViewController <NSObject>
-(void)didModifyGroupProfile:(unsigned)profile groupName:(id)name groupPost:(id)post groupMemo:(id)memo groudAdmissionType:(int)type groupCategory:(int)category groupFaceId:(int)anId;
@end

@protocol QQGetRoamMsgModelProtocol <NSObject>
@optional
-(void)GetRoamMsgError:(int)error string:(id)string;
-(void)GetRoamMsgTimeOut;
-(void)GetRoamMsg:(id)msg;
-(void)GetRoamMsgFinish;
@end

@protocol IGroupSelectDelegate <NSObject>
-(void)notifySelectedGroupID:(int)anId;
@end

@protocol QQGroupCategoryListViewControllerDelegate <NSObject>
@optional
-(void)didSelectGroupCategory:(int)category;
@end

@protocol TTURLResponse <NSObject>
-(id)request:(id)request processResponse:(id)response data:(id)data;
@end

@protocol IUIForwardService <NSObject>
-(BOOL)isOnLoginView;
-(void)removeCurrentMaskWindow;
-(void)forward:(int)forward Info:(id)info;
@end

@protocol IPluginStatisticsService <NSObject>
-(void)upload;
-(void)AddMsgLog:(id)log;
-(void)SetDestType:(int)type;
-(void)SetMessageSource:(int)source;
-(void)AddStatisticsLog:(id)log clickPosition:(int)position clickResult:(int)result;
@end

@protocol QQUrlJumpHelperDelegate <NSObject>
-(void)onAppendParamFinished:(id)finished error:(id)error;
@end

@protocol IAsynDownloadImageObserver <NSObject>
-(void)downLoadImageFail:(id)fail;
-(void)downloadImageFinished:(id)finished;
@end

@protocol IQSAccountRegisterEngine <NSObject>
-(int)getResendSmsLimitSeconds;
-(id)getAppliedPassword;
-(id)getAppliedPhoneCode;
-(id)getAppliedCountryCode;
-(BOOL)commitPassword:(id)password;
-(BOOL)requestResendSmsCode;
-(BOOL)queryUpSmsStat;
-(BOOL)commitSmsCode:(id)code;
-(BOOL)commitPhoneCode:(id)code countryCode:(id)code2;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
@end

@protocol IFaceService
@optional
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)saveHeadImage:(id)image forUin:(id)uin;
-(void)removeHeadImageCacheForUin:(id)uin;
-(void)asynRequestGetHeadUrl:(id)url userType:(int)type;
-(void)resetRequestStateByUin:(id)uin userType:(int)type;
-(void)resetGroupRequestStateByUin:(id)uin;
-(void)resetRequestStateByUin:(id)uin;
-(id)asynLoadHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round target:(id)target isExist:(BOOL*)exist;
-(id)asynLoadHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round target:(id)target;
-(id)getBigHeadImage:(id)image userType:(int)type;
-(id)getBigHeadImage:(id)image;
-(id)getHeadImageFromCache:(id)cache isSmall:(BOOL)small isRound:(BOOL)round;
-(id)getHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round isExist:(BOOL*)exist;
-(id)getHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round userType:(int)type;
-(id)getHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round;
-(id)asynLoadHeadImage:(id)image userType:(int)type sizeType:(int)type3 isRound:(BOOL)round target:(id)target isExist:(BOOL*)exist;
-(id)getHeadImage:(id)image userType:(int)type sizeType:(int)type3 isRound:(BOOL)round isExist:(BOOL*)exist;
-(id)getCommonHeadImage:(id)image;
-(id)getHeadImagePath:(id)path userType:(int)type sizeType:(int)type3;
-(BOOL)isHeadImageExist:(id)exist;
@end

@protocol CIMBaseEngineDelegate <NSObject>
-(void)CIMBaseEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
@end

@protocol IQSAccountRegisterEngineObserver <NSObject>
@optional
-(void)notifyCommitPasswordResponse:(id)response;
-(void)notifyRequestResendSMSCodeResponse:(id)response;
-(void)notifyQueryUpSmsStatResponse:(id)response;
-(void)notifyCommitSmsCodeResponse:(id)response;
-(void)notifyCommitPhoneCodeResponse:(id)response;
@end

@protocol QQRelationNoticeCellDelegate <NSObject>
@optional
-(void)actionBtnClicked:(id)clicked;
@end

@protocol MFMessageComposeViewControllerDelegate <NSObject>
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
@end

@protocol UIADOperationDelegate <NSObject>
-(void)didObjectEntityCreated:(id)created;
-(void)didSceneEntityCreated:(id)created;
@end

@protocol QQMultiImagePickerControllerDelegate <NSObject>
@optional
-(void)QQMultiImagePickerController:(id)controller didSendPhotoList:(id)list;
-(void)QQMultiImagePickerController:(id)controller didSendOriginalPhoto:(id)photo;
-(void)QQMultiImagePickerController:(id)controller didSelectPhoto:(id)photo;
-(void)QQMultiImagePickerControllerDidCancel:(id)qqmultiImagePickerController;
-(void)QQMultiImagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
@end

@protocol FileAssistantUploadTransferDelegate <NSObject>
@optional
-(void)FileAssistantUploadTransfer:(id)transfer curTransSize:(int)size totalTransSize:(int)size3;
-(void)FileAssistantUploadTransfer:(id)transfer didFinished:(int)finished;
@end

@protocol FileAssistantDownloadTransferDelegate <NSObject>
@optional
-(void)FileAssistantDownloadTransfer:(id)transfer curTransSize:(long long)size totalTransSize:(long long)size3;
-(void)FileAssistantDownloadTransfer:(id)transfer didFinished:(int)finished;
@end

@protocol FileAssistantHTTPConnectionDelegate <NSObject>
-(id)getAssetsGroupList;
-(BOOL)isWifiPhotoReady;
-(void)FileAssistantHTTPConnection:(id)connection didFinished:(BOOL)finished;
-(void)FileAssistantHTTPConnection:(id)connection curTransSize:(unsigned)size totalTransSize:(int)size3;
-(id)getResourcePathByName:(id)name;
@end

@protocol IHttpServerStateObserver <NSObject>
-(void)OnIPChange:(int)change;
-(void)OnStopResult:(BOOL)result Error:(id)error SessionId:(int)anId;
-(void)OnStartResult:(BOOL)result Error:(id)error SessionId:(int)anId BindIP:(id)ip BindPort:(int)port;
@end

@protocol IConnectionObserver <NSObject>
-(void)OnConnectionDie:(id)die;
-(void)OnConnectionWillStart:(id)onConnection;
@end

@protocol IDownloadReqObserver <NSObject>
-(void)ConnectionWouldDie:(id)die;
-(void)Connection:(id)connection RequestId:(unsigned)anId Finish:(BOOL)finish;
-(void)Connection:(id)connection RequestId:(unsigned)anId HadSendBytes:(unsigned)bytes TotalBytes:(unsigned)bytes4;
-(id)DownloadPathForUri:(id)uri Handled:(BOOL*)handled;
@end

@protocol IHttpClientService <NSObject>
-(void)Test;
@end

@protocol IConnection <NSObject>
-(id)ConnectedHost;
-(void)SetDownloadReqObserver:(id)observer;
@end

@protocol NSNetServiceDelegate <NSObject>
@optional
-(void)netService:(id)service didUpdateTXTRecordData:(id)data;
-(void)netServiceDidStop:(id)netService;
-(void)netService:(id)service didNotResolve:(id)resolve;
-(void)netServiceDidResolveAddress:(id)netService;
-(void)netServiceWillResolve:(id)netService;
-(void)netService:(id)service didNotPublish:(id)publish;
-(void)netServiceDidPublish:(id)netService;
-(void)netServiceWillPublish:(id)netService;
@end

@protocol HTTPResponse
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
@optional
-(void)connectionDidClose;
-(BOOL)isChunked;
-(id)httpHeaders;
-(int)status;
-(BOOL)delayResponseHeaders;
@end

@protocol IHttpServerService <NSObject>
-(BOOL)AsyncStopConnection:(id)connection Error:(id*)error;
-(BOOL)ServerIsRunning;
-(void)UnSetConnectionObserver:(id)observer;
-(void)SetConnectionObserver:(id)observer;
-(BOOL)SetConnectionUpLimit:(int)limit;
-(BOOL)SetConnectionClass:(Class)aClass;
-(void)UnSetHttpStateObserver:(id)observer;
-(void)SetHttpStateObserver:(id)observer;
-(BOOL)SyncStop:(int)stop Error:(id*)error;
-(BOOL)SyncStart:(id*)start SessionId:(int*)anId BindIP:(id*)ip BindPort:(int*)port;
-(BOOL)AsyncStop:(int)stop Error:(id*)error;
-(int)AsyncStart:(id*)start;
-(BOOL)SetDocumentRoot:(id)root;
@end

@protocol IHttpService <NSObject>
-(id)HttpServerService;
-(id)HttpClientService;
@end

@protocol UIAnimationDirectorDelegate <NSObject>
@optional
-(void)shouldRegisterMacros:(id)macros;
-(void)shouldRegisterExternalObjects:(id)objects scene:(id)scene;
-(void)didAnimationExecutionFailed:(id)failed;
-(void)didAnimationFinished:(id)finished;
@end

@protocol ICacaUserView <NSObject>
-(void)didAdd;
-(void)didUserPortraitTouched:(id)touched;
-(void)didUserRemoved:(id)removed;
@end

@protocol CCacaGetInfoDelegate <NSObject>
@optional
-(void)DecodeReqNotifyChange:(CIMEngineMsgStruct)change;
-(void)CCacaGetRespUpdateUserList:(id)list didRecieveMsg:(CIMEngineMsgStruct)msg;
-(void)CCacaGetRespUserDel:(id)del didRecieveMsg:(CIMEngineMsgStruct)msg;
-(void)DecodeReqNotifyDiscussChange:(CIMEngineMsgStruct)change;
-(void)CCacaGetRespReport:(id)report didRecieveMsg:(CIMEngineMsgStruct)msg;
-(void)CCacaGetRespRegister:(id)aRegister didRecieveMsg:(CIMEngineMsgStruct)msg;
-(void)CCacaGetRespQuitDiscuss:(id)discuss didRecieveMsg:(CIMEngineMsgStruct)msg;
@end

@protocol CCacaMainViewGetTimerDelegate <NSObject>
-(void)didCollectAgainTimeout;
@end

@protocol CacaQuitDiscussUinToControllerDelegate <NSObject>
-(void)QuitDiscussUinToController:(long long)controller;
@end

@protocol ICacaDiscussGroupUpdateResult <NSObject>
@optional
-(void)handleUpdateCacaGroupInfoResult:(BOOL)result discussUin:(long long)uin;
-(void)handleUpdateCacaGroupListResult:(BOOL)result;
@end

@protocol CCacaReceiverViewGetTimerDelegate <NSObject>
@optional
-(void)didReportIDTimeout;
@end

@protocol CCacaRoomViewGetTimerDelegate <NSObject>
-(void)didUpdateUserListTimeOut;
-(void)didPlaybackTimeout;
@end

@protocol ICacaUserScrollView <NSObject>
-(void)didUserPortraitTouched:(id)touched;
@optional
-(void)didAdd;
-(void)didUserRemoved:(id)removed;
@end

@protocol CacaAnimationButtonDelegate <NSObject>
-(void)collectButtonClicked;
@end

@protocol CIMGetCacaRespDelegate <NSObject>
-(void)CCacaGetResp:(id)resp didRecieveMsg:(CIMEngineMsgStruct)msg;
@end

@protocol PhotoBrowserViewDelegate <NSObject>
-(BOOL)canShowPageControl;
-(void)didScrollToPage:(int)page;
-(void)longPressDetected;
-(void)singleTapDetected;
-(id)imageAtIndex:(int)index;
-(int)numberOfPages;
@end

@protocol ActionItemDelegate <NSObject>
-(void)deleteCurrentPhoto;
-(id)getCurrentViewController;
-(id)getCurrentPhoto;
-(int)getCurrentPhotoPageNumber;
-(id)getCurrentImage;
-(id)getCurrentImagePath;
@end

@protocol QQImageViewDelegate <NSObject>
@optional
-(void)longPressDetected:(id)detected;
-(void)singleTapDetected:(id)detected;
@end

@protocol QQPhotoDelegate <NSObject>
-(void)notifyAsynLoadImageFail:(id)fail;
-(void)notifyAsynLoadImageSuccess:(id)success;
-(void)notifyDownloadThumbFail:(id)fail;
-(void)notifyDownloadThumbSuccess:(id)success;
-(void)notifyNetWorkError:(id)error;
-(void)notifyDownloadFail:(id)fail;
-(void)notifyDownloadSuccess:(id)success;
-(void)notifyDownloadProgress:(id)progress;
@end

@protocol DACircularProgressViewDelegate <NSObject>
@optional
-(void)notifyAnimationFinished:(id)finished;
@end

@protocol CountryCodeViewControllerDelegate <NSObject>
-(void)selectedWithCountryName:(id)countryName countryCode:(id)code;
@end

@protocol IMsgReliableTransportationService <NSObject>
-(id)getAllPiecesOfOneLongMsg:(id)oneLongMsg;
-(void)markMultiMessageAllFailed:(id)failed;
-(void)removeMultiMessagesFromSendQueue:(id)sendQueue;
-(BOOL)isMultiMessageSentOutCompletely:(id)completely;
-(id)getSendingUserInfoBySeq:(int)seq;
-(id)removeSendingMsgBySeq:(int)seq;
-(int)sendMessage:(id)message transportLicence:(id)licence;
-(id)getLicence:(id)licence;
-(void)unregisterSendResultHandler:(id)handler;
-(id)registerSendResultHandler:(id)handler;
@end

@protocol MessageSenderDelagate <NSObject>
-(void)handleMsgSender:(id)sender msgSeqId:(int)anId sendResult:(int)result;
@optional
-(void)handleMsgSender:(id)sender msgSeqId:(int)anId responsePacket:(id)packet;
@end

@protocol CCacaDiscussRoomGetTimerDelegate <NSObject>
-(void)didUpdateCacaDiscussMemTimeout;
-(void)didBadNetworkStateTimeout;
@end

@protocol CacaRoomSelectMemberDelegate <NSObject>
-(void)CacaSelectMemeber:(id)memeber Voice:(BOOL)voice;
@end

@protocol PhotoBrowserViewControllerDelegate <NSObject>
@optional
-(void)photoBrowserViewContoller:(id)contoller didSelectImage:(id)image;
-(CGRect)getOriginalRectForPhoto:(id)photo atIndex:(int)index thumbRegion:(CGRect*)region clipRect:(CGRect*)rect;
-(CGRect)getOriginalRectForPhoto:(id)photo atIndex:(int)index;
@end

@protocol AsynFileStorageDelegate <NSObject>
-(void)onSaveFinish:(id)finish success:(BOOL)success;
-(id)deepcopy:(id)deepcopy;
@end

@protocol AnimationDelegate <NSObject>
@optional
-(void)didAnimationEnd:(id)end;
-(void)didAniamtionStart:(id)start;
@end

@protocol CacaQuitDiscussUinDelegate <NSObject>
-(void)QuitDiscussUin:(long long)uin;
@end

@protocol QQAssetViewDelegate <NSObject>
-(void)didSelectPhoto:(id)photo;
@end

@protocol INetworkFlowStatService <NSObject>
-(void)resetFlowData;
-(id)getNetworkFlow:(BOOL)flow;
-(void)recordFlowBytes:(long long)bytes source:(int)source entry:(id)entry;
-(void)recordFlowBytes:(long long)bytes type:(int)type;
@end

@protocol IHttpStateDelegate <NSObject>
-(void)onHttpState:(int)state transferType:(int)type success:(BOOL)success error:(id)error;
@optional
-(void)onHttpSuccess:(id)success;
-(void)onHttpProcess:(int)process transferType:(int)type process:(float)process3;
@end

@protocol NSCopying
-(id)copyWithZone:(NSZone*)zone;
@end

@protocol MQHttpRequestDelegate <NSObject>
@optional
-(void)request:(id)request didReceiveData:(id)data;
-(void)requestRedirected:(id)redirected;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request willRedirectToURL:(id)url;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)requestStarted:(id)started;
@end

@protocol MQHttpTaskManager <NSObject>
-(void)removeTask:(id)task;
-(int)addTask:(id)task;
@end

@protocol CFImageGetterDelegate <NSObject>
@optional
-(void)requestImageCancelled:(id)cancelled;
-(void)requestImageFailed:(id)failed;
-(void)requestImageEnd:(id)end;
-(void)requestImageStart:(id)start;
@end

@protocol AnaCommunicationNetFlowDelegate <NSObject>
@optional
-(void)onDayNetFlowOverload:(id)overload counts:(int)counts upFlow:(long)flow downFlow:(long)flow4;
-(void)onNetFlowHappened:(id)happened status:(id)status elapse:(long)elapse isWiFi:(BOOL)fi upFlowBytes:(long)bytes downFlowBytes:(long)bytes6 reqTime:(double)time;
@end

@protocol AnaPersistListener <NSObject>
-(void)onPersist;
@end

@protocol AnaUplaodNotifier <NSObject>
-(void)reachMaxsize;
@end

@protocol AnaUploader <NSObject>
-(BOOL)uploadFinishWithResult:(BOOL)result error:(id*)error;
-(id)getUploadData:(BOOL)data error:(id*)error;
@end

@protocol AnalyticsPersistEncoding <NSObject>
-(BOOL)setEncodeData:(id)data;
-(id)encodeData;
@end

@protocol AnalyticsDataPersiter <NSObject>
-(BOOL)cleanExpireDatas:(id*)datas;
-(id)getObjectsByCondition:(id)condition error:(id*)error;
-(id)getObjectsWithCountOfTypes:(id)types count:(int)count error:(id*)error;
-(int)getObjectCountOfTypes:(id)types err:(id*)err;
-(id)getObjectsWithCountOfType:(int)type count:(int)count error:(id*)error;
-(int)getObjectCountOfType:(int)type err:(id*)err;
-(id)getObjectsWithCount:(int)count error:(id*)error;
-(int)getObjectCount:(id*)count;
-(BOOL)deleteObjectsByType:(int)type error:(id*)error;
-(BOOL)deleteObjects:(id)objects error:(id*)error;
-(BOOL)deleteObjectsByIds:(id)ids error:(id*)error;
-(BOOL)deleteObjectById:(long)anId error:(id*)error;
-(BOOL)saveObjects:(id)objects error:(id*)error;
-(id)getObjectById:(long)anId error:(id*)error;
-(BOOL)updateObject:(id)object error:(id*)error;
-(BOOL)saveObject:(id)object error:(id*)error;
@end

@protocol AnaLocalObjInitWithWupProtocol <NSObject>
@optional
-(void)initLocalObjWithWupBuffer:(JceInputStream<analyticstaf::BufferReader>*)wupBuffer;
@end

@protocol AnaNSObjTransToJceBufferProtocol <NSObject>
@optional
-(void)setDataToBuffer:(JceOutputStream<analyticstaf::BufferWriter>*)buffer;
@end

@protocol AnaCommunicationRequestDelegate <NSObject>
@optional
-(void)succeedWithResponse:(id)response;
-(void)failWithError:(id)error;
@end

@protocol CommunicateMethod <NSObject>
-(void)communicateWithSeverAsync:(id)severAsync delegate:(id)delegate;
@end

@protocol AnaEncrypt
-(id)decrypt:(id)decrypt key:(id)key;
-(id)encrypt:(id)encrypt key:(id)key;
@end

@protocol AnaZip
-(id)unzip:(id)unzip;
-(id)zip:(id)zip;
@end

@protocol AnalyticsModule
-(BOOL)uploadModuleHistoryData;
-(BOOL)isEnabled;
-(BOOL)checkAndEnable;
@optional
-(BOOL)executeServerStrategyInit:(id)init;
-(BOOL)executeLocalStrategyInit;
-(BOOL)executeFunction;
@end

@protocol AnalyticsNetSpeedTest <NSObject>
-(id)testIPConnection:(id)connection error:(id*)error;
-(id)testDomainConnection:(id)connection error:(id*)error;
@end

@protocol GroupDBServiceInterface <NSObject>
-(int)asyncRemoveMessage:(id)message callback:(id)callback userdata:(id)userdata;
-(int)asynGetMsgFromTroop:(id)troop WithType:(int)type notMoreThanSeq:(long long)seq limitCount:(unsigned)count callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateGroupMessageSeq:(long long)seq groupCode:(id)code msgID:(id)anId callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMsgWithMsgId:(long long)msgId groupCode:(id)code msgType:(int)type callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateSendGroupPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateSendGroupPttState:(id)state uuid:(id)uuid duration:(unsigned)duration state:(int)state4 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateGroupRichMsgState:(id)state msgId:(int)anId msgTime:(int)time state:(int)state4 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateSendGroupPicState:(id)state uuid:(id)uuid state:(int)state3 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateTroopName:(id)name groupCode:(int)code groupType:(int)type groupFlag:(int)flag groupFace:(int)face infoSeq:(int)seq callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteTroopListByGroupCode:(id)code callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGarbageTroopMsg:(id)msg reserve:(int)reserve callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteTroopMsg:(id)msg FromSeq:(id)seq callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteTroopMemberCache:(id)cache callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertTroopRemarkListBatch:(id)batch callback:(id)callback userdata:(id)userdata;
-(int)asyncSetTroopSuccessStateWithUUid:(id)uuid withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncSetTroopFailStateWithUUid:(id)uuid withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncSetTroopFailStateWithMsgID:(id)msgID withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncSetTroopReadStateWithMsgID:(id)msgID withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateTroopRemarkStatus:(id)status :(id)arg2 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateTroopMemStatus:(id)status :(id)arg2 callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertTroopMemBatch:(id)batch callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateTroopRemarkLastSeq:(id)seq groupCode:(id)code callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMessageWithUin:(id)uin msgSeq:(long long)seq sendUin:(id)uin3 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateGroupMessageWithUin:(id)uin desTime:(int)time srcTime:(int)time3 sendUin:(id)uin4 callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMessageWithUin:(id)uin msgTime:(int)time sendUin:(id)uin3 callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateGroupMessageUuid:(id)uuid callback:(id)callback userdata:(id)userdata;
-(int)asyncSetNickForGroupCode:(id)groupCode name:(id)name callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertTroopListForUin:(unsigned)uin code:(unsigned)code callback:(id)callback userdata:(id)userdata;
-(int)asyncSetReadForGroupContent:(id)groupContent groupCode:(id)code callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertGroupMessage:(id)message callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteMsgsWithGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertTroopMessageArray:(id)array callback:(id)callback userdata:(id)userdata;
-(id)getLastMessageInGroup:(id)group uin:(id)uin;
-(id)getGroupMessageModel:(id)model msgSeq:(long long)seq;
-(id)fillValidMessageForGroup:(id)group withCount:(unsigned)count intoMessags:(id)messags force:(BOOL)force;
-(BOOL)removeMessage:(id)message;
-(void)clearAllTroopMsg;
-(void)updateTroopPttMsg:(id)msg;
-(void)setPttMsg:(id)msg withStatus:(int)status groupCode:(id)code;
-(void)updateTroopMsgRecentFlag:(id)flag;
-(id)GetMsgsLessThanMsgid:(long long)msgid limitCount:(int)count GroupCode:(id)code;
-(BOOL)DeleteTroopAnouncementMsgArr:(id)arr;
-(BOOL)DeleteTroopAnouncementMsg:(long long)msg;
-(BOOL)DeleteTroopAnouncementMsgOfReadState:(BOOL)readState GroupCode:(long long)code;
-(BOOL)UpadateTroopAnouncementMsgArray:(id)array;
-(BOOL)insertTroopAnouncementMsgArray:(id)array;
-(id)GetAnouncementMsgWithSvrMsgId:(long long)svrMsgId;
-(id)GetAnouncementMsgWithMsgId:(long long)msgId;
-(id)GetAnouncementMsgOfReadState:(BOOL)readState;
-(id)GetAnouncementMsgOfGroup:(long long)group AscOrder:(BOOL)order HadReaded:(BOOL)readed;
-(id)GetAnouncementMsgOfGroup:(long long)group AscOrder:(BOOL)order StartTime:(long long)time EndTime:(long long)time4;
-(void)SetMsgSendStateWithMsgID:(id)msgID groupcode:(id)groupcode state:(int)state;
-(int)GetMsgSendState:(int)state groupcode:(id)groupcode;
-(BOOL)updateSendGroupPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(BOOL)updateSendGroupPttState:(id)state uuid:(id)uuid duration:(unsigned)duration state:(int)state4;
-(BOOL)updateGroupRichMsgState:(id)state msgId:(int)anId msgTime:(int)time state:(int)state4;
-(BOOL)updateSendGroupPicState:(id)state uuid:(id)uuid state:(int)state3;
-(BOOL)updateGroupMessageSeq:(long long)seq groupCode:(id)code msgID:(id)anId;
-(void)deleteGroupMsgWithMsgId:(long long)msgId groupCode:(id)code msgType:(int)type;
-(void)setGroupExInfo:(id)info;
-(id)getGroupExInfoDic;
-(void)deleteTroopListByGroupCode:(id)code;
-(void)insertTroopListForUin:(unsigned)uin code:(unsigned)code;
-(id)getTroopCountListFromTroopMsg;
-(id)getTroopListFromTroopMsg;
-(BOOL)deleteGarbageTroopMsg:(id)msg reserve:(int)reserve;
-(BOOL)deleteTroopMsg:(id)msg FromSeq:(id)seq;
-(void)updateTroopMemberToTmp:(long long)tmp;
-(long long)GetGroupMsgMaxSeq:(id)seq uin:(id)uin;
-(void)deleteTroopMemberCache:(id)cache;
-(void)insertTroopRemarkListBatch:(id)batch;
-(id)getTroopRemarkList:(id)list;
-(id)getUnFinishRemark;
-(void)setTroopSuccessStateWithUUid:(id)uuid withGroupCode:(id)groupCode;
-(void)setTroopFailStateWithUUid:(id)uuid withGroupCode:(id)groupCode;
-(void)setTroopFailStateWithMsgID:(id)msgID withGroupCode:(id)groupCode;
-(void)setTroopReadStateWithMsgID:(id)msgID withGroupCode:(id)groupCode;
-(void)updateTroopRemarkStatus:(id)status :(id)arg2;
-(void)updateTroopMemStatus:(id)status :(id)arg2;
-(id)GetTroopMemByGroupCode:(id)code;
-(void)InsertTroopMemBatch:(id)batch;
-(id)GetTroopUinAndCode;
-(int)QQDataCenter_GetGroupMessageCount:(id)count;
-(id)GetTroopUinAndCodeByGroupCode:(id)code;
-(id)getTroopRemarkLastSeq:(id)seq;
-(void)updateTroopRemarkLastSeq:(id)seq groupCode:(id)code;
-(id)groupMessageWithUin:(id)uin timeStamp:(int)stamp;
-(void)deleteGroupMessageWithUin:(id)uin msgSeq:(long long)seq sendUin:(id)uin3;
-(void)updateGroupMessageWithUin:(id)uin desTime:(int)time srcTime:(int)time3 sendUin:(id)uin4;
-(void)deleteGroupMessageWithUin:(id)uin msgTime:(int)time sendUin:(id)uin3;
-(void)deleteGroupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(id)groupMessageWithUin:(id)uin endSeq:(long long)seq count:(int)count;
-(id)groupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(id)groupMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)getGroupLatestMessage:(id)message;
-(int)asyncGetGroupMsgWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(void)PreloadGroupMsgWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(void)updateGroupMessageUuid:(id)uuid;
-(id)getGroupListDict;
-(long long)uinForGroupCode:(id)groupCode;
-(id)nickForGroupCode:(id)groupCode;
-(void)setNickForGroupCode:(id)groupCode name:(id)name;
-(void)clearGroupFriendCache;
-(void)clearTroopMemberCache;
-(void)setTroopMemberInCache:(id)cache forGroup:(id)group;
-(void)removeTroopMemberInCache:(id)cache;
-(id)getTroopMemberInCache:(id)cache;
-(void)clearRemark;
-(void)SetRemarkObj:(id)obj forGroup:(id)group;
-(id)GetRemarkObj:(id)obj;
-(int)statusByGroup:(id)group :(id)arg2;
-(id)nickForGroup:(id)group :(id)arg2;
-(id)groupListInfoThatHasNotInfo;
-(id)getGroupListInfoWithFlush:(BOOL)flush;
-(int)getGroupListInfoCount;
-(void)setReadForGroupContent:(id)groupContent groupCode:(id)code;
-(void)insertGroupMessage:(id)message;
-(id)GetMaxSeqForGroup:(id)group;
-(id)GetTroopMsgMaxSeqByGropuCode;
-(void)deleteMsgsWithGroupCode:(id)groupCode;
-(BOOL)saveGroupMaxSeqDict;
-(void)insertTroopMessageArray:(id)array;
-(void)changeAccount:(id)account;
@end

@protocol QQDatabaseMigratorDelegate <NSObject>
-(void)db:(id)db didFinishMigrationWithError:(int)error;
-(void)db:(id)db didStartMigrationWithError:(int)error;
@optional
-(void)didFinishMigrationWithError:(int)error;
-(void)tableMigrationFinishedForGroup:(id)group inDatabase:(id)database withError:(int)error;
@end

@protocol IContactsService <NSObject>
-(BOOL)removeSingleContactFromList:(id)list;
-(id)getContactRecommendList;
-(void)clearRecommendedContacts;
-(int)getUnreadRecommendedContactCount;
-(BOOL)isReadRecommendedContact:(id)contact;
-(void)setRecommendedContactsRead;
-(BOOL)updateContactsStat;
-(void)setNeedRemindBeFoundWithMobilePhoneStr:(id)mobilePhoneStr remind:(BOOL)remind;
-(BOOL)isNeedRemindBeFoundWithMobilePhoneStr:(id)mobilePhoneStr;
-(BOOL)isNeedRemindContactsBindingWithUIN:(long long)uin;
-(void)rejectContactFriend:(id)aFriend uin:(long long)uin sig:(id)sig respContent:(id)content;
-(void)confirmContactFriend:(id)aFriend uin:(long long)uin sig:(id)sig respContent:(id)content;
-(void)addContactFriend:(id)aFriend verifyContent:(id)content;
-(void)replaceBlackList:(id)list;
-(void)removeMobilePhoneAtBlackList:(id)blackList;
-(void)addMobilePhoneToBlackList:(id)blackList;
-(BOOL)isMobilePhoneAtBlackList:(id)blackList;
-(BOOL)isDisableToChat:(id)chat;
-(id)getContactLocalPhoneCodesWithPhoneCodes:(id)phoneCodes;
-(id)getContactPhoneLabelsWithPhoneCodes:(id)phoneCodes;
-(void)updateFriendUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(long long)getContactUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactMobilePhoneWithUIN:(long long)uin;
-(id)getContactNameWithUIN:(long long)uin;
-(BOOL)updateContactNickName:(id)name withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactNickNameWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactNameWithMobilePhoneStr:(id)mobilePhoneStr;
-(BOOL)isMobilePhoneAtUnbindContacts:(id)unbindContacts;
-(BOOL)isMobilePhoneAtBindContacts:(id)bindContacts;
-(BOOL)isMobilePhoneAtContacts:(id)contacts;
-(id)getMyselfMobilePhoneWithoutCountry;
-(id)getMyselfMobilePhone;
-(BOOL)isBinding;
-(int)getContactBinderFromWithMobilePhoneStr:(id)mobilePhoneStr;
-(void)removeTempUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getCountryAndPhoneCodeStr2WithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getCountryAndPhoneCodeStrWithMobilePhoneStr:(id)mobilePhoneStr;
-(void)setNoCountryPhone:(id)phone withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getNoCountryPhoneWithMobilePhone:(id)mobilePhone;
-(void)setContactUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(void)setChatUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getMobilePhoneWithChatUIN:(long long)chatUIN;
-(long long)getChatUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getMobilePhoneWithTemporaryUIN:(long long)temporaryUIN;
-(long long)getTemporaryUINWithMobilePhoneStr:(id)mobilePhoneStr makeIfNotExist:(BOOL)exist;
-(BOOL)isTemporaryUIN:(long long)uin;
-(long long)getTemporaryUIN;
@end

@protocol QQGeneralInformationDelegate <NSObject>
-(id)doRequest:(id)request;
@end

@protocol QQBizDelegate <NSObject>
-(void)invoke:(id)invoke forProtocol:(id)protocol;
-(id)doRequest:(id)request;
@optional
-(BOOL)isPassViewSHow;
-(BOOL)isLogin;
@end

@protocol IMsgSpliteMergeService <NSObject>
@optional
-(void)clearCacheLoadMessage;
-(id)getCacheLoadMessage;
-(void)cacheLoadMessage:(id)message;
-(BOOL)checkMessageContinuity:(id)continuity faultTime:(int)time;
-(BOOL)checkBigMessageAbility;
-(void)cacheBigMessage:(id)message;
-(void)printQQMessageModel:(id)model;
-(int)getMinMsgID:(id)anId;
-(BOOL)deleteCacheLargeMsg:(id)msg;
-(id)getUICacheLargeMsgArray:(id)array;
-(int)checkUILargeMsgWithMessageModel:(id)messageModel;
-(int)amendOfflineUnreadMessageCountWithMsgArray:(id)msgArray;
-(void)getCompleteMessage:(id)message begin:(long long)begin end:(long long)end;
-(id)getCompleteLargeMessage:(id)message addMsgArray:(id)array;
-(id)getCompleteLargeMessage:(id)message startLocation:(int)location;
-(id)mergeLargeMessage:(id)message;
-(unsigned short)getSendMessageCharSeq:(long long)seq;
-(unsigned short)getSendMessageSeq:(long long)seq;
-(void)clearCacheLargeMsg;
-(id)getCacheLargeMsgArray:(id)array;
-(id)mergerLargeMessage:(id)message;
-(int)checkPushLargeMsgWithMessageModel:(id)messageModel;
-(BOOL)checkPushLargeMsgWithPkgNum:(BOOL)pkgNum pkgIndex:(BOOL)index divSeq:(short)seq;
-(BOOL)checkLargeMsgResponse:(id)response;
-(void)sendLargeMsg:(id)msg;
-(BOOL)isLargeMsg:(id)msg maxSize:(int)size;
-(id)MsgDivide:(id)divide maxSize:(int)size;
-(void)cacheLargeMsg:(id)msg;
@end

@protocol IUserSummaryService <NSObject>
-(void)openUsersummaryPage:(long long)page type:(int)type;
-(BOOL)requestSendVerifyCode:(id)code sessionID:(int)anId;
-(int)requestUploadQQFaceWithFileTrans:(id)fileTrans;
-(BOOL)requestVoteSomebody:(long long)somebody;
-(BOOL)requestReportIllegalUser:(long long)user;
-(BOOL)requestModifyRemark:(long long)remark remark:(id)remark2;
-(int)requestUserSummaryBySearchName:(id)name comeFrom:(int)from groupCode:(long long)code;
-(int)requestUserSummary:(long long)summary comeFrom:(int)from groupCode:(long long)code;
-(void)setCurModelValue:(id)value;
-(void)reset;
-(id)getModelWithUin:(long long)uin;
@end

@protocol UserSummaryTouchControlDelegate <NSObject>
@optional
-(void)onSendMsgTouched:(id)touched;
-(void)onAddFriendTouched:(id)touched;
@end

@protocol UserSummaryPhotosTouchDelegate <NSObject>
@optional
-(void)onPhotoTouched:(id)touched url:(id)url;
@end

@protocol UserSummaryTableHeaderViewDelegate <NSObject>
@optional
-(void)onUserSummaryLevelViewClick:(id)click;
-(void)onUserSUmmaryIdentityImageClick:(id)click tag:(int)tag;
-(void)onUserSummaryTableHeaderViewZanClick:(id)click;
-(void)onUserSummaryCoverClick:(id)click;
-(void)onUserSummaryTableHeaderViewHeaderImageClick:(id)click;
@end

@protocol CoverHeightDelegate <NSObject>
-(void)coverHeightChange:(int)change;
@end

@protocol IUrlImageService
-(BOOL)isImageExist:(id)exist;
-(void)asyncGetImageWithUrl:(id)url;
-(id)getImageWithUrl:(id)url;
@end

@protocol ISelectFriendDataSource <NSObject>
-(id)getInitSelectedDataList;
-(id)getInitDataList;
-(int)getMaxSelection;
@optional
-(id)getFilterDataList;
-(id)getCurrentUIN;
@end

@protocol ISelectFriendActionObserver <NSObject>
-(BOOL)onRightButtonClicked:(id)clicked;
-(BOOL)onLeftButtonClicked;
@optional
-(BOOL)onCollapse:(id)collapse;
-(BOOL)onItemDisselected:(id)disselected;
-(BOOL)onItemSelected:(id)selected;
-(BOOL)onExpand:(id)expand;
-(void)onReachMaxSelection;
@end

@protocol PLHeaderDelegate <NSObject>
-(void)onClickHead:(id)head;
@end

@protocol PLButtonDelegate <NSObject>
-(void)onClickButton:(id)button;
@end

@protocol PLMutablePicDelegate <NSObject>
-(void)onClickImage:(id)image;
@end

@protocol CSImagePickerControllerDelegate <NSObject>
-(void)didCSImagePickerController:(id)controller selectedImages:(id)images;
@end

@protocol STScratchViewDelegate <NSObject>
-(void)notifyTouchMoved;
@end

@protocol MessageSender <NSObject>
-(int)sendMessage:(id)message;
@end

@protocol QQSearchBaseLogicEngineDelegate <NSObject>
@optional
-(BOOL)searchResultCellDidSelect:(id)searchResultCell;
@end

@protocol ISynInfoService <NSObject>
-(void)setDelegate:(id)delegate IncrUpdateType:(int)type;
-(void)saveTimestamps:(int)timestamps from:(BOOL)from;
-(void)respPushUpdate:(const void*)update DataLen:(int)len subMsgType:(unsigned)type;
-(void)requestIncreasedUpdate;
@end

@protocol ICircleService <NSObject>
-(id)getCircle:(unsigned)circle;
-(id)getCircleFriendModel:(unsigned)model uin:(unsigned long long)uin;
-(id)getCircleFriendListByCircleId:(unsigned)anId;
-(id)getAllCircleFriendList;
-(id)getAddCircleList;
-(id)getAllCircleList;
-(int)requestGetCircleSwitches;
-(int)requestUpdateCircleRichFlag;
-(int)requestUpdateCircleFriendInfo;
-(int)requestUpdateCircleInfo;
-(int)requestBlackCircleFriend:(long long)aFriend;
-(int)requestCircleList:(long long)list;
-(int)loadCircleList:(long long)list;
@end

@protocol FriRecommendCellDelegate <NSObject>
@optional
-(void)actionViewProfile:(id)profile;
-(void)actionStartChat:(id)chat;
-(void)actionAddFriend:(id)aFriend;
@end

@protocol IFriRecommendService <NSObject>
@optional
-(id)getRecommendNameByUin:(unsigned long long)uin;
-(id)getRecommendNameByPhoneCode:(id)code;
-(id)getNewUnReadRecommendData;
-(int)getUnReadRecommendCount;
-(id)getRecommendList;
-(void)CreateFriRecommendController:(id)controller;
-(void)requestRecommendList;
@end

@protocol IC2CMsgObserver <NSObject>
-(id)handleMsg:(Msg*)msg;
@end

@protocol IAppVsersionService <NSObject>
-(float)lastVersionNum;
-(float)currentVersionNum;
-(id)lastAppVersion;
-(id)currentAppVersion;
-(BOOL)isCoverInstallation;
-(BOOL)isNewInstallation;
@end

@protocol ISerializeBuffService <NSObject>
-(void)removeMessageByUin:(id)uin;
-(BOOL)cacheSendMsg:(id)msg;
@end

@protocol IAlbumService
@optional
-(void)writeImageToSavedPhotosAlbum:(CGImageRef)savedPhotosAlbum metadata:(id)metadata completionBlock:(id)block;
-(void)writeImageDataToSavedPhotosAlbum:(id)savedPhotosAlbum metadata:(id)metadata completionBlock:(id)block;
-(void)asyncCompressAndSaveImages:(id)images uuids:(id)uuids compressCallback:(id)callback finishCallback:(id)callback4;
-(void)asyncCacheImage:(id)image finishCallback:(id)callback;
-(void)assetForURL:(id)url resultBlock:(id)block failureBlock:(id)block3;
-(void)assetsGroup:(id)group enumerateAssetsUsingBlock:(id)block;
-(void)enumerateGroupsWithTypes:(unsigned)types usingBlock:(id)block failureBlock:(id)block3;
-(id)defaultAssetsLibrary;
@end

@protocol MQDyanmicMenuDelegate <NSObject>
@optional
-(void)onMenuActionRequestEnd:(id)end;
-(void)onMenuActionFailed:(id)failed msg:(id)msg seq:(id)seq;
-(void)onMenuActionSuccessed:(id)successed seq:(id)seq;
-(void)onMenuActionStartProcess:(id)process seq:(id)seq;
@end

@protocol ChatSelectPhotoBottomBarDelegate <NSObject>
@optional
-(void)chatSelectPhotoBottomBarSendButtonDidClick;
-(void)chatSelectPhotoBottomBarClickPhotoAtIndex:(int)index;
-(void)chatSelectPhotoBottomBarAddButtonDidClick;
@end

@protocol AIOCellLongPressDelegate <NSObject>
@optional
-(void)LongPressCanceled:(CGPoint)canceled;
-(void)LongPressEnded:(CGPoint)ended;
-(void)LongPressCallBack:(CGPoint)back;
@end

@protocol IC2CTypeMsgRemoveDuplicateRelateMarkGenerator <NSObject>
-(void)GenRemoveDuplicateRelateMark:(C2C_DUPLICATE_RELATEMARK*)mark GenInputParam:(C2C_DUPLICATE_RELATEMARK_GEN_INPUT_PARAM*)param;
@end

@protocol IMsgSvcSendMsgRespHandler <NSObject>
-(BOOL)OnReceiveSendMsgRespOfSendSeq:(unsigned long)sendSeq ResultCode:(unsigned long)code ErrMsg:(const basic_string<char, std::char_traits<char>, std::allocator<char> >*)msg ReqSendTimeFromServer:(unsigned long)server;
@end

@protocol QQTextDrawViewDelegate <NSObject>
-(void)touchTap:(id)tap;
-(void)didTextDrawViewTouch:(id)touch withType:(int)type forValue:(id)value;
@end

@protocol IC2CDBService <NSObject>
-(int)asyncDeleteMessage:(id)message userdata:(id)userdata callback:(id)callback;
-(int)updateSecretfiletostatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status userdata:(id)userdata callback:(id)callback;
-(int)updateSecretfilefromstatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status userdata:(id)userdata callback:(id)callback;
-(int)updateSecretfilefromstatusByContent:(id)content fromUin:(id)uin toUin:(id)uin3 status:(int)status userdata:(id)userdata callback:(id)callback;
-(int)asyncupdateSecretfileKeyByContent:(id)content content:(id)content2 userdata:(id)userdata callback:(id)callback;
-(int)asyncupdateSecretMessage:(id)message toUin:(id)uin secretContent:(id)content secretReadtime:(unsigned long long)readtime captureCount:(int)count toStatus:(int)status fromStatus:(int)status7 userdata:(id)userdata callback:(id)callback;
-(int)asyncQQSecretMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page userdata:(id)userdata callback:(id)callback;
-(void)asyncGetC2CMsgWithTargetUin:(id)targetUin withType:(int)type beforeOrEqualTime:(long long)time limitCount:(unsigned)count userdata:(id)userdata callback:(id)callback;
-(int)asyncQQFriendMessage:(id)message MsgID:(int)anId msgCount:(int)count userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateSendGroupTmpPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 userdata:(id)userdata callback:(id)callback;
-(int)asyncTransferOnlineFileToOffline:(int)offline newContent:(id)content fromUin:(id)uin msgTime:(int)time fileId:(unsigned)anId userdata:(id)userdata callback:(id)callback;
-(int)asyncGetOnlineFileMsg:(id)msg fileId:(unsigned)anId time:(int)time userdata:(id)userdata callback:(id)callback;
-(int)asyncGetOnlineFileMsg:(id)msg fileId:(unsigned)anId userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3 userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteMsgWithUin:(id)uin msgID:(int)anId userdata:(id)userdata callback:(id)callback;
-(int)asyncGetC2CRichMsg:(id)msg beginTime:(unsigned)time endTime:(unsigned)time3 userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdataMsg:(long long)msg msgTime:(int)time withAppShareID:(int)appShareID userdata:(id)userdata callback:(id)callback;
-(int)asyncGetLatestSayHelloMessageWithUserdata:(id)userdata callback:(id)callback;
-(int)asyncGetAccostMessages:(int)messages userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOfflineFileMsg:(id)msg uuid:(id)uuid forContent:(id)content userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOfflineFileMsg:(id)msg uuid:(id)uuid forRead:(int)read userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOfflineFileMsg:(id)msg time:(int)time forRead:(int)read userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOffLineFileMsg:(id)msg time:(long long)time forRead:(int)read userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOffLineFileMsg:(id)msg msgId:(int)anId forRead:(int)read userdata:(id)userdata callback:(id)callback;
-(int)asyncGetVoiceModelOffLineLiST:(id)st msgTime:(long long)time userdata:(id)userdata callback:(id)callback;
-(int)asyncGetVoiceModelList:(id)list msgId:(id)anId userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdatePttMsg:(id)msg userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateMessageUuid:(id)uuid userdata:(id)userdata callback:(id)callback;
-(int)asyncMessageFlagForRecent:(id)recent userdata:(id)userdata callback:(id)callback;
-(int)asyncGetRoamMsgKeyTime:(id)time inOut:(int)anOut msgTime:(unsigned)time3 userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time userdata:(id)userdata callback:(id)callback;
-(int)asyncQQUnRoamMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size userdata:(id)userdata callback:(id)callback;
-(int)asyncQQMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteQQMessageWithUin:(id)uin FromTime:(int)time toTime:(int)time3 userdata:(id)userdata callback:(id)callback;
-(int)asyncQQMessageWithUin:(id)uin timeStamp:(int)stamp userdata:(id)userdata callback:(id)callback;
-(int)asyncQQmessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page userdata:(id)userdata callback:(id)callback;
-(int)asyncQQMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3 userdata:(id)userdata callback:(id)callback;
-(int)asyncSystemMessages:(unsigned)messages userdata:(id)userdata callback:(id)callback;
-(int)asyncSetNoOperForUin:(id)uin userdata:(id)userdata callback:(id)callback;
-(int)asyncSetReadForUin:(id)uin userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateQQMessageFromUIN:(long long)uin toUIN:(long long)uin2 userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteMsgsWithUin:(id)uin userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteMsgWithContentArr:(id)contentArr :(id)arg2 userdata:(id)userdata callback:(id)callback;
-(id)getC2CMessageModel:(id)model msgRandom:(long long)random msgSeq:(long long)seq;
-(id)getC2CMessage:(id)message readTime:(int)time count:(int)count;
-(id)getC2CMessage:(id)message readTime:(int)time faultTime:(int)time3 count:(int)count;
-(BOOL)deleteAccostMsgsWithUin:(id)uin;
-(BOOL)updateMessages:(id)messages withTime:(double)time ofUin:(id)uin;
-(id)failedMessagesAfterTime:(double)time ofUin:(id)uin;
-(BOOL)batchInsertReceivedMessages:(id)messages;
-(BOOL)batchInsertSendMessages:(id)messages;
-(BOOL)insertSendMessage:(id)message;
-(double)maxValidMessageTimeOfUin:(id)uin;
-(double)maxMessageTimeOfUin:(id)uin;
-(BOOL)deleteMessage:(id)message;
-(BOOL)removeMessage:(id)message;
-(void)clearAllMessage;
-(void)messageFlagForRecent:(id)recent;
-(void)updateC2CRichMsgState:(int)state msgTime:(int)time state:(int)state3 uin:(id)uin;
-(void)SetC2CMsgSendStateWithMsgID:(id)msgID state:(int)state;
-(id)GetC2CMsgWithTargetUin:(id)targetUin WithType:(int)type beforeOrEqualTime:(long long)time limitCount:(unsigned)count;
-(void)updatePttPlaceholder:(int)placeholder uin:(id)uin;
-(void)updatePlaceholderFileMsg:(int)msg content:(id)content uin:(id)uin;
-(void)updateSendGroupTmpPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)updateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)transferOnlineFileToOffline:(int)offline newContent:(id)content fromUin:(id)uin msgTime:(int)time fileId:(unsigned)anId;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId time:(int)time;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId;
-(void)updateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state;
-(void)updateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3;
-(void)deleteQQMessageWithUin:(id)uin FromTime:(int)time toTime:(int)time3;
-(void)deleteMsgWithUin:(id)uin msgID:(int)anId;
-(void)updateSystemMsg:(id)msg handled:(int)handled;
-(void)updataMsg:(long long)msg msgTime:(int)time withAppShareID:(int)appShareID;
-(BOOL)getPTTPICFileFromDB:(id)db len:(int)len type:(int)type uin:(id)uin;
-(id)getLatestSayHelloMessage;
-(void)removeAllAccostMessages;
-(id)getAccostMessages:(int)messages;
-(void)upOffLineFileMsg:(id)msg time:(long long)time forRead:(int)read;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forContent:(id)content;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forRead:(int)read;
-(void)upOfflineFileMsg:(id)msg time:(int)time forRead:(int)read;
-(void)upOffLineFileMsg:(id)msg msgId:(int)anId forRead:(int)read;
-(void)UpdateVoiceMsgUUid:(int)uid UUid:(id)uid2 uin:(id)uin;
-(id)GetVoiceModelOffLineList:(id)list msgTime:(long long)time;
-(id)GetVoiceModelList:(id)list msgId:(id)anId;
-(void)upDatePttMsg:(id)msg;
-(void)setPttMsg:(id)msg withStatus:(int)status;
-(void)setQQReadStateWithUUid:(id)uuid uin:(id)uin;
-(void)setQQFailStateWithUUid:(id)uuid uin:(id)uin;
-(int)GetC2CMessageCount:(id)count smallerThan:(int)than;
-(int)GetC2CMessageCount:(id)count;
-(void)deleteMsgWithContent:(id)content forUin:(id)uin;
-(void)deleteMsgsWithUin:(id)uin;
-(id)QQMessageWithUin:(id)uin timeStamp:(int)stamp;
-(id)QQMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page;
-(int)getRoamMsgKeyTime:(id)time inOut:(int)anOut msgTime:(unsigned)time3;
-(void)updateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time;
-(id)QQUnRoamMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size;
-(id)QQRomaMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size;
-(id)QQMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)QQMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3;
-(id)QQFriendMessage:(id)message MsgID:(int)anId msgCount:(int)count;
-(id)systemMessages:(unsigned)messages;
-(void)updateMessageUuid:(id)uuid;
-(void)updateQQMessagefromUIN:(long long)uin toUIN:(long long)uin2;
-(id)getSecretfileModelWithContent:(id)content toUin:(id)uin content:(id)content3;
-(id)getSecretfileModelWithKey:(id)key toUin:(id)uin key:(id)key3;
-(void)updateSecretMessage:(id)message toUin:(id)uin secretContent:(id)content secretReadtime:(unsigned long long)readtime captureCount:(int)count toStatus:(int)status fromStatus:(int)status7;
-(void)updateSecretfileKeyByContent:(id)content content:(id)content2 uin:(id)uin;
-(void)updateSecretfiletostatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)updateSecretfilefromstatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)updateSecretfilefromstatusByContent:(id)content fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(id)QQSecretMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page;
-(void)insertHistoryQQMessage:(id)message;
-(void)messageFlagVisiable:(long long)visiable visiable:(unsigned)visiable2 uin:(id)uin;
-(void)upVideMsg:(double)msg read:(int)read content:(id)content uin:(id)uin;
-(void)setNoOperForUin:(id)uin;
-(void)setReadForUin:(id)uin;
@end

@protocol IQFriRecommendEngine <NSObject>
-(id)getSourceByIDAndSubID:(int)anId subID:(int)anId2;
-(id)getRecommendNameByUin:(unsigned long long)uin;
-(id)getRecommendNameByPhoneCode:(id)code;
-(void)requestRecentFriRecommendList:(unsigned long long)list start_time:(unsigned)time;
-(void)requestUnReadFriendRecommends:(unsigned long long)recommends;
-(void)requestNewFriRecommendList:(unsigned long long)list;
-(void)requestDeleteRecommends:(unsigned long long)recommends uinList:(id)list;
-(void)requestDeleteAllRecommends:(unsigned long long)recommends start_time:(unsigned)time;
-(void)requestNotifySvrFriendsRecommendRead:(unsigned long long)read timeStamp:(long long)stamp;
-(void)requestNotifySvrGenerateFriendsRecommend:(unsigned long long)recommend;
-(BOOL)isProbableFriendsNeedUpdate;
-(id)getNewUnReadRecommendData;
-(void)deleteLocalFriendRecommendList;
-(void)removeSingleItemFromListByUin:(long long)listByUin;
-(void)removeSingleItemFromListByPhoneCode:(id)listByPhoneCode;
-(void)clearFriRecommend;
-(int)getUnreadFriRecommended;
-(BOOL)isReadFriRecommend:(id)recommend;
-(void)setContactRecommendRead;
-(void)setFriRecommendRead;
-(id)getFriRecommendList;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)reload;
-(void)reset;
@end

@protocol SecretFilePreviewDelegate <NSObject>
-(void)ActionOnTimeChanged:(int)changed dataSource:(id)source;
-(void)ActionOnSecretFilePreviewViewTempClosed;
-(void)ActionOnSecretFilePreviewViewClosed:(id)closed values:(id)values;
@end

@protocol QQCameraPickerDelegate <NSObject>
@optional
-(void)cameraPickerControllerDidCancel:(id)cameraPickerController;
-(void)cameraPickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)cameraPickerControllerDidBeginCaptureingImage:(id)cameraPickerController;
@end

@protocol SecretFilePreviewViewControllerDelegate
@optional
-(void)imagePreviewControllerDidCancel:(id)imagePreviewController;
-(void)imagePreviewController:(id)controller didFinishPickingWithDictionary:(id)dictionary;
@end

@protocol CameraFlashActionDelegate <NSObject>
-(void)ActionOpenedFash;
-(void)ActionClosedFlash;
-(void)ActionAutoFlash;
@end

@protocol IC2CDBService_MultiTable <NSObject>
-(id)getLastMessageWithUin:(id)uin isSend:(BOOL)send;
-(BOOL)updatePttSentTime:(double)time withContent:(id)content uin:(id)uin;
-(id)getC2CMessageListFromNewTable:(id)newTable msgTime:(int)time msgID:(int)anId count:(int)count;
-(id)getC2CMessageListAsc:(id)asc msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count;
-(int)asyncGetC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable callback:(id)callback;
-(id)getC2CMessage:(id)message startTime:(int)time endTime:(int)time3;
-(id)getC2CMessage:(id)message startTime:(int)time startID:(int)anId endTime:(int)time4 endID:(int)anId5;
-(id)getC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count;
-(BOOL)updateMessages:(id)messages withTime:(double)time ofUin:(id)uin;
-(int)asyncUpdateWithSendResultMoedls:(id)sendResultMoedls userdata:(id)userdata callback:(id)callback;
-(id)getC2CMessage:(id)message readTime:(int)time count:(int)count;
-(id)getC2CMessage:(id)message readTime:(int)time faultTime:(int)time3 count:(int)count;
-(BOOL)deleteAccostMsgsWithUin:(id)uin;
-(id)failedMessagesAfterTime:(double)time ofUin:(id)uin;
-(BOOL)batchInsertReceivedMessages:(id)messages;
-(BOOL)batchInsertSendMessages:(id)messages;
-(BOOL)insertSendMessage:(id)message;
-(double)maxValidMessageTimeOfUin:(id)uin;
-(double)maxMessageTimeOfUin:(id)uin;
-(BOOL)deleteMessage:(id)message;
-(BOOL)removeMessage:(id)message;
-(void)clearAllMessage;
-(void)messageFlagForRecent:(id)recent;
-(void)updateC2CRichMsgState:(int)state msgTime:(int)time state:(int)state3 uin:(id)uin;
-(void)SetC2CMsgSendStateWithMsgID:(id)msgID state:(int)state;
-(id)GetC2CMsgWithTargetUin:(id)targetUin WithType:(int)type beforeOrEqualTime:(long long)time limitCount:(unsigned)count;
-(void)updatePttPlaceholder:(int)placeholder uin:(id)uin;
-(void)updatePlaceholderFileMsg:(int)msg content:(id)content uin:(id)uin;
-(void)updateSendGroupTmpPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)updateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)transferOnlineFileToOffline:(int)offline newContent:(id)content fromUin:(id)uin msgTime:(int)time fileId:(unsigned)anId;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId time:(int)time;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId;
-(void)updateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state;
-(void)updateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3;
-(void)deleteQQMessageWithUin:(id)uin FromTime:(int)time toTime:(int)time3;
-(void)deleteMsgWithUin:(id)uin msgID:(int)anId;
-(void)updateSystemMsg:(id)msg handled:(int)handled;
-(void)updataMsg:(long long)msg msgTime:(int)time withAppShareID:(int)appShareID;
-(BOOL)getPTTPICFileFromDB:(id)db len:(int)len type:(int)type uin:(id)uin;
-(id)getLatestSayHelloMessage;
-(void)removeAllAccostMessages;
-(id)getAccostMessages:(int)messages;
-(void)upOffLineFileMsg:(id)msg time:(long long)time forRead:(int)read;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forContent:(id)content;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forRead:(int)read;
-(void)upOfflineFileMsg:(id)msg time:(int)time forRead:(int)read;
-(void)upOffLineFileMsg:(id)msg msgId:(int)anId forRead:(int)read;
-(void)UpdateVoiceMsgUUid:(int)uid UUid:(id)uid2 uin:(id)uin;
-(id)GetVoiceModelOffLineList:(id)list msgTime:(long long)time;
-(id)GetVoiceModelList:(id)list msgId:(id)anId;
-(void)upDatePttMsg:(id)msg;
-(void)setPttMsg:(id)msg withStatus:(int)status uin:(id)uin;
-(void)setQQReadStateWithUUid:(id)uuid uin:(id)uin;
-(void)setQQFailStateWithUUid:(id)uuid uin:(id)uin;
-(int)GetC2CMessageCount:(id)count;
-(void)deleteMsgWithContent:(id)content forUin:(id)uin;
-(void)deleteMsgsWithUin:(id)uin;
-(id)QQMessageWithUin:(id)uin timeStamp:(int)stamp;
-(id)QQMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page;
-(int)getRoamMsgKeyTime:(id)time inOut:(int)anOut msgTime:(unsigned)time3;
-(void)updateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time;
-(id)QQUnRoamMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size;
-(id)QQRomaMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size;
-(id)QQMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)QQMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3;
-(id)QQFriendMessage:(id)message MsgID:(int)anId msgCount:(int)count;
-(id)systemMessages:(unsigned)messages;
-(void)updateMessageUuid:(id)uuid;
-(void)updateQQMessagefromUIN:(long long)uin toUIN:(long long)uin2;
-(id)getSecretfileModelWithContent:(id)content toUin:(id)uin content:(id)content3;
-(id)getSecretfileModelWithKey:(id)key toUin:(id)uin key:(id)key3;
-(void)updateSecretMessage:(id)message toUin:(id)uin secretContent:(id)content secretReadtime:(unsigned long long)readtime captureCount:(int)count toStatus:(int)status fromStatus:(int)status7;
-(void)updateSecretfileKeyByContent:(id)content content:(id)content2 uin:(id)uin;
-(void)updateSecretfiletostatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)updateSecretfilefromstatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)updateSecretfilefromstatusByContent:(id)content fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(id)QQSecretMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page;
-(void)insertHistoryQQMessage:(id)message;
-(void)messageFlagVisiable:(long long)visiable visiable:(unsigned)visiable2 uin:(id)uin;
-(void)upVideMsg:(double)msg read:(int)read content:(id)content uin:(id)uin;
-(void)setNoOperForUin:(id)uin;
-(void)setReadForUin:(id)uin;
-(id)dbServiceWithUin:(id)uin;
@end

@protocol IC2CMultiTableDB <IC2CDBService_MultiTable>
-(int)asyncGetC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable callback:(id)callback;
-(id)getC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable;
-(int)updateMessageTime:(long long)time messageSeq:(int)seq msgRandom:(int)random withMsgId:(int)msgId userdata:(id)userdata callback:(id)callback;
-(int)asyncGetMessageWithSeq:(int)seq msgRandom:(int)random userdata:(id)userdata callback:(id)callback;
-(void)updateMessageTime:(long long)time messageSeq:(int)seq msgRandom:(int)random withMsgId:(int)msgId;
-(id)messageWithSeq:(int)seq msgRandom:(int)random;
@end

@protocol QQLoginViewDelgate <NSObject>
-(void)loginViewShouldDismiss:(id)loginView;
@end

@protocol AcountEditCellIDDelegate <NSObject>
-(void)didAccountUinEdited;
@optional
-(void)showAccountsEdit;
-(void)didAccountEditUinEnded:(id)ended;
-(void)didAccountEditUinBegin:(float)begin;
@end

@protocol AccountEditCellPWDelegate <NSObject>
-(void)onAccountPasswordShouldReturn;
-(void)onAccountPasswordCleared;
-(void)onAccountPasswordEditedBegin:(float)begin;
-(void)onAccountPasswordEdited;
@end

@protocol QQFaceTabItemDelegate <NSObject>
-(void)didSelectedFaceTabItem:(id)item;
@end

@protocol QQAccountMenuDelegate
@optional
-(void)changeUser:(int)user;
-(void)clearAccount:(id)account;
-(void)recoverAccountUI;
@end

@protocol WupTransportationProxyDelegate <NSObject>
@optional
-(BOOL)handleWupSendResult:(int)result recvWupStruct:(CIMEngineMsgStruct*)aStruct userInfo:(id)info;
@end

@protocol NearbyGroupListStyleViewDelegate <NSObject>
-(void)onNearbyGroupListStyleViewClick:(id)click;
@end

@protocol QQChatAvatarSelectViewDetegate <NSObject>
@optional
-(BOOL)QQChatAvatarSelectView:(id)view didSelectCell:(id)cell;
@end

@protocol QQChatImageMetaInfoObserver <NSObject>
@optional
-(void)QQChatImageMetaInfo:(id)info downloadWithUrl:(id)url result:(BOOL)result;
@end

@protocol QQFaceStoreOutdateViewDelegate <NSObject>
-(void)onCancelDownload:(id)download;
-(void)onDownload:(id)download;
@end

@protocol QQThemePreviewViewDelegate <NSObject>
-(void)QQThemePreviewViewDidClicked:(id)qqthemePreviewView;
@end

@protocol IRecentMsgDBService <NSObject>
-(void)messageFlagForRecent:(id)recent;
-(int)asyncUpdateRecentMsgWithSendResultModels:(id)sendResultModels userdata:(id)userdata callback:(id)callback;
-(void)deleteMsgsWithUin:(id)uin;
-(void)setReadForUin:(id)uin;
-(void)InsertRecentC2CMsg:(id)msg;
-(id)loadRecentMessage;
@end

@protocol ICoreMotionObserver <NSObject>
-(void)notifyAccelermoterUpdated:(id)updated;
@end

@protocol QQThemeDownloadTaskDelegate <NSObject>
-(void)QQThemeDownloadTaskFailed:(id)failed;
-(void)QQThemeDownloadTaskDidFinished:(id)qqthemeDownloadTask;
@end

@protocol NSMutableCopying
-(id)mutableCopyWithZone:(NSZone*)zone;
@end

@protocol NSFastEnumeration
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
@end

@protocol OnlineFileDelegate <NSObject>
@optional
-(void)cloudReceive:(int)receive WithSeq:(int)seq;
-(void)ignore:(id)ignore;
@end

@protocol ICoreMotionService <NSObject>
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)stopAccelerometerUpdates;
-(void)startAccelerometerUpdates;
@end

@protocol QQXMLRichMessageCellViewDelegate <NSObject>
-(void)QQXMLRichMessageCellViewDidSelectUrl:(id)qqxmlrichMessageCellView;
@end

@protocol FSImageCropControllerDelegate <NSObject>
-(void)imageCropControllerDidCancel:(id)imageCropController;
-(void)imageCropController:(id)controller didFinishingEditingWithImage:(id)image asset:(id)asset;
@end

@protocol WMCWatermarkViewDelegate <NSObject>
@optional
-(void)waterMark:(id)mark tapAtLabel:(id)label;
@end

@protocol QPageViewDelegate <NSObject>
-(id)pageView:(id)view pageAtIndex:(int)index;
-(unsigned)numberOfPagesInPageView:(id)pageView;
@optional
-(CGRect)pageView:(id)view frameOfPageControl:(id)pageControl;
-(CGRect)pageView:(id)view frameOfPageAtIndex:(int)index;
-(void)pageViewDidScroll:(id)pageView;
-(void)pageView:(id)view currentPageIndexDidChange:(int)currentPageIndex;
-(void)pageView:(id)view willRecyclePage:(id)page atIndex:(int)index;
@end

@protocol QPageFitViewDelegate <NSObject>
-(id)pageView:(id)view pageAtIndex:(int)index;
-(unsigned)numberOfPagesInPageView:(id)pageView;
@optional
-(int)pageView:(id)view pageControlOffsetByPageIndex:(int)index;
-(int)pageView:(id)view pageIndexByPageControlOffset:(int)offset;
-(int)pageView:(id)view numberOfPagesWithPageIndex:(int)pageIndex;
-(CGRect)pageView:(id)view frameOfPageControl:(id)pageControl;
-(void)pageView:(id)view didEndDisplayingPage:(id)page atIndex:(int)index;
-(void)pageView:(id)view willDisplayPage:(id)page atIndex:(int)index;
-(CGRect)pageView:(id)view frameOfPageAtIndex:(int)index;
-(void)pageView:(id)view currentPageIndexDidChange:(int)currentPageIndex;
-(void)pageView:(id)view willRecyclePage:(id)page atIndex:(int)index;
-(void)pageViewDidEndDecelerate:(id)pageView;
-(void)pageViewDidEndDragging:(id)pageView willDecelerate:(BOOL)decelerate;
-(void)pageViewDidScroll:(id)pageView;
@end

@protocol FSVideoViewDelegate <NSObject>
-(void)videoView:(id)view failedToTakeImage:(id)takeImage didStart:(BOOL)start;
-(void)videoView:(id)view didFinishSnapshot:(id)snapshot;
-(void)videoViewWillSnapshot:(id)videoView;
-(void)videoView:(id)view didFinishAnimation:(BOOL)animation;
-(void)videoView:(id)view didFinishProcessingImage:(id)image originImage:(id)image3;
@optional
-(void)videoView:(id)view didFinishScratchRawImage:(id)image error:(id)error interfaceOrientation:(int)orientation mirrored:(BOOL)mirrored;
-(void)videoView:(id)view exifInfomation:(id)infomation error:(id)error;
@end

@protocol QRotateViewDelegate <NSObject>
-(BOOL)rotateView:(id)view canRotateToOrientation:(int)orientation;
@optional
-(void)rotateView:(id)view layoutSubviewWithOri:(int)ori;
-(void)rotateView:(id)view rotateToNewOrientation:(int)newOrientation;
-(void)rotateView:(id)view rotateToNewOrientation:(int)newOrientation oldOrientation:(int)orientation;
@end

@protocol WMCReceiveDataDelagate <NSObject>
@optional
-(void)reloadVisibleWatermarkData;
-(void)didGetData:(BOOL)data succ:(BOOL)succ error:(id)error;
@end

@protocol WMCTextFieldInputDelegate <NSObject>
-(void)uiview:(id)uiview onInputChange:(id)change keyName:(id)name finished:(BOOL)finished;
@end

@protocol PassValueDelegate
-(void)passValue:(id)value;
@end

@protocol HPGrowingTextViewDelegate
@optional
-(BOOL)growingTextViewShouldReturn:(id)growingTextView;
-(void)growingTextViewDidChangeSelection:(id)growingTextView;
-(void)growingTextView:(id)view didChangeHeight:(float)height;
-(void)growingTextView:(id)view willChangeHeight:(float)height;
-(void)growingTextViewDidChange:(id)growingTextView;
-(BOOL)growingTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)growingTextViewDidEndEditing:(id)growingTextView;
-(void)growingTextViewDidBeginEditing:(id)growingTextView;
-(BOOL)growingTextViewShouldEndEditing:(id)growingTextView;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
@end

@protocol WMCGridViewDelegate <NSObject>
-(void)selectIndexInGridView:(id)gridView index:(int)index;
-(id)gridView:(id)view modelForRow:(int)row column:(int)column;
-(id)gridView:(id)view textForRow:(int)row column:(int)column;
-(id)gridView:(id)view imageForRow:(int)row column:(int)column;
-(float)columnWidthOfGridView:(id)gridView;
-(float)rowHeightOfGridView:(id)gridView;
-(int)selectedIndexOfGridView:(id)gridView;
-(int)numberOfItemsInGridView:(id)gridView;
-(int)numberOfColumnsOfGridView:(id)gridView;
-(int)numberOfRowsOfGridView:(id)gridView;
@end

@protocol AVCaptureVideoDataOutputSampleBufferDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didDropSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
@end

@protocol WMCGetLocationDelegate <NSObject>
@optional
-(void)startUpdateLocation:(BOOL)location;
@end

@protocol WMCLocationManagerDelagate <NSObject>
@optional
-(void)didFinishGetLocations:(id)locations city:(id)city placeModel:(id)model country:(id)country location:(id)location needFetchWeather:(BOOL)weather error:(id)error;
-(void)didGetGPS:(id)gps oldLocation:(id)location error:(id)error;
@end

@protocol WMCGetPOIDelegate <NSObject>
@optional
-(void)parseLBSResp:(id)resp location:(id)location errorCode:(int)code;
-(void)startUpdatePOI:(id)poi keyword:(id)keyword;
@end

@protocol NSURLConnectionDelegate <NSObject>
@optional
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
@end

@protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>
@optional
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
@end

@protocol QLayoutScrollViewDelegate <NSObject>
@optional
-(void)layoutScrollViewDidLayoutSubviews:(id)layoutScrollView;
-(void)layoutScrollViewWillLayoutSubviews:(id)layoutScrollView;
@end

@protocol QLayoutFitScrollViewDelegate <QLayoutScrollViewDelegate>
-(BOOL)layoutScrollView:(id)view pointInside:(CGPoint)inside withEvent:(id)event;
@end

@protocol WMCRotateViewProtocol <NSObject>
@optional
-(void)orientationDidChangeFromOldOrientation:(int)orientation toOrientation:(int)orientation2;
@end

@protocol JLContentViewCellProtocol <NSObject>
-(void)contentViewCellChooseStateDidChanged:(BOOL)contentViewCellChooseState animated:(BOOL)animated;
-(void)contentViewCellChooseStateWillChange:(BOOL)contentViewCellChooseState animated:(BOOL)animated;
@end

@protocol JLSelectListCell <NSObject>
+(float)heightForCellWithOption:(int)option;
+(id)reuseIdentifier;
@end

@protocol BaseURLConnectionDelegate <NSObject>
-(void)didConnectionFailed:(id)failed;
-(void)didConnectionFinished:(int)finished;
@end

@protocol MQZImagePickerDelegate <NSObject>
-(void)didMQZImagePicker:(id)picker selectedImages:(id)images;
@optional
-(void)willCancelMQZImagePicker:(id)picker;
@end

@protocol MQZoneCreateAlbumDelegate <NSObject>
@optional
-(int)onCreateAlbumFailed:(int)failed msg:(id)msg;
-(int)onCreateAlbumSucceeded:(id)succeeded;
@end

@protocol IGADrawItemUIEventDelegate <NSObject>
-(void)handleDrawItemUIEvent:(id)event;
@end

@protocol MQZTipViewPoolDelegate <NSObject>
@optional
-(void)MQZTipViewPoolCancel;
-(void)MQZTipViewPoolHidden;
@end

@protocol MQZoneActiveFeedCellDelegate <NSObject>
@optional
-(void)clickLikeButton:(id)button;
-(void)clickCommentButton:(id)button;
@end

@protocol ICoverSettingDelegate <NSObject>
-(void)updateCoverUrl:(id)url;
@end

@protocol GAInputBarDelegate <NSObject>
-(BOOL)inputBar:(id)bar sendAction:(id)action;
@optional
-(void)inputBarRecievingMaxChars:(id)chars;
-(void)inputBar:(id)bar changeOffset:(float)offset changeHeight:(float)height;
-(void)inputBarDidDeactive:(id)inputBar;
-(void)inputBarBeingDeactive:(id)deactive willChangeOffset:(float)offset changeHeight:(float)height;
-(void)inputBarDidActive:(id)inputBar;
-(void)inputBarBeingActive:(id)active willChangeOffset:(float)offset changeHeight:(float)height;
@end

@protocol MQZoneTableFootLoadingViewDelegate <NSObject>
-(void)tableFootLoadingViewDidTriggerLoading:(id)tableFootLoadingView;
@end

@protocol MQzonePopMenuViewDelegate <NSObject>
-(void)MQzonePopMenuView:(id)view command:(id)command index:(int)index;
@end

@protocol MQZoneActiveFeedHeaderDelegate <NSObject>
@optional
-(void)clickHeaderMoodEditButton:(id)button;
-(void)clickFaceImgView;
@end

@protocol MQZonePassiveFeedCellDelegate <NSObject>
@optional
-(void)clickCommentButton:(id)button;
@end

@protocol IGADrawASynImgItemDelegate <NSObject>
-(void)notifyNeedUpdateScreen:(CGRect)screen;
@optional
-(void)notifyNeedLayout:(id)layout;
@end

@protocol MQZoneScrollPhotoViewDelegate <NSObject>
@optional
-(void)onTouchPhoto:(int)photo photo:(id)photo2;
-(void)onSwitchPhoto:(int)photo photo:(id)photo2;
@end

@protocol MQZoneDetailCellDelegate <NSObject>
@optional
-(void)onTouchPhoto:(int)photo photo:(id)photo2 cell:(id)cell;
-(void)onSwitchPhoto:(int)photo photo:(id)photo2 cell:(id)cell;
-(void)onBtnOpCmtClicked:(id)clicked;
-(void)onBtnOpLikeClicked:(id)clicked;
-(void)onBtnReplyClicked:(id)clicked;
@end

@protocol MQZoneDetailBarViewDelegate <NSObject>
@optional
-(void)onBarShow:(BOOL)show;
-(void)onMoreButtonClicked:(id)clicked;
-(void)onShareButtonClicked:(id)clicked;
-(void)onCommentButtonClicked:(id)clicked;
-(void)onLikeButtonClicked:(id)clicked;
@end

@protocol MQZonePhotoListCellDelegate <NSObject>
-(void)clickOnCell:(id)cell buttonIndex:(int)index;
@end

@protocol IGACanvas <NSObject>
-(void)updateCanvas:(id)canvas;
@optional
-(void)handleImageFailed:(id)failed error:(int)error desc:(id)desc;
-(void)handleImageProgress:(id)progress finished:(int)finished total:(int)total;
-(id)getRoundInfo;
-(id)doClip:(id)clip;
@end

@protocol GAGrowingTextViewDelegate <NSObject>
@optional
-(BOOL)growingTextViewShouldReturn:(id)growingTextView;
-(void)growingTextViewDidChangeSelection:(id)growingTextView;
-(void)growingTextView:(id)view didChangeHeight:(float)height;
-(void)growingTextView:(id)view willChangeHeight:(float)height;
-(void)growingTextViewDidChange:(id)growingTextView;
-(BOOL)growingTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)growingTextViewDidEndEditing:(id)growingTextView;
-(void)growingTextViewDidBeginEditing:(id)growingTextView;
-(BOOL)growingTextViewShouldEndEditing:(id)growingTextView;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
@end

@protocol MQZoneSelectFriendViewDelegate <NSObject>
-(void)onSelectionCompeleted:(id)compeleted nicks:(id)nicks;
@end

@protocol MQZoneMoodEditInputCellDelegate <NSObject>
-(void)inputCellCheckTextState:(id)state text:(id)text;
-(void)inputCellBecomeActive:(id)active;
-(void)inputCellFinishEdit:(id)edit text:(id)text;
@end

@protocol MQZoneMoodEditPhotoCellDelegate <NSObject>
-(void)photoCellCheckPhotoState:(id)state photoList:(id)list;
-(void)photoCellChangeHeight:(id)height heightOffset:(float)offset;
-(void)photoCellBecomeActive:(id)active;
@end

@protocol MQZoneMoodEditLBSCellDelegate <NSObject>
-(void)LBSCellBecomeActive:(id)active;
@end

@protocol MQZonePhotoReviewPanelDelegate <UIScrollViewDelegate>
-(void)photoClick:(unsigned)click thumbRects:(id)rects visibleRects:(id)rects3;
-(void)panel:(id)panel willChangeHeight:(float)height;
-(id)panel:(id)panel orignalImageForIndex:(unsigned)index;
-(id)panel:(id)panel imageForIndex:(unsigned)index;
-(unsigned)numberOfCells;
@end

@protocol MQzoneAlbumPickerDelegate <NSObject>
-(void)didSelectAlbum:(id)album;
@end

@protocol MQZonePhotoDescriptionDelegate <NSObject>
-(void)onDelete:(unsigned)aDelete;
@end

@protocol MQZonePhotoViewDelegate <NSObject>
@optional
-(void)onTouchEvent:(id)event;
@end

@protocol AVAudioPlayerDelegate <NSObject>
@optional
-(void)audioPlayerEndInterruption:(id)interruption;
-(void)audioPlayerEndInterruption:(id)interruption withFlags:(unsigned)flags;
-(void)audioPlayerEndInterruption:(id)interruption withOptions:(unsigned)options;
-(void)audioPlayerBeginInterruption:(id)interruption;
-(void)audioPlayerDecodeErrorDidOccur:(id)audioPlayerDecodeError error:(id)error;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
@end

@protocol PlayAudioDelegate <NSObject>
-(void)playAudioCallBack;
@end

@protocol MQZAQLevelMeterDelegate <NSObject>
-(void)MQZAQLevelMeterGetLevel:(float)level;
@end

@protocol MQZTQRecorderManagerDelegate <NSObject>
@optional
-(void)MQZTQRecorderManagerSwitchToHeadPhoneSession;
-(void)MQZTQRecorderManagerGetLevel:(float)level;
@end

@protocol QZoneFeedDetailManagerDelegate <NSObject>
-(void)didUpdateFeedDetailCommentFailure:(id)failure error:(id)error;
-(void)didUpdateFeedDetailFailure:(id)failure error:(id)error;
-(void)didUpdateFeedDetailLikeSucceed:(id)succeed;
-(void)didUpdateFeedDetailCommentsSucceed:(id)succeed newCommentsCount:(int)count;
-(void)didUpdateFeedDetailSucceed:(id)succeed newCommentsCount:(int)count;
@end

@protocol IAccountChangedObsever <NSObject>
-(void)onAccountLogout;
-(void)onAccountLogin;
@end

@protocol QZoneNetWorkDelegate
-(void)didRequestCancel:(id)cancel;
-(void)didRequestError:(id)error withError:(int)error2;
-(void)didRequestFinish:(id)finish withData:(id)data;
@end

@protocol SBJsonParser
-(id)objectWithString:(id)string;
@end

@protocol MQZoneLBSPOIViewControllerDelegate <NSObject>
-(void)LBSPOIViewController:(id)controller selectedLBSPoiInfo:(id)info;
-(void)LBSPOIViewController:(id)controller customLBSLocationString:(id)string;
-(void)LBSPOIViewController:(id)controller selectedLBSPositon:(id)positon;
@end

@protocol QZUploadDelegate <NSObject>
@optional
-(void)qzUploadReady:(id)ready;
-(void)qzUploadFinish:(id)finish;
-(void)qzUploadBegin:(id)begin;
-(void)qzUploadIndex:(int)index fail:(id)fail;
-(void)qzUploadIndex:(int)index sucess:(id)sucess;
-(void)qzUploadIndex:(int)index progress:(float)progress;
-(void)qzUpload:(id)upload fail:(id)fail;
-(void)qzUpload:(id)upload sucess:(id)sucess;
-(void)qzUpload:(id)upload recv:(long long)recv total:(long long)total;
-(void)qzUpload:(id)upload progress:(float)progress;
@end

@protocol QZLbsEngineDelegate <NSObject>
@optional
-(void)getCoordinate:(BOOL)coordinate coordinate:(id)coordinate2;
-(void)newPOIListNotify:(BOOL)notify batch:(id)batch;
-(void)newCurrentLocationNotify:(BOOL)notify position:(id)position;
-(void)newStartLocateNotify:(BOOL)notify;
@end

@protocol MQZTipViewDelegate <NSObject>
-(void)MQZTipViewDidCancel;
@end

@protocol IGAImageStatistic <NSObject>
-(void)onImageDownloadWithUrl:(id)url errorCode:(int)code errorDesc:(id)desc downloaded:(int)downloaded totalSize:(int)size;
-(void)onImageDownloadBegin:(id)begin;
@end

@protocol MQZPhotoBrowserViewDelegate <NSObject>
-(void)didScrollToPage:(int)page oldPage:(int)page2;
-(void)longPressDetected;
-(void)singleTapDetected;
-(id)imageAtIndex:(int)index;
-(int)numberOfPages;
@end

@protocol MQZPhotoDelegate <NSObject>
-(void)notifyAsynLoadImageFail:(id)fail;
-(void)notifyAsynLoadImageSuccess:(id)success;
-(void)notifyDownloadThumbFail:(id)fail;
-(void)notifyDownloadThumbSuccess:(id)success;
-(void)notifyDownloadFail:(id)fail;
-(void)notifyDownloadSuccess:(id)success;
-(void)notifyDownloadProgress:(id)progress;
@end

@protocol MQZoneLandscapeInputBoardDelegate <NSObject>
-(void)inputDone:(id)done text:(id)text;
@end

@protocol MQZImageViewDelegate <NSObject>
@optional
-(void)longPressDetected:(id)detected;
-(void)singleTapDetected:(id)detected;
@end

@protocol NSStreamDelegate <NSObject>
@optional
-(void)stream:(id)stream handleEvent:(unsigned)event;
@end

@protocol QZUploadHttpDelegate <NSObject>
-(void)httpUploadFail:(id)fail;
-(void)httpUploadSend:(int)send total:(int)total;
-(void)httpUploadRecvData:(id)data;
@end

@protocol MSFNetDelegate <NSObject>
@optional
-(void)NotifyDisconnect:(id)disconnect;
-(void)Notify:(id)notify SocketDownFlow:(int)flow;
-(void)Notify:(id)notify SocketUpFlow:(int)flow;
-(void)Notify:(id)notify SendResultState:(int)state length:(int)length;
-(void)Notify:(id)notify ApnState:(int)state apn:(int)apn;
-(void)NotifyWriteDone:(id)done;
-(void)Notify:(id)notify Data:(id)data;
-(void)Notify:(id)notify oldState:(int)state newState:(int)state3 errCode:(int)code;
@end

@protocol IGACavasCollection <NSObject>
-(void)removeCanvas:(id)canvas;
@optional
-(void)handleProgress:(id)progress finished:(int)finished total:(int)total;
@end

@protocol IGAImagePool <NSObject>
+(id)instance;
-(BOOL)addImageCell:(id)cell;
-(void)removeImageCell:(id)cell;
@end

@protocol IGAImageDelegate <NSObject>
@optional
-(void)imageDownloadFinishedButNoCache:(id)cache image:(id)image;
-(void)imageDownloadFailed:(id)failed error:(int)error desc:(id)desc;
-(void)imageDownloadFinished:(id)finished image:(id)image;
-(void)imageDownloadProgress:(id)progress downloaded:(int)downloaded total:(int)total;
-(void)imageDownloadStart:(id)start;
@end

@protocol QZoneNetworkHTTPDelegate <NSObject>
-(void)didStartRequest:(id)request;
-(void)didProgressRequestDownload:(id)download totalLength:(id)length;
-(void)didFailRequest:(id)request;
-(void)didSuccRequest:(id)request;
@end

@protocol IGAImageCell <NSObject>
@property(retain, nonatomic) id userDataForStatistic;
-(void)cancel;
-(int)totalSize;
-(int)dowloaded;
-(id)url;
@end

@protocol ASICacheDelegate <NSObject>
-(void)clearCachedResponsesForStoragePolicy:(int)storagePolicy;
-(id)pathToStoreCachedResponseDataForRequest:(id)request;
-(id)pathToStoreCachedResponseHeadersForRequest:(id)request;
-(id)pathToCachedResponseHeadersForURL:(id)url;
-(id)pathToCachedResponseDataForURL:(id)url;
-(id)cachedResponseDataForURL:(id)url;
-(id)cachedResponseHeadersForURL:(id)url;
-(void)storeResponseForRequest:(id)request maxAge:(double)age;
-(BOOL)isCachedDataCurrentForRequest:(id)request;
-(void)removeCachedDataForRequest:(id)request;
-(BOOL)canUseCachedDataForRequest:(id)request;
-(int)defaultCachePolicy;
@end

@protocol ASIProgressDelegate <NSObject>
@optional
-(void)request:(id)request incrementUploadSizeBy:(long long)by;
-(void)request:(id)request incrementDownloadSizeBy:(long long)by;
-(void)request:(id)request didSendBytes:(long long)bytes;
-(void)request:(id)request didReceiveBytes:(long long)bytes;
-(void)request:(id)request didProgressWithDic:(id)dic;
-(void)request:(id)request didProgress:(float)progress;
-(void)setProgress:(float)progress;
@end

@protocol ASIHTTPRequestDelegate <NSObject>
@optional
-(void)proxyAuthenticationNeededForRequest:(id)request;
-(void)authenticationNeededForRequest:(id)request;
-(void)request:(id)request didReceiveData:(id)data;
-(void)requestRedirected:(id)redirected;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request willRedirectToURL:(id)url;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)requestStarted:(id)started;
@end

@protocol IQSContactsEngine <NSObject>
-(BOOL)isUploadingAndUpdatingContacts;
-(void)setNeedRemindBeFoundWithMobilePhoneStr:(id)mobilePhoneStr remind:(BOOL)remind;
-(BOOL)isNeedRemindBeFoundWithMobilePhoneStr:(id)mobilePhoneStr;
-(BOOL)isNeedRemindContactsBindingWithUIN:(long long)uin;
-(void)setContactUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(int)getContactBinderFromWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactLocalPhoneCodesWithPhoneCodes:(id)phoneCodes;
-(id)getContactPhoneLabelsWithPhoneCodes:(id)phoneCodes;
-(long long)getContactUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactMobilePhoneWithUIN:(long long)uin;
-(id)getContactNameWithUIN:(long long)uin;
-(BOOL)updateContactNickName:(id)name withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactNickNameWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactNameWithMobilePhoneStr:(id)mobilePhoneStr;
-(BOOL)isMobilePhoneAtUnbindContacts:(id)unbindContacts;
-(BOOL)isMobilePhoneAtBindContacts:(id)bindContacts;
-(BOOL)isMobilePhoneAtContacts:(id)contacts;
-(id)getMyselfMobilePhoneWithoutCountry;
-(id)getMyselfMobilePhone;
-(void)removeTempUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getCountryAndPhoneCodeStr2WithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getCountryAndPhoneCodeStrWithMobilePhoneStr:(id)mobilePhoneStr;
-(void)setNoCountryPhone:(id)phone withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getNoCountryPhoneWithMobilePhone:(id)mobilePhone;
-(void)setChatUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getMobilePhoneWithChatUIN:(long long)chatUIN;
-(long long)getChatUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getMobilePhoneWithTemporaryUIN:(long long)temporaryUIN;
-(long long)getTemporaryUINWithMobilePhoneStr:(id)mobilePhoneStr makeIfNotExist:(BOOL)exist;
-(void)clearRecommendedContacts;
-(void)saveRecommendedContacts:(id)contacts;
-(int)getUnreadRecommendedContactCount;
-(BOOL)isReadRecommendedContact:(id)contact;
-(void)setRecommendedContactsRead;
-(void)replaceBlackList:(id)list;
-(void)removeMobilePhoneAtBlackList:(id)blackList;
-(void)addMobilePhoneToBlackList:(id)blackList;
-(BOOL)isMobilePhoneAtBlackList:(id)blackList;
-(BOOL)isDisableToChat:(id)chat;
-(BOOL)isInvitedContact:(id)contact;
-(BOOL)setInvitedContact:(id)contact;
-(id)getRecommendedContacts;
-(BOOL)updateRecommendedContacts;
-(BOOL)setToBeRecommended:(BOOL)beRecommended;
-(id)getNeedRemarkQQContacts;
-(id)getUnbindingQQContacts;
-(id)getBindingQQContacts:(BOOL)contacts;
-(id)getBindingQQContacts;
-(BOOL)updateContactsStat;
-(BOOL)requestResendSMSCode;
-(BOOL)verifyBindingSMSCode:(id)code;
-(BOOL)syncContacts;
-(BOOL)sendServerContacts;
-(BOOL)cancelBinding;
-(BOOL)rebindPhoneCode:(id)code countryCode:(id)code2;
-(BOOL)bindPhoneCode:(id)code countryCode:(id)code2;
-(id)getUnbindingPhoneCode;
-(id)getUnbindingCountryCode;
-(BOOL)isUserNeedUploadContacts;
-(BOOL)setUserNeedUploadContacts:(BOOL)contacts;
-(BOOL)isContactsInitilized;
-(BOOL)isContactsMatched;
-(BOOL)isRecommended;
-(id)getBindingPhoneCode;
-(id)getBindingCountryCode;
-(unsigned)getBindingViaOtherChannelsTime;
-(void)setIgnoreViaOtherChannels;
-(BOOL)isIgnoreViaOtherChannels;
-(BOOL)isBindingViaOtherChannels;
-(BOOL)isBinding;
-(BOOL)updateBindingInfo;
-(BOOL)isUserDenyToAccessData;
-(BOOL)isAllowToAccessData;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)reload;
-(void)reset;
@end

@protocol IDiscussGroupEditNameView <NSObject>
-(void)modifyDiscussNameTimeOut:(long long)anOut;
-(void)modifyDiscussNameFail:(long long)fail;
-(void)modifyDiscussNameSuccess:(long long)success;
@end

@protocol IDiscussGroupManageDelegate <NSObject>
-(void)initGroupHeadImage:(long long)image;
-(BOOL)checkChangeHead:(id)head discussGroup:(long long)group;
-(void)handleDeleteMsgInRecent:(long long)recent;
-(void)handleSetDiscussFlagResult:(int)result discussGroupUin:(long long)uin;
-(void)handleChangeDiscussNameResult:(int)result discussGroupUin:(long long)uin;
-(void)handleUpdateDiscussListResult:(int)result;
-(void)handleUpdateDiscussInfoResult:(int)result discussGroupUin:(long long)uin;
-(void)handleQuitDiscussResult:(int)result discussGroupUin:(long long)uin;
-(void)handleAddDiscussMemberResult:(int)result discussGroupUin:(long long)uin seqID:(int)anId;
-(void)handleCreateDiscussResult:(int)result discussGroupUin:(long long)uin seqID:(int)anId;
@end

@protocol IDiscussGroupManageView <NSObject>
-(void)quitDiscussGroupFailed:(long long)failed;
-(void)quitDiscussGroupSucess:(long long)sucess;
-(void)refreshChangeDiscussName;
-(void)refreshDiscussName:(long long)name;
-(void)refreshDiscussMemberList:(long long)list;
@end

@protocol MemUnitViewDelegate <NSObject>
@optional
-(void)didHeadTouch:(id)touch;
@end

@protocol MemHolderOperationDelegate <NSObject>
@optional
-(void)onHolderOperationSuccessed:(id)successed;
@end

@protocol IDiscussGroupSelectMemView <NSObject>
-(void)addDiscussMemberFailed:(long long)failed;
-(void)addDiscussMemberSuccess:(long long)success;
-(void)creatDiscussGroupFailed;
-(void)creatDiscussGroupSuccess:(long long)success;
@optional
-(BOOL)isCreating;
-(void)actionCreatDiscuss;
@end

@protocol QQGroupViewGroupCellDelegate <NSObject>
@optional
-(BOOL)groupViewCellStartShrinking:(id)shrinking;
-(BOOL)groupViewCellStartExpending:(id)expending;
@end

@protocol DicussGroupHeadDelegate <NSObject>
@optional
-(void)updateGroupHead:(id)head;
@end

@protocol LoadingRMembersStrategyCallback <NSObject>
-(void)onFinishDownloading:(id)downloading members:(id)members;
@end

@protocol QIMAccessibilityProtocol <NSObject>
@property(assign, nonatomic) NSMutableArray* accessibilityElements;
@optional
-(id)convertStringToAccessibilityLabel:(id)accessibilityLabel;
-(void)updateAccessibleElements;
-(BOOL)isAccessibilityElement;
-(int)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(int)index;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
@end

@protocol QIMCandidateDelegate <NSObject, QIMViewDelegate>
@optional
-(void)candidate:(id)candidate selectedItemIndex:(unsigned)index;
@end

@protocol QIMViewDelegate <NSObject>
@optional
-(void)touchesBegan:(id)began point:(CGPoint*)point;
-(void)touchesMoved:(id)moved point:(CGPoint*)point;
-(void)touchesEnded:(id)ended point:(CGPoint*)point;
@end

@protocol QIMHandWriteViewDelegate <NSObject, QIMViewDelegate>
@optional
-(void)beganStroke:(id)stroke;
-(void)processHandWriteTrack:(unsigned short*)track trackCount:(unsigned)count;
-(void)commitFirstCandItem;
-(void)commitCandItem;
@end

@protocol QIMScrollViewControllerDelegate <UIScrollViewDelegate>
@optional
-(void)scrollViewControllerDidLoadView:(id)scrollViewController page:(unsigned)page;
@end

@protocol QIMSymbolDelegate <NSObject, QIMViewDelegate>
@optional
-(void)symbolItemDidSelected:(id)symbolItem selectedItem:(id)item;
-(void)symbolBarDidSwitchCate:(id)symbolBar switchCateWithIndex:(unsigned char)index;
@end

@protocol QIMKeyboardLayoutProtocol <NSObject>
@optional
-(id)activationIndicatorView;
-(BOOL)shouldShowIndicator;
-(void)showKeyboardType:(int)type withAppearance:(int)appearance;
-(void)setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)displayName withType:(int)type;
-(void)deactivateActiveKeys;
-(void)didClearInput;
@end

@protocol QIMCloudDataMgrProtocol <NSObject, QIMCloudDataMgrDelegate>
@optional
@property(assign, nonatomic) id<QIMCloudDataMgrDelegate> cloudDataDelegate;
-(void)loadCloudDataWithType:(int)type;
-(int)checkUpadateForCloudData;
@end

@protocol QIMCloudDataMgrDelegate <NSObject>
@optional
-(void)cloudDataMgrError:(int)error;
-(BOOL)cloudDataMgrWillConnectionNetwork;
-(void)cloudDataMgrWillBeganLoadData;
-(void)cloudDataMgrLoadData:(float)data;
-(void)cloudDataMgrDidEndLoadData;
@end

@protocol QIMTextInputPreferencesProtocol <NSObject>
@optional
@property(readonly, assign, nonatomic) NSArray* fuzzys;
@property(readonly, assign, nonatomic) NSArray* keyboards;
@end

@protocol QIMDictManagerProtocol <NSObject, QIMDictManagerDelegate>
@property(assign, nonatomic) id<QIMDictManagerDelegate> dictDelegate;
@optional
-(void)importAddressbook;
-(void)asynchronousImportAddressbook;
-(BOOL)clearAddressbook;
-(void)importCategoryDict:(id)dict dictName:(id)name type:(unsigned)type;
-(void)categoryDictAppend:(id)append;
-(void)importUserDict;
-(void)exportUserDict;
-(BOOL)clearUserDict;
-(void)displayUserDict:(unsigned)dict;
-(void)finish;
-(void)cancelOperation;
@end

@protocol QIMURLConnectionDelegate <NSObject, NSURLConnectionDataDelegate>
@end

@protocol MSFTcpStateDelegate <NSObject>
-(void)onConnect:(int)connect withState:(int)state andExParam:(void*)param;
@end

@protocol Wl_SBJsonStreamParserAdapterDelegate
-(void)parser:(id)parser foundObject:(id)object;
-(void)parser:(id)parser foundArray:(id)array;
@end

@protocol Wl_SBJsonStreamParserDelegate
-(void)parser:(id)parser foundString:(id)string;
-(void)parser:(id)parser foundNumber:(id)number;
-(void)parserFoundNull:(id)null;
-(void)parser:(id)parser foundBoolean:(BOOL)boolean;
-(void)parserFoundArrayEnd:(id)end;
-(void)parserFoundArrayStart:(id)start;
-(void)parserFoundObjectEnd:(id)end;
-(void)parser:(id)parser foundObjectKey:(id)key;
-(void)parserFoundObjectStart:(id)start;
@end

@protocol Wl_SBJsonStreamWriterDelegate
-(void)writer:(id)writer appendBytes:(const void*)bytes length:(unsigned)length;
@end

@protocol WloginProtocolBuff <NSObject>
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@protocol SocketNetworkAdapterProtocol <NSObject>
-(void)onSocket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)onSocketDidDisconnect:(id)onSocket;
-(void)onSocket:(id)socket didDisconnectWithError:(id)error;
-(void)onSocket:(id)socket didReadData:(id)data withTag:(long)tag;
@end

@protocol WloginSelfCallBackProcotol <NSObject>
-(void)protocolInputSmsCode:(unsigned)code andTimeout:(unsigned)timeout andPhoneNo:(id)no;
-(void)protocolShowPicture:(id)picture;
-(void)protocolLoginError:(int)error withErrInfo:(id)errInfo;
-(void)protocolLoginFailed:(int)failed withErrInfo:(id)errInfo;
-(void)protocolLoginSuccessSig:(id)sig andBaseInfo:(id)info andPasswdSig:(id)sig3;
-(void)caculateChallenge;
@end

@protocol ProcessCallback <NSObject>
-(void)networkInfo:(XXStruct_VowasB*)info;
@end

@protocol WloginCallbackProtocol <NSObject>
-(void)inputSmsCodeError:(id)error;
-(void)inputSmsCode:(unsigned)code andTimeout:(unsigned)timeout andPhoneNo:(id)no;
-(void)showPicture:(id)picture;
-(void)loginFailed:(int)failed withErrInfo:(id)errInfo;
-(void)loginFailed:(int)failed withMsg:(id)msg;
-(void)loginSuccessSig:(id)sig andBaseInfo:(id)info andPasswdSig:(id)sig3;
@end

@protocol WloginTranCallbackProtocol_v2 <NSObject>
-(void)tranFailed_v2:(id)a2 result:(int)result withMsg:(id)msg;
-(void)tranSuccess_v2:(id)a2 withData:(id)data;
@end

@protocol WloginTranCallbackProtocol <NSObject>
-(void)tranFailed:(int)failed withMsg:(id)msg;
-(void)tranSuccessWithData:(id)data;
@end

@protocol MSFConnectProtocol <NSObject>
-(void)msfconnection:(id)msfconnection didFailWithError:(id)error param:(id)param;
-(void)msfconnection:(id)msfconnection didReceiveData:(id)data param:(id)param;
-(void)msfconnection:(id)msfconnection didConnectToHost:(id)host port:(unsigned short)port param:(id)param;
@end

@protocol ITCQRCodeLayoutDataSource <NSObject>
-(id)qrcodeText;
-(id)tips;
-(id)nickname;
-(id)logoIcon;
-(id)headIcon;
@end

@protocol QRCodeScanDelegate <NSObject>
-(void)scanViewControllerDidCancel:(id)scanViewController;
-(void)scanViewController:(id)controller failWithReason:(id)reason;
-(void)scanViewController:(id)controller didScanResult:(id)result;
@end

@protocol QBAAlertViewDelegate <NSObject>
@optional
-(void)didSimpleAlertView:(id)view buttonClick:(id)click atIndex:(int)index;
-(void)buttonClick:(id)click atIndex:(int)index;
@end

@protocol DecoderDelegate <NSObject>
@optional
-(void)decoder:(id)decoder foundPossibleResultPoint:(CGPoint)point;
-(void)decoder:(id)decoder failedToDecodeImage:(id)decodeImage usingSubset:(id)subset reason:(id)reason;
-(void)decoder:(id)decoder didDecodeImage:(id)image usingSubset:(id)subset withResult:(id)result;
-(void)decoder:(id)decoder willDecodeImage:(id)image usingSubset:(id)subset;
@end

@protocol MQQRCodeReaderDelegate <NSObject>
-(void)qrcodeReadResult:(BOOL)result readStrResult:(id)result2;
@end

@protocol QRCodeDecodeBizDelegate <NSObject>
-(void)onQRCodeDecodeCannotDecode;
-(void)onQRCodeDecodeNetErr;
-(void)onQRCodeDecodeSucceed:(id)succeed;
@end

@protocol TwoDimensionBarcodeManagerDelegate <NSObject>
-(void)HandleData:(id)data RootNav:(id)nav;
-(BOOL)IsFit:(id)fit;
@end

@protocol WloginCallbackProtocol_v2 <NSObject>
-(void)loginFailed_v2:(id)a2 andRst:(int)rst withErrInfo:(id)errInfo;
-(void)loginFailed_v2:(id)a2 andRst:(int)rst withMsg:(id)msg;
-(void)loginSuccessSig_v2:(id)a2 andSig:(id)sig andBaseInfo:(id)info;
-(void)inputSmsCode_v2:(id)a2 andNextTime:(unsigned)time andTimeout:(unsigned)timeout andPhoneNo:(id)no;
-(void)showPicture_v2:(id)a2 andPicData:(id)data;
-(void)inputPassword_v2:(id)a2 andAccount:(id)account;
@end

@protocol SDKBaseURLConnectionDelegate <NSObject>
-(void)didConnectionFailed:(id)failed;
-(void)didConnectionFinished;
@end

@protocol SimpleHeadMgrDelegate <NSObject>
-(void)getHeadDelegate:(id)delegate;
@end

@protocol RequestDelegate <NSObject>
@optional
-(void)RequestSvrErrorCode:(id)code;
-(void)RequestSystemNetError:(id)error;
-(void)RequestFailed:(id)failed;
-(void)GetQQHeadDelegate:(id)delegate headBuf:(id)buf;
-(void)SetAuthorizationDelegate:(id)delegate dicinfo:(id)dicinfo errorMsg:(id)msg;
-(void)GetAuthorizationInfoDelegate:(id)delegate dicinfo:(id)dicinfo errorMsg:(id)msg;
@end

@protocol AuthorizationListViewDelegate <NSObject>
@optional
-(void)AuthorizationListView:(id)view rectChange:(CGRect)change;
@end

@protocol SimpleLoginDelegate <NSObject>
@optional
-(void)needVerifyCode:(id)code;
-(void)inputPassword:(id)password;
-(void)loginFailed:(int)failed withMsg:(id)msg;
-(void)loginSucceed:(id)succeed Uin:(unsigned)uin Nickname:(id)nickname;
@end

@protocol VerifyViewDelegate
-(void)verifyCancelled:(id)cancelled;
-(void)checkVerifyCode:(id)code code:(id)code2;
-(void)refreshVerifyCode:(id)code;
@end

@protocol SSoAcountEditCellIDDelegate <NSObject>
-(void)SSoAcountCellAccountBtnClick:(id)click;
@end

@protocol WloginLogProtocol_v2 <NSObject>
-(void)loginInfo:(id)info;
-(void)log:(const char*)log func:(const char*)func line:(int)line msg:(id)msg;
@end

@protocol ITCHostSignalChannel <NSObject>
@optional
-(BOOL)sendData:(id)data cmd:(id)cmd pSeq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(void)unregisterDispatchDelegate:(id)delegate;
-(BOOL)registerDispatchDelegate:(id)delegate dispatchDelegate:(id)delegate2;
@end

@protocol ITCHostTips <NSObject>
@optional
-(id)QQCleanTips;
-(id)QQLoadingTips:(id)tips;
@end

@protocol ITCHostLog <NSObject>
@optional
-(void)QQTrace:(id)trace inFile:(const char*)file atLine:(unsigned)line;
@end

@protocol QQVideControlBarDelegate <NSObject>
-(void)videoControlBarDismiss;
-(void)videoControlBarShow;
-(void)didCloseSessionAction;
-(void)didSpeakerAction;
-(void)didCameraAction;
-(void)didMuteAction;
-(void)didSwitchAudioVideoAction;
@end

@protocol QQVoiceButtonDelegate <NSObject>
-(void)toggleMuteEventHandle:(id)handle mode:(int)mode;
-(void)toggleModeEventHandle:(id)handle mode:(int)mode;
@end

@protocol QQVideoBarDelegate <NSObject>
-(void)closeEventHandle:(id)handle;
@end

@protocol QQVideoTipsCellDelegate <NSObject>
@optional
-(void)tipsTouchEventHandle:(id)handle;
@end

@protocol QQChatButtonDelegate <NSObject>
-(void)toggleSwitchchatEventHandle:(id)handle;
@end

@protocol AudioRecordAndPlayerDelegate <NSObject>
-(int)DevGetData:(char*)data :(int)arg2;
-(int)DevPutData:(char*)data :(int)arg2;
@end

@protocol VideoCaptureDelegate <NSObject>
-(void)transmitVideoData:(char*)data BufferSize:(unsigned long)size Width:(unsigned long)width HeightY:(unsigned long)y;
@end

@protocol IVideoChatService
-(void)commitClientAction;
-(void)upLoadClientAction:(id)action fromUIN:(id)uin toUIN:(id)uin3;
-(bool)IsVideoChat;
-(void)SetWriterLog:(bool)log;
-(void)didRecievedSharpOfflineMsg:(unsigned long long)msg :(int)arg2 :(char*)arg3 :(int)arg4;
-(void)didRecievedoldVideoMsg:(unsigned long long)msg :(int)arg2 :(char*)arg3 :(int)arg4;
-(int)AcceptVideoChatType:(unsigned long long)type :(int)arg2;
-(int)RequestVideoChatType:(unsigned long long)type :(int)arg2;
-(void)UnitVideoChatService;
-(bool)InitVideoChatService;
@end

@protocol __ARCLiteIndexedSubscripting__
-(void)setObject:(id)object atIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
@end

@protocol __ARCLiteKeyedSubscripting__
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
@end

@interface TenpayPlugin : NSObject {
}
+(unsigned char)startPay:(id)pay orderNo:(id)no uin:(id)uin session:(id)session session_type:(id)type resultTo:(id)to handleFun:(SEL)fun;
+(unsigned char)startWallet:(id)wallet session:(id)session session_type:(id)type uin:(id)uin resultTo:(id)to handleFun:(SEL)fun;
@end

@interface TestViewController : UIViewController {
}
-(void)cancel;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface CurledViewBase : NSObject {
}
+(id)curlShadowPathWithShadowDepth:(float)shadowDepth controlPointXOffset:(float)offset controlPointYOffset:(float)offset3 forView:(id)view;
+(id)rescaleImage:(id)image forView:(id)view;
@end

@interface DottedLineView : UIView {
}
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface NSAnimationHelper : NSObject {
}
+(void)removeTouchView;
+(void)recoverUserOperation;
+(id)addTouchView:(CGPoint)view onDelegate:(id)delegate;
+(id)maskingUserOperation;
+(id)createAnimationObjectWithDuration:(double)duration animationType:(id)type animationSubtype:(id)subtype;
@end

@interface NSImageHelper : NSObject {
}
+(id)imageWithURLString:(id)urlstring;
+(BOOL)isRetinaDevice;
+(id)grayImage:(id)image type:(BOOL)type;
+(id)imageFromView:(id)view;
+(id)image:(id)image fillView:(id)view;
+(id)image:(id)image fillSize:(CGSize)size;
+(id)image:(id)image centerInView:(id)view;
+(id)image:(id)image centerInSize:(CGSize)size;
+(id)image:(id)image fitInView:(id)view;
+(id)image:(id)image fitInSize:(CGSize)size;
+(CGSize)fitSize:(CGSize)size inSize:(CGSize)size2;
+(id)image:(id)image zoomInSize:(CGSize)size;
+(void)removeAllCache;
+(id)imageLoader:(id)loader;
@end

@interface NSSemitransparentButton : NSObject {
}
+(id)createSemiDoneButton:(id)button;
+(id)createMainViewItem:(id)item withTitle:(id)title;
+(id)createSubCell:(id)cell withTitle:(id)title needLine:(BOOL)line subTitle:(id)title4;
+(id)createButton:(CGSize)button withColor:(id)color;
@end

@interface UICheckBox : UIView {
	UIButton* pCheckView_;
	UILabel* pTitleLabel_;
}
-(void)resetSize;
-(void)checked:(BOOL)checked;
-(BOOL)checked;
-(void)setColor:(id)color;
-(void)setFont:(id)font;
-(void)setImage:(id)image forState:(int)state;
-(void)dealloc;
-(void)buttonSelected:(id)selected;
-(id)initWithTitle:(id)title;
@end

@interface UIComboxViewIICell : UITableViewCell {
}
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface UIComboxViewII : UIView <UITableViewDataSource, UITableViewDelegate> {
	UITableView* pTableView_;
@private
	UITextField* _pTextField;
	UIButton* _pButton;
	NSString* _pSelectedValue;
	NSMutableArray* _pCellArray;
}
@property(retain, nonatomic) NSMutableArray* pCellArray;
@property(copy, nonatomic) NSString* pSelectedValue;
@property(retain, nonatomic) UIButton* pButton;
@property(retain, nonatomic) UITextField* pTextField;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)buttonClicked:(id)clicked;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UIGroupStyleView : UIView {
}
-(id)initWithLines:(int)lines;
@end

@interface UILoadingView : UIView {
	UIView* maskingView_;
	UIActivityIndicatorView* myActivityView;
@private
	UILabel* _pTitleLabel;
	UIButton* _pCancelButton;
	UIImageView* _pImageView;
}
@property(retain, nonatomic) UIImageView* pImageView;
@property(retain, nonatomic) UIButton* pCancelButton;
@property(retain, nonatomic) UILabel* pTitleLabel;
-(void)dealloc;
-(void)doCancel:(id)cancel;
-(void)showInView:(id)view;
-(id)initWithTitle:(id)title;
@end

@interface UIPickerSheet : UIActionSheet {
	UIButton* pMaskButton_;
@private
	id<UIPickerViewDelegate> _pUIPickerViewDelegate;
	id<UIPickerViewDataSource> _pUIPickerViewDataSource;
	NSString* _pHolderPlace;
	UIPickerView* _pPickerView;
	BOOL _mIsFirstResponder;
}
@property(assign, nonatomic) BOOL mIsFirstResponder;
@property(retain, nonatomic) UIPickerView* pPickerView;
@property(retain, nonatomic) NSString* pHolderPlace;
@property(assign, nonatomic) id<UIPickerViewDataSource> pUIPickerViewDataSource;
@property(assign, nonatomic) id<UIPickerViewDelegate> pUIPickerViewDelegate;
-(void)dealloc;
-(void)cancel:(id)cancel;
-(void)show;
-(void)setUp;
-(id)init;
@end

@interface UITLLabel : UITLView {
@private
	UILabel* pTextLabel;
}
@property(retain, nonatomic) UILabel* pTextLabel;
-(void)dealloc;
-(void)setUpWithFrame:(CGRect)frame Title:(id)title Text:(id)text;
-(id)initWithFrame:(CGRect)frame Title:(id)title Text:(id)text;
@end

@interface UITLLabelPicker : UITLView {
	UILabel* pHoldPlaseLabel_;
@private
	UILabel* pTextLabel;
	UIPickerSheet* pPickerSheet;
	UIButton* pPopButton;
	NSString* _pHoldPlace;
	UIBottomTextField* _pTextField;
}
@property(copy, nonatomic) NSString* pHoldPlace;
@property(retain, nonatomic) UIButton* pPopButton;
@property(retain, nonatomic) UIPickerSheet* pPickerSheet;
@property(retain, nonatomic) UIBottomTextField* pTextField;
@property(retain, nonatomic) UILabel* pTextLabel;
-(void)dealloc;
-(BOOL)isFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)popView:(id)view;
-(void)setUpWithFrame:(CGRect)frame Title:(id)title Text:(id)text;
-(id)initWithFrame:(CGRect)frame Title:(id)title Text:(id)text;
@end

@interface UIBottomTextField : UITextField {
}
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UITLTenpayCtrl : UITLView <UITextFieldDelegate> {
	UIButton* pUINumberKeyBoardFinishButton_;
@private
	TenpaySecureCtrl* pTextField;
}
@property(retain, nonatomic) TenpaySecureCtrl* pTextField;
-(void)dealloc;
-(void)showTipIcon:(id)icon;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UITLTextField : UITLView <UITextFieldDelegate> {
	UIButton* pUINumberKeyBoardFinishButton_;
	int maxInputLen;
@private
	UITextField* pTextField;
	NSString* pNoFormatText;
}
@property(copy, nonatomic) NSString* pNoFormatText;
@property(retain, nonatomic) UITextField* pTextField;
-(void)dealloc;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)editingNotify:(id)notify;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)SetMaxInputLen:(int)len;
-(void)textFieldDidBeginEditing:(id)textField;
-(void)doneButton:(id)button;
-(id)getRespondserOfController;
-(BOOL)becomeFirstResponder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UITLView : UIView {
@private
	UIView* pBottomLine;
	UILabel* pTitleLabel;
	id<UITLViewDelegate> pTLDelegate;
	int mTitleTextAlignment;
	BOOL _borderHidden;
}
@property(assign, nonatomic) BOOL borderHidden;
@property(assign, nonatomic) int mTitleTextAlignment;
@property(assign, nonatomic) id<UITLViewDelegate> pTLDelegate;
@property(retain, nonatomic) UIView* pBottomLine;
@property(retain, nonatomic) UILabel* pTitleLabel;
-(void)dealloc;
-(id)getRespondserOfController;
-(int)getKeyBoardHeight;
-(int)getContentSpaceWidth;
-(int)getContentStartX;
-(int)getTitleLabelEndX;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame Ttile:(id)ttile;
@end

@interface UITPTextField : UIView {
@private
	TenpaySecureCtrl* pTextField;
}
@property(retain, nonatomic) TenpaySecureCtrl* pTextField;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UIViewDelegate : NSObject {
	CFRunLoopRef currentLoop;
}
-(void)animationFinished:(id)finished;
-(id)initWithRunLoop:(CFRunLoopRef)runLoop;
@end

@interface NSControlHelper : NSObject {
}
+(CGRect)string:(id)string FitRect:(CGRect)rect withFont:(id)font;
+(id)customTextField:(CGRect)field placeHolder:(id)holder textFont:(id)font textColor:(id)color backgroundImage:(id)image;
+(id)customLabelWithFrame:(CGRect)frame text:(id)text textFont:(id)font textColor:(id)color textAlignment:(int)alignment multiLines:(BOOL)lines;
+(id)customButtonWithFrame:(CGRect)frame title:(id)title titleFont:(id)font titleColor:(id)color backgroundImage:(id)image foregroundImage:(id)image6;
@end

@interface UICustomNaviBarViewController : UIHttpViewController {
}
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)doBack:(id)back;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)view;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UIHttpViewController : UIViewController {
	UILoadingView* pLoadingView_;
	UITipInfoView* pTipInfoView;
	NSDictionary* busiDataInfo;
	NSTimer* timerTipInfo;
}
@property(retain, nonatomic) NSDictionary* busiDataInfo;
-(void)messageBox:(id)box buttonText:(id)text;
-(void)messageBox:(id)box title:(id)title;
-(void)messageBox:(id)box;
-(void)showData:(id)data param:(id)param;
-(void)onDataReady:(id)ready DataInfo:(id)info;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)onTipInfoTimer;
-(void)removeTipInfoView;
-(void)showTipInfoViewWithTitle:(id)title icon:(id)icon;
-(void)showTipInfoViewWithTitle:(id)title icon:(id)icon topCenter:(int)center;
-(void)removeLoadingView;
-(void)showLoadingViewWithText:(id)text;
-(void)showLoadingView;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UITransferViewController : UICustomNaviBarViewController {
	UIScrollView* pScrollView_;
}
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)loadHistoryAccepterRecorder:(id)recorder;
-(void)setUpReceiveMoney;
-(void)setUpSendMoney;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface TransferSelectBankViewController : UICustomNaviBarViewController <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _bankTableView;
	NSArray* _bankInfoArray;
@private
	NSArray* bindedBankArray;
	NSIndexPath* lastIndexPath;
	id<SelectBankViewDelegate> delegate;
	NSString* _certType;
	int _nSelectRow;
}
@property(assign, nonatomic) int nSelectRow;
@property(assign, nonatomic) id<SelectBankViewDelegate> delegate;
@property(retain, nonatomic) NSIndexPath* lastIndexPath;
@property(retain, nonatomic) NSString* certType;
@property(retain, nonatomic) NSArray* bindedBankArray;
-(void)dealloc;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)refreshBankInfo;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)nextBtnPressed;
-(void)cancelBtnPressed;
-(void)viewDidUnload;
-(void)userCardInfo;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithBankArray:(id)bankArray;
-(void)viewDidAppear:(BOOL)view;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UIAddCardPswViewController : UICustomNaviBarViewController <UIPickerViewDataSource, UIPickerViewDelegate> {
	UIScrollView* pScrollView_;
	UIGroupStyleView* group2;
	UIButton* btnForgetPW;
	TenpaySecureCtrl* pUserPW_;
	UITLTenpayCtrl* pUserPW2_;
	UITLLabelPicker* pUserQuestion_;
	UITLTextField* pUserAnswer_;
	PayPasswordHelpTipsView* imgHelpTips;
	NSArray* pQuestionArray;
	NSString* strUrl;
	BOOL bRegCft;
	UITapGestureRecognizer* singleTouch;
@private
	BOOL isPop;
	int _mType;
}
@property(assign) int mType;
+(id)getCurrentAddCardPswViewController;
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)timeseed;
-(void)qpay_p_verify;
-(void)nextStep:(id)step;
-(void)textFiledReturnEditing:(id)editing;
-(void)textFiledBeginEditing:(id)editing;
-(void)backgroundTap:(id)tap;
-(void)popFindPassword:(id)password;
-(void)popHelpTip:(id)tip;
-(void)refreshTimestamp:(id)timestamp;
-(void)userCardInfo;
-(void)viewDidLoad;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UIBankAdd1ViewController : UICustomNaviBarViewController <UIPickerViewDataSource, UIPickerViewDelegate, UIAlertViewDelegate, UITextFieldDelegate> {
	TPInputAccessoryView* pKeyboardToolBar_;
	UIView* otherView;
	int cardType;
	TPIDKeyboardView* IDkeyboard;
	UIScrollView* pScrollView_;
	UIGroupStyleView* group1;
	UITLLabelPicker* pBankPicker_;
	UITLLabelPicker* pValidDate;
	UITLTenpayCtrl* pCVV;
	UITLTextField* pBankUser_;
	UITLTextField* pUserID_;
	UITLTextField* pUserNum_;
	UICheckBox* pCheckBox_;
	NSString* currentBankType;
	NSArray* pBankArray;
	NSDictionary* selectBank;
	NSArray* cardDepositArray;
	NSArray* cardCreditArray;
	NSDictionary* dictElement;
	UIImageView* imgHelpTips;
	UILabel* textHelpInfo;
	UILabel* labMoreBank;
	NSTimer* pTimer;
	NSString* userType;
	BOOL isTrueName;
}
@property(retain, nonatomic) NSDictionary* selectBank;
@property(retain, nonatomic) NSString* currentBankType;
@property(retain, nonatomic) NSDictionary* dictElement;
@property(retain, nonatomic) NSArray* cardCreditArray;
@property(retain, nonatomic) NSArray* cardDepositArray;
@property(assign, nonatomic) NSArray* pBankArray;
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(float)pickerView:(id)view widthForComponent:(int)component;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(id)getBankInfo:(int)info withType:(id)type;
-(id)queryBankMobile:(id)mobile byName:(id)name;
-(id)queryBankCode:(id)code byName:(id)name;
-(void)qpay_itg_fpay;
-(void)qpay_fauth;
-(void)nextStep:(id)step;
-(unsigned char)checkUerID:(id)anId;
-(void)viewDidAppear:(BOOL)view;
-(void)getCardBinInfo;
-(void)getValidBankList;
-(void)adjustCardType:(int)type Animations:(BOOL)animations;
-(void)popPayPact:(id)pact;
-(void)viewDidLoad;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UIBankSetPswViewController : UICustomNaviBarViewController <UIPickerViewDataSource, UIPickerViewDelegate, UIAlertViewDelegate> {
	UIScrollView* pScrollView_;
	UIGroupStyleView* group1;
	UIGroupStyleView* group2;
	UIAlertView* smsTimeoutAlert;
	UIAlertView* mobileNoAlert;
	UIButton* btnForgetPW;
	TenpaySecureCtrl* pUserPW_;
	TenpaySecureCtrl* pUserPW2_;
	UITLLabelPicker* pUserQuestion_;
	UITLTextField* pUserAnswer_;
	UIImageView* imgHelpTips;
	NSArray* pQuestionArray;
	NSString* strUrl;
	BOOL bRegCft;
}
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)timeseed;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)qpay_fpay_regbind;
-(void)nextStep:(id)step;
-(void)userCardInfo;
-(void)textFiledReturnEditing:(id)editing;
-(void)popFindPassword:(id)password;
-(void)cancelAdd:(id)add;
-(void)narrowButton:(id)button;
-(void)popHelpTip:(id)tip;
-(void)viewDidLoad;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UICardNumInputViewController : UICustomNaviBarViewController {
	UIButton* btnNext;
	TenpaySecureCtrl* bankCode;
}
-(void)cl_query_cardbin;
-(void)textFiledReturnEditing:(id)editing;
-(void)nextStep;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UICardSelectViewController : UICustomNaviBarViewController <UIPickerViewDataSource, UIPickerViewDelegate, UIAlertViewDelegate, SelectBankViewDelegate> {
	UIScrollView* pScrollView_;
	UITLLabelPicker* pBankPicker_;
	TenpaySecureCtrl* pPassword_;
	UILabel* _bankPrefixLabel;
	UIButton* btnNext;
	UIButton* btnPaymoney;
	NSArray* pBankArray;
	UIButton* _bankNameBtn;
	UIButton* _bankSelectBtn;
	UIGroupStyleView* group_t1;
	NSDictionary* selectBank;
	int nCardNum;
	PayPasswordHelpTipsView* imgHelpTips;
	UITapGestureRecognizer* singleTouch;
@private
	int nSelectRow;
	BOOL isPop;
}
@property(retain, nonatomic) NSArray* pBankArray;
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(id)queryBankMobile:(id)mobile byName:(id)name;
-(id)queryBankCode:(id)code byName:(id)name;
-(void)timeseed;
-(void)qpay_ydt;
-(void)qpay_balance;
-(void)goNext:(id)next;
-(void)cancelAdd:(id)add;
-(void)viewDidAppear:(BOOL)view;
-(void)onDataReady1:(id)a1 DataInfo:(id)info;
-(void)transferSelectBankViewController:(id)controller selectedIndex:(int)index;
-(void)selectBank;
-(void)selectBankRelease;
-(void)selectBankPress;
-(void)backgroundTap:(id)tap;
-(void)popFindPassword:(id)password;
-(void)popHelpTip:(id)tip;
-(void)textFiledBeginEditing:(id)editing;
-(void)textFiledReturnEditing:(id)editing;
-(void)userCardInfo;
-(void)viewDidLoad;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UIMyWalletViewController : UICustomNaviBarViewController {
	UIScrollView* pScrollView_;
}
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(id)orderViewWithTitle:(id)title text:(id)text width:(float)width;
-(id)allocPopLableWithTitle:(id)title text:(id)text top:(float)top popTo:(SEL)to;
-(void)ShowCardList;
-(void)ShowOrderList;
-(void)userCardInfo;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UIOrderDetailViewController : UICustomNaviBarViewController <UIAlertViewDelegate> {
	NSDictionary* orderInfo;
	UIScrollView* pScrollView_;
	float line_y;
	NSTimer* myTimer;
@private
	BOOL isPay;
}
@property(assign, nonatomic) BOOL isPay;
@property(retain, nonatomic) NSDictionary* orderInfo;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)goodsViewWithTitle:(id)title detail:(id)detail;
-(id)priceViewWithTitle:(id)title text:(id)text width:(float)width;
-(id)detailViewWithTitle:(id)title text:(id)text width:(float)width;
-(id)orderNumViewWithTitle:(id)title text:(id)text width:(float)width;
-(id)orderViewWithTitle:(id)title text:(id)text width:(float)width;
-(void)loadOrderDetail:(BOOL)detail;
-(void)userCardInfo;
-(void)orderDetail;
-(void)onTimer;
-(void)qpay_gate;
-(void)notificationHandler:(id)handler;
-(void)didReceiveMemoryWarning;
-(void)saveToPhoto;
-(void)doNext;
-(void)cancel;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UISendSMSViewController : UICustomNaviBarViewController <UIAlertViewDelegate> {
	UIScrollView* pScrollView_;
	UITextField* textVerCode;
	UIButton* btnResend;
	UIButton* btnVerify;
	UILabel* pLabMobileInfo;
	UIGroupStyleView* group1;
	NSString* payType;
	NSTimer* myTimer;
	int timer_count;
	unsigned char bNeedUpdateTimeStamp;
@private
	NSString* strResendUrl;
	NSString* userType;
}
@property(retain, nonatomic) NSString* userType;
@property(retain, nonatomic) NSString* strResendUrl;
+(void)setLastPswInputViewController:(id)controller;
+(id)getCurrentSMSViewController;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)resend_sms;
-(void)ResendMessage;
-(void)onTimer;
-(void)qpay_verify;
-(void)timeseed;
-(void)qpay_itg_verify;
-(void)qpay_balance;
-(void)userCardInfo;
-(void)verifyCode:(id)code;
-(void)textFiledReturnEditing:(id)editing;
-(void)viewDidLoad;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface TPIDKeyboardButton : UIButton {
@private
	UILabel* _subtitleLabel;
}
@property(retain, nonatomic) UILabel* subtitleLabel;
@end

@interface TPIDKeyboardView : UIView {
	UITextField* curText;
	BOOL bShowX;
@private
	int maxInput;
}
@property(assign, nonatomic) int maxInput;
-(void)numberKeyBoardClicked:(id)clicked;
-(void)numberKeyBoardTouchTouchCancel:(id)cancel;
-(void)numberKeyBoardTouchDown:(id)down;
-(void)touchInput:(id)input;
-(void)addController:(id)controller;
-(id)initWithX:(BOOL)x;
@end

@interface TPInputAccessoryView : UIToolbar {
	UIBarButtonItem* btnPrevious;
	UIBarButtonItem* btnNext;
	UIBarButtonItem* btnSpace;
	UIBarButtonItem* btnFinish;
	NSMutableArray* arrayInput;
@private
	UIScrollView* scrollView;
}
@property(assign, nonatomic) UIScrollView* scrollView;
-(void)performKeyboardWillHideNotification:(id)performKeyboard;
-(void)addController:(id)controller;
-(void)touchInput;
-(void)finishInput:(id)input;
-(void)nextInput:(id)input;
-(void)previousInput:(id)input;
-(BOOL)checkCanNext:(int)next;
-(BOOL)checkCanPrevious:(int)previous;
-(BOOL)checkIsFirstResponder:(id)responder;
-(void)removeAllControllers;
-(void)dealloc;
-(id)init;
@end

@interface PayPasswordHelpTipsView : UIView {
@private
	UIButton* _btnFindPW;
}
@property(retain, nonatomic) UIButton* btnFindPW;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UINavWebViewController : UICustomNaviBarViewController <UIWebViewDelegate> {
	UIWebView* webView;
	NSString* webUrl;
@private
	int eWebType;
}
@property(assign, nonatomic) int eWebType;
-(void)cancel;
-(void)didReceiveMemoryWarning;
-(void)webViewDidStartLoad:(id)webView;
-(void)webViewDidFinishLoad:(id)webView;
-(void)loadURL:(id)url;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface TPNotifyCallback : BaseSingleton {
@private
	id handle;
	SEL callback;
}
@property(assign, nonatomic) SEL callback;
@property(assign, nonatomic) id handle;
-(void)notify:(id)notify errorCode:(int)code;
@end

@interface UITipInfoView : UIView {
	UIView* maskingView_;
	int nPosTopCenter;
@private
	UILabel* _pTitleLabel;
	UIImageView* _pImageView;
}
@property(retain, nonatomic) UIImageView* pImageView;
@property(retain, nonatomic) UILabel* pTitleLabel;
-(void)showInView:(id)view;
-(id)initWithTitle:(id)title Icon:(id)icon;
-(id)initWithTitle:(id)title Icon:(id)icon topCenter:(int)center;
@end

@interface UINotRotationNavigationController : UINavigationController {
}
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface PayCenterBusi : BaseSingleton {
	id viewControl;
	NSMutableDictionary* requestDictionary;
	TenpayOrderInfo* _orderInfo;
	NSDictionary* _info;
}
@property(assign, nonatomic) id viewControl;
@property(retain, nonatomic) NSMutableDictionary* requestDictionary;
+(BOOL)checkRespondIllegal:(id)illegal RespondInfo:(id)info;
+(void)sendHttpRequest:(id)request prefixPath:(id)path queryPairs:(id)pairs useSession:(unsigned char)session needEncrypt:(unsigned char)encrypt;
+(void)sendHttpRequest:(id)request queryPairs:(id)pairs;
+(void)sendHttpRequest:(id)request queryPairs:(id)pairs useSession:(unsigned char)session;
+(unsigned char)requestData:(id)data param:(id)param sendTo:(id)to;
-(void)saveString:(id)string;
-(void)onBusiRequestFinish:(id)finish RespondInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface BaseSingleton : NSObject {
	NSDate* _createdTime;
}
@property(retain, nonatomic) NSDate* createdTime;
+(void)resetAll;
+(id)baseClassName;
+(id)key;
+(id)overview;
+(BOOL)isBaseClass;
+(int)count;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(void)setup;
-(BOOL)isUserLevelCache;
-(void)reset;
-(id)valueForUndefinedKey:(id)undefinedKey;
-(void)setValue:(id)value forUndefinedKey:(id)undefinedKey;
-(void)setValue:(id)value forKey:(id)key;
-(id)description;
-(void)dealloc;
-(id)autorelease;
-(oneway void)release;
-(unsigned)retainCount;
-(id)retain;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface TenpayOrderInfo : BaseSingleton {
	NSString* orderNum;
	NSString* bankType;
	NSString* userName;
	NSString* passwd;
	NSString* rpasswd;
	NSString* identifyCard;
	NSString* mobileNo;
	NSString* bankcardNum;
	NSString* bankName;
	NSString* CVV;
	NSString* validDate;
	NSString* bindSerial;
	NSString* cardtail;
	NSString* totalfee;
	NSString* userCardType;
	NSString* payType;
	NSString* balance;
	NSString* vCode;
	NSString* salt;
	NSString* isTrueName;
	NSString* smsResendTag;
	NSMutableDictionary* smsResendParam;
	NSMutableDictionary* origOrder;
	NSArray* userCardInfo;
	NSMutableDictionary* fullInfo;
	NSMutableDictionary* authKeyInfo;
@private
	NSString* cert_user;
}
@property(retain, nonatomic) NSMutableDictionary* smsResendParam;
@property(retain, nonatomic) NSString* smsResendTag;
@property(retain, nonatomic) NSMutableDictionary* origOrder;
@property(retain, nonatomic) NSMutableDictionary* authKeyInfo;
@property(retain, nonatomic) NSMutableDictionary* fullInfo;
@property(retain, nonatomic) NSString* cert_user;
@property(retain, nonatomic) NSString* payType;
@property(retain, nonatomic) NSArray* userCardInfo;
@property(retain, nonatomic) NSString* isTrueName;
@property(retain, nonatomic) NSString* vCode;
@property(retain, nonatomic) NSString* balance;
@property(retain, nonatomic) NSString* salt;
@property(retain, nonatomic) NSString* userCardType;
@property(retain, nonatomic) NSString* totalfee;
@property(retain, nonatomic) NSString* cardtail;
@property(retain, nonatomic) NSString* bindSerial;
@property(retain, nonatomic) NSString* validDate;
@property(retain, nonatomic) NSString* CVV;
@property(retain, nonatomic) NSString* bankName;
@property(retain, nonatomic) NSString* bankcardNum;
@property(retain, nonatomic) NSString* mobileNo;
@property(retain, nonatomic) NSString* identifyCard;
@property(retain, nonatomic) NSString* rpasswd;
@property(retain, nonatomic) NSString* passwd;
@property(retain, nonatomic) NSString* userName;
@property(retain, nonatomic) NSString* bankType;
@property(retain, nonatomic) NSString* orderNum;
+(id)getInstance;
-(void)clearData;
@end

@interface senderBusiData : NSObject {
	id _sender;
	id _tag;
}
@end

@interface TPHttpBusiReq : BaseSingleton {
	int trans_seq;
	id sender;
	id tag;
	NSMutableDictionary* requestDictionary;
}
@property(retain, nonatomic) NSMutableDictionary* requestDictionary;
@property(assign, nonatomic) id tag;
@property(assign, nonatomic) id sender;
@property(assign, nonatomic) int trans_seq;
+(id)getArrayFromInfo:(id)info key:(id)key subkey:(id)subkey;
+(BOOL)checkRespondIllegal:(id)illegal RespondInfo:(id)info;
+(id)respondsTo:(id)to;
+(id)respondsTo:(id)to tag:(id)tag;
-(void)requestPostFailed:(id)failed;
-(void)requestPostFinished:(id)finished;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)HttpPost:(id)post whenSuccessed:(SEL)successed whenFailed:(SEL)failed;
-(void)sendRequest:(id)request queryPath:(id)path;
-(void)sendRequest:(id)request prefixPath:(id)path queryPairs:(id)pairs useSession:(unsigned char)session needEncrypt:(unsigned char)encrypt;
-(id)createURLwithPath:(id)path queryString:(id)string;
-(id)createURLwithPath:(id)path queryString:(id)string encrypt:(BOOL)encrypt needSession:(BOOL)session;
-(id)stringWithFormEncodedComponentsAscending:(id)formEncodedComponentsAscending ascending:(BOOL)ascending skipempty:(BOOL)skipempty separator:(id)separator;
-(void)dealloc;
-(id)init;
@end

@interface TT_FIX_CATEGORY_BUG_NSString_QueryString : NSObject {
}
@end

@interface TPM_SBJSON : TPM_SBJsonBase <TPM_SBJsonParser, SBJsonWriter> {
@private
	TPM_SBJsonParser* jsonParser;
	TPM_SBJsonWriter* jsonWriter;
}
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
-(void)setMaxDepth:(unsigned)depth;
-(unsigned)maxDepth;
-(id)objectWithString:(id)string error:(id*)error;
-(id)fragmentWithString:(id)string error:(id*)error;
-(id)objectWithString:(id)string allowScalar:(BOOL)scalar error:(id*)error;
-(id)objectWithString:(id)string;
-(id)stringWithObject:(id)object error:(id*)error;
-(id)stringWithFragment:(id)fragment error:(id*)error;
-(id)stringWithObject:(id)object allowScalar:(BOOL)scalar error:(id*)error;
-(id)stringWithObject:(id)object;
-(void)dealloc;
-(id)init;
@end

@interface TPM_SBJsonBase : NSObject {
	NSMutableArray* errorTrace;
	unsigned depth;
	unsigned maxDepth;
}
@property(readonly, assign) NSArray* errorTrace;
@property(assign) unsigned maxDepth;
-(void)clearErrorTrace;
-(void)addErrorWithCode:(unsigned)code description:(id)description;
-(void)dealloc;
-(id)init;
@end

@interface TPM_SBJsonParser : TPM_SBJsonBase <TPM_SBJsonParser> {
@private
	const char* c;
}
+(void)initialize;
-(BOOL)scanIsAtEnd;
-(BOOL)scanNumber:(id*)number;
-(BOOL)scanHexQuad:(unsigned short*)quad;
-(BOOL)scanUnicodeChar:(unsigned short*)aChar;
-(BOOL)scanRestOfString:(id*)string;
-(BOOL)scanRestOfDictionary:(id*)dictionary;
-(BOOL)scanRestOfArray:(id*)array;
-(BOOL)scanRestOfNull:(id*)null;
-(BOOL)scanRestOfFalse:(id*)aFalse;
-(BOOL)scanRestOfTrue:(id*)aTrue;
-(BOOL)scanValue:(id*)value;
-(id)objectWithString:(id)string;
-(id)fragmentWithString:(id)string;
@end

@interface TPM_SBJsonWriter : TPM_SBJsonBase <SBJsonWriter> {
@private
	BOOL sortKeys;
	BOOL humanReadable;
}
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
+(void)initialize;
-(BOOL)appendString:(id)string into:(id)into;
-(BOOL)appendDictionary:(id)dictionary into:(id)into;
-(BOOL)appendArray:(id)array into:(id)into;
-(BOOL)appendValue:(id)value into:(id)into;
-(id)indent;
-(id)stringWithObject:(id)object;
-(id)stringWithFragment:(id)fragment;
@end

@interface GTMBase64 : NSObject {
}
+(id)webSafeDecodeString:(id)string;
+(id)stringByWebSafeEncodingBytes:(const void*)bytes length:(unsigned)length padded:(BOOL)padded;
+(id)stringByWebSafeEncodingData:(id)data padded:(BOOL)padded;
+(id)webSafeDecodeBytes:(const void*)bytes length:(unsigned)length;
+(id)webSafeEncodeBytes:(const void*)bytes length:(unsigned)length padded:(BOOL)padded;
+(id)webSafeDecodeData:(id)data;
+(id)webSafeEncodeData:(id)data padded:(BOOL)padded;
+(id)decodeString:(id)string;
+(id)stringByEncodingBytes:(const void*)bytes length:(unsigned)length;
+(id)stringByEncodingData:(id)data;
+(id)decodeBytes:(const void*)bytes length:(unsigned)length;
+(id)encodeBytes:(const void*)bytes length:(unsigned)length;
+(id)decodeData:(id)data;
+(id)encodeData:(id)data;
+(unsigned)baseDecode:(const char*)decode srcLen:(unsigned)len destBytes:(char*)bytes destLen:(unsigned)len4 charset:(const char*)charset requirePadding:(BOOL)padding;
+(unsigned)baseEncode:(const char*)encode srcLen:(unsigned)len destBytes:(char*)bytes destLen:(unsigned)len4 charset:(const char*)charset padded:(BOOL)padded;
+(id)baseDecode:(const void*)decode length:(unsigned)length charset:(const char*)charset requirePadding:(BOOL)padding;
+(id)baseEncode:(const void*)encode length:(unsigned)length charset:(const char*)charset padded:(BOOL)padded;
@end

@interface ModalAlertDelegate : NSObject <UIAlertViewDelegate> {
	CFRunLoopRef currentLoop;
	unsigned index;
}
@property(readonly, assign) unsigned index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)initWithRunLoop:(CFRunLoopRef)runLoop;
@end

@interface ModalAlert : NSObject {
}
+(BOOL)ok:(id)ok;
+(BOOL)confirm:(id)confirm;
+(BOOL)ask:(id)ask;
+(unsigned)queryWith:(id)with button1:(id)a1 button2:(id)a2;
@end

@interface NSAudioHelper : NSObject {
}
+(void)playSound:(id)sound ofType:(id)type;
@end

@interface NSSecurityHelper : NSObject {
}
+(id)decryptPackets:(id)packets cryptographicKey:(id)key;
+(id)encryptPackets:(id)packets cryptographicKey:(id)key plainPackets:(id)packets3;
+(id)decrypt3Des:(id)des withKey:(id)key needScrambler:(BOOL)scrambler;
+(id)decrypt3DesFromBase64:(id)base64 withKey:(id)key needScrambler:(BOOL)scrambler;
+(id)encrypt3Des:(id)des withKey:(id)key needScrambler:(BOOL)scrambler;
+(id)defaultKey;
+(id)encrypt3DesToBase64:(id)base64 withKey:(id)key needScrambler:(BOOL)scrambler;
+(id)reverseExclusiveOR:(id)anOr;
+(id)forwardExclusiveOR:(id)anOr;
@end

@interface NSSystemHelper : NSObject {
}
+(BOOL)isSilenceModel;
+(id)applicationSalt;
+(id)wifiMacAddress;
+(id)uniqueDeviceIdentifier;
+(id)deviceType;
+(id)systemVersion;
@end

@interface NSValidateHelper : NSObject {
}
+(BOOL)validateEnglishCharacter:(id)character;
+(BOOL)validateChineseCharacter:(id)character;
+(BOOL)validatePositiveIntegers:(id)integers;
+(BOOL)validateRMB:(id)rmb;
+(BOOL)validateNaturalNumber:(id)number;
+(BOOL)validateQQNumber:(id)number;
+(BOOL)validateIPv4Address:(id)address;
+(BOOL)validateCellPhoneNumber:(id)number;
+(BOOL)validateIDCard:(id)card;
+(BOOL)validateEmailAddress:(id)address;
+(BOOL)validate:(id)validate withRegex:(id)regex;
@end

@interface OpenUDID : NSObject {
}
+(void)setOptOut:(BOOL)anOut;
+(id)valueWithError:(id*)error;
+(id)value;
+(id)_generateFreshOpenUDID;
+(id)_getDictFromPasteboard:(id)pasteboard;
+(void)_setDict:(id)dict forPasteboard:(id)pasteboard;
@end

@interface UIExpandableTableView : UITableView <UITableViewDelegate, UITableViewDataSource, NSCoding> {
@private
	id<UITableViewDelegate, UIExpandableTableViewDelegate> _myDelegate;
	id<UITableViewDataSource, UIExpandableTableViewDatasource> _myDataSource;
	NSMutableDictionary* _expandableSectionsDictionary;
	NSMutableDictionary* _showingSectionsDictionary;
	NSMutableDictionary* _downloadingSectionsDictionary;
	NSMutableDictionary* _animatingSectionsDictionary;
	int _maximumRowCountToStillUseAnimationWhileExpanding;
	BOOL _onlyDisplayHeaderAndFooterViewIfTableViewIsNotEmpty;
	UIView* _storedTableHeaderView;
	UIView* _storedTableFooterView;
}
@property(retain, nonatomic) UIView* storedTableFooterView;
@property(retain, nonatomic) UIView* storedTableHeaderView;
@property(retain, nonatomic) NSMutableDictionary* animatingSectionsDictionary;
@property(retain, nonatomic) NSMutableDictionary* downloadingSectionsDictionary;
@property(retain, nonatomic) NSMutableDictionary* showingSectionsDictionary;
@property(retain, nonatomic) NSMutableDictionary* expandableSectionsDictionary;
@property(assign, nonatomic) BOOL onlyDisplayHeaderAndFooterViewIfTableViewIsNotEmpty;
@property(assign, nonatomic) int maximumRowCountToStillUseAnimationWhileExpanding;
@property(readonly, assign, nonatomic) id<UIExpandableTableViewDatasource> myDataSource;
@property(readonly, assign, nonatomic) id<UIExpandableTableViewDelegate> myDelegate;
@property(assign, nonatomic) id<UIExpandableTableViewDatasource> dataSource;
@property(assign, nonatomic) id<UIExpandableTableViewDelegate> delegate;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willDeselectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)reloadData;
-(BOOL)isSectionExpanded:(int)expanded;
-(void)collapseSection:(int)section animated:(BOOL)animated;
-(void)expandSection:(int)section animated:(BOOL)animated;
-(void)cancelDownloadInSection:(int)section;
-(void)reloadDataAndResetExpansionStates:(BOOL)states;
-(BOOL)canExpandSection:(unsigned)section;
-(void)downloadDataInSection:(int)section;
-(void)_resetExpansionStates;
-(id)initWithFrame:(CGRect)frame style:(int)style;
-(void)setTableHeaderView:(id)view;
-(void)setTableFooterView:(id)view;
@end

@interface UIOutLinedLabel : UILabel {
@private
	UIColor* _outlinedColor;
}
@property(retain, nonatomic) UIColor* outlinedColor;
-(void)dealloc;
-(void)drawTextInRect:(CGRect)rect;
@end

@interface CheckNetwork : NSObject {
}
+(BOOL)isExistenceNetwork;
@end

@interface NSDateHelper : NSObject {
}
+(id)serverTimestamp;
+(BOOL)isLastmonth:(id)lastmonth;
+(BOOL)isThisMonth:(id)month;
+(id)formatDateString:(id)string;
+(id)serverCurrentTime;
+(void)setServerCurrentTime:(id)time;
+(id)stringFromDate:(id)date format:(id)format;
+(id)stringFromDate:(id)date;
+(id)dateFromString:(id)string;
+(id)timestamp;
+(id)standardNow;
+(id)now:(id)now;
@end

@interface NSFileHelper : NSObject {
}
+(id)contentsOfDirectoryAtPath:(id)path;
+(BOOL)deleteDirectoryAsPath:(id)path includingDirectory:(BOOL)directory;
+(BOOL)deleteFileAndDirectoryAsPath:(id)path;
+(BOOL)existFileOrDirectoryAsPath:(id)path;
+(BOOL)createDirectory:(id)directory;
+(id)spellPathInsideDocumentDirectory:(id)directory;
@end

@interface URLHelper : NSObject {
}
+(id)createURLwithPath:(id)path queryDict:(id)dict secured:(BOOL)secured encrypt:(BOOL)encrypt;
+(id)createURLwithPath:(id)path queryDict:(id)dict secured:(BOOL)secured encrypt:(BOOL)encrypt needSession:(BOOL)session;
+(id)createURLwithPath:(id)path queryString:(id)string secured:(BOOL)secured encrypt:(BOOL)encrypt;
+(id)createURLwithPath:(id)path queryString:(id)string secured:(BOOL)secured encrypt:(BOOL)encrypt needSession:(BOOL)session;
@end

@interface DesUtil : NSObject {
}
+(id)decryptString:(id)string withRawKey:(id)rawKey;
+(id)encryptString:(id)string withRawKey:(id)rawKey;
+(id)decryptStringFallback:(id)fallback WithKey:(int)key;
+(id)decryptString:(id)string WithKey:(int)key;
+(id)encryptString:(id)string WithKey:(int)key;
@end

@interface RunTimeConfig : BaseSingleton {
	BOOL navigationBar_hidden;
	float navigationBar_height;
	BOOL tabBar_hidden;
	float tabBar_height;
	BOOL statusBar_hidden;
	float statusBar_height;
	float select_margin;
	float screen_width;
	float screen_height;
	float margin_left;
	float margin_right;
	float cell_width;
	float cell_height;
	BOOL isForPlugin;
	NSMutableDictionary* _persistedSettings;
	BOOL _canAutoLogin;
	NSDate* _lastAutoLoginTime;
	BOOL _shouldDoSharedLogin;
@private
	float main_width;
	float main_height;
	CGRect main_rect;
	float main_width_withTabBar;
	float main_height_withTabBar;
	CGRect main_rect_withTabBar;
}
@property(assign, nonatomic) BOOL shouldDoSharedLogin;
@property(assign, nonatomic) BOOL canAutoLogin;
@property(readonly, assign, nonatomic) NSMutableDictionary* persistedSettings;
@property(assign, nonatomic) BOOL isForPlugin;
@property(readonly, assign, nonatomic) CGRect main_rect_withTabBar;
@property(readonly, assign, nonatomic) float main_height_withTabBar;
@property(readonly, assign, nonatomic) float main_width_withTabBar;
@property(readonly, assign, nonatomic) CGRect main_rect;
@property(readonly, assign, nonatomic) float main_height;
@property(readonly, assign, nonatomic) float main_width;
@property(assign, nonatomic) float cell_height;
@property(assign, nonatomic) float cell_width;
@property(assign, nonatomic) float margin_right;
@property(assign, nonatomic) float margin_left;
@property(assign, nonatomic) float screen_height;
@property(assign, nonatomic) float screen_width;
@property(assign, nonatomic) float select_margin;
@property(assign, nonatomic) float statusBar_height;
@property(assign, nonatomic) BOOL statusBar_hidden;
@property(assign, nonatomic) float tabBar_height;
@property(assign, nonatomic) BOOL tabBar_hidden;
@property(assign, nonatomic) float navigationBar_height;
@property(assign, nonatomic) BOOL navigationBar_hidden;
+(float)tightRowHeight;
+(float)rowHeight;
+(id)platformSignature;
+(id)sale_plat;
+(id)internalVersionNumber;
+(id)securedView;
+(id)scrollViewTopView:(id)view;
+(id)colorWithRed:(int)red green:(int)green blue:(int)blue;
+(id)separatorLineColor;
+(id)infoColor;
+(id)backgroundColor;
+(id)editableTextColor;
+(id)moneyColor;
+(id)defaultTextColor;
+(id)titleTextColor;
+(id)boldFontOfSize:(float)size;
+(id)fontOfSize:(float)size;
+(int)textLength:(id)length andFont:(id)font;
+(id)subFont;
+(id)defaultFont;
+(id)keyboardPreviewLabelFont;
+(id)keyboardLabelFont;
+(id)subActionFont;
+(id)ActionFont;
+(id)titleFont;
+(id)progressFont;
+(id)infoSmallFont;
+(id)infoFont;
+(id)labelFont;
+(id)navigationActionFont;
-(void)dealloc;
-(id)description;
-(id)buttonFont;
-(id)tabBarLabelFont;
-(id)navigationTitleFont;
-(id)fontWithSize:(float)size;
-(id)font;
-(float)main_heightWithTabBar:(BOOL)tabBar withNavigationBar:(BOOL)navigationBar;
-(void)setup;
-(id)init;
@end

@interface Md5EncUtil : NSObject {
}
+(id)md5HexDigest:(id)digest uppercase:(BOOL)uppercase;
+(id)encryptString:(id)string WithKey:(int)key;
@end

@interface NetworkInterface : NSObject {
	NSString* name;
	NSString* ip4;
	NSString* mac4;
}
@property(retain, nonatomic) NSString* mac4;
@property(retain, nonatomic) NSString* ip4;
@property(retain, nonatomic) NSString* name;
-(void)dealloc;
-(id)description;
@end

@interface NetworkInterfaceManager : BaseSingleton {
	NSDictionary* dict_networkInterface;
	NetworkInterface* defaultNetworkInterface;
	BOOL read;
}
@property(retain, nonatomic) NetworkInterface* defaultNetworkInterface;
@property(retain, nonatomic) NSDictionary* dict_networkInterface;
-(void)read;
-(id)description;
@end

@interface User : BaseSingleton {
	int trans_seq;
	int secloin_flag;
	BOOL is_certuser;
	NSDictionary* interf_cache_ver;
	int is_cftreguser;
	NSString* client_id;
	NSString* deskey;
	NSDate* lm_time;
	NSString* cftuid;
	BOOL wap_flag;
	NSString* mobileno;
	NSString* purchaser_true_name;
	int balance;
	NSString* client_ip;
	NSString* conf_ver;
	BOOL lifeapp_flag;
	NSString* skey;
	NSString* skey_type;
	NSString* cre_id;
	NSString* cre_type;
	NSString* uin;
	int status;
	BOOL needGenerateNewCert;
	BOOL sessionValid;
	BOOL isBindCard;
}
@property(assign, nonatomic) BOOL isBindCard;
@property(assign, nonatomic) BOOL sessionValid;
@property(assign, nonatomic) BOOL needGenerateNewCert;
@property(readonly, assign, nonatomic) BOOL needStartSecLogIn;
@property(readonly, assign, nonatomic) BOOL isLoggedIn;
@property(readonly, assign, nonatomic) BOOL isLoggingIn;
@property(assign, nonatomic) int status;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) NSString* cre_type;
@property(retain, nonatomic) NSString* cre_id;
@property(retain, nonatomic) NSString* skey_type;
@property(retain, nonatomic) NSString* skey;
@property(assign, nonatomic) BOOL lifeapp_flag;
@property(retain, nonatomic) NSString* conf_ver;
@property(retain, nonatomic) NSString* client_ip;
@property(assign, nonatomic) int balance;
@property(retain, nonatomic) NSString* purchaser_true_name;
@property(retain, nonatomic) NSString* mobileno;
@property(assign, nonatomic) BOOL wap_flag;
@property(retain, nonatomic) NSString* cftuid;
@property(retain, nonatomic) NSDate* lm_time;
@property(retain, nonatomic) NSString* deskey;
@property(retain, nonatomic) NSString* client_id;
@property(assign, nonatomic) int is_cftreguser;
@property(retain, nonatomic) NSDictionary* interf_cache_ver;
@property(assign, nonatomic) BOOL is_certuser;
@property(assign, nonatomic) int secloin_flag;
@property(assign, nonatomic) int trans_seq;
-(void)dealloc;
-(id)description;
-(void)setCFTAccountStatus:(id)status;
-(void)setLastModifyTime:(id)time;
-(void)setInterfCacheVer:(id)ver;
-(void)reset;
@end

@interface TenpaySecureKeyboardButton : UIButton {
@private
	UILabel* _subtitleLabel;
}
@property(retain, nonatomic) UILabel* subtitleLabel;
@end

@interface TenpaySecureCtrl : UITextField {
@private
	TenpayDelegate* myDelegate;
	int nMaxLen;
	UIView* myKeyboard;
	NSString* mySalt;
	id<TenpaySecureCtrlDelegate> ctrlDelegate;
	BOOL bFormatBankCard;
}
@property(assign, nonatomic) BOOL bFormatBankCard;
@property(assign, nonatomic) id<TenpaySecureCtrlDelegate> ctrlDelegate;
-(BOOL)isUserIDNum;
-(BOOL)isBankCardNum;
-(BOOL)isPhoneNum;
-(id)GetRsaPassword316WithHash:(BOOL)hash andFill:(BOOL)fill;
-(id)GetRsaPassword276WithHash:(BOOL)hash andFill:(BOOL)fill;
-(id)GetRsaPassword316;
-(id)GetSha1ValueData;
-(id)Get3DesEncryptData;
-(id)GetRsaPassword2WithHash:(BOOL)hash;
-(id)GetRsaPassword1WithHash:(BOOL)hash;
-(void)ClearInput;
-(void)SelectRsaKey:(int)key;
-(void)SetSalt:(id)salt;
-(long)GetInputInfo;
-(id)GetVersion;
-(void)numberKeyBoardClicked:(id)clicked;
-(void)numberKeyBoardTouchTouchCancel:(id)cancel;
-(void)numberKeyBoardTouchDown:(id)down;
-(void)UseKeyboardWithX:(BOOL)x ImageNumNormal:(id)normal ImageNumPress:(id)press ImageDelNormal:(id)normal4 ImageDelPess:(id)pess;
-(void)AppendString:(id)string;
-(void)SetMaxInputLen:(int)len;
-(int)GetInputLen;
-(id)text;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)dealloc;
-(void)onChange;
-(void)onReturn;
-(id)initWithFrame:(CGRect)frame;
@end

@interface TenpayDelegate : NSObject <UITextFieldDelegate> {
	NSMutableString* myPW;
	NSString* mySalt;
	NSString* myAppend;
	int myKeyIndex;
	int nMaxLen;
	id _objectId;
	SEL _callbackName1;
	SEL _callbackName2;
@private
	BOOL bFormatBankCard;
}
@property(assign, nonatomic) BOOL bFormatBankCard;
-(id)GetUnEncryptCode;
-(id)GetEncryptCode;
-(id)GetAsteriskString:(id)string;
-(BOOL)isUserIDNum;
-(BOOL)isBankCardNum;
-(BOOL)isPhoneNum;
-(id)GetSha1ValueData;
-(id)Get3DesEncryptData;
-(id)GetRsaPassword2WithHash:(BOOL)hash;
-(id)GetRsaPassword1WithHash:(BOOL)hash;
-(void)ClearInput;
-(void)SelectRsaKey:(int)key;
-(void)SetSalt:(id)salt;
-(long)GetInputInfo;
-(id)GetVersion;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)ResetMyPW:(id)pw;
-(id)EncodeCard:(id)card;
-(id)DecodeCardWithAppend:(id)append;
-(id)DecodeCard:(id)card;
-(void)AppendString:(id)string;
-(void)SetMaxInputLen:(int)len;
-(void)SetChange:(id)change callback:(SEL)callback;
-(void)SetReturn:(id)aReturn callback:(SEL)callback;
-(void)dealloc;
-(id)init;
@end

@interface NSStringHelp : NSObject {
}
+(BOOL)invalidateID:(id)anId;
+(BOOL)isUserIDNum:(id)num;
+(BOOL)isBankCardNum:(id)num;
+(BOOL)isPhoneNum:(id)num;
+(BOOL)isDigit:(id)digit Length:(unsigned)length;
@end

@interface QQPublicAccountModel : QQModel <IQQModelLabel> {
	long long _uin;
	NSString* _name;
	NSString* _summary;
	BOOL _recvMsg;
	unsigned _certifyGrade;
	int _priority;
	NSString* _pinyinStr;
	NSString* _sortkeyStr;
	NSRange _matchRange;
	BOOL _isMatchUIN;
	BOOL _isEnglishName;
	int _classifyID;
	int _showFlag;
}
@property(assign, nonatomic) BOOL isEnglishName;
@property(assign) int showFlag;
@property(assign) int classifyID;
@property(assign, nonatomic) int priority;
@property(retain, nonatomic, getter=getSortkeyStr) NSString* sortkeyStr;
@property(retain, nonatomic, getter=getPinYinStr) NSString* pinyinStr;
@property(assign) unsigned certifyGrade;
@property(assign) BOOL recvMsg;
@property(retain, nonatomic) NSString* summary;
@property(retain, nonatomic) NSString* name;
@property(assign) long long uin;
-(void).cxx_destruct;
-(int)getSearchModelPriority;
-(int)getSearchModelType;
-(BOOL)isMatchString:(id)string;
-(BOOL)isString:(id)string matchString:(id)string2;
-(int)compareLabel:(id)label;
-(id)getModelLabel;
-(NSRange)getModelLabelMatchRange;
-(int)comparebyPriorityAndNick:(id)nick;
-(int)compareByNick:(id)nick;
-(id)description;
-(id)init;
@end

@interface QQPublicAccountGuideView : UIView {
	UIImageView* _imageView;
	UILabel* _label1;
	UILabel* _label2;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQPublicAccountHeaderView : UIView {
	UILabel* _nickLabel;
	UILabel* _displayNumberLabel;
	int _grade;
	QQAsynHeadImageView* _iconView;
	UIImageView* _flagView;
}
-(void)dealloc;
-(void)setCertifiedGrade:(int)grade;
-(void)setDisplayNumber:(id)number;
-(void)setNick:(id)nick;
-(void)setUin:(id)uin;
-(id)init;
@end

@interface QQProtoBuffHelper : NSObject {
}
+(id)responseBuffWithDictionary:(id)dictionary forCmd:(id)cmd;
+(id)requestBuffWithDictionary:(id)dictionary forCmd:(id)cmd;
+(id)buffWithDictionary:(id)dictionary forMessageType:(id)messageType;
+(id)messageTypeForCmdResp:(id)cmdResp;
+(id)messageTypeForCmdReq:(id)cmdReq;
+(id)readRepeatedFields:(const FieldDescriptor*)fields forMessage:(const Message*)message;
+(id)readField:(const FieldDescriptor*)field forMessage:(const Message*)message;
+(id)dictionaryWithMessage:(const Message*)message;
+(id)dictionaryWithResponseBuff:(id)responseBuff forCmd:(id)cmd;
+(id)dictionaryWithBuff:(id)buff forMessageType:(id)messageType;
+(void)writeRepeatedFields:(const FieldDescriptor*)fields forMessage:(Message*)message withArray:(id)array;
+(void)writeField:(const FieldDescriptor*)field forMessage:(Message*)message withValue:(id)value;
+(Message*)protoBuffWithDictionary:(id)dictionary;
@end

@interface QQPublicAccountViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, UIAlertViewDelegate> {
	QQPublicAccountHeaderView* _headerView;
	UITableView* _tableView;
	QQSkinSwitch* _switchControl;
	unsigned long long _uin;
	int _certifiedGrade;
	NSString* _nick;
	NSString* _displayNumber;
	int _isFollow;
	int _followSeq;
	int _updateSeq;
	BOOL _isShowFollow;
	NSArray* _configGroupInfo;
@private
	UIView* _forbidView;
	BOOL _isCheckForbidPublicAccount;
}
@property(retain) NSArray* configGroupInfo;
@property(assign) BOOL isShowFollow;
@property(assign) int isFollow;
@property(retain, nonatomic) NSString* displayNumber;
@property(retain, nonatomic) NSString* nick;
@property(assign, nonatomic) int certifiedGrade;
@property(assign, nonatomic) unsigned long long uin;
-(void)onSearchPublicAccount;
-(void)removeAnalyingView;
-(void)addForbidView;
-(BOOL)checkIsPublicAccountForbidden;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRichText:(id)richText;
-(id)tableView:(id)view cellForStateChange:(id)stateChange;
-(id)tableView:(id)view cellForNomal:(id)nomal;
-(id)initDefaultStyleForCellWithIdentifier:(id)identifier;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)ResponseHandleForSetFlag:(id)setFlag;
-(void)ResponseHandleForUpdateData:(id)updateData;
-(void)ResponseHandleForSetUnFollow:(id)setUnFollow;
-(void)ResponseHandleForSetFollow:(id)setFollow;
-(void)PublicAccountUpdataMsgHandle:(id)handle;
-(void)finishUnfollow;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)follow;
-(void)confirmUnfollow;
-(void)unfollow;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)switchControlNeedConfirm:(id)confirm switchControl:(id)control;
-(void)switchControlChangeState:(id)state;
-(void)eventTransmit:(int)transmit;
-(void)gotoWebview:(id)webview authType:(int)type;
-(void)onClickRightBtn;
-(void)resetRightButton;
-(int)updateData;
-(bool)loadData;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithUin:(unsigned long long)uin isCheckForbidPublicAccount:(BOOL)account;
-(id)initWithPublicAccountUin:(unsigned long long)publicAccountUin;
-(id)init;
@end

@interface QQProtoBuffService : TCSignalChannelService <TCSignalChannelService_Protected> {
}
+(void)FreeInstance;
+(id)GetInstance;
+(id)RegisteredCommands;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)commAccRespPushPBBuffer:(const void*)buffer size:(int)size;
-(void)commAccNotifyRespPBBuffer:(const void*)buffer size:(int)size result:(int)result;
-(void)commAccReqPBBuffer:(char**)buffer buffEnd:(char**)end;
-(id)handleRecievedMsg:(CIMEngineMsgStruct)msg;
-(BOOL)requestProtoBuff:(id)buff withCmd:(id)cmd pSeq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(id)init;
@end

@interface QQCommonAccountInrcUpdateHandler : NSObject <IIncrUpdateDelegate> {
}
-(void)respPushPBBuffer:(const void*)buffer size:(int)size;
-(void)notifyRespPBBuffer:(const void*)buffer size:(int)size result:(int)result;
-(void)getReqPBBuffer:(char**)buffer buffEnd:(char**)end;
@end

@interface MQMenuAction : NSObject {
@private
	int _seq;
	id<MQDyanmicMenuDelegate> _delegate;
	unsigned _uin;
	NSString* _key;
	int _buttonType;
}
@property(assign, nonatomic) int buttonType;
@property(copy, nonatomic) NSString* key;
@property(assign, nonatomic) unsigned uin;
@property(assign, nonatomic) id<MQDyanmicMenuDelegate> delegate;
@property(assign, nonatomic) int seq;
-(void)dealloc;
@end

@interface MQDyanmicMenuMgr : NSObject <QQPublicAccountDataMgrProtocol> {
@private
	int _currentResquestSeq;
	int _menuActionSeq;
	NSMutableDictionary* _menuUpdateParam;
	NSMutableDictionary* _menuActionDelegateArray;
	NSMutableArray* _lbsMenuActionArray;
	NSMutableDictionary* _updateMenuDataSeqToUinMap;
}
@property(retain, nonatomic) NSMutableDictionary* updateMenuDataSeqToUinMap;
@property(retain, nonatomic) NSMutableArray* lbsMenuActionArray;
@property(retain, nonatomic) NSMutableDictionary* menuActionDelegateArray;
@property(retain, nonatomic) NSMutableDictionary* menuUpdateParam;
+(id)allocWithZone:(NSZone*)zone;
+(id)shareInstance;
-(void)sendLBSFromArray:(XXStruct_zYrK5D*)array;
-(void)handleGetLocationFailInner;
-(void)handleRequestTimeout:(id)timeout;
-(void)handleGetLocationFail:(id)fail;
-(void)handleGetLocationSucc:(id)succ;
-(void)handleStartUpdateLocation:(id)location;
-(void)startUpdateLocation;
-(void)removeLbsNotification;
-(id)getMenuTestData;
-(int)getNewMenuActionSeq;
-(void)removeObserver:(id)observer;
-(void)responseMsgHandle_PAList:(id)list msgType:(int)type netState:(BOOL)state retCode:(int)code userInfo:(id)info;
-(void)responseMsgHandle_SendLBS:(id)lbs msgType:(int)type netState:(BOOL)state retCode:(int)code userInfo:(id)info;
-(void)responseMsgHandle_UpdatePublicAccountMenu:(id)menu msgType:(int)type netState:(BOOL)state retCode:(int)code userInfo:(id)info;
-(void)responseMsgHandle_MenuAction:(id)action msgType:(int)type netState:(BOOL)state retCode:(int)code userInfo:(id)info;
-(void)PublicAccountResponseMsgHandle:(id)handle;
-(id)getPublicAccountCfg:(unsigned)cfg;
-(void)updatePublicAccountCfg:(unsigned)cfg;
-(BOOL)isNeedUpdate:(unsigned)update;
-(BOOL)isAllowLBS:(unsigned)lbs;
-(BOOL)sendLocation:(id)location menuInfo:(id)info uin:(unsigned)uin seq:(int*)seq delegate:(id)delegate;
-(BOOL)gotoPublicAccountViewController:(id)controller menuInfo:(id)info uin:(unsigned)uin seq:(int*)seq delegate:(id)delegate;
-(BOOL)onMenuAction_Event:(id)event menuInfo:(id)info uin:(unsigned)uin seq:(int*)seq delegate:(id)delegate;
-(BOOL)onMenuAction_OpenURL:(id)url menuInfo:(id)info uin:(unsigned)uin seq:(int*)seq delegate:(id)delegate;
-(BOOL)onMenuAction_Click:(id)click menuInfo:(id)info uin:(unsigned)uin seq:(int*)seq delegate:(id)delegate;
-(BOOL)onMenuAction:(id)action menuInfo:(id)info uin:(unsigned)uin seq:(int*)seq delegate:(id)delegate;
-(id)getPublicAccountMenu:(unsigned)menu;
-(void)dealloc;
-(id)init;
@end

@interface QQPublicAccountDataMgr : NSObject {
@private
	NSMutableDictionary* _pubAccDataRequestQueue;
}
@property(retain, nonatomic) NSMutableDictionary* pubAccDataRequestQueue;
+(BOOL)DeleteTable:(id)table Table:(id)table2;
+(id)OpenPADB:(BOOL)padb;
+(id)GetCacheDirForCurrentUin;
+(id)MD5Hash:(id)hash;
+(id)cachePathWithName:(id)name;
+(BOOL)createPathIfNecessary:(id)necessary;
+(id)allocWithZone:(NSZone*)zone;
+(id)GetInstance;
-(BOOL)DeletePublicAccountDetailInfo:(unsigned)info;
-(BOOL)ClearPublicAccountMenu;
-(BOOL)ClearSharePublicAccountList;
-(BOOL)ClearAllPublicAccountDetailInfo;
-(BOOL)ClearUserFollowList;
-(void)AddPublicAccount:(unsigned)account;
-(void)RemovePublicAccount:(unsigned)account;
-(void)NotifyPublicAccountFollowListUpdated;
-(void)NotifyPublicAccountFollowListUpdatedAfterDelay:(double)delay;
-(void)PushHandleForUpdateFunFlag:(id)updateFunFlag;
-(void)PushHandleForUpdateFollowList:(id)updateFollowList;
-(void)dispatchPushForResponseMsgType:(int)responseMsgType withUpdateList:(id)updateList;
-(void)ResponseHandleForSendLBSInfo:(id)sendLBSInfo;
-(void)ResponseHandleForSendMenuEvent:(id)sendMenuEvent;
-(void)ResponseHandleForSetFunctionFlag:(id)setFunctionFlag;
-(void)ResponseHandleForSetUnFollow:(id)setUnFollow;
-(void)ResponseHandleForSetFollow:(id)setFollow;
-(void)ResponseHandleForShareToPublicAccount:(id)publicAccount;
-(void)ResponseHandleForGetSharePublicAccountList:(id)getSharePublicAccountList;
-(void)ResponseHandleForGetPublicAccountMenu:(id)getPublicAccountMenu;
-(void)ResponseHandleForGetPublicAccountDetailInfo:(id)getPublicAccountDetailInfo;
-(void)ResponseHandleForGetPublicAccountInfo:(id)getPublicAccountInfo;
-(void)ResponseHandleForGetUserFollowList:(id)getUserFollowList;
-(void)simpleHandleNotification:(id)notification forResponseMsgType:(int)responseMsgType;
-(void)handleNotification:(id)notification forResponseMsgType:(int)responseMsgType additionalCallback:(id)callback;
-(BOOL)SendRequest:(id)request Buff:(id)buff Seq:(int*)seq PUin:(id)uin;
-(BOOL)SendLBSInfoRequest:(unsigned)request Latitude:(id)latitude Longitude:(id)longitude Seq:(int*)seq;
-(BOOL)SendMenuEventRequest:(unsigned)request KeyInfo:(id)info ButtonType:(int)type NeedLBS:(id)lbs Latitude:(id)latitude Longitude:(id)longitude Seq:(int*)seq;
-(BOOL)SendMenuEventRequest:(unsigned)request KeyInfo:(id)info ButtonType:(int)type Seq:(int*)seq;
-(BOOL)SendSetFunctionFlagRequset:(unsigned)requset FlagType:(unsigned)type Status:(unsigned)status Seq:(int*)seq;
-(BOOL)SendUnFollowRequest:(unsigned)request Seq:(int*)seq;
-(BOOL)SendFollowRequest:(unsigned)request Seq:(int*)seq;
-(BOOL)SendShareToPublicAccountRequest:(unsigned)publicAccountRequest ShareUrl:(id)url Seq:(int*)seq;
-(BOOL)UpdatePublicAccountMenu:(unsigned)menu Seq:(int*)seq;
-(BOOL)UpdateSharePublicAccountList:(int*)list;
-(BOOL)UpdateUserPublicAccountDetailInfo:(unsigned)info Seq:(int*)seq;
-(BOOL)UpdatePublicAccountInfo:(unsigned)info Seq:(int*)seq;
-(BOOL)UpdateUserFollowList:(int*)list;
-(BOOL)UpdateUserFollowListEx:(unsigned)ex Seq:(int*)seq;
-(BOOL)GetFollowListSeq:(unsigned*)seq PASeqno:(unsigned*)seqno GroupInfoSeqno:(unsigned*)seqno3;
-(id)GetPublicAccountMenu:(unsigned)menu;
-(id)GetSharePublicAccountList;
-(id)GetPublicAccountDetailInfo:(unsigned)info;
-(id)GetPublicAccountInfo:(unsigned)info;
-(id)GetGroupInfoList;
-(id)GetUserFollowList;
-(void)OnAccountChange:(id)change;
-(void)UnRegisterMonitorResponseMsg:(id)msg;
-(void)RegisterMonitorResponseMsg:(id)msg selector:(SEL)selector;
-(void)dealloc;
-(id)init;
@end

@interface QQPPCustomMenuBtn : UIButton {
@private
	int _event;
}
@property(assign) int event;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame title:(id)title event:(int)event tag:(int)tag;
@end

@interface QQPPPopMenuBtn : UITableViewCell {
@private
	UIImageView* _backgroundImageView;
}
@property(retain, nonatomic) UIImageView* backgroundImageView;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
@end

@interface QQPublicPlatformCustomMenu : UIView <PPCustomMenuDelegate> {
@private
	NSArray* _dataCustomMenu;
	id<PPCustomMenuDelegate> _delegate;
	NSMutableArray* _ppPopMenu;
	UIControl* _ppView;
}
@property(retain, nonatomic) UIControl* ppView;
@property(retain, nonatomic) NSMutableArray* ppPopMenu;
@property(assign, nonatomic) id<PPCustomMenuDelegate> delegate;
@property(retain, nonatomic) NSArray* dataCustomMenu;
-(void)dealloc;
-(void)btnEnable:(BOOL)enable;
-(void)onClickChangeBtn;
-(void)animationStop:(id)stop finished:(id)finished;
-(void)backgroundTap:(id)tap;
-(void)onClickCustomBtn:(id)btn;
-(void)closePopMenu;
-(id)initWithFrame:(CGRect)frame customParam:(id)param delegate:(id)delegate;
@end

@interface QQPublicPlatformPopMenu : UIView <UITableViewDelegate, UITableViewDataSource> {
@private
	NSArray* _dataSubMenu;
	id<PPCustomMenuDelegate> _delegate;
	float _arrowX;
}
@property(assign, nonatomic) float arrowX;
@property(assign, nonatomic) id<PPCustomMenuDelegate> delegate;
@property(retain, nonatomic) NSArray* dataSubMenu;
-(void)dealloc;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)drawRect:(CGRect)rect;
-(id)initWithTag:(int)tag frame:(CGRect)frame customParam:(id)param delegate:(id)delegate;
@end

@interface QQTopTipView : UIView {
}
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame message:(id)message;
@end

@interface QQIgnoreEventView : UIView {
}
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface CircleDBManager : NSObject <DBAccountChangedProtocol, DBAsyncCallbackProtocol> {
}
-(id)getCircleListFromDb:(id)db userdata:(id)userdata;
-(int)asyncInwriteCircleDataToDb:(id)db circleFriend:(id)aFriend delCircleFriendArray:(id)array callback:(id)callback userdata:(id)userdata;
-(int)asyncRewriteCircleDataToDb:(id)db circleFriend:(id)aFriend callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateCircleFriendListToDb:(id)db callback:(id)callback userdata:(id)userdata;
-(int)asyncGetCircleFriendListFromDb:(id)db userdata:(id)userdata;
-(int)asyncDeleteCircleFriendListFromDb:(id)db callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateCircleListToDb:(id)db callback:(id)callback userdata:(id)userdata;
-(int)asyncGetCircleListFromDb:(id)db userdata:(id)userdata;
-(int)asyncDeleteCircleListFromDb:(id)db callback:(id)callback userdata:(id)userdata;
-(int)asyncGetAllDataFromDb:(id)db userdata:(id)userdata;
-(id)getAllData:(id)data;
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
-(BOOL)inwriteCircleData:(id)data circleFriendArray:(id)array delCircleFriendArray:(id)array3 db:(id)db;
-(BOOL)rewriteCircleData:(id)data circleFriendArray:(id)array db:(id)db;
-(BOOL)deleteCircleFriendList:(id)list db:(id)db;
-(BOOL)updateCircleFriendList:(id)list db:(id)db;
-(id)getCircleFriendList:(id)list;
-(BOOL)deleteCircleList:(id)list db:(id)db;
-(BOOL)updateCircleList:(id)list db:(id)db;
-(id)getCircleList:(id)list;
-(void)createCircleTable:(id)table;
-(void)dealloc;
-(void)onDBChanged;
-(id)init;
@end

@interface QQURLCache : NSURLCache {
	NSMutableDictionary* substitutionPaths;
	NSDictionary* mimeTypes;
	BOOL hasUpdate;
	unsigned isUpdating;
}
+(id)getInstance;
-(id)cachedResponseForRequest:(id)request;
-(id)mimeTypeForExtension:(id)extension;
-(id)mimeTypeForURL:(id)url;
-(id)localPathForURL:(id)url;
-(void)scanGameCenterCacheDirectory:(id)directory;
-(void)scanWebappCacheDirectory;
-(void)prepareWebAppCacheDirectoryInDocumentFolder;
-(id)getWebAppZipFilePath;
-(id)getWebAppNewCacheDirectoryName;
-(id)getWebAppCacheDirectoryName;
-(id)getWebAppCacheDirectoryNameInAppFolder;
-(void)checkWebappUpdateForHost:(id)host;
-(void)unzipFile:(id)file to:(id)to;
-(void)unzipUpdateZipArchiveData:(id)data overrideMode:(int)mode updateMode:(int)mode3 host:(id)host newVersionNumber:(int)number;
-(id)downloadUpdateZipArchiveFrom:(id)from;
-(id)fetchUpdateInfoForHost:(id)host;
-(id)mobileQQVersion;
-(void)setLocalWebappVersion:(int)version forHost:(id)host;
-(int)localWebappVersionForHost:(id)host;
-(void)dealloc;
-(id)init;
@end

@interface QQCustomActionSheet : QQActionSheet <UIActionSheetDelegate> {
	id<UIActionSheetDelegate> _originDelegate;
	int _buttonIndex;
	UIButton* _dismissButton;
	UIButton* _destructiveButton;
@private
	BOOL _showDefaultBackground;
	UIView* _customBackgroundView;
}
@property(retain, nonatomic) UIView* customBackgroundView;
@property(assign, nonatomic) BOOL showDefaultBackground;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)layoutSubviews;
-(void)onButtonTap:(id)tap;
-(void)showInView:(id)view withHeight:(float)height;
-(void)tappedButtonAtIndex:(int)index shouldDismiss:(BOOL)dismiss animated:(BOOL)animated;
-(void)setFrame:(CGRect)frame;
-(id)initWithDelegate:(id)delegate cancelButtonTitle:(id)title;
@end

@interface QQFontSizeActionSheet : QQCustomActionSheet {
}
-(void)setFontSizeConfigurationWithOption:(int)option recommendScale:(float)scale;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showInView:(id)view;
-(id)getSeperatorViewAtPositionX:(float)positionX;
-(id)initWithDelegate:(id)delegate;
@end

@interface QQShareActionSheet : QQCustomActionSheet <UIScrollViewDelegate> {
	UIPageControl* _pageControl;
	UIScrollView* _scrollView;
@private
	NSMutableArray* _defaultItems;
	NSMutableArray* _allItems;
	int _dynamicItemSelectedIndex;
}
@property(readonly, assign, nonatomic) int dynamicItemSelectedIndex;
@property(readonly, assign, nonatomic) NSMutableArray* allItems;
@property(readonly, assign, nonatomic) NSMutableArray* defaultItems;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)updateShareItems;
-(id)createShareItemsForPage:(unsigned)page;
-(id)createShareItemWithDict:(id)dict atIndex:(unsigned)index;
-(void)showInView:(id)view;
-(void)dealloc;
-(id)accountInfo;
-(id)initWithAccount:(id)account accountType:(int)type delegate:(id)delegate cancelButtonTitle:(id)title;
-(id)initWithDelegate:(id)delegate cancelButtonTitle:(id)title;
@end

@interface QQLogReportSettingViewController : QQViewController <UITextFieldDelegate> {
	UIDatePicker* _datePicker;
	UITextField* _edit1;
	UITextField* _edit2;
	UIButton* _btn1;
	UIButton* _btn2;
	NSTimer* _reportProtectTimer;
	BOOL _isShowKeyboard;
}
@property(retain, nonatomic) UIButton* btn2;
@property(retain, nonatomic) UIButton* btn1;
@property(retain, nonatomic) UITextField* edit2;
@property(retain, nonatomic) UITextField* edit1;
@property(retain, nonatomic) UIDatePicker* datePicker;
-(void)updateViewPos:(int)pos;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)textFieldShouldClear:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)btnAction:(id)action;
-(void)onReportProtectTimer;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface QQAddressBookAppDelegate : NSObject <UIApplicationDelegate, UIAlertViewDelegate, UITabBarControllerDelegate, QQMsgBarDelegate, SimpleAlertViewDelegate, QSDataTransformerDelegate, TipWindowDelegate, QQFriendSelectedViewControllerDelegate, OnQueryStateReturn> {
	UIWindow* window;
	NSString* upgradeUrl;
	QQTabBarController* tabCtr;
	QQNMsgShowBar* _msgBar;
	BOOL _isVideoViewController;
	bool _isShowingSdkUpdateAlertView;
	unsigned bgTask;
	NSTimer* _bgRuningTaskTimer;
	bool _isLaunchFromLocalPush;
	bool _RegisterForRemoteNotificationsSucc;
	UIImageView* _defaultPngView;
	UIImageView* _firstView;
	UIImage* _imageDefault;
	QSDataTransformer* _dataTransformer;
	QQDataTransWindow* _dataTransWindow;
	UIApplication* _uiApplication;
	UIWindow* _passWindow;
	PassWordView* _passView;
	BOOL passViewShow;
	BOOL _ifHasQQAlertView;
	NSString* _failUin;
	NSString* _failPass;
	BOOL _needEnterForeAction;
	BOOL _needEnterFinishAction;
	int _lastImageIndex;
	NSString* _lastImagePath;
	BOOL _disConnectAtBackground;
	QCardExchangeModule* _CardExchangeModule;
	DiscussGroup* _discussGroup;
	QVideoChatModule* _QVideoChatModule;
	AVRecordVideoManager* _recordVideoManager;
	QQPlatform* _QQPlatform;
	NSString* _param_sessionID;
	BOOL _shouldNotVibrate;
	BOOL _shouldNotPlaysound;
	BOOL _showPassAfterSplash;
	UIAlertView* _appUpgradeLayoutAlertView;
	UIAlertView* _alertView;
	TipWindow* _tipWindow;
	BOOL _deleteAccount;
	BOOL _isForgetPassWord;
@private
	BOOL deferredLoginProcess;
	BOOL needShowGuideWindow;
}
@property(assign, nonatomic) BOOL isForgetPassWord;
@property(assign, nonatomic) BOOL deleteAccount;
@property(assign, nonatomic) BOOL needShowGuideWindow;
@property(assign, nonatomic) BOOL deferredLoginProcess;
@property(assign, nonatomic) BOOL needEnterForeAction;
@property(retain, nonatomic) AVRecordVideoManager* recordVideoManager;
@property(retain, nonatomic) NSString* param_sessionID;
@property(assign, nonatomic) BOOL ifHasQQAlertView;
@property(assign, nonatomic) BOOL passViewShow;
@property(assign, nonatomic) BOOL needEnterFinishAction;
@property(retain, nonatomic) NSString* lastImagePath;
@property(retain, nonatomic) QQTabBarController* tabCtr;
@property(assign, nonatomic) BOOL isVideoViewController;
@property(assign, nonatomic) int lastImageIndex;
@property(retain, nonatomic) NSString* upgradeUrl;
@property(retain, nonatomic) UIWindow* window;
@property(retain, nonatomic) QQNMsgShowBar* msgBar;
@property(retain, nonatomic) UIAlertView* alertView;
-(BOOL)currentInAIO;
-(void)didWindowHidden;
-(void)goToContactView;
-(void)dismissTipWindow;
-(void)showThemeGuideTipWindow;
-(void)showContactsTipWindow;
-(void)migrationDidFinished;
-(void)willPresentAlertView:(id)view;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)closeRecordVideoView;
-(void)vibrateWithFrequencyControl;
-(void)setShouldVibrate;
-(void)playSoundWithFrequencyControlInBackground:(id)background;
-(void)playSoundWithFrequencyControl:(id)frequencyControl;
-(void)setShouldPlaysound;
-(void)receiveRemoteMsgGotoDetail:(id)detail;
-(BOOL)fineViewController:(Class)controller fuin:(id)fuin;
-(BOOL)findViewController:(Class)controller;
-(void)savePassWordState;
-(void)reSetPassErrorState;
-(void)hiddePassWindow;
-(void)recoverPosition;
-(void)passWordViewDissLeft:(BOOL)left;
-(void)passWordViewDiss:(BOOL)diss;
-(void)passWordViewShowLeft;
-(void)passWordViewShow;
-(void)backGroudWithoutAnimation;
-(BOOL)showQQBrowser:(id)browser;
-(id)encodeQQUrl:(id)url;
-(void)showLocalNotification:(int)notification sendUin:(id)uin content:(id)content badgeCount:(int)count;
-(bool)checkPushMsgWhenPCOnline;
-(void)updatePushbannerStatus;
-(void)hiddenStatusOnlineView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(void)startNetworkWork;
-(void)WillEnterForeground;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)processBackgroundVideoRequest;
-(void)bgRuningTaskTimerOut;
-(void)setGroupNotify;
-(void)applicationDidEnterBackground:(id)application;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)processApplicationDidEnterBackground:(id)processApplication;
-(void)applicationWillTerminate:(id)application;
-(void)dealloc;
-(void)showBadge:(id)badge;
-(void)ActionOffLineMsg:(id)msg;
-(void)ActionSDKUpgrade:(id)upgrade;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(BOOL)doApplication:(id)application handleOpenURL:(id)url sourceApplication:(id)application3;
-(void)didFriendListSelected:(id)selected withFilePath:(id)filePath;
-(void)SharePhotoWithURL:(id)url;
-(void)SharePhotoToFriend:(id)aFriend;
-(void)registerNotifications;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(void)cleanMemory;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(id)restoreSimplifiedInfo:(id)info;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)reLoadSkins:(BOOL)skins;
-(void)popViewControllers;
-(void)showViewController;
-(void)openCurrShowMessage;
-(BOOL)didAllowMsgBarTouch:(id)touch;
-(void)didMsgBarTouch:(id)touch context:(id)context;
-(void)LoginNotify:(id)notify;
-(void)restoreViewsOnAppWindow;
-(void)initUI;
-(void)initThumbPassword;
-(void)performFirstRunActions:(BOOL)actions;
-(void)initSystemFaceResource;
-(void)initChatViewControllerResource;
-(void)initSystemFace;
-(BOOL)appIsChineselanguage;
-(void)defaultPngAnimationStop;
-(void)defaultPngAnimationStartFadeOut;
-(void)doShowFestivialSplash;
-(void)onQueryStateCallBack:(int)back checkType:(int)type checkResult:(int)result;
-(void)initApp:(id)app;
-(void)startLoginProcess;
-(void)checkLogFileSize:(id)size;
-(void)didTransformFinished:(BOOL)finished;
-(void)didTransformStatus:(int)status;
-(void)didTransformProcess:(int)process totalProcess:(int)process2;
-(void)clearTransWindow;
-(void)clearTransformer;
-(void)cancelDataTransform;
-(void)showTransWaiting;
-(void)openUrlTest;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
@end

@interface VideoLog : NSObject {
@private
	int _logVer;
	NSURLConnection* _upConnection;
}
@property(retain, nonatomic) NSURLConnection* upConnection;
-(void)testPost;
-(void)dealloc;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(BOOL)postData:(id)data;
-(id)encodeData:(id)data;
-(id)encByTea:(id)tea;
-(id)init;
@end

@interface QQFileImageViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIImagePickerControllerDelegate, UINavigationControllerDelegate> {
	NSMutableArray* _dataSources;
	UITableView* _tableView;
	BOOL _isEdit;
	BOOL _isSelectedAll;
	BOOL ifChange;
	QUIButton* _actionImagePick;
	QQFileEditBar* _editBar;
	UIView* _btnBg;
	QQFileBackGroundView* _noneFileView;
	int _kind;
	UIViewController* _supChatViewController;
	UIImagePickerController* _pickViewController;
	UIPopoverController* _popViewController;
	CGRect _rect;
}
@property(assign, nonatomic) UIViewController* supChatViewController;
@property(retain, nonatomic) QUIButton* actionImagePick;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
-(void)performSaveAndSendDataForObject:(id)object;
-(void)saveImageToFileManger:(id)fileManger forImage:(id)image;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
-(void)actionPushImagePickViewController;
-(void)didSelectedModel:(id)model;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)loadDataSources;
-(void)editAction:(id)action;
-(void)editBarDidSelected:(id)editBar;
-(void)selectedAllData:(id)data;
-(void)disMissEditBar;
-(void)showEditBar;
-(void)endEditFileSetNavigationBarButton;
-(void)editFileSetNavigationBarButton;
-(void)didReceiveMemoryWarning;
-(void)leftButtonClick:(id)click;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)initWith:(int)with rect:(CGRect)rect;
-(id)initWith:(int)with;
@end

@interface QQFileMangerModel : NSObject {
	NSString* _image;
	NSString* _title;
	int _type;
	BOOL _isSelected;
}
@property(assign, nonatomic) BOOL isSelected;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* image;
+(id)CreateFileMangerMode:(id)mode forTitle:(id)title withType:(int)type;
-(void)dealloc;
@end

@interface QQFileLabel : UILabel {
	id _object;
}
@property(retain, nonatomic) id object;
-(void)dealloc;
@end

@interface QQFileInfoCell : UITableViewCell {
	BOOL _isEdit;
	QQFileEnumInfo* _info;
	QUIButton* _selectedButton;
	UIImageView* _iconImageView;
	QQFileLabel* _titleLabel;
	QQFileLabel* _timeLabel;
	QQFileLabel* _sizeLabel;
	id<QQFileInfoCellDelegate> _delegate;
	id _object;
}
@property(retain, nonatomic) id object;
@property(assign, nonatomic) BOOL isEdit;
@property(retain, nonatomic) QQFileEnumInfo* info;
@property(assign, nonatomic) id<QQFileInfoCellDelegate> delegate;
-(void)selectedAction:(id)action;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)loadViewWithInfo;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQFileEditBar : UIButton {
	BOOL _isShow;
}
@property(assign, nonatomic) BOOL isShow;
+(id)buttonWithType:(int)type;
@end

@interface QQFileImageModel : NSObject {
	NSString* _imagePath;
	BOOL _isSelected;
}
@property(assign, nonatomic) BOOL isSelected;
@property(retain, nonatomic) NSString* imagePath;
-(void)dealloc;
@end

@interface QQFileImageInterView : UIView {
	UIImage* _image;
	UIView* _maskView;
	UIImageView* _selImage;
	BOOL _isEdit;
	BOOL _isSelected;
	QQFileImageModel* _model;
	id<QQFileImageInterViewDelegate> _delegate;
}
@property(assign, nonatomic) id<QQFileImageInterViewDelegate> delegate;
@property(assign, nonatomic) BOOL isEdit;
@property(retain, nonatomic) QQFileImageModel* model;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFileImageViewCell : UITableViewCell {
	NSArray* _modelList;
	NSMutableArray* _imageViewList;
	BOOL _isEdit;
	id _subViewDelegate;
}
@property(assign, nonatomic) id subViewDelegate;
@property(assign, nonatomic) BOOL isEdit;
@property(assign, nonatomic) NSArray* modelList;
-(void)reDisplayDefaultInterView;
-(void)setEditing:(BOOL)editing;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQFileImageCache : NSObject {
	NSMutableDictionary* _fileImageCache;
}
+(id)GetInstances;
-(id)GetImageForPath:(id)path;
-(void)dealloc;
-(id)init;
-(void)cleanFileImageCache;
@end

@interface QQFileBackGroundView : UIView {
	UIImage* _bgImage;
}
@property(retain, nonatomic) UIImage* bgImage;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFileBrowserSendViewController : QQFileBrowserViewController {
	id<IFileViewSendDelegate> _fileSender;
}
@property(assign) id<IFileViewSendDelegate> fileSender;
-(void)rightButtonClick:(id)click;
-(void)loadView;
@end

@interface QQFileTypeViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIImagePickerControllerDelegate, UINavigationControllerDelegate, QQFileInfoCellDelegate, UIPopoverControllerDelegate, MPMediaPickerControllerDelegate, UIDocumentInteractionControllerDelegate> {
	QQFileMangerModel* _model;
	int _type;
	UITableView* _tableView;
	NSMutableArray* _dataSources;
	BOOL _isEdit;
	BOOL _isSelectedAll;
	id<IFileViewSendDelegate> _fileSender;
	QQFileEditBar* _editBar;
	UIView* _btnBg;
	QUIButton* _actionVideoPick;
	QQFileBackGroundView* _noneFileView;
	CGRect _rect;
	AVAudioPlayer* _audioPlay;
	UIPopoverController* _popViewController;
	NSIndexPath* _lastSelIndex;
	BOOL _isBackToNoEditView;
	UIDocumentInteractionController* _documentInteractionController;
}
@property(retain, nonatomic) NSIndexPath* lastSelIndex;
@property(retain, nonatomic) QQFileMangerModel* model;
@property(retain, nonatomic) QUIButton* actionVideoPick;
-(void)documentInteractionControllerDidDismissOptionsMenu:(id)documentInteractionController;
-(id)documentInteractionControllerViewForPreview:(id)preview;
-(CGRect)documentInteractionControllerRectForPreview:(id)preview;
-(id)documentInteractionControllerViewControllerForPreview:(id)preview;
-(void)showTipMainThread:(id)thread;
-(id)myDocumentsDirectory:(id)directory;
-(void)mediaItemToData:(id)data forFileName:(id)fileName;
-(void)mediaPickerDidCancel:(id)mediaPicker;
-(void)performSaveAudioForData:(id)data;
-(void)mediaPicker:(id)picker didPickMediaItems:(id)items;
-(void)actionPushAudioPickViewController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
-(void)performSaveAndSendDataForObject:(id)object;
-(void)saveVideoToFileManger:(id)fileManger FromUrl:(id)url;
-(BOOL)popoverControllerShouldDismissPopover:(id)popoverController;
-(void)actionPushVideoPickViewController;
-(void)didReceiveMemoryWarning;
-(void)didSelectedInfo:(id)info;
-(void)cancelEditAction:(id)action;
-(void)editAction:(id)action;
-(void)editBarDidSelected:(id)editBar;
-(void)selectedAllData:(id)data;
-(void)disMissEditBar;
-(void)showEditBar;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)endEditFileSetNavigationBarButton;
-(void)editFileSetNavigationBarButton;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)viewDidUnload;
-(void)loadView;
-(void)loadData;
-(void)dealloc;
-(id)initWith:(id)with fileSender:(id)sender rect:(CGRect)rect;
-(id)initWith:(id)with fileSender:(id)sender;
@end

@interface QQFileUITableViewCell : UITableViewCell {
	id _object1;
	id _object2;
	id _object3;
	id _object4;
}
@property(assign, nonatomic) id object4;
@property(assign, nonatomic) id object3;
@property(assign, nonatomic) id object2;
@property(assign, nonatomic) id object1;
@end

@interface QQRecommendFileMangerViewController : QQViewController <UITableViewDelegate, UITableViewDataSource> {
	UITableView* _tableView;
	NSMutableArray* _dataSources;
	NSMutableArray* _dataInforSource;
	id<IFileViewSendDelegate> _fileSender;
	CGRect _rect;
}
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)pushViewControllerFor:(id)aFor;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadDataInfo;
-(void)loadView;
-(id)initWithFileSender:(id)fileSender rect:(CGRect)rect;
-(id)initWithFileSender:(id)fileSender;
-(id)init;
@end

@interface QQGifDecodeManager : NSObject {
	NSMutableArray* _waitingList;
	long long _allBufferBytes;
	NSMutableDictionary* _gifDict;
}
@property(retain, nonatomic) NSMutableDictionary* gifDict;
@property(assign, nonatomic) long long allBufferBytes;
@property(retain, nonatomic) NSMutableArray* waitingList;
+(id)gifKeyWithURL:(id)url;
+(void)removeGifBuffForUrl:(id)url;
+(void)removeAll;
+(BOOL)loadAnimationGifForView:(id)view atUrl:(id)url isMarketFace:(BOOL)face;
-(void)dealloc;
-(id)init;
@end

@interface QQGifDecode : NSObject {
	int length;
	char* buffer;
	char* backbuffer;
	long long _totalBytes;
	NSMutableArray* _frameList;
	NSMutableArray* _delayList;
	BOOL _isDecodeEnded;
	NSURL* _url;
	GifState* _gifState;
	NSThread* _thread;
	UIImageView* _imageView;
	int _currentFrame;
	float _total;
@private
	BOOL _isMarketFace;
}
@property(assign, nonatomic) BOOL isMarketFace;
@property(assign, nonatomic) float total;
@property(assign, nonatomic) int currentFrame;
@property(assign, nonatomic) long long totalBytes;
@property(retain, nonatomic) NSThread* thread;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) NSMutableArray* frameList;
@property(retain, nonatomic) NSURL* url;
@property(assign, nonatomic) BOOL isDecodeEnded;
-(void)dealloc;
-(id)description;
-(void)decodeThreadEnd;
-(void)decodeGif;
-(void)startDecodeGifThread;
-(void)decodeFirstFrame;
-(void)freeBuffer;
-(void)smoothGifFrame:(char*)frame tmpBuf:(char*)buf width:(int)width height:(int)height;
-(void)smoothGifFrame2:(char*)a2 tmpBuf:(char*)buf width:(int)width height:(int)height;
-(void)calculateRGBBuffer:(char**)buffer withImgBuf:(char**)imgBuf withStartX:(int)startX startY:(int)y endX:(int)x endY:(int)y6 w:(int)w h:(int)h w1:(int)a1 h1:(int)a110;
-(void)loadGifBuffer:(id)buffer neededBuffer:(BOOL)buffer2;
-(void)loadGifBuffer:(id)buffer;
-(id)init;
@end

@interface QQGuideViewController : UIView <UIAlertViewDelegate> {
	int _index;
	UIWindow* _superWindow;
	UIImageView* _imageView;
	UIView* _contentView;
	UITapGestureRecognizer* tapGesture;
	UISwipeGestureRecognizer* swipeGesture;
	UIImageView* _animationImageView;
	NSTimer* _timer;
	BOOL _lockTimer;
@private
	UIView* view;
}
@property(assign, nonatomic) UIView* view;
@property(assign, nonatomic) UIWindow* superWindow;
-(void)startSecondAnimations:(BOOL)animations;
-(void)animationTimer:(id)timer;
-(void)touchTap:(id)tap;
-(void)startAnimationTimer;
-(void)viewDidLoad;
-(id)init;
-(void)createImageViewAt:(CGRect)at withImage:(id)image;
-(id)getImage:(id)image;
-(void)dealloc;
-(id)initWithNumber:(int)number forSuperWindow:(id)superWindow;
@end

@interface QQGuideWindow : UIWindow <UIScrollViewDelegate> {
	UIScrollView* scrollView;
	UIPageControl* pageControl;
	NSMutableArray* viewControllers;
	BOOL pageControlUsed;
	int kNumberOfPages;
	NSMutableArray* _firstImages;
	NSMutableArray* _secondImages;
	NSMutableArray* _bgMaskImages;
}
@property(retain, nonatomic) NSMutableArray* viewControllers;
+(id)GetInstance;
-(void)close;
-(void)login;
-(void)didFadeOut;
-(void)animationFadeOut;
-(void)loadGameCenter;
-(void)scrollViewEnable:(BOOL)enable;
-(void)tapTouchNextPage:(id)page;
-(void)changePage:(id)page;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)loadScrollViewWithPage:(int)page;
-(void)loadWindow;
-(void)reloaseSources;
-(void)loadSources;
-(id)GetBgImages;
-(id)GetSecondImages;
-(id)GetFirstImages;
-(void)onVideoChatStart;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MSFImagePool : NSObject {
	int _deviceType;
	NSString* _defaultThemePath;
	NSString* _currentThemePath;
@private
	NSString* rootPath;
}
@property(retain, nonatomic) NSString* rootPath;
@property(assign, nonatomic) int deviceType;
+(id)defaultPool;
-(void)setCurrentThemePath:(id)path;
-(void)setDefaultThemePath:(id)path;
-(int)navigationViewSkinsType;
-(void)addHeadImageCache:(id)cache forUin:(id)uin cacheAsRoundCorner:(BOOL)corner;
-(void)removeImageForKey:(id)key;
-(id)GetImageForKey:(id)key;
-(BOOL)isInCache:(id)cache;
-(void)addImage:(id)image forKey:(id)key;
-(int)deviceVersion;
-(BOOL)ifDeviceLow4S;
-(BOOL)ifDeviceTouchLow;
-(id)DefaultImageForName:(id)name cache:(BOOL)cache;
-(id)FaceImageForName:(id)name;
-(id)ReserveImageForName:(id)name;
-(id)WebViewImageForName:(id)name;
-(id)QZoneIconImageForName:(id)name cache:(BOOL)cache;
-(id)IconImageForName:(id)name cache:(BOOL)cache;
-(id)SkinImageForName:(id)name cache:(BOOL)cache key:(id)key;
-(id)ImageForName:(id)name basePath:(id)path cache:(BOOL)cache key:(id)key isReserve:(BOOL)reserve;
-(id)GifEmotionFormName:(id)name;
-(id)pathForName:(id)name basePath:(id)path;
-(void)cleanSkinImageCache;
-(id)SecretFileImageForName:(id)name;
-(id)SecretFileImageForName:(id)name cache:(BOOL)cache;
-(void)dealloc;
-(id)getResPath:(id)path basePath:(id)path2;
-(id)init;
@end

@interface QQRecoverObject : NSObject {
	id _object;
	unsigned long _lastVisitTime;
}
@property(assign, nonatomic) unsigned long lastVisitTime;
@property(retain, nonatomic) id object;
-(void)dealloc;
-(id)initWithObject:(id)object visitTime:(unsigned long)time;
@end

@interface QQObjectSubPool : NSObject {
@private
	NSRecursiveLock* _dictLock;
	NSMutableDictionary* _objectDict;
	int _type;
	const RecoverConfig* _config;
	unsigned long _curTime;
}
-(int)subPoolType;
-(void)removeAllObjects;
-(id)objectDictionary;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)setObject:(id)object forKey:(id)key;
-(void)removeObjectForKey:(id)key;
-(const RecoverConfig*)getRecoverConfig;
-(id)getObjectDict;
-(void)unlock;
-(void)lock;
-(unsigned long)currentTime;
-(void)UpdateCurrentTime:(unsigned long)time;
-(void)dealloc;
-(id)initWithType:(int)type;
@end

@interface QQObjectPool : NSObject {
@private
	NSRecursiveLock* _dictLock;
	NSMutableDictionary* _subPoolDict;
	NSTimer* _timer;
	NSThread* _recoverThread;
	BOOL _isThreadExit;
	unsigned _freeMem;
	unsigned _inactiveMem;
	unsigned _totalMem;
}
+(id)instance;
-(void)printObjects;
-(unsigned)getTotalMem;
-(unsigned)getInactiveMem;
-(unsigned)getFreeMem;
-(void)removeAllObjects;
-(void)removeSubPoolAllObject:(int)object;
-(id)subPool:(int)pool;
-(void)RecoverProcess;
-(void)RecoverOnePool:(id)pool;
-(void)UpdateMemoryStatus;
-(void)UpdateSubPoolTime:(unsigned long)time;
-(void)RecoverThreadMain:(id)main;
-(void)dealloc;
-(id)init;
@end

@interface TapDetectingImageView : UIImageView {
	id<TapDetectingImageViewDelegate> delegate;
	CGPoint tapLocation;
	BOOL multipleTouches;
	BOOL twoFingerTapIsPossible;
}
@property(assign, nonatomic) id<TapDetectingImageViewDelegate> delegate;
-(void)handleTwoFingerTap:(id)tap;
-(void)handleDoubleTap:(id)tap;
-(void)handleSingleTap:(id)tap;
-(id)initWithImage:(id)image;
@end

@interface Logger : NSObject {
	NSFileHandle* h_file;
}
+(void)log:(id)log file:(const char*)file func:(const char*)func linnum:(int)linnum;
+(void)log:(id)log file:(const char*)file linnum:(int)linnum to:(id)to;
+(id)shared;
-(void)dealloc;
-(void)log:(id)log;
-(id)initWithFilePath:(id)filePath;
@end

@interface FMDatabase : NSObject {
	sqlite3* db;
	NSString* databasePath;
	BOOL logsErrors;
	BOOL crashOnErrors;
	BOOL inUse;
	BOOL inTransaction;
	BOOL traceExecution;
	BOOL checkedOut;
	int busyRetryTimeout;
	BOOL shouldCacheStatements;
	NSMutableDictionary* cachedStatements;
	NSMutableSet* openResultSets;
}
+(id)sqliteLibVersion;
+(id)databaseWithPath:(id)path;
-(BOOL)isTable:(id)table hasColumn:(id)column;
-(BOOL)isHasTableIndex:(id)index;
-(BOOL)isHasTable:(id)table;
-(void)setCachedStatements:(id)statements;
-(id)cachedStatements;
-(void)setShouldCacheStatements:(BOOL)cacheStatements;
-(BOOL)shouldCacheStatements;
-(void)setBusyRetryTimeout:(int)timeout;
-(int)busyRetryTimeout;
-(void)setCheckedOut:(BOOL)anOut;
-(BOOL)checkedOut;
-(void)setTraceExecution:(BOOL)execution;
-(BOOL)traceExecution;
-(void)setInTransaction:(BOOL)transaction;
-(BOOL)inTransaction;
-(void)setInUse:(BOOL)use;
-(BOOL)inUse;
-(void)setCrashOnErrors:(BOOL)errors;
-(BOOL)crashOnErrors;
-(void)setLogsErrors:(BOOL)errors;
-(BOOL)logsErrors;
-(BOOL)beginTransaction;
-(BOOL)beginDeferredTransaction;
-(BOOL)commit;
-(BOOL)rollback;
-(BOOL)update:(id)update error:(id*)error bind:(id)bind;
-(BOOL)executeUpdate:(id)update withArgumentsInArray:(id)array;
-(BOOL)executeUpdate:(id)update;
-(BOOL)executeUpdate:(id)update error:(id*)error withArgumentsInArray:(id)array orVAList:(void*)list;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array;
-(id)executeQuery:(id)query;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array orVAList:(void*)list;
-(void)bindObject:(id)object toColumn:(int)column inStatement:(sqlite3_stmt*)statement;
-(int)changes;
-(long long)lastInsertRowId;
-(int)lastErrorCode;
-(BOOL)hadError;
-(id)lastErrorMessage;
-(void)compainAboutInUse;
-(BOOL)goodConnection;
-(BOOL)setKey:(id)key;
-(BOOL)rekey:(id)rekey;
-(void)setCachedStatement:(id)statement forQuery:(id)query;
-(id)cachedStatementForQuery:(id)query;
-(void)resultSetDidClose:(id)resultSet;
-(BOOL)hasOpenResultSets;
-(void)closeOpenResultSets;
-(void)clearCachedStatements;
-(BOOL)close;
-(BOOL)openWithFlags:(int)flags;
-(BOOL)open;
-(sqlite3*)sqliteHandle;
-(id)databasePath;
-(void)dealloc;
-(void)finalize;
-(id)initWithPath:(id)path;
-(BOOL)columnExists:(id)exists columnName:(id)name;
-(id)getTableSchema:(id)schema;
-(id)getSchema;
-(BOOL)tableExists:(id)exists;
-(id)dateForQuery:(id)query;
-(id)dataForQuery:(id)query;
-(double)doubleForQuery:(id)query;
-(BOOL)boolForQuery:(id)query;
-(long)longForQuery:(id)query;
-(int)intForQuery:(id)query;
-(id)stringForQuery:(id)query;
@end

@interface FMStatement : NSObject {
	sqlite3_stmt* statement;
	NSString* query;
	long useCount;
}
-(id)description;
-(void)setUseCount:(long)count;
-(long)useCount;
-(void)setQuery:(id)query;
-(id)query;
-(void)setStatement:(sqlite3_stmt*)statement;
-(sqlite3_stmt*)statement;
-(void)reset;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

@interface FMResultSet : NSObject {
	FMDatabase* parentDB;
	FMStatement* statement;
	NSString* query;
	NSMutableDictionary* columnNameToIndexMap;
	BOOL columnNamesSetup;
}
+(id)resultSetWithStatement:(id)statement usingParentDatabase:(id)database;
-(void)setStatement:(id)statement;
-(id)statement;
-(void)setColumnNameToIndexMap:(id)indexMap;
-(id)columnNameToIndexMap;
-(void)setQuery:(id)query;
-(id)query;
-(void)setParentDB:(id)db;
-(id)columnNameForIndex:(int)index;
-(id)objectForColumnName:(id)columnName;
-(id)objectForColumnIndex:(int)columnIndex;
-(const char*)UTF8StringForColumnName:(id)columnName;
-(const char*)UTF8StringForColumnIndex:(int)columnIndex;
-(BOOL)columnIsNull:(id)null;
-(BOOL)columnIndexIsNull:(int)null;
-(id)dataNoCopyForColumnIndex:(int)columnIndex;
-(id)dataNoCopyForColumn:(id)column;
-(id)dataForColumnIndex:(int)columnIndex;
-(id)dataForColumn:(id)column;
-(id)dateForColumnIndex:(int)columnIndex;
-(id)dateForColumn:(id)column;
-(id)stringForColumn:(id)column;
-(id)stringForColumnIndex:(int)columnIndex;
-(double)doubleForColumnIndex:(int)columnIndex;
-(double)doubleForColumn:(id)column;
-(BOOL)boolForColumnIndex:(int)columnIndex;
-(BOOL)boolForColumn:(id)column;
-(long long)longLongIntForColumnIndex:(int)columnIndex;
-(long long)longLongIntForColumn:(id)column;
-(long)longForColumnIndex:(int)columnIndex;
-(long)longForColumn:(id)column;
-(int)intForColumnIndex:(int)columnIndex;
-(int)intForColumn:(id)column;
-(int)columnIndexForName:(id)name;
-(BOOL)hasAnotherRow;
-(BOOL)next;
-(id)resultDict;
-(void)kvcMagic:(id)magic;
-(void)setupColumnNames;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

@interface ImageHelper : NSObject {
}
+(BOOL)isGif:(id)gif;
+(id)getSelfFaceThumbName:(id)name;
+(id)image:(id)image fillForMinSize:(float)minSize;
+(id)image:(id)image scaleAspectFitSize:(CGSize)size;
+(id)image:(id)image fillView:(id)view;
+(id)image:(id)image fillForWidth:(float)width;
+(void)image:(id)image drawInRectWithFitSize:(CGRect)fitSize;
+(id)image:(id)image fillSize:(CGSize)size;
+(id)image:(id)image centerInView:(id)view;
+(id)image:(id)image centerInSize:(CGSize)size;
+(id)image:(id)image fitInView:(id)view;
+(id)image:(id)image fitInSize:(CGSize)size;
+(id)unrotateImage:(id)image;
+(id)doUnrotateImage:(id)image;
+(CGRect)getFillIntSize:(CGSize)size inSize:(CGSize)size2;
+(CGSize)getFitIntSize:(CGSize)size inSize:(CGSize)size2;
+(CGSize)fitSize:(CGSize)size inSize:(CGSize)size2;
+(id)imageFromView:(id)view;
+(id)imageFromColor:(id)color size:(CGSize)size;
+(id)alphaImageAxis_X:(id)x alphaWidth:(float)width Mode:(int)mode;
+(id)alphaImageAxis_Y:(id)y alphaWidth:(float)width Mode:(int)mode;
+(char*)bitmapFromImage:(id)image;
+(id)imageWithBits:(char*)bits withSize:(CGSize)size;
+(id)imageFromViewWithRect:(id)rect rect:(CGRect)rect2;
@end

@interface QQGrowingTextView : UIView <UITextViewDelegate> {
	QQTextViewInternal* internalTextView;
	int minHeight;
	int maxHeight;
	int maxNumberOfLines;
	int minNumberOfLines;
	BOOL animateHeightChange;
	BOOL _isInit;
	BOOL lowDevice;
	BOOL lowTag;
	int currInterfaceOrientation;
	float keyBoardHeight;
	float keyBoardHeight_Landscape;
	float popupHeight;
	NSObject<QQGrowingTextViewDelegate>* delegate;
	NSString* text;
	UIFont* font;
	UIColor* textColor;
	int textAlignment;
	NSRange selectedRange;
	BOOL editable;
	unsigned dataDetectorTypes;
	int returnKeyType;
	UIEdgeInsets contentInset;
	NSString* _tmpTextContent;
	float _contentHeight;
	CGRect _ViewFrame;
	int currentIndex;
}
@property(assign, getter=growingViewFrame, setter=setgrowingViewFrame:) CGRect growingViewFrame;
@property(assign) UIEdgeInsets contentInset;
@property(assign, nonatomic) int returnKeyType;
@property(assign, nonatomic) unsigned dataDetectorTypes;
@property(assign, nonatomic, getter=isEditable) BOOL editable;
@property(assign, nonatomic) NSRange selectedRange;
@property(assign, nonatomic) int textAlignment;
@property(assign, nonatomic) UIColor* textColor;
@property(assign, nonatomic) UIFont* font;
@property(assign, nonatomic) NSString* text;
@property(assign) NSObject<QQGrowingTextViewDelegate>* delegate;
@property(assign, nonatomic) float popupHeight;
@property(assign, nonatomic) float keyBoardHeight_Landscape;
@property(assign, nonatomic) float keyBoardHeight;
@property(assign, nonatomic) int currInterfaceOrientation;
@property(assign) float contentHeight;
@property(retain) QQTextViewInternal* internalTextView;
@property(assign) BOOL animateHeightChange;
@property(assign) int currentIndex;
@property(assign) int minNumberOfLines;
@property(assign) int maxNumberOfLines;
-(void)textViewDidChangeSelection:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(id)doBackSpace:(id)space atRange:(NSRange*)range;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)scrollRangeToVisible:(NSRange)visible;
-(BOOL)hasText;
-(void)insertEMJText:(id)text;
-(void)dealloc;
-(void)InternalSetFame:(CGRect)fame;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)growDidStop;
-(void)setFrame:(CGRect)frame;
-(CGRect)frame;
-(void)resizeTextView:(int)view;
-(void)resizeTextViewWithOffset:(int)offset;
-(void)moveTextViewY:(int)y;
-(void)textViewDidChange:(id)textView;
-(void)sizeToFit;
-(void)layoutSubviews;
-(void)commonInitialiser;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

@interface QQTextField : QQGrowingTextView {
@private
	UIButton* leftButton;
	UIButton* rightButton;
	UIButton* facesButton;
	UIButton* publicPlatformButton;
	UIImageView* _bgView;
	UIImageView* _textFieldBgView;
	BOOL isLandscape;
	BOOL ifInitFace;
	BOOL isGroup;
	NSMutableData* sendData;
	QQTextFieldInternal* internal;
	QQRichKeyBorad* _richKeyBorad;
	BOOL _bRecKBNtf;
	ShowFlags _ShowFlags;
	id _tableObject;
	QQFacePanelController* _facePanelController;
	float strOffset;
	int _currSkin;
	float _moveUpDuration;
	float _moveDownDuration;
	BOOL _marketFaceSupported;
	UIView* _qqPPchangeBtn;
	BOOL _isPublicPlatform;
	unsigned _disabledRichAIOFlags;
}
@property(assign, nonatomic) unsigned disabledRichAIOFlags;
@property(assign, nonatomic) BOOL marketFaceSupported;
@property(assign, nonatomic) BOOL isPublicPlatform;
@property(retain, nonatomic) UIView* qqPPchangeBtn;
@property(readonly, assign, nonatomic) QQRichKeyBorad* richKeyBorad;
@property(assign, nonatomic) float moveDownDuration;
@property(assign, nonatomic) float moveUpDuration;
@property(retain, nonatomic) QQTextFieldInternal* internal;
@property(assign, nonatomic) BOOL isGroup;
@property(assign, nonatomic) id tableObject;
@property(assign, nonatomic) BOOL bRecKBNtf;
@property(readonly, assign, nonatomic) UIButton* rightButton;
@property(readonly, assign, nonatomic) UIButton* leftButton;
@property(retain, nonatomic) UIButton* facesButton;
@property(retain, nonatomic) NSData* sendData;
@property(assign, nonatomic) BOOL ifInitFace;
@property(readonly, assign, nonatomic) ShowFlags ShowFlags;
+(void)encodeSendData:(id)data outData:(id)data2;
+(NSRange)encodeEmoPostion:(id)postion;
+(id)initFaceKeyboardView;
-(id).cxx_construct;
-(void)resizeScrollViewFrame:(CGRect)frame;
-(void)publicPlatformButtonClick:(id)click;
-(void)SupportPublicPlatformButton;
-(void)notSupportLeftButton;
-(void)removeLeftAndFaceButton;
-(void)removeLeftButton;
-(NSRange)GetDeletedIOSEmojiRange;
-(void)emojiDraged:(id)draged;
-(void)sendEmoji:(id)emoji;
-(void)faceSelfDraged:(id)draged;
-(void)faceDraged:(id)draged;
-(void)emojiFaceChoosed:(unsigned short)choosed;
-(void)backSpaceFace;
-(void)faceChoosed:(id)choosed;
-(id)insertEmoji:(id)emoji toText:(id)text atLocation:(int)location;
-(void)sendFace;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)forceToFlip;
-(BOOL)hiddenKeyBorad;
-(void)showKeyBorad;
-(void)testRichKeyBorad;
-(void)showCurrentInputState:(int)state;
-(void)upDateFace;
-(void)upLoadFace;
-(void)flipFaceBoard;
-(void)rightBtnClick:(id)click;
-(void)moveDown;
-(BOOL)moveUp;
-(void)drawRect:(CGRect)rect;
-(void)setNeedsDisplay;
-(void)layoutSubviews;
-(void)adjustFrame:(int)frame;
-(void)checkFaceView;
-(void)resetTableViewPosition;
-(void)resizeScrollView;
-(void)showTopFlag:(BOOL)flag;
-(id)filterInputStr:(id)str;
-(void)clearText;
-(void)resetSendData;
-(void)setDelegate:(id)delegate;
-(CGRect)rightViewRectForBounds:(CGRect)bounds;
-(CGRect)leftViewRectForBounds:(CGRect)bounds;
-(CGRect)placeholderRectForBounds:(CGRect)bounds;
-(CGRect)editingRectForBounds:(CGRect)bounds;
-(CGRect)clearButtonRectForBounds:(CGRect)bounds;
-(CGRect)textRectForBounds:(CGRect)bounds;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)becomeRespose;
-(void)reSignRespose;
-(void)initState;
-(void)goToFaceManageView;
-(void)faceMabageChoosed:(id)choosed;
-(void)dealloc;
-(void)initRichKeyboard;
-(void)initFacePanel;
-(void)setButtonEnable:(BOOL)enable;
-(id)initWithFrame:(CGRect)frame;
-(void)voiceInitWithFrame:(CGRect)frame;
@end

@interface QQRichControl : UIButton {
	NSString* _controlKey;
	UILabel* _btnTitleLabel;
}
@property(retain, nonatomic) UILabel* btnTitleLabel;
@property(retain, nonatomic) NSString* controlKey;
+(id)buttonWithType:(int)type;
-(void)dealloc;
-(void)setFrame:(CGRect)frame;
-(void)setTitleEdgeInsets:(UIEdgeInsets)insets;
-(void)setEnabled:(BOOL)enabled;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQRichKeyBorad : UIView <UIScrollViewDelegate> {
	NSMutableArray* _controls;
	UIScrollView* _contentView;
	KeyBoradCoordinate _keyBoradCoordinate;
	DefineAvatarInfo _Flags;
	id<QQRichKeyBoradDelegate> _delegate;
	unsigned _controlNumber;
	double _animationTime;
@private
	unsigned _disabledRichAIOFlags;
}
@property(assign, nonatomic) unsigned disabledRichAIOFlags;
@property(assign, nonatomic) double animationTime;
@property(assign, nonatomic) unsigned controlNumber;
@property(assign, nonatomic) id<QQRichKeyBoradDelegate> delegate;
+(id)GetEmptyAddBtn;
-(id).cxx_construct;
-(void)clearTipsView:(id)view;
-(void)reDrawSubItems;
-(void)setKeyBoradSubItems:(id)items enabel:(BOOL)enabel;
-(void)setKeyBoradSubItem:(unsigned)item enabel:(BOOL)enabel;
-(void)setAnimationPoint:(CGPoint)point;
-(BOOL)hiddenAniamtion:(BOOL)aniamtion;
-(BOOL)showAnimation:(BOOL)animation;
-(BOOL)isShow;
-(void)touchEvent:(id)event;
-(void)createControlList;
-(id)GetTitleList;
-(id)GetDisabelImageList;
-(id)GetImageList;
-(id)GetRichControl:(id)control selector:(SEL)selector;
-(void)createRootScrollView;
-(CGRect)controlRectFor:(unsigned)aFor;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQTextFieldInternal : NSObject {
	QQTextField* _textField;
}
-(void)keyboardWasHidden:(id)hidden;
-(void)keyboardWasShown:(id)shown;
-(void)inputModeChange:(id)change;
-(void)dealloc;
-(void)beginResign;
-(void)endResign;
-(void)initState;
-(id)initWithTextField:(id)textField;
@end

@interface QQTextViewInternal : UITextView {
	BOOL _bLockScroll;
	NSString* _defaultString;
	BOOL _drawDefalult;
	NSMutableArray* _replaceCodes;
}
@property(retain, nonatomic) NSString* defaultString;
-(void)drawRect:(CGRect)rect;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)setContentSize:(CGSize)size;
-(void)setContentInset:(UIEdgeInsets)inset;
-(void)setContentOffset:(CGPoint)offset;
-(void)setContentOffset:(CGPoint)offset animated:(BOOL)animated;
-(void)resetContentOffset;
-(float)getContentHeight;
-(float)getFontLineHeight;
-(void)unlockScroll;
-(void)lockScroll;
-(BOOL)AllEmptyContent;
-(void)setText:(id)text;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SMSEditMenuBackGround : UIView {
	id<SMSEditMenuBackGroundDelegate> _delegate;
}
@property(assign, nonatomic) id<SMSEditMenuBackGroundDelegate> delegate;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SMSEditMenu : UIView <SMSEditMenuBackGroundDelegate> {
	id<SMSEditMenuDelegate> _delegate;
@private
	BOOL _isShow;
	float _height;
	CGRect* _rectArray;
	BOOL* _enAbleArray;
	BOOL* _visibleArray;
	int _maxObject;
	int _selecteIndex;
	int currentAccountIndex;
	int _showX;
	int _selfWidth;
	int _menuPosition;
	NSMutableArray* _objectsNameArray;
	NSMutableArray* _objectsImageArray;
	UIWindow* _superView;
	SMSEditMenuBackGround* _bgView;
	NSMutableArray* _accessibilityChildren;
}
@property(assign, nonatomic) id<SMSEditMenuDelegate> delegate;
@property(assign, nonatomic) int menuPosition;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
-(id)accessibilityElementAtIndex:(int)index;
-(int)accessibilityElementCount;
-(id)accessibilityChildren;
-(void)drawRect:(CGRect)rect;
-(id)getHeaderMoreListPress1Image;
-(id)getHeaderMoreBgImage;
-(id)getCompositImageByLeftImage:(id)image middImage:(id)image2 righImage:(id)image3 imageWidth:(int)width;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setMenuItemVisible:(BOOL)visible withIndex:(int)index;
-(void)setEnAble:(BOOL)able withIndex:(int)index;
-(void)setSelectIndex:(int)index;
-(void)removeView;
-(void)dismiss;
-(void)show;
-(BOOL)isShow;
-(void)didMenuBackGroundClick:(id)click;
-(void)dealloc;
-(id)initWithSupperView:(id)supperView LeftTopPoint:(CGPoint)point forNameObjects:(id)nameObjects andImages:(id)images currentAccount:(int)account width:(int)width;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQPageControl : UIPageControl {
@private
	UIImage* _normalImage;
	UIImage* _highLightImage;
	BOOL isDisplayImage;
	int _dotSize;
}
@property(assign) int dotSize;
@property(assign, nonatomic) BOOL isDisplayImage;
@property(retain, nonatomic) UIImage* highLightImage;
@property(retain, nonatomic) UIImage* normalImage;
-(void)dealloc;
-(void)setCurrentPage:(int)page;
-(void)update;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MBProgressHUD : UIView {
	int mode;
	int animationType;
	SEL methodForExecution;
	id targetForExecution;
	id objectForExecution;
	BOOL useAnimation;
	float yOffset;
	float xOffset;
	float width;
	float height;
	BOOL taskInProgress;
	float graceTime;
	float minShowTime;
	NSTimer* graceTimer;
	NSTimer* minShowTimer;
	NSDate* showStarted;
	UIView* indicator;
	UILabel* label;
	UILabel* detailsLabel;
	float progress;
	id<MBProgressHUDDelegate> delegate;
	NSString* labelText;
	NSString* detailsLabelText;
	float opacity;
	UIFont* labelFont;
	UIFont* detailsLabelFont;
	BOOL isFinished;
	BOOL removeFromSuperViewOnHide;
	UIView* customView;
	NSThread* execThread;
	CGAffineTransform rotationTransform;
	BOOL flag;
	int clipTime;
}
@property(retain) NSDate* showStarted;
@property(retain) NSTimer* minShowTimer;
@property(retain) NSTimer* graceTimer;
@property(assign) float height;
@property(assign) float width;
@property(retain) UIView* indicator;
@property(assign) BOOL flag;
@property(assign) float progress;
@property(retain) UIFont* detailsLabelFont;
@property(retain) UIFont* labelFont;
@property(assign) BOOL removeFromSuperViewOnHide;
@property(assign) BOOL taskInProgress;
@property(assign) float minShowTime;
@property(assign) float graceTime;
@property(assign) float yOffset;
@property(assign) float xOffset;
@property(assign) float opacity;
@property(copy) NSString* detailsLabelText;
@property(copy) NSString* labelText;
@property(assign) id<MBProgressHUDDelegate> delegate;
@property(assign) int animationType;
@property(assign) int mode;
@property(retain) UIView* customView;
+(BOOL)hideHUDForView:(id)view animated:(BOOL)animated;
+(id)showHUDAddedTo:(id)to animated:(BOOL)animated;
-(void)setTransformForCurrentOrientation:(BOOL)currentOrientation;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)fillRoundedRect:(CGRect)rect inContext:(CGContextRef)context;
-(void)drawRect:(CGRect)rect;
-(void)clearManual;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)hideUsingAnimation:(BOOL)animation;
-(void)showUsingAnimation:(BOOL)animation;
-(void)cleanUp;
-(void)done;
-(void)animationFinished:(id)finished finished:(BOOL)finished2 context:(void*)context;
-(void)launchExecution;
-(void)showWhileExecuting:(SEL)executing onTarget:(id)target withObject:(id)object animated:(BOOL)animated;
-(void)handleMinShowTimer:(id)timer;
-(void)handleGraceTimer:(id)timer;
-(void)hide:(BOOL)hide;
-(void)show:(BOOL)show;
-(void)showNoAnimation;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)willMoveToSuperview:(id)superview;
-(id)initWithView:(id)view;
-(id)initWithWindow:(id)window;
-(void)updateIndicators;
-(void)updateProgress;
-(void)updateDetailsLabelText:(id)text;
-(void)updateLabelText:(id)text;
@end

@interface MBRoundProgressView : UIProgressView {
}
-(void)drawRect:(CGRect)rect;
-(id)initWithDefaultSize;
@end

@interface QQFullScreenProcessSheet : UIWindow {
	UILabel* textLabel;
	NSTimer* timer;
@private
	NSString* text;
}
@property(retain, nonatomic) NSString* text;
-(void)dealloc;
-(void)dismiss;
-(void)showView;
-(void)showAnimation:(BOOL)animation;
-(void)show;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQProgressView : UIView {
	float progress;
}
@property(assign, nonatomic) float progress;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QZoneProgress : UIView {
	float width;
	float height;
	UIActivityIndicatorView* indicator;
	UILabel* label;
	NSString* labelText;
	UIFont* labelFont;
	BOOL _type;
	float opacity;
	BOOL isStartSendMessage;
	NSTimer* loadedTimer;
	unsigned loadedSecond;
	int _isSavePhoto;
	NSString* _title;
}
@property(assign, nonatomic) int isSavePhoto;
@property(assign, nonatomic) BOOL isStartSendMessage;
@property(retain, nonatomic) NSTimer* loadedTimer;
@property(assign, nonatomic) unsigned loadedSecond;
@property(assign, nonatomic) BOOL _type;
@property(retain, nonatomic) UIFont* labelFont;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) float width;
@property(assign, nonatomic) float opacity;
@property(copy, nonatomic) NSString* labelText;
-(void)dealloc;
-(void)fillRoundedRect:(CGRect)rect inContext:(CGContextRef)context;
-(void)drawRect:(CGRect)rect;
-(void)hideUsingAnimation:(BOOL)animation;
-(void)showUsingAnimation:(BOOL)animation;
-(void)hideAnimate;
-(void)showAnimate;
-(void)cancelTimer;
-(void)startTimer;
-(BOOL)isDisplay;
-(void)showTimeOut;
-(void)layoutAndStyle;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame prompt:(id)prompt;
@end

@interface QQView : UIView {
	UIImage* _backgroundImage;
	UIImage* _backgroundLandscapeImage;
	CGPoint _imageOffset;
	BOOL _isScaleBackGroundImage;
	BOOL _isLandScape;
	BOOL _isNavigationBarView;
	int _drawType;
@private
	id<QQViewDelegate> _touchDelegate;
}
@property(assign) int drawType;
@property(assign, nonatomic) BOOL isNavigationBarView;
@property(assign, nonatomic) id<QQViewDelegate> touchDelegate;
@property(retain, nonatomic) UIImage* backgroundLandscapeImage;
@property(retain, nonatomic) UIImage* backgroundImage;
@property(assign, nonatomic) CGPoint imageOffset;
@property(assign, nonatomic) BOOL isScaleBackGroundImage;
-(void)dealloc;
-(void)landscapeImageTrans:(BOOL)trans;
-(void)restoreData:(id)data;
-(void)drawRect:(CGRect)rect;
-(void)setBackgroundImage:(id)image animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQChatBgView : UIView {
	UIImageView* _imageView;
@private
	UIImage* image;
}
@property(retain, nonatomic) UIImage* image;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQViewControllerTimeoutHandler : NSObject {
	SEL _callback;
	NSString* _key;
}
@property(retain, nonatomic) NSString* key;
@property(assign, nonatomic) SEL callback;
-(void)dealloc;
@end

@interface QQViewController : UIViewController <ISkinProtocol> {
	UIButton* _leftButton;
	UIButton* _rightButton;
	QQView* _mainView;
	NSString* _controllerTitle;
	BOOL _notChangeLbtn;
	BOOL _isViewAppear;
	int _maxLeftTitleNum;
	NSString* _setSuperTitle;
@private
	UILabel* _titleLabel;
	UIImageView* _voiceView;
	BOOL _isPushViewController;
	BOOL _isAccountRelated;
	UIActivityIndicatorView* _actView;
	NSMutableDictionary* _timeoutHandlers;
	BOOL _shouldReloadAppearance;
	UIView* navigationBarView;
	BOOL _showLatestUnreadMessageEnabled;
}
@property(assign, nonatomic) BOOL showLatestUnreadMessageEnabled;
@property(assign) int maxLeftTitleNum;
@property(readonly, assign, nonatomic, getter=getNavigationBarView) UIView* navigationBarView;
@property(retain, nonatomic) NSString* setSuperTitle;
@property(assign, nonatomic) BOOL notChangeLbtn;
@property(retain, nonatomic) UIImageView* voiceView;
@property(assign, nonatomic) BOOL isAccountRelated;
@property(assign, nonatomic) BOOL isPushViewController;
@property(retain, nonatomic) NSString* controllerTitle;
@property(retain, nonatomic) QQView* mainView;
@property(readonly, assign, nonatomic) UIButton* rightButton;
@property(readonly, assign, nonatomic) UIButton* leftButton;
+(void)popViewController:(id)controller animated:(BOOL)animated;
+(void)pushViewControllerToNav:(id)nav childViewController:(id)controller animated:(BOOL)animated;
+(void)pushViewController:(id)controller childViewController:(id)controller2 animated:(BOOL)animated;
+(BOOL)CanShowAnimated;
+(void)showShareAppWebViewController:(id)controller title:(id)title shareAppID:(unsigned)anId shareIcon:(id)icon webViewStyle:(int)style stackStyle:(int)style6 andModel:(id)model;
+(void)showNoStyleTestWebController:(id)controller title:(id)title webViewStyle:(int)style stackStyle:(int)style4;
+(id)showWebControllerBottomBarNoSharePush:(id)push title:(id)title;
+(void)showWebController:(id)controller title:(id)title webViewStyle:(int)style stackStyle:(int)style4 chatCellModel:(id)model;
-(void)handleQQThemeChangedNotification:(id)notification;
-(void)reloadAppearance;
-(void)setTabBarHidden:(BOOL)hidden animation:(BOOL)animation;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)dismissViewControllerAnimated:(BOOL)animated completion:(id)completion;
-(void)presentViewController:(id)controller animated:(BOOL)animated completion:(id)completion;
-(void)dismissModalViewControllerAnimated:(BOOL)animated;
-(void)presentModalViewController:(id)controller animated:(BOOL)animated;
-(void)popQQController:(BOOL)controller;
-(void)pushQQViewControllerToNav:(id)nav animated:(BOOL)animated;
-(void)pushQQViewController:(id)controller animated:(BOOL)animated;
-(void)setCustomTitleView:(id)view;
-(void)removeRightButton;
-(void)removeLeftButton;
-(BOOL)isSupportRightDragToGoBack;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)repeatClickBottomTab;
-(void)removeTimeoutHandler;
-(void)addTimeoutHandler:(SEL)handler interval:(double)interval;
-(void)removeTimeoutHandler:(id)handler;
-(void)addTimeoutHandler:(id)handler selector:(SEL)selector interval:(double)interval;
-(void)commonTimeoutHandler:(id)handler;
-(void)setLandscape:(BOOL)landscape;
-(void)hideLoadingIndicator;
-(void)showLoadingIndicator;
-(id)appendSidToUrl:(id)url;
-(BOOL)shouldAppendSid:(id)sid;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)willApplicationAppear;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)printViewControllerInfo:(id)info;
-(void)loadStatusBar;
-(void)restoreData;
-(void)setTitle:(id)title;
-(void)resetTitleLabelFrame;
-(void)resetTitleView;
-(void)rightButtonClick:(id)click;
-(void)leftButtonClick:(id)click;
-(void)handleGestureRecognizerRight:(id)right;
-(void)createTextRightButton:(id)button action:(SEL)action;
-(void)createImageRightButton:(id)button action:(SEL)action;
-(void)createTextLeftButton:(id)button action:(SEL)action;
-(void)ResetLeftButton;
-(void)setRightButton:(id)button;
-(void)setLeftButton:(id)button;
-(void)handleUIApplicationWillChangeStatusBarFrameNotification:(id)handleUIApplication;
-(void)ActionLogin;
-(void)viewDidUnload;
-(id)GetLeftButtonTitle;
-(void)reSetLeftButtonTitle;
-(id)GetCurrentTitle;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)releaseUI;
-(void)dealloc;
-(void)clearReference:(id)reference;
-(id)init;
-(id)appendUinIfPAQQJumpUrl:(id)url;
-(void)didSelectURL:(id)url cellModel:(id)model;
-(void)showWebUrl:(id)url webTitle:(id)title;
-(void)showWebUrl:(id)url webTitle:(id)title style:(int)style;
-(void)openSharedURL:(id)url withModel:(id)model;
-(void)showQQBrowser:(id)browser;
-(void)openUrl:(id)url withTitle:(id)title;
-(void)showWebViewTopBarNoSharePush:(id)push title:(id)title;
-(void)showWebViewBottomBarNoSharePush:(id)push title:(id)title;
-(void)showWebView:(id)view title:(id)title forceWebViewStyle:(int)style stackStyle:(int)style4;
-(void)showWebView:(id)view title:(id)title webViewStyle:(int)style stackStyle:(int)style4 supportOrientations:(BOOL)orientations;
-(void)showWebView:(id)view title:(id)title webViewStyle:(int)style stackStyle:(int)style4;
-(void)showWebView:(id)view title:(id)title webViewStyle:(int)style stackStyle:(int)style4 recomposing:(BOOL)recomposing;
-(void)openUrl:(id)url withTitle:(id)title recomposing:(BOOL)recomposing;
-(void)showWebView:(id)view extraData:(id)data;
@end

@interface QQEmojiImageBoardView : UIView {
	int _pageId;
	BOOL _landscape;
}
@property(assign, nonatomic) BOOL landscape;
@property(assign, nonatomic) int pageId;
+(id)GetBoardViewWithPageId:(int)pageId frame:(CGRect)frame;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)drawFaces:(CGRect)faces;
-(id)imageWithFaceId:(int)faceId;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFaceImageBoardView : UIView {
	int _pageId;
	BOOL _landscape;
	BOOL _notDisplayDel;
	BOOL _delPressDown;
	BOOL _hightLinghted;
	CGRect _rectBG;
	int _emojiType;
}
@property(assign, nonatomic) int emojiType;
@property(readonly, assign, nonatomic) BOOL hightLinghted;
@property(assign, nonatomic) BOOL delPressDown;
@property(assign, nonatomic) BOOL notDisplayDel;
@property(assign, nonatomic) BOOL landscape;
@property(assign, nonatomic) int pageId;
+(id)GetBoardViewWithPageId:(int)pageId frame:(CGRect)frame;
-(id).cxx_construct;
-(void)dealloc;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)drawFaces:(CGRect)faces;
-(id)GetIOSEmojiFont;
-(id)GetIOSEmojiFace:(XXStruct_dcTzvA)face;
-(id)GetIOSEmojiInfo:(unsigned)info;
-(XXStruct_dcTzvA)GetEmojiFace:(unsigned)face;
-(unsigned)GetFaceKeyBoardMaxCount;
-(unsigned)GetFaceKeyBoardCol;
-(unsigned)GetFaceKeyBoardRow;
-(unsigned)GetIOSFaceIndex:(unsigned)index;
-(unsigned)GetQQFaceIndex:(unsigned)index;
-(unsigned)GetFaceIndex:(unsigned)index;
-(id)imageWithQQFaceID:(int)qqfaceID;
-(id)imageWithFaceId:(int)faceId;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQImageStruct : NSObject {
	NSDate* time;
	NSString* name;
}
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSDate* time;
-(int)compare:(id)compare;
-(void)dealloc;
@end

@interface QQFaceImageView : UIView {
	BOOL LandScape;
	BOOL flag;
	BOOL lastPage;
	NSMutableArray* _fileList;
	BOOL _settingIconPress;
}
@property(assign, nonatomic) BOOL settingIconPress;
@property(retain, nonatomic) NSMutableArray* fileList;
@property(assign, nonatomic) BOOL lastPage;
@property(assign, nonatomic) BOOL flag;
@property(assign, nonatomic) BOOL LandScape;
-(void)dealloc;
-(void)delayCancelHighlighted:(id)highlighted;
-(void)addSettingIconInRect:(CGRect)rect;
-(void)drawRect:(CGRect)rect;
-(void)changeFlag;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UIEmojiKeyBoard : UIView <UIScrollViewDelegate> {
	TXScrollView* scrollView1;
	QQPageControl* pageControl;
	int dragedFaceId;
	UIImageView* dragedFace;
	UIImageView* dragedPanel;
	NSTimer* timer;
	float boardWdith;
	id textDelegate;
}
@property(assign, nonatomic) id textDelegate;
@property(assign, nonatomic) float boardWdith;
@property(retain, nonatomic) TXScrollView* scrollView1;
+(void)releaseInstance;
+(id)getInstance;
-(void)dealloc;
-(void)moveDragPanelToCGPoint:(CGPoint)cgpoint;
-(void)pageControlDidChange:(id)pageControl;
-(void)scrollViewDidScroll:(id)scrollView;
-(int)faceIdFromTouchPoint:(CGPoint)touchPoint;
-(void)ragedFacePositionDidAnimated:(id)ragedFacePosition;
-(void)animateDragedFaceToChatTable;
-(void)animateDragedFaceToPosition:(CGPoint)position;
-(void)restoreDragedFaceSize:(id)size;
-(void)enlargeDragedFace;
-(void)faceImageSelected:(id)selected;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)resetKeyBoard;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(void)layoutScrollImages;
-(id)imageWithFaceId:(int)faceId;
@end

@interface UIEmojiKeyBoardLandscape : UIEmojiKeyBoard {
}
+(void)releaseInstance;
+(id)getInstance;
-(int)faceIdFromTouchPoint:(CGPoint)touchPoint;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface DrageFace : UIView {
	int _emojiType;
	NSString* _emojiString;
	UIImage* _image;
}
@property(retain, nonatomic) NSString* emojiString;
@property(assign, nonatomic) int emojiType;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UIFaceKeyBoard : UIView <UIScrollViewDelegate> {
	TXScrollView* scrollView1;
	QQPageControl* pageControl;
	int dragedFaceId;
	UIImageView* dragedFace;
	UIImageView* dragedPanel;
	NSTimer* timer;
	float boardWdith;
	id textDelegate;
	BOOL _notDisplayDel;
	int _emojiType;
@private
	float faceBoardViewHeight;
}
@property(assign, nonatomic) int emojiType;
@property(assign, nonatomic) float faceBoardViewHeight;
@property(assign, nonatomic) BOOL notDisplayDel;
@property(assign, nonatomic) id textDelegate;
@property(assign, nonatomic) float boardWdith;
@property(retain, nonatomic) TXScrollView* scrollView1;
+(void)releaseInstance;
+(id)getInstance;
-(void)dealloc;
-(id)pageControl;
-(void)loadGifView:(id)view withStringPath:(id)stringPath;
-(void)moveDragPanelToCGPoint:(CGPoint)cgpoint;
-(void)pageControlDidChange:(id)pageControl;
-(void)scrollViewDidScroll:(id)scrollView;
-(int)faceIdFromTouchPoint:(CGPoint)touchPoint;
-(void)ragedFacePositionDidAnimated:(id)ragedFacePosition;
-(void)animateDragedFaceToChatTable;
-(void)animateDragedFaceToPosition:(CGPoint)position;
-(void)restoreDragedFaceSize:(id)size;
-(void)enlargeDragedFace;
-(void)drawFaceFrame:(CGRect)frame;
-(void)faceImageSelected:(id)selected;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)resetKeyBoard;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)onPanGesture:(id)gesture;
-(id)initWithFrame:(CGRect)frame;
-(void)layoutScrollImages;
-(unsigned)GetMaxEmojiPageNum;
-(id)gifPathWithQQFaceID:(unsigned)qqfaceID;
-(id)gifPathWithFaceId:(int)faceId;
-(id)imageWithQQFaceID:(unsigned)qqfaceID;
-(id)imageWithFaceId:(int)faceId;
-(unsigned)GetMaxFaceIDCount;
@end

@interface EMojiInfo : NSObject {
	NSString* _emj;
	NSString* _imageName;
	NSString* _codeID;
	unsigned _index;
}
@property(assign, nonatomic) unsigned index;
@property(retain, nonatomic) NSString* codeID;
@property(retain, nonatomic) NSString* imageName;
@property(retain, nonatomic) NSString* emj;
-(id)description;
-(void)dealloc;
@end

@interface UIEmojiFaceKeyBoard : UIFaceKeyBoard {
	DrageFace* _showEmojiView;
	unsigned _maxEmojiCount;
	NSMutableArray* _emjoList;
}
@property(assign, nonatomic) unsigned maxEmojiCount;
+(void)releaseInstance;
+(id)getInstance;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)resetKeyBoard;
-(void)moveDragPanelToCGPoint:(CGPoint)cgpoint;
-(void)drawFaceFrame:(CGRect)frame;
-(id)GetCurrentIOSEmoji;
-(unsigned)GetMaxEmojiPageNum;
-(unsigned)GetMaxFaceIDCount;
-(unsigned)GetFaceKeyBoardCol;
-(unsigned)GetFaceKeyBoardRow;
-(id)createEmojiListWith:(id)with;
-(id)emojiImage:(id)image;
-(id)emojiPath:(id)path;
-(char*)cutUTF8Char:(id)aChar;
-(char*)cutChar:(const char*)aChar;
-(id)loadEmojiFileSources;
-(id)loadEmojiPlistPath;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UIFaceKeyBoardLandscape : UIFaceKeyBoard {
}
+(void)releaseInstance;
+(id)getInstance;
-(int)faceIdFromTouchPoint:(CGPoint)touchPoint;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface UIFaceSelfKeyBoard : UIView <UIScrollViewDelegate> {
	TXScrollView* scrollView1;
	QQPageControl* pageControl;
	int dragedFaceId;
	UIImageView* dragedFace;
	UIImageView* dragedPanel;
	NSTimer* timer;
	float boardWdith;
	BOOL ifgif;
	float edgeOffSetX;
	NSString* imagePath;
	NSString* uuid;
	id textDelegate;
	NSMutableArray* fileList;
}
@property(retain, nonatomic) NSMutableArray* fileList;
@property(assign, nonatomic) id textDelegate;
@property(assign, nonatomic) float boardWdith;
@property(retain, nonatomic) TXScrollView* scrollView1;
+(void)releaseInstance;
+(id)getInstance;
-(void)dealloc;
-(void)moveDragPanelToCGPoint:(CGPoint)cgpoint;
-(int)faceIdFromTouchPoint:(CGPoint)touchPoint;
-(void)ragedFacePositionDidAnimated:(id)ragedFacePosition;
-(void)animateDragedFaceToChatTable;
-(void)animateDragedFaceToPosition:(CGPoint)position;
-(void)restoreDragedFaceSize:(id)size;
-(void)enlargeDragedFace;
-(void)faceImageSelected;
-(void)pageControlDidChange:(id)pageControl;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)resetKeyBoard;
-(void)dragCustomFace;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)onPanGesture:(id)gesture;
-(void)loadGifView:(id)view withFaceId:(int)faceId;
-(id)imageWithFaceId:(int)faceId;
-(id)initWithFrame:(CGRect)frame fileList:(id)list;
-(void)layoutScrollImages;
@end

@interface UIFaceSelfKeyBoardLandscape : UIFaceSelfKeyBoard {
}
+(void)releaseInstance;
+(id)getInstance;
-(int)faceIdFromTouchPoint:(CGPoint)touchPoint;
-(id)initWithFrame:(CGRect)frame fileList:(id)list;
-(void)dealloc;
@end

@interface TXScrollView : UIScrollView {
	BOOL isFace;
	BOOL isDraged;
	BOOL isSelf;
	CGPoint faceOriginalPoint;
	id _superTouchObject;
}
@property(assign, nonatomic) id superTouchObject;
@property(readonly, assign, nonatomic) CGPoint faceOriginalPoint;
@property(assign, nonatomic) BOOL isSelf;
@property(assign, nonatomic) BOOL isDraged;
@property(assign, nonatomic) BOOL isFace;
-(id).cxx_construct;
-(void)dealloc;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)isOnFaceSelf:(CGPoint)aSelf;
-(BOOL)isOnFace:(CGPoint)face;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQImageViewTmp : QQView {
	float _left;
	float _right;
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) float right;
@property(assign, nonatomic) float left;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
@end

@interface MSFSearchBarTextField : UITextField {
}
-(void)drawPlaceholderInRect:(CGRect)rect;
@end

@interface MSFSearchBar : UIView <QIMTextInputDelegate, UITextFieldDelegate> {
	id<MSFSearchBarDelegate> _delegate;
	UIControl* _shadowView;
	UITextField* _textField;
	UIButton* _cancelButton;
	BOOL _bActive;
	BOOL _isTowtypeLeftButton;
	float _searchStatusEndLength;
@private
	BOOL _isIndentedForSectionIndexTitles;
}
@property(assign, nonatomic) BOOL isIndentedForSectionIndexTitles;
@property(retain, nonatomic) UITextField* textField;
@property(assign, nonatomic) int autocorrectionType;
@property(assign, nonatomic) int keyboardType;
@property(retain, nonatomic) NSString* placeholder;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) UIView* leftView;
@property(assign, nonatomic) id<MSFSearchBarDelegate> delegate;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)test:(id)test;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)reSetInitState;
-(void)cancelButtonClick;
-(void)hiddenKeyBorad;
-(void)showKeyBorad;
-(void)keyboardChange;
-(void)showBackgroundUnder:(id)under;
-(void)cancelButtonHidden;
-(void)hiddenButton:(BOOL)button;
-(void)cancelButtonShow;
-(void)dealloc;
-(BOOL)resignFirstResponder;
-(void)reloadAppearance;
-(BOOL)isActive;
-(id)initWithFrame:(CGRect)frame;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface EventLabel : UILabel {
	id<EventLabelDelegate> _delegate;
}
@property(assign, nonatomic) id<EventLabelDelegate> delegate;
-(void)dealloc;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQTabBarController : UITabBarController <QQSkinTabBarDelegate, UITabBarControllerDelegate> {
	BOOL isSupportLandscape;
	unsigned _supportedOrientation;
@private
	QQSkinTabBar* _tabBarView;
}
@property(assign, nonatomic) unsigned supportedOrientation;
@property(assign, nonatomic) BOOL isSupportLandscape;
-(void)reloadAppearance;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setTabBarHidden:(BOOL)hidden animation:(BOOL)animation;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)delegate;
-(void)setDelegate:(id)delegate;
-(void)removeAllUnreadIconNotification:(id)notification;
-(void)reciveClearMsgNotification:(id)notification;
-(void)hidesHintForTabAtIndex:(unsigned)index;
-(void)showUnreadTagForTabAtIndex:(unsigned)index withCount:(unsigned)count;
-(void)showUnreadTagForTabAtIndexOnMainThread:(id)indexOnMainThread;
-(void)showHintForTabAtIndex:(unsigned)index;
-(void)showHintForTabAtIndexOnMainThread:(id)indexOnMainThread;
-(void)tabBar:(id)bar didSelectItem:(id)item;
-(void)setSelectedIndex:(unsigned)index;
-(void)QQSkinTabBar:(id)bar didClickItemAtIndex:(int)index;
-(void)setViewControllers:(id)controllers animated:(BOOL)animated;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(BOOL)shouldAutomaticallyForwardRotationMethods;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
@end

@interface QQTabBarItem : UITabBarItem {
	NSString* _normalImageName;
	NSString* _hiImageName;
}
@property(retain, nonatomic) NSString* hiImageName;
@property(retain, nonatomic) NSString* normalImageName;
-(void)dealloc;
-(id)initWithTitle:(id)title tag:(int)tag;
@end

@interface EGORefreshTableHeaderView : UIView {
	id _delegate;
	int _state;
	UILabel* _lastUpdatedLabel;
	UILabel* _statusLabel;
	CALayer* _arrowImage;
	UIView* _bgImgView;
	UIView* _contentView;
	UIActivityIndicatorView* _activityView;
	BOOL _isNoBackground;
@private
	BOOL _isLoadInBackground;
}
@property(assign, nonatomic) BOOL isLoadInBackground;
@property(readonly, assign, nonatomic) UIView* contentView;
@property(readonly, assign, nonatomic) int state;
@property(assign, nonatomic) id<EGORefreshTableHeaderDelegate> delegate;
-(void)dealloc;
-(void)setLoading:(id)loading;
-(void)egoRefreshScrollViewDataSourceDidFinishedLoading:(id)egoRefreshScrollViewDataSource;
-(void)egoRefreshTableHeaderDidTriggerRefreshAfterDelay;
-(void)egoRefreshScrollViewDidEndDragging:(id)egoRefreshScrollView;
-(void)egoRefreshScrollViewDidScroll:(id)egoRefreshScrollView;
-(BOOL)isRefreshLoading;
-(void)setState:(int)state;
-(void)refreshLastUpdatedDate;
-(void)reloadAppearance;
-(void)setNoBackground;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithFrameForRecent:(CGRect)recent;
-(void)adjustSubView;
@end

@interface QQTableViewCell : UITableViewCell {
	BOOL stateDel;
	BOOL stat;
	int lastState;
	BOOL condition;
	BOOL _editStatus;
	unsigned _currectStatus;
}
@property(assign, nonatomic) unsigned currectStatus;
@property(assign, nonatomic) BOOL stat;
@property(assign, nonatomic) int lastState;
@property(assign, nonatomic) BOOL condition;
@property(assign, nonatomic) BOOL stateDel;
@property(assign, nonatomic) BOOL editStatus;
-(void)dealloc;
-(void)didTransitionToState:(unsigned)state;
-(void)willTransitionToState:(unsigned)state;
-(void)initState;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQTableViewCellTime : UITableViewCell {
	QQTimeModel* _time;
	UILabel* _textLabelTime;
}
@property(retain, nonatomic) QQTimeModel* time;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQTipsViewPool : NSObject <MBProgressHUDDelegate> {
	QQFullScreenProcessSheet* sheet;
	QQAlertView* failAlert;
	BOOL bLoginLoading;
	MBProgressHUD* HUD;
	NSTimer* timer;
	QQTopTipView* topTipView;
}
+(id)GetInstance;
-(void)dismissTopTipView;
-(void)showTopTipView:(id)view delay:(double)delay hasTopTitle:(BOOL)title;
-(BOOL)showFailedTipsIfDisconnected:(id)disconnected;
-(BOOL)isTipsShow;
-(BOOL)isLoginLoading;
-(void)dealloc;
-(void)hideSheet;
-(void)showFailedTipsWithText:(id)text;
-(void)showRoamAlert:(id)alert;
-(void)showPublishingSuccess;
-(void)showProcessingImageTip;
-(void)showHistorySucc;
-(void)showHistoryRoamTimeOut;
-(void)showEmptyPwdTip;
-(void)showErrorAccountTip;
-(void)showDuplicateAddTip;
-(void)showProfileFailedTip;
-(void)showListFullTip;
-(void)showListTimeOutTip;
-(void)showTips;
-(void)setTips:(id)tips;
-(void)showTextOverFlowTip;
-(void)showDeleteAPNFailTip;
-(void)clearManual;
-(void)showNetWorkFailTip;
-(void)dimissLogInTips;
-(void)hiddeLoginingTips;
-(void)hiddenTimeTips;
-(void)showTimeTipWithReason:(id)reason waitDone:(BOOL)done;
-(void)showTimeTipWithReason:(id)reason withDelayTimeForQQZGroup:(int)qqzgroup;
-(void)showTimeTipWithReason:(id)reason withDelayTime:(int)delayTime;
-(void)showTimeTipWithReason:(id)reason animation:(BOOL)animation;
-(void)showTimeTipWithReason:(id)reason;
-(void)showTipsWithReason:(id)reason imageTip:(id)tip;
-(void)showLoginFailedWithReason:(id)reason;
-(void)showLoginSuccess;
-(void)showState:(id)state success:(BOOL)success withDelayTime:(int)delayTime;
-(void)showState:(id)state success:(BOOL)success;
-(void)show30sLoginingTips;
-(void)showLoginAccount;
-(void)showLoginingTips;
-(void)showLoadingTipsImmediately:(id)immediately;
-(void)showLoadingTips:(id)tips;
-(void)cleanTips;
-(void)showLoadingTips;
-(void)hudWasHidden:(id)hidden;
-(id)waittingMessageTips;
-(id)pullDownMoreMessageTips;
-(id)init;
-(void)rotateByCurrentOrientation;
@end

@interface FullscreenOverlayView : UIWindow {
	UIImageView* imageView;
	BOOL _shown;
}
@property(assign, nonatomic) BOOL shown;
-(void)setFullscreenImage:(id)image;
-(void)dealloc;
-(void)dismiss;
-(void)show;
-(id)initWithImage:(id)image;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

@interface SimpleAlertMsgView : UIView {
	UIFont* _font;
	NSString* _content;
	EmotionParseResult* _layoutResult;
}
@property(retain, nonatomic) NSString* content;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)resizeWidth:(int)width;
-(void)dealloc;
-(id)initWithMsg:(id)msg andFont:(id)font;
@end

@interface SimpleAlertView : FullscreenOverlayView {
	UIView* _bgView;
	NSString* _title;
	NSString* _message;
	UILabel* _titleLabel;
	SimpleAlertMsgView* _msgView;
	UIView* _container;
	UIImageView* _backgroundView;
	float _maxMiddenHeight;
	id<SimpleAlertViewDelegate> __delegate;
	NSMutableArray* _buttonTitleArray;
	NSMutableArray* _buttonArray;
	id _object;
	int _state;
}
@property(readonly, assign, nonatomic) UILabel* titleLabel;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) id object;
@property(assign, nonatomic) float maxMiddenHeight;
@property(retain, nonatomic) NSArray* buttonArray;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) id<SimpleAlertViewDelegate> delegate;
-(void)otherButtonClick:(id)click;
-(void)cancelButtonClick:(id)click;
-(void)setTitle:(id)title message:(id)message;
-(void)layoutSubviews;
-(id)initWithOverlayImage:(id)overlayImage contentBackground:(id)background buttonNormalImage:(id)image buttonHighlightImage:(id)image4 delegate:(id)delegate title:(id)title message:(id)message buttonArray:(id)array;
-(id)initWithStyle:(int)style delegate:(id)delegate title:(id)title message:(id)message buttonArray:(id)array;
-(void)dealloc;
@end

@interface FullscreenProgressIndicator : FullscreenOverlayView {
	ProgressIndicator* indicator;
}
@property(retain, nonatomic) ProgressIndicator* indicator;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SimpleAlertViewEx : SimpleAlertView <EventLabelDelegate> {
	EventLabel* _exLabel;
	UIButton* _exButton;
	id<SimpleAlertViewExDelegate> _delegateEx;
}
@property(assign, nonatomic) id<SimpleAlertViewExDelegate> delegateEx;
@property(retain, nonatomic) UIButton* exButton;
@property(retain, nonatomic) EventLabel* exLabel;
-(void)CheckButtonClick:(id)click;
-(void)didLabelTouches:(id)touches;
-(void)layoutSubviews;
-(id)initWithOverlayImage:(id)overlayImage contentBackground:(id)background buttonNormalImage:(id)image buttonHighlightImage:(id)image4 delegate:(id)delegate title:(id)title message:(id)message buttonArray:(id)array;
-(void)dealloc;
@end

@interface SimpleInputAlertView : SimpleAlertView <UITextFieldDelegate> {
	UIImageView* _bgImageView;
	UITextField* _inputTextField;
	float _topOffset;
}
@property(readonly, assign, nonatomic) UITextField* inputTextField;
@property(assign, nonatomic) float topOffset;
-(void)cancelButtonClick:(id)click;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)dismiss;
-(void)show;
-(void)reDrawSubView;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithOverlayImage:(id)overlayImage contentBackground:(id)background buttonNormalImage:(id)image buttonHighlightImage:(id)image4 delegate:(id)delegate title:(id)title message:(id)message buttonArray:(id)array;
@end

@interface QQOperationQueue : NSOperationQueue {
}
+(id)mainQueue;
@end

@interface QQTimeModel : NSObject {
	double time;
}
@property(assign, nonatomic) double time;
-(id)initWithTime:(double)time;
@end

@interface QQTimeModeInterval : QQTimeModel {
	NSString* _intervalString;
	BOOL _isToday;
}
@property(assign, nonatomic) BOOL isToday;
@property(retain, nonatomic) NSString* intervalString;
-(void)dealloc;
-(id)initWithTime:(double)time andInterval:(id)interval;
@end

@interface QQGlobal : NSObject {
}
+(id)separateMarketFaceFromMessageModel:(id)messageModel content:(id)content;
+(id)topViewController;
+(id)ChatDataFileForUin:(id)uin;
+(id)standarBarItem:(id)item target:(id)target action:(SEL)action;
+(id)CreateTimeModelForMessage:(id)message withInterval:(double)interval;
+(id)insertArray:(id)array toArray:(id)array2;
+(id)getConsecutiveGroupMsgArray:(id)array;
+(id)newLargeMessageMerger:(id)merger;
+(id)CreateTimeModelForMessage:(id)message;
+(id)CreateGroupMsgModelForMessage:(id)message;
+(id)buddyListTableViewCell:(id)cell;
+(id)navigationBarTitleLabel;
+(id)customSearchBar;
+(id)navigationBarBackButton;
+(id)defaultNavigationBarRoundButton;
+(id)navigationBarRoundButton;
@end

@interface MicroBlogEngine : NSObject {
	NSString* uin;
	NSString* pwd;
	MicroBlogSvrEngine* microblogProtrolEngine;
	NSMutableDictionary* dict;
}
@property(retain, nonatomic) MicroBlogSvrEngine* microblogProtrolEngine;
@property(retain, nonatomic) NSString* pwd;
@property(retain, nonatomic) NSString* uin;
+(id)GetInstance;
-(void)registerFunctionWithTarget:(id)target selector:(SEL)selector key:(id)key arg:(id)arg;
-(void)registerFunctionWithTarget:(id)target selector:(SEL)selector key:(id)key arg:(id)arg seq:(int*)seq;
-(BOOL)invokeFunctionForKey:(id)key arg:(id)arg;
-(BOOL)invokeFunctionForKey:(id)key;
-(void)removeTarget:(id)target;
-(void)removeFunctionWithkey:(id)withkey;
-(BOOL)isHasFunctionWithKey:(id)key;
-(void)setAccout:(id)accout :(id)arg2;
-(void)dealloc;
-(id)init;
@end

@interface MicroBlogSvrEngine : NSObject <CIMMicroBlogSvrEngineDelegate, TTURLRequestDelegate> {
	MicroBlogPacket* packet;
	MicroBlogUnPacket* unPacket;
	NSMutableDictionary* userInfoDic;
}
+(id)GetInstance;
-(void)requestDidCancelLoad:(id)request;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)requestDidFinishLoad:(id)request;
-(void)requestDidStartLoad:(id)request;
-(void)sendData:(char*)data dataLen:(unsigned)len;
-(void)handlPostPicMsg:(XXStruct_V_6rKB)msg;
-(void)PostPicMsg:(const char*)msg picData:(const char*)data picLen:(int)len seq:(int*)seq;
-(void)PostMsg:(const char*)msg picURL:(const char*)url seq:(int*)seq;
-(void)handlePostMsg:(XXStruct_D6MVsA)msg;
-(void)RecvData:(char*)data :(int)arg2 serviceCmd:(const char*)cmd seq:(int)seq;
-(void)CIMMicroBlogSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)setUin:(long long)uin;
-(void)dealloc;
-(id)init;
@end

@interface AdConfigEngine : NSObject <AdConfigManagerDelegate> {
	AdConfigManager* adConfigManager;
	id<AdConfigDelegate> delegate;
}
@property(retain, nonatomic) id<AdConfigDelegate> delegate;
@property(readonly, assign) AdConfigManager* adConfigManager;
+(id)GetInstance;
-(BOOL)IsConfigExpired:(int)expired;
-(int)GetMsgConfigPeriod:(int)period;
-(id)GetMsgConfigIndexArrayWithHour:(int)hour;
-(id)GetImgConfigPicFileName:(int)name;
-(int)GetMsgConfigType:(int)type;
-(id)GetMsgConfigMsg:(int)msg;
-(id)GetMsgConfigContent:(int)content;
-(long)GetMsgConfigID:(int)anId;
-(id)GetMsgConfigDes:(int)des;
-(id)GetMsgConfigPicFileName:(int)name;
-(int)GetMsgConfigSeq;
-(int)GetMsgConfigCount;
-(id)GetTextConfigContent;
-(void)NotifyConfigUpdated:(short)updated;
-(void)StartGetConfig:(unsigned)config;
-(void)dealloc;
-(id)init;
@end

@interface AdConfigManager : NSObject <ConfigTransceiverDelegate> {
	unsigned short nVersion;
	unsigned nUIN;
	unsigned char nScreenType;
	NSString* strLicense;
	unsigned long timeStamp;
	NSMutableArray* configItemArray;
	id<AdConfigManagerDelegate> delegate;
	AdConfigTransceiver* _transceiver;
@private
	NSString* strConfigFilePath;
}
@property(retain, nonatomic) id<AdConfigManagerDelegate> delegate;
@property(retain, nonatomic) NSString* strConfigFilePath;
@property(retain, nonatomic) NSString* strLicense;
@property(assign, nonatomic) unsigned char nScreenType;
@property(assign, nonatomic) unsigned nUIN;
@property(assign, nonatomic) unsigned short nVersion;
@property(assign, nonatomic) unsigned long timeStamp;
-(void)HandleData:(id)data;
-(BOOL)ParseConfig:(char*)config Length:(int)length;
-(void)GetConfig:(unsigned)config;
-(void)InitConfig;
-(int)MakeRequestPkg:(char*)pkg;
-(int)CalPkgLen;
-(void)LoadConfigItems;
-(void)dealloc;
-(id)initWidthVersion:(unsigned short)version ScreenType:(unsigned char)type License:(id)license delegate:(id)delegate;
@end

@interface AdConfigTransceiver : NSObject <TTURLRequestDelegate> {
	id<ConfigTransceiverDelegate> delegate;
	NSMutableData* recvData;
}
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)RequestConfig:(id)config postData:(id)data delegate:(id)delegate;
-(void)dealloc;
@end

@interface AdSvrEngine : NSObject <CIMAdSvrEngineDelegate> {
	id _respondEngine;
}
@property(retain, nonatomic) id respondEngine;
+(id)GetInstance;
-(void)recvFirstLoginAdMsg:(unsigned)msg;
-(void)CIMAdSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)saveAdMsgToDB:(AdMsgInfo*)db;
-(void)dealloc;
-(id)init;
@end

@interface AdConfigItemBase : NSObject {
	NSString* strLicense;
	unsigned nUIN;
	short nCID;
	NSString* strConfigFilePath;
	void* _lastCryptor;
	void* _curCryptor;
}
@property(retain, nonatomic) NSString* strConfigFilePath;
@property(retain, nonatomic) NSString* strLicense;
@property(assign, nonatomic) short nCID;
@property(assign, nonatomic) unsigned nUIN;
-(unsigned)GetSeq;
-(void)SetDefaultAd;
-(BOOL)CheckOutDate;
-(BOOL)Load;
-(BOOL)Save:(char*)save ksLen:(int)len;
-(id)GetFileName;
-(id)GetFilePath;
-(BOOL)ParseDecrypt:(short)decrypt decryptData:(char*)data decryptLen:(int)len local:(BOOL)local;
-(BOOL)ParseEncryptLoad:(short)load ksData:(char*)data ksLen:(int)len;
-(BOOL)ParseEncrypt:(short)encrypt ksData:(char*)data ksLen:(int)len;
-(void)InitCryptor:(CCrypt*)cryptor UIN:(unsigned)uin;
-(char*)GetMd5Key:(unsigned)key;
-(BOOL)MD5HashHexString:(char*)string OUT:(char*)anOut;
-(void)dealloc;
-(id)initWithCID:(unsigned short)cid UIN:(unsigned)uin license:(id)license configFilePath:(id)path;
-(CCrypt*)curCryptor;
-(CCrypt*)lastCryptor;
-(void)destroyCryptor;
-(void)createCryptor;
@end

@interface AdConfigItemFactory : NSObject {
	AdTextConfigItem* adTextConfigItem;
	AdMsgConfigItem* adMsgConfigItem;
	AdPicConfigItem* adPicConfigItem;
	AdMsgExConfigItem* adMsgExConfigItem;
	AdConfigManager* adConfigManager;
}
@property(retain, nonatomic) AdConfigManager* adConfigManager;
@property(readonly, assign) AdMsgExConfigItem* adMsgExConfigItem;
@property(readonly, assign) AdPicConfigItem* adPicConfigItem;
@property(readonly, assign) AdMsgConfigItem* adMsgConfigItem;
@property(readonly, assign) AdTextConfigItem* adTextConfigItem;
+(id)GetInstance;
-(void)dealloc;
@end

@interface AdMsgConfigSubItem : NSObject {
	long cID;
	BOOL cShow;
	BOOL cType;
	NSString* sDes;
	NSString* sImg;
	NSString* sMsg;
}
@property(readonly, assign, nonatomic) int contentType;
@property(retain, nonatomic) NSString* sMsg;
@property(retain, nonatomic) NSString* sImg;
@property(retain, nonatomic) NSString* sDes;
@property(assign, nonatomic) BOOL cType;
@property(assign, nonatomic) BOOL cShow;
@property(assign, nonatomic) long cID;
-(void)dealloc;
@end

@interface AdMsgConfigItem : AdConfigItemBase <TTURLRequestDelegate> {
	unsigned long dwSEQ;
	unsigned long dwSTM;
	unsigned long dwETM;
	NSMutableArray* subItems;
}
@property(assign, nonatomic) unsigned long dwETM;
@property(assign, nonatomic) unsigned long dwSTM;
@property(assign, nonatomic) unsigned long dwSEQ;
-(int)GetSubItemType:(int)type;
-(long)GetRespCID:(int)cid;
-(id)GetRespMsg:(int)msg;
-(id)GetRespContent:(int)content;
-(id)GetRespDest:(int)dest;
-(id)GetSubItemPicFileName:(int)name;
-(int)GetSubItemCount;
-(unsigned)GetSeq;
-(void)requestDidFinishLoad:(id)request;
-(BOOL)ParseDecrypt:(short)decrypt decryptData:(char*)data decryptLen:(int)len local:(BOOL)local;
-(void)downloadPushbannerPic:(id)pic;
-(BOOL)CheckOutDate;
-(void)dealloc;
@end

@interface AdTextConfigSubItem : NSObject {
	long cID;
	NSString* strConfig;
}
@property(retain, nonatomic) NSString* strConfig;
@property(assign, nonatomic) long cID;
-(void)dealloc;
@end

@interface AdTextConfigItem : AdConfigItemBase {
	unsigned long dwSEQ;
	unsigned long dwSTM;
	unsigned long dwETM;
	NSMutableArray* subItems;
}
@property(assign, nonatomic) unsigned long dwETM;
@property(assign, nonatomic) unsigned long dwSTM;
@property(assign, nonatomic) unsigned long dwSEQ;
-(unsigned)GetSeq;
-(id)GetText;
-(BOOL)ParseDecrypt:(short)decrypt decryptData:(char*)data decryptLen:(int)len local:(BOOL)local;
-(BOOL)CheckOutDate;
-(void)dealloc;
@end

@interface QAdRespItem : NSObject {
	NSString* _respDesc;
	NSString* _respType;
	NSString* _respAddr;
	NSString* _respContents;
}
@property(retain, nonatomic) NSString* respContents;
@property(retain, nonatomic) NSString* respAddr;
@property(retain, nonatomic) NSString* respType;
@property(retain, nonatomic) NSString* respDesc;
-(void)dealloc;
-(id)init;
@end

@interface QAdMsg : NSObject {
	NSString* _desc;
	NSString* _subject;
	NSString* _respCondition;
	NSArray* _respItems;
}
@property(readonly, assign, nonatomic) NSArray* respItems;
@property(readonly, assign, nonatomic) NSString* respCondition;
@property(readonly, assign, nonatomic) NSString* subject;
@property(readonly, assign, nonatomic) NSString* desc;
-(void)dealloc;
-(void)reset;
-(void)removeRespItem:(int)item;
-(id)getRespItem:(int)item;
-(void)addRespItem:(id)item;
-(void)fillRespCondition:(id)condition;
-(void)fillSubject:(id)subject;
-(void)fillDesc:(id)desc;
-(id)init;
@end

@interface QAdMsgParser : NSObject {
@private
	BOOL _parsingSimpleMsg;
	NSString* _uin;
	NSString* _nickname;
	NSMutableArray* _paramKeyArray;
	NSMutableArray* _paramValArray;
}
-(BOOL)parseData:(id)data AdMsg:(id)msg;
-(void)dealloc;
-(id)initWithUIN:(long long)uin Nickname:(id)nickname;
-(BOOL)initParamBase;
@end

@interface CardInfoRequestItem : NSObject {
	int _seqId;
	int _requestType;
	NSString* _requestCmd;
	NSTimer* _timer;
	id _data;
	long long _userUIN;
}
@property(assign, nonatomic) long long userUIN;
@property(retain, nonatomic) id data;
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) NSString* requestCmd;
@property(assign, nonatomic) int requestType;
@property(readonly, assign, nonatomic) int seqId;
-(void)dealloc;
-(id)initWithSeqId:(int)seqId requestType:(int)type requestCmd:(id)cmd userUIN:(long long)uin timeoutInterval:(double)interval target:(id)target selector:(SEL)selector;
@end

@interface CardInfoEngine : NSObject <CIMCardInfoEngineDelegate, CardInfoFileTransferDelegate> {
	int _seqId;
	NSMutableArray* _requestQueue;
	NSMutableArray* _fileTransferQueue;
	NSTimer* _fileTransferClearTimer;
}
+(id)GetInstance;
-(void)UpdateServerAlbum;
-(void)CardInfoFileTransfer:(id)transfer curTransSize:(int)size totalTransSize:(int)size3;
-(void)CardInfoFileTransfer:(id)transfer didFinished:(int)finished;
-(void)CardInfoFileTransfer:(id)transfer verfiyCodePassed:(BOOL)passed;
-(void)CardInfoFileTransfer:(id)transfer verifyCodeData:(id)data codeType:(id)type prompt:(id)prompt;
-(void)CIMCardInfoEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)didRespPushCardMsg:(PushCardMsg*)msg;
-(void)didRespFavorite:(RespFavorite*)favorite;
-(void)didRespFavoriteList:(RespGetFavoriteList*)list;
-(void)didGetCardSwitch:(RespGetCardSwitch*)aSwitch;
-(void)didSetCardSwitch:(RespSetCardSwitch*)aSwitch;
-(void)didSetCard:(RespSetCard*)card;
-(void)didRespVote:(RespVote*)vote;
-(void)didRespGetVoterList:(RespGetVoterList*)list;
-(void)didRespGetVisitorList:(RespGetVisitorList*)list;
-(void)didRespPicSafetyCheck:(RespPicSafetyCheck*)check;
-(void)didRespUpdateQQFace:(RespUpdateQQFace*)face;
-(void)didRespUpdateIntro:(RespUpdateIntro*)intro;
-(void)didRespReplaceFace:(RespReplaceFace*)face;
-(void)didRespSetFace:(RespAddFace*)face;
-(void)didRespAddFace:(RespAddFace*)face;
-(void)didRespDelFace:(RespDelFace*)face;
-(void)delLocalFaceInfo:(id)info :(id)arg2 :(id)arg3;
-(void)didRespGetFace:(RespGetFace*)face;
-(void)didRespFaceInfo:(RespFaceInfo*)info;
-(void)didRespHYMakeFriendsCard:(RespHYMakeFriendsCard*)card;
-(void)didRespHYCommonCard:(RespHYCommonCard*)card;
-(void)didRespMakeFriendsCard:(RespMakeFriendsCard*)card;
-(void)didRespCommonCard:(RespCommonCard*)card;
-(BOOL)CancelTransferWithSessionID:(int)sessionID;
-(void)ModifyCardZanIncrement:(int)increment;
-(void)ModifyCardBackground:(id)background;
-(void)ModifyCardTSingle:(short)single;
-(void)ModifyCardTags:(id)tags;
-(void)ModifyFriCommonCardRemark:(id)remark withUIN:(long long)uin;
-(void)ModifyCommonCardSign:(id)sign;
-(BOOL)ReportIllegalUser:(long long)user;
-(void)notifyReportIllegalSucc:(id)succ;
-(id)GetWallPaperImageWithFileKey:(id)fileKey;
-(int)GetLocalCardCoverImageIndex:(id)index;
-(id)WallPaperImageWithFileKey:(id)fileKey;
-(id)GetCardIntroImageFileWithUIN:(long long)uin picScale:(int)scale;
-(id)GetCardIntroVoiceFileWithUIN:(long long)uin;
-(id)GetCardFaceImageFileWithUIN:(long long)uin faceID:(id)anId picScale:(int)scale scene:(int)scene;
-(id)GetCardFaceImageFileWithUIN:(long long)uin faceID:(id)anId picScale:(int)scale;
-(void)DownloadCardFaceImageWithDictionary:(id)dictionary;
-(id)CardFaceImageFileNameWithUIN:(long long)uin faceID:(id)anId picScale:(int)scale;
-(id)GetCardQQFaceImageFileWithUIN:(long long)uin picScale:(int)scale;
-(BOOL)RefreshVerifyCodeWithSessionID:(int)sessionID;
-(BOOL)CommitVerifyCode:(id)code sessionID:(int)anId;
-(BOOL)ReplaceFaceInfo:(id)info withImageFile:(id)imageFile;
-(int)UploadWallPaperImage:(id)image;
-(BOOL)SetFaceInfoWithFaceInfoIds:(id)faceInfoIds;
-(BOOL)AddCardFaceInfoWithFileInfos:(id)fileInfos;
-(int)AddCardFaceInfoWithFile:(id)file title:(id)title desc:(id)desc;
-(int)AddCardFaceInfoWithFile:(id)file;
-(int)AddCardFaceInfo:(id)info title:(id)title desc:(id)desc;
-(int)AddCardFaceInfo:(id)info;
-(BOOL)DeleteCardFaceInfo:(id)info indexs:(id)indexs;
-(void)UpdateAlbum:(long long)album;
-(BOOL)UpdateCardFaceInfo:(long long)info;
-(int)CommitQQFace:(id)face syncQQ:(BOOL)qq;
-(BOOL)CommitCardIntroInfoWithPicture:(id)picture;
-(BOOL)CommitCardIntroInfoWithVoice:(id)voice;
-(BOOL)CommitCardIntroInfoWithText:(id)text;
-(BOOL)UpdateFriMakeFriendsCard:(long long)card userType:(int)type;
-(BOOL)UpdateFriCommonCard:(long long)card;
-(BOOL)UpdateMyMakeFriendsCard:(int)card;
-(BOOL)UpdateMyCommonCardWithTriggered:(BOOL)triggered;
-(BOOL)UpdateMyCommonCard;
-(BOOL)setCard:(long long)card background:(id)background;
-(BOOL)setCardTags:(long long)tags tagVector:(id)vector delTagVector:(id)vector3 addTagVector:(id)vector4;
-(BOOL)setCardSingle:(long long)single single:(BOOL)single2;
-(void)PraiseFriend:(long long)aFriend desUin:(long long)uin;
-(void)reqGetFavoriteList:(int)list :(id)arg2;
-(void)reqFavorite:(id)favorite :(BOOL)arg2 :(id)arg3;
-(id)GetFullVotersWithUIN:(long long)uin userData:(id)data;
-(id)GetFullVisitorsWithUIN:(long long)uin userData:(id)data;
-(id)GetVotersWithUIN:(long long)uin;
-(id)GetVisitorsWithUIN:(long long)uin;
-(BOOL)IsQQFaceExist:(long long)exist;
-(id)GetFaceInfo:(long long)info;
-(id)GetMakeFriendsCardWithUIN:(long long)uin;
-(id)GetCommonCardWithUIN:(long long)uin;
-(BOOL)Reset;
-(BOOL)Reload;
-(void)updateVoterWithUIN:(long long)uin voters:(vector<QQService::Visitor, std::allocator<QQService::Visitor> >*)voters;
-(void)updateVisitorWithUIN:(long long)uin visitors:(vector<QQService::Visitor, std::allocator<QQService::Visitor> >*)visitors;
-(void)updateFaceInfoDicWithUIN:(long long)uin faceTimeStamp:(int)stamp faceInfos:(vector<QQService::FaceInfo, std::allocator<QQService::FaceInfo> >*)infos;
-(BOOL)isNeedRetryDownload:(id)download;
-(int)translateFileRequestType:(int)type;
-(void)deleteAllFilesWithFileKey:(id)fileKey isImage:(BOOL)image;
-(void)saveOriginalUploadFile:(id)file fileType:(int)type fileKey:(id)key;
-(id)saveTempImageFileWithPath:(id)path;
-(id)saveTempImageFile:(id)file;
-(void)doClearTransferQueue:(id)queue;
-(void)flushQQFaceID:(id)anId withUIN:(long long)uin;
-(BOOL)flushCardInfoModel:(id)model faceIDs:(id)ids;
-(void)activateTransferQueue;
-(id)getFileNameWithFileKey:(id)fileKey;
-(void)removeFileTransferWithSessionID:(int)sessionID;
-(id)getDownloadFileTransferWithFileKey:(id)fileKey picScale:(int)scale;
-(id)getUploadFileTransferWithFileName:(id)fileName;
-(id)getFileTransferWithRequestType:(int)requestType;
-(id)getFileTransferWithSessionId:(int)sessionId;
-(void)updateAlbumPicCountWithUIN:(long long)uin count:(int)count;
-(BOOL)saveFaceInfoIDDic:(id)dic;
-(BOOL)saveMakeFriendsCardInfo:(id)info;
-(BOOL)saveCommonCardInfo:(id)info;
-(int)getFaceInfoIDTimeStamp:(long long)stamp;
-(id)loadFaceInfoID:(long long)anId;
-(id)loadMakeFriendsCardInfo:(long long)info;
-(id)loadCommonCardInfo:(long long)info;
-(void)onPacketError:(id)error;
-(void)requestTimeout:(id)timeout;
-(int)removeQueueRequestWithCmd:(id)cmd;
-(int)removeQueueRequest:(int)request;
-(id)getQueueRequestWithTimer:(id)timer;
-(id)getQueueRequestWithSeqId:(int)seqId;
-(id)getQueueRequestWithType:(int)type uin:(long long)uin;
-(id)getQueueRequestWithType:(int)type;
-(id)requestGetFavoriteList:(int)list :(id)arg2;
-(id)requestFavorite:(id)favorite :(BOOL)arg2 :(id)arg3;
-(id)ReqGetCardSwitch:(long long)aSwitch;
-(id)ReqSetCardSwitch:(long long)aSwitch bOpen:(BOOL)open;
-(id)ReqSetCard:(long long)card background:(id)background;
-(id)ReqSetCard:(long long)card tagVector:(id)vector delTagVector:(id)vector3 addTagVector:(id)vector4;
-(id)ReqSetCard:(long long)card single:(BOOL)single;
-(id)RequestVote:(long long)vote desUin:(long long)uin;
-(id)RequestGetVoterList:(long long)list userData:(id)data;
-(id)RequestGetVisitorList:(long long)list userData:(id)data;
-(id)RequestReportIllegalUser:(long long)user;
-(id)RequestUpdateIntro:(short)intro content:(id)content;
-(id)RequestReplaceFace:(int)face oldFaceInfoId:(id)anId newFaceInfoId:(id)anId3;
-(id)RequestAddFace:(int)face faceInfoIds:(id)ids;
-(id)RequestDelFace:(int)face faceInfoIds:(id)ids;
-(id)RequestFaceWithUIN:(long long)uin pageSize:(int)size index:(long long)index cookie:(id)cookie;
-(id)RequestFaceInfoWithUIN:(long long)uin faceTimeStamp:(int)stamp isFriend:(BOOL)aFriend;
-(id)RequestUpdateQQFace:(id)face;
-(id)RequestHYMakeFriendsCard:(long long)card userType:(int)type faceTimeStamp:(int)stamp;
-(id)RequestHYCommonCard:(long long)card isFriend:(BOOL)aFriend faceTimeStamp:(int)stamp;
-(id)RequestMakeFriendsCard:(int)card faceTimeStamp:(int)stamp;
-(id)RequestCommonCard:(int)card triggered:(BOOL)triggered;
-(int)GetSeqId;
-(void)dealloc;
-(id)init;
@end

@interface CardInfoFileTransfer : NSObject <QSHttpRequestDelegate, QSHttpProgressDelegate> {
	int _type;
	int _state;
	long long _userUIN;
	NSData* _fileKey;
	int _requestType;
	int _buisType;
	int _subType;
	int _scene;
	NSString* _fileName;
	NSString* _downloadTempFileName;
	int _picScale;
	int _fileType;
	int _seqID;
	NSData* _fileMD5;
	int _fileTransPos;
	long long _fileToTransLen;
	int _cosumeTime;
	int _cosumeTime2;
	NSMutableData* _responseData;
	NSString* _resultStr;
	BOOL _syncQQ;
	int _sectionTransSize;
	int _curTransSize;
	int _totalTransSize;
	BOOL _statProcess;
	int _retryNum;
	BOOL _needVerify;
	NSString* _serverKey;
	NSString* _transUrl;
	NSString* _verifyCommitUrl;
	NSString* _verifyRefreshUrl;
	int _networkStatus;
	long long _requestUIN;
	int _failedCode;
	int _httpErrorCode;
	BOOL _needReportSpeedLog;
	double _startTimePoint;
	double _startTimePoint2;
	int _sessionID;
	id _data;
	id<CardInfoFileTransferDelegate> _delegate;
	NSMutableArray* _httpRequests;
	id<CardInfoFileTransferDelegate> _uniDelegate;
	NSString* _transSpeedLog;
	int _rdmSeq;
	int _rdmSeqConnect;
	int _rdmSeqSend;
	int _rdmSeqRecv;
	int _concurrentRequestCount;
	NSString* _picTitle;
	NSString* _picDesc;
	BOOL _downloadUrlPic;
	BOOL _fileKeyNotExist;
	int _responseContentLength;
	int _timeout;
}
@property(assign, nonatomic) int timeout;
@property(retain, nonatomic) NSString* transUrl;
@property(assign, nonatomic) int cosumeTime;
@property(retain, nonatomic) NSString* picDesc;
@property(retain, nonatomic) NSString* picTitle;
@property(assign, nonatomic) int scene;
@property(assign, nonatomic) int concurrentRequestCount;
@property(assign, nonatomic) int totalTransSize;
@property(retain, nonatomic) NSString* transSpeedLog;
@property(assign, nonatomic) id<CardInfoFileTransferDelegate> uniDelegate;
@property(assign, nonatomic) BOOL needReportSpeedLog;
@property(assign, nonatomic) int subType;
@property(assign, nonatomic) id<CardInfoFileTransferDelegate> delegate;
@property(assign, nonatomic) int httpErrorCode;
@property(assign, nonatomic) int failedCode;
@property(assign, nonatomic) int retryNum;
@property(assign, nonatomic) long long requestUIN;
@property(assign, nonatomic) BOOL statProcess;
@property(assign, nonatomic) long long userUIN;
@property(retain, nonatomic) id data;
@property(assign, nonatomic) int sessionID;
@property(retain, nonatomic) NSString* resultStr;
@property(assign, nonatomic) int fileType;
@property(retain, nonatomic) NSString* downloadTempFileName;
@property(retain, nonatomic) NSString* fileName;
@property(assign, nonatomic) int picScale;
@property(assign, nonatomic) int requestType;
@property(retain, nonatomic) NSData* fileKey;
@property(assign, nonatomic) int buisType;
@property(assign, nonatomic) int state;
@property(assign, nonatomic) int type;
-(void)request:(id)request didSendBytes:(int)bytes;
-(void)request:(id)request didReceiveBytes:(int)bytes;
-(void)request:(id)request didReceiveData:(id)data;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)picServerFailed;
-(void)contentLengthError;
-(void)requestStarted:(id)started;
-(BOOL)Continue;
-(BOOL)Cancel;
-(BOOL)RefreshVerifyCode;
-(BOOL)CommitVerifyCode:(id)code;
-(BOOL)StartDownloadFile:(id)file picScale:(int)scale saveToFile:(id)file3 fileType:(int)type statProcess:(BOOL)process requestUIN:(long long)uin suspend:(BOOL)suspend;
-(BOOL)StartUploadQQPortrait:(id)portrait syncQQ:(BOOL)qq statProcess:(BOOL)process suspend:(BOOL)suspend;
-(BOOL)StartUploadFile:(id)file fileType:(int)type statProcess:(BOOL)process requestUIN:(long long)uin suspend:(BOOL)suspend;
-(BOOL)ParseHttpDownloadResp;
-(void)setServerUnavailable;
-(BOOL)appendDownloadData:(vector<char, std::allocator<char> >*)data encryType:(int)type encryKey:(vector<char, std::allocator<char> >*)key encryFrom:(int)from encryTo:(int)to;
-(BOOL)ParseHttpUploadResp;
-(id)getTransSpeedDicWithResult:(BOOL)result failCode:(int)code;
-(void)compositeTransSpeedLog:(int)log;
-(BOOL)downloadNextSubsection;
-(BOOL)uploadNextSubsection;
-(id)getEventWithStep:(id)step;
-(BOOL)packetDownloadBody:(HttpDownloadReq*)body;
-(BOOL)packetUploadBody:(HttpUploadReq*)body;
-(id)getEncryptUsrInfoData;
-(int)getPicFlowType;
-(int)getFlowType;
-(int)getHttpRequestBusiType;
-(BOOL)initServerUrl;
-(XXStruct_lMgBbA)getPushServerInfo:(BOOL)info;
-(XXStruct_lMgBbA)getServerInfo;
-(id)getAvailableServerDic:(id)dic;
-(BOOL)isPictureFileType;
-(void)dealloc;
-(id)initWithBuisType:(int)buisType requestType:(int)type userUIN:(long long)uin delegate:(id)delegate;
@end

@interface CommonCardModel : NSObject <NSCoding> {
	long long _uin;
	NSString* _nick;
	short _gender;
	short _age;
	int _sysFace;
	NSString* _sign;
	NSString* _company;
	NSString* _school;
	NSString* _remark;
	int _weiboInfo;
	int _qzoneInfo;
	short _single;
	long long _visitCount;
	long long _voteCount;
	NSMutableArray* _tags;
	int _userIdentityType;
	int _voteIncrement;
	short _voted;
	NSData* _vBackground;
	NSString* _mappingAccount;
	BOOL _bFavorited;
	int _albumPicCount;
	long long _lFavoriteCount;
	BOOL _superQQ;
@private
	BOOL superQQ;
}
@property(assign, nonatomic) BOOL superQQ;
@property(assign, nonatomic) long long lFavoriteCount;
@property(assign, nonatomic) int albumPicCount;
@property(assign, nonatomic) BOOL bFavorited;
@property(retain, nonatomic) NSString* mappingAccount;
@property(retain, nonatomic) NSData* vBackground;
@property(assign, nonatomic) short voted;
@property(assign, nonatomic) int voteIncrement;
@property(assign, nonatomic) int userIdentityType;
@property(retain, nonatomic) NSMutableArray* tags;
@property(assign, nonatomic) long long voteCount;
@property(assign, nonatomic) long long visitCount;
@property(assign, nonatomic) short single;
@property(assign, nonatomic) int qzoneInfo;
@property(assign, nonatomic) int weiboInfo;
@property(retain, nonatomic) NSString* remark;
@property(retain, nonatomic) NSString* school;
@property(retain, nonatomic) NSString* company;
@property(retain, nonatomic) NSString* sign;
@property(assign, nonatomic) int sysFace;
@property(assign, nonatomic) short age;
@property(assign, nonatomic) short gender;
@property(retain, nonatomic) NSString* nick;
@property(assign, nonatomic) long long uin;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithQQUIN:(long long)qquin;
@end

@interface MakeFriendsCardModel : NSObject <NSCoding> {
	long long _uin;
	NSString* _nick;
	short _gender;
	short _age;
	int _sysFace;
	NSString* _certInfo;
	int _introType;
	NSData* _introContent;
	int _weiboInfo;
	int _qzoneInfo;
	int _sameFriendsNum;
	NSString* _sameCompany;
	NSString* _sameSqchool;
	long long _cardShowNum;
	int _faceNum;
	NSData* _faceID;
	int _iLat;
	int _iLon;
	NSString* _address;
	NSString* _customTelNumber;
	short _single;
	long long _visitCount;
	long long _voteCount;
	NSMutableArray* _tags;
	int _userIdentityType;
	int _voteIncrement;
	short _voted;
	BOOL _QQRobert;
	NSData* _vBackground;
	BOOL _bFavorited;
	int _albumPicCount;
	long long _lFavoriteCount;
	BOOL _superQQ;
@private
	NSString* _sameSchool;
	BOOL superQQ;
}
@property(assign, nonatomic) BOOL superQQ;
@property(assign, nonatomic) long long lFavoriteCount;
@property(assign, nonatomic) int albumPicCount;
@property(assign, nonatomic) BOOL bFavorited;
@property(assign, nonatomic) BOOL QQRobert;
@property(retain, nonatomic) NSData* vBackground;
@property(assign, nonatomic) short voted;
@property(assign, nonatomic) int voteIncrement;
@property(assign, nonatomic) int userIdentityType;
@property(retain, nonatomic) NSMutableArray* tags;
@property(assign, nonatomic) long long voteCount;
@property(assign, nonatomic) long long visitCount;
@property(assign, nonatomic) short single;
@property(retain, nonatomic) NSString* customTelNumber;
@property(retain, nonatomic) NSString* address;
@property(assign, nonatomic) int iLon;
@property(assign, nonatomic) int iLat;
@property(retain, nonatomic) NSData* faceID;
@property(assign, nonatomic) int faceNum;
@property(assign, nonatomic) long long cardShowNum;
@property(retain, nonatomic) NSString* sameSchool;
@property(retain, nonatomic) NSString* sameCompany;
@property(assign, nonatomic) int sameFriendsNum;
@property(assign, nonatomic) int qzoneInfo;
@property(assign, nonatomic) int weiboInfo;
@property(retain, nonatomic) NSData* introContent;
@property(assign, nonatomic) int introType;
@property(retain, nonatomic) NSString* certInfo;
@property(assign, nonatomic) int sysFace;
@property(assign, nonatomic) short age;
@property(assign, nonatomic) short gender;
@property(retain, nonatomic) NSString* nick;
@property(assign, nonatomic) long long uin;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithQQFriendModel:(id)qqfriendModel;
-(id)initWithEncounterInfo:(id)encounterInfo;
-(id)initWithQQUIN:(long long)qquin;
@end

@interface VisitorModel : NSObject <NSCoding> {
	long long _uin;
	NSData* _faceID;
	int _sysFace;
}
@property(assign, nonatomic) int sysFace;
@property(retain, nonatomic) NSData* faceID;
@property(assign, nonatomic) long long uin;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(void)dealloc;
-(id)initWithQQUIN:(long long)qquin;
@end

@interface CardTagInfo : NSObject <NSCoding> {
	short _tagType;
	unsigned long long _tagId;
	NSString* _content;
}
@property(retain, nonatomic) NSString* content;
@property(assign, nonatomic) unsigned long long tagId;
@property(assign, nonatomic) short tagType;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface EncounterFileResponse : NSObject {
	int _iRet;
	long long _uin;
	NSData* _fileKey;
	NSString* _errorString;
}
@property(readonly, assign, nonatomic) NSString* errorString;
@property(readonly, assign, nonatomic) NSData* fileKey;
@property(assign) long long uin;
@property(assign) int iRet;
-(void)dealloc;
-(id)initWithRet:(int)ret uin:(long long)uin fileKey:(id)key errorString:(id)string;
@end

@interface EncounterFileRequestItem : NSObject <CardInfoFileTransferDelegate> {
	int _seqId;
	int _ssoSeqId;
	int _requestType;
	NSString* _requestCmd;
	id _data;
	long long _userUIN;
}
@property(assign, nonatomic) long long userUIN;
@property(retain, nonatomic) id data;
@property(retain, nonatomic) NSString* requestCmd;
@property(assign, nonatomic) int requestType;
@property(assign, nonatomic) int ssoSeqId;
@property(assign, nonatomic) int seqId;
-(void)dealloc;
-(id)initWithSeqId:(int)seqId requestType:(int)type requestCmd:(id)cmd userUIN:(long long)uin;
@end

@interface EncounterFileEngine : NSObject <CardInfoFileTransferDelegate, IEngineDispatchDelegate> {
	int _seqId;
	NSMutableArray* _fileTransferQueue;
	NSTimer* _fileTransferClearTimer;
	NSString* _actionUrl;
	NSMutableArray* _requestQueue;
}
+(id)getFileNameWithFileKey:(id)fileKey;
+(id)GetInstance;
-(void)notifyUITransferSuccess:(id)success;
-(void)CardInfoFileTransfer:(id)transfer curTransSize:(int)size totalTransSize:(int)size3;
-(void)CardInfoFileTransfer:(id)transfer didFinished:(int)finished;
-(void)CardInfoFileTransfer:(id)transfer verfiyCodePassed:(BOOL)passed;
-(void)CardInfoFileTransfer:(id)transfer verifyCodeData:(id)data codeType:(id)type prompt:(id)prompt;
-(id)ReRecvFileMsgWithMsgId:(int)msgId;
-(id)ReSendFileMsgWithMsgId:(int)msgId;
-(BOOL)CancelTransferWithSessionID:(int)sessionID;
-(id)GetEncounterFileWithUin:(long long)uin fileKey:(id)key fileModel:(id)model;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)didRespTmpChatPicDownload:(RespTmpChatPicDownload*)download;
-(id)GetEncounterImageFileWithUin:(long long)uin fileKey:(id)key smallPic:(BOOL)pic;
-(id)GetEncounterImageFileWithUin:(long long)uin fileKey:(id)key;
-(id)getDownloadPicFileNameWithFileKey:(id)fileKey smallPic:(BOOL)pic;
-(id)GetEncounterVoiceFileWithUin:(long long)uin fileKey:(id)key;
-(BOOL)RefreshVerifyCodeWithSessionID:(int)sessionID;
-(BOOL)CommitVerifyCode:(id)code sessionID:(int)anId;
-(id)SendEncounterVideoWithFile:(id)file toUin:(long long)uin accType:(int)type;
-(id)SendEncounterFileWithFile:(id)file toUin:(long long)uin accType:(int)type;
-(id)SendEncounterFileWithImage:(id)image toUin:(long long)uin accType:(int)type;
-(id)SendEncounterFileWithVoice:(id)voice toUin:(long long)uin accType:(int)type;
-(BOOL)Reset;
-(BOOL)Reload;
-(int)removeQueueRequest:(int)request;
-(id)getQueueRequestWithType:(int)type data:(id)data;
-(id)getQueueRequestWithSSOSeq:(int)ssoseq;
-(id)getQueueRequestWithSeq:(int)seq;
-(BOOL)isNeedRetryDownload:(id)download;
-(void)deleteAllFilesWithFileKey:(id)fileKey isImage:(BOOL)image;
-(id)saveTempImageFile:(id)file;
-(void)doClearTransferQueue:(id)queue;
-(void)removeFileTransferWithSessionID:(int)sessionID;
-(id)getDownloadFileTransferWithUrl:(id)url;
-(id)getDownloadFileTransferWithFileKey:(id)fileKey;
-(id)getUploadFileTransferWithFileName:(id)fileName;
-(id)getFileTransferWithRequestType:(int)requestType;
-(id)getFileTransferWithSessionId:(int)sessionId;
-(int)GetSeqId;
-(void)dealloc;
-(id)init;
@end

@interface JKOffLineImage : NSObject <SSCMTimerDelegate> {
	NSDictionary* _imageInfo;
	NSString* _fullFilePath;
	NSString* _localFullPath;
	unsigned _uploadFileType;
	NSString* _uploadImageName;
	NSData* _uploadImageData;
	NSURL* _uploadingUrl;
	unsigned _uploadBytePos;
	short _reUploadTimes;
	unsigned _channelNo;
	unsigned _peerUin;
	unsigned uDuration;
	unsigned uPostCount;
	int _eCurrentStep;
	unsigned _uploadedDataLen;
	unsigned _rangeLen;
	int _uploadPackSize;
	BOOL _isFileExist;
	NSString* _downloadFileName;
	NSURL* _downloadingURL;
	NSString* _downLoadMD5Check;
	UIImage* _downloadedImage;
	BOOL _isUpLoadImageFinish;
	BOOL _isDownLoadImageFinish;
	BOOL _isDownLoadImageFinishError;
	BOOL _isVideo;
	BOOL _isRunning;
	unsigned _downloadSequence;
	unsigned _uploadSequence;
	int _msgTime;
	unsigned _msgId;
	int _msgSeq;
	long long _msgUid;
	unsigned _sendUin;
	unsigned _uIp;
	unsigned short _uPort;
	unsigned _fileSize;
	int _httpStatusCode;
	BOOL _isGetPicSize;
	int _picSize;
	int _getPicSizeType;
	unsigned _downloadFileType;
	NSString* _saveImgPath;
	BOOL _isOnLine;
	BOOL _forceDload;
	BOOL _isNewObj;
	BOOL _isOfflineFile;
	NSString* _groupCode;
	char* m_peerSig;
	unsigned m_peerSigLen;
	char* m_uploadMd5;
	unsigned m_uploadMd5Len;
	char* m_downLoadFileKey;
	unsigned m_downLoadFileKeyLen;
	int _bodyType;
	id<JKOffLineImageDelegate> _delegate;
	unsigned _appShareID;
	NSString* _attachedMsg;
	NSString* _actionUrl;
	BOOL _isDiscussGroup;
	BOOL _isDownloadSelf;
	double _startTime;
	double _startHttpGetTime;
	double _startHttpPostTime;
	int _timeOutInterval;
	SSCM* _sscm;
	SSCMTimer* _sscmTimer;
	double _procTime;
	double _startBrokenPostTime;
	double _startRetryTime;
	int _blockNum;
	unsigned _uRangeZeroCount;
	int _nPostMode;
	BOOL _bInitPostMode;
	double _startReuqestUploadCmdTime;
	NSTimer* _retryUploadTimer;
	LongLongRange _offlineSynInfo;
	BOOL _alreadySendMsg;
	int _cmdRetryCount;
	NSArray* _httpUrlList;
	int _useUrlIndex;
	BOOL _isExistRange;
	BOOL _secretfile;
	NSString* _secretFileKey;
	NSString* _secretFileFromUin;
	NSString* _secretFileToUin;
	int _secretFileTime;
	int _secretFileEncryptKey;
	int _secretFilePreHeadlength;
	id<IHttpStateDelegate> _httpStateDelegate;
	int _sessionId;
@private
	NSURLConnection* _downloadConnection;
	NSURLConnection* _uploadConnection;
	unsigned long _leftDownloadDataLen;
	unsigned long _localFileSize;
	unsigned long _uploadDataLen;
	NSMutableData* _responseData;
	NSTimer* _downloadTimeOutTimer;
	NSTimer* _uploadTimeOutTimer;
	NSTimer* _httpGetTimer;
	int _secretFilePreHeadLength;
	int _tmpOfflineImage;
}
@property(retain, nonatomic) NSArray* httpUrlList;
@property(assign, nonatomic) int sessionId;
@property(assign, nonatomic) id<IHttpStateDelegate> httpStateDelegate;
@property(assign, nonatomic) int secretFilePreHeadLength;
@property(assign, nonatomic) int secretFileEncryptKey;
@property(assign, nonatomic) int secretFileTime;
@property(retain, nonatomic) NSString* secretFileKey;
@property(retain, nonatomic) NSString* secretFileToUin;
@property(retain, nonatomic) NSString* secretFileFromUin;
@property(assign, nonatomic) BOOL secretfile;
@property(assign, nonatomic) BOOL alreadySendMsg;
@property(assign, nonatomic) LongLongRange offlineSynInfo;
@property(assign, nonatomic) BOOL isDownloadSelf;
@property(assign, nonatomic) BOOL isDiscussGroup;
@property(retain, nonatomic) NSString* actionUrl;
@property(retain, nonatomic) NSString* attachedMsg;
@property(assign, nonatomic) unsigned appShareID;
@property(assign, nonatomic) int cmdRetryCount;
@property(assign, nonatomic) double startReuqestUploadCmdTime;
@property(retain, nonatomic) NSURLConnection* uploadConnection;
@property(retain, nonatomic) NSURLConnection* downloadConnection;
@property(copy, nonatomic) NSString* groupCode;
@property(assign, nonatomic) unsigned sendUin;
@property(assign, nonatomic) unsigned fileSize;
@property(assign, nonatomic) unsigned short uPort;
@property(assign, nonatomic) unsigned uIp;
@property(assign, nonatomic) unsigned downLoadFileKeyLen;
@property(assign, nonatomic) unsigned downloadFileType;
@property(assign, nonatomic) long long msgUid;
@property(assign, nonatomic) int msgSeq;
@property(assign, nonatomic) unsigned msgId;
@property(assign, nonatomic) int msgTime;
@property(copy, nonatomic) NSString* saveImgPath;
@property(copy, nonatomic) NSString* downloadFileName;
@property(copy, nonatomic) NSString* downLoadMD5Check;
@property(retain, nonatomic) NSURL* downloadingURL;
@property(assign, nonatomic) unsigned downloadSequence;
@property(assign, nonatomic) BOOL isOfflineFile;
@property(assign, nonatomic) BOOL isNewObj;
@property(assign, nonatomic) BOOL isOnLine;
@property(assign, nonatomic) BOOL isDownLoadImageFinishError;
@property(assign, nonatomic) BOOL isRunning;
@property(assign, nonatomic) BOOL isDownLoadImageFinish;
@property(assign, nonatomic) BOOL isFileExist;
@property(assign, nonatomic) int uploadPackSize;
@property(assign, nonatomic) int bodyType;
@property(assign, nonatomic) int tmpOfflineImage;
@property(assign, nonatomic) int getPicSizeType;
@property(assign, nonatomic) int picSize;
@property(assign, nonatomic) BOOL isGetPicSize;
@property(assign, nonatomic) int httpStatusCode;
@property(assign, nonatomic) unsigned rangeLen;
@property(assign, nonatomic) unsigned uploadedDataLen;
@property(assign, nonatomic) unsigned uPostCount;
@property(assign, nonatomic) int eCurrentStep;
@property(assign, nonatomic) unsigned uDuration;
@property(assign, nonatomic) unsigned uploadMd5Len;
@property(assign, nonatomic) unsigned peerSigLen;
@property(assign, nonatomic) unsigned uploadSequence;
@property(assign) BOOL forceDload;
@property(copy, nonatomic) NSString* localFullPath;
@property(copy, nonatomic) NSString* fullFilePath;
@property(retain, nonatomic) NSData* uploadImageData;
@property(copy, nonatomic) NSString* uploadImageName;
@property(assign, nonatomic) unsigned peerUin;
@property(assign, nonatomic) unsigned channelNo;
@property(assign, nonatomic) unsigned uploadBytePos;
@property(retain, nonatomic) NSURL* uploadingUrl;
@property(assign, nonatomic) unsigned uploadFileType;
@property(assign, nonatomic) BOOL isVideo;
@property(assign, nonatomic) BOOL isUpLoadImageFinish;
@property(retain, nonatomic) NSDictionary* imageInfo;
@property(assign, nonatomic) id<JKOffLineImageDelegate> delegate;
+(void)NotifyMemoryLack;
-(id).cxx_construct;
-(void)saveOfflineFileData:(BOOL)data;
-(void)retryUploadTimeout:(id)timeout;
-(void)startRetryUpload:(double)upload;
-(void)stopRetryUploadTimer;
-(void)httpRetry;
-(void)SSCMTimerOut;
-(int)getPostMode;
-(float)getPicUploadProcess;
-(float)getPicDownloadProcess;
-(id)generatePostBody:(int)body sendLength:(unsigned)length;
-(void)reMakeUploadUrl:(id)url;
-(char*)GetDataMd5:(const char*)a5 SrcLen:(int)len;
-(void)httpPost;
-(void)getUploadUrlCallBack;
-(void)handleDownBackToFore;
-(void)handleBackToFore;
-(void)uploadCmdTimeOut:(id)anOut;
-(void)getDownloadUrlTimeOut:(id)anOut;
-(void)startHttpPost;
-(void)startHttpGet;
-(void)getDownloadUrlCallBack;
-(void)NotifyUIProcess;
-(void)httpGet;
-(void)killDownloadTimer;
-(void)recordFlowBytes:(id)bytes bytes:(long long)bytes2;
-(BOOL)moveFile:(id)file Des:(id)des;
-(int)appendWiteToFile:(id)file Data:(id)data;
-(int)getFileTypeWithEncodeFormatByFilePath:(id)encodeFormatByFilePath;
-(void)saveOfflineImgMsg;
-(void)transformImage:(id)image width:(float)width height:(float)height path:(id)path;
-(void)updateUI:(id)ui;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(char*)getDownLoadPTTFileKey;
-(void)SetDownLoadPTTFileKey:(char*)key len:(int)len;
-(char*)GetUploadMd5;
-(void)SetUploadMd5:(char*)a5 len:(int)len;
-(char*)GetPeerSig;
-(void)SetPeerSig:(char*)sig len:(int)len;
-(char*)getImageMD5:(id)a5;
-(void)manualCancelUpload;
-(void)cancelDownload:(int)download;
-(void)cancelUpload:(int)upload;
-(void)retryUploadImage;
-(void)uploadImage;
-(void)NotifyUIUploadImageFileSize;
-(void)HttpGetTimeOut:(id)anOut;
-(void)startHttpGetTimer;
-(void)stopHttpGetTimer;
-(void)ResetUploadTimer;
-(void)ResetDownloadTimer;
-(void)reqSetStatus;
-(void)startDownloadImage;
-(void)retryStartDownloadImage;
-(void)directDownloadImage;
-(void)downloadImage;
-(void)NotifyCustomFaceUISuccess;
-(void)cancelDownload;
-(void)dealloc;
-(id)initWithImageInfo:(id)imageInfo;
-(id)GetUin;
-(oneway void)release;
-(id)retain;
@end

@interface OffLinePictureLogic : NSObject {
	long long _totalLen;
	long long _bodyLen;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)shareInstance;
-(void)dealloc;
-(id)ParseGroupPicMsg:(const char*)msg dataLen:(int)len Gid:(id)gid Time:(int)time peerUin:(long long)uin SeqId:(int)anId groupPicInfo:(id)info appShareID:(unsigned)anId8 ignoredSelfRich:(int)rich marketFaceInfo:(id)info10;
-(id)GetTopC2CChatViewUin;
-(id)GetTopGroupChatViewCode;
-(char*)getClearMemery:(unsigned)memery;
-(id)makeLocalImgPath;
-(id)paraseRoamOfflinePictureMassage:(const char*)massage len:(int)len FromUin:(id)uin toUin:(id)uin4 appShareID:(unsigned)anId marketFaceInfo:(id)info;
-(id)paraseOfflinePictureMassage:(const char*)massage len:(int)len FromUin:(id)uin appShareID:(unsigned)anId nickName:(id)name;
-(id)parseRoamOnLineImg:(const char*)img dataLen:(int)len Time:(int)time msgSeq:(int)seq msgUid:(long long)uid forUin:(long long)uin;
-(id)paraseOnLineImg:(const char*)img dataLen:(int)len Time:(int)time msgSeq:(int)seq msgUid:(long long)uid forUin:(long long)uin info:(LongLongRange)info;
-(id)paraseOnLineImg:(const char*)img dataLen:(int)len Time:(int)time msgSeq:(int)seq msgUid:(long long)uid forUin:(long long)uin lastChangeTime:(unsigned)time7;
-(BOOL)checkIsOfflinePicture:(const char*)picture;
-(int)decodeOfflinePicture:(const char*)picture offlinePicInfo:(id*)info;
-(id)getPictureRealInfo:(const char*)info;
-(id)convertMixMessageToNSSTring:(const char*)nsstring length:(int)length;
-(id)convertMessageToNSSTring:(const char*)nsstring;
-(char*)composeOfflinePictureMassage:(id)massage offlinePicKind:(BOOL)kind;
-(char*)getPictureUploadSuccessBodyBuff:(id)buff;
-(char*)getPictureUploadFaildBodyBuff:(id)buff;
-(char*)getPictureUploadRepeatBodyBuff:(id)buff;
-(char*)getUploadMsgHeadBuff:(char*)buff;
@end

@interface OfflinePictureServerEngine : NSObject <CIMOfflinePictureSvrEngineDelegate, JKOffLineImageDelegate, CLLocationManagerDelegate> {
	id _callBackResponder;
	NSMutableArray* _uploadingStuffArrary;
	NSMutableArray* _downloadingStuffArrary;
	NSMutableArray* _downloadingPTTArrary;
	NSMutableArray* _ddxcArray;
	NSMutableArray* _peerSigArray;
	NSMutableArray* _pttMsgArray;
	NSMutableArray* _retryDownloadPTTArrary;
	long long _uin;
	BOOL _needSaveRetryDownloadPTTArray;
	NSTimer* _saveRetryDownloadPTTArrayTimer;
	NSMutableArray* _downloadPicSizeArrary;
	BOOL _needSaveDownloadPicSizeArray;
	NSTimer* _saveDownloadPicSizeArrayTimer;
	NSMutableDictionary* _picDownloadUrlDic;
	BOOL _needSavePicDownloadUrlDic;
	NSTimer* _savePicDownloadUrlDicTimer;
	NSMutableDictionary* _c2cPicDownloadUrlDic;
	NSMutableDictionary* _thumbnailMarkDicDic;
	int _dyUploadPicConcurrentCount;
	int _dyDownloadPicConcurrentCount;
	int _httpRequestId;
}
@property(assign, nonatomic) id callBackResponder;
+(id)allocWithZone:(NSZone*)zone;
+(id)shareInstance;
-(void)cancelC2CImgUpload:(int)upload;
-(void)cancelC2CSecretFileImgDownload:(int)download;
-(void)cancelC2COfflineFileUpload:(int)upload;
-(void)startDownloadOriginC2CPic:(id)pic;
-(void)startDownloadOriginGroupPic:(id)pic;
-(void)startDownloadOriginPic:(id)pic;
-(int)getHttpRequestId;
-(void)LoadThumbnailMarkDic;
-(void)SaveThumbnailMarkDic;
-(BOOL)IsThumbnailMark:(id)mark type:(int)type;
-(void)RemoveThumbnailMark:(id)mark type:(int)type;
-(void)AddThumbnailMark:(id)mark type:(int)type;
-(id)GetC2COriginalPicDownloadUrl:(id)url;
-(id)GetC2CSmallPicDownloadUrl:(id)url;
-(void)RemoveC2CDownloadUrl:(id)url;
-(void)AddC2CPicDownloadUrl:(id)url downloadUrl:(id)url2;
-(id)GetGPicSizeO;
-(id)GetGPicSizeM;
-(id)GetGPicSizeS;
-(id)GetGPicHost;
-(id)GetC2CPicSizeS;
-(void)LoadPicDownloadUrlDic;
-(void)SavePicDownloadUrlDic;
-(void)DelaySavePicDownloadUrlDic;
-(id)GetOriginalPicDownloadUrl:(id)url;
-(id)GetSmallPicDownloadUrl:(id)url;
-(void)RemoveDownloadUrl:(id)url;
-(void)AddPicDownloadUrl:(id)url downloadUrl:(id)url2 type:(int)type sendUin:(id)uin groupUin:(id)uin5;
-(void)msfSendAndRecvRequestResult:(id)result;
-(void)msfRecvRequestResult:(id)result;
-(void)msfSendRequestResult:(id)result;
-(BOOL)findDownloadImageByUuid:(id)uuid getPicSizeType:(int)type;
-(id)findDownLoadOfflineFileByUuid:(id)uuid;
-(void)StartRetryDownloadPtt;
-(void)LoginSuccess:(id)success;
-(void)LoadRetryDownloadPTTArray;
-(void)TimeOutSaveCallBack:(id)back;
-(void)RemoveRetryDownloadPTTArray:(id)array;
-(void)AddToRetryDownloadPTTArray:(id)retryDownloadPTTArray PeerUin:(long long)uin GroupCode:(long long)code DownloadUrl:(id)url MsgTime:(int)time DownloadFileType:(int)type Stage:(int)stage RetryCount:(int)count;
-(long long)GetPttTime:(char*)time;
-(int)isDownPttFinish:(long long)finish withUin:(long long)uin UUid:(id)uid;
-(void)NotifyUISendPTTNow:(id)now;
-(void)NotifyUISendPTTFail:(id)fail;
-(void)NotifyUISendPTTFinish:(id)finish;
-(void)NotifyUIReceivePTTFail:(id)fail;
-(void)NotifyUIReceivePTTFinish:(id)finish;
-(BOOL)reRecivePttMsg:(id)msg;
-(BOOL)NotifyUIReceivePTT:(id)ptt;
-(void)SaveRetryDownloadPTTArray;
-(void)handleBackToFore;
-(int)GetSuffix:(const char*)suffix SrcLen:(int)len;
-(void)UpcaseString:(const char*)string destData:(char*)data Len:(int)len;
-(void)CIMOfflinePictureSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)removeUploadePicArrary:(id)arrary;
-(void)updateSecretFileDBStatusByEngine:(id)engine;
-(void)rcvImageNotification:(id)notification;
-(void)RemoveDDXC:(id)ddxc;
-(void)AddTODDXC:(id)toddxc URL:(id)url SVUUID:(id)svuuid Range:(int)range;
-(BOOL)GotoDDXC:(id)ddxc;
-(id)GetDDXC:(id)ddxc;
-(BOOL)isDownFilePtt:(id)ptt forUin:(id)uin;
-(id)GetUpLoadOfflineFilelist;
-(void)upOffLineFileStatus;
-(BOOL)downloadFileByUuid:(id)uuid withLastTime:(id)lastTime savePathFileName:(id)name;
-(void)CancelDownloadFileByUuid:(id)uuid;
-(void)CancelUploadFileByUuid:(id)uuid;
-(void)uploadLargeFileEnter:(id)enter uuid:(id)uuid toUin:(id)uin fileType:(int)type fileName:(id)name forTime:(int)time msgId:(int)anId msgSeq:(unsigned short)seq msgRandom:(unsigned)random;
-(void)uploadFileEnter:(id)enter uuid:(id)uuid toUin:(id)uin fileType:(int)type fileName:(id)name forTime:(id)time;
-(void)uploadFileEnter:(id)enter uuid:(id)uuid toUin:(id)uin fileType:(int)type fileName:(id)name forTime:(id)time isVideoRecord:(BOOL)record;
-(void)uploadFileEnter:(id)enter uuid:(id)uuid toUin:(id)uin fileType:(int)type fileName:(id)name;
-(void)UploadVedio:(id)vedio uuid:(id)uuid toUin:(id)uin;
-(void)CancelUploadC2CImg;
-(void)changeAccount;
-(void)setRecOnLineIMGStatus:(id)status rtType:(short)type ReGet:(BOOL)get;
-(void)startDownLoadImage:(id)image;
-(void)downloadPicture:(id)picture;
-(void)refreshUploadPicSpeed;
-(void)refreshDownloadPicSpeed;
-(void)LoadDownloadPicSizeArray;
-(void)SaveDownloadPicSizeArray;
-(float)GetUploadPicProcess:(id)process;
-(float)GetDownloadPicProcess:(id)process;
-(int)GetDownloadPicSize:(id)size;
-(void)RemoveDownloadPicSize:(id)size;
-(void)AddDownloadPicSize:(id)size PicSize:(int)size2;
-(void)downloadPTT:(id)ptt;
-(void)uploadPicture:(id)picture;
-(void)reqSendVoiceNotify:(id)notify NotifyType:(short)type;
-(void)reqSendVoiceReq:(id)req;
-(void)reqPeerSig:(id)sig ReGet:(BOOL)get;
-(float)getOfflineUploadFilePercent:(int)percent fileName:(id)name;
-(BOOL)findUploadOfflineFile:(int)file fileName:(id)name;
-(BOOL)findUpLoadPTTArrayByUuid:(id)uuid;
-(void)DelaySendAttachMsg:(id)msg;
-(void)NotifyUploadC2CImage:(id)image;
-(void)NotifyUploadOfflineFile:(id)file;
-(void)uploadLargeFile:(id)file;
-(void)uploadOfflineFile:(id)file;
-(void)RequestKeyAndSig;
-(void)sendSecretFileTryUpResult:(id)result;
-(void)sendSecretFileTryDownResult:(id)result;
-(BOOL)isUpLoadSecretfilebySeq:(int)seq;
-(BOOL)isDownLoadSecretfilebySeq:(int)seq;
-(id)init;
-(void)dealloc;
-(id)GetRetryDownloadPTTObj:(id)obj;
-(void)DelaySaveDownloadPicSizeArray;
-(void)DelaySaveRetryDownloadPTTArray;
-(void*)mallocZeroMemery:(unsigned)memery;
-(id)findOfflineUploadFileByUuid:(id)uuid;
-(id)findOfflineDownImageByUuid:(id)uuid;
-(id)getPTTArrayByUuid:(id)uuid;
-(BOOL)findPTTArrayByUuid:(id)uuid;
-(id)findPTTArray:(unsigned)array;
-(id)findOfflineImage:(unsigned)image imageQueue:(int)queue;
-(id)convertIp:(unsigned)ip port:(short)port;
-(char*)getFileName:(id)name isRelative:(BOOL)relative;
-(char*)getFileMD5:(id)a5;
@end

@interface QQHttpUploadFileManager : NSObject {
	NSURLConnection* _connect;
}
@property(retain, nonatomic) NSURLConnection* connect;
-(void)dealloc;
-(id)generateMutableUploadImageFormData:(id)data;
-(void)cancel;
-(void)uploadMyFeedFile;
-(void)uploadFeedFile;
-(void)uploadFeedFile:(id)file;
-(id)smartURLForString:(id)string;
-(id)generateFormData:(id)data;
-(id)generateBoundaryString;
-(id)initMutableUploadImageWithURL:(id)url postArg:(id)arg delegate:(id)delegate;
-(id)initWithURL:(id)url postArg:(id)arg delegate:(id)delegate;
@end

@interface UniFileTransEngine : NSObject <CardInfoFileTransferDelegate, CIMFileStorageSvcListDelegate> {
	NSMutableArray* _fileTransferQueue;
	NSMutableArray* _observers;
	NSMutableDictionary* _resourceFileDic;
	int _latestWifiPicSvrRequestTime;
	int _carrierType;
}
+(id)GetInstance;
-(void)CIMFileStorageSvcList:(id)list didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)onMSFNetworkApnStateNotification:(id)notification;
-(void)onMSFNetworkStateNotification:(id)notification;
-(void)actionPicServerListUpdated;
-(void)CardInfoFileTransfer:(id)transfer curTransSize:(int)size totalTransSize:(int)size3;
-(void)CardInfoFileTransfer:(id)transfer didFinished:(int)finished;
-(void)CardInfoFileTransfer:(id)transfer verfiyCodePassed:(BOOL)passed;
-(void)CardInfoFileTransfer:(id)transfer verifyCodeData:(id)data codeType:(id)type prompt:(id)prompt;
-(BOOL)cancelTransferWithSessionID:(int)sessionID;
-(int)uploadCommonFile:(id)file buisType:(int)type fileType:(int)type3;
-(int)uploadCommonPic:(id)pic buisType:(int)type;
-(int)uploadFoodPic:(id)pic;
-(BOOL)downloadResourceFile:(id)file fileType:(int)type saveFileName:(id)name;
-(void)uploadResourceFiles;
-(void)removeObserver:(id)observer;
-(BOOL)addObserver:(id)observer;
-(id)saveTempImageFile:(id)file;
-(void)activateTransferQueue;
-(void)doClearTransferQueue;
-(void)removeFileTransferWithSessionID:(int)sessionID;
-(id)getDownloadFileTransferWithFileKey:(id)fileKey picScale:(int)scale;
-(id)getFileTransferWithRequestType:(int)requestType;
-(id)getFileTransferWithSessionId:(int)sessionId;
-(void)dealloc;
-(id)init;
@end

@interface CUserData : NSObject {
	int lTime;
	int iLat;
	int iLon;
	long long lOriginGrid;
	long long lNextGrid;
	NSString* strProvince;
	NSData* strCookie;
}
@property(retain, nonatomic) NSData* strCookie;
@property(retain, nonatomic) NSString* strProvince;
@property(assign) long long lNextGrid;
@property(assign) long long lOriginGrid;
@property(assign) int iLon;
@property(assign) int iLat;
@property(assign) int lTime;
-(void)dealloc;
-(id)init;
@end

@interface QQAccountsManager : NSObject <QQValidCodeControllerDelegate, SimpleAlertViewDelegate, IIncrUpdateDelegate> {
	NSMutableArray* _accoutsArray;
	QQAccountsModel* _attemptModel;
	QQAccountsModel* _currentModel;
	QQAccountsModel* _lastloginAccount;
	id _target;
	SEL _callBack;
	QQVaildCodeController* _validCtr;
	BOOL showProcess;
	BOOL _isLoginFailAlertViewExisted;
	int _delTokenReq;
	int _unregReq;
	BOOL _needRemoveAuth;
	NSString* _uinToDel;
}
@property(retain, nonatomic) QQAccountsModel* lastloginAccount;
@property(readonly, assign, nonatomic) QQAccountsModel* currentModel;
@property(retain, nonatomic) QQAccountsModel* attemptModel;
+(id)loadAccountInfo:(id)info;
+(BOOL)saveAccountInfo:(id)info;
-(void)changeAllAccountsToOnline;
-(void)DeleteAuth:(id)auth;
-(BOOL)checkAuth:(id)auth;
-(void)removeLastLoginAccount;
-(void)saveLastLoginAccount;
-(id)loadLastLoginAccount;
-(void)deleteAccountFilesInBackgroud:(id)backgroud;
-(void)removeAccountWithUin:(id)uin;
-(BOOL)changeAttemptModelToCurrent;
-(BOOL)loginOutCurrentModel;
-(int)getIndexForUin:(id)uin;
-(id)searchModelForLoginAccount:(id)loginAccount;
-(id)searchModelForUin:(id)uin;
-(id)currentAccount;
-(id)allAccounts;
-(void)removeNoneExistCacheDirectories:(id)directories;
-(void)save;
-(void)msfSendAndRecvRequestResult:(id)result;
-(void)dealloc;
-(id)init;
-(void)printCallStack;
-(void)validateModel;
-(void)checkModelCompatible;
-(void)notifyRespPBBuffer:(const void*)buffer size:(int)size result:(int)result;
-(void)getReqPBBuffer:(char**)buffer buffEnd:(char**)end;
-(void)changeToAccount:(id)account;
-(void)doLogoutCurrentAccount;
-(void)doLoginWithUin:(id)uin passWord:(id)word showProcess:(BOOL)process;
@end

@interface QQAccountsModel : QQModel {
	NSString* _uin;
	NSString* _nick;
	NSString* _loginAccount;
	NSString* _icon;
	int _pwd;
	NSString* _sig;
	int _sex;
	int _birs;
	int _country;
	int _prov;
	int _city;
	int _profileSex;
	double loginTime;
	double getMsgTime;
	BOOL login;
	int onlineStatus;
	BOOL _bSavePwd;
	BOOL _bAutoLogin;
	BOOL _bRecvGroupMsg;
	int head;
	BOOL _bKeepPcOnline;
	BOOL _bKeepBackGroundOnLine;
	NSData* _cookie;
	NSData* _syncCookie;
	BOOL _hasUsedDataLine;
	NSString* _sCountry;
	NSString* _sProvince;
	NSString* _sCity;
	BOOL _shownViewOnlineFriendTips;
	BOOL _isVip;
	BOOL _isSuperVip;
	NSString* _chatAvatarID;
}
@property(retain, nonatomic) NSString* chatAvatarID;
@property(assign, nonatomic) BOOL isSuperVip;
@property(assign, nonatomic) BOOL isVip;
@property(assign, nonatomic) BOOL shownViewOnlineFriendTips;
@property(assign, nonatomic) BOOL hasUsedDataLine;
@property(retain, nonatomic) NSData* syncCookie;
@property(retain, nonatomic) NSData* cookie;
@property(retain, nonatomic) NSString* loginAccount;
@property(assign, nonatomic) BOOL bKeepBackGroundOnLine;
@property(assign, nonatomic) BOOL bKeepPcOnline;
@property(assign, nonatomic) BOOL bRecvGroupMsg;
@property(assign, nonatomic) BOOL bAutoLogin;
@property(assign, nonatomic) BOOL bSavePwd;
@property(assign, nonatomic) int head;
@property(assign, nonatomic) int onlineStatus;
@property(assign, nonatomic) BOOL login;
@property(assign, nonatomic) int city;
@property(assign, nonatomic) int prov;
@property(assign, nonatomic) int country;
@property(assign, nonatomic) int birs;
@property(assign, nonatomic) int profileSex;
@property(assign, nonatomic) int sex;
@property(assign, nonatomic) double getMsgTime;
@property(assign, nonatomic) double loginTime;
@property(retain, nonatomic) NSString* sig;
@property(retain, nonatomic) NSString* icon;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) NSString* uin;
@property(assign, nonatomic) int pwd;
@property(retain, nonatomic) NSString* sCity;
@property(retain, nonatomic) NSString* sProvince;
@property(retain, nonatomic) NSString* sCountry;
-(id)description;
-(void)dealloc;
-(BOOL)isEqualToModel:(id)model;
-(void)setSuperVip:(BOOL)vip;
-(id)initWithModel:(id)model;
-(id)init;
@end

@interface ProfileSvrEngine : NSObject <CIMProfileSvrEngineDelgate> {
	id respondEngine;
	int curSigGroup;
	int curFlistGroup;
	NSMutableArray* sigRequestQueue;
	NSMutableArray* flistRequesQueue;
	NSMutableDictionary* _groupNmaeCache;
	NSMutableDictionary* _sendPacketQueue;
	NSMutableDictionary* _simpleInfoCache;
	NSMutableDictionary* _groupUinCache;
}
@property(retain, nonatomic) id respondEngine;
+(void)exitInstance;
+(id)GetInstance;
-(void)requestSyncGameUpdate;
-(int)SearchFriendInfoRequest:(id)request;
-(int)RequestSetFriendStatusPush:(long long)push onOff:(bool)off;
-(int)RequestPortraitProfile:(long long)profile timeStamp:(long long)stamp;
-(BOOL)SetPersonProfile:(id)profile;
-(BOOL)GetPersonProfile:(long long)profile;
-(BOOL)RequestCreateGroup:(id)group;
-(void)RequestRefuseJoinToGroup:(unsigned)group groupOwnerUin:(unsigned)uin auth:(id)auth attachMsg:(id)msg;
-(void)RequestAgreeJoinToGroup:(unsigned)group groupOwnerUin:(unsigned)uin auth:(id)auth attachMsg:(id)msg;
-(void)RequestRefuseSomebodyJoinGroup:(unsigned)group requestUin:(unsigned)uin auth:(id)auth attachMsg:(id)msg;
-(void)RequestAgreeSomebodyJoinGroup:(unsigned)group requestUin:(unsigned)uin auth:(id)auth attachMsg:(id)msg;
-(void)RequestDismissGroup:(unsigned)group;
-(void)RequestInviteJoinGroup:(unsigned)group invitedArray:(id)array msg:(id)msg;
-(void)RequestDelGroupMem:(unsigned)mem delMemArray:(id)array;
-(void)RequestExitGroup:(unsigned)group;
-(void)RequestJoinGroup:(unsigned)group AttachMsg:(id)msg SourceID:(int)anId;
-(void)RequestSearchGroup:(unsigned)group SourceID:(int)anId;
-(void)RequestSearchGroupPage:(unsigned)page SortType:(unsigned)type KeyWords:(id)words;
-(void)dealloc;
-(id)getSimpleInfoFromCache:(id)cache;
-(void)changeAccount;
-(id)modelWithDayWeather:(DayWeather)dayWeather;
-(id)modeWithThreeDayWeather:(ThreeDayWeather)threeDayWeather;
-(id)ModeWithWeatherInfoRes:(WeatherInfoRes)weatherInfoRes;
-(id)GetGroupName:(id)name;
-(void)SaveGroupName:(id)name groupName:(id)name2;
-(void)DeleteGroupName:(id)name;
-(void)CIMProfileSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(int)RequestChangeFriendName:(long long)name newName:(id)name2;
-(int)RequestGroupInfo:(unsigned)info SourceId:(int)anId;
-(int)RequestGroupInfoWithGroupImages:(unsigned)groupImages stampTime:(unsigned)time SourceId:(int)anId;
-(int)RequestFriendInfo:(long long)info fieldList:(id)list;
-(void)RequestWeatherInfoWithGPS:(float)gps lon:(float)lon alt:(float)alt;
-(void)RequestWeatherInfoWithGPS:(float)gps lon:(float)lon alt:(float)alt uin:(id)uin;
-(void)RequestWeatherInfo:(id)info;
-(void)RequestGetSigInfo:(id)info;
-(void)RequestSetSigInfo:(id)info uin:(long long)uin;
-(int)RequestFullInfo:(long long)info;
-(int)RequestSimpleInfo:(id)info;
-(id)init;
@end

@interface CIMEnginePacketStruct : NSObject {
	unsigned long _sendSeq;
	unsigned long _sendTime;
	char* _sendCmd;
}
@property(assign, nonatomic) char* sendCmd;
@property(assign, nonatomic) unsigned long sendTime;
@property(assign, nonatomic) unsigned long sendSeq;
-(id)description;
-(void)dealloc;
@end

@interface CIMEngineSendParamStruct : NSObject {
	char* _pCmd;
	NSData* _pWup;
	BOOL _bImmediately;
	int _iTimeOutInterval;
	int _iSeq;
	BOOL _bRet;
}
@property(assign, nonatomic) BOOL bRet;
@property(assign, nonatomic) int iSeq;
@property(assign, nonatomic) int iTimeOutInterval;
@property(assign, nonatomic) BOOL bImmediately;
@property(retain, nonatomic) NSData* pWup;
@property(assign, nonatomic) char* pCmd;
-(void)dealloc;
@end

@interface CIMEngine : NSObject <NSXMLParserDelegate, TTURLRequestDelegate, IAccountService, IMSFDelegate, UIAlertViewDelegate> {
@private
	id<CIMEngineDelegate> _delegate;
	id<CIMPushSvrEngineDelegate> _pushSvrDelegate;
	id<CIMQZoneSvrEngineDelegate> _QZSvrDelegate;
	id<CIMMicroBlogSvrEngineDelegate> _MBSvrDelegate;
	id<CIMMsgSvrEngineDelegate> _msgSvrDelegate;
	id<CIMFriendsSvrEngineDelegate> _friendsSvrDelegate;
	id<CIMProfileSvrEngineDelgate> _profileSvrDelegate;
	id<CIMUnkownSvrEngineDelegate> _unkownSvrDelegate;
	id<CIMOfflinePictureSvrEngineDelegate> _offlinePicSvrDelegate;
	id<CIMUserSvrEngineDelegate> _userSvrEngineDelegate;
	id<CIMStreamMsgEngineDelegate> _streamMsgEngineDelegate;
	id<CIMAdSvrEngineDelegate> _adSvrEngineDelegate;
	id<CIMMGroupEngineDelegate> _mgroupEngineDelegate;
	id<CIMCardInfoEngineDelegate> _cardInfoEngineDelegate;
	id<CIMLbsSvrEngineDelegate> _lbsSvrEngineDelegate;
	id<CIMNeighborFeedEngineDelegate> _neighborFeedEngineDelegate;
	id<CIMFileStorageSvcListDelegate> _fileStorageSvcListDelegate;
	id<CIMGetAPPPluginInfoDelegate> _getAppPluigninfoDelegate;
	id<CIMBaseEngineDelegate> _faceServiceDelegate;
	id<CIMBaseEngineDelegate> _fileAssistantDelegate;
	id<CIMGetCacaRespDelegate> _getCacaRespDelegate;
	void* _pVideoEngine;
	long long _uin;
	int _Key;
	NSData* _Sid;
	NSData* _A2;
	NSData* _D2;
	NSData* _HA3;
	NSData* _ClientSecurity;
	NSMutableData* _recvHttpData;
	NSString* _xmlKey;
	NSMutableDictionary* _rdmMsfSeqDic;
	NSOperationQueue* _recvPacketQueue;
	NSString* _grayIllegalUin;
	QQAlertView* _grayIllegalAlertView;
	QQAlertView* _serverForceCloseAlertView;
	QQAlertView* _msfMsgAlertView;
	int _forceOfflinePushSeq;
	NSDictionary* _forceOfflineParam;
	NSString* _ssoip;
	int _ssoport;
	NSString* _netip;
	int _netport;
	NSString* _lastOfflinePrompt;
	id<CIMBaseEngineDelegate> _mqzoneNewDelegate;
}
@property(retain, nonatomic) NSString* lastOfflinePrompt;
@property(readonly, assign, nonatomic) int netport;
@property(readonly, assign, nonatomic) NSString* netip;
@property(readonly, assign, nonatomic) int ssoport;
@property(readonly, assign, nonatomic) NSString* ssoip;
@property(assign, nonatomic) id<CIMBaseEngineDelegate> mqzoneNewDelegate;
@property(retain, nonatomic) id<CIMGetCacaRespDelegate> getCacaRespDelegate;
@property(assign, nonatomic) id<CIMBaseEngineDelegate> fileAssistantDelegate;
@property(assign, nonatomic) id<CIMBaseEngineDelegate> faceServiceDelegate;
@property(retain, nonatomic) id<CIMGetAPPPluginInfoDelegate> getAppPluginInfoDelegate;
@property(assign, nonatomic) id<CIMFileStorageSvcListDelegate> fileStorageSvcListDelegate;
@property(assign, nonatomic) id<CIMNeighborFeedEngineDelegate> neighborFeedEngineDelegate;
@property(assign, nonatomic) id<CIMLbsSvrEngineDelegate> lbsSvrEngineDelegate;
@property(assign, nonatomic) id<CIMCardInfoEngineDelegate> cardInfoEngineDelegate;
@property(assign, nonatomic) id<CIMMGroupEngineDelegate> mgroupEngineDelegate;
@property(assign, nonatomic) id<CIMAdSvrEngineDelegate> adSvrEngineDelegate;
@property(assign, nonatomic) id<CIMUserSvrEngineDelegate> userSvrEngineDelegate;
@property(assign, nonatomic) id<CIMStreamMsgEngineDelegate> streamMsgEngineDelegate;
@property(assign, nonatomic) id<CIMOfflinePictureSvrEngineDelegate> offlinePicSvrDelegate;
@property(assign, nonatomic) id<CIMUnkownSvrEngineDelegate> unkownSvrDelegate;
@property(assign, nonatomic) id<CIMFriendsSvrEngineDelegate> friendsSvrDelegate;
@property(assign, nonatomic) id<CIMProfileSvrEngineDelgate> profileSvrDelegate;
@property(assign, nonatomic) id<CIMMsgSvrEngineDelegate> msgSvrDelegate;
@property(assign, nonatomic) id<CIMMicroBlogSvrEngineDelegate> MBSvrDelegate;
@property(assign, nonatomic) id<CIMQZoneSvrEngineDelegate> QZSvrDelegate;
@property(assign, nonatomic) id<CIMPushSvrEngineDelegate> pushSvrDelegate;
@property(assign, nonatomic) id<CIMEngineDelegate> delegate;
+(id)GetInstance;
-(id)GetAccountD2:(id)a2;
-(id)GetAccountA2:(id)a2;
-(int)GetAccountKey:(id)key;
-(void)SetNetIPToMSF:(id)msf port:(int)port;
-(int)GetServerTimeDiff;
-(id)GetIMEI;
-(BOOL)SocketDisconnect;
-(BOOL)IsSentDataEmpty;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parserDidStartDocument:(id)parser;
-(int)GetCarrierType;
-(int)GetNetworkStatus;
-(void)RequestSid:(id)sid;
-(void)RequestgetResouceReq:(id)req version:(int)version resourcetype:(int)resourcetype;
-(void)RequestgetResouceReq:(id)req version:(int)version;
-(BOOL)RequestGetAppCenterConfig;
-(BOOL)RequestPicSvrConfig:(int)config imsi:(id)imsi;
-(void)RequestConfig:(int)config para:(id)para;
-(BOOL)ResendWupBuffer:(char*)buffer cmd:(id)cmd resendSeq:(int)seq immediately:(BOOL)immediately;
-(BOOL)ResendWupBuffer:(char*)buffer cmd:(id)cmd resendSeq:(int)seq immediately:(BOOL)immediately timeOut:(int)anOut;
-(BOOL)ResendWupBuffer:(char*)buffer cmd:(id)cmd resendSeq:(int)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(BOOL)ResendWupBuffer:(char*)buffer cmd:(id)cmd resendSeq:(int)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag msgLog:(const char*)log;
-(BOOL)ResendWupBuffer:(char*)buffer cmd:(id)cmd resendSeq:(int)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag resendNum:(BOOL)num;
-(BOOL)SendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately;
-(BOOL)SendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut;
-(BOOL)SendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(BOOL)SendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag msgLog:(const char*)log;
-(BOOL)SendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag resendNum:(BOOL)num;
-(BOOL)PreSendWupBuffer:(int*)buffer;
-(void)ExchangeUin:(id)uin;
-(void)RequestRefreshVerifyPic;
-(void)RequestVerifyPic:(const char*)pic;
-(void)ValidAccountPwd:(const char*)pwd :(const char*)arg2;
-(BOOL)LocalValid:(long long)valid;
-(void)Clear;
-(void)SetClientSecurity:(char*)security length:(int)length;
-(void)SetHA3:(char*)a3 length:(int)length;
-(void)SetD2:(char*)a2 length:(int)length;
-(void)SetA2:(char*)a2 length:(int)length;
-(void)SetSid:(char*)sid length:(int)length;
-(void)SetKey:(int)key;
-(void)SetUin:(long long)uin;
-(id)GetChatAvatarID;
-(id)GetClientSecurity;
-(id)GetHA3;
-(id)GetD2;
-(id)GetA2;
-(void)renewSid:(id)sid;
-(void)RequestStwebToken;
-(id)GetSidStr;
-(id)GetSid;
-(int)GetKey;
-(id)getSid;
-(long long)getUin;
-(long long)GetUin;
-(void)AppLoginOk;
-(void)MSFDebugInvoke;
-(BOOL)IsConnected;
-(BOOL)IsConnecting;
-(void)Disconnect;
-(void)SwitchIPConnect;
-(void)Connect;
-(void*)GetVideoEngine;
-(void)unregistGetAppPluginInfoDelegate:(id)delegate;
-(void)registGetAppPluginInfoDelegate:(id)delegate;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnMSFMsg:(id)msg;
-(void)OnMSFIllegalGrayApp:(id)app;
-(void)checkMSFPacketState:(id)state;
-(void)OnMSFForceOffline:(id)offline;
-(void)OnMSFSocketFlow:(id)flow;
-(void)OnMSFPacketState:(id)state;
-(void)OnMSFApnState:(id)state;
-(void)OnMSFNetworkState:(id)state;
-(void)OnMSFSSOErrorStateResult:(id)result;
-(void)OnMSFRecvDataFromBackend:(const char*)backend buf:(char*)buf bufLen:(int)len seq:(int)seq;
-(void)OnMSFRecvDataFromBackendOnMainThread:(id)backendOnMainThread;
-(void)asynOnMSFRecvDataFromBackend:(id)backend;
-(void)OnMSFRespondVerifyPic;
-(void)OnMSFExchangeUinResult:(id)result;
-(void)OnMSFAuthResult:(id)result;
-(void)dealloc;
-(id)init;
-(void)requestDidCancelLoad:(id)request;
-(void)requestDidFinishLoad:(id)request;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)requestDidStartLoad:(id)request;
-(void)HandleConfigResourceServantCmd:(char*)cmd len:(int)len;
-(BOOL)ParserGetAppCenterConfig:(id)config;
-(void)HandleConfigPicServantCmd:(char*)cmd len:(int)len;
-(void)HandleConfigServantCmd:(char*)cmd len:(int)len;
-(BOOL)SendWupBufferBase:(char*)base cmd:(id)cmd seq:(int*)seq resendSeq:(int)seq4 immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag resendNum:(BOOL)num msgLog:(const char*)log;
@end

@interface SaveMsgArg : NSObject {
	NSArray* msgs;
	BOOL hasSystemMsg;
}
@property(assign, nonatomic) BOOL hasSystemMsg;
@property(retain, nonatomic) NSArray* msgs;
-(void)dealloc;
-(id)init;
@end

@interface MSFProtocolManager : NSObject <JKOffLineImageDelegate, SimpleAlertViewDelegate, IHandleGarbageService> {
	int getAll;
	BOOL needsReVaild;
	NSTimer* timer;
	id<MSFProtocolManagerDelegate> delegate;
	int packForSig;
	NSTimer* _pushActTimer;
	BOOL show;
	BOOL _isGetSigList;
	NSMutableDictionary* _sigListDic;
	BOOL _shouldNotGetGroupList;
	NSString* _uinToModiRemark;
	NSString* _modiRemarkStr;
	QQPerformanceView* _progressView;
	NSString* _forceOfflineTitle;
	NSString* _forceOfflineTips;
}
@property(retain, nonatomic) NSMutableDictionary* sigListDic;
@property(assign, nonatomic) BOOL show;
@property(assign, nonatomic) id<MSFProtocolManagerDelegate> delegate;
@property(retain, nonatomic) NSTimer* pushActTimer;
@property(retain, nonatomic) NSTimer* timer;
@property(assign) BOOL needsReVaild;
+(id)GetInstance;
-(void)handleGarbageFinish;
-(void)handleGarbageTotalProcedure:(BOOL)procedure;
-(void)handleGarbageTroopMsgProcedure:(id)procedure;
-(BOOL)executePerformanceOptimization:(id)optimization;
-(void)onPacketError:(id)error;
-(void)msfSendAndRecvRequestResult:(id)result;
-(void)setNeedToReValid;
-(void)playSoundEffectInBackground:(id)background;
-(void)playSoundEffect:(id)effect shouldVibrate:(BOOL)vibrate;
-(void)playSoundEffect:(id)effect;
-(void)AnswerAddedFriend:(long long)aFriend addUin:(long long)uin myAllowFlag:(int)flag groupid:(int)groupid refuseReason:(id)reason;
-(void)SetOnlineStatusForVersionForth;
-(void)ActionGetContactRecommendMsg:(id)msg;
-(void)ActionRegisterToken:(id)token;
-(void)GetBuddyListSig;
-(void)getOneBuddySig:(id)sig;
-(void)RemoveHeadImageCacheInfoForGroup:(id)group;
-(void)RemoveHeadImageCacheInfo;
-(void)updateChatViewSig:(id)sig;
-(void)appendSendingFailedMsg:(long long)msg msgContent:(id)content errorCode:(int)code errorMsg:(id)msg4 sendType:(int)type;
-(void)OnMSFNetworkApnStateNotification:(id)notification;
-(void)OnMSFNetworkStateNotification:(id)notification;
-(void)RequestNeedFullInfo:(id)info;
-(void)saveQQMessage:(id)message;
-(void)saveAdMessage:(id)message;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)ActionRequestOffline:(id)offline;
-(void)RequestForceOffline:(const char*)offline tips:(const char*)tips;
-(void)ActionRequestBatchSetGroupFilter;
-(void)sendAlertMessage:(id)message to:(id)to;
-(void)insertAlertMessage:(id)message;
-(void)insertVideMessgeModel:(id)model;
-(void)GetFriendList;
-(void)EnterBackGround;
-(void)ActionPushSerCmdSet:(id)set;
-(void)sendAPNSConfig:(int)config;
-(void)ActionOnAnswerAddedFriendResponse:(id)response;
-(void)DeleteFriend:(id)aFriend;
-(void)StartAddContactFriend:(id)aFriend;
-(void)StartAddFriend:(id)aFriend;
-(void)AddFriend:(long long)aFriend addUin:(long long)uin message:(id)message addUinSetting:(int)setting myAllowFlag:(int)flag group:(int)group autoAdd:(BOOL)add sig:(id)sig sourceID:(int)anId sourceSubID:(int)anId10 phoneCode:(id)code;
-(void)RequestValidPic;
-(void)validatePicWithCode:(id)code;
-(void)RequestCheckFriend:(id)aFriend;
-(void)RequestGetGroupInfo:(id)info;
-(void)RequestGetFriendInfo:(id)info;
-(void)RequestSimpleInfo:(id)info;
-(void)RequestFullInfo:(id)info;
-(void)RequestOnlineFriends;
-(int)RequestGetLastLoginInfo:(int)info currentIndex:(int)index currentUIN:(long long)uin;
-(void)RequestBuddyList:(int)list;
-(void)OnRequestBuddyListNotification:(id)notification;
-(void)ActionGetOnlineBuddyList:(id)list;
-(void)openAPN:(id)apn;
-(void)stopHeartBeat;
-(void)startHeartBeat;
-(void)StartAPN;
-(void)GetGroupMemberRemark:(id)remark;
-(void)ActionGetGroupMemberRemark:(id)remark;
-(void)syncLocalGroupFilterToServer;
-(void)SendGroupFilter:(BOOL)filter;
-(void)RequestGetGroupListOnLogin;
-(int)RequestGetGroupListManually;
-(int)RequestGetGroupList;
-(void)onAccountLogout:(id)logout;
-(void)RequestValidate;
-(void)ActionConnect:(id)connect;
-(void)StartLoginProcess;
-(id)init;
-(void)dealloc;
-(void)ActionOnAddFriendResponse:(id)response;
-(void)ActionOnUserAddFriendSettingResponse:(id)response;
-(void)ActionOnDeleteFriendResponse:(id)response;
-(void)ActionCheckFriend:(id)aFriend;
-(void)sigSync:(id)sync;
-(void)ActionHeartBeat;
-(void)ActionGetGroupInfo:(id)info;
-(void)delaySaveGroupExInfo;
-(void)ActionGetFriendInfo:(id)info;
-(void)ActionGetMyInfo:(id)info;
-(void)ActionGetSigList:(id)list;
-(void)requestGetsig:(id)getsig;
-(void)onLastLoginInfoCallback:(id)callback;
-(void)ActionGetBuddyList;
-(void)SaveAccostMsgToDataBase:(id)dataBase;
-(void)SaveQQMsgToDataBase:(id)dataBase;
-(void)SaveQQMsgToDataBase:(id)dataBase sound:(BOOL)sound;
-(void)ActionUpdateContactFriendStatus:(id)status uin:(long long)uin;
-(void)callBackModifyRemark:(id)remark;
-(void)notifyModifyRemarkError;
-(void)ModifyFriendRemark:(id)remark;
-(void)delayMotifyFriendRemark:(id)remark remark:(id)remark2;
-(void)ActionOnline;
-(void)ActionPushHeartBeat;
-(void)ActionSetToken:(id)token;
-(void)ActionCloseAPN;
-(void)GetSigAndKeyNotify;
-(void)firstLoginRecvMsgTimeout:(id)timeout;
-(void)ActionValidateInBackground;
-(void)getGroupListWithFrequencyControl;
-(void)setShouldGetGroupList;
-(void)loginSuccess:(id)success;
-(void)ActionValidate:(id)validate;
-(void)initPerformanceOptiDelay;
@end

@interface QQDataCenter : NSObject {
@private
	QQAccountsManager* accountsManager;
	NSString* pwd;
	char* m_crptSig;
	int m_crptSigLen;
	char* m_crptKey;
	NSMutableDictionary* imgUinDict;
	NSMutableDictionary* contactGidDict;
	NSMutableArray* groupInfoArr;
	BOOL connected;
	int _onlineStatus;
	NSString* token;
	BOOL _bIsShowOnline;
	BOOL _bIFDebug;
	BOOL _isPushVideo;
	NSString* _pushVideoUin;
	long long _pushVideoTime;
	BOOL _isSupportVide4Os;
	NSString* stWx_Web;
	int _ADIndex;
	int _ADTime;
	NSString* _ADContent;
	void* _handler;
	NSMutableArray* _knrsList;
	NSMutableArray* _adverSystemList;
	BOOL _manualCheck;
	BOOL _isAutoCheckUpdate;
	BOOL _lockChatScrollView;
	BOOL _bCrashFlag;
	BOOL _isUpdateToken;
	NSMutableDictionary* _dTroopMaxSeq;
	UILocalNotification* _localNotification;
	BOOL _isAppInBackground;
	int ipodState;
	int _addFriendFlag;
	int _maxMsgResendCount;
	double _msgResendInterval;
	double _maxRetryTime;
	int _userState;
	NSMutableDictionary* _voiceStateDict;
	int _pcOnlineStatus;
	int _pcDataLineAbility;
	NSTimer* _updateMyCommonCardTimer;
	NSMutableDictionary* _tmpStrangerUinDic;
	BOOL _isrecAutoPushBackMsg;
	NSMutableDictionary* _recAutoPushBackMsgUinDictionary;
	int _c2cRoamMsg;
	int _checkRdmSdkCount;
	int _applicationIconBadgeNumber;
	NSMutableArray* _suspendInsertC2CMessages;
	BOOL _playSound;
	int _enterForegroundTime;
	QQC2CMsgTable_Async* _c2cTable;
	NSDictionary* _nickUinDict;
	NSString* uin;
	NSString* nick;
	BOOL didStateSave;
	int lastMsgRequestTime;
	NSData* lastSyncCookie;
	int addFriendFlag;
}
@property(assign, nonatomic) BOOL playSound;
@property(assign, nonatomic) int applicationIconBadgeNumber;
@property(assign, nonatomic) int c2cRoamMsg;
@property(assign, nonatomic) BOOL isrecAutoPushBackMsg;
@property(retain, nonatomic) NSMutableDictionary* tmpStrangerUinDic;
@property(retain, nonatomic) NSMutableDictionary* voiceStateDict;
@property(assign, nonatomic) int userState;
@property(readonly, assign, nonatomic) double maxRetryTime;
@property(readonly, assign, nonatomic) double msgResendInterval;
@property(readonly, assign, nonatomic) int maxMsgResendCount;
@property(assign, nonatomic) int addFriendFlag;
@property(assign, nonatomic) int ipodState;
@property(assign, nonatomic) BOOL bCrashFlag;
@property(retain, nonatomic) NSMutableDictionary* dTroopMaxSeq;
@property(retain, nonatomic) NSMutableArray* adverSystemList;
@property(assign, nonatomic) NSMutableArray* knrsList;
@property(assign, nonatomic) int ADTime;
@property(assign, nonatomic) int ADIndex;
@property(retain, nonatomic) NSString* ADContent;
@property(retain, nonatomic) NSString* stWx_Web;
@property(readonly, assign, nonatomic) QQAccountsManager* accountsManager;
@property(assign, nonatomic) void* handler;
@property(assign, nonatomic) BOOL isSupportVide4Os;
@property(assign, nonatomic) long long pushVideoTime;
@property(retain, nonatomic) NSString* pushVideoUin;
@property(assign, nonatomic) BOOL isPushVideo;
@property(assign, nonatomic) BOOL bIFDebug;
@property(assign, nonatomic) BOOL bIsShowOnline;
@property(assign, nonatomic) int onlineStatus;
@property(retain, nonatomic) NSMutableArray* groupInfoArr;
@property(retain, nonatomic) NSMutableDictionary* contactGidDict;
@property(retain, nonatomic) NSDictionary* nickUinDict;
@property(assign, nonatomic) BOOL isUpdateToken;
@property(assign, nonatomic) BOOL manualCheck;
@property(assign, nonatomic) BOOL isAutoCheckUpdate;
@property(assign, nonatomic) BOOL didStateSave;
@property(assign, nonatomic) BOOL connected;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) NSString* pwd;
@property(readonly, assign, nonatomic) NSString* uin;
@property(copy, nonatomic) NSString* token;
@property(readonly, assign, getter=getLastSyncCookie) NSData* lastSyncCookie;
@property(assign, getter=getLastMsgRequestTime) int lastMsgRequestTime;
@property(assign, nonatomic) BOOL lockChatScrollView;
@property(retain, nonatomic) UILocalNotification* localNotification;
@property(assign, nonatomic) BOOL isAppInBackground;
@property(assign, nonatomic) int pcDataLineAbility;
@property(assign, nonatomic) int pcOnlineStatus;
+(id)GetInstance;
-(unsigned)getLastMsgBubbleIDIfCurrentIllegal:(unsigned)illegal withChatType:(int)chatType withChatUin:(id)chatUin withSenderUin:(id)senderUin;
-(BOOL)deleteQQMessage:(id)message;
-(unsigned)validCountOfMessages:(id)messages;
-(id)nickForGroupCode:(id)groupCode;
-(void)postNotificationToDownloadA9:(id)downloadA9;
-(id)getC2CLatestMessage:(id)message;
-(int)GetKeyBoradHeight;
-(void)loadAdvertisementFloder;
-(void)UpdateLoginToken;
-(void)setDeleteGroupMsgFlag:(int)flag;
-(int)getDeleteGroupMsgFlag;
-(void)saveChatViewControllerTipsState;
-(void)loadChatViewControllerTipsState;
-(void)resetMessageData;
-(float)GetDownloadPicProcess:(id)process;
-(int)GetDownloadPicSize:(id)size;
-(void)deleteCustomFaceRecord:(id)record;
-(void)addCustomFaceRecord:(id)record name:(id)name;
-(void)reloadCustomFaceList;
-(id)getCustomFaceList;
-(void)reloadAdvisView;
-(void)uploadImageEnd:(id)end;
-(void)saveAdvertisementtLis;
-(void)createAdvertismentFloder;
-(void)getKnrsList:(int)list pn:(int)pn;
-(void)StartGetKnrsList;
-(void)getKnrsListDelay:(id)delay;
-(void)getKnrsListCallback:(id)callback;
-(int)GetFriendPn;
-(void)clearAllMessage;
-(void)ClearCacheForEngine;
-(id)createlistIfNeeded:(id)needed;
-(void)saveDb2File;
-(BOOL)getFullListIfNeeded;
-(BOOL)isDiscussGroupCurrentAIO:(id)aio;
-(void)removeRelationSystemMessages;
-(BOOL)hasReciveMsgForUin:(id)uin;
-(BOOL)isFriendWithUin:(id)uin;
-(int)statusByUin:(id)uin;
-(BOOL)isFriendUin:(id)uin;
-(id)nickForUin:(id)uin;
-(long long)getUin;
-(id)getNick;
-(id)getFriendSig:(id)sig;
-(id)getChatAvatarID;
-(BOOL)isSuperVip;
-(BOOL)isVip;
-(BOOL)canGetRuest;
-(void)reciveFileMsg:(id)msg;
-(void)updateMyCommonCardTimerCallBack;
-(void)QQLoginViewDidLoginAfterDelay;
-(BOOL)QQLoginViewDidLogin:(id)qqloginView;
-(void)LockAutoReplyWith:(id)with;
-(BOOL)GetAutoReplyLock:(id)lock;
-(void)appWillForegroundRecordIpodPlayStatus;
-(void)appWillEnterBackgroundRecordIpodPlayStatus;
-(void)setForegroundRecordIpodPlayStatus;
-(void)setBackgroundRecordIpodPlayStatus;
-(void)ipodDeviceNowPlayStatusDidChange:(id)ipodDeviceNowPlayStatus;
-(void)ipodDevicePlayStatusDidChange:(id)ipodDevicePlayStatus;
-(void)doInit;
-(id)init;
-(void)dealloc;
-(char*)GetCrptKey;
-(void)SetCrptKey:(char*)key len:(int)len;
-(int)GetCrptSigLen;
-(char*)GetCrptSig;
-(BOOL)getIsSupportVide4Os;
-(void)SetCrptSig:(char*)sig len:(int)len;
@end

@interface QQRequestItem : NSObject {
	int _requestID;
	int _requestType;
	NSString* _requestCmd;
	NSTimer* _timer;
	id _data;
	long long _userUIN;
}
@property(assign, nonatomic) long long userUIN;
@property(retain, nonatomic) id data;
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) NSString* requestCmd;
@property(assign, nonatomic) int requestType;
@property(readonly, assign, nonatomic) int requestID;
-(void)dealloc;
-(id)initWithID:(int)anId type:(int)type cmd:(id)cmd userUIN:(long long)uin timeoutInterval:(double)interval target:(id)target selector:(SEL)selector;
@end

@interface QQEngine : QQMsgBaseEngine <CIMEngineDelegate> {
@private
	NSString* uin;
	NSString* pwd;
	NSString* loginAccount;
	NSMutableDictionary* _requestQueue;
	NSMutableDictionary* _requestCmdDic;
	int _requestSeq;
	int _latestPicSvrRequestTime;
}
@property(retain, nonatomic) NSString* loginAccount;
@property(retain, nonatomic) NSString* pwd;
@property(retain, nonatomic) NSString* uin;
+(id)GetInstance;
-(void)msfSendAndRecvRequestResult:(id)result;
-(void)requestTimeout:(id)timeout;
-(id)getQueueRequestWithTimer:(id)timer;
-(id)getQueueRequestWithCmd:(id)cmd userUIN:(long long)uin;
-(id)getQueueRequestWithCmd:(id)cmd;
-(id)getQueueRequestWithID:(int)anId;
-(int)getQueueRequestCountWithCmd:(id)cmd;
-(void)removeQueueRequestWithID:(int)anId;
-(void)addQueueRequestWithID:(int)anId cmd:(id)cmd timeout:(int)timeout data:(id)data userUIN:(long long)uin;
-(void)CIMEngine:(id)engine didGetSDKUpgrade:(id)upgrade;
-(void)CIMEngine:(id)engine didGetCarrierServerList:(id)list result:(int)result nextUpdateTime:(int)time;
-(void)CIMEngine:(id)engine didGet2G3GPicServerList:(id)list WifiPicServerList:(id)list3 result:(int)result nextUpdateTime:(int)time;
-(void)CIMEngine:(id)engine didGet2G3GServerList:(id)list WifiServerList:(id)list3 result:(int)result nextUpdateTime:(int)time;
-(void)CIMEngine:(id)engine didValidPwdResult:(int)result para:(id)para;
-(void)CIMEngine:(id)engine didConnectWithCode:(int)code;
-(int)registerFunctionWithTarget:(id)target selector:(SEL)selector key:(id)key arg:(id)arg;
-(void)RequestPicSvrConfig;
-(void)RequestPicSvrConfig:(BOOL)config;
-(void)RequestConfig:(id)config;
-(void)RequestResourcePListForName:(id)name resourcetype:(int)resourcetype;
-(void)RequestResourcePListForName:(id)name;
-(void)checkAndUpdateSdk;
-(void)checkAndUpdateAppCenterConfig;
-(void)checkAndUpdateThemeListConfig;
-(void)checkLogFile;
-(void)checkAndUpdateAddFriendSourceConfig;
-(void)checkAndUpdateRecommendSourceConfig;
-(void)checkAndUpdateTagsConfig;
-(void)dealloc;
-(id)initQQEngine;
-(void)dealloc;
-(void)deleteUserLocalInfoWithUin:(id)uin;
-(BOOL)existUserWithUin:(id)uin;
-(id)getUserVaildInfoForUin:(id)uin;
-(void)updateUserValid:(id)valid A2:(id)a2 D2:(id)a23 sid:(id)sid key:(int)key pwd:(id)pwd;
-(void)insertUser:(id)user pwd:(id)pwd A2:(id)a2 D2:(id)a24 sid:(id)sid key:(int)key;
-(sqlite3*)getDB;
-(id)init;
@end

@interface CompareLabelTool : NSObject {
}
+(int)compareLabel:(id)label with:(id)with;
@end

@interface QQModel : NSObject {
}
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface PushSvrEngine : NSObject <CIMPushSvrEngineDelegate> {
	id respondEngine;
	int lastSeq;
	NSTimer* _timer;
	int _curSendCmd;
	int _retryCount;
}
@property(retain, nonatomic) id respondEngine;
+(void)exitInstance;
+(id)GetInstance;
-(void)timeout;
-(void)StopTimer;
-(void)StartTimer:(double)timer;
-(void)forcePCOffline;
-(void)RequestSvcReqForeGround;
-(void)RequestSvcReqBackGround;
-(void)dealloc;
-(void)RequestSetPushConfig:(id)config;
-(int)pushStatusToServer:(int)server;
-(void)CIMPushSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)RequestPushAck:(long long)ack iStatus:(long long)status;
-(void)RequestCloseAPN:(id)apn;
-(void)RequestOpenAPN:(id)apn time:(int)time IsOnline:(BOOL)online;
-(int)RequestDelToken:(id)token vDelOtheruin:(id)otheruin;
-(void)RequestSetTokenWithDic_Content:(id)dic_Content;
-(void)RequestSetTokenWithDic:(id)dic;
-(void)RequestSetToken:(id)token;
-(void)RequestSvcReqRegisterTimeOut:(id)anOut;
-(int)RequestSvcReqRegister:(id)aRegister;
-(void)RegisterToken:(long long)token;
-(void)PaserToken:(id)token vector:(vector<int, std::allocator<int> >*)vector;
-(id)init;
@end

@interface QQLObjectInfo : QQModel {
	NSString* _content;
	NSNumber* _number;
	NSNumber* _failNumber;
	long long _msgSeq;
}
@property(assign, nonatomic) long long msgSeq;
@property(retain, nonatomic) NSNumber* failNumber;
@property(retain, nonatomic) NSNumber* number;
@property(retain, nonatomic) NSString* content;
-(id)description;
-(int)compare:(id)compare;
-(void)dealloc;
@end

@interface QQLargeMsgInfo : QQModel {
	int _node;
	BOOL _largeFlag;
	int _largeCount;
	int _largeIndex;
	int _largeMsgID;
	NSMutableArray* _msgIDList;
	BOOL _closeMerge;
	NSMutableArray* _msgIDContent;
	NSMutableString* _msgContent;
}
@property(assign, nonatomic) BOOL closeMerge;
@property(retain, nonatomic) NSMutableString* msgContent;
@property(retain, nonatomic) NSMutableArray* msgIDContent;
@property(retain, nonatomic) NSMutableArray* msgIDList;
@property(assign, nonatomic) int largeMsgID;
@property(assign, nonatomic) int largeIndex;
@property(assign, nonatomic) BOOL largeFlag;
@property(assign, nonatomic) int largeCount;
@property(assign, nonatomic) int node;
-(BOOL)insertLargeInfoID:(int)anId msgSeq:(long long)seq infoIndex:(int)index content:(id)content state:(int)state;
-(BOOL)largeMsgInfoInSame:(id)same;
-(BOOL)isContainFialMsg;
-(BOOL)isContainMsgPkgIndex:(int)index;
-(BOOL)largeMsgContain:(int)contain;
-(void)dealloc;
-(id)init;
@end

@interface QQMessageModel : QQModel {
	NSString* _uin;
	id _content;
	int _time;
	int msgType;
	int read;
	BOOL inOut;
	BOOL _isSelfImage;
	NSString* _groupCode;
	int msgID;
	long long _msgUid;
	long long _msgSeq;
	int _msgLen;
	BOOL _mgroupMsg;
	NSString* _fileKey;
	NSString* _fileTransId;
	int _accType;
	int _sortTimeOfAccMsg;
	NSString* _nickname;
	BOOL _isDiscussGroupMsg;
	BOOL _isDiscussTipMsg;
	NSString* _discussGroupUin;
	int _dicussTipType;
	BOOL _isGroupTmpMsg;
	long long _groupFriendGroupUIN;
	NSString* _groupFriendGroupCode;
	long long _srcGrpMsgID;
	int _srcGrpMsgCount;
	id _srcGrpMsgContent;
	NSString* _srcNickName;
	NSString* _srcUin;
	int _srcMsgType;
	NSString* _strMsg;
	int _bodyType;
	int _richAdMsgType;
	BOOL _actionType;
	NSString* _actionUrl;
	unsigned _appShareID;
	int _fileMsgType;
	unsigned _onlineFileId;
	int _placeholderMsg;
	NSString* _picUrl;
	NSString* _adID;
	int _roamMsg;
	int _conseqMsg;
	unsigned _roamRandom;
	unsigned _roamTime;
	NSString* _mobilePhone;
	unsigned _cOp;
	NSString* _attMsg;
	NSString* _auth;
	BOOL _visiable;
	int _msgState;
	int _errorCode;
	NSString* _syncUin;
	BOOL _loadingState;
	int _toSecretStatus;
	int _fromSecretStatus;
	unsigned long long _peerReadDate;
	int _limitTime;
	NSString* _secretFileKey;
	NSString* _secretFileFromUin;
	NSString* _secretFileToUin;
	int _captureCount;
	int _secretFileEncryptKey;
	int _secretFilePreHeadLength;
	int _relatedFailedMsgID;
	QQLargeMsgInfo* _largeMsgInfo;
	BOOL _pkgNum;
	BOOL _pkgIndex;
	short _divSeq;
	BOOL _isInsertToDB;
	unsigned short _wSourceID;
	unsigned short _wSourceSubID;
	NSString* _strShareExtra;
	int _kindsofmsg;
	int _enumRichSrcType;
	int _classifyID;
	unsigned _bubbleID;
@private
	BOOL _isFromOldTable;
	long long _messageRandom;
	BOOL _canceledInStatusBar;
	int _messageSeq;
}
@property(assign, nonatomic) BOOL canceledInStatusBar;
@property(assign, nonatomic) int messageSeq;
@property(assign, nonatomic) long long messageRandom;
@property(assign, nonatomic) int classifyID;
@property(assign, nonatomic) BOOL isFromOldTable;
@property(assign, nonatomic) unsigned bubbleID;
@property(assign, nonatomic) int enumRichSrcType;
@property(assign, nonatomic) int kindsofmsg;
@property(retain, nonatomic) NSString* strShareExtra;
@property(assign, nonatomic) BOOL isInsertToDB;
@property(assign, nonatomic) unsigned short wSourceSubID;
@property(assign, nonatomic) unsigned short wSourceID;
@property(assign, nonatomic) short divSeq;
@property(assign, nonatomic) BOOL pkgIndex;
@property(assign, nonatomic) BOOL pkgNum;
@property(retain, nonatomic) QQLargeMsgInfo* largeMsgInfo;
@property(assign, nonatomic) int relatedFailedMsgID;
@property(retain, nonatomic) NSString* picUrl;
@property(assign, nonatomic) BOOL loadingState;
@property(retain, nonatomic) NSString* syncUin;
@property(assign, nonatomic) int errorCode;
@property(assign, nonatomic) int placeholderMsg;
@property(assign, nonatomic) unsigned onlineFileId;
@property(assign, nonatomic) int fileMsgType;
@property(assign, nonatomic) int msgState;
@property(retain, nonatomic) NSString* mobilePhone;
@property(assign, nonatomic) BOOL visiable;
@property(retain, nonatomic) NSString* auth;
@property(retain, nonatomic) NSString* attMsg;
@property(retain, nonatomic) NSString* strMsg;
@property(retain, nonatomic) NSString* adID;
@property(assign, nonatomic) unsigned roamTime;
@property(assign, nonatomic) unsigned roamRandom;
@property(assign, nonatomic) int conseqMsg;
@property(assign, nonatomic) int roamMsg;
@property(assign, nonatomic) unsigned appShareID;
@property(retain, nonatomic) NSString* actionUrl;
@property(assign, nonatomic) BOOL actionType;
@property(assign, nonatomic) int richAdMsgType;
@property(retain, nonatomic) NSString* srcUin;
@property(assign, nonatomic) int srcMsgType;
@property(retain, nonatomic) NSString* srcNickName;
@property(retain, nonatomic) id srcGrpMsgContent;
@property(assign, nonatomic) int srcGrpMsgCount;
@property(assign, nonatomic) long long srcGrpMsgID;
@property(assign, nonatomic) int bodyType;
@property(assign, nonatomic, getter=IsGroupTmpMsgType) BOOL isGroupTmpMsg;
@property(retain, nonatomic) NSString* groupFriendGroupCode;
@property(assign) int dicussTipType;
@property(assign, nonatomic) long long groupFriendGroupUIN;
@property(readonly, assign, nonatomic) NSString* paramStamp;
@property(readonly, assign, nonatomic) NSString* textContent;
@property(retain, nonatomic) NSString* discussGroupUin;
@property(assign, nonatomic) BOOL isDiscussTipMsg;
@property(assign, nonatomic) BOOL isDiscussGroupMsg;
@property(copy, nonatomic) NSString* nickname;
@property(assign) int sortTimeOfAccMsg;
@property(assign) int accType;
@property(retain, nonatomic) NSString* fileTransId;
@property(retain, nonatomic) NSString* fileKey;
@property(assign, nonatomic) BOOL mgroupMsg;
@property(assign, nonatomic) long long msgUid;
@property(assign, nonatomic) long long msgSeq;
@property(assign, nonatomic) int msgLen;
@property(assign, nonatomic) int msgID;
@property(assign, nonatomic) BOOL isSelfImage;
@property(assign, nonatomic) BOOL inOut;
@property(assign, nonatomic) int read;
@property(assign, nonatomic) int time;
@property(assign, nonatomic) int msgType;
@property(retain, nonatomic) id content;
@property(retain, nonatomic) NSString* groupCode;
@property(retain, nonatomic) NSString* uin;
@property(assign, nonatomic) int captureCount;
@property(assign, nonatomic) int secretFilePreHeadLength;
@property(assign, nonatomic) int secretFileEncryptKey;
@property(retain, nonatomic) NSString* secretFileToUin;
@property(retain, nonatomic) NSString* secretFileFromUin;
@property(retain, nonatomic) NSString* secretFileKey;
@property(assign, nonatomic) int fromSecretStatus;
@property(assign, nonatomic) int toSecretStatus;
@property(assign, nonatomic) int limitTime;
@property(assign, nonatomic) unsigned long long peerReadDate;
-(void)dealloc;
-(BOOL)isFromSameUinWithModel:(id)model;
-(BOOL)isMapMessage;
-(id)description;
-(BOOL)isContactRequestMsg;
-(BOOL)isFriendRequestMsg;
-(BOOL)isGroupRequestMsg;
-(BOOL)GetFriendMsgHidden;
-(int)GetCurSysMessageType;
-(unsigned)getType;
-(BOOL)isMContactMsg;
-(BOOL)isGroupAuthMsg;
-(void)addTexts:(id)texts withColor:(id)color forKeys:(id)keys;
-(id)getMsg;
-(BOOL)IsGroupAcceptMsg;
-(unsigned)GetGroupInviMsgState;
-(id)systemMsgGetFriendUin;
-(id)systemMsgGetGroupUin;
-(id)systemMsgGetGroupTitle;
-(id)getAdMsgSubject;
-(id)getAdMsgRespType;
-(id)getAdMsgRespPara;
-(id)getAdMsgRespAdrr;
-(id)getAdMsgStringByKeyWord:(id)word;
-(id)getAdMsgRespDesc;
-(id)getAdMsgContent;
-(int)compareByMsgSeqAsc:(id)asc;
-(int)compareByTimeAsc:(id)asc;
-(int)compareByTimeDesc:(id)desc;
-(id)GetDisplyContent;
-(id)GetContent;
-(BOOL)isAutoReplyMsg;
-(BOOL)isGroupMsg;
-(id)initWithMessageModel:(id)messageModel;
-(id)init;
-(id)allGroupMessageSeqs;
-(int)msgState;
-(id)GetLargeContent;
-(long long)getMaxSeq;
-(BOOL)isLargeMessage;
-(BOOL)isCompleteLargeMsg;
-(id)samllContent;
-(id)addMsgToLargeMsg:(id)largeMsg;
-(BOOL)canMergeMessageWith:(id)with;
-(int)compareByMsgSeq:(id)seq;
-(bool)isEqualMessageModel:(id)model;
-(id)encodePrefix;
-(id)EncodeGroupTmpMsg:(int*)msg;
-(void)DecodeGroupTmpMsg:(id)msg;
@end

@interface QQC2CMessageIdentifyModel : QQModel {
	BOOL _dummy;
	BOOL _reported;
	BOOL _rich;
	int _weight;
	int _time;
	int _seq;
	long long _uid;
	BOOL _pkgNum;
	BOOL _pkgIndex;
	short _divSeq;
}
@property(assign) short divSeq;
@property(assign) BOOL pkgIndex;
@property(assign) BOOL pkgNum;
@property(assign) long long uid;
@property(assign) int seq;
@property(assign) int time;
@property(assign) int weight;
@property(assign) BOOL rich;
@property(assign) BOOL reported;
@property(assign) BOOL dummy;
-(id)copyWithZone:(NSZone*)zone;
-(int)compareTime:(id)time;
-(id)description;
-(id)init;
@end

@interface QQC2CMessageSyncInfo : NSObject {
	unsigned _completed;
	unsigned _lastReadTime;
	int _unreadCount;
}
@property(assign) int unreadCount;
@property(assign) unsigned lastReadTime;
@property(assign) unsigned completed;
-(id)description;
@end

@interface QQRecentMessageModel : QQMessageModel {
	int _unreadCount;
	int _handledCount;
	int _status;
	int _priority;
	int _certifyGrade;
	NSString* _nick;
	UIImage* _groupMemberHead;
	EmotionParseResult* _result;
	NSString* _timeString;
	int _messageType;
	BOOL _hide;
@private
	int _sessionType;
}
@property(retain, nonatomic) NSString* timeString;
@property(retain, nonatomic) EmotionParseResult* result;
@property(retain, nonatomic) UIImage* groupMemberHead;
@property(copy, nonatomic) NSString* nick;
@property(assign, nonatomic) int sessionType;
@property(assign, nonatomic) int priority;
@property(assign, nonatomic) int status;
@property(readonly, assign, nonatomic) int unhandledCount;
@property(assign, nonatomic) int handledCount;
@property(assign, nonatomic) int certifyGrade;
@property(assign, nonatomic) int unreadCount;
@property(assign, nonatomic) BOOL hide;
@property(assign, nonatomic) int messageType;
-(BOOL)isMatchString:(id)string;
-(id)getShowNick;
-(void)setContent:(id)content;
-(void)setTime:(int)time;
-(void)dealloc;
-(id)description;
-(id)init;
-(id)initWithMessageModel:(id)messageModel;
@end

@interface MsgSendingTask : NSObject {
	int _seqId;
	int _timeStamp;
	int _serverTimeStamp;
	int _retryCount;
	long long _fromUin;
	long long _toUin;
	long long _groupCode;
	BOOL _isDiscuss;
	NSString* _msg;
	NSString* _command;
	NSTimer* _timer;
	double _startTime;
	NSData* _data;
	int _result;
	NSString* _errorMsg;
	int _errorCode;
	int _RDMEventMsgSeq;
	int _recentState;
	int _msgState;
}
@property(assign, nonatomic) int errorCode;
@property(assign, nonatomic) int msgState;
@property(assign, nonatomic) int recentState;
@property(retain, nonatomic) NSString* errorMsg;
@property(assign, nonatomic) int result;
@property(assign, nonatomic) BOOL isDiscuss;
@property(readonly, assign, nonatomic) NSString* cmd;
@property(assign, nonatomic) int retryCount;
@property(retain, nonatomic) NSData* data;
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) NSString* msg;
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) long long toUin;
@property(assign, nonatomic) long long fromUin;
@property(assign, nonatomic) int serverTimeStamp;
@property(assign, nonatomic) int timeStamp;
@property(assign, nonatomic) int seqId;
-(void)sendErrorAction;
-(id)description;
-(BOOL)shouldDiscard;
-(void)dealloc;
-(void)startTimer:(double)timer target:(id)target selector:(SEL)selector;
-(id)initWithType:(int)type seq:(int)seq timeStamp:(int)stamp toUin:(long long)uin groupCode:(long long)code cmd:(id)cmd;
@end

@interface MsgSvrEngine : QQMsgBaseEngine <CIMMsgSvrEngineDelegate, IPacketSendResultHandler> {
	id respondEngine;
	int lastseq;
	NSMutableDictionary* DicRoamMsgNum;
	NSMutableDictionary* DicRoamMsg;
	int LastSeq;
	NSMutableArray* WPAArray;
	CIMEngineMsgStruct videoMsgCache;
	int lastCmdType;
	long long pushUin;
	long long pushTime;
	int videoSeq;
	NSMutableArray* MsgSendingTaskQueue;
	QMsgDuplicateChecker* _msgDuplicateChecker;
	NSString* _licence;
	QQSendPackageQueue* _sendQueue;
	int _lastRandom;
	short _lastDivSeq;
}
@property(retain, nonatomic) NSMutableArray* WPA;
@property(assign, nonatomic) int LastSeq;
@property(retain, nonatomic) NSMutableDictionary* DicRoamMsg;
@property(retain, nonatomic) NSMutableDictionary* DicRoamMsgNum;
@property(assign, nonatomic) int lastseq;
@property(retain, nonatomic) id respondEngine;
+(void)exitInstance;
+(id)GetInstance;
+(void)handleOrphanC2CPacket:(id)packet;
+(void)handleC2CCookieEnd;
+(void)handleC2CCookie:(id)cookie;
+(BOOL)handleC2CMessageSync:(id)sync;
+(BOOL)peekC2CContinueFlag:(id)flag;
+(void)handleC2CAccostMessageArray:(id)array;
+(void)handleC2COnlineMessageArray:(id)array;
+(void)handleC2CMessageArray:(id)array;
+(id)removeDuplicateInArray:(id)array;
-(id).cxx_construct;
-(int)_sendOfflineMsg:(long long)msg msg:(const char*)msg2 time:(int)time sendType:(int)type msgLen:(int)len bodyType:(int)type6 msgType:(int)type7 msgID:(int)anId strMsg:(id)msg9 pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgSeq:(unsigned)seq13 msgRandom:(unsigned)random;
-(id)handleMarketFaceGroupCachData:(id)data marketFace:(id)face;
-(void)sendPackageTimeout:(id)timeout;
-(void)handlerGroupMsgResponse:(id)response errorCode:(int)code serverTime:(int)time errorMsg:(id)msg;
-(void)clearAllDuplicateMsg;
-(void)clearLocalPushData;
-(void)processM2MVideoMsgLocalPush:(CIMEngineMsgStruct*)push SeqId:(int)anId SubCmd:(int)cmd FromUin:(long long)uin DateTime:(int)time;
-(void)processBackgroundVideoRequest:(bool)request;
-(void)ResponsePushPCOnlineStatus:(long long)status withCode:(int)code;
-(void)ResponsePushFStatus:(long long)status replyCode:(int)code;
-(id)WPAMsgArraySort:(id)sort;
-(void)CIMMsgSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg seqId:(int)anId;
-(void)convertSingleMessage:(AccostMsg*)message messageArray:(id)array;
-(id)GetTopC2CChatViewUin;
-(void)convertSingleMessage:(SvcGetMsgInfo*)message messageArray:(id)array fileAssistantArray:(id)array3 dummyModels:(id)models split:(BOOL)split pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq;
-(BOOL)isC2CMessageInfoDuplicated:(SvcGetMsgInfo*)duplicated dummyModels:(id)models split:(BOOL)split addToDummy:(BOOL*)dummy;
-(int)isC2CNormalMessageRich:(SvcGetMsgInfo*)rich;
-(int)PreDecodeOfflinePicture:(const char*)picture bodyLen:(int)len;
-(BOOL)PreCheckIsOfflinePicture:(const char*)picture totalLen:(int*)len bodyLen:(int*)len3;
-(unsigned)PreExtract0xa9MessageReservedWord:(SvcGetMsgInfo*)word;
-(int)PreExtract0xa9MessageType:(SvcGetMsgInfo*)type;
-(int)PreExtract0xa9MessageSubCmd:(SvcGetMsgInfo*)cmd;
-(void)didRespGetRoamMsgByNum:(SvcResponseGetRoamMsg)num msgArray:(id)array;
-(void)didReqPushMsg:(SvcReqPushMsg*)msg msg:(CIMEngineMsgStruct)msg2 seqId:(int)anId requestId:(int)anId4 toUin:(long long)uin;
-(void)handleGetRoamMsg:(CIMEngineMsgStruct)msg seqId:(int)anId;
-(void)handleGetRoamMsgInOneDay:(SvcResponseGetRoamMsgInOneDay)oneDay ssoSeq:(int)seq;
-(id)handleRoamMessageVec:(vector<MessageSvcPack::MsgRecord, std::allocator<MessageSvcPack::MsgRecord> >)vec;
-(id)parseMsgType0x210:(MsgType0x210*)a210;
-(id)parseMsgType0x210SubMsgType0x24:(MsgType0x210SubMsgType0x24*)a24;
-(void)parseMsgType0x210SubMsgType0x1d:(MsgType0x210SubMsgType0x1d*)d;
-(void)parseMsgType0x210SubMsgType0x20:(MsgType0x210SubMsgType0x20*)a20;
-(void)parseMsgType0x210SubMsgType0x17:(MsgType0x210SubMsgType0x17*)a17;
-(id)parseMsgType0x210SubMsgType0x13:(MsgType0x210SubMsgType0x13*)a13;
-(id)parseMsgType0x210SubMsgType0xe:(MsgType0x210SubMsgType0xe*)xe;
-(id)parseMsgType0x210SubMsgType0xa:(MsgType0x210SubMsgType0xa*)xa;
-(id)parseMsgType0x210SubMsgType0xb:(MsgType0x210SubMsgType0xb*)xb;
-(id)parseMsgType0x210SubMsgType0x2:(MsgType0x210SubMsgType0x2*)a2;
-(BOOL)parseC2CMineMsgSync:(MsgInfo*)sync toArray:(id)array;
-(void)parseMsgInfo:(MsgInfo*)info msg:(CIMEngineMsgStruct)msg seqId:(int)anId toArray:(id)array toUin:(long long)uin;
-(void)parseMsgInfoOfNormal:(MsgInfo*)normal toArray:(id)array;
-(void)parseMsgInfoOfVideo:(MsgInfo*)video msg:(CIMEngineMsgStruct)msg seqId:(int)anId toArray:(id)array;
-(void)parseSharpVideoMsg:(MsgInfo*)msg msg:(CIMEngineMsgStruct)msg2 seqId:(int)anId toArray:(id)array;
-(void)parseMsgInfoOfAddFriend:(MsgInfo*)addFriend toArray:(id)array;
-(void)getFriendListDelay;
-(void)parseMsgInfoOfGroupInvite:(MsgInfo*)groupInvite toArray:(id)array;
-(void)parseMsgInfoOfGroupReject:(MsgInfo*)groupReject toArray:(id)array;
-(void)parseMsgInfoOfGroupAccept:(MsgInfo*)groupAccept toArray:(id)array;
-(void)parseMsgInfoOfJoinGroupRequest:(MsgInfo*)joinGroupRequest toArray:(id)array;
-(void)parseMsgInfoOfOnlineImg:(MsgInfo*)onlineImg toArray:(id)array toUin:(unsigned)uin;
-(BOOL)QQCheckRobertMsg:(AccostMsg*)msg;
-(id)getTextMsgArrayFromWupData:(AccostMsg*)wupData msgItem:(MsgItem*)item fromUIN:(long long)uin;
-(void)LoginSuccess:(id)success;
-(void)ResponsePushNotify:(long long)notify cReplyCode:(BOOL)code;
-(int)RequestMsgRegister:(long long)aRegister parameters:(id)parameters time:(int)time syncCookie:(id)cookie;
-(void)requestDelGroupMsg:(long long)msg groupUin:(long long)uin msgSeq:(int)seq;
-(void)RequestBatchGetGroupFilter:(id)filter;
-(void)RequestBatchSetGroupFilter:(id)filter;
-(int)sendOfflineMessage:(id)message;
-(int)SendGroupTmpMsg:(long long)msg toUin:(long long)uin msg:(id)msg3 groupCode:(long long)code groupUin:(long long)uin5 msgTime:(int)time timeStamp:(int)stamp strMsg:(id)msg8 msgID:(int)anId pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq;
-(int)SendGroupTmpImage:(long long)image toUin:(long long)uin msg:(id)msg groupCode:(long long)code groupUin:(long long)uin5 msgTime:(int)time timeStamp:(int)stamp strMsg:(id)msg8 msgID:(int)anId pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq;
-(int)SendShareMsgToGroup:(long long)group msg:(id)msg groupCode:(long long)code groupUin:(long long)uin msgTime:(int)time appShareID:(unsigned)anId bodyType:(int)type msgType:(int)type8 strMsg:(id)msg9 msgID:(int)anId10;
-(int)SendGroupMsg:(long long)msg msg:(id)msg2 groupCode:(long long)code groupUin:(long long)uin msgTime:(int)time msgType:(int)type duration:(unsigned short)duration timeStamp:(int)stamp bodyType:(int)type9 isDiscuss:(BOOL)discuss appShareID:(unsigned)anId strMsg:(id)msg12 pData:(id)data;
-(int)SendGroupMarketMsg:(long long)msg groupCode:(long long)code groupUin:(long long)uin itemType:(unsigned long)type faceInfo:(BOOL)info bufID:(const char*)anId tabID:(unsigned long)anId7 subType:(BOOL)type8 bufKey:(const char*)key text:(const char*)text msgTime:(int)time msgType:(int)type12 duration:(unsigned short)duration timeStamp:(int)stamp bodyType:(int)type15 isDiscuss:(BOOL)discuss appShareID:(unsigned)anId17 strMsg:(id)msg18 pData:(id)data;
-(int)RequestGroupMsg:(long long)msg groupCode:(long long)code beginSeq:(long long)seq endSeq:(long long)seq4 recvPic:(BOOL)pic roam:(BOOL)roam target:(id)target;
-(void)RequestBatchGetGroupOfflineMsgNum:(long long)num groupCode:(id)code;
-(int)RequestGroupMsgCount:(long long)count groupCodes:(id)codes;
-(void)SetGroupFilter:(long long)filter option:(BOOL)option;
-(void)RequestSetGroupFilter:(long long)filter;
-(void)sendAck:(long long)ack;
-(int)reportMsgReadState:(long long)state lastReadTime:(long long)time;
-(int)requestOfflineAccostMsg;
-(int)RequestOfflineMsg:(int)msg syncFlag:(id)flag;
-(int)SendShareMsgToC2C:(long long)c2C msgContent:(id)content msgTime:(int)time appShareID:(int)anId bodyType:(int)type msgType:(int)type6 strMsg:(id)msg pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq;
-(int)SendWPAMsg:(long long)msg msg:(const char*)msg2 time:(int)time sendType:(int)type msgLen:(int)len msgType:(int)type6 msgID:(int)anId strMsg:(id)msg8;
-(void)SaveWPAMsgSigAndServiceType:(id)type SigBuf:(id)buf ServiceType:(id)type3 DIC:(id)dic;
-(void)DeleteWPASig:(long long)sig;
-(id)GetWPASigPath;
-(BOOL)FindUinInWPAArray:(long long)wpaarray;
-(void)GetWPAMessageDigByUin:(long long)uin sig:(id)sig service:(int*)service;
-(int)SendSecretFileMsg:(id)msg key:(id)key time:(int)time sendType:(int)type bodyType:(int)type5 msgType:(int)type6 msgID:(int)anId limittime:(int)limittime encryptKey:(int)key9 preheadLength:(int)length msgSeq:(unsigned short)seq msgRandom:(unsigned)random;
-(void)startDownloadImage:(id)image fromUin:(unsigned long long)uin toUin:(unsigned long long)uin3;
-(int)SendSecretFileStatusMsg:(id)msg toUin:(id)uin key:(id)key time:(int)time msgID:(int)anId secretstatus:(int)secretstatus captureTime:(int)time7;
-(int)SendOfflineMsg:(long long)msg msg:(const char*)msg2 time:(int)time sendType:(int)type msgLen:(int)len bodyType:(int)type6 msgType:(int)type7 msgID:(int)anId strMsg:(id)msg9 pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq;
-(void)SayHello;
-(void)requestRemoveSingleC2CRoamMessage:(id)message;
-(void)RequestDelRoamMsgByDay:(long long)day :(long)arg2;
-(void)RequestDelRoamMsg:(long long)msg;
-(int)requestGetRoamMsg:(long long)msg lastTime:(long long)time random:(long long)random cnt:(short)cnt;
-(int)requestRoamMessageInOneDay:(long long)oneDay lastTime:(int)time random:(long long)random count:(short)count target:(id)target;
-(int)RequestGetRoamMsgByNumber:(long long)number :(long long)arg2 :(long long)arg3 :(short)arg4;
-(int)RequestGetRoamMsgByTime:(long long)time :(int)arg2 :(int)arg3;
-(void)RequestSetRoamMsgByVector:(id)vector;
-(void)RequestSetRoamMsg:(BOOL)msg;
-(int)RequestOffLine;
-(int)RequestOnLine:(int)line;
-(void)SendMsg:(long long)msg :(char*)arg2;
-(void)appendSendingFailedMsg:(id)msg errorCode:(int)code errorMsg:(id)msg3;
-(void)onMsgSendingResult:(id)result;
-(void)onAccountLogout:(id)logout;
-(void)changeAccount;
-(BOOL)handleRecivedPacket:(char*)packet bufferLength:(int)length sendingModel:(id)model;
-(void)notifyMsgSentResult:(id)result result:(int)result2;
-(void)doInit;
-(id)init;
-(void)dealloc;
-(void)handleServerMsg:(XXStruct_VJymoD*)msg;
-(int)requestPullGroupMessage:(long long)message startSeq:(long long)seq endSeq:(long long)seq3;
-(int)requestPullGroupSeq:(id)seq lastSeqs:(id)seqs;
-(int)requestGroupMessageReadConfirm:(unsigned)confirm readSeq:(unsigned)seq;
-(void)processResponsePullGroupMsg:(CIMEngineMsgStruct)msg;
-(void)processResponsePullGroupMsgSeq:(CIMEngineMsgStruct)seq;
-(void)processResponseGroupMsgReadConfirm:(CIMEngineMsgStruct)confirm;
-(void)processGroupMessagePacket:(CIMEngineMsgStruct)packet;
-(int)registerFunctionWithTarget:(id)target selector:(SEL)selector key:(id)key arg:(id)arg;
-(BOOL)filterGroupOfflineTextMessage:(stGroupMsgRecord)message withContent:(id)content;
-(BOOL)isDuplicatedGroupMsg:(stGroupMsgRecord)msg msgModel:(id)model;
-(id)handlePullGroupMsgSeq:(CIMEngineMsgStruct*)seq;
-(id)handleGroupMessagePacketRegister:(CIMEngineMsgStruct*)aRegister;
-(id)handleGroupMessagePacket:(void*)packet memberSeq:(long long)seq;
@end

@interface QQChatListManager : NSObject <IMessageListService, IQSContactsEngineObserver, IQFriRecommendEngineObserver> {
	NSString* _uin;
	NSMutableDictionary* _MsgDict;
	NSMutableDictionary* _unreadCountDict;
	NSMutableDictionary* _removedGroups;
	NSMutableArray* _sortedMessageList;
	BOOL _shouldSyncRedDot;
	BOOL _needReload;
	BOOL _inintializedFromFile;
@private
	BOOL _uptMsgBarDisabled;
}
@property(assign, nonatomic) BOOL needReload;
@property(assign, nonatomic) BOOL uptMsgBarDisabled;
@property(retain, nonatomic) NSMutableArray* sortedMessageList;
@property(retain, nonatomic) NSString* uin;
@property(readonly, assign, nonatomic) NSMutableDictionary* unreadCountDict;
@property(retain, nonatomic) NSMutableDictionary* MsgDict;
+(void)destroyInstance;
+(id)GetInstance;
-(void)reloadMessageList;
-(void)onGroupAssistantSettingChanged:(id)changed;
-(void)markClusterMessageAsHandled:(id)handled;
-(void)refreshUnreadCount:(id)count type:(int)type withValue:(int)value;
-(void)clearUnreadCount:(id)count type:(int)type;
-(void)clearUnReadCount:(id)count;
-(int)getUnreadMessageCount:(id)count type:(int)type;
-(int)getUnreadMessageCount:(int)count;
-(int)getUnreadMessageCount;
-(int)getUnreadMessageUinCount;
-(void)removeMsgBarItem:(id)item;
-(void)saveUnReadMsg;
-(void)notifyUpdateRecommendedContacts:(id)contacts;
-(void)reloadSayHelloMessage;
-(void)filterPubAccountMessage;
-(id)getAccostMessageList;
-(BOOL)haveMsg:(id)msg type:(int)type;
-(BOOL)haveUnReadMsg:(id)msg type:(int)type;
-(BOOL)haveUnReadMsg;
-(id)filterChatListWithUinAtArray:(id)array;
-(void)clearMessageList;
-(void)clearAllMessageInfinitly;
-(void)deleteAllAccostMessage;
-(void)deleteMessage:(id)message;
-(void)deleteMessage:(id)message type:(int)type;
-(void)showTabUnreadTagView;
-(void)saveRecentHistoryUnreadCountRightAway;
-(void)saveRecentHistoryUnreadCount;
-(BOOL)saveMessageList;
-(void)RefreshRichMessageSendState:(id)state Result:(id)result GroupCode:(id)code Stage:(int)stage isGroup:(id)group;
-(void)refreshMessageState:(id)state;
-(void)updateQQNMsgShowBar;
-(void)updateChatlist;
-(void)updateAllMessageTime;
-(id)GetMessageModel:(id)model type:(int)type;
-(id)GetMessageModel:(id)model;
-(id)getMessageKey:(id)key;
-(id)getMessageList;
-(void)changeAccount:(id)account;
-(void)addMessage:(id)message;
-(void)ActionGetQQMessage:(id)message;
-(void)recordWithQQPushMsgMonitor:(id)qqpushMsgMonitor;
-(void)checkMaxMessageListSize;
-(id)filterHideMessage:(id)message;
-(void)deleteMessageWithKey:(id)key;
-(void)markGroupMessageRecoved:(id)recoved;
-(void)markGroupMessageRemovedWithKey:(id)key;
-(void)markGroupMessageRemoved:(id)removed;
-(void)initRemovedGroupListFromFile;
-(id)getRemovedGroupListFileName;
-(id)getMessageKey:(id)key type:(int)type;
-(void)loadMessageListFromFile;
-(void)dealloc;
-(id)init;
-(id)createPubAccountMessageWith:(id)with causedBy:(int)by;
-(id)createDiscussMessageWith:(id)with causedBy:(int)by isNew:(BOOL)aNew;
-(id)createTroopAssistantMessageWith:(id)with causedBy:(int)by;
-(id)createTroopMessageWith:(id)with causedBy:(int)by isNew:(BOOL)aNew;
-(id)createMGroupMessageWith:(id)with causedBy:(int)by;
-(id)createTmpTroopMessageWith:(id)with causedBy:(int)by;
-(id)createRobertMessageWith:(id)with causedBy:(int)by;
-(id)createVerifyMessageWith:(id)with causedBy:(int)by isNew:(BOOL)aNew;
-(id)createSayHelloMessageWith:(id)with causedBy:(int)by isNew:(BOOL)aNew;
-(id)createC2CMessageWith:(id)with causedBy:(int)by;
-(id)createRecentMessageModelWith:(id)with causedBy:(int)by isNew:(BOOL)aNew;
-(int)parseMessageType:(id)type;
@end

@interface QQMsgBaseEngine : NSObject {
	NSMutableDictionary* dict;
}
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(void)removeTarget:(id)target;
-(void)cleanAllFunction;
-(void)addArgument:(id)argument forKey:(id)key;
-(BOOL)invokeFunctionForKey:(id)key :(void*)arg2;
-(BOOL)invokeFunctionForKey:(id)key;
-(void)removeFunctionWithkey:(id)withkey;
-(void)hidden;
-(void)registerFunctionWithTarget:(id)target selector:(SEL)selector key:(id)key;
-(id)init;
@end

@interface FlistSvrEngine : NSObject <CIMFriendsSvrEngineDelegate, DBAsyncCallbackProtocol> {
	id respondEngine;
	int getFriendCounts;
	int totalFriendCounts;
	int getMsfFriendCounts;
	int totalMsfFriendCounts;
	int getAll;
	int _reqFriListSeq;
	int _cHasOtherRespFlag;
}
@property(retain, nonatomic) id respondEngine;
+(void)exitInstance;
+(id)GetInstance;
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
-(void)RequestAddGroup:(BOOL)group groupName:(id)name;
-(void)RequestDelGroup:(BOOL)group;
-(void)RequestRenameGroup:(BOOL)group newGroupName:(id)name;
-(void)moveGroupMem:(long long)mem newGroupId:(BOOL)anId;
-(void)reSortGroupBuf:(BOOL)buf groupId:(id)anId sortId:(id)anId3;
-(void)delGroup:(BOOL)group;
-(void)renameGroup:(BOOL)group newGroupName:(id)name;
-(void)addGroup:(BOOL)group groupName:(id)name;
-(void)RequestAutoInfo:(long long)info;
-(void)RequestMoveGroupMem2:(id)a2 groupId:(id)anId;
-(void)RequestMoveGroupMem:(long long)mem newGroupId:(BOOL)anId;
-(void)RequestReSortGroupBuf:(BOOL)buf groupId:(id)anId sortId:(id)anId3;
-(void)saveTroopReMarkThread:(id)thread;
-(void)saveTroopMemThread:(id)thread;
-(void)dealloc;
-(void)CIMFriendsSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(BOOL)paserBuddyPack:(char*)pack length:(int)length seq:(int)seq;
-(void)RequestGetTroopAppointRemark:(long long)remark groupCode:(long long)code groupUin:(long long)uin vecUinList:(id)list;
-(int)RequestGetTroopRemark:(long long)remark groupCode:(long long)code groupUin:(long long)uin seq:(long long)seq NextUin:(long long)uin5;
-(void)RequestGetTroopInfo:(long long)info groupCode:(long long)code groupUin:(long long)uin;
-(int)RequestGetTroopMemberStatus:(long long)status groupCode:(long long)code fromUin:(long long)uin groupUin:(long long)uin4;
-(int)RequestGetTroopMemberList:(long long)list groupCode:(long long)code fromUin:(long long)uin groupUin:(long long)uin4;
-(int)RequestGetTroopListV2:(long long)a2 filterFlag:(BOOL)flag cookie:(id)cookie;
-(int)RequestGetTroopLis:(long long)lis;
-(void)RequestModifyGroupCard:(unsigned)card uin:(long long)uin groupNick:(id)nick gender:(BOOL)gender phone:(id)phone mail:(id)mail remark:(id)remark;
-(void)RequestModifyGroupInfo:(unsigned)info groupName:(id)name groupPost:(id)post groupMemo:(id)memo groudAdmissionType:(int)type groupCategory:(int)category groupFaceId:(int)anId;
-(int)RequestGroupInfo:(unsigned)info;
-(int)RequestCheckFriend:(long long)aFriend checkUin:(long long)uin;
-(int)AnswerAddedFriend:(long long)aFriend addUin:(long long)uin myAllowFlag:(int)flag myfriendgroupid:(unsigned char)myfriendgroupid refuseReason:(id)reason;
-(int)RequestDeleteFriend:(long long)aFriend fuin:(long long)fuin;
-(void)RequestAddFriend:(id)aFriend fuin:(id)fuin groudId:(int)anId;
-(void)RequestAddFriend:(long long)aFriend addUin:(long long)uin groudId:(int)anId message:(id)message addUinSetting:(int)setting myAllowFlag:(int)flag srcFlag:(bool)flag7 autoAdd:(bool)add sig:(id)sig sourceID:(int)anId10 sourceSubID:(int)anId11 phoneCode:(id)code;
-(void)RequestUserAddFriendSetting:(id)setting params:(id)params;
-(int)RequestSimpleOnlineFriendInfo;
-(int)RequestGroupList;
-(int)RequestGetLastLoginInfo:(int)info currentIndex:(int)index currentUIN:(long long)uin;
-(void)RequestBuddyList:(int)list;
-(int)RequestMGroupAbilityBuddyList;
-(void)RequestBuddyListFrom:(int)from count:(int)count all:(int)all Refresh:(int)refresh;
-(id)init;
@end

@interface QQTroopMemModel : QQModel {
	int _FaceId;
	int _Age;
	int _Status;
	int _Gender;
	long long _GroupUin;
	long long _GroupCode;
	long long _MemUin;
	NSString* _Nick;
	NSString* _Mark;
	NSString* _strReMark;
	int _MemberState;
	NSString* _showName;
	NSString* _nameSortKey;
	NSString* _pinyinOfName;
}
@property(retain, nonatomic) NSString* pinyinOfName;
@property(retain, nonatomic) NSString* nameSortKey;
@property(retain, nonatomic) NSString* showName;
@property(assign, nonatomic) int MemberState;
@property(copy, nonatomic) NSString* strReMark;
@property(copy, nonatomic) NSString* Mark;
@property(assign, nonatomic) long long MemUin;
@property(assign, nonatomic) long long GroupCode;
@property(assign, nonatomic) long long GroupUin;
@property(assign, nonatomic) int Gender;
@property(assign, nonatomic) int Status;
@property(assign, nonatomic) int Age;
@property(assign, nonatomic) int FaceId;
@property(copy, nonatomic) NSString* Nick;
-(int)compareByStatusDesc:(id)desc;
-(id)description;
-(id)getReMark;
-(void)dealloc;
-(id)init:(id)init :(int)arg2 :(int)arg3 :(int)arg4 :(int)arg5 :(long long)arg6 :(long long)arg7 :(long long)arg8;
-(id)init;
@end

@interface QQTroopModel : NSObject {
	NSString* _groupName;
	NSString* _groupCode;
	NSString* _groupUin;
	NSString* _lastSeq;
	int _groupType;
	int _groupFlag;
	int _groupFace;
	int _infoSeq;
	NSString* _groupMemo;
	long long _groupMaxSeq;
	BOOL _shouldSave;
}
@property(assign, nonatomic) BOOL shouldSave;
@property(assign, nonatomic) long long groupMaxSeq;
@property(retain, nonatomic) NSString* groupMemo;
@property(assign, nonatomic) int infoSeq;
@property(assign, nonatomic) int groupFace;
@property(assign, nonatomic) int groupFlag;
@property(assign, nonatomic) int groupType;
@property(retain, nonatomic) NSString* lastSeq;
@property(retain, nonatomic) NSString* groupUin;
@property(retain, nonatomic) NSString* groupCode;
@property(retain, nonatomic) NSString* groupName;
-(id)description;
-(void)dealloc;
@end

@interface QQGroupFilterInfo : NSObject {
	long long _lGroupCode;
	BOOL _cOp;
}
@property(assign, nonatomic) BOOL cOp;
@property(assign, nonatomic) long long lGroupCode;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface QQTroopRemarkModel : NSObject {
	long long _GroupCode;
	long long _GroupUin;
	long long _MemUin;
	NSString* _strNick;
	NSString* _strRemark;
	int _gender;
	NSString* _phoneNumber;
	NSString* _email;
	NSString* _memo;
	NSString* _autoRemark;
}
@property(retain, nonatomic) NSString* autoRemark;
@property(retain, nonatomic) NSString* memo;
@property(retain, nonatomic) NSString* email;
@property(retain, nonatomic) NSString* phoneNumber;
@property(assign, nonatomic) int gender;
@property(copy, nonatomic) NSString* strRemark;
@property(copy, nonatomic) NSString* strNick;
@property(assign, nonatomic) long long MemUin;
@property(assign, nonatomic) long long GroupUin;
@property(assign, nonatomic) long long GroupCode;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface SimpleInfoDB : UserHeadInfoDB {
}
-(id)initWithStorePath:(id)storePath;
@end

@interface QQFriendListManager : QQBaseEngine {
	NSMutableDictionary* _groupCache;
	NSMutableDictionary* _modelCache;
	NSMutableDictionary* _strangerList;
	NSMutableDictionary* _blackList;
	SimpleInfoDB* _strangerModel;
	NSMutableSet* _quinList;
	long long _nextBlackMid;
	NSString* _fuin;
	BOOL onGenerationUinCache;
	NSMutableDictionary* _group;
	NSMutableDictionary* _model;
	NSMutableDictionary* _msfgroup;
	NSMutableDictionary* _msfmodel;
	NSMutableArray* _fGroupList;
	NSMutableArray* _fModelList;
	NSMutableDictionary* _groupFriendList;
	NSMutableDictionary* _statusDic;
	NSMutableDictionary* _offlinePromptArray;
	NSTimer* _updateFStatus;
	QQLastLoginReqPageInfoModel* _reqInfoModel;
	BOOL _isSaveGroupFriendList;
	BOOL _isSaveStrangerList;
	BOOL _isSaveBlackList;
	BOOL _isSaveStrangerModel;
	BOOL _isReadyToSortAll;
	double _lastUpdateOnlineStatus;
	unsigned long long _lastUpdateUIN;
	BOOL _lockCacheUpdate;
	BOOL _isPCIconShown;
	BOOL _isIncrementUpdate;
}
@property(assign, nonatomic) BOOL isPCIconShown;
@property(retain, nonatomic) NSMutableDictionary* offlinePromptArray;
@property(assign, nonatomic) BOOL lockCacheUpdate;
@property(assign, nonatomic) unsigned long long lastUpdateUIN;
@property(assign, nonatomic) double lastUpdateOnlineStatus;
@property(retain, nonatomic) QQLastLoginReqPageInfoModel* reqInfoModel;
@property(retain, nonatomic) NSMutableDictionary* groupFriendList;
@property(retain, nonatomic) NSString* fuin;
@property(retain, nonatomic) SimpleInfoDB* strangerModel;
@property(retain, nonatomic) NSMutableDictionary* blackList;
@property(retain, nonatomic) NSMutableDictionary* strangerList;
@property(retain, nonatomic) NSMutableDictionary* modelCache;
@property(retain, nonatomic) NSMutableDictionary* groupCache;
+(id)createProfileViewControllerByUin:(id)uin defaultStrangerType:(int)type;
+(id)GetInstance;
-(void)updateFriendRemarkSetting:(id)setting withMobilePhoneStr:(id)mobilePhoneStr;
-(void)delayRefreshContactsList;
-(void)delayRefreshFriendList;
-(void)updateFriendRequested:(id)requested;
-(id)getRecentArray;
-(int)getQQFriendHeadIdByUin:(long long)uin;
-(id)getQQFriendNickByUin:(long long)uin;
-(void)updatePushFStatus;
-(void)updateContactsTempUINWithUIN:(long long)uin;
-(void)updateQQMessagefromUIN:(long long)uin toUIN:(long long)uin2;
-(void)actionLastLoginInfoCallback:(id)callback;
-(void)actionOnRefreshFriendListSucessCallback:(id)callback;
-(void)actionFriendRequestConfirm:(id)confirm;
-(void)actionPushFStatus:(id)status;
-(void)actionGetBlackList:(id)list;
-(id)getStrangerModelForUin:(id)uin;
-(id)strangerModelForUin:(id)uin;
-(void)simpleInfoRequest:(id)request;
-(void)requestUserInfoForUin:(id)uin;
-(void)requestUserInfoTimeout:(id)timeout;
-(void)actionGetUserInfo:(id)info;
-(void)updateStrangerModelForUin:(id)uin nickname:(id)nickname actionType:(BOOL)type actionUrl:(id)url;
-(id)nickForStrangerWithUin:(id)uin;
-(BOOL)isUinAtBlackList:(id)blackList;
-(BOOL)isUinAtStrangers:(id)strangers;
-(BOOL)isUinAtFriendList:(id)friendList;
-(void)deleteUinFromBlackList:(id)blackList;
-(void)deleteUinFromStrangers:(id)strangers;
-(void)updateFriendModelToBlackList:(id)blackList;
-(void)updateFriendModelToStrangers:(id)strangers;
-(void)addStrangerModel:(id)model;
-(void)addUinToBlackList:(id)blackList;
-(void)addUinToStrangers:(id)strangers;
-(id)getBlackList;
-(id)getStrangerList;
-(id)getBlackListGroupModel;
-(id)getStrangerGroupModel;
-(id)fliterLikeWord:(id)word;
-(void)WriteSigToDB;
-(void)QQFriendModelWriteSigToDB;
-(void)WriteModelToDB;
-(void)QQFriendModelWriteModelToDB;
-(void)deleteQQFriendModelByUin:(id)uin;
-(void)updateQQFriendModelHeadByUin:(id)uin :(int)arg2;
-(void)updateQQFriendModelNameByUin:(id)uin :(id)arg2;
-(BOOL)updateQQFriendModelSigByUin:(id)uin :(id)arg2;
-(id)getQQFriendModelByUin:(id)uin Cache:(BOOL)cache;
-(id)sigForUin:(id)uin;
-(id)GetOnLineFriendWithGroupId:(int)groupId;
-(id)GetFriendWithGroupId:(int)groupId;
-(int)GetFriendCountWithGroupId:(int)groupId;
-(void)insertMsfFriendCache:(id)cache GroupId:(id)anId;
-(void)insertMsfGroupCache:(id)cache;
-(void)replaceMsfFriendList;
-(void)clearMsfAllCacheObjects;
-(void)updateMsfFriendModelHeadByUin:(id)uin :(int)arg2;
-(void)updateMsfFriendModelNameByUin:(id)uin :(id)arg2;
-(BOOL)updateMsfFriendModelSigByUin:(id)uin :(id)arg2;
-(BOOL)updateFriendLocationAbility:(id)ability locationAbility:(int)ability2;
-(BOOL)updateMsfFriendlocationAbility:(id)ability locationAbility:(int)ability2;
-(void)updateMsfFriendVideoStatus:(id)status VideoStatus:(int)status2;
-(void)clearMsfLocationAbilityStatus;
-(void)updateFriendVideoStatus:(id)status VideoStatus:(int)status2;
-(void)updateFriendStatus:(id)status group:(id)group status:(int)status3;
-(void)updateGroup:(id)group;
-(void)sortAllRightNow;
-(id)getOfflineListFromArray:(id)array;
-(id)getOnlineListFromArray:(id)array;
-(void)sortAll;
-(BOOL)haveVoiceAbility:(id)ability;
-(void)replaceFriendList;
-(void)resortGroupModel:(id)model;
-(void)renameGroupModel:(int)model newName:(id)name;
-(void)deleteGroupModel:(int)model;
-(void)insertFriendCache:(id)cache :(id)arg2;
-(void)insertGroupCache:(id)cache;
-(void)updateFriendModelVipInfo:(id)info vipType:(int)type isOpen:(BOOL)open;
-(void)clearAllCacheObjects;
-(void)moveFriend:(id)aFriend toGroup:(int)group;
-(void)insertFriend:(id)aFriend :(id)arg2;
-(void)insertGroup:(id)group;
-(void)clearLocationAbilityStatus;
-(void)clearAllStatus;
-(void)clearAllObjects;
-(void)changeAccount:(id)account;
-(id)getGroupWithUIN:(id)uin;
-(id)getOnlineFriendListByGroupIndex:(int)index;
-(id)getFriendListByGroupIndex:(int)index;
-(int)getGroupListCount;
-(id)getGroupList;
-(id)getGroupModelByGroupID:(int)anId;
-(id)generateOfflinePromptList;
-(void)generateFriendListData;
-(void)generateModelCache;
-(id)init;
-(void)initStrangerModel;
-(void)initBlackList;
-(void)initStrangerList;
-(void)dealloc;
-(void)saveDelaySavedData;
-(void)saveAllData;
-(void)delaySaveGroupCode;
-(void)saveGroupCode;
-(void)saveBlackList;
-(void)delaySaveBlackList;
-(void)saveStrangerList;
-(void)delaySaveStrangerList;
-(void)save;
-(id)getStrangerModelPathIfNeeded;
-(id)getBlackListPathIfNeeded;
-(id)getStrangerListPathIfNeeded;
-(id)createlistIfNeeded;
-(id)GroupArray;
-(void)clearAllVideoSupport;
-(id)getFriendsByUins:(id)uins;
-(id)allFriendModels;
-(id)allVoiceFriends;
-(id)allVideoFriends;
-(id)allFriends;
-(void)deleteUinFromGroupList:(id)groupList;
-(void)updateGroupFriendModelForUin:(id)uin withNickname:(id)nickname head:(int)head groupUIN:(long long)uin4;
-(id)groupFriendModelForUin:(id)uin;
-(BOOL)isUinAtGroupFriendList:(id)groupFriendList;
-(BOOL)isUinGroupAtGroupFriendList:(id)groupFriendList GroupUIN:(long long)uin;
-(void)addUinToGroupFriendList:(id)groupFriendList GroupUIN:(long long)uin GroupCode:(id)code;
-(void)saveGroupFriendList;
-(void)delaySaveGroupFriendList;
-(id)getGroupFriendModelPathIfNeeded;
-(void)initGroupFriendList;
@end

@interface timeRecord : NSObject {
	double _startTime;
	double _endTime;
	bool _isSending;
}
@property(assign, nonatomic) bool isSending;
@property(assign, nonatomic) double endTime;
@property(assign, nonatomic) double startTime;
-(id)init;
@end

@interface ConsumeTimeStatisticsReportEngine : NSObject {
	NSMutableDictionary* _recodeTimeMutDic;
	NSMutableData* _recvData;
	bool _isOpenReportFlag;
}
@property(assign, nonatomic) bool isOpenReportFlag;
+(id)getInstance;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)revertSendingRecord;
-(void)removeSendingRecord;
-(void)reportConsumeTime;
-(id)generateReportString;
-(void)endRecordTime:(id)time;
-(void)startRecordTime:(id)time;
-(void)dealloc;
-(id)init;
@end

@interface UniLogUploadEngine : NSObject {
	NSTimer* _logUploadTimer;
	int _maxLogInfoSize;
	int _maxLogUploadInterval;
	BOOL _logUploadFlag;
	NSMutableDictionary* _logDic;
	NSTimer* _logSaveTimer;
	NSTimer* _dailyLogTimer;
	NSDictionary* _shareParamDic;
}
@property(retain, nonatomic) NSDictionary* shareParamDic;
@property(retain, nonatomic) NSMutableDictionary* logDic;
+(id)GetInstance;
-(BOOL)AppendGameLogWithOpName:(id)opName extraData:(id)data;
-(BOOL)AppendSendMsgBehaviorLogWithChatType:(id)chatType fromUIN:(id)uin toUIN:(id)uin3 msgType:(id)type entry1:(id)a1 entry2:(id)a2 size:(id)size status:(id)status termial:(id)termial firstMsg:(int)msg;
-(BOOL)AppendMarketFaceEnterLogWithFromUIN:(id)uin toUIN:(id)uin2 operType:(id)type OperName:(id)name operEnterSource:(int)source operCount:(int)count operResult:(int)result;
-(BOOL)AppendTencentBizagentLog:(id)log toUIN:(id)uin operType:(id)type OperName:(id)name log:(id)log5 logKey:(id)key;
-(BOOL)AppendAppPushTestLog:(id)log;
-(BOOL)AppendBigFlowLogWithDic:(id)dic;
-(BOOL)CacaAppendUserOperationLogWithOperName:(id)operName fromUIN:(id)uin toUIN:(id)uin3;
-(BOOL)AppendUserOperationLogWithOperName:(id)operName fromUIN:(id)uin toUIN:(id)uin3;
-(void)AppendShareRecordLog:(id)log logKey:(id)key;
-(BOOL)AppendVideoMsgRecordLog:(id)log;
-(BOOL)AppendAppCallShareLog:(BOOL)log;
-(BOOL)AppendPlugLogWithServerName:(id)serverName actionName:(id)name srcType:(id)type version:(id)version source:(id)source channelID:(id)anId customField:(id)field extField:(id)field8;
-(BOOL)AppendQQTipsLogWithTaskID:(id)taskID;
-(BOOL)AppendPlatformSaleLogWithLogKey:(id)logKey busiType:(id)type msgType:(id)type3 contentKey:(id)key clickPosition:(id)position;
-(BOOL)AppendAppCallLogWithAppName:(id)appName;
-(BOOL)AppendClickAdPushbanner:(long)pushbanner;
-(BOOL)reportOperEvent:(id)event operName:(id)name;
-(BOOL)AppendRefreshMsgTab;
-(BOOL)recentTableWateCamera;
-(BOOL)recentTableDataWrite;
-(BOOL)recentTableScan;
-(BOOL)recentTableMutiDiscuss;
-(BOOL)magicButtonClicked;
-(BOOL)DiscussC2CPlus;
-(BOOL)DiscussClickLink;
-(BOOL)DiscussShareLinkMan;
-(BOOL)DiscussCopyLink;
-(BOOL)DiscussShareDiscuss;
-(BOOL)AppendNomalClickLogWithOperType:(id)operType operName:(id)name;
-(BOOL)AppendCustomSetLogWithOperName:(id)operName;
-(BOOL)AppendOnOffLogWithOperName:(id)operName operValue:(id)value;
-(BOOL)AppendPubAccontLogWithSubKey:(id)subKey opType:(id)type opName:(id)name targetUin:(id)uin;
-(BOOL)AppendOperationLogWithOperType:(id)operType operTarge:(id)targe operSrc:(id)src withLogKey:(id)logKey;
-(BOOL)AppendLog:(id)log withKey:(id)key;
-(BOOL)checkLogInfoSize:(id)size;
-(void)actionUploadLog;
-(void)actionUpdateLogUploadConfig;
-(void)doUploadLog;
-(void)saveUniLog;
-(void)doSaveUniLog;
-(id)getLogFlagWithKey:(id)key;
-(void)packLogArray:(id)array toMap:(map<std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>>> >*)map withKey:(id)key;
-(BOOL)isLogFlagOpen:(id)open;
-(void)updateLogUploadConfig;
-(void)resetLogUploadTimer;
-(void)actionCheckDailyLog;
-(void)dealloc;
-(id)init;
@end

@interface DayWeatherModel : QQModel {
	int highTemp;
	int lowTemp;
	NSString* bWeather;
	NSString* eWeather;
	NSString* bWind;
	NSString* eWind;
	int WeatherId;
}
@property(assign, nonatomic) int WeatherId;
@property(retain, nonatomic) NSString* eWind;
@property(retain, nonatomic) NSString* bWind;
@property(retain, nonatomic) NSString* eWeather;
@property(retain, nonatomic) NSString* bWeather;
@property(assign, nonatomic) int lowTemp;
@property(assign, nonatomic) int highTemp;
-(void)dealloc;
-(id)description;
@end

@interface ThreeDayWeatherModel : QQModel {
	DayWeatherModel* today;
	DayWeatherModel* tomorrow;
	DayWeatherModel* aftertom;
	int currtmpe;
	NSString* year;
	NSString* day;
	NSString* festa;
	NSString* currtime;
}
@property(retain, nonatomic) NSString* currtime;
@property(retain, nonatomic) NSString* festa;
@property(retain, nonatomic) NSString* day;
@property(retain, nonatomic) NSString* year;
@property(assign, nonatomic) int currtmpe;
@property(retain, nonatomic) DayWeatherModel* aftertom;
@property(retain, nonatomic) DayWeatherModel* tomorrow;
@property(retain, nonatomic) DayWeatherModel* today;
-(void)dealloc;
-(id)description;
@end

@interface WeatherInfoResModel : QQModel {
	BOOL result;
	NSString* city;
	ThreeDayWeatherModel* weatherInfoModel;
	BOOL citytype;
	NSString* province;
}
@property(retain, nonatomic) NSString* province;
@property(assign, nonatomic) BOOL citytype;
@property(retain, nonatomic) ThreeDayWeatherModel* weatherInfoModel;
@property(retain, nonatomic) NSString* city;
@property(assign, nonatomic) BOOL result;
-(void)dealloc;
-(id)description;
@end

@interface QZContact : NSObject {
@private
	unsigned _uin;
	int _headNo;
	NSString* _nickname;
	NSString* _pyOfNickname;
	int _groupId;
	int _status;
}
@property(assign, nonatomic) int status;
@property(assign, nonatomic) int groupId;
@property(retain, nonatomic) NSString* pyOfNickname;
@property(retain, nonatomic) NSString* nickname;
@property(assign, nonatomic) int headNo;
@property(assign, nonatomic) unsigned uin;
-(void)dealloc;
-(id)init;
@end

@interface QZContactGroup : NSObject {
@private
	int _groupId;
	NSString* _groupName;
	bool _isCollapsed;
	NSMutableArray* _contacts;
	int _onlineNum;
	int _friendNum;
}
@property(assign, nonatomic) int friendNum;
@property(assign, nonatomic) int onlineNum;
@property(readonly, assign, nonatomic) NSArray* contacts;
@property(assign, nonatomic) int groupId;
@property(assign, nonatomic) bool isCollapsed;
@property(retain, nonatomic) NSString* groupName;
-(void)dealloc;
-(void)removeAllContactData;
-(void)addContact:(id)contact;
-(void)setContacts:(id)contacts;
-(id)init;
@end

@interface CCVisitor : NSObject <NSCoding> {
	long long _uin;
	NSString* _name;
	int _visittime;
	NSString* _portrait;
	NSString* _lastmood;
	int _weight;
}
@property(assign) int weight;
@property(retain, nonatomic) NSString* lastmood;
@property(retain, nonatomic) NSString* portrait;
@property(assign) int visittime;
@property(retain, nonatomic) NSString* name;
@property(assign) long long uin;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(void)dealloc;
@end

@interface ObjectClass : NSObject {
	/*function-pointer*/ void* imp;
	SEL sel;
	id user;
	int seq;
}
@property(assign) int seq;
@property(assign, nonatomic) id user;
@property(assign, nonatomic) SEL sel;
@property(assign, nonatomic) /*function-pointer*/ void* imp;
-(void)dealloc;
-(void)invoke:(id)invoke;
-(void)invoke;
@end

@interface QZoneEngine : NSObject {
	NSString* uin;
	NSString* pwd;
	QZoneSvrEngine* qzoneProtrolEngine;
	NSMutableDictionary* dict;
}
@property(retain, nonatomic) QZoneSvrEngine* qzoneProtrolEngine;
@property(retain, nonatomic) NSString* pwd;
@property(retain, nonatomic) NSString* uin;
+(id)GetInstance;
-(void)registerFunctionWithTarget:(id)target selector:(SEL)selector key:(id)key arg:(id)arg;
-(void)registerFunctionWithTarget:(id)target selector:(SEL)selector key:(id)key arg:(id)arg seq:(int*)seq;
-(BOOL)invokeFunctionForKey:(id)key arg:(id)arg;
-(BOOL)invokeFunctionForKey:(id)key;
-(void)removeTarget:(id)target;
-(void)removeFunctionWithkey:(id)withkey;
-(BOOL)isHasFunctionWithKey:(id)key;
-(void)setQZoneAccout:(id)accout :(id)arg2;
-(void)dealloc;
-(id)init;
@end

@interface QZoneSvrEngine : NSObject <CIMQZoneSvrEngineDelegate> {
	QZonePacket* packet;
	QZoneUnPacket* unPacket;
	NSMutableDictionary* userInfoDic;
	int backSeq;
	int lastRequestTime_GetFriendFeed;
	int lastRequestTime_GetMyFeed;
	int lastRequestTime_GetMiniFeed;
}
+(id)GetInstance;
-(id)visitorWith:(Visitor*)with;
-(void)handleFeedBack:(XXStruct_a633_C*)back;
-(void)handleGetKnrsList:(XXStruct_sPpY5A*)list;
-(void)RecvQZoneData:(char*)data :(int)arg2 serviceCmd:(const char*)cmd seq:(int)seq;
-(void)SendFeedBack:(const char*)back text:(const char*)text fid:(const char*)fid yk:(unsigned)yk ip:(const char*)ip info:(const char*)info seq:(int*)seq;
-(void)GetKnrsList:(int)list pn:(int)pn seq:(int*)seq;
-(void)CIMQZoneSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)setUin:(long long)uin;
-(void)dealloc;
-(id)init;
@end

@interface ZipArchive : NSObject {
}
+(void)decodeDataFrom:(id)from To:(id)to;
+(id)gzipData:(id)data;
+(void)ZipSrcData:(id)data dest:(id)dest;
+(void)UnZipSrcData:(id)data dest:(id)dest;
@end

@interface DispatchObject : NSObject {
	CIPCSO* response;
	int clientId;
}
-(void)handleResponse;
-(void)dispatchToMainThread:(const CIPCSO*)mainThread clientId:(int)anId;
-(void)dealloc;
-(id)init;
@end

@interface MSFSendDataToBackendParamStruct : NSObject {
	NSString* _pUin;
	NSString* _pCmd;
	NSData* _pWup;
	int _iSeq;
	BOOL _bImmediately;
	int _iTimeOutInterval;
	BOOL _cAnswerFlag;
	BOOL _cResendNum;
	NSString* _pMsgLog;
}
@property(retain, nonatomic) NSString* pMsgLog;
@property(assign, nonatomic) BOOL cResendNum;
@property(assign, nonatomic) BOOL cAnswerFlag;
@property(assign, nonatomic) int iTimeOutInterval;
@property(assign, nonatomic) BOOL bImmediately;
@property(assign, nonatomic) int iSeq;
@property(retain, nonatomic) NSData* pWup;
@property(retain, nonatomic) NSString* pCmd;
@property(retain, nonatomic) NSString* pUin;
-(void)dealloc;
@end

@interface MSFSeqIdGenerator : NSObject {
	int _seqId;
	NSLock* _lock;
}
+(id)instance;
-(int)getNextSeqId;
-(int)preGetNextSeqId;
-(void)resetSeqId:(int)anId;
-(void)dealloc;
-(id)init;
@end

@interface MSFSendDataToBackendAdapter : NSObject {
}
+(id)instance;
-(void)SendDataToBackend:(id)backend;
@end

@interface AKNetworkReachability : NSObject {
@private
	SCNetworkReachabilityRef reachability_;
	XXStruct_4pnlqD context_;
	NSString* host_;
	id<AKNetworkReachabilityDelegate> _delegate;
}
@property(assign, nonatomic) id delegate;
@property(readonly, assign, nonatomic, getter=isReachable) BOOL reachable;
@property(copy, nonatomic) NSString* host;
+(int)networkStatusForFlags:(unsigned)flags;
+(int)networkStatus;
+(id)networkReachabilityWithHost:(id)host;
-(id)description;
-(void)dealloc;
-(int)carrierType;
-(int)currentReachabilityStatus;
-(id)initWithHost:(id)host;
@end

@interface MSFReachability : NSObject {
	BOOL localWiFiRef;
	SCNetworkReachabilityRef reachabilityRef;
	XXStruct_4pnlqD _context;
}
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostName:(id)hostName;
-(id).cxx_construct;
-(int)currentStatus;
-(int)networkStatusForFlags:(unsigned)flags;
-(int)localWiFiStatusForFlags:(unsigned)flags;
-(void)dealloc;
-(void)unschedule;
-(BOOL)schedule;
@end

@interface TTURLCache : NSObject {
	NSString* _cachePath;
	NSMutableDictionary* _imageCache;
	NSMutableDictionary* _gifCache;
	NSMutableArray* _imageSortedList;
	unsigned _totalPixelCount;
	unsigned _maxPixelCount;
	int _totalLoading;
	double _invalidationAge;
	BOOL _disableDiskCache;
	BOOL _disableImageCache;
	BOOL chagePath;
	NSRecursiveLock* _threadLock;
}
@property(assign, nonatomic) double invalidationAge;
@property(assign) unsigned maxPixelCount;
@property(copy, nonatomic) NSString* cachePath;
@property(assign, nonatomic) BOOL disableImageCache;
@property(assign, nonatomic) BOOL disableDiskCache;
+(id)defaultGroupHeadFaceCachePath;
+(id)defaultHeadFaceCachePath;
+(id)createHeadFaceCachePath;
+(id)defaultQzoneFaceCachePath;
+(id)defaultCachePath;
+(void)setSharedCache:(id)cache;
+(id)sharedCache;
-(void)storeSystemAvatarData:(id)data forHeadId:(int)headId userType:(int)type;
-(BOOL)hasSystemAvatarForHeadId:(int)headId userType:(int)type;
-(id)systemAvatarDataForHeadId:(int)headId userType:(int)type;
-(id)systemAvatarPathForHeadId:(int)headId userType:(int)type;
-(BOOL)hasHeadImageForUin:(id)uin userType:(int)type sizeType:(int)type3;
-(void)removeHeadImageForUin:(id)uin userType:(int)type;
-(void)storeHeadData:(id)data forUin:(id)uin userType:(int)type sizeType:(int)type4;
-(id)headImageForUin:(id)uin userType:(int)type sizeType:(int)type3;
-(id)headImagePathForUin:(id)uin userType:(int)type sizeType:(int)type3;
-(id)headImagePathForUin:(id)uin sizeType:(int)type rootPath:(id)path;
-(void)invalidateKey:(id)key;
-(void)invalidateURL:(id)url;
-(void)removeAll:(BOOL)all;
-(void)removeKey:(id)key fromDisk:(BOOL)disk;
-(void)removeURL:(id)url fromDisk:(BOOL)disk;
-(void)moveDataForURL:(id)url toURL:(id)url2;
-(id)storeTemporaryImage:(id)image toDisk:(BOOL)disk;
-(id)storeTemporaryData:(id)data;
-(void)storeToDiskWithImage:(id)image forKey:(id)key;
-(void)storeImage:(id)image forKey:(id)key;
-(void)storeImage:(id)image forURL:(id)url;
-(void)storeQzonePictureData:(id)data forKey:(id)key;
-(void)storeData:(id)data forKey:(id)key;
-(void)storeData:(id)data forURL:(id)url;
-(BOOL)hasImageForURL:(id)url;
-(id)imageForQZoneForKey:(id)key;
-(id)imageCachedForQZoneForKey:(id)key;
-(id)imageForKey:(id)key;
-(id)imageForURL:(id)url;
-(id)dataForKey:(id)key expires:(double)expires timestamp:(id*)timestamp;
-(id)dataForURL:(id)url expires:(double)expires timestamp:(id*)timestamp;
-(id)dataForURL:(id)url;
-(BOOL)hasDataForQZoneKey:(id)qzoneKey;
-(BOOL)hasDataForURL:(id)url;
-(id)cachePathForQZoneForKey:(id)key;
-(id)cachePathForKey:(id)key;
-(id)cachePathForURL:(id)url;
-(id)keyForUrlWithoutDomain:(id)urlWithoutDomain;
-(id)keyForURL:(id)url;
-(id)createTemporaryURL;
-(id)GetDataPathFromDiskForQZoneWithKey:(id)key;
-(id)GetDataPathFromDiskWithKey:(id)key;
-(id)GetDataPathFromDisk:(id)disk;
-(id)loadDataFromDisk:(id)disk;
-(void)storeImage:(id)image forKey:(id)key forCach:(BOOL)cach;
-(void)storeImage:(id)image forKey:(id)key force:(BOOL)force;
-(void)expireImagesFromMemory;
-(void)dealloc;
-(id)init;
@end

@interface TTURLRequest : NSObject {
	NSString* _url;
	NSString* _httpMethod;
	NSData* _httpBody;
	NSMutableDictionary* _parameters;
	NSMutableDictionary* _headers;
	NSString* _contentType;
	id<TTURLRequestDelegate> _delegate;
	id<TTURLResponse> _response;
	int _cachePolicy;
	double _cacheExpirationAge;
	NSString* _cacheKey;
	NSDate* _timestamp;
	id _userInfo;
	BOOL _isLoading;
	BOOL _shouldHandleCookies;
	BOOL _respondedFromCache;
	int _totalBytesLoaded;
	int _totalBytesExpected;
	long long _uid;
	int _priority;
	BOOL _keyWithoutDomain;
	double _beginRequest;
	double _endRequest;
	double _startImageDlTime;
	double _reallyImageDlTime;
	double _startImageDisTime;
	double _reallyImageDisTime;
	int _retryCount;
}
@property(assign, nonatomic) int retryCount;
@property(assign, nonatomic) double reallyImageDisTime;
@property(assign, nonatomic) double startImageDisTime;
@property(assign, nonatomic) double reallyImageDlTime;
@property(assign, nonatomic) double startImageDlTime;
@property(assign, nonatomic) double endRequest;
@property(assign, nonatomic) double beginRequest;
@property(assign, nonatomic) BOOL keyWithoutDomain;
@property(assign) int priority;
@property(assign, nonatomic) int totalBytesExpected;
@property(assign, nonatomic) int totalBytesLoaded;
@property(assign, nonatomic) long long uid;
@property(assign, nonatomic) BOOL respondedFromCache;
@property(assign, nonatomic) BOOL shouldHandleCookies;
@property(assign, nonatomic) BOOL isLoading;
@property(retain, nonatomic) NSDate* timestamp;
@property(retain, nonatomic) id userInfo;
@property(retain, nonatomic) NSString* cacheKey;
@property(assign, nonatomic) double cacheExpirationAge;
@property(assign, nonatomic) int cachePolicy;
@property(retain, nonatomic) NSMutableDictionary* headers;
@property(readonly, assign, nonatomic) NSMutableDictionary* parameters;
@property(copy, nonatomic) NSString* contentType;
@property(copy, nonatomic) NSData* httpBody;
@property(copy, nonatomic) NSString* httpMethod;
@property(copy, nonatomic) NSString* url;
@property(retain, nonatomic) id<TTURLResponse> response;
@property(assign, nonatomic) id<TTURLRequestDelegate> delegate;
+(id)requestWithURL:(id)url delegate:(id)delegate;
+(id)request;
-(id)GetSnapName;
-(void)QZoneCancel;
-(BOOL)QZoneSend;
-(void)cancel;
-(BOOL)send;
-(id)generatePostBody;
-(id)generateCacheKey;
-(id)md5HexDigest:(id)digest;
-(id)description;
-(void)requestTime;
-(void)dealloc;
-(id)init;
-(id)initWithURL:(id)url delegate:(id)delegate;
@end

@interface TTUserInfo : NSObject {
	NSString* _topic;
	id _strong;
	id _weak;
}
@property(assign, nonatomic) id weak;
@property(retain, nonatomic) id strong;
@property(retain, nonatomic) NSString* topic;
+(id)weak:(id)weak;
+(id)topic:(id)topic;
+(id)topic:(id)topic strong:(id)strong weak:(id)weak;
-(void)dealloc;
-(id)initWithTopic:(id)topic strong:(id)strong weak:(id)weak;
@end

@interface OfflineFile : NSObject {
@private
	NSString* _identifer;
	int _transType;
	int _transState;
	NSString* _fullFilePath;
	unsigned _fileSize;
	NSString* _url;
	NSData* _postBody;
	unsigned _bodySize;
	unsigned _alreadyUploadSize;
	unsigned _alreadyDownloadSize;
	NSURLConnection* _httpConnection;
	NSMutableData* _responseData;
}
@property(retain, nonatomic) NSURLConnection* httpConnection;
@property(readonly, assign, nonatomic) int transState;
@property(readonly, assign, nonatomic) unsigned alreadyDownloadSize;
@property(readonly, assign, nonatomic) unsigned alreadyUploadSize;
@property(retain, nonatomic) NSData* postBody;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) unsigned fileSize;
@property(retain, nonatomic) NSString* fullFilePath;
@property(assign, nonatomic) int transType;
@property(retain, nonatomic) NSString* identifer;
-(int)ParseUploadRes:(id)res;
-(void)SaveDownloadData;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)DelayStartTransfer;
-(BOOL)StartTransfer;
-(void)ResetState;
-(void)CancelTransfer;
-(void)dealloc;
-(id)initWithInfo:(int)info FilePathName:(id)name FileSize:(unsigned)size;
@end

@interface QQRecommendFriendViewController : QQViewController <UITableViewDelegate, QQTableFootViewDelegate, UIScrollViewDelegate, IFaceObserver> {
	NSMutableArray* _dataSources;
	NSMutableArray* _DBSources;
	QQRecommendTableView* _tableView;
	QQTableFootView* _tableFootView;
	QQNoFriendView* _nobodyView;
	AddFriendSendMessageViewController* _addFriend;
	int _total;
	int _currentCount;
	BOOL _isDispachDelegate;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriend;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)didTableFootViewBeTouchEnd:(id)end;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)didCellTouchIconAdd:(id)add;
-(void)didCellTouch:(id)touch;
-(void)reloadAccountData;
-(void)reloadData;
-(void)viewDidLoad;
-(void)viewDidUnload;
-(void)loadView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)reloadMoreSources;
-(void)notifyLoadHeadImageFinished:(id)finished;
-(void)notifyGetHeadImageSucc:(id)succ;
-(void)reloadTableView;
-(id)init;
@end

@interface QQNoFriendView : UIView {
}
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQTableCellItem : QQFriendModel {
	NSString* _title;
	int _type;
	NSIndexPath* _indexPath;
	id _object;
	NSString* _iconName;
	CGRect _rect;
	SEL _sel;
	NSString* _key;
	NSString* _url;
	NSString* _itunesUrl;
	BOOL _isTransformIcon;
	UIImage* _iconPic;
	BOOL _isNewPlugin;
	BOOL _isHightLinghted;
	int _unreadCount;
	unsigned _resID;
	BOOL _local;
	BOOL _localNew;
}
@property(assign, nonatomic) BOOL localNew;
@property(assign, nonatomic) BOOL local;
@property(assign, nonatomic) unsigned resID;
@property(assign, nonatomic) int unreadCount;
@property(assign, nonatomic) BOOL isHightLinghted;
@property(assign, nonatomic) BOOL isNewPlugin;
@property(retain, nonatomic) UIImage* iconPic;
@property(assign, nonatomic) BOOL isTransformIcon;
@property(retain, nonatomic) NSString* itunesUrl;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* key;
@property(assign, nonatomic) CGRect rect;
@property(retain, nonatomic) NSString* iconName;
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) SEL sel;
@property(retain, nonatomic) id object;
+(id)CreateItemWithCv:(id)cv withIcon:(id)icon;
+(id)CreateItemWith:(id)with withIcon:(id)icon;
+(id)CreateItem:(id)item withType:(int)type indexPath:(id)path object:(id)object;
-(void)sendAction;
-(void)addTarget:(id)target action:(SEL)action;
-(void)dealloc;
-(id)init;
@end

@interface QQRecommendBasicCell : UITableViewCell {
	UIImageView* _backgroundImageView;
	QQAsynHeadImageView* _headView;
	UIImageView* _iconUserImageView;
	UILabel* _nickLabel;
	UILabel* _detailLabel;
	UIButton* _iconImageAcc;
	UIImageView* _bottomLineImageView;
	QQTableCellItem* _data;
	id<QQRecommendBasicCellDelegate> _delegate;
}
@property(retain, nonatomic) UIButton* iconImageAcc;
@property(retain, nonatomic) QQAsynHeadImageView* headView;
@property(retain, nonatomic) QQTableCellItem* data;
@property(assign, nonatomic) id<QQRecommendBasicCellDelegate> delegate;
-(void)touchIconAdd:(id)add;
-(void)touchHead:(id)head;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQTableFootView : UIView {
	int _total;
	int _currentCount;
	NSString* _title;
	NSString* _content;
	NSString* _bottomImage;
	NSString* _backgroundImage;
	NSString* _backgroundHightImage;
	NSString* _startTipsWord;
	NSString* _animationTipsWord;
	UIActivityIndicatorView* _animationView;
	id<QQTableFootViewDelegate> _delegate;
	BOOL _isHightLight;
	int _style;
@private
	int _animationStatus;
	NSTimer* _animationTimer;
}
@property(retain, nonatomic) NSString* animationTipsWord;
@property(retain, nonatomic) NSString* startTipsWord;
@property(assign, nonatomic) int currentCount;
@property(assign, nonatomic) int total;
@property(retain, nonatomic) NSString* backgroundHightImage;
@property(retain, nonatomic) NSString* backgroundImage;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int style;
@property(assign, nonatomic) id<QQTableFootViewDelegate> delegate;
-(void)animationBegin:(id)begin;
-(void)startAnimationTips;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQRecommendTableView : UITableView <UITableViewDataSource, QQRecommendBasicCellDelegate> {
	NSMutableArray* _dataSources;
	int _rStyle;
}
@property(assign, nonatomic) int rStyle;
@property(retain, nonatomic) NSMutableArray* dataSources;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableViewDisapper;
-(void)reloadData;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame aStyle:(int)style;
@end

@interface QQRecommendViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate, UIActionSheetDelegate, SimpleAlertViewDelegate, UIDocumentInteractionControllerDelegate, X8WebFileMgrDelegate> {
	NSMutableArray* _dataSources;
	UITableView* _tableView;
	BOOL _showNew;
	UIImageView* _rightButtonFlagView;
	int _newFeedCount;
	PluginWebModelController* _pluginWebModelController;
	NSTimer* _CallPluginTimer;
	BOOL _hasPushNotifiction;
	BOOL _needReloadData;
	NSMutableArray* _pluginIDArray;
	QQAsynHeadImageView* _qzoneHeadView;
	long long _unreadActiveLastUin;
	QQUnreadTagCountManager* _unreadTagCountManager;
	BOOL _isUpdateGameCenter;
}
-(void)displayMaskView;
-(void)pushToGameCenter;
-(BOOL)isGameIDWeb:(id)web;
-(CGRect)showDefaultMaskView;
-(void)showView;
-(void)OnFileDownFinish:(id)finish;
-(void)showNewIcon;
-(void)dealloc;
-(void)onFeedUnreadNumberUpdate:(id)update;
-(void)handleNewNeighborFeedNotification:(id)notification;
-(void)onStartUpdateLocation;
-(void)onTimeout;
-(void)stopCallPluginTimer;
-(void)startCallPluginTimer;
-(void)onLbsGetLocationSucc;
-(void)onLbsGetLocationFail;
-(void)onPluginDataRefresh;
-(void)popViewControllerWithAccountChange;
-(void)didReceiveMemoryWarning;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)clickDismissPluginWebView:(id)view;
-(void)ArrangeCell:(id)cell;
-(void)dataSourceInit;
-(void)onQZoneDidShow:(id)onQZone;
-(id)getPluginImage:(id)image;
-(void)showNearbyViewController;
-(void)actionCell:(id)cell;
-(void)handleInternalModule:(id)module;
-(id)getWapUrl:(id)url;
-(void)checkIfNew:(id)aNew;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)checkForShowTabBarHint;
-(void)showFeedBackView;
-(void)drawSubView;
-(void)viewDidUnload;
-(void)loadView;
-(id)init;
-(void)onShareLocationChanged:(id)changed;
-(void)onHideHint:(id)hint;
@end

@interface QQDefaultMaskView : UIWindow {
	double _startTime;
	CGRect _rect;
	CGRect _maskRect;
	BOOL _openGameCenter;
}
@property(assign, nonatomic) CGRect rect;
+(id)initWithFrame:(CGRect)frame withMaskFrame:(CGRect)maskFrame;
+(id)GetInstance;
-(id).cxx_construct;
-(void)alphaMissEnd;
-(void)dismiss:(id)dismiss openGameCenter:(BOOL)center;
-(void)dismissDefalutView:(id)view;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQAppSetting : NSObject {
	NSMutableDictionary* _appSetting;
	BOOL _isFirstLanuch;
}
@property(assign, nonatomic) BOOL isFirstLaunch;
@property(retain, nonatomic) NSMutableDictionary* appSetting;
+(id)GetInstance;
-(BOOL)openDebug;
-(BOOL)isRelationViewChooseAll:(id)all;
-(void)setRelationViewChooseAll:(BOOL)all uin:(id)uin;
-(BOOL)delAioLBSTipsShow:(id)show;
-(BOOL)getAioLBSTipsShow:(id)show;
-(void)setAioLBSTipsShow:(id)show;
-(void)setCurrentThemeId:(unsigned)anId;
-(unsigned)currentThemeId;
-(id)uinPairLocalDeleteMsgTime:(id)time uinType:(BOOL)type;
-(void)setUinPair:(id)pair uinType:(BOOL)type loacalDeleteMsgSeq:(id)seq;
-(id)getMQZAppFeedTime;
-(BOOL)isDisplayGroupNick;
-(BOOL)isNeedsToShowGuideForSendingFile;
-(void)setChirpGuestInstructionDisplayed;
-(void)setChirpInstructionDisplayed;
-(BOOL)chirpGuestInstructionDisplayed;
-(BOOL)chirpInstructionDisplayed;
-(void)setOnlineStatusPush:(BOOL)push;
-(BOOL)getOnlineStatusPush;
-(void)saveSoundName:(id)name value:(id)value;
-(id)getSoundName:(id)name;
-(void)setFriendRecommendEntryRemoved:(id)removed value:(BOOL)value;
-(BOOL)isFriendRecommendEntryRemoved:(id)removed;
-(void)setFirstRunFileTransferAssistant:(id)assistant value:(BOOL)value;
-(BOOL)firstRunFileTransferAssistant:(id)assistant;
-(void)setNoNeedsToShowNewSignForCardExchange;
-(BOOL)isNeedsToShowNewSignForCardExchange;
-(void)setShowCardCustomCover:(BOOL)cover;
-(BOOL)isShowCardCustomCover;
-(void)setShouldShowChatAvatarSettingNotifyWhileRecvMsg:(BOOL)showChatAvatarSettingNotifyWhileRecvMsg;
-(BOOL)shouldShowChatAvatarSettingNotifyWhileRecvMsg;
-(void)setShouldShowChatAvatarSettingNotifyWhileSendingMsg:(BOOL)showChatAvatarSettingNotifyWhileSendingMsg;
-(BOOL)shouldShowChatAvatarSettingNotifyWhileSendingMsg;
-(void)setShouldShowSuperVipIDOutOfDate:(BOOL)showSuperVipIDOutOfDate;
-(BOOL)shouldShowSuperVipIDOutOfDate;
-(void)removeDBVersion:(id)version;
-(void)removeChatDefaultCover:(id)cover;
-(void)setChatDefaultCoverName:(id)name;
-(void)setChatCoverAsDefault:(id)aDefault;
-(id)getChatDefaultCover;
-(void)removeChatCover:(id)cover isGroup:(BOOL)group;
-(void)setChatCover:(id)cover uin:(id)uin isGroup:(BOOL)group;
-(id)getChatCoverName:(id)name isGroup:(BOOL)group;
-(BOOL)isShowFriendsCardCoverAtChatting;
-(void)setNearbyFriendSexType:(int)type;
-(int)getNearbyFriendSexType;
-(void)setNearbyFriendShowStyle:(int)style;
-(int)getNearbyFriendShowStyle;
-(BOOL)isShowSelfHeadImageAtChatting;
-(id)getMsgSoundName:(BOOL)name;
-(id)getMsgSoundName;
-(BOOL)FlowAvailable;
-(BOOL)isWiFi;
-(BOOL)canPushMsg:(id)msg;
-(void)delaySaveAppSetting;
-(void)saveAppSetting;
-(void)setNoNeedsToShowNewSignForMakeFriendsCard:(id)makeFriendsCard;
-(BOOL)isNeedsToShowNewSignForMakeFriendsCard:(id)makeFriendsCard;
-(id)getCardImageCookie:(id)cookie;
-(void)setClearCacheFinish:(BOOL)finish;
-(void)setCardImageCookie:(id)cookie cookie:(id)cookie2;
-(id)getEventCookie:(id)cookie;
-(void)setEventCookie:(id)cookie cookie:(id)cookie2;
-(void)setReportMyLocation:(id)location report:(BOOL)report;
-(BOOL)isReportMyLocation:(id)location;
-(void)setAgreeZanMe:(id)me isAgree:(BOOL)agree;
-(BOOL)isAgreeZanMe:(id)me;
-(void)setShareLocation:(id)location isAgree:(BOOL)agree;
-(BOOL)isAgreeToShareLocation:(id)shareLocation;
-(void)loadAppSetting;
-(void)dealloc;
-(id)init;
@end

@interface QQAdvertismentData : NSObject {
	int _elementId;
	NSString* _picUrl;
	NSString* _title;
	NSString* _url;
	NSString* _androidPackage;
	int _productid;
	int _softid;
	int _fileid;
}
@property(assign, nonatomic) int fileid;
@property(assign, nonatomic) int softid;
@property(assign, nonatomic) int productid;
@property(retain, nonatomic) NSString* androidPackage;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* picUrl;
@property(assign, nonatomic) int elementId;
-(id)description;
-(void)dealloc;
@end

@interface QQAlertView : UIAlertView {
	id _object;
@private
	BOOL _delDelegateBeforeDismiss;
}
@property(assign, nonatomic) BOOL delDelegateBeforeDismiss;
@property(retain, nonatomic) id object;
-(void)doDismiss;
-(void)registerApplicationWillEnterBackgroundDismiss;
-(void)dealloc;
-(id)initWithTitle:(id)title message:(id)message delegate:(id)delegate cancelButtonTitle:(id)title4 otherButtonTitles:(id)titles;
@end

@interface QQActionSheet : UIActionSheet {
	id _object;
}
@property(retain, nonatomic) id object;
-(void)markSelectedAtButtonIndex:(int)buttonIndex;
-(void)showInView:(id)view;
-(void)dealloc;
-(void)doDismiss;
-(id)initWithTitle:(id)title delegate:(id)delegate cancelButtonTitle:(id)title3 destructiveButtonTitle:(id)title4 otherButtonTitles:(id)titles;
@end

@interface QQTextFieldView : UITextField {
@private
	id _object;
}
@property(retain, nonatomic) id object;
-(void)dealloc;
@end

@interface QUIButton : UIButton {
	int _type;
	int _section;
	int _row;
	id _object;
	SEL _sel;
	BOOL _ifDelete;
	NSTimer* _timer;
	BOOL _isBigIcon;
}
@property(assign) BOOL isBigIcon;
@property(assign) BOOL ifDelete;
@property(assign, nonatomic) id object;
@property(assign, nonatomic) int row;
@property(assign, nonatomic) int section;
@property(assign, nonatomic) int type;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)longPressLowDevice;
-(void)startAnimation2;
-(void)didEndAnimation2;
-(void)didEndAnimation1;
-(void)startAnimation1;
-(void)removeDeleteButton;
-(void)delete;
-(void)upDateSubView;
-(void)addDeleteButton;
-(void)longPress:(id)press;
-(void)addLongPressTarget:(id)target action:(SEL)action;
-(void)dealloc;
-(id)init;
@end

@interface QQPhotoButton : UIView {
	int _type;
	int _section;
	int _row;
	id _objectTouch;
	SEL _selTouch;
	id _object;
	SEL _sel;
	UILongPressGestureRecognizer* _longPressGestureRecognizer;
	UIImage* _backgroundImage;
}
@property(assign, nonatomic) UIImage* backgroundImage;
@property(assign, nonatomic) SEL sel;
@property(assign, nonatomic) id object;
@property(assign, nonatomic) int row;
@property(assign, nonatomic) int section;
@property(assign, nonatomic) int type;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)longPress:(id)press;
-(void)addLongPressTarget:(id)target action:(SEL)action;
-(void)addTarget:(id)target action:(SEL)action;
-(void)drawRect:(CGRect)rect;
-(void)setFrame:(CGRect)frame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQIconModel : NSObject {
	UIImage* _image;
	NSString* _title;
	NSString* _url;
	NSString* _icon;
	NSString* _itunes;
	NSString* _appName;
	BOOL _isAddModel;
	int _section;
	int _row;
}
@property(assign, nonatomic) int row;
@property(assign, nonatomic) int section;
@property(assign, nonatomic) BOOL isAddModel;
@property(retain, nonatomic) NSString* appName;
@property(retain, nonatomic) NSString* itunes;
@property(retain, nonatomic) NSString* icon;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) UIImage* image;
-(void)dealloc;
@end

@interface WebModelController : QQViewController <UIWebViewDelegate, QQWebviewExecuteJSDelegate, QQWebBottomBarDelegate> {
	NSString* webURL;
	NSURLRequest* lastRequest;
	UIWebView* mWebView;
	QQAlertView* ar_SMSAskView;
	BOOL loadHTMLFile;
	int barBtn2State;
	BOOL isQQSyncWebUrl;
	BOOL _scalesPageToFit;
	BOOL _reSetScrollScale;
	UIActivityIndicatorView* act;
	NSString* _loginUin;
	NSData* _sid;
	BOOL _isViewDisappear;
	BOOL _isPluginUrl;
	NSString* _pluginName;
	NSString* _originalUrl;
	NSString* _loadingUrl;
	NSTimer* _UpdateWgs84Timer;
	BOOL _isLand;
	BOOL _isSuperSuportLand;
	int _viewStyle;
	BOOL _isInitToolBar;
	BOOL _isNeedUrlEncode;
	BOOL _isUserLeftBtn;
	BOOL _isHiddenMsgTip;
	NSURLRequest* _unloadLastRequest;
	UIViewController* _parentCtr;
	int _lastState;
	QQWebBottomBar* _webBar;
@private
	BOOL isToolbarHidden;
}
@property(retain, nonatomic) NSURLRequest* unloadLastRequest;
@property(assign, nonatomic) UIViewController* parentCtr;
@property(assign, nonatomic) BOOL isHiddenMsgTip;
@property(assign, nonatomic) BOOL isUserLeftBtn;
@property(assign, nonatomic) BOOL isNeedUrlEncode;
@property(assign, nonatomic) BOOL isToolbarHidden;
@property(retain, nonatomic) NSString* loadingUrl;
@property(retain, nonatomic) NSString* originalUrl;
@property(retain, nonatomic) NSString* pluginName;
@property(assign, nonatomic) BOOL isSuperSuportLand;
@property(assign, nonatomic) BOOL reSetScrollScale;
@property(assign, nonatomic) BOOL scalesPageToFit;
@property(assign, nonatomic) BOOL isQQSyncWebUrl;
@property(retain, nonatomic) NSURLRequest* lastRequest;
@property(assign, nonatomic) BOOL loadHTMLFile;
@property(copy, nonatomic) NSString* webURL;
@property(assign, nonatomic, setter=setViewStyle:) int viewStyle;
@property(assign, nonatomic) BOOL isPluginUrl;
-(void)ExecuteJS:(id)js withParam:(id)param;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(BOOL)isAppStoreURL:(id)url;
-(void)clickHome:(id)home;
-(void)clickForward:(id)forward;
-(void)clickBack:(id)back;
-(void)clickCancel:(id)cancel;
-(void)leftButtonClick:(id)click;
-(void)rotateViewForInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didWebBottomBar:(id)bar share:(id)share;
-(void)didWebBottomBar:(id)bar reload:(id)reload;
-(void)didWebBottomBar:(id)bar goForward:(id)forward;
-(void)didWebBottomBar:(id)bar goBack:(id)back;
-(void)didWebBottomBar:(id)bar goHome:(id)home;
-(void)initToolBar;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(id)encodeQQUrl:(id)url;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)initWithBrowseWeburl:(id)browseWeburl withTitle:(id)title loadMethod:(BOOL)method withLoginUin:(id)loginUin withSid:(id)sid;
-(id)initWithBrowseWeburl:(id)browseWeburl withTitle:(id)title withLoginUin:(id)loginUin withSid:(id)sid;
-(void)toolbarClick:(id)click;
-(void)onTimeout;
-(void)stopUpdateWgs84Timer;
-(void)startUpdateWgs84Timer;
-(void)onLbsGetLocationSucc;
-(void)onLbsGetLocationFail;
-(id)appendUserInfoToUrl:(id)url;
-(id)appendMobInfoToUrl:(id)url;
-(id)appendDeviceInfoToUrl:(id)url;
-(id)appendSidToPluginUrl:(id)pluginUrl;
-(id)appendSidToUrl:(id)url;
-(BOOL)shouldAppendSid:(id)sid;
-(void)changeBtnState:(int)state;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showAskSMSAlertView:(id)view;
@end

@interface QQVaildCodeController : QQViewController <QIMTextInputDelegate, UITextFieldDelegate> {
	NSString* _url;
	MSFImageView* _imageView;
	UIImageView* defaulImageView;
	UITextField* tv;
	BOOL isPresent;
	UIImage* _codeImg;
	int sessinID;
	BOOL dismiss;
	id controlObject;
	BOOL _isReFetch;
	id<QQValidCodeControllerDelegate> _delegate;
	BOOL _fobiddenBack;
@private
	BOOL _forbiddenBack;
}
@property(assign, nonatomic) id<QQValidCodeControllerDelegate> delegate;
@property(assign, nonatomic) id controlObject;
@property(assign, nonatomic) BOOL forbiddenBack;
@property(assign, nonatomic) BOOL dismiss;
@property(readonly, assign, nonatomic) BOOL isPresent;
@property(retain, nonatomic) NSString* url;
-(void)dealloc;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)FetchNewPic;
-(void)ActionDone;
-(void)actionVeryfyDone;
-(void)sendAction;
-(void)ActionCancel;
-(void)showError;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)clearText;
-(int)getSessionID;
-(void)setSessionID:(int)anId;
-(void)setCodeImage:(id)image;
-(void)loadView;
-(id)initWithUseStateL:(id)useStateL delegate:(id)delegate;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface MSFImageView : UIImageView {
	NSString* _url;
	UIImage* _defaultImage;
	NSMutableData* _recData;
	UIActivityIndicatorView* _act;
	NSInvocation* inv;
	NSURLConnection* cnn;
}
@property(retain, nonatomic) NSURLConnection* cnn;
@property(retain, nonatomic) UIImage* defaultImage;
@property(retain, nonatomic) NSString* url;
-(void)dealloc;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)addTarget:(id)target selector:(SEL)selector;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)stopAnimating;
-(void)startAnimating;
-(void)GetURL;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQAccountItem : NSObject {
	NSString* _itemTitle;
	NSString* _url;
	NSString* _itemKey;
	NSString* _itemStyle;
	NSString* _itemContent;
	BOOL _edit;
}
@property(assign, nonatomic) BOOL edit;
@property(retain, nonatomic) NSString* itemContent;
@property(retain, nonatomic) NSString* itemStyle;
@property(retain, nonatomic) NSString* itemKey;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* itemTitle;
+(id)CreateItem:(id)item url:(id)url key:(id)key style:(id)style content:(id)content;
-(int)GetHeightWithItem;
-(void)dealloc;
-(id)init;
@end

@interface AccoountViewCell : QQTableViewCell {
	UILabel* _nameLabel;
	QQAsynHeadImageView* _headImageView;
	NSString* _uin;
}
@property(readonly, assign, nonatomic) QQAsynHeadImageView* headImageView;
@property(copy, nonatomic) NSString* uin;
-(void)dealloc;
-(void)setUIN:(id)uin nick:(id)nick;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQAccountListViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, QQSetupModelViewDelegate, SimpleAlertViewDelegate, SimpleAlertViewExDelegate, UIActionSheetDelegate, QQTimePickerDelegate, IFaceObserver> {
@private
	UITableView* listContenttableView;
	NSTimer* _timeOutTimer;
	NSIndexPath* _deleteIndexPath;
	BOOL deleteAll;
	BOOL _deleteState;
	NSTimer* _timer;
	SimpleAlertViewEx* _alert;
	int _alertIndex;
	BOOL _checkClearAccount;
	int _count;
	NSMutableArray* _dataSources;
	NSMutableArray* _headSources;
	QQTimePicker* timeSelectView;
	QQAccountsModel* _accountToLogin;
	BOOL _changingAccount;
	id<RefreshSetupViewController> _delegate;
}
@property(assign, nonatomic) id<RefreshSetupViewController> delegate;
@property(assign, nonatomic) BOOL changingAccount;
-(void)setPushTimeBegin:(int)begin endTime:(int)time;
-(BOOL)isSupportRightDragToGoBack;
-(void)clickRegButton:(id)button;
-(void)clickNewButton;
-(void)QQSetupModelViewClickEdit:(id)edit;
-(void)QQSetupModelViewClickBack:(id)back;
-(void)deleteOver;
-(void)deleteAccounts;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)delayChangeAccount:(id)account;
-(void)carryChangeAccount:(id)account;
-(void)setOnlineState:(BOOL)state;
-(void)selectedAccountWidthIndex:(int)index;
-(void)didTableViewSelected:(id)selected;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dismiss;
-(void)reloadWhenEditingStateChanged;
-(void)onForceOffline;
-(void)restoreData;
-(void)reloadTableData;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)initContentView;
-(void)dealloc;
-(void)initUI;
-(void)leftButtonClick:(id)click;
-(void)reloadData;
-(void)viewDidUnload;
-(void)loadView;
-(id)init;
@end

@interface QQTimePicker : UIView <UIPickerViewDelegate, UIPickerViewDataSource> {
	UIPickerView* timePicker;
	NSArray* firstArray;
	NSArray* lastArray;
	UIButton* done;
	id<QQTimePickerDelegate> selectObject;
}
-(void)dealloc;
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)setInitState:(int)state End:(int)end;
-(void)selectDone;
-(void)loadView;
-(id)initWithFrame:(CGRect)frame withDelegate:(id)delegate;
@end

@interface QQAboutViewController : QQViewController <UIAlertViewDelegate, QQActionLabelDelegate, UITableViewDataSource, UITableViewDelegate> {
	NSTimer* _reqTimeOutTimer;
	NSMutableArray* _dataSources;
	UITableView* _tableView;
	NSMutableDictionary* _pluginDic;
	id<RefreshSetupViewController> _delegate;
}
@property(assign, nonatomic) id<RefreshSetupViewController> delegate;
-(void)dealloc;
-(void)gotoWap;
-(void)newRecommond;
-(void)gotoWapView:(id)view webTitle:(id)title;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)callTelNum:(id)num;
-(void)touchActionWithType:(int)type actionUrl:(id)url title:(id)title;
-(void)finishButtonClick:(id)click;
-(id)getJumpToURL:(id)url;
-(void)showFeedBackView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)OnDeselectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)restoreData;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(id)init;
@end

@interface QQNetWorkTipsView : UIView <UIActionSheetDelegate> {
	UIImage* _backgroundImage;
	UIImage* _errorTipsImage;
	UIButton* _checkOtherButton;
	UILabel* processLabel;
	int total;
	UIProgressView* progress;
	NSString* _titleString;
	NSString* _contentString;
	UIFont* _titleFont;
	UIFont* _contentFont;
	UIColor* _fontColor;
	CGRect _rectBackground;
	CGRect _rectErrorTips;
	CGRect _rectCheckButton;
	CGRect _rectTitle;
	CGRect _rectContent;
	BOOL _isShow;
	UIView* _superView;
	id<QQNetWorkTipsViewDelegate> _delegate;
}
@property(assign, nonatomic) id<QQNetWorkTipsViewDelegate> delegate;
-(void)hideCheckOtherButton:(BOOL)button;
-(void)didCheckButtonSender:(id)sender;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(id)revertSize:(int)size;
-(void)setProcess:(int)process;
-(void)initState;
-(void)setTotal:(long long)total;
-(void)cancelUpLoad;
-(void)removeView;
-(void)hiddenDidStop;
-(void)showDidStop;
-(void)dismiss;
-(void)show;
-(BOOL)isShow;
-(void)showInSuperView:(id)superView;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(void)removeMe;
-(void)setContentString:(id)string;
-(void)setTipsString:(id)string;
-(void)setTipsImage:(id)image;
-(id)initWithCustomFrame:(CGRect)customFrame;
-(id)initWithCardFrame:(CGRect)cardFrame;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQNetWorkErrorWeb : QQViewController <UIWebViewDelegate, UIActionSheetDelegate> {
	UIWebView* _webView;
	NSString* _webPath;
	UIActivityIndicatorView* _loadingView;
	NSTimer* _loadingViewTimer;
}
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)onLoadingViewTimer;
-(void)stopLoading;
-(void)startLoading;
-(void)viewDidUnload;
-(void)loadView;
-(void)loadDefaultPage;
-(CGRect)getLoadingViewRect:(int)rect;
-(void)dealloc;
-(id)init;
@end

@interface AdMsgData : NSObject {
	NSString* _desc;
	NSString* _subject;
}
@property(retain, nonatomic) NSString* subject;
@property(retain, nonatomic) NSString* desc;
-(void)dealloc;
-(BOOL)parseMsgText:(id)text;
-(id)getFieldString:(id)string :(id)arg2;
-(id)initWithText:(id)text;
@end

@interface qSpeakerView : UIView {
	UIImageView* _icon;
	UILabel* msgTitleLabel;
	UILabel* timeLabel;
	UITextView* detailMsgLabel;
	NSString* uin;
	int _dashLineHeight;
	CGRect _bgRect;
	NSString* detailMsgText;
	EmotionParseResult* _parseResult;
	CGRect detailMsgTextRect;
	id<QQSpeakerViewDelegate> delegate;
	NSString* _gotoWinContent;
	NSString* _gotoWinCode;
	NSString* _gotoWinPara;
}
@property(retain, nonatomic) NSString* gotoWinPara;
@property(retain, nonatomic) NSString* gotoWinCode;
@property(retain, nonatomic) NSString* gotoWinContent;
@property(assign, nonatomic) id<QQSpeakerViewDelegate> delegate;
@property(retain, nonatomic) NSString* uin;
@property(assign, nonatomic) CGRect bgRect;
@property(retain, nonatomic) UITextView* detailMsgLabel;
-(CGRect)getbackgroundViewFrame:(id)frame;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)setData:(id)data;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)reloadAppearance;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QSpeakerViewController : QQViewController <QQSpeakerViewDelegate, UIActionSheetDelegate> {
	QQMessageModel* _model;
	qSpeakerView* _qSpeaker;
	UIButton* _shareBtn;
}
@property(retain, nonatomic) QQMessageModel* model;
-(void)didSelectURL:(id)url;
-(void)dealloc;
-(void)showMoodEditorViewController:(id)controller postWords:(id)words;
-(void)forwardButtonClick:(id)click;
-(void)reloadAppearance;
-(void)viewDidUnload;
-(void)loadView;
-(id)init;
@end

@interface QQMutableDrawText : NSMutableString {
	NSMutableArray* _texts;
	NSMutableArray* _ranges;
	NSMutableArray* _colors;
	NSMutableArray* _fonts;
	NSMutableArray* _rects;
	NSMutableArray* _keys;
	NSMutableString* _content;
	float _fontSize;
	float _maxWith;
}
@property(assign, nonatomic) float maxWith;
@property(assign, nonatomic) float fontSize;
@property(readonly, assign, nonatomic) NSMutableString* content;
@property(retain, nonatomic) NSMutableArray* keys;
@property(retain, nonatomic) NSMutableArray* rects;
@property(retain, nonatomic) NSMutableArray* fonts;
@property(retain, nonatomic) NSMutableArray* colors;
@property(retain, nonatomic) NSMutableArray* ranges;
@property(retain, nonatomic) NSMutableArray* texts;
-(unsigned)heightOffContent;
-(unsigned)touchRangeWith:(CGPoint)with;
-(CGPoint)drawTextInRect:(CGRect)rect;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface QQSystemMessageModel : QQMessageModel {
	NSString* _requestStr;
	NSString* _fromUin;
	int _sysMsgType;
	int _friendRequestType;
	QQMessageModel* superModel;
	QQMutableDrawText* _strContent;
@private
	QQMessageModel* _superModel;
}
@property(retain, nonatomic) QQMutableDrawText* strContent;
@property(assign, nonatomic) int sysMsgType;
@property(retain, nonatomic) QQMessageModel* superModel;
@property(retain, nonatomic) NSString* fromUin;
@property(retain, nonatomic) NSString* requestStr;
-(CGPathRef)GetPath;
-(float)heightOffFriendMsg;
-(float)GetMsgCellHeight;
-(int)GetFriendRequestType;
-(id)GetCurActionIcon;
-(void)addTexts:(id)texts withColor:(id)color forKeys:(id)keys;
-(id)GetContentMsg;
-(id)GetCellLine2Str:(id)str;
-(id)GetCellLine1Str:(BOOL)str;
-(id)GetAddTipsContentMsg;
-(id)GetRencentContentMsg;
-(id)GetMessageTitle;
-(id)GetActionResultStr;
-(id)GetRequestStr;
-(BOOL)GetSysGroupMsgForFriendRequest;
-(void)dealloc;
-(id)initWithMessageModel:(id)messageModel;
@end

@interface SystemRequestCell : UIView {
	NSString* _requestTypeStr;
	UIImage* _headImage;
	NSString* _messageTitle;
	NSString* _content;
	int _time;
	NSString* _curActionStr;
	UIImage* _curActionIcon;
	QQSystemMessageModel* _model;
	BOOL _highlighted;
	BOOL _highlightedAccept;
	CGRect _requestRect;
	CGRect _headRect;
	CGRect _nickRect;
	CGRect _timeRect;
	CGRect _contentRect;
	CGRect _iconRect;
	CGRect _actionStrRect;
	CGRect _speratorLineRect;
	CGRect _acceptRect;
	UIFont* _requestFont;
	UIFont* _nickFont;
	UIFont* _contentFont;
	UIFont* _timeFont;
	id<SystemRequestCellDelegate> _delegate;
}
@property(assign, nonatomic) id<SystemRequestCellDelegate> delegate;
@property(retain, nonatomic) UIImage* headImage;
@property(retain, nonatomic) QQSystemMessageModel* model;
@property(assign, nonatomic) BOOL highlightedAccept;
@property(assign, nonatomic) BOOL highlighted;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)viewCellWillAppear;
-(void)drawRect:(CGRect)rect;
-(void)drawContent;
-(void)cleanDrawContent;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQSystemMsgViewCell : UITableViewCell {
	SystemRequestCell* _view;
}
@property(assign, nonatomic) SystemRequestCell* view;
-(void)addViewDelegate:(id)delegate;
-(void)cellWillDisplay;
-(void)setHighlighted:(BOOL)highlighted;
-(void)layoutSubviews;
-(void)setFrame:(CGRect)frame;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)cellWillDisplay;
-(void)setFrame:(CGRect)frame;
-(id)initWithTableStyle:(int)tableStyle reuseIdentifier:(id)identifier;
@end

@interface SysViewCell : QQTableViewCell {
	UIImageView* unreadView;
	UIImageView* _bgImageView;
	UIImageView* _icon;
	UILabel* msgTitleLabel;
	UILabel* detailMsgLabel;
	UILabel* timeLabel;
	NSString* uin;
	NSString* _fromUin;
	BOOL group;
	BOOL _isEditModel;
	UIImageView* _moreImg;
	UIImageView* _headImg;
	NSString* _groupCode;
}
@property(retain, nonatomic) UIImageView* headImg;
@property(assign, nonatomic) BOOL isEditModel;
@property(retain, nonatomic) NSString* fromUin;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) UIImageView* bgImageView;
@property(retain, nonatomic) UILabel* detailMsgLabel;
@property(retain, nonatomic) NSString* groupCode;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)setData:(id)data;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame reuseIdentifier:(id)identifier;
@end

@interface SystemMessageViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate, UIActionSheetDelegate, SystemRequestCellDelegate> {
	UITableView* table;
	NSMutableArray* msgArray;
	int page;
	QQRecentMessageModel* _recentMsgModel;
	AddFriendSendMessageViewController* _addFriend;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriend;
@property(retain, nonatomic) QQRecentMessageModel* recentMsgModel;
+(id)parseContactsSigFromSysMsg:(id)sysMsg;
+(id)parseContactsMsgFromSysMsg:(id)sysMsg;
+(id)parseContactsUinFromSysMsg:(id)sysMsg;
+(id)parseContactsMobilePhoneFromSysMsg:(id)sysMsg;
+(id)parseAdditionalMsgFromSysMsg:(id)sysMsg;
+(unsigned)parseTypeFromSysMsg:(id)sysMsg;
+(id)getGroupMainUinFromSysMsg:(id)sysMsg;
+(id)getGroupCodeFromSysMsg:(id)sysMsg;
+(id)parseUinFromSysMsg:(id)sysMsg;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)didSystemRequestCell:(id)cell selectedRequestWithModel:(id)model;
-(void)didSystemRequestCell:(id)cell selectedHeadWithModel:(id)model;
-(void)onClickClearButton:(id)button;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)restoreData;
-(void)viewDidLoad;
-(void)viewDidUnload;
-(void)actionGetUserInfo:(id)info;
-(void)ActionSearchGroupResult:(id)result;
-(void)loadView;
-(id)loadData;
-(void)onReceivedMessages:(id)messages;
-(void)dealloc;
-(void)haveNewSysMsg:(id)msg;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(id)init;
-(int)heightForIndexPath:(id)indexPath;
-(int)heightForIndexPath:(id)indexPath detailWidth:(int)width;
-(float)heightOfCellModel:(id)cellModel with:(float)with;
@end

@interface QQAccountSwitchView : NSObject <UITableViewDelegate, UITableViewDataSource, SMSEditMenuBackGroundDelegate> {
	UITableView* _accountTable;
	NSMutableArray* _accountList;
	UIImageView* _bgImageView;
	SMSEditMenuBackGround* _maskeView;
	UIWindow* _window;
	UIView* _superView;
	CGRect _frame;
	CGRect _bounds;
	id<QQAccountSwitchViewDelegate> _delegate;
	BOOL _isShow;
	BOOL _isAccountSwitch;
}
@property(assign, nonatomic) id<QQAccountSwitchViewDelegate> delegate;
@property(assign, nonatomic) CGRect bounds;
@property(assign, nonatomic) CGRect frame;
@property(assign, nonatomic) BOOL isAccountSwitch;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)didMenuBackGroundClick:(id)click;
-(void)hidden;
-(void)removeView;
-(void)dismiss;
-(void)show;
-(BOOL)isShow;
-(void)reLoadObjects;
-(void)addObjects:(id)objects;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame superView:(id)view;
@end

@interface QQPushBannerView : UIView {
	int _bannerType;
	CGRect _originFrame;
	UIImageView* _bannerImageView;
	id<PushBannerViewDelegate> _delegate;
	id<PushBannerViewAnimationDelegate> _aniDelegate;
	BOOL _picAltering;
}
@property(assign, nonatomic) id<PushBannerViewAnimationDelegate> animationDelegate;
@property(assign, nonatomic) int bannerType;
-(void)dealloc;
-(void)disappear;
-(void)appear;
-(void)waitPicAlterFinish;
-(id)getViewImage;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

@interface QQPushBannerView_NetworkTips : QQPushBannerView {
	UIImage* _backgroundImage;
	UIImage* _errorTipsImage;
	UIButton* _checkOtherButton;
	NSString* _titleString;
	NSString* _contentString;
	UIFont* _titleFont;
	UIFont* _contentFont;
	UIColor* _fontColor;
	CGRect _rectBackground;
	CGRect _rectErrorTips;
	CGRect _rectCheckButton;
	CGRect _rectTitle;
	CGRect _rectContent;
}
@property(retain, nonatomic) NSString* contentString;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
-(void)didNetworkTipChecked;
@end

@interface QQPushBannerView_Advertisement : QQPushBannerView {
	UIImageView* _bgImageView;
	UIButton* _maskButton;
	UIButton* _closeButton;
	int _picIndex;
}
@property(assign, nonatomic) int picIndex;
-(void)dealloc;
-(void)updateBGImage:(id)image animation:(BOOL)animation;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
-(void)didCloseButtonSender:(id)sender;
-(void)didMaskButtonSender:(id)sender;
@end

@interface QQPushBannerView_AvatarSettingGuide : QQPushBannerView {
}
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
-(void)didConnectButtonSender:(id)sender;
@end

@interface QQPushBannerView_QRCodeLogin : QQPushBannerView {
}
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
-(void)didCloseButtonClicked;
-(void)didPushBannerClicked;
@end

@interface QQRecentController : QQSearchBaseViewController <ZebraViewControllerDelegate, UITableViewDelegate, UIActionSheetDelegate, UIAlertViewDelegate, UIWebViewDelegate, SimpleAlertViewExDelegate, SimpleAlertViewDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, QQNetWorkTipsViewDelegate, PushBannerViewDelegate, IQSContactsEngineObserver, QQPopMenuDelegate> {
	QQMessageView* _messageView;
	NSTimer* refrushTimer1;
	NSMutableArray* addAccountDropdownItems;
@private
	SimpleAlertView* _alert;
	BOOL _checkClearAccount;
	UIButton* _accountsButton;
	BOOL _needShowNetworkTip;
	BOOL _userClosedAdPushbanner;
	NSTimer* _adPushbannerAlterTimer;
	NSTimer* _adPushbannerPeriodTimer;
	UIImageView* _connectAnimation;
	UILabel* _connectView;
	UIView* _unConnectView;
	BOOL _animationing;
	CABasicAnimation* coreanniamtion;
	int _adPushbannerIndex;
	int _curHour;
	BOOL _isDelayShowMessage;
	int _RDMEventReg;
	BOOL _uiNetworkStateSuccess;
	BOOL _contactsBindingInfoSuccess;
	ODRefreshControl* _refreshControl;
	QQPopMenu* _popupMenu;
	BOOL _isZebraOpen;
	NSDate* _lastestAppearDate;
	BOOL _isShow;
	QQFriendSelectedViewController* _friendSelectedViewCtr;
	UITextField* _preloadKeyBoard;
}
-(void)refreshTimeOut;
-(void)refreshFinish;
-(void)refreshToGetMessage;
-(void)notifyUpdateBindingInfo:(id)info;
-(void)notifyUpdateUnreadRecommendedContacts;
-(void)clearPushbannerIndex:(id)index;
-(void)stopAdPushbannerPeriodTimer;
-(void)startAdPushbannerPeriodTimer;
-(void)updateAdPushbannerPeriod;
-(void)updateNeedShowPushbanner;
-(void)resetAdPushbannerStatus;
-(void)stopAdPushbannerAlterTimer;
-(void)startAdPushbannerAlterTimer;
-(void)showFeedBackView;
-(void)alterAdPushbanner;
-(int)getVailableIndex:(int)index inIndexs:(id)indexs;
-(void)didPushBannerDismiss:(id)dismiss;
-(void)didCheckPushBannerViewButton:(id)button;
-(void)didCheckPushBannerView:(id)view bannerIndex:(int)index;
-(void)openUrl:(id)url;
-(void)dissmissNetWorkErrorTips:(id)tips;
-(void)showNetWorkErrorTips:(id)tips;
-(void)QQNetWorkTipsView:(id)view didTouchedWithParam:(id)param;
-(void)QQNetWorkTipsView:(id)view didSelectedCheckButton:(id)button;
-(void)dealloc;
-(void)revertEditState;
-(void)didReceiveMemoryWarning;
-(void)showGuideWindow:(id)window;
-(void)restoreData;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)isDateChanged;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)dismissZebraOnMainThread;
-(void)dismissZebra;
-(void)zebraViewController:(id)controller didFinishWithImage:(id)image exifInfomation:(id)infomation assetURL:(id)url error:(id)error;
-(void)zebraViewControllerDidCancel:(id)zebraViewController;
-(void)doSelected:(id)selected filePath:(id)path;
-(void)createDiscussGroupAction:(id)action;
-(void)reloadAppearance;
-(void)repeatClickBottomTab;
-(void)viewDidUnload;
-(void)hidePreloadKeyboard:(id)keyboard;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)StopConnectAnimationFinish;
-(void)StopConnectAnimation;
-(void)StartConnect;
-(void)StopConnect;
-(void)StartConnectTimer;
-(void)ConnectAction;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)dragViewDidBeginRefresh;
-(void)loadView;
-(void)createImageRightButton:(id)button action:(SEL)action;
-(void)showPopupMenu;
-(void)didMenuClick:(int)click;
-(void)preloadKeyboard;
-(id)GetCurrentTitle;
-(void)UpdateViewTitle:(id)title;
-(void)UpdateNetworkState:(id)state;
-(void)viewDidAppear:(BOOL)view;
-(void)initFaceKeyboards;
-(void)popViewControllerWithAccountLogout;
-(void)refreshRichMessageState:(id)state;
-(void)refreshMessageSendState:(id)state;
-(void)BackForegroundNotification:(id)notification;
-(void)EnterBackgroundNotification:(id)notification;
-(id)init;
-(void)LogoutNotification;
-(void)LoginSuccessNotification;
-(void)onAvatarGuideBannerShowed:(id)showed;
-(void)UpdatePushbannerPicture:(id)picture;
-(void)UpdatePushbannerStatus:(id)status;
-(void)UpdatePushbannerWithAnimated:(BOOL)animated;
-(BOOL)isAdvertisementPushBannerNeedToShow;
-(void)reFrushSubViewControllerLeftButtonTitle;
-(void)delayActionGetQQMessage;
-(void)reloadTableData;
@end

@interface ProgressIndicator : UIView {
	UIActivityIndicatorView* progress;
	UILabel* statusLabel;
}
-(void)setInprogress:(BOOL)inprogress;
-(void)updateText:(id)text;
-(void)updateFrame:(CGRect)frame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andText:(id)text centerAlign:(BOOL)align;
-(void)updateLabelTextColor;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFriendAddTypeModel : NSObject {
@private
	int addTypeSourceID;
	int addTypeSourceSubID;
	NSString* addTypeGroupName;
	NSString* addTypeGroupNickName;
	long long groupCode;
}
@property(assign, nonatomic) long long groupCode;
@property(retain, nonatomic) NSString* addTypeGroupNickName;
@property(retain, nonatomic) NSString* addTypeGroupName;
@property(assign, nonatomic) int addTypeSourceSubID;
@property(assign, nonatomic) int addTypeSourceID;
-(void)dealloc;
-(id)initWithSourceID:(int)sourceID sourceSubId:(int)anId;
@end

@interface MessageCollectorUI : UITableView <QIMTextInputDelegate, UITextFieldDelegate, UITableViewDelegate, UITableViewDataSource, UITextViewDelegate> {
	NSMutableArray* questions;
	NSMutableArray* answers;
	CGRect keyboardRect;
	CGRect oldFrame;
	id<UITextFieldDelegate> delegate;
	BOOL newlyOpen;
	unsigned indices[2];
	BOOL isAddGroup;
	BOOL _viewDidAppeared;
}
@property(assign, nonatomic) BOOL viewDidAppeared;
@property(assign, nonatomic) BOOL isAddGroup;
@property(retain, nonatomic) NSMutableArray* questions;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)GetHeightOfIndexPath:(id)indexPath;
-(id)getMessage;
-(id)getOldMsg;
-(void)saveMsg:(id)msg;
-(id)init:(CGRect)init settingDict:(id)dict textFieldDelegate:(id)delegate isGroupAdd:(BOOL)add;
-(void)dealloc;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)deregisterNotifications;
-(void)keyboardHide;
-(void)registerNotifications;
-(void)delayBecomeFirstResponder:(id)responder;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textViewDidEndEditing:(id)textView;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)makeInputFieldVisible;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)textEditingChange:(id)change;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textViewTextDidChangeNotification:(id)textViewText;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface AddFriendSendMessageViewController : QQViewController <UITextFieldDelegate, GetTroopRemarkProtocol> {
	NSString* friendUin;
	NSDictionary* settingDict;
	UIViewController* myRootViewController;
	ProgressIndicator* myIndicator;
	UIView* msgCollector;
	int adduinsetting;
	BOOL _isSendRequest;
	BOOL _isAddGroup;
	BOOL _isAddContactFri;
	NSString* _mobilePhone;
	QQSystemMessageModel* _msgModel;
	NSTimer* _timer;
	BOOL _viewAppeared;
	QQFriendAddTypeModel* _friendAddTypeModel;
	ContactModel* _contactModel;
	UIViewController* _parentVC;
	BOOL _bLayout;
	int _cGroupSourceID;
}
@property(retain, nonatomic) QQFriendAddTypeModel* friendAddTypeModel;
@property(retain, nonatomic) QQSystemMessageModel* msgModel;
@property(retain, nonatomic) NSString* mobilePhone;
@property(assign, nonatomic) BOOL isAddContactFri;
@property(assign, nonatomic) BOOL isSendRequest;
-(id)initWithAddGroup:(id)addGroup rootController:(id)controller GroupSourceID:(int)anId;
-(id)StartAddFriendByMobilePhone:(id)phone parentViewController:(id)controller rootViewController:(id)controller3 contactModel:(id)model;
-(void)GetMemberRemarkNotify:(id)notify list:(id)list;
-(void)requestTroopRemark:(long long)remark;
-(id)StartAddFriendByUinOptimize:(id)optimize parentViewController:(id)controller rootController:(id)controller3 settingDict:(id)dict;
-(void)delayShowSearchAddUin:(id)uin;
-(void)onPacketError:(id)error;
-(void)DisplayAddFriendSetting:(id)setting;
-(void)ActionJoinGroupResult:(id)result;
-(void)ShowSearchAddUin:(id)uin;
-(void)popToTopViewController;
-(void)actionContactFriendAddNotification:(id)notification;
-(void)onTimeout;
-(void)showFriendRemarkViewForNextStepWithSigData:(id)sigData;
-(void)sendAddFriendRequest;
-(void)sendAddGroupRequest;
-(void)onClickSendButton:(id)button;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)rightButtonClick:(id)click;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)setTitle:(id)title;
-(void)layoutUI:(id)ui;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)showDenyAllUI;
-(void)showAnswerQuestionUI;
-(void)showInputVerificationMsgUI;
-(void)showAllowAllUI;
-(void)refeshFriendList;
-(void)ActionDisplayAddFriendResponse:(id)response;
-(void)ActionDisplayAddFriendSetting:(id)setting;
-(void)requstTimeOut:(id)anOut;
-(void)startTimer;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(void)ActionOnGetUserSetting:(id)setting;
@end

@interface AddFriendViewController : QQViewController <QIMTextInputDelegate, UITextFieldDelegate> {
	BOOL isInprogress;
	NSString* _uin;
	NSString* _searchUin;
	UITextField* inputField;
	UIButton* btnSearch;
	UIActivityIndicatorView* progress;
	UILabel* statusLabel;
	UIViewController* myRootViewController;
	ProgressIndicator* myIndicator;
	AddFriendSendMessageViewController* _sendMessageViewController;
	UILabel* tipsMsg;
	int _controllerType;
	int _reqSummarySeqID;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* sendMessageViewController;
@property(retain, nonatomic) NSString* searchUin;
@property(retain, nonatomic) NSString* uin;
-(void)ActionOnExchangeUinResult:(id)result;
-(void)onResponseSummaryNotification:(id)notification;
-(void)onStartAddFriendTimeOut;
-(void)onExchangeUinTimeout;
-(void)onTimeout;
-(BOOL)textFieldShouldClear:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)onClickAddButton:(id)button;
-(void)requestSearchFriendModel:(id)model;
-(void)refeshFriendList;
-(void)onClickSearchButton:(id)button;
-(void)searchForGroups:(id)groups;
-(void)startSearch;
-(void)setInprogress:(BOOL)inprogress;
-(void)viewDidLoad;
-(void)reloadAppearance;
-(void)restoreData;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)ActionDisplayAddFriendResponse:(id)response;
-(void)ActionDisplayAddFriendSetting:(id)setting;
-(void)ActionOnCheckFriendResult:(id)result;
-(void)ActionDisplayFriendDetailVew:(id)vew;
-(void)ActionSearchGroupResult:(id)result;
-(void)pushQQGroupProfileViewController:(id)controller GroupSourceID:(int)anId;
-(void)ActionKeyWordsSearchGroupResult:(id)result;
-(int)getControllerType;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)addObserver;
-(id)initWithUin:(id)uin rootController:(id)controller ControllerType:(int)type;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface QQTipsBottomLineView : UIView {
}
-(void)drawRect:(CGRect)rect;
@end

@interface AnswerAddBuddyRequestHeaderView : UIView <QQUIDelegate> {
	NSString* _buddyUin;
	NSString* _sex;
	NSString* _age;
	NSString* _name;
	NSString* _head;
	NSString* _msg;
	NSString* _headNO;
	NSString* _mobilePhone;
	NSString* _province;
	NSString* _msgSource;
	NSString* _msgSourceDesc;
	UserInfoHead* _headView;
	UserInfoItem* _msgItem;
	UserInfoItem* _sourceItem;
	UserInfoItem* _sourceDescItem;
	id controller;
	float _height;
	int _maxRows;
}
@property(assign, nonatomic) id controller;
@property(retain, nonatomic) NSString* msgSourceDesc;
@property(retain, nonatomic) NSString* msgSource;
@property(retain, nonatomic) NSString* province;
@property(retain, nonatomic) NSString* mobilePhone;
@property(retain, nonatomic) NSString* headNO;
@property(retain, nonatomic) NSString* msg;
@property(retain, nonatomic) NSString* head;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* age;
@property(retain, nonatomic) NSString* sex;
@property(retain, nonatomic) NSString* buddyUin;
-(void)portaitIconCtrlClicked;
-(id)initWithFrame:(CGRect)frame uin:(id)uin msg:(id)msg mobilePhone:(id)phone contactMsg:(id)msg5;
-(void)updateWithName:(id)name sex:(id)sex age:(id)age head:(id)head city:(id)city source:(id)source desc:(id)desc;
-(id)getRowBackgroundImage:(int)image;
-(id)initWithFrame:(CGRect)frame uin:(id)uin msg:(id)msg mobilePhone:(id)phone city:(id)city source:(id)source desc:(id)desc;
-(void)onQQUIControlTouchCancelled;
-(void)onQQUIControlTouchMove;
-(void)onQQUIControlTouchUp;
-(void)onQQUIControlTouchDown;
-(void)onHeadClicked;
-(void)updateWithName:(id)name sex:(id)sex age:(id)age head:(id)head contactMsg:(id)msg;
-(int)calculateHeight;
-(void)dealloc;
@end

@interface TableViewCellWithSectionIndicator : UITableViewCell {
	UIImageView* indicator;
	UILabel* selectionLabel;
	BOOL _lastCell;
	BOOL _highlighted;
}
@property(assign, nonatomic, getter=isHighlighted) BOOL highlighted;
@property(assign, nonatomic) BOOL lastCell;
@property(retain, nonatomic) UILabel* selectionLabel;
@property(retain, nonatomic) UIImageView* indicator;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface AnswerAddBuddyRequestTableView : UITableView <QIMTextInputDelegate, UITableViewDelegate, UITableViewDataSource, UITextFieldDelegate> {
	AnswerAddBuddyRequestHeaderView* headerView;
	UIImageView* selectionAcceptAndAdd;
	UIImageView* selectionAccept;
	UIImageView* selectionDeny;
	UILabel* nameLabel;
	UILabel* sexAgeLabel;
	UILabel* uinLabel;
	UIImageView* iconView;
	UITextField* reasonField;
	CGRect _originRect;
	int selectedRow;
	TableViewCellWithSectionIndicator* selectedCell;
	AnswerAddBuddyRequestController* controller;
	id _object;
	SEL _sel;
	int _maxNumber;
	NSString* _moblilePhone;
	QQSystemMessageModel* _model;
	NSString* _fromUin;
	float heightTableFoot;
	BOOL _isRefused;
@private
	NSString* _mobilePhone;
}
@property(retain, nonatomic) NSString* fromUin;
@property(retain, nonatomic) QQSystemMessageModel* model;
@property(retain, nonatomic) UILabel* nameLabel;
@property(retain, nonatomic) NSString* mobilePhone;
@property(readonly, assign, nonatomic) int maxNumber;
@property(retain, nonatomic) AnswerAddBuddyRequestHeaderView* headerView;
@property(retain, nonatomic) UITextField* reasonField;
@property(assign) BOOL isRefused;
@property(assign) int selectedRow;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(id)createHeaderView:(CGRect)view;
-(void)addObject:(id)object forSel:(SEL)sel;
-(unsigned)GetMaxNumberFor:(id)aFor;
-(void)reloadData;
-(id)CreateTableFootViewForHeight:(float)height;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame buddyUin:(id)uin sex:(id)sex age:(id)age name:(id)name msg:(id)msg mobilePhone:(id)phone controller:(id)controller;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface AnswerAddBuddyRequestController : QQViewController <UIActionSheetDelegate, QQAearXMLParserDelegate> {
	QQSystemMessageModel* model;
	NSString* fromUin;
	NSString* msg;
	NSString* _city;
	AnswerAddBuddyRequestTableView* answerAddBuddyRequestView;
	ProgressIndicator* indicator;
	UILabel* resultLabel;
	int state;
	CGRect oldFrame;
	CGRect keyboardRect;
	NSTimer* timer;
	NSString* _mobilePhone;
	QQAearXMLParser* _xmlParser;
	BOOL _bRefused;
}
@property(assign, nonatomic) BOOL bRefused;
@property(retain, nonatomic) NSString* city;
@property(retain, nonatomic) QQSystemMessageModel* model;
-(void)reportingIllegalDone:(id)done;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)gotoContactGuideAction:(id)action;
-(void)JubaoAction:(id)action;
-(void)timeout;
-(void)refeshNewFriend;
-(void)rightButtonClick:(id)click;
-(void)didTableSelected:(id)selected;
-(void)viewDidUnload;
-(void)onPortaitIconCtrlClicked;
-(void)reloadAppearance;
-(void)onAnswerRejectContactFriendResponse:(id)response;
-(void)onAnswerAddedContactFriendResponse:(id)response;
-(void)onAnswerAddedFriendResponse:(id)response;
-(void)sendRecentMsgModel;
-(void)onProfileFetched:(id)fetched;
-(void)popQQController:(BOOL)controller;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(id)initWithMsgModel:(id)msgModel;
-(void)deregisterNotifications;
-(void)registerNotifications;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
@end

@interface QQWaitUpdataFriendListController : QQViewController <QQAearXMLParserDelegate> {
	AnswerAddBuddyRequestHeaderView* _headView;
	QQSystemMessageModel* _model;
	NSString* _fromUin;
	NSString* _content;
	NSString* _city;
	BOOL _updataEnd;
	UIActivityIndicatorView* _progressView;
	UILabel* _infoLabel;
	UIButton* _sendMsgButton;
	NSTimer* _waitTimer;
	QQAearXMLParser* _xmlParser;
}
@property(retain, nonatomic) NSString* city;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* fromUin;
@property(retain, nonatomic) QQSystemMessageModel* model;
-(void)waitTimerOut:(id)anOut;
-(void)actionSend:(id)send;
-(void)updataEnd:(id)end;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)initWith:(id)with;
@end

@interface QQGroupAddSettingCell : UITableViewCell {
	UIImageView* _indicator;
	UILabel* _selectionLabel;
	BOOL _lastCell;
	BOOL _highlighted;
	BOOL _canSelect;
	BOOL _topCell;
}
@property(assign, nonatomic) BOOL topCell;
@property(assign, nonatomic) BOOL canSelect;
@property(assign, nonatomic, getter=isHighlighted) BOOL highlighted;
@property(assign, nonatomic) BOOL lastCell;
@property(retain, nonatomic) UILabel* selectionLabel;
@property(retain, nonatomic) UIImageView* indicator;
-(void)layoutSubviews;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)dealloc;
-(void)setFrame:(CGRect)frame;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQReAddGroupController : QQViewController <UITableViewDelegate, UITableViewDataSource> {
	QQSystemMessageModel* _msgModel;
	NSString* _actionNick;
	NSString* _groupMainRefuseDes;
	NSString* _refuseReason;
	NSString* _groupCode;
	NSString* _groupMainUin;
	NSString* _groupNick;
	NSString* _groupMainNick;
	UIScrollView* _bgScrollView;
	UserInfoHead* _headView;
	UserInfoItem* _msgItem;
	UIButton* _btn1;
	UIButton* _btn2;
	UILabel* _refuseLabel;
	int _ctrlType;
	int _cOp;
	NSString* _auth;
	int reqType;
	int _handled;
	BOOL _bRefused;
	AddFriendSendMessageViewController* _addFriend;
@private
	QQSystemMessageModel* msgModel;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriend;
@property(assign, nonatomic) BOOL bRefused;
@property(retain, nonatomic) NSString* auth;
@property(retain, nonatomic, setter=setMessageModel:) QQSystemMessageModel* msgModel;
-(void)actionTouchKey:(id)key;
-(void)requestAddGroupTwice:(id)twice;
-(void)addTwiceInvGroup:(id)group;
-(void)sendRequest:(id)request;
-(void)actionTouchGroupHead;
-(void)sendMsg:(id)msg;
-(void)onTimeout;
-(void)ActionRequestRefuseSomebodyJoinToGroup:(id)group;
-(void)ActionRequestAgreeSomebodyJoinToGroup:(id)group;
-(void)ActionRequestRefuseJoinToGroup:(id)group;
-(void)ActionRequestAgreeJoinToGroup:(id)group;
-(void)viewDidUnload;
-(void)actionButton:(id)button;
-(void)clickHeadController:(int)controller;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQGroupAddTipsView : UIView {
	QQMutableDrawText* _content;
	id _object;
	SEL _sel;
}
@property(retain, nonatomic) QQMutableDrawText* content;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)addTarget:(id)target withSel:(SEL)sel;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface HttpEngine : NSObject {
	NSMutableData* receivedData;
	long totalLength;
	char* pStr;
	id iOwner;
	long length;
	CGrpImageProtocolPackager* m_pProtocolPackager;
	int m_nStatus;
	bool m_bIsFirstRequest;
	stHttpPostRedirect m_stPostRedirect;
	stHttpPostRedirectRsp m_stPostRedirectRsp;
	char* m_pSendBuf;
	int m_nSendBufLen;
	unsigned short m_nSeq;
	char* m_pBolckBuf;
	unsigned short m_wBlockSize;
	unsigned long m_dwFileID;
	unsigned short m_wBlockIndex;
	unsigned short m_wBlockMaxIndex;
	char* m_totalImgBuffer;
	int m_nCommandType;
	unsigned m_nGroupCode;
	unsigned m_nGroupUin;
	BOOL m_isDiscussGroup;
	NSString* m_uuid;
	int m_datalen;
	int m_msgTime;
	BOOL b_Close;
	unsigned short m_nFileType;
	BOOL isFinished;
	unsigned uuidSeq;
	unsigned uDuration;
	int _bodyType;
	unsigned _appShareID;
	NSString* _attachedMsg;
	NSString* _actionUrl;
	NSTimer* _timer;
	int _failRetryCount;
	int _startTime;
	NSURLConnection* _httpPostConection;
	int _postStage;
	int m_sendSeq;
	int _msgId;
@private
	BOOL isGif;
}
@property(assign, nonatomic) int msgId;
@property(assign, nonatomic) int failRetryCount;
@property(assign, nonatomic) unsigned long dwFileID;
@property(assign, nonatomic) int sendSeq;
@property(assign, nonatomic) BOOL isDiscussGroup;
@property(assign, nonatomic) unsigned groupUin;
@property(assign, nonatomic) unsigned groupCode;
@property(assign) BOOL isGif;
@property(retain, nonatomic) NSString* actionUrl;
@property(retain, nonatomic) NSString* attachedMsg;
@property(assign, nonatomic) unsigned appShareID;
@property(retain, nonatomic) NSURLConnection* httpPostConection;
@property(assign, nonatomic) unsigned short fileType;
@property(assign, nonatomic) int bodyType;
@property(assign, nonatomic) unsigned uDuration;
@property(assign, nonatomic) unsigned uuidSeq;
@property(assign) BOOL isFinished;
@property(assign, nonatomic) int dataLen;
@property(assign, nonatomic) int msgTime;
@property(copy, nonatomic) NSString* uuid;
@property(assign) BOOL b_Close;
-(id).cxx_construct;
-(void)dealloc;
-(void)recordFlowBytes:(long long)bytes;
-(void)ParseData:(char*)data leng:(int)leng;
-(void)RetrySend;
-(float)getGroupPicUploadProcess;
-(void)UpdateDiscussSendState:(BOOL)state isRetrySend:(BOOL)send errorDesc:(id)desc failCode:(int)code;
-(void)DelaySendAttachMsg:(id)msg;
-(void)OnTransFileSuccess;
-(void)PostFileDataCmd;
-(void)PostFileCmd;
-(void)timeOut;
-(void)PostRedirectURL:(unsigned)url isDiscussGroup:(BOOL)group;
-(void)cancelUpload;
-(void)setGroupUploadHost:(vector<GroupPic::HostInfo, std::allocator<GroupPic::HostInfo> >*)host;
-(id)convertIp:(unsigned)ip;
-(const char*)getFileHash;
-(const char*)getHashFileName;
-(void)initPostParam;
-(void)initUploadData:(id)data;
-(void)intData:(id)data;
-(void)intFileData:(id)data;
-(void)GetImageWithUrl:(id)url;
-(void)PostImage:(id)image postData:(id)data;
-(int)getHttp:(id)http aUrl:(id)url;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)Setb_Close:(BOOL)close;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)init;
@end

@interface GetTroopMemberManager : NSObject {
	NSTimer* _timer;
	NSMutableArray* _GroupArray;
	int _dwIndex;
	int _repeatCount;
	BOOL _saved;
	id<GetTroopMemberProtocol> _delegate;
	id<GetTroopRemarkProtocol> _remarkDelegate;
	NSMutableDictionary* _GroupCodeDic;
	NSMutableDictionary* _refreshingGroupMemStatusDic;
	BOOL _running;
	int _autoSeq;
	int _manualSeq;
}
@property(assign, nonatomic) BOOL running;
@property(assign, nonatomic) int dwIndex;
@property(assign, nonatomic) id<GetTroopRemarkProtocol> remarkDelegate;
@property(assign, nonatomic) id<GetTroopMemberProtocol> delegate;
@property(retain, nonatomic) NSMutableDictionary* GroupCodeDic;
@property(retain, nonatomic) NSMutableArray* GroupArray;
+(id)GetInstance;
-(void)changeAccount;
-(id)getTroopMemModel:(id)model :(id)arg2;
-(void)enterBackGround;
-(void)stopGetTroopMember;
-(void)ReGetTimeOut:(id)anOut;
-(void)ActionReGetTroopMember:(id)member;
-(void)ActionRefreshTroopMemberStatus:(id)status;
-(void)ActionRefreshTroopMemberStatusFinish:(id)finish GroupStatusDicionary:(id)dicionary;
-(void)RefreshTroopMemberStatus:(id)status;
-(void)ReGetTroopMember:(id)member;
-(void)getTroopMemberByGroupCode:(id)code;
-(void)getAllTroopMember;
-(void)getAllTroopMemberAfterDelay:(double)delay;
-(void)getAllTroopMemberFromDB;
-(void)timeOut;
-(void)Action:(id)action;
-(void)start;
-(void)startAfter:(double)after;
-(void)dealloc;
-(id)init;
@end

@interface GetTroopRemarkManager : NSObject {
	NSTimer* _timer;
	NSMutableArray* _array;
	int _dwIndex;
	int _repeatCount;
	id<GetTroopRemarkProtocol> _delegate;
	NSMutableDictionary* _GroupRemarkDic;
	int _autoSeq;
	int _manuSeq;
}
@property(assign, nonatomic) int dwIndex;
@property(assign, nonatomic) id<GetTroopRemarkProtocol> delegate;
@property(retain, nonatomic) NSMutableArray* array;
+(id)GetNeedTroopRemarkList;
+(id)GetInstance;
-(void)changeAccount;
-(void)enterBackGround;
-(void)ReTimeOut;
-(void)ActionReGetTroopRemark:(id)remark;
-(void)ActionGetMemberRemark:(id)remark;
-(void)getMemberRemark:(id)remark groupCode:(id)code groupUIN:(long long)uin;
-(void)ReGetTroopRemark:(id)remark;
-(void)stopGetTroopRemark;
-(void)getAllRemarkInOperationQueue;
-(void)getRemarkByGroupCode:(id)code;
-(void)getAllRemark;
-(void)getAllRemarkAfterDelay:(double)delay;
-(void)timeOut;
-(void)Action:(id)action;
-(void)start;
-(void)dealloc;
-(id)init:(id)init;
-(id)init;
@end

@interface GroupMemView : UITableView <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate> {
	QQEngine* reqEngine;
	NSArray* _sectionArray;
	NSArray* _fullSectionIndexTitles;
	NSArray* _existSectionIndexTitles;
	BOOL _isShowSectionIndexTitles;
	NSArray* _headerViewArray;
	NSString* pGroupCode;
	NSMutableDictionary* pCellArray;
	UIViewController* pushContol;
	ODRefreshControl* _odRefreshControl;
	NSMutableArray* fliterArray;
	BOOL _isSearching;
	BOOL memberDeleted;
	AddFriendSendMessageViewController* addFriendVC;
}
@property(assign, nonatomic) BOOL isSearching;
@property(assign, nonatomic) BOOL memberDeleted;
@property(retain, nonatomic) NSMutableArray* fliterArray;
@property(retain, nonatomic) NSArray* sectionArray;
@property(retain, nonatomic) NSString* pGroupCode;
-(void)endRefreshWithResult:(BOOL)result;
-(void)setHeaderViewLoading:(BOOL)loading;
-(void)dropViewDidBeginRefreshing:(id)dropView;
-(BOOL)isRefreshControlLoading;
-(void)filterContentForSearchText:(id)searchText;
-(id)fliterLikeWord:(id)word;
-(void)AddFriendFailed:(id)failed;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)viewWillDisappear:(BOOL)view;
-(void)ActionRemoveFromGroupRespond:(id)groupRespond;
-(void)dealloc;
-(id)_sectionNameOfMember:(id)member;
-(void)_removeMemberModelFromSectionArray:(id)sectionArray;
-(id)_memberModelForRowAtIndexPath:(id)indexPath;
-(void)_setMemberStateToAllMembersInArray:(id)array;
-(void)_setShowNameToAllMembersInArray:(id)array;
-(void)_regenerateSectionArrayFromMemberArray:(id)memberArray;
-(BOOL)ReloadMemList;
-(void)setPushContr:(id)contr;
-(id)initWithFrame:(CGRect)frame GroupCode:(id)code;
@end

@interface GroupMemViewController : QQSearchBaseViewController <GetTroopMemberProtocol, GetTroopRemarkProtocol> {
	GroupMemView* pView;
	BOOL dataLoaded;
	BOOL isRefreshing;
	NSTimer* timer;
	UIImageView* contentBgImageView;
	UIImageView* shadowImageView;
	UIButton* tButton;
	QQGroupSettingModel* model;
	unsigned long long _refreshPopTime;
}
@property(retain, nonatomic) QQGroupSettingModel* model;
@property(readonly, assign, nonatomic) BOOL isRefreshing;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)delayEndRefreshing:(BOOL)refreshing;
-(void)endRefreshWithResult:(BOOL)result;
-(void)timeOut;
-(void)ReGetTroopRemarkNotify:(id)notify;
-(void)ActionFinishRefreshTroopMemberStatus:(id)status;
-(void)ActionGetTroopMember:(id)member result:(BOOL)result;
-(void)freshMemList:(id)list;
-(void)clickBack:(id)back;
-(void)editGroupMember;
-(void)groupMemberRemarkNotification;
-(void)dealloc;
-(void)restoreData;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(id)init;
@end

@interface GroupCellControl : UIControl {
	id<GroupCellControlTouchDelegate> _touchObject;
}
@property(assign, nonatomic) id<GroupCellControlTouchDelegate> touchObject;
-(void)dealloc;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface QQGroupViewGroupCell : QQView <GroupCellControlTouchDelegate> {
	unsigned group;
	BOOL isExpand;
	GroupCellControl* groupHeaderView;
	UIImageView* headerBackgroundImageView;
	UIImageView* expandIndictorImageView;
	UIImageView* headerImageView;
	UILabel* headerTextLabel;
	UILabel* headerCountLabel;
	float headerHeight;
	UIView* contentView;
	UIImageView* _shadowImageView;
	BOOL isDisplayCountBg;
	UIImageView* _countBgView;
	UIButton* _tipBtn;
	id target;
	SEL sel;
}
@property(assign) SEL sel;
@property(assign) id target;
@property(retain, nonatomic) UIButton* tipBtn;
@property(retain, nonatomic) UILabel* headerCountLabel;
@property(retain, nonatomic) UIView* contentView;
@property(retain, nonatomic) UILabel* headerTextLabel;
@property(retain, nonatomic) UIImageView* headerImageView;
@property(retain, nonatomic) UIImageView* expandIndictorImageView;
@property(retain, nonatomic) UIImageView* headerBackgroundImageView;
@property(assign, nonatomic) BOOL isDisplayCountBg;
@property(assign, nonatomic) BOOL isExpand;
@property(assign) float headerHeight;
@property(assign, nonatomic) unsigned group;
-(void)dealloc;
-(void)higlightedBg:(BOOL)bg;
-(void)layoutSubviews;
-(void)didAnimationEnd;
-(void)setExpand;
-(void)addTarget:(id)target withSelector:(SEL)selector;
-(id)initWithGroup:(unsigned)group target:(id)target selector:(SEL)selector;
@end

@interface QQOnlineMode : QQModel {
	NSString* _title;
	NSString* _imageIcon;
	BOOL _isSelected;
	int _index;
}
@property(assign, nonatomic) int index;
@property(assign, nonatomic) BOOL isSelected;
@property(retain, nonatomic) NSString* imageIcon;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
-(id)init;
@end

@interface QQBaseChatViewController : QQViewController <UITextFieldDelegate, UIActionSheetDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, UIDocumentInteractionControllerDelegate, MFMailComposeViewControllerDelegate, QQChatViewTableDelegate, QQTextFieldDelegate, QQDoodleSendDelegate, SimpleAlertViewDelegate, QQFriendSelectedViewControllerDelegate, SelectLocationDelegate, QQDoodleSendDelegate, QQRichKeyBoradDelegate, QMsgSpliteMergeProtocol, MButtonDelegate, SecretFileGuideDelegate, QC2CRoamMessageDelegate, QQFaceKeyBoardDelegate, SecretFileTipsDelegate> {
	BOOL _HaveNewMsg;
	NSTimer* _pttStartTimer;
	TQRecorderManager* voiceManager;
	UIButton* _recordButton;
	BOOL _recordBtShowed;
	NSString* _lastTimetext;
	UIImageView* btBackgroundView;
	float originHeight;
	UIActionSheet* _chatDisplayActionSheet;
	int _newArrivalMsgCount;
	NSMutableArray* msgTipsArray;
	NSString* _pluginAppName;
	int _ctrlType;
	id _leftBtnClickTarget;
	SEL _leftBtnClickSel;
	UIDocumentInteractionController* _documentInteractionController;
	double _lastReportReadTime;
	BOOL _didReceiveMemoryWarning;
	QQBaseChatModel* _chatModel;
	QQBaseChatUIOperation* _chatUIOperation;
	QQBaseChatMessage* _chatMessage;
	QQBaseChatSecretFile* _secretfile;
	QQBaseChatImage* _chatImage;
	MsgBehaviorMonitor* _msgBehaviorMonitor;
	AddFriendSendMessageViewController* _addFriendVC;
@private
	int _totalMsgCount;
	unsigned _pluginAppID;
	NSArray* _msgTmpList;
	QQMessageModel* _recordModel;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriendVC;
@property(retain, nonatomic) NSString* lastTimetext;
@property(assign, getter=isRecordBtShowed) BOOL recordBtShowed;
@property(retain, nonatomic) QQMessageModel* recordModel;
@property(retain, nonatomic) UIButton* recordButton;
@property(retain, nonatomic) NSArray* msgTmpList;
@property(assign, nonatomic) SEL leftBtnClickSel;
@property(assign, nonatomic) id leftBtnClickTarget;
@property(assign, nonatomic) int CtrlType;
@property(retain, nonatomic) NSString* pluginAppName;
@property(retain, nonatomic) UIActionSheet* chatDisplayActionSheet;
@property(assign, nonatomic) TQRecorderManager* voiceManager;
@property(assign) unsigned pluginAppID;
@property(assign) int newArrivalMsgCount;
@property(assign) int totalMsgCount;
@property(assign) BOOL HaveNewMsg;
+(void)forwardTo:(id)to fromViewController:(id)viewController;
-(void)documentInteractionControllerDidDismissOptionsMenu:(id)documentInteractionController;
-(id)documentInteractionControllerViewForPreview:(id)preview;
-(CGRect)documentInteractionControllerRectForPreview:(id)preview;
-(id)documentInteractionControllerViewControllerForPreview:(id)preview;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)onTipsButtonClicked:(id)clicked;
-(void)onGuideButtonClicked:(id)clicked;
-(void)cellDidTapped:(id)cell onKeyBoard:(id)board;
-(void)showSecretFileGuideView:(id)view;
-(void)startdownSecretFileTouch:(id)touch;
-(void)showSecretFileTipsView;
-(void)didTouchRichKeyBorad:(id)borad selected:(id)selected forEvent:(id)event;
-(void)NotifySelectLocation:(XXStruct_zYrK5D)location address:(id)address;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)sendDoodleImage:(id)image;
-(void)faceManageAction;
-(void)sendCustomFace:(id)face data:(id)data;
-(BOOL)QQTextField:(id)field didSendText:(id)text showText:(id)text3;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)autoPushBackMsgTouch:(id)touch;
-(id)messageModelFromCellModel:(id)cellModel;
-(void)_doDeleteMessageModel:(id)model;
-(void)deleteMessageModel:(id)model;
-(void)downLoadC2COfflineImg:(id)img;
-(void)forwardTo:(id)to;
-(void)saveImgToAlbum:(id)album;
-(void)addSelfImage:(id)image;
-(void)doodleImg:(id)img;
-(void)tableCallPopViewController:(id)controller;
-(void)didSelectSystemNotificationCell:(id)cell;
-(void)tableViewDidTouchMoreCell;
-(void)tableViewDidTouchRecordAtIndexPath:(id)tableView;
-(void)sendVideoTouch:(id)touch;
-(void)tableViewDidScroll;
-(void)tableViewImageModelDidTouch:(id)tableViewImageModel;
-(void)didSelectIDNumber:(id)number;
-(void)didSelectLongNumber:(id)number;
-(void)didSelectQQNumber:(id)number;
-(void)didSelectEmail:(id)email;
-(void)UITableViewDidTouch:(id)uitableView withEvent:(id)event;
-(BOOL)secretOnPreview;
-(void)sendMarketFaceMsg:(id)msg;
-(void)updateMessage:(id)message;
-(void)adjustTable;
-(void)ActionSecretFile;
-(void)voiceModelView;
-(void)stopRecord;
-(void)ChangeRecordButtonToTextButton;
-(void)didCell:(id)cell forModel:(id)model;
-(void)sendAlbumPicturesWithSize:(int)size;
-(void)uploadImage:(id)image;
-(void)uploadMultiImage:(id)image bodyType:(int)type;
-(id)prepareUploadMultiImage:(id)image bodyType:(int)type;
-(void)prepareUpload:(id)upload fileName:(id)name bodyType:(int)type;
-(void)resendFailMessage:(id)message;
-(void)reSendTextMsg:(id)msg;
-(void)sendReadConfirm;
-(void)SendGIFImage:(id)image data:(id)data bodyType:(int)type;
-(BOOL)sendLocationMsg:(id)msg showText:(id)text;
-(BOOL)sendTextMsg:(id)msg showText:(id)text;
-(void)imageSelected:(id)selected;
-(void)actionProfile:(id)profile;
-(void)actionSendMyLocation;
-(void)ActionDoodle;
-(void)ActionSendFile;
-(void)ActionAlbum;
-(void)ActionCamera;
-(void)actionVideo;
-(void)ActionImage;
-(void)ActionSendMessgae;
-(void)startRefresh:(id)refresh;
-(void)setTitle:(id)title;
-(void)reSetLeftButtonTitle;
-(BOOL)isSupportRightDragToGoBack;
-(void)actionPasteString:(id)string;
-(void)actionLaunchEmail:(id)email;
-(void)delayRushLoading:(id)loading;
-(void)refrushMessageSendState:(id)state;
-(void)updateMessageSeq:(id)seq;
-(void)checkSendReadConfirm;
-(void)popGroupChatAfterDelay:(id)delay;
-(void)popWithErrorSvrMsg:(id)errorSvrMsg;
-(void)showMessageTipsDelay;
-(void)didCell:(id)cell touchHeadForModel:(id)model;
-(void)didCell:(id)cell browseFileForModel:(id)model;
-(void)sendFollowGIF:(id)gif data:(id)data;
-(void)sendImageFromShare:(id)share isGroup:(BOOL)group;
-(void)sendImageData:(id)data;
-(BOOL)addMoreCell;
-(void)appendMessage:(id)message shouldReloadData:(BOOL)data shouldScrollToEndWithAnimation:(BOOL)animation;
-(void)appendMessageArray:(id)array;
-(void)appendMessage:(id)message;
-(void)sendTextFromShare:(id)share;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)QQTextFieldDidLeftButtonDown;
-(void)showMessageTips:(id)tips addTarget:(id)target action:(SEL)action;
-(id)getMyChatBgView;
-(id)getChatBgView:(id)view;
-(void)leftButtonClick:(id)click;
-(void)setCoverWithImageName:(id)imageName;
-(void)setChatViewCover;
-(void)popViewController;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)didApplicationEnterForeground:(id)foreground;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(id)GetBaseChatModel;
-(id)getChatImage;
-(BOOL)getIsGroup;
-(id)getUin;
-(id)getTextFiled;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
-(void)didMButtonTouchEvent:(int)event;
-(void)touchRecordInSide:(id)side;
-(void)touchRecordOutSide:(id)side;
-(void)showRecordBtnFristRun;
-(void)moveTableToCell:(id)cell;
-(void)scrollToCurrentPlayVoice:(id)currentPlayVoice;
-(void)refrushVoiceCellFor:(id)aFor;
-(void)reSendPTT:(id)ptt;
-(void)showTalkBar;
-(void)setVoiceChannel:(BOOL)channel;
-(BOOL)isRecording;
-(BOOL)isRunning;
-(void)performPlayPttOnThread:(id)thread;
-(void)showVoiceCellOnThread:(id)thread;
@end

@interface QQChatImageView : UIView {
	QQChatViewCell* _cell;
	UIImageView* contentImage;
	UILabel* stateLabel;
	UILabel* picSizeLabel;
	UIImage* nimage;
}
@property(retain, nonatomic) UILabel* picSizeLabel;
@property(retain, nonatomic) UILabel* stateLabel;
@property(retain, nonatomic) UIImageView* contentImage;
-(void)dealloc;
-(void)setImage:(id)image width:(float)width height:(float)height;
-(void)reNewImageView;
-(void)setFrame:(CGRect)frame;
-(void)initUI;
-(id)initWithCell:(id)cell;
@end

@interface QQChatViewInternal : UIView <QQEmotionLabelDelegate, QQImageMaskViewDelegate> {
	QQChatViewCell* _cell;
	CGRect backRect;
	CGRect nickRect;
	CGRect iconRect;
	CGRect imageRect;
	CGRect timeRect;
	NSTimer* timer;
	QQChatImageView* cellImage;
	CGSize sizeImage;
	QQAsynHeadImageView* _headView;
	QQImageMaskView* _imageMask;
	QGMapView* _mapView;
	QQEmotionLabel* _contentLabel;
	QQEmotionLabel* _contentLabel2;
	QQEmotionLabel* _nickLabel;
	UIImage* _bgImageNor;
	UIImage* _bgImageSel;
	UIActivityIndicatorView* _msgSendLoadingView;
	UIActivityIndicatorView* _faceStoreLoadingView;
	BOOL _longPressFlag;
	CGPoint _longPressPoint;
	UIColor* _nickColor;
@private
	BubbleBgInfo* _bubbleInfo;
}
@property(readonly, assign, nonatomic) QQImageMaskView* imageMask;
@property(assign, nonatomic, getter=getImageRect) CGRect imageRect;
@property(assign, nonatomic) CGRect iconRect;
@property(assign, nonatomic) CGRect nickRect;
@property(assign, nonatomic) CGRect backRect;
@property(assign, nonatomic) QQChatImageView* cellImage;
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) BubbleBgInfo* bubbleInfo;
@property(readonly, assign, nonatomic) QQEmotionLabel* contentLabel2;
@property(readonly, assign, nonatomic) QQEmotionLabel* contentLabel;
@property(retain, nonatomic) UIImage* bgImageSel;
@property(retain, nonatomic) UIImage* bgImageNor;
@property(assign, nonatomic) QQChatViewCell* cell;
@property(readonly, assign, nonatomic) QQAsynHeadImageView* headView;
@property(retain, nonatomic) UIColor* nickColor;
@property(assign, nonatomic) BOOL longPressFlag;
-(void)emotionLabelHandleLongPress:(id)press;
-(void)emotionLabelHandleIDNumber:(id)number;
-(void)emotionLabelHandlePhoneNumber:(id)number;
-(void)emotionLabelHandleQQNumber:(id)number;
-(void)emotionLabelHandleEmail:(id)email;
-(void)emotionLabelHandleUrl:(id)url;
-(void)maskViewDidRevealed:(id)maskView;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)hiddenDisplayItems;
-(void)prepareForReuse;
-(void)setHighlighted:(BOOL)highlighted;
-(void)letOtherCellRedraw;
-(void)timerCallBack;
-(void)longPressHeader;
-(void)pressCallBack:(id)back;
-(void)tapCallBack:(CGPoint)back;
-(void)LongPressCallBack:(CGPoint)back;
-(void)hideMenu;
-(void)startGifPlayer;
-(void)stopGifPlayer;
-(void)hideCellPopMenu;
-(void)copyText:(id)text;
-(BOOL)canBecomeFirstResponder;
-(void)menuButtonPressed:(id)pressed;
-(void)deleteMessage:(id)message;
-(void)msgBrowser:(id)browser;
-(void)forwardTo:(id)to;
-(void)saveImgToAlbum:(id)album;
-(void)saveimg:(id)saveimg;
-(void)doodleImg:(id)img;
-(BOOL)containsText;
-(void)showCopyMenu;
-(CGSize)GetTailInfoSize;
-(BOOL)isHeadTouch:(CGPoint)touch;
-(void)menuControllerWillHide:(id)menuController;
-(void)drawTailInfo:(CGRect)info;
-(void)drawLoadingAndFailIcon;
-(CGRect)GetFailIconRect;
-(BOOL)hasTail;
-(void)GetNickColor;
-(float)GetHeadOffset;
-(float)GetMaxWidth:(float)width height:(float)height;
-(void)drawLargeMessageInfo:(CGRect)info;
-(void)drawRect:(CGRect)rect;
-(BOOL)drawTipMessage:(CGRect)message;
-(void)loadGifView:(id)view withStringPath:(id)stringPath;
-(void)refrushMsgSendStateLoadingView;
-(void)draw;
-(void)paparePaoPao;
-(void)drawRightImageMessageMainRect:(CGRect)rect leftOffst:(int)offst cellYMargin:(int)margin cellXMargin:(int)margin4 rightOffset:(int)offset;
-(void)drawLeftImageMessageMainRect:(CGRect)rect leftOffst:(int)offst cellYMargin:(int)margin cellXMargin:(int)margin4;
-(void)drawRightMarkFaceMessageMainRect:(CGRect)rect leftOffst:(int)offst cellYMargin:(int)margin cellXMargin:(int)margin4 rightOffset:(int)offset;
-(void)drawLeftMarkFaceMessageMainRect:(CGRect)rect leftOffst:(int)offst cellYMargin:(int)margin cellXMargin:(int)margin4;
-(void)loadMarketFaceWithPackageID:(unsigned long)packageID withEmojiID:(id)emojiID withKey:(id)key withType:(int)type;
-(void)updateMarketFaceState;
-(void)onEmojiStoreEmojiDownloaded:(id)downloaded;
-(void)downloadMarketFace:(id)face;
-(void)loadMarketFaceView:(id)view withPath:(id)path;
-(void)downloadGroupImg;
-(void)downloadC2CImg;
-(void)reImageView;
-(void)handleSingleTap:(id)tap;
-(void)handleGifDecodeNotification:(id)notification;
-(id)initWithCell:(id)cell;
-(void)releaseMapView;
-(void)createMapView;
-(void)dealloc;
-(void)stopTimer;
@end

@interface QQChatViewCell : QQUITableViewCell {
	BOOL _withSelfChatting;
	BOOL _bLayout;
	BOOL clipToWords;
	int _cellSection;
	QQChatCellModel* _data;
	QQChatViewInternal* _internalView;
	float _progressBaseVal;
	double _touchTimeInterval;
}
@property(retain, nonatomic) QQChatCellModel* data;
@property(assign, nonatomic) int cellSection;
@property(assign) BOOL clipToWords;
@property(readonly, assign, nonatomic) QQChatViewInternal* internalView;
@property(assign, nonatomic) BOOL withSelfChatting;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setProgressSate;
-(void)prepareImageMaskData;
-(void)refrushMsgSendStateLoadingView;
-(void)prepareForReuse;
-(void)setNeedsLayout;
-(void)layoutSubviews;
-(void)setFrame:(CGRect)frame;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)getInterView;
-(void)dealloc;
-(void)hideMenu;
-(void)LongPressCallBack:(CGPoint)back;
-(void)voiceSetData:(id)data;
@end

@interface QQChatVideoCell : QQUITableViewCell {
	NSString* _fUin;
	NSString* _mUin;
	int _staus;
	QQChatCellModel* _model;
	id<QQChatVideCellDelegate> _videDelegate;
@private
	UIImageView* _bgImageView;
	UILabel* _nameLabel;
	UILabel* _timeLabel;
	QQAsynHeadImageView* _headIcon;
	ProgressImageStyle* _progress;
	UIImageView* _contentImage;
	UIImageView* _playIcon;
	UIImageView* _failedIcon;
	UIImageView* _recvBkgnd;
}
@property(retain, nonatomic) QQChatCellModel* model;
@property(assign, nonatomic) id<QQChatVideCellDelegate> videDelegate;
-(void)didHeadTouch:(id)touch;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)changeStatus:(int)status;
-(void)defaultCell;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQChatViewController : QQBaseChatViewController <QIMTextInputDelegate, RichMsgPreviewDialogDelegate, UIAlertViewDelegate, JKOffLineImageDelegate> {
	UIButton* _historyButton;
	UIButton* _voiceModal;
	UIButton* _cardButton;
	NSTimer* timer;
	NSTimer* processTimer;
	UIProgressView* progress;
	UIActivityIndicatorView* act;
	UIImageView* blockTips;
	NSDictionary* Imagedict;
	HeadGetImgView* Img;
	NSMutableDictionary* identDic;
	NSMutableDictionary* pGroupTmp;
	BOOL ifint;
	NSMutableArray* _uploadGroupImgArray;
	BOOL KeyBoard;
	int _displayMsgCount;
	BOOL _flagMsgBarInfoGroup;
	int _flagMsgTmp;
	NSString* _flagMsgBarValueUin;
	BOOL _isReqVideActionSheetShow;
	BOOL _supportInterfaceRote;
	UIActionSheet* sheetVideo;
	QQMessageModel* recordModel;
	BOOL bGerenalCell;
	NSString* _line1TitleStr;
	NSString* _line2TitleStr;
	UIView* _customTitleView;
	UILabel* _line1TitleLabel;
	UILabel* _line2TitleLabel;
	BOOL _isMyFriend;
	id _moviePlayer;
	BOOL _isVoiceText;
	int _sendPTTSetp;
	BOOL _rotateViewForInterfaceOrientation;
	int _currSkin;
	NSTimer* _notificationRecivePttTimer;
	QQNetWorkTipsView* _netWorkTips;
	BOOL ifShowTips;
	BOOL _isFormNSMagBar;
	QQRichMsgPreviewDialog* _richMsgPreviewDialog;
	NSMutableDictionary* _shareParam;
	NSMutableArray* _arrOnlineFile;
	UIButton* _onlineFileTip;
	UILabel* _onlineFileTipText;
	QC2CRoamMessageService* _service;
	NSString* _toSendFilePath;
@private
	BOOL playbackWasInterrupted;
	UIView* _sliderView;
	int currentPage;
}
@property(assign) BOOL ifint;
@property(assign, nonatomic) BOOL isFormNSMagBar;
@property(assign) BOOL flagMsgBarInfoGroup;
@property(assign) BOOL isVoiceText;
@property(assign) BOOL playbackWasInterrupted;
@property(assign) BOOL KeyBoard;
@property(assign) int displayMsgCount;
@property(assign) int flagMsgTmp;
@property(assign) int currSkin;
@property(assign) int currentPage;
@property(retain, nonatomic) NSString* line2TitleStr;
@property(retain, nonatomic) NSString* line1TitleStr;
@property(assign, nonatomic) int sendPTTSetp;
@property(retain, nonatomic) UIView* sliderView;
@property(retain, nonatomic) QQMessageModel* recordModel;
@property(assign, nonatomic) NSString* flagMsgBarValueUin;
@property(retain, nonatomic) HeadGetImgView* Img;
@property(retain, nonatomic) NSTimer* timer;
-(void)tableViewDidScroll;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onGroupNonexist:(id)nonexist;
-(void)onVideoRecordCompleted:(id)completed;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
-(BOOL)growingTextViewInputReturnKey:(id)key;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)ActionSelectVideoFromAlbum;
-(void)actionVideo;
-(void)sendVideoTouch:(id)touch;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)reSendTextMsg:(id)msg isLocation:(BOOL)location;
-(id)parseSendData:(id)data;
-(int)getMaxIndexofData:(char*)data length:(int)length;
-(BOOL)QQTextField:(id)field didSendText:(id)text showText:(id)text3;
-(BOOL)sendLocationMsg:(id)msg showText:(id)text;
-(BOOL)sendTextMsg:(id)msg showText:(id)text;
-(BOOL)doSendTextMsg:(id)msg showText:(id)text isLocation:(BOOL)location;
-(BOOL)textView:(id)view shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)sendMarketFaceMsg:(id)msg;
-(void)didFriendListSelected:(id)selected withFilePath:(id)filePath;
-(void)perforDelayTitle;
-(void)perforSetTitleAfterDelay:(id)delay;
-(void)pttReciveNow:(id)now;
-(void)checkShowVoiceTips;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)alertCancel:(id)cancel;
-(BOOL)isSupportRightDragToGoBack;
-(void)viewWillAppear:(BOOL)view;
-(void)cancelSendImage;
-(void)stopSendImage;
-(void)popViewController;
-(void)tableViewReSendSecretImage:(id)image;
-(void)tableViewReSendImage:(id)image;
-(void)SendGIFImage:(id)image data:(id)data bodyType:(int)type;
-(void)SendFile:(id)file;
-(void)didSelectReloadImage:(id)image;
-(void)adjustTable;
-(void)textFiledFaceBoard;
-(void)manageDiscGroup;
-(void)dismissVocieTips;
-(void)showVocieTips;
-(void)viewDidLoad;
-(void)viewDidUnload;
-(void)resetCustomTitleView;
-(void)loadView;
-(void)_removeTheBlockTipsView:(id)view;
-(void)showPopupMenu;
-(int)GetUploadGroupImgEngineSeq:(id)seq;
-(id)findUploadGroupImgEngine:(id)engine Seq:(unsigned)seq;
-(void)downLoadGroupImg:(id)img isRefresh:(BOOL)refresh;
-(void)sortByTimeAndSeq:(id)seq;
-(void)restoreData;
-(void)handleC2CRoamMessage:(id)message msgList:(id)list;
-(void)handleGroupMessage:(id)message userInfo:(id)info :(id)arg3 :(long long)arg4;
-(void)handleNoRoamMessage:(id)message userInfo:(id)info;
-(void)refreshVoiceCell:(id)cell;
-(void)reloadAppearance;
-(BOOL)getFlagValue;
-(void)updateC2COfflineMessage:(id)message;
-(id)getStatusPrompt:(int)prompt;
-(void)layoutCustomTitle;
-(void)reloadCustomTitle;
-(void)buddyStatusChange:(id)change;
-(void)resetViewControllerTitle;
-(void)needReloadChatView;
-(BOOL)Confirmation;
-(void)resetC2cMessageReadConfirm:(double)confirm;
-(void)sendReadConfirm;
-(void)dealloc;
-(id)initWithuin:(id)withuin isGroup:(BOOL)group initIndex:(int)index;
-(id)initWithuin:(id)withuin isGroup:(BOOL)group;
-(void)prepareUploadSecretImage:(int)image fileName:(id)name encryptKey:(int)key preHeadLength:(int)length bodyType:(int)type;
-(BOOL)sendSecretFileStatusMsg:(id)msg toUin:(id)uin strkey:(id)strkey status:(int)status captureTime:(int)time;
-(BOOL)dosendSecretFileStatusMsg:(id)msg toUin:(id)uin strkey:(id)strkey status:(int)status captureTime:(int)time;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
-(void)monitorProximityChanged:(id)changed;
-(void)sendOfflinePicture:(id)picture;
-(void)jkoffLineImage:(id)image finishUploadImage:(int)image2;
-(void)jkoffLineImage:(id)image finishDownloadImage:(int)image2;
-(void)setProgress:(id)progress;
-(void)dismiss;
-(void)uploadFailed;
-(void)sendUploadOfflinePictureMsg:(id)msg;
-(void)upLoadGroupImgCallback:(id)callback;
-(void)startUploadGrpImage:(id)image;
-(void)prepareUpload:(id)upload fileName:(id)name bodyType:(int)type;
-(void)uploadImage:(id)image;
-(id)prepareUploadMultiImage:(id)image bodyType:(int)type;
-(void)sendVideoFile:(id)file;
-(void)showKeyboardForVoice:(id)voice;
-(void)showKeyboard:(id)keyboard;
-(void)reuploadSecretFileTouch:(id)touch;
-(void)redownloadSecretFileTouch:(id)touch;
-(void)headIconTouch:(id)touch;
-(void)reloadTableView:(id)view;
-(void)ActionSendMessgae;
-(void)ActionRecvSvrMsg:(id)msg;
-(void)actionRecvBulletinMsg:(id)msg;
-(void)timeOut;
-(void)chatTableTouchesEnded:(id)ended withEvent:(id)event;
-(void)PostFileResendStateToRecentUI:(id)recentUI;
-(void)didCell:(id)cell forModel:(id)model;
-(void)delayToSendOfflineFile:(id)sendOfflineFile;
-(void)sendOffLineFile:(id)file fileType:(int)type;
-(void)playTipVoiceForEndRecord:(id)endRecord;
-(void)playTipVoiceForStartRecord:(id)startRecord;
-(void)videoInterruputpAudio:(id)audio;
-(void)delayStopRecord;
-(void)performActionForSendRecord:(id)sendRecord;
-(void)stopRecord;
-(void)sendRecord;
-(void)reloadVoiceCellWithUUID:(id)uuid;
-(void)prepareSaveAndUpload:(id)upload;
-(void)prapareToUpload:(id)upload;
-(void)QQVoiceRecordEnd:(id)end;
-(void)insertRecordCell:(id)cell;
-(void)perforInsertVoiceCell:(id)cell;
-(void)asyncRecord;
-(void)record;
-(void)force2Send;
-(void)QQRecordTimeOut;
-(id)currentUUID;
-(void)upDatePTTmodal:(id)tmodal;
-(void)reSendStreamPTT:(id)ptt;
-(void)upAmrFile:(id)file;
-(void)sendThirdAppShareMsg:(id)msg msg:(id)msg2;
-(void)cancelButtonClick;
-(void)sendButtonClick:(id)click msg:(id)msg;
-(void)showThirdAppForwardNotify;
-(void)handleShareToFriendNotification:(id)friendNotification;
-(void)processJSCallBack:(id)back withParamStr:(id)paramStr;
-(id)getMaxSubString:(id)string maxLength:(int)length;
-(void)unregisterShareToFriendNotifications;
-(void)registerShareToFriendNotifications;
@end

@interface QQChatViewTable : UITableView <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate> {
	QQBaseChatModel* _chatModel;
	int cellStyle;
	id<QQChatViewTableDelegate> touchDelegate;
	CGSize sizeImage;
	NSString* reSenduuid;
	NSIndexPath* _indexPath;
	id _supViewController;
	double _touchTimeInterval;
	CFFootView* _headView;
	UIFont* _timeLabelFont;
	UIFont* _securityMessageFont;
	BOOL _isoffLineMsgEnd;
	BOOL _withSelfChatting;
	BOOL _isTextFieldUp;
	BOOL _isContactsChatting;
	NSString* _mobilePhone;
	BOOL _willScrolToEnd;
	UIColor* _nickColor;
	BOOL _isPerformingReloadData;
}
@property(retain, nonatomic) UIColor* nickColor;
@property(assign, nonatomic) BOOL willScrolToEnd;
@property(retain, nonatomic) NSString* mobilePhone;
@property(assign, nonatomic) BOOL isContactsChatting;
@property(assign, nonatomic) BOOL withSelfChatting;
@property(assign, nonatomic) BOOL isoffLineMsgEnd;
@property(assign, nonatomic) id supViewController;
@property(assign, nonatomic) id<QQChatViewTableDelegate> touchDelegate;
@property(readonly, assign, nonatomic) int cellStyle;
-(void)QQXMLRichMessageCellDidSelectUrl:(id)qqxmlrichMessageCell message:(id)message model:(id)model;
-(id)GetTableDBSourcesArray;
-(void)hiddenHeadView;
-(void)setHeaderView;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(void)addObject:(id)object atIndex:(int)index;
-(void)addObject:(id)object;
-(void)insertObject:(id)object;
-(void)deleteObjects:(int)objects;
-(float)getCellHeight:(id)height;
-(float)GetChatCellModelHeight:(id)height indexPath:(id)path;
-(float)GetChatTableCellHeight:(id)height;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)setTableHeaderView:(id)view;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)setLoadStart;
-(void)setLoadFinish;
-(void)setLoadStop;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)HandleGetPluginInfoResp:(id)resp;
-(void)hiddenKeyBorad;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)didSelectActionCell:(id)cell;
-(BOOL)canScrollToEnd;
-(void)scrollToEndIfNeeded;
-(void)scrollToEnd;
-(void)scrollToTop;
-(void)setFrame:(CGRect)frame;
-(void)setContentOffset:(CGPoint)offset;
-(BOOL)touchesShouldCancelInContentView:(id)touches;
-(BOOL)touchesShouldBegin:(id)touches withEvent:(id)event inContentView:(id)contentView;
-(void)tableScroll;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)headIconTouch:(id)touch;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)deleteMessageModel:(id)model;
-(void)forwardTo:(id)to;
-(void)saveImgToAlbum:(id)album;
-(void)addSelfImage:(id)image;
-(void)doodleImg:(id)img;
-(void)didSelectReloadImage:(id)image;
-(void)didSelectIDNumber:(id)number;
-(void)didSelectLongNumber:(id)number;
-(void)didSelectQQNumber:(id)number;
-(void)didSelectEmail:(id)email;
-(void)didSelectURL:(id)url cellModel:(id)model;
-(void)didClickShareContent:(id)content;
-(void)didClickTail:(id)tail;
-(void)stopPlayPTT:(id)ptt;
-(void)showPlaceholderMsgCell:(id)cell;
-(void)deletePlaceholderMsgCell:(id)cell;
-(void)HandlePlaceholderMsgUpdate:(id)update;
-(void)insertMessageCell:(id)cell;
-(void)switchRichMediaUuid:(id)uuid;
-(void)HandleOnlineFileNotification:(id)notification;
-(void)doReloadData;
-(void)reloadDataWithFrequencyControl;
-(void)makeTotal:(id)total;
-(BOOL)isExistMsgType:(int)type;
-(void)removeDataAtIndex:(unsigned)index;
-(void)UpdateTableCell:(id)cell UUid:(id)uid;
-(void)discussNotification:(id)notification;
-(void)upDateTransId:(id)anId;
-(void)onImgSuccess:(id)success Cell:(id)cell;
-(void)onImgFailed:(id)failed Cell:(id)cell;
-(void)onVideoFailed:(id)failed Cell:(id)cell;
-(void)onVideoSucceeded:(id)succeeded Cell:(id)cell;
-(void)onVideoProgress:(id)progress Cell:(id)cell;
-(void)swipeGestureRecognizer:(id)recognizer;
-(void)HideMenuControl;
-(void)showMenuControl;
-(id)initWithFrame:(CGRect)frame style:(int)style;
-(void)dealloc;
-(void)celarCellObject;
-(id)description;
-(void)setBaseChatModel:(id)model;
-(void)setData:(id)data;
-(void)notifySecretFileStatus:(id)status;
-(void)handleLongPress:(id)press;
-(void)handleLongPressEnd:(id)end;
-(void)handleLongPressCancelled:(id)cancelled;
-(void)handleLongPressBegan:(id)began;
-(void)handleSecretNotification:(id)notification;
-(void)makeTotalForSecretFile:(id)secretFile model:(id)model;
-(float)getSecretFileHeight:(id)height;
-(void)refrushAllStopLoading;
-(void)refrushStopLoading:(int)loading withState:(int)state;
-(void)showPlaceholderMsgCell:(id)cell;
-(void)deletePlaceholderMsg:(id)msg;
-(void)deleteModelFromDBCache:(id)dbcache;
-(id)GetSmartShadowColor;
-(id)GetSmartColor;
@end

@interface QQFileModel : QQModel {
	NSString* _nick;
	NSString* _uin;
	NSString* _nickname;
	NSString* _msgContent;
	double msgTime;
	NSString* _reciveUin;
	NSString* _sendUin;
	NSString* _fileName;
	NSString* _uuid;
	int _fileType;
	NSString* _filePath;
	long long _fileDataLength;
	long long _fileProgressLength;
	long long _time;
	float _progress;
	int _cellHeight;
	BOOL _imageExist;
	CGSize _imageSize;
	NSData* _data;
	int _msgId;
	NSString* _groupCode;
	int _type;
	int _msgType;
	int _status;
	int _read;
	BOOL _isSend;
	NSString* _fileTransId;
	int _fileMsgType;
	unsigned _onlineFileId;
	int _placeholderMsg;
	QQMessageModel* _msgModel;
}
@property(retain, nonatomic) QQMessageModel* msgModel;
@property(assign, nonatomic) CGSize imageSize;
@property(assign, nonatomic) BOOL imageExist;
@property(assign, nonatomic, getter=getCellHeight) int cellHeight;
@property(assign, nonatomic) int placeholderMsg;
@property(assign, nonatomic) unsigned onlineFileId;
@property(assign, nonatomic) int fileMsgType;
@property(assign, nonatomic) int read;
@property(assign, nonatomic) BOOL isSend;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) int msgType;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* groupCode;
@property(assign, nonatomic) int msgId;
@property(retain, nonatomic) NSData* data;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) long long time;
@property(assign, nonatomic) long long fileProgressLength;
@property(assign, nonatomic) long long fileDataLength;
@property(assign) double msgTime;
@property(retain, nonatomic) NSString* msgContent;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSString* fileTransId;
@property(assign, nonatomic) int fileType;
@property(retain, nonatomic) NSString* uuid;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSString* sendUin;
@property(retain, nonatomic) NSString* reciveUin;
+(id)modelWithMessageModel:(id)messageModel;
-(void)deleteSourceFile;
-(BOOL)isFileAssistantMsg;
-(id)getFileDirectDownloadUrl;
-(id)getFileIndex;
-(id)description;
-(id)GetMessageModel;
-(int)compareByTimeDesc:(id)desc;
-(void)dealloc;
@end

@interface QQFileBrowserViewController : QQViewController <UIWebViewDelegate> {
	QQFileModel* _model;
	UIWebView* _webView;
	CGRect _webRect;
	AVAudioPlayer* _audioPlayer;
	BOOL _Ptt_PlayStatus_Ls;
}
@property(retain, nonatomic) QQFileModel* model;
-(id).cxx_construct;
-(void)setVoiceChannel;
-(void)dealloc;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(id)initWithFileModel:(id)fileModel;
@end

@interface QQFileCell : QQUITableViewCell {
	QQFileModel* _model;
	int _fileType;
	UIImageView* _bgImageView;
	UIView* _whiteBgrView;
	QQAsynHeadImageView* _headImageView;
	UIImageView* _fileIconView;
	QQAsynUrlImageView* _fileImageView;
	UIControl* _headControl;
	ProgressImageStyle* _progressView;
	UIButton* _actionButton;
	UILabel* _fileNameLabel;
	UILabel* _fileTypeLabel;
	UILabel* _fileSizeLabel;
	UILabel* _statusLabel;
	id<QQFileCellDelegate> _delegate;
	CGRect _rectBg;
	BOOL lastState;
	BOOL ifFirst;
	int interfaceOrientation;
@private
	BubbleBgInfo* _bubbleInfo;
}
@property(retain, nonatomic) BubbleBgInfo* bubbleInfo;
@property(assign, nonatomic) id<QQFileCellDelegate> delegate;
@property(readonly, assign, nonatomic) QQAsynHeadImageView* headImageView;
@property(retain, nonatomic) QQFileModel* model;
-(CGRect)getImageRect;
-(void)headControllerTouch:(id)touch;
-(void)actionForButton:(id)button;
-(void)deleteMessageModel:(id)model;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)menuControllerWillHide:(id)menuController;
-(void)hideMenu;
-(void)showMenu;
-(void)LongPressCallBack:(CGPoint)back;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setHighlighted:(BOOL)highlighted;
-(void)layoutSubviews;
-(void)loadData;
-(CGSize)getContentSizeByFileType;
-(id)getFileIconByFileType;
-(void)setFileIconByFileType;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface PenDrawHelper : NSObject {
}
+(id)imageWithPenWriteDatas:(id)penWriteDatas;
+(int)enterNumWithPenWriteData:(id)penWriteData;
+(id)indexPathForPenWriteData:(id)penWriteData withMaxRowLimmited:(int)maxRowLimmited;
+(void)parsePenWriteData:(id)data toData:(id*)data2;
+(id)parseBlankCoverDataToBlankData:(id)blankData;
+(BOOL)isPenWriteBlankCoverData:(id)data;
+(BOOL)isPenWriteBlankData:(id)data;
+(id)imageWithMergeImages:(id)mergeImages;
+(id)imageWithPenDrawItem:(id)penDrawItem;
+(id)imagesWithPenDrawItems:(id)penDrawItems;
+(BOOL)savePenDrawWithPathData:(id)pathData toFileWithName:(id)name;
@end

@interface PenDrawPathItem : NSObject {
@private
	short penSize;
	UIColor* penColor;
	NSArray* penDrawPathPoints;
}
@property(retain, nonatomic) NSArray* penDrawPathPoints;
@property(retain, nonatomic) UIColor* penColor;
@property(assign, nonatomic) short penSize;
-(void)dealloc;
@end

@interface PenDrawItem : NSObject {
@private
	short width;
	short height;
	UIColor* backgroundColor;
	NSArray* penDrawPathItems;
}
@property(retain, nonatomic) NSArray* penDrawPathItems;
@property(retain, nonatomic) UIColor* backgroundColor;
@property(assign, nonatomic) short height;
@property(assign, nonatomic) short width;
-(void)dealloc;
@end

@interface PenDrawToolView : UIView {
	UIButton* _cancelButton;
	PenDrawToolViewMenuView* _penDrawToolViewMenuView;
}
@property(readonly, assign, nonatomic) UIButton* cancelButton;
@property(readonly, assign, nonatomic) PenDrawToolViewMenuView* penDrawToolViewMenuView;
-(void)setStyle:(int)style;
-(int)style;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame style:(int)style;
@end

@interface PenDrawToolViewMenuViewSliderView : UIView {
	UIImageView* _imageView;
	id _target;
	SEL _action;
	float _value;
}
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)_handleTouchWithLocation:(CGPoint)location;
-(void)setTarget:(id)target withAction:(SEL)action;
-(void)setValue:(float)value;
-(float)value;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PenDrawToolViewMenuView : UIView {
	int _style;
	id<PenDrawToolViewMenuViewDelegate> _delegate;
	int _segmentedIndex;
	float _penSize;
}
@property(assign, nonatomic) id<PenDrawToolViewMenuViewDelegate> delegate;
-(void)_segmentButtonPressed:(id)pressed;
-(void)_sliderValueChange:(id)change;
-(void)_PenButtonPressed:(id)pressed;
-(void)_removeAllMenuView;
-(void)_changeMenuView;
-(void)layoutSubviews;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(void)setPenSize:(float)size;
-(void)setStyle:(int)style;
-(int)style;
-(id)initWithFrame:(CGRect)frame style:(int)style;
@end

@interface QQDoodleViewController : QQViewController <UIAlertViewDelegate, UIActionSheetDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, QQDoodleContentChangedDelegate> {
	UIButton* _funcButton;
	UIButton* _drawButton;
	UPenWriteView* _doodleWriteView;
	UPenDrawImageView* _doodleDrawView;
	UIImage* _postImage;
	NSMutableData* _postData;
	BOOL _picType;
	int _curIndex;
	id<QQDoodleSendDelegate> _doodleSender;
	UIImage* _backupSelectedImage;
	BOOL _imageSent;
}
@property(assign, nonatomic) id<QQDoodleSendDelegate> doodleSender;
@property(assign, nonatomic) BOOL imageSent;
@property(retain, nonatomic) UIImage* backupSelectedImage;
@property(retain, nonatomic) UIImage* _postImage;
+(void)DestroyInstance;
+(id)GetInstanceWithSender:(id)sender;
-(BOOL)isSupportRightDragToGoBack;
-(void)dealloc;
-(void)cleanDoodleNotification:(id)notification;
-(void)doodleImage:(id)image;
-(void)colorSelChanged:(int)changed colorIndex:(int)index;
-(void)contentChanged:(int)changed;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(BOOL)sendPenDraw:(id)draw;
-(BOOL)sendPenWrite:(id)write;
-(void)genPenWriteData:(id)data;
-(id)createImage:(id)image;
-(void)showNoticeAlert:(id)alert;
-(id)createLabel:(CGRect)label title:(id)title;
-(void)doSend;
-(BOOL)genSendData;
-(void)clearView;
-(void)exchange;
-(void)switchToDrawMode:(BOOL)drawMode;
-(void)popDoodleViewController:(BOOL)controller;
-(void)pushDoodleViewController:(id)controller animated:(BOOL)animated;
-(void)sendTo:(id)to;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)leftButtonClick:(id)click;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(id)initWithDoodleSender:(id)doodleSender;
@end

@interface UDoodleView : UIView <UIColorSelectBarDelegate, UQPaintBoardDelegate> {
	UQPaintBoard* _paintBoard;
	UPenDrawView* _penDrawView;
	UIView* _buddyView;
	UIView* _inputView;
	UIButton* _sendBtn;
	UIButton* _actionBtn;
	UIButton* _nextLineBtn;
	UIButton* _deleteBtn;
	UIButton* _deleteAllBtn;
	UIButton* _blankButton;
	UIImageView* _inputBack;
	UIImageView* _paintBack;
	UIImageView* _bgView;
	UIImageView* _bgView1;
	UIColorSelectBar* _colorBar2;
	id _controller;
	int _curLineH;
	int _superHeight;
	BOOL _bShowPaint;
	id<UDoodleViewDelegate> _doodleDelegate;
}
@property(assign, nonatomic) id<UDoodleViewDelegate> doodleDelegate;
@property(assign, nonatomic) BOOL isDoodleShow;
@property(assign, nonatomic) int _superHeight;
@property(assign, nonatomic) UIButton* actionBtn;
@property(assign, nonatomic) UIView* _inputView;
@property(assign, nonatomic) UIView* _buddyView;
-(void)setDoodleStartPos:(float)pos;
-(float)doodleHeight;
-(void)resetSuperHeight:(int)height;
-(void)updateState;
-(void)setbSHowPaint:(BOOL)paint;
-(void)showPaintBoard:(BOOL)board;
-(void)animatResizeSelf:(CGRect)aSelf Buddy:(CGRect)buddy;
-(void)_addBlank:(id)blank;
-(void)viewNextLine:(id)line;
-(void)viewDeleteAll:(id)all;
-(void)viewDelete:(id)aDelete;
-(id)getImageDataArray;
-(void)viewSend:(id)send;
-(void)viewAdd:(id)add;
-(void)didUQPaintBoardStartPaint:(id)paint;
-(void)colorBarChanged:(id)changed atIndex:(int)index color:(CGColorRef)color;
-(void)dealloc;
-(id)init;
-(void)adjustFrame:(int)frame;
-(void)resizeFrame;
-(id)initWithFrame:(CGRect)frame withController:(id)controller;
@end

@interface UIColorSelectBar : UIView {
	UIImage* _curImage;
	UIView* _parent;
	int _curIndex;
	int _curX;
	BOOL _highlight;
	BOOL _weibo;
	UIColor* _whiteColor;
	UIColor* _redcolor;
	UIColor* _yellowcolor;
	UIColor* _greencolor;
	UIColor* _bluecolor;
	UIColor* _orangecolor;
	UIColor* _purplecolor;
	UIColor* _blackcolor;
	id<UIColorSelectBarDelegate> _delegate;
}
@property(assign, nonatomic) id<UIColorSelectBarDelegate> delegate;
@property(readonly, assign, nonatomic) int curIndex;
@property(retain, nonatomic) UIImage* curImage;
@property(assign) BOOL weibo;
-(id)curColor;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)getCurIndex:(CGPoint)index;
-(void)setSelect:(int)select;
-(void)notifyColorChange;
-(void)getCurImage;
-(void)dealloc;
-(id)init;
@end

@interface UPenDrawCell : UIButton {
	CGPoint touchPoint;
}
-(void)setFrame:(CGRect)frame;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface UPenDrawImageView : UIView <PenDrawToolViewMenuViewDelegate, UIImagePickerControllerDelegate, UIColorSelectBarDelegate> {
	UQPaintBoard* _paintBoard;
	UIButton* _nextLineBtn;
	UIButton* _deleteBtn;
	UIButton* _backgroundImageSelectButton;
	UIButton* _penToolButton;
	UIImageView* _paintBack;
	id<QQDoodleContentChangedDelegate> _controller;
	int _curLineH;
	int _superHeight;
	BOOL _bHide;
	UIColorSelectBar* _colorBar2;
	PenDrawToolView* _penDrawToolView;
	UIViewController* viewController;
}
@property(assign) int _superHeight;
@property(readonly, assign, nonatomic) UIColorSelectBar* colorBar;
@property(assign, nonatomic) UIViewController* viewController;
-(void)applyColor:(int)color;
-(void)saveForegroundImage;
-(void)imageSelected:(id)selected;
-(id)_imageResize:(id)resize;
-(void)penDrawToolViewMenuView:(id)view didChangeValue:(float)value withSegmentedControlIndex:(int)segmentedControlIndex;
-(void)penDrawToolViewMenuView:(id)view didSelectAtIndex:(int)index;
-(void)_imagePickerWithType:(int)type;
-(void)_penDrawToolViewCancelButtonPressed;
-(void)_penToolButtonPressed;
-(void)_backgroundImageSelectButtonPressed;
-(id)getImageData:(id)data;
-(void)updateState;
-(void)viewBack;
-(BOOL)isViewClear;
-(void)viewClear;
-(void)colorBarChanged:(id)changed atIndex:(int)index color:(CGColorRef)color;
-(void)dealloc;
-(void)adjustFrame:(int)frame;
-(void)resizeFrame;
-(id)initWithFrame:(CGRect)frame withController:(id)controller;
@end

@interface UPenDrawView : UIScrollView {
@private
	int curIndex;
	int maxLinenum;
	int cellSize;
	NSMutableArray* penViewArray;
	NSMutableArray* penDataArray;
	UILabel* penLabel;
	int enterLineNum;
}
@property(assign, nonatomic) int enterLineNum;
@property(assign) int cellSize;
@property(assign) int maxLinenum;
@property(readonly, assign, nonatomic) NSMutableArray* penViewArray;
@property(readonly, assign, nonatomic) NSMutableArray* penDataArray;
-(id)getWriteImage;
-(void)addBlankPenWriteView;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(void)layoutFrom:(int)from;
-(void)movePentoIndex:(int)index;
-(void)movePentoObject:(id)object toLeft:(BOOL)left;
-(void)movePentoNextLine;
-(BOOL)isViewClear;
-(void)delAllSubPenDrawView;
-(void)delSubPenDrawView;
-(BOOL)_isSpaceData:(id)data;
-(void)updateSuperView;
-(int)curTextNum;
-(void)addSubPenDrawView:(id)view withData:(id)data;
-(void)adjustContentSize;
-(BOOL)isDefaultImageData:(id)data;
-(void)InsertDefaultImageData;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UPenWriteView : UIView <UIColorSelectBarDelegate> {
	UQPaintBoard* _paintBoard;
	UPenDrawView* _penDrawView;
	UIButton* _nextLineBtn;
	UIButton* _deleteBtn;
	UIButton* _deleteAllBtn;
	UIImageView* _inputBack;
	UIImageView* _paintBack;
	UIColorSelectBar* _colorBar2;
	id<QQDoodleContentChangedDelegate> _controller;
	int _curLineH;
	int _superHeight;
	BOOL _bHide;
}
@property(readonly, assign, nonatomic) UIColorSelectBar* colorBar;
@property(assign) int _superHeight;
-(void)applyColor:(int)color;
-(void)updateState;
-(void)viewNextLine:(id)line;
-(void)viewDeleteAll:(id)all;
-(void)viewDelete:(id)aDelete;
-(id)getImageData;
-(BOOL)isViewClear;
-(void)viewClear;
-(void)viewAdd:(id)add;
-(void)getBackGround;
-(void)colorBarChanged:(id)changed atIndex:(int)index color:(CGColorRef)color;
-(void)dealloc;
-(id)init;
-(void)adjustFrame:(int)frame;
-(void)resizeFrame;
-(id)initWithFrame:(CGRect)frame withController:(id)controller;
@end

@interface UQColor : NSObject {
	CGColorRef m_color;
	int m_pensize;
}
@property(assign) int pensize;
@property(assign) CGColorRef color;
@end

@interface UQPaintBoard : UIView {
	CGPoint m_firstTouch;
	CGPoint m_lastTouch;
	CGPoint m_lefttopTouch;
	CGPoint m_rightbottomTouch;
	NSTimer* m_timer;
	BOOL m_beginNewTouch;
	BOOL m_bwrite;
	BOOL m_bAlpha;
	int m_width;
	NSMutableArray* m_LineArray;
	NSMutableArray* m_PointArray;
	id<UQPaintBoardDelegate> _paintDelegate;
	id<QQDoodleContentChangedDelegate> _contentChangedDelegate;
@private
	CGRect validBound;
	int _backingWidth;
	int _backingHeight;
	EAGLContext* _context;
	unsigned _viewRenderbuffer;
	unsigned _viewFramebuffer;
	unsigned _brushTexture;
	unsigned _depthRenderbuffer;
	CGPoint _location;
	CGPoint _previousLocation;
	BOOL _firstTouch;
	BOOL _needsErase;
	UIImage* _backgroundImage;
	CGPoint _point0;
	CGPoint _point1;
	CGPoint _point2;
	CGPoint _point3;
	UIImage* _foregroundImage;
	BOOL _bNeedSave;
	BOOL _isResBgImage;
	BOOL _bBufferReleased;
	BOOL _bViewShown;
	int StrokeWidth;
	CGColorRef StrokeColor;
}
@property(retain, nonatomic) UIImage* foregroundImage;
@property(assign, nonatomic) id<QQDoodleContentChangedDelegate> contentChangedDelegate;
@property(assign, nonatomic) id<UQPaintBoardDelegate> paintDelegate;
@property(assign) CGColorRef StrokeColor;
@property(assign) int StrokeWidth;
@property(assign) int m_width;
@property(assign) BOOL m_bAlpha;
@property(assign) BOOL m_bwrite;
+(Class)layerClass;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)saveForegroundImage;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)_snapshot:(id)snapshot;
-(void)_setBrushColorWithRed:(float)red green:(float)green blue:(float)blue;
-(void)_renderLineFromPoint:(CGPoint)point toPoint:(CGPoint)point2 withFlush:(BOOL)flush;
-(void)_renderBezierLineFromPoint:(CGPoint)point toPoint:(CGPoint)point2 withFlush:(BOOL)flush;
-(void)_redrawView;
-(void)_erase;
-(void)_destroyFramebuffer;
-(BOOL)_createFramebuffer;
-(void)_setupGLView;
-(void)layoutSubviews;
-(CGRect)frame;
-(void)doodleControllerWillDisappear;
-(void)doodleControllerWillAppear;
-(void)willEnterForeground;
-(void)didEnterBackground;
-(void)releaseFrameBuffer;
-(void)loadFrameBuffer;
-(void)setFrame:(CGRect)frame;
-(void)dealloc;
-(BOOL)isViewClear;
-(void)clearView;
-(id)saveViewDraw:(id)draw;
-(id)saveViewWrite:(id)write;
-(unsigned long)appendCurrentColor:(id)color;
-(id)saveView:(id)view;
-(void)eraseLastPolyLine;
-(void)timerCallBack;
-(void)setBackgroundImage:(id)image isRes:(BOOL)res;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQStrangerChatViewController : QQBaseChatViewController <QIMTextInputDelegate, QIMTextInputDelegate, QQFileCellDelegate> {
	BOOL _isInit;
	BOOL _isWPA;
	NSString* _groupCode;
	NSString* _nickName;
	int _accostType;
	QQMessageModel* _firstMsg;
	QQMessageModel* _recordModel;
	BOOL bGerenalCell;
	NSString* _mobilePhone;
	AddFriendSendMessageViewController* _addFriend;
@private
	int _currentPage;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriend;
@property(retain, nonatomic) NSString* mobilePhone;
@property(assign) int accostType;
@property(assign) int currentPage;
@property(retain, nonatomic) QQMessageModel* recordModel;
@property(retain, nonatomic) NSString* nickName;
@property(retain, nonatomic) NSString* groupCode;
-(void)handleC2CRoamMessage:(id)message msgList:(id)list;
-(void)SendFile:(id)file;
-(void)actionVideo;
-(void)alertCancel:(id)cancel;
-(void)didSelectSystemNotificationCell:(id)cell;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
-(BOOL)growingTextViewInputReturnKey:(id)key;
-(void)didReceiveMemoryWarning;
-(void)headIconTouch:(id)touch;
-(void)actionProfile:(id)profile;
-(BOOL)QQTextField:(id)field didSendText:(id)text showText:(id)text3;
-(void)sendMarketFaceMsg:(id)msg;
-(BOOL)doSendTextMsg:(id)msg showText:(id)text isLocation:(BOOL)location;
-(void)ActionSendMessgae;
-(BOOL)sendLocationMsg:(id)msg showText:(id)text;
-(BOOL)sendTextMsg:(id)msg showText:(id)text;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)ActionRecvSvrMsg:(id)msg;
-(BOOL)isCurrentAccountMessage:(id)message;
-(void)textFiledFaceBoard;
-(void)showPopupMenu;
-(void)onResponeLbsClientMsg:(id)msg;
-(void)needReloadChatView;
-(void)loadView;
-(void)popViewController;
-(void)restoreData;
-(void)cancelSendImage;
-(void)viewDidUnload;
-(void)releaseUI;
-(void)sendReadConfirm;
-(void)dealloc;
-(id)initWithuin:(id)withuin nickName:(id)name mobilePhone:(id)phone;
-(id)initWithuin:(id)withuin nickName:(id)name mGroupName:(id)name3;
-(id)initWithGroup:(id)group groupCode:(id)code;
-(id)initWithUin_WPA:(id)uin_WPA WPA:(BOOL)wpa;
-(id)initWithuin:(id)withuin;
-(id)init;
-(void)doInit;
-(void)tableViewReSendImage:(id)image;
-(void)SendGIFImage:(id)image data:(id)data bodyType:(int)type;
-(id)startUploadGrpImage:(id)image;
-(void)sendOfflinePicture:(id)picture;
-(void)prepareUpload:(id)upload fileName:(id)name bodyType:(int)type;
-(void)uploadImage:(id)image;
-(id)prepareUploadMultiImage:(id)image bodyType:(int)type;
-(void)upDatePTTmodal:(id)tmodal;
-(void)stopRecord;
-(void)delayStopRecord;
-(void)sendRecord;
-(void)prapareToUpload:(id)upload;
-(void)QQVoiceRecordEnd:(id)end;
-(void)prepareSaveAndUpload:(id)upload;
-(void)insertRecordCell;
-(void)record;
-(void)force2Send;
-(void)QQRecordTimeOut;
-(void)reReceivePPT:(id)ppt index:(id)index;
-(void)upAmrFile:(id)file;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
-(void)actionAddFriend;
-(void)actionProfile;
-(void)onVideoRecordCompleted:(id)completed;
-(void)SendVideoFile:(id)file;
-(void)didCell:(id)cell forModel:(id)model;
@end

@interface QQTroopMsgManager : NSObject <DBAsyncCallbackProtocol> {
	NSTimer* _timer;
	NSMutableArray* _GroupList;
	int _SendNum;
	BOOL _timeOut;
	NSMutableArray* _TroopMsgArray;
	BOOL _isGetPushMsg;
	NSMutableDictionary* _GroupSeqRecord;
	int _SoundTimeStamp;
}
@property(retain, nonatomic) NSMutableArray* TroopMsgArray;
+(id)GetInstance;
-(int)getGroupMessage:(id)message begin:(int)begin last:(int)last;
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
-(void)enterBackGround;
-(void)readyForMessage;
-(void)changeAccount;
-(void)CacheTroopMsgList:(id)list;
-(void)CacheTroopMsg:(id)msg;
-(void)AsyncSaveMessageToDB:(id)db target:(id)target userdata:(id)userdata;
-(void)SaveMessageToDB:(id)db;
-(id)filterBlankMsg:(id)msg;
-(void)saveDataToDataBase:(id)dataBase checkContinuity:(BOOL)continuity;
-(void)SaveDataToDataBase:(id)dataBase;
-(void)SaveFailedMsgToDataBase:(id)dataBase playSound:(BOOL)sound;
-(void)SaveDataToDataBase:(id)dataBase playSound:(BOOL)sound;
-(void)_saveDataToDataBase:(id)dataBase playSound:(BOOL)sound checkContinuity:(BOOL)continuity;
-(void)ActionPushTroopMsg:(id)msg;
-(void)ActionGetTroopMsg:(id)msg;
-(void)ActionGetTroopMsgTimeOut;
-(void)Action:(id)action;
-(void)timeOut;
-(void)start;
-(void)dealloc;
-(id)init;
@end

@interface QQPhotoManageViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIScrollViewDelegate> {
	NSMutableArray* _dataSources;
	UITableView* _tableView;
	BOOL _isEdit;
	BOOL _isSelectedAll;
	BOOL ifChange;
	QQFileEditBar* _editBar;
	UIView* _btnBg;
	UIViewController* _supChatViewController;
}
@property(assign, nonatomic) UIViewController* supChatViewController;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)didSelectedModel:(id)model;
-(void)onAccountLogout:(id)logout;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)loadDataSources;
-(void)editAction:(id)action;
-(void)editBarDidSelected:(id)editBar;
-(void)selectedAllData:(id)data;
-(void)disMissEditBar;
-(void)showEditBar;
-(void)endEditFileSetNavigationBarButton;
-(void)editFileSetNavigationBarButton;
-(void)viewDidLoad;
-(void)leftButtonClick:(id)click;
-(void)loadView;
-(id)init;
@end

@interface QQLabel : UILabel {
	int _drawOffset;
	int _layoutWidth;
	EmotionParseResult* _parseResult;
	UIView* _faceView;
@private
	BOOL noURL;
}
@property(assign, nonatomic) BOOL noURL;
@property(retain, nonatomic) EmotionParseResult* parseResult;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)setHighlighted:(BOOL)highlighted;
-(void)layoutStringIfNeeded;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQVoiceCell : QQUITableViewCell <QQEmotionLabelDelegate> {
	UIImageView* backgroundView;
	UIImageView* backgroundDarkView;
	UIImageView* voiceView;
	UIImageView* maskView;
	UILabel* timelabel;
	QQAsynHeadImageView* _headView;
	QQEmotionLabel* _nickLabel;
	QQVoiceCellModel* model;
	BOOL clickToWord;
	UIImageView* flagView;
	int _lastStatus;
	UILabel* _tipLabel;
	NSMutableArray* receiveImages;
	NSMutableArray* senderImages;
	BOOL _longPressFlag;
	BOOL _displayNick;
	NSMutableArray* _accessibilityChildren;
	UIActivityIndicatorView* _loadingView;
	id _superTableView;
@private
	UIImageView* _animationView;
	BubbleBgInfo* _bubbleInfo;
	NSTimer* _animationTimer;
}
@property(retain, nonatomic) NSTimer* animationTimer;
@property(retain, nonatomic) UIImageView* animationView;
@property(retain, nonatomic) BubbleBgInfo* bubbleInfo;
@property(assign, nonatomic) id superTableView;
@property(assign) BOOL clickToWord;
@property(readonly, assign, nonatomic) QQAsynHeadImageView* headView;
@property(retain, nonatomic) QQVoiceCellModel* model;
-(void)emotionLabelHandleLongPress:(id)press;
-(void)emotionLabelHandleIDNumber:(id)number;
-(void)emotionLabelHandlePhoneNumber:(id)number;
-(void)emotionLabelHandleQQNumber:(id)number;
-(void)emotionLabelHandleEmail:(id)email;
-(void)emotionLabelHandleUrl:(id)url;
-(id)GetNickColor;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
-(id)accessibilityElementAtIndex:(int)index;
-(int)accessibilityElementCount;
-(id)accessibilityChildren;
-(void)setHighlighted:(BOOL)highlighted;
-(void)deleteMessageModel:(id)model;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)menuControllerWillHide:(id)menuController;
-(void)hideMenu;
-(void)showMenu;
-(void)LongPressCallBack:(CGPoint)back;
-(void)longPressHeader;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)resetNickColor;
-(void)layoutSubviews;
-(void)layoutReviverUI;
-(void)layoutVoiceView:(BOOL)view bgFrameX:(float)x bgFrameY:(float)y bgFrameW:(float)w bgFrameH:(float)h;
-(void)layoutSenderUI;
-(void)drawRect:(CGRect)rect;
-(void)hideSuperVipAnimationView:(id)view;
-(void)showSuperVipAnimationView;
-(void)willPlaySound:(id)sound;
-(void)willStopPlay:(id)play;
-(void)willEndRecord:(id)record;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)dealloc;
@end

@interface VoiceNickLabel : UILabel {
}
-(void)drawRect:(CGRect)rect;
@end

@interface QQVoiceCellModel : QQModel {
	int state;
	BOOL isSelf;
	int voiceLength;
	BOOL clickToWords;
	NSString* uin;
	NSString* nick;
	NSString* _UUID;
	QQMessageModel* msgModel;
	EmotionParseResult* _layoutNickResult;
	BOOL _isGroup;
	BOOL _isDiscussGroup;
	NSIndexPath* _indexPath;
	float _modelPlayerDelayTime;
	BOOL _displayNickName;
}
@property(retain, nonatomic) EmotionParseResult* layoutNickResult;
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(retain, nonatomic) NSString* UUID;
@property(assign, nonatomic) BOOL clickToWords;
@property(assign, nonatomic) int voiceLength;
@property(assign, nonatomic) BOOL isSelf;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) QQMessageModel* msgModel;
@property(assign, nonatomic) BOOL isDiscussGroup;
@property(assign, nonatomic) BOOL isGroup;
@property(assign, nonatomic) float modelPlayerDelayTime;
+(id)modelWithMessageModel:(id)messageModel;
-(BOOL)isEqualToUUID:(id)uuid;
-(float)GetCellModelHeight;
-(id)GetUUIDWithContent:(id)content;
-(float)cellBackLength;
-(id)description;
-(double)time;
-(id)content;
-(id)initWithMessageModel:(id)messageModel;
-(void)dealloc;
@end

@interface QQVoiceMessageCenter : NSObject {
	NSMutableArray* _voiceMsgList;
	NSMutableArray* _voiceGroupMsgList;
	NSMutableArray* _voiceMsgPlayList;
	NSMutableArray* _voiceMsgPlayCachList;
	struct {
		BOOL _isLockPlayList;
		BOOL _isStopPlayer;
		BOOL _isPlaying;
		BOOL _FirstPlay;
		BOOL _isAutoPlay;
		int _playerIndex;
	} _playerStatus;
	QQChatViewController* _superInterfaceViewController;
	int ipodPlaybackState;
	int applicationPlaybackState;
	NSTimer* _voicePlayerOutputDeviceTimer;
}
+(id)GetInstances;
-(void)setVoiceChannel;
-(void)setAutoPlayStatus:(BOOL)status;
-(BOOL)deviceIsPlaying;
-(void)DeviceProximityStateDidChange:(id)deviceProximityState;
-(void)voicePlayingApplicationEnterBackground:(id)background;
-(void)ClearCacheVoiceMsgDidAccountChange:(id)clearCacheVoiceMsg;
-(void)voicePlayingDidStop:(id)voicePlaying;
-(void)unLockPttPlayer;
-(void)lockPttPlayer;
-(void)ClearVoiceAutoPlayerList;
-(void)playVoiceSetStatusRead:(id)read;
-(void)reciveSuccessWithUUIDPlayVoice:(id)uuidplayVoice;
-(void)playPttVoiceDidEndCallBack:(id)playPttVoice;
-(BOOL)playVoiceMessage:(id)message;
-(BOOL)stopVoiceMessage:(id)message;
-(BOOL)isPlaying:(id)playing;
-(BOOL)isVoicePlaying;
-(BOOL)addLastTimeUNReadVoiceMessage:(id)message;
-(BOOL)addVoiceMessage:(id)message;
-(BOOL)hasMessageModel:(id)model;
-(void)reciveGroupMessage:(id)message;
-(BOOL)upDateGroupVoiceMessageFor:(id)aFor withRead:(int)read forLength:(int)length;
-(void)recivePTTNetFail:(id)fail;
-(void)setBubbleIDToMsgs:(unsigned)msgs;
-(BOOL)upDateMessageFor:(id)aFor withRead:(int)read forLength:(int)length;
-(BOOL)addD0PttMsg:(id)msg;
-(BOOL)addMsg:(id)msg;
-(void)GetSuperInterfaceViewController:(id)controller;
-(void)dealloc;
-(id)init;
@end

@interface MsgBarLabel : UIView {
	NSString* _title;
	NSString* _content;
	UIImage* _icon;
	QQMessageModel* _model;
	UILabel* _titleLabel;
	UILabel* _contentLabel;
	float _progress;
}
@property(retain, nonatomic) QQMessageModel* messageModel;
@property(retain, nonatomic) UIImage* icon;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
-(void)setFrame:(CGRect)frame;
-(void)drawUploadImageProgress;
-(void)updataProgress:(float)progress;
-(void)drawBackground:(CGRect)background;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQMsgBar : UIWindow <SendPhotoTaskManagerDelegate> {
	NSString* _title;
	NSString* _context;
	UIImage* _icon;
	UIImage* _backImage;
	UIView* _hiddenView;
	int _currIndex;
	MsgBarLabel* _twoLabel[2];
	NSMutableArray* _msgArray;
	QQMessageModel* _currModel;
	BOOL _isShow;
	BOOL _allowAutosetVisible;
	BOOL _isDismiss;
	BOOL _isCancelDismiss;
	BOOL _isNeedToDisplay;
	id<QQMsgBarDelegate> _msgDelegate;
	int _interfaceOrientation;
	CGRect _rectAnimationStart1;
	CGRect _rectAnimationEnd1;
	CGRect _rectAnimationStart2;
	CGRect _rectAnimationEnd2;
}
@property(assign, nonatomic) BOOL allowAutosetVisible;
@property(assign, nonatomic) UIView* hiddenView;
@property(retain, nonatomic) QQMessageModel* currModel;
@property(assign, nonatomic) id<QQMsgBarDelegate> msgDelegate;
-(void)test;
-(void)cleanMessages;
-(id)getCurrShowMessage;
-(BOOL)msgArrayHasMessageToShow;
-(BOOL)hasMessageToShow;
-(void)cleanGroupMessageModelCache;
-(void)cleanPersonMessageModelCache;
-(void)clearMessageByModel:(id)model;
-(void)clearAllMessage;
-(void)setEnabledAfterDelay;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)photoTaskManger:(id)manger sendProgress:(id)progress;
-(BOOL)isShow;
-(void)didDismiss;
-(void)didShow;
-(void)setCancelDismiss:(BOOL)dismiss;
-(void)dismiss;
-(void)showNextMsg;
-(void)showCurrent:(id)current;
-(void)drawRect:(CGRect)rect;
-(void)updataMessageModel:(id)model;
-(void)addMessageModel:(id)model;
-(BOOL)isMessage:(id)message sameWith:(id)with;
-(void)setFrame:(CGRect)frame;
-(void)adjustLabelFrame;
-(void)reciveNotificationInterfaceOrientation:(id)orientation;
-(void)dealloc;
-(void)setNeedsDisplay;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQNMsgShowBar : NSObject <ISkinProtocol> {
	NSMutableArray* _messageArray;
	NSMutableArray* _cacheArray;
	QQMsgBar* _messageView;
	UIWindow* _hidenStatuBarEventWindow;
	NSTimer* _timer;
	double _interval;
	BOOL _isLockCache;
	BOOL _isLockRunLoop;
	BOOL _isAlwaysShow;
	BOOL _isLockHide;
	BOOL _isReadyToTimeRushMsg;
	id _object;
	UIViewController* _modelViewController;
	BOOL _isInGroup;
	NSString* _currentUin;
	BOOL _messageBarHidden;
	NSTimer* _statusBarTimer;
	int _statusBarTimerCount;
@private
	BOOL _holdMsgShowing;
}
@property(assign, nonatomic) BOOL isLockHide;
@property(assign, nonatomic) BOOL holdMsgShowing;
@property(readonly, assign, nonatomic) QQMsgBar* messageView;
@property(retain, nonatomic) NSString* currentUin;
@property(retain, nonatomic) UIViewController* modelViewController;
@property(assign, nonatomic) id object;
+(id)defaultMsgBar;
-(void)stopStatusBarTimer;
-(void)resumeStatusBarContinually;
-(void)resumeStatusBar;
-(BOOL)hasCurrMessageRead;
-(void)dismissIfReadCountZero;
-(id)getCurrShowMessage;
-(void)reloadAppearance;
-(void)setAllowAutosetVisible:(BOOL)visible;
-(void)noHideMessageBar;
-(void)hideMessageBar;
-(void)stopShowMsg;
-(void)delayShowLatestUnreadMessage;
-(void)showLatestUnreadMessageIfNotHidden;
-(BOOL)shouldShowDefaultMsg:(id)msg;
-(BOOL)showLatestUnreadMessage;
-(BOOL)hasUnReadTaskMessage;
-(void)reciveAppMsgNotification:(id)notification;
-(void)closePCStatusNotification;
-(void)CloseNetworkStateNotification;
-(void)reciveMsgNotification:(id)notification;
-(BOOL)hasUploadImageWork;
-(void)cleanUnReadMessages;
-(void)dismissMessageBar:(BOOL)bar;
-(void)timeRushMsg:(id)msg;
-(void)updataMessage:(id)message;
-(void)cleanMsgWithoutChangeUin:(id)uin;
-(void)cleanMsgWithUin:(id)uin;
-(void)cleanDiscussMessageModelCache:(id)cache;
-(void)cleanGroupMessageModelCache:(id)cache;
-(void)cleanPersonMessageModelCache:(id)cache;
-(void)cleanAllMessageModelCanche:(id)canche;
-(void)checkMessageViewHasMessageToShow;
-(void)stopTimer;
-(void)startTimer;
-(BOOL)isMsgBarShow;
-(BOOL)isTimerRuning;
-(void)resetTimer;
-(void)dealloc;
-(void)test;
-(id)init;
@end

@interface QIPodResumer : NSObject {
}
+(id)getInstance;
-(void)InterruptIPod;
-(void)TryResumeIPod;
-(void)ForceResumeIPod;
-(void)AsyncProc:(int)proc;
-(BOOL)IsIPodPlaying;
@end

@interface QQGetRoamMsgModel : NSObject {
	int LastSeq;
	NSMutableArray* _MsgArray;
	id<QQGetRoamMsgModelProtocol> _delegate;
	int _TotalGetNum;
}
@property(assign, nonatomic) id<QQGetRoamMsgModelProtocol> delegate;
+(id)shareInstance;
-(BOOL)hasPassword;
-(BOOL)roamOn;
-(void)switchRoamMessage:(BOOL)message;
-(void)deleteUserRoamInfo:(id)info;
-(void)deleteUserRoamInfo;
-(void)removeUserSig;
-(void)removeUserPwd;
-(void)removeUserSig:(id)sig;
-(void)removeUserPwd:(id)pwd;
-(void)setUserSig:(id)sig;
-(void)setUserPwd:(id)pwd;
-(id)getUserSig;
-(id)getUserPwd;
-(void)ActionSetRoamMsg;
-(void)ActionSetRoamMsgByVector;
-(void)SetRoamMsg:(id)msg;
-(void)SetRoamMsgByVector:(id)vector;
-(void)closeGetRoamMsgFunction;
-(void)ClearAllCache;
-(void)ActionGetRoamMsyByNum:(id)num;
-(void)actionGetRoamMsg:(id)msg;
-(void)QQGetRoamMsg:(id)msg;
-(void)QQGetRoamMsgByNum:(id)num;
-(void)dealloc;
-(id)init;
@end

@interface MeterTable : NSObject {
	float mMinDecibels;
	float mDecibelResolution;
	float mScaleFactor;
	float* mTable;
}
-(void)dealloc;
-(float)valueAt:(float)at;
-(id)init;
@end

@interface AQLevelMeter : UIView {
	OpaqueAudioQueue* _aq;
	AudioQueueLevelMeterState* _chan_lvls;
	NSArray* _channelNumbers;
	NSArray* _subLevelMeters;
	NSTimer* _updateTimer;
	float _refreshHz;
	BOOL _showsPeaks;
	BOOL _vertical;
	float _pause;
	MeterTable* _meterTable;
	UIColor* _bgColor;
	UIColor* _borderColor;
	double _peakFalloffLastFire;
	QQTimeTips* _tipsTime;
	UIWindow* _maskWindow;
	BOOL _showDismissView;
}
@property(assign, nonatomic) BOOL showDismissView;
@property(assign) BOOL vertical;
@property(assign) BOOL showsPeaks;
@property(retain) NSArray* channelNumbers;
@property(assign) float refreshHz;
@property(assign) OpaqueAudioQueue* aq;
-(void)setPauseFQ:(float)fq;
-(void)dealloc;
-(void)_refresh;
-(void)layoutSubLevelMeters;
-(void)setBackgroundColor:(id)color;
-(void)setBorderColor:(id)color;
-(id)initWithCoder:(id)coder;
-(void)changeFrame:(id)frame;
-(void)showTimeTips:(id)tips inView:(id)view;
-(void)removeFromSuperview;
-(void)showInSuperView:(id)superView;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQTimeTips : UIView {
	UILabel* _tipsLabel;
	UIImage* _image;
	CGPoint _imageOffset;
	CGSize _imageSize;
}
@property(retain, nonatomic) UILabel* tipsLabel;
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) CGSize imageSize;
@property(assign, nonatomic) CGPoint imageOffset;
-(id).cxx_construct;
-(void)fillRoundedRect:(CGRect)rect inContext:(CGContextRef)context;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface LevelMeter : UIView {
	unsigned _numLights;
	float _level;
	float _peakLevel;
	LevelMeterColorThreshold* _colorThresholds;
	unsigned _numColorThresholds;
	BOOL _vertical;
	BOOL _variableLightIntensity;
	UIColor* _bgColor;
	UIColor* _borderColor;
	BOOL _showDismiss;
}
@property(assign) BOOL showDismiss;
@property(retain) UIColor* borderColor;
@property(retain) UIColor* bgColor;
@property(assign) BOOL variableLightIntensity;
@property(assign, getter=isVertical) BOOL vertical;
@property(assign) unsigned numLights;
@property(assign) float peakLevel;
@property(assign) float level;
-(void)setColorThresholds:(LevelMeterColorThreshold*)thresholds count:(unsigned)count;
-(LevelMeterColorThreshold*)colorThresholds:(unsigned*)thresholds;
-(void)dealloc;
-(void)fillRoundedRect:(CGRect)rect inContext:(CGContextRef)context;
-(void)drawDismissViewInRect:(CGRect)rect;
-(void)drawNormalViewInRect:(CGRect)rect;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(void)_performInit;
@end

@interface TQRecorderManager : NSObject <UIAccelerometerDelegate> {
	BOOL playbackWasPaused;
	BOOL playbackWasInterrupted;
	NSString* myAudioFile;
	NSString* uuid;
	AQLevelMeter* lvlMeter_in;
	AQRecorder* recorder;
	BOOL speakerOn;
	BOOL isPrepare;
	BOOL _isStreamPTT;
	BOOL _ActivedBluetoothInput;
	UIAccelerometer* _accelerometer;
	BOOL _isProximity;
	NSTimer* _waitProximityTimer;
	BOOL _isTiming;
}
@property(assign, nonatomic) BOOL ActivedBluetoothInput;
@property(retain, nonatomic) AQLevelMeter* levelMeter;
@property(retain, nonatomic) NSString* uuid;
@property(retain, nonatomic) NSString* audioFile;
@property(retain, nonatomic) AQRecorder* recorder;
+(id)GetInstance;
-(void)setBluetoothInputActive;
-(void)showTimeTips:(id)tips;
-(void)dealloc;
-(void)resetFileUUID:(id)uuid oldUUID:(id)uuid2;
-(void)setVoiceChannel;
-(void)WillResignActive;
-(void)onForceOffLineNotify;
-(void)onEnterBackgroundNotify;
-(void)cancelAllProcess;
-(void)playPtt:(id)ptt;
-(void)playPttWithFullName:(id)fullName;
-(void)reversePttWithFullName:(id)fullName;
-(void)reversePtt:(id)ptt;
-(void)stopPlayAudioDevice;
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
-(void)clearProximityMonitoring;
-(void)startAccelerater;
-(void)disableAccelerator;
-(void)proximityStateChangeCallBack:(id)back;
-(void)playAudioDevice;
-(BOOL)CancelRecord;
-(void)perforRemoveLevel;
-(int)stopRecordAudioDevice;
-(void)stopSend;
-(void)pauseLvlMeter;
-(void)refreshFrame;
-(BOOL)recordAudioDevice:(BOOL)device;
-(BOOL)isRecording;
-(BOOL)isRunning;
-(void)prepareRecord;
-(id)init;
-(void)switchToHeadPhoneSession;
-(void)switchToSpeakerSession;
-(BOOL)hasHeadset;
-(void)InitializeAudioSession;
-(id)dateString;
@end

@interface QQVoicePlayerManger : NSObject {
	unsigned long _startRecordTipsVoiceId;
	unsigned long _endRecordTipsVoiceId;
	unsigned long _playEndTipsVoiceId;
}
+(id)GetInstances;
-(void)playPttEndVoicePlaying;
-(void)playPttEndVoiceRecord;
-(void)playPttStartVoiceRecord;
-(void)dealloc;
-(id)init;
@end

@interface AQRecorder : NSObject {
	void* mEnState;
	IXVECodec* mXVECodec;
	void* mCoder;
	CFStringRef mFileName;
	OpaqueAudioQueue* mQueue;
	AudioQueueBuffer* mBuffers[4];
	long long mRecordPacket;
	CAStreamBasicDescription mRecordFormat;
	unsigned long mIsRunning;
	FILE* mAmrFile;
	unsigned char misStreamPTT;
	float mFileDuration;
	NSTimer* mCheckTimer;
	BOOL mSendFlag;
	BOOL mRecording;
	BOOL mQueueIsStart;
	int mCurStopReason;
}
@property(assign, nonatomic) BOOL mRecording;
@property(assign, nonatomic) BOOL mSendFlag;
-(id).cxx_construct;
-(float)fileDuration;
-(BOOL)isRecording;
-(BOOL)IsRunning;
-(CAStreamBasicDescription)DataFormat;
-(OpaqueAudioQueue*)Queue;
-(CFStringRef)GetFileName;
-(unsigned long)GetNumberChannels;
-(BOOL)CancelRecord;
-(void)StopRecord;
-(BOOL)StartRecord:(CFStringRef)record isStreamPTT:(BOOL)ptt;
-(void)dealloc;
-(id)init;
-(void)HandleCancelRecord;
-(void)HandleStopRecordWithAllReason;
-(BOOL)StopRecord:(int)record;
-(void)CloseRecordFile;
-(void)encodeBuffer:(short*)buffer length:(int)length;
-(void)SetupAudioFormat:(unsigned long)format;
-(void)timeOut;
-(int)ComputeRecordBufferSize:(const AudioStreamBasicDescription*)size seconds:(float)seconds;
@end

@interface StreamMsgEngine : NSObject <CIMStreamMsgEngineDelegate> {
	id respondEngine;
	long long _seq;
	long long _fUin;
	int moni;
	int _msgId;
	NSString* _fileName;
	NSString* _uuid;
	short _duration;
	FILE* _amrFile;
	float _fileDuration;
	NSMutableDictionary* _fileMapping;
	NSMutableArray* _receivePTTArray;
	NSMutableArray* _sendPTTArray;
	NSMutableArray* _outTimerArray;
	NSMutableArray* _serverSuccessResponseOutTimerArray;
	NSMutableDictionary* _createPTTNotifyDict;
	int _sendWiFiTimeout;
	int _sendGPRSTimeout;
	int _retrytime;
	NSMutableArray* _retrySendPTTArray;
	long long _uin;
	BOOL _needSaveRetrySendPTTArray;
	NSTimer* _saveRetrySendPTTArrayTimer;
}
@property(assign, nonatomic) int msgId;
@property(assign, nonatomic) int _sendGPRSTimeout;
@property(assign, nonatomic) int _sendWiFiTimeout;
@property(retain, nonatomic) NSString* uuid;
@property(retain, nonatomic) NSString* _fileName;
@property(retain, nonatomic) id respondEngine;
+(id)GetInstance;
-(void)CheckNotifyUISendPTTFail:(id)fail;
-(void)SetSendMsgFailCount:(int)count count:(int)count2;
-(int)GetSendMsgFailCount:(int)count;
-(void)StartRetrySendPtt;
-(void)LoginSuccess:(id)success;
-(void)changeAccount:(id)account;
-(void)LoadRetrySendPTTArray;
-(void)SaveRetrySendPTTArray;
-(void)TimeOutSaveCallBack:(id)back;
-(void)DelaySaveRetrySendPTTArray;
-(id)GetRetrySendPTTObj:(id)obj;
-(void)RemoveRetrySendPTTArray:(id)array;
-(void)AddToRetrySendPTTArray:(int)retrySendPTTArray Uuid:(id)uuid FullPath:(id)path PeerUin:(long long)uin RetryCount:(int)count Duration:(int)duration msgSeq:(unsigned short)seq;
-(void)postPttStreamMsgNotificationFor:(id)aFor;
-(void)RemoveServerSuccessResponseOutTimerArray:(int)array;
-(void)AddToServerSuccessResponseOutTimerArray:(int)serverSuccessResponseOutTimerArray;
-(id)GetServerSuccessResponseOutTimerByTimer:(id)timer;
-(id)GetServerSuccessResponseOutTimer:(int)timer;
-(void)ServerSuccessResponseTimeOutCallBack:(id)back;
-(bool)ReceivePTTIsExist:(id)exist MsgId:(id)anId;
-(void)CleanReceivePTTArray:(unsigned long long)array Time:(int)time;
-(bool)pttIsFinish:(int)finish PeerUin:(long long)uin;
-(void)timeOutReSendPTT:(int)ptt ReSendCount:(int)count;
-(void)ReSendPTT:(id)ptt PeerUin:(unsigned long long)uin Duratuin:(short)duratuin;
-(void)TimeOutCallBack:(id)back;
-(void)RemoveOutTimerArray:(int)array;
-(void)RemoveSendPTTArray:(int)array;
-(void)RemoveReceivePTTArray:(int)array;
-(void)AddToOutTimerArray:(int)outTimerArray Type:(int)type PeerUin:(long long)uin TimeoutCount:(int)count;
-(void)AddToSendPTTArray:(int)sendPTTArray Uuid:(id)uuid FullPath:(id)path PackSeq:(int)seq PackNum:(int)num Type:(int)type PeerUin:(long long)uin Duration:(short)duration ReSendCount:(short)count Layer:(short)layer TotalSize:(int)size CurrentSize:(int)size12 msgSeq:(unsigned short)seq13;
-(void)AddToReceivePTTArray:(int)receivePTTArray PackSeq:(int)seq PackNum:(int)num Type:(int)type PeerUin:(long long)uin Time:(int)time Layer:(short)layer LocalReceiveTime:(int)time8 BubbleID:(unsigned)anId;
-(id)GetOutTimerByTimer:(id)timer;
-(id)GetOutTimer:(int)timer;
-(id)GetSendPTTObjByUuid:(id)uuid;
-(id)GetSendPTTObj:(int)obj;
-(id)GetReceivePTTObj:(int)obj;
-(void)dealloc;
-(int)SendStreamMsgEnd:(FILE*)end FullPath:(id)path;
-(int)SendStreamMsg:(FILE*)msg len:(int)len FullPath:(id)path;
-(BOOL)isReadyToSend:(int)send TotalSize:(int)size;
-(void)SendCSUploadStreamMsg:(long long)msg msgId:(int)anId streamType:(short)type packNum:(short)num packSeq:(short)seq data:(char*)data len:(int)len seq:(long long)seq8 layer:(short)layer msgSeq:(unsigned short)seq10;
-(int)SetFileName:(id)name;
-(void)SetDuration:(short)duration FullPath:(id)path;
-(void)SetfUin:(long long)uin;
-(void)appenWriteReceiveData:(int)data Buf:(char*)buf Len:(int)len;
-(void)StreamMsgEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(bool)SendFile:(id)file;
-(id)init;
@end

@interface MButton : UIButton {
	id<MButtonDelegate> _delegate;
	BOOL _hight;
}
@property(assign, nonatomic) BOOL hight;
@property(assign, nonatomic) id<MButtonDelegate> delegate;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQRecordButton : UIView {
	UIImage* _imageBackUp;
	UIImage* _imageBackDown;
	UIImage* _imageIcon;
	NSString* _titleUp;
	NSString* _titleDown;
	id _object;
	SEL _touchUp;
	SEL _touchDown;
	BOOL _isDown;
	BOOL _isEable;
	CGRect _rectBg;
	CGRect _rectIcon;
	CGRect _rectTitle;
	BOOL _selected;
	BOOL _highlighted;
}
@property(assign, nonatomic) BOOL highlighted;
@property(assign, nonatomic) BOOL selected;
-(id).cxx_construct;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)addTarget:(id)target forSelecter:(SEL)selecter forEvent:(BOOL)event;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQMessageView : QQBaseTableView <PushBannerViewAnimationDelegate, IFaceObserver, QQMessageViewCellDelegate> {
	NSMutableArray* _data;
	UIView* tipView;
	id _tableObject;
	QQPushBannerView_NetworkTips* _bannerNetworkTips;
	BOOL _needShowNetworkTips;
	QQPushBannerView_Advertisement* _bannerAdvertisement;
	BOOL _needShowAdvertisement;
	QQPushBannerView_AvatarSettingGuide* _bannerAvatarGuide;
	BOOL _needsAvatarGuideShow;
	QQPushBannerView_QRCodeLogin* _bannerQRCodeLogin;
	BOOL _needShowQRCodeLogin;
	BOOL _bannerAnimating;
	int _nextBannerType;
	BOOL _nextBannerVisible;
	BOOL _nextBannerNeedAnimation;
	BOOL _noTimeLabel;
	BOOL _simpleType;
	BOOL _isPendingSupported;
	BOOL _isMenuShow;
	UILongPressGestureRecognizer* _longPressGesture;
	NSIndexPath* _lastIndexPath;
	NSString* _systemMsgGroupCode;
	NSString* _systemMsgUin;
	UIView* _pushBannerView;
	NSString* _currentUin;
	NSString* _unReadImage;
@private
	int _viewType;
}
@property(retain, nonatomic) NSIndexPath* lastIndexPath;
@property(readonly, assign, nonatomic) BOOL isMenuShow;
@property(assign, nonatomic) BOOL isPendingSupported;
@property(assign, nonatomic) BOOL needShowQRCodeLogin;
@property(assign, nonatomic) BOOL needsAvatarGuideShow;
@property(assign, nonatomic) BOOL needShowAdvertisement;
@property(assign, nonatomic) BOOL needShowNetworkTips;
@property(retain, nonatomic) NSString* unReadImage;
@property(retain, nonatomic) UIView* pushBannerView;
@property(assign, nonatomic) BOOL simpleType;
@property(assign) BOOL noTimeLabel;
@property(assign, nonatomic) id tableObject;
@property(readonly, assign, nonatomic) NSArray* data;
@property(assign, nonatomic) int viewType;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)longPressGestureCallback:(id)callback;
-(void)menuControllerWillHide:(id)menuController;
-(void)onGestureEnded:(id)ended;
-(void)onGestureBegan:(id)began;
-(void)removeLongPressGesture;
-(void)addLongPressGesture;
-(void)RefreshRichMessageSendState:(id)state Result:(id)result GroupCode:(id)code Stage:(int)stage isGroup:(id)group;
-(void)refrushMessageModel:(id)model;
-(BOOL)GetSynchronQZoneStatus;
-(void)SetSynchronQZoneStatus:(BOOL)status;
-(void)reDrawMessageView:(CGRect)view;
-(void)deleteTroopMsg:(id)msg;
-(void)dealloc;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)onPendingMarked:(id)marked number:(id)number;
-(void)setPendingFlagFromModel:(id)model pending:(BOOL)pending;
-(BOOL)getPendingFlagFromModel:(id)model;
-(BOOL)getDraftingFlagFromModel:(id)model;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)showTipsIfNeeded;
-(void)actionGetUserInfo:(id)info;
-(void)ActionSearchGroupResult:(id)result;
-(void)setMessageViewData:(id)data;
-(void)UpdateAdvertisementPushBannerWithIndex:(int)index;
-(int)GetNextPushBannerType;
-(int)GetCurPushBannerType;
-(void)updatePushBannerWithAnimation:(BOOL)animation;
-(void)HidePushBanner:(int)banner animation:(BOOL)animation;
-(void)ShowPushBanner:(int)banner animation:(BOOL)animation;
-(CGRect)getPushBannerViewRect:(int)rect;
-(id)getPushBannerView:(int)view;
-(void)didPushBannerView:(id)view animationFinished:(BOOL)finished;
-(void)loadPushbannerImageWithIndex:(int)index animation:(BOOL)animation;
-(void)reloadTableData;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

@interface HeadGetImgView : NSObject {
}
+(void)removeImageObserver:(id)observer;
+(id)asynHeadGetImgView_Image:(id)image observer:(id)observer;
+(id)HeadGetImgView_Image:(id)image;
@end

@interface CellContentView : UIView {
	QQDiscussCell* _cell;
	BOOL _highlighted;
	float imageHeight;
	UIImageView* imgBg;
	UIImageView* imgShadow;
	UIImageView* iconState;
	UIImageView* iconNew;
	CGRect _rectVide;
	UIImageView* checkBoxView;
}
-(BOOL)isHighlighted;
-(void)setHighlighted:(BOOL)highlighted;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame cell:(id)cell;
@end

@interface QQDiscussCell : QQTableViewCell <IFaceObserver> {
	UIImage* _iconImage;
	NSString* nick;
	NSString* detail;
	UIView* cellContentView;
	NSString* pUin;
	UIImageView* _imageBackgroundView;
	float _nickFontSize;
	float _x_start;
	BOOL _isGroupMem;
	UIColor* _mSeparatorColor;
	int _Status;
	int _memberLevel;
	int _supportVide;
	BOOL _isMsfUser;
	BOOL _singleType;
	UIImage* _checkBoxIcon;
}
@property(retain, nonatomic) UIImage* checkBoxIcon;
@property(assign, nonatomic) BOOL singleType;
@property(assign, nonatomic) BOOL isMsfUser;
@property(assign, nonatomic) int supportVide;
@property(assign, nonatomic) int memberLevel;
@property(assign, nonatomic) int Status;
@property(retain, nonatomic) UIImage* iconImage;
@property(retain, nonatomic) UIColor* mSeparatorColor;
@property(assign, nonatomic) BOOL isGroupMem;
@property(assign, nonatomic) float x_start;
@property(assign, nonatomic) float nickFontSize;
@property(retain, nonatomic) NSString* pUin;
@property(retain, nonatomic) UIView* cellContentView;
@property(retain, nonatomic) NSString* detail;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) UIImageView* imageBackgroundView;
-(void)notifyGetHeadImageSucc:(id)succ;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setBackgroundColor:(id)color;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQFlowViewController : QQViewController <UITableViewDelegate, UITableViewDataSource> {
	UITableView* _tableView;
	UILabel* _day3GIMLabel;
	UILabel* _day3GPictureLabel;
	UILabel* _day3GVoiceLabel;
	UILabel* _day3GVideoLabel;
	UILabel* _day3GFileLabel;
	UILabel* _day3GQZoneLabel;
	UILabel* _day3GTotalLabel;
	UILabel* _total3GIMLabel;
	UILabel* _total3GPictureLabel;
	UILabel* _total3GVoiceLabel;
	UILabel* _total3GVideoLabel;
	UILabel* _total3GFileLabel;
	UILabel* _total3GQZoneLabel;
	UILabel* _total3GTotalLabel;
}
@property(retain, nonatomic) UILabel* total3GTotalLabel;
@property(retain, nonatomic) UILabel* total3GQZoneLabel;
@property(retain, nonatomic) UILabel* total3GFileLabel;
@property(retain, nonatomic) UILabel* total3GVideoLabel;
@property(retain, nonatomic) UILabel* total3GVoiceLabel;
@property(retain, nonatomic) UILabel* total3GPictureLabel;
@property(retain, nonatomic) UILabel* total3GIMLabel;
@property(retain, nonatomic) UILabel* day3GTotalLabel;
@property(retain, nonatomic) UILabel* day3GQZoneLabel;
@property(retain, nonatomic) UILabel* day3GFileLabel;
@property(retain, nonatomic) UILabel* day3GVideoLabel;
@property(retain, nonatomic) UILabel* day3GVoiceLabel;
@property(retain, nonatomic) UILabel* day3GPictureLabel;
@property(retain, nonatomic) UILabel* day3GIMLabel;
-(id)switchAction:(id)action;
-(void)dealloc;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)CreateThisMonthFlow;
-(void)CreateTodayFlow;
-(id)GetgFlowLabel:(CGRect)label alignment:(int)alignment DateSign:(int)sign;
-(void)loadView;
-(id)getFormatFlow:(long long)flow;
@end

@interface QQPTTSettingViewController : NSObject {
}
+(int)SetPTTPlayMode:(BOOL)mode;
@end

@interface QQSetupModelView : QQView {
	NSString* _viewTitle;
	id<QQSetupModelViewDelegate> m_delegate;
	BOOL _bRightBtn;
}
@property(assign, nonatomic) BOOL bRightBtn;
@property(assign, nonatomic) id<QQSetupModelViewDelegate> delegate;
@property(copy, nonatomic) NSString* viewTitle;
-(void)clickEdit:(id)edit;
-(void)clickBack:(id)back;
-(void)initHeaderView;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame textString:(id)string;
@end

@interface QQSetUpViewCell : UITableViewCell {
	UIButton* _headIconControl;
	UIImageView* _statusView;
	UILabel* _titleLabel;
	UILabel* _contentLabel;
	UILabel* _stateLabel;
	NSString* _signature;
	UIImageView* _newTip;
	BOOL _newFlag;
	QQSkinSwitch* _switchControl;
	NSDictionary* _dictionary;
}
@property(retain, nonatomic) UIImageView* statusView;
@property(retain, nonatomic) NSString* signature;
@property(retain, nonatomic) NSDictionary* dictionary;
@property(assign, nonatomic) BOOL newFlag;
@property(retain, nonatomic) UILabel* stateLabel;
@property(retain, nonatomic) UILabel* contentLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIControl* headIconControl;
@property(retain, nonatomic) QQSkinSwitch* switchControl;
-(void)updateCellWithAccount:(id)account;
-(id)GetVersion;
-(void)drawCellWithSwitch:(id)aSwitch;
-(void)drawCellWithNormalState:(id)normalState;
-(void)drawCellWithAccountCell:(id)accountCell;
-(float)GetHeightOfDictionary:(id)dictionary;
-(void)makeUp;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQSetupViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, QQSetupModelViewDelegate, SimpleAlertViewDelegate, IFaceObserver, IEditViewControllerObserver, RefreshRecommendViewController> {
@private
	NSMutableArray* listContentData;
	UITableView* listContenttableView;
	UIButton* _logoutButton;
	BOOL bNoneAccount;
	NSTimer* _reqTimeOutTimer;
	UserSummaryModel* _model;
	int lowDeviceOffset;
	BOOL _showLogoutProcess;
	BOOL _voiceNew;
	BOOL _personalityNew;
	int reqSummarySeqID;
	MultiLineEditViewController* _tmpEditViewCtl;
}
-(void)GetSignature:(id)signature;
-(void)RefreshViewController;
-(BOOL)CheckIfNewForPersonality;
-(BOOL)CheckIfAboutHaveNew;
-(void)BackFromBackGround:(id)backGround;
-(void)ayncSaveProfileModel:(id)model;
-(id)loadProfileModel:(long long)model;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(void)onResponseSummaryNotification:(id)notification;
-(id)creatDefaultModel:(int)model;
-(void)RequestPersonalInfo;
-(void)QQLoginViewShouldCancelLogin;
-(void)QQLoginViewDidLoginSuccessWithUin:(id)qqloginView password:(id)password;
-(void)QQLoginViewDidLoginWithUin:(id)qqloginView pwd:(id)pwd;
-(void)actionQuickResponse;
-(void)actionGotoMySignature;
-(void)NotifyGotoMySignature:(id)signature;
-(void)showImageUploadViewController;
-(void)showFeedBackView;
-(void)showQQTextInputPreferencesView;
-(void)showPersonalityView;
-(void)showAuxiliaryViewController;
-(void)showSecurityViewController;
-(void)showNewMsgTips;
-(void)showInfo;
-(void)showloginAccountListView;
-(void)setPassWord;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)ActionSDKUpgrade:(id)upgrade;
-(void)TimeOut:(id)anOut;
-(void)checkUpdate;
-(bool)showSettingViewByType:(int)type;
-(void)openNextViewController:(id)controller;
-(void)switchAction:(id)action;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)OpenAboutView;
-(bool)IsOpenRecvGrpMsg;
-(bool)IsRecvPushNofity;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)GetHeightOfDictionary:(id)dictionary;
-(void)QQSetupModelViewClickBack:(id)back;
-(void)didGetCommonCard:(id)card;
-(void)modifyQQZanInc:(id)inc;
-(void)modifyQQHeadNotify:(id)notify;
-(void)clickSwitch:(id)aSwitch;
-(id)GetStateString:(id)string;
-(id)GetValueForKey:(id)key;
-(void)viewWillDisappear:(BOOL)view;
-(void)restoreData;
-(void)actionGetSelfProfile:(id)profile;
-(void)actionCardInfoRefresh:(id)refresh;
-(void)actionCardInfoUpdate:(id)update;
-(void)setRedDot:(int)dot;
-(void)viewDidAppear:(BOOL)view;
-(void)removeObjectWithItemKey:(id)itemKey;
-(id)removeObjectFrom:(id)from forKey:(id)key;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)logoutButtonClicked;
-(void)notifyLoadHeadImageFinished:(id)finished;
-(void)notifyGetHeadImageSucc:(id)succ;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQSimpleViewController : UIViewController {
}
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
@end

@interface QQInvocation : NSObject {
	NSInvocation* _invocation;
	NSString* _key;
}
@property(retain, nonatomic) NSString* key;
+(id)InvocationTarget:(id)target action:(SEL)action for:(id)aFor;
-(BOOL)isEqualToTarget:(id)target;
-(void)invoke;
-(id)initTarget:(id)target selector:(SEL)selector for:(id)aFor;
-(void)dealloc;
@end

@interface QQBaseEngine : NSObject {
	NSMutableDictionary* _actionDictionary;
}
-(BOOL)hasInvocation:(id)invocation;
-(BOOL)invokInvocation:(id)invocation;
-(void)removeInvocationWithTarget:(id)target;
-(void)removeInvocationWith:(id)with;
-(void)addInvocation:(id)invocation;
-(void)dealloc;
-(id)init;
@end

@interface NSBoolean : NSObject {
	BOOL _value;
	BOOL _needsRedraw;
	BOOL _isSelected;
}
@property(assign, nonatomic) BOOL isSelected;
@property(assign, nonatomic) BOOL value;
+(id)NSBooleanWithValue:(BOOL)value;
-(id)init;
@end

@interface ParseRange : NSObject {
	int _location;
	int _length;
	NSString* _url;
	NSBoolean* _isHighlighted;
	int _stringType;
	CGRect _rect;
	ParseRange* _parentRange;
	NSRange _imageRange;
	NSString* _text;
	NSString* _selectedText;
	NSMutableArray* _selectedTexts;
}
@property(retain, nonatomic) NSMutableArray* selectedTexts;
@property(retain, nonatomic) NSString* selectedText;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) NSRange imageRange;
@property(retain, nonatomic) ParseRange* parentRange;
@property(assign, nonatomic) CGRect rect;
@property(retain, nonatomic) NSBoolean* isHighlighted;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) int stringType;
@property(assign, nonatomic) int length;
@property(assign, nonatomic) int location;
+(id)rangeWithLocation:(int)location length:(int)length;
-(void)addSelectedDic:(id)dic;
-(id)description;
-(int)compare:(id)compare;
-(void)dealloc;
-(NSRange)toNSRange;
-(id)init;
@end

@interface ParseRect : NSObject {
	float x;
	float y;
	float w;
	float h;
	int line;
}
@property(assign) int line;
@property(assign) float h;
@property(assign) float w;
@property(assign) float y;
@property(assign) float x;
+(id)rectWithX:(int)x y:(int)y w:(int)w h:(int)h line:(int)line;
+(id)rectWithX:(int)x y:(int)y w:(int)w h:(int)h;
-(CGRect)toCGRect;
-(BOOL)ContainPoint:(CGPoint)point;
@end

@interface EmotionParseResult : NSObject {
	int _totalH;
	int _maxW;
	int _layoutWidth;
	NSString* _text;
	NSMutableArray* _strRangeList;
	NSMutableArray* _imgRangeList;
	NSMutableArray* _strRectList;
	NSMutableArray* _imgRectList;
	NSMutableArray* _lineHeightList;
	NSMutableArray* _strSelectdRangeList;
}
@property(retain, nonatomic) NSMutableArray* strSelectdRangeList;
@property(retain, nonatomic) NSMutableArray* lineHeightList;
@property(retain, nonatomic) NSMutableArray* imgRectList;
@property(retain, nonatomic) NSMutableArray* strRectList;
@property(retain, nonatomic) NSMutableArray* imgRangeList;
@property(retain, nonatomic) NSMutableArray* strRangeList;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) int layoutWidth;
@property(assign) int maxW;
@property(assign) int totalH;
-(void)divideSelectedRangeList:(id)list;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface EmotionParse : NSObject {
}
+(id)parseNumber:(id)number;
+(id)parseEmail:(id)email;
+(id)parseURL:(id)url;
+(id)GetText:(id)text text:(id)text2;
+(id)getQQUrlsWithLayoutResult:(id)layoutResult atPoint:(CGPoint)point;
+(void)loadGifView:(id)view withStringPath:(id)stringPath;
+(void)drawQQEmotionString:(id)string inView:(id)view inRect:(CGRect)rect withFont:(id)font withLayoutResult:(id)layoutResult color:(id)color shadowColor:(id)color7 shadowOffset:(CGSize)offset shadowBlur:(float)blur;
+(void)drawQQEmotionString:(id)string inView:(id)view inRect:(CGRect)rect withFont:(id)font withLayoutResult:(id)layoutResult color:(id)color isShadow:(BOOL)shadow animated:(BOOL)animated;
+(id)layoutQQEmotionString:(id)string maxWidth:(float)width font:(id)font emotionWidth:(float)width4;
+(id)layoutQQEmotionString:(id)string maxWidth:(float)width font:(id)font;
+(id)layoutQQEmotionStringNormally:(id)normally maxWidth:(float)width maxHeight:(float)height font:(id)font emotionWidth:(float)width5;
+(void)makeStrRectList:(id)list url:(id)url font:(id)font;
+(id)getInfoStringArray:(id)array;
@end

@interface QzoneUtil : NSObject {
}
+(BOOL)isRetinaScreen;
+(id)intToStrMax999Simple:(int)strMax999Simple;
+(id)encodeURLWithHex:(id)hex;
+(BOOL)TestNetworkState;
+(void)setWaitView:(id)view;
+(id)getWaitView;
+(id)getStart:(int)start;
+(id)timestamp:(long)timestamp;
+(id)DateToString:(id)string DATE:(BOOL)date;
+(id)DateToTimeString:(id)timeString;
+(void)plsyWAVSound:(int)sound;
+(id)timeToStr:(int)str;
@end

@interface CFFootView : UIView {
	int _style;
	BOOL _isLoading;
	BOOL _NotDraw;
	BOOL _drawBg;
	BOOL _animating;
	UILabel* _fontLabel;
	NSString* _labelTextValue;
@private
	UIActivityIndicatorView* _progress;
	UIImageView* _progressStaticView;
	UIImageView* _progressDynamicView;
	UIImageView* _progressBackgroundView;
	int _state;
@protected
	id<CFFootViewDelegate> _delegate;
}
@property(assign, nonatomic) BOOL drawBg;
@property(assign, nonatomic) id<CFFootViewDelegate> delegate;
@property(retain, nonatomic) NSString* labelTextValue;
@property(retain, nonatomic) UILabel* fontLabel;
@property(assign, nonatomic) int style;
-(void)dealloc;
-(bool)isLoad;
-(void)stopLoad;
-(void)startLoad;
-(void)reFreshFoot;
-(void)reFresh;
-(void)stopLoadState;
-(void)setLoad;
-(id)getRefreshBtnAnimation;
-(void)reSetPosition;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setNeedDrawLine:(BOOL)line;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface AdPicConfigSubItem : NSObject {
	long cID;
	BOOL cShow;
	BOOL cType;
	NSString* sDes;
	NSString* sImg;
}
@property(retain, nonatomic) NSString* sImg;
@property(retain, nonatomic) NSString* sDes;
@property(assign, nonatomic) BOOL cType;
@property(assign, nonatomic) BOOL cShow;
@property(assign, nonatomic) long cID;
-(void)dealloc;
@end

@interface AdPicConfigItem : AdConfigItemBase <TTURLRequestDelegate> {
	unsigned long dwSEQ;
	unsigned long dwSTM;
	unsigned long dwETM;
	NSMutableArray* subItems;
}
@property(assign, nonatomic) unsigned long dwETM;
@property(assign, nonatomic) unsigned long dwSTM;
@property(assign, nonatomic) unsigned long dwSEQ;
-(id)GetSubItemPicFileName:(int)name;
-(int)GetSubItemCount;
-(unsigned)GetSeq;
-(void)requestDidFinishLoad:(id)request;
-(void)downloadDefaultPic:(id)pic;
-(BOOL)ParseDecrypt:(short)decrypt decryptData:(char*)data decryptLen:(int)len local:(BOOL)local;
-(BOOL)CheckOutDate;
-(void)dealloc;
@end

@interface QIMDTextInputFuzzysViewController : QQViewController <UITableViewDataSource, UITableViewDelegate> {
	UITableView* tableView_;
	NSMutableArray* fuzzys_;
}
-(void)didReceiveMemoryWarning;
-(void)fuzzysSwitchButtonAction:(id)action;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QIMDTextInputPreferencesViewController : QQViewController <QIMDictManagerDelegate, UITableViewDataSource, UITableViewDelegate> {
	UIActivityIndicatorView* activityIndicatorView_;
	NSMutableArray* options_;
	NSMutableArray* fuzzys_;
	UITableView* tableView_;
	UILabel* _importTipLabel;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)OnDeselectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)importAddressbookPhrase;
-(void)fuzzysSwitchButtonAction:(id)action;
-(void)optionsSwitchButtonAction:(id)action;
-(void)setOptionsByName:(id)name cell:(id)cell indexPath:(id)path;
-(void)rightBarButtonAction;
-(void)dictManagerDictDidCancelled;
-(void)dictManagerDictDidEndImport:(XXStruct_VrsxJB)dictManagerDict;
-(BOOL)dictManagerDictDidImporting:(float)dictManagerDict currentItem:(id)item;
-(void)dictManagerDictWillBeginImport:(int)dictManagerDict;
-(void)dictManagerDictDidError:(int)dictManagerDict;
@end

@interface QIMPlugInCustomView : UIView {
}
-(void)drawRect:(CGRect)rect;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface LBSServerEngine : NSObject <CLLocationManagerDelegate, CIMLbsSvrEngineDelegate, ILBSService, IPacketSendResultHandler> {
	CLLocationManager* _locationManager;
	int _nLat;
	int _nLon;
	int _nAlt;
	long long _nMac;
	double _nHorizontalAccuracy;
	BOOL _bCheckin;
	BOOL _bGetNeighbors;
	BOOL _bGetEncounter;
	BOOL _bGetLocation;
	BOOL _bGetNearByGroup;
	int _nListType;
	int _elistType;
	int _lbsRetryCount;
	BOOL _isUpdateLocation;
	CLLocation* _lastLocation;
	CUserData* _nUserData;
	CUserData* _eUserData;
	long long _vTagsID;
	int _clientTime;
	int _eDirectionType;
	NSArray* _clientData;
	NSData* _vSelfSig;
	BOOL _hasUpdateLbs;
	NSTimer* _lbsTimeoutTimer;
	NSMutableDictionary* _seqDict;
	BOOL _updateWgs84Location;
	BOOL _bCheckLocation;
	NSData* _nearbyGroupListcontextData;
}
@property(retain, nonatomic) CLLocation* lastLocation;
@property(retain, nonatomic) CUserData* eUserData;
@property(retain, nonatomic) CUserData* nUserData;
@property(assign, nonatomic) double nHorizontalAccuracy;
@property(assign, nonatomic) int nAlt;
@property(assign, nonatomic) int nLon;
@property(assign, nonatomic) int nLat;
+(id)shareInstance;
-(void)CIMLBSSvrEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)UpdateWgs84Location;
-(BOOL)QQCheckRobertMsg:(Msg*)msg;
-(id)getTextMsgArrayFromWupData:(Msg*)wupData msgItem:(MsgItem*)item fromUIN:(long long)uin;
-(id)getEncounterUserDataFromWupData:(UserData*)wupData;
-(id)getEncounterListFromWupData:(vector<EncounterSvc::RespEncounterInfo, std::allocator<EncounterSvc::RespEncounterInfo> >*)wupData groupList:(vector<EncounterSvc::GroupInfo, std::allocator<EncounterSvc::GroupInfo> >*)list nearByGroupEnter:(id)enter;
-(id)getNearByGroupRspInfo:(RspGetNearbyGroup*)info;
-(id)getNearByGroupListFromeRsp:(RspGetNearbyGroup*)rsp;
-(id)getNearByGroupEnterModel:(RespGetEncounterV2*)model;
-(id)getNearByGroupModelFromWupData:(GroupInfo*)wupData;
-(id)getEncounterInfoFromWupData:(RespEncounterInfo*)wupData;
-(void)changeAccount;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)delayUpdateWGS84LocationFailNotification;
-(void)delayUpdateWGS84LocationSuccNotification;
-(void)sendLbsRequest;
-(long long)getWifiMacAddress;
-(id)locationManager;
-(void)saveLBSCheckinTime;
-(int)getLBSLastCheckinTime;
-(void)getCurrentLocation;
-(BOOL)getNearByGroupList:(id)list;
-(BOOL)getEncounterV2:(id)a2 tagsID:(long long)anId;
-(BOOL)getEncounterV2:(id)a2 newListType:(int)type;
-(BOOL)getEncounterV2:(id)a2 newListType:(int)type withlon:(int)withlon withlat:(int)withlat;
-(BOOL)getNeighbors:(id)neighbors listType:(int)type;
-(BOOL)isNeedToUpdateLocation;
-(void)doLBSLocation:(long long)location;
-(void)doLBSOpen;
-(void)doLBSCheckout;
-(void)doLBSCheckin:(BOOL)checkin;
-(void)stopUpdateLocation;
-(void)startUpdateLocation;
-(void)actionLbsTimeout;
-(void)beginLbsTimeoutTimer;
-(void)stopLbsTimeoutTimer;
-(void)RequestGetLocation:(int)location lon:(int)lon alt:(int)alt isMars:(BOOL)mars;
-(void)notifyGetLocationFail;
-(void)deleteBlackList:(id)list type:(int)type;
-(void)insertBlackList:(id)list type:(int)type;
-(void)swapBlackList:(id)list;
-(void)getBlackList:(long long)list;
-(void)sendEncounterSelfClientMsg:(id)msg accostType:(int)type msgType:(int)type3 toUin:(long long)uin actionUrl:(id)url;
-(void)sendEncounterClientMsg:(id)msg accostType:(int)type msgType:(int)type3 toUin:(long long)uin extraInfo:(id)info;
-(int)getMsgItemType:(int)type;
-(void)RequestSetUserState:(int)state;
-(void)RequestGetNearbyGroup:(int)group isTraversing:(BOOL)traversing context:(id)context;
-(void)RequestGetEncounterV2:(int)a2 isTraversing:(BOOL)traversing;
-(void)notifyGetNearByGroupFail;
-(void)notifyGetEncounterFail;
-(void)RequestGetNeighbors;
-(void)notifyGetNeighborsFail;
-(void)RequestCheckIn;
-(void)didHandleGetSelfShareTrace:(RespGetSelfShareTrace)trace;
-(void)didHandleGetLastPosition:(RespGetLastPosition)position;
-(void)didHandleGetEvent:(RespGetEvent)event;
-(void)didHandleSetShareTrace:(RespSetShareTrace)trace;
-(void)didHandleShareTraceList:(ShareTraceList*)list;
-(void)didRespPushCardMsg:(PushCardMsg*)msg;
-(void)RequestGetSelfShareTrace;
-(void)RequestGetLastPosition:(id)position;
-(void)notifyGetLastPositionFail;
-(void)RequestGetShareTrace:(id)trace;
-(void)RequestSetShareTrace:(BOOL)trace;
-(void)RequestGetEvent:(id)event;
-(BOOL)handleRecivedPacket:(char*)packet bufferLength:(int)length sendingModel:(id)model;
-(void)notifyMsgSentResult:(id)result result:(int)result2;
-(id)init;
-(void)dealloc;
@end

@interface CLbsGroup : QQModel {
	NSString* _groupName;
	NSMutableArray* _infoList;
}
@property(retain, nonatomic) NSMutableArray* infoList;
@property(retain, nonatomic) NSString* groupName;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface AccostMessageCellView : UIView {
	QQAsynHeadImageView* _headImg;
	UIImageView* _unreadView;
	UIImageView* _bgImageView;
	UILabel* _timeLabel;
	UILabel* _nickNameLabel;
	UILabel* _msgTypeLabel;
	QQRecentLabel* _detailMsgLabel;
	QQMessageModel* _msgModel;
}
-(void)setData:(id)data;
-(void)layoutModelResultFromSession:(id)session label:(id)label;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface AccostMessageViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate, UIActionSheetDelegate> {
	UITableView* _table;
	NSMutableArray* _msgArray;
	UIButton* _moreNearbyBtn;
	int page;
	QQRecentMessageModel* _recentMsgModel;
	BOOL _goBackWhenClickBottomButton;
}
@property(assign) BOOL goBackWhenClickBottomButton;
@property(retain, nonatomic) QQRecentMessageModel* recentMsgModel;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onClickClearButton:(id)button;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)actionSearchMorePeople;
-(void)restoreData;
-(void)actionGetUserInfo:(id)info;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(id)loadData;
-(void)dealloc;
-(void)haveNewAccMsg:(id)msg;
-(id)init;
@end

@interface QQLbsFriendsWordViewController : MultiLineEditViewController <IEditViewControllerObserver> {
	UIView* _bottomView;
	BOOL _synToSig;
}
-(void)dealloc;
-(void)commitCardIntroInfoCallBack:(id)back;
-(void)sendQQSignatureCallback:(id)callback;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(void)changeSynToSigState;
-(void)viewDidUnload;
-(void)loadView;
-(id)initWithContent:(id)content maxWords:(int)words;
@end

@interface QQLbsGuideView : UIView {
}
-(void)drawRect:(CGRect)rect;
@end

@interface QQLbsGuideViewController : QQViewController <UITableViewDelegate, QQTableFootViewDelegate> {
	BOOL goBackWhenClickBottomButton;
}
@property(assign) BOOL goBackWhenClickBottomButton;
-(void)setNeedShowShareLBSGuide:(bool)guide;
-(bool)isNeedShowShareLBSGuide;
-(void)reloadMoreSources;
-(void)reloadData;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)cancelButtonPress:(id)press;
-(void)agreeButtonPress:(id)press;
-(void)loadView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(id)init;
@end

@interface QQLbsNearbyFriendViewController : QQViewController <UIActionSheetDelegate, UIAlertViewDelegate, NearbyFriendTableViewDelegate, SMSEditMenuDelegate> {
	NSMutableArray* _dataList;
	UIView* _contentView;
	NearbyFriendTableView* _tableView;
	QQTableFootView* _tableFootView;
	QQNobodyView* _nobodyView;
	UIButton* _downButton;
	int _sortType;
	BOOL _reloading;
	BOOL _bFetchNew;
	BOOL _bAutoRefresh;
	ODRefreshControl* _refreshControl;
	int _total;
	BOOL _firstGet;
	CUserData* _userData;
	BOOL _isListType;
	BOOL _needWarning;
	BOOL _goBackWhenClickBottomButton;
	BOOL _viewIsUnloaded;
	float _contentOffset;
	BOOL _locationEnable;
	SMSEditMenu* _popupMenu;
	NSString* _headUin;
	AccostMsgSenderListView* _headListView;
	NSData* _coverFileKey;
	MakeFriendsCardModel* _cardModel;
	QQFlipImageView* _coverView;
	NearbyFriendTableHeaderView* _tableHeaderView;
	BOOL _isDownloadCover;
	NSTimer* _timer;
	NSString* _sig;
	int _lon;
	int _lat;
	int _ctrl_Type;
	NSString* _throughTitle;
@private
	int currPage;
}
@property(assign, nonatomic) int currPage;
@property(assign) BOOL goBackWhenClickBottomButton;
@property(assign) BOOL needWarning;
-(void)resetCoverPositionByTableOffset;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)setCoverWithFileKey:(id)fileKey animation:(BOOL)animation;
-(void)loadCardModel;
-(void)upDateCardInfo:(id)info;
-(void)getCoverImageNotify:(id)notify;
-(void)getSimpleInfoCallback:(id)callback;
-(void)showPopupMenu;
-(void)didMenuClick:(id)click buttonIndex:(int)index;
-(BOOL)getMoreData:(id)data;
-(BOOL)refreshTableList:(id)list;
-(void)changeTableStyle;
-(void)clearAndCheckout;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(BOOL)getMoreEncounter;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dropViewDidBeginRefreshing:(id)dropView;
-(BOOL)refreshEncounterList;
-(void)enterBackground;
-(void)stopRefreshingTask;
-(void)actionSeeAccostMsg;
-(void)layoutAccostMsgEntryButton;
-(id)GetCurrentTitle;
-(void)loadView;
-(void)updateContentView;
-(void)doneLoadingTableViewData:(id)data failTips:(id)tips;
-(void)getDataTimeOut:(id)anOut;
-(void)getLocationFailCallback:(id)callback;
-(void)resetContentView:(BOOL)view failTips:(id)tips;
-(void)delayEndRefreshing:(BOOL)refreshing failTips:(id)tips;
-(void)getEncounterCallback:(id)callback;
-(id)getNobodyView;
-(id)getTableDataByEncounters:(id)encounters;
-(void)updateRightButton;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)handleNewNeighborFeedNotification:(id)notification;
-(void)actionGetQQMessage:(id)message;
-(void)setThroughMode:(id)mode withLon:(int)lon withLat:(int)lat;
-(id)init;
-(void)forceUpdateEncounterList;
-(void)autoUpdateEncounterList;
-(void)resetControllerTitle;
@end

@interface QQLbsRecentCell : UITableViewCell {
	UIImageView* _bgImgView;
	QQAsynHeadImageView* _iconButton;
	UILabel* _nickLabel;
	QQLabel* _detailLabel;
	UILabel* _timeLabel;
	UIImageView* _havePhotoIconView;
	NSIndexPath* _indexPath;
	id _touchDelegate;
}
@property(assign, nonatomic) id touchDelegate;
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(retain, nonatomic) UILabel* timeLabel;
@property(retain, nonatomic) QQLabel* detailLabel;
@property(retain, nonatomic) UILabel* nickLabel;
@property(retain, nonatomic) QQAsynHeadImageView* iconButton;
-(void)dealloc;
-(void)setHavePhoto:(BOOL)photo;
-(void)setUnReadState:(BOOL)state;
-(void)setHeadImage:(id)image;
-(void)setTime:(id)time;
-(void)setDetail:(id)detail;
-(void)setNick:(id)nick;
-(id)initWithFrame:(CGRect)frame reuseIdentifier:(id)identifier;
@end

@interface QQLbsRecentController : QQViewController <UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource> {
	long long _uin;
	BOOL _isRefresh;
	BOOL _isInit;
	UITableView* _messageView;
	ODRefreshControl* _refreshControl;
	NSMutableArray* _msgList;
	NSMutableArray* _feedList;
	NSMutableArray* _downloadList;
	NSMutableArray* _tableData;
	int _feedSeq;
	int _feedTimeStamp;
}
-(void)iconTouch:(id)touch;
-(void)didReceiveMemoryWarning;
-(void)restoreData;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)delayEndRefreshing:(BOOL)refreshing;
-(void)dropViewDidBeginRefreshing:(id)dropView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)handleRequestTimeout:(id)timeout;
-(void)handleNewNeighborFeedNotification:(id)notification;
-(void)handleNeighborFeedListNotification:(id)notification;
-(id)getMoreFeedBySeqId:(int)anId;
-(void)loadMoreFeed:(id)feed;
-(void)onClickEditButton:(id)button;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(void)doneLoadingTableViewData:(id)data;
-(void)resetLoadingFlagAfterDelayCallBack;
-(void)forceUpdateNeighborFeedList;
-(void)autoUpdateNeighborFeedList;
-(void)refreshNeighborFeedList;
@end

@interface NeighborMoreFeedCell : UITableViewCell {
}
-(id)initWithMoreFeed:(id)moreFeed;
@end

@interface NearbyFriendTableView : UITableView <UITableViewDelegate, UITableViewDataSource, CFFootViewDelegate> {
	int _tableStyle;
	int _hasMoreData;
	BOOL _hasNewGuide;
	id<NearbyFriendTableViewDelegate> _tableDelegate;
	NSMutableArray* _dataList;
	CFFootView* _footerView;
	EGORefreshTableHeaderView* _refreshHeaderView;
	NSString* _footerLabelWhenNoMoreData;
	NSString* _footerLabelWhenHasMoreData;
	NSString* _footerLabelWhenRequestTimeout;
	BOOL _noTableFooter;
	BOOL _noUpdateWhenScroll;
	int _accType;
	BOOL _disPlayTime;
	BOOL _editRow;
@private
	BOOL noBottomBar;
}
@property(retain, nonatomic) CFFootView* footerView;
@property(retain, nonatomic) NSString* footerLabelWhenRequestTimeout;
@property(retain, nonatomic) NSString* footerLabelWhenHasMoreData;
@property(retain, nonatomic) NSString* footerLabelWhenNoMoreData;
@property(assign, nonatomic) EGORefreshTableHeaderView* refreshHeaderView;
@property(retain, nonatomic) NSMutableArray* dataList;
@property(assign, nonatomic) id<NearbyFriendTableViewDelegate> tableDelegate;
@property(assign, nonatomic, setter=setNoBottomBar:) BOOL noBottomBar;
@property(assign, nonatomic, setter=setNoTableFooter:) BOOL noTableFooter;
@property(assign, nonatomic, setter=setHasMoreData:) int hasMoreData;
@property(assign, nonatomic) int tableStyle;
@property(assign) BOOL editRow;
@property(assign) BOOL disPlayTime;
@property(assign) BOOL noUpdateWhenScroll;
@property(assign) BOOL hasNewGuide;
@property(assign) int accType;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)startRefresh:(id)refresh;
-(void)stopLoadMore;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)initNearbyFriendView:(id)view withEncounterInfo:(id)encounterInfo;
-(void)initCardStyleCellView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)initListStyleCellView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)getSystemPortraitFromCache:(int)cache;
-(id)getHeadImageFromCache:(id)cache;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)updateMyMakeFriendsCardCallBack:(id)back;
-(void)actionDelNewGuidBanner:(id)banner;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQLbsNewGuideCellView : UIView {
	CEncounterInfo* _friendInfo;
}
@property(retain, nonatomic) CEncounterInfo* friendInfo;
-(void)dealloc;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)actionDelPushbanner;
-(id)init;
@end

@interface NearbyFriendListStyleView : NearbyFriendBaseView {
	UIImageView* _bgImgView;
	UIImageView* _sexView;
	UILabel* _nicknameLabel;
	UILabel* _pyNameLabel;
	UIImageView* _vipView;
	UILabel* _sexAgeLabel;
	UILabel* _locationLabel;
	UILabel* _introContentLabel;
	UILabel* _timeLabel;
	UIImageView* _morePicIcon;
	UIImageView* _businessPicIcon;
	UIImageView* _newSignIcon;
	UIImageView* _moreIcon;
	UIImageView* _favorite;
	BOOL _touchPara;
	int _accType;
	BOOL _disPlayTime;
	BOOL _edit;
}
@property(assign, nonatomic) BOOL edit;
@property(assign, nonatomic) BOOL disPlayTime;
@property(assign, nonatomic) int accType;
@property(assign, nonatomic) BOOL touchPara;
-(void)dealloc;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setEncounterInfo:(id)info;
-(CGSize)string:(id)string safeSizeWithFont:(id)font;
-(void)setHighlighted:(BOOL)highlighted;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SexAgeLabelView : UIView {
	int _sex;
	NSString* _text;
	UIImageView* _maleView;
	UIImageView* _femaleView;
	BOOL _merchant;
	UIImageView* _merchantView;
}
-(void)dealloc;
-(void)setSex:(BOOL)sex distance:(id)distance merchant:(BOOL)merchant;
-(void)setSex:(BOOL)sex age:(int)age merchant:(BOOL)merchant;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface NearbyFriendCardStyleView : NearbyFriendBaseView {
	SexAgeLabelView* _sexAgeView;
	BOOL _touchPara;
	int _accType;
	BOOL _isUpdateImg;
	UIImageView* _vipView;
}
@property(assign, nonatomic) BOOL touchPara;
@property(assign, nonatomic) int accType;
-(void)dealloc;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setEncounterInfo:(id)info;
-(void)setHighlighted:(BOOL)highlighted;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQCardLabeScrollView : UIView <UIScrollViewDelegate> {
	TXScrollView* scrollView1;
	QQPageControl* pageControl;
	float boardWdith;
}
@property(retain, nonatomic) TXScrollView* scrollView1;
-(void)dealloc;
-(void)changeButtonState:(id)state;
-(void)layoutScrollImages;
-(void)pageControlDidChange:(id)pageControl;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQCardLabelShowView : UIView {
	NSMutableArray* _dataSource;
	int _numPerRow;
	int _width;
	int _height;
	UILabel* _emptyLabel;
	id<QQCardLabelShowViewDelegate> _delegate;
}
@property(assign, nonatomic) id<QQCardLabelShowViewDelegate> delegate;
-(void)dealloc;
-(void)deleteView:(id)view;
-(void)showLabel;
-(void)setDefaultTips:(id)tips;
-(void)setNumPerRow:(int)row;
-(void)setDataArray:(id)array;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQPeronalCardLabelController : QQViewController <QQCardLabelSetsViewDelegate, QQCardLabelShowViewDelegate, UIScrollViewDelegate> {
	NSString* _uin;
	UIView* _bgView;
	UILabel* _titleLable;
	UILabel* _countLabel;
	QQCardLabeScrollView* _labelSetView;
	QQCardLabelShowView* _labelShowView;
	UIScrollView* _scrollView;
	NSMutableArray* selectedTagAry;
	NSMutableArray* _oldTagAry;
	NSMutableArray* _originTagArray;
}
@property(retain, nonatomic) NSString* uin;
-(void)dealloc;
-(void)didRemoveLabel:(id)label;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)enCodeTagID:(id)anId;
-(BOOL)didSelectLabel:(id)label;
-(void)setTagFail:(id)fail;
-(void)setTagCallBack:(id)back;
-(void)setTagError:(id)error;
-(void)saveAction;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)loadView;
-(id)initWithuin:(id)withuin tagArray:(id)array;
@end

@interface QQCardButton : NSObject {
	CGRect _frame;
	id _object;
	SEL _sel;
	NSString* _title;
	UIFont* _font;
	BOOL _isSelected;
	BOOL _isHightLinght;
	BOOL _textRap;
	UIColor* _normalColor;
	UIColor* _hightLinghtColor;
	UIImage* _backGroundNoramlImage;
	UIImage* _backGroundHightLinghtImage;
	NSString* _imagePath;
	int _index;
	BOOL _drawShadow;
}
@property(assign) BOOL drawShadow;
@property(assign, nonatomic) int index;
@property(retain, nonatomic) NSString* imagePath;
@property(retain, nonatomic) UIImage* backGroundHightLinghtImage;
@property(retain, nonatomic) UIImage* backGroundNoramlImage;
@property(retain, nonatomic) UIColor* hightLinghtColor;
@property(retain, nonatomic) UIColor* normalColor;
@property(assign, nonatomic) BOOL textRap;
@property(assign, nonatomic) BOOL isHightLinght;
@property(assign, nonatomic) BOOL isSelected;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) CGRect frame;
-(id)getTargetObj;
-(void)sendAction:(id)action;
-(void)addTarget:(id)target action:(SEL)action;
-(void)drawInRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQCardLabelSetsView : UIView {
	NSMutableArray* _rangeData;
	NSString* _titleData;
	NSString* _introData;
	NSMutableArray* _buttonTitles;
	NSMutableArray* _butonImg;
	NSMutableArray* _butonSelImg;
	NSMutableArray* _butonColor;
	NSMutableArray* _butonSelColor;
	int _height;
	int _margin;
	UIFont* _txtFont;
	BOOL _canNotSelected;
	id<QQCardLabelSetsViewDelegate> _delegate;
	BOOL _needModifyTitle;
	BOOL _displayEditBtn;
	NSString* _emptyTip;
}
@property(assign, nonatomic) id<QQCardLabelSetsViewDelegate> delegate;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(int)getHeight;
-(void)changeButtonState:(id)state;
-(void)selectMe:(id)me;
-(void)selectEditButton:(id)button;
-(void)selctedCardButton:(id)button;
-(void)drawRect:(CGRect)rect;
-(void)draw;
-(void)initSelectButtonState:(id)state;
-(void)setSelectState:(BOOL)state;
-(void)setEmptyTip:(id)tip;
-(void)setModifyFlag:(BOOL)flag;
-(void)setAddEditBtn:(BOOL)btn;
-(void)setMargin:(int)margin;
-(void)setFont:(id)font;
-(void)setIntro:(id)intro;
-(void)setTitle:(id)title;
-(void)setDataArray:(id)array;
-(void)setBtnSelColor:(id)color;
-(void)setBtnColor:(id)color;
-(void)setBtnSelImage:(id)image;
-(void)setBtnImage:(id)image;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QAdMsgManager : NSObject {
	unsigned _uin;
	NSString* _nickName;
}
@property(retain, nonatomic) NSString* nickName;
@property(assign, nonatomic) unsigned uin;
+(id)GetInstance;
-(void)dealloc;
-(int)getADMsgType:(id)type;
-(id)QAdMsgFactory:(id)factory uin:(long long)uin nick:(id)nick;
-(id)QAdLocalMsgParser:(id)parser;
-(BOOL)isQuerySupportLocalMsg:(id)msg;
-(id)GetSubJect:(id)ject;
-(id)GetDesc:(id)desc;
-(id)GetRespContent:(id)content;
-(id)GetRespDesc:(id)desc;
-(id)GetRespContentTypes:(id)types;
-(id)GetRespCondition:(id)condition;
-(id)GetRespDest:(id)dest;
-(id)getStringByKeyWord:(id)word keyWord:(id)word2 urlEncode:(BOOL)encode;
-(BOOL)isWapMsg:(id)msg;
-(BOOL)isLocalMsg:(id)msg;
-(int)IsManualMsg:(id)msg;
-(id)init;
@end

@interface CustomFaceManager : NSObject {
	NSString* _uin;
	NSMutableArray* _customFaceList;
	NSDictionary* _customFaceMd5Dict;
	NSDictionary* _customFaceOrgMd5Dict;
	bool _isFaceChange;
	BOOL _isFaceLandscapeChange;
	bool _groupFaceChanged;
}
@property(assign) BOOL FaceLandscapeChange;
@property(assign) bool groupFaceChanged;
@property(assign) bool FaceChange;
+(id)getInstance;
-(void)copyCustomFaceToPath:(id)path withName:(id)name byMd5:(id)a5;
-(BOOL)isCustomFaceExist:(id)exist;
-(id)getCustomFaceNameByPictureName:(id)name;
-(id)getMd5StringByPictureName:(id)name;
-(void)deleteCustomFaceRecord:(id)record;
-(void)addCustomFaceRecord:(id)record name:(id)name;
-(void)addCustomFaceSettingItem;
-(BOOL)isFaceLandscapeChange;
-(bool)isFaceChange;
-(void)reloadCustomFaceList;
-(id)getCustomFaceList;
-(void)setUin:(long long)uin;
-(void)deleteUin;
-(void)dealloc;
-(id)init;
@end

@interface CEncounterInfo : NSObject {
	long long lEctID;
	NSString* strUin;
	int iDistance;
	NSString* strDistance;
	int lTime;
	NSString* strDescription;
	short wFace;
	BOOL cSex;
	BOOL cAge;
	NSString* strNick;
	NSString* strPYFaceUrl;
	NSString* strShoolName;
	NSString* strCompanyName;
	NSString* strPYName;
	int nFaceNum;
	NSString* strCertification;
	short shIntroType;
	NSData* vIntroContent;
	NSData* vFaceID;
	int iMerchantType;
	int iUserIdentityType;
	int iVoteIncrement;
	BOOL bIsSingle;
	int iLat;
	int iLon;
	int iFavorite;
	int vipType;
}
@property(assign) int vipType;
@property(assign) int iFavorite;
@property(assign) int iLon;
@property(assign) int iLat;
@property(assign) BOOL bIsSingle;
@property(assign) int iVoteIncrement;
@property(assign) int iUserIdentityType;
@property(assign) int iMerchantType;
@property(retain, nonatomic) NSData* vFaceID;
@property(retain, nonatomic) NSData* vIntroContent;
@property(assign) short shIntroType;
@property(retain, nonatomic) NSString* strCertification;
@property(assign) int nFaceNum;
@property(retain, nonatomic) NSString* strPYName;
@property(retain, nonatomic) NSString* strCompanyName;
@property(retain, nonatomic) NSString* strShoolName;
@property(retain, nonatomic) NSString* strPYFaceUrl;
@property(retain, nonatomic) NSString* strNick;
@property(assign) BOOL cAge;
@property(assign) BOOL cSex;
@property(assign) short wFace;
@property(retain, nonatomic) NSString* strDescription;
@property(assign) int lTime;
@property(retain, nonatomic) NSString* strDistance;
@property(assign, nonatomic) int iDistance;
@property(retain, nonatomic) NSString* strUin;
@property(assign, nonatomic) long long lEctID;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface QQNoSameLabelView : UIView {
}
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQLbsSameLabelViewController : QQViewController <UIActionSheetDelegate, EGORefreshTableHeaderDelegate> {
	NSString* _uin;
	unsigned long long _tagId;
	NSMutableArray* _dataList;
	UIView* _contentView;
	NearbyFriendTableView* _tableView;
	QQTableFootView* _tableFootView;
	QQNoSameLabelView* _nobodyView;
	int _sortType;
	BOOL _reloading;
	BOOL _bFetchNew;
	BOOL _style;
	EGORefreshTableHeaderView* _refreshHeaderView;
	UIActivityIndicatorView* _actIndicatorView;
	NSTimer* _timeoutTimer;
	int _total;
	BOOL _firstGet;
	BOOL _requstTag;
	CUserData* _userData;
}
@property(retain, nonatomic) NSString* uin;
-(void)dealloc;
-(int)egoRefreshTableHeaderDataSourceLastUpdated:(id)updated;
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
-(BOOL)refreshEncounterList;
-(BOOL)getMoreEncounter;
-(void)doneLoadingTableViewData:(id)data;
-(void)updateContentView;
-(void)getEncounterCallback:(id)callback;
-(void)getDataTimeOut:(id)anOut;
-(void)resetContentView;
-(void)getLocationFailCallback:(id)callback;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)changeSetting;
-(void)stopRefreshingTask;
-(void)didReceiveMemoryWarning;
-(void)enterBackground;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)updateRightButton;
-(void)loadView;
-(id)initWithUin:(id)uin Label:(id)label;
@end

@interface QQPersonCardVisitorsViewController : QQViewController <EGORefreshTableHeaderDelegate, NearbyFriendTableViewDelegate> {
	BOOL _type;
	BOOL _style;
	CUserData* _userData;
	NSMutableArray* _userList;
	BOOL _reloading;
	BOOL _getFullContent;
	int _visitCount;
	BOOL _isLoadCompleted;
	BOOL _hasContent;
	NearbyFriendTableView* _tableView;
	EGORefreshTableHeaderView* _refreshHeaderView;
	UIActivityIndicatorView* _activityIndicatorView;
	UILabel* _loadLabel;
	UILabel* _networkBreakLabel;
	UILabel* _networkWeakLabel;
	QQNobodyView* _nobodyView;
	NSTimer* _timer;
}
@property(assign) int visitCount;
@property(retain, nonatomic) NSMutableArray* userList;
-(void)timeout;
-(void)showEmptyUI:(id)ui;
-(void)doneLoadingTableViewData:(id)data;
-(void)getVotersListCallback:(id)callback;
-(void)getVisitorListCallback:(id)callback;
-(BOOL)getMoreData:(id)data;
-(BOOL)refreshTableList:(id)list;
-(int)egoRefreshTableHeaderDataSourceLastUpdated:(id)updated;
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
-(void)InitRightButton;
-(void)changeStyle;
-(void)checkIsLoadingCompleted;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)updateRightButton;
-(void)loadView;
-(id)initWithType:(int)type;
-(void)dealloc;
@end

@interface QQLocalWinJump : NSObject {
}
+(void)openUrl:(id)url url:(id)url2;
+(void)showQQBrowser:(id)browser;
+(void)showWebUrl:(id)url web:(id)web webTitle:(id)title;
+(void)showMGroupViewController:(id)controller;
+(void)showVideoViewController:(id)controller;
+(void)showVoiceViewController:(id)controller;
+(void)showNearbyViewController:(int)controller controller:(id)controller2;
+(void)showMoodEditorViewController:(id)controller postWords:(id)words controller:(id)controller3;
+(BOOL)QQJumpToLocalWindow:(id)localWindow title:(id)title para:(id)para resptype:(id)resptype controller:(id)controller model:(BOOL)model;
+(BOOL)isNumerString:(id)string;
@end

@interface AdMsgExConfigSubItem : AdMsgConfigSubItem {
	unsigned _showTimePeriod;
	short _showTimeSeconds;
}
@property(assign, nonatomic) short showTimeSeconds;
@property(assign, nonatomic) unsigned showTimePeriod;
@end

@interface AdMsgExConfigItem : AdMsgConfigItem {
}
-(BOOL)ParseDecrypt:(short)decrypt decryptData:(char*)data decryptLen:(int)len local:(BOOL)local;
-(int)GetSubItemShowSeconds:(int)seconds;
-(id)GetSubItemIndexWithHour:(int)hour;
@end

@interface ProgressImageStyle : UIView {
	float _progress;
	UIImage* _bgImage;
	UIImage* _prossImage;
}
@property(retain, nonatomic) UIImage* prossImage;
@property(retain, nonatomic) UIImage* bgImage;
@property(assign, nonatomic) float progress;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame bgImage:(id)image prossImage:(id)image3;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PluginWebModelController : PluginInterfaceWebModelController {
}
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
@end

@interface PluginInterfaceWebModelController : WebModelController {
}
-(void)startLoadWebWithoutPara;
-(void)startLoadWeb:(id)web;
-(id)initWithPluginBrowseWeburl:(id)pluginBrowseWeburl withTitle:(id)title withLoginUin:(id)loginUin withSid:(id)sid;
@end

@interface pluginSetModel : QQModel {
	NSString* _strSetName;
	NSString* _strUrl;
}
@property(retain, nonatomic) NSString* strUrl;
@property(retain, nonatomic) NSString* strSetName;
-(void)dealloc;
-(id)init;
@end

@interface PluginModel : QQModel {
	NSString* _strPluginPkgName;
	int _pluginVersion;
	short _resSubType;
	short _lanType;
	short _priority;
	NSString* _strResName;
	NSString* _strResDesc;
	NSString* _strBigPicUrl;
	NSString* _strSmallPicUrl;
	NSString* _strQQUin;
	NSString* _strQQNick;
	NSString* _strPluginEntranceName;
	NSString* _strPluginEntranceUrl;
	NSMutableArray* _setArray;
	BOOL _isEnable;
	BOOL _isNew;
	BOOL _isDisable;
	BOOL _forceDisplay;
	int _section;
	NSString* _strSimpleDes;
	int _pluginType;
	BOOL _needShowNew;
@private
	unsigned resID;
	BOOL isPushEnabled;
}
@property(assign, nonatomic) BOOL needShowNew;
@property(assign, nonatomic) int pluginType;
@property(assign, nonatomic) BOOL isPushEnabled;
@property(assign, nonatomic) unsigned resID;
@property(assign, nonatomic) int section;
@property(assign, nonatomic) BOOL forceDisplay;
@property(assign, nonatomic) BOOL isNew;
@property(assign, nonatomic) BOOL isEnable;
@property(retain, nonatomic) NSMutableArray* setArray;
@property(retain, nonatomic) NSString* strPluginEntranceUrl;
@property(retain, nonatomic) NSString* strPluginEntranceName;
@property(retain, nonatomic) NSString* strQQNick;
@property(retain, nonatomic) NSString* strQQUin;
@property(retain, nonatomic) NSString* strSmallPicUrl;
@property(retain, nonatomic) NSString* strBigPicUrl;
@property(retain, nonatomic) NSString* strResDesc;
@property(retain, nonatomic) NSString* strResName;
@property(assign, nonatomic) short priority;
@property(assign, nonatomic) short lanType;
@property(assign, nonatomic) short resSubType;
@property(assign, nonatomic) int pluginVersion;
@property(retain, nonatomic) NSString* strPluginPkgName;
@property(assign, nonatomic) BOOL isDisable;
@property(retain, nonatomic) NSString* strSimpleDes;
-(void)dealloc;
-(id)init;
@end

@interface QQPluginUpdateTimeModel : QQModel {
	unsigned _lastUpdateTime;
	NSString* _lastBundleVersion;
}
@property(retain, nonatomic) NSString* lastBundleVersion;
@property(assign, nonatomic) unsigned lastUpdateTime;
-(void)dealloc;
@end

@interface QQUnifiedPluginManager : NSObject <TTURLRequestDelegate, NSXMLParserDelegate> {
	NSString* _strUin;
	long _lastUpdateTime;
	NSMutableArray* _pluginArray;
	NSTimer* _updateTimer;
	BOOL _isUpdateConfig;
	int _retryUpdateCount;
	BOOL _parseSuccess;
	NSString* _xmlElementName;
	NSMutableString* _xmlEntranceName;
	NSMutableString* _xmlEntranceUrl;
	NSMutableString* _xmlQQUin;
	NSMutableString* _xmlQQNick;
	NSMutableArray* _xmlSetNameArray;
	NSMutableArray* _xmlSetUrlArray;
	NSMutableString* _xmlSimpleDes;
	NSMutableString* _xmlNewSwitch;
	NSMutableString* _xmlSection;
	int _hasNewPlugin;
}
@property(retain, nonatomic) NSString* xmlElementName;
@property(retain, nonatomic) NSString* strUin;
@property(retain, nonatomic) NSMutableArray* pluginArray;
+(id)getInstance;
-(id)getModelName;
-(id)toHexString:(id)hexString;
-(id)getSidPara;
-(id)getUsrInfoPara;
-(id)getMobInfoPara;
-(id)getDeviceInfoPara;
-(void)onLbsGetLocationSucc;
-(void)onLbsGetLocationFail;
-(void)parser:(id)parser foundCDATA:(id)cdata;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parserDidEndDocument:(id)parser;
-(void)parserDidStartDocument:(id)parser;
-(void)requestDidFinishLoad:(id)request;
-(void)parseSetXmlData:(id)data;
-(id)getPluginImage:(id)image;
-(id)getPluginPicPathByUrl:(id)url;
-(id)getPluginDataPath;
-(void)downloadPluginPic:(id)pic;
-(void)saveLastUpdateTime;
-(void)loadLastUpdateTime;
-(id)getPluginByType:(int)type;
-(void)saveData;
-(void)loadData;
-(void)LoginSuccess:(id)success;
-(void)changeAccount;
-(void)onTimeout;
-(void)stopTimer;
-(void)startNextTryTimer;
-(void)startTimer;
-(void)enablePlugin:(id)plugin;
-(void)disablePlugin:(id)plugin;
-(void)actionResourceResp:(char*)resp len:(int)len;
-(void)sendGetResourceReqV2;
-(void)setHasNewPlugin:(BOOL)plugin;
-(BOOL)hasNewPlugin;
-(void)setNew:(id)aNew isNew:(BOOL)aNew2;
-(void)updatePluginConfig;
-(void)dealloc;
-(id)init;
@end

@interface QQNavigationController : UINavigationController <UINavigationControllerDelegate, UIGestureRecognizerDelegate> {
	BOOL _isPopViewController;
	BOOL _isPopToRootViewController;
@private
	UIView* _lastScreenShotView;
	UIImageView* _leftShadowMask;
	UIView* _blackMask;
	UIView* _backgroundView;
	UIImage* _lastScreenShot;
	NSMutableDictionary* _screenShotDict;
	BOOL _isMoving;
	BOOL _isHandleGestureFinished;
	float _offsetX;
	CGPoint _startTouch;
	CGPoint _lastMove;
	double _startTouchTime;
	UIPanGestureRecognizer* _gestureRecognizer;
	BOOL isSupportRightDragToGoBack;
}
@property(assign, nonatomic) BOOL isSupportRightDragToGoBack;
-(void)handleQQThemeChangedNotification:(id)notification;
-(id)rebuildLastControllerSceneView;
-(void)drawTabBarIfNeeded:(id)needed context:(CGContextRef)context;
-(void)drawLastControllerNavigationBar:(id)bar context:(CGContextRef)context;
-(id)captureLastScreen;
-(void)cancelDragBack;
-(void)doDragBackViewController;
-(void)panGestureTouchesCancelled:(CGPoint)cancelled;
-(void)panGestureTouchesEnded:(CGPoint)ended;
-(void)handleEndDragging;
-(void)panGestureTouchesMoved:(CGPoint)moved;
-(void)panGestureTouchesBegan:(CGPoint)began;
-(BOOL)isTopViewControllerSupportRightDragToGoBack;
-(void)moveViewWithX:(float)x;
-(void)handlePanGestureRecognizer:(id)recognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)setGesturePriority:(id)priority;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)updateOrientationSupportFromViewController:(id)viewController;
-(id)popToRootViewControllerAnimated:(BOOL)rootViewControllerAnimated;
-(id)popViewControllerAnimated:(BOOL)animated;
-(void)hideActionSheetOrAlertView;
-(void)hideActionSheetOrAlertViewInView:(id)view;
-(void)loadView;
-(void)dealloc;
-(id)initWithRootViewController:(id)rootViewController;
@end

@interface QQSimpleNavigationController : UINavigationController {
}
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
@end

@interface QQTagsLogic : NSObject {
	NSMutableArray* _TAGS_Classes_Title;
	NSMutableArray* _TAGS_Classes_Intro;
	NSMutableArray* _TAGS_Content_Array;
	int _maxTagNum;
	int _classesNum;
}
@property(readonly, assign) NSMutableArray* TAGS_Content_Array;
@property(readonly, assign) NSMutableArray* TAGS_Classes_Intro;
@property(readonly, assign) NSMutableArray* TAGS_Classes_Title;
+(id)GetInstance;
-(id)getClassesIntro:(int)intro;
-(id)getClassesTitle:(int)title;
-(id)getClassesContens:(int)contens;
-(id)enCodeTagsID:(id)anId;
-(id)enCodeTagID:(id)anId;
-(id)enCodeTag:(id)tag;
-(id)enCodeTags:(id)tags;
-(int)getClassesNum;
-(int)getMaxNum;
-(void)dealloc;
-(id)init;
@end

@interface QGKitView : UIView {
@private
	NSString* text;
	UIFont* font;
	UIColor* textColor;
	UIColor* backColor;
	UIColor* lineColor;
	float lineWidth;
	float arrowHeadAt;
	float radius;
	float minHeight;
	float maxWidth;
	float minWidth;
	BOOL drawArrowhead;
	BOOL drawRadius;
	BOOL drawShadow;
	int arrowStyle;
	float textIndentationWidth;
	float textWidth;
	float textHeight;
	BOOL isLoading;
	UIActivityIndicatorView* loadingView;
	float arrowCC;
	CGPoint p1;
	CGPoint p2;
	CGPoint p3;
	CGPoint p4;
	CGPoint p5;
	CGPoint p6;
	CGPoint p7;
	CGPoint p8;
	CGPoint a1;
	CGPoint a2;
	CGPoint a3;
	CGPoint t1;
}
@property(assign, nonatomic) float textHeight;
@property(assign, nonatomic) float textWidth;
@property(retain, nonatomic) UIActivityIndicatorView* loadingView;
@property(assign, nonatomic) CGPoint t1;
@property(assign, nonatomic) CGPoint a3;
@property(assign, nonatomic) CGPoint a2;
@property(assign, nonatomic) CGPoint a1;
@property(assign, nonatomic) CGPoint p8;
@property(assign, nonatomic) CGPoint p7;
@property(assign, nonatomic) CGPoint p6;
@property(assign, nonatomic) CGPoint p5;
@property(assign, nonatomic) CGPoint p4;
@property(assign, nonatomic) CGPoint p3;
@property(assign, nonatomic) CGPoint p2;
@property(assign, nonatomic) CGPoint p1;
@property(assign, nonatomic) BOOL isLoading;
@property(assign, nonatomic) float textIndentationWidth;
@property(assign, nonatomic) float radius;
@property(assign, nonatomic) float lineWidth;
@property(assign, nonatomic) float minHeight;
@property(assign, nonatomic) float minWidth;
@property(assign, nonatomic) float maxWidth;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) UIColor* lineColor;
@property(retain, nonatomic) UIColor* backColor;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIFont* font;
@property(assign, nonatomic) float arrowCC;
@property(assign, nonatomic) float arrowHeadAt;
@property(assign, nonatomic) BOOL drawShadow;
@property(assign, nonatomic) BOOL drawRadius;
@property(assign, nonatomic) BOOL drawArrowhead;
@property(assign, nonatomic) int arrowStyle;
+(void)initialize;
-(void)drawRect:(CGRect)rect;
-(void)sizeToFit;
-(void)reCalculateAllPoint;
-(float)calculateBeginY:(float)y;
-(id)initWithStyle:(int)style;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface QGManorDot : NSObject <MKAnnotation> {
@private
	XXStruct_zYrK5D coordinate;
	NSString* nickname;
	NSString* address;
	BOOL isCurrentPosition;
	BOOL showAsSystemStyle;
	BOOL isMars;
}
@property(assign, nonatomic) BOOL isMars;
@property(assign, nonatomic) BOOL showAsSystemStyle;
@property(assign, nonatomic) BOOL isCurrentPosition;
@property(retain, nonatomic) NSString* address;
@property(retain, nonatomic) NSString* nickname;
@property(assign, nonatomic) XXStruct_zYrK5D coordinate;
-(BOOL)isEqual:(id)equal;
-(void)dealloc;
@end

@interface QGManorDotView : UIView {
	CGRect _nickRect;
	CGRect _sposRect;
	CGRect _addsRect;
	CGRect _loadingRect;
	CGRect _drawRect;
	BOOL _bLoading;
	UIActivityIndicatorView* _actView;
@private
	NSString* nickname;
	NSString* address;
	QGManorDot* manorDot;
}
@property(retain, nonatomic) QGManorDot* manorDot;
@property(retain, nonatomic) NSString* address;
@property(retain, nonatomic) NSString* nickname;
-(void)handleGetLocationTimeout:(id)timeout;
-(void)handleGetLocationFail:(id)fail;
-(void)handleGetLocationSucc:(id)succ;
-(void)delayGetAddressByCoordinate;
-(void)getAddressByCoordinate;
-(void)drawRect:(CGRect)rect;
-(id)createShadowImage:(int)image;
-(void)layoutView;
-(id)init;
-(void)dealloc;
-(void)removeLbsNotification;
@end

@interface QGMapView : MKMapView <MKMapViewDelegate, MKReverseGeocoderDelegate> {
	BOOL _init;
	NSString* _currentAddress;
	MKReverseGeocoder* _reverseGeocoder;
@private
	id<QGMapViewDelegate> mapViewDelegate;
	NSMutableArray* poisArray;
	QGKitView* noticeView;
	BOOL isLoading;
	BOOL isLoadErr;
	CLLocation* currLocation;
	BOOL isAlwaysDisplayName;
}
@property(retain, nonatomic) QGKitView* noticeView;
@property(retain, nonatomic) NSMutableArray* poisArray;
@property(retain, nonatomic) NSString* currentAddress;
@property(retain, nonatomic) CLLocation* currLocation;
@property(assign, nonatomic) BOOL isAlwaysDisplayName;
@property(assign, nonatomic) BOOL isLoadErr;
@property(assign, nonatomic) BOOL isLoading;
@property(assign) id<QGMapViewDelegate> mapViewDelegate;
-(void)reverseGeocoder:(id)geocoder didFailWithError:(id)error;
-(void)reverseGeocoder:(id)geocoder didFindPlacemark:(id)placemark;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)setDefaultCenter:(XXStruct_zYrK5D)center;
-(void)repaint;
-(void)reCalculateCenter;
-(void)hideNoticeView;
-(void)setNoticeViewText:(id)text isLoading:(BOOL)loading;
-(void)removeAllPois;
-(id)addPoi:(XXStruct_zYrK5D)poi;
-(id)getCurrLocationDot;
-(void)tapPress:(id)press;
-(id)initWithFrame:(CGRect)frame;
-(void)setFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface QGMapViewController : QQViewController {
	NSString* _mapTitle;
	QGMapView* _mapView;
	QGManorDot* _manorDot;
	BOOL _showsUserLocation;
	XXStruct_zYrK5D _coordinate;
@private
	XXStruct_zYrK5D destLocation;
}
@property(assign, nonatomic, setter=setDestLocation:) XXStruct_zYrK5D destLocation;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) BOOL showsUserLocation;
-(void)openMaps;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)initWithCoordinate:(XXStruct_zYrK5D)coordinate;
@end

@interface SendLocationViewController : QQViewController <QGMapViewDelegate> {
	QGMapView* _mapView;
	QGManorDotView* _dotView;
	MKPinAnnotationView* _pinView;
	id<SelectLocationDelegate> _selLocDel;
	BOOL _isInit;
	BOOL _shoundInitMapView;
	XXStruct_zYrK5D _coordinate;
	NSString* _address;
}
@property(readonly, assign, nonatomic) NSString* address;
@property(assign, nonatomic) id<SelectLocationDelegate> selLocDel;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
-(void)sendLocation;
-(void)handleRequestTimeout:(id)timeout;
-(void)handleGetLocationFail:(id)fail;
-(void)handleGetLocationSucc:(id)succ;
-(void)handleStartUpdateLocation:(id)location;
-(void)handleUIApplicationWillEnterForegroundNotification:(id)handleUIApplication;
-(void)initMapView;
-(void)startUpdateLocation;
-(void)removeLbsNotification;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQDataTransViewController : QQSimpleViewController {
	CGRect _frame;
	UIImageView* _bgView;
	QQFlipImageView* _logoView;
	UIActivityIndicatorView* _indicatorView;
	ProgressImageStyle* _progressBar;
	UIImageView* _progressLight;
	UIButton* _cancelButton;
	UILabel* _tipsLabel;
	UIImageView* _patternView;
	NSTimer* _logoAniTimer;
	BOOL _bLogoFace;
	NSTimer* _progressLightTimer;
	CGPoint _lightStartPos;
	BOOL _bLightGoBack;
}
-(void)releaseTimer;
-(void)changeTipstoLoading;
-(void)cancelProcess:(id)process;
-(void)hideProcessBar;
-(void)showProcessBarWithProcess:(int)process totalProcess:(int)process2;
-(void)animationLight:(id)light finished:(id)finished context:(void*)context;
-(void)actionProgressLightMove:(id)move;
-(void)actionLogoAnimation:(id)animation;
-(void)dealloc;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQDataTransWindow : UIWindow {
	QQDataTransViewController* _controller;
}
@property(readonly, assign, nonatomic) QQDataTransViewController* dataTransViewController;
-(void)loadWindow;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MiniZipArchive : NSObject {
@private
	void* _zipFile;
	void* _unzFile;
	NSString* _password;
	id _delegate;
}
@property(retain, nonatomic) id delegate;
-(id)Date1980;
-(BOOL)OverWrite:(id)write;
-(void)OutputErrorMessage:(id)message;
-(BOOL)UnzipCloseFile;
-(BOOL)UnzipFileTo:(id)to overWrite:(BOOL)write;
-(BOOL)UnzipOpenFile:(id)file Password:(id)password;
-(BOOL)UnzipOpenFile:(id)file;
-(BOOL)CloseZipFile2;
-(BOOL)addFileToZip:(id)zip newname:(id)newname;
-(BOOL)CreateZipFile2:(id)a2 Password:(id)password;
-(BOOL)CreateZipFile2:(id)a2;
-(void)dealloc;
-(id)init;
@end

@interface QSDataTransformer : NSObject <QSDataTransformerTaskDelegate> {
	id<QSDataTransformerDelegate> _delegate;
	QSDataTransformTaskBase* _task;
}
+(BOOL)isNeedToTransform;
+(id)versionDecryptFileData:(id)data;
+(id)versionEncryptFileData:(id)data;
+(id)decryptFileData:(id)data;
+(id)encryptFileData:(id)data;
+(id)versionEncryptUIN:(long long)uin;
+(id)versionDecryptData:(id)data;
+(id)versionEncryptData:(id)data;
+(id)versionDecryptString:(id)string;
+(id)versionEncryptString:(id)string;
+(id)decryptString:(id)string;
+(id)encryptString:(id)string;
+(id)decryptStringWithData:(id)data;
+(id)encryptDataWithString:(id)string;
+(id)decryptData:(id)data;
+(id)encryptData:(id)data;
-(void)didTransformDataFinished:(id)finished;
-(void)didTransformDataStatus:(id)status;
-(void)didTransformDataProcess:(id)process;
-(void)didTransformTaskStatus:(int)status;
-(void)didTransformTaskProcess:(int)process totalProcess:(int)process2;
-(void)cancelTransform;
-(BOOL)startToTransform:(id)transform;
-(BOOL)isFirstInstall;
-(void)cleanData;
-(void)transformData;
-(void)dealloc;
-(id)init;
@end

@interface QSDataTransformTarget : NSObject <NSCoding> {
	int _type;
	NSString* _fileName;
	NSString* _filePath;
	BOOL _finished;
	long long _uin;
	NSString* _tableName;
	int _finishedCount;
	int _totalCount;
}
@property(readonly, assign, nonatomic) NSString* tempPathName;
@property(readonly, assign, nonatomic) NSString* fullPathName;
@property(assign, nonatomic) int totalCount;
@property(assign, nonatomic) int finishedCount;
@property(retain, nonatomic) NSString* tableName;
@property(assign, nonatomic) long long uin;
@property(assign, nonatomic) BOOL finished;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSString* fileName;
@property(assign, nonatomic) int type;
-(void)initTotalCount;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithType:(int)type fileName:(id)name filePath:(id)path;
@end

@interface QSDataTransformTask0 : QSDataTransformTaskBase {
	NSMutableArray* _targets;
	FMDatabase* _db1;
	FMDatabase* _db2;
	int _currentProcess;
	int _totalProcess;
}
-(void)curProcessInc;
-(BOOL)transform;
-(BOOL)cleanData;
-(BOOL)doTransform;
-(BOOL)transformPaths;
-(BOOL)transformFiles;
-(BOOL)transformDBs;
-(BOOL)transformTable_tb_troopRemark;
-(BOOL)transformTable_tb_TroopMem;
-(BOOL)transformTable_tb_TroopMsg;
-(BOOL)transformTable_tb_troop;
-(BOOL)transformTable_tb_messsage;
-(BOOL)transformTable_tb_user;
-(BOOL)initQQDB:(id)qqdb withSrcDBPath:(id)srcDBPath;
-(BOOL)initConfigDB:(id)db withSrcDBPath:(id)srcDBPath;
-(void)closeDB;
-(BOOL)initTargets;
-(void)dealloc;
@end

@interface QSDataTransformTaskBase : NSObject {
	id<QSDataTransformerTaskDelegate> _delegate;
	BOOL _isCanceled;
}
@property(assign) BOOL isCanceled;
-(BOOL)cleanData;
-(BOOL)transform;
-(id)initWithDelegate:(id)delegate;
@end

@interface QSDataVersionMgr : NSObject <NSCoding> {
	int _dataVersion;
	NSData* _dataKey;
}
@property(readonly, assign, nonatomic) NSData* dataKey;
@property(assign, nonatomic) int dataVersion;
+(id)GetInstance;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(BOOL)isVersionUpdateCanceled;
-(void)cancelToUpdateLatestDataVersion;
-(int)getLatestDataVersion;
-(void)updateToLatestDataVersion;
-(id)init;
@end

@interface QQFileEnumInfo : NSObject {
	NSString* _path;
	NSString* _name;
	NSString* _root;
	int _size;
	NSDate* _modifyDate;
	UIImage* _fileIcon;
	BOOL _isSelected;
}
@property(assign, nonatomic) BOOL isSelected;
@property(retain, nonatomic) UIImage* fileIcon;
@property(copy, nonatomic) NSDate* modifyDate;
@property(assign) int size;
@property(retain, nonatomic) NSString* root;
@property(copy, nonatomic) NSString* name;
@property(copy, nonatomic) NSString* path;
-(int)compareByTimeAsc:(id)asc;
-(void)dealloc;
@end

@interface QQFileMgrEngine : NSObject {
	NSString* _uin;
}
+(id)fileTypeIconWithPath:(id)path;
+(BOOL)isOtherFile:(id)file;
+(BOOL)isImageFile:(id)file;
+(BOOL)isDocFile:(id)file;
+(BOOL)isAudioFile:(id)file;
+(BOOL)isVideoFile:(id)file;
+(id)GetOldCustomfacePath;
+(id)GetOldImagePath;
+(id)fileKindPathWithUIN:(int)uin uin:(id)uin2;
+(id)filePathWithUINByFileName:(id)uinbyFileName uin:(id)uin;
+(id)fileKindName:(int)name;
-(BOOL)cleanFileWithKind:(int)kind;
-(BOOL)deleteFileListWithPath:(id)path;
-(BOOL)deleteFileWithPath:(id)path;
-(BOOL)enumFileWithKind:(int)kind outFileList:(id)list;
-(BOOL)enumCollectFolderWithKind:(int)kind outFileList:(id)list;
-(BOOL)enumBufferImageFileWithKind:(id)kind;
-(id)fileKindPath:(int)path;
-(id)userPath;
-(void)dealloc;
-(id)initWithUIN:(id)uin;
@end

@interface QQPathConstants : NSObject {
	NSString* _homePath;
	NSString* _docPath;
	NSString* _libPath;
	NSString* _tempPath;
	NSString* _fullImagePath;
}
+(id)instance;
-(id)fullImagePath;
-(id)tempPath;
-(id)libPath;
-(id)docPath;
-(id)homePath;
-(void)dealloc;
-(id)init;
@end

@interface QQPassWordTipViewController : QQViewController {
	NSString* _tipStr;
	NSString* _bgImageName;
	BOOL _displayBtn;
}
@property(assign, nonatomic) BOOL displayBtn;
@property(retain, nonatomic) NSString* bgImageName;
@property(retain, nonatomic) NSString* tipStr;
-(void)dealloc;
-(void)goToSetPassView;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)loadView;
-(id)init;
@end

@interface QQPassWordView : UIView {
	NSString* _passWord;
	id<QQPassWordViewDelegate> _delegate;
	CGRect* _rectArray;
	CGPoint _firstTouch;
	CGPoint _lastTouch;
	CGRect _redrawRect;
	BOOL _errorState;
	BOOL _clear;
	BOOL _forbiddenDraw;
}
@property(assign, nonatomic) BOOL forbiddenDraw;
@property(assign, nonatomic) BOOL errorState;
@property(assign, nonatomic) id<QQPassWordViewDelegate> delegate;
-(id).cxx_construct;
-(void)dealloc;
-(void)clear;
-(void)buttonErrorState:(BOOL)state;
-(void)drawRect:(CGRect)rect;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(CGRect)currentRect;
-(void)initButtonView;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PassWordPreView : UIView {
	NSString* _passWord;
}
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)setPass:(id)pass;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQSetPassWordViewController : QQViewController <QQPassWordViewDelegate> {
	QQPassWordView* _passView;
	PassWordPreView* _preView;
	UILabel* _tipLabel;
	NSString* _passWord;
	BOOL _needGoToSetView;
}
@property(assign, nonatomic) BOOL needGoToSetView;
-(BOOL)isSupportRightDragToGoBack;
-(void)dealloc;
-(void)erroTipEnd;
-(void)popAfterSuccessTip;
-(void)QQPassWordDidEnd:(id)qqpassWord;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)loadView;
-(id)initWithPass:(id)pass;
@end

@interface PassWordView : UIView <QQPassWordViewDelegate> {
	UIImageView* _backgroundView;
	QQPassWordView* _passView;
	UILabel* _tipLabel;
	UIImageView* _headView;
	UIImageView* _unReadView;
	int _errortime;
}
@property(assign, nonatomic) int errortime;
-(void)dealloc;
-(BOOL)checkUnRead;
-(void)drawRect:(CGRect)rect;
-(void)reachErrorLimit;
-(void)erroTipEnd;
-(void)reSetErroState;
-(void)QQPassWordDidEnd:(id)qqpassWord;
-(void)forgetPassWord;
-(void)initSubViews;
-(void)upDateInfo;
-(id)initWithFrame:(CGRect)frame;
@end

@interface ChatBgThumbView : UIButton {
}
-(BOOL)isSupportRightDragToGoBack;
@end

@interface QQChatDefaultSkinView : UIView {
	UIImageView* _selectView;
	NSArray* _chatBgArray;
@private
	QQChatBgSettingViewController* viewController;
}
@property(assign) QQChatBgSettingViewController* viewController;
-(void)dealloc;
-(void)actionSelectTheme:(id)theme;
-(void)hideSelectView;
-(id)initWithFrame:(CGRect)frame fileName:(id)name;
@end

@interface QQChatBgSettingViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UINavigationControllerDelegate, UIImagePickerControllerDelegate, UIActionSheetDelegate> {
	NSString* _uin;
	NSString* _srcName;
	BOOL _isGroup;
	BOOL _isSetGlobal;
	BOOL _isSelf;
	UIImage* _selectImage;
	UITableView* _tableView;
	QQChatDefaultSkinView* _defaultSkinView;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)initSecondCell:(id)cell;
-(void)initFirstCell:(id)cell;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)popToChatViewController;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(BOOL)defaultSkinSelected:(id)selected;
-(void)imageSelected:(id)selected;
-(void)handleImagePickerDelegate:(id)delegate;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)actionAlbum;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)initWithUin:(id)uin isGroup:(BOOL)group;
-(id)init;
@end

@interface QQAnimatedGifFrame : NSObject {
	NSData* data;
	NSData* header;
	double delay;
	int disposalMethod;
	CGRect area;
}
@property(assign, nonatomic) CGRect area;
@property(assign, nonatomic) int disposalMethod;
@property(assign, nonatomic) double delay;
@property(copy, nonatomic) NSData* data;
@property(copy, nonatomic) NSData* header;
-(void)dealloc;
@end

@interface SCGIFImageView : UIImageView {
	NSData* GIF_pointer;
	NSMutableData* GIF_buffer;
	NSMutableData* GIF_screen;
	NSMutableData* GIF_global;
	NSMutableArray* GIF_frames;
	NSMutableArray* overlays;
	int GIF_sorted;
	int GIF_colorS;
	int GIF_colorC;
	int GIF_colorF;
	int animatedGifDelay;
	int dataPointer;
	float _totalDelay;
}
@property(assign, nonatomic) float totalDelay;
@property(retain, nonatomic) NSMutableArray* overlays;
@property(retain, nonatomic) NSMutableArray* GIF_frames;
+(id)getGifFrames:(id)frames;
+(BOOL)isGifImage:(id)image;
-(id)getFrameAsImageAtIndex:(int)index;
-(id)getFrameAsDataAtIndex:(int)index;
-(bool)GIFSkipBytes:(int)bytes;
-(bool)GIFGetBytes:(int)bytes;
-(void)GIFReadDescriptor;
-(void)GIFReadExtensions;
-(void)decodeGIF:(id)gif;
-(void)dealloc;
-(void)loadImageData;
-(id)initWithGIFData:(id)gifdata;
-(id)initWithGIFFileURL:(id)giffileURL;
-(id)initWithGIFFile:(id)giffile;
@end

@interface NearbyFriendTableHeaderView : UIView {
	MakeFriendsCardModel* _cardModel;
	QQAsynHeadImageView* _headButton;
@private
	UIViewController* viewController;
}
@property(assign, nonatomic) UIViewController* viewController;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)hotSortClick:(id)click;
-(void)linkmanButtonClick:(id)click;
-(void)headButtonClick:(id)click;
-(void)setCardModel:(id)model;
-(id)initWithFrame:(CGRect)frame;
@end

@interface AccostMsgSenderListView : UIView <IFaceObserver> {
	int _showIndex;
	NSTimer* _flipImageTimer;
	NSArray* _uinList;
	QQFlipImageView* _flipImageView;
@private
	UIViewController* viewController;
}
@property(assign, nonatomic) UIViewController* viewController;
-(void)dealloc;
-(void)notifyGetHeadImageSucc:(id)succ;
-(void)resumePlay;
-(void)stopPlay;
-(void)setHeadList:(id)list;
-(void)flipImageTimerCallback;
-(void)avatarButtonClick:(id)click;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQAboutScrollView : UIScrollView {
}
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface QQAccountMenu : UIView <UIScrollViewDelegate> {
	NSMutableArray* _accountsData;
	QQAboutScrollView* _bgScrollView;
	UIImageView* _bgView;
	id<QQAccountMenuDelegate> _delegate;
	BOOL _deleteState;
}
@property(assign, nonatomic) BOOL deleteState;
@property(assign, nonatomic) id<QQAccountMenuDelegate> delegate;
-(void)dealloc;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)deleteAccount:(int)account;
-(void)deleteMe:(id)me;
-(void)goToNormalState;
-(void)goToDeleteState;
-(void)didSelect:(id)select;
-(void)setButton;
-(void)setFrame:(CGRect)frame;
-(id)initWithAcountData:(id)acountData;
@end

@interface AcountEditCellID : UITableViewCell <UITextFieldDelegate> {
	NSString* _userID;
	UITextField* _idEdit;
	UILabel* _tipLabel;
	UIImageView* _accountBtnImage;
	UIButton* _accountBtn;
	BOOL _seleFlag;
	float _keyBoradShowOffset;
	BOOL _touchEnabled;
	BOOL _addAccount;
	id<AcountEditCellIDDelegate> _delegate;
}
@property(assign, nonatomic) BOOL touchEnabled;
@property(assign, nonatomic) float keyBoradShowOffset;
@property(assign, nonatomic) id<AcountEditCellIDDelegate> delegate;
@property(retain, nonatomic) UILabel* tipLabel;
@property(retain, nonatomic) UIButton* accountBtn;
@property(retain, nonatomic) UIImageView* accountBtnImage;
@property(readonly, assign, nonatomic) UITextField* idEdit;
@property(retain, nonatomic, getter=getUserID, setter=setUserID:) NSString* userID;
-(void)drawRect:(CGRect)rect;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)dealloc;
-(void)recoverState;
-(void)showAccountsEdit;
-(void)reSetTextfieldFrame;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier addAccount:(BOOL)account;
@end

@interface PwTextField : UITextField {
	UIButton* _loginBtn;
}
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
@end

@interface AcountEditCellPW : UITableViewCell <UITextFieldDelegate> {
	NSData* _userPW;
	PwTextField* _pwEdit;
	UILabel* _tipLabel;
	BOOL _isChangedPwd;
	UIButton* _forgetBtn;
	float _keyBoradShowOffset;
	BOOL _touchEnabled;
	BOOL _addAccount;
	id<AccountEditCellPWDelegate> _delegate;
}
@property(assign, nonatomic) BOOL touchEnabled;
@property(assign, nonatomic) float keyBoradShowOffset;
@property(assign, nonatomic) id<AccountEditCellPWDelegate> delegate;
@property(assign) BOOL isChangedPwd;
@property(retain, nonatomic) UILabel* tipLabel;
@property(retain, nonatomic) UITextField* pwEdit;
@property(retain, nonatomic, getter=getUserPW, setter=setUserPW:) NSData* userPW;
-(void)drawRect:(CGRect)rect;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier addAccount:(BOOL)account;
@end

@interface AccountHeadView : UIView {
	QQAsynHeadImageView* _headView;
	NSString* _uin;
}
@property(retain, nonatomic) NSString* uin;
-(void)changeAccountWith:(id)with;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface FileTransferRdmMonitor : NSObject {
	NSMutableDictionary* _rdmSeqDic;
	NSMutableDictionary* _rdmSeqInfo;
	NSMutableDictionary* _rdmSeqDicForMsgSending;
}
+(id)instance;
-(void)notifyMsgSendingResult:(BOOL)result uuid:(id)uuid errorCode:(int)code;
-(void)reportTransferEvent:(id)event isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
-(void)fileTransferFinished:(id)finished;
-(void)updateReportValue:(id)value strKey:(id)key strValue:(id)value3;
-(void)updateDownloadIp:(id)ip downloadIp:(id)ip2;
-(void)updateUploadIp:(id)ip uploadInIp:(id)ip2;
-(void)removeEvent:(id)event;
-(void)startDownloadEvent:(id)event downloadInfo:(id)info;
-(void)startUploadEvent:(id)event uploadInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface QSHttpQueue : NSOperationQueue <QSHttpRequestDelegate, QSHttpProgressDelegate> {
	int _queueID;
	int _concurrentRequestCount;
	NSDictionary* _userInfo;
	NSMutableDictionary* _requestCacheDic;
	NSMutableDictionary* _requestConcurrentDic;
}
@property(retain) NSDictionary* userInfo;
@property(assign) int concurrentRequestCount;
@property(assign) int queueID;
+(id)sharedQueue;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)requestStarted:(id)started;
-(void)addRequest:(id)request;
-(BOOL)runOnMainThread:(id)thread;
-(void)scheduleCacheToQueue:(int)queue;
-(void)decreaseCacheQueueCount:(int)count;
-(void)appendRequestToCacheQueue:(id)cacheQueue;
-(BOOL)appendRequestToOperationQueue:(id)operationQueue;
-(int)getRequestConcurrentCount:(int)count;
-(int)getRequestMaxConcurrentCount:(id)count;
-(int)getRequestPriority:(id)priority;
-(void)dealloc;
-(id)init;
@end

@interface QSHttpRequest : NSOperation {
	int _requestID;
	int _busiType;
	int _transType;
	int _status;
	int _errorCode;
	int _httpErrorCode;
	NSString* _url;
	NSURL* _redirectURL;
	NSData* _sig;
	NSString* _requestMethod;
	NSMutableDictionary* _requestHeaders;
	NSMutableData* _postBody;
	NSString* _downloadDesPath;
	NSString* _downloadDesFile;
	NSOutputStream* _downloadFileStream;
	NSMutableData* _responseData;
	BOOL _isNeedHandleData;
	unsigned long long _contentLength;
	unsigned long long _totalBytesRead;
	unsigned long long _totalBytesSent;
	NSURLConnection* _urlConnection;
	int _retryMaxCount;
	int _retryCount;
	NSDictionary* _userInfo;
	BOOL _cancelled;
	BOOL _finished;
	QSHttpQueue* _queue;
	BOOL _runOnMainThread;
	id<QSHttpRequestDelegate> _requestDelegate;
	id<QSHttpProgressDelegate> _progressDelegate;
}
@property(assign) id<QSHttpProgressDelegate> progressDelegate;
@property(assign) id<QSHttpRequestDelegate> requestDelegate;
@property(assign) BOOL runOnMainThread;
@property(retain) QSHttpQueue* queue;
@property(retain) NSDictionary* userInfo;
@property(assign) int retryCount;
@property(assign) int retryMaxCount;
@property(assign) unsigned long long totalBytesSent;
@property(assign) unsigned long long totalBytesRead;
@property(assign) unsigned long long contentLength;
@property(retain) NSMutableData* responseData;
@property(retain) NSString* downloadDesFile;
@property(retain) NSString* downloadDesPath;
@property(retain) NSString* requestMethod;
@property(retain) NSURL* redirectURL;
@property(retain) NSString* url;
@property(assign) int httpErrorCode;
@property(assign) int errorCode;
@property(assign) int status;
@property(assign) int transType;
@property(assign) int busiType;
@property(assign) int requestID;
+(id)requestWithURL:(id)url busiType:(int)type transType:(int)type3;
+(void)runRequests;
+(id)threadForRequest:(id)request;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(BOOL)isFinished;
-(BOOL)isCancelled;
-(BOOL)isExecuting;
-(BOOL)isConcurrent;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)main;
-(void)start;
-(void)cancelOnRequestThread;
-(void)reportFailed:(int)failed;
-(void)markAsFinished;
-(void)startConnection;
-(void)buildDownloadStream;
-(void)requestDidSendBytes:(id)request;
-(void)requestDidReceiveBytes:(id)request;
-(void)requestDidReceiveData:(id)request;
-(void)requestRedirected;
-(void)requestFailed;
-(void)requestFinished;
-(void)requestWillRedirectToURL:(id)request;
-(void)requestDidReceiveResponseHeaders:(id)request;
-(void)requestStarted;
-(void)startRequest;
-(void)appendPostData:(id)data;
-(void)addRequestHeader:(id)header value:(id)value;
-(void)dealloc;
-(id)initWithURLStr:(id)urlstr;
@end

@interface QQSetPassSettingViewController : QQViewController <UITableViewDelegate, UITableViewDataSource> {
	UITableView* _tableView;
}
-(void)dealloc;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)clickSwitch:(id)aSwitch;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)loadView;
-(id)init;
@end

@interface RKLLowMemoryWarningObserver : NSObject {
}
+(void)lowMemoryWarning:(id)warning;
@end

@interface QQFavoriteListViewController : QQViewController <EGORefreshTableHeaderDelegate, NearbyFriendTableViewDelegate> {
	CUserData* _userData;
	NSMutableArray* _userList;
	BOOL _reloading;
	BOOL _getFullContent;
	NearbyFriendTableView* _tableView;
	EGORefreshTableHeaderView* _refreshHeaderView;
	UIActivityIndicatorView* _activityIndicatorView;
	NSTimer* _timer;
	BOOL _needReloadList;
}
@property(assign, nonatomic) BOOL needReloadList;
@property(retain, nonatomic) NSMutableArray* userList;
-(void)doneLoadingTableViewData:(id)data;
-(void)getFavoriteListCallback:(id)callback;
-(BOOL)getMoreData:(id)data;
-(BOOL)refreshTableList:(id)list;
-(int)egoRefreshTableHeaderDataSourceLastUpdated:(id)updated;
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
@end

@interface QQUrlParse : NSObject {
	NSString* _serverName;
	NSString* _actionName;
	NSMutableDictionary* _urlParam;
	NSString* _clickPushBannerPicName;
	NSString* _robotUin;
	NSString* _plugID;
	int _urlFromType;
}
+(id)getThirdAppNameBySchme:(id)schme;
-(void)rdmReport;
-(int)converSvrnamAndActnamToInternalCmd;
-(BOOL)postCmdNotify;
-(BOOL)checkParamArray;
-(BOOL)parseCmdAndParam:(id)param withUrlFrom:(int)from;
-(BOOL)processOpenUrlFromNoInternalWebView:(id)noInternalWebView withUrlFrom:(int)from;
-(BOOL)handleLebarPlugOpenUrl:(id)url withPlugID:(id)plugID;
-(BOOL)handleSelfMsgOpenUrl:(id)url withRobotUin:(id)robotUin;
-(BOOL)handlePushBannerOpenUrl:(id)url withClickPicName:(id)clickPicName;
-(BOOL)handleSchemeOpenUrl:(id)url;
-(BOOL)handleInternalWebViewOpenUrl:(id)url withOpenUrl:(id)openUrl;
-(void)resetData;
-(id)init;
-(void)dealloc;
@end

@interface QQFriendSelectedViewController : QQSearchBaseViewController <UITableViewDelegate, FriendListViewDelegate, UITabBarDelegate, QQHeadAlertViewDelegate, GroupListViewDelegate, RichMsgPreviewDialogDelegate, TabMenuDelegate, DiscussGroupListViewDelegate, IDiscussGroupListView, UITableViewDataSource, UITextFieldDelegate, TencentRequestDelegate, QQShareResultDialogDelegate, UIAlertViewDelegate> {
	NSString* _filePath;
	NSString* _uin;
	NSString* _content;
	NSString* _displayContent;
	NSString* _imgFileKey;
	QQMessageView* _messageView;
	FriendListViewNew* _flist;
	GroupListViewNew* _glist;
	int _currentType;
	DiscussGroupListViewNew* _discussGroupListView;
	id<QQFriendSelectedViewControllerDelegate> _delegate;
	BOOL _isGroup;
	BOOL _isDiscussGroup;
	int _msgType;
	QQHeadAlertView* _alertView;
	UIViewController* _superControl;
	int _ctrlType;
	BOOL _isLoadPic;
	unsigned _appShareID;
	NSString* _richMsgPreTitle;
	NSString* _richMsgPreDes;
	NSString* _richMsgPreImgPath;
	NSString* _richMsgPreActionUrl;
	NSString* _thirdAppDisplayName;
	QQRichMsgPreviewDialog* _richMsgPreDlg;
	id _leftBtnClickTarget;
	SEL _leftBtnClickSel;
	SEL _leftBtnClickSelForSuccess;
	id _chatViewCtrlLeftBtnClickTarget;
	SEL _chatViewCtrlLeftBtnClickSel;
	UIView* _tabsContainer;
	TencentRequest* _request;
	NSString* _AddtionalMessage;
	QQShareResultDialog* _ShareResultDialog;
	NSTimer* _RequestTimer;
	BOOL _isphotoFromWaterCamera;
	UIImage* _assertsImage;
	QQAlertView* _qqAlertView;
@private
	NSString* _openID;
	NSString* _shareUin;
}
@property(retain, nonatomic) NSString* shareUin;
@property(retain, nonatomic) NSString* openID;
@property(assign, nonatomic) TencentRequest* request;
@property(assign, nonatomic) UIViewController* superControl;
@property(assign, nonatomic) id<QQFriendSelectedViewControllerDelegate> delegate;
@property(retain, nonatomic) NSString* uin;
@property(assign, nonatomic) int msgType;
@property(retain, nonatomic) NSString* imgFileKey;
@property(retain, nonatomic) NSString* displayContent;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic, setter=setRichMsgPreActionUrl:) NSString* richMsgPreActionUrl;
@property(retain, nonatomic) NSString* richMsgPreImgPath;
@property(retain, nonatomic) NSString* richMsgPreDes;
@property(retain, nonatomic) NSString* richMsgPreTitle;
@property(retain, nonatomic) NSString* thirdAppDisplayName;
@property(assign, nonatomic) unsigned appShareID;
@property(assign, nonatomic) SEL chatViewCtrlLeftBtnClickSel;
@property(assign, nonatomic) id chatViewCtrlLeftBtnClickTarget;
@property(assign, nonatomic) SEL leftBtnClickSelForSuccess;
@property(assign, nonatomic) SEL leftBtnClickSel;
@property(assign, nonatomic) id leftBtnClickTarget;
@property(retain, nonatomic) UIImage* assertsImage;
@property(assign, nonatomic) BOOL isphotoFromWaterCamera;
@property(assign, nonatomic) int ctrlType;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)coverSearchState;
-(void)updateLoadPicState:(id)state;
-(void)startLoadPic;
-(void)leftButtonClick:(id)click;
-(id)getSendImage;
-(void)delayCallBack:(id)back;
-(void)sendThirdAppShareMsgAfterDelay:(id)delay;
-(void)sendThirdAppShareMsg:(id)msg msg:(id)msg2;
-(void)reSetLeftButtonTitle;
-(void)sendFileAfterDelay;
-(void)sendFile;
-(void)sendImageAfterDelay:(id)delay;
-(void)sendImage;
-(void)sendTextAfterDelay:(id)delay;
-(void)sendText;
-(void)cancelButtonClick;
-(void)sendButtonClick:(id)click msg:(id)msg;
-(void)getOpenIDTimeOut;
-(void)getOpenIDFinished:(id)finished;
-(void)popAlertViewTip;
-(void)compareOpenID:(id)anId;
-(void)CancelShareRequest;
-(void)ShareToQZone;
-(void)SaveAddtionalMsg;
-(void)buttonClickSuccess:(id)success;
-(void)buttonClickTwo:(id)two;
-(void)buttonClickOne:(id)one;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didLoad:(id)load dat:(id)dat;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)showInternalForwardNotif:(id)notif withNick:(id)nick;
-(void)showThirdAppForwardNotifyForQZone;
-(void)showThirdAppForwardNotify;
-(void)discussGroupListSelected:(id)selected;
-(void)groupListSelected:(id)selected;
-(void)friendListSelected:(id)selected head:(int)head type:(int)type;
-(void)recentListSelected:(id)selected isGroup:(BOOL)group isDiscussGroup:(BOOL)group3 head:(int)head isShareQZone:(BOOL)zone;
-(void)gotoWriteMood;
-(void)gotoWriteMoodFromWaterCamera;
-(id)getMaxSubString:(id)string maxLength:(int)length;
-(BOOL)searchResultCellDidSelect:(id)searchResultCell;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didSelectIndex:(int)index;
-(void)initTabUI;
-(void)filerMsgData:(id)data;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)dealloc;
-(void)willDismissFromScreen;
-(id)init;
-(void)popSelf;
@end

@interface QQHeadAlertView : UIWindow <QIMTextInputDelegate, UITextViewDelegate, UITextFieldDelegate> {
	UIImageView* _bgImageView;
	UIView* _tipBg;
	UIImageView* _tipBgImageView;
	UIImageView* _headImageView;
	UITextView* _inputView;
	UITextField* _inputField;
	UILabel* _titleLabel;
	UILabel* _nickLabel;
	int _msgType;
	id<QQHeadAlertViewDelegate> __delegate;
	int _style;
}
@property(assign, nonatomic) int style;
@property(assign, nonatomic) int msgType;
@property(assign, nonatomic) id<QQHeadAlertViewDelegate> delegate;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)dealloc;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)dismiss;
-(void)show;
-(void)cancelButtonClick:(id)click;
-(id)getShareContent;
-(id)getInputText;
-(void)setInputText:(id)text;
-(id)initWithTitle:(id)title;
-(id)initWithHeadImage:(id)headImage nickName:(id)name msgType:(int)type;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface CMPopTipView : UIView {
	UIColor* backgroundColor;
	id<CMPopTipViewDelegate> delegate;
	NSString* message;
	id targetObject;
	UIColor* textColor;
	UIFont* textFont;
	int animation;
@private
	CGSize bubbleSize;
	float cornerRadius;
	BOOL highlight;
	float sidePadding;
	float topMargin;
	int pointDirection;
	float pointerSize;
	CGPoint targetPoint;
	UIView* customView;
	int textAlignment;
	float maxWidth;
	BOOL disableTapToDismiss;
}
@property(assign, nonatomic) float maxWidth;
@property(assign, nonatomic) int animation;
@property(assign, nonatomic) int textAlignment;
@property(retain, nonatomic) UIFont* textFont;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) id targetObject;
@property(retain, nonatomic) UIView* customView;
@property(retain, nonatomic) NSString* message;
@property(assign, nonatomic) BOOL disableTapToDismiss;
@property(assign, nonatomic) id<CMPopTipViewDelegate> delegate;
@property(retain, nonatomic) UIColor* backgroundColor;
-(void)dealloc;
-(id)initWithCustomView:(id)customView;
-(id)initWithMessage:(id)message;
-(int)getPointDirection;
-(id)initWithFrame:(CGRect)frame;
-(void)popAnimationDidStop:(id)popAnimation finished:(id)finished context:(void*)context;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dismissAnimated:(BOOL)animated;
-(void)dismissAnimationDidStop:(id)dismissAnimation finished:(id)finished context:(void*)context;
-(void)finaliseDismiss;
-(void)presentPointingAtBarButtonItem:(id)barButtonItem animated:(BOOL)animated;
-(void)presentPointingAtView:(id)view inView:(id)view2 animated:(BOOL)animated;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(CGRect)contentFrame;
-(CGRect)bubbleFrame;
@end

@interface CSPopTipView : CMPopTipView {
}
@end

@interface CSButton : UIControl {
@private
	UIView* leftView;
	UIView* rightView;
	UIColor* textColor;
	UIFont* font;
	NSString* text;
	UIView* backgroundView;
	UILabel* label;
}
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) UIView* backgroundView;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) UIView* rightView;
@property(retain, nonatomic) UIView* leftView;
-(void)dealloc;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CSLBSButton : CSButton {
}
-(void)layoutSubviews;
@end

@interface CSImageModel : NSObject {
	NSString* _path;
	UIImage* _orgImage;
@private
	NSString* uuid;
	UIImage* thumbImage;
	UIImage* middleImage;
	NSThread* scaleThread;
	NSThread* writeThread;
	NSString* desc;
	int uploadSourcesType;
	NSNumber* totalSize;
}
@property(retain, nonatomic) UIImage* orgImage;
@property(retain, nonatomic) NSNumber* totalSize;
@property(assign, nonatomic) int uploadSourcesType;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSThread* writeThread;
@property(retain, nonatomic) NSThread* scaleThread;
@property(retain, nonatomic) UIImage* middleImage;
@property(retain, nonatomic) UIImage* thumbImage;
@property(readonly, assign, nonatomic) NSString* path;
@property(copy, nonatomic) NSString* uuid;
+(int)getUploadPicQuality;
-(void)clear;
-(id)scaleImageToSize:(CGSize)size;
-(CGSize)getUploadImageSize:(CGSize)size toSize:(CGSize)size2;
-(id)albumAbsolutePath;
-(id)originImagePath;
-(void)replaceImage:(id)image;
-(id)fullImage;
-(id)originImage;
-(void)scaleForMiddleImage:(id)middleImage;
-(id)initWithOriginImage:(id)originImage uuid:(id)uuid;
-(id)initWithOriginImage:(id)originImage path:(id)path uuid:(id)uuid;
-(void)scaleImages:(id)images;
-(id)compressImage:(id)image Width:(int)width Height:(int)height;
-(id)addWaterMark:(id)mark;
-(int)getRealUploadQuality;
-(void)dealloc;
@end

@interface CSImagePickerController : UIImagePickerController <UIImagePickerControllerDelegate, UINavigationControllerDelegate, CTileScrollViewDelegate, CTileScrollViewDataSource, MBProgressHUDDelegate, UIScrollViewDelegate> {
	int maxPickImage;
	UILabel* label;
	CTileScrollView* pagingView;
	NSMutableArray* selectedImages;
	BOOL onProcess;
	int _uploadSourcesType;
	id<CSImagePickerControllerDelegate> _selectedDelegate;
	CALayer* arrowLayer;
	CSButton* descButton;
	UIView* containerView;
	int currentAlbumIndex;
	NSString* albumid;
	NSTimer* timer;
	BOOL _needAsynclyCompress;
	NSThread* _asynclyCompressThread;
	NSMutableArray* _uncompressedModel;
	NSCondition* _condition;
	int _maxAddCount;
@private
	NSString* ablumID;
	int _maxPickImage;
	CMPopTipView* tipView;
}
@property(assign, nonatomic) int maxAddCount;
@property(assign, nonatomic) BOOL needAsynclyCompress;
@property(assign, nonatomic) int uploadSourcesType;
@property(assign, nonatomic) id<CSImagePickerControllerDelegate> selectedDelegate;
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) NSString* albumid;
@property(retain, nonatomic) UIView* containerView;
@property(retain, nonatomic) CMPopTipView* tipView;
@property(assign, nonatomic) int maxPickImage;
@property(assign, nonatomic) NSString* ablumID;
@property(retain, nonatomic) NSMutableArray* selectedImages;
-(void)reloadData;
-(void)compress;
-(void)scaleImage:(id)image;
-(void)pushPreviewController:(id)controller;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)scrollView:(id)view didDeleteCellAtIndex:(int)index;
-(id)scrollView:(id)view tileCellAtIndex:(int)index;
-(int)numberOfcells;
-(void)showProgressTips;
-(void)ActionNext;
-(void)hudWasHidden:(id)hidden;
-(void)dismissSelf;
-(void)waitUntilDone;
-(void)viewDidUnload;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)viewWillAppear:(BOOL)view;
-(void)setSourceType:(int)type;
-(void)dismiss;
-(void)goBack;
-(id)findUUID:(id)uuid;
-(id)initWithParentController:(id)parentController;
-(id)init;
-(void)dealloc;
@end

@interface CTileScrollView : UIScrollView <UIScrollViewDelegate> {
	NSMutableArray* visibleCells;
	NSMutableDictionary* reuseCells;
	id<CTileScrollViewDataSource> datasource;
	id<UIScrollViewDelegate, CTileScrollViewDelegate> delegate;
	int rowHeight;
	int rowWidth;
	BOOL editing;
	BOOL deleting;
	CTileViewCell* deleteCell;
@private
	int space;
	CTileViewCell* draggingItem;
	NSTimer* itemHoldTimer;
}
@property(assign, nonatomic) int space;
@property(assign, nonatomic) id<UIScrollViewDelegate, CTileScrollViewDelegate> delegate;
@property(assign, nonatomic) id<CTileScrollViewDataSource> datasource;
@property(retain, nonatomic) CTileViewCell* draggingItem;
@property(retain, nonatomic) NSTimer* itemHoldTimer;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)triggerHoldTimer:(id)timer;
-(void)beginEditing;
-(void)itemTouchedDown:(id)down;
-(BOOL)itemMovable:(id)movable;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)animationDidStart:(id)animation;
-(void)removeItemAtIndex:(int)index;
-(void)deleteItem:(id)item;
-(void)didTouchCell:(id)cell;
-(void)scrollToFirstTileAnimate:(BOOL)firstTileAnimate;
-(void)scrollToIndex:(int)index animate:(BOOL)animate;
-(void)scrollToLastTileAnimate:(BOOL)lastTileAnimate;
-(void)tilePages;
-(void)removeSubviews;
-(void)reloadData;
-(void)addCellToReuseQueue:(id)reuseQueue;
-(id)dequeueReusableCellWithIdentifier:(id)identifier;
-(id)cellInRect:(CGRect)rect;
-(BOOL)isVisiableRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(void)clearDataSource;
-(void)dealloc;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
@end

@interface CTileViewCell : UIImageView {
	NSIndexPath* _indexPath;
	NSString* _strReuseIndentifier;
	BOOL dragging;
	int index;
	UIButton* deleteButton;
}
@property(retain, nonatomic) UIButton* deleteButton;
@property(assign, nonatomic) int index;
@property(assign, nonatomic) BOOL dragging;
@property(retain, nonatomic) NSString* strReuseIndentifier;
-(void)dealloc;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)initWithIdentifier:(id)identifier;
@end

@interface QZUploadPhotoModel : NSObject <NSCoding> {
	UIImage* _thumbnail;
	UIImage* _image;
	int _albumtype;
	int _fileOffset;
	NSString* _filedesc;
	NSString* _fileName;
	NSString* _albumId;
	NSString* _albumName;
	NSString* _filePath;
	NSNumber* _sesstionID;
	int _state;
	NSNumber* _totalSize;
	NSNumber* _transSize;
	NSString* _errorStr;
	int _uploadSourcesType;
	NSString* _fileKey;
	QZUploadPacket* _task;
}
@property(retain, nonatomic) QZUploadPacket* task;
@property(retain, nonatomic) NSString* fileKey;
@property(assign, nonatomic) int uploadSourcesType;
@property(retain, nonatomic) NSNumber* transSize;
@property(retain, nonatomic) NSNumber* totalSize;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSString* errorStr;
@property(retain, nonatomic) NSNumber* sesstionID;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSString* filedesc;
@property(assign, nonatomic) int fileOffset;
@property(assign, nonatomic) int albumtype;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSString* albumId;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) UIImage* thumbnail;
-(void)dealloc;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
@end

@interface QZSendTaskCell : UITableViewCell {
	int _nSendStatus;
	float _progress;
	UIImageView* _statusIcon;
	UILabel* _labelTaskAction;
	UILabel* _labelMsgTitle;
	UILabel* _labelSendStatus;
	UIImageView* _upPhotoImage;
	UIView* _photoView;
	ProgressImageStyle* _progressView;
	UIButton* _actionBtn;
}
@property(assign, nonatomic) UIButton* actionBtn;
@property(retain, nonatomic) ProgressImageStyle* progressView;
@property(retain, nonatomic) UIView* photoView;
@property(retain, nonatomic) UIImageView* upPhotoImage;
@property(retain, nonatomic) UILabel* labelSendStatus;
@property(retain, nonatomic) UILabel* labelMsgTitle;
@property(retain, nonatomic) UILabel* labelTaskAction;
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) UIImageView* statusIcon;
@property(assign, nonatomic) int nSendStatus;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface SendBoxViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, SendPhotoTaskManagerDelegate, UIActionSheetDelegate> {
	UITableView* _tableView;
	UIViewController* _parent;
	id<SendBoxViewControllerDelegate> _delegate;
	UIAlertView* _alertView;
	NSMutableArray* _uploadPhotoList;
	int _photoCurrentIndex;
	BOOL _isUploadFailList;
	int _deletePhotoIndex;
	int _totalNum;
	NSMutableArray* _uploadVideoList;
	int _videoCurrentIndex;
	BOOL _isUploadVideoFailList;
	BOOL _isUploadVideoPause;
	int _deleteVideoIndex;
	NSMutableArray* _uploadWriteMsgList;
	int _writeMsgCurrentIndex;
	SendPhotoTaskManager* _sendPhotoTaskManager;
	BOOL _isGobackHome;
	QQNobodyView* _nobodyView;
	BOOL _isQzoneUpload;
}
@property(assign, nonatomic) BOOL isQzoneUpload;
@property(assign, nonatomic) int totalNum;
@property(readonly, assign, nonatomic) int photoCurrentIndex;
@property(assign, nonatomic) id<SendBoxViewControllerDelegate> delegate;
@property(assign, nonatomic) UIViewController* parent;
@property(retain, nonatomic) NSMutableArray* uploadWriteMsgList;
@property(retain, nonatomic) NSMutableArray* uploadVideoList;
@property(retain, nonatomic) NSMutableArray* uploadPhotoList;
+(void)removeAllHistoryFile;
+(BOOL)haveUploadHistory;
+(BOOL)removeUploadPhotoHistoryFile;
+(id)readUploadPhotoHistoryFile;
+(BOOL)haveUploadPhotoHistory;
+(id)sharedInstance;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view selectAtRowSection0:(id)rowSection0;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)deleteUpLoad:(id)load;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)deleteConform;
-(void)viewDidUnload;
-(void)loadView;
-(void)onCancel:(id)cancel;
-(void)onEdit:(id)edit;
-(void)clickGoHome:(id)home;
-(void)savePhotoHistory2File;
-(void)removeIndicator2Cell:(int)cell cellView:(id)view;
-(void)addIndicator2Cell:(id)cell tag:(int)tag;
-(int)getTotalFailCount;
-(void)delayReloadTable;
-(void)reloadCurrentData;
-(void)upLoadPhotoFail;
-(void)uploadPhotoSuccess;
-(void)updateProgress2PhotoCell:(id)cell progress:(float)progress fileOffset:(int)offset;
-(void)setCurrentPhotoModel:(id)model;
-(id)getCurrentPhotoModel;
-(void)cancelUploadPhoto;
-(void)startUploadPhoto;
-(void)uploadPhotoWithIndex:(int)index;
-(BOOL)isPhotoUploading;
-(void)addPhotoTask:(id)task;
-(id)initWithPhotoTask:(id)photoTask;
-(void)photoTaskManger:(id)manger sendError:(id)error;
-(void)photoTaskManger:(id)manger sendEnd:(id)end;
-(void)photoTaskManger:(id)manger sendProgress:(id)progress;
-(void)photoTaskManger:(id)manger startUplaod:(id)uplaod;
-(id)init;
@end

@interface SendPhotoTaskManager : NSObject {
	NSMutableArray* _uploadImageList;
	int _curCnt;
	NSMutableArray* _monitorList;
	int _maxInputPhoto;
	int _uploadPhotoNumber;
	NSTimer* _uploadPhotoInfoTimer;
	NSTimer* _uploadPhotoTimer;
	UploadManager* _photoUploadManager;
	QQHttpUploadFileManager* _httpFileManager;
	NSMutableData* _uploadRespData;
	int _sucessNum;
	int _failNum;
	int _curNum;
	int _allListNum;
	NSTimer* _delayNotificationTimer;
	NSMutableArray* _unReadTaskList;
	NSMutableArray* _QzonePhotoRecord;
	NSLock* _lock;
}
@property(readonly, assign, nonatomic) int allListNum;
@property(assign, nonatomic) int curCnt;
@property(assign, nonatomic) int maxInputPhoto;
+(id)GetInstance;
-(void)qzUploadShowStausBar;
-(BOOL)getAlbumTaskAndSend;
-(BOOL)checkAllUpload:(id)upload withTotal:(int*)total withSuccNum:(int*)succNum;
-(void)sendUploadFinish:(id)finish withTotalNum:(int)totalNum withSuccNum:(int)succNum withBatchID:(long long)batchID withClientKey:(id)clientKey;
-(void)updateQZtaskStatus:(id)status;
-(void)checkBatchUploadFinish:(id)finish andResult:(id)result;
-(void)setQzoneUploadPhotoRecord:(id)record;
-(void)qzUpload:(id)upload fail:(id)fail;
-(void)qzUpload:(id)upload sucess:(id)sucess;
-(void)qzUpload:(id)upload recv:(long long)recv total:(long long)total;
-(void)qzUpload:(id)upload progress:(float)progress;
-(BOOL)throwExceptionStr:(id)str withInfoStr:(id)infoStr;
-(void)accountDeleted;
-(void)accountChange:(id)change;
-(void)applicationDidForegroundNotification:(id)application;
-(void)applicationDidEnterBackgroundNotification:(id)application;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)resetUploadNum;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)uploadManager:(id)manager error:(id)error;
-(void)uploadManagerSuccess:(id)success Key:(id)key;
-(void)uploadManager:(id)manager progress:(float)progress fileOffset:(int)offset;
-(void)sendFile:(id)file ToPhoto:(id)photo Desc:(id)desc;
-(void)cancelUploadPhoto;
-(void)continueUploadPhoto;
-(void)pauseUploadPhoto;
-(void)sendUploadEndInfoForSer;
-(void)setAllModelState:(int)state withStr:(id)str;
-(void)reciveUploadImageError:(id)error;
-(void)reciveUploadImageProgress:(id)progress;
-(void)reciveUploadImage:(id)image;
-(void)sendActionErrorWith:(id)with;
-(void)sendActionProgressWith:(id)with;
-(void)sendActionEndWith:(id)with;
-(void)sendActionStopUploading:(id)uploading;
-(void)sendActionStartUploading:(id)uploading;
-(BOOL)isEqualToCurrentTaskModel:(id)currentTaskModel;
-(BOOL)isTaskLoading;
-(void)removePhoto:(id)photo;
-(void)stopUploadPhoto;
-(void)startUploadPhoto;
-(void)handleUploadPhotoFailed:(id)failed;
-(void)startMoitor;
-(void)uploadPhotos:(id)photos;
-(BOOL)uploadPhoto:(id)photo;
-(BOOL)uploadPhotoWith:(id)with withType:(int)type;
-(id)GetUploadList;
-(void)removeAllSaveTask;
-(void)loadTask;
-(void)saveTask;
-(void)setNotificationRemoveMsgBar;
-(void)delayStartSendUploadMsg;
-(void)setNotificationStartUpload;
-(void)UploadNotification:(int)notification content:(id)content notificationName:(id)name timer:(id)timer;
-(void)sendTopMessageBarNotification;
-(void)notificaitonForMessageBar:(id)messageBar waitting:(BOOL)waitting;
-(id)GetUnReadTaskMessage;
-(void)sendProgressMsg;
-(void)dismissQQMsgStateBar;
-(void)showQQMsgStateBar;
-(void)groupAlbumUploadPhoto:(id)photo;
-(void)postNotitficationAfterUploadQZoneAlbum;
-(id)comparePhotoPathGetDef:(id)def;
-(BOOL)isFullAlbumTask:(id)task;
-(void)clearTaskManger;
-(void)clearDeadTask;
-(BOOL)reducesCount:(int)count;
-(float)GetCurrentFileProgress;
-(int)GetWaitUploadCount;
-(int)GetAliveTaskCount;
-(int)GetFailTaskCount;
-(int)GetIndexWithModel:(id)model;
-(id)GetModelWithPath:(id)path;
-(void)removeMoitor:(id)moitor;
-(void)addMonitor:(id)monitor;
-(void)onMSFNetworkApnStateNotification:(id)notification;
-(void)onMSFNetworkStateNotification:(id)notification;
-(void)dealloc;
-(id)init;
@end

@interface QZAlbumManger : NSObject {
	long long _uin;
	NSMutableArray* _albumList;
	int _albumIndex;
	NSTimer* _timer;
	NSMutableArray* _targetList;
	NSTimer* _delayTimer;
	NSMutableArray* _albumCache;
	int _seq;
}
+(id)GetInstances;
-(void)createAlbumCallBack:(id)back;
-(void)delayDownAlbumList:(id)list;
-(void)getAlbumListCallback:(id)callback;
-(void)requstTimerOut:(id)anOut;
-(void)startTimer;
-(void)createNewAlbum:(id)album;
-(void)clearCurrentAlbumList;
-(void)saveAlbum;
-(id)currentAlbumList;
-(void)downAlbumDataFromNetWith:(id)with;
-(id)readAlbumDataFromDiskWith:(id)with;
-(void)removeMoitor:(id)moitor;
-(void)addMonitor:(id)monitor;
-(void)dealloc;
-(id)init;
@end

@interface CNeighborFeedFile : NSObject {
	int _beginTime;
	int _endTime;
	int _nextFeedTime;
	int _feedCount;
	NSArray* _feedCache;
}
@property(retain, nonatomic) NSArray* feedCache;
@property(assign, nonatomic) int feedCount;
@property(assign, nonatomic) int nextFeedTime;
@property(assign, nonatomic) int endTime;
@property(assign, nonatomic) int beginTime;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)getFullName;
-(BOOL)removeFile;
-(BOOL)saveFeedList:(id)list;
-(id)getFeedList;
-(void)clearCache;
-(BOOL)isCacheExist;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CNeighborFeedInfo : QQModel {
	long long lMid;
	int lTime;
	NSData* stFace;
	int iFaceID;
	NSString* strNick;
	NSString* strDescription;
	NSString* sAction;
	BOOL bHavePhoto;
@private
	BOOL bUnRead;
}
@property(assign, nonatomic) BOOL bHavePhoto;
@property(assign, nonatomic) BOOL bUnRead;
@property(retain, nonatomic) NSString* sAction;
@property(retain, nonatomic) NSString* strDescription;
@property(retain, nonatomic) NSString* strNick;
@property(assign, nonatomic) int iFaceID;
@property(retain, nonatomic) NSData* stFace;
@property(assign, nonatomic) int lTime;
@property(assign, nonatomic) long long lMid;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)toRecentMessageModel;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CNeighborMoreFeed : NSObject {
	int seqID;
	int beginTime;
	int endTime;
	int feedState;
}
@property(assign, nonatomic) int feedState;
@property(assign, nonatomic) int endTime;
@property(assign, nonatomic) int beginTime;
@property(assign, nonatomic) int seqID;
-(BOOL)isEqual:(id)equal;
-(id)init;
@end

@interface NeighborFeedFileEngine : NSObject {
	NSMutableArray* _feedFileList;
}
-(void)clearUnreadFlag;
-(id)getNeighborMoreFeedByNextFeedTime:(int)time;
-(int)getLatestNeighborFeedTime;
-(id)getNeighborFeedListByMoreFeed:(id)feed;
-(id)getNeighborFeedListByEndTime:(int)time;
-(BOOL)saveNeighborFeedList:(id)list nextFeedTime:(int)time;
-(BOOL)addFeedFile:(id)file;
-(void)rearrangeFeedList;
-(id)mergeTwoFeedList:(id)list with:(id)with;
-(id)divideFeedList:(id)list;
-(BOOL)saveFeedFileList;
-(id)getFeedFileList;
-(void)resetEngine;
-(void)dealloc;
-(id)init;
@end

@interface NeighborFeedServerEngine : NSObject <CIMNeighborFeedEngineDelegate> {
	NSMutableDictionary* _seqDict;
	NeighborFeedFileEngine* _fileEngile;
	int _newFeedCount;
	NSMutableArray* _newFeedList;
	NSTimer* _newFeedRequestTimer;
}
+(id)GetInstance;
-(void)CIMNeighborFeedEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)didRespNewNeighborFeed:(RespNewNeighborFeed*)feed;
-(void)didRespNeighborFeedList:(RespNeighborFeedList*)list seq:(int)seq;
-(id)getNeighborFeedInfoFromWupData:(NeighborFeedInfo*)wupData;
-(int)requestNewNeighborFeedCount;
-(int)requestNeighborFeedList:(int)list endTime:(int)time timeStamp:(int)stamp;
-(void)clearUnreadFlag;
-(void)clearNewFeedData;
-(id)getNewFeedList;
-(int)getNewFeedCount;
-(int)getLatestNeighborFeedTime;
-(id)getNeighborFeedListByMoreFeed:(id)feed;
-(id)getNeighborFeedListByEndTime:(int)time;
-(void)dealloc;
-(void)changeAccount:(id)account;
-(void)onShareLocationChanged:(id)changed;
-(void)onNewFeedRequestTimer;
-(void)stopNewFeedRequestTimer;
-(void)startupNewFeedRequestTimer;
-(id)init;
@end

@interface CSMaskView : UIControl {
}
-(void)drawRect:(CGRect)rect;
@end

@interface QQRichMsgPreviewDialog : FullscreenOverlayView <QIMTextInputDelegate, UITextFieldDelegate, UITextViewDelegate> {
	UIView* _container;
	UIImageView* _backgroundView;
	QQRichMsgView* _msgView;
	UIButton* _sendButton;
	UIButton* _cancelButton;
	UILabel* _appSrcDesLbl;
	UIImageView* _lineImgView;
	id<RichMsgPreviewDialogDelegate> _dialogDelegate;
	CGRect _containerFrame;
	UITextView* _addtionalMsgView;
@private
	UIView* _actionArea;
	int _addtionalMsgLineNum;
	BOOL _bInitLayout;
	UIWindow* _lastKeyWindow;
}
@property(retain, nonatomic) UIWindow* lastKeyWindow;
@property(assign, nonatomic) UITextView* addtionalMsgView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidChange:(id)textView;
-(void)textViewDidEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)relayout;
-(void)appDidEnterBackground:(id)app;
-(void)cancelButtonClick:(id)click;
-(void)sendButtonClick:(id)click;
-(id)getContent;
-(void)dismiss;
-(void)show;
-(void)hideKeyboard;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithTitle:(id)title srcDes:(id)des summary:(id)summary image:(id)image rightBtnText:(id)text showPreviewImgBounds:(BOOL)bounds delegate:(id)delegate;
-(id)initWithAddtionalMsg:(id)addtionalMsg srcDes:(id)des summary:(id)summary image:(id)image rightBtnText:(id)text showPreviewImgBounds:(BOOL)bounds delegate:(id)delegate addtionalmessage:(id)addtionalmessage;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface QQRichMsgView : UIView {
	NSString* _title;
	NSString* _summary;
	UIImage* _image;
	UIImage* _roundImg;
	CGRect _titleRect;
	CGRect _subTitleRect;
	CGRect _summaryRect;
	CGRect _imageRect;
@private
	BOOL showImageBounds;
}
@property(assign, nonatomic) BOOL showImageBounds;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSString* summary;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)layoutView;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UploadManager : NSObject <NSCoding> {
	NSMutableArray* _array;
	int _index;
	QQHttpUploadFileManager* _uploadFileManger;
	NSMutableData* _uploadRespData;
	NSString* _sid;
	int _retryCnt;
	id _delegate;
	SEL _sel;
	int _status;
}
@property(retain, nonatomic) QQHttpUploadFileManager* uploadFileManger;
@property(retain, nonatomic) NSString* sid;
@property(assign, nonatomic) int index;
@property(retain, nonatomic) NSMutableArray* array;
+(id)getUploadInfoDbname;
+(id)GetInstance;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)notifyResult:(id)result;
-(int)getPacketSendLen:(id)len;
-(void)uploadError:(id)error Resp:(id)resp;
-(void)uploadProgress:(id)progress Resp:(id)resp;
-(void)stopUpload;
-(void)continueUpload;
-(void)pauseUpload;
-(void)startUpload;
-(int)uploadCurrSegment;
-(int)uploadNextSegment;
-(void)setUploadArray:(id)array;
-(void)sendSegment:(id)segment;
-(void)loadUploadInfo;
-(void)saveUploadInfo;
-(void)setDelegate:(id)delegate;
-(void)loginOk;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface UploadSegmentReq : NSObject {
	int _fileSize;
	NSString* _md5;
	int _offset;
	int _length;
	NSString* _filekey;
	NSData* _fileData;
}
@property(retain, nonatomic) NSData* fileData;
@property(retain, nonatomic) NSString* filekey;
@property(assign, nonatomic) int length;
@property(assign, nonatomic) int offset;
@property(retain, nonatomic) NSString* md5;
@property(assign, nonatomic) int fileSize;
-(void)dealloc;
-(id)init;
@end

@interface UploadSegmentResp : NSObject {
	int _result;
	NSString* _filekey;
	int _offset;
	NSString* _errInfo;
	int _gprsseg;
	int _3gseg;
	int _wifiseg;
}
@property(assign, nonatomic) int wifiseg;
@property(assign, nonatomic) int t3gseg;
@property(assign, nonatomic) int gprsseg;
@property(retain, nonatomic) NSString* errInfo;
@property(assign, nonatomic) int offset;
@property(retain, nonatomic) NSString* filekey;
@property(assign, nonatomic) int result;
-(void)dealloc;
-(id)init;
@end

@interface UploadFile : NSObject <NSCoding> {
	NSString* _file;
	int _fileSize;
	NSString* _md5;
	int _offset;
	int _chunksize;
	int _index;
	NSString* _filekey;
@private
	NSFileHandle* _handle;
}
@property(retain, nonatomic) NSString* filekey;
@property(assign, nonatomic) int index;
@property(assign, nonatomic) int chunksize;
@property(assign, nonatomic) int offset;
@property(retain, nonatomic) NSString* md5;
@property(assign, nonatomic) int fileSize;
@property(retain, nonatomic) NSString* file;
+(id)file_md5:(id)a5;
-(void)setUploadSegment:(int)segment Len:(int)len;
-(id)traversalNextSegment;
-(id)getSegmentPacket;
-(id)loadFileData:(unsigned)data Len:(int)len;
-(void)dealloc;
-(id)initWithFile:(id)file fileOffset:(int)offset;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QQFeedBackViewController : QQViewController <QIMTextInputDelegate, UITextViewDelegate, UITextFieldDelegate, UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate> {
	UITextView* _textView;
	UITableView* _listTableView;
	UILabel* _titleNumTable;
	UILabel* _textNumTable;
	UIButton* _clearTextButton;
	UIButton* _titleButton;
	BOOL _isPublishing;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)onFeedBackNotify:(id)notify;
-(void)titleButtonClick:(id)click;
-(void)clearTextButtonClick:(id)click;
-(void)hideKeyboard;
-(void)rightButtonClick:(id)click;
-(void)leftButtonClick:(id)click;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface QQFeedBackEngine : NSObject {
	int _reqSeq;
	NSTimer* _feedBackTimer;
}
+(id)GetInstance;
-(void)onTimeout;
-(void)stopTimer;
-(void)startTimer;
-(void)CancelPostFeedBack;
-(void)feedBackCallBack:(id)back;
-(BOOL)postFeedBack:(id)back text:(id)text;
-(void)dealloc;
-(id)init;
@end

@interface QQConcernViewController : QQViewController <EGORefreshTableHeaderDelegate, TabMenuDelegate, NearbyFriendTableViewDelegate> {
	NearbyFriendTableView* _tableView[2];
	BOOL _getFullContent[2];
	CUserData* _userData[2];
	NSMutableArray* _userList[2];
	QQNobodyView* _nobodyView[2];
	BOOL _reloading[2];
	NSArray* _viewArray;
	BOOL _tabIndex;
	TabMenu* _menu;
	int _zanCount;
}
@property(assign, nonatomic) BOOL tabIndex;
-(BOOL)isSupportRightDragToGoBack;
-(int)egoRefreshTableHeaderDataSourceLastUpdated:(id)updated;
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
-(void)deleteData:(id)data index:(id)index;
-(BOOL)getMoreData:(id)data;
-(BOOL)refreshTableList:(id)list;
-(void)doneLoadingTableViewData:(id)data;
-(void)getVotersListCallback:(id)callback;
-(void)getFavoriteListCallback:(id)callback;
-(void)updateLeftTabBtn:(int)btn;
-(void)updateRightTabBtn:(int)btn;
-(void)didSelectIndex:(int)index;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(void)releaseAllViews;
-(void)initNotification;
@end

@interface QQInfoViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, SendPhotoTaskManagerDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, SendPhotoTaskManagerDelegate, UITextFieldDelegate, IEditViewControllerObserver, IFaceObserver> {
	UITableView* _tableView;
	NSMutableArray* _dataSources;
	NSMutableArray* _dataFoots;
	NSTimer* _timer;
	NSString* _sign;
	UIImage* _curUploadHeadImage;
	QQAsynHeadImageView* _headImageView;
	UIView* _subBoradView;
	QQAearPickerView* _pickerContentView;
	QQProfileModel* _profile;
	UITapGestureRecognizer* _tableRecognizer;
	BOOL _sourceBeChange;
	BOOL _updataSuccess;
	QQProfileModel* _profileBeforeSetting;
	int _sessionID;
}
@property(retain, nonatomic) UIImage* curUploadHeadImage;
-(BOOL)setItem:(id)item withKey:(id)key;
-(void)tapClick:(id)click;
-(void)disMissAearPickerView;
-(void)showAearPickerView:(id)view;
-(void)touchEnable:(id)enable;
-(void)editItemInputBox:(id)box withItem:(id)item;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)showNickInput:(id)input;
-(void)showSexActionSheet:(id)sheet;
-(void)birthdayClick:(id)click;
-(void)profileBris:(id)bris;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(void)loadImagedFinish:(id)finish;
-(void)reciveUploadImageError:(id)error;
-(void)reciveUploadImage:(id)image;
-(void)notifyLoadHeadImageFinished:(id)finished;
-(void)notifyGetHeadImageSucc:(id)succ;
-(void)notificationToCardUpdataImage;
-(void)callBackUploadSgin:(id)sgin;
-(void)callBackUploadSginTimerOut:(id)anOut;
-(id)findUUID:(id)uuid;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)handleSetMyFeeling;
-(void)showActionSheetEmotionState;
-(void)showActionSheetWithChangeHeadImage;
-(void)clickSwitch:(id)aSwitch;
-(void)onSetBirthCallBack:(id)back;
-(void)selectDone;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)loadData;
-(void)ayncSaveProfileModel:(id)model;
-(id)loadProfileModel:(long long)model;
-(id)GetValueForKey:(id)key;
-(void)handleGetPersonProfileNotification:(id)notification;
-(void)handleModifyProfileTagNotification:(id)notification;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)popCurViewController:(id)controller;
-(void)actionSave:(id)save;
-(void)onSetProgileCallBack:(id)back;
-(void)setProfileTimeout;
-(BOOL)isSettingChanged;
-(id)GetSexStr:(int)str;
-(void)dealloc;
-(void)viewDidUnload;
-(void)loadView;
-(id)init;
@end

@interface RichMsgUploadStuct : NSObject {
@private
	NSString* dest;
	NSData* ImgData;
	NSString* attachMsg;
	NSString* actionUrl;
	unsigned appid;
	NSString* uuid;
	BOOL isDiscussGruop;
	BOOL isC2C;
	int msgId;
	int msgTime;
	BOOL _isGroup;
}
@property(assign, nonatomic) int msgTime;
@property(assign, nonatomic) int msgId;
@property(assign, nonatomic) BOOL isC2C;
@property(assign, nonatomic) BOOL isGroup;
@property(assign, nonatomic) BOOL isDiscussGruop;
@property(copy, nonatomic) NSString* uuid;
@property(assign, nonatomic) unsigned appid;
@property(copy, nonatomic) NSString* actionUrl;
@property(copy, nonatomic) NSString* attachMsg;
@property(retain, nonatomic) NSData* ImgData;
@property(copy, nonatomic) NSString* dest;
-(id)toMsgModel;
-(void)dealloc;
@end

@interface QQForwardEngine : NSObject <SelectLocationDelegate, UIActionSheetDelegate, UniFileTransEngineObserver, UIImagePickerControllerDelegate, UINavigationControllerDelegate, QQFriendSelectedViewControllerDelegate, SimpleAlertViewDelegate> {
	NSDictionary* _selLocParamDic;
	NSDictionary* _uploadPhotoParamDic;
	UIImage* _willChooseImage;
	NSDictionary* _sendMoodParamDic;
	NSDictionary* _shareToFriParamDic;
	SimpleAlertView* _alertView;
	NSNotification* _cacheNotification;
	BOOL _isOpenGroupMsgState;
	BOOL _isOpenPersonMsgState;
@private
	QQFriendSelectedViewController* myFriSelectVC;
}
@property(retain, nonatomic) QQFriendSelectedViewController* myFriSelectVC;
+(id)GetInstance;
-(void)processSchemeCallBack:(id)back withParamStr:(id)paramStr;
-(void)processJSCallBack:(id)back withParamStr:(id)paramStr;
-(void)commonFileUploadFinished:(id)finished sessionID:(int)anId resultCode:(int)code transInfo:(id)info;
-(void)foodPicUploadFinished:(id)finished resultCode:(int)code;
-(void)resourceFileDownloadFinished:(id)finished resultCode:(int)code;
-(id)GetPreviewImageToSend;
-(void)uploadPhoto;
-(void)imageSelected:(id)selected;
-(void)handleImagePickerDelegate:(id)delegate;
-(void)saveToAlbum:(id)album;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)ActionAlbum;
-(void)ActionCamera;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)ActionImage;
-(void)ActionUploadPhoto:(id)photo;
-(void)NotifySelectLocation:(XXStruct_zYrK5D)location address:(id)address;
-(void)ActionSelLocation:(id)location;
-(void)ActionViewPhoto:(id)photo;
-(void)ActionPlayMp4:(id)a4;
-(void)ActionForwardUrl:(id)url;
-(void)ActionOpenHomepage:(id)homepage;
-(void)ActionWriteMood:(id)mood;
-(void)chatViewCtrlLeftBtnFun:(id)fun;
-(void)fileSelViewCtrlLeftBtnFunForSuccess:(id)success;
-(void)fileSelViewCtrlLeftBtnFun:(id)fun;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)didSendMsgFinished:(BOOL)finished;
-(void)ActionShowGroupsNearby:(id)nearby;
-(void)ActionOpenEmojiShop:(id)shop;
-(void)ActionCreateGroup:(id)group;
-(void)ActionOpenVirtualCable:(id)cable;
-(void)ActionStartWalletPay:(id)pay;
-(void)ActionOpenQRCodeScanner:(id)scanner;
-(void)ActionOpenCaCa:(id)ca;
-(void)ActionShareToFriNew:(id)friNew;
-(void)showShareMsgToUin:(id)uin withData:(id)data hasPreviewDialog:(BOOL)dialog;
-(void)ShowChatWindow:(id)window;
-(void)ActionShowLocation:(id)location;
-(void)ActionShowPslCard:(id)card;
-(void)ActionOpenGroupAlbum:(id)album;
-(void)ActionOpenSetting:(id)setting;
-(void)ActionOpenContact:(id)contact;
-(void)AsyncOpenContactList;
-(void)AsyncOpenDiscussGroupList;
-(void)AsyncOpenGroupList;
-(void)AsyncOpenFriendList;
-(void)ActionShowNearByFri:(id)fri;
-(void)processActionChatRobot:(id)robot;
-(void)processActionChatGroup:(id)group;
-(void)processActionChatC2C:(id)c;
-(void)ActionImChat:(id)chat;
-(void)ActionAddDiscussGroup:(id)group;
-(void)ActionDecodeSig:(id)sig;
-(void)requestDecodeSig:(id)sig;
-(void)willDismissFromScreen;
-(id)getMaxSubString:(id)string maxLength:(int)length;
-(void)ActionUrlParseSucc:(id)succ;
-(void)ActionLoginSuccessNotify;
-(void)initObserver;
-(void)dealloc;
-(id)init;
-(void)dismissShareUI;
-(BOOL)saveAndSendOneShareTextMsg:(id)msg msgTargetType:(int)type withMsg:(id)msg3 withMsgID:(int)msgID isSendMsg:(BOOL)msg5 appShareID:(unsigned)anId;
-(void)delaySendSecondMsg:(id)msg;
-(BOOL)sendShareTextMsg:(id)msg msgTargetType:(int)type withMsg:(id)msg3 attachMsg:(id)msg4 appShareID:(unsigned)anId;
-(BOOL)sendShareRichMsgToC2C:(id)c2C withImageData:(id)imageData attachedMsg:(id)msg actionUrl:(id)url appShareID:(unsigned)anId;
-(void)c2cUpload:(id)upload message:(id)message;
-(BOOL)sendShareRichMsgToDiscussGroup:(id)discussGroup withImageData:(id)imageData attachedMsg:(id)msg actionUrl:(id)url appShareID:(unsigned)anId;
-(BOOL)sendShareRichMsgToGroup:(id)group withImageData:(id)imageData attachedMsg:(id)msg actionUrl:(id)url appShareID:(unsigned)anId;
-(BOOL)saveAttachMsg:(id)msg withMsgID:(int)msgID;
-(id)insertToDB:(id)db;
-(void)httpUpload:(id)upload;
-(id)saveImageData:(id)data;
@end

@interface QQTextFieldManager : NSObject {
	NSString* _currUin;
	NSMutableDictionary* _inputStateDict;
	NSMutableDictionary* _inputCacheDict;
	NSMutableDictionary* _pendingCacheDict;
}
+(id)getInstance;
-(void)savePendingCacheDict;
-(void)loadPendingCacheDict;
-(void)clearMessagePending;
-(void)markMessagePending:(BOOL)pending uin:(id)uin type:(int)type;
-(BOOL)isMessagePending:(id)pending type:(int)type;
-(id)packageUINKey:(id)key type:(int)type;
-(void)saveAllData;
-(void)setChatViewControllerTextFieldCache:(id)cache uin:(id)uin isGroup:(BOOL)group;
-(id)getChatViewControllerTextFieldCache:(id)cache isGroup:(BOOL)group;
-(void)saveChatViewControllerInputCache;
-(void)loadChatViewControllerInputCache;
-(void)setTextFieldInitState:(id)state isGroup:(BOOL)group isTextState:(BOOL)state3;
-(BOOL)isTextFieldInitWithTextState:(id)textState isGroup:(BOOL)group;
-(void)saveChatViewControllerInputState;
-(void)loadChatViewControllerInputState;
-(void)changeAccount:(id)account;
-(void)dealloc;
@end

@interface QQMoreCell : QQUITableViewCell {
	UIImageView* _background;
	UILabel* _titleLabel;
	NSString* _title;
	int _beginSeq;
	int _endSeq;
}
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int endSeq;
@property(assign, nonatomic) int beginSeq;
-(void)dealloc;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QMsgDuplicateChecker : NSObject {
	id _msgCache;
	NSTimer* _recoverTimer;
}
-(list<TMsgIndexInfo, std::allocator<TMsgIndexInfo> >*)getMsgList;
-(void)ClearMsgCache;
-(void)addMsgToCache:(TMsgIndexInfo*)cache;
-(void)cacheMessage:(id)message;
-(BOOL)checkMsgIsDuplicateNotC2C:(id)c cache:(BOOL)cache;
-(BOOL)checkMsgIsDuplicate:(id)duplicate cache:(BOOL)cache;
-(BOOL)checkMsgIsDuplicate:(id)duplicate;
-(BOOL)isMessageC2C:(id)c;
-(void)recoverTimerCallback;
-(void)stop;
-(void)start;
-(void)dealloc;
-(id)init;
@end

@interface QMSFConnectService : NSObject <IMSFConnectService> {
}
+(id)getInstance;
-(BOOL)isConnected;
-(BOOL)isConnecting;
-(void)disconnect;
-(void)switchIPConnect;
-(void)connect;
@end

@interface QPacketDispatchService : NSObject <IPacketDispatchService, IMSFDelegate> {
	NSMutableDictionary* _packetDispatchDelegateDic;
	long long _uin;
	int _Key;
	NSData* _Sid;
	NSData* _A2;
	NSData* _D2;
	NSData* _HA3;
	id<IMSFDelegate> _defaultDispatchDelegate;
	id<IMSFRegisterQQDelegate> _registerQQDelegate;
}
+(id)getInstance;
-(void)OnMSFRQCommitPassResult:(id)result;
-(void)OnMSFRQResendSmsResult:(id)result;
-(void)OnMSFRQQuerySmsStatResult:(id)result;
-(void)OnMSFRQCommitSmsCodeResult:(id)result;
-(void)OnMSFRQCommitMobileResult:(id)result;
-(void)OnMSFMsg:(id)msg;
-(void)OnMSFIllegalGrayApp:(id)app;
-(void)OnMSFForceOffline:(id)offline;
-(void)OnMSFSocketFlow:(id)flow;
-(void)OnMSFPacketState:(id)state;
-(void)OnMSFApnState:(id)state;
-(void)OnMSFNetworkState:(id)state;
-(void)OnMSFSSOErrorStateResult:(id)result;
-(void)OnMSFRecvDataFromBackend:(const char*)backend buf:(char*)buf bufLen:(int)len seq:(int)seq;
-(void)OnMSFRespondVerifyPic;
-(void)OnMSFExchangeUinResult:(id)result;
-(void)OnMSFAuthResult:(id)result;
-(BOOL)rqCommitPass:(id)pass;
-(BOOL)rqCommitSmsCode:(id)code;
-(BOOL)rqReSendSms;
-(BOOL)rqQueryUpSmsStat;
-(BOOL)rqCommitMobile:(id)mobile;
-(void)setHA3:(char*)a3 length:(int)length;
-(void)setD2:(char*)a2 length:(int)length;
-(void)setA2:(char*)a2 length:(int)length;
-(void)setSid:(char*)sid length:(int)length;
-(void)setKey:(int)key;
-(void)setUin:(long long)uin;
-(void)setRegisterQQDelegate:(id)delegate;
-(void)setDefaultDispatchDelegete:(id)delegete;
-(BOOL)sendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(BOOL)sendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut;
-(BOOL)sendWupBuffer:(char*)buffer cmd:(id)cmd seq:(int*)seq immediately:(BOOL)immediately;
-(int)getSeq;
-(void)unregisterDispatchDelegate:(id)delegate;
-(BOOL)registerDispatchDelegate:(id)delegate dispatchDelegate:(id)delegate2;
-(void)dealloc;
-(id)init;
-(BOOL)sendWupBufferBase:(char*)base cmd:(id)cmd seq:(int*)seq resendSeq:(int)seq4 immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
@end

@interface QServiceFactory : NSObject <IServiceFactory> {
}
-(id)getCoreMotionService;
-(id)getAlbumService;
-(void)destroyAlbumService;
-(id)createAlbumService;
-(void)destroyMessageListService;
-(id)createMessageListService;
-(id)getMessageListService;
-(id)getFriRecommendService;
-(void)destroyFriRecommendService;
-(id)createFriRecommendService;
-(id)getCircleService;
-(void)destroyCircleService;
-(id)createCircleService;
-(id)getMsgSpliteMergeService;
-(id)getUrlImageService;
-(void)destroyUrlImageService;
-(id)createUrlImageService;
-(id)getContactsService;
-(void)destroyContactsService;
-(id)GroupDBServie;
-(id)createContactsService;
-(id)getNetworkFlowStatService;
-(void)destroyNetworkFlowStatService;
-(id)createNetworkFlowStatService;
-(id)getTransportationService;
-(id)createHandleGarbageService;
-(id)getIMService;
-(void)destroyIMService;
-(id)createIMService;
-(id)getVideoChatService;
-(void)destroyVideoChatService;
-(id)createVideoChatService;
-(id)getUIForwardService;
-(void)destroyUIForwardService;
-(id)createUIForwardService;
-(id)getSynInfoService;
-(void)destroySynInfoService;
-(id)createSynInfoService;
-(id)getUserSummaryService;
-(void)destroyUserSummaryService;
-(id)createUserSummaryService;
-(id)getLBSService;
-(void)destroyLBSService;
-(id)createLBSService;
-(id)getFaceService;
-(void)destroyFaceService;
-(id)createFaceService;
-(id)getFriendListService;
-(void)destroyFriendListService;
-(id)createFriendListService;
-(id)getAccountService;
-(void)destroyAccountService;
-(id)createAccountService;
-(id)getMSFConnectService;
-(void)destroyMSFConnectService;
-(id)createMSFConnectService;
-(id)getPacketDispatchService;
-(void)destroyPacketDispatchService;
-(id)createPacketDispatchService;
@end

@interface QQFlipImageView : UIControl {
	UIImageView* _imgView;
	float _duration;
	NSString* _flipType;
	NSString* _direction;
}
@property(retain, nonatomic) NSString* direction;
@property(retain, nonatomic) NSString* flipType;
@property(readonly, assign, nonatomic) UIImageView* imgView;
@property(assign) float duration;
-(void)dealloc;
-(void)flipToImage:(id)image;
-(void)setFrame:(CGRect)frame;
-(id)getImage;
-(void)setImage:(id)image;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQLogger : NSObject {
	int _logLevel;
	NSMutableArray* _cacheLogArray;
	NSOperationQueue* _operationQueue;
	NSTimer* _saveLogTimer;
	NSLock* _lock;
	NSString* _logFilePath;
	FILE* _fileHandle;
	char* _curLogFileDate;
	BOOL _isCanRuningSaveLogOpt;
}
@property(readonly, assign, nonatomic) NSString* logFilePath;
@property(assign, nonatomic, setter=setLogLevel:) int logLevel;
+(id)GetInstance;
-(void)uploadSharpLog:(unsigned long long)log :(const char*)arg2;
-(void)uploadVideoLog:(unsigned long long)log :(const char*)arg2;
-(void)checkLogUploadOnUserFeedback;
-(void)checkLogUploadOnCrash;
-(void)flushLog:(BOOL)log;
-(void)setLogFilePath:(id)path;
-(void)setLogLevelIndeed:(int)indeed;
-(void)updateLogLevel;
-(const char*)getLevelDes:(int)des;
-(void)getCurDateString:(char*)string;
-(void)processCheckLogFile;
-(void)addCheckLogFileOperation;
-(void)checkLogFile;
-(void)saveOneLog:(id)log;
-(void)saveLog:(id)log;
-(void)addSaveLogOperation;
-(void)WillEnterForeground;
-(void)createLogFile;
-(void)uploadLogFile:(id)file;
-(void)addUploadLogFileOperation:(long long)operation isInitiative:(BOOL)initiative NeedUpLogDate:(id)date beginHour:(int)hour endHour:(int)hour5 additionalInfo:(id)info;
-(void)uploadLog:(long long)log isInitiative:(BOOL)initiative bgnTime:(tm)time endTime:(tm)time4 additionalInfo:(id)info;
-(void)testUploadLog;
-(void)saveLogTimerOut;
-(BOOL)addOneLogInternal:(int)internal inFile:(const char*)file inLine:(unsigned)line moduleName:(const char*)name actionName:(const char*)name5 withLogContent:(char*)logContent;
-(BOOL)addOneMessageLog:(int)log inFile:(const char*)file inLine:(unsigned)line memberDic:(id)dic sortArray:(id)array withLogContent:(char*)logContent;
-(BOOL)addOneCLog:(int)log inFile:(const char*)file inLine:(unsigned)line moduleName:(const char*)name actionName:(const char*)name5 withLogContent:(char*)logContent;
-(void)dealloc;
-(id)init;
@end

@interface TTTAttributedLabel : UILabel <TTTAttributedLabel, UIGestureRecognizerDelegate> {
@private
	NSAttributedString* _attributedText;
	CTFramesetterRef _framesetter;
	BOOL _needsFramesetter;
	id _delegate;
	unsigned _dataDetectorTypes;
	NSDataDetector* _dataDetector;
	NSArray* _links;
	NSDictionary* _linkAttributes;
	float _shadowRadius;
	float _leading;
	float _lineHeightMultiple;
	float _firstLineIndent;
	UIEdgeInsets _textInsets;
	int _verticalAlignment;
	UITapGestureRecognizer* _tapGestureRecognizer;
	CTFramesetterRef _highlightFramesetter;
}
@property(copy, nonatomic) id text;
@property(retain, nonatomic) UITapGestureRecognizer* tapGestureRecognizer;
@property(retain, nonatomic) NSDataDetector* dataDetector;
@property(assign, nonatomic) CTFramesetterRef highlightFramesetter;
@property(assign, nonatomic) CTFramesetterRef framesetter;
@property(copy, nonatomic) NSAttributedString* attributedText;
@property(assign, nonatomic) int verticalAlignment;
@property(assign, nonatomic) UIEdgeInsets textInsets;
@property(assign, nonatomic) float lineHeightMultiple;
@property(assign, nonatomic) float leading;
@property(assign, nonatomic) float firstLineIndent;
@property(assign, nonatomic) float shadowRadius;
@property(retain, nonatomic) NSDictionary* linkAttributes;
@property(retain, nonatomic) NSArray* links;
@property(assign, nonatomic) unsigned dataDetectorTypes;
@property(assign, nonatomic) id<TTTAttributedLabelDelegate> delegate;
-(void)handleTap:(id)tap;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)drawTextInRect:(CGRect)rect;
-(CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(int)lines;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setText:(id)text afterInheritingLabelAttributesAndConfiguringWithBlock:(id)block;
-(void)drawStrike:(CTFrameRef)strike inRect:(CGRect)rect context:(CGContextRef)context;
-(void)drawFramesetter:(CTFramesetterRef)framesetter textRange:(EctFragmentation)range inRect:(CGRect)rect context:(CGContextRef)context;
-(long)characterIndexAtPoint:(CGPoint)point;
-(id)linkAtPoint:(CGPoint)point;
-(id)linkAtCharacterIndex:(long)characterIndex;
-(void)addLinkToDate:(id)date timeZone:(id)zone duration:(double)duration withRange:(NSRange)range;
-(void)addLinkToDate:(id)date withRange:(NSRange)range;
-(void)addLinkToPhoneNumber:(id)phoneNumber withRange:(NSRange)range;
-(void)addLinkToAddress:(id)address withRange:(NSRange)range;
-(void)addLinkToURL:(id)url withRange:(NSRange)range;
-(void)addLinkWithTextCheckingResult:(id)textCheckingResult;
-(void)addLinkWithTextCheckingResult:(id)textCheckingResult attributes:(id)attributes;
-(id)detectedLinksInString:(id)string range:(NSRange)range error:(id*)error;
-(void)setNeedsFramesetter;
-(void)dealloc;
-(void)commonInit;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QSCallBackPack : NSObject {
	id _callBackObj;
	id _callBackParam;
}
@property(retain, nonatomic) id callBackParam;
@property(assign, nonatomic) id callBackObj;
+(id)callBackPackWithObj:(id)obj param:(id)param;
-(void)dealloc;
-(id)initWithObj:(id)obj param:(id)param;
@end

@interface QSEngineBase : NSObject <IQSEngineBase> {
	NSMutableDictionary* _callBackDic;
	NSMutableArray* _observers;
}
-(void)notifyObserversWithSelector:(SEL)selector info:(id)info;
-(void)notifyObserversWithSelector:(SEL)selector;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)cancelCallBackObj:(id)obj;
-(id)getCallBackPackWithID:(int)anId;
-(void)unregisterCallBackPackWithID:(int)anId;
-(int)registerCallBackPack:(id)pack;
-(void)dealloc;
-(id)init;
@end

@interface QSEngineManager : NSObject {
	id _fileStorageEngine;
	id _contactsEngine;
	id _accountRegisterEngine;
	id _FriRecommendEngine;
}
+(id)instance;
-(id)friRecommendEngine;
-(id)accountRegisterEngine;
-(id)contactsEngine;
-(id)fileStorageEngine;
-(void)dealloc;
-(id)init;
@end

@interface DiscussGroupChatViewController : QQBaseChatViewController <QIMTextInputDelegate, IDiscussGroupChatEngineDelegate> {
	BOOL bGerenalCell;
	QQMessageModel* _recordModel;
	long long _firstMsgSeq;
	BOOL _needLoadMsg;
	BOOL _firstLoad;
	NSMutableArray* _firstMsgAry;
	long long _deleteSeq;
	long long _lastPositionSeq;
	BOOL _isLoading;
	id<DiscussGroupChatViewControllerDeleagte> _delegate;
	BOOL _released;
	BOOL _doesServerHaveRoamMsg;
}
@property(retain, nonatomic) QQMessageModel* recordModel;
@property(retain, nonatomic) id<DiscussGroupChatViewControllerDeleagte> delegate;
-(void)sendReadConfirm;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
-(BOOL)growingTextViewInputReturnKey:(id)key;
-(void)tableViewDidScroll;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)startRefresh:(id)refresh;
-(void)startRefreshFoot:(id)foot;
-(void)DeleteSelfGroupInfo:(id)info;
-(void)refreshTitle:(id)title;
-(void)refreshTable:(id)table;
-(void)addDelegate:(id)delegate;
-(int)addDiscussTipMsg:(id)msg loadIndex:(int)index;
-(void)handleGetOfflineDiscussGroupMsg:(unsigned long long)msg msgArray:(id)array lastLocalMaxSeq:(unsigned)seq;
-(void)handleGetDiscussGroupMsg:(unsigned long long)msg msgArray:(id)array;
-(void)handleSendDiscussGroupMsg:(unsigned long long)msg msg:(id)msg2;
-(void)handlePushDiscussGroupMsg:(unsigned long long)msg msgArray:(id)array;
-(void)handleAsyncGetDiscussGroupMsg:(unsigned long long)msg beforeSeq:(unsigned long long)seq msgArray:(id)array;
-(void)handleAsyncGetRecentDiscussGroupMsg:(unsigned long long)msg msgArray:(id)array;
-(long long)getCurChatViewDicussUin;
-(id)filterArray:(id)array;
-(id)sortMsgArray:(id)array;
-(id)getDiscussUin;
-(void)reloadTableView:(id)view;
-(void)downLoadGroupImg:(id)img isRefresh:(BOOL)refresh;
-(void)checkMaskView;
-(void)goToManageView:(id)manageView;
-(void)showKeyboardForVoice:(id)voice;
-(void)showKeyboard:(id)keyboard;
-(void)headIconTouch:(id)touch;
-(void)goToEditGroupNameAction:(id)editGroupNameAction;
-(BOOL)canAppendMsg:(id)msg;
-(void)appendMessage:(id)message rightAway:(BOOL)away reloadTable:(BOOL)table;
-(void)appendMessageArray:(id)array;
-(void)dealloc;
-(void)restoreData;
-(void)setDiscussGroupTitle;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(id)initWithMgroupCode:(id)mgroupCode;
-(void)reSendStreamPTT:(id)ptt;
-(void)upAmrFile:(id)file;
-(void)forceToSend;
-(void)QQRecordTimeOut;
-(void)prepareSaveAndUpload:(id)upload;
-(void)QQVoiceRecordEnd:(id)end;
-(void)delayStopRecord;
-(void)performActionForSendRecord:(id)sendRecord;
-(void)sendRecord;
-(void)asyncRecord;
-(void)insertRecordCell;
-(void)perforInsertVoiceCell;
-(void)record;
-(id)currentUUID;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(BOOL)doSendTextMsg:(id)msg showText:(id)text isLocation:(BOOL)location;
-(void)reSendTextMsg:(id)msg isLocation:(BOOL)location;
-(BOOL)sendTextMsg:(id)msg showText:(id)text;
-(BOOL)QQTextField:(id)field didSendText:(id)text showText:(id)text3;
-(BOOL)sendLocationMsg:(id)msg showText:(id)text;
-(BOOL)textView:(id)view shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)tableViewReSendImage:(id)image;
-(void)SendImage:(id)image image:(id)image2 bodyType:(int)type msgTime:(int)time msgId:(int)anId;
-(void)SendGIFImage:(id)image data:(id)data bodyType:(int)type;
-(void)prepareUpload:(id)upload fileName:(id)name bodyType:(int)type;
-(void)uploadImage:(id)image;
-(id)prepareUploadMultiImage:(id)image bodyType:(int)type;
-(void)ActionSendMessgae;
-(void)sendMarketFaceMsg:(id)msg;
@end

@interface DiscussGroupChatModel : NSObject {
}
+(id)GetInstance;
-(void)dealloc;
-(void)goToChatViewController:(id)chatViewController;
-(void)initFirstDiscussGroupChatViewController:(id)controller;
-(void)initDiscussGroupChatViewController:(id)controller;
-(id)init;
@end

@interface QNetworkSpeedDetector : NSObject {
	NSTimer* _timer;
	int _TimerTick;
	unsigned _WiFiSent;
	unsigned _WiFiReceived;
	unsigned _WWANSent;
	unsigned _WWANReceived;
	unsigned _avgSpeed;
	unsigned _sendSpeed;
	unsigned _recvSpeed;
	NSMutableArray* _sendSampleArray;
	NSMutableArray* _recvSampleArray;
}
+(id)getInstance;
-(BOOL)getDataCounters:(unsigned*)counters :(unsigned*)arg2 :(unsigned*)arg3 :(unsigned*)arg4;
-(BOOL)isString:(const char*)string hasPrefix:(const char*)prefix preLen:(int)len;
-(void)OnUpdateNetSpeed;
-(void)End;
-(void)Begin;
-(BOOL)NotifyNetReachabilityDidBecomeUnreachable:(id)notifyNetReachability;
-(BOOL)NotifyNetReachabilityDidBecomeReachable:(id)notifyNetReachability;
-(int)currentRecvBps;
-(int)currentSendBps;
-(int)currentSpeedBps;
-(void)dealloc;
-(id)init;
@end

@interface VideoNeedInfo : NSObject {
	id _cellModel;
}
+(BOOL)CanShowAnimated;
+(id)GetInstance;
-(bool)IsOnLine;
-(void)upLoadSharpLog:(unsigned long long)log :(const char*)arg2;
-(void)uploadVideoLog:(unsigned long long)log :(const char*)arg2;
-(bool)IsPassView;
-(void)PrintClientLog:(id)log;
-(int)GetDeviceType;
-(void)HidePresentedView;
-(void)noHideMessageBar;
-(void)HideMessageBar;
-(void)CloseRecordView;
-(void)JumpToAVRecordViewController:(id)avrecordViewController;
-(bool)IsBackground;
-(BOOL)topViewNeedDissmiss:(id)dissmiss;
-(void)setCellModelFromMessageModel:(id)messageModel;
-(id)getRemovedImageString:(id)string;
-(float)getCellWidth;
-(float)getCellHeight;
-(id)getCutStr:(id)str withMaxLength:(float)maxLength;
-(id)getParseResult;
-(id)getCellModel;
-(BOOL)parentViewNeedDismiss:(id)dismiss;
-(id)GetTopView;
-(id)GetvisibleView;
-(void)dealloc;
-(id)init;
@end

@interface QQOpenUrlCompatability : NSObject {
}
+(BOOL)canHandleRequest:(id)request;
+(BOOL)isVersionAccepted:(id)accepted;
@end

@interface QQOpenURLRequest : NSObject {
@private
	NSString* _sourceApplication;
	id _annotation;
	NSURL* _rawURL;
	NSString* _service;
	NSString* _action;
	NSDictionary* _parameters;
	WebModelController* _webView;
}
@property(retain, nonatomic) WebModelController* webView;
@property(readonly, assign, nonatomic) NSDictionary* parameters;
@property(readonly, assign, nonatomic) NSString* action;
@property(readonly, assign, nonatomic) NSString* service;
@property(readonly, assign, nonatomic) NSURL* rawURL;
@property(readonly, assign, nonatomic) id annotation;
@property(readonly, assign, nonatomic) NSString* sourceApplication;
+(id)requestFromUrl:(id)url sourceApplication:(id)application annotation:(id)annotation;
+(id)requestFromUrl:(id)url;
-(void)dealloc;
-(id)initWithUrl:(id)url sourceApplication:(id)application annotation:(id)annotation;
-(id)getParametersFromURL:(id)url;
@end

@interface QQOpenUrlSecurityController : NSObject {
	NSDictionary* _requestTimeRecord;
@private
	NSArray* blacklist;
	NSArray* whitelist;
}
@property(retain, nonatomic, setter=setWhilelist:) NSArray* whitelist;
@property(retain, nonatomic, setter=setBlacklist:) NSArray* blacklist;
+(id)Instance;
-(BOOL)isFromTrustedSource:(id)trustedSource;
-(BOOL)isRequestAllowed:(id)allowed;
-(void)dealloc;
-(id)init;
-(BOOL)isTooFrequent:(id)frequent;
@end

@interface QQPlatform : NSObject <IQQPlatform> {
	QQServiceCenter* m_QQServiceCenter;
	QQPluginEngine* m_QQPluginEngine;
}
-(id)QQPluginCenter;
-(id)QQServiceCenter;
-(void)dealloc;
-(id)init;
@end

@interface QQPluginInfo : NSObject {
@private
	NSString* pluginId;
	int langType;
	NSString* pluginName;
	NSString* pluginDescription;
	NSString* bigPictureUrl;
	NSString* smallPictureUrl;
	NSString* resConfig;
	NSString* officialWebsite;
	NSString* appstorelink;
	NSString* messagetail;
	NSString* bundleid;
	NSDictionary* localIconData;
	BOOL noMsgTail;
}
@property(assign, nonatomic) BOOL noMsgTail;
@property(retain, nonatomic) NSDictionary* localIconData;
@property(copy, nonatomic) NSString* bundleid;
@property(copy, nonatomic) NSString* messagetail;
@property(copy, nonatomic) NSString* appstorelink;
@property(copy, nonatomic) NSString* officialWebsite;
@property(copy, nonatomic) NSString* resConfig;
@property(copy, nonatomic) NSString* smallPictureUrl;
@property(copy, nonatomic) NSString* bigPictureUrl;
@property(copy, nonatomic) NSString* pluginDescription;
@property(copy, nonatomic) NSString* pluginName;
@property(assign, nonatomic) int langType;
@property(copy, nonatomic) NSString* pluginId;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QQPlugin : NSObject {
@private
	QQPluginInfo* _info;
	NSString* _pluginID;
	int pluginType;
	id<IQQPluginInterface> _pluginInstance;
}
@property(retain, nonatomic) id<IQQPluginInterface> pluginInstance;
@property(assign, nonatomic) int pluginType;
@property(copy, nonatomic) NSString* pluginID;
@property(retain, nonatomic) QQPluginInfo* info;
+(id)QQPluginWithID:(id)anId type:(int)type info:(id)info instance:(id)instance;
-(void)dealloc;
-(id)init;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QQWebViewPlugin : QQPlugin {
@private
	WebModelController* webView;
	NSString* callbackName;
}
@property(copy, nonatomic) NSString* callbackName;
@property(retain, nonatomic) WebModelController* webView;
+(id)QQWebviewPluginWithID:(id)anId info:(id)info webview:(id)webview callbackName:(id)name;
-(void)dealloc;
@end

@interface QQPluginEngine : NSObject <IQQPluginCenter> {
	NSMutableArray* _listener;
	QQPluginInfoQuery* _plugininfoQuery;
	QQPlatformCommunicateHelper* _commHelper;
	NSMutableDictionary* _updateTimes;
}
-(id)getPluginInfoByShareID:(unsigned)anId;
-(BOOL)isApp:(id)app;
-(BOOL)isBrowser:(id)browser;
-(BOOL)registPlugin:(id)plugin ID:(id)anId type:(int)type info:(id)info manageable:(BOOL)manageable;
-(BOOL)isPluginInFavorList:(id)favorList;
-(void)removePluginFromFavorlist:(id)favorlist;
-(void)addPluginToFavorlist:(id)favorlist;
-(id)GetPluginsNotInFavorList;
-(id)GetFavorPlugins;
-(BOOL)AsyncSendMessage:(id)message toPlugin:(id)plugin from:(id)from;
-(void)ShowPlugin:(id)plugin param:(id)param;
-(void)ShowPluginAppWithScheme:(id)scheme param:(id)param;
-(id)shareIDToPluginID:(unsigned)pluginID;
-(unsigned)pluginIDToShareID:(id)shareID;
-(void)RemovePluginManagementListener:(id)listener;
-(void)AddPluginManagementListener:(id)listener;
-(id)getPluginInfo:(id)info;
-(BOOL)isPreservedID:(id)anId;
-(void)requestPlugininfo:(id)plugininfo;
-(void)broadCast:(id)cast;
-(BOOL)unregistPlugin:(id)plugin;
-(BOOL)registPlugin:(id)plugin ID:(id)anId type:(int)type info:(id)info;
-(BOOL)registWebviewPlugin:(id)plugin ID:(id)anId info:(id)info callbackName:(id)name;
-(BOOL)registPlugin:(id)plugin;
-(BOOL)SyncSendMessage:(id)message to:(id)to result:(id*)result;
-(BOOL)AsyncSendMessage:(id)message to:(id)to;
-(BOOL)handleOpenURL:(id)url sourceApplication:(id)application;
-(BOOL)handleOpenURL:(id)url;
-(BOOL)disablePlugin:(id)plugin;
-(BOOL)enablePlugin:(id)plugin;
-(void)dealloc;
-(id)init;
-(void)onLoginSuccess:(id)success;
-(void)sendOnMainThread:(id)thread;
-(BOOL)sendMessage:(id)message toNativePLUGIN:(id)nativePLUGIN;
-(BOOL)sendMessage:(id)message toWebPlugin:(id)webPlugin;
-(void)addLocalHandlers;
-(void)registSafari;
-(void)registOtherBrowser;
@end

@interface QQPluginListManager : NSObject {
	NSMutableSet* _enabledPlugins;
	NSMutableSet* _disabledPlugins;
	NSMutableSet* _webPlugins;
	NSMutableSet* _nativePlugins;
	NSMutableSet* _appPlugins;
	NSMutableSet* _favorPlugins;
	NSMutableSet* _browser;
	NSMutableDictionary* _nameOfPlugins;
	NSMutableSet* _manageablelist;
	BOOL _bHasConfigData;
	unsigned _nLastUpdateTime;
	int currentUin;
}
+(id)Instance;
-(BOOL)isPluginManageable:(id)manageable;
-(int)getPluginType:(id)type;
-(void)removeFromManageableList:(id)manageableList;
-(void)addToManageableList:(id)manageableList;
-(BOOL)isPluginInFavorList:(id)favorList;
-(id)getLocalPluginInfo:(id)info;
-(id)getPluginsNotInFavorList;
-(void)removePluginFromFavorlist:(id)favorlist;
-(void)addPluginToFavorlist:(id)favorlist;
-(id)getFavorPlugins;
-(void)loadFavorList;
-(void)updatePlugin:(id)plugin info:(id)info;
-(void)Destroy;
-(void)Construct;
-(void)WriteToFavorFile;
-(BOOL)WriteToConfigFile;
-(id)getPluginInfoByID:(id)anId;
-(BOOL)LoadFromConfigFile;
-(id)getFavorFilePath;
-(id)getPluginByID:(id)anId;
-(BOOL)hasPlugin:(id)plugin;
-(BOOL)isPluginEnabled:(id)enabled;
-(BOOL)disablePlugin:(id)plugin;
-(BOOL)enablePlugin:(id)plugin;
-(BOOL)unregistPlugin:(id)plugin;
-(BOOL)registPlugin:(id)plugin;
-(id)getAppPlugins;
-(id)getNativePlugins;
-(id)getWebviewPlugins;
-(id)getDisabledPlugins;
-(id)getEnabledPlugins;
-(id)getAllPlugins;
-(void)dealloc;
-(id)init;
-(void)onTerminate:(id)terminate;
-(void)updatePluginInfo;
-(void)readPluginListFromSDK;
-(void)updateAppPlugin:(id)plugin;
@end

@interface QQPluginUnifieldMsg : NSObject {
@private
	NSString* source;
	id params;
	int messageType;
	NSString* actionName;
	int nEventID;
}
@property(assign, nonatomic) int nEventID;
@property(assign, nonatomic) int messageType;
@property(retain, nonatomic) id params;
@property(copy, nonatomic) NSString* actionName;
@property(copy, nonatomic) NSString* source;
+(id)msgWithSource:(id)source actionName:(id)name params:(id)params type:(int)type;
-(void)dealloc;
@end

@interface QQServiceCenter : NSObject <IQQServiceCenter> {
	QQTestService* m_QQTestService;
	LBSServerEngine* m_LBSServiceEngine;
	QIMService* m_QIMService;
	PluginStatisticsEngine* m_pluginStatEngine;
	HttpServiceImpl* m_HttpService;
	GroupDBService* m_groupDBServie;
	AppVersionService* m_appVersionService;
	C2CDBService* m_c2cDBService;
	C2CDBService_MultiTable* m_c2cMultiTableDB;
	RecentMsgDBService* m_recentMsgDB;
}
-(id)recentMsgDB;
-(id)C2CMultiTableDB;
-(id)C2CDBService;
-(id)AppVersionService;
-(id)GroupDBServie;
-(id)HttpService;
-(id)PluginStatService;
-(id)IMService;
-(id)LBSService;
-(id)TestService;
-(void)dealloc;
-(id)init;
@end

@interface QQShareToFriendPlugin : NSObject <IQQPluginInterface> {
}
-(void)OnAsyncRequest:(id)request;
@end

@interface OP_STRUCT : NSObject {
@private
	NSString* m_PicUrl;
	NSString* m_strDstFilePath;
	id<IQQGetPicListener> m_Listener;
	unsigned m_nTotalSize;
	unsigned m_nReceivedSize;
	int m_nOpIndex;
	NSMutableData* m_DataFromUrlConnection;
	NSURLConnection* m_UrlConn;
}
@property(retain, nonatomic) NSURLConnection* m_UrlConn;
@property(readonly, assign, nonatomic) NSMutableData* m_DataFromUrlConnection;
@property(retain, nonatomic) id<IQQGetPicListener> m_Listener;
@property(retain, nonatomic) NSString* m_strDstFilePath;
@property(retain, nonatomic) NSString* m_PicUrl;
-(int)OpIndex;
-(void)SetOpIndex:(int)index;
-(unsigned)ReceivedSize;
-(void)SetReceivedSize:(unsigned)size;
-(unsigned)TotalSize;
-(void)SetTotalSize:(unsigned)size;
-(void)dealloc;
-(id)init;
@end

@interface QQTestService : NSObject <IQQTestService> {
	NSMutableDictionary* m_DictionaryOfOp;
	int m_nNextSeq;
}
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(BOOL)CancelGetPicByOpIndex:(int)index;
-(int)AsynGetPic:(id)pic DstPath:(id)path Listener:(id)listener;
-(void)dealloc;
-(id)init;
-(void)NotifyListenerProgress:(id)progress;
-(void)NotifyListenerFail:(id)fail;
-(void)NotifyListenerSuc:(id)suc;
-(void)AddToNextOpSeq;
-(void)InitOpStruct:(id)aStruct PicUrl:(id)url DstPath:(id)path Listener:(id)listener OpIndex:(int)index;
-(id)UrlConnWithPicUrl:(id)picUrl;
-(BOOL)IsGetPicParamValid:(id)valid DstPath:(id)path Listener:(id)listener;
@end

@interface QSFileStorageEngine : QSEngineBase <IQSFileStorageEngine> {
	NSOperationQueue* _operationQueue;
}
-(BOOL)saveFriendRequestSetting:(id)setting;
-(id)loadFriendRequestSetting;
-(void)asycSaveRecentHistoryHandledCountDic:(id)dic;
-(id)loadRecentHistoryHandledCount;
-(void)doSaveRecentHistoryUnreadCount:(id)count;
-(void)ansySaveRecentHistoryUnreadCount:(id)count;
-(BOOL)saveRecentHistoryUnreadCount:(id)count;
-(id)loadRecentHistoryUnreadCount;
-(BOOL)saveGroupMaxSeqDict:(id)dict;
-(id)loadGroupMaxSeqDict;
-(void)didAnsyLoadImage:(id)image;
-(void)doAnsyLoadImage:(id)image;
-(void)cancelCallBackObj:(id)obj;
-(BOOL)ansyLoadPreRenderImageWithPath:(id)path callBackObj:(id)obj callBackParam:(id)param;
-(BOOL)ansyLoadImageWithPath:(id)path callBackObj:(id)obj callBackParam:(id)param;
-(id)loadImageWithPath:(id)path;
-(void)doSaveCheckedRemarkFriendList:(id)list;
-(void)ansySaveCheckedRemarkFriendList:(id)list;
-(BOOL)saveCheckedRemarkFriendList:(id)list;
-(id)loadCheckedRemarkFriendList;
-(void)doSaveMobilePhoneConfigList:(id)list;
-(void)ansySaveMobilePhoneConfigList:(id)list;
-(BOOL)saveMobilePhoneConfigList:(id)list;
-(id)loadMobilePhoneConfigList;
-(void)doSaveMobilePhoneWithountCountryList:(id)list;
-(void)ansySaveMobilePhoneWithountCountryList:(id)list;
-(BOOL)saveMobilePhoneWithountCountryList:(id)list;
-(id)loadMobilePhoneWithountCountryList;
-(void)doSaveContactsChatUINList:(id)list;
-(void)ansySaveContactsChatUINList:(id)list;
-(BOOL)saveContactsChatUINList:(id)list;
-(id)loadContactsChatUINList;
-(void)doSaveTemporaryUINList:(id)list;
-(void)ansySaveTemporaryUINList:(id)list;
-(BOOL)saveTemporaryUINList:(id)list;
-(id)loadTemporaryUINList;
-(void)doSaveInvitedList:(id)list;
-(void)ansySaveInvitedList:(id)list;
-(BOOL)saveInvitedList:(id)list;
-(id)loadInvitedList;
-(void)doSavePushMsgArray:(id)array;
-(void)ansySavePushMsgArray:(id)array;
-(BOOL)savePushMsgArray:(id)array;
-(id)loadPushMsgArray;
-(void)dosaveSecretFileInfo:(id)info;
-(void)ansySecretFileInfo:(id)info;
-(BOOL)saveSecretFileInfo:(id)info;
-(id)loadSecretFileInfo;
-(void)doSaveVipInfo:(id)info;
-(void)ansySaveVipInfo:(id)info;
-(BOOL)savevipInfo:(id)info uin:(long long)uin;
-(id)loadVipInfo:(long long)info;
-(void)doSaveRecommendFriendsInfo:(id)info;
-(void)ansyRecommendFriendsInfo:(id)info;
-(BOOL)saveRecommendFriendsInfo:(id)info;
-(id)loadRecommendFriendsInfo;
-(void)doSaveRecommendedFriends:(id)friends;
-(void)ansySaveRecommendedFriends:(id)friends;
-(BOOL)saveRecommendedFriends:(id)friends;
-(id)loadRecommendedFriends;
-(void)doSaveRecommendedContacts:(id)contacts;
-(void)ansySaveRecommendedContacts:(id)contacts;
-(BOOL)saveRecommendedContacts:(id)contacts;
-(id)loadRecommendedContacts;
-(void)doSaveQQContacts:(id)contacts;
-(void)ansySaveQQContacts:(id)contacts;
-(BOOL)saveQQContacts:(id)contacts;
-(id)loadQQContacts;
-(void)doSaveUploadedContacts:(id)contacts;
-(void)ansySaveUploadedContacts:(id)contacts;
-(BOOL)saveUploadedContacts:(id)contacts;
-(id)loadUploadedContacts;
-(void)doSaveContactsBindingInfo:(id)info;
-(void)ansySaveContactBindingInfo:(id)info;
-(BOOL)saveContactsBindingInfo:(id)info;
-(id)loadContactsBindingInfo;
-(void)doSaveContactsApplyBindingInfo:(id)info;
-(void)ansySaveContactsApplyBindingInfo:(id)info;
-(BOOL)saveContactsApplyBindingInfo:(id)info;
-(id)loadContactsApplyBindingInfo;
-(void)doSaveUniLogDictionary:(id)dictionary;
-(void)ansySaveUniLogDictionary:(id)dictionary;
-(BOOL)saveUniLogDictionary:(id)dictionary;
-(id)loadUniLogDictionary;
-(void)doSaveAccountNetworFlowData:(id)data;
-(void)doSaveAccountNetworkFlowDictionary:(id)dictionary;
-(void)ansySaveAccountNetworkFlowDictionary:(id)dictionary;
-(BOOL)saveAccountNetworkFlowDictionary:(id)dictionary;
-(id)loadAccountNetworkFlowDictionary;
-(void)doSaveNetworFlowData:(id)data;
-(void)doSaveNetworkFlowDictionary:(id)dictionary;
-(void)ansySaveNetworkFlowDictionary:(id)dictionary;
-(BOOL)saveNetworkFlowDictionary:(id)dictionary;
-(id)loadNetworkFlowDictionary;
-(void)doSaveVoterArray:(id)array;
-(void)ansySaveVoterArray:(id)array withUIN:(long long)uin;
-(BOOL)saveVoterArray:(id)array withUIN:(long long)uin;
-(id)loadVoterArrayWithUIN:(long long)uin;
-(void)doSaveVisitorArray:(id)array;
-(void)ansySaveVisitorArray:(id)array withUIN:(long long)uin;
-(BOOL)saveVisitorArray:(id)array withUIN:(long long)uin;
-(id)loadVisitorArrayWithUIN:(long long)uin;
-(void)doSaveFaceIDDictionary:(id)dictionary;
-(void)ansySaveFaceIDDictionary:(id)dictionary withUIN:(long long)uin;
-(BOOL)saveFaceIDDictionary:(id)dictionary withUIN:(long long)uin;
-(id)loadFaceIDDictionaryWithUIN:(long long)uin;
-(void)doSaveMakeFriendsCardModel:(id)model;
-(void)ansySaveMakeFriendsCardModel:(id)model withUIN:(long long)uin;
-(BOOL)saveMakeFriendsCardModel:(id)model withUIN:(long long)uin;
-(id)loadMakeFriendsCardModelWithUIN:(long long)uin;
-(void)doSaveUserSummaryModel:(id)model;
-(void)ansySaveUserSummaryModel:(id)model withUIN:(long long)uin;
-(id)loadUserSummaryModelWithUIN:(long long)uin;
-(void)doSaveProfileModel:(id)model;
-(void)ansySaveProfileModel:(id)model withUIN:(long long)uin;
-(BOOL)saveProfileModel:(id)model withUIN:(long long)uin;
-(id)loadProfileModelWithUIN:(long long)uin;
-(void)doSaveCommonCardModel:(id)model;
-(void)ansySaveCommonCardModel:(id)model withUIN:(long long)uin;
-(BOOL)saveCommonCardModel:(id)model withUIN:(long long)uin;
-(id)loadCommonCardModelWithUIN:(long long)uin;
-(void)doSaveSessionsHistory:(id)history;
-(void)asyncSaveSessionsHistory:(id)history;
-(BOOL)saveSessionsHistory:(id)history;
-(id)loadSessionsHistory;
-(void)doSaveRecentHistory:(id)history;
-(void)ansySaveRecentHistory:(id)history;
-(BOOL)saveRecentHistory:(id)history;
-(id)loadRecentHistory;
-(BOOL)saveGroupInfoData:(id)data;
-(id)loadGroupInfoData;
-(void)doSaveGroupMemoDictionary:(id)dictionary;
-(void)ansySaveGroupMemoDictionary:(id)dictionary withPath:(id)path;
-(BOOL)saveGroupMemoDictionary:(id)dictionary withPath:(id)path;
-(id)loadGroupMemoDictionaryWithPath:(id)path;
-(void)doSaveGroupFriendDictionary:(id)dictionary;
-(void)ansySaveGroupFriendDictionary:(id)dictionary;
-(BOOL)saveGroupFriendDictionary:(id)dictionary;
-(id)loadGroupFriendDictionary;
-(void)doSaveStrangerModelDictionary:(id)dictionary;
-(void)ansySaveStrangerModelDictionary:(id)dictionary;
-(BOOL)saveStrangerModelDictionary:(id)dictionary;
-(id)loadStrangerModelDictionary;
-(void)doSaveBlackListDictionary:(id)dictionary;
-(void)ansySaveBlackListDictionary:(id)dictionary;
-(BOOL)saveBlackListDictionary:(id)dictionary;
-(id)loadBlackListDictionary;
-(void)doSaveStrangerListDictionary:(id)dictionary;
-(void)ansySaveStrangerListDictionary:(id)dictionary;
-(BOOL)saveStrangerListDictionary:(id)dictionary;
-(id)loadStrangerListDictionary;
-(void)doSaveFriendListDictionary:(id)dictionary;
-(void)ansySaveFriendListDictionary:(id)dictionary;
-(BOOL)saveFriendListDictionary:(id)dictionary;
-(id)loadFriendListDictionary;
-(id)loadFriendListDictionaryFromOldVersion;
-(void)doSaveAccountListArray:(id)array;
-(void)ansySaveAccountListArray:(id)array;
-(BOOL)saveAccountListArray:(id)array;
-(id)loadAccountListArray;
-(void)dealloc;
-(id)init;
@end

@interface QQProfileModel : NSObject {
	long long _uin;
	short _sex;
	int _age;
	int _birth;
	NSString* _nick;
	NSString* _sig;
	int _counrtyID;
	int _proviceID;
	int _cityID;
	int _qzoneID;
	NSMutableArray* _tags;
}
@property(retain, nonatomic) NSMutableArray* tags;
@property(assign) int qzoneID;
@property(assign) int cityID;
@property(assign) int proviceID;
@property(assign) int counrtyID;
@property(retain, nonatomic) NSString* sig;
@property(retain, nonatomic) NSString* nick;
@property(assign) int birth;
@property(assign) int age;
@property(assign) short sex;
@property(assign) long long uin;
-(int)setCityStr:(char*)str;
-(int)setProvStr:(char*)str;
-(int)setCounStr:(char*)str;
-(id)GetCityStr;
-(id)GetProStr;
-(id)GetCounStr;
-(int)GetBris;
-(int)GetCityID;
-(int)GetProvID;
-(int)GetCounrtyID;
-(id)description;
-(BOOL)isEqual:(id)equal;
-(id)initWithProfile:(id)profile;
-(id)initProfile:(long long)profile sex:(short)sex age:(int)age birth:(int)birth nick:(const char*)nick sig:(const char*)sig counrty:(int)counrty provice:(int)provice city:(int)city zone:(int)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QIMService : NSObject <IIMService> {
}
+(void)setTabCtrIsSupportLandscape:(BOOL)landscape;
+(void)makeApplicationDelegateWindowKeyAndVisible;
+(id)getInstance;
-(id)getIMEI;
-(void)shareToFriend:(id)aFriend summary:(id)summary img:(id)img appName:(id)name appId:(unsigned)anId url:(id)url currentController:(id)controller;
-(void)printMessageModelSeq:(id)seq;
-(int)getFriendType:(id)type;
-(void)hideQQMsgBar;
-(void)noHideQQMsgBar;
-(void)showWebUrl:(id)url webTitle:(id)title currentController:(id)controller;
-(void)gotoDetailProfile:(id)profile currentController:(id)controller;
-(void)updateVideoNetFlow:(int)flow size:(unsigned long long)size;
-(void)updateVideoNetFlowOnMainThread:(id)thread;
-(void)synEnterChatListController;
-(void)deleteMessageWithContent:(id)content forUin:(id)uin;
-(void)saveQQMessageToDB:(id)db msgTime:(unsigned)time;
-(bool)synInsertMsgToDB:(id)db;
-(bool)synInsertMsgToDBInMicroMute:(id)microMute;
-(id)synGetFriendList;
-(int)synGetBackgroundStatus;
-(id)synGetRootViewController;
-(int)synGetFaceID:(id)anId;
-(id)synGetNick:(id)nick;
-(void)playSoundEffect:(id)effect;
-(void)playSoundEffectOfRecvingMsg;
-(id)init;
@end

@interface IQQMessageModel : QQMessageModel {
}
@end

@interface QQPluginInfoQuery : NSObject <CIMGetAPPPluginInfoDelegate, NSXMLParserDelegate> {
@private
	NSMutableSet* request;
}
@property(retain, nonatomic) NSMutableSet* request;
-(void)didReceiveResponse:(void*)response;
-(void)requestPluginInfo:(id)info;
-(void)removeRequest:(id)request;
-(void)updateIcon:(id)icon;
-(void)IconDidUpdated:(id)icon;
-(void)dealloc;
-(id)init;
@end

@interface Aear : NSObject {
	NSString* _name;
	NSString* _code;
	BOOL _superName;
}
@property(assign, nonatomic) BOOL superName;
@property(retain, nonatomic) NSString* code;
@property(retain, nonatomic) NSString* name;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface AearProvCity : Aear {
	NSMutableArray* _citys;
}
@property(retain, nonatomic) NSMutableArray* citys;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface AearCounPro : Aear {
	NSMutableArray* _provices;
}
@property(retain, nonatomic) NSMutableArray* provices;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface QQAearXMLParser : NSObject <NSXMLParserDelegate> {
	NSXMLParser* _parser;
	NSMutableArray* _countrys;
	NSString* _path;
	id<QQAearXMLParserDelegate> _delegate;
}
@property(assign, nonatomic) id<QQAearXMLParserDelegate> delegate;
-(id)GetCityNameWithCountry:(id)country andProv:(id)prov andCity:(id)city;
-(id)GetCityStr:(unsigned)str;
-(id)GetProStr:(unsigned)str;
-(id)GetCounStr:(unsigned)str;
-(id)GetProviceNameWithCountry:(id)country andProv:(id)prov;
-(id)GetCountryNameWithCode:(id)code;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parserDidEndDocument:(id)parser;
-(void)parserDidStartDocument:(id)parser;
-(id)GetParserXMLResult;
-(void)dealloc;
-(BOOL)parserStart;
-(id)init;
@end

@interface TestPlugin : NSObject <IQQPluginInterface, IQQGetPicListener> {
}
-(void)Result:(int)result OpIndex:(int)index;
-(void)OnShow:(id)show;
-(void)OnAsyncResponse:(id)response;
-(id)savePathName;
-(void)dealloc;
-(id)init;
@end

@interface TestPluginView : UIView {
}
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface TestPluginViewController : QQViewController {
	TestPlugin* _plugin;
}
@property(assign, nonatomic) TestPlugin* plugin;
-(void)onShowImg:(id)img;
-(void)clearBtnAction:(id)action;
-(void)btnAction:(id)action;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UrlInputViewController : QQViewController <UITextFieldDelegate> {
	UITextField* m_TextFieldOfUrl;
	UIButton* m_BtnSubmit;
	id<UrlInputViewEventDelegate> m_EventDelegate;
}
-(void)setEventDelegate:(id)delegate;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)submitButtonClicked:(id)clicked;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)init;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)LayoutView;
@end

@interface UrlProviderPlugin : NSObject <IQQPluginInterface, UrlInputViewEventDelegate> {
	UrlInputViewController* m_InputViewController;
	NSString* m_strSource;
}
-(void)OnSubmitUrl:(id)url;
-(void)OnAsyncRequest:(id)request;
-(void)ShowUrlInputView:(id)view;
@end

@interface QQAearPickerView : UIView <UIPickerViewDelegate, UIPickerViewDataSource, QQAearXMLParserDelegate> {
	UIPickerView* _pickerView;
	QQAearXMLParser* _parserXML;
	NSArray* _aears;
	int i_country;
	int i_prov;
	int i_city;
	id _tager;
	SEL _sel;
	id _targetParserEnd;
	SEL _parserEndSel;
}
-(const char*)GetCurCityCode;
-(const char*)GetCurProvCode;
-(const char*)GetCurCouCode;
-(id)GetAearStr:(id)str prov:(id)prov city:(id)city;
-(void)dismissAearPickerView:(BOOL)view;
-(void)showAearPickerView:(BOOL)view;
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(float)pickerView:(id)view rowHeightForComponent:(int)component;
-(float)pickerView:(id)view widthForComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)setCurCityCode:(const char*)code;
-(void)setCurProvCode:(const char*)code;
-(void)setCurCouCode:(const char*)code;
-(void)didAearXMLParserEnd:(id)end;
-(BOOL)startParserAearXML;
-(void)addParserEndTarget:(id)target withAction:(SEL)action;
-(void)addReturnTarget:(id)target withAction:(SEL)action;
-(id)GetCurrentAearStr;
-(void)disMissAearPickerView;
-(void)dealloc;
-(id)initWithStartPoint:(CGPoint)startPoint;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQServerConfig : QQViewController <UITextFieldDelegate> {
	UITextField* inputIP;
	UITextField* inputPORT;
	bool _isSSO;
}
@property(assign, nonatomic) bool isSSO;
-(void)dealloc;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)ActionDelete:(id)aDelete;
-(void)ActionSave:(id)save;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface QQPlatformCommunicateHelper : NSObject <IQQPluginInterface> {
	NSMutableDictionary* _requestMap;
}
-(void)OnAsyncResponse:(id)response;
-(BOOL)SendMessage:(id)message toPlugin:(id)plugin from:(id)from;
-(void)dealloc;
-(id)init;
@end

@interface QQShadowTextView : UIView {
	NSString* _text;
	CGPoint _lt;
	CGSize _textSize;
	int _textFontSize;
	int _textBckColor;
	int _textForColor;
}
-(void)drawRect:(CGRect)rect;
-(id)init:(CGPoint)init width:(int)width text:(id)text fontSize:(int)size bckColor:(int)color forColor:(int)color6;
@end

@interface GroupEditNameViewController : SingleLineEditViewController <IEditViewControllerObserver> {
	long long _discussUin;
	NSString* _groupName;
	int _manageType;
	id _observer;
}
@property(readonly, assign, nonatomic) long long discussUin;
@property(assign, nonatomic) id observer;
-(void)onModifyIsOK:(BOOL)ok;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(id)initWithGroup:(long long)group name:(id)name;
-(id)initWithGroupName:(long long)groupName discussName:(id)name;
@end

@interface GroupManageLogic : GroupLogic {
}
-(id)quitText;
-(id)labelText;
-(id)title;
-(id)getGroupName:(long long)name;
-(BOOL)quitGroup:(long long)group;
-(BOOL)updateGroupInfo:(long long)info;
-(id)getGroupInfo:(long long)info;
-(void)setHandleDelegate:(id)delegate;
@end

@interface SelectMemberLogic : GroupLogic {
}
-(void)setHandleDelegate:(id)delegate;
-(void)initGroupHeadImage:(long long)image;
-(void)fliterHasChoosedFriend:(id)aFriend fromArray:(id)array;
-(id)fliterLikeWord:(id)word;
-(id)getFriendListByGroupIndex:(int)index filterMem:(id)mem;
-(id)getGroupName:(int)name;
-(id)getFriendListGroup;
-(BOOL)getExpandStateOfSection:(int)section;
-(void)setExpandSection:(int)section;
-(BOOL)addGroup:(long long)group memberArray:(id)array;
-(BOOL)createGroup:(id)group memberArray:(id)array;
@end

@interface GroupManageEngine : NSObject {
}
+(id)getProfileViewController:(id)controller strangerType:(int)type;
+(BOOL)connedted;
+(BOOL)isFriend:(id)aFriend;
+(id)getNickName:(id)name;
+(id)getHeadImage:(id)image;
+(long long)currentUin;
@end

@interface DiscussSelectMemberLogic : SelectMemberLogic {
}
+(id)instance;
-(void)setHandleDelegate:(id)delegate;
-(id)getGroupMemberList:(long long)list;
-(BOOL)addGroup:(long long)group memberArray:(id)array;
-(BOOL)createGroup:(id)group memberArray:(id)array;
@end

@interface DiscussGroupManageLogic : GroupManageLogic {
}
+(id)instance;
-(id)quitText;
-(id)labelText;
-(id)title;
-(BOOL)quitGroup:(long long)group;
-(id)getGroupName:(long long)name;
-(BOOL)updateGroupInfo:(long long)info;
-(id)getGroupInfo:(long long)info;
-(void)setHandleDelegate:(id)delegate;
@end

@interface GroupAlbumManageLogic : GroupManageLogic {
}
+(id)instance;
-(id)quitText;
-(id)labelText;
-(id)title;
@end

@interface GroupLogic : NSObject {
}
-(id)getGroupMemberList:(long long)list;
@end

@interface TabMenu : UIView {
	UIButton* _buttons[4];
	int _totalNum;
	id<TabMenuDelegate> _delegate;
}
@property(assign, nonatomic) id<TabMenuDelegate> delegate;
-(void)setTitle:(id)title index:(int)index;
-(void)setSelectIndex:(int)index;
-(void)selectAction:(id)action;
-(id)initWithFrame:(CGRect)frame marginHorizontal:(float)horizontal marginVertial:(float)vertial hSpacing:(float)spacing titles:(id)titles icons:(id)icons hlIcons:(id)icons7;
-(id)initWithTitles:(id)titles icons:(id)icons hlIcons:(id)icons3;
-(void)initButtons:(int)buttons marginHorizontal:(float)horizontal marginVertial:(float)vertial titles:(id)titles icons:(id)icons hlIcons:(id)icons6;
@end

@interface QQLoggerInfo : NSObject {
	tm _logDate;
	BOOL _logFileName[31];
	int _logFileLine;
	int _logLevel;
	int _logThreadId;
	BOOL _moduleName[31];
	BOOL _actionName[31];
	char* _logContent;
	BOOL _isWriteToFile;
}
@property(assign, nonatomic) BOOL isWriteToFile;
@property(assign, nonatomic) char* logContent;
@property(assign, nonatomic) int logThreadId;
@property(assign, nonatomic) int logLevel;
@property(assign, nonatomic) int logFileLine;
@property(assign, nonatomic) tm logDate;
-(void)dealloc;
-(const char*)getActionName;
-(void)setActionName:(const char*)name;
-(const char*)getModuleName;
-(void)setModuleName:(const char*)name;
-(const char*)getLogFileName;
-(void)setLogFileName:(const char*)name;
-(id)init;
@end

@interface QFriendListService : NSObject <IFriendListService> {
}
+(id)getInstance;
-(void)updateFriendRemarkSetting:(id)setting withMobilePhoneStr:(id)mobilePhoneStr;
-(void)moveToBlackListFromStrangerList:(unsigned long long)strangerList;
-(void)updateQQFriendModelNameByUin:(unsigned long long)uin remark:(id)remark;
-(id)getRecentAndFriendList;
-(id)getRecentFriendList;
-(id)getNickName:(id)name;
-(id)getGroupList;
-(int)getQQFriendHeadIdByUin:(long long)uin;
-(id)getQQFriendNickByUin:(long long)uin;
-(BOOL)isUinAtFriendList:(id)friendList;
-(id)strangerModelForUin:(id)uin;
-(id)nickForStrangerWithUin:(id)uin;
-(id)getQQFriendModelByUin:(id)uin Cache:(BOOL)cache;
-(id)init;
@end

@interface SelectFriendViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate, UISearchDisplayDelegate, MemHeadViewDelegate, MSFSearchBarDelegate, IFaceObserver> {
	NSString* _leftText;
	NSString* _rightText;
	MSFSearchBar* _searchBar;
	UITableView* _tableView;
	MemHeadView* _selectedBar;
	NSMutableArray* _data;
	NSMutableArray* _selectedData;
	NSMutableArray* _filterData;
	NSMutableArray* _searchDataSources;
	NSMutableArray* _cellHeadsArray;
	id<ISelectFriendDataSource> _dataSource;
	id<ISelectFriendActionObserver> _actionObserver;
	BOOL _isPushed;
	BOOL _isSearched;
	BOOL _searchEnd;
	BOOL _allowEmptySelection;
}
@property(assign, nonatomic) BOOL allowEmptySelection;
@property(assign, nonatomic) BOOL isPushed;
@property(assign, nonatomic) id<ISelectFriendActionObserver> actionObserver;
@property(assign, nonatomic) id<ISelectFriendDataSource> dataSource;
-(void)searchBar:(id)bar cancelButtonClick:(BOOL)click;
-(void)searchBarValueChange:(id)change;
-(void)searchBarEndEdit:(id)edit;
-(void)searchBarStartEdit:(id)edit;
-(BOOL)isSearchActive;
-(void)filterContentForSearchText:(id)searchText scope:(id)scope;
-(id)filterLikeWord:(id)word array:(id)array;
-(void)fliterSelectedFriend:(id)aFriend fromArray:(id)array;
-(void)onAllMembersRemoved:(id)removed members:(id)members;
-(void)onMemberRemoved:(id)removed memberUIN:(id)uin;
-(void)changeRightBtnState:(int)state;
-(void)showInfoTips:(id)tips;
-(void)resignTextField;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)actionGroupExpand:(id)expand;
-(void)setExpandSection:(int)section;
-(void)viewDidUnload;
-(void)loadView;
-(void)createButton;
-(void)removeFilterFriend:(id)aFriend filterData:(id)data;
-(void)actionDone:(id)done;
-(void)memBtnClick:(id)click;
-(void)actionClose:(id)close;
-(void)notifyLoadHeadImageFinished:(id)finished;
-(void)notifyGetHeadImageSucc:(id)succ;
-(void)reloadTableView;
-(void)dealloc;
-(id)initWithTitle:(id)title leftButton:(id)button rightButton:(id)button3 dataSource:(id)source actionObserver:(id)observer;
@end

@interface QQGroupListViewController : QQSearchBaseViewController <GroupListViewDelegate> {
	GroupListViewNew* _groupListView;
	ODRefreshControl* _refreshControl;
	int _getGroupListSeq;
	NSTimer* _refreshListTimer;
	QQToastView* _toastView;
}
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)setModelPriority;
-(void)groupListViewDidEndDragging:(id)groupListView willDecelerate:(BOOL)decelerate;
-(void)groupListViewDidScroll:(id)groupListView;
-(void)delayEndRefreshing:(BOOL)refreshing;
-(void)refreshGroupListSuccess;
-(void)refreshGroupListResult:(id)result;
-(void)refreshListTimeout;
-(void)dropViewDidBeginRefreshing:(id)dropView;
-(void)refreshGroupList;
-(void)resetGroupHeadRequestState;
-(void)createGroup;
-(void)leftButtonClick:(id)click;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQFriendListViewController : QQViewController <EGORefreshTableHeaderDelegate, FriendListViewDelegate> {
	FriendListViewNew* _friendListView;
	EGORefreshTableHeaderView* _refreshHeaderView;
	NSTimer* _refreshListTimer;
	BOOL _manualFresh;
	BOOL _isShowOnline;
}
@property(assign, nonatomic) BOOL isShowOnline;
-(int)egoRefreshTableHeaderDataSourceLastUpdated:(id)updated;
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
-(void)friendListViewTotalCountChanged:(int)changed;
-(void)friendListViewDidEndDragging:(id)friendListView willDecelerate:(BOOL)decelerate;
-(void)friendListViewDidScroll:(id)friendListView;
-(void)refreshListTimeout;
-(void)refreshFriendListSuccess;
-(void)refreshFriendList;
-(id)GetCurrentTitle;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQRelationViewController : QQSearchBaseViewController <UITableViewDelegate, UITableViewDataSource, FriendListHeaderViewDelegate, RelationAllTableViewSelectRowCallback> {
	UITableView* _tableView;
	RelationAllTableView* _allTableView;
	ODRefreshControl* _refreshControl;
	ODRefreshControl* _allRefreshControl;
	BOOL _isInit;
	BOOL _isOnlineShow;
	NSTimer* _refreshListTimer;
	FriendListHeaderModel* _addressBookModel;
	FriendListHeaderModel* _circleModel;
	FriendListHeaderModel* _groupModel;
	FriendListHeaderModel* _discussGroupModel;
	NSMutableArray* _publicAccountHeaders;
	FriendListHeaderModel* _lastExpandedModel;
	NSMutableArray* _friendList;
	QQToastView* _toastView;
	QQSimpleTipsView* _bottomTipsView;
	UIView* _footView;
	CircleViewController* _circleViewController;
	UIButton* _btnAllSwitch;
	UIButton* _btnGroupSwitch;
}
@property(retain, nonatomic) UIButton* btnGroupSwitch;
@property(retain, nonatomic) UIButton* btnAllSwitch;
@property(retain, nonatomic) RelationAllTableView* allTableView;
@property(assign, nonatomic) BOOL isOnlineShow;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)dropViewDidBeginRefreshing:(id)dropView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)delayEndRefreshing:(BOOL)refreshing;
-(void)refreshFriendListSuccess;
-(void)refreshFriendList;
-(void)refreshListTimeout;
-(void)onTitleIndexBarDisappear;
-(void)onPublicAccountModelSelected:(id)selected;
-(void)onFriendModelSelected:(id)selected;
-(BOOL)onClusterModelSelected:(id)selected;
-(void)friendListHeaderViewDidTouch:(id)friendListHeaderView;
-(void)goToDiscussGroupList;
-(void)goToGroupList;
-(void)goToContactView;
-(void)goToSeachPubAccount;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)initCellForPublicAccount:(id)publicAccount atIndexPath:(id)indexPath;
-(void)initCellForFriend:(id)aFriend atIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)getPubAccountHeaderWithSection:(int)section;
-(void)resetListState;
-(void)organizeOtherFriendModels:(id)models;
-(void)reloadPubAccountListDataAfterDelay;
-(void)reloadPubAccountListData;
-(void)reloadFriendListDataAfterDelay;
-(void)reloadFriendListData;
-(void)handleQQAccountLogoutNotification:(id)notification;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)ReloadData;
-(void)onAddButtonClick:(id)click;
-(id)alltableViewDataSources;
-(void)onAccountChanged;
-(void)applyLastBtnChoice;
-(void)onBtnGroupTouched:(id)touched;
-(void)onBtnAllTouched:(id)touched;
-(void)resetRelationTitleView;
-(void)reloadAppearance;
-(void)loadView;
-(void)notifyAddFriends:(id)friends;
-(void)doSelectedFriends:(id)friends;
-(void)dealloc;
-(id)init;
@end

@interface QQGroupSettingModel : QQModel {
	int groupMemberState;
	NSArray* groupAdministrators;
	NSString* groupPost;
	NSString* groupSummary;
	NSString* location;
	long long groupOwner;
	NSString* groupName;
	long long groupUin;
	unsigned groupCode;
	int groupCategory;
	int groupFace;
	int groupOption;
	double lastUpdateTime;
	BOOL protocol1Ready;
	BOOL protocol2Ready;
@private
	unsigned groupZoneImagesTimeStamp;
	NSArray* groupZoneImagesURLs;
	int _groupMemberNum;
}
@property(assign, nonatomic) int groupMemberNum;
@property(assign, nonatomic) BOOL protocol2Ready;
@property(assign, nonatomic) BOOL protocol1Ready;
@property(assign, nonatomic) double lastUpdateTime;
@property(assign, nonatomic) int groupOption;
@property(assign, nonatomic) int groupFace;
@property(assign, nonatomic) int groupCategory;
@property(assign, nonatomic) unsigned groupCode;
@property(assign, nonatomic) long long groupUin;
@property(retain, nonatomic) NSString* groupName;
@property(assign, nonatomic) long long groupOwner;
@property(retain, nonatomic) NSString* location;
@property(retain, nonatomic) NSString* groupSummary;
@property(retain, nonatomic) NSString* groupPost;
@property(retain, nonatomic) NSArray* groupAdministrators;
@property(assign, nonatomic) int groupMemberState;
@property(retain, nonatomic) NSArray* groupZoneImagesURLs;
@property(assign, nonatomic) unsigned groupZoneImagesTimeStamp;
-(BOOL)isAdmin;
-(id)clippedName;
-(void)dealloc;
-(id)init;
@end

@interface QSTableViewCell : UITableViewCell {
}
-(void)addSubview:(id)subview;
@end

@interface QQChatSettingModel : QQIconModel {
	int _style;
	NSString* _key;
	BOOL _selected;
	BOOL _enabled;
}
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) BOOL selected;
@property(assign, nonatomic) int style;
@property(retain, nonatomic) NSString* key;
+(id)CreateModel:(int)model key:(id)key image:(id)image title:(id)title selected:(BOOL)selected;
-(void)dealloc;
@end

@interface QQChatSettingViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, UIAlertViewDelegate, QQFriendSelectedViewControllerDelegate, GetTroopRemarkProtocol, IQQGroupPersonalCardViewController, IQQGroupProfileViewController, IEditViewControllerObserver, QQGetRoamMsgModelProtocol, SimpleAlertViewDelegate, DBAsyncCallbackProtocol, IGroupSelectDelegate> {
	NSMutableArray* _dataSources;
	UITableView* _tableView;
	int _style;
	NSString* _uin;
	QQGroupSettingModel* _groupModel;
	QQGroupPersonalCardViewController* _groupCardController;
	QQGroupProfileViewController* _groupProfileController;
	GroupMemViewController* _groupMemberController;
	QQTroopRemarkModel* _groupRemarkModel;
	NSString* _modifiedGroupName;
	int _groupModified;
	NSTimer* _timer;
	NSString* _mobilePhone;
	AddFriendSendMessageViewController* _addFriendVC;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriendVC;
@property(retain, nonatomic) NSString* mobilePhone;
@property(retain, nonatomic) QQGroupSettingModel* groupModel;
@property(retain, nonatomic) NSString* uin;
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
-(void)modifyGroupInfoCallback:(id)callback;
-(void)didModifyGroupProfile:(unsigned)profile groupName:(id)name groupPost:(id)post groupMemo:(id)memo groudAdmissionType:(int)type groupCategory:(int)category groupFaceId:(int)anId;
-(void)modifyGroupCardCallback:(id)callback;
-(void)didModifyGroupCard:(unsigned)card uin:(long long)uin groupNick:(id)nick gender:(BOOL)gender phone:(id)phone mail:(id)mail remark:(id)remark;
-(void)GetMemberRemarkNotify:(id)notify list:(id)list;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)onLeftButtonClicked;
-(void)ActionDismissGroupRespond:(id)respond;
-(void)deleteUserDefault;
-(void)ActionExitGroupResult:(id)result;
-(void)onTimeout;
-(void)stopTimer;
-(void)startTimer;
-(void)ActionInviteJoinGroupRespond:(id)respond;
-(BOOL)onRightButtonClicked:(id)clicked;
-(void)leftButtonClick:(id)click;
-(void)onReachMaxSelection;
-(int)getMaxSelection;
-(id)getInitSelectedDataList;
-(id)getInitDataList;
-(void)updateGroupName;
-(void)getGroupInfoCallback:(id)callback;
-(void)getGroupInfo2Callback:(id)callback;
-(void)getGroupInfo3Callback:(id)callback;
-(void)getGroupInfo;
-(id)groupSettingDictionary;
-(void)saveGroupSettingModel;
-(BOOL)loadGroupSettingModel;
-(void)deleteGroupSettingModel;
-(void)saveGroupSettingDictionary:(id)dictionary;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)notifySelectedGroupID:(int)anId;
-(void)createDissGroup:(id)group;
-(void)deleFriendSuccess:(id)success;
-(void)deleFriend;
-(void)setReceiveGroupMsgPush;
-(void)setReceiveGroupMsg;
-(void)setVoiceChannel:(BOOL)channel;
-(void)setVoicePlayerState;
-(void)disableMessage;
-(void)reportingIllegalDone:(id)done;
-(void)ReportPerson;
-(void)callBackUploadRemarkTimerOut:(id)anOut;
-(void)callBackUploadRemark:(id)remark;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)didSimpleAlertView:(id)view buttonClick:(id)click atIndex:(int)index;
-(void)showErrorAlertView:(id)view forMessage:(id)message withTitle:(id)title;
-(void)showAlertInputView:(id)view title:(id)title;
-(void)showAlertView:(id)view forMessage:(id)message withTitle:(id)title;
-(void)GetRoamMsgTimeOut;
-(void)GetRoamMsgFinish;
-(void)roamWebCallback:(id)callback;
-(void)GetRoamMsgError:(int)error string:(id)string;
-(void)actionGotoGroupChoose;
-(void)switchOnAndTryGetRoamMessage;
-(void)getRoamMsg;
-(void)actionQuickResponse;
-(void)ActionHistory:(BOOL)history;
-(void)actionDetailProfile;
-(void)buttonAction:(id)action;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(void)menFriendSig:(id)sig;
-(void)accountCard;
-(void)personCard;
-(void)mendSig;
-(void)quitGroup:(id)group;
-(void)clearComRecord;
-(void)addFriend;
-(void)setSuperViewControllerCover;
-(void)didGroupSettingSelected:(id)selected;
-(void)didStrangeSettingSelected:(id)selected;
-(void)didFriendSettingSelected:(id)selected;
-(void)didSelected:(id)selected;
-(void)didFriendSettingSwitch:(id)aSwitch;
-(void)switchControlAction:(id)action;
-(void)setc2cRoamMsg:(BOOL)msg;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)GetHeadImageForUin:(id)uin;
-(id)GetGroupStrangeValueForModel:(id)model;
-(id)GetNearStrangeValueForModel:(id)model;
-(id)GetFriendValueForModel:(id)model;
-(id)GetValueForModel:(id)model;
-(void)reloadData;
-(id)getCellModelWithKey:(id)key;
-(id)getAllModel;
-(id)GetDisAccountData;
-(id)GetGroupData;
-(id)GetContactsData;
-(id)GetMobileQQTeamData;
-(id)GetGroupTmpData;
-(id)GetNearAccountData;
-(id)GetFriendData;
-(id)GetCurDataSourcesWithStyle:(int)style;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)dealloc;
-(id)initWithGroup:(id)group;
-(id)initWithModel:(id)model forStyle:(int)style;
@end

@interface GroupListViewController : NSObject {
}
@end

@interface QQGroupInfomationModel : NSObject {
	NSString* _title;
	NSString* _value;
	BOOL _hidden;
	BOOL _editable;
	BOOL _multiLine;
}
@property(assign, nonatomic) BOOL multiLine;
@property(assign, nonatomic) BOOL editable;
@property(assign, nonatomic) BOOL hidden;
@property(retain, nonatomic) NSString* value;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
-(id)init;
@end

@interface QQGroupPersonalCardViewController : QQGroupTableStyleViewController <UIActionSheetDelegate, UIAlertViewDelegate> {
	QQTroopRemarkModel* _model;
	id<IQQGroupPersonalCardViewController> _delegate;
}
@property(assign, nonatomic) id<IQQGroupPersonalCardViewController> delegate;
@property(retain, nonatomic) QQTroopRemarkModel* model;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showSexActionSheet;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)keyOfModelAtIndex:(int)index;
-(void)createInformationModels;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)leftButtonClick:(id)click;
-(void)loadView;
-(void)dealloc;
@end

@interface QQGroupProfileViewController : QQGroupTableStyleViewController <QQGroupCategoryListViewControllerDelegate, IEditViewControllerObserver, UIActionSheetDelegate> {
	QQGroupSettingModel* _groupModel;
	id<IQQGroupProfileViewController> _delegate;
	int _SourceID;
	AddFriendSendMessageViewController* _addFriend;
@private
	NSArray* _indexPathInfos;
	int _groupCategory;
	int _groupOption;
	BOOL _bIsSearchResult;
	unsigned long long _groupCodeAll;
}
@property(assign, nonatomic) unsigned long long groupCodeAll;
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriend;
@property(assign, nonatomic) BOOL bIsSearchResult;
@property(assign, nonatomic) id<IQQGroupProfileViewController> delegate;
@property(retain, nonatomic) QQGroupSettingModel* groupModel;
+(void)initialize;
-(void)getGroupInfoCallback:(id)callback;
-(void)getGroupInfo2Callback:(id)callback;
-(void)getGroupInfo3Callback:(id)callback;
-(void)actionGetGroupInfo:(id)info;
-(void)getGroupInfo;
-(void)didSelectGroupCategory:(int)category;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)editExtraKey:(int)key value:(id)value;
-(id)emptyValueWarningTextAtIndex:(int)index;
-(BOOL)allowEmptyValueAtIndex:(int)index;
-(id)keyOfModelAtIndex:(int)index;
-(int)indexPathForKeyIndex:(int)keyIndex;
-(int)indexOfIndexPath:(id)indexPath;
-(id)groupValidateTitle:(int)title;
-(void)viewWillAppear:(BOOL)view;
-(void)createInformationModels;
-(id)getGroupCategoryFromId:(int)anId;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)isGroupProfileModified;
-(void)modifyGroupInfoCallback:(id)callback;
-(void)didModifyGroupProfile:(unsigned)profile groupName:(id)name groupPost:(id)post groupMemo:(id)memo groudAdmissionType:(int)type groupCategory:(int)category groupFaceId:(int)anId;
-(void)showFailedTipDelayed;
-(void)leftButtonClick:(id)click;
-(void)goToChat;
-(void)ActionAddToGroup:(id)group;
-(void)loadView;
-(void)dealloc;
-(id)initWithGroupSettingModelNoRefrash:(id)groupSettingModelNoRefrash SourceID:(int)anId;
-(id)initWithGroupSettingModel:(id)groupSettingModel SourceID:(int)anId;
-(id)initWithGroupCode:(unsigned long long)groupCode SourceID:(int)anId;
@end

@interface QQGroupProfileModifyHandler : NSObject {
	NSMutableDictionary* _modifyGroupTable;
}
-(void)dealloc;
-(void)showFailedTipDelayed;
-(void)modifyGroupInfoCallback:(id)callback;
-(void)modifyGroupProfile:(unsigned)profile groupName:(id)name groupPost:(id)post groupMemo:(id)memo groudAdmissionType:(int)type groupCategory:(int)category groupFaceId:(int)anId;
-(id)init;
@end

@interface DiscussGroupTipMsgModel : QQModel {
	int _tipType;
	NSMutableArray* _addMemArray;
	NSMutableArray* _quitMemArray;
	double _time;
	int _msgID;
	unsigned _sMsgSeq;
	NSString* _content;
	long long _discussGroupUin;
	long long _uin;
}
@property(assign, nonatomic) long long uin;
@property(assign, nonatomic) long long discussGroupUin;
@property(retain, nonatomic) NSString* content;
@property(assign) unsigned sMsgSeq;
@property(assign) int msgID;
@property(assign) double time;
@property(retain, nonatomic) NSMutableArray* quitMemArray;
@property(retain, nonatomic) NSMutableArray* addMemArray;
@property(assign, nonatomic) int tipType;
+(id)modelWithMsgModel:(id)msgModel;
-(void)dealloc;
-(id)getTipShowText;
-(BOOL)isEqualToSelf:(id)aSelf;
-(id)init;
@end

@interface DiscussGroupChatViewCell : UITableViewCell {
	DiscussGroupTipMsgModel* _data;
}
@property(retain, nonatomic) DiscussGroupTipMsgModel* data;
-(void)dealloc;
-(void)touchAction:(id)action;
-(void)getPortraitFinishCallBack:(id)back;
-(id)getHeadImage:(id)image;
-(void)drawRect:(CGRect)rect;
-(void)drawHeadAndTips:(CGRect)tips bgRect:(CGRect)rect bgWidth:(int)width tipText:(id)text;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQFacePackageInfo : QQModel {
	NSString* _id;
	NSString* _name;
	NSString* _smallIconUrl;
	NSString* _bigIconUrl;
	NSString* _detailWebUrl;
	unsigned char _attribute;
	unsigned _localVersion;
	unsigned _svrVersion;
}
@property(assign, nonatomic) unsigned svrVersion;
@property(assign, nonatomic) unsigned localVersion;
@property(assign, nonatomic) unsigned char attribute;
@property(retain, nonatomic) NSString* bigIconUrl;
@property(retain, nonatomic) NSString* smallIconUrl;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* ID;
-(id)init;
@end

@interface QQRoamNavigationViewController : QQViewController {
}
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)ActionNoRemind:(id)remind;
-(void)ActionOpenRoam:(id)roam;
-(void)loadView;
-(void)didReceiveMemoryWarning;
@end

@interface NearbyFriendBaseView : UIView {
	QQAsynHeadImageView* _headImgView;
	CEncounterInfo* _encounterInfo;
	BOOL _highLighted;
}
@property(retain, nonatomic) CEncounterInfo* encounterInfo;
-(void)setHighlighted:(BOOL)highlighted;
-(void)dealloc;
@end

@interface TTRequestLoader : NSObject {
	NSString* _url;
	TTURLRequestQueue* _queue;
	NSString* _cacheKey;
	int _cachePolicy;
	double _cacheExpirationAge;
	NSMutableArray* _requests;
	NSURLConnection* _connection;
	NSHTTPURLResponse* _response;
	NSMutableData* _responseData;
	int _retriesLeft;
	int _leftDataLen;
}
@property(readonly, assign, nonatomic) BOOL isLoading;
@property(readonly, assign, nonatomic) double cacheExpirationAge;
@property(readonly, assign, nonatomic) int cachePolicy;
@property(readonly, assign, nonatomic) NSString* cacheKey;
@property(readonly, assign, nonatomic) NSString* url;
@property(readonly, assign, nonatomic) NSArray* requests;
-(BOOL)cancel:(id)cancel;
-(void)load;
-(void)removeRequest:(id)request;
-(int)priorityAtIndex:(int)index;
-(int)requestCount;
-(void)addRequest:(id)request atIndex:(int)index;
-(void)addRequest:(id)request;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)loadFromBundle:(id)bundle;
-(void)dispatchError:(id)error;
-(void)dispatchLoaded:(id)loaded;
-(id)processResponse:(id)response data:(id)data;
-(void)cancel;
-(void)connectToURL:(id)url;
-(void)dealloc;
-(id)initForRequest:(id)request queue:(id)queue;
@end

@interface TTURLRequestQueue : NSObject {
	NSMutableDictionary* _loaders;
	NSMutableArray* _loaderQueue;
	NSTimer* _loaderQueueTimer;
	int _totalLoading;
	unsigned _maxContentLength;
	NSString* _userAgent;
	float _imageCompressionQuality;
	BOOL _suspended;
}
@property(assign, nonatomic) float imageCompressionQuality;
@property(copy, nonatomic) NSString* userAgent;
@property(assign, nonatomic) unsigned maxContentLength;
@property(assign, nonatomic) BOOL suspended;
+(void)setMainQueue:(id)queue;
+(id)QZoneQueue;
+(id)mainQueue;
-(void)cancelAllRequests;
-(void)cancelRequestsWithDelegate:(id)delegate;
-(void)cancelRequest:(id)request;
-(BOOL)sendRequest:(id)request;
-(void)loaderDidCancel:(id)loader wasLoading:(BOOL)loading;
-(void)loader:(id)loader didFailLoadWithError:(id)error;
-(void)didLoadResponse:(id)response response:(id)response2 data:(id)data;
-(void)loadNextInQueueAfterLoader:(id)queueAfterLoader;
-(void)loadNextInQueue;
-(void)loadNextInQueueDelayed;
-(void)executeLoader:(id)loader;
-(BOOL)loadRequestFromCache:(id)cache;
-(BOOL)loadFromCache:(id)cache cacheKey:(id)key expires:(double)expires fromDisk:(BOOL)disk data:(id*)data timestamp:(id*)timestamp;
-(void)dealloc;
-(id)init;
@end

@interface TTURLDataResponse : NSObject <TTURLResponse> {
	NSData* _data;
}
@property(readonly, assign, nonatomic) NSData* data;
-(id)request:(id)request processResponse:(id)response data:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface TTURLPkgNameResponse : NSObject <TTURLResponse> {
	NSString* _strPkgName;
	NSNumber* _pkgVersion;
}
@property(retain, nonatomic) NSNumber* pkgVersion;
@property(retain, nonatomic) NSString* strPkgName;
-(id)request:(id)request processResponse:(id)response data:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface TTURLHeadImageResponse : NSObject <TTURLResponse> {
	NSString* _imageFromSrc;
	NSString* _storePath;
	NSData* _imageData;
	NSObject* _headInfo;
}
@property(retain, nonatomic) NSString* storePath;
@property(retain, nonatomic) NSObject* headInfo;
@property(retain, nonatomic) NSData* imageData;
@property(retain, nonatomic) NSString* imageFromSrc;
-(id)request:(id)request processResponse:(id)response data:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface TTURLImageServiceResponse : NSObject <TTURLResponse> {
@private
	NSData* _imageData;
	NSString* _url;
}
@property(retain, nonatomic) NSData* imageData;
@property(retain, nonatomic) NSString* url;
-(void)dealloc;
-(id)request:(id)request processResponse:(id)response data:(id)data;
@end

@interface TTURLImageResponse : NSObject <TTURLResponse> {
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
-(id)request:(id)request processResponse:(id)response data:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface TTURLQzoneDataResponse : NSObject <TTURLResponse> {
	NSData* _data;
}
@property(retain, nonatomic) NSData* data;
-(id)request:(id)request processResponse:(id)response data:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface QUIForwardService : NSObject <IUIForwardService, UINavigationControllerDelegate, UIImagePickerControllerDelegate> {
}
+(id)GetInstance;
-(void)ActionOpenContactsView:(id)view;
-(void)ActionOpenGroupChooseView:(id)view;
-(void)ActionOpenDoodleView:(id)view;
-(void)ActionOpenFileReceivingViewController:(id)controller;
-(void)ActionCancelSendPhoto;
-(void)ActionSendPhotoByFileAssistant;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)removeCurrentMaskWindow;
-(id)getMaxSubString:(id)string maxLength:(int)length;
-(void)ActionShowPslCard:(id)card;
-(void)processActionChatEncounter:(id)encounter;
-(void)processActionChatRobot:(id)robot;
-(void)processActionChatGroup:(id)group;
-(void)processActionChatC2C:(id)c;
-(void)ActionImChat:(id)chat;
-(void)ActionDiscussGroup:(id)group;
-(void)ActionGroupAlbum:(id)album;
-(void)ActionOpenUrl:(id)url;
-(BOOL)isOnLoginView;
-(void)processActCmd:(id)cmd;
-(void)forward:(int)forward Info:(id)info;
@end

@interface pluginStasticsStruct : NSObject {
@private
	int clickPos;
	int clickRlt;
	unsigned uin;
	unsigned clickCount;
	NSString* pluginID;
}
@property(assign, nonatomic) unsigned clickCount;
@property(assign, nonatomic) unsigned uin;
@property(assign, nonatomic) int clickRlt;
@property(assign, nonatomic) int clickPos;
@property(copy, nonatomic) NSString* pluginID;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface PluginStatisticsEngine : NSObject <IPluginStatisticsService> {
	NSMutableDictionary* _pluginStatisticsContainer;
@private
	int shareDest;
	int shareSource;
}
@property(assign, nonatomic) int shareDest;
@property(assign, nonatomic) int shareSource;
-(void)AddMsgLog:(id)log;
-(void)SetDestType:(int)type;
-(void)SetMessageSource:(int)source;
-(void)upload;
-(void)analyzeDate:(id)date;
-(void)sendLog:(id)log;
-(id)getClickRltString:(id)string;
-(id)getClickPosString:(id)string;
-(void)AddStatisticsLog:(id)log clickPosition:(int)position clickResult:(int)result;
-(void)dealloc;
-(id)init;
-(void)writeToFile;
@end

@interface QQMessageDBCache : NSObject {
	NSString* _currUin;
	NSMutableDictionary* _messageDict;
}
+(id)getInstance;
-(void)updateC2CRichMsgState:(int)state msgTime:(int)time state:(int)state3;
-(void)updateGroupMessageGroupCode:(id)code msgID:(int)anId sendState:(int)state;
-(void)updatePttPlaceholder:(int)placeholder;
-(void)updatePlaceholderFileMsg:(int)msg content:(id)content;
-(void)updateGroupVoiceLen:(id)len uuid:(id)uuid duration:(int)duration;
-(void)updateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)updateSendGroupPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)updateSendGroupPttState:(id)state uuid:(id)uuid duration:(unsigned)duration state:(int)state4;
-(void)updateSendGroupPicState:(id)state uuid:(id)uuid state:(int)state3;
-(void)transferOnlineFileToOffline:(int)offline newContent:(id)content fromUin:(id)uin msgTime:(int)time fileId:(unsigned)anId;
-(void)updateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state;
-(void)updateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3;
-(void)upOfflineFileMsg:(id)msg time:(int)time forRead:(int)read;
-(void)updateC2CMessagefromUIN:(long long)uin toUIN:(long long)uin2;
-(void)setGroupPttSendFail:(id)fail sendUin:(id)uin msgTime:(int)time;
-(void)updateRichMessage:(id)message uuid:(id)uuid fileKey:(id)key;
-(void)setC2CMessageStatus:(id)status status:(int)status2;
-(void)setGroupMessageStatus:(id)status success:(BOOL)success;
-(void)setTroopFailStateWithMsgID:(id)msgID;
-(void)upDatePttMsgWithUin:(id)uin msg:(id)msg isGroup:(BOOL)group;
-(void)updateGroupMessageWithUin:(id)uin desTime:(int)time srcTime:(int)time3 sendUin:(id)uin4;
-(void)deleteGroupMessageWithUin:(id)uin msgTime:(int)time sendUin:(id)uin3;
-(void)deleteAppendedGroupMsgWithUin:(id)uin msgId:(long long)anId msgType:(int)type;
-(void)deleteGroupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(void)updateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time;
-(void)updateGroupMessageUuid:(id)uuid;
-(void)updateC2CMessageUuid:(id)uuid;
-(void)upVideMsg:(double)msg read:(int)read content:(id)content;
-(void)setReadForGroupMessageByContent:(id)groupMessageByContent;
-(void)setReadForC2CMessageByContent:(id)c2CMessageByContent;
-(void)flushAllCacheToFile;
-(void)deleteAllMessageCache;
-(void)deleteGroupMessageByTime:(int)time msgType:(int)type groupCode:(id)code;
-(void)deleteC2CMessageByTime:(int)time msgType:(int)type uin:(id)uin;
-(void)deleteMessageByContent:(id)content key:(id)key;
-(void)deleteC2CMessageByContent:(id)content uin:(id)uin;
-(void)deleteMessageByTime:(int)time msgType:(int)type key:(id)key;
-(void)deleteGroupMessageByTime:(int)time groupCode:(id)code;
-(void)deleteC2CMessageByTime:(int)time uin:(id)uin;
-(void)deleteMessageByTime:(int)time key:(id)key;
-(void)deleteGroupMessageCache:(id)cache;
-(void)deleteC2cMessageCacheByMsgID:(id)anId msgID:(int)anId2;
-(void)deleteC2CMessageCache:(id)cache;
-(void)deleteMessageCache:(id)cache;
-(void)addGroupMessageListToCache:(id)cache;
-(void)addC2CMessageListToCache:(id)cache;
-(void)addGroupMessageToCache:(id)cache groupCode:(id)code;
-(void)addC2CMessageToCache:(id)cache uin:(id)uin;
-(void)addMessageToCache:(id)cache withKey:(id)key;
-(void)setGroupMessageListToCache:(id)cache groupCode:(id)code;
-(void)setC2CMessageListToCache:(id)cache uin:(id)uin;
-(void)setMessageListToCache:(id)cache withKey:(id)key;
-(id)getGroupLatestMessageFromCache:(id)cache;
-(id)getC2CLatestMessageFromCache:(id)cache;
-(id)getLatestMessageFromCache:(id)cache;
-(id)getMessageCacheFilePath:(id)path;
-(id)getGroupMessageKey:(id)key;
-(id)getC2CMessageKey:(id)key;
-(void)changeAccount:(id)account;
-(void)dealloc;
-(id)init;
@end

@interface QQWebBottomBar : UIView {
	UIButton* _homeBtn;
	UIButton* _backBtn;
	UIButton* _forwardBtn;
	UIButton* _loadBtn;
	UIButton* _shareBtn;
	id<QQWebBottomBarDelegate> _delegate;
	int _style;
@private
	UIImageView* separateBar;
}
@property(retain, nonatomic) UIImageView* separateBar;
@property(assign, nonatomic) id<QQWebBottomBarDelegate> delegate;
@property(assign, nonatomic) int style;
@property(retain, nonatomic) UIButton* shareBtn;
@property(retain, nonatomic) UIButton* loadBtn;
@property(retain, nonatomic) UIButton* forwardBtn;
@property(retain, nonatomic) UIButton* backBtn;
@property(retain, nonatomic) UIButton* homeBtn;
-(void)shareAction:(id)action;
-(void)loadAction:(id)action;
-(void)forwardAction:(id)action;
-(void)backAction:(id)action;
-(void)homeAction:(id)action;
-(void)loadBtnStopLoad;
-(void)loadBtnStartLoad;
-(void)drawBtn;
-(void)resetLayout:(int)layout;
-(void)resetSeparateViewRect:(int)rect;
-(void)resetBtnsRect:(int)rect;
-(void)getBtnsRect:(CGRect*)rect orientation:(int)orientation buttonSize:(int)size;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)drawBg;
-(void)draw;
@end

@interface QQWebViewController : QQViewController <UIWebViewDelegate, QQWebBottomBarDelegate, QQUrlJumpHelperDelegate, QQWebviewExecuteJSDelegate, UIActionSheetDelegate> {
	int _style;
	int _stackStyle;
	UIWebView* _webView;
	QQWebBottomBar* _bottomBar;
	NSString* _url;
	NSString* _initUrl;
	NSData* _sid;
	NSString* _uin;
	NSString* _lastLeftBtnTitle;
	UIActivityIndicatorView* _loadingView;
	NSTimer* _timerForLoading;
	NSURLRequest* _currentURLRequest;
	unsigned _shareAppID;
	QQChatCellModel* _chatCellModel;
	NSString* _pluginID;
	QQPluginInfo* _pluginInfo;
	NSURLConnection* _iconLoaderConnection;
	NSMutableData* _iconData;
	QQUrlJumpHelper* _urljumpHelper;
	BOOL _noResetTitle;
	BOOL _backoff;
	BOOL _isSupportOrientations;
	double appearTimestamp;
	BOOL _isGameCenter;
@private
	NSString* _recomposePrefix;
	UIImage* shareAppIcon;
	BOOL recomposingState;
	BOOL skipRedirect;
	BOOL timeout;
	BOOL _dontUseGlobalFontScale;
	BOOL _dontGoBackWhenClickLeftButton;
	BOOL _openLinkInNewWebView;
	NSString* _rightButtonCallback;
	BOOL firstRequest;
	NSMutableArray* _queryCurrentLocationRequest;
	NSURL* _referenceURL;
	NSString* _relatedAccountUin;
	int _relatedAccountType;
}
@property(retain, nonatomic) NSMutableArray* queryCurrentLocationRequest;
@property(assign, nonatomic) BOOL firstRequest;
@property(assign, nonatomic) BOOL timeout;
@property(copy, nonatomic, getter=getRecomposePrefix) NSString* recomposePrefix;
@property(assign, nonatomic) BOOL skipRedirect;
@property(assign, nonatomic) BOOL recomposingState;
@property(assign, nonatomic) BOOL isGameCenter;
@property(readonly, assign, nonatomic) UIWebView* webView;
@property(retain, nonatomic) NSString* rightButtonCallback;
@property(assign, nonatomic) BOOL openLinkInNewWebView;
@property(assign, nonatomic) BOOL dontGoBackWhenClickLeftButton;
@property(assign, nonatomic) BOOL dontUseGlobalFontScale;
@property(assign, nonatomic) BOOL isSupportOrientations;
@property(assign, nonatomic) BOOL backoff;
@property(assign, nonatomic) BOOL noResetTitle;
@property(retain, nonatomic) NSString* pluginID;
@property(retain, nonatomic) QQPluginInfo* pluginInfo;
@property(retain, nonatomic) UIImage* shareAppIcon;
@property(assign) unsigned shareAppID;
@property(readonly, assign, nonatomic) NSURLRequest* currentURLRequest;
@property(assign, nonatomic) int relatedAccountType;
@property(retain, nonatomic) NSString* relatedAccountUin;
@property(retain, nonatomic) NSString* uin;
@property(readonly, assign, nonatomic) NSData* sid;
@property(retain, nonatomic) NSURL* referenceURL;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) int stackStyle;
@property(assign, nonatomic) int style;
+(BOOL)isOfficalAccountJumpPage:(id)page;
+(BOOL)isOfficalAccountMessagePage:(id)page;
+(int)ParserUrl:(id)url;
-(void)handleGetLocationFailInner;
-(void)handleRequestTimeout:(id)timeout;
-(void)handleGetLocationFail:(id)fail;
-(void)handleGetLocationSucc:(id)succ;
-(void)handleStartUpdateLocation:(id)location;
-(void)startUpdateLocation;
-(void)removeLbsNotification;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)downloadPluginAppIcon:(id)icon;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)openInQQBrowser;
-(void)openInSafari;
-(void)shareWithFriend;
-(id)getShareURL;
-(id)getPageURL;
-(id)getCurrentURL;
-(BOOL)isRecomposeLink:(id)link;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showOfficalAccountDetailWithUin:(long long)uin;
-(void)showOfficalAccountDetailWithAccountInfo:(id)accountInfo;
-(void)shareToOfficalAccount:(long long)officalAccount;
-(void)copyCurrentUrlToClipboard;
-(id)removeCredentialsFromURLString:(id)urlstring;
-(void)showFontSizeActionSheet;
-(void)ExecuteJS:(id)js withParam:(id)param;
-(BOOL)isInlineVideoPlaying;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)viewWillAppear:(BOOL)view;
-(void)resetlayout;
-(void)resetlayout:(int)resetlayout;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(unsigned)supportedInterfaceOrientations;
-(id)removeSource:(id)source;
-(id)appendSource:(id)source;
-(void)setCurrentBarState;
-(void)didWebBottomBar:(id)bar share:(id)share;
-(void)didWebBottomBar:(id)bar reload:(id)reload;
-(void)didWebBottomBar:(id)bar goForward:(id)forward;
-(void)didWebBottomBar:(id)bar goBack:(id)back;
-(void)didWebBottomBar:(id)bar goHome:(id)home;
-(void)leftButtonClick:(id)click;
-(void)dealLoadError:(id)error Error:(id)error2;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)gameCenterStatCheckWithRequest:(id)request navigationType:(int)type;
-(void)openURLInNewWebView:(id)newWebView;
-(BOOL)shouldOpenURLInNewWebView:(id)newWebView;
-(BOOL)hasBottomNavigationToolbar;
-(void)setWebviewFitToPage:(id)page url:(id)url;
-(BOOL)isJSBridgeLink:(id)link;
-(BOOL)isAppStoreLink:(id)link;
-(void)stopLoading;
-(void)startLoading;
-(void)onLoadTimeOut;
-(void)setHomeBtnImage:(id)image;
-(void)leftButtonFrame:(id)frame;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)rigthButtonClick:(id)click;
-(void)loadRequest:(id)request isFromDelegate:(BOOL)delegate;
-(void)viewDidUnload;
-(void)buildInitUrl;
-(id)appendSidIfNeeded:(id)needed;
-(void)reloadUrl:(id)url;
-(void)loadView;
-(void)addAppInstallParam;
-(CGRect)getBottomBarRect:(int)rect;
-(CGRect)getLoadingViewRect:(int)rect;
-(CGRect)getWebviewRectWithStyle:(int)style orientation:(int)orientation;
-(float)titleHeight:(int)height;
-(void)onAppendParamFinished:(id)finished error:(id)error;
-(id)encodeRecomposeUrl:(id)url;
-(id)GetTargetUinTag;
-(id)GetCurrentUinTag;
-(id)getSourceTag:(id)tag;
-(id)encodeUrl:(id)url;
-(id)decodeUrl:(id)url;
-(BOOL)inWhiteList:(id)whiteList;
-(void)dealloc;
-(id)initWith:(id)with andModel:(id)model forStyle:(int)style;
-(id)initWith:(id)with forStyle:(int)style;
-(void)unregisterJsNotificationsWhenViewDisappear;
-(void)registerJsNotificationsWhenViewAppear;
-(void)regestNotifycation;
-(void)setScaleForDocumentElement:(float)documentElement;
-(void)doLocationJSCallback:(XXStruct_zYrK5D)callback;
-(void)onQueryCurrentLocation:(id)location;
-(void)onJsRequestOpenLink:(id)link;
-(void)onJsRequestShowOfficalAccount:(id)account;
-(void)onRightButtonTap:(id)tap;
-(void)onJsRequestSetActionButton:(id)button;
-(void)onJsRequestChangeLoadingColor:(id)color;
-(void)onJsRequestHideLoading:(id)loading;
-(void)onJsRequestShowLoading:(id)loading;
-(void)onJsRequestReload:(id)reload;
-(void)onJsRequestPopBack:(id)back;
-(void)onJsRequestCallback:(id)callback;
-(void)onFontSizeChange:(id)change;
-(void)handleEnterForeground;
-(void)handleEnterBackground;
-(void)onPluginIconUpdate:(id)update;
-(BOOL)hasShareButton;
-(void)setCustomUserAgent;
@end

@interface WebViewExtraData : NSObject {
@private
	NSString* title;
	BOOL recomposing;
	QQChatCellModel* chatcellmodel;
	int webviewStyle;
	int stackStyle;
	BOOL isSupportOrientations;
	BOOL dontGoBackWhenClickLeftButton;
	BOOL openLinkInNewWebView;
	BOOL _setReferenceURL;
}
@property(assign, nonatomic) BOOL setReferenceURL;
@property(assign, nonatomic) BOOL openLinkInNewWebView;
@property(assign, nonatomic) BOOL dontGoBackWhenClickLeftButton;
@property(assign, nonatomic) BOOL isSupportOrientations;
@property(assign, nonatomic) int stackStyle;
@property(assign, nonatomic) int webviewStyle;
@property(retain, nonatomic) QQChatCellModel* chatcellmodel;
@property(assign, nonatomic) BOOL recomposing;
@property(retain, nonatomic) NSString* title;
+(id)dataWithTitle:(id)title recomposing:(BOOL)recomposing model:(id)model style:(int)style stackStyle:(int)style5;
-(void)dealloc;
-(id)init;
@end

@interface QQGroupTableStyleViewController : QQViewController <QIMTextInputDelegate, UITableViewDelegate, UITableViewDataSource, UITextFieldDelegate, IEditViewControllerObserver> {
	UITableView* _tableView;
	NSMutableDictionary* _tableModels;
	int _editingIndex;
	int _editingMaxLen;
	UITextField* _editTextField;
	BOOL _modified;
}
-(int)indexPathForKeyIndex:(int)keyIndex;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)quitEditingMode;
-(void)enterEditingMode:(int)mode maxLen:(int)len phonePad:(BOOL)pad;
-(void)editExtraKey:(int)key value:(id)value;
-(id)emptyValueWarningTextAtIndex:(int)index;
-(BOOL)allowEmptyValueAtIndex:(int)index;
-(id)keyOfModelAtIndex:(int)index;
-(void)restoreNavigationButtons;
-(void)setEditingNavigationButtons;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)removeKeyboardNotification;
-(void)listenKeyboardNotification;
-(void)releaseQQInput;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface QAccountService : NSObject <IAccountService> {
}
+(id)getInstance;
-(id)getLoginNickname;
-(id)getA2;
-(id)getSid;
-(long long)getUin;
-(id)init;
@end

@interface EditViewController : QQViewController <QIMTextInputDelegate> {
	id<IEditViewControllerObserver> _actionObserver;
	void* _userInfo;
	NSString* _value;
	NSString* _rightButtonTitle;
	id _editControl;
	BOOL _customTextConstrain;
	int _customTextLengthType;
	int _customTextLength;
@private
	BOOL _systemEmojiDisabled;
}
@property(assign, nonatomic) BOOL systemEmojiDisabled;
@property(retain, nonatomic) NSString* rightButtonTitle;
@property(assign, nonatomic) int customTextLength;
@property(assign, nonatomic) int customTextLengthType;
@property(assign, nonatomic) BOOL customTextConstrain;
@property(assign, nonatomic) void* userInfo;
@property(assign, nonatomic) id<IEditViewControllerObserver> actionObserver;
+(int)stringLengthOfType:(int)type str:(id)str;
-(void)doneAction:(id)action;
-(BOOL)modifyValueDone:(id)done;
-(void)leftButtonClick:(id)click;
-(id)getEditContent;
-(void)loadView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)dealloc;
-(id)initWithTitle:(id)title value:(id)value;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface SingleLineEditViewController : EditViewController <UITextFieldDelegate> {
	UITextField* _textField;
	UILabel* _inputNumberLabel;
	BOOL _phonePad;
}
@property(assign, nonatomic) BOOL phonePad;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(BOOL)isTextOutOfBound;
-(void)showCustContextTips;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
@end

@interface MultilineEditViewBackground : UIView {
}
-(void)drawRect:(CGRect)rect;
@end

@interface LeftWordsHintButton : UIButton {
	int _leftWord;
}
@property(assign, nonatomic) int leftWord;
-(void)drawRect:(CGRect)rect;
@end

@interface MultiLineEditViewController : EditViewController <UITextViewDelegate> {
	UIView* _bgView;
	UITextView* _textView;
	BOOL _showLeftWordsHint;
	UIView* _extraBottomView;
	LeftWordsHintButton* _leftWordsHintButton;
}
@property(retain, nonatomic) UIView* extraBottomView;
@property(assign, nonatomic) BOOL showLeftWordsHint;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)didLeftWordsHintButtonClicked;
-(void)viewDidUnload;
-(void)loadView;
-(void)keyboardWillShow:(id)keyboard;
-(void)removeKeyboardNotification;
-(void)listenKeyboardNotification;
-(id)findFirstResponderBeneathView:(id)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
@end

@interface AVRecordVideoManager : NSObject <UINavigationControllerDelegate, UIImagePickerControllerDelegate> {
	NSString* _toUin;
	UIImagePickerController* pickViewController;
	BOOL bRecordVideo;
}
@property(retain, nonatomic) NSString* toUin;
-(void)closeRecordVideoView;
-(void)onRecordViewControllerEnterBackground;
-(void)didPopRecordViewController;
-(void)didDismissRecordViewController:(id)controller;
-(void)didPushRecordViewController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)ActionRecordVideo;
-(void)showRecordVideoView:(id)view;
-(void)dealloc;
-(id)init;
@end

@interface AsynLoadImageManager : NSObject <TTURLRequestDelegate> {
	NSOperationQueue* _operationQueue;
	NSLock* _downloadListLock;
	NSMutableDictionary* _downloadList;
	NSLock* _observerListLock;
	NSMutableArray* _observerList;
}
+(id)getInstance;
-(void)requestDidCancelLoad:(id)request;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)requestDidFinishLoad:(id)request;
-(void)requestDidStartLoad:(id)request;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)downloadImage:(id)image;
-(void)addOperation:(id)operation;
-(void)setConcurrentOperationMinCount;
-(void)setConcurrentOperationMaxCount;
-(void)dealloc;
-(id)init;
@end

@interface QQAsynHeadImageView : QQFlipImageView <IFaceObserver> {
	NSString* _uin;
	int _userType;
	int _sizeType;
	BOOL _isRound;
	BOOL _isGray;
	int _lastSize;
	BOOL _lastRound;
	BOOL _lastGray;
	BOOL _isNoneAnimated;
	BOOL _isNoneAsynLoad;
	id<IFaceService> _faceService;
	UIImage* _defaultImage;
	UIImageView* _subView;
	UIImageView* _offView;
}
@property(retain, nonatomic) UIImage* defaultImage;
@property(assign, nonatomic) BOOL isNoneAsynLoad;
@property(assign, nonatomic) BOOL isGray;
@property(assign, nonatomic) BOOL isNoneAnimated;
@property(assign, nonatomic) BOOL isRound;
@property(assign, nonatomic) int sizeType;
@property(assign, nonatomic) int userType;
@property(retain, nonatomic) NSString* uin;
-(id)bigHeadGayImage;
-(void)notifyLoadHeadImageFinished:(id)finished;
-(void)notifyGetHeadImageSuccWithDict:(id)dict;
-(void)setSubImage:(id)image;
-(void)setSubImage:(id)image offsetX:(int)x offsetY:(int)y;
-(void)setSubImage:(id)image originX:(float)x originY:(float)y;
-(void)setOff:(BOOL)off;
-(void)setBlockEmblem:(int)emblem;
-(void)setHighlighted:(BOOL)highlighted;
-(void)loadHeadImage:(id)image;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame sizeType:(int)type isRound:(BOOL)round;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQAsynUrlImageView : QQFlipImageView <IAsynDownloadImageObserver> {
	NSString* _url;
	NSString* _sourceKey;
	UIImage* _defaultImage;
	CGSize _maxSize;
	BOOL _isLocalPath;
	BOOL _isRound;
	BOOL _isNoneAsynLoad;
}
@property(assign, nonatomic) BOOL isNoneAsynLoad;
@property(assign, nonatomic) BOOL isRound;
@property(assign, nonatomic) BOOL isLocalPath;
@property(assign, nonatomic) CGSize maxSize;
@property(retain, nonatomic) UIImage* defaultImage;
@property(retain, nonatomic) NSString* sourceKey;
@property(retain, nonatomic) NSString* url;
-(void)downLoadImageFail:(id)fail;
-(void)downloadImageFinished:(id)finished;
-(void)asynLoadImageFinished:(id)finished;
-(void)asynLoadImage:(id)image;
-(void)loadUrlImage:(id)image;
-(void)setImage:(id)image;
-(void)addLoadUrlImageTask:(id)task;
-(void)setImageToCache:(id)cache withKey:(id)key;
-(id)getImageFromCache:(id)cache;
-(id)getImageKey:(id)key;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame defaultImage:(id)image;
@end

@interface NSLoggerInvocationOperation : NSInvocationOperation {
	BOOL _opetationType;
}
@property(assign, nonatomic) BOOL operationType;
@end

@interface AccountRegisterRequestItem : NSObject {
	int _requestType;
	NSTimer* _timer;
	id _data;
}
@property(retain, nonatomic) id data;
@property(retain, nonatomic) NSTimer* timer;
@property(assign, nonatomic) int requestType;
-(void)dealloc;
-(id)initWithRequestType:(int)requestType timeoutInterval:(double)interval target:(id)target selector:(SEL)selector;
@end

@interface QSAccountRegisterEngine : QSEngineBase <IQSAccountRegisterEngine, IMSFRegisterQQDelegate> {
	int _seqId;
	NSMutableArray* _requestQueue;
	NSTimer* _retryQueryUpSmsStatTimer;
	NSString* _appliedCountryCode;
	NSString* _appliedPhoneCode;
	NSString* _appliedPassword;
	BOOL _commitPhoneCodeSucc;
	int _resendSmsSecLeft;
	NSTimer* _resendSmsLimitTimer;
	NSString* _passedSmsCode;
}
@property(retain, nonatomic) NSString* passedSmsCode;
@property(retain, nonatomic) NSString* appliedPassword;
@property(retain, nonatomic) NSString* appliedPhoneCode;
@property(retain, nonatomic) NSString* appliedCountryCode;
-(void)OnMSFRQCommitPassResult:(id)result;
-(void)OnMSFRQResendSmsResult:(id)result;
-(void)OnMSFRQQuerySmsStatResult:(id)result;
-(void)OnMSFRQCommitSmsCodeResult:(id)result;
-(void)OnMSFRQCommitMobileResult:(id)result;
-(int)getResendSmsLimitSeconds;
-(id)getAppliedPassword;
-(id)getAppliedPhoneCode;
-(id)getAppliedCountryCode;
-(BOOL)queryUpSmsStat;
-(BOOL)commitPassword:(id)password;
-(BOOL)requestResendSmsCode;
-(BOOL)commitSmsCode:(id)code;
-(BOOL)commitPhoneCode:(id)code countryCode:(id)code2;
-(void)resendSmsLimitTimeout;
-(void)startResendSmsLimitTimer:(int)timer;
-(void)notifyObserversWithCommitSmsCodeResponse:(id)commitSmsCodeResponse;
-(void)notifyObserversWithCommitPhoneCodeResponse:(id)commitPhoneCodeResponse;
-(void)retryQueryUpSmsStat;
-(BOOL)queryUpSmsStat:(BOOL)stat;
-(void)startRetryQueryUpSmsStat:(int)stat;
-(void)stopRetryQueryUpSmsStat;
-(void)requestTimeout:(id)timeout;
-(void)notifyErrorWithRequestType:(int)requestType errorCode:(int)code;
-(void)removeQueueRequestWithType:(int)type;
-(id)getQueueRequestWithTimer:(id)timer;
-(id)getQueueRequestWithType:(int)type;
-(void)resetState;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)dealloc;
-(id)init;
@end

@interface AvatarRequestItem : NSObject {
	int _seq;
	NSArray* _requestUinList;
	NSTimer* _timer;
	double _ti;
	id _aTarget;
	SEL _aSelector;
}
@property(readonly, assign, nonatomic) NSArray* requestUinList;
@property(assign, nonatomic) int seq;
-(void)dealloc;
-(void)initTimer;
-(id)initWithSeqId:(int)seqId uinList:(id)list timeoutInterval:(double)interval target:(id)target selector:(SEL)selector;
@end

@interface AsynLoadHeadImageParam : NSObject {
@private
	int _retainCount;
	NSString* uin;
	int userType;
	int sizeType;
	BOOL isRound;
	id<IFaceObserver> target;
}
@property(assign, nonatomic) id<IFaceObserver> target;
@property(assign, nonatomic) BOOL isRound;
@property(assign, nonatomic) int sizeType;
@property(assign, nonatomic) int userType;
@property(retain, nonatomic) NSString* uin;
-(BOOL)isEqual:(id)equal;
-(void)releaseTarget;
-(void)retainTarget;
-(void)dealloc;
-(id)init;
@end

@interface AvatarStatItem : NSObject {
	NSString* _key;
	double _downloadUrlBeginTime;
	double _downloadUrlEndTime;
	double _downloadPicBeginTime;
	double _downloadPicEndTime;
	NSString* _picUrl;
	int _reasonCode;
	int _rdmSeq;
}
@property(assign) int rdmSeq;
@property(assign) int reasonCode;
@property(retain) NSString* picUrl;
@property(assign) double downloadPicEndTime;
@property(assign) double downloadPicBeginTime;
@property(assign) double downloadUrlEndTime;
@property(assign) double downloadUrlBeginTime;
@property(retain) NSString* key;
-(void)dealloc;
-(id)initWithKey:(id)key;
@end

@interface QQAvatarService : NSObject <IFaceService, CIMBaseEngineDelegate, TTURLRequestDelegate> {
	UserHeadInfoDB* _infoDB;
	UserHeadInfoDB* _groupInfoDB;
	UserHeadInfoDB* _phoneInfoDB;
	NSOperationQueue* _operationQueue;
	NSLock* _requestQueueLock;
	NSMutableArray* _requestQueue;
	NSLock* _requestUinListLock;
	NSMutableArray* _requestUinList;
	NSLock* _requestTimerLock;
	NSTimer* _requestTimer;
	NSLock* _batchUinListLock;
	NSMutableArray* _batchUinList;
	NSLock* _observerListLock;
	NSMutableArray* _observerList;
	NSLock* _asynLoadingListLock;
	NSMutableArray* _asynLoadingList;
	NSLock* _downloadUrlListLock;
	NSMutableArray* _downloadUrlList;
	QQLockDictionary* _bigHeadDict;
	NSMutableDictionary* _staticDict;
}
+(id)getInstance;
-(void)endStatItemWhenFailWithKey:(id)key failCode:(int)code;
-(void)endStatItemWhenSuccWithKey:(id)key;
-(void)removeStatItemWithKey:(id)key;
-(id)getStatItemWithKey:(id)key;
-(void)removeAsynLoadingTaskByKeyBatch:(id)batch;
-(void)removeAsynLoadingTaskByKey:(id)key;
-(void)executeAsynLoadingTaskByHeadInfo:(id)info;
-(void)mainThreadLoadHeadImageFinished:(id)finished;
-(void)asynLoadHeadImage:(id)image;
-(void)saveHeadImage:(id)image forUin:(id)uin userType:(int)type;
-(void)saveHeadImage:(id)image forUin:(id)uin;
-(void)removeHeadImageCacheForUin:(id)uin userType:(int)type;
-(void)removeHeadImageCacheForUin:(id)uin;
-(id)getHeadImageFromCache:(id)cache userType:(int)type isSmall:(BOOL)small isRound:(BOOL)round;
-(id)getHeadImageFromCache:(id)cache isSmall:(BOOL)small isRound:(BOOL)round;
-(void)setHeadImageToCache:(id)cache withUin:(id)uin userType:(int)type isSmall:(BOOL)small isRound:(BOOL)round;
-(void)setHeadImageToCache:(id)cache withUin:(id)uin isSmall:(BOOL)small isRound:(BOOL)round;
-(id)getHeadImageKey:(id)key isSmall:(BOOL)small isRound:(BOOL)round;
-(id)getKeyWithUin:(id)uin userType:(int)type;
-(void)didOccurFlow:(long long)flow;
-(void)request:(id)request didDownload:(id)download totalLength:(id)length;
-(void)requestDidCancelLoad:(id)request;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)requestDidFinishLoad:(id)request;
-(void)asynDownloadAvatarFinished:(id)finished;
-(void)requestDidStartLoad:(id)request;
-(id)downloadHeadImage:(id)image isDownloadBigHeadImage:(BOOL)image2;
-(void)notifyObserverDownloadHeadImageProgress:(id)progress;
-(void)notifyObserverGetHeadImageSucc:(id)succ;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)resetRequestStateByKeyBatch:(id)batch;
-(void)resetGroupRequestStateByUin:(id)uin;
-(void)resetRequestStateByUin:(id)uin;
-(void)resetRequestStateByUin:(id)uin userType:(int)type;
-(void)resetRequestStateByKey:(id)key;
-(id)asynLoadHeadImage:(id)image userType:(int)type sizeType:(int)type3 isRound:(BOOL)round target:(id)target isExist:(BOOL*)exist;
-(id)asynLoadHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round target:(id)target isExist:(BOOL*)exist;
-(id)asynLoadHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round target:(id)target;
-(id)getBigHeadImage:(id)image userType:(int)type;
-(id)getBigHeadImage:(id)image;
-(id)getHeadImage:(id)image userType:(int)type sizeType:(int)type3 isRound:(BOOL)round isExist:(BOOL*)exist;
-(id)getDefaultHeadImage:(id)image userType:(int)type sizeType:(int)type3 isRound:(BOOL)round;
-(id)getHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round isExist:(BOOL*)exist;
-(id)getHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round userType:(int)type;
-(id)getHeadImage:(id)image isSmall:(BOOL)small isRound:(BOOL)round;
-(id)getCommonHeadImage:(id)image;
-(id)getHeadImagePath:(id)path userType:(int)type sizeType:(int)type3;
-(BOOL)isHeadImageExist:(id)exist userType:(int)type sizeType:(int)type3;
-(BOOL)isHeadImageExist:(id)exist;
-(id)createHeadImageCache:(id)cache isSmall:(BOOL)small isRound:(BOOL)round;
-(void)CIMBaseEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)didRespQQHeadUrl:(QQHeadUrlResp*)url requestItem:(id)item;
-(void)asynHandleUserHeadInfo:(id)info;
-(void)requestTimeout:(id)timeout;
-(void)didSendRequestGetHeadUrl;
-(void)requestGetHeadUrlBatch:(id)batch userType:(int)type;
-(void)requestTimerCallBack:(id)back;
-(void)requestGetHeadUrl:(id)url;
-(void)asynRequestGetHeadUrl:(id)url userType:(int)type;
-(id)removeRequestBySeq:(int)seq;
-(void)changeAccount:(id)account;
-(id)getHeadInfoDB:(int)db;
-(void)dealloc;
-(id)init;
@end

@interface UserHeadInfo : QQModel {
@private
	long long uin;
	unsigned dwTimestamp;
	BOOL cHeadType;
	BOOL cImageType;
	NSString* downLoadUrl;
	short systemHeadID;
	NSString* phoneCode;
	BOOL cFaceFlag;
	BOOL cUserType;
	int _version;
}
@property(assign, nonatomic) int version;
@property(assign, nonatomic) BOOL cUserType;
@property(assign, nonatomic) BOOL cFaceFlag;
@property(retain, nonatomic) NSString* phoneCode;
@property(assign, nonatomic) short systemHeadID;
@property(retain, nonatomic) NSString* downLoadUrl;
@property(assign, nonatomic) BOOL cImageType;
@property(assign, nonatomic) BOOL cHeadType;
@property(assign, nonatomic) unsigned dwTimestamp;
@property(assign, nonatomic) long long uin;
-(id)getHeadInfoDBKey;
-(id)getBigSizeParamValue;
-(id)getNormalSizeParamValue;
-(BOOL)isOldVersion;
-(BOOL)isCustomHead;
-(BOOL)isSystemHead;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface UserHeadInfoDB : NSObject {
	NSString* _storePath;
	NSOperationQueue* _operationQueue;
	NSLock* _cacheDictLock;
	NSMutableDictionary* _cacheDict;
}
@property(retain, nonatomic) NSString* storePath;
-(void)removeAllCaches;
-(void)asynSaveObject:(id)object forKey:(id)key;
-(void)saveObject:(id)object;
-(BOOL)saveObject:(id)object forKey:(id)key;
-(id)readObjectForKey:(id)key;
-(void)addModelToCache:(id)cache withKey:(id)key;
-(void)dealloc;
-(id)init;
@end

@interface QQUrlJumpHelper : NSObject {
@private
	id<QQUrlJumpHelperDelegate> delegate;
	NSString* sourceUrl;
	BOOL hasLbsInfoUpdated;
}
@property(copy, nonatomic) NSString* sourceUrl;
@property(assign, nonatomic) id<QQUrlJumpHelperDelegate> delegate;
@property(assign, nonatomic) BOOL hasLbsInfoUpdated;
+(id)revertRequestFlag:(id)flag;
+(BOOL)needDelayLoad:(id)load;
+(BOOL)needAdditionalParam:(id)param;
+(void)appendUinToUrl:(id)url;
+(void)appendVkeyToUrl:(id)url;
+(void)appendUserInfoToUrl:(id)url;
+(void)appendMobInfoToUrl:(id)url;
+(void)appendDeviceInfoToUrl:(id)url;
+(void)appendSidToPluginUrl:(id)pluginUrl;
+(BOOL)needUserInfo:(id)info;
+(BOOL)needMobInfo:(id)info;
+(BOOL)needDeviceInfoParam:(id)param;
+(BOOL)needAuthParam:(id)param;
+(BOOL)needVkey:(id)vkey;
+(BOOL)needUin:(id)uin;
+(BOOL)url:(id)url hasRequestFlag:(id)flag andNoUrlKey:(id)key;
+(void)revertUlatAndUlon:(id)ulon;
+(void)revertUserinfoFlag:(id)flag;
+(void)revertMobinfoFlag:(id)flag;
+(void)revertDevinfoFlag:(id)flag;
+(void)revertVkeyFlag:(id)flag;
+(void)revertUinFlag:(id)flag;
+(void)revertAuthFlag:(id)flag;
+(void)urlbuilder:(id)urlbuilder revertParam:(id)param replaceOfFlag:(id)flag;
-(id)appendParamTo:(id)to;
-(void)dealloc;
-(void)updateGpsCoordinates;
-(void)updateGpsSuccess;
-(void)updateGpsFailed;
-(void)removeLbsEventObserver;
-(void)addLbsEventObserver;
-(void)onLbsGetLocationSucc;
-(void)onLbsGetLocationFail;
@end

@interface QQRegisterCommitPasswordViewController : QQViewController <UITextFieldDelegate, IQSAccountRegisterEngineObserver> {
	UITextField* _inputPwdTextField;
	UITextField* _confirmPwdTextField;
	UILabel* _inputPwdPlaceHolder;
	UILabel* _confirmPwdPlaceHolder;
}
-(void)notifyCommitPasswordResponse:(id)response;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)nextButtonPress:(id)press;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

@interface QQRegisterCountryCodeViewController : QQContactsCountryCodeViewController {
}
@end

@interface QQRegisterFillVerifyCodeViewController : QQViewController <UITextFieldDelegate, IQSAccountRegisterEngineObserver> {
	UIButton* _resendButton;
	UILabel* _timerLabel;
	UITextField* _verifyCodeTextField;
	int _remainSecond;
	NSTimer* _resendTimer;
}
-(void)notifyRequestResendSMSCodeResponse:(id)response;
-(void)notifyCommitSmsCodeResponse:(id)response;
-(void)onResendTimer;
-(void)stopResendTimer;
-(void)startResendTimer;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)resendButtonPress:(id)press;
-(void)okButtonPress:(id)press;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

@interface QQRegisterFinishViewController : QQViewController {
	long long _registeredUIN;
}
@property(assign, nonatomic) long long registeredUIN;
-(void)loginButtonPress:(id)press;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)init;
@end

@interface QQRegisterSetPhoneCodeViewController : QQSetPhoneNumberViewController <IQSAccountRegisterEngineObserver> {
}
-(void)notifyCommitPhoneCodeResponse:(id)response;
-(void)goToVerifyView;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)nextButtonPress:(id)press;
-(void)helpButtonPress:(id)press;
-(void)regionButtonPress:(id)press;
-(void)checkboxButtonPress:(id)press;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQRegisterUpSmsViewController : QQViewController <IQSAccountRegisterEngineObserver> {
	NSString* _msg;
	NSString* _telNum;
}
@property(retain, nonatomic) NSString* telNum;
@property(retain, nonatomic) NSString* msg;
-(void)notifyQueryUpSmsStatResponse:(id)response;
-(void)queryButtonPress:(id)press;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

@interface QQCreateGroupWebViewController : QQWebViewController <UIWebViewDelegate> {
	NSMutableDictionary* _groupProperties;
	NSTimer* _timer;
	NSNumber* _groupUin;
	NSNumber* _groupCode;
	NSString* _groupName;
	UIWebView* _otherWebView;
	BOOL _requestSending;
}
-(void)detachOtherWebview;
-(void)leftButtonClick:(id)click;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(int)preferredInterfaceOrientationForPresentation;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)onRightButtonClicked:(id)clicked;
-(BOOL)onLeftButtonClicked;
-(void)onReachMaxSelection;
-(int)getMaxSelection;
-(id)getInitSelectedDataList;
-(id)getInitDataList;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)generateFormData:(id)data;
-(void)sendCreateGroupRequest;
-(void)doCreateGroup;
-(id)extractUrlProperty:(id)property forName:(id)name;
-(BOOL)extractGroupProperties:(id)properties;
-(int)hexToInt:(unsigned short)int;
-(void)delayedInviteJoinGroup;
-(void)ActionReadGroup:(id)group;
-(void)ActionInviteJoinGroupRespond:(id)respond;
-(void)ActionCreateGroupRespond:(id)respond;
-(void)ActionRequestStwebToken:(id)token;
-(void)fillTroopModel;
-(void)ActionTimeout2;
-(void)ActionTimeout;
-(void)ActionReqeustStwebTokenTimeout;
-(void)enterGroupChatViewController;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)reportGroupEvent:(id)event count:(int)count;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface PYMethod : NSObject {
}
+(id)getPinYin:(id)yin;
@end

@interface QStartIODetector : NSObject {
	bool _start;
	bool _finish;
	NSTimer* _timer;
}
+(id)getInstance;
-(void)clearTmpFiles;
-(void)createTmpFile;
-(void)clearUnnecessaryFiles;
-(bool)isFrequencyStartCrash;
-(bool)isFinish;
-(bool)isStart;
-(void)FinishStart;
-(void)CatchCrash;
-(void)startApp;
-(void)dealloc;
-(id)init;
@end

@interface QQRelationRequestCell : SystemRequestCell {
}
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)contentStrDraw;
-(void)iconEnterDraw;
-(void)actionStrDraw;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)viewCellWillAppear;
-(void)drawContent;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQRelationNoticeViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, UIActionSheetDelegate, QQRelationNoticeCellDelegate> {
	UITableView* _tableView;
	NSMutableArray* _dataSource;
	QQRecentMessageModel* _recentMsgModel;
	NSOperationQueue* _reloadQueue;
	AddFriendSendMessageViewController* _addFriend;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriend;
@property(retain, nonatomic) QQRecentMessageModel* recentMsgModel;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didRelationRequest:(id)request TouchManagerAccountInfo:(id)info;
-(void)didRelationRequest:(id)request TouchGroupInfo:(id)info;
-(void)addAction:(id)action;
-(void)didSystemMsgContactRequestCell:(id)cell selectedRequestWithModel:(id)model;
-(void)didSystemMsgGroupRequestCell:(id)cell selectedRequestWithModel:(id)model;
-(id)getActionTextByModel:(id)model;
-(void)didSystemMsgFriendRequestCell:(id)cell selectedRequestWithModel:(id)model;
-(void)didSystemRequestCell:(id)cell selectedRequestWithModel:(id)model;
-(void)didSystemRequestCell:(id)cell selectedHeadWithModel:(id)model;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)ActionRequestAgreeSomebodyJoinToGroup:(id)group;
-(void)ActionRequestAgreeJoinToGroup:(id)group;
-(id)getSysModelByGroupCodeAndUin:(id)uin uin:(id)uin2;
-(id)getSysModelByGroupCode:(id)code;
-(void)onTimeout;
-(void)actionBtnClicked:(id)clicked;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(BOOL)isAccountGroupWith:(id)with;
-(void)reloadDataView;
-(void)reloadData;
-(void)ActionSearchGroupResult:(id)result;
-(void)actionGetUserInfo:(id)info;
-(void)haveNewSysMsg:(id)msg;
-(void)ActionGetQQMessage:(id)message;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onClickClearButton:(id)button;
-(void)viewDidAppear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQContactsCardViewController : QQViewController <MFMessageComposeViewControllerDelegate, UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource> {
	UIImageView* _headViewBg;
	QQAsynHeadImageView* _headView;
	UIButton* _headMaskButton;
	UILabel* _nameLabel;
	UILabel* _phoneLabel;
	UILabel* _tipsLabel;
	UIButton* _sendMsgButton;
	UIButton* _addFriButton;
	UIButton* _sendSMSButton;
	NSMutableArray* _allPhoneCodes;
	NSMutableArray* _allPhoneLabels;
	NSMutableArray* _allOriginPhoneCodes;
	UITableView* _tableView;
	NSString* _callPhoneNum;
	UIWebView* _phoneCallWebView;
	BOOL _binding;
	UserSummaryModel* _summaryModel;
	UIImageView* _coverView;
	AddFriendSendMessageViewController* _addFriendVC;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriendVC;
-(void)onResponseSummaryNotification:(id)notification;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionPhoneChoose:(id)choose;
-(void)actionHeadButtonPress:(id)press;
-(void)actionSendSMS;
-(void)actionAddFriend;
-(void)actionSendMessage;
-(void)openDialWithPhone:(id)phone;
-(void)openSMSWithPhone:(id)phone;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(BOOL)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)updateButtons;
-(void)updateHeaderView;
-(id)getContactName;
-(id)getPhoneLabel;
-(id)getOriginPhoneCode;
-(id)getPhoneCode;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithMobileAllPhones:(id)mobileAllPhones binding:(BOOL)binding;
-(id)initWithMobilePhone:(id)mobilePhone;
@end

@interface QQURLBuilder : NSObject {
	NSURL* _url;
	NSString* _urlWithoutQuery;
	NSMutableDictionary* _queryMap;
}
+(id)validURLStringFromString:(id)string;
-(id)getQueryParameter:(id)parameter;
-(void)addQueryParameter:(id)parameter;
-(void)deleteQueryParameter:(id)parameter;
-(void)replaceQueryParameter:(id)parameter withValue:(id)value;
-(void)addQueryParameter:(id)parameter withValue:(id)value;
-(id)getURL;
-(void)dealloc;
-(id)initWithURL:(id)url;
-(void)explode;
@end

@interface QHandleGarbageService : NSObject <IHandleGarbageService> {
	id<IHandleGarbageService> _delegate;
	BOOL _totalCount;
	NSTimer* _piecesProcessTimer;
	NSOperationQueue* _operationQueue;
	NSArray* _troopList;
	UIWindow* _window;
	NSDictionary* _data;
}
@property(retain, nonatomic) NSDictionary* data;
@property(assign, nonatomic) id<IHandleGarbageService> delegate;
+(id)getInstance;
-(void)saveHandleGarbageVersion;
-(void)deleteGarbageTroopMsg:(id)msg;
-(id)createTask:(id)task selector:(SEL)selector object:(id)object;
-(void)addTask:(id)task;
-(void)handleLastTask;
-(void)handleTroopProcedure:(id)procedure;
-(BOOL)troopProcedureCount;
-(BOOL)checkFirstRun;
-(void)handleGarbageEnterBackground;
-(void)handleGarbageEnterForeground;
-(void)handleGarbageTroopMsgBackGround;
-(BOOL)handleGarbageTroopMsgForNewVersion;
-(void)addObserver:(id)observer;
-(void)dealloc;
-(id)init;
@end

@interface QQAnimateLayoutScrollView : UIScrollView {
	UIView* _bgView;
	int _updateCount;
	unsigned _columnCount;
	float _gridWidth;
	float _gridHeight;
	NSMutableArray* _gridViews;
	BOOL _animatable;
}
@property(assign, nonatomic) BOOL animatable;
-(void)didScrollViewAnimationEnded;
-(void)endUpdate;
-(void)beginUpdate;
-(void)layoutSubviews;
-(void)updateGridViews:(id)views;
-(void)removeGridViewAt:(unsigned)at;
-(void)removeGridView:(id)view;
-(void)insertGridView:(id)view at:(int)at;
-(void)addGridView:(id)view;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame columnCount:(unsigned)count gridWidth:(float)width gridHeight:(float)height;
@end

@interface QQPerformanceView : UIWindow {
	UIView* _bgView;
	NSString* _message;
	UILabel* _titleLabel;
	UILabel* _msgLabel;
	UIView* _container;
	UIImageView* _backgroundView;
	int _progressTotalCount;
	int _progress;
	QQProgressView* _progressView;
}
@property(assign, nonatomic) int progressTotalCount;
@property(readonly, assign, nonatomic) UILabel* msgLabel;
@property(readonly, assign, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) NSString* message;
-(void)setProgressDescription:(id)description;
-(void)changeProgress;
-(void)dismiss;
-(void)show;
-(void)drawRect:(CGRect)rect;
-(id)initWithOverlayImage:(id)overlayImage;
-(void)dealloc;
@end

@interface QQPushMsgMonitor : NSObject {
	NSMutableArray* _pushMsgArray;
	NSMutableArray* _c2cMsgRecvArray;
	NSMutableArray* _grpMsgRecvArray;
	NSMutableArray* _cnfMsgRecvArray;
	NSMutableArray* _c2cMsgShowArray;
	NSMutableArray* _grpMsgShowArray;
	NSMutableArray* _cnfMsgShowArray;
	BOOL _c2cMsgRecving;
	BOOL _grpMsgRecving;
	BOOL _cnfMsgRecving;
	BOOL _msgShowing;
	NSTimer* _waitingToGetMsgTimer;
	NSTimer* _pushSaveTimer;
	int _pushMsgStoreCount;
}
+(id)instance;
-(void)endShowingMsg;
-(void)beginShowingMsg;
-(void)endGettingMsg:(int)msg;
-(void)beginGettingMsg:(int)msg;
-(void)recordShowMsg:(int)msg uin:(long long)uin seq:(int)seq time:(int)time;
-(void)recordReceiveMsg:(int)msg uin:(long long)uin seq:(int)seq time:(int)time;
-(void)recordReceiveRemoteNotification:(id)notification;
-(void)onWaitingToGetMsgTimeout;
-(void)checkPushMsg;
-(void)validatePushMsg;
-(BOOL)reportRdm:(id)rdm;
-(int)getValidTimeStampWithMtp:(int)mtp;
-(id)getMsgShowArray:(int)array;
-(id)getMsgRecvArray:(int)array;
-(void)willEnterForeground;
-(void)didEnterBackground;
-(void)onMSFNetworkStateNotification:(id)notification;
-(void)doSavePushMsgArray;
-(void)savePushMsgArray;
-(void)restartWaitingToGetMsgTimer;
-(void)stopWaitingToGetMsgTimer;
-(void)reset;
-(void)dealloc;
-(id)init;
@end

@interface QQGroupMessageSwitchDetailViewController : QQViewController <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _tableView;
	NSString* _groupName;
	NSString* _groupCode;
	NSMutableArray* _dataSources;
}
-(void)setReceiveGroupMsgPush:(BOOL)push;
-(void)setReceiveGroupMsg:(BOOL)msg;
-(void)clickSwitch:(id)aSwitch;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)initWithGroup:(id)group groupName:(id)name;
@end

@interface QQGroupMessageSwitchItem : QQGroupMessageBaseSwitchItem {
	BOOL _receivePush;
}
@property(assign) BOOL receivePush;
+(id)createItem:(id)item key:(id)key style:(id)style;
@end

@interface QQGroupMessageSwitchViewController : QQGroupMessageSwitchBaseViewController {
}
-(void)setReceiveGroupMsgPushForAll:(BOOL)all;
-(void)clickSwitch:(id)aSwitch;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)init;
@end

@interface UIADAnimationDelegate : NSObject {
	UIADProgram* _program;
	NSString* _animationKey;
	NSString* _startEvent;
	NSString* _stopEvent;
}
@property(retain, nonatomic) NSString* stopEvent;
@property(retain, nonatomic) NSString* startEvent;
@property(retain, nonatomic) NSString* animationKey;
@property(assign, nonatomic) UIADProgram* program;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)animationDidStart:(id)animation;
-(void)dealloc;
@end

@interface UIADTapGestureDelegate : NSObject {
	UIADProgram* _program;
	NSString* _tapEvent;
}
@property(retain, nonatomic) NSString* tapEvent;
@property(assign, nonatomic) UIADProgram* program;
-(void)onTap:(id)tap;
-(void)dealloc;
@end

@interface UIADProgram : NSObject {
	BOOL _infiniteRunloop;
	int _current;
	NSMutableArray* _timeLines;
	NSMutableDictionary* _functionEvents;
	NSMutableArray* _scenes;
	NSMutableArray* _animationDelegates;
	NSMutableArray* _gestureDelegates;
	NSMutableArray* _eventPipelines;
	NSMutableDictionary* _macros;
}
@property(readonly, assign, nonatomic) NSMutableDictionary* macros;
@property(readonly, assign, nonatomic) NSMutableArray* animationDelegates;
@property(readonly, assign, nonatomic) NSMutableArray* scenes;
@property(readonly, assign, nonatomic) NSMutableDictionary* functionEvents;
@property(readonly, assign, nonatomic) NSMutableArray* timeLines;
@property(assign, nonatomic) BOOL infiniteRunloop;
-(void)registerMacro:(id)macro value:(id)value;
-(BOOL)executeEvent:(id)event;
-(id)getExecutableLines:(double)lines modification:(double*)modification;
-(id)addTapGestureEvent:(id)event entity:(UIView*)entity;
-(id)addAnimationEvents:(id)events context:(XXStruct_mtqHHC*)context;
-(BOOL)addFunctionEvent:(id)event;
-(id)sceneWithName:(id)name;
-(BOOL)finished;
-(void)reset;
-(void)sort;
-(id)getTimeLine:(double)line;
-(void)addScene:(id)scene;
-(void)dealloc;
-(id)init;
@end

@interface UIADTimeLine : NSObject {
	double _time;
	NSMutableArray* _operations;
}
@property(readonly, assign, nonatomic) NSMutableArray* operations;
@property(readonly, assign, nonatomic) double time;
-(id)description;
-(void)reset;
-(id)addOperation:(int)operation parameters:(id)parameters line:(int)line runtime:(BOOL)runtime;
-(void)dealloc;
-(id)initWithTime:(double)time;
@end

@interface UIADOperation : NSObject {
	int _line;
	BOOL _runtime;
	int _type;
	NSDictionary* _parameters;
	UIADTimeLine* _timeLine;
}
@property(readonly, assign, nonatomic) UIADTimeLine* timeLine;
@property(readonly, assign, nonatomic) NSDictionary* parameters;
@property(readonly, assign, nonatomic) int type;
@property(readonly, assign, nonatomic) BOOL runtime;
@property(readonly, assign, nonatomic) int line;
-(BOOL)execute:(XXStruct_mtqHHC*)execute;
-(void)dealloc;
-(id)initWithType:(int)type parameters:(id)parameters timeLine:(id)line line:(int)line4 runtime:(BOOL)runtime;
@end

@interface UIADImageEntity : UIView {
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
+(id)createDefaultEntity;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
@end

@interface UIADObjectBase : NSObject {
}
-(BOOL)setPropertyValue:(id)value value:(id)value2 context:(XXStruct_mtqHHC*)context;
-(BOOL)isValidPropertyValueForProperty:(id)property value:(id)value;
-(BOOL)isValidPropertyName:(id)name;
@end

@interface UIADTimeObject : UIADObjectBase {
	double _absoluteTime;
}
@property(readonly, assign, nonatomic) double absoluteTime;
@end

@interface UIADScene : UIADTimeObject {
	NSString* _name;
	NSMutableDictionary* _objects;
	UIView* _entity;
	int _resourceType;
	NSString* _mainPath;
	NSString* _defaultFillMode;
	NSString* _defaultTimingFunction;
	BOOL _defaultRemovedOnCompletion;
	double _defaultDuration;
}
@property(readonly, assign, nonatomic) double defaultDuration;
@property(readonly, assign, nonatomic) BOOL defaultRemovedOnCompletion;
@property(readonly, assign, nonatomic) NSString* defaultTimingFunction;
@property(readonly, assign, nonatomic) NSString* defaultFillMode;
@property(readonly, assign, nonatomic) NSString* mainPath;
@property(readonly, assign, nonatomic) int resourceType;
@property(retain, nonatomic) UIView* entity;
@property(readonly, assign, nonatomic) NSMutableDictionary* objects;
@property(readonly, assign, nonatomic) NSString* name;
-(BOOL)setPropertyValue:(id)value value:(id)value2 context:(XXStruct_mtqHHC*)context;
-(BOOL)isValidPropertyValueForProperty:(id)property value:(id)value;
-(BOOL)isValidPropertyName:(id)name;
-(void)reset;
-(id)objectWithNameNoCreate:(id)nameNoCreate;
-(id)objectWithName:(id)name;
-(void)dealloc;
-(id)initWithAbsoluteTime:(double)absoluteTime name:(id)name;
@end

@interface UIADEvent : UIADTimeObject {
	double _time;
}
@property(readonly, assign, nonatomic) double time;
-(id)initWithTime:(double)time absoluteTime:(double)time2;
@end

@interface UIADFunctionEvent : UIADEvent {
	double _startTime;
	int _state;
	int _current;
	NSString* _name;
	NSMutableArray* _timeLines;
}
@property(readonly, assign, nonatomic) NSMutableArray* timeLines;
@property(readonly, assign, nonatomic) NSString* name;
@property(readonly, assign, nonatomic) int current;
@property(readonly, assign, nonatomic) int state;
-(id)getExecutableLines:(double)lines;
-(void)trigger:(double)trigger;
-(BOOL)finished;
-(id)duplicateEvent;
-(id)getTimeLine:(double)line;
-(void)dealloc;
-(id)initWithName:(id)name;
@end

@interface UIADObject : UIADObjectBase {
	NSString* _name;
	BOOL _external;
	BOOL _sizeModified;
	UIADScene* _scene;
	UIView* _entity;
	CGSize _resourceImageSize;
}
@property(retain, nonatomic) UIView* entity;
@property(readonly, assign, nonatomic) UIADScene* scene;
@property(readonly, assign, nonatomic) NSString* name;
@property(readonly, assign, nonatomic) BOOL external;
-(BOOL)setPropertyValue:(id)value value:(id)value2 context:(XXStruct_mtqHHC*)context;
-(id)getAnimationGroup:(id)group context:(XXStruct_mtqHHC*)context;
-(id)getKeyframeAnimation:(id)animation useDefault:(BOOL)aDefault context:(XXStruct_mtqHHC*)context;
-(id)getBasicAnimation:(id)animation useDefault:(BOOL)aDefault context:(XXStruct_mtqHHC*)context;
-(BOOL)assignCAPropertyAnimationProperties:(id)properties parameters:(id)parameters useDefault:(BOOL)aDefault context:(XXStruct_mtqHHC*)context;
-(BOOL)assignCAAnimationGroupProperties:(id)properties parameters:(id)parameters context:(XXStruct_mtqHHC*)context;
-(BOOL)assignCAAnimationProperties:(id)properties parameters:(id)parameters useDefault:(BOOL)aDefault context:(XXStruct_mtqHHC*)context;
-(BOOL)isValidPropertyValueForProperty:(id)property value:(id)value;
-(BOOL)isValidPropertyName:(id)name;
-(void)replaceEntity:(UIView*)entity;
-(void)reset;
-(void)dealloc;
-(id)initWithExternal:(id)external scene:(id)scene entity:(UIView*)entity;
-(id)initWithName:(id)name scene:(id)scene;
@end

@interface UIADPropertyValue : NSObject {
	int _type;
	NSDictionary* _dictionaryValue;
	NSArray* _arrayValue;
	NSNumber* _numberValue;
	NSString* _stringValue;
}
@property(retain, nonatomic) NSString* stringValue;
@property(retain, nonatomic) NSNumber* numberValue;
@property(retain, nonatomic) NSArray* arrayValue;
@property(retain, nonatomic) NSDictionary* dictionaryValue;
@property(assign, nonatomic) int type;
+(id)propertyValueWithString:(id)string;
+(id)valueFromMacro:(id)macro object:(id)object context:(XXStruct_mtqHHC*)context;
-(id)evaluateNumberAsDimensionWithObject:(id)object dimension:(float)dimension context:(XXStruct_mtqHHC*)context;
-(id)evaluateArrayAsColorWithObject:(id)object context:(XXStruct_mtqHHC*)context;
-(id)evaluateArrayAsNSValueArrayWithObject:(id)object context:(XXStruct_mtqHHC*)context;
-(id)evaluateAsNSValueWithObject:(id)object context:(XXStruct_mtqHHC*)context;
-(id)evaluateArrayAsNumbersWithObject:(id)object context:(XXStruct_mtqHHC*)context;
-(id)evaluateNumberWithObject:(id)object context:(XXStruct_mtqHHC*)context;
-(BOOL)popWithOperator:(NSNumber*)anOperator operandStack:(id)stack operatorStack:(id)stack3;
-(BOOL)compareOperator:(NSNumber*)anOperator operator2:(NSNumber*)a2;
-(void)dealloc;
@end

__attribute__((objc_exception))
@interface UIADParserException : NSException {
	int _errorLine;
}
@property(assign) int errorLine;
-(id)initWithLine:(int)line;
@end

@interface UIADParser : NSObject {
	NSString* _script;
	UIADProgram* _program;
}
@property(retain, nonatomic) UIADProgram* program;
+(id)parseAssignmentOperationWithTarget:(id)target script:(id)script;
-(void)parse;
-(void)dealloc;
-(id)initWithScript:(id)script;
@end

@interface UIAnimationDirector : UIView <UIADOperationDelegate> {
	BOOL _compiled;
	BOOL _running;
	double _speed;
	NSString* _script;
	UIADProgram* _program;
	NSThread* _timerThread;
	struct {
		BOOL operationWithTarget;
		id animationDelegate;
		double speed;
		UIView<UIADOperationDelegate>* mainView;
		UIADProgram* program;
		NSObject* invokeResponder;
		UIADOperation* operation;
		id animation;
		UIADPropertyValue* startEvent;
		UIADPropertyValue* stopEvent;
	} _context;
	id<UIAnimationDirectorDelegate> _delegate;
	NSObject* _scriptInvokeResponder;
}
@property(assign, nonatomic) NSObject* scriptInvokeResponder;
@property(assign, nonatomic) id<UIAnimationDirectorDelegate> delegate;
@property(readonly, assign, nonatomic) double speed;
@property(readonly, assign, nonatomic) BOOL running;
@property(readonly, assign, nonatomic) BOOL compiled;
@property(readonly, assign, nonatomic) UIADProgram* program;
+(BOOL)executeOperationWithTarget:(UIView*)target script:(id)script delegate:(id)delegate;
-(void)didObjectEntityCreated:(id)created;
-(void)didSceneEntityCreated:(id)created;
-(void)didAllOperationsExecuted;
-(void)executeOperation:(id)operation;
-(void)finish;
-(void)stop;
-(void)run:(double)run;
-(void)reset;
-(void)timerThreadEvent;
-(void)compile;
-(void)dealloc;
-(void)loadScriptFromFile:(id)file;
-(void)loadScript:(id)script;
-(id)initWithScriptFile:(id)scriptFile;
-(id)initWithScript:(id)script;
@end

@interface TokenEventMonitor : NSObject {
	NSTimer* _timer;
	int _rdmSeq;
	int _curEvent;
}
+(id)instance;
-(void)setTokenEvent:(int)event;
-(void)onEventServerResponseSucc;
-(void)onEventServerResponseFail;
-(void)onEventReceivedAndSendToServer;
-(void)onEventFailedToReceive;
-(void)onEventRequest;
-(void)onTimeout;
-(void)restartTimer:(int)timer;
-(void)resetTimer;
-(void)dealloc;
-(id)init;
@end

@interface SSCMParamEngine : NSObject {
	NSDictionary* _sscmParamDic;
}
+(id)getInstance;
-(int)getSFiRetryMax;
-(long)getSFiConfirmNum;
-(long)getSFiNVTInterval;
-(long)getSFiMSNVT;
-(long)getSFiMNVT;
-(int)getSFiNVTThreshold;
-(int)getSFiSmallMulity;
-(int)getSFiSmallPic;
-(double)getSFiQuickRate;
-(double)getSFiSlowRate;
-(double)getSFiSlopePoi;
-(int)getSFiStableUsn;
-(long)getSFiWWANMax;
-(long)getSFiWWANSz;
-(long)getSFiWifiSz;
-(int)getSFiNo;
-(int)getSFiSwitch;
-(double)getDoubleParamValue:(id)value;
-(long)getLongParamValue:(id)value;
-(int)getIntParamValue:(id)value;
-(void)dealloc;
-(id)init;
@end

@interface QQGroupMessageSwitchNoPushItem : QQGroupMessageBaseSwitchItem {
}
+(id)createItem:(id)item key:(id)key style:(id)style;
@end

@interface QQGroupMessageSwitchNoPushViewController : QQGroupMessageSwitchBaseViewController {
}
-(void)clickSwitch:(id)aSwitch;
-(void)clickSwitchTotal:(id)total;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)init;
@end

@interface QQHistoryViewController : QQViewController <QQChatViewTableDelegate, UIActionSheetDelegate, QQChatViewTableDelegate, QQGetRoamMsgModelProtocol, SimpleAlertViewDelegate, QQDoodleSendDelegate, UIDocumentInteractionControllerDelegate, DBAsyncCallbackProtocol, MFMailComposeViewControllerDelegate> {
@private
	NSString* uin;
	NSString* nick;
	UIImage* iconImage;
	unsigned messageCount;
	unsigned numberOfPage;
	int curPage;
	UIBarButtonItem* leftItem;
	UIBarButtonItem* rightItem;
	UIBarButtonItem* trashItem;
	UIBarButtonItem* _topRecordItem;
	UIBarButtonItem* _bottomRecordItem;
	TQRecorderManager* voiceManager;
	QQVoiceMessageCenter* _voiceCenter;
	UIToolbar* toolBar;
	UILabel* hintLabel;
	BOOL _isGroup;
	QQChatViewTable* _table;
	unsigned dwRoamMsgNum;
	UIActivityIndicatorView* act;
	BOOL isBackDismiss;
	NSTimer* _timer;
	CGSize sizeImage;
	BOOL _isReLoadTable;
	id chatViewController;
	BOOL _isDiscussGroup;
	BOOL _isFirstPush;
	QQMessageModel* _sModel;
	QQMessageModel* _lModel;
	QQBaseChatModel* _chatModel;
	QQBaseChatUIOperation* _chatUIOperation;
	UIDocumentInteractionController* _documentInteractionController;
}
@property(retain, nonatomic) QQMessageModel* lModel;
@property(retain, nonatomic) QQMessageModel* sModel;
@property(assign, nonatomic) BOOL isGroup;
@property(assign, nonatomic) id chatViewController;
@property(assign, nonatomic) BOOL isBackDismiss;
@property(assign, nonatomic) unsigned dwRoamMsgNum;
@property(retain, nonatomic) NSString* uin;
-(id).cxx_construct;
-(void)didSelectIDNumber:(id)number;
-(void)didSelectLongNumber:(id)number;
-(void)didSelectQQNumber:(id)number;
-(void)didSelectEmail:(id)email;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(CGRect)getOriginalRectForPhoto:(id)photo atIndex:(int)index thumbRegion:(CGRect*)region clipRect:(CGRect*)rect;
-(id)cellArrayForTable:(id)table;
-(id)filterArray:(id)array;
-(id)sortMsgArray:(id)array;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didReceiveMemoryWarning;
-(void)saveImgToAlbum:(id)album;
-(void)addSelfImage:(id)image;
-(void)doodleImg:(id)img;
-(void)sendDoodleImage:(id)image;
-(void)documentInteractionControllerDidDismissOptionsMenu:(id)documentInteractionController;
-(id)documentInteractionControllerViewForPreview:(id)preview;
-(CGRect)documentInteractionControllerRectForPreview:(id)preview;
-(id)documentInteractionControllerViewControllerForPreview:(id)preview;
-(void)didCell:(id)cell browseFileForModel:(id)model;
-(void)didCell:(id)cell touchHeadForModel:(id)model;
-(void)didCell:(id)cell forModel:(id)model;
-(void)downLoadC2COfflineImg:(id)img;
-(void)downLoadGroupImg:(id)img isRefresh:(BOOL)refresh;
-(void)startDownloadOriginGroupPic:(id)pic;
-(void)startDownloadOriginC2CPic:(id)pic;
-(id)getAvailableOriginPicName:(id)name;
-(id)PaseImage:(id)image;
-(void)didSelectReloadImage:(id)image;
-(void)tableViewImageModelDidTouch:(id)tableViewImageModel;
-(void)ActionBrowsePhotos:(id)photos;
-(void)transform:(id)transform;
-(void)UITableViewDidTouch:(id)uitableView withEvent:(id)event;
-(void)tableViewDidScroll;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)deleteMessageModel:(id)model;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(id)initWithuin:(id)withuin nick:(id)nick headImage:(id)image isGroup:(BOOL)group isDiscussGroup:(BOOL)group5;
-(void)dealloc;
-(BOOL)getIsGroup;
-(id)getUin;
-(void)updateUIOperation:(id)operation;
-(void)loadPage:(int)page;
-(id)PaseImage:(id)image;
-(void)freshEditableItem;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionPasteString:(id)string;
-(void)actionLaunchEmail:(id)email;
-(void)ActionGetRoamMessage;
-(void)StopLoading;
-(void)Loading;
-(void)GetRoamMsgFinish:(id)finish;
-(void)GetRoamMsgTimeOut;
-(void)GetRoamMsgFinish;
-(void)GetRoamMsgError:(int)error string:(id)string;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)didSimpleAlertView:(id)view buttonClick:(id)click atIndex:(int)index;
-(void)showAlertInputView:(id)view title:(id)title;
-(void)showAlertView:(id)view forMessage:(id)message withTitle:(id)title;
-(void)ActionHistory;
-(void)ActionGroupHistory;
-(void)ActionTrash;
-(void)saveContext:(id)context;
-(void)loadBottomPage:(id)page;
-(void)loadTopPage:(id)page;
-(void)ActionNext;
-(void)ActionRewind;
-(void)deleteMessageAllPage:(BOOL)page;
-(void)showVoiceCellOnThread:(id)thread;
-(void)tableViewDidTouchRecordAtIndexPath:(id)tableView;
@end

@interface FileAssistantChatViewController : QQBaseChatViewController <QQFileCellDelegate, QQMultiImagePickerControllerDelegate, QIMTextInputDelegate, IEditViewControllerObserver> {
	BOOL _isInit;
	BOOL _isNoAbility;
	UIImage* _thumbImage;
	UIImageView* _introView;
	UITextView* _tips;
	UIButton* _actionButton;
}
-(void)handleC2CRoamMessage:(id)message msgList:(id)list;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(BOOL)onEditViewCancel:(id)cancel value:(id)value;
-(BOOL)sendTextMsg:(id)msg showText:(id)text;
-(void)deleteMessageModel:(id)model;
-(void)appendMessage:(id)message shouldReloadData:(BOOL)data shouldScrollToEndWithAnimation:(BOOL)animation;
-(void)actionProfile:(id)profile;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)setChatViewCover;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)ActionSendText;
-(void)ActionSelectVideoFromAlbum;
-(void)ActionRecordVideo;
-(void)ActionRecvSvrMsg:(id)msg;
-(void)onActionButtonClick:(id)click;
-(void)ActionWifiPhoto;
-(void)ActionSendVideo;
-(void)ActionClearAllMsgAfterDelay;
-(void)ActionClearAllMsg;
-(void)releaseUI;
-(void)loadView;
-(void)restoreData;
-(void)createAndAddNoticeView:(id)view subTitle:(id)title;
-(void)createAndAddIntroView;
-(void)sendReadConfirm;
-(void)dealloc;
-(id)init;
-(void)onVideoRecordCompleted:(id)completed;
-(void)didCell:(id)cell browseFileForModel:(id)model;
-(void)didCell:(id)cell forModel:(id)model;
-(void)QQMultiImagePickerController:(id)controller didSelectPhoto:(id)photo;
-(void)QQMultiImagePickerControllerDidCancel:(id)qqmultiImagePickerController;
-(void)QQMultiImagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)tableViewReSendImage:(id)image;
-(void)ActionAlbum;
@end

@interface FileAssistantDownloadTransfer : NSObject {
	NSURL* _url;
	NSString* _tempPath;
	NSString* _filePath;
	NSString* _fileUuid;
	NSData* _fileMd5;
	int _downloadType;
	int _httpStatusCode;
	long long _curTransSize;
	long long _totalTransSize;
	NSURLConnection* _connection;
	int _retryNum;
	id<FileAssistantDownloadTransferDelegate> _delegate;
	int _businessType;
}
@property(assign, nonatomic) int httpStatusCode;
@property(assign, nonatomic) int businessType;
@property(assign, nonatomic) id<FileAssistantDownloadTransferDelegate> delegate;
@property(assign, nonatomic) long long totalTransSize;
@property(assign, nonatomic) int downloadType;
@property(retain, nonatomic) NSString* fileUuid;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSString* tempPath;
@property(retain, nonatomic) NSURL* url;
+(dispatch_queue_s*)shareQueue;
-(void)downloadFinished;
-(void)removeTmpFile;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(long long)writeDataToFile:(id)file;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)retryDownload;
-(void)cancelDownload;
-(void)startDownload;
-(void)dealloc;
-(id)initWithTempPath:(id)tempPath filePath:(id)path downloadUrl:(id)url;
@end

@interface FileAssistantEngine : NSObject <CIMBaseEngineDelegate, FileAssistantUploadTransferDelegate, FileAssistantDownloadTransferDelegate, FileAssistantHTTPConnectionDelegate, IHttpServerStateObserver, IConnectionObserver> {
	NSMutableArray* _requestQueue;
	QQLockDictionary* _fileUploadDict;
	QQLockDictionary* _fileDownloadDict;
	QQLockDictionary* _resourcePathDict;
	NSMutableDictionary* _fileMd5CacheDict;
	NSMutableDictionary* _msgModelDict;
	NSMutableDictionary* _longTextDict;
	QQLockDictionary* _fileAssistantHTTPConnDict;
	id<IHttpServerService> _HttpServerService;
	int m_ServerSessionId;
	NSString* _strWifiIp;
	unsigned _localIp;
	unsigned _localPort;
	int _networkState;
	BOOL _isRequestSendPhoto;
	long long _sessionId;
	BOOL _isWifiPhotoReady;
	NSMutableArray* _assetGroups;
	ALAssetsLibrary* _library;
}
+(long long)generateSessionId;
+(id)getInstance;
-(void)OnIPChange:(int)change;
-(void)OnStopResult:(BOOL)result Error:(id)error SessionId:(int)anId;
-(void)OnStartResult:(BOOL)result Error:(id)error SessionId:(int)anId BindIP:(id)ip BindPort:(int)port;
-(void)handleMSFNetworkApnStateNotification:(id)notification;
-(void)cancelAllTasks:(int)tasks;
-(void)setHasUsedDataLine;
-(float)getFileDownloadTaskProgress:(id)progress;
-(float)getFileUploadTaskProgress:(id)progress;
-(BOOL)isFileDownloadTaskExist:(id)exist;
-(BOOL)isFileUploadTaskExist:(id)exist;
-(void)openWifiPhoto;
-(void)promptWifiPhotoUrl:(id)url;
-(void)OnConnectionDie:(id)die;
-(void)OnConnectionWillStart:(id)onConnection;
-(id)getAssetsGroupList;
-(BOOL)isWifiPhotoReady;
-(id)getResourcePathByName:(id)name;
-(id)getBase64BufToken:(id)token;
-(id)localWiFiIPAddress;
-(void)FileAssistantDownloadTransfer:(id)transfer curTransSize:(long long)size totalTransSize:(long long)size3;
-(void)FileAssistantDownloadTransfer:(id)transfer didFinished:(int)finished;
-(void)FileAssistantHTTPConnection:(id)connection curTransSize:(unsigned)size totalTransSize:(int)size3;
-(void)FileAssistantHTTPConnection:(id)connection didFinished:(BOOL)finished;
-(void)FileAssistantUploadTransfer:(id)transfer curTransSize:(int)size totalTransSize:(int)size3;
-(void)FileAssistantUploadTransfer:(id)transfer didFinished:(int)finished;
-(void)CIMBaseEngine:(id)engine didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)actionReceiveDownloadRequestMessage:(id)message;
-(void)handleMsgType0x210SubMsgType0x13:(id)a13;
-(void)handleMsgType0x210SubMsgType0xe:(id)xe;
-(void)cancelSendPhotoAfterDelay;
-(void)handleMsgType0x210SubMsgType0xa:(id)xa msgTime:(unsigned)time msgSeq:(unsigned)seq;
-(void)handleMsgType0x210SubMsgType0xb:(id)xb;
-(void)openAlbumToSendPhotoAfterDelay;
-(long long)getRequestSendPhotoSessionId;
-(void)cancelRequestSendPhoto;
-(void)setIsRequestSendPhoto:(BOOL)photo;
-(void)handleMsgType0x210SubMsgType0x2:(id)a2 msgTime:(unsigned)time msgSeq:(unsigned)seq;
-(BOOL)isFileAlreadyExist:(id)exist fileMd5:(id)a5;
-(void)insertMessageAndPostGetMessageNotification:(id)notification;
-(void)didRespFileDownload:(FileDownloadResp*)download seqId:(int)anId;
-(void)didRespFileUpload:(FileUploadResp*)upload seqId:(int)anId;
-(id)convertIp:(unsigned)ip port:(short)port;
-(BOOL)continueFileDownload:(id)download;
-(void)cancelFileDownload:(id)download sendFileOperateType:(int)type;
-(void)cancelFileUpload:(id)upload sendFileOperateType:(int)type;
-(BOOL)sendQQDataTextSubString:(id)string;
-(BOOL)requestQQDataText:(long long)text textContent:(id)content;
-(BOOL)requestTransFileOperate:(long long)operate sessionId:(long long)anId operateType:(BOOL)type reqSeq:(long long)seq;
-(BOOL)requestSendPbMsg:(long long)msg msgData:(id)data;
-(BOOL)requestSendFile:(id)file index:(id)index md5:(id)a5 key:(id)key fileType:(BOOL)type svrIp:(unsigned)ip svrPort:(unsigned)port originFileMd5:(id)a58 fileLen:(long long)len sessionId:(long long)anId originFileType:(unsigned)type11;
-(BOOL)requestFileDelete:(long long)aDelete transType:(BOOL)type filePath:(id)path;
-(BOOL)requestFileDownload:(id)download;
-(BOOL)requestThumbFileUpload:(long long)upload transType:(BOOL)type fileInfo:(id)info;
-(BOOL)requestFileUpload:(long long)upload transType:(BOOL)type fileInfo:(id)info msgModel:(id)model;
-(void)sendFile:(id)file thumbPath:(id)path thumbMd5:(id)a5 transType:(int)type sessionId:(long long)anId;
-(void)sendFile:(id)file thumbPath:(id)path;
-(id)createFileMessageModel:(id)model filePath:(id)path fileSize:(long long)size fileUuid:(id)uuid;
-(vector<char, std::allocator<char> >)getEncryptDataVector:(id)vector time:(long)time sessionId:(long long)anId isThumb:(BOOL)thumb;
-(vector<char, std::allocator<char> >)getTokenKeyVector;
-(BOOL)startupHttpServer;
-(id)getFileInfoByPath:(id)path;
-(id)getFileFirst2Bytes:(id)bytes;
-(id)getMD5FromData:(id)data;
-(id)getFileMD5:(id)a5;
-(void)fileIndirectDownloadRequestTimeout:(id)timeout;
-(void)fileDirectDownloadRequestTimeout:(id)timeout;
-(void)fileIndirectUploadRequestTimeout:(id)timeout;
-(void)fileDirectUploadRequestTimeout:(id)timeout;
-(void)fileDownloadTaskDownloadSuccess:(id)success saveFilePath:(id)path;
-(void)fileUploadTaskIndirectUploadSuccess:(id)success;
-(void)fileUploadTaskDirectUploadSuccess:(id)success;
-(void)fileDownloadTaskStopIndirectDownload:(id)download;
-(void)fileDownloadTaskStopDirectDownload:(id)download;
-(void)fileUploadTaskStopIndirectUpload:(id)upload;
-(void)fileUploadTaskStopDirectUpload:(id)upload;
-(void)removeFileDownloadTaskByFileUuid:(id)uuid;
-(void)removeFileUploadTaskByFileUuid:(id)uuid;
-(id)createFileDownloadTaskByFileUuid:(id)uuid;
-(id)getFileDownloadTaskByFileUuid:(id)uuid;
-(id)createFileUploadTaskByFileUuid:(id)uuid;
-(id)getFileUploadTaskByFileUuid:(id)uuid;
-(void)postUINotificationCancel:(id)cancel msgModel:(id)model;
-(void)postUINotificationPause:(id)pause msgModel:(id)model;
-(void)postUINotificationFail:(id)fail msgModel:(id)model errorMsg:(id)msg;
-(void)postUINotificationSuccess:(id)success msgModel:(id)model saveFilePath:(id)path;
-(void)postUINotification:(id)notification withProcess:(float)process;
-(id)getRequestItemBySeq:(int)seq;
-(id)removeRequestItemBySeq:(int)seq;
-(void)changeAccount;
-(void)dealloc;
-(id)init;
-(void)asynSendTransTypePict:(id)pict sessionId:(long long)anId;
-(void)asynSendImageWithAsset:(id)asset transType:(int)type index:(int)index sessionId:(long long)anId thumbMd5:(id)a5;
-(id)getSendImageFileNameByDate:(int)date;
-(id)sendThumbImage:(id)image transType:(int)type sessionId:(long long)anId;
-(id)getImageFileInfoByData:(id)data fileName:(id)name filePath:(id)path;
@end

@interface FileAssistantHTTPConnection : NSObject <IDownloadReqObserver> {
	NSString* _fileUuid;
	id<FileAssistantHTTPConnectionDelegate> _connectionDelegate;
	id<IConnection> _conn;
}
@property(assign, nonatomic) id<FileAssistantHTTPConnectionDelegate> connectionDelegate;
@property(readonly, assign, nonatomic) id<IConnection> conn;
@property(retain, nonatomic) NSString* fileUuid;
-(void)ConnectionWouldDie:(id)die;
-(void)Connection:(id)connection RequestId:(unsigned)anId Finish:(BOOL)finish;
-(void)Connection:(id)connection RequestId:(unsigned)anId HadSendBytes:(unsigned)bytes TotalBytes:(unsigned)bytes4;
-(id)DownloadPathForUri:(id)uri Handled:(BOOL*)handled;
-(void)dealloc;
-(id)initWithIConnection:(id)iconnection;
-(id)wifiPhotoFilePathForFolderPage:(int)folderPage next:(int)next;
-(id)wifiPhotoFilePathForFolderPage:(int)folderPage;
-(id)handleCommandImageList:(id)list assetsGroup:(id)group fromIndex:(int)index;
-(id)handleCommandHasMore:(id)more assetsGroup:(id)group fromIndex:(int)index;
-(id)handleCommandImageLine:(id)line assetsGroup:(id)group fromIndex:(int)index;
-(id)handleCommandLineCol:(id)col assetsGroup:(id)group fromIndex:(int)index;
-(id)wifiPhotoFilePathForRootPage;
-(id)replaceRawData:(id)data block:(id)block command:(id)command withResult:(id)result;
-(id)getBlockData:(id)data command:(id)command;
-(id)getBlockEnd:(id)end;
-(id)getBlockBegin:(id)begin;
-(id)handleCommandLibrary:(id)library;
-(id)wifiPhotoFilePathForURI:(id)uri;
-(id)filePathForURI:(id)uri allowDirectory:(BOOL)directory;
@end

@interface FileAssistantUploadTransfer : NSObject {
	NSURL* _url;
	NSString* _filePath;
	NSString* _fileIndex;
	NSData* _fileKey;
	FileUploadInfo* _fileInfo;
	BOOL _transType;
	int _sequence;
	int _packSize;
	int _curTransSize;
	int _totalTransSize;
	int _httpStatusCode;
	unsigned _svrUploadIp;
	unsigned short _svrUploadPort;
	NSURLConnection* _connection;
	int _retryNum;
	id<FileAssistantUploadTransferDelegate> _delegate;
}
@property(assign, nonatomic) id<FileAssistantUploadTransferDelegate> delegate;
@property(assign, nonatomic) unsigned short svrUploadPort;
@property(assign, nonatomic) unsigned svrUploadIp;
@property(assign, nonatomic) int packSize;
@property(assign, nonatomic) int sequence;
@property(assign, nonatomic) BOOL transType;
@property(retain, nonatomic) FileUploadInfo* fileInfo;
@property(retain, nonatomic) NSData* fileKey;
@property(retain, nonatomic) NSString* fileIndex;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSURL* url;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)retryUpload;
-(void)cancelUpload;
-(void)startUploadRangeFrom:(int)from;
-(id)generatePostBody:(int)body;
-(void)remakeUploadUrl:(id)url;
-(char*)getDataMd5:(const char*)a5 srcLen:(int)len;
-(void)dealloc;
-(id)initWithFilePath:(id)filePath uploadUrl:(id)url packSize:(int)size;
@end

@interface QQAssetsGroup : NSObject {
	int _groupIndex;
	ALAssetsGroup* _group;
	NSMutableArray* _assetsList;
}
@property(retain, nonatomic) NSMutableArray* assetsList;
@property(retain, nonatomic) ALAssetsGroup* group;
@property(assign, nonatomic) int groupIndex;
-(void)dealloc;
-(id)init;
@end

@interface TransFileInfo : NSObject {
	long long _lFromUIN;
	long long _lToUIN;
	BOOL _cType;
	NSString* _strUuid;
	NSString* _strUrl;
	NSData* _vPartMd5;
	NSData* _vTriMd5;
	NSString* _strFileName;
	NSString* _strFilePath;
	unsigned _uFileSize;
	unsigned _uIP;
	unsigned short _shPort;
	unsigned _uLifeTime;
	unsigned _uUploadTime;
	BOOL _cFileType;
	NSData* _first2Bytes;
}
@property(retain, nonatomic) NSData* first2Bytes;
@property(assign, nonatomic) BOOL cFileType;
@property(assign, nonatomic) unsigned uUploadTime;
@property(assign, nonatomic) unsigned uLifeTime;
@property(assign, nonatomic) unsigned short shPort;
@property(assign, nonatomic) unsigned uIP;
@property(assign, nonatomic) unsigned uFileSize;
@property(retain, nonatomic) NSString* strFilePath;
@property(retain, nonatomic) NSString* strFileName;
@property(retain, nonatomic) NSData* vTriMd5;
@property(retain, nonatomic) NSData* vPartMd5;
@property(retain, nonatomic) NSString* strUrl;
@property(retain, nonatomic) NSString* strUuid;
@property(assign, nonatomic) BOOL cType;
@property(assign, nonatomic) long long lToUIN;
@property(assign, nonatomic) long long lFromUIN;
-(void)dealloc;
-(id)init;
@end

@interface FileUploadInfo : NSObject {
	NSString* _fileName;
	NSString* _filePath;
	NSString* _fileUuid;
	NSData* _fileThmMd5;
	NSData* _fileOriMd5;
	NSData* _firstBytes;
	unsigned long long _fileSize;
	long long _sessionId;
	unsigned _fileType;
}
@property(assign, nonatomic) unsigned fileType;
@property(assign, nonatomic) long long sessionId;
@property(assign, nonatomic) unsigned long long fileSize;
@property(retain, nonatomic) NSData* firstBytes;
@property(retain, nonatomic) NSData* fileOriMd5;
@property(retain, nonatomic) NSData* fileThmMd5;
@property(retain, nonatomic) NSString* fileUuid;
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSString* fileName;
-(id)description;
-(void)dealloc;
@end

@interface FileDownloadInfo : NSObject {
	BOOL _transType;
	long long _destUin;
	NSString* _fileName;
	NSString* _fileUuid;
	NSString* _fileIndex;
	NSData* _fileMd5;
	long long _fileSize;
}
@property(assign, nonatomic) long long fileSize;
@property(retain, nonatomic) NSData* fileMd5;
@property(retain, nonatomic) NSString* fileIndex;
@property(retain, nonatomic) NSString* fileUuid;
@property(retain, nonatomic) NSString* fileName;
@property(assign, nonatomic) long long destUin;
@property(assign, nonatomic) BOOL transType;
-(id)description;
-(void)dealloc;
@end

@interface HttpClientServiceImpl : NSObject <IHttpClientService> {
}
@end

@interface HTTPAuthenticationRequest : NSObject {
	BOOL isBasic;
	BOOL isDigest;
	NSString* base64Credentials;
	NSString* username;
	NSString* realm;
	NSString* nonce;
	NSString* uri;
	NSString* qop;
	NSString* nc;
	NSString* cnonce;
	NSString* response;
}
-(void).cxx_destruct;
-(id)nonquotedSubHeaderFieldValue:(id)value fromHeaderFieldValue:(id)headerFieldValue;
-(id)quotedSubHeaderFieldValue:(id)value fromHeaderFieldValue:(id)headerFieldValue;
-(id)response;
-(id)cnonce;
-(id)nc;
-(id)qop;
-(id)uri;
-(id)nonce;
-(id)realm;
-(id)username;
-(id)base64Credentials;
-(BOOL)isDigest;
-(BOOL)isBasic;
-(id)initWithRequest:(id)request;
@end

@interface HTTPConnection : NSObject <IConnection> {
	dispatch_queue_s* connectionQueue;
	GCDAsyncSocket* asyncSocket;
	HTTPConfig* config;
	BOOL started;
	HTTPMessage* request;
	unsigned numHeaderLines;
	BOOL sentResponseHeaders;
	NSString* nonce;
	long lastNC;
	NSObject<HTTPResponse>* httpResponse;
	NSMutableArray* ranges;
	NSMutableArray* ranges_headers;
	NSString* ranges_boundry;
	int rangeIndex;
	unsigned long long requestContentLength;
	unsigned long long requestContentLengthReceived;
	unsigned long long requestChunkSize;
	unsigned long long requestChunkSizeReceived;
	NSMutableArray* responseDataSizes;
	AsynOpIndexGenerator* requestIdGenerator;
	unsigned nDownloadContentHadSendSize;
	id<IDownloadReqObserver> downloadReqObserver;
}
+(BOOL)hasRecentNonce:(id)nonce;
+(id)generateNonce;
+(void)initialize;
-(void).cxx_destruct;
-(id)ConnectedHost;
-(void)SetDownloadReqObserver:(id)observer;
-(void)die;
-(BOOL)shouldDie;
-(void)finishResponse;
-(void)responseDidAbort:(id)response;
-(void)responseHasAvailableData:(id)data;
-(void)socketDidDisconnect:(id)socket withError:(id)error;
-(void)socket:(id)socket didWriteDataWithTag:(long)tag;
-(void)socket:(id)socket didReadData:(id)data withTag:(long)tag;
-(id)preprocessErrorResponse:(id)response;
-(id)preprocessResponse:(id)response;
-(id)dateAsString:(id)string;
-(void)handleResourceNotFound;
-(void)handleUnknownMethod:(id)method;
-(void)handleInvalidRequest:(id)request;
-(void)handleAuthenticationFailed;
-(void)handleVersionNotSupported:(id)supported;
-(void)finishBody;
-(void)processBodyData:(id)data;
-(void)prepareForBodyWithSize:(unsigned long long)size;
-(id)webSocketForURI:(id)uri;
-(id)httpResponseForMethod:(id)method URI:(id)uri;
-(id)filePathForURI:(id)uri allowDirectory:(BOOL)directory;
-(id)filePathForURI:(id)uri;
-(id)directoryIndexFileNames;
-(void)continueSendingMultiRangeResponseBody;
-(void)continueSendingSingleRangeResponseBody;
-(void)continueSendingStandardResponseBody;
-(unsigned)writeQueueSize;
-(id)ConvertUriToFilePathAccordingMethod:(id)filePathAccordingMethod Uri:(id)uri;
-(unsigned)ComputesponseContentSend;
-(void)NotifyDownloadReqFinish:(BOOL)finish;
-(void)NotifyDownloadContentSendProgressWhenNecessary:(long)necessary;
-(void)sendResponseHeadersAndBody;
-(id)chunkedTransferFooter;
-(id)chunkedTransferSizeLineForLength:(unsigned)length;
-(id)newMultiRangeResponse:(unsigned long long)response;
-(id)newUniRangeResponse:(unsigned long long)response;
-(void)replyToHTTPRequest;
-(id)requestURI;
-(BOOL)parseRangeRequest:(id)request withContentLength:(unsigned long long)contentLength;
-(id)parseGetParams;
-(id)parseParams:(id)params;
-(void)startReadingRequest;
-(void)startConnection;
-(void)stop;
-(void)start;
-(void)addBasicAuthChallenge:(id)challenge;
-(void)addDigestAuthChallenge:(id)challenge;
-(BOOL)isAuthenticated;
-(id)passwordForUser:(id)user;
-(id)realm;
-(BOOL)useDigestAccessAuthentication;
-(BOOL)isPasswordProtected:(id)aProtected;
-(id)sslIdentityAndCertificates;
-(BOOL)isSecureServer;
-(BOOL)expectsRequestBodyFromMethod:(id)method atPath:(id)path;
-(BOOL)supportsMethod:(id)method atPath:(id)path;
-(void)dealloc;
-(id)initWithAsyncSocket:(id)asyncSocket configuration:(id)configuration;
@end

@interface HTTPConfig : NSObject {
	HTTPServer* server;
	NSString* documentRoot;
	dispatch_queue_s* queue;
}
@property(readonly, assign, nonatomic) dispatch_queue_s* queue;
@property(readonly, assign, nonatomic) NSString* documentRoot;
@property(readonly, assign, nonatomic) HTTPServer* server;
-(void).cxx_destruct;
-(void)dealloc;
-(id)initWithServer:(id)server documentRoot:(id)root queue:(dispatch_queue_s*)queue;
-(id)initWithServer:(id)server documentRoot:(id)root;
@end

@interface HTTPMessage : NSObject {
	CFHTTPMessageRef message;
	unsigned nMessageId;
}
@property(assign, nonatomic) unsigned nMessageId;
-(void)setBody:(id)body;
-(id)body;
-(id)messageData;
-(void)setHeaderField:(id)field value:(id)value;
-(id)headerField:(id)field;
-(id)allHeaderFields;
-(int)statusCode;
-(id)url;
-(id)method;
-(id)version;
-(BOOL)isHeaderComplete;
-(BOOL)appendData:(id)data;
-(void)dealloc;
-(id)initResponseWithStatusCode:(int)statusCode description:(id)description version:(id)version;
-(id)initRequestWithMethod:(id)method URL:(id)url version:(id)version;
-(id)initEmptyRequest;
@end

@interface HTTPServer : NSObject <NSNetServiceDelegate> {
	dispatch_queue_s* serverQueue;
	dispatch_queue_s* connectionQueue;
	GCDAsyncSocket* asyncSocket;
	NSString* documentRoot;
	Class connectionClass;
	NSString* interface;
	unsigned short port;
	NSNetService* netService;
	NSString* domain;
	NSString* type;
	NSString* name;
	NSString* publishedName;
	NSDictionary* txtRecordDictionary;
	NSMutableArray* connections;
	NSMutableArray* webSockets;
	NSLock* connectionsLock;
	NSLock* webSocketsLock;
	unsigned nConnectionUpLimit;
	NSMutableSet* m_setOfConnectionObserver;
	BOOL isRunning;
}
+(void)performBonjourBlock:(id)block;
+(void)executeBonjourBlock:(id)block;
+(void)bonjourThread;
+(void)startBonjourThreadIfNeeded;
-(void).cxx_destruct;
-(void)webSocketDidDie:(id)webSocket;
-(void)connectionDidDie:(id)connection;
-(void)netService:(id)service didNotPublish:(id)publish;
-(void)netServiceDidPublish:(id)netService;
-(void)republishBonjour;
-(void)unpublishBonjour;
-(void)publishBonjour;
-(void)socket:(id)socket didAcceptNewSocket:(id)socket2;
-(id)config;
-(void)UnSetConnectionObserver:(id)observer;
-(void)SetConnectionObserver:(id)observer;
-(void)SetConnectionUpLimit:(unsigned)limit;
-(unsigned)numberOfWebSocketConnections;
-(unsigned)numberOfHTTPConnections;
-(void)addWebSocket:(id)socket;
-(BOOL)isRunning;
-(BOOL)stopConnection:(id)connection;
-(void)stop:(BOOL)stop;
-(void)stop;
-(BOOL)start:(id*)start;
-(void)setTXTRecordDictionary:(id)dictionary;
-(id)TXTRecordDictionary;
-(void)setType:(id)type;
-(id)type;
-(void)setName:(id)name;
-(id)publishedName;
-(id)name;
-(void)setDomain:(id)domain;
-(id)domain;
-(void)setPort:(unsigned short)port;
-(unsigned short)listeningPort;
-(unsigned short)port;
-(void)setInterface:(id)interface;
-(id)interface;
-(void)setConnectionClass:(Class)aClass;
-(Class)connectionClass;
-(void)setDocumentRoot:(id)root;
-(id)documentRoot;
-(void)dealloc;
-(id)init;
@end

@interface HTTPAsyncFileResponse : NSObject <HTTPResponse> {
	HTTPConnection* connection;
	NSString* filePath;
	unsigned long long fileLength;
	unsigned long long fileOffset;
	unsigned long long readOffset;
	BOOL aborted;
	NSData* data;
	int fileFD;
	void* readBuffer;
	unsigned readBufferSize;
	unsigned readBufferOffset;
	unsigned readRequestLength;
	dispatch_queue_s* readQueue;
	dispatch_source_s* readSource;
	BOOL readSourceSuspended;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)connectionDidClose;
-(BOOL)isAsynchronous;
-(id)filePath;
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
-(BOOL)openFileIfNeeded;
-(BOOL)openFileAndSetupReadSource;
-(void)cancelReadSource;
-(void)resumeReadSource;
-(void)pauseReadSource;
-(void)processReadBuffer;
-(void)abort;
-(id)initWithFilePath:(id)filePath forConnection:(id)connection;
@end

@interface HTTPDataResponse : NSObject <HTTPResponse> {
	unsigned offset;
	NSData* data;
}
-(void).cxx_destruct;
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
-(void)dealloc;
-(id)initWithData:(id)data;
@end

@interface HTTPDynamicFileResponse : HTTPAsyncFileResponse {
	NSData* separator;
	NSDictionary* replacementDict;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)processReadBuffer;
-(BOOL)isDone;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)contentLength;
-(BOOL)isChunked;
-(id)initWithFilePath:(id)filePath forConnection:(id)connection separator:(id)separator replacementDictionary:(id)dictionary;
@end

@interface HTTPFileResponse : NSObject <HTTPResponse> {
	HTTPConnection* connection;
	NSString* filePath;
	unsigned long long fileLength;
	unsigned long long fileOffset;
	BOOL aborted;
	int fileFD;
	void* buffer;
	unsigned bufferSize;
}
-(void).cxx_destruct;
-(void)dealloc;
-(id)filePath;
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
-(BOOL)openFileIfNeeded;
-(BOOL)openFile;
-(void)abort;
-(id)initWithFilePath:(id)filePath forConnection:(id)connection;
@end

@interface HTTPRedirectResponse : NSObject <HTTPResponse> {
	NSString* redirectPath;
}
-(void).cxx_destruct;
-(void)dealloc;
-(int)status;
-(id)httpHeaders;
-(BOOL)isDone;
-(id)readDataOfLength:(unsigned)length;
-(void)setOffset:(unsigned long long)offset;
-(unsigned long long)offset;
-(unsigned long long)contentLength;
-(id)initWithPath:(id)path;
@end

@interface WebSocket : NSObject {
	dispatch_queue_s* websocketQueue;
	HTTPMessage* request;
	GCDAsyncSocket* asyncSocket;
	NSData* term;
	BOOL isStarted;
	BOOL isOpen;
	BOOL isVersion76;
	id delegate;
@private
	BOOL isRFC6455;
	BOOL nextFrameMasked;
	unsigned nextOpCode;
	NSData* maskingKey;
}
@property(readonly, assign, nonatomic) dispatch_queue_s* websocketQueue;
@property(assign) id delegate;
+(BOOL)isRFC6455Request:(id)request;
+(BOOL)isVersion76Request:(id)request;
+(BOOL)isWebSocketRequest:(id)request;
-(void).cxx_destruct;
-(void)socketDidDisconnect:(id)socket withError:(id)error;
-(void)socket:(id)socket didReadData:(id)data withTag:(long)tag;
-(BOOL)isValidWebSocketFrame:(unsigned char)frame;
-(void)didClose;
-(void)didReceiveMessage:(id)message;
-(void)sendMessage:(id)message;
-(void)didOpen;
-(void)sendResponseBody:(id)body;
-(id)processKey:(id)key;
-(void)sendResponseHeaders;
-(id)secWebSocketKeyResponseHeaderValue;
-(id)locationResponseHeaderValue;
-(id)originResponseHeaderValue;
-(void)readRequestBody;
-(void)stop;
-(void)start;
-(void)dealloc;
-(id)initWithRequest:(id)request socket:(id)socket;
@end

@interface StartServerResult : NSObject {
	int m_nSessionId;
	BOOL m_bStartSuc;
	NSError* m_err;
	NSString* m_strBindIP;
	unsigned m_nBindPort;
}
@property(assign, nonatomic) unsigned m_nBindPort;
@property(retain, nonatomic) NSString* m_strBindIP;
@property(retain, nonatomic) NSError* m_err;
@property(assign, nonatomic) BOOL m_bStartSuc;
@property(assign, nonatomic) int m_nSessionId;
@end

@interface StopServerResult : NSObject {
	int m_nSessionId;
	BOOL m_bStopSuc;
}
@property(assign, nonatomic) BOOL m_bStopSuc;
@property(assign, nonatomic) int m_nSessionId;
@end

@interface ServerState : NSObject {
	int m_enumState;
}
@property(assign, nonatomic) int m_enumState;
-(id)init;
@end

@interface HttpServerServiceImpl : NSObject <IHttpServerService> {
	HTTPServer* m_HttpServer;
	ServerState* m_ServerState;
	int m_CurSession;
	NSString* m_strHttpServerIP;
	AsynOpIndexGenerator* m_SessionIdGenerator;
	NSOperationQueue* m_ServerOpQue;
	NSThread* m_CallBackThread;
	NSMutableSet* m_setOfServerStateObserver;
}
-(BOOL)AsyncStopConnection:(id)connection Error:(id*)error;
-(BOOL)ServerIsRunning;
-(void)UnSetConnectionObserver:(id)observer;
-(void)SetConnectionObserver:(id)observer;
-(BOOL)SetConnectionUpLimit:(int)limit;
-(BOOL)SetConnectionClass:(Class)aClass;
-(void)UnSetHttpStateObserver:(id)observer;
-(void)SetHttpStateObserver:(id)observer;
-(BOOL)SyncStop:(int)stop Error:(id*)error;
-(BOOL)SyncStart:(id*)start SessionId:(int*)anId BindIP:(id*)ip BindPort:(int*)port;
-(BOOL)AsyncStop:(int)stop Error:(id*)error;
-(int)AsyncStart:(id*)start;
-(BOOL)SetDocumentRoot:(id)root;
-(void)dealloc;
-(id)init;
-(void)NotifyServerIPChanged:(int)changed;
-(BOOL)IsWifiChangeWhenServerRunning:(int*)running;
-(void)RecordIP:(id)ip;
-(void)willEnterForeground:(id)foreground;
-(id)localWiFiIPAddress;
-(void)NotifyStopServerResult:(id)result;
-(void)NotifyStartServerResult:(id)result;
-(void)StopServer:(id)server;
-(void)StartServer:(id)server;
-(id)CarryStopServer;
-(id)CarryStartServer;
-(BOOL)IsServerAtCanStopState:(id*)canStopState;
-(BOOL)IsServerAtCanStartState:(id*)canStartState;
@end

@interface GCDAsyncSocketPreBuffer : NSObject {
	char* preBuffer;
	unsigned long preBufferSize;
	char* readPointer;
	char* writePointer;
}
-(void)reset;
-(void)didWrite:(unsigned long)write;
-(void)getWriteBuffer:(char**)buffer availableSpace:(unsigned*)space;
-(char*)writeBuffer;
-(unsigned long)availableSpace;
-(void)didRead:(unsigned long)read;
-(void)getReadBuffer:(char**)buffer availableBytes:(unsigned*)bytes;
-(char*)readBuffer;
-(unsigned long)availableBytes;
-(void)ensureCapacityForWrite:(unsigned long)write;
-(void)dealloc;
-(id)initWithCapacity:(unsigned long)capacity;
@end

@interface GCDAsyncReadPacket : NSObject {
	NSMutableData* buffer;
	unsigned startOffset;
	unsigned bytesDone;
	unsigned maxLength;
	double timeout;
	unsigned readLength;
	NSData* term;
	BOOL bufferOwner;
	unsigned originalBufferLength;
	long tag;
}
-(void).cxx_destruct;
-(int)searchForTermAfterPreBuffering:(long)termAfterPreBuffering;
-(unsigned)readLengthForTermWithPreBuffer:(id)preBuffer found:(BOOL*)found;
-(unsigned)readLengthForTermWithHint:(unsigned)hint shouldPreBuffer:(BOOL*)buffer;
-(unsigned)readLengthForNonTermWithHint:(unsigned)hint;
-(unsigned)optimalReadLengthWithDefault:(unsigned)aDefault shouldPreBuffer:(BOOL*)buffer;
-(void)ensureCapacityForAdditionalDataOfLength:(unsigned)length;
-(id)initWithData:(id)data startOffset:(unsigned)offset maxLength:(unsigned)length timeout:(double)timeout readLength:(unsigned)length5 terminator:(id)terminator tag:(long)tag;
@end

@interface GCDAsyncWritePacket : NSObject {
	NSData* buffer;
	unsigned bytesDone;
	long tag;
	double timeout;
}
-(void).cxx_destruct;
-(id)initWithData:(id)data timeout:(double)timeout tag:(long)tag;
@end

@interface GCDAsyncSpecialPacket : NSObject {
	NSDictionary* tlsSettings;
}
-(void).cxx_destruct;
-(id)initWithTLSSettings:(id)tlssettings;
@end

@interface GCDAsyncSocket : NSObject {
	unsigned flags;
	unsigned short config;
	id delegate;
	dispatch_queue_s* delegateQueue;
	int socket4FD;
	int socket6FD;
	int connectIndex;
	NSData* connectInterface4;
	NSData* connectInterface6;
	dispatch_queue_s* socketQueue;
	dispatch_source_s* accept4Source;
	dispatch_source_s* accept6Source;
	dispatch_source_s* connectTimer;
	dispatch_source_s* readSource;
	dispatch_source_s* writeSource;
	dispatch_source_s* readTimer;
	dispatch_source_s* writeTimer;
	NSMutableArray* readQueue;
	NSMutableArray* writeQueue;
	GCDAsyncReadPacket* currentRead;
	GCDAsyncWritePacket* currentWrite;
	unsigned long socketFDBytesAvailable;
	GCDAsyncSocketPreBuffer* preBuffer;
	XXStruct_4pnlqD streamContext;
	CFReadStreamRef readStream;
	CFWriteStreamRef writeStream;
	SSLContextRef sslContext;
	GCDAsyncSocketPreBuffer* sslPreBuffer;
	unsigned long sslWriteCachedLength;
	long sslErrCode;
	id userData;
}
+(id)ZeroData;
+(id)LFData;
+(id)CRData;
+(id)CRLFData;
+(BOOL)getHost:(id*)host port:(unsigned short*)port fromAddress:(id)address;
+(unsigned short)portFromAddress:(id)address;
+(id)hostFromAddress:(id)address;
+(unsigned short)portFromSockaddr6:(const sockaddr_in6*)sockaddr6;
+(unsigned short)portFromSockaddr4:(const sockaddr_in*)sockaddr4;
+(id)hostFromSockaddr6:(const sockaddr_in6*)sockaddr6;
+(id)hostFromSockaddr4:(const sockaddr_in*)sockaddr4;
+(void)unscheduleCFStreams:(id)streams;
+(void)scheduleCFStreams:(id)streams;
+(void)cfstreamThread;
+(void)startCFStreamThreadIfNeeded;
-(void).cxx_destruct;
-(BOOL)enableBackgroundingOnSocketWithCaveat;
-(BOOL)enableBackgroundingOnSocket;
-(BOOL)enableBackgroundingOnSocketWithCaveat:(BOOL)caveat;
-(CFWriteStreamRef)writeStream;
-(CFReadStreamRef)readStream;
-(int)socket6FD;
-(int)socket4FD;
-(int)socketFD;
-(void)performBlock:(id)block;
-(BOOL)openStreams;
-(void)removeStreamsFromRunLoop;
-(BOOL)addStreamsToRunLoop;
-(BOOL)registerForStreamCallbacksIncludingReadWrite:(BOOL)streamCallbacksIncludingReadWrite;
-(BOOL)createReadAndWriteStream;
-(void)cf_startTLS;
-(void)cf_abortSSLHandshake:(id)handshake;
-(void)cf_finishSSLHandshake;
-(void)ssl_continueSSLHandshake;
-(void)ssl_startTLS;
-(long)sslWriteWithBuffer:(const void*)buffer length:(unsigned*)length;
-(long)sslReadWithBuffer:(void*)buffer length:(unsigned*)length;
-(void)maybeStartTLS;
-(void)startTLS:(id)tls;
-(void)doWriteTimeoutWithExtension:(double)extension;
-(void)doWriteTimeout;
-(void)setupWriteTimerWithTimeout:(double)timeout;
-(void)endCurrentWrite;
-(void)completeCurrentWrite;
-(void)doWriteData;
-(void)maybeDequeueWrite;
-(float)progressOfWriteReturningTag:(long*)writeReturningTag bytesDone:(unsigned*)done total:(unsigned*)total;
-(void)writeData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)doReadTimeoutWithExtension:(double)extension;
-(void)doReadTimeout;
-(void)setupReadTimerWithTimeout:(double)timeout;
-(void)endCurrentRead;
-(void)completeCurrentRead;
-(void)doReadEOF;
-(void)doReadData;
-(void)flushSSLBuffers;
-(void)maybeDequeueRead;
-(float)progressOfReadReturningTag:(long*)readReturningTag bytesDone:(unsigned*)done total:(unsigned*)total;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout tag:(long)tag;
-(void)resumeWriteSource;
-(void)suspendWriteSource;
-(void)resumeReadSource;
-(void)suspendReadSource;
-(BOOL)usingSecureTransportForTLS;
-(BOOL)usingCFStreamForTLS;
-(void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)newlyConnectedSocket;
-(void)getInterfaceAddress4:(id*)a4 address6:(id*)a6 fromDescription:(id)description port:(unsigned short)port;
-(BOOL)isSecure;
-(BOOL)isIPv6;
-(BOOL)isIPv4;
-(id)localAddress;
-(id)connectedAddress;
-(unsigned short)localPortFromSocket6:(int)socket6;
-(unsigned short)localPortFromSocket4:(int)socket4;
-(id)localHostFromSocket6:(int)socket6;
-(id)localHostFromSocket4:(int)socket4;
-(unsigned short)connectedPortFromSocket6:(int)socket6;
-(unsigned short)connectedPortFromSocket4:(int)socket4;
-(id)connectedHostFromSocket6:(int)socket6;
-(id)connectedHostFromSocket4:(int)socket4;
-(unsigned short)localPort6;
-(unsigned short)localPort4;
-(id)localHost6;
-(id)localHost4;
-(unsigned short)connectedPort6;
-(unsigned short)connectedPort4;
-(id)connectedHost6;
-(id)connectedHost4;
-(unsigned short)localPort;
-(id)localHost;
-(unsigned short)connectedPort;
-(id)connectedHost;
-(BOOL)isConnected;
-(BOOL)isDisconnected;
-(id)otherError:(id)error;
-(id)connectionClosedError;
-(id)writeTimeoutError;
-(id)readTimeoutError;
-(id)readMaxedOutError;
-(id)connectTimeoutError;
-(id)sslError:(long)error;
-(id)errnoError;
-(id)errnoErrorWithReason:(id)reason;
-(id)gaiError:(int)error;
-(id)badParamError:(id)error;
-(id)badConfigError:(id)error;
-(void)maybeClose;
-(void)disconnectAfterReadingAndWriting;
-(void)disconnectAfterWriting;
-(void)disconnectAfterReading;
-(void)disconnect;
-(void)closeWithError:(id)error;
-(void)doConnectTimeout;
-(void)endConnectTimeout;
-(void)startConnectTimeout:(double)timeout;
-(void)didNotConnect:(int)connect error:(id)error;
-(void)didConnect:(int)connect;
-(BOOL)connectWithAddress4:(id)address4 address6:(id)a6 error:(id*)error;
-(void)lookup:(int)lookup didFail:(id)fail;
-(void)lookup:(int)lookup didSucceedWithAddress4:(id)address4 address6:(id)a6;
-(void)lookup:(int)lookup host:(id)host port:(unsigned short)port;
-(BOOL)connectToAddress:(id)address viaInterface:(id)interface withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port viaInterface:(id)interface withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port error:(id*)error;
-(BOOL)preConnectWithInterface:(id)interface error:(id*)error;
-(BOOL)doAccept:(int)accept;
-(BOOL)acceptOnInterface:(id)interface port:(unsigned short)port error:(id*)error;
-(BOOL)acceptOnPort:(unsigned short)port error:(id*)error;
-(void)setUserData:(id)data;
-(id)userData;
-(void)setPreferIPv4OverIPv6:(BOOL)a6;
-(BOOL)isIPv4PreferredOverIPv6;
-(void)setIPv6Enabled:(BOOL)enabled;
-(BOOL)isIPv6Enabled;
-(void)setIPv4Enabled:(BOOL)enabled;
-(BOOL)isIPv4Enabled;
-(void)setAutoDisconnectOnClosedReadStream:(BOOL)stream;
-(BOOL)autoDisconnectOnClosedReadStream;
-(void)synchronouslySetDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue;
-(void)setDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue;
-(void)setDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue synchronously:(BOOL)synchronously;
-(void)getDelegate:(id*)delegate delegateQueue:(dispatch_queue_s**)queue;
-(void)synchronouslySetDelegateQueue:(dispatch_queue_s*)queue;
-(void)setDelegateQueue:(dispatch_queue_s*)queue;
-(void)setDelegateQueue:(dispatch_queue_s*)queue synchronously:(BOOL)synchronously;
-(dispatch_queue_s*)delegateQueue;
-(void)synchronouslySetDelegate:(id)delegate;
-(void)setDelegate:(id)delegate;
-(void)setDelegate:(id)delegate synchronously:(BOOL)synchronously;
-(id)delegate;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue socketQueue:(dispatch_queue_s*)queue3;
-(id)initWithDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue;
-(id)initWithSocketQueue:(dispatch_queue_s*)socketQueue;
-(id)init;
@end

@interface HttpServiceImpl : NSObject <IHttpService> {
	HttpServerServiceImpl* m_HttpServerServiceImpl;
	HttpClientServiceImpl* m_HttpClientServiceImpl;
}
-(id)HttpServerService;
-(id)HttpClientService;
-(void)dealloc;
-(id)init;
@end

@interface AsynOpIndexGenerator : NSObject {
	int m_nCurOpIndex;
}
+(id)Instance;
-(int)GenerateNextOpIndex;
-(id)init;
@end

@interface NeedCallbackOperation : NonConcurrentOperation {
	NSThread* m_callbackThread;
	BOOL m_bHadEnterCallbackState;
	NSLock* m_LockOfCallbackState;
}
-(BOOL)cancelOp;
-(void)CallbackWithSelector:(SEL)selector selectorOwner:(id)owner withObject:(id)object waitUntilDone:(BOOL)done;
-(BOOL)SetCallbackThread:(id)thread;
-(void)dealloc;
-(id)initWithTarget:(id)target selector:(SEL)selector object:(id)object;
@end

@interface NonConcurrentOperation : NSOperation {
	id m_target;
	SEL m_sel;
	id m_arg;
}
@property(retain, nonatomic) id arg;
-(void)main;
-(void)cancel;
-(void)dealloc;
-(id)initWithTarget:(id)target selector:(SEL)selector object:(id)object;
-(void)unInitMem;
@end

@interface simpleTask : NSObject {
@private
	NSInvocation* invoke;
	NSObject* result;
}
@property(retain, nonatomic) NSObject* result;
@property(retain, nonatomic) NSInvocation* invoke;
+(id)taskWithInvocation:(id)invocation;
-(void)dealloc;
-(id)initWithInvocation:(id)invocation;
@end

@interface Task : NSObject {
	int m_nSeqOfTask;
	NSInvocation* m_oInvocation;
	id<ITaskStateObserver> m_oTaskStateObserver;
}
@property(retain, nonatomic) id<ITaskStateObserver> m_oTaskStateObserver;
@property(retain, nonatomic) NSInvocation* m_oInvocation;
@property(assign, nonatomic) int m_nSeqOfTask;
-(void)dealloc;
@end

@interface TaskThread : NSThread {
	CFRunLoopSourceRef m_runLoopSource;
	CFRunLoopRef m_selfRunLoop;
	NSMutableArray* m_arrOfTask;
	AsynOpIndexGenerator* m_opIndexGenerator;
	int m_nCurSeq;
@private
	bool m_bStart;
}
-(void)main;
-(void)fired;
-(BOOL)CancelTask:(int)task;
-(void)asyncTask:(id)task;
-(void)syncTask:(id)task;
-(void)doSimpleInvoke:(id)invoke;
-(void)PostTask:(id)task;
-(id)CreateTask:(int)task Invocation:(id)invocation TaskStateObserver:(id)observer;
-(void)Stop;
-(int)GenTaskSeq;
-(void)UnhookFromSelfRunLoop;
-(void)HookIntoSelfRunLoop;
-(void)DestroyRunLoopSource;
-(void)CreateRunLoopSource;
-(void)UnPrepare;
-(void)Prepare;
-(void)destroyTaskArray;
-(void)initTaskArray;
-(void)dealloc;
-(id)init;
@end

@interface CacaAnimationButton : UIAnimationDirector <UIAnimationDirectorDelegate> {
	UIButton* _collectButton;
	id<CacaAnimationButtonDelegate> _CacaDelegate;
	UIView* _buttonBorderImage;
}
@property(assign, nonatomic) id<CacaAnimationButtonDelegate> CacaDelegate;
-(void)shouldRegisterMacros:(id)macros;
-(void)registerButtonBorderImage:(id)image;
-(void)buttonClicked;
-(void)showCollectButton;
-(void)hideCollectButton;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)setButtonEnable:(BOOL)enable;
-(void)startAnimation;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CacaBackgroundWaveAnimation : UIView {
	UIImageView* _firstAnimationView;
	UIImageView* _secondAnimationView;
	BOOL _stop;
}
-(void)dealloc;
-(void)StopAnimation;
-(void)StopSecondAnimation;
-(void)StartSecondAnimation;
-(void)WaveViewAnimationEnded;
-(void)StartAnimation;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CacaUserView : UIView {
	QQAsynHeadImageView* _headView;
	UIButton* _deleteView;
	UILabel* _nameView;
	CCacaUserModel* _user;
	int _state;
	id<ICacaUserView> _delegate;
}
@property(assign, nonatomic) id<ICacaUserView> delegate;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) CCacaUserModel* user;
-(void)getNickFinishCallBack:(id)back;
-(void)didAdd;
-(void)didPortraitTouched;
-(void)deleteButtonClicked;
-(void)dealloc;
-(id)initWithUser:(id)user allowEdit:(BOOL)edit Add:(BOOL)add;
@end

@interface CacaUserScrollView : QQAnimateLayoutScrollView <ICacaUserView> {
	BOOL _allowEdit;
	id<ICacaUserScrollView> _owner;
	CGPoint _animationInitialPoint;
}
@property(assign, nonatomic) CGPoint animationInitialPoint;
@property(assign, nonatomic) id<ICacaUserScrollView> owner;
@property(assign, nonatomic) BOOL allowEdit;
-(void)didAdd;
-(void)didUserPortraitTouched:(id)touched;
-(void)didUserRemoved:(id)removed;
-(void)clear;
-(void)deleteUser:(id)user;
-(void)updateList:(id)list;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CacaMainViewController : QQViewController <CCacaGetInfoDelegate, CCacaMainViewGetTimerDelegate, CacaQuitDiscussUinToControllerDelegate, ICacaDiscussGroupUpdateResult> {
	UIButton* _senderButton;
	UIButton* _receiverButton;
	UIImageView* _tipsView;
	UIImageView* _backgroundView;
	int _identityType;
	long long _discussUin;
	CacaRootAnimationView* _roomListView;
	UIActivityIndicatorView* _actionView;
	QQActionAnimation* _animation;
	CCacaMainViewTimer* _timer;
	unsigned _waitCount;
}
-(void)UpdateRoomListView:(id)view;
-(void)GotoCacaDiscussRoomViewController:(id)controller;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)QuitDiscussUinToController:(long long)controller;
-(void)CCacaGetRespRegister:(id)aRegister didRecieveMsg:(CIMEngineMsgStruct)msg;
-(void)CCacaGetRespQuitDiscuss:(id)discuss didRecieveMsg:(CIMEngineMsgStruct)msg;
-(BOOL)RequestVoiceID;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didCollectAgainTimeout;
-(void)ReceiverFriend:(id)aFriend;
-(void)CollectFriend:(id)aFriend;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)viewDidUnload;
-(void)dealloc;
-(id)init;
@end

@interface CacaReceiverViewController : QQViewController <IFaceObserver, CCacaGetInfoDelegate, CCacaReceiverViewGetTimerDelegate> {
	UIImageView* _headView;
	UIImageView* _headBackgroundView;
	UIImageView* _backgroundView;
	UILabel* _secondTipsLabel;
	UILabel* _firstTipsLabel;
	RecordController* _recordController;
	CacaBackgroundWaveAnimation* _backgroundAnimationView;
	CCacaReceiverViewTimer* _timer;
	BOOL _isRecording;
	int _identityType;
	int _reportIdCounter;
	int _rdmSeq;
	BOOL _disappear;
}
+(void)SendDecodeResult:(char*)result Size:(unsigned short)size;
-(void)reSetLeftButtonTitle;
-(void)notifyLoadHeadImageFinished:(id)finished;
-(void)notifyGetHeadImageSucc:(id)succ;
-(void)CCacaGetRespReport:(id)report didRecieveMsg:(CIMEngineMsgStruct)msg;
-(id)BytesToHex:(char*)hex Length:(int)length;
-(void)reportUnResponse_RDM;
-(void)reportUnResponse;
-(void)StartReportIDTimer;
-(void)DecodeEnd:(id)end;
-(void)ReportDecodeFail;
-(void)ReportDecodeSuccess;
-(void)StopAnimation;
-(void)StartAnimation;
-(void)VoiceDecodeEnd:(id)end;
-(void)VoiceDecodeBegin:(id)begin;
-(void)StopRecordData:(id)data;
-(void)StartRecordData:(id)data;
-(void)closeDeviceEnterBackground:(id)background;
-(void)openDeviceEnterForeground:(id)foreground;
-(void)EnableLeftButton;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(id)CacaGetHeadImage;
-(void)secondLeftClick:(id)click;
-(void)UnsetAudioSession;
-(void)SetAudioSession;
-(void)stopRecord:(BOOL)record;
-(void)startRecord;
-(void)loadView;
-(void)viewDidUnload;
-(void)dealloc;
-(id)init;
@end

@interface CacaRoomViewController : QQViewController <CCacaGetInfoDelegate, CCacaRoomViewGetTimerDelegate, ICacaUserScrollView, CacaAnimationButtonDelegate, UIAlertViewDelegate> {
	NSMutableArray* _selectReceivers;
	NSMutableArray* _discussMembers;
	UILabel* _tipsView;
	UIImageView* _backgroundView;
	UIImageView* _tipsBackgroundView;
	CacaUserScrollView* _CacaUserScrollView;
	CacaAnimationButton* _buttonAnimationView;
	PlayController* _playController;
	CCacaUserModel* _deleteModel;
	NSString* _roomName;
	CCacaRoomViewTimer* _timer;
	int _identityType;
	BOOL _Add;
	BOOL _disappear;
	BOOL _enterBack;
	BOOL _eightMinu;
	BOOL _dismiss;
	BOOL _updateQuit;
	BOOL _colorChange;
	BOOL _voiceChange;
	BOOL _first;
	BOOL _session;
	long long _discussUin;
	id<CacaRoomSelectMemberDelegate> _delegate;
}
@property(retain, nonatomic) NSMutableArray* discussMembers;
@property(assign, nonatomic) id<CacaRoomSelectMemberDelegate> delegate;
-(void)reSetLeftButtonTitle;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)ReceiverToSpeaker;
-(void)didUserPortraitTouched:(id)touched;
-(void)didUserRemoved:(id)removed;
-(void)updateRightBtnState:(int)state;
-(void)collectButtonClicked;
-(void)ShowTipsWhenCollectNobody;
-(void)sendVoiceIDAction:(char*)action withLength:(int)length;
-(void)DetactVoiceVolume;
-(void)UpdateFriendList:(vector<AnyToGroup::UserInfo, std::allocator<AnyToGroup::UserInfo> >)list;
-(void)SecondLeftButtonAction:(id)action;
-(void)createButtonAction:(id)action;
-(void)DecodeReqNotifyChange:(CIMEngineMsgStruct)change;
-(void)CCacaGetRespUpdateUserList:(id)list didRecieveMsg:(CIMEngineMsgStruct)msg;
-(void)CCacaGetRespUserDel:(id)del didRecieveMsg:(CIMEngineMsgStruct)msg;
-(void)DecodeReqNotifyDiscussChange:(CIMEngineMsgStruct)change;
-(void)didSessionTimeout;
-(void)didUpdateUserListTimeOut;
-(void)didPlaybackTimeout;
-(void)VoiceVolumeChange:(id)change;
-(void)EnableCollection:(id)collection;
-(void)DisableCollection:(id)collection;
-(void)closeDeviceEnterBackground:(id)background;
-(void)openDeviceEnterForeground:(id)foreground;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)UnsetAudioSession;
-(void)SetAudioSession;
-(void)didReceiveMemoryWarning;
-(void)ShowCurrentAvatar;
-(void)ReturnRightbuttonColor;
-(void)ChangeRightbuttonColor;
-(void)loadView;
-(void)dealloc;
-(id)initWithSign:(BOOL)sign DiscussUin:(long long)uin RoomName:(id)name;
@end

@interface CCacaEngine : NSObject <CIMGetCacaRespDelegate> {
@private
	id<CCacaGetInfoDelegate> _getCacaInfoDelegate;
}
@property(assign, nonatomic) id<CCacaGetInfoDelegate> getCacaInfoDelegate;
+(void)exitInstance;
+(id)GetInstance;
-(void)createCacaDiscussgroupChat:(id)chat;
-(void)CCacaGetResp:(id)resp didRecieveMsg:(CIMEngineMsgStruct)msg;
-(void)RequestDeleteUser:(vector<char, std::allocator<char> >*)user uin:(long long)uin;
-(void)RequestgetCacaAddFriendReq:(int)req DiscussUin:(long long)uin FriendAdd:(id)add;
-(void)RequestQuitCacaDiscussReq:(long long)req;
-(void)RequestgetCacaRegisterReq:(int)req DiscussUin:(long long)uin;
-(void)requestgetCacaReportReq:(vector<char, std::allocator<char> >*)req TYPE:(int)type;
-(void)requestgetCacaUserListReq:(vector<char, std::allocator<char> >*)req SEQ:(unsigned)seq;
-(void)requestgetCacaReportForDeleteReq:(vector<char, std::allocator<char> >*)deleteReq;
-(void)dealloc;
-(id)init;
@end

@interface CCacaDiscussRoomViewTimer : NSObject {
	NSTimer* _badNetworkStateTimer;
	NSTimer* _updateCacaDiscussMemTimer;
	id<CCacaDiscussRoomGetTimerDelegate> _getTimerDelegate;
}
@property(assign, nonatomic) id<CCacaDiscussRoomGetTimerDelegate> getTimerDelegate;
-(void)stopBadNetworkTimer;
-(void)startBadNetworkTimer;
-(void)badNetworkTimeout;
-(void)stopUpdateCacaDiscussMemTimer;
-(void)startUpdateCacaDiscussMemTimer;
-(void)updateCacaDiscussMemTimeout;
-(void)dealloc;
-(id)init;
@end

@interface CCacaReceiverViewTimer : NSObject {
	NSTimer* _reportIDTimer;
	id<CCacaReceiverViewGetTimerDelegate> _getTimerDelegate;
}
@property(assign, nonatomic) id<CCacaReceiverViewGetTimerDelegate> getTimerDelegate;
-(void)stopReportIDTimer;
-(void)startReportIDTimer;
-(void)reportIDTimeout;
-(void)dealloc;
-(id)init;
@end

@interface CCacaRoomViewTimer : NSObject {
	NSTimer* _sessionTimer;
	NSTimer* _updateUserListTimer;
	NSTimer* _playbackTimer;
	id<CCacaRoomViewGetTimerDelegate> _getTimerDelegate;
}
@property(assign, nonatomic) id<CCacaRoomViewGetTimerDelegate> getTimerDelegate;
-(void)stopPlaybackTimer;
-(void)startPlaybackTimer;
-(void)playbackTimeout;
-(void)stopUpdateTimer;
-(void)startUpdateTimer;
-(void)updateTimeout;
-(void)dealloc;
-(id)init;
@end

@interface CCacaMainViewTimer : NSObject {
	NSTimer* _collectAgainTimer;
	id<CCacaMainViewGetTimerDelegate> _getTimerDelegate;
}
@property(assign, nonatomic) id<CCacaMainViewGetTimerDelegate> getTimerDelegate;
-(void)stopCollectAgainTimer;
-(void)startCollectAgainTimer;
-(void)collectAgainTimeout;
-(void)dealloc;
-(id)init;
@end

@interface DataProcess : NSObject {
	BOOL _bRunning;
	BOOL _bExiting;
	NSCondition* _dataCondition;
	NSCondition* _exitCondition;
	vector<_dataElement* , std::allocator<_dataElement* > >* _dataList;
	MediaDecoder* _decoder;
@private
	id _clientData;
}
@property(assign, nonatomic) id clientData;
@property(assign) MediaDecoder* decoder;
@property(assign) vector<_dataElement* , std::allocator<_dataElement* > >* dataList;
@property(retain, nonatomic) NSCondition* exitCondition;
@property(retain, nonatomic) NSCondition* dataCondition;
@property(assign) BOOL bExiting;
@property(assign) BOOL bRunning;
+(char*)getDisplayData:(int*)data;
+(id)get;
-(void)addData:(char*)data withLength:(int)length;
-(void)dataProcessLoop;
-(void)processData:(dataElement*)data;
-(int)analyseData:(char*)data withLength:(int)length;
-(dataElement*)getDataElement;
-(void)setClientDataText:(id)text;
-(void)stop;
-(void)start;
-(void)dealloc;
-(void)freeData;
-(id)init;
@end

@interface PlayController : NSObject {
@private
	SoundGen* _genSound;
	VoicePlusPlayer* _audioPlayer;
	double _mSoundCoeff;
}
@property(assign, nonatomic) double mSoundCoeff;
@property(assign, nonatomic) VoicePlusPlayer* audioPlayer;
@property(assign, nonatomic) SoundGen* genSound;
-(void)makeTheSoundTail:(int)tail;
-(void)dealloc;
-(void)playSoundWithData:(char*)data withLength:(int)length;
-(void)playSoundWithString:(id)string;
-(void)makePlay:(char*)play withLength:(int)length;
-(void)initAudioPlayer;
-(id)init;
@end

@interface RecordController : NSObject {
@private
	id _clientData;
	VoicePlusRecorder* _audioRecorder;
	DataProcess* _dataProcessor;
}
@property(retain, nonatomic) DataProcess* dataProcessor;
@property(assign, nonatomic) VoicePlusRecorder* audioRecorder;
@property(assign, nonatomic) id clientData;
-(void)stopRecord:(BOOL)record;
-(void)startRecord;
-(void)dealloc;
-(id)init;
@end

@interface CCacaUserModel : NSObject {
	long long _uin;
	NSString* _nickName;
	int _state;
	id _tmp;
}
@property(assign, nonatomic) id tmp;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSString* nickName;
@property(assign, nonatomic) long long uin;
-(id)sUin;
-(void)dealloc;
-(id)init;
@end

@interface ActionBaseItem : NSObject {
	UIImage* _icon;
	NSString* _title;
	id<ActionItemDelegate> _itemDelegate;
}
@property(assign, nonatomic) id<ActionItemDelegate> itemDelegate;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) UIImage* icon;
+(id)getTopViewController;
+(id)actionItemWithDelegate:(id)delegate;
-(void)onItemClick;
-(void)dealloc;
-(id)initWithItemDelegate:(id)itemDelegate;
@end

@interface PhotoBrowserBaseViewContoller : UIViewController <UIActionSheetDelegate, PhotoBrowserViewDelegate, ActionItemDelegate> {
	int _initPage;
	BOOL _isControlHidden;
	BOOL _isNavigationBarHidden;
	BOOL _isStatusBarHidden;
	BOOL _isMsgBarShow;
	int _lastStatusBarStyle;
	Class _photoClass;
	UIBarButtonItem* _leftButton;
	UIBarButtonItem* _rightButton;
	UINavigationBar* _navigationBar;
	PhotoBrowserView* _pagePhotosView;
	UIView* _toolbarView;
	NSArray* _itemList;
	NSMutableArray* _photoList;
	UIActionSheet* _actionSheet;
	UIWindow* _maskView;
	UIImage* _previewImage;
	CGRect _sourceClipRect;
	id<PhotoBrowserViewControllerDelegate> _photoBrowserDelegate;
	UIViewController* _lastViewController;
}
@property(retain, nonatomic) id<PhotoBrowserViewControllerDelegate> photoBrowserDelegate;
@property(assign, nonatomic) CGRect sourceClipRect;
-(void)hidePhotoBrowserAnimationDidStop:(id)hidePhotoBrowserAnimation finished:(id)finished context:(void*)context;
-(void)hidePhotoBrowserIfNotLongImage;
-(void)hidePhotoBrowserIfLongImage;
-(void)hidePhotoBrowser;
-(void)showPhotoBrowserAnimationDidStop:(id)showPhotoBrowserAnimation finished:(id)finished context:(void*)context;
-(void)showPhotoBrowserInViewController:(id)viewController;
-(CGRect)browserGetThumbImageShowRect:(id)rect thumbRegion:(CGRect)region inThumbRect:(CGRect)thumbRect;
-(id)createPhotoBrowserNavigationController;
-(CGRect)getOriginalRectForPhoto:(id)photo atIndex:(int)index thumbRegion:(CGRect*)region clipRect:(CGRect*)rect;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)handleUIApplicationDidEnterBackgroundNotification:(id)handleUIApplication;
-(void)deleteCurrentPhoto;
-(id)getCurrentPhoto;
-(int)getCurrentPhotoPageNumber;
-(id)getCurrentViewController;
-(id)getCurrentImage;
-(id)getCurrentImagePath;
-(void)onRightButtonClick:(id)click;
-(void)onLeftButtonClick:(id)click;
-(id)getToolbarItems;
-(id)getToolbar;
-(void)setNavigationBarHidden:(BOOL)hidden;
-(void)setControlsHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(CGRect)frameForToolbarAtOrientation:(int)orientation;
-(CGRect)frameForNavigationBarAtOrientation:(int)orientation;
-(CGRect)frameForPagingScrollView;
-(void)deletePhotos:(int)photos atIndex:(int)index;
-(void)insertPhotos:(id)photos atIndex:(int)index;
-(void)setCurrentPage:(int)page;
-(void)setPhotoCaptions:(id)captions;
-(void)setThumbRects:(id)rects;
-(void)setThumbPaths:(id)paths;
-(void)setPhotoPaths:(id)paths;
-(void)setPhotoImages:(id)images;
-(void)setPhotoCount:(int)count;
-(void)resetNavigationBarTitle;
-(BOOL)canShowPageControl;
-(void)didScrollToPage:(int)page;
-(void)longPressDetected;
-(void)popupMenu;
-(void)singleTapDetected;
-(id)imageAtIndex:(int)index;
-(int)numberOfPages;
-(void)didReceiveMemoryWarning;
-(void)setNavBarAppearance:(BOOL)appearance;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(void)releaseActionItems;
-(id)initWithPreviewImage:(id)previewImage;
-(id)initWithPhotoCount:(int)photoCount;
-(id)init;
@end

@interface PhotoBrowserView : UIView <UIScrollViewDelegate, QQImageViewDelegate> {
	UIScrollView* _scrollView;
	id<PhotoBrowserViewDelegate> _dataSource;
	NSMutableDictionary* _imageViews;
	QQPageIndicator* _pageControl;
	int _oldPage;
	int _currentPage;
	BOOL _isLayout;
	BOOL _isScroll;
}
@property(assign, nonatomic, setter=setCurrentPage:) int currentPage;
@property(retain, nonatomic) NSMutableDictionary* imageViews;
@property(assign, nonatomic) id<PhotoBrowserViewDelegate> dataSource;
@property(readonly, assign, nonatomic) QQPageIndicator* pageControl;
-(void)handleDidReceiveMemoryWarningNotification:(id)handle;
-(CGPoint)getCurrentImageViewPosition;
-(id)getCurrentImageView;
-(id)getCurrentImagePath;
-(id)getCurrentThumbImage;
-(id)getCurrentImage;
-(void)longPressDetected:(id)detected;
-(void)singleTapDetected:(id)detected;
-(CGRect)frameForPageControl;
-(CGPoint)contentOffsetForPage:(int)page;
-(CGRect)frameForPage:(int)page;
-(CGSize)contentSizeForScrollView;
-(CGRect)frameForScrollView;
-(void)setFrame:(CGRect)frame;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)flashPageControl;
-(void)deletePhotos:(int)photos atIndex:(int)index;
-(void)insertPhotos:(int)photos atIndex:(int)index;
-(void)updateContents;
-(void)reset;
-(void)setPageControlHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setPageControlHidden:(BOOL)hidden;
-(void)hidePageControllerAfterDelay;
-(void)setCurrentPage:(int)page withPageControlShow:(BOOL)pageControlShow;
-(void)parpareCurrentPageImageViews:(int)views isSetCurrentPage:(BOOL)page;
-(void)removeAllImageViewsExceptIndexSet:(id)set;
-(void)releaseScrollViewWithPage:(int)page;
-(id)loadScrollViewWithPage:(int)page;
-(id)getImageViewAtPage:(int)page;
-(void)setCurrentPageCanDownload;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame withDataSource:(id)dataSource;
@end

@interface QQImageView : UIView <UIScrollViewDelegate, QQPhotoDelegate, DACircularProgressViewDelegate> {
	CGSize _imageSize;
	UIImageView* _imageView;
	UIScrollView* _scrollView;
	BOOL _isCurrentPage;
	BOOL _canDownload;
	BOOL _isHandleLongPress;
	BOOL _isAnimating;
	BOOL _hasNotifyDownloadFail;
	int _imageState;
	DACircularProgressView* _progressView;
	id<QQImageViewDelegate> _touchDelegate;
	QQBasePhoto* _photo;
}
@property(assign, nonatomic) id<QQImageViewDelegate> touchDelegate;
@property(readonly, assign, nonatomic) UIScrollView* scrollView;
@property(readonly, assign, nonatomic) UIImageView* imageView;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)updateImageAfterDelay;
-(void)notifyAnimationFinished:(id)finished;
-(void)notifyDownloadThumbFail:(id)fail;
-(void)notifyDownloadThumbSuccess:(id)success;
-(void)notifyDownloadFail:(id)fail;
-(void)notifyNetWorkError:(id)error;
-(void)notifyAsynLoadImageFail:(id)fail;
-(void)notifyAsynLoadImageSuccess:(id)success;
-(void)notifyDownloadSuccess:(id)success;
-(void)notifyDownloadProgress:(id)progress;
-(void)handleLongPressGesture:(id)gesture;
-(void)handleDoubleTap:(id)tap;
-(void)handleSingleTap;
-(void)handleTapGesture:(id)gesture;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)setCanDownload:(BOOL)download;
-(void)setIsCurrentPage:(BOOL)page;
-(void)showDownloadFailNotice:(id)notice;
-(void)downloadImageIfNeeded;
-(void)updateProgressView;
-(void)showProgressLoading;
-(void)hideProgressView;
-(void)showProgressView;
-(void)scaleToMaximumZoomScale;
-(void)resetZoomScale;
-(void)asynLoadImage;
-(void)loadImage;
-(void)setFrame:(CGRect)frame;
-(void)setImage:(id)image;
-(void)setPhoto:(id)photo;
-(void)resetImageFrame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QZonePhotoBrowserViewController : PhotoBrowserBaseViewContoller {
}
-(id)getToolbarItems;
-(void)setThumbUrls:(id)urls;
-(void)setPhotoUrls:(id)urls;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)init;
@end

@interface ChatPhotoBrowserViewController : PhotoBrowserBaseViewContoller <DBAsyncCallbackProtocol> {
	long long _beginSeq;
	long long _beginTime;
	BOOL _isFetchEnd;
	NSString* _uin;
	int _controllerType;
}
@property(assign, nonatomic) int controllerType;
@property(retain, nonatomic) NSString* uin;
-(BOOL)canShowPageControl;
-(void)insertPhotosAfterDelay:(id)delay;
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
-(void)handleQQSwitchRichMediaUuidNotification:(id)notification;
-(CGRect)browserGetThumbImageShowRect:(id)rect thumbRegion:(CGRect)region inThumbRect:(CGRect)thumbRect;
-(id)getToolbarItems;
-(void)setChatModels:(id)models;
-(void)setPhotoUuids:(id)uuids;
-(void)didReceiveMemoryWarning;
-(void)viewWillAppear:(BOOL)view;
-(void)fetchNextPhotos;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface QQChatPhoto : QQBasePhoto {
	NSString* _uuid;
	QQModel* _chatModel;
}
@property(retain, nonatomic) QQModel* chatModel;
@property(retain, nonatomic) NSString* uuid;
-(void)updateChatOrignalImageSate:(id)sate;
-(void)downloadThumbPhoto;
-(void)downloadPhoto;
-(id)getThumbImage;
-(id)getImageRaw;
-(id)getPhotoPath;
-(BOOL)isAccostTypeImage;
-(void)dealloc;
-(id)init;
@end

@interface QQUrlPhoto : QQBasePhoto <TTURLRequestDelegate> {
	NSString* _photoUrl;
	NSString* _thumbUrl;
	TTURLRequest* _request;
	TTURLRequest* _thumbRequest;
}
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* photoUrl;
-(void)request:(id)request didDownload:(id)download totalLength:(id)length;
-(void)requestDidCancelLoad:(id)request;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)requestDidFinishLoad:(id)request;
-(void)requestDidStartLoad:(id)request;
-(void)sendThumbRequest;
-(void)sendRequest;
-(void)cancelDownloadPhoto;
-(void)downloadThumbPhoto;
-(void)downloadPhoto;
-(void)dealloc;
-(void)releaseThumbRequest;
-(void)releasePhotoRequest;
@end

@interface QQCardPhoto : QQBasePhoto {
	NSString* _uin;
	NSData* _faceId;
}
@property(retain, nonatomic) NSData* faceId;
@property(retain, nonatomic) NSString* uin;
-(void)handleCardInfoErrorNotification:(id)notification;
-(void)handleCardInfoFileTransProcess:(id)process;
-(void)handleCardInfoUpdateCardFaceInfoImage:(id)image;
-(void)downloadThumbPhoto;
-(void)downloadPhoto;
-(void)dealloc;
-(id)init;
@end

@interface CardPhotoBrowserViewController : PhotoBrowserBaseViewContoller {
	NSString* _uin;
}
-(void)handleCardInfoUpdateCardFaceInfo:(id)info;
-(id)getToolbarItems;
-(void)deleteCurrentPhoto;
-(void)setThumbPaths:(id)paths;
-(void)setPhotoFaceIds:(id)ids;
-(void)setPhotoCount:(int)count;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithUin:(id)uin;
-(id)init;
@end

@interface SSCM : NSObject {
	BOOL _initFlag;
	int _state;
	float _slope;
	int _networkType;
	double _T;
	int _S1;
	int _Sn;
	int _So;
	float _V1;
	float _Vn;
	float _Vo;
	float _Vstable;
	int _unStableNum;
	BOOL _switchFlag;
	int _confirmNum;
	int _SFiStableUsn;
	double _SFiSlowRate;
	double _SFiQuikeRate;
	double _SFiSlopePoi;
}
@property(assign) int Sn;
@property(assign) int networkType;
-(void)setPkgSendT:(double)t;
-(unsigned)getPkgSizeByNetType:(unsigned)type fileSize:(unsigned)size transferedSize:(unsigned)size3;
-(unsigned)getWWANPkgSize:(unsigned)size transferedSize:(unsigned)size2;
-(unsigned)getWifiPkgSize:(unsigned)size transferedSize:(unsigned)size2;
-(unsigned)getPkgInitSizeByNetType:(unsigned)type fileSize:(unsigned)size;
-(void)initParam;
-(id)init;
@end

@interface SSCMTimer : NSObject {
	long _TB;
	long _TBn;
	long _startTB;
	long _totalTB;
	long _difTB;
	int _NVT;
	int _SNVT;
	NSTimer* _NVTimer;
	int _eventOfNVTimer;
	id<SSCMTimerDelegate> _delegate;
	int _networkType;
	int _SFiNVTInterval;
	int _SFiMNVT;
	int _SFiMSNVT;
}
@property(assign, nonatomic) int SNVT;
@property(assign, nonatomic) int NVT;
@property(assign, nonatomic) id<SSCMTimerDelegate> delegate;
-(double)getTotalKB;
-(double)getPkgKB;
-(void)cancelSSCMConnectTimer;
-(void)setSSCMConnectTimeOut:(int)anOut delegate:(id)delegate;
-(void)NVTimerProc;
-(void)dealloc;
-(id)init;
-(void)initParam;
@end

@interface Utils : NSObject {
	long _WiFiSent;
	long _WiFiReceived;
	long _WWANSent;
	long _WWANReceived;
}
@property(assign) long WWANSent;
@property(assign) long WiFiSent;
+(long)getOutOctets:(int)octets;
-(void)getInterfaceData;
@end

@interface QQSetPhoneNumberViewController : QQViewController <UITextFieldDelegate, CountryCodeViewControllerDelegate, SimpleAlertViewDelegate> {
	BOOL _isChecked;
	UIButton* _regionButton;
	UILabel* _countryNameLabel;
	UILabel* _countryCodeLabel;
	UILabel* _placeholderLabel;
	UITextField* _phoneNumberTextField;
	UIButton* _nextButton;
	NSString* _regionName;
	NSString* _regionCode;
}
@property(retain, nonatomic) NSString* regionCode;
@property(retain, nonatomic) NSString* regionName;
-(void)selectedWithCountryName:(id)countryName countryCode:(id)code;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

@interface QQGroupMessageBaseSwitchItem : NSObject {
	NSString* _title;
	NSString* _key;
	NSString* _style;
	BOOL _receiveMessage;
}
@property(assign) BOOL receiveMessage;
@property(retain, nonatomic) NSString* style;
@property(retain, nonatomic) NSString* key;
@property(retain, nonatomic) NSString* title;
-(float)getHeight;
-(void)dealloc;
@end

@interface QQGroupMessageSwitchBaseViewController : QQViewController <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _tableView;
	NSMutableArray* _groupArray;
	NSMutableArray* _dataSources;
	NSMutableArray* _dataHeads;
	NSMutableArray* _dataFoots;
}
-(void)setReceiveGroupMsgForAll:(BOOL)all;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidUnload;
-(void)restoreData;
-(void)reloadTableData;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQSendingMsgModel : QQModel {
	int _seqId;
	int _msgID;
	int _timeStamp;
	int _retryCount;
	long long _toUin;
	NSString* _content;
	NSString* _command;
	NSData* _data;
	int _msgType;
	int _msgState;
	NSString* _licence;
	NSMutableDictionary* _userInfo;
	int _timeoutInterval;
	int _maxRetryCount;
	BOOL _answerFlag;
	int _divSeq;
}
@property(retain, nonatomic) NSMutableDictionary* userInfo;
@property(assign, nonatomic) int divSeq;
@property(assign, nonatomic) BOOL answerFlag;
@property(assign, nonatomic) int maxRetryCount;
@property(assign, nonatomic) int timeoutInterval;
@property(retain, nonatomic) NSString* licence;
@property(assign, nonatomic) int msgState;
@property(readonly, assign, nonatomic) int msgType;
@property(retain, nonatomic) NSData* data;
@property(retain, nonatomic) NSString* cmd;
@property(retain, nonatomic) NSString* content;
@property(assign, nonatomic) long long toUin;
@property(assign, nonatomic) int retryCount;
@property(assign, nonatomic) int timeStamp;
@property(assign, nonatomic) int msgID;
@property(assign, nonatomic) int seqId;
-(void)deSerializeUserInfoFromKeys:(id)keys andValues:(id)values;
-(id)serializeUserInfoValues;
-(id)serializeUserInfoKeys;
-(void)clearUserInfo;
-(id)userInfoForKey:(id)key;
-(void)setUserInfo:(id)info forKey:(id)key;
-(id)description;
-(BOOL)isEqual:(id)equal;
-(id)copy;
-(BOOL)isMultiMessage;
-(id)getUniqueIdentifyAsMultiMsg;
-(void)dealloc;
-(id)initWithType:(int)type seq:(int)seq timeStamp:(int)stamp toUin:(long long)uin cmd:(id)cmd;
-(id)init;
@end

@interface QMsgReliableTransportationService : NSObject <IMsgReliableTransportationService, QSHttpRequestDelegate, QSHttpProgressDelegate, MessageSenderDelagate> {
	NSMutableDictionary* mSendResultHandlerDic;
	NSString* mUin;
	BOOL bIsLoginForTheFirstTime;
	RTSDataSource* mDataSource;
	NSMutableArray* mSenderQueue;
}
@property(retain, nonatomic) NSString* uin;
+(id)getInstance;
-(void)handleMsgSender:(id)sender msgSeqId:(int)anId responsePacket:(id)packet;
-(void)handleMsgSender:(id)sender msgSeqId:(int)anId sendResult:(int)result;
-(void)onAccountLogout:(id)logout;
-(void)onAccountLogin:(id)login;
-(id)getAllPiecesOfOneLongMsg:(id)oneLongMsg;
-(void)markMultiMessageAllFailed:(id)failed;
-(void)removeMultiMessagesFromSendQueue:(id)sendQueue;
-(BOOL)isMultiMessageSentOutCompletely:(id)completely;
-(id)getSendingUserInfoBySeq:(int)seq;
-(id)removeSendingMsgBySeq:(int)seq;
-(int)sendMessage:(id)message transportLicence:(id)licence;
-(id)getLicence:(id)licence;
-(void)unregisterSendResultHandler:(id)handler;
-(id)registerSendResultHandler:(id)handler;
-(BOOL)handleMSFData:(char*)data cmd:(id)cmd bufferLenght:(int)lenght seqId:(int)anId;
-(id)getSendingMsgCacheFileName;
-(BOOL)tryResendMsg:(id)msg bySender:(id)sender rtsErrorCode:(int*)code;
-(BOOL)isLicenceVaild:(id)vaild;
-(void)installSenders;
-(void)dealloc;
-(void)doInit;
@end

@interface DACircularProgressView : UIView {
	CADisplayLink* _displayLink;
	float _progressStep;
	float _nowProgress;
	id<DACircularProgressViewDelegate> _delegate;
@private
	UIColor* _trackTintColor;
	UIColor* _progressTintColor;
	float _progress;
}
@property(assign, nonatomic) id<DACircularProgressViewDelegate> delegate;
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) UIColor* progressTintColor;
@property(retain, nonatomic) UIColor* trackTintColor;
-(void)loadingAnimationSelector:(id)selector;
-(void)stopLoading;
-(void)showLoading;
-(void)animationSelector:(id)selector;
-(void)stopAnimation;
-(void)setProgressWithAnimation:(float)animation;
-(void)drawRect:(CGRect)rect;
-(void)drawFillArc:(CGContextRef)arc toAngle:(float)angle radius:(float)radius fillColor:(id)color;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

@interface DeleteCardPhotoActionItem : ActionBaseItem <UIActionSheetDelegate> {
}
+(id)actionItemWithDelegate:(id)delegate;
-(void)deleteCurrentPhoto;
-(void)handleCardInfoDeleteCardFaceInfoNotification:(id)notification;
-(void)deleteImage;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onItemClick;
-(void)dealloc;
-(id)initWithItemDelegate:(id)itemDelegate;
@end

@interface DoodleActionItem : ActionBaseItem {
}
+(id)actionItemWithDelegate:(id)delegate;
-(void)onItemClick;
-(id)getChatViewController;
-(id)initWithItemDelegate:(id)itemDelegate;
@end

@interface QQTouchAction : NSObject {
}
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface QQActionAnimation : QQTouchAction {
	UIView* _animationBgView;
	UIView* _animationView;
	UIView* _animationSecondView;
	UIView* _animationThirdView;
	BOOL _animationLock;
	CGRect _currentRect;
	CGPoint _startPoint;
	CGPoint _endPoint;
	float _maxHeight;
	float _maxMoveHeight;
	float _maxOriginY;
	float _speedAcce;
	float _maxTimeInterval;
	float _thirdViewMoveHeight;
	CGRect _unLockRectBegin;
	CGRect _unLockRectEnd;
	BOOL _Bottom;
	id<AnimationDelegate> _delegate;
}
@property(readonly, assign, nonatomic) BOOL Bottom;
@property(assign, nonatomic) CGRect unLockRectEnd;
@property(assign, nonatomic) CGRect unLockRectBegin;
@property(assign, nonatomic) float thirdViewMoveHeight;
@property(assign, nonatomic) float maxTimeInterval;
@property(assign, nonatomic) float speedAcce;
@property(assign, nonatomic) float maxOriginY;
@property(assign, nonatomic) float maxMoveHeight;
@property(assign, nonatomic) float maxHeight;
@property(readonly, assign, nonatomic) BOOL animationLock;
@property(assign, nonatomic) UIView* animationBgView;
@property(assign, nonatomic) UIView* animationThirdView;
@property(assign, nonatomic) UIView* animationSecondView;
@property(assign, nonatomic) UIView* animationView;
@property(assign, nonatomic) id<AnimationDelegate> delegate;
-(void)animationMovePoint:(CGPoint)point;
-(void)animationTouch:(id)touch;
-(void)animationMoveBottom;
-(void)animationMoveTop;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)endAniamtion;
-(void)startAniamtion;
-(void)dealloc;
-(id)init;
@end

@interface CacaDiscussRoomViewController : QQViewController <CCacaGetInfoDelegate, CCacaDiscussRoomGetTimerDelegate, ICacaUserScrollView, UIAlertViewDelegate, UIActionSheetDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, CacaRoomSelectMemberDelegate, UIImagePickerControllerDelegate, PhotoBrowserViewControllerDelegate, UINavigationControllerDelegate, ICacaDiscussGroupUpdateResult> {
	CacaUserScrollView* _memberListView;
	NSString* _roomName;
	UIImageView* _memberListBackgroundView;
	NSMutableArray* _memberList;
	UIButton* _chatButton;
	UIButton* _shareButton;
	UIImage* _shareImage;
	CCacaDiscussRoomViewTimer* _timer;
	QQActionSheet* sheet;
	long long _discussUin;
	BOOL _disappear;
	BOOL _enterBack;
	BOOL _dismiss;
	BOOL _discussDisappear;
	BOOL _list;
}
-(void)photoBrowserViewContoller:(id)contoller didSelectImage:(id)image;
-(void)reSetLeftButtonTitle;
-(void)handleUpdateCacaGroupInfoResult:(BOOL)result discussUin:(long long)uin;
-(id)createGroupName:(id)name;
-(void)gotoDiscusschatViewWithImage:(int)image;
-(void)imageSelectedWithBodyType:(int)bodyType;
-(void)handleImagePicker:(id)picker;
-(void)PushDiscussGroupChatViewController:(id)controller Message:(int)message;
-(BOOL)RequestVoiceID;
-(void)CacaSelectMemeber:(id)memeber Voice:(BOOL)voice;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)ActionCamera;
-(void)ActionAlbum;
-(void)LeftButtonAction:(id)action;
-(void)ShareAction:(id)action;
-(void)ChatAction:(id)action;
-(void)didAdd;
-(void)didUserPortraitTouched:(id)touched;
-(void)UpdateFriendList:(id)list;
-(void)CCacaGetRespRegister:(id)aRegister didRecieveMsg:(CIMEngineMsgStruct)msg;
-(void)DecodeReqNotifyDiscussChange:(CIMEngineMsgStruct)change;
-(void)didUpdateCacaDiscussMemTimeout;
-(void)didBadNetworkStateTimeout;
-(void)ReturnForeground:(id)foreground;
-(void)EnterBackground:(id)background;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)viewDidUnload;
-(void)dealloc;
-(id)initWithUsers:(id)users List:(BOOL)list Uin:(long long)uin RoomName:(id)name;
@end

@interface QQDoubleCache : NSObject {
	NSDictionary* _cache_A;
	NSDictionary* _cache_B;
}
@property(retain) NSDictionary* cache_B;
@property(retain) NSDictionary* cache_A;
+(id)merge:(id)merge with:(id)with;
-(void)saveCache:(int)cache toFile:(id)file;
-(id)getTotleCache;
-(void)dealloc;
-(id)initWithCacheA:(id)cacheA cacheB:(id)b;
@end

@interface QQMessageSyncTask : NSObject {
	BOOL _sent;
	BOOL _c2cReady;
	BOOL _groupReady;
	int _c2cRetrySeq;
	int _c2cSeq;
	int _groupSeq;
	unsigned _flag;
	NSMutableDictionary* _groupResults;
	NSMutableDictionary* _c2cReadInfo;
}
@property(readonly, assign) unsigned flag;
@property(readonly, assign) BOOL sent;
-(void)requestGroupMessageTimeout:(id)timeout;
-(void)actionGetGroupMessage:(id)message;
-(void)requestGroupSeqTimeout:(id)timeout;
-(void)actionGetGroupSeq:(id)seq;
-(void)requestC2CTimeout:(id)timeout;
-(void)actionGetC2CSyncResult:(id)result;
-(void)sendRequest;
-(void)sendC2CRequest:(int)request;
-(void)sendGroupRequest;
-(void)checkTask;
-(void)didRegister;
-(void)shouldCancelTask;
-(void)appendC2CReadInfo:(id)info;
-(void)dealloc;
-(id)initWithFlag:(unsigned)flag c2cRetrySeq:(int)seq;
@end

@interface QQC2CSyncReportTask : NSObject {
	int _seq;
	int _time;
	long long _uin;
	long long _selfUin;
@private
	BOOL _isFinished;
}
@property(assign) BOOL isFinished;
@property(assign) long long selfUin;
@property(assign) long long uin;
@property(assign) int time;
-(void)cancelTask;
-(void)requestTimeout:(id)timeout;
-(void)requestCallback:(id)callback;
-(void)report;
-(void)notifyReportResult;
-(void)dealloc;
@end

@interface QQMsgSyncManager : NSObject <AsynFileStorageDelegate> {
	NSString* _uin;
	BOOL _receiveCacheModified;
	BOOL _sendCacheModified;
	int _c2cCacheUpdate;
	NSMutableDictionary* _c2cReceiveCache;
	NSMutableDictionary* _c2cSendCache;
	NSMutableDictionary* _c2cSeqCache;
	int _groupPttSeqCacheUpdate;
	BOOL _groupPttSeqCacheModified;
	NSMutableDictionary* _groupPttSeqCache;
	NSMutableDictionary* _groupRichSeqCache;
	NSMutableDictionary* _readConfirmCache;
	NSMutableArray* _syncTasks;
	int _delayPostGroupMessageInvokeCount;
	BOOL _loginWindowPresent;
	QQRegisterProxyTask* _registerTask;
	NSMutableArray* _groupMessagePostSerialList;
}
+(id)sharedInstance;
-(void)onSaveFinish:(id)finish success:(BOOL)success;
-(id)deepcopy:(id)deepcopy;
-(void)didSyncTaskFinished:(id)finished;
-(void)sendReadConfirmOnEnterBackground;
-(id)requestOfflineMessage:(unsigned)message c2cRetrySeq:(int)seq;
-(id)getGroupCacheMsgAndCleanCache:(id)cache msgSeq:(int)seq groupCode:(id)code fromUin:(id)uin;
-(id)getGroupCacheMsgIDandCleanCache:(id)cache msgSeq:(int)seq groupCode:(id)code fromUin:(id)uin msgTime:(double)time;
-(id)getGroupCacheMsgIDandCleanCache:(id)cache msgSeq:(int)seq groupCode:(id)code;
-(BOOL)clearGroupCacheMsgID:(id)anId groupCode:(id)code;
-(void)clearGroupCacheMsgByGroupCode:(id)code;
-(void)updateGroupCacheMsgSeq:(int)seq msgID:(id)anId groupCode:(id)code;
-(id)getGroupCacheMsgID:(id)anId msgSeq:(int)seq groupCode:(id)code fromUin:(id)uin msgTime:(double)time;
-(id)getGroupCacheMsgID:(id)anId msgSeq:(int)seq groupCode:(id)code;
-(id)getGroupMsgCache:(id)cache groupCode:(id)code;
-(void)cacheGroupMsg:(id)msg;
-(id)getGroupRichMsgID:(id)anId;
-(void)cacheGroupRichMsgID:(id)anId;
-(void)cacheGroupPttMessageSeq:(id)seq seq:(unsigned)seq2;
-(void)endUpdateGroupPttSeqCache;
-(void)beginUpdateGroupPttSeqCache;
-(void)setGroupUnreadCount:(unsigned)count memberSeq:(long long)seq groupSeq:(long long)seq3;
-(void)sendGroupMessageReadConfirm:(unsigned)confirm;
-(void)actionSendGroupMaxSeqConfirm:(id)confirm;
-(void)onGroupMessageReadNotify:(id)notify;
-(void)onC2CMessageReadNotify:(id)notify;
-(void)didC2CReadReportFinished:(id)finished;
-(void)syncC2CMessageUnreadCount:(id)count;
-(void)doSyncC2CMessageUnreadCount:(id)count lastReadTime:(int)time newUnread:(int)unread;
-(unsigned)getC2CSendMessageRandom;
-(unsigned short)getC2CSendMessageSeq:(long long)seq;
-(void)recalculateC2CUnreadCount:(id)count;
-(BOOL)updateC2CUnreadCountAmendment:(id)amendment;
-(void)clearC2CUnreadCountAmendment:(id)amendment;
-(void)increaseC2CUnreadCountAmendment:(id)amendment;
-(void)clearC2CUnreadAndSetReported:(id)reported;
-(void)saveGroupPttSeqCache:(BOOL)cache;
-(void)saveGroupRichSeqCache;
-(void)doSaveGroupRichSeqCache;
-(void)doSaveGroupPttSeqCache;
-(void)saveReadConfirmCache;
-(void)removeC2CCache:(id)cache;
-(void)saveC2CCache;
-(void)loadReportCache;
-(id)getCacheFromAsynFileStorageByPath:(id)asynFileStorageByPath;
-(id)getGroupRichSeqCacheFileName;
-(id)getGroupPttSeqCacheFileName;
-(id)getReadConfirmCacheFileName;
-(id)getC2CSendCacheFileName;
-(id)getC2CReceiveCacheFileName;
-(id)getCacheFileName:(id)name;
-(void)sendC2CMessageReadConfirm:(id)confirm;
-(void)resetStrongerMessage:(id)message unReadConfirm:(double)confirm;
-(void)resetDiscussMessage:(id)message unReadConfirm:(double)confirm;
-(void)resetGroupMessage:(id)message unReadConfirm:(double)confirm;
-(void)resetC2cMessage:(id)message unReadConfirm:(double)confirm;
-(BOOL)isC2CMessageCached:(id)cached allowDummy:(BOOL)dummy;
-(id)getC2CSentMessageHandle:(id)handle;
-(id)getC2CReceivedMessageHandle:(id)handle allowDummy:(BOOL)dummy;
-(id)cacheC2CSentMessage:(long long)message msgSeq:(int)seq msgUid:(long long)uid time:(int)time rich:(BOOL)rich;
-(id)cacheC2CSentMessage:(long long)message msgSeq:(int)seq msgRandom:(unsigned)random time:(int)time rich:(BOOL)rich;
-(id)cacheC2CSentMessage:(id)message;
-(id)cacheC2CReceivedVideoMessage:(id)message;
-(id)cacheC2CReceivedMessage:(id)message isDummy:(BOOL)dummy;
-(id)cacheC2CDummyRichMessage:(id)message;
-(id)cacheC2CMessage:(id)message;
-(void)printC2CReceiveCache:(id)cache path:(id)path;
-(void)updateC2CCacheWithDelay;
-(void)endUpdateC2CCache;
-(void)beginUpdateC2CCache;
-(void)clearCacheData;
-(void)changeAccount:(id)account;
-(void)clearOutOfDateMsg;
-(void)dealloc;
-(id)init;
-(BOOL)sendGetMessageRequestWithOperScene:(int)operScene;
-(void)handleRegisterGroupMessage:(id)message;
-(void)delayPostGroupMessage;
-(void)postGroupMessage:(id)message;
-(void)postAllGroupMessages;
-(void)setLoginWindowPresent:(BOOL)present;
-(void)actionGetGroupMessage:(void*)message;
-(void)resetProxyRequest;
-(void)sendMessageRequest;
-(void)sendRegisterProxyRequest;
@end

@interface QQGroupMsgCache : NSObject {
	NSData* _msgContent;
	int _msgID;
	BOOL _msgType;
	int _msgTime;
	NSString* _groupCode;
	int _msgSeq;
}
@property(assign, nonatomic) int msgSeq;
@property(retain, nonatomic) NSString* groupCode;
@property(assign, nonatomic) int msgTime;
@property(assign, nonatomic) BOOL msgType;
@property(assign, nonatomic) int msgID;
@property(retain, nonatomic) NSData* msgContent;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init:(id)init msgID:(int)anId msgType:(BOOL)type msgTime:(int)time groupCode:(id)code;
@end

@interface QQApplicationIdleNotifier : NSObject {
	BOOL _running;
	NSTimer* _timer;
}
@property(readonly, assign) BOOL running;
+(id)sharedInstance;
-(void)checkCPUUsage;
-(void)stop;
-(void)start;
-(void)dealloc;
@end

@interface RDMEventTask : NSObject {
	double _startTime;
	NSString* _command;
	int _seq;
	int _size;
}
@property(assign, nonatomic) int size;
@property(assign, nonatomic) int seq;
@property(retain, nonatomic) NSString* cmd;
@property(assign, nonatomic) double startTime;
+(id)eventWithCommand:(id)command seq:(int)seq size:(int)size;
-(void)dealloc;
-(id)description;
@end

@interface RDMEventTaskManager : NSObject {
	NSMutableDictionary* _eventQueue;
	NSMutableDictionary* _commandMap;
	int _seq;
	BOOL _eventFlag;
	NSString* _imsiStr;
	NSString* _imeiStr;
}
+(id)instance;
-(BOOL)setMonitorEvent:(int)event size:(int)size;
-(BOOL)doReport:(id)report isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params reportImmediately:(BOOL)immediately;
-(BOOL)endTaskFailedWithSeq:(int)seq;
-(void)endMonitorMergeEvent:(int)event size:(int)size success:(BOOL)success paramsDic:(id)dic failCode:(int)code;
-(void)endMonitorMergeEvent:(int)event success:(BOOL)success paramsDic:(id)dic failCode:(int)code;
-(void)endMonitorEvent:(int)event size:(int)size success:(BOOL)success paramsDic:(id)dic reportImmediately:(BOOL)immediately;
-(void)endMonitorEvent:(int)event success:(BOOL)success paramsDic:(id)dic reportImmediately:(BOOL)immediately;
-(void)endMonitorEvent:(int)event size:(int)size success:(BOOL)success failCode:(int)code;
-(void)endMonitorEvent:(int)event success:(BOOL)success failCode:(int)code;
-(void)endMonitorEvent:(int)event success:(BOOL)success sessionID:(int)anId;
-(void)endMonitorEvent:(int)event size:(int)size success:(BOOL)success reportImmediately:(BOOL)immediately;
-(void)endMonitorEvent:(int)event success:(BOOL)success reportImmediately:(BOOL)immediately;
-(void)endMonitorEvent:(int)event size:(int)size success:(BOOL)success;
-(void)endMonitorEvent:(int)event success:(BOOL)success;
-(int)beginMonitorRDMEvent:(id)event size:(int)size;
-(int)beginMonitorEvent:(id)event size:(int)size;
-(void)startMonitorTimer:(int)timer;
-(int)startMonitorRDMEvent:(id)event size:(int)size;
-(int)startMonitorEvent:(id)event size:(int)size;
-(int)getSeq;
-(BOOL)isSdkInitialied;
-(void)dealloc;
-(id)init;
-(BOOL)isNecessaryEvent:(id)event;
-(id)getIMEI;
-(id)getIMSI;
-(void)updateRDMConfig;
-(BOOL)endTaskWithSeq:(int)seq size:(int)size success:(BOOL)success params:(id)params;
-(BOOL)endTaskWithSeq:(int)seq size:(int)size success:(BOOL)success params:(id)params reportImmediately:(BOOL)immediately;
-(BOOL)endTaskWithSeq:(int)seq success:(BOOL)success params:(id)params;
-(BOOL)endTaskWithSeq:(int)seq success:(BOOL)success params:(id)params reportImmediately:(BOOL)immediately;
-(BOOL)endTaskWithSeq:(int)seq size:(int)size success:(BOOL)success params:(id)params reportImmediately:(BOOL)immediately hasSize:(BOOL)size6 merge:(BOOL)merge;
-(BOOL)beginTaskWithSeq:(int)seq;
-(BOOL)addTaskWithSeq:(int)seq cmd:(id)cmd size:(int)size;
-(id)lookupEvent:(id)event;
-(void)initImportantEventDictionary;
@end

@interface QQRDMParamPacker : NSObject {
@private
	NSMutableString* _str;
	NSMutableDictionary* _dict;
}
-(id)unpack:(id)unpack;
-(BOOL)getChar:(id)aChar pos:(int)pos nextPos:(int*)pos3;
-(id)getString:(id)string pos:(int)pos nextPos:(int*)pos3;
-(int)getInt:(id)int pos:(int)pos nextPos:(int*)pos3;
-(id)pack:(id)pack;
-(void)dealloc;
@end

@interface CacaNobodyView : UIView {
	NSString* _tipStr;
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSString* tipStr;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CacaRoomListViewCell : UITableViewCell {
	UILabel* _nickLabel;
	NSIndexPath* _indexPath;
	UIImageView* _roomHeadView;
	UIImageView* _bottomLineImageView;
}
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(retain, nonatomic) UILabel* nickLabel;
@property(retain, nonatomic) UIImageView* bottomLineImageView;
@property(retain, nonatomic) UIImageView* roomHeadView;
-(void)dealloc;
-(void)setHeadImage:(id)image;
-(void)setNick:(id)nick;
-(id)initWithFrame:(CGRect)frame reuseIdentifier:(id)identifier;
@end

@interface CacaRoomListModel : NSObject {
	NSString* _name;
	int _num;
	long long _groupUin;
	NSIndexPath* _indexPath;
}
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(assign, nonatomic) long long groupUin;
@property(assign, nonatomic) int num;
@property(retain, nonatomic) NSString* name;
-(void)dealloc;
-(id)init;
@end

@interface CacaRoomListView : UIView <UITableViewDataSource, UITableViewDelegate> {
	NSMutableArray* _roomList;
	UITableView* _listView;
	CacaNobodyView* _nobodyView;
	id<CacaQuitDiscussUinDelegate> _delegate;
	BOOL _nobody;
}
@property(assign, nonatomic) id<CacaQuitDiscussUinDelegate> delegate;
@property(retain, nonatomic) CacaNobodyView* nobodyView;
@property(retain, nonatomic) UITableView* listView;
@property(retain, nonatomic) NSMutableArray* roomList;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)reload;
-(void)reloadData;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CacaRootAnimationView : UIView <AnimationDelegate, CacaQuitDiscussUinDelegate> {
	CacaRoomListView* _roomListView;
	UIImageView* _animationMoveView;
	id<CacaQuitDiscussUinToControllerDelegate> _delegate;
}
@property(assign, nonatomic) id<CacaQuitDiscussUinToControllerDelegate> delegate;
@property(retain, nonatomic) CacaRoomListView* roomListView;
-(void)didAnimationEnd:(id)end;
-(void)didAniamtionStart:(id)start;
-(void)QuitDiscussUin:(long long)uin;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQGroupMessagePostSerial : NSObject {
	NSString* _groupCode;
	NSDictionary* _data;
}
@property(retain, nonatomic) NSString* groupCode;
-(void)postMessages;
-(void)dealloc;
-(id)initWithData:(id)data;
@end

@interface QQRegisterProxyTask : NSObject {
	int _state;
	BOOL _register;
	BOOL _registerSuccess;
	long long _uin;
	int _seq;
	int _retryCount;
}
@property(readonly, assign) int state;
@property(readonly, assign) long long uin;
-(void)actionSyncReq:(id)req;
-(void)actionGetGroupMessage:(void*)message;
-(void)actionGetGroupSeq:(void*)seq;
-(void)actionGetC2CMessage:(id)message;
-(void)actionGetMessageProxy:(id)proxy;
-(void)actionRegisterProxy:(id)proxy;
-(void)delayPostSuccessNotification;
-(void)registerTimeout:(id)timeout;
-(void)requestTimeout:(id)timeout;
-(void)reset;
-(int)sendGetMessageRequest:(id)request;
-(void)delayDealWithGetMessageProxyMannually:(id)getMessageProxyMannually;
-(void)actionGetMessageProxyMannually:(id)mannually;
-(void)sendMessageRequestOnly;
-(void)sendRequest:(BOOL)request;
-(id)getDiscussGroupParameters;
-(id)getGroupParameters;
-(void)dealloc;
-(id)initWithUin:(long long)uin;
@end

@interface QQAlbumListViewController : UITableViewController {
	id<IAlbumService> _albumService;
	NSMutableArray* _assetGroups;
	BOOL _isFirstInit;
	BOOL _isLoading;
	BOOL _isLoadFinished;
@private
	NSMutableArray* selectedList;
	BOOL _useFromChatViewController;
}
@property(assign, nonatomic) BOOL useFromChatViewController;
@property(retain, nonatomic) NSMutableArray* selectedList;
-(void)handleQQAlbumServiceChangedNotification:(id)notification;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)didReceiveMemoryWarning;
-(void)reloadTableView;
-(void)gotoSingleImageTableViewController:(id)controller animated:(BOOL)animated;
-(void)gotoImageTableViewController:(id)controller animated:(BOOL)animated;
-(void)viewDidLoad;
-(void)loadGroupsFromLibrary;
-(void)dealloc;
-(id)initWithStyle:(int)style;
@end

@interface QQAssetView : UIView {
	BOOL _selected;
	QQAssetData* _assetData;
	UIImageView* _imageView;
	UIImageView* _selecView;
	UIView* _maskView;
	id<QQAssetViewDelegate> _delegate;
}
@property(assign, nonatomic) id<QQAssetViewDelegate> delegate;
@property(assign, nonatomic) BOOL selected;
@property(retain, nonatomic) QQAssetData* assetData;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)setAssetData:(id)data selected:(BOOL)selected;
-(void)dealloc;
-(id)initWithFrameWithoutSelectView:(CGRect)frameWithoutSelectView;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQImageTableViewController : UIViewController <UITableViewDelegate, UITableViewDataSource, QQAssetViewDelegate> {
	int _maxSelectCount;
	id<IAlbumService> _albumService;
	ALAssetsGroup* _assetGroup;
	NSMutableArray* _assetsList;
	UITableView* _tableView;
	UIButton* _actionButton;
	UILabel* _totalCountLabel;
	BOOL _isFirstInit;
	BOOL _isLoading;
	BOOL _isLoadFinished;
@private
	NSMutableArray* selectedList;
}
@property(retain, nonatomic) NSMutableArray* selectedList;
@property(assign, nonatomic) int maxSelectCount;
-(void)handleQQAlbumServiceChangedNotification:(id)notification;
-(void)onActionButtonClick:(id)click;
-(void)onCancelButtonClick:(id)click;
-(void)didSelectPhoto:(id)photo;
-(void)resetBottomButtonTitle;
-(void)sendThumbRequest:(id)request;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)removeAssetFromList:(id)list;
-(BOOL)isAssetSelected:(id)selected;
-(void)scrollToEnd;
-(void)resetTablePositionByLastSelectedAsset;
-(void)viewWillAppear:(BOOL)view;
-(void)loadAssetsFromGroup;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)initWithAssetsGroup:(id)assetsGroup;
@end

@interface QQMultiImagePickerController : UINavigationController {
	int _maxSelectCount;
	BOOL _valueIsALAsset;
	BOOL _useFromChatViewController;
	BOOL _isFirstInit;
	id<QQMultiImagePickerControllerDelegate> _pickerDelegate;
	NSString* _bottomTitle;
	NSMutableArray* _selectList;
@private
	QQAlbumListViewController* _albumListViewController;
}
@property(assign, nonatomic) id<QQMultiImagePickerControllerDelegate> pickerDelegate;
@property(retain, nonatomic) NSString* bottomTitle;
@property(assign, nonatomic) BOOL useFromChatViewController;
@property(assign, nonatomic) BOOL valueIsALAsset;
@property(assign, nonatomic) int maxSelectCount;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(void)didSelectPhotoList:(id)list;
-(void)didSelectAssets;
-(void)didSelectPhoto:(id)photo;
-(void)cancelImagePicker;
-(void)setSelectedAssets:(id)assets;
-(void)setAppearence;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(id)init;
@end

@interface ForwardToOthersActionItem : ActionBaseItem {
}
+(id)actionItemWithDelegate:(id)delegate;
-(void)onItemClick;
-(id)initWithItemDelegate:(id)itemDelegate;
@end

@interface ShareToQZoneActionItem : ActionBaseItem {
}
+(id)actionItemWithDelegate:(id)delegate;
-(void)onItemClick;
-(id)initWithItemDelegate:(id)itemDelegate;
@end

@interface SaveToAlbumActionItem : ActionBaseItem {
}
+(id)actionItemWithDelegate:(id)delegate;
-(void)onItemClick;
-(id)initWithItemDelegate:(id)itemDelegate;
@end

@interface SaveToCustomFaceActionItem : ActionBaseItem {
}
+(id)actionItemWithDelegate:(id)delegate;
-(void)onItemClick;
-(id)initWithItemDelegate:(id)itemDelegate;
@end

@interface RichMsgSendItem : NSObject {
	int _seqId;
	int _msgSendType;
	int _msgType;
	int _bodyType;
	int _time;
	long long _toUin;
	NSString* _uuid;
	NSString* _localUuid;
	unsigned _duration;
	unsigned _appShareID;
	NSString* _secretFileFromUin;
	NSString* _secretFileToUin;
	int _msgId;
@private
	NSString* _uuidPrefix;
}
@property(copy, nonatomic) NSString* uuidPrefix;
@property(assign, nonatomic) int msgId;
@property(retain, nonatomic) NSString* secretFileToUin;
@property(retain, nonatomic) NSString* secretFileFromUin;
@property(assign, nonatomic) unsigned appShareID;
@property(assign, nonatomic) unsigned duration;
@property(retain, nonatomic) NSString* localUuid;
@property(retain, nonatomic) NSString* uuid;
@property(assign, nonatomic) long long toUin;
@property(assign, nonatomic) int time;
@property(assign, nonatomic) int bodyType;
@property(assign, nonatomic) int msgType;
@property(assign, nonatomic) int msgSendType;
@property(assign, nonatomic) int seqId;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface RichMsgSendManager : NSObject {
	NSMutableArray* _richMsgSendArrary;
}
+(id)getInstance;
-(void)switchRichMsgUuid:(id)uuid;
-(void)sendSuccessFinishNotify:(id)notify msgId:(int)anId;
-(void)delSendVoiceFile:(id)file;
-(BOOL)copyVoiceFile:(id)file newFileKey:(id)key;
-(void)delSendImage:(id)image;
-(BOOL)copySendImage:(id)image newFileKey:(id)key;
-(void)onRichMsgSendingResult:(id)result;
-(void)addSecretRichMsgSendItem:(int)item msgSendType:(int)type msgType:(int)type3 bodyType:(int)type4 time:(int)time toUin:(long long)uin uuid:(id)uuid localUuid:(id)uuid8 duration:(unsigned)duration appShareID:(unsigned)anId msgId:(int)anId11 secretFileFromUin:(id)uin12 secretFileToUin:(id)uin13;
-(void)addRichMsgSendItem:(int)item msgSendType:(int)type msgType:(int)type3 bodyType:(int)type4 time:(int)time toUin:(long long)uin uuid:(id)uuid localUuid:(id)uuid8 duration:(unsigned)duration appShareID:(unsigned)anId msgId:(int)anId11 uuidPrefix:(id)prefix;
-(void)addRichMsgSendItem:(int)item msgSendType:(int)type msgType:(int)type3 bodyType:(int)type4 time:(int)time toUin:(long long)uin uuid:(id)uuid localUuid:(id)uuid8 duration:(unsigned)duration appShareID:(unsigned)anId msgId:(int)anId11;
-(void)changeAccount:(id)account;
-(void)dealloc;
-(id)init;
@end

@interface QQRequestPackage : NSObject {
	int _requestID;
	int _requestType;
	NSString* _requestCmd;
	NSTimer* _timer;
	id _data;
	long long _userUIN;
}
@property(assign, nonatomic) long long userUIN;
@property(retain, nonatomic) id data;
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) NSString* requestCmd;
@property(assign, nonatomic) int requestType;
@property(readonly, assign, nonatomic) int requestID;
-(void)dealloc;
-(id)initWithID:(int)anId cmd:(id)cmd userUIN:(long long)uin timeoutInterval:(double)interval target:(id)target selector:(SEL)selector;
@end

@interface QQSendPackageQueue : NSObject {
	NSMutableDictionary* _requestQueue;
	NSMutableDictionary* _requestCmdDic;
}
-(id)getQueueRequestWithTimer:(id)timer;
-(id)getQueueRequestWithCmd:(id)cmd userUIN:(long long)uin;
-(id)getQueueRequestWithCmd:(id)cmd;
-(id)getQueueRequestWithID:(int)anId;
-(int)getQueueRequestCountWithCmd:(id)cmd;
-(void)removeQueueRequestWithID:(int)anId;
-(void)addQueueRequestWithID:(int)anId cmd:(id)cmd uin:(long long)uin data:(id)data timeout:(int)timeout target:(id)target selector:(SEL)selector;
-(void)dealloc;
-(id)init;
@end

@interface LongTextMsgModel : NSObject {
	int packetCount;
	long long sessionId;
	NSMutableDictionary* msgItemDict;
}
@property(readonly, assign, nonatomic) NSDictionary* msgItemDict;
@property(assign) long long sessionId;
@property(assign) int packetCount;
-(id)getFullText;
-(BOOL)isFullText;
-(void)appendMsgItem:(id)item index:(int)index;
-(void)dealloc;
-(id)init;
@end

@interface QQNobodyView : UIView {
	NSString* _tipStr;
	NSString* _subTitle;
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSString* subTitle;
@property(retain, nonatomic) NSString* tipStr;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QNetworkFlowStatService : NSObject <INetworkFlowStatService> {
	NSString* _socketFlowEntry;
	NSString* _httpFlowEntry;
	NSMutableDictionary* _flowDic;
	NSMutableDictionary* _accountflowDic;
	int _checkRdmSdkCount;
	NSTimer* _flowSaveTimer;
}
@property(retain) NSString* httpFlowEntry;
@property(retain) NSString* socketFlowEntry;
+(id)getInstance;
-(void)onQZoneFlowReport:(id)report;
-(void)recordEntryFlowBytes:(long long)bytes source:(int)source;
-(void)setFlowEntry:(id)entry source:(int)source;
-(void)recordFlowBytes:(long long)bytes source:(int)source entry:(id)entry;
-(void)recordFlowBytes:(long long)bytes type:(int)type;
-(void)saveFlowData:(id)data;
-(void)countFlowData:(id)data flowType:(int)type bytes:(long long)bytes;
-(void)doSaveFlowData:(id)data;
-(void)checkRdmSdkToReportFlow:(id)reportFlow;
-(void)reportRdmYesterdayFlow:(id)flow;
-(void)reportRdmFlow:(id)flow strUin:(id)uin;
-(void)resetFlowData;
-(id)getNetworkFlow:(BOOL)flow;
-(void)saveFlowDic;
-(id)loadFlowDic;
-(void)dealloc;
-(id)init;
@end

@interface OfflineFileTransferManager : NSObject {
	NSMutableArray* _onlineFiletimeoutArray;
	NSMutableDictionary* _offlineSaveFileNameDic;
}
+(id)getInstance;
-(void)updatePlaceholderFileMsg:(int)msg content:(id)content uin:(id)uin;
-(void)updateOfflineFileState:(int)state state:(int)state2;
-(id)GetTopC2CChatViewUin;
-(void)getOfflineFileInfo:(id)info;
-(void)handleOfflineFileMsgNotify:(id)notify;
-(id)notifyOfflineFileMsg:(id)msg fromUin:(long long)uin toUin:(long long)uin3 msgSource:(int)source;
-(void)clearOfflineSaveNameData;
-(void)saveOfflineSaveNameData;
-(void)loadOfflineSaveNameData;
-(id)getSavePathFileName:(id)name;
-(void)agreeOnlineFileTimeout:(id)timeout;
-(void)stopAgreeOnlineFileTimer:(long long)timer fileId:(unsigned)anId;
-(void)startAgreeOnlineFileTimer:(long long)timer time:(int)time fileId:(unsigned)anId;
-(BOOL)isRecevingOnlineFile:(long long)file time:(int)time fileId:(unsigned)anId;
-(id)getRecvOnlineFileSave:(long long)save fileId:(unsigned)anId uuid:(id)uuid;
-(void)stopRecvOnlineFile:(long long)file time:(int)time fileId:(unsigned)anId;
-(BOOL)agreeOnlineFile:(long long)file time:(int)time fileId:(unsigned)anId strOnlineFileData:(id)data;
-(void)senderCancleOnlineFile:(long long)file time:(int)time fileId:(unsigned)anId;
-(void)otherClientSaveWeiyunFile:(long long)file time:(int)time fileId:(unsigned)anId;
-(void)otherClientAgreeOnlineFile:(long long)file time:(int)time fileId:(unsigned)anId;
-(void)otherClientCancleOnlineFile:(long long)file time:(int)time fileId:(unsigned)anId;
-(void)notifyOnlineFileMsg:(long long)msg time:(int)time fileId:(unsigned)anId fileName:(id)name fileSize:(int)size msgData:(id)data msgSeq:(long long)seq;
-(void)changeAccount:(id)account;
-(void)dealloc;
-(id)init;
@end

@interface RichMediaServerEngine : NSObject <IEngineDispatchDelegate> {
	char* _cryptSign;
	int _cryptSignLen;
	char* _cryptKey;
	int _cryptKeyLen;
	int _reqSignSeq;
}
@property(assign, nonatomic) int cryptKeyLen;
@property(assign, nonatomic) int cryptSignLen;
+(id)getInstance;
-(id)convertMixMessageToString:(const char*)string length:(int)length;
-(id)parseOfflineFileMsg:(const char*)msg dataLen:(int)len msgTime:(int)time msgSeq:(int)seq msgUid:(long long)uid fromUin:(long long)uin toUin:(long long)uin7 lastChangeTime:(unsigned)time8 msgSource:(int)source;
-(int)sendCancelOnlineFileReq:(long long)req onlineFileData:(id)data;
-(int)sendAgreeOnlineFileReq:(long long)req onlineFileData:(id)data;
-(void)parseFileAgreeReplay:(const char*)replay dataLen:(int)len time:(int)time formUin:(long long)uin;
-(void)parseFileCancelReplay:(const char*)replay dataLen:(int)len time:(int)time formUin:(long long)uin;
-(id)parseOnlineFileNotifyMsg:(const char*)msg dataLen:(int)len time:(int)time formUin:(long long)uin msgSeq:(long long)seq;
-(id)createNotifyError:(int)error;
-(BOOL)isConnected;
-(int)sendC2cPttDownloadSucReq:(Sc2cPttDownloadSuc*)req;
-(int)sendC2CPttDownloadReq:(Sc2cPttDownload*)req;
-(void)responseC2CPicDownload:(char*)download DataLen:(int)len Seq:(int)seq;
-(int)sendC2CPicDownloadReq:(vector<Sc2cPicDownload, std::allocator<Sc2cPicDownload> >*)req;
-(void)responseC2CPicUpload:(char*)upload DataLen:(int)len Seq:(int)seq;
-(int)sendC2CPicUploadReq:(vector<Sc2cPicUpload, std::allocator<Sc2cPicUpload> >*)req;
-(void)responseGroupPicDownloadUrl:(char*)url DataLen:(int)len Seq:(int)seq;
-(void)responseGroupPicUpload:(char*)upload DataLen:(int)len Seq:(int)seq;
-(int)sendGroupPicDownloadReq:(long long)req groupType:(BOOL)type filename:(const char*)filename uploadTime:(long long)time;
-(int)sendGroupPicUploadReq:(long long)req groupType:(BOOL)type applicationType:(short)type3 fileLen:(int)len pFileHash:(const char*)hash nHashSize:(int)size hashFileName:(const char*)name;
-(char*)getCryptKey;
-(char*)getCryptSign;
-(void)clearSignAndKey;
-(void)responseReqSignAndKey:(char*)key DataLen:(int)len Seq:(int)seq;
-(int)requestSignAndKey;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)dealloc;
-(id)init;
-(void)responseC2CPttDownloadSucReq:(char*)req DataLen:(int)len Seq:(int)seq;
-(void)responseC2CPttDownload:(char*)download DataLen:(int)len Seq:(int)seq;
-(BOOL)isC2CPttDowloadSucCmd:(const char*)cmd;
-(BOOL)isC2CPttDowloadCmd:(const char*)cmd;
@end

@interface QQAssetData : NSObject {
	ALAsset* _asset;
	NSString* _assetsGroupUrl;
	NSData* _thumbMd5;
	long long _sessionId;
	BOOL _isSendThumbRequest;
}
@property(assign, nonatomic) BOOL isSendThumbRequest;
@property(assign, nonatomic) long long sessionId;
@property(retain, nonatomic) NSData* thumbMd5;
@property(retain, nonatomic) NSString* assetsGroupUrl;
@property(retain, nonatomic) ALAsset* asset;
-(void)dealloc;
-(id)initWithAsset:(id)asset;
@end

@interface GroupPicTransferManager : NSObject <IHttpStateDelegate> {
	NSMutableArray* _uploadArray;
	NSMutableDictionary* _groupPicDoanloadIpDic;
	NSString* _groupMsgCarryIp;
	NSMutableArray* _downloadArray;
	NSMutableArray* _downloadReqArray;
	NSArray* _sortedIpArray;
	int _httpRequestId;
}
@property(retain, nonatomic) NSString* groupMsgCarryIp;
+(id)getInstance;
-(BOOL)handleOriginalDownloadCache:(id)cache;
-(BOOL)handleRepeatDownload:(id)download;
-(id)replaceHost:(id)host;
-(void)sendGroupPicDlReq:(id)req;
-(void)retrySendGroupPicDlReq:(id)req errorCode:(int)code;
-(id)getFileNameFormGroupUUID:(id)uuid;
-(void)updateDownloadPicSate:(id)sate success:(BOOL)success error:(id)error;
-(int)getHttpRequestId;
-(BOOL)isGroupPicExist:(id)exist appShareId:(int)anId isDownSelf:(BOOL)aSelf getPicSizeType:(int)type;
-(float)getPicDownloadProcess:(id)process getPicSizeType:(int)type;
-(float)getPicUploadProcess:(id)process;
-(id)getAvailableGroupPushIp;
-(id)getAvailableGroupDownloadIp;
-(void)AddIpSuccessCount:(id)count;
-(void)sortIp;
-(void)clearGroupPicDownloadIps;
-(void)setGroupPicDownloadIps:(id)ips;
-(void)cancelGroupPicDownload:(int)download;
-(void)cancelGroupPicUpload:(int)upload;
-(void)onHttpSuccess:(id)success;
-(void)onHttpState:(int)state transferType:(int)type success:(BOOL)success error:(id)error;
-(void)setGroupPicSendFailState:(long long)state isDiscussGroup:(BOOL)group uuid:(id)uuid msgTime:(int)time uDuration:(unsigned)duration errorDesc:(id)desc failCode:(int)code applicationType:(int)type msgId:(int)anId;
-(void)notifyDownloadUrlResult:(BOOL)result seq:(int)seq errorCode:(int)code resp:(void*)resp;
-(int)downloadGroupPtt:(id)ptt urlArray:(id)array;
-(int)downloadGroupPic:(id)pic urlArray:(id)array;
-(void)notifyUploadRedirectResult:(BOOL)result seq:(int)seq errorCode:(int)code resp:(void*)resp;
-(void)removeUploadeObject:(id)object;
-(id)getDownloadRequest:(int)request;
-(id)getUploadObject:(int)object;
-(void)retrySendUploadReq:(id)req;
-(void)downloadGroupPtt:(id)ptt;
-(void)downloadGroupPic:(id)pic;
-(void)uploadGroupPtt:(long long)ptt isDiscussGroup:(BOOL)group uuid:(id)uuid pttData:(id)data msgTime:(int)time uDuration:(unsigned)duration msgId:(int)anId;
-(void)uploadGroupPic:(long long)pic isDiscussGroup:(BOOL)group uuid:(id)uuid imgData:(id)data msgTime:(int)time bodyType:(int)type shareAppInfo:(id)info msgId:(int)anId;
-(void)onForceOffLineNotify;
-(void)changeAccount:(id)account;
-(void)dealloc;
-(id)init;
@end

@interface QQBasePhoto : NSObject {
	UIImage* _image;
	UIImage* _thumbImage;
	CGRect _thumbRect;
	NSString* _caption;
	float _progress;
	int _gifStatus;
	long long _fileSize;
	id<QQPhotoDelegate> _delegate;
	NSString* _photoPath;
	NSString* _thumbPath;
	BOOL _isDownloading;
	BOOL _isDownloadingThumb;
	BOOL _isNolongerUse;
	BOOL _isLoadingInProgress;
	NSLock* _loadLock;
}
@property(assign, nonatomic) id<QQPhotoDelegate> delegate;
@property(assign) BOOL isLoadingInProgress;
@property(assign) BOOL isNolongerUse;
@property(assign) long long fileSize;
@property(assign) float progress;
@property(retain, nonatomic) NSString* caption;
@property(assign, nonatomic) CGRect thumbRect;
@property(retain, nonatomic) NSString* thumbPath;
@property(retain, nonatomic, getter=getPhotoPath) NSString* photoPath;
@property(retain, nonatomic) UIImage* image;
+(id)photoWithPath:(id)path;
+(id)photoWithImage:(id)image;
-(void)cancelDownloadPhoto;
-(void)downloadThumbPhoto;
-(void)downloadPhoto;
-(void)releaseImage;
-(id)getThumbImage;
-(void)asynLoadImage;
-(id)getImageRaw;
-(id)getImage;
-(id)scaleToFitSize:(id)fitSize;
-(BOOL)isGif;
-(void)dealloc;
-(id)initWithPath:(id)path;
-(id)initWithImage:(id)image;
-(id)init;
@end

@interface QQLockDictionary : NSObject {
	NSLock* _lock;
	NSMutableDictionary* _dict;
}
-(void)removeObjectsForKeys:(id)keys;
-(void)removeAllObjects;
-(id)allKeys;
-(void)setObject:(id)object forKey:(id)key;
-(void)removeObjectForKey:(id)key;
-(id)objectForKey:(id)key;
-(void)dealloc;
-(id)init;
@end

@interface QQHashKeyValue : NSObject {
}
@end

@interface QQGroupInformationRequestTask : NSObject {
	int _seq;
	int _retryCount;
	unsigned _groupCode;
}
-(void)forcedTimeout;
-(void)requestTimeout:(id)timeout;
-(void)requestCallback:(id)callback;
-(void)sendRequest;
-(void)postNotify;
-(void)dealloc;
-(id)initWithGroupCode:(id)groupCode;
@end

@interface QQGroupListRequestTask : NSObject {
	int _seq;
	BOOL _byLogin;
}
-(void)requestTimeout:(id)timeout;
-(void)requestCallback:(id)callback;
-(void)sendRequest;
-(void)postNotify;
-(void)dealloc;
-(id)init:(BOOL)init;
@end

@interface QQGroupListRequestTaskV2 : NSObject {
	int _sessionRetryCount;
	int _retryCount;
	int _initialSeq;
	int _currentSeq;
	BOOL _manually;
	NSData* _cookie;
}
@property(assign) BOOL manually;
-(void)requestTimeout:(id)timeout;
-(void)requestCallback:(id)callback;
-(int)sendRequest;
-(void)postNotify:(BOOL)notify result:(int)result;
-(void)dealloc;
-(id)init:(BOOL)init;
@end

@interface QQGroupInformationRequestor : NSObject {
}
+(id)sharedInstance;
-(void)requestGroupListOnLogin;
-(int)requestGroupList:(BOOL)list;
-(void)didGetGroupListV2:(id)a2;
-(void)didGetGroupList:(id)list;
-(void)internalDidGetGroupList:(BOOL)internal byLogin:(BOOL)login refreshGroupInfo:(BOOL)info;
-(void)internalRequestGroupList:(BOOL)list;
-(void)didGetOneGroupInformation:(id)information;
-(void)delaySaveGroupExInfo;
-(void)requestGroupInformation:(id)information;
-(void)requestAllGroupInformation:(BOOL)information;
-(id)init;
@end

@interface QQBaseTableView : UITableView <UITableViewDelegate, UITableViewDataSource> {
@private
	QQLockDictionary* _cellDict;
}
-(void)preloadCellForIndexPath:(id)indexPath;
-(void)preloadCellNearByIndexPath:(id)path;
-(void)reloadRowsAtIndexPaths:(id)indexPaths withRowAnimation:(int)rowAnimation;
-(void)reloadData;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view createCellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame style:(int)style;
-(void)initial;
@end

@interface QQBaseCellModel : NSObject {
	int _cellHeight;
@private
	BOOL _needsLayout;
}
-(void)layoutSubviews;
-(void)setNeedsLayout;
-(void)layoutIfNeeded;
-(int)getCellHeight;
-(id)init;
@end

@interface QQBaseTableViewCell : QQTableViewCell {
	QQBaseCellModel* _cellModel;
}
-(void)setCellModel:(id)model;
-(void)dealloc;
@end

@interface QQPhotoUtil : NSObject {
}
+(CGRect)getThumbImageRegion:(id)region inThumbRect:(CGRect)thumbRect;
+(CGRect)getThumbImageShowRect:(id)rect thumbRegion:(CGRect)region inThumbRect:(CGRect)thumbRect;
+(CGRect)getThumbImageShowRect:(id)rect inThumbRect:(CGRect)thumbRect;
+(float)getMaximumZoomScale:(CGSize)scale inView:(CGSize)view;
+(CGRect)getFitWidthFrame:(CGSize)frame inView:(CGSize)view forOrientation:(int)orientation;
+(CGRect)getFitWidthFrame:(CGSize)frame inView:(CGSize)view;
+(BOOL)isLongImage:(CGSize)image inView:(CGSize)view;
@end

@interface QQLogInfo : NSObject <NSCoding, NSCopying> {
	long long _seq;
	double _recvPushTime;
	int _logLineNum;
	int _logSize;
	int _zipLogSize;
	int _reportResult;
	NSURLConnection* _httpConn;
	NSMutableData* _httpRecvData;
}
@property(retain, nonatomic) NSMutableData* httpRecvData;
@property(assign, nonatomic) NSURLConnection* httpConn;
@property(assign, nonatomic) int reportResult;
@property(assign, nonatomic) int zipLogSize;
@property(assign, nonatomic) int logSize;
@property(assign, nonatomic) int logLineNum;
@property(assign, nonatomic) double recvPushTime;
@property(assign, nonatomic) long long seq;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QQLogUploadInfoOnCrash : NSObject <NSCoding, NSCopying> {
	long long _uin;
	int _crashYear;
	int _crashMonth;
	int _crashDay;
	int _crashHour;
	int _uploadTimeStamp;
	int _uploadCount;
}
@property(assign, nonatomic) int uploadCount;
@property(assign, nonatomic) int uploadTimeStamp;
@property(assign, nonatomic) int crashHour;
@property(assign, nonatomic) int crashDay;
@property(assign, nonatomic) int crashMonth;
@property(assign, nonatomic) int crashYear;
@property(assign, nonatomic) long long uin;
-(void)cleanAfterUpload;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QQLogReporter : NSObject {
	NSString* _strOS;
	NSString* _strModelName;
	NSString* _strIMEI;
	NSMutableArray* _LogInfos;
	NSMutableArray* _recordLogInfos;
	QQLogUploadInfoOnCrash* _logUploadInfoOnCrash;
}
@property(retain, nonatomic) QQLogUploadInfoOnCrash* logUploadInfoOnCrash;
+(id)getInstance;
-(BOOL)logUploadOnCrash_CheckIsUpload:(tm*)upload;
-(void)logUploadOnCrash_RecordCrashTime;
-(void)logUploadOnCrash_RecordUin:(long long)uin;
-(void)logUploadOnCrash_CleanInfo;
-(void)logUploadOnCrash_SaveInfo;
-(void)logUploadOnCrash_LoadInfo;
-(id)logUploadOnCrash_PathName;
-(void)uploadLogFileToSSO:(const char*)sso logFilename:(const char*)filename;
-(void)uploadLogStringToSSO:(const char*)sso logString:(const char*)string;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)httpuploadSharpLog:(unsigned long long)log :(id)arg2;
-(void)updateLogInfoImpl:(id)impl;
-(void)prepareUploadLogImpl:(id)impl;
-(void)uploadLogInfoImpl:(id)impl;
-(void)uploadLogDataImpl:(id)impl;
-(id)getLoginUins;
-(void)checkReportLogFailInfo;
-(void)recordLogFailInfo:(id)info;
-(void)onHttpRecvError:(id)error;
-(void)onHttpRecvEnd:(id)end;
-(void)onHttpRecvData:(id)data data:(id)data2;
-(void)onHttpRecvBegin:(id)begin;
-(void)onHttpReportStart:(id)start seq:(long long)seq;
-(void)removeLogInfo:(id)info;
-(BOOL)isLogInfoExist:(long long)exist;
-(id)getLogInfo:(id)info seq:(long long*)seq;
-(id)getLogInfoFromRecord:(long long)record;
-(id)getLogInfo:(long long)info;
-(id)getLogInfoWithCreate:(long long)create;
-(void)cleanLogFailInfo;
-(void)saveLogFailInfo:(id)info;
-(id)loadLogFailInfo;
-(id)logFailInfoPathName;
-(void)uploadLogInfo:(long long)info failCode:(int)code;
-(void)uploadLogData:(long long)data isInitiative:(BOOL)initiative data:(id)data3 additionalInfo:(id)info;
-(void)updateLogInfo:(long long)info logLineNum:(int)num logSize:(int)size zipLogSize:(int)size4;
-(void)prepareUploadLog:(long long)log;
-(void)dealloc;
-(id)init;
@end

@interface PhotoBrowserNavigationController : UINavigationController {
	BOOL _isSupportAutorotate;
}
@property(assign, nonatomic) BOOL isSupportAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(id)initWithRootViewController:(id)rootViewController;
@end

@interface ImageUtil : NSObject {
}
+(float)getCompressRatio;
+(id)defaultScaleAndCompressImageToData:(id)data compressionQuality:(float)quality;
+(id)compressImageToData:(id)data compressionQuality:(float)quality;
+(id)defaultScaleAndCompressImage:(id)image compressionQuality:(float)quality;
+(id)defaultScaleImage:(id)image;
+(id)compressImage:(id)image compressionQuality:(float)quality;
+(id)scaleImageWithSize:(id)size size:(CGSize)size2;
@end

@interface MQHttpClientService : NSObject {
@private
	MQHttpTaskQueue* _postTaskQueue;
	MQHttpTaskQueue* _uploadTaskQueue;
	MQHttpTaskQueue* _downloadTaskQueue;
}
+(void)cancel:(int)cancel;
+(void)clearDelegatesAndCancel:(int)cancel;
+(int)status:(int)status;
+(int)start:(int)start;
+(int)postTaskWithUrl:(id)url headers:(id)headers data:(id)data resultObserver:(id)observer;
+(int)uploadTaskWithUrl:(id)url fromData:(id)data sliceMode:(int)mode sliceGenerator:(id)generator resultObserver:(id)observer;
+(int)uploadTaskWithUrl:(id)url fromFile:(id)file sliceMode:(int)mode sliceGenerator:(id)generator resultObserver:(id)observer;
+(int)downloadTaskWithUrl:(id)url toData:(id)data sliceMode:(int)mode resultObserver:(id)observer;
+(int)downloadTaskWithUrl:(id)url toFile:(id)file sliceMode:(int)mode resultObserver:(id)observer;
+(void)finalize;
+(void)initialize;
-(int)status:(int)status;
-(int)start:(int)start;
-(void)cancelAllTasks;
-(void)cancel:(int)cancel;
-(void)clearDelegatesAndCancel:(int)cancel;
-(void)cancelAllPostTasks;
-(int)postTaskWithUrl:(id)url headers:(id)headers data:(id)data resultObserver:(id)observer;
-(void)cancelAllUploadTasks;
-(int)uploadTaskWithUrl:(id)url fromData:(id)data sliceMode:(int)mode sliceGenerator:(id)generator resultObserver:(id)observer;
-(int)uploadTaskWithUrl:(id)url fromFile:(id)file sliceMode:(int)mode sliceGenerator:(id)generator resultObserver:(id)observer;
-(void)cancelAllDownloadTasks;
-(int)downloadTaskWithUrl:(id)url toData:(id)data sliceMode:(int)mode resultObserver:(id)observer;
-(int)downloadTaskWithUrl:(id)url toFile:(id)file sliceMode:(int)mode resultObserver:(id)observer;
-(id)getQueueOfTask:(int)task;
-(int)generatePostTaskID;
-(int)generateUploadTaskID;
-(int)generateDownloadTaskID;
-(unsigned short)generateTaskID;
-(void)dealloc;
-(id)init;
@end

@interface MQHttpDownloadTask : MQHttpTask {
	NSString* _destFile;
	NSMutableData* _destData;
	int _totalSize;
	int _downloadedSize;
	int _nextSliceSize;
	unsigned _nextSliceOffset;
	int _downloadPercent;
	BOOL _shouldContinue;
	NSFileHandle* _downloadFileHandle;
	NSMutableData* _downloadTempData;
	int _sliceMode;
	id<MQHttpDownloadObserver> _resultObserver;
}
@property(assign, nonatomic) id<MQHttpDownloadObserver> resultObserver;
@property(assign, nonatomic) int sliceMode;
@property(assign, nonatomic) int downloadPercent;
@property(retain, nonatomic) NSData* destData;
@property(retain, nonatomic) NSString* destFile;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request didReceiveData:(id)data;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)taskProgress;
-(void)taskFailed;
-(void)taskFinished;
-(void)downloadProgress:(int)progress taskID:(int)anId;
-(void)downloadResult:(int)result errorCode:(int)code taskID:(int)anId;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)run;
-(void)continueRun;
-(BOOL)setupNewRequest;
-(BOOL)setupNextRange;
-(BOOL)writeToDownloadFileWithData:(id)data flush:(BOOL)flush;
-(id)getDownloadFileHandle:(id)handle;
-(void)dealloc;
-(id)initWithUrl:(id)url toData:(id)data sliceMode:(int)mode resultObserver:(id)observer;
-(id)initWithUrl:(id)url toFile:(id)file sliceMode:(int)mode resultObserver:(id)observer;
-(id)initWithUrl:(id)url sliceMode:(int)mode resultObserver:(id)observer;
@end

@interface MQHttpPostTask : MQHttpTask {
	NSData* _postData;
	id<MQHttpPostObserver> _resultObserver;
}
@property(assign, nonatomic) id<MQHttpPostObserver> resultObserver;
@property(retain, nonatomic) NSData* postData;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request didReceiveData:(id)data;
-(void)taskFailed;
-(void)taskFinished;
-(void)postResult:(int)result errorCode:(int)code responseData:(id)data taskID:(int)anId;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)run;
-(void)buildRequestBody;
-(void)dealloc;
-(id)initWithUrl:(id)url headers:(id)headers data:(id)data resultObserver:(id)observer;
@end

@interface MQHttpRequest : NSOperation {
	int _requestID;
	int _transType;
	int _status;
	int _errorCode;
	NSString* _url;
	NSURL* _redirectURL;
	NSString* _requestMethod;
	NSMutableDictionary* _requestHeaders;
	NSMutableData* _postBody;
	NSString* _downloadDestFile;
	NSOutputStream* _downloadFileStream;
	NSMutableData* _responseData;
	BOOL _isNeedHandleData;
	BOOL _cancelled;
	BOOL _finished;
	unsigned long long _contentLength;
	unsigned long long _totalBytesReceived;
	unsigned long long _totalBytesSent;
	int _retryCount;
	int _retryMaxCount;
	int _timeOutDuration;
	MQTimer* _timer;
	id _userInfo;
	NSURLConnection* _urlConnection;
	id<MQHttpRequestDelegate> _requestDelegate;
	id<MQHttpProgressDelegate> _progressDelegate;
}
@property(assign) id<MQHttpProgressDelegate> progressDelegate;
@property(assign) id<MQHttpRequestDelegate> requestDelegate;
@property(retain) id userInfo;
@property(retain) MQTimer* timer;
@property(assign) int timeOutDuration;
@property(assign) int retryMaxCount;
@property(assign) int retryCount;
@property(assign) unsigned long long totalBytesSent;
@property(assign) unsigned long long totalBytesReceived;
@property(assign) unsigned long long contentLength;
@property(retain) NSMutableData* responseData;
@property(retain) NSString* downloadDestFile;
@property(retain) NSDictionary* requestHeaders;
@property(retain) NSString* requestMethod;
@property(retain) NSURL* redirectURL;
@property(retain) NSString* url;
@property(assign) int errorCode;
@property(assign) int status;
@property(assign) int transType;
@property(assign) int requestID;
+(id)requestWithURL:(id)url transType:(int)type;
+(void)runRequests;
+(id)threadForRequest;
-(void)timeOutWithDuration:(int)duration;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(BOOL)isFinished;
-(BOOL)isCancelled;
-(BOOL)isExecuting;
-(BOOL)isConcurrent;
-(void)main;
-(void)start;
-(void)cancelOnRequestThread;
-(void)reportFailed:(int)failed;
-(void)markAsFinished;
-(void)startConnection;
-(void)buildDownloadStream;
-(void)setRequestMethodWithTranstype:(int)transtype;
-(void)requestDidSendBytes:(id)request;
-(void)requestDidReceiveBytes:(id)request;
-(void)requestDidReceiveData:(id)request;
-(void)requestRedirected;
-(void)requestWillRedirectToURL:(id)request;
-(void)requestDidReceiveResponseHeaders:(id)request;
-(void)requestFailed;
-(void)requestFinished;
-(void)requestStarted;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)appendPostData:(id)data;
-(void)addRequestHeader:(id)header value:(id)value;
-(void)dealloc;
-(id)initWithURL:(id)url transType:(int)type;
-(id)initWithURL:(id)url;
@end

@interface MQHttpTask : NSObject <MQHttpRequestDelegate> {
	int _taskID;
	NSString* _url;
	NSMutableDictionary* _headers;
	MQHttpRequest* _request;
	id<MQHttpTaskManager> _taskQueue;
	NSData* _responseData;
	int _status;
	int _errorCode;
}
@property(assign, nonatomic) int errorCode;
@property(assign, nonatomic) int status;
@property(retain, nonatomic) NSData* responseData;
@property(retain, nonatomic) id<MQHttpTaskManager> taskQueue;
@property(retain, nonatomic) MQHttpRequest* request;
@property(retain, nonatomic) NSMutableDictionary* headers;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) int taskID;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)run;
-(void)dealloc;
-(id)initWithUrl:(id)url headers:(id)headers transType:(int)type;
@end

@interface MQHttpTaskQueue : NSObject <MQHttpTaskManager> {
	NSMutableArray* _runningQueue;
	NSMutableArray* _waitingQueue;
	NSMutableArray* _suspendQueue;
	NSMutableDictionary* _taskList;
	int _maxConcurrentCount;
}
@property(assign, nonatomic) int maxConcurrentCount;
-(int)taskStatus:(int)status;
-(void)clearDelegatesAndCancelAllTasks;
-(void)cancel:(int)cancel;
-(void)clearDelegatesAndCancel:(int)cancel;
-(void)removeTask:(id)task;
-(int)pauseTask:(int)task;
-(int)startTask:(int)task;
-(void)addTask:(id)task;
-(void)scheduleTask;
-(id)getFromListWithTaskID:(int)taskID;
-(void)removeOutOfList:(id)list;
-(void)addToListWithTask:(id)task;
-(void)dealloc;
-(id)init;
@end

@interface MQHttpUploadTask : MQHttpTask {
	NSString* _postFile;
	NSData* _postData;
	NSData* _sliceData;
	unsigned _sliceSize;
	unsigned _sliceIndex;
	unsigned _nextSliceOffset;
	int _totoalSize;
	int _uploadedSize;
	int _currentSliceSize;
	unsigned _uploadPercent;
	BOOL _shouldContinue;
	NSFileHandle* _uploadFileHandle;
	int _uploadFileSize;
	int _sliceMode;
	id<MQHttpUploadSliceGenerator> _sliceGenerator;
	id<MQHttpUploadObserver> _resultObserver;
}
@property(assign, nonatomic) id<MQHttpUploadObserver> resultObserver;
@property(assign, nonatomic) id<MQHttpUploadSliceGenerator> sliceGenerator;
@property(assign, nonatomic) int sliceMode;
@property(readonly, assign, nonatomic) unsigned uploadPercent;
@property(retain, nonatomic) NSData* postData;
@property(retain, nonatomic) NSString* postFile;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request didReceiveData:(id)data;
-(void)taskProgress;
-(void)taskFailed;
-(void)taskFinished;
-(void)uploadProgress:(int)progress taskID:(int)anId;
-(void)uploadResult:(int)result errorCode:(int)code responseData:(id)data taskID:(int)anId;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)run;
-(void)continueRun;
-(BOOL)setupNewRequest;
-(BOOL)generateSliceData;
-(void)generateSliceDataFromPostData;
-(void)generateSliceDataFromPostFile;
-(void)getPostDataFromFile:(id)file;
-(void)dealloc;
-(id)initWithUrl:(id)url fromData:(id)data sliceMode:(int)mode sliceGenerator:(id)generator resultObserver:(id)observer;
-(id)initWithUrl:(id)url fromFile:(id)file sliceMode:(int)mode sliceGenerator:(id)generator resultObserver:(id)observer;
-(id)initWithUrl:(id)url sliceMode:(int)mode sliceGenerator:(id)generator resultObserver:(id)observer;
@end

@interface UIGroupListView : UITableView {
}
-(void)setContentOffset:(CGPoint)offset;
@end

@interface QQFriendGroupListViewController : QQViewController <QIMTextInputDelegate, UITableViewDelegate, UITableViewDataSource, QQHeadAlertViewDelegate, UIAlertViewDelegate, UITextFieldDelegate, UIScrollViewDelegate> {
	UITableView* _tableView;
	NSMutableArray* _tableData;
	UIButton* _appendGroupButton;
	int _seletedGroupID;
	long long _uin;
	int _groupIDAdded;
	int _groupIDToMove;
	BOOL _requestingUpdateGroup;
	UITextField* _alertTextField;
	UITextField* _alertTextField_system;
	id<IGroupSelectDelegate> _delegate;
@private
	NSString* _groupNameToAdd;
}
@property(retain, nonatomic) NSString* groupNameToAdd;
@property(assign, nonatomic) id<IGroupSelectDelegate> delegate;
-(void)onPacketError:(id)error;
-(void)notifyMoveGroupMem:(id)mem;
-(void)delayPopController;
-(void)notifyRequestBuddyListResult;
-(void)notifyAddGroup:(id)group;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)scrollToSelectedRow:(BOOL)selectedRow;
-(int)getSelectedRow;
-(void)onAppendGroup:(id)group;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)reloadTableData;
-(void)dealloc;
-(id)initWithUIN:(long long)uin;
-(id)initWithGroupID:(int)groupID;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface QQFriendRemarkViewController : QQViewController <QIMTextInputDelegate, UITextFieldDelegate, IGroupSelectDelegate> {
	UITextField* _remarkTextField;
	UILabel* _groupLabel;
	UIButton* _groupButton;
	long long _uin;
	int _groupID;
	NSString* _groupName;
	NSString* _remark;
	BOOL _dataInited;
	BOOL _autoRemark;
	BOOL _requestFriend;
	BOOL _isFriend;
	NSDictionary* _settingDic;
	NSString* _requestMsg;
	QQMessageModel* _msgModel;
	UIViewController* _rootController;
	NSString* _succeedTips;
	NSData* _sigData;
	QQFriendAddTypeModel* _friendAddTypeModel;
	UserInfoHead* _headView;
	UIScrollView* _scrollView;
	float _subViewsHeight;
@private
	BOOL _isAddContactFri;
	NSString* _mobilePhone;
}
@property(retain, nonatomic) QQFriendAddTypeModel* friendAddTypeModel;
@property(retain, nonatomic) NSString* mobilePhone;
@property(assign, nonatomic) BOOL isAddContactFri;
@property(retain, nonatomic) NSData* sigData;
@property(retain, nonatomic) NSString* succeedTips;
@property(retain, nonatomic) QQMessageModel* msgModel;
@property(retain, nonatomic) NSString* requestMsg;
@property(retain, nonatomic) NSDictionary* settingDic;
@property(assign, nonatomic) BOOL autoRemark;
@property(retain, nonatomic) NSString* remark;
@property(retain, nonatomic) NSString* groupName;
@property(assign, nonatomic) int groupID;
@property(assign, nonatomic) long long uin;
-(void)delayEnableRightButton;
-(void)actionGetUserInfo:(id)info;
-(void)onAnswerAddedFriendResponse:(id)response;
-(void)notifyAnswerAddedFriendFailed;
-(void)onAddFriendResponse:(id)response;
-(void)notifyAddFriendFailed;
-(void)onFriendRequestConfirm:(id)confirm;
-(void)notifySelectedGroupID:(int)anId;
-(void)onPacketError:(id)error;
-(void)notifyMoveGroupMem:(id)mem;
-(void)notifyMoveGroupMemFailed;
-(void)notifyModifyRemark:(id)remark;
-(void)notifyModifyRemarkFailed;
-(void)notifyAutoInfo:(id)info;
-(void)notifyAutoInfoFailed;
-(void)fillLocalRemarkAndGroup;
-(int)getGroupIDByUIN:(long long)uin;
-(void)actionFinished;
-(BOOL)commitRemarkAndGroup;
-(void)popSelf;
-(void)actionChooseGroup;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)groupButtonTouch:(id)touch;
-(void)resetHighlight:(id)highlight;
-(void)loadView;
-(void)initHeadView;
-(void)dealloc;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)onAnswerRejectContactFriendResponse:(id)response;
-(void)onAnswerAddedContactFriendResponse:(id)response;
-(id)initWithUIN:(long long)uin requestFriend:(BOOL)aFriend rootController:(id)controller;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface QZoneFeedNotifyView : UIView {
@private
	NSString* title;
}
@property(retain, nonatomic) NSString* title;
+(void)showNotice:(id)notice atRootView:(id)rootView;
+(void)showFeedUpdateCount:(int)count atRootView:(id)rootView;
-(void)dealloc;
-(void)hideView;
-(void)showView;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CFImageGetter : NSObject <TTURLRequestDelegate> {
	UIImage* image;
	NSString* _mUrl;
	id<CFImageGetterDelegate> delegate;
	int index;
	TTURLRequest* aRequest;
}
@property(assign, nonatomic) TTURLRequest* aRequest;
@property(assign, nonatomic) int index;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSString* mUrl;
@property(assign, nonatomic) id<CFImageGetterDelegate> delegate;
-(void)dealloc;
-(void)requestDidCancelLoad:(id)request;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)requestDidFinishLoad:(id)request;
-(void)requestDidStartLoad:(id)request;
-(void)cancel;
-(void)updata;
-(id)initWithUrl:(id)url Delegate:(id)delegate;
@end

@interface CFSelObject : NSObject {
	SEL _selector;
	id _object;
}
@property(assign, nonatomic) id object;
@property(assign, nonatomic) SEL selector;
-(void)dealloc;
@end

@interface CFImageGetterCenter : NSObject <CFImageGetterDelegate> {
	NSMutableDictionary* _centerData;
	NSMutableDictionary* _centerSelData;
}
+(id)shareInstances;
-(void)requestImageEnd:(id)end;
-(void)requestImageStart:(id)start;
-(void)removeObject:(id)object;
-(void)addObject:(id)object withTarget:(SEL)target forUrl:(id)url;
-(void)dealloc;
-(id)init;
@end

@interface Analytics : NSObject {
	BOOL analyticsEnabled;
	BOOL userEnableSpeedtrack;
	BOOL userEnableEventUpload;
	BOOL userEnableCrashLog;
	LocalStrategy* strategy;
	NSMutableArray* anaModules;
	id<AnaUploadConformer> uploadConfirmer;
	BOOL enableBeforeServerStrategy;
	BOOL cleanAfterFetch;
	int workType;
	BOOL sdkMonitorEnabled;
	int status;
	long long startTime;
	long long serverInitTime;
	long long backGroundTime;
	long long resumeTime;
}
@property(assign, nonatomic) long long resumeTime;
@property(assign, nonatomic) long long backGroundTime;
@property(assign, nonatomic) long long serverInitTime;
@property(assign, nonatomic) long long startTime;
@property(assign, nonatomic) BOOL sdkMonitorEnabled;
@property(assign, nonatomic) int workType;
@property(assign, nonatomic) BOOL cleanAfterFetch;
@property(assign, nonatomic) BOOL enableBeforeServerStrategy;
@property(retain, nonatomic) id<AnaUploadConformer> uploadConfirmer;
@property(retain, nonatomic) NSMutableArray* anaModules;
@property(retain, nonatomic) LocalStrategy* strategy;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) BOOL userEnableCrashLog;
@property(assign, nonatomic) BOOL userEnableEventUpload;
@property(assign, nonatomic) BOOL userEnableSpeedtrack;
@property(assign, nonatomic) BOOL analyticsEnabled;
+(id)getDefualtAnalytics;
-(void)dealloc;
-(BOOL)fetchServerStrategy;
-(BOOL)fetchLocalStrategy;
-(void)cleanAnalytics;
-(void)doRefreshStrategy;
-(void)refreshNetInfo;
-(void)onAsynRefreshNetInfoCallBack;
-(void)initTimer;
-(BOOL)initLocalService;
-(void)startRefreshNetfnfoTimer;
-(BOOL)enableAnlytics:(int)anlytics uin:(id)uin gatewayIP:(id)ip;
-(id)init;
@end

@interface AnaNetFlowRecorder : NSObject <AnaCommunicationNetFlowDelegate> {
	long totalFlow;
	long toDayFlow;
	long totalWiFiFlow;
	long toDayWiFiFlow;
	long totalDownFlow;
	long toDayDownFlow;
	long totalDownWiFiFlow;
	long toDayDownWiFiFlow;
	int todayCount;
	int totalCount;
	int todayWifiCount;
	int totalWifiCount;
@private
	BOOL enabled;
	NSString* dayStr;
	NSString* monthStr;
	NSDateFormatter* dfm;
	NSDateFormatter* mfm;
	long maxDayFlow;
	BOOL dayFlowRetained;
}
@property(assign, nonatomic) BOOL dayFlowRetained;
@property(assign, nonatomic) long maxDayFlow;
+(id)sharedInstance;
-(void)resetDayFlowSwitch;
-(void)initResetDayFlowTimer:(id)timer;
-(void)onNetFlowHappened:(id)happened status:(id)status elapse:(long)elapse isWiFi:(BOOL)fi upFlowBytes:(long)bytes downFlowBytes:(long)bytes6 reqTime:(double)time;
-(BOOL)cleanPersistData;
-(BOOL)clean;
-(BOOL)persistData;
-(BOOL)loadData;
-(BOOL)enable:(BOOL)enable;
-(id)init;
@end

@interface AnaServerStrategyProcesser : NSObject {
}
+(id)sharedInstance;
-(BOOL)applyStrategyToModule;
-(void)updateModuleStrategy:(id)strategy;
-(BOOL)analyzeStrategy:(id)strategy;
-(void)procees:(id)procees;
@end

@interface LocalStrategy : AnalyticsPersistObject {
	int zipAlg;
	int encAlg;
	NSString* encKey;
	NSString* encPubKey;
	int uploadStrategy;
	NSString* uploadServer;
	int maxPkgSize;
	int testCount;
	BOOL enableSpeedTrack;
	BOOL enableEventRecord;
	BOOL enableCrashReport;
	int dbMaxSize;
}
@property(assign, nonatomic) int dbMaxSize;
@property(assign, nonatomic) BOOL enableCrashReport;
@property(assign, nonatomic) BOOL enableEventRecord;
@property(assign, nonatomic) BOOL enableSpeedTrack;
@property(assign, nonatomic) int testCount;
@property(assign, nonatomic) int maxPkgSize;
@property(retain, nonatomic) NSString* uploadServer;
@property(assign, nonatomic) int uploadStrategy;
@property(retain, nonatomic) NSString* encPubKey;
@property(retain, nonatomic) NSString* encKey;
@property(assign, nonatomic) int encAlg;
@property(assign, nonatomic) int zipAlg;
+(id)getObjWithDefaultSet;
+(id)getDefaultHash;
+(long)getDefaultId;
-(void)dealloc;
-(void)checkSafe;
-(BOOL)setEncodeData:(id)data;
-(id)encodeData;
-(id)init;
@end

@interface AnaMixDataPersistDataMaxSizeChecker : NSObject <AnaPersistListener> {
}
+(id)sharedInstance;
-(BOOL)checkMixSizeForUpload:(int)upload;
-(BOOL)checkMaxSizeWithStrategy;
-(BOOL)checkOnstartUploadWithStrategy;
-(void)onPersist;
-(void)setMaxSizeDataListener:(id)listener;
@end

@interface AnaMixDataUploader : NSObject <AnaUplaodNotifier, AnaUploader> {
	BOOL isUploading;
}
@property(assign, nonatomic) BOOL isUploading;
+(id)sharedInstance;
-(BOOL)deleteUploadData:(id)data;
-(id)getUploadPkg:(long)pkg cleanData:(BOOL)data;
-(void)doUpload;
-(void)checkAndUpload;
-(void)checkAndDoOnstartUpload;
-(BOOL)uploadFinishWithResult:(BOOL)result error:(id*)error;
-(id)getUploadData:(BOOL)data error:(id*)error;
-(void)reachMaxsize;
-(id)getRegistedUploadTypes;
-(void)removeUploadObjectTypeUsingKey:(int)key;
-(void)registUploadObjectType:(Class)type withKey:(int)key;
-(id)init;
@end

@interface AnaInitialQueryHandler : AnalyticsNetwokHandler {
	BOOL initUploadExecuted;
}
-(void)finishWithResponse:(id)response;
-(void)failWithResponse:(id)response;
-(id)init;
@end

@interface AnalyticsNetwokHandler : AnaNetworkHandlerBase {
}
-(void)dealloc;
-(void)finishWithResponse:(id)response;
-(void)failWithResponse:(id)response;
-(void)retryRequest;
-(void)onRequestCancel;
-(void)prepare:(id)prepare;
-(id)init;
@end

@interface AnaMixDataUploadHander : AnalyticsNetwokHandler {
}
-(void)finishWithResponse:(id)response;
-(void)failWithResponse:(id)response;
@end

@interface AnaDataPersistQueue : NSObject {
	NSMutableArray* headList;
	NSMutableArray* tailList;
	int maxSize;
	int currSize;
}
+(id)sharedInstance;
-(void)dealloc;
-(id)getAllObjects;
-(id)findObjBySelector:(SEL)selector andReturn:(id)aReturn;
-(id)fetchAllObjectsAndClean;
-(void)addToTailList:(id)tailList;
-(void)addToHeadList:(id)headList;
-(void)addObject:(id)object;
-(BOOL)isFUll;
-(int)getCurrSize;
-(int)getMaxSize;
-(void)setMaxSize:(int)size;
-(id)init;
@end

@interface AnaLocalDataRecordInterface : NSObject {
	int maxTime;
}
+(id)sharedInstance;
-(void)dealloc;
-(int)hasBufferData;
-(void)flushObjectsToDB;
-(void)flushToPersist;
-(void)notifyToPersist;
-(void)timerFire;
-(void)initTimer;
-(void)saveObject:(id)object;
-(id)findObjBySelector:(SEL)selector andReturn:(id)aReturn;
-(void)saveObjects:(id)objects;
-(BOOL)isFull;
-(void)setMaxSize:(int)size;
-(void)setMaxTriggerTime:(int)time;
-(void)setPersistListener:(id)listener;
-(id)init;
@end

@interface ANAPersistPropRange : NSObject {
	NSNumber* mix;
	NSNumber* max;
}
@property(retain, nonatomic) NSNumber* max;
@property(retain, nonatomic) NSNumber* mix;
-(void)dealloc;
@end

@interface AnalyticsPersistObject : NSObject <AnalyticsPersistEncoding> {
	long id;
	long long time;
	long encLength;
	int priority;
	int type;
	long long md5;
	int count;
}
@property(assign, nonatomic) int count;
@property(assign, nonatomic) long long md5;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) int priority;
@property(assign, nonatomic) long encLength;
@property(assign, nonatomic) long long time;
@property(assign, nonatomic) long id;
-(void)dealloc;
-(BOOL)setEncodeData:(id)data;
-(id)encodeData;
-(id)init;
@end

@interface AnalyticsPersistObjectRegister : NSObject {
}
+(id)sharedInstance;
-(id)getRegistedTypes;
-(Class)getPersistObjectType:(int)type;
-(void)registPersisteObjectType:(Class)type withKey:(int)key;
@end

@interface AnaSqlitePersistHandler : NSObject <AnalyticsDataPersiter> {
@private
	NSString* anaDbPath;
	NSString* dbFile;
	sqlite3* database;
	BOOL isInited;
}
+(id)getPersistObjectByType:(int)type;
+(id)getDefaultHandler;
+(id)getDefaultHandlerWithOutInitDB;
-(BOOL)cleanExpireDatas:(id*)datas;
-(id)getObjectsWithCountOfTypes:(id)types count:(int)count error:(id*)error;
-(int)getObjectCountOfTypes:(id)types err:(id*)err;
-(id)getObjectsWithCountOfType:(int)type count:(int)count error:(id*)error;
-(id)getObjectsByCondition:(id)condition error:(id*)error;
-(id)createQuerySqlByCondition:(id)condition error:(id*)error;
-(id)createPropSQL:(id)sql forProp:(id)prop error:(id*)error;
-(id)createSqlByAnaRangey:(id)rangey forProp:(id)prop error:(id*)error;
-(id)createSqlByArray:(id)array forProp:(id)prop withOp:(id)op error:(id*)error;
-(int)getObjectCountOfType:(int)type err:(id*)err;
-(id)getObjectsWithCount:(int)count error:(id*)error;
-(id)getPersistObjectFromResultSet:(sqlite3_stmt*)resultSet error:(id*)error;
-(int)getObjectCount:(id*)count;
-(BOOL)deleteObjectsByType:(int)type error:(id*)error;
-(BOOL)deleteObjects:(id)objects error:(id*)error;
-(BOOL)deleteObjectsByIds:(id)ids error:(id*)error;
-(BOOL)deleteObjectById:(long)anId error:(id*)error;
-(BOOL)saveObjects:(id)objects error:(id*)error;
-(id)getObjectById:(long)anId error:(id*)error;
-(BOOL)updateObject:(id)object error:(id*)error;
-(BOOL)saveObject:(id)object error:(id*)error;
-(id)getLocalStrategy:(id*)strategy;
-(BOOL)updateLocalStrategy:(id)strategy error:(id*)error;
-(void)dealloc;
-(BOOL)tableExists:(id)exists;
-(BOOL)executeUpdateSQL:(id)sql error:(id*)error;
-(BOOL)dropAllTables:(id*)tables;
-(BOOL)dropDBTables:(id*)tables;
-(BOOL)buildDBTables:(id*)tables;
-(BOOL)rebuildDBTables:(id*)tables;
-(BOOL)isInited;
-(BOOL)initDB:(id*)db;
-(BOOL)resetDBWithNewPath:(id)newPath error:(id*)error;
-(BOOL)setDBPathStr:(id)str;
@end

@interface AnalyticsOperationCenter : NSObject {
	NSOperationQueue* opQueue;
	NSOperationQueue* netInfoRefreshQueue;
}
+(id)sharedInstance;
-(void)dealloc;
-(void)addSelector:(SEL)selector target:(id)target obj:(id)obj;
-(unsigned)getRefreshNetinfoOperationCount;
-(void)addRefreshNetinfoThreadOperation:(id)operation;
-(void)addOperation:(id)operation;
-(BOOL)cancelAll;
-(id)init;
@end

@interface AnaModel : NSObject {
	NSString* appId;
	NSString* appVersion;
	NSString* sdkId;
	NSString* sdkVersion;
	NSString* appVerbuild;
	int platformId;
	NSString* hardwareOs;
	NSString* qua;
	NSString* guid;
	NSString* gatewayIP;
	long long serverTimeDelta;
	BOOL gotServerTime;
	NSString* reserved;
	NSString* osVer;
	float osVerFloat;
	NSString* apn;
	NSString* contact;
	NSString* executeable;
	unsigned uin;
}
@property(retain, nonatomic) NSString* executeable;
@property(retain, nonatomic) NSString* contact;
@property(retain, nonatomic) NSString* apn;
@property(assign, nonatomic) float osVerFloat;
@property(retain, nonatomic) NSString* osVer;
@property(retain, nonatomic) NSString* reserved;
@property(retain, nonatomic) NSString* appVerbuild;
@property(retain, nonatomic) NSString* gatewayIP;
@property(retain, nonatomic) NSString* guid;
@property(retain, nonatomic) NSString* qua;
@property(assign, nonatomic) BOOL gotServerTime;
@property(assign, nonatomic) long long serverTimeDelta;
@property(retain, nonatomic) NSString* hardwareOs;
@property(assign, nonatomic) int platformId;
@property(retain, nonatomic) NSString* sdkVersion;
@property(retain, nonatomic) NSString* sdkId;
@property(retain, nonatomic) NSString* appVersion;
@property(retain, nonatomic) NSString* appId;
+(id)getDefualtAnaModel;
-(void)dealloc;
-(int)getIntUin;
-(id)init;
@end

@interface AnaProtocolDataRegister : NSObject {
}
+(id)sharedInstance;
-(id)getRequestObjectTypeKeys;
-(Class)getRequestObjectType:(int)type;
-(Class)getResponseObjectType:(int)type;
-(void)registRequestObjectType:(Class)type withKey:(int)key;
-(void)registResponseObjectType:(Class)type withKey:(int)key;
@end

@interface NSMixPackage : NSObject <AnaNSObjTransToJceBufferProtocol> {
	NSMutableDictionary* mixMap;
}
@property(retain, nonatomic) NSMutableDictionary* mixMap;
-(void)dealloc;
-(void)addUploadElements:(id)elements;
-(id)getUploadElements;
-(void)createWUPModle:(MixPackage*)modle;
-(id)initWithMXWUPModel:(MixPackage*)mxwupmodel;
-(void)setDataToBuffer:(JceOutputStream<analyticstaf::BufferWriter>*)buffer;
@end

@interface NSRequestPackage : NSObject {
	BOOL platformId;
	NSString* productId;
	NSString* productVersion;
	NSString* sdkId;
	NSString* sdkVersion;
	int cmd;
	id<AnaNSObjTransToJceBufferProtocol> sBuffer;
	NSString* hardwareOs;
	NSString* qua;
	BOOL encryType;
	BOOL zipType;
	NSString* appVerBuild;
	NSString* reserved;
}
@property(retain, nonatomic) NSString* reserved;
@property(retain, nonatomic) NSString* appVerBuild;
@property(assign, nonatomic) BOOL zipType;
@property(assign, nonatomic) BOOL encryType;
@property(retain, nonatomic) NSString* qua;
@property(retain, nonatomic) NSString* hardwareOs;
@property(retain, nonatomic) id<AnaNSObjTransToJceBufferProtocol> sBuffer;
@property(assign, nonatomic) int cmd;
@property(retain, nonatomic) NSString* sdkVersion;
@property(retain, nonatomic) NSString* sdkId;
@property(retain, nonatomic) NSString* productVersion;
@property(retain, nonatomic) NSString* productId;
@property(assign, nonatomic) BOOL platformId;
+(id)initWithData:(id)data prodVersion:(id)version sdkId:(id)anId sdkVer:(id)ver cmd:(int)cmd sBuffer:(id)buffer;
-(void)dealloc;
-(void)createWUPModel:(RequestPackage*)model;
@end

@interface NSResponsePackage : NSObject {
	BOOL result;
	int cmd;
	NSObject* sBuffer;
	NSString* gateWayIp;
	BOOL encryType;
	BOOL zipType;
	long long serverTime;
}
@property(assign, nonatomic) long long serverTime;
@property(assign, nonatomic) BOOL zipType;
@property(assign, nonatomic) BOOL encryType;
@property(retain, nonatomic) NSString* gateWayIp;
@property(retain, nonatomic) NSObject* sBuffer;
@property(assign, nonatomic) int cmd;
@property(assign, nonatomic) BOOL result;
+(void)setUploadStrategy:(ResponsePackage*)strategy resp:(id)resp;
+(void)setSecurityStrategy:(ResponsePackage*)strategy resp:(id)resp;
+(void)setAllStrategy:(ResponsePackage*)strategy resp:(id)resp;
+(id)initWithWUPModel:(ResponsePackage*)wupmodel;
-(void)dealloc;
@end

@interface NSSecurityStrategyPackage : NSObject {
	NSString* encryKey;
	NSString* encryPublicKey;
	int encryAlgorithm;
	int zipAlgorithm;
}
@property(assign, nonatomic) int zipAlgorithm;
@property(assign, nonatomic) int encryAlgorithm;
@property(retain, nonatomic) NSString* encryPublicKey;
@property(retain, nonatomic) NSString* encryKey;
-(void)dealloc;
-(id)initWithSecWUPModel:(SecurityStrategyPackage*)secWUPModel;
-(void)readData:(JceInputStream<analyticstaf::BufferReader>)data writeToObj:(id)obj;
@end

@interface NSUploadStrategyPackage : NSObject {
	int testCount;
	int maxPackageSize;
	int uploadStrategy;
	NSString* uploadServer;
	NSDictionary* moduleStrategy;
}
@property(assign, nonatomic) int uploadStrategy;
@property(assign, nonatomic) int maxPackageSize;
@property(assign, nonatomic) int testCount;
@property(retain, nonatomic) NSDictionary* moduleStrategy;
@property(retain, nonatomic) NSString* uploadServer;
-(void)dealloc;
-(id)initWithUpWUPModel:(UploadStrategyPackage*)upWUPModel;
@end

@interface AnaNetworkHandlerBase : NSOperation <AnaCommunicationRequestDelegate> {
	BOOL _bExecuting;
	BOOL _bFinished;
	BOOL _bCancelled;
	BOOL _toBeCancelld;
	AnaRequestDataPackage* _request;
	id<CommunicateMethod> _networkEngine;
	int errorFlag;
	int currentRetryCount;
}
@property(retain, nonatomic) id<CommunicateMethod> engine;
@property(retain, nonatomic) AnaRequestDataPackage* request;
-(void)dealloc;
-(void)doCancel;
-(void)cancel;
-(void)failWithResponse:(id)response;
-(void)finishWithResponse:(id)response;
-(void)succeedWithResponse:(id)response;
-(void)retryRequest;
-(void)failWithError:(id)error;
-(void)startRunloop:(double)runloop;
-(void)prepare:(id)prepare;
-(void)start;
-(BOOL)isCancelled;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isConcurrent;
-(void)main;
@end

@interface AnaNetWorkHandlerQueue : NSOperationQueue {
	NSMutableDictionary* _functionNameToHandler;
}
+(id)sharedInstance;
-(void)cancelAllOperations;
-(void)cancelRequest:(id)request;
-(id)addRequest:(id)request;
-(void)registHandlerClass:(Class)aClass forKey:(id)key;
-(id)init;
@end

@interface AnaRequestDataPackage : NSObject {
	NSRequestPackage* requestPackage;
	NSString* handlerKey;
	int priority;
	BOOL needRetry;
	int retryCount;
	double retryDuratuion;
	NSString* serverUrl;
	NSString* reqKey;
	NSString* reqServant;
	NSString* reqFunc;
}
@property(retain, nonatomic) NSString* reqFunc;
@property(retain, nonatomic) NSString* reqServant;
@property(retain, nonatomic) NSString* reqKey;
@property(retain, nonatomic) NSString* serverUrl;
@property(assign, nonatomic) double retryDuratuion;
@property(assign, nonatomic) int retryCount;
@property(assign, nonatomic) BOOL needRetry;
@property(assign, nonatomic) int priority;
@property(retain, nonatomic) NSString* handlerKey;
@property(retain, nonatomic) NSRequestPackage* requestPackage;
-(void)dealloc;
-(id)setWupPackageKey:(id)key servant:(id)servant func:(id)func;
-(id)initWithRequestPackage:(id)requestPackage priority:(int)priority handlerKey:(id)key serverUrl:(id)url;
-(id)init;
@end

@interface CommunicateInterface : NSObject <CommunicateMethod> {
	NSString* servUrl;
	NSString* requestServant;
	NSString* requestFunc;
	NSString* requestKey;
	int zipAlg;
	int encAlg;
	NSString* encKey;
	NSString* encPubKey;
	BOOL isFinish;
	BOOL isRunning;
	id<AnaCommunicationRequestDelegate> delegate;
	NSMutableData* respData;
	NSURLConnection* _connection;
	int connectionTimeOut;
	NSTimer* _timer;
	int _nTimeOut;
	int _nDoTimeOut;
	int _nTimeOutCount;
	BOOL _cancelled;
	double reqTime;
	double finishTime;
	BOOL isWiFi;
	long upFlow;
	long downFlow;
	NSData* retryPostData;
}
@property(assign, nonatomic) long downFlow;
@property(assign, nonatomic) long upFlow;
@property(assign, nonatomic) BOOL isWiFi;
@property(assign, nonatomic) double finishTime;
@property(assign, nonatomic) double reqTime;
@property(retain, nonatomic) NSData* retryPostData;
@property(assign, nonatomic) int connectionTimeOut;
@property(retain, nonatomic) NSString* encPubKey;
@property(retain, nonatomic) NSString* encKey;
@property(assign, nonatomic) int encAlg;
@property(assign, nonatomic) int zipAlg;
@property(retain, nonatomic) NSString* requestKey;
@property(retain, nonatomic) NSString* requestFunc;
@property(retain, nonatomic) NSString* requestServant;
@property(retain, nonatomic) NSString* servUrl;
-(void)dealloc;
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)communicateWithSeverAsync:(id)severAsync delegate:(id)delegate;
-(void)handleTimer:(id)timer;
-(void)clearTimer;
-(void)clearState;
-(id)init;
@end

@interface AnaBundleUtil : NSObject {
}
+(id)getRDMCIBuildUUID;
+(id)getBundleExe;
+(id)getBundleVersion;
+(id)getBundleName;
+(id)getBundleId;
@end

@interface AnaDeviceUtil : NSObject {
}
+(BOOL)isOS3;
+(BOOL)isArmV6;
+(float)getFreeSDCard;
+(int)getBatteryLevel;
+(float)getCpuUsage;
+(float)getFreeMemory;
+(float)getFreeSpace;
+(id)getCurrentTime;
+(double)getTime;
+(id)getOSModel;
+(id)getOSName;
+(id)get_sys_buildver;
+(id)getOSVersion;
+(id)getDeviceModel;
+(id)getDeviceName;
+(int)modelType;
+(id)model;
+(id)modelName;
@end

@interface AnaEncryptUtil : NSObject {
}
+(id)deCryptDES:(id)des key:(id)key;
+(id)enCryptDES:(id)des key:(id)key;
+(id)MD5:(id)a5;
+(id)getEncrypt:(int)encrypt;
@end

@interface DESAnaEncryptUtil : NSObject <AnaEncrypt> {
}
-(id)decrypt:(id)decrypt key:(id)key;
-(id)encrypt:(id)encrypt key:(id)key;
@end

@interface SAXAnaEncryptUtil : NSObject <AnaEncrypt> {
}
-(id)decrypt:(id)decrypt key:(id)key;
-(id)encrypt:(id)encrypt key:(id)key;
@end

@interface AnaErrorPopulator : NSObject {
}
+(BOOL)populateError:(id*)error errnoVal:(int)val description:(id)description;
@end

@interface AnaNetworkUtil : NSObject {
}
+(id)getDNSServerIP;
+(id)getAPN;
+(BOOL)activeWLAN;
+(BOOL)is2G;
+(BOOL)activeWWAN;
+(BOOL)networkAvaliable;
+(void)pingReachabliltyInternal;
+(id)localWiFiIPAddress;
+(id)addressFromURL:(id)url;
+(id)ipForHost:(id)host;
+(id)localHostname;
+(id)localIPAddress;
@end

@interface AnaWupWrapHelper : NSObject {
}
-(id)createRspData:(id)data rspKey:(id)key encPubKey:(id)key3 error:(id*)error;
-(id)createReqData:(id)data reqKey:(id)key reqServant:(id)servant reqFunc:(id)func zipALg:(int)lg encAlg:(int)alg encKey:(id)key7 error:(id*)error;
@end

@interface AnaZipUtil : NSObject {
}
+(id)gzipCompress:(id)compress;
+(id)getAnaZipUtil:(int)util;
@end

@interface ZipAnaZipUtil : NSObject <AnaZip> {
}
-(id)unzip:(id)unzip;
-(id)zip:(id)zip;
@end

@interface GZipAnaZipUtil : NSObject <AnaZip> {
}
-(id)unzip:(id)unzip;
-(id)zip:(id)zip;
@end

@interface AnaCrashUploadHandler : AnalyticsNetwokHandler {
}
-(void)finishWithResponse:(id)response;
-(void)failWithResponse:(id)response;
@end

@interface AnalyticsCrashModule : NSObject <AnalyticsModule> {
}
+(id)sharedInstance;
-(BOOL)uploadModuleHistoryData;
-(BOOL)isEnabled;
-(BOOL)checkAndEnable;
@end

@interface CrashHandler : NSObject {
	NSDateFormatter* dfm;
}
+(id)sharedInstance;
-(id)getCrashBeforeTodayWithOneCount;
-(id)getCrashBeforeTodayWithMoreThanOneCount;
-(BOOL)doUploadPostProcess:(id)process;
-(id)getCrashWithZeroCount;
-(long long)getTimeOfTodayStart;
-(BOOL)updateCrash:(id)crash;
-(id)getCrashWithMD5:(long long)md5;
-(id)getCrashedNeedUpload:(int)upload;
-(BOOL)cleanCrashReports:(id)reports;
-(BOOL)persistCrashToDB:(id)db;
-(BOOL)saveCrashData;
-(long long)getLastCrashTime;
-(void)persistLastCrashTime:(long long)time;
-(BOOL)expExist;
-(BOOL)cleanAllCrashReport;
-(BOOL)cleanCrashReport:(long)report;
-(id)init;
@end

@interface CrashReportData : NSObject {
	long long time;
	NSString* type;
	NSString* error;
	NSString* address;
	NSString* errorStack;
	NSString* thread;
	float cpu;
	int battery;
	float freeMem;
	float freeStoreage;
	float freesdcard;
	NSString* IMEI;
	NSString* crashPath;
	NSString* backPath;
	NSString* binInfo;
	NSString* processName;
	NSArray* crashStackShortNames;
}
@property(retain, nonatomic) NSArray* crashStackShortNames;
@property(retain, nonatomic) NSString* processName;
@property(retain, nonatomic) NSString* binInfo;
@property(retain, nonatomic) NSString* backPath;
@property(retain, nonatomic) NSString* crashPath;
@property(retain, nonatomic) NSString* IMEI;
@property(assign, nonatomic) float freesdcard;
@property(assign, nonatomic) float freeStoreage;
@property(assign, nonatomic) float freeMem;
@property(assign, nonatomic) int battery;
@property(assign, nonatomic) float cpu;
@property(retain, nonatomic) NSString* thread;
@property(retain, nonatomic) NSString* errorStack;
@property(retain, nonatomic) NSString* address;
@property(retain, nonatomic) NSString* error;
@property(retain, nonatomic) NSString* type;
@property(assign, nonatomic) long long time;
+(id)expData;
-(void)dealloc;
@end

@interface CrashReporter : NSObject <AnaUploader> {
	id<CrashUploadResultDelegete> delegate;
}
@property(retain, nonatomic) id<CrashUploadResultDelegete> delegate;
+(id)sharedInstance;
-(BOOL)cleanCrashRecord;
-(void)doUpload;
-(BOOL)uploadFinishWithResult:(BOOL)result error:(id*)error;
-(id)getUploadData:(BOOL)data error:(id*)error;
-(BOOL)uploadCrashes:(id)crashes;
-(id)getUploadPkg:(long)pkg cleanData:(BOOL)data;
-(void)addCustomAttachLog:(id)log;
-(BOOL)checkCrash;
-(void)setAttachLog:(id)log;
-(id)getCrashStackShortNames;
-(void)setGUID:(id)guid;
-(void)install:(id)install uploadAtomatic:(BOOL)atomatic;
-(void)dealloc;
@end

@interface NSExpAttachment : NSObject {
	BOOL type;
	NSString* fileName;
	NSData* data;
}
@property(assign, nonatomic) BOOL type;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSData* data;
-(void)dealloc;
-(void)decode:(id)decode;
-(id)encode;
-(void)initWithWUPModel:(Attachment*)wupmodel;
-(void)createWUPModel:(Attachment*)model;
@end

@interface NSMobileInfo : NSObject {
	NSString* symbol;
	NSString* other;
}
@property(retain, nonatomic) NSString* other;
@property(retain, nonatomic) NSString* symbol;
-(void)dealloc;
-(void)decode:(id)decode;
-(id)encode;
-(void)initWithWUPModel:(MobileDetail*)wupmodel;
-(void)createWUPModel:(MobileDetail*)model;
-(id)init;
@end

@interface NSContactInfo : NSObject {
	NSString* all;
	NSString* tel;
	NSString* qua;
	NSString* email;
	NSString* comment;
	NSString* other;
}
@property(retain, nonatomic) NSString* other;
@property(retain, nonatomic) NSString* comment;
@property(retain, nonatomic) NSString* email;
@property(retain, nonatomic) NSString* qua;
@property(retain, nonatomic) NSString* tel;
@property(retain, nonatomic) NSString* all;
-(void)dealloc;
-(void)decode:(id)decode;
-(id)encode;
-(void)initWithWUPModel:(ContactInfo*)wupmodel;
-(void)createWUPModel:(ContactInfo*)model;
-(id)init;
@end

@interface NSRunInfo : NSObject {
	float battery;
	float cpu;
	long long freeMem;
	long long freeStorage;
	long long freeSDCard;
}
@property(assign, nonatomic) long long freeSDCard;
@property(assign, nonatomic) long long freeStorage;
@property(assign, nonatomic) long long freeMem;
@property(assign, nonatomic) float cpu;
@property(assign, nonatomic) float battery;
-(void)dealloc;
-(void)decode:(id)decode;
-(id)encode;
-(void)initWithWUPModel:(RunInfo*)wupmodel;
-(void)createWUPModel:(RunInfo*)model;
-(id)init;
@end

@interface NSExpUpload : AnalyticsPersistObject <AnalyticsPersistEncoding> {
	NSString* exceptionType;
	NSString* excepitonAddress;
	NSString* hash;
	NSArray* attachmentList;
	long long cashTime;
	NSString* threadName;
	NSString* callStack;
	NSString* causedBy;
	NSRunInfo* runInfo;
	NSMobileInfo* mobileInfo;
	NSContactInfo* contactInfo;
}
@property(retain, nonatomic) NSContactInfo* contactInfo;
@property(retain, nonatomic) NSMobileInfo* mobileInfo;
@property(retain, nonatomic) NSRunInfo* runInfo;
@property(retain, nonatomic) NSString* causedBy;
@property(retain, nonatomic) NSString* callStack;
@property(retain, nonatomic) NSString* threadName;
@property(assign, nonatomic) long long cashTime;
@property(retain, nonatomic) NSArray* attachmentList;
@property(retain, nonatomic) NSString* hash;
@property(retain, nonatomic) NSString* excepitonAddress;
@property(retain, nonatomic) NSString* exceptionType;
-(void)dealloc;
-(void)decodeAttach:(id)attach;
-(id)encodeAttach;
-(BOOL)setEncodeData:(id)data;
-(id)encodeData;
-(void)initWithWUPModel:(ExceptionUpload*)wupmodel;
-(void)createWUPModel:(ExceptionUpload*)model;
@end

@interface NSExceptionUploadPackage : NSObject <AnaNSObjTransToJceBufferProtocol> {
	NSArray* list;
}
@property(retain, nonatomic) NSArray* list;
-(void)dealloc;
-(void)createWUPModel:(ExceptionUploadPackage*)model;
-(void)setDataToBuffer:(JceOutputStream<analyticstaf::BufferWriter>*)buffer;
-(void)addPkgElements:(id)elements;
@end

@interface AnaLocalDataRecordInterfaceWithEventMerge : AnaLocalDataRecordInterface {
}
+(id)sharedInstance;
-(void)saveObject:(id)object;
-(id)init;
@end

@interface AnalyticsEventModule : NSObject <AnalyticsModule> {
}
+(id)sharedInstance;
-(BOOL)uploadModuleHistoryData;
-(BOOL)isEnabled;
-(BOOL)checkAndEnable;
@end

@interface AnaNetFlowEventRecorder : NSObject <AnaCommunicationNetFlowDelegate> {
	BOOL enabled;
	NSEventRecord* netFlowEvent;
	long long startTime;
	int count;
	long upFlow;
	long downFlow;
	NSEventRecord* wifiNetFlowEvent;
	long long wifiStartTime;
	int wifiCount;
	long wifiUpFlow;
	long wifiDownFlow;
}
+(id)sharedInstance;
-(void)onDayNetFlowOverload:(id)overload counts:(int)counts upFlow:(long)flow downFlow:(long)flow4;
-(void)onNetFlowHappened:(id)happened status:(id)status elapse:(long)elapse isWiFi:(BOOL)fi upFlowBytes:(long)bytes downFlowBytes:(long)bytes6 reqTime:(double)time;
-(BOOL)checkNetFlowEvent:(BOOL)event;
-(BOOL)clean:(BOOL)clean;
-(BOOL)enable:(BOOL)enable;
@end

@interface AnaRealTimeEventHandler : NSObject <AnaUplaodNotifier> {
	int realEventDuration;
	int realEventMaxCount;
}
@property(assign, nonatomic) int realEventMaxCount;
@property(assign, nonatomic) int realEventDuration;
+(id)sharedInstance;
-(id)getUploadPkg:(int)pkg;
-(void)fireSchedule;
-(void)initTimer;
-(void)saveObject:(id)object;
-(void)saveObjectsToLocalDB:(id)localDB;
-(void)flushObjectsToDB;
-(id)findObjectByName:(id)name;
-(void)dealloc;
-(id)init;
-(void)reachMaxsize;
-(void)setMaxSizeDataListener:(id)listener;
@end

@interface AnaRealTimeEventUploader : NSObject <AnaUplaodNotifier, AnaUploader> {
}
+(id)sharedInstance;
-(BOOL)uploadFinishWithResult:(BOOL)result error:(id*)error;
-(id)getUploadData:(BOOL)data error:(id*)error;
-(void)reachMaxsize;
-(id)init;
@end

@interface AnaRealTimeMergeEventHandler : AnaRealTimeEventHandler {
}
+(id)sharedInstance;
-(void)saveObject:(id)object;
-(id)init;
@end

@interface AnaRealTimeNetWokHandler : AnalyticsNetwokHandler {
}
-(void)finishWithResponse:(id)response;
-(void)onRequestCancel;
-(void)failWithResponse:(id)response;
@end

@interface EventRecordHandler : NSObject {
}
+(id)getDefaultHandler;
-(BOOL)mergeEvent:(id)event withNewEvent:(id)newEvent;
-(BOOL)initMergeEvent:(id)event;
-(BOOL)recordAndMergeUserEventAndUpload:(id)upload isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
-(BOOL)recordAndMergeUserEvent:(id)event isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
-(BOOL)recordUserEventAndUpload:(id)upload isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
-(BOOL)recordUserEvent:(id)event isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
-(id)createEventResultFromParam:(id)param;
-(void)createRecordObject:(id)object withName:(id)name isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
-(id)init;
@end

@interface NSEventRecord : AnalyticsPersistObject <AnalyticsPersistEncoding> {
	NSString* apn;
	NSString* srcIp;
	NSString* eventName;
	NSString* eventValue;
	long long eventTime;
	BOOL isSuccess;
	long long elapse;
	long long packageSize;
	int eventType;
	NSMutableDictionary* params;
}
@property(retain, nonatomic) NSMutableDictionary* params;
@property(assign, nonatomic) int eventType;
@property(assign, nonatomic) long long packageSize;
@property(assign, nonatomic) long long elapse;
@property(assign, nonatomic) BOOL isSuccess;
@property(assign, nonatomic) long long eventTime;
@property(retain, nonatomic) NSString* eventValue;
@property(retain, nonatomic) NSString* eventName;
@property(retain, nonatomic) NSString* srcIp;
@property(retain, nonatomic) NSString* apn;
+(id)initWithEName:(id)ename eValue:(id)value apn:(id)apn srcIp:(id)ip eTime:(long long)time elapse:(long long)elapse pkgSize:(long long)size isSuccess:(BOOL)success;
-(void)dealloc;
-(BOOL)setEncodeData:(id)data;
-(id)encodeData;
-(void)initWithWUPModel:(EventRecord*)wupmodel;
-(void)createWUPModel:(EventRecord*)model;
@end

@interface NSEventRecordPackage : NSObject <AnaNSObjTransToJceBufferProtocol> {
	NSArray* list;
}
@property(retain, nonatomic) NSArray* list;
-(void)dealloc;
-(void)createWUPModel:(EventRecordPackage*)model;
-(void)setDataToBuffer:(JceOutputStream<analyticstaf::BufferWriter>*)buffer;
-(void)addPkgElements:(id)elements;
-(id)getPkgElements;
@end

@interface GrayCLMAlertView : UIAlertView {
	UIImage* bgImage;
	int detailTextlAligment;
}
@property(assign, nonatomic) int detailTextlAligment;
@property(retain, nonatomic) UIImage* bgImage;
-(void)dealloc;
-(void)show;
@end

@interface GrayFeedBackHandler : AnaNetworkHandlerBase {
}
-(void)dealloc;
-(void)postResponse:(id)response;
-(void)finishWithResponse:(id)response;
-(void)failWithResponse:(id)response;
-(void)postFailWithResponse:(id)response;
-(id)init;
@end

@interface GrayHandler : AnaNetworkHandlerBase {
}
-(void)dealloc;
-(void)postResponse:(id)response;
-(void)finishWithResponse:(id)response;
-(void)failWithResponse:(id)response;
-(void)postFailWithResponse:(id)response;
-(id)init;
@end

@interface GrayQueryBackgroundHandler : NSObject {
}
+(id)sharedInstance;
-(void)dealloc;
-(void)onBackgroundQueryListener;
-(void)onAsynCheckCallBack;
-(id)init;
-(void)stopAsynCheck;
-(void)startAsynCheck;
-(void)initTimer;
@end

@interface GrayUserAgreementHandler : AnaNetworkHandlerBase {
}
-(void)dealloc;
-(void)postResponse:(id)response;
-(void)finishWithResponse:(id)response;
-(void)failWithResponse:(id)response;
-(void)postFailWithResponse:(id)response;
-(id)init;
@end

@interface GrayInterface : NSObject {
}
+(void)logOutAccount;
+(void)checkAppUpgrade;
+(void)uploadFeedback:(id)feedback content:(id)content fileName:(id)name fileType:(int)type fileData:(id)data uploadStateReturn:(id)aReturn;
+(void)setUserId:(id)anId;
+(void)setOnQueryStateCallback:(id)callback;
+(void)doCheck;
+(void)initGraySDK:(id)sdk appId:(id)anId versionId:(id)anId3 queryStateReturn:(id)aReturn;
@end

@interface GrayAgreementManager : NSObject {
}
+(id)sharedInstance;
-(void)uploadUserAgreementToServer;
-(id)init;
@end

@interface GrayFeedBackUploadManager : NSObject {
}
+(id)sharedInstance;
-(void)uploadFeedBackToServer:(id)server content:(id)content fileName:(id)name fileType:(int)type fileData:(id)data;
-(id)init;
@end

@interface GrayManager : NSObject <UIWebViewDelegate, UIAlertViewDelegate> {
}
+(id)sharedInstance;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)willPresentAlertView:(id)view;
-(void)onAggreementConfirmButtonCallBack:(id)back;
-(void)grayStrategyResponseNotify:(id)notify;
-(void)doCheckForGray;
-(void)checkAppVersion;
-(void)initGraySendRequest:(id)request appId:(id)anId versionId:(id)anId3;
-(void)initGrayQuery:(id)query appId:(id)anId versionId:(id)anId3 cmd:(int)cmd;
-(void)RegisterNotificationForGray;
-(id)init;
@end

@interface NSGrayDataPackage : NSObject {
	id<OnQueryStateReturn> queryStateCallBack;
	int priority;
	NSString* functionName;
	NSGrayStrategy* grayStrategy;
	int AsynLooperFlag;
	BOOL grayEnabled;
	double doCheckProtectTime;
	double setUserIdProtectTime;
	double feedbackProtectTime;
	double appUpgradeProtectTime;
	int startLooperFlag;
	id<OnUploadStateReturn> uploadStateCallBack;
	BOOL isAgreeFlag;
	long long agreementTime;
	int agreementId;
	int manualUpdateFlag;
}
@property(assign, nonatomic) int manualUpdateFlag;
@property(assign, nonatomic) int agreementId;
@property(assign, nonatomic) long long agreementTime;
@property(assign, nonatomic) BOOL isAgreeFlag;
@property(retain, nonatomic) id<OnUploadStateReturn> uploadStateCallBack;
@property(assign, nonatomic) int startLooperFlag;
@property(assign, nonatomic) double appUpgradeProtectTime;
@property(assign, nonatomic) double feedbackProtectTime;
@property(assign, nonatomic) double setUserIdProtectTime;
@property(assign, nonatomic) double doCheckProtectTime;
@property(assign, nonatomic) BOOL grayEnabled;
@property(assign, nonatomic) int AsynLooperFlag;
@property(retain, nonatomic) NSGrayStrategy* grayStrategy;
@property(retain, nonatomic) NSString* functionName;
@property(assign, nonatomic) int priority;
@property(retain, nonatomic) id<OnQueryStateReturn> queryStateCallBack;
+(id)getInstance;
-(void)dealloc;
-(id)init;
@end

@interface NSAppUpdate : NSObject {
	NSString* versionName;
	NSString* descriptioin;
	NSString* detailUrl;
	long long releaseTime;
	NSString* registerUrl;
	BOOL forceUpdateFalg;
}
@property(assign, nonatomic) BOOL forceUpdateFalg;
@property(retain, nonatomic) NSString* registerUrl;
@property(assign, nonatomic) long long releaseTime;
@property(retain, nonatomic) NSString* detailUrl;
@property(retain, nonatomic) NSString* descriptioin;
@property(retain, nonatomic) NSString* versionName;
-(void)dealloc;
-(id)initWithNSAppUpdateWupModel:(AppUpdate*)nsappUpdateWupModel;
@end

@interface NSUserAgreement : NSObject {
	int agreementId;
	NSString* userAgreeDetailUrl;
	NSData* data;
}
@property(retain, nonatomic) NSData* data;
@property(retain, nonatomic) NSString* userAgreeDetailUrl;
@property(assign, nonatomic) int agreementId;
-(void)dealloc;
-(id)initWithNSUserAgreementWupModel:(UserAgreement*)nsuserAgreementWupModel;
@end

@interface NSGrayStrategy : NSObject <AnaLocalObjInitWithWupProtocol> {
	BOOL appAuthResult;
	BOOL useAuthResult;
	int resCode;
	NSString* resMsg;
	NSString* registerUrl;
	NSUserAgreement* userAgreement;
	NSAppUpdate* appUpdate;
	NSString* reserved;
}
@property(retain, nonatomic) NSString* reserved;
@property(retain, nonatomic) NSAppUpdate* appUpdate;
@property(retain, nonatomic) NSUserAgreement* userAgreement;
@property(retain, nonatomic) NSString* registerUrl;
@property(retain, nonatomic) NSString* resMsg;
@property(assign, nonatomic) int resCode;
@property(assign, nonatomic) BOOL useAuthResult;
@property(assign, nonatomic) BOOL appAuthResult;
-(void)dealloc;
-(void)initWithNSGrayStrategyWupModel:(GrayStrategy*)nsgrayStrategyWupModel;
-(void)initLocalObjWithWupBuffer:(JceInputStream<analyticstaf::BufferReader>*)wupBuffer;
@end

@interface NSUserAgreementPackage : NSObject <AnaNSObjTransToJceBufferProtocol> {
	BOOL isAgree;
	long long agreeTime;
	NSString* signer;
	int agreementId;
}
@property(retain, nonatomic) NSString* signer;
@property(assign, nonatomic) long long agreeTime;
@property(assign, nonatomic) int agreementId;
@property(assign, nonatomic) BOOL isAgree;
-(void)dealloc;
-(void)createNSUserAgreementPackageWUPModel:(UserAgreementPackage*)model;
-(void)setDataToBuffer:(JceOutputStream<analyticstaf::BufferWriter>*)buffer;
@end

@interface NSFeedBackAttachment : NSObject {
	BOOL type;
	NSData* data;
	NSString* fileName;
	long long createTime;
}
@property(assign, nonatomic) long long createTime;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSData* data;
@property(assign, nonatomic) BOOL type;
-(void)dealloc;
-(void)createNSFeedBackAttachmentWUPModel:(Attachment*)model;
@end

@interface NSUserFeedbackPackage : NSObject <AnaNSObjTransToJceBufferProtocol> {
	NSString* title;
	NSString* content;
	NSArray* attachmentList;
}
@property(retain, nonatomic) NSArray* attachmentList;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
-(void)createNSUserFeedbackPackageWUPModel:(UserFeedbackPackage*)model;
-(void)setDataToBuffer:(JceOutputStream<analyticstaf::BufferWriter>*)buffer;
@end

@interface GrayLocalAuthentication : NSObject {
}
+(id)sharedInstance;
-(void)dealloc;
-(id)getProductVersion;
-(void)setProductVersion:(id)version;
-(BOOL)AsynLoopTimeCheckForAuthkey:(double)authkey userAuthKey:(id)key;
-(BOOL)grayInterfaceCallProtect:(double)protect callInterfaceTime:(double)time;
-(double)getDateForAuthKey:(id)authKey;
-(void)setDateForAuthKey:(double)authKey userAuthKey:(id)key;
-(BOOL)removeDateForAuthKey:(id)authKey;
-(id)init;
@end

@interface AnalyticsInterface : NSObject {
}
+(BOOL)enableCrashReport:(BOOL)report;
+(BOOL)enableEventRecord:(BOOL)record;
+(BOOL)enableSpeedTrack:(BOOL)track;
+(int)getSDKStatus;
+(BOOL)enableAnalytics:(id)analytics gatewayIP:(id)ip;
+(BOOL)registRealTimeEventDataUploadNotifier:(id)notifier;
+(BOOL)registMixDataUploadNotifier:(id)notifier;
+(id)getCrashDataUploader;
+(id)getRealTimeEventDataUploader;
+(id)getMixDataUploader;
+(BOOL)enableAnalyticsWithoutNetwork:(id)network gatewayIP:(id)ip;
+(BOOL)setRealTimeEventUploadDuration:(int)duration;
+(BOOL)setRealTimeEventUploaMaxCount:(int)count;
+(BOOL)onDirectUserAction:(id)action isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)onUserAction:(id)action isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)onMergeRealTimeUserAction:(id)action isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)onMergeUserAction:(id)action isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)setDBPath:(id)path;
+(BOOL)setDBPathAndReBuild:(id)build error:(id)error;
+(void)setGatewayIp:(id)ip;
+(void)setBundleVersion:(id)version;
+(void)setBundleId:(id)anId;
+(void)setContact:(id)contact;
+(void)setAppId:(id)anId;
+(void)setUserId:(id)anId;
+(void)setGUID:(id)guid;
+(BOOL)onAppResuemed;
+(BOOL)onAppEnterBackGround;
+(BOOL)setDayMaxUpFlow:(long)flow;
+(BOOL)cleanNetFlowData;
+(long)getToDayUsedNetFlow;
+(long)getCurrentMonthTotalNetFlow;
+(BOOL)enableNetFlowRecord:(BOOL)record;
+(BOOL)setDayMaxSpeedTrackCount:(int)count;
+(BOOL)setStrategyForMaxPkgSize:(int)maxPkgSize dbMaxSize:(int)size;
+(BOOL)enableModuleFunctionBeforeSeverStrategy:(BOOL)strategy;
+(BOOL)registAnaUploadConfirmer:(id)confirmer;
+(BOOL)onRender:(BOOL)render elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)onRefresh:(BOOL)refresh elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)onWrite:(BOOL)write elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)onStart:(BOOL)start elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)onWriteBlog:(BOOL)blog elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)onUploadPicture:(BOOL)picture elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)onLogin:(BOOL)login elapse:(long)elapse size:(long)size params:(id)params;
+(BOOL)setAnalyticsServer:(id)server;
+(BOOL)setEnableLowLevelDeviceSupport:(BOOL)support;
+(BOOL)cleanAnalytics;
+(BOOL)deleteLocalStrategy;
+(id)getLocalStrategy;
+(BOOL)deleteAllPersistObjects;
+(BOOL)deletePersistObjectById:(long)anId;
+(id)getPersistDatas;
+(BOOL)removeDBFile;
+(BOOL)cleanDBData;
+(BOOL)clearDroppedData;
+(id)getDroppedData;
+(BOOL)setCommuInterface:(id)interface;
+(BOOL)setPersistHandler:(id)handler;
@end

@interface AnalyticsSpeedModule : NSObject <AnalyticsModule> {
}
+(id)sharedInstance;
-(BOOL)startSpeedTest;
-(BOOL)executeServerStrategyInit:(id)init;
-(BOOL)executeLocalStrategyInit;
-(BOOL)uploadModuleHistoryData;
-(BOOL)executeFunction;
-(BOOL)isEnabled;
-(BOOL)checkAndEnable;
-(id)init;
@end

@interface NSIPMonitor : AnalyticsPersistObject <AnalyticsPersistEncoding> {
	NSString* apn;
	NSString* srcIp;
	NSString* destIp;
	long destPort;
	long long connectTime;
	long long testTime;
	long long reqSendTime;
	long long rspWaitTime;
	long long rspReadTime;
	int protocolType;
	int resultCode;
	NSData* errorInfo;
}
@property(assign, nonatomic) int protocolType;
@property(assign, nonatomic) int resultCode;
@property(retain, nonatomic) NSData* errorInfo;
@property(assign, nonatomic) long long rspReadTime;
@property(assign, nonatomic) long long rspWaitTime;
@property(assign, nonatomic) long long reqSendTime;
@property(assign, nonatomic) long destPort;
@property(assign, nonatomic) long long testTime;
@property(assign, nonatomic) long long connectTime;
@property(retain, nonatomic) NSString* destIp;
@property(retain, nonatomic) NSString* srcIp;
@property(retain, nonatomic) NSString* apn;
+(id)initWithApn:(id)apn srcIp:(id)ip destIp:(id)ip3 destPort:(long)port conT:(long long)t time:(long long)time;
-(void)dealloc;
-(BOOL)setEncodeData:(id)data;
-(id)encodeData;
-(void)initWithWUPModel:(IpMonitor*)wupmodel;
-(void)createWUPModel:(IpMonitor*)model;
-(id)init;
@end

@interface NSDomainMonitor : AnalyticsPersistObject <AnalyticsPersistEncoding> {
	NSString* apn;
	NSString* srcIp;
	NSString* destDomain;
	long long dnsTime;
	long long tcpTime;
	long long reqSendTime;
	long long rspRecvTime;
	long long netWaitTime;
	NSString* targetIp;
	NSString* dnsServerIp;
	long long testTime;
	int protocolType;
}
@property(assign, nonatomic) int protocolType;
@property(assign, nonatomic) long long testTime;
@property(retain, nonatomic) NSString* dnsServerIp;
@property(retain, nonatomic) NSString* targetIp;
@property(assign, nonatomic) long long netWaitTime;
@property(assign, nonatomic) long long rspRecvTime;
@property(assign, nonatomic) long long reqSendTime;
@property(assign, nonatomic) long long tcpTime;
@property(assign, nonatomic) long long dnsTime;
@property(retain, nonatomic) NSString* destDomain;
@property(retain, nonatomic) NSString* srcIp;
@property(retain, nonatomic) NSString* apn;
+(id)initWithApn:(id)apn srcIp:(id)ip destDomain:(id)domain dnsT:(long long)t tcpT:(long long)t5 reqT:(long long)t6 rspT:(long long)t7 netwT:(long long)t8 tarIP:(id)ip9 dnsSerIp:(id)ip10 time:(long long)time;
-(void)dealloc;
-(BOOL)setEncodeData:(id)data;
-(id)encodeData;
-(void)initWithWUPModel:(DomainMonitor*)wupmodel;
-(void)createWUPModel:(DomainMonitor*)model;
-(id)init;
@end

@interface NSSpeedMonitorPackage : NSObject <AnaNSObjTransToJceBufferProtocol> {
	NSArray* ipList;
	NSArray* domainList;
}
@property(retain, nonatomic) NSArray* domainList;
@property(retain, nonatomic) NSArray* ipList;
-(void)dealloc;
-(void)createWUPModel:(SpeedMonitorPackage*)model;
-(void)setDataToBuffer:(JceOutputStream<analyticstaf::BufferWriter>*)buffer;
-(void)addPkgElements:(id)elements;
-(id)getPkgElements;
@end

@interface NSIPSource : NSObject {
	NSString* ip;
	long port;
	int protocolType;
	NSString* expRet;
	unsigned cmd;
}
@property(assign, nonatomic) int protocolType;
@property(assign, nonatomic) unsigned cmd;
@property(retain, nonatomic) NSString* expRet;
@property(assign, nonatomic) long port;
@property(retain, nonatomic) NSString* ip;
+(id)initWithIP:(id)ip port:(long)port;
-(void)dealloc;
-(void)createWUPModel:(IpSource*)model;
-(id)initWithWUPIPModel:(IpSource*)wupipmodel;
-(id)init;
@end

@interface NSDomainSource : NSObject {
	NSString* url;
	int protocolType;
}
@property(assign, nonatomic) int protocolType;
@property(retain, nonatomic) NSString* url;
-(void)dealloc;
-(void)createWUPModel:(DomainSource*)model;
-(id)initWithWUPDomain2Model:(DomainSource*)wupdomain2Model;
-(id)init;
@end

@interface NSSpeedMonitorSource : AnalyticsPersistObject <AnaLocalObjInitWithWupProtocol> {
	NSArray* ipList;
	NSArray* domainList;
}
@property(retain, nonatomic) NSArray* domainList;
@property(retain, nonatomic) NSArray* ipList;
-(void)dealloc;
-(void)initLocalObjWithWupBuffer:(JceInputStream<analyticstaf::BufferReader>*)wupBuffer;
-(BOOL)setEncodeData:(id)data;
-(id)encodeData;
-(void)createWUPModel:(SpeedMonitorSource*)model;
-(id)init;
@end

@interface SpeedTrackHandler : NSObject {
	NSSpeedMonitorSource* speedsource;
	int maxDaySpeedTrackCount;
@private
	NSString* dayStr;
	NSDateFormatter* dfm;
	int daySpeedTrackcount;
}
@property(assign, nonatomic) int maxDaySpeedTrackCount;
@property(retain, nonatomic) NSSpeedMonitorSource* speedsource;
+(id)getDefaultHandler;
-(void)startSpeedTest;
-(BOOL)speedTrackCheck;
-(void)resetDaySpeedTrackSwitch;
-(void)initResetDaySpeedTrackTimer:(id)timer;
-(BOOL)persistSpeedCountData;
-(BOOL)loadSpeedCountData;
-(void)dealloc;
-(id)init;
@end

@interface UrlSpeedTracker : NSObject <AnalyticsNetSpeedTest> {
}
+(id)sharedInstance;
-(int)writeSocket:(int)socket reqBytes:(void*)bytes reqLen:(int)len withResult:(id)result withError:(id*)error;
-(id)testIPConnection:(id)connection error:(id*)error;
-(id)testDomainConnection:(id)connection error:(id*)error;
@end

@interface MQTimerQueue : NSObject {
@private
	NSMutableArray* _queue;
	NSTimer* _timer;
}
@property(retain, nonatomic) NSTimer* timer;
@property(retain, nonatomic) NSMutableArray* queue;
+(id)instance;
-(void)timingCheck;
-(void)removeTimer:(id)timer;
-(void)addTimer:(id)timer;
-(void)dealloc;
-(id)init;
@end

@interface MQTimer : NSObject {
@private
	id _timingObj;
	int _duration;
	NSDate* _startDate;
}
@property(retain, nonatomic) NSDate* startDate;
@property(assign, nonatomic) int duration;
@property(assign, nonatomic) id timingObj;
-(void)timeOut;
-(void)stopTiming;
-(void)startTiming;
-(void)dealloc;
-(id)initWithObject:(id)object andDuration:(int)duration;
@end

@interface FMDatabaseQueue : NSObject {
	NSString* _path;
	dispatch_queue_s* _queue;
	FMDatabase* _db;
}
@property(retain) NSString* path;
+(id)databaseQueueWithPath:(id)path;
-(void)inTransaction:(id)transaction;
-(void)inDeferredTransaction:(id)deferredTransaction;
-(void)beginTransaction:(BOOL)transaction withBlock:(id)block;
-(void)inDatabase:(id)database;
-(id)database;
-(void)close;
-(void)dealloc;
-(id)initWithPath:(id)path;
@end

@interface MsgCacheUnit : NSObject {
	long long m_nMsgStartSeq;
	long long m_nMsgEndSeq;
	NSMutableArray* m_arrMsg;
	double m_dwCacheOpOrder;
	MsgCacheUnit* m_pNextUnit;
	MsgCacheUnit* m_pPreUnit;
}
@property(retain, nonatomic) MsgCacheUnit* m_pPreUnit;
@property(retain, nonatomic) MsgCacheUnit* m_pNextUnit;
@property(assign, nonatomic) double m_dwCacheOpOrder;
@property(retain, nonatomic) NSMutableArray* m_arrMsg;
@property(assign, nonatomic) long long m_nMsgEndSeq;
@property(assign, nonatomic) long long m_nMsgStartSeq;
-(void)dealloc;
-(id)init;
-(void)initCacheOpOrder;
-(id)description;
@end

@interface MsgCacheList : NSObject {
	MsgCacheUnit* m_pFirstUnit;
	MsgCacheUnit* m_pLatestCacheUnit;
}
@property(retain, nonatomic) MsgCacheUnit* m_pLatestCacheUnit;
@property(retain, nonatomic) MsgCacheUnit* m_pFirstUnit;
-(BOOL)FitForLatestCache:(long long)latestCache EndSeq:(long long)seq;
-(LongLongRange)IntersectWithSeqRange:(id)seqRange CmpStart:(long long)start CmpEnd:(long long)end;
-(id)FindFirstUnitIntersectWithSeqRange:(long long)seqRange EndSeq:(long long)seq;
-(id)FindUnitContainSeq:(long long)seq FromCacheUnit:(id)cacheUnit;
-(id)FindLeftAdjacentUnitOfSeq:(long long)seq;
-(BOOL)IsEmpty;
-(void)InsertCacheUnit:(id)unit BeforeCacheUnit:(id)unit2;
-(void)InsertCacheUnit:(id)unit AfterCacheUnit:(id)unit2;
-(void)RemoveCacheUnit:(id)unit;
-(void)dealloc;
-(id)description;
@end

@interface QQMsgDispDbCache : NSObject {
	NSMutableDictionary* m_dictOfCacheUnitList;
	NSMutableSet* m_setOfAllMsgDelGroup;
}
-(id)description;
-(void)dealloc;
-(id)init;
-(void)DelAllMsgOfUin:(int)uin;
-(BOOL)GetValidConsequetMsgCount:(long long)count EndSeq:(long long)seq Uin:(int)uin ResultCnt:(int*)cnt;
-(id)GetConsequentMsgArray:(long long)array EndSeq:(long long)seq Uin:(int)uin;
-(void)InsertConsequentMsgArray:(id)array StartSeq:(long long)seq EndSeq:(long long)seq3 Uin:(int)uin;
-(void)UpdateConsequentMsgArray:(id)array StartSeq:(long long)seq EndSeq:(long long)seq3 Uin:(int)uin;
-(void)DelConsequentMsg:(long long)msg EndSeq:(long long)seq Uin:(int)uin;
-(void)CachePreloadedConsequentMsgArray:(id)array StartSeq:(long long)seq EndSeq:(long long)seq3 Uin:(int)uin;
-(void)UnRecordUinNotExistInDb:(id)db;
-(void)RecordUinNotExistInDb:(id)db;
-(void)EliminateCache:(int)cache;
-(int)GenValidMsg:(id*)msg FromStartUnit:(id)startUnit FromEndUnit:(id)endUnit StartSeq:(long long)seq EndSeq:(long long)seq5;
-(BOOL)GetConsequentMsgArrayImpl:(long long)impl EndSeq:(long long)seq Uin:(int)uin ResultArr:(id*)arr ResultCnt:(int*)cnt;
-(void)UpdateConsequentMsgArrayImpl:(id)impl StartSeq:(long long)seq EndSeq:(long long)seq3 Uin:(int)uin;
-(int)ValidMsgCnt:(id)cnt StartOffsetOfSrc:(int)src EndOffsetOfSrc:(int)src3;
-(void)AddValidMsgToArr:(id)arr FromArr:(id)arr2 StartOffsetOfSrc:(int)src EndOffsetOfSrc:(int)src4;
-(int)ValidMsgCntFrom:(id)from EndUnit:(id)unit StartSeq:(long long)seq EndSeq:(long long)seq4;
-(void)CpyMsgToArrMsg:(id)arrMsg FromStartUnit:(id)startUnit FromEndUnit:(id)endUnit StartSeq:(long long)seq EndSeq:(long long)seq5;
-(id)CreateNewCacheUnitFromUnit:(id)unit StartSeq:(long long)seq EndSeq:(long long)seq3;
-(id)CreateMsgCacheUnit:(id)unit StartSeq:(long long)seq EndSeq:(long long)seq3;
-(void)CacheMsgArrayInNewCacheList:(id)newCacheList StartSeq:(long long)seq EndSeq:(long long)seq3 Uin:(id)uin;
@end

@interface PreloadMsgInfo : NSObject {
	long long _nStart;
	long long _nEnd;
	int _nUin;
	int _nAccountUin;
}
@property(readonly, assign, nonatomic) int nAccountUin;
@property(readonly, assign, nonatomic) int nUin;
@property(readonly, assign, nonatomic) long long nEnd;
@property(readonly, assign, nonatomic) long long nStart;
-(id)initWithUin:(int)uin Start:(long long)start End:(long long)end AccountUin:(int)uin4;
@end

@interface QQMsgDbPreloadMgr : NSObject {
	NSMutableDictionary* m_dictPreloadOfUin;
	int m_nCurAccountUin;
}
-(void)RemovePreloadOfUin:(int)uin AccountUin:(int)uin2;
-(id)IsIntersectWithPreload:(int)preload StartSeq:(long long)seq EndSeq:(long long)seq3 AccountUin:(int)uin;
-(BOOL)IsPreloadExist:(id)exist;
-(void)RemovePreload:(id)preload;
-(BOOL)AddPreload:(id)preload;
-(void)dealloc;
-(id)initWithAccountUin:(int)accountUin;
-(void)printCallStack;
-(BOOL)IsIntersect:(id)intersect StartSeq:(long long)seq EndSeq:(long long)seq3;
@end

@interface GroupDBService : NSObject <GroupDBServiceInterface, DBAsyncCallbackProtocol> {
	id<IGroupDBServiceStateObserver> _groupDbServiceStateObserver;
@private
	NSString* _uin;
	NSMutableDictionary* _groupMaxSeqDic;
	NSMutableArray* _groupListInfoArr;
	NSMutableDictionary* _remarkDict;
	NSMutableDictionary* _TroopMemberDic;
	NSMutableDictionary* _groupFriendDict;
	NSMutableDictionary* _groupListDict;
	NSMutableDictionary* _troopMemberTmpDic;
	NSMutableDictionary* _groupExInfoDic;
	QQTroopRemarkTable* _troopRemakDB;
	QQTroopMemberTable* _troopMemDB;
	QQTroopMsgSeqTable* _troopMsgSeqDB;
	QQTroopListTable* _troopListDB;
	QQTroopAnnouncementTable* _troopAnnounceDB;
	QQTroopMsgTable* _troopMsgDB;
}
@property(retain, nonatomic) NSMutableDictionary* groupExInfoDic;
@property(retain, nonatomic) NSMutableDictionary* troopMemberTmpDic;
@property(retain, nonatomic) NSMutableDictionary* groupListDict;
@property(retain, nonatomic) NSMutableDictionary* groupFriendDict;
@property(retain, nonatomic) NSMutableDictionary* TroopMemberDic;
@property(retain, nonatomic) NSMutableDictionary* remarkDict;
@property(retain, nonatomic) NSMutableArray* groupListInfoArr;
@property(retain, nonatomic) NSMutableDictionary* groupMaxSeqDic;
-(id)getLastMessageInGroup:(id)group uin:(id)uin;
-(id)fillValidMessageForGroup:(id)group withCount:(unsigned)count intoMessags:(id)messags force:(BOOL)force;
-(int)asyncRemoveMessage:(id)message callback:(id)callback userdata:(id)userdata;
-(id)getGroupMessageModel:(id)model msgSeq:(long long)seq;
-(void)_updateDispCachWithMessage:(id)message;
-(BOOL)removeMessage:(id)message;
-(void)clearAllTroopMsg;
-(void)updateTroopPttMsg:(id)msg;
-(void)setPttMsg:(id)msg withStatus:(int)status groupCode:(id)code;
-(void)updateTroopMsgRecentFlag:(id)flag;
-(id)GetMsgsLessThanMsgid:(long long)msgid limitCount:(int)count GroupCode:(id)code;
-(BOOL)DeleteTroopAnouncementMsgArr:(id)arr;
-(BOOL)DeleteTroopAnouncementMsg:(long long)msg;
-(BOOL)DeleteTroopAnouncementMsgOfReadState:(BOOL)readState GroupCode:(long long)code;
-(BOOL)UpadateTroopAnouncementMsgArray:(id)array;
-(BOOL)insertTroopAnouncementMsgArray:(id)array;
-(id)GetAnouncementMsgWithSvrMsgId:(long long)svrMsgId;
-(id)GetAnouncementMsgWithMsgId:(long long)msgId;
-(id)GetAnouncementMsgOfReadState:(BOOL)readState;
-(id)GetAnouncementMsgOfGroup:(long long)group AscOrder:(BOOL)order HadReaded:(BOOL)readed;
-(id)GetAnouncementMsgOfGroup:(long long)group AscOrder:(BOOL)order StartTime:(long long)time EndTime:(long long)time4;
-(void)SetMsgSendStateWithMsgID:(id)msgID groupcode:(id)groupcode state:(int)state;
-(int)GetMsgSendState:(int)state groupcode:(id)groupcode;
-(int)asynGetMsgFromTroop:(id)troop WithType:(int)type notMoreThanSeq:(long long)seq limitCount:(unsigned)count callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateGroupMessageSeq:(long long)seq groupCode:(id)code msgID:(id)anId callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMsgWithMsgId:(long long)msgId groupCode:(id)code msgType:(int)type callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateSendGroupPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateSendGroupPttState:(id)state uuid:(id)uuid duration:(unsigned)duration state:(int)state4 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateGroupRichMsgState:(id)state msgId:(int)anId msgTime:(int)time state:(int)state4 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateSendGroupPicState:(id)state uuid:(id)uuid state:(int)state3 callback:(id)callback userdata:(id)userdata;
-(void)setGroupExInfo:(id)info;
-(id)getGroupExInfoDic;
-(int)asyncUpdateTroopName:(id)name groupCode:(int)code groupType:(int)type groupFlag:(int)flag groupFace:(int)face infoSeq:(int)seq callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteTroopListByGroupCode:(id)code callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGarbageTroopMsg:(id)msg reserve:(int)reserve callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteTroopMsg:(id)msg FromSeq:(id)seq callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteTroopMemberCache:(id)cache callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertTroopRemarkListBatch:(id)batch callback:(id)callback userdata:(id)userdata;
-(int)asyncSetTroopSuccessStateWithUUid:(id)uuid withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncSetTroopFailStateWithUUid:(id)uuid withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncSetTroopFailStateWithMsgID:(id)msgID withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncSetTroopReadStateWithMsgID:(id)msgID withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateTroopRemarkStatus:(id)status :(id)arg2 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateTroopMemStatus:(id)status :(id)arg2 callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertTroopMemBatch:(id)batch callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateTroopRemarkLastSeq:(id)seq groupCode:(id)code callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3 callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMessageWithUin:(id)uin msgSeq:(long long)seq sendUin:(id)uin3 callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertGroupMessage:(id)message callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateGroupMessageWithUin:(id)uin desTime:(int)time srcTime:(int)time3 sendUin:(id)uin4 callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMessageWithUin:(id)uin msgTime:(int)time sendUin:(id)uin3 callback:(id)callback userdata:(id)userdata;
-(int)asyncUpdateGroupMessageUuid:(id)uuid callback:(id)callback userdata:(id)userdata;
-(int)asyncSetNickForGroupCode:(id)groupCode name:(id)name callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertTroopListForUin:(unsigned)uin code:(unsigned)code callback:(id)callback userdata:(id)userdata;
-(int)asyncSetReadForGroupContent:(id)groupContent groupCode:(id)code callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteMsgsWithGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(int)asyncInsertTroopMessageArray:(id)array callback:(id)callback userdata:(id)userdata;
-(void)updateTroopName:(id)name groupCode:(int)code groupType:(int)type groupFlag:(int)flag groupFace:(int)face infoSeq:(int)seq;
-(BOOL)updateSendGroupPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(BOOL)updateSendGroupPttState:(id)state uuid:(id)uuid duration:(unsigned)duration state:(int)state4;
-(BOOL)updateGroupRichMsgState:(id)state msgId:(int)anId msgTime:(int)time state:(int)state4;
-(BOOL)updateSendGroupPicState:(id)state uuid:(id)uuid state:(int)state3;
-(BOOL)updateGroupMessageSeq:(long long)seq groupCode:(id)code msgID:(id)anId;
-(void)deleteGroupMsgWithMsgId:(long long)msgId groupCode:(id)code msgType:(int)type;
-(void)clearGroupFriendCache;
-(void)deleteTroopListByGroupCode:(id)code;
-(void)insertTroopListForUin:(unsigned)uin code:(unsigned)code;
-(id)getTroopCountListFromTroopMsg;
-(id)getTroopListFromTroopMsg;
-(BOOL)deleteGarbageTroopMsg:(id)msg reserve:(int)reserve;
-(BOOL)deleteTroopMsg:(id)msg FromSeq:(id)seq;
-(void)updateTroopMessageUuid:(id)uuid;
-(void)deleteTroopMemberCache:(id)cache;
-(void)updateTroopMemberToTmp:(long long)tmp;
-(long long)GetGroupMsgMaxSeq:(id)seq uin:(id)uin;
-(void)insertTroopRemarkListBatch:(id)batch;
-(id)getTroopRemarkList:(id)list;
-(id)getUnFinishRemark;
-(void)setTroopSuccessStateWithUUid:(id)uuid withGroupCode:(id)groupCode;
-(void)setTroopFailStateWithUUid:(id)uuid withGroupCode:(id)groupCode;
-(void)setTroopFailStateWithMsgID:(id)msgID withGroupCode:(id)groupCode;
-(void)setTroopReadStateWithMsgID:(id)msgID withGroupCode:(id)groupCode;
-(void)updateTroopRemarkStatus:(id)status :(id)arg2;
-(void)updateTroopMemStatus:(id)status :(id)arg2;
-(id)GetTroopMemByGroupCode:(id)code;
-(void)InsertTroopMemBatch:(id)batch;
-(id)GetTroopUinAndCode;
-(int)QQDataCenter_GetGroupMessageCount:(id)count;
-(id)GetTroopUinAndCodeByGroupCode:(id)code;
-(id)getTroopRemarkLastSeq:(id)seq;
-(void)updateTroopRemarkLastSeq:(id)seq groupCode:(id)code;
-(id)groupMessageWithUin:(id)uin timeStamp:(int)stamp;
-(void)deleteGroupMessageWithUin:(id)uin msgSeq:(long long)seq sendUin:(id)uin3;
-(void)updateGroupMessageWithUin:(id)uin desTime:(int)time srcTime:(int)time3 sendUin:(id)uin4;
-(void)deleteGroupMessageWithUin:(id)uin msgTime:(int)time sendUin:(id)uin3;
-(void)deleteGroupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(id)groupMessageWithUin:(id)uin endSeq:(long long)seq count:(int)count;
-(id)groupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(id)groupMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)getGroupLatestMessage:(id)message;
-(id)DismissDuplicateMsg:(id)msg AttributeArr:(id)arr Order:(BOOL)order;
-(id)DismissDuplicateMsg:(id)msg Attribute:(id)attribute Order:(BOOL)order;
-(id)groupMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page;
-(int)asyncGetGroupMsgWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(void)PreloadGroupMsgWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(void)updateGroupMessageUuid:(id)uuid;
-(id)getGroupListDict;
-(void)setNickForGroupCode:(id)groupCode name:(id)name;
-(long long)uinForGroupCode:(id)groupCode;
-(id)nickForGroupCode:(id)groupCode;
-(void)setTroopMemberInCache:(id)cache forGroup:(id)group;
-(void)clearTroopMemberCache;
-(void)removeTroopMemberInCache:(id)cache;
-(id)getTroopMemberInCache:(id)cache;
-(void)clearRemark;
-(void)SetRemarkObj:(id)obj forGroup:(id)group;
-(id)GetRemarkObj:(id)obj;
-(int)statusByGroup:(id)group :(id)arg2;
-(id)nickForGroup:(id)group :(id)arg2;
-(id)groupListInfoThatHasNotInfo;
-(id)getGroupListInfoWithFlush:(BOOL)flush;
-(int)getGroupListInfoCount;
-(void)setReadForGroupContent:(id)groupContent groupCode:(id)code;
-(void)insertGroupMessage:(id)message;
-(id)GetMaxSeqForGroup:(id)group;
-(id)GetTroopMsgMaxSeqByGropuCode;
-(void)deleteMsgsWithGroupCode:(id)groupCode;
-(BOOL)saveGroupMaxSeqDict;
-(void)loadGroupListDic;
-(void)loadGroupExInfoDic;
-(void)loadGroupMaxSeqDict;
-(void)insertTroopMessageArray:(id)array;
-(void)changeAccount:(id)account;
-(void)dealloc;
-(id)init;
-(void)releaseAllCache:(id)cache;
-(void)releaseAllCache;
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
-(void)printCallStack;
-(void)updateMaxSeqDic:(id)dic MsgArray:(id)array;
-(void)AddMsgToCorrespondGroupMsgArr:(id)correspondGroupMsgArr Msg:(id)msg;
-(id)GenArrOfConsequentMsgArrSortedBySeq:(id)consequentMsgArrSortedBySeq ContainSelfSendMsg:(BOOL)msg;
-(id)ExtendMsgArrToConsequent:(id)consequent startSeq:(long long)seq EndSeq:(long long)seq3;
-(int)PreloadMsgFromDb:(id)db Uin:(id)uin startSeq:(long long)seq EndSeq:(long long)seq4;
-(void)updateNickCacheForGroupCode:(id)groupCode name:(id)name;
-(void)updateSeqCache:(id)cache;
@end

@interface QQDatabaseMigrationManager : NSObject <QQDatabaseMigratorDelegate> {
	NSMutableDictionary* _progressData;
	NSArray* _dbPathList;
	id<QQDatabaseMigratorDelegate> _delegate;
	int _totalTableCount;
	int _migratedTableCount;
	int _remainCount;
}
@property(assign, nonatomic) id<QQDatabaseMigratorDelegate> delegate;
@property(readonly, assign, nonatomic) float progress;
+(unsigned long long)getFreeDiskSpaceInBytes;
+(id)instance;
-(void)didFinishMigrationWithError:(int)error;
-(void)tableMigrationFinishedForGroup:(id)group inDatabase:(id)database withError:(int)error;
-(void)db:(id)db didFinishMigrationWithError:(int)error;
-(void)db:(id)db didStartMigrationWithError:(int)error;
-(BOOL)isFinished;
-(BOOL)getOverralMigrationCompletionFlag;
-(void)setOverralMigrationCompletionFlag;
-(void)setMigrationCompleteForGroup:(id)group inDB:(id)db;
-(void)setMigrationCompleteForDatabaseWithPath:(id)path;
-(void)startMigrationWithDelegate:(id)delegate threaded:(BOOL)threaded;
-(void)_startMigration;
-(BOOL)migrationFinishedWithPath:(id)path;
-(void)saveProgressData;
-(void)loadProgressData;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate dbPathList:(id)list;
-(id)init;
@end

@interface QQDatabaseMigrator : NSObject {
	FMDatabase* _db;
	BOOL _abort;
	BOOL _isFinished;
	int _errorCode;
	id<QQDatabaseMigratorDelegate> _delegate;
}
@property(retain, nonatomic) id<QQDatabaseMigratorDelegate> delegate;
@property(assign, nonatomic) BOOL isFinished;
-(BOOL)startMigration;
-(void)dealloc;
-(id)initWithDB:(id)db delegate:(id)delegate;
-(id)initWithDBPath:(id)dbpath delegate:(id)delegate;
-(void)_migrationMain;
-(void)shrinkDB:(id)db;
-(void)dropOldGroupMessageTableInDb:(id)db;
-(int)migrateDataForGroup:(id)group fromOffset:(int)offset count:(int)count withDB:(id)db;
-(BOOL)isTableExist:(id)exist withDB:(id)db;
-(int)createGroupTable:(id)table withDB:(id)db;
-(id)getGroupCodeList;
@end

@interface QQDBMigrationProgressWindow : UIWindow <QQDatabaseMigratorDelegate> {
	MBProgressHUD* _hud;
	NSTimer* _timer;
	int _timeoutCount;
}
-(void)didFinishMigrationWithError:(int)error;
-(void)tableMigrationFinishedForGroup:(id)group inDatabase:(id)database withError:(int)error;
-(void)db:(id)db didFinishMigrationWithError:(int)error;
-(void)db:(id)db didStartMigrationWithError:(int)error;
-(void)close;
-(void)didFadeOut;
-(void)loadWindow;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)timeout;
@end

@interface DBAsyncCallbackHelper : NSObject {
@private
	NSInvocation* _invoke;
	NSObject* _userdata;
	int _workid;
	id<DBAsyncCallbackProtocol> _cb;
}
@property(assign, nonatomic) int workid;
@property(retain, nonatomic) NSObject* userdata;
@property(retain, nonatomic) id<DBAsyncCallbackProtocol> cb;
@property(retain, nonatomic) NSInvocation* invoke;
-(void)dealloc;
@end

@interface QQDBObject : NSObject {
@private
	NSString* _dbFilePath;
	NSString* _uin;
	FMDatabase* _fmdb;
}
@property(retain, nonatomic) NSString* dbFilePath;
@property(readonly, assign, nonatomic) NSString* uin;
+(void)removeChangeAccountListner:(id)listner;
+(void)addChangedAccountListener:(id)listener;
+(id)setParametersExceptLastOne:(SEL)one target:(id)target va:(void*)va;
+(id)getDBThread;
+(void)invalidDb:(id)db;
+(void)releaseAll;
+(id)selectDb:(id)db;
+(BOOL)isValidUin:(id)uin;
+(void)setDbObject:(id)object;
+(void)notifyAccountChanged;
+(id)DBWithUin:(id)uin;
+(void)setContent:(id)content withModel:(id)model msgType:(int)type;
+(int)getMsgLenWithType:(int)type msg:(id)msg;
+(long long)getTableMaxMsgId:(id)anId;
+(void)releaseDB;
+(id)currentDB;
-(int)doAsyncOperation:(SEL)operation userdata:(id)userdata callback:(id)callback;
-(int)doAsyncOperation:(SEL)operation userdata:(id)userdata callback:(id)callback va:(void*)va;
-(void)doAsyncWork:(id)work userdata:(id)userdata callback:(id)callback workId:(int)anId callThread:(id)thread;
-(void)doCallback:(id)callback;
-(void)doAsyncDbOperation:(SEL)operation;
-(id)doDbOperation:(SEL)operation;
-(id)doDbOperation:(SEL)operation target:(id)target va:(void*)va async:(BOOL)async;
-(id)doDbOperationWithInvoke:(id)invoke async:(BOOL)async;
-(void)dealloc;
-(id)initWithUin:(id)uin;
-(void)createDBVersion0;
-(long long)getTableMaxMsgId:(id)anId inDb:(id)db;
-(void)createDBFile;
-(void)releaseFmdb;
-(id)GetDbInstance;
@end

@interface QQTroopRemarkTableOperation : NSObject {
}
-(void)CreateTroopRemarkTableIndex:(id)index;
-(id)getTroopRemarkList:(id)list inDb:(id)db;
-(void)insertTroopRemarkListBatch:(id)batch inDb:(id)db;
-(void)createTroopRemarkTable:(id)table withVersion:(int)version;
-(void)createTroopRemarkTable:(id)table;
-(void)insertTroopRemarkListWithDb:(long long)db GroupUin:(long long)uin MemUin:(long long)uin3 strNick:(id)nick strRemark:(id)remark DB:(id)db6;
@end

@interface QQTroopMemTableOperation : NSObject {
}
-(void)createTroopMemberTable:(id)table;
-(void)InsertTroopMemBatch:(id)batch inDb:(id)db;
-(id)GetTroopMemByGroupCode:(id)code inDb:(id)db;
-(void)deleteTroopMemberCache:(id)cache inDb:(id)db;
-(void)CreateTroopMemIndex:(id)index;
-(bool)insertTroopMemInternal:(id)internal :(id)arg2 :(id)arg3 :(id)arg4 :(id)arg5 :(id)arg6 :(id)arg7 :(id)arg8 database:(id)database;
-(void)createTroopMemberTable:(id)table withVersion:(int)version;
@end

@interface QQTroopMsgSeqTableOperation : NSObject {
}
-(void)createTroopMaxMsgSeqTable:(id)table;
-(id)getTroopMsgMaxSeqInDb:(id)db;
-(void)insertTroop:(id)troop maxSeq:(long long)seq content:(id)content unreadCount:(int)count inDb:(id)db;
-(void)createTroopMaxMsgSeqTable:(id)table withVersion:(int)version;
@end

@interface QQTroopMsgTableOperation : QQMessageTableBase {
@private
	NSString* dbuin;
}
@property(copy, nonatomic) NSString* dbuin;
-(void)setTroopMsgSendStateWithMsgID:(id)msgID groupcode:(id)groupcode state:(int)state inDb:(id)db;
-(int)getTroopMsgSendState:(int)state groupcode:(id)groupcode inDb:(id)db;
-(void)setTroopSuccessStateWithUUid:(id)uuid withGroupCode:(id)groupCode inDb:(id)db;
-(void)setTroopFailStateWithUUid:(id)uuid withGroupCode:(id)groupCode inDb:(id)db;
-(void)setTroopFailStateWithMsgID:(id)msgID withGroupCode:(id)groupCode inDb:(id)db;
-(void)setTroopReadStateWithMsgID:(id)msgID withGroupCode:(id)groupCode inDb:(id)db;
-(void)InsertTroopMessage:(id)message inDb:(id)db;
-(BOOL)updateSendGroupPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 inDb:(id)db;
-(BOOL)updateSendGroupPttState:(id)state uuid:(id)uuid duration:(unsigned)duration state:(int)state4 inDb:(id)db;
-(BOOL)updateSendGroupPicState:(id)state uuid:(id)uuid state:(int)state3 inDb:(id)db;
-(long long)getTroopMsgMaxSeq:(id)seq inDb:(id)db;
-(BOOL)updateGroupMessageSeq:(long long)seq groupCode:(id)code msgID:(id)anId inDb:(id)db;
-(void)deleteGroupMsgWithMsgId:(long long)msgId groupCode:(id)code msgType:(int)type inDb:(id)db;
-(id)getRecentGroupMsg:(id)msg;
-(int)QQDB_GetGroupMessageCount:(id)count inDb:(id)db;
-(long long)GetGroupMsgMaxSeq:(id)seq uin:(id)uin inDb:(id)db;
-(id)GetTroopMsgMaxSeqByGropuCodeinDb:(id)db;
-(void)updateTroopMessageUuid:(id)uuid inDb:(id)db;
-(BOOL)_insertTroopMessageArray:(id)array inDb:(id)db;
-(void)updateGroupMessageWithUin:(id)uin desTime:(int)time srcTime:(int)time3 sendUin:(id)uin4 inDb:(id)db;
-(id)GetTroopMsgWithTroopUin:(id)troopUin WithType:(int)type notMoreThanSeq:(long long)seq limitCount:(unsigned)count inDb:(id)db;
-(void)deleteGroupMessageWithUin:(id)uin msgSeq:(long long)seq sendUin:(id)uin3 inDb:(id)db;
-(void)deleteGroupMessageWithUin:(id)uin msgTime:(int)time sendUin:(id)uin3 inDb:(id)db;
-(void)deleteGroupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3 inDb:(id)db;
-(id)groupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3 inDb:(id)db;
-(id)groupMessageWithUin:(id)uin timeStamp:(int)stamp inDb:(id)db;
-(id)groupMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3 inDb:(id)db;
-(void)setReadForGroupContent:(id)groupContent groupCode:(id)code inDb:(id)db;
-(void)deleteMsgsWithGroupCode:(id)groupCode inDb:(id)db;
-(id)commonGroupModelWithQueryResult:(id)queryResult groupCode:(id)code;
-(id)groupMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page inDb:(id)db;
-(int)getTroopMessageTableSizeInDb:(id)db;
-(id)getTroopCountListFromTroopMsgInDb:(id)db;
-(id)getTroopListFromTroopMsgInDb:(id)db;
-(BOOL)deleteGarbageTroopMsg:(id)msg reserve:(int)reserve inDb:(id)db;
-(BOOL)deleteTroopMsg:(id)msg FromSeq:(id)seq inDb:(id)db;
-(void)clearAllTroopMsg:(id)msg;
-(void)updateTroopPttMsg:(id)msg inDb:(id)db;
-(void)updateTroopPttMsg:(id)msg groupCode:(id)code state:(int)state inDb:(id)db;
-(void)updateTroopMsgRecentFlag:(id)flag inDb:(id)db;
-(void)createTroopMsgIndexVer1:(id)a1;
-(void)createTroopMsgIndexVer0:(id)a0;
-(void)createTroopMessageTable:(id)table withVersion:(int)version;
-(BOOL)addSendStateToTroopMsgTable:(id)troopMsgTable;
-(BOOL)addMoreFlagToTroopMsgTable:(id)troopMsgTable;
-(BOOL)addShareMsgSupportToTroopMsgTable:(id)troopMsgTable;
-(void)createTable:(id)table;
-(void)dealloc;
-(id)initWithUin:(id)uin;
@end

@interface QQTroopTableOperation : NSObject {
}
-(void)createTroopListTable:(id)table;
-(id)groupListInfoForDicinDb:(id)dicinDb;
-(void)updateTroopRemarkStatus:(id)status :(id)arg2 inDb:(id)db;
-(void)updateTroopMemStatus:(id)status :(id)arg2 inDb:(id)db;
-(void)SetTroopName:(id)name GroupName:(id)name2 inDb:(id)db;
-(id)GetTroopUinAndCodeInDb:(id)db;
-(id)GetTroopUinAndCodeByGroupCode:(id)code inDb:(id)db;
-(id)getTroopRemarkLastSeq:(id)seq inDb:(id)db;
-(void)updateTroopRemarkLastSeq:(id)seq groupCode:(id)code inDb:(id)db;
-(id)GetGroupNameWithDb:(id)db DB:(id)db2;
-(id)getUnFinishRemarkInDb:(id)db;
-(id)groupListInfo:(id)info;
-(id)groupListInfoThatHasNotInfo:(id)info;
-(void)updateTroopName:(id)name groupCode:(int)code groupType:(int)type groupFlag:(int)flag groupFace:(int)face infoSeq:(int)seq inDb:(id)db;
-(void)insertTroopListForUin:(unsigned)uin code:(unsigned)code inDb:(id)db;
-(void)deleteTroopListByUin:(id)uin inDb:(id)db;
-(BOOL)addGroupInfoSeqColumnToTroopTable:(id)troopTable;
-(void)CreateTroopTableIndex:(id)index;
-(void)createTroopListTable:(id)table withVersion:(int)version;
@end

@interface QQImageWithMetadata : UIImage {
	CGSize _fitSize;
	BOOL _fitSizeCached;
	BOOL _isGif;
}
-(BOOL)isGif;
-(CGSize)fitSize;
-(id)initWithContentsOfFile:(id)file isGif:(BOOL)gif;
-(id)initWithData:(id)data;
@end

@interface QQChatImageMetaInfo : NSObject {
	CGSize _fitSize;
	CGSize _maxSize;
	int _isGif;
	NSString* _filePath;
	BOOL _noRoundCorner;
	id<QQChatImageMetaInfoObserver> _observer;
	CGSize _equalRatioScaleSize;
}
@property(retain, nonatomic) id<QQChatImageMetaInfoObserver> observer;
@property(readonly, assign, nonatomic) CGSize equalRatioScaleSize;
@property(assign, nonatomic) CGSize maxSize;
@property(assign, nonatomic) BOOL noRoundCorner;
-(id)getFillImage;
-(id)scaleImage:(id)image;
-(id)getScaleImage;
-(CGSize)fitSizeWithImage:(id)image;
-(CGSize)fitSize;
-(BOOL)isGif;
-(id)GetImagePath;
-(void)dealloc;
-(id)initWithFilePath:(id)filePath;
@end

@interface QQImageLoader : NSObject <QSHttpRequestDelegate> {
	float _systemVersion;
}
+(id)instance;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)request:(id)request didReceiveData:(id)data;
-(void)removeAllChatImageMetaInfo;
-(void)removeChatImageForUrl:(id)url;
-(void)removeChatImageForKey:(id)key;
-(id)loadChatImageWithUrl:(id)url;
-(id)cacheChatImage:(id)image atPath:(id)path;
-(id)loadChatImage:(id)image;
-(id)loadSecretImage:(id)image decryptKey:(int)key preHeadLength:(int)length;
-(id)loadImage:(id)image;
-(void)downloadImageWithUrl:(id)url toFile:(id)file;
-(id)tempPathToFilePath:(id)filePath;
-(id)filePathToTempPath:(id)tempPath;
-(id)init;
@end

@interface AccountRelatedSettingData : NSObject {
	NSMutableDictionary* _initialPushSetting;
	NSMutableDictionary* _currentPushSetting;
	NSString* _uin;
}
@property(retain, nonatomic) NSMutableDictionary* currentPushSetting;
@property(retain, nonatomic) NSMutableDictionary* initialPushSetting;
@property(retain, nonatomic) NSString* uin;
@property(assign, nonatomic) BOOL isGroupAssistantDeleted;
@property(assign, nonatomic) unsigned groupAssistantLastTime;
+(id)GetInstance;
-(void)setHasUpgradeSettings:(BOOL)settings;
-(BOOL)hasUpgradeSettings;
-(id)allLocalGroupMsgSettings;
-(id)getAllSettings;
-(void)setSyncRevision:(int)revision;
-(int)getSyncRevision;
-(id)valueForKey:(id)key;
-(void)setValue:(id)value forSetting:(id)setting;
-(void)resetSettingForKey:(id)key;
-(int)groupAssistantPCPolicyForGroup:(id)group;
-(void)setGroupAssistantPCPolicy:(int)policy forGroup:(id)group;
-(BOOL)isAnyGroupNotHaveAssistantPolicySetting;
-(id)savedGroupAssistantPolicyForGroup:(id)group;
-(int)groupAssistantPolicyForGroup:(id)group;
-(void)setGroupAssistantPolicy:(int)policy forGroup:(id)group;
-(void)setRecieveGroupMsg:(bool)msg forGroup:(id)group;
-(void)setRecieveGroupPush:(bool)push forGroup:(id)group;
-(int)getRecieveGroupMsg:(id)msg;
-(int)getRecieveGroupPush:(id)push;
-(void)setFailedSetting:(id)setting forUin:(id)uin;
-(id)getFailedSetting:(id)setting;
-(void)savePushSetting:(id)setting;
-(void)asyncSavePushSetting;
-(id)getPushSetting;
-(void)dealloc;
-(id)init;
-(void)setInitialPushSetting;
@end

@interface RequestItem : NSObject {
	id _content;
	NSString* _reqCmd;
	int _seq;
	int _retryTimes;
	NSString* _uin;
}
@property(retain, nonatomic) NSString* uin;
@property(assign, nonatomic) int retryTimes;
@property(assign, nonatomic) int seq;
@property(retain, nonatomic) NSString* reqCmd;
@property(retain, nonatomic) id content;
-(void)dealloc;
-(id)initWithCmd:(id)cmd andContent:(id)content seq:(int)seq retryTimes:(int)times uin:(id)uin;
@end

@interface AccountRelatedSettings : NSObject <IEngineDispatchDelegate> {
@private
	BOOL isWaitingForResp;
	NSMutableDictionary* _delayCommitSettings;
	NSMutableArray* _delayUpdateSettings;
	NSMutableDictionary* _requestList;
	NSMutableDictionary* _updatedData;
	int updatingRevision;
}
@property(retain, nonatomic) NSMutableDictionary* updatedData;
@property(retain, nonatomic) NSMutableDictionary* requestList;
@property(retain, nonatomic) NSMutableArray* delayUpdateSettings;
@property(retain, nonatomic) NSMutableDictionary* delayCommitSettings;
@property(assign, nonatomic) BOOL shouldHideGroupAssistant;
+(id)GetInstance;
-(void)_delayResetHideGroupAssitant;
-(void)_checkSyncRevision;
-(void)saveCurrentSetting;
-(id)valueForSetting:(id)setting;
-(void)setValue:(id)value forSetting:(id)setting;
-(int)groupAssistantPCPolicyForGroup:(id)group;
-(void)updateGroupAssistantPolicySettingsIfNeeded;
-(int)groupAssistantPolicyForGroup:(id)group;
-(void)setGroupAssistantPolicy:(int)policy forGroup:(id)group;
-(void)setRecieveGroupMsg:(bool)msg forGroup:(id)group;
-(void)setRecieveGroupPush:(bool)push forGroup:(id)group;
-(BOOL)needUpload:(id)upload;
-(id)valueForPath:(id)path;
-(id)pathForKey:(id)key;
-(void)responseUpgradeSettings:(char*)settings DataLen:(int)len Seq:(int)seq;
-(void)responseCommitSettings:(char*)settings DataLen:(int)len Seq:(int)seq;
-(void)responseUpdateSettings:(char*)settings DataLen:(int)len Seq:(int)seq;
-(void)uploadLocalSettings:(id)settings;
-(void)applySetting:(id)setting forPath:(id)path;
-(int)upgradeSettingsWithRetryTimes:(int)retryTimes;
-(int)updateSettings:(id)settings retryTimes:(int)times immediately:(BOOL)immediately;
-(int)commitSettings:(id)settings retryTimes:(int)times;
-(int)getTimeOut:(int)anOut;
-(void)dealDelayRequests;
-(void)notifyError:(id)error;
-(void)removeRequestItem:(int)item;
-(id)getRequestItem:(int)item;
-(void)addRequestItem:(id)item seq:(int)seq;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)onLoginSuccess;
-(void)updateAllSettings:(BOOL)settings;
-(void)dealloc;
-(id)init;
@end

@interface asyncThreadHelper : NSObject {
}
+(id)getReternValue:(id)value;
+(id)toInvocation:(SEL)invocation target:(id)target va:(void*)va;
+(id)toInvocation:(SEL)invocation target:(id)target;
@end

@interface QQDeveloperInfo : NSObject {
	NSString* _situationDescription;
	NSString* _owner;
	NSString* _QQNumber;
	int _situationID;
}
@property(assign, nonatomic) int situationID;
@property(retain, nonatomic) NSString* QQNumber;
@property(retain, nonatomic) NSString* owner;
@property(retain, nonatomic) NSString* situationDescription;
-(void)postNotification;
-(void)dealloc;
-(id)initWithOwner:(id)owner QQNumner:(id)numner desc:(id)desc situationID:(int)anId;
-(id)initWithOwner:(id)owner;
@end

@interface QQUnexpectedSituationHandler : NSObject {
	QQAlertViewController* _qqAlertViewController;
	NSMutableArray* _unRecvSituationArr;
}
+(id)getInstance;
-(BOOL)isSituationShouldBeRecv:(int)isSituation;
-(void)onSituationOccured:(id)occured;
-(void)dealloc;
-(id)init;
@end

@interface QQAlertViewController : NSObject <SimpleAlertViewDelegate> {
	NSMutableArray* _situationArr;
	SimpleAlertView* _alertView;
}
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)showAlertView;
-(void)addSituation:(id)situation;
-(void)dealloc;
-(id)init;
@end

@interface QQRoamSettingSwitchItem : NSObject {
	NSString* _title;
	NSString* _key;
	NSString* _style;
}
@property(retain, nonatomic) NSString* style;
@property(retain, nonatomic) NSString* key;
@property(retain, nonatomic) NSString* title;
+(id)createItem:(id)item key:(id)key style:(id)style;
-(float)getHeight;
-(void)dealloc;
@end

@interface QQRoamSettingSwitchViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, UIAlertViewDelegate> {
	UITableView* _tableView;
	NSMutableArray* _dataSources;
	NSMutableArray* _dataHeads;
	NSMutableArray* _dataFoots;
}
-(void)roamWebCallback:(id)callback;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)OnDeselectRowAtIndexPath:(id)indexPath;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)switchOffRoam;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidAppear:(BOOL)view;
-(void)restoreData;
-(void)reloadTableData;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQRoamSettingWelcomeViewController : QQViewController <QQGetRoamMsgModelProtocol, QQActionLabelDelegate> {
	UIImageView* _introImage;
	UILabel* _introLabel;
	UIButton* _switchButton;
	UIButton* _passwordCheck;
	UILabel* _passwordLabel;
	UILabel* _passwordIntroLabel;
	QQActionLabel* _roamTermLabel;
	NSString* _peerUin;
	BOOL _fromChatSetting;
	id _superController;
}
@property(assign, nonatomic) id superController;
@property(assign) BOOL fromChatSetting;
@property(retain, nonatomic) NSString* peerUin;
-(void)touchActionWithType:(int)type actionUrl:(id)url title:(id)title;
-(void)roamWebCallback:(id)callback;
-(void)changePasswordCheckStatus;
-(void)switchButtonClick;
-(void)switchOnRoamAndGotoSwitchViewController;
-(void)GetRoamMsgTimeOut;
-(void)GetRoamMsgFinish;
-(void)GetRoamMsgError:(int)error string:(id)string;
-(void)switchOnAndTryGetRoamMessage;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface AsynFileStorage : NSObject {
@private
	TaskThread* _taskthread;
}
+(id)GetInstance;
-(void)save:(id)save toFile:(id)file callback:(id)callback userdata:(id)userdata;
-(void)doSaveMsgSyncCache:(id)cache toFile:(id)file callback:(id)callback userdata:(id)userdata callThread:(id)thread;
-(void)doCallBack:(id)back;
-(id)getFromFile:(id)file;
-(id)doRead:(id)read;
-(void)save:(id)save toFile:(id)file;
-(void)dealloc;
-(id)init;
@end

@interface FriendListHeaderModel : NSObject {
	UIImage* _icon;
	NSString* _title;
	NSString* _subTitle;
	int _section;
	BOOL _bExpand;
	BOOL _bLastExpand;
	BOOL _isEntry;
	BOOL _isNew;
	int _identifyID;
	NSMutableArray* _cellDataList;
	QQGroupModel* _groupModel;
}
@property(retain, nonatomic) QQGroupModel* groupModel;
@property(retain, nonatomic) NSMutableArray* cellDataList;
@property(retain, nonatomic) NSString* subTitle;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) UIImage* icon;
@property(assign) int identifyID;
@property(assign) int section;
@property(assign) BOOL isNew;
@property(assign) BOOL isEntry;
@property(assign) BOOL lastExpand;
@property(assign) BOOL expand;
+(id)createFriendsGroupHeaderModel;
+(id)createPublicAcountHeaderModel;
+(id)createDiscussGroupHeaderModel;
+(id)createGroupHeaderModel;
+(id)createCircleHeaderModel;
+(id)createAddressBookHeaderModel;
-(void)dealloc;
-(id)init;
@end

@interface FriendListHeaderView : UIView {
	BOOL _isHighlighted;
	BOOL _isSectionTitleIndexMode;
	FriendListHeaderModel* _model;
	id<FriendListHeaderViewDelegate> _delegate;
	UIImageView* _arrowIconView;
	int _rightOffset;
}
@property(assign, nonatomic) int rightOffset;
@property(assign, nonatomic) id<FriendListHeaderViewDelegate> delegate;
@property(retain, nonatomic) FriendListHeaderModel* model;
@property(assign) BOOL isSectionTitleIndexMode;
-(void)notifyDelegateHeaderViewDidTouch;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setHighlighted:(BOOL)highlighted;
-(void)showExpandAnimation;
-(void)setHeaderModel:(id)model;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface FriendListActionItem : NSObject {
}
+(void)actionGotoPubAccountChatViewController:(id)controller;
+(void)actionGotoContactChatViewController:(id)controller;
+(void)actionGotoDiscussChatViewController:(id)controller;
+(void)actionGotoGroupChatViewController:(id)controller groupName:(id)name;
+(void)actionGotoUserSummaryViewController:(id)controller;
+(void)actionGotoC2CChatViewController:(id)controller;
+(void)actionViewContactProfile:(id)profile;
+(void)actionGotoDiscussGroupSetting:(long long)setting;
+(void)actionGotoGroupSetting:(id)setting;
+(void)actionViewFriendProfile:(id)profile;
@end

@interface MemHeadView : UIView <UITableViewDataSource, UITableViewDelegate> {
	NSMutableArray* _memData;
	NSMutableArray* _btnAry;
	UITableView* _bgScrollView;
	UIImageView* _bgView;
	UIButton* _beginBtn;
	id<MemHeadViewDelegate> _delegate;
	BOOL _deleteState;
	BOOL _supportRemoveAll;
	int _maxHeadNum;
	NSMutableDictionary* _userInfo;
	NSMutableArray* _sourceMembers;
	NSMutableArray* _expandingMembers;
	int _type;
	long long _discussUIN;
}
@property(assign, nonatomic) BOOL beginBtnHidden;
@property(readonly, assign, nonatomic) long long discussUIN;
@property(readonly, assign, nonatomic) int type;
@property(retain, nonatomic) NSMutableArray* expandingMembers;
@property(retain, nonatomic) NSMutableArray* sourceMembers;
@property(retain, nonatomic) UIButton* beginBtn;
@property(retain, nonatomic) NSMutableDictionary* userInfo;
@property(assign, nonatomic) BOOL supportRemoveAll;
@property(assign, nonatomic) int maxHeadNum;
@property(assign, nonatomic) BOOL deleteState;
@property(assign, nonatomic) id<MemHeadViewDelegate> delegate;
-(id)getAllExpandingModels;
-(id)getSourceMembers;
-(id)getAllMembers;
-(BOOL)removeAllExpandingMembers;
-(void)removeExpandingMemberButton:(int)button;
-(BOOL)removeExpandingMember:(id)member;
-(void)addExpandingMemberButton:(id)button;
-(BOOL)addExpandingMember:(id)member;
-(int)indexofExpandingMembers:(id)members;
-(BOOL)isExistInMembers:(id)members;
-(void)dealloc;
-(void)didRemoveSelect:(id)select;
-(void)didSelect:(id)select;
-(void)clearMemData;
-(void)setMemData:(id)data;
-(id)getMemData;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)actionDone:(id)done;
-(void)createMemHeadView:(CGRect)view sourceMembers:(id)members type:(int)type discussUIN:(long long)uin;
-(id)initWithFrame:(CGRect)frame sourceMembers:(id)members type:(int)type discussUIN:(long long)uin;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQRelationshipCreatingViewController : QQViewController <UITableViewDelegate, UITableViewDataSource> {
	UITableView* _tableView;
}
-(void)makeNewTipDisabled;
-(void)makeNewTipVisibleIfNeed:(id)need atIndexPath:(id)indexPath;
-(void)_addFriendFromPhone;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillAppear:(BOOL)view;
-(void)reloadData;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQRoamSettingWebDelegate : NSObject {
	id _delegate;
}
+(id)sharedInstance;
-(void)webCallback:(id)callback;
-(void)enterWebViewControllerWithAction:(id)action delegate:(id)delegate navigationController:(id)controller;
-(void)setDelegateNil:(id)aNil;
-(id)init;
@end

@interface FriendListViewNew : UITableView <FriendListHeaderViewDelegate, UITableViewDelegate, UITableViewDataSource> {
	BOOL _isShowOnline;
	NSMutableArray* _friendList;
	FriendListHeaderModel* _lastExpandedModel;
	id<FriendListViewDelegate> _friendListViewDelegate;
}
@property(assign, nonatomic) id<FriendListViewDelegate> friendListViewDelegate;
@property(assign, nonatomic) BOOL isShowOnline;
-(void)friendListHeaderViewDidTouch:(id)friendListHeaderView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)initCellForFriend:(id)aFriend atIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)reloadFriendListDataAfterDelay;
-(void)reloadFriendListData;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame isShowOnline:(BOOL)online;
-(id)initWithFrame:(CGRect)frame;
@end

@interface GroupListViewNew : UITableView <UITableViewDelegate, UITableViewDataSource> {
	NSMutableArray* _groupList;
	QQRelationLogicEngine* _logicEngine;
	id<GroupListViewDelegate> _groupListViewDelegate;
}
@property(assign, nonatomic) id<GroupListViewDelegate> groupListViewDelegate;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)initCellForQQGroup:(id)qqgroup atIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)reloadGroupList;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQMsgLoggerInfo : QQLoggerInfo {
	NSMutableDictionary* _dic;
	NSMutableArray* _sortArray;
}
-(id)serializeMsgLog;
-(void)setObject:(id)object forKey:(id)key;
-(void)addMsgLogFromDic:(id)dic;
-(void)addSortArrayFromArray:(id)array;
-(void)dealloc;
-(id)init;
@end

@interface QQActionLabel : UIView {
	BOOL _alignCenter;
	BOOL _underline;
	UILabel* _titleLabel;
	UIButton* _touchButton;
	NSString* _actionUrl;
	NSString* _titleStr;
	int _type;
	id<QQActionLabelDelegate> _touchActionDelegate;
}
@property(assign, nonatomic) id<QQActionLabelDelegate> touchActionDelegate;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) BOOL underline;
@property(assign, nonatomic) BOOL alignCenter;
-(void)touchAction;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)setWapTitle:(id)title;
-(void)setActionUrl:(id)url;
-(void)setTitle:(id)title actionText:(id)text;
-(void)setShadowColor:(id)color shadowOffset:(CGSize)offset;
-(void)setActionTextColor:(id)color;
-(void)setTextColor:(id)color;
-(void)setFont:(id)font;
-(id)initWithFrame:(CGRect)frame;
@end

@interface TipWindow : UIWindow {
	UIView* _contentView;
	id<TipWindowDelegate> _appDelegate;
	BOOL _show;
}
@property(assign, nonatomic) id<TipWindowDelegate> appDelegate;
-(void)dealloc;
-(void)closeWithContact;
-(void)close;
-(void)createButtonAt:(CGRect)at withImage:(id)image hiImage:(id)image3 withBgImage:(id)bgImage hiBgImage:(id)image5 selector:(SEL)selector;
-(void)createImageViewAt:(CGRect)at withImage:(id)image;
-(void)loadGuideView;
-(id)getImage:(id)image;
-(void)animationOut;
-(void)fadeOut;
-(void)fadeIn;
-(void)hiddenWindow;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQAnimationInfo : NSObject {
	UIViewController* _viewController;
	UINavigationController* _navController;
	BOOL _animated;
	int _actionType;
}
@property(assign) int actionType;
@property(assign) BOOL animated;
@property(retain) UINavigationController* navController;
@property(retain) UIViewController* viewController;
-(id)description;
-(void)dealloc;
-(id)initWithViewController:(id)viewController navCtr:(id)ctr animated:(BOOL)animated actionType:(BOOL)type;
@end

@interface QQViewControllerManager : NSObject {
	NSMutableArray* _animationInfoArr;
	QQAnimationInfo* _currnAnimationInfo;
}
+(id)getInstance;
-(void)performNextAnimation;
-(void)onViewDisappeared:(id)disappeared;
-(void)onViewAppeared:(id)appeared;
-(void)animationTimeout:(id)timeout;
-(BOOL)canPopViewController:(id)controller toViewCtr:(id)viewCtr popType:(int)type animated:(BOOL)animated;
-(BOOL)canPushViewController:(id)controller toNav:(id)nav animated:(BOOL)animated;
-(id)getTopNavCtrByRootNav:(id)nav;
-(void)dealloc;
-(id)init;
@end

@interface QContactsService : NSObject <IContactsService> {
}
+(id)getInstance;
-(void)onResponseSummaryNotification:(id)notification;
-(void)clearRecommendedContacts;
-(int)getUnreadRecommendedContactCount;
-(BOOL)isReadRecommendedContact:(id)contact;
-(void)setRecommendedContactsRead;
-(id)getContactRecommendList;
-(BOOL)removeSingleContactFromList:(id)list;
-(BOOL)updateContactsStat;
-(void)setNeedRemindBeFoundWithMobilePhoneStr:(id)mobilePhoneStr remind:(BOOL)remind;
-(BOOL)isNeedRemindBeFoundWithMobilePhoneStr:(id)mobilePhoneStr;
-(BOOL)isNeedRemindContactsBindingWithUIN:(long long)uin;
-(void)rejectContactFriend:(id)aFriend uin:(long long)uin sig:(id)sig respContent:(id)content;
-(void)confirmContactFriend:(id)aFriend uin:(long long)uin sig:(id)sig respContent:(id)content;
-(void)addContactFriend:(id)aFriend verifyContent:(id)content;
-(void)replaceBlackList:(id)list;
-(void)removeMobilePhoneAtBlackList:(id)blackList;
-(void)addMobilePhoneToBlackList:(id)blackList;
-(BOOL)isMobilePhoneAtBlackList:(id)blackList;
-(BOOL)isDisableToChat:(id)chat;
-(id)getContactLocalPhoneCodesWithPhoneCodes:(id)phoneCodes;
-(id)getContactPhoneLabelsWithPhoneCodes:(id)phoneCodes;
-(void)updateFriendUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(long long)getContactUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactMobilePhoneWithUIN:(long long)uin;
-(id)getContactNameWithUIN:(long long)uin;
-(BOOL)updateContactNickName:(id)name withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactNickNameWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactNameWithMobilePhoneStr:(id)mobilePhoneStr;
-(BOOL)isMobilePhoneAtUnbindContacts:(id)unbindContacts;
-(BOOL)isMobilePhoneAtBindContacts:(id)bindContacts;
-(BOOL)isMobilePhoneAtContacts:(id)contacts;
-(id)getMyselfMobilePhoneWithoutCountry;
-(id)getMyselfMobilePhone;
-(BOOL)isBinding;
-(int)getContactBinderFromWithMobilePhoneStr:(id)mobilePhoneStr;
-(void)removeTempUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(void)setNoCountryPhone:(id)phone withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getCountryAndPhoneCodeStr2WithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getCountryAndPhoneCodeStrWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getNoCountryPhoneWithMobilePhone:(id)mobilePhone;
-(void)setContactUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(void)setChatUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getMobilePhoneWithChatUIN:(long long)chatUIN;
-(long long)getChatUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getMobilePhoneWithTemporaryUIN:(long long)temporaryUIN;
-(long long)getTemporaryUINWithMobilePhoneStr:(id)mobilePhoneStr makeIfNotExist:(BOOL)exist;
-(BOOL)isTemporaryUIN:(long long)uin;
-(long long)getTemporaryUIN;
-(void)dealloc;
-(id)init;
@end

@interface QQGroupAssistantViewController : QQBaseClusterMessageViewController {
@private
	unsigned _initUnreadChatSessionCountOfNonPromptGroup;
	unsigned _groupAssistantCount;
}
@property(assign, nonatomic) unsigned initUnreadChatSessionCountOfNonPromptGroup;
@property(assign, nonatomic) unsigned groupAssistantCount;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)gotoGroupAssistantSettings:(id)settings;
-(int)getTroopAssistantUnreadSessonCount;
-(void)ActionRichMessageStateChange:(id)change;
-(void)ActionMessageSendStateChange:(id)change;
-(void)refreshMessageViewData;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithModel:(id)model topString:(id)string;
@end

@interface QQGroupAssistantMessageModel : QQRecentMessageModel {
@private
	unsigned _lastTime;
	QQRecentMessageModel* _contentMessageModel;
}
@property(assign, nonatomic) unsigned lastTime;
@property(retain, nonatomic) QQRecentMessageModel* contentMessageModel;
-(void)dealloc;
@end

@interface QQCurrentAccountCommandHandler : NSObject <QQGeneralInformationDelegate, IFaceObserver> {
}
-(void)notifyLoadHeadImageFinished:(id)finished;
-(id)doRequest:(id)request;
@end

@interface QQTokenCommandHandler : NSObject <QQGeneralInformationDelegate> {
}
-(id)doRequest:(id)request;
@end

@interface QQAccountInfoCommandHanler : NSObject <QQGeneralInformationDelegate> {
}
-(id)doRequest:(id)request;
@end

@interface QQAccountTokenCommandHandler : NSObject <QQGeneralInformationDelegate> {
}
-(id)doRequest:(id)request;
@end

@interface QQAccountListHandler : NSObject <QQGeneralInformationDelegate, IFaceObserver> {
}
-(void)notifyLoadHeadImageFinished:(id)finished;
-(id)doRequest:(id)request;
@end

@interface QQGroupInfoHandler : NSObject <QQGeneralInformationDelegate> {
}
-(id)doRequest:(id)request;
@end

@interface QQUISkinsHandler : NSObject <QQGeneralInformationDelegate> {
}
-(id)doRequest:(id)request;
@end

@interface QQViewControllerHandler : NSObject <QQGeneralInformationDelegate> {
}
-(id)showPublicAccountCard:(id)card;
-(id)shareWithFriend:(id)aFriend;
-(id)doRequest:(id)request;
@end

@interface QQSimpleAlertHandler : NSObject <QQGeneralInformationDelegate> {
}
-(void)showWithStyle:(int)style delegate:(id)delegate title:(id)title message:(id)message buttonArray:(id)array tag:(int)tag;
-(id)doRequest:(id)request;
@end

@interface QQGotoQRCodeScanHandler : NSObject <QQGeneralInformationDelegate> {
}
-(void)dealOtherAppQRCodeResultDelay:(id)delay;
-(id)doRequest:(id)request;
@end

@interface QQTipsHandler : NSObject <QQGeneralInformationDelegate> {
}
-(id)doRequest:(id)request;
@end

@interface QQUniLogUploadEngineHandler : NSObject <QQGeneralInformationDelegate> {
}
-(id)doRequest:(id)request;
@end

@interface QQGetDataHandler : NSObject <QQGeneralInformationDelegate> {
}
-(id)doRequest:(id)request;
@end

@interface QQGeneralInformationService : NSObject <QQBizDelegate> {
	NSMutableDictionary* _handlerDict;
}
+(id)instance;
-(void)invoke:(id)invoke forProtocol:(id)protocol;
-(BOOL)isPassViewSHow;
-(BOOL)isLogin;
-(id)doRequest:(id)request;
-(void)dealloc;
-(id)init;
-(BOOL)sendData:(id)data cmd:(id)cmd pSeq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(void)unregisterDispatchDelegate:(id)delegate;
-(BOOL)registerDispatchDelegate:(id)delegate dispatchDelegate:(id)delegate2;
-(id)QQCleanTips;
-(id)QQLoadingTips:(id)tips;
-(void)QQTrace:(id)trace inFile:(const char*)file atLine:(int)line;
@end

@interface QQGroupAssistantSettingsViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate> {
	UITableView* _tableView;
	NSMutableArray* _dataSources;
	NSMutableArray* _groupAcceptArr;
	NSMutableArray* _groupOnlyCountArr;
	NSMutableArray* _groupBlockedArr;
	int _selectedMessageWay;
@private
	NSIndexPath* _selectedIndexPath;
}
@property(retain, nonatomic) NSIndexPath* selectedIndexPath;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(id)_groupMsgRemindTitleForPC:(int)pc;
-(void)_refreshTableView;
-(void)_editTableViewAnimated;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)GetValueForKey:(id)key;
-(void)clickSwitch:(id)aSwitch;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)restoreData;
-(void)viewDidLoad;
-(id)init;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface QLargeMsgStruct : NSObject {
	short divSeq;
	BOOL pkgNum;
	BOOL pkgIndex;
	BOOL weight;
	int msgID;
	int time;
	NSMutableArray* _msgArray;
}
@property(retain, nonatomic) NSMutableArray* msgArray;
@property(assign, nonatomic) int time;
@property(assign, nonatomic) int msgID;
@property(assign, nonatomic) BOOL weight;
@property(assign, nonatomic) BOOL pkgIndex;
@property(assign, nonatomic) BOOL pkgNum;
@property(assign, nonatomic) short divSeq;
-(void)dealloc;
-(id)initWithPkgNum:(BOOL)pkgNum pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId time:(int)time;
@end

@interface QMsgSpliteMergeService : NSObject <IMsgSpliteMergeService> {
@private
	NSMutableDictionary* _sendLargeMsgCache;
	NSMutableDictionary* _getLargeMsgCache;
	NSMutableDictionary* _UIModelCache;
	NSMutableDictionary* _SeqCache;
	NSMutableDictionary* _messageTmpCache;
	long long _getGroupMessageSSOSeq;
	id<QMsgSpliteMergeProtocol> _delegate;
	NSString* _uin;
	BOOL _requestCount;
	int _state;
	NSMutableArray* _tmpLoadMessageCache;
	BOOL _nomoreRoamMessage;
}
@property(retain, nonatomic) NSString* uin;
@property(assign, nonatomic) id<QMsgSpliteMergeProtocol> delegate;
+(id)shareInstance;
-(id)_sortedGroupMessageArrayFromArray:(id)array;
-(void)clearCacheLoadMessage;
-(id)getCacheLoadMessage;
-(void)cacheLoadMessage:(id)message;
-(void)printQQMessageModel:(id)model;
-(void)updateGroupMessageDB:(id)db;
-(void)updateOneGroupMessageDB:(id)db;
-(void)actionGetGroupMessage:(id)message;
-(int)getGroupMessage:(id)message begin:(long long)begin last:(long long)last;
-(BOOL)handleWupSendResult:(int)result recvWupStruct:(CIMEngineMsgStruct*)aStruct userInfo:(id)info;
-(id)getBigMessageUniqueKey:(id)key;
-(int)amendOfflineUnreadMessageCountWithMsgArray:(id)msgArray;
-(BOOL)stringContainsEmoji:(id)emoji emojiLen:(int*)len;
-(BOOL)isEmoji:(const char*)emoji;
-(BOOL)isEscapeCharacter:(id)character;
-(int)getMinMsgID:(id)anId;
-(id)sortLargeMessageByTime:(id)time;
-(id)sortLargeMessage:(id)message;
-(void)getCompleteMessage:(id)message begin:(long long)begin end:(long long)end;
-(BOOL)checkMessageContinuity:(id)continuity faultTime:(int)time;
-(long long)checkMessageContinuity:(id)continuity begin:(long long)begin end:(long long)end;
-(BOOL)checkBigMessageAbility:(id)ability;
-(BOOL)checkBigMessageAbility;
-(void)cacheBigMessage:(id)message;
-(void)cacheBigMessage:(id)message cache:(id)cache;
-(void)cacheBigMessage:(id)message splite:(id)splite;
-(void)checkSpliteMessage:(id)message splite:(id)splite;
-(id)getCompleteLargeMessage:(id)message startLocation:(int)location;
-(id)getCompleteLargeMessage:(id)message addMsgArray:(id)array;
-(id)getSortedLargeMessageArray:(id)array;
-(id)mergeLargeMessage:(id)message;
-(unsigned short)getSendMessageCharSeq:(long long)seq;
-(unsigned short)getSendMessageSeq:(long long)seq;
-(id)getUICacheLargeMsgArray:(id)array;
-(int)checkUILargeMsgWithMessageModel:(id)messageModel;
-(BOOL)deleteCacheLargeMsg:(id)msg;
-(void)clearCacheLargeMsg;
-(id)getCacheLargeMsgArray:(id)array;
-(id)mergerLargeMessage:(id)message;
-(int)checkPushLargeMsgWithMessageModel:(id)messageModel;
-(BOOL)checkPushLargeMsgWithPkgNum:(BOOL)pkgNum pkgIndex:(BOOL)index divSeq:(short)seq;
-(BOOL)checkLargeMsgResponse:(id)response;
-(void)sendLargeMsg:(id)msg;
-(void)updateDiscussSendState:(id)state state:(int)state2;
-(void)updateGroupSendState:(id)state groupCode:(id)code state:(int)state3;
-(void)updateC2CSendingState:(id)state state:(int)state2;
-(void)handleMessageFinish:(id)finish;
-(void)handleMsgResult:(id)result;
-(id)getRelatedMsgIDFromMultiMsg:(id)multiMsg;
-(void)dealloc;
-(id)init;
-(BOOL)isLargeMsg:(id)msg maxSize:(int)size;
-(id)MsgDivide:(id)divide maxSize:(int)size;
-(id)GetPartString:(id)string maxLen:(int)len;
@end

@interface QQClearCacheEngine : NSObject {
@private
	NSMutableArray* _expireFiles;
	BOOL _isBackgroud;
	BOOL _isSearchingFile;
}
@property(retain, nonatomic) NSMutableArray* expireFiles;
+(id)GetInstance;
-(void)syncDeleteFiles;
-(void)asyncSearchExpireFiles;
-(id)getDir:(const char*)dir Under:(const char*)under;
-(id)getNeedClearCachePaths:(BOOL)paths;
-(void)stopClearExpireCaches;
-(void)cleanImagePathCache;
-(void)startSyncDelete;
-(void)startClearExpireCaches;
-(id)getTempPathsFor:(id)aFor;
-(void)renameFolders:(id)folders;
-(void)notifyUI;
-(void)asyncDeleteFolders:(id)folders;
-(void)clearTempFiles;
-(void)clearPTTFiles;
-(void)clearAllCaches;
-(void)dealloc;
-(id)init;
@end

@interface UserSummaryServiceImpl : NSObject <IUserSummaryService, IEngineDispatchDelegate, CardInfoFileTransferDelegate, DBAsyncCallbackProtocol> {
	UserSummaryModel* _curModel;
	NSTimer* _timer;
	NSMutableDictionary* _requestQueque;
	NSMutableArray* _fileTransferQueue;
	int _requestId;
}
@property(retain, nonatomic) UserSummaryModel* curModel;
+(id)GetInstance;
-(void).cxx_destruct;
-(void)CardInfoFileTransfer:(id)transfer verfiyCodePassed:(BOOL)passed;
-(void)CardInfoFileTransfer:(id)transfer verifyCodeData:(id)data codeType:(id)type prompt:(id)prompt;
-(void)CardInfoFileTransfer:(id)transfer curTransSize:(int)size totalTransSize:(int)size3;
-(void)CardInfoFileTransfer:(id)transfer didFinished:(int)finished;
-(void)respSendVerifyCode:(id)code passed:(BOOL)passed;
-(BOOL)requestSendVerifyCode:(id)code sessionID:(int)anId;
-(void)respSetQQFaceWithFileTransKey:(char*)fileTransKey DataLen:(int)len Seq:(int)seq;
-(id)requestSetQQFaceWithFileTransKey:(id)fileTransKey;
-(void)respUploadQQFaceWithFileTrans:(id)fileTrans resultCode:(int)code;
-(int)requestUploadQQFaceWithFileTrans:(id)fileTrans;
-(void)respVoteSomebody:(char*)somebody DataLen:(int)len Seq:(int)seq;
-(BOOL)requestVoteSomebody:(long long)somebody;
-(void)respReportIllegalUser:(char*)user DataLen:(int)len Seq:(int)seq;
-(void)delayPostReportIllegalSuccNotification:(id)notification;
-(BOOL)requestReportIllegalUser:(long long)user;
-(void)respModifyRemark:(id)remark;
-(BOOL)requestModifyRemark:(long long)remark remark:(id)remark2;
-(void)respUserSummary:(char*)summary DataLen:(int)len Seq:(int)seq;
-(int)requestUserSummary:(long long)summary comeFrom:(int)from groupCode:(long long)code;
-(int)requestUserSummaryBySearchName:(id)name comeFrom:(int)from groupCode:(long long)code;
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
-(void)onPeriod;
-(void)stopTimer;
-(void)startTimer;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)cancelAllFileTransferExcept:(id)except resultCode:(int)code;
-(void)openUsersummaryPage:(long long)page type:(int)type;
-(void)removeRequestItem:(id)item;
-(BOOL)switchModelToUin:(long long)uin;
-(void)reset;
-(void)setCurModelValue:(id)value;
-(id)getModelWithUin:(long long)uin;
-(void)dealloc;
-(id)init;
@end

@interface CRequestItem : NSObject {
	unsigned long long _uin;
	NSString* _searchName;
	int _timeout;
	NSString* _serverCmd;
	id _data;
	id _reserve;
	int _summaryType;
}
@property(assign, nonatomic) int summaryType;
@property(retain, nonatomic) id reserve;
@property(retain, nonatomic) id data;
@property(retain, nonatomic) NSString* serverCmd;
@property(assign, nonatomic) int timeout;
@property(retain, nonatomic) NSString* searchName;
@property(assign, nonatomic) unsigned long long uin;
-(void).cxx_destruct;
-(void)dealloc;
@end

@interface UserSummaryModel : NSObject {
	long long _uin;
	NSString* _nick;
	int _gender;
	int _age;
	NSString* _country;
	NSString* _province;
	NSString* _city;
	NSString* _reserve;
	NSString* _signature;
	NSString* _contactName;
	NSString* _mobileNumber;
	unsigned _qzoneFeedShowControl;
	NSString* _qzoneFeedsDesc;
	int _level;
	NSString* _remark;
	NSString* _autoRemark;
	NSString* _latestPicUrl1;
	NSString* _latestPicUrl2;
	NSString* _latestPicUrl3;
	unsigned _uLatestPhotoTimestamp;
	unsigned _uOldestPhotoTimestamp;
	NSString* _groupName;
	NSString* _groupNick;
	int _voteCount;
	int _latestVoteCount;
	int _valid4Vote;
	int _sysFaceId;
	NSString* _customFaceUrl;
	NSString* _qqState;
	long _cacheControl;
	unsigned _photoCount;
	NSMutableDictionary* _vipInfoDic;
	NSData* _cookis;
	int _eAddOption;
	NSMutableArray* _vAddQuestion;
	NSData* _seedBuf;
@private
	unsigned qzoneFeedShowControl;
	NSString* qzoneFeedsDesc;
}
@property(retain, nonatomic) NSData* seedBuf;
@property(retain, nonatomic) NSMutableArray* vAddQuestion;
@property(assign, nonatomic) int eAddOption;
@property(retain, nonatomic) NSData* cookis;
@property(retain, nonatomic) NSMutableDictionary* vipInfoDic;
@property(assign, nonatomic) unsigned photoCount;
@property(assign, nonatomic) long cacheControl;
@property(retain, nonatomic) NSString* qqState;
@property(retain, nonatomic) NSString* customFaceUrl;
@property(assign, nonatomic) int sysFaceId;
@property(assign, nonatomic) int valid4Vote;
@property(assign, nonatomic) int latestVoteCount;
@property(assign, nonatomic) int voteCount;
@property(retain, nonatomic) NSString* groupNick;
@property(retain, nonatomic) NSString* groupName;
@property(assign, nonatomic) unsigned uOldestPhotoTimestamp;
@property(assign, nonatomic) unsigned uLatestPhotoTimestamp;
@property(retain, nonatomic) NSString* latestPicUrl3;
@property(retain, nonatomic) NSString* latestPicUrl2;
@property(retain, nonatomic) NSString* latestPicUrl1;
@property(retain, nonatomic) NSString* autoRemark;
@property(retain, nonatomic) NSString* remark;
@property(assign, nonatomic) int level;
@property(retain, nonatomic) NSString* qzoneFeedsDesc;
@property(assign, nonatomic) unsigned qzoneFeedShowControl;
@property(retain, nonatomic) NSString* mobileNumber;
@property(retain, nonatomic) NSString* contactName;
@property(retain, nonatomic) NSString* signature;
@property(retain, nonatomic) NSString* reserve;
@property(retain, nonatomic) NSString* city;
@property(retain, nonatomic) NSString* province;
@property(retain, nonatomic) NSString* country;
@property(assign, nonatomic) int age;
@property(assign, nonatomic) int gender;
@property(retain, nonatomic) NSString* nick;
@property(assign, nonatomic) long long uin;
-(void).cxx_destruct;
-(int)deleteFromDb:(id)db userdata:(id)userdata;
-(int)saveToDb:(id)db userdata:(id)userdata;
-(BOOL)loadFromDb:(long long)db;
-(void)getModelWithModel:(id)model;
-(id)description;
@end

@interface UserSummaryDBService : NSObject {
@private
	QQUserSummaryTable* _db;
}
+(id)GetInstance;
-(void).cxx_destruct;
-(int)asyncSaveUserSummaryModelToDb:(id)db callback:(id)callback userdata:(id)userdata;
-(id)getUserSummaryModelFromDb:(long long)db;
-(int)asyncGetUserSummaryModelFromDb:(long long)db callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteUserSummaryModelFromDb:(long long)db callback:(id)callback userdata:(id)userdata;
-(id)init;
@end

@interface UserSummaryBaseCell : UITableViewCell {
	NSString* _name;
	int _itemType;
	BOOL _isAccessoryTypeExist;
	UILabel* _nameLabel;
	UIImageView* _expandArrow;
	UIImageView* _bgImageView;
}
@property(assign, nonatomic) BOOL isAccessoryTypeExist;
@property(readonly, assign, nonatomic) int itemType;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) UIImageView* bgImageView;
@property(retain, nonatomic) UIImageView* expandArrow;
@property(retain, nonatomic) UILabel* nameLabel;
+(BOOL)isLinkedLabelsMultiLines:(id)lines tableWidth:(int)width accessoryType:(BOOL)type;
+(int)height4LinkedLabels:(id)labels tableWidth:(int)width accessoryType:(BOOL)type;
+(int)heightofThisItem:(id)item tableWidth:(int)width accessoryType:(BOOL)type;
+(int)heightOfThisMaxLinesItem:(id)thisMaxLinesItem tableWidth:(int)width maxLine:(int)line accessoryType:(BOOL)type;
-(void).cxx_destruct;
-(void)changeToNormal;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setExpandArrowVisible:(BOOL)visible;
-(void)setSumItemName:(id)name itemType:(int)type;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface UserSummarySimpleTextCell : UserSummaryBaseCell {
	NSString* _text;
	UILabel* _simpleTextLabel;
	UIColor* _simpleColor;
}
@property(retain, nonatomic) UILabel* simpleTextLabel;
@property(retain, nonatomic) NSString* text;
-(void).cxx_destruct;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)hidePendingMenu;
-(void)copyData:(id)data;
-(void)showPendingMenu;
-(void)layoutSubviews;
-(void)setSimpleTextColor:(id)color;
-(void)setSumSimpleText:(id)text;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface UserSummaryPhotosCell : UserSummaryBaseCell {
	NSMutableArray* _imageUrlArray;
	NSMutableArray* _imageViewArray;
	id<UserSummaryPhotosTouchDelegate> _delegate;
}
@property(assign, nonatomic) id<UserSummaryPhotosTouchDelegate> delegate;
@property(retain, nonatomic) NSMutableArray* imageViewArray;
@property(retain, nonatomic) NSMutableArray* imageUrlArray;
-(void).cxx_destruct;
-(void)getImageFinishNotification:(id)notification;
-(void)layoutSubviews;
-(void)setSumUrlArray:(id)array;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface UserSummaryTouchControl : UIView {
	id<UserSummaryTouchControlDelegate> _delegate;
}
@property(assign, nonatomic) id<UserSummaryTouchControlDelegate> delegate;
-(void)onSendMsgButtonTouched:(id)touched;
-(void)onAddFriendBtnTouched:(id)touched;
-(void)onEditInfoBtnTouched:(id)touched;
-(id)createUIButtonsbyTouchType:(int)type;
-(id)initWithFrame:(CGRect)frame touchType:(int)type;
@end

@interface UserSummaryViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, UIAlertViewDelegate, UserSummaryTouchControlDelegate, UserSummaryPhotosTouchDelegate, UserSummaryTableHeaderViewDelegate, IEditViewControllerObserver, MFMessageComposeViewControllerDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, CoverHeightDelegate, UIGestureRecognizerDelegate> {
	int _type;
	int _subtype;
	long long _uin;
	NSString* _searchName;
	unsigned long long _groupUin;
	NSString* _newSig;
	UserSummaryModel* _model;
	NSMutableArray* _tableDataArray;
	NSMutableArray* _menuItemArray;
	UITableView* _tableView;
	UserSummaryTableHeaderView* _simpleInfoView;
	UserSummaryTouchControl* _operationView;
	MultiLineEditViewController* _editor;
	SingleLineEditViewController* _sEditor;
	NSDictionary* _unifyNameDic;
	UIViewController* _popToViewController;
	BOOL _isUIBusy;
	BOOL _isDeleteRequesting;
	int _reqSummarySeqID;
	UIWebView* _phoneCallWebView;
	QQActionSheet* _actionSheet;
	UILongPressGestureRecognizer* _longPressGesture;
	NSIndexPath* _lastIndexPath;
	int _referType;
	UIImagePickerController* _photoPicker;
	int _headUploadSessionID;
	NSTimer* _timer;
	AddFriendSendMessageViewController* _addFriend;
}
@property(retain, nonatomic) NSIndexPath* lastIndexPath;
@property(assign, nonatomic) int referType;
-(void).cxx_destruct;
-(void)coverHeightChange:(int)change;
-(void)onUserSUmmaryIdentityImageClick:(id)click tag:(int)tag;
-(void)onUserSummaryLevelViewClick:(id)click;
-(void)onUserSummaryCoverClick:(id)click;
-(void)onUserSummaryTableHeaderViewZanClick:(id)click;
-(void)onUserSummaryTableHeaderViewHeaderImageClick:(id)click;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)showImagePicker;
-(void)showCamera;
-(void)viewHeadOriginImage;
-(void)ActionReportIllegalUser:(id)user;
-(void)modifyQQHeadNotify:(id)notify;
-(void)ActionOnDeleteFriend:(id)aFriend;
-(void)ActionOnModifyRemark:(id)remark;
-(void)onResponseSummaryNotification:(id)notification;
-(void)callBackUploadSgin:(id)sgin;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(void)copyUin;
-(void)setContactNameToRemark;
-(void)sendPhoneMsg;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)callSomebody;
-(void)reportIllegalUser;
-(void)shieldMsg;
-(void)goRecentPhoto;
-(void)goToQZone;
-(void)addFriend;
-(BOOL)AddSearchFriend:(id)aFriend;
-(void)requestToDeleteFriend;
-(void)goToChat;
-(void)moveGroup;
-(void)updateQzoneTips:(id)tips;
-(void)sendModifySummaryRequest;
-(void)updateUserSummary:(id)summary;
-(void)upDateAlbumPicCount:(id)count;
-(void)editRemark;
-(void)editSig;
-(id)getVersion;
-(void)openDetailInfo;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)openUinMenu;
-(void)showPhoneContactSheet;
-(void)showDeleteSheet;
-(void)showChangeHeadActionSheet;
-(void)showClickHeadActionSheet;
-(void)showMainActionSheet;
-(void)resetUIBusy;
-(id)getMenuName:(int)name;
-(id)getSimpleTextCell:(id)cell type:(int)type itemName:(id)name simpleText:(id)text accessoryType:(BOOL)type5;
-(BOOL)addSumItemIfAvailable:(id)available type:(int)type;
-(id)getSourchType;
-(int)getRowBySumType:(int)type;
-(BOOL)getAccessoryType:(int)type;
-(id)getSimpleText:(int)text;
-(id)getSumItemCellName:(int)name;
-(int)convertTouchControlType:(int)type;
-(int)convertSummaryType:(int)type;
-(void)onSendMsgTouched:(id)touched;
-(void)onAddFriendTouched:(id)touched;
-(void)actionQuickResponse;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)leftButtonClick:(id)click;
-(void)menuControllerWillHide:(id)menuController;
-(void)longPressGestureCallback:(id)callback;
-(void)onGestureEnded:(id)ended;
-(void)onGestureBegan:(id)began;
-(void)removeLongPressGesture;
-(void)addLongPressGesture;
-(void)synInfoToFriendList;
-(void)refreshView;
-(void)loadMenuData;
-(void)loadTableData;
-(void)loadData;
-(void)resetRightButton;
-(void)dealloc;
-(void)ActionReqeustStwebTokenTimeout;
-(void)ActionRequestStwebToken:(id)token;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(id)creatDefaultModel:(int)model;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(id)initWithSearchName:(id)searchName SummaryType:(int)type SummaryModel:(id)model popToViewController:(id)viewController;
-(id)initWithUin:(long long)uin SummaryType:(int)type groupUin:(unsigned long long)uin3;
-(id)initWithUin:(long long)uin SummaryType:(int)type SubType:(int)type3;
-(id)initWithUin:(long long)uin SummaryType:(int)type;
@end

@interface UrlImageService : NSObject <TTURLRequestDelegate, IUrlImageService> {
	NSOperationQueue* _operationQueue;
	NSLock* _downloadUrlListLock;
	NSMutableArray* _downloadUrlList;
}
+(void)destroyInstance;
+(id)getInstance;
-(void)notifyImageFinish:(id)finish;
-(void)asynDownloadImageFinished:(id)finished;
-(void)requestDidCancelLoad:(id)request;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)requestDidFinishLoad:(id)request;
-(void)requestDidStartLoad:(id)request;
-(void)downloadImage:(id)image;
-(void)asynLoadImageWithUrl:(id)url;
-(void)asyncGetImageWithUrl:(id)url;
-(id)getImageWithUrl:(id)url;
-(BOOL)isImageExist:(id)exist;
-(void)dealloc;
-(id)init;
@end

@interface UserSummaryLinkedLabelCell : UserSummaryBaseCell {
	NSMutableArray* _linkedString;
	NSMutableArray* _linkedLabelArray;
@private
	NSMutableArray* _linkedStringArray;
}
@property(retain, nonatomic) NSMutableArray* linkedLabelArray;
@property(retain, nonatomic) NSMutableArray* linkedStringArray;
-(void).cxx_destruct;
-(void)changeToNormalBg;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)layoutSubviews;
-(void)setSumLinkedStringArray:(id)array;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQGroupSettingViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, UIActionSheetDelegate, IQQGroupProfileViewController, QQFriendSelectedViewControllerDelegate, UIAlertViewDelegate, DBAsyncCallbackProtocol, GetTroopRemarkProtocol, IQQGroupPersonalCardViewController, IEditViewControllerObserver, ISelectFriendDataSource, ISelectFriendActionObserver> {
	UITableView* _tableView;
	QQGroupSettingModel* _groupModel;
	QQTroopRemarkModel* _groupRemarkModel;
	NSMutableArray* _dataSource;
	int _msgRemindType;
	NSString* _modifiedGroupName;
	QQGroupPersonalCardViewController* _groupCardController;
	BOOL _groupProfileModified;
}
-(void)dealloc;
-(void)showFailedTipDelayed;
-(BOOL)showFailedTipIfDisconnected;
-(void)setVoiceChannel:(BOOL)channel;
-(void)setVoicePlayerState;
-(void)deleteUserDefault;
-(void)ActionExitGroupResult:(id)result;
-(void)ActionDismissGroupRespond:(id)respond;
-(void)onReachMaxSelection;
-(BOOL)onRightButtonClicked:(id)clicked;
-(BOOL)onLeftButtonClicked;
-(id)getInitSelectedDataList;
-(id)getInitDataList;
-(int)getMaxSelection;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(void)modifyGroupCardCallback:(id)callback;
-(void)didModifyGroupCard:(unsigned)card uin:(long long)uin groupNick:(id)nick gender:(BOOL)gender phone:(id)phone mail:(id)mail remark:(id)remark;
-(void)GetMemberRemarkNotify:(id)notify list:(id)list;
-(void)requestTroopRemark;
-(void)deleteGroupSettingModel;
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
-(void)modifyGroupInfoCallback:(id)callback;
-(void)didModifyGroupProfile:(unsigned)profile groupName:(id)name groupPost:(id)post groupMemo:(id)memo groudAdmissionType:(int)type groupCategory:(int)category groupFaceId:(int)anId;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onQuitGroupBtnClick:(id)click;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)setGroupMsgRemindType:(int)type;
-(id)groupMsgRemindTitleForPC:(int)pc;
-(id)groupMsgRemindTitle:(int)title;
-(void)initGroupMsgRemindType;
-(void)saveGroupSettingDictionary:(id)dictionary;
-(void)saveGroupSettingModel;
-(void)updateGroupName;
-(void)reloadData;
-(void)getGroupInfoCallback:(id)callback;
-(void)getGroupInfo2Callback:(id)callback;
-(void)requestGroupInfo;
-(void)loadGroupSettingModel;
-(id)groupSettingDictionary;
-(id)indexPathForSettingType:(int)settingType;
-(id)settingItemForIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForGroupSettingVoicePlay:(id)groupSettingVoicePlay;
-(id)tableView:(id)view cellForGroupSettingNotice:(id)groupSettingNotice;
-(id)tableView:(id)view cellForGroupSettingImages:(id)groupSettingImages;
-(id)tableView:(id)view cellForGroupSetting:(id)groupSetting;
-(id)initDefaultStyleForCellWithIdentifier:(id)identifier;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)initSettingDataSource;
-(id)initWithTroopModel:(id)troopModel;
@end

@interface QQGroupSettingItem : QQGroupSettingModel {
@private
	NSString* _title;
	int _type;
}
@property(assign, nonatomic) int type;
@property(copy, nonatomic) NSString* title;
-(void)dealloc;
@end

@interface RichMediaNotificationCenter : NSObject {
}
+(void)postGroupFailNotification:(int)notification msgTime:(int)time msgType:(int)type uuid:(id)uuid transferType:(int)type5 groupUin:(long long)uin fromUin:(long long)uin7;
+(void)postGroupSuccessNotification:(int)notification msgTime:(int)time msgType:(int)type uuid:(id)uuid transferType:(int)type5 groupUin:(long long)uin fromUin:(long long)uin7;
+(void)postDiscussFailNotification:(int)notification msgTime:(int)time msgType:(int)type uuid:(id)uuid transferType:(int)type5 discussUin:(long long)uin fromUin:(long long)uin7;
+(void)postDiscussSuccessNotification:(int)notification msgTime:(int)time msgType:(int)type uuid:(id)uuid transferType:(int)type5 discussUin:(long long)uin fromUin:(long long)uin7;
+(void)postC2CFailNotification:(int)notification msgTime:(int)time msgType:(int)type uuid:(id)uuid transferType:(int)type5 fromUin:(long long)uin toUin:(long long)uin7;
+(void)postC2CSuccessNotification:(int)notification msgTime:(int)time msgType:(int)type uuid:(id)uuid transferType:(int)type5 fromUin:(long long)uin toUin:(long long)uin7;
@end

@interface QQSidRuleManager : NSObject {
	NSMutableArray* _downloadedEntries;
	NSMutableArray* _localEntries;
}
+(id)instance;
-(id)whiteListEntryForHost:(id)host;
-(void)addDownloadedEntry:(id)entry;
-(void)clearDownloadedEntries;
-(void)saveDownloadedEntries;
-(id)loadDownloadedEntries;
-(void)buildLocalEntries;
-(void)dealloc;
-(id)init;
@end

@interface QQEmotionLabel : UIView {
	NSString* _content;
	id<QQEmotionLabelDelegate> _delegate;
	UIFont* _font;
	UIColor* _textColor;
	UIColor* _shadowColor;
	CGSize _shadowOffset;
	float _blur;
	BOOL _shadowBlur;
	BOOL _openCoreText;
	unsigned _numberOfLines;
	BOOL _isHandleTouch;
	BOOL _isLongPress;
	BOOL _touchOutSide;
	BOOL _touchNextRespond;
	UIView* _emotionView;
	EmotionParseResult* _parseResult;
	int _touchedIndex;
	ParseRange* _touchedRange;
	ParseRect* _touchedRect;
	UILongPressGestureRecognizer* _longGesture;
	struct {
		NSRange _minRange;
		NSRange _maxRange;
		CGPoint _minPoint;
		CGPoint _maxPoint;
		float _maxOffset;
		CGRect _selectdRect;
		BOOL _disPlayHeadEnd;
	} SelectedFlags;
}
@property(assign, nonatomic) id<QQEmotionLabelDelegate> delegate;
@property(assign, nonatomic) unsigned numberOfLines;
@property(assign, nonatomic) BOOL openCoreText;
@property(assign, nonatomic) BOOL touchNextRespond;
@property(assign, nonatomic) BOOL touchOutSide;
@property(assign, nonatomic) BOOL shadowBlur;
@property(assign, nonatomic) float blur;
@property(assign, nonatomic) CGSize shadowOffset;
@property(retain, nonatomic) UIColor* shadowColor;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIFont* font;
-(void)handleLongPressGesture:(id)gesture;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(int)findParseRangeAtPoint:(CGPoint)point;
-(void)setHighlighted:(BOOL)highlighted;
-(id)getParseResult;
-(void)setParseResult:(id)result;
-(void)layoutContent:(int)content;
-(id)content;
-(void)setContent:(id)content;
-(void)drawRect:(CGRect)rect;
-(void)addGestureRecognizer:(id)recognizer;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)moveInLocation:(CGPoint)location;
-(void)selectedRangeFor:(CGRect)aFor;
-(void)GetMinPoint:(CGPoint*)point MaxPoint:(CGPoint*)point2;
-(void)GetMinRange:(NSRange*)range MaxRange:(NSRange*)range2;
-(void)selectedAll;
-(BOOL)isSelected:(CGPoint)selected;
-(BOOL)selectedRange:(NSRange)range selected:(BOOL)selected;
-(BOOL)touchInside:(CGPoint)inside;
-(NSRange)GetRangeForPoint:(CGPoint)point;
-(id)toRanges;
@end

@interface QQTextDrawView : UIView {
	QQDivideMessageModel* _model;
	NSBoolean* _state;
	NSMutableDictionary* _imageViews;
	CGRect _selectedRect;
	CGPoint _touchPoint;
	id<QQTextDrawViewDelegate> _delegate;
}
@property(assign, nonatomic) id<QQTextDrawViewDelegate> delegate;
@property(retain, nonatomic) QQDivideMessageModel* model;
-(CGRect)GetSelectedRect:(CGPoint)rect;
-(CGPoint)GetMaxPoint;
-(CGPoint)GetMinPoint;
-(CGPoint)GetOffsetPoint:(CGPoint)point;
-(CGRect)GetTranslationRect:(CGRect)rect;
-(void)selectedRect:(CGRect)rect movePoint:(CGPoint)point;
-(void)selectedAll;
-(void)touchWithDictionary:(id)dictionary;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)drawSysEmojiRect:(CGRect)rect inContext:(CGContextRef)context;
-(CGRect)GetDrawFileRect:(CGRect)rect;
-(void)drawFillLine:(CGRect)line inContext:(CGContextRef)context;
-(void)drawFillRect:(CGRect)rect inContext:(CGContextRef)context;
-(void)drawShadowInContext:(CGContextRef)context;
-(void)drawTextViewIn:(CGContextRef)anIn withRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UserSummaryPLDivideLineCell : UITableViewCell {
	UILabel* _describLabel;
	UIImageView* _lineImageView;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setData:(id)data;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface UserSummaryPLHeaderCell : UITableViewCell {
	int _mode;
	UIButton* _headImageButton;
	UIImageView* _gotoImageView;
	UIImageView* _bgImageView;
	UILabel* _txtLabel;
	UIActivityIndicatorView* _loadingView;
	id<PLHeaderDelegate> _delegate;
}
@property(assign, nonatomic) id<PLHeaderDelegate> delegate;
-(void).cxx_destruct;
-(void)endModifyFaceNotify;
-(void)beginModifyFaceNotify;
-(void)dealloc;
-(void)onClickHead:(id)head;
-(void)changeToNormalBg;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)layoutSubviews;
-(void)setData:(int)data head:(id)head;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface UserSummaryPLMutablePicCell : UITableViewCell {
	NSMutableArray* _imagefileKeyList;
	NSMutableArray* _imageViewList;
	UILabel* _txtLabel;
	unsigned long long _uin;
	NSIndexPath* _indexPath;
	id<PLMutablePicDelegate> _delegate;
@private
	NSMutableArray* _imageButtonList;
}
@property(assign, nonatomic) id<PLMutablePicDelegate> delegate;
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(retain, nonatomic) NSMutableArray* imagefileKeyList;
@property(retain, nonatomic) NSMutableArray* imageButtonList;
-(void).cxx_destruct;
-(void)onClickImage:(id)image;
-(void)layoutSubviews;
-(void)refreshImageViewWithFileKey:(id)fileKey;
-(void)setData:(unsigned long long)data fileKeyList:(id)list indexPath:(id)path;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface UserSummaryPLViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, PLHeaderDelegate, PLButtonDelegate, PLMutablePicDelegate, UIActionSheetDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, QQValidCodeControllerDelegate, CSImagePickerControllerDelegate> {
	unsigned long long _uin;
	unsigned long long _loginedUin;
	UIImage* _headImage;
	int _headUploadSessionID;
	int _verifySessionID;
	int _totalPicCount;
	int _initTotalPicCount;
	NSMutableArray* _imageVisiableFileKeys;
	NSMutableArray* _imageAllFileKeys;
	UITableView* _tableView;
	QQActionSheet* _actionSheet;
	UIImagePickerController* _photoPicker;
	CSImagePickerController* _multiPhotoPicker;
	QQVaildCodeController* _validCtr;
	BOOL _haveMore;
	BOOL _totalDissmiss;
	CardInfoEngine* _engine;
	UIImageView* _tipView;
	UILabel* _tips;
	BOOL _isUIBusy;
}
@property(retain, nonatomic) QQVaildCodeController* validCtr;
@property(retain, nonatomic) CSImagePickerController* multiPhotoPicker;
@property(retain, nonatomic) UIImagePickerController* photoPicker;
@property(retain, nonatomic) QQActionSheet* actionSheet;
@property(retain, nonatomic) NSMutableArray* imageAllFileKeys;
@property(retain, nonatomic) NSMutableArray* imageVisiableFileKeys;
-(void).cxx_destruct;
-(void)updataMessageNotify:(id)notify;
-(void)closeFailTipViewAnim;
-(void)closeFailTipView;
-(void)showFailTipViewAnim;
-(void)getImageFinish:(id)finish;
-(void)cardInfoError:(id)error;
-(void)uploadPhotoFinishNotify:(id)notify;
-(void)verifyCodeNotify:(id)notify;
-(void)modifyQQHeadNotify:(id)notify;
-(void)upDateFileKeyArray:(id)array;
-(void)upDateInitialFileKeyArray:(id)array;
-(void)handleUIApplicationWillChangeStatusBarFrameNotification:(id)handleUIApplication;
-(void)leftButtonClick:(id)click;
-(void)onClickButton:(id)button;
-(void)onClickImage:(id)image;
-(void)onClickHead:(id)head;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)cancelVery;
-(BOOL)refreshVerifyCodeWithSessionID:(int)sessionID;
-(BOOL)commitVerifyCode:(id)code sessionID:(int)anId;
-(void)didCSImagePickerController:(id)controller selectedImages:(id)images;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showVerifyCode:(id)code;
-(void)showImagePicker;
-(void)showCamera;
-(void)showUploadPicSheet:(BOOL)sheet;
-(void)scrollToEnd;
-(void)setAddMoreButtonDada:(id)dada;
-(void)resetUIBusy;
-(int)getPartTypeByRow:(int)row;
-(id)getAddMoreBtnCell;
-(id)getImageFileKeyListByRow:(int)row;
-(int)getImageLineCount;
-(void)loadData;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)loadView;
-(id)initWithUin:(unsigned long long)uin photoCount:(int)count;
@end

@interface QQLogSelectionViewController : QQViewController <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _tableView;
	UIDatePicker* _datePicker;
	tm _dt[2];
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)showLog:(id)log;
-(void)dateChanged:(id)changed;
-(void)didReceiveMemoryWarning;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQLogViewCell : UITableViewCell {
	GALayoutInfo* _info;
	NSString* _logText;
	NSString* _searchText;
}
@property(retain, nonatomic) NSString* searchText;
@property(retain, nonatomic) NSString* logText;
+(float)heightForCellWithText:(id)text;
-(void)drawRect:(CGRect)rect;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQLogItem : NSObject {
	NSString* _text;
	float _textHeight;
}
@property(assign, nonatomic) float textHeight;
@property(retain, nonatomic) NSString* text;
@end

@interface QQLogViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, UITextFieldDelegate, UIActionSheetDelegate, MFMailComposeViewControllerDelegate> {
	tm _startTime;
	tm _endTime;
	UITableView* _tableView;
	UITextField* _textField;
	NSMutableArray* _allLogArray;
	NSMutableArray* _showLogArray;
	NSMutableArray* _grepLogArray;
	NSArray* _curShowArray;
	int _curShowIndex;
	NSString* _searchText;
	NSString* _tmpFilePath;
}
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)searchForString:(id)string;
-(void)searchWithType:(int)type searchText:(id)text;
-(BOOL)isContainSearchText:(id)text log:(id)log;
-(void)loadMore;
-(BOOL)hasMore;
-(void)onBtnShowHelpView;
-(void)onBtnSendMail;
-(void)onBtnMoreClicked:(id)clicked;
-(void)loadOnePageLog;
-(void)readLogFile:(tm)file endTime:(tm)time;
-(id)getTmpLogFileName;
-(void)didReceiveMemoryWarning;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithStartTime:(tm)startTime endTime:(tm)time;
@end

@interface CameraFlashView : UIView {
@private
	UIButton* _autoButton;
	UIButton* _closedButton;
	UIButton* _openedButton;
	UIButton* _rightButton;
	id<CameraFlashActionDelegate> _delegate;
	UIButton* _topButton;
}
@property(assign, nonatomic) id<CameraFlashActionDelegate> delegate;
@property(retain, nonatomic) UIButton* topButton;
@property(retain, nonatomic) UIButton* rightButton;
@property(retain, nonatomic) UIButton* openedButton;
@property(retain, nonatomic) UIButton* closedButton;
@property(retain, nonatomic) UIButton* autoButton;
-(void)setFlashStatus:(int)status;
-(void)onButtunClicked:(id)clicked;
-(void)fold;
-(void)unfold;
-(void)initUI;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CameraToolBarContainer : UIView {
@private
	UIView* _contentView;
}
@property(retain, nonatomic) UIView* contentView;
-(void)dealloc;
-(id)getContentView;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQBaseCameraContainerController : UIViewController {
}
-(void)dealloc;
-(void)EnterBackground;
-(void)ReturnForeground;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

@interface QQBaseCameraPickerController : UINavigationController <UIAccelerometerDelegate> {
	QQBaseCameraContainerController* _cameraCtrl;
	AVCaptureStillImageOutput* _captureOutput;
	AVCaptureVideoPreviewLayer* _preview;
	AVCaptureSession* _session;
	AVCaptureDevice* _device;
	BOOL _statusBarHidden;
	BOOL _pictureTaking;
	int _deviceOrientation;
@private
	int _sourceType;
	BOOL _allowsEditing;
	NSArray* _mediaTypes;
	BOOL _showsCameraControls;
	int _cameraDevice;
	int _cameraFlashMode;
	UIView* _cameraOverlayView;
	UIView* _backgroundView;
	UIView* _flashView;
}
@property(readonly, assign, nonatomic) AVCaptureVideoPreviewLayer* preview;
@property(assign, nonatomic) id<UINavigationControllerDelegate, QQCameraPickerDelegate> delegate;
@property(readonly, assign, nonatomic) UIView* cameraOverlayView;
@property(assign, nonatomic) BOOL showsCameraControls;
@property(assign, nonatomic) BOOL allowsEditing;
@property(assign, nonatomic) int sourceType;
@property(assign, nonatomic) int cameraDevice;
@property(assign, nonatomic) int cameraFlashMode;
@property(retain, nonatomic) UIView* flashView;
@property(retain, nonatomic) UIView* backgroundView;
@property(copy, nonatomic) NSArray* mediaTypes;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)takePicture;
-(void)stopVideoCapture;
-(BOOL)startVideoCapture;
-(BOOL)isSupportflash:(int)supportflash;
-(void)layerTransitionAimation:(id)aimation animaiton:(id)animaiton duration:(double)duration;
-(void)layerFlipAimation:(id)aimation duration:(double)duration transform:(CATransform3D)transform;
-(void)flipView:(int)view;
-(void)flipViewDid;
-(void)changeDevice;
-(void)cancel;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
-(id)init;
-(void)dealloc;
@end

@interface SecretFileImagePickerController : QQBaseCameraPickerController {
@private
	UIImageView* _bgImageView;
	UIImageView* _coverView;
	UIImageView* _backgroundView;
	BOOL _shouldShutterAnimation;
	UIImageView* _topCoverView;
	UIImageView* _bottomCoverView;
	SecretFileImagePreviewViewController* _previewCtrl;
	UIView* _toolBar;
}
@property(retain, nonatomic) SecretFileImagePreviewViewController* previewCtrl;
@property(retain, nonatomic) UIView* toolBar;
-(void)dealloc;
-(void)dismissPreviewViewController;
-(void)showPreviewViewController:(id)controller;
-(void)prepareTakePicture;
-(void)onCaptureSessionDidStartRunning;
-(void)onAppEnterForeground;
-(void)onAppEnterBackground;
-(void)shutterAnimation;
-(void)prepareAnimation;
-(BOOL)startVideoCapture;
-(void)cancel;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
@end

@interface QQSecretFileCell : QQUITableViewCell {
	QQChatCellModel* _data;
	QQSecretFileViewInternal* _secretView;
	int _cellSection;
@private
	BOOL _bLayout;
}
@property(assign, nonatomic) int cellSection;
@property(readonly, assign, nonatomic) QQSecretFileViewInternal* secretView;
@property(retain, nonatomic) QQChatCellModel* data;
-(void)setProgressSate;
-(void)showMask;
-(void)prepareImageMaskData;
-(void)layoutSubviews;
-(void)willAppearLoadData;
-(id)getImage;
-(void)showSecretController;
-(void)updateShowText:(id)text;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)getHeadView;
-(void)reset;
-(void)createUI;
-(BOOL)isHeadTouch:(CGPoint)touch;
-(BOOL)isContentTouch:(CGPoint)touch;
@end

@interface QQSecretFileViewInternal : UIView <QQImageMaskViewDelegate> {
	QQSecretFileCell* _secretcell;
	QQImageMaskView* _imageMask;
@private
	NSString* _timeCount;
	UILabel* _label;
	UIImageView* _bubbleView;
	CGRect _faceRect;
	UIImageView* _tipsView;
	QQAsynHeadImageView* _headView;
	UIImageView* _contentView;
	UIImageView* _contentBgView;
	BubbleBgInfo* _bubbleInfo;
	UIEdgeInsets _bubbleInsets;
}
@property(retain, nonatomic) BubbleBgInfo* bubbleInfo;
@property(retain, nonatomic) QQImageMaskView* imageMask;
@property(retain, nonatomic) NSString* timeCount;
-(void)willAppearLoadData;
-(void)drawRect:(CGRect)rect;
-(void)fromPreDraw;
-(void)toPreDraw;
-(void)preDrawLimitView;
-(void)updateShowText:(id)text;
-(void)dealloc;
-(id)getHeadView;
-(void)maskViewDidRevealed:(id)maskView;
-(id)initWithCell:(id)cell;
-(id)getImage;
-(void)downloadImage;
-(void)setHighlighted:(BOOL)highlighted;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)doTouchEvent:(id)event withEvent:(id)event2;
-(BOOL)isHeadTouch:(CGPoint)touch;
-(BOOL)isTipsViewTouch:(CGPoint)touch;
-(BOOL)isContentTouch:(CGPoint)touch;
@end

@interface SecretFilePhotoBrowsViewController : PhotoBrowserBaseViewContoller {
@private
	UIButton* _limitTime;
	UIButton* _limitMsgChoice;
}
-(void)MsgModelChoice;
-(void)selectLimitTimeValue;
-(unsigned long long)getLimitTime;
-(void)setLimitTime:(id)time;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface SecretFilePreviewViewController : UIViewController <STScratchViewDelegate> {
	id<SecretFilePreviewDelegate> _previewDelegate;
	NSTimer* _timer;
@private
	QQTimerCountView* _countView;
	UIButton* _backBtn;
	unsigned long long _limitValue;
	UIImageView* _imageView;
	id _dataSource;
	int _curCaptureCount;
	BOOL _isCaptured;
	STScratchView* _maskView;
	UIImage* _image;
}
@property(assign, nonatomic) id<SecretFilePreviewDelegate> previewDelegate;
-(void)notifyTouchMoved;
-(void)onVideoRequest;
-(void)backBtnClicked:(id)clicked;
-(void)eraseImage;
-(void)doAlphaAnimation;
-(void)onPeriod;
-(void)timerFire;
-(void)layoutUI;
-(void)layoutTextView;
-(void)layoutVideoView;
-(void)layoutImageView;
-(CGRect)getScaledImageRect:(id)rect;
-(void)setTimeValue:(int)value;
-(void)setDataSource:(id)source;
-(int)getCaptureCount;
-(BOOL)isShowing;
-(id)getDataSource;
-(BOOL)isTimerCounting;
-(void)reset;
-(void)stopTimer;
-(void)hide;
-(void)tempHide;
-(void)show;
-(void)ActionOnSecretFileNotHasBeenCaptured;
-(void)ActionOnSecretFileHasBeenCaptured;
-(void)dealloc;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didReceiveMemoryWarning;
-(void)loadView;
-(id)initPreviewControllerWithImage:(id)image;
-(void)createTimer;
@end

@interface UserSummaryPLButtonCell : UITableViewCell {
	UIButton* _button;
	id<PLButtonDelegate> _delegate;
}
@property(assign, nonatomic) id<PLButtonDelegate> delegate;
-(void).cxx_destruct;
-(void)onClick:(id)click;
-(void)layoutSubviews;
-(void)setData:(id)data cmd:(int)cmd;
-(int)getCmd;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQGroupHeaderView : UIView <UIActionSheetDelegate> {
	UILabel* _nickLabel;
	UILabel* _numberLabel;
}
-(void)dealloc;
-(BOOL)canBecomeFirstResponder;
-(BOOL)allowMsgReceived:(unsigned)received;
-(void)updateNickLabel:(id)label;
-(void)copyGroupNameAndCode;
-(void)menuControllerWillHideMenu:(id)menuController;
-(void)onGroupHeaderLongTap:(id)tap;
-(id)initWithGroupSettingModel:(id)groupSettingModel;
@end

@interface UICopyLabel : UILabel {
}
-(BOOL)canBecomeFirstResponder;
@end

@interface QQGroupCategoryListViewController : QQViewController {
	UITableView* _tableView;
	NSArray* _categoryKeyArray;
@private
	NSDictionary* _categoryDictionary;
	int _currentCategory;
	NSObject<QQGroupCategoryListViewControllerDelegate>* _delegate;
}
@property(assign, nonatomic) NSObject<QQGroupCategoryListViewControllerDelegate>* delegate;
@property(retain, nonatomic) NSDictionary* categoryDictionary;
@property(assign, nonatomic) int currentCategory;
-(void)didSelectGroupCategory:(int)category;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)_accessoryViewOfType:(int)type;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)dealloc;
-(void)_clean;
@end

@interface UserSummaryPhoto : UIView {
	UIImageView* _photoView;
	NSString* _url;
}
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) UIImageView* photoView;
-(void).cxx_destruct;
-(void)setPhoto:(id)photo animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UserSummaryZanButton : UIButton {
	UIImageView* _goodIconView;
	UIImageView* _noteDotView;
	UILabel* _zanNumLabel;
	int _goodNum;
	BOOL _zanType;
	BOOL _ifNoted;
}
@property(assign, nonatomic) BOOL ifNoted;
@property(assign, nonatomic) BOOL zanType;
@property(assign, nonatomic) int goodNum;
@property(retain, nonatomic) UILabel* zanNumLabel;
@property(retain, nonatomic) UIImageView* noteDotView;
@property(retain, nonatomic) UIImageView* goodIconView;
+(int)widthForZanButton:(int)zanButton;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)updateZanType:(int)type zanType:(BOOL)type2 andIfNoted:(BOOL)noted;
-(id)initWithFrame:(CGRect)frame num:(int)num zanType:(BOOL)type andIfNoted:(BOOL)noted;
@end

@interface MsgSenderThroughHttp : NSObject <MessageSender, QSHttpRequestDelegate, QSHttpProgressDelegate> {
	id<MessageSenderDelagate> mDelegate;
}
-(void)request:(id)request didSendBytes:(int)bytes;
-(void)request:(id)request didReceiveBytes:(int)bytes;
-(void)request:(id)request didReceiveData:(id)data;
-(void)requestRedirected:(id)redirected;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request willRedirectToURL:(id)url;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)requestStarted:(id)started;
-(int)sendMessage:(id)message;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface MsgSenderThroughTcp : NSObject <MessageSender> {
	id<MessageSenderDelagate> mDelegate;
}
-(void)onPacketSendAndRecvResult:(id)result;
-(int)sendMessage:(id)message;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface RTSDataSource : NSObject {
	NSMutableArray* mSendQueue;
	NSMutableArray* mSyncCache;
	NSMutableDictionary* mMultiMessageDic;
	BOOL bIsDelaySavePerforming;
}
-(BOOL)isCacheChanged;
-(void)syncCacheAndFile;
-(void)constructMultiMessages;
-(void)cacheMultiMessage:(id)message;
-(void)loadSendingMsgFromFile:(id)file;
-(void)saveSendingMsgToFileWithDelay:(id)delay;
-(void)saveSendingMsgToFile:(id)file;
-(BOOL)checkMsgIsDuplicate:(id)duplicate;
-(id)getSendingQueue;
-(void)removeMultiMessagesFromSendQueue:(id)sendQueue;
-(id)getAllPiecesOfOneLongMsg:(id)oneLongMsg;
-(id)getSendingMsgBySeq:(int)seq;
-(void)clear;
-(BOOL)removeSendingMsg:(id)msg;
-(BOOL)cacheSendindMsg:(id)msg;
-(void)dealloc;
-(id)init;
@end

@interface UserSummaryTableHeaderView : UIControl {
	long long _uin;
	short _age;
	NSString* _headerName;
	short _gender;
	NSString* _country;
	NSString* _province;
	NSString* _city;
	NSString* _constellation;
	short _qqlevel;
	NSString* _contactName;
	NSString* _qqOnlineStr;
	int _photoCount;
	int _voteCount;
	int _latestVoteCount;
	int _valid4Vote;
	int _showControl;
	id<UserSummaryTableHeaderViewDelegate> _delegate;
	QQAsynHeadImageView* _headView;
	UIImageView* _headEditImageView;
	UIImageView* _headBgImageView;
	UIActivityIndicatorView* _uploadIndicator;
	UILabel* _headerNameLabel;
	UILabel* _genderLabel;
	UIButton* _qqLevelView;
	UIImageView* _vipView;
	UIImageView* _superqqView;
	UserSummaryZanButton* _zanButton;
	int _height;
	NSMutableArray* _levelTagArray;
	UserSummaryCoverViewController* _coverContr;
	int _defaultheigth;
	UIImageView* _nameBGView;
	int _type;
	UIControl* _coverTouch;
	BOOL _bEnterPicWall;
}
@property(assign, nonatomic) id<UserSummaryTableHeaderViewDelegate> delegate;
-(void).cxx_destruct;
-(void)loadInitCoverData;
-(void)setDefaultHeight:(int)height;
-(void)setFrame:(CGRect)frame;
-(void)onZanButtonClick:(id)click;
-(void)onTouchCover:(id)cover;
-(void)onHeadViewClick:(id)click;
-(void)onLevelViewClick:(id)click;
-(void)updataQQLevelView:(int)view LevelView:(id)view2 isMySelf:(BOOL)aSelf;
-(void)stopUploadingIndicator;
-(void)startUploadingIndicator;
-(void)refreshPhotoCountView:(int)view;
-(void)refreshHeadView;
-(void)cancelAllRequest;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(CGRect)getHeadViewFrame;
-(int)getAllHeight;
-(void)layoutView;
-(void)updateAllData:(long long)data headerName:(id)name ContactName:(id)name3 Age:(short)age Gender:(short)gender Country:(id)country Province:(id)province City:(id)city Constelation:(id)constelation QQLevel:(short)level QQOnlineStr:(id)str PhotoCount:(int)count voteCount:(int)count13 latestVoteCount:(int)count14 valid4Vote:(int)vote showControl:(int)control vipInfoDic:(id)dic isMySelf:(BOOL)aSelf isNewModelData:(BOOL)data19 modelType:(int)type touchType:(int)type21;
-(void)updateSuperQQLevelView:(int)view;
-(void)updateSvipLevel:(unsigned)level isSvip:(BOOL)svip;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)clickIdentity:(id)identity;
-(id)initWithAllData:(long long)allData headerName:(id)name ContactName:(id)name3 Age:(short)age Gender:(short)gender Country:(id)country Province:(id)province City:(id)city Constelation:(id)constelation QQLevel:(short)level QQOnlineStr:(id)str PhotoCount:(int)count voteCount:(int)count13 latestVoteCount:(int)count14 valid4Vote:(int)vote showControl:(int)control IsMySelf:(BOOL)aSelf Frame:(CGRect)frame vipInfoDic:(id)dic coverDelegate:(id)delegate modelType:(int)type touchType:(int)type22;
@end

@interface QQGroupBulletinManager : NSObject {
@private
	long long _selfUin;
	NSMutableDictionary* _groupInfoData;
}
@property(retain, nonatomic) NSMutableDictionary* groupInfoData;
@property(assign, nonatomic) long long selfUin;
+(id)defaultManger;
-(void).cxx_destruct;
-(id)validateFirstBulletinMsg:(id)msg currentList:(id)list;
-(long long)checkMessageValidTime:(id)time;
-(long long)getValidMessageTime:(id)time reverse:(BOOL)reverse;
-(id)handleFirstBulletinMsgWithGroupCode:(long long)groupCode forTime:(long long)time;
-(id)handleUnreadBulletinMsgWithGroupCode:(long long)groupCode forTime:(long long)time;
-(id)insertBulletinMsgWithGroupCode:(long long)groupCode msgList:(id)list currentList:(id)list3 hasMoreMsg:(BOOL)msg;
-(id)insertBulletinMsgWithGroupCode:(long long)groupCode msgList:(id)list startTime:(long long)time endTime:(long long)time4;
-(id)handleGroupBulletinMsg:(char*)msg length:(unsigned long long)length;
-(void)syncGroupBulletinMsg:(id)msg;
-(BOOL)deleteAllGroupBulletinMsgWithGroupCode:(long long)groupCode;
-(BOOL)updateGroupBulletinMsgList:(id)list;
-(BOOL)saveGroupBulletinMsg:(id)msg;
-(void)removeNewGroupInfoWithGroupCode:(long long)groupCode;
-(BOOL)checkIsNewGroupWithGroupCode:(long long)groupCode;
-(void)saveNewGroupInfoWithGroupCode:(long long)groupCode;
-(void)initGroupInfoData;
-(void)handleSystemNotificationForGroup:(id)group;
-(void)dealloc;
-(id)init;
@end

@interface QQBulletinMsgView : UIView {
@private
	CGSize _contentSize;
	NSString* _msgContent;
	UILabel* _contentLabel;
	UIImageView* _bgView;
}
@property(assign, nonatomic) UILabel* contentLabel;
@property(assign, nonatomic) UIImageView* bgView;
@property(copy, nonatomic) NSString* msgContent;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithMsgContent:(id)msgContent;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQUIControl : UIControl {
	id<QQUIDelegate> _clickDelegate;
	CGPoint _startPoint;
}
@property(assign, nonatomic) id<QQUIDelegate> clickDelegate;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface QQInfoLabel : UILabel {
	UIEdgeInsets _insets;
}
-(void)drawTextInRect:(CGRect)rect;
-(void)setUIEdgeInsets:(UIEdgeInsets)insets;
@end

@interface QQTextView : UITextView {
	BOOL _enableCopy;
}
+(float)getTextViewHeight:(id)height maxWidth:(int)width font:(id)font;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)setNeedCopied:(BOOL)copied;
@end

@interface UserInfoBaseView : UIView {
	int _index;
	UIImageView* _background;
}
@property(assign) int index;
-(void)setBackgroundImage:(id)image;
-(void)setHightlightBackgroundImage:(id)image;
-(void)setHightlightBackground:(BOOL)background;
-(void)dealloc;
@end

@interface UserInfoHead : UserInfoBaseView {
	QQAsynHeadImageView* _iconView;
	UIControl* _icontouchControl;
	QQInfoLabel* _nameLablel;
	QQTextView* _describe;
	UIImageView* _arrow;
	NSString* _content;
	BOOL _bgroupStyle;
	UILabel* _groupNickLabel;
	UIControl* _nicktouchControl;
	UILabel* _groupDescribeLabel;
	id _groupClickDelegate;
@private
	BOOL _bgoupStyle;
}
@property(assign, nonatomic) id groupClickDelegate;
@property(assign, nonatomic) BOOL bgoupStyle;
@property(retain, nonatomic) NSString* content;
-(void)setGroupMsg:(id)msg describe:(id)describe;
-(void)clickNickLabel;
-(void)clickIconView;
-(void)setHightlightBackground:(BOOL)background;
-(void)adjustTextColor:(BOOL)color;
-(void)initUI;
-(void)setMsgWithPhoneCode:(id)phoneCode name:(id)name content:(id)content;
-(void)setMsg:(id)msg name:(id)name content:(id)content;
-(void)setMsgWithGroupCode:(id)groupCode name:(id)name content:(id)content;
-(void)setMsgWithUin:(id)uin name:(id)name content:(id)content;
-(void)setNameAndContent:(id)content content:(id)content2;
-(void)showArrow;
-(void)setDescribeViewNeedCopied:(BOOL)copied;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface UserInfoItem : UserInfoBaseView {
	QQInfoLabel* _title;
	QQTextView* _content;
}
-(float)setItemContent:(id)content cotent:(id)cotent;
-(void)initUI;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)setDescribeViewNeedCopied:(BOOL)copied;
@end

@interface QQRelationNoticeCell : UITableViewCell {
	QQSystemMessageModel* _model;
	UIImage* _bgHeadImage;
	UIImage* _bgBottomImage;
	UIImage* _bgBottomImage_press;
	NSString* _typeStr;
	int _time;
	NSString* _nickStr;
	NSString* _line1Str;
	NSString* _nickActionStr;
	NSString* _line2Str;
	NSBoolean* _bline2Source;
	NSString* _resultStr;
	UIImageView* _bgHeadView;
	UIImageView* _bgBottomView;
	UILabel* _typeLabel;
	UILabel* _timeLabel;
	UIImageView* _headImageView;
	UILabel* _nickLabel;
	UIButton* _actionBtn;
	UILabel* _resultLabel;
	UILabel* _line1Label;
	UILabel* _line2Labe;
	QQAsynHeadImageView* _iconView;
	CGRect _bgHeadRect;
	CGRect _bgBottomRect;
	CGRect _typeRect;
	CGRect _timeRect;
	CGRect _headImageRect;
	CGRect _nickRect;
	CGRect _actionRect;
	CGRect _resultRect;
	CGRect _line1Rect;
	CGRect _line2Rect;
	id<QQRelationNoticeCellDelegate> _controllerDelegate;
@private
	UIImage* _headImage;
}
@property(assign, nonatomic) id<QQRelationNoticeCellDelegate> controllerDelegate;
@property(retain, nonatomic) UIImage* headImage;
@property(retain, nonatomic) QQSystemMessageModel* model;
+(int)GetCellHeightByModel:(id)model;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setIconTypeAndUin:(int)uin uin:(id)uin2;
-(void)actionButton;
-(void)viewCellWillAppear;
-(void)setBtnText:(id)text;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQAddFriendSourceLogic : NSObject {
	NSMutableArray* _sourceDictionary;
}
+(id)GetInstance;
-(id)getSourceByIDAndSubID:(int)anId subID:(int)anId2;
-(id)getKeyByIDAndSubID:(int)anId subID:(int)anId2;
-(id)init;
@end

@interface QQBulletinMsgCell : QQUITableViewCell {
@private
	QQBulletinMsgView* _msgView;
	QQChatViewTable* _table;
}
@property(assign, nonatomic) QQChatViewTable* table;
@property(retain, nonatomic) QQBulletinMsgView* msgView;
-(void).cxx_destruct;
-(void)forwardTo:(id)to;
-(void)copyText:(id)text;
-(void)LongPressCallBack:(CGPoint)back;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(id)initWithMsgContent:(id)msgContent reuseIdentifier:(id)identifier;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQRemarkFriendEngine : NSObject <IEngineDispatchDelegate> {
	NSMutableArray* _needToRemarkFriends;
	NSMutableDictionary* _remarkingFriends;
}
+(id)GetInstance;
-(void)modifyFriendsRemarkInList;
-(void)addRemarkFriendsTask:(id)task;
-(int)sendRemarkFriendRequest:(long long)request newName:(id)name;
-(void)notifyLowerRegisterError:(id)error;
-(void)notifyError:(id)error;
-(void)responseRemarkFriend:(char*)aFriend DataLen:(int)len Seq:(int)seq;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)dealloc;
-(id)init;
@end

@interface TencentRequest : NSObject {
	id<TencentRequestDelegate> _delegate;
	NSString* _url;
	NSString* _httpMethod;
	NSMutableDictionary* _params;
	NSURLConnection* _connection;
	NSMutableData* _responseText;
	int _upTotalBytesWritten;
	int _upTotalBytesExpectedToWrite;
	int _uplastTotalBytesWritten;
	NSTimer* _statusTimer;
	NSString* _cookie;
	double _connTimeout;
	NSMutableDictionary* _httpHeaders;
}
@property(readonly, assign, nonatomic) NSMutableDictionary* httpHeaders;
@property(assign, nonatomic) double connTimeout;
@property(retain, nonatomic) NSString* cookie;
@property(assign) int upTotalBytesExpectedToWrite;
@property(assign) int upTotalBytesWritten;
@property(assign) int uplastTotalBytesWritten;
@property(retain, nonatomic) NSTimer* statusTimer;
@property(assign, nonatomic) NSMutableData* responseText;
@property(assign, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSMutableDictionary* params;
@property(copy, nonatomic) NSString* httpMethod;
@property(copy, nonatomic) NSString* url;
@property(assign, nonatomic) id<TencentRequestDelegate> delegate;
+(id)serializeURL:(id)url params:(id)params httpMethod:(id)method;
+(id)serializeURL:(id)url params:(id)params;
+(id)getRequestWithParams:(id)params httpMethod:(id)method delegate:(id)delegate requestURL:(id)url;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)dealloc;
-(void)cancel;
-(void)updateStatus:(id)status;
-(void)connect;
-(BOOL)loading;
-(void)handleResponseData:(id)data;
-(void)failWithError:(id)error;
-(id)parseJsonResponse:(id)response error:(id*)error;
-(id)formError:(int)error userInfo:(id)info;
-(id)generateOtherPostBody;
-(id)generatePostBody;
-(void)utfAppendBody:(id)body data:(id)data;
-(id)init;
@end

@interface QQPluginFeedCount : QQModel {
	int _pluginID;
	int _relevantFeedCount;
	int _irrelevantFeedCount;
}
@property(assign, nonatomic) int irrelevantFeedCount;
@property(assign, nonatomic) int relevantFeedCount;
@property(assign, nonatomic) int pluginID;
@end

@interface QQPluginFeedCountManager : NSObject {
	NSString* _uin;
	NSMutableDictionary* _feedCountMap;
}
@property(retain, nonatomic) NSString* uin;
+(id)feedCountPathname;
+(id)instance;
-(void)save;
-(void)load;
-(void)setFeedCount:(id)count withPluginID:(int)pluginID;
-(void)resetFeedCountWithPluginID:(int)pluginID;
-(id)getFeedCountWithPluginID:(int)pluginID;
-(void)dealloc;
-(id)init;
@end

@interface QQPluginInfoParser : NSObject <NSXMLParserDelegate> {
@private
	NSMutableDictionary* pluginConfig;
	NSString* pluginConfigKey;
}
@property(retain, nonatomic) NSString* pluginConfigKey;
@property(retain, nonatomic) NSMutableDictionary* pluginConfig;
-(void)parser:(id)parser parseErrorOccurred:(id)occurred;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parserDidStartDocument:(id)parser;
-(id)parseFromPbResponse:(const PluginInfo*)pbResponse;
-(id)parseFromResponse:(GetResourceRespInfo*)response;
-(void)dealloc;
-(id)init;
@end

@interface QQRelationLogicEngine : QQSearchBaseLogicEngine {
	NSMutableArray* _groupList;
	NSMutableArray* _discussGroupList;
	NSMutableArray* _contactsList;
	NSMutableArray* _pubAccountList;
	NSMutableArray* _searchResult;
	BOOL _isReloadingGroupList;
	int _seqFollowList;
}
@property(readonly, assign, nonatomic) NSArray* pubAccountList;
@property(readonly, assign, nonatomic) NSArray* contactsList;
@property(readonly, assign, nonatomic) NSArray* discussGroupList;
@property(readonly, assign, nonatomic) NSArray* groupList;
+(id)getInstance;
-(void)reloadFriendListDataAfterDelay;
-(void)reloadFriendListData;
-(id)getPublicAccountModel:(unsigned long long)model;
-(void)reloadPublicAcountListAfterDelay;
-(void)reloadPublicAcountList;
-(void)reloadContactsListDataAfterDelay;
-(void)reloadContactsListData;
-(void)reloadDiscussGroupListDataAfterDelay;
-(void)reloadDiscussGroupListData;
-(void)reloadGroupListDataAfterDelay;
-(void)reloadGroupListData;
-(void)reloadSourceData;
-(void)handleQQAccountLogoutNotification:(id)notification;
-(void)handlePublicAccountNotification:(id)notification;
-(void)refreshPublicAccountListAfterDelay;
-(void)refreshPublicAccountList;
-(void)dealloc;
-(id)init;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)relationSearchResultDidSelectRow:(id)relationSearchResult;
-(void)relationSearchResultDidSelectRowCommonProcess:(id)relationSearchResult;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)initRelationSearchResultCell:(id)cell indexPath:(id)path;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)reloadSearchTableData:(id)data filterType:(int)type;
@end

@interface SearchResultCellView : UIView {
	id _model;
	UILabel* _nameLabel;
	QQAsynHeadImageView* _headImageView;
	UILabel* _remarkLabel;
	UILabel* _typeLabel;
	UIImageView* _certifyIcon;
}
@property(retain, nonatomic) id model;
-(void)setPubAccountModel:(id)model;
-(void)setCircleFriendModel:(id)model;
-(void)setContactModel:(id)model;
-(void)setDiscussGroupModel:(id)model;
-(void)setGroupModel:(id)model;
-(void)setFriendModel:(id)model;
-(void)setNameLabel:(id)label remarkLabel:(id)label2 typeLabel:(id)label3;
-(void)setNameLabel:(id)label remarkLabel:(id)label2 typeLabel:(id)label3 certifyGrade:(int)grade;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQShareExtraMessage : NSObject {
	int _bizType;
	int _action;
	NSString* _digestText;
	NSString* _message;
	NSString* _elementName;
	NSMutableString* _elementText;
}
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* digestText;
@property(assign, nonatomic) int action;
@property(assign, nonatomic) int bizType;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parseFromXmlMessage:(id)xmlMessage;
-(void)dealloc;
-(id)initWithMessage:(id)message;
@end

@interface QQShareCookieParser : NSObject {
}
+(id)parse:(void*)parse length:(int)length;
@end

@interface QQShareResultDialog : FullscreenOverlayView <UITextFieldDelegate> {
	UIView* _container;
	UIImageView* _backgroundView;
	UIButton* _OneButton;
	UIButton* _TwoButton;
	UILabel* _labelTitle;
	UILabel* _labelDescription;
	UIImageView* _lineImgView;
	UIImageView* _ImgView;
	unsigned _btnNum;
	id<QQShareResultDialogDelegate> _dialogDelegate;
	id _contextData;
@private
	UIView* _titleContainer;
}
-(void)buttonClickSuccess:(id)success;
-(void)buttonClickTwo:(id)two;
-(void)buttonClickOne:(id)one;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithTitle:(id)title Description:(id)description buttonTextOne:(id)one buttonTextTwo:(id)two image:(id)image buttonNumber:(unsigned)number delegate:(id)delegate;
@end

@interface QQRecentLogicEngine : QQRelationLogicEngine {
	QQMessageView* _messageView;
	NSMutableArray* _messageSearchResult;
}
+(id)getInstance;
-(void)dealloc;
-(id)init;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)messageSearchResultDidSelectRow:(id)messageSearchResult;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)initMessageSearchResultCell:(id)cell indexPath:(id)path;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)reloadSearchTableData:(id)data filterType:(int)type;
@end

@interface QQProgressData : NSObject {
	int _style;
	float _curProgress;
	float _dstProgress;
	BOOL _uploading;
	BOOL _hidden;
	float _delta;
}
@property(assign, nonatomic) float delta;
@property(assign, nonatomic) BOOL hidden;
@property(assign, nonatomic) BOOL uploading;
@property(readonly, assign, nonatomic) float pace;
@property(assign, nonatomic) float dstProgress;
@property(assign, nonatomic) float curProgress;
@property(assign, nonatomic) int style;
-(void)clearProgress;
-(id)init;
@end

@interface QQImageMaskView : UIView {
	BOOL _autoHide;
	UILabel* _text;
	UIActivityIndicatorView* _indicator;
	QQProgressData* _processData;
	NSObject<QQImageMaskViewDelegate>* _delegate;
}
@property(assign, nonatomic) NSObject<QQImageMaskViewDelegate>* delegate;
@property(readonly, assign, nonatomic) QQProgressData* data;
@property(assign, nonatomic) BOOL autoHide;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) int style;
-(void)drawRect:(CGRect)rect;
-(void)clearProgress;
-(void)clearProgressAndHideMask;
-(void)hideMask;
-(void)prepare:(id)prepare;
-(void)_buffProgress;
-(void)dealloc;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
@end

@interface qqBizAgentReportInfo : NSObject {
@private
	NSString* _pluginID;
	int _clickCount;
	unsigned _uin;
	NSString* _log;
}
@property(assign, nonatomic) unsigned uin;
@property(assign, nonatomic) int clickCount;
@property(copy, nonatomic) NSString* log;
@property(copy, nonatomic) NSString* pluginID;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QQBizAgentPluginStatisticeEngine : NSObject {
	NSMutableDictionary* _pluginStatisticsContainer;
}
+(void)clear;
+(id)getInstance;
-(void)dealloc;
-(void)appendCLinetOper:(id)oper operateType:(id)type name:(id)name log:(id)log;
-(void)AddQQBizAgentLog:(id)log key:(id)key;
-(void)upload;
-(void)analyzeDate:(id)date;
-(void)sendLog:(id)log;
-(void)writeToFile;
-(void)AddStatisticsLog:(id)log log:(id)log2;
-(id)init;
@end

@interface QQUnreadTagCountManager : NSObject {
	NSString* _currentUin;
	NSMutableDictionary* _countDic;
	int _tabIndex;
}
@property(assign, nonatomic) int tabIndex;
-(void)setUnreadCount:(unsigned)count forKey:(id)key;
-(void)updateTabHint;
-(void)dealloc;
-(id)initWithTabIndex:(unsigned)tabIndex;
@end

@interface QQNSLoggerSettingsViewController : QQViewController <UITextFieldDelegate> {
	UIButton* _timerButton;
	UITextField* _viewerHostField;
	UITextField* _viewerPortField;
	UISwitch* _browseBonjour;
	UISwitch* _browseLocalDomainOnly;
	UILabel* _hintLbl;
}
-(void)textFieldDidChange:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)saveSettings:(id)settings;
-(void)browseLocalDomainOnlySettingChanged:(id)changed;
-(void)bonjourSettingChanged:(id)changed;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface QQPageIndicator : UIView {
	int _currentPage;
	int _totalPage;
}
@property(assign, nonatomic) int totalPage;
@property(assign, nonatomic) int currentPage;
-(void)drawRect:(CGRect)rect;
@end

@interface QQGroupBulletinModel : QQModel {
@private
	NSString* _msgContent;
	unsigned long long _msgTime;
	long long _opsUin;
	unsigned long long _uMsgTime;
	int _msgType;
	long long _fromUin;
	long long _msgID;
	long long _toUin;
	long long _msgSeq;
	long long _groupCode;
	long long _svrMsgID;
	BOOL _isRead;
	int _appShareID;
}
@property(assign, nonatomic) int appShareID;
@property(assign, nonatomic) long long svrMsgID;
@property(assign, nonatomic) long long msgSeq;
@property(assign, nonatomic) long long toUin;
@property(assign, nonatomic) long long fromUin;
@property(assign, nonatomic) unsigned long long uMsgTime;
@property(assign, nonatomic) int msgType;
@property(copy, nonatomic) NSString* msgContent;
@property(assign, nonatomic) unsigned long long msgTime;
@property(assign, nonatomic) long long opsUin;
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) BOOL isRead;
@property(assign, nonatomic) long long msgID;
-(id)description;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(id)transformToCacheMsgModel;
-(id)transformToMessageModel;
@end

@interface QQHeadPhoto : QQBasePhoto <IFaceObserver> {
	int _userType;
	NSString* _uin;
	id<IFaceService> _faceService;
}
@property(assign) int userType;
@property(retain, nonatomic) NSString* uin;
-(void)notifyGetHeadImageSuccWithDict:(id)dict;
-(void)notifyDownloadHeadImageProgress:(id)progress;
-(void)downloadPhoto;
-(id)getThumbImage;
-(void)setUin:(id)uin userType:(int)type;
-(void)dealloc;
-(id)init;
@end

@interface QQHeadPhotoBrowserViewController : PhotoBrowserBaseViewContoller {
	NSString* _uin;
	int _userType;
}
-(id)getToolbarItems;
-(void)setPhotoCount:(int)count;
-(void)dealloc;
-(id)initWithUin:(id)uin userType:(int)type;
@end

@interface QQTroopAnnouncementTableOperation : NSObject {
@private
	CDBMaxMsgIdManager* _msgIdManager;
}
-(id)GenerateMsgModel:(id)model;
-(BOOL)deleteTroopAnouncementMsgArr:(id)arr inDb:(id)db;
-(BOOL)deleteTroopAnouncementMsg:(long long)msg inDb:(id)db;
-(BOOL)deleteTroopAnouncementMsgOfReadState:(BOOL)readState GroupCode:(long long)code inDb:(id)db;
-(BOOL)updateTroopAnouncementMsgArray:(id)array inDb:(id)db;
-(BOOL)insertTroopAnouncementMsgArray:(id)array inDb:(id)db;
-(id)GetAnouncementMsgWithSvrMsgId:(long long)svrMsgId inDb:(id)db;
-(id)GetAnouncementMsgWithMsgId:(long long)msgId inDb:(id)db;
-(id)GetAnouncementMsgOfReadState:(BOOL)readState inDb:(id)db;
-(id)GetAnouncementMsgOfGroup:(long long)group AscOrder:(BOOL)order HadReaded:(BOOL)readed inDb:(id)db;
-(id)GetAnouncementMsgOfGroup:(long long)group AscOrder:(BOOL)order StartTime:(long long)time EndTime:(long long)time4 inDb:(id)db;
-(void)UpdateTroopAnnouncementTable:(id)table;
-(void)CreateTroopAnnouncementTable:(id)table withVersion:(int)version;
-(void)CreateTroopAnnouncementTable:(id)table;
-(void)dealloc;
-(id)init;
@end

@interface QQOpenIDManager : NSObject {
	NSMutableDictionary* _cache;
	NSMutableDictionary* _pendingRequests;
}
+(id)pathname;
+(id)instance;
-(void)load;
-(void)save;
-(id)getOpenIDForUin:(id)uin appid:(id)appid;
-(void)setOpenID:(id)anId forRequestID:(int)requestID;
-(void)setRequestID:(int)anId appid:(id)appid uin:(id)uin;
-(void)setOpenID:(id)anId forUin:(id)uin andAppid:(id)appid;
-(void)dealloc;
-(id)init;
@end

@interface QQSearchBaseViewController : QQViewController <UISearchBarDelegate, UISearchDisplayDelegate, QQSearchBaseLogicEngineDelegate> {
	BOOL _isSearching;
	BOOL _isHidesBottomBarWhenPushed;
	UISearchBar* _searchBar;
	UISearchDisplayController* _searchDisplay;
	int _filterType;
	QQSearchBaseLogicEngine* _logicEngine;
}
-(void)handleListChangedWhenSearchAfterDelay;
-(void)handleListChangedWhenSearch;
-(void)resetModelPriority;
-(void)setModelPriority;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
-(void)popQQController:(BOOL)controller;
-(void)cancelSearch;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)initWithSearchEgnine:(id)searchEgnine;
-(id)init;
@end

@interface QQSearchBaseLogicEngine : NSObject <UITableViewDelegate, UITableViewDataSource> {
	id<QQSearchBaseLogicEngineDelegate> _delegate;
}
@property(assign, nonatomic) id<QQSearchBaseLogicEngineDelegate> delegate;
-(void)reloadSearchTableData:(id)data filterType:(int)type;
@end

@interface FileBaseTask : NSObject {
	int _seqId;
	BOOL _isCancel;
	float _process;
	NSString* _fileUuid;
	NSString* _errorMsg;
	QQMessageModel* _msgModel;
	NSTimer* _directTimer;
	NSTimer* _inDirectTimer;
}
@property(retain, nonatomic) QQMessageModel* msgModel;
@property(retain, nonatomic) NSString* errorMsg;
@property(retain, nonatomic) NSString* fileUuid;
@property(assign, nonatomic) float process;
@property(assign, nonatomic) BOOL isCancel;
@property(assign, nonatomic) int seqId;
-(void)dealloc;
-(void)startupInDirectTimeoutTimer:(double)directTimeoutTimer target:(id)target selector:(SEL)selector;
-(void)startupDirectTimeoutTimer:(double)timer target:(id)target selector:(SEL)selector;
-(void)stopInDirectTimeoutTimer;
-(void)stopDirectTimeoutTimer;
-(id)initWithFileUuid:(id)fileUuid;
@end

@interface FileUploadTask : FileBaseTask {
	FileUploadInfo* _fileInfo;
	BOOL _isIndirectFail;
	BOOL _isDirectFail;
	NSString* _resourceKeys;
	FileAssistantUploadTransfer* _indirectUpload;
	FileAssistantHTTPConnection* _directUpload;
}
@property(retain, nonatomic) FileAssistantHTTPConnection* directUpload;
@property(retain, nonatomic) FileAssistantUploadTransfer* indirectUpload;
@property(retain, nonatomic) NSString* resourceKeys;
@property(assign, nonatomic) BOOL isDirectFail;
@property(assign, nonatomic) BOOL isIndirectFail;
@property(retain, nonatomic) FileUploadInfo* fileInfo;
-(id)description;
-(void)dealloc;
@end

@interface FileDownloadTask : FileBaseTask {
	NSString* _filePath;
	FileDownloadInfo* _fileInfo;
	BOOL _isIndirectFail;
	BOOL _isDirectFail;
	FileAssistantDownloadTransfer* _indirectDownload;
	FileAssistantDownloadTransfer* _directDownload;
}
@property(retain, nonatomic) FileAssistantDownloadTransfer* directDownload;
@property(retain, nonatomic) FileAssistantDownloadTransfer* indirectDownload;
@property(assign, nonatomic) BOOL isDirectFail;
@property(assign, nonatomic) BOOL isIndirectFail;
@property(retain, nonatomic) FileDownloadInfo* fileInfo;
@property(retain, nonatomic) NSString* filePath;
-(id)description;
-(void)dealloc;
@end

@interface LongTextSendTask : FileBaseTask {
	int _sendIndex;
	int _sendTotal;
	long long _toUin;
	NSMutableArray* _subStrings;
}
@property(readonly, assign, nonatomic) NSMutableArray* subStrings;
@property(assign, nonatomic) int sendTotal;
@property(assign, nonatomic) int sendIndex;
@property(assign, nonatomic) long long toUin;
-(id)getCurrentSendData;
-(void)prepareNext;
-(BOOL)isFinished;
-(void)dealloc;
-(id)init;
@end

@interface QQChatCellModel : QQModel <NSCopying> {
	NSString* _nick;
	NSString* _uin;
	NSString* _content;
	double time;
	int read;
	BOOL isSelf;
	int msgType;
	int msgSubType;
	int msgID;
	BOOL loading;
	float realprogress;
	BOOL _isMainMsg;
	BOOL _lastMainMsg;
	BOOL _actionType;
	NSString* _actionUrl;
	NSString* _fileTransId;
	NSString* _percent;
	NSString* _stateCurrent;
	NSObject* _maskData;
	NSString* _fileName;
	NSString* _process;
	NSString* _imageDone;
	NSArray* textContent;
	EmotionParseResult* _layoutResult1;
	EmotionParseResult* _layoutResult2;
	EmotionParseResult* _layoutNickResult;
	int _sendingFailedMsgStamp;
	NSString* _groupCode;
	unsigned _appShareID;
	QQShareExtraMessage* _shareExtraMessage;
	unsigned _sMsgSeq;
	int _roamMsg;
	int _conseqMsg;
	unsigned _roamRandom;
	unsigned _roamTime;
	int _sMsgType;
	NSString* _strMsg;
	BOOL _isDiscussGroupMsg;
	NSString* _discussGroupUin;
	BOOL _isExistPic;
	CGRect _rectImage;
	int _sendSeq;
	NSString* _mobilePhone;
	int _fileMsgType;
	unsigned _onlineFileId;
	int _placeholderMsg;
	BOOL _loadingState;
	NSString* _picUrl;
	int _richSourceType;
	int _msgState;
	QQLargeMsgInfo* _largeInfo;
	BOOL _pkgNum;
	BOOL _pkgIndex;
	short _divSeq;
	int _storeFaceState;
	NSString* _storeFacePath;
	BOOL _toSecretStatus;
	BOOL _fromSecretStatus;
	unsigned long long _peerReadDate;
	int _limitTime;
	int _secretFileEncryptKey;
	int _secretFilePreHeadLength;
	int _captureCount;
	NSString* _secretFileKey;
	NSString* _secretFileToUin;
	NSString* _secretFileFromUin;
	int _splitPosition;
	NSMutableArray* _subMsgList;
	BOOL _highlighted;
	CGRect _thumbRect;
	float _maxContentWidth;
	QQMessageModel* _sourceMessageModel;
	UIFont* _font;
@private
	BOOL uploading;
}
@property(assign, nonatomic) CGRect thumbRect;
@property(assign, nonatomic) BOOL highlighted;
@property(retain, nonatomic, getter=getSubMsgList) NSMutableArray* subMsgList;
@property(assign, nonatomic) int splitPosition;
@property(retain, nonatomic) NSString* secretFileFromUin;
@property(retain, nonatomic) NSString* secretFileToUin;
@property(retain, nonatomic) NSString* secretFileKey;
@property(assign, nonatomic) int captureCount;
@property(assign, nonatomic) BOOL fromSecretStatus;
@property(assign, nonatomic) BOOL toSecretStatus;
@property(assign, nonatomic) int secretFilePreHeadLength;
@property(assign, nonatomic) int secretFileEncryptKey;
@property(assign, nonatomic) int limitTime;
@property(assign, nonatomic) unsigned long long peerReadDate;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* storeFacePath;
@property(assign, nonatomic) int storeFaceState;
@property(assign, nonatomic) short divSeq;
@property(assign, nonatomic) BOOL pkgIndex;
@property(assign, nonatomic) BOOL pkgNum;
@property(retain, nonatomic) QQLargeMsgInfo* largeInfo;
@property(assign, nonatomic) float maxContentWidth;
@property(assign, nonatomic, getter=getMsgState) int msgState;
@property(assign, nonatomic) int richSourceType;
@property(retain, nonatomic) NSString* picUrl;
@property(assign, nonatomic) BOOL loadingState;
@property(assign, nonatomic) int placeholderMsg;
@property(assign, nonatomic) unsigned onlineFileId;
@property(assign, nonatomic) int fileMsgType;
@property(retain, nonatomic) NSString* mobilePhone;
@property(assign, nonatomic) int sendSeq;
@property(assign, nonatomic) BOOL isExistPic;
@property(assign, nonatomic) CGRect rectImage;
@property(retain, nonatomic) NSString* discussGroupUin;
@property(assign, nonatomic) BOOL isDiscussGroupMsg;
@property(retain, nonatomic) NSString* strMsg;
@property(assign, nonatomic) int sMsgType;
@property(assign, nonatomic) unsigned roamTime;
@property(assign, nonatomic) unsigned roamRandom;
@property(assign, nonatomic) int conseqMsg;
@property(assign, nonatomic) int roamMsg;
@property(assign, nonatomic) unsigned sMsgSeq;
@property(retain, nonatomic) NSString* actionUrl;
@property(assign, nonatomic) BOOL actionType;
@property(retain, nonatomic) NSString* groupCode;
@property(assign, nonatomic) int sendingFailedMsgStamp;
@property(retain, nonatomic) EmotionParseResult* layoutNickResult;
@property(retain, nonatomic) EmotionParseResult* layoutResult2;
@property(retain, nonatomic) EmotionParseResult* layoutResult1;
@property(assign, nonatomic) BOOL lastMainMsg;
@property(assign, nonatomic) BOOL isMainMsg;
@property(retain, nonatomic) NSObject* maskData;
@property(retain, nonatomic) NSString* imageDone;
@property(retain, nonatomic) NSString* process;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSArray* textContent;
@property(assign) float realprogress;
@property(assign) BOOL uploading;
@property(assign) BOOL loading;
@property(assign) int msgSubType;
@property(assign) int msgID;
@property(assign) double time;
@property(assign) BOOL isSelf;
@property(assign) int read;
@property(assign, nonatomic) int msgType;
@property(retain, nonatomic) NSString* stateCurrent;
@property(retain, nonatomic) NSString* percent;
@property(retain, nonatomic) NSString* fileTransId;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) QQShareExtraMessage* shareExtraMessage;
@property(assign, nonatomic) unsigned appShareID;
@property(retain, nonatomic) QQMessageModel* sourceMessageModel;
+(id)modelWithMessageModel:(id)messageModel;
-(BOOL)isTailPart;
-(BOOL)isHeadPart;
-(BOOL)isLongSplitMessage;
-(void)updateUploadState:(BOOL)state;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(id)messageModel;
-(id)getAvailableOriginPicName;
-(BOOL)isRichModelImageExist;
-(BOOL)isSingleChatCellOfSystemImage;
-(id)getAvailableRichModelPictureName;
-(id)getRichModelPictureName;
-(id)getRichModelPictureName:(BOOL*)name;
-(XXStruct_zYrK5D)getCoordinateFromContent;
-(BOOL)isMapMessage;
-(id)initWithMessageModel:(id)messageModel content:(id)content;
-(void)replaceMessageModel:(id)model;
-(id)initWithMessageModel:(id)messageModel;
-(id)initWithModel:(id)model;
-(id)PaseImage:(id)image;
-(id)init;
-(BOOL)isAutoReplyMsg;
-(BOOL)isImageModel;
-(int)compareByTimeDesc:(id)desc;
-(id)description;
-(void)setSecretFileField:(id)field;
-(unsigned)GetMaxContent;
-(id)getSubMsgList;
-(id)getLayoutResult:(id)result fromLine:(int)line toLine:(int)line3;
@end

@interface QQMoreCellModel : NSObject {
	int _beginSeq;
	int _endSeq;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int endSeq;
@property(assign, nonatomic) int beginSeq;
-(void)dealloc;
-(id)init:(int)init end:(int)end title:(id)title;
-(id)init;
@end

@interface QQChatCellSubModel : QQChatCellModel {
	QQChatCellModel* _parentModel;
	BOOL _disPlayAccView;
}
@property(assign, nonatomic) QQChatCellModel* parentModel;
@property(assign, nonatomic) BOOL disPlayAccView;
-(void)dealloc;
-(BOOL)isLongSplitMessage;
-(int)getMsgState;
-(BOOL)highlighted;
-(void)setHighlighted:(BOOL)highlighted;
-(id)initWithParentModel:(id)parentModel;
@end

@interface QQToastView : UIImageView {
	UILabel* _textLabel;
@private
	double _duration;
	UIEdgeInsets _textInsets;
	NSString* _text;
}
@property(assign, nonatomic) double duration;
@property(assign, nonatomic) UIEdgeInsets textInsets;
@property(copy, nonatomic) NSString* text;
+(id)showCreateGroupTipsInView:(id)view;
-(void)dealloc;
-(void)dismiss;
-(void)showInView:(id)view;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQRecentLabel : QQLabel {
	BOOL _emotionAnimated;
	float _emotionWidth;
}
@property(assign, nonatomic) float emotionWidth;
@property(assign, nonatomic) BOOL emotionAnimated;
-(void)drawRect:(CGRect)rect;
-(void)setText:(id)text;
-(void)setLayoutResult:(id)result;
-(void)layoutStringIfNeeded;
-(id)initWithFrame:(CGRect)frame;
@end

@interface TCSignalChannelService : NSObject <TCSignalChannelService_Protected> {
}
+(id)RegisteredCommands;
+(void)FreeInstance;
+(id)GetInstance;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(id)handleRecievedMsg:(CIMEngineMsgStruct)msg;
-(BOOL)sendData:(id)data withCmd:(id)cmd pSeq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(void)uninit;
-(void)dealloc;
-(id)init;
@end

@interface TCSignalChannelMessage : NSObject {
@private
	id data;
	NSString* serviceCmd;
	int seq;
}
@property(assign, nonatomic) int seq;
@property(retain, nonatomic) NSString* serviceCmd;
@property(retain, nonatomic) id data;
-(void)dealloc;
@end

@interface QQNetworkStateMgr : NSObject {
	int _networkState;
	int _UIShowState;
	BOOL _isUIShowMode;
	BOOL _isNetErrorShowed;
}
@property(readonly, assign, nonatomic) BOOL isUIShowMode;
@property(readonly, assign, nonatomic) int UIShowState;
@property(readonly, assign, nonatomic) int networkState;
+(id)instance;
-(void)setUIShowMode:(BOOL)mode isCheckCurrentUIState:(BOOL)state;
-(void)updateUINetworkError;
-(void)updateUIShowState:(int)state isRealRegisterOK:(BOOL)ok;
-(void)updateMSFNetworkState:(int)state;
-(void)updateMSFServerForceClose;
-(const char*)UINetworkStateStr:(int)str;
-(void)dealloc;
-(id)init;
@end

@interface QQTroopAnnouncementTable : NSObject <DBAccountChangedProtocol> {
@private
	QQTroopAnnouncementTableOperation* _dbOperation;
}
-(BOOL)deleteTroopAnouncementMsgArr:(id)arr;
-(BOOL)deleteTroopAnouncementMsg:(long long)msg;
-(BOOL)deleteTroopAnouncementMsgOfReadState:(BOOL)readState GroupCode:(long long)code;
-(BOOL)updateTroopAnouncementMsgArray:(id)array;
-(BOOL)insertTroopAnouncementMsgArray:(id)array;
-(id)GetAnouncementMsgWithSvrMsgId:(long long)svrMsgId;
-(id)GetAnouncementMsgWithMsgId:(long long)msgId;
-(id)GetAnouncementMsgOfReadState:(BOOL)readState;
-(id)GetAnouncementMsgOfGroup:(long long)group AscOrder:(BOOL)order HadReaded:(BOOL)readed;
-(id)GetAnouncementMsgOfGroup:(long long)group AscOrder:(BOOL)order StartTime:(long long)time EndTime:(long long)time4;
-(void)onDBChanged;
-(void)dealloc;
-(id)init;
@end

@interface QQTroopListTable : NSObject <DBAccountChangedProtocol> {
@private
	QQTroopTableOperation* _dbOperation;
	NSMutableDictionary* _groupList;
}
-(int)asyncUpdateTroopRemarkStatus:(id)status :(id)arg2 userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateTroopMemStatus:(id)status :(id)arg2 userdata:(id)userdata callback:(id)callback;
-(int)asyncSetTroopname:(id)troopname GroupName:(id)name userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateTroopRemarkLastSeq:(id)seq groupCode:(id)code userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateTroopName:(id)name groupCode:(int)code groupType:(int)type groupFlag:(int)flag groupFace:(int)face infoSeq:(int)seq userdata:(id)userdata callback:(id)callback;
-(int)asyncInsertTroopListForUin:(unsigned)uin code:(unsigned)code userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteTroopListByUin:(id)uin userdata:(id)userdata callback:(id)callback;
-(void)updateTroopRemarkStatus:(id)status :(id)arg2;
-(void)updateTroopMemStatus:(id)status :(id)arg2;
-(void)SetTroopName:(id)name GroupName:(id)name2;
-(id)GetTroopUinAndCode;
-(id)GetTroopUinAndCodeByGroupCode:(id)code;
-(id)getTroopRemarkLastSeq:(id)seq;
-(void)updateTroopRemarkLastSeq:(id)seq groupCode:(id)code;
-(id)GetGroupName:(id)name;
-(id)getUnFinishRemark;
-(id)groupListInfo;
-(unsigned)groupListInfoCount;
-(id)groupListInfoThatHasNotInfo;
-(void)updateTroopName:(id)name groupCode:(int)code groupType:(int)type groupFlag:(int)flag groupFace:(int)face infoSeq:(int)seq;
-(void)insertTroopListForUin:(unsigned)uin code:(unsigned)code;
-(void)deleteTroopListByUin:(id)uin;
-(void)onDBChanged;
-(void)dealloc;
-(id)init;
@end

@interface QQTroopMsgSeqTable : NSObject <DBAccountChangedProtocol> {
@private
	QQTroopMsgSeqTableOperation* _dbOperation;
}
-(void)onDBChanged;
-(int)asyncInsertTroop:(id)troop maxSeq:(long long)seq content:(id)content unreadCount:(int)count userdata:(id)userdata callback:(id)callback;
-(id)getTroopMsgMaxSeq;
-(void)insertTroop:(id)troop maxSeq:(long long)seq content:(id)content unreadCount:(int)count;
-(void)dealloc;
-(id)init;
@end

@interface QQTroopMemberTable : NSObject <DBAccountChangedProtocol> {
@private
	QQTroopMemTableOperation* _dbOperation;
}
-(void)onDBChanged;
-(int)asyncInsertTroopMemBatch:(id)batch userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteTroopMemberCache:(id)cache userdata:(id)userdata callback:(id)callback;
-(void)InsertTroopMemBatch:(id)batch;
-(id)GetTroopMemByGroupCode:(id)code;
-(void)deleteTroopMemberCache:(id)cache;
-(void)dealloc;
-(id)init;
@end

@interface QQTroopRemarkTable : NSObject <DBAccountChangedProtocol> {
@private
	QQTroopRemarkTableOperation* _dbOperation;
}
-(void)onDBChanged;
-(int)asynInsertTroopRemarkListBatch:(id)batch userdata:(id)userdata callback:(id)callback;
-(id)getTroopRemarkList:(id)list;
-(void)insertTroopRemarkListBatch:(id)batch;
-(void)dealloc;
-(id)init;
@end

@interface QQC2CMsgTable : NSObject <DBAccountChangedProtocol> {
	QQC2CMsgTableOperation* _dbOperation;
	CDBMaxMsgIdManager* _msgIdManager;
}
-(id)getRecentHelloMsg;
-(id)getC2CMessageModel:(id)model msgRandom:(long long)random msgSeq:(long long)seq;
-(id)getC2CMessage:(id)message readTime:(int)time count:(int)count;
-(id)getC2CMessage:(id)message readTime:(int)time faultTime:(int)time3 count:(int)count;
-(BOOL)deleteAccostMsgsWithUin:(id)uin;
-(id)getC2CMessage:(id)message msgTime:(int)time;
-(BOOL)updateMessages:(id)messages withTime:(double)time ofUin:(id)uin;
-(id)failedMessagesAfterTime:(double)time ofUin:(id)uin;
-(double)maxValidMessageTimeOfUin:(id)uin;
-(double)maxMessageTimeOfUin:(id)uin;
-(BOOL)deleteMessage:(id)message;
-(BOOL)removeMessage:(id)message;
-(void)updatePttPlaceholder:(int)placeholder;
-(id)QQFriendMessage:(id)message MsgID:(int)anId msgCount:(int)count;
-(id)QQSecretMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)getSecretfileModelWithContent:(id)content toUin:(id)uin content:(id)content3;
-(id)getSecretfileModelWithKey:(id)key toUin:(id)uin key:(id)key3;
-(void)updateSecretMessage:(id)message toUin:(id)uin secretContent:(id)content secretReadtime:(unsigned long long)readtime captureCount:(int)count toStatus:(int)status fromStatus:(int)status7;
-(void)updateSecretfileKeyByContent:(id)content content:(id)content2 uin:(id)uin;
-(void)updateSecretfiletostatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)updateSecretfilefromstatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)updateSecretfilefromstatusByContent:(id)content fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)updateC2CRichMsgState:(int)state msgTime:(int)time state:(int)state3;
-(void)SetC2CMsgSendStateWithMsgID:(id)msgID state:(int)state;
-(id)GetC2CMsgWithTargetUin:(id)targetUin WithType:(int)type beforeOrEqualTime:(long long)time limitCount:(unsigned)count;
-(void)updatePlaceholderFileMsg:(int)msg content:(id)content;
-(void)updateSendGroupTmpPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)updateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)transferOnlineFileToOffline:(int)offline newContent:(id)content;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId time:(int)time;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId;
-(void)updateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state;
-(void)updateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3;
-(int)GetC2CMessageCount:(id)count smallerThan:(int)than;
-(id)QQFriendMessageAsc:(id)asc MsgID:(int)anId msgCount:(int)count smallerThan:(int)than;
-(int)GetC2CMessageCount:(id)count;
-(void)messageFlagVisiable:(long long)visiable visiable:(unsigned)visiable2;
-(void)deleteMsgWithUin:(id)uin msgID:(int)anId;
-(id)getC2CRichMsg:(id)msg beginTime:(unsigned)time endTime:(unsigned)time3;
-(void)updateSystemMsg:(id)msg handled:(int)handled;
-(void)updataMsg:(long long)msg msgTime:(int)time withAppShareID:(int)appShareID;
-(BOOL)getPTTPICFileFromDB:(id)db len:(int)len type:(int)type;
-(void)removeAllAccostMessages;
-(id)getLatestSayHelloMessage;
-(id)getAccostMessages:(int)messages;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forContent:(id)content;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forRead:(int)read;
-(void)upOfflineFileMsg:(id)msg time:(int)time forRead:(int)read;
-(void)upOffLineFileMsg:(id)msg time:(long long)time forRead:(int)read;
-(void)upOffLineFileMsg:(id)msg msgId:(int)anId forRead:(int)read;
-(void)clearAllMessage;
-(void)UpdateVoiceMsgUUid:(int)uid UUid:(id)uid2;
-(id)GetVoiceModelOffLineList:(id)list msgTime:(long long)time;
-(id)GetVoiceModelList:(id)list msgId:(id)anId;
-(void)upDatePttMsg:(id)msg;
-(void)setPttMsg:(id)msg withStatus:(int)status;
-(void)setQQFailStateWithUUid:(id)uuid;
-(void)setQQReadStateWithUUid:(id)uuid;
-(void)updateMessageUuid:(id)uuid;
-(void)upVideMsg:(double)msg read:(int)read content:(id)content;
-(void)messageFlagForRecent:(id)recent;
-(int)getRoamMsgKeyTime:(id)time inOut:(int)anOut msgTime:(unsigned)time3;
-(void)updateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time;
-(id)QQUnRoamMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size;
-(id)QQRomaMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size;
-(void)deleteQQMessageWithUin:(id)uin FromTime:(int)time toTime:(int)time3;
-(id)QQMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)QQMessageWithUin:(id)uin timeStamp:(int)stamp;
-(id)QQMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)QQMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3;
-(id)systemMessages:(unsigned)messages;
-(void)setNoOperForUin:(id)uin;
-(void)setReadForUin:(id)uin;
-(void)updateQQMessagefromUIN:(long long)uin toUIN:(long long)uin2;
-(void)deleteMsgsWithUin:(id)uin;
-(void)deleteMsgWithContentArr:(id)contentArr :(id)arg2;
-(BOOL)selectQQMsgByTime:(id)time;
-(void)insertQQMsg:(id)msg;
-(void)insertQQMsgArray:(id)array;
-(void)onDBChanged;
-(void)dealloc;
-(id)init;
-(void)initDbOperation;
-(id)getTableName;
@end

@interface QQUserSummaryTable : NSObject <DBAccountChangedProtocol> {
}
-(void)dealloc;
-(void)onDBChanged;
-(id)init;
-(int)asyncSaveUserSummaryModelToDb:(id)db callback:(id)callback userdata:(id)userdata;
-(int)asyncGetUserSummaryModelFromDb:(long long)db callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteUserSummaryModelFromDb:(long long)db callback:(id)callback userdata:(id)userdata;
-(BOOL)deleteUserSummaryModelFromDb:(long long)db;
-(BOOL)saveUserSummaryModelToDb:(id)db;
-(id)getUserSummaryFromDb:(long long)db;
-(BOOL)deleteUserSummaryModel:(long long)model db:(id)db;
-(BOOL)saveUserSummaryModel:(id)model db:(id)db;
-(id)getUserSummary:(long long)summary db:(id)db;
-(void)createUserSummaryTable:(id)table;
@end

@interface QQMessageTableBase : NSObject {
}
-(void)setContent:(id)content withModel:(id)model msgType:(int)type;
-(int)getMsgLenWithType:(int)type msg:(id)msg;
@end

@interface QQTroopMsgTable : NSObject <DBAccountChangedProtocol> {
@private
	QQTroopMsgTableOperation* _dbOperation;
	CDBMaxMsgIdManager* _msgIdManager;
	QQTroopMsgTableOperation* dbOperation;
}
@property(readonly, assign, nonatomic, getter=getDbOperationObject) QQTroopMsgTableOperation* dbOperation;
-(id)getLastMessageInGroup:(id)group uin:(id)uin;
-(id)getGroupMessageModel:(id)model msgSeq:(long long)seq;
-(id)getGroupLatestMessage:(id)message limitCount:(unsigned)count;
-(int)removeMessage:(id)message;
-(int)asyncRemoveMessage:(id)message callback:(id)callback userdata:(id)userdata;
-(id)GetMsgsLessThanMsgid:(long long)msgid limitCount:(unsigned)count GroupCode:(id)code;
-(int)asyncUpdateGroupRichMsgState:(id)state msgId:(int)anId msgTime:(int)time state:(int)state4 callback:(id)callback userdata:(id)userdata;
-(BOOL)updateGroupRichMsgState:(id)state msgId:(int)anId msgTime:(int)time state:(int)state4;
-(int)asyncSetTroopFailStateWithMsgID:(id)msgID withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(void)setTroopFailStateWithMsgID:(id)msgID withGroupCode:(id)groupCode;
-(int)asyncSetTroopReadStateWithMsgID:(id)msgID withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(void)setTroopReadStateWithMsgID:(id)msgID withGroupCode:(id)groupCode;
-(void)setTroopMsgSendStateWithMsgID:(id)msgID groupcode:(id)groupcode state:(int)state;
-(int)getTroopMsgSendState:(int)state groupcode:(id)groupcode;
-(int)asyncSetTroopSuccessStateWithUUid:(id)uuid withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(void)setTroopSuccessStateWithUUid:(id)uuid withGroupCode:(id)groupCode;
-(int)asyncSetTroopFailStateWithUUid:(id)uuid withGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(void)setTroopFailStateWithUUid:(id)uuid withGroupCode:(id)groupCode;
-(int)asyncUpdateSendGroupPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 callback:(id)callback userdata:(id)userdata;
-(BOOL)updateSendGroupPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(int)asyncUpdateSendGroupPttState:(id)state uuid:(id)uuid duration:(unsigned)duration state:(int)state4 callback:(id)callback userdata:(id)userdata;
-(BOOL)updateSendGroupPttState:(id)state uuid:(id)uuid duration:(unsigned)duration state:(int)state4;
-(int)asyncUpdateSendGroupPicState:(id)state uuid:(id)uuid state:(int)state3 callback:(id)callback userdata:(id)userdata;
-(BOOL)updateSendGroupPicState:(id)state uuid:(id)uuid state:(int)state3;
-(long long)getTroopMsgMaxSeq:(id)seq;
-(int)asyncUpdateGroupMessageSeq:(long long)seq groupCode:(id)code msgID:(id)anId callback:(id)callback userdata:(id)userdata;
-(BOOL)updateGroupMessageSeq:(long long)seq groupCode:(id)code msgID:(id)anId;
-(int)asyncDeleteGroupMsgWithMsgId:(long long)msgId groupCode:(id)code msgType:(int)type callback:(id)callback userdata:(id)userdata;
-(void)deleteGroupMsgWithMsgId:(long long)msgId groupCode:(id)code msgType:(int)type;
-(int)QQDB_GetGroupMessageCount:(id)count;
-(long long)GetGroupMsgMaxSeq:(id)seq uin:(id)uin;
-(id)GetTroopMsgMaxSeqByGropuCode;
-(int)asyncUpdateGroupMessageUuid:(id)uuid callback:(id)callback userdata:(id)userdata;
-(void)updateTroopMessageUuid:(id)uuid;
-(int)asyncInsertGroupMessage:(id)message callback:(id)callback userdata:(id)userdata;
-(void)InsertTroopMessage:(id)message;
-(int)asyncInsertTroopMessageArray:(id)array callback:(id)callback userdata:(id)userdata;
-(BOOL)insertTroopMessageArray:(id)array;
-(int)asyncUpdateGroupMessageWithUin:(id)uin desTime:(int)time srcTime:(int)time3 sendUin:(id)uin4 callback:(id)callback userdata:(id)userdata;
-(void)updateGroupMessageWithUin:(id)uin desTime:(int)time srcTime:(int)time3 sendUin:(id)uin4;
-(int)asyncGetMsgFromTroop:(id)troop WithType:(int)type notMoreThanSeq:(long long)seq limitCount:(unsigned)count callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3 callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMessageWithUin:(id)uin msgSeq:(long long)seq sendUin:(id)uin3 callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteGroupMessageWithUin:(id)uin msgTime:(int)time sendUin:(id)uin3 callback:(id)callback userdata:(id)userdata;
-(void)deleteGroupMessageWithUin:(id)uin msgSeq:(long long)seq sendUin:(id)uin3;
-(void)deleteGroupMessageWithUin:(id)uin msgTime:(int)time sendUin:(id)uin3;
-(void)deleteGroupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(int)asyncGetGroupMsgWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3 callback:(id)callback userdata:(id)userdata;
-(id)groupMessageWithUin:(id)uin endSeq:(long long)seq count:(int)count;
-(id)groupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3;
-(id)groupMessageWithUin:(id)uin timeStamp:(int)stamp;
-(id)groupMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)groupMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3;
-(int)asyncSetReadForGroupContent:(id)groupContent groupCode:(id)code callback:(id)callback userdata:(id)userdata;
-(void)setReadForGroupContent:(id)groupContent groupCode:(id)code;
-(int)asyncDeleteMsgsWithGroupCode:(id)groupCode callback:(id)callback userdata:(id)userdata;
-(id)groupMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)getTroopCountListFromTroopMsg;
-(id)getTroopListFromTroopMsg;
-(int)asyncDeleteGarbageTroopMsg:(id)msg reserve:(int)reserve callback:(id)callback userdata:(id)userdata;
-(int)asyncDeleteTroopMsg:(id)msg FromSeq:(id)seq callback:(id)callback userdata:(id)userdata;
-(void)deleteMsgsWithGroupCode:(id)groupCode;
-(BOOL)deleteGarbageTroopMsg:(id)msg reserve:(int)reserve;
-(BOOL)deleteTroopMsg:(id)msg FromSeq:(id)seq;
-(void)clearAllTroopMsg;
-(void)updateTroopPttMsg:(id)msg;
-(void)setPttMsg:(id)msg withStatus:(int)status groupCode:(id)code;
-(void)updateTroopMsgRecentFlag:(id)flag;
-(void)onDBChanged;
-(void)dealloc;
-(id)init;
-(void)initDbOperationWithUin:(id)uin;
-(CDBMaxMsgIdManager*)msgIdManager;
@end

@interface QQTroopMsgTableOperationNew : QQTroopMsgTableOperation {
@private
	NSMutableSet* _tableUpdated;
}
+(BOOL)createGroupTable:(id)table withDB:(id)db;
+(id)tableNameForGroup:(id)group;
-(id)getLastMessageInGroup:(id)group uin:(id)uin inDb:(id)db;
-(id)getGroupMessageModel:(id)model msgSeq:(long long)seq inDb:(id)db;
-(id)getGroupLatestMessage:(id)message limitCount:(unsigned)count inDb:(id)db;
-(BOOL)removeMessage:(id)message inDb:(id)db;
-(id)GetMsgsLessThanMsgid:(long long)msgid limitCount:(unsigned)count GroupCode:(id)code inDb:(id)db;
-(id)selectTableWithGroupCode:(id)groupCode inDb:(id)db;
-(void)checkAndUpdateTable:(id)table inDb:(id)db;
-(void)updateTable:(id)table inDb:(id)db;
-(void)setTroopMsgSendStateWithMsgID:(id)msgID groupcode:(id)groupcode state:(int)state inDb:(id)db;
-(int)getTroopMsgSendState:(int)state groupcode:(id)groupcode inDb:(id)db;
-(id)GetTroopMsgWithTroopUin:(id)troopUin WithType:(int)type notMoreThanSeq:(long long)seq limitCount:(unsigned)count inDb:(id)db;
-(BOOL)updateSendGroupPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 inDb:(id)db;
-(BOOL)updateSendGroupPttState:(id)state uuid:(id)uuid duration:(unsigned)duration state:(int)state4 inDb:(id)db;
-(BOOL)updateGroupRichMsgState:(id)state msgId:(int)anId msgTime:(int)time state:(int)state4 inDb:(id)db;
-(BOOL)updateSendGroupPicState:(id)state uuid:(id)uuid state:(int)state3 inDb:(id)db;
-(BOOL)updateGroupMessageSeq:(long long)seq groupCode:(id)code msgID:(id)anId inDb:(id)db;
-(void)deleteGroupMsgWithMsgId:(long long)msgId groupCode:(id)code msgType:(int)type inDb:(id)db;
-(int)getTroopMessageTableSizeInDb:(id)db;
-(id)getTroopCountListFromTroopMsgInDb:(id)db;
-(BOOL)deleteGarbageTroopMsg:(id)msg reserve:(int)reserve inDb:(id)db;
-(void)clearAllTroopMsg:(id)msg;
-(void)updateTroopPttMsg:(id)msg inDb:(id)db;
-(void)updateTroopPttMsg:(id)msg groupCode:(id)code state:(int)state inDb:(id)db;
-(void)updateTroopMsgRecentFlag:(id)flag inDb:(id)db;
-(id)getTroopListFromTroopMsgInDb:(id)db;
-(void)setTroopSuccessStateWithUUid:(id)uuid withGroupCode:(id)groupCode inDb:(id)db;
-(void)setTroopFailStateWithUUid:(id)uuid withGroupCode:(id)groupCode inDb:(id)db;
-(void)setTroopFailStateWithMsgID:(id)msgID withGroupCode:(id)groupCode inDb:(id)db;
-(void)setTroopReadStateWithMsgID:(id)msgID withGroupCode:(id)groupCode inDb:(id)db;
-(id)getRecentGroupMsg:(id)msg;
-(int)QQDB_GetGroupMessageCount:(id)count inDb:(id)db;
-(long long)GetGroupMsgMaxSeq:(id)seq uin:(id)uin inDb:(id)db;
-(id)GetTroopMsgMaxSeqByGropuCode:(id)code inDb:(id)db;
-(void)updateTroopMessageUuid:(id)uuid inDb:(id)db;
-(BOOL)_insertTroopMessageArray:(id)array inDb:(id)db;
-(int)_insertTroopMessageArrayOld:(id)old inDb:(id)db;
-(void)InsertTroopMessage:(id)message inDb:(id)db;
-(void)updateGroupMessageWithUin:(id)uin desTime:(int)time srcTime:(int)time3 sendUin:(id)uin4 inDb:(id)db;
-(void)deleteGroupMessageWithUin:(id)uin msgSeq:(long long)seq sendUin:(id)uin3 inDb:(id)db;
-(void)deleteGroupMessageWithUin:(id)uin msgTime:(int)time sendUin:(id)uin3 inDb:(id)db;
-(void)deleteGroupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3 inDb:(id)db;
-(id)groupMessageWithUin:(id)uin endSeq:(long long)seq count:(long long)count inDb:(id)db;
-(id)groupMessageWithUin:(id)uin startSeq:(long long)seq endSeq:(long long)seq3 inDb:(id)db;
-(id)groupMessageWithUin:(id)uin timeStamp:(int)stamp inDb:(id)db;
-(id)groupMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3 inDb:(id)db;
-(void)setReadForGroupContent:(id)groupContent groupCode:(id)code inDb:(id)db;
-(void)deleteMsgsWithGroupCode:(id)groupCode inDb:(id)db;
-(id)groupMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page inDb:(id)db;
-(BOOL)deleteTroopMsg:(id)msg FromSeq:(id)seq inDb:(id)db;
-(id)commonGroupModelWithQueryResult:(id)queryResult groupCode:(id)code;
-(void)createTable:(id)table;
-(void)dealloc;
@end

@interface QQDBRecentMsg : NSObject <DBAccountChangedProtocol> {
@private
	QQRecentMsgTableOperation* _recentC2CMsg;
	NSString* uin;
}
@property(copy, nonatomic) NSString* uin;
-(void)clearTable;
-(void)messageFlagForRecent:(id)recent;
-(int)asyncUpdateRecentMsgWithSendResultModels:(id)sendResultModels userdata:(id)userdata callback:(id)callback;
-(void)deleteMsgsWithUin:(id)uin;
-(void)setReadForUin:(id)uin;
-(void)InsertRecentC2CMsg:(id)msg;
-(id)loadRecentMessage;
-(id)loadRecentMessage:(id)message;
-(id)getRecentDiscussMsg:(id)msg;
-(id)getRecentMsg:(id)msg;
-(void)dealloc;
-(id)initWithUin:(id)uin;
-(void)onDBChanged;
-(void)initRecentC2CMsgTable;
@end

@interface SynInfoServiceImpl : NSObject <ISynInfoService, IEngineDispatchDelegate> {
	NSMutableArray* _incrUpdDataArr;
	NSMutableArray* _pushUpdDataArr;
	NSMutableArray* _incrUpdTimeArr;
	BOOL _bModifyNick;
	BOOL _bRefreshFriList;
	BOOL _bRefreshGrpList;
	NSMutableArray* _faceChangeArr;
	NSMutableDictionary* _delegatTypeDic;
	NSMutableArray* _dataArr;
}
+(id)GetInstance;
-(void).cxx_destruct;
-(void)mergeRefresh;
-(void)updateUI_pushUpdate;
-(void)updateUI_incrUpd;
-(void)synPushDataToModels;
-(void)synIncreasedDataToModels;
-(void)saveTimestamps:(int)timestamps from:(BOOL)from;
-(void)getTimestamps;
-(void)testPushUpdate;
-(void)testIncreasedUpdate;
-(void)respPushUpdate:(const void*)update DataLen:(int)len subMsgType:(unsigned)type;
-(void)respIncreasedUpdate:(char*)update DataLen:(int)len Seq:(int)seq;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)requestIncreasedUpdate;
-(id)getDelegate:(int)delegate;
-(void)setDelegate:(id)delegate IncrUpdateType:(int)type;
-(void)dealloc;
-(id)init;
@end

@interface QQDBDeveloperInterface : NSObject {
}
+(void)removeChangeAccountListner:(id)listner;
+(void)addChangedAccountListener:(id)listener;
+(int)GetDBVersion;
+(int)doAsyncOperation:(SEL)operation target:(id)target userdata:(id)userdata callback:(id)callback;
+(id)doDbOperation:(SEL)operation target:(id)target;
+(BOOL)addColumn:(id)column toTable:(id)table withType:(id)type inDatabase:(id)database;
+(BOOL)addColumn:(id)column toTable:(id)table withType:(id)type defaultValue:(id)value inDatabase:(id)database;
+(void)dropIndex:(id)index inDatabase:(id)database;
@end

@interface CircleServiceImpl : NSObject <ICircleService, QSHttpRequestDelegate, QSHttpProgressDelegate, DBAsyncCallbackProtocol, IEngineDispatchDelegate> {
	CircleBigDataEngine* _circlebigDataEngine;
	CircleDBManager* _circleDBManager;
	NSMutableArray* _circleArray;
	NSMutableArray* _circleFriendArray;
	NSMutableDictionary* _circleDic;
	CircleTimeSampModle* _circleTimeSampModle;
	int _asyncReadAllDataId;
	int _asyncInwriteCircleId;
	int _asyncReadFriendCircleId;
}
+(id)GetInstance;
-(void).cxx_destruct;
-(int)requestGetCircleSwitches;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(BOOL)isConnected;
-(void)onDbAsyncCallback:(id)callback userdata:(id)userdata workID:(int)anId;
-(id)getCircleFriendListByCircleId:(unsigned)anId;
-(void)requestFinished:(id)finished;
-(void)requestFailed:(id)failed;
-(int)requestCircleList:(long long)list;
-(int)loadCircleList:(long long)list;
-(id)getCircle:(unsigned)circle;
-(id)getCircleFriendModel:(unsigned)model uin:(unsigned long long)uin;
-(id)getAllCircleFriendList;
-(id)getAddCircleList;
-(id)getAllCircleList;
-(id)init;
@end

@interface CircleViewController : QQSearchBaseViewController <UITableViewDelegate, UITableViewDataSource, EGORefreshTableHeaderDelegate> {
	UITableView* _tableView;
	EGORefreshTableHeaderView* _refreshHeaderView;
	NSArray* _circleArray;
}
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)egoRefreshTableHeaderDataSourceLastUpdated:(id)updated;
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
-(void)reloadDataAfterDelay;
-(void)onResponseCircleListNotification:(id)notification;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQGroupAssistantGuideView : UIView <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _tableView;
	NSMutableArray* _dataSource;
@private
	UIViewController* _superViewController;
}
@property(assign, nonatomic) UIViewController* superViewController;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)dealloc;
-(void)closeGroupAssistantGuideView;
-(void)iKnowBtnPressed:(id)pressed;
-(void)settingsBtnPressed:(id)pressed;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQSimpleTipsView : UIView {
	UILabel* _textLabel;
	UIImageView* _bgImageView;
	UIImageView* _contentImageView;
}
-(void)dealloc;
-(void)hide;
-(void)show;
-(void)hideWithFadeAnimation;
-(void)showWithFadeAnimation;
-(void)hideWithMoveAnimation;
-(void)showWithMoveAnimation;
-(void)layoutSubviews;
-(id)initWithImage:(id)image;
-(id)initWithText:(id)text;
@end

@interface CircleFriendModel : NSObject {
	unsigned long long _uin;
	unsigned _circleId;
	unsigned _closeness;
	unsigned _degree;
	unsigned _commFriendNum;
	NSString* _name;
	NSString* _nickname;
	NSString* _remark;
	BOOL _isNew;
	NSRange _matchRange;
	BOOL _isMatchUIN;
	BOOL _isMatchRealNick;
	NSString* _realNickName;
	BOOL _isRemark;
@private
	unsigned long long uin;
}
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* remark;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) BOOL isNew;
@property(assign, nonatomic) unsigned commFriendNum;
@property(assign, nonatomic) unsigned degree;
@property(assign, nonatomic) unsigned closeness;
@property(assign, nonatomic) unsigned circleId;
@property(assign, nonatomic) unsigned long long uin;
-(void).cxx_destruct;
-(BOOL)isMatchString:(id)string;
-(BOOL)isString:(id)string matchString:(id)string2;
-(id)getDisplayName;
@end

@interface CircleModel : NSObject {
	unsigned _circleId;
	unsigned _sortId;
	unsigned _friendNum;
	unsigned _oneDegreeNum;
	unsigned _twoDegreeNum;
	unsigned _newOneDegreeNum;
	unsigned _newTwoDegreeNum;
	NSString* _name;
	NSString* _remark;
	BOOL _isNew;
	NSMutableArray* _friendArray;
}
@property(retain, nonatomic) NSMutableArray* friendArray;
@property(retain, nonatomic) NSString* remark;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) BOOL isNew;
@property(assign, nonatomic) unsigned newTwoDegreeNum;
@property(assign, nonatomic) unsigned newOneDegreeNum;
@property(assign, nonatomic) unsigned twoDegreeNum;
@property(assign, nonatomic) unsigned oneDegreeNum;
@property(assign, nonatomic) unsigned friendNum;
@property(assign, nonatomic) unsigned sortId;
@property(assign, nonatomic) unsigned circleId;
-(void).cxx_destruct;
-(id)getDisplayName;
-(id)init;
@end

@interface QQC2CMsgChannel : NSObject <IEngineDispatchDelegate> {
	NSMutableDictionary* _msgHandleDelegateDic;
}
+(id)getInstance;
-(id)getMsgHandlerType:(unsigned)type c2cCmd:(unsigned)cmd;
-(id)handleMsgResp:(PbGetMsgResp*)resp cmd:(const char*)cmd;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(id)parseUinPairMsg:(UinPairMsg*)msg;
-(id)parseMsg:(Msg*)msg;
-(id)peekMsgSyncInfo:(UinPairMsg*)info;
-(void)unregisterC2CMsgHandleDelegate:(id)delegate;
-(BOOL)registerC2CMsgHandleDelegate:(id)delegate handleDelegate:(id)delegate2;
-(void)dealloc;
-(id)init;
@end

@interface QQF2FMsgHandler : QQBaseC2CMsgHandler {
}
+(id)getInstance;
-(id)handleMsg:(Msg*)msg;
-(int)isDownPttFinish:(long long)finish withUin:(long long)uin UUid:(id)uid;
-(long long)GetPttTime:(id)time;
-(id)peekPttContent:(Ptt)content msgType:(int*)type;
-(void)dealloc;
-(id)init;
@end

@interface QQTempSessionHandler : QQBaseC2CMsgHandler {
	id<IC2CMsgObserver> _wpaHandler;
	id<IC2CMsgObserver> _publicPlatformHandler;
	id<IC2CMsgObserver> _groupTmpHandler;
	id<IC2CMsgObserver> _discussTmpHandler;
}
+(id)getInstance;
-(id)handleMsg:(Msg*)msg;
-(void)dealloc;
-(id)init;
@end

@interface C2CMsgHandlerFactory : NSObject {
}
-(void)dealloc;
-(id)init;
@end

@interface C2CPicTransferManager : NSObject <IHttpStateDelegate> {
	NSMutableArray* _c2cPicUploadReqs;
	NSMutableArray* _c2cPicDownloadReqs;
	NSMutableArray* _c2cPicUploadHttps;
	NSMutableArray* _c2cPicDownloadHttps;
}
+(id)getInstance;
-(BOOL)isC2CPicExist:(id)exist appShareId:(long long)anId isDownSelf:(BOOL)aSelf getPicSizeType:(int)type uuid:(id)uuid;
-(void)cancelC2CPicDownload:(int)download;
-(void)cancelC2CPicUpload:(int)upload;
-(float)getPicDownloadProcess:(id)process getPicSizeType:(int)type;
-(float)getPicUploadProcess:(id)process;
-(void)onHttpState:(int)state transferType:(int)type success:(BOOL)success error:(id)error;
-(void)notifyC2CPicDownloadReqResult:(BOOL)result seq:(int)seq error:(id)error resp:(id)resp;
-(void)downloadC2CPic:(id)pic;
-(void)notifyC2CPicUploadReqResult:(BOOL)result seq:(int)seq error:(id)error resp:(id)resp;
-(void)uploadC2CPic:(id)pic;
-(void)onForceOffLineNotify;
-(void)changeAccount:(id)account;
-(void)dealloc;
-(id)init;
-(BOOL)isUploadRetry:(int)retry;
-(BOOL)isDownloadRetry:(int)retry;
-(BOOL)handleUploadResp:(id)resp req:(id)req;
-(BOOL)handleDownloadResp:(id)resp req:(id)req;
-(void)handleOriginalDownloadCache:(id)cache;
-(void)handleRepeatDownload:(id)download;
-(id)serverUUidConvertToClient:(id)client;
-(id)clientUUidConvertToServer:(id)server;
-(void)updateDownloadPicSate:(id)sate success:(BOOL)success error:(id)error;
-(void)updateUploadPicSate:(id)sate success:(BOOL)success error:(id)error isSecondsTransfer:(BOOL)transfer;
-(void)retrySendDownloadReq:(id)req;
-(void)retrySendUploadReq:(id)req;
-(void)removeDownloadHttpWithSessionId:(id)sessionId;
-(void)removeUploadHttpWithSessionId:(id)sessionId;
-(id)getDownloadHttpWithSessionId:(id)sessionId;
-(id)getUploadHttpWithSessionId:(id)sessionId;
-(void)removeDownloadReqWithSeq:(id)seq;
-(void)removeUploadReqWithSeq:(id)seq;
-(id)getDownloadReqWithSeq:(id)seq;
-(id)getUploadReqWithSeq:(id)seq;
-(int)sendC2CPicMsg:(id)msg fileResid:(id)resid oldUuid:(id)uuid;
-(int)sendC2CPicDownloadReq:(id)req;
-(int)sendC2CPicUploadReq:(id)req;
@end

@interface C2CPicUploadReqInfo : NSObject {
	long long _fromUin;
	long long _toUin;
	long long _fileId;
	NSString* _fileName;
	NSData* _fileMd5;
	long long _fileSize;
	NSString* _uuid;
	NSDictionary* _shareAppInfo;
	int _bodyType;
	QQMessageModel* _messageModel;
}
@property(retain, nonatomic) QQMessageModel* messageModel;
@property(assign, nonatomic) int bodyType;
@property(retain, nonatomic) NSDictionary* shareAppInfo;
@property(retain, nonatomic) NSString* uuid;
@property(assign, nonatomic) long long fileSize;
@property(retain, nonatomic) NSData* fileMd5;
@property(retain, nonatomic) NSString* fileName;
@property(assign, nonatomic) long long fileId;
@property(assign, nonatomic) long long toUin;
@property(assign, nonatomic) long long fromUin;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface C2CPicUploadResp : NSObject {
	long long _fileId;
	unsigned _result;
	NSString* _errorMsg;
	bool _isExist;
	NSString* _fileResid;
	NSString* _uKey;
	long long _upOffset;
	NSMutableArray* _ipAndPort;
	NSString* _oldUuid;
}
@property(retain, nonatomic) NSString* oldUuid;
@property(retain, nonatomic) NSMutableArray* ipAndPort;
@property(assign, nonatomic) long long upOffset;
@property(retain, nonatomic) NSString* uKey;
@property(retain, nonatomic) NSString* fileResid;
@property(assign, nonatomic) bool isExist;
@property(retain, nonatomic) NSString* errorMsg;
@property(assign, nonatomic) unsigned result;
@property(assign, nonatomic) long long fileId;
-(void)dealloc;
-(id)init;
@end

@interface C2CPicDownloadReqInfo : NSObject {
	long long _fromUin;
	long long _toUin;
	NSString* _fileResid;
	int _getPicSizeType;
	int _msgId;
	int _msgTime;
	int _richSourceType;
	long long _appShareId;
	int _accostType;
	long long _groupUin;
}
@property(assign, nonatomic) long long groupUin;
@property(assign, nonatomic) int accostType;
@property(assign, nonatomic) long long appShareId;
@property(assign, nonatomic) int richSourceType;
@property(assign, nonatomic) int msgTime;
@property(assign, nonatomic) int msgId;
@property(assign, nonatomic) int getPicSizeType;
@property(retain, nonatomic) NSString* fileResid;
@property(assign, nonatomic) long long toUin;
@property(assign, nonatomic) long long fromUin;
-(id)description;
-(void)dealloc;
-(id)initWithQQMessageModel:(id)qqmessageModel getPicSizeType:(int)type;
-(id)init;
@end

@interface C2CPicDownloadResp : NSObject {
	NSString* _fileResid;
	unsigned _result;
	NSString* _errorMsg;
	NSData* _fileMd5;
	NSString* _thumbUrlSuffix;
	NSString* _originalUrlSuffix;
	NSMutableArray* _ipAndPort;
	NSString* _domainName;
}
@property(retain, nonatomic) NSString* domainName;
@property(retain, nonatomic) NSMutableArray* ipAndPort;
@property(retain, nonatomic) NSString* originalUrlSuffix;
@property(retain, nonatomic) NSString* thumbUrlSuffix;
@property(retain, nonatomic) NSData* fileMd5;
@property(retain, nonatomic) NSString* errorMsg;
@property(assign, nonatomic) unsigned result;
@property(retain, nonatomic) NSString* fileResid;
-(void)dealloc;
-(id)init;
@end

@interface GroupPicDownloadReqInfo : NSObject <NSCopying> {
	long long _fromUin;
	long long _groupCode;
	BOOL _isDiscuss;
	int _msgType;
	NSString* _uuid;
	int _getPicSizeType;
	int _msgId;
	int _msgTime;
	long long _appShareId;
	long long _msgSeq;
@private
	NSString* dlurl;
	int seq;
	int retryCount;
	NSString* currentUin;
}
@property(retain, nonatomic) NSString* currentUin;
@property(assign, nonatomic) long long msgSeq;
@property(assign, nonatomic) int retryCount;
@property(assign, nonatomic) int seq;
@property(retain, nonatomic) NSString* dlurl;
@property(assign, nonatomic) long long appShareId;
@property(assign, nonatomic) int msgTime;
@property(assign, nonatomic) int msgId;
@property(assign, nonatomic) int getPicSizeType;
@property(retain, nonatomic) NSString* uuid;
@property(assign, nonatomic) int msgType;
@property(assign, nonatomic) BOOL isDiscuss;
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) long long fromUin;
-(id)description;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithQQMessageModel:(id)qqmessageModel getPicSizeType:(int)type;
-(id)init;
@end

@interface QQSystemNotifyHandler : QQBaseC2CMsgHandler {
}
+(id)getInstance;
-(void)getFriendListDelay;
-(id)handleMsg:(Msg*)msg;
-(void)dealloc;
-(id)init;
@end

@interface FriendsRecommendViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, IQFriRecommendEngineObserver, FriRecommendCellDelegate> {
	UITableView* _tableView;
	NSMutableArray* _dataSource;
	id<IQFriRecommendEngine> _FriRecommendEngine;
	AddFriendSendMessageViewController* _addFriendVC;
}
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriendVC;
-(void)NotifyOperationSuccess:(id)success;
-(void)NotifyOperationFailed:(id)failed;
-(void)actionViewProfile:(id)profile;
-(void)actionAddFriend:(id)aFriend;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)popSelf;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionClearList;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)loadView;
-(void)reloadData;
-(void)deleteItemByUin:(unsigned long long)uin;
-(void)deleteItemByPhoneCode:(id)code;
-(void)onRefreshFriendListFinished;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)init;
@end

@interface FriRecommendServiceImpl : NSObject <IFriRecommendService> {
}
+(void)destroyInstance;
+(id)getInstance;
-(id)getRecommendNameByUin:(unsigned long long)uin;
-(id)getRecommendNameByPhoneCode:(id)code;
-(id)getNewUnReadRecommendData;
-(int)getUnReadRecommendCount;
-(id)getRecommendList;
-(void)CreateFriRecommendController:(id)controller;
@end

@interface QQBaseC2CMsgHandler : NSObject <IC2CMsgObserver> {
}
-(id)handleMsg:(Msg*)msg;
-(BOOL)parseAppShareInfo:(AppShareInfo)info toModel:(id)model;
-(BOOL)parseMsgBody:(MsgBody)body msgType:(int)type c2cCmd:(int)cmd toModel:(id)model;
-(BOOL)parseContentHead:(ContentHead)head toModel:(id)model;
-(BOOL)parseMsgHead:(MsgHead)head toModel:(id)model;
-(id)peekOldOfflinePttAndPic:(NotOnlineFile)pic msgType:(int*)type;
-(id)peekPttContent:(Ptt)content msgType:(int*)type;
-(id)parseTransElement:(const TransElem*)element msgType:(int*)type;
-(id)peekTextContent:(const RichText*)content contentType:(int*)type;
-(int)peekMsgAccType:(MsgHead)type;
-(void)dealloc;
-(id)init;
@end

@interface FriModel : QQModel {
	NSString* _name;
	NSString* _nickName;
	long long _uin;
	int _recommendTime;
	int _status;
	int _relationclose;
	NSMutableArray* _fieldInfo;
	int _sourceID;
}
@property(assign, nonatomic) int sourceID;
@property(copy, nonatomic) NSMutableArray* fieldInfo;
@property(assign, nonatomic) int relationclose;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) int recommendTime;
@property(assign, nonatomic) long long uin;
@property(retain, nonatomic) NSString* nickName;
@property(retain, nonatomic) NSString* name;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithFriModel:(id)friModel;
-(id)init;
@end

@interface FriRecommendModel : QQModel {
	int _modelType;
	ContactModel* _cModel;
	FriModel* _fModel;
	NSString* _wording;
	NSString* _source;
}
@property(retain, nonatomic) NSString* source;
@property(retain, nonatomic) NSString* wording;
@property(retain, nonatomic) FriModel* fModel;
@property(retain, nonatomic) ContactModel* cModel;
@property(assign) int modelType;
-(long long)getUin;
-(id)getName;
-(id)getNickName;
-(int)getRecommendTime;
-(id)initWithType:(int)type;
-(void)dealloc;
-(int)compareByTimeAsc:(id)asc;
@end

@interface FriRecommendCellView : UITableViewCell {
	FriRecommendModel* _model;
	QQAsynHeadImageView* _flipView;
	UILabel* _nameLabel;
	UILabel* _content;
	UILabel* _tips;
	UIButton* _addButton;
@private
	id<FriRecommendCellDelegate> cellDelegate;
}
@property(assign, nonatomic) id<FriRecommendCellDelegate> cellDelegate;
@property(assign, nonatomic) FriRecommendModel* model;
-(void)addButtonPress:(id)press;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)cancelDeleteCell;
-(void)beginDeleteCell;
@end

@interface QQC2CMsgTableOperation : QQMessageTableBase {
@private
	NSString* tableName;
}
@property(copy, nonatomic) NSString* tableName;
-(BOOL)deleteAccostMsgsWithUin:(id)uin inDb:(id)db;
-(id)getC2CMessageModel:(id)model msgSeq:(long long)seq beginTime:(int)time endTime:(int)time4 inDb:(id)db;
-(id)getC2CMessageModel:(id)model msgRandom:(long long)random msgSeq:(long long)seq inDb:(id)db;
-(id)getC2CMessage:(id)message startTime:(int)time endTime:(int)time3 inDb:(id)db;
-(id)getC2CMessage:(id)message startTime:(int)time startID:(int)anId endTime:(int)time4 endID:(int)anId5 inDb:(id)db;
-(id)getC2CMessage:(id)message readTime:(int)time msgID:(int)anId count:(int)count inDb:(id)db;
-(id)getC2CMessage:(id)message readTime:(int)time count:(int)count inDb:(id)db;
-(id)getC2CMessage:(id)message readTime:(int)time faultTime:(int)time3 count:(int)count inDb:(id)db;
-(BOOL)updateMessages:(id)messages withTime:(double)time ofUin:(id)uin inDb:(id)db;
-(id)failedMessagesAfterTime:(double)time ofUin:(id)uin inDb:(id)db;
-(double)maxValidMessageTimeOfUin:(id)uin inDb:(id)db;
-(double)maxMessageTimeOfUin:(id)uin inDb:(id)db;
-(BOOL)deleteMessage:(id)message inDb:(id)db;
-(BOOL)removeMessage:(id)message inDb:(id)db;
-(BOOL)updatePttPlaceholder:(int)placeholder inDb:(id)db;
-(id)QQFriendMessageAsc:(id)asc MsgID:(int)anId msgCount:(int)count smallerThan:(int)than inDb:(id)db;
-(id)QQFriendMessage:(id)message MsgID:(int)anId msgCount:(int)count inDb:(id)db;
-(id)QQSecretMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page inDb:(id)db;
-(void)updateSecretMessage:(id)message toUin:(id)uin secretContent:(id)content secretReadtime:(unsigned long long)readtime captureCount:(int)count toStatus:(int)status fromStatus:(int)status7 inDb:(id)db;
-(void)updateSecretfileKeyByContent:(id)content content:(id)content2 uin:(id)uin inDb:(id)db;
-(void)updateSecretfilefromstatusByContent:(id)content fromUin:(id)uin toUin:(id)uin3 status:(int)status inDb:(id)db;
-(void)updateSecretfiletostatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status inDb:(id)db;
-(void)updateSecretfilefromstatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status inDb:(id)db;
-(id)getSecretfileModelWithContent:(id)content toUin:(id)uin content:(id)content3 inDb:(id)db;
-(id)getSecretfileModelWithKey:(id)key toUin:(id)uin key:(id)key3 inDb:(id)db;
-(BOOL)updateC2CRichMsgState:(int)state msgTime:(int)time state:(int)state3 inDb:(id)db;
-(void)SetC2CMsgSendStateWithMsgID:(id)msgID state:(int)state inDb:(id)db;
-(id)GetC2CMsgWithTargetUin:(id)targetUin WithType:(int)type beforeOrEqualTime:(long long)time limitCount:(unsigned)count inDb:(id)db;
-(void)updatePlaceholderFileMsg:(int)msg content:(id)content inDb:(id)db;
-(BOOL)updateSendGroupTmpPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 inDb:(id)db;
-(void)updateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 inDb:(id)db;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forContent:(id)content inDb:(id)db;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forRead:(int)read inDb:(id)db;
-(void)transferOnlineFileToOffline:(int)offline newContent:(id)content inDb:(id)db;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId time:(int)time inDb:(id)db;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId inDb:(id)db;
-(void)updateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state inDb:(id)db;
-(void)updateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3 inDb:(id)db;
-(void)deleteQQMessageWithUin:(id)uin FromTime:(int)time toTime:(int)time3 inDb:(id)db;
-(int)QQDB_GetQQMessageCount:(id)count smallerThan:(int)than inDb:(id)db;
-(int)QQDB_GetQQMessageCount:(id)count inDb:(id)db;
-(void)messageFlagVisiable:(long long)visiable visiable:(unsigned)visiable2 inDb:(id)db;
-(id)QQMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page inDb:(id)db;
-(void)deleteMsgWithUin:(id)uin msgID:(int)anId inDb:(id)db;
-(id)getC2CRichMsg:(id)msg beginTime:(unsigned)time endTime:(unsigned)time3 inDb:(id)db;
-(void)updateSystemMsg:(id)msg inDb:(id)db;
-(void)updataMsg:(long long)msg msgTime:(int)time withAppShareID:(int)appShareID inDb:(id)db;
-(BOOL)getPTTPICFileFromDB:(id)db len:(int)len type:(int)type inDb:(id)db4;
-(void)removeAllAccostMessagesInDb:(id)db;
-(id)getLatestSayHelloMessageInDb:(id)db;
-(id)getAccostMessages:(int)messages inDb:(id)db;
-(id)extractLatestSayHelloMsg:(id)msg;
-(id)extractAccostMessage:(id)message;
-(void)upOfflineFileMsg:(id)msg time:(int)time forRead:(int)read inDb:(id)db;
-(void)upOffLineFileMsg:(id)msg time:(long long)time forRead:(int)read inDb:(id)db;
-(void)upOffLineFileMsg:(id)msg msgId:(int)anId forRead:(int)read inDb:(id)db;
-(void)clearAllMessageInDb:(id)db;
-(void)UpdateVoiceMsgUUid:(int)uid UUid:(id)uid2 inDb:(id)db;
-(id)GetVoiceModelOffLineList:(id)list msgTime:(long long)time inDb:(id)db;
-(id)GetVoiceModelList:(id)list msgId:(id)anId inDb:(id)db;
-(id)extractVoiceModel:(id)model msgID:(id)anId;
-(void)upDatePttMsg:(id)msg inDb:(id)db;
-(void)setPttMsg:(id)msg withStatus:(int)status inDb:(id)db;
-(void)setQQFailStateWithUUid:(id)uuid inDb:(id)db;
-(void)setQQReadStateWithUUid:(id)uuid inDb:(id)db;
-(void)updateMessageUuid:(id)uuid inDb:(id)db;
-(void)upVideMsg:(double)msg read:(int)read content:(id)content inDb:(id)db;
-(void)messageFlagForRecent:(id)recent inDb:(id)db;
-(id)QQMessageWithUin:(id)uin timeStamp:(int)stamp inDb:(id)db;
-(int)getRoamMsgKeyTime:(id)time inOut:(int)anOut msgTime:(unsigned)time3 inDb:(id)db;
-(void)updateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time inDb:(id)db;
-(id)QQUnRoamMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size inDb:(id)db;
-(id)QQRomaMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size inDb:(id)db;
-(id)QQMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page inDb:(id)db;
-(id)QQMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3 inDb:(id)db;
-(id)systemMessages:(unsigned)messages inDb:(id)db;
-(void)setNoOperForUin:(id)uin inDb:(id)db;
-(void)setReadForUin:(id)uin inDb:(id)db;
-(void)updateQQMessagefromUIN:(long long)uin toUIN:(long long)uin2 inDb:(id)db;
-(void)deleteMsgsWithUin:(id)uin inDb:(id)db;
-(void)deleteMsgWithContentArr:(id)contentArr MemUin:(id)uin inDb:(id)db;
-(BOOL)selectQQMsgByTime:(id)time inDb:(id)db;
-(void)insertQQMsg:(id)msg inDb:(id)db;
-(void)insertQQMsgArray:(id)array inDb:(id)db;
-(void)doExtraInsert:(id)insert InDb:(id)db;
-(void)updateSecretFileContent:(id)content toDb:(id)db;
-(void)_insertQQMessageModel:(id)model toDb:(id)db;
-(id)getInsertSql;
-(id)getRecentHelloMsg:(id)msg;
-(id)getRecentMsg:(id)msg;
-(id)getRecentC2CMsg:(id)msg;
-(id)commonC2CMsgFromQueryResult:(id)queryResult UsedMsgContent:(id)content;
-(id)commonC2CMsgFromQueryResult:(id)queryResult;
-(void)updateTable:(id)table inDb:(id)db;
-(void)createindex:(id)createindex inDb:(id)db;
-(void)createTableWithName:(id)name withVersion:(int)version inDb:(id)db;
-(void)createC2CMsgTable:(id)table withVersion:(int)version;
-(void)createC2CMsgTable:(id)table;
-(id)getCommonQuerySQLWithCondition:(id)condition;
-(void)setSecretFileField:(id)field startIndex:(int)index resultSet:(id)set;
@end

@interface HttpTaskManager : NSObject {
	NSMutableArray* _uploadTaskQueue;
	NSMutableArray* _downloadTaskQueue;
	int _httpSessionId;
}
+(id)getInstance;
-(id)getDownloadObj:(int)obj;
-(id)getUploadObj:(int)obj;
-(float)getDownloadProcess:(int)process;
-(float)getUploadProcess:(int)process;
-(void)loopPlanUploadTask;
-(void)loopPlanDownloadTask;
-(int)getHttpSessiontId;
-(void)notifyUploadTaskFinish;
-(void)notifyDownloadTaskFinish;
-(int)startC2CPttDownloadTask:(id)task fromUin:(long long)uin toUin:(long long)uin3 msgId:(int)anId msgTime:(int)time downloadUrl:(id)url delegate:(id)delegate;
-(int)startGroupPttDownloadTask:(id)task groupCode:(long long)code isDiscussGroup:(BOOL)group fromUin:(long long)uin msgId:(int)anId msgSeq:(long long)seq msgTime:(int)time downloadUrl:(id)url delegate:(id)delegate;
-(int)startGroupPicDownloadTask:(id)task groupCode:(long long)code isDiscussGroup:(BOOL)group fromUin:(long long)uin msgId:(int)anId msgTime:(int)time getPicSizeType:(int)type downloadUrl:(id)url appShareId:(long long)anId9 delegate:(id)delegate;
-(int)startC2CPicDownloadTask:(id)task fromUin:(long long)uin toUin:(long long)uin3 msgId:(int)anId msgTime:(int)time getPicSizeType:(int)type downloadUrls:(id)urls appShareId:(long long)anId8 delegate:(id)delegate;
-(int)startC2CPicUploadTask:(id)task filePathName:(id)name fromUin:(long long)uin toUin:(long long)uin4 msgId:(int)anId msgTime:(int)time uploadUrls:(id)urls appShareInfo:(id)info bodyType:(int)type delegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface EmojiStore : NSObject <IEngineDispatchDelegate> {
	NSString* _uin;
	NSOperationQueue* _operationQueue;
	NSMutableDictionary* _packageInfoDict;
	NSMutableDictionary* _reqSSODict;
	NSMutableArray* _historyEmojis;
	BOOL _needSyncHistoryToLocal;
	BOOL _createDirIfNotExist;
	NSMutableDictionary* _packageDownloadQueues;
	id<INetworkFlowStatService> _netFlowStatService;
}
@property(readonly, assign, nonatomic) NSArray* historyEmojis;
@property(readonly, assign, nonatomic) NSArray* packages;
-(void)dealloc;
-(id)appendGifTag:(id)tag;
-(unsigned long long)getFreeDiskSpace;
-(id)teaDecryptECB:(id)ecb keyData:(id)data;
-(id)teaDecryptECB:(id)ecb key:(id)key;
-(void)onApplicationDidEnterBackground:(id)onApplication;
-(void)onNetworkStateChanged:(id)changed;
-(void)cleanEmojiHistoryInfos;
-(void)syncEmojiHistoryInfosWhenPackageRemoved:(id)removed;
-(void)syncEmojiHistoryInfosToLocal;
-(void)removeEmojiHistoryInfo:(id)info;
-(void)addEmojiHistoryInfo:(id)info;
-(void)initEmojiHistoryInfos;
-(id)emojiHistoryFilePath;
-(id)sendSynchronousRequestWithIpList:(id)ipList urlFormat:(id)format returningResponse:(id*)response error:(id*)error retryCount:(int)count;
-(id)sendSynchronousRequest:(id)request returningResponse:(id*)response error:(id*)error retryCount:(int)count;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(BOOL)sendPbBuffer:(ReqBody*)buffer cmd:(id)cmd context:(id)context;
-(void)responseOnPackageRemoved:(const RspBody*)removed ret:(int)ret context:(id)context;
-(void)requestPackageRemoved:(id)removed;
-(void)packageKeysDidReceived:(id)packageKeys;
-(void)responseOnPackageEmojiKeys:(const RspBody*)keys ret:(int)ret context:(id)context;
-(void)requestPackageEmojiKeys:(id)keys;
-(id)parseEmojiPakcageInfo:(const SubCmd0x2RspFetchTab_TabInfo*)info;
-(void)packageInfosDidReceived:(id)packageInfos;
-(void)responseOnPackageInfos:(const RspBody*)infos ret:(int)ret context:(id)context;
-(BOOL)requestPackageInfosBeginWithSegment:(int)segment context:(id)context;
-(BOOL)requestPackageInfosBeginWithSegment:(int)segment;
-(void)requestPackageInfos:(BOOL)infos;
-(void)sortEmojiPackages:(id)packages;
-(BOOL)removeEmojiPackageDir:(id)dir;
-(void)removeEmojiPackage:(id)package;
-(void)addEmojiPackage:(id)package;
-(BOOL)requestEmojiThumbnailDownload:(id)download forType:(int)type completion:(id)completion;
-(id)getEmojiThumbnailLocalPath:(id)path;
-(BOOL)requestEmojiDownload:(id)download key:(id)key packageId:(unsigned)anId completion:(id)completion;
-(BOOL)requestEmojiDownload:(id)download key:(id)key completion:(id)completion;
-(id)getEmojiLocalPath:(id)path key:(id)key packageId:(unsigned)anId;
-(void)emojiDownloadFailed:(id)failed statusCode:(int)code error:(id)error;
-(void)emojiDidDownload:(id)emoji;
-(void)reportDownloadEventForRDM:(id)rdm;
-(void)updatePackageStatusWhenDownloadEnd:(id)end;
-(void)updatePackageDownloadProgress:(id)progress;
-(void)downloadEmoji:(id)emoji package:(id)package;
-(void)stopDownloadsForAllPackages;
-(void)stopDownloadEmojisInPackage:(id)package;
-(BOOL)doStartDownloadEmojisInPackage:(id)package;
-(void)startDownloadEmojisInPackage:(id)package;
-(void)resumeIncompletedPackagesDownload;
-(BOOL)startDownloadImage:(id)image forType:(int)type completion:(id)completion;
-(id)imagePathForType:(int)type;
-(void)emojiPackageDownloadFailed:(id)failed statusCode:(int)code error:(id)error;
-(void)emojiPackageDidDownload:(id)emojiPackage jsonValue:(id)value;
-(void)dowloadEmojiPackageJson:(id)json;
-(id)emojiRecvDirPath;
-(id)emojiRecvThumbFilePath:(id)path;
-(id)emojiRecvFilePath:(id)path;
-(id)emojiFilePath:(id)path package:(unsigned)package;
-(id)emojiPackageFilePath:(unsigned)path;
-(id)emojiPackageDirPath:(id)path;
-(id)emojiPackageDirPathWithId:(unsigned)anId;
-(id)emojiStoreConfigFilePath;
-(id)emojiStoreDirPath;
-(void)setTimestamp:(unsigned long)timestamp;
-(unsigned long)timestamp;
-(id)getEmojiPackageWithId:(unsigned)anId;
-(id)findEmojiPackageInfo:(unsigned)info;
-(void)syncPackageInfosToLocal;
-(void)initPackageInfos;
-(id)initWithUin:(id)uin;
-(id)init;
@end

@interface EmojiSSORequest : NSObject {
@private
	int _seq;
	id _context;
}
@property(retain, nonatomic) id context;
@property(assign, nonatomic) int seq;
-(void)dealloc;
@end

@interface EmojiDownloadOperation : NSBlockOperation {
@private
	NSMutableArray* _callbacks;
	id _context;
}
@property(readonly, assign, nonatomic) NSMutableArray* callbacks;
@property(retain, nonatomic) id context;
-(void)dealloc;
@end

@interface AppVersionService : NSObject <IAppVsersionService> {
@private
	NSString* m_currentVsersion;
	NSString* m_lastVersion;
	BOOL _isNewInstallation;
	BOOL _isCoverInstallation;
}
@property(retain, nonatomic) NSString* lastVersion;
@property(retain, nonatomic) NSString* currentVersion;
-(float)lastVersionNum;
-(float)currentVersionNum;
-(id)lastAppVersion;
-(id)currentAppVersion;
-(BOOL)isCoverInstallation;
-(BOOL)isNewInstallation;
-(void)dealloc;
-(id)init;
-(void)judge;
-(void)log;
-(void)setLastModifyTime;
-(id)getCurrentTime;
-(id)getLastModifyTime;
-(void)set;
-(id)getCurrentVersionFromUserDefaults;
-(id)getCurrentVersion;
@end

@interface QSerializeBuffService : NSObject <ISerializeBuffService> {
	NSMutableArray* _mSenderQueue;
	NSString* _uin;
	BOOL _bIsLoginForTheFirstTime;
}
@property(retain, nonatomic) NSString* uin;
+(id)getInstance;
-(id)getSendingMsgCacheFileName:(id)name;
-(void)saveSendingMsgToFile:(id)file;
-(void)loadSendingMsgFromFile:(id)file;
-(void)clear;
-(void)removeMessageByUin:(id)uin;
-(BOOL)cacheSendMsg:(id)msg;
-(int)sendMessage:(id)message;
-(void)onAccountLogout:(id)logout;
-(void)onAccountLogin:(id)login;
-(void)dealloc;
-(void)doInit;
@end

@interface QQSerializeBuffModel : QQMessageModel {
	int _seqid;
	NSString* _sendcmd;
	NSData* _pwup;
	long long _toUin;
	unsigned short _sendingmsgSeq;
	unsigned _msgRandom;
	int _sendtype;
}
@property(assign, nonatomic) unsigned msgRandom;
@property(assign, nonatomic) unsigned short sendingmsgSeq;
@property(assign, nonatomic) int sendtype;
@property(assign, nonatomic) long long toUin;
@property(retain, nonatomic) NSData* pwup;
@property(retain, nonatomic) NSString* sendcmd;
@property(assign, nonatomic) int seqid;
-(void)dealloc;
-(id)init;
@end

@interface QQAlbumService : NSObject <IAlbumService> {
	ALAssetsLibrary* _library;
	QQLockDictionary* _assetsDict;
@private
	NSMutableArray* _albumList;
	NSMutableArray* _photoListInFirstAlbum;
	NSString* _persistentID;
	BOOL _isAlbumChanged;
}
+(id)getInstance;
-(void)writeImageToSavedPhotosAlbum:(CGImageRef)savedPhotosAlbum metadata:(id)metadata completionBlock:(id)block;
-(void)writeImageDataToSavedPhotosAlbum:(id)savedPhotosAlbum metadata:(id)metadata completionBlock:(id)block;
-(void)asyncCompressAndSaveImages:(id)images uuids:(id)uuids compressCallback:(id)callback finishCallback:(id)callback4;
-(CGImageRef)createCroppedImage:(CGImageRef)image withXMPString:(id)xmpstring;
-(void)asyncCacheImage:(id)image finishCallback:(id)callback;
-(void)assetForURL:(id)url resultBlock:(id)block failureBlock:(id)block3;
-(void)assetsGroup:(id)group enumerateAssetsUsingBlock:(id)block;
-(void)enumerateGroupsWithTypes:(unsigned)types usingBlock:(id)block failureBlock:(id)block3;
-(void)handleUIApplicationDidBecomeActiveNotification:(id)handleUIApplication;
-(void)handleALAssetsLibraryChangedNotification:(id)notification;
-(void)papareFirstGroup:(id)group;
-(void)papareAssetsLibraryAfterDelay;
-(void)papareAssetsLibrary;
-(id)defaultAssetsLibrary;
-(void)dealloc;
-(id)init;
@end

@interface QQMessageDispatcher : NSObject {
}
+(void)dispatchMessages:(id)messages;
+(void)HandleDispatchQQVoiceMsg:(id)msg;
+(id)HandleDispatchQQRichMsg:(id)msg;
+(void)startDownloadImage:(id)image fromUin:(unsigned long long)uin toUin:(unsigned long long)uin3;
+(id)GetTopC2CChatViewUin;
@end

@interface QQMessageViewCell : QQBaseTableViewCell {
	QQAsynHeadImageView* iconButton;
	UILabel* nickLabel;
	UIImageView* _iconUserImageView;
	UIImageView* _bottomLineImageView;
	QQRecentLabel* detailLabel;
	UIImageView* sendStateView;
	UILabel* timeLabel;
	QQMessageReadTagView* readTagView;
	UILabel* numLabel;
	UIImageView* _msgContextImageView;
	UIImageView* _iconMsgFailedTips;
	UIImageView* _tencentIcon;
	NSString* _nickname;
	NSString* uin;
	BOOL group;
	BOOL _isEditModel;
	BOOL _status;
	BOOL _selfDialog;
	int _onlineStatus;
	QQRecentMessageModel* _model;
	UILongPressGestureRecognizer* _longPressGesture;
	BOOL lastEditState;
	BOOL _noTimeLabel;
	BOOL _simpleType;
	BOOL _lastHighlighted;
	BOOL _isDrafting;
	BOOL _isPending;
	BOOL _isSupportLongPressGesture;
	BOOL _sendState;
	UIImageView* _leftTopIcon;
	UIImageView* _draftIcon;
	UIImageView* _pendingIcon;
	id<QQMessageViewCellDelegate> _delegate;
}
@property(assign, nonatomic) id<QQMessageViewCellDelegate> delegate;
@property(assign) BOOL selfDialog;
@property(assign, nonatomic) BOOL simpleType;
@property(assign) BOOL noTimeLabel;
@property(retain, nonatomic) UIImageView* pendingIcon;
@property(retain, nonatomic) UIImageView* draftIcon;
@property(retain, nonatomic) QQMessageReadTagView* readTagView;
@property(retain, nonatomic) QQRecentMessageModel* model;
@property(retain, nonatomic) UIImageView* leftTopIcon;
@property(retain, nonatomic) UIImageView* iconMsgFailedTips;
@property(assign, nonatomic) BOOL isSupportLongPressGesture;
@property(assign, nonatomic) BOOL isPending;
@property(assign, nonatomic) BOOL isDrafting;
@property(assign, nonatomic) BOOL status;
@property(assign, nonatomic) BOOL isEditModel;
@property(retain, nonatomic) NSString* uin;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)hideMenuWithAnimation:(BOOL)animation;
-(void)makeMePending:(id)pending;
-(void)showPendingMenu;
-(void)layoutSubviews;
-(BOOL)isVideoMessage:(id)message;
-(void)setC2CData:(id)data;
-(void)setGroupData:(id)data;
-(void)SetSendTab:(id)tab;
-(void)CancelSendImag:(CGRect)imag;
-(void)SetSendImag:(BOOL)imag Frame:(CGRect)frame;
-(id)cutString:(id)string maxWidth:(short)width;
-(void)setData:(id)data;
-(void)layoutModelResultFromSession:(id)session label:(id)label;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQSystemMessageCell : QQMessageViewCell {
	NSString* _fromUin;
	NSString* _groupCode;
}
@property(retain, nonatomic) NSString* groupCode;
@property(retain, nonatomic) NSString* fromUin;
-(void)setData:(id)data;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQAccostMessageCell : QQSystemMessageCell {
}
-(void)setData:(id)data;
@end

@interface QQFriendRecommendCell : QQSystemMessageCell {
}
-(void)setData:(id)data;
@end

@interface QQClusterMessageCell : QQMessageViewCell {
	UIImageView* _topStickHintView;
}
-(void)setData:(id)data;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQSynchronQZoneMessageCell : QQMessageViewCell {
}
-(void)SwitchStatus;
-(void)setData:(id)data;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQPublicAccountMessageCell : QQMessageViewCell {
	CGRect _nickLabelInitRect;
}
-(void)setC2CData:(id)data;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQEncounterChatViewController : QQBaseChatViewController <QIMTextInputDelegate, UIAlertViewDelegate, MQDyanmicMenuDelegate, QC2CRoamMessageDelegate> {
	int _accostType;
	NSString* _encounterName;
	NSString* _mobilePhone;
	NSString* _groupCode;
	NSString* _discussCode;
	BOOL _tableDataLoaded;
	AddFriendSendMessageViewController* _addFriend;
@private
	QQPublicPlatformCustomMenu* _ppMenu;
	NSMutableDictionary* _menuActionArray;
}
@property(retain, nonatomic) NSMutableDictionary* menuActionArray;
@property(retain, nonatomic) QQPublicPlatformCustomMenu* ppMenu;
@property(retain, nonatomic) AddFriendSendMessageViewController* addFriend;
-(void)handleC2CRoamMessage:(id)message msgList:(id)list;
-(void)showLbsTips;
-(void)onMenuActionRequestEnd:(id)end;
-(void)onMenuActionFailed:(id)failed msg:(id)msg seq:(id)seq;
-(void)onMenuActionSuccessed:(id)successed seq:(id)seq;
-(void)onMenuActionStartProcess:(id)process seq:(id)seq;
-(void)handleMenuAction:(id)action;
-(void)QQPPPopBtnClick:(id)click param:(id)param;
-(void)QQPPBarBtnClick:(id)click param:(id)param;
-(void)QQPPBarBtnChangeBtnClick:(id)click;
-(void)QQPPChangeBtnClick:(id)click;
-(void)addPublicPlatformMenu;
-(BOOL)isPublicAccount;
-(void)tableViewDidScroll;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)didSelectSystemNotificationCell:(id)cell;
-(BOOL)sendLocationMsg:(id)msg showText:(id)text;
-(BOOL)sendTextMsg:(id)msg showText:(id)text;
-(void)restoreData;
-(void)onRecvSvrMsg:(id)msg;
-(void)actionAlertCancel;
-(void)actionNeedReloadTableData;
-(void)onGetUserInfo:(id)info;
-(void)actionProfile;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)headIconTouch:(id)touch;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
-(BOOL)growingTextViewInputReturnKey:(id)key;
-(BOOL)QQTextField:(id)field didSendText:(id)text showText:(id)text3;
-(void)sendReadConfirm;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)showTalkBar;
-(void)showRecordBtnFristRun;
-(void)viewDidUnload;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithUIN:(id)uin discussCode:(id)code;
-(id)initWithUIN:(id)uin groupCode:(id)code;
-(id)initWithMobilePhone:(id)mobilePhone;
-(id)initWithUIN:(id)uin accostType:(int)type;
-(void)tableViewReSendImage:(id)image;
-(void)SendGIFImage:(id)image data:(id)data bodyType:(int)type;
-(id)startUploadGrpImage:(id)image;
-(void)sendOfflinePicture:(id)picture;
-(void)prepareUpload:(id)upload fileName:(id)name bodyType:(int)type;
-(void)uploadImage:(id)image;
-(id)prepareUploadMultiImage:(id)image bodyType:(int)type;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
-(void)sendMarketFaceMsg:(id)msg;
-(BOOL)doSendTextMsg:(id)msg showText:(id)text isLocation:(BOOL)location;
-(id)getHeaderTitle;
-(void)updateEncounterName;
-(void)doInit;
@end

@interface CommonPacketSendResultHandler : NSObject {
}
+(void)notifyMsgSentResult:(id)result result:(int)result2;
@end

@interface OfflineImgInfo : NSObject {
	NSString* _fileResid;
	NSString* _fileName;
	unsigned _fileLen;
	int _imgType;
	NSData* _fileMd5;
	NSString* _oldUuid;
}
@property(retain, nonatomic) NSString* oldUuid;
@property(retain, nonatomic) NSData* fileMd5;
@property(assign, nonatomic) int imgType;
@property(assign, nonatomic) unsigned fileLen;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSString* fileResid;
-(void)dealloc;
-(id)init;
@end

@interface QQMsgSenderUtil : NSObject {
}
+(int)SendPbMsg:(PbSendMsgReq*)msg SendingModel:(id)model Licence:(id)licence;
+(bool)GetSyncCookiesOfCurAccount:(char**)curAccount ResultLen:(unsigned*)len;
@end

@interface QQMsgSvcSendMsgRespHandlerMgr : NSObject <IEngineDispatchDelegate> {
	NSMutableDictionary* _dictHandler;
}
+(id)GetInstance;
-(void)onMsfPacketStateWithNoErr:(id)noErr;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(BOOL)AddHandler:(id)handler ForSendMsgSeq:(unsigned long)sendMsgSeq;
-(id)init;
@end

@interface RichTextPbMsgGenerator : NSObject {
}
+(id)getSendMsgUserInfo:(int)info toUin:(long long)uin;
+(RichText*)GenMarketFaceInfo:(id)info;
+(RichText*)GenNotOnlineImgText:(id)text;
+(RichText*)GenText:(id)text;
+(void)SetValueToEleOfRichText:(Elem*)richText SplitedEle:(CSplitedEleWithEmo*)ele;
@end

@interface QQGroupTmpMessageSender : QQPbMsgSenderBase {
}
+(id)GetInstance;
-(BOOL)OnReceiveSendMsgRespOfSendSeq:(unsigned long)sendSeq ResultCode:(unsigned long)code ErrMsg:(const basic_string<char, std::char_traits<char>, std::allocator<char> >*)msg ReqSendTimeFromServer:(unsigned long)server;
-(int)sendPbMessage:(id)message;
-(int)SendMarketFaceMsg:(id)msg toUin:(long long)uin groupUin:(long long)uin3 msgTime:(int)time pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId msgSeq:(unsigned short)seq9 msgRandom:(unsigned short)random;
-(int)SendImgMsg:(id)msg toUin:(long long)uin groupUin:(long long)uin3 msgTime:(int)time pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId msgSeq:(unsigned short)seq9 msgRandom:(unsigned short)random;
-(int)SendMsg:(id)msg toUin:(long long)uin groupUin:(long long)uin3 msgTime:(int)time pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId DisplayText:(id)text;
-(id)SendingModelToUin:(long long)uin TimeStamp:(int)stamp MsgId:(int)anId pkgNum:(BOOL)num divSeq:(short)seq DispContent:(id)content;
-(RoutingHead*)GenRoutingHeadOfSendMsgReq:(unsigned long long)sendMsgReq GroupUin:(unsigned long long)uin;
@end

@interface ChatSelectPhotoBottomBar : UIView {
	NSMutableArray* _thumbViewList;
	int _selectedIndex;
	UIButton* _addsButton;
	UIImageView* _selectedView;
	UIScrollView* _scrollView;
	id<ChatSelectPhotoBottomBarDelegate> _delegate;
}
@property(assign, nonatomic) id<ChatSelectPhotoBottomBarDelegate> delegate;
-(CGSize)contentSizeForScrollView;
-(CGRect)frameForSelectedView;
-(CGRect)frameForThumbViewAtIndex:(int)index;
-(CGRect)frameForAddsButton;
-(CGRect)frameForScrollView;
-(void)layoutSubviews;
-(void)deletePhotoAtIndex:(unsigned)index;
-(void)setSelectedIndex:(int)index;
-(void)onThumbButtonClick:(id)click;
-(void)onAddsButtonClick:(id)click;
-(void)onSendButtonClick:(id)click;
-(void)setImageList:(id)list;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQChatSelectPhotoViewController : PhotoBrowserBaseViewContoller <ChatSelectPhotoBottomBarDelegate, QQMultiImagePickerControllerDelegate> {
	UIButton* _deleteButton;
	NSMutableArray* _selectList;
	NSMutableArray* _thumbImageList;
	ChatSelectPhotoBottomBar* _bottomBar;
}
-(void)QQMultiImagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)didScrollToPage:(int)page;
-(void)chatSelectPhotoBottomBarSendButtonDidClick;
-(void)chatSelectPhotoBottomBarClickPhotoAtIndex:(int)index;
-(void)chatSelectPhotoBottomBarAddButtonDidClick;
-(void)resetControlStateBySelectList;
-(void)resetButtonState;
-(void)onDeleteButtonClick:(id)click;
-(void)onRightButtonClick:(id)click;
-(void)onLeftButtonClick:(id)click;
-(id)getToolbar;
-(void)setPhotoAssets:(id)assets;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)initWithAssetData:(id)assetData;
@end

@interface MsgType0x210 : NSObject {
	unsigned uSubMsgType;
	unsigned uMsgTime;
	unsigned shMsgSeq;
	MsgType0x210SubMsgType0x2* stMsgInfo0x2;
	MsgType0x210SubMsgType0xb* stMsgInfo0xb;
	MsgType0x210SubMsgType0xa* stMsgInfo0xa;
	MsgType0x210SubMsgType0xe* stMsgInfo0xe;
	MsgType0x210SubMsgType0x13* stMsgInfo0x13;
	MsgType0x210SubMsgType0x17* stMsgInfo0x17;
	MsgType0x210SubMsgType0x20* stMsgInfo0x20;
	MsgType0x210SubMsgType0x1d* stMsgInfo0x1d;
	MsgType0x210SubMsgType0x24* stMsgInfo0x24;
}
@property(retain, nonatomic) MsgType0x210SubMsgType0x24* stMsgInfo0x24;
@property(retain, nonatomic) MsgType0x210SubMsgType0x1d* stMsgInfo0x1d;
@property(retain, nonatomic) MsgType0x210SubMsgType0x20* stMsgInfo0x20;
@property(retain, nonatomic) MsgType0x210SubMsgType0x17* stMsgInfo0x17;
@property(retain, nonatomic) MsgType0x210SubMsgType0x13* stMsgInfo0x13;
@property(retain, nonatomic) MsgType0x210SubMsgType0xe* stMsgInfo0xe;
@property(retain, nonatomic) MsgType0x210SubMsgType0xa* stMsgInfo0xa;
@property(retain, nonatomic) MsgType0x210SubMsgType0xb* stMsgInfo0xb;
@property(retain, nonatomic) MsgType0x210SubMsgType0x2* stMsgInfo0x2;
@property(assign, nonatomic) unsigned shMsgSeq;
@property(assign, nonatomic) unsigned uMsgTime;
@property(assign, nonatomic) unsigned uSubMsgType;
+(id)parseFromMsgBodyPack:(MsgType0x210*)msgBodyPack;
-(void)dealloc;
@end

@interface MsgType0x210SubMsgType0x2 : NSObject {
	unsigned uSrcAppId;
	unsigned uSrcInstId;
	unsigned uDstAppId;
	unsigned uDstInstId;
	long long uDstUin;
	NSString* strFileName;
	NSString* strFileIndex;
	NSData* strFileMd5;
	NSData* strFileKey;
	unsigned uServerIp;
	unsigned uServerPort;
	long long uFileLen;
	long long uSessionId;
	NSData* strOriginfile_md5;
	unsigned uOriginfiletype;
	unsigned uSeq;
@private
	long long lFileLen;
	long long lSessionId;
}
@property(assign, nonatomic) unsigned uSeq;
@property(assign, nonatomic) unsigned uOriginfiletype;
@property(retain, nonatomic) NSData* strOriginfile_md5;
@property(assign, nonatomic) long long lSessionId;
@property(assign, nonatomic) long long lFileLen;
@property(assign, nonatomic) unsigned uServerPort;
@property(assign, nonatomic) unsigned uServerIp;
@property(retain, nonatomic) NSData* strFileKey;
@property(retain, nonatomic) NSData* strFileMd5;
@property(retain, nonatomic) NSString* strFileIndex;
@property(retain, nonatomic) NSString* strFileName;
@property(assign, nonatomic) long long uDstUin;
@property(assign, nonatomic) unsigned uDstInstId;
@property(assign, nonatomic) unsigned uDstAppId;
@property(assign, nonatomic) unsigned uSrcInstId;
@property(assign, nonatomic) unsigned uSrcAppId;
+(id)parseFromMsgBodyPack:(MsgType0x210SubMsgType0x2*)msgBodyPack;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface MsgType0x210SubMsgType0xa : NSObject {
	unsigned uSrcAppId;
	unsigned uSrcInstId;
	unsigned uDstAppId;
	unsigned uDstInstId;
	long long uDstUin;
	unsigned uType;
	unsigned uServerIp;
	unsigned uServerPort;
	NSData* vUrlNotify;
	NSData* vTokenKey;
	long uFileLen;
	NSString* strFileName;
	NSData* vMd5;
	long long lSessionId;
	NSData* strOriginfile_md5;
	unsigned uOriginfiletype;
	unsigned uSeq;
}
@property(assign, nonatomic) unsigned uSeq;
@property(assign, nonatomic) unsigned uOriginfiletype;
@property(retain, nonatomic) NSData* strOriginfile_md5;
@property(assign, nonatomic) long long lSessionId;
@property(retain, nonatomic) NSData* vMd5;
@property(retain, nonatomic) NSString* strFileName;
@property(assign, nonatomic) long uFileLen;
@property(retain, nonatomic) NSData* vTokenKey;
@property(retain, nonatomic) NSData* vUrlNotify;
@property(assign, nonatomic) unsigned uServerPort;
@property(assign, nonatomic) unsigned uServerIp;
@property(assign, nonatomic) unsigned uType;
@property(assign, nonatomic) long long uDstUin;
@property(assign, nonatomic) unsigned uDstInstId;
@property(assign, nonatomic) unsigned uDstAppId;
@property(assign, nonatomic) unsigned uSrcInstId;
@property(assign, nonatomic) unsigned uSrcAppId;
+(id)parseFromMsgBodyPack:(MsgType0x210SubMsgType0xa*)msgBodyPack;
-(id)description;
-(void)dealloc;
@end

@interface MsgType0x210SubMsgType0xb : NSObject {
	unsigned uSrcAppId;
	unsigned uSrcInstId;
	unsigned uDstAppId;
	unsigned uDstInstId;
	long long uDstUin;
	unsigned uFileCount;
	long long lSessionid;
}
@property(assign, nonatomic) long long lSessionid;
@property(assign, nonatomic) unsigned uFileCount;
@property(assign, nonatomic) long long uDstUin;
@property(assign, nonatomic) unsigned uDstInstId;
@property(assign, nonatomic) unsigned uDstAppId;
@property(assign, nonatomic) unsigned uSrcInstId;
@property(assign, nonatomic) unsigned uSrcAppId;
+(id)parseFromMsgBodyPack:(MsgType0x210SubMsgType0xb*)msgBodyPack;
@end

@interface MsgType0x210SubMsgType0xe : NSObject {
	unsigned srcAppId;
	unsigned srcInstId;
	unsigned dstAppId;
	unsigned dstInstId;
	long long dstUin;
	long long sessionid;
	unsigned operate;
	unsigned seq;
	unsigned code;
	NSString* strMsg;
}
@property(retain, nonatomic) NSString* strMsg;
@property(assign) unsigned code;
@property(assign) unsigned seq;
@property(assign) unsigned operate;
@property(assign) long long sessionid;
@property(assign) long long dstUin;
@property(assign) unsigned dstInstId;
@property(assign) unsigned dstAppId;
@property(assign) unsigned srcInstId;
@property(assign) unsigned srcAppId;
+(id)parseFromMsgBodyPack:(MsgType0x210SubMsgType0xe*)msgBodyPack;
-(id)description;
-(void)dealloc;
@end

@interface MsgType0x210SubMsgType0x13MsgItem : NSObject {
	unsigned type;
	NSString* text;
}
@property(retain, nonatomic) NSString* text;
@property(assign) unsigned type;
-(void)dealloc;
@end

@interface QQDataTextMsg : NSObject {
	NSMutableArray* msgItems;
}
@property(retain, nonatomic) NSMutableArray* msgItems;
-(void)dealloc;
-(id)init;
@end

@interface MsgType0x210SubMsgType0x13 : NSObject {
	unsigned srcAppId;
	unsigned srcInstId;
	unsigned dstAppId;
	unsigned dstInstId;
	long long dstUin;
	long long sessionid;
	unsigned size;
	unsigned index;
	unsigned type;
	NSObject* data;
}
@property(retain, nonatomic) NSObject* data;
@property(assign) unsigned type;
@property(assign) unsigned index;
@property(assign) unsigned size;
@property(assign) long long sessionid;
@property(assign) long long dstUin;
@property(assign) unsigned dstInstId;
@property(assign) unsigned dstAppId;
@property(assign) unsigned srcInstId;
@property(assign) unsigned srcAppId;
+(id)parseFromMsgBodyPack:(MsgType0x210SubMsgType0x13*)msgBodyPack;
-(void)dealloc;
@end

@interface AddGroup : NSObject {
	unsigned dwGroupID;
	unsigned dwSortID;
	NSString* strGroupName;
}
@property(retain, nonatomic) NSString* strGroupName;
@property(assign, nonatomic) unsigned dwSortID;
@property(assign, nonatomic) unsigned dwGroupID;
-(void)dealloc;
@end

@interface DelGroup : NSObject {
	unsigned dwGroupID;
}
@property(assign, nonatomic) unsigned dwGroupID;
@end

@interface ModGroupName : NSObject {
	unsigned dwGroupID;
	NSString* strGroupName;
}
@property(retain, nonatomic) NSString* strGroupName;
@property(assign, nonatomic) unsigned dwGroupID;
-(void)dealloc;
@end

@interface GroupSort : NSObject {
	unsigned dwGroupID;
	unsigned dwSortID;
}
@property(assign, nonatomic) unsigned dwSortID;
@property(assign, nonatomic) unsigned dwGroupID;
@end

@interface ModGroupSort : NSObject {
	NSMutableArray* vMsgGroupSort;
}
@property(readonly, assign, nonatomic) NSMutableArray* vMsgGroupSort;
-(void)dealloc;
-(id)init;
@end

@interface FriendGroup : NSObject {
	long long dwFuin;
	NSMutableArray* vOldGroupID;
	NSMutableArray* vNewGroupID;
}
@property(readonly, assign, nonatomic) NSMutableArray* vNewGroupID;
@property(readonly, assign, nonatomic) NSMutableArray* vOldGroupID;
@property(assign, nonatomic) long long dwFuin;
-(void)dealloc;
-(id)init;
@end

@interface ModFriendGroup : NSObject {
	NSMutableArray* vMsgFrdGroup;
}
@property(readonly, assign, nonatomic) NSMutableArray* vMsgFrdGroup;
-(void)dealloc;
-(id)init;
@end

@interface MsgType0x210SubMsgType0x17 : NSObject {
	unsigned dwOpType;
	AddGroup* stAddGroup;
	DelGroup* stDelGroup;
	ModGroupName* stModGroupName;
	ModGroupSort* stModGroupSort;
	ModFriendGroup* stModFriendGroup;
}
@property(retain, nonatomic) ModFriendGroup* stModFriendGroup;
@property(retain, nonatomic) ModGroupSort* stModGroupSort;
@property(retain, nonatomic) ModGroupName* stModGroupName;
@property(retain, nonatomic) DelGroup* stDelGroup;
@property(retain, nonatomic) AddGroup* stAddGroup;
@property(assign, nonatomic) unsigned dwOpType;
+(void)parseMsgType0x210SubMsgType0x17:(MsgType0x210SubMsgType0x17*)a17;
-(void)dealloc;
@end

@interface MsgType0x210SubMsgType0x20 : NSObject {
	unsigned dwOpType;
	unsigned dwType;
	long long dwUin;
	NSString* strRemaek;
}
@property(retain, nonatomic) NSString* strRemaek;
@property(assign, nonatomic) long long dwUin;
@property(assign, nonatomic) unsigned dwType;
@property(assign, nonatomic) unsigned dwOpType;
+(void)parseMsgType0x210SubMsgType0x20:(MsgType0x210SubMsgType0x20*)a20;
-(void)dealloc;
@end

@interface MsgType0x210SubMsgType0x1d : NSObject {
	unsigned dwOpType;
	long long dwUin;
	unsigned dwID;
	NSString* strValue;
}
@property(retain, nonatomic) NSString* strValue;
@property(assign, nonatomic) unsigned dwID;
@property(assign, nonatomic) long long dwUin;
@property(assign, nonatomic) unsigned dwOpType;
+(void)parseMsgType0x210SubMsgType0x1d:(MsgType0x210SubMsgType0x1d*)d;
-(void)dealloc;
@end

@interface FaceChangedNotify : NSObject {
	long long dwFromUin;
	unsigned dwTimeStamp;
	NSString* strMsg;
}
@property(retain, nonatomic) NSString* strMsg;
@property(assign, nonatomic) unsigned dwTimeStamp;
@property(assign, nonatomic) long long dwFromUin;
-(void)dealloc;
@end

@interface LongNickChangedNotify : NSObject {
	long long dwFromUin;
	unsigned dwUinSeq;
	unsigned short wMsgLen;
	NSString* strMsg;
}
@property(retain, nonatomic) NSString* strMsg;
@property(assign, nonatomic) unsigned short wMsgLen;
@property(assign, nonatomic) unsigned dwUinSeq;
@property(assign, nonatomic) long long dwFromUin;
-(void)dealloc;
@end

@interface MsgType0x210SubMsgType0x24 : NSObject {
	NSArray* _pluginFeedCountArray;
}
@property(retain, nonatomic) NSArray* pluginFeedCountArray;
+(id)parseFromMsgBodyPack:(MsgType0x210SubMsgType0x24*)msgBodyPack;
@end

@interface CircleListCellView : UIView {
	CircleModel* _circleModel;
	UILabel* _titleLable;
	UIImageView* _arrowIconView;
	UIImageView* _newIconView;
}
@property(retain, nonatomic) CircleModel* circleModel;
-(void).cxx_destruct;
-(void)updateCircleModel:(id)model;
-(void)layoutView;
-(id)initWithFrame:(CGRect)frame circleModel:(id)model;
@end

@interface CircleSearchLogicEngine : QQSearchBaseLogicEngine {
	NSMutableArray* _searchResult;
}
+(id)getInstance;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)relationSearchResultDidSelectRow:(id)relationSearchResult;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)reloadSearchTableData:(id)data filterType:(int)type;
-(void)reloadCircleDataAfterDelay;
-(void)reloadCircleData;
-(void)dealloc;
-(id)init;
@end

@interface QQUITableViewCell : UITableViewCell <AIOCellLongPressDelegate> {
}
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQDiscussTmpMessageSender : QQPbMsgSenderBase {
}
+(id)GetInstance;
-(BOOL)OnReceiveSendMsgRespOfSendSeq:(unsigned long)sendSeq ResultCode:(unsigned long)code ErrMsg:(const basic_string<char, std::char_traits<char>, std::allocator<char> >*)msg ReqSendTimeFromServer:(unsigned long)server;
-(int)SendMarketFaceMsg:(id)msg toUin:(long long)uin discussUin:(long long)uin3 msgTime:(int)time pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId msgSeq:(unsigned short)seq9 msgRandom:(unsigned short)random;
-(int)SendImgMsg:(id)msg toUin:(long long)uin discussUin:(long long)uin3 msgTime:(int)time pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId;
-(int)SendMsg:(id)msg toUin:(long long)uin discussUin:(long long)uin3 msgTime:(int)time pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId DisplayText:(id)text;
-(id)SendingModelToUin:(long long)uin TimeStamp:(int)stamp MsgId:(int)anId pkgNum:(BOOL)num divSeq:(short)seq DispContent:(id)content;
-(RoutingHead*)GenRoutingHeadOfSendMsgReq:(unsigned long long)sendMsgReq DiscussUin:(unsigned long long)uin;
@end

@interface AvatarGuideEngine : NSObject {
	int _sessionAvatarID;
	int _sessionVerifyID;
	BOOL _isAvialable;
}
@property(assign, nonatomic) BOOL isAvialable;
+(id)instance;
-(void)onUploadAvatarCallback:(id)callback;
-(void)verifyCodeNotify:(id)notify;
-(void)modifyQQHeadNotify:(id)notify;
-(void)requestUploadAvatar:(id)avatar;
-(void)removeGuidingCountFile;
-(BOOL)saveGuidingCountFilePath:(int)path withUIN:(long long)uin;
-(int)loadGuidingCountFilePath:(long long)path;
-(id)guidingCountFilePath;
-(BOOL)isGuidingCountFileExist;
-(void)handleGuidingCount:(BOOL)count;
-(BOOL)isAvatarGuideNeeded;
-(void)onHeadInfoNotification:(id)notification;
-(void)dealloc;
-(id)init;
@end

@interface EmojiPackageInfo : NSObject <NSCoding> {
	NSMutableArray* _emojis;
@private
	float _progress;
	int _status;
	NSString* _name;
	int _errorCode;
	unsigned long long _totalSize;
	unsigned long _flags;
	int _wordingId;
	unsigned long _expireTime;
	double _elapse;
	int _statusFailedCode;
	unsigned long _packageId;
	NSMutableArray* _downloadingEmojis;
	NSString* _uin;
	BOOL _needRecovery;
	int _emojiType;
}
@property(assign, nonatomic) double elapse;
@property(assign, nonatomic) int statusFailedCode;
@property(assign, nonatomic) int emojiType;
@property(assign, nonatomic) int errorCode;
@property(assign, nonatomic) unsigned long long totalSize;
@property(readonly, assign, nonatomic) UIImage* grayThumbnail;
@property(readonly, assign, nonatomic) UIImage* thumbnail;
@property(readonly, assign, nonatomic) UIImage* preview;
@property(assign, nonatomic) BOOL needRecovery;
@property(readonly, assign, nonatomic) NSMutableArray* downloadingEmojis;
@property(readonly, assign, nonatomic) NSString* filepath;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) int status;
@property(readonly, assign, nonatomic) NSArray* emojis;
@property(assign, nonatomic) int wordingId;
@property(assign, nonatomic) unsigned long flags;
@property(assign, nonatomic) unsigned long expireTime;
@property(assign, nonatomic) unsigned long packageId;
@property(copy, nonatomic) NSString* name;
@property(copy, nonatomic) NSString* uin;
-(void)dealloc;
-(void)syncEmojisToLocal;
-(void)addEmoji:(id)emoji;
-(id)description;
-(id)imageNameForType:(int)type;
-(void)saveImage:(id)image forType:(int)type;
-(id)emojisFilePath;
-(BOOL)isEqual:(id)equal;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

@interface EmojiInfo : NSObject <NSCoding> {
@private
	NSString* _key;
	NSString* _name;
	NSString* _emojiId;
	unsigned long _packageId;
	NSString* _uin;
	BOOL _isRecv;
}
@property(assign, nonatomic) BOOL isRecv;
@property(readonly, assign, nonatomic) BOOL downloaded;
@property(readonly, assign, nonatomic) NSString* filepath;
@property(copy, nonatomic) NSString* key;
@property(copy, nonatomic) NSString* name;
@property(copy, nonatomic) NSString* emojiId;
@property(assign, nonatomic) unsigned long packageId;
@property(copy, nonatomic) NSString* uin;
-(void)dealloc;
-(id)description;
-(id)downloadURL;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@interface EmojiStoreManager : NSObject <IIncrUpdateDelegate, IEngineDispatchDelegate> {
	NSString* _currentUin;
	NSMutableDictionary* _stores;
	NSMutableArray* _emojiIpList;
	NSMutableDictionary* _ssoSeqDict;
}
+(id)GetInstance;
-(void)dealloc;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)setSSOSeq:(int)seq forUin:(id)uin;
-(void)test;
-(void)setEmojiPrimaryIp:(id)ip;
-(void)setEmojiIpList:(id)list;
-(id)emojiIpList;
-(void)onAccountLogOut:(id)anOut;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)notifyRespPBBuffer:(const void*)buffer size:(int)size result:(int)result;
-(void)getReqPBBuffer:(char**)buffer buffEnd:(char**)end;
-(void)requestUpdate;
-(id)storeForCurrentUin;
-(id)storeWithUin:(id)uin;
-(id)init;
-(id)_init;
@end

@interface CircleFriendListCellView : UIView {
	CircleFriendModel* _circleFriendModel;
	UILabel* _titleLable;
	UIImageView* _arrowIconView;
	UIImageView* _newIconView;
}
@property(retain, nonatomic) CircleFriendModel* circleFriendModel;
-(void).cxx_destruct;
-(void)updateCircleFriendModel:(id)model;
-(void)layoutView;
-(id)initWithFrame:(CGRect)frame circleFriendModel:(id)model;
@end

@interface CircleFriendViewController : QQSearchBaseViewController <UITableViewDelegate, UITableViewDataSource, EGORefreshTableHeaderDelegate> {
	UITableView* _tableView;
	EGORefreshTableHeaderView* _refreshHeaderView;
	CircleModel* _circleModel;
	NSArray* _circleFriendArray;
}
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)egoRefreshTableHeaderDataSourceLastUpdated:(id)updated;
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
-(void)reloadDataAfterDelay;
-(void)onResponseCircleListNotification:(id)notification;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithModel:(id)model;
@end

@interface QQC2CMsgTable_Async : QQC2CMsgTable {
}
-(int)asyncDeleteMessage:(id)message userdata:(id)userdata callback:(id)callback;
-(int)asyncupdateSecretfiletostatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status userdata:(id)userdata callback:(id)callback;
-(int)asyncupdateSecretfilefromstatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status userdata:(id)userdata callback:(id)callback;
-(int)asyncupdateSecretfilefromstatusByContent:(id)content fromUin:(id)uin toUin:(id)uin3 status:(int)status userdata:(id)userdata callback:(id)callback;
-(int)asyncupdateSecretfileKeyByContent:(id)content content:(id)content2 userdata:(id)userdata callback:(id)callback;
-(int)asyncupdateSecretMessage:(id)message toUin:(id)uin secretContent:(id)content secretReadtime:(unsigned long long)readtime captureCount:(int)count toStatus:(int)status fromStatus:(int)status7 userdata:(id)userdata callback:(id)callback;
-(int)asyncQQSecretMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page userdata:(id)userdata callback:(id)callback;
-(void)asyncGetC2CMsgWithTargetUin:(id)targetUin withType:(int)type beforeOrEqualTime:(long long)time limitCount:(unsigned)count userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdatePttPlaceholder:(int)placeholder userdata:(id)userdata callback:(id)callback;
-(int)asyncQQFriendMessage:(id)message MsgID:(int)anId msgCount:(int)count userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateC2CRichMsgState:(int)state msgTime:(int)time state:(int)state3 userdata:(id)userdata callback:(id)callback;
-(int)asyncSetC2CMsgSendStateWithMsgID:(id)msgID state:(int)state userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdatePlaceholderFileMsg:(int)msg content:(id)content userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateSendGroupTmpPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 userdata:(id)userdata callback:(id)callback;
-(int)asyncTransferOnlineFileToOffline:(int)offline newContent:(id)content userdata:(id)userdata callback:(id)callback;
-(int)asyncGetOnlineFileMsg:(id)msg fileId:(unsigned)anId time:(int)time userdata:(id)userdata callback:(id)callback;
-(int)asyncGetOnlineFileMsg:(id)msg fileId:(unsigned)anId userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3 userdata:(id)userdata callback:(id)callback;
-(int)asyncMessageFlagVisiable:(long long)visiable visiable:(unsigned)visiable2 userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteMsgWithUin:(id)uin msgID:(int)anId userdata:(id)userdata callback:(id)callback;
-(int)asyncGetC2CRichMsg:(id)msg beginTime:(unsigned)time endTime:(unsigned)time3 userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdataMsg:(long long)msg msgTime:(int)time withAppShareID:(int)appShareID userdata:(id)userdata callback:(id)callback;
-(int)asyncGetLatestSayHelloMessageWithUserdata:(id)userdata callback:(id)callback;
-(int)asyncGetAccostMessages:(int)messages userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOfflineFileMsg:(id)msg uuid:(id)uuid forContent:(id)content userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOfflineFileMsg:(id)msg uuid:(id)uuid forRead:(int)read userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOfflineFileMsg:(id)msg time:(int)time forRead:(int)read userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOffLineFileMsg:(id)msg time:(long long)time forRead:(int)read userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOffLineFileMsg:(id)msg msgId:(int)anId forRead:(int)read userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateVoiceMsgUUid:(int)uid UUid:(id)uid2 userdata:(id)userdata callback:(id)callback;
-(int)asyncGetVoiceModelOffLineLiST:(id)st msgTime:(long long)time userdata:(id)userdata callback:(id)callback;
-(int)asyncGetVoiceModelList:(id)list msgId:(id)anId userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdatePttMsg:(id)msg userdata:(id)userdata callback:(id)callback;
-(int)asyncSetPttMsg:(id)msg withStatus:(int)status userdata:(id)userdata callback:(id)callback;
-(int)asyncSetQQFailStateWithUUid:(id)uuid userdata:(id)userdata callback:(id)callback;
-(int)asyncSetQQReadStateWithUUid:(id)uuid userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateMessageUuid:(id)uuid userdata:(id)userdata callback:(id)callback;
-(int)asyncUpVideMsg:(double)msg read:(int)read content:(id)content userdata:(id)userdata callback:(id)callback;
-(int)asyncMessageFlagForRecent:(id)recent userdata:(id)userdata callback:(id)callback;
-(int)asyncGetRoamMsgKeyTime:(id)time inOut:(int)anOut msgTime:(unsigned)time3 userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time userdata:(id)userdata callback:(id)callback;
-(int)asyncQQUnRoamMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size userdata:(id)userdata callback:(id)callback;
-(int)asyncQQRomaMessageWinUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size userdata:(id)userdata callback:(id)callback;
-(int)asyncQQMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteQQMessageWithUin:(id)uin FromTime:(int)time toTime:(int)time3 userdata:(id)userdata callback:(id)callback;
-(int)asyncQQMessageWithUin:(id)uin timeStamp:(int)stamp userdata:(id)userdata callback:(id)callback;
-(int)asyncQQmessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page userdata:(id)userdata callback:(id)callback;
-(int)asyncQQMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3 userdata:(id)userdata callback:(id)callback;
-(int)asyncSystemMessages:(unsigned)messages userdata:(id)userdata callback:(id)callback;
-(int)asyncSetNoOperForUin:(id)uin userdata:(id)userdata callback:(id)callback;
-(int)asyncSetReadForUin:(id)uin userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateQQMessageFromUIN:(long long)uin toUIN:(long long)uin2 userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteMsgsWithUin:(id)uin userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteMsgWithContentArr:(id)contentArr :(id)arg2 userdata:(id)userdata callback:(id)callback;
-(int)asyncInsertQQMsg:(id)msg userdata:(id)userdata callback:(id)callback;
-(int)asyncInsertQQMsgArray:(id)array userdata:(id)userdata callback:(id)callback;
@end

@interface QQFileAssitantMsgHandler : QQBaseC2CMsgHandler {
}
+(id)getInstance;
-(id)handleMsg:(Msg*)msg;
-(void)dealloc;
-(id)init;
@end

@interface QQAssetPhoto : QQBasePhoto {
	ALAsset* _asset;
}
@property(retain, nonatomic) ALAsset* asset;
-(id)getImageRaw;
-(void)dealloc;
-(id)initWithAsset:(id)asset;
@end

@interface QQPbMsgSenderBase : NSObject <IPacketSendResultHandler, IMsgSvcSendMsgRespHandler> {
	NSString* _licence;
}
-(BOOL)OnReceiveSendMsgRespOfSendSeq:(unsigned long)sendSeq ResultCode:(unsigned long)code ErrMsg:(const basic_string<char, std::char_traits<char>, std::allocator<char> >*)msg ReqSendTimeFromServer:(unsigned long)server;
-(BOOL)handleRecivedPacket:(char*)packet bufferLength:(int)length sendingModel:(id)model;
-(void)notifyMsgSentResult:(id)result result:(int)result2;
-(int)sendPbMessage:(id)message routingHead:(RoutingHead*)head SendingModel:(id)model;
-(int)sendPbMessage:(id)message;
-(int)SendPbMarketFaceMsgToUin:(unsigned long long)uin marketfaceInfo:(id)info RoutingHead:(RoutingHead*)head pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgSeq:(unsigned)seq7 msgRandom:(unsigned)random shareAppInfo:(id)info9 SendingModel:(id)model;
-(int)SendPbNotOnLineImgTextMsgToUin:(unsigned long long)uin InfoOfOffLineImg:(id)offLineImg RoutingHead:(RoutingHead*)head pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgSeq:(unsigned)seq7 msgRandom:(unsigned)random shareAppInfo:(id)info SendingModel:(id)model;
-(int)SendPbTextMsgToUin:(unsigned long long)uin Msg:(id)msg RoutingHead:(RoutingHead*)head pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgSeq:(unsigned)seq7 msgRandom:(unsigned)random shareAppInfo:(id)info SendingModel:(id)model;
-(int)SendPbTextMsgToUin:(unsigned long long)uin Msg:(id)msg RoutingHead:(RoutingHead*)head pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq SendingModel:(id)model;
-(void)dealloc;
-(id)init;
-(MsgBody*)GetMarketFaceMsg:(id)msg;
-(MsgBody*)GenNotOnLineImgTextMsgBodyOfSendMsgReq:(id)sendMsgReq shareAppInfo:(id)info;
-(BOOL)IsRichMediaMsg:(RichText*)msg;
-(BOOL)RecordRelatedInfoForHandleDuplicateC2CMsg:(PbSendMsgReq*)handleDuplicateC2CMsg SendingModel:(id)model;
-(void)DefaultGenC2CTypeMsgRemoveDupMark:(C2C_DUPLICATE_RELATEMARK*)mark ToUin:(unsigned long long)uin;
-(void)SetC2CTypeRelatedInfoToUserInfoOfSendingModel:(id)sendingModel FromPbSendMsgReq:(PbSendMsgReq*)pbSendMsgReq;
-(void)SetC2CTypeRelatedInfoToPbSendMsgReq:(PbSendMsgReq*)pbSendMsgReq ToUin:(unsigned long long)uin msgSeq:(unsigned)seq msgRandom:(unsigned)random;
-(ContentHead*)GenContentHeadOfSendMsgReq:(unsigned)sendMsgReq PkgIndex:(unsigned)index DivSeq:(unsigned)seq;
-(AppShareInfo*)GenAppShareInfo:(id)info;
-(BOOL)IsC2CTypeMsg:(RoutingHead*)msg;
-(id)LicenceNeedForSend;
-(int)_sendPbMsgToUin:(unsigned long long)uin MsgBody:(MsgBody*)body RoutingHead:(RoutingHead*)head AppShareInfo:(AppShareInfo*)info pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq SendingModel:(id)model msgSeq:(unsigned)seq9 msgRandom:(unsigned)random;
-(int)SendPbMsgToUin:(unsigned long long)uin MsgBody:(MsgBody*)body RoutingHead:(RoutingHead*)head AppShareInfo:(AppShareInfo*)info pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq SendingModel:(id)model;
-(MsgBody*)GenTextMsgBodyOfSendMsgReq:(id)sendMsgReq;
@end

@interface QQMessageInfoModel : QQModel {
	unsigned _msgID;
	unsigned _msgSeq;
	double _time;
	unsigned _offsetY;
}
@property(assign, nonatomic) unsigned offsetY;
@property(assign, nonatomic) double time;
@property(assign, nonatomic) unsigned msgSeq;
@property(assign, nonatomic) unsigned msgID;
-(void)read;
-(void)save;
-(id)GetFileName;
-(void)dealloc;
-(id)initWithMessage:(id)message;
@end

@interface QQLargeMsgBrowserCell : UITableViewCell {
	QQDivideMessageModel* _sourceModel;
	QQTextDrawView* _drawView;
	QQChatImageView* _cellImage;
}
@property(retain, nonatomic) QQDivideMessageModel* sourceModel;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)loadGifView:(id)view withStringPath:(id)stringPath;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(CGSize)GetImageSizeForKey:(id)key;
-(id)GetImageForKey:(id)key;
-(id)GetImageInfo:(id)info;
-(void)selectedAll;
-(void)selectedRect:(CGRect)rect movePoint:(CGPoint)point;
-(CGPoint)GetMaxPoint;
-(CGPoint)GetMinPoint;
-(CGPoint)GetOffsetPoint:(CGPoint)point;
-(BOOL)GetMax:(CGPoint)max andP:(CGPoint)p;
-(void)openTouchNextResponder:(BOOL)responder;
-(void)selectedMoveTo:(CGPoint)to;
-(void)addGestures:(id)gestures;
-(void)replaceLongPressGesture:(id)gesture;
-(void)reSetEmotionDelegate:(id)delegate;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface TouchTableView : UITableView {
}
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface QQLargeInfoLineView : UIView {
	BOOL _top;
}
@property(assign, nonatomic) BOOL top;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQLargeMsgBrowserViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, QQEmotionLabelDelegate, UIActionSheetDelegate, MFMailComposeViewControllerDelegate, QQFriendSelectedViewControllerDelegate, PhotoBrowserViewControllerDelegate, UIGestureRecognizerDelegate, QQTextDrawViewDelegate> {
	QQChatCellModel* _messageModel;
	QQMessageInfoModel* _messageInfo;
	TouchTableView* _tableView;
	CGRect _startRect;
	struct {
		BOOL _selected;
		NSRange _selectedRange;
		CGRect _selectedRect;
		CGPoint _lastPoint;
		CGPoint _curPoint;
		float _minOffset;
		CGPoint _startPoint;
		CGPoint _endPoint;
		bool _startS;
		bool _endS;
		CGRect _selectedAll;
		CGPoint _selectedPoint;
		bool _scroll;
	} SelectedState;
	NSMutableArray* _divideObjects;
	QQIconView* _startV;
	QQIconView* _endV;
}
-(id).cxx_construct;
-(BOOL)isSupportRightDragToGoBack;
-(CGPoint)GetMaxTouchPoint;
-(CGPoint)GetMinTouchPoint;
-(void)touchSelectedRect:(CGRect)rect movePoint:(CGPoint)point;
-(void)touchMovePoint:(CGPoint)point;
-(void)popViewController;
-(void)didMissViewController;
-(void)showInController:(id)controller startRect:(CGRect)rect;
-(id)GetHiddenViewImage;
-(id)GetShowViewImage;
-(void)emotionLabelTouchClick:(id)click;
-(void)didFriendListSelected:(id)selected withFilePath:(id)filePath;
-(void)actionPasteString:(id)string;
-(void)actionLaunchEmail:(id)email;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)shareMessage:(id)message;
-(void)emotionLabelHandleLongPress:(id)press;
-(void)emotionLabelHandleIDNumber:(id)number;
-(void)emotionLabelHandlePhoneNumber:(id)number;
-(void)emotionLabelHandleQQNumber:(id)number;
-(void)emotionLabelHandleEmail:(id)email;
-(void)touchTap:(id)tap;
-(void)didTextDrawViewTouch:(id)touch withType:(int)type forValue:(id)value;
-(void)emotionLabelHandleUrl:(id)url;
-(void)touchImage:(id)image;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(CGPoint)GetOffsetPoint:(CGPoint)point;
-(CGRect)GetCurrentRect;
-(CGPoint)GetTouchPoint:(id)point withEvent:(id)event;
-(void)resetSelectedIconFrame;
-(void)selectedGestureAction:(id)action;
-(void)gestureTapTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)openTouchResponder:(BOOL)responder;
-(void)closeGestureRecognizer:(BOOL)recognizer;
-(void)cancelSelected:(id)selected;
-(void)copySelected:(id)selected;
-(void)clearSelectedCaches;
-(void)selectedAllLargeCell;
-(void)selectAllAction:(id)action;
-(void)selectedAllText:(id)text;
-(void)copyAll:(id)all;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)showCopyAndCancelMenuController:(CGRect)controller;
-(void)showCopyMenuController:(id)controller;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)GetGestures;
-(unsigned)GetImageHeight:(id)height;
-(unsigned)GetHeight:(id)height;
-(unsigned)GetMaxWidth;
-(void)saveLastInfo;
-(void)restoreLastInfo;
-(void)readLastInfo;
-(id)parseMessageModel:(id)model;
-(id)GetCoreTextInfo;
-(void)viewDidAppear:(BOOL)view;
-(void)restoreData;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(CGPoint)GetCenter:(CGPoint)center;
-(void)loadView;
-(id)initWithModel:(id)model;
@end

@interface AvatarProgressView : UIView {
	UIImageView* _avatarView;
	UIView* _maskView;
	UILabel* _progressLabel;
	float _progress;
}
@property(retain, nonatomic) UILabel* progressLabel;
@property(retain, nonatomic) UIView* maskView;
@property(retain, nonatomic) UIImageView* avatarView;
-(void)setAvatarProgressFinished;
-(void)setAvatarProgress:(float)progress;
-(void)setAvatarImage:(id)image;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface AvatarSettingChoosenView : UIView {
	UIImageView* _avatar;
	UIImageView* _icon;
	UILabel* _titleLabel;
}
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIImageView* icon;
@property(retain, nonatomic) UIImageView* avatar;
-(void)setLabelTitle:(id)title;
-(void)setIconImage:(id)image;
-(void)setAvatarImage:(id)image;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface AvatarSettingGuideViewController : QQViewController <UIImagePickerControllerDelegate, UINavigationControllerDelegate, QQValidCodeControllerDelegate> {
	UIButton* _btnAvatar;
	UIImageView* _bkgAvatarView;
	UIImageView* _avatarView;
	AvatarProgressView* _progressView;
	UILabel* _nickNameLabel;
	UILabel* _promptLabel;
	UIImageView* _bkgView;
	UIButton* _btnAlbumChoosen;
	UIButton* _btnPhotoTaken;
	UILabel* _promptFollowLabel;
	UIImagePickerController* _photoPicker;
	NSMutableArray* _avatarList;
	BOOL _totalDissmiss;
	QQVaildCodeController* _validCtr;
}
@property(retain, nonatomic) QQVaildCodeController* validCtr;
@property(retain, nonatomic) UIImagePickerController* photoPicker;
@property(retain, nonatomic) NSMutableArray* avatarList;
@property(retain, nonatomic) UILabel* promptFollowLabel;
@property(retain, nonatomic) UIButton* btnPhotoTaken;
@property(retain, nonatomic) UIButton* btnAlbumChoosen;
@property(retain, nonatomic) UIImageView* bkgView;
@property(retain, nonatomic) UILabel* promptLabel;
@property(retain, nonatomic) UILabel* nickNameLabel;
@property(retain, nonatomic) AvatarProgressView* progressView;
@property(retain, nonatomic) UIImageView* avatarView;
@property(retain, nonatomic) UIImageView* bkgAvatarView;
@property(retain, nonatomic) UIButton* btnAvatar;
-(void)removeAvatarUploadMask;
-(void)addAvatarUploadingMask:(id)mask;
-(void)beginUploading:(id)uploading;
-(void)onPercentageNotified:(id)notified;
-(void)onVerifyCodeNeeded:(id)needed;
-(void)onUploadAvatarSuccess:(id)success;
-(void)onUploadAvatarError:(id)error;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)showVerifyCode:(id)code;
-(void)showImagePicker;
-(void)onAvatarClicked:(id)clicked;
-(void)showCamera;
-(void)layoutSettingGuideViews;
-(void)loadView;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)init;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface CircleBigDataEngine : NSObject {
	NSString* _BigDataUrl;
	NSArray* _bigDataServerList;
	NSDictionary* _bigDataServerListDic;
	int _ipIndex;
	NSData* _sig;
	NSString* _key;
}
@property(retain, nonatomic) NSString* key;
@property(retain, nonatomic) NSData* sig;
-(void).cxx_destruct;
-(id)requestBigDate:(id)date busiType:(int)type requestDelegate:(id)delegate progressDelegate:(id)delegate4;
-(void)requestFailed;
-(id)getRecompseLink;
-(void)OnFileTransServerListUpdatedNotification;
-(void)dealloc;
-(id)init;
@end

@interface C2CDBService : NSObject <IC2CDBService> {
@private
	QQC2CMsgTable_Async* _c2cTable;
}
-(BOOL)deleteAccostMsgsWithUin:(id)uin;
-(int)asyncDeleteMessage:(id)message userdata:(id)userdata callback:(id)callback;
-(BOOL)deleteMessage:(id)message;
-(BOOL)removeMessage:(id)message;
-(BOOL)updateMessages:(id)messages withTime:(double)time ofUin:(id)uin;
-(id)failedMessagesAfterTime:(double)time ofUin:(id)uin;
-(BOOL)getPTTPICFileFromDB:(id)db len:(int)len type:(int)type uin:(id)uin;
-(void)UpdateVoiceMsgUUid:(int)uid UUid:(id)uid2 uin:(id)uin;
-(void)setQQReadStateWithUUid:(id)uuid uin:(id)uin;
-(void)updateSecretfileKeyByContent:(id)content content:(id)content2 uin:(id)uin;
-(double)maxValidMessageTimeOfUin:(id)uin;
-(double)maxMessageTimeOfUin:(id)uin;
-(void)forwardInvocation:(id)invocation;
-(int)asyncUpdateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3 userdata:(id)userdata callback:(id)callback;
-(int)asyncTransferOnlineFileToOffline:(int)offline newContent:(id)content fromUin:(id)uin msgTime:(int)time fileId:(unsigned)anId userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3 userdata:(id)userdata callback:(id)callback;
-(int)asyncUpOfflineFileMsg:(id)msg time:(int)time forRead:(int)read userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdatePttMsg:(id)msg userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteMsgWithContentArr:(id)contentArr :(id)arg2 userdata:(id)userdata callback:(id)callback;
-(int)asyncDeleteMsgsWithUin:(id)uin userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateMessageUuid:(id)uuid userdata:(id)userdata callback:(id)callback;
-(int)asyncUpdateQQMessageFromUIN:(long long)uin toUIN:(long long)uin2 userdata:(id)userdata callback:(id)callback;
-(int)asyncUpVideMsg:(double)msg read:(int)read content:(id)content userdata:(id)userdata callback:(id)callback;
-(void)updateC2CRichMsgState:(int)state msgTime:(int)time state:(int)state3 uin:(id)uin;
-(void)updatePttPlaceholder:(int)placeholder uin:(id)uin;
-(void)updatePlaceholderFileMsg:(int)msg content:(id)content uin:(id)uin;
-(void)updateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)transferOnlineFileToOffline:(int)offline newContent:(id)content fromUin:(id)uin msgTime:(int)time fileId:(unsigned)anId;
-(void)updateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state;
-(void)updateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3;
-(void)upOfflineFileMsg:(id)msg time:(int)time forRead:(int)read;
-(void)upDatePttMsg:(id)msg;
-(void)setQQFailStateWithUUid:(id)uuid uin:(id)uin;
-(void)deleteMsgWithContent:(id)content forUin:(id)uin;
-(void)deleteMsgsWithUin:(id)uin;
-(void)updateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time;
-(id)QQRomaMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size;
-(void)updateMessageUuid:(id)uuid;
-(void)updateQQMessagefromUIN:(long long)uin toUIN:(long long)uin2;
-(BOOL)batchInsertReceivedMessages:(id)messages;
-(BOOL)batchInsertSendMessages:(id)messages;
-(BOOL)insertSendMessage:(id)message;
-(void)messageFlagVisiable:(long long)visiable visiable:(unsigned)visiable2 uin:(id)uin;
-(void)insertHistoryQQMessage:(id)message;
-(void)upVideMsg:(double)msg read:(int)read content:(id)content uin:(id)uin;
-(id)c2cTable;
-(void)dealloc;
@end

@interface QQOfflineFileHandler : QQBaseC2CMsgHandler {
}
+(id)getInstance;
-(id)handle0xa9msg:(Msg*)msg;
-(id)handleMsg:(Msg*)msg;
-(void)dealloc;
-(id)init;
@end

@interface QQWPAMsgSender : QQPbMsgSenderBase {
}
+(id)GetInstance;
-(BOOL)OnReceiveSendMsgRespOfSendSeq:(unsigned long)sendSeq ResultCode:(unsigned long)code ErrMsg:(const basic_string<char, std::char_traits<char>, std::allocator<char> >*)msg ReqSendTimeFromServer:(unsigned long)server;
-(int)sendPbMessage:(id)message;
-(int)SendMarketFaceMsg:(id)msg toUin:(long long)uin msgTime:(int)time pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId msgSeq:(unsigned)seq8 msgRandom:(unsigned)random;
-(int)SendImgMsg:(id)msg toUin:(long long)uin msgTime:(int)time pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId msgSeq:(unsigned)seq8 msgRandom:(unsigned)random;
-(int)SendMsg:(id)msg toUin:(long long)uin msgTime:(int)time pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgID:(int)anId DisplayText:(id)text;
-(RoutingHead*)GenRoutingHeadOfSendMsgReq:(unsigned long long)sendMsgReq;
-(id)SendingModelToUin:(long long)uin TimeStamp:(int)stamp MsgId:(int)anId pkgNum:(BOOL)num divSeq:(short)seq DispContent:(id)content;
-(WPATmp*)GenPassiveReplyWPATmpToUin:(unsigned long long)uin SeviceType:(unsigned long)type Sig:(id)sig;
-(WPATmp*)GenInitiativeSendWPATmpToUin:(unsigned long long)uin;
@end

@interface QQPublicPlatformSender : QQWPAMsgSender {
}
+(id)GetInstance;
-(id)SendingModelToUin:(long long)uin TimeStamp:(int)stamp MsgId:(int)anId pkgNum:(BOOL)num divSeq:(short)seq DispContent:(id)content;
-(RoutingHead*)GenRoutingHeadOfSendMsgReq:(unsigned long long)sendMsgReq;
@end

@interface QQWPAMessageHandler : QQBaseC2CMsgHandler {
}
-(id)handleMsg:(Msg*)msg;
-(int)peekMsgAccType:(MsgHead)type;
@end

@interface QQPublicPlatformMessageHandler : QQWPAMessageHandler {
}
-(id)handleMsg:(Msg*)msg;
-(int)peekMsgAccType:(MsgHead)type;
-(id)parseTransElement:(const TransElem*)element msgType:(int*)type;
@end

@interface QQGroupTmpMessageHandler : QQBaseC2CMsgHandler {
}
-(id)handleMsg:(Msg*)msg;
-(int)peekMsgAccType:(MsgHead)type;
@end

@interface QQDiscussTmpMessageHandler : QQBaseC2CMsgHandler {
}
-(id)handleMsg:(Msg*)msg;
-(int)peekMsgAccType:(MsgHead)type;
@end

@interface QQVideoNotifyHandler : QQBaseC2CMsgHandler {
}
+(id)getInstance;
-(id)handleMsg:(Msg*)msg;
-(void)dealloc;
-(id)init;
@end

@interface FRequestItem : NSObject {
	int _seqId;
	int _requestType;
	long long _userUIN;
	int _ssoSeq;
	id _data;
}
@property(retain, nonatomic) id data;
@property(assign, nonatomic) int ssoSeq;
@property(assign, nonatomic) long long userUIN;
@property(assign, nonatomic) int requestType;
@property(readonly, assign, nonatomic) int seqId;
-(void)dealloc;
-(id)initWithSeqId:(int)seqId requestType:(int)type userUIN:(long long)uin ssoSeq:(int)seq target:(id)target selector:(SEL)selector;
@end

@interface QSFriRecommendEngine : QSEngineBase <IQFriRecommendEngine, IEngineDispatchDelegate> {
	NSMutableArray* _prableFriends;
	NSMutableDictionary* _friendsInfo;
	NSMutableArray* _contactsFriends;
	long long _seqId;
	NSMutableArray* _requestQueue;
	NSMutableArray* _sourceDictionary;
}
-(id)getRecommendNameByUin:(unsigned long long)uin;
-(id)getRecommendNameByPhoneCode:(id)code;
-(void)removeQueueRequestWithType:(int)type;
-(int)removeQueueRequest:(int)request;
-(id)getQueueRequestWithSSOSeq:(int)ssoseq;
-(int)getSeqId;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)requestUnReadFriendRecommends:(unsigned long long)recommends;
-(void)requestRecentFriRecommendList:(unsigned long long)list start_time:(unsigned)time;
-(void)requestNewFriRecommendList:(unsigned long long)list;
-(void)requestFriRecommendList:(unsigned long long)list type:(unsigned)type start_time:(unsigned)time;
-(void)requestNotifySvrGenerateFriendsRecommend:(unsigned long long)recommend;
-(void)requestDeleteAllRecommends:(unsigned long long)recommends start_time:(unsigned)time;
-(void)requestDeleteRecommends:(unsigned long long)recommends uinList:(id)list;
-(void)requestNotifySvrFriendsRecommendRead:(unsigned long long)read timeStamp:(long long)stamp;
-(id)getNewUnReadRecommendData;
-(void)appendFriRecommendList:(id)list;
-(void)deleteLocalFriendRecommendList;
-(void)removeSingleItemFromListByUin:(long long)listByUin;
-(void)removeSingleItemFromListByPhoneCode:(id)listByPhoneCode;
-(void)clearFriRecommend;
-(int)getUnreadFriRecommended;
-(BOOL)isReadFriRecommend:(id)recommend;
-(void)setFriRecommendRead;
-(void)setContactRecommendRead;
-(id)getFriRecommendList;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)reload;
-(void)reset;
-(void)clearProbableFriends;
-(int)getUnreadProbableFriendsCount;
-(BOOL)isReadProbableFriend:(id)aFriend;
-(void)setProbableFriendRead;
-(void)saveProbableFriendsInfo:(id)info;
-(id)loadProbableFriendsInfo;
-(BOOL)isProbableFriendsNeedUpdate;
-(void)saveSequence:(id)sequence;
-(void)saveProbableFriends:(id)friends;
-(id)loadProbableFriends;
-(void)dealloc;
-(void)onAccountLogout:(id)logout;
-(void)onAccountLogin:(id)login;
-(id)init;
-(void)initConfig;
-(id)getSourceByIDAndSubID:(int)anId subID:(int)anId2;
-(id)getKeyByIDAndSubID:(int)anId subID:(int)anId2;
@end

@interface QQBaseChatMessage : NSObject <QC2CRoamMessageDelegate, QMsgSpliteMergeProtocol> {
	QQBaseChatUIOperation* _chatUIOperation;
	int _totalMsgCount;
	int _roamTroopMsgSeq;
	int _noRoamMessage;
	int _getRoamMsgTime;
	NSTimer* _startRefreshTimer;
	long long _minSeq;
	long long _minMsgID;
	int _minTime;
	QQMessageModel* _minModel;
	NSArray* _msgTmpList;
	int _beginMsgTime;
	int _endMsgTime;
	id _lastMsgModel;
	BOOL _isNeedAddOrigin;
	QQMessageModel* _friendOriginModel;
}
@property(retain, nonatomic) QQMessageModel* minModel;
@property(retain, nonatomic) QQMessageModel* friendOriginModel;
-(int)_cellNumberWithoutTimeModel;
-(BOOL)_isValidMsgSeqFromMessage:(id)message;
-(void)_reloadTableWithMsgArray:(id)msgArray;
-(id)_manipulateLoophole:(id)loophole KeyTime:(unsigned)time random:(unsigned)random roamTime:(unsigned)time4;
-(void)_refreshGroupMsg;
-(BOOL)_deleteMoreCell;
-(long long)_getValidMsgSeqFromDataSource;
-(id)_getQQUnRoamMsgWithUin:(id)uin;
-(id)_getValidC2CMsgModelFromDataSource;
-(unsigned)_getRoamMsgKeyTime:(id)time inOut:(int)anOut msgTime:(unsigned)time3;
-(void)_getRoamMsgTimeout:(id)timeout;
-(void)_startRefreshTimerAction:(id)action;
-(void)_updateRoamC2CMsgConseq;
-(id)_handleC2CRoamMsg;
-(void)handleC2CRoamMsg;
-(id)_handleGroupRoamMsg;
-(void)_RequestGetRoamMsgByNumber:(id)number time:(int)time size:(int)size roamRandom:(unsigned)random;
-(void)_RequestGetRoamMsgByNumberAction:(id)action;
-(void)_getOfflineGroupMsgNum:(id)num;
-(void)_getOfflineGroupMsg:(id)msg begin:(int)begin last:(int)last;
-(void)_GetOffLineTroopMessageAction:(id)action;
-(void)_getOfflineGroupMsgNumCallBack:(id)back;
-(void)_amendTroopPttMsgReadStatus:(id)status oriMsgList:(id)list;
-(int)_getMsgSeqFromCellModel:(id)cellModel;
-(BOOL)GetMinMsgSeqFromGroupMsgArr:(id)groupMsgArr Seq:(int*)seq;
-(void)PreloadGroupMessageWithUin:(id)uin Start:(int)start End:(int)end;
-(void)actionC2CMessage:(id)message;
-(void)handleC2CRoamMessage:(id)message msgList:(id)list;
-(void)insertContactRecvTipsMessage;
-(void)insertContactBindingMessage;
-(void)insertContactMobilePhoneUnvailable;
-(void)insertContactNotBindMessage:(BOOL)message;
-(void)insertAddFriendHintMessage;
-(BOOL)insertFriendTipsMessageIfNeed;
-(void)insetVipTipMessage:(id)message withMessage:(id)message2;
-(id)cellArrayForTable:(id)table;
-(void)startRefresh:(id)refresh;
-(void)handleGroupMessage;
-(void)handleGroupMessage:(id)message userInfo:(id)info :(id)arg3 :(long long)arg4;
-(void)handleNoRoamMessage:(id)message userInfo:(id)info;
-(void)setMinModelFromMessageList:(id)messageList;
-(void)clearMinMsgIDAndMsgSeq;
-(void)setMinMsgTimeFromMessageList:(long long)messageList;
-(int)getMinMsgTimeFromMessageList:(id)messageList;
-(void)setMinMsgIDFromMessageList:(long long)messageList;
-(long long)getMinMsgIDFromMessageList:(id)messageList;
-(void)setMinSeqFromMessageList:(long long)messageList;
-(long long)getMinSeqFromMessageList:(id)messageList;
-(int)getMinSeqFromCellModelArray:(id)cellModelArray;
-(int)getMsgIDFromCellModel:(id)cellModel;
-(void)dealloc;
-(id)initWithBaseChatUIOperation:(id)baseChatUIOperation;
@end

@interface QQBaseChatModel : NSObject {
	NSString* _uin;
	NSMutableArray* _chatMessages;
	BOOL _isGroup;
}
@property(assign, nonatomic) BOOL isGroup;
@property(retain, nonatomic) NSMutableArray* chatMessages;
@property(copy, nonatomic) NSString* uin;
-(void)clearMessages;
-(void)dealloc;
-(id)init;
@end

@interface QQBaseChatSecretFile : NSObject <UINavigationControllerDelegate, SecretFilePreviewDelegate, QQCameraPickerDelegate, SecretFilePreviewViewControllerDelegate, CameraFlashActionDelegate, UIImagePickerControllerDelegate> {
	QQBaseChatUIOperation* _chatUIOperation;
	QQBaseChatImage* _chatImage;
	SecretFilePreviewViewController* _curPreviewController;
	SecretFileImagePickerController* _SecretFileImagePickerController;
	UIImage* _thumbImage;
	UIImageView* _imageView;
	NSMutableDictionary* _previewControllerDic;
}
@property(retain, nonatomic) UIImage* thumbImage;
@property(retain, nonatomic) QQBaseChatImage* chatImage;
-(BOOL)secretOnPreview;
-(void)showSecretFileController:(id)controller;
-(void)sendSecretImageMessage:(id)message;
-(void)handleSecretPickerImage:(id)image;
-(void)setAllSecretDataRead;
-(void)ActionOnSecretFilePreviewViewClosed:(id)closed values:(id)values;
-(void)ActionOnSecretFilePreviewViewTempClosed;
-(void)ActionOnTimeChanged:(int)changed dataSource:(id)source;
-(void)cameraPickerControllerDidCancel:(id)cameraPickerController;
-(void)cameraPickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)cameraPickerControllerDidBeginCaptureingImage:(id)cameraPickerController;
-(void)imagePreviewControllerDidCancel:(id)imagePreviewController;
-(void)imagePreviewController:(id)controller didFinishPickingWithDictionary:(id)dictionary;
-(void)sendImageNormal;
-(void)handleNormalPickerImage:(id)image;
-(void)onImagePickerControllerCancelButtonTapped:(id)tapped;
-(void)closeCamera;
-(void)onImagePickerControllerShutterButtonTapped:(id)tapped;
-(void)onImagePickerControllerChangeDeviceButtonTapped:(id)tapped;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)chooseLocalPhoto;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)initCamera;
-(void)ActionOpenedFash;
-(void)ActionClosedFlash;
-(void)ActionAutoFlash;
-(void)reloadTableWhenAddSecretFileData;
-(void)doSecretFileSpecial:(id)special;
-(void)releaseResourceRefSecretFile;
-(id)findSecretFileCell:(id)cell;
-(void)getNewImageFromSystemAlbum;
-(void)dealloc;
-(void)onKickOutLogin;
-(id)initWithBaseChatUIOperation:(id)baseChatUIOperation;
@end

@interface QQBaseChatUIOperation : NSObject {
	QQBaseChatModel* _chatModel;
	QQChatViewTable* _tableView;
	UIView* _rootView;
	QQView* _mainView;
	QQTextField* _qqTextField;
	UIView* _tipsView;
	UIImage* _willChooseImage;
	QQBaseChatViewController* _baseController;
	BOOL _isLockScroll;
}
@property(assign, nonatomic) BOOL isLockScroll;
@property(assign, nonatomic) QQBaseChatViewController* baseController;
@property(retain, nonatomic) UIImage* willChooseImage;
@property(retain, nonatomic) QQTextField* qqTextField;
@property(retain, nonatomic) UIView* tipsView;
@property(retain, nonatomic) QQView* mainView;
@property(retain, nonatomic) UIView* rootView;
@property(retain, nonatomic) QQChatViewTable* tableView;
@property(readonly, assign, nonatomic) QQBaseChatModel* chatModel;
-(void)dealloc;
-(id)initWithBaseChatModel:(id)baseChatModel;
@end

@interface UnifyNameUtil : NSObject {
}
+(id)GetInstance;
-(id)getValueByRuleKey:(id)key uin:(unsigned long long)uin groupNick:(id)nick remark:(id)remark nick:(id)nick5 phoneNum:(id)num autoRemark:(id)remark7 isMore:(BOOL)more;
-(id)getListDataByRule:(id)rule uin:(id)uin groupNick:(id)nick remark:(id)remark phoneNum:(id)num autoRemark:(id)remark6 nick:(id)nick7;
-(id)getCardDataByRule:(id)rule model:(id)model;
-(id)getUnifyName:(int)name showType:(int)type uin:(id)uin phoneNum:(id)num groupCode:(id)code discussGroupUin:(long long)uin6;
@end

@interface QQC2CMsgTable_multiple : QQC2CMsgTable_Async {
@private
	NSString* _uin;
}
+(id)getTableNameWithUin:(id)uin;
-(id)getC2CMessage:(id)message startTime:(int)time endTime:(int)time3;
-(id)getC2CMessage:(id)message startTime:(int)time startID:(int)anId endTime:(int)time4 endID:(int)anId5;
-(void)deleteAllMessageTable;
-(id)getLastMessage:(BOOL)message;
-(BOOL)updatePttSentTime:(double)time withContent:(id)content uin:(id)uin;
-(id)getC2CMessageListFromNewTable:(id)newTable msgTime:(int)time msgID:(int)anId count:(int)count;
-(id)getC2CMessageListAsc:(id)asc msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count;
-(int)asyncGetC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable callback:(id)callback;
-(id)getC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count;
-(int)asyncUpdateWithSendResultMoedls:(id)sendResultMoedls userdata:(id)userdata callback:(id)callback;
-(int)updateMessageTime:(long long)time messageSeq:(int)seq msgRandom:(int)random withMsgId:(int)msgId userdata:(id)userdata callback:(id)callback;
-(int)asyncGetMessageWithSeq:(int)seq msgRandom:(int)random userdata:(id)userdata callback:(id)callback;
-(void)updateMessageTime:(long long)time messageSeq:(int)seq msgRandom:(int)random withMsgId:(int)msgId;
-(id)messageWithSeq:(int)seq msgRandom:(int)random;
-(id)initWithUin:(id)uin;
-(void)dealloc;
-(void)initDbOperation;
-(id)getTableName;
@end

@interface QQC2CMsgTableOperation_Multiple : QQC2CMsgTableOperation {
}
-(void)updateMessageUuid:(id)uuid inDb:(id)db;
-(void)deleteAllMessageTable:(id)table;
-(id)getLastMessage:(BOOL)message inDb:(id)db;
-(BOOL)updatePttSentTime:(double)time withContent:(id)content uin:(id)uin inDb:(id)db;
-(id)getC2CMessageListAsc:(id)asc msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count inDb:(id)db;
-(id)getC2CMessageListFromNewTable:(id)newTable msgTime:(int)time msgID:(int)anId count:(int)count inDb:(id)db;
-(id)systemMessages:(unsigned)messages inDb:(id)db;
-(id)GetVoiceModelOffLineList:(id)list msgTime:(long long)time inDb:(id)db;
-(id)GetVoiceModelList:(id)list msgId:(id)anId inDb:(id)db;
-(id)getC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count inDb:(id)db;
-(id)QQSecretMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page inDb:(id)db;
-(BOOL)updateWithSendResultMoedls:(id)sendResultMoedls inDb:(id)db;
-(void)updateMessageTime:(long long)time messageSeq:(int)seq msgRandom:(int)random withMsgId:(int)msgId inDb:(id)db;
-(id)messageWithSeq:(int)seq msgRandom:(int)random inDb:(id)db;
-(id)commonC2CMsgFromQueryResult:(id)queryResult UsedMsgContent:(id)content;
-(void)doExtraInsert:(id)insert InDb:(id)db;
-(void)updateTable:(id)table inDb:(id)db;
-(void)createTableWithName:(id)name withVersion:(int)version inDb:(id)db;
@end

@interface C2CDBService_msgFoward : NSObject <IC2CMultiTableDB> {
	QQC2CMsgTable_multiple* _msgTable;
}
-(void)clearAllMessage;
-(id)getLastMessageWithUin:(id)uin isSend:(BOOL)send;
-(BOOL)updatePttSentTime:(double)time withContent:(id)content uin:(id)uin;
-(id)getC2CMessageListFromNewTable:(id)newTable msgTime:(int)time msgID:(int)anId count:(int)count;
-(id)getC2CMessageListAsc:(id)asc msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count;
-(int)asyncGetC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable callback:(id)callback;
-(id)getC2CMessage:(id)message startTime:(int)time endTime:(int)time3;
-(id)getC2CMessage:(id)message startTime:(int)time startID:(int)anId endTime:(int)time4 endID:(int)anId5;
-(id)getC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count;
-(void)forwardInvocation:(id)invocation;
-(BOOL)batchInsertReceivedMessages:(id)messages;
-(BOOL)batchInsertSendMessages:(id)messages;
-(void)setPttMsg:(id)msg withStatus:(int)status uin:(id)uin;
-(void)UpdateVoiceMsgUUid:(int)uid UUid:(id)uid2 uin:(id)uin;
-(void)updateC2CRichMsgState:(int)state msgTime:(int)time state:(int)state3 uin:(id)uin;
-(void)updatePttPlaceholder:(int)placeholder uin:(id)uin;
-(void)updatePlaceholderFileMsg:(int)msg content:(id)content uin:(id)uin;
-(BOOL)getPTTPICFileFromDB:(id)db len:(int)len type:(int)type uin:(id)uin;
-(void)setQQReadStateWithUUid:(id)uuid uin:(id)uin;
-(void)setQQFailStateWithUUid:(id)uuid uin:(id)uin;
-(void)messageFlagVisiable:(long long)visiable visiable:(unsigned)visiable2 uin:(id)uin;
-(void)upVideMsg:(double)msg read:(int)read content:(id)content uin:(id)uin;
-(void)insertHistoryQQMessage:(id)message;
-(void)dealloc;
-(id)initWithUin:(id)uin;
@end

@interface C2CDBService_MultiTable : NSObject <IC2CDBService_MultiTable> {
@private
	NSMutableDictionary* _c2cMsgTables;
	NSTimer* _gcTimer;
}
-(id)getLastMessageWithUin:(id)uin isSend:(BOOL)send;
-(BOOL)updatePttSentTime:(double)time withContent:(id)content uin:(id)uin;
-(id)getC2CMessageListAsc:(id)asc msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count;
-(int)asyncGetC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable callback:(id)callback;
-(id)getC2CMessage:(id)message startTime:(int)time endTime:(int)time3;
-(id)getC2CMessage:(id)message startTime:(int)time startID:(int)anId endTime:(int)time4 endID:(int)anId5;
-(id)getC2CMessageList:(id)list msgTime:(int)time msgID:(int)anId fromOldTable:(BOOL)oldTable count:(int)count;
-(id)_uin2MsgDicFromMessages:(id)messages;
-(void)_adjustMessageTimeWithReceivedMessags:(id)receivedMessags;
-(void)_prepareForSendMessage:(id)sendMessage;
-(BOOL)updateMessages:(id)messages withTime:(double)time ofUin:(id)uin;
-(int)asyncUpdateWithSendResultMoedls:(id)sendResultMoedls userdata:(id)userdata callback:(id)callback;
-(BOOL)deleteAccostMsgsWithUin:(id)uin;
-(id)failedMessagesAfterTime:(double)time ofUin:(id)uin;
-(double)maxValidMessageTimeOfUin:(id)uin;
-(double)maxMessageTimeOfUin:(id)uin;
-(BOOL)deleteMessage:(id)message;
-(BOOL)removeMessage:(id)message;
-(void)clearAllMessage;
-(void)messageFlagForRecent:(id)recent;
-(void)updateC2CRichMsgState:(int)state msgTime:(int)time state:(int)state3 uin:(id)uin;
-(void)SetC2CMsgSendStateWithMsgID:(id)msgID state:(int)state;
-(id)GetC2CMsgWithTargetUin:(id)targetUin WithType:(int)type beforeOrEqualTime:(long long)time limitCount:(unsigned)count;
-(void)updatePttPlaceholder:(int)placeholder uin:(id)uin;
-(void)updatePlaceholderFileMsg:(int)msg content:(id)content uin:(id)uin;
-(void)updateSendGroupTmpPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)updateSendC2CPicUuid:(id)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)transferOnlineFileToOffline:(int)offline newContent:(id)content fromUin:(id)uin msgTime:(int)time fileId:(unsigned)anId;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId time:(int)time;
-(id)getOnlineFileMsg:(id)msg fileId:(unsigned)anId;
-(void)updateOnlineFileStateWithTime:(int)time fromUin:(id)uin fileId:(unsigned)anId newState:(int)state;
-(void)updateOnlineFileState:(id)state fileId:(unsigned)anId newState:(int)state3;
-(void)deleteQQMessageWithUin:(id)uin FromTime:(int)time toTime:(int)time3;
-(void)deleteMsgWithUin:(id)uin msgID:(int)anId;
-(void)updateSystemMsg:(id)msg handled:(int)handled;
-(void)updataMsg:(long long)msg msgTime:(int)time withAppShareID:(int)appShareID;
-(BOOL)getPTTPICFileFromDB:(id)db len:(int)len type:(int)type uin:(id)uin;
-(id)getLatestSayHelloMessage;
-(void)removeAllAccostMessages;
-(id)getAccostMessages:(int)messages;
-(void)upOffLineFileMsg:(id)msg time:(long long)time forRead:(int)read;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forContent:(id)content;
-(void)upOfflineFileMsg:(id)msg uuid:(id)uuid forRead:(int)read;
-(void)upOfflineFileMsg:(id)msg time:(int)time forRead:(int)read;
-(void)upOffLineFileMsg:(id)msg msgId:(int)anId forRead:(int)read;
-(void)UpdateVoiceMsgUUid:(int)uid UUid:(id)uid2 uin:(id)uin;
-(id)GetVoiceModelOffLineList:(id)list msgTime:(long long)time;
-(id)GetVoiceModelList:(id)list msgId:(id)anId;
-(void)upDatePttMsg:(id)msg;
-(void)setPttMsg:(id)msg withStatus:(int)status uin:(id)uin;
-(void)setPttMsg:(id)msg withStatus:(int)status;
-(void)setQQReadStateWithUUid:(id)uuid uin:(id)uin;
-(void)setQQFailStateWithUUid:(id)uuid uin:(id)uin;
-(int)GetC2CMessageCount:(id)count;
-(void)deleteMsgWithContent:(id)content forUin:(id)uin;
-(void)deleteMsgsWithUin:(id)uin;
-(id)QQMessageWithUin:(id)uin timeStamp:(int)stamp;
-(id)QQMessageWithUinAsc:(id)uinAsc pagesize:(unsigned)pagesize page:(unsigned)page;
-(int)getRoamMsgKeyTime:(id)time inOut:(int)anOut msgTime:(unsigned)time3;
-(void)updateUnConseqMsg:(id)msg inOut:(int)anOut msgTime:(unsigned)time;
-(id)QQUnRoamMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size;
-(id)QQRomaMessageWithUin:(id)uin startTime:(unsigned)time pageSize:(unsigned)size;
-(id)QQMessageWithUin:(id)uin pagesize:(unsigned)pagesize page:(unsigned)page;
-(id)QQMessageWithUin:(id)uin startLocation:(unsigned)location endLocation:(unsigned)location3;
-(id)QQFriendMessage:(id)message MsgID:(int)anId msgCount:(int)count;
-(id)systemMessages:(unsigned)messages;
-(void)updateMessageUuid:(id)uuid;
-(void)updateQQMessagefromUIN:(long long)uin toUIN:(long long)uin2;
-(void)updateSecretfileKeyByContent:(id)content content:(id)content2 uin:(id)uin;
-(id)getSecretfileModelWithKey:(id)key toUin:(id)uin key:(id)key3;
-(id)getSecretfileModelWithContent:(id)content toUin:(id)uin content:(id)content3;
-(void)updateSecretMessage:(id)message toUin:(id)uin secretContent:(id)content secretReadtime:(unsigned long long)readtime captureCount:(int)count toStatus:(int)status fromStatus:(int)status7;
-(void)updateSecretfiletostatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)updateSecretfilefromstatusByKey:(id)key fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)updateSecretfilefromstatusByContent:(id)content fromUin:(id)uin toUin:(id)uin3 status:(int)status;
-(void)insertHistoryQQMessage:(id)message;
-(void)messageFlagVisiable:(long long)visiable visiable:(unsigned)visiable2 uin:(id)uin;
-(void)upVideMsg:(double)msg read:(int)read content:(id)content uin:(id)uin;
-(void)setNoOperForUin:(id)uin;
-(void)setReadForUin:(id)uin;
-(id)getC2CMessage:(id)message readTime:(int)time count:(int)count;
-(id)getC2CMessage:(id)message readTime:(int)time faultTime:(int)time3 count:(int)count;
-(BOOL)batchInsertReceivedMessages:(id)messages;
-(id)getLastMessage:(id)message;
-(BOOL)batchInsertSendMessages:(id)messages;
-(BOOL)insertSendMessage:(id)message;
-(id)dbServiceWithUin:(id)uin;
-(void)dealloc;
-(void)reset;
-(id)init;
-(void)gc;
@end

@interface CellViewForSearchGroup : UIView {
	UILabel* title;
	UILabel* subTitle1;
	UILabel* subTitle2;
	UILabel* iconlb;
	QQAsynHeadImageView* head;
	UIImageView* icon1;
}
-(void)dealloc;
-(void)loadFromModel:(id)model;
-(id)initWithModel:(id)model;
@end

@interface QQSearchGroupListViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, UIScrollViewDelegate, SMSEditMenuDelegate> {
	UITableView* _tableView;
	BOOL _isEnd;
	int _reqPage;
	NSString* _keyWords;
	UIView* _sortBoard;
	unsigned _sortType;
	SMSEditMenu* _popupMenu;
	BOOL _resetDataSource;
	CFFootView* _footView;
@private
	NSMutableArray* dataSource;
	NSDictionary* listInfo;
}
@property(retain, nonatomic) NSDictionary* listInfo;
@property(retain, nonatomic) NSMutableArray* dataSource;
-(void)didMenuClick:(id)click buttonIndex:(int)index;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)requestMoreGroups;
-(void)loadDataSourceFromListInfo;
-(void)ActionKeyWordsSearchGroupResult:(id)result;
-(void)sortGroupsWithType:(int)type;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)showPopupMenu;
-(void)setTitleView;
-(id)init;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface CSLayer : CALayer {
}
@end

@interface UserSummaryQrCodeCell : UITableViewCell {
	UILabel* _nameLabel;
	UIImageView* _expandArrow;
	UIImageView* _qrCodeIcon;
}
-(void).cxx_destruct;
-(void)changeToNormal;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQClusterMessageModel : QQRecentMessageModel {
	QQRecentMessageModel* _contentMessageModel;
	NSMutableDictionary* _subMessageDict;
	NSString* _name;
}
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSMutableDictionary* subMessageDict;
@property(retain, nonatomic) QQRecentMessageModel* contentMessageModel;
-(void)asyncSave;
-(void)load;
-(id)getSubMessageList;
-(void)removeSubModelWithKey:(id)key;
-(void)removeSubModel:(id)model;
-(void)addSubModel:(id)model;
-(void)refreshContentMessageModel;
-(void)dealloc;
-(id)initWithMessageModel:(id)messageModel;
@end

@interface CircleTimeSampModle : QQModel {
	CircleRspTimeStamps* _CircleRspTimeStamps;
}
-(void)saveTimeStampAfterDelay;
-(void)saveTimeStamp;
-(void)loadTimeStamp;
-(CircleRspTimeStamps*)getCircleRspTimeStamps;
-(void)dealloc;
-(id)init;
@end

@interface QQSkinTabBar : UIView <ISkinProtocol> {
	id<QQSkinTabBarDelegate> _delegate;
@private
	int _selectIndex;
	NSMutableArray* _items;
	NSMutableArray* _viewControllers;
}
@property(assign, nonatomic) id<QQSkinTabBarDelegate> delegate;
-(void)showUnreadTagForTabAtIndex:(unsigned)index unreadCount:(unsigned)count;
-(void)showHintForTabAtIndex:(unsigned)index isShow:(BOOL)show;
-(void)setTabBarSelectedAtIndex:(unsigned)index;
-(void)onTabBarItemClick:(id)click;
-(void)setViewControllers:(id)controllers;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQButton : UIControl {
	CGPoint _lastPosition;
	BOOL _moveSucess;
	UIImageView* _imageView;
	UIImageView* _selBgView;
	UILabel* _titleLabel;
}
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIImageView* selBgView;
@property(retain, nonatomic) UIImageView* imageView;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setSelected:(BOOL)selected;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface QQToolBarRootView : QQView {
	QQButton* _button;
	UIImageView* _iconImage;
	QQMessageReadTagView* _unreadTagView;
}
@property(readonly, assign, nonatomic) QQMessageReadTagView* unreadTagView;
@property(retain, nonatomic) UIImageView* iconImage;
@property(retain, nonatomic) QQButton* button;
-(void)dealloc;
-(void)clearUnread;
-(void)displayWithUnreadCount:(unsigned)unreadCount;
-(id)initWithFrame:(CGRect)frame byButton:(id)button;
-(void)reloadAppearance;
@end

@interface QQAuxiliaryFunctionViewController : QQSetupRelatedViewController {
}
-(void)ShowQQTextInputPreferencesView;
-(void)ShowFlowViewController;
-(void)ClearCacheEnd;
-(void)clearAllHistoryData;
-(void)clearMsgList;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)viewWillDisappear:(BOOL)view;
-(void)restoreDataAfterViewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface QQMessageNotificationViewContrller : QQSetupRelatedViewController <QQTimePickerDelegate> {
	QQTimePicker* _timeSelectView;
}
-(void)ShowSoundSetupViewCotroller;
-(void)GroupNotifyMessageSettingNoPush;
-(void)GroupNotifyMessageSetting;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)setPushTimeBegin:(int)begin endTime:(int)time;
-(BOOL)SystemPushOpen;
-(void)restoreDataAfterViewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface QQSecuriteAndPrivateViewController : QQSetupRelatedViewController {
}
-(void)SetPassWord;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)GetCardSwitch:(id)aSwitch;
-(void)restoreDataAfterViewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)loadView;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface QQSetupRelatedViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate> {
	NSMutableArray* _dataHeads;
	NSMutableArray* _dataSources;
	NSMutableArray* _dataFoots;
	UITableView* _tableView;
@private
	BOOL _soundNew;
}
@property(assign, nonatomic) BOOL soundNew;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)restoreData;
-(void)restoreDataAfterViewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QQSoundSetupViewController : QQSetupRelatedViewController {
}
-(void)PlaySoundEffect:(id)effect;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)reloadTableWithAnimation_vibrate;
-(void)reloadTableWithAnimation_sound;
-(void)restoreDataAfterViewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)loadView;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface QQLoginViewManager : NSObject <QQLoginViewDelgate, QQValidCodeControllerDelegate, SimpleAlertViewDelegate> {
	QQLoginViewController* _loginViewController;
	QQNavigationController* _loginViewNavController;
	QQSetAccountViewController* _setAccountViewController;
	QQNavigationController* _setAccountViewNavController;
	QQVaildCodeController* _validCodeController;
	SimpleAlertView* _alertView;
	BOOL _showDefalutView;
	BOOL _showPassWordView;
	BOOL _showSkinsView;
	NSDictionary* _logInDic;
}
@property(retain, nonatomic) NSDictionary* logInDic;
+(id)GetInstance;
-(BOOL)refreshVerifyCodeWithSessionID:(int)sessionID;
-(BOOL)commitVerifyCode:(id)code sessionID:(int)anId;
-(void)loginViewShouldDismiss:(id)loginView;
-(void)dismissSetAccountView;
-(BOOL)isSetAccountViewShow;
-(void)showSetAccountViewControllerWith:(id)with;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)showAlertSecurity:(id)security;
-(void)popToFristRootViewController;
-(void)dealWithLoginResult:(int)loginResult ErrCode:(int)code ErrTitle:(id)title ErrStr:(id)str info:(id)info;
-(void)showValidPicController:(id)controller;
-(void)delayShowDefaultView;
-(void)LoginSuccess;
-(void)delayShowTips;
-(void)dealWithTips;
-(BOOL)isLoginViewShow;
-(int)currentLoginViewType;
-(void)popLoginView;
-(void)dismissLoginView;
-(void)showLoginViewWithType:(int)type;
-(void)showDefalutView;
-(void)closeShowSkinsView:(BOOL)view;
-(BOOL)needShowSkinsView;
-(void)closePushPWDView:(BOOL)view;
-(BOOL)needPushPWDView;
-(void)closeShowDefalutView:(BOOL)view;
-(BOOL)needShowDefaultView;
-(void)dealloc;
-(id)init;
@end

@interface QQSetAccountViewController : QQViewController <AcountEditCellIDDelegate, AccountEditCellPWDelegate> {
	AcountEditCellID* _accountEditCellId;
	AcountEditCellPW* _accountEditCellPw;
	BOOL _newAccount;
	NSString* _uinToSet;
	NSString* _unloadedUin;
	NSString* _unloadedPwd;
	id<QQLoginViewDelgate> _delegate;
}
@property(assign, nonatomic) id<QQLoginViewDelgate> delegate;
-(void)startLogin:(id)login psw:(id)psw;
-(void)doLogin;
-(void)forgetPassWordClicked;
-(void)rightButtonClick:(id)click;
-(void)onAccountPasswordShouldReturn;
-(void)onAccountPasswordCleared;
-(void)onAccountPasswordEditedBegin:(float)begin;
-(void)onAccountPasswordEdited;
-(void)didAccountEditUinBegin:(float)begin;
-(void)didAccountUinEdited;
-(void)dealloc;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(id)initWithUin:(id)uin;
@end

@interface QQBaseClusterMessageViewController : QQViewController <UITableViewDataSource, UITableViewDelegate> {
	QQClusterMessageModel* _model;
	QQMessageView* _messageView;
	NSString* _topTipsString;
}
@property(retain, nonatomic) QQClusterMessageModel* model;
@property(retain, nonatomic) NSString* topTipsString;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)ActionRichMessageStateChange:(id)change;
-(void)ActionMessageSendStateChange:(id)change;
-(void)ActionGetQQMessage:(id)message;
-(void)showTopTipsView;
-(void)refreshMessageViewData;
-(BOOL)isSupportRightDragToGoBack;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(id)initWithModel:(id)model topString:(id)string;
@end

@interface QQFacePanelController : NSObject {
	QQFacePanelView* _facePanel;
	QQFaceTabBar* _tabBar;
	UIButton* _sendButton;
	NSMutableDictionary* _dicFaceKeyboard;
	int _interfaceOrientation;
	id _textDelegate;
@private
	BOOL _marketFaceSupported;
	EmojiStore* _emojiStore;
}
@property(assign, nonatomic) BOOL marketFaceSupported;
@property(retain, nonatomic) EmojiStore* emojiStore;
@property(assign, nonatomic) id textDelegate;
@property(assign, nonatomic) int interfaceOrientation;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)hideSendButton;
-(void)showSendButton;
-(void)onDeleteCustomFaceNotify:(id)notify;
-(void)onAddCustomFaceNotify:(id)notify;
-(void)onAddStoreTabNotify:(id)notify;
-(void)storeTabDidTapped:(id)storeTab;
-(void)tabItemDidTapped:(id)tabItem;
-(void)loadEmojiStoreFace;
-(id)faceKeyBoardForItem:(int)item;
-(void)showFaceKeyboardForItem:(int)item;
-(void)hideFacePanel;
-(void)showFacePanel;
-(void)showFacePanelIfNeeds;
-(void)switchMainView:(id)view;
-(BOOL)attachMainView:(id)view;
-(void)dealloc;
-(id)init;
@end

@interface QQFacePanelView : UIView {
}
+(void)initialize;
-(void)onPanGesture:(id)gesture;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFaceTabBar : UIScrollView <UIScrollViewDelegate, QQFaceTabItemDelegate> {
	NSMutableArray* _itemList;
	UIImage* _imgBack;
	QQFaceTabItem* _selectedItem;
	int* _nextItemID;
	BOOL _updating;
	float _width;
}
@property(retain, nonatomic) UIImage* imgBack;
-(void)didSelectedFaceTabItem:(id)item;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)fixContentSize;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(BOOL)makeItemVisibleForID:(int)anId;
-(id)itemAfterItem:(id)item;
-(id)itemBeforeItem:(id)item;
-(int)nextItemID;
-(void)clearSelectedItem;
-(id)selectedItem;
-(void)selectItemByID:(int)anId;
-(void)selectItem:(id)item;
-(id)itemForID:(int)anId;
-(void)endUpdate;
-(void)beginUpdate;
-(void)removeAllItems;
-(id)itemsBeyondID:(int)anId;
-(id)removeItemsBeyondID:(int)anId;
-(void)removeItem:(id)item;
-(void)addItem:(id)item;
-(unsigned)indexOfItem:(id)item;
-(id)itemAtIndex:(int)index;
-(unsigned)itemCount;
-(void)layoutItems;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface _QQFaceTabAction : NSObject <NSCopying> {
	id _target;
	SEL _action;
}
@property(readonly, assign, nonatomic) SEL action;
@property(readonly, assign, nonatomic) id target;
+(id)actionWithTarget:(id)target withAction:(SEL)action;
-(void)performActionWithObject:(id)object;
-(BOOL)isEqual:(id)equal;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithTarget:(id)target withAction:(SEL)action;
@end

@interface QQFaceTabItem : UIView {
	int _state;
	UIImage* _iconNor;
	UIImage* _iconSel;
	BOOL _selectable;
	QQFaceTabItemDraw* _drawHandler;
	BOOL _downloading;
	float _progress;
	id _data;
	NSMutableArray* _actions;
	NSObject<QQFaceTabItemDelegate>* _delegate;
	QQFaceTabBar* _tabBar;
	UIImageView* _iconNew;
@private
	BOOL _isIconNew;
}
@property(assign, nonatomic) BOOL isIconNew;
@property(assign, nonatomic) QQFaceTabBar* tabBar;
@property(assign, nonatomic) NSObject<QQFaceTabItemDelegate>* delegate;
@property(retain, nonatomic) id data;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) BOOL downloading;
@property(assign, nonatomic) BOOL selectable;
@property(retain, nonatomic) UIImage* iconSel;
@property(retain, nonatomic) UIImage* iconNor;
@property(assign, nonatomic) int state;
@property(assign, nonatomic) int ID;
-(void)updateState;
-(id)stateString;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)removeTarget:(id)target action:(SEL)action;
-(void)addTarget:(id)target action:(SEL)action;
-(void)drawRect:(CGRect)rect;
-(id)nextItem;
-(id)previousItem;
-(id)description;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQPublicAccountEventHandle : NSObject {
}
-(BOOL)openAio:(id)aio;
-(BOOL)handleEvent:(int)event uin:(id)uin;
@end

@interface QQFaceTabItemDraw : NSObject {
	UIImage* _imgSelected;
	UIImage* _imgSelectedLeft;
	UIImage* _imgLine;
	UIImage* _progressBK;
	UIImage* _progressFR;
}
+(BOOL)isHandlerForItem:(int)item;
+(id)drawHandlerForItem:(int)item;
-(void)drawRect:(CGRect)rect forItem:(id)item;
-(void)dealloc;
-(id)init;
@end

@interface QQFaceTabBarDraw : NSObject {
}
+(void)drawRect:(CGRect)rect forBar:(id)bar;
@end

@interface QQFacePackCell : QQTableViewCell {
	UIImageView* _notifyNewIconView;
	int _kind;
}
@property(retain, nonatomic) UIImageView* notifyNewIconView;
-(void)setFacePackCoverImage:(id)image;
-(void)setFacePackExpireTime:(unsigned long)time;
-(void)setFacePackName:(id)name;
-(int)getKind;
-(void)layoutSubviews;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier withKind:(int)kind;
@end

@interface QQFacePackManageTableView : UITableView {
}
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFacePackManageTableViewController : QQViewController <UITableViewDelegate, UITableViewDataSource> {
	NSMutableArray* _facePackList;
	QQFacePackManageTableView* _facePackManageTableView;
}
@property(retain, nonatomic) QQFacePackManageTableView* facePackManageTableView;
-(void)showLogView:(id)view;
-(void)initLongTapForLogShow;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)onAddEmojiSotrePackage:(id)package;
-(void)setNewIcon:(id)icon Visible:(BOOL)visible;
-(float)getCellHeight:(id)height;
-(void)entryEditingMode:(id)mode;
-(void)setExtraCellLineHidden:(id)hidden;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface QQLoginViewController : QQViewController <QQAccountMenuDelegate, AccountEditCellPWDelegate, AcountEditCellIDDelegate> {
	AccountHeadView* _accountHeadView;
	AcountEditCellID* _acountCellID;
	AcountEditCellPW* _acountCellPW;
	UIButton* _loginBtn;
	UIButton* _registerBtn;
	UIButton* _forgetPass;
	UIImageView* _bgView;
	UIImageView* _loginBGView;
	UIImageView* _arronView;
	BOOL _hasInput;
	BOOL _notDisplayList;
	int _offSetY;
	float _topHeadOffsetY;
	BOOL _hasTopNavigationBar;
	BOOL _menuShow;
	BOOL _loadFromPass;
	QQAccountMenu* _acoutMenu;
	BOOL _needPass;
	BOOL _animationStop;
	NSString* _lastUin;
	NSString* _lastPass;
	BOOL _addAccount;
	BOOL _deleteAccount;
	BOOL _setAccount;
	NSString* _setUin;
	BOOL _forbidenBack;
	int _loginViewType;
	NSString* _initialUin;
	NSString* _initialPwd;
	id<QQLoginViewDelgate> _delegate;
}
@property(assign, nonatomic) id<QQLoginViewDelgate> delegate;
@property(assign, nonatomic) int loginViewType;
+(float)GetNavigationBarHeight;
-(void)dealloc;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)viewDidUnload;
-(void)clearAccount:(id)account;
-(void)recoverAccountUI;
-(void)reCoverInputKeyBoard;
-(void)moveToNormalPosition;
-(id)getImageOfView:(id)view;
-(void)changeUser:(int)user;
-(void)StartToLogin:(id)login needPass:(BOOL)pass pass:(id)pass3;
-(BOOL)doLogin:(id)login needPass:(BOOL)pass pass:(id)pass3;
-(BOOL)doLogin;
-(void)DeleteAccountPWD;
-(void)clearPass;
-(void)onAccountPasswordShouldReturn;
-(void)onAccountPasswordCleared;
-(void)onAccountPasswordEditedBegin:(float)begin;
-(void)onAccountPasswordEdited;
-(void)didAccountEditUinEnded:(id)ended;
-(void)didAccountEditUinBegin:(float)begin;
-(void)didAccountUinEdited;
-(void)setCurrentSelectedUin:(id)uin;
-(void)setUin:(id)uin;
-(void)hideMenuWhenAnimationStop;
-(void)hideMenu;
-(void)showAccountsEdit;
-(void)forgetPassWord;
-(void)registerAction;
-(void)setSubViewPosition:(int)position;
-(void)setInputChangebidden;
-(void)setBackGroudImage;
-(void)failLoginState;
-(void)checkLastAccount;
-(void)leftButtonClick:(id)click;
-(void)SetLeftButton;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)loadView;
-(float)GetHeightTopOffset;
-(id)initWithLoginViewType:(int)loginViewType;
@end

@interface QQPublicAccountMessageController : QQBaseClusterMessageViewController {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)ActionRichMessageStateChange:(id)change;
-(void)ActionMessageSendStateChange:(id)change;
@end

@interface PersonalCellViewManager : NSObject {
}
+(void)RemoveInstance;
+(id)GetInstance;
-(id)GetImageForPersonCellView:(id)personCellView;
-(void)dealloc;
-(id)init;
@end

@interface PersonalCellView : UITableViewCell {
	QQAccountItem* _item;
	UIImageView* _cellView;
	UILabel* _title;
}
@property(retain, nonatomic) QQAccountItem* item;
-(void)drawRect:(CGRect)rect;
-(id)GetFontOfSize;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQPersonalityViewController : QQSetupRelatedViewController {
	id<RefreshRecommendViewController> _delegate;
}
@property(assign, nonatomic) id<RefreshRecommendViewController> delegate;
-(void)CancelNewTip;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)restoreData;
-(void)restoreDataAfterViewDidLoad;
-(void)loadView;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)init;
@end

@interface BubbleBgInfo : QQModel {
	NSString* _BubbleID;
	UIEdgeInsets _inset[8];
	CGPoint _zoomPoint;
	CGRect _gifRect;
	float _animationTime;
	NSString* _imageName;
	NSMutableArray* _imagePaths;
	NSMutableArray* _imageAnimationPaths;
	NSMutableDictionary* _imageSourcesDictionary;
	NSMutableArray* _gifAnimations;
	int _loadType;
	int _showIndex;
	int _neededUserLever;
	NSString* _bubbleImpressionDrawingName;
	NSString* _currentBubbleIconName;
	NSString* _bubbleImgUrl;
	NSString* _bubbleImpressionDrawingUrl;
}
@property(retain, nonatomic) NSString* currentBubbleIconName;
@property(retain, nonatomic) NSString* bubbleImpressionDrawingUrl;
@property(retain, nonatomic) NSString* bubbleImgUrl;
@property(retain, nonatomic) NSString* bubbleImpressionDrawingName;
@property(assign, nonatomic) int neededUserLever;
@property(assign, nonatomic) int showIndex;
@property(assign, nonatomic) float animationTime;
@property(assign, nonatomic) int loadType;
@property(assign, nonatomic) CGRect gifRect;
@property(assign, nonatomic) CGPoint zoomPoint;
@property(retain, nonatomic) NSString* BubbleID;
@property(retain, nonatomic) NSString* imageName;
-(id).cxx_construct;
-(void)addImageSourceWith:(id)with;
-(void)addUIEdgeInset:(UIEdgeInsets)inset withIndex:(unsigned)index;
-(id)readInfoSourceFromPath:(id)path;
-(BOOL)saveInfoSourceToPath:(id)path;
-(void)divideImage;
-(void)readSources;
-(void)divideImageIfNeeds;
-(id)GetGifAnimations;
-(void)addAnimationImages:(id)images;
-(void)addImageSourceName:(id)name;
-(CGPoint)GetDividePoint;
-(id)GetKeyForType:(int)type;
-(void)clearAllImageCaches;
-(id)GetImageWithType:(int)type;
-(UIEdgeInsets)GetBGInsetWithType:(int)type;
-(void)dealloc;
-(id)init;
@end

@interface BubbleBgManager : NSObject <IIncrUpdateDelegate, WupTransportationProxyDelegate, QSHttpRequestDelegate> {
	NSMutableDictionary* _bubbleDictionary;
	NSString* _uin;
}
@property(readonly, assign, nonatomic) NSString* uin;
+(void)ReleaseInstance;
+(id)GetInstance;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)request:(id)request didReceiveData:(id)data;
-(void)downloadChatAvatarResourceWithUrl:(id)url userInfo:(id)info;
-(void)resetAvatarSuperVipIDOutOfDate;
-(id)GetChatAvatarSuperVipIDOutOfDate;
-(void)resetAvatarFristReciveMessage;
-(id)GetChatAvatarFristReciveMessage:(id)message;
-(void)resetAvatarFristSendMessageFlag;
-(id)GetChatAvatarFristSendMessage;
-(BOOL)handleWupSendResult:(int)result recvWupStruct:(CIMEngineMsgStruct*)aStruct userInfo:(id)info;
-(void)notifyRespPBBuffer:(const void*)buffer size:(int)size result:(int)result;
-(void)getReqPBBuffer:(char**)buffer buffEnd:(char**)end;
-(void)updateChatAvatarList:(id)list;
-(void)requestChatAvatarIDOrder:(id)order;
-(void)setChatAavtar:(id)aavtar;
-(id)getChatAvatarID;
-(id)getImpressionDrawingByChatAvatarID:(id)anId;
-(id)getCurrentChatAVatarIconByChatAvatarID:(id)anId;
-(id)getVisiableChatAvatarInfoArraySortByIndex;
-(id)getChatAvatarResourcePathByID:(id)anId;
-(int)getVisiableChatAvatarNum;
-(void)copySourceFolderToLibCaches;
-(BOOL)CreateImageFolders:(id)folders;
-(id)GetImageNames:(id)names;
-(id)GetBubbleInfoPlistPath;
-(id)GetBubbleSourcesPath;
-(id)getCurrentBubbleIconByChatAvatarID:(id)anId;
-(id)getBubbleImpressionDrawingFilePathByChatAvatarID:(id)anId;
-(id)getBubbleResourceFolderPathByChatAvatarID:(id)anId;
-(id)getBubbleResourceFolderNameByChatAvatarID:(id)anId;
-(BOOL)isCurrentFolderLibPath:(id)path;
-(BOOL)CrateBubbleImageSourcePath;
-(id)readImageSourcesWith:(id)with;
-(id)GetSourceFullPath:(id)path;
-(id)getBubbleInfoDic;
-(void)clearImageSouces;
-(id)GetBubbleBgInfoFor:(id)aFor;
-(void)handleQQThemeChangedNotification:(id)notification;
-(void)dealloc;
-(id)init;
@end

@interface QQLbsNearbyGroupViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, CFFootViewDelegate, UIActionSheetDelegate, UIAlertViewDelegate, NearbyGroupListStyleViewDelegate> {
	UIView* _contentView;
	UITableView* _tableView;
	CFFootView* _footerView;
	ODRefreshControl* _refreshControl;
	QQNobodyView* _nobodyView;
	BOOL _reloading;
	BOOL _bFetchNew;
	NSMutableArray* _dataList;
	NearByGroupRspInfo* _nearByGroupRspInfo;
	BOOL _isClickIng;
	CGSize _contentSize;
}
-(void).cxx_destruct;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)startRefresh:(id)refresh;
-(BOOL)getMoreData;
-(void)resetCilckMark;
-(void)onNearbyGroupListStyleViewClick:(id)click;
-(void)doneLoadingTableViewData:(id)data;
-(void)getDataTimeOut:(id)anOut;
-(void)getLocationFailCallback:(id)callback;
-(void)resetContentView;
-(void)getNearByGroupCallback:(id)callback;
-(id)getNobodyView;
-(void)forceUpdateNearByGroupList;
-(BOOL)refreshNearByGroupList;
-(void)viewDidAppear:(BOOL)view;
-(void)dropViewDidBeginRefreshing:(id)dropView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)reloadDataAfterDelay;
-(void)onResponseNearbyGroupListNotification:(id)notification;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface C2CRoamMessageInfo : NSObject <NSCoding> {
	NSString* _uin;
	long long _messageRandom;
	int _messageSeq;
	int _lastTime;
	BOOL _isComplete;
	int _state;
	int _faultTime;
	int _msgID;
	int _requestCount;
	BOOL _isFromOldTable;
	int _ssoSeq;
	BOOL _exception;
	int _loadCount;
}
@property(assign, nonatomic) int loadCount;
@property(assign, nonatomic) BOOL exception;
@property(assign, nonatomic) int ssoSeq;
@property(assign, nonatomic) BOOL isFromOldTable;
@property(assign, nonatomic) int requestCount;
@property(assign, nonatomic) int msgID;
@property(assign, nonatomic) int faultTime;
@property(assign, nonatomic) int state;
@property(assign, nonatomic) int lastTime;
@property(assign, nonatomic) BOOL isComplete;
@property(assign, nonatomic) int messageSeq;
@property(assign, nonatomic) long long messageRandom;
@property(retain, nonatomic) NSString* uin;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init:(id)init messageRandom:(int)random lastTime:(int)time faultTime:(int)time4 isComplete:(BOOL)complete state:(int)state;
@end

@interface QC2CRoamMessageService : NSObject <WupTransportationProxyDelegate> {
	NSOperationQueue* _operationQueue;
	NSMutableDictionary* _c2cInfomation;
	id<QC2CRoamMessageDelegate> _delegate;
	NSString* _uin;
	NSMutableDictionary* _delegateDic;
	NSMutableDictionary* _tmpMessageList;
	NSMutableDictionary* _minModelDic;
@private
	NSString* _toUin;
}
@property(retain, nonatomic) NSString* toUin;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) NSMutableDictionary* c2cInfomation;
@property(assign, nonatomic) id<QC2CRoamMessageDelegate> delegate;
+(id)shareInstance;
-(id)doCreateInvocation:(id)invocation selector:(SEL)selector object:(id)object;
-(id)doCreateInvocation:(id)invocation selector:(SEL)selector arg:(void*)arg;
-(void)doAsyncMessageTaskOp:(id)op selector:(SEL)selector object:(id)object;
-(void)clearTmpMessageList:(id)list;
-(id)getTmpMessageList:(id)list;
-(void)cacheTmpMessageList:(id)list msgList:(id)list2;
-(void)clearAllC2CRoamMessageInfo;
-(void)clearC2CRoamMessageInfo:(id)info;
-(void)clearAllC2CRoamMessageCache;
-(id)clearC2CRoamMessageCache:(id)cache;
-(void)setC2CInformationToIDEL:(id)idel;
-(void)deleteFriendMessage:(id)message;
-(void)clearChatMessageBuffer:(id)buffer;
-(void)runSelectorOnMainThread:(id)thread;
-(id)filterDeleteMsg:(id)msg msgList:(id)list;
-(id)getMinMessageModel:(id)model;
-(void)updateMinModel:(id)model msgList:(id)list;
-(void)updateC2CInformation:(id)information isComplete:(BOOL)complete faultTime:(int)time random:(long long)random isLocal:(BOOL)local;
-(id)storeC2CMessageList:(id)list isLocal:(BOOL)local info:(id)info;
-(void)storeC2CMessageList:(id)list isLocal:(BOOL)local;
-(void)actionRequestC2CRoamMessage:(id)message;
-(void)initInformation:(id)information msgTime:(int)time msgRandom:(int)random msgID:(int)anId isFromOldTable:(BOOL)oldTable delegate:(id)delegate;
-(void)syncGetC2CRoamMessage:(id)message msgTime:(int)time msgRandom:(int)random msgID:(int)anId isFromOldTable:(BOOL)oldTable delegate:(id)delegate;
-(void)getC2CRoamMessage:(id)message msgTime:(int)time msgRandom:(int)random msgID:(int)anId isFromOldTable:(BOOL)oldTable delegate:(id)delegate;
-(void)requestC2CRoamMessage:(id)message;
-(BOOL)handleWupSendResult:(int)result recvWupStruct:(CIMEngineMsgStruct*)aStruct userInfo:(id)info;
-(void)saveC2CInformation:(id)information;
-(void)changeC2CInformation:(id)information;
-(void)clearC2CInformation:(id)information;
-(id)loadC2CInformation:(id)information;
-(BOOL)saveC2CInformation;
-(id)c2cInformationPath:(id)path;
-(id)getC2CInformation:(id)information;
-(void)setC2CInformationForOneday:(id)oneday isComplete:(BOOL)complete random:(long long)random faultTime:(int)time;
-(void)setC2CInformation:(id)information isComplete:(BOOL)complete random:(long long)random faultTime:(int)time;
-(id)getC2CInformationKey:(id)key;
-(void)dealloc;
-(id)init;
@end

@interface QC2CRoamMessageTask : NSObject {
@private
	C2CRoamMessageInfo* _info;
	id<QC2CRoamMessageDelegate> _delegate;
}
@property(assign, nonatomic) id<QC2CRoamMessageDelegate> _delegate;
@property(retain, nonatomic) C2CRoamMessageInfo* _info;
-(id)generateCallbackData:(id)data msgList:(id)list local:(BOOL)local beSplite:(BOOL)splite;
-(void)getC2CRoamMessage:(id)message;
-(BOOL)needGetMoreMessageFromServer:(id)server;
-(BOOL)needGetMoreMessage:(int)message continuity:(BOOL)continuity count:(int)count reqCount:(int)count4;
-(id)getMinMessage:(id)message;
-(id)getValidMessageList:(id)list faultTime:(int)time;
-(id)getC2CRoamMessageFromDB:(id)db;
-(void)requestC2CRoamMessage:(id)message;
-(void)dealloc;
-(id)init:(id)init;
@end

@interface QQChatAvatarGuideViewController : QQViewController {
}
-(void)becomeVIPButtonPress:(id)press;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface QQChatAvatarSelectView : UIView {
	UIImage* _selectImage;
	UIImage* _checkBoxImage;
	NSMutableArray* _cellList;
	BOOL _allowMultiSelection;
	float _gapBetweenImageX;
	float _gapBetweenImageY;
	id<QQChatAvatarSelectViewDetegate> _delegate;
}
@property(assign, nonatomic) id<QQChatAvatarSelectViewDetegate> delegate;
@property(assign, nonatomic) float gapBetweenImageY;
@property(assign, nonatomic) float gapBetweenImageX;
@property(assign, nonatomic) BOOL allowMultiSelection;
-(void)onCellSelected:(id)selected;
-(void)setImageListForSelection:(id)selection;
-(void)setCellSelectedAtIndex:(int)index;
-(void)setCheckBoxImage:(id)image;
-(float)getViewHeight;
-(void)removeAllImages;
-(void)removeCheckBoxFromCell:(id)cell;
-(void)addCheckBoxOnCell:(id)cell;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQChatAvatarSettingViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, QQChatAvatarSelectViewDetegate, UIAlertViewDelegate> {
	NSString* _selectedChatAvatar;
	QQChatAvatarSelectView* _chatAvatarSelectView;
	UIImageView* _vipImageView;
	NSArray* _modelArray;
}
@property(retain, nonatomic) NSString* selectedChatAvatar;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)QQChatAvatarSelectView:(id)view didSelectCell:(id)cell;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onClickMoreDetailButton:(id)button;
-(void)gotoWebViewOfMoreDetailWithUrl:(id)url;
-(void)handleSetChatAvatarIDResult:(id)result;
-(id)genarateCellModels;
-(int)getShowIndexOfChatAvatar:(id)chatAvatar;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface QQImageButton : UIButton {
	UIImageView* _titleImageView;
	UILabel* _titleLabel;
	unsigned _lastState;
	NSMutableDictionary* _titleDic;
	NSMutableDictionary* _titleColorDic;
	NSMutableDictionary* _titileImageDic;
	NSMutableDictionary* _backgroundImageDic;
}
+(id)buttonWithType:(int)type;
-(BOOL)isSupportRightDragToGoBack;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)changeToState:(unsigned)state;
-(id)imageForState:(unsigned)state;
-(void)setExtraImage:(id)image forState:(unsigned)state;
-(void)setTitleShadowColor:(id)color forState:(unsigned)state;
-(void)setTitleFont:(id)font;
-(void)setTitleColor:(id)color forState:(unsigned)state;
-(void)setTitle:(id)title forState:(unsigned)state;
-(void)layoutSubviews;
-(void)dealloc;
-(void)doInit;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

@interface SecretfileConfigTools : NSObject {
	NSMutableDictionary* _info;
}
+(id)instance;
-(id)rotateImage:(id)image;
-(id)ChangeImageAlpha:(float)alpha srcImage:(id)image;
-(unsigned long long)getSecretFileIndentifier:(id)indentifier time:(int)time;
-(int)getLastestSelectedFlashModel;
-(void)saveSelectedFlashModel:(int)model;
-(int)getLastestSelectedDevice;
-(void)saveSelectedDevice:(int)device;
-(int)getLastestSelectedCountTime;
-(void)saveSelectedCountTime:(int)time;
-(void)saveSecretFileInfo:(id)info;
-(id)loadSecretFileInfo;
-(id)getGuidViewAnimationPoint;
-(void)setSendMark;
-(BOOL)isUsedToSend;
-(void)setAccessed;
-(BOOL)isFristAccess;
-(void)dealloc;
-(id)init;
@end

@interface SecretFileGuideViewController : UINavigationController <STScratchViewDelegate> {
	UIImageView* _backGroundView;
	UIImageView* _imgView;
	id<SecretFileGuideDelegate> _clickDelegate;
	NSTimer* _timer;
	STScratchView* _maskView;
	UIButton* _confirmButton;
	UILabel* _tipsLabel;
	NSArray* _arry;
	float _interval;
	float _totalSec;
	id _data;
}
@property(assign, nonatomic) id data;
@property(retain, nonatomic) UIImageView* imgView;
@property(assign, nonatomic) id<SecretFileGuideDelegate> clickDelegate;
-(void)notifyTouchMoved;
-(void)onKickOutLogin;
-(void)actionTouch:(id)touch;
-(void)eraseView;
-(void)onPeriod;
-(void)animationShowButtonAndLabel;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)init;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

@interface QQXMLMessageItem : NSObject {
	NSString* _title;
	NSString* _url;
	NSString* _cover;
	NSArray* _digests;
	NSString* _drawDigest;
	unsigned long _time;
}
@property(assign) unsigned long time;
@property(retain, nonatomic) NSArray* digests;
@property(retain, nonatomic) NSString* cover;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* title;
-(id)getDrawDigest;
-(void)dealloc;
@end

@interface QQXMLMessageMetadata : NSObject {
	NSString* _publisherId;
	NSString* _publisherName;
	unsigned long long _publishTime;
}
@property(retain, nonatomic) NSString* publisherName;
@property(retain, nonatomic) NSString* publisherId;
@property(assign, nonatomic) unsigned long long publishTime;
-(void)dealloc;
@end

@interface QQXMLMessage : QQModel {
	QQXMLMessageMetadata* _meta;
	NSArray* _items;
}
@property(retain, nonatomic) NSArray* items;
@property(retain, nonatomic) QQXMLMessageMetadata* meta;
-(int)getXMLMessageType;
-(void)dealloc;
@end

@interface QQXMLMessageParser : NSObject {
}
+(id)parse:(const char*)parse length:(int)length;
+(id)parse:(id)parse;
@end

@interface ODRefreshControl : UIControl {
	CAShapeLayer* _shapeLayer;
	CAShapeLayer* _arrowLayer;
	CAShapeLayer* _highlightLayer;
	UIView* _activity;
	BOOL _refreshing;
	BOOL _canRefresh;
	BOOL _ignoreInset;
	BOOL _ignoreOffset;
	BOOL _didSetInset;
	BOOL _hasSectionHeaders;
	float _lastOffset;
	UILabel* _timeLable;
	UIView* _successView;
	float _timeLableHeight;
	float _maxDragLength;
	BOOL _showTimeLable;
	NSString* _refreshTimeKey;
	int _arrawFillColorKey;
	int _shapeFillColorKey;
	int _shapeStrokeColorKey;
	UIImageView* _successImage;
	UILabel* _successLable;
	UIView* _failView;
	UIImageView* _failImage;
	UILabel* _failLable;
	BOOL _animated;
@private
	UIColor* _tintColor;
	UIScrollView* _scrollView;
	UIEdgeInsets _originalContentInset;
}
@property(assign, nonatomic) UIEdgeInsets originalContentInset;
@property(assign, nonatomic) UIScrollView* scrollView;
@property(readonly, assign, nonatomic) UILabel* timeLable;
@property(readonly, assign, nonatomic) UILabel* successLable;
@property(readonly, assign, nonatomic) UIImageView* successImage;
@property(retain, nonatomic) NSString* refreshTimeKey;
@property(readonly, assign, nonatomic) UIView* activity;
@property(retain, nonatomic) UIColor* activityIndicatorViewColor;
@property(assign, nonatomic) int activityIndicatorViewStyle;
@property(retain, nonatomic) UIColor* tintColor;
@property(assign, nonatomic) BOOL refreshing;
-(void).cxx_destruct;
-(void)setLastRefreshTime:(id)time forTimeKey:(id)timeKey;
-(void)endRefreshingWithFailTips;
-(void)endRefreshing:(BOOL)refreshing withTimeLableShow:(BOOL)timeLableShow;
-(void)endRefreshing:(BOOL)refreshing;
-(void)endRefreshing;
-(void)beginRefreshing;
-(void)animationEnded;
-(void)setScrollViewContentInset:(UIEdgeInsets)inset;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)willMoveToSuperview:(id)superview;
-(void)setTimeLableShow:(BOOL)show;
-(void)setEnabled:(BOOL)enabled;
-(void)reloadAppearance;
-(void)dealloc;
-(void)setArrawFillColorKey:(int)key;
-(void)setShapeStrokeColorKey:(int)key;
-(void)setShapeFillColorKey:(int)key;
-(void)setArrawFillColor:(id)color;
-(void)setShapeStrokeColor:(id)color;
-(void)setShapeFillColor:(id)color;
-(id)initInScrollView:(id)scrollView activityIndicatorView:(id)view;
-(id)initInScrollView:(id)scrollView refreshTimeKey:(id)key;
-(id)initInScrollView:(id)scrollView;
@end

@interface QQF2FMessageSender : QQPbMsgSenderBase <IC2CTypeMsgRemoveDuplicateRelateMarkGenerator> {
	int _lastRandom;
	short _lastDivSeq;
}
+(id)getInstance;
-(void)GenRemoveDuplicateRelateMark:(C2C_DUPLICATE_RELATEMARK*)mark GenInputParam:(C2C_DUPLICATE_RELATEMARK_GEN_INPUT_PARAM*)param;
-(BOOL)OnReceiveSendMsgRespOfSendSeq:(unsigned long)sendSeq ResultCode:(unsigned long)code ErrMsg:(const basic_string<char, std::char_traits<char>, std::allocator<char> >*)msg ReqSendTimeFromServer:(unsigned long)server;
-(int)sendMarketFaceMsg:(id)msg toUin:(long long)uin msgTime:(int)time msgId:(int)anId pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgSeq:(unsigned)seq8 msgRandom:(unsigned)random;
-(int)sendImgMsg:(id)msg toUin:(long long)uin msgTime:(int)time msgId:(int)anId pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgSeq:(unsigned)seq8 msgRandom:(unsigned)random shareAppInfo:(id)info;
-(int)sendMsg:(id)msg toUin:(long long)uin msgTime:(int)time msgId:(int)anId pkgNum:(BOOL)num pkgIndex:(BOOL)index divSeq:(short)seq msgSeq:(unsigned)seq8 msgRandom:(unsigned)random shareAppInfo:(id)info;
-(id)init;
-(RoutingHead*)GenRoutingHeadToUin:(unsigned long long)uin;
-(id)SendingModelToUin:(long long)uin TimeStamp:(int)stamp MsgId:(int)anId pkgNum:(BOOL)num divSeq:(short)seq DispContent:(id)content;
@end

@interface QQGlobalColor : NSObject {
}
+(id)getInstance;
-(void)dealloc;
@end

@interface QQThemeManager : NSObject <UIAlertViewDelegate> {
@private
	unsigned _currThemeId;
	NSDictionary* _skinDefaultPlist;
	NSDictionary* _skinCurrentPlist;
	NSMutableArray* _themeList;
	NSMutableDictionary* _configDict;
	UIImage* _bgImage;
	QQThemeDownloadEngine* _downloadEngine;
}
@property(readonly, assign, nonatomic) unsigned currThemeId;
+(id)getInstance;
-(id)getCurrendThemeBundleID;
-(int)getDownloadThemeCount;
-(id)getCurrentThemeViewControllerBg;
-(id)getCurrentThemeChatBgIcon;
-(id)getCurrentThemeChatBg;
-(id)getCurrentThemeChatBgThumb;
-(BOOL)isCurrentThemeHasChatBg;
-(void)handleQQThemeDownloadStatusNotification:(id)notification;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)pauseThemeDownload:(id)download;
-(void)requestThemeDownload:(id)download;
-(void)setTheme:(id)theme;
-(void)reloadUIAppearance;
-(id)getThemeById:(unsigned)anId;
-(void)setNewThemeList:(id)list;
-(void)showNoneWifiTips:(id)tips;
-(void)showNoNetworkTips;
-(void)showThemeUpdateTips:(id)tips;
-(id)getThemeList;
-(void)loadThemeList;
-(void)reloadCurrentTheme;
-(void)dealloc;
-(id)init;
@end

@interface QQBaseSkinConfig : NSObject {
}
+(id)getConfigKey;
+(id)getInstance;
-(void)setViewAppearance:(id)appearance;
-(void)setConfigValues:(id)values;
@end

@interface QQColorConfig : QQBaseSkinConfig {
}
+(id)getConfigKey;
+(id)getInstance;
-(void)setConfigValues:(id)values;
-(void)setColorValue:(id)value colorKey:(id)key colorType:(int)type;
@end

@interface QQSetupRelatedTableViewCell : UITableViewCell {
	UIImageView* _newTipView;
	UILabel* _contentTitle;
	QQAccountItem* _item;
	NSIndexPath* _indexPath;
	QQSkinSwitch* _switchBtn;
	id _callObject;
	id _viewController;
}
@property(retain, nonatomic) id viewController;
@property(retain, nonatomic) id callObject;
@property(retain, nonatomic) QQSkinSwitch* switchBtn;
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(retain, nonatomic) QQAccountItem* item;
@property(retain, nonatomic) UILabel* contentTitle;
@property(retain, nonatomic) UIImageView* redDot;
-(void)clickSwitch:(id)aSwitch;
-(id)GetValueForKey:(id)key;
-(void)drawViewCell;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier object:(id)object viewController:(id)controller Item:(id)item;
@end

@interface QQXMLMessagePictureView : QQXMLMessageBaseView <QQChatImageMetaInfoObserver> {
	NSString* _coverUrl;
	UIImage* _coverImage;
	CGSize _maxSize;
	QQChatImageMetaInfo* _metaInfo;
	UIActivityIndicatorView* _indicatorView;
}
@property(assign, nonatomic) CGSize maxSize;
-(void)onImageDownloadResult:(id)result;
-(void)drawRect:(CGRect)rect;
-(void)setCoverUrl:(id)url;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQXMLRichMessageSingleTypeCellView : QQXMLMessageBaseView {
	NSString* _title;
	NSString* _publishTime;
	NSString* _digest;
	NSString* _coverUrl;
	QQXMLMessagePictureView* _coverView;
}
@property(retain, nonatomic) NSString* coverUrl;
@property(retain, nonatomic) NSString* digest;
@property(retain, nonatomic) NSString* publishTime;
@property(retain, nonatomic) NSString* title;
+(int)getCellHeight:(id)height;
-(void)setHighlighted:(BOOL)highlighted;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MarketFaceInfo : NSObject {
	unsigned _tabID;
	NSData* _faceID;
	int _subType;
	NSData* _faceKey;
	NSString* _faceName;
	NSString* _text;
	NSString* _modelContent;
	int _index;
}
@property(assign, nonatomic) int index;
@property(readonly, assign, nonatomic) NSString* modelContent;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* faceName;
@property(retain, nonatomic) NSData* faceKey;
@property(assign, nonatomic) int subType;
@property(retain, nonatomic) NSData* faceID;
@property(assign, nonatomic) unsigned tabID;
-(void)dealloc;
-(id)description;
-(id)initWithMarketFaceInfoString:(id)marketFaceInfoString;
-(id)initWithMarketFaceInfoBuf:(const char*)marketFaceInfoBuf length:(unsigned)length;
-(id)init;
@end

@interface QQXMLRichMessageMultiTypeCellView : QQXMLMessageBaseView {
	NSArray* _messageItems;
	NSMutableArray* _pictureViews;
}
+(int)getCellHeight:(id)height;
-(void)LongPressedEnded;
-(void)setIsLongPressed;
-(void)setMessageItems:(id)items;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQXMLRichMessageHeadView : QQXMLMessageBaseView {
	QQXMLMessagePictureView* _coverView;
}
-(void)dealloc;
-(id)bigCoverTitleView:(id)view;
-(id)initWithFrame:(CGRect)frame messageItem:(id)item;
@end

@interface QQXMLRichMessageItemView : QQXMLMessageBaseView {
	QQXMLMessageItem* _messageItem;
	QQXMLMessagePictureView* _coverView;
}
-(void)drawRect:(CGRect)rect;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame messageItem:(id)item;
@end

@interface WebViewJsViewController : QQViewController <UIWebViewDelegate> {
	UIWebView* _webView;
	BOOL _bNoWlanSelectDownload;
	BOOL _bSelected;
	BOOL _bIsStopDownloadOperation;
	id _callbackId;
	id _showMsgBoxCallbackId;
	id _stopDownloadEmojiCallbackId;
	id _openPageCallbackId;
	id _getPerformanceCallbackId;
	NSMutableArray* _emojiPackInfoArray;
	NSMutableDictionary* _emojiPackDict;
	NSMutableArray* _arrPageName;
	int _errCode;
	int _rdmSeqLoadPage;
	int _rdmSeqPullKey;
	int _rdmSeqClickToPageStart;
	int _rdmSeqClickToPageFinish;
	int _nPullKeyBegin;
	int _nLoadPageBegin;
	NSDictionary* dictConfig;
	NSString* strIndexUrl;
	NSString* strIndexSession;
	NSString* strDetailUrl;
	NSString* strDetailSession;
	BOOL _bFirstStart;
	BOOL _bFirstFinish;
	double _nClickStart;
	double _nPageStart;
	double _nPageFinish;
	int _enterSource;
@private
	WebViewJavascriptBridge* _bridge;
	NSString* _token;
	BOOL _bOpenDetailpage;
	NSString* _packID;
	int _operationType;
	UIActivityIndicatorView* _aiView;
	UINavigationBar* _navBar;
}
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)callJSFunc;
-(void)sendToJS;
-(void)callbackToJs:(id)js callbackID:(id)anId;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)managerBtnClicked:(id)clicked;
-(void)rightBtnCloseClicked:(id)clicked;
-(void)leftButtonClick:(id)click;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)LoadPage;
-(void)ActRequestStwebToken:(id)token;
-(id)GetClientKey;
-(BOOL)ReadConfig;
-(void)asyncDownloadConfig;
-(id)initWithDetailPackID:(id)detailPackID operationType:(int)type enterSource:(int)source;
-(id)initWithEnterSource:(int)enterSource;
-(void)didReceiveMemoryWarning;
-(BOOL)shouldAutorotate;
-(void)dealloc;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)view;
-(double)getTimeSince1970;
-(int)mxGetTickCount;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface WebViewJavascriptBridge : NSObject <UIWebViewDelegate> {
@private
	NSMutableDictionary* _responseCallbacks;
	id<UIWebViewDelegate> _webViewDelegate;
	NSMutableDictionary* _messageHandlers;
	UIWebView* _webView;
	NSMutableArray* _startupMessageQueue;
	id _messageHandler;
	int _uniqueId;
}
@property(copy, nonatomic) id messageHandler;
@property(assign, nonatomic) id<UIWebViewDelegate> webViewDelegate;
@property(retain, nonatomic) UIWebView* webView;
@property(assign) int uniqueId;
@property(retain, nonatomic) NSMutableDictionary* messageHandlers;
@property(retain, nonatomic) NSMutableDictionary* responseCallbacks;
@property(retain, nonatomic) NSMutableArray* startupMessageQueue;
+(void)enableLogging;
+(id)bridgeForWebView:(id)webView webViewDelegate:(id)delegate handler:(id)handler;
+(id)bridgeForWebView:(id)webView handler:(id)handler;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)_log:(id)log json:(id)json;
-(id)_deserializeMessageJSON:(id)json;
-(id)m_serializeMessage:(id)message;
-(void)_flushMessageQueue;
-(void)m_dispatchMessage:(id)message;
-(void)unRegisterAllHandler;
-(void)_queueMessage:(id)message;
-(void)_sendData:(id)data responseCallback:(id)callback handlerName:(id)name;
-(void)reset;
-(void)registerHandler:(id)handler handler:(id)handler2;
-(void)callHandler:(id)handler data:(id)data responseCallback:(id)callback;
-(void)callHandler:(id)handler data:(id)data;
-(void)callHandler:(id)handler;
-(void)send:(id)send responseCallback:(id)callback;
-(void)send:(id)send;
-(void)dealloc;
@end

@interface NormalC2CMsgInfo : NSObject {
	int _msgId;
	int _msgTime;
	long long _fromUin;
	long long _toUin;
	int _richSrcType;
}
@property(assign, nonatomic) int richSrcType;
@property(assign, nonatomic) long long toUin;
@property(assign, nonatomic) long long fromUin;
@property(assign, nonatomic) int msgTime;
@property(assign, nonatomic) int msgId;
-(id)description;
-(id)initWithQQMessageModel:(id)qqmessageModel;
@end

@interface C2CPttDownloadReq : NSObject {
	NSString* _UUid;
	NormalC2CMsgInfo* _C2CMsgInfo;
	BOOL _bDownloaderIsPttSender;
}
@property(readonly, assign, nonatomic) BOOL bDownloaderIsPttSender;
@property(retain, nonatomic) NormalC2CMsgInfo* C2CMsgInfo;
@property(retain, nonatomic) NSString* UUid;
-(id)description;
-(id)PttSrcTypeStr:(int)str;
-(void)dealloc;
-(id)initWithQQMessageModel:(id)qqmessageModel;
-(id)init;
@end

@interface C2CPttDownloadTask : NSObject {
	C2CPttDownloadReq* _pReq;
	int _nCmdHadTryCnt;
	int _nHttpDownloadHadTryCnt;
	int _nHttpDownloadSessionId;
}
@property(assign, nonatomic) int nHttpDownloadSessionId;
@property(assign, nonatomic) int nHttpDownloadHadTryCnt;
@property(assign, nonatomic) int nCmdHadTryCnt;
@property(retain, nonatomic) C2CPttDownloadReq* pDownloadReq;
-(void)dealloc;
-(id)init;
@end

@interface C2CPttTransferManager : NSObject <IHttpStateDelegate> {
	NSMutableDictionary* _dictC2CPttDownloadTask;
}
+(id)GetInstance;
-(void)onHttpState:(int)state transferType:(int)type success:(BOOL)success error:(id)error;
-(void)notifyDownloadSucReqResult:(BOOL)result SsoSeq:(int)seq Err:(id)err;
-(void)notifyDownloadReqResult:(BOOL)result SsoSeq:(int)seq Err:(id)err DownloadUrl:(id)url;
-(void)DownloadPtt:(id)ptt;
-(void)dealloc;
-(BOOL)DownloadPttWithTask:(id)task;
-(id)serverUUidConvertToClient:(id)client;
-(id)clientUUidConvertToServer:(id)server;
-(int)SendDownloadSucReqToServer:(int)server;
-(BOOL)GenSsoCmdOfDownloadPttSuc:(int)downloadPttSuc SsoCmd:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)cmd;
-(id)TaskWithSessionId:(int)sessionId;
-(void)RemoveC2CPttDownloadTaskWithHttpSessionId:(int)httpSessionId;
-(void)UpdateDownloadPttState:(id)state success:(BOOL)success error:(id)error;
-(BOOL)CachePttDownloadTask:(id)task withSeq:(int)seq;
-(id)DictOfC2CPttDownloadTask;
-(BOOL)GenSsoCmdOfDownloadPtt:(int)downloadPtt SsoCmd:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)cmd;
@end

@interface NearbyGroupEntertCardStyleView : UIView {
	UIImageView* _headImgView;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setHighlighted:(BOOL)highlighted;
-(void)updateAllData:(id)data;
-(id)initWithFrame:(CGRect)frame;
@end

@interface NearbyGroupEntertListStyleView : UIView {
	UIImageView* _bgImgView;
	UIImageView* _headImgView;
	UILabel* _groupName;
	UILabel* _groupRadius;
	UILabel* _groupIntro;
	UIImageView* _moreIcon;
	BOOL _highLighted;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setHighlighted:(BOOL)highlighted;
-(void)layoutView;
-(void)updateAllData:(id)data;
-(id)initWithFrame:(CGRect)frame;
@end

@interface NearbyGroupListStyleView : UIView {
	UIImageView* _bgImgView;
	QQAsynHeadImageView* _headImgView;
	UILabel* _groupName;
	UILabel* _groupmemberNum;
	UILabel* _locationName;
	UILabel* _groupIntro;
	UIImageView* _activeMark;
	UIImageView* _locationIcon;
	BOOL _highLighted;
	NearByGroupModel* _nearByGroupModel;
	id<NearbyGroupListStyleViewDelegate> _delegate;
}
@property(assign, nonatomic) id<NearbyGroupListStyleViewDelegate> delegate;
-(void).cxx_destruct;
-(void)setHighlightedDelay:(id)delay;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setHighlighted:(BOOL)highlighted;
-(void)layoutView;
-(void)updateAllData:(id)data;
-(id)initWithFrame:(CGRect)frame;
@end

@interface NearByGroupEnterModel : QQModel {
	int _radius;
	NSMutableArray* _nearByGroupList;
}
@property(retain, nonatomic) NSMutableArray* nearByGroupList;
@property(assign, nonatomic) int radius;
-(void).cxx_destruct;
-(id)init;
@end

@interface NearByGroupModel : QQModel {
	long long _uin;
	int _memberNum;
	int _distance;
	int _faceId;
	BOOL _isAlive;
	NSString* _name;
	NSString* _location;
	NSString* _intro;
}
@property(retain, nonatomic) NSString* intro;
@property(retain, nonatomic) NSString* location;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) BOOL isAlive;
@property(assign, nonatomic) int faceId;
@property(assign, nonatomic) int ditance;
@property(assign, nonatomic) int memberNum;
@property(assign, nonatomic) long long uin;
-(void).cxx_destruct;
@end

@interface QQRecentMsgTableOperation : QQC2CMsgTableOperation_Multiple {
@private
	CDBMaxMsgIdManager* maxIdManager;
}
-(BOOL)updateRecentMsgWithSendResultMoedls:(id)sendResultMoedls inDb:(id)db;
-(id)getRecentHelloMsg:(id)msg;
-(id)getRecentC2CMsg:(id)msg;
-(void)insertRecentMsg:(id)msg inDb:(id)db;
-(void)dealloc;
-(void)createindex:(id)createindex inDb:(id)db;
-(id)init;
@end

@interface QQXMLRichMessageMultiTypeCell : QQXMLRichMessageBaseCell {
}
+(id)getCellIdentifier;
+(int)getCellHeight:(id)height;
-(void)setXMLMessage:(id)message;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQFaceStoreFrameView : QQFaceFrameView {
}
-(void)addStoreFace:(id)face;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFaceCell : NSObject {
	int _state;
	CGRect _frame;
	UIImage* _image;
	id _data;
}
@property(retain, nonatomic) id data;
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) CGRect frame;
@property(assign, nonatomic) int state;
-(void)dealloc;
-(id)init;
@end

@interface QQFaceFrameView : UIView {
	unsigned _rowPerPage;
	unsigned _columnPerPage;
	float _pageWidth;
	UIEdgeInsets _pageInsets;
	CGSize _cellGap;
	NSMutableArray* _cells;
}
@property(assign, nonatomic) UIEdgeInsets pageInsets;
@property(assign, nonatomic) float pageWidth;
@property(assign, nonatomic) unsigned columnPerPage;
@property(assign, nonatomic) unsigned rowPerPage;
+(void)initialize;
-(id)cellForTouchPoint:(CGPoint)touchPoint;
-(CGRect)cellFrameByIndex:(unsigned)index;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFaceStoreKeyBoard : QQFaceKeyBoard <QQFaceStoreOutdateViewDelegate, UIAlertViewDelegate> {
	EmojiPackageInfo* _package;
	QQFaceStoreOutdateView* _outdateView;
}
-(void)sendDragedFace:(id)face;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onCancelDownload:(id)download;
-(void)onDownload:(id)download;
-(void)loadFaceOutdateView;
-(BOOL)isFaceOutdate;
-(id)imagePathForCell:(id)cell;
-(void)loadFace;
-(void)dealloc;
-(id)initWithPackageInfo:(id)packageInfo;
@end

@interface QQFaceKeyBoard : UIView <UIScrollViewDelegate> {
	int _tabID;
	TXScrollView* _scrollView;
	QQPageControl* _pageControl;
	QQFacePreview* _preview;
	QQFaceFrameView* _frameView;
	NSObject<QQFaceKeyBoardDelegate>* _delegate;
}
@property(assign, nonatomic) NSObject<QQFaceKeyBoardDelegate>* delegate;
@property(assign, nonatomic) int tabID;
-(void)sendDragedFace:(id)face;
-(void)animatePreviewToChatTable;
-(void)ragedFacePositionDidAnimated:(id)ragedFacePosition;
-(void)animatePreviewToPosition:(CGPoint)position;
-(void)movePreviewToCGPoint:(CGPoint)cgpoint;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)checkPreviewState:(id)state;
-(void)onPanGesture:(id)gesture;
-(void)pageControlDidChange:(id)pageControl;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)imagePathForCell:(id)cell;
-(int)previewStyleByCell:(id)cell;
-(int)previewStyle;
-(void)loadFace;
-(unsigned)columnPerPage;
-(unsigned)rowPerPage;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQXMLRichMessageSingleTypeCell : QQXMLRichMessageBaseCell {
}
+(id)getCellIdentifier;
+(int)getCellHeight:(id)height;
-(void)setXMLMessage:(id)message;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQXMLMessageBaseView : UIView {
	BOOL _highlighted;
	BOOL _isLongPress;
	BOOL _isHandleTouch;
	NSString* _actionUrl;
	id<QQXMLRichMessageCellViewDelegate> _delegate;
	UIImage* _bgImageNormal;
	UIImage* _bgImageSelected;
}
@property(retain, nonatomic) UIImage* bgImageSelected;
@property(retain, nonatomic) UIImage* bgImageNormal;
@property(assign, nonatomic) id<QQXMLRichMessageCellViewDelegate> delegate;
@property(retain, nonatomic) NSString* actionUrl;
-(void)LongPressedEnded;
-(void)setIsLongPressed;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setHighlighted:(BOOL)highlighted;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQThemeSettingViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, QQThemePreviewViewDelegate> {
@private
	NSMutableArray* _themeList;
	UITableView* _tableView;
}
-(void)handleQQThemeNewListNotification:(id)notification;
-(void)QQThemePreviewViewDidClicked:(id)qqthemePreviewView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface RecentMsgDBService : NSObject <IRecentMsgDBService> {
@private
	QQDBRecentMsg* _recentMsg;
}
-(void)messageFlagForRecent:(id)recent;
-(int)asyncUpdateRecentMsgWithSendResultModels:(id)sendResultModels userdata:(id)userdata callback:(id)callback;
-(void)deleteMsgsWithUin:(id)uin;
-(void)setReadForUin:(id)uin;
-(void)InsertRecentC2CMsg:(id)msg;
-(id)loadRecentMessage;
-(void)dealloc;
-(id)init;
@end

@interface QQSecretFileHandler : QQBaseC2CMsgHandler {
}
+(id)getInstance;
-(void)startDownloadImage:(id)image fromUin:(id)uin toUin:(id)uin3;
-(id)handleMsg:(Msg*)msg;
-(void)dealloc;
-(id)init;
@end

@interface QQFaceHistoryKeyBoard : QQFaceKeyBoard {
@private
	NSString* _uin;
	id _textDelegate;
	BOOL _marketFaceSupported;
}
@property(assign, nonatomic) id textDelegate;
@property(assign, nonatomic) BOOL marketFaceSupported;
@property(copy, nonatomic) NSString* uin;
-(void)sendDragedCustomFace:(id)face;
-(void)sendDragedStoreFace:(id)face;
-(void)sendDragedEmojiFace:(id)face;
-(void)sendDragedSystemFace:(id)face;
-(void)sendDragedFace:(id)face;
-(void)dealloc;
-(id)filterMarketFaces:(id)faces;
-(id)imagePathForCell:(id)cell;
-(void)onHistoryEmojisChanged:(id)changed;
-(void)loadFace;
-(id)initWithUin:(id)uin;
@end

@interface QQFaceHistoryFrameView : QQFaceFrameView {
	NSString* _uin;
}
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)addFaceCellWithInfo:(id)info;
-(void)insertFaceCellWithInfo:(id)info atIndex:(int)index;
-(void)updateFace:(id)face;
-(void)loadFace:(id)face uin:(id)uin;
-(id)initWithFrame:(CGRect)frame;
@end

@interface RichMediaUtil : NSObject {
}
+(id)createHttpUrl:(unsigned)url port:(unsigned)port;
+(BOOL)isPttExist:(id)exist;
+(int)isPicExist:(id)exist appShareId:(long long)anId isDownSelf:(BOOL)aSelf getPicSizeType:(int)type uuid:(id)uuid;
+(BOOL)isCustomFaceExist:(id)exist appShareId:(long long)anId isDownSelf:(BOOL)aSelf getPicSizeType:(int)type uuid:(id)uuid;
+(id)createCustomPttError:(int)error errorDesc:(id)desc errMsg:(id)msg;
+(id)createCustomPicError:(int)error errorDesc:(id)desc errMsg:(id)msg;
@end

@interface EmojiHistoryInfo : NSObject <NSCoding> {
@private
	NSString* _customFaceName;
	NSString* _emojiStr;
	int _faceId;
	int _tabId;
	NSString* _key;
	NSString* _emojiId;
	unsigned _packageId;
}
@property(copy, nonatomic) NSString* key;
@property(copy, nonatomic) NSString* emojiId;
@property(assign, nonatomic) unsigned packageId;
@property(copy, nonatomic) NSString* customFaceName;
@property(copy, nonatomic) NSString* emojiStr;
@property(assign, nonatomic) int faceId;
@property(assign, nonatomic) int tabId;
-(BOOL)isEqual:(id)equal;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@interface QQThemePreviewView : UIView <ICoreMotionObserver> {
	QQThemeModel* _model;
	UIImageView* _selectedView;
	UIImageView* _selectedBgView;
	QQAsynUrlImageView* _thumbView;
	id<QQThemePreviewViewDelegate> _delegate;
@private
	QQThemeStatusView* _statusView;
	id<ICoreMotionService> _motionService;
}
@property(assign, nonatomic) id<QQThemePreviewViewDelegate> delegate;
@property(retain, nonatomic) QQThemeModel* model;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)notifyAccelermoterUpdated:(id)updated;
-(void)handleQQThemeChangedNotification:(id)notification;
-(void)handleQQThemeDownloadStatusNotification:(id)notification;
-(void)updateViewStatus;
-(void)setThemeModel:(id)model;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface ThemeStatusModel : NSObject {
@private
	int downloadSize;
	int size;
	int status;
}
@property(assign, nonatomic) int status;
@property(assign, nonatomic) int size;
@property(assign, nonatomic) int downloadSize;
-(BOOL)isEqual:(id)equal;
-(id)initWithThemeModel:(id)themeModel;
@end

@interface QQThemeStatusView : UIView {
	int _status;
	QQThemeModel* _model;
	BOOL _isAnimated;
	UIImageView* _bgView;
	UIImageView* _downloadIcon;
	UILabel* _statusLabel;
	ProgressImageStyle* _progressView;
	NSMutableArray* _actionSeq;
}
-(void)performAction:(id)action;
-(void)performNextAction;
-(void)updateViewStatus;
-(void)setThemeModel:(id)model;
-(void)updateAllControlByThemeModel:(id)model;
-(void)updateBgViewByThemeModel:(id)model;
-(void)updateProgressViewByThemeModel:(id)model;
-(void)updateDownloadIconByThemeModel:(id)model;
-(void)updateStatusLabelByThemeModel:(id)model;
-(id)getStatusLabelTextByThemeModel:(id)model;
-(id)getMBString:(int)string;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQThemeDownloadEngine : NSObject <QQThemeDownloadTaskDelegate> {
	NSMutableArray* _downloadList;
@private
	QQThemeDownloadTask* _currTask;
}
+(id)getInstance;
-(void)QQThemeDownloadTaskFailed:(id)failed;
-(void)QQThemeDownloadTaskDidFinished:(id)qqthemeDownloadTask;
-(void)cancelThemeDownload:(id)download;
-(void)requestThemeDownload:(id)download;
-(void)removeThemeTaskByThemeModel:(id)model;
-(id)getNextTask;
-(void)dealloc;
-(id)init;
@end

@interface QQThemeModel : NSObject {
	unsigned _themeId;
	NSString* _title;
	NSString* _bundleId;
	NSString* _thumbUrl;
	NSString* _downloadUrl;
	NSString* _author;
	NSString* _version;
	NSData* _md5;
	int _status;
	int _size;
	int _downloadSize;
	NSString* _themePath;
	NSDictionary* _themeConfig;
}
@property(assign, nonatomic) int downloadSize;
@property(assign, nonatomic) int size;
@property(assign, nonatomic) int status;
@property(retain, nonatomic) NSData* md5;
@property(retain, nonatomic) NSString* version;
@property(retain, nonatomic) NSString* author;
@property(retain, nonatomic) NSString* downloadUrl;
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* bundleId;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) unsigned themeId;
-(BOOL)isNeedsUpdate;
-(BOOL)isSelected;
-(void)resetThemeConfig;
-(id)getThemeConfig;
-(id)getThemePath;
-(BOOL)isEqual:(id)equal;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

@interface QQFaceEmojiLabel : UIView {
	NSString* _text;
	CGPoint _position;
}
@property(retain, nonatomic) NSString* text;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFacePreview : UIView {
	int _style;
	UIImageView* _storeFaceBackView;
	UIImageView* _storeFaceView;
	UIImageView* _systemFaceBackView;
	UIImageView* _systemFaceView;
	QQFaceEmojiLabel* _emojiFaceLabel;
}
-(void)restoreSystemFaceSize:(id)size;
-(void)enlargeSystemFace;
-(void)drawSystemFace:(id)face;
-(void)hidePreview;
-(void)showPreviewWithImagePath:(id)imagePath atPoint:(CGPoint)point withStyle:(int)style;
-(BOOL)isVisible;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithStyle:(int)style;
@end

@interface QQFaceStoreOutdateView : UIView {
	id<QQFaceStoreOutdateViewDelegate> _delegate;
	int _state;
	UIImageView* _coverImageView;
	UILabel* _notifyLatel;
	UIButton* _downloadButton;
	UIProgressView* _progressView;
	UILabel* _downloadLabel;
	UIButton* _cancelDownloadButton;
}
@property(assign, nonatomic) int state;
@property(assign, nonatomic) id<QQFaceStoreOutdateViewDelegate> delegate;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setProgress:(float)progress;
-(void)setCoverImage:(id)image;
-(void)reloadView;
-(void)onCancelDownload:(id)download;
-(void)onDownload:(id)download;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQThemeDownloadTask : NSObject <FileAssistantDownloadTransferDelegate> {
	QQThemeModel* _model;
	FileAssistantDownloadTransfer* _transfer;
	id<QQThemeDownloadTaskDelegate> _delegate;
}
@property(assign, nonatomic) id<QQThemeDownloadTaskDelegate> delegate;
@property(retain, nonatomic) QQThemeModel* model;
-(void)FileAssistantDownloadTransfer:(id)transfer curTransSize:(long long)size totalTransSize:(long long)size3;
-(void)FileAssistantDownloadTransfer:(id)transfer didFinished:(int)finished;
-(void)unZipThemePacket;
-(void)cancelDownload;
-(void)startDownload;
-(void)dealloc;
-(id)initWithThemeModel:(id)themeModel;
@end

@interface WupDelegateInfo : NSObject {
	int _delegateType;
	id<WupTransportationProxyDelegate> _delegate;
	id _callbackBlock;
}
@property(copy, nonatomic) id callbackBlock;
@property(retain, nonatomic) id<WupTransportationProxyDelegate> delegate;
@property(assign, nonatomic) int delegateType;
-(void)dealloc;
-(id)initWithBlock:(id)block;
-(id)initWithDelegate:(id)delegate;
-(id)init;
@end

@interface WupTransportationProxy : NSObject <IPacketSendResultHandler> {
	NSMutableDictionary* _delegateDic;
}
+(id)GetInstance;
-(void)test;
-(BOOL)handleRecivedPacket:(char*)packet bufferLength:(int)length sendingModel:(id)model;
-(void)notifyMsgSentResult:(id)result result:(int)result2;
-(BOOL)handleResult:(int)result wupStruct:(CIMEngineMsgStruct*)aStruct userInfo:(id)info delegateInfo:(id)info4;
-(int)sendWupBuffer:(char*)buffer cmd:(id)cmd timeOut:(int)anOut retryCount:(int)count sendResultCallback:(id)callback userInfo:(id)info;
-(int)sendWupBuffer:(char*)buffer cmd:(id)cmd timeOut:(int)anOut retryCount:(int)count delegate:(id)delegate userInfo:(id)info;
-(int)sendWupBuffer:(char*)buffer seqid:(int)seqid cmd:(id)cmd timeOut:(int)anOut retryCount:(int)count userInfo:(id)info;
-(int)sendWupBuffer:(char*)buffer cmd:(id)cmd timeOut:(int)anOut sendResultCallback:(id)callback userInfo:(id)info;
-(int)sendWupBuffer:(char*)buffer cmd:(id)cmd timeOut:(int)anOut delegate:(id)delegate userInfo:(id)info;
-(int)sendWupBuffer:(char*)buffer cmd:(id)cmd timeOut:(int)anOut sendResultCallback:(id)callback;
-(int)sendWupBuffer:(char*)buffer cmd:(id)cmd timeOut:(int)anOut delegate:(id)delegate;
-(int)sendWupBuffer:(char*)buffer cmd:(id)cmd;
-(void)dealloc;
-(void)doInit;
-(id)init;
@end

@interface QQFaceSystemRep : NSObject {
	int _tabID;
	int _faceID;
	NSString* _faceText;
	NSRange _range;
}
@property(assign, nonatomic) NSRange range;
@property(readonly, assign, nonatomic) NSString* faceText;
@property(assign, nonatomic) int faceID;
@property(readonly, assign, nonatomic) int tabID;
+(id)parseText:(id)text;
+(void)initialize;
-(id)converToHistoryInfo;
-(BOOL)isEqual:(id)equal;
-(void)dealloc;
-(id)initWithTabID:(int)tabID withFaceText:(id)faceText;
@end

@interface DiscussFlyTicketEngine : QSEngineBase <IEngineDispatchDelegate> {
}
+(id)GetInstance;
-(void)DiscussStatics:(id)statics;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)requestDecode:(id)decode;
-(void)requestGetUrl:(unsigned long long)url;
-(id)getSigFromURL:(id)url;
-(void)JoinDiscussBySig:(id)sig;
-(void)dealloc;
-(id)init;
@end

@interface QQFlyTicketViewController : QQViewController {
	UILabel* _label1;
	UILabel* _label2;
	UIImageView* _headView;
	NSString* _decodeSig;
	NSString* _discussUin;
	UIImageView* _expiredView;
}
-(void)showExpiredView;
-(void)responseJoinDiscuss:(id)discuss;
-(void)cancelButtonClicked:(id)clicked;
-(void)addButtonPress:(id)press;
-(void)refeshUI:(id)ui;
-(void)updateHeadImage;
-(void)loadView;
-(void)dealloc;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initwithSig:(id)sig;
-(id)init;
@end

@interface FriendListCellView : UIView {
	QQAsynHeadImageView* _asyncHeadView;
	UIView* _onlineMaskView;
	UIImageView* _userState;
	NSString* _name;
	UILabel* _nickLabel;
	NSString* _remark;
	NSString* _signature;
	int _vipType;
	BOOL _highlighted;
	NSObject* _cellObject;
	BOOL _isFromAllFriend;
	int _rightOffsetAddition;
	BOOL _showStatus;
	BOOL _showIcons;
@private
	BOOL _signatureAlignRight;
}
@property(assign, nonatomic) BOOL signatureAlignRight;
@property(assign, nonatomic) int rightOffsetAddition;
@property(assign, nonatomic) BOOL isFromAllFriend;
@property(assign, nonatomic) BOOL showStatus;
@property(retain, nonatomic) NSObject* cellObject;
@property(retain, nonatomic) NSString* signature;
@property(retain, nonatomic) NSString* remark;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) UIView* onlineMaskView;
@property(readonly, assign, nonatomic) QQAsynHeadImageView* asyncHeadView;
-(BOOL)isHighlighted;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)drawRectPublicAccount:(CGRect)account;
-(void)drawRectGroup:(CGRect)group;
-(id)getStatusImage:(int)image;
-(id)getOfflinePrompt:(int)prompt;
-(id)getStatusPrompt:(int)prompt;
-(void)drawRectFriend:(CGRect)aFriend;
-(void)drawRect:(CGRect)rect;
-(void)setUserStateByFriendModel:(id)model;
-(void)setVipTypeByFriendModel:(id)model;
-(void)setUserStateDefault:(id)aDefault;
-(void)setUserStateByPubAccountModel:(id)model;
-(void)setNameColorByFriendModel:(id)model;
-(void)setDefaultNameColor;
-(void)dealloc;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQFriendModel : QQModel <IQQModelLabel> {
	NSString* _fuin;
	NSString* _nick;
	NSString* _sig;
	NSString* _nearFriendInfo;
	int _status;
	int _memberLevel;
	int _supportVideo;
	int _head;
	int _groupId;
	int _priority;
	BOOL _sqq;
	BOOL _QQRobert;
	BOOL _cSpecialFlag;
	BOOL _isMsfUser;
	BOOL _locationAbility;
	int _lastLoginType;
	int _lastLoginClient;
	NSString* _mappingAccount;
	NSString* _pinyinStr;
	NSString* _sortkeyStr;
	NSRange _matchRange;
	BOOL _isMatchUIN;
	BOOL _isMatchRealNick;
	BOOL _isRemark;
	BOOL _isEnglishName;
	NSString* _realNickName;
	NSMutableDictionary* _vipInfoDic;
@private
	int sex;
	int age;
	NSString* _sortKeyStr;
}
@property(retain, nonatomic) NSMutableDictionary* vipInfoDic;
@property(copy, nonatomic) NSString* realNickName;
@property(assign, nonatomic) BOOL isEnglishName;
@property(assign, nonatomic) int priority;
@property(assign, nonatomic) BOOL isRemark;
@property(retain, nonatomic, getter=getSortkeyStr) NSString* sortKeyStr;
@property(retain, nonatomic, getter=getPinYinStr) NSString* pinyinStr;
@property(assign, nonatomic) int lastLoginClient;
@property(assign, nonatomic) int lastLoginType;
@property(assign, nonatomic) BOOL locationAbility;
@property(assign, nonatomic) BOOL isMsfUser;
@property(assign, nonatomic) BOOL cSpecialFlag;
@property(assign, nonatomic) BOOL QQRobert;
@property(retain, nonatomic) NSString* mappingAccount;
@property(assign, nonatomic) BOOL sqq;
@property(assign) int age;
@property(assign) int sex;
@property(copy, nonatomic) NSString* nearFriendInfo;
@property(copy, nonatomic) NSString* sig;
@property(assign, nonatomic) int groupId;
@property(assign, nonatomic) int head;
@property(assign, nonatomic) int supportVideo;
@property(assign, nonatomic) int memberLevel;
@property(assign, nonatomic) int status;
@property(copy, nonatomic) NSString* nick;
@property(copy, nonatomic) NSString* fuin;
+(int)convertFriendInfoStatus:(int)status itermType:(int)type;
+(void)setSearchModelPriority:(int)priority;
-(id).cxx_construct;
-(int)getLastLoginClientType;
-(int)compareFriendModelNew:(id)aNew;
-(int)compareFriendModel:(id)model;
-(int)compareByNick:(id)nick;
-(int)comparebyPriorityAndNick:(id)nick;
-(int)getVipPriority:(id)priority;
-(int)getPriority:(int)priority vipType:(int)type lastLoginType:(int)type3;
-(int)compareByVideoDesc:(id)desc;
-(int)compareByStatusDesc:(id)desc;
-(BOOL)isMatchString:(id)string;
-(BOOL)isString:(id)string matchString:(id)string2;
-(int)GetValue:(id)value;
-(int)compareByvideoAndOnlineState:(id)state;
-(int)compareByStatusAndVideo:(id)video;
-(int)compareLabel:(id)label;
-(int)getSearchModelPriority;
-(int)getSearchModelType;
-(NSRange)getModelLabelMatchRange;
-(id)getContactLabel;
-(id)getRemarkLabel;
-(id)getModelLabel;
-(id)description;
-(void)dealloc;
-(int)compareByTimeAsc:(id)asc;
-(id)init:(id)init :(id)arg2 :(int)arg3 :(int)arg4 :(int)arg5 :(id)arg6 :(id)arg7;
-(id)init;
@end

@interface QQGroupModel : QQModel <NSCopying, IQQModelLabel> {
	NSString* _groupId;
	NSString* _groupName;
	NSString* _count;
	NSString* _onlineCount;
	BOOL _sortId;
	BOOL expand;
	BOOL _isMsfGroup;
	NSMutableArray* _friendList;
	NSRange _matchRange;
@private
	NSString* memo;
	NSString* _groupUin;
}
@property(copy, nonatomic) NSString* groupUin;
@property(retain, nonatomic) NSString* memo;
@property(assign) BOOL sortId;
@property(assign, nonatomic) BOOL isMsfGroup;
@property(assign, nonatomic) BOOL expand;
@property(retain, nonatomic) NSMutableArray* friendList;
@property(copy, nonatomic) NSString* onlineCount;
@property(copy, nonatomic) NSString* count;
@property(copy, nonatomic) NSString* groupName;
@property(copy, nonatomic) NSString* groupId;
+(void)setSearchModelPriority:(int)priority;
-(id).cxx_construct;
-(BOOL)isMatchString:(id)string;
-(int)compareLabel:(id)label;
-(int)getSearchModelPriority;
-(int)getSearchModelType;
-(NSRange)getModelLabelMatchRange;
-(id)getRemarkLabel;
-(id)getModelLabel;
-(id)description;
-(int)compareByTimeAsc:(id)asc;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init:(id)init :(id)arg2 :(id)arg3 :(id)arg4 :(BOOL)arg5;
-(id)init:(id)init :(id)arg2 :(id)arg3 :(id)arg4;
-(id)init;
@end

@interface QQGroupInfoModel : QQGroupModel {
@private
	NSString* _categoryDetail;
	unsigned _categoryID;
	NSString* _groupTag;
	unsigned _groupHeat;
	unsigned _groupFaceID;
	BOOL _isIn;
	NSString* _intro;
	unsigned _maxMemberNum;
	BOOL _full;
	unsigned _curMemberNum;
	BOOL _allowJoinIn;
	unsigned _groupLevel;
	unsigned _ownerUin;
	NSString* _groupCode;
	BOOL _sameCity;
}
@property(assign, nonatomic) unsigned groupHeat;
@property(assign, nonatomic) BOOL isIn;
@property(assign, nonatomic) BOOL allowJoinIn;
@property(assign, nonatomic) BOOL full;
@property(assign, nonatomic) BOOL sameCity;
@property(assign, nonatomic) unsigned groupLevel;
@property(copy, nonatomic) NSString* categoryDetail;
@property(assign, nonatomic) unsigned categoryID;
@property(copy, nonatomic) NSString* groupTag;
@property(assign, nonatomic) unsigned groupFaceID;
@property(copy, nonatomic) NSString* intro;
@property(assign, nonatomic) unsigned maxMemberNum;
@property(assign, nonatomic) unsigned curMemberNum;
@property(assign, nonatomic) unsigned ownerUin;
@property(copy, nonatomic) NSString* groupCode;
-(void)dealloc;
@end

@interface QQGroupFriendModel : QQFriendModel {
	long long _groupUIN;
	NSString* _groupCode;
}
@property(copy, nonatomic) NSString* groupCode;
@property(assign, nonatomic) long long groupUIN;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface NearByGroupRspInfo : QQModel {
	NSData* _context;
	int _completedFlag;
	int _radius;
}
@property(retain, nonatomic) NSData* context;
@property(assign, nonatomic) int radius;
@property(assign, nonatomic) int completedFlag;
-(void).cxx_destruct;
@end

@interface QQButtonConfig : QQBaseSkinConfig {
@private
	UIEdgeInsets titleEdgeInsets;
	UIEdgeInsets imageEdgeInsets;
}
@property(assign, nonatomic) UIEdgeInsets imageEdgeInsets;
@property(assign, nonatomic) UIEdgeInsets titleEdgeInsets;
-(void)setViewAppearance:(id)appearance;
@end

@interface UIAppearanceManager : NSObject {
}
+(void)globalReloadAppearance;
@end

@interface SecretFileTipsViewController : QQViewController {
	id<SecretFileTipsDelegate> _clickDelegate;
}
@property(assign, nonatomic) id<SecretFileTipsDelegate> clickDelegate;
-(void)buttonPress:(id)press;
-(void)onLeftButtonClicked:(id)clicked;
-(void)loadView;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

@interface HPGrowingTextView : UIView <UITextViewDelegate> {
	HPTextViewInternal* internalTextView;
	int minHeight;
	int maxHeight;
	int maxNumberOfLines;
	int minNumberOfLines;
	BOOL animateHeightChange;
	NSObject<HPGrowingTextViewDelegate>* delegate;
	int textAlignment;
	NSRange selectedRange;
	BOOL editable;
	unsigned dataDetectorTypes;
	int returnKeyType;
	UIEdgeInsets contentInset;
@private
	UIFont* font;
	UIColor* textColor;
}
@property(assign, nonatomic) BOOL enablesReturnKeyAutomatically;
@property(assign) UIEdgeInsets contentInset;
@property(assign, nonatomic) int returnKeyType;
@property(assign, nonatomic) unsigned dataDetectorTypes;
@property(assign, nonatomic, getter=isEditable) BOOL editable;
@property(assign, nonatomic) NSRange selectedRange;
@property(assign, nonatomic) int textAlignment;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* text;
@property(assign) NSObject<HPGrowingTextViewDelegate>* delegate;
@property(retain, nonatomic) UITextView* internalTextView;
@property(assign) BOOL animateHeightChange;
@property(assign) int minNumberOfLines;
@property(assign) int maxNumberOfLines;
-(void)textViewDidChangeSelection:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)scrollRangeToVisible:(NSRange)visible;
-(BOOL)hasText;
-(id)backgroundColor;
-(void)setBackgroundColor:(id)color;
-(BOOL)isFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)growDidStop;
-(void)resizeTextView:(int)view;
-(void)textViewDidChange:(id)textView;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)commonInitialiser;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

@interface HPTextViewInternal : UITextView {
}
-(void)setContentSize:(CGSize)size;
-(void)setContentInset:(UIEdgeInsets)inset;
-(void)setContentOffset:(CGPoint)offset;
-(void)setText:(id)text;
@end

@interface JKArray : NSMutableArray <NSCopying, NSMutableCopying, NSFastEnumeration> {
	id* objects;
	unsigned count;
	unsigned capacity;
	unsigned mutations;
}
+(id)allocWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)replaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(void)removeObjectAtIndex:(unsigned)index;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(id)objectAtIndex:(unsigned)index;
-(void)getObjects:(id*)objects range:(NSRange)range;
-(unsigned)count;
-(void)dealloc;
@end

@interface JKDictionaryEnumerator : NSEnumerator {
	id collection;
	unsigned nextObject;
}
-(id)nextObject;
-(id)allObjects;
-(void)dealloc;
-(id)initWithJKDictionary:(id)jkdictionary;
@end

@interface JKDictionary : NSMutableDictionary <NSCopying, NSMutableCopying, NSFastEnumeration> {
	unsigned count;
	unsigned capacity;
	unsigned mutations;
	JKHashTableEntry* entry;
}
+(id)allocWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)keyEnumerator;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(void)getObjects:(id*)objects andKeys:(id*)keys;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)dealloc;
@end

@interface JSONDecoder : NSObject {
	JKParseState* parseState;
}
+(id)decoderWithParseOptions:(unsigned)parseOptions;
+(id)decoder;
-(id)mutableObjectWithData:(id)data error:(id*)error;
-(id)mutableObjectWithData:(id)data;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)objectWithData:(id)data error:(id*)error;
-(id)objectWithData:(id)data;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)parseJSONData:(id)data error:(id*)error;
-(id)parseJSONData:(id)data;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length error:(id*)error;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length;
-(void)clearCache;
-(void)dealloc;
-(id)initWithParseOptions:(unsigned)parseOptions;
-(id)init;
@end

@interface JKSerializer : NSObject {
	JKEncodeState* encodeState;
}
+(id)serializeObject:(id)object options:(unsigned)options encodeOption:(unsigned)option block:(id)block delegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(void)dealloc;
-(void)releaseState;
-(id)serializeObject:(id)object options:(unsigned)options encodeOption:(unsigned)option block:(id)block delegate:(id)delegate selector:(SEL)selector error:(id*)error;
@end

@interface SVInfiniteScrollingView : UIView {
@private
	id infiniteScrollingHandler;
	int activityIndicatorViewStyle;
	unsigned _state;
	UIScrollView* _scrollView;
	UIActivityIndicatorView* _activityIndicatorView;
	BOOL _wasTriggeredByUser;
	BOOL _isObserving;
	float _originalBottomInset;
	BOOL _enabled;
	NSMutableArray* _viewForState;
}
@property(assign, nonatomic) BOOL isObserving;
@property(assign, nonatomic) BOOL wasTriggeredByUser;
@property(assign, nonatomic) float originalBottomInset;
@property(assign, nonatomic) UIScrollView* scrollView;
@property(retain, nonatomic) NSMutableArray* viewForState;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicatorView;
@property(copy, nonatomic) id infiniteScrollingHandler;
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) unsigned state;
@property(assign, nonatomic) int activityIndicatorViewStyle;
-(void)stopAnimating;
-(void)startAnimating;
-(void)triggerRefresh;
-(void)setCustomView:(id)view forState:(unsigned)state;
-(void)scrollViewDidScroll:(CGPoint)scrollView;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setScrollViewContentInset:(UIEdgeInsets)inset;
-(void)setScrollViewContentInsetForInfiniteScrolling;
-(void)resetScrollViewContentInset;
-(void)layoutSubviews;
-(void)willMoveToSuperview:(id)superview;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SVPullToRefreshView : UIView {
@private
	id pullToRefreshActionHandler;
	UIColor* arrowColor;
	UIColor* textColor;
	int activityIndicatorViewStyle;
	NSDate* lastUpdatedDate;
	NSDateFormatter* dateFormatter;
	unsigned _state;
	UIScrollView* _scrollView;
	BOOL _showsPullToRefresh;
	SVPullToRefreshArrow* _arrow;
	UIActivityIndicatorView* _activityIndicatorView;
	UILabel* _titleLabel;
	UILabel* _dateLabel;
	BOOL _isObserving;
	float _originalTopInset;
	BOOL _showsDateLabel;
	BOOL _wasTriggeredByUser;
	float _originalBottomInset;
	unsigned _position;
	NSMutableArray* _titles;
	UILabel* _subtitleLabel;
	NSMutableArray* _viewForState;
	NSMutableArray* _subtitles;
}
@property(assign, nonatomic) BOOL isObserving;
@property(assign, nonatomic) BOOL showsDateLabel;
@property(assign, nonatomic) BOOL showsPullToRefresh;
@property(assign, nonatomic) BOOL wasTriggeredByUser;
@property(assign, nonatomic) float originalBottomInset;
@property(assign, nonatomic) float originalTopInset;
@property(assign, nonatomic) UIScrollView* scrollView;
@property(retain, nonatomic) NSMutableArray* viewForState;
@property(retain, nonatomic) NSMutableArray* subtitles;
@property(retain, nonatomic) NSMutableArray* titles;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicatorView;
@property(retain, nonatomic) SVPullToRefreshArrow* arrow;
@property(copy, nonatomic) id pullToRefreshActionHandler;
@property(retain, nonatomic) NSDateFormatter* dateFormatter;
@property(retain, nonatomic) NSDate* lastUpdatedDate;
@property(readonly, assign, nonatomic) UILabel* dateLabel;
@property(assign, nonatomic) unsigned position;
@property(assign, nonatomic) unsigned state;
@property(assign, nonatomic) int activityIndicatorViewStyle;
@property(retain, nonatomic) UILabel* subtitleLabel;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIColor* arrowColor;
-(void)rotateArrow:(float)arrow hide:(BOOL)hide;
-(void)stopAnimating;
-(void)startAnimating;
-(void)triggerPullToLoading;
-(void)triggerRefresh;
-(void)setCustomView:(id)view forState:(unsigned)state;
-(void)setSubtitle:(id)subtitle forState:(unsigned)state;
-(void)setTitle:(id)title forState:(unsigned)state;
-(void)scrollViewDidScroll:(CGPoint)scrollView;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setScrollViewContentInset:(UIEdgeInsets)inset;
-(void)setScrollViewContentInsetForLoading;
-(void)resetScrollViewContentInset;
-(void)layoutSubviews;
-(void)willMoveToSuperview:(id)superview;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SVPullToRefreshArrow : UIView {
@private
	UIColor* arrowColor;
}
@property(retain, nonatomic) UIColor* arrowColor;
-(void)drawRect:(CGRect)rect;
@end

@interface WupAgent : NSObject {
@private
	NSString* _servantName;
	NSObject<WupAgentDelegate>* _delegate;
	BOOL _retryUsingOtherServers;
}
@property(assign, nonatomic) BOOL retryUsingOtherServers;
@property(retain, nonatomic) NSObject<WupAgentDelegate>* delegate;
@property(readonly, assign, nonatomic) NSString* servantName;
+(void)cancel:(id)cancel;
+(id)agent;
-(id)invocation:(id)invocation parameter:(id)parameter completeHandle:(id)handle;
-(id)invocation:(id)invocation parameter:(id)parameter;
-(void)dealloc;
-(id)initWithServant:(id)servant;
-(id)init;
@end

@interface WupHttpRequest : ASIHTTPRequest {
@private
	WupHttpRequest* _retryRequest;
	WupHttpRequest* _retryRequestRef;
	WupHttpRequest* _parentRequest;
	BOOL _retryUsingOtherServers;
	NSObject<WupAgentDelegate>* _agentDelegate;
}
@property(retain) WupHttpRequest* parentRequest;
@property(assign) WupHttpRequest* retryRequestRef;
@property(retain) WupHttpRequest* retryRequest;
@property(retain) NSObject<WupAgentDelegate>* agentDelegate;
@property(assign) BOOL retryUsingOtherServers;
-(void)failWithError:(id)error;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)startAsynchronous;
-(void)startSynchronous;
-(void)start;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

@interface WupService : NSObject {
@private
	WupAgent* _agent;
}
@property(readonly, assign) WupAgent* agent;
+(void)cancel:(id)cancel;
+(id)service;
-(void)dealloc;
-(id)initWithAgent:(id)agent;
-(id)init;
@end

@interface JceEnumHelper : NSObject {
}
+(int)_stoe:(id)stoe;
+(id)eto_s:(int)eto_s;
+(int)stoe:(id)stoe;
+(id)etos:(int)etos;
@end

@interface JceInputStream : JceStream {
	int _headType;
	int _headTag;
}
@property(readonly, assign, nonatomic) int headTag;
@property(assign, nonatomic) int headType;
+(id)streamWithData:(id)data;
+(id)streamWithBuffer:(void*)buffer length:(int)length;
-(id)readAnything:(int)anything required:(BOOL)required description:(id)description;
-(id)readDictionary:(int)dictionary required:(BOOL)required description:(id)description;
-(id)readArray:(int)array required:(BOOL)required description:(id)description;
-(id)readObject:(int)object required:(BOOL)required description:(Class)description;
-(id)readData:(int)data required:(BOOL)required;
-(id)readString:(int)string required:(BOOL)required;
-(id)readNumber:(int)number required:(BOOL)required;
-(id)readDataWithSize:(int)size;
-(void)skip:(unsigned)skip;
-(char*)readBytes:(unsigned)bytes;
-(double)readDouble;
-(float)readFloat;
-(double)readDouble:(int)aDouble;
-(float)readFloat:(int)aFloat;
-(long long)readInt:(int)int;
-(long long)readInt8;
-(int)readInt4;
-(int)readInt2;
-(int)readInt1;
-(BOOL)readHead;
-(BOOL)peakHead;
-(id)data;
-(void)dealloc;
-(id)init;
@end

@interface JceObject : NSObject <NSCoding> {
}
+(id)jceType;
+(id)fromData:(id)data;
+(id)object;
+(id)jcePropertiesWithEncodedTypes;
+(id)objectWithAttributeData:(id)attributeData;
+(id)objectWithName:(id)name andType:(id)type inAttributes:(id)attributes;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(void)__unpack:(id)unpack;
-(void)__pack:(id)pack;
-(id)jceType;
-(id)toData;
-(id)fromData:(id)data;
-(void)setInAttributes:(id)attributes withName:(id)name andType:(id)type;
@end

@interface JcePropertyInfo : NSObject {
@private
	int tag;
	BOOL flag;
	NSString* name;
	NSString* type;
	JcePair* ext;
}
@property(retain, nonatomic) JcePair* ext;
@property(retain, nonatomic) NSString* type;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) BOOL flag;
@property(assign, nonatomic) int tag;
+(id)propertyInfo;
-(id)description;
-(int)compareWithTag:(id)tag;
-(void)dealloc;
-(id)init;
@end

@interface JceObjectV2 : JceObject {
}
+(id)jceType;
+(id)objectWithName:(id)name inAttributes:(id)attributes;
-(void)__unpack:(id)unpack;
-(void)__pack:(id)pack;
-(id)jcePropsDescription;
-(id)jceRefObject;
-(id)jceType;
-(void)setInAttributes:(id)attributes withName:(id)name;
@end

@interface JceOutputStream : JceStream {
}
+(id)streamWithCapability:(int)capability;
+(id)stream;
-(void)writeAnything:(id)anything tag:(int)tag required:(BOOL)required;
-(void)writeData:(id)data tag:(int)tag required:(BOOL)required;
-(void)writeString:(id)string tag:(int)tag required:(BOOL)required;
-(void)writeObject:(id)object tag:(int)tag required:(BOOL)required;
-(void)writeNumber:(id)number tag:(int)tag required:(BOOL)required;
-(void)writeArray:(id)array tag:(int)tag required:(BOOL)required;
-(void)writeDictionary:(id)dictionary tag:(int)tag required:(BOOL)required;
-(void)writeInt:(long long)int tag:(int)tag;
-(void)writeDouble:(double)aDouble tag:(int)tag;
-(void)writeFloat:(float)aFloat tag:(int)tag;
-(void)fillWithZero:(unsigned)zero;
-(void)writeBytes:(const void*)bytes size:(int)size;
-(void)writeInt8:(long long)a8;
-(void)writeInt4:(int)a4;
-(void)writeInt2:(short)a2;
-(void)writeInt1:(BOOL)a1;
-(void)writeTag:(int)tag type:(int)type;
-(id)data;
-(void)preventBufferOverflow:(int)overflow;
-(void)dealloc;
-(id)initWithBufferSize:(int)bufferSize;
-(id)init;
@end

@interface JceStream : NSObject {
	char* _streamBuffer;
	int _streamSize;
	int _cursor;
}
@property(assign, nonatomic) int cursor;
@property(assign, nonatomic) int streamSize;
@property(assign, nonatomic) char* streamBuffer;
-(id)description;
-(id)data;
-(void)dealloc;
-(id)init;
@end

@interface JcePair : NSObject {
@private
	id _key;
	id _value;
}
@property(retain, nonatomic) id value;
@property(retain, nonatomic) id key;
+(id)pairWithValue:(id)value forKey:(id)key;
+(id)pairFromExtStr:(id)extStr;
+(id)analyzeExtStr:(id)str;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface RequestPacket : JceObject {
@private
	NSNumber* _iVersion;
	NSNumber* _cPacketType;
	NSNumber* _iMessageType;
	NSNumber* _iRequestId;
	NSString* _sServantName;
	NSString* _sFuncName;
	NSData* _sBuffer;
	NSNumber* _iTimeout;
	NSDictionary* _context;
	NSDictionary* _status;
}
@property(retain, nonatomic) NSDictionary* status;
@property(retain, nonatomic) NSDictionary* context;
@property(retain, nonatomic) NSNumber* iTimeout;
@property(retain, nonatomic) NSData* sBuffer;
@property(retain, nonatomic) NSString* sFuncName;
@property(retain, nonatomic) NSString* sServantName;
@property(retain, nonatomic) NSNumber* iRequestId;
@property(retain, nonatomic) NSNumber* iMessageType;
@property(retain, nonatomic) NSNumber* cPacketType;
@property(retain, nonatomic) NSNumber* iVersion;
-(void)__unpack:(id)unpack;
-(void)__pack:(id)pack;
-(void)dealloc;
-(id)init;
@end

@interface UniAttribute : JceObjectV2 {
@private
	NSMutableDictionary* jcev2_p_0_r_uniAttributes__b0x9i_M09ONSStringM09ONSStringONSData;
}
@property(retain, nonatomic, getter=jce_uniAttributes, setter=setJce_uniAttributes:) NSMutableDictionary* jcev2_p_0_r_uniAttributes__b0x9i_M09ONSStringM09ONSStringONSData;
+(id)fromAttributeData:(id)attributeData;
-(void)setAttrValue:(id)value withName:(id)name andType:(id)type;
-(id)attrValueWithName:(id)name andType:(id)type;
-(id)attributeData;
-(void)dealloc;
-(id)init;
@end

@interface UniPacket : RequestPacket {
@private
	UniAttribute* _attributes;
}
@property(readonly, assign, nonatomic) UniAttribute* attributes;
+(id)packet;
-(void)putObjectAttr:(id)attr value:(id)value;
-(void)putObjectAttr:(id)attr type:(id)type value:(id)value;
-(void)putDataAttr:(id)attr value:(id)value;
-(id)getObjectAttr:(id)attr forClass:(Class)aClass;
-(void)__unpack:(id)unpack;
-(void)__pack:(id)pack;
-(id)objectKeyWithName:(id)name;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface QQShortNotificationTipsView : UIView {
@private
	NSString* title;
}
@property(retain, nonatomic) NSString* title;
+(void)showTips:(id)tips atRootView:(id)rootView;
-(void)dealloc;
-(void)hideView;
-(void)showView;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MultiTransferRecord : NSObject {
@private
	unsigned _time;
	NSString* _fileName;
	unsigned long long _fileSize;
	unsigned _sessionID;
}
@property(assign, nonatomic) unsigned time;
@property(assign, nonatomic) unsigned sessionID;
@property(assign, nonatomic) unsigned long long fileSize;
@property(retain, nonatomic) NSString* fileName;
-(void)dealloc;
@end

@interface MultiTransferMgr : NSObject <IPacketSendResultHandler, IMsgSvcSendMsgRespHandler> {
	double baseTime;
	NSMutableDictionary* multiTransferList;
	NSMutableDictionary* filter;
	unsigned long long selfUin;
}
+(id)getInstance;
-(void)saveMsgAndNotifyUI:(unsigned long long)ui type:(int)type fileNmae:(id)nmae;
-(void)handleSaveToWeiYunNotifyMsg:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)weiYunNotifyMsg peerUin:(unsigned long long)uin;
-(id)getTips:(int)tips;
-(id)getSentErrorTips:(int)tips;
-(void)notifyMsgSentResult:(id)result result:(int)result2;
-(BOOL)OnReceiveSendMsgRespOfSendSeq:(unsigned long)sendSeq ResultCode:(unsigned long)code ErrMsg:(const basic_string<char, std::char_traits<char>, std::allocator<char> >*)msg ReqSendTimeFromServer:(unsigned long)server;
-(ContentHead*)GenContentHeadOfSendReq;
-(MsgBody*)GenMsgBodyOfSendReq:(id)sendReq;
-(RoutingHead*)GenRoutingHeadOfSendReq:(unsigned long long)sendReq;
-(int)SendPbMsgToUin:(unsigned long long)uin MsgBody:(MsgBody*)body RoutingHead:(RoutingHead*)head SendingModel:(id)model;
-(int)multiTransferRequestConvertOfflineFileRequestWithPeerUin:(unsigned long long)peerUin WithSessionID:(unsigned)sessionID;
-(BOOL)ignoreMultiTransferRequestWithPeerUin:(unsigned long long)peerUin WithSessionID:(unsigned)sessionID;
-(id)queryMultiTransferRecordWithPeerUin:(unsigned long long)peerUin WithSessionID:(unsigned)sessionID;
-(id)queryMultiTransferListWithPeerUin:(unsigned long long)peerUin;
-(BOOL)DecodeRequestFileInfoForHummer:(id)hummer fileSize:(unsigned*)size fileName:(id*)name;
-(BOOL)DecodeRequestFileInfoForOlderHummer:(id)olderHummer fileSize:(unsigned*)size fileName:(id*)name;
-(void)handleLongConnNotifyMsg:(Msg*)msg;
-(void)handleLongConnCancelMsg:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)msg peerUin:(unsigned long long)uin time:(unsigned)time;
-(void)handleLongConnCancelMsg:(Msg*)msg;
-(void)handleLongConnAcceptMsg:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)msg peerUin:(unsigned long long)uin time:(unsigned)time;
-(void)handleLongConnRequestMsg:(Msg*)msg;
-(void)didLogin;
-(void)changeAccount;
-(void)dealloc;
-(id)init;
@end

@interface QQC2CMsgTableNameRecord : NSObject {
}
+(void)clearTable:(id)table;
+(id)getAllTable:(id)table;
+(void)addTable:(id)table inDb:(id)db;
+(void)createTable:(id)table;
@end

@interface QQWallet : NSObject {
	NSDictionary* _PayInfo;
}
+(BOOL)IsWalletUrl:(id)url;
+(id)allocWithZone:(NSZone*)zone;
+(id)GetInstance;
-(void)HandleWalletResult:(id)result ErrorCode:(int)code;
-(BOOL)StartWallet;
-(void)HandlePayResultForApp:(id)app ErrorCode:(int)code;
-(void)HandlePayResultForTDCode:(id)tdcode ErrorCode:(int)code;
-(void)HandlePayResultForWeb:(id)web ErrorCode:(int)code;
-(BOOL)StartPay:(id)pay PaySrc:(int)src;
-(id)init;
@end

@interface ReadQRCodeActionItem : ActionBaseItem {
}
+(id)actionItemWithDelegate:(id)delegate;
-(void)onItemClick;
-(id)initWithItemDelegate:(id)itemDelegate;
@end

@interface QQAIOFontSetupViewController : QQSetupRelatedViewController {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)restoreDataAfterViewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface QQTabBarButtonConfig : QQBaseSkinConfig {
@private
	BOOL showsTitle;
	CGPoint tabBarIconCenter;
	CGPoint tabBarTitleCenter;
	CGPoint unreadIconCenter;
	CGPoint unreadIconCenterHighlighted;
}
@property(assign, nonatomic) CGPoint unreadIconCenterHighlighted;
@property(assign, nonatomic) CGPoint unreadIconCenter;
@property(assign, nonatomic) CGPoint tabBarTitleCenter;
@property(assign, nonatomic) CGPoint tabBarIconCenter;
@property(assign, nonatomic) BOOL showsTitle;
+(id)getConfigKeyByIndex:(int)index;
+(id)getInstanceByIndex:(int)index;
-(void)setViewAppearance:(id)appearance;
-(void)setConfigValues:(id)values;
@end

@interface OnlineFileCell : UITableViewCell {
	int _fileType;
	UIImageView* _fileIconView;
	UILabel* _fileNameLabel;
	UILabel* _uFileSizeLabel;
	UIButton* _ignoreBtn;
	UIButton* _cloudRecvBtn;
	UILabel* _actionTip;
	UIActivityIndicatorView* _activityView;
	UIImageView* _cloudRecvOkView;
	unsigned _SessionID;
	unsigned long long _uin;
	int _seq;
	unsigned _sectionIndex;
	id<OnlineFileDelegate> _delegate;
}
@property(assign, nonatomic) int seq;
@property(assign, nonatomic) unsigned long long uin;
@property(assign, nonatomic) unsigned SessionID;
@property(assign, nonatomic) id<OnlineFileDelegate> delegate;
@property(retain, nonatomic) UILabel* actionTip;
@property(retain, nonatomic) UIImageView* cloudRecvOkView;
@property(retain, nonatomic) UIActivityIndicatorView* activityView;
@property(retain, nonatomic) UIButton* cloudRecvBtn;
@property(retain, nonatomic) UIButton* ignoreBtn;
@property(retain, nonatomic) UILabel* uFileSizeLabel;
@property(retain, nonatomic) UILabel* fileNameLabel;
@property(assign, nonatomic) unsigned sectionIndex;
@property(assign, nonatomic) int fileType;
-(void)dealloc;
-(void)layoutSubviews;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setFileIconWithType:(int)type;
-(void)cloudReceive;
-(void)ignore;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface OnlineFileViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, OnlineFileDelegate> {
	unsigned long long _PeerUin;
	UITableView* _tableView;
	NSMutableArray* _arrOnlineFiles;
	UILabel* _errorTip;
	NSTimer* _errorTipTimer;
}
@property(retain, nonatomic) NSMutableArray* arrOnlineFiles;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) unsigned long long uPeerUin;
-(void)didLogin;
-(void)changeAccount;
-(void)cloudReceive:(int)receive WithSeq:(int)seq;
-(void)ignore:(id)ignore;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getSizeText:(unsigned long long)text;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)viewWillDisappear:(BOOL)view;
-(void)loadView;
-(void)errorTipAnimation;
-(void)didCloudReceivedRequestFail:(id)fail;
-(void)didCloudReceived:(id)received;
-(void)didAddOnlineFile:(id)file;
-(void)didOnlineFileStatusChanged:(id)changed;
-(void)dealloc;
-(id)init;
@end

@interface RelationAllTableView : UITableView <UITableViewDataSource, UITableViewDelegate, FriendListHeaderViewDelegate> {
	NSDictionary* _sectionDataSource;
	NSArray* _sectionTitles;
	id<RelationAllTableViewSelectRowCallback> _selectedCallback;
	BOOL _showTitleIndexBar;
}
@property(assign, nonatomic) id<RelationAllTableViewSelectRowCallback> selectedCallback;
@property(retain, nonatomic) NSArray* sectionTitles;
@property(retain, nonatomic) NSDictionary* sectionDataSource;
-(void).cxx_destruct;
-(void)friendListHeaderViewDidTouch:(id)friendListHeaderView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame style:(int)style;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)configureAllDataSources:(id)sources;
-(BOOL)isEnglishName:(id)name;
-(void)configureDataSourcesbyMembers:(id)members members:(id)members2;
-(id)createComputerMember;
-(id)configureClusterDataSource;
@end

@interface AllTableMemberModel : QQModel {
	NSString* _ID;
	NSString* _nick;
	NSString* _signString;
	int _type;
}
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* signString;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)dealloc;
-(id)init;
@end

@interface QQSingleImageTableViewController : UIViewController <UITableViewDelegate, UITableViewDataSource, QQAssetViewDelegate> {
	id<IAlbumService> _albumService;
	ALAssetsGroup* _assetGroup;
	NSMutableArray* _assetsList;
	UITableView* _tableView;
	UILabel* _totalCountLabel;
	BOOL _isFirstInit;
	BOOL _isLoading;
	BOOL _isLoadFinished;
}
-(void)handleQQAlbumServiceChangedNotification:(id)notification;
-(void)onCancelButtonClick:(id)click;
-(void)didSelectPhoto:(id)photo;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)scrollToEnd;
-(void)viewWillAppear:(BOOL)view;
-(void)loadAssetsFromGroup;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)initWithAssetsGroup:(id)assetsGroup;
@end

@interface RichMediaCacheManager : NSObject {
	NSMutableDictionary* _picDownloadUrlDic;
	NSString* _clientIp;
	int _msfApnReachType;
}
+(id)getInstance;
-(void)RemoveAllPicDownloadUrl;
-(void)RemovePicDownloadUrl:(id)url groupCode:(long long)code;
-(id)GetPicDownloadUrl:(id)url groupCode:(long long)code;
-(void)AddPicDownloadUrl:(id)url groupCode:(long long)code downloadUrl:(id)url3;
-(void)notfiyApnReachableChange:(int)change;
-(void)notfiyClientIpChange:(id)change;
-(id)getKey:(id)key groupCode:(long long)code;
-(void)changeAccount:(id)account;
-(void)dealloc;
-(id)init;
@end

@interface SecretFileImagePreviewViewController : UIViewController <UIScrollViewDelegate, UIActionSheetDelegate, UIAlertViewDelegate> {
@private
	int _limitValue;
	UIImage* _image;
	UIImageView* _imageView;
	NSObject<SecretFilePreviewViewControllerDelegate>* _delegate;
	UIScrollView* _imageScrollView;
	UIButton* _mButton;
	UIView* _toolsBar;
	UIButton* _lButton;
	UIImageView* _backgroundView;
}
@property(assign, nonatomic) NSObject<SecretFilePreviewViewControllerDelegate>* delegate;
@property(retain, nonatomic) UIImageView* backgroundView;
@property(assign, nonatomic) UIButton* lButton;
@property(assign, nonatomic) UIButton* mButton;
@property(assign, nonatomic) int limitValue;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) UIScrollView* imageScrollView;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) UIView* toolsBar;
-(void)_onToolBarFinishButtonTapped:(id)tapped;
-(void)_onToolsBarOptionButtonTapped:(id)tapped;
-(void)_onToolsBarCancelButtonTapped:(id)tapped;
-(void)loadView;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)hideBackgroundView;
-(void)showBackgroundView;
-(void)dealloc;
-(void)setLeftButtonText:(id)text;
-(void)showMidButton:(BOOL)button;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)init;
@end

@interface QQLastLoginReqPageInfoModel : QQModel {
	unsigned _totalTimes;
	unsigned _currentIndex;
	unsigned long long _currentUIN;
	unsigned _refreshInterval;
}
@property(assign, nonatomic) unsigned refreshInterval;
@property(assign, nonatomic) unsigned long long currentUIN;
@property(assign, nonatomic) unsigned currentIndex;
@property(assign, nonatomic) unsigned totalTimes;
@end

@interface QQLastLoginInfoModel : QQModel {
	long long _uin;
	unsigned _lastLoginType;
	unsigned _client;
}
@property(assign, nonatomic) unsigned client;
@property(assign, nonatomic) unsigned lastLoginType;
@property(assign, nonatomic) long long uin;
@end

@interface MsgBehaviorMonitor : NSObject {
	NSString* _chatUIN;
	int _chatType;
	int _friendStatus;
	int _clientType;
	int _entryType;
	int _picEntryType;
	int _msgType;
	BOOL _isFirstMsg;
	int _size;
}
-(void)actionSendAlbumPicturesWithSize:(int)size;
-(void)actionSendMsgWithLength:(int)length bodyType:(int)type;
-(void)doReportLog;
-(void)actionOpenAIOWithChatViewController:(id)chatViewController;
-(void)actionChatWithUIN:(id)uin chatType:(int)type;
-(void)dealloc;
-(id)init;
@end

@interface UserSummaryCoverViewController : UIViewController {
	long long _uin;
	int _type;
	NSMutableArray* _hiddenPicArr;
	NSMutableArray* _showedPicArr;
	NSMutableArray* _localShowedPicArr;
	int _totalPicCount;
	NSMutableArray* _allFileKey;
	NSTimer* _timer;
	UserSummaryCoverAnimationView* _viewSex;
	UserSummaryCoverAnimationView* _viewSS;
	UserSummaryCoverAnimationView* _view0;
	UserSummaryCoverAnimationView* _view1;
	UserSummaryCoverAnimationView* _view2;
	UIImageView* _backgV;
	UILabel* _tipLabel;
	id<CoverHeightDelegate> _delegate;
	BOOL _bWifi;
	BOOL _bStopAnima;
	BOOL _bDiffTypeChange;
	BOOL _bMale;
}
@property(assign, nonatomic) BOOL bWifi;
@property(assign, nonatomic) id<CoverHeightDelegate> delegate;
-(void).cxx_destruct;
-(BOOL)isPicWallChanged;
-(void)notifyBackFromPicWall;
-(int)getRandomInt:(int)int;
-(int)getRandomLocation;
-(id)getRandomHiddenPic;
-(void)startTimer;
-(void)stopTimer;
-(void)cancelAllRequest;
-(void)getImageFinish:(id)finish;
-(void)upDateInitialFileKeyArray:(id)array;
-(void)loadInitData;
-(void)loadData;
-(void)view2DelayShow;
-(void)view1DelayShow;
-(void)specialPicAnamation:(id)anamation;
-(void)refreshPicAnamation;
-(void)initPicAnamation;
-(void)updateShowTypeCover;
-(void)initShowTypeCover;
-(void)updateSexTypeCover:(BOOL)cover;
-(void)loadView;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithUin:(long long)uin bMale:(BOOL)male;
@end

@interface STScratchView : UIView {
	CGPoint previousTouchLocation;
	CGPoint currentTouchLocation;
	CGImageRef hideImage;
	CGImageRef scratchImage;
	CGContextRef contextMask;
	CGGradientRef gradientRef;
	id<STScratchViewDelegate> _delegate;
	UIImage* _imageToDraw;
@private
	CADisplayLink* _displayLink;
	UIView* _hideView;
	float _sizeBrush;
	float _percentAccomplishment;
}
@property(retain, nonatomic) UIImage* imageToDraw;
@property(retain, nonatomic) UIView* hideView;
@property(assign, nonatomic) id<STScratchViewDelegate> delegate;
@property(assign, nonatomic) float sizeBrush;
@property(assign, nonatomic) float percentAccomplishment;
-(void)dropLine:(CGPoint)line;
-(void)initScratch;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)doScratchTheViewFromInBlock:(CGPoint)block to:(CGPoint)to;
-(CGContextRef)getBitmapContext;
-(void)scratchTheViewFrom:(CGPoint)from to:(CGPoint)to;
-(void)setHideViewWithImages:(id)images imageArray:(id)array;
-(void)drawRect:(CGRect)rect;
-(void)drawBitmap;
-(void)getDrawImage;
-(void)dealloc;
-(void)display;
-(void)setupDisplayLink;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQCoreMotionService : NSObject <ICoreMotionService> {
	CMMotionManager* _cmotionManager;
	double _updateInterval;
	NSLock* _observerListLock;
	NSMutableArray* _observerList;
}
+(id)getInstance;
-(void)stopAccelerometerUpdates;
-(void)startAccelerometerUpdates;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)dealloc;
-(id)init;
@end

@interface UserSummaryCoverAnimationView : UIView {
	UIImageView* _oldImageV;
	UIImageView* _curImageV;
	NSString* _imagePath;
	NSString* _waitAnimaImagePath;
	int _waitAnimaType;
	int _motionStartCorner;
	int _motionEndCorner;
	BOOL _isAnimating;
	BOOL _stopAnimate;
	int _animaSeq;
	int _animaStartTime;
	int _animaStartRand;
}
@property(assign) int motionEndCorner;
@property(assign) int motionStartCorner;
@property(retain, nonatomic) NSString* waitAnimaImagePath;
@property(retain, nonatomic) NSString* imagePath;
@property(retain, nonatomic) UIImageView* curImageV;
@property(retain, nonatomic) UIImageView* oldImageV;
-(void).cxx_destruct;
-(void)setImageWithAlphaMotionChange:(id)alphaMotionChange;
-(void)setImageWithAlphaChange:(id)alphaChange;
-(void)setImageWithoutAnima:(id)anima;
-(BOOL)setImagePathWithAnima:(id)anima animaType:(int)type;
-(BOOL)setImageWithAnima:(id)anima animaType:(int)type;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)startMotionAnima;
-(CGPoint)getMotionStartPoint;
-(CGPoint)getMotionNextPoint;
-(void)motionChangeEnd;
-(void)alphaMotionChangeEnd;
-(void)alphaChangeEnd;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQPopMenu : UIView <SMSEditMenuBackGroundDelegate> {
	id<QQPopMenuDelegate> _delegate;
@private
	NSMutableArray* _objectsNameArray;
	NSMutableArray* _objectsImageArray;
	UIView* _superView;
	SMSEditMenuBackGround* _superBgView;
	int _selecteIndex;
	CGPoint _startPoint;
	UIImageView* _menuBgView;
	BOOL _isShow;
}
@property(assign, nonatomic) id<QQPopMenuDelegate> delegate;
-(void)didMenuBackGroundClick:(id)click;
-(void)dismiss;
-(void)show;
-(BOOL)isShow;
-(void)dismissAnimationFinished;
-(void)dealloc;
-(void)onClickBtn:(id)btn;
-(void)initMenu;
-(id)initWithNamesAndImages:(CGPoint)namesAndImages nameArray:(id)array imageArray:(id)array3 size:(CGSize)size superView:(id)view;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQBaseChatImage : NSObject <UINavigationControllerDelegate, UIImagePickerControllerDelegate, PhotoBrowserViewControllerDelegate, QQMultiImagePickerControllerDelegate> {
	QQBaseChatUIOperation* _chatUIOperation;
	BOOL _isLimitMsgView;
}
+(id)decryptSecretData:(id)data decryptKey:(int)key preHeadLength:(int)length;
+(id)encryptSecretData:(id)data;
+(id)getBMPHeader:(long)header;
-(id)getAvailableOriginPicName:(id)name;
-(id)transformImage:(id)image width:(float)width height:(float)height path:(id)path compressAsJpg:(BOOL)jpg compressionQuality:(float)quality bDecrypt:(BOOL)decrypt;
-(id)transformSecretImage:(id)image width:(float)width height:(float)height path:(id)path compressionQuality:(float)quality;
-(void)transformImage:(id)image width:(float)width height:(float)height path:(id)path compressAsJpg:(BOOL)jpg;
-(id)save:(id)save uuid:(id)uuid compressAsJpg:(BOOL)jpg bsecretfile:(BOOL)bsecretfile;
-(id)saveSecretFile:(id)file uuid:(id)uuid;
-(void)imageSelectedWithOrigin:(id)origin bodyType:(int)type;
-(id)GetPreviewImageToSend;
-(void)imageSelectedWithBodyType:(id)bodyType bodyType:(int)type;
-(void)handleImagePickerDelegate:(id)delegate;
-(void)receiveProcessImage:(id)image;
-(void)saveToAlbum:(id)album;
-(void)QQMultiImagePickerControllerDidCancel:(id)qqmultiImagePickerController;
-(void)QQMultiImagePickerController:(id)controller didSendOriginalPhoto:(id)photo;
-(void)QQMultiImagePickerController:(id)controller didSendPhotoList:(id)list;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)photoBrowserViewContoller:(id)contoller didSelectImage:(id)image;
-(void)ActionBrowsePhotos:(id)photos;
-(void)setLimitMsgMark:(BOOL)mark;
-(CGRect)getOriginalRectForPhoto:(id)photo atIndex:(int)index thumbRegion:(CGRect*)region clipRect:(CGRect*)rect;
-(id)genarateImageSavingPath;
-(void)dealloc;
-(id)initWithBaseChatUIOperation:(id)baseChatUIOperation;
@end

@interface QQEasyLog : NSObject {
	NSCalendar* _calendar;
	NSMutableDictionary* _logStore;
}
+(id)GetInstance;
-(void)dealloc;
-(void)showLogViewController:(id)controller;
-(void)clean;
-(void)clean:(id)clean;
-(void)dump:(id)dump format:(id)format args:(void*)args;
-(void)dump:(id)dump info:(id)info;
-(id)init;
@end

@interface QQEasyLogViewController : UIViewController <MFMailComposeViewControllerDelegate> {
}
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)done;
-(void)email;
-(void)setLogInfo:(id)info;
-(void)loadView;
-(id)init;
@end

@interface QQTimerCountView : UIView {
@private
	NSTimer* _timer;
	unsigned long long _frames;
	int _countTextNum;
	float _angel;
	int _curCount;
	CGImageRef bitmapImage;
	CGContextRef contextImage;
	UILabel* _timerLabel;
	UIImage* _bgImage;
}
-(void)dealloc;
-(void)initContext;
-(id)initWithFrame:(CGRect)frame;
-(void)setCountNum:(int)num;
-(void)onPeriod;
-(void)stop;
-(void)timerFire;
-(void)createTimer;
-(void)start;
-(void)drawRect:(CGRect)rect;
@end

@interface QQChatAvatarCell : UIView {
	QQChatAvatarModel* _cellModel;
	UIImageView* _VipFlagView;
	QQImageButton* _imageButton;
	UIActivityIndicatorView* _indicatorView;
	id _delegate;
	SEL _action;
}
@property(retain, nonatomic) QQChatAvatarModel* cellModel;
-(void)handleDownloadResourceResultNotification:(id)notification;
-(void)onButtonClick:(id)click;
-(void)setCellClickActionDelegate:(id)delegate action:(SEL)action;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQChatAvatarModel : NSObject {
	NSString* _chatAvatarID;
	NSString* _chatAvatarImgUrl;
	NSString* _localImpressionDrawingImgName;
	int _freeForUserLever;
	int _index;
}
@property(assign, nonatomic) int index;
@property(assign, nonatomic) int freeForUserLever;
@property(retain, nonatomic) NSString* localImpressionDrawingImgName;
@property(retain, nonatomic) NSString* chatAvatarImgUrl;
@property(retain, nonatomic) NSString* chatAvatarID;
-(void)dealloc;
-(id)initWithBubbleInfo:(id)bubbleInfo;
-(id)initWithChatAvatarID:(id)chatAvatarID imgUrl:(id)url neededLever:(int)lever;
@end

@interface QQChatAvatarTitleView : UIView {
	QQImageButton* _moreDetailButton;
	UIImageView* _moreDetailBackgroundView;
}
-(void)onClickMoreDetail:(id)detail;
-(void)setClickMoreDetailButtonDelegate:(id)delegate action:(SEL)action;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame userIdentify:(int)identify;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQXMLRichMessageBaseCell : QQUITableViewCell <QQXMLRichMessageCellViewDelegate> {
	QQXMLMessage* _message;
	QQChatCellModel* _model;
	QQXMLMessageBaseView* _cellView;
	id<QQXMLRichMessageCellDelegate> _cellDelegate;
}
@property(retain, nonatomic) QQChatCellModel* model;
@property(assign, nonatomic) id<QQXMLRichMessageCellDelegate> cellDelegate;
+(id)getCellIdentifier;
+(int)getCellHeight:(id)height;
-(void)QQXMLRichMessageCellViewDidSelectUrl:(id)qqxmlrichMessageCellView;
-(void)LongPressCanceled:(CGPoint)canceled;
-(void)LongPressEnded:(CGPoint)ended;
-(void)LongPressCallBack:(CGPoint)back;
-(void)setXMLMessage:(id)message;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQXMLRichMessageMailTypeCell : QQXMLRichMessageBaseCell {
}
+(id)getCellIdentifier;
+(int)getCellHeight:(id)height;
-(void)setXMLMessage:(id)message;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QQXMLRichMessageMailTypeCellView : QQXMLMessageBaseView {
	UILabel* _senderNameLabel;
	UILabel* _mailTitleLabel;
	UILabel* _timeLabel;
	UILabel* _contentLabel;
}
+(int)getCellHeight:(id)height;
+(id)getContentFromXMLMessageItem:(id)xmlmessageItem;
-(void)setSenderName:(id)name;
-(void)setMailTitle:(id)title;
-(void)setContent:(id)content;
-(void)setTime:(int)time;
-(void)layoutSubviews;
-(void)setXMLMessage:(id)message;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQMessageReadTagView : UIView {
	UIImage* _image;
	NSString* _mReadCountText;
	int _unreadCount;
	BOOL _highlighted;
}
@property(assign, nonatomic) int unreadCount;
@property(retain, nonatomic) UIImage* image;
-(BOOL)isHighlighted;
-(void)setHighlighted:(BOOL)highlighted;
-(void)drawRect:(CGRect)rect;
-(CGSize)getFitSize;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQThemeGuideViewController : QQViewController {
@private
	BOOL _shouldDismiss;
}
-(void)delayDismissViewController;
-(void)viewDidDisappear:(BOOL)view;
-(void)onSetThemeButtonClicked:(id)clicked;
-(void)onRightButtonClicked:(id)clicked;
-(void)loadView;
@end

@interface CompareInfo : NSObject {
	NSRange _range;
	NSString* _text;
}
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) NSRange range;
+(id)CreateInfo:(NSRange)info withText:(id)text;
-(id).cxx_construct;
-(int)compare:(id)compare;
-(void)dealloc;
@end

@interface QQCoretTextInfo : NSObject {
	unsigned _fontSize;
	NSString* _fontName;
	float _characterSpacing;
	float _lineSpacing;
	float _paragraphSpace;
	unsigned char _textAlignment;
	CFNumberRef _lineNumber;
	CFNumberRef _characterNumber;
	CTFontRef _font;
	UIColor* _fontColor;
	UIColor* _linkColor;
	NSNumber* _ascNumber;
	NSNumber* _desNumber;
	NSNumber* _heiNumber;
	NSMutableArray* _storeArray;
}
+(id)GetText:(CGRect)text rectContion:(CGRect)contion parserRangeText:(id)text3 run:(CTRunRef)run;
+(id)GetFontWidth:(float)width withText:(id)text startPoint:(CGPoint)point isFront:(bool)front run:(CTRunRef)run;
+(void)ClearCoreTextInfo;
+(id)GetInstance;
-(void)dealloc;
-(id)GetEmojiWid;
-(id)GetEmojiHei;
-(id)GetEmojiDes;
-(id)GetEmojiAsc;
-(CTParagraphStyleSetting)GetParagraphStyleSetting;
-(CTParagraphStyleSetting)GetLineSpaceParagaphStyleSetting;
-(CTParagraphStyleSetting)GetTextAlignmentParagraphStyleSetting;
-(float)GetLineSpacing;
-(float)GetCharacterSpcae;
-(CFNumberRef)GetLineSpacingNumber;
-(CFNumberRef)GetCharacterSpacingNumber;
-(float)GetFontSize;
-(CGColorRef)GetLinkColor;
-(CGColorRef)GetFontColor;
-(CTFontRef)GetFont;
-(id)storeObjects;
-(void)clearObject;
-(void)addObject:(id)object;
-(id)init;
@end

@interface QQDivideMessageModel : QQChatCellModel {
	int _messageType;
	NSString* _sourcesText;
	NSString* _divideText;
	NSMutableArray* _parseRanges;
	NSArray* _lines;
	CGPoint* _points;
	float _height;
	float _lineSpacing;
	NSMutableAttributedString* _baseSource;
	NSArray* _imagePoint;
	CGPoint _touchPoint;
	BOOL _selected;
	CGPoint _startPoint;
	CGPoint _endPoint;
}
@property(assign, nonatomic) CGPoint endPoint;
@property(assign, nonatomic) CGPoint startPoint;
@property(assign, nonatomic) BOOL selected;
@property(assign, nonatomic) CGPoint touchPoint;
@property(assign, nonatomic) float lineSpacing;
@property(retain, nonatomic) NSArray* imagePoint;
@property(retain, nonatomic) NSMutableAttributedString* baseSource;
@property(retain, nonatomic) NSString* sourcesText;
@property(assign, nonatomic) int messageType;
-(id).cxx_construct;
-(float)GetImageHeight;
-(float)GetHeight;
-(CGPoint*)GetOrigins;
-(id)GetCTLines;
-(void)addCTLineOrigin:(CGPoint*)origin;
-(void)addCTLines:(id)lines;
-(void)dealloc;
-(id)initWithMessageModel:(id)messageModel;
-(id)description;
-(id)init;
@end

@interface QQSelectedView : UITextView <UITextViewDelegate> {
	UITextView* _textView;
}
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)setFont:(id)font;
-(void)copyText:(id)text;
-(void)showMenu;
-(BOOL)canBecomeFirstResponder;
-(void)setText:(id)text;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQIconView : UIView {
	BOOL _top;
	UIImageView* _headImageView;
}
@property(assign, nonatomic) BOOL top;
-(void)drawRect:(CGRect)rect;
-(void)setCenter:(CGPoint)center;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQDynamicDeviceInfo : NSObject {
	int* cpuInfo;
	int* prevCPUInfo;
	unsigned numCPUInfo;
	unsigned numPrevCPUInfo;
	NSLock* cpuUsageLock;
	unsigned host_port;
	int return_Info;
	unsigned numOfCPU;
}
+(void)RemoveInstance;
+(id)GetInstance;
-(void)report_memory;
-(void)PrintUsageOfCPUAndMemory:(Class)cpuandMemory Function:(SEL)function;
-(BOOL)GetCPUUseageOfDevice:(float*)device;
-(BOOL)GetUsageOfCPUForIphone:(float*)iphone;
-(unsigned)GetNumberOfCPU;
-(BOOL)GetUserMemory:(double*)memory;
-(BOOL)GetPhysicsMemory:(double*)memory;
-(BOOL)GetVirtualMemoryForAPP:(double*)app;
-(BOOL)GetUsedMemoryForAPP:(double*)app;
-(BOOL)GetFreeMemory:(double*)memory;
-(BOOL)GetUesdMemory:(double*)memory;
-(BOOL)GetUsageOfCPUForApp:(float*)app;
-(void)dealloc;
-(id)init;
@end

@interface VidoGuideMaskView : UIView {
	UIButton* _skipButton;
	BOOL _animating;
}
@property(readonly, assign, nonatomic) UIButton* skipButton;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)showButton:(id)button;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)hideButton;
@end

@interface PlayerView : UIView {
}
@property(assign, nonatomic) AVPlayer* player;
+(Class)layerClass;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQGuideVideoWindow : UIWindow {
	PlayerView* _playerView;
@private
	NSString* audioCategory;
}
@property(retain, nonatomic) NSString* audioCategory;
+(void)clearVideo;
+(BOOL)loadVideo;
+(BOOL)videoFileExist;
+(id)videoFilePath;
-(void)onVideoChatStart;
-(void)stopVideo;
-(void)resumeVideo;
-(void)didFadeOut;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQChatBubbleConfig : QQBaseSkinConfig {
@private
	CGPoint receiveStretchablePoint;
	CGPoint sendStretchablePoint;
}
@property(assign, nonatomic) CGPoint sendStretchablePoint;
@property(assign, nonatomic) CGPoint receiveStretchablePoint;
+(id)getConfigKey;
+(id)getInstance;
-(void)setConfigValues:(id)values;
@end

@interface LinkedLabel : UILabel {
	UIEdgeInsets _insets;
}
@property(assign, nonatomic) UIEdgeInsets insets;
-(void)drawTextInRect:(CGRect)rect;
-(id)initWithInsets:(UIEdgeInsets)insets;
-(id)initWithFrame:(CGRect)frame andInsets:(UIEdgeInsets)insets;
@end

@interface QQDefaultColorConfig : QQColorConfig {
}
+(id)getInstance;
-(void)setColorValue:(id)value colorKey:(id)key colorType:(int)type;
@end

@interface X8FileManager : NSObject {
}
+(id)getWebAppCachePath;
+(id)getLastCacheFileMd5;
+(id)getFileMd5:(id)a5;
+(BOOL)unzipChacheFile:(id)file;
+(id)getGameCenterPath;
+(id)getLastChacheFile;
+(BOOL)setZipAsLastChacheFile:(id)file;
+(BOOL)initDefaultCaches;
@end

@interface X8FileItem : NSObject {
	NSString* _fileName;
	NSString* _fileUrl;
	NSString* _fileMD5;
	int _retryTimes;
}
@property(assign, nonatomic) int retryTimes;
@property(retain, nonatomic) NSString* fileMD5;
@property(retain, nonatomic) NSString* fileUrl;
@property(retain, nonatomic) NSString* fileName;
-(void)dealloc;
-(id)init;
@end

@interface X8WebFileMgr : NSObject {
	NSURLConnection* _httpDownConnection;
	BOOL _updateProcess;
	int _httpRequestType;
	id<X8WebFileMgrDelegate> _delegate;
	NSMutableDictionary* _cacheFileDict;
	NSMutableData* _downFileData;
	int _downFileIndex;
	NSMutableArray* _downFileArray;
}
@property(retain, nonatomic) NSMutableDictionary* cacheFileDict;
@property(retain, nonatomic) NSMutableArray* downFileArray;
@property(retain, nonatomic) id<X8WebFileMgrDelegate> delegate;
+(id)GetInstance;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)releaseConnection;
-(void)StartConnect:(id)connect;
-(void)StopUpdateFile;
-(void)StartUpdateFile:(id)file;
-(void)dealloc;
-(id)init;
@end

@interface QQSkinSearchBar : UISearchBar {
}
-(void)addSubview:(id)subview;
-(void)reloadAppearance;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQSkinSwitch : UISwitch {
	id _object;
}
@property(retain, nonatomic) id object;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WMCCryptHelper : NSObject {
}
+(id)decryptUsingTae:(id)tae key:(id)key;
+(id)encryptUsingTea:(id)tea key:(id)key;
@end

@interface WMCDirectoryHelper : NSObject {
}
+(id)getTmpPath;
+(id)getCachePath;
+(id)getDocumentPath;
@end

@interface WMCLocaleHelper : NSObject {
}
+(id)currentAppLanguage;
@end

@interface ZebraViewController : UIViewController <FSImageCropControllerDelegate, UINavigationControllerDelegate, WMCWatermarkViewDelegate, UIGestureRecognizerDelegate, QPageViewDelegate, QPageFitViewDelegate, FSVideoViewDelegate, UIImagePickerControllerDelegate, UITextFieldDelegate, UIPickerViewDataSource, UIPickerViewDelegate, QRotateViewDelegate, WMCReceiveDataDelagate, WMCTextFieldInputDelegate> {
@private
	int controllerStatus;
	struct {
		unsigned isFirstAppear : 1;
		unsigned firstTimeNeedUpdateData : 1;
		unsigned canShowWatermarkCellIndicator : 1;
		unsigned isVisible : 1;
		unsigned disableHideCategoryWhenScroll : 1;
		unsigned isAlbumEnable : 1;
		unsigned locationHintEnable : 1;
	} option;
	int _selectedIndex;
	UIImage* _capturedImage;
	BOOL _originStatusBarHidden;
	UIButton* _buttonCancel;
	int _currentFetchInfoStatus;
	NSArray* _dataSource;
	UIButton* _buttonLocation;
	UIButton* _buttonShare;
	BOOL _saveToAlbum;
	UIButton* _buttonTakePhoto;
	UIButton* _buttonBack;
	BOOL _showChooseScorePickerView;
	QPageFitView* _pageView;
	WMCRotateView* _rotateMenu;
	UIButton* _buttonOpenAlbum;
	UIView* _contentView;
	UIActionSheet* _scorePickerActionSheet;
	FSVideoView* _videoView;
	FSCameraIrisView* _cameraIrisView;
	UIButton* _buttonSwithCamera;
	id<ZebraViewControllerDelegate> _delegate;
	WMCRotateView* _rotateView;
	WMCScorePickerView* _picker;
	WMCTextFieldView* _simpleTextField;
	UIButton* _buttonSwitchFlash;
	UIButton* _scorePickerButtonDone;
	WMCUpdateDataStatusView* _updateDataStatus;
	UIImageView* _albumFrame;
	UIButton* _scorePickerButtonCancel;
	int _takePhotoOrientation;
	UIImageView* _imagePreview;
	NSDictionary* _originImageMetadata;
	int _currentOrientation;
	int _currentPageIndex;
	UIView* _toolbarView;
}
@property(copy, nonatomic) NSArray* dataSource;
@property(assign, nonatomic) int currentPageIndex;
@property(retain, nonatomic) QPageFitView* pageView;
@property(assign, nonatomic) int controllerStatus;
@property(retain, nonatomic) NSDictionary* originImageMetadata;
@property(retain, nonatomic) UIButton* scorePickerButtonCancel;
@property(retain, nonatomic) UIButton* scorePickerButtonDone;
@property(retain, nonatomic) WMCScorePickerView* picker;
@property(retain, nonatomic) UIActionSheet* scorePickerActionSheet;
@property(assign, nonatomic) BOOL showChooseScorePickerView;
@property(assign) int currentFetchInfoStatus;
@property(assign, nonatomic) int currentOrientation;
@property(assign, nonatomic) int takePhotoOrientation;
@property(retain, nonatomic) WMCUpdateDataStatusView* updateDataStatus;
@property(retain, nonatomic) WMCTextFieldView* simpleTextField;
@property(retain, nonatomic) FSCameraIrisView* cameraIrisView;
@property(retain, nonatomic) WMCRotateView* rotateMenu;
@property(retain, nonatomic) UIButton* buttonBack;
@property(retain, nonatomic) UIButton* buttonShare;
@property(retain, nonatomic) UIButton* buttonCancel;
@property(retain, nonatomic) UIButton* buttonLocation;
@property(retain, nonatomic) UIButton* buttonTakePhoto;
@property(retain, nonatomic) UIButton* buttonOpenAlbum;
@property(retain, nonatomic) UIButton* buttonSwithCamera;
@property(retain, nonatomic) UIButton* buttonSwitchFlash;
@property(retain, nonatomic) UIImageView* albumFrame;
@property(retain, nonatomic) UIImageView* imagePreview;
@property(retain, nonatomic) FSVideoView* videoView;
@property(retain, nonatomic) UIView* toolbarView;
@property(retain, nonatomic) WMCRotateView* rotateView;
@property(retain, nonatomic) UIView* contentView;
@property(assign, nonatomic) id<ZebraViewControllerDelegate> delegate;
@property(assign, nonatomic) BOOL saveToAlbum;
+(id)watermarkSchemeV1s2;
+(BOOL)isWaterMarkVersionGreaterV1s2;
+(BOOL)isWaterMarkInstalled;
+(BOOL)isWaterMarkValid;
+(id)viewControllerWithDelegate:(id)delegate qq:(id)qq source:(unsigned char)source;
-(void)applicationWillEnterBackground:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(BOOL)isAlertShown;
-(void)checkNetworkError;
-(void)locationAuthorizationChange;
-(void)showMenuButtons:(BOOL)buttons;
-(void)didGetData:(BOOL)data succ:(BOOL)succ error:(id)error;
-(void)reloadVisibleWatermarkData;
-(void)waterMark:(id)mark tapAtLabel:(id)label;
-(BOOL)isSimpleText:(id)text info:(id)info;
-(void)waterMark:(id)mark recommendWordings:(id)wordings info:(id)info;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)onScorePickerCancelClicked:(id)clicked;
-(void)onScorePickerSaveClicked:(id)clicked;
-(void)setShowChooseScorePickerView:(BOOL)view withinfo:(id)withinfo;
-(void)waterMark:(id)mark onClickScorePicker:(id)picker;
-(void)waterMark:(id)mark showEnumerations:(id)enumerations;
-(void)uiview:(id)uiview onInputChange:(id)change keyName:(id)name finished:(BOOL)finished;
-(void)waterMark:(id)mark onClickTextLabel:(id)label;
-(BOOL)textFieldShouldClear:(id)textField;
-(void)pageViewDidScroll:(id)pageView;
-(void)hideSimpleTextField;
-(void)pageViewDidEndDecelerate:(id)pageView;
-(void)pageViewDidEndDragging:(id)pageView willDecelerate:(BOOL)decelerate;
-(void)pageView:(id)view currentPageIndexDidChange:(int)currentPageIndex;
-(void)showSceneViewIfNecessary:(id)necessary sid:(id)sid categoryID:(id)anId;
-(id)pageView:(id)view pageAtIndex:(int)index;
-(void)pageView:(id)view willRecyclePage:(id)page atIndex:(int)index;
-(unsigned)numberOfPagesInPageView:(id)pageView;
-(void)switchToCategory:(int)category waterMarkIndex:(int)index;
-(void)imageCropControllerDidCancel:(id)imageCropController;
-(void)imageCropController:(id)controller didFinishingEditingWithImage:(id)image asset:(id)asset;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)orientationDidChange:(id)orientation;
-(void)checkUIInCurrentOrientationRotateToNewOrientation:(int)newOrientation;
-(void)rotateRotateView:(int)view animated:(BOOL)animated;
-(void)rotateView:(id)view rotateToNewOrientation:(int)newOrientation;
-(void)layoutPageViewInPickImage:(CGRect)pickImage newOri:(int)ori;
-(BOOL)rotateView:(id)view canRotateToOrientation:(int)orientation;
-(void)rotateUIToOrientation:(int)orientation animated:(BOOL)animated;
-(void)rotateUIOnBottomBarToOrientation:(int)orientation;
-(void)customsizeFlashButtonAndSwitchButton;
-(void)setFlashButtonAndSwitchButtonHide:(BOOL)hide;
-(void)layoutSettingButton;
-(void)layoutFlashButtonAndSwitchButton;
-(void)setButtonEnable:(BOOL)enable;
-(void)refreshAlbumPoster;
-(void)hideShareUI;
-(void)showShareUI;
-(void)tapGestureRespnosed:(id)respnosed;
-(void)videoView:(id)view failedToTakeImage:(id)takeImage didStart:(BOOL)start;
-(void)videoView:(id)view didFinishSnapshot:(id)snapshot;
-(void)videoViewWillSnapshot:(id)videoView;
-(void)videoView:(id)view didFinishScratchRawImage:(id)image error:(id)error interfaceOrientation:(int)orientation mirrored:(BOOL)mirrored;
-(void)videoView:(id)view didFinishProcessingImage:(id)image originImage:(id)image3;
-(void)videoView:(id)view didFinishAnimation:(BOOL)animation;
-(void)backButtonPressed:(id)pressed;
-(void)refreshButtonPressed:(id)pressed;
-(void)shareButtonPressed:(id)pressed;
-(void)cancelButtonPressed:(id)pressed;
-(void)takePhotoButtonPressed:(id)pressed;
-(void)categoryButtonPressed:(id)pressed;
-(void)albumButtonPressed:(id)pressed;
-(void)locationButtonPressed:(id)pressed;
-(void)switchCameraButtonPressed:(id)pressed;
-(void)switchFlashButtonPressed:(id)pressed;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)viewDidUnload;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)presentModalViewController:(id)controller animated:(BOOL)animated stopCamera:(BOOL)camera;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(unsigned)supportedInterfaceOrientations;
@end

@interface ZebraViewController480 : ZebraViewController {
@private
	UIImageView* _cameraIcon;
	UIImageView* _doneIcon;
}
@property(retain, nonatomic) UIImageView* doneIcon;
@property(retain, nonatomic) UIImageView* cameraIcon;
-(void)rotateUIOnBottomBarToOrientation:(int)orientation;
-(void)setButtonEnable:(BOOL)enable;
-(void)hideShareUI;
-(void)showShareUI;
-(void)layoutSettingButton;
-(void)layoutFlashButtonAndSwitchButton;
-(void)customsizeFlashButtonAndSwitchButton;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface ZebraViewController568 : ZebraViewController {
@private
	UIView* _topbar;
}
@property(retain, nonatomic) UIView* topbar;
-(void)rotateUIOnBottomBarToOrientation:(int)orientation;
-(void)layoutSettingButton;
-(void)layoutFlashButtonAndSwitchButton;
-(void)customsizeFlashButtonAndSwitchButton;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface WMCUpdateDataStatusView : UIView {
@private
	unsigned char style_;
	BOOL needShowRetryButton_;
	UIButton* _updateRetryButton;
	UIImageView* _bkgView;
	FSHighlightedButton* _updateRetryBarButton;
	unsigned char _style;
	int _status;
	UILabel* _updatingLabel;
	UILabel* _updateSuccLabel;
	UILabel* _updateFailLabel;
}
@property(retain, nonatomic) FSHighlightedButton* updateRetryBarButton;
@property(retain, nonatomic) UIImageView* bkgView;
@property(retain, nonatomic) UIButton* updateRetryButton;
@property(retain, nonatomic) UILabel* updateFailLabel;
@property(retain, nonatomic) UILabel* updateSuccLabel;
@property(retain, nonatomic) UILabel* updatingLabel;
@property(assign, nonatomic) unsigned char style;
@property(assign, nonatomic) int status;
-(void)useBarButtonStyle:(id)style;
-(void)useDefaultButtonStyle:(id)style;
-(void)useBarLabelStyle:(id)style;
-(void)useDefaultLabelStyle:(id)style;
-(void)hideSuccLabelAfterDelay;
-(void)hideFailLabelAfterDelay;
-(void)setRetryButtonTarget:(id)target selector:(SEL)selector;
-(void)shrinkBackgroundText:(id)text label:(id)label;
-(void)shrinkBackground:(id)background;
-(void)showByStatusWhenNotActive:(int)active text:(id)text;
-(void)showByStatus:(int)status text:(id)text;
-(void)allHide;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface FSHighlightedButton : UIButton {
@private
	UIImageView* _highlightedView;
}
-(void)touchUp:(id)up;
-(void)touchDown:(id)down;
-(void)setup;
-(id)init;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WMCSaveManager : NSObject {
}
+(id)generateCurrentDefaultWatermarkInfo;
+(id)createTiffAndSaveToMetaDataDic:(id)metaDataDic date:(id)date;
+(id)tiffDateTimeFormate;
+(id)metaDataImageOrientation:(int)orientation metaDataDic:(id)dic;
+(id)metaDataWithLocation:(id)location metaDataDic:(id)dic;
+(void)saveImage:(id)image exif:(id)exif completion:(id)completion;
+(void)saveImage:(id)image exif:(id)exif saveToGroup:(BOOL)group completion:(id)completion;
+(void)saveImage:(id)image exif:(id)exif originMetadata:(id)metadata saveToGroup:(BOOL)group completion:(id)completion;
@end

@interface FSImageCropController : UIViewController <UIScrollViewDelegate> {
@private
	UIImage* _image;
	float _minScale;
	float _maxScale;
	float _fitScale;
	int _rotateCount;
	CGSize _imageSize;
	ALAsset* _asset;
	ALAssetsLibrary* _assetLibrary;
	NSURL* _assetURL;
	id<FSImageCropControllerDelegate> _delegate;
	BOOL _observerFlag;
	int _barStyle;
	UIView* _contentView;
	FSCropMaskView* _cropMaskView;
	UIActivityIndicatorView* _indicatorView;
	UIButton* _buttonRotate;
	UIButton* _buttonDone;
	UIImageView* _imageView;
	UIButton* _buttonCancel;
	UIScrollView* _scrollView1;
	UIButton* _buttonRatio;
	UIScrollView* _scrollView;
	UIImageView* _imageView1;
}
@property(retain, nonatomic) UIButton* buttonRotate;
@property(retain, nonatomic) UIButton* buttonDone;
@property(retain, nonatomic) UIButton* buttonCancel;
@property(retain, nonatomic) UIButton* buttonRatio;
@property(retain, nonatomic) UIImageView* imageView1;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) UIScrollView* scrollView1;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(retain, nonatomic) UIView* contentView;
@property(retain, nonatomic) FSCropMaskView* cropMaskView;
@property(retain, nonatomic) UIActivityIndicatorView* indicatorView;
@property(assign, nonatomic) id<FSImageCropControllerDelegate> delegate;
-(void)ratioButtonPressed:(id)pressed;
-(void)rotateButtonPressed:(id)pressed;
-(void)cancelButtonPressed:(id)pressed;
-(void)doneButtonPressed:(id)pressed;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)deleteObserver;
-(void)setupObserver;
-(void)generateAsset;
-(void)setUIEnable:(BOOL)enable;
-(void)adjustContent:(BOOL)content;
-(CGImageRef)createCorrectOrientationImageRef;
-(CGSize)cropImageSize;
-(CGRect)cropImageRect;
-(void)loadImage:(id)image;
-(void)dismissModalViewControllerAnimated:(BOOL)animated;
-(void)viewDidLayoutSubviews;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithImage:(id)image assetURL:(id)url;
@end

@interface FSCropMaskView : UIView {
@private
	CGPoint _origin;
	CGPoint _origin43;
	CGPoint _origin34;
	int _ratio;
}
@property(readonly, assign, nonatomic) CGRect cropRect;
@property(assign, nonatomic) int ratio;
-(void)drawRect:(CGRect)rect;
-(void)calculateOrigin;
-(void)setBounds:(CGRect)bounds;
-(void)setFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
@end

@interface FSAccelerometer : NSObject <UIAccelerometerDelegate> {
@private
	XXStruct_taVrlB gravity;
	BOOL _isAccelerometerOn;
}
+(id)accelerometer;
+(void)initialize;
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
-(XXStruct_taVrlB)gravity;
-(void)stopAccelermeter;
-(void)startAccelermeter;
-(id)init;
@end

@interface FSOrientationManager : NSObject {
@private
	BOOL _observerEnabled;
	int _orientation;
}
@property(assign, nonatomic) int orientation;
+(id)defaultManager;
+(void)initialize;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)endGeneratingOrientation;
-(void)beginGeneratingOrientation;
-(id)init;
@end

@interface WMCModifyLongWordsViewController : UIViewController <UITextViewDelegate> {
	id<PassValueDelegate> delegate;
@private
	UIButton* _clearTextButton;
	int _maxLen;
	NSString* _textValue;
	UITextView* _textViewDesc;
	UIImageView* _textViewBackground;
	UILabel* _maxLenLabel;
	UILabel* _lenLabel;
}
@property(assign, nonatomic) int maxLen;
@property(copy, nonatomic) NSString* textValue;
@property(retain, nonatomic) UIButton* clearTextButton;
@property(retain, nonatomic) UILabel* maxLenLabel;
@property(retain, nonatomic) UILabel* lenLabel;
@property(retain, nonatomic) UIImageView* textViewBackground;
@property(retain, nonatomic) UITextView* textViewDesc;
@property(assign, nonatomic) id<PassValueDelegate> delegate;
-(void)onClickFinishButton:(id)button;
-(void)onClickBackButton:(id)button;
-(void)onClickClearTextButton:(id)button;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidChange:(id)textView;
-(void)initNavigationBar;
-(void)didReceiveMemoryWarning;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithTextValue:(id)textValue maxLen:(int)len;
@end

@interface WMCRecommentWordingsViewController : UIViewController <UITableViewDataSource, UITableViewDelegate, PassValueDelegate> {
@private
	UIView* _seperateView;
	UIImageView* _accessoryView;
	UILabel* _textLabel;
	UIImageView* _shadowView;
	NSArray* _recommendWordings;
	UIView* _backView;
	id _delegate;
	UITableView* _tableView;
	NSString* _textValue;
	NSString* _keyName;
	int _maxLen;
	UIButton* _dummyButton;
	NSString* _defaultText;
}
@property(retain, nonatomic) UIButton* dummyButton;
@property(retain, nonatomic) UIView* seperateView;
@property(retain, nonatomic) UIImageView* accessoryView;
@property(retain, nonatomic) UILabel* textLabel;
@property(retain, nonatomic) UIImageView* shadowView;
@property(retain, nonatomic) UIView* backView;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) int maxLen;
@property(copy, nonatomic) NSString* defaultText;
@property(copy, nonatomic) NSString* textValue;
@property(copy, nonatomic) NSString* keyName;
@property(retain, nonatomic) NSArray* recommendWordings;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)passValue:(id)value;
-(void)updateWatermark:(BOOL)watermark;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)labelheightForHotWord:(id)hotWord;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)updateModifiedWatermark;
-(void)onClickCancelButton:(id)button;
-(void)touchUp:(id)up;
-(void)touchDown:(id)down;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)initNavigationBar;
-(void)setup;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate dataSource:(id)source keyName:(id)name textValue:(id)value defaultText:(id)text maxLen:(int)len;
@end

@interface WMCTextFieldView : UIControl <UITextViewDelegate, HPGrowingTextViewDelegate> {
@private
	NSString* _defaultValue;
	UIButton* _clearTextButton;
	NSString* _keyName;
	BOOL _canEdit;
	UIButton* _clearButton;
	id<WMCTextFieldInputDelegate> _delegate;
	UIImageView* _textViewBkg;
	UILabel* _maxLenLabel;
	UILabel* _curLenLabel;
	unsigned _maxAllowedLength;
	UIImageView* _lenBkgView;
	NSString* _keyboardType;
	UIImageView* _bkgView;
	HPGrowingTextView* _textView;
	UIButton* _doneButton;
	NSString* _originalValue;
}
@property(assign, nonatomic) id<WMCTextFieldInputDelegate> delegate;
@property(assign, nonatomic) BOOL canEdit;
@property(copy, nonatomic) NSString* defaultValue;
@property(copy, nonatomic) NSString* originalValue;
@property(retain, nonatomic) NSString* keyboardType;
@property(retain, nonatomic) NSString* keyName;
@property(assign, nonatomic) unsigned maxAllowedLength;
@property(retain, nonatomic) UILabel* maxLenLabel;
@property(retain, nonatomic) UILabel* curLenLabel;
@property(retain, nonatomic) UIImageView* lenBkgView;
@property(retain, nonatomic) UIImageView* bkgView;
@property(retain, nonatomic) UIButton* doneButton;
@property(retain, nonatomic) UIButton* clearButton;
@property(retain, nonatomic) UIImageView* textViewBkg;
@property(retain, nonatomic) UIButton* clearTextButton;
@property(retain, nonatomic) HPGrowingTextView* textView;
-(void)growingTextViewDidChange:(id)growingTextView;
-(BOOL)growingTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)growingTextView:(id)view willChangeHeight:(float)height;
-(void)hideTextInput;
-(BOOL)isAllNum:(id)num;
-(void)updateWatermark:(BOOL)watermark;
-(void)onClickClearTextButton:(id)button;
-(void)onClickDoneButton:(id)button;
-(void)onClickClearButton:(id)button;
-(void)onTouchBackground:(id)background withEvent:(id)event;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame textValue:(id)value keyName:(id)name type:(id)type defaultText:(id)text maxAllowedLength:(unsigned)length;
@end

@interface WMCExpressionController : UIViewController <WMCGridViewDelegate> {
@private
	int _selectedIndex;
	NSString* _keyName;
	NSArray* _onlineScenes;
	NSString* _navTitle;
	NSArray* _ids;
	int _itemCount;
	NSString* _WMCWaterMarkResourcePath;
	NSString* _resourcePath;
	NSArray* _titles;
	NSArray* _images;
	WMCGridView* _gridView;
}
@property(assign, nonatomic) int itemCount;
@property(readonly, assign, nonatomic) NSString* resourcePath;
@property(retain, nonatomic) WMCGridView* gridView;
@property(retain, nonatomic) NSString* WMCWaterMarkResourcePath;
@property(retain, nonatomic) NSString* navTitle;
@property(retain, nonatomic) NSString* keyName;
@property(assign, nonatomic) int selectedIndex;
@property(retain, nonatomic) NSArray* onlineScenes;
@property(retain, nonatomic) NSArray* ids;
@property(retain, nonatomic) NSArray* titles;
@property(retain, nonatomic) NSArray* images;
-(void)viewDidUnload;
-(void)selectIndexInGridView:(id)gridView index:(int)index;
-(id)gridView:(id)view modelForRow:(int)row column:(int)column;
-(id)gridView:(id)view textForRow:(int)row column:(int)column;
-(id)gridView:(id)view imageForRow:(int)row column:(int)column;
-(float)columnWidthOfGridView:(id)gridView;
-(float)rowHeightOfGridView:(id)gridView;
-(int)selectedIndexOfGridView:(id)gridView;
-(int)numberOfItemsInGridView:(id)gridView;
-(int)numberOfColumnsOfGridView:(id)gridView;
-(int)numberOfRowsOfGridView:(id)gridView;
-(void)setSelectedIndexWithId:(id)anId;
-(void)reloadData;
-(void)cancelButtonPressed:(id)pressed;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)initNavigationBar;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface FSVideoView : UIView <AVCaptureVideoDataOutputSampleBufferDelegate> {
@private
	AVCaptureVideoPreviewLayer* _videoLayer;
	int _devicePosition;
	BOOL _shouldCapVideoFrame;
	BOOL _shouldSnapExif;
	BOOL _shouldSnapshot;
	unsigned _flipState;
	AVCaptureStillImageOutput* _stillImageOutput;
	QWatchedOperationQueue* _queue;
	dispatch_queue_s* _videoProcessingQueue;
	unsigned _state;
	UIImageView* _focusFrame;
	id<FSVideoViewDelegate> _delegate;
	BOOL _enabled;
	UIImage* _image;
}
@property(readonly, assign, nonatomic) QWatchedOperationQueue* queue;
@property(retain, nonatomic) UIImageView* focusFrame;
@property(retain, nonatomic) UIImage* image;
@property(readonly, assign, nonatomic) unsigned state;
@property(assign, nonatomic) BOOL enabled;
@property(readonly, assign, nonatomic) AVCaptureDevice* currentDevice;
@property(assign, nonatomic) id<FSVideoViewDelegate> delegate;
-(void)processSampleBuffer:(opaqueCMSampleBuffer*)buffer imageOrientation:(int)orientation;
-(int)snapshotImageOrientation;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)didFinishProcessingImage:(id)image;
-(void)cancelProcessingImage;
-(void)processImage:(id)image orientation:(int)orientation mirrored:(BOOL)mirrored;
-(void)switchFlashMode;
-(id)currentCameraMode;
-(id)currentFlashModeIntString;
-(id)currentFlashMode;
-(unsigned)flipDirection;
-(BOOL)isFrontCamera;
-(unsigned)deviceCount;
-(void)switchCamera;
-(void)switchDevice;
-(void)switchCameraStage2;
-(void)switchCameraStage1;
-(void)setFocus:(CGPoint)focus;
-(void)stopRunningSync;
-(void)stopRunning:(id)running;
-(BOOL)isRunning;
-(void)startRunning:(id)running;
-(void)takeImage:(id)image;
-(void)takeImage:(id)image completion:(id)completion;
-(void)takeImage;
-(void)takeSnapshot;
-(void)snapExifInfomation;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setFrame:(CGRect)frame;
-(int)mirroredOrientationWithImageOrientation:(int)imageOrientation;
-(void)updateVideoConnection;
-(id)imageWithJpeg:(id)jpeg orientation:(int)orientation;
-(id)imageWithData:(id)data orientation:(int)orientation;
-(void)setupLayer;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

@interface FSVideoOperation : QRunLoopOperation {
@private
	UIImage* _image;
	int _orientation;
	BOOL _mirrored;
	UIImage* _resultImage;
}
@property(readonly, assign, nonatomic) UIImage* originImage;
@property(retain, nonatomic) UIImage* resultImage;
-(void)main;
-(void)operationDidStart;
-(void)dealloc;
-(id)initWithRawImage:(id)rawImage orientation:(int)orientation mirrored:(BOOL)mirrored;
@end

@interface QRunLoopOperation : NSOperation {
	int _state;
	NSThread* _runLoopThread;
	NSSet* _runLoopModes;
	NSError* _error;
}
@property(readonly, assign) NSSet* actualRunLoopModes;
@property(readonly, assign) BOOL isActualRunLoopThread;
@property(readonly, assign) NSThread* actualRunLoopThread;
@property(assign) int state;
@property(copy) NSError* error;
@property(copy) NSSet* runLoopModes;
@property(retain) NSThread* runLoopThread;
-(void)cancel;
-(void)start;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isConcurrent;
-(void)operationWillFinish;
-(void)operationWillCancel;
-(void)operationDidStart;
-(void)finishWithError:(id)error;
-(void)cancelOnRunLoopThread;
-(void)startOnRunLoopThread;
-(void)dealloc;
-(id)init;
@end

@interface QWatchedOperationQueue : NSOperationQueue {
	id _target;
	NSThread* _targetThread;
	CFDictionaryRef _operationToAction;
}
@property(readonly, assign) NSThread* targetThread;
@property(assign) id target;
-(void)didFinishOperation:(id)operation;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)invalidate;
-(void)addOperation:(id)operation finishedAction:(SEL)action;
-(void)dealloc;
-(id)initWithTarget:(id)target;
@end

@interface FSCameraIrisView : UIView {
@private
	NSString* _cameraStringClose;
	NSString* _cameraStringOpen;
	NSString* _cameraStringBlink;
	unsigned char _irisStatus;
	UIImageView* _cameraIrisView;
}
@property(retain, nonatomic) UIImageView* cameraIrisView;
@property(assign, nonatomic) unsigned char irisStatus;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)animationDidStart:(id)animation;
-(void)clearCache;
-(void)openIrisHollowWithDuration:(double)duration start:(id)start stop:(id)stop;
-(void)closeIrisHollowWithDuration:(double)duration start:(id)start stop:(id)stop;
-(void)blinkIrisWithDuration:(double)duration start:(id)start stop:(id)stop;
-(void)setupKeys;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
@end

@interface JLRecentPlace : NSObject <NSCoding, NSCopying> {
	double aDistance;
@private
	NSString* _place;
	XXStruct_zYrK5D _coordinate;
	double _timeInterval;
}
@property(assign, nonatomic) XXStruct_zYrK5D coordinate;
@property(assign, nonatomic) double timeInterval;
@property(copy, nonatomic) NSString* place;
-(id)description;
-(void)dealloc;
-(BOOL)isEqual:(id)equal;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithPlace:(id)place location:(id)location date:(id)date;
-(id)initWithPlace:(id)place location:(id)location interval:(double)interval;
-(id)init;
@end

@interface JLWaterMarkCacheManager : NSObject {
	unsigned _lastSelectConstellation;
@private
	BOOL _hasModifyed;
	unsigned _maxPlaceCount;
	NSMutableArray* _placesArray;
	NSMutableDictionary* _savedParams;
	NSMutableDictionary* _constellationParams;
	JLRecentPlace* _lastSelectPlace;
	NSMutableArray* _poiArray;
}
@property(retain, nonatomic) NSMutableDictionary* constellationParams;
@property(retain, nonatomic) JLRecentPlace* lastSelectPlace;
@property(retain, nonatomic) NSMutableArray* poiArray;
@property(retain, nonatomic) NSMutableArray* placesArray;
@property(retain, nonatomic) NSMutableDictionary* savedParams;
+(id)shareInstance;
-(id)getRecentPOIModelsByLocation:(id)location;
-(id)getRecentPOIModelByLocation:(id)location;
-(void)pushPOIModel:(id)model location:(id)location;
-(id)getRecentPlacesByLocation:(id)location;
-(void)pushPlace:(id)place location:(id)location;
-(void)loadRecentPOIs;
-(void)saveRecentPOIs;
-(void)reloadRecentPlacesFromSource;
-(void)saveRecentPlaces;
-(id)getLastSelectPlace;
-(id)getLastSelectPlaceParams;
-(void)pushLastSelectPlace:(id)place location:(id)location;
-(id)objectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(BOOL)isCacheExpired:(id)expired key:(id)key;
-(void)updateCacheDate:(id)date;
-(BOOL)synchronize;
-(void)dealloc;
-(id)init;
@end

@interface WMCDelegateItem : NSObject {
@private
	id _delegate;
}
@property(assign, nonatomic) id delegate;
+(id)objectWithDelegate:(id)delegate;
-(BOOL)isEqual:(id)equal;
@end

@interface WMCDelegateBox : NSObject {
@private
	NSMutableArray* _allDelegates;
}
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(void)doNothing;
-(id)allDelegates;
-(void)removeDelegate:(id)delegate;
-(void)addDelegate:(id)delegate;
-(id)getDelegateObjectFromArray:(id)array delegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface WMCDynamicDataManager : NSObject <WMCLocationManagerDelagate> {
	struct {
		unsigned getCitySucc : 2;
		unsigned getWeather : 2;
	} fetch_status;
@private
	BOOL needUpdateDynamicData;
	NSMutableDictionary* _currentData;
	NSTimer* _secondUpdateTimer;
	id<WMCReceiveDataDelagate> _delegate;
	NSMutableDictionary* _activeTimerSet;
	NSTimer* _dBUpdateTimer;
	NSTimer* _speedDirectionTimer;
	CLLocation* _gpsLocation;
	NSMutableDictionary* _callbackResult;
	NSTimer* _timeUpdateTimer;
	id<WMCGetLocationDelegate> _locationDelegate;
	id<WMCGetPOIDelegate> _poiDelegate;
}
@property(retain, nonatomic) NSMutableDictionary* activeTimerSet;
@property(retain, nonatomic) NSTimer* secondUpdateTimer;
@property(retain, nonatomic) NSTimer* speedDirectionTimer;
@property(retain, nonatomic) NSTimer* dBUpdateTimer;
@property(retain, nonatomic) NSTimer* timeUpdateTimer;
@property(retain, nonatomic) NSMutableDictionary* callbackResult;
@property(retain, nonatomic) CLLocation* gpsLocation;
@property(assign, nonatomic) id<WMCGetPOIDelegate> poiDelegate;
@property(assign, nonatomic) id<WMCGetLocationDelegate> locationDelegate;
@property(assign, nonatomic) id<WMCReceiveDataDelagate> delegate;
@property(retain, nonatomic) NSMutableDictionary* currentData;
+(id)sharedManager;
+(id)createManagerWithDelegate:(id)delegate poiDelegate:(id)delegate2;
-(id)getErrorString;
-(int)getHourByDate:(id)date;
-(int)getMonthByDate:(id)date;
-(id)getWeatherText:(int)text;
-(void)parseWeatherDefault:(id)aDefault;
-(void)parseWeather:(id)weather savedDictionary:(id)dictionary;
-(BOOL)parseDate:(id)date savedDictionary:(id)dictionary;
-(void)parseLocation:(id)location savedDictionary:(id)dictionary;
-(void)parseAddress:(id)address savedDictionary:(id)dictionary;
-(void)loadWatermarkDataFromCache;
-(void)getCombinedInfoByLocation:(id)location result:(id)result;
-(void)updateWeather:(id)weather errorCode:(int)code;
-(void)handleDidReceiveData:(id)handle resultCode:(id)code;
-(void)didFinishGetLocations:(id)locations city:(id)city placeModel:(id)model country:(id)country location:(id)location needFetchWeather:(BOOL)weather error:(id)error;
-(void)didGetGPS:(id)gps oldLocation:(id)location error:(id)error;
-(void)reloadWatermark;
-(void)didSelectPlace:(id)place location:(id)location;
-(void)stopSecondTimeUpdateTimer;
-(void)startSencondTimeUpdateTimer;
-(void)_secondTimerOutSelcetor:(id)selcetor;
-(void)stopTimeUpdateTimer;
-(void)startTimeUpdateTimer;
-(void)_timerOutSelcetor:(id)selcetor;
-(void)stopAllUpdateTimer;
-(void)removeVisibleWatermarkModel:(id)model;
-(void)addVisibleWatermarkModel:(id)model;
-(void)_startUpdateIfNecessary;
-(void)startUpdateIfNecessary;
-(void)removeRealTimeSource:(id)source category:(id)category watermarkModel:(id)model;
-(void)updateRealTimeSource:(id)source category:(id)category watermarkModel:(id)model;
-(void)startUpdateLocation:(BOOL)location;
-(void)startUpdateData;
-(void)dealloc;
@end

@interface WMCLocationManager : NSObject <CLLocationManagerDelegate, WMCGetLocationDelegate, WMCGetPOIDelegate> {
	CLLocation* _lastLocation;
	NSArray* _lastPOIs;
	NSMutableArray* _tmpPOIs;
	NSString* _city;
	NSString* _district;
	NSString* _country;
@private
	WMCDelegateBox* _delegateBox;
	BOOL isStartUpdateLocation;
	CLLocation* _inaccurateLocation;
	NSString* _searchTerm;
	CLLocationManager* _locationManager;
	NSArray* _currentPOIs;
	NSMutableDictionary* _locationPois;
	NSThread* _workThread;
	NSMutableSet* _locationsWithPOI;
	NSTimer* _runLoopTimer;
	BOOL _needFetchWeather;
	NSTimer* _timeoutTimer;
}
@property(retain, nonatomic) NSMutableDictionary* locationPois;
@property(retain, nonatomic) NSMutableSet* locationsWithPOI;
@property(retain, nonatomic) CLLocation* inaccurateLocation;
@property(retain, nonatomic) NSString* searchTerm;
@property(retain, nonatomic) NSMutableArray* tmpPOIs;
@property(retain, nonatomic) CLLocationManager* locationManager;
@property(retain, nonatomic) NSTimer* timeoutTimer;
@property(assign, nonatomic) BOOL needFetchWeather;
@property(retain, nonatomic) NSTimer* runLoopTimer;
@property(retain, nonatomic) NSThread* workThread;
@property(copy) NSString* country;
@property(copy) NSString* district;
@property(copy) NSString* city;
@property(retain) NSArray* currentPOIs;
@property(retain) NSArray* lastPOIs;
@property(retain) CLLocation* lastLocation;
+(id)getCityNameByWMCstGetPositionRsp:(id)rsp;
+(id)loadCityDict;
+(id)sharedLocationManager;
-(void)parseLBSResp:(id)resp location:(id)location errorCode:(int)code;
-(void)getPOI:(id)poi search:(id)search completionBlock:(id)block fail:(id)fail;
-(void)startUpdateLocation:(BOOL)location;
-(void)removeDelegate:(id)delegate;
-(void)addDelegate:(id)delegate;
-(void)handleSearchDidFinished:(id)handleSearch searchPOIs:(id)pois;
-(void)searchPOI:(id)poi;
-(void)getPOIListResponse:(id)response error:(id)error;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)didGetLocation:(id)location;
-(id)locationKey:(id)key;
-(void)didFailed:(id)failed;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)getPOIListRequest:(BOOL)request;
-(void)_getPOIListRequest;
-(void)stopTimeUpdateTimer;
-(void)startTimeUpdateTimer;
-(void)_timerOutSelcetor:(id)selcetor;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)dealloc;
-(void)runLoopTimerFunc;
-(void)startThread;
@end

@interface WMCWeatherModel : NSObject {
@private
	NSString* _cityID;
	NSString* _weatherDesc;
	NSString* _cityName;
	int _weatherType;
	NSString* _sunSetTime;
	NSString* _maxTemperature;
	NSString* _zipCode;
	NSString* _sunRiseTime;
	NSString* _airPollutionType;
	int _pm25;
	NSString* _currentHumindity;
	NSString* _minTemperature;
	NSString* _currentTemperature;
	NSString* _windDirection;
	NSString* _windPower;
}
@property(assign, nonatomic) int pm25;
@property(retain, nonatomic) NSString* minTemperature;
@property(retain, nonatomic) NSString* maxTemperature;
@property(retain, nonatomic) NSString* airPollutionType;
@property(retain, nonatomic) NSString* weatherDesc;
@property(assign, nonatomic) int weatherType;
@property(retain, nonatomic) NSString* windDirection;
@property(retain, nonatomic) NSString* windPower;
@property(retain, nonatomic) NSString* currentHumindity;
@property(retain, nonatomic) NSString* currentTemperature;
@property(retain, nonatomic) NSString* sunSetTime;
@property(retain, nonatomic) NSString* sunRiseTime;
@property(retain, nonatomic) NSString* zipCode;
@property(retain, nonatomic) NSString* cityID;
@property(retain, nonatomic) NSString* cityName;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(void)encodeNSString:(id)string value:(id)value key:(id)key;
-(void)encodeWithCoder:(id)coder;
@end

@interface WMCCategoryManager : NSObject {
@private
	NSMutableDictionary* _allCategories;
	NSMutableDictionary* _categoryWatermarkID;
	int _currentCategoryIndex;
	NSMutableArray* _categoriesInCache;
	NSString* _currentCategoryID;
}
@property(assign, nonatomic) int currentCategoryIndex;
@property(retain, nonatomic) NSMutableArray* categoriesInCache;
@property(retain, nonatomic) NSMutableDictionary* categoryWatermarkID;
@property(retain, nonatomic) NSMutableDictionary* allCategories;
@property(retain, nonatomic) NSString* currentCategoryID;
+(id)sharedManager;
-(BOOL)isWatermarkDownload:(id)download version:(int)version;
-(void)checkWatermark;
-(BOOL)isLocalAvailableWatermark:(id)watermark category:(id)category;
-(id)getCurrentWatermarkModels;
-(id)getWatermarkModelBySid:(id)sid;
-(id)getAllWatermarkModels;
-(int)getWatermarkCountBeforeCategory:(id)category;
-(id)getCurrentCategoryByIndex:(int)index;
-(id)getCurrentCategory;
-(void)saveCategoryLastWatermarkIndex;
-(void)saveDefaultCategoryID;
-(void)loadDefaultCategoryID;
-(void)loadAllCategories;
-(void)saveCache;
-(void)loadCacheFromCache;
-(int)getCategoryIndex:(id)index;
-(id)getCategoryByCategoryID:(id)anId;
-(void)dealloc;
@end

@interface WMCWatermarkSceneManager : NSObject {
@private
	NSString* _sid;
	NSMutableDictionary* _watermarkTextID;
	NSMutableDictionary* _watermarksidScene;
}
@property(retain, nonatomic) NSMutableDictionary* watermarkTextID;
@property(retain, nonatomic) NSMutableDictionary* watermarksidScene;
@property(retain, nonatomic) NSString* sid;
+(id)sharedManager;
-(void)load;
-(void)save;
-(id)getCurrentWatermarkTextID;
-(void)setCurrentWatermarkTextID:(id)anId;
-(id)getSceneByWatermarkSid:(id)sid;
-(void)saveWatermarkSid:(id)sid sceneID:(id)anId;
@end

@interface WMCWatermarkViewManager : NSObject {
@private
	NSOperationQueue* _parseQueue;
	NSMutableDictionary* _modelViewReusePool;
}
@property(retain, nonatomic) NSOperationQueue* parseQueue;
@property(retain, nonatomic) NSMutableDictionary* modelViewReusePool;
+(id)sharedManager;
-(id)getWatermarkViewByModel:(id)model category:(id)category block:(id)block;
-(id)getWatermarkViewByModel:(id)model;
-(void)cleanMemory;
-(void)cleanMemory:(id)memory;
-(double)availableMemory;
-(void)dealloc;
@end

@interface WMCFileHelper : NSObject {
}
+(id)searchXMLOrWMCInDir:(id)dir;
+(id)sharedInstance;
-(BOOL)deleteFile:(id)file;
-(id)getWmConfigDir;
-(BOOL)generateWmConfigDir;
-(BOOL)generateWmResDir;
-(BOOL)generateDir:(id)dir;
-(BOOL)generateWmDir;
-(BOOL)checkWmConfigFileIsExist;
-(BOOL)checkWmResDirIsExist;
-(BOOL)checkWmConfigDirIsExist;
-(BOOL)checkWmDirIsExist;
-(BOOL)checkDirIsExist:(id)exist;
-(id)getDownloadWmResPathById:(id)anId version:(int)version;
@end

@interface WMCDirectoryManager : NSObject {
}
+(id)getInstance;
-(id)getWMDownloadCachePath;
-(id)getWMDownloadFolderPath;
-(void)setDownloadFolderPath:(id)path;
-(BOOL)removeFolder:(id)folder inDirectory:(int)directory;
-(BOOL)removeFolder:(id)folder;
-(BOOL)createFolder:(id)folder inDirectory:(int)directory;
-(BOOL)createFolder:(id)folder;
@end

@interface WMCstDataCollectionReq : JceObjectV2 {
@private
	NSArray* jcev2_p_0_r_dataPackages__b0x9i_VOWMCstDataPackage;
}
@property(retain, nonatomic, getter=dataPackages, setter=setDataPackages:) NSArray* jcev2_p_0_r_dataPackages__b0x9i_VOWMCstDataPackage;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstDataPackage : JceObjectV2 {
@private
	NSDictionary* jcev2_p_0_r_numData__b0x9i_M09ONSStringONSString;
	NSDictionary* jcev2_p_1_r_strData__b0x9i_M09ONSStringONSString;
}
@property(retain, nonatomic, getter=strData, setter=setStrData:) NSDictionary* jcev2_p_1_r_strData__b0x9i_M09ONSStringONSString;
@property(retain, nonatomic, getter=numData, setter=setNumData:) NSDictionary* jcev2_p_0_r_numData__b0x9i_M09ONSStringONSString;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstReqComm : JceObjectV2 {
@private
	int jcev2_p_0_r_iAppId;
	int jcev2_p_1_r_iPlat;
	NSString* jcev2_p_2_r_sAppVersion;
	NSString* jcev2_p_3_r_sDeviceName;
	NSString* jcev2_p_4_r_sOSVersion;
	NSString* jcev2_p_5_r_sDeviceID;
	int jcev2_p_6_o_iAuthType;
	NSString* jcev2_p_7_o_sUid;
	NSString* jcev2_p_8_o_sSessionKey;
	NSString* jcev2_p_9_o_sReserved1;
	NSString* jcev2_p_10_o_sReserved2;
}
@property(retain, nonatomic, getter=sReserved2, setter=setSReserved2:) NSString* jcev2_p_10_o_sReserved2;
@property(retain, nonatomic, getter=sReserved1, setter=setSReserved1:) NSString* jcev2_p_9_o_sReserved1;
@property(retain, nonatomic, getter=sSessionKey, setter=setSSessionKey:) NSString* jcev2_p_8_o_sSessionKey;
@property(retain, nonatomic, getter=sUid, setter=setSUid:) NSString* jcev2_p_7_o_sUid;
@property(assign, nonatomic, getter=iAuthType, setter=setIAuthType:) int jcev2_p_6_o_iAuthType;
@property(retain, nonatomic, getter=sDeviceID, setter=setSDeviceID:) NSString* jcev2_p_5_r_sDeviceID;
@property(retain, nonatomic, getter=sOSVersion, setter=setSOSVersion:) NSString* jcev2_p_4_r_sOSVersion;
@property(retain, nonatomic, getter=sDeviceName, setter=setSDeviceName:) NSString* jcev2_p_3_r_sDeviceName;
@property(retain, nonatomic, getter=sAppVersion, setter=setSAppVersion:) NSString* jcev2_p_2_r_sAppVersion;
@property(assign, nonatomic, getter=iPlat, setter=setIPlat:) int jcev2_p_1_r_iPlat;
@property(assign, nonatomic, getter=iAppId, setter=setIAppId:) int jcev2_p_0_r_iAppId;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstReqHeader : JceObjectV2 {
@private
	WMCstReqComm* jcev2_p_0_r_reqComm;
	NSString* jcev2_p_1_r_sApply;
	NSString* jcev2_p_2_r_sCmd;
}
@property(retain, nonatomic, getter=sCmd, setter=setSCmd:) NSString* jcev2_p_2_r_sCmd;
@property(retain, nonatomic, getter=sApply, setter=setSApply:) NSString* jcev2_p_1_r_sApply;
@property(retain, nonatomic, getter=reqComm, setter=setReqComm:) WMCstReqComm* jcev2_p_0_r_reqComm;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstRspHeader : JceObjectV2 {
@private
	int jcev2_p_0_r_iRet;
	NSString* jcev2_p_1_r_sErrmsg;
}
@property(retain, nonatomic, getter=sErrmsg, setter=setSErrmsg:) NSString* jcev2_p_1_r_sErrmsg;
@property(assign, nonatomic, getter=iRet, setter=setIRet:) int jcev2_p_0_r_iRet;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCStatistic : NSObject <NSURLConnectionDataDelegate, NSURLConnectionDelegate> {
	NSString* _uniqueDeviceIdentifier;
@private
	BOOL inSendingStatistic;
	NSString* _market;
	NSString* _qq;
	NSString* _camera;
	NSMutableArray* _records;
	NSString* _flashLight;
	NSArray* _recordsCopy;
}
@property(copy) NSArray* recordsCopy;
@property(retain, nonatomic) NSMutableArray* records;
@property(retain, nonatomic) NSString* market;
@property(retain, nonatomic) NSString* qq;
@property(retain, nonatomic) NSString* camera;
@property(retain, nonatomic) NSString* flashLight;
+(void)logString:(id)string;
+(id)getFileDirPath;
+(id)shareInstance;
-(void)addRecord:(id)record;
-(void)setLocation:(id)location res:(id)res;
-(void)setNetwork:(id)network;
-(void)buildTime:(id)time;
-(void)buildComm:(id)comm;
-(void)setdB:(id)b;
-(void)setGPS:(id)gps;
-(void)setEventID:(id)anId;
-(void)setTextID:(id)anId;
-(void)setWatermarkInfo:(id)info;
-(int)operationOneTwo:(int)two;
-(void)setInfo:(int)info res:(id)res;
-(id)getOperationTypeParams:(int)params;
-(void)pushOperation:(int)operation launchSource:(int)source loginSource:(int)source3 qzonePicID:(id)anId retCode:(int)code;
-(void)pushOperation:(int)operation;
-(void)pushOperation:(int)operation retCode:(int)code;
-(void)uploadAllStatisticInWifi;
-(void)dealloc;
-(id)init;
@end

@interface WMCStatisticDBManager : NSObject {
@private
	FMDatabaseQueue* _dbQueue;
}
@property(retain, nonatomic) FMDatabaseQueue* dbQueue;
+(id)sharedInstance;
-(void)removeRecords:(int)records;
-(void)selectRecords:(id)records;
-(void)insertRecord:(id)record;
-(void)dealloc;
-(void)initStatus;
@end

@interface StretchableButton : UIButton {
@private
	BOOL isStretch;
	float leftCapWidth;
	float rightCapWidth;
	float minWidth;
}
@property(assign, nonatomic) float minWidth;
@property(assign, nonatomic) float rightCapWidth;
@property(assign, nonatomic) float leftCapWidth;
@property(assign, nonatomic) BOOL isStretch;
-(float)_getStretchedButtonWidth;
-(float)getStretchedButtonWidth;
-(void)setBackgroundImage:(id)image forState:(unsigned)state;
-(id)init;
@end

@interface QLayoutScrollView : UIScrollView {
	id _layoutDelegate;
@private
	struct {
		unsigned hasWillLayoutSubviews : 1;
		unsigned hasDidLayoutSubviews : 1;
	} layoutOpt;
}
@property(assign, nonatomic) id<QLayoutScrollViewDelegate> layoutDelegate;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QPageCell : UIView {
@private
	QPageView* _pageView;
	int _pageIndex;
	NSString* _reuseIdentifier;
}
@property(retain, nonatomic) NSString* reuseIdentifier;
@property(assign, nonatomic) unsigned pageIndex;
-(void)didPushToReusePool;
-(void)prepareForReuse;
-(void)dealloc;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QPageCircleView : UIView <UIScrollViewDelegate, QLayoutScrollViewDelegate> {
@private
	NSMutableArray* _reusePool;
	NSMutableArray* _visibleCells;
	UIPageControl* _pageControl;
	int _currentPageIndex;
	QLayoutScrollView* _scrollView;
	CGSize currentPageViewSize;
	CGSize _pageCellStride;
	CGPoint lastStepOffset;
	CGPoint _pageChangeSteps;
	CGPoint _reusePageSteps;
	CGPoint _pageChangeStride;
	struct {
		unsigned hasNumberOfPage : 1;
		unsigned hasPageAtIndex : 1;
		unsigned hasWillRecycle : 1;
		unsigned hasPreFetchData : 1;
		unsigned hasFrameOfPage : 1;
		unsigned hasPageIndexChanged : 1;
		unsigned hasFramePageControl : 1;
		unsigned hasNumberOfPagesWithPageIndex : 1;
		unsigned hasPageIndexByPageControlOffset : 1;
		unsigned hasPageControlOffsetByPageIndex : 1;
		unsigned hasPageViewDidScroll : 1;
	} delegateOption;
	struct {
		unsigned needReloadData : 1;
		unsigned needRelayout : 1;
		unsigned isCircleScroll : 1;
		unsigned ignorePageChangeOnScroll : 1;
	} _option;
	unsigned _numberOfPages;
	float _pageOffW;
	UIView* _categoryChangeTipView;
	UILabel* _categoryLabel;
	id<QPageCircleViewDelegate> _delegate;
	BOOL _showPageControl;
}
@property(retain, nonatomic) UILabel* categoryLabel;
@property(retain, nonatomic) UIView* categoryChangeTipView;
@property(assign, nonatomic) id<QPageCircleViewDelegate> delegate;
@property(assign, nonatomic) int currentPageIndex;
@property(readonly, assign, nonatomic) UIPageControl* pageControl;
@property(assign, nonatomic) BOOL showPageControl;
@property(assign, nonatomic) float pageOffW;
@property(retain, nonatomic) UIScrollView* scrollView;
-(void)changeToNewCategory:(id)newCategory;
-(void)setPageControlNumberOfPagesWithPageIndex:(int)pageIndex;
-(void)setPageControlCurrentPageWithPageIndex:(int)pageIndex;
-(void)onPageControlPageChangeTriged:(id)triged withEvent:(id)event;
-(void)_layoutPagecontrolView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)layoutScrollViewDidLayoutSubviews:(id)layoutScrollView;
-(void)checkPageToReuseWhenScroll;
-(void)recycleAndReusePages;
-(void)checkRecyclePageWithShowRect:(CGRect)showRect pageSize:(CGSize)size pageCount:(int)count;
-(void)checkPagesInShowRect:(CGRect)showRect pageSize:(CGSize)size pageCount:(int)count;
-(id)cellInVisibleArray:(id)visibleArray withIndex:(int)index;
-(void)recycleCell:(id)cell inArray:(id)array atPos:(int)pos trigDelegate:(BOOL)delegate;
-(id)dequeReusePagesWithReuseIndentifier:(id)reuseIndentifier;
-(void)reloadDataWithInitPageIndex:(int)initPageIndex;
-(void)reloadData;
-(void)_reloadPageViewData;
-(void)_recycleAllVisibleCells;
-(void)layoutPageViewCells;
-(void)_relayoutPageScrollView;
-(void)_relayoutAllVisiblePages;
-(id)allVisiblePageIndexs;
-(id)allVisiblePages;
-(id)pageAtIndex:(int)index;
-(void)setCurrentPageIndex:(int)index tringDelegate:(BOOL)delegate trigLayout:(BOOL)layout animated:(BOOL)animated;
-(void)setCurrentPageIndex:(int)index tringDelegate:(BOOL)delegate trigLayout:(BOOL)layout;
-(void)setCurrentPageIndex:(int)index animated:(BOOL)animated;
-(CGRect)frameOfPageAtIndex:(int)index;
-(CGSize)contentSizeOfPage;
-(CGPoint)contentOffsetOfPageAtIndex:(int)index;
-(int)stepsBetweenPageIndex:(int)index andBaseIndex:(int)index2;
-(id)validPageIndexsInShowRect:(CGRect)showRect pageSize:(CGSize)size pageCount:(int)count;
-(int)validPageIndex:(int)index;
-(unsigned)numberOfPages;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QLayoutFitScrollView : QLayoutScrollView {
}
@property(assign, nonatomic) id<QLayoutFitScrollViewDelegate> layoutDelegate;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
@end

@interface QPageFitView : UIView <UIScrollViewDelegate, QLayoutFitScrollViewDelegate> {
@private
	NSMutableArray* _reusePool;
	NSMutableArray* _visibleCells;
	UIPageControl* _pageControl;
	int _currentPageIndex;
	QLayoutScrollView* _scrollView;
	CGSize currentPageViewSize;
	CGSize _pageCellStride;
	CGPoint lastStepOffset;
	CGPoint _pageChangeSteps;
	CGPoint _reusePageSteps;
	CGPoint _pageChangeStride;
	struct {
		unsigned hasNumberOfPage : 1;
		unsigned hasPageAtIndex : 1;
		unsigned hasWillRecycle : 1;
		unsigned hasPreFetchData : 1;
		unsigned hasFrameOfPage : 1;
		unsigned hasPageIndexChanged : 1;
		unsigned hasFramePageControl : 1;
		unsigned hasNumberOfPagesWithPageIndex : 1;
		unsigned hasPageIndexByPageControlOffset : 1;
		unsigned hasPageControlOffsetByPageIndex : 1;
		unsigned hasPageViewDidScroll : 1;
		unsigned hasPageViewEndDragging : 1;
		unsigned hasPageViewEndDecelerate : 1;
		unsigned hasPageWillDisplay : 1;
		unsigned hasPageDidEndDisplay : 1;
	} delegateOption;
	struct {
		unsigned needReloadData : 1;
		unsigned needRelayout : 1;
		unsigned isCircleScroll : 1;
		unsigned ignorePageChangeOnScroll : 1;
	} _option;
	unsigned _numberOfPages;
	NSMutableIndexSet* displayingSet;
	int _fillMode;
	BOOL _showPageControl;
	float _pageOffW;
	id<QPageFitViewDelegate> _delegate;
}
@property(assign, nonatomic) id<QPageFitViewDelegate> delegate;
@property(assign, nonatomic) int currentPageIndex;
@property(readonly, assign, nonatomic) UIPageControl* pageControl;
@property(assign, nonatomic) BOOL showPageControl;
@property(assign, nonatomic) int fillMode;
@property(assign, nonatomic) float pageOffW;
@property(retain, nonatomic) UIScrollView* scrollView;
-(void)setPageControlNumberOfPagesWithPageIndex:(int)pageIndex;
-(void)setPageControlCurrentPageWithPageIndex:(int)pageIndex;
-(void)onPageControlPageChangeTriged:(id)triged withEvent:(id)event;
-(void)_layoutPagecontrolView;
-(BOOL)layoutScrollView:(id)view pointInside:(CGPoint)inside withEvent:(id)event;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)layoutScrollViewDidLayoutSubviews:(id)layoutScrollView;
-(void)checkPageToReuseWhenScroll;
-(void)checkDidEndDisplayPageWithShowRect:(CGRect)check pageSize:(CGSize)size pageCount:(int)count;
-(void)checkWillDisplayPageWithShowRect:(CGRect)check pageSize:(CGSize)size pageCount:(int)count;
-(void)checkRecyclePageWithShowRect:(CGRect)showRect pageSize:(CGSize)size pageCount:(int)count;
-(void)checkPagesInShowRect:(CGRect)showRect pageSize:(CGSize)size pageCount:(int)count;
-(id)cellInVisibleArray:(id)visibleArray withIndex:(int)index;
-(void)recycleCell:(id)cell inArray:(id)array atPos:(int)pos trigDelegate:(BOOL)delegate;
-(id)dequeReusePagesWithReuseIndentifier:(id)reuseIndentifier;
-(void)reloadDataWithInitPageIndex:(int)initPageIndex;
-(void)reloadData;
-(void)_reloadPageViewData;
-(void)_recycleAllVisibleCells;
-(void)_recycleAllDisplayingIndex;
-(BOOL)pageAtIndexIsDisplaying:(int)indexIsDisplaying;
-(void)layoutPageViewCells;
-(void)_relayoutPageScrollView;
-(void)_relayoutAllVisiblePages;
-(id)allVisiblePageIndexs;
-(id)allVisiblePages;
-(id)pageAtIndex:(int)index;
-(void)setCurrentPageIndex:(int)index tringDelegate:(BOOL)delegate trigLayout:(BOOL)layout animated:(BOOL)animated;
-(void)setCurrentPageIndex:(int)index tringDelegate:(BOOL)delegate trigLayout:(BOOL)layout;
-(void)setCurrentPageIndex:(int)index animated:(BOOL)animated;
-(CGRect)frameOfPageAtIndex:(int)index;
-(CGSize)contentSizeOfPage;
-(CGPoint)contentOffsetOfPageAtIndex:(int)index;
-(unsigned)numberOfPages;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QPageView : UIView <UIScrollViewDelegate, QLayoutScrollViewDelegate> {
@private
	NSMutableArray* _reusePool;
	NSMutableArray* _visibleCells;
	UIPageControl* _pageControl;
	int _currentPageIndex;
	QLayoutScrollView* _scrollView;
	CGSize currentPageViewSize;
	CGSize _pageCellStride;
	CGPoint lastStepOffset;
	CGPoint _pageChangeSteps;
	CGPoint _reusePageSteps;
	CGPoint _pageChangeStride;
	struct {
		unsigned hasNumberOfPage : 1;
		unsigned hasPageAtIndex : 1;
		unsigned hasWillRecycle : 1;
		unsigned hasPreFetchData : 1;
		unsigned hasFrameOfPage : 1;
		unsigned hasPageIndexChanged : 1;
		unsigned hasFramePageControl : 1;
		unsigned hasPageViewDidScroll : 1;
	} delegateOption;
	struct {
		unsigned needReloadData : 1;
		unsigned needRelayout : 1;
		unsigned ignorePageChangeOnScroll : 1;
	} _option;
	unsigned _numberOfPages;
	id<QPageViewDelegate> _delegate;
	float _pageOffW;
	BOOL _showPageControl;
}
@property(assign, nonatomic) id<QPageViewDelegate> delegate;
@property(assign, nonatomic) int currentPageIndex;
@property(readonly, assign, nonatomic) UIPageControl* pageControl;
@property(assign, nonatomic) BOOL showPageControl;
@property(assign, nonatomic) float pageOffW;
@property(retain, nonatomic) UIScrollView* scrollView;
-(void)onPageControlPageChangeTriged:(id)triged withEvent:(id)event;
-(void)_layoutPagecontrolView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)layoutScrollViewDidLayoutSubviews:(id)layoutScrollView;
-(void)checkPageToReuseWhenScroll;
-(void)checkRecyclePageWithShowRect:(CGRect)showRect pageSize:(CGSize)size pageCount:(int)count;
-(void)checkPagesInShowRect:(CGRect)showRect pageSize:(CGSize)size pageCount:(int)count;
-(id)cellInVisibleArray:(id)visibleArray withIndex:(int)index;
-(void)recycleCell:(id)cell inArray:(id)array atPos:(int)pos trigDelegate:(BOOL)delegate;
-(id)dequeReusePagesWithReuseIndentifier:(id)reuseIndentifier;
-(void)reloadDataWithInitPageIndex:(int)initPageIndex;
-(void)reloadData;
-(void)_reloadPageViewData;
-(void)_recycleAllVisibleCells;
-(void)layoutPageViewCells;
-(void)_relayoutPageScrollView;
-(void)_relayoutAllVisiblePages;
-(id)allVisiblePageIndexs;
-(id)allVisiblePages;
-(id)pageAtIndex:(int)index;
-(void)setCurrentPageIndex:(int)index tringDelegate:(BOOL)delegate trigLayout:(BOOL)layout animated:(BOOL)animated;
-(void)setCurrentPageIndex:(int)index tringDelegate:(BOOL)delegate trigLayout:(BOOL)layout;
-(void)setCurrentPageIndex:(int)index animated:(BOOL)animated;
-(CGRect)frameOfPageAtIndex:(int)index;
-(CGSize)contentSizeOfPage;
-(CGPoint)contentOffsetOfPageAtIndex:(int)index;
-(unsigned)numberOfPages;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QWatermarkCell : QPageCell {
@private
	UIActivityIndicatorView* _indicator;
	int _orientation;
	WMCWatermarkView* _watermark;
	BOOL _loading;
}
@property(assign, nonatomic) int orientation;
@property(retain, nonatomic) WMCWatermarkView* watermark;
@property(assign, nonatomic, getter=isLoading) BOOL loading;
-(void)didPushToReusePool;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WMCRotateView : UIView <WMCRotateViewProtocol> {
	id _delegate;
@private
	struct {
		unsigned isRotatingAnimated : 1;
		unsigned hasCanRotate : 1;
		unsigned hasRotateOri : 1;
		unsigned hasRotateOriWithOldOri : 1;
		unsigned hasLayoutSubview : 1;
	} delegateOpt;
	int _orientation;
	id _finishBlock;
}
@property(assign, nonatomic) int orientation;
@property(assign, nonatomic) id<QRotateViewDelegate> delegate;
@property(copy, nonatomic) id finishBlock;
@property(readonly, assign, nonatomic) BOOL isRoateing;
-(void)setOrientation:(int)orientation animated:(BOOL)animated;
-(void)orientationDidChangeFromOldOrientation:(int)orientation toOrientation:(int)orientation2;
-(double)rotateAngleForOrientation:(int)orientation withBaseOrientation:(int)baseOrientation;
-(CGRect)convertRectWithOldRect:(CGRect)oldRect currentOrientation:(int)orientation newOri:(int)ori;
-(void)layoutSubviews;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

@interface JLContentViewCell : UITableViewCell <JLContentViewCellProtocol> {
	id _delegate;
	UIView* _choseView;
	UIView* _otherView;
	UIView* _leftView;
	UIView* _rightView;
	UIView* _nameLeftView;
	UIView* _descLeftView;
	UILabel* _labelCount;
	UILabel* _labelDesc;
	UIImage* _lineTopImage;
	UIImage* _lineBottomImage;
@private
	int _lineOption;
	UILabel* _labelName;
	UIEdgeInsets _contentInset;
	float _rightBoundsOffw;
	BOOL _chosed;
	BOOL _chooseEnable;
}
@property(assign, nonatomic) id<JLContentViewCellDelegate> delegate;
@property(assign, nonatomic) float rightBoundsOffw;
@property(assign, nonatomic) UIEdgeInsets contentInset;
@property(assign, nonatomic) int lineOption;
@property(retain, nonatomic) UIView* rightView;
@property(retain, nonatomic) UIView* leftView;
@property(assign, nonatomic) BOOL chosed;
@property(assign, nonatomic) BOOL chooseEnable;
@property(retain, nonatomic) UIView* choseView;
@property(retain, nonatomic) UIView* descLeftView;
@property(retain, nonatomic) UIView* nameLeftView;
@property(readonly, assign, nonatomic) UILabel* labelCount;
@property(readonly, assign, nonatomic) UILabel* labelDesc;
@property(readonly, assign, nonatomic) UILabel* labelName;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)setChooseEnable:(BOOL)enable animated:(BOOL)animated;
-(void)contentViewCellChooseStateDidChanged:(BOOL)contentViewCellChooseState animated:(BOOL)animated;
-(void)contentViewCellChooseStateWillChange:(BOOL)contentViewCellChooseState animated:(BOOL)animated;
-(void)setLayoutAllContentViews;
-(void)layoutChoseView;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface JLPlaceTipView : UIView {
@private
	UIWebView* _webInfo;
	UILabel* _labelTip;
	UIImageView* _imageViewIcon;
}
@property(retain, nonatomic) UIImageView* imageViewIcon;
@property(retain, nonatomic) UIWebView* webInfo;
@property(retain, nonatomic) UILabel* labelTip;
-(void)dealloc;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface JLSelectListCell : UITableViewCell <JLSelectListCell> {
@private
	UILabel* _labelTitle;
	UILabel* _labelSuggest;
	UILabel* _labelDesc;
}
@property(readonly, assign, nonatomic) UILabel* labelDesc;
@property(readonly, assign, nonatomic) UILabel* labelSuggest;
@property(readonly, assign, nonatomic) UILabel* labelTitle;
+(float)heightForCellWithOption:(int)option;
+(id)reuseIdentifier;
-(void)_setAllLabelColor;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface JLSearchBar : UISearchBar {
	float systemVer;
}
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)layoutSubviews;
-(void)relayoutTextFieldAndButton;
@end

@interface SelectLocationViewController : UIViewController <UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate, UIScrollViewDelegate, WMCLocationManagerDelagate> {
	UISearchBar* _search;
	UITableView* _table;
	NSArray* _POIs;
	NSArray* _filteredPOIs;
	NSArray* _recentInputPlaces;
	CLLocation* _currentLocation;
	BOOL _inSearchMode;
@private
	JLPlaceTipView* _locationTipsView;
	UIActivityIndicatorView* _loadingIndcicator;
	BOOL isPlaceholder;
	BOOL _isPlaceholder;
	int _locateState;
	NSString* _searchWord;
	int _searchState;
}
@property(retain, nonatomic) NSString* searchWord;
@property(assign, nonatomic) BOOL isPlaceholder;
@property(retain, nonatomic) CLLocation* currentLocation;
@property(copy, nonatomic) NSArray* recentInputPlaces;
@property(retain, nonatomic) NSArray* filteredPOIs;
@property(copy, nonatomic) NSArray* POIs;
@property(retain, nonatomic) UITableView* table;
@property(retain, nonatomic) UISearchBar* search;
@property(assign, nonatomic) int searchState;
@property(assign, nonatomic) int locateState;
-(void)didGetGPS:(id)gps oldLocation:(id)location error:(id)error;
-(void)didFinishSearch:(id)search;
-(void)didFinishGetLocations:(id)locations city:(id)city placeModel:(id)model country:(id)country location:(id)location needFetchWeather:(BOOL)weather error:(id)error;
-(void)startUpdateLocation;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)onSingleTap;
-(void)onCancelClicked:(id)clicked;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)loadingIndcicator;
-(id)filteredPOIs:(id)pois originalPOIs:(id)pois2;
-(void)didReceiveMemoryWarning;
-(void)initNavigationBar;
-(void)dealloc;
-(void)onNetworkStatusChanged:(id)changed;
-(void)applicationWillEnterForceground:(id)application;
-(void)stopPullToRefresh;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLayoutSubviews;
-(void)checkLocationStatusToShowTips;
-(void)locationAuthorizationChange;
-(void)viewDidUnload;
-(void)getRecentInput;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface WMCErrorTipCell : UITableViewCell {
@private
	UILabel* _labelTip;
}
@property(retain, nonatomic) UILabel* labelTip;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface WMCSelectShadowCell : UITableViewCell {
@private
	UIColor* _shadowColorNormal;
	UIColor* _shadowColorHighlight;
	CGSize _shadowOffsetHighlight;
	CGSize _shadowOffsetNormal;
}
@property(assign, nonatomic) CGSize shadowOffsetHighlight;
@property(retain, nonatomic) UIColor* shadowColorHighlight;
@property(assign, nonatomic) CGSize shadowOffsetNormal;
@property(retain, nonatomic) UIColor* shadowColorNormal;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface ShadowBlurLabel : UILabel {
@private
	BOOL _shadowBlurEnable;
	UIColor* _lineStrokeColor;
	BOOL _lineStrokeEnable;
	float _lineStrokeOffset;
	float _shadowBlurRadius;
	UIColor* _shadowBlurColor;
	CGSize _shadowBlurOffset;
}
@property(retain, nonatomic) UIColor* lineStrokeColor;
@property(assign, nonatomic) float lineStrokeOffset;
@property(assign, nonatomic) BOOL lineStrokeEnable;
@property(assign, nonatomic) float shadowBlurRadius;
@property(assign, nonatomic) CGSize shadowBlurOffset;
@property(retain, nonatomic) UIColor* shadowBlurColor;
@property(assign, nonatomic) BOOL shadowBlurEnable;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)drawTextInRect:(CGRect)rect;
-(CGSize)sizeThatFits:(CGSize)fits;
@end

@interface WMCCategory : NSObject <NSCoding> {
@private
	NSString* _categoryImageNameSelected;
	int _numberOfValidWaterMark;
	int _lastWatermarkIndex;
	NSString* _categoryImageName;
	NSMutableArray* _validWaterMarks;
	int _numberOfWaterMark;
	NSString* _name;
	NSString* _thumbnailSelectedURL;
	NSString* _categoryID;
	NSString* _thumbnailURL;
	UIImage* _thumbnailBig;
	UIImage* _thumbnailSelected;
	int _version;
	BOOL _updated;
	UIImage* _thumbnail;
	BOOL _downloaded;
	NSString* _currentSid;
}
@property(retain, nonatomic) UIImage* thumbnailBig;
@property(assign, nonatomic) int version;
@property(assign, nonatomic) BOOL updated;
@property(assign, nonatomic) BOOL downloaded;
@property(copy, nonatomic) NSString* currentSid;
@property(assign, nonatomic) int lastWatermarkIndex;
@property(copy, nonatomic) NSMutableArray* validWaterMarks;
@property(assign, nonatomic) int numberOfValidWaterMark;
@property(assign, nonatomic) int numberOfWaterMark;
@property(retain, nonatomic) NSString* thumbnailSelectedURL;
@property(retain, nonatomic) NSString* thumbnailURL;
@property(retain, nonatomic) UIImage* thumbnailSelected;
@property(retain, nonatomic) UIImage* thumbnail;
@property(retain, nonatomic) NSString* categoryImageNameSelected;
@property(retain, nonatomic) NSString* categoryImageName;
@property(copy, nonatomic) NSString* name;
@property(copy, nonatomic) NSString* categoryID;
+(BOOL)categeoryIsInBundle:(id)bundle;
-(id)description;
-(int)getWatermarkIndex:(id)index;
-(void)loadCategoryInDocuments;
-(id)initWithCategoryID:(id)categoryID dictionary:(id)dictionary;
-(void)resetBySid:(id)sid version:(int)version;
-(id)initDefaultCategoryInBundle:(id)bundle;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface WMCScorePickerView : UIPickerView <UIPickerViewDelegate, UIPickerViewDataSource> {
@private
	NSArray* _customDataSource;
	NSString* _keyName;
	NSDictionary* _watermarkData;
	NSArray* _customPicSource;
}
@property(retain, nonatomic) NSString* keyName;
@property(retain, nonatomic) NSArray* customPicSource;
@property(retain, nonatomic) NSArray* customDataSource;
@property(retain, nonatomic) NSDictionary* watermarkData;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WMCSemicircle : UIView {
	UIColor* _color;
	NSString* _fontName;
	NSMutableDictionary* _newXMLDictionary;
@private
	NSMutableArray* lableArray;
}
@property(assign, nonatomic) NSString* fontName;
@property(assign, nonatomic) UIColor* color;
-(void)dealloc;
-(id)getXMLDictionary;
-(id)initWithDictionary:(id)dictionary;
@end

@interface WMCWatermarkModel : NSObject <NSCoding> {
@private
	NSString* _sid;
	int _version;
	NSString* _xmlFileName;
	NSString* _watermarkXMLFullPath;
	int _mask;
	NSArray* _keyNames;
	NSDictionary* _watermarkDictionary;
	NSString* _watermarkResPath;
}
@property(assign, nonatomic) int version;
@property(assign, nonatomic) int mask;
@property(retain, nonatomic) NSString* watermarkXMLFullPath;
@property(retain, nonatomic) NSString* watermarkResPath;
@property(retain, nonatomic) NSArray* keyNames;
@property(retain, nonatomic) NSDictionary* watermarkDictionary;
@property(retain, nonatomic) NSString* sid;
@property(retain, nonatomic) NSString* xmlFileName;
+(id)searchXMLOrWMCInDir:(id)dir;
+(BOOL)isDefaultSidInV1P1:(id)v1P1;
+(BOOL)isDefaultSid:(id)sid;
+(id)getDefaultXMLs:(id)xmls;
+(id)defaultXmlsInCategory;
-(id)description;
-(id)watermarkModelKey;
-(void)dealloc;
-(id)initWithDocumentXML:(id)documentXML resPath:(id)path sid:(id)sid;
-(id)initWithDocumentXMLTest;
-(id)initWithXML:(id)xml;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface WMCWatermarkView : UIImageView {
@private
	NSMutableDictionary* _circleDictionary;
	NSMutableDictionary* _buttonDictionary;
	NSMutableDictionary* _circleButtonDictionary;
	UIImage* _backgroundImage;
	id<WMCWatermarkViewDelegate> _delegate;
	UIImage* _backgroundImageLand;
	BOOL _isLoading;
	CGRect _maskFrame;
	UIButton* _lastButton;
	CGRect _maskFrameLand;
	NSString* _title;
	UIButton* _currentButton;
	BOOL _isInit;
	NSMutableDictionary* _buttonInfoDictionary;
	NSMutableDictionary* _labelDictionary;
	NSMutableDictionary* _addDictionary;
	NSString* _xmlFileName;
	BOOL _isFirstLoad;
	NSString* _resourcePath;
	NSDictionary* _resourceDic;
	NSDictionary* _watermarkDictionary;
	NSMutableDictionary* _resourceDictionary;
	NSMutableDictionary* _imageFileNameDictionary;
	NSDictionary* _nonCacheDict;
	NSMutableArray* _watermarkKeyNameArray;
	int _cellIndex;
	NSMutableDictionary* _imageViewDictionary;
}
@property(assign, nonatomic) BOOL isFirstLoad;
@property(retain, nonatomic) UIButton* currentButton;
@property(retain, nonatomic) UIButton* lastButton;
@property(retain, nonatomic) NSMutableDictionary* circleButtonDictionary;
@property(retain, nonatomic) NSMutableDictionary* buttonDictionary;
@property(retain, nonatomic) NSDictionary* nonCacheDict;
@property(retain, nonatomic) NSDictionary* resourceDic;
@property(retain, nonatomic) NSMutableDictionary* addDictionary;
@property(retain, nonatomic) NSMutableDictionary* resourceDictionary;
@property(assign, nonatomic) CGRect maskFrameLand;
@property(assign, nonatomic) CGRect maskFrame;
@property(retain, nonatomic) UIImage* backgroundImageLand;
@property(retain, nonatomic) UIImage* backgroundImage;
@property(retain, nonatomic) NSMutableDictionary* imageFileNameDictionary;
@property(retain, nonatomic) NSMutableDictionary* imageViewDictionary;
@property(retain, nonatomic) NSMutableDictionary* labelDictionary;
@property(assign, nonatomic) BOOL isInit;
@property(retain, nonatomic) NSMutableDictionary* buttonInfoDictionary;
@property(retain, nonatomic) NSMutableArray* watermarkKeyNameArray;
@property(retain, nonatomic) NSString* xmlFileName;
@property(retain, nonatomic) NSString* resourcePath;
@property(retain, nonatomic) NSDictionary* watermarkDictionary;
@property(assign, nonatomic) int cellIndex;
@property(assign, nonatomic) id<WMCWatermarkViewDelegate> delegate;
@property(assign, nonatomic) BOOL isLoading;
@property(retain, nonatomic) NSString* title;
+(void)fitLabel:(id)label;
+(id)parseFile:(id)file;
-(void).cxx_destruct;
-(void)clearShadowBlurLabel;
-(void)reloadWaterMark:(id)mark nonCacheDict:(id)dict isLand:(BOOL)land;
-(id)textParser:(id)parser nonCacheDict:(id)dict Origin:(CGPoint)origin isLand:(BOOL)land;
-(float)getImageWidth:(id)width;
-(id)imageParser:(id)parser nonCacheDict:(id)dict Origin:(CGPoint)origin isLand:(BOOL)land;
-(id)maskImage2:(id)a2 isLand:(BOOL)land;
-(id)maskImage:(id)image isLand:(BOOL)land;
-(void)setOrientation:(int)orientation;
-(id)initWithXML:(id)xml resources:(id)resources;
-(void)doInit:(id)init resourceDictionary:(id)dictionary;
-(void)lazyInit;
-(void)parseFileWithResult:(id)result sid:(id)sid queue:(dispatch_queue_s*)queue;
-(BOOL)isFileParsed;
-(id)initWithXMLLazy:(id)xmllazy XMLFileName:(id)name resources:(id)resources;
-(void)onClickLabel:(id)label;
-(id)initWithWatermarkDictionry:(id)watermarkDictionry;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WMCPOIModel : NSObject <NSCoding> {
@private
	NSString* _poiIconFileNamePrefix;
	int _distance;
	int _hotValue;
	NSString* _poiCategory;
	int _poiType;
	NSString* _city;
	NSString* _country;
	NSString* _poiName;
}
@property(copy, nonatomic) NSString* city;
@property(copy, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* poiIconFileNamePrefix;
@property(retain, nonatomic) NSString* poiCategory;
@property(assign, nonatomic) int hotValue;
@property(assign, nonatomic) int distance;
@property(assign, nonatomic) int poiType;
@property(retain, nonatomic) NSString* poiName;
+(id)getPoiIconFileNameByType:(int)type;
-(id)description;
-(id)poiIconFileNamePress;
-(id)poiIconFileNameNormal;
-(id)initWithPoiInfo:(id)poiInfo;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithUserInputPoiName:(id)userInputPoiName;
-(id)initWithPoiName:(id)poiName poiType:(int)type poiCategory:(id)category;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface WMCRecentPOIModel : NSObject <NSCoding> {
@private
	CLLocation* _location;
	NSDate* _date;
	WMCPOIModel* _poiModel;
}
@property(retain, nonatomic) WMCPOIModel* poiModel;
@property(retain, nonatomic) CLLocation* location;
@property(retain, nonatomic) NSDate* date;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface WMCSceneModel : NSObject <NSCoding> {
@private
	NSString* _scenePicURL;
	NSString* _sceneName;
	NSString* _sceneDefaultText;
	NSString* _sceneID;
	NSString* _sceneThumbnailURL;
}
@property(copy, nonatomic) NSString* sceneThumbnailURL;
@property(copy, nonatomic) NSString* sceneDefaultText;
@property(copy, nonatomic) NSString* sceneID;
@property(copy, nonatomic) NSString* scenePicURL;
@property(copy, nonatomic) NSString* sceneName;
-(id)description;
-(void)dealloc;
-(void)encodeValue:(id)value forKey:(id)key coder:(id)coder;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface WMCGridView : UIScrollView {
@private
	id<UIScrollViewDelegate, WMCGridViewDelegate> _delegate;
	UIView* _gridShadowView;
	UIView* _gridContentView;
}
@property(retain, nonatomic) UIView* gridContentView;
@property(retain, nonatomic) UIView* gridShadowView;
@property(assign, nonatomic) id<UIScrollViewDelegate, WMCGridViewDelegate> delegate;
-(void)onClickButton:(id)button;
-(void)dealloc;
-(void)reloadData;
@end

@interface WMCGridViewCell : UIButton {
@private
	UIImageView* _thumbnailView;
	UIImageView* _selectMarkView;
	UILabel* _label;
	UIImageView* _downloadButtonView;
	WMCSceneModel* _model;
}
@property(retain, nonatomic) UIImageView* selectMarkView;
@property(retain, nonatomic) UIImageView* downloadButtonView;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) WMCSceneModel* model;
@property(retain, nonatomic) UIImageView* thumbnailView;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setSelect:(BOOL)select;
-(void)downloadImage;
-(void)dealloc;
-(id)initWithSize:(CGSize)size tag:(int)tag image:(id)image text:(id)text model:(id)model selected:(BOOL)selected;
@end

@interface WMCstGetPoiInfoReq : JceObjectV2 {
@private
	WMCstGPS* jcev2_p_0_r_stGps;
	NSString* jcev2_p_1_r_strClientIP;
	NSString* jcev2_p_2_r_strKeyWord;
	int jcev2_p_3_r_iDistance;
	int jcev2_p_4_r_iPage;
	int jcev2_p_5_r_iNum;
	int jcev2_p_6_o_iAccuracy;
	int jcev2_p_7_o_iLocateCostTime;
}
@property(assign, nonatomic, getter=iLocateCostTime, setter=setILocateCostTime:) int jcev2_p_7_o_iLocateCostTime;
@property(assign, nonatomic, getter=iAccuracy, setter=setIAccuracy:) int jcev2_p_6_o_iAccuracy;
@property(assign, nonatomic, getter=iNum, setter=setINum:) int jcev2_p_5_r_iNum;
@property(assign, nonatomic, getter=iPage, setter=setIPage:) int jcev2_p_4_r_iPage;
@property(assign, nonatomic, getter=iDistance, setter=setIDistance:) int jcev2_p_3_r_iDistance;
@property(retain, nonatomic, getter=strKeyWord, setter=setStrKeyWord:) NSString* jcev2_p_2_r_strKeyWord;
@property(retain, nonatomic, getter=strClientIP, setter=setStrClientIP:) NSString* jcev2_p_1_r_strClientIP;
@property(retain, nonatomic, getter=stGps, setter=setStGps:) WMCstGPS* jcev2_p_0_r_stGps;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstGetPoiInfoRsp : JceObjectV2 {
@private
	NSArray* jcev2_p_0_r_vPoiList__b0x9i_VOWMCstPoiInfo;
	int jcev2_p_1_o_iTotalNum;
}
@property(assign, nonatomic, getter=iTotalNum, setter=setITotalNum:) int jcev2_p_1_o_iTotalNum;
@property(retain, nonatomic, getter=vPoiList, setter=setVPoiList:) NSArray* jcev2_p_0_r_vPoiList__b0x9i_VOWMCstPoiInfo;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstGetPositionReq : JceObjectV2 {
@private
	WMCstGPS* jcev2_p_0_r_stGps;
	NSString* jcev2_p_1_r_strClientIP;
	int jcev2_p_2_o_iAccuracy;
	int jcev2_p_3_o_iLocateCostTime;
}
@property(assign, nonatomic, getter=iLocateCostTime, setter=setILocateCostTime:) int jcev2_p_3_o_iLocateCostTime;
@property(assign, nonatomic, getter=iAccuracy, setter=setIAccuracy:) int jcev2_p_2_o_iAccuracy;
@property(retain, nonatomic, getter=strClientIP, setter=setStrClientIP:) NSString* jcev2_p_1_r_strClientIP;
@property(retain, nonatomic, getter=stGps, setter=setStGps:) WMCstGPS* jcev2_p_0_r_stGps;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstGetPositionRsp : JceObjectV2 {
@private
	WMCstGPS* jcev2_p_0_r_stUsrLoc;
	WMCstGeoInfo* jcev2_p_1_r_stGeoInfo;
}
@property(retain, nonatomic, getter=stGeoInfo, setter=setStGeoInfo:) WMCstGeoInfo* jcev2_p_1_r_stGeoInfo;
@property(retain, nonatomic, getter=stUsrLoc, setter=setStUsrLoc:) WMCstGPS* jcev2_p_0_r_stUsrLoc;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstGetWeatherReq : JceObjectV2 {
@private
	WMCstGPS* jcev2_p_0_r_stGps;
	NSString* jcev2_p_1_r_strClientIP;
	NSString* jcev2_p_2_r_strDate;
}
@property(retain, nonatomic, getter=strDate, setter=setStrDate:) NSString* jcev2_p_2_r_strDate;
@property(retain, nonatomic, getter=strClientIP, setter=setStrClientIP:) NSString* jcev2_p_1_r_strClientIP;
@property(retain, nonatomic, getter=stGps, setter=setStGps:) WMCstGPS* jcev2_p_0_r_stGps;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstGetWeatherRsp : JceObjectV2 {
@private
	WMCstWeatherInfo* jcev2_p_0_r_stWeather;
}
@property(retain, nonatomic, getter=stWeather, setter=setStWeather:) WMCstWeatherInfo* jcev2_p_0_r_stWeather;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCNavigationController : UINavigationController {
}
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotate;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface WMCstGeoInfo : JceObjectV2 {
@private
	int jcev2_p_0_r_iDistrictCode;
	int jcev2_p_1_r_iRange;
	NSString* jcev2_p_2_r_strCountry;
	NSString* jcev2_p_3_r_strProvince;
	NSString* jcev2_p_4_r_strCity;
	NSString* jcev2_p_5_r_strDistrict;
	NSString* jcev2_p_6_r_strTown;
	NSString* jcev2_p_7_r_strVillage;
	NSString* jcev2_p_8_r_strRoad;
	NSString* jcev2_p_9_r_strDisplayName;
}
@property(retain, nonatomic, getter=strDisplayName, setter=setStrDisplayName:) NSString* jcev2_p_9_r_strDisplayName;
@property(retain, nonatomic, getter=strRoad, setter=setStrRoad:) NSString* jcev2_p_8_r_strRoad;
@property(retain, nonatomic, getter=strVillage, setter=setStrVillage:) NSString* jcev2_p_7_r_strVillage;
@property(retain, nonatomic, getter=strTown, setter=setStrTown:) NSString* jcev2_p_6_r_strTown;
@property(retain, nonatomic, getter=strDistrict, setter=setStrDistrict:) NSString* jcev2_p_5_r_strDistrict;
@property(retain, nonatomic, getter=strCity, setter=setStrCity:) NSString* jcev2_p_4_r_strCity;
@property(retain, nonatomic, getter=strProvince, setter=setStrProvince:) NSString* jcev2_p_3_r_strProvince;
@property(retain, nonatomic, getter=strCountry, setter=setStrCountry:) NSString* jcev2_p_2_r_strCountry;
@property(assign, nonatomic, getter=iRange, setter=setIRange:) int jcev2_p_1_r_iRange;
@property(assign, nonatomic, getter=iDistrictCode, setter=setIDistrictCode:) int jcev2_p_0_r_iDistrictCode;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstGetLbsCombinReq : JceObjectV2 {
@private
	WMCstGPS* jcev2_p_0_r_stGps;
	NSString* jcev2_p_1_r_strClientIP;
	int jcev2_p_2_r_iReqNum;
	int jcev2_p_3_o_iAccuracy;
	int jcev2_p_4_o_iLocateCostTime;
}
@property(assign, nonatomic, getter=iLocateCostTime, setter=setILocateCostTime:) int jcev2_p_4_o_iLocateCostTime;
@property(assign, nonatomic, getter=iAccuracy, setter=setIAccuracy:) int jcev2_p_3_o_iAccuracy;
@property(assign, nonatomic, getter=iReqNum, setter=setIReqNum:) int jcev2_p_2_r_iReqNum;
@property(retain, nonatomic, getter=strClientIP, setter=setStrClientIP:) NSString* jcev2_p_1_r_strClientIP;
@property(retain, nonatomic, getter=stGps, setter=setStGps:) WMCstGPS* jcev2_p_0_r_stGps;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstGetLbsCombinRsp : JceObjectV2 {
@private
	WMCstGPS* jcev2_p_0_r_stGps;
	WMCstGeoInfo* jcev2_p_1_r_stPosition;
	WMCstGetPoiInfoRsp* jcev2_p_2_r_stPoiInfo;
	WMCstWeatherInfo* jcev2_p_3_r_stWeather;
}
@property(retain, nonatomic, getter=stWeather, setter=setStWeather:) WMCstWeatherInfo* jcev2_p_3_r_stWeather;
@property(retain, nonatomic, getter=stPoiInfo, setter=setStPoiInfo:) WMCstGetPoiInfoRsp* jcev2_p_2_r_stPoiInfo;
@property(retain, nonatomic, getter=stPosition, setter=setStPosition:) WMCstGeoInfo* jcev2_p_1_r_stPosition;
@property(retain, nonatomic, getter=stGps, setter=setStGps:) WMCstGPS* jcev2_p_0_r_stGps;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstGPS : JceObjectV2 {
@private
	double jcev2_p_0_r_fLat;
	double jcev2_p_1_r_fLon;
	int jcev2_p_2_r_iAlt;
	int jcev2_p_3_r_eType;
}
@property(assign, nonatomic, getter=eType, setter=setEType:) int jcev2_p_3_r_eType;
@property(assign, nonatomic, getter=iAlt, setter=setIAlt:) int jcev2_p_2_r_iAlt;
@property(assign, nonatomic, getter=fLon, setter=setFLon:) double jcev2_p_1_r_fLon;
@property(assign, nonatomic, getter=fLat, setter=setFLat:) double jcev2_p_0_r_fLat;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstPoiInfo : JceObjectV2 {
@private
	NSString* jcev2_p_0_r_strPoiId;
	NSString* jcev2_p_1_r_strName;
	int jcev2_p_2_r_iType;
	NSString* jcev2_p_3_r_strTypeName;
	NSString* jcev2_p_4_r_strAddress;
	int jcev2_p_5_r_iDistrictCode;
	WMCstGPS* jcev2_p_6_r_stGps;
	int jcev2_p_7_r_iDistance;
	int jcev2_p_8_o_iHotValue;
	NSString* jcev2_p_9_o_strPhone;
	NSString* jcev2_p_10_o_strCountry;
	NSString* jcev2_p_11_o_strProvince;
	NSString* jcev2_p_12_o_strCity;
	int jcev2_p_13_o_sorttype;
}
@property(assign, nonatomic, getter=sorttype, setter=setSorttype:) int jcev2_p_13_o_sorttype;
@property(retain, nonatomic, getter=strCity, setter=setStrCity:) NSString* jcev2_p_12_o_strCity;
@property(retain, nonatomic, getter=strProvince, setter=setStrProvince:) NSString* jcev2_p_11_o_strProvince;
@property(retain, nonatomic, getter=strCountry, setter=setStrCountry:) NSString* jcev2_p_10_o_strCountry;
@property(retain, nonatomic, getter=strPhone, setter=setStrPhone:) NSString* jcev2_p_9_o_strPhone;
@property(assign, nonatomic, getter=iHotValue, setter=setIHotValue:) int jcev2_p_8_o_iHotValue;
@property(assign, nonatomic, getter=iDistance, setter=setIDistance:) int jcev2_p_7_r_iDistance;
@property(retain, nonatomic, getter=stGps, setter=setStGps:) WMCstGPS* jcev2_p_6_r_stGps;
@property(assign, nonatomic, getter=iDistrictCode, setter=setIDistrictCode:) int jcev2_p_5_r_iDistrictCode;
@property(retain, nonatomic, getter=strAddress, setter=setStrAddress:) NSString* jcev2_p_4_r_strAddress;
@property(retain, nonatomic, getter=strTypeName, setter=setStrTypeName:) NSString* jcev2_p_3_r_strTypeName;
@property(assign, nonatomic, getter=iType, setter=setIType:) int jcev2_p_2_r_iType;
@property(retain, nonatomic, getter=strName, setter=setStrName:) NSString* jcev2_p_1_r_strName;
@property(retain, nonatomic, getter=strPoiId, setter=setStrPoiId:) NSString* jcev2_p_0_r_strPoiId;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface WMCstWeatherInfo : JceObjectV2 {
@private
	int jcev2_p_0_r_iRet;
	int jcev2_p_1_r_iCityCode;
	NSString* jcev2_p_2_r_strCityName;
	NSString* jcev2_p_3_r_strDate;
	int jcev2_p_4_r_iHour;
	int jcev2_p_5_r_iWeather;
	int jcev2_p_6_r_iWind;
	int jcev2_p_7_r_iTempCurr;
	int jcev2_p_8_r_iTempMax;
	int jcev2_p_9_r_iTempMin;
	int jcev2_p_10_r_iHumidity;
	NSString* jcev2_p_11_o_strSunriseTime;
	NSString* jcev2_p_12_o_strSunsetTime;
	NSString* jcev2_p_13_o_strPressure;
	int jcev2_p_14_o_iWindForce;
	NSString* jcev2_p_15_o_strDeviceName;
	int jcev2_p_16_o_iPM2p5;
}
@property(assign, nonatomic, getter=iPM2p5, setter=setIPM2p5:) int jcev2_p_16_o_iPM2p5;
@property(retain, nonatomic, getter=strDeviceName, setter=setStrDeviceName:) NSString* jcev2_p_15_o_strDeviceName;
@property(assign, nonatomic, getter=iWindForce, setter=setIWindForce:) int jcev2_p_14_o_iWindForce;
@property(retain, nonatomic, getter=strPressure, setter=setStrPressure:) NSString* jcev2_p_13_o_strPressure;
@property(retain, nonatomic, getter=strSunsetTime, setter=setStrSunsetTime:) NSString* jcev2_p_12_o_strSunsetTime;
@property(retain, nonatomic, getter=strSunriseTime, setter=setStrSunriseTime:) NSString* jcev2_p_11_o_strSunriseTime;
@property(assign, nonatomic, getter=iHumidity, setter=setIHumidity:) int jcev2_p_10_r_iHumidity;
@property(assign, nonatomic, getter=iTempMin, setter=setITempMin:) int jcev2_p_9_r_iTempMin;
@property(assign, nonatomic, getter=iTempMax, setter=setITempMax:) int jcev2_p_8_r_iTempMax;
@property(assign, nonatomic, getter=iTempCurr, setter=setITempCurr:) int jcev2_p_7_r_iTempCurr;
@property(assign, nonatomic, getter=iWind, setter=setIWind:) int jcev2_p_6_r_iWind;
@property(assign, nonatomic, getter=iWeather, setter=setIWeather:) int jcev2_p_5_r_iWeather;
@property(assign, nonatomic, getter=iHour, setter=setIHour:) int jcev2_p_4_r_iHour;
@property(retain, nonatomic, getter=strDate, setter=setStrDate:) NSString* jcev2_p_3_r_strDate;
@property(retain, nonatomic, getter=strCityName, setter=setStrCityName:) NSString* jcev2_p_2_r_strCityName;
@property(assign, nonatomic, getter=iCityCode, setter=setICityCode:) int jcev2_p_1_r_iCityCode;
@property(assign, nonatomic, getter=iRet, setter=setIRet:) int jcev2_p_0_r_iRet;
+(id)jceType;
+(void)initialize;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneAddDescriptionViewController : MQZBasePhotoBrowserViewController <UITextFieldDelegate> {
	id<MQZonePhotoDescriptionDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZonePhotoDescriptionDelegate> delegate;
-(void)didScrollToPage:(int)page oldPage:(int)page2;
-(void)deleteCurrentPhoto:(id)photo forEvent:(id)event;
-(void)viewDidLoad;
-(void)loadView;
@end

@interface MQZDraftBox : NSObject {
	NSMutableDictionary* _itemsIndex;
	NSMutableDictionary* _itemsCache;
	MQZDraftItemText* _editItem;
}
+(id)instance;
-(BOOL)loadItemIndex;
-(BOOL)saveItemIndex;
-(BOOL)delete:(id)aDelete;
-(BOOL)load:(id*)load key:(id)key;
-(BOOL)save:(id)save;
-(BOOL)updateIndexItem:(id)item item:(id)item2;
-(BOOL)addIndexItem:(id)item;
-(BOOL)removeItemByKey:(id)key;
-(id)getItemWithKey:(id)key;
-(BOOL)addItem:(id)item key:(id)key;
-(id)draftBoxIndexPath;
-(id)draftBoxPath;
-(BOOL)removeItem:(id)item;
-(BOOL)finishEditing;
-(BOOL)endEditing;
-(BOOL)updateEditing;
-(BOOL)beginEditing:(id)editing;
-(id)getEditItem;
-(id)getItem:(id)item;
-(id)makeKey:(int)key primaryKey:(id)key2 subKey:(id)key3 cmtID:(id)anId;
-(void)onCrashed;
-(void)initialize;
-(void)onAppEnterBackground:(id)background;
-(void)dealloc;
-(id)init;
@end

@interface MQZDraftItem : NSObject <NSCoding, NSCopying> {
	NSString* _key;
	int _state;
	long _updateTime;
}
@property(assign, nonatomic) long updateTime;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSString* key;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)updateItem:(id)item;
-(void)update;
-(void)dealloc;
-(id)initWithKey:(id)key;
@end

@interface MQZDraftItemIndex : NSObject <NSCopying, NSCoding> {
	NSString* _key;
	long _updateTime;
}
@property(assign, nonatomic) long updateTime;
@property(retain, nonatomic) NSString* key;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
@end

@interface MQZDraftItemRichText : MQZDraftItemText {
	NSDictionary* _atDict;
}
@property(retain, nonatomic) NSDictionary* atDict;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)updateItem:(id)item;
-(void)dealloc;
@end

@interface MQZDraftItemText : MQZDraftItem {
	NSString* _text;
}
@property(retain, nonatomic) NSString* text;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)updateItem:(id)item;
-(void)dealloc;
@end

@interface BaseURLConnection : NSObject {
	id delegate;
	NSString* requestURL;
	NSURLConnection* connection;
	NSMutableData* buf;
	int statusCode;
}
@property(copy, nonatomic) NSString* requestURL;
@property(assign, nonatomic) int statusCode;
@property(readonly, assign, nonatomic) NSMutableData* buf;
@property(assign, nonatomic) id<BaseURLConnectionDelegate> delegate;
-(void)URLConnectionDidFinishLoading:(id)urlconnection;
-(void)URLConnectionDidFailWithError:(id)urlconnection;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)cancel;
-(void)post:(id)post data:(id)data;
-(void)post:(id)post bodyData:(id)data host:(id)host;
-(void)post:(id)post bodyData:(id)data;
-(void)post:(id)post body:(id)body;
-(void)get:(id)get;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface Common : NSObject {
}
+(int)getCarrierType;
@end

@interface QZPhotoDataReport : NSObject <BaseURLConnectionDelegate> {
	NSMutableArray* _uploadRepArray;
	NSMutableArray* _downRepArray;
	NSMutableArray* _sendingRepArray;
	int _sendingReportType;
	BOOL _useBackupIp;
	BaseURLConnection* _connection;
	NSMutableArray* _backupIpArray;
	NSString* _terminalVersion;
	NSString* _terminal;
	BOOL _fullReport;
}
@property(assign, nonatomic) BOOL fullReport;
@property(retain, nonatomic) NSString* terminal;
@property(retain, nonatomic) NSString* terminalVersion;
@property(retain, nonatomic) NSMutableArray* backupIpArray;
@property(retain, nonatomic) BaseURLConnection* connection;
@property(assign, nonatomic) BOOL useBackupIp;
@property(assign, nonatomic) int sendingReportType;
@property(retain, nonatomic) NSMutableArray* sendingRepArray;
@property(retain, nonatomic) NSMutableArray* downRepArray;
@property(retain, nonatomic) NSMutableArray* uploadRepArray;
+(id)getInstance;
-(void)reportLocalData;
-(void)reportUpload:(int)upload uin:(long long)uin network:(int)network size:(long)size costTime:(long)time errcode:(int)errcode msg:(id)msg svrIp:(id)ip refer:(id)refer uppAppid:(int)appid cTime:(int)time11 flow:(long long)flow retry:(int)retry;
-(void)reportData:(int)data appid:(int)appid uin:(long long)uin network:(int)network url:(id)url size:(long)size costTime:(long)time errcode:(int)errcode msg:(id)msg;
-(void)didConnectionFailed:(id)failed;
-(void)didConnectionFinished:(int)finished;
-(void)checkForUseBackupIpReport;
-(void)setFromWnsConfig;
-(id)getReportUppAppID:(int)anId;
-(id)getReportAppID:(int)anId;
-(void)startUpDataReport:(id)report;
-(void)startDownDataReport:(id)report;
-(BOOL)shouldReprotDownload:(int)download errorCode:(int)code;
-(void)startReportData:(int)data dataArray:(id)array isUseBackupIp:(BOOL)ip backupIp:(id)ip4;
-(id)formatReportData:(id)data;
-(void)saveReportData:(int)data model:(id)model;
-(void)getCommonInfo;
-(void)dealloc;
-(id)init;
@end

@interface QZPhotoDataReportOther : NSObject {
}
+(id)getReportBackupIp:(id)ip;
+(id)getBackupIpByCarrierType:(int)type backupArray:(id)array;
@end

@interface QZPhotoReportModel : NSObject <NSCoding> {
	int reportType_;
	NSString* terminal_;
	NSString* terminalver_;
	int networkType_;
	NSString* url_;
	long size_;
	long delay_;
	int errcode_;
	long long uin_;
	long time_;
	NSString* msg_;
	NSString* appId_;
}
@property(retain, nonatomic) NSString* appId;
@property(retain, nonatomic) NSString* msg;
@property(assign, nonatomic) long time;
@property(assign, nonatomic) long long uin;
@property(assign, nonatomic) int errcode;
@property(assign, nonatomic) long delay;
@property(assign, nonatomic) long size;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) int networkType;
@property(retain, nonatomic) NSString* terminalver;
@property(retain, nonatomic) NSString* terminal;
@property(assign, nonatomic) int reportType;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZPhotoUploadReportModel : QZPhotoReportModel <NSCoding> {
	NSString* _svrIp;
	NSString* _refer;
	NSString* _uppAppid;
	int _cTime;
	long long _flow;
	int _retry;
}
@property(assign, nonatomic) int retry;
@property(assign, nonatomic) long long flow;
@property(assign, nonatomic) int cTime;
@property(retain, nonatomic) NSString* uppAppid;
@property(retain, nonatomic) NSString* refer;
@property(retain, nonatomic) NSString* svrIp;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZStatisticsReportManager : NSObject <BaseURLConnectionDelegate> {
	NSString* device_;
	NSString* os_;
	int requestCnt_;
	NSDate* lastRepTime_;
	NSMutableArray* currentReportArray_;
	NSMutableArray* sendingReportArray_;
	QZStatisticsReportCommModel* commModel_;
	BOOL useBackupIp_;
	BaseURLConnection* connection_;
	NSString* reportDomain_;
	int reportAppid_;
	int reportInternal_;
	int reportFrequency_;
	int reportCount_;
	NSMutableArray* backupIpArray_;
	BOOL isFullReport_;
	BOOL isUseGzip_;
	NSString* qua_;
	NSString* releaseVesion_;
	NSString* build_;
	NSString* deviceInfo_;
}
@property(retain, nonatomic) NSString* deviceInfo;
@property(retain, nonatomic) NSString* build;
@property(retain, nonatomic) NSString* releaseVesion;
@property(retain, nonatomic) NSString* qua;
@property(assign, nonatomic) BOOL isUseGzip;
@property(assign, nonatomic) BOOL isFullReport;
@property(retain, nonatomic) NSMutableArray* backupIpArray;
@property(assign, nonatomic) int reportCount;
@property(assign, nonatomic) int reportFrequency;
@property(assign, nonatomic) int reportInternal;
@property(assign, nonatomic) int reportAppid;
@property(retain, nonatomic) NSString* reportDomain;
@property(retain, nonatomic) BaseURLConnection* connection;
@property(assign, nonatomic) BOOL useBackupIp;
@property(retain, nonatomic) NSMutableArray* sendingReportArray;
@property(retain, nonatomic) NSMutableArray* currentReportArray;
@property(retain, nonatomic) QZStatisticsReportCommModel* commModel;
@property(retain, nonatomic) NSDate* lastRepTime;
@property(assign, nonatomic) int requestCnt;
@property(retain, nonatomic) NSString* os;
@property(retain, nonatomic) NSString* device;
+(id)getInstance;
-(void)reportLocalData;
-(void)reportData:(id)data ret:(int)ret uin:(long long)uin apn:(id)apn tmcost:(int)tmcost reqsize:(int)reqsize rspsize:(int)rspsize sdkversion:(id)sdkversion seq:(id)seq serverip:(id)serverip port:(int)port detail:(id)detail dtype:(int)dtype odetails:(id)odetails;
-(void)didConnectionFailed:(id)failed;
-(void)didConnectionFinished:(int)finished;
-(void)checkForUseBackupIpReport;
-(BOOL)checkForReportDataValid:(id)reportDataValid;
-(id)getFromData:(id)data currentReportArray:(id)array;
-(id)getCompressReportData:(id)data;
-(void)startReportData:(id)data useBackupIp:(BOOL)ip backupIp:(id)ip3;
-(void)checkForReportNow;
-(BOOL)checkForFrequency;
-(void)getCommReportInfo;
-(id)compressReportInfo:(id)info;
-(void)getDefaultReportInfo;
-(void)dealloc;
-(id)init;
-(void)reportFlowData:(long long)data wifiReqSize:(int)size wifiRspSize:(int)size3 wifiUpSize:(int)size4 wifiDownSize:(int)size5 XGReqSize:(int)size6 XGRspSize:(int)size7 XGUpSize:(int)size8 XGDownSize:(int)size9;
-(id)getFlowData:(long long)data wifiReqSize:(int)size wifiRspSize:(int)size3 wifiUpSize:(int)size4 wifiDownSize:(int)size5 XGReqSize:(int)size6 XGRspSize:(int)size7 XGUpSize:(int)size8 XGDownSize:(int)size9;
@end

@interface QZStatisticsReportModel : NSObject {
	NSString* commandid_;
	NSString* apn_;
	int resultcode_;
	long stime_;
	long long touin_;
	int tmcost_;
	int reqsize_;
	int rspsize_;
	int frequency_;
	NSString* sdkversion_;
	NSString* seq_;
	NSString* serverip_;
	int port_;
	NSString* detail_;
	int dtype_;
	NSString* odetails_;
}
@property(retain, nonatomic) NSString* odetails;
@property(assign, nonatomic) int dtype;
@property(retain, nonatomic) NSString* detail;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* serverip;
@property(retain, nonatomic) NSString* seq;
@property(retain, nonatomic) NSString* sdkversion;
@property(assign, nonatomic) int frequency;
@property(assign, nonatomic) int rspsize;
@property(assign, nonatomic) int reqsize;
@property(assign, nonatomic) int tmcost;
@property(assign, nonatomic) long long touin;
@property(assign, nonatomic) long stime;
@property(assign, nonatomic) int resultcode;
@property(retain, nonatomic) NSString* apn;
@property(retain, nonatomic) NSString* commandid;
-(void)dealloc;
@end

@interface QZStatisticsReportCommModel : NSObject {
	int appid_;
	NSString* releaseversion_;
	NSString* qua_;
	NSString* device_;
	NSString* deviceinfo_;
	NSString* build_;
@private
	NSString* releaseversion;
}
@property(retain, nonatomic) NSString* build;
@property(retain, nonatomic) NSString* deviceinfo;
@property(retain, nonatomic) NSString* device;
@property(retain, nonatomic) NSString* qua;
@property(retain, nonatomic) NSString* releaseversion;
@property(assign, nonatomic) int appid;
-(void)dealloc;
@end

@interface QZStatisticsReportOther : NSObject {
}
+(id)getReportBackupIp:(id)ip;
+(id)getBackupIpByCarrierType:(int)type backupArray:(id)array;
@end

@interface MQZoneAlbumListCell : MQZoneTableViewCell {
}
+(float)heightForAlbumRecModel:(id)albumRecModel lastFeedDate:(double)date;
+(float)heightForAlbumListModel:(id)albumListModel;
-(void)drawSeparateLine:(CGRect)line;
-(void)onUpdateFeedModel:(id)model;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZoneAlbumListViewController : MQZonePullingTableViewController <UIActionSheetDelegate, MQZImagePickerDelegate, MQZoneCreateAlbumDelegate> {
	long long _uin;
	long long _groupCode;
	NSString* _nickname;
	NSMutableArray* _listAlbumList;
	NSMutableArray* _recAlbumList;
	int _listModelLastUpdateTime;
	int _listModelhasMore;
	int _recModelLastUpdateTime;
	int _recModelhasMore;
	NSMutableArray* _photoes;
	int _albumListReqID;
	int _albumModel;
	UIImageView* _titleBGImgView;
	UIActivityIndicatorView* _activityView;
	MQZRightButtonView* _rightButtonView;
	NSDictionary* _userInfo;
}
@property(retain) NSDictionary* userInfo;
@property(assign, nonatomic) int albumModel;
-(void).cxx_destruct;
-(void)didMQZImagePicker:(id)picker selectedImages:(id)images;
-(void)getAlbumPhoto;
-(void)takePhoto;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onRightButtonClick:(id)click forEvent:(id)event;
-(void)goToPhotoListController:(id)photoListController;
-(void)handleDidSelectCell:(id)handle;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)onCreateAlbumSucceeded:(id)succeeded;
-(int)onNotifyDelUgcResult:(id)result;
-(int)onNotifyAlbumListResult:(id)result;
-(id)createUserInfo;
-(BOOL)isAlbumModel:(id)model existInList:(id)list;
-(void)appendAlbumList:(id)list;
-(void)updateSendBox;
-(void)onUpdateSendBoxNotify:(id)notify;
-(void)sendBoxClick;
-(id)getCurAlbumModelList;
-(BOOL)onHasMore;
-(int)onGetLastRefreshTime;
-(BOOL)onLoadMore;
-(BOOL)onRefresh;
-(void)initNotificationObservers:(id)observers;
-(BOOL)isOwner;
-(void)titleBtnClick:(id)click;
-(void)updateTileViewBG:(BOOL)bg;
-(void)viewDidUnload;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)dealloc;
-(id)initWithUin:(long long)uin nickname:(id)nickname groupCode:(long long)code;
-(id)initWithUin:(long long)uin nickname:(id)nickname;
@end

@interface QZone : NSObject {
}
+(void)releaseInstance;
+(id)instance;
-(id)decodePushData:(id)data;
-(void)onSetEnvShowNotify:(id)notify;
-(void)onGroupZoneShowNotify:(id)notify;
-(void)onSettingViewShowNotify:(id)notify;
-(void)onAlbumListShowNotify:(id)notify;
-(void)onPhotoUploadFinisReport:(id)report;
-(void)onLoginOutNotify:(id)notify;
-(void)onLogin;
-(void)onEnterPassiveViewCtr:(id)ctr;
-(void)onEnterActiveViewCtr:(id)ctr;
-(void)onEnterMoodEdit:(id)edit;
-(void)onEnterDetail:(id)detail;
-(void)onEnterHomepage:(id)homepage;
-(void)preloadLocalFriendFeeds;
-(BOOL)hasPreload;
-(int)getLastMiniFeedTimestampWithUin:(long long)uin;
-(int)unreadPassiveCount;
-(int)unreadActiveCount;
-(void)onCrashed;
-(void)dealloc;
-(id)init;
@end

@interface QZoneUtility : NSObject {
@private
	NSString* _QQVersionNum;
}
@property(retain, nonatomic) NSString* QQVersionNum;
+(int)getDeviceType;
+(void)changeMSFToTestEnv:(BOOL)testEnv;
+(id)getMSFCmdPrefix;
+(void)setMSFCmdPrefix:(id)prefix;
+(int)getPortFromMSF;
+(id)getIPFromMSF;
+(id)getQZoneReleaseVersion;
+(id)getQZoneQUA;
+(id)getQQVersion;
+(const char*)getQZoneQUACString;
+(const char*)getQQVersionCString;
+(id)md5ForString:(id)string;
+(id)getDeviceInfo;
+(id)getDeviceName;
+(id)instance;
-(void)dealloc;
-(id)init;
@end

@interface QZoneNSPathEx : NSObject {
}
+(id)groupDirectoryPath:(long long)path;
+(id)allImageSizeFilePath;
+(id)detailFeedFilePath:(id)path;
+(BOOL)isFileExist:(id)exist;
+(void)copyFile:(id)file To:(id)to;
+(void)moveFile:(id)file To:(id)to;
+(void)RemovePath:(id)path;
+(id)updateTimeOfActiveFeedPath:(long long)activeFeedPath;
+(id)draftInfoPath:(long long)path;
+(id)draftImagePath:(long long)path;
+(id)draftWriteMoodPath:(long long)path;
+(id)lastUseAlbumPath:(long long)path groupCode:(long long)code;
+(id)lastUseAlbumPath:(long long)path;
+(id)uploadImagePath;
+(id)UserCachePath;
+(id)UserDocPath;
+(id)UploadVideoPath;
+(id)ThumbPhotoPath;
+(id)UploadPhotoPath;
+(id)AlbumHistoryPath;
+(id)CachePath;
+(id)LibPath;
+(id)AppPath;
+(id)DocPath;
+(id)TempPath;
+(id)HomePath;
+(void)createPath:(id)path;
@end

@interface QZoneViewController : QQViewController <IGADrawItemUIEventDelegate, MQZTipViewPoolDelegate> {
	BOOL _closeAudio;
	BOOL _firstDisplay;
	int _fromType;
@private
	QZoneNotificationObservers* _notificationObservers;
	int _priRequestId;
	int _QQMsgBarStatus;
	int _qzoneType;
}
@property(assign, nonatomic) int qzoneType;
-(void)showTips:(id)tips;
-(void)leftButtonClick:(id)click;
-(void)MQZTipViewPoolCancel;
-(void)handleDrawItemUIEvent:(id)event;
-(void)handleClickRichTextItem:(id)item itemRect:(CGRect)rect param:(id)param;
-(void)handleClickAMRMoodItem:(id)item;
-(void)handleClickMusicItem:(id)item;
-(void)startPlayVideoAfterAdapted:(id)adapted;
-(void)playVideoDirect:(id)direct;
-(void)onNotifyAdaptVideo:(id)video;
-(void)handleClickVideoItem:(id)item;
-(void)handleHighlightItemClicked:(id)clicked data:(id)data feedModel:(id)model cell:(id)cell;
-(void)handleDidSelectCell:(id)handle;
-(void)handleOpenOpAppDetail:(id)detail;
-(void)handleOpenFeedDetail:(long long)detail feedModel:(id)model;
-(void)handleShowImg:(id)img rectList:(id)list visibleRects:(id)rects touchItem:(id)item index:(unsigned)index thumbs:(id)thumbs;
-(void)handleOpenUrl:(id)url backendOff:(BOOL)off;
-(id)convertUrl:(id)url;
-(void)handleOpenDoodle:(id)doodle;
-(void)handleOpenCard:(long long)card;
-(void)handleOpenChatView:(long long)view;
-(void)handleOpenHomepage:(long long)homepage nick:(id)nick;
-(BOOL)isMyLocalNotification:(int)notification;
-(void)onNotify:(id)notify;
-(int)notification:(id)notification info:(id)info;
-(void)onNotifyError:(id)error info:(id)info;
-(void)noHideQQMsgBar;
-(void)hideQQMsgBar;
-(void)stopMoodAudio;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)dismissAllModalViewControllerAnimated:(BOOL)animated;
-(void)exitViewController:(BOOL)controller;
-(void)presentQZoneNavigationController:(id)controller animated:(BOOL)animated;
-(void)presentQZoneViewController:(id)controller animated:(BOOL)animated;
-(BOOL)isTopView;
-(BOOL)checkNetworkState;
-(BOOL)isQZoneTabSelected;
-(void)initNotificationObservers:(id)observers;
-(void)dealloc;
-(id)init;
@end

@interface QZoneTextParser : NSObject {
}
+(id)decodeAtString:(id)string;
+(id)encodeAtString:(id)string;
+(id)splitTextIntoSmallBlocks:(id)blocks;
+(id)parseToReadableText:(id)readableText;
+(id)parseText:(id)text;
+(void)processNormalText:(id)text range:(NSRange)range list:(id)list;
+(void)addList:(id)list captureStr:(id)str Type:(int)type;
+(int)getCurrentType:(id)type Postion:(NSRange)postion;
@end

@interface MQZoneHomepageHeadButton : UIButton {
	int _total;
}
-(id)initWithFrame:(CGRect)frame text:(id)text;
@end

@interface MQZoneHomepageHeaderView : UIView {
	MQZoneHomepageHeadButton* _buttons[4];
	QZoneViewController* _parentController;
	NSString* _coverUrl;
	long long _uin;
	GAFillImageView* _coverBGView;
	GAFaceImageView* _faceView;
	UIImageView* _borderView;
	float _offset;
	UIView* _bottomBackground;
	CGRect coverRect;
}
@property(assign, nonatomic) long long uin;
@property(retain, nonatomic) NSString* coverUrl;
@property(assign, nonatomic) QZoneViewController* parentController;
@property(retain, nonatomic) GAFaceImageView* faceView;
@property(retain, nonatomic) UIImageView* borderView;
-(void).cxx_destruct;
-(void)updateBackgroundFrameWhenDidScroll:(float)updateBackgroundFrameWhen;
-(void)setTotal:(int)total index:(int)index;
-(id)initWithFrame:(CGRect)frame parentCtrl:(id)ctrl;
@end

@interface QZoneHomepageViewController : MQZoneOperatableViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, MQZoneActiveFeedCellDelegate, ICoverSettingDelegate, UIScrollViewDelegate> {
	UIView* _topVisibleView;
	MQZoneHomepageHeaderView* _headerView;
	MQzoneCoverView* _coverView;
	UIImageView* _unvisibleView;
	float _unvisibleHeight;
	UIView* _contentView;
	long long _uin;
	NSString* _nickname;
	NSMutableArray* _feedList;
	NSMutableDictionary* _dictFeedsWithKey;
	int _unReadFeedNum;
	BOOL _hasMore;
	NSMutableDictionary* _sendQueue;
	int _getMiniFeedReqID;
	int _refreshTime;
	int _getPslProfileReqID;
	int _getCoverReqID;
	int _setConcernReqID;
	int _profileCountArray[4];
	BOOL _hasPermission;
	MQZPermissionView* _permissionView;
	NSMutableDictionary* _getAllCommentRequestIDContainer;
	UIViewController* _preCtr;
	QZProfileModel* _profile;
	NSDictionary* _userInfo;
	AddFriendSendMessageViewController* _addFriendControll;
}
@property(retain) NSDictionary* userInfo;
-(void).cxx_destruct;
-(void)inputBarDidDeactive:(id)inputBar;
-(BOOL)inputBarSendText:(id)text param:(id)param;
-(void)clickLikeButton:(id)button;
-(void)clickCommentButton:(id)button;
-(int)onGetAllCommentNotify:(id)notify;
-(void)getAllComment:(id)comment hasMore:(BOOL)more;
-(void)removeGetAllCommentContainer;
-(void)removeGetAllCommentRequestID:(int)anId cancel:(BOOL)cancel;
-(BOOL)isGetAllCommentRequestIDInContainer:(int)container;
-(void)removeGetAllCommentRequestIDForkey:(id)forkey cancel:(BOOL)cancel;
-(void)handleCommentCloseAll:(id)all;
-(void)handleCommentLoadingMore:(id)more;
-(void)handleCommentOpenAll:(id)all;
-(void)handleHighlightItemClicked:(id)clicked data:(id)data feedModel:(id)model cell:(id)cell;
-(void)handleClickRichTextItem:(id)item itemRect:(CGRect)rect param:(id)param;
-(id)feedModelAtIndexPath:(id)indexPath;
-(id)feedModelAtSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(BOOL)onLoadMore;
-(BOOL)onHasMore;
-(int)onGetLastRefreshTime;
-(BOOL)onRefresh;
-(int)onGetMiniFeedNotify:(id)notify;
-(BOOL)onNotifyVerify:(id)verify;
-(int)onSetConcernNotify:(id)notify;
-(int)onGetCoverNotify:(id)notify;
-(void)onEnterQuestion:(id)question answer:(id)answer;
-(void)didChooseQuestion:(int)question;
-(void)goPickQuestion;
-(void)addFriend:(id)aFriend;
-(void)goAddFriend;
-(int)onGetHpgInfo:(id)info;
-(int)onGetReplyNotify:(id)notify;
-(int)onCmtFeedNotify:(id)notify;
-(int)onLikeNotify:(id)notify;
-(id)getDictFeedsWithKey;
-(id)getFeedList;
-(int)onSetBlackNotify:(id)notify;
-(int)onSetUncareNotify:(id)notify;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)createSelfContactData;
-(void)setConcernRequest;
-(void)sendSetBlackRequest;
-(void)sendSetUnCareRequest;
-(void)changeConcernActionSelected;
-(void)changeBlackActionSelected;
-(void)changeUnCareActionSelected;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onBtnMoreClicked:(id)clicked;
-(void)onSendChatMsg;
-(void)showRightMoreButton;
-(void)initNotificationObservers:(id)observers;
-(void)createHeaderView;
-(void)buttonClick:(id)click;
-(void)updateCoverUrl:(id)url;
-(void)coverClicked;
-(void)coverHeaderClicked;
-(void)enterMessageList;
-(void)enterAlbumList;
-(void)enterBlogList;
-(void)enterMoodList;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(long long)getUin;
-(void)dealloc;
-(id)initWithUin:(long long)uin nickname:(id)nickname preCtr:(id)ctr;
@end

@interface MQZonePullingTableViewController : QZoneViewController <EGORefreshTableHeaderDelegate, UITableViewDataSource, UITableViewDelegate, GAInputBarDelegate, UIAlertViewDelegate, MQZoneTableFootLoadingViewDelegate> {
	ODRefreshControl* _refreshControl;
	UITableView* _tableView;
	MQZoneNavigationTitleView* _navigationTitleView;
	BOOL _isRefreshing;
	MQZoneTableFootLoadingView* _footerLoadingView;
	BOOL _deviceIsIphone5AndLater;
	BOOL _hasNotCalledOnRefresh;
	int _refreshType;
@private
	UILabel* _feedTipsLabel;
	BOOL _hasRefreshHeader;
	BOOL _isLoadMore;
	GAInputBar* _inputBar;
	BOOL _inputBarHiddenDefault;
	id _inputBarParam;
	float _inputBarDisplayOffset;
	CGPoint _tableViewOriginalContentOffset;
	CGPoint _tableContentOffset;
	BOOL _isScrolling;
	int _lastScrollOffsetY;
	QZAlertView* _alertView;
	BOOL _needAutoRefrsh;
}
@property(assign, nonatomic) BOOL needAutoRefrsh;
@property(assign, nonatomic) BOOL isScrolling;
@property(readonly, assign, nonatomic) BOOL hasRefreshHeader;
@property(readonly, assign, nonatomic) BOOL isRefreshing;
@property(readonly, assign, nonatomic) GAInputBar* inputBar;
@property(readonly, assign, nonatomic) UITableView* tableView;
-(void)delayAutoRefresh;
-(void)onNeedAutoRefreshNotification:(id)notification;
-(void)registerNeedAutoRefreshNotification;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onAlertViewBtnClicked:(int)clicked atIndex:(int)index cancel:(BOOL)cancel userData:(id)data;
-(void)showAlertViewWithTitle:(id)title message:(id)message cancelButton:(id)button otherButtonTitles:(id)titles tag:(int)tag userData:(id)data;
-(void)inputBarRecievingMaxChars:(id)chars;
-(void)inputBarDidDeactive:(id)inputBar;
-(void)inputBarBeingDeactive:(id)deactive willChangeOffset:(float)offset changeHeight:(float)height;
-(void)inputBar:(id)bar changeOffset:(float)offset changeHeight:(float)height;
-(void)inputBarBeingActive:(id)active willChangeOffset:(float)offset changeHeight:(float)height;
-(BOOL)inputBar:(id)bar sendAction:(id)action;
-(void)setInputbarDisplayOffset:(float)offset;
-(BOOL)inputBarSendText:(id)text param:(id)param;
-(void)invokeInputBarWithParam:(id)param displayOffset:(float)offset;
-(id)creatInputBarOutsizeScreen:(BOOL)screen hidden:(BOOL)hidden;
-(void)tableFootLoadingViewDidTriggerLoading:(id)tableFootLoadingView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)onUpdateScrollState;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)checkLoadMore:(id)more;
-(void)onNotify:(id)notify;
-(void)createHeaderView;
-(void)resetHeaderView;
-(void)showTextOnFinishingHeaderRefreshing:(id)refreshing;
-(id)onGetShowTextOfFinishingHeaderRefreshing;
-(void)didFinishHeaderRefreshing:(BOOL)refreshing;
-(void)stopFooterLoading;
-(void)stopHeaderRefreshing:(BOOL)refreshing;
-(void)stopHeaderRefreshing;
-(BOOL)onHasMore;
-(int)onGetLastRefreshTime;
-(BOOL)onLoadMore;
-(BOOL)onRefresh;
-(void)checkFootViewState;
-(void)reloadData;
-(void)loadMore;
-(void)UpdateNetworkState:(id)state;
-(void)refresh;
-(void)dropViewDidBeginRefreshing:(id)dropView;
-(void)endRefresh:(BOOL)refresh;
-(void)delayEndRefreshing:(BOOL)refreshing;
-(void)updateNavigationActiveViewState:(BOOL)state;
-(void)setControllerTitle:(id)title;
-(void)setTitle:(id)title;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithoutRefreshHeader;
-(id)init;
-(void)onMoodWriteNotify:(id)notify;
-(int)onFakeFeedNotify:(id)notify;
-(void)removeFakeFeed:(id)feed;
-(void)insertFakeFeed:(id)feed atIndex:(unsigned)index;
-(void)addFakeFeed:(id)feed;
-(void)insertObjects:(id)objects atIndexes:(id)indexes;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(BOOL)removeObjectWithUgcKey:(id)ugcKey clientKey:(id)key;
-(BOOL)removeObjectWithKey:(id)key;
-(void)removeObject:(id)object;
-(void)addObject:(id)object;
-(id)objectWithUgcKey:(id)ugcKey clientKey:(id)key;
-(void)removeAllObjects;
-(void)addObjectsFromArray:(id)array;
-(void)registFakeFeedNotify:(id)notify;
-(BOOL)shouldHandleFakeFeedType:(int)type;
-(id)getDictFeedsWithKey;
-(id)getFeedList;
@end

@interface MQZoneLayoutManager : NSObject {
}
+(CGSize)getClippedViewSizeWithMediaItemURL:(id)mediaItemURL portraitClipperTag:(int)tag landscapeClipperTag:(int)tag3 outputClipperTag:(int*)tag4 defaultWidth:(float)width defaultHeight:(float)height;
+(CGSize)getClippedViewSizeWithMediaItemURL:(id)mediaItemURL clipperTag:(int)tag;
+(CGSize)getClippedViewSizeWithMediaItem:(id)mediaItem useBigPhoto:(BOOL*)photo bigPhotoClipperTag:(int)tag smallPhotoClipperTag:(int)tag4;
+(int)pictureType:(int)type;
+(id)instance;
+(BOOL)hasLBSCell:(id)cell;
+(BOOL)hasOperationButton:(id)button;
+(BOOL)hasCommentBottomButton:(id)button;
+(BOOL)hasCommentTopButton:(id)button;
+(BOOL)canExpandComment:(id)comment;
+(BOOL)hasComment:(id)comment;
+(BOOL)hasLike:(id)like;
-(id)generateHighlighteNickname:(id)nickname;
-(id)generateHighlighteUrl:(id)url LinkName:(id)name;
-(void)registerClipperStandardParamForCover;
-(void)registerClipperStandardParamForAppShare;
-(void)registerClipperStandardParamForAV;
-(void)registerClipperStandardParamForFace;
-(void)registerClipperStandardParamForDetailFeed;
-(void)registerClipperStandardParamForPassiveFeed;
-(void)registerClipperStandardParamForActiveFeed;
-(void)registerClipperStandardParamForAblumRecModel;
-(void)registerClipperStandardParam;
-(id)init;
-(void)layoutPassiveFeed:(id)feed;
-(void)layoutQzoneFeedCellAudio:(id)audio hasPic:(BOOL)pic info:(id)info startX:(int)x maxWidth:(int)width withCID:(id)cid;
-(void)layoutLikeList:(id)list info:(id)info startX:(int)x maxWidth:(int)width;
-(void)layoutLine:(id)line;
-(void)layout_OperationButton:(id)button info:(id)info startX:(int)x;
-(void)layoutQzoneFeedOriCellComment:(id)comment comm:(id)comm info:(id)info startX:(int)x maxWidth:(int)width;
-(void)layoutQzoneFeedCellOriginal:(id)original comm:(id)comm info:(id)info;
-(void)layoutCommentBG:(int)bg end:(int)end info:(id)info insertIndex:(int)index;
-(void)layoutQzoneFeedCellRemark:(id)remark info:(id)info startX:(int)x maxWidth:(int)width;
-(void)layoutQzoneFeedCellMusic:(id)music info:(id)info startX:(int)x maxWidth:(int)width;
-(void)layoutQzoneFeedCellVideo:(id)video info:(id)info startX:(int)x maxWidth:(int)width;
-(void)layoutQzoneFeedCellGift:(id)gift info:(id)info startX:(int)x maxWidth:(int)width;
-(void)layoutQzoneFeedCellPicture:(id)picture info:(id)info startX:(int)x maxWidth:(int)width;
-(void)layoutQzoneFeedCellSummary:(id)summary info:(id)info startX:(int)x maxWidth:(int)width;
-(void)layoutOriginalHeader:(id)header title:(id)title summary:(id)summary info:(id)info;
-(void)layoutHeader:(id)header title:(id)title comm:(id)comm info:(id)info;
-(void)layoutAlbumRecModelCell:(id)cell lastFeedDate:(long long)date;
-(void)layoutOnePic:(id)pic Pic:(id)pic2 rect:(CGRect)rect clicpTag:(int)tag picIndex:(int)index;
-(void)layoutAlbumListModelCell:(id)cell;
-(void)layoutLine:(id)line;
-(id)privacyTypeDescription:(int)description;
-(void)layoutBlogListCell:(id)cell;
-(void)layoutMessageListCell:(id)cell;
-(id)layoutDetailComment:(id)comment index:(int)index touchEnabled:(BOOL)enabled;
-(id)layoutDetailLike:(id)like touchEnabled:(BOOL)enabled;
-(id)layoutDetailOperate:(id)operate;
-(id)layoutDetailRefer:(id)refer touchEnabled:(BOOL)enabled;
-(id)layoutDetailRemark:(id)remark original:(BOOL)original touchEnabled:(BOOL)enabled;
-(id)layoutDetailContent:(id)content index:(int)index original:(BOOL)original touchEnabled:(BOOL)enabled;
-(id)layoutDetailMusic:(id)music original:(BOOL)original touchEnabled:(BOOL)enabled;
-(id)layoutDetailVideo:(id)video original:(BOOL)original touchEnabled:(BOOL)enabled;
-(id)layoutDetailAudio:(id)audio original:(BOOL)original touchEnabled:(BOOL)enabled;
-(id)layoutDetailPicture:(id)picture original:(BOOL)original touchEnabled:(BOOL)enabled;
-(id)layoutDetailTitleAndSummary:(id)summary touchEnabled:(BOOL)enabled;
-(id)layoutDetailSummary:(id)summary touchEnabled:(BOOL)enabled;
-(id)layoutDetailTitle:(id)title touchEnabled:(BOOL)enabled;
-(id)layoutDetailUser:(id)user touchEnabled:(BOOL)enabled;
-(void)layout_DetailComment:(id)comment info:(id)info index:(int)index touchEnabled:(BOOL)enabled;
-(void)layout_DetailLike:(id)like info:(id)info touchEnabled:(BOOL)enabled;
-(void)layout_DetailOperate:(id)operate info:(id)info;
-(void)layout_DetailRefer:(id)refer info:(id)info touchEnabled:(BOOL)enabled;
-(void)layout_DetailRemark:(id)remark info:(id)info original:(BOOL)original touchEnabled:(BOOL)enabled;
-(void)layout_DetailMusic:(id)music info:(id)info original:(BOOL)original content:(id)content;
-(void)layout_DetailVideo:(id)video info:(id)info original:(BOOL)original content:(id)content;
-(void)layout_DetailAudio:(id)audio info:(id)info original:(BOOL)original;
-(void)layout_DetailPicture:(id)picture info:(id)info original:(BOOL)original;
-(void)layout_DetailContent:(id)content info:(id)info index:(int)index original:(BOOL)original touchEnabled:(BOOL)enabled;
-(void)layout_DetailTitleAndSummary:(id)summary info:(id)info touchEnabled:(BOOL)enabled;
-(void)layout_DetailSummary:(id)summary info:(id)info touchEnabled:(BOOL)enabled;
-(void)layout_DetailTitle:(id)title info:(id)info touchEnabled:(BOOL)enabled;
-(void)layout_DetailUser:(id)user info:(id)info touchEnabled:(BOOL)enabled;
-(void)layout_DetailMorePhoto:(id)photo isBigPhotoLayoutMode:(BOOL)mode info:(id)info isForward:(BOOL)forward;
-(void)layout_DetailMultiplePicture:(id)picture info:(id)info original:(BOOL)original;
-(void)layout_DetailSinglePicture:(id)picture feed:(id)feed info:(id)info original:(BOOL)original cntIndex:(int)index;
-(void)layout_DetailSeparator:(id)separator isContent:(BOOL)content;
-(float)getDetailContentMarginL:(id)l;
-(void)layoutAlbumPickerCell:(id)cell showPrivacy:(BOOL)privacy;
-(void)layout_ForwardTips:(id)tips info:(id)info;
-(void)layout_ForwardFeedContent:(id)content info:(id)info;
-(BOOL)layout_QzoneFeedCellLeftThumb:(id)thumb info:(id)info isForward:(BOOL)forward;
-(void)layout_QzoneFeedOperationCell_LBSCell:(id)cell info:(id)info;
-(id)layoutFeedCommentClickCell:(id)cell text:(id)text isLoadingCell:(BOOL)cell3 isLoading:(BOOL)loading info:(id)info;
-(id)layoutCommentItem:(id)item targetUser:(id)user content:(id)content startX:(float)x maxWidth:(float)width info:(id)info;
-(void)layout_QzoneFeedCellLike:(id)like info:(id)info;
-(void)layout_QzoneFeedRefer:(id)refer info:(id)info;
-(void)layout_QzoneFeedCellLBS:(id)lbs info:(id)info;
-(void)layout_QzoneFeedCellRemark:(id)remark info:(id)info isForward:(BOOL)forward isRemarkUp:(BOOL)up;
-(void)layout_QzoneFeedCellAudio:(id)audio info:(id)info isForward:(BOOL)forward;
-(void)layout_QzoneFeedCellVideo:(id)video info:(id)info isForward:(BOOL)forward;
-(void)layout_QzoneFeedCellMusic:(id)music info:(id)info isForward:(BOOL)forward;
-(void)layout_MorePhoto:(id)photo isBigPhotoLayoutMode:(BOOL)mode info:(id)info isForward:(BOOL)forward;
-(void)layout_SinglePhoto:(id)photo isBigPhotoLayoutMode:(BOOL)mode info:(id)info isForward:(BOOL)forward;
-(void)layout_QzoneFeedCellPicture:(id)picture info:(id)info isForward:(BOOL)forward;
-(void)layout_QzoneFeedCellSummary:(id)summary info:(id)info isForward:(BOOL)forward;
-(void)layout_QzoneFeedCellTitle:(id)title info:(id)info isForward:(BOOL)forward;
-(void)layout_QzoneFeedCellUser:(id)user QzoneFeedCellComm:(id)comm info:(id)info isForward:(BOOL)forward;
-(BOOL)isForwardFeed:(id)feed;
-(id)layoutFeedCommentBottomBtnCell:(id)cell;
-(id)layoutFeedCommentTopBtnCell:(id)cell;
-(id)layoutFeedCommentItemCell:(id)cell commentModel:(id)model;
-(id)layoutFeedLikeCell:(id)cell;
-(id)layoutFeedContentCell:(id)cell;
-(id)layoutMoodList:(id)list;
-(void)layoutProgress:(id)progress;
-(BOOL)layoutLeftImage:(id)image;
-(id)layoutOutboxList:(id)list;
-(id)layoutGift:(id)gift;
@end

@interface MQZoneActiveFeedCell : MQZoneTableViewCell {
	MQZoneFeedCommentButton* _cmtBtn;
	MQZoneFeedLikeButton* _likeBtn;
	MQZoneAudioButton* _audioBtn;
	id<MQZoneActiveFeedCellDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZoneActiveFeedCellDelegate> delegate;
+(float)heightWithFeedModel:(id)feedModel;
-(void)prepareForReuse;
-(void)clickBtn:(id)btn;
-(float)operationBtnOffsetFromCell;
-(void)updateOperationBtn;
-(void)updateAudioButton;
-(void)onUpdateFeedModel:(id)model;
-(id)layoutFeedModel;
-(void)setFeedModel:(id)model withIndexPath:(id)indexPath;
-(void)drawContent:(CGRect)content;
-(void)dealloc;
@end

@interface MQZoneActiveFeedViewController : MQZoneOperatableViewController <MQzonePopMenuViewDelegate, MQZoneActiveFeedCellDelegate, MQZoneActiveFeedHeaderDelegate, UIActionSheetDelegate, MQZImagePickerDelegate, ZebraViewControllerDelegate> {
	long long _uin;
	NSMutableArray* _feedList;
	BOOL _hasMore;
	BOOL _isFirstLoad;
	int _getFeedRequestID;
	int _unreadNumberFromRefreshing;
	BOOL _needAutoRefrsh;
	BOOL _hasAutoRefresh;
	NSMutableDictionary* _dictFeedsWithKey;
	NSMutableArray* _photoes;
	BOOL _enterMoodEdit;
	MQZRightButtonView* _rightButtonView;
	NSMutableDictionary* _getAllCommentRequestIDContainer;
	UIView* _topVisibleView;
	MQzoneActiveHeaderView* _headerView;
	MQzoneCoverView* _coverView;
	UIImageView* _unvisibleView;
	float _unvisibleHeight;
	int _getCoverReqID;
	int _setConcernReqID;
	int _getPslProfileReqID;
	MQzonePopMenuView* tipView;
	BOOL showWatermarkCover;
	NSDictionary* _userInfo;
	BOOL _isOpenWaterMarkCam;
}
@property(retain, nonatomic) MQzonePopMenuView* tipView;
@property(retain) NSDictionary* userInfo;
-(id)valueForURLSuffix:(id)urlsuffix withCompare:(id)compare;
-(void)zebraViewController:(id)controller didFinishWithImage:(id)image exifInfomation:(id)infomation assetURL:(id)url error:(id)error;
-(void)zebraViewControllerDidCancel:(id)zebraViewController;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)openWatermarkCamera;
-(void)finishPickingImage;
-(void)didMQZImagePicker:(id)picker selectedImages:(id)images;
-(void)getAlbumPhoto;
-(void)takePhoto;
-(void)showSendBox;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)clickHeaderCameraButton:(id)button;
-(void)sendBoxClick;
-(void)updateSendBox;
-(void)onUpdateSendBoxNotify:(id)notify;
-(void)clickFaceImgView;
-(void)clickRightBtn;
-(void)clickHeaderMoodEditButton:(id)button;
-(void)onConfigUpdateNotify:(id)notify;
-(void)inputBarDidDeactive:(id)inputBar;
-(BOOL)inputBarSendText:(id)text param:(id)param;
-(void)clickLikeButton:(id)button;
-(void)clickCommentButton:(id)button;
-(void)handleDidSelectCell:(id)handle;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)appFeedExposureReport:(id)report;
-(int)onGetHpgInfo:(id)info;
-(int)onGetCoverNotify:(id)notify;
-(int)onGetReplyNotify:(id)notify;
-(int)onGetCommentNotify:(id)notify;
-(int)onGetLikeNotify:(id)notify;
-(int)onGetActiveFeedNotify:(id)notify;
-(void)onLoginOutNotify:(id)notify;
-(void)dismissZebraView;
-(void)VideoReq:(id)req;
-(void)onIMFucked:(id)fucked;
-(void)ActionLogin;
-(int)onGetAllCommentNotify:(id)notify;
-(void)getAllComment:(id)comment hasMore:(BOOL)more;
-(void)removeGetAllCommentContainer;
-(void)removeGetAllCommentRequestID:(int)anId cancel:(BOOL)cancel;
-(void)removeGetAllCommentRequestIDForkey:(id)forkey cancel:(BOOL)cancel;
-(BOOL)isGetAllCommentRequestIDInContainer:(int)container;
-(void)handleCommentCloseAll:(id)all;
-(void)handleCommentLoadingMore:(id)more;
-(void)handleCommentOpenAll:(id)all;
-(void)handleHighlightItemClicked:(id)clicked data:(id)data feedModel:(id)model cell:(id)cell;
-(void)handleClickRichTextItem:(id)item itemRect:(CGRect)rect param:(id)param;
-(BOOL)onLoadMore;
-(BOOL)onHasMore;
-(id)onGetShowTextOfFinishingHeaderRefreshing;
-(int)onGetLastRefreshTime;
-(BOOL)onRefresh;
-(id)getDictFeedsWithKey;
-(id)getFeedList;
-(void)initNotificationObservers:(id)observers;
-(void)MQzonePopMenuView:(id)view command:(id)command index:(int)index;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)passiveMessageToggle;
-(void)updateCoverUrl:(id)url;
-(void)faceImgViewToggle;
-(void)coverToggle;
-(void)getCover;
-(void)createWaterMarkGuide;
-(void)createHeaderView;
-(id)feedModelAtIndexPath:(id)indexPath;
-(id)feedModelAtSection:(int)section;
-(void)applicationWillEnterForeground;
-(void)applicationWillEnterBackground;
-(void)onGetWeatherFailNotify:(id)notify;
-(void)onGetWeatherNotify:(id)notify;
-(void)onCoverChanged:(id)changed;
-(void)onFeedUnreadNumberUpdate:(id)update;
-(void)handleWhenViewDidAppearFirstTime;
-(void)handleWhenViewWillAppearFirstTime;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(void)dismissTipView;
-(void)menuAction;
-(void)dismiss:(id)dismiss;
@end

@interface MQZonePassiveFeedCell : MQZoneTableViewCell {
	UIButton* _cmtBtn;
	MQZoneAudioButton* _audioBtn;
	id<MQZonePassiveFeedCellDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZonePassiveFeedCellDelegate> delegate;
+(float)heightWithFeedModel:(id)feedModel;
-(id)handleTouchEnded:(CGPoint)ended layoutInfo:(id)info;
-(void)clickBtn:(id)btn;
-(float)operationBtnOffsetFromCell;
-(void)updateOperationBtn;
-(void)updateAudioButton;
-(void)onUpdateFeedModel:(id)model;
-(void)dealloc;
@end

@interface MQZonePassiveFeedViewController : MQZoneOperatableViewController <MQZonePassiveFeedCellDelegate> {
	NSMutableArray* _passiveFeedList;
	NSMutableDictionary* _dictFeedsWithKey;
	int _unreadPassiveFeedCount;
	BOOL _hasMore;
	BOOL _needAutoRefrsh;
	NSMutableDictionary* _sendQueue;
	int _getPassiveFeedReqID;
	BOOL _isInited;
	BOOL _hasAutoRefresh;
	BOOL _isFirstLoad;
	NSDictionary* _userInfo;
}
@property(retain) NSDictionary* userInfo;
@property(assign, nonatomic) BOOL needAutoRefrsh;
-(int)onNotifyDelReplyResult:(id)result;
-(int)onNotifyDelCmtResult:(id)result;
-(int)onNotifyDelUgcResult:(id)result;
-(BOOL)inputBarSendText:(id)text param:(id)param;
-(void)clickCommentButton:(id)button;
-(void)handleClickRichTextItem:(id)item itemRect:(CGRect)rect param:(id)param;
-(void)handleDidSelectCell:(id)handle;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)onReplyMessageNotify:(id)notify;
-(int)onReplyNotify:(id)notify;
-(int)onCmtNotify:(id)notify;
-(id)getFeedModelByFeedsKey:(id)key;
-(int)onGetPassiveFeedNotify:(id)notify;
-(id)onGetShowTextOfFinishingHeaderRefreshing;
-(int)onGetLastRefreshTime;
-(BOOL)onLoadMore;
-(BOOL)onHasMore;
-(BOOL)onRefresh;
-(void)initNotificationObservers:(id)observers;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)view;
-(void)loadView;
-(id)objectWithUgcKey:(id)ugcKey clientKey:(id)key;
-(void)insertObjects:(id)objects atIndexes:(id)indexes;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(void)addObject:(id)object;
-(void)removeAllObjects;
-(void)addObjectsFromArray:(id)array;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneBlogListViewController : MQZoneOperatableViewController {
	long long _uin;
	NSString* _nickname;
	NSMutableArray* _blogList;
	NSMutableDictionary* _dictFeedsWithKey;
	int _lastUpdateTime;
	int _hasMore;
	int _blogListReqID;
}
-(id)getDictFeedsWithKey;
-(id)getFeedList;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)onNotifyBlogListResult:(id)result;
-(BOOL)onHasMore;
-(int)onGetLastRefreshTime;
-(BOOL)onLoadMore;
-(BOOL)onRefresh;
-(void)handleDidSelectCell:(id)handle;
-(void)initNotificationObservers:(id)observers;
-(void)didReceiveMemoryWarning;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithUin:(long long)uin nickname:(id)nickname;
@end

@interface MQZoneBlogListCell : MQZoneTableViewCell {
}
+(float)heightForFeedModel:(id)feedModel;
-(void)drawSeparateLine:(CGRect)line;
-(void)onUpdateFeedModel:(id)model;
@end

@interface MQZoneTableViewCell : UITableViewCell <IGADrawASynImgItemDelegate> {
@private
	UIImage* _selectedBkgndImg;
	QzoneFeedModel* _feedModel;
	QzoneFeedModel* _layoutFeedModel;
	BOOL _selectionEnabled;
	BOOL _curSelectedState;
	GADrawItemBase* _touchBgnDrawItem;
	CGPoint _touchBgnPoint;
	BOOL _curHighlighted;
	NSDictionary* _delayPerformSelParam;
	id<IGADrawItemUIEventDelegate> _drawItemDelegate;
	int _invokeReLayoutCount;
	BOOL _isTableScrolling;
	NSIndexPath* _indexPath;
	NSTimer* _longPressTimer;
	GADrawRichTextItem* _longPressItem;
}
@property(assign, nonatomic) int invokeReLayoutCount;
@property(readonly, assign, nonatomic) NSIndexPath* indexPath;
@property(assign, nonatomic, setter=setIsTableScrolling:) BOOL isTableScrolling;
@property(readonly, assign, nonatomic) BOOL isSelectionEnabled;
@property(readonly, assign, nonatomic) QzoneFeedModel* feedModel;
@property(assign, nonatomic) id<IGADrawItemUIEventDelegate> drawItemDelegate;
+(float)heightWithFeedModel:(id)feedModel;
-(void)notifyNeedLayout:(id)layout;
-(void)setNeedsDisplayFun:(id)fun;
-(void)notifyNeedUpdateScreen:(CGRect)screen;
-(void)enumImageRectangles:(id)rectangles visibleRects:(id)rects items:(id)items thumbUrls:(id)urls;
-(id)handleTouchEnded:(CGPoint)ended layoutInfo:(id)info;
-(BOOL)checkTouchBegan:(CGPoint)began layoutInfo:(id)info;
-(void)delayCallSupertouchesEnded;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)canBecomeFirstResponder;
-(void)longPressTimerCallback;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)copy:(id)copy;
-(void)menuControllerWillHide:(id)menuController;
-(void)showCopyMenu;
-(BOOL)touchableLongPressItemAt:(CGPoint)at;
-(CGRect)touchableCopiableContentRect:(CGRect)rect;
-(void)clearAllLongPressItem;
-(void)setCellHighlighted;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)drawRect:(CGRect)rect;
-(void)drawSeparateLine:(CGRect)line;
-(void)drawContent:(CGRect)content;
-(void)drawBackground:(CGRect)background;
-(void)onUpdateFeedModel:(id)model;
-(void)stopAnimatingSubview:(id)subview;
-(void)startAnimatingSubview:(id)subview;
-(void)setFeedModel:(id)model withIndexPath:(id)indexPath;
-(void)setNetImageItemDelegate:(id)delegate layoutInfo:(id)info;
-(void)setNetImageItemDelegate:(id)delegate;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)clearLayoutInfo;
-(id)layoutInfo;
-(id)layoutFeedModel;
-(id)resetLayoutFeedModel;
-(id)getLayoutFeedModel;
-(void)onUpdateTableScrollState;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier selectionEnabled:(BOOL)enabled;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZoneMessageListCell : MQZoneTableViewCell {
}
+(float)heightForFeedModel:(id)feedModel;
-(void)drawSeparateLine:(CGRect)line;
-(void)onUpdateFeedModel:(id)model;
@end

@interface QZMoodListViewController : MQZoneOperatableViewController <UITableViewDelegate, UITableViewDataSource> {
	UIView* _contentView;
	long long _uin;
	NSString* _nickname;
	NSMutableArray* _feedList;
	NSMutableDictionary* _dictFeedsWithKey;
	int _unReadFeedNum;
	int _lastUpdateTime;
	int _hasMore;
	int _moodListReqID;
}
-(void).cxx_destruct;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(BOOL)onLoadMore;
-(BOOL)onHasMore;
-(int)onGetLastRefreshTime;
-(BOOL)onRefresh;
-(int)onNotifyGetMoodList:(id)list;
-(BOOL)shouldHandleFakeFeedType:(int)type;
-(id)getDictFeedsWithKey;
-(id)getFeedList;
-(void)initNotificationObservers:(id)observers;
-(void)handleDidSelectCell:(id)handle;
-(void)viewDidLoad;
-(void)onRightButtonClick:(id)click forEvent:(id)event;
-(void)loadView;
-(void)dealloc;
-(id)initWithUin:(long long)uin nickname:(id)nickname;
@end

@interface QZoneCrypt : NSObject {
}
+(id)md5ForString:(id)string;
+(id)decryptData:(id)data;
+(id)encryptString:(const basic_string<char, std::char_traits<char>, std::allocator<char> >*)string;
+(id)encryptBuffer:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)buffer;
+(void)initCrypt;
@end

@interface MQZoneFeedTipsView : UIView {
	UIImage* _bgImage;
	NSString* _title;
}
@property(retain, nonatomic) NSString* title;
+(id)showFeedUpdateCount:(int)count container:(id)container;
+(id)showTitle:(id)title container:(id)container;
-(void)hideViewAnimation;
-(void)showViewAnimation;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneDetailCell : MQZoneTableViewCell <MQZoneScrollPhotoViewDelegate> {
@private
	MQZoneScrollPhotoView* _scrollPhotoView;
	MQZoneFeedCommentButton* _cmtBtn;
	MQZoneFeedLikeButton* _likeBtn;
	id<MQZoneDetailCellDelegate> _delegate;
	BOOL _touchEnabled;
	MQZoneAudioButton* _audioBtn;
}
@property(assign, nonatomic) BOOL touchEnabled;
@property(assign, nonatomic) id<MQZoneDetailCellDelegate> delegate;
+(int)numberOfRowsInSection:(int)section feedModel:(id)model;
+(float)heightForFeedModel:(id)feedModel section:(int)section row:(int)row touchEnabled:(BOOL)enabled;
-(void)resetScrollViewContentOffset;
-(void)resetScrollView;
-(id)layoutFeedModel;
-(int)getCurrentOriginArea;
-(void)drawScrollPhotoView:(id)view;
-(void)onBtnClicked:(id)clicked;
-(void)updateOperationBtn;
-(void)updateAudioButton;
-(void)onTouchPhoto:(int)photo photo:(id)photo2;
-(void)onSwitchPhoto:(int)photo photo:(id)photo2;
-(void)drawSeparateLine:(CGRect)line;
-(void)drawContent:(CGRect)content;
-(void)drawBackground:(CGRect)background;
-(void)enumImageRectangles:(id)rectangles visibleRects:(id)rects items:(id)items thumbUrls:(id)urls;
-(void)onUpdateFeedModel:(id)model;
-(void)dealloc;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZoneDetailViewController : MQZoneOperatableViewController <MQZoneDetailCellDelegate, MQZoneDetailBarViewDelegate, UIActionSheetDelegate> {
@private
	long long _uin;
	long long _groupCode;
	QzoneFeedModel* _srcFeedModel;
	QzoneFeedModel* _feedModel;
	int _inputSource;
	int _style;
	NSMutableDictionary* _dictReplyReqID;
	int _detailReqID;
	int _forwardReqID;
	int _quoteReqID;
	int _shareReqID;
	int _writeReqID;
	int _photoIndex;
	int _hasMore;
	int _lastUpdateTime;
	BOOL _hasDetail;
	BOOL _firstEnter;
	BOOL _isDatafromExternal;
	NSString* _qqUrl;
	UIViewController* _preCtr;
	MQZoneDetailBarView* _bottomBar;
	GAFaceImageView* _faceImageView;
	int from;
	MQZonePhotoBrowserViewController* _presentingController;
}
@property(assign, nonatomic) MQZonePhotoBrowserViewController* presentingController;
@property(assign, nonatomic) int from;
@property(readonly, assign, nonatomic) QzoneFeedModel* srcFeedModel;
@property(assign, nonatomic) long long groupCode;
@property(readonly, assign, nonatomic) long long uin;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)leftButtonClick:(id)click;
-(void)onBarShow:(BOOL)show;
-(void)onMoreButtonClicked:(id)clicked;
-(void)onShareButtonClicked:(id)clicked;
-(void)onCommentButtonClicked:(id)clicked;
-(void)onLikeButtonClicked:(id)clicked;
-(void)showBottomBar:(BOOL)bar;
-(void)createBottomBar;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)onTouchPhoto:(int)photo photo:(id)photo2 cell:(id)cell;
-(void)onSwitchPhoto:(int)photo photo:(id)photo2 cell:(id)cell;
-(void)onBtnOpCmtClicked:(id)clicked;
-(void)onBtnOpLikeClicked:(id)clicked;
-(void)onBtnReplyClicked:(id)clicked;
-(int)onNotifyDelReplyResult:(id)result;
-(int)onNotifyDelCmtResult:(id)result;
-(int)onNotifyDelUgcResult:(id)result;
-(void)notifyOtherPage:(id)page;
-(int)onNotifyShareResult:(id)result;
-(int)onNotifyQuoteResult:(id)result;
-(int)onNotifyForwardResult:(id)result;
-(int)onNotifyWriteCommentResult:(id)result;
-(int)onNotifyReplyMessageResult:(id)result;
-(int)onNotifyReplyCommentResult:(id)result;
-(int)onNotifyLikeResult:(id)result;
-(int)onNotifyFeedDetailResult:(id)result;
-(BOOL)inputBarSendText:(id)text param:(id)param;
-(void)inputBarDidDeactive:(id)inputBar;
-(BOOL)onHasMore;
-(BOOL)onLoadMore;
-(int)onGetLastRefreshTime;
-(BOOL)onRefresh;
-(void)loadLocalFeed;
-(void)handleDrawItemUIEvent:(id)event;
-(void)handleHighlightItemClicked:(id)clicked data:(id)data feedModel:(id)model cell:(id)cell;
-(void)handleClickRichTextItem:(id)item itemRect:(CGRect)rect param:(id)param;
-(void)handleShowImg:(id)img rectList:(id)list visibleRects:(id)rects touchItem:(id)item index:(unsigned)index thumbs:(id)thumbs;
-(void)initNotificationObservers:(id)observers;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onBtnDelUgcClicked;
-(void)afterRequestDeleteUgc;
-(void)onBtnMoreClicked:(id)clicked;
-(void)onBtnShareClicked:(id)clicked;
-(void)onBtnShare2QQClicked;
-(void)sendReqToQQ;
-(id)getImageFromOutShare:(id)outShare;
-(id)removeTitlePrefixandSuffix:(id)suffix;
-(void)onBtnQuoteClicked;
-(void)onBtnForwardClicked:(id)clicked;
-(void)onBtnCommentClicked:(id)clicked;
-(void)onBtnLikeClicked:(id)clicked;
-(BOOL)isForwardOperation;
-(BOOL)isShareOperation;
-(BOOL)shouldShowShareOperation;
-(BOOL)shouldShowMoreOperation;
-(BOOL)enableDelOperation;
-(BOOL)isSinglePicture;
-(BOOL)shouldShare2QQ;
-(BOOL)shouldShowLikeOperation;
-(BOOL)shouldShowInputBar;
-(void)initInputBarSource;
-(void)initInputBarDefaultPlaceholder;
-(void)updateLikeButtonState;
-(void)configInputBar;
-(BOOL)isBlogDetail;
-(void)goToPhotoListController:(id)photoListController;
-(void)initFeedModel;
-(void)updateBackgroundColor;
-(BOOL)hasCommentList;
-(BOOL)hasLike;
-(void)clickOnHeaderImage;
-(void)reloadData;
-(void)loadFaceImage;
-(void)didReceiveMemoryWarning;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithQQUrl:(id)qqurl from:(int)from preCtr:(id)ctr;
-(id)initWithUin:(long long)uin feedModel:(id)model style:(int)style from:(int)from;
-(void)initCommonMembersWithUin:(long long)uin feedModel:(id)model;
@end

@interface MQZonePhotoListViewController : MQZoneOperatableViewController <UITableViewDataSource, UITableViewDelegate, MQZonePhotoListCellDelegate, MQZImagePickerDelegate, UIActionSheetDelegate> {
	NSString* _albumid;
	NSString* _albumName;
	long long _owner;
	NSString* _passwd;
	NSMutableArray* _photoes;
	BOOL _hasMore;
	NSMutableArray* _bigPicUrls;
	NSMutableArray* _thumbUrls;
	QzoneFeedModel* _feedModel;
	int _requestId;
	NSMutableArray* _selectedPhotoes;
	double _lastRefreshTime;
	int _photoCount;
	long long _groupCode;
	MQZRightButtonView* _rightButtonView;
}
@property(assign, nonatomic) long long groupCode;
@property(retain, nonatomic) NSString* passwd;
-(void).cxx_destruct;
-(int)onNotifyDelUgcResult:(id)result;
-(void)didMQZImagePicker:(id)picker selectedImages:(id)images;
-(void)getAlbumPhoto;
-(void)takePhoto;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onRightButtonClick:(id)click forEvent:(id)event;
-(void)clickOnCell:(id)cell buttonIndex:(int)index;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)onNotifyGetPhotoListForGroupZone:(id)groupZone;
-(int)onNotifyGetPhotoListForQQZone:(id)qqzone;
-(int)onNotifyAlbumListResult:(id)result;
-(void)updateSendBox;
-(void)onUpdateSendBoxNotify:(id)notify;
-(void)sendBoxClick;
-(void)goToPhotoListController:(id)photoListController;
-(BOOL)onHasMore;
-(int)onGetLastRefreshTime;
-(BOOL)onLoadMore;
-(BOOL)onRefresh;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)initNotificationObservers:(id)observers;
-(void)addFakePhotoList:(id)list;
-(void)dealloc;
-(id)initWithFeedModel:(id)feedModel groupCode:(long long)code;
-(id)initWithFeedModel:(id)feedModel;
-(void)cancelPasswdPick;
@end

@interface MQZonePhotoListButton : UIButton <IGACanvas> {
	NSString* _url;
	UIImage* _defaultImage;
}
@property(retain, nonatomic, setter=setUrl:) NSString* url;
-(void).cxx_destruct;
-(void)dealloc;
-(void)updateCanvas:(id)canvas;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZonePhotoListCell : UITableViewCell {
	QzonePhotoModel* _models[4];
	NSMutableArray* _buttons;
	id<MQZonePhotoListCellDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZonePhotoListCellDelegate> delegate;
@property(readonly, assign, nonatomic) NSArray* buttons;
-(void).cxx_destruct;
-(void)buttonClick:(id)click forEvents:(unsigned*)events;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)setModels:(id*)models;
@end

@interface GAGrowingTextView : UIView <QIMTextInputDelegate, UITextViewDelegate> {
	GATextViewInternal* internalTextView;
	int minHeight;
	int maxHeight;
	int maxNumberOfLines;
	int minNumberOfLines;
	BOOL animateHeightChange;
	id<GAGrowingTextViewDelegate> growingTextViewDelegate;
	int textAlignment;
	NSRange selectedRange;
	BOOL editable;
	unsigned dataDetectorTypes;
	int returnKeyType;
	UIEdgeInsets contentInset;
	float _contentHeight;
	UILabel* _counterLabel;
@private
	NSString* _defaultPlaceholder;
	NSString* _editingPlaceholder;
	BOOL _editing;
	unsigned _maxTextLength;
	UIFont* font;
	UIColor* textColor;
	BOOL _isGrowingUp;
	float _minFrameHeight;
}
@property(assign, nonatomic) BOOL enablesReturnKeyAutomatically;
@property(assign) UIEdgeInsets contentInset;
@property(assign, nonatomic) int returnKeyType;
@property(assign, nonatomic) unsigned dataDetectorTypes;
@property(assign, nonatomic, getter=isEditable) BOOL editable;
@property(assign, nonatomic) NSRange selectedRange;
@property(assign, nonatomic) int textAlignment;
@property(assign, nonatomic) unsigned maxTextLength;
@property(assign, nonatomic) BOOL editing;
@property(retain, nonatomic) NSString* editingPlaceholder;
@property(retain, nonatomic) NSString* defaultPlaceholder;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) id<GAGrowingTextViewDelegate> growingTextViewDelegate;
@property(retain, nonatomic) GATextViewInternal* internalTextView;
@property(assign) float minFrameHeight;
@property(assign) BOOL isGrowingUp;
@property(assign) BOOL animateHeightChange;
@property(assign) int minNumberOfLines;
@property(assign) int maxNumberOfLines;
-(void)textViewDidChange:(id)textView;
-(void)textViewDidChangeSelection:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)scrollRangeToVisible:(NSRange)visible;
-(BOOL)hasText;
-(id)backgroundColor;
-(void)setBackgroundColor:(id)color;
-(BOOL)isFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)growDidStop;
-(void)resizeTextView:(int)view;
-(void)setInternalFrame:(CGRect)frame;
-(void)layoutSubviews;
-(void)checkCounterLabelState;
-(void)commonInitialiser;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface GAInputBar : GAGrowingTextView <GAGrowingTextViewDelegate, MQZoneSelectFriendViewDelegate> {
	UIFaceKeyBoard* _emotionBoard;
	UIControl* _maskPanel;
	id<GAInputBarDelegate> _delegate;
	int _inputState;
	NSMutableDictionary* _allStateItems;
	NSDictionary* _keyboardInfo;
	NSRange _selectedRange;
	CGPoint _pointOfScreenBottom;
	BOOL _hasInitNormalFrame;
	NSMutableDictionary* _atDict;
	NSString* _draftKey;
	BOOL _isSending;
@private
	BOOL _isOutSizeScreen;
}
@property(retain, nonatomic) NSMutableDictionary* atDict;
@property(retain, nonatomic) NSString* draftKey;
@property(assign, nonatomic) BOOL isOutSizeScreen;
@property(assign, nonatomic) id<GAInputBarDelegate> delegate;
@property(assign, nonatomic) int inputState;
-(BOOL)growingTextViewShouldReturn:(id)growingTextView;
-(void)growingTextView:(id)view willChangeHeight:(float)height;
-(BOOL)growingTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)growingTextViewDidEndEditing:(id)growingTextView;
-(void)backSpaceFace;
-(void)faceChoosed:(id)choosed;
-(void)faceDraged:(id)draged;
-(void)clickFlipRightPageBtn;
-(void)clickFlipLeftPageBtn;
-(void)clickEmotionSendBtn:(id)btn;
-(void)removeEmotionBoard;
-(void)showEmotionBoard;
-(BOOL)isKeyboardChangeFrame:(BOOL*)frame;
-(void)onKeyboardWillHideNotify:(id)onKeyboard;
-(void)onKeyboardWillShowNotify:(id)onKeyboard;
-(void)removeKeyboardObserver;
-(void)addKeyboardObserver;
-(void)onSelectionCompeleted:(id)compeleted nicks:(id)nicks;
-(void)showSelectionView;
-(void)clickBtn:(id)btn;
-(void)clickMaskPanel:(id)panel;
-(BOOL)isMaskPanelAdded;
-(void)removeMaskPanel;
-(void)addMaskPanel;
-(void)draftBoxFinishEditing;
-(void)draftBoxEndEditing;
-(void)draftBoxUpdateEditing;
-(void)draftBoxBeginEditing;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)updateInputState:(int)state;
-(void)resetInputBar;
-(void)deactiveInputBar;
-(void)activeInputBar;
-(void)hideItemsForState:(int)state;
-(void)showItemsForState:(int)state;
-(CGRect)frameAtRightIndex:(unsigned)rightIndex;
-(CGRect)frameAtLeftIndex:(unsigned)leftIndex;
-(void)addRightItem:(id)item atIndex:(unsigned)index forState:(int)state;
-(void)addLeftItem:(id)item atIndex:(unsigned)index forState:(int)state;
-(void)textViewDidChange:(id)textView;
-(id)textView;
-(void)doWhenViewWillDisappear;
-(void)doWhenViewDidAppear;
-(void)createBgView;
-(void)reloadAppearance;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame defaultStyle:(BOOL)style;
@end

@interface GAKeyboardHelper : NSObject {
}
+(void)textView:(id)view insertString:(id)string selectedRange:(NSRange*)range textViewDelegate:(id)delegate;
+(BOOL)textView:(id)view deletedRange:(NSRange)range selectedRange:(NSRange*)range3 textViewDelegate:(id)delegate;
+(int)keyboardAnimationCurve:(id)curve;
+(float)keyboardAnimationDuration:(id)duration;
+(CGRect)keyboardFrameEnd:(id)end;
+(CGRect)keyboardFrameBegin:(id)begin;
+(float)KeyboardChangeHeightOffset:(id)offset;
+(BOOL)isKeyboardChangeFrame:(id)frame;
+(BOOL)isKeyboardChangeHeight:(id)height;
+(float)keyboardHeight:(id)height;
@end

@interface GATextViewInternal : UITextView {
	NSString* _defaultPlaceholder;
	NSString* _editingPlaceholder;
	BOOL _isPlaceholderDisplayed;
	BOOL _isEditing;
}
@property(assign, nonatomic) BOOL isEditing;
@property(retain, nonatomic) NSString* editingPlaceholder;
@property(retain, nonatomic) NSString* defaultPlaceholder;
-(void)updateEditingPlaceholderState;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)setContentSize:(CGSize)size;
-(void)setContentInset:(UIEdgeInsets)inset;
-(void)setContentOffset:(CGPoint)offset;
-(void)setContentOffset:(CGPoint)offset animated:(BOOL)animated;
-(void)resetContentOffset;
-(float)getContentHeight;
-(float)getFontLineHeight;
-(void)setText:(id)text;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
@end

@interface MQZonePhotoBrowserManager : NSObject {
@private
	int _photoBrowserMode;
}
@property(assign, nonatomic) int photoBrowserMode;
+(void)exitInstance;
+(id)sharedInstance;
@end

@interface MQZoneMoodEditViewController : QZoneViewController <MQZoneMoodEditInputCellDelegate, MQZoneMoodEditPhotoCellDelegate, MQZoneMoodEditLBSCellDelegate, UIActionSheetDelegate, UIScrollViewDelegate> {
	UIScrollView* _scrollView;
	MQZoneMoodEditInputCell* _inputCell;
	MQZoneMoodEditPhotoCell* _photoCell;
	NSMutableArray* _photoList;
	MQZoneMoodEditLBSCell* _lbsCell;
	MQZoneMoodEditSyncCell* _syncCell;
	BOOL _enableDraft;
	QZDraftWriteMood* _draft;
	QQActionSheet* _actionSheet;
	BOOL _hasInitData;
	BOOL _isOpenWaterMarkCam;
	BOOL _checkDraft;
@private
	NSMutableArray* _originalPhotoUuidList;
	NSNumber* _isShareModeValue;
	NSString* _text;
	NSArray* _imageList;
	NSArray* _imageModelList;
	NSNumber* _sync2QQEnableValue;
	NSNumber* _sync2QQFlagValue;
	NSNumber* _sync2WeiboEnableValue;
	NSNumber* _sync2WeiboFlagValue;
	NSNumber* _autoShowKeyBoardValue;
	NSArray* _uuidList;
}
@property(retain, nonatomic) QZDraftWriteMood* draft;
@property(retain, nonatomic) NSMutableArray* originalPhotoUuidList;
@property(retain, nonatomic) NSMutableArray* photoList;
@property(retain, nonatomic) MQZoneMoodEditSyncCell* syncCell;
@property(retain, nonatomic) MQZoneMoodEditLBSCell* lbsCell;
@property(retain, nonatomic) MQZoneMoodEditPhotoCell* photoCell;
@property(retain, nonatomic) MQZoneMoodEditInputCell* inputCell;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) BOOL isOpenWaterMarkCam;
@property(retain, nonatomic) NSArray* imageModelList;
@property(retain, nonatomic) NSArray* uuidList;
@property(retain, nonatomic) NSArray* imageList;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSNumber* autoShowKeyBoardValue;
@property(retain, nonatomic) NSNumber* sync2WeiboFlagValue;
@property(retain, nonatomic) NSNumber* sync2WeiboEnableValue;
@property(retain, nonatomic) NSNumber* sync2QQFlagValue;
@property(retain, nonatomic) NSNumber* sync2QQEnableValue;
@property(retain, nonatomic) NSNumber* isShareModeValue;
-(void).cxx_destruct;
-(void)clickPostBtn:(id)btn;
-(void)appWillResignActive:(id)app;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)ShowDiscardDrafts;
-(void)ShowSaveDrafts;
-(BOOL)isSync2WeiboEnable;
-(BOOL)isSyncQQEnable;
-(void)saveSyncFlagsFromUserDefaults;
-(void)readSyncFlagsFromUserDefaults;
-(void)removeDraft;
-(void)saveDraft;
-(void)readDraft;
-(BOOL)compareDiscardImage2SelectedImage;
-(BOOL)compareDraftImage2SelectedImage;
-(BOOL)isDataChanged;
-(void)initData;
-(void)LBSCellBecomeActive:(id)active;
-(void)addImage:(id)image uuid:(id)uuid;
-(void)photoCellCheckPhotoState:(id)state photoList:(id)list;
-(void)photoCellChangeHeight:(id)height heightOffset:(float)offset;
-(void)photoCellBecomeActive:(id)active;
-(void)inputCellCheckTextState:(id)state text:(id)text;
-(void)inputCellBecomeActive:(id)active;
-(void)inputCellFinishEdit:(id)edit text:(id)text;
-(void)activeInputCell:(BOOL)cell animated:(BOOL)animated;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(BOOL)checkPostBtnState;
-(void)adjustUI;
-(void)createSyncCell;
-(void)createLBSCell;
-(void)createPhotoCell;
-(void)createInputCell;
-(void)createScrollView;
-(void)checkEnableDraft;
-(void)clickMaskBtn;
-(BOOL)isSupportRightDragToGoBack;
-(void)leftButtonClick:(id)click;
-(void)dismissZebraView;
-(void)VideoReq:(id)req;
-(void)onIMFucked:(id)fucked;
-(void)didReceiveMemoryWarning;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneActiveFeedHeader : UIView {
@private
	id<MQZoneActiveFeedHeaderDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZoneActiveFeedHeaderDelegate> delegate;
-(void)updateHeaderText:(id)text;
-(void)clickEditBtn:(id)btn;
-(void)clickFaceImgView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneAlbumPickerCell : MQZoneTableViewCell {
	UIImageView* _plusIcon;
	UILabel* _label;
	UIImageView* _arrowIcon;
@private
	BOOL _showPrivacy;
}
@property(assign, nonatomic) BOOL showPrivacy;
+(float)heightForFeedModel:(id)feedModel showPrivacy:(BOOL)privacy;
-(void)drawSeparateLine:(CGRect)line;
-(void)onUpdateFeedModel:(id)model;
-(void)setArrowVisible:(BOOL)visible;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQzoneAlbumPickerViewController : MQZonePullingTableViewController <UITableViewDataSource, UITableViewDelegate, MQZoneCreateAlbumDelegate> {
	NSMutableArray* _albumList;
	int _hasMore;
	UIViewController<MQzoneAlbumPickerDelegate>* _delegate;
	BOOL _willCreateNewAlbum;
	int _requestId;
@private
	long long _groupCode;
}
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) UIViewController<MQzoneAlbumPickerDelegate>* delegate;
-(void)handleDidSelectCell:(id)handle;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)handleAlbumList:(int)list action:(int)action albumList:(id)list3 hasMore:(BOOL)more;
-(int)onNotifyGroupAlbumListResult:(id)result;
-(int)onNotifyAlbumListResult:(id)result;
-(int)onCreateAlbumSucceeded:(id)succeeded;
-(void)initNotificationObservers:(id)observers;
-(BOOL)onLoadMore;
-(BOOL)onHasMore;
-(BOOL)onRefresh;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(id)initWithGroupCode:(long long)groupCode;
@end

@interface MQZoneCreateAlbumInputCell : UITableViewCell {
	UILabel* _leftLabel;
	UITextField* _inputField;
}
@property(readonly, assign, nonatomic) UITextField* inputField;
@property(readonly, assign, nonatomic) UILabel* leftLabel;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZoneCreateAlbumSelectCell : UITableViewCell {
	UILabel* _leftLabel;
	UIImageView* _selectedIcon;
}
@property(readonly, assign, nonatomic) UILabel* leftLabel;
-(void)setSelected:(BOOL)selected;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZoneCreateAlbumQAndAViewController : QZoneViewController <QIMTextInputDelegate, UITableViewDataSource, UITableViewDelegate, UITextFieldDelegate> {
	UITableView* _tableView;
	NSArray* _textArray;
	NSMutableString* _editingString;
	MQzoneCreateAlbumViewController* _parentCtr;
	NSString* _q;
	NSString* _a;
}
@property(assign, nonatomic) MQzoneCreateAlbumViewController* parentCtr;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)dealloc;
-(void)onRightButtonClick:(id)click forEvent:(id)event;
-(void)loadView;
-(id)initWith:(id)with a:(id)a;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface MQzoneCreateAlbumViewController : QZoneViewController <QIMTextInputDelegate, UITableViewDataSource, UITableViewDelegate, UITextFieldDelegate> {
	UITableView* _tableView;
	NSArray* _textArray;
	NSMutableString* _editingString;
	NSString* _question;
	NSString* _answer;
	id<MQZoneCreateAlbumDelegate> _createAlbumDelegate;
	long long _groupCode;
}
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) id<MQZoneCreateAlbumDelegate> createAlbumDelegate;
-(void)didFillQuestion:(id)question answer:(id)answer;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)dealloc;
-(void)onRightButtonClick:(id)click forEvent:(id)event;
-(void)viewDidLoad;
-(void)loadView;
-(int)handleCreateAlbumResultWithError:(int)error message:(id)message albumID:(id)anId albumName:(id)name;
-(int)onNotifyCreateAlbumResultForGroupZone:(id)groupZone;
-(int)onNotifyCreateAlbumResultForQQZone:(id)qqzone;
-(void)initNotificationObservers:(id)observers;
-(id)initWithGroupCode:(long long)groupCode;
-(id)init;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface MQZoneBadgeView : UIView {
	UIImage* _image;
	int _number;
}
@property(assign, nonatomic) int number;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithCenterPosition:(CGPoint)centerPosition;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZonePhotoReviewPanel : UIScrollView <UIScrollViewDelegate> {
	float _side;
	float _minimalMargin;
	unsigned _maxCells;
	UIButton* _cameraButton;
	NSMutableArray* _buttons;
	UIImageView* _backgroundImageView;
}
@property(assign, nonatomic) id<MQZonePhotoReviewPanelDelegate> delegate;
@property(readonly, assign, nonatomic) UIButton* cameraButton;
@property(assign, nonatomic) unsigned maxCells;
@property(assign, nonatomic) float minimalMargin;
@property(assign, nonatomic) float side;
-(void).cxx_destruct;
-(void)onClick:(id)click forEvents:(unsigned*)events;
-(CGSize)sizeThatFits:(CGSize)fits;
-(CGRect)frameForButtonAtIndex:(unsigned)index;
-(void)layoutSubviews;
-(void)reload;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneSelectAlbumButton : UIButton {
	UILabel* _leftLabel;
	UILabel* _rightLabel;
	UIImageView* _arrow;
	int _permission;
	UIImageView* _permissionView;
}
@property(readonly, assign, nonatomic) UIImageView* arrow;
@property(assign, nonatomic) int permission;
-(void).cxx_destruct;
-(void)setRightLabelText:(id)text;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PrivateCell : UIView {
	UIImage* _bgImage;
	MQZoneSelectAlbumButton* _albumButton;
	UISwitch* _switch;
	BOOL _supportHD;
}
@property(assign, nonatomic, getter=getHDOn, setter=setHDOn:) BOOL hdOn;
@property(retain, nonatomic) UIImage* bgImage;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame supportHD:(BOOL)hd;
@end

@interface MQZoneUploadPhotoViewController : QZoneViewController <MQZonePhotoReviewPanelDelegate, UIActionSheetDelegate, MQZImagePickerDelegate, MQzoneAlbumPickerDelegate, MQZonePhotoDescriptionDelegate, GAGrowingTextViewDelegate> {
	UIControl* _mask;
	UIButton* _emotionBtn;
	MQZonePhotoReviewPanel* _panel;
	MQZoneSelectAlbumButton* _selectAlbumButton;
	PrivateCell* _albumCell;
	GAGrowingTextView* _textView;
	NSMutableArray* _photoes;
	UIFaceKeyBoard* _emotionBoard;
	QzoneFeedModel* _albumModel;
	NSMutableArray* _uuids;
	QQActionSheet* _actionSheet;
	BOOL _needLastUseAlbum;
	MQZoneMoodEditLBSCell* _lbsCell;
	UIScrollView* _scrollView;
	UIView* _lowestView;
	long long _serverTime;
	NSString* _clientKey;
	long long _batchID;
@private
	long long _groupCode;
}
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) BOOL needLastUseAlbum;
@property(retain, nonatomic) NSString* clientKey;
@property(retain, nonatomic, setter=setPhotoes:) NSMutableArray* photoes;
-(void).cxx_destruct;
-(BOOL)isFakeFeed;
-(void)onDelete:(unsigned)aDelete;
-(void)photoClick:(unsigned)click thumbRects:(id)rects visibleRects:(id)rects3;
-(id)panel:(id)panel orignalImageForIndex:(unsigned)index;
-(id)panel:(id)panel imageForIndex:(unsigned)index;
-(unsigned)numberOfCells;
-(void)uploadPhotosForGroupZone;
-(void)uploadPhotosForQQZone;
-(id)CreateUploadModel:(id)model hasFakeFeed:(BOOL)feed;
-(void)didMQZImagePicker:(id)picker selectedImages:(id)images;
-(void)takePhoto;
-(void)getAlbumPhoto;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)cameraButtonClick:(id)click forEvent:(id)event;
-(void)panel:(id)panel willChangeHeight:(float)height;
-(void)stopTyping;
-(void)removeMask;
-(void)addMask;
-(void)queryPhotoCountInAlbum:(id)album albumType:(id)type;
-(int)onNotifyGetPhotoCountResult:(id)result;
-(void)handleClickRightButtonForGroupZone;
-(void)handleClickRightButtonForQQZone;
-(void)onRightButtonClick:(id)click forEvent:(id)event;
-(void)viewDidLoad;
-(void)didSelectAlbum:(id)album;
-(void)selectAlbum:(id)album forEvent:(id)event;
-(void)leftButtonClick:(id)click;
-(void)clickActiveBtn:(id)btn;
-(BOOL)growingTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)growingTextViewDidEndEditing:(id)growingTextView;
-(void)growingTextViewDidBeginEditing:(id)growingTextView;
-(BOOL)growingTextViewShouldBeginEditing:(id)growingTextView;
-(id)defaultAlbumName;
-(BOOL)isSupportRightDragToGoBack;
-(void)viewWillDisappear:(BOOL)view;
-(void)loadView;
-(BOOL)onNotifyGetAlbumInfo:(id)info;
-(void)initNotificationObservers:(id)observers;
-(void)setRightButtonState;
-(id)initWithAlbumId:(id)albumId albumName:(id)name rights:(int)rights groupCode:(long long)code;
-(id)initWithAlbumId:(id)albumId albumName:(id)name rights:(int)rights;
-(id)initWithGroupCode:(long long)groupCode;
-(id)init;
@end

@interface MQZonePhotoView : UIView <IGADrawASynImgItemDelegate> {
@private
	QzoneFeedPicture* _picture;
	id<MQZonePhotoViewDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZonePhotoViewDelegate> delegate;
@property(retain, nonatomic) QzoneFeedPicture* picture;
-(void).cxx_destruct;
-(void)onTouchEvent;
-(void)setNeedsDisplayFun:(id)fun;
-(void)notifyNeedUpdateScreen:(CGRect)screen;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneScrollPhotoView : UIView <UIScrollViewDelegate, MQZonePhotoViewDelegate> {
	UIScrollView* _scrollView;
	int _currentPageIndex;
	int _photoIndex;
	NSArray* _photoList;
	id<MQZoneScrollPhotoViewDelegate> _delegate;
@private
	CGRect _imageRect;
}
@property(readonly, assign, nonatomic) int photoIndex;
@property(readonly, assign, nonatomic) CGRect imageRect;
@property(assign, nonatomic) id<MQZoneScrollPhotoViewDelegate> delegate;
-(void)resetContentOffset;
-(id)currentPhotoView;
-(void)layoutPages:(int)pages;
-(CGRect)getFrameAtPageIndex:(int)pageIndex;
-(id)getViewAtPageIndex:(int)pageIndex;
-(CGRect)getImageRect;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)onTouchEvent:(id)event;
-(void)setViewData;
-(void)setPhotoList:(id)list photoIndex:(int)index;
-(void)dealloc;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneGiftDetailViewController : QZoneViewController <IGACanvas, TTURLRequestDelegate, TTURLResponse, AVAudioPlayerDelegate> {
	QzoneFeedModel* _model;
	UIImageView* _portrait;
	UIImageView* _giftImage;
	MQZCustomLabel* _giftDesc;
	UILabel* _nickName;
	NSString* _uinString;
	TTURLRequest* _request;
	AVAudioPlayer* _player;
	UIButton* _playButton;
	NSTimer* _timer;
	BOOL _playing;
}
-(void).cxx_destruct;
-(void)rightButtonClick:(id)click;
-(void)freePlayer;
-(void)audioPlayerEndInterruption:(id)interruption withOptions:(unsigned)options;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)requestDidFinishLoad:(id)request;
-(void)checkAMRPlayerStatus;
-(id)request:(id)request processResponse:(id)response data:(id)data;
-(void)handleImageFailed:(id)failed error:(int)error desc:(id)desc;
-(void)updateCanvas:(id)canvas;
-(id)getGiftUrl:(id)url;
-(void)onClick:(id)click forEvent:(id)event;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)initAudioGiftUI;
-(void)initNormalGiftUI;
-(void)loadView;
-(void)dealloc;
-(id)initWithModel:(id)model;
@end

@interface FormatConverter : NSObject {
	GAUBBTextParser* _ubbParser;
	GANormalTextParser* _normalParser;
}
+(id)instance;
-(id)composeAtString:(long long)string nick:(id)nick;
-(id)contentItemsFromUser:(id)user contentText:(id)text;
-(id)contentItemsFromUser:(id)user;
-(id)contentItemsFromURL:(id)url URLDescription:(id)description;
-(id)contentItemsFromUBBString:(id)ubbstring;
-(BOOL)doTruncateWithMaxWords:(unsigned)maxWords currentWords:(unsigned*)words newWords:(unsigned)words3 finishTruncate:(BOOL)truncate;
-(id)UBBStringFromNormalString:(id)normalString atDict:(id)dict truncateWords:(unsigned)words truncateRange:(unsigned*)range;
-(id)UBBStringFromNormalString:(id)normalString atDict:(id)dict;
-(void)dealloc;
-(id)init;
@end

@interface GATextParseNode : NSObject {
	int _nodeType;
	NSRange _range;
}
@property(assign, nonatomic) NSRange range;
@property(assign, nonatomic) int nodeType;
@end

@interface GATextParser : NSObject {
}
-(id)parseText:(id)text regex:(id)regex;
-(void)addList:(id)list NodeRange:(NSRange)range Type:(int)type;
-(int)getCurrentType:(id)type range:(NSRange)range;
@end

@interface GAUBBTextParser : GATextParser {
}
-(BOOL)parseUrl:(id)url url:(id*)url2;
-(BOOL)parseUser:(id)user uin:(long long*)uin nick:(id*)nick remark:(id*)remark;
-(BOOL)parseEmotion:(id)emotion emo:(id*)emo;
-(id)parseText:(id)text;
-(int)getCurrentType:(id)type range:(NSRange)range;
@end

@interface GANormalTextParser : GATextParser {
}
-(id)parseText:(id)text;
-(int)getCurrentType:(id)type range:(NSRange)range;
@end

@interface MQZoneMessageListViewController : MQZoneOperatableViewController {
	long long _uin;
	NSString* _nickname;
	NSMutableArray* _messageList;
	NSMutableDictionary* _dictFeedsWithKey;
	int _lastUpdateTime;
	int _hasMore;
	int _msgListReqID;
	int _writeMsgReqID;
}
-(id)getDictFeedsWithKey;
-(id)getFeedList;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)onNotifyWriteMessageResult:(id)result;
-(int)onNotifyMessageListResult:(id)result;
-(BOOL)inputBarSendText:(id)text param:(id)param;
-(BOOL)onHasMore;
-(int)onGetLastRefreshTime;
-(BOOL)onLoadMore;
-(BOOL)onRefresh;
-(void)handleOpenFeedDetail:(long long)detail feedModel:(id)model;
-(void)handleDidSelectCell:(id)handle;
-(void)initNotificationObservers:(id)observers;
-(void)didReceiveMemoryWarning;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithUin:(long long)uin nickname:(id)nickname;
@end

@interface MQZoneMoodListCell : MQZoneActiveFeedCell {
}
+(float)heightWithFeedModel:(id)feedModel;
-(void)updateOperationBtn;
-(void)updateAudioButton;
@end

@interface QZoneZipUtil : NSObject {
}
+(id)unzip:(id)unzip;
+(id)zip:(id)zip;
@end

@interface QZDevice : NSObject {
	NSString* _imei;
	NSString* _imsi;
	NSString* _model;
	NSString* _systemName;
	NSString* _systemVersion;
}
+(id)instance;
-(id)getSystemVersion;
-(id)getSystemName;
-(id)getModel;
-(id)getImei;
-(id)getImsi;
-(void)dealloc;
@end

@interface MQZoneMsgBarUtil : NSObject {
}
+(void)SendMoodNotification:(int)notification content:(id)content notificationName:(id)name timer:(id)timer;
+(void)sendMoodRemovMsgBar;
+(void)sendMoodStatusMsgFailed;
+(void)sendMoodStatusMsgSucess;
+(void)sendMoodStatusMsg:(int)msg andTotal:(int)total andProcess:(float)process;
@end

@interface Easing : NSObject {
}
+(XXStruct_0V4DFB)getCirc;
+(XXStruct_0V4DFB)getSine;
+(XXStruct_0V4DFB)getQuint;
+(XXStruct_0V4DFB)getQuart;
+(XXStruct_0V4DFB)getCubic;
+(XXStruct_0V4DFB)getQuad;
+(XXStruct_0V4DFB)getExpo;
+(XXStruct_0V4DFB)getLinear;
+(XXStruct_0V4DFB)getBack;
+(XXStruct_0V4DFB)getBounce;
+(XXStruct_0V4DFB)getElastic;
@end

@interface MQZoneAudioButton : UIButton <PlayAudioDelegate> {
	int _audioStatus;
	UILabel* _titleLabel;
	UIImageView* _animationImageView;
	int _audioTime;
	NSString* _audioUrl;
	NSString* _errorMessage;
	NSString* _cid;
	int _index;
	id _obj;
	UIActivityIndicatorView* indicatorView;
	PlayAudio* playAudioTmp;
	CGRect _iconPlayRect;
	CGRect _iconWaveRect;
}
@property(retain, nonatomic) id obj;
@property(assign, nonatomic) int audioStatus;
-(void)playAudioCallBack;
-(void)audioButtonClick:(id)click;
-(void)stopIndicator;
-(void)dealloc;
-(void)initAudioStatus;
-(void)setWithFrame:(CGRect)frame url:(id)url time:(int)time errorMessage:(id)message cid:(id)cid obj:(id)obj;
-(id)init;
@end

@interface MQZMeterTable : NSObject {
	float mMinDecibels;
	float mDecibelResolution;
	float mScaleFactor;
	float* mTable;
}
-(void)dealloc;
-(float)valueAt:(float)at;
-(id)init;
@end

@interface MQZAQLevelMeter : UIView {
	OpaqueAudioQueue* _aq;
	AudioQueueLevelMeterState* _chan_lvls;
	NSArray* _channelNumbers;
	NSArray* _subLevelMeters;
	NSTimer* _updateTimer;
	float _refreshHz;
	BOOL _showsPeaks;
	BOOL _vertical;
	int _pause;
	MQZMeterTable* _meterTable;
	UIColor* _bgColor;
	UIColor* _borderColor;
	double _peakFalloffLastFire;
	BOOL hideMaskView;
	id<MQZAQLevelMeterDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZAQLevelMeterDelegate> delegate;
@property(assign) BOOL hideMaskView;
@property(assign) BOOL vertical;
@property(assign) BOOL showsPeaks;
@property(retain) NSArray* channelNumbers;
@property(assign) float refreshHz;
@property(assign) OpaqueAudioQueue* aq;
-(void)getLevel:(id)level;
-(void)setPauseFQ:(float)fq;
-(void)dealloc;
-(void)_refresh;
-(void)layoutSubLevelMeters;
-(void)setBackgroundColor:(id)color;
-(void)setBorderColor:(id)color;
-(id)initWithCoder:(id)coder;
-(void)changeFrame:(id)frame;
-(void)showInSuperView:(id)superView;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZLevelMeter : UIView {
	unsigned _numLights;
	float _level;
	float _peakLevel;
	MQZLevelMeterColorThreshold* _colorThresholds;
	unsigned _numColorThresholds;
	BOOL _vertical;
	BOOL _variableLightIntensity;
	UIColor* _bgColor;
	UIColor* _borderColor;
	BOOL hideMaskView;
}
@property(assign, nonatomic) BOOL hideMaskView;
@property(retain) UIColor* borderColor;
@property(retain) UIColor* bgColor;
@property(assign) BOOL variableLightIntensity;
@property(assign, getter=isVertical) BOOL vertical;
@property(assign) unsigned numLights;
@property(assign) float peakLevel;
@property(assign) float level;
-(void)setColorThresholds:(MQZLevelMeterColorThreshold*)thresholds count:(unsigned)count;
-(MQZLevelMeterColorThreshold*)colorThresholds:(unsigned*)thresholds;
-(void)dealloc;
-(void)fillRoundedRect:(CGRect)rect inContext:(CGContextRef)context;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZAQRecorder : NSObject {
	void* mEnState;
	CFStringRef mFileName;
	OpaqueAudioQueue* mQueue;
	AudioQueueBuffer* mBuffers[3];
	long long mRecordPacket;
	CAStreamBasicDescription mRecordFormat;
	unsigned long mIsRunning;
	FILE* mAmrFile;
	float mFileDuration;
	NSTimer* mCheckTimer;
}
-(id).cxx_construct;
-(float)fileDuration;
-(BOOL)IsRunning;
-(CAStreamBasicDescription)DataFormat;
-(OpaqueAudioQueue*)Queue;
-(CFStringRef)GetFileName;
-(unsigned long)GetNumberChannels;
-(void)StopRecord;
-(BOOL)StartRecord:(CFStringRef)record;
-(void)dealloc;
-(id)init;
-(void)CloseRecordFile;
-(void)encodeBuffer:(short*)buffer length:(int)length;
-(void)SetupAudioFormat:(unsigned long)format;
-(void)timeOut;
-(int)ComputeRecordBufferSize:(const AudioStreamBasicDescription*)size seconds:(float)seconds;
@end

@interface MQZTQRecorderManager : NSObject <MQZAQLevelMeterDelegate> {
	BOOL playbackWasPaused;
	BOOL playbackWasInterrupted;
	NSString* myAudioFile;
	NSString* uuid;
	MQZAQLevelMeter* lvlMeter_in;
	MQZAQRecorder* recorder;
	BOOL speakerOn;
	UIView* showView;
	BOOL hideMaskView;
	id<MQZTQRecorderManagerDelegate> delegate;
}
@property(assign, nonatomic) id<MQZTQRecorderManagerDelegate> delegate;
@property(assign, nonatomic) BOOL hideMaskView;
@property(retain, nonatomic) UIView* showView;
@property(retain, nonatomic) MQZAQLevelMeter* levelMeter;
@property(retain, nonatomic) NSString* uuid;
@property(retain, nonatomic) NSString* audioFile;
@property(retain, nonatomic) MQZAQRecorder* recorder;
+(void)exit;
+(id)GetInstance;
-(void)MQZAQLevelMeterGetLevel:(float)level;
-(void)dealloc;
-(BOOL)hasHeadset;
-(double)durationOfAudioAtPath:(id)path;
-(double)durationOfAudioPtt:(id)audioPtt;
-(void)cancelAllProcess;
-(void)playAMRFile:(id)file;
-(void)playPtt:(id)ptt;
-(void)reversePtt:(id)ptt;
-(void)playbackStop:(id)stop;
-(void)replayAudioDevice;
-(void)stopPlayAudioDevice;
-(void)playAudioDevice;
-(int)stopRecordAudioDevice;
-(void)pauseLvlMeter;
-(id)dateString;
-(BOOL)recordAudioDevice;
-(id)init;
-(void)switchToHeadPhoneSession;
-(void)switchToSpeakerSession;
-(void)proximityStateChangeCallBack:(id)back;
-(void)InitializeAudioSession;
-(void)setState;
-(void)setPlayBackState;
-(void)restoreState;
-(void)getPlayBackState;
-(void)saveState;
@end

@interface MQZTestFeedController : QZoneViewController <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _tableView;
}
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)viewDidLoad;
-(void)onNotifyGetLocalFeeds:(id)feeds;
-(void)initNotificationObservers:(id)observers;
-(void)loadView;
-(void)dealloc;
@end

@interface MQZoneDetailBarView : UIView {
@private
	BOOL _isLiked;
	BOOL _shareEnabled;
	BOOL _moreEnabled;
	MQZoneBarButton* _likeButton;
	MQZoneBarButton* _commentButton;
	MQZoneBarButton* _shareButton;
	MQZoneBarButton* _moreButton;
	BOOL isForward;
	UIImage* _btnBgImage;
	UIImage* _bgImage;
	id<MQZoneDetailBarViewDelegate> _delegate;
	CGRect _showFrame;
	CGRect _hiddenFrame;
}
@property(assign, nonatomic) CGRect showFrame;
@property(assign, nonatomic) CGRect hiddenFrame;
@property(retain, nonatomic) UIImage* bgImage;
@property(retain, nonatomic) UIImage* btnBgImage;
@property(retain, nonatomic) MQZoneBarButton* moreButton;
@property(retain, nonatomic) MQZoneBarButton* shareButton;
@property(retain, nonatomic) MQZoneBarButton* commentButton;
@property(retain, nonatomic) MQZoneBarButton* likeButton;
@property(assign, nonatomic) BOOL isForward;
@property(assign, nonatomic) BOOL moreEnabled;
@property(assign, nonatomic) BOOL shareEnabled;
@property(assign, nonatomic) BOOL isLiked;
@property(assign, nonatomic) id<MQZoneDetailBarViewDelegate> delegate;
-(void)onBarShowChange;
-(void)onMoreButtonClicked:(id)clicked;
-(void)onShareButtonClicked:(id)clicked;
-(void)onCommentButtonClicked:(id)clicked;
-(void)onLikeButtonClicked:(id)clicked;
-(void)show:(BOOL)show;
-(void)updateButtonsState;
-(void)updateMoreButtonState;
-(void)updateShareButtonState;
-(void)updateLikeButtonState;
-(void)createButtons;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

@interface QZAccountManager : NSObject {
	NSMutableArray* _observers;
}
+(id)instance;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)onAccountLogout;
-(void)onAccountLogin;
-(void)dealloc;
-(id)init;
@end

@interface QZUserEngine : NSObject {
	long long _uin;
}
+(id)instance;
-(id)getNicknameByAccount:(long long)account;
-(id)getRecentFriendList;
-(id)getFriendList;
-(id)vkey;
-(void)refreshSid;
-(id)sid;
-(void)setDraftCurrentUin:(long long)uin;
-(long long)getDraftCurrentUin;
-(id)loginUserNickName;
-(long long)getCurrentUin;
@end

@interface MQZoneEngine : QZEngineBase {
}
+(id)instance;
-(BOOL)isNetworkError:(int)error;
-(int)getLastMiniFeedTimestampWithUin:(long long)uin;
-(int)getPassiveFeedsRefreshTime;
-(int)getActiveFeedsRefreshTime;
-(void)clearFeedListCache:(int)cache;
-(int)getUndealCount;
-(int)writeMoodWithContent:(id)content atDict:(id)dict verified:(BOOL)verified syncToWeibo:(BOOL)weibo syncToSign:(BOOL)sign gpsInfo:(id)info lbsAddress:(id)address pictureList:(id)list videoInfo:(id)info9;
-(int)postMessage:(id)message forUin:(long long)uin userParam:(id)param;
-(int)postMessage:(id)message forUin:(long long)uin;
-(int)reportUploadFinishWithBatchId:(long long)batchId albumType:(int)type handset:(int)handset albumId:(id)anId total:(int)total succ:(int)succ clientKey:(id)key;
-(int)getAlbumInfo:(id)info;
-(int)setAlbum:(id)album name:(id)name desc:(id)desc limit:(int)limit question:(id)question answer:(id)answer;
-(int)createAlbum:(id)album desc:(id)desc limit:(int)limit question:(id)question answer:(id)answer;
-(int)requestVerifyRightsWithfriendUin:(long long)uin question:(id)question answer:(id)answer;
-(int)getPersonalProfile:(long long)profile params:(id)params;
-(void)dealloc;
-(id)init;
-(int)seeMoreFeedCommentsWithUin:(long long)uin feedModel:(id)model more:(BOOL)more type:(int)type;
-(int)getPhotoCommentListOfDetail:(long long)detail feedModel:(id)model index:(int)index more:(BOOL)more;
-(int)getCommentListOfDetail:(long long)detail feedModel:(id)model more:(BOOL)more;
-(int)getDetailWithQQUrl:(id)qqurl from:(int)from;
-(int)getDetailWithUin:(long long)uin feedModel:(id)model from:(int)from cached:(BOOL)cached;
-(id)getLocalDetailFeedWithUin:(long long)uin feedModel:(id)model;
-(id)getFakeFeedList;
-(id)getFakeFeedWithKey:(id)key;
-(void)removeFeedWithClientKey:(id)clientKey notify:(BOOL)notify;
-(void)addFakeFeed:(id)feed withKey:(id)key;
-(BOOL)fakeUploadPhotosWithFeed:(id)feed withClientKey:(id)clientKey;
-(BOOL)fakeUploadPhotos:(id)photos albumId:(id)anId albumName:(id)name desc:(id)desc withClientKey:(id)clientKey gpsInfo:(id)info lbsAddress:(id)address;
-(BOOL)fakeWriteMoodWithFeed:(id)feed withClientKey:(id)clientKey requestID:(int)anId;
-(BOOL)fakeWriteMood:(id)mood content:(id)content photos:(id)photos withClientKey:(id)clientKey;
-(BOOL)postFakeFeed:(id)feed;
-(int)setHomePageCover:(id)cover;
-(int)getHomePageCover:(id)cover;
-(int)getProfileFeeds:(BOOL)feeds forOwner:(long long)owner params:(id)params;
-(int)getPassiveFeeds:(BOOL)feeds params:(id)params;
-(BOOL)getLocalPassiveFeedFeeds;
-(void)delelteLocalFriendFeedsWithUin:(long long)uin;
-(int)getFriendFeeds:(BOOL)feeds params:(id)params;
-(BOOL)getLocalFriendFeeds;
-(int)getRecAlbumListWithUin:(long long)uin more:(BOOL)more isNeedLocal:(BOOL)local params:(id)params;
-(int)getAlbumListWithUin:(long long)uin more:(BOOL)more isNeedLocal:(BOOL)local;
-(int)getMessageListWithUin:(long long)uin more:(BOOL)more isNeedLocal:(BOOL)local;
-(int)getBlogListWithUin:(long long)uin more:(BOOL)more isNeedLocal:(BOOL)local;
-(int)getMoodListWithUin:(long long)uin more:(BOOL)more isNeedLocal:(BOOL)local;
-(id)getLocalSpaceRightSettings;
-(int)setConcern:(BOOL)concern objuin:(long long)objuin;
-(int)getSpaceRight:(int)right userParam:(id)param;
-(int)setSpaceRightWithSeq:(int)seq right:(int)right userParam:(id)param;
-(int)getBlackList:(id)list;
-(int)setBlackListActionType:(int)type uinList:(id)list userParam:(id)param;
-(int)getUnCareList:(id)list;
-(int)setUnCareListActionType:(int)type uinList:(id)list userParam:(id)param;
-(int)adaptVideo:(id)video;
-(int)delReplyWithFeedModel:(id)feedModel comment:(id)comment reply:(id)reply;
-(int)delCommentWithFeedModel:(id)feedModel comment:(id)comment;
-(int)delUgcWithFeedModel:(id)feedModel photoIndex:(int)index;
-(int)shareWithPhotoModel:(id)photoModel content:(id)content userParam:(id)param;
-(int)commentWithPhotoModel:(id)photoModel comment:(id)comment from:(int)from userParam:(id)param;
-(int)likeWithPhotoModel:(id)photoModel;
-(int)quote:(id)quote userParam:(id)param;
-(int)share:(id)share content:(id)content userParam:(id)param;
-(int)forward:(id)forward content:(id)content userParam:(id)param;
-(int)replyPassiveFeed:(id)feed comment:(id)comment reply:(id)reply replyContent:(id)content userParam:(id)param;
-(int)replyComment:(id)comment content:(id)content comment:(id)comment3 reply:(id)reply from:(int)from userParam:(id)param;
-(int)replyMessage:(id)message owner:(long long)owner content:(id)content userParam:(id)param from:(int)from;
-(int)commentFeedDetail:(id)detail comment:(id)comment userParam:(id)param;
-(int)commentPassiveFeed:(id)feed comment:(id)comment from:(int)from userParam:(id)param;
-(int)commentFriendFeed:(id)feed comment:(id)comment from:(int)from userParam:(id)param;
-(int)like:(id)like from:(int)from;
-(BOOL)saveDetailFeed:(id)feed;
-(id)readLastUseAlbumWithGroupCode:(long long)groupCode;
-(BOOL)saveLastUseAlbum:(id)album groupCode:(long long)code;
-(id)readLastUseAlbum;
-(BOOL)saveLastUseAlbum:(id)album;
-(BOOL)removeWriteMoodDraft;
-(id)getWriteMoodDraft;
-(BOOL)saveWriteMoodDraft:(id)draft;
-(void)requestSearchNearPoiList:(id)list keyWord:(id)word POITypes:(id)types sortType:(int)type radius:(unsigned)radius reqPage:(unsigned)page reqNum:(unsigned)num;
-(void)requestGetNearPoiList:(id)list POITypes:(id)types sortType:(int)type radius:(int)radius reqPage:(int)page reqNum:(int)num;
-(void)getLocationWithFromInfo:(int)info forceRefresh:(BOOL)refresh;
-(void)getLocation:(id)location;
-(BOOL)isAbleLocate;
-(void)stopLocate;
-(void)startLocate;
-(int)addCommentWithGroupCode:(long long)groupCode FeedModel:(id)model comment:(id)comment from:(int)from userParam:(id)param;
-(int)getPhotoListEx:(long long)ex albumid:(id)albumid needleft:(BOOL)needleft needright:(BOOL)needright curlloc:(id)curlloc url:(id)url type:(int)type busiParam:(id)param userParam:(id)param9;
-(id)getLocalGroupPhotoListWithGroupCode:(long long)groupCode albumID:(id)anId userParam:(id)param;
-(int)getGroupPhotoListWithGroupCode:(long long)groupCode albumID:(id)anId more:(BOOL)more isNeedLocal:(BOOL)local busiParam:(id)param;
-(id)getDefaultAlbumIdWithGroupCode:(long long)groupCode;
-(int)getGroupAlbumListWithGroupCode:(long long)groupCode more:(BOOL)more isNeedLocal:(BOOL)local busiParam:(id)param;
-(int)createAlbum:(long long)album albumName:(id)name albumDescription:(id)description busiParam:(id)param;
-(int)getDetailCommentWithGroupCode:(long long)groupCode feedModel:(id)model index:(int)index more:(BOOL)more;
-(int)getDetailWithGroupCode:(long long)groupCode feedModel:(id)model from:(int)from;
@end

@interface QzonePhotoModel : NSObject <NSCoding, NSCopying> {
@private
	long long uin;
	long long groupCode;
	NSString* albumID;
	int type;
	NSString* title;
	NSString* desc;
	NSString* sloc;
	NSString* lloc;
	NSString* orignalURL;
	NSString* bigURL;
	NSString* thumbURL;
	int width;
	int height;
	int uploadtime;
	int commentNum;
	int shareNum;
	int praiseNum;
	BOOL mePraise;
	NSString* unikey;
	NSString* curkey;
	int appid;
	int independentUGC;
	int opSyncFlag;
	NSMutableDictionary* busiParam;
	int feedLevel;
}
@property(assign, nonatomic) int feedLevel;
@property(retain, nonatomic) NSMutableDictionary* busiParam;
@property(assign, nonatomic) int opSyncFlag;
@property(assign, nonatomic) int independentUGC;
@property(assign, nonatomic) int appid;
@property(retain, nonatomic) NSString* curkey;
@property(retain, nonatomic) NSString* unikey;
@property(assign, nonatomic) BOOL mePraise;
@property(assign, nonatomic) int praiseNum;
@property(assign, nonatomic) int shareNum;
@property(assign, nonatomic) int commentNum;
@property(assign, nonatomic) int uploadtime;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) NSString* thumbURL;
@property(retain, nonatomic) NSString* bigURL;
@property(retain, nonatomic) NSString* orignalURL;
@property(retain, nonatomic) NSString* lloc;
@property(retain, nonatomic) NSString* sloc;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* albumID;
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) long long uin;
-(BOOL)compareTo:(id)to;
-(BOOL)isEqual:(id)equal;
-(BOOL)checkIsSamePhotoByURL:(id)url another:(id)another;
-(BOOL)checkHasSubURL:(id)url part:(id)part;
-(id)convertToQzoneFeedModel:(int)qzoneFeedModel ownernick:(id)ownernick;
-(id)getContentText;
-(id)getPhotoDesc;
-(id)getPhotoLBS;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QZAlbumAttribute : NSObject {
	NSString* _albumID;
	NSString* _name;
	NSString* _des;
	int _limit;
	NSString* _question;
	NSString* _answer;
}
@property(assign, nonatomic) int limit;
@property(retain, nonatomic) NSString* answer;
@property(retain, nonatomic) NSString* question;
@property(retain, nonatomic) NSString* des;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* albumID;
-(void)dealloc;
@end

@interface QZDraftWriteMood : NSObject <NSCoding, NSCopying> {
	NSDictionary* _atDict;
@private
	BOOL syncToQQ;
	BOOL syncToWeibo;
	NSString* content;
	NSMutableArray* imageList;
}
@property(retain, nonatomic) NSMutableArray* imageList;
@property(retain, nonatomic) NSDictionary* atDict;
@property(retain, nonatomic) NSString* content;
@property(assign, nonatomic) BOOL syncToWeibo;
@property(assign, nonatomic) BOOL syncToQQ;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QZDraftImageModel : NSObject <NSCoding, NSCopying> {
@private
	UIImage* _thumbImage;
	NSString* _path;
	NSString* _uuid;
}
@property(retain, nonatomic) NSString* uuid;
@property(retain, nonatomic) NSString* path;
@property(retain, nonatomic) UIImage* thumbImage;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface QzoneFeedAudio : NSObject <NSCoding, NSCopying> {
@private
	NSString* audioKey;
	int audioTime;
	NSString* errorMessage;
}
@property(retain, nonatomic) NSString* errorMessage;
@property(assign, nonatomic) int audioTime;
@property(retain, nonatomic) NSString* audioKey;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface QzoneFeedBuilder : NSObject {
}
+(map<int, std::basic_string<char>, std::less<int>, std::allocator<std::pair<const int, std::basic_string<char>>> >)busiParamWithDictionary:(id)dictionary;
+(id)groupAlbumInfoWithAlbumData:(Album*)albumData;
+(id)photoModelWithPicData:(s_picdata*)picData;
+(id)modelWithNewFeedDetail:(single_detail*)newFeedDetail;
+(id)modelWithNewFeed:(single_feed*)newFeed;
+(id)cellWithOriginal:(cell_original*)original;
+(id)cellWithContent:(cell_detail_content*)content;
+(id)cellWithLongTextContent:(cell_detail_content*)longTextContent;
+(id)cellWithLink:(cell_link*)link;
+(id)cellWithText:(cell_text*)text;
+(id)cellArrayWithLongText:(cell_text*)longText;
+(id)cellWithOperation:(cell_operation*)operation;
+(id)cellWithVisitor:(cell_visitor*)visitor;
+(id)cellWithForward:(cell_forward*)forward;
+(id)dataWithOutShare:(s_outshare*)outShare;
+(id)dataWithPicUrl:(s_picurl*)picUrl;
+(id)cellWithShare:(cell_share*)share;
+(id)cellWithLike:(cell_like*)like;
+(id)cellWithComment:(cell_comment*)comment;
+(id)cellWithRemark:(cell_remark*)remark;
+(id)cellWithLBS:(cell_lbs*)lbs;
+(id)cellWithMusic:(cell_music*)music;
+(id)cellWithLeftThumb:(cell_left_thumb*)leftThumb;
+(id)cellWithAudio:(cell_audio*)audio;
+(id)cellWithGift:(cell_gift*)gift;
+(id)cellWithVideo:(cell_video*)video;
+(id)cellWithPicture:(cell_pic*)picture;
+(id)cellWithSummary:(cell_summary*)summary;
+(id)cellWithTitle:(cell_title*)title;
+(id)cellWithID:(cell_id*)anId;
+(id)cellWithUser:(cell_userinfo*)user;
+(id)cellWithComm:(cell_comm*)comm;
+(id)pictureWithPicData:(s_picdata*)picData;
+(id)feedUserWithCUser:(s_user*)cuser;
@end

@interface QzoneFeedCellAudio : NSObject <NSCoding, NSCopying> {
@private
	NSMutableArray* audioList;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSMutableArray* audioList;
-(id)description;
-(id)initWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
@end

@interface QzoneFeedCellComm : NSObject <NSCoding, NSCopying> {
@private
	int appid;
	int subid;
	NSString* refer;
	NSDate* time;
	int actiontype;
	NSString* actionurl;
	int originaltype;
	int opmask;
	NSString* feedskey;
	NSString* orglikekey;
	NSString* curlikekey;
	int feedsAttri;
	NSString* ugcKey;
	NSString* clientKey;
	BOOL showLikeAnimation;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(assign, nonatomic) BOOL showLikeAnimation;
@property(retain, nonatomic) NSString* clientKey;
@property(retain, nonatomic) NSString* ugcKey;
@property(assign, nonatomic) int feedsAttri;
@property(retain, nonatomic) NSString* curlikekey;
@property(retain, nonatomic) NSString* orglikekey;
@property(retain, nonatomic) NSString* feedskey;
@property(assign, nonatomic) int opmask;
@property(assign, nonatomic) int originaltype;
@property(retain, nonatomic) NSString* actionurl;
@property(assign, nonatomic) int actiontype;
@property(retain, nonatomic) NSDate* time;
@property(retain, nonatomic) NSString* refer;
@property(assign, nonatomic) int subid;
@property(assign, nonatomic) int appid;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellComment : NSObject <NSCoding, NSCopying> {
@private
	int totalNum;
	NSMutableArray* commentList;
	QzoneFeedComment* mainComment;
	GALayoutInfo* info;
	int _commentOpenState;
	int _commentRequestState;
}
@property(assign, nonatomic) int commentRequestState;
@property(assign, nonatomic) int commentOpenState;
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) QzoneFeedComment* mainComment;
@property(retain, nonatomic) NSMutableArray* commentList;
@property(assign, nonatomic) int totalNum;
-(id)getCommentByClientId:(id)anId;
-(id)getCommentById:(id)anId;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellContent : NSObject <NSCoding, NSCopying> {
@private
	NSMutableArray* contentList;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSMutableArray* contentList;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellForward : NSObject <NSCoding, NSCopying> {
@private
	int totalNum;
}
@property(assign, nonatomic) int totalNum;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellGift : NSObject <NSCoding, NSCopying> {
@private
	NSArray* giftList;
}
@property(retain, nonatomic) NSArray* giftList;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellID : NSObject <NSCoding, NSCopying> {
@private
	NSString* cid;
	NSString* sid;
}
@property(retain, nonatomic) NSString* sid;
@property(retain, nonatomic) NSString* cid;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellLBS : NSObject <NSCoding, NSCopying> {
@private
	QzoneFeedGPS* gps;
	NSString* location;
}
@property(retain, nonatomic) NSString* location;
@property(retain, nonatomic) QzoneFeedGPS* gps;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellLike : NSObject <NSCoding, NSCopying> {
@private
	int totalNum;
	BOOL isliked;
	NSMutableArray* likeList;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSMutableArray* likeList;
@property(assign, nonatomic) BOOL isliked;
@property(assign, nonatomic) int totalNum;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellLink : NSObject <NSCoding> {
@private
	NSString* text;
	NSString* url;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* text;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QzoneFeedCellMusic : NSObject <NSCoding, NSCopying> {
@private
	NSArray* musicList;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSArray* musicList;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellOperation : NSObject <NSCoding, NSCopying> {
@private
	NSMutableDictionary* busiParam;
	NSString* weixinUrl;
	NSString* qqUrl;
	QzoneFeedOutShare* outShare;
}
@property(retain, nonatomic) QzoneFeedOutShare* outShare;
@property(retain, nonatomic) NSString* qqUrl;
@property(retain, nonatomic) NSString* weixinUrl;
@property(retain, nonatomic) NSMutableDictionary* busiParam;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellOriginal : NSObject <NSCoding, NSCopying> {
@private
	QzoneFeedCellComm* comm;
	QzoneFeedCellUser* user;
	QzoneFeedCellID* cid;
	QzoneFeedCellTitle* title;
	QzoneFeedCellSummary* summary;
	QzoneFeedCellPicture* picture;
	QzoneFeedCellMusic* music;
	QzoneFeedCellVideo* video;
	QzoneFeedCellGift* gift;
	QzoneFeedCellLBS* lbs;
	QzoneFeedCellRemark* remark;
	QzoneFeedCellComment* comment;
	QzoneFeedCellContent* content;
	QzoneFeedCellOperation* operation;
	QzoneFeedCellAudio* audio;
	QzoneFeedCellLeftThumb* leftThumb;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) QzoneFeedCellLeftThumb* leftThumb;
@property(retain, nonatomic) QzoneFeedCellAudio* audio;
@property(retain, nonatomic) QzoneFeedCellOperation* operation;
@property(retain, nonatomic) QzoneFeedCellContent* content;
@property(retain, nonatomic) QzoneFeedCellComment* comment;
@property(retain, nonatomic) QzoneFeedCellRemark* remark;
@property(retain, nonatomic) QzoneFeedCellLBS* lbs;
@property(retain, nonatomic) QzoneFeedCellGift* gift;
@property(retain, nonatomic) QzoneFeedCellVideo* video;
@property(retain, nonatomic) QzoneFeedCellMusic* music;
@property(retain, nonatomic) QzoneFeedCellPicture* picture;
@property(retain, nonatomic) QzoneFeedCellSummary* summary;
@property(retain, nonatomic) QzoneFeedCellTitle* title;
@property(retain, nonatomic) QzoneFeedCellID* cid;
@property(retain, nonatomic) QzoneFeedCellUser* user;
@property(retain, nonatomic) QzoneFeedCellComm* comm;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellPicture : NSObject <NSCoding, NSCopying> {
@private
	NSString* albumID;
	NSString* albumName;
	int albumNum;
	int uploadNum;
	int albumrights;
	NSString* albumquestion;
	NSString* albumanswer;
	NSString* albumDesc;
	NSMutableArray* pictureList;
	GALayoutInfo* info;
	int index;
	long long uin;
	BOOL bAlbum;
	int lastUpdateTime;
	long long groupCode;
}
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) int lastUpdateTime;
@property(assign, nonatomic) BOOL bAlbum;
@property(assign, nonatomic) long long uin;
@property(assign, nonatomic) int index;
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSMutableArray* pictureList;
@property(retain, nonatomic) NSString* albumDesc;
@property(retain, nonatomic) NSString* albumanswer;
@property(retain, nonatomic) NSString* albumquestion;
@property(assign, nonatomic) int albumrights;
@property(assign, nonatomic) int uploadNum;
@property(assign, nonatomic) int albumNum;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSString* albumID;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellRemark : NSObject <NSCoding, NSCopying> {
@private
	NSString* remark;
	NSString* remarkUp;
	NSString* remarkDown;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSString* remarkDown;
@property(retain, nonatomic) NSString* remarkUp;
@property(retain, nonatomic) NSString* remark;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellShare : NSObject <NSCoding, NSCopying> {
@private
	int totalNum;
}
@property(assign, nonatomic) int totalNum;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellSummary : NSObject <NSCoding, NSCopying> {
@private
	NSString* summary;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSString* summary;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellText : NSObject <NSCoding> {
@private
	NSString* text;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSString* text;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QzoneFeedCellTitle : NSObject <NSCoding, NSCopying> {
@private
	NSString* title;
	NSString* titleUrl;
	NSMutableArray* userList;
	int userNum;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(assign, nonatomic) int userNum;
@property(retain, nonatomic) NSMutableArray* userList;
@property(retain, nonatomic) NSString* titleUrl;
@property(retain, nonatomic) NSString* title;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellUser : NSObject <NSCoding, NSCopying> {
@private
	QzoneFeedUser* user;
	NSString* actionDesc;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSString* actionDesc;
@property(retain, nonatomic) QzoneFeedUser* user;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellVideo : NSObject <NSCoding, NSCopying> {
@private
	NSArray* videoList;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSArray* videoList;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedCellVisitor : NSObject <NSCoding, NSCopying> {
@private
	int viewCount;
	int visitorCount;
}
@property(assign, nonatomic) int visitorCount;
@property(assign, nonatomic) int viewCount;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface QzoneFeedComment : NSObject <NSCoding, NSCopying> {
@private
	NSString* commentID;
	QzoneFeedUser* user;
	NSString* content;
	NSDate* date;
	NSString* refer;
	int replyNum;
	NSMutableArray* replyList;
	NSMutableArray* pictureList;
	GALayoutInfo* info;
	NSString* clientKey;
}
@property(retain, nonatomic) NSString* clientKey;
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSMutableArray* pictureList;
@property(retain, nonatomic) NSMutableArray* replyList;
@property(assign, nonatomic) int replyNum;
@property(retain, nonatomic) NSString* refer;
@property(retain, nonatomic) NSDate* date;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) QzoneFeedUser* user;
@property(retain, nonatomic) NSString* commentID;
-(id)getReplyWithReplyId:(id)replyId clientKey:(id)key;
-(id)getReplyByReplyId:(id)anId;
-(id)getReplyByClientKey:(id)key;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(id)copyWithoutReplyList;
-(BOOL)enableAction;
-(void)dealloc;
@end

@interface QzoneFeedGift : NSObject <NSCoding> {
@private
	int type;
	NSString* giftID;
	NSString* backID;
	NSString* giftName;
	NSString* giftDesc;
	NSString* smallURL;
	NSString* bigURL;
	NSString* backURL;
	NSString* audioURL;
}
@property(retain, nonatomic) NSString* audioURL;
@property(retain, nonatomic) NSString* backURL;
@property(retain, nonatomic) NSString* bigURL;
@property(retain, nonatomic) NSString* smallURL;
@property(retain, nonatomic) NSString* giftDesc;
@property(retain, nonatomic) NSString* giftName;
@property(retain, nonatomic) NSString* backID;
@property(retain, nonatomic) NSString* giftID;
@property(assign, nonatomic) int type;
-(id)description;
-(id)initWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QzoneFeedGPS : NSObject <NSCoding, NSCopying> {
@private
	double latitude;
	double longitude;
	double altitude;
}
@property(assign, nonatomic) double altitude;
@property(assign, nonatomic) double longitude;
@property(assign, nonatomic) double latitude;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedLike : NSObject <NSCoding, NSCopying> {
@private
	QzoneFeedUser* user;
	NSString* refer;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSString* refer;
@property(retain, nonatomic) QzoneFeedUser* user;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedModel : NSObject <NSCoding, NSCopying> {
@private
	QzoneFeedCellComm* comm;
	QzoneFeedCellUser* user;
	QzoneFeedCellID* cid;
	QzoneFeedCellTitle* title;
	QzoneFeedCellSummary* summary;
	QzoneFeedCellPicture* picture;
	QzoneFeedCellMusic* music;
	QzoneFeedCellVideo* video;
	QzoneFeedCellGift* gift;
	QzoneFeedCellLBS* lbs;
	QzoneFeedCellRemark* remark;
	QzoneFeedCellComment* comment;
	QzoneFeedCellLike* like;
	QzoneFeedCellForward* forward;
	QzoneFeedCellVisitor* visitor;
	QzoneFeedCellShare* share;
	QzoneFeedCellOriginal* original;
	QzoneFeedCellContent* content;
	QzoneFeedCellOperation* operation;
	GALayoutInfo* info;
	BOOL isPassive;
	BOOL hasOperateButton;
	BOOL isFakeFeed;
	BOOL needFakeFeedAnimation;
	QzoneFeedCellAudio* audio;
	QzoneFeedCellLeftThumb* leftThumb;
	NSNumber* isBigPhotoLayoutMode;
	int feedLevel;
}
@property(retain, nonatomic) NSNumber* isBigPhotoLayoutMode;
@property(assign, nonatomic) int feedLevel;
@property(assign, nonatomic) BOOL isFakeFeed;
@property(assign, nonatomic) BOOL hasOperateButton;
@property(assign, nonatomic) BOOL isPassive;
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) QzoneFeedCellLeftThumb* leftThumb;
@property(retain, nonatomic) QzoneFeedCellAudio* audio;
@property(assign, nonatomic) BOOL needFakeFeedAnimation;
@property(retain, nonatomic) QzoneFeedCellOperation* operation;
@property(retain, nonatomic) QzoneFeedCellContent* content;
@property(retain, nonatomic) QzoneFeedCellOriginal* original;
@property(retain, nonatomic) QzoneFeedCellShare* share;
@property(retain, nonatomic) QzoneFeedCellVisitor* visitor;
@property(retain, nonatomic) QzoneFeedCellForward* forward;
@property(retain, nonatomic) QzoneFeedCellLike* like;
@property(retain, nonatomic) QzoneFeedCellComment* comment;
@property(retain, nonatomic) QzoneFeedCellRemark* remark;
@property(retain, nonatomic) QzoneFeedCellLBS* lbs;
@property(retain, nonatomic) QzoneFeedCellGift* gift;
@property(retain, nonatomic) QzoneFeedCellVideo* video;
@property(retain, nonatomic) QzoneFeedCellMusic* music;
@property(retain, nonatomic) QzoneFeedCellPicture* picture;
@property(retain, nonatomic) QzoneFeedCellSummary* summary;
@property(retain, nonatomic) QzoneFeedCellTitle* title;
@property(retain, nonatomic) QzoneFeedCellID* cid;
@property(retain, nonatomic) QzoneFeedCellUser* user;
@property(retain, nonatomic) QzoneFeedCellComm* comm;
-(BOOL)isForwardFeed;
-(BOOL)isMood;
-(BOOL)isBlog;
-(BOOL)enableDelReply;
-(BOOL)enableDelComment;
-(BOOL)compareWithUgcKey:(id)ugcKey clientKey:(id)key;
-(BOOL)compareToUniKey:(id)uniKey;
-(id)getSubKey:(int)key;
-(id)getPrimaryKey;
-(id)getIdentityFromURL:(id)url;
-(id)ugcKey;
-(id)clientKey;
-(void)traceSimpleInfo;
-(id)getPassiveCommentWithCmtId:(id)cmtId cmtClientId:(id)anId;
-(id)getCommentWithCmtId:(id)cmtId cmtClientId:(id)anId;
-(BOOL)removePhotoWithId:(id)anId;
-(int)getPhotoCount;
-(BOOL)delReplyForPassiveFeedWithCmtId:(id)cmtId cmtClientId:(id)anId replyId:(id)anId3 replyClientId:(id)anId4;
-(BOOL)delCommentForPassiveFeedWithCmtId:(id)cmtId cmtClientId:(id)anId;
-(BOOL)delReplyWithCmtId:(id)cmtId cmtClientId:(id)anId replyId:(id)anId3 replyClientId:(id)anId4;
-(BOOL)delCommentWithCmtId:(id)cmtId cmtClientId:(id)anId;
-(void)updateReplyForFeed:(id)feed commentId:(id)anId;
-(void)updateReplyForPassiveFeed:(id)passiveFeed;
-(void)updateCommentForPassiveFeed:(id)passiveFeed;
-(void)updateCommentForFeed:(id)feed;
-(void)updateLike:(id)like isLiked:(BOOL)liked loginUin:(long long)uin;
-(void)clearInfos;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedMusic : NSObject <NSCoding> {
@private
	NSString* musicID;
	NSString* musicURL;
	NSString* coverURL;
	int width;
	int height;
}
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) NSString* coverURL;
@property(retain, nonatomic) NSString* musicURL;
@property(retain, nonatomic) NSString* musicID;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QzoneFeedPicture : NSObject <NSCoding, NSCopying> {
@private
	NSString* albumID;
	NSString* sloc;
	NSString* lloc;
	NSString* hloc;
	int type;
	NSString* orignalURL;
	NSString* bigURL;
	NSString* mediumURL;
	NSString* smallURL;
	NSString* thumbURL;
	int width;
	int height;
	int hWidth;
	int hHeight;
	int mWidth;
	int mHeight;
	int tWidth;
	int tHeight;
	int sWidth;
	int sHeight;
	NSString* clientKey;
	BOOL isIndependentUgc;
	int opSynFlag;
	int uploadTime;
	long long uploadUin;
	GALayoutInfo* info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(assign, nonatomic) long long uploadUin;
@property(assign, nonatomic) int uploadTime;
@property(assign, nonatomic) int opSynFlag;
@property(assign, nonatomic) BOOL isIndependentUgc;
@property(retain, nonatomic) NSString* clientKey;
@property(assign, nonatomic) int tHeight;
@property(assign, nonatomic) int tWidth;
@property(assign, nonatomic) int sHeight;
@property(assign, nonatomic) int sWidth;
@property(assign, nonatomic) int mHeight;
@property(assign, nonatomic) int mWidth;
@property(assign, nonatomic) int hHeight;
@property(assign, nonatomic) int hWidth;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) NSString* thumbURL;
@property(retain, nonatomic) NSString* smallURL;
@property(retain, nonatomic) NSString* mediumURL;
@property(retain, nonatomic) NSString* bigURL;
@property(retain, nonatomic) NSString* orignalURL;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* hloc;
@property(retain, nonatomic) NSString* lloc;
@property(retain, nonatomic) NSString* sloc;
@property(retain, nonatomic) NSString* albumID;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedReply : NSObject <NSCoding, NSCopying> {
@private
	NSString* replyID;
	QzoneFeedUser* user;
	NSString* content;
	NSDate* date;
	NSString* refer;
	QzoneFeedUser* target;
	NSString* clientKey;
}
@property(retain, nonatomic) NSString* clientKey;
@property(retain, nonatomic) QzoneFeedUser* target;
@property(retain, nonatomic) NSString* refer;
@property(retain, nonatomic) NSDate* date;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) QzoneFeedUser* user;
@property(retain, nonatomic) NSString* replyID;
-(BOOL)enableAction;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface QzoneFeedUser : NSObject <NSCoding, NSCopying> {
@private
	long long uin;
	NSString* nickname;
	int timestamp;
	int from;
	NSString* uinkey;
	NSString* logo;
}
@property(retain, nonatomic) NSString* logo;
@property(retain, nonatomic) NSString* uinkey;
@property(assign, nonatomic) int from;
@property(assign, nonatomic) int timestamp;
@property(retain, nonatomic) NSString* nickname;
@property(assign, nonatomic) long long uin;
-(BOOL)isFromPenyou;
-(BOOL)checkIsQzoneUser;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedVideo : NSObject <NSCoding, NSCopying> {
@private
	NSString* videoID;
	NSString* videoURL;
	NSString* orignalURL;
	NSString* bigURL;
	NSString* mediumURL;
	NSString* smallURL;
	NSString* thumbURL;
	int width;
	int height;
	int actiontype;
	NSString* actionURL;
	BOOL isAdapted;
	int adaptedType;
	NSString* adaptedData;
	NSString* adaptedOrgUrl;
}
@property(retain, nonatomic) NSString* adaptedOrgUrl;
@property(retain, nonatomic) NSString* adaptedData;
@property(assign, nonatomic) int adaptedType;
@property(assign, nonatomic) BOOL isAdapted;
@property(retain, nonatomic) NSString* actionURL;
@property(assign, nonatomic) int actiontype;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) NSString* thumbURL;
@property(retain, nonatomic) NSString* smallURL;
@property(retain, nonatomic) NSString* mediumURL;
@property(retain, nonatomic) NSString* bigURL;
@property(retain, nonatomic) NSString* orignalURL;
@property(retain, nonatomic) NSString* videoURL;
@property(retain, nonatomic) NSString* videoID;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QzoneUserConfig : NSObject {
}
@end

@interface QzoneUserBirthInfo : NSObject <NSCoding> {
	int _birthMon;
	int _birthDay;
	int _birthMonLunar;
	int _birthDayLunar;
	NSString* _nickName;
}
@property(retain, nonatomic) NSString* nickName;
@property(assign, nonatomic) int birthDayLunar;
@property(assign, nonatomic) int birthMonLunar;
@property(assign, nonatomic) int birthDay;
@property(assign, nonatomic) int birthMon;
+(id)modelWithBirthInfo:(void*)birthInfo;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZProfileModel : NSObject <NSCoding> {
	long long uin;
	NSString* nickname;
	NSString* qzonename;
	unsigned char vip;
	unsigned char gender;
	unsigned char age;
	int birthday;
	NSString* astro;
	NSString* country;
	NSString* province;
	NSString* city;
	int viplevel;
	int sqqlevel;
	QZCountType* countType;
	QZHomePageVisit* visit;
	NSMutableArray* friendReqList;
	NSMutableArray* birthdayRemidList;
	QZHomePageRelationType* relationType;
	QZPartError* partError;
	BOOL _isFamousQzone;
}
@property(assign, nonatomic) BOOL isFamousQzone;
@property(retain, nonatomic) QZPartError* partError;
@property(retain, nonatomic) QZHomePageRelationType* relationType;
@property(retain, nonatomic) NSMutableArray* birthdayRemidList;
@property(retain, nonatomic) NSMutableArray* friendReqList;
@property(retain, nonatomic) QZHomePageVisit* visit;
@property(retain, nonatomic) QZCountType* countType;
@property(assign, nonatomic) int sqqlevel;
@property(assign, nonatomic) int viplevel;
@property(retain, nonatomic) NSString* city;
@property(retain, nonatomic) NSString* province;
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* astro;
@property(assign, nonatomic) int birthday;
@property(assign, nonatomic) unsigned char age;
@property(assign, nonatomic) unsigned char gender;
@property(assign, nonatomic) unsigned char vip;
@property(retain, nonatomic) NSString* qzonename;
@property(retain, nonatomic) NSString* nickname;
@property(assign, nonatomic) long long uin;
+(id)getHomePageList:(void*)list size:(int)size;
+(id)partErrorFromFeed:(void*)feed;
+(id)visitFromFeed:(void*)feed;
+(id)relationFromFeed:(void*)feed;
+(id)countTypeFromFeed:(void*)feed;
-(void)parserQZHomePageModelFromFeed:(void*)feed;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZUserType : NSObject <NSCoding> {
	long long uin;
	NSString* nickname;
	int from;
	unsigned vtime;
	NSString* uinkey;
	NSString* dateval;
	BOOL is_send;
	int comm_friend_num;
	NSString* profile_url;
	BOOL is_lunar;
	NSString* birthday_time;
	NSString* visit_info;
	QZLayoutInfo* info;
	BOOL _isFamousQzone;
}
@property(assign, nonatomic) BOOL isFamousQzone;
@property(retain, nonatomic) QZLayoutInfo* info;
@property(retain, nonatomic) NSString* visit_info;
@property(retain, nonatomic) NSString* birthday_time;
@property(assign, nonatomic) BOOL is_lunar;
@property(retain, nonatomic) NSString* profile_url;
@property(assign, nonatomic) int comm_friend_num;
@property(assign, nonatomic) BOOL is_send;
@property(retain, nonatomic) NSString* dateval;
@property(retain, nonatomic) NSString* uinkey;
@property(assign, nonatomic) unsigned vtime;
@property(assign, nonatomic) int from;
@property(retain, nonatomic) NSString* nickname;
@property(assign, nonatomic) long long uin;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZBirthdayReminder : NSObject <NSCoding> {
	int allnum;
	NSArray* dataList;
}
@property(retain, nonatomic) NSArray* dataList;
@property(assign, nonatomic) int allnum;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZCountType : NSObject <NSCoding> {
	int pic_allnum;
	int blog_allnum;
	int mood_allnum;
	int message_allnum;
}
@property(assign, nonatomic) int message_allnum;
@property(assign, nonatomic) int mood_allnum;
@property(assign, nonatomic) int blog_allnum;
@property(assign, nonatomic) int pic_allnum;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZHomePageRelationType : NSObject <NSCoding> {
	int relation;
	BOOL is_askfor_friend;
	int is_special;
	NSString* requestMessage;
	NSMutableArray* questions;
	NSString* levelMessage;
	BOOL _is_concerned;
	BOOL _is_black;
	BOOL _is_uncare;
	BOOL _is_realname;
	NSString* _addBlack_msg;
	NSString* _addSpecialFriToUncare_msg;
	NSString* _addUnSpecialFriToUncare_msg;
}
@property(retain, nonatomic) NSString* addUnSpecialFriToUncare_msg;
@property(retain, nonatomic) NSString* addSpecialFriToUncare_msg;
@property(retain, nonatomic) NSString* addBlack_msg;
@property(assign, nonatomic) BOOL is_realname;
@property(assign, nonatomic) BOOL is_uncare;
@property(assign, nonatomic) BOOL is_black;
@property(assign, nonatomic) BOOL is_concerned;
@property(retain, nonatomic) NSString* levelMessage;
@property(retain, nonatomic) NSMutableArray* questions;
@property(retain, nonatomic) NSString* requestMessage;
@property(assign, nonatomic) int is_special;
@property(assign, nonatomic) BOOL is_askfor_friend;
@property(assign, nonatomic) int relation;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
@end

@interface QZHomePageVisit : NSObject <NSCoding> {
	NSMutableArray* users;
	int nvnum;
}
@property(assign, nonatomic) int nvnum;
@property(retain, nonatomic) NSMutableArray* users;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZFriendReq : NSObject <NSCoding> {
	NSMutableArray* datalist;
}
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZPartError : NSObject <NSCoding> {
	BOOL is_happen;
	int errorType;
	NSString* part_error_msg;
}
@property(retain, nonatomic) NSString* part_error_msg;
@property(assign, nonatomic) int errorType;
@property(assign, nonatomic) BOOL is_happen;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZContactData : NSObject {
	BOOL _isSelected;
@private
	NSString* _nickName;
	NSString* _pyOfNickName;
	long long _uin;
	NSString* _uinKey;
	int _groupId;
	int _viplevel;
	int _sqqlevel;
	BOOL _specialCare;
}
@property(assign, nonatomic) BOOL specialCare;
@property(assign, nonatomic) int sqqlevel;
@property(assign, nonatomic) int viplevel;
@property(retain, nonatomic) NSString* pyOfNickName;
@property(retain, nonatomic) NSString* nickName;
@property(assign, nonatomic) int groupId;
@property(retain, nonatomic) NSString* uinKey;
@property(assign, nonatomic) long long uin;
@property(assign, nonatomic) BOOL isSelected;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface GroupRightInfo : NSObject <NSCoding> {
	int _groupId;
	int _seqId;
	NSString* _groupName;
	int _flag;
}
@property(retain, nonatomic) NSString* groupName;
@property(assign, nonatomic) int flag;
@property(assign, nonatomic) int seqId;
@property(assign, nonatomic) int groupId;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZNotificationAlbumList : QZNotificationAppList {
}
-(id)description;
-(void)dealloc;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action feedModelList:(id)list hasMore:(int)more remainCount:(int)count;
@end

@interface QZNotificationCreateAlbum : QZEngineNotificationInfoBase {
@private
	NSString* albumId;
	NSString* name;
}
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* albumId;
-(void)dealloc;
@end

@interface QZNotificationGetAlbumInfo : QZEngineNotificationInfoBase {
@private
	NSString* name;
	NSString* albumId;
	NSString* desc;
	int limit;
	NSString* question;
	NSString* answer;
}
@property(retain, nonatomic) NSString* answer;
@property(retain, nonatomic) NSString* question;
@property(assign, nonatomic) int limit;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* albumId;
@property(retain, nonatomic) NSString* name;
-(void)dealloc;
@end

@interface QZNotificationGetBatchPhotoList : QZEngineNotificationInfoBase {
@private
	NSMutableArray* photos;
}
@property(retain, nonatomic) NSMutableArray* photos;
-(void)dealloc;
@end

@interface QZNotificationGetPhotoList : QZEngineNotificationInfoBase {
@private
	NSMutableArray* photos;
	NSString* albumName;
	int photoCount;
	BOOL finished;
	BOOL privacy;
	BOOL allowShare;
}
@property(assign, nonatomic) BOOL allowShare;
@property(assign, nonatomic) BOOL privacy;
@property(assign, nonatomic) BOOL finished;
@property(assign, nonatomic) int photoCount;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSMutableArray* photos;
-(id)description;
-(void)dealloc;
@end

@interface QZNotificationGetPhotoListEx : QZEngineNotificationInfoBase {
@private
	NSMutableArray* photos;
	NSString* albumName;
	int photoCount;
	BOOL leftFinished;
	BOOL rightFinished;
	int index;
	int maxFetch;
	BOOL privacy;
	BOOL allowShare;
}
@property(assign, nonatomic) BOOL allowShare;
@property(assign, nonatomic) BOOL privacy;
@property(assign, nonatomic) int maxFetch;
@property(assign, nonatomic) int index;
@property(assign, nonatomic) BOOL rightFinished;
@property(assign, nonatomic) BOOL leftFinished;
@property(assign, nonatomic) int photoCount;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSMutableArray* photos;
-(void)dealloc;
@end

@interface QZNotificationReportUploadFinish : QZEngineNotificationInfoBase {
@private
	long long batchId;
}
@property(assign, nonatomic) long long batchId;
@end

@interface QZNotificationSetAlbum : QZEngineNotificationInfoBase {
@private
	NSString* albumId;
}
@property(retain, nonatomic) NSString* albumId;
-(void)dealloc;
@end

@interface QZNotificationUploadPhoto : QZEngineNotificationInfoBase {
@private
	QzoneFeedModel* feed;
	NSString* albumId;
	QzoneFeedModel* preFeed;
}
@property(retain, nonatomic) QzoneFeedModel* preFeed;
@property(retain, nonatomic) QzoneFeedModel* feed;
@property(retain, nonatomic) NSString* albumId;
-(void)dealloc;
@end

@interface QZNotificationBlogList : QZNotificationAppList {
}
-(void)dealloc;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action feedModelList:(id)list hasMore:(int)more remainCount:(int)count;
@end

@interface QZNotificationFeedComment : QZEngineNotificationInfoBase <NSCoding> {
@private
	QzoneFeedModel* feed;
	NSString* ugcKey;
	QzoneFeedComment* comment;
	int from;
}
@property(assign, nonatomic) int from;
@property(retain, nonatomic) QzoneFeedComment* comment;
@property(retain, nonatomic) NSString* ugcKey;
@property(retain, nonatomic) QzoneFeedModel* feed;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZNotificationFeedDelUgc : QZEngineNotificationInfoBase {
@private
	NSString* ugcKey;
	NSString* clientKey;
	NSString* photoId;
}
@property(retain, nonatomic) NSString* photoId;
@property(retain, nonatomic) NSString* clientKey;
@property(retain, nonatomic) NSString* ugcKey;
-(void)dealloc;
@end

@interface QZNotificationFeedLike : QZEngineNotificationInfoBase {
@private
	QzoneFeedModel* feed;
	NSString* ugcKey;
	BOOL isLiked;
	QzoneFeedLike* like;
}
@property(retain, nonatomic) QzoneFeedLike* like;
@property(assign, nonatomic) BOOL isLiked;
@property(retain, nonatomic) NSString* ugcKey;
@property(retain, nonatomic) QzoneFeedModel* feed;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZNotificationFeedReply : QZEngineNotificationInfoBase <NSCoding> {
@private
	QzoneFeedModel* feed;
	NSString* ugcKey;
	NSString* cmtId;
	QzoneFeedReply* reply;
}
@property(retain, nonatomic) QzoneFeedReply* reply;
@property(retain, nonatomic) NSString* cmtId;
@property(retain, nonatomic) NSString* ugcKey;
@property(retain, nonatomic) QzoneFeedModel* feed;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface QZNotificationForwardFeed : QZEngineNotificationInfoBase {
@private
	QzoneFeedModel* feed;
}
@property(retain, nonatomic) QzoneFeedModel* feed;
-(void)dealloc;
@end

@interface QZNotificationGetFriendFeeds : QZEngineNotificationInfoBase {
@private
	NSMutableArray* feeds;
	int unreadNum;
	BOOL hasMore;
}
@property(assign, nonatomic) BOOL hasMore;
@property(assign, nonatomic) int unreadNum;
@property(retain, nonatomic) NSMutableArray* feeds;
-(void)dealloc;
@end

@interface QZNotificationGetPassiveFeeds : QZEngineNotificationInfoBase {
@private
	NSMutableArray* feeds;
	int unreadNum;
	BOOL hasMore;
}
@property(assign, nonatomic) BOOL hasMore;
@property(assign, nonatomic) int unreadNum;
@property(retain, nonatomic) NSMutableArray* feeds;
-(void)dealloc;
@end

@interface QZNotificationGetProfileFeeds : QZEngineNotificationInfoBase {
@private
	NSMutableArray* feeds;
	int unreadNum;
	BOOL hasMore;
	long long _uin;
}
@property(assign, nonatomic) BOOL hasMore;
@property(assign, nonatomic) int unreadNum;
@property(retain, nonatomic) NSMutableArray* feeds;
@property(assign, nonatomic) long long uin;
-(void)dealloc;
@end

@interface QZNotificationGetUndealCount : QZEngineNotificationInfoBase {
@private
	int _activeCount;
	int _passiveCount;
	int _nextTimeout;
	long long _lastUin;
	long long _passiveLastUin;
}
@property(assign, nonatomic) long long passiveLastUin;
@property(assign, nonatomic) long long lastUin;
@property(assign, nonatomic) int nextTimeout;
@property(assign, nonatomic) int passiveCount;
@property(assign, nonatomic) int activeCount;
@end

@interface QZNotificationQuote : QZEngineNotificationInfoBase {
@private
	QzoneFeedModel* feed;
}
@property(retain, nonatomic) QzoneFeedModel* feed;
-(void)dealloc;
@end

@interface QZNotificationShare : QZEngineNotificationInfoBase {
@private
	QzoneFeedModel* feed;
}
@property(retain, nonatomic) QzoneFeedModel* feed;
-(void)dealloc;
@end

@interface QZNotificationGetPersonalProfile : QZEngineNotificationInfoBase {
@private
	long long uin;
	QZProfileModel* profile;
}
@property(retain, nonatomic) QZProfileModel* profile;
@property(assign, nonatomic) long long uin;
-(void)dealloc;
@end

@interface QZNotificationMessageList : QZNotificationAppList {
}
-(void)dealloc;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action feedModelList:(id)list hasMore:(int)more remainCount:(int)count;
@end

@interface QZNotificationMessageDetail : QZNotificationAppDetail {
}
-(void)dealloc;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action feedModel:(id)model hasMore:(int)more;
@end

@interface QZNotificationMessageReplyList : QZEngineNotificationInfoBase {
}
@end

@interface QZNotificationPostMessage : QZEngineNotificationInfoBase {
	QzoneFeedModel* _feedModel;
}
@property(readonly, assign, nonatomic) QzoneFeedModel* feedModel;
-(void)dealloc;
-(id)initSuccessWithRequestID:(int)requestID action:(int)action feedModel:(id)model;
@end

@interface QZNotificationReplyMessage : QZEngineNotificationInfoBase {
@private
	QzoneFeedModel* feed;
	NSString* uniKey;
	QzoneFeedComment* comment;
}
@property(retain, nonatomic) QzoneFeedComment* comment;
@property(retain, nonatomic) NSString* uniKey;
@property(retain, nonatomic) QzoneFeedModel* feed;
-(void)dealloc;
@end

@interface QZNotificationFakeWriteMood : QZEngineNotificationInfoBase {
@private
	QzoneFeedModel* feed;
}
@property(retain, nonatomic) QzoneFeedModel* feed;
-(void)dealloc;
@end

@interface QZNotificationMoodList : QZNotificationAppList {
}
-(void)dealloc;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action feedModelList:(id)list hasMore:(int)more remainCount:(int)count;
@end

@interface QZNotificationMoodWrite : QZEngineNotificationInfoBase {
@private
	QzoneFeedModel* fakeFeed;
}
@property(retain, nonatomic) QzoneFeedModel* fakeFeed;
-(void)dealloc;
@end

@interface QZEngineNotificationInfoBase : NSObject {
	int _qzoneType;
	int _requestID;
	int _action;
	int _error;
	NSString* _msg;
	NSDictionary* _userParam;
}
@property(readonly, assign, nonatomic) BOOL isNetError;
@property(retain, nonatomic) NSDictionary* userParam;
@property(retain, nonatomic) NSString* msg;
@property(assign, nonatomic) int error;
@property(assign, nonatomic) int action;
@property(assign, nonatomic) int requestID;
@property(assign, nonatomic) int qzoneType;
-(id)description;
-(void)dealloc;
-(id)initFailedWithRequestID:(int)requestID action:(int)action error:(int)error msg:(id)msg;
-(id)initLocalWithRequestID:(int)requestID action:(int)action;
-(id)initSuccessWithRequestID:(int)requestID action:(int)action;
-(id)initWithError:(int)error msg:(id)msg;
-(id)initWithLocal;
-(id)initWithSuccess;
-(id)init;
@end

@interface QZNotificationSimpleInfo : QZEngineNotificationInfoBase {
}
@end

@interface QZoneNotificationObservers : NSObject {
	NSMutableDictionary* _notifySelectors;
	BOOL _notifyOnlyTopView;
}
@property(assign, nonatomic) BOOL notifyOnlyTopView;
-(id)getNames;
-(SEL)getNotifySelector:(id)selector;
-(void)setSelectors:(id)selectors;
-(void)addSelector:(SEL)selector forName:(id)name;
-(void)dealloc;
-(id)init;
@end

@interface PlayAudio : NSObject <AVAudioPlayerDelegate, MQZTQRecorderManagerDelegate> {
	int _playStatus;
	int _audioIndex;
	NSString* _amrUUID;
	AVAudioPlayer* _audioPlayer;
	NSString* _audioURL;
	NSURLConnection* _downConnection;
	NSMutableData* _downRevData;
	UIActivityIndicatorView* downloadingIndicator;
	id<PlayAudioDelegate> _playAudioDelegate;
	NSString* _cid;
	NSDate* _beginDate;
	NSDate* _endDate;
	int _statusCode;
@private
	id obj;
}
@property(retain, nonatomic) id obj;
@property(assign, nonatomic) int playStatus;
@property(assign, nonatomic) int audioIndex;
@property(retain, nonatomic) NSString* cid;
@property(assign, nonatomic) id<PlayAudioDelegate> playAudioDelegate;
@property(retain, nonatomic) NSURLConnection* downConnection;
@property(retain, nonatomic) NSString* audioURL;
@property(retain, nonatomic) NSString* amrUUID;
+(id)shareInstance;
-(void)WillEnterBackground;
-(void)WillResignActive;
-(void)createDirectory;
-(id)getAudioFilePath;
-(void)TQRecorderManagerGetLevel:(float)level;
-(void)TQRecorderManagerSwitchToHeadPhoneSession;
-(void)callBackDelegate;
-(void)stopAudio;
-(void)playAudio:(id)audio;
-(void)qqVoicePlayEnd:(id)end;
-(void)qqVoicePlayStart:(id)start;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)audioPlayerDecodeErrorDidOccur:(id)audioPlayerDecodeError error:(id)error;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
-(void)downAudioError:(id)error;
-(void)playingAudio:(id)audio;
-(void)playLocalAudio:(id)audio;
-(int)getAudioTypeBySuffix:(id)suffix;
-(int)getAudioType:(id)type;
-(void)downloadAudio:(id)audio;
-(void)playMp3:(id)a3;
-(void)playAction;
-(void)resetforNextPlay;
-(void)stopPlaying;
-(void)dealloc;
-(id)init;
@end

@interface QZAlbumEngine : QZEngineBase {
}
+(id)instance;
-(void)didMessageChangeState:(id)state;
-(int)reportUploadFinishWithBatchId:(long long)batchId albumType:(int)type handset:(int)handset albumId:(id)anId total:(int)total succ:(int)succ retryCount:(int)count clientKey:(id)key;
-(void)reportUploadFinishDelay:(id)delay;
-(int)getBatchPhotoList:(long long)list albumid:(id)albumid flag:(int)flag batchid:(id)batchid password:(id)password;
-(int)getPhotoListEx:(long long)ex albumid:(id)albumid needleft:(BOOL)needleft needright:(BOOL)needright password:(id)password curlloc:(id)curlloc url:(id)url swidth:(int)swidth sheight:(int)sheight busiParam:(id)param appid:(int)appid curid:(id)curid;
-(int)getPhotoList:(long long)list albumid:(id)albumid pstart:(int)pstart pnum:(int)pnum password:(id)password curlloc:(id)curlloc swidth:(int)swidth sheight:(int)sheight busiParam:(id)param;
-(int)getPhotoCountInAlbum:(id)album albumType:(id)type;
-(int)setAlbum:(id)album name:(id)name desc:(id)desc limit:(int)limit question:(id)question answer:(id)answer;
-(int)createAlbum:(id)album desc:(id)desc limit:(int)limit question:(id)question answer:(id)answer;
-(int)getAlbumInfo:(id)info;
-(id)init;
@end

@interface QZoneFeedCovert : NSObject {
}
+(id)convertFullPassiveToFakeDetailModel:(id)fakeDetailModel;
+(id)convertActiveToDetailModel:(id)detailModel;
+(id)convertPassiveToDetailModel:(id)detailModel;
@end

@interface QZoneFeedDetailEngine : QZEngineBase <QZoneFeedDetailManagerDelegate> {
	NSMutableDictionary* _detailParams;
	NSMutableArray* _detailManagerArray;
}
+(id)instance;
-(void)didUpdateFeedDetailCommentFailure:(id)failure error:(id)error;
-(void)didUpdateFeedDetailFailure:(id)failure error:(id)error;
-(void)didUpdateFeedDetailLikeSucceed:(id)succeed;
-(void)didUpdateFeedDetailCommentsSucceed:(id)succeed newCommentsCount:(int)count;
-(void)didUpdateFeedDetailSucceed:(id)succeed newCommentsCount:(int)count;
-(void)postFailedSeeMoreCommentsNotificationWithUin:(long long)uin requestID:(int)anId feedModel:(id)model action:(int)action error:(int)error andDescription:(id)description;
-(void)postSuccessSeeMoreCommentsNotificationWithUin:(long long)uin requestID:(int)anId action:(int)action feedModel:(id)model hasMore:(int)more beginIndex:(int)index count:(int)count manager:(id)manager;
-(void)postFailedDetailNotificationWithUin:(long long)uin requestID:(int)anId action:(int)action Error:(int)error andDescription:(id)description;
-(void)postLocalDetailNotificationWithUin:(long long)uin feedModel:(id)model;
-(void)postSuccessDetailNotificationWithUin:(long long)uin requestID:(int)anId action:(int)action feedModel:(id)model hasMore:(int)more beginIndex:(int)index count:(int)count;
-(int)getDetailCommentWithUin:(long long)uin feedModel:(id)model index:(int)index more:(BOOL)more;
-(int)seeMoreFeedCommentsWithUin:(long long)uin feedModel:(id)model more:(BOOL)more type:(int)type;
-(int)getDetailCommentWithUin:(long long)uin feedModel:(id)model more:(BOOL)more;
-(int)getDetailWithUin:(long long)uin feedModel:(id)model from:(int)from cached:(BOOL)cached;
-(id)getLocalDetailFeedWithUin:(long long)uin feedModel:(id)model;
-(int)getDetailWithQQUrl:(id)qqurl from:(int)from;
-(id)getDetailParamsForUin:(long long)uin appID:(int)anId cellID:(id)anId3;
-(BOOL)removeDetailManager:(id)manager;
-(void)setDetailParamsForUin:(long long)uin appID:(int)anId cellID:(id)anId3 params:(id)params;
-(void)dealloc;
-(id)init;
@end

@interface QZoneFeedDetailManager : NSObject {
	NSMutableArray* _commentMessages;
	id<QZoneFeedDetailManagerDelegate> _delegate;
	QzoneFeedModel* _feedModel;
	NSMutableDictionary* _param;
	int _hasmore;
	int _index;
	long long _uin;
	long long _groupCode;
	NSString* _groupKey;
	BOOL _requestMore;
	int _requestID;
	BOOL _forDetail;
@private
	NSString* refer;
}
@property(retain, nonatomic) NSString* refer;
@property(assign, nonatomic) BOOL forDetail;
@property(assign, nonatomic) int requestID;
@property(retain, nonatomic) NSString* groupKey;
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) long long uin;
@property(assign, nonatomic) int index;
@property(readonly, assign, nonatomic) int hasmore;
@property(retain, nonatomic) NSMutableDictionary* param;
@property(retain, nonatomic) QzoneFeedModel* feedModel;
@property(assign, nonatomic) id<QZoneFeedDetailManagerDelegate> delegate;
-(void)didMessageChangeState:(id)state;
-(void)clearFeedDetailComment;
-(int)seeMoreFeedComments:(BOOL)comments;
-(int)getFeedDetailComment:(BOOL)comment;
-(int)getFeedDetail;
-(int)getFeedDetailWithQQUrl:(id)qqurl;
-(void)cancelCommentRequests;
-(void)reset;
-(void)dealloc;
-(id)init;
@end

@interface QZoneFeedListEngine : QZEngineBase {
	NSMutableDictionary* _attachInfoList;
}
+(id)instance;
-(void)didMessageChangeState:(id)state;
-(int)getListWithUin:(long long)uin appId:(int)anId notifyName:(id)name more:(BOOL)more isNeedLocal:(BOOL)local params:(id)params;
-(int)sendMessage:(long long)message appId:(int)anId notifyName:(id)name count:(int)count more:(BOOL)more params:(id)params;
-(void)setAttachInfo:(long long)info appId:(int)anId attach:(id)attach;
-(id)getAttachInfo:(long long)info appId:(int)anId;
-(void)appendToLocalList:(int)localList list:(id)list;
-(void)setLocalList:(int)list list:(id)list2;
-(id)getLocalList:(int)list;
-(void)filterAlbumList:(id)list;
-(void)dealloc;
-(id)init;
@end

@interface QZoneFeedOperateEngine : QZEngineBase {
	NSMutableDictionary* _feedModelList;
	NSMutableDictionary* _feedFromList;
}
+(id)instance;
-(void)didMessageChangeState:(id)state;
-(int)delReplyWithFeedModel:(id)feedModel comment:(id)comment reply:(id)reply;
-(int)delCommentWithFeedModel:(id)feedModel comment:(id)comment;
-(int)delUgcWithFeedModel:(id)feedModel photoIndex:(int)index;
-(int)adaptVideo:(id)video;
-(void)postFailedMessageNotificationWithRequestID:(int)requestID action:(int)action Error:(int)error andDescription:(id)description userParam:(id)param;
-(void)postSuccessMessageNotificationWithRequestID:(int)requestID feed:(id)feed action:(int)action userParam:(id)param;
-(int)postMessage:(id)message forUin:(long long)uin userParam:(id)param;
-(int)quote:(id)quote content:(id)content otherParams:(id)params userParam:(id)param;
-(int)share:(id)share content:(id)content otherParams:(id)params userParam:(id)param;
-(int)forward:(id)forward content:(id)content otherParams:(id)params userParam:(id)param;
-(int)operateFeed:(id)feed operateType:(int)type content:(id)content otherParams:(id)params userParam:(id)param;
-(int)addReplyWithPassiveFeedModel:(id)passiveFeedModel comment:(id)comment reply:(id)reply replyContent:(id)content userParam:(id)param;
-(void)postFailedAddReplyNotification:(id)notification Error:(int)error andDescription:(id)description userParam:(id)param;
-(void)postSuccessAddReplyNotification:(id)notification feed:(id)feed type:(int)type userParam:(id)param;
-(id)postFakeReplyNotification:(int)notification feed:(id)feed cmtId:(id)anId content:(id)content type:(int)type target:(id)target userParam:(id)param;
-(int)addReplyWithFeedModel:(id)feedModel replyContent:(id)content comment:(id)comment reply:(id)reply from:(int)from userParam:(id)param;
-(void)postFailedReplyMessageNotification:(id)notification Error:(int)error andDescription:(id)description userParam:(id)param;
-(void)postSuccessReplyMessageNotification:(id)notification feed:(id)feed commentID:(id)anId userParam:(id)param;
-(id)postFakeReplyMessageNotification:(int)notification feed:(id)feed content:(id)content userParam:(id)param;
-(int)addReplyMessage:(id)message uin:(long long)uin content:(id)content from:(int)from userParam:(id)param;
-(void)postFailedAddCommentNotification:(id)notification Error:(int)error andDescription:(id)description userParam:(id)param;
-(void)postSuccessCommentNotification:(id)notification feed:(id)feed fakeInfo:(id)info commentID:(id)anId userParam:(id)param;
-(id)postFakeCommentNotification:(int)notification feed:(id)feed content:(id)content from:(int)from filter:(int)filter action:(int)action userParam:(id)param;
-(int)addCommentWithFeedModel:(id)feedModel comment:(id)comment isPassive:(BOOL)passive from:(int)from forType:(int)type userParam:(id)param;
-(void)removeDraft:(id)draft;
-(int)addCommentWithFeedModel:(id)feedModel comment:(id)comment isPassive:(BOOL)passive from:(int)from userParam:(id)param;
-(void)postFailedLikeNotification:(int)notification feedModel:(id)model from:(int)from Error:(int)error andDescription:(id)description;
-(void)postSuccessLikeNotificationWithUin:(long long)uin requestID:(int)anId feed:(id)feed action:(int)action;
-(void)postLocalLikeNotification:(id)notification isLiked:(BOOL)liked action:(int)action;
-(int)likeFeedWithFeedModel:(id)feedModel isLike:(BOOL)like from:(int)from;
-(void)makeFakeReplyFeed:(id)feed reply:(id)reply cmtId:(id)anId type:(int)type filter:(int)filter;
-(id)fakeInfoWithReply:(id)reply target:(id)target index:(int)index type:(int)type filter:(int)filter;
-(void)updateFakeCommentFeed:(id)feed from:(int)from filter:(int)filter comment:(id)comment;
-(id)fakeInfoWithComment:(id)comment type:(int)type filter:(int)filter;
-(void)updateCache:(id)cache from:(int)from filter:(int)filter whenActiveFeed:(id)feed;
-(void)dealloc;
-(id)init;
@end

@interface QZoneFeedRequestManager : NSObject {
	NSMutableArray* _requests;
}
+(void)exit;
+(id)instance;
-(void)sendNotification:(id)notification;
-(void)didMessageChangeState:(id)state;
-(BOOL)checkForSendAgain:(id)sendAgain;
-(id)trySendRequest:(id)request;
-(id)adaptVideo:(id)video video:(id)video2;
-(id)doGetSignInfo:(id)info toSign:(BOOL)sign;
-(id)doInviteOpenSpace:(id)space uin:(long long)uin;
-(id)doSetisReceiveSpecialCare:(id)care isReceivePush:(id)push;
-(id)doGetisReceiveSpecialCare:(id)care;
-(id)doSetSpecialFrdListRequest:(id)request actionType:(int)type uinList:(id)list;
-(id)doGetSpecialFrdListRequest:(id)request;
-(id)doDelFriendRequest:(id)request friendUin:(long long)uin;
-(id)doRefuseFriendRequest:(id)request friendUin:(long long)uin message:(id)message;
-(id)doAgreeFriendRequest:(id)request friendUin:(long long)uin friendNickname:(id)nickname groupID:(long long)anId;
-(id)doGetFriendRequestList:(id)list vistorUin:(long long)uin;
-(id)doAddFriend:(id)aFriend friendUin:(long long)uin gid:(int)gid msg:(id)msg answer:(id)answer type:(int)type;
-(id)doQueryAddAuth:(id)auth friendUin:(long long)uin;
-(id)deletePortrait:(id)portrait albumID:(id)anId photoID:(id)anId3;
-(id)getPortraitLists:(id)lists uin:(long long)uin;
-(id)requestVerifyRights:(id)rights friendUin:(long long)uin question:(id)question answer:(id)answer;
-(id)getPersonalProfile:(id)profile uin:(long long)uin visituin:(long long)visituin params:(id)params;
-(id)cutDevictToken:(id)token uid:(id)uid;
-(id)postDevictToken:(id)token token:(id)token2;
-(id)doLevelMessage:(id)message guestUin:(long long)uin content:(id)content;
-(id)addReply:(id)reply feedModel:(id)model reply:(id)reply3 comment:(id)comment;
-(id)addReply:(id)reply feedModel:(id)model reply:(id)reply3;
-(id)delReply:(id)reply feedModel:(id)model comment:(id)comment reply:(id)reply4;
-(id)delComment:(id)comment feedModel:(id)model comment:(id)comment3;
-(id)delugc:(id)delugc feedModel:(id)model;
-(id)addReferComment:(id)comment feedModel:(id)model comment:(id)comment3;
-(id)addComment:(id)comment feedModel:(id)model comment:(id)comment3;
-(id)addReply:(id)reply feedModel:(id)model message:(id)message uin:(long long)uin;
-(id)like:(id)like feedModel:(id)model isLike:(BOOL)like3;
-(id)writeMood:(id)mood content:(id)content verified:(BOOL)verified syncToWeibo:(BOOL)weibo syncToSign:(BOOL)sign mediaType:(int)type lbs:(double*)lbs lbsAddress:(id)address pictureList:(id)list videoInfo:(id)info busiParam:(id)param;
-(id)forwardFeed:(id)feed feedModel:(id)model reason:(id)reason;
-(id)operateFeed:(id)feed feedModel:(id)model operateType:(int)type busiInfo:(id)info;
-(void)removeMessagesOfRequestor:(id)requestor;
-(id)addRequestAndSend:(id)send msg:(id)msg;
-(void)dealloc;
-(id)init;
@end

@interface QZFakeFeedEngine : QZEngineBase {
	int opIndex_;
	BOOL isLike_;
	NSString* opContent_;
}
+(id)instance;
-(id)getFakeFeedList;
-(id)getFeedWithUgcKey:(id)ugcKey;
-(id)getFeedWithClientKey:(id)clientKey;
-(void)removeFeedWithClientKey:(id)clientKey notify:(BOOL)notify;
-(void)addFeed:(id)feed withClientKey:(id)clientKey;
-(BOOL)postFakeReplyWithFeedModel:(id)feedModel index:(int)index content:(id)content target:(id)target;
-(BOOL)postFakeCommmentWithFeedModel:(id)feedModel content:(id)content commentId:(id)anId;
-(BOOL)postFakeLike:(id)like;
-(BOOL)fakeUploadPhotosWithFeed:(id)feed withClientKey:(id)clientKey;
-(BOOL)fakeUploadPhotos:(id)photos albumId:(id)anId albumName:(id)name desc:(id)desc withClientKey:(id)clientKey gpsInfo:(id)info lbsAddress:(id)address;
-(BOOL)fakeWriteMoodWithFeed:(id)feed withClientKey:(id)clientKey requestID:(int)anId;
-(BOOL)fakeWriteMoodWithContent:(id)content photos:(id)photos withClientKey:(id)clientKey gpsInfo:(id)info lbsAddress:(id)address;
-(id)genFakeLike;
-(id)genFakeReplyWithContent:(id)content target:(id)target;
-(id)genFakeCommmentWithContent:(id)content commentId:(id)anId;
-(id)genClientKey;
-(void)updateLikeData:(id)data isLike:(BOOL)like;
-(void)updateReplyDataForDetail:(id)detail content:(id)content index:(int)index target:(id)target;
-(void)updateReplyDataForPassiveFeed:(id)passiveFeed content:(id)content target:(id)target;
-(void)updateCommentDataForDetail:(id)detail content:(id)content;
-(void)updateCommentDataForDetail:(id)detail content:(id)content commentId:(id)anId;
-(void)updateReferCommentDataForFeed:(id)feed content:(id)content;
-(void)updateCommentDataForFeed:(id)feed content:(id)content;
-(void)updateUploadPhotosForFeed:(id)feed albumId:(id)anId albumName:(id)name pictureList:(id)list desc:(id)desc clientKey:(id)key gpsInfo:(id)info lbsAddress:(id)address;
-(void)updateMoodDataForFeed:(id)feed content:(id)content pictureList:(id)list clientKey:(id)key gpsInfo:(id)info lbsAddress:(id)address;
-(void)updateMessageDataForFeed:(id)feed content:(id)content;
@end

@interface QZFeedEngine : QZEngineBase {
	NSOperationQueue* _operationQuqeue;
@private
	int friendFeedType;
}
@property(assign, nonatomic) int friendFeedType;
+(id)instance;
-(void)didMessageChangeState:(id)state;
-(int)setHomePageCover:(id)cover;
-(int)getHomePageCover:(id)cover;
-(int)getUndealCount;
-(unsigned long)getNewFriendFeedLastTime;
-(unsigned long)getNewPassiveFeedLastTime;
-(int)getProfileFeeds:(BOOL)feeds forOwner:(long long)owner params:(id)params;
-(int)getPassiveFeeds:(BOOL)feeds params:(id)params;
-(BOOL)getLocalPassiveFeedFeeds;
-(int)getFriendFeeds:(BOOL)feeds params:(id)params;
-(void)delelteLocalFriendFeedsWithUin:(long long)uin;
-(BOOL)getLocalFriendFeeds;
-(id)init;
@end

@interface QZHomePageEngine : QZEngineBase {
}
+(id)instance;
-(void)didMessageChangeState:(id)state;
-(void)processRespondOfSetCover:(id)setCover;
-(void)processRespondOfGetCover:(id)getCover;
-(id)getLocalSettingsWithKey:(id)key;
-(void)saveLocalSettings:(id)settings withKey:(id)key;
-(id)updateBlackList:(id)list actionType:(int)type;
-(void)saveLocalBlackListSettings:(id)settings;
-(id)getLocalBlackListSettings;
-(id)updateUncareList:(id)list actionType:(int)type;
-(void)addUinList:(id)list to:(id)to;
-(void)removeUinList:(id)list from:(id)from;
-(void)saveLocalUncareListSettings:(id)settings;
-(id)getLocalUncareListSettings;
-(void)saveLocalSpaceRightSettings:(id)settings;
-(id)getLocalSpaceRightSettings;
-(void)processRespondOfGetSpaceRight:(id)getSpaceRight;
-(void)processRespondOfSetSpaceRight:(id)setSpaceRight;
-(void)processRespondOfSetBlack:(id)setBlack;
-(void)processRespondOfGetBlackList:(id)getBlackList;
-(void)notifyLocalBlackList:(id)list;
-(void)processRespondOfSetUncare:(id)setUncare;
-(void)processRespondOfGetUncareList:(id)getUncareList;
-(void)notifyLocalUncareList:(id)list;
-(void)processRespondOfVerifyRights:(id)verifyRights;
-(int)setConcern:(BOOL)concern objuin:(long long)objuin;
-(int)getSpaceRight:(int)right userParam:(id)param;
-(int)setSpaceRightWithSeq:(int)seq right:(int)right userParam:(id)param;
-(int)getBlackList:(id)list;
-(int)getUnCareList:(id)list;
-(int)setBlackListActionType:(int)type uinList:(id)list userParam:(id)param;
-(int)setUnCareListActionType:(int)type uinList:(id)list userParam:(id)param;
-(int)requestVerifyRightsWithfriendUin:(long long)uin question:(id)question answer:(id)answer;
-(int)setHomePageCover:(id)cover;
-(int)getHomePageCover:(id)cover;
-(int)getPersonalProfile:(long long)profile params:(id)params;
-(int)getLocalPersonalProfile:(long long)profile;
@end

@interface QZMoodEngine : QZEngineBase <IAccountChangedObsever> {
}
+(id)instance;
-(void)postFaildWriteMoodNotificationWithRequestID:(int)requestID action:(int)action Error:(int)error andDescription:(id)description clientKey:(id)key;
-(void)postSuccessWriteMoodNotificationWithRequestID:(int)requestID content:(id)content fakeFeed:(id)feed pictureList:(id)list action:(int)action clientKey:(id)key;
-(void)didMessageChangeState:(id)state;
-(int)sendMoodWithContent:(id)content verified:(BOOL)verified syncToWeibo:(BOOL)weibo syncToSign:(BOOL)sign mediaType:(int)type lbs:(double*)lbs lbsAddress:(id)address pictureList:(id)list videoInfo:(id)info clientKey:(id)key;
-(void)onAccountLogout;
-(void)onAccountLogin;
-(id)createMoodTaskModelWithContent:(id)content verified:(BOOL)verified syncToWeibo:(BOOL)weibo syncToSign:(BOOL)sign mediaType:(int)type gpsInfo:(id)info lbsAddress:(id)address pictureList:(id)list videoInfo:(id)info9;
-(int)writeMoodWithContent:(id)content atDict:(id)dict verified:(BOOL)verified syncToWeibo:(BOOL)weibo syncToSign:(BOOL)sign gpsInfo:(id)info lbsAddress:(id)address pictureList:(id)list videoInfo:(id)info9;
-(void)dealloc;
-(id)init;
@end

@interface QZEngineBase : NSObject {
}
+(void)notify:(id)notify withData:(id)data;
+(id)instance;
-(void)appendReferInfo:(id)info from:(int)from;
-(id)getReferStringOfType:(int)type;
-(void)delayNotifyWithParam:(id)param;
-(void)notify:(id)notify withData:(id)data delay:(double)delay;
-(void)notify:(id)notify withData:(id)data;
-(void)cancelRequest:(int)request;
-(id)getAtStringFromUser:(id)user;
-(id)getCurrentUserNickName;
-(long long)getDraftCurrentUin;
-(long long)getCurrentUin;
@end

@interface QZServerList : NSObject {
	NSString* _ip;
	NSString* _host;
}
@property(retain, nonatomic) NSString* host;
@property(retain, nonatomic) NSString* ip;
-(void)dealloc;
@end

@interface QZServerListEngine : NSObject {
	NSMutableArray* _dlserverList;
	NSMutableArray* _otherList;
	NSMutableArray* _fmtPicDownloadList;
	NSMutableArray* _qzProxyServiceList;
	NSMutableDictionary* _serverListRecord;
	NSString* _qzProxyHost;
	BOOL _qzSvrNoError;
}
@property(retain, nonatomic) NSString* qzProxyHost;
+(id)shareInstance;
-(BOOL)isStringIPAdress:(id)adress;
-(void)handleQzoneProxyServerList:(id)list;
-(id)getAvailableServerDic:(id)dic;
-(id)getServerKey:(id)key;
-(void)setServerListFailed:(id)failed andError:(int)error;
-(id)getNextServerList:(int)list;
-(id)getHostName:(id)name;
-(void)onServerListUpdated;
-(void)dealloc;
-(id)init;
@end

@interface QZoneNetwork : NSObject <IAccountChangedObsever> {
@private
	QZoneNetworkMSF* _subInstance;
}
@property(retain, nonatomic) QZoneNetworkMSF* subInstance;
+(id)instance;
-(void)onAccountLogout;
-(void)onAccountLogin;
-(id)networkType;
-(int)networkStatus;
-(void)cancelAllRequests;
-(void)cancelRequestWithUserData:(id)userData;
-(void)cancelRequestWithUserData:(id)userData clearDelegate:(BOOL)delegate;
-(int)sendRequest:(id)request andBodyData:(id)data andProxyData:(id)data3 andUserData:(id)data4 andDelegate:(id)delegate andParams:(id)params;
-(void)dealloc;
-(id)init;
@end

@interface QZBusinessMessage : NSObject <NSCoding> {
	BOOL _validateNet;
	BOOL _disabled;
	BOOL _async;
	BOOL _timeout;
	BOOL _cached;
	BOOL _sending;
	BOOL _isWUPPacket;
	NSTimer* _timer;
	float _seconds;
	unsigned _state;
	NSString* _message;
	NSDictionary* _parameters;
	NSDictionary* _response;
	NSObject* _delegate;
	QZBusinessEngine* _executer;
	NSString* _errorDomain;
	int _errorCode;
	NSString* _errorDesc;
	id _whenSending;
	id _whenSucceed;
	id _whenFailed;
	id _whenCancelled;
	double _initTimeStamp;
	double _sendTimeStamp;
	double _recvTimeStamp;
	NSMutableString* _traceInfo;
	void* _userData;
	void* _userData2;
	MQZStatisticsProtocol* _reportData;
	int _reTry;
	int _requestID;
	NSString* _server;
	BOOL _enableRetry;
	QZWnsRetryInfo* _retryInfo;
}
@property(retain, nonatomic) QZWnsRetryInfo* retryInfo;
@property(retain, nonatomic) NSString* server;
@property(readonly, assign, nonatomic) int requestID;
@property(assign, nonatomic) int reTry;
@property(retain, nonatomic) MQZStatisticsProtocol* reportData;
@property(assign, nonatomic) void* userData2;
@property(assign, nonatomic) void* userData;
@property(retain, nonatomic) NSMutableString* traceInfo;
@property(assign, nonatomic) double recvTimeStamp;
@property(assign, nonatomic) double sendTimeStamp;
@property(assign, nonatomic) double initTimeStamp;
@property(copy, nonatomic) id whenCancelled;
@property(copy, nonatomic) id whenFailed;
@property(copy, nonatomic) id whenSucceed;
@property(copy, nonatomic) id whenSending;
@property(retain, nonatomic) NSString* errorDesc;
@property(assign, nonatomic) int errorCode;
@property(retain, nonatomic) NSString* errorDomain;
@property(retain, nonatomic) NSDictionary* response;
@property(assign, nonatomic) QZBusinessEngine* executer;
@property(retain, nonatomic) NSDictionary* parameters;
@property(retain, nonatomic) NSString* message;
@property(assign, nonatomic) unsigned state;
@property(assign, nonatomic) NSObject* delegate;
@property(assign, nonatomic) float seconds;
@property(assign, nonatomic) BOOL isWUPPacket;
@property(assign, nonatomic) BOOL sending;
@property(assign, nonatomic) BOOL cached;
@property(assign, nonatomic) BOOL timeout;
@property(assign, nonatomic) BOOL async;
@property(assign, nonatomic) BOOL disabled;
@property(assign, nonatomic) BOOL validateNet;
+(void)cancelMessageWithRequestID:(int)requestID;
+(id)message:(id)message responder:(id)responder timeoutSeconds:(unsigned)seconds;
+(id)message:(id)message responder:(id)responder;
-(id)cachedMessage;
-(double)timeCostOverAir;
-(double)timeCostPending;
-(void)reset;
-(void)cancel;
-(id)getShortCmdName;
-(void)send;
-(void)internalNotifyResponderCancelled;
-(void)appendTraceFormat:(id)format arguments:(void*)arguments;
-(void)appendTraceFormat:(id)format;
-(void)appendTraceStr:(id)str;
-(void)appendTraceTime;
-(id)visiableTimeString;
-(void)internalNotifyResponderFailed;
-(void)internalNotifyResponderSucceed;
-(void)internalNotifyResponderSending;
-(void)internalStopTimer;
-(void)internalStartTimer;
-(void)didMessageTimeout;
-(void)dealloc;
-(id)init;
-(void)resetForOPBoxTask;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZCachedMessage : QZBusinessMessage {
}
-(void)cancel;
-(void)send;
-(void)internalStopTimer;
-(void)internalStartTimer;
@end

@interface QZBusinessEngine : NSObject <QZoneNetWorkDelegate> {
	id _whenRequest;
	id _whenResponseSucceed;
	id _whenResponseFailed;
	id _whenCancelled;
@private
	id whenRequest;
	id whenResponseSucceed;
	id whenResponseFailed;
	id whenCancelled;
}
@property(copy, nonatomic) id whenCancelled;
@property(copy, nonatomic) id whenResponseFailed;
@property(copy, nonatomic) id whenResponseSucceed;
@property(copy, nonatomic) id whenRequest;
+(void)cancelAllMessages;
+(void)cancelMessageWithRequestID:(int)requestID byEngine:(id)engine;
+(void)cancelMessageWithRequestID:(int)requestID byResponder:(id)responder;
+(void)disableResponder:(id)responder;
+(void)enableResponder:(id)responder;
+(void)cancelMessageWithRequestID:(int)requestID clearDelegate:(BOOL)delegate;
+(void)cancelMessageWithRequestID:(int)requestID;
+(void)removeMessage:(id)message;
+(id)retriveMessageWithRequestID:(int)requestID;
+(void)cancelMessage:(id)message byEngine:(id)engine;
+(void)cancelMessage:(id)message byResponder:(id)responder;
+(BOOL)sendMessage:(id)message;
+(id)getCurrentSid;
+(long long)getCurrentUin;
+(BOOL)networkAvailable;
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(id)handleRespPacket:(id)packet data:(id)data;
-(BOOL)handleRespPacket:(id)packet data:(id)data attribute:(void*)attribute;
-(BOOL)handleRespPacket:(id)packet data:(id)data busi:(void*)busi extra:(void*)extra;
-(BOOL)sendNew:(id)aNew cmd:(void*)cmd sendBuf:(id)buf targetUin:(long long)uin params:(id)params retryInfo:(id)info;
-(BOOL)sendNew:(id)aNew cmd:(void*)cmd attribute:(void*)attribute targetUin:(long long)uin params:(id)params retryInfo:(id)info;
-(BOOL)sendNew:(id)aNew cmd:(void*)cmd busi:(void*)busi extra:(void*)extra targetUin:(long long)uin params:(id)params retryInfo:(id)info;
-(BOOL)sendNew:(id)aNew cmd:(void*)cmd attribute:(void*)attribute targetUin:(long long)uin params:(id)params;
-(void)setB2Header:(void*)header attr:(void*)attr seq:(int)seq targetUin:(long long)uin;
-(void)didRequestCancel:(id)cancel;
-(void)didRequestError:(id)error withError:(int)error2;
-(void)didRequestFinish:(id)finish withData:(id)data;
-(int)convertError:(int)error;
-(id)getErrorDesc:(int)desc;
-(BOOL)processCancelled:(id)cancelled;
-(BOOL)processResponseFailed:(id)failed withError:(int)error andDomain:(id)domain andDescription:(id)description;
-(BOOL)isNeedReportBizCode:(int)code;
-(BOOL)processWnsResponseFailed:(id)failed withError:(int)error andDomain:(id)domain andDescription:(id)description;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(BOOL)notDoError:(id)error;
-(void)dealloc;
-(id)init;
-(void)cancelAllMessages;
-(void)cancelMessageWithRequestID:(int)requestID byEngine:(id)engine;
-(void)cancelMessageWithRequestID:(int)requestID byResponder:(id)responder;
-(void)disableResponder:(id)responder;
-(void)enableResponder:(id)responder;
-(void)cancelMessageWithRequestID:(int)requestID clearDelegate:(BOOL)delegate;
-(void)cancelMessageWithRequestID:(int)requestID;
-(void)cancelMessage:(id)message clearDelegate:(BOOL)delegate;
-(void)cancleMessage:(id)message;
-(void)setBusinessMsgTraceInfo:(id)info;
-(void)removeMessage:(id)message;
-(id)retriveMessageWithRequestID:(int)requestID;
-(BOOL)sendMessage:(id)message;
@end

@interface QZBusinessEngineAppList : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(BOOL)getAppList:(id)list responed:(id)responed;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)delVisitor:(id)visitor;
-(BOOL)getVisitorList:(id)list;
-(BOOL)getAppList:(id)list;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface QZBusinessEngineCommInterface : NSObject {
}
+(id)networkType;
+(int)networkStatus;
+(void)cancelAllRequests;
+(void)cancelRequestWithUserData:(id)userData clearDelegate:(BOOL)delegate;
+(void)cancelRequestWithUserData:(id)userData;
+(BOOL)sendRequest:(id)request andUserData:(id)data target:(id)target params:(id)params;
@end

@interface QZBusinessEngineDummy : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(BOOL)processCancelled:(id)cancelled;
-(BOOL)processResponseFailed:(id)failed withError:(int)error andDomain:(id)domain andDescription:(id)description;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface QZBusinessEngineFeed : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(BOOL)getUndealCount:(id)count responed:(id)responed;
-(BOOL)DoWithExtraBuf:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>*)extraBuf;
-(BOOL)getNewFeedDetailMqq:(id)mqq responed:(id)responed;
-(BOOL)getNewFeedDetail:(id)detail responed:(id)responed;
-(BOOL)getProfileFeeds:(id)feeds responed:(id)responed;
-(BOOL)getNewPassiveFeed:(id)feed responed:(id)responed;
-(BOOL)getNewFriendFeed:(id)feed responed:(id)responed;
-(BOOL)getUndealCount:(id)count;
-(BOOL)getNewFeedDetail:(id)detail;
-(BOOL)getFeedDetailByMqq:(id)mqq;
-(BOOL)getProfileFeeds:(id)feeds;
-(BOOL)getNewPassiveFeed:(id)feed;
-(BOOL)getNewFriendFeed:(id)feed;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface QZBusinessEngineHomePage : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(BOOL)setConcern:(id)concern responed:(id)responed;
-(BOOL)setCover:(id)cover responsed:(id)responsed;
-(BOOL)processGetHpgCover:(id)cover responed:(id)responed;
-(BOOL)setSpaceRight:(id)right responed:(id)responed;
-(BOOL)getSpaceRight:(id)right responed:(id)responed;
-(BOOL)getBlackList:(id)list responsed:(id)responsed;
-(BOOL)getUnCareList:(id)list responsed:(id)responsed;
-(BOOL)setBlackList:(id)list responsed:(id)responsed;
-(BOOL)setUnCareList:(id)list responsed:(id)responsed;
-(BOOL)verifyQuestionAnwser:(id)anwser responed:(id)responed;
-(BOOL)getMainPage:(id)page responed:(id)responed;
-(BOOL)setSpaceRight:(id)right;
-(BOOL)getSpaceRight:(id)right;
-(BOOL)setBlackList:(id)list;
-(BOOL)getBlackList:(id)list;
-(BOOL)setUnCareList:(id)list;
-(BOOL)getUnCaredList:(id)list;
-(BOOL)getHpgCover:(id)cover;
-(BOOL)setCover:(id)cover;
-(BOOL)setConcern:(id)concern;
-(BOOL)verifyQuestionAnwser:(id)anwser;
-(BOOL)getMainPage:(id)page;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface QZBusinessEngineOP : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(BOOL)postMessage:(id)message responed:(id)responed;
-(BOOL)newOpWriteMood:(id)mood responed:(id)responed;
-(BOOL)newOpForward:(id)forward responed:(id)responed;
-(BOOL)newOpAddReply:(id)reply responed:(id)responed;
-(BOOL)newOpDelReply:(id)reply responed:(id)responed;
-(BOOL)newOpDelComment:(id)comment responed:(id)responed;
-(BOOL)newOpDelUgc:(id)ugc responed:(id)responed;
-(BOOL)newOpAddComment:(id)comment responed:(id)responed;
-(BOOL)newOpLike:(id)like responed:(id)responed;
-(BOOL)postMessage:(id)message;
-(BOOL)newOpWriteMood:(id)mood;
-(BOOL)newOpForward:(id)forward;
-(BOOL)newOpAddReply:(id)reply;
-(BOOL)newOpDelReply:(id)reply;
-(BOOL)newOpDelComment:(id)comment;
-(BOOL)newOpDelUgc:(id)ugc;
-(BOOL)newOpAddComment:(id)comment;
-(BOOL)newOpLike:(id)like;
-(void)showFailMessage:(id)message errorCode:(int)code;
-(void)showSuccMessage:(id)message;
-(void)showFailMessage;
-(void)showSuccMessage;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface QZBusinessEnginePhoto : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(BOOL)uploadPhotoFinish:(id)finish responed:(id)responed;
-(BOOL)uploadPhotoFinish:(id)finish;
-(BOOL)getPhotoCountInAlbum:(id)album responed:(id)responed;
-(BOOL)getPhotoCountInAlbum:(id)album;
-(BOOL)setNewAlbum:(id)album responed:(id)responed;
-(BOOL)setNewAlbum:(id)album;
-(BOOL)createNewAlbum:(id)album responed:(id)responed;
-(BOOL)createNewAlbum:(id)album;
-(BOOL)getNewAlbumInfo:(id)info responed:(id)responed;
-(BOOL)getNewAlbumInfo:(id)info;
-(BOOL)getNewBatchPhotoList:(id)list responed:(id)responed;
-(BOOL)getNewPhotoListEx:(id)ex responed:(id)responed;
-(BOOL)getNewPhotoList:(id)list responed:(id)responed;
-(BOOL)getNewBatchPhotoList:(id)list;
-(BOOL)getNewPhotoListEx:(id)ex;
-(BOOL)getNewPhotoList:(id)list;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface QZWUPHelper : NSObject {
}
+(BOOL)decodeAttributeWithPacket:(UniPacket<taf::BufferWriter, taf::BufferReader, std::allocator>)packet attribute:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>*)attribute;
+(BOOL)decodePackageWithData:(id)data packet:(UniPacket<taf::BufferWriter, taf::BufferReader, std::allocator>*)packet;
+(id)encodePackageWithUIN:(long long)uin andServant:(id)servant andFunction:(id)function andSID:(id)sid andData:(const char*)data andLength:(unsigned)length andMask:(unsigned)mask callBack:(id)back;
+(id)encodePackageWithUIN:(long long)uin andServant:(id)servant andFunction:(id)function andSID:(id)sid andData:(const char*)data andLength:(unsigned)length andMask:(unsigned)mask;
@end

@interface QZoneFMDatabase : NSObject {
	sqlite3* _db;
	NSString* _databasePath;
	BOOL _logsErrors;
	BOOL _crashOnErrors;
	BOOL _traceExecution;
	BOOL _checkedOut;
	BOOL _shouldCacheStatements;
	BOOL _isExecutingStatement;
	BOOL _inTransaction;
	int _busyRetryTimeout;
	NSMutableDictionary* _cachedStatements;
	NSMutableSet* _openResultSets;
	NSMutableSet* _openFunctions;
}
@property(retain) NSMutableDictionary* cachedStatements;
@property(assign) BOOL logsErrors;
@property(assign) BOOL crashOnErrors;
@property(assign) int busyRetryTimeout;
@property(assign) BOOL checkedOut;
@property(assign) BOOL traceExecution;
+(BOOL)isSQLiteThreadSafe;
+(id)sqliteLibVersion;
+(id)databaseWithPath:(id)path;
-(BOOL)isTable:(id)table hasColumn:(id)column;
-(void)makeFunctionNamed:(id)named maximumArguments:(int)arguments withBlock:(id)block;
-(void)setShouldCacheStatements:(BOOL)cacheStatements;
-(BOOL)shouldCacheStatements;
-(id)inSavePoint:(id)savePoint;
-(BOOL)rollbackToSavePointWithName:(id)name error:(id*)error;
-(BOOL)releaseSavePointWithName:(id)name error:(id*)error;
-(BOOL)startSavePointWithName:(id)name error:(id*)error;
-(BOOL)inTransaction;
-(BOOL)beginTransaction;
-(BOOL)beginDeferredTransaction;
-(BOOL)commit;
-(BOOL)rollback;
-(BOOL)update:(id)update withErrorAndBindings:(id*)errorAndBindings;
-(BOOL)executeUpdateWithFormat:(id)format;
-(BOOL)executeUpdate:(id)update withParameterDictionary:(id)parameterDictionary;
-(BOOL)executeUpdate:(id)update withArgumentsInArray:(id)array;
-(BOOL)executeUpdate:(id)update;
-(BOOL)executeUpdate:(id)update error:(id*)error withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array;
-(id)executeQueryWithFormat:(id)format;
-(id)executeQuery:(id)query;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;
-(id)executeQuery:(id)query withParameterDictionary:(id)parameterDictionary;
-(BOOL)read:(sqlite3_stmt*)read dictArgs:(id)args arrayArgs:(id)args3 args:(void*)args4;
-(void)extractSQL:(id)sql argumentsList:(void*)list intoString:(id)string arguments:(id)arguments;
-(void)bindObject:(id)object toColumn:(int)column inStatement:(sqlite3_stmt*)statement;
-(int)changes;
-(long long)lastInsertRowId;
-(id)lastError;
-(id)errorWithMessage:(id)message;
-(int)lastErrorCode;
-(BOOL)hadError;
-(id)lastErrorMessage;
-(BOOL)databaseExists;
-(void)warnInUse;
-(BOOL)goodConnection;
-(BOOL)setKey:(id)key;
-(BOOL)rekey:(id)rekey;
-(void)setCachedStatement:(id)statement forQuery:(id)query;
-(id)cachedStatementForQuery:(id)query;
-(void)resultSetDidClose:(id)resultSet;
-(void)closeOpenResultSets;
-(BOOL)hasOpenResultSets;
-(void)clearCachedStatements;
-(BOOL)close;
-(BOOL)openWithFlags:(int)flags;
-(BOOL)open;
-(sqlite3*)sqliteHandle;
-(id)databasePath;
-(void)dealloc;
-(void)finalize;
-(id)initWithPath:(id)path;
@end

@interface QZoneFMStatement : NSObject {
	sqlite3_stmt* _statement;
	NSString* _query;
	long _useCount;
}
@property(assign) sqlite3_stmt* statement;
@property(retain) NSString* query;
@property(assign) long useCount;
-(id)description;
-(void)reset;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

@interface QZoneFMDatabasePool : NSObject {
	NSString* _path;
	dispatch_queue_s* _lockQueue;
	NSMutableArray* _databaseInPool;
	NSMutableArray* _databaseOutPool;
	id _delegate;
	unsigned _maximumNumberOfDatabasesToCreate;
}
@property(assign) unsigned maximumNumberOfDatabasesToCreate;
@property(assign) id delegate;
@property(retain) NSString* path;
+(id)databasePoolWithPath:(id)path;
-(id)inSavePoint:(id)savePoint;
-(void)inTransaction:(id)transaction;
-(void)inDeferredTransaction:(id)deferredTransaction;
-(void)beginTransaction:(BOOL)transaction withBlock:(id)block;
-(void)inDatabase:(id)database;
-(void)releaseAllDatabases;
-(unsigned)countOfOpenDatabases;
-(unsigned)countOfCheckedOutDatabases;
-(unsigned)countOfCheckedInDatabases;
-(id)db;
-(void)pushDatabaseBackInPool:(id)pool;
-(void)executeLocked:(id)locked;
-(void)dealloc;
-(id)initWithPath:(id)path;
@end

@interface QZoneFMDatabaseQueue : NSObject {
	NSString* _path;
	dispatch_queue_s* _queue;
	QZoneFMDatabase* _db;
}
@property(retain) NSString* path;
+(id)databaseQueueWithPath:(id)path;
-(id)inSavePoint:(id)savePoint;
-(void)inTransaction:(id)transaction;
-(void)inDeferredTransaction:(id)deferredTransaction;
-(void)beginTransaction:(BOOL)transaction withBlock:(id)block;
-(void)inDatabase:(id)database;
-(id)database;
-(void)close;
-(void)dealloc;
-(id)initWithPath:(id)path;
@end

@interface QZoneFMResultSet : NSObject {
	QZoneFMDatabase* _parentDB;
	QZoneFMStatement* _statement;
	NSString* _query;
	NSMutableDictionary* _columnNameToIndexMap;
	BOOL _columnNamesSetup;
}
@property(retain) QZoneFMStatement* statement;
@property(retain) NSMutableDictionary* columnNameToIndexMap;
@property(retain) NSString* query;
+(id)resultSetWithStatement:(id)statement usingParentDatabase:(id)database;
-(void)setParentDB:(id)db;
-(id)columnNameForIndex:(int)index;
-(id)objectForColumnName:(id)columnName;
-(id)objectForColumnIndex:(int)columnIndex;
-(const char*)UTF8StringForColumnName:(id)columnName;
-(const char*)UTF8StringForColumnIndex:(int)columnIndex;
-(BOOL)columnIsNull:(id)null;
-(BOOL)columnIndexIsNull:(int)null;
-(id)dataNoCopyForColumnIndex:(int)columnIndex;
-(id)dataNoCopyForColumn:(id)column;
-(id)dataForColumnIndex:(int)columnIndex;
-(id)dataForColumn:(id)column;
-(id)dateForColumnIndex:(int)columnIndex;
-(id)dateForColumn:(id)column;
-(id)stringForColumn:(id)column;
-(id)stringForColumnIndex:(int)columnIndex;
-(double)doubleForColumnIndex:(int)columnIndex;
-(double)doubleForColumn:(id)column;
-(BOOL)boolForColumnIndex:(int)columnIndex;
-(BOOL)boolForColumn:(id)column;
-(unsigned long long)unsignedLongLongIntForColumnIndex:(int)columnIndex;
-(unsigned long long)unsignedLongLongIntForColumn:(id)column;
-(long long)longLongIntForColumnIndex:(int)columnIndex;
-(long long)longLongIntForColumn:(id)column;
-(long)longForColumnIndex:(int)columnIndex;
-(long)longForColumn:(id)column;
-(int)intForColumnIndex:(int)columnIndex;
-(int)intForColumn:(id)column;
-(int)columnIndexForName:(id)name;
-(BOOL)hasAnotherRow;
-(BOOL)next;
-(id)resultDictionary;
-(id)resultDict;
-(void)kvcMagic:(id)magic;
-(void)setupColumnNames;
-(int)columnCount;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

@interface QzoneAppListCache : NSObject <IAccountChangedObsever> {
	long long _uin;
	int _appid;
	NSString* _fileName;
}
@property(assign, nonatomic) int appid;
@property(assign, nonatomic) long long uin;
+(id)sharedInstanceForUIN:(long long)uin appId:(int)anId;
+(void)cleanCacheForUIN:(long long)uin;
-(void)onAccountLogout;
-(void)onAccountLogin;
-(void)cacheAppList:(id)list;
-(id)getCachedAppList;
-(void)dealloc;
-(id)initWithUIN:(long long)uin appId:(int)anId;
-(void)cacheAppListToFile:(id)file;
-(id)loadAppListFromFile;
-(id)getCacheFilePath;
@end

@interface QZoneDraftCache : NSObject {
}
+(id)instance;
-(id)getLastUseAlbumFile:(long long)file groupCode:(long long)code;
-(id)readLastUseAlbum:(long long)album groupCode:(long long)code;
-(BOOL)saveLastUseAlbum:(id)album loginUin:(long long)uin groupCode:(long long)code;
-(BOOL)deleteLastUseAlbum:(long long)album groupCode:(long long)code;
-(id)getLastUseAlbumFile:(long long)file;
-(id)readLastUseAlbum:(long long)album;
-(BOOL)saveLastUseAlbum:(id)album loginUin:(long long)uin;
-(BOOL)deleteLastUseAlbum:(long long)album;
-(BOOL)removeWriteMoodDraft:(long long)draft;
-(id)getWriteMoodDraft:(long long)draft;
-(BOOL)saveWriteMoodDraft:(id)draft loginUin:(long long)uin;
-(id)getCacheFile:(long long)file;
@end

@interface QZoneFeedCache : GAMultiThreadObject <IAccountChangedObsever> {
	NSMutableDictionary* _feeds;
	NSMutableDictionary* _feedParams;
	int _friendPageNum;
	int _passivePageNum;
	int _selfPageNum;
	NSOperationQueue* _operationQuqeue;
	int _currentUin;
@private
	NSString* file;
	QZoneFMDatabase* database;
	NSString* profileAttach;
}
@property(retain, nonatomic) QZoneFMDatabase* database;
@property(retain, nonatomic) NSString* file;
@property(retain, nonatomic) NSString* profileAttach;
+(id)instance;
-(int)getFeedsRefreshTime:(int)time;
-(void)updateParamTable:(id)table type:(int)type;
-(id)queryParamTable:(int)table;
-(void)createParamTable;
-(void)dropFeedTable:(int)table;
-(void)deleteFeedTableLimit:(int)limit;
-(void)deleteFeedTable:(id)table filterType:(int)type;
-(void)deleteFeedTable:(int)table;
-(void)updateFeedTable:(id)table filterType:(int)type;
-(void)updateFeedTableList:(id)list filterType:(int)type;
-(id)queryFeedTable:(int)table;
-(void)createFeedTable:(int)table;
-(void)insertSeg:(int)seg;
-(void)insertSeg:(int)seg name:(id)name;
-(BOOL)hasMorePassiveFeeds;
-(BOOL)hasMoreFriendFeeds;
-(void)setFeedParam:(id)param type:(int)type;
-(id)getFeedParam:(int)param;
-(id)loadFeedParam:(int)param;
-(void)clearFeedList:(int)list;
-(void)clearFeedListCache:(int)cache;
-(void)updateCache:(id)cache filterType:(int)type;
-(void)updateFeedModel:(id)model filterType:(int)type;
-(id)getFeedByUniKey:(id)key filter:(int)filter;
-(id)getFeedList:(int)list;
-(void)addFeedList:(id)list type:(int)type;
-(void)setFeedList:(id)list type:(int)type;
-(void)writeFeedList:(id)list type:(int)type;
-(id)readFeedList:(int)list;
-(void)setPageNum:(int)num type:(int)type;
-(int)getPageNum:(int)num;
-(void)clear;
-(void)onAccountLogout;
-(void)onAccountLogin;
-(void)dealloc;
-(id)init;
-(void)reset;
@end

@interface QZNotificationAppList : QZEngineNotificationInfoBase {
	long long _uin;
	NSArray* _feedModelList;
	int _hasMore;
	int _remainCount;
}
@property(readonly, assign, nonatomic) int remainCount;
@property(readonly, assign, nonatomic) int hasMore;
@property(readonly, assign, nonatomic) NSArray* feedModelList;
@property(readonly, assign, nonatomic) long long uin;
-(void)dealloc;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action error:(int)error msg:(id)msg;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action feedModelList:(id)list hasMore:(int)more remainCount:(int)count;
@end

@interface QZNotificationAppDetail : QZEngineNotificationInfoBase {
	long long _uin;
	QzoneFeedModel* _feedModel;
	int _hasMore;
}
@property(readonly, assign, nonatomic) int hasMore;
@property(readonly, assign, nonatomic) QzoneFeedModel* feedModel;
@property(readonly, assign, nonatomic) long long uin;
-(void)dealloc;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action error:(int)error msg:(id)msg;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action feedModel:(id)model hasMore:(int)more;
@end

@interface QZNotificationFeedGetDetail : QZEngineNotificationInfoBase {
	long long _uin;
	QzoneFeedModel* _feedModel;
	int _hasMore;
	int _beginIndex;
	int _count;
}
@property(readonly, assign, nonatomic) int count;
@property(readonly, assign, nonatomic) int beginIndex;
@property(readonly, assign, nonatomic) int hasMore;
@property(readonly, assign, nonatomic) QzoneFeedModel* feedModel;
@property(readonly, assign, nonatomic) long long uin;
-(void)dealloc;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action error:(int)error msg:(id)msg;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action feedModel:(id)model hasMore:(int)more beginIndex:(int)index count:(int)count;
@end

@interface SBJSON : SBJsonBase <SBJsonParser, SBJsonWriter> {
@private
	SBJsonParser* jsonParser;
	SBJsonWriter* jsonWriter;
}
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
-(void)setMaxDepth:(unsigned)depth;
-(unsigned)maxDepth;
-(id)objectWithString:(id)string error:(id*)error;
-(id)fragmentWithString:(id)string error:(id*)error;
-(id)objectWithString:(id)string allowScalar:(BOOL)scalar error:(id*)error;
-(id)objectWithString:(id)string;
-(id)stringWithObject:(id)object error:(id*)error;
-(id)stringWithFragment:(id)fragment error:(id*)error;
-(id)stringWithObject:(id)object allowScalar:(BOOL)scalar error:(id*)error;
-(id)stringWithObject:(id)object;
-(void)dealloc;
-(id)init;
@end

@interface SBJsonBase : NSObject {
	NSMutableArray* errorTrace;
	unsigned depth;
	unsigned maxDepth;
}
@property(readonly, assign) NSArray* errorTrace;
@property(assign) unsigned maxDepth;
-(void)clearErrorTrace;
-(void)addErrorWithCode:(unsigned)code description:(id)description;
-(void)dealloc;
-(id)init;
@end

@interface SBJsonParser : SBJsonBase <SBJsonParser> {
@private
	const char* c;
}
+(void)initialize;
-(BOOL)scanIsAtEnd;
-(BOOL)scanNumber:(id*)number;
-(BOOL)scanHexQuad:(unsigned short*)quad;
-(BOOL)scanUnicodeChar:(unsigned short*)aChar;
-(BOOL)scanRestOfString:(id*)string;
-(BOOL)scanRestOfDictionary:(id*)dictionary;
-(BOOL)scanRestOfArray:(id*)array;
-(BOOL)scanRestOfNull:(id*)null;
-(BOOL)scanRestOfFalse:(id*)aFalse;
-(BOOL)scanRestOfTrue:(id*)aTrue;
-(BOOL)scanValue:(id*)value;
-(id)objectWithString:(id)string;
-(id)fragmentWithString:(id)string;
@end

@interface SBJsonWriter : SBJsonBase <SBJsonWriter> {
@private
	BOOL sortKeys;
	BOOL humanReadable;
}
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
+(void)initialize;
-(BOOL)appendString:(id)string into:(id)into;
-(BOOL)appendDictionary:(id)dictionary into:(id)into;
-(BOOL)appendArray:(id)array into:(id)into;
-(BOOL)appendValue:(id)value into:(id)into;
-(id)indent;
-(id)stringWithObject:(id)object;
-(id)stringWithFragment:(id)fragment;
@end

@interface MQZStatistics : NSObject {
}
+(id)getInstance;
-(void)onNetworkFlowReport:(id)report;
-(void)onAppEnterBackground:(id)background;
-(void)initialize;
-(void)dealloc;
-(id)init;
-(long)appFeedReport:(id)report actionType:(id)type;
-(double)getAppFeedExposureTime;
@end

@interface appFeedStatistic : NSObject {
@private
	NSMutableArray* _visitList;
	NSDate* _startTime;
}
@property(retain, nonatomic) NSDate* startTime;
@property(retain, nonatomic) NSMutableArray* visitList;
+(id)instance;
-(void)didMessageChangeState:(id)state;
-(int)reportAppFeedStatiscToServer;
-(int)reportAppFeed:(id)feed actionType:(id)type;
-(BOOL)needReportToServer;
-(void)removeMyObservers;
-(void)initMyObservers;
-(void)dealloc;
-(id)init;
@end

@interface QZBusinessEngineExtra : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(BOOL)adaptVideo:(id)video respond:(id)respond;
-(BOOL)adaptVideo:(id)video;
-(BOOL)visitReport:(id)report respond:(id)respond;
-(BOOL)visitReport:(id)report;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface AppDetailViewController : QZoneViewController <UIWebViewDelegate> {
	UIWebView* webview_;
	NSString* url_;
	NSString* uin_;
	NSString* qua_;
	double starttime_;
}
@property(assign, nonatomic) double starttime;
@property(retain, nonatomic) NSString* qua;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) UIWebView* webview;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)gotoApp:(id)app;
-(void)queryAppInstallState:(id)state withCallback:(id)callback;
-(void)report:(id)report;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface OpenPlatformAPI : NSObject {
}
+(id)getInstance;
-(void)clickFeedToAppDetailWithController:(id)controller withUrl:(id)url withParams:(id)params;
-(id)init;
@end

@interface OpenSDKURLConnection : NSURLConnection {
	BOOL isReportNewcache_;
	double starttime_;
	int reqsize_;
	int rspsize_;
}
@property(assign, nonatomic) int rspsize;
@property(assign, nonatomic) int reqsize;
@property(assign, nonatomic) double starttime;
@property(assign, nonatomic) BOOL isReportNewcache;
@end

@interface OpenSDKStatistics : NSObject <NSURLConnectionDelegate> {
	NSString* uin_;
	NSString* qua_;
	long long lastReportTime_;
	int totalCount_;
	BOOL hasOldData_;
	NSString* newcacheFilePath_;
	NSString* oldcacheFilePath_;
	NSString* backupData_;
}
@property(retain, nonatomic) NSString* backupData;
@property(retain, nonatomic) NSString* oldcacheFilePath;
@property(retain, nonatomic) NSString* newcacheFilePath;
@property(retain, nonatomic) NSString* qua;
@property(retain, nonatomic) NSString* uin;
+(id)getInstance;
-(id)getOldItems;
-(id)getNewItems;
-(BOOL)deleteNewItems;
-(BOOL)deleteOldItems;
-(BOOL)backupOldItems;
-(BOOL)addNewItemWithAppid:(id)appid withVia:(id)via withAct:(id)act;
-(void)updateCacheFileForValue:(id)value withVIA:(id)via withAct:(id)act withFilePath:(id)filePath;
-(id)getUinFromCacheFile:(id)cacheFile;
-(void)updateNewCacheFileForUin:(id)uin;
-(void)createOldCacheFileIfNotExist;
-(void)createNewCacheFileIfNotExist;
-(BOOL)availableForTime;
-(BOOL)availableForCount;
-(BOOL)availableForUinChange:(id)uinChange;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(BOOL)doUploadRequest;
-(id)packRequestData:(BOOL)data;
-(int)reportWithAppid:(id)appid withVIA:(id)via withActionType:(id)actionType withUin:(id)uin withQUA:(id)qua;
-(void)dealloc;
-(id)init;
@end

@interface MQZNetworkRequest : NSObject {
@private
	NSMutableDictionary* _userInfo;
	NSString* _url;
	int _seqId;
}
@property(assign, nonatomic) int seqId;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSMutableDictionary* userInfo;
+(id)requestWithUrl:(id)url;
-(void)dealloc;
-(id)initWithUrl:(id)url;
@end

@interface QZoneNetworkMSF : NSObject <IEngineDispatchDelegate> {
@private
	NSMutableDictionary* _requests;
}
@property(retain, nonatomic) NSMutableDictionary* requests;
+(id)instance;
-(id)networkType;
-(int)networkStatus;
-(void)notifyLocalError:(id)error;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(id)retrieveRequestWithUserData:(id)userData;
-(id)retrieveRequestWithSeq:(int)seq;
-(void)cancelAllRequests;
-(void)cancelRequestWithUserData:(id)userData clearDelegate:(BOOL)delegate;
-(int)sendRequest:(id)request andBodyData:(id)data andProxyData:(id)data3 andUserData:(id)data4 andDelegate:(id)delegate andParams:(id)params;
-(id)makeKey:(int)key;
-(BOOL)checkCmdRegistered:(id)registered;
-(void)unregisterFromMSF;
-(void)registerToMsf;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneSelectFriendViewController : SelectFriendViewController <ISelectFriendDataSource> {
	int _maxSelection;
	NSString* _maxSelTips;
	UILabel* _resultLabel;
	id<MQZoneSelectFriendViewDelegate> _selectionDelegate;
}
@property(assign, nonatomic) id<MQZoneSelectFriendViewDelegate> selectionDelegate;
@property(retain, nonatomic) UILabel* resultLabel;
@property(retain, nonatomic) NSString* maxSelTips;
@property(assign, nonatomic) int maxSelection;
-(void).cxx_destruct;
-(void)onMemberRemoved:(id)removed memberUIN:(id)uin;
-(void)searchBar:(id)bar cancelButtonClick:(BOOL)click;
-(void)searchBarStartEdit:(id)edit;
-(void)filterContentForSearchText:(id)searchText scope:(id)scope;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(BOOL)onRightButtonClicked:(id)clicked;
-(BOOL)onLeftButtonClicked;
-(void)onReachMaxSelection;
-(int)getMaxSelection;
-(id)getFilterDataList;
-(id)getInitSelectedDataList;
-(id)getInitDataList;
-(void)changeRightBtnState:(int)state;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)viewWillDisappear:(BOOL)view;
-(BOOL)isSupportRightDragToGoBack;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithDataSource:(id)dataSource;
-(id)init;
@end

@interface QZFakeFeedItem : NSObject <NSCoding> {
@private
	QzoneFeedModel* feed;
	NSString* feedKey;
	NSDate* time;
}
@property(assign, nonatomic) NSDate* time;
@property(retain, nonatomic) QzoneFeedModel* feed;
@property(retain, nonatomic) NSString* feedKey;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZoneFakeFeedCache : QZoneStorageBase {
	NSMutableDictionary* _dict;
	NSMutableDictionary* _dictWithUgcKey;
	NSMutableArray* _feedList;
	NSString* _fileName;
}
+(id)instance;
-(id)windInFakeFeedWithTrueFeeds:(id)trueFeeds isFirstPage:(BOOL)page;
-(void)removeFakeFeeds:(id)feeds doFlush:(BOOL)flush;
-(void)testTimeOut:(BOOL)anOut;
-(int)lastFeedTime;
-(int)firstFeedTime;
-(void)removeFeedWithClientKey:(id)clientKey doFlush:(BOOL)flush;
-(void)removeFeedWithClientKey:(id)clientKey;
-(id)getFakeFeedList;
-(id)getFeedWithUgcKey:(id)ugcKey;
-(id)getFeedWithClientKey:(id)clientKey;
-(void)addFeed:(id)feed withClientKey:(id)clientKey;
-(void)load;
-(void)flush;
-(void)dealloc;
-(id)init;
@end

@interface QZNotificationPhotoCountInAlbum : QZEngineNotificationInfoBase {
@private
	NSString* albumId;
	NSString* albumType;
	int totalNum;
	long long _serverTime;
}
@property(assign, nonatomic) int totalNum;
@property(assign, nonatomic) long long serverTime;
@property(assign, nonatomic) NSString* albumType;
@property(retain, nonatomic) NSString* albumId;
-(void)dealloc;
@end

@interface MQZoneFeedProxy : NSObject {
	int _unreadActivePersonCount;
	int _unreadPassiveItemCount;
	NSTimer* _autoGetUnreadTimer;
	int _autoGetUnreadNextTimeout;
	int _forceGetUnreadRequestID;
	int _autoGetUnreadRequestID;
	double _getUnreadBeginTime;
	long long _uin;
	long long _unreadActiveLastUin;
	long long _unreadPassiveLastUin;
	BOOL _hasPreload;
}
+(void)releaseInstance;
+(id)instance;
-(void)applicationWillEnterForeground;
-(void)onGetActiveFeedNotify:(id)notify;
-(void)onRefreshPassiveFeedNotify:(id)notify;
-(void)onPushPassiveFeedCountNotify:(id)notify;
-(int)onGetUnreadCountNotify:(id)notify;
-(void)onAutoGetUnreadTimer:(id)timer;
-(void)removeAutoGetUnreadTimer;
-(void)createAutoGetUnreadTimer;
-(void)onLoginOutNotify:(id)notify;
-(void)onLoginInNotify:(id)notify;
-(void)notifyFeedUnreadNumberState;
-(long long)unreadPassiveLastUin;
-(int)unreadPassiveCount;
-(int)unreadActiveCount;
-(long long)unreadActiveLastUin;
-(void)preloadLocalFriendFeeds;
-(BOOL)hasPreload;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneAlbumPasswordPicker : QZoneViewController <UITextFieldDelegate, UITableViewDataSource, UITableViewDelegate> {
	QzoneFeedModel* _model;
	MQZoneAlbumListViewController* _preCtr;
	UITableView* _tableView;
	MQZoneCreateAlbumInputCell* _cell0;
	MQZoneCreateAlbumInputCell* _cell1;
}
@property(retain, nonatomic) QzoneFeedModel* model;
@property(assign, nonatomic) id preCtr;
+(void)setAlbumPassword:(id)password password:(id)password2;
+(id)getAlbumPassword:(id)password;
-(void).cxx_destruct;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)rightButtonClick:(id)click;
-(void)leftButtonClick:(id)click;
-(void)loadView;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface QZDetailFeedInfo : NSObject {
@private
	int latestVisitTime;
	QzoneFeedModel* feed;
}
@property(retain, nonatomic) QzoneFeedModel* feed;
@property(assign, nonatomic) int latestVisitTime;
-(void)dealloc;
@end

@interface QZoneDetailFeedCache : QZoneStorageBase {
	NSString* _ugcfileName;
	NSMutableArray* _ugcKeyList;
	NSMutableDictionary* _feedsWithUgcKey;
}
+(id)instance;
-(id)getCurrentFolderPath;
-(int)getCurrentVersion;
-(BOOL)enableVersionControl;
-(void)clearFeeds;
-(id)getFeedWithUgcKey:(id)ugcKey;
-(void)removeFeedWithUgcKey:(id)ugcKey;
-(BOOL)addFeed:(id)feed;
-(void)deleteFeed:(id)feed;
-(id)loadFeed:(id)feed;
-(BOOL)saveFeed:(id)feed;
-(void)flush;
-(void)load;
-(void)dealloc;
-(id)init;
@end

@interface QZoneMiniFeedCache : QZoneStorageBase {
	NSMutableDictionary* _timstampWithUin;
	NSString* _fileName;
}
+(id)instance;
-(void)setLastestTimestamp:(int)timestamp uin:(long long)uin;
-(int)getLastestTimestamp:(long long)timestamp;
-(void)flush;
-(void)load;
-(void)dealloc;
-(id)init;
@end

@interface QZoneMainPageCache : QZoneStorageBase {
	NSMutableDictionary* _cache;
	NSString* _filePath;
}
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSMutableDictionary* cache;
+(id)instance;
-(void)cacheMainPageProfile:(id)profile;
-(id)getCachedMainPageProfile;
-(void)flush;
-(void)load;
-(void)dealloc;
-(id)init;
@end

@interface QZoneStorageBase : GAMultiThreadObject <IAccountChangedObsever> {
	long long _currentUin;
}
-(id)getCurrentFolderPath;
-(BOOL)enableVersionControl;
-(int)getCurrentVersion;
-(BOOL)checkVersion:(int)version clearFiles:(BOOL)files;
-(void)saveVersion:(int)version withVersionFileName:(id)versionFileName;
-(void)saveVersion:(int)version;
-(int)getVersionWithFilePath:(id)filePath;
-(int)getVersion;
-(void)flush;
-(void)load;
-(void)onAccountChanged:(long long)changed;
-(void)onAccountLogout;
-(void)onAccountLogin;
-(void)dealloc;
-(id)init;
@end

@interface TestHttp : NSObject <TTURLRequestDelegate> {
}
@end

@interface MQZOutboxCell : MQZoneTableViewCell {
	QZTaskModel* _taskModel;
	UIButton* _deleteButton;
	UIView* _clipView;
	MQZOutboxViewController* _parentController;
}
@property(assign, nonatomic) UIViewController* parentCtr;
@property(retain, nonatomic, setter=settaskModel:) QZTaskModel* taskModel;
-(void).cxx_destruct;
-(void)reLayout;
-(void)onDelete;
-(void)hideDelete;
-(void)showDelete;
-(void)drawContent:(CGRect)content;
-(void)drawRect:(CGRect)rect;
-(void)showRightView;
-(void)CancelDelete;
-(void)onSwipe;
-(void)stopAnimatingSubview:(id)subview;
-(void)startAnimatingSubview:(id)subview;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZOutboxViewController : MQZonePullingTableViewController <UITableViewDataSource, UITableViewDelegate, UIActionSheetDelegate> {
	NSMutableArray* _taskModels;
	BOOL _isDeleteing;
	QZTaskModel* _deletingModel;
	UIActionSheet* _sheet;
}
@property(retain, nonatomic) UIActionSheet* sheet;
@property(retain, nonatomic) QZTaskModel* deletingModel;
@property(assign, nonatomic) BOOL isDeleteing;
-(void).cxx_destruct;
-(void)refreshCell:(int)cell model:(id)model;
-(void)refreshCell:(int)cell;
-(void)removeCell:(int)cell ani:(BOOL)ani;
-(void)reloadTable;
-(void)notifyTaskFailed:(id)failed;
-(void)notifyTaskSuccess:(id)success;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onNotifyUpdateProgress:(id)progress;
-(void)onNotifyReloadData:(id)data;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)isSupportRightDragToGoBack;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)onSwipe:(id)swipe;
-(void)loadView;
-(void)viewDidDisappear:(BOOL)view;
-(void)dealloc;
-(id)init;
@end

@interface QZNotificationAdaptVideo : QZEngineNotificationInfoBase {
@private
	NSDictionary* _params;
	QzoneFeedVideo* _video;
}
@property(retain, nonatomic) QzoneFeedVideo* video;
@property(retain, nonatomic) NSDictionary* params;
-(void)dealloc;
@end

@interface MQZStatisticsFile : MQZStatisticsItem {
	unsigned long _fileSize;
	int _opType;
	NSString* _appID;
}
@property(retain, nonatomic) NSString* appID;
@property(assign, nonatomic) unsigned long fileSize;
-(void)reportDownloadFlow:(int)flow;
-(void)reportUploadFlow:(int)flow;
-(int)getReportAppIdType:(id)type;
-(int)getNetworkType;
-(void)dealloc;
@end

@interface MQZStatisticsItem : NSObject {
	long long _uin;
	double _curTime;
	double _costTime;
	int _retCode;
	NSString* _msg;
}
@property(retain, nonatomic) NSString* msg;
@property(assign, nonatomic) int retCode;
-(void)endMonitor;
-(void)beginMonitor;
-(void)dealloc;
-(id)init;
@end

@interface MQZStatisticsProtocol : MQZStatisticsItem {
	NSString* _cmdID;
	NSString* _serverIP;
	NSString* _oDetails;
	int _reqSize;
	int _rspSize;
	int _seq;
	int _port;
	int _dType;
}
@property(assign, nonatomic) int dType;
@property(assign, nonatomic) int seq;
@property(assign, nonatomic) int rspSize;
@property(assign, nonatomic) int reqSize;
@property(retain, nonatomic) NSString* oDetails;
@property(retain, nonatomic) NSString* cmdID;
-(void)setODetailWithBusinessName:(id)businessName error:(BOOL)error retryCount:(int)count delayTime:(long long)time;
-(void)endMonitor;
-(void)beginMonitor;
-(void)reportDownloadFlow:(int)flow requestCmd:(id)cmd;
-(void)reportUploadFlow:(int)flow requestCmd:(id)cmd;
-(void)dealloc;
-(id)init;
@end

@interface MQZStatisticsUpload : MQZStatisticsFile {
	NSString* _serverIP;
	unsigned long _compressTime;
	long long _flow;
	int _uppAppID;
	int _retry;
	int _uploadType;
}
@property(assign, nonatomic) int uploadType;
@property(assign, nonatomic) int retry;
@property(assign, nonatomic) int uppAppID;
@property(assign, nonatomic) long long flow;
@property(assign, nonatomic) unsigned long compressTime;
@property(retain, nonatomic) NSString* serverIP;
-(void)endMonitor;
-(void)dealloc;
-(long long)generateFlow;
-(int)randomIn1000;
-(id)init;
@end

@interface MQZStatisticsDownload : MQZStatisticsFile {
	NSString* _url;
}
@property(retain, nonatomic) NSString* url;
-(void)endMonitor;
-(void)dealloc;
-(id)init;
@end

@interface MQZImagePickerModel : NSObject {
@private
	UIImage* _orgImage;
	NSString* _orgImagePath;
	ALAssetRepresentation* _representation;
	NSString* _pathHD;
	unsigned _totalSizeHD;
	UIImage* _thumbImage;
	BOOL _isClear;
	NSString* _path;
	NSString* _uuid;
	unsigned _totalSize;
	unsigned long _processDuration;
}
@property(assign) BOOL isClear;
@property(assign, nonatomic) unsigned long processDuration;
@property(assign) unsigned totalSizeHD;
@property(retain) NSString* pathHD;
@property(assign) unsigned totalSize;
@property(retain) NSString* path;
@property(retain, nonatomic) NSString* orgImagePath;
@property(retain, nonatomic) NSString* uuid;
@property(retain, nonatomic) UIImage* orgImage;
@property(retain, nonatomic) UIImage* thumbImage;
-(void).cxx_destruct;
-(void)clear;
-(void)scaleAndWriteToFile;
-(id)initWithImage:(id)image;
-(id)initWithThumbImage:(id)thumbImage uuid:(id)uuid asset:(id)asset;
-(id)initWithImage:(id)image uuid:(id)uuid;
-(id)initWithThumb:(id)thumb orgImagePath:(id)path uuid:(id)uuid;
@end

@interface MQZoneMoodEditInputCell : UIView <MQZoneSelectFriendViewDelegate, GAGrowingTextViewDelegate> {
	GAGrowingTextView* _textView;
	UIImage* _bgImage;
	UILabel* _counterLabel;
	UIButton* _showEmotionBoardBtn;
	UIFaceKeyBoard* _emotionBoard;
	NSRange _selectedRange;
	UIButton* _showKeyboardBtn;
	UIButton* _atFriendBtn;
	NSMutableDictionary* _atFriendParam;
	BOOL _isActive;
	id<MQZoneMoodEditInputCellDelegate> _delegate;
@private
	NSString* _text;
}
@property(retain, nonatomic) NSMutableDictionary* atFriendParam;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) id<MQZoneMoodEditInputCellDelegate> delegate;
-(void).cxx_destruct;
-(void)onSelectionCompeleted:(id)compeleted nicks:(id)nicks;
-(void)handleAddAtFriend;
-(void)clickAtFriendBtn:(id)friendBtn;
-(void)growingTextViewDidChange:(id)growingTextView;
-(BOOL)growingTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)growingTextViewDidEndEditing:(id)growingTextView;
-(void)growingTextViewDidBeginEditing:(id)growingTextView;
-(void)keyboardWillShow:(id)keyboard;
-(void)clickKeyboardBtn:(id)btn;
-(void)backSpaceFace;
-(void)faceChoosed:(id)choosed;
-(void)removeEmotionBoard;
-(void)showEmotionBoard;
-(void)clickFlipRightPageBtn;
-(void)clickFlipLeftPageBtn;
-(void)clickEmotionBtn:(id)btn;
-(void)clickActiveBtn:(id)btn;
-(void)checkTextState;
-(void)showToolButton:(BOOL)button;
-(void)initUI;
-(BOOL)isInputCellActive;
-(void)activeInputCell:(BOOL)cell;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneMoodEditLBSCell : UIView <UIActionSheetDelegate, MQZoneLBSPOIViewControllerDelegate> {
	BOOL _isLocating;
	BOOL _defaultRequest;
	BOOL _lbsRequestFlag;
@private
	UIButton* _button;
	id<MQZoneMoodEditLBSCellDelegate> _delegate;
	QzoneLBSPosition* _lbsPosition;
	NSString* _displayString;
	UIImageView* _arrow;
	QzoneFeedGPS* _lbsGPS;
	UIImageView* _icon;
	UILabel* _label;
	NSString* _lbsLocationString;
}
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UIImageView* arrow;
@property(retain, nonatomic) UIImageView* icon;
@property(retain, nonatomic) NSString* displayString;
@property(retain, nonatomic) QzoneLBSPosition* lbsPosition;
@property(retain, nonatomic) NSString* lbsLocationString;
@property(retain, nonatomic) QzoneFeedGPS* lbsGPS;
@property(assign, nonatomic) id<MQZoneMoodEditLBSCellDelegate> delegate;
-(void).cxx_destruct;
-(void)LBSPOIViewController:(id)controller selectedLBSPoiInfo:(id)info;
-(void)LBSPOIViewController:(id)controller customLBSLocationString:(id)string;
-(void)LBSPOIViewController:(id)controller selectedLBSPositon:(id)positon;
-(int)onGetLocationNotify:(id)notify;
-(void)removeLocation;
-(void)modifyLocation;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showActionSheet;
-(void)clickBtn:(id)btn;
-(void)defaultRequestLocation;
-(void)convertDataFromLBSPoiInfo:(id)lbspoiInfo;
-(void)convertDataFromLBSPosition:(id)lbsposition;
-(void)adjustUI;
-(void)initUI;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneMoodEditPhotoCell : UIView <UIActionSheetDelegate, MQZImagePickerDelegate, MQZonePhotoDescriptionDelegate, ZebraViewControllerDelegate> {
	NSMutableArray* _photoModelList;
	NSMutableArray* _photoBtnList;
	NSMutableArray* _photoRectList;
	UIButton* _fullBtn;
	UIButton* _addBtn;
	UIImage* _bgImage;
	UIViewController<MQZoneMoodEditPhotoCellDelegate>* _delegate;
}
@property(retain, nonatomic) NSMutableArray* photoModelList;
@property(assign, nonatomic) UIViewController<MQZoneMoodEditPhotoCellDelegate>* delegate;
-(void).cxx_destruct;
-(id)valueForURLSuffix:(id)urlsuffix withCompare:(id)compare;
-(void)zebraViewController:(id)controller didFinishWithImage:(id)image exifInfomation:(id)infomation assetURL:(id)url error:(id)error;
-(void)zebraViewControllerDidCancel:(id)zebraViewController;
-(void)takeCameraPhoto;
-(void)didMQZImagePicker:(id)picker selectedImages:(id)images;
-(void)openWatermarkCamera;
-(void)takeAlbumPhoto;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)clickAddBtn:(id)btn;
-(void)addImage:(id)image uuid:(id)uuid;
-(void)onDelete:(unsigned)aDelete;
-(void)clickPhoto:(id)photo;
-(void)adjustUI;
-(void)initUI;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneMoodEditSyncCell : UIView {
	UILabel* _textLabel;
	UIButton* _sync2QQBtn;
	UIButton* _sync2WeiboBtn;
@private
	NSNumber* _sync2QQEnableValue;
	NSNumber* _sync2QQFlagValue;
	NSNumber* _sync2WeiboEnableValue;
	NSNumber* _sync2WeiboFlagValue;
}
@property(retain, nonatomic) NSNumber* sync2WeiboFlagValue;
@property(retain, nonatomic) NSNumber* sync2WeiboEnableValue;
@property(retain, nonatomic) NSNumber* sync2QQFlagValue;
@property(retain, nonatomic) NSNumber* sync2QQEnableValue;
-(void).cxx_destruct;
-(BOOL)isSync2WeiboSelected;
-(BOOL)isSync2QQSelected;
-(void)clickSync2WeiboBtn:(id)btn;
-(void)clickSync2QQBtn:(id)btn;
-(void)initUI;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame enableSync2QQ:(id)qq sync2QQFlag:(id)flag enableSync2Weibo:(id)weibo sync2WeiboFlag:(id)flag5;
@end

@interface QZTaskModel : NSObject <NSCoding> {
	int _state;
	NSString* _tips;
	NSString* _taskKey;
	UIImage* _thumbImage;
	NSString* _thumbPath;
	int _curLen;
	int _totalLen;
	BOOL _hasFakeFeed;
	GALayoutInfo* _info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(assign, nonatomic) BOOL hasFakeFeed;
@property(assign, nonatomic) int totalLen;
@property(assign, nonatomic) int curLen;
@property(retain, nonatomic) NSString* thumbPath;
@property(retain, nonatomic) UIImage* thumbImage;
@property(retain, nonatomic) NSString* taskKey;
@property(retain, nonatomic) NSString* tips;
@property(assign, nonatomic) int state;
+(id)getTaskKey;
-(id)descText;
-(id)simpleTitleText;
-(id)titleText;
-(id)operText;
-(int)currentIndex;
-(id)progressText;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZTaskPOIModel : QZTaskModel <NSCoding> {
	NSString* _lbsName;
	NSString* _lbsAddress;
	NSString* _lbsid;
	NSString* _longitude;
	NSString* _latitude;
}
@property(retain, nonatomic) NSString* latitude;
@property(retain, nonatomic) NSString* longitude;
@property(retain, nonatomic) NSString* lbsid;
@property(retain, nonatomic) NSString* lbsAddress;
@property(retain, nonatomic) NSString* lbsName;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface PhotoTaskModel : QZTaskPOIModel <NSCoding> {
	int _albumType;
	NSString* _albumId;
	NSString* _albumName;
	NSString* _fileName;
	NSString* _fileDesc;
	NSString* _refURL;
	QZExifInfo* _exifInfo;
	NSObject* _param;
	long long _batchId;
	long long _totalNum;
	long long _uploadTime;
	int _needFeeds;
	NSMutableDictionary* _mapExt;
	int _compressTime;
}
@property(assign, nonatomic) int compressTime;
@property(assign, nonatomic) long long totalNum;
@property(retain, nonatomic) NSMutableDictionary* mapExt;
@property(assign, nonatomic) int needFeeds;
@property(assign, nonatomic) long long uploadTime;
@property(assign, nonatomic) long long batchId;
@property(retain, nonatomic) NSObject* param;
@property(retain, nonatomic) QZExifInfo* exifInfo;
@property(retain, nonatomic) NSString* refURL;
@property(retain, nonatomic) NSString* fileDesc;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSString* albumId;
@property(assign, nonatomic) int albumType;
-(id)thumbPath;
-(id)descText;
-(id)titleText;
-(id)operText;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface VideoTaskModel : QZTaskModel <NSCoding> {
	NSString* _file;
	NSString* _title;
	NSString* _desc;
	int _flag;
}
@property(assign, nonatomic) int flag;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* file;
-(id)descText;
-(id)titleText;
-(id)operText;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WaterMarkTaskModel : NSObject <NSCoding> {
	NSString* _wmID;
	NSString* _wmMemo;
	NSString* _path;
}
@property(retain, nonatomic) NSString* path;
@property(retain, nonatomic) NSString* wmMemo;
@property(retain, nonatomic) NSString* wmID;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface SimplePicInfo : NSObject {
	NSString* _path;
	NSObject* _param;
	long long _batchId;
	long long _uploadTime;
	WaterMarkTaskModel* _waterMark;
	int _multiPhoto;
	NSString* _taskKey;
}
@property(retain, nonatomic) NSString* taskKey;
@property(assign, nonatomic) int multiPhoto;
@property(retain, nonatomic) WaterMarkTaskModel* waterMark;
@property(assign, nonatomic) long long uploadTime;
@property(assign, nonatomic) long long batchId;
@property(retain, nonatomic) NSObject* param;
@property(retain, nonatomic) NSString* path;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WriteTaskModel : QZTaskModel <NSCoding> {
	int _curIndex;
	NSMutableArray* _photoPathList;
	NSMutableArray* _sucessPathList;
	NSMutableArray* _photoList;
}
@property(retain, nonatomic) NSMutableArray* photoList;
@property(retain, nonatomic) NSMutableArray* sucessPathList;
@property(retain, nonatomic) NSMutableArray* photoPathList;
@property(assign, nonatomic) int curIndex;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WriteMoodTaskModel : WriteTaskModel <NSCoding> {
	int _moodType;
	NSString* _content;
	NSString* _showText;
	NSString* _voicePath;
	float _voiceTime;
	NSString* _voiceid;
	NSString* _lbsName;
	NSString* _lbsAddress;
	long long _lbsid;
	NSString* _s_lbsid;
	double _lbsCoord[3];
	BOOL _syncWeibo;
	BOOL _syncQQ;
@private
	NSDictionary* busiParam;
}
@property(retain, nonatomic) NSDictionary* busiParam;
@property(assign, nonatomic) BOOL syncQQ;
@property(assign, nonatomic) BOOL syncWeibo;
@property(retain, nonatomic) NSString* s_lbsid;
@property(assign, nonatomic) long long lbsid;
@property(retain, nonatomic) NSString* lbsAddress;
@property(retain, nonatomic) NSString* lbsName;
@property(retain, nonatomic) NSString* voiceid;
@property(assign, nonatomic) float voiceTime;
@property(retain, nonatomic) NSString* voicePath;
@property(retain, nonatomic) NSString* showText;
@property(retain, nonatomic) NSString* content;
@property(assign, nonatomic) int moodType;
-(id)thumbPath;
-(double*)getLBSCoord;
-(void)setLbsCoord:(double*)coord;
-(id)descText;
-(id)titleText;
-(id)operText;
-(int)currentIndex;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface WriteLogTaskModel : WriteTaskModel <NSCoding> {
	NSString* _content;
	NSString* _title;
	NSMutableDictionary* _photoNameDic;
	NSMutableDictionary* _photoUuidDIc;
@private
	NSDictionary* busiParam;
}
@property(retain, nonatomic) NSDictionary* busiParam;
@property(retain, nonatomic) NSMutableDictionary* photoUuidDIc;
@property(retain, nonatomic) NSMutableDictionary* photoNameDic;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* content;
-(id)descText;
-(id)titleText;
-(id)operText;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface UppPhotoTaskModel : QZTaskPOIModel <NSCoding> {
	NSString* _appid;
	NSString* _userid;
	NSString* _albumName;
	NSString* _albumId;
	NSString* _fileName;
	NSString* _fileDesc;
	int _type;
	unsigned _uploadip;
	unsigned _picSize;
	unsigned _picHeight;
	unsigned _picWidth;
	unsigned _picType;
	QZExifInfo* _exifInfo;
	NSMutableDictionary* _mapExt;
}
@property(retain, nonatomic) NSMutableDictionary* mapExt;
@property(retain, nonatomic) QZExifInfo* exifInfo;
@property(assign, nonatomic) unsigned picType;
@property(assign, nonatomic) unsigned picWidth;
@property(assign, nonatomic) unsigned picHeight;
@property(assign, nonatomic) unsigned picSize;
@property(assign, nonatomic) unsigned uploadip;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* fileDesc;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSString* albumId;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSString* userid;
@property(retain, nonatomic) NSString* appid;
-(id)thumbPath;
-(id)descText;
-(id)titleText;
-(id)operText;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZTaskQueue : NSObject {
	NSMutableArray* _tasks;
}
@property(retain, nonatomic) NSMutableArray* tasks;
-(id)getNextSendTasks:(int*)tasks;
-(id)photoWaitTasks:(int)tasks isAllTask:(int*)task;
-(id)taskModel:(int)model;
-(int)taskCount;
-(void)addTasks:(id)tasks;
-(void)addTask:(id)task;
-(void)prepareTask;
-(void)reset;
-(void)dealloc;
-(id)init;
@end

@interface QZTaskManager : NSObject <QZUploadDelegate, IAccountChangedObsever> {
	QZTaskQueue* _taskQueue;
	QZSendPhotoTaskManager* _uploadMgr;
	MQZOutboxViewController* _observer;
	int _state;
	NSObject* _curObj;
	NSTimer* _timer;
	NSMutableArray* _imgModels;
	NSMutableDictionary* _taskInfo;
	NSTimer* _initTimer;
}
@property(retain, nonatomic) NSMutableDictionary* taskInfo;
@property(retain, nonatomic) NSObject* curObj;
@property(assign, nonatomic) int state;
@property(assign, nonatomic) MQZOutboxViewController* observer;
@property(retain, nonatomic) QZTaskQueue* taskQueue;
+(id)instance;
-(void)onAccountLogout;
-(void)onAccountLogin;
-(id)allTaskNumKey:(id)key;
-(id)allFailedKey:(id)key;
-(void)notifyTaskModelWillBeCanceled:(id)notifyTaskModel;
-(void)notifyTaskModelWillBeCompletedSuccessful:(id)notifyTaskModel withInfo:(id)info;
-(void)notifyTaskModelWillBeRemoved:(id)notifyTaskModel deleteFakeFeed:(BOOL)feed;
-(void)notifyPhotoUploadBeCompletedSuccessful:(id)successful;
-(void)notifyBatchPhotoUploadFinishedSuccessful:(id)successful;
-(void)qzUploadReady:(id)ready;
-(void)qzUploadFinish:(id)finish;
-(void)qzUpload:(id)upload fail:(id)fail;
-(void)qzUpload:(id)upload sucess:(id)sucess;
-(void)qzUpload:(id)upload recv:(long long)recv total:(long long)total;
-(void)loadHistory;
-(void)uploadHistory;
-(BOOL)haveUploadHistory;
-(void)removeHistory;
-(BOOL)saveHistory;
-(id)historyTaskInfoPath;
-(id)historyFilePath;
-(void)addUncompleteImgModel:(id)model;
-(void)addTasks:(id)tasks complete:(BOOL)complete;
-(void)stopTimer;
-(void)startTimer;
-(void)checkModelState;
-(void)changeModelState;
-(BOOL)isAllFailed;
-(int)taskModelIndex:(id)index;
-(id)taskModel:(int)model;
-(int)taskCount;
-(void)cancelTask:(int)task;
-(void)cancelTaskModel:(id)model;
-(void)removeModelIndex:(int)index;
-(void)cancelModel:(id)model;
-(void)addTasks:(id)tasks;
-(void)addTask:(id)task;
-(void)reset;
-(void)stop;
-(void)sendNext;
-(void)onWaitSixty;
-(void)start;
-(void)resetTaskState;
-(void)sendModel;
-(void)dealloc;
-(id)init;
-(void)photoUploadReady:(id)ready;
-(void)photoUploadFinish:(id)finish;
-(void)photoUpload:(id)upload fail:(id)fail;
-(void)photoUpload:(id)upload sucess:(id)sucess;
-(void)photoUpload:(id)upload recv:(long long)recv total:(long long)total;
-(int)getPhotoModelIndex:(id)index;
-(BOOL)needSendUploadFinish:(id)finish andSuccNum:(int)num andFailNum:(int)num3;
-(void)uploadFinishNotify:(id)notify;
-(void)uploadPhotos:(id)photos isAllTask:(int)task;
-(void)postMoodSuccess;
-(void)sendAllMood;
-(void)postMoodError:(id)error;
-(void)moodUpload:(id)upload fail:(id)fail;
-(void)moodUploadPhotoReady:(id)ready;
-(void)moodUploadPhotoFinish:(id)finish;
-(id)getCurrentFile;
-(void)moodUpload:(id)upload sucess:(id)sucess;
-(void)moodUpload:(id)upload recv:(long long)recv total:(long long)total;
-(void)sendMood:(id)mood;
-(void)UppUploadPhotoReady:(id)ready;
-(void)UppUploadError:(id)error;
-(void)UppUpload:(id)upload fail:(id)fail;
-(void)UppUpload:(id)upload sucess:(id)sucess;
-(void)UppUpload:(id)upload recv:(long long)recv total:(long long)total;
-(void)sendUppTask:(id)task;
@end

@interface QZBusinessEngineLBS : QZBusinessEngine <CLLocationManagerDelegate> {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(BOOL)getLbsCombine:(id)combine responed:(id)responed;
-(id)generateWeatherInfo2:(WeatherInfo_V2)a2 gps:(GPS_V2)gps;
-(id)generatePositonInfo:(GeoInfo_V2)info gps:(GPS_V2)gps;
-(BOOL)getLbsCombine:(id)combine;
-(id)getStrWifiAddress;
-(long long)getWifiAddress;
-(BOOL)getWeatherInfo:(id)info responed:(id)responed;
-(BOOL)getWeatherInfo:(id)info;
-(BOOL)getPoiList:(id)list responed:(id)responed;
-(BOOL)getPoiList:(id)list;
-(BOOL)getLocation:(id)location responed:(id)responed;
-(BOOL)getLocation:(id)location;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(id)init;
@end

@interface QZNotificationSeeMoreComments : QZEngineNotificationInfoBase {
	long long _uin;
	QzoneFeedModel* _feedModel;
	int _hasMore;
	int _beginIndex;
	int _count;
}
@property(readonly, assign, nonatomic) int count;
@property(readonly, assign, nonatomic) int beginIndex;
@property(readonly, assign, nonatomic) int hasMore;
@property(retain, nonatomic) QzoneFeedModel* feedModel;
@property(readonly, assign, nonatomic) long long uin;
-(void)dealloc;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action error:(int)error msg:(id)msg;
-(id)initWithUin:(long long)uin requestID:(int)anId action:(int)action feedModel:(id)model hasMore:(int)more beginIndex:(int)index count:(int)count;
@end

@interface QZSendPhotoTaskManager : QZUploadManager {
	NSMutableArray* _photoModels;
	BOOL _isProcess;
	NSMutableArray* _writeList;
	BOOL _isUrl;
}
@property(assign) BOOL isProcess;
@property(assign) BOOL isUrl;
@property(retain) NSMutableArray* writeList;
@property(retain) NSMutableArray* photoModels;
-(void)initWithVideoModel:(id)videoModel;
-(BOOL)cancelUppUpload:(id)upload;
-(BOOL)cancelUpload:(id)upload;
-(void)cancelUpload;
-(void)initWithUppUpload:(id)uppUpload;
-(void)initWithTemplateGift:(id)templateGift;
-(void)initWithCover:(id)cover;
-(void)initWithPortait:(id)portait;
-(void)initWithMoodUpload:(id)moodUpload;
-(long long)genBatchId;
-(void)initWithPhotoUpload:(id)photoUpload;
-(void)beginProcessPhoto;
-(id)getPictureExif:(id)exif;
-(id)processPhoto:(id)photo type:(int)type;
-(void)initAuthData:(id)data;
-(void)dealloc;
@end

@interface QzoneLBSGPSInfo : NSObject <NSCoding, NSCopying> {
	long long iLat;
	long long iLon;
	long long iAlt;
	int eType;
	int iAccuracy;
	int iLocateCostTime;
	CLLocation* cllocation;
	NSDate* timestamp;
}
@property(retain, nonatomic) NSDate* timestamp;
@property(retain, nonatomic) CLLocation* cllocation;
@property(assign, nonatomic) int iLocateCostTime;
@property(assign, nonatomic) int iAccuracy;
@property(assign, nonatomic) int eType;
@property(assign, nonatomic) long long iAlt;
@property(assign, nonatomic) long long iLon;
@property(assign, nonatomic) long long iLat;
-(id)description;
-(BOOL)isOutOfDate:(id)date;
-(BOOL)isEqual:(id)equal;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QzoneLBSPosition : NSObject <NSCoding, NSCopying> {
	long long iDistrictCode;
	QzoneLBSGPSInfo* stUsrLoc;
	int iRange;
	NSString* strCountry;
	NSString* strProvince;
	NSString* strCity;
	NSString* strDistrict;
	NSString* strTown;
	NSString* strRoad;
	NSString* strPremises;
	NSString* locationString;
	NSDate* timestamp;
}
@property(retain, nonatomic) NSDate* timestamp;
@property(retain, nonatomic) NSString* locationString;
@property(retain, nonatomic) NSString* strPremises;
@property(retain, nonatomic) NSString* strRoad;
@property(retain, nonatomic) NSString* strTown;
@property(retain, nonatomic) NSString* strDistrict;
@property(retain, nonatomic) NSString* strCity;
@property(retain, nonatomic) NSString* strProvince;
@property(retain, nonatomic) NSString* strCountry;
@property(assign, nonatomic) int iRange;
@property(retain, nonatomic) QzoneLBSGPSInfo* stUsrLoc;
@property(assign, nonatomic) long long iDistrictCode;
-(id)description;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QzoneLBSPoiInfo : NSObject <NSCoding, NSCopying> {
	NSString* strPoiId;
	NSString* strName;
	int iType;
	NSString* strTypeName;
	NSString* strAddress;
	long long iDistrictCode;
	QzoneLBSGPSInfo* stUsrLoc;
	int iDistance;
	int iHotValue;
	NSString* strPhone;
	NSString* defaultName;
}
@property(retain, nonatomic) NSString* defaultName;
@property(retain, nonatomic) NSString* strPhone;
@property(assign, nonatomic) int iHotValue;
@property(assign, nonatomic) int iDistance;
@property(retain, nonatomic) QzoneLBSGPSInfo* stUsrLoc;
@property(assign, nonatomic) long long iDistrictCode;
@property(retain, nonatomic) NSString* strAddress;
@property(retain, nonatomic) NSString* strTypeName;
@property(assign, nonatomic) int iType;
@property(retain, nonatomic) NSString* strName;
@property(retain, nonatomic) NSString* strPoiId;
-(id)description;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QzoneLBSBatchPoiInfo : NSObject <NSCoding, NSCopying> {
	NSMutableArray* poiList;
	int totalNum;
	QzoneLBSGPSInfo* marsGps;
	NSDate* timestamp;
}
@property(retain, nonatomic) NSDate* timestamp;
@property(retain, nonatomic) QzoneLBSGPSInfo* marsGps;
@property(assign, nonatomic) int totalNum;
@property(retain, nonatomic) NSMutableArray* poiList;
-(id)description;
-(BOOL)isOutOfDate;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QzoneWeatherInfo : NSObject <NSCoding> {
	int iRet;
	int iCityCode;
	NSString* strCityName;
	NSString* strDate;
	int iHour;
	int iWeather;
	int iWind;
	int iTempCurr;
	int iTempMax;
	int iTempMin;
	int iHumidity;
	NSString* strSunriseTime;
	NSString* strSunsetTime;
	NSString* strPressure;
	int iWindForce;
	QzoneLBSGPSInfo* stGps;
	NSString* strDeviceName;
	int iPM2p5;
	NSDate* timestamp;
	int iDayTime;
	int iCacheTime;
}
@property(assign, nonatomic) int iCacheTime;
@property(assign, nonatomic) int iDayTime;
@property(retain, nonatomic) NSDate* timestamp;
@property(assign, nonatomic) int iPM2p5;
@property(retain, nonatomic) NSString* strDeviceName;
@property(retain, nonatomic) QzoneLBSGPSInfo* stGps;
@property(assign, nonatomic) int iWindForce;
@property(retain, nonatomic) NSString* strPressure;
@property(retain, nonatomic) NSString* strSunsetTime;
@property(retain, nonatomic) NSString* strSunriseTime;
@property(assign, nonatomic) int iHumidity;
@property(assign, nonatomic) int iTempMin;
@property(assign, nonatomic) int iTempMax;
@property(assign, nonatomic) int iTempCurr;
@property(assign, nonatomic) int iWind;
@property(assign, nonatomic) int iWeather;
@property(assign, nonatomic) int iHour;
@property(retain, nonatomic) NSString* strDate;
@property(retain, nonatomic) NSString* strCityName;
@property(assign, nonatomic) int iCityCode;
@property(assign, nonatomic) int iRet;
-(id)description;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZoneLBSData : NSObject <NSCoding> {
	QzoneLBSGPSInfo* gpsInfo;
	QzoneWeatherInfo* weatherInfo;
	QzoneLBSPosition* positionInfo;
	QzoneLBSBatchPoiInfo* poiListInfo;
	NSDate* timestamp;
	int useTimes;
}
@property(assign, nonatomic) int useTimes;
@property(retain, nonatomic) NSDate* timestamp;
@property(retain, nonatomic) QzoneLBSBatchPoiInfo* poiListInfo;
@property(retain, nonatomic) QzoneLBSPosition* positionInfo;
@property(retain, nonatomic) QzoneWeatherInfo* weatherInfo;
@property(retain, nonatomic) QzoneLBSGPSInfo* gpsInfo;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZLbsEngine : QZEngineBase <CLLocationManagerDelegate, MKReverseGeocoderDelegate> {
	CLLocationManager* locationManager;
	QzoneLBSPosition* curLBSPosition;
	CLLocation* curLocation;
	CLLocation* lastLocation;
	QzoneLBSBatchPoiInfo* PoiInfoList;
	id<QZLbsEngineDelegate> delegate;
	BOOL _isUpdatingLocation;
	BOOL _isAlwaysLocate;
	BOOL _isHasTimeOut;
	NSString* mKeyWord;
	NSArray* mPOITypes;
	int mSortType;
	int mRadius;
	int mReqPage;
	int mReqNum;
	int mReqid;
	int AppIdFromInfo;
	NSString* source;
	NSDate* locateBeginDate;
	MKReverseGeocoder* _reverseGeocoder;
	CLLocation* sendNetLocation;
}
@property(retain, nonatomic) QzoneLBSBatchPoiInfo* PoiInfoList;
@property(retain, nonatomic) QzoneLBSPosition* curLBSPosition;
@property(assign, nonatomic) id<QZLbsEngineDelegate> delegate;
@property(assign, nonatomic) int mReqNum;
@property(assign, nonatomic) int mReqPage;
@property(assign, nonatomic) int mRadius;
@property(assign, nonatomic) int mSortType;
@property(retain, nonatomic) NSArray* mPOITypes;
@property(retain, nonatomic) NSString* mKeyWord;
@property(retain, nonatomic) NSDate* locateBeginDate;
@property(retain, nonatomic) CLLocation* lastLocation;
@property(retain, nonatomic) CLLocation* curLocation;
+(id)instance;
-(void)reverseGeocoder:(id)geocoder didFailWithError:(id)error;
-(void)reverseGeocoder:(id)geocoder didFindPlacemark:(id)placemark;
-(BOOL)locationIsInMainLand:(id)mainLand;
-(void)locateWithSystemMethodSucced:(id)systemMethodSucced;
-(void)startLocateWithSystemMethod;
-(void)returnLocationError;
-(void)didMessageChangeState:(id)state;
-(void)notifyError:(int)error errorDesc:(id)desc;
-(void)ThirtySecondimedOut;
-(void)FiveSecondTimedOut;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)stopLocate;
-(void)startLocate;
-(void)sendLocateErrorRequest;
-(void)sendNetWorkRequest:(id)request;
-(void)sendlbsRequest:(BOOL)request;
-(void)requestSearchNearPoiList:(id)list keyWord:(id)word POITypes:(id)types sortType:(int)type radius:(unsigned)radius reqPage:(unsigned)page reqNum:(unsigned)num;
-(void)requestGetNearPoiList:(id)list POITypes:(id)types sortType:(int)type radius:(int)radius reqPage:(int)page reqNum:(int)num;
-(void)getLocationWithFromInfo:(int)info forceRefresh:(BOOL)refresh;
-(void)getLocation:(id)location;
-(BOOL)isAbleLocate;
-(void)dealloc;
-(void)finalize;
-(id)init;
@end

@interface QZWeatherInfoEngine : NSObject <QZLbsEngineDelegate> {
	id<QZWeatherInfoEngineDelegate> delegate;
	BOOL isHaveCoordinate;
@private
	id<QZWeatherInfoEngineDelegate> _delegate;
}
@property(assign, nonatomic) id<QZWeatherInfoEngineDelegate> delegate;
+(id)instance;
-(void)saveInfo:(id)info withTag:(int)tag;
-(id)getLocalInfo:(int)info;
-(void)didMessageChangeState:(id)state;
-(void)requestWeatherInfo:(id)info;
-(void)newPOIListNotify:(BOOL)notify batch:(id)batch;
-(void)newCurrentLocationNotify:(BOOL)notify position:(id)position;
-(void)getCoordinate:(BOOL)coordinate coordinate:(id)coordinate2;
-(void)newStartLocateNotify:(BOOL)notify;
-(void)startToGetWeatherInfo;
-(id)getPOIListInfo;
-(id)getPositionInfo;
-(id)getWeatherInfo;
-(void)updateWeatherInfoAfterDelay;
-(void)updateWeatherInfo;
-(void)dealloc;
-(void)finalize;
-(id)init;
@end

@interface QZBusinessEnginePush : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(id)decodePushData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface QZonePushMsgManager : NSObject {
@private
	NSMutableDictionary* _pushList;
}
@property(retain, nonatomic) NSMutableDictionary* pushList;
+(id)instance;
-(id)getPushMsgFromCache;
-(void)cachePushMsg;
-(id)decodePushData:(id)data;
-(void)removeMyObservers;
-(void)initMyObservers;
-(void)dealloc;
-(id)init;
@end

@interface QZNotificationVerifyRights : QZEngineNotificationInfoBase {
@private
	int _verifyResult;
	NSString* _verifyMsg;
}
@property(retain, nonatomic) NSString* verifyMsg;
@property(assign, nonatomic) int verifyResult;
-(void)dealloc;
@end

@interface QZTestLbs : NSObject {
}
-(void)onGetPoiInfo:(id)info;
-(void)onGetLocation:(id)location;
-(void)test;
-(id)init;
@end

@interface QZEngineNotificationGetLocation : QZEngineNotificationInfoBase {
	QzoneLBSPosition* _position;
}
@property(retain, nonatomic) QzoneLBSPosition* position;
-(void)dealloc;
@end

@interface MQZoneFeedCommentTableCell : MQZoneTableViewCell {
}
+(float)heightWithFeedModel:(id)feedModel atRow:(int)row;
+(Class)getFeedCellClass:(id)aClass atRow:(int)row;
+(int)getFeedCellArea:(id)area atRow:(int)row;
+(int)commentIndexOffset:(id)offset;
+(float)heightOfCommentSection:(id)commentSection;
+(int)numberOfRowsInCommentSection:(id)commentSection;
-(id)layoutFeedModel;
-(void)onUpdateFeedModel:(id)model;
@end

@interface MQZoneFeedCommentLikeTableCell : MQZoneFeedCommentTableCell {
}
@end

@interface MQZoneFeedCommentClickItemTableCell : MQZoneFeedCommentTableCell {
	UIActivityIndicatorView* _activeView;
}
-(void)dealloc;
-(void)showActiveView:(BOOL)view center:(CGPoint)center;
-(void)drawRect:(CGRect)rect;
@end

@interface MQZoneFeedCommentHeaderTableCell : UITableViewCell {
}
+(float)heightOfCell;
-(void)drawRect:(CGRect)rect;
@end

@interface MQZoneFeedCommentFooterTableCell : UITableViewCell {
}
+(float)heightOfCell;
-(void)drawRect:(CGRect)rect;
@end

@interface MQZoneFeedSeperatorTableCell : UITableViewCell {
}
+(float)heightOfCell:(BOOL)cell;
-(void)drawRect:(CGRect)rect;
@end

@interface QuestionView : UIView <UITextFieldDelegate> {
	NSString* _question;
	UITextField* _textField;
	BOOL _showIcon;
	UIButton* _questionButton;
	id _target;
	SEL _selector;
	NSMutableArray* _lines;
	UIImageView* _arrowView;
}
@property(assign, nonatomic) BOOL showIcon;
@property(retain, nonatomic) NSString* question;
@property(retain, nonatomic) UITextField* textField;
-(void).cxx_destruct;
-(void)clearInput;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)drawRect:(CGRect)rect;
-(void)addEnterAnswerTarget:(id)target selector:(SEL)selector;
-(void)addClickTarget:(id)target selector:(SEL)selector;
-(void)setQuestion:(id)question Force:(BOOL)force;
-(void)layoutSubviews;
-(void)reloadAppearance;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZPermissionView : UIScrollView <IGACanvas> {
	QZProfileModel* _profile;
	UIImageView* _portrait;
	UIButton* _addFriendButton;
	QuestionView* _questionView;
	int _selectedQuestion;
}
@property(assign, nonatomic) int selectedQuestion;
@property(readonly, assign, nonatomic) QZProfileModel* profile;
-(void).cxx_destruct;
-(void)resignKeyboard;
-(void)setEnterAnswerTarget:(id)target selector:(SEL)selector;
-(void)setPickQuestionTarget:(id)target selector:(SEL)selector;
-(void)setAddFriendTarget:(id)target selector:(SEL)selector;
-(void)updateCanvas:(id)canvas;
-(void)onNotifyKeyboardHide:(id)hide;
-(void)onNotifyKeyboardShow:(id)show;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame profile:(id)profile;
-(void)reloadAppearance;
@end

@interface QuestionPickerCell : UITableViewCell {
	int _row;
	NSString* _question;
}
@property(retain, nonatomic) NSString* question;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZQuestionPickerViewController : QZoneViewController <UITableViewDataSource, UITableViewDelegate> {
	NSArray* _questions;
	QZoneHomepageViewController* _ctr;
	int _selectedQuestion;
}
@property(assign, nonatomic) int selectedQuestion;
@property(assign, nonatomic) QZoneHomepageViewController* ctr;
@property(retain, nonatomic) NSArray* questions;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)loadView;
-(void)reloadAppearance;
@end

@interface QZEngineNotificationGetPoiList : QZEngineNotificationInfoBase {
@private
	QzoneLBSBatchPoiInfo* poi;
}
@property(retain, nonatomic) QzoneLBSBatchPoiInfo* poi;
-(void)dealloc;
@end

@interface MQZFullScreenSheet : UIWindow {
@private
	UILabel* _textLabel;
}
@property(retain, nonatomic) UILabel* textLabel;
@property(retain, nonatomic) NSString* text;
-(void)dismiss;
-(void)show;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZTipView : UIImageView {
@private
	UILabel* _titleLabel;
	NSString* _titleText;
	UIView* _customView;
	UIView* _indicator;
	UILabel* _detailLabel;
	NSString* _detailText;
	UIView* _bottomView;
	UIButton* _cancelButton;
	UILabel* _otherTipLabel;
	NSString* _otherTipText;
	id<MQZTipViewDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZTipViewDelegate> delegate;
@property(retain, nonatomic) NSString* otherTipText;
@property(retain, nonatomic) UILabel* otherTipLabel;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UIView* bottomView;
@property(retain, nonatomic) NSString* detailText;
@property(retain, nonatomic) UILabel* detailLabel;
@property(retain, nonatomic) UIView* indicator;
@property(retain, nonatomic) UIView* customView;
@property(retain, nonatomic) NSString* titleText;
@property(retain, nonatomic) UILabel* titleLabel;
-(void)MQZTipViewDidCancel:(id)mqztipView;
-(void)layoutSubviews;
-(void)initMyMembers;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZTipViewPool : NSObject <MQZTipViewDelegate> {
@private
	MQZFullScreenSheet* _sheet;
	MQZTipView* _tipView;
	int _level;
	id<MQZTipViewPoolDelegate> _delegate;
}
@property(assign, nonatomic) int level;
@property(retain, nonatomic) MQZTipView* tipView;
@property(retain, nonatomic) MQZFullScreenSheet* sheet;
@property(assign, nonatomic) id<MQZTipViewPoolDelegate> delegate;
+(id)instance;
-(void)MQZTipViewDidCancel;
-(void)cleanTips;
-(void)postLoading:(id)loading level:(int)level delegate:(id)delegate;
-(void)postLoading:(id)loading delegate:(id)delegate;
-(void)createTipSheetAndView;
-(void)dealloc;
-(id)init;
@end

@interface QZNotificationFakeFeed : QZEngineNotificationInfoBase {
@private
	int fakeFeedType;
	NSString* clientKey;
	QzoneFeedModel* feed;
}
@property(retain, nonatomic) QzoneFeedModel* feed;
@property(retain, nonatomic) NSString* clientKey;
@property(assign, nonatomic) int fakeFeedType;
-(void)dealloc;
@end

@interface MQZRightButtonView : UIView {
	UIImageView* _animationImageView;
	UIImageView* _tipsView;
	UIButton* _sendBoxButton;
	UIButton* _camaraButton;
	UIImageView* _cameraRotateImageView;
	CGRect _iconSendboxRect;
	CGRect _iconTipsRect;
	CGRect _iconCamaraRect;
	MQZoneBadgeView* _numberView;
	NSString* _customImageName;
	BOOL _bAniationed;
}
@property(retain, nonatomic) MQZoneBadgeView* numberView;
@property(retain, nonatomic) UIImageView* tipsView;
@property(retain, nonatomic) UIImageView* animationImageView;
@property(retain, nonatomic) UIImageView* cameraRotateImageView;
@property(retain, nonatomic) UIButton* camaraButton;
@property(retain, nonatomic) UIButton* sendBoxButton;
-(void).cxx_destruct;
-(BOOL)updateSendbox:(unsigned)sendbox showTips:(BOOL)tips;
-(void)setTaskNum:(int)num;
-(void)clearViews;
-(void)stopAniation;
-(void)startAniation;
-(void)dismissSendbox;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame image:(id)image;
-(id)initWithFrame:(CGRect)frame;
-(void)reloadAppearance;
-(void)reloadButton:(id)button;
@end

@interface MQZRdmDownloadImage : GAMultiThreadObject <IGAImageStatistic> {
	NSMutableDictionary* _cells;
}
+(id)instance;
-(void)onImageDownloadWithUrl:(id)url errorCode:(int)code errorDesc:(id)desc downloaded:(int)downloaded totalSize:(int)size;
-(void)onImageDownloadBegin:(id)begin;
-(id)cellWithUrl:(id)url;
-(void)removeUrl:(id)url;
-(void)addUrl:(id)url cell:(id)cell;
-(id)getKey:(id)key;
-(void)initialize;
-(id)init;
@end

@interface ActionSharePhotoItem : ActionBaseItem {
}
-(void)onItemClick;
-(id)initWithItemDelegate:(id)itemDelegate;
@end

@interface MQZBasePhotoBrowserViewController : UIViewController <UIActionSheetDelegate, MQZPhotoBrowserViewDelegate, ActionItemDelegate> {
	int _initPage;
	BOOL _isControlHidden;
	BOOL _isActionSheetShow;
	BOOL _isStatusBarHidden;
	BOOL _isMsgBarShow;
	int _lastStatusBarStyle;
	Class _photoClass;
	MQZPhotoBrowserView* _pagePhotosView;
	NSArray* _itemList;
	NSMutableArray* _photoList;
	UIActionSheet* _actionSheet;
	UIWindow* _maskView;
	UIImage* _previewImage;
	UIViewController* _lastViewController;
	MQZPageIndicator* _pageControl;
}
-(void).cxx_destruct;
-(int)getCurrentPhotoPageNumber;
-(void)hidePhotoBrowserAnimationDidStop:(id)hidePhotoBrowserAnimation finished:(id)finished context:(void*)context;
-(void)hidePhotoBrowserIfNotLongImage;
-(void)hidePhotoBrowserIfLongImage;
-(void)hidePhotoBrowser;
-(void)showPhotoBrowserAnimationDidStop:(id)showPhotoBrowserAnimation finished:(id)finished context:(void*)context;
-(void)showPhotoBrowserInViewController:(id)viewController;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)handleUIApplicationDidEnterBackgroundNotification:(id)handleUIApplication;
-(void)deleteCurrentPhoto;
-(id)getCurrentPhoto;
-(id)getCurrentViewController;
-(id)getCurrentImage;
-(id)getCurrentImagePath;
-(void)setPageControlHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)onLeftButtonClick:(id)click;
-(id)getToolbarItems;
-(id)getToolbar;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(CGRect)frameForPagingScrollView;
-(void)insertPhotos:(id)photos atIndex:(int)index;
-(void)setCurrentPage:(int)page;
-(void)setPhotoCaptions:(id)captions;
-(void)setVisibleRects:(id)rects;
-(void)setThumbRects:(id)rects;
-(void)setThumbPaths:(id)paths;
-(void)setPhotoPaths:(id)paths;
-(void)setPhotoImages:(id)images;
-(void)didScrollToPage:(int)page oldPage:(int)page2;
-(void)longPressDetected;
-(void)popupMenu;
-(void)singleTapDetected;
-(id)imageAtIndex:(int)index;
-(int)numberOfPages;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(void)releaseActionItems;
-(id)init;
@end

@interface MQZImageView : UIView <UIScrollViewDelegate, MQZPhotoDelegate, DACircularProgressViewDelegate> {
	CGSize _imageSize;
	UIImageView* _imageView;
	UIScrollView* _scrollView;
	BOOL _isCurrentPage;
	BOOL _canDownload;
	BOOL _isHandleLongPress;
	BOOL _isAnimating;
	BOOL _isLoadImageFail;
	BOOL _isDownloadFail;
	DACircularProgressView* _progressView;
	id<MQZImageViewDelegate> _touchDelegate;
	MQZPhoto* _photo;
	BOOL _canZoom;
}
@property(assign, nonatomic) id<MQZImageViewDelegate> touchDelegate;
@property(readonly, assign, nonatomic) UIScrollView* scrollView;
@property(readonly, assign, nonatomic) UIImageView* imageView;
-(void).cxx_destruct;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)updateImageAfterDelay;
-(void)notifyAnimationFinished:(id)finished;
-(void)notifyDownloadThumbFail:(id)fail;
-(void)notifyDownloadThumbSuccess:(id)success;
-(void)notifyDownloadFail:(id)fail;
-(void)notifyAsynLoadImageFail:(id)fail;
-(void)notifyAsynLoadImageSuccess:(id)success;
-(void)notifyDownloadSuccess:(id)success;
-(void)notifyDownloadProgress:(id)progress;
-(void)handleLongPressGesture:(id)gesture;
-(void)handleDoubleTap:(id)tap;
-(void)handleSingleTap;
-(void)handleTapGesture:(id)gesture;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)setCanDownload:(BOOL)download;
-(void)setIsCurrentPage:(BOOL)page;
-(void)showDownloadFailNotice;
-(void)downloadImageIfNeeded;
-(void)updateProgressView;
-(void)showProgressLoading;
-(void)hideProgressView;
-(void)showProgressView;
-(void)scaleToMaximumZoomScale;
-(void)resetZoomScale;
-(void)asynLoadImage;
-(void)loadImage;
-(void)setFrame:(CGRect)frame;
-(void)setImage:(id)image;
-(void)setPhoto:(id)photo;
-(void)resetImageFrame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneLandscapeInputBoard : UIImageView <QIMTextInputDelegate, UITextFieldDelegate> {
	UIImageView* _textFieldBg;
	UITextField* _textField;
	CGRect _frameNotFirstResponder;
	id<MQZoneLandscapeInputBoardDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZoneLandscapeInputBoardDelegate> delegate;
-(void).cxx_destruct;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)layoutSubviews;
-(void)onNotifyKeyboardHide:(id)hide;
-(void)onNotifyKeyboradShow:(id)show;
-(void)didMoveToSuperview;
-(void)deactive;
-(void)active;
-(void)dealloc;
-(id)getText;
-(void)setText:(id)text;
-(id)initWithFrame:(CGRect)frame;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface MQZoneDescLabel : UIView {
	NSString* _text;
	UIFont* _font;
}
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic, setter=setText:) NSString* text;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneBottomBar : UIImageView {
	UIButton* _commentButton;
	UIButton* _likeButton;
	UIButton* _detailButton;
	MQZoneDescLabel* _descriptionLabel;
	UILabel* _likeLabel;
	UILabel* _commentLabel;
}
@property(readonly, assign, nonatomic) UIButton* detailButton;
@property(readonly, assign, nonatomic) UIButton* likeButton;
@property(readonly, assign, nonatomic) UIButton* commentButton;
-(void).cxx_destruct;
-(void)updateSubViews:(id)views;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZonePhotoBrowserViewController : MQZBasePhotoBrowserViewController <GAInputBarDelegate, MQZoneLandscapeInputBoardDelegate> {
	QzoneFeedModel* _model;
	NSMutableDictionary* _requests;
	NSMutableArray* _photoes;
	BOOL _hasMoreLeft;
	BOOL _hasMoreRight;
	BOOL _requestingLeft;
	BOOL _requestingRight;
	BOOL _needRequestMoreOnFirstEntry;
	BOOL _needGetMorePicture;
	long long _uin;
	NSString* _albumID;
	NSDictionary* _busiParam;
	int _appid;
	NSString* _curid;
	GAInputBar* _inputBar;
	MQZoneLandscapeInputBoard* _inputBoard;
	UIControl* _landscapeKeyboardMask;
	int _type;
	UIButton* _bottomBarButton;
	MQZoneBottomBar* _bottomBar;
	UIImageView* _mask;
	CGAffineTransform _transformUnRotate;
	BOOL _showBottomBar;
	BOOL _showPageControl;
	int _qzoneType;
	long long _groupCode;
}
@property(readonly, assign, nonatomic) QzoneFeedModel* model;
@property(assign, nonatomic) long long groupCode;
@property(assign, nonatomic) int qzoneType;
-(void).cxx_destruct;
-(void)onFakeFeed;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(id)getToolbarItems;
-(void)onNotifyOperation:(id)operation;
-(void)onNotifyGetPhotoList:(id)list;
-(void)didScrollToPage:(int)page oldPage:(int)page2;
-(BOOL)sendText:(id)text;
-(void)inputDone:(id)done text:(id)text;
-(BOOL)inputBar:(id)bar sendAction:(id)action;
-(void)inputBarDidDeactive:(id)inputBar;
-(void)setKeyBoardType:(int)type;
-(void)deactiveLandscapeKeyboard;
-(void)showKeyBoardFor:(int)aFor;
-(void)onNotifyDeviceOrientationDidChange:(id)onNotifyDeviceOrientation;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)updateButtonBar:(unsigned)bar;
-(void)detailButtonClick:(id)click forEvent:(id)event;
-(void)commentButtonClick:(id)click forEvent:(id)event;
-(void)likeButtonClick:(id)click forEvent:(id)event;
-(void)hideBottomBarAnimated:(BOOL)animated;
-(void)showBottomBarAnimated:(BOOL)animated;
-(BOOL)isBottomBarVisible;
-(void)bottomBarButtonClick:(id)click forEvent:(id)event;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)setFeedModel:(id)model index:(unsigned)index;
-(void)setPageControlHidden:(BOOL)hidden animated:(BOOL)animated;
-(unsigned)getCurrentPage;
-(void)setThumbUrls:(id)urls;
-(void)setPhotoUrls:(id)urls;
-(void)dealloc;
-(id)initWithPhotoModels:(id)photoModels start:(int)start totalCount:(int)count;
-(id)init;
@end

@interface MQZPageIndicator : UIView {
	int _currentPage;
	int _totalPage;
	UIPageControl* _dotPageControl;
	BOOL _useUIPageControl;
}
@property(assign, nonatomic) int totalPage;
@property(assign, nonatomic) int currentPage;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZPhotoBrowserView : UIView <UIScrollViewDelegate, MQZImageViewDelegate> {
	UIScrollView* _scrollView;
	id<MQZPhotoBrowserViewDelegate> _dataSource;
	NSMutableDictionary* _imageViews;
	int _oldPage;
	int _currentPage;
	BOOL _isLayout;
	BOOL _isScroll;
}
@property(assign, nonatomic, setter=setCurrentPage:) int currentPage;
@property(retain, nonatomic) NSMutableDictionary* imageViews;
@property(assign, nonatomic) id<MQZPhotoBrowserViewDelegate> dataSource;
-(void).cxx_destruct;
-(void)handleDidReceiveMemoryWarningNotification:(id)handle;
-(CGPoint)getCurrentImageViewPosition;
-(id)getCurrentImageView;
-(id)getCurrentImagePath;
-(id)getCurrentThumbImage;
-(id)getCurrentImage;
-(void)longPressDetected:(id)detected;
-(void)singleTapDetected:(id)detected;
-(CGPoint)contentOffsetForPage:(int)page;
-(CGRect)frameForPage:(int)page;
-(CGSize)contentSizeForScrollView;
-(CGRect)frameForScrollView;
-(void)setFrame:(CGRect)frame;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)deletePhotos:(int)photos atIndex:(int)index;
-(void)insertPhotos:(int)photos atIndex:(int)index;
-(void)updateContents;
-(void)prepareCurrentPageImageViews:(int)views isSetCurrentPage:(BOOL)page;
-(void)removeAllImageViewsExceptIndexSet:(id)set;
-(void)releaseScrollViewWithPage:(int)page;
-(id)loadScrollViewWithPage:(int)page;
-(id)getImageViewAtPage:(int)page;
-(void)setCurrentPageCanDownload;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame withDataSource:(id)dataSource;
@end

@interface MQZPhotoModel : QzonePhotoModel {
	int _index;
	int _total;
}
@property(assign, nonatomic) int total;
@property(assign, nonatomic) int index;
-(id)getSharedDraftKey;
-(id)getCommentDraftKey;
-(id)getIdentity;
-(id)initWithQzonePhotoModel:(id)qzonePhotoModel;
@end

@interface MQZPhotoUtil : NSObject {
}
+(CGRect)getThumbImageRegion:(id)region inThumbRect:(CGRect)thumbRect;
+(CGRect)getThumbImageShowRect:(id)rect thumbRegion:(CGRect)region inThumbRect:(CGRect)thumbRect;
+(CGRect)getThumbImageShowRect:(id)rect inThumbRect:(CGRect)thumbRect;
+(float)getMaximumZoomScale:(CGSize)scale inView:(CGSize)view;
+(CGRect)getFitWidthFrame:(CGSize)frame inView:(CGSize)view forOrientation:(int)orientation;
+(CGRect)getFitWidthFrame:(CGSize)frame inView:(CGSize)view;
+(BOOL)isLongImage:(CGSize)image inView:(CGSize)view;
@end

@interface MQZPhoto : NSObject {
	UIImage* _image;
	UIImage* _thumbImage;
	CGRect _thumbRect;
	CGRect _visibleRect;
	NSString* _caption;
	float _progress;
	int _gifStatus;
	long long _fileSize;
	id<MQZPhotoDelegate> _delegate;
	NSString* _photoPath;
	NSString* _thumbPath;
	BOOL _isDownloading;
	BOOL _isDownloadingThumb;
	BOOL _isNolongerUse;
	BOOL _isLoadingInProgress;
	NSLock* _loadLock;
}
@property(assign, nonatomic) id<MQZPhotoDelegate> delegate;
@property(assign) BOOL isLoadingInProgress;
@property(assign) BOOL isNolongerUse;
@property(assign) long long fileSize;
@property(assign) float progress;
@property(retain, nonatomic) NSString* caption;
@property(assign, nonatomic) CGRect visibleRect;
@property(assign, nonatomic) CGRect thumbRect;
@property(retain, nonatomic) NSString* thumbPath;
@property(retain, nonatomic, getter=getPhotoPath) NSString* photoPath;
@property(retain, nonatomic) UIImage* image;
+(id)photoWithPath:(id)path;
+(id)photoWithImage:(id)image;
-(void).cxx_destruct;
-(void)cancelDownloadPhoto;
-(void)downloadThumbPhoto;
-(void)downloadPhoto;
-(void)releaseImage;
-(id)getThumbImage;
-(void)asynLoadImage;
-(id)getImageRaw;
-(id)getImage;
-(id)scaleToFitSize:(id)fitSize;
-(BOOL)isGif;
-(id)initWithPath:(id)path;
-(id)initWithImage:(id)image;
-(id)init;
@end

@interface MQZUrlPhoto : MQZPhoto <IGACanvas> {
@private
	NSString* _photoUrl;
	NSString* _thumbUrl;
}
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* photoUrl;
-(void).cxx_destruct;
-(id)getPhotoPath;
-(id)getThumbImage;
-(void)asynLoadImage;
-(id)getImageRaw;
-(id)getImage;
-(id)scaleToFitSize:(id)fitSize;
-(void)handleImageFailed:(id)failed error:(int)error desc:(id)desc;
-(void)handleImageProgress:(id)progress finished:(int)finished total:(int)total;
-(void)updateCanvas:(id)canvas;
-(void)cancelDownloadPhoto;
-(void)downloadThumbPhoto;
-(void)downloadPhoto;
-(void)dealloc;
@end

@interface QZUploadSvrExcetion : NSObject {
}
+(BOOL)processSvrError:(id)error;
@end

@interface QZTraceString : NSObject {
	NSMutableString* _trace;
	MQZStatisticsUpload* _uploadReport;
}
@property(retain, nonatomic) MQZStatisticsUpload* uploadReport;
@property(retain, nonatomic) NSMutableString* trace;
-(void)traceFormat:(id)format arguments:(void*)arguments;
-(void)traceFormat:(id)format;
-(void)traceStr:(id)str;
-(void)traceTime;
-(id)visiableTimeString;
-(void)dealloc;
-(id)init;
@end

@interface UMLogger : NSObject {
}
+(void)reportLog:(id)log size:(long long)size cost:(long long)cost errCode:(int)code msg:(id)msg svr:(id)svr appid:(id)appid cTime:(double)time flow:(long long)flow retry:(int)retry;
+(void)reportLog:(long long)log cost:(long long)cost errCode:(int)code msg:(id)msg;
@end

@interface MsfConnection : NSObject <NSStreamDelegate> {
@private
	NSString* address;
	unsigned short port;
	NSInputStream* input;
	NSOutputStream* output;
	NSData* _sendPacket;
	MSFNetReachability* _reachability;
	id<MSFNetDelegate> delegate;
	NSTimer* _timer;
	BOOL _bReadingPacketLen;
	unsigned char _PacketLenBuf[4];
	unsigned char _pPacketBuf[2048000];
	int _iLenToRead;
	int _iLenHaveRead;
	unsigned char _PacketLenBuf2[150];
	int _NetworkSate;
	BOOL _isWriting;
	int _protocal;
	int _retryCnt;
}
@property(retain, nonatomic) NSOutputStream* output;
@property(retain, nonatomic) NSInputStream* input;
@property(assign, nonatomic) unsigned short port;
@property(retain, nonatomic) NSString* address;
@property(assign, nonatomic) id<MSFNetDelegate> delegate;
@property(assign, nonatomic) int retryCnt;
@property(assign, nonatomic) int protocal;
@property(retain, nonatomic) NSData* sendPacket;
-(void)dealloc;
-(void)TrySend;
-(int)sendRaw:(id)raw;
-(int)send:(id)send;
-(id)httpPack:(id)pack host:(id)host;
-(void)writeDataErrorError;
-(int)netType;
-(BOOL)IsConnecting;
-(BOOL)IsConnected;
-(void)DisConnect;
-(void)Connect:(const char*)connect port:(int)port timeOut:(float)anOut;
-(void)check_connect_timeout;
-(void)clearDelegate;
-(void)invalidTimer;
-(id)init;
-(void)reachabilityChanged:(id)changed;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)handleStreamSpaceAvailable;
-(void)handleStreamBytesAvailable;
-(void)handleStreamBytesAvailableHttp2;
-(id)httpUnpack:(id)unpack;
-(void)clearReadParams;
-(void)handleStreamEndEncountered:(id)encountered;
-(void)handleStreamErrorOccurred:(id)occurred;
-(void)handleStreamOpenCompleted:(id)completed;
@end

@interface MSFNetReachability : NSObject {
	BOOL localWiFiRef;
	SCNetworkReachabilityRef reachabilityRef;
}
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostName:(id)hostName;
-(int)currentReachabilityStatus;
-(BOOL)connectionRequired;
-(int)networkStatusForFlags:(unsigned)flags;
-(int)localWiFiStatusForFlags:(unsigned)flags;
-(void)dealloc;
-(void)stopNotifier;
-(BOOL)startNotifier;
@end

@interface NetworkRunloop : NSObject {
	NSThread* _thread;
	NSRunLoop* _loop;
}
@property(readonly, assign, nonatomic, getter=getThreadName) NSString* threadName;
@property(readonly, assign, nonatomic) NSRunLoop* loop;
@property(readonly, assign, nonatomic) NSThread* thread;
+(id)instance;
-(void)networkRunLoopThreadEntry;
-(void)start;
-(id)init;
@end

@interface QZQuanInfo : NSObject {
	unsigned _quanId;
	unsigned _writer;
	unsigned _owner;
	unsigned _targeter;
	NSString* _writerNick;
	NSString* _ownerNick;
	NSString* _targeterNick;
	long long _time;
	CGRect _rect;
	unsigned _iSrc;
	NSString* _ext;
	QZMarkContentBox* _markContentBox;
}
@property(retain, nonatomic) QZMarkContentBox* markContentBox;
@property(retain, nonatomic) NSString* ext;
@property(assign, nonatomic) unsigned iSrc;
@property(assign, nonatomic) CGRect rect;
@property(assign, nonatomic) long long time;
@property(retain, nonatomic) NSString* targeterNick;
@property(retain, nonatomic) NSString* ownerNick;
@property(retain, nonatomic) NSString* writerNick;
@property(assign, nonatomic) unsigned targeter;
@property(assign, nonatomic) unsigned owner;
@property(assign, nonatomic) unsigned writer;
@property(assign, nonatomic) unsigned quanId;
-(void)dealloc;
@end

@interface QZMarkContentBox : NSObject {
	NSString* _contentBoxType;
	NSString* _color;
	NSString* _msg;
	NSString* _ext;
}
@property(retain, nonatomic) NSString* ext;
@property(retain, nonatomic) NSString* msg;
@property(retain, nonatomic) NSString* color;
@property(retain, nonatomic) NSString* contentBoxType;
-(void)dealloc;
@end

@interface QZUploadManager : NSObject {
	NSMutableArray* _files;
	int _maxUpCnt;
	id<QZUploadDelegate> _uploaddelegate;
	id<QZUploadDelegate> _mooddelegate;
	NSMutableArray* _moodfiles;
@private
	NSMutableArray* _req_queue;
	NSTimer* _checkTimer;
	double _beginTime;
	int _succNum;
	int _failNum;
	NSRecursiveLock* _lock;
}
@property(assign, nonatomic) id<QZUploadDelegate> mooddelegate;
@property(assign, nonatomic) int maxUpCnt;
@property(assign, nonatomic) id<QZUploadDelegate> uploaddelegate;
@property(retain) NSMutableArray* moodfiles;
@property(retain) NSMutableArray* files;
+(id)instance;
-(void)notifyProcess:(id)process;
-(void)notifyFail:(id)fail;
-(void)notifySucess:(id)sucess;
-(void)notifyReadyUpload:(id)upload;
-(void)notifyBeginUpload:(id)upload;
-(void)notifyRequestFinish:(id)finish;
-(void)notify:(id)notify connectError:(id)error;
-(void)notifyRequestConnected;
-(void)notify:(id)notify connectOk:(id)ok;
-(id)getNextUploadFile:(int)file;
-(BOOL)pause:(id)pause;
-(void)cancel;
-(void)start;
-(void)openRequest;
-(void)stopCheckTimer;
-(void)startCheckTimer;
-(void)checkState;
-(void)appendItem:(id)item;
-(void)openMoodRequest;
-(BOOL)checkMoodQueue;
-(void)resetMoodTask;
-(void)addMoodTask:(id)task;
-(BOOL)deleteItem:(id)item;
-(void)freeData;
-(void)reset;
-(void)dealloc;
-(id)init;
-(void)freeAllData;
-(void)clearUpInfo;
@end

@interface QZUploadPacket : QZTraceString <NSCoding> {
	int _state;
	NSString* _filePath;
	int _fileType;
	int _cmdId;
	long long _uin;
	NSData* _a2;
	NSData* _b2;
	int _loginType;
	long long _offset;
	NSString* _refer;
	int _netType;
	NSString* _optor;
	int _iSync;
	int _fileFmt;
	NSMutableData* _descData;
	int _descLen;
	NSObject* _param;
	long long _tag;
	long long _uploadTime;
	NSString* _fimeMd5;
	long long _fileSize;
	int _compressTime;
@private
	NSString* _fileMd5;
}
@property(assign, nonatomic) int compressTime;
@property(assign, nonatomic) long long fileSize;
@property(retain, nonatomic) NSString* fileMd5;
@property(assign, nonatomic) long long uploadTime;
@property(readonly, assign, nonatomic) long long tag;
@property(retain, nonatomic) NSObject* param;
@property(retain, nonatomic) NSMutableData* descData;
@property(assign, nonatomic) int fileFmt;
@property(assign, nonatomic) int iSync;
@property(retain, nonatomic) NSString* optor;
@property(assign, nonatomic) int netType;
@property(retain, nonatomic) NSString* refer;
@property(assign, nonatomic) long long offset;
@property(assign, nonatomic) int loginType;
@property(retain, nonatomic) NSData* b2;
@property(retain, nonatomic) NSData* a2;
@property(assign, nonatomic) long long uin;
@property(assign, nonatomic) int cmdId;
@property(assign, nonatomic) int fileType;
@property(retain, nonatomic) NSString* filePath;
+(id)encodeUniPacket:(UniPacket<taf::BufferWriter, taf::BufferReader, std::allocator>*)packet;
-(void)endErrorRDM:(int)rdm andDataLen:(long long)len;
-(void)EndRDM:(long long)rdm;
-(void)BeginRDM:(id)rdm;
-(id)internalInfo;
-(id)getBodyPacket;
-(id)getControlPacket;
-(int)sendDataLength;
-(id)appidName;
-(id)name;
-(id)packFileBody;
-(id)packControlBody;
-(void)setUploadControlReq:(FileUploadControlReq*)req;
-(id)generateDescription;
-(id)packHead;
-(void)setCommonUniPacket:(void*)packet req:(int)req funcName:(const char*)name;
-(void)initRequestHead:(SvcRequestHead*)head;
-(void)setHeadData:(SvcRequestHead*)data;
-(void)setHeadCommonData:(SvcRequestHead*)data;
-(int)randomIn1000;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface QZExifInfo : NSObject <NSCoding> {
	NSString* _cameraMaker;
	NSString* _cameraModel;
	NSString* _exifTime;
	NSString* _latitudeRef;
	NSString* _latitude;
	NSString* _longitudeRef;
	NSString* _longitude;
}
@property(retain, nonatomic) NSString* longitude;
@property(retain, nonatomic) NSString* longitudeRef;
@property(retain, nonatomic) NSString* latitude;
@property(retain, nonatomic) NSString* latitudeRef;
@property(retain, nonatomic) NSString* exifTime;
@property(retain, nonatomic) NSString* cameraModel;
@property(retain, nonatomic) NSString* cameraMaker;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface QZUploadLogParam : NSObject <NSCoding> {
	double _cTime;
}
@property(assign, nonatomic) double cTime;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZUploadPOI : QZUploadPacket {
	NSString* _lbsName;
	NSString* _lbsAddress;
	NSString* _lbsid;
	NSString* _longitude;
	NSString* _latitude;
}
@property(retain, nonatomic) NSString* latitude;
@property(retain, nonatomic) NSString* longitude;
@property(retain, nonatomic) NSString* lbsid;
@property(retain, nonatomic) NSString* lbsAddress;
@property(retain, nonatomic) NSString* lbsName;
-(void)dealloc;
@end

@interface QZUploadPhoto : QZUploadPOI {
	int _picType;
	int _numType;
	NSString* _picTitle;
	NSString* _picDesc;
	NSString* _albumName;
	NSString* _albumId;
	int _albumType;
	int _picWidth;
	int _picHeight;
	int _totalNum;
	int _curNum;
	int _succNum;
	int _failNum;
	NSMutableArray* _quans;
	int _waterMark;
	QZExifInfo* _exifInfo;
	long long _batchId;
	int _needFeeds;
	NSMutableDictionary* _mapExt;
	id _obj;
}
@property(retain, nonatomic) id obj;
@property(retain, nonatomic) NSMutableDictionary* mapExt;
@property(assign, nonatomic) int needFeeds;
@property(assign, nonatomic) long long batchId;
@property(retain, nonatomic) QZExifInfo* exifInfo;
@property(assign, nonatomic) int waterMark;
@property(retain, nonatomic) NSMutableArray* quans;
@property(assign, nonatomic) int failNum;
@property(assign, nonatomic) int succNum;
@property(assign, nonatomic) int curNum;
@property(assign, nonatomic) int totalNum;
@property(assign, nonatomic) int picHeight;
@property(assign, nonatomic) int picWidth;
@property(assign, nonatomic) int albumType;
@property(retain, nonatomic) NSString* albumId;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSString* picDesc;
@property(retain, nonatomic) NSString* picTitle;
@property(assign, nonatomic) int numType;
@property(assign, nonatomic) int picType;
-(id)appidName;
-(id)name;
-(id)generateDescription;
-(void)initUploadPicInfo:(UploadPicInfoReq*)info;
-(void)LogUploadPicInfoReq:(UploadPicInfoReq*)req;
-(void)initPicturePOIInfo:(UploadPicInfoReq*)info;
-(void)initPictureExif:(UploadPicInfoReq*)exif;
-(void)initUploadPicExtendInfo:(PicExtendInfo*)info;
-(void)setUploadControlReq:(FileUploadControlReq*)req;
-(void)setFilePath:(id)path;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)getPicClientKey;
-(void)dealloc;
-(id)init;
@end

@interface QZUploadUpp : QZUploadPacket {
	NSString* _appid;
	NSString* _userid;
	NSString* _albumid;
	NSString* _picTitle;
	NSString* _picDesc;
	int _type;
	unsigned _uploadip;
	QZUppPhotoSepcInfo* _photoSpecInfo;
	NSMutableDictionary* _mapExt;
}
@property(retain, nonatomic) NSMutableDictionary* mapExt;
@property(retain, nonatomic) QZUppPhotoSepcInfo* photoSpecInfo;
@property(retain, nonatomic) NSString* picDesc;
@property(retain, nonatomic) NSString* picTitle;
@property(retain, nonatomic) NSString* albumid;
@property(retain, nonatomic) NSString* userid;
@property(retain, nonatomic) NSString* appid;
-(void)BeginRDM:(id)rdm;
-(id)appidName;
-(void)setFilePath:(id)path;
-(id)generateDescription;
-(void)setUploadControlReq:(FileUploadControlReq*)req;
-(void)dealloc;
-(id)init;
@end

@interface QZUploadSound : QZUploadPacket {
	int _soundFmt;
	int _voiceLen;
	NSString* _clientIP;
	NSString* _ServerIP;
}
@property(retain, nonatomic) NSString* ServerIP;
@property(retain, nonatomic) NSString* clientIP;
@property(assign, nonatomic) int voiceLen;
@property(assign, nonatomic) int soundFmt;
-(id)appidName;
-(id)generateDescription;
-(void)initUploadSoundReq:(UploadReq*)req;
-(void)dealloc;
-(id)init;
@end

@interface QZUploadVideo : QZUploadPacket {
	NSString* _title;
	NSString* _sDesc;
	int _flag;
	int _curOffset;
	int _blockSize;
	int _descSize;
}
@property(assign, nonatomic) int flag;
@property(retain, nonatomic) NSString* sDesc;
@property(retain, nonatomic) NSString* title;
-(int)curSendLen;
-(int)totalSendLen;
-(void)sendFinish;
-(id)nextFileData;
-(id)loadFileData:(unsigned)data Len:(int)len;
-(id)getBodyPacket;
-(id)appidName;
-(id)generateDescription;
-(void)initUploadVideoInfo:(UploadVideoInfoReq*)info;
-(void)dealloc;
-(id)init;
@end

@interface QZUploadPortait : QZUploadPacket {
	int _portaitType;
	int _subid;
}
@property(assign, nonatomic) int subid;
@property(assign, nonatomic) int portaitType;
-(id)appidName;
-(id)generateDescription;
-(id)init;
@end

@interface QZUppPhotoSepcInfo : NSObject {
	unsigned _iPhotoSize;
	unsigned _iPhotoWidth;
	unsigned _iPhotoHeight;
	unsigned _iPhotoType;
}
@property(assign, nonatomic) unsigned iphotoType;
@property(assign, nonatomic) unsigned iphotoHeight;
@property(assign, nonatomic) unsigned iphotoWidth;
@property(assign, nonatomic) unsigned iphotoSize;
@end

@interface QZUploadRequest : NSOperation <QZUploadHttpDelegate, MSFNetDelegate> {
	int _state;
	QZUploadPacket* _packet;
	NSTimer* _dataTimer;
	QZUploadManager* _uploadManager;
	BOOL finished;
	BOOL inProgress;
	BOOL cancelled;
	int _retryCnt;
	int _dataTimeoutSecs;
	NSThread* _curThread;
	double _fileTime;
	MsfConnection* _connection;
	QZUploadHttp* _httpUpload;
	int _protType;
	NSString* _address;
	int _port;
	NSArray* _portList;
	int _portIndex;
	int _netRetryCnt;
	int _ipIndex;
	NSMutableArray* _ipList;
	int _queuetype;
	QZUpIpInfo* _ipModel;
}
@property(retain, nonatomic) QZUpIpInfo* ipModel;
@property(assign, nonatomic) int queuetype;
@property(retain, nonatomic) NSMutableArray* ipList;
@property(assign, nonatomic) NSThread* curThread;
@property(retain, nonatomic) QZUploadManager* uploadManager;
@property(assign, nonatomic) int portIndex;
@property(retain, nonatomic) NSArray* portList;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* address;
@property(assign, nonatomic) int protType;
@property(retain, nonatomic) QZUploadHttp* httpUpload;
@property(retain, nonatomic) MsfConnection* connection;
@property(retain, nonatomic) QZUploadPacket* packet;
@property(assign, nonatomic) int state;
+(id)sharedQueue;
+(const char*)covertHostToIp2:(id)ip2;
+(const char*)covertHostToIp:(id)ip;
+(const char*)covertHostToIpPure:(id)ipPure;
+(BOOL)isRealNetReachable;
+(BOOL)isNetReachable;
-(void)notifyFail:(id)fail;
-(void)notifySucess:(id)sucess;
-(void)notifyProgress:(long long)progress total:(long long)total;
-(int)curIndex;
-(void)notifyBegin:(id)begin;
-(void)cancelDataTimerInSameThread;
-(void)cancelDataTimer;
-(void)updateDataTimer;
-(void)dataInteractTimeOut:(id)anOut;
-(void)uploadSuccss:(float)succss;
-(void)uploadErrCode:(int)code log:(id)log;
-(double)getCompressTime;
-(id)getUppAppid;
-(void)sendNextFile;
-(void)retrySendFile;
-(BOOL)isCancelled;
-(BOOL)isExecuting;
-(BOOL)isFinished;
-(BOOL)isConcurrent;
-(void)applicationWillEnterBackground;
-(void)applicationWillEnterForeground;
-(void)finishUpload;
-(void)start;
-(void)checkStatus;
-(BOOL)checkTimerState;
-(BOOL)checkFileStatus;
-(BOOL)checkNetStatus;
-(void)markAsFinished;
-(void)cancelFile:(id)file;
-(void)cancelCurrentFile;
-(void)cancel;
-(void)upload;
-(void)throwErrorCode:(int)code domain:(id)domain;
-(void)dealloc;
-(void)clearConnection;
-(id)init;
-(void)reCreateIpList;
-(void)initOtherIpList:(id)list;
-(void)initPicIpList:(id)list;
-(id)optimumIp:(id)ip;
-(void)resetHost;
-(void)resetProtocol;
-(void)resetIp;
-(BOOL)swithToNextProtocol;
-(BOOL)swithToNextIP;
-(id)backIp2;
-(id)backIp1;
-(id)backupIp:(id)ip;
-(id)domainName2;
-(id)domainName1;
-(id)domainIp:(id)ip;
-(void)connectNextNetStat;
-(void)retryConectNet;
-(void)Notify:(id)notify SendResultState:(int)state length:(int)length;
-(void)Notify:(id)notify ApnState:(int)state apn:(int)apn;
-(void)Notify:(id)notify oldState:(int)state newState:(int)state3 errCode:(int)code;
-(void)netCancel;
-(void)connectServer:(id)server;
-(void)httpUploadFail:(id)fail;
-(void)httpUploadSend:(int)send total:(int)total;
-(void)httpUploadRecvData:(id)data;
-(void)Notify:(id)notify Data:(id)data;
-(void)recvDataProcess:(id)process;
-(void)decodePacket:(id)packet;
-(void)printErrorLog:(id)log resp:(id)resp;
-(void)processUploadResp:(id)resp;
-(void)printSendFinishLog;
-(void)processProgressResp:(id)resp;
-(void)processControlResp:(id)resp;
-(void)setAvailableIp:(id)ip;
-(void)processRespError:(id)error;
-(void)sendDataPacket:(long long)packet uploadTime:(long long)time;
-(void)sendControlPacket;
-(void)prePacketInit;
-(void)send:(id)send;
-(BOOL)needConnectSvr;
-(void)connectTcpSvr;
-(BOOL)requestDataIsValid;
-(int)networkType;
@end

@interface QZUploadRespPacket : NSObject {
	int _retCode;
	int _retSubCode;
	NSString* _errDesc;
	int _fileType;
	int _cmdId;
}
@property(assign, nonatomic) int cmdId;
@property(assign, nonatomic) int fileType;
@property(retain, nonatomic) NSString* errDesc;
@property(assign, nonatomic) int retSubCode;
@property(assign, nonatomic) int retCode;
+(id)decodePacket:(id)packet;
+(BOOL)decodePackageWithData:(id)data packet:(UniPacket<taf::BufferWriter, taf::BufferReader, std::allocator>*)packet;
+(id)genErrorPacket:(int)packet info:(id)info;
-(void)decodeBody:(void*)body;
-(void)dealloc;
@end

@interface QZUploadControlResp : QZUploadRespPacket {
	long long _offset;
	long long _serverTime;
}
@property(assign, nonatomic) long long serverTime;
@property(assign, nonatomic) long long offset;
-(void)decodeBody:(void*)body;
-(void)dealloc;
@end

@interface QZUppUploadControlResp : QZUploadControlResp {
	NSString* _albumid;
	NSString* _photoid;
	NSString* _url;
	NSMutableDictionary* _mapSpecInfo;
}
@property(retain, nonatomic) NSMutableDictionary* mapSpecInfo;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* photoid;
@property(retain, nonatomic) NSString* albumid;
-(void)decodeBody:(void*)body;
-(void)dealloc;
@end

@interface QZUploadProgressResp : QZUploadRespPacket {
	long long _totalLen;
	long long _recvLen;
}
@property(assign, nonatomic) long long recvLen;
@property(assign, nonatomic) long long totalLen;
-(void)decodeBody:(void*)body;
@end

@interface QZUploadPicInfoResp : QZUploadRespPacket {
	NSString* _albumId;
	NSString* _sUrl;
	NSString* _sPhotoId;
	NSString* _bUrl;
	NSString* _bPhotoId;
	CGSize _bSize;
	NSString* _hUrl;
	NSString* _hPhotoId;
	CGSize _hSize;
	NSString* _smallUrl;
	NSString* _mediumUrl;
	NSString* _bigUrl;
	NSString* _thumbUrl;
	NSString* _orignalUrl;
}
@property(retain, nonatomic) NSString* orignalUrl;
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* bigUrl;
@property(retain, nonatomic) NSString* mediumUrl;
@property(retain, nonatomic) NSString* smallUrl;
@property(assign, nonatomic) CGSize hSize;
@property(retain, nonatomic) NSString* hPhotoId;
@property(retain, nonatomic) NSString* hUrl;
@property(assign, nonatomic) CGSize bSize;
@property(retain, nonatomic) NSString* bPhotoId;
@property(retain, nonatomic) NSString* bUrl;
@property(retain, nonatomic) NSString* sPhotoId;
@property(retain, nonatomic) NSString* sUrl;
@property(retain, nonatomic) NSString* albumId;
-(id).cxx_construct;
-(void)decodeBody:(void*)body;
-(void)dealloc;
@end

@interface QZUploadSoundInfoResp : QZUploadRespPacket {
	int _result;
	NSString* _voiceId;
}
@property(retain, nonatomic) NSString* voiceId;
@property(assign, nonatomic) int result;
-(void)decodeBody:(void*)body;
-(void)dealloc;
@end

@interface QZUploadUppInfoResp : QZUploadRespPacket {
	NSString* _url;
	NSString* _photoId;
	NSMutableDictionary* _mapSpeceInfo;
}
@property(retain, nonatomic) NSMutableDictionary* mapSpeceInfo;
@property(retain, nonatomic) NSString* photoId;
@property(retain, nonatomic) NSString* url;
-(void)decodeBody:(void*)body;
-(void)dealloc;
@end

@interface QZUploadVideoInfoResp : QZUploadRespPacket {
	NSString* _vid;
}
@property(retain, nonatomic) NSString* vid;
-(void)decodeBody:(void*)body;
-(void)dealloc;
@end

@interface QZUploadUtil : NSObject {
}
+(id)getQua;
+(id)deviceInfo;
+(id)referName;
+(int)maxConcurrentCount;
+(int)dataTimeoutRetryCount;
+(int)dataTimeoutSecs;
+(int)connectTimeoutSecs;
+(int)carrierType;
+(int)getISP;
+(id)carrierMNC;
+(id)carrierName;
+(id)data_md5:(id)a5;
+(id)file_md5:(id)a5;
+(id)qpai_file_md5:(id)a5;
+(id)getPathFileName:(id)name;
+(int)getFileSize:(id)size;
+(CGSize)uploadFileSize:(CGSize)size type:(int)type;
+(QZIntSize)highSize;
+(QZIntSize)midSize;
+(QZIntSize)lowSize;
+(QZIntSize)parseConfigSize:(id)size;
+(CGSize)realSize:(CGSize)size maxSize:(CGSize)size2;
@end

@interface QZUploadHttp : NSObject {
	NSMutableData* _respData;
	NSString* _url;
	int _port;
	NSURLConnection* _connection;
	id<QZUploadHttpDelegate> _delegate;
}
@property(assign, nonatomic) id delegate;
@property(retain, nonatomic) NSURLConnection* connection;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSMutableData* respData;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)postData:(id)data;
-(void)cancel;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneLBSPOIViewController : MQZonePullingTableViewController <MSFSearchBarDelegate, MKMapViewDelegate> {
	MSFSearchBar* _searchBar;
	BOOL _isSearchbarActive;
	NSString* _keyword;
	MKMapView* _mapView;
	QzoneLBSPosition* _lbsPosition;
	int _reqPageIndex;
	int _reqPageIndexBackup;
	QzoneLBSBatchPoiInfo* _lbsBatchPOIInfo;
	QzoneLBSBatchPoiInfo* _lbsBatchPOIInfoBackup;
	NSMutableArray* _poiList;
	NSMutableArray* _poiListBackup;
	id<MQZoneLBSPOIViewControllerDelegate> _delegate;
	BOOL _hasInitData;
	BOOL _useCacheLocation;
	NSString* _searchResultString;
}
@property(retain, nonatomic) NSString* searchResultString;
@property(retain, nonatomic) NSString* keyword;
@property(retain, nonatomic) NSMutableArray* poiListBackup;
@property(retain, nonatomic) NSMutableArray* poiList;
@property(retain, nonatomic) QzoneLBSBatchPoiInfo* lbsBatchPOIInfoBackup;
@property(retain, nonatomic) QzoneLBSBatchPoiInfo* lbsBatchPOIInfo;
@property(retain, nonatomic) QzoneLBSPosition* lbsPosition;
@property(retain, nonatomic) MKMapView* mapView;
@property(retain, nonatomic) MSFSearchBar* searchBar;
@property(assign, nonatomic) id<MQZoneLBSPOIViewControllerDelegate> delegate;
+(void)showDeniedAlert;
-(void).cxx_destruct;
-(void)mapView:(id)view annotationView:(id)view2 calloutAccessoryControlTapped:(id)tapped;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)searchBar:(id)bar cancelButtonClick:(BOOL)click;
-(void)searchBarValueChange:(id)change;
-(void)searchBarEndEdit:(id)edit;
-(void)searchBarStartEdit:(id)edit;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)onGetPOIListNotify:(id)notify;
-(int)onGetLocationNotify:(id)notify;
-(void)searchPOIListAtPageIndex:(int)pageIndex;
-(void)getPOIListAtPageIndex:(int)pageIndex;
-(BOOL)refreshLocation:(BOOL)location;
-(void)rightButtonClick:(id)click;
-(void)handleSearchbarDeactive;
-(void)addMapViewAnnotations:(id)annotations;
-(void)resetMapViewRegion;
-(BOOL)onLoadMore;
-(BOOL)onHasMore;
-(int)onGetLastRefreshTime;
-(BOOL)onRefresh;
-(void)checkFootViewState;
-(void)initNotificationObservers:(id)observers;
-(void)setTableHeaderView:(BOOL)view;
-(id)createMapView;
-(id)createSearchBar;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneLBSAnnotation : NSObject <MKAnnotation> {
	XXStruct_zYrK5D lbsCoordinate;
	NSString* lbsTitle;
	NSString* lbsSubTitle;
	QzoneLBSPoiInfo* lbsPoiInfo;
}
@property(retain, nonatomic) QzoneLBSPoiInfo* lbsPoiInfo;
@property(retain, nonatomic) NSString* lbsSubTitle;
@property(retain, nonatomic) NSString* lbsTitle;
@property(assign, nonatomic) XXStruct_zYrK5D lbsCoordinate;
-(void).cxx_destruct;
-(id)subtitle;
-(id)title;
-(XXStruct_zYrK5D)coordinate;
-(void)dealloc;
@end

@interface QZoneLbsCache : NSObject {
	NSDate* lastLocateSuccessTimeStamp;
}
+(id)instance;
-(BOOL)isPositionAndPoiListOutOfDate:(id)date;
-(void)removePoiInfo:(id)info;
-(void)removePositionInfo:(id)info;
-(void)removeWeatherInfo:(id)info;
-(BOOL)isWeatherInfoOutOfDate:(id)date;
-(BOOL)isNeedToRefreshLocation;
-(id)generateDefaultGPSInfo;
-(void)savePoiListInfo:(id)info;
-(void)savePositionInfo:(id)info;
-(void)savePositionInfo:(id)info andPoiListInfo:(id)info2;
-(void)saveWeatherInfo:(id)info;
-(void)saveGPSInfo:(id)info;
-(id)getLBSDataForKey:(id)key;
-(id)getPoiListInfo;
-(id)getPositionInfo;
-(id)getWeatherInfo;
-(id)getGPSInfo;
-(void)removeGPSData;
-(void)saveGPSData:(id)data;
-(id)getGPSData;
-(void)removeLBSData;
-(void)saveLBSData:(id)data GPSInfo:(id)info;
-(id)getLBSData;
-(void)dealloc;
@end

@interface MQUtil : NSObject {
}
+(id)getHost:(id)host;
+(long long)genSessionID;
@end

@interface QzoneFeedOutShare : NSObject <NSCoding, NSCopying> {
@private
	NSString* title;
	NSString* summary;
	NSMutableDictionary* photoUrls;
}
@property(retain, nonatomic) NSMutableDictionary* photoUrls;
@property(retain, nonatomic) NSString* summary;
@property(retain, nonatomic) NSString* title;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QzoneFeedPicUrl : NSObject <NSCoding, NSCopying> {
@private
	NSString* url;
	int width;
	int height;
	int focusX;
	int focusY;
}
@property(assign, nonatomic) int focusY;
@property(assign, nonatomic) int focusX;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) int width;
@property(retain, nonatomic) NSString* url;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface QZNotificationSetUncare : QZEngineNotificationInfoBase {
@private
	int _retCode;
	int _careStatus;
	int _actionType;
	NSArray* _uinList;
}
@property(retain, nonatomic) NSArray* uinList;
@property(assign, nonatomic) int actionType;
@property(assign, nonatomic) int careStatus;
@property(assign, nonatomic) int retCode;
-(void)dealloc;
@end

@interface QZNotificationSetBlack : QZEngineNotificationInfoBase {
@private
	int _retCode;
	int _actionType;
	NSArray* _uinList;
}
@property(retain, nonatomic) NSArray* uinList;
@property(assign, nonatomic) int actionType;
@property(assign, nonatomic) int retCode;
-(void)dealloc;
@end

@interface WnsSdkUtil : NSObject {
}
+(id)sharedInstance;
-(id)unpackWnsPacket:(id)packet;
-(id)packWnsPacket:(long long)packet cmd:(id)cmd data:(id)data compress:(BOOL)compress appId:(int)anId qua:(id)qua deviceInfo:(id)info retryInfo:(id)info8 extra:(void*)extra;
-(int)getSeq;
@end

@interface GAContentItem : NSObject <NSCoding, NSCopying> {
@private
	int _contentType;
	NSString* _text;
	NSString* _url;
	long long _uin;
	NSString* _nick;
	UIColor* _textColor;
	BOOL isAppStoreLink;
}
@property(assign, nonatomic) BOOL isAppStoreLink;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) NSString* nick;
@property(assign, nonatomic) long long uin;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) int contentType;
+(id)createURLItemWithURL:(id)url URLDescription:(id)description;
+(id)createUserItemWithUin:(long long)uin nick:(id)nick textColor:(id)color;
-(BOOL)compareContent:(id)content;
-(id)description;
-(BOOL)isEqual:(id)equal;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface GAEmoImageView : UIImageView <TTURLRequestDelegate> {
	unsigned _emoSvrIndex;
	NSString* _url;
	TTURLRequest* _request;
}
-(BOOL)loadImg:(unsigned)img;
-(void)loadGifView:(id)view;
-(void)requestDidFinishLoad:(id)request;
-(void)request:(id)request didFailLoadWithError:(id)error;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface GAFaceImageView : UIImageView <IGACanvas> {
	long long _uin;
	id _target;
	SEL _action;
}
@property(assign, nonatomic) long long uin;
-(void)updateCanvas:(id)canvas;
-(void)addTarget:(id)target action:(SEL)action;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)stopRequest;
-(void)getFaceImage:(long long)image;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface GAImageUtilities : NSObject {
}
+(CGContextRef)createContextWithImage:(id)image imageRect:(CGRect*)rect clipRect:(CGRect)rect3;
+(id)scaleImage:(id)image scaleW:(float)w scaleH:(float)h clip:(CGSize)clip isCenter:(BOOL)center;
+(id)scaleImage:(id)image viewSize:(CGSize)size;
+(id)createRoundedRectImage:(id)image size:(CGSize)size radius:(float)radius;
+(BOOL)isAlphaChanelImage:(id)image;
+(BOOL)isLongImage:(CGSize)image imageSizeType:(int)type;
+(id)image:(id)image fillSize:(CGSize)size;
@end

@interface CInvokeDelegate : NSObject {
	id _target;
	SEL _sel;
	id _param;
}
@property(retain, nonatomic) id param;
@property(assign, nonatomic) SEL sel;
@property(assign, nonatomic) id target;
-(void)invokeTargetFun;
-(void)dealloc;
@end

@interface GALayoutInfo : NSObject {
	CGRect _rect;
	NSMutableArray* _items;
	BOOL _isInitItemUIViews;
	UIView* _viewCtrls;
	BOOL _hasDisplayed;
	BOOL _showDelete;
	NSMutableString* _voiceover;
}
@property(retain, nonatomic) NSMutableString* voiceover;
@property(assign, nonatomic) BOOL showDelete;
@property(assign, nonatomic) BOOL hasDisplayed;
@property(readonly, assign, nonatomic, getter=getViewCtrls) UIView* viewCtrls;
@property(retain, nonatomic) NSMutableArray* items;
@property(assign, nonatomic) CGRect rect;
-(void)drawRect:(CGRect)rect;
-(id)itemWithTag:(int)tag;
-(void)insertItems:(id)items;
-(void)insertItem:(id)item aboveItem:(id)item2;
-(void)insertItem:(id)item belowItem:(id)item2;
-(void)insertItem:(id)item atIndex:(unsigned)index;
-(void)addItems:(id)items;
-(void)addItem:(id)item;
-(void)setCurrentY:(float)y;
-(float)currentY;
-(void)decreaseHeight:(float)height;
-(void)increaseHeight:(float)height;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

@interface GAMultiThreadObject : NSObject {
	NSRecursiveLock* _lock;
}
-(void)unlock;
-(void)lock;
-(void)dealloc;
-(id)init;
@end

@interface GAOperationQueue : NSOperationQueue {
	NSMutableArray* _optStack;
	NSLock* _lock;
}
+(id)getOperationQueue;
-(void)addOperation:(id)operation;
-(void)setSuspended:(BOOL)suspended;
-(void)processNextOpt;
-(void)dealloc;
-(id)init;
@end

@interface GATools : NSObject {
}
+(id)substringByWidth:(id)width font:(id)font maxWidth:(int)width3;
@end

@interface GAUserEngine : NSObject <IFaceObserver> {
	NSOperationQueue* _operationQueue;
}
+(id)instance;
-(id)getFriendByAccount:(long long)account;
-(id)getUserInfoByAccount:(long long)account;
-(id)getNicknameByAccount:(long long)account;
-(id)getRecentAndFriendList;
-(id)getRecentFriendList;
-(id)getFriendList;
-(void)removeCanvas:(id)canvas;
-(void)getUserHeadByUrl:(id)url target:(id)target;
-(void)getUserHead:(long long)head target:(id)target;
-(void)getUserHead:(long long)head face:(int)face target:(id)target;
-(id)getCustomFace:(long long)face target:(id)target;
-(id)getFaceFromCache:(long long)cache;
-(void)notifyLoadHeadImageFinished:(id)finished;
-(id)createCanvasKeyForCustomFace:(long long)customFace;
-(id)sid;
-(id)loginUserNickName;
-(long long)loginUser;
-(void)dealloc;
-(id)init;
@end

@interface GAUserInfo : NSObject <NSCoding, NSCopying> {
@private
	long long _uin;
	NSString* _nick;
	int _faceID;
	BOOL _sex;
	BOOL _age;
	NSString* _signature;
	int _qqVipLevel;
	int _qzVipLevel;
	int _sqVipLevel;
}
@property(assign, nonatomic) int sqVipLevel;
@property(assign, nonatomic) int qzVipLevel;
@property(assign, nonatomic) int qqVipLevel;
@property(retain, nonatomic) NSString* signature;
@property(assign, nonatomic) BOOL age;
@property(assign, nonatomic) BOOL sex;
@property(assign, nonatomic) int faceID;
@property(retain, nonatomic) NSString* nick;
@property(assign, nonatomic) long long uin;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface MQZoneMediaItemURL : NSObject {
@private
	int pictureType;
	float width;
	float height;
	NSString* url;
	NSString* clientKey;
}
@property(retain, nonatomic) NSString* clientKey;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) float width;
@property(assign, nonatomic) int pictureType;
+(id)mediaItemURL:(id)url;
+(id)mediaItemURL:(id)url clientKey:(id)key width:(float)width height:(float)height;
+(id)mediaItemURL:(id)url width:(float)width height:(float)height;
+(id)mediaItemURL:(int)url url:(id)url2 width:(float)width height:(float)height;
+(id)mediaItemURL:(int)url url:(id)url2 clientKey:(id)key width:(float)width height:(float)height;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneMediaItem : NSObject {
@private
	int mediaType;
	MQZoneMediaItemURL* thumbMediaURL;
	MQZoneMediaItemURL* smallMediaURL;
	MQZoneMediaItemURL* middleMediaURL;
	MQZoneMediaItemURL* bigMediaURL;
	MQZoneMediaItemURL* orignalMediaURL;
}
@property(retain, nonatomic) MQZoneMediaItemURL* orignalMediaURL;
@property(retain, nonatomic) MQZoneMediaItemURL* bigMediaURL;
@property(retain, nonatomic) MQZoneMediaItemURL* middleMediaURL;
@property(retain, nonatomic) MQZoneMediaItemURL* smallMediaURL;
@property(retain, nonatomic) MQZoneMediaItemURL* thumbMediaURL;
@property(assign, nonatomic) int mediaType;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface BlockKeeper : NSObject {
@private
	id block;
}
@property(copy, nonatomic) id block;
+(id)keeperWithBlock:(id)block;
-(void)dealloc;
@end

@interface GADrawASynImgItem : GADrawItemBase <IGACanvas> {
	id<IGADrawASynImgItemDelegate> _delegate;
	UIImage* _defaultImg;
	UIImage* _relImg;
	int _imgDownloadState;
	UIImageView* _relImgView;
	BOOL _isUseImgView;
@private
	UIColor* _defaultBackgroudColor;
	UIColor* _fillBackgroudColor;
}
@property(assign) id<IGADrawASynImgItemDelegate> delegate;
@property(assign, nonatomic) BOOL isUseImgView;
@property(retain, nonatomic, setter=setRealImg:) UIImage* relImg;
@property(retain, nonatomic, setter=setDefaultImg:) UIImage* defaultImg;
@property(retain, nonatomic) UIColor* fillBackgroudColor;
@property(retain, nonatomic) UIColor* defaultBackgroudColor;
-(void)checkAndStartLoadImg;
-(id)description;
-(void)handleImageFailed:(id)failed error:(int)error desc:(id)desc;
-(void)updateCanvas:(id)canvas;
-(void)addSubViewCtrl:(id)ctrl;
-(void)didReceiveMemoryWarning;
-(void)startAnimation;
-(void)dealloc;
-(id)init;
@end

@interface GADrawFaceItem : GADrawASynImgItem {
	long long _uin;
	NSString* _logo;
}
@property(retain, nonatomic) NSString* logo;
@property(assign, nonatomic) long long uin;
-(id)getTouchEvent:(CGPoint)event;
-(void)drawRect:(CGRect)rect;
-(void)checkAndStartLoadImg;
-(void)updateCanvas:(id)canvas;
-(id)getRoundInfo;
-(id)init;
@end

@interface GADrawNetImgItem : GADrawASynImgItem {
	NSString* _url;
	NSString* _viewImgUrl;
@private
	NSString* clientKey;
}
@property(retain, nonatomic) NSString* clientKey;
@property(retain, nonatomic) NSString* viewImgUrl;
@property(retain, nonatomic) NSString* url;
-(id)getTouchEvent:(CGPoint)event;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneDrawNetImgItem : GADrawASynImgItem {
@private
	MQZoneMediaItem* _mediaItem;
	MQZoneMediaItemURL* _currentMediaURL;
	BOOL _isLongImage;
	BOOL _hasLongImage;
	int _pictureListIndex;
	CGSize _pictureOriginalSize;
	CGRect _pictureDrawRect;
	CGRect _pictureFullRect;
	int _invokeReLayoutCount;
	int _failedToNotifyNeedLayout;
	GAImageClipperParam* _clipperParam;
	int _clipperTag;
}
@property(assign, nonatomic) int clipperTag;
@property(retain, nonatomic) GAImageClipperParam* clipperParam;
@property(readonly, assign, nonatomic) int failedToNotifyNeedLayout;
@property(readonly, assign, nonatomic) int invokeReLayoutCount;
@property(readonly, assign, nonatomic) CGRect pictureFullRect;
@property(readonly, assign, nonatomic) CGRect pictureDrawRect;
@property(readonly, assign, nonatomic) CGSize pictureOriginalSize;
@property(assign, nonatomic) int pictureListIndex;
@property(assign, nonatomic) BOOL hasLongImage;
@property(assign, nonatomic) BOOL isLongImage;
@property(retain, nonatomic) MQZoneMediaItemURL* currentMediaURL;
@property(retain, nonatomic) MQZoneMediaItem* mediaItem;
-(id)description;
-(id)getTouchEvent:(CGPoint)event;
-(void)drawRect:(CGRect)rect;
-(void)checkAndStartLoadImg;
-(void)setRealImg:(id)img;
-(void)handleImageFailed:(id)failed error:(int)error desc:(id)desc;
-(void)updateCanvas:(id)canvas;
-(CGRect)rectInLowerRightCorner:(id)lowerRightCorner;
-(void)setDefaultClipper:(id)clipper;
-(BOOL)compareRectSizeWithClippedViewSize:(CGSize)clippedViewSize;
-(void)checkIsLongImage;
-(void)dealloc;
-(id)init;
@end

@interface MQZoneDrawMusicItem : MQZoneDrawNetImgItem {
@private
	UIImage* _playButton;
	NSString* _musicURL;
}
@property(retain, nonatomic) NSString* musicURL;
@property(retain, nonatomic) UIImage* playButton;
-(id)getTouchEvent:(CGPoint)event;
-(void)drawRect:(CGRect)rect;
-(void)setRealImg:(id)img;
-(void)dealloc;
@end

@interface MQZoneDrawVideoItem : MQZoneDrawNetImgItem {
@private
	UIImage* _playButton;
	NSString* _videoURL;
	NSString* _actionURL;
	int _actionType;
	QzoneFeedVideo* _video;
}
@property(retain, nonatomic) QzoneFeedVideo* video;
@property(assign, nonatomic) int actionType;
@property(retain, nonatomic) NSString* actionURL;
@property(retain, nonatomic) NSString* videoURL;
@property(retain, nonatomic) UIImage* playButton;
-(id)getTouchEvent:(CGPoint)event;
-(void)drawRect:(CGRect)rect;
-(void)setRealImg:(id)img;
-(void)dealloc;
@end

@interface GADrawShadowTextItem : GADrawItemBase {
@private
	NSString* _text;
	UIFont* _font;
	UIColor* _color;
	UIColor* _shadowColor;
	int _textAlignment;
}
@property(assign, nonatomic) int textAlignment;
@property(retain, nonatomic) UIColor* shadowColor;
@property(retain, nonatomic) UIColor* color;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* text;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
@end

@interface GADrawItemText : GADrawItemBase {
	BOOL _drawEllipsis;
	BOOL _isHighlighted;
	NSString* _str;
	UIFont* _font;
	UIColor* _color;
	UIColor* _highlightColor;
	int _textAlignment;
}
@property(assign, nonatomic) int textAlignment;
@property(retain, nonatomic) UIColor* highlightColor;
@property(assign, nonatomic) BOOL isHighlighted;
@property(retain, nonatomic) UIColor* color;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* str;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithStr:(id)str Rect:(CGRect)rect Font:(id)font Color:(id)color;
@end

@interface GADrawTimeItem : GADrawItemText {
	long long _date;
@private
	UIColor* _shadowColor;
}
@property(retain, nonatomic) UIColor* shadowColor;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)getDrawItemVoiceText;
-(id)initWithDate:(long long)date centerPoint:(CGPoint)point Font:(id)font Color:(id)color;
-(id)initWithDate:(long long)date upperRightPoint:(CGPoint)point Font:(id)font Color:(id)color;
-(id)initWithDate:(long long)date upperLeftPoint:(CGPoint)point Font:(id)font Color:(id)color;
@end

@interface GADrawColorItem : GADrawItemBase {
	UIColor* _color;
@private
	UIColor* _borderColor;
	float _borderWidth;
}
@property(assign, nonatomic) float borderWidth;
@property(retain, nonatomic) UIColor* borderColor;
@property(retain, nonatomic) UIColor* color;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
@end

@interface GADrawItemLocalImage : GADrawItemBase {
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithImage:(id)image frame:(CGRect)frame;
@end

@interface MQZoneDrawAudioItem : GADrawItemLocalImage {
	NSString* _audioURL;
	int _audioTime;
	NSString* _cid;
	NSString* _errmsg;
	int _audioIndex;
	id _obj;
}
@property(assign, nonatomic) id obj;
@property(assign, nonatomic) int audioIndex;
@property(retain, nonatomic) NSString* cid;
@property(assign, nonatomic) int audioTime;
@property(retain, nonatomic) NSString* errmsg;
@property(retain, nonatomic) NSString* audioURL;
-(id)getTouchEvent:(CGPoint)event;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)init;
@end

@interface GADrawItemLocalClipImage : GADrawItemBase {
	UIImage* _image;
	CGRect _clipRect;
	float _offsetY;
}
@property(assign, nonatomic) float offsetY;
@property(assign, nonatomic) CGRect clipRect;
@property(retain, nonatomic) UIImage* image;
-(void)clipTransparentEquilateralTriangle:(CGContextRef)triangle rect:(CGRect)rect sideLength:(float)length;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithImage:(id)image frame:(CGRect)frame clipFrame:(CGRect)frame3;
@end

@interface GADrawItemSplitLine : GADrawItemBase {
	BOOL customLine;
	int numOfParts;
	int partIndex;
	float lineWidth;
	UIColor* _lineColor;
}
@property(retain, nonatomic) UIColor* lineColor;
@property(assign, nonatomic) float lineWidth;
@property(assign, nonatomic) int partIndex;
@property(assign, nonatomic) int numOfParts;
@property(assign, nonatomic) BOOL customLine;
-(void)drawRect:(CGRect)rect;
@end

@interface MQZoneDrawItemScrollPhoto : GADrawItemBase {
	NSArray* _photoList;
	int _index;
}
@property(assign, nonatomic) int index;
@property(retain, nonatomic) NSArray* photoList;
-(void)dealloc;
@end

@interface MQZoneDrawItemHighlight : GADrawItemText {
	NSObject* _data;
	UIImage* _selectedBkgndImg;
	BOOL _isBGHighlighted;
@private
	BOOL _enableHighlight;
}
@property(assign, nonatomic) BOOL enableHighlight;
@property(retain, nonatomic) NSObject* data;
-(void)drawRect:(CGRect)rect;
-(BOOL)setBGHighlighted:(BOOL)highlighted touchPoint:(CGPoint)point;
-(id)getTouchEvent:(CGPoint)event;
-(void)dealloc;
-(id)initWithStr:(id)str Rect:(CGRect)rect Font:(id)font Color:(id)color;
@end

@interface MQZoneDrawJumpLinkItem : MQZoneDrawItemHighlight {
	NSString* _url;
	BOOL _isAppStoreLink;
}
@property(assign, nonatomic) BOOL isAppStoreLink;
@property(retain, nonatomic) NSString* url;
-(id)getTouchEvent:(CGPoint)event;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

@interface MQZoneDrawFillView : UIView {
@private
	UIColor* _borderColor;
	UIColor* _color;
	float _borderWidth;
}
@property(assign, nonatomic) float borderWidth;
@property(retain, nonatomic) UIColor* borderColor;
@property(retain, nonatomic) UIColor* color;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
@end

@interface MQZoneDrawFillItem : GADrawColorItem {
	MQZoneDrawFillView* _fillView;
}
-(void)addSubViewCtrl:(id)ctrl;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
@end

@interface GADrawItemBase : NSObject {
	BOOL _handleTouch;
	CGRect _rect;
	int _tag;
}
@property(assign, nonatomic) int tag;
@property(assign, nonatomic) CGRect rect;
@property(assign, nonatomic, getter=isHandleTouch) BOOL handleTouch;
-(void)setCenterY:(float)y;
-(float)centerY;
-(void)setCenterX:(float)x;
-(float)centerX;
-(void)setHeight:(float)height;
-(float)height;
-(void)setWidth:(float)width;
-(float)width;
-(void)setRight:(float)right;
-(float)right;
-(void)setLeft:(float)left;
-(float)left;
-(void)setBottom:(float)bottom;
-(float)bottom;
-(void)setTop:(float)top;
-(float)top;
-(id)getDrawItemVoiceText;
-(id)description;
-(BOOL)setBGHighlighted:(BOOL)highlighted touchPoint:(CGPoint)point;
-(void)addSubViewCtrl:(id)ctrl;
-(id)getTouchEvent:(CGPoint)event;
-(void)drawRect:(CGRect)rect;
-(void)setRectSize:(CGSize)size;
-(id)init;
@end

@interface GADrawRichTextItem : GADrawItemBase {
	NSArray* _cntItemArray;
	UIFont* _textFont;
	UIColor* _textColor;
	int _lineMargin;
	float _startOffsetX;
	BOOL _identifyElement;
	BOOL _isHighlighted;
	UIColor* _highlightColor;
	BOOL _isBGHighlighted;
	int _curClickCntItemIndex;
	UIImage* _selectedBkgndImg;
	NSMutableArray* _drawItemArray;
	unsigned _totalLineCount;
	unsigned _maxLineCount;
	id _itemClickedEventParam;
	UIEdgeInsets _cntEdgeInsets;
	CGRect _cntRect;
	BOOL _supportLongPressed;
	BOOL _isLongPressed;
	BOOL _needSplit;
@private
	float _maxWidthForNickArea;
	UIView* _view;
}
@property(assign, nonatomic) float maxWidthForNickArea;
@property(assign, nonatomic) BOOL needSplit;
@property(assign, nonatomic) BOOL supportLongPressed;
@property(assign, nonatomic) UIView* view;
@property(assign, nonatomic) UIEdgeInsets cntEdgeInsets;
@property(assign, nonatomic) int lineMargin;
@property(retain, nonatomic) id itemClickedEventParam;
@property(assign, nonatomic) BOOL identifyElement;
@property(assign, nonatomic) unsigned totalLineCount;
@property(retain, nonatomic) UIColor* highlightColor;
@property(assign, nonatomic) BOOL isHighlighted;
-(id)getDrawItemArray;
-(id)getCopyableText;
-(id)getDrawItemVoiceText;
-(int)getFirstLineHeight;
-(void)addSubViewCtrl:(id)ctrl;
-(void)setLongPressHighlighted:(BOOL)highlighted;
-(BOOL)isHandleTouch;
-(id)getTouchEvent:(CGPoint)event;
-(void)drawRect:(CGRect)rect;
-(BOOL)setBGHighlighted:(BOOL)highlighted touchPoint:(CGPoint)point;
-(void)truncateTail:(CGRect*)tail;
-(BOOL)layOutText:(int)text isEm:(BOOL)em LayoutLineRect:(CGRect*)rect WithText:(id)text4 withColor:(id)color withFont:(id)font;
-(BOOL)layOutOneContentItem:(int)item LayoutLineRect:(CGRect*)rect CntItem:(id)item3;
-(void)layout;
-(void)dealloc;
-(void)internalInit:(id)init startOffsetX:(float)x leftTop:(CGPoint)top width:(int)width withFont:(id)font withTextColor:(id)textColor maxLineCount:(unsigned)count;
-(id)init:(id)init startOffsetX:(float)x leftTop:(CGPoint)top width:(int)width withFont:(id)font maxLineCount:(unsigned)count;
-(id)init:(id)init startOffsetX:(float)x leftTop:(CGPoint)top width:(int)width withFont:(id)font withTextColor:(id)textColor maxLineCount:(unsigned)count;
-(id)init:(id)init startOffsetX:(float)x leftTop:(CGPoint)top width:(int)width withFont:(id)font withTextColor:(id)textColor;
@end

@interface GADrawTextItemInfo : NSObject {
	int _index;
	CGRect _rect;
	BOOL _isEm;
	UIImage* _emImg;
	unsigned _emSvrIndex;
	NSString* _text;
	UIFont* _font;
	UIColor* _color;
	CTLineRef _line;
}
@property(assign, nonatomic) CTLineRef line;
@property(retain, nonatomic) UIColor* color;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) CGRect rect;
@property(assign, nonatomic) unsigned emSvrIndex;
@property(retain, nonatomic) UIImage* emImg;
@property(assign, nonatomic) BOOL isEm;
@property(assign, nonatomic) int index;
-(void)layout;
-(void)dealloc;
@end

@interface GAUIEvent : NSObject {
	int _eventCmd;
	UITableViewCell* _cell;
	CGRect _clickItemRect;
	id _param;
}
@property(retain, nonatomic) id param;
@property(assign, nonatomic) CGRect clickItemRect;
@property(assign, nonatomic) UITableViewCell* cell;
@property(assign, nonatomic) int eventCmd;
-(void)dealloc;
@end

@interface QZoneGifDecodeManager : NSObject {
	NSMutableArray* _historyURLList;
	NSMutableDictionary* _historyList;
	NSMutableDictionary* _decoderObservers;
	NSMutableDictionary* _operations;
	long long _allBufferBytes;
}
@property(assign, nonatomic) long long allBufferBytes;
@property(retain, nonatomic) NSMutableDictionary* operations;
@property(retain, nonatomic) NSMutableDictionary* decoderObservers;
@property(retain, nonatomic) NSMutableArray* historyURLList;
@property(retain, nonatomic) NSMutableDictionary* historyList;
+(BOOL)checkIfInHistoryListForView:(id)view url:(id)url;
+(void)checkBuffer;
+(BOOL)startLoadEmotionForView:(id)view url:(id)url;
+(BOOL)cancelLoadEmotionForView:(id)view url:(id)url;
+(BOOL)tryLoadFirstFrameGIFForView:(id)view url:(id)url;
+(BOOL)loadAnimationGifForView:(id)view atPath:(id)path;
+(BOOL)loadAnimationGifForViewFromData:(id)data data:(id)data2;
+(id)getOperationQueue;
-(void)dealloc;
-(id)init;
-(void)handleMemoryWarning;
@end

@interface QZoneGifDecode : NSObject {
	int length;
	char* buffer;
	char* backbuffer;
	long long _totalBytes;
	NSMutableArray* _frameList;
	NSMutableArray* _delayList;
	BOOL _isDecodeEnded;
	NSURL* _url;
	NSData* _data;
	GifState* _gifState;
	UIImageView* _imageView;
	int _currentFrame;
	float _total;
@private
	NSString* _emoPath;
}
@property(assign, nonatomic) int currentFrame;
@property(assign, nonatomic) long long totalBytes;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) NSMutableArray* delayList;
@property(retain, nonatomic) NSMutableArray* frameList;
@property(retain, nonatomic) NSData* data;
@property(retain, nonatomic) NSURL* url;
@property(retain, nonatomic) NSString* emoPath;
@property(assign, nonatomic) BOOL isDecodeEnded;
@property(assign, nonatomic) float total;
-(void)dealloc;
-(id)description;
-(void)decodeGifOpeationEnd;
-(void)decodeGifOpeation;
-(void)loadGifBufferAsync;
-(void)decodeFirstFrame;
-(void)freeBuffer;
-(id)decodeRGBToImage;
-(void)loadGifBufferFromData:(id)data;
-(void)loadGifBuffer:(id)buffer neededBuffer:(BOOL)buffer2;
-(void)loadGifBuffer:(id)buffer;
-(void)asyncLoadGifBufferAndDecode;
@end

@interface GAImagePool : NSObject <IGACavasCollection, IGAImagePool, IGAImageDelegate> {
	GAImageStatistic* _statistic;
	GACanvasManager* _canvasManager;
	GAImageCellManager* _imageCellManager;
	NSRecursiveLock* _threadLock;
}
+(id)instance;
-(void).cxx_destruct;
-(id)getLocalImage:(id)image clipType:(int)type clientKey:(id)key;
-(id)getLocalImage:(id)image;
-(void)addCanvas:(id)canvas forPortrait:(long long)portrait;
-(void)updatePortrait:(id)portrait portrait:(id)portrait2;
-(void)imageDownloadFailed:(id)failed error:(int)error desc:(id)desc;
-(void)imageDownloadFinishedButNoCache:(id)cache image:(id)image;
-(void)imageDownloadFinished:(id)finished image:(id)image;
-(void)imageDownloadProgress:(id)progress downloaded:(int)downloaded total:(int)total;
-(void)imageDownloadStart:(id)start;
-(void)getImage:(id)image clipType:(int)type clientKey:(id)key canvas:(id)canvas;
-(void)getImage:(id)image clientKey:(id)key canvas:(id)canvas;
-(id)createCanvasKeyForImage:(id)image clipType:(int)type;
-(void)removeCanvas:(id)canvas;
-(void)removeStatistic:(id)statistic;
-(void)addStatistic:(id)statistic;
-(BOOL)addImageCell:(id)cell;
-(void)removeImageCell:(id)cell;
-(id)keyForUrl:(id)url clipType:(int)type;
-(id)init;
@end

@interface GAImageCache : GAMultiThreadObject {
	NSMutableArray* _indexesOfImages;
}
-(void)setImageToCache:(id)cache withKey:(id)key;
-(id)getImage:(id)image;
-(id)getImageFromCache:(id)cache;
-(BOOL)isImageExist:(id)exist;
-(void)cleanUpCache;
-(void)removeCacheWithKey:(id)key;
-(void)dealloc;
-(id)init;
@end

@interface GACanvasInfo : NSObject {
	int _imageType;
	NSString* _Id;
	UIImage* _image;
	int _clipType;
	CGSize _originalSize;
@private
	NSString* _clientKey;
}
@property(retain, nonatomic) NSString* clientKey;
@property(assign, nonatomic) CGSize originalSize;
@property(assign, nonatomic) int clipType;
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSString* Id;
@property(assign, nonatomic) int imageType;
-(void)dealloc;
@end

@interface GAImageClipInfo : NSObject {
	UIImage* _clippedImage;
	int _clipType;
}
@property(assign, nonatomic) int clipType;
@property(retain, nonatomic) UIImage* clippedImage;
-(void)dealloc;
@end

@interface GAImageRoundInfo : NSObject {
@private
	CGSize size;
	float radius;
}
@property(assign, nonatomic) float radius;
@property(assign, nonatomic) CGSize size;
@end

@interface GACanvasCell : NSObject <IGACanvas> {
}
-(void)updateCanvas:(id)canvas;
-(void)dealloc;
@end

@interface GACanvasManager : GAMultiThreadObject {
@private
	NSMutableDictionary* _urlDict;
}
-(void).cxx_destruct;
-(void)handleImageFailed:(id)failed error:(int)error desc:(id)desc;
-(void)handleImageDownloaded:(id)downloaded image:(id)image;
-(void)handleImageDownloadedButNoCache:(id)cache image:(id)image;
-(void)handleImageProgress:(id)progress finished:(int)finished total:(int)total;
-(void)removeCanvas:(id)canvas;
-(void)addCanvas:(id)canvas url:(id)url clipType:(int)type;
-(id)init;
@end

@interface GAImageClipperBase : NSObject {
	CGSize _viewSize;
}
-(id)calculateClipParam:(CGSize)param;
-(CGSize)getClippedViewSizeWithImageSize:(CGSize)imageSize;
-(BOOL)isViewSizeFlexible;
-(BOOL)isCenter;
-(id)doClipImage:(id)image clipParam:(id)param;
-(id)doClipImage:(id)image;
-(id)initWithViewSize:(CGSize)viewSize;
@end

@interface GAImageFillClipper : GAImageClipperBase {
}
-(id)description;
-(id)calculateClipParam:(CGSize)param;
-(CGSize)getClippedViewSizeWithImageSize:(CGSize)imageSize;
-(BOOL)isViewSizeFlexible;
-(BOOL)isCenter;
@end

@interface GAImageAspectFillClipper : GAImageClipperBase {
}
-(id)description;
-(id)calculateClipParam:(CGSize)param;
-(CGSize)getClippedViewSizeWithImageSize:(CGSize)imageSize;
-(BOOL)isViewSizeFlexible;
-(BOOL)isCenter;
@end

@interface GAImageAspectFitClipper : GAImageClipperBase {
}
-(id)description;
-(id)calculateClipParam:(CGSize)param;
-(CGSize)getClippedViewSizeWithImageSize:(CGSize)imageSize;
-(BOOL)isViewSizeFlexible;
-(BOOL)isCenter;
@end

@interface GAImageFitWidthClipper : GAImageClipperBase {
@private
	float _minHeight;
	float _maximumZoomScale;
}
@property(assign, nonatomic) float maximumZoomScale;
@property(assign, nonatomic) float minHeight;
-(id)description;
-(id)calculateClipParam:(CGSize)param;
-(CGSize)getClippedViewSizeWithImageSize:(CGSize)imageSize;
-(BOOL)isViewSizeFlexible;
-(BOOL)isCenter;
-(id)initWithViewSize:(CGSize)viewSize;
@end

@interface GAImageFillWidthClipper : GAImageFitWidthClipper {
}
-(id)calculateClipParam:(CGSize)param;
@end

@interface GAImageFillWidthFillHeightClipper : GAImageClipperBase {
@private
	float _maximumZoomScale;
}
@property(assign, nonatomic) float maximumZoomScale;
-(id)description;
-(id)calculateClipParam:(CGSize)param;
-(CGSize)getClippedViewSizeWithImageSize:(CGSize)imageSize;
-(BOOL)isViewSizeFlexible;
-(BOOL)isCenter;
-(id)initWithViewSize:(CGSize)viewSize;
@end

@interface GAImageFaceRoundClipper : GAImageClipperBase {
}
-(id)description;
-(id)doClipImage:(id)image clipParam:(id)param;
-(id)calculateClipParam:(CGSize)param;
-(CGSize)getClippedViewSizeWithImageSize:(CGSize)imageSize;
-(BOOL)isViewSizeFlexible;
-(BOOL)isCenter;
@end

@interface GAImageClipperFactory : GAMultiThreadObject {
	NSMutableDictionary* _tagContainer;
	NSMutableDictionary* _standarParamContainer;
}
+(void)exitInstance;
+(id)sharedInstance;
-(id)doClipImage:(id)image clipperTag:(int)tag;
-(id)getClipperParamWithTag:(int)tag imageSize:(CGSize)size;
-(CGSize)getClippedImageSizeWithTag:(int)tag imageSize:(CGSize)size;
-(CGSize)getClippedViewSizeWithTag:(int)tag imageSize:(CGSize)size;
-(id)getClipperWithTag:(int)tag;
-(void)registerStandardParam:(id)param withClipperTag:(int)clipperTag;
-(void)dealloc;
-(id)init;
@end

@interface GAImageClipperParam : NSObject {
	CGSize _clipSize;
	CGSize _viewSize;
	float _scaleWidth;
	float _scaleHeight;
	BOOL _isCenter;
	BOOL _isViewSizeFlexible;
}
@property(assign, nonatomic) BOOL isViewSizeFlexible;
@property(assign, nonatomic) BOOL isCenter;
@property(assign, nonatomic) float scaleHeight;
@property(assign, nonatomic) float scaleWidth;
@property(assign, nonatomic) CGSize viewSize;
@property(assign, nonatomic) CGSize clipSize;
+(id)imageClipperParamWithClipSize:(CGSize)clipSize viewSize:(CGSize)size scaleWidth:(float)width scaleHeight:(float)height isCenter:(BOOL)center isViewSizeFlexible:(BOOL)flexible;
+(id)defaultImageClipperParam;
-(id)description;
@end

@interface GAImageCell : GAMultiThreadObject <QZoneNetworkHTTPDelegate, IGAImageCell> {
	ASIHTTPRequest* _request;
	NSOperationQueue* _operationQueue;
	id<IGAImageDelegate> _delegate;
	NSString* _url;
	id<IGAImagePool> _pool;
	NSInvocationOperation* _operation;
	int _imageSize;
	int _downloaded;
	id _userDataForStatistic;
@private
	id userDataForStatistic;
}
@property(retain, nonatomic) id userDataForStatistic;
@property(readonly, assign) int downloaded;
@property(readonly, assign) int totalSize;
+(id)imageCellWithImagePool:(id)imagePool;
-(void).cxx_destruct;
-(void)cancel;
-(void)freeRequest;
-(void)didStartRequest:(id)request;
-(void)didProgressRequestDownload:(id)download totalLength:(id)length;
-(void)didFailRequest:(id)request;
-(void)didSuccRequest:(id)request;
-(void)getImage:(id)image delegate:(id)delegate;
-(void)dealloc;
-(id)init;
-(void)setPool:(id)pool;
-(int)dowloaded;
-(id)url;
@end

@interface GAImageCellManager : GAMultiThreadObject {
	NSMutableDictionary* _dictImageCells;
}
-(void).cxx_destruct;
-(void)cancelImageDownload:(id)download;
-(void)removeImageCell:(id)cell;
-(id)getImageCell:(id)cell;
-(BOOL)existImageCell:(id)cell;
-(BOOL)addImageCell:(id)cell;
-(id)init;
@end

@interface GALocalInfo : NSObject <NSCoding> {
@private
	NSMutableDictionary* _pathWithUrl;
	NSMutableDictionary* _pathWithKeys;
}
@property(retain, nonatomic) NSMutableDictionary* pathWithUrl;
@property(retain, nonatomic) NSMutableDictionary* pathWithKeys;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface GALocalImageManager : GAMultiThreadObject {
	GALocalInfo* _localInfo;
	NSString* _fileName;
}
-(id)loadLocalImageWithUrl:(id)url;
-(id)loadLocalImageWithClientKey:(id)clientKey;
-(id)loadLocalImageWithPath:(id)path;
-(void)setUrls:(id)urls;
-(id)getLocalPathWithUrl:(id)url;
-(void)setUrl:(id)url withClientKey:(id)clientKey flush:(BOOL)flush;
-(void)setUrl:(id)url withClientKey:(id)clientKey;
-(id)getLocalPathWithClientKey:(id)clientKey;
-(void)setLocalPathes:(id)pathes;
-(void)setLocalPath:(id)path withClientKey:(id)clientKey;
-(void)load;
-(void)flush;
-(id)storeFile;
-(id)DocPath;
-(void)createPath:(id)path;
-(void)dealloc;
-(id)init;
@end

@interface GAImageStatistic : GAMultiThreadObject {
	NSMutableArray* _statistic;
}
-(void)onImageDownloadWithUrl:(id)url errorCode:(int)code errorDesc:(id)desc downloaded:(int)downloaded totalSize:(int)size;
-(void)onImageDownloadBegin:(id)begin;
-(void)removeStatistic:(id)statistic;
-(void)addStatistic:(id)statistic;
-(void)dealloc;
-(id)init;
@end

@interface GAImagePoolStorage : NSObject {
}
+(id)instance;
-(CGSize)getImageSize:(id)size clipType:(int)type;
-(BOOL)saveImageSize:(id)size url:(id)url clipType:(int)type;
-(id)getSizeFile:(id)file clipType:(int)type;
@end

@interface QZNotificationDelComment : QZEngineNotificationInfoBase {
@private
	NSString* _cmtClientId;
	NSString* _cmtId;
	NSString* _clientKey;
	NSString* _ugcKey;
}
@property(retain, nonatomic) NSString* cmtClientId;
@property(retain, nonatomic) NSString* cmtId;
@property(retain, nonatomic) NSString* clientKey;
@property(retain, nonatomic) NSString* ugcKey;
-(void).cxx_destruct;
@end

@interface QZNotificationDelReply : QZEngineNotificationInfoBase {
@private
	NSString* _replyClientId;
	NSString* _cmtClientId;
	NSString* _replyId;
	NSString* _cmtId;
	NSString* _clientKey;
	NSString* _ugcKey;
}
@property(retain, nonatomic) NSString* replyClientId;
@property(retain, nonatomic) NSString* replyId;
@property(retain, nonatomic) NSString* cmtClientId;
@property(retain, nonatomic) NSString* cmtId;
@property(retain, nonatomic) NSString* clientKey;
@property(retain, nonatomic) NSString* ugcKey;
-(void).cxx_destruct;
@end

@interface MQZoneOperatableViewController : MQZonePullingTableViewController <UIActionSheetDelegate> {
	int _delUgcReqID;
	int _delCmtReqID;
	int _delReplyReqID;
	QQActionSheet* _actionSheet;
}
-(int)onNotifyDelReplyResult:(id)result;
-(int)onNotifyDelCmtResult:(id)result;
-(int)onNotifyDelUgcResult:(id)result;
-(void)afterRequestDeleteUgc;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showCommitActionSheetWithMessage:(id)message tag:(int)tag userData:(id)data;
-(void)onAlertViewBtnClicked:(int)clicked atIndex:(int)index cancel:(BOOL)cancel userData:(id)data;
-(void)delReplyWithFeedModel:(id)feedModel comment:(id)comment reply:(id)reply;
-(void)delCmtWithFeedModel:(id)feedModel comment:(id)comment;
-(void)delUgcWithFeedModel:(id)feedModel photoIndex:(int)index;
-(void)registOperationNotify:(id)notify;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)dealloc;
@end

@interface MQZGiftEngine : QZEngineBase {
	SEL giftConfigReadyNotify;
@private
	NSMutableDictionary* _requests;
	id _giftConfigReadyNotifyTarget;
	int _receiverCount;
	NSString* _birthTypeName;
	long _birthItemTypeId;
}
@property(assign, nonatomic) id giftConfigReadyNotifyTarget;
@property(retain, nonatomic) NSString* birthTypeName;
@property(assign, nonatomic) long birthItemTypeId;
@property(assign, nonatomic) int receiverCount;
+(id)instance;
-(void).cxx_destruct;
-(void)saveGiftTypeArray:(id)array forceInReturn:(BOOL)aReturn;
-(id)getLocalGiftTypeArray:(BOOL)array;
-(id)giftCachePath:(BOOL)path;
-(void)didMessageChangeState:(id)state;
-(void)sendCommonGift:(id)gift;
-(void)sendGift:(id)gift;
-(void)getGiftItemList:(int)list page:(int)page num:(int)num category:(int)category;
-(int)getGiftTypeList:(int)list page:(int)page num:(int)num;
-(void)getGiftConfigure;
-(void)removeGiftConfNotify;
-(void)dealloc;
-(id)init;
@end

@interface TextRegion : NSObject <NSCoding> {
@private
	int _X;
	int _Y;
	int _Height;
	int _Width;
}
@property(assign, nonatomic) int Height;
@property(assign, nonatomic) int Width;
@property(assign, nonatomic) int Y;
@property(assign, nonatomic) int X;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface TemplateGiftItem : NSObject <NSCoding> {
@private
	int _giftId;
	NSString* _fontColor;
	NSString* _remark;
	NSString* _name;
	int _lineSpace;
	int _fontSize;
	BOOL _canDIY;
	TextRegion* _textRegion;
	NSString* _backgroundImg;
	NSString* _defaultImg;
	NSString* _previewImg;
}
@property(retain, nonatomic) NSString* fontColor;
@property(assign, nonatomic) int fontSize;
@property(assign, nonatomic) int lineSpace;
@property(assign, nonatomic) BOOL canDIY;
@property(retain, nonatomic) TextRegion* textRegion;
@property(retain, nonatomic) NSString* backgroundImg;
@property(retain, nonatomic) NSString* defaultImg;
@property(retain, nonatomic) NSString* previewImg;
@property(retain, nonatomic) NSString* remark;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) int giftId;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface TemplateGiftType : NSObject <NSCoding> {
@private
	NSMutableArray* _giftItemList;
	NSString* _name;
	int _total;
	int _typeId;
}
@property(assign, nonatomic) int total;
@property(retain, nonatomic) NSMutableArray* giftItemList;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) int typeId;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface SendGiftInfo : NSObject <NSCoding> {
@private
	long long _receiverUin;
	NSString* _receiverName;
	BOOL _isTiming;
	NSString* _sendTime;
}
@property(retain, nonatomic) NSString* sendTime;
@property(assign, nonatomic) BOOL isTiming;
@property(retain, nonatomic) NSString* receiverName;
@property(assign, nonatomic) long long receiverUin;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface TemplateGiftSend : NSObject <NSCoding> {
@private
	int _itemId;
	BOOL _isBack;
	BOOL _isPrivate;
	NSString* _audioUrl;
	NSString* _content;
	NSString* _picUrl;
	int _arch;
	NSString* _backId;
	NSArray* _sendGiftInfo;
}
@property(retain, nonatomic) NSString* backId;
@property(assign, nonatomic) int arch;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* picUrl;
@property(retain, nonatomic) NSString* audioUrl;
@property(assign, nonatomic) BOOL isPrivate;
@property(assign, nonatomic) BOOL isBack;
@property(assign, nonatomic) int itemId;
@property(retain, nonatomic) NSArray* sendGiftInfo;
-(void).cxx_destruct;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface SendGiftFailItem : NSObject <NSCoding> {
@private
	NSString* _reason;
	NSString* _name;
	int _uin;
}
@property(retain, nonatomic) NSString* reason;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) int uin;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface BirthdayInfo : NSObject <NSCoding> {
@private
	NSString* _name;
	NSString* _birthDay;
	NSString* _theDay;
	BOOL _isSelect;
	long long _uin;
	BOOL _isGiftSent;
}
@property(assign, nonatomic) BOOL isSelect;
@property(assign, nonatomic) BOOL isGiftSent;
@property(assign, nonatomic) long long uin;
@property(retain, nonatomic) NSString* birthDay;
@property(retain, nonatomic) NSString* theDay;
@property(retain, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface GiftSendBackInfo : NSObject {
@private
	long long _senderUin;
	NSString* _senderName;
	int _arch;
	NSString* _backId;
}
@property(retain, nonatomic) NSString* backId;
@property(assign, nonatomic) int arch;
@property(assign, nonatomic) long long senderUin;
@property(retain, nonatomic) NSString* senderName;
-(void).cxx_destruct;
@end

@interface GiftContext : NSObject {
@private
	BirthdayInfo* _birthdayInfo;
	GiftSendBackInfo* _sendbackInfo;
	BOOL _privateButtonChecked;
	NSArray* _selectedFriends;
	BOOL _timingButtonChecked;
}
@property(assign, nonatomic) BOOL timingButtonChecked;
@property(assign, nonatomic) BOOL privateButtonChecked;
@property(retain, nonatomic) NSArray* selectedFriends;
@property(retain, nonatomic) BirthdayInfo* birthdayInfo;
@property(retain, nonatomic) GiftSendBackInfo* sendbackInfo;
-(void).cxx_destruct;
@end

@interface GiftResult : NSObject <NSCoding> {
@private
	int _giftRetCode;
	NSString* _msg;
}
@property(retain, nonatomic) NSString* msg;
@property(assign, nonatomic) int giftRetCode;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface GiftItem : NSObject <NSCoding> {
@private
	unsigned _giftId;
	NSString* _format;
	int _vipPrice;
	int _actionType;
	NSString* _remark;
	NSString* _preFormate;
	NSString* _name;
	int _giftType;
	int _itemType;
	NSString* _urlAudio;
	NSString* _picUrl;
	NSString* _warmMsg;
	int _price;
	NSString* _urlVideoThumbnail;
	NSString* _urlVideo;
}
@property(assign, nonatomic) int actionType;
@property(retain, nonatomic) NSString* urlVideoThumbnail;
@property(retain, nonatomic) NSString* urlVideo;
@property(retain, nonatomic) NSString* urlAudio;
@property(retain, nonatomic) NSString* warmMsg;
@property(retain, nonatomic) NSString* picUrl;
@property(retain, nonatomic) NSString* preFormate;
@property(assign, nonatomic) int giftType;
@property(retain, nonatomic) NSString* remark;
@property(assign, nonatomic) int itemType;
@property(retain, nonatomic) NSString* format;
@property(assign, nonatomic) int vipPrice;
@property(assign, nonatomic) int price;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) unsigned giftId;
-(void).cxx_destruct;
-(id)getImageUrl100;
-(id)getImageUrl65;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface GiftItemType : NSObject <NSCoding> {
@private
	NSMutableArray* _giftItemList;
	NSString* _name;
	int _total;
	int _itemTypeId;
}
@property(assign, nonatomic) int total;
@property(retain, nonatomic) NSMutableArray* giftItemList;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) int itemTypeId;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface NewGiftCategory : NSObject {
@private
	NSMutableArray* _category;
	int _total;
}
@property(retain, nonatomic) NSMutableArray* category;
@property(assign, nonatomic) int total;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface NewReceivedGift : NSObject <NSCoding> {
@private
	BOOL _isSqqGift;
	unsigned _giftId;
	unsigned _itemId;
	NSString* _warmMessage;
	NSString* _videoUrl;
	unsigned _senderUin;
	NSString* _name;
	int _giftType;
	NSString* _audioUrl;
	int _source;
	NSString* _senderName;
	unsigned _recvUin;
	int _sendBackParamArch;
	NSString* _content;
	NSString* _picUrl;
	NSString* _recvName;
	NSString* _sendBackParamId;
	int _time;
	NSString* _description;
	NSString* _videoThumbnailUrl;
	NSString* _s_senderUin;
}
@property(retain, nonatomic) NSString* sendBackParamId;
@property(assign, nonatomic) int sendBackParamArch;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* videoThumbnailUrl;
@property(retain, nonatomic) NSString* videoUrl;
@property(retain, nonatomic) NSString* audioUrl;
@property(retain, nonatomic) NSString* warmMessage;
@property(assign, nonatomic) int giftType;
@property(assign, nonatomic) BOOL isSqqGift;
@property(assign, nonatomic) int source;
@property(assign, nonatomic) int time;
@property(retain, nonatomic) NSString* picUrl;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* recvName;
@property(assign, nonatomic) unsigned recvUin;
@property(retain, nonatomic) NSString* senderName;
@property(retain, nonatomic) NSString* s_senderUin;
@property(assign, nonatomic) unsigned senderUin;
@property(assign, nonatomic) unsigned itemId;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) unsigned giftId;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface NewReceivedGiftCategory : NSObject {
@private
	NSArray* _category;
	int _total;
}
@property(retain, nonatomic) NSArray* category;
@property(assign, nonatomic) int total;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface GiftCard : NSObject <NSCoding> {
@private
	BOOL _btnReplyHidden;
	NSString* _pic65;
	NSString* _picBig;
	NSString* _pic100;
	NSString* _wordMsg;
	NSString* _btnPic1;
	NSString* _btnPicReply;
	NSString* _picBaseUrl;
	NSString* _picBackGround;
	NSString* _cardUrl;
	NSString* _btnLink2;
	NSString* _btnPic2;
	NSString* _btnLink1;
	NSString* _wordDesc;
	NSString* _wordName;
}
@property(retain, nonatomic) NSString* cardUrl;
@property(retain, nonatomic) NSString* wordMsg;
@property(retain, nonatomic) NSString* wordDesc;
@property(retain, nonatomic) NSString* wordName;
@property(retain, nonatomic) NSString* btnLink2;
@property(retain, nonatomic) NSString* btnPic2;
@property(retain, nonatomic) NSString* btnLink1;
@property(retain, nonatomic) NSString* btnPic1;
@property(retain, nonatomic) NSString* btnPicReply;
@property(assign, nonatomic) BOOL btnReplyHidden;
@property(retain, nonatomic) NSString* picBig;
@property(retain, nonatomic) NSString* pic100;
@property(retain, nonatomic) NSString* pic65;
@property(retain, nonatomic) NSString* picBackGround;
@property(retain, nonatomic) NSString* picBaseUrl;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface SendGiftItem : NSObject <NSCoding> {
@private
	GiftCard* _giftCard;
	NSArray* _receiver;
	NSString* _url;
	BOOL _isBack;
	BOOL _isPrivate;
	int _giftType;
	NSString* _content;
	NSArray* _receiverName;
	int _arch;
	BOOL _isTiming;
	unsigned _giftItemId;
	NSString* _sendTime;
	NSString* _sBackId;
}
@property(retain, nonatomic) NSArray* receiverName;
@property(retain, nonatomic) NSString* sBackId;
@property(assign, nonatomic) int arch;
@property(retain, nonatomic) NSString* sendTime;
@property(assign, nonatomic) BOOL isTiming;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) BOOL isPrivate;
@property(assign, nonatomic) BOOL isBack;
@property(retain, nonatomic) NSString* content;
@property(assign, nonatomic) unsigned giftItemId;
@property(retain, nonatomic) NSArray* receiver;
@property(assign, nonatomic) int giftType;
@property(retain, nonatomic) GiftCard* giftCard;
-(void).cxx_destruct;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface SendGiftFailMsg : NSObject <NSCoding> {
@private
	NSString* _reason;
	unsigned _uin;
}
@property(retain, nonatomic) NSString* reason;
@property(assign, nonatomic) unsigned uin;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZBusinessEngineGift : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(id)translateTemplateGiftItemList:(vector<NS_MOBILE_TEMPLATE_GIFT::template_gift_item, std::allocator<NS_MOBILE_TEMPLATE_GIFT::template_gift_item> >*)list;
-(id)translateCommonGiftItemList:(vector<NS_MOBILE_TEMPLATE_GIFT::s_gift_item, std::allocator<NS_MOBILE_TEMPLATE_GIFT::s_gift_item> >*)list;
-(id)translateCommonGiftTypeList:(vector<NS_MOBILE_TEMPLATE_GIFT::common_gift_type_item, std::allocator<NS_MOBILE_TEMPLATE_GIFT::common_gift_type_item> >*)list;
-(id)translateTemplateGiftTypeList:(vector<NS_MOBILE_TEMPLATE_GIFT::template_gift_type_item, std::allocator<NS_MOBILE_TEMPLATE_GIFT::template_gift_type_item> >*)list;
-(BOOL)sendGift:(id)gift responed:(id)responed;
-(BOOL)sendGift:(id)gift;
-(BOOL)sendTemplateGift:(id)gift responed:(id)responed;
-(BOOL)sendTemplateGift:(id)gift;
-(BOOL)requestTemplateGiftItemList:(id)list responed:(id)responed;
-(BOOL)requestTemplateGiftItemList:(id)list;
-(BOOL)requestTemplateGiftTypeList:(id)list responed:(id)responed;
-(BOOL)requestTemplateGiftTypeList:(id)list;
-(BOOL)requestTemplateGiftConfig:(id)config responed:(id)responed;
-(BOOL)requestTemplateGiftConfig:(id)config;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
@end

@interface QZNotificationGetBlack : QZEngineNotificationInfoBase {
@private
	NSArray* _uinList;
}
@property(retain, nonatomic) NSArray* uinList;
-(void)dealloc;
@end

@interface QZNotificationGetUncare : QZEngineNotificationInfoBase {
@private
	NSArray* _uinList;
}
@property(retain, nonatomic) NSArray* uinList;
-(void)dealloc;
@end

@interface QZNotificationGetSpaceRight : QZEngineNotificationInfoBase {
@private
	int _currentSeq;
	int _rightVal;
	NSArray* _groupInfoArray;
}
@property(retain, nonatomic) NSArray* groupInfoArray;
@property(assign, nonatomic) int rightVal;
@property(assign, nonatomic) int currentSeq;
-(void)dealloc;
@end

@interface QZNotificationSetSpaceRight : QZEngineNotificationInfoBase {
@private
	int _currentSeq;
	int _rightVal;
}
@property(assign, nonatomic) int rightVal;
@property(assign, nonatomic) int currentSeq;
@end

@interface ASIAutorotatingViewController : UIViewController {
}
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
@end

@interface ASIAuthenticationDialog : ASIAutorotatingViewController <UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource> {
	ASIHTTPRequest* request;
	int type;
	UITableView* tableView;
	UIViewController* presentingController;
	BOOL didEnableRotationNotifications;
}
@property(retain) UITableView* tableView;
@property(retain, nonatomic) UIViewController* presentingController;
@property(assign) BOOL didEnableRotationNotifications;
@property(assign) int type;
@property(retain) ASIHTTPRequest* request;
+(void)dismiss;
+(void)presentAuthenticationDialogForRequest:(id)request;
+(void)initialize;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)loginWithCredentialsFromDialog:(id)dialog;
-(void)presentNextDialog;
-(id)requestsRequiringTheseCredentials;
-(void)cancelAuthenticationFromDialog:(id)dialog;
-(void)show;
-(void)showTitle;
-(void)dismiss;
-(void)viewDidDisappear:(BOOL)view;
-(id)domainField;
-(id)passwordField;
-(id)usernameField;
-(id)textFieldInRow:(unsigned)row section:(unsigned)section;
-(void)orientationChanged:(id)changed;
-(void)keyboardWillShow:(id)keyboard;
-(void)dealloc;
-(id)init;
@end

@interface ASIDataCompressor : NSObject {
	BOOL streamReady;
	z_stream_s zStream;
}
@property(readonly, assign) BOOL streamReady;
+(id)deflateErrorWithCode:(int)code;
+(BOOL)compressDataFromFile:(id)file toFile:(id)file2 error:(id*)error;
+(id)compressData:(id)data error:(id*)error;
+(id)compressor;
-(id)compressBytes:(char*)bytes length:(unsigned)length error:(id*)error shouldFinish:(BOOL)finish;
-(id)closeStream;
-(id)setupStream;
-(void)dealloc;
@end

@interface ASIDataDecompressor : NSObject {
	BOOL streamReady;
	z_stream_s zStream;
}
@property(readonly, assign) BOOL streamReady;
+(id)inflateErrorWithCode:(int)code;
+(BOOL)uncompressDataFromFile:(id)file toFile:(id)file2 error:(id*)error;
+(id)uncompressData:(id)data error:(id*)error;
+(id)decompressor;
-(id)uncompressBytes:(char*)bytes length:(unsigned)length error:(id*)error;
-(id)closeStream;
-(id)setupStream;
-(void)dealloc;
@end

@interface ASIDownloadCache : NSObject <ASICacheDelegate> {
	int defaultCachePolicy;
	NSString* storagePath;
	NSRecursiveLock* accessLock;
	BOOL shouldRespectCacheControlHeaders;
}
@property(assign) BOOL shouldRespectCacheControlHeaders;
@property(retain) NSRecursiveLock* accessLock;
@property(retain, nonatomic) NSString* storagePath;
@property(assign, nonatomic) int defaultCachePolicy;
+(id)rfc1123DateFormatter;
+(id)keyForURL:(id)url;
+(BOOL)serverAllowsResponseCachingForRequest:(id)request;
+(id)sharedCache;
-(BOOL)canUseCachedDataForRequest:(id)request;
-(void)clearCachedResponsesForStoragePolicy:(int)storagePolicy;
-(BOOL)isCachedDataCurrentForRequest:(id)request;
-(void)removeCachedDataForRequest:(id)request;
-(id)pathToStoreCachedResponseHeadersForRequest:(id)request;
-(id)pathToStoreCachedResponseDataForRequest:(id)request;
-(id)pathToCachedResponseHeadersForURL:(id)url;
-(id)pathToCachedResponseDataForURL:(id)url;
-(id)cachedResponseDataForURL:(id)url;
-(id)cachedResponseHeadersForURL:(id)url;
-(void)storeResponseForRequest:(id)request maxAge:(double)age;
-(void)dealloc;
-(id)init;
@end

@interface ASIFormDataRequest : ASIHTTPRequest <NSCopying> {
	NSMutableArray* postData;
	NSMutableArray* fileData;
	int postFormat;
	unsigned stringEncoding;
}
@property(retain) NSMutableArray* fileData;
@property(retain) NSMutableArray* postData;
@property(assign) unsigned stringEncoding;
@property(assign) int postFormat;
+(id)requestWithURL:(id)url;
-(id)copyWithZone:(NSZone*)zone;
-(void)appendPostString:(id)string;
-(void)buildURLEncodedPostBody;
-(void)buildMultipartFormDataPostBody;
-(void)buildPostBody;
-(void)setData:(id)data withFileName:(id)fileName andContentType:(id)type forKey:(id)key;
-(void)setData:(id)data forKey:(id)key;
-(void)addData:(id)data withFileName:(id)fileName andContentType:(id)type forKey:(id)key;
-(void)addData:(id)data forKey:(id)key;
-(void)setFile:(id)file withFileName:(id)fileName andContentType:(id)type forKey:(id)key;
-(void)setFile:(id)file forKey:(id)key;
-(void)addFile:(id)file withFileName:(id)fileName andContentType:(id)type forKey:(id)key;
-(void)addFile:(id)file forKey:(id)key;
-(void)setPostValue:(id)value forKey:(id)key;
-(void)addPostValue:(id)value forKey:(id)key;
-(void)dealloc;
-(id)initWithURL:(id)url;
-(id)encodeURL:(id)url;
@end

@interface ASIHTTPRequest : NSOperation <NSCopying> {
	NSURL* url;
	NSURL* originalURL;
	NSURL* redirectURL;
	id<ASIHTTPRequestDelegate> delegate;
	id<ASIProgressDelegate, ASIHTTPRequestDelegate> queue;
	NSString* requestMethod;
	NSMutableData* postBody;
	NSData* compressedPostBody;
	BOOL shouldStreamPostDataFromDisk;
	NSString* postBodyFilePath;
	NSString* compressedPostBodyFilePath;
	BOOL didCreateTemporaryPostDataFile;
	NSOutputStream* postBodyWriteStream;
	NSInputStream* postBodyReadStream;
	NSMutableDictionary* requestHeaders;
	BOOL haveBuiltRequestHeaders;
	NSDictionary* responseHeaders;
	NSMutableArray* requestCookies;
	NSArray* responseCookies;
	BOOL useCookiePersistence;
	BOOL useKeychainPersistence;
	BOOL useSessionPersistence;
	BOOL allowCompressedResponse;
	BOOL shouldCompressRequestBody;
	NSString* downloadDestinationPath;
	NSString* temporaryFileDownloadPath;
	NSString* temporaryUncompressedDataDownloadPath;
	NSOutputStream* fileDownloadOutputStream;
	NSOutputStream* inflatedFileDownloadOutputStream;
	BOOL complete;
	BOOL finished;
	BOOL cancelled;
	NSError* error;
	NSString* username;
	NSString* password;
	NSString* domain;
	NSString* proxyUsername;
	NSString* proxyPassword;
	NSString* proxyDomain;
	id<ASIProgressDelegate> uploadProgressDelegate;
	id<ASIProgressDelegate> downloadProgressDelegate;
	BOOL haveExaminedHeaders;
	NSMutableData* rawResponseData;
	CFHTTPMessageRef request;
	NSInputStream* readStream;
	CFHTTPAuthenticationRef requestAuthentication;
	NSDictionary* requestCredentials;
	int authenticationRetryCount;
	NSString* authenticationScheme;
	NSString* authenticationRealm;
	BOOL shouldPresentAuthenticationDialog;
	BOOL shouldPresentProxyAuthenticationDialog;
	CFHTTPAuthenticationRef proxyAuthentication;
	NSDictionary* proxyCredentials;
	int proxyAuthenticationRetryCount;
	NSString* proxyAuthenticationScheme;
	NSString* proxyAuthenticationRealm;
	int responseStatusCode;
	NSString* responseStatusMessage;
	unsigned long long contentLength;
	unsigned long long partialDownloadSize;
	unsigned long long postLength;
	unsigned long long totalBytesRead;
	unsigned long long totalBytesSent;
	unsigned long long lastBytesRead;
	unsigned long long lastBytesSent;
	NSRecursiveLock* cancelledLock;
	SEL didStartSelector;
	SEL didReceiveResponseHeadersSelector;
	SEL willRedirectSelector;
	SEL willFinishSelector;
	SEL didFinishSelector;
	SEL didFailSelector;
	SEL didReceiveDataSelector;
	NSDate* lastActivityTime;
	double timeOutSeconds;
	BOOL shouldResetUploadProgress;
	BOOL shouldResetDownloadProgress;
	ASIHTTPRequest* mainRequest;
	BOOL showAccurateProgress;
	BOOL updatedProgress;
	BOOL haveBuiltPostBody;
	unsigned long long uploadBufferSize;
	unsigned defaultResponseEncoding;
	unsigned responseEncoding;
	BOOL allowResumeForFileDownloads;
	NSDictionary* userInfo;
	NSDictionary* userInfo2;
	BOOL useHTTPVersionOne;
	BOOL shouldRedirect;
	BOOL needsRedirect;
	int redirectCount;
	BOOL validatesSecureCertificate;
	SecIdentity* clientCertificateIdentity;
	NSArray* clientCertificates;
	NSString* proxyHost;
	int proxyPort;
	NSString* proxyType;
	NSURL* PACurl;
	int authenticationNeeded;
	BOOL shouldPresentCredentialsBeforeChallenge;
	BOOL inProgress;
	BOOL readStreamIsScheduled;
	int numberOfTimesToRetryOnTimeout;
	int retryCount;
	BOOL shouldAttemptPersistentConnection;
	double persistentConnectionTimeoutSeconds;
	BOOL connectionCanBeReused;
	NSMutableDictionary* connectionInfo;
	BOOL shouldUseRFC2616RedirectBehaviour;
	BOOL downloadComplete;
	NSNumber* requestID;
	NSString* runLoopMode;
	NSTimer* statusTimer;
	id<ASICacheDelegate> downloadCache;
	int cachePolicy;
	int cacheStoragePolicy;
	BOOL didUseCachedResponse;
	double secondsToCache;
	BOOL shouldContinueWhenAppEntersBackground;
	unsigned backgroundTask;
	ASIDataDecompressor* dataDecompressor;
	BOOL shouldWaitToInflateCompressedResponses;
	BOOL isPACFileRequest;
	ASIHTTPRequest* PACFileRequest;
	NSInputStream* PACFileReadStream;
	NSMutableData* PACFileData;
	BOOL isSynchronous;
	id startedBlock;
	id headersReceivedBlock;
	id completionBlock;
	id failureBlock;
	id bytesReceivedBlock;
	id bytesSentBlock;
	id downloadSizeIncrementedBlock;
	id uploadSizeIncrementedBlock;
	id dataReceivedBlock;
	id authenticationNeededBlock;
	id proxyAuthenticationNeededBlock;
	id requestRedirectedBlock;
@private
	NSThread* callbackThread;
	BOOL isSupportWebp;
	NSData* webpResponseData;
	BOOL isSupportCheckLength;
}
@property(assign, nonatomic, setter=setSynchronous:) BOOL isSynchronous;
@property(retain, nonatomic) NSMutableData* PACFileData;
@property(retain, nonatomic) NSInputStream* PACFileReadStream;
@property(retain, nonatomic) ASIHTTPRequest* PACFileRequest;
@property(assign, nonatomic) BOOL isPACFileRequest;
@property(retain, nonatomic) NSURL* redirectURL;
@property(retain, nonatomic) NSTimer* statusTimer;
@property(assign, nonatomic) NSString* runLoopMode;
@property(assign, nonatomic) BOOL downloadComplete;
@property(assign, nonatomic) BOOL readStreamIsScheduled;
@property(retain, nonatomic) NSInputStream* readStream;
@property(retain, nonatomic) NSMutableDictionary* connectionInfo;
@property(retain, nonatomic) NSString* compressedPostBodyFilePath;
@property(retain, nonatomic) NSData* compressedPostBody;
@property(assign, nonatomic) int redirectCount;
@property(assign, nonatomic) BOOL needsRedirect;
@property(assign, nonatomic) BOOL updatedProgress;
@property(retain, nonatomic) NSOutputStream* inflatedFileDownloadOutputStream;
@property(retain, nonatomic) NSOutputStream* fileDownloadOutputStream;
@property(retain) NSRecursiveLock* cancelledLock;
@property(assign, nonatomic) unsigned long long lastBytesSent;
@property(assign, nonatomic) unsigned long long lastBytesRead;
@property(retain, nonatomic) NSInputStream* postBodyReadStream;
@property(retain, nonatomic) NSOutputStream* postBodyWriteStream;
@property(assign, nonatomic) unsigned long long uploadBufferSize;
@property(retain, nonatomic) NSDate* lastActivityTime;
@property(assign) BOOL isSupportCheckLength;
@property(retain) NSData* webpResponseData;
@property(assign) BOOL isSupportWebp;
@property(retain) NSThread* callbackThread;
@property(assign) BOOL shouldWaitToInflateCompressedResponses;
@property(retain) ASIDataDecompressor* dataDecompressor;
@property(assign) BOOL shouldContinueWhenAppEntersBackground;
@property(retain) NSArray* clientCertificates;
@property(assign) double secondsToCache;
@property(assign) BOOL didUseCachedResponse;
@property(assign) int cacheStoragePolicy;
@property(assign) int cachePolicy;
@property(assign) id<ASICacheDelegate> downloadCache;
@property(retain) NSNumber* requestID;
@property(assign) BOOL connectionCanBeReused;
@property(assign) BOOL shouldUseRFC2616RedirectBehaviour;
@property(assign) double persistentConnectionTimeoutSeconds;
@property(assign) BOOL shouldAttemptPersistentConnection;
@property(assign) int retryCount;
@property(assign) int numberOfTimesToRetryOnTimeout;
@property(assign) BOOL inProgress;
@property(assign, nonatomic) BOOL haveBuiltPostBody;
@property(assign) BOOL haveBuiltRequestHeaders;
@property(assign) int proxyAuthenticationRetryCount;
@property(assign) int authenticationRetryCount;
@property(assign) BOOL shouldPresentCredentialsBeforeChallenge;
@property(assign) int authenticationNeeded;
@property(assign) BOOL shouldPresentProxyAuthenticationDialog;
@property(assign) BOOL shouldPresentAuthenticationDialog;
@property(retain) NSString* proxyAuthenticationScheme;
@property(retain) NSString* authenticationScheme;
@property(retain) NSURL* PACurl;
@property(assign) BOOL shouldCompressRequestBody;
@property(assign) BOOL validatesSecureCertificate;
@property(assign) BOOL shouldRedirect;
@property(assign) unsigned long long partialDownloadSize;
@property(assign) BOOL useHTTPVersionOne;
@property(assign) BOOL didCreateTemporaryPostDataFile;
@property(assign) BOOL shouldStreamPostDataFromDisk;
@property(retain) NSString* postBodyFilePath;
@property(retain) NSDictionary* userInfo2;
@property(retain) NSDictionary* userInfo;
@property(assign) BOOL allowResumeForFileDownloads;
@property(assign) BOOL allowCompressedResponse;
@property(assign) unsigned responseEncoding;
@property(assign) unsigned defaultResponseEncoding;
@property(assign) unsigned long long totalBytesSent;
@property(assign) unsigned long long totalBytesRead;
@property(assign) BOOL showAccurateProgress;
@property(assign) ASIHTTPRequest* mainRequest;
@property(assign) BOOL shouldResetUploadProgress;
@property(assign) BOOL shouldResetDownloadProgress;
@property(assign) unsigned long long postLength;
@property(assign) unsigned long long contentLength;
@property(retain) NSMutableData* postBody;
@property(retain) NSString* requestMethod;
@property(assign) double timeOutSeconds;
@property(retain) NSMutableData* rawResponseData;
@property(retain) NSString* responseStatusMessage;
@property(assign) int responseStatusCode;
@property(retain) NSDictionary* proxyCredentials;
@property(retain) NSDictionary* requestCredentials;
@property(assign) BOOL useCookiePersistence;
@property(retain) NSArray* responseCookies;
@property(retain) NSMutableArray* requestCookies;
@property(retain) NSMutableDictionary* requestHeaders;
@property(retain) NSDictionary* responseHeaders;
@property(assign) BOOL complete;
@property(retain) NSError* error;
@property(retain) NSString* proxyAuthenticationRealm;
@property(retain) NSString* authenticationRealm;
@property(assign) SEL didReceiveDataSelector;
@property(assign) SEL didFailSelector;
@property(assign) SEL didFinishSelector;
@property(assign) SEL willFinishSelector;
@property(assign) SEL willRedirectSelector;
@property(assign) SEL didReceiveResponseHeadersSelector;
@property(assign) SEL didStartSelector;
@property(retain) NSString* temporaryUncompressedDataDownloadPath;
@property(retain) NSString* temporaryFileDownloadPath;
@property(retain) NSString* downloadDestinationPath;
@property(assign) BOOL useSessionPersistence;
@property(assign) BOOL useKeychainPersistence;
@property(assign, nonatomic) id downloadProgressDelegate;
@property(assign, nonatomic) id uploadProgressDelegate;
@property(retain, nonatomic) id queue;
@property(assign, nonatomic) id delegate;
@property(retain) NSURL* originalURL;
@property(retain, nonatomic, setter=setURL:) NSURL* url;
@property(retain) NSString* proxyType;
@property(assign) int proxyPort;
@property(retain) NSString* proxyHost;
@property(retain) NSString* proxyDomain;
@property(retain) NSString* proxyPassword;
@property(retain) NSString* proxyUsername;
@property(retain) NSString* domain;
@property(retain) NSString* password;
@property(retain) NSString* username;
+(void)parseMimeType:(id*)type andResponseEncoding:(unsigned*)encoding fromContentType:(id)contentType;
+(id)dateFromRFC1123String:(id)rfc1123String;
+(id)base64forData:(id)data;
+(BOOL)isMultitaskingSupported;
+(void)runRequests;
+(id)threadForRequest:(id)request;
+(void)hideNetworkActivityIndicatorIfNeeeded;
+(void)hideNetworkActivityIndicatorAfterDelay;
+(void)hideNetworkActivityIndicator;
+(void)showNetworkActivityIndicator;
+(void)setShouldUpdateNetworkActivityIndicator:(BOOL)updateNetworkActivityIndicator;
+(BOOL)isNetworkInUse;
+(id)defaultCache;
+(void)setDefaultCache:(id)cache;
+(id)sharedQueue;
+(void)reachabilityChanged:(id)changed;
+(BOOL)isNetworkReachableViaWWAN;
+(void)unsubscribeFromNetworkReachabilityNotifications;
+(void)registerForNetworkReachabilityNotifications;
+(void)throttleBandwidthForWWANUsingLimit:(unsigned long)wwanusingLimit;
+(void)setShouldThrottleBandwidthForWWAN:(BOOL)throttleBandwidthForWWAN;
+(unsigned long)maxUploadReadLength;
+(void)measureBandwidthUsage;
+(unsigned long)averageBandwidthUsedPerSecond;
+(void)recordBandwidthUsage;
+(void)incrementBandwidthUsedInLastSecond:(unsigned long)lastSecond;
+(void)setMaxBandwidthPerSecond:(unsigned long)second;
+(unsigned long)maxBandwidthPerSecond;
+(BOOL)isBandwidthThrottled;
+(id)mimeTypeForFileAtPath:(id)path;
+(id)defaultUserAgentString;
+(void)clearSession;
+(void)addSessionCookie:(id)cookie;
+(void)setSessionCookies:(id)cookies;
+(id)sessionCookies;
+(void)removeCredentialsForProxy:(id)proxy port:(int)port realm:(id)realm;
+(void)removeCredentialsForHost:(id)host port:(int)port protocol:(id)protocol realm:(id)realm;
+(id)savedCredentialsForProxy:(id)proxy port:(int)port protocol:(id)protocol realm:(id)realm;
+(id)savedCredentialsForHost:(id)host port:(int)port protocol:(id)protocol realm:(id)realm;
+(void)saveCredentials:(id)credentials forProxy:(id)proxy port:(int)port realm:(id)realm;
+(void)saveCredentials:(id)credentials forHost:(id)host port:(int)port protocol:(id)protocol realm:(id)realm;
+(void)removeAuthenticationCredentialsFromSessionStore:(id)sessionStore;
+(void)removeProxyAuthenticationCredentialsFromSessionStore:(id)sessionStore;
+(void)storeAuthenticationCredentialsInSessionStore:(id)sessionStore;
+(void)storeProxyAuthenticationCredentialsInSessionStore:(id)sessionStore;
+(id)sessionCredentialsStore;
+(id)sessionProxyCredentialsStore;
+(void)setDefaultTimeOutSeconds:(double)seconds;
+(double)defaultTimeOutSeconds;
+(void)expirePersistentConnections;
+(BOOL)removeFileAtPath:(id)path error:(id*)error;
+(void)updateProgressIndicator:(id*)indicator withProgress:(unsigned long long)progress ofTotal:(unsigned long long)total;
+(void)updateProgressIndicator:(id*)indicator withProgress:(unsigned long long)progress ofTotal:(unsigned long long)total target:(id)target;
+(void)performInvocation:(id)invocation onTarget:(id*)target releasingObject:(id)object;
+(void)performSelector2:(SEL)a2 onTarget:(id*)target withObject:(id)object amount:(void*)amount callerToRetain:(id)retain;
+(void)performSelector:(SEL)selector onTarget:(id*)target withObject:(id)object amount:(void*)amount callerToRetain:(id)retain;
+(void)releaseBlocks:(id)blocks;
+(id)requestWithURL:(id)url usingCache:(id)cache andCachePolicy:(int)policy;
+(id)requestWithURL:(id)url usingCache:(id)cache;
+(id)requestWithURL:(id)url;
+(void)initialize;
-(void)setRequestRedirectedBlock:(id)block;
-(void)setProxyAuthenticationNeededBlock:(id)block;
-(void)setAuthenticationNeededBlock:(id)block;
-(void)setDataReceivedBlock:(id)block;
-(void)setUploadSizeIncrementedBlock:(id)block;
-(void)setDownloadSizeIncrementedBlock:(id)block;
-(void)setBytesSentBlock:(id)block;
-(void)setBytesReceivedBlock:(id)block;
-(void)setFailedBlock:(id)block;
-(void)setCompletionBlock:(id)block;
-(void)setHeadersReceivedBlock:(id)block;
-(void)setStartedBlock:(id)block;
-(void)performThrottling;
-(id)findSessionAuthenticationCredentials;
-(id)findSessionProxyAuthenticationCredentials;
-(void)setClientCertificateIdentity:(SecIdentity*)identity;
-(id)copyWithZone:(NSZone*)zone;
-(id)connectionID;
-(void)finishedDownloadingPACFile:(id)file;
-(void)runPACScript:(id)script;
-(void)timeOutPACRead;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)fetchPACFile;
-(BOOL)configureProxies;
-(BOOL)removeTemporaryCompressedUploadFile;
-(BOOL)removeTemporaryUploadFile;
-(BOOL)removeTemporaryUncompressedDownloadFile;
-(BOOL)removeTemporaryDownloadFile;
-(void)unscheduleReadStream;
-(void)scheduleReadStream;
-(void)destroyReadStream;
-(void)handleStreamError;
-(BOOL)retryUsingNewConnection;
-(void)useDataFromCache;
-(void)markAsFinished;
-(void)handleStreamComplete;
-(void)handleBytesAvailable;
-(void)handleNetworkEvent:(unsigned long)event;
-(void)addBasicAuthenticationHeaderWithUsername:(id)username andPassword:(id)password;
-(void)attemptToApplyCredentialsAndResume;
-(BOOL)showAuthenticationDialog;
-(void)attemptToApplyProxyCredentialsAndResume;
-(void)askDelegateForCredentials;
-(BOOL)willAskDelegateForCredentials;
-(void)askDelegateForProxyCredentials;
-(BOOL)willAskDelegateForProxyCredentials;
-(BOOL)showProxyAuthenticationDialog;
-(void)failAuthentication;
-(void)cancelAuthentication;
-(void)retryUsingSuppliedCredentials;
-(id)findCredentials;
-(id)findProxyCredentials;
-(BOOL)applyCredentials:(id)credentials;
-(BOOL)applyProxyCredentials:(id)credentials;
-(void)saveCredentialsToKeychain:(id)keychain;
-(void)saveProxyCredentialsToKeychain:(id)keychain;
-(void)parseStringEncodingFromHeaders;
-(void)readResponseHeaders;
-(void)failWithError:(id)error;
-(void)passOnReceivedData:(id)data;
-(void)reportFailure;
-(void)reportFinished;
-(void)requestFinished;
-(void)requestWillRedirectToURL:(id)request;
-(void)requestReceivedResponseHeaders:(id)headers;
-(void)requestRedirected;
-(void)requestStarted;
-(void)callBlock:(id)block;
-(void)performBlockOnMainThread:(id)thread;
-(void)removeUploadProgressSoFar;
-(void)incrementUploadSizeBy:(long long)by;
-(void)incrementDownloadSizeBy:(long long)by;
-(void)updateUploadProgress;
-(void)updateDownloadProgress;
-(void)updateProgressIndicators;
-(id)HEADRequest;
-(void)cancelLoad;
-(void)checkRequestStatus;
-(BOOL)shouldTimeOut;
-(void)redirectToURL:(id)url;
-(void)performRedirect;
-(void)updateStatus:(id)status;
-(void)startRequest;
-(BOOL)setRemoteIPAddress;
-(id)getRemoteIPAddress;
-(void)updatePartialDownloadSize;
-(void)buildRequestHeaders;
-(void)applyCookieHeader;
-(void)applyAuthorizationHeader;
-(void)main;
-(BOOL)isExecuting;
-(BOOL)isFinished;
-(BOOL)isConcurrent;
-(void)startAsynchronous;
-(void)start;
-(void)startSynchronous;
-(id)responseData;
-(BOOL)isResponseCompressed;
-(id)responseString;
-(BOOL)isCancelled;
-(void)clearDelegatesAndCancel;
-(void)cancel;
-(void)cancelOnRequestThread;
-(void)appendPostDataFromFile:(id)file;
-(void)appendPostData:(id)data;
-(void)setupPostBody;
-(void)buildPostBody;
-(void)addRequestHeader:(id)header value:(id)value;
-(void)releaseBlocksOnMainThread;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

@interface ASIInputStream : NSObject {
	NSInputStream* stream;
	ASIHTTPRequest* request;
}
@property(assign, nonatomic) ASIHTTPRequest* request;
@property(retain, nonatomic) NSInputStream* stream;
+(id)inputStreamWithData:(id)data request:(id)request;
+(id)inputStreamWithFileAtPath:(id)path request:(id)request;
+(void)initialize;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(id)streamError;
-(unsigned)streamStatus;
-(BOOL)setProperty:(id)property forKey:(id)key;
-(id)propertyForKey:(id)key;
-(void)removeFromRunLoop:(id)runLoop forMode:(id)mode;
-(void)scheduleInRunLoop:(id)runLoop forMode:(id)mode;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)close;
-(void)open;
-(int)read:(char*)read maxLength:(unsigned)length;
-(void)dealloc;
@end

@interface ASINetworkQueue : NSOperationQueue <ASIProgressDelegate, ASIHTTPRequestDelegate, NSCopying> {
	id delegate;
	SEL requestDidStartSelector;
	SEL requestDidReceiveResponseHeadersSelector;
	SEL requestWillRedirectSelector;
	SEL requestDidFinishSelector;
	SEL requestDidFailSelector;
	SEL queueDidFinishSelector;
	id uploadProgressDelegate;
	unsigned long long bytesUploadedSoFar;
	unsigned long long totalBytesToUpload;
	id downloadProgressDelegate;
	unsigned long long bytesDownloadedSoFar;
	unsigned long long totalBytesToDownload;
	BOOL shouldCancelAllRequestsOnFailure;
	int requestsCount;
	BOOL showAccurateProgress;
	NSDictionary* userInfo;
}
@property(assign) unsigned long long totalBytesToDownload;
@property(assign) unsigned long long bytesDownloadedSoFar;
@property(assign) unsigned long long totalBytesToUpload;
@property(assign) unsigned long long bytesUploadedSoFar;
@property(retain) NSDictionary* userInfo;
@property(assign) int requestsCount;
@property(assign) BOOL showAccurateProgress;
@property(assign) id delegate;
@property(assign) BOOL shouldCancelAllRequestsOnFailure;
@property(assign) SEL queueDidFinishSelector;
@property(assign) SEL requestDidFailSelector;
@property(assign) SEL requestDidFinishSelector;
@property(assign) SEL requestWillRedirectSelector;
@property(assign) SEL requestDidReceiveResponseHeadersSelector;
@property(assign) SEL requestDidStartSelector;
@property(assign, nonatomic, setter=setDownloadProgressDelegate:) id downloadProgressDelegate;
@property(assign, nonatomic, setter=setUploadProgressDelegate:) id uploadProgressDelegate;
+(id)queue;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)respondsToSelector:(SEL)selector;
-(void)proxyAuthenticationNeededForRequest:(id)request;
-(void)authenticationNeededForRequest:(id)request;
-(void)request:(id)request incrementUploadSizeBy:(long long)by;
-(void)request:(id)request incrementDownloadSizeBy:(long long)by;
-(void)request:(id)request didSendBytes:(long long)bytes;
-(void)request:(id)request didReceiveBytes:(long long)bytes;
-(void)requestFailed:(id)failed;
-(void)requestFinished:(id)finished;
-(void)request:(id)request willRedirectToURL:(id)url;
-(void)request:(id)request didReceiveResponseHeaders:(id)headers;
-(void)requestStarted:(id)started;
-(void)addOperation:(id)operation;
-(void)addHEADOperation:(id)operation;
-(void)resetProgressDelegate:(id*)delegate;
-(void)cancelAllOperations;
-(void)go;
-(void)reset;
-(void)setSuspended:(BOOL)suspended;
-(void)dealloc;
-(id)init;
@end

@interface ASIWebPageRequest : ASIHTTPRequest {
	ASINetworkQueue* externalResourceQueue;
	NSMutableDictionary* resourceList;
	xmlDoc* doc;
	int webContentType;
	ASIWebPageRequest* parentRequest;
	int urlReplacementMode;
}
@property(retain, nonatomic) NSMutableDictionary* resourceList;
@property(retain, nonatomic) ASINetworkQueue* externalResourceQueue;
@property(assign, nonatomic) int urlReplacementMode;
@property(retain, nonatomic) ASIWebPageRequest* parentRequest;
+(id)CSSURLsFromString:(id)string;
+(void)initialize;
-(id)cachePathForRequest:(id)request;
-(id)contentForExternalURL:(id)externalURL;
-(id)relativePathTo:(id)to fromPath:(id)path;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(BOOL)respondsToSelector:(SEL)selector;
-(void)updateResourceURLs;
-(void)addURLToFetch:(id)fetch;
-(void)readResourceURLs;
-(void)finishedFetchingExternalResources:(id)resources;
-(void)externalResourceFetchFailed:(id)failed;
-(void)externalResourceFetchSucceeded:(id)succeeded;
-(void)parseAsHTML;
-(const char*)encodingName;
-(void)parseAsCSS;
-(void)requestFinished;
-(void)markAsFinished;
-(void)dealloc;
@end

@interface ASICloudFilesCDNRequest : ASICloudFilesRequest {
	NSString* accountName;
	NSString* containerName;
	ASICloudFilesContainerXMLParserDelegate* xmlParserDelegate;
}
@property(retain) ASICloudFilesContainerXMLParserDelegate* xmlParserDelegate;
@property(retain) NSString* containerName;
@property(retain) NSString* accountName;
+(id)postRequestWithContainer:(id)container cdnEnabled:(BOOL)enabled ttl:(unsigned)ttl;
+(id)postRequestWithContainer:(id)container;
+(id)putRequestWithContainer:(id)container ttl:(unsigned)ttl;
+(id)putRequestWithContainer:(id)container;
+(id)listRequestWithLimit:(unsigned)limit marker:(id)marker enabledOnly:(BOOL)only;
+(id)listRequest;
+(id)containerInfoRequest:(id)request;
+(id)cdnRequestWithMethod:(id)method containerName:(id)name;
+(id)cdnRequestWithMethod:(id)method query:(id)query;
-(void)dealloc;
-(id)containers;
-(unsigned)cdnTTL;
-(id)cdnURI;
-(BOOL)cdnEnabled;
@end

@interface ASICloudFilesContainer : NSObject {
	NSString* name;
	unsigned count;
	unsigned bytes;
	BOOL cdnEnabled;
	unsigned ttl;
	NSString* cdnURL;
	BOOL logRetention;
	NSString* referrerACL;
	NSString* useragentACL;
}
@property(retain) NSString* useragentACL;
@property(retain) NSString* referrerACL;
@property(assign) BOOL logRetention;
@property(retain) NSString* cdnURL;
@property(assign) unsigned ttl;
@property(assign) BOOL cdnEnabled;
@property(assign) unsigned bytes;
@property(assign) unsigned count;
@property(retain) NSString* name;
+(id)container;
-(void)dealloc;
@end

@interface ASICloudFilesContainerRequest : ASICloudFilesRequest {
	NSString* currentContent;
	NSString* currentElement;
	ASICloudFilesContainer* currentObject;
	ASICloudFilesContainerXMLParserDelegate* xmlParserDelegate;
}
@property(retain) ASICloudFilesContainerXMLParserDelegate* xmlParserDelegate;
@property(retain) ASICloudFilesContainer* currentObject;
@property(retain) NSString* currentContent;
@property(retain) NSString* currentElement;
+(id)deleteContainerRequest:(id)request;
+(id)createContainerRequest:(id)request;
+(id)listRequest;
+(id)listRequestWithLimit:(unsigned)limit marker:(id)marker;
+(id)accountInfoRequest;
+(id)storageRequestWithMethod:(id)method;
+(id)storageRequestWithMethod:(id)method queryString:(id)string;
+(id)storageRequestWithMethod:(id)method containerName:(id)name queryString:(id)string;
-(void)dealloc;
-(id)containers;
-(unsigned)bytesUsed;
-(unsigned)containerCount;
@end

@interface ASICloudFilesContainerXMLParserDelegate : NSObject <NSXMLParserDelegate> {
	NSMutableArray* containerObjects;
	NSString* currentContent;
	NSString* currentElement;
	ASICloudFilesContainer* currentObject;
}
@property(retain) ASICloudFilesContainer* currentObject;
@property(retain) NSString* currentContent;
@property(retain) NSString* currentElement;
@property(retain) NSMutableArray* containerObjects;
-(void)dealloc;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
@end

@interface ASICloudFilesObject : NSObject {
	NSString* name;
	NSString* hash;
	unsigned bytes;
	NSString* contentType;
	NSDate* lastModified;
	NSData* data;
	NSMutableDictionary* metadata;
}
@property(retain) NSMutableDictionary* metadata;
@property(retain) NSData* data;
@property(retain) NSDate* lastModified;
@property(retain) NSString* contentType;
@property(assign) unsigned bytes;
@property(retain) NSString* hash;
@property(retain) NSString* name;
+(id)object;
-(void)dealloc;
@end

@interface ASICloudFilesObjectRequest : ASICloudFilesRequest <NSXMLParserDelegate> {
	NSString* accountName;
	NSString* containerName;
	NSString* currentContent;
	NSString* currentElement;
	ASICloudFilesObject* currentObject;
	NSMutableArray* objects;
}
@property(retain) ASICloudFilesObject* currentObject;
@property(retain) NSString* currentContent;
@property(retain) NSString* currentElement;
@property(retain) NSString* containerName;
@property(retain) NSString* accountName;
+(id)deleteObjectRequestWithContainer:(id)container objectPath:(id)path;
+(id)postObjectRequestWithContainer:(id)container objectPath:(id)path metadata:(id)metadata;
+(id)postObjectRequestWithContainer:(id)container object:(id)object;
+(id)putObjectRequestWithContainer:(id)container objectPath:(id)path contentType:(id)type file:(id)file metadata:(id)metadata etag:(id)etag;
+(id)putObjectRequestWithContainer:(id)container objectPath:(id)path contentType:(id)type objectData:(id)data metadata:(id)metadata etag:(id)etag;
+(id)putObjectRequestWithContainer:(id)container object:(id)object;
+(id)getObjectRequestWithContainer:(id)container objectPath:(id)path;
+(id)listRequestWithContainer:(id)container;
+(id)listRequestWithContainer:(id)container limit:(unsigned)limit marker:(id)marker prefix:(id)prefix path:(id)path;
+(id)queryStringWithContainer:(id)container limit:(unsigned)limit marker:(id)marker prefix:(id)prefix path:(id)path;
+(id)objectInfoRequest:(id)request objectPath:(id)path;
+(id)containerInfoRequest:(id)request;
+(id)storageRequestWithMethod:(id)method containerName:(id)name objectPath:(id)path;
+(id)storageRequestWithMethod:(id)method containerName:(id)name queryString:(id)string;
+(id)storageRequestWithMethod:(id)method containerName:(id)name;
-(void)dealloc;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(id)object;
-(id)objects;
-(unsigned)containerBytesUsed;
-(unsigned)containerObjectCount;
@end

@interface ASICloudFilesRequest : ASIHTTPRequest {
}
+(void)setApiKey:(id)key;
+(id)apiKey;
+(void)setUsername:(id)username;
+(id)username;
+(id)authenticate;
+(id)authenticationRequest;
+(id)cdnManagementURL;
+(id)storageURL;
+(id)authToken;
+(void)initialize;
-(id)dateFromString:(id)string;
@end

@interface ASIS3Bucket : NSObject {
	NSString* name;
	NSDate* creationDate;
	NSString* ownerID;
	NSString* ownerName;
}
@property(retain) NSString* ownerName;
@property(retain) NSString* ownerID;
@property(retain) NSDate* creationDate;
@property(retain) NSString* name;
+(id)bucketWithOwnerID:(id)ownerID ownerName:(id)name;
-(id)description;
@end

@interface ASIS3BucketObject : NSObject <NSCopying> {
	NSString* bucket;
	NSString* key;
	NSDate* lastModified;
	NSString* ETag;
	unsigned long long size;
	NSString* ownerID;
	NSString* ownerName;
}
@property(retain) NSString* ownerName;
@property(retain) NSString* ownerID;
@property(assign) unsigned long long size;
@property(retain) NSString* ETag;
@property(retain) NSDate* lastModified;
@property(retain) NSString* key;
@property(retain) NSString* bucket;
+(id)objectWithBucket:(id)bucket;
-(id)copyWithZone:(NSZone*)zone;
-(id)description;
-(id)DELETERequest;
-(id)PUTRequestWithFile:(id)file;
-(id)GETRequest;
-(void)dealloc;
@end

@interface ASIS3BucketRequest : ASIS3Request {
	NSString* bucket;
	NSString* subResource;
	NSString* prefix;
	NSString* marker;
	int maxResultCount;
	NSString* delimiter;
	ASIS3BucketObject* currentObject;
	NSMutableArray* objects;
	NSMutableArray* commonPrefixes;
	BOOL isTruncated;
}
@property(retain, nonatomic) ASIS3BucketObject* currentObject;
@property(assign) BOOL isTruncated;
@property(retain) NSMutableArray* commonPrefixes;
@property(retain) NSMutableArray* objects;
@property(retain, nonatomic) NSString* delimiter;
@property(assign, nonatomic) int maxResultCount;
@property(retain, nonatomic) NSString* marker;
@property(retain, nonatomic) NSString* prefix;
@property(retain, nonatomic) NSString* subResource;
@property(retain, nonatomic) NSString* bucket;
+(id)DELETERequestWithBucket:(id)bucket;
+(id)PUTRequestWithBucket:(id)bucket;
+(id)requestWithBucket:(id)bucket subResource:(id)resource;
+(id)requestWithBucket:(id)bucket;
-(id)copyWithZone:(NSZone*)zone;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)buildURL;
-(id)canonicalizedResource;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

@interface ASIS3ObjectRequest : ASIS3Request {
	NSString* bucket;
	NSString* key;
	NSString* sourceBucket;
	NSString* sourceKey;
	NSString* mimeType;
	NSString* subResource;
	NSString* storageClass;
}
@property(retain, nonatomic) NSString* storageClass;
@property(retain, nonatomic) NSString* subResource;
@property(retain, nonatomic) NSString* mimeType;
@property(retain, nonatomic) NSString* sourceKey;
@property(retain, nonatomic) NSString* sourceBucket;
@property(retain, nonatomic) NSString* key;
@property(retain, nonatomic) NSString* bucket;
+(id)HEADRequestWithBucket:(id)bucket key:(id)key;
+(id)COPYRequestFromBucket:(id)bucket key:(id)key toBucket:(id)bucket3 key:(id)key4;
+(id)DELETERequestWithBucket:(id)bucket key:(id)key;
+(id)PUTRequestForFile:(id)file withBucket:(id)bucket key:(id)key;
+(id)PUTRequestForData:(id)data withBucket:(id)bucket key:(id)key;
+(id)requestWithBucket:(id)bucket key:(id)key subResource:(id)resource;
+(id)requestWithBucket:(id)bucket key:(id)key;
-(id)stringToSignForHeaders:(id)headers resource:(id)resource;
-(id)S3Headers;
-(id)canonicalizedResource;
-(void)buildURL;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(id)HEADRequest;
@end

@interface ASIS3Request : ASIHTTPRequest <NSCopying, NSXMLParserDelegate> {
	NSString* accessKey;
	NSString* secretAccessKey;
	NSString* requestScheme;
	NSString* dateString;
	NSString* accessPolicy;
	NSString* currentXMLElementContent;
	NSMutableArray* currentXMLElementStack;
}
@property(retain) NSString* requestScheme;
@property(retain) NSMutableArray* currentXMLElementStack;
@property(retain) NSString* currentXMLElementContent;
@property(retain) NSString* accessPolicy;
@property(retain) NSString* secretAccessKey;
@property(retain) NSString* accessKey;
@property(retain) NSString* dateString;
+(id)S3Host;
+(id)HMACSHA1withKey:(id)key forString:(id)string;
+(id)S3RequestDateFormatter;
+(id)S3ResponseDateFormatter;
+(id)stringByURLEncodingForS3Path:(id)s3Path;
+(void)setSharedSecretAccessKey:(id)key;
+(id)sharedSecretAccessKey;
+(void)setSharedAccessKey:(id)key;
+(id)sharedAccessKey;
-(void)buildURL;
-(id)copyWithZone:(NSZone*)zone;
-(void)parser:(id)parser foundCharacters:(id)characters;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)parser:(id)parser parseErrorOccurred:(id)occurred;
-(void)parseResponseXML;
-(void)requestFinished;
-(void)buildRequestHeaders;
-(id)stringToSignForHeaders:(id)headers resource:(id)resource;
-(id)canonicalizedResource;
-(void)main;
-(id)S3Headers;
-(id)HEADRequest;
-(void)setDate:(id)date;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

@interface ASIS3ServiceRequest : ASIS3Request {
	ASIS3Bucket* currentBucket;
	NSString* ownerName;
	NSString* ownerID;
	NSMutableArray* buckets;
}
@property(retain, nonatomic) NSString* ownerName;
@property(retain, nonatomic) NSString* ownerID;
@property(retain, nonatomic) ASIS3Bucket* currentBucket;
@property(retain) NSMutableArray* buckets;
+(id)serviceRequest;
-(void)parser:(id)parser didEndElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name;
-(void)parser:(id)parser didStartElement:(id)element namespaceURI:(id)uri qualifiedName:(id)name attributes:(id)attributes;
-(void)buildURL;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

@interface Reachability : NSObject {
@private
	NSString* key_;
	SCNetworkReachabilityRef reachabilityRef;
	BOOL reachableViaWiFi;
}
@property(assign, nonatomic) BOOL reachableViaWiFi;
@property(copy) NSString* key;
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)makeAddressKey:(unsigned)key;
+(id)reachabilityWithHostName:(id)hostName;
+(id)defaultReachabilty;
+(BOOL)accessInstanceVariablesDirectly;
+(BOOL)checkNetworkStatus;
-(unsigned)reachabilityFlags;
-(BOOL)isReachableViaWiFi;
-(BOOL)isReachableViaWWAN;
-(BOOL)isInterventionRequired;
-(BOOL)isConnectionOnDemand;
-(BOOL)connectionRequired;
-(BOOL)isConnectionRequired;
-(BOOL)isReachable;
-(int)currentReachabilityStatus;
-(int)networkStatusForFlags:(unsigned)flags;
-(BOOL)isEqual:(id)equal;
-(void)stopNotifier;
-(BOOL)startNotifier;
-(id)initWithReachabilityRef:(SCNetworkReachabilityRef)reachabilityRef;
-(void)dealloc;
@end

@interface EmotionMap : NSObject {
	NSMutableArray* _emotionLocalIndexArray;
	NSMutableArray* _emotionServerIndexArray;
	NSMutableArray* _emotionStringArray;
}
+(id)intance;
-(int)emotionServerIndexFromEmotionString:(id)emotionString;
-(id)emotionStringFromServerIndex:(int)serverIndex;
-(int)emotionLocalIndexFromServerIndex:(int)serverIndex;
-(void)dealloc;
-(id)init;
@end

@interface HorizontalScroller : UIScrollView {
	NSMutableArray* _buttons;
@private
	MQZImagePicker* _picker;
}
@property(assign, nonatomic) MQZImagePicker* picker;
-(void).cxx_destruct;
-(void)remove:(int)remove animated:(BOOL)animated;
-(void)add:(id)add animated:(BOOL)animated;
-(void)resize;
-(void)onClick:(id)click;
-(CGRect)frameForButtonAtIndex:(int)index;
-(void)reload;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZImagePickerSectionHeader : UIView {
	NSString* _text;
	CGPoint _touchBeginPoint;
	UIImage* _arrow;
@private
	MQZImagePicker* _controller;
	BOOL _isArrowDown;
	BOOL _isNeedDrawTopSeperatorLine;
	ALAssetsGroup* _group;
}
@property(assign, nonatomic) MQZImagePicker* controller;
@property(retain, nonatomic) ALAssetsGroup* group;
@property(assign, nonatomic) BOOL isNeedDrawTopSeperatorLine;
@property(assign, nonatomic) BOOL isArrowDown;
-(void).cxx_destruct;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZImagePickerCell : UITableViewCell {
	NSArray* _assets;
	UIButton* _buttonCArray[4];
	UIImageView* _iconCArray[4];
@private
	BOOL _isFirstCellInSection;
	MQZImagePicker* _picker;
}
@property(assign, nonatomic) MQZImagePicker* picker;
@property(assign, nonatomic) BOOL isFirstCellInSection;
@property(retain, nonatomic) NSArray* assets;
-(void).cxx_destruct;
-(CGRect)imageRect:(int)rect;
-(id)assetAtIndex:(int)index;
-(void)resetSubviews;
-(void)layoutSubviews;
-(void)onClickImage:(id)image forEvents:(id)events;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)onMenuClick:(id)click;
-(void)onLongPress:(id)press;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZImagePickerNavigationBar : UIImageView {
	UILabel* _titleLabel;
	UIButton* _leftButton;
	UIButton* _rightButton;
@private
	MQZUserGuideView* _guideView;
}
@property(retain, nonatomic) MQZUserGuideView* guideView;
@property(retain, nonatomic) NSString* title;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)addRightButton:(id)button;
-(void)addLeftButton:(id)button;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZImagePicker : UIViewController <UITableViewDataSource, UITableViewDelegate, MBProgressHUDDelegate, UIScrollViewDelegate> {
@private
	UIScrollView* _scrollView;
	UIButton* _leftButton;
	HorizontalScroller* _scroller;
	UIButton* _confirmButton;
	UITableView* _tableView;
	int _expandedSection;
	BOOL _respondScrollViewDidScroll;
	BOOL _needRefreshTable;
	BOOL _firstBeenVisible;
	MQZCameraPreviewView* _preview;
	ALAsset* _newestAsset;
	NSMutableArray* _groups;
	NSMutableArray* _assets2DArray;
	NSMutableArray* _selectedImages;
	dispatch_group_s* _group;
	dispatch_queue_s* _queue;
	dispatch_semaphore_s* _semaphore;
	MBProgressHUD* _hud;
	id<MQZImagePickerDelegate> _delegate;
	BOOL _presentingPhotoBrowser;
	unsigned _maxPhotoCount;
	BOOL _isLoading;
	ALAssetsLibrary* _library;
	int _sourceType;
}
@property(assign) BOOL isLoading;
@property(assign, nonatomic) BOOL presentingPhotoBrowser;
@property(retain, nonatomic) ALAssetsLibrary* library;
@property(assign, nonatomic) int sourceType;
@property(assign, nonatomic) unsigned maxPhotoCount;
@property(assign, nonatomic) id<MQZImagePickerDelegate> delegate;
@property(retain, nonatomic) NSArray* selectedImages;
+(void)presentImagePickerBy:(id)by maxPhotoCount:(unsigned)count selectedImages:(id)images delegate:(id)delegate sourceType:(int)type;
-(void).cxx_destruct;
-(void)didDeselectedAtIndex:(int)index;
-(id)selectedImageAtIndex:(int)index;
-(int)numberOfSelectedImages;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(int)preferredInterfaceOrientationForPresentation;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)onNotifyAssetsDidChanged:(id)onNotifyAssets;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)goAlbum;
-(void)hudWasHidden:(id)hidden;
-(void)waitUntilDone;
-(void)confirm;
-(void)quit;
-(BOOL)hasSelectedAsset:(id)asset;
-(void)didCaptureImageModel:(id)model;
-(BOOL)didSelectedAsset:(id)asset;
-(void)didDeselectedAsset:(id)asset;
-(void)didClickButtonInPhotoBrowser:(id)photoBrowser;
-(void)didClickPhotoBrowserMenuImage:(int)image inCell:(id)cell;
-(void)didClickImage:(int)image inCell:(id)cell;
-(void)didClickOnHeaderOfSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)assetsForCellAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)getNumberOfRowsInSection:(int)section;
-(void)resetConfirmButton;
-(void)loadPhotoes;
-(void)didEnterBackground:(id)background;
-(void)onIMFucked:(id)fucked;
-(void)viewWillDisappear:(BOOL)view;
-(void)judgeCreateImagePickerGuide;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface QZHTTPHelper : NSObject {
@private
	id target;
	SEL succSelector;
	SEL failSelector;
	SEL progressSelector;
	SEL startSelector;
}
@property(assign, nonatomic) SEL startSelector;
@property(assign, nonatomic) SEL progressSelector;
@property(assign, nonatomic) SEL failSelector;
@property(assign, nonatomic) SEL succSelector;
@property(assign, nonatomic) id target;
+(id)helperWithTarget:(id)target succAction:(SEL)action failAction:(SEL)action3 progressAction:(SEL)action4 startAction:(SEL)action5;
@end

@interface QZoneNetworkHTTP : NSObject {
	NSMutableDictionary* cacheDict_;
}
+(id)getInstance;
+(id)getASINetQueue;
+(id)getNetQueueForOther;
+(id)getNetQueueForAlbum;
+(id)getLocalQueueForOther;
+(id)getLocalQueueForAlbum;
-(void)didRequestFail:(id)fail;
-(void)didRequestFinish:(id)finish;
-(void)willRequestFinish:(id)finish;
-(void)didRequestStart:(id)start;
-(void)request:(id)request didProgressWithDic:(id)dic;
-(void)request:(id)request didProgress:(float)progress;
-(void)cancelWithURL:(id)url;
-(void)clearWithTarget:(id)target;
-(void)clearWithURL:(id)url target:(id)target;
-(void)raiseRequestWithURL:(id)url;
-(void)requestWithURL:(id)url target:(id)target succAction:(SEL)action failAction:(SEL)action4 progressAction:(SEL)action5 startAction:(SEL)action6 check:(BOOL)check priority:(BOOL)priority;
-(void)requestWithURL:(id)url target:(id)target succAction:(SEL)action failAction:(SEL)action4 progressAction:(SEL)action5 startAction:(SEL)action6 check:(BOOL)check;
-(void)requestWithURL:(id)url target:(id)target succAction:(SEL)action failAction:(SEL)action4 progressAction:(SEL)action5 startAction:(SEL)action6;
-(void)requestWithURL:(id)url;
-(BOOL)hasRequestForURL:(id)url;
-(void)dealloc;
-(id)init;
-(void)cancelRequestForURL:(id)url;
-(void)removeRequest:(id)request;
-(void)removeRequestForTarget:(id)target;
-(void)removeRequestForURL:(id)url target:(id)target;
-(void)updateRequestForURL:(id)url target:(id)target succAction:(SEL)action failAction:(SEL)action4 progressAction:(SEL)action5 startAction:(SEL)action6;
-(void)addRequestForURL:(id)url target:(id)target succAction:(SEL)action failAction:(SEL)action4 progressAction:(SEL)action5 startAction:(SEL)action6 check:(BOOL)check priority:(BOOL)priority;
-(void)addRequestForURL:(id)url target:(id)target succAction:(SEL)action failAction:(SEL)action4 progressAction:(SEL)action5 startAction:(SEL)action6 check:(BOOL)check;
-(void)addRequestForURL:(id)url target:(id)target succAction:(SEL)action failAction:(SEL)action4 progressAction:(SEL)action5 startAction:(SEL)action6;
-(void)addRequestForURL:(id)url;
-(id)getASIHttpRequest:(id)request;
-(id)newASIHttpRequest:(id)request check:(BOOL)check priority:(BOOL)priority;
-(id)newASIHttpRequest:(id)request check:(BOOL)check;
-(id)newASIHttpRequest:(id)request;
-(void)raiseRequest:(id)request;
-(void)continueRequest:(id)request;
@end

@interface MQZRightsSettingViewController : MQZSettingViewController {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)reloadTableData;
-(id)getLocalSpaceRightString;
-(id)createItemWithTitle:(id)title key:(id)key style:(id)style;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
@end

@interface MQZSettingItem : NSObject {
@private
	UIImage* _image;
	UIImage* _highlightedImage;
	NSString* _title;
	int _titleIntendation;
	NSString* _detail;
	UIImage* _accessoryImage;
	UIImage* _accessoryHighlightedImage;
	NSString* _style;
	NSString* _key;
	long long _uin;
	float _height;
	UIView* _customView;
}
@property(retain, nonatomic) UIView* customView;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) long long uin;
@property(retain, nonatomic) NSString* key;
@property(retain, nonatomic) NSString* style;
@property(retain, nonatomic) UIImage* accessoryHighlightedImage;
@property(retain, nonatomic) UIImage* accessoryImage;
@property(retain, nonatomic) NSString* detail;
@property(assign, nonatomic) int titleIntendation;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) UIImage* highlightedImage;
@property(retain, nonatomic) UIImage* image;
+(id)createItemWithTitle:(id)title key:(id)key style:(id)style;
-(void).cxx_destruct;
@end

@interface MQZSettingCell : UITableViewCell {
	MQZSettingItem* _item;
}
@property(retain, nonatomic) MQZSettingItem* item;
-(void).cxx_destruct;
-(void)updateBackgroundViewInTableView:(id)tableView atIndexPath:(id)indexPath;
-(void)drawWithItemStyle:(id)itemStyle;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier item:(id)item;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZSettingViewController : QZoneViewController <UITableViewDataSource, UITableViewDelegate> {
@private
	UITableView* _tableView;
	NSMutableArray* _dataSource;
	NSMutableArray* _dataHeads;
	NSMutableArray* _dataFoots;
}
@property(retain, nonatomic) NSMutableArray* dataFoots;
@property(retain, nonatomic) NSMutableArray* dataHeads;
@property(retain, nonatomic) NSMutableArray* dataSource;
@property(retain, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)getCellWithTableView:(id)tableView item:(id)item indexPath:(id)path;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)removeItemByIndexPath:(id)path;
-(id)getItemByIndexPath:(id)path;
-(void)restoreData;
-(void)reloadTableData;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface MQZSpaceRightViewController : MQZSettingViewController {
@private
	int _cur_req;
	int _rightVal;
	NSString* _checkedKey;
	int _getRightRequestId;
	int _setRightRequestId;
}
@property(assign, nonatomic) int setRightRequestId;
@property(assign, nonatomic) int getRightRequestId;
@property(retain, nonatomic) NSString* checkedKey;
@property(assign, nonatomic) int rightVal;
@property(assign, nonatomic) int cur_req;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)onSetSpaceRightNotify:(id)notify;
-(int)onGetSpaceRightNotify:(id)notify;
-(void)setSpaceRightWithKey:(id)key;
-(void)getSpaceRight;
-(void)cancelSetRightRequest;
-(void)cancelGetRightRequest;
-(void)reloadTableData;
-(id)createItemWithTitle:(id)title key:(id)key style:(id)style;
-(void)initNotificationObservers:(id)observers;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface FlashButton : UIView {
	BOOL _selecting;
@private
	int _mode;
	MQZCameraPreviewView* _container;
}
@property(assign, nonatomic) MQZCameraPreviewView* container;
@property(assign, nonatomic) int mode;
-(void)onTap:(id)tap;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZCameraPreviewView : UIView <UIGestureRecognizerDelegate> {
@private
	NSMutableArray* _inputs;
	AVCaptureSession* _session;
	AVCaptureVideoPreviewLayer* _previewLayer;
	AVCaptureStillImageOutput* _output;
	unsigned _currentInputIndex;
	CALayer* _hollowLayer;
	CALayer* _imageLayer;
	UIButton* _switchDeviceButton;
	UIButton* _cameraButton;
	UIButton* _albumButton;
	UIButton* _confirmButton;
	FlashButton* _flashButton;
	UIImageView* _barBg;
	UIImage* _barImageWithoutHollow;
	UIImage* _barImageWithHollow;
	CGPoint _touchPoint;
	int _state;
	BOOL _ignoringInputEvents;
	MQZImagePickerModel* _model;
	MQZImagePicker* _picker;
}
@property(assign, nonatomic) MQZImagePicker* picker;
-(void).cxx_destruct;
-(void)sessionStop;
-(void)sessionStart;
-(void)doubleTap:(id)tap;
-(void)singleTap:(id)tap;
-(void)resetButtonPosition:(id)position;
-(void)setTarget:(id)target goAlbumSelector:(SEL)selector;
-(void)setNewestPicture:(id)picture;
-(void)enterState:(int)state;
-(void)captureImage;
-(void)resetFlashButton;
-(void)swithDevice;
-(void)onCancelButtonClick;
-(void)onConfirmButtonClick;
-(void)setFlashMode:(int)mode;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface PurgeObject : NSObject <NSCoding> {
@private
	int _timestamp;
	id _obj;
	NSString* _key;
}
@property(retain) NSString* key;
@property(retain) id obj;
@property(assign) int timestamp;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZoneSettings : QZoneStorageBase {
@private
	UIImage* _defaultCoverImage;
	NSMutableDictionary* _commonSettings;
	NSMutableDictionary* _accountSettings;
	NSMutableDictionary* accountSettingsWithPurge;
	BOOL _commonSettingsChanged;
	BOOL _accountSettingsChanged;
	BOOL _accountSettingsWithPurgeChanged;
}
@property(assign) BOOL accountSettingsWithPurgeChanged;
@property(assign) BOOL accountSettingsChanged;
@property(assign) BOOL commonSettingsChanged;
@property(retain) NSMutableDictionary* accountSettingsWithPurge;
@property(retain) NSMutableDictionary* accountSettings;
@property(retain) NSMutableDictionary* commonSettings;
@property(retain, nonatomic) UIImage* defaultCoverImage;
+(id)instance;
-(id)loadDefaultCover;
-(void)saveAccessModule:(id)module;
-(BOOL)firstAccessModule:(id)module;
-(BOOL)setAccountSettingWithPurgeItem:(id)purgeItem withKey:(id)key;
-(id)getAccountSettingWithPurgeItem:(id)purgeItem;
-(BOOL)setAccountSettingItem:(id)item withKey:(id)key;
-(id)getAccountSettingItemWithKey:(id)key;
-(BOOL)setCommonSettingItem:(id)item withKey:(id)key;
-(id)getCommonSettingItemWithKey:(id)key;
-(void)storeQZoneSettings;
-(BOOL)storeSettings:(id)settings withUin:(long long)uin Purge:(BOOL)purge;
-(id)loadSettingsWithUin:(long long)uin Purge:(BOOL)purge;
-(id)getSettingsFileNameWithUin:(long long)uin Purge:(BOOL)purge;
-(void)load;
-(void)onCrashed;
-(void)onEnterBackground;
-(void)removeMyObservers;
-(void)initMyObservers;
-(void)dealloc;
-(id)init;
@end

@interface GAStorageManager : NSObject {
@private
	NSMutableArray* _clientKeys;
	NSMutableDictionary* _clientKeyMap;
}
+(id)createImageKey:(id)key type:(int)type;
+(id)keyForUrlWithoutDomain:(id)urlWithoutDomain;
+(id)keyForURL:(id)url;
+(id)instance;
-(void).cxx_destruct;
-(id)imageFromMemForUrl:(id)url clientKey:(id)key clipType:(int)type;
-(void)saveImageToMem:(id)mem url:(id)url clientKey:(id)key clipType:(int)type;
-(id)fileNameForUrl:(id)url clientKey:(id)key clipType:(int)type;
-(id)imageForUrl:(id)url clientKey:(id)key clipType:(int)type;
-(void)saveImageData:(id)data url:(id)url;
-(void)saveImage:(id)image url:(id)url clientKey:(id)key clipType:(int)type;
-(void)saveClientKey:(id)key url:(id)url;
-(void)saveClientKey:(id)key localPath:(id)path;
-(id)init;
@end

@interface GAImageSizeInfo : NSObject <NSCoding, NSCopying> {
	CGSize _imageSize;
	long long _cacheTime;
}
@property(assign, nonatomic) long long cacheTime;
@property(assign, nonatomic) CGSize imageSize;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface GALocalImageSizeInfo : GAImageSizeInfo <NSCoding, NSCopying> {
	NSString* _localPath;
	NSMutableArray* _netUrlList;
}
@property(retain, nonatomic) NSMutableArray* netUrlList;
@property(retain, nonatomic) NSString* localPath;
-(BOOL)hasNetUrl:(id)url;
-(void)addNetUrl:(id)url;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface MQZUncareListViewController : MQZSettingViewController <MQZoneSelectFriendViewDelegate> {
@private
	NSMutableArray* _uinList;
	int _getRequestId;
	int _setRequestId;
}
@property(assign, nonatomic) int setRequestId;
@property(assign, nonatomic) int getRequestId;
@property(retain, nonatomic) NSMutableArray* uinList;
-(void).cxx_destruct;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)onSetUncareNotify:(id)notify;
-(int)onGetUncareListNotify:(id)notify;
-(void)initNotificationObservers:(id)observers;
-(void)getUncareList;
-(void)deleteUncareAccount:(id)account;
-(void)cancelSetRequest;
-(void)cancelGetRequest;
-(int)getMaxSelection;
-(id)getFilterDataList;
-(id)getInitSelectedDataList;
-(id)getInitDataList;
-(void)onSelectionCompeleted:(id)compeleted nicks:(id)nicks;
-(void)handleAddFriend;
-(id)getUinNumberList:(id)list;
-(void)onRightButtonClicked:(id)clicked;
-(void)reloadTableData;
-(id)createAddAccountItem;
-(id)createAccoutItems;
-(id)createItemWithTitle:(id)title key:(id)key style:(id)style;
-(id)createDefaultHeaderView;
-(BOOL)isSupportRightDragToGoBack;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface MQZBlackListViewController : MQZSettingViewController <MQZoneSelectFriendViewDelegate> {
@private
	NSMutableArray* _uinList;
	int _getRequestId;
	int _setRequestId;
}
@property(assign, nonatomic) int setRequestId;
@property(assign, nonatomic) int getRequestId;
@property(retain, nonatomic) NSMutableArray* uinList;
-(void).cxx_destruct;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)onSetBlackNotify:(id)notify;
-(int)onGetBlackListNotify:(id)notify;
-(void)initNotificationObservers:(id)observers;
-(void)getBlackList;
-(void)deleteBlackAccount:(id)account;
-(void)cancelSetRequest;
-(void)cancelGetRequest;
-(int)getMaxSelection;
-(id)getFilterDataList;
-(id)getInitSelectedDataList;
-(id)getInitDataList;
-(void)onSelectionCompeleted:(id)compeleted nicks:(id)nicks;
-(void)handleAddFriend;
-(id)getUinNumberList:(id)list;
-(void)onRightButtonClicked:(id)clicked;
-(void)reloadTableData;
-(id)createAddAccountItem;
-(id)createAccoutItems;
-(id)createItemWithTitle:(id)title key:(id)key style:(id)style;
-(id)createDefaultHeaderView;
-(BOOL)isSupportRightDragToGoBack;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface MQZGiftTypeListViewController : MQZonePullingTableViewController {
@private
	NSMutableArray* _gifts;
	QzoneFeedModel* _model;
	GiftContext* _giftContext;
	UIViewController* _controller;
	BOOL _forceInReturn;
}
@property(assign, nonatomic) UIViewController* controller;
@property(retain, nonatomic) QzoneFeedModel* model;
@property(assign, nonatomic) BOOL forceInReturn;
@property(retain, nonatomic) GiftContext* giftContext;
-(void).cxx_destruct;
-(void)didClickImage:(int)image cell:(id)cell;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)onNotifyGetGiftTypeList:(id)list;
-(void)viewDidLoad;
-(void)loadView;
-(void)initNotificationObservers:(id)observers;
-(id)init;
@end

@interface FriendsPanel : UIView {
	NSMutableArray* _buttons;
	NSMutableArray* _friends;
@private
	MQZSendGiftViewController* _ctr;
	BOOL _canEdit;
}
@property(assign, nonatomic) MQZSendGiftViewController* ctr;
@property(assign, nonatomic) BOOL canEdit;
@property(retain, nonatomic) NSArray* friends;
-(void).cxx_destruct;
-(void)addFriendButtonClick;
-(void)friendButtonClick:(id)click;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SendOptionView : UIView {
	UIButton* _checkButton1;
	UIButton* _checkButton2;
@private
	BOOL _sendInSecret;
	BOOL _sendOnBirthday;
}
@property(assign, nonatomic) BOOL sendOnBirthday;
@property(assign, nonatomic) BOOL sendInSecret;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)resetButtonImage;
-(void)onClick:(id)click;
-(id)initWithFrame:(CGRect)frame;
@end

@interface GiftView : UIView <IGACanvas> {
	MQZCustomLabel* _label;
@private
	UIImage* _bgImage;
	GiftItem* _gift;
}
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) UIImage* bgImage;
@property(retain, nonatomic) GiftItem* gift;
-(void).cxx_destruct;
-(void)updateCanvas:(id)canvas;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZSendGiftViewController : QZoneViewController <UITextViewDelegate> {
@private
	long long _uin;
	NSMutableArray* _friends;
	GiftItem* _gift;
	FriendsPanel* _friendsPanel;
	SendOptionView* _sendOptionView;
	GiftView* _giftView;
	UIScrollView* _scrollView;
	UIImageView* _textViewBg;
	UITextView* _textView;
	UIControl* _mask;
	UIViewController* _controller;
	QzoneFeedModel* _model;
}
@property(retain, nonatomic) QzoneFeedModel* model;
@property(assign, nonatomic) UIViewController* controller;
-(void).cxx_destruct;
-(void)friendPanels:(id)panels willChangeToHeight:(float)height;
-(void)inputFinish;
-(void)onTapText;
-(void)onRightButtonClick;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(void)addMask;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)onNotifyKeyboardWillHide:(id)onNotifyKeyboard;
-(void)onNotifyKeyboardWillShow:(id)onNotifyKeyboard;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)loadView;
-(int)onNotifySend:(id)send;
-(void)initNotificationObservers:(id)observers;
-(void)dealloc;
-(id)initWithFriends:(id)friends gift:(id)gift;
@end

@interface QZEngineNotificationGiftTypeList : QZEngineNotificationInfoBase {
@private
	int _commontotal;
	int _diytotal;
	NSArray* _commonGiftTypeList;
	NSArray* _diyGiftList;
}
@property(assign, nonatomic) int commontotal;
@property(assign, nonatomic) int diytotal;
@property(retain, nonatomic) NSArray* commonGiftTypeList;
@property(retain, nonatomic) NSArray* diyGiftList;
-(void).cxx_destruct;
@end

@interface MQZGiftListCell : UITableViewCell <IGADrawASynImgItemDelegate> {
@private
	MQZGiftTypeListViewController* _ctr;
	GALayoutInfo* _info;
}
@property(assign, nonatomic) MQZGiftTypeListViewController* ctr;
@property(retain, nonatomic) GALayoutInfo* info;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)notifyNeedUpdateScreen:(CGRect)screen;
-(void)onTap:(id)tap;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZImagePickerPhotoBrowser : MQZBasePhotoBrowserViewController {
@private
	UIButton* _button;
	MQZImagePicker* _picker;
}
@property(assign, nonatomic) MQZImagePicker* picker;
-(void).cxx_destruct;
-(void)didScrollToPage:(int)page oldPage:(int)page2;
-(void)resetButtonImage;
-(void)onClick:(id)click forEvents:(id)events;
-(void)viewWillDisappear:(BOOL)view;
-(void)loadView;
-(id)init;
@end

@interface MQZAccoutCell : MQZSettingCell {
}
-(void)setItem:(id)item;
-(id)getAccountFaceView;
-(id)getAccountNameLabel;
-(void)clickOnHeaderImage;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QZOperationBox : GAMultiThreadObject <IAccountChangedObsever> {
	QZoneOperationBoxCache* _storage;
	int _status;
	NSTimer* _timer;
}
+(id)instance;
-(void).cxx_destruct;
-(void)onAccountLogout;
-(void)onAccountLogin;
-(void)removeBusiness:(id)business;
-(BOOL)addBusiness:(id)business;
-(void)sendBusiness:(id)business;
-(void)reset;
-(void)stop;
-(void)start;
-(void)dealloc;
-(id)init;
-(id)getTaskErrorDesc:(id)desc;
-(id)getTaskShowMessage:(id)message status:(id)status content:(id)content error:(id)error;
-(id)getTaskOpContent:(id)content;
-(id)getTaskOpString:(id)string;
-(id)formatMsgContent:(id)content;
-(id)filterUrlLink:(id)link;
-(id)decodeUrlString:(id)string;
-(void)onOpRetryFailed:(id)failed;
-(void)notifyError:(id)error;
-(void)notifySuccess:(id)success;
-(void)didMessageChangeState:(id)state;
-(void)sendNext;
-(void)onTimer;
-(void)stopTimer;
-(void)startTimer;
@end

@interface QZWnsRetryInfo : NSObject <NSCoding> {
	unsigned char _flag;
	short _retryCount;
	long long _pkgId;
@private
	MQZStatisticsProtocol* stat;
}
@property(retain, nonatomic) MQZStatisticsProtocol* stat;
@property(assign, nonatomic) long long pkgId;
@property(assign, nonatomic) short retryCount;
@property(assign, nonatomic) unsigned char flag;
+(id)retryInfo;
-(void).cxx_destruct;
-(void)endStatFailWithBusiName:(id)busiName;
-(void)endStatSuccessWithBusiName:(id)busiName errorCode:(int)code errorDesc:(id)desc;
-(void)beginStat;
-(BOOL)canTry;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
@end

@interface MQZCustomLabel : UIView {
@private
	float _lineMargin;
	unsigned _maxLines;
	NSString* _text;
	UIFont* _font;
	UIColor* _color;
}
@property(assign, nonatomic) unsigned maxLines;
@property(assign, nonatomic) float lineMargin;
@property(retain, nonatomic) UIColor* color;
@property(retain, nonatomic) UIFont* font;
@property(retain, nonatomic) NSString* text;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QZUpIpInfo : NSObject <NSCoding> {
	NSString* _ip;
	int _port;
	NSString* _carrierName;
	int _carrierType;
	int _protocol;
	int _ipType;
	int _ipValue;
	int _ipStatus;
}
@property(assign, nonatomic) int ipStatus;
@property(assign, nonatomic) int ipValue;
@property(assign, nonatomic) int ipType;
@property(assign, nonatomic) int protocol;
@property(assign, nonatomic) int carrierType;
@property(retain, nonatomic) NSString* carrierName;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* ip;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(BOOL)isEqual:(id)equal;
-(id)initWithIp:(id)ip;
@end

@interface QZUpIpMgr : NSObject {
	NSMutableArray* ipList;
	int ipIndex;
	BOOL isUpOther;
	int ipRetryCounts;
	int ipRetryMaxCount;
@private
	NSMutableDictionary* latestIpDict;
	NSMutableDictionary* latestOtherIpDict;
}
@property(retain) NSMutableDictionary* latestOtherIpDict;
@property(retain) NSMutableDictionary* latestIpDict;
@property(assign) BOOL isUpOther;
@property(assign) int ipIndex;
@property(retain) NSMutableArray* ipList;
+(void)exit;
+(id)instance;
-(void)resetLatest;
-(void)update:(id)update result:(int)result;
-(id)getIp;
-(void)reset;
-(void)load;
-(void)switchToTestIP;
-(void)initOtherIpList:(id)list;
-(void)initPicIPList:(id)list;
-(id)getIpList:(id)list iptype:(int)iptype apn:(int)apn;
-(void)dealloc;
-(id)init;
@end

@interface QZUpIpSource : NSObject {
}
+(id)protocolList;
+(id)portList;
+(id)otherOptimumIp;
+(id)picOptimumIp;
+(id)optimumIp:(id)ip;
+(id)backIp2;
+(id)backIp1;
+(id)backupIp:(id)ip;
+(id)domainName2;
+(id)domainName1;
+(id)domainIp:(id)ip;
+(const char*)covertHostToIp2:(id)ip2;
+(const char*)covertHostToIp:(id)ip;
+(const char*)covertHostToIpPure:(id)ipPure;
@end

@interface QzoneFeedCellLeftThumb : NSObject <NSCoding, NSCopying> {
@private
	int _mediaType;
	QzoneFeedPicture* _picture;
	NSString* _title;
	NSString* _summary;
	int _actiontype;
	NSString* _actionurl;
	GALayoutInfo* _info;
}
@property(retain, nonatomic) GALayoutInfo* info;
@property(retain, nonatomic) NSString* actionurl;
@property(assign, nonatomic) int actiontype;
@property(retain, nonatomic) NSString* summary;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) QzoneFeedPicture* picture;
@property(assign, nonatomic) int mediaType;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface LoadingPhotoConfig : NSObject <NSCoding> {
	int version;
	NSString* url;
	long long begintime;
	long long endtime;
}
@property(assign, nonatomic) long long endtime;
@property(assign, nonatomic) long long begintime;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) int version;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface PhotoUploadConfig : NSObject <NSCoding> {
	int version;
	int autoWiFi;
	int auto3G;
	int auto2G;
	NSMutableArray* qualityLowArray;
	NSMutableArray* qualityHighArray;
	NSMutableArray* resolutionLowArray;
	NSMutableArray* resolutionHighArray;
	NSString* desc;
	int maxNum;
	int connectTimeout;
	int dataTimeout;
	int timeoutRetryCount;
	int maxConcurrentNum;
	int videoPartRetryCount;
	int videoFileRetryCount;
	int videoPartSize;
	int videoPartConcurrentCount;
	int albumMaxPhotoCount;
	NSMutableArray* uploadPort;
}
@property(retain, nonatomic) NSMutableArray* uploadPort;
@property(assign, nonatomic) int albumMaxPhotoCount;
@property(assign, nonatomic) int videoPartConcurrentCount;
@property(assign, nonatomic) int videoPartSize;
@property(assign, nonatomic) int videoFileRetryCount;
@property(assign, nonatomic) int videoPartRetryCount;
@property(assign, nonatomic) int maxConcurrentNum;
@property(assign, nonatomic) int timeoutRetryCount;
@property(assign, nonatomic) int dataTimeout;
@property(assign, nonatomic) int connectTimeout;
@property(assign, nonatomic) int maxNum;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSMutableArray* resolutionHighArray;
@property(retain, nonatomic) NSMutableArray* resolutionLowArray;
@property(retain, nonatomic) NSMutableArray* qualityHighArray;
@property(retain, nonatomic) NSMutableArray* qualityLowArray;
@property(assign, nonatomic) int auto2G;
@property(assign, nonatomic) int auto3G;
@property(assign, nonatomic) int autoWiFi;
@property(assign, nonatomic) int version;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface PhotoDownloadConfig : NSObject <NSCoding> {
	int version;
	int minBytes;
	int maxMum;
	int lowSpeed;
	int highSpeed;
	int enableColor;
	NSMutableArray* backupIP;
}
@property(retain, nonatomic) NSMutableArray* backupIP;
@property(assign, nonatomic) int enableColor;
@property(assign, nonatomic) int highSpeed;
@property(assign, nonatomic) int lowSpeed;
@property(assign, nonatomic) int maxMum;
@property(assign, nonatomic) int minBytes;
@property(assign, nonatomic) int version;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface PhotoSvrListConfig : NSObject <NSCoding> {
	int version;
	NSMutableArray* optimumIP1;
	NSMutableArray* optimumIP2;
	NSString* photoURL1;
	NSString* photoURL2;
	NSString* photoURL3;
	NSMutableArray* backupIP1;
	NSMutableArray* backupIP2;
}
@property(retain, nonatomic) NSMutableArray* backupIP2;
@property(retain, nonatomic) NSMutableArray* backupIP1;
@property(retain, nonatomic) NSString* photoURL3;
@property(retain, nonatomic) NSString* photoURL2;
@property(retain, nonatomic) NSString* photoURL1;
@property(retain, nonatomic) NSMutableArray* optimumIP2;
@property(retain, nonatomic) NSMutableArray* optimumIP1;
@property(assign, nonatomic) int version;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface VoiceMoodConfig : NSObject <NSCoding> {
	int version;
	int allowVoiceMood;
	int allowVoiceOP;
	int allowVoiceForward;
}
@property(assign, nonatomic) int allowVoiceForward;
@property(assign, nonatomic) int allowVoiceOP;
@property(assign, nonatomic) int allowVoiceMood;
@property(assign, nonatomic) int version;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface GiftConfig : NSObject <NSCoding> {
	int maxReceiverCount;
}
@property(assign, nonatomic) int maxReceiverCount;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface LogConfig : NSObject <NSCoding> {
	int enableLog;
}
@property(assign, nonatomic) int enableLog;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface PhotoViewConfig : NSObject <NSCoding> {
	int showOPDelay;
}
@property(assign, nonatomic) int showOPDelay;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface AccReportConfig : NSObject <NSCoding> {
	int accReportCount;
	int accReportSamples;
	int accReportInterval;
}
@property(assign, nonatomic) int accReportInterval;
@property(assign, nonatomic) int accReportSamples;
@property(assign, nonatomic) int accReportCount;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface ReportSettingConfig : NSObject <NSCoding> {
	int traceReportCount;
	int traceReportSamples;
	int traceReportInterval;
	NSString* traceReportURL;
	NSString* traceReportIP;
	int visitorReportStopSeconds;
	int visitorReportCount;
	int visitorReportInterval;
	int traceSucReportInterval;
	int traceFailReportInterval;
}
@property(assign, nonatomic) int traceFailReportInterval;
@property(assign, nonatomic) int traceSucReportInterval;
@property(assign, nonatomic) int visitorReportInterval;
@property(assign, nonatomic) int visitorReportCount;
@property(assign, nonatomic) int visitorReportStopSeconds;
@property(retain, nonatomic) NSString* traceReportIP;
@property(retain, nonatomic) NSString* traceReportURL;
@property(assign, nonatomic) int traceReportInterval;
@property(assign, nonatomic) int traceReportSamples;
@property(assign, nonatomic) int traceReportCount;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface BackupIPItem : NSObject <NSCoding> {
	int backupApn;
	NSString* backupIP;
	int backupPort;
}
@property(assign, nonatomic) int backupPort;
@property(retain, nonatomic) NSString* backupIP;
@property(assign, nonatomic) int backupApn;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface ReportBackupIPConfig : NSObject <NSCoding> {
	NSMutableArray* accReportBackupIPArray;
	NSMutableArray* picReportBackupIPArray;
}
@property(retain, nonatomic) NSMutableArray* picReportBackupIPArray;
@property(retain, nonatomic) NSMutableArray* accReportBackupIPArray;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface WnsRetrySettingConfig : NSObject <NSCoding> {
	int reConnCount;
	int retryTime;
}
@property(assign, nonatomic) int retryTime;
@property(assign, nonatomic) int reConnCount;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface QZoneSettingConfig : NSObject <NSCoding> {
	int suicideCnt;
	int suicideTimespan;
	int weatherCacheTime;
	int poiCacheDistance;
	int coordinateCacheTime;
	int poiCacheTime;
	int enableLBSPreload;
	int updateQueryInterval;
	float delWaterMarkTime;
	float outBoxRetryTimeout;
}
@property(assign, nonatomic) float outBoxRetryTimeout;
@property(assign, nonatomic) float delWaterMarkTime;
@property(assign, nonatomic) int updateQueryInterval;
@property(assign, nonatomic) int enableLBSPreload;
@property(assign, nonatomic) int poiCacheTime;
@property(assign, nonatomic) int coordinateCacheTime;
@property(assign, nonatomic) int poiCacheDistance;
@property(assign, nonatomic) int weatherCacheTime;
@property(assign, nonatomic) int suicideTimespan;
@property(assign, nonatomic) int suicideCnt;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface AppConfigDict : NSObject <NSCoding> {
	int version;
	LoadingPhotoConfig* loadingPhotoCfg;
	PhotoUploadConfig* photoUploadCfg;
	PhotoDownloadConfig* photoDownloadCfg;
	PhotoSvrListConfig* photoSvrListCfg;
	VoiceMoodConfig* voiceMoodCfg;
	GiftConfig* giftConfig;
	LogConfig* logConfig;
	PhotoViewConfig* photoViewConfig;
	AccReportConfig* accReportConfig;
	ReportBackupIPConfig* reportBackupIPConfig;
	ReportSettingConfig* reportSettingConfig;
	WnsRetrySettingConfig* wnsRetrySettingConfig;
	QZoneSettingConfig* qzoneSettingConfig;
}
@property(retain, nonatomic) QZoneSettingConfig* qzoneSettingConfig;
@property(retain, nonatomic) WnsRetrySettingConfig* wnsRetrySettingConfig;
@property(retain, nonatomic) ReportSettingConfig* reportSettingConfig;
@property(retain, nonatomic) ReportBackupIPConfig* reportBackupIPConfig;
@property(retain, nonatomic) AccReportConfig* accReportConfig;
@property(retain, nonatomic) PhotoViewConfig* photoViewConfig;
@property(retain, nonatomic) LogConfig* logConfig;
@property(retain, nonatomic) GiftConfig* giftConfig;
@property(retain, nonatomic) VoiceMoodConfig* voiceMoodCfg;
@property(retain, nonatomic) PhotoSvrListConfig* photoSvrListCfg;
@property(retain, nonatomic) PhotoDownloadConfig* photoDownloadCfg;
@property(retain, nonatomic) PhotoUploadConfig* photoUploadCfg;
@property(retain, nonatomic) LoadingPhotoConfig* loadingPhotoCfg;
@property(assign, nonatomic) int version;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface WnsConfigManager : NSObject {
	AppConfigDict* appConfig;
	NSString* _cookies;
	NSTimer* _getConfigTimer;
	BOOL _hasGetConfig;
}
@property(retain, nonatomic) AppConfigDict* appConfig;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)didGetConfigFail:(id)fail info:(id)info;
-(void)didGetConfigSuccess:(id)success;
-(void)didMessageChangeState:(id)state;
-(void)GetQzoneSettingConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetPhotoSvrListConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(id)parseIpListJson:(id)json;
-(id)parseBackupIpListJson:(id)json;
-(void)GetWnsRetrySettingConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetReportBackupIpConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetReportSettingConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetAccReportConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetWnsSettingConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetPhotoViewConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetLogConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetGiftConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetVoiceMoodConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetPhotoUpLoadConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetPhotoDownloadConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(void)GetLoadingPhotoConfig:(UniAttribute<taf::BufferWriter, taf::BufferReader, std::allocator>)config;
-(int)getConfig:(int)config;
-(id)getCookies;
-(void)timeOfFire;
-(void)startGetConfigTimer;
-(int)getScene;
-(id)init;
-(void)loadConfig;
-(void)saveConfig;
-(id)appConfigCookiesPath;
-(id)appConfigPath;
-(id)basePath;
@end

@interface QZBusinessEngineGetWNSConfig : QZBusinessEngine {
}
+(void)finalize;
+(void)initialize;
+(id)sharedInstance;
-(BOOL)processGetWNSConfig:(id)config responed:(id)responed;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)requestWNSConfig:(id)config;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
@end

@interface QZoneOperationBoxCache : QZoneStorageBase {
	NSMutableArray* _array;
	NSString* _fileName;
}
-(void).cxx_destruct;
-(BOOL)isEmpty;
-(int)count;
-(id)firstBusiness;
-(id)popFirstBusiness;
-(void)clear;
-(void)removeBusiness:(id)business;
-(void)addBusiness:(id)business;
-(void)flush;
-(void)load;
-(void)onAccountChanged:(long long)changed;
-(void)dealloc;
-(id)init;
@end

@interface MQZEnvViewController : MQZSettingViewController {
@private
	NSString* _checkedKey;
}
@property(retain, nonatomic) NSString* checkedKey;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)setEnvironment:(id)environment;
-(void)reloadTableData;
-(id)createItemWithTitle:(id)title key:(id)key style:(id)style;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)init;
@end

@interface GroupZoneAlbumListCache : NSObject {
}
+(void)releaseInstance;
+(id)sharedInstance;
-(void)cacheListToFile:(id)file list:(id)list;
-(id)loadCachedListFromFile:(id)file;
-(void)cacheGZPhotoListWithGroupCode:(long long)groupCode albumId:(id)anId list:(id)list;
-(id)getCachedGZPhotoListWithGroupCode:(long long)groupCode albumId:(id)anId;
-(id)getCacheFilePathWithGroupCode:(long long)groupCode albumId:(id)anId;
-(BOOL)cleanAlbumListCache:(long long)cache;
-(id)loadAlbumListCache:(long long)cache;
-(BOOL)appendCacheAlbumList:(id)list groupCode:(long long)code;
-(BOOL)cacheAlbumList:(id)list groupCode:(long long)code;
-(id)getCacheFilePath:(long long)path;
-(void)dealloc;
@end

@interface QZNotificationOpBox : QZEngineNotificationInfoBase {
}
@end

@interface MQZAssetPhoto : MQZPhoto {
@private
	ALAsset* _asset;
}
@property(retain, nonatomic) ALAsset* asset;
-(void).cxx_destruct;
-(id)getThumbImage;
-(id)getImageRaw;
-(id)getImage;
-(id)scaleToFitSize:(id)fitSize;
-(BOOL)isGif;
@end

@interface GZBusinessEnginePhoto : QZBusinessEngine {
}
+(void)releaseInstance;
+(id)sharedInstance;
-(BOOL)getGZPhotoListEX:(id)ex responed:(id)responed;
-(BOOL)getGZPhotoListEX:(id)ex;
-(BOOL)getGZPhotoList:(id)list respond:(id)respond;
-(BOOL)getGZPhotoList:(id)list;
-(BOOL)getGZAlbumList:(id)list respond:(id)respond;
-(BOOL)getGZAlbumList:(id)list;
-(BOOL)createAlbum:(id)album responde:(id)responde;
-(BOOL)createAlbum:(id)album;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface GroupZoneNotificationBase : QZEngineNotificationInfoBase {
@private
	long long _groupCode;
}
@property(assign, nonatomic) long long groupCode;
-(id)init;
@end

@interface GroupZoneNotificationAlbumList : GroupZoneNotificationBase {
@private
	BOOL _hasMore;
	NSMutableArray* _feedModelList;
}
@property(assign, nonatomic) BOOL hasMore;
@property(retain, nonatomic) NSMutableArray* feedModelList;
-(void).cxx_destruct;
@end

@interface GroupZoneNotificationPhotoList : GroupZoneNotificationBase {
@private
	BOOL _hasMore;
	GroupZoneAlbumInfo* _groupAlbumInfo;
	NSMutableArray* _photoModelList;
}
@property(assign, nonatomic) BOOL hasMore;
@property(retain, nonatomic) NSMutableArray* photoModelList;
@property(retain, nonatomic) GroupZoneAlbumInfo* groupAlbumInfo;
-(void).cxx_destruct;
@end

@interface GroupZoneNotificationCreateAlbum : GroupZoneNotificationBase {
@private
	NSString* _albumID;
	NSString* _albumName;
}
@property(retain, nonatomic) NSString* albumID;
@property(retain, nonatomic) NSString* albumName;
-(void).cxx_destruct;
@end

@interface GroupZoneNotificationPhotoListEx : QZNotificationGetPhotoListEx {
@private
	long long _groupCode;
}
@property(assign, nonatomic) long long groupCode;
-(id)init;
@end

@interface GroupZoneNotificationAddComment : QZNotificationFeedComment {
@private
	long long _groupCode;
	NSString* _verifyURL;
}
@property(retain, nonatomic) NSString* verifyURL;
@property(assign, nonatomic) long long groupCode;
-(void).cxx_destruct;
@end

@interface GroupZoneNotificationDetail : QZNotificationFeedGetDetail {
@private
	long long _groupCode;
}
@property(assign, nonatomic) long long groupCode;
-(id)initWithGroupCode:(long long)groupCode requestID:(int)anId action:(int)action error:(int)error msg:(id)msg;
-(id)initWithGroupCode:(long long)groupCode requestID:(int)anId action:(int)action feedModel:(id)model hasMore:(int)more beginIndex:(int)index count:(int)count;
-(id)init;
@end

@interface GZBusinessEngineFeed : QZBusinessEngine {
}
+(void)releaseInstance;
+(id)sharedInstance;
-(BOOL)getGZDetail:(id)detail responde:(id)responde;
-(BOOL)getGZDetail:(id)detail;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface GZBusinessEngineOP : QZBusinessEngine {
}
+(void)releaseInstance;
+(id)sharedInstance;
-(BOOL)gzAddComment:(id)comment responde:(id)responde;
-(BOOL)gzAddComment:(id)comment;
-(BOOL)processResponseSucceed:(id)succeed withData:(id)data;
-(BOOL)processRequest:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface GroupZoneAlbumInfo : NSObject <NSCoding, NSCopying> {
@private
	long long _groupCode;
	NSString* _albumDescription;
	NSString* _albumName;
	NSString* _albumID;
	int _createTime;
	int _totalCount;
	int _lastuploadTime;
	int _modityTime;
	int _privacy;
}
@property(assign, nonatomic) int totalCount;
@property(assign, nonatomic) int privacy;
@property(assign, nonatomic) int lastuploadTime;
@property(assign, nonatomic) int modityTime;
@property(assign, nonatomic) int createTime;
@property(retain, nonatomic) NSString* albumDescription;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSString* albumID;
@property(assign, nonatomic) long long groupCode;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
@end

@interface GroupZoneOperationEngine : QZEngineBase {
}
+(void)releaseInstance;
+(id)instance;
-(void)didMessageChangeState:(id)state;
-(void)removeDraft:(id)draft;
-(id)postFakeCommentNotification:(int)notification feed:(id)feed content:(id)content from:(int)from filter:(int)filter action:(int)action userParam:(id)param;
-(void)addCommentRespond:(id)respond;
-(int)addCommentWithGroupCode:(long long)groupCode FeedModel:(id)model comment:(id)comment from:(int)from notifyName:(id)name userParam:(id)param;
@end

@interface GroupZoneAlbumEngine : QZEngineBase {
@private
	NSMutableDictionary* _albumListAttachInfoDict;
	NSMutableDictionary* _photoListAttachInfoDict;
	NSMutableDictionary* _defaultAlbumIdDict;
}
@property(retain, nonatomic) NSMutableDictionary* defaultAlbumIdDict;
@property(retain, nonatomic) NSMutableDictionary* photoListAttachInfoDict;
@property(retain, nonatomic) NSMutableDictionary* albumListAttachInfoDict;
+(void)releaseInstance;
+(id)instance;
-(void).cxx_destruct;
-(void)didMessageChangeState:(id)state;
-(void)setAttachInfoWithGroupCode:(long long)groupCode attachInfoDict:(id)dict attach:(id)attach;
-(id)getAttachInfoWithGroupCode:(long long)groupCode attachInfoDict:(id)dict;
-(void)createAlbumRespond:(id)respond;
-(int)createAlbum:(long long)album albumName:(id)name albumDescription:(id)description busiParam:(id)param notifyName:(id)name5;
-(void)getPhotoListExRespond:(id)respond;
-(int)getPhotoListEx:(long long)ex albumid:(id)albumid needleft:(BOOL)needleft needright:(BOOL)needright curlloc:(id)curlloc url:(id)url type:(int)type busiParam:(id)param notifyName:(id)name userParam:(id)param10;
-(void)getLocalPhotoListAndNotifyWithGroupCode:(long long)groupCode albumID:(id)anId userParam:(id)param notifyName:(id)name;
-(void)getGroupPhotoListRespond:(id)respond;
-(int)getGroupPhotoListWithGroupCode:(long long)groupCode albumID:(id)anId more:(BOOL)more isNeedLocal:(BOOL)local busiParam:(id)param notifyName:(id)name;
-(id)getLocalGroupPhotoListWithGroupCode:(long long)groupCode albumID:(id)anId userParam:(id)param;
-(id)retriveDefaultAlbumIdFromList:(id)list;
-(void)setDefaultAlbumId:(id)anId GroupCode:(long long)code;
-(id)getDefaultAlbumIdWithGroupCode:(long long)groupCode;
-(void)getGroupAlbumListRespond:(id)respond;
-(int)getGroupAlbumListWithGroupCode:(long long)groupCode more:(BOOL)more isNeedLocal:(BOOL)local busiParam:(id)param notifyName:(id)name;
-(void)dealloc;
-(id)init;
@end

@interface GroupZoneDetailEngine : QZEngineBase <QZoneFeedDetailManagerDelegate> {
@private
	NSMutableDictionary* _detailParams;
	NSMutableArray* _detailManagerArray;
}
@property(retain, nonatomic) NSMutableArray* detailManagerArray;
@property(retain, nonatomic) NSMutableDictionary* detailParams;
+(void)releaseInstance;
+(id)instance;
-(void).cxx_destruct;
-(void)didUpdateFeedDetailCommentFailure:(id)failure error:(id)error;
-(void)didUpdateFeedDetailFailure:(id)failure error:(id)error;
-(void)didUpdateFeedDetailLikeSucceed:(id)succeed;
-(void)didUpdateFeedDetailCommentsSucceed:(id)succeed newCommentsCount:(int)count;
-(void)didUpdateFeedDetailSucceed:(id)succeed newCommentsCount:(int)count;
-(void)postFailedDetailNotificationWithGroupCode:(long long)groupCode requestID:(int)anId action:(int)action Error:(int)error andDescription:(id)description;
-(void)postSuccessDetailNotificationWithGroupCode:(long long)groupCode requestID:(int)anId action:(int)action feedModel:(id)model hasMore:(int)more beginIndex:(int)index count:(int)count;
-(BOOL)removeDetailManager:(id)manager;
-(void)setDetailParamsWithKey:(id)key params:(id)params;
-(id)getDetailParamsWithKey:(id)key;
-(id)getDetailParamKey:(id)key;
-(int)getDetailCommentWithGroupCode:(long long)groupCode feedModel:(id)model index:(int)index more:(BOOL)more;
-(int)getDetailWithGroupCode:(long long)groupCode feedModel:(id)model from:(int)from;
-(void)dealloc;
-(id)init;
@end

@interface CoverSettingContoller : QZoneViewController <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _tableView;
	NSMutableArray* _commendRes;
	NSMutableArray* _defaultCoverUrl;
	BOOL imageFromCamera;
	int _isVip;
	int _requestId;
	NSString* _defaultURL;
@private
	id<ICoverSettingDelegate> _delegate;
}
@property(assign, nonatomic) int isVip;
@property(retain, nonatomic) NSMutableArray* defaultCoverUrl;
@property(retain, nonatomic) NSMutableArray* commendRes;
@property(assign, nonatomic) id<ICoverSettingDelegate> delegate;
-(void).cxx_destruct;
-(void)onNotifySetCover:(id)cover;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)initNotificationObservers:(id)observers;
-(void)viewDidLoad;
-(void)viewDidUnload;
-(void)loadView;
-(void)dealloc;
-(id)init;
@end

@interface CoverSettingCell : UITableViewCell {
	UIImage* _coverImg;
	UIImage* _selectedImg;
	CGRect _imgRect;
	CGRect _maskRect;
	BOOL _selected;
	BOOL _highlighted;
}
@property(retain, nonatomic) UIImage* selectedImg;
@property(retain, nonatomic) UIImage* coverImg;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)setCheck:(BOOL)check;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QZNotificationGetCover : QZEngineNotificationInfoBase {
@private
	NSString* _cover;
}
@property(retain, nonatomic) NSString* cover;
-(void).cxx_destruct;
@end

@interface QZNotificationSetCover : QZEngineNotificationInfoBase {
}
@end

@interface GAFillImageView : UIImageView <IGACanvas> {
	id _target;
	SEL _action;
}
-(void)getImage:(id)image;
-(void)updateCanvas:(id)canvas;
-(void)addTarget:(id)target action:(SEL)action;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QZAlertView : UIAlertView {
@private
	id userData;
}
@property(retain, nonatomic) id userData;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface MQZoneCreareAlbumCell : MQZoneTableViewCell {
	UIImageView* _plusIcon;
	UILabel* _label;
	UIImageView* _arrowIcon;
}
+(float)heightForFeedModel:(id)feedModel;
-(void).cxx_destruct;
-(void)drawSeparateLine:(CGRect)line;
-(void)onUpdateFeedModel:(id)model;
-(void)setArrowVisible:(BOOL)visible;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZMoodListViewController : MQZoneOperatableViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, MQZoneActiveFeedCellDelegate> {
	UIView* _contentView;
	long long _uin;
	NSString* _nickname;
	NSMutableArray* _feedList;
	NSMutableDictionary* _dictFeedsWithKey;
	int _unReadFeedNum;
	int _lastUpdateTime;
	int _hasMore;
	int _moodListReqID;
	NSMutableDictionary* _getAllCommentRequestIDContainer;
}
-(void).cxx_destruct;
-(void)inputBarDidDeactive:(id)inputBar;
-(BOOL)inputBarSendText:(id)text param:(id)param;
-(void)clickLikeButton:(id)button;
-(void)clickCommentButton:(id)button;
-(int)onGetAllCommentNotify:(id)notify;
-(void)getAllComment:(id)comment hasMore:(BOOL)more;
-(void)removeGetAllCommentContainer;
-(void)removeGetAllCommentRequestID:(int)anId cancel:(BOOL)cancel;
-(BOOL)isGetAllCommentRequestIDInContainer:(int)container;
-(void)removeGetAllCommentRequestIDForkey:(id)forkey cancel:(BOOL)cancel;
-(void)handleCommentCloseAll:(id)all;
-(void)handleCommentLoadingMore:(id)more;
-(void)handleCommentOpenAll:(id)all;
-(void)handleHighlightItemClicked:(id)clicked data:(id)data feedModel:(id)model cell:(id)cell;
-(void)handleClickRichTextItem:(id)item itemRect:(CGRect)rect param:(id)param;
-(id)feedModelAtIndexPath:(id)indexPath;
-(id)feedModelAtSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)onGetReplyNotify:(id)notify;
-(int)onCmtFeedNotify:(id)notify;
-(int)onLikeNotify:(id)notify;
-(BOOL)onLoadMore;
-(BOOL)onHasMore;
-(int)onGetLastRefreshTime;
-(BOOL)onRefresh;
-(int)onNotifyGetMoodList:(id)list;
-(BOOL)shouldHandleFakeFeedType:(int)type;
-(id)getDictFeedsWithKey;
-(id)getFeedList;
-(void)initNotificationObservers:(id)observers;
-(void)handleDidSelectCell:(id)handle;
-(void)viewDidLoad;
-(void)onRightButtonClick:(id)click forEvent:(id)event;
-(void)loadView;
-(void)dealloc;
-(id)initWithUin:(long long)uin nickname:(id)nickname;
@end

@interface QZNotificationSetConcern : QZEngineNotificationInfoBase {
@private
	BOOL set;
	long long uin;
}
@property(assign, nonatomic) long long uin;
@property(assign, nonatomic) BOOL set;
@end

@interface MQZoneBarButton : UIButton {
@private
	NSMutableDictionary* dictImageForState;
	UILabel* label;
	UIImage* _icon;
	NSString* _title;
}
@property(retain, nonatomic) NSMutableDictionary* dictImageForState;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) UIImage* icon;
-(void).cxx_destruct;
-(void)setEnabled:(BOOL)enabled;
-(id)imageForState:(unsigned)state;
-(void)setImage:(id)image forState:(unsigned)state;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQzoneActiveHeaderView : UIView <UIGestureRecognizerDelegate> {
	GAFillImageView* _coverBGView;
	GAFaceImageView* _faceView;
	UIImageView* _borderView;
	UIView* _bottomBackground;
	MQZoneActiveMessageView* _messageView;
	MQZoneWatermarkView* _watermarkView;
	NSString* _coverUrl;
	long long _uin;
	id<MQZoneActiveHeaderViewDelegate> _delegate;
	float _offset;
	CGRect coverRect;
}
@property(assign, nonatomic) long long uin;
@property(assign, nonatomic) id<MQZoneActiveHeaderViewDelegate> delegate;
@property(retain, nonatomic) NSString* coverUrl;
-(void).cxx_destruct;
-(void)gotoPassiveMessageViewControllerAfterDelay;
-(void)gotoPassiveMessageViewController;
-(void)clickFace;
-(void)handleSwipeFrom:(id)from;
-(void)tapGestureUpdated:(id)updated;
-(void)updateWatermark:(id)watermark;
-(void)controlWatermarkCover:(BOOL)cover;
-(void)onFeedUnreadNumberUpdate:(id)update;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

@interface MQzoneCoverView : UIView {
	UIImageView* _coverBGView;
	id<MQZoneActiveHeaderViewDelegate> _delegate;
	CGRect coverRect;
	CGRect originalRect;
@private
	NSString* _coverUrl;
}
@property(assign, nonatomic) id<MQZoneActiveHeaderViewDelegate> delegate;
@property(retain, nonatomic) NSString* coverUrl;
-(void).cxx_destruct;
-(void)updateBackgroundFrameWhenDidScroll:(float)updateBackgroundFrameWhen;
-(void)updateCanvas:(id)canvas;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame delegate:(id)delegate;
@end

@interface MQZoneActiveBadgeView : UIView {
	UIImage* _image;
	NSString* _mReadCountText;
	int _unreadCount;
	BOOL _highlighted;
}
@property(assign, nonatomic) int unreadCount;
@property(retain, nonatomic) UIImage* image;
-(void).cxx_destruct;
-(BOOL)isHighlighted;
-(void)setHighlighted:(BOOL)highlighted;
-(void)drawRect:(CGRect)rect;
-(CGSize)getFitSize;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneActiveMessageView : UIButton {
	UIImageView* _clickView;
	UIImageView* _backView;
	GAFaceImageView* _faceView;
	UILabel* _message;
	UIImageView* _arrow;
	MQZoneActiveBadgeView* _badgeView;
	int _msgCount;
	long long _lastUin;
}
@property(assign, nonatomic) long long lastUin;
@property(assign, nonatomic) int msgCount;
@property(retain, nonatomic) MQZoneActiveBadgeView* badgeView;
@property(retain, nonatomic) UILabel* message;
@property(retain, nonatomic) UIImageView* backView;
@property(retain, nonatomic) UIImageView* clickView;
+(CGSize)messageSizeWithCount:(int)count;
-(void).cxx_destruct;
-(void)restoreHead;
-(void)buttonNormal;
-(void)buttonHighlight;
-(void)updateMessage:(int)message;
-(id)initWithFrame:(CGRect)frame unreadCount:(int)count;
@end

@interface MQZoneShadowBlurLabel : UILabel {
@private
	BOOL shadowBlurEnable;
	UIColor* shadowBlurColor;
	CGSize shadowBlurOffset;
	float shadowBlurRadius;
}
@property(assign, nonatomic) float shadowBlurRadius;
@property(assign, nonatomic) CGSize shadowBlurOffset;
@property(retain, nonatomic) UIColor* shadowBlurColor;
@property(assign, nonatomic) BOOL shadowBlurEnable;
-(void).cxx_destruct;
-(void)drawTextInRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneWatermarkView : UIView {
	QzoneWeatherInfo* _weatherInfo;
@private
	QzoneWeatherInfo* weatherInfo;
}
@property(retain, nonatomic) QzoneWeatherInfo* weatherInfo;
-(void).cxx_destruct;
-(void)refresh;
-(id)splitTemperature:(int)temperature;
-(id)getTempIconWithText:(id)text;
-(id)getIconPathWithType:(int)type;
-(BOOL)nowIsmidnight;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQzoneMaskView : UIControl {
}
-(void)drawRect:(CGRect)rect;
@end

@interface MQZoneMemuView : UIView {
}
-(void)drawRect:(CGRect)rect;
@end

@interface MQzonePopMenuView : UIView {
	MQZoneMemuView* menuView;
	id<MQzonePopMenuViewDelegate> delegate;
@private
	NSArray* titleArray;
	int selectedIndex;
}
@property(assign, nonatomic) id<MQzonePopMenuViewDelegate> delegate;
@property(retain, nonatomic) NSArray* titleArray;
@property(assign, nonatomic) int selectedIndex;
-(void).cxx_destruct;
-(void)sendDelegate;
-(void)reloadMenuView;
-(void)didSelectItem:(id)item;
-(void)initMenuView;
-(void)showAnimated:(BOOL)animated;
-(void)dismissAnimated:(BOOL)animated;
-(void)doDismiss;
-(void)reloadAppearance;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame titles:(id)titles delegate:(id)delegate;
-(void)dealloc;
@end

@interface MQzonePopMenuItem : UIControl {
	NSString* imageName;
	NSString* imageClickName;
	NSString* imageClickedName;
	NSString* titleStr;
	BOOL click;
}
@property(assign, nonatomic) BOOL click;
@property(retain, nonatomic) NSString* titleStr;
@property(retain, nonatomic) NSString* imageClickedName;
@property(retain, nonatomic) NSString* imageClickName;
@property(retain, nonatomic) NSString* imageName;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted;
-(void)drawRect:(CGRect)rect;
@end

@interface MQzoneAccountSetting : NSObject {
	NSMutableDictionary* _cache;
	NSString* _filePath;
}
@property(retain, nonatomic) NSString* filePath;
@property(retain, nonatomic) NSMutableDictionary* cache;
+(void)exit;
+(id)instance;
-(void)saveWatermarkCoverValue:(int)value;
-(int)getWatermarkCoverValue;
-(void)save;
-(void)load;
-(void)clear;
-(void)dealloc;
-(id)init;
@end

@interface QZCircularProgressView : UIView {
	CADisplayLink* _displayLink;
	float _progressStep;
	float _currentProgress;
	id<QZCircularProgressViewDelegate> _delegate;
@private
	UIColor* _fillColor;
	float _progress;
	float innerRadius;
	float outerRadius;
}
@property(retain, nonatomic) CADisplayLink* displayLink;
@property(assign, nonatomic) id<QZCircularProgressViewDelegate> delegate;
@property(assign, nonatomic) float progress;
@property(retain, nonatomic) UIColor* fillColor;
@property(assign, nonatomic) float outerRadius;
@property(assign, nonatomic) float innerRadius;
-(void).cxx_destruct;
-(void)loadingAnimationSelector:(id)selector;
-(void)stopLoading;
-(void)showLoading;
-(void)animationSelector:(id)selector;
-(void)stopAnimation;
-(void)setProgressWithAnimation:(float)animation;
-(void)drawRect:(CGRect)rect;
-(void)drawFillArc:(CGContextRef)arc toAngle:(float)angle radius:(float)radius fillColor:(id)color;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

@interface UnretainedPointer : NSObject {
@private
	id<IGACanvas> _canvas;
}
@property(assign, nonatomic) id<IGACanvas> canvas;
-(BOOL)isEqual:(id)equal;
@end

@interface MQZoneFeedLikeButton : UIButton {
	UILabel* _label;
	UIImageView* _icon;
@private
	int _likeState;
}
@property(assign, nonatomic) int likeState;
-(void).cxx_destruct;
-(void)showLikeAnimation;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneFeedCommentButton : UIButton {
	UILabel* _label;
	UIImageView* _icon;
}
-(void).cxx_destruct;
-(void)setEnabled:(BOOL)enabled;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneEmptyFeedCell : MQZoneTableViewCell {
@private
	UIImageView* _logoView;
	UIImageView* _iconView;
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIImageView* iconView;
@property(retain, nonatomic) UIImageView* logoView;
-(void).cxx_destruct;
-(void)updateUI;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface MQZoneNoContentFeedCell : MQZoneEmptyFeedCell {
}
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface QZWeatherManager : QZEngineBase <CLLocationManagerDelegate> {
	CLLocationManager* locationManager;
	QzoneLBSPosition* curLBSPosition;
	QzoneLBSGPSInfo* currentGPSInfo;
	QzoneWeatherInfo* currentWeather;
	CLLocation* curLocation;
	CLLocation* lastLocation;
	CLLocation* sendNetLocation;
	NSDate* locateBeginDate;
	BOOL isLocating;
	NSDate* lastLocateSuccessTimeStamp;
	BOOL cacheExpired;
	int lastRequestMode;
	BOOL isWeatherSending;
	BOOL isLoadingLbsCombine;
	NSTimer* updateTimer;
	BOOL forceRefresh;
	BOOL encounterErrorNoTips;
}
@property(retain, nonatomic) NSDate* lastLocateSuccessTimeStamp;
@property(assign, nonatomic) BOOL isLocating;
@property(retain, nonatomic) QzoneWeatherInfo* currentWeather;
@property(retain, nonatomic) QzoneLBSGPSInfo* currentGPSInfo;
@property(retain, nonatomic) QzoneLBSPosition* curLBSPosition;
@property(retain, nonatomic) NSDate* locateBeginDate;
@property(retain, nonatomic) CLLocation* lastLocation;
@property(retain, nonatomic) CLLocation* curLocation;
+(BOOL)isAbleLocate;
+(id)instance;
-(int)getGpsCacheTime;
-(void)saveInfo:(id)info withTag:(int)tag;
-(id)getLocalInfo:(int)info;
-(id)getWatermarkWeatherPath;
-(id)getLocalPOIListInfo;
-(id)getLocalGpsInfo;
-(id)getLocalPositionInfo;
-(id)getLocalWeatherInfo;
-(void)savePositionInfo:(id)info andPoiListInfo:(id)info2 andWeatherInfo:(id)info3 andReflushFlag:(int)flag;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)didMessageChangeState:(id)state;
-(void)requestPositionAndPoiListAndWeatherInfo:(id)info GeoInfo:(id)info2 RequestMode:(int)mode;
-(int)getWeatherUpdataInterval;
-(void)locateDenied;
-(id)generateDefaultGPSInfo;
-(id)locationFailTips;
-(void)showLocationFailAlert;
-(void)createLocationFailAlertView;
-(BOOL)isGpsOutOfDate;
-(void)requesWeathertWithCache:(id)cache cacheExpired:(BOOL)expired;
-(void)ThirtySecondimedOut;
-(void)FiveSecondTimedOut;
-(void)sendLocateErrorRequest;
-(void)getCoordinateSuccess;
-(void)stopLocate;
-(void)startLocate;
-(void)newStartLocateNotify:(BOOL)notify;
-(void)getCoordinate:(BOOL)coordinate coordinate:(id)coordinate2;
-(void)clear;
-(void)stopTimer;
-(void)updateLocalInfo;
-(void)startTimer;
-(BOOL)showErrorTips;
-(BOOL)networkAvailable;
-(void)getCurrentWeather:(BOOL)weather;
-(void)dealloc;
-(id)init;
@end

@interface QzoneMotionManager : NSObject <UIAccelerometerDelegate> {
	double _accel[3];
	int _deviceType;
@private
	double accelerationX;
	double accelerationY;
	double accelerationZ;
}
@property(readonly, assign, nonatomic) double accelerationZ;
@property(readonly, assign, nonatomic) double accelerationY;
@property(readonly, assign, nonatomic) double accelerationX;
+(id)sharedInstance;
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
-(void)stop;
-(void)start;
@end

@interface QzoneMotionImageView : UIView {
	UIImageView* _imageView;
	int _deviceType;
@private
	UIImage* image;
}
@property(retain, nonatomic) UIImage* image;
-(void).cxx_destruct;
-(void)motionChangedNotification:(id)notification;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZoneNavigationTitleView : UIView {
@private
	UIActivityIndicatorView* _activeView;
	UILabel* _label;
}
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIActivityIndicatorView* activeView;
-(void).cxx_destruct;
-(void)updateTitle:(id)title isLoading:(BOOL)loading;
-(void)updateActiveViewState:(BOOL)state;
-(id)title;
-(void)setTitle:(id)title;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
-(void)reloadAppearance;
@end

@interface MQZoneTableFootLoadingView : UIControl {
	UIActivityIndicatorView* _activeView;
	UILabel* _label;
	int _footState;
	NSArray* _textTable;
	id<MQZoneTableFootLoadingViewDelegate> _delegate;
}
@property(assign, nonatomic) id<MQZoneTableFootLoadingViewDelegate> delegate;
@property(assign, nonatomic) int footState;
-(void).cxx_destruct;
-(void)click;
-(void)stopLoading;
-(void)startLoading;
-(BOOL)isLoading;
-(void)setFootState:(int)state text:(id)text;
-(id)text;
-(void)adaptUI;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MQZUserGuideView : UIButton {
@private
	BOOL _needTapToUnReShow;
	BOOL _hasTaped;
	NSString* _moduleKey;
}
@property(retain, nonatomic) NSString* moduleKey;
@property(assign, nonatomic) BOOL hasTaped;
@property(assign, nonatomic) BOOL needTapToUnReShow;
+(id)judgeCreateGuide:(id)guide inView:(id)view;
+(id)judgeCreateGuide:(id)guide;
-(void).cxx_destruct;
-(void)hideGuide:(id)guide;
-(void)setBackgroundImage:(id)image;
-(void)setImage:(id)image;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface MQZUserGuidesView : MQZUserGuideView {
@private
	NSMutableArray* _moduleKeys;
	id _guideImageBlock;
}
@property(copy, nonatomic) id guideImageBlock;
@property(retain, nonatomic) NSMutableArray* moduleKeys;
+(id)judgeCreateGuides:(id)guides inView:(id)view imageBlock:(id)block;
+(id)judgeCreateGuides:(id)guides imageBlock:(id)block;
-(void).cxx_destruct;
-(void)hideGuide:(id)guide;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQContactsContactListViewController : QQViewController <IQSContactsEngineObserver, UIAlertViewDelegate, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, UISearchDisplayDelegate, UIActionSheetDelegate> {
	BOOL _isInit;
	NSMutableArray* _qqBindedList;
	NSMutableArray* _qqUnBindedList;
	id<IQSContactsEngine> _contactsEngine;
	UITableView* _tableView;
	NSMutableDictionary* _dataSource;
	NSMutableArray* _keyArray;
	NSMutableArray* _indexArray;
	UIImageView* _iconView;
	UILabel* _tipsLabel1;
	UILabel* _tipsLabel2;
	UILabel* _tipsLabel3;
	UILabel* _tipsMatchLabel1;
	UILabel* _tipsMatchLabel2;
	UIButton* _matchButton;
	BOOL _batchLoadData;
	UISearchBar* _searchBar;
	UISearchDisplayController* _searchDisplay;
	NSMutableArray* _searchDataSource;
	BOOL _isSearching;
	ContactModel* _remarkContactModel;
	BOOL _waitingForFetchBegin;
	AddFriendSendMessageViewController* _addFriendVC;
}
@property(retain) AddFriendSendMessageViewController* addFriendVC;
-(void)actionClickAddFriBtn:(id)btn;
-(void)actionClickSendMsgBtn:(id)btn;
-(void)actionClickSetRemarkBtn:(id)btn;
-(void)actionMatch:(id)match;
-(void)actionAddFriend:(id)aFriend;
-(void)actionStartChat:(id)chat;
-(void)actionViewProfile:(id)profile;
-(void)onRemarkContactPerson:(id)person;
-(void)notifyUpdateBindingInfo:(id)info;
-(void)notifyFetchContacts;
-(void)notifyUploadContacts:(id)contacts;
-(void)notifyUpdateContactsStat:(id)stat;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(void)rightButtonPress:(id)press;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)reloadSearchTableData;
-(BOOL)shouldShowIndexBar;
-(void)reloadTableData;
-(void)createSearhBar;
-(void)updateListStatus;
-(void)showTableView:(int)view;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

@interface CountryObject : NSObject {
	NSString* _countryName;
	NSString* _countryCode;
	NSString* _countryPinyin;
}
@property(readonly, assign, nonatomic) NSString* countryPinyin;
@property(retain, nonatomic) NSString* countryCode;
@property(retain, nonatomic) NSString* countryName;
-(BOOL)isMatchString:(id)string;
-(void)dealloc;
-(int)compare:(id)compare;
@end

@interface QQContactsCountryCodeViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, UISearchDisplayDelegate> {
	BOOL _isSearching;
	NSMutableArray* _searchResultArray;
	NSMutableArray* _keyArray;
	NSMutableDictionary* _countryCodeDict;
	UITableView* _tableView;
	UISearchBar* _searchBar;
	UISearchDisplayController* _searchDisplay;
	id<CountryCodeViewControllerDelegate> _controllerDelegate;
}
@property(assign, nonatomic) id<CountryCodeViewControllerDelegate> controllerDelegate;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)reloadSearchTableData;
-(id)fliterLikeWord:(id)word;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)initCountryCode;
-(void)addCountryName:(id)name countryCode:(id)code key:(id)key;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

@interface QQContactsFillVerifyCodeViewController : QQViewController <QIMTextInputDelegate, UITextFieldDelegate, IQSContactsEngineObserver> {
	UIButton* _resendButton;
	UILabel* _timerLabel;
	UITextField* _verifyCodeTextField;
	UILabel* _placeholderLabel;
	int _remainSecond;
	NSTimer* _resendTimer;
	id<IQSContactsEngine> _contactsEngine;
	BOOL _hidePhoneCode;
}
@property(assign, nonatomic) BOOL hidePhoneCode;
-(void)notifyRequestResendSMSCode:(id)code;
-(void)notifyVerifyBindingSMSCode:(id)code;
-(void)onResendTimer;
-(void)stopResendTimer;
-(void)startResendTimer;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)resendButtonPress:(id)press;
-(void)okButtonPress:(id)press;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface QQContactsGuideViewController : QQViewController {
}
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)helpButtonPress:(id)press;
-(void)bindButtonPress:(id)press;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(id)init;
@end

@interface QQContactsSetPhoneNumberViewController : QQViewController <QIMTextInputDelegate, UITextFieldDelegate, CountryCodeViewControllerDelegate, SimpleAlertViewDelegate, IQSContactsEngineObserver> {
	BOOL _isChecked;
	UIButton* _regionButton;
	UILabel* _countryNameLabel;
	UILabel* _countryCodeLabel;
	UILabel* _placeholderLabel;
	UITextField* _phoneNumberTextField;
	UIButton* _nextButton;
	NSString* _regionName;
	NSString* _regionCode;
	BOOL _isChangePhoneCode;
	id<IQSContactsEngine> _contactsEngine;
}
@property(assign, nonatomic) BOOL isChangePhoneCode;
@property(retain, nonatomic) NSString* regionCode;
@property(retain, nonatomic) NSString* regionName;
-(void)notifyBindPhoneCode:(id)code;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)selectedWithCountryName:(id)countryName countryCode:(id)code;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)nextButtonPress:(id)press;
-(void)helpButtonPress:(id)press;
-(void)regionButtonPress:(id)press;
-(void)checkboxButtonPress:(id)press;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
@end

@interface ContactModel : NSObject <NSCoding, IQQModelLabel, NSCopying> {
	NSString* _name;
	NSString* _nickName;
	NSString* _phoneCode;
	long long _uin;
	NSString* _countryCode;
	NSString* _phoneCodeWithoutCountry;
	BOOL _binding;
	int _recommendTime;
	NSRange _matchRange;
	NSMutableArray* _allPhoneCodes;
	NSString* _originPhoneCode;
	int _binderFrom;
	BOOL _ableToSendMsg;
	NSString* _nickInFriendlist;
@private
	BOOL isNew;
}
@property(assign, nonatomic) BOOL isNew;
@property(assign, nonatomic) BOOL ableToSendMsg;
@property(assign, nonatomic) int binderFrom;
@property(retain, nonatomic) NSString* nickInFriendlist;
@property(retain, nonatomic) NSString* originPhoneCode;
@property(retain, nonatomic) NSMutableArray* allPhoneCodes;
@property(assign, nonatomic) int recommendTime;
@property(assign, nonatomic) BOOL binding;
@property(retain, nonatomic) NSString* phoneCodeWithoutCountry;
@property(retain, nonatomic) NSString* countryCode;
@property(assign, nonatomic) long long uin;
@property(retain, nonatomic) NSString* phoneCode;
@property(retain, nonatomic) NSString* nickName;
@property(retain, nonatomic) NSString* name;
+(void)setSearchModelPriority:(int)priority;
-(BOOL)isMatchString:(id)string;
-(int)compareLabel:(id)label;
-(int)getSearchModelPriority;
-(int)getSearchModelType;
-(NSRange)getModelLabelMatchRange;
-(id)getRemarkLabel;
-(id)getModelLabel;
-(BOOL)isEqual:(id)equal;
-(int)compareByName:(id)name;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithContactModel:(id)contactModel;
-(id)init;
@end

@interface ContactsRequestItem : NSObject {
	int _seqId;
	int _requestType;
	NSTimer* _timer;
	long long _userUIN;
	int _ssoSeq;
	id _data;
}
@property(retain, nonatomic) id data;
@property(assign, nonatomic) int ssoSeq;
@property(assign, nonatomic) long long userUIN;
@property(retain, nonatomic) NSTimer* timer;
@property(assign, nonatomic) int requestType;
@property(readonly, assign, nonatomic) int seqId;
-(void)dealloc;
-(id)initWithSeqId:(int)seqId requestType:(int)type userUIN:(long long)uin ssoSeq:(int)seq timeoutInterval:(double)interval target:(id)target selector:(SEL)selector;
@end

@interface QSContactsEngine : QSEngineBase <IQSContactsEngine, IEngineDispatchDelegate> {
	int _seqId;
	NSMutableArray* _requestQueue;
	void* _addressBook;
	NSMutableDictionary* _bindingInfo;
	NSMutableArray* _contacts;
	NSMutableArray* _bindedContacts;
	NSMutableArray* _recommendContacts;
	NSMutableDictionary* _applyBindingInfo;
	NSMutableDictionary* _invitedList;
	int _unreadRecommendCount;
	BOOL _bNeedSyncContacts;
	BOOL _bIsAnsyFetchingForUploadContacts;
	BOOL _bIsAnsyFetchingForSyncContacts;
	NSOperationQueue* _operationQueue;
	NSMutableDictionary* _temporaryUINList;
	NSMutableDictionary* _chatUINList;
	NSMutableDictionary* _mobilePhoneNoCList;
	NSMutableDictionary* _mobilePhoneConfigList;
	BOOL _isNeedUpdateBindingInfo;
	BOOL _isUploadingAndUpdating;
}
-(BOOL)isUploadingAndUpdatingContacts;
-(void)setNeedRemindBeFoundWithMobilePhoneStr:(id)mobilePhoneStr remind:(BOOL)remind;
-(BOOL)isNeedRemindBeFoundWithMobilePhoneStr:(id)mobilePhoneStr;
-(BOOL)isNeedRemindContactsBindingWithUIN:(long long)uin;
-(void)setContactUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(int)getContactBinderFromWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactLocalPhoneCodesWithPhoneCodes:(id)phoneCodes;
-(id)getContactPhoneLabelsWithPhoneCodes:(id)phoneCodes;
-(id)getLocalContactsDicWithMobliePhoneStr:(id)mobliePhoneStr source:(id)source;
-(long long)getContactUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactMobilePhoneWithUIN:(long long)uin;
-(id)getContactNameWithUIN:(long long)uin;
-(BOOL)updateContactNickName:(id)name withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactNickNameWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactNameWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getContactModelWithMobilePhoneStr:(id)mobilePhoneStr;
-(BOOL)isMobilePhoneAtUnbindContacts:(id)unbindContacts;
-(BOOL)isMobilePhoneAtBindContacts:(id)bindContacts;
-(BOOL)isMobilePhoneAtContacts:(id)contacts;
-(id)getMyselfMobilePhoneWithoutCountry;
-(id)getMyselfMobilePhone;
-(void)removeTempUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getCountryAndPhoneCodeStr2WithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getCountryAndPhoneCodeStrWithMobilePhoneStr:(id)mobilePhoneStr;
-(void)setNoCountryPhone:(id)phone withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getNoCountryPhoneWithMobilePhone:(id)mobilePhone;
-(void)clearChatUINWithMobilePhone:(long long)mobilePhone;
-(void)setChatUIN:(long long)uin withMobilePhoneStr:(id)mobilePhoneStr;
-(id)getMobilePhoneWithChatUIN:(long long)chatUIN;
-(long long)getChatUINWithMobilePhoneStr:(id)mobilePhoneStr;
-(id)getMobilePhoneWithTemporaryUIN:(long long)temporaryUIN;
-(long long)getTemporaryUINWithMobilePhoneStr:(id)mobilePhoneStr makeIfNotExist:(BOOL)exist;
-(void)clearRecommendedContacts;
-(void)clearQQContacts;
-(int)getUnreadRecommendedContactCount;
-(BOOL)isReadRecommendedContact:(id)contact;
-(void)setRecommendedContactsRead;
-(void)replaceBlackList:(id)list;
-(void)removeMobilePhoneAtBlackList:(id)blackList;
-(void)addMobilePhoneToBlackList:(id)blackList;
-(BOOL)isMobilePhoneAtBlackList:(id)blackList;
-(BOOL)isDisableToChat:(id)chat;
-(BOOL)isInvitedContact:(id)contact;
-(BOOL)setInvitedContact:(id)contact;
-(id)getRecommendedContacts;
-(BOOL)updateRecommendedContacts;
-(BOOL)setToBeRecommended:(BOOL)beRecommended;
-(id)getNeedRemarkQQContacts;
-(id)getUnbindingQQContacts;
-(id)getBindingQQContacts:(BOOL)contacts;
-(id)getBindingQQContacts;
-(BOOL)updateContactsStat;
-(BOOL)doUpdateContactsStat;
-(void)syncContactsWhenDidAnsyFetchContacts:(id)syncContactsWhen;
-(BOOL)syncContacts;
-(void)uploadContactsWhenDidAnsyFetchContacts:(id)uploadContactsWhen;
-(BOOL)sendServerContacts;
-(BOOL)cancelBinding;
-(BOOL)requestResendSMSCode;
-(BOOL)verifyBindingSMSCode:(id)code;
-(BOOL)rebindPhoneCode:(id)code countryCode:(id)code2;
-(BOOL)bindPhoneCode:(id)code countryCode:(id)code2;
-(BOOL)isUserNeedUploadContacts;
-(BOOL)setUserNeedUploadContacts:(BOOL)contacts;
-(BOOL)isContactsInitilized;
-(BOOL)isContactsMatched;
-(BOOL)isRecommended;
-(id)getBindingPhoneCode;
-(id)getBindingCountryCode;
-(unsigned)getBindingViaOtherChannelsTime;
-(void)setIgnoreViaOtherChannels;
-(BOOL)isIgnoreViaOtherChannels;
-(BOOL)isBindingViaOtherChannels;
-(BOOL)isBinding;
-(BOOL)updateBindingInfo;
-(id)getUnbindingPhoneCode;
-(id)getUnbindingCountryCode;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)didRespNotifyFroRecommendUpdateWithResult:(int)result;
-(void)didRespGetRecommendedList:(ResponseGetRecommendedList*)list result:(int)result;
-(void)didRespResetContactsSettingWithResult:(int)result;
-(void)didRespCancelBindMobileWithResult:(int)result;
-(void)didRespQueryQQMobileContacts:(ResponeQueryQQMobileContacts*)contacts result:(int)result;
-(void)didRespUpdateAddressBook:(ResponeUpdateAddressBook*)book result:(int)result;
-(void)didRespUploadAddressBook:(ResponeUploadAddressBook*)book result:(int)result;
-(void)didRespResendSmscode:(ResponeResendSmscode*)smscode result:(int)result;
-(void)didRespVerifySmscode:(ResponeVerifySmscode*)smscode result:(int)result;
-(void)didRespRebindMobile:(ResponeReBindMobile*)mobile result:(int)result;
-(void)didRespBindMobile:(ResponeBindMobile*)mobile result:(int)result;
-(void)didRespQueryQQBindingStat:(RespondQueryQQBindingStat*)stat result:(int)result;
-(void)onRefreshFriendListFinished;
-(void)onMSFNetworkStateNotification:(id)notification;
-(id)requestGetRecommendedList:(int)list nextFlag:(unsigned)flag sessionSidData:(id)data;
-(id)requestResetContactsSetting:(BOOL)setting;
-(id)requestCancelBindMobile:(id)mobile countryCode:(id)code;
-(id)requestQueryQQMobileContacts:(unsigned)contacts nextFlag:(unsigned)flag sessionSidData:(id)data;
-(id)requestResendSmscode:(id)smscode;
-(id)requestVerifySmscode:(id)smscode sessionSidData:(id)data;
-(id)requestUpdateAddressBookWithContactsToAdd:(id)add contactsToDel:(id)del nextFlag:(unsigned)flag sessionSidData:(id)data;
-(id)requestUploadAddressBookWithContacts:(id)contacts nextFlag:(unsigned)flag sessionSidData:(id)data;
-(id)requestBindMobile:(id)mobile countryCode:(id)code rebind:(BOOL)rebind;
-(id)requestQueryQQBindingStat;
-(int)getSeqId;
-(void)checkAndUpdateRemarkSetting;
-(void)reviseRecommendContacts;
-(void)clearBindingInfo;
-(void)getContactsChangeOfContacts:(id)contacts contactsUploaded:(id)uploaded toAdd:(id)add toDel:(id)del;
-(void)saveMobilePhoneConfig:(id)config;
-(id)loadMobilePhoneConfig;
-(void)saveMobilePhoneNoCList:(id)list;
-(id)loadMobilePhoneNoCList;
-(void)saveChatUINList:(id)list;
-(id)loadChatUINList;
-(void)saveTemporaryUINList:(id)list;
-(id)loadTemporaryUINList;
-(void)saveInvitedList:(id)list;
-(id)loadInvitedList;
-(void)saveRecommendedContacts:(id)contacts;
-(id)loadRecommendedContacts;
-(id)loadQQBindedContacts;
-(void)saveQQContacts:(id)contacts;
-(id)loadQQContacts;
-(void)saveUploadContacts:(id)contacts;
-(id)loadUploadContacts;
-(void)saveBindingInfo:(id)info;
-(id)loadBindingInfo;
-(void)saveApplyBindingInfo:(id)info;
-(id)loadApplyBindingInfo;
-(void)requestTimeout:(id)timeout;
-(void)notifyErrorWithRequestType:(int)requestType errorCode:(int)code;
-(int)removeQueueRequest:(int)request;
-(id)getQueueRequestWithSSOSeq:(int)ssoseq;
-(id)getQueueRequestWithTimer:(id)timer;
-(id)getQueueRequestWithType:(int)type;
-(void)didAddressBookChanged;
-(void)ansyFetchContacts:(id)contacts;
-(void)doAnsyFetchContacts:(id)contacts;
-(id)fetchContacts;
-(BOOL)isUserDenyToAccessData;
-(BOOL)isAllowToAccessData;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(void)reload;
-(void)reset;
-(void)dealloc;
-(id)init;
-(void)registerAddressBookChanged;
-(void)unregisterAddressBookChanged;
-(id)devUDID;
@end

@interface QQContactsBindConfirmViewController : QQViewController <IQSContactsEngineObserver> {
	BOOL _isOtherChanndelsBindConfirm;
	NSString* _bindPhoneCodeStr;
	NSString* _bindCountryCodeStr;
	NSString* _bindedUin;
}
-(void)notifyBindPhoneCode:(id)code;
-(void)helpButtonPress:(id)press;
-(void)bindCancelButtonPress:(id)press;
-(void)bindConfirmButtonPress:(id)press;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)initWithConfirmType:(BOOL)confirmType phoneCode:(id)code countryCode:(id)code3 bindedUin:(id)uin;
@end

@interface QQContactsSettingViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, SimpleAlertViewDelegate, IQSContactsEngineObserver> {
	UITableView* _tableView;
	id<IQSContactsEngine> _contactsEngine;
	UIButton* _bindButton;
	NSArray* _needRemarkContacts;
	NSMutableArray* _checkedRemarkFriendList;
	NSMutableArray* _newNeedRemarkFriend;
	BOOL _cancelBindingForChanging;
}
@property(retain, nonatomic) NSArray* needRemarkContacts;
-(void)notifyCancelBinding:(id)binding;
-(void)notifySetToBeRecommended:(id)beRecommended;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionBindButton;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadRemarkData;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

@interface DiscussGroup : NSObject {
}
-(void)showDisCussGroupChatViewController:(id)controller;
-(void)showDisCussGroupManageViewController:(id)controller;
-(void)showDisCussGroupListViewController:(id)controller;
-(void)JoinDiscussBySig:(id)sig;
-(void)prepareRegister:(id)aRegister;
-(void)loginSuccess:(id)success;
-(void)deleteCurrentAccount;
-(void)changeAccount:(id)account;
-(void)dealloc;
-(id)init;
@end

@interface DiscussGroupInfo : NSObject <NSCoding, IQQModelLabel> {
@private
	long long _groupUin;
	NSString* _name;
	int _flag;
	int _infoSeq;
	int _faceId;
	long long _ownerUin;
	int _memberNum;
	int _createTime;
	long long _remarkTimeStamp;
	BOOL _isBlock;
	BOOL _isPushNotice;
	NSRange _matchRange;
	NSString* _matchMember;
}
@property(assign, nonatomic) long long remarkTimeStamp;
@property(assign, nonatomic) BOOL isPushNotice;
@property(assign, nonatomic) BOOL isBlock;
@property(assign, nonatomic) int createTime;
@property(assign, nonatomic) int memberNum;
@property(assign, nonatomic) long long ownerUin;
@property(assign, nonatomic) int faceId;
@property(assign, nonatomic) int infoSeq;
@property(assign, nonatomic) int flag;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) long long groupUin;
+(void)setSearchModelPriority:(int)priority;
-(int)compareByNick:(id)nick;
-(id)getMatchMember;
-(BOOL)isMatchString:(id)string;
-(int)compareLabel:(id)label;
-(int)getSearchModelPriority;
-(int)getSearchModelType;
-(NSRange)getModelLabelMatchRange;
-(id)getRemarkLabel;
-(id)getModelLabel;
-(id)description;
-(int)compareByGroupName:(id)name;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface DiscussGroupEngine : NSObject <IEngineDispatchDelegate> {
	long long _uin;
	NSMutableArray* _discussGroupList;
	NSMutableDictionary* _discussMemberDict;
	NSMutableDictionary* _cacaDiscussNotifyDict;
	NSMutableDictionary* _cacaDiscussMsgDict;
	id<IDiscussGroupManageDelegate> _groupManageDelegate;
	id<ICacaDiscussGroupUpdateResult> _remindCacaDiscussDelegate;
	NSMutableArray* _requestQueue;
	BOOL _bNetGetCrntAccountOfflineMsg;
	BOOL _bCacaGetInfo;
}
@property(assign, nonatomic) id<ICacaDiscussGroupUpdateResult> remindCacaDiscussDelegate;
@property(retain, nonatomic) NSMutableDictionary* discussMemberDict;
@property(retain, nonatomic) NSMutableArray* discussGroupList;
+(void)checkUpdateDiscussHead;
+(id)getInstance;
-(id)getLocalDiscussMemberList:(long long)list;
-(BOOL)isValidGroup:(long long)group;
-(int)getDiscussGroupMaxMemberNum;
-(BOOL)checkGroupNeedDelete:(long long)aDelete;
-(void)deleteDiscussData:(long long)data;
-(void)removeMemberInfo:(long long)info;
-(void)removeGroupInfo:(long long)info;
-(void)netGetAllDiscussGroupMsg;
-(void)deleteDiscussMemberData:(long long)data;
-(id)loadDiscussMemberList:(long long)list;
-(void)saveDiscussMemberList:(long long)list memberList:(id)list2;
-(void)loadDiscussGroupList;
-(void)saveDiscussGroupList;
-(void)createDiscussFolder;
-(BOOL)delDiscussLocalMember:(long long)member insertUin:(long long)uin;
-(BOOL)insertDiscussLocalMember:(long long)member insertUin:(long long)uin;
-(id)getDiscussMember:(long long)member memberUin:(long long)uin;
-(void)judgeUpdateDiscussInfo:(long long)info infoSeq:(int)seq;
-(BOOL)setMaskMsg:(long long)msg state:(BOOL)state;
-(void)changeMaskFlag:(long long)flag memberUin:(long long)uin mask:(BOOL)mask;
-(BOOL)changeDiscussName:(long long)name newDiscussName:(id)name2;
-(int)addDiscussMember:(long long)member addMembers:(id)members;
-(BOOL)joinDiscuss:(id)discuss;
-(BOOL)quitDiscuss:(long long)discuss;
-(BOOL)updateDiscussList;
-(BOOL)updateDiscussInfo:(long long)info;
-(BOOL)updateDiscussInfoBySig:(id)sig;
-(void)setVoiceSign:(BOOL)sign;
-(BOOL)createDiscussGroupChirp:(id)chirp memInfo:(id)info;
-(void)saveDiscussMsgDict;
-(void)loadDiscussMsgDict;
-(void)notifyMsgToNewGroup:(long long)newGroup;
-(BOOL)isHasMsg:(long long)msg;
-(void)saveNotifyMsg:(id)msg forDiscussGroup:(long long)discussGroup;
-(void)changeOrderMemAry:(id)ary disGroup:(long long)group;
-(int)createDiscussGroup:(id)group memberArray:(id)array;
-(id)getChangingDiscussName:(long long)name;
-(BOOL)updateDiscussMemberRemark:(long long)remark memberArrays:(id)arrays;
-(id)getBatchMemRemarkName:(long long)name memberArray:(id)array needReq:(BOOL)req;
-(id)getMemNickName:(id)name needReq:(BOOL)req;
-(id)searchMemberUin:(id)uin DiscussGroupUin:(long long)uin2;
-(id)getDiscussMemberList:(long long)list;
-(id)getGroupInfo:(long long)info;
-(BOOL)isConnected;
-(void)loginSuccess:(id)success;
-(void)clearMemoryData;
-(void)deleteCurrentAccount;
-(void)changeAccount;
-(void)setDiscussGroupManageDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
-(void)responseAddDisccussBySig:(char*)sig DataLen:(int)len Seq:(int)seq;
-(void)responseGetDisccussMemberRemark:(char*)remark DataLen:(int)len Seq:(int)seq;
-(void)responseSetDiscussFlag:(char*)flag DataLen:(int)len Seq:(int)seq;
-(void)responseChangeDiscussName:(char*)name DataLen:(int)len Seq:(int)seq;
-(void)responseAddDiscussMember:(char*)member DataLen:(int)len Seq:(int)seq;
-(void)responseQuitDiscuss:(char*)discuss DataLen:(int)len Seq:(int)seq;
-(void)responseGetDiscussList:(char*)list DataLen:(int)len Seq:(int)seq;
-(void)responseGetDiscussInfo:(char*)info DataLen:(int)len Seq:(int)seq;
-(id)getErrorStr:(int)str type:(int)type;
-(void)responseCreateDiscuss:(char*)discuss DataLen:(int)len Seq:(int)seq;
-(int)requestGetDisccussMemberRemark:(long long)remark memArray:(id)array;
-(int)requestSetDiscussFlag:(long long)flag state:(BOOL)state;
-(int)requestChangeDiscussName:(long long)name newDiscussName:(id)name2;
-(int)requestGetDiscussInfo:(long long)info remarkTimeStamp:(long long)stamp oldMemArray:(id)array infoSeq:(int)seq;
-(int)requestGetDisccussInfoBySig:(id)sig;
-(int)requestGetDiscussList;
-(int)requestQuitDiscuss:(long long)discuss;
-(int)requestAddDiscussMember:(long long)member addMemArray:(id)array;
-(int)requestCreateDiscuss:(id)discuss memArray:(id)array;
-(int)addDiscussBySig:(id)sig;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)removeRequest:(id)request seqId:(int)anId;
-(void)removeRequestBySeqid:(int)seqid;
-(void)removeRequestItem:(id)item;
-(id)getRequest:(id)request discussUin:(long long)uin;
-(id)getRequest:(id)request seqId:(int)anId;
-(id)getRequestBySeqid:(int)seqid;
-(id)getRequestByCmd:(id)cmd;
-(void)addRequest:(id)request seqId:(int)anId discussUin:(long long)uin requestData:(id)data;
@end

@interface DiscussGroupStorage : NSObject {
@private
	long long _uin;
}
@property(assign, nonatomic) long long uin;
-(id)getDiscussGroupHeadPathFly:(long long)fly membNum:(int)num;
-(id)getDiscussGroupHeadPath:(long long)path;
-(void)deleteDiscussMemberData:(long long)data;
-(id)loadDiscussMemberList:(long long)list;
-(BOOL)saveDiscussMemberList:(long long)list memberList:(id)list2;
-(id)loadDiscussGroupList;
-(BOOL)saveDiscussGroupList:(id)list;
-(BOOL)createDiscussGroupFolder;
-(id)initWithCurrentUin:(long long)currentUin;
-(id)getDiscussMemberListPath:(long long)path;
-(id)getGroupListPath;
-(id)getGroupPath;
-(BOOL)hasFile:(id)file;
@end

@interface DiscussGroupChatLogicManager : NSObject {
}
-(void)dealloc;
-(id)init;
@end

@interface DiscussGroupRefController : NSObject {
	DiscussGroupChatLogicManager* _manager;
	UIViewController* _chatViewController;
}
@property(retain, nonatomic) UIViewController* chatViewController;
-(void)dealloc;
-(id)initWithChatViewController:(id)chatViewController mgourpCode:(id)code;
@end

@interface DiscussRequestItem : NSObject {
	NSString* _requestCmd;
	int _seqId;
	long long _discussUin;
	id _requestData;
}
@property(retain, nonatomic) id requestData;
@property(assign, nonatomic) long long discussUin;
@property(assign, nonatomic) int seqId;
@property(retain, nonatomic) NSString* requestCmd;
-(id)description;
-(void)dealloc;
-(id)initWithSeqId:(id)seqId seqId:(int)anId discussUin:(long long)uin requestData:(id)data;
@end

@interface DiscussMemberInfo : NSObject <NSCoding> {
@private
	NSString* _memberUin;
	int _type;
	int _flag;
	NSString* _remarkName;
	int _remarkNameSource;
}
@property(assign, nonatomic) int remarkNameSource;
@property(retain, nonatomic) NSString* remarkName;
@property(assign, nonatomic) int flag;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* memberUin;
-(id)description;
-(id)getPinyin;
-(int)compareByName:(id)name;
-(int)compareByUIN:(id)uin;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface DiscussGroupChatStorage : NSObject <DBAccountChangedProtocol> {
	NSMutableDictionary* _maxMsgSeqDic;
	NSMutableDictionary* _maxServerMsgSeqDic;
	NSMutableDictionary* _sendImageUUIDCache;
	int _lastInsertTimeStamp;
}
-(id)getLatestMessageInGroup:(unsigned long long)group uin:(id)uin;
-(id)getLatestMessageInGroup:(unsigned long long)group uin:(id)uin inDb:(id)db;
-(BOOL)removeMesasge:(id)mesasge;
-(BOOL)removeMesasge:(id)mesasge inDb:(id)db;
-(BOOL)updateDiscussRichMsgState:(int)state msgTime:(int)time state:(int)state3 inDb:(id)db;
-(BOOL)updateDiscussRichMsgState:(int)state msgTime:(int)time state:(int)state3;
-(id)getMsgsLessThanMsgID:(long long)anId limitCount:(unsigned)count discussGroupCode:(id)code;
-(id)getMsgsLessThanMsgID:(long long)anId limitCount:(unsigned)count discussGroupCode:(id)code inDb:(id)db;
-(void)SetMsgSendStateWithMsgID:(id)msgID state:(int)state;
-(void)SetMsgSendStateWithMsgID:(id)msgID state:(int)state inDb:(id)db;
-(int)GetMsgSendState:(int)state;
-(int)GetMsgSendState:(int)state inDb:(id)db;
-(void)asyncGetMsgWithDiscussUin:(id)discussUin WithType:(int)type notMoreThanSeq:(long long)seq limitCount:(unsigned)count callback:(id)callback userdata:(id)userdata;
-(id)getMsgWithDiscussUin:(id)discussUin withType:(int)type notMoreThanSeq:(long long)seq limitCount:(unsigned)count;
-(id)getMsgWithDiscussUin:(id)discussUin withType:(int)type notMoreThanSeq:(long long)seq limitCount:(unsigned)count inDb:(id)db;
-(BOOL)updateSendDiscussPttUuid:(unsigned long long)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(BOOL)updateSendDiscussPttUuid:(unsigned long long)uuid uuid:(id)uuid2 newUuid:(id)uuid3 inDb:(id)db;
-(void)setSendPicUUID:(id)uuid oldUUID:(id)uuid2 ForGroup:(unsigned long long)group;
-(void)addSendPicUUID:(id)uuid;
-(id)getOldSendPicUUID:(id)uuid GroupUin:(unsigned long long)uin;
-(void)saveSendPicUUIDCache;
-(void)loadSendPicUUIDCache;
-(BOOL)updateSendDiscussPicUuid:(unsigned long long)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(BOOL)updateSendDiscussPicUuid:(unsigned long long)uuid uuid:(id)uuid2 newUuid:(id)uuid3 inDb:(id)db;
-(void)deleteMsgWithDiscussGroupUin:(unsigned long long)discussGroupUin andMsgId:(int)anId;
-(void)deleteMsgWithDiscussGroupUin:(unsigned long long)discussGroupUin andMsgId:(int)anId inDb:(id)db;
-(int)getMaxMsgId;
-(int)getMaxMsgIdinDb:(id)db;
-(BOOL)addNotifyMsg:(long long)msg msgModel:(id)model;
-(BOOL)setMsgStateWithMsgId:(long long)msgId msgId:(int)anId state:(int)state inDb:(id)db;
-(BOOL)setMsgStateWithMsgId:(unsigned long long)msgId msgId:(int)anId state:(int)state;
-(BOOL)addNotifyMsg:(long long)msg msgModel:(id)model inDb:(id)db;
-(BOOL)setRichMsgStateWithUUid:(long long)uuid uuid:(id)uuid2 state:(int)state;
-(BOOL)setRichMsgStateWithUUid:(long long)uuid uuid:(id)uuid2 state:(int)state inDb:(id)db;
-(BOOL)updateVoiceLen:(long long)len uuid:(id)uuid duration:(int)duration;
-(BOOL)updateVoiceLen:(long long)len uuid:(id)uuid duration:(int)duration inDb:(id)db;
-(BOOL)updateMsgVisiableState:(long long)state;
-(BOOL)updateMsgVisiableState:(long long)state inDb:(id)db;
-(void)deleteAllDiscussMsg;
-(void)deleteAllDiscussMsginDb:(id)db;
-(void)deleteMsgWithDiscussGroup:(unsigned long long)discussGroup;
-(void)deleteMsgWithDiscussGroup:(unsigned long long)discussGroup inDb:(id)db;
-(BOOL)setMsgReadState:(long long)state;
-(BOOL)setMsgReadState:(long long)state inDb:(id)db;
-(unsigned)getMsgNumOfDiscussGroup:(unsigned long long)discussGroup;
-(unsigned)getMsgNumOfDiscussGroup:(unsigned long long)discussGroup inDb:(id)db;
-(id)getDiscussGroupMsg:(unsigned long long)msg pageSize:(int)size page:(int)page;
-(id)getDiscussGroupMsg:(unsigned long long)msg pageSize:(int)size page:(int)page inDb:(id)db;
-(id)getDiscussGroupMsg:(unsigned long long)msg fromSeq:(long long)seq;
-(id)getDiscussGroupMsg:(unsigned long long)msg fromSeq:(long long)seq inDb:(id)db;
-(id)commonQueryResult:(id)result;
-(id)getDiscussGroupMsg:(unsigned long long)msg fromSeq:(long long)seq endSeq:(long long)seq3;
-(id)getDiscussGroupMsg:(unsigned long long)msg fromSeq:(long long)seq endSeq:(long long)seq3 inDb:(id)db;
-(id)getDiscussGroupMsg:(unsigned long long)msg count:(int)count beforeSeq:(long long)seq;
-(id)getDiscussGroupMsg:(unsigned long long)msg count:(int)count beforeSeq:(long long)seq inDb:(id)db;
-(id)getRecentDiscussGroupMsg:(unsigned long long)msg count:(int)count;
-(id)getRecentDiscussGroupMsg:(unsigned long long)msg count:(int)count inDb:(id)db;
-(void)clearMsgSeq;
-(void)removeMsgSeq:(unsigned long long)seq;
-(void)updateMsgSeq:(unsigned long long)seq msgSeq:(long long)seq2;
-(unsigned)getMaxServerMsgSeq:(unsigned long long)seq;
-(unsigned)getMaxServerMsgSeq:(unsigned long long)seq inDb:(id)db;
-(unsigned)getMaxMsgSeq:(unsigned long long)seq;
-(unsigned)getMaxMsgSeq:(unsigned long long)seq inDb:(id)db;
-(unsigned)getLastMsgSeq:(unsigned long long)seq;
-(unsigned)getLastMsgSeq:(unsigned long long)seq inDb:(id)db;
-(BOOL)updateSendMsgServerTime:(long long)time msgModel:(id)model oldMsgTime:(int)time3;
-(BOOL)updateSendMsgServerTime:(long long)time msgModel:(id)model oldMsgTime:(int)time3 inDb:(id)db;
-(BOOL)addSendMsg:(long long)msg msgModel:(id)model;
-(BOOL)addSendMsg:(long long)msg msgModel:(id)model inDb:(id)db;
-(id)addMsgArray:(unsigned long long)array msgArray:(id)array2 isRoamMsg:(BOOL)msg isFromMe:(BOOL)me;
-(id)addMsgArray:(unsigned long long)array msgArray:(id)array2 isRoamMsg:(BOOL)msg isFromMe:(BOOL)me inDb:(id)db;
-(BOOL)addMsg:(long long)msg msgModel:(id)model isRoamMsg:(BOOL)msg3 isFromMe:(BOOL)me;
-(BOOL)addMsg:(long long)msg msgModel:(id)model isRoamMsg:(BOOL)msg3 isFromMe:(BOOL)me inDb:(id)db;
-(void)updateMsgSeq:(int)seq byDiscussUin:(long long)uin msgID:(int)anId time:(int)time;
-(void)updateMsgSeq:(int)seq byDiscussUin:(long long)uin msgID:(int)anId time:(int)time inDb:(id)db;
-(void)updateDiscussGroupMsgDbTableinDb:(id)db;
-(void)dealloc;
-(void)onDBChanged;
-(id)init;
@end

@interface DiscussGroupEditNameViewController : SingleLineEditViewController <IEditViewControllerObserver, IDiscussGroupEditNameView> {
	long long _discussUin;
	NSString* _oldName;
}
@property(retain, nonatomic) NSString* oldName;
-(void)modifyDiscussNameTimeOut:(long long)anOut;
-(void)modifyDiscussNameFail:(long long)fail;
-(void)modifyDiscussNameSuccess:(long long)success;
-(void)quitDelayAction;
-(BOOL)textFieldShouldReturn:(id)textField value:(id)value;
-(BOOL)onChangeDiscussName:(id)name;
-(BOOL)onEditViewCancel:(id)cancel value:(id)value;
-(BOOL)onEditViewModifyValue:(id)value value:(id)value2;
-(id)getDiscussUin;
-(void)dealloc;
-(id)initWithGroupName:(long long)groupName discussName:(id)name;
@end

@interface NobodyView : UIView {
	NSString* _tipStr;
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSString* tipStr;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface DiscussGroupListModel : NSObject {
	NSString* _name;
	int _num;
	int _flag;
	long long _groupUin;
	NSIndexPath* _indexPath;
	NSRange _matchRange;
}
@property(retain, nonatomic) NSIndexPath* indexPath;
@property(assign, nonatomic) long long groupUin;
@property(assign, nonatomic) int flag;
@property(assign, nonatomic) int num;
@property(retain, nonatomic) NSString* name;
-(BOOL)isMatchString:(id)string;
-(void)dealloc;
-(id)init;
@end

@interface DiscussGroupListViewController : QQSearchBaseViewController <UITableViewDataSource, UITableViewDelegate, IDiscussGroupListView, DiscussGroupListViewDelegate> {
	DiscussGroupListViewNew* _tableView;
	NSMutableArray* _tableData;
	NobodyView* _nobodyView;
	UIActivityIndicatorView* _activityView;
	ODRefreshControl* _refreshControl;
	NSTimer* _refreshListTimer;
	BOOL _viewIsAppear;
	BOOL _notifyLoad;
}
-(void)setModelPriority;
-(void)discussGroupListViewDidEndDragging:(id)discussGroupListView willDecelerate:(BOOL)decelerate;
-(void)discussGroupListViewDidScroll:(id)discussGroupListView;
-(void)refreshDiscussListFail;
-(void)refreshDiscussList;
-(void)refreshDiscussInfo:(long long)info;
-(void)delayEndRefreshing:(BOOL)refreshing;
-(void)dropViewDidBeginRefreshing:(id)dropView;
-(void)refreshListTimeout;
-(void)refreshFail;
-(void)refreshSuccess;
-(void)initDisCussChatViewController:(id)controller;
-(void)popToRootView:(id)rootView;
-(void)updateDiscussGroupList;
-(void)iconTouch:(id)touch;
-(void)coverSearchState;
-(void)addDiscussGroup;
-(void)reload;
-(void)restoreData;
-(void)dealloc;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(id)init;
@end

@interface DiscussGroupManageLogicController : NSObject <IDiscussGroupManageDelegate> {
	id<IDiscussGroupManageView> _ManageViewInterface;
	id<IDiscussGroupSelectMemView> _SelectMemViewInterface;
	id<IDiscussGroupListView> _GroupListViewInterface;
	id<IDiscussGroupEditNameView> _GroupEditNameViewInterface;
	id<IDiscussGroupMemListView> _GroupMemListViewInterface;
	NSMutableArray* _groupList;
	NSMutableArray* _recentFriendList;
	NSMutableArray* _sectionsArray;
	int _seqID;
	int offset;
	BOOL _needChange;
	BOOL _expandMode;
}
@property(retain, nonatomic) NSMutableArray* sectionArray;
+(id)getInstance;
-(void)handleSetDiscussFlagResult:(int)result discussGroupUin:(long long)uin;
-(void)handleDeleteMsgInRecent:(long long)recent;
-(void)handleChangeDiscussNameResult:(int)result discussGroupUin:(long long)uin;
-(void)handleUpdateDiscussListResult:(int)result;
-(void)handleUpdateDiscussInfoResult:(int)result discussGroupUin:(long long)uin;
-(void)handleQuitDiscussResult:(int)result discussGroupUin:(long long)uin;
-(void)handleAddDiscussMemberResult:(int)result discussGroupUin:(long long)uin seqID:(int)anId;
-(void)handleCreateDiscussResult:(int)result discussGroupUin:(long long)uin seqID:(int)anId;
-(void)clearAllMessage;
-(BOOL)isHasMsg:(long long)msg;
-(BOOL)isValidGroup:(long long)group;
-(void)delayInitHeadImage:(id)image;
-(void)updateGroupHead:(id)head;
-(void)notifyMsgCheckHeadNeedUpdate:(long long)update oldMemAry:(id)ary;
-(BOOL)checkChangeHead:(id)head discussGroup:(long long)group;
-(void)notifyChangeDiscussName;
-(void)checkUpdateGroupList:(long long)list;
-(void)recoverDiscussState;
-(void)addInitSuccessNotify:(long long)notify;
-(int)getDiscussGroupMaxMemberNum;
-(id)getCurrentNickName;
-(long long)GetCurrentUin;
-(id)getProfileViewControllerByUin:(id)uin defaultStrangerType:(int)type;
-(BOOL)connedted;
-(void)fliterHasChoosedFriend:(id)aFriend fromArray:(id)array;
-(id)fliterLikeWord:(id)word fromTroopMems:(id)troopMems;
-(id)fliterLikeWord:(id)word;
-(void)clearGroupData;
-(BOOL)getExpandStateOfSection:(int)section;
-(void)setExpandSection:(int)section;
-(id)getGroupName:(int)name;
-(id)getFriendListByGroupIndex:(int)index filterMem:(id)mem;
-(id)getFriendsListbyIndex:(int)index;
-(id)getAllFriends;
-(id)getFriendListGroup;
-(id)getSelfAndFriNickName:(id)name;
-(id)getFriRealNickName:(id)name;
-(id)getBatchMemRemarkName:(long long)name memberArray:(id)array needReq:(BOOL)req;
-(id)getMemberRemarkName:(long long)name memberUin:(id)uin;
-(id)getNickName:(id)name;
-(id)getPinyin:(id)pinyin;
-(id)getHeadImage:(id)image;
-(BOOL)isFriend:(id)aFriend;
-(id)getGroupHeadImage:(long long)image;
-(id)getDiscussHeadImage:(long long)image defaultImage:(id)image2;
-(void)initGroupHeadImage:(long long)image;
-(id)getDiscussGroupName:(long long)name;
-(BOOL)changeDiscussName:(long long)name newDiscussName:(id)name2;
-(BOOL)quitDiscuss:(long long)discuss;
-(BOOL)updateDiscussInfo:(long long)info;
-(BOOL)updateDiscussList;
-(id)getDiscussNames:(long long)names;
-(id)getDiscussGroupNameByDGInfo:(id)info;
-(id)createNameByMembers:(id)members andOriginalName:(id)name;
-(id)getDiscussRemarkTheme:(id)theme discussUIN:(long long)uin;
-(id)getDiscussCreatingName:(id)name;
-(BOOL)addDiscussMember:(long long)member addMemberArray:(id)array;
-(BOOL)createDiscussGroup:(id)group memberArray:(id)array;
-(id)tranferUinToCacaInfo:(id)cacaInfo;
-(void)setMaskPushState:(long long)state state:(BOOL)state2;
-(BOOL)getMaskPushState:(long long)state;
-(id)getChangingDiscussName:(long long)name;
-(void)changeMaskFlag:(long long)flag memberUin:(long long)uin mask:(BOOL)mask;
-(void)deleteDiscussGroup:(long long)group;
-(id)getDiscussMemberList:(long long)list;
-(id)getGroupInfo:(long long)info;
-(id)getGroupList;
-(id)getGroupListSortedByNick;
-(void)setMemListViewInterface:(id)interface;
-(void)setEditNameViewInterface:(id)interface;
-(void)setGroupListViewInterface:(id)interface;
-(void)setSelectMemViewInterface:(id)interface;
-(void)setManageViewInterface:(id)interface;
-(void)dealloc;
-(id)init;
@end

@interface MemUnitView : UIView {
@private
	QQAsynHeadImageView* _headView;
	NSString* _uin;
	UILabel* _title;
	id<MemUnitViewDelegate> _delegate;
	long long _discussGroupUin;
}
@property(assign, nonatomic) id<MemUnitViewDelegate> delegate;
-(void)dealloc;
-(void)touchDown:(id)down;
-(void)getDiscussMemberRemarkFinishCallBack:(id)back;
-(void)getNickFinishCallBack:(id)back;
-(void)setDefaultStyle;
-(void)setDiscussMemberUin:(id)uin remarkName:(id)name discussGroupUin:(long long)uin3;
-(void)setUin:(id)uin;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MemView : UIView {
	NSMutableArray* _memUin;
	NSMutableArray* _subViews;
	id<MemUnitViewDelegate> _delegate;
	long long _discussGroupUin;
}
@property(assign, nonatomic) id<MemUnitViewDelegate> delegate;
-(void)dealloc;
-(void)setMemUin:(id)uin add:(BOOL)add discussGroupUin:(long long)uin3;
-(id)init;
@end

@interface DiscussGroupManageViewController : QQViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, IDiscussGroupManageView, MemUnitViewDelegate, MemHolderOperationDelegate> {
	int _manageType;
	long long _groupCode;
	NSMutableArray* _memDataSource;
	NSMutableArray* _memUinArray;
	UITableView* _tableView;
	MemView* _memView;
	UIView* _modifyNameView;
	UILabel* _groupName;
	UIButton* _quitButton;
	UIButton* _moreButton;
	BOOL _isNeedReload;
	BOOL _notifyLoad;
	BOOL _isInit;
	BOOL _isDelState;
	NSTimer* _timer;
	NSString* _groupNameText;
	QQActionSheet* _actionSheet;
	NSString* _shareUrl;
	UIActivityIndicatorView* _HUD;
}
@property(retain, nonatomic) NSString* groupNameText;
-(void)quitDiscussGroupFailed:(long long)failed;
-(void)quitDiscussGroupSucess:(long long)sucess;
-(void)refreshChangeDiscussName;
-(void)refreshDiscussName:(long long)name;
-(void)refreshDiscussMemberList:(long long)list;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)hideCellLoadingTips;
-(void)showCellLoadingTips:(id)tips;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onHolderOperationSuccessed:(id)successed;
-(void)didHeadTouch:(id)touch;
-(void)doSelectedFriends:(id)friends;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)leftButtonClick:(id)click;
-(void)deleteOver;
-(void)DeleteSelfGroupInfo:(id)info;
-(void)setVoiceChannel:(BOOL)channel;
-(void)goToModelType;
-(void)clickSwitch:(id)aSwitch;
-(void)modifyNameAction:(id)action;
-(id)emptyModel;
-(void)actionShare:(id)share;
-(void)requestShareUrl:(long long)url;
-(void)clearHistory;
-(void)quitAction;
-(void)goToHistoryView;
-(void)setChatCover;
-(float)computeHeight:(BOOL)height;
-(void)loadMemArray;
-(id)getDiscussUin;
-(void)dealloc;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(id)initWithGroupCode:(long long)groupCode;
-(id)initAddDiscussGroup:(id)group;
@end

@interface DiscussGroupSelectMemViewController : MemHeadHolderViewController <UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate, UISearchDisplayDelegate, MemHeadViewDelegate, IDiscussGroupSelectMemView, QQGroupViewGroupCellDelegate> {
	UISearchBar* _searchBar;
	UISearchDisplayController* _searchDisplay;
	UITableView* _tableView;
	MemHeadView* _memView;
	NSArray* _searchDataSources;
	NSArray* _initArray;
	NSMutableArray* _dataSources;
	NSMutableArray* _cellHeadsArray;
	NSMutableArray* _recentArray;
	NSMutableArray* _clusterItemArray;
	NSTimer* _delaySearchTimer;
	BOOL _isSearching;
	BOOL _ifCreat;
	long long _discussUin;
	int hasMemNum;
	id<DiscussGroupSelectMemViewControllerDelegate> _delegate;
	id<CacaRoomSelectMemberDelegate> _cacaDelegate;
	BOOL _isCreating;
	BOOL _isKeyBoardShown;
	BOOL _isExpending;
	BOOL _shouldPresentMemView;
	NSString* _showTitleText;
	NSString* _showRightButtonText;
}
@property(retain, nonatomic) NSMutableArray* clusterItemArray;
@property(retain, nonatomic) NSArray* initArray;
@property(retain, nonatomic) NSArray* searchDataSources;
@property(retain, nonatomic) NSString* showRightButtonText;
@property(retain, nonatomic) NSString* showTitleText;
@property(assign, nonatomic) id<CacaRoomSelectMemberDelegate> cacaDelegate;
-(BOOL)groupViewCellStartShrinking:(id)shrinking;
-(BOOL)groupViewCellStartExpending:(id)expending;
-(void)onAllMembersRemoved:(id)removed members:(id)members;
-(void)onMemberRemoved:(id)removed memberUIN:(id)uin;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)reloadSearchSourceData;
-(void)clearSearchData;
-(void)hiddenMemView;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
-(void)updateDiscussGroupList;
-(void)delaytoReloadSourceData;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)createTableViewCell:(id)cell withTitleFrame:(CGRect)titleFrame;
-(id)clusterImageForType:(int)type;
-(id)clusterTitleForType:(int)type;
-(int)typeForItem:(int)item;
-(void)createMemberHeadView;
-(void)createDiscussSelectSections;
-(void)filterContentForSearchText:(id)searchText scope:(id)scope;
-(id)genarateSearchResultCell:(id)cell atIndex:(id)index;
-(id)getDiscussUin;
-(void)setInitSelectAry:(id)ary;
-(void)ActionExpand:(id)expand;
-(id)createGroupName:(id)name;
-(void)dealloc;
-(void)leftButtonClick:(id)click;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(id)initCreateGroupState:(BOOL)state discussUin:(long long)uin;
@end

@interface DiscussGroupChatEngine : NSObject <IEngineDispatchDelegate> {
	id<IDiscussGroupChatEngineDelegate> _Delegate;
	NSMutableArray* _delegateArray;
	DiscussGroupChatStorage* _chatStorage;
	NSMutableArray* _sendingMsgQueue;
	NSMutableDictionary* _msgCacheDict;
	NSMutableDictionary* _lastTipArray;
	NSMutableDictionary* _excessMsgDic;
	NSMutableDictionary* _disSeqResultListDict;
	NSMutableDictionary* _lastSetSeqDic;
	DiscussGroupMsgReadStorage* _msgReadStorage;
	int soundTime;
}
+(id)getInstance;
-(BOOL)removeMesasge:(id)mesasge;
-(id)getLatestMessageInGroup:(unsigned long long)group uin:(id)uin;
-(id)getMsgsLessThanMsgID:(long long)anId limitCount:(unsigned)count discussGroupCode:(id)code;
-(void)updateDiscussRichMsgState:(int)state msgTime:(int)time state:(int)state3;
-(void)SetMsgSendStateWithMsgID:(id)msgID state:(int)state;
-(int)GetMsgSendState:(int)state;
-(void)asyncGetMsgWithDiscussUin:(id)discussUin WithType:(int)type notMoreThanSeq:(long long)seq limitCount:(unsigned)count callback:(id)callback userdata:(id)userdata;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(BOOL)isExistPttFile:(id)file discussGroupUin:(unsigned long long)uin;
-(void)startDownloadDiscussPicAndPtt:(id)ptt discussGroupUin:(unsigned long long)uin afterDelay:(float)delay;
-(void)updateDiscussGroupInfo:(long long)info infoSeq:(long long)seq;
-(void)responseDiscussGroupProxyMsg:(void*)msg msgSeq:(long long)seq;
-(void)responseDiscussGroupDelMsg:(char*)msg DataLen:(int)len;
-(BOOL)requestDelDiscussGroupMsg:(id)msg msgSeq:(id)seq;
-(void)deleteServerDiscussGroupMsg:(id)msg;
-(void)onGetOfflineDiscussGroupMsg:(id)msg;
-(BOOL)setDiscussGroupMsgReadConfirm:(BOOL)confirm discussGroupUin:(unsigned long long)uin;
-(void)responseDiscussGroupMsgReadConfirm:(char*)confirm DataLen:(int)len;
-(BOOL)requestDiscussGroupMsgReadConfirm:(BOOL)confirm discussGroupUin:(unsigned long long)uin msgSeq:(unsigned long long)seq;
-(void)responseDiscussGroupOfflineMsg:(char*)msg DataLen:(int)len;
-(void)requestPullDiscussGroupMsg:(long long)msg DiscussGroupSeq:(long long)seq memberSeq:(long long)seq3;
-(void)responseDiscussGroupMsgSeq:(char*)seq DataLen:(int)len;
-(void)requestDiscussGroupMsgSeq:(BOOL)seq DiscussGroupGroups:(id)groups;
-(void)onGetRoamDiscussGroupMsg:(id)msg;
-(void)responseDiscussGroupMsg:(char*)msg DataLen:(int)len;
-(id)parseMsg:(char*)msg size:(int)size uin:(long long)uin msgType:(short)type appShareId:(unsigned)anId msgSeq:(long long)seq remarkNameOfSender:(id)sender discussGroupUin:(long long)uin8;
-(void)requestDiscussGroupMsg:(long long)msg DiscussGroupSeq:(long long)seq memberSeq:(long long)seq3;
-(void)responseSetDiscussGroupMsgRead:(char*)read DataLen:(int)len;
-(int)requestSetDiscussGroupMsgRead:(BOOL)read discussGroupUin:(unsigned long long)uin msgSeq:(unsigned)seq;
-(void)responseDiscussGroupMsgCount:(char*)count DataLen:(int)len;
-(void)requestDiscussGroupMsgCount:(BOOL)count DiscussGroupGroups:(id)groups;
-(id)getRecentMessage:(id)message resultArray:(id)array;
-(id)getFirstPieceFromMultiMsg:(id)multiMsg;
-(int)parseSetMsgRead:(char*)read dataLen:(int)len response:(SvcResponseSetConfMsgRead*)response;
-(char*)getSetMsgReadBuffer:(long long)buffer msgSeq:(long long)seq verifyType:(BOOL)type;
-(int)parseMsgDel:(char*)del dataLen:(int)len response:(SvcResponseDelDisMsg*)response;
-(char*)getDelMsgBuffer:(vector<MessageSvcPack::DelDisParam, std::allocator<MessageSvcPack::DelDisParam> >*)buffer;
-(int)parseMsgReadConfirm:(char*)confirm dataLen:(int)len response:(SvcResponseSetConfMsgRead*)response;
-(char*)getMsgReadConfirmBuffer:(long long)buffer msgSeq:(long long)seq verifyType:(BOOL)type;
-(int)parsePullDiscussGroupMsg:(char*)msg dataLen:(int)len response:(SvcResponsePullDisMsg*)response;
-(char*)getPullDiscussGroupMsgBuffer:(long long)buffer BeginSeq:(long long)seq EndSeq:(long long)seq3 verifyType:(BOOL)type;
-(int)parseGetDiscussGroupMsg:(char*)msg dataLen:(int)len response:(SvcResponseGetConfMsg*)response;
-(char*)getDiscussGroupMsgBuffer:(long long)buffer BeginSeq:(long long)seq EndSeq:(long long)seq3;
-(int)parseGetDiscussGroupMsgSeq:(char*)seq dataLen:(int)len response:(SvcResponsePullDisMsgSeq*)response;
-(char*)getDiscussGroupMsgSeqBuffer:(vector<MessageSvcPack::PullDisSeqParam, std::allocator<MessageSvcPack::PullDisSeqParam> >)buffer verifyType:(BOOL)type;
-(int)parseGetDiscussGroupMsgNum:(char*)num dataLen:(int)len response:(SvcResponseGetConfMsgNum*)response;
-(char*)getDiscussGroupMsgNumBuffer:(vector<long long, std::allocator<long long> >)buffer verifyType:(BOOL)type;
-(void)onDiscussGroupMessageReadNotify:(id)notify;
-(void)clearBlankMsgSeq:(unsigned long long)seq;
-(void)addBlankMsgSeq:(unsigned long long)seq seq:(long long)seq2;
-(id)getDiscussGroupMsg:(unsigned long long)msg pageSize:(int)size page:(int)page;
-(unsigned)getMsgNumOfDiscussGroup:(unsigned long long)discussGroup;
-(void)clearMsgSeq;
-(void)clearTipMsgCache:(unsigned long long)cache;
-(BOOL)addNotifyMsg:(long long)msg msgModel:(id)model type:(int)type;
-(id)parseChangeDiscussNameTipMsg:(unsigned long long)msg msgData:(char*)data;
-(id)parsePrivacyTipMsg:(unsigned long long)msg msgData:(char*)data;
-(id)parseTipMsg:(unsigned long long)msg opType:(int)type memAry:(id)ary;
-(int)getMaxMsgId;
-(unsigned)getMaxServerMsgSeq:(unsigned long long)seq;
-(unsigned)getMaxMsgSeq:(unsigned long long)seq;
-(id)getContent:(id)content over:(BOOL)over;
-(BOOL)canPlaySound;
-(void)setRichMsgRead:(unsigned long long)read uuid:(id)uuid;
-(BOOL)updateSendDiscussPttUuid:(unsigned long long)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(BOOL)updateSendDiscussPicUuid:(unsigned long long)uuid uuid:(id)uuid2 newUuid:(id)uuid3;
-(void)setSuccessStateWithMsgId:(unsigned long long)msgId msgId:(int)anId;
-(void)setFailSendImgAndPtt:(unsigned long long)ptt uuid:(id)uuid;
-(void)setSuccessSendImgAndPtt:(unsigned long long)ptt uuid:(id)uuid;
-(void)updateVoiceLen:(long long)len uuid:(id)uuid duration:(int)duration;
-(void)netGetDiscussGroupMsg:(id)msg;
-(void)asyncGetDiscussGroupMsg:(int)msg beforeSeq:(unsigned long long)seq discussGroupUin:(unsigned long long)uin firstMsgSeq:(unsigned long long)seq4 noRoam:(BOOL)roam;
-(void)asyncGetRecentDiscussGroupMsg:(int)msg discussGroupUin:(unsigned long long)uin;
-(void)notifySendDiscussGroupMsgResult:(BOOL)result discussGroupUin:(unsigned long long)uin msgModelTimeStamp:(int)stamp serverMsgTime:(unsigned)time;
-(void)notifyDiscussGroupMsgSeq:(char*)seq DataLen:(int)len;
-(BOOL)notifySendDiscussGroupMsg:(id)msg discussGroupUin:(unsigned long long)uin;
-(BOOL)notifyPushDiscussGroupMsg:(id)msg discussGroupUin:(unsigned long long)uin infoSeq:(unsigned long long)seq isFromMe:(BOOL)me;
-(void)InsertTipMessage:(id)message discussGroupUin:(unsigned long long)uin;
-(void)deleteDiscussGroupSession:(unsigned long long)session;
-(void)clearAllDiscussMsg;
-(void)removeMsgSeq:(unsigned long long)seq;
-(void)deleteMsgWithDiscussGroupUin:(unsigned long long)discussGroupUin andMsgId:(int)anId;
-(void)deleteMsgWithDiscussGroup:(unsigned long long)discussGroup;
-(BOOL)setMsgReadState:(long long)state;
-(void)prepareRegister;
-(void)changeAccount;
-(void)removeDelegate:(id)delegate;
-(void)addDelegate:(id)delegate;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface DiscussGroupTipInfo : NSObject {
	int _type;
	NSMutableArray* _addUinArray;
	NSMutableArray* _quitUinArray;
}
@property(retain, nonatomic) NSMutableArray* quitUinArray;
@property(retain, nonatomic) NSMutableArray* addUinArray;
@property(assign, nonatomic) int type;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface DicussGroupHead : NSObject <IFaceObserver> {
	BOOL _isSmallHead;
@private
	long long _discussGroupUin;
	NSMutableArray* _uinAry;
	NSString* _filePath;
	id<DicussGroupHeadDelegate> _delegate;
}
@property(assign, nonatomic) BOOL isSmallHead;
@property(assign, nonatomic) id<DicussGroupHeadDelegate> delegate;
@property(retain, nonatomic) NSString* filePath;
@property(assign, nonatomic) long long discussGroupUin;
-(void)dealloc;
-(void)mergeAndSaveHeadImage:(id)image;
-(id)getHeadImage:(id)image isSmall:(BOOL)small;
-(void)asySaveStart;
-(void)updateHeadImage:(id)image;
-(void)setUinArray:(id)array;
-(void)notifyLoadHeadImageFinished:(id)finished;
-(void)notifyGetHeadImageSucc:(id)succ;
-(id)initWithDiscussGroupUin:(long long)discussGroupUin;
@end

@interface DiscussGroupHeadEngine : NSObject <DicussGroupHeadDelegate> {
	long long _uin;
	NSMutableDictionary* _discussHeadDict;
	NSMutableDictionary* _headDict;
}
+(id)getInstance;
-(void)updateGroupHead:(id)head;
-(void)initGroupHeadImage:(long long)image;
-(void)initFlyTicketHeadImage:(long long)image;
-(BOOL)checkChangeHead:(id)head discussGroup:(long long)group;
-(id)getGroupHeadImage:(long long)image;
-(id)getDiscussHeadImage:(long long)image defaultImage:(id)image2;
-(void)changeUin;
-(void)dealloc;
-(id)init;
@end

@interface DiscussCacaInfo : NSObject {
	int _type;
	long _refUin;
	NSString* _nick;
	NSString* _uin;
	NSMutableData* _voiceID;
}
@property(retain, nonatomic) NSMutableData* voiceID;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) NSString* nick;
@property(assign, nonatomic) long refUin;
@property(assign, nonatomic) int type;
-(id)description;
-(int)compareByName:(id)name;
-(id)getShowName;
-(void)dealloc;
-(id)init;
@end

@interface DiscussGroupMsgReadStorage : NSObject {
	NSMutableDictionary* _lastReadSeqDic;
	NSMutableDictionary* _blankMsgSeqDic;
	id<DiscussGroupMsgReadDelegate> _delegate;
}
-(int)blankMsgCount:(unsigned long long)count beginSeq:(long long)seq endSeq:(long long)seq3;
-(void)clearBlankMsgSeq:(unsigned long long)seq;
-(void)addBlankMsgSeq:(unsigned long long)seq seq:(long long)seq2;
-(void)saveDisBlankMsgToFile:(id)file;
-(void)readDisBlankMsgFromFile;
-(void)setValue:(id)value forKey:(id)key;
-(id)getLastReadSeqForDiscussGroup:(id)discussGroup;
-(void)showUnreadCount:(id)count MaxSeq:(long long)seq MemberSeq:(long long)seq3;
-(void)save;
-(void)load;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface DiscussGroupListViewNew : UITableView <UITableViewDelegate, UITableViewDataSource> {
	NSMutableArray* _discussGroupList;
	QQRelationLogicEngine* _logicEngine;
	id<DiscussGroupListViewDelegate> _listViewDelegate;
}
@property(assign, nonatomic) id<DiscussGroupListViewDelegate> listViewDelegate;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)initCellForDiscussGroup:(id)discussGroup atIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)reloadDiscussGroupListData;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface DGSelectMemFromGroupViewController : MemHeadHolderViewController <UITableViewDataSource, UITableViewDelegate, MemHeadViewDelegate, UISearchBarDelegate, UISearchDisplayDelegate, LoadingRMembersStrategyCallback> {
	UITableView* _tableView;
	UISearchBar* _searchBar;
	UISearchDisplayController* _searchDisplay;
	NSMutableDictionary* _dataSource;
	NSMutableArray* _sectionTitles;
	NSArray* _searchDataSources;
	NSArray* _regularDataSources;
	BOOL _isSearching;
	BOOL _isAlphaBetaIndexesShown;
	int _sortType;
	long long _relationID;
	int _type;
	LoadingRelationMembersStrategy* _strategy;
@private
	id<IDiscussGroupSelectMemView> _delegateController;
}
@property(retain, nonatomic) LoadingRelationMembersStrategy* strategy;
@property(assign, nonatomic) long long relationID;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSArray* regularDataSources;
@property(retain, nonatomic) NSArray* searchDataSources;
@property(assign, nonatomic) id<IDiscussGroupSelectMemView> delegateController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)reloadSearchSourceData;
-(void)filterContentForSearchText:(id)searchText scope:(id)scope;
-(void)onAllMembersRemoved:(id)removed members:(id)members;
-(void)onMemberRemoved:(id)removed memberUIN:(id)uin;
-(void)configureDataSource:(id)source;
-(void)configureDataArray:(id)array type:(int)type;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)clearSearchData;
-(void)delaytoReloadSourceData;
-(void)hiddenMemView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)onFinishDownloading:(id)downloading members:(id)members;
-(void)reloadSerachTableData;
-(id)genarateSearchResultCell:(id)cell indexPath:(id)path;
-(void)onCreateOrAddDiscussGroupResult:(id)result;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)dealloc;
-(id)initWithType:(int)type ID:(long long)anId sortType:(int)type3 memberView:(id)view;
-(id)filterModelArray:(id)array withUins:(id)uins;
@end

@interface DiscussGroupSelectGroupViewController : QQViewController <UITableViewDataSource, UITableViewDelegate, MemHeadViewDelegate> {
	NSMutableArray* _groupList;
	UITableView* _tableView;
	MemHeadView* _memView;
	BOOL _isCreating;
	NSArray* _filterArray;
	id<IDiscussGroupSelectMemView> _delegateController;
	BOOL _shouldPresentMemView;
	BOOL _ifCreat;
	NSString* _showRightButtonText;
}
@property(retain, nonatomic) NSString* showRightButtonText;
@property(assign, nonatomic) BOOL ifCreat;
@property(assign, nonatomic) id<IDiscussGroupSelectMemView> delegateController;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)onCreateOrAddDiscussGroupResult:(id)result;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)loadView;
-(void)leftButtonClick:(id)click;
-(void)dealloc;
-(id)initWithGoupList:(id)goupList filterArray:(id)array selectedMemView:(id)view;
@end

@interface SearchResultCell : UIView {
	UIImageView* _headImageView;
	UILabel* _nameLabel;
	UILabel* _numberLabel;
	UILabel* _desLabel;
}
@property(readonly, assign, nonatomic) UIImageView* headImageView;
-(void)setHeadImage:(id)image;
-(void)setName:(id)name number:(id)number;
-(void)setDescriptionText:(id)text;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface RelationListsViewController : MemHeadHolderViewController <UITableViewDataSource, UITableViewDelegate> {
	int _type;
	unsigned long long _filterListUIN;
	UITableView* _tableView;
	NSArray* _listsArray;
}
@property(retain, nonatomic) NSArray* listsArray;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) int type;
+(void)getRelationList:(id)list type:(int)type filterListUIN:(unsigned long long)uin;
+(id)getRelationListbyType:(int)type filterListUIN:(unsigned long long)uin;
+(id)createRelationListCell:(id)cell model:(id)model;
+(id)setTabelViewCellHeader:(id)header;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)loadView;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithRelationType:(int)relationType filterListUIN:(unsigned long long)uin;
@end

@interface RelationMembersViewController : UIViewController {
}
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface RelationListModel : QQModel {
	int _type;
	long long _ID;
	NSString* _name;
	NSString* _remark;
}
@property(retain, nonatomic) NSString* remark;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) long long ID;
@property(assign, nonatomic) int type;
-(void).cxx_destruct;
-(void)dealloc;
@end

@interface RelationMemberModel : QQModel {
	NSString* _ID;
	NSString* _name;
	NSString* _remark;
	int _time;
}
@property(assign, nonatomic) int time;
@property(retain, nonatomic) NSString* remark;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* ID;
-(void).cxx_destruct;
-(void)dealloc;
@end

@interface MemHeadHolderViewController : QQViewController <MemHeadViewDelegate, IDiscussGroupSelectMemView> {
	CGRect _memberViewFrame;
	MemHeadView* _memberView;
	UIImageView* _memberViewCaptrue;
	id<MemHolderOperationDelegate> _opDelegate;
	int _keyBoardHeight;
	BOOL _presentViewFlag;
}
@property(assign, nonatomic) BOOL presentViewFlag;
@property(assign, nonatomic) int keyBoardHeight;
@property(assign, nonatomic) id<MemHolderOperationDelegate> opDelegate;
@property(retain, nonatomic) MemHeadView* memberView;
-(void).cxx_destruct;
-(void)quitDelayAction;
-(id)createGroupName:(id)name;
-(void)actionCreatDiscuss;
-(void)addDiscussMemberFailed:(long long)failed;
-(void)addDiscussMemberSuccess:(long long)success;
-(void)creatDiscussGroupFailed;
-(void)creatDiscussGroupSuccess:(long long)success;
-(void)popToLastNavControllerToCreation;
-(void)memBtnClick:(id)click;
-(void)onAllMembersRemoved:(id)removed members:(id)members;
-(void)onMemberRemoved:(id)removed memberUIN:(id)uin;
-(id)genarateSearchResultCell:(id)cell atIndex:(id)index uin:(id)uin nick:(id)nick remark:(id)remark avatar:(id)avatar;
-(void)checkRightBtnState;
-(void)actionClosedMemHolderViewController:(id)controller;
-(void)actionDone:(id)done;
-(void)ResetRightButton;
-(void)didReceiveMemoryWarning;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithMemberView:(id)memberView;
@end

@interface LoadingRelationMembersStrategy : NSObject {
	id<LoadingRMembersStrategyCallback> _callback;
	int _type;
	long long _listID;
	int _reqID;
}
@property(assign, nonatomic) id<LoadingRMembersStrategyCallback> callback;
-(void)ActionFinishRefreshTroopMemberStatus:(id)status;
-(void)ActionGetTroopMember:(id)member result:(BOOL)result;
-(id)getRemarkofGroupMember:(unsigned long long)member memberUIN:(id)uin;
-(int)startLoadingMembers;
-(id)initWithRelationType:(int)relationType listID:(long long)anId;
@end

@interface QIMCandidateItem : NSObject {
	NSString* string_;
	CGRect rect_;
	unsigned short commitIndex_;
	unsigned char hotspotIndex_;
}
@property(retain, nonatomic) NSString* string;
@property(assign, nonatomic) CGRect rect;
@property(assign, nonatomic) unsigned short commitIndex;
@property(assign, nonatomic) unsigned char hotspotIndex;
-(id)init;
-(void)dealloc;
@end

@interface QIMCandidate : QIMView <QIMViewDelegate, QIMAccessibilityProtocol> {
	QIMCandidateController* candidateController_;
	NSMutableArray* items_;
	QIMLoader* loader_;
	struct {
		unsigned landscape : 1;
		unsigned hotspot : 8;
		unsigned compositionHeight : 8;
		unsigned separatorWidth_h : 4;
		unsigned separatorWidth_v : 4;
		unsigned borderWidth : 4;
		unsigned updateAccessibilityElements : 1;
	} candidateFlags_;
	unsigned hotspot;
	NSMutableArray* accessibilityElements;
}
@property(assign, nonatomic) QIMCandidateController<QIMCandidateDelegate>* candidateController;
@property(assign, nonatomic) unsigned hotspot;
@property(assign, nonatomic) NSMutableArray* accessibilityElements;
-(id)init;
-(void)dealloc;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)update;
-(void)moveToNextItem;
-(void)moveToPrevItem;
-(CGRect)itemRectWithPoint:(const CGPoint*)point;
-(unsigned)itemCommitIndexWithPoint:(const CGPoint*)point;
-(unsigned)itemHotspotWithPoint:(const CGPoint*)point;
-(id)itemStringWithRect:(const CGRect*)rect;
-(BOOL)itemIsPaintablePhrase:(const unsigned short*)phrase len:(unsigned)len;
-(void)drawItem:(id)item text:(const XXStruct_3rHmjD*)text background:(const XXStruct_c9RIqA*)background;
-(void)drawBackground:(const XXStruct_c9RIqA*)background active:(BOOL)active;
-(unsigned)drawBorder:(CGRect*)border border:(const XXStruct_q$hncC*)border2;
-(unsigned)drawVerticalSeparatorWithStart:(CGPoint*)start end:(CGPoint*)end separator:(const XXStruct_OzJQfB*)separator;
-(unsigned)drawHorizontalSeparatorWithStart:(CGPoint*)start end:(CGPoint*)end separator:(const XXStruct_OzJQfB*)separator;
@end

@interface QIMCandidate1MultilinePadView : QIMCandidate1Multiline {
}
@end

@interface QIMCandidate1MultilinePhoneView : QIMCandidate1Multiline {
}
@end

@interface QIMCandidate1MultilinePhoneScrollView : QIMCandidate1Multiline <UIScrollViewDelegate> {
	QIMCompositionMultiline* composition_;
	UIScrollView* scrollView_;
	NSMutableArray* cells_;
	unsigned cellTotal_;
	unsigned rowNum_;
	unsigned colNum_;
	unsigned hotspotCellIndex_;
	unsigned lastCandItemTotal_;
	QIMCandidateButton* cancelButton_;
	QIMCandidateButton* modeButton_;
	struct {
		unsigned preloadNum : 4;
		unsigned cellMaxNum : 8;
	} flags_;
}
@property(readonly, assign, nonatomic, getter=getCellTotal) unsigned cellTotal;
@property(readonly, assign, nonatomic, getter=getRowNum) unsigned rowNum;
@property(readonly, assign, nonatomic, getter=getColNum) unsigned colNum;
@property(readonly, assign, nonatomic, getter=getHotspotCellIndex) unsigned hotspotCellIndex;
@property(assign, nonatomic, getter=getCancelButton) QIMCandidateButton* cancelButton;
@property(assign, nonatomic, getter=getModeButton) QIMCandidateButton* modeButton;
@property(assign, nonatomic, setter=setLastCandItemTotal:) unsigned lastCandItemTotal;
-(id)init;
-(void)dealloc;
-(void)removeAllCells;
-(void)drawInContext:(CGContextRef)context;
-(void)update;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)moveToNextItem;
-(void)moveToPrevItem;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began point:(CGPoint*)point;
-(void)touchesMoved:(id)moved point:(CGPoint*)point;
-(void)touchesEnded:(id)ended point:(CGPoint*)point;
-(void)setHiddenInvalidCell:(unsigned)cell;
-(void)updateCandCellWithIndex:(unsigned)index;
-(CGSize)contentSize;
-(void)updateCandItem;
-(void)updateModeButton;
-(void)updateCancelButton;
-(void)redrawHotspotCell;
@end

@interface QIMCandidate1Multiline : QIMCandidate {
}
-(id)init;
-(void)dealloc;
-(void)removeAllCells;
@end

@interface QIMCandidate1Singleline : QIMCandidate {
	BOOL showButton_;
	struct {
		unsigned moved : 1;
	} flags_;
	QIMCandidateButton* button_;
}
@property(assign, nonatomic, getter=getButton) QIMCandidateButton* button;
@property(assign, nonatomic, getter=isShowButton) BOOL showButton;
-(id)init;
-(void)dealloc;
-(void)moveToNextItem;
-(void)moveToPrevItem;
-(CGSize)updateCandItem;
-(void)recalculateCandItemsWidth:(unsigned)width;
-(CGPoint)autoAdjustCandPosition:(CGRect)position;
-(void)setMarkedText;
-(void)update;
-(void)drawInContext:(CGContextRef)context;
-(void)touchesBegan:(id)began point:(CGPoint*)point;
-(id)convertStringToAccessibilityLabel:(id)accessibilityLabel;
-(void)updateAccessibleElements;
-(BOOL)isAccessibilityElement;
-(int)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(int)index;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
@end

@interface QIMCandidate2MultilinePadView : QIMCandidate2Multiline {
}
@end

@interface QIMCandidate2MultilinePhoneView : QIMCandidate2Multiline {
}
-(id)init;
-(void)dealloc;
-(void)orientationChanged;
-(void)update;
-(void)drawInContext:(CGContextRef)context;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)updateCandItem;
-(void)drawFrame:(CGContextRef)frame frame:(XXStruct_2H8njB*)frame2;
-(void)drawBackground:(CGContextRef)background index:(short)index rect:(CGRect)rect active:(BOOL)active;
-(void)drawBackground:(CGContextRef)background;
-(void)drawCandItem:(CGContextRef)item;
-(CGRect)returnButtonRect;
-(BOOL)isReturnButton:(CGPoint)button;
-(id)convertStringToAccessibilityLabel:(id)accessibilityLabel;
-(void)updateAccessibleElements;
-(BOOL)isAccessibilityElement;
-(int)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(int)index;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
@end

@interface QIMCandidate2Multiline : QIMCandidate {
	QIMCandidateButton* button_;
	XXStruct_u8NHVB flags_;
}
@property(assign, nonatomic) QIMCandidateButton* button;
-(id)init;
-(void)dealloc;
@end

@interface QIMCandidate2SinglelinePadView : QIMCandidate2Singleline {
}
@end

@interface QIMCandidate2SinglelinePhoneScrollView : QIMCandidate2Singleline {
}
@end

@interface QIMCandidate2SinglelinePhoneView : QIMCandidate2Singleline {
	XXStruct_u8NHVB flags_;
}
-(id)init;
-(void)dealloc;
-(void)orientationChanged;
-(void)update;
-(void)drawInContext:(CGContextRef)context;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began point:(CGPoint*)point;
-(void)touchesMoved:(id)moved point:(CGPoint*)point;
-(void)touchesEnded:(id)ended point:(CGPoint*)point;
-(void)updateCandItem;
-(void)drawFrame:(CGContextRef)frame frame:(XXStruct_2H8njB*)frame2;
-(void)drawBackground:(CGContextRef)background;
-(void)drawBackground:(CGContextRef)background index:(short)index rect:(CGRect)rect active:(BOOL)active;
-(void)drawCandItem:(CGContextRef)item;
-(CGRect)spreadButtonRect;
-(BOOL)isSpreadButton:(CGPoint)button;
@end

@interface QIMCandidate2Singleline : QIMCandidate {
	QIMCandidateButton* button_;
}
@property(assign, nonatomic) QIMCandidateButton* button;
-(id)init;
-(void)dealloc;
-(id)convertStringToAccessibilityLabel:(id)accessibilityLabel;
-(void)updateAccessibleElements;
-(BOOL)isAccessibilityElement;
-(int)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(int)index;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
@end

@interface QIMCandidateButton : QIMControl {
	struct {
		unsigned buttonType : 8;
		unsigned display : 1;
		unsigned action : 8;
		unsigned active : 1;
	} buttonFlags_;
	int buttonType;
	BOOL active;
	BOOL display;
}
@property(readonly, assign, nonatomic) int buttonType;
@property(assign, nonatomic) BOOL active;
@property(assign, nonatomic) BOOL display;
+(id)buttonWithType:(int)type;
-(void)update;
-(void)drawInContext:(CGContextRef)context;
-(void)setButtonType:(int)type;
-(void)drawSpread:(CGContextRef)spread type:(int)type;
-(void)drawCancel:(CGContextRef)cancel;
-(void)drawMode:(CGContextRef)mode;
-(void)drawBacktrack:(CGContextRef)backtrack;
-(void)drawNextPage:(CGContextRef)page;
-(void)drawPrevPage:(CGContextRef)page;
@end

@interface QIMCandidateCell : QIMCandidate {
	struct {
		unsigned last : 1;
		unsigned leftMargin : 4;
	} flags_;
}
-(id)init;
-(void)dealloc;
-(CGSize)updateCandItem;
-(void)redraw;
-(unsigned)itemCount;
-(id)cellItemForIndex:(unsigned)index;
-(void)update;
-(void)drawInContext:(CGContextRef)context;
-(void)drawItem:(id)item text:(const XXStruct_3rHmjD*)text background:(const XXStruct_c9RIqA*)background;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(id)convertStringToAccessibilityLabel:(id)accessibilityLabel;
-(void)updateAccessibleElements;
-(BOOL)isAccessibilityElement;
-(int)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(int)index;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
-(void)setLastCandItemTotal;
@end

@interface QIMCandidateController : NSObject <QIMCandidateDelegate> {
	QIMCandidate* candidate1_;
	QIMCandidate* candidate2_;
	EctFragmentation candidate1InterfaceIdiom_;
	EctFragmentation candidate2InterfaceIdiom_;
	QIMCandidate1Singleline* singlelineCandidate1_;
	QIMCandidate1Multiline* multilineCandidate1_;
	QIMCandidate2Singleline* singlelineCandidate2_;
	QIMCandidate2Multiline* multilineCandidate2_;
	QIMCandidateBarBackgroundView* candidateBarBackgroundView_;
	int candidate1Mode_;
}
@property(assign, nonatomic) EctFragmentation candidate1InterfaceIdiom;
@property(assign, nonatomic) EctFragmentation candidate2InterfaceIdiom;
@property(readonly, assign, nonatomic) QIMCandidate* candidate1;
@property(readonly, assign, nonatomic) QIMCandidate* candidate2;
@property(readonly, assign, nonatomic) int candidate1Mode;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(void)dealloc;
-(void)switchCandidate1Mode:(int)mode;
-(void)switchCandidate2Mode:(int)mode;
-(void)setVisible:(unsigned)visible visible:(BOOL)visible2;
-(void)reset;
-(void)orientationChanged;
-(void)update:(unsigned)update;
-(void)moveToNextItem;
-(void)moveToPrevItem;
-(void)candidate:(id)candidate selectedItemIndex:(unsigned)index;
-(void)loadCandidate:(unsigned)candidate mode:(int)mode;
-(void)unloadCandidate:(unsigned)candidate mode:(int)mode;
-(void)loadCandidate1WithMode:(int)mode;
-(void)loadCandidate2WithMode:(int)mode;
-(void)unloadCandidate1WithMode:(int)mode;
-(void)unloadCandidate2WithMode:(int)mode;
-(void)unloadCandidate;
-(void)releaseCandidate;
@end

@interface QIMFixedCandidatePadView : QIMCandidateFixedView {
}
@end

@interface QIMFixedCandidatePhoneView : QIMCandidateFixedView {
	float startY_;
}
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
@end

@interface QIMCandidateFixedView : QIMCandidate1Singleline {
	QIMComposition* composition_;
}
-(id)init;
-(void)dealloc;
-(void)update;
@end

@interface QIMInlineCandidatePadView : QIMCandidateInlineView {
}
@end

@interface QIMInlineCandidatePhoneView : QIMCandidateInlineView {
}
@end

@interface QIMCandidateInlineView : QIMCandidate1Singleline {
}
-(id)init;
-(void)dealloc;
-(void)update;
@end

@interface QIMCompositionMultiline : QIMComposition {
	unsigned shadowBlur_;
}
@property(readonly, assign, nonatomic) unsigned shadowBlur;
-(id)init;
-(void)dealloc;
-(CGSize)update;
-(void)drawInContext:(CGContextRef)context;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(id)convertStringToAccessibilityLabel:(id)accessibilityLabel;
-(void)updateAccessibleElements;
-(BOOL)isAccessibilityElement;
-(int)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(int)index;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
@end

@interface QIMComposition : UILabel <QIMAccessibilityProtocol> {
	id delegate_;
	struct {
		unsigned topMargin : 4;
		unsigned leftMargin : 4;
		unsigned landscape : 1;
		unsigned updateAccessibilityElements : 1;
	} compositionFlags_;
	NSMutableArray* accessibilityElements;
}
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) NSMutableArray* accessibilityElements;
-(id)init;
-(void)dealloc;
-(id)convertWildcardCharacter:(id)character;
-(CGSize)update;
-(void)drawInContext:(CGContextRef)context;
-(void)drawRect:(CGRect)rect;
@end

@interface QIMControl : QIMView {
	id target_;
	SEL action_;
	unsigned event_;
}
-(void)addTarget:(id)target action:(SEL)action controlEvent:(unsigned)event;
@end

@interface QIMDispatcher : NSObject {
	QIMLoader* loader_;
}
@property(assign, nonatomic) QIMLoader* loader;
+(id)mainDispatcher;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(void)handleSymbolString:(id)string;
-(void)handleInputString:(id)string;
-(void)handleString:(id)string;
-(void)handleString:(id)string click:(int)click;
-(void)handleCandidateSelected:(unsigned)selected selectedIndex:(unsigned)index;
-(void)handleCandidateMode:(unsigned)mode;
-(void)handleCandidateUpdate:(unsigned)update;
-(void)handleCandidateHotspot:(unsigned)hotspot type:(unsigned)type;
-(void)handleInlineString:(id)string;
-(void)handleConvertWildcardCharacter:(id*)character;
-(void)handleKeyEvent:(unsigned)event;
-(void)handleHandWriteTrack:(unsigned short*)track trackCount:(unsigned)count;
-(void)handleToolTips:(CGRect*)tips text:(id)text index:(unsigned)index;
-(void)handleInputSwitcherInView:(id)view;
-(void)handleInputSwitcherUpdateSelectionInView:(id)view point:(CGPoint*)point;
-(void)handleInputSwitcherSelected:(CGPoint*)selected;
-(void)handleSwitchKey;
-(BOOL)handleFunctionKey:(unsigned)key;
-(BOOL)handleInputKeyWithInputString:(id)inputString;
-(BOOL)isSymbolKey:(id)key;
-(BOOL)isEngineRequiredSymbolForEnglish:(id)english;
-(void)commitStringForEnglish:(id)english;
-(void)commitCandidate;
-(void)updateCandidate;
-(void)setMarkedText:(id)text;
-(BOOL)isPairSymbol:(id)symbol;
@end

@interface QIMError : NSObject {
	unsigned code_;
	NSString* domain_;
}
@property(readonly, assign, nonatomic) unsigned code;
@property(readonly, retain, nonatomic) NSString* domain;
+(id)errorWithCode:(unsigned)code domain:(id)domain;
-(id)initWithCode:(unsigned)code domain:(id)domain;
-(void)dealloc;
@end

@interface QIMHandWriteView : QIMView {
	unsigned trackTotal_;
	unsigned short* trackData_;
	NSTimer* touchesEndedTimer_;
	NSTimer* commitCandItemTimer_;
	id<QIMHandWriteViewDelegate> delegate;
}
@property(assign, nonatomic) id<QIMHandWriteViewDelegate> delegate;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)show;
-(void)hide;
-(void)reset;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)drawInContext:(CGContextRef)context;
-(void)setStrokeStyle:(CGContextRef)style;
-(void)drawTouchTracks:(CGContextRef)tracks;
-(void)saveToucheTrack:(CGPoint)track;
-(void)handleGestureRecognizer;
-(void)onTouchesEnded;
-(void)setTouchesEndedTimer;
-(void)killTouchesEndedTimer;
-(void)onCommitCandItem;
-(void)setCommitCandItemTimer;
-(void)killCommitCandItemTimer;
@end

@interface QIMKBCapsKey : NSObject {
	void* lower_;
	void* initial_;
	void* upper_;
	QIMLoader* loader_;
}
@property(assign, nonatomic) void* lower;
@property(assign, nonatomic) void* initial;
@property(assign, nonatomic) void* upper;
-(id)init;
-(void)update;
-(void)showLower;
-(void)showInit;
-(void)showUpper;
@end

@interface QIMKBReturnKey : NSObject {
	void* normal_;
	void* active_;
	void* disable_;
	QIMLoader* loader_;
}
@property(assign, nonatomic) void* normal;
@property(assign, nonatomic) void* active;
@property(assign, nonatomic) void* disable;
-(id)init;
-(void)dealloc;
-(void)update;
-(BOOL)isShow;
-(void)hideAll;
-(void)showNormal;
-(void)showActive;
-(void)showDisable;
-(BOOL)isEnglishKeyboard;
@end

@interface QIMKeyboard : QIMView {
	QIMKeyboardView* keyboardView_;
	QIMKeyboardController* controller_;
}
@property(assign, nonatomic) QIMKeyboardController* controller;
-(void)changeRect:(CGRect)rect;
-(void)switchKeyboardWithTraits:(id)traits;
-(void)reset;
-(void)updateKeyboard;
-(void)updateCapsKeyAndReturnKey;
-(void)setScrollEnabled:(BOOL)enabled;
-(void)setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)displayName withType:(int)type;
-(void)setIndicatorVisible:(BOOL)visible animated:(BOOL)animated;
@end

@interface QIMKeyboardController : NSObject {
	QIMKeyboardDefault* defaultKeyboard_;
	QIMKeyboardSpecial* specialKeyboard_;
	QIMKeyboardSymbol* symbolKeyboard_;
	QIMKeyboard* keyboard_;
	CGRect keyboardBounds_;
	int keyboardScheme_;
	QIMKeyboardTraits* topKeyboardTraits_;
	int keyboardType_;
	struct {
		unsigned needReloadData : 1;
		unsigned needRelayout : 1;
		unsigned isCircleScroll : 1;
		unsigned ignorePageChangeOnScroll : 1;
	} flags_;
}
@property(readonly, assign, nonatomic) QIMKeyboardDefault* defaultKeyboard;
@property(readonly, assign, nonatomic) QIMKeyboardSpecial* specialKeyboard;
@property(readonly, assign, nonatomic) QIMKeyboardSymbol* symbolKeyboard;
@property(assign, nonatomic) int keyboardScheme;
@property(readonly, assign, nonatomic) int keyboardType;
@property(copy, nonatomic) QIMKeyboardTraits* topKeyboardTraits;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(id)init;
-(void)dealloc;
-(void)loadKeyboard;
-(void)unloadKeyboard;
-(void)reset;
-(void)updateKeyboard;
-(void)showDefaultKeyboard;
-(void)showKeyboardWithType:(int)type inRect:(CGRect)rect;
-(void)showKeyboardWithTraits:(id)traits;
-(void)setScrollEnabled:(BOOL)enabled;
-(void)setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)displayName withType:(int)type;
-(void)showKeyboard:(id)keyboard;
-(void)setReturnKey;
-(id)returnKeyDisplayName;
-(BOOL)isDefaultKeyboard:(id)keyboard;
@end

@interface QIMKeyboardDefault : QIMKeyboard <QIMScrollViewControllerDelegate, QIMHandWriteViewDelegate> {
	QIMScrollViewController* scrollViewController_;
	int keyboardScheme_;
	NSTimer* displayHandWirteViewTimer_;
	NSTimer* hideHandWriteHintViewTimer_;
	QIMHandWriteView* handWriteView_left_;
	QIMPromptControl* promptView_;
	QIMPromptControl* handWriteGesture_;
}
-(id)init;
-(void)dealloc;
-(void)initScrollKeyboard;
-(void)initSingleKeyboard;
-(void)showHandWriteGesturePrompt:(unsigned)prompt;
-(void)changeRect:(CGRect)rect;
-(void)reset;
-(void)setScrollEnabled:(BOOL)enabled;
-(void)setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)displayName withType:(int)type;
-(BOOL)scrollViewIsDragging;
-(BOOL)scrollViewIsDecelerating;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewControllerDidLoadView:(id)scrollViewController page:(unsigned)page;
-(void)loadKeyboardWithPage:(int)page;
-(void)switchKeyboardWithView:(id)view;
-(id)currentPageView;
-(void)initHandWriteView;
-(void)releaseHandWriteView;
-(void)onDisplayHandWriteView;
-(void)setDisplayHandWriteViewTimer;
-(void)killDisplayHandWirteViewTimer;
-(void)beganStroke:(id)stroke;
-(void)processHandWriteTrack:(unsigned short*)track trackCount:(unsigned)count;
-(void)commitFirstCandItem;
-(void)commitCandItem;
@end

@interface QIMKeyboardIndicatorView : QIMView {
	unsigned methodId_;
	unsigned locked_ : 1;
}
@property(assign, nonatomic) unsigned methodId;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)setVisible:(BOOL)visible animated:(BOOL)animated;
-(void)changeRect:(CGRect)rect;
-(void)drawInContext:(CGContextRef)context;
-(void)setShowTimer;
-(void)setHideTimer;
-(void)onShow;
-(void)onHide;
-(void)lock;
-(void)unlock;
@end

@interface QIMKeyboardSpecial : QIMKeyboard {
}
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)changeRect:(CGRect)rect;
@end

@interface QIMKeyboardSymbol : QIMKeyboard <QIMScrollViewControllerDelegate, QIMSymbolDelegate> {
	QIMScrollViewController* scrollViewController_;
	QIMSymbolBar* symbolBar_;
	int currentCateIndex_;
	int currentCatePage_;
	struct {
		unsigned row : 8;
		unsigned col : 8;
	} flags_;
}
-(id)init;
-(void)dealloc;
-(void)changeRect:(CGRect)rect;
-(void)switchKeyboardWithTraits:(id)traits;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewControllerDidLoadView:(id)scrollViewController page:(unsigned)page;
-(void)symbolItemDidSelected:(id)symbolItem selectedItem:(id)item;
-(void)symbolBarDidSwitchCate:(id)symbolBar switchCateWithIndex:(unsigned char)index;
-(void)loadKeyboardWithPage:(int)page;
-(CGRect)symbolViewRect;
-(id)currentPageView;
-(unsigned)symbolColNum;
@end

@interface QIMKeyboardTraits : NSObject <NSCopying> {
@private
	unsigned methodId_;
	unsigned category_;
}
@property(assign, nonatomic) unsigned methodId;
@property(assign, nonatomic) unsigned category;
+(id)keyboardTraits;
-(id)init;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface QIMKeyboardView : QIMView <QIMAccessibilityProtocol> {
	void* keyboard_;
	struct {
		unsigned needsRenovate : 1;
		unsigned holdPress : 1;
		unsigned holdPressEditState : 1;
		unsigned holdPressIdleState : 1;
		unsigned holdPressToolTipsState : 1;
		unsigned inputSwitcherState : 1;
		unsigned capsKeyInvalid : 1;
		unsigned touchesShouldBegin : 1;
		unsigned touchesMovedLeft : 1;
		unsigned updateAccessibilityElements : 1;
	} flags_;
	NSTimer* holdPressTimer_;
	NSTimer* repeatTimer_;
	NSMutableArray* idleKeys_;
	NSMutableArray* editKeys_;
	QIMKBReturnKey* returnKey_;
	QIMKBCapsKey* capsKey_;
	CGPoint beganPoint_;
	QIMKeyboardIndicatorView* indicatorView_;
	QIMLoader* loader_;
	int saveInputState_;
	NSMutableArray* accessibilityElements;
	BOOL touchesShouldBegin;
	BOOL touchesMovedLeft;
}
@property(readonly, assign, nonatomic) void* keyboard;
@property(readonly, assign, nonatomic) QIMKBReturnKey* returnKey;
@property(readonly, assign, nonatomic) QIMKBCapsKey* capsKey;
@property(readonly, assign, nonatomic) QIMKeyboardIndicatorView* indicatorView;
@property(assign, nonatomic) NSMutableArray* accessibilityElements;
@property(assign, nonatomic) BOOL touchesShouldBegin;
@property(readonly, assign, nonatomic) BOOL touchesMovedLeft;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)setTouchesMovedLeft:(BOOL)left;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)setKeyboardTraits:(id)traits;
-(id)keyboardTraits;
-(void)changeRect:(CGRect)rect;
-(void)orientationChanged;
-(void)setNeedsRenovate;
-(void)setNeedsDisplayKeys;
-(void)updateCapsKeyAndReturnKey;
-(CGRect)handWriteArea;
-(id)convertStringToAccessibilityLabel:(id)accessibilityLabel;
-(void)updateAccessibleElements;
-(BOOL)isAccessibilityElement;
-(int)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(int)index;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
-(void*)getKey:(id)key;
-(CGRect)getKeyRect:(CGPoint*)rect;
-(id)getKeyNormalString;
-(id)getKeyTopString;
-(void)addIdleKeys;
-(void)addEditKeys;
-(void)setHoldPressTimer;
-(void)setRepeatTimer;
-(void)killTimer;
-(void)handleRepeats;
-(BOOL)showHoldPressToolTips:(CGPoint*)tips;
-(void)hideToolTips;
-(CGRect)getIndicatorRect;
-(CGRect)getSwitchInputIconRect;
-(void)addIndicatorView:(id)view;
-(id)addAccessoryView;
-(void)playSystemSound;
@end

@interface QIMKeyboardNeedsDisplayRect : NSObject {
	CGRect needsDisplayRect_;
}
@property(assign, nonatomic) CGRect needsDisplayRect;
+(id)needsDisplayRect;
@end

@interface QIMKeyboardStateKey : NSObject {
	void* key_;
}
@property(assign, nonatomic) void* key;
+(id)stateKey;
@end

@interface QIMKeyConverter : NSObject {
	unsigned type_;
	unsigned value_;
	QIMKeyboardTraits* traits_;
	NSMutableDictionary* keyType_;
	NSMutableDictionary* keyFunction_;
	NSMutableDictionary* keyboardCategory_;
	NSMutableDictionary* keyboardInputMethod_;
}
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, assign, nonatomic) unsigned value;
@property(readonly, retain, nonatomic) QIMKeyboardTraits* traits;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releasSharedInstance;
-(void)dealloc;
-(void)initConvertItems;
-(id)convert:(id)convert;
-(int)convertToVk:(id)vk;
@end

@interface QIMLoader : NSObject {
	QIMKeyboardImpl* keyboardImpl_;
	QIMEngine* inputEngine_;
	QIMUIPainter* painter_;
	QIMPreferences* preferences_;
	QIMKeyConverter* keyConverter_;
	QIMKeyboardController* keyboardController_;
	QIMCandidateController* candidateController_;
	QIMDispatcher* dispatcher_;
	QIMSkinImpl* skinImpl_;
	QIMStatus* status_;
	QIMToolTips* toolTips_;
	QIMHoldPressToolTips* holdPressToolTips_;
	QIMSkinCustomData* skinCustomData_;
}
@property(readonly, assign, nonatomic) QIMKeyboardImpl* keyboardImpl;
@property(readonly, assign, nonatomic) QIMEngine* inputEngine;
@property(readonly, assign, nonatomic) QIMUIPainter* painter;
@property(readonly, assign, nonatomic) QIMPreferences* preferences;
@property(readonly, assign, nonatomic) QIMKeyConverter* keyConverter;
@property(readonly, assign, nonatomic) QIMKeyboardController* keyboardController;
@property(readonly, assign, nonatomic) QIMCandidateController* candidateController;
@property(readonly, assign, nonatomic) QIMDispatcher* dispatcher;
@property(readonly, assign, nonatomic) QIMSkinImpl* skinImpl;
@property(readonly, assign, nonatomic) QIMStatus* status;
@property(readonly, assign, nonatomic) QIMToolTips* toolTips;
@property(readonly, assign, nonatomic) QIMHoldPressToolTips* holdPressToolTips;
@property(readonly, assign, nonatomic) QIMSkinCustomData* skinCustomData;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
+(BOOL)setNeedsReload:(BOOL)reload;
+(BOOL)needsReload;
-(void)preload:(id*)preload scheme:(int)scheme;
-(void)reloadPreferences;
-(void)reloadInputEngine;
-(void)initInstances;
-(void)releaseInstances;
@end

@interface QIMNotificationCenter : NSObject {
}
+(void)notificationCenterDeviceOrientationDidChange:(id)notificationCenterDeviceOrientation selector:(SEL)selector;
+(void)notificationCenterRemoveDeviceOrientationDidChange:(id)notificationCenterRemoveDeviceOrientation;
+(void)notificationCenterKeyboardDidShow:(id)notificationCenterKeyboard selector:(SEL)selector;
+(void)notificationCenterRemoveKeyboardDidShow:(id)notificationCenterRemoveKeyboard;
+(void)notificationCenterKeyboardWillShow:(id)notificationCenterKeyboard selector:(SEL)selector;
+(void)notificationCenterRemoveKeyboardWillShow:(id)notificationCenterRemoveKeyboard;
+(void)notificationCenterKeyboardWillHide:(id)notificationCenterKeyboard selector:(SEL)selector;
+(void)notificationCenterRemoveKeyboardWillHide:(id)notificationCenterRemoveKeyboard;
+(void)notificationCenterApplicationWillTerminate:(id)notificationCenterApplication selector:(SEL)selector;
+(void)notificationCenterRemoveApplicationWillTerminate:(id)notificationCenterRemoveApplication;
+(void)notificationCenterApplicationDidEnterBackground:(id)notificationCenterApplication selector:(SEL)selector;
+(void)notificationCenterRemoveApplicationDidEnterBackground:(id)notificationCenterRemoveApplication;
+(void)notificationCenterApplicationWillEnterForeground:(id)notificationCenterApplication selector:(SEL)selector;
+(void)notificationCenterRemoveApplicationWillEnterForeground:(id)notificationCenterRemoveApplication;
+(void)notificationCenterShowHandWriteGesturePrompt:(id)prompt selector:(SEL)selector;
+(void)notificationCenterRemoveShowHandWriteGesturePrompt:(id)prompt;
+(void)notificationCenterNetworkReachabilityChanged:(id)changed selector:(SEL)selector;
+(void)notificationCenterRemoveNetworkReachabilityChanged:(id)changed;
+(void)notificationCenterKeyboardWillChangeFrame:(id)notificationCenterKeyboard selector:(SEL)selector;
+(void)notificationCenterRemoveKeyboardWillChangeFrame:(id)notificationCenterRemoveKeyboard;
+(void)notificationCenterPostKeyboardWillChangeFrame:(CGRect)notificationCenterPostKeyboard;
@end

@interface QIMPageControl : QIMView {
@private
	int currentPage_;
	int displayedPage_;
	struct {
		unsigned needReloadData : 1;
		unsigned needRelayout : 1;
		unsigned ignorePageChangeOnScroll : 1;
	} pageControlFlags_;
	CGSize indicatorSize_;
	int indicatorInterval_;
	int messageKbPageNum_;
@protected
	BOOL enabled;
	BOOL hidesForSinglePage;
	BOOL defersCurrentPageDisplay;
}
@property(assign, nonatomic) int numberOfPages;
@property(assign, nonatomic) int currentPage;
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) BOOL hidesForSinglePage;
@property(assign, nonatomic) BOOL defersCurrentPageDisplay;
@property(assign, nonatomic) CGSize indicatorSize;
@property(assign, nonatomic) int indicatorInterval;
@property(assign, nonatomic) int messageKbPageNum;
-(id)init;
-(void)dealloc;
-(void)updateCurrentPageDisplay;
-(CGSize)sizeForNumberOfPages:(int)pages;
-(void)setVisible:(BOOL)visible animated:(BOOL)animated;
-(void)orientationChanged;
-(void)drawInContext:(CGContextRef)context;
@end

@interface QIMPreferences : NSObject {
	NSMutableArray* enabledKeyboard_;
	NSMutableArray* enabledFuzzy_;
	struct {
		unsigned contentHandWrite : 1;
		unsigned assn : 1;
		unsigned assnSpaceSubmit : 1;
		unsigned autoCorrection : 1;
		unsigned candFloat : 1;
		unsigned candStyle : 2;
		unsigned candAlpha : 8;
		unsigned clicks : 1;
		unsigned enAddSpace : 1;
		unsigned enSuggestion : 1;
		unsigned sc2tc : 4;
		unsigned sentenceInput : 1;
		unsigned vibrate : 1;
		unsigned wb4Code : 1;
		unsigned wb5Code : 1;
		unsigned wbPinyin : 1;
		unsigned shuangpin : 4;
		unsigned slideSwitch : 1;
		unsigned zhEnMix : 1;
	} flags_;
	unsigned systemVersion;
	NSString* systemName;
	int userInterfaceIdiom;
	BOOL contentHandWrite;
	BOOL showToolTips;
	BOOL shadowReverse;
	BOOL assn;
	BOOL assnSpaceSubmit;
	BOOL autoCorrection;
	BOOL candFloat;
	unsigned char candStyle;
	unsigned char candAlpha;
	BOOL clicks;
	BOOL enAddSpace;
	BOOL enSuggestion;
	unsigned char sc2tc;
	BOOL sentenceInput;
	BOOL vibrate;
	BOOL wb4Code;
	BOOL wb5Code;
	BOOL wbPinyin;
	BOOL shuangpin;
	BOOL slideSwitch;
	BOOL zhEnMix;
}
@property(readonly, assign, nonatomic) NSMutableArray* enabledKeyboard;
@property(readonly, assign, nonatomic) NSMutableArray* enabledFuzzy;
@property(readonly, assign, nonatomic) unsigned systemVersion;
@property(readonly, assign, nonatomic) NSString* systemName;
@property(readonly, assign, nonatomic) int userInterfaceIdiom;
@property(readonly, assign, nonatomic) BOOL contentHandWrite;
@property(readonly, assign, nonatomic) BOOL showToolTips;
@property(readonly, assign, nonatomic) BOOL shadowReverse;
@property(readonly, assign, nonatomic) BOOL assn;
@property(readonly, assign, nonatomic) BOOL assnSpaceSubmit;
@property(readonly, assign, nonatomic) BOOL autoCorrection;
@property(readonly, assign, nonatomic) BOOL candFloat;
@property(readonly, assign, nonatomic) unsigned char candStyle;
@property(readonly, assign, nonatomic) unsigned char candAlpha;
@property(readonly, assign, nonatomic) BOOL clicks;
@property(readonly, assign, nonatomic) BOOL enAddSpace;
@property(readonly, assign, nonatomic) BOOL enSuggestion;
@property(readonly, assign, nonatomic) unsigned char sc2tc;
@property(readonly, assign, nonatomic) BOOL sentenceInput;
@property(readonly, assign, nonatomic) BOOL vibrate;
@property(readonly, assign, nonatomic) BOOL wb4Code;
@property(readonly, assign, nonatomic) BOOL wb5Code;
@property(readonly, assign, nonatomic) BOOL wbPinyin;
@property(readonly, assign, nonatomic) BOOL shuangpin;
@property(readonly, assign, nonatomic) BOOL slideSwitch;
@property(readonly, assign, nonatomic) BOOL zhEnMix;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(id)init;
-(void)dealloc;
-(unsigned)defaultSkin;
-(id)preferences;
-(void)loadPreferences;
-(id)loadOptions:(id)options;
-(id)loadEnabledKeyboard:(id)keyboard;
-(id)loadFuzzySetting:(id)setting;
-(BOOL)isEqualToVersion:(unsigned*)version;
@end

@interface QIMPromptControl : QIMView {
	int type_;
	NSTimer* timer_;
	NSString* handWriteGesture_;
	UILabel* hintText_;
}
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* handWriteGesture;
-(id)initWithControlType:(int)controlType;
-(void)dealloc;
-(void)showInView:(id)view inRect:(CGRect)rect;
-(void)hide;
-(void)stopAndRemoveFromSuperview;
-(void)drawRect:(CGRect)rect;
-(void)setShowTimer;
-(void)setHideTimer;
-(void)setRemoveTimer;
-(void)killTimer;
-(void)onShow;
-(void)onHide;
-(void)onRemove;
@end

@interface QIMScrollView : UIScrollView {
	QIMScrollViewController* scrollViewController_;
}
@property(assign, nonatomic) QIMScrollViewController* scrollViewController;
-(id)init;
-(void)dealloc;
-(BOOL)touchesShouldBegin:(id)touches withEvent:(id)event inContentView:(id)contentView;
-(BOOL)touchesShouldCancelInContentView:(id)touches;
@end

@interface QIMScrollViewController : NSObject {
	id delegate_;
	QIMScrollView* container_;
	QIMPageControl* pageControl_;
	NSMutableArray* contentItems_;
	BOOL beginDragging_;
}
@property(assign, nonatomic) id<QIMScrollViewControllerDelegate> delegate;
@property(readonly, assign, nonatomic) QIMScrollView* container;
@property(readonly, assign, nonatomic) QIMPageControl* pageControl;
@property(readonly, assign, nonatomic) NSMutableArray* contentItems;
@property(readonly, assign, nonatomic) BOOL beginDragging;
-(id)init;
-(void)dealloc;
-(void)setPageNum:(unsigned)num;
-(void)setContentSize:(CGSize)size;
-(void)setScrollEnabled:(BOOL)enabled;
-(void)addViewToContainer:(id)container pageNum:(unsigned)num;
-(void)changeContentWithViewsRect:(CGRect)viewsRect;
-(void)preloadPages;
-(unsigned)pageTotal;
-(int)currentPage;
@end

@interface QIMSkinImpl : NSObject {
	QIMSkinLoader* skinLoader_;
	CQSSetting* skinSetting_;
	QSMouseManager* skinMouseMgr_;
	QIMSkinCanvasInterface* skinCanvasInterface_;
	QIMSkinPlatformInterface* skinPlatformInterface_;
	QIMSkinMessageInterface* skinMessageInterface_;
	QIMSkinSpecialStroke* skinSpecialStroke_;
}
@property(readonly, assign, nonatomic) QIMSkinLoader* skinLoader;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(void)dealloc;
-(BOOL)loadSkinData;
-(void)unloadSkinData;
-(CQSKeyboard*)keyboardWithInputmethod:(unsigned)inputmethod type:(unsigned)type;
@end

@interface QIMStatus : NSObject {
	struct {
		unsigned keyboardWidth : 16;
		unsigned keyboardHeight : 16;
		unsigned screenWidth : 16;
		unsigned screenHeight : 16;
		unsigned symbolLock : 1;
		unsigned slideSwitchKeyboard : 1;
		unsigned holdPressInputFor26Key : 1;
		unsigned holdPressInputFor9Key : 1;
		unsigned capsKeyPressed : 1;
		unsigned capsKeyHoldPress : 1;
		unsigned capsKeyState : 4;
		unsigned returnKeyEnabled : 1;
		unsigned returnKeyType : 4;
		unsigned touchState : 4;
		unsigned allowCancellTouch : 1;
		unsigned multipleTouchCount : 4;
		unsigned englishPrompt : 1;
	} status_;
	float landscapeCandidatePosition_;
	float portraitCandidatePosition_;
	CGSize keyboardOffset_;
	unsigned candidateMode_;
	NSString* returnKeyText_;
	QIMKeyboardTraits* traits_;
	void* activeKey_;
	unsigned keyboardWidth;
	unsigned keyboardHeight;
	unsigned screenWidth;
	unsigned screenHeight;
	BOOL symbolLock;
	BOOL slideSwitchKeyboard;
	BOOL holdPressInputFor26Key;
	BOOL holdPressInputFor9Key;
	BOOL capsKeyPressed;
	BOOL capsKeyHoldPress;
	unsigned capsKeyState_;
	BOOL returnKeyEnabled;
	unsigned returnKeyType;
	int touchState_;
	unsigned multipleTouchCount;
	BOOL allowCancellTouch;
	BOOL orientationIsLandscape;
	BOOL englishPrompt;
}
@property(assign, nonatomic) unsigned keyboardWidth;
@property(assign, nonatomic) unsigned keyboardHeight;
@property(readonly, assign, nonatomic) unsigned screenWidth;
@property(readonly, assign, nonatomic) unsigned screenHeight;
@property(assign, nonatomic) BOOL symbolLock;
@property(assign, nonatomic) BOOL slideSwitchKeyboard;
@property(assign, nonatomic) BOOL holdPressInputFor26Key;
@property(assign, nonatomic) BOOL holdPressInputFor9Key;
@property(assign, nonatomic) BOOL capsKeyPressed;
@property(assign, nonatomic) BOOL capsKeyHoldPress;
@property(assign, nonatomic) unsigned capsKeyState;
@property(retain, nonatomic) NSString* returnKeyText;
@property(assign, nonatomic) BOOL returnKeyEnabled;
@property(assign, nonatomic) unsigned returnKeyType;
@property(assign, nonatomic) float landscapeCandidatePosition;
@property(assign, nonatomic) float portraitCandidatePosition;
@property(assign, nonatomic) CGSize keyboardOffset;
@property(assign, nonatomic) int touchState;
@property(assign, nonatomic) unsigned multipleTouchCount;
@property(assign, nonatomic) BOOL allowCancellTouch;
@property(copy, nonatomic) QIMKeyboardTraits* traits;
@property(readonly, assign, nonatomic) BOOL orientationIsLandscape;
@property(assign, nonatomic) void* activeKey;
@property(assign, nonatomic) BOOL englishPrompt;
@property(readonly, assign, nonatomic) CGSize screenSize;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstances;
-(id)init;
-(void)dealloc;
@end

@interface QIMSymbol : QIMView <QIMAccessibilityProtocol> {
	NSMutableArray* objects_;
	NSMutableArray* emojis_;
	unsigned hotspot_;
	id<QIMSymbolDelegate> delegate;
	NSMutableArray* accessibilityElements;
}
@property(assign, nonatomic) id<QIMSymbolDelegate> delegate;
@property(assign, nonatomic) unsigned hotspot;
@property(assign, nonatomic) NSMutableArray* accessibilityElements;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)update;
-(unsigned)itemIndexWithPoint:(const CGPoint*)point;
-(unsigned)itemHotspotWithPoint:(const CGPoint*)point;
-(id)itemStringWithPoint:(const CGPoint*)point;
-(id)convertToEmojiFromString:(id)string;
-(id)convertToEmojiFromIndex:(unsigned)index;
-(void)playClickSound;
@end

@interface QIMSymbolObject : NSObject {
	unsigned short* item_;
	unsigned char itemLen_;
	unsigned char index_;
	unsigned char hotspot_;
	CGRect rect_;
}
@property(assign, nonatomic) unsigned short* item;
@property(assign, nonatomic) unsigned char itemLen;
@property(assign, nonatomic) unsigned char index;
@property(assign, nonatomic) unsigned char hotspot;
@property(assign, nonatomic) CGRect rect;
@end

@interface QIMSymbolBar : QIMSymbol {
	unsigned char cateNumInPage_;
	unsigned char currentPage_;
	unsigned char activeCateIndex_;
	struct {
		unsigned moved : 1;
	} flags_;
}
@property(assign, nonatomic) unsigned char cateNumInPage;
@property(readonly, assign, nonatomic) unsigned char currentPage;
@property(assign, nonatomic) unsigned char activeCateIndex;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)orientationChanged;
-(void)update:(unsigned char)update;
-(void)reset;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)drawInContext:(CGContextRef)context;
-(void)selectCateItem:(CGPoint)item;
-(void)drawSplitLine:(CGContextRef)line rect:(CGRect)rect;
-(void)drawActiveBack:(CGContextRef)back rect:(CGRect)rect;
-(void)drawSelectedBack:(CGContextRef)back rect:(CGRect)rect;
-(void)drawText:(CGContextRef)text item:(id)item;
-(void)drawSwitchButton:(CGContextRef)button item:(id)item;
-(id)convertStringToAccessibilityLabel:(id)accessibilityLabel;
-(void)updateAccessibleElements;
-(BOOL)isAccessibilityElement;
-(int)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(int)index;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
@end

@interface QIMSymbolKernel : NSObject {
@private
	void* kernel_;
	void* kernel_impl_;
	void* interface_;
	struct {
		unsigned moved : 1;
	} flags_;
@protected
	BOOL initDone;
}
@property(readonly, assign, nonatomic) BOOL initDone;
-(id)initWithData:(id)data;
-(void)dealloc;
-(unsigned short)symbolPageTotal:(int)total rowNum:(unsigned char)num colNum:(unsigned char)num3;
-(unsigned char)catePageTotal:(unsigned char)total;
-(unsigned short)symbolTotal:(int)total;
-(unsigned char)cateTotal;
-(unsigned)symbolLenAtIndex:(unsigned)index cateIndex:(unsigned)index2;
-(unsigned)cateLenAtIndex:(unsigned)index;
-(unsigned short*)symbolAtIndex:(unsigned)index cateIndex:(unsigned)index2 symbolLen:(unsigned*)len;
-(unsigned short*)cateAtIndex:(unsigned)index cateLen:(unsigned*)len;
-(unsigned)indexOfSymbol:(id)symbol cateIndex:(unsigned)index;
-(unsigned)indexOfCate:(id)cate;
-(BOOL)initKernel:(id)kernel;
@end

@interface QIMSymbolView : QIMSymbol {
	unsigned char rowNum_;
	unsigned char colNum_;
	struct {
		unsigned hasWillLayoutSubviews : 1;
		unsigned hasDidLayoutSubviews : 1;
	} flags_;
}
@property(assign, nonatomic) unsigned char rowNum;
@property(assign, nonatomic) unsigned char colNum;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)update:(unsigned short)update cateIndex:(int)index;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)drawInContext:(CGContextRef)context;
-(void)setNeedsRenovate;
-(id)convertStringToAccessibilityLabel:(id)accessibilityLabel;
-(void)updateAccessibleElements;
-(BOOL)isAccessibilityElement;
-(int)accessibilityElementCount;
-(id)accessibilityElementAtIndex:(int)index;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
@end

@interface QIMHoldPressToolTips : QIMToolTips {
	NSDictionary* data_;
	NSMutableArray* items_;
	CGRect tipsFrame_;
	BOOL toLeft_;
	BOOL middle_;
	CGPoint touchMoved_;
	short selectedItemIndex_;
	short defaultSelectedItemIndex_;
}
@property(assign, nonatomic) CGRect tipsFrame;
-(id)init;
-(void)dealloc;
-(BOOL)update:(CGRect)update text:(id)text;
-(void)touchMoved:(const CGPoint*)moved;
-(void)touchEnded:(const CGPoint*)ended;
-(BOOL)setSizeWithString:(id)string;
-(void)drawInContext:(CGContextRef)context;
-(void)addArcs:(CGContextRef)arcs rect:(CGRect)rect;
-(void)drawItems:(CGContextRef)items rect:(CGRect)rect index:(unsigned short)index;
-(void)drawItemBackground:(CGContextRef)background rect:(CGRect)rect active:(BOOL)active;
@end

@interface QIMToolTips : QIMView {
	int index_;
	NSMutableString* text_;
	CGRect srcRect_;
	NSTimer* delayTimer_;
	QIMLoader* loader_;
	struct {
		unsigned tipsWidth : 16;
		unsigned tipsHeight : 16;
		unsigned shadowWidth : 16;
		unsigned fontSize : 16;
		unsigned itemInterval : 8;
		unsigned isLandscape : 1;
		unsigned isQwertyKeyboard : 1;
		unsigned isShow : 1;
		unsigned showSymbol : 1;
		unsigned lock : 1;
		unsigned delayRemove : 1;
		CGPoint textOffset;
		CGSize textMinSize;
		float shadowOffsetX_;
		float shadowOffsetY_;
	} tipsViewFlags_;
	BOOL showSymbol;
}
@property(assign, nonatomic) BOOL showSymbol;
@property(readonly, assign, nonatomic) CGRect buttonRect;
-(id)init;
-(void)dealloc;
-(void)show;
-(void)hide;
-(BOOL)update:(CGRect)update text:(id)text index:(int)index;
-(void)updateText:(id)text;
-(void)drawInContext:(CGContextRef)context;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(BOOL)isShowTips:(id)tips;
-(BOOL)setSizeWithString:(id)string;
-(void)addArcs:(CGContextRef)arcs rect:(CGRect)rect;
@end

@interface QIMTipsItem : NSObject {
	NSString* string_;
	CGRect rect_;
}
@property(retain, nonatomic) NSString* string;
@property(assign, nonatomic) CGRect rect;
-(void)dealloc;
@end

@interface QIMView : UIView {
	id delegate_;
}
@property(assign, nonatomic) id<QIMViewDelegate> delegate;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)changeRect:(CGRect)rect;
-(void)orientationChanged;
-(void)drawInContext:(CGContextRef)context;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
@end

@interface QIMDictPreferences : NSObject {
	NSMutableDictionary* preferences_;
	NSString* pinyinUserDictName_;
	NSString* latinUserDictName_;
}
@property(readonly, assign, nonatomic) NSString* pinyinUserDictName;
@property(readonly, assign, nonatomic) NSString* latinUserDictName;
+(id)defaultPreferences;
+(id)preferenceDictPathByName:(id)name;
+(id)getDictPathByDictName:(id)name;
-(id)init;
-(void)dealloc;
-(id)loadPinyinUserDict;
-(id)loadLatinUserDict;
-(id)loadPinyinSystemDict;
-(long long)pinyinSystemDictVersion;
-(id)loadLatinSystemDict;
-(long long)latinSystemDictVersion;
-(id)loadPinyinCateDict;
-(long long)pinyinCateDictVersion;
-(id)loadWubiCateDict;
-(long long)wubiCateDictVersion;
-(id)loadSymbolData;
-(id)loadSpecDict;
-(long long)specDictVersion;
-(id)loadMixTransDict;
-(long long)mixTransDictVersion;
-(id)loadHandWriteData;
-(long long)handWriteDataVersion;
-(id)loadAddressBookDict;
-(id)loadCategoryDict:(id)dict;
-(long long)indexXmlVersion;
-(BOOL)setIndexXmlVersion:(long long)version;
-(id)categoryDictArray;
-(BOOL)setCategoryDictArray:(id)array;
-(id)cateDictNameWithDictionary:(id)dictionary enabled:(BOOL*)enabled;
-(id)userDictPreferences;
-(unsigned)userDictSize;
-(id)systemDictPreferences;
-(id)txtDictName;
-(id)txtDictPath;
-(id)pinyinSystemDictName;
-(id)pinyinSystemDictPath;
-(id)latinSystemDictName;
-(id)latinSystemDictPath;
-(id)pinyinCateDictName;
-(id)pinyinCateDictPath;
-(id)wubiCateDictName;
-(id)wubiCateDictPath;
-(id)symbolDataName;
-(id)symbolDataPath;
-(id)specDictName;
-(id)specDictPath;
-(id)mixTransDictName;
-(id)mixTransDictPath;
-(id)handWriteDataName;
-(id)handWriteDataPath;
-(id)pinyinUserDictPath;
-(id)latinUserDictPath;
-(id)addressBookDictPreferences;
-(id)addressBookDictName;
-(id)addressBookDictFileName;
-(id)addressBookDictPath;
-(id)loadDataWithPath:(id)path;
-(id)dataDirectory;
@end

@interface QIMSkinPreferences : NSObject {
	NSMutableDictionary* preferences_;
	unsigned default_;
}
@property(readonly, assign, nonatomic) NSMutableDictionary* preferences;
@property(assign, nonatomic) unsigned defaultSkinNum;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
+(int)preferencesSkinTotal;
+(id)preferencesDefaultSkinPath;
-(void)loadPreferences;
-(void)unloadPreferences;
-(BOOL)savePreferences;
-(unsigned)skinTotal;
-(id)defaultSkinPath;
-(id)skinData;
@end

@interface QIMFileManager : NSObject {
}
+(BOOL)fileManagerFileExistsAtPath:(id)path;
+(BOOL)fileManagerCreateFileWithSize:(id)size size:(unsigned)size2;
+(BOOL)fileManagerCreateDirectory:(id)directory;
+(BOOL)fileManagerRemovefileWithPath:(id)path;
+(BOOL)fileManagerMoveFileFromPath:(id)path toPath:(id)path2;
+(BOOL)writeToBinaryFormatFile:(id)binaryFormatFile path:(id)path atomically:(BOOL)atomically;
+(id)readFromBinaryFormatFile:(id)binaryFormatFile format:(unsigned*)format;
+(void)appendDataToFile:(id)file data:(id)data;
+(id)fileManagerPath;
+(id)fileManagerLoad:(id)load;
+(id)fileManagerPreferencesDirectory;
+(id)fileManagerDataDirectory;
+(id)fileManagerSkinDirectory;
+(id)fileManagerInterfaceDirectory;
+(id)fileManagerImageDirectory;
+(id)fileManagerDocumentDirectory;
+(id)fileManagerLibraryDirectory;
+(id)fileManagerTempDirectory;
+(id)fileManagerPreferencesPath;
+(id)fileManagerTooltipsPreferencesPath;
+(id)fileManagerPromptPreferencesPath;
+(id)fileManagerDictPreferencesPath;
+(id)fileManagerPrivateDictPreferencesPath;
+(id)fileManagerSkinPreferencesPath;
+(id)fileManagerQQUserPreferencesPath;
+(id)fileManagerLoaderPreferencesPath;
@end

@interface QIMExtendString : NSObject {
}
+(unsigned)stringGetCharactersLength:(unsigned short*)length;
+(unsigned)stringGetCharactersWithString:(id)string characters:(unsigned short*)characters;
+(unsigned short*)stringGetCharactersWithString:(id)string;
+(id)stringWithCharacters:(unsigned short*)characters retain:(BOOL)retain;
@end

@interface QIMStringDrawing : NSObject {
}
+(void)drawInRect:(id)rect rect:(CGRect)rect2 offset:(CGSize)offset font:(id)font alignment:(int)alignment;
+(void)drawAtPoint:(id)point point:(CGPoint)point2 offset:(CGSize)offset font:(id)font;
@end

@interface QIMUIPainter : NSObject {
	CGContextRef context_;
	unsigned lineWidth_;
	unsigned strokeColor_;
	unsigned fillColor_;
	XXStruct_VlMhRC string_;
	XXStruct_1smS3C shadow_;
	UIEdgeInsets resize_;
	struct {
		unsigned needReloadData : 1;
		unsigned needRelayout : 1;
		unsigned ignorePageChangeOnScroll : 1;
	} flags_;
	BOOL strokeShadow;
	BOOL shadowReverse;
	BOOL gradientFromLeftToRight;
}
@property(assign, nonatomic) CGContextRef context;
@property(assign, nonatomic) unsigned lineWidth;
@property(assign, nonatomic) unsigned strokeColor;
@property(assign, nonatomic) unsigned fillColor;
@property(assign, nonatomic) XXStruct_VlMhRC string;
@property(assign, nonatomic) XXStruct_1smS3C shadow;
@property(assign, nonatomic) BOOL strokeShadow;
@property(assign, nonatomic) BOOL shadowReverse;
@property(assign, nonatomic) BOOL gradientFromLeftToRight;
@property(assign, nonatomic) UIEdgeInsets resize;
+(id)defaultUIPaint;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(CGColorRef)colorRef:(unsigned)ref;
-(void)strokeLineWithStart:(const CGPoint*)start end:(const CGPoint*)end;
-(void)strokeLines:(const CGPoint*)lines count:(unsigned long)count;
-(void)fillPath:(const CGPoint*)path count:(unsigned long)count;
-(void)fillPath:(const XXStruct_OzJQfB*)path;
-(void)strokeRect:(const CGRect*)rect;
-(void)fillRect:(const CGRect*)rect;
-(void)fillRect:(const CGRect*)rect active:(const XXStruct_xuEUqC*)active;
-(void)fillRect:(const CGRect*)rect normal:(const XXStruct_xuEUqC*)normal;
-(void)fillRect:(const CGRect*)rect fill:(const XXStruct_c9RIqA*)fill active:(BOOL)active;
-(void)fillRect:(const CGRect*)rect fill:(const XXStruct_OzJQfB*)fill radius:(float)radius;
-(void)fillRect:(const CGRect*)rect active:(const XXStruct_xuEUqC*)active round:(unsigned)round;
-(void)fillRect:(const CGRect*)rect normal:(const XXStruct_xuEUqC*)normal round:(unsigned)round;
-(void)fillRect:(const CGRect*)rect fill:(const XXStruct_c9RIqA*)fill active:(BOOL)active round:(unsigned)round;
-(void)fillRect:(const CGRect*)rect fill:(const XXStruct_OzJQfB*)fill radius:(float)radius round:(unsigned)round;
-(void)strokeShadow:(const CGRect*)shadow shadow:(XXStruct_k2ZiFA*)shadow2 radius:(float)radius;
-(void)strokeRoundRect:(const CGRect*)rect radius:(float)radius;
-(void)strokeRoundRect:(const CGRect*)rect radius:(float)radius round:(unsigned)round;
-(void)fillRoundRect:(const CGRect*)rect radius:(float)radius;
-(void)fillRoundRect:(const CGRect*)rect radius:(float)radius round:(unsigned)round;
-(void)fillGradientRect:(const CGRect*)rect colors:(unsigned*)colors colorNum:(unsigned)num locations:(unsigned*)locations;
-(void)fillGradientRect:(const CGRect*)rect colors:(unsigned*)colors colorNum:(unsigned)num locations:(unsigned*)locations radius:(float)radius;
-(void)fillGradientRect:(const CGRect*)rect colors:(id)colors locations:(id)locations;
-(void)fillGradientRect:(const CGRect*)rect colors:(id)colors locations:(id)locations radius:(float)radius;
-(void)fillGradientRect:(const CGRect*)rect colors:(id)colors locations:(id)locations radius:(float)radius round:(unsigned)round;
-(void)fillGradientRect:(const CGRect*)rect active:(const XXStruct_xuEUqC*)active;
-(void)fillGradientRect:(const CGRect*)rect normal:(const XXStruct_xuEUqC*)normal;
-(void)fillGradientRect:(const CGRect*)rect fill:(const XXStruct_c9RIqA*)fill active:(BOOL)active;
-(void)strokeEllipse:(const CGRect*)ellipse;
-(void)fillEllipse:(const CGRect*)ellipse;
-(void)drawTextAtPoint:(CGPoint)point text:(unsigned short*)text len:(unsigned)len;
-(void)drawTextInRect:(CGRect)rect text:(unsigned short*)text len:(unsigned)len align:(int)align;
-(void)drawTextAtPoint:(CGPoint)point text:(id)text;
-(void)drawTextInRect:(CGRect)rect text:(id)text align:(int)align;
-(void)drawImage:(CGRect)image image:(id)image2;
-(void)changeRectForFactorX:(CGRect*)factorX;
-(void)changeRectForFactorY:(CGRect*)factorY;
-(void)changePointForFactorX:(CGPoint*)factorX;
-(void)changePointForFactorY:(CGPoint*)factorY;
-(BOOL)addShadow:(CGContextRef)shadow;
@end

@interface QIMKeyboardImpl : UIView {
	id<UITextInputTraits> delegate_;
	id textInput_;
	CGSize candidateOffset_;
	QIMKeyboardLayout* keyboardLayout_;
	int orientation_;
	NSMutableDictionary* reuseAccessoryViews_;
	struct {
		unsigned hasWillLayoutSubviews : 1;
		unsigned hasDidLayoutSubviews : 1;
	} flags_;
}
@property(assign, nonatomic) id<UITextInputTraits> delegate;
@property(assign, nonatomic) id textInput;
@property(assign, nonatomic) CGSize candidateOffset;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(id)init;
-(void)dealloc;
-(void)releaseKeyboardLayout;
-(void)clearInput;
-(void)reloadTextInputView;
-(void)callReturnKeyPressed;
-(void)updateLayoutToCurrentInterfaceOrientation;
-(void)updateLayoutForOrientation:(int)orientation;
-(void)setLayoutOrientation:(int)orientation;
-(int)layoutOrientation;
-(id)accessoryViewForKeyboardId:(unsigned)keyboardId;
-(id)keyboardSuperwindow;
-(void)dismissKeyboard;
-(void)showKeyboard;
-(void)hideKeyboard;
-(BOOL)keyboardLayoutInitDone;
-(void)releaseEditingView;
-(void)keyboardImpl_addInputObject:(id)object;
-(void)keyboardImpl_deleteFromInput;
-(void)keyboardImpl_setMarkedText:(id)text;
-(void)keyboardImpl_setNextInputMode;
-(CGRect)keyboardImpl_getCaretRect;
-(void)keyboardImpl_updateReturnKey;
-(BOOL)keyboardImpl_returnKeyEnabled;
-(int)keyboardImpl_returnKeyType;
-(BOOL)keyboardImpl_isSecureTextEntry;
-(void)keyboardImpl_updateForChangedSelection;
-(void)keyboardImpl_prepareForSelectionChange;
-(BOOL)keyboardImpl_hasText;
-(void)keyboardImpl_updateKeyboardLayout;
-(void)keyboardImpl_moveBackward:(unsigned)backward;
-(void)keyboardImpl_moveForward:(unsigned)forward;
-(void)keyobardImpl_hideKeyboard;
-(void)keyobardImpl_showKeyobard;
-(void)keyboardImpl_dismissKeyboard;
-(BOOL)returnKeyEnabled;
-(int)returnKeyType;
-(void)updateReturnKey;
-(void)addInputObject:(id)object;
-(void)deleteFromInput;
-(void)moveBackward:(unsigned)backward;
-(void)moveForward:(unsigned)forward;
-(id)inputText;
-(BOOL)hasText;
-(void)handleInputString:(id)string;
-(void)releaseAccessoryViews;
@end

@interface QIMKeyboardLayout : UIView <QIMKeyboardLayoutProtocol> {
}
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)willMoveToWindow:(id)window;
-(id)activationIndicatorView;
-(BOOL)shouldShowIndicator;
-(void)showKeyboardType:(int)type withAppearance:(int)appearance;
-(void)setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)displayName withType:(int)type;
-(void)deactivateActiveKeys;
-(void)didClearInput;
@end

@interface QIMSuperWindow : NSObject {
	UIWindow* window_;
}
@property(assign, nonatomic) UIWindow* window;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
@end

@interface QIMTextInput : NSObject {
	id delegate_;
	id editingTextView_;
	struct {
		unsigned last : 1;
		unsigned leftMargin : 4;
	} flags_;
}
@property(assign, nonatomic) id<QIMTextInputDelegate> delegate;
@property(retain, nonatomic) id editingTextView;
@property(readonly, assign, nonatomic) UIWindow* superwindow;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(id)init;
-(void)dealloc;
-(void)updateKeyboardLayoutForOrientation:(int)orientation;
-(void)switchTextInput:(int)input;
-(void)clearInput;
-(void)setInputView:(BOOL)view;
-(unsigned)textViewType:(id)type;
-(CGRect)keyboardFrameByOrientation:(int)orientation;
@end

@interface QIMExtendTextInput : QIMTextInput <QIMDictManagerProtocol, QIMTextInputPreferencesProtocol, QIMCloudDataMgrProtocol> {
	QIMTextInputOptions* options_;
	id<QIMDictManagerDelegate> dictDelegate;
	id<QIMCloudDataMgrDelegate> cloudDataDelegate;
	NSArray* fuzzys;
	NSArray* keyboards;
}
@property(assign, nonatomic) id<QIMDictManagerDelegate> dictDelegate;
@property(assign, nonatomic) id<QIMCloudDataMgrDelegate> cloudDataDelegate;
@property(readonly, assign, nonatomic) NSArray* fuzzys;
@property(readonly, assign, nonatomic) NSArray* keyboards;
@property(readonly, assign, nonatomic) QIMTextInputOptions* options;
@property(assign, nonatomic) CGSize candidatePositionOffset;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(id)init;
-(void)dealloc;
-(void)importAddressbook;
-(void)asynchronousImportAddressbook;
-(BOOL)clearAddressbook;
-(void)importCategoryDict:(id)dict dictName:(id)name type:(unsigned)type;
-(void)importUserDict;
-(void)exportUserDict;
-(void)finish;
-(void)loadCloudDataWithType:(int)type;
-(int)checkUpadateForCloudData;
@end

@interface QIMTextInputOptions : NSObject {
@private
	struct {
		unsigned isFirstAppear : 1;
		unsigned firstTimeNeedUpdateData : 1;
		unsigned canShowWatermarkCellIndicator : 1;
		unsigned isVisible : 1;
		unsigned disableHideCategoryWhenScroll : 1;
		unsigned isAlbumEnable : 1;
		unsigned locationHintEnable : 1;
	} flags_;
@protected
	BOOL assn;
	BOOL assnStateSpaceSubmit;
	BOOL clicks;
	BOOL enAddSpace;
	unsigned char sc2tc;
	BOOL sentenceInput;
}
@property(assign, nonatomic) BOOL assn;
@property(assign, nonatomic) BOOL assnStateSpaceSubmit;
@property(assign, nonatomic) BOOL clicks;
@property(assign, nonatomic) BOOL enAddSpace;
@property(assign, nonatomic) unsigned char sc2tc;
@property(assign, nonatomic) BOOL sentenceInput;
@property(assign, nonatomic) BOOL textInput;
-(id)init;
-(void)dealloc;
-(id)preferences;
-(id)options:(id)options;
-(BOOL)writeToFile:(id)file;
@end

@interface QIMTextInputKeyboard : NSObject {
@private
	NSMutableString* name_;
	BOOL enabled_;
	BOOL initEnabled_;
	BOOL initIndex_;
	unsigned index_;
}
@property(readonly, assign, nonatomic) NSMutableString* name;
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) unsigned index;
-(id)init;
-(void)dealloc;
@end

@interface QIMTextInputFuzzy : NSObject {
@private
	NSMutableString* title_;
	BOOL enabled_;
	BOOL initEnabled_;
	unsigned index_;
}
@property(readonly, assign, nonatomic) NSMutableString* title;
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) unsigned index;
-(id)init;
-(void)dealloc;
@end

@interface QIMKeyboardLayoutView : QIMKeyboardLayout {
	QIMLoader* loader_;
	struct {
		unsigned isFirstAppear : 1;
		unsigned firstTimeNeedUpdateData : 1;
		unsigned canShowWatermarkCellIndicator : 1;
		unsigned isVisible : 1;
		unsigned disableHideCategoryWhenScroll : 1;
		unsigned isAlbumEnable : 1;
		unsigned locationHintEnable : 1;
	} flags_;
	CGSize keyboardSize_;
}
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)willMoveToWindow:(id)window;
-(void)drawRect:(CGRect)rect;
-(id)activationIndicatorView;
-(BOOL)shouldShowIndicator;
-(void)showKeyboardType:(int)type withAppearance:(int)appearance;
-(void)setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)displayName withType:(int)type;
-(void)didClearInput;
-(void)deviceOrientationDidChange;
-(void)keyboardDidShow;
-(void)keyboardWillShow:(id)keyboard;
-(void)applicationWillTerminate;
-(void)applicationDidEnterBackground;
-(void)applicationWillEnterForeground;
-(BOOL)loaderWorking;
-(void)loaderStop;
-(void)addNotificationObserver;
-(void)removeNotificationObserver;
-(void)hideSystemButton;
-(void)reloadKeyboardLayoutViews;
@end

@interface QIMDictManager : NSObject <QIMDictManagerProtocol> {
	struct {
		unsigned needReloadData : 1;
		unsigned needRelayout : 1;
		unsigned ignorePageChangeOnScroll : 1;
	} flags_;
	id<QIMDictManagerDelegate> dictDelegate;
}
@property(assign, nonatomic) id<QIMDictManagerDelegate> dictDelegate;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(id)init;
-(void)dealloc;
-(void)importAddressbook;
-(void)asynchronousImportAddressbook;
-(BOOL)clearAddressbook;
-(void)importCategoryDict:(id)dict dictName:(id)name type:(unsigned)type;
-(void)categoryDictAppend:(id)append;
-(void)importUserDict;
-(void)exportUserDict;
-(BOOL)clearUserDict;
-(void)displayUserDict:(unsigned)dict;
-(void)finish;
-(void)cancelOperation;
-(void)interfaceWithType:(int)type interface:(XXStruct_KpJhRD*)interface;
-(void)initDictMgrWithType:(int)type interface:(XXStruct_KpJhRD*)interface inInstance:(void*)instance outKernel:(void**)kernel;
-(void)terminateDictMgrWithType:(int)type interface:(XXStruct_KpJhRD*)interface kernel:(void*)kernel;
-(unsigned)segmentPhraseMaxNum:(id)num segment:(unsigned*)segment;
-(BOOL)clearDictWithType:(int)type interface:(XXStruct_KpJhRD*)interface data:(id)data path:(id)path kernel:(void*)kernel;
-(void)processError:(int)error;
-(id)loadAddressbook;
-(id)currentTime;
-(BOOL)dictConvertNotify:(unsigned)notify item:(id)item;
@end

@interface QIMEngine : NSObject {
	NSMutableDictionary* userDictObjects_;
	NSMutableArray* systemDictObjects_;
	NSMutableArray* cateDictObjects_;
	unsigned dictCount_;
	unsigned candidateMode_;
	QIMSymbolKernel* symbolKernel_;
	void* engine_;
	char* engineObject_;
	IM_CONTEXT* context_;
	IM_INTERFACE engineInterface_;
	IM_KERNEL_BLOCK dictList_[32];
	IM_OPTION* option;
	unsigned activeInputMethod;
	BOOL candidate1Hidden;
	BOOL candidate2Hidden;
	BOOL candModeIsWordPhrase;
}
@property(readonly, assign, nonatomic) IM_CONTEXT* context;
@property(readonly, assign, nonatomic) QIMSymbolKernel* symbolKernel;
@property(assign, nonatomic) unsigned candidateMode;
@property(assign, nonatomic) IM_OPTION* option;
@property(assign, nonatomic) unsigned activeInputMethod;
@property(readonly, assign, nonatomic) BOOL candidate1Hidden;
@property(readonly, assign, nonatomic) BOOL candidate2Hidden;
@property(readonly, assign, nonatomic) BOOL candModeIsWordPhrase;
@property(readonly, assign, nonatomic) int inputState;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(id)init;
-(void)dealloc;
-(BOOL)initInputEngine;
-(BOOL)saveUserDictToFile;
-(void)reloadUserDict;
-(BOOL)seekToBegin:(unsigned)begin;
-(BOOL)isLastItem:(unsigned)item;
-(unsigned)getNextItem:(unsigned)item phrase:(unsigned short*)phrase phraseLen:(unsigned short*)len phraseData:(unsigned short*)data dataLen:(unsigned short*)len5 extendString:(unsigned short*)string extendLen:(unsigned short*)len7 phraseInfo:(unsigned*)info;
-(unsigned)preItem:(unsigned)item;
-(unsigned)reset;
-(unsigned)getInputmethodList:(unsigned*)list len:(unsigned)len;
-(BOOL)isRequiredEvent:(unsigned)event withKey:(unsigned)key param1:(unsigned)a1 param2:(unsigned)a2;
-(unsigned)eventHandler:(unsigned)handler withKey:(unsigned)key param1:(unsigned)a1 param2:(unsigned)a2;
-(void)terminateInputEngine;
-(void)loadRequiredDict;
-(void)loadOptionalDict;
-(void)loadDictWithData:(id)data type:(unsigned)type;
-(void)addDictWithData:(id)data type:(unsigned)type;
-(void)addDictWithBytes:(const char*)bytes size:(unsigned)size type:(unsigned)type;
-(void)loadDictWithBytes:(const char*)bytes size:(unsigned)size type:(unsigned)type;
-(void)setOptions;
-(void)setFuzzys:(IM_OPTION*)fuzzys;
-(void)reloadUserDictOnNewThread;
@end

@interface QIMSkinCustomData : NSObject {
	QIMSkinLoader* skinLoader_;
	NSMutableArray* arrayObjects_;
	QIMSkinDataCandidate1* candidate1Singleline_;
	QIMSkinDataCandidate1* candidate1Multiline_;
	QIMSkinDataCandidate2* candidate2Singleline_;
	QIMSkinDataCandidate2* candidate2Multiline_;
	QIMSkinDataComposition* compositionSingleline_;
	QIMSkinDataComposition* compositionMultiline_;
	QIMSkinDataEnglishInlinePrompt* englishInlinePrompt_;
	QIMSkinDataSymbolTable* symbolTable_;
	QIMSkinDataSymbolTableToolBar* symbolTableToolBar_;
	QIMSkinDataPageControl* pageControl_;
	QIMSkinDataCustomButton* customButton_;
	QIMSkinDataTooltips* tooltips_;
	QIMSkinDataIndicator* indicator_;
	QIMSkinDataHandWritePanel* handwritePanel_;
	QIMSkinDataOperationPrompt* operationPrompt_;
}
@property(assign, nonatomic) QIMSkinLoader* skinLoader;
@property(readonly, assign, nonatomic) QIMSkinDataCandidate1* candidate1Singleline;
@property(readonly, assign, nonatomic) QIMSkinDataCandidate1* candidate1Multiline;
@property(readonly, assign, nonatomic) QIMSkinDataCandidate2* candidate2Singleline;
@property(readonly, assign, nonatomic) QIMSkinDataCandidate2* candidate2Multiline;
@property(readonly, assign, nonatomic) QIMSkinDataComposition* compositionSingleline;
@property(readonly, assign, nonatomic) QIMSkinDataComposition* compositionMultiline;
@property(readonly, assign, nonatomic) QIMSkinDataEnglishInlinePrompt* englishInlinePrompt;
@property(readonly, assign, nonatomic) QIMSkinDataSymbolTable* symbolTable;
@property(readonly, assign, nonatomic) QIMSkinDataSymbolTableToolBar* symbolToolTableToolBar;
@property(readonly, assign, nonatomic) QIMSkinDataPageControl* pageControl;
@property(readonly, assign, nonatomic) QIMSkinDataCustomButton* customButton;
@property(readonly, assign, nonatomic) QIMSkinDataTooltips* tooltips;
@property(readonly, assign, nonatomic) QIMSkinDataIndicator* indicator;
@property(readonly, assign, nonatomic) QIMSkinDataHandWritePanel* handwritePanel;
@property(readonly, assign, nonatomic) QIMSkinDataOperationPrompt* operationPrompt;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
+(XXStruct_L6BlQB)strokeWithDictionary:(id)dictionary;
-(id)init;
-(void)dealloc;
-(BOOL)loadCustomData;
-(BOOL)parseDataCandidate1;
-(BOOL)parseDataCandidate2;
-(BOOL)parseDataComposition;
-(BOOL)parseDataEnglishInlinePrompt;
-(BOOL)parseDataSymbolToolTableToolBar;
-(BOOL)parseDataSymbolTable;
-(BOOL)parseDataPageControl;
-(BOOL)parseDataCustomButton;
-(BOOL)parseDataTooltips;
-(BOOL)parseDataIndicator;
-(BOOL)parseDataHandwritePanel;
-(BOOL)parseDataOperationPrompt;
-(id)loadRenderPen:(IQSRender*)pen;
-(unsigned)loadRenderBrush:(IQSRender*)brush;
-(XXStruct_OzJQfB)loadRenderGradientBrush:(IQSRender*)brush;
@end

@interface QIMSkinLoader : NSObject {
	CQSKeyboardMgr* skinKeyboardMgr_;
	CQSPoolMgr* skinPoolMgr_;
	CQIMSkinParam* skinParam_;
	CQSCustomDataMgr* skinCustomDataMgr_;
}
@property(readonly, assign, nonatomic) CQSKeyboardMgr* skinKeyboardMgr;
@property(readonly, assign, nonatomic) CQSPoolMgr* skinPoolMgr;
@property(readonly, assign, nonatomic) CQIMSkinParam* skinParam;
@property(readonly, assign, nonatomic) CQSCustomDataMgr* skinCustomDataMgr;
+(id)sharedInstance;
+(void)releaseSharedInstance;
-(id)loadSkinData;
-(void)unloadSkinData;
@end

@interface QQInputCloudDataMgr : NSObject <QIMURLConnectionDelegate, QIMCloudDataMgrProtocol> {
	long long contentLength_;
	long long receiveDataLength_;
	NSMutableArray* downloadQueue_;
	unsigned dataType_;
	id<QIMCloudDataMgrDelegate> cloudDataDelegate;
}
@property(assign, nonatomic) id<QIMCloudDataMgrDelegate> cloudDataDelegate;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(id)init;
-(void)dealloc;
-(void)loadCloudDataWithType:(int)type;
-(int)checkUpadateForCloudData;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)makeRequest;
-(id)makeUrl;
-(id)downloadDictList;
-(void)loadCloudDataWithType:(int)type list:(id)list;
-(id)dictAttrib:(unsigned)attrib list:(id)list;
-(unsigned)dictId:(id)anId;
-(id)dictName:(id)name;
-(int)dictVersion:(id)version;
-(id)dictUrl:(id)url;
-(void)downloadDict;
@end

@interface QIMURLConnection : NSObject {
	id delegate_;
	NSURLConnection* connection_;
	NSString* url_;
	NSString* method_;
	NSMutableDictionary* request_;
	NSMutableDictionary* response_;
}
@property(assign, nonatomic) id<QIMURLConnectionDelegate> delegate;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* method;
@property(readonly, assign, nonatomic) NSMutableDictionary* request;
@property(readonly, assign, nonatomic) NSMutableDictionary* response;
+(id)sharedInstance;
+(id)activeInstance;
+(void)releaseSharedInstance;
-(id)init;
-(void)dealloc;
-(int)connection;
-(void)cancel;
-(id)sendSynchronousRequest:(id)request httpMethod:(id)method returningResponse:(id*)response error:(id*)error;
-(id)parseJSONData:(id)data;
-(id)makeJSONData:(id)data;
-(id)makeRequestWithHttpUrl:(id)httpUrl method:(id)method;
@end

@interface QIMCandidateBarBackgroundView : QIMCandidate1Singleline {
}
-(id)init;
-(void)dealloc;
-(CGSize)updateCandItem;
-(void)update;
-(void)drawInContext:(CGContextRef)context;
-(id)systemKeyboardCandidateBar;
@end

@interface CMatchedItem : NSObject {
	long long _lUin;
	NSData* _vSig;
}
@property(retain, nonatomic) NSData* vSig;
@property(assign, nonatomic) long long lUin;
-(void)dealloc;
-(id)init;
@end

@interface QQCardExchangeEngine : NSObject <IEngineDispatchDelegate> {
	id<ICardExchangeEngineDelegate> _Delegate;
	NSMutableDictionary* _seqDict;
	NSData* _vSelfSig;
	int _clientTime;
	int _eDirectionType;
	NSMutableDictionary* _seqInfo;
}
+(id)getInstance;
-(void)notifyLbsEndUpdateLocation:(id)location;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)responseConfirmContactFriend:(char*)aFriend dataLen:(int)len seq:(int)seq;
-(void)responseAddContactFriend:(char*)aFriend dataLen:(int)len seq:(int)seq;
-(void)handleRejectContactsFriendResult:(BOOL)result mobilePhone:(id)phone uin:(id)uin;
-(void)handleConfirmContactsFriendResult:(BOOL)result mobilePhone:(id)phone uin:(id)uin;
-(void)handleAddContactsFriendResult:(BOOL)result mobilePhone:(id)phone;
-(void)pushAddFriend:(char*)aFriend DataLen:(int)len;
-(int)parsePushAddFriend:(char*)aFriend DataLen:(int)len Response:(PushAddFriend*)response;
-(void)responseMatchFriends:(char*)friends DataLen:(int)len;
-(void)responseAddFriend:(char*)aFriend DataLen:(int)len;
-(void)requestConfirmContactFriend:(BOOL)aFriend uin:(long long)uin mobilePhoneStr:(id)str sig:(id)sig verifyContent:(id)content;
-(void)requestAddContactFriend:(id)aFriend verifyContent:(id)content;
-(void)requestMatchFriends:(int)friends lon:(int)lon alt:(int)alt accuracy:(double)accuracy clientTime:(int)time;
-(void)requestAddFriend:(id)aFriend;
-(int)parseMatchFriends:(char*)friends DataLen:(int)len Response:(RespMatchFriends*)response;
-(int)parseAddFriend:(char*)aFriend DataLen:(int)len Response:(RespAddFriend*)response;
-(int)parseHeader:(char*)header dataLen:(int)len resp:(RespHeader*)resp;
-(char*)getReqConfirmContactsFriendBuf:(BOOL)buf uin:(long long)uin mobilePhone:(long long)phone selfMobilePhone:(long long)phone4 selfUIN:(long long)uin5 selfPhoneCode:(id)code sig:(id)sig verifyContent:(id)content;
-(char*)getReqAddContactsFriendBuf:(long long)buf selfMobilePhone:(long long)phone selfUIN:(long long)uin selfPhoneCode:(id)code verifyContent:(id)content;
-(char*)getReqMatchFriendsBuffer:(long long)buffer lat:(int)lat lon:(int)lon alt:(int)alt clientTime:(int)time difference:(double)difference directionType:(int)type;
-(char*)getReqAddFriendBuffer:(long long)buffer MatchedItem:(MatchedItem*)item SelfSig:(vector<char, std::allocator<char> >*)sig AckAdd:(BOOL)add;
-(void)rejectContactFriend:(id)aFriend uin:(long long)uin sig:(id)sig respContent:(id)content;
-(void)confirmContactFriend:(id)aFriend uin:(long long)uin sig:(id)sig respContent:(id)content;
-(void)addContactFriend:(id)aFriend verifyContent:(id)content;
-(void)addFriend:(id)aFriend;
-(void)matchFriends:(int)friends;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface QCardExchangeModule : NSObject {
}
+(void)rejectContactFriend:(id)aFriend uin:(long long)uin sig:(id)sig respContent:(id)content;
+(void)confirmContactFriend:(id)aFriend uin:(long long)uin sig:(id)sig respContent:(id)content;
+(void)addContactFriend:(id)aFriend verifyContent:(id)content;
@end

@interface IMTimerWrapper : NSObject {
	NSTimer* __timer;
	TTimerCallBack* __callback;
}
@property(retain, nonatomic) NSTimer* __timer;
@property(assign, nonatomic) TTimerCallBack* __callback;
-(void)dealloc;
-(void)StopTimer;
-(void)StartTimer:(double)timer repeat:(bool)repeat callback:(TTimerCallBack*)callback;
-(void)timer_callback;
@end

@interface ConnectionItem : NSObject {
	NSURLConnection* connection;
	int tag;
	NSMutableData* responseData;
}
@property(retain, nonatomic) NSMutableData* responseData;
@property(retain, nonatomic) NSURLConnection* connection;
@property(assign, nonatomic) int tag;
+(id)connectionItemWithData:(id)data tag:(int)tag;
-(void)dealloc;
@end

@interface MSFHttpEngine : NSObject {
	NSMutableArray* _connectionPool;
	IHttpEngineObserver* _httpDelegate;
}
@property(assign, nonatomic) IHttpEngineObserver* httpDelegate;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didReceiveData:(id)data;
-(id)getSmartURLForString:(id)string;
-(id)getConnectionItemByTag:(int)tag;
-(id)getConnectionItemByConnection:(id)connection;
-(void)removeConnectionItemByConnection:(id)connection;
-(void)addConnectionItem:(id)item;
-(int)httpRequest:(id)request url:(id)url head:(id)head body:(id)body tag:(int)tag timeout:(int)timeout;
-(void)dealloc;
-(id)init;
@end

@interface MSFLogReporterParam : NSObject <NSCoding, NSCopying> {
	NSString* _appVersion;
	BOOL _isReportedAlready;
	int _connectSucceedViaWWAN;
	int _connectSucceedViaWIFI;
	int _connectFaildViaWWAN;
	int _connectFaildViaWIFI;
}
@property(assign, nonatomic) int connectFaildViaWIFI;
@property(assign, nonatomic) int connectFaildViaWWAN;
@property(assign, nonatomic) int connectSucceedViaWIFI;
@property(assign, nonatomic) int connectSucceedViaWWAN;
@property(assign, nonatomic) BOOL isReportedAlready;
@property(retain, nonatomic) NSString* appVersion;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface MSFLogReporter : NSObject {
	MSFLogReporterParam* _param;
	NSString* _currentAppVersion;
	NSTimer* delayReportTimer;
}
@property(retain, nonatomic) NSString* currentAppVersion;
@property(retain, nonatomic) MSFLogReporterParam* param;
+(id)instance;
-(void)tryReportOnNetSuccess:(int)success;
-(void)doReport;
-(void)tryReportOnNetFail:(int)fail;
-(void)saveparam;
-(void)loadParam;
-(void)dealloc;
-(id)init;
@end

@interface MSFNetworkRunloop : NSObject {
	NSThread* _thread;
	NSRunLoop* _loop;
}
@property(readonly, assign, nonatomic, getter=getThreadName) NSString* threadName;
@property(readonly, assign, nonatomic) NSRunLoop* loop;
@property(readonly, assign, nonatomic) NSThread* thread;
+(id)instance;
-(void)networkRunLoopThreadEntry;
-(void)start;
-(id)init;
@end

@interface MSFRDMParamPacker : NSObject {
@private
	NSMutableString* _str;
	NSMutableDictionary* _dict;
}
-(id)unpack:(id)unpack;
-(BOOL)getChar:(id)aChar pos:(int)pos nextPos:(int*)pos3;
-(id)getString:(id)string pos:(int)pos nextPos:(int*)pos3;
-(int)getInt:(id)int pos:(int)pos nextPos:(int*)pos3;
-(id)pack:(id)pack;
-(void)dealloc;
@end

@interface MSFRDMEvent : NSObject {
@private
	double _startTime;
	NSString* _eventName;
	int _connectReason;
}
@property(assign, nonatomic) int connectReason;
@property(retain, nonatomic) NSString* eventName;
@property(assign, nonatomic) double startTime;
-(void)dealloc;
@end

@interface MSFRDMTcpConnEvent : NSObject {
@private
	double _startTime;
	NSString* _startTimeStr;
	NSString* _ip;
	int _port;
	NSString* _netip;
	int _netport;
	int _sendPacketCnt;
	int _recvPacketCnt;
	int _timeoutPacketCnt;
	NSString* _firstTimeoutTimeStr;
	BOOL _isCookieOK;
}
@property(assign, nonatomic) BOOL isCookieOK;
@property(retain, nonatomic) NSString* firstTimeoutTimeStr;
@property(assign, nonatomic) int timeoutPacketCnt;
@property(assign, nonatomic) int recvPacketCnt;
@property(assign, nonatomic) int sendPacketCnt;
@property(assign, nonatomic) int netport;
@property(retain, nonatomic) NSString* netip;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* ip;
@property(retain, nonatomic) NSString* startTimeStr;
@property(assign, nonatomic) double startTime;
-(void)clear;
-(void)dealloc;
@end

@interface MSFRDMEventReporter : NSObject {
@private
	MSFRDMEvent* _selectAndConnectEvent;
	MSFRDMEvent* _regInTimeEvent;
	NSString* _regInTimeInfo;
	int _regInTimeFailCode;
	int _regInNetErrorCount;
	NSString* _regInTimeLoginTime;
	NSTimer* _regInTimeTimer;
	MSFRDMEvent* _connAndRecvEvent;
	NSTimer* _connAndRecvTimer;
	NSString* _connAndRecvInfo;
	int _connAndRecvFailCode;
	int _connAndRecvNetErrorCount;
	NSMutableArray* _reportCmds;
	NSMutableDictionary* _sendPacketDict;
	NSMutableDictionary* _recvPacketDict;
	int _netProblemRecordTime;
	int _netProblemFlag;
	double _netProblemStartTime;
	MSFRDMEvent* _httpConnEvent;
	MSFRDMTcpConnEvent* _tcpConnEvent;
}
@property(retain, nonatomic) MSFRDMEvent* httpConnEvent;
@property(retain, nonatomic) NSString* connAndRecvInfo;
@property(retain, nonatomic) MSFRDMEvent* connAndRecvEvent;
@property(retain, nonatomic) NSString* regInTimeLoginTime;
@property(retain, nonatomic) NSString* regInTimeInfo;
@property(retain, nonatomic) MSFRDMEvent* regInTimeEvent;
@property(retain, nonatomic) MSFRDMEvent* selectAndConnectEvent;
@property(readonly, assign, nonatomic) MSFRDMTcpConnEvent* tcpConnEvent;
+(id)instance;
-(void)endTcpConnEvent:(int)event;
-(void)updateTcpConnEvent_CookieError;
-(void)updateTcpConnEvent_SetNetIP:(id)ip port:(int)port;
-(void)updateTcpConnEvent_IncTimeoutPacket;
-(void)updateTcpConnEvent_IncRecvPacket;
-(void)updateTcpConnEvent_IncSendPacket;
-(void)startTcpConnEvent:(id)event port:(int)port;
-(void)endHttpConnEvent:(int)event;
-(void)startHttpConnEvent;
-(void)endRecordNetProblemEvent:(int)event;
-(void)startRecordNetProblemEvent;
-(void)onSuccessIP:(const char*)ip port:(int)port connNum:(int)num isWifi:(int)wifi type:(int)type;
-(void)endConnAndRecvEvent:(BOOL)event;
-(void)cancelConnAndRecvEvent;
-(void)updateConnAndRecvEvent:(int)event info:(id)info IPEnd:(BOOL)end;
-(void)startConnAndRecvEvent;
-(void)stopConnAndRecvTimer;
-(void)onConnAndRecvTimeout;
-(void)endRegInTimeEvent:(BOOL)timeEvent;
-(void)cancelRegInTimeEvent;
-(void)updateRegInTimeEvent_LoginTime;
-(void)updateRegInTimeEvent:(int)timeEvent info:(id)info IPEnd:(BOOL)end;
-(void)startRegInTimeEvent;
-(void)stopRegInTimeTimer;
-(void)onRegInTimeTimeout;
-(void)onHttpServerListEvent:(BOOL)event failCode:(int)code packetSize:(int)size elapseTime:(int)time failPacket:(id)packet;
-(void)onNetChangeEvent:(int)event;
-(void)endRecvPacketEventWithNetSeq:(int)netSeq success:(BOOL)success code:(int)code packetSize:(int)size;
-(void)startRecvPacketEvent:(id)event withNetSeq:(int)netSeq;
-(void)endSendPacketEventWithNetSeq:(int)netSeq success:(BOOL)success code:(int)code packetSize:(int)size;
-(void)startSendPacketEvent:(id)event withNetSeq:(int)netSeq;
-(void)endSelectAndConnectEvent:(BOOL)event code:(int)code connNum:(int)num info:(const char*)info;
-(void)startSelectAndConnectEvent:(int)event reasonStr:(const char*)str;
-(void)doReport:(id)report isSucceed:(BOOL)succeed elapse:(long)elapse size:(long)size params:(id)params;
-(BOOL)isReportCmd:(id)cmd;
-(void)setUin:(id)uin;
-(void)dealloc;
-(id)init;
@end

@interface SSIDMgr : NSObject {
	NSMutableDictionary* _ssids;
}
+(id)instance;
-(void)removeServerListInfos;
-(id)getAllSSIDNameStrings;
-(void)saveSSID:(char*)ssid withNameString:(char*)nameString;
-(void)getNameStringOfSSID:(char*)ssid isWifi:(BOOL)wifi nameString:(char*)string maxNameStringLen:(int)len;
-(void)getSSID:(char*)ssid maxBufLen:(int)len;
-(void)dealloc;
-(id)init;
@end

@interface MSFTcpEngine : NSObject <MSFTcpStateDelegate> {
@private
	unsigned _uin;
	int _SCONN_NUM;
	int _PCONN_NUM;
	int _state;
	MSFTcpConnect* _conn;
	NSMutableDictionary* _conns;
	int _iSConnCount;
	int _iPConnCount;
	int _iTConnCount;
	NSTimer* _PConnTimer;
	IMSFTcpEngineEvent* _event;
	IMSFTcpDataDelegate* _dataDelegate;
	NSMutableString* _connReason;
	NSMutableString* _connLog;
	BOOL _isWifi;
}
@property(retain, nonatomic) NSMutableString* connLog;
@property(retain, nonatomic) NSMutableString* connReason;
@property(assign, nonatomic) IMSFTcpDataDelegate* dataDelegate;
@property(assign, nonatomic) IMSFTcpEngineEvent* event;
@property(retain, nonatomic) NSMutableDictionary* conns;
@property(retain, nonatomic) MSFTcpConnect* conn;
@property(assign, nonatomic) int PCONN_NUM;
@property(assign, nonatomic) int SCONN_NUM;
-(void)addConnLog:(id)log;
-(void)beginConnLog;
-(void)onConnect:(int)connect withState:(int)state andExParam:(void*)param;
-(void)onConnectErrorHandle:(int)handle errorType:(int)type;
-(void)onConnectFailHandle:(int)handle reason:(int)reason;
-(void)onConnectSuccessHandle:(int)handle;
-(void)onConnectedHandle:(int)handle;
-(void)onPConnTimer;
-(void)stopPConnTimer;
-(BOOL)doConnect;
-(BOOL)connUseProxy;
-(int)connProtocol;
-(int)connNum;
-(int)connPort;
-(id)connIP;
-(BOOL)tryWrite;
-(BOOL)isConnected;
-(BOOL)isConnecting;
-(void)clearConnect:(int)connect;
-(void)buildConnect:(const char*)connect isWifi:(BOOL)wifi isChangeIP:(BOOL)ip;
-(void)setIMEI:(const char*)imei;
-(void)setAppId:(int)anId;
-(void)setUin:(unsigned)uin;
-(void)dealloc;
-(id)init;
@end

@interface RequestData : NSObject {
@private
	basic_string<char, std::char_traits<char>, std::allocator<char> > _data;
	int _command;
	int _dest;
	const CIPCSO* aSO;
	basic_string<char, std::char_traits<char>, std::allocator<char> >* aResult;
}
@property(assign, nonatomic) basic_string<char, std::char_traits<char>, std::allocator<char> >* result;
@property(assign, nonatomic) const CIPCSO* so;
@property(assign, nonatomic) basic_string<char, std::char_traits<char>, std::allocator<char> > data;
@property(assign, nonatomic) int dest;
@property(assign, nonatomic) int command;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)setCmdId:(int)anId;
-(void)setDestId:(int)anId;
-(basic_string<char, std::char_traits<char>, std::allocator<char> >)getData;
-(void)dealloc;
@end

@interface RunloopSwither : NSObject {
}
+(id)instance;
-(void)processSyncEvent:(id)event;
-(void)processEvent:(id)event;
-(void)doInit;
@end

@interface MSFNetworkEnv : NSObject {
	MSFNetReachability* _reach;
	IMSFNetEnvEvent* _event;
@private
	IMSFNetEnvEvent* _eEvent;
}
@property(assign, nonatomic) IMSFNetEnvEvent* event;
-(int)netStatus;
-(void)reachabilityChanged:(id)changed;
-(void)dealloc;
-(id)init;
@end

@interface MSFTcpConnect : NSObject <NSStreamDelegate> {
	int _connId;
	int _state;
	id<MSFTcpStateDelegate> _delegate;
	IMSFTcpDataDelegate* _dataDelegate;
	NSString* _address;
	int _port;
	BOOL _protocol;
	BOOL _useProxy;
	NSInputStream* _input;
	NSOutputStream* _output;
	NSTimer* _connTimer;
	BOOL _isWriting;
	BOOL _isReading;
	NSMutableDictionary* _writePacket;
	BOOL _isReadingPacketLen;
	char* _pPacketBuf;
	int _iPacketBufSize;
	int _iLenToRead;
	int _iLenHaveRead;
	BOOL _isWritePing;
	BOOL _isReadPingLen;
	BOOL _isReadPing;
	NSTimer* _readTimer;
	BOOL _isReadingHttpHead;
	int _iHttpRespStatus;
	int _iHttpContentLen;
	NSMutableData* _HttpReadBuf;
	int _iHttpBytesHaveRead;
	BOOL _isHttpCheck;
	int _iHttpFirst4Bytes;
}
@property(retain, nonatomic) NSMutableData* HttpReadBuf;
@property(retain, nonatomic) NSOutputStream* output;
@property(retain, nonatomic) NSInputStream* input;
@property(assign, nonatomic) BOOL useProxy;
@property(assign, nonatomic) BOOL protocol;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* address;
@property(assign, nonatomic) IMSFTcpDataDelegate* dataDelegate;
@property(assign, nonatomic) id<MSFTcpStateDelegate> delegate;
+(void)setIMEI:(const char*)imei;
+(void)setAppId:(int)anId;
+(void)setUin:(unsigned)uin;
+(id)CRLFData;
-(void)tryWriteImpl;
-(void)tryWrite;
-(BOOL)tryReadImpl;
-(BOOL)tryHttpReadImpl;
-(BOOL)parseHttpLineData:(id)data isHeadEnd:(BOOL*)end;
-(BOOL)parseHttpContentLenValue:(id)value;
-(BOOL)parseHttpServerValue:(id)value;
-(int)parseHttpStatusLine:(id)line;
-(id)trimHttpLineData:(id)data;
-(int)findHttpLineEnd:(int)end;
-(void)clearHttpReadParams;
-(void)tryRead;
-(void)handleReadHttpDataError;
-(void)handleWriteError:(int)error;
-(void)handleReadError:(int)error;
-(void)disConnect;
-(void)onReadTimeout;
-(void)onConnectTimeout;
-(void)connect:(const char*)connect port:(int)port protocol:(BOOL)protocol info:(const char*)info;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)handleStreamSpaceAvailable;
-(void)handleStreamBytesAvailable;
-(void)handleStreamEndEncountered:(id)encountered;
-(void)handleStreamErrorOccurred:(id)occurred;
-(void)handleStreamErrorAndEndEvent:(int)event;
-(void)handleStreamOpenCompleted:(id)completed;
-(void)logDNSResult:(id)result;
-(void)dealloc;
-(id)initWithId:(int)anId;
-(id)getHttpProxySetting:(int*)setting;
-(BOOL)checkHttp;
-(void)initCheckHttp;
-(void)buildHttpReqData:(const char*)data withLen:(unsigned)len packet:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)packet;
-(BOOL)checkPingPacket:(const char*)packet withLen:(unsigned)len isPing:(BOOL*)ping;
-(BOOL)checkPingPacketLen:(int)len;
-(BOOL)checkWritePingPacket;
-(void)initCheckPingPacket;
-(BOOL)checkPacketLen:(int)len;
-(void)stopReadTimer;
-(void)stopConnTimer;
-(BOOL)checkPacketBufSize;
-(void)clearReadParams;
-(void)getStreamsToHostNamed:(id)hostNamed port:(int)port inputStream:(id*)stream outputStream:(id*)stream4;
@end

@interface MSFTraceroute : NSObject {
	NSThread* _thread;
	NSRunLoop* _loop;
	BOOL _isInTrace;
}
+(id)instance;
-(void)updateLog:(id)log;
-(void)traceImpl:(id)impl;
-(void)trace:(id)trace;
-(void)tracerouteRunLoopThreadEntry;
-(void)dealloc;
-(id)init;
@end

@interface KeychainOp : NSObject {
}
+(id)getBundleSeedId;
+(BOOL)deletePasswordItemWithUserName:(id)userName accessgroup:(id)accessgroup;
+(BOOL)updatePasswordItem:(id)item forUserName:(id)userName accessgroup:(id)accessgroup;
+(id)getPasswordItemForUserName:(id)userName accessgroup:(id)accessgroup;
+(BOOL)addPasswordItem:(id)item forUserName:(id)userName accessgroup:(id)accessgroup;
+(id)getPasswordItemSecDictionaryWithPassword:(id)password userName:(id)name accessgroup:(id)accessgroup;
+(void)setAccessGroup:(id)group withDic:(id)dic;
@end

__attribute__((visibility("hidden")))
@interface QQApiDatastore : NSObject {
@private
	NSString* _scheme;
	NSString* _appId;
	NSString* _openId;
}
@property(retain, nonatomic) NSString* appId;
@property(retain, nonatomic) NSString* openId;
@property(retain, nonatomic) NSString* scheme;
+(id)instance;
-(BOOL)isQQSupportApiGeneralPastboard;
-(void)clearApiLargeData;
-(id)getApiLargeDataByGeneralPastboard;
-(id)getApiLargeData;
-(int)setApiLargeData:(id)data;
-(void)clearApiMessage;
-(id)getApiMessage;
-(int)setApiMessage:(id)message;
-(id)getAdItemArray;
-(int)setAdItemArray:(id)array;
-(void)clearAllPluginApps;
-(void)removePluginAppByScheme:(id)scheme;
-(id)getInstalledPluginApps;
-(int)registerWithMetadata:(id)metadata;
@end

__attribute__((visibility("hidden")))
@interface QQApiObjectCoderImpl : NSObject <NSCoding> {
@private
	QQApiObject* _obj;
}
@property(retain, nonatomic) QQApiObject* obj;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithObject:(id)object;
@end

__attribute__((visibility("hidden")))
@interface QQApiMessage : NSObject <NSCoding> {
@private
	QQApiObject* _object;
	unsigned _type;
}
@property(retain, nonatomic) QQApiObject* object;
@property(assign, nonatomic) unsigned type;
+(id)messageWithObject:(id)object andType:(unsigned)type;
+(id)messageWithObject:(id)object;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithObject:(id)object andType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface QQApiObject : NSObject {
@private
	NSString* _title;
	NSString* _description;
}
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface QQApiTextObject : QQApiObject {
@private
	NSString* _text;
}
@property(retain, nonatomic) NSString* text;
+(id)objectWithText:(id)text;
-(void)dealloc;
-(id)initWithText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface QQApiExtendObject : QQApiObject {
@private
	NSData* _data;
	NSData* _previewImage;
}
@property(retain, nonatomic) NSData* previewImageData;
@property(retain, nonatomic) NSData* data;
+(id)objectWithData:(id)data previewImageData:(id)data2 title:(id)title description:(id)description;
-(void)dealloc;
-(id)initWithData:(id)data previewImageData:(id)data2 title:(id)title description:(id)description;
@end

__attribute__((visibility("hidden")))
@interface QQApiImageObject : QQApiExtendObject {
}
@end

__attribute__((visibility("hidden")))
@interface QQApiResultObject : QQApiObject {
@private
	NSString* _errorDescription;
	NSString* _error;
	NSString* _extendInfo;
}
@property(retain, nonatomic) NSString* extendInfo;
@property(retain, nonatomic) NSString* errorDescription;
@property(retain, nonatomic) NSString* error;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface QQApiAdItem : NSObject {
@private
	NSString* _title;
	NSString* _description;
	NSData* _imageData;
	NSURL* _target;
}
@property(retain, nonatomic) NSURL* target;
@property(retain, nonatomic) NSData* imageData;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface QQApiURLObject : QQApiObject {
@private
	NSURL* _url;
	NSData* _previewImageData;
	int _targetContentType;
	NSURL* _previewImageURL;
}
@property(retain, nonatomic) NSURL* previewImageURL;
@property(retain, nonatomic) NSData* previewImageData;
@property(retain, nonatomic) NSURL* url;
@property(assign, nonatomic) int targetContentType;
+(id)objectWithURL:(id)url title:(id)title description:(id)description previewImageURL:(id)url4 targetContentType:(int)type;
+(id)objectWithURL:(id)url title:(id)title description:(id)description previewImageData:(id)data targetContentType:(int)type;
+(id)objectWithURL:(id)url;
-(void)dealloc;
-(id)initWithURL:(id)url title:(id)title description:(id)description previewImageURL:(id)url4 targetContentType:(int)type;
-(id)initWithURL:(id)url title:(id)title description:(id)description previewImageData:(id)data targetContentType:(int)type;
-(id)initWithURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface QQApiAudioObject : QQApiURLObject {
}
+(id)objectWithURL:(id)url title:(id)title description:(id)description previewImageURL:(id)url4;
+(id)objectWithURL:(id)url title:(id)title description:(id)description previewImageData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface QQApiVideoObject : QQApiURLObject {
}
+(id)objectWithURL:(id)url title:(id)title description:(id)description previewImageURL:(id)url4;
+(id)objectWithURL:(id)url title:(id)title description:(id)description previewImageData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface QQApiNewsObject : QQApiURLObject {
}
+(id)objectWithURL:(id)url title:(id)title description:(id)description previewImageURL:(id)url4;
+(id)objectWithURL:(id)url title:(id)title description:(id)description previewImageData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface QQApiPayObject : QQApiObject {
@private
	NSString* _OrderNo;
}
@property(retain, nonatomic) NSString* OrderNo;
+(id)objectWithOrderNo:(id)orderNo;
-(void)dealloc;
-(id)initWithOrderNo:(id)orderNo;
@end

__attribute__((visibility("hidden")))
@interface QQApiCommonContentObject : QQApiObject {
@private
	unsigned layoutType;
	NSData* previewImageData;
	NSArray* textArray;
	NSArray* pictureDataArray;
}
@property(retain, nonatomic) NSArray* pictureDataArray;
@property(retain, nonatomic) NSArray* textArray;
@property(assign, nonatomic) NSData* previewImageData;
@property(assign, nonatomic) unsigned layoutType;
+(id)objectWithDictionary:(id)dictionary;
+(id)objectWithLayoutType:(int)layoutType textArray:(id)array pictureArray:(id)array3 previewImageData:(id)data;
-(id)toDictionary;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface QQOpenApiUtility : NSObject {
}
+(id)UTF8StringWithBase64String:(id)base64String;
+(id)dataWithBase64EncodedString:(id)base64EncodedString;
+(id)base64EncodedStringWithUTF8String:(id)utf8String;
+(id)base64EncodedStringWithData:(id)data;
+(int)openURL:(id)url;
+(BOOL)canOpenURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface QQPasteboard : NSObject {
@private
	NSString* _name;
}
@property(readonly, assign, nonatomic) NSString* name;
-(void)clear;
-(void)dealloc;
-(id)initWithName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface QQObjectPasteboard : QQPasteboard {
}
-(id)objectFromGeneralPastboard;
-(id)object;
-(void)setObjectByGeneralPastboard:(id)pastboard;
-(void)setObject:(id)object;
@end

__attribute__((visibility("hidden")))
@interface QQArrayPasteboard : QQPasteboard {
}
-(id)objectArray;
-(void)replaceObjectAtIndex:(int)index withObject:(id)object;
-(BOOL)removeObjectAtIndex:(int)index;
-(void)addObject:(id)object;
@end

__attribute__((visibility("hidden")))
@interface QQPasteboardMgr : NSObject {
@private
	NSMutableArray* _boards;
}
+(id)instance;
-(id)getArrayPasteboardByName:(id)name;
-(id)getObjectPasteboardByName:(id)name;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface QQDataArray : NSObject <NSCoding> {
@private
	NSMutableArray* _dataArray;
}
+(id)arrayWithObjectArray:(id)objectArray;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)removeAllObjects;
-(BOOL)removeObjectAtIndex:(int)index;
-(BOOL)replaceObjectAtIndex:(int)index withObject:(id)object;
-(void)addObject:(id)object;
-(int)count;
-(id)objectArray;
-(void)dealloc;
-(id)init;
-(id)initWithObjectArray:(id)objectArray;
@end

__attribute__((visibility("hidden")))
@interface QQPluginApi : NSObject {
}
+(id)getMessageByUrl:(id)url;
+(BOOL)sendMessage:(id)message to:(id)to;
+(id)handleOpenURL:(id)url;
+(id)getApiLargeDataFromGeneralPasteboard;
+(id)getApiLargeDataFromPasteboard;
+(int)setAdItemArray:(id)array;
+(void)viewObject:(id)object inPluginWithScheme:(id)scheme;
+(void)viewObject:(id)object inPlugin:(id)plugin;
+(void)viewURLObject:(id)object inPluginWithScheme:(id)scheme queryItem:(id)item;
+(void)viewImageObject:(id)object inPluginWithScheme:(id)scheme queryItem:(id)item;
+(void)viewExtendObject:(id)object inPluginWithScheme:(id)scheme queryItem:(id)item;
+(void)viewTextObject:(id)object inPluginWithScheme:(id)scheme queryItem:(id)item;
+(void)sendResult:(id)result toPluginWithScheme:(id)scheme;
+(void)sendResult:(id)result toPlugin:(id)plugin;
+(void)requestDataFromPluginWithScheme:(id)scheme;
+(void)requestDataFromPlugin:(id)plugin;
+(id)getPluginList;
+(id)getObjectByUrlWithBase64Encode:(id)base64Encode;
@end

__attribute__((visibility("hidden")))
@interface QQPluginMetadata : NSObject <NSCoding> {
@private
	int _ApiVersion;
	NSString* _scheme;
	NSString* _displayName;
	NSString* _bundleIdentifier;
	NSString* _version;
	NSDictionary* _iconFiles;
}
@property(retain, nonatomic) NSDictionary* iconFiles;
@property(retain, nonatomic) NSString* version;
@property(retain, nonatomic) NSString* bundleIdentifier;
@property(retain, nonatomic) NSString* displayName;
@property(retain, nonatomic) NSString* scheme;
@property(assign, nonatomic) int ApiVersion;
-(id)description;
-(void)dealloc;
-(id)init;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface QQApiURLEncoder : NSObject {
}
+(id)urlWithScheme:(id)scheme host:(id)host path:(id)path queryItem:(id)item;
@end

__attribute__((visibility("hidden")))
@interface QQApiURLDecoder : NSObject {
@private
	NSString* scheme;
	NSString* host;
	NSString* path;
	NSDictionary* queryItem;
}
@property(readonly, assign, nonatomic) NSDictionary* queryItem;
@property(copy, nonatomic) NSString* path;
@property(copy, nonatomic) NSString* host;
@property(copy, nonatomic) NSString* scheme;
+(id)decoderWithUrl:(id)url;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface QQApiMessageAndUrlConverter : NSObject {
}
+(id)urlWithQueryItemForPay:(id)pay type:(int)type;
+(id)urlWithQueryItem:(id)queryItem type:(int)type;
+(id)getObjectByUrl:(id)url;
+(id)smartURLString:(id)string;
+(void)setPasteBoardPrevImageData:(id)data filedata:(id)filedata;
+(void)setString:(id)string forKey:(id)key toQueryItem:(id)queryItem;
+(void)setPreviewImageData:(id)data toQueryItem:(id)queryItem;
+(void)setTitle:(id)title description:(id)description toQueryItem:(id)queryItem;
+(id)urlWithPayObject:(id)payObject type:(int)type;
+(id)urlWithCommonContentObject:(id)commonContentObject type:(int)type;
+(id)urlWithURLObject:(id)urlobject type:(int)type;
+(id)urlWithImageObject:(id)imageObject type:(int)type;
+(id)urlWithExtendObject:(id)extendObject type:(int)type;
+(id)urlWithTextObject:(id)textObject type:(int)type;
+(id)messageWithUrlUsedClipboard:(id)urlUsedClipboard;
+(id)messageWithShare:(id)share;
+(id)messageWithResponseFromQQ:(id)qq;
+(id)messageWithRequestFromQQ:(id)qq;
+(id)messageWithUrlNoClipboard:(id)urlNoClipboard;
+(id)messageWithUrl:(id)url;
+(id)urlWithMessage:(id)message;
@end

@interface AudioHelper : NSObject {
	BOOL recording;
}
-(void)dealloc;
-(void)unInitSession;
-(void)initSession;
-(void)printCurrentCategory;
-(void)cleanUpForEndRecording;
-(void)resetSettings;
-(void)resetCategory;
-(BOOL)checkAndPrepareCategoryForRecording;
-(void)resetOutputTarget;
-(void)setSpeaker;
-(void)setHeadSet;
-(BOOL)hasHeadset;
-(BOOL)hasMicphone;
@end

@interface AudioRecordAndPlayer : NSObject {
	XXStruct_9PRtVC aUnitData;
	id<AudioRecordAndPlayerDelegate> audioRecordAndPlayerDelegate;
	int mInSamplerate;
	int mOutSamplerate;
	int mInChannels;
	int mOutChannels;
	int mInFrameDuration;
	int mOutFrameDuration;
	int mInFrameSize;
	int mOutFrameSize;
	int mWorkMode;
	char* pRecBuff;
	int mLeftLenth;
	unsigned short* pPlayBuff;
	int mPBLeft;
	bool bMuteMic;
}
@property(assign, nonatomic) XXStruct_9PRtVC aUnitData;
-(void)setMicrophoneMute:(bool)mute;
-(void)releaseAudio;
-(int)Stop;
-(void)setDelegate:(id)delegate;
-(int)Start;
-(void)setWorkMode:(int)mode;
-(int)setPlayDataFormat:(int)format nChannels:(int)channels nLength:(int)length;
-(int)setRecDataFormat:(int)format nChannels:(int)channels nLength:(int)length;
-(void)initAudio;
-(id)init;
@end

@interface AVFoundationEX : NSObject {
}
@end

@interface VideoCapture : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate> {
@private
	AVCaptureVideoDataOutput* _videoOutput;
	int _frameRate;
	dispatch_queue_s* _cameraProcessingQueue;
	AVCaptureSession* _captureSession;
	AVCaptureDevice* _inputCamera;
	AVCaptureDeviceInput* _videoInput;
	id<VideoCaptureDelegate> videoDelegate;
}
@property(retain, nonatomic) AVCaptureVideoDataOutput* videoOutput;
@property(retain, nonatomic) AVCaptureDeviceInput* videoInput;
@property(retain, nonatomic) AVCaptureSession* captureSession;
-(id)backFacingCamera;
-(id)frontFacingCamera;
-(void)swapFrontAndBackCameras;
-(void)dealloc;
-(void)releaseVideo;
-(void)stopCapture;
-(id)cameraWithPosition:(int)position;
-(BOOL)isFrontCamera;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)startCapture;
-(void)setDelegate:(id)delegate;
-(id)initPreset:(id)preset Format:(int)format Fps:(int)fps Discard:(BOOL)discard;
@end

@interface Wl_SBJsonParser : NSObject {
	NSString* error;
	unsigned maxDepth;
}
@property(copy) NSString* error;
@property(assign) unsigned maxDepth;
-(id)objectWithString:(id)string error:(id*)error;
-(id)objectWithString:(id)string;
-(id)objectWithData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface Wl_SBJsonStreamParser : NSObject {
	BOOL supportMultipleDocuments;
	id<Wl_SBJsonStreamParserDelegate> delegate;
	Wl_SBJsonTokeniser* tokeniser;
	NSMutableArray* stateStack;
	Wl_SBJsonStreamParserState* state;
	unsigned maxDepth;
	NSString* error;
}
@property(copy) NSString* error;
@property(assign) unsigned maxDepth;
@property(assign) id<Wl_SBJsonStreamParserDelegate> delegate;
@property(assign) BOOL supportMultipleDocuments;
@property(readonly, assign, nonatomic) NSMutableArray* stateStack;
@property(assign, nonatomic) Wl_SBJsonStreamParserState* state;
-(int)parse:(id)parse;
-(void)handleArrayStart;
-(void)handleObjectStart;
-(void)maxDepthError;
-(id)tokenName:(int)name;
-(void)dealloc;
-(id)init;
@end

@interface Wl_SBJsonStreamParserAccumulator : NSObject <Wl_SBJsonStreamParserAdapterDelegate> {
	id value;
}
@property(readonly, assign) id value;
-(void)parser:(id)parser foundObject:(id)object;
-(void)parser:(id)parser foundArray:(id)array;
-(void)dealloc;
@end

@interface Wl_SBJsonStreamParserAdapter : NSObject <Wl_SBJsonStreamParserDelegate> {
	id<Wl_SBJsonStreamParserAdapterDelegate> delegate;
	unsigned levelsToSkip;
	unsigned depth;
	NSMutableArray* array;
	NSMutableDictionary* dict;
	NSMutableArray* keyStack;
	NSMutableArray* stack;
	int currentType;
}
@property(assign) id<Wl_SBJsonStreamParserAdapterDelegate> delegate;
@property(assign) unsigned levelsToSkip;
-(void)parser:(id)parser foundString:(id)string;
-(void)parser:(id)parser foundNumber:(id)number;
-(void)parserFoundNull:(id)null;
-(void)parser:(id)parser foundBoolean:(BOOL)boolean;
-(void)parserFoundArrayEnd:(id)end;
-(void)parserFoundArrayStart:(id)start;
-(void)parserFoundObjectEnd:(id)end;
-(void)parser:(id)parser foundObjectKey:(id)key;
-(void)parserFoundObjectStart:(id)start;
-(void)parser:(id)parser found:(id)found;
-(void)pop;
-(void)dealloc;
-(id)init;
@end

@interface Wl_SBJsonStreamParserState : NSObject {
}
+(id)sharedInstance;
-(id)name;
-(BOOL)needKey;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(int)parserShouldReturn:(id)parser;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
@end

@interface Wl_SBJsonStreamParserStateStart : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(id)name;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
@end

@interface Wl_SBJsonStreamParserStateComplete : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(int)parserShouldReturn:(id)parser;
-(id)name;
@end

@interface Wl_SBJsonStreamParserStateError : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(int)parserShouldReturn:(id)parser;
-(id)name;
@end

@interface Wl_SBJsonStreamParserStateObjectStart : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(BOOL)needKey;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
-(id)name;
@end

@interface Wl_SBJsonStreamParserStateObjectGotKey : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
-(id)name;
@end

@interface Wl_SBJsonStreamParserStateObjectSeparator : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
-(id)name;
@end

@interface Wl_SBJsonStreamParserStateObjectGotValue : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
-(id)name;
@end

@interface Wl_SBJsonStreamParserStateObjectNeedKey : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(BOOL)needKey;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
-(id)name;
@end

@interface Wl_SBJsonStreamParserStateArrayStart : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
-(id)name;
@end

@interface Wl_SBJsonStreamParserStateArrayGotValue : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
-(id)name;
@end

@interface Wl_SBJsonStreamParserStateArrayNeedValue : Wl_SBJsonStreamParserState {
}
+(id)sharedInstance;
-(void)parser:(id)parser shouldTransitionTo:(int)to;
-(BOOL)parser:(id)parser shouldAcceptToken:(int)token;
-(id)name;
@end

@interface Wl_SBJsonStreamWriter : NSObject {
	NSString* error;
	NSMutableArray* stateStack;
	Wl_SBJsonStreamWriterState* state;
	id<Wl_SBJsonStreamWriterDelegate> delegate;
	unsigned maxDepth;
	BOOL sortKeys;
	BOOL humanReadable;
}
@property(copy) NSString* error;
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
@property(assign) unsigned maxDepth;
@property(assign) id<Wl_SBJsonStreamWriterDelegate> delegate;
@property(readonly, assign, nonatomic) NSMutableArray* stateStack;
@property(assign, nonatomic) Wl_SBJsonStreamWriterState* state;
+(void)initialize;
-(BOOL)writeNumber:(id)number;
-(BOOL)writeString:(id)string;
-(BOOL)writeValue:(id)value;
-(BOOL)writeBool:(BOOL)aBool;
-(BOOL)writeNull;
-(BOOL)writeArrayClose;
-(BOOL)writeArrayOpen;
-(BOOL)writeObjectClose;
-(BOOL)writeObjectOpen;
-(BOOL)writeArray:(id)array;
-(BOOL)writeObject:(id)object;
-(void)appendBytes:(const void*)bytes length:(unsigned)length;
-(void)dealloc;
-(id)init;
@end

@interface Wl_SBJsonStreamWriterAccumulator : NSObject <Wl_SBJsonStreamWriterDelegate> {
	NSMutableData* data;
}
@property(readonly, assign) NSData* data;
-(void)writer:(id)writer appendBytes:(const void*)bytes length:(unsigned)length;
-(void)dealloc;
-(id)init;
@end

@interface Wl_SBJsonStreamWriterState : NSObject {
}
+(id)sharedInstance;
-(void)appendWhitespace:(id)whitespace;
-(void)transitionState:(id)state;
-(BOOL)expectingKey:(id)key;
-(void)appendSeparator:(id)separator;
-(BOOL)isInvalidState:(id)state;
@end

@interface Wl_SBJsonStreamWriterStateObjectStart : Wl_SBJsonStreamWriterState {
}
+(id)sharedInstance;
-(BOOL)expectingKey:(id)key;
-(void)transitionState:(id)state;
@end

@interface Wl_SBJsonStreamWriterStateObjectKey : Wl_SBJsonStreamWriterStateObjectStart {
}
+(id)sharedInstance;
-(void)appendSeparator:(id)separator;
@end

@interface Wl_SBJsonStreamWriterStateObjectValue : Wl_SBJsonStreamWriterState {
}
+(id)sharedInstance;
-(void)appendWhitespace:(id)whitespace;
-(void)transitionState:(id)state;
-(void)appendSeparator:(id)separator;
@end

@interface Wl_SBJsonStreamWriterStateArrayStart : Wl_SBJsonStreamWriterState {
}
+(id)sharedInstance;
-(void)transitionState:(id)state;
@end

@interface Wl_SBJsonStreamWriterStateArrayValue : Wl_SBJsonStreamWriterState {
}
+(id)sharedInstance;
-(void)appendSeparator:(id)separator;
@end

@interface Wl_SBJsonStreamWriterStateStart : Wl_SBJsonStreamWriterState {
}
+(id)sharedInstance;
-(void)appendSeparator:(id)separator;
-(void)transitionState:(id)state;
@end

@interface Wl_SBJsonStreamWriterStateComplete : Wl_SBJsonStreamWriterState {
}
+(id)sharedInstance;
-(BOOL)isInvalidState:(id)state;
@end

@interface Wl_SBJsonStreamWriterStateError : Wl_SBJsonStreamWriterState {
}
+(id)sharedInstance;
@end

@interface Wl_SBJsonTokeniser : NSObject {
	Wl_SBJsonUTF8Stream* _stream;
	NSString* _error;
}
@property(copy) NSString* error;
-(int)getToken:(id*)token;
-(int)getNumberToken:(id*)token;
-(int)getStringToken:(id*)token;
-(BOOL)decodeHexQuad:(unsigned short*)quad;
-(BOOL)decodeEscape:(unsigned short)escape into:(unsigned short*)into;
-(int)match:(const char*)match length:(unsigned)length retval:(int)retval;
-(void)appendData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface Wl_SBJsonUTF8Stream : NSObject {
	const char* _bytes;
	NSMutableData* _data;
	unsigned _length;
	unsigned _index;
}
@property(assign) unsigned index;
-(id)stringWithRange:(NSRange)range;
-(BOOL)skipCharacters:(const char*)characters length:(unsigned)length;
-(BOOL)haveRemainingCharacters:(unsigned)characters;
-(void)skipWhitespace;
-(void)skip;
-(BOOL)getRetainedStringFragment:(id*)fragment;
-(BOOL)getNextUnichar:(unsigned short*)unichar;
-(BOOL)getUnichar:(unsigned short*)unichar;
-(void)appendData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface Wl_SBJsonWriter : NSObject {
	NSString* error;
	unsigned maxDepth;
	BOOL sortKeys;
	BOOL humanReadable;
}
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
@property(copy) NSString* error;
@property(assign) unsigned maxDepth;
-(id)dataWithObject:(id)object;
-(id)stringWithObject:(id)object error:(id*)error;
-(id)stringWithObject:(id)object;
-(void)dealloc;
-(id)init;
@end

@interface SingleItemWrapper : NSObject {
	NSMutableDictionary* keychainItemData;
	NSMutableDictionary* genericPasswordQuery;
}
@property(retain) NSMutableDictionary* genericPasswordQuery;
@property(retain) NSMutableDictionary* keychainItemData;
-(void)writeToKeychain;
-(id)secItemFormatToDictionary:(id)dictionary;
-(id)dictionaryToSecItemFormat:(id)secItemFormat;
-(void)resetKeychainItem;
-(id)objectForKey:(id)key;
-(BOOL)setObject:(id)object forKey:(id)key;
-(void)dealloc;
-(id)initWithIdentifier:(id)identifier accessGroup:(id)group;
@end

@interface SafeSingleItemWrapper : NSObject {
	SingleItemWrapper* wapper;
	NSMutableDictionary* wapperDict;
	NSString* filePath;
}
-(void)dealloc;
-(void)resetSafeKeychainItem;
-(id)safeObjectForKey:(id)key;
-(BOOL)setSafeObject:(id)object forKey:(id)key;
-(id)initSafeWithIdentifier:(id)identifier accessGroup:(id)group;
-(id)dataSafeFilePathWithName:(id)name;
@end

@interface Wl_Reachability : NSObject {
	BOOL localWiFiRef;
	SCNetworkReachabilityRef reachabilityRef;
}
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostName:(id)hostName;
-(int)currentReachabilityStatus;
-(BOOL)connectionRequired;
-(int)networkStatusForFlags:(unsigned)flags;
-(int)localWiFiStatusForFlags:(unsigned)flags;
-(void)dealloc;
-(void)stopNotifier;
-(BOOL)startNotifier;
@end

@interface LoginAsyncReadPacket : NSObject {
	NSMutableData* buffer;
	unsigned startOffset;
	unsigned bytesDone;
	unsigned maxLength;
	double timeout;
	unsigned readLength;
	NSData* term;
	BOOL bufferOwner;
	unsigned originalBufferLength;
	long tag;
}
-(void).cxx_destruct;
-(int)searchForTermAfterPreBuffering:(long)termAfterPreBuffering;
-(unsigned)readLengthForTermWithPreBuffer:(id)preBuffer found:(BOOL*)found;
-(unsigned)readLengthForTermWithHint:(unsigned)hint shouldPreBuffer:(BOOL*)buffer;
-(unsigned)readLengthForNonTermWithHint:(unsigned)hint;
-(unsigned)optimalReadLengthWithDefault:(unsigned)aDefault shouldPreBuffer:(BOOL*)buffer;
-(void)ensureCapacityForAdditionalDataOfLength:(unsigned)length;
-(id)initWithData:(id)data startOffset:(unsigned)offset maxLength:(unsigned)length timeout:(double)timeout readLength:(unsigned)length5 terminator:(id)terminator tag:(long)tag;
@end

@interface LoginAsyncWritePacket : NSObject {
	NSData* buffer;
	unsigned bytesDone;
	long tag;
	double timeout;
}
-(void).cxx_destruct;
-(id)initWithData:(id)data timeout:(double)timeout tag:(long)tag;
@end

@interface LoginAsyncSpecialPacket : NSObject {
	NSDictionary* tlsSettings;
}
-(void).cxx_destruct;
-(id)initWithTLSSettings:(id)tlssettings;
@end

@interface LoginAsyncSocket : NSObject {
	unsigned flags;
	unsigned short config;
	id delegate;
	dispatch_queue_s* delegateQueue;
	int socket4FD;
	int socket6FD;
	int connectIndex;
	NSData* connectInterface4;
	NSData* connectInterface6;
	dispatch_queue_s* socketQueue;
	dispatch_source_s* accept4Source;
	dispatch_source_s* accept6Source;
	dispatch_source_s* connectTimer;
	dispatch_source_s* readSource;
	dispatch_source_s* writeSource;
	dispatch_source_s* readTimer;
	dispatch_source_s* writeTimer;
	NSMutableArray* readQueue;
	NSMutableArray* writeQueue;
	LoginAsyncReadPacket* currentRead;
	LoginAsyncWritePacket* currentWrite;
	unsigned long socketFDBytesAvailable;
	NSMutableData* partialReadBuffer;
	XXStruct_4pnlqD streamContext;
	CFReadStreamRef readStream;
	CFWriteStreamRef writeStream;
	id userData;
}
+(id)ZeroData;
+(id)LFData;
+(id)CRData;
+(id)CRLFData;
+(BOOL)getHost:(id*)host port:(unsigned short*)port fromAddress:(id)address;
+(unsigned short)portFromAddress:(id)address;
+(id)hostFromAddress:(id)address;
+(unsigned short)portFromSockaddr6:(const sockaddr_in6*)sockaddr6;
+(unsigned short)portFromSockaddr4:(const sockaddr_in*)sockaddr4;
+(id)hostFromSockaddr6:(const sockaddr_in6*)sockaddr6;
+(id)hostFromSockaddr4:(const sockaddr_in*)sockaddr4;
+(void)removeStreamListener:(id)listener;
+(void)addStreamListener:(id)listener;
+(void)listenerThread;
+(void)startListenerThreadIfNeeded;
-(void).cxx_destruct;
-(BOOL)enableBackgroundingOnSocketWithCaveat;
-(BOOL)enableBackgroundingOnSocket;
-(BOOL)enableBackgroundingOnSocketWithCaveat:(BOOL)caveat;
-(CFWriteStreamRef)writeStream;
-(CFReadStreamRef)readStream;
-(int)socket6FD;
-(int)socket4FD;
-(int)socketFD;
-(void)performBlock:(id)block;
-(BOOL)openStreams;
-(void)removeStreamsFromRunLoop;
-(BOOL)addStreamsToRunLoop;
-(BOOL)registerForStreamCallbacksIncludingReadWrite:(BOOL)streamCallbacksIncludingReadWrite;
-(BOOL)createReadAndWriteStream;
-(void)maybeStartTLS;
-(void)abortSSLHandshake:(id)handshake;
-(void)finishSSLHandshake;
-(void)startTLS:(id)tls;
-(void)doWriteTimeoutWithExtension:(double)extension;
-(void)doWriteTimeout;
-(void)setupWriteTimerWithTimeout:(double)timeout;
-(void)endCurrentWrite;
-(void)completeCurrentWrite;
-(void)doWriteData;
-(void)maybeDequeueWrite;
-(void)writeData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)doReadTimeoutWithExtension:(double)extension;
-(void)doReadTimeout;
-(void)setupReadTimerWithTimeout:(double)timeout;
-(void)endCurrentRead;
-(void)completeCurrentRead;
-(void)doReadEOF;
-(void)doReadData;
-(void)flushSSLBuffers;
-(void)maybeDequeueRead;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout tag:(long)tag;
-(void)resumeWriteSource;
-(void)suspendWriteSource;
-(void)resumeReadSource;
-(void)suspendReadSource;
-(BOOL)usingCFStream;
-(void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)newlyConnectedSocket;
-(void)getInterfaceAddress4:(id*)a4 address6:(id*)a6 fromDescription:(id)description port:(unsigned short)port;
-(BOOL)isSecure;
-(BOOL)isIPv6;
-(BOOL)isIPv4;
-(id)localAddress;
-(id)connectedAddress;
-(unsigned short)localPortFromSocket6:(int)socket6;
-(unsigned short)localPortFromSocket4:(int)socket4;
-(id)localHostFromSocket6:(int)socket6;
-(id)localHostFromSocket4:(int)socket4;
-(unsigned short)connectedPortFromSocket6:(int)socket6;
-(unsigned short)connectedPortFromSocket4:(int)socket4;
-(id)connectedHostFromSocket6:(int)socket6;
-(id)connectedHostFromSocket4:(int)socket4;
-(unsigned short)localPort6;
-(unsigned short)localPort4;
-(id)localHost6;
-(id)localHost4;
-(unsigned short)connectedPort6;
-(unsigned short)connectedPort4;
-(id)connectedHost6;
-(id)connectedHost4;
-(unsigned short)localPort;
-(id)localHost;
-(unsigned short)connectedPort;
-(id)connectedHost;
-(BOOL)isConnected;
-(BOOL)isDisconnected;
-(id)otherError:(id)error;
-(id)connectionClosedError;
-(id)writeTimeoutError;
-(id)readTimeoutError;
-(id)readMaxedOutError;
-(id)connectTimeoutError;
-(id)sslError:(long)error;
-(id)errnoError;
-(id)errnoErrorWithReason:(id)reason;
-(id)gaiError:(int)error;
-(id)badParamError:(id)error;
-(id)badConfigError:(id)error;
-(void)maybeClose;
-(void)disconnectAfterReadingAndWriting;
-(void)disconnectAfterWriting;
-(void)disconnectAfterReading;
-(void)disconnect;
-(void)closeWithError:(id)error;
-(void)doConnectTimeout;
-(void)endConnectTimeout;
-(void)startConnectTimeout:(double)timeout;
-(void)didNotConnect:(int)connect error:(id)error;
-(void)didConnect:(int)connect;
-(BOOL)connectWithAddress4:(id)address4 address6:(id)a6 error:(id*)error;
-(void)lookup:(int)lookup didFail:(id)fail;
-(void)lookup:(int)lookup didSucceedWithAddress4:(id)address4 address6:(id)a6;
-(void)lookup:(int)lookup host:(id)host port:(unsigned short)port;
-(BOOL)connectToAddress:(id)address viaInterface:(id)interface withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port viaInterface:(id)interface withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port error:(id*)error;
-(BOOL)preConnectWithInterface:(id)interface error:(id*)error;
-(BOOL)doAccept:(int)accept;
-(BOOL)acceptOnInterface:(id)interface port:(unsigned short)port error:(id*)error;
-(BOOL)acceptOnPort:(unsigned short)port error:(id*)error;
-(void)setUserData:(id)data;
-(id)userData;
-(void)setPreferIPv4OverIPv6:(BOOL)a6;
-(BOOL)isIPv4PreferredOverIPv6;
-(void)setIPv6Enabled:(BOOL)enabled;
-(BOOL)isIPv6Enabled;
-(void)setIPv4Enabled:(BOOL)enabled;
-(BOOL)isIPv4Enabled;
-(void)setAutoDisconnectOnClosedReadStream:(BOOL)stream;
-(BOOL)autoDisconnectOnClosedReadStream;
-(void)synchronouslySetDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue;
-(void)setDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue;
-(void)setDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue synchronously:(BOOL)synchronously;
-(void)getDelegate:(id*)delegate delegateQueue:(dispatch_queue_s**)queue;
-(void)synchronouslySetDelegateQueue:(dispatch_queue_s*)queue;
-(void)setDelegateQueue:(dispatch_queue_s*)queue;
-(void)setDelegateQueue:(dispatch_queue_s*)queue synchronously:(BOOL)synchronously;
-(dispatch_queue_s*)delegateQueue;
-(void)synchronouslySetDelegate:(id)delegate;
-(void)setDelegate:(id)delegate;
-(void)setDelegate:(id)delegate synchronously:(BOOL)synchronously;
-(id)delegate;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue socketQueue:(dispatch_queue_s*)queue3;
-(id)initWithDelegate:(id)delegate delegateQueue:(dispatch_queue_s*)queue;
-(id)initWithSocketQueue:(dispatch_queue_s*)socketQueue;
-(id)init;
@end

@interface RemortServerList : NSObject {
	int wHostType;
	int wNetworkType;
	XXStruct_9JHstD stDefaultHost;
	unsigned short wHostTimeOut;
	TryServerSet* stServerSetFor3G;
	TryServerSet* stServerSetForWifi;
	TryServerSet* stServerSetFor3GHttp;
	TryServerSet* stServerSetForWifiHttp;
}
@property(readonly, assign) int wNetworkType;
@property(assign) int wHostType;
-(void)dealloc;
-(void)setHostTimeout:(unsigned short)timeout;
-(BOOL)switchNetworkType;
-(BOOL)setHostType:(int)type andHost:(id)host andPort:(unsigned short)port;
-(BOOL)resetTryOrder;
-(BOOL)setNowIp:(id)ip andPort:(unsigned short)port andNextIp:(id)ip3 andPort2:(unsigned short)a2;
-(BOOL)getNextRemortHost:(id*)host andPort:(unsigned short*)port andTimeOut:(unsigned short*)anOut;
-(BOOL)getRemortHost:(id*)host andPort:(unsigned short*)port andTimeOut:(unsigned short*)anOut;
-(id)init;
@end

@interface TryServerSet : NSObject {
	unsigned short wNextHostIndex;
	XXStruct_9JHstD astHostList[5];
	NSMutableDictionary* ServerSetDict;
	NSString* filePath;
	int configNetworkType;
	NSString* sConfigFileName;
}
-(void)printServerSet;
-(void)dealloc;
-(BOOL)resetTryOrder;
-(BOOL)setNowIp:(id)ip andPort:(unsigned short)port andNextIp:(id)ip3 andPort2:(unsigned short)a2;
-(BOOL)getNextRemortHost:(id*)host andPort:(unsigned short*)port andTimeOut:(unsigned short*)anOut;
-(BOOL)getRemortHost:(id*)host andPort:(unsigned short*)port andTimeOut:(unsigned short*)anOut;
-(id)initWithFileName:(id)fileName andNetWorkType:(int)type andHostType:(int)type3;
@end

@interface MemSig : NSObject <NSCoding> {
	NSString* sigName;
	unsigned dwAppid;
	NSData* sig;
	NSData* sigKey;
}
@property(assign, nonatomic) unsigned dwAppid;
@property(copy, nonatomic) NSString* sigName;
@property(retain, nonatomic) NSData* sigKey;
@property(retain, nonatomic) NSData* sig;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)description;
@end

@interface MemSigManager : NSObject <NSCoding> {
	NSMutableDictionary* sigDict;
}
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)printSig;
-(id)sigByName:(id)name;
-(void)addSig:(id)sig;
-(void)dealloc;
-(id)init;
@end

@interface MemAppidSig : NSObject <NSCoding> {
	unsigned dwAppid;
	unsigned dwPriority;
	unsigned dwTime;
	unsigned dwExpTime;
	MemSigManager* memSigManager;
}
@property(assign, nonatomic) unsigned dwExpTime;
@property(assign, nonatomic) unsigned dwTime;
@property(assign, nonatomic) unsigned dwPriority;
@property(assign, nonatomic) unsigned dwAppid;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)printAppidSig;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(id)appidSigByName:(id)name;
-(void)addAppidSig:(id)sig;
-(void)dealloc;
-(id)init;
@end

@interface MemAppidSigManager : NSObject <NSCoding> {
	NSMutableDictionary* appidSigDic;
}
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)printAppidSigAll;
-(unsigned)topPriorityAppid;
-(unsigned)sigTimeByAppid:(unsigned)appid;
-(unsigned)expireTimeByAppid:(unsigned)appid andAppExpTime:(unsigned)time;
-(void)setMemPriority:(unsigned)priority andTime:(unsigned)time byAppid:(unsigned)appid;
-(void)removeMemSigByAppid:(unsigned)appid;
-(id)memSigByAppid:(unsigned)appid andName:(id)name;
-(void)setMemSig:(id)sig;
-(void)dealloc;
-(id)init;
@end

@interface MemUserAppidSig : NSObject <NSCoding> {
	WloginUserInfo* userInfo;
	MemAppidSigManager* userSigList;
}
@property(readonly, assign, nonatomic) WloginUserInfo* userInfo;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)writeToKeychainForceByAppid:(unsigned)keychainForceByAppid;
-(void)writeToKeychainByAppid:(unsigned)keychainByAppid;
-(int)decodeUserPwdSigData:(id)data andSigAppId:(unsigned)anId byKey:(id)key outPwdSig:(id)sig;
-(BOOL)encodeUserPwdSig:(id)sig byKey:(id)key outDataBuff:(id)buff;
-(void)printUserAndSig;
-(unsigned)topPriorityAppid;
-(unsigned)userUin;
-(void)setUserUin:(unsigned)uin;
-(BOOL)hasExpireBySigType:(unsigned)type andAppid:(unsigned)appid;
-(BOOL)hasExpireByAppid:(unsigned)appid andAppExpTime:(unsigned)time;
-(void)setPriority:(unsigned)priority andTime:(unsigned)time byAppid:(unsigned)appid;
-(void)setSig:(id)sig;
-(void)removeSigByAppid:(unsigned)appid;
-(id)sigByAppid:(unsigned)appid andSigName:(id)name;
-(void)dealloc;
-(id)initWithBasicInfo:(unsigned)basicInfo andPubNo:(unsigned)no andClientType:(unsigned)type;
@end

@interface WloginTlv_0x2 : WloginTlv {
	unsigned short wPicSigVer;
	NSString* sCode;
	NSData* acEncryptKey;
}
@property(retain) NSData* acEncryptKey;
@property(copy) NSString* sCode;
@property(assign, nonatomic) unsigned short wPicSigVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0xa : WloginTlv {
	unsigned short wErrorVer;
	unsigned short wErrorCode;
	NSString* sErrorInfo;
}
@property(copy) NSString* sErrorInfo;
@property(assign, nonatomic) unsigned short wErrorCode;
@property(assign, nonatomic) unsigned short wErrorVer;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x17 : WloginTlv {
	unsigned short wDataVer;
	unsigned dwTime;
	unsigned dwClientIP;
	unsigned short wClientPort;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wClientPort;
@property(assign) unsigned dwClientIP;
@property(assign) unsigned dwTime;
@property(assign) unsigned short wDataVer;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x18 : WloginTlv {
	unsigned short wPingVer;
	unsigned dwSSOVer;
	unsigned dwAppID;
	unsigned dwAppClientVer;
	unsigned dwUin;
	unsigned short wRedirectCount;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wRedirectCount;
@property(assign) unsigned dwUin;
@property(assign) unsigned dwAppClientVer;
@property(assign) unsigned dwAppID;
@property(assign) unsigned dwSSOVer;
@property(assign) unsigned short wPingVer;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x11a : WloginTlv {
	unsigned short wFaceId;
	unsigned char cAge;
	unsigned char cGender;
	NSString* sNickName;
}
@property(copy) NSString* sNickName;
@property(assign) unsigned char cGender;
@property(assign) unsigned char cAge;
@property(assign) unsigned short wFaceId;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x100 : WloginTlv {
	unsigned short wDBBufVer;
	unsigned dwSSOVer;
	unsigned dwAppID;
	unsigned dwSubAppID;
	unsigned dwAppClientVer;
	unsigned dwGetSig;
}
@property(assign, nonatomic) unsigned dwGetSig;
@property(assign, nonatomic) unsigned dwAppClientVer;
@property(assign, nonatomic) unsigned dwSubAppID;
@property(assign, nonatomic) unsigned dwAppID;
@property(assign, nonatomic) unsigned dwSSOVer;
@property(assign, nonatomic) unsigned short wDBBufVer;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x105 : WloginTlv {
	NSData* acSig;
	NSData* acPicData;
}
@property(retain) NSData* acPicData;
@property(retain) NSData* acSig;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x107 : WloginTlv {
	unsigned short wPicType;
	unsigned char cCapType;
	unsigned short wPicSize;
	unsigned char cPicRetType;
}
@property(assign, nonatomic) unsigned char cPicRetType;
@property(assign, nonatomic) unsigned short wPicSize;
@property(assign, nonatomic) unsigned char cCapType;
@property(assign, nonatomic) unsigned short wPicType;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x113 : WloginTlv {
	unsigned dwUin;
	unsigned short wNameTag;
	NSString* sName;
}
@property(copy) NSString* sName;
@property(assign) unsigned short wNameTag;
@property(assign) unsigned dwUin;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x116 : WloginTlv {
	unsigned char cVer;
	unsigned dwMiscBitmap;
	unsigned dwGetAppSig;
	unsigned char cAppidNum;
	unsigned adwAppidList[10];
}
@property(assign, nonatomic) unsigned char cAppidNum;
@property(assign, nonatomic) unsigned dwGetAppSig;
@property(assign, nonatomic) unsigned dwMiscBitmap;
@property(assign, nonatomic) unsigned char cVer;
-(int)encode:(id)encode;
-(unsigned)adwAppidWithIndex:(unsigned char)index;
-(void)setAdwAppidList:(unsigned)list withIndex:(unsigned char)index;
@end

@interface WloginTlv_0x118 : WloginTlv {
	unsigned dwFlag;
	NSString* sName;
}
@property(copy) NSString* sName;
@property(assign) unsigned dwFlag;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x11d : WloginTlv {
	unsigned dwAppid;
	NSData* acSigKey;
	NSData* acSig;
}
@property(retain) NSData* acSig;
@property(retain) NSData* acSigKey;
@property(assign) unsigned dwAppid;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x11f : WloginTlv {
	unsigned dwExchangeTime;
	unsigned dwPriority;
}
@property(assign) unsigned dwPriority;
@property(assign) unsigned dwExchangeTime;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x122 : WloginTlv {
	NSData* G;
	NSData* N;
	NSData* Y;
	NSData* S;
}
@property(retain) NSData* S;
@property(retain) NSData* Y;
@property(retain) NSData* N;
@property(retain) NSData* G;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x123 : WloginTlv {
	NSData* G;
	NSData* N;
	NSData* Y;
	NSData* X;
	unsigned dwCalTime;
}
@property(assign) unsigned dwCalTime;
@property(retain) NSData* X;
@property(retain) NSData* Y;
@property(retain) NSData* N;
@property(retain) NSData* G;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x124 : WloginTlv {
	NSString* sOs;
	NSString* sOsVer;
	unsigned short wNetInfo;
	NSString* sNetDetail;
	NSString* sAddr;
}
@property(copy) NSString* sAddr;
@property(copy) NSString* sNetDetail;
@property(assign) unsigned short wNetInfo;
@property(copy) NSString* sOsVer;
@property(copy) NSString* sOs;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x125 : WloginTlv_Buff {
	NSData* openId;
}
@property(copy) NSData* openId;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x126 : WloginTlv {
	unsigned short wVer;
	NSData* randData;
}
@property(retain) NSData* randData;
@property(assign) unsigned short wVer;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x127 : WloginTlv {
	unsigned short wVer;
	NSString* msgCode;
	NSData* randData;
}
@property(copy) NSString* msgCode;
@property(retain) NSData* randData;
@property(assign) unsigned short wVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x128 : WloginTlv {
	unsigned short wVer;
	unsigned char cNewInstall;
	unsigned char cReadGuid;
	unsigned char cGuidChg;
	unsigned dwFlag;
	NSString* deviceType;
	NSData* guid;
}
@property(retain) NSData* guid;
@property(copy) NSString* deviceType;
@property(assign) unsigned dwFlag;
@property(assign) unsigned char cGuidChg;
@property(assign) unsigned char cReadGuid;
@property(assign) unsigned char cNewInstall;
@property(assign) unsigned short wVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x129 : WloginTlv {
	unsigned dwHoldTime;
	unsigned dwTimeout;
	NSString* phoneNo;
}
@property(copy) NSString* phoneNo;
@property(assign) unsigned dwTimeout;
@property(assign) unsigned dwHoldTime;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x130 : WloginTlv {
	unsigned short wDataVer;
	unsigned dwTime;
	unsigned dwClientIP;
	unsigned short wClientPort;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wClientPort;
@property(assign) unsigned dwClientIP;
@property(assign) unsigned dwTime;
@property(assign) unsigned short wDataVer;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x140 : WloginTlv {
	unsigned short wDataVer;
	NSString* sLoginHost;
	unsigned short wLoginPort;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wLoginPort;
@property(copy) NSString* sLoginHost;
@property(assign) unsigned short wDataVer;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x141 : WloginTlv {
	unsigned short wDataVer;
	NSString* sOperator;
	unsigned short wNetType;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wNetType;
@property(copy) NSString* sOperator;
@property(assign) unsigned short wDataVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x142 : WloginTlv {
	unsigned short wIDVer;
	NSString* sIdentifier;
}
@property(copy) NSString* sIdentifier;
@property(assign) unsigned short wIDVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_Buff : WloginTlv {
	NSData* acSigBuff;
}
@property(retain) NSData* acSigBuff;
-(id)copy;
-(void)dealloc;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_String : WloginTlv {
	NSString* sString;
}
@property(copy) NSString* sString;
-(void)dealloc;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv : NSObject <WloginProtocolBuff> {
	unsigned short wTlvT;
}
@property(assign) unsigned short wTlvT;
-(id)copy;
-(id)getTlvTagString;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(id)initWithTag:(unsigned short)tag;
@end

@interface WloginTlvFactory : NSObject {
}
+(id)initTlvWithTag:(unsigned short)tag;
+(id)initTlvWithTag:(unsigned short)tag andUser:(id)user;
@end

@interface WloginPkgHead : NSObject <WloginProtocolBuff> {
	struct {
		unsigned short wVersion;
		unsigned short wCommand;
		unsigned short wSeq_num;
		unsigned dwUin;
		unsigned char cExtVer;
		unsigned char cCmdVer;
		unsigned char cRetryTimes;
		unsigned dwClientType;
		unsigned dwPubNo;
		unsigned dwInstanceID;
	} stClientPkgHead;
	struct {
		unsigned short wVersion;
		unsigned short wCommand;
		unsigned short wSeq_num;
		unsigned dwUin;
		unsigned short wFlag;
		unsigned char cRetryTimes;
	} stServerPkgHead;
}
-(unsigned short)pkgCmd;
-(void)setPkgCmd:(unsigned short)cmd;
-(unsigned)pkgUin;
-(void)setPkgUin:(unsigned)uin;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(BOOL)resetHead;
-(id)initWithVer:(unsigned short)ver andPubNo:(unsigned)no andClientType:(unsigned)type;
@end

@interface WloginProtocol : NSObject <SocketNetworkAdapterProtocol, UIAlertViewDelegate> {
	WloginPkgHead* pkgHead;
	unsigned char cReplyCode;
	int replyCodeActionType;
	int cPingRst;
	int dwDiffTime;
	unsigned dwClientIP;
	NSString* crtCarrierName;
	NSMutableDictionary* basicInfoTlvList;
	unsigned dwSigAppid;
	unsigned dwSigSubAppid;
	NSMutableDictionary* reslutSigTlvList;
	SocketNetworkAdapter* socketAdapter;
	double timeOut;
	BOOL sKey[16];
	BOOL A1_Key[16];
	id protocolDelegate;
	id retryPara;
	unsigned short retryTimes;
	int nowFunction;
	NSString* nowHost;
	unsigned short nowPort;
	timeval startTime;
	XXStruct_VowasB stInfo;
}
@property(readonly, assign) NSMutableDictionary* reslutSigTlvList;
@property(readonly, assign) int replyCodeActionType;
@property(readonly, assign) unsigned char cReplyCode;
-(void)doNothing;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(unsigned)serverTime;
-(void)setOtherAppidList:(unsigned*)list andOtherAppidNum:(unsigned)num andBitmap:(unsigned)bitmap;
-(BOOL)hasPingServer;
-(unsigned)pkgHeadUin;
-(void)setPkgHeadUin:(unsigned)uin;
-(id)sigTlvDictByTag:(unsigned short)tag;
-(id)basicTlvByTag:(unsigned short)tag;
-(void)onSocket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)onSocketDidDisconnect:(id)onSocket;
-(void)onSocket:(id)socket didDisconnectWithError:(id)error;
-(BOOL)addBasicTlv:(id)tlv;
-(void)onSocket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)recvPkgError;
-(void)networkInfoReport:(short)report andErrorStr:(id)str;
-(BOOL)decodeTlvList:(const char*)list andLeftLen:(int*)len;
-(int)checkChallenge:(unsigned)challenge;
-(int)exchangeSig:(id)sig byD2:(id)a2;
-(int)exchangeSig:(id)sig;
-(int)nameToUin;
-(int)pingServer;
-(int)refreshSmsCode;
-(int)checkSmsCode;
-(int)refreshPic;
-(int)checkPic;
-(int)loginWithPasswd:(id)passwd;
-(BOOL)genEncryptBody_0x144:(id)a144;
-(BOOL)genTGTGTbyPasswd:(const char*)passwd andUin:(unsigned)uin andFlag:(int)flag outTGTGT:(id)tgtgt;
-(void)disconnect;
-(int)connectToRemortServer;
-(void)setLoginAppid:(unsigned)appid andSubAppid:(unsigned)appid2;
-(BOOL)setServerIp:(id)ip andPort:(unsigned short)port;
-(void)dealloc;
-(BOOL)resetProtocol;
-(id)initWithClientVer:(unsigned short)clientVer andPubNo:(unsigned)no andClientType:(unsigned)type andDelegate:(id)delegate;
@end

@interface WloginTransport : NSObject <SocketNetworkAdapterProtocol> {
	WloginPkgHead* pkgHead;
	unsigned char cReplyCode;
	NSString* crtCarrierName;
	SocketNetworkAdapter* socketAdapter;
	double timeOut;
	BOOL sKey[16];
	BOOL A1_Key[16];
	id transportDelegate;
	NSString* nowHost;
	unsigned short nowPort;
	timeval startTime;
	XXStruct_VowasB stInfo;
	unsigned short retryTimes;
	unsigned dwTmpUin;
	unsigned dwTmpAppid;
	unsigned dwTmpRole;
	unsigned dwTmpTime;
	MemSig* sTmpST;
	MemSig* sTmpA2;
	NSData* sTmpData;
	int dwTmpType;
}
@property(readonly, assign) unsigned char cReplyCode;
-(void)onSocket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)onSocketDidDisconnect:(id)onSocket;
-(void)onSocket:(id)socket didDisconnectWithError:(id)error;
-(void)onSocket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)recvPkgError;
-(void)networkInfoReport:(short)report andErrorStr:(id)str;
-(int)sendToWtloginTran:(unsigned)wtloginTran andAppid:(unsigned)appid andRole:(unsigned)role andTranType:(int)type andSt:(id)st andA2:(id)a2 andData:(id)data andSvrTime:(unsigned)time;
-(void)disconnect;
-(int)connectToRemortServer;
-(BOOL)setServerIp:(id)ip andPort:(unsigned short)port;
-(void)dealloc;
-(BOOL)resetTransport;
-(id)initTranWithClientVer:(unsigned short)clientVer andPubNo:(unsigned)no andClientType:(unsigned)type andDelegate:(id)delegate;
@end

@interface UserLoginProcess : NSObject <WloginSelfCallBackProcotol, ProcessCallback> {
	NSString* tmpUserAccount;
	BOOL hasNewTGTGT;
	MemSig* tmpTGTGT;
	id tmpUserPasswd;
	unsigned dwTmpBitmap;
	unsigned tmpflag;
	unsigned dwTmpAppid;
	unsigned dwTmpSubAppid;
	unsigned dwTmpByAppid;
	MemSig* tmpD2;
	MemSig* tmpTGT;
	id sdkDelegate;
	int iLoginState;
	int iInProcess;
	WloginProtocol* wloginProtocol;
	id theDelegate;
	short nowRst;
	timeval nowStartTime;
	NSMutableDictionary* nowLoginDic;
	timeval nextStartTime;
	NSMutableDictionary* nextLoginDic;
	ProcessLogReport* processLog;
}
@property(readonly, assign) WloginProtocol* wloginProtocol;
@property(assign) unsigned dwTmpByAppid;
@property(assign) unsigned dwTmpSubAppid;
@property(assign) unsigned dwTmpAppid;
@property(assign) unsigned tmpflag;
@property(assign) unsigned dwTmpBitmap;
@property(retain) MemSig* tmpTGT;
@property(retain) MemSig* tmpD2;
@property(retain) id tmpUserPasswd;
@property(retain) MemSig* tmpTGTGT;
@property(retain) NSString* tmpUserAccount;
@property(assign) BOOL hasNewTGTGT;
@property(assign) int iInProcess;
@property(assign) int iLoginState;
@property(assign) id sdkDelegate;
-(int)uploadLog:(id)log;
-(void)reportLoginInfoWithSdk:(id)sdk;
-(unsigned)serverTime;
-(void)networkInfo:(XXStruct_VowasB*)info;
-(void)protocolSmsCodeError:(id)error;
-(void)protocolInputSmsCode:(unsigned)code andTimeout:(unsigned)timeout andPhoneNo:(id)no;
-(void)caculateChallenge;
-(void)protocolShowPicture:(id)picture;
-(void)protocolLoginError:(int)error withErrInfo:(id)errInfo;
-(void)protocolLoginFailed:(int)failed withErrInfo:(id)errInfo;
-(void)protocolLoginSuccessSig:(id)sig andBaseInfo:(id)info andPasswdSig:(id)sig3;
-(id)reslutSigTlvList;
-(void)setOtherAppidList:(unsigned*)list andOtherAppidNum:(unsigned)num andBitmap:(unsigned)bitmap;
-(BOOL)hasPingServer;
-(id)sigTlvDictByTag:(unsigned short)tag;
-(id)basicTlvByTag:(unsigned short)tag;
-(BOOL)addBasicTlv:(id)tlv;
-(BOOL)genTGTGTbyPasswd:(const char*)passwd andUin:(unsigned)uin andFlag:(int)flag outTGTGT:(id)tgtgt;
-(void)disconnect;
-(int)connectToRemortServer;
-(unsigned)pkgHeadUin;
-(void)setLoginAppid:(unsigned)appid andSubAppid:(unsigned)appid2;
-(void)setPkgHeadUin:(unsigned)uin;
-(BOOL)setServerIp:(id)ip andPort:(unsigned short)port;
-(int)pingServer;
-(int)exchangeSig:(id)sig byD2:(id)a2;
-(int)exchangeSig:(id)sig;
-(int)nameToUin;
-(int)refreshPic;
-(int)checkChallenge:(unsigned)challenge;
-(int)refreshSmsCode;
-(int)checkSmsCode;
-(int)checkPic;
-(int)loginWithPasswd:(id)passwd;
-(BOOL)setProcessStep:(id)step andResult:(short)result;
-(BOOL)setProcessEnd:(id)end andResult:(short)result;
-(BOOL)setProcessBegin:(id)begin andType:(int)type andName:(id)name;
-(BOOL)setProcessBegin:(id)begin;
-(void)resetLoginProcess;
-(void)dealloc;
-(id)initWithClientVer:(unsigned short)clientVer andAppVer:(id)ver andPubNo:(unsigned)no andClientType:(unsigned)type andDelegate:(id)delegate;
@end

@interface UserLoginProcessManager : NSObject {
	unsigned short wUserVer;
	NSString* userAppVer;
	unsigned dwUserPubNo;
	unsigned dwUserClientType;
	UserLoginProcess* defaultProcess;
	NSMutableArray* processArray;
}
-(void)dealloc;
-(id)initWithClientVer:(unsigned short)clientVer andAppVer:(id)ver andPubNo:(unsigned)no andClientType:(unsigned)type andDelegate:(id)delegate andSdkDelegate:(id)delegate6;
@end

@interface WtloginPlatformInfo : NSObject {
	NSString* macAddr;
	NSString* ipStr;
	unsigned clientIp;
	NSString* devType;
	NSString* iosVer;
	NSString* osName;
	char* if_names[32];
	char* ip_names[32];
	char* hw_addrs[32];
	unsigned long ip_addrs[32];
	int nextAddr;
	NSString* filePath;
	NSMutableDictionary* wtloginConfigDic;
	NSData* guid;
	unsigned char cIsNew;
	unsigned char cIsDiff;
	unsigned char cIsGetGuid;
	SafeSingleItemWrapper* ksidWrapper;
	MemSig* deviceSig;
	unsigned dwMyVer;
	unsigned dwMyPubNo;
	unsigned dwMyClientType;
	NSString* sigFilePath;
	NSMutableDictionary* sigDictionary;
	RemortServerList* stServerinfo;
	NSString* wtloginIosSdkVer;
	NSString* wtloginBuildTime;
	unsigned wtloginBigVer;
}
@property(readonly, assign) unsigned wtloginBigVer;
@property(readonly, assign) NSString* wtloginBuildTime;
@property(readonly, assign) NSString* wtloginIosSdkVer;
@property(readonly, assign) RemortServerList* stServerinfo;
@property(readonly, assign) NSMutableDictionary* sigDictionary;
@property(readonly, assign) NSMutableDictionary* nameDictionary;
@property(assign) unsigned dwMyClientType;
@property(assign) unsigned dwMyPubNo;
@property(assign) unsigned dwMyVer;
@property(retain) MemSig* deviceSig;
@property(readonly, assign) unsigned char cIsGetGuid;
@property(readonly, assign) unsigned char cIsDiff;
@property(readonly, assign) unsigned char cIsNew;
@property(readonly, assign) NSData* guid;
@property(readonly, assign) NSString* osName;
@property(readonly, assign) NSString* iosVer;
@property(readonly, assign) NSString* devType;
@property(readonly, assign) unsigned clientIp;
@property(readonly, assign) NSString* ipStr;
@property(readonly, assign) NSString* macAddr;
+(id)wtloginCrtCarrierName;
+(int)wtloginNetState;
+(id)dataSafeFilePathWithName:(id)name;
-(id)guidForReport;
-(void)writeSigDataTofile;
-(void)printAllMemsig;
-(id)appMainBundleIndentify;
-(id)appBundleVersion;
-(id)appBundleShortVersionString;
-(id)lastLoginAppVer;
-(id)lastLoginSdkVer;
-(unsigned)lastLoginTime;
-(BOOL)resetLastLoginInfo;
-(unsigned)sigVailidateBySigType:(unsigned)type;
-(BOOL)setSigVailidateTime:(unsigned)time bySigType:(unsigned)type;
-(void)clearNameToUin:(id)uin;
-(BOOL)setNameToConfig:(id)config forUin:(unsigned)uin;
-(void)clearPwdSigUser:(unsigned)user;
-(id)pwdSigUser:(unsigned)user;
-(BOOL)setSavePwdSigToConfig:(id)config forAccount:(unsigned)account;
-(void)resetKeyChain;
-(id)ksidForUser:(id)user;
-(BOOL)setKsidToConfig:(id)config forAccount:(id)account;
-(BOOL)setKsidToKeyChain:(id)keyChain;
-(id)ksidFromKeyChain;
-(BOOL)setTgtgtKeyToKeyChain:(id)keyChain;
-(id)tgtgtKeyFromKeyChain;
-(id)crtCarrierName;
-(int)netState;
-(void)setConfigObject:(id)object forKey:(id)key;
-(id)configObjectForKey:(id)key;
-(void)dealloc;
-(void)wtloginPlatformDataInit;
-(id)init;
-(id)getDeviceVersion;
-(id)macaddress;
-(void)GetHWAddresses;
-(void)GetIPAddresses;
-(void)FreeAddresses;
-(void)InitAddresses;
@end

@interface WloginUserInfo : NSObject <NSCoding> {
	unsigned dwUserUin;
	NSString* sUserMainAccount;
	unsigned short wFaceId;
	unsigned char cAge;
	unsigned char cGender;
	NSString* sNickName;
}
@property(retain) NSString* sNickName;
@property(assign) unsigned char cGender;
@property(assign) unsigned char cAge;
@property(assign) unsigned short wFaceId;
@property(retain) NSString* sUserMainAccount;
@property(assign) unsigned dwUserUin;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)userinfo;
-(id)description;
@end

@interface WloginSdk : NSObject {
	UserLoginProcess* userLoginProcess;
}
-(void)__loginFailed:(int)failed withErrInfo:(id)errInfo;
-(int)serverReplyErrorActionType;
-(unsigned char)serverReplyErrorCode;
-(BOOL)userSigArray:(id)array forUser:(id)user forAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andOtherAppidNum:(unsigned)num andOtherAppidList:(unsigned*)list andExpireTime:(int)time;
-(unsigned short)sigTypeToTlvT:(unsigned)tlvT;
-(id)sigTypeToName:(unsigned)name;
-(void)clearRememberPwdSig:(id)sig;
-(BOOL)hasRememberPwdSig:(id)sig;
-(id)sdkServerInfo;
-(unsigned)sdkClientTypeForApp;
-(unsigned)sdkPubNoForApp;
-(unsigned)sdkVerForApp;
-(unsigned)serverTime;
-(id)sdkSigDictionary;
-(id)sdkNameDictionary;
-(void)caculateChallenge;
-(void)protocolLoginError:(int)error withErrInfo:(id)errInfo;
-(void)protocolInputSmsCode:(unsigned)code andTimeout:(unsigned)timeout andPhoneNo:(id)no;
-(void)protocolShowPicture:(id)picture;
-(void)protocolLoginFailed:(int)failed withErrInfo:(id)errInfo;
-(void)protocolLoginSuccessSig:(id)sig andBaseInfo:(id)info andPasswdSig:(id)sig3;
-(id)getBasicUserInfo:(id)info;
-(BOOL)clearUserLoginData:(id)data;
-(BOOL)clearUserLoginData:(id)data andAppid:(unsigned)appid;
-(int)checkSmsCodeAndLogin:(id)login andSmsInputString:(id)string;
-(int)refreshSmsCode:(id)code;
-(int)checkPictureAndLogin:(id)login andPicInputString:(id)string;
-(int)refreshPictureData:(id)data;
-(int)loginWithPasswd:(id)passwd andAppid:(unsigned)appid andPasswd:(id)passwd3 andSigBitmap:(unsigned)bitmap andLoginFlag:(int)flag;
-(int)loginWithPasswd:(id)passwd andAppid:(unsigned)appid andPasswd:(id)passwd3 andSigBitmap:(unsigned)bitmap andOtherAppidNum:(unsigned)num andOtherAppidList:(unsigned*)list andLoginFlag:(int)flag;
-(int)__loginWithPasswd:(id)passwd andAppid:(unsigned)appid andPasswd:(id)passwd3 andSigBitmap:(unsigned)bitmap andLoginFlag:(int)flag andFrom:(unsigned)from;
-(int)loginByExchangeSig:(id)sig byD2:(id)a2 forAccount:(id)account andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andOtherAppidNum:(unsigned)num andOtherAppidList:(unsigned*)list;
-(int)__loginByExchangeSig:(id)sig byD2:(id)a2 forAccount:(id)account andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andFrom:(unsigned)from;
-(int)loginByExchangeSig:(id)sig byAppid:(unsigned)appid forAppid:(unsigned)appid3 andSigBitmap:(unsigned)bitmap andOtherAppidNum:(unsigned)num andOtherAppidList:(unsigned*)list;
-(int)loginByExchangeSig:(id)sig byAppid:(unsigned)appid forAppid:(unsigned)appid3 andSigBitmap:(unsigned)bitmap;
-(int)__loginByExchangeSig:(id)sig byAppid:(unsigned)appid forAppid:(unsigned)appid3 andSigBitmap:(unsigned)bitmap andFrom:(unsigned)from;
-(int)returnValue:(unsigned char)value;
-(id)initMemUserAppidSig;
-(BOOL)isNeedLoginWithPasswd:(id)passwd andAppid:(unsigned)appid;
-(BOOL)isNameAccount:(id)account;
-(void)setWtloginTimeout:(unsigned short)timeout;
-(void)setRemortServer:(id)server andPort:(unsigned short)port;
-(void)setClientPicInfo:(unsigned short)info CapType:(unsigned char)type PicRetType:(unsigned char)type3;
-(void)setDelegate:(id)delegate;
-(void)setLoginSubAppid:(unsigned)appid;
-(void)setDeviceIMEI:(id)imei;
-(void)setLogLevel:(int)level;
-(void)clearKsid;
-(id)ksidString;
-(BOOL)resetLoginProcess;
-(BOOL)__resetLoginProcess__;
-(id)initWithBasicInfo:(id)basicInfo andClientType:(unsigned)type andDelegate:(id)delegate;
-(void)dealloc;
@end

@interface WloginSdk_v2 : WloginSdk <WloginCallbackProtocol, WloginTranCallbackProtocol_v2> {
	NSString* loginUserAccount;
	unsigned dwLoginAppid;
	unsigned dwLoginOtherNum;
	unsigned adwLoginOtherAppid[10];
	unsigned dwLoginBitmap;
	unsigned dwLoginExTime;
	int loginAllowFlag;
	id loginDelegate;
	NSMutableArray* loginSigArray;
	WloginUserInfo* loginUserInfo;
	NSString* filePath;
	NSMutableDictionary* userLoginInfo;
	int loginFlag;
	BOOL isInProcoess_v2;
}
@property(readonly, assign) NSMutableDictionary* userLoginInfo;
-(void)tranFailed_v2:(id)a2 result:(int)result withMsg:(id)msg;
-(void)tranSuccess_v2:(id)a2 withData:(id)data;
-(void)setLoginDelegate:(id)delegate;
-(void)inputSmsCodeError:(id)error;
-(void)inputSmsCode:(unsigned)code andTimeout:(unsigned)timeout andPhoneNo:(id)no;
-(void)showPicture:(id)picture;
-(void)loginFailed:(int)failed withErrInfo:(id)errInfo;
-(void)loginSuccessSig:(id)sig andBaseInfo:(id)info andPasswdSig:(id)sig3;
-(BOOL)switchUser_v2:(id)a2;
-(BOOL)clearUserLoginData_v2:(id)a2;
-(BOOL)resetLoginProcess_v2;
-(int)checkSmsCodeAndLogin_v2:(id)a2 andDelegate:(id)delegate;
-(int)refreshSmsCode_v2:(id)a2;
-(int)checkPictureAndLogin_v2:(id)a2 andDelegate:(id)delegate;
-(int)refreshPictureData_v2:(id)a2;
-(int)loginWithPasswd_v2:(id)passwd_v2 andPwd:(id)pwd andLoginFlag:(int)flag andDelegate:(id)delegate;
-(id)getBasicUserInfo_v2:(id)a2;
-(id)getMemUserSig_v2:(id)a2 andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap;
-(id)getMemUserSig_v2:(id)a2 andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andOtherAppidNum:(unsigned)num andOtherAppidList:(unsigned*)list;
-(int)getUserSigAndBasicInfoByMSF_v2:(id)a2 andD2:(id)a22 forAccount:(id)account andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andOtherAppidNum:(unsigned)num andOtherAppidList:(unsigned*)list andExpireTime:(unsigned)time andAllow:(int)allow andDelegate:(id)delegate;
-(int)getUserSigAndBasicInfoByExchage_v2:(id)a2 andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andDelegate:(id)delegate;
-(int)getUserSigAndBasicInfoByExchage_v2:(id)a2 andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andOtherAppidNum:(unsigned)num andOtherAppidList:(unsigned*)list andDelegate:(id)delegate;
-(int)getUserSigAndBasicInfoByLogin_v2:(id)a2 andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andPwd:(id)pwd andLoginFlag:(int)flag andDelegate:(id)delegate;
-(int)getUserSigAndBasicInfoByLogin_v2:(id)a2 andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andOtherAppidNum:(unsigned)num andOtherAppidList:(unsigned*)list andPwd:(id)pwd andLoginFlag:(int)flag andDelegate:(id)delegate;
-(int)getUserSigAndBasicInfo_v2:(id)a2 andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andExpireTime:(unsigned)time andAllow:(int)allow andDelegate:(id)delegate;
-(int)__getUserSigAndBasicInfo_v2:(int)a2;
-(int)getUserSigAndBasicInfo_v2:(id)a2 andAppid:(unsigned)appid andSigBitmap:(unsigned)bitmap andOtherAppidNum:(unsigned)num andOtherAppidList:(unsigned*)list andExpireTime:(unsigned)time andAllow:(int)allow andDelegate:(id)delegate;
-(void)callbackDelegateSecc;
-(BOOL)checkLocalSigValid_v2:(id)a2 andAppid:(unsigned)appid andSigType:(unsigned)type;
-(BOOL)isNeedLoginWithPasswd_v2:(id)passwd_v2 andAppid:(unsigned)appid;
-(id)lastLoginUser;
-(BOOL)isAutoLogin_v2:(id)a2;
-(BOOL)isRemeberPassword_v2:(id)a2;
-(BOOL)hasPasswordSig_v2:(id)a2;
-(void)dealloc;
-(id)initWithBasicInfo_v2:(id)basicInfo_v2 withLogDelegaet:(id)logDelegaet;
-(id)initWithBasicInfo_v2:(id)basicInfo_v2;
@end

@interface WloginTranSdk : NSObject {
	id transport;
	id tranDelegate;
	int iInTranProcess;
	WloginSdk* wloginSdk;
}
-(void)tranSelfFailed:(id)failed reslut:(int)reslut withMsg:(id)msg;
-(void)tranSelfSuccess:(id)success withData:(id)data;
-(int)sendToWtloginTranMSF:(unsigned)wtloginTranMSF andRole:(unsigned)role andData:(id)data;
-(int)sendToWtloginTran:(unsigned)wtloginTran andRole:(unsigned)role andData:(id)data;
-(int)sendToWtloginTran:(id)wtloginTran andAppid:(unsigned)appid andRole:(unsigned)role andData:(id)data;
-(int)sendToWtloginTranMSF:(id)wtloginTranMSF andAppid:(unsigned)appid andRole:(unsigned)role andData:(id)data;
-(void)setTranDelegate:(id)delegate;
-(BOOL)resetTranProcess;
-(int)returnTranValue:(unsigned char)value;
-(void)dealloc;
-(id)initWithWtloginSdk:(id)wtloginSdk andDelegate:(id)delegate;
@end

@interface AccountCmd : NSObject <WloginProtocolBuff> {
	unsigned short wCmd;
	unsigned short wSubCmd;
	unsigned char cResult;
	unsigned char cKeyType;
	NSData* keyData;
	unsigned long long ddwUin;
	unsigned dwAppid;
}
@property(assign) unsigned dwAppid;
@property(assign) unsigned long long ddwUin;
@property(retain) NSData* keyData;
@property(assign) unsigned char cKeyType;
@property(assign) unsigned char cResult;
@property(assign) unsigned short wSubCmd;
@property(assign) unsigned short wCmd;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(id)decodeAccountInfo:(char**)info andBuffLen:(int*)len;
-(int)encodeAccountHead:(id)head withPkgLen:(unsigned short)pkgLen;
-(int)decodeAccountHead:(char**)head andBuffLen:(int*)len;
-(id)init;
@end

@interface AccountCmd_0x1 : AccountCmd {
	NSArray* reqAttrArray;
	NSMutableArray* rspAccountArray;
}
@property(readonly, assign) NSMutableArray* rspAccountArray;
@property(retain) NSArray* reqAttrArray;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface AccountCmd_0x2 : AccountCmd {
	NSString* account;
	NSString* verifyCode;
	NSArray* reqAttrArray;
	unsigned dwTimeout;
	unsigned dwNextTime;
}
@property(assign) unsigned dwNextTime;
@property(assign) unsigned dwTimeout;
@property(retain) NSArray* reqAttrArray;
@property(copy) NSString* verifyCode;
@property(copy) NSString* account;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface AccountCmd_0x3 : AccountCmd {
	NSString* account;
}
@property(copy) NSString* account;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface WtloginAccountInfo : NSObject {
	NSString* account;
	NSMutableArray* attrArray;
}
@property(retain) NSMutableArray* attrArray;
@property(copy) NSString* account;
-(void)dealloc;
-(id)init;
@end

@interface WtloginAccountAttrInfo : NSObject {
	unsigned short wAttrId;
	NSData* attrData;
}
@property(retain) NSData* attrData;
@property(assign) unsigned short wAttrId;
-(void)dealloc;
-(id)init;
@end

@interface WtloginAccountSdk : NSObject {
}
-(void)tranFailed:(int)failed withMsg:(id)msg;
-(void)tranSuccessWithData:(id)data;
-(int)accountUnBindAccount:(id)account;
-(int)accountSubmitBindCode:(id)code;
-(int)accountBindAccount:(id)account andAttr:(id)attr;
-(int)searchAccountWithAttr:(id)attr;
-(void)resetRegProcess;
-(void)dealloc;
-(id)initAccountWithWtloginSdk:(id)wtloginSdk andUin:(unsigned)uin andLoginAppid:(unsigned)appid andSkey:(id)skey andDelegate:(id)delegate;
@end

@interface RegisterCmd : NSObject <WloginProtocolBuff> {
	unsigned short wVer;
	unsigned short wCmd;
	unsigned char cReplayCode;
	NSData* tokenData;
	NSData* picData;
	NSData* picSigData;
	NSString* upSmsNo;
	NSString* upSmsMsg;
	NSString* jumpUrl;
	NSString* noticeInfo;
	NSString* returnInfo;
}
@property(copy) NSString* returnInfo;
@property(copy) NSString* noticeInfo;
@property(copy) NSString* jumpUrl;
@property(copy) NSString* upSmsMsg;
@property(copy) NSString* upSmsNo;
@property(retain) NSData* picSigData;
@property(retain) NSData* picData;
@property(retain) NSData* tokenData;
@property(assign) unsigned char cReplayCode;
@property(assign) unsigned short wVer;
@property(assign) unsigned short wCmd;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)decodeReturnInfo:(char**)info andBuffLen:(int*)len;
-(int)decodeNoticeInfo:(char**)info andBuffLen:(int*)len;
-(int)decodeUrl:(char**)url andBuffLen:(int*)len;
-(int)decodeUpSms:(char**)sms andBuffLen:(int*)len;
-(int)decodeToken:(char**)token andBuffLen:(int*)len;
-(int)decodePic:(char**)pic andBuffLen:(int*)len;
-(int)encodeRegHead:(id)head withPkgLen:(unsigned short)pkgLen;
-(int)decodeRegHead:(char**)head andBuffLen:(int*)len;
-(void)dealloc;
-(id)init;
@end

@interface RegisterCmd_0x1 : RegisterCmd {
	NSString* phoneNo;
	NSString* osVer;
	NSString* appName;
	NSString* appVer;
	unsigned char cCountry;
	unsigned char cLang;
	unsigned char cSigType;
	unsigned dwAppid;
	unsigned dwClientIp;
	NSString* imei;
	NSString* iccid;
	unsigned dwVerifyRst;
}
@property(copy) NSString* iccid;
@property(copy) NSString* imei;
@property(assign) unsigned dwClientIp;
@property(assign) unsigned dwAppid;
@property(assign) unsigned dwVerifyRst;
@property(assign) unsigned char cSigType;
@property(assign) unsigned char cLang;
@property(assign) unsigned char cCountry;
@property(copy) NSString* appVer;
@property(copy) NSString* appName;
@property(copy) NSString* osVer;
@property(copy) NSString* phoneNo;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface RegisterCmd_0x2 : RegisterCmd {
	unsigned char cType;
	NSString* verifyCode;
	unsigned dwVerifyRst;
}
@property(assign) unsigned dwVerifyRst;
@property(assign) unsigned char cType;
@property(copy) NSString* verifyCode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface RegisterCmd_0x3 : RegisterCmd {
	NSString* phoneNo;
	unsigned dwVerifyRst;
	unsigned short wNextCheckTime;
	unsigned short wTotalTimeOver;
	NSString* msgCode;
	BOOL msgCodeMd5[16];
}
@property(assign) unsigned short wTotalTimeOver;
@property(assign) unsigned short wNextCheckTime;
@property(assign) unsigned dwVerifyRst;
@property(copy) NSString* phoneNo;
@property(copy) NSString* msgCode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface RegisterCmd_0x4 : RegisterCmd {
	unsigned dwVerifyRst;
	unsigned short wNextResendTime;
	unsigned short wTotalTimeOver;
}
@property(assign) unsigned short wTotalTimeOver;
@property(assign) unsigned short wNextResendTime;
@property(assign) unsigned dwVerifyRst;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface RegisterCmd_0x5 : RegisterCmd {
	NSString* msgCode;
	BOOL msgCodeMd5[16];
}
@property(copy) NSString* msgCode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface RegisterCmd_0x6 : RegisterCmd {
	NSString* msgCode;
	NSString* userPwd;
	unsigned long long llUin;
	BOOL msgCodeMd5[16];
	NSData* freeSigData;
	unsigned char cForceFlag;
	NSString* regAccount;
	unsigned char cLang;
	NSString* jumpEmailUrl;
	NSString* appUrl;
}
@property(copy) NSString* appUrl;
@property(copy) NSString* jumpEmailUrl;
@property(assign) unsigned char cLang;
@property(copy) NSString* regAccount;
@property(assign) unsigned char cForceFlag;
@property(retain) NSData* freeSigData;
@property(assign) unsigned long long llUin;
@property(copy) NSString* userPwd;
@property(copy) NSString* msgCode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface RegisterCmd_0x7 : RegisterCmd {
	unsigned char cQueryType;
	NSString* queryStr;
	unsigned dwAppid;
}
@property(assign) unsigned dwAppid;
@property(copy) NSString* queryStr;
@property(assign) unsigned char cQueryType;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface WloginRegisterSdk : NSObject <WloginTranCallbackProtocol> {
}
-(id)phoneNoForReg;
-(void)tranFailed:(int)failed withMsg:(id)msg;
-(void)tranSuccessWithData:(id)data;
-(int)registerGetAccount:(id)account;
-(int)registerSubmitSmsCode:(id)code;
-(int)registerResendSms;
-(int)registerCheckUpSmsState:(id)state;
-(int)registerCheckPicCode:(id)code andType:(unsigned char)type;
-(int)registerSubmitPhoneNo:(id)no andAppName:(id)name andAppVer:(id)ver;
-(int)registerCheckAccount:(id)account andType:(int)type;
-(void)resetRegProcess;
-(void)setPicType:(int)type;
-(void)setCountry:(int)country andLanguage:(int)language;
-(void)dealloc;
-(id)initWithRegWtloginSdk:(id)regWtloginSdk andCountry:(int)country andLang:(int)lang andAppid:(unsigned)appid andDelegate:(id)delegate;
@end

@interface WloginRegisterSdk_v2 : NSObject <WloginTranCallbackProtocol> {
}
-(id)phoneNoForReg;
-(void)tranFailed:(int)failed withMsg:(id)msg;
-(void)tranSuccessWithData:(id)data;
-(BOOL)registerEmailHandleOpenURL:(id)url;
-(int)registerGetAccount:(id)account;
-(int)registerSubmitSmsCode:(id)code;
-(int)registerResendSms;
-(int)registerCheckUpSmsState:(id)state;
-(int)registerSubmitPhoneNo:(id)no andAppName:(id)name andAppVer:(id)ver;
-(int)registerCheckAccount:(id)account andType:(int)type;
-(BOOL)checkEmailFormat:(id)format;
-(void)resetRegProcess;
-(void)setAppUrl:(id)url;
-(void)setPicType:(int)type;
-(void)setCountry:(int)country andLanguage:(int)language;
-(void)dealloc;
-(id)initWithRegWtloginSdk:(id)regWtloginSdk andCountry:(int)country andLang:(int)lang andAppid:(unsigned)appid andDelegate:(id)delegate;
@end

@interface DevRegCmd_0x1 : DevRegCmd {
	unsigned short wDevType;
	NSString* iosVer;
	unsigned dwSSOVer;
	unsigned short wNetType;
	unsigned short wCertVer;
	NSData* token;
	unsigned char cClearFlag;
	NSString* identifyStr;
}
@property(copy) NSString* identifyStr;
@property(assign) unsigned char cClearFlag;
@property(copy) NSData* token;
@property(assign) unsigned short wCertVer;
@property(assign) unsigned short wNetType;
@property(assign) unsigned dwSSOVer;
@property(copy) NSString* iosVer;
@property(assign) unsigned short wDevType;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface DevRegCmd_0x2 : DevRegCmd {
	unsigned short wOffLineType;
}
@property(assign) unsigned short wOffLineType;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(id)init;
@end

@interface DevRegCmd_0x3 : DevRegCmd {
	unsigned char cOverFlag;
	unsigned short wMsgCount;
}
@property(assign) unsigned short wMsgCount;
@property(assign) unsigned char cOverFlag;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(id)init;
@end

@interface DevRegCmd : NSObject <WloginProtocolBuff> {
	unsigned char cStx;
	unsigned char cEtx;
	unsigned short wCmd;
	NSData* guid;
	struct {
		unsigned short wPkgLen;
		unsigned short wVer;
		unsigned short wCmd;
		unsigned dwSeq;
		unsigned char cResult;
		unsigned dwAppid;
		unsigned dwSubAppid;
		unsigned long long ddwUin;
		unsigned char sGuid[16];
		unsigned long long ddwResv;
	} stPushPkgHead;
}
@property(copy) NSData* guid;
@property(assign) unsigned short wCmd;
@property(assign) unsigned char cEtx;
@property(assign) unsigned char cStx;
-(unsigned char)PkgResult;
-(void)SetPkgResult:(unsigned char)result;
-(unsigned)PkgAppid;
-(id)PkgGuid;
-(void)SetPkgGuid:(id)guid;
-(void)SetPkgAppid:(unsigned)appid andSubAppid:(unsigned)appid2;
-(unsigned long long)PkgUin;
-(void)SetPkgUin:(unsigned long long)uin;
-(unsigned short)PkgCmd;
-(void)SetPkgCmd:(unsigned short)cmd;
-(unsigned short)PkgLen;
-(void)SetPkgLen:(unsigned short)len;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)decodePushPkgHead:(char**)head andBuffLen:(int*)len;
-(int)encodePushPkgHead:(id)head;
-(void)dealloc;
-(id)init;
@end

@interface DevRegSdk : NSObject <WloginTranCallbackProtocol> {
	id devRegDelegate;
	unsigned dwPushAppid;
	unsigned dwPushSubAppid;
	unsigned long long ddwAccountUin;
	WloginTranSdk* devRegTransportSdk;
	int iDevRegState;
	DevRegCmd* devRegCmd;
}
-(void)tranFailed:(int)failed withMsg:(id)msg;
-(void)tranSuccessWithData:(id)data;
-(int)iosDevReport:(int)report withMsgCount:(unsigned short)msgCount;
-(int)iosDevOffLine:(int)line;
-(int)iosDevReg:(id)reg withClearFlag:(int)clearFlag;
-(void)dealloc;
-(id)initWithDevRegSdk:(id)devRegSdk andAppid:(unsigned)appid andSubAppid:(unsigned)appid3 andUin:(unsigned long long)uin andDelegate:(id)delegate;
-(id)initWithDevRegSdk:(id)devRegSdk andAppid:(unsigned)appid andUin:(unsigned long long)uin andDelegate:(id)delegate;
@end

@interface QRCodeCmd_0x3 : QRCodeCmd {
	NSString* reserved;
	NSData* qrCodeSig;
	unsigned char cLoginSigType;
	NSData* clientSt;
	NSData* guid;
	unsigned dwAppid;
	unsigned char cPlatForm;
	unsigned short wAppVersion;
	unsigned long long ddwUin;
	unsigned short wTlvNum;
	unsigned short awTlvFieled[64];
	NSMutableDictionary* rspTlvDataDic;
	unsigned dwStTime;
	NSString* appName;
	NSString* errMsg;
}
@property(readonly, assign) NSMutableDictionary* rspTlvDataDic;
@property(copy) NSString* errMsg;
@property(copy) NSString* appName;
@property(assign) unsigned dwStTime;
@property(assign) unsigned long long ddwUin;
@property(assign) unsigned short wAppVersion;
@property(assign) unsigned char cPlatForm;
@property(retain) NSData* guid;
@property(retain) NSData* clientSt;
@property(copy) NSData* qrCodeSig;
@property(assign) unsigned dwAppid;
@property(copy) NSString* reserved;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)addReqTlv:(unsigned short)tlv;
-(void)dealloc;
-(id)init;
@end

@interface QRCodeCmd_0x4 : QRCodeCmd {
	NSString* reserved;
	unsigned dwAppid;
	NSData* qrCodeSig;
	unsigned char cLoginSigType;
	NSData* clientSt;
	unsigned long long ddwUin;
	NSMutableDictionary* reqTlvDataDic;
	unsigned dwStTime;
	NSString* appName;
	NSString* errMsg;
}
@property(copy) NSString* errMsg;
@property(copy) NSString* appName;
@property(assign) unsigned dwStTime;
@property(assign) unsigned long long ddwUin;
@property(retain) NSData* clientSt;
@property(copy) NSData* qrCodeSig;
@property(assign) unsigned dwAppid;
@property(copy) NSString* reserved;
-(void)setTlvDic:(id)dic;
-(void)setTlv:(unsigned short)tlv andData:(id)data;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encode:(id)encode;
-(void)dealloc;
-(id)init;
@end

@interface QRCodeCmd : NSObject <WloginProtocolBuff> {
	unsigned char cStx;
	unsigned char cEtx;
	unsigned short wCmd;
	unsigned char cResult;
	struct {
		unsigned short wPkgLen;
		unsigned short wCommand;
		unsigned short wServerId;
		unsigned dwClientIP;
		unsigned short wClientPort;
		unsigned dwConnIP;
		unsigned short wConnPort;
		unsigned dwInterfaceIP;
		unsigned short wInterfacePort;
		unsigned char cProcessSeq;
		unsigned char cDbID;
		unsigned short wPad;
	} stDBPkgHead;
	struct {
		unsigned short wVersion;
		unsigned dwSeq;
		unsigned long long ddwUin;
	} stCldPkgHead;
}
@property(assign) unsigned char cResult;
@property(assign) unsigned short wCmd;
@property(assign) unsigned char cEtx;
@property(assign) unsigned char cStx;
-(unsigned long long)PkgUin;
-(void)SetPkgUin:(unsigned long long)uin;
-(unsigned)PkgClientIP;
-(void)SetPkgClientIP:(unsigned)ip;
-(unsigned short)PkgCmd;
-(void)SetPkgCmd:(unsigned short)cmd;
-(unsigned short)PkgLen;
-(void)SetPkgLen:(unsigned short)len;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(int)encodeQRCodeCldPkgHead:(id)head;
-(int)decodeQRCodeCldPkgHead:(char**)head andBuffLen:(int*)len;
-(int)encodeQRCodeDBPkgHead:(id)head;
-(int)decodeQRCodeDBPkgHead:(char**)head andBuffLen:(int*)len;
-(id)init;
@end

@interface QRCodeSdk : NSObject <WloginTranCallbackProtocol> {
	id qrCodeDelegate;
	unsigned long long ddwAccountUin;
	MemSig* accountTGTSig;
	WloginTranSdk* qrCodeTransportSdk;
	WloginSdk* wtloginSdk;
	int iQRCodeState;
	QRCodeCmd* qrCodeCmd;
	NSMutableDictionary* uploadTlvDataDic;
}
-(void)tranFailed:(int)failed withMsg:(id)msg;
-(void)tranSuccessWithData:(id)data;
-(BOOL)addConfirmUploadTlv:(int)tlv andData:(id)data;
-(int)confirmQRCode:(id)code withT:(int)t andData:(id)data;
-(int)verifyQRCode:(id)code forAccount:(id)account andAppid:(unsigned)appid;
-(id)getVerifyTlvDataBy:(int)by;
-(unsigned)getAppidByLoginQRCode:(id)code;
-(BOOL)isValiedLoginQRCode:(id)code;
-(id)parseQRCode:(id)code;
-(void)dealloc;
-(id)initWithQRCodeSdk:(id)qrcodeSdk andDelegate:(id)delegate;
@end

@interface SocketNetworkAdapter : NSObject <NSURLConnectionDelegate, NSURLConnectionDataDelegate, MSFConnectProtocol> {
	LoginAsyncSocket* asyncSocket;
	id<SocketNetworkAdapterProtocol> adapterDelegate;
	NSMutableURLRequest* urlRequest;
	NSURLConnection* httpRequest;
	NSMutableData* rspData;
	NSMutableArray* rspReadArray;
	NSTimer* adapterTimer;
	MSFConnect* msfConnect;
}
-(void)msfconnection:(id)msfconnection didFailWithError:(id)error param:(id)param;
-(void)msfconnection:(id)msfconnection didReceiveData:(id)data param:(id)param;
-(void)msfconnection:(id)msfconnection didConnectToHost:(id)host port:(unsigned short)port param:(id)param;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)callbackProcessTimer;
-(void)socket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)socketDidDisconnect:(id)socket withError:(id)error;
-(void)socket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout tag:(long)tag;
-(void)writeData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port withTimeout:(double)timeout error:(id*)error;
-(BOOL)isConnected;
-(void)disconnect;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface WloginTlv_0x132 : WloginTlv {
	NSData* accessToken;
	unsigned dwExpireTime;
	NSData* openId;
}
@property(copy) NSData* openId;
@property(assign) unsigned dwExpireTime;
@property(retain) NSData* accessToken;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(void)dealloc;
@end

@interface WloginTlv_0x138 : WloginTlv {
}
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x147 : WloginTlv {
	unsigned dwAppVerID;
	unsigned short wAppVerLen;
	NSString* sAppVer;
	unsigned short wAppSigLen;
	NSString* sAppSig;
}
@property(copy) NSString* sAppSig;
@property(assign) unsigned short wAppSigLen;
@property(copy) NSString* sAppVer;
@property(assign) unsigned short wAppVerLen;
@property(assign) unsigned dwAppVerID;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x149 : WloginTlv {
	unsigned short wTipsType;
	NSString* sTipsTitle;
	NSString* sTipsContent;
	NSString* sOtherInfo;
}
@property(copy) NSString* sOtherInfo;
@property(copy) NSString* sTipsContent;
@property(copy) NSString* sTipsTitle;
@property(assign) unsigned short wTipsType;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginErrInfo : NSObject {
	unsigned short wErrorCode;
	NSString* sErrorTitle;
	NSString* sErrorMsg;
	unsigned short wErrorAddType;
	NSString* sErrorAdd;
}
@property(copy) NSString* sErrorAdd;
@property(assign) unsigned short wErrorAddType;
@property(copy) NSString* sErrorMsg;
@property(copy) NSString* sErrorTitle;
@property(assign) unsigned short wErrorCode;
@end

@interface WloginTlv_0x146 : WloginTlv {
	unsigned short wErrorVer;
	unsigned short wErrorCode;
	NSString* sErrorTitle;
	NSString* sErrorMsg;
	unsigned short wErrorInfoType;
	NSString* sErrorInfo;
}
@property(copy) NSString* sErrorInfo;
@property(assign) unsigned short wErrorInfoType;
@property(copy) NSString* sErrorMsg;
@property(copy) NSString* sErrorTitle;
@property(assign) unsigned short wErrorCode;
@property(assign) unsigned short wErrorVer;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface ErrorLogReport : NSObject <NSURLConnectionDataDelegate> {
	NSString* userAccount;
	unsigned appid;
	WloginSdk* wloginSdk;
	unsigned uin_;
	NSMutableArray* logArray_;
	BOOL bOutOfSize_;
	BOOL bOutOfSizeAndHadSync_;
	UploadLogFile* uploadTool_;
}
@property(retain, nonatomic) UploadLogFile* uploadTool_;
@property(assign, nonatomic) BOOL bOutOfSizeAndHadSync_;
@property(assign, nonatomic) BOOL bOutOfSize_;
@property(retain, nonatomic) NSMutableArray* logArray_;
@property(assign, nonatomic) unsigned uin_;
@property(retain, nonatomic) WloginSdk* wloginSdk;
@property(assign, nonatomic) unsigned appid;
@property(retain, nonatomic) NSString* userAccount;
+(id)generateDate;
+(id)_filePathWithDirName:(id)dirName andFileName:(id)name;
+(id)_dayByBase64:(id)a64;
+(id)_curDay;
+(id)singleton;
-(id)_dirPath;
-(int)uploadLog;
-(int)uploadLogFromDay:(long)day toDay:(long)day2;
-(int)uploadLogWithDay:(id)day;
-(id)readLog;
-(int)syncLog;
-(int)writeLog:(id)log;
-(void)dealloc;
-(id)init;
@end

@interface UploadLogFile : NSObject {
	NSMutableURLRequest* urlRequest_;
}
@property(retain, nonatomic) NSMutableURLRequest* urlRequest_;
-(void)uploadLogPkg:(id)pkg delegate:(id)delegate succSel:(SEL)sel faildSel:(SEL)sel4;
-(id)makeLogPkg:(int)pkg data:(id)data uin:(unsigned)uin appid:(unsigned)appid st:(id)st createTime:(long)time;
-(void)dealloc;
-(id)init;
@end

@interface WloginTlv_0x150 : WloginTlv {
	unsigned dwBitmap;
	BOOL cNet;
}
@property(assign) BOOL cNet;
@property(assign) unsigned dwBitmap;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface ProcessLogReport : NSObject {
	NSString* filePath;
	NSMutableArray* loginArray;
	NSArray* loginArrayForSend;
	WloginTranSdk* transportSdk;
	NSRecursiveLock* locker;
	UploadLogFile* uploadTool;
}
-(int)reportErrorLog:(id)log andAccount:(id)account andAppid:(unsigned)appid;
-(void)reportLog:(id)log andAccount:(id)account andAppid:(unsigned)appid;
-(void)tranFailed:(int)failed withMsg:(id)msg;
-(void)tranSuccessWithData:(id)data;
-(void)reportFailed;
-(void)reportSucc;
-(id)jsonLoginString;
-(id)jsonLoginData;
-(void)writeTofile;
-(void)addObject:(id)object;
-(void)dealloc;
-(id)init;
@end

@interface MSFConnect : NSObject <NSURLConnectionDelegate, NSURLConnectionDataDelegate> {
	id<MSFConnectProtocol> msfDelegate;
	NSMutableData* rspData;
	NSMutableURLRequest* urlRequest;
	NSURLConnection* httpRequest;
}
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)cancel;
-(int)sendData:(id)data withTimeout:(double)timeout param:(id)param delegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface QQBizAgent : NSObject {
	NSMutableArray* _plugs;
	NSMutableArray* _delegates;
	NSThread* _TaskThread;
}
+(BOOL)canParseURL:(id)url;
+(id)doRequest:(id)request;
+(id)handle:(id)handle;
+(id)GetInstance;
-(void).cxx_destruct;
-(id)dispatch:(id)dispatch;
-(void)onLogout;
-(void)onLoginSuccess;
-(void)UpdateKeyWTL;
-(void)dealloc;
-(id)init;
@end

@interface QQQRCode : NSObject {
@private
	id<QQBizDelegate> delegate;
}
@property(retain, nonatomic) id<QQBizDelegate> delegate;
-(void).cxx_destruct;
-(id)handleDecodeQRCodeImageDelay:(id)delay;
-(id)RestartReadQRCode:(id)code;
-(id)handleDecodeQRCodeImage:(id)image;
-(id)queryComponentsOfURL:(id)url;
-(id)getMQQRCodeBizUrl:(id)url;
-(id)dealOtherAppQRCodeResultDelay:(id)delay;
-(void)dealOtherAppQRCodeResult:(id)result;
-(id)createQRCodeImage:(id)image;
-(id)generateQRCode:(id)code;
-(id)readQRCode:(id)code;
-(id)handle:(id)handle;
@end

@interface QQHostApi : NSObject {
@private
	id<QQBizDelegate> _hostApiDelegate;
}
@property(retain, nonatomic) id<QQBizDelegate> hostApiDelegate;
+(id)getUinAndClientKey;
+(id)APICaller;
+(BOOL)isPassViewShow;
+(BOOL)isLogin;
+(BOOL)addDataReportLog:(id)log;
+(BOOL)gotoQRCodeScanPage:(id)page;
+(id)getUISkinsImage_navigationViewImage:(id)image;
+(id)getUISkinsImage_IconImageForName:(id)name cache:(BOOL)cache;
+(id)getAccountList;
+(id)getAccountKey:(id)key;
+(id)getSkinsData;
+(id)getKey;
+(id)getGroupInfo:(id)info;
+(id)getUserInfo;
+(id)QQCleanTips;
+(id)QQLoadingTips:(id)tips;
+(id)QQTips:(id)tips success:(BOOL)success;
+(id)QQAlart:(int)alart button:(id)button title:(id)title message:(id)message delegate:(id)delegate tag:(int)tag;
+(BOOL)showPublicAccountCard:(unsigned)card navigationController:(id)controller;
+(BOOL)shareQRCodeContent:(id)content;
+(BOOL)shareQRCodeCard:(id)card;
+(BOOL)gotoGroupPage:(id)page;
+(BOOL)gotoFriendPage:(id)page;
+(BOOL)setDelegate:(id)delegate;
+(id)GetInstance;
-(void).cxx_destruct;
-(void)protocol:(id)protocol forwardInvocation:(id)invocation;
@end

@interface TCQRCodeCardControllerViewController : QQViewController_L <UIActionSheetDelegate, TencentRequestDelegate, ITCQRCodeLayoutDataSource> {
	UIView* _container;
	UIImageView* _containerBkg;
	NSString* _uin;
	NSString* _skey;
	int _cardSource;
	NSString* _groupUin;
	NSString* _qrcodeText;
	int _countRefetchSkey;
@private
	TencentRequest* _request;
	TCQRCodeServerTemplateManager* _qrCodeSvrTplMgr;
	TCQRCodeLocalTemplateManager* _qrCodeLocalTplMgr;
	NSString* _configId;
	NSString* _lastTplSrc;
	int _lastSignalChannelSeq;
	TCQRCodeTemplate* _loadingTemplate;
	UIImage* _headIcon;
	UIImage* _logoIcon;
	NSString* _nickname;
	NSString* _tips;
}
@property(retain, nonatomic) NSString* lastTplSrc;
@property(retain, nonatomic) NSString* configId;
@property(retain, nonatomic) TCQRCodeLocalTemplateManager* qrCodeLocalTplMgr;
@property(retain, nonatomic) TCQRCodeServerTemplateManager* qrCodeSvrTplMgr;
@property(retain, nonatomic) TencentRequest* request;
@property(retain, nonatomic) NSString* tips;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) UIImage* logoIcon;
@property(retain, nonatomic) UIImage* headIcon;
@property(retain, nonatomic) NSString* qrcodeText;
@property(retain, nonatomic) NSString* groupUin;
@property(assign, nonatomic) int cardSource;
@property(retain, nonatomic) NSString* skey;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) UIImageView* containerBkg;
@property(retain, nonatomic) UIView* container;
-(void).cxx_destruct;
-(void)signalChannelErrorNote:(id)note;
-(void)signalChannelMsgNote:(id)note;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didLoad:(id)load dat:(id)dat;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)handleQRCodeEncodeResult:(id)result;
-(id)buildMsgBody;
-(void)updateQRCodeCardWithTemplate:(id)aTemplate;
-(void)updateQRCodeCard;
-(void)fetchQRCodeText;
-(void)saveCard;
-(void)shareCard;
-(void)qrcard:(id)qrcard didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)moreActionHandle:(int)handle;
-(void)showMoreOptions;
-(void)prepareUI;
-(void)viewDidDisappear:(BOOL)view;
-(void)loadLastConfig;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)saveLastConfig;
-(void)onTemplateLoadTimeout;
-(void)templateDidLoadNote:(id)aTemplate;
-(void)loginSuccess;
-(id)init;
-(void)dealloc;
@end

@interface MQQRCodeReaderViewController : QRCodeScanViewController <QRCodeScanDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, QBAAlertViewDelegate> {
@private
	QzoneQRCodeReaderOverlayView* overlayView;
	NSString* scanResult;
	BOOL ishasResult;
	BOOL isFromLibrary;
	UIImage* imageFromLibrary;
	int retryCount;
	NSString* scanResultFromLibrary;
	UIImageView* _coverView;
	BOOL _shouldShutterAnimation;
	BOOL _isAppear;
	BOOL _isAppearForLibImage;
	UIImagePickerController* _photoPicker;
	UIView* _toolbar;
	BOOL _torchIsOn;
	UIButton* _torchBnt;
	id<MQQRCodeReaderDelegate> _hostDelegate;
	CGRect _startImageRectBottom;
	CGRect _startImageRectTop;
	BOOL _isOpenByAppHasResult;
	BOOL _isDecodeImageFromOut;
	UILabel* _label;
	UIActivityIndicatorView* _activeIndicator;
}
@property(assign) BOOL isDecodeImageFromOut;
@property(assign) BOOL isOpenByAppHasResult;
@property(assign) CGRect startImageRectBottom;
@property(assign) CGRect startImageRectTop;
@property(retain, nonatomic) UIButton* torchBnt;
@property(assign, nonatomic) BOOL torchIsOn;
@property(assign, nonatomic) id<MQQRCodeReaderDelegate> hostDelegate;
@property(retain, nonatomic) NSString* scanResult;
@property(retain, nonatomic) UIActivityIndicatorView* activeIndicator;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIView* toolbar;
@property(retain, nonatomic) QzoneQRCodeReaderOverlayView* overlayView;
+(id)GetSeparateImageByIndex:(id)index index:(int)index2;
+(int)GetImageSeparateCountIfNeed:(id)need;
+(id)cutImageWithRect:(id)rect cutToFrame:(CGRect)frame;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)gotoQRCodeCard;
-(id)scaleToSizeByAspectMax:(id)sizeByAspectMax TargetSize:(float)size;
-(BOOL)zxingAndZBarDecode:(id)decode;
-(void)scanLibImageFail:(id)fail;
-(void)decodeLibImageThread:(id)thread;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)bringShutterViewToFront;
-(void)shutterAnimation;
-(void)prepareAnimation;
-(void)beginStartAnimation;
-(void)addStartView;
-(void)removeAnalyingView;
-(void)addAnalyingView;
-(void)restartScan;
-(void)resetTorchBnt;
-(void)resetTorch;
-(BOOL)turnTorchOn:(bool)on;
-(void)onTurnTorchOn;
-(void)dealWithOtherString:(id)otherString;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)dealWithScanResult:(id)scanResult;
-(void)scanViewControllerDidCancel:(id)scanViewController;
-(void)scanViewController:(id)controller failWithReason:(id)reason;
-(void)scanViewController:(id)controller didScanResult:(id)result;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)decodeImageFromLibrary;
-(void)setDecodeImage:(id)image;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
-(void)showPictureLibraries;
-(void)selectMutablePhotoFromLibrary;
-(BOOL)isAppear;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)addFitToolbar____________42_del;
-(void)addFitToolbar;
-(void)viewDidLoad;
-(void)cancel;
-(void)didEnterBackGround;
-(void)willEnterForGround;
-(unsigned)supportedInterfaceOrientations;
-(void)gotoResultVCWhenHasResult;
-(void)setOpenByAppByQRCodeResult:(id)result;
-(void)initParam;
-(id)initWithDelegate:(id)delegate;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface QRCodeScanViewController : QQViewController_L <DecoderDelegate, UINavigationControllerDelegate, AVCaptureVideoDataOutputSampleBufferDelegate> {
	NSSet* readers;
	ParsedResult* parsedResult;
	id<QRCodeScanDelegate> delegate;
	AVCaptureSession* captureSession;
	AVCaptureVideoPreviewLayer* prevLayer;
	BOOL decoding;
	AVCaptureDevice* captureDevice;
	int dwCount;
	long torchTime;
	long focusTime;
	unsigned char lastFocus;
	unsigned char lastRed;
	unsigned char lastGreen;
	unsigned char lastBlue;
	id monitorTarget;
	SEL monitorSelector;
	BOOL focusFailed;
	NSThread* decodeThread;
@private
	int _focusCount;
	ZBarImageScanner* zbarScanner;
	float _previewZoom;
	int _devType;
	BOOL _bIPhone4_OR_IPod4G;
	BOOL _oneDMode;
}
@property(assign) BOOL oneDMode;
@property(retain, nonatomic) ParsedResult* parsedResult;
@property(assign, nonatomic) id<QRCodeScanDelegate> delegate;
@property(retain, nonatomic) NSSet* readers;
@property(retain, nonatomic) AVCaptureVideoPreviewLayer* prevLayer;
@property(retain, nonatomic) AVCaptureSession* captureSession;
-(void).cxx_destruct;
-(BOOL)torchIsOn;
-(void)setTorch:(BOOL)torch;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(BOOL)zxingDecode:(id)decode;
-(BOOL)zbarDecode:(id)decode;
-(void)decodeCaptureOutputImageThread:(id)thread;
-(void)resetFocusParam;
-(void)focusToCenter:(id)center;
-(void)captureSessionstopRunning;
-(void)captureSessionstartRunning;
-(void)stopCapture;
-(void)initCapture;
-(BOOL)checkPixel:(unsigned char)pixel andGreen:(unsigned char)green andBlue:(unsigned char)blue;
-(void)decoder:(id)decoder foundPossibleResultPoint:(CGPoint)point;
-(void)decoder:(id)decoder failedToDecodeImage:(id)decodeImage usingSubset:(id)subset reason:(id)reason;
-(void)notifyDelegate:(id)delegate;
-(void)decoder:(id)decoder didDecodeImage:(id)image usingSubset:(id)subset withResult:(id)result;
-(void)presentResultPoints:(id)points forImage:(id)image usingSubset:(id)subset;
-(void)presentResultForString:(id)string;
-(void)decoder:(id)decoder decodingImage:(id)image usingSubset:(id)subset;
-(void)decoder:(id)decoder willDecodeImage:(id)image usingSubset:(id)subset;
-(CGImageRef)CGImageRotated180:(CGImageRef)a180;
-(CGImageRef)CGImageRotated90:(CGImageRef)a90;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface QzoneQRCodeReaderOverlayView : UIView {
	BOOL flag;
	BOOL isStopAnimation;
	CGRect lineRectTop;
	CGRect lineRectBottom;
	UIView* bgView;
	UILabel* analyLabel;
	UIActivityIndicatorView* activityIndicatorView;
}
-(void).cxx_destruct;
-(void)removeAnalyingView;
-(void)addAnalyingView;
-(void)beginAnimation;
-(void)stopAnimation;
-(void)scan;
-(void)addMaskView;
-(id)initWithFrame:(CGRect)frame;
@end

@interface TwoDimensionBarcodeManager : NSObject <MQQRCodeReaderDelegate> {
	NSMutableDictionary* _Plugs;
	UINavigationController* _Nav;
	MQQRCodeReaderViewController* _MQQRCodeReaderViewControllerObj;
	id _WloginSdkObj;
	NSString* _qrcodeResult;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)GetInstance;
-(void).cxx_destruct;
-(id)PlugRequest:(unsigned)request;
-(void)qrcodeReadResult:(BOOL)result readStrResult:(id)result2;
-(BOOL)isQRCodeReadControllerAppear;
-(id)GetCodeReadControllerByImageView:(id)view;
-(id)GetCodeReadControllerByApp:(id)app;
-(id)GetCodeReadController;
-(id)GetCodeReadFirstController:(unsigned)controller;
-(id)GetWloginSdk;
-(void)SetWloginSdk:(id)sdk;
-(id)GetPlugObjForKey:(id)key;
-(void)UnRegisterPlug:(id)plug;
-(void)RegisterPlug:(id)plug obj:(id)obj;
-(id)init;
@end

@interface CodeInfoWebViewController : QQViewController_L <UIActionSheetDelegate, QRCodeDecodeBizDelegate, UIWebViewDelegate> {
@private
	UITextView* qrcodeRestTextView;
	BOOL _ifErrNeedRetry;
	NSString* _resultOldURL;
	QRCodeDecodeBiz* _qrcodeDecodeBiz;
	UIWebView* _resultWebView;
	NSURL* _jumpUrl;
	NSString* _qrcodeResult;
	NSURL* _jumpUrlForSafari;
}
@property(copy, nonatomic) NSURL* jumpUrlForSafari;
@property(retain, nonatomic) UIWebView* resultWebView;
@property(copy, nonatomic) NSString* qrcodeResult;
@property(copy, nonatomic) NSURL* jumpUrl;
-(void).cxx_destruct;
-(void)handleQRCodeDecodeSucceedDelay:(id)delay;
-(void)handleQRCodeDecodeSucceed:(id)succeed;
-(void)onQRCodeDecodeCannotDecode;
-(void)onQRCodeDecodeNetErr;
-(void)onQRCodeDecodeSucceed:(id)succeed;
-(BOOL)checkQRCodeStr:(id)str;
-(void)handleQRCodeUrl:(id)url;
-(BOOL)IsFit:(id)fit;
-(id)queryComponentsOfURL:(id)url;
-(id)getMQQRCodeBizUrl:(id)url;
-(void)handleWebviewSchemeUrl:(id)url;
-(BOOL)canParseURL:(id)url;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showShareOptions;
-(void)rightButtonClick;
-(void)SetUrlInfo:(id)info;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface WebViewPlug : NSObject <TwoDimensionBarcodeManagerDelegate> {
@private
	NSString* _qrcodeResult;
	UINavigationController* _rootNav;
}
@property(assign, nonatomic) UINavigationController* rootNav;
@property(copy, nonatomic) NSString* qrcodeResult;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)isMQQRCodeBizUrl:(id)url;
-(void)HandleData:(id)data RootNav:(id)nav;
-(BOOL)IsFit:(id)fit;
@end

@interface TXBizPlug : NSObject <TencentRequestDelegate, QRCodeDecodeBizDelegate, TwoDimensionBarcodeManagerDelegate, QBAAlertViewDelegate> {
@private
	NSString* _qrcodeResultUrl;
	UINavigationController* _navigationController;
	QRCodeDecodeBiz* _qrcodeDecodeBiz;
}
-(void).cxx_destruct;
-(void)buttonClick:(id)click atIndex:(int)index;
-(void)handleQRCodeErrRestartScan;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)handleNetErrAlertView;
-(void)handleErrGotoDefaultWebview;
-(void)handleQRCodeDecodeSucceed:(id)succeed;
-(void)onQRCodeDecodeCannotDecode;
-(void)onQRCodeDecodeNetErr;
-(void)onQRCodeDecodeSucceed:(id)succeed;
-(BOOL)checkQRCodeStr:(id)str;
-(void)HandleData:(id)data RootNav:(id)nav;
-(BOOL)IsFit:(id)fit;
-(id)init;
-(void)dealloc;
@end

@interface TCUtil : NSObject {
}
+(int)deviceVersion;
+(id)URLEncodedString:(id)string;
+(id)sharpenImage:(id)image sharpness:(float)sharpness;
+(id)scaleToSizeByAspectMax:(id)sizeByAspectMax targetSize:(float)size;
+(BOOL)torchAvailable;
+(BOOL)cameraAvailable;
+(int)randomNumberFrom:(int)from withCount:(unsigned long)count;
+(BOOL)isConnectionAvailable;
+(id)imageNamedFromLocalLogin:(id)localLogin;
+(id)imageNamedFromLocalTemplate:(id)localTemplate;
+(id)imagesNamedFromCustomBundle:(id)customBundle;
+(id)imageNamed:(id)named inDirectory:(id)directory;
+(id)DataWithContentsOfDictionary:(id)dictionary;
+(id)DictionaryWithContentsOfData:(id)data;
+(id)MD5Hash:(id)hash;
+(id)HexStrToBuff:(id)buff;
+(id)HexStrFromBuff:(const char*)buff length:(int)length;
+(id)ShadowForColor:(id)color;
+(id)ColorWithARGB:(unsigned)argb;
+(id)ColorWithRGBA:(unsigned)rgba;
+(unsigned)Color32BitValFromHexStr:(id)hexStr;
@end

@interface QBAViewController : UIViewController {
	UIButton* _leftButton;
	UIButton* _rightButton;
	QQView_L* _navigationBarView;
	QQView_L* _mainView;
	NSString* _controllerTitle;
	BOOL _titleRectChange;
	int _maxLeftTitleNum;
	NSString* _setSuperTitle;
@private
	UILabel* _titleLabel;
	NSString* _superTitle;
	BOOL _isPushViewController;
	UIActivityIndicatorView* _actView;
	int _skinsType;
	NSMutableDictionary* _skinsDict;
}
@property(retain, nonatomic) NSMutableDictionary* skinsDict;
@property(assign) int maxLeftTitleNum;
@property(assign, nonatomic) BOOL isPushViewController;
@property(retain, nonatomic) NSString* setSuperTitle;
@property(retain, nonatomic) NSString* superTitle;
@property(retain, nonatomic) UILabel* titleLabel;
@property(assign, nonatomic) BOOL titleRectChange;
@property(retain, nonatomic) NSString* controllerTitle;
@property(retain, nonatomic) QQView_L* mainView;
@property(retain, nonatomic) QQView_L* navigationBarView;
@property(retain, nonatomic) UIButton* rightButton;
@property(retain, nonatomic) UIButton* leftButton;
@property(assign, nonatomic) int skinsType;
+(BOOL)CanShowAnimated;
+(void)popViewController:(id)controller animated:(BOOL)animated;
+(void)pushViewControllerToNav:(id)nav childViewController:(id)controller animated:(BOOL)animated;
+(void)pushViewController:(id)controller childViewController:(id)controller2 animated:(BOOL)animated;
-(void).cxx_destruct;
-(BOOL)isSupportRightDragToGoBack;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)hideLoadingIndicator;
-(void)showLoadingIndicator;
-(int)getNavigationViewSkinsType;
-(int)getSkinsType;
-(id)getNavRightBtnTextColor;
-(id)getNavLeftBtnTextColor;
-(id)getNavControlTitleShadowColor;
-(id)getNavControlTitleColor;
-(id)roundBordButton;
-(void)clean:(id)clean backgroundColor:(id)color;
-(void)handleUIApplicationWillChangeStatusBarFrameNotification:(id)handleUIApplication;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadStatusBar;
-(void)setTitle:(id)title;
-(void)rightButtonClick:(id)click;
-(void)leftButtonClick:(id)click;
-(void)createTextRightButton:(id)button action:(SEL)action;
-(void)createImageRightButton:(id)button action:(SEL)action;
-(void)ResetLeftButton;
-(void)titleBarTouches;
-(void)rigthPageTouches:(CGRect)touches;
-(void)leftPageTouches:(CGRect)touches;
-(void)reDrawNavigationView;
-(void)reDrawView;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)dismissViewControllerAnimated:(BOOL)animated completion:(id)completion;
-(void)presentViewController:(id)controller animated:(BOOL)animated completion:(id)completion;
-(void)dismissModalViewControllerAnimated:(BOOL)animated;
-(void)presentModalViewController:(id)controller animated:(BOOL)animated;
-(void)popQQController:(BOOL)controller;
-(void)pushQQViewControllerToNav:(id)nav animated:(BOOL)animated;
-(void)pushQQViewController:(id)controller animated:(BOOL)animated;
-(void)viewDidUnload;
-(void)reSetLeftButtonTitle;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)releaseUI;
-(void)dealloc;
-(id)init;
@end

@interface QQView_L : UIView {
	UIImage* _wallpapeImage;
	UIImage* _backgroundImage;
	UIImage* _backgroundLandscapeImage;
	id<QQViewDelegate_L> _touchDelegate;
	CGPoint _imageOffset;
	BOOL _isScaleBackGroundImage;
	BOOL _isLandScape;
	BOOL _isNavigationBarView;
	int _drawType;
}
@property(assign) int drawType;
@property(assign, nonatomic) BOOL isNavigationBarView;
@property(assign, nonatomic) id<QQViewDelegate_L> touchDelegate;
@property(retain, nonatomic) UIImage* backgroundLandscapeImage;
@property(retain, nonatomic) UIImage* backgroundImage;
@property(retain, nonatomic) UIImage* wallpapeImage;
@property(assign, nonatomic) CGPoint imageOffset;
@property(assign, nonatomic) BOOL isScaleBackGroundImage;
-(void).cxx_destruct;
-(CGRect)getFillIntSize:(CGSize)size inSize:(CGSize)size2;
-(CGSize)getFitIntSize:(CGSize)size inSize:(CGSize)size2;
-(CGSize)fitSize:(CGSize)size inSize:(CGSize)size2;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)dealloc;
-(void)landscapeImageTrans:(BOOL)trans;
-(void)reDrawView:(id)view;
-(void)restoreData:(id)data;
-(void)drawRect:(CGRect)rect;
-(void)setBackgroundImage:(id)image animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQWTLogin : NSObject <WloginCallbackProtocol_v2> {
@private
	WloginSdk_v2* _loginSdk;
	NSString* _uin;
	BOOL _isLogin;
	BOOL _isLogining;
}
@property(assign, nonatomic) BOOL isLogining;
@property(assign, nonatomic) BOOL isLogin;
@property(retain, nonatomic) NSString* uin;
@property(retain, nonatomic) WloginSdk_v2* loginSdk;
+(void)logout;
+(id)getSKey;
+(id)getWLoginSdk;
+(BOOL)setKey:(id)key uin:(id)uin;
+(BOOL)updateKey;
+(id)loginSdk;
+(id)GetInstance;
-(void).cxx_destruct;
-(void)loginAllFinish_v2:(id)a2;
-(void)loginFailed_v2:(id)a2 andRst:(int)rst withMsg:(id)msg;
-(void)loginFailed_v2:(id)a2 andRst:(int)rst withErrInfo:(id)errInfo;
-(void)loginSuccessSig_v2:(id)a2 andSig:(id)sig andBaseInfo:(id)info;
-(void)inputSmsCode_v2:(id)a2 andNextTime:(unsigned)time andTimeout:(unsigned)timeout andPhoneNo:(id)no;
-(void)showPicture_v2:(id)a2 andPicData:(id)data;
-(void)inputPassword_v2:(id)a2 andAccount:(id)account;
-(void)onLoginTimer;
-(id)init;
@end

@interface TCURLCache : NSObject {
	NSString* _name;
	NSString* _cachePath;
	NSMutableDictionary* _imageCache;
	NSMutableArray* _imageSortedList;
	unsigned _totalPixelCount;
	unsigned _maxPixelCount;
	int _totalLoading;
	double _invalidationAge;
	BOOL _disableDiskCache;
	BOOL _disableImageCache;
}
@property(assign, nonatomic) double invalidationAge;
@property(assign, nonatomic) unsigned maxPixelCount;
@property(readonly, assign, nonatomic) NSString* etagCachePath;
@property(copy, nonatomic) NSString* cachePath;
@property(assign, nonatomic) BOOL disableImageCache;
@property(assign, nonatomic) BOOL disableDiskCache;
+(id)openSDKCacheWithName:(id)name;
+(id)doubleImageURLPath:(id)path;
+(id)cachePathWithName:(id)name;
+(BOOL)createPathIfNecessary:(id)necessary;
+(void)setSharedCache:(id)cache;
+(id)sharedCache;
+(void)releaseAllCaches;
+(id)cacheWithName:(id)name;
-(void)touchDataForURL:(id)url;
-(void)touchDataForKey:(id)key;
-(id)initOpenSDKCacheWithName:(id)name;
-(void)invalidateAll;
-(void)invalidateKey:(id)key;
-(void)invalidateURL:(id)url;
-(void)removeAll:(BOOL)all;
-(void)removeKey:(id)key;
-(void)removeURL:(id)url fromDisk:(BOOL)disk;
-(id)moveDataFromPathToTemporaryURL:(id)temporaryURL;
-(void)moveDataFromPath:(id)path toURL:(id)url;
-(void)moveDataForURL:(id)url toURL:(id)url2;
-(id)storeTemporaryImage:(id)image toDisk:(BOOL)disk;
-(id)storeTemporaryFile:(id)file;
-(id)storeTemporaryData:(id)data;
-(void)storeEtag:(id)etag forKey:(id)key;
-(void)storeImage:(id)image forURL:(id)url;
-(void)storeData:(id)data forKey:(id)key;
-(void)storeData:(id)data forURL:(id)url;
-(id)etagForKey:(id)key;
-(id)imageForURL:(id)url fromDisk:(BOOL)disk;
-(id)imageForURL:(id)url;
-(BOOL)hasImageForURL:(id)url fromDisk:(BOOL)disk;
-(id)dataForKey:(id)key expires:(double)expires timestamp:(id*)timestamp;
-(BOOL)hasDataForKey:(id)key expires:(double)expires;
-(id)dataForURL:(id)url expires:(double)expires timestamp:(id*)timestamp;
-(id)dataForURL:(id)url;
-(BOOL)hasDataForURL:(id)url;
-(id)etagCachePathForKey:(id)key;
-(id)cachePathForKey:(id)key;
-(id)cachePathForURL:(id)url;
-(id)keyForURL:(id)url;
-(void)didReceiveMemoryWarning:(void*)warning;
-(id)createUniqueTemporaryURL;
-(id)createTemporaryURL;
-(id)loadEtagFromCacheWithKey:(id)key;
-(void)storeImage:(id)image forURL:(id)url force:(BOOL)force;
-(void)expireImagesFromMemory;
-(void)dealloc;
-(id)init;
-(id)initWithName:(id)name;
@end

@interface TCQRCodeTemplate : NSObject {
@private
	TCQRCodeTemplateManager* _templatesMgr;
	id _identifier;
	unsigned _qrsz;
}
@property(assign, nonatomic) unsigned qrsz;
@property(retain, nonatomic) id identifier;
@property(retain, nonatomic) TCQRCodeTemplateManager* templatesMgr;
+(id)templateWithParams:(id)params andTemplateMgr:(id)mgr;
+(id)RuleVer;
-(void).cxx_destruct;
-(void)markAsCurrent;
-(id)unloadedResources;
-(BOOL)postLoadingTask;
-(void)loadResources;
-(BOOL)isAvailable;
-(BOOL)updateParams:(id)params;
-(id)initWithTemplatesMgr:(id)templatesMgr;
@end

@interface TCQRCodeTemplate_1 : TCQRCodeTemplate {
@private
	UIImage* _bkgImg;
	NSString* _bkgPath;
	unsigned _nameClrARGB;
	unsigned _tipsClrARGB;
	UIImage* _qrBkgImg;
	NSString* _qrBkgPath;
	unsigned _blackClrARGB;
	unsigned _whiteClrARGB;
	int _head;
	CGRect _qrLoc;
	NSArray* _clip;
}
@property(retain, nonatomic) NSArray* clip;
@property(assign, nonatomic) CGRect qrLoc;
@property(assign, nonatomic) int head;
@property(assign, nonatomic) unsigned whiteClrARGB;
@property(assign, nonatomic) unsigned blackClrARGB;
@property(retain, nonatomic) NSString* qrBkgPath;
@property(retain, nonatomic) UIImage* qrBkgImg;
@property(assign, nonatomic) unsigned tipsClrARGB;
@property(assign, nonatomic) unsigned nameClrARGB;
@property(retain, nonatomic) NSString* bkgPath;
@property(retain, nonatomic) UIImage* bkgImg;
+(id)RuleVer;
-(void).cxx_destruct;
-(id)unloadedResources;
-(void)loadResources;
-(BOOL)isAvailable;
-(BOOL)updateParams:(id)params;
-(id)init;
@end

@interface TCQRCodeLocalTemplateManager : TCQRCodeTemplateManager {
@private
	TCURLCache* _tplsCache;
}
@property(retain, nonatomic) TCURLCache* tplsCache;
-(void).cxx_destruct;
-(BOOL)addLoadingTaskWithTemplate:(id)aTemplate;
-(id)imageForPath:(id)path;
-(void)saveConfig;
-(id)templates;
-(id)configDict;
@end

@interface TCQRCodeTemplateManager : NSObject {
	NSArray* _templates;
	NSMutableDictionary* _configDict;
	int _currentStyle;
	NSString* _configId;
}
@property(retain, nonatomic) NSString* configId;
@property(assign, nonatomic) int currentStyle;
@property(retain, nonatomic) NSMutableDictionary* configDict;
@property(retain, nonatomic) NSArray* templates;
+(int)RuleVersion;
-(void).cxx_destruct;
-(BOOL)addLoadingTaskWithTemplate:(id)aTemplate;
-(id)imageForPath:(id)path;
-(void)saveConfig;
-(void)resetToTemplate:(id)aTemplate;
-(void)reset;
-(id)templateAtIndex:(unsigned)index;
-(id)currentTemplate;
-(id)nextAvailableTemplateWithQRSymWidthLimit:(unsigned)qrsymWidthLimit;
-(id)nextTemplateWithQRSymWidthLimit:(unsigned)qrsymWidthLimit;
-(id)init;
@end

@interface AuthorizationRequest : NSObject <SDKBaseURLConnectionDelegate> {
@private
	OpenSDKRequest* _httpRequest;
	id<RequestDelegate> _delegate;
	NSString* _currentRequestType;
}
@property(retain, nonatomic) NSString* currentRequestType;
@property(retain, nonatomic) OpenSDKRequest* httpRequest;
@property(assign, nonatomic) id<RequestDelegate> delegate;
-(void).cxx_destruct;
-(void)dealloc;
-(id)stringLossyAllowedWithData:(id)data encoding:(unsigned)encoding;
-(id)generatePostBody:(id)body;
-(void)didConnectionFailed:(id)failed;
-(void)didConnectionFinished;
-(void)ParsePostFinished:(id)finished;
-(void)ParseGetFinished:(id)finished;
-(void)Cancle;
-(void)GetHead:(long long)head andSkey:(id)skey;
-(BOOL)GetAurhorizationInfo:(id)info;
-(BOOL)SetAurhorization:(id)aurhorization openapi:(id)openapi select:(BOOL)select;
-(id)initWithDelegate:(id)delegate;
@end

@interface OpenSDKRequest : NSObject <SDKBaseURLConnectionDelegate> {
@private
	SDKBaseURLConnection* _httpRequest;
	id<SDKBaseURLConnectionDelegate> _requestDelegate;
	NSData* _buf;
}
@property(retain, nonatomic) SDKBaseURLConnection* httpRequest;
@property(retain, nonatomic) NSData* buf;
@property(assign, nonatomic) id<SDKBaseURLConnectionDelegate> requestDelegate;
-(void).cxx_destruct;
-(void)Cancle;
-(id)stringByEncodeUrl:(id)url;
-(void)didConnectionFailed:(id)failed;
-(void)didConnectionFinished;
-(void)RequestGet:(id)get url:(id)url RequestDelegate:(id)delegate andCookie:(id)cookie;
-(id)generatePostBody:(id)body;
-(void)RequestPost:(id)post url:(id)url RequestDelegate:(id)delegate;
-(void)RequestGet:(id)get url:(id)url RequestDelegate:(id)delegate;
-(void)dealloc;
@end

@interface SDKBaseURLConnection : NSObject {
	NSString* requestURL;
	NSURLConnection* connection;
	NSMutableData* _buf;
	int statusCode;
@private
	id<SDKBaseURLConnectionDelegate> _delegate;
	int _statusCode;
	NSString* _requestURL;
	NSString* _defaultUserAgent;
}
@property(retain, nonatomic) NSString* defaultUserAgent;
@property(copy, nonatomic) NSString* requestURL;
@property(assign, nonatomic) int statusCode;
@property(readonly, assign, nonatomic) NSMutableData* buf;
@property(assign, nonatomic) id<SDKBaseURLConnectionDelegate> delegate;
-(void).cxx_destruct;
-(void)SetdefaultUserAgentString;
-(void)URLConnectionDidFinishLoading:(id)urlconnection;
-(void)URLConnectionDidFailWithError:(id)urlconnection;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)cancel;
-(void)post:(id)post data:(id)data;
-(void)post:(id)post bodyData:(id)data;
-(void)post:(id)post body:(id)body;
-(void)get:(id)get;
-(void)get:(id)get andCookie:(id)cookie;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface OpenApi : NSObject {
}
+(id)dictionaryByParseUrlFromSeparator:(id)separator separator:(id)separator2;
+(BOOL)checkParams:(int)params withData:(id)data;
+(id)getEncryToken:(id)token openId:(id)anId appSchema:(id)schema;
+(BOOL)saveEncryToken:(id)token accesstoken:(id)accesstoken openId:(id)anId appSchema:(id)schema;
+(BOOL)shareWithResult:(id)result userCancell:(BOOL)cancell;
+(BOOL)authFailed:(BOOL)failed;
+(BOOL)authSuccessWithReuslt:(id)reuslt;
+(id)getDictionaryFromGeneralPasteBoard:(id)generalPasteBoard;
+(id)getDictionaryFromPasteBoard:(id)pasteBoard;
+(id)saveDictionaryByGeneralPastboard:(id)pastboard;
+(id)saveDictionary:(id)dictionary toPasteBoard:(id)pasteBoard;
+(id)HandleUrl:(id)url;
+(BOOL)canHandleUrl:(id)url;
+(id)requestDataFromUrl:(id)url;
+(void)returnToThirdPartApp:(int)thirdPartApp withErrorCode:(int)errorCode;
+(BOOL)returnToThirdPartApp:(int)thirdPartApp withResponse:(id)response;
+(BOOL)returnToThirdPartApp:(int)thirdPartApp withData:(id)data;
+(BOOL)returnToThirdPartApp:(int)thirdPartApp withData:(id)data userCancell:(BOOL)cancell;
@end

@interface APIResponse : NSObject <NSCoding> {
	int _detailRetCode;
	int _retCode;
	int _seq;
	NSString* _errorMsg;
	NSDictionary* _jsonResponse;
	NSString* _message;
}
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSDictionary* jsonResponse;
@property(retain, nonatomic) NSString* errorMsg;
@property(assign, nonatomic) int seq;
@property(assign, nonatomic) int retCode;
@property(assign, nonatomic) int detailRetCode;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@interface QQSSoKit : NSObject {
@private
	UIWindow* _wnd;
	UIWindow* _keyWnd;
	NSDictionary* _loginThirdParams;
	BOOL _isHasLoginStatus;
	BOOL _isExposureReport;
	unsigned _netType;
}
@property(retain, nonatomic) NSDictionary* loginThirdParams;
@property(retain, nonatomic) UIWindow* keyWnd;
@property(retain, nonatomic) UIWindow* wnd;
@property(assign, nonatomic) unsigned netType;
@property(assign, nonatomic) BOOL isExposureReport;
@property(assign, nonatomic) BOOL isHasLoginStatus;
+(void)loading:(id)loading start:(BOOL)start;
+(void)addSSoLog:(id)log appid:(id)appid uin:(id)uin;
+(void)addNewSSoLog:(id)log appid:(id)appid uin:(id)uin log:(id)log4;
+(void)popTips:(id)tips message:(id)message cancleBtnTitle:(id)title;
+(void)clearTips;
+(void)returnToThirdPartApp:(int)thirdPartApp withData:(id)data userCancell:(BOOL)cancell;
+(void)clear;
+(unsigned)getCurrentUin;
+(id)getQQAccountToken:(id)token;
+(id)getQQAccountList;
+(id)getInstance;
-(void).cxx_destruct;
-(void)iphoneQQGoToBackground:(id)background;
-(id)handle:(id)handle;
-(void)CloseWindow;
-(void)SSoLoginStart;
-(void)PopSSoLoginWindow:(id)window;
-(id)init;
@end

@interface AuthorizationListView : UIView {
	NSArray* _apilistInfo;
	UIScrollView* _listScrollView;
	UIImageView* _arrowImageView;
	UILabel* _moreLabel;
	UIButton* _moreButton;
	NSDictionary* _loginInfoForThirdPart;
	int _height;
	int _detailnum;
@private
	NSMutableArray* _btnArray;
	UIImageView* _bgImageView;
	NSMutableArray* _apiSelectedlistInfo;
	id<AuthorizationListViewDelegate> _delegate;
}
@property(retain, nonatomic) NSMutableArray* btnArray;
@property(retain, nonatomic) UIImageView* arrowImageView;
@property(retain, nonatomic) UIButton* moreButton;
@property(retain, nonatomic) UILabel* moreLabel;
@property(retain, nonatomic) UIScrollView* listScrollView;
@property(retain, nonatomic) UIImageView* bgImageView;
@property(assign, nonatomic) id<AuthorizationListViewDelegate> delegate;
@property(retain, nonatomic) NSDictionary* loginInfoForThirdPart;
@property(retain, nonatomic) NSMutableArray* apiSelectedlistInfo;
@property(retain, nonatomic) NSArray* apilistInfo;
-(void).cxx_destruct;
-(void)dealloc;
-(id)getSelectedPermissonsList;
-(void)createPermissonBtn:(int)btn isHide:(BOOL)hide;
-(void)createOtherBtn:(int)btn title:(id)title image:(id)image sel:(SEL)sel;
-(void)packUpDetail;
-(void)getMoreDetail;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SSoAccountBtn : UIButton {
	UIButton* _head;
	UILabel* _nick;
	int _type;
	int _section;
	int _row;
	SEL _sel;
	BOOL _ifDelete;
	NSTimer* _timer;
	BOOL _isBigIcon;
@private
	UIImage* _headImage;
	long long _accountUin;
	id _object;
	NSString* _accountName;
	int _accountType;
}
@property(assign, nonatomic) int accountType;
@property(assign) BOOL isBigIcon;
@property(assign) BOOL ifDelete;
@property(assign, nonatomic) SEL sel;
@property(assign, nonatomic) id object;
@property(assign, nonatomic) int row;
@property(assign, nonatomic) int section;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) UIImage* headImage;
@property(retain, nonatomic) NSString* accountName;
@property(assign, nonatomic) long long accountUin;
-(void).cxx_destruct;
-(void)addTarget:(id)target action:(SEL)action forControlEvents:(unsigned)controlEvents;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)longPressLowDevice;
-(void)startAnimation2;
-(void)didEndAnimation2;
-(void)didEndAnimation1;
-(void)startAnimation1;
-(void)delete;
-(void)upDateSubView;
-(void)removeDeleteButton;
-(void)addDeleteButton;
-(void)longPress:(id)press;
-(id)initWithFrame:(CGRect)frame;
@end

@interface ssoAccountHeadView : UIView {
	UIImageView* _headView;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithImage:(CGRect)image andImage:(id)image2;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SSoAccountView : UIControl {
	UIImageView* _bgView;
	UIScrollView* _scrollView;
	id _target;
	SEL _action;
	unsigned _controlEvents;
}
-(void).cxx_destruct;
-(void)dealloc;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)deleteMe:(id)me;
-(void)animationType;
-(void)setHidden:(BOOL)hidden;
-(void)longPressBtn;
-(void)drawRect:(CGRect)rect;
-(void)createAccountBtn:(CGRect)btn andUin:(long long)uin andNick:(id)nick andHead:(id)head andAccountType:(int)type;
-(void)createAccountBtnView:(BOOL)view;
-(void)clearAccountBtnView;
-(void)addTarget:(id)target action:(SEL)action forControlEvents:(unsigned)controlEvents;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SSoAuthorizationViewController : QBAViewController <SimpleHeadMgrDelegate, RequestDelegate, AuthorizationListViewDelegate, SimpleLoginDelegate> {
	UIButton* _accountChangeBtn;
	UIButton* _confirmBtn;
	UILabel* _listLabel;
	AuthorizationListView* _authorizationView;
	SSoUserInfoView* _userInfoView;
	long long _uin;
	NSString* _nickName;
	NSData* _sKEY;
	NSString* _appName;
	NSArray* _authInfoList;
	AuthorizationRequest* _authorizationRequest;
	NSDictionary* _loginInfoForThirdPart;
	UIActivityIndicatorView* _indicatorView;
	UIScrollView* _scrollView;
	UIImage* _head;
	NSData* _a2;
	NSData* _d2;
	unsigned _d2Key;
	NSDictionary* _key;
@private
	BOOL _isNeedChangeAccount;
}
@property(retain, nonatomic) NSDictionary* key;
@property(retain, nonatomic) AuthorizationRequest* authorizationRequest;
@property(retain, nonatomic) UIImage* head;
@property(assign, nonatomic) unsigned d2Key;
@property(retain, nonatomic) NSData* d2;
@property(retain, nonatomic) NSData* a2;
@property(retain, nonatomic) NSArray* authInfoList;
@property(retain, nonatomic) NSString* nickName;
@property(retain, nonatomic) NSDictionary* loginInfoForThirdPart;
@property(retain, nonatomic) NSData* sKEY;
@property(assign, nonatomic) BOOL isNeedChangeAccount;
@property(assign, nonatomic) long long uin;
-(void).cxx_destruct;
-(void)leftButtonClick:(id)click;
-(void)reportWtloginError:(int)error;
-(void)RequestSvrErrorCode:(id)code;
-(void)RequestSystemNetError:(id)error;
-(void)GetAuthorizationInfoDelegate:(id)delegate dicinfo:(id)dicinfo errorMsg:(id)msg;
-(BOOL)gotoAuthorizationWithUin:(unsigned)uin andNickName:(id)name andSkey:(id)skey;
-(void)loginFailed:(int)failed withMsg:(id)msg;
-(void)saveCurAccount:(BOOL)account Uin:(unsigned)uin Nick:(id)nick Account:(id)account4;
-(void)reportNoNetWork:(id)work;
-(void)loginSucceed:(id)succeed Uin:(unsigned)uin Nickname:(id)nickname;
-(void)doLoginWithPwd;
-(void)doLogin;
-(void)AuthorizationListView:(id)view rectChange:(CGRect)change;
-(void)enable:(BOOL)enable text:(id)text;
-(void)onChangeAccountBtnTouch;
-(void)confirmLogin:(id)login;
-(void)setAuthorization;
-(void)RequestFailed:(id)failed;
-(void)SetAuthorizationDelegate:(id)delegate dicinfo:(id)dicinfo errorMsg:(id)msg;
-(void)dealloc;
-(void)getHeadDelegate:(id)delegate;
-(void)leftItemToggle;
-(void)createAuthorizationListView;
-(void)createAuthorizationLabel;
-(void)addConfirmBottonView;
-(void)createAccountChangeBtn;
-(void)createUserInfoView:(id)view;
-(void)createScrollView;
-(void)createBgView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)init;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface SSoAcountEditCellID : UITableCellStepView <UITextFieldDelegate> {
	NSString* _userID;
	UITextField* _idEdit;
	UIImageView* _accountBtnImage;
	UIButton* _accountBtn;
	UILabel* _tipLabel;
@private
	BOOL _showAccountBtn;
	id<SSoAcountEditCellIDDelegate> _delegate;
}
@property(assign, nonatomic) id<SSoAcountEditCellIDDelegate> delegate;
@property(assign, nonatomic) BOOL showAccountBtn;
@property(retain, nonatomic) UIButton* accountBtn;
@property(retain, nonatomic) UIImageView* accountBtnImage;
@property(readonly, assign, nonatomic) UITextField* idEdit;
@property(retain, nonatomic, getter=getUserID, setter=setUserID:) NSString* userID;
-(void)accountBtnHidden:(BOOL)hidden;
-(void)drawRect:(CGRect)rect;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)showAccountsEdit;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface SSoPwTextField : UITextField {
	UIButton* _loginBtn;
}
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
@end

@interface SSoAcountEditCellPW : UITableCellStepView <UITextFieldDelegate> {
	NSData* _userPW;
	UITextField* _pwEdit;
	BOOL _defaultPwd;
	UILabel* _tipLabel;
}
@property(assign, nonatomic) BOOL defaultPwd;
@property(retain, nonatomic) UITextField* pwEdit;
@property(retain, nonatomic, getter=getUserPW, setter=setUserPW:) NSData* userPW;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)setUserPWDMD5:(id)a5;
-(void)drawRect:(CGRect)rect;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface SSoLoginViewController : QBAViewController <UITableViewDelegate, UITableViewDataSource, SimpleLoginDelegate, RequestDelegate, AuthorizationListViewDelegate, VerifyViewDelegate, SSoAcountEditCellIDDelegate> {
	UIImageView* _logoImage;
	UIImageView* _nameImage;
	SSoAcountEditCellID* _acountCellID;
	SSoAcountEditCellPW* _acountCellPW;
	UIButton* _loginBtn;
	UILabel* _lineLable1;
	UILabel* _lineLable2;
	bool _adjust;
	NSTimer* _loginTimer;
	BOOL _keyBoardisShow;
	NSDictionary* _loginInfoForThirdPart;
	NSString* _quickAccount;
	NSData* _quickPasswordMD5;
	BOOL _isNeedShowHistoryAccount;
	UIScrollView* _scrollView;
	SSoAccountView* _accountView;
	BOOL _accountViewShow;
	SSoVerifyViewController* _verifyViewController;
	UILabel* _loginBgLabel;
	UIView* _line;
	BOOL _autoLogin;
	BOOL _autoAuthorization;
@private
	UITableView* _preTbl;
	AuthorizationRequest* _authorizationRequest;
	NSString* _accountLogin;
	BOOL _showAccountBtn;
	long long _uin;
	NSData* _sKEY;
	NSString* _userNick;
}
@property(assign, nonatomic) BOOL showAccountBtn;
@property(retain, nonatomic) NSString* accountLogin;
@property(assign, nonatomic) BOOL autoLogin;
@property(retain, nonatomic) NSData* sKEY;
@property(retain, nonatomic) NSString* userNick;
@property(assign, nonatomic) long long uin;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(retain, nonatomic) AuthorizationRequest* authorizationRequest;
@property(retain, nonatomic) NSData* quickPasswordMD5;
@property(retain, nonatomic) NSString* quickAccount;
@property(assign, nonatomic) BOOL isNeedShowHistoryAccount;
@property(retain, nonatomic) NSDictionary* loginInfoForThirdPart;
@property(assign, nonatomic) BOOL accountViewShow;
@property(readonly, assign, nonatomic) UITableView* preTbl;
-(void)leftButtonClick:(id)click;
-(void)enable:(BOOL)enable;
-(void)clear;
-(void)accountBtnClick:(id)click;
-(void)UserIDDidChanged:(id)userID;
-(void)KeyBoardHide:(id)hide;
-(void)KeyBoardShow:(id)show;
-(void)KeyBoardWillShow:(id)keyBoard;
-(void)verifyCancelled:(id)cancelled;
-(void)checkVerifyCode:(id)code code:(id)code2;
-(void)refreshVerifyCode:(id)code;
-(void)needVerifyCode:(id)code;
-(void)reportWtloginError:(int)error;
-(void)reportNoNetWork:(id)work;
-(void)RequestSvrErrorCode:(id)code;
-(void)RequestSystemNetError:(id)error;
-(void)GetQQHeadDelegate:(id)delegate headBuf:(id)buf;
-(void)SetAuthorizationDelegate:(id)delegate dicinfo:(id)dicinfo errorMsg:(id)msg;
-(void)GetAuthorizationInfoDelegate:(id)delegate dicinfo:(id)dicinfo errorMsg:(id)msg;
-(void)adjust;
-(void)animationStop;
-(void)showAccountsList;
-(void)SSoAcountCellAccountBtnClick:(id)click;
-(void)setUserID:(id)anId;
-(void)setUserIDAndPassWord:(id)word :(id)arg2;
-(void)saveCurAccount:(BOOL)account Uin:(unsigned)uin Nick:(id)nick;
-(void)loadPassword:(unsigned)password :(bool)arg2;
-(void)loadHistoryAccount:(unsigned)account :(bool)arg2;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)LoginTimerOut;
-(void)inputPassword:(id)password;
-(void)loginFailed:(int)failed withMsg:(id)msg;
-(void)loginSucceed:(id)succeed Uin:(unsigned)uin Nickname:(id)nickname;
-(void)gotoAuthorizationWithUin:(unsigned)uin andNickName:(id)name andSkey:(id)skey;
-(bool)doLogin;
-(BOOL)doLoginWithA2D2;
-(void)onLoginTimeout;
-(void)stopLoginTimer;
-(void)startLoginTimer;
-(void)onCloseBtnTouch;
-(void)leftItemToggle;
-(void)dealloc;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)backgroundTap:(id)tap;
-(void)createBgView;
-(void)viewDidLoad;
-(void)createScrollView;
-(void)createButton:(CGRect)button;
-(void)createLoginTable:(CGRect)table;
-(id)init;
@end

@interface SSoPermissionBtn : UIButton {
@private
	NSArray* _imageArray;
	UILabel* _textLabel;
	UIImageView* _userImage;
	BOOL _btnSelected;
	BOOL _btnCanSelect;
}
@property(assign, nonatomic) BOOL btnCanSelect;
@property(assign, nonatomic) BOOL btnSelected;
+(id)ssoPermissinBtn:(CGRect)btn title:(id)title imageArray:(id)array tag:(int)tag;
-(void)setUserImage:(id)image;
-(id)userImage;
-(void)setTextLabel:(id)label;
-(id)textLabel;
-(void)setImageArray:(id)array;
-(id)imageArray;
-(void).cxx_destruct;
-(void)onClickPermissionBtn;
-(id)initWithFrame:(CGRect)frame;
@end

@interface SSoUserInfoView : UIImageView {
	unsigned _uin;
	NSString* _nickName;
	CGRect _headImageRect;
	ssoAccountHeadView* _headImage;
}
@property(retain, nonatomic) NSString* nickName;
@property(assign, nonatomic) unsigned uin;
-(void).cxx_destruct;
-(void)dealloc;
-(void)setHeadImage:(id)image;
-(id)initWithFrame:(CGRect)frame andUin:(unsigned)uin andNickName:(id)name andImage:(id)image;
@end

@interface UITableCellStepView : UITableViewCell {
	int feedBackType;
	int feedBackStyle;
	BOOL drawSepLine;
	int currentSkin;
	BOOL needHightArrow;
}
@property(assign, nonatomic) BOOL needHightArrow;
@property(assign, nonatomic) int feedBackStyle;
@property(assign, nonatomic) int feedBackType;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)drawSep:(CGRect)sep;
-(void)updateSkin;
-(void)setDrawSep:(BOOL)sep;
-(void)setFeedBackBg:(int)bg;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)initWithFrame:(CGRect)frame;
-(void)initialize;
@end

@interface QZItemCellView : UITableViewCell {
	int feedBackType;
}
@property(assign, nonatomic) int feedBackType;
-(void)layoutSubviews;
@end

@interface TCOpenSDKErrorUtil : NSObject {
}
+(int)filterURLErrorCode:(int)code;
+(id)openSDKErrorMsgForErrorCode:(int)errorCode;
+(id)openSDKErrorFromOSError:(id)oserror;
+(id)openSDKErrorWithCommonServerCode:(int)commonServerCode extraInfo:(id)info;
+(id)openSDKErrorWithCode:(int)code extraInfo:(id)info;
@end

@interface getImageFromBuddle : NSObject {
}
+(id)imageNamedFromIphoneQQ:(id)iphoneQQ;
+(id)imageNamed:(id)named;
@end

@interface SSoVerifyViewController : QBAViewController <UITextFieldDelegate> {
	NSString* _verifyPromptText;
	NSString* _verifyPictureName;
	UIImage* _verifyPictureImage;
	UILabel* _verifyPrompt;
	UILabel* _verifyHint;
	UIImageView* _verifyPictureView;
	UITextField* _verifyInput;
	UIButton* _verifyRefresh;
@private
	id<VerifyViewDelegate> _delegate;
}
@property(retain, nonatomic) UIImage* verifyPictureImage;
@property(retain, nonatomic) NSString* verifyPromptText;
@property(assign, nonatomic) id<VerifyViewDelegate> delegate;
@property(retain, nonatomic) NSString* verifyPictureName;
-(void).cxx_destruct;
-(void)leftButtonClick:(id)click;
-(void)reloadVerifyPictureFromNotify:(id)notify;
-(void)reloadVerifyPicture:(id)picture;
-(void)showNetFailedMessage;
-(void)onRefresh;
-(void)onCancel;
-(void)onConfirm;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)viewDidUnload;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(void)onGetImageFromUrl;
-(void)createBgView;
-(void)loadView;
-(id)init:(id)init pictureImage:(id)image;
-(id)init:(id)init pictureName:(id)name;
-(id)init:(id)init pictureUrl:(id)url;
@end

@interface TCOSDKReachability : NSObject {
@private
	NSString* key_;
	SCNetworkReachabilityRef reachabilityRef;
}
@property(copy) NSString* key;
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)makeAddressKey:(unsigned)key;
+(id)reachabilityWithHostName:(id)hostName;
+(BOOL)accessInstanceVariablesDirectly;
-(unsigned)reachabilityFlags;
-(BOOL)isReachableViaWiFi;
-(BOOL)isReachableViaWWAN;
-(BOOL)isInterventionRequired;
-(BOOL)isConnectionOnDemand;
-(BOOL)connectionRequired;
-(BOOL)isConnectionRequired;
-(BOOL)isReachable;
-(unsigned)currentReachabilityStatus;
-(unsigned)networkStatusForFlags:(unsigned)flags;
-(BOOL)isEqual:(id)equal;
-(void)stopNotifier;
-(BOOL)startNotifier;
-(id)description;
-(id)initWithReachabilityRef:(SCNetworkReachabilityRef)reachabilityRef;
-(void)dealloc;
@end

@interface SSoNavigationController : UINavigationController {
}
-(unsigned)supportedInterfaceOrientations;
-(int)preferredInterfaceOrientationForPresentation;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface SimpleUserInfo : NSObject {
	NSString* account_;
	unsigned uid_;
	NSString* sNickName_;
}
@property(retain, nonatomic) NSString* sNickName_;
@property(assign, nonatomic) unsigned uid_;
@property(retain, nonatomic) NSString* account_;
-(void).cxx_destruct;
-(id)propertiesDescription:(id)description;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface SimpleUserSigInfo : NSObject {
@private
	NSData* B2;
	NSData* GTKEY_B2;
	NSData* ST;
	NSData* GTKEY_ST;
	NSData* A2;
	NSData* GTKEY_A2;
	NSData* VKey;
	NSData* SKey;
}
@property(copy, nonatomic) NSData* SKey;
@property(copy, nonatomic) NSData* VKey;
@property(copy, nonatomic) NSData* GTKEY_A2;
@property(copy, nonatomic) NSData* A2;
@property(copy, nonatomic) NSData* GTKEY_ST;
@property(copy, nonatomic) NSData* ST;
@property(copy, nonatomic) NSData* GTKEY_B2;
@property(copy, nonatomic) NSData* B2;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface SimpleDataCenter : NSObject {
	SimpleUserInfo* sUserInfo_;
	SimpleUserSigInfo* sUserSigInfo_;
}
@property(retain, nonatomic) SimpleUserSigInfo* sUserSigInfo_;
@property(retain, nonatomic) SimpleUserInfo* sUserInfo_;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)resetLoginInfo;
-(void)updateSig:(id)sig st:(id)st gtkey_st:(id)st3;
-(void)setUserInfo:(id)info Uid:(unsigned)uid NickName:(id)name;
-(id)init;
@end

@interface SimpleHeadMgr : NSObject <RequestDelegate> {
@private
	id<SimpleHeadMgrDelegate> _delegate;
	AuthorizationRequest* _headRequest;
	UIImage* _head;
	long long _uin;
}
@property(assign, nonatomic) long long uin;
@property(retain, nonatomic) AuthorizationRequest* headRequest;
@property(retain, nonatomic) UIImage* head;
@property(assign, nonatomic) id<SimpleHeadMgrDelegate> delegate;
+(void)clearInstance;
+(id)shareMgr;
-(void).cxx_destruct;
-(void)dealloc;
-(void)GetQQHeadDelegate:(id)delegate headBuf:(id)buf;
-(id)GetHeadCache:(long long)cache andSkey:(id)skey;
-(void)RemoveHeadCache:(id)cache;
-(void)SaveHeadCache:(id)cache andImage:(id)image;
-(id)getHead:(long long)head andSkey:(id)skey andDelegate:(id)delegate;
@end

@interface QQSSoSimpleLoginMgr : NSObject <WloginCallbackProtocol_v2, WloginLogProtocol_v2> {
	WloginSdk_v2* wloginSdk_v2;
	SimpleDataCenter* sDataCenter_;
	NSTimer* loginTimer_;
	NSString* account_;
	id password_;
	id<SimpleLoginDelegate> delegate_;
}
@property(assign, nonatomic) id<SimpleLoginDelegate> delegate_;
@property(retain, nonatomic) id password_;
@property(retain, nonatomic) NSString* account_;
+(id)sharedMgr;
-(void).cxx_destruct;
-(void)logRecorder:(id)recorder;
-(void)loginInfo:(id)info;
-(void)log:(const char*)log func:(const char*)func line:(int)line msg:(id)msg;
-(void)resetLoginProcess_v2;
-(void)resetLogin;
-(void)stopLoginTimer;
-(void)startLoginTimer:(int)timer;
-(void)onRequestTimeout;
-(void)QQWTLoginFailed:(id)failed;
-(void)QQWTLoginSuccessed:(id)successed;
-(int)loginwithA2:(id)a2 appid:(unsigned)appid delegate:(id)delegate;
-(BOOL)checkLocalSigValid_v2:(id)a2 andAppid:(unsigned)appid;
-(void)deleteAccount:(id)account;
-(BOOL)isRemeberPassword_v2:(id)a2;
-(BOOL)hasPasswordSig_v2:(id)a2;
-(void)inputSmsCode_v2:(id)a2 andNextTime:(unsigned)time andTimeout:(unsigned)timeout andPhoneNo:(id)no;
-(void)showPicture_v2:(id)a2 andPicData:(id)data;
-(id)getMsgFromSvrErrorCode:(unsigned char)svrErrorCode;
-(void)loginFailed_v2:(id)a2 andRst:(int)rst withErrInfo:(id)errInfo;
-(void)loginSuccessSig_v2:(id)a2 andSig:(id)sig andBaseInfo:(id)info;
-(void)loginAllFinish_v2:(id)a2;
-(void)inputPassword_v2:(id)a2 andAccount:(id)account;
-(int)checkVerifyCode:(id)code;
-(void)refreshVerifyCode:(id)code;
-(void)logout;
-(id)getSKey:(unsigned)key;
-(int)getWloginSig:(id)sig sigmap:(unsigned)sigmap appid:(unsigned)appid delegate:(id)delegate;
-(BOOL)loginWithNotPassWnd:(id)notPassWnd appid:(unsigned)appid delegate:(id)delegate;
-(int)loginwithA2D2:(id)a2 key:(id)key appid:(unsigned)appid delegate:(id)delegate;
-(int)loginWithPasswordMD5:(id)passwordMD5 passwordMD5:(id)a5 appid:(unsigned)appid delegate:(id)delegate;
-(void)setLoginSubAppid:(unsigned)appid;
-(void)setWtloginServer:(id)server port:(int)port;
-(id)init;
@end

@interface AccountInfo : NSObject <NSCoding> {
	unsigned _uid;
	NSString* _account;
	NSString* _nick;
	int _type;
}
@property(retain, nonatomic) NSString* _nick;
@property(assign, nonatomic) int _type;
@property(retain, nonatomic) NSString* _account;
@property(assign, nonatomic) unsigned _uid;
-(void).cxx_destruct;
-(id)propertiesDescription:(id)description;
-(id)initWithUid:(unsigned)uid Account:(id)account Password:(id)password SavePwd:(BOOL)pwd Nick:(id)nick;
-(id)initWithUid:(unsigned)uid Password:(id)password SavePwd:(BOOL)pwd AutoLogon:(BOOL)logon;
-(id)description;
-(unsigned)NSStringtoNSNumber:(id)number;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)keyForPasswordEncrypt;
-(void)dealloc;
@end

@interface AccountsData : NSObject <NSCoding> {
	NSMutableArray* _accounts;
	unsigned _curId;
	BOOL _curAutoLogon;
}
@property(assign, nonatomic) BOOL _curAutoLogon;
@property(assign, nonatomic) unsigned _curId;
@property(retain, nonatomic) NSMutableArray* _accounts;
-(void).cxx_destruct;
-(id)propertiesDescription:(id)description;
-(id)description;
-(unsigned)NSStringtoNSNumber:(id)number;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)keyForPasswordEncrypt;
-(id)init;
-(void)dealloc;
@end

@interface SSoAccountMgr : NSObject {
	AccountsData* _accountsData;
	NSString* _accountsFile;
@private
	NSMutableArray* _qqAccount;
}
@property(retain, nonatomic) NSMutableArray* qqAccount;
@property(retain, nonatomic) NSString* _accountsFile;
@property(retain, nonatomic) AccountsData* _accountsData;
+(id)deCryptDES:(id)des key:(id)key;
+(id)enCryptDES:(id)des key:(id)key;
+(id)sharedMgr;
-(void).cxx_destruct;
-(BOOL)containQQAccount:(unsigned)account;
-(id)getQQAccount;
-(void)deleteQQAccount:(unsigned)account;
-(void)setCurAutoLogon:(BOOL)logon;
-(BOOL)getCurAutoLogon;
-(void)saveAccount:(id)account Uid:(unsigned)uid Password:(id)password SavePwd:(BOOL)pwd Nick:(id)nick;
-(int)parseType:(id)type Uid:(unsigned)uid;
-(void)deleteAccount:(id)account Uid:(unsigned)uid WriteToFile:(BOOL)file;
-(void)deleteAccountPwd:(unsigned)pwd;
-(unsigned)accountsNum;
-(unsigned)getUinByAccount:(id)account;
-(id)getAccountByUin:(unsigned)uin;
-(id)getAccountNick:(unsigned)nick;
-(id)getAccountPwd:(unsigned)pwd;
-(id)getLoginUinArray;
-(id)getLoginAccountArray;
-(void)getLoginUinArray:(id)array;
-(void)getLoginAccountArray:(id)array;
-(void)setCurrentId:(unsigned)anId;
-(unsigned)getCurrentId;
-(unsigned)NSStringtoNSNumber:(id)number;
-(BOOL)isSavePwd:(unsigned)pwd;
-(BOOL)isAutoLogon:(unsigned)logon;
-(void)removeAccountsData;
-(void)save;
-(void)saveAccountsData:(id)data;
-(id)initWithDataFile:(id)dataFile;
-(id)getAccountsData;
-(void)dealloc;
@end

@interface QQViewController_L : UIViewController {
	UIButton* _leftButton;
	UIButton* _rightButton;
	QQView_L* _mainView;
	UIView* _customTitleView;
	NSString* _controllerTitle;
	BOOL _notChangeLbtn;
	BOOL _isViewAppear;
	int _maxLeftTitleNum;
	NSString* _setSuperTitle;
@private
	UILabel* _titleLabel;
	UIImageView* _voiceView;
	BOOL _isPushViewController;
	BOOL _isAccountRelated;
	NSString* _superTitle;
	UIActivityIndicatorView* _actView;
	NSMutableDictionary* _timeoutHandlers;
	UIView* navigationBarView;
	NSMutableDictionary* _skinsDict;
}
@property(retain, nonatomic) NSMutableDictionary* skinsDict;
@property(assign) int maxLeftTitleNum;
@property(readonly, assign, nonatomic, getter=getNavigationBarView) UIView* navigationBarView;
@property(retain, nonatomic) NSString* setSuperTitle;
@property(assign, nonatomic) BOOL notChangeLbtn;
@property(retain, nonatomic) NSString* superTitle;
@property(retain, nonatomic) UIImageView* voiceView;
@property(retain, nonatomic) UILabel* titleLabel;
@property(assign, nonatomic) BOOL isAccountRelated;
@property(assign, nonatomic) BOOL isPushViewController;
@property(retain, nonatomic) NSString* controllerTitle;
@property(retain, nonatomic) QQView_L* mainView;
@property(readonly, assign, nonatomic) UIButton* rightButton;
@property(readonly, assign, nonatomic) UIButton* leftButton;
+(void)popViewController:(id)controller animated:(BOOL)animated;
+(void)pushViewControllerToNav:(id)nav childViewController:(id)controller animated:(BOOL)animated;
+(void)pushViewController:(id)controller childViewController:(id)controller2 animated:(BOOL)animated;
+(BOOL)CanShowAnimated;
-(void).cxx_destruct;
-(id)nextViewController;
-(id)previousViewController;
-(int)getNavigationViewSkinsType;
-(int)getSkinsType;
-(id)getNavRightBtnTextColor;
-(id)getNavLeftBtnTextColor;
-(id)getNavControlTitleShadowColor;
-(id)getNavControlTitleColor;
-(id)navigationBarBackButton;
-(id)navigationBarRoundButton;
-(id)navigationBarTitleLabel;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)dismissViewControllerAnimated:(BOOL)animated completion:(id)completion;
-(void)presentViewController:(id)controller animated:(BOOL)animated completion:(id)completion;
-(void)dismissModalViewControllerAnimated:(BOOL)animated;
-(void)presentModalViewController:(id)controller animated:(BOOL)animated;
-(void)popQQController:(BOOL)controller;
-(void)pushQQViewControllerToNav:(id)nav animated:(BOOL)animated;
-(void)pushQQViewController:(id)controller animated:(BOOL)animated;
-(void)setCustomTitleView;
-(void)removeRightButton;
-(void)removeLeftButton;
-(BOOL)isSupportRightDragToGoBack;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)setLandscape:(BOOL)landscape;
-(void)hideLoadingIndicator;
-(void)showLoadingIndicator;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)willApplicationAppear;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)printViewControllerInfo:(id)info;
-(void)loadStatusBar;
-(void)restoreData;
-(void)setTitle:(id)title;
-(void)rightButtonClick:(id)click;
-(void)leftButtonClick:(id)click;
-(void)handleGestureRecognizerRight:(id)right;
-(void)createTextRightButton:(id)button action:(SEL)action;
-(void)createImageRightButton:(id)button action:(SEL)action;
-(void)createTextLeftButton:(id)button action:(SEL)action;
-(void)ResetLeftButton;
-(void)setRightButton:(id)button;
-(void)setLeftButton:(id)button;
-(void)viewWillLayoutSubviews;
-(void)handleUIApplicationWillChangeStatusBarFrameNotification:(id)handleUIApplication;
-(void)reDrawNavigationView;
-(void)reDrawView;
-(void)viewDidUnload;
-(void)reSetLeftButtonTitle;
-(id)GetCurrentTitle;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)loadView;
-(void)releaseUI;
-(void)dealloc;
-(void)clearReference:(id)reference;
-(id)init;
@end

@interface QQJSBridge : NSObject {
	NSDictionary* bridges;
	SBJsonParser* jsonParser;
	SBJsonWriter* jsonWriter;
}
-(void).cxx_destruct;
-(id)dictionaryWithURLQueryString:(id)urlqueryString;
-(id)handle:(id)handle;
-(id)init;
@end

@interface QQJSBridgeAppUtils : NSObject {
}
+(id)batchIsInstalled:(id)installed;
+(id)isInstalled:(id)installed;
@end

@interface MQLWhiteListConfig : NSObject <NSCoding> {
@private
	NSString* _version;
	NSArray* _whiteList;
	NSArray* _blockList;
	NSString* _verifyStr;
	NSDate* _updateTime;
}
@property(retain, nonatomic) NSDate* updateTime;
@property(copy, nonatomic) NSString* verifyStr;
@property(retain, nonatomic) NSArray* blockList;
@property(retain, nonatomic) NSArray* whiteList;
@property(copy, nonatomic) NSString* version;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)calcWhiteListVerifStr:(id)str whiteList:(id)list blockList:(id)list3;
-(BOOL)verifData;
@end

@interface MQWebViewWLMatchBlock : NSObject <NSCoding> {
@private
	NSArray* _matchArray;
	NSArray* _apiCanInvoke;
}
@property(retain, nonatomic) NSArray* apiCanInvoke;
@property(retain, nonatomic) NSArray* matchArray;
+(id)parseMatchBlock:(id)block;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(BOOL)verifyApiByApiItem:(id)item apiItem:(id)item2;
-(BOOL)verifyApiByApiArray:(id)array;
-(BOOL)verifyHostByMatchItem:(id)item wlistItem:(id)item2;
-(BOOL)verifyHostByMatchArray:(id)array;
-(BOOL)canInvokeApi:(id)api api:(id)api2;
@end

@interface MQWebViewWhiteListConfig42 : NSObject <NSCoding> {
@private
	NSArray* _whiteListMatchBlock;
	NSString* _verifyStr;
}
@property(copy, nonatomic) NSString* verifyStr;
@property(retain, nonatomic) NSArray* whiteListMatchBlock;
+(id)parseWhiteListCfg42:(id)a42;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)calcMatchBlockVerifStr:(id)str;
-(id)calcWhiteListVerifStr;
-(BOOL)verifData;
-(BOOL)canInvokeApi:(id)api api:(id)api2;
@end

@interface MQLWebviewHostWhiteListMgr : NSObject <TencentRequestDelegate> {
@private
	MQLWhiteListConfig* _serverWhiteList;
	NSArray* _fixWhiteList;
	MQWebViewWhiteListConfig42* _serverWhiteList42;
	MQWebViewWhiteListConfig42* _fixWhiteList42;
	NSDate* _updateTime;
	TencentRequest* _decodeRequest;
}
@property(retain, nonatomic) NSDate* updateTime;
@property(retain, nonatomic) MQWebViewWhiteListConfig42* fixWhiteList42;
@property(retain, nonatomic) MQWebViewWhiteListConfig42* serverWhiteList42;
@property(retain, nonatomic) NSArray* fixWhiteList;
@property(retain, nonatomic) MQLWhiteListConfig* serverWhiteList;
@property(retain, nonatomic) TencentRequest* decodeRequest;
+(id)instance;
-(void).cxx_destruct;
-(void)loadConfig;
-(void)saveConfig;
-(void)clearConnState;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didLoad:(id)load dat:(id)dat;
-(BOOL)downConfig;
-(BOOL)enforceUpdateWhiteList;
-(BOOL)updateWhiteList;
-(BOOL)canInvokeApi:(id)api api:(id)api2;
-(BOOL)verifyHostByWListItem:(id)item wlistItem:(id)item2;
-(BOOL)verifyHostByWList:(id)list wlist:(id)wlist;
-(BOOL)hostVerify:(id)verify;
-(id)init;
@end

@interface TXAppidConvert : NSObject {
}
+(id)ConvertAppId:(id)anId;
@end

@interface TCQRCodeLayoutDataSourceImpl : NSObject <ITCQRCodeLayoutDataSource> {
@private
	NSString* _qrcodeText;
	UIImage* _headIcon;
	UIImage* _logoIcon;
	NSString* _nickname;
	NSString* _tips;
}
@property(retain, nonatomic) NSString* tips;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) UIImage* logoIcon;
@property(retain, nonatomic) UIImage* headIcon;
@property(retain, nonatomic) NSString* qrcodeText;
-(void).cxx_destruct;
@end

@interface TCQRCodeLayout : UIView {
}
+(id)layoutWithTemplate:(id)aTemplate;
-(id)snapshotImage;
-(BOOL)updateDataWithSource:(id)source;
-(BOOL)updateStyleWithTemplate:(id)aTemplate;
@end

@interface TCQRCodeLayout_1 : TCQRCodeLayout {
	UIView* _container;
	UIImageView* _containerBkg;
	UIView* _infoContainer;
	UIImageView* _headIcon;
	UILabel* _nameLabel;
	UILabel* _tipsLabel;
	UIView* _qrCodeContainer;
	UIImageView* _qrBkg;
	UIImageView* _qrMask;
	UIImageView* _qrFace;
	TCQRCodeGenerator* _qrCodeGen;
	UIImage* _qrMaskImg;
	NSArray* _clipRects;
	int _qrLogoStyle;
}
@property(readonly, assign, nonatomic) int qrLogoStyle;
@property(readonly, assign, nonatomic) NSArray* clipRects;
@property(readonly, assign, nonatomic) UIImage* qrMaskImg;
@property(readonly, assign, nonatomic) TCQRCodeGenerator* qrCodeGen;
@property(readonly, assign, nonatomic) UIImageView* qrFace;
@property(readonly, assign, nonatomic) UIImageView* qrMask;
@property(readonly, assign, nonatomic) UIImageView* qrBkg;
@property(readonly, assign, nonatomic) UIView* qrCodeContainer;
@property(readonly, assign, nonatomic) UILabel* tipsLabel;
@property(readonly, assign, nonatomic) UILabel* nameLabel;
@property(readonly, assign, nonatomic) UIImageView* headIcon;
@property(readonly, assign, nonatomic) UIView* infoContainer;
@property(readonly, assign, nonatomic) UIImageView* containerBkg;
@property(readonly, assign, nonatomic) UIView* container;
-(void).cxx_destruct;
-(id)snapshotImage;
-(BOOL)updateDataWithSource:(id)source;
-(BOOL)updateStyleWithTemplate:(id)aTemplate;
-(void)prepareUI;
-(void)layoutSubviews;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
@end

@interface TCSignalChannelHelper : NSObject {
	NSData* _data;
	NSString* _serviceCmd;
	int _seq;
	BOOL _immediately;
	int _timeOut;
	BOOL _answerFlag;
}
@property(assign, nonatomic) BOOL answerFlag;
@property(assign, nonatomic) int timeOut;
@property(assign, nonatomic) BOOL immediately;
@property(readonly, assign, nonatomic) int seq;
@property(retain, nonatomic) NSString* serviceCmd;
@property(retain, nonatomic) NSData* data;
+(id)helperWithData:(id)data cmd:(id)cmd immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(void).cxx_destruct;
-(BOOL)sendData:(id)data withCmd:(id)cmd immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(BOOL)send;
-(id)initWithData:(id)data cmd:(id)cmd immediately:(BOOL)immediately timeOut:(int)anOut answerFlag:(BOOL)flag;
-(id)init;
@end

@interface MQDNSCache : NSObject {
@private
	NSMutableDictionary* _dnsCache;
	NSDictionary* _fixDNSCache;
}
@property(retain, nonatomic) NSDictionary* fixDNSCache;
@property(retain, nonatomic) NSMutableDictionary* dnsCache;
+(id)instance;
-(void).cxx_destruct;
-(void)loadConfig;
-(void)saveConfig;
-(void)dealHostCallback:(id)callback ipStr:(id)str;
-(void)getDNS:(id)dns;
-(id)getIPbyHost:(id)host;
-(BOOL)enforceUpdateDNS:(id)dns;
-(BOOL)updateDNSIfNeed:(id)need;
-(id)init;
@end

@interface TCAPICallerBase : NSObject <ITCHostSignalChannel, ITCHostTips, ITCHostLog> {
@private
	Protocol* _protocol;
	id<ITCAPIForwarding> _apiForwarder;
}
@property(retain, nonatomic) id<ITCAPIForwarding> apiForwarder;
@property(retain, nonatomic) Protocol* protocol;
+(BOOL)resolveInstanceMethod:(SEL)method;
+(id)apiCallerWithProtocol:(id)protocol apiForwarder:(id)forwarder;
-(void).cxx_destruct;
-(void)forwardInvocation:(id)invocation;
-(id)initWithProtocol:(id)protocol apiForwarder:(id)forwarder;
@end

@interface QQJSBridgeNavigationUtils : NSObject {
}
+(id)openLinkInSafari:(id)safari;
+(id)openLinkInNewWebView:(id)newWebView;
+(id)showOfficalAccountDetail:(id)detail;
+(id)setActionButton:(id)button;
+(id)setLoadingColor:(id)color;
+(id)hideLoading:(id)loading;
+(id)showLoading:(id)loading;
+(id)reload:(id)reload;
+(id)popBack:(id)back;
@end

@interface QQJSBridgeDataUtils : NSObject {
}
+(void)sendRequestWithParameters:(id)parameters withCookie:(BOOL)cookie;
+(id)fetchJson:(id)json;
+(id)queryCurrentLocation:(id)location;
+(id)userInfo:(id)info;
@end

@interface QQJSBridgeDeviceUtils : NSObject {
}
+(id)qqBuild:(id)build;
+(id)qqVersion:(id)version;
+(id)modelVersion:(id)version;
+(id)model:(id)model;
+(id)systemVersion:(id)version;
+(id)systemName:(id)name;
+(id)isMobileQQ:(id)qq;
@end

@interface AccountItem : NSObject {
@private
	UIImage* _head;
	NSString* _nick;
	unsigned _uin;
	int _style;
	int _type;
	NSData* _D2;
	NSData* _A2;
	NSData* _D2Key;
}
@property(assign, nonatomic) int style;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSData* D2Key;
@property(retain, nonatomic) NSData* D2;
@property(retain, nonatomic) NSData* A2;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) UIImage* head;
@property(assign, nonatomic) unsigned uin;
-(void).cxx_destruct;
@end

@interface AccountTableViewCell : UITableViewCell {
	UIImageView* _head;
	UILabel* _nick;
	UILabel* _uin;
@private
	NSString* _backImageName;
	AccountItem* _item;
}
@property(retain, nonatomic) AccountItem* item;
@property(retain, nonatomic) NSString* backImageName;
-(void).cxx_destruct;
-(void)deleteMe;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface AccountSelectViewController : QBAViewController <UITableViewDelegate, UITableViewDataSource, SimpleLoginDelegate, RequestDelegate> {
@private
	UITableView* _accountTableView;
	UIScrollView* _scrollView;
	AccountTableViewCell* _cellBtn;
	SSoVerifyViewController* _verifyViewController;
	NSMutableArray* _dataSource;
	AuthorizationRequest* _authorizationRequest;
	NSData* _sKEY;
	NSDictionary* _loginInfoForThirdPart;
	long long _uin;
	unsigned _currentUin;
	NSString* _userNick;
}
@property(retain, nonatomic) NSString* userNick;
@property(retain, nonatomic) NSData* sKEY;
@property(assign, nonatomic) long long uin;
@property(retain, nonatomic) AuthorizationRequest* authorizationRequest;
@property(retain, nonatomic) NSMutableArray* dataSource;
@property(assign, nonatomic) unsigned currentUin;
@property(retain, nonatomic) NSDictionary* loginInfoForThirdPart;
-(void).cxx_destruct;
-(void)leftButtonClick:(id)click;
-(void)dealloc;
-(void)LoginTimerOut;
-(void)inputPassword:(id)password;
-(void)deleteAccount:(unsigned)account;
-(void)loginFailed:(int)failed withMsg:(id)msg;
-(void)loginSucceed:(id)succeed Uin:(unsigned)uin Nickname:(id)nickname;
-(void)GetQQHeadDelegate:(id)delegate headBuf:(id)buf;
-(void)RequestSvrErrorCode:(id)code;
-(void)RequestSystemNetError:(id)error;
-(void)SetAuthorizationDelegate:(id)delegate dicinfo:(id)dicinfo errorMsg:(id)msg;
-(void)GetAuthorizationInfoDelegate:(id)delegate dicinfo:(id)dicinfo errorMsg:(id)msg;
-(void)gotoLoginViewControllerNotWithAnimation:(unsigned)animation;
-(void)gotoLoginViewController:(unsigned)controller animation:(BOOL)animation;
-(void)gotoAuthorizationWithUin:(unsigned)uin andNickName:(id)name andSkey:(id)skey;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)reportWtloginError:(int)error;
-(void)reportNoNetWork:(id)work;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)didReceiveMemoryWarning;
-(BOOL)reloadData;
-(void)createBgView;
-(void)viewDidLoad;
-(id)init;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface TXBizQRCodeUrlData : NSObject {
@private
	unsigned char _ver;
	unsigned char _softID;
	unsigned char _serviceID;
	unsigned char _flag;
	unsigned _uin;
	NSString* _tenpayTokenID;
}
@property(copy, nonatomic) NSString* tenpayTokenID;
@property(assign, nonatomic) unsigned uin;
@property(assign, nonatomic) unsigned char flag;
@property(assign, nonatomic) unsigned char serviceID;
@property(assign, nonatomic) unsigned char softID;
@property(assign, nonatomic) unsigned char ver;
-(void).cxx_destruct;
@end

@interface QRCodeDecodeBiz : NSObject <TencentRequestDelegate> {
@private
	int _lastSignalChannelSeq;
	NSString* _qrcodeResultUrl;
	int _retryCount;
	TencentRequest* _decodeRequest;
	id<QRCodeDecodeBizDelegate> _resultDelegate;
}
@property(retain, nonatomic) TencentRequest* decodeRequest;
@property(assign, nonatomic) id<QRCodeDecodeBizDelegate> resultDelegate;
+(BOOL)checkIsQRCodeBizURL:(id)url;
-(void).cxx_destruct;
-(void)handleCannotDecode;
-(void)handleNetErr;
-(void)handleDecodeSucceed:(id)succeed;
-(void)delayRetryDecode:(id)decode;
-(void)signalChannelErrorNote:(id)note;
-(void)signalChannelMsgNote:(id)note;
-(id)parseNSString:(char*)string len:(unsigned short)len;
-(id)parseTLVMsg:(char*)msg size:(int)size;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didLoad:(id)load dat:(id)dat;
-(void)handleQRCodeDecodeResult:(id)result;
-(BOOL)decodeURLByCGI:(id)cgi;
-(BOOL)decodeURL:(id)url;
-(BOOL)decodeQRCodeUrl:(id)url;
-(void)dealloc;
-(id)init:(id)init;
@end

@interface Decoder : NSObject {
	NSSet* readers;
	UIImage* image;
	CGRect cropRect;
	UIImage* subsetImage;
	char* subsetData;
	unsigned long subsetWidth;
	unsigned long subsetHeight;
	unsigned long subsetBytesPerRow;
	id<DecoderDelegate> delegate;
}
@property(assign, nonatomic) id<DecoderDelegate> delegate;
@property(assign) unsigned long subsetBytesPerRow;
@property(assign) unsigned long subsetHeight;
@property(assign) unsigned long subsetWidth;
@property(assign, nonatomic) char* subsetData;
@property(retain, nonatomic) UIImage* subsetImage;
@property(assign, nonatomic) CGRect cropRect;
@property(retain, nonatomic) NSSet* readers;
@property(retain, nonatomic) UIImage* image;
-(id).cxx_construct;
-(void)dealloc;
-(BOOL)decodeImage:(id)image cropRect:(CGRect)rect;
-(BOOL)decodeImage:(id)image;
-(BOOL)decode;
-(void)prepareSubset;
-(void)resultPointCallback:(CGPoint)callback;
-(void)failedToDecodeImage:(id)decodeImage;
-(void)didDecodeImage:(id)image;
-(void)willDecodeImage;
@end

@interface FormatReader : NSObject {
	Reader* reader_;
}
+(void)registerFormatReader:(id)reader;
-(Ref<zxing::Result>)decode:(Ref<zxing::BinaryBitmap>)decode andCallback:(Ref<zxing::ResultPointCallback>)callback;
-(Ref<zxing::Result>)decode:(Ref<zxing::BinaryBitmap>)decode;
-(void)dealloc;
-(id)initWithReader:(Reader*)reader;
@end

@interface TwoDDecoderResult : NSObject <NSCopying> {
	NSString* text;
	NSArray* points;
}
@property(retain, nonatomic) NSArray* points;
@property(retain, nonatomic) NSString* text;
+(id)resultWithText:(id)text points:(id)points;
-(id)description;
-(void)dealloc;
-(id)copy;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithText:(id)text points:(id)points;
@end

@interface ParsedResult : NSObject {
	NSMutableArray* actions;
}
+(id)icon;
+(id)typeName;
-(void)dealloc;
-(void)populateActions;
-(id)actions;
-(id)icon;
-(id)stringForDisplay;
@end

@interface TextParsedResult : ParsedResult {
	NSString* text;
}
@property(retain, nonatomic) NSString* text;
+(id)typeName;
-(void)dealloc;
-(void)populateActions;
-(id)stringForDisplay;
-(id)icon;
-(id)initWithString:(id)string;
@end

@interface ResultParser : NSObject {
}
+(id)dictionaryForQueryString:(id)queryString;
+(id)parsedResultForString:(id)string;
+(id)parsedResultForString:(id)string format:(int)format;
+(id)resultParsers;
+(void)registerResultParserClass:(Class)aClass;
+(id)urlDecode:(id)decode;
@end

@interface TextResultParser : ResultParser {
}
+(id)parsedResultForString:(id)string format:(int)format;
@end

@interface QRCodeReader : FormatReader {
}
-(id)init;
@end

@interface ZBarSymbol : NSObject {
	const zbar_symbol_s* symbol;
}
@property(readonly, assign, nonatomic) CGRect bounds;
@property(readonly, assign, nonatomic) const zbar_symbol_s* zbarSymbol;
@property(readonly, assign, nonatomic) ZBarSymbolSet* components;
@property(readonly, assign, nonatomic) int orientation;
@property(readonly, assign, nonatomic) int count;
@property(readonly, assign, nonatomic) int quality;
@property(readonly, assign, nonatomic) NSString* data;
@property(readonly, assign, nonatomic) unsigned modifierMask;
@property(readonly, assign, nonatomic) unsigned configMask;
@property(readonly, assign, nonatomic) NSString* typeName;
@property(readonly, assign, nonatomic) int type;
+(id)nameForType:(int)type;
-(void)dealloc;
-(id)initWithSymbol:(const zbar_symbol_s*)symbol;
@end

@interface ZBarSymbolSet : NSObject <NSFastEnumeration> {
	const zbar_symbol_set_s* set;
	BOOL filterSymbols;
}
@property(assign, nonatomic) BOOL filterSymbols;
@property(readonly, assign, nonatomic) const zbar_symbol_set_s* zbarSymbolSet;
@property(readonly, assign, nonatomic) int count;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(void)dealloc;
-(id)initWithSymbolSet:(const zbar_symbol_set_s*)symbolSet;
@end

@interface ZBarImage : NSObject {
	zbar_image_s* zimg;
	double t_convert;
}
@property(readonly, assign, nonatomic) UIImage* UIImage;
@property(readonly, assign, nonatomic) zbar_image_s* zbarImage;
@property(copy, nonatomic) ZBarSymbolSet* symbols;
@property(readonly, assign, nonatomic) unsigned long dataLength;
@property(readonly, assign, nonatomic) const void* data;
@property(assign, nonatomic) CGRect crop;
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) unsigned sequence;
@property(assign, nonatomic) unsigned long format;
+(unsigned long)fourcc:(id)fourcc;
-(void)cleanup;
-(id)UIImageWithOrientation:(int)orientation;
-(void)setData:(const void*)data withLength:(unsigned long)length;
-(zbar_image_s*)image;
-(id)initWithCGImage:(CGImageRef)cgimage;
-(id)initWithCGImage:(CGImageRef)cgimage size:(CGSize)size;
-(id)initWithCGImage:(CGImageRef)cgimage crop:(CGRect)crop size:(CGSize)size;
-(void)dealloc;
-(id)init;
-(id)initWithImage:(zbar_image_s*)image;
@end

@interface ZBarImageScanner : NSObject {
	zbar_image_scanner_s* scanner;
}
@property(readonly, assign, nonatomic) ZBarSymbolSet* results;
@property(assign, nonatomic) BOOL enableCache;
-(int)scanImage:(id)image;
-(void)setSymbology:(int)symbology config:(int)config to:(int)to;
-(void)parseConfig:(id)config;
-(void)dealloc;
-(id)init;
@end

@interface TCQRCodeGenerator : NSObject {
@private
	NSString* _text;
	UIColor* _blackPointColor;
	UIColor* _whitePointColor;
	float _qrMargin;
	int _qrErrCorrLv;
	unsigned _qrVer;
	XXStruct_vtRafC* _qrcode;
}
@property(assign, nonatomic) XXStruct_vtRafC* qrcode;
@property(assign, nonatomic) unsigned qrVer;
@property(assign, nonatomic) int qrErrCorrLv;
@property(assign, nonatomic) float qrMargin;
@property(copy, nonatomic) UIColor* whitePointColor;
@property(copy, nonatomic) UIColor* blackPointColor;
@property(copy, nonatomic) NSString* text;
+(unsigned)QRVersionForQRWidth:(unsigned)qrwidth;
+(unsigned)QRMinimumVersionWithDataLength:(unsigned)dataLength atErrCorrLv:(int)errCorrLv;
+(unsigned)QRPointsNeededPerRowWithDataLength:(unsigned)dataLength atErrCorrLv:(int)errCorrLv;
+(id)qrImageForString:(id)string imageSize:(float)size;
+(void)drawQRCode:(XXStruct_vtRafC*)code inContext:(CGContextRef)context withSize:(float)size blackColor:(id)color whiteColor:(id)color5 qrMargin:(float)margin;
-(id)qrImageForSize:(float)size;
-(id)initWithText:(id)text;
-(id)init;
-(void)dealloc;
@end

@interface QQVideoBar : UIView {
	UIView* _supperView;
	BOOL _isShow;
	double _timeInterval;
	id<QQVideoBarDelegate> _delegate;
@private
	UIImage* _closebutton;
	CGRect _CloseButtonRect;
	CGRect _CloseResponseRect;
	BOOL _isPressed;
}
@property(retain, nonatomic) id<QQVideoBarDelegate> delegate;
@property(assign, nonatomic) UIImage* closebutton;
-(id).cxx_construct;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)removeView;
-(void)dismiss;
-(void)show;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame inView:(id)view;
@end

@interface QQButtonSourcesModel : NSObject {
	NSString* _openNor;
	NSString* _openHl;
}
@property(retain, nonatomic) NSString* openHl;
@property(retain, nonatomic) NSString* openNor;
+(id)modelWithOpenNor:(id)openNor openHl:(id)hl;
-(void)dealloc;
@end

@interface QQVideControlBar : UIView {
	NSMutableArray* _imageObjects;
	double* _before;
	double* _now;
	id<QQVideControlBarDelegate> _delegate;
	SEL _sel;
	BOOL _isShow;
	BOOL _locDismiss;
	CGRect _rectStart;
	CGRect _rectEnd;
@private
	int _count;
	CGRect* _rects;
	BOOL* _selecteds;
	BOOL* _enAbles;
	BOOL _isFlashing;
	BOOL _keepShow;
	BOOL _isHidden;
	int _sessionType;
}
@property(assign, nonatomic) CGRect rectEnd;
@property(assign, nonatomic) CGRect rectStart;
@property(assign, nonatomic) BOOL locDismiss;
@property(retain, nonatomic) id<QQVideControlBarDelegate> delegate;
-(id).cxx_construct;
-(void)changeSpeakerMode:(id)mode;
-(void)flash;
-(void)changeFlashTag;
-(void)showOrHide;
-(void)hiddenView;
-(void)alwaysShow;
-(void)updateTimer;
-(void)show:(BOOL)show;
-(void)afterShow;
-(void)removeView;
-(void)dismiss;
-(void)switchTo:(int)to;
-(void)didVideBarIndex:(int)index;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)startAnimationDelay;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQVideDefalutView : UIView {
	UIImage* _defalutBgImage;
	UIImage* _iconImage;
	NSMutableArray* _animationImages;
	UIImageView* _bgImageView;
	UIImageView* _cameraView;
	UIImageView* _imageAnimation;
	double _timerInterval;
	int _animationIndex;
	UIImage* _animationSelectedImage;
}
@property(assign, nonatomic) double timerInterval;
@property(retain, nonatomic) NSMutableArray* animationImages;
@property(retain, nonatomic) UIImage* iconImage;
@property(retain, nonatomic) UIImage* defalutBgImage;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQVideoHeadTipsBar : UIView {
	UIView* _supperView;
	BOOL _isShow;
	double _timeInterval;
@private
	UIImage* _bgImage;
	UIImage* _headImage;
	NSString* _nick;
	NSString* _content;
	UIFont* _nickFont;
	UIFont* _contentFont;
	UIColor* _nickColor;
	UIColor* _contentColor;
	CGPoint _nickOffset;
	CGPoint _contentOffset;
	QQVideoProgressBar* _progressBar;
}
@property(assign, nonatomic) CGPoint contentOffset;
@property(assign, nonatomic) CGPoint nickOffset;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) UIImage* headImage;
@property(retain, nonatomic) UIImage* bgImage;
-(void)removeView;
-(void)dismiss;
-(void)show;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame inView:(id)view;
@end

@interface QQVideTimeTips : UIView {
	double _interval;
	UIFont* _font;
	UIColor* _fontColor;
	UIView* _superView;
	BOOL _isShow;
	BOOL _isStart;
	int _timerCount;
	NSTimer* _timer;
	UILabel* _timeLabel;
	NSTimer* _timerShowMonitor;
	int _counterShowMonitor;
	BOOL _isShowMonitorTimerStarted;
	BOOL _isMonitorShow;
}
@property(assign, nonatomic) double interval;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setMonitorHidden:(BOOL)hidden;
-(void)clearCounter;
-(void)changeBgImage;
-(void)disMiss;
-(void)removeView;
-(void)show;
-(void)drawRect:(CGRect)rect;
-(id)GetNumberString:(int)string;
-(void)update;
-(void)end;
-(void)start;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame showInView:(id)view;
@end

@interface QQVideoTipsCell : UIView {
	NSString* _titleMsg;
	id<QQVideoTipsCellDelegate> _delegate;
	CGRect _CloseResponseRect;
	BOOL _isShow;
	BOOL _isPressed;
}
@property(assign, nonatomic) id<QQVideoTipsCellDelegate> delegate;
@property(retain, nonatomic) NSString* titleMsg;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dismiss;
-(void)showInView:(id)view;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame withLevel:(int)level withMsg:(id)msg withState:(int)state withDelegate:(id)delegate;
@end

@interface QVideoChatModule : NSObject {
}
-(void)dealloc;
-(id)init;
@end

@interface VideoRingPlayer : NSObject <AVAudioPlayerDelegate> {
	AVAudioPlayer* _audioPlayer;
	BOOL _isSoundLooping;
	BOOL _isSoundPlaying;
	BOOL _keepVibrate;
	int _vibTimes;
}
@property(assign, nonatomic) int vibTimes;
@property(assign, nonatomic) BOOL keepVibrate;
@property(assign, nonatomic) BOOL isSoundPlaying;
@property(readonly, assign, nonatomic) BOOL isSoundLooping;
-(void)stopVibrate;
-(void)startVibrate;
-(void)vibrate;
-(void)audioPlayerEndInterruption:(id)interruption;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
-(void)playVoice:(id)voice;
-(void)stopAudio;
-(void)pauseAudio;
-(void)playAudio:(id)audio type:(id)type loop:(BOOL)loop volume:(float)volume needMute:(BOOL)mute;
@end

@interface MyView : UIView {
}
-(void)setFrame:(CGRect)frame;
@end

@interface QQVideoBaseViewController : QQSimpleViewController <QQVideControlBarDelegate, QQVoiceButtonDelegate, QQVideoBarDelegate, QQVideoTipsCellDelegate, QQChatButtonDelegate, AudioRecordAndPlayerDelegate, VideoCaptureDelegate, QQVideoTipsCellDelegate, UIAccelerometerDelegate> {
	UIImageView* _msgNotiView;
	UILabel* _msgNotiLabel;
	UIView* _closeView;
	QQLocalVideoView* _localView;
	id _previewLayer;
	QQVideDefalutView* _bkgndView;
	QQAudioDefaultView* _audioBkgndView;
	QQVoiceHeadView* _voiceheadview;
	QQVideoCloseView* _videocloseview;
	QQVideoHeadTipsBar* _videoHeadTips;
	QQVideoBar* _videoBar;
	QQVoiceButton* _voiceLeftBtn;
	QQVoiceButton* _voiceRightBtn;
	QQVideoMsgBar* _videoMessageBar;
	QQVideTimeTips* _videoTimeTips;
	EAGLView_v2* _imageView;
	QQVideControlBar* _videoCtlBar;
	QQVideoTipsCell* _OverTimeTipsCell;
	UIImageView* _smallBkgndView;
	UIImageView* _audioMaskView;
	UIImageView* _friAudioTipsView;
	UILabel* _friAudioTips;
	UIImageView* _slfAudioIcon;
	UIButton* _cameraButton;
	BOOL _bneedResume;
	BOOL _bIsClosedOnBackGround;
	int _currentPosition;
	float _degree;
	float _positionDegree;
	UILabel* _fpsLabel;
	UILabel* _fpsLabel1;
	AudioRecordAndPlayer* _pAudioRecordAndPlayer;
	AudioHelper* _pAudioHelper;
	char* rgb24Buffer;
	VideoCapture* _pVideoCapture;
	unsigned long long _selfUin;
	NSString* _selfNick;
	UIImage* _selfImage;
	unsigned long long _friUin;
	NSString* _friNick;
	UIImage* _friImage;
	BOOL _openvideo;
	BOOL _openaudio;
	int _sessionType;
	int _videoLevel;
	int _audioType;
	BOOL _request;
	NSTimer* _timer_stop_drawing;
	BOOL _isFlipping;
	BOOL _isParentViewStatusHidden;
	BOOL _isAudioEnabled;
	BOOL _isAudioMute;
	BOOL _isVideoEnabled;
	BOOL _isMainView;
	BOOL _isFirstFrame;
	BOOL _isRunning;
	BOOL _isFriVideoEnable;
	BOOL _isFriAudioEnable;
	NSTimer* _timer_recall;
	NSTimer* _timer_record;
	NSTimer* _timer_nocamera;
	NSTimer* _timer_accept;
	BOOL _bstop;
	int _listenMode;
	BOOL _isStoped;
	int _accType;
	CGRect _rectSmallImage;
	BOOL _isBeginPointInRectSmallImage;
	CGPoint _gestureStartPoint;
	float _offsetX;
	float _offsetY;
	float _curr_X;
	float _curr_Y;
	BOOL _isMoving;
	BOOL _isMoved;
	BOOL _isBackground;
	BOOL _isDrawing;
	int _oriOrientation;
	BOOL _isRotate;
	BOOL _flag;
	double _before;
	double _now;
	VideoRingPlayer* _ringPlayer;
	NSTimer* _ringTimer;
	CGPoint _beginPoint;
	BOOL _isControlHidden;
	UIAccelerometer* _accelerometer;
	BOOL _isProximity;
	NSTimer* _waitProximityTimer;
	BOOL _isTiming;
	BOOL _bSharp;
	BOOL _isPoped;
	int _curBaseAngle;
	int _test;
	BOOL _bLoadFinished;
	BOOL _isSelfAudio;
	BOOL _isFriAudio;
	BOOL _isHeadSetMode;
	BOOL _isPreHeadSetMode;
	BOOL _isFriHasCamera;
}
@property(assign, nonatomic) BOOL bSharp;
@property(retain, nonatomic) UIImage* friImage;
@property(retain, nonatomic) NSString* friNick;
@property(retain, nonatomic) UIImage* selfImage;
@property(retain, nonatomic) NSString* selfNick;
-(id).cxx_construct;
-(void)switchAudioVideo;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)closeAndReleaseAudio;
-(void)retainCountPrint:(id)print withName:(id)name;
-(void)setLayer:(id)layer shadowed:(bool)shadowed;
-(void)flipForView:(id)view;
-(void)runThreadWithTarget:(id)target selector:(SEL)selector object:(id)object;
-(void)closeVideoHandle:(BOOL)handle;
-(void)openVideoHandle:(BOOL)handle;
-(void)switchView;
-(void)animatedShowLocalView;
-(void)viewSwitch:(BOOL)aSwitch;
-(void)switchCameraOnOtherThread;
-(void)flipCameraView;
-(void)switchCamera;
-(void)displayVideoFrame:(id)frame;
-(CGRect)calcDisplayRect:(int)rect SelfAngle:(int)angle AreaSize:(CGSize)size;
-(BOOL)calcFullScr:(int)scr SelfAngle:(int)angle;
-(float)getCurrentOrientationDegree;
-(float)calcRotateAngle:(int)angle SelfAngle:(int)angle2;
-(void)onRecvData:(char*)data Length:(int)length FrameAngle:(int)angle;
-(void)resetFlip;
-(void)setFlip;
-(void)RecvFirstFrame;
-(void)releaseVideo;
-(void)stopVideo;
-(void)startVideo;
-(void)initVideo;
-(void)initVideoFrameView;
-(void)toggleSwitchchatEventHandle:(id)handle;
-(void)touchEventHandle:(id)handle;
-(void)closeEventHandle:(id)handle;
-(void)toggleMuteEventHandle:(id)handle mode:(int)mode;
-(void)toggleModeEventHandle:(id)handle mode:(int)mode;
-(void)videoControlBarDismiss;
-(void)videoControlBarShow;
-(void)smallViewAnimation:(BOOL)animation;
-(void)tipsTouchEventHandle:(id)handle;
-(void)didCloseSessionAction;
-(void)didSpeakerAction;
-(void)didCameraAction;
-(void)didMuteAction;
-(void)didSwitchAudioVideoAction;
-(char*)nv12_to_yv12_convert:(char*)convert withWidth:(int)width andHeight:(int)height;
-(void)drawVideoData:(char*)data BufferSize:(unsigned long)size Width:(unsigned long)width HeightY:(unsigned long)y;
-(void)transmitVideoData:(char*)data BufferSize:(unsigned long)size Width:(unsigned long)width HeightY:(unsigned long)y;
-(void)moveToX:(float)x ToY:(float)y;
-(void)previewAutoMoveFrom:(CGPoint)from toPoint:(CGPoint)point;
-(BOOL)headsetIsPluggedIn;
-(void)afterCancelRequestPopView;
-(void)cancelRequest;
-(void)handleNetworkState:(id)state;
-(void)messageTipHide:(id)hide;
-(void)messageTipShow:(id)show;
-(void)messageNotification:(id)notification;
-(void)handleSwitchVideoCancel:(id)cancel;
-(void)handleSwitchVideoConfirm:(id)confirm;
-(void)handleSwitchVideo:(id)video;
-(void)handleSwitchAudio:(id)audio;
-(void)handleResumeAudio:(id)audio;
-(void)handlePauseAudio:(id)audio;
-(void)handleResumeVideo:(id)video;
-(void)handlePauseVideo:(id)video;
-(void)handleEnterRoom:(id)room;
-(void)handleConnRelay:(id)relay;
-(void)handleNetworkErr:(id)err;
-(void)handleClosed:(id)closed;
-(void)handleConnected:(id)connected;
-(void)removeVideoBar;
-(void)handleConnecting:(id)connecting;
-(void)handleAccepted:(id)accepted;
-(void)handleOpen:(id)open;
-(void)handleReceiverReceived;
-(void)handleRequestSended;
-(int)DevGetData:(char*)data :(int)arg2;
-(int)DevPutData:(char*)data :(int)arg2;
-(void)MonitorInfo:(id)info;
-(void)onNetworkMonitor:(char*)monitor Length:(int)length FrameAngle:(int)angle;
-(void)popViewController:(BOOL)controller;
-(void)releaseAllResource;
-(void)SetInPutMute;
-(void)SetVideoShow;
-(void)SetSpeakerHeadset;
-(void)switchspeakermode;
-(void)switchheadmode;
-(void)toggleSelfView;
-(void)videointerruptionenddone:(id)videointerruptionenddone;
-(void)videointerruptionstartdone:(id)videointerruptionstartdone;
-(void)toggleVideo;
-(void)toggleAudio;
-(void)releaseAudio;
-(void)stopAudio;
-(void)startAudioWithMode:(int)mode isMute:(BOOL)mute;
-(int)didRotate:(BOOL)rotate;
-(id)previewLayer:(CGRect)layer;
-(void)initAudio;
-(void)setSessionType:(int)type VideoLevel:(int)level AudioType:(int)type3 OpenVideo:(BOOL)video OpenAudio:(BOOL)audio;
-(void)setFriInfoUin:(unsigned long long)uin NickName:(id)name image:(id)image;
-(void)setSelfInfoUin:(unsigned long long)uin NickName:(id)name image:(id)image;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)handleOvertimePopup:(id)popup;
-(void)afterCloseSessionPopView;
-(void)closeSession;
-(void)setViewinfo:(int)viewinfo request:(BOOL)request parentStatusBarHidden:(BOOL)hidden;
-(void)showOvertimeView:(id)view;
-(void)onTimer:(id)timer;
-(void)delayInit;
-(void)initInterface;
-(void)initVoiceCallingUI;
-(void)audioTipsViewHide;
-(void)initVideoComponent;
-(void)initAudioComponent;
-(void)initVideoCallingUI;
-(void)didReceiveMemoryWarning;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)loadView;
-(void)layoutViewsIfNeeds:(id)needs;
-(void)handleUIApplicationWillChangeStatusBarFrameNotification:(id)handleUIApplication;
-(void)resignActive;
-(void)becomeActive;
-(void)orientationChanged:(id)changed;
-(void)onForceOffLine;
-(void)networkErrorCloseSession;
-(void)notificationCloseSession;
-(void)initNotification;
-(void)PluggInHeadset:(id)headset;
-(void)UnPluggingHeadset:(id)headset;
-(void)onVideoEnterBackground;
-(void)onVideoEnterFrontground;
-(void)OnVideoNotificationData:(id)data;
-(void)OnVideoNotificationC2CMsg:(id)msg;
-(void)OnVideoNotificationInfo:(id)info;
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
-(void)clearProximityMonitoring;
-(void)sensorStateChange:(id)change;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)dealloc;
-(id)init;
@end

@interface QQVoiceHeadView : UIView {
	UIView* _supperView;
	BOOL _isShow;
	double _timeInterval;
	BOOL _isSelfView;
@private
	UIImage* _bgImage;
	UIImage* _headImage;
	UIImage* _noneVideoImage;
	NSString* _nick;
	NSString* _content;
	UIFont* _nickFont;
	UIFont* _contentFont;
	UIColor* _nickColor;
	UIColor* _contentColor;
	UILabel* _nickLabel;
	UILabel* _contentLabel;
	CGPoint _nickOffset;
	CGPoint _contentOffset;
}
@property(assign, nonatomic) BOOL isSelfView;
@property(assign, nonatomic) UILabel* contentLabel;
@property(assign, nonatomic) UILabel* nickLabel;
@property(assign, nonatomic) CGPoint contentOffset;
@property(assign, nonatomic) CGPoint nickOffset;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* nick;
@property(retain, nonatomic) UIImage* headImage;
@property(retain, nonatomic) UIImage* bgImage;
-(id).cxx_construct;
-(void)removeView;
-(void)dismiss;
-(void)show;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame inView:(id)view;
@end

@interface VideoChatService : NSObject <IVideoChatService, IEngineDispatchDelegate> {
	CIMEngineMsgStruct videoMsgCache;
	CIMEngineMsgStruct sharpVideoMsgCache;
	int lastCmdType;
	long long pushUin;
	long long pushTime;
	int videoSeq;
	bool showAlertDelay;
	unsigned long long m_friUin;
	bool _isRequest;
	bool _isBackGround;
	bool _isSharpReqFromPush;
	bool _isSharpReq;
@private
	NSMutableArray* _qqMessageQueue;
	NSTimer* _timer_push;
	NSArray* _valueDelay;
}
@property(retain, nonatomic) NSArray* valueDelay;
+(id)GetInstance;
-(id).cxx_construct;
-(void)commitClientAction;
-(void)upLoadClientAction:(id)action fromUIN:(id)uin toUIN:(id)uin3;
-(void)upLoadSharpLog:(unsigned long long)log :(const char*)arg2;
-(void)uploadVideoLog:(unsigned long long)log :(const char*)arg2;
-(void)printClientLog:(id)log;
-(void)qqLoginSuccessNotification:(id)notification;
-(int)updateNetFlow:(int)flow Size:(unsigned long long)size;
-(int)GetDeviceType;
-(void)noHideMessageBar;
-(void)HideMessageBar;
-(void)synEnterChatListController;
-(void)JumpToAVRecordViewController:(unsigned long long)avrecordViewController;
-(void)notifyError:(id)error;
-(void)didRecievedMsg:(CIMEngineMsgStruct)msg;
-(void)onPushTimer:(id)timer;
-(bool)IsVideoChat;
-(void)SetWriterLog:(bool)log;
-(void)didRecievedoldVideoMsg:(unsigned long long)msg :(int)arg2 :(char*)arg3 :(int)arg4;
-(void)didRecievedSharpOfflineMsg:(unsigned long long)msg :(int)arg2 :(char*)arg3 :(int)arg4;
-(BOOL)sendWupBuffer:(char*)buffer cmd:(char*)cmd seq:(int*)seq immediately:(BOOL)immediately timeOut:(int)anOut;
-(int)getSeq;
-(id)GetCommonVideoInfoSelfUin:(long long)uin FriUin:(long long)uin2;
-(int)AcceptVideoChatType:(unsigned long long)type :(int)arg2;
-(int)RequestVideoChatType:(unsigned long long)type :(int)arg2;
-(void)dismissCallAlert:(id)alert;
-(void)InterruptRequest:(unsigned long long)request WithEvent:(int)event AndInfor:(unsigned long long)infor;
-(void)showCallAlert:(id)alert;
-(BOOL)RecvRequest:(unsigned long long)request Type:(int)type;
-(void)dealloc;
-(void)UpdateVideoChatUin;
-(void)onVideoEnterFrontground;
-(void)CancelLocationPush:(unsigned long long)push;
-(void)ShowVideoLocationPush:(unsigned long long)push;
-(void)AppendMsgToMsgDB:(int)msgDB :(id)arg2 :(long long)arg3;
-(id)getIMEI;
-(void)onVideoEnterBackground;
-(id)init;
-(void)UnitVideoChatService;
-(void)onPswViewDismiss;
-(void)onForceOffLine;
-(void)postNeworkOffLineNotification;
-(void)onNetworkStateChange:(id)change;
-(bool)InitVideoChatService;
-(void)OnUIAlertViewDismiss;
-(void)OnMSFNetworkApnStateNotification:(id)notification;
-(id)getParseResult;
-(int)getLayoutWidth;
-(int)getLayoutHeight:(id)height;
-(BOOL)isQueueEmpty;
-(void)ClearQueue;
-(id)getContentStr:(id)str;
-(id)DequeueQQMessage;
-(id)separateMarketFaceFromMessageModel:(id)messageModel content:(id)content;
-(void)spliteQQMessageAndInsert:(id)insert;
-(BOOL)isMessageNeedToDisplay:(id)display;
-(void)EnqueueQQMessage:(id)message;
-(void)GetNewQQMessage:(id)message;
@end

@interface QQVideoRecvCallView : UIView <UIAlertViewDelegate> {
	unsigned long long _friUin;
	NSString* _friNick;
	UIImage* _friImage;
	int _type;
@private
	UIWindow* _mask_window;
	QQVideoProgressBar* _progressBar;
	BOOL _isShow;
}
@property(assign, nonatomic) unsigned long long _friUin;
@property(assign, nonatomic) UIImage* _friImage;
@property(assign, nonatomic) NSString* _friNick;
+(bool)isAlertViewWithFriUin:(unsigned long long)friUin;
+(void)DismissAlertViewWithFriUin:(unsigned long long)friUin;
+(void)ShowAlertViewWithFriUin:(unsigned long long)friUin NickName:(id)name image:(id)image type:(int)type;
+(BOOL)removeAlertFromDict:(unsigned long long)dict;
+(id)alertDict;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)OnVideoNotificationInfo:(id)info;
-(void)clickIgnore;
-(void)clickAudioAccept;
-(void)clickVideoAccept;
-(void)clickCloseCall;
-(void)setFriInfoUin:(unsigned long long)uin NickName:(id)name image:(id)image type:(int)type;
-(void)dismissView;
-(void)show;
-(void)onVideoEnterBackground;
-(void)volumeChanged:(id)changed;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQVideoAlertView : UIAlertView {
}
-(void)removeAlertView;
-(void)doDismiss:(id)dismiss;
-(void)registerApplicationWillEnterBackgroundDismiss;
-(void)dealloc;
-(id)initWithTitle:(id)title message:(id)message delegate:(id)delegate cancelButtonTitle:(id)title4 otherButtonTitles:(id)titles;
@end

@interface HeadView : UIView {
	UIImage* _head_image;
}
@property(retain, nonatomic) UIImage* head_image;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

@interface EAGLView_v2 : UIView {
	char* m_pData[3];
	int m_SrcWidth;
	int m_SrcHeight;
	int m_DstWidth;
	int m_DstHeight;
	int m_bIsSizeChanged;
	float m_brightness;
	float m_contrast;
	float m_saturation;
	float m_gamma;
	unsigned _programHandle;
	unsigned _vertexShaderHandle;
	unsigned _fragmentShaderHandle;
	EAGLContext* _context;
	CAEAGLLayer* _eaglLayer;
	unsigned _planarTextureHandles[3];
	unsigned _textureUniforms[3];
	unsigned _gammaUniform;
	unsigned _saturationUniform;
	unsigned _contrastUniform;
	unsigned _brightnessUniform;
	unsigned _positionAttributeLocation;
	unsigned _texCoordAttributeLocation;
	unsigned _rotateMatrixUniform;
	unsigned _renderBuffer;
	unsigned _frameBuffer;
	unsigned _vertexBuffer;
	unsigned _indexBuffer;
	unsigned _arrayBuffer;
	float _degrees;
	BOOL _full;
	float _viewWidth;
	float _viewHeight;
	float _isSizeChange;
}
+(Class)layerClass;
-(unsigned)setupImageTexture:(id)texture;
-(void)updateFrameData:(char*)data withSrcWidth:(int)srcWidth andSrcHeight:(int)height andDstWidth:(int)width andDstHeight:(int)height5;
-(void)changeFrame:(CGRect)frame;
-(void)compileShaders;
-(void)applyRotation:(float)rotation;
-(unsigned)compileShader:(id)shader withType:(unsigned)type;
-(void)drawFrame:(float)frame fullScr:(BOOL)scr;
-(void)updateRenderParam:(BOOL)param;
-(void)stopDrawing;
-(void)textureYUV:(char*)yuv widthType:(int)type heightType:(int)type3 textureIndex:(int)index;
-(void)setupTexture;
-(void)setupVBO;
-(void)setupFrameBuffer;
-(void)setupRenderBuffer;
-(void)setupIndices;
-(void)setupContext;
-(void)setupLayer;
-(void)destoryOPENGL;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQVideoProgressBar : UIView {
	UIImageView* _progressBar1;
	UIImageView* _progressBar2;
	BOOL isAnimation;
}
-(void)restartAnimation;
-(void)stopAnimation;
-(void)progressBarAnimate;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQLocalVideoView : UIView {
	AVCaptureVideoPreviewLayer* _localLayer;
}
@property(retain, nonatomic) AVCaptureVideoPreviewLayer* localLayer;
-(void)layoutSubviews;
-(void)switchLocalView:(int)view fromRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface AVModelClientReport : NSObject {
	NSMutableArray* _logArray;
}
@property(retain, nonatomic) NSMutableArray* logArray;
+(id)shareInstance;
-(void)uploadLogStringToSSO:(const char*)sso logString:(const char*)string;
-(void)Commit;
-(BOOL)UploadLog;
-(BOOL)AppendClientActionLogWithOperName:(id)operName fromUIN:(id)uin toUIN:(id)uin3;
-(void)dealloc;
-(id)init;
@end

@interface QQAudioDefaultView : UIView {
	UIImageView* _backgroundImage;
	QQVoiceHeadView* _headView;
	UIImageView* _stateTipView;
	UILabel* _stateTipLabel;
	UILabel* _stateLabel;
	UIImage* _friHeadImage;
	NSString* _friNick;
}
@property(retain, nonatomic) NSString* friNick;
@property(retain, nonatomic) UIImage* friHeadImage;
-(void)reset;
-(void)stateTipModify:(id)modify;
-(void)dealloc;
-(void)initInterface;
-(id)initWithFrame:(CGRect)frame FriImage:(id)image FriNick:(id)nick;
@end

@interface QQVideoCloseView : UIView {
@private
	UILabel* _contentLable;
	UIImageView* _closedVoiceImage;
}
-(void)content:(id)content;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MessageContentLabel : UIView {
	NSString* _content;
	EmotionParseResult* _parseResult;
	UIView* _emotionView;
}
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)setParseResult:(id)result;
-(void)setContent:(id)content;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VideoMsgView : UIView {
@private
	UIImage* _bgImageRight;
	UIImage* _bgImageLeft;
	UIImageView* _bgView;
	CGRect _backRectLeft;
	CGRect _txtRectLeft;
	CGRect _backRectRight;
	CGRect _txtRectRight;
	MessageContentLabel* _contentLabel;
}
-(void)removeAllView;
-(void)changeBackImage;
-(void)setBackrectAndTxtrectWithWidth:(int)width andHeight:(int)height;
-(void)show:(id)show;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface QQVideoMsgBar : UIView {
@private
	VideoMsgView* _backView;
	VideoMsgView* _frontView;
	BOOL _isViewLocked;
	BOOL _isViewShowed;
	BOOL _isOnTheOrigin;
}
-(void)fadein;
-(void)fadeout;
-(void)queryMessageAfterUnlockView;
-(void)unlockMessageBar;
-(void)lockMessageBar;
-(void)dismissMessageBar;
-(void)updateMessageBar;
-(void)showMessageBar;
-(void)reveiveMessage;
-(void)addAnimation;
-(void)changeFrameOnNoneVideo:(float)video isCtrlBarHidden:(BOOL)hidden;
-(void)changeFrameOnRotating:(int)rotating andDegree:(float)degree isCtrlBarHidden:(BOOL)hidden;
-(void)changeFrameOnMoving:(int)moving andDegree:(float)degree;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UIImageView (Curled)
-(void)setImage:(id)image borderWidth:(float)width shadowDepth:(float)depth controlPointXOffset:(float)offset controlPointYOffset:(float)offset5;
-(void)configureBorder:(float)border shadowDepth:(float)depth controlPointXOffset:(float)offset controlPointYOffset:(float)offset4;
@end

@interface UINavigationBar (CustomImage)
-(void)setImage:(id)image;
-(void)setChangedImage:(BOOL)image;
-(void)didMoveToSuperview;
-(void)drawRect:(CGRect)rect;
@end

@interface UIView (FindAndResignFirstResponder)
-(id)findFirstResponder;
-(BOOL)hasFirstResponder;
-(BOOL)findAndResignFirstResponder;
@end

@interface UIView (ModalAnimation)
+(void)commitModalAnimations;
@end

@interface UIView (ViewFrameGeometry)
@property(assign) float right;
@property(assign) float bottom;
@property(assign) float left;
@property(assign) float top;
@property(assign) float width;
@property(assign) float height;
@property(readonly, assign) CGPoint topRight;
@property(readonly, assign) CGPoint bottomRight;
@property(readonly, assign) CGPoint bottomLeft;
@property(assign) CGSize size;
@property(assign) CGPoint origin;
-(void)fitInSize:(CGSize)size;
-(void)scaleBy:(float)by;
-(void)moveBy:(CGPoint)by;
@end

@interface UIViewController (KNSemiModalInternal)
-(id)animationGroupForward:(BOOL)forward;
-(id)parentTarget;
@end

@interface UIViewController (KNSemiModal)
-(void)dismissSemiModalViewStop;
-(void)dismissSemiModalView;
-(void)presentSemiView:(id)view;
-(void)presentSemiViewController:(id)controller;
@end

@interface NSString (QueryString)
+(id)stringWithLastModifyTime:(id)lastModifyTime;
+(id)stringWithCFTBalance:(int)cftbalance WithSuffix:(id)suffix;
+(id)stringWithCFTBalance:(int)cftbalance;
-(id)decimalNumberStringByMultiplyingByPowerOf10:(short)a10;
-(id)addSeparator:(id)separator onEveryCount:(int)count;
-(id)lastNChars:(int)chars;
-(id)friendlyBankIDNumber;
-(id)friendlyIDNumber;
-(id)friendlyPhoneNumberString;
-(id)normalizedNumberString;
-(id)stringWithPhoneNumber;
-(id)stringWithCFTBalanceWithFormat:(id)format;
-(id)stringWithCFTBalance;
-(id)stringbyAddingStringToFileName:(id)fileName;
-(id)stringOfXXImageFileName;
-(id)stringOf2XImageFileName;
-(id)imageFileName;
-(id)fileName;
-(id)fileExtension;
-(BOOL)hasExtention;
-(BOOL)isValidIdNumber;
-(BOOL)isValidUserName;
-(BOOL)isValidCardHolderName;
-(BOOL)isEmailAddress;
-(BOOL)isFloatNumber;
-(BOOL)isDigit;
-(BOOL)isQQNumber;
-(BOOL)isValidChinesePhoneNumber;
-(id)dictionaryWithFormEncodedString;
-(id)stringByUnescapingFromURLQuery;
-(id)stringByUnescapingFromURLQueryOld;
-(id)stringByEscapingForURLQueryOld;
-(id)stringByEscapingForURLQuery;
@end

@interface UIDevice (Identifier)
-(id)uniqueGlobalIdentifier;
-(id)uniqueAppIdentifier;
@end

@interface UIDevice (Hardware)
-(BOOL)supportResizeImage;
-(id)macaddress;
-(id)platformString;
-(unsigned)platformType;
-(id)freeDiskSpace;
-(id)totalDiskSpace;
-(unsigned)maxSocketBufferSize;
-(unsigned)userMemory;
-(unsigned)totalMemory;
-(unsigned)busFrequency;
-(unsigned)cpuFrequency;
-(unsigned)getSysInfo:(unsigned)info;
-(id)hwmodel;
-(id)platform;
-(id)getSysInfoByName:(char*)name;
@end

@interface UIScreen (Scale)
+(BOOL)is2XScaled;
+(BOOL)isScaled;
+(id)mainScreenScaleSuffix;
+(float)mainScreenScale;
@end

@interface UIDevice (Scale)
+(id)imageDirectoryNoScale;
+(id)imageDirectory;
-(id)normalizedModel;
@end

@interface NSDictionary (QueryString)
+(id)dictionaryWithFormEncodedString:(id)formEncodedString;
-(id)ArrayForKey:(id)key;
-(id)stringWithFormEncodedComponentsUsingCustomSeparator:(id)formEncodedComponentsUsingCustomSeparator;
-(id)stringWithFormEncodedComponents;
-(id)stringWithFormEncodedComponentsAscending:(BOOL)formEncodedComponentsAscending skipempty:(BOOL)skipempty separator:(id)separator skipkeys:(id)skipkeys;
-(id)stringWithFormEncodedComponentsAscending:(BOOL)formEncodedComponentsAscending skipempty:(BOOL)skipempty separator:(id)separator;
@end

@interface NSString (GTMNSStringHTMLAdditions)
-(id)gtm_stringByUnescapingFromHTML;
-(id)gtm_stringByEscapingForAsciiHTML;
-(id)gtm_stringByEscapingForHTML;
-(id)gtm_stringByEscapingHTMLUsingTable:(XXStruct_c19r_A*)table ofSize:(unsigned)size escapingUnicode:(BOOL)unicode;
@end

@interface NSData (NSDataAdditions)
+(id)dataWithBase64EncodedString:(id)base64EncodedString;
+(id)dataWithUncompressedContentsOfFile:(id)file;
-(id)gzipInflate;
-(id)gzipDeflate;
-(id)base64EncodingWithLineLength:(unsigned)lineLength;
-(id)base64Encoding;
-(id)initWithBase64EncodedString:(id)base64EncodedString;
@end

@interface NSString (QueryString)
+(id)stringWithLastModifyTime:(id)lastModifyTime;
+(id)stringWithCFTBalance:(int)cftbalance WithSuffix:(id)suffix;
+(id)stringWithCFTBalance:(int)cftbalance;
-(id)decimalNumberStringByMultiplyingByPowerOf10:(short)a10;
-(id)addSeparator:(id)separator onEveryCount:(int)count;
-(id)lastNChars:(int)chars;
-(id)friendlyBankIDNumber;
-(id)friendlyIDNumber;
-(id)friendlyPhoneNumberString;
-(id)normalizedNumberString;
-(id)stringWithPhoneNumber;
-(id)stringWithCFTBalanceWithFormat:(id)format;
-(id)stringWithCFTBalance;
-(id)stringbyAddingStringToFileName:(id)fileName;
-(id)stringOfXXImageFileName;
-(id)stringOf2XImageFileName;
-(id)imageFileName;
-(id)fileName;
-(id)fileExtension;
-(BOOL)hasExtention;
-(BOOL)isValidIdNumber;
-(BOOL)isValidUserName;
-(BOOL)isValidCardHolderName;
-(BOOL)isEmailAddress;
-(BOOL)isFloatNumber;
-(BOOL)isDigit;
-(BOOL)isQQNumber;
-(BOOL)isValidChinesePhoneNumber;
-(id)dictionaryWithFormEncodedString;
-(id)stringByUnescapingFromURLQuery;
-(id)stringByUnescapingFromURLQueryOld;
-(id)stringByEscapingForURLQueryOld;
-(id)stringByEscapingForURLQuery;
@end

@interface NSObject (NSObject_TPM_SBJSON)
-(id)JSONRepresentation;
-(id)JSONFragment;
@end

@interface NSString (NSString_TPM_SBJSON)
-(id)JSONValue;
-(id)JSONFragmentValue;
@end

@interface CALayer (DSAnimations)
-(void)addShakeAnimation;
-(void)addShakeAnimation:(float)animation;
-(void)addPopUpAnimation;
@end

@interface NSData (Cryptoextension)
-(BOOL)verifySignature:(SecKey*)signature signature:(id)signature2;
-(id)getSignatureBytes:(SecKey*)bytes;
-(id)DecodeRsa:(SecKey*)rsa;
-(id)EncodeRsa:(SecKey*)rsa;
-(id)Decode3DESWithKey:(id)key;
-(id)Encode3DESWithKey:(id)key;
-(id)decodeBase64;
-(id)tobase64;
-(id)md5;
@end

@interface NSString (Base64)
-(id)decodebase64;
-(id)tobase64;
@end

@interface NSString (MD5Addition)
-(id)stringFromMD5;
@end

@interface NSString (MyExtension)
-(BOOL)isNotUserIDNum;
-(BOOL)isNotBankCardNum;
-(BOOL)isNotPhoneNum;
-(BOOL)isDigit;
-(id)formatToBankCardNumber;
-(BOOL)isEmpty;
-(id)trim;
@end

@interface UILabel (FontAutoFit)
-(void)autoFitFontBetween:(float)between And:(float)anAnd;
@end

@interface NSString (CharacterHelper)
-(id)stringWithBalance;
-(id)formatToBankCardNumber;
-(id)hex;
-(id)encodeUrl;
-(BOOL)containSubString:(id)string ignoreCass:(BOOL)cass;
-(id)space;
-(BOOL)isEmpty;
-(id)trim;
@end

@interface UIScreen (Scale)
+(BOOL)is2XScaled;
+(BOOL)isScaled;
+(id)mainScreenScaleSuffix;
+(float)mainScreenScale;
@end

@interface UIDevice (Scale)
+(id)imageDirectoryNoScale;
+(id)imageDirectory;
-(id)normalizedModel;
@end

@interface UIDevice (Hardware)
-(BOOL)supportResizeImage;
-(id)macaddress;
-(id)platformString;
-(unsigned)platformType;
-(id)freeDiskSpace;
-(id)totalDiskSpace;
-(unsigned)maxSocketBufferSize;
-(unsigned)userMemory;
-(unsigned)totalMemory;
-(unsigned)busFrequency;
-(unsigned)cpuFrequency;
-(unsigned)getSysInfo:(unsigned)info;
-(id)hwmodel;
-(id)platform;
-(id)getSysInfoByName:(char*)name;
@end

@interface UIDevice (Identifier)
-(id)uniqueGlobalIdentifier;
-(id)uniqueAppIdentifier;
@end

@interface UIApplication (QQ_UINavigationController)
+(id)GetViewControllerWith:(Class)with;
+(BOOL)currentViewIsLandScape;
+(id)GetCurrentMainWindow;
+(id)GetCurrentNavigationControllerTopViewController;
+(id)GetCurrentTabBar;
+(id)GetCurrentNavigationController;
+(BOOL)curentViewSupportLandScape;
@end

@interface CALayer (QQ_RemoveAniation)
-(void)removeAllAnimationsWithSubLayer;
@end

@interface UIImage (Alpha)
+(id)drawImageGraphicsInContent:(id)content withSize:(CGSize)size;
+(id)readImageAndCachedWithPath:(id)path scale:(float)scale;
-(CGImageRef)newBorderMask:(unsigned)mask size:(CGSize)size;
-(id)transparentBorderImage:(unsigned)image;
-(id)imageWithAlpha;
-(BOOL)hasAlpha;
@end

@interface UIImage (Resize)
-(CGAffineTransform)transformForOrientation:(CGSize)orientation;
-(id)resizedImage:(CGSize)image transform:(CGAffineTransform)transform drawTransposed:(BOOL)transposed interpolationQuality:(int)quality;
-(id)resizedImageWithContentMode:(int)contentMode bounds:(CGSize)bounds interpolationQuality:(int)quality;
-(id)resizedImage:(CGSize)image interpolationQuality:(int)quality;
-(id)thumbnailImage:(int)image transparentBorder:(unsigned)border cornerRadius:(unsigned)radius interpolationQuality:(int)quality;
-(id)croppedImage:(CGRect)image;
@end

@interface UIImage (RoundedCorner)
-(void)addRoundedRectToPath:(CGRect)path context:(CGContextRef)context ovalWidth:(float)width ovalHeight:(float)height;
-(id)roundedCornerImage:(int)image borderSize:(int)size;
@end

@interface NSData (AES)
-(id)AESDecryptWithPassphrase:(id)passphrase;
-(id)AESEncryptWithPassphrase:(id)passphrase;
@end

@interface NSData (Tea)
-(id)TeadBlogEncryptWithPaserString:(id)paserString;
-(id)TeaDecryptWithPaserString:(id)paserString;
-(id)TeaEncryptWithPaserString:(id)paserString;
-(id)TeaEncryptWithPaserBytes:(const char*)paserBytes KeyLen:(int)len;
@end

@interface UIImage (UIImageDataExpress)
+(id)clipImageByNormalSectionRatio:(id)ratio drawSize:(CGSize)size innerGlow:(BOOL)glow;
+(id)clipImageByGoldenSectionRatio:(id)ratio drawSize:(CGSize)size innerGlow:(BOOL)glow;
+(id)clipImageByGoldenSectionRatio:(id)ratio drawSize:(CGSize)size;
+(id)chatBgImage:(id)image withSize:(CGSize)size;
+(id)mergeImage:(id)image;
+(id)mergeGridsImageLT2RB:(id)rb;
+(id)mergeGridsImageForDiscussFly:(id)discussFly;
+(id)mergeGridsImage:(id)image;
+(id)borderImage:(id)image;
+(id)roundIconImageWith:(id)with diameter:(double)diameter stretch:(bool)stretch;
+(BOOL)pix2Screen;
-(id)framesWithSize:(CGSize)size;
-(id)qqStateImage:(id)image;
-(id)scaleToSizeForDoodle:(CGSize)doodle;
-(id)qqScaleToSizeNoTransparent:(CGSize)sizeNoTransparent;
-(id)qqScalToSuitSizeWithMaxShortSide:(float)maxShortSide maxLongSide:(float)side;
-(id)qqImageForCurrentScale;
-(id)qqScaleToSize:(CGSize)size;
-(id)linghtImage;
-(void)drawGrayImageInRect:(CGRect)rect;
-(BOOL)isTransparentImage;
-(id)grayImage;
-(id)roundCornerImageWithSize:(CGSize)size cornerType:(int)type;
-(id)roundCornerImageWithMaxShortSide:(float)maxShortSide maxLongSide:(float)side CornerType:(int)type;
-(void)drawRoundCornerWithinSize:(CGSize)size cornerType:(int)type;
-(id)roundCornerImageWithSize:(CGSize)size;
-(id)iconImageWithWidth:(double)width cornerRadius:(double)radius;
-(id)iconImageWithWidth:(double)width cornerRadius:(double)radius border:(double)border borderColor:(id)color;
-(BOOL)is2xScreen;
@end

@interface UIImage (WriteToFile)
-(BOOL)wirteToFile:(id)file;
-(BOOL)writeToFile:(id)file fileType:(id)type quality:(float)quality;
-(BOOL)writeToFile:(id)file fileType:(id)type;
@end

@interface UIImage (OpenFlowExtras)
+(id)colorWithImage:(id)image;
+(id)GetImageWith:(CGSize)with color:(id)color border:(float)border radion:(float)radion;
+(id)GetAnimationImageFromViewContext:(id)viewContext;
+(id)accTypeImage:(id)image;
+(CGContextRef)GetArcPath:(CGContextRef)path withSize:(CGSize)size withOrientation:(BOOL)orientation;
+(id)imageWithContentsOfFile:(id)file cache:(BOOL)cache withKey:(id)key;
+(id)imageWithContentsOfFile:(id)file cache:(BOOL)cache;
+(id)grayImage:(CGSize)image radius:(float)radius;
+(id)imageWithImage:(id)image cutToFrame:(CGRect)frame;
+(id)imageWithImage:(id)image cutToSize:(CGSize)size;
+(id)imageWithImage:(id)image scaledFitToSize:(CGSize)size;
+(id)imageWithImage:(id)image scaledToSize:(CGSize)size;
-(id)reSaveImage:(id)image;
-(CGSize)needCut:(CGSize)cut;
-(CGSize)GetFitSizeWithMaxShortSide:(float)maxShortSide maxLongSide:(float)side;
-(CGSize)GetFitSizeWithMaxShortSide:(float)maxShortSide;
-(CGRect)GetFitRectWithRect:(CGRect)rect;
-(CGRect)GetFitRectWithThumbnailScheme;
-(CGSize)GetFitSize:(CGSize)size isGif:(BOOL)gif;
-(id)GetScaleImageWith:(CGSize)with;
-(BOOL)saveImageToAlbum:(BOOL)album object:(id)object forSel:(SEL)sel contentInfo:(void*)info;
-(id)GetArcDrakImage:(int)image;
-(id)GetRoundImageWith:(float)with;
-(id)GetGrayImage;
-(id)GetArcImage:(CGRect)image border:(float)border radius:(float)radius borderColor:(id)color offset:(CGPoint)offset;
-(id)cropCenterAndScaleImageToSize:(CGSize)size;
-(CGSize)calculateNewSizeForCroppingBox:(CGSize)croppingBox;
-(id)cropImageToRect:(CGRect)rect;
-(id)rescaleImageToSize:(CGSize)size;
-(id)GetRadioImage;
-(CGSize)imageCurrentSize;
-(CGRect)scaleToFilt:(CGRect)filt;
-(CGRect)GetFitRect:(CGRect)rect;
-(CGRect)GetContextRect:(CGRect)rect;
-(CGRect)GetContextRectangle;
@end

@interface UIImage (encode)
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface UIView (TTCategory)
@property(readonly, assign, nonatomic) float orientationHeight;
@property(readonly, assign, nonatomic) float orientationWidth;
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) CGPoint origin;
@property(readonly, assign, nonatomic) CGRect screenFrame;
@property(readonly, assign, nonatomic) float screenViewY;
@property(readonly, assign, nonatomic) float screenViewX;
@property(readonly, assign, nonatomic) float ttScreenY;
@property(readonly, assign, nonatomic) float ttScreenX;
@property(assign, nonatomic) float centerY;
@property(assign, nonatomic) float centerX;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) float width;
@property(assign, nonatomic) float bottom;
@property(assign, nonatomic) float right;
@property(assign, nonatomic) float top;
@property(assign, nonatomic) float left;
-(void)layerSmooth;
-(void)resignAllFirstResponder;
-(id)capture;
-(id)findTopSuperview;
-(id)findSuperview:(id)superview;
-(id)findSubview:(id)subview resursion:(BOOL)resursion;
-(id)findSubview:(id)subview;
-(id)findFirstScrollView;
-(void)dismissAsKeyboard:(BOOL)keyboard;
-(void)presentAsKeyboardInView:(id)view;
-(CGRect)frameWithKeyboardSubtracted:(float)keyboardSubtracted;
-(id)viewController;
-(CGPoint)offsetFromView:(id)view;
-(void)removeAllSubviews;
-(id)ancestorOrSelfWithClass:(Class)aClass;
-(id)descendantOrSelfWithClass:(Class)aClass;
@end

@interface NSString (EMOTION)
-(NSRange)getConsecutiveSubStringWithRange:(NSRange)range;
-(NSRange)getFirstWordWithRange:(NSRange)range;
-(NSRange)rangeOfEmotionAtLocation:(int)location;
-(NSRange)rangeOfEmotion:(int*)emotion;
@end

@interface UIView (searchClass)
-(void)searchSubViewClassObject:(Class)object insertArray:(id)array;
@end

@interface NSDate (Helper)
+(id)dateFromatRencentTimeInterval:(double)interval displayHMS:(BOOL)hms;
+(id)dateFromatFromTimeInterval:(double)timeInterval;
+(double)dateFromToday:(double)today BaseTime:(double)time;
+(id)getQzoneFormatTimeNew:(long long)aNew;
+(id)getQzoneFormatTime4:(long long)a4;
+(id)getQzoneFormatTime3:(long long)a3;
+(id)getQzoneFormatTime2:(long long)a2 isFakeData:(BOOL)data;
+(id)getQzoneFormatTime:(long long)time;
+(id)getRefreshFormatTime:(long long)time;
+(id)getChatTimeCellFormatTime:(long long)time;
+(id)dbFormatString;
+(id)timestampFormatString;
+(id)timeFormatString;
+(id)dateFormatString;
+(id)QZoneDateFormat:(id)format;
+(id)stringForDisplayFromDate:(id)date;
+(id)stringForDisplayFromDate:(id)date prefixed:(BOOL)prefixed;
+(id)stringFromDate:(id)date;
+(id)stringFromDate:(id)date withFormat:(id)format;
+(id)dateFromString:(id)string withFormat:(id)format;
+(id)dateFromString:(id)string;
+(id)stringDaysAgoAgainstMidnightForVoice:(double)voice;
+(id)stringDaysAgoAgainstMidnightWithoutSec:(double)sec;
+(id)stringDaysAgoAgainstMidnight:(double)midnight;
+(id)dateStringForPublicPlatformCellFromInterval:(double)interval;
+(id)stringDaysAgoAgainstMidnightForChatTime:(double)chatTime;
+(id)hourMinSecondTime:(double)time;
+(void)getToday:(int*)today month:(int*)month day:(int*)day;
+(int)dayOfYear:(int)year month:(int)month day:(int)day;
+(int)getDayOfWeekOfTime:(double)time;
+(void)getDayOfTime:(double)time year:(int*)year month:(int*)month day:(int*)day;
+(id)getMinuteSecond:(double)second;
+(id)getHourMinute:(double)minute;
+(BOOL)daysAgoInSameYear:(double)sameYear;
+(unsigned)daysAgoAgainstMidnight:(double)midnight;
-(id)endOfWeek;
-(id)beginningOfDay;
-(id)beginningOfWeek;
-(id)stringWithDateStyle:(unsigned)dateStyle timeStyle:(unsigned)style;
-(id)string;
-(id)stringWithFormat:(id)format;
-(unsigned)weekday;
-(id)stringDaysAgo;
-(id)hourTime;
-(unsigned)daysAgo;
@end

@interface NSString (QQChatModel)
-(id)insertStringWithFrontMsg;
-(id)appendStringWithMsg:(id)msg;
@end

@interface UIFont (InstanceFont)
+(id)systemFontVerdanaOfSize:(float)size;
+(id)boldSystemFontVerdanaOfSize:(float)size;
@end

@interface NSString (GetCString)
-(const char*)cString;
@end

@interface NSString (AKStringScanningAdditions)
@property(readonly, assign, nonatomic) BOOL ak_isIPAddress;
@property(readonly, assign, nonatomic) BOOL ak_hasLetters;
@property(readonly, assign, nonatomic) BOOL ak_isTelephoneNumber;
@end

@interface UIFont (TTCategory)
-(float)fontHeight;
@end

@interface UIColor (TTCategory)
-(float)hue;
@end

@interface UIImage (TTCategory)
-(void)drawInRect:(CGRect)rect radius:(float)radius contentMode:(int)mode;
-(void)drawInRect:(CGRect)rect radius:(float)radius;
-(void)drawInRect:(CGRect)rect contentMode:(int)mode;
-(CGRect)convertRect:(CGRect)rect withContentMode:(int)contentMode;
-(id)transformWidth:(float)width height:(float)height rotate:(BOOL)rotate;
-(void)addRoundedRectToPath:(CGContextRef)path rect:(CGRect)rect radius:(float)radius;
@end

@interface UIImage (QQObjectPoolCache)
+(id)imageNamed:(id)named;
@end

@interface AVAudioPlayer (AQMedia)
-(void)AQStop;
@end

@interface UIViewController (TTCategory)
-(void)showBars:(BOOL)bars animated:(BOOL)animated;
-(void)alertError:(id)error;
-(void)alert:(id)alert;
-(void)alert:(id)alert title:(id)title delegate:(id)delegate;
-(id)nextViewController;
-(id)previousViewController;
-(void)showNavigationBar:(BOOL)bar animated:(BOOL)animated;
@end

@interface UIViewController (MYTitleSet)
-(void)setTitle:(id)title name:(id)name;
@end

@interface UINavigationController (TTCategory)
-(void)popViewControllerAnimatedWithTransition:(int)transition;
-(void)pushViewController:(id)controller animatedWithTransition:(int)transition;
-(void)pushAnimationDidStop;
-(void)pushAnimationStop;
-(void)NavpushViewController:(id)controller;
@end

@interface UIView (QzoneGif)
-(void)startAnimatingSubview;
@end

@interface NSString (Draw)
-(unsigned)drawMutileLineAtPoint:(CGPoint)point withFont:(id)font forWidth:(float)width endPoint:(CGPoint*)point4 nextLine:(BOOL)line;
-(unsigned)calculateLineWithFont:(id)font forWidth:(float)width actualWidth:(float*)width3 actualHeight:(float*)height;
@end

@interface NSString (NSStringForPath)
+(id)ThemeListPath;
+(id)ThemeStorePath;
+(id)ThemeDownloadTempPath;
+(id)FileReceiveStorePath;
+(id)HttpDownloadTempPath;
+(id)FileTransferTempPath;
+(id)PhoneHeadInfoPath;
+(id)GroupHeadInfoPath;
+(id)UserHeadInfoPath;
+(id)getChatImageSendPath:(id)path;
+(id)getChatImagePath:(id)path;
+(id)getThumbPathByUuid:(id)uuid;
+(void)cleanImagePathCache;
+(id)UniFileTransPath;
+(id)FriendRequestSettingPath;
+(id)SecretFilePath:(id)path;
+(id)PushMsgRecordsPath;
+(id)ContactsCheckedRemarkFriendPath;
+(id)ContactsMobilePhoneConfigPath;
+(id)ContactsMobilePhoneWithoutCountryListPath;
+(id)ContactsChatUINPath;
+(id)ContactsTemporayUINPathToWrite;
+(id)ContactsTemporayUINPathToLoad;
+(id)ContactsInvitedListPath;
+(id)ContactsRecommendedContactsPath;
+(id)RecommendedFriendsPath;
+(id)ContactsQQContactsPath;
+(id)ContactsUploadedInfoPath;
+(id)vipInfoPath:(long long)path;
+(id)RecommendedFriendsInfoPath;
+(id)SecretFileInfoPath;
+(id)ContactsBindingInfoPath;
+(id)ContactsApplyBindingInfoPath;
+(id)StorageQzoneProxyHostPath;
+(id)StorageCircleBigDataTimeStampPath;
+(id)StorageBigDataServerListPath;
+(id)StorageServerListPath;
+(id)NearByGroupListPath;
+(id)EncounterListPath;
+(id)NeighborFeedPath;
+(id)ChatCoverPath;
+(id)GroupFriendModelPath;
+(id)StrangerModelPath;
+(id)GroupMaxSeqDictPath;
+(id)recentHistoryHandledCountPath;
+(id)RecentHistoryUnreadCountPath;
+(id)RecentHistoryPath;
+(id)OldFriendListPath;
+(id)FriendListPath;
+(id)BlackListPath;
+(id)StrangerListPath;
+(id)UniLogFilePath;
+(id)AccountNetworkFlowPath;
+(id)NetworkFlowPath2;
+(id)NetworkFlowPath;
+(id)QQAccountManagerPath;
+(id)SelfImageThumbPath;
+(id)SelfImagePath;
+(id)ThumbImagePath;
+(id)FullImagePath;
+(id)systemFacePath;
+(id)FullImage:(id)image;
+(id)FullImagePathArchive;
+(id)Uuid;
+(id)QZoneImageThumbPath;
+(id)ChatBackgroundImageCachePath;
+(id)QQHeadImageThumbPath;
+(id)EncounterFilesPath;
+(id)EncounterVoiceFilesPath;
+(id)EncounterImageFilesPath;
+(id)AdConfigDefaultImgPicsPath;
+(id)AdConfigPushbannerPicsPath;
+(id)AdConfigPath;
+(id)AdAddFriendSourcePlistPath;
+(id)AdRecommendFriendsPlistPath;
+(id)AdTagsPlistPath;
+(id)GroupBulletinPath;
+(id)pathForImageUrl:(id)imageUrl;
+(id)CardInfoTaskPath;
+(id)CardInfoVoterPath;
+(id)CardInfoVisitorPath;
+(id)CardInfoFilesPath;
+(id)CardInfoFaceIDPath;
+(id)CardInfoMakeFriendsPath;
+(id)usrSummaryPath:(long long)path;
+(id)profilePath;
+(id)CardInfoCommonPath;
+(id)CardInfoPath;
+(id)getParentDir:(id)dir;
+(BOOL)RemovePath:(id)path;
+(id)AppPath;
+(id)advertisementFloder;
+(id)DocPath;
+(id)CachesPath;
+(id)LibPath;
+(id)TempPath;
+(id)HomePath;
-(unsigned long long)GetFileSize;
-(id)GetNextFileName;
-(id)GetUrlStr;
-(BOOL)hasContainStr:(id)str;
@end

@interface NSString (PingYin)
-(BOOL)isMatchPinYinString:(id)string MatchRange:(NSRange*)range;
-(id)sortedCharacter;
-(id)pinyinStringWithOtherCharacters;
-(id)pinyinFullString;
-(id)pinyinString;
@end

@interface NSString (sqlite)
-(id)sqliteLikeString;
-(id)sqliteString;
@end

@interface NSString (spaceString)
+(id)spacesForFont:(id)font Width:(float)width;
+(id)spaceStringForWidth:(float)width;
-(id)stringByLineLimit:(int)limit font:(id)font width:(float)width wrapString:(id)string;
-(id)urlResultToDictionary;
@end

@interface NSString (Numeric)
-(unsigned long long)longLongValueEX;
-(BOOL)isLongLongValue;
-(BOOL)isIntValue;
-(BOOL)isFloatValue;
@end

@interface NSString (URLCheck)
+(long)getUrlChannelId:(id)anId;
+(id)getUrlHost:(id)host;
@end

@interface NSString (numberStr)
+(id)getRandVideoFileName:(id)name;
+(id)fileCurrentNameFor:(id)aFor;
+(void)drawLine:(CGContextRef)line start:(CGPoint)start end:(CGPoint)end width:(float)width color:(id)color;
+(id)GetShortNumberStringWithoutSec:(long long)sec;
+(id)GetShortNumberString:(long long)string;
+(id)GetTimeNumberString:(long long)string;
+(id)GetBytString:(int)string;
+(id)GetNumberString:(int)string;
-(BOOL)isGif;
-(BOOL)isKnowFileStyle;
-(id)GetImageSysName;
-(BOOL)fileNameEqalToString:(id)string;
-(int)GetFileTypeForName;
-(id)GetFileStyleImageName;
-(id)GetFileTypeName;
-(id)GetFileShortName;
-(id)GetFileName;
@end

@interface NSNumber (timeNumber)
+(id)numberWithTime:(int)time;
@end

@interface NSString (NSData)
+(id)convertFromNSData:(id)nsdata;
@end

@interface NSData (NSString)
+(id)convertFromNSString:(id)nsstring;
@end

@interface NSString (ParseMsg)
+(id)ParseImageMsg:(id)msg;
@end

@interface NSString (drawTextColor)
+(void)endDrawShadow;
+(void)startDrawShadow:(id)shadow contextOffset:(CGSize)offset;
-(CGPoint)drawText:(id)text rect:(CGRect)rect forWidth:(float)width;
-(void)drawInRect:(CGRect)rect withFont:(id)font lineBreakMode:(int)mode alignment:(int)alignment ShadowColor:(id)color shadowOffset:(CGSize)offset;
-(CGPoint)drawContentWith:(id)with ranges:(id)ranges fonts:(id)fonts rects:(id)rects InRect:(CGRect)rect;
@end

@interface NSString (coreText)
-(id)subStrWithUtf8Len:(int)utf8Len;
@end

@interface NSString (email)
-(BOOL)isValidateEmail;
@end

@interface NSString (parseXml)
+(id)getElementsByTag:(id)tag tagName:(id)name;
@end

@interface NSString (other)
+(id)stringToBinaryData:(id)binaryData;
+(id)marketFaceKeyEncrypt:(id)encrypt;
+(id)marketFaceKeyDecrypt:(id)decrypt;
+(id)stringWithBinaryBuff:(const char*)binaryBuff length:(unsigned)length;
-(CGSize)sizeWithFont:(id)font;
-(id)stringByReplacingSystemEmojiWithSpace;
-(BOOL)containsSystemEmoji;
-(id)trim;
-(id)stringWithFont:(id)font forWidth:(float)width;
@end

@interface NSString (RegexKitLiteAdditions)
+(int)captureCountForRegex:(id)regex options:(unsigned)options error:(id*)error;
+(int)captureCountForRegex:(id)regex;
+(void)clearStringCache;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex options:(unsigned)options range:(NSRange)range error:(id*)error withKeys:(id*)keys forCaptures:(int*)captures count:(unsigned)count;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex options:(unsigned)options range:(NSRange)range error:(id*)error withFirstKey:(id)firstKey arguments:(void*)arguments;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex options:(unsigned)options range:(NSRange)range error:(id*)error withKeysAndCaptures:(id)keysAndCaptures;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex range:(NSRange)range withKeysAndCaptures:(id)keysAndCaptures;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex withKeysAndCaptures:(id)keysAndCaptures;
-(id)dictionaryByMatchingRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error withKeys:(id*)keys forCaptures:(int*)captures count:(unsigned)count;
-(id)dictionaryByMatchingRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error withFirstKey:(id)firstKey arguments:(void*)arguments;
-(id)dictionaryByMatchingRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error withKeysAndCaptures:(id)keysAndCaptures;
-(id)dictionaryByMatchingRegex:(id)regex range:(NSRange)range withKeysAndCaptures:(id)keysAndCaptures;
-(id)dictionaryByMatchingRegex:(id)regex withKeysAndCaptures:(id)keysAndCaptures;
-(id)arrayOfCaptureComponentsMatchedByRegex:(id)captureComponentsMatchedByRegex options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)arrayOfCaptureComponentsMatchedByRegex:(id)captureComponentsMatchedByRegex range:(NSRange)range;
-(id)arrayOfCaptureComponentsMatchedByRegex:(id)captureComponentsMatchedByRegex;
-(id)captureComponentsMatchedByRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)captureComponentsMatchedByRegex:(id)regex range:(NSRange)range;
-(id)captureComponentsMatchedByRegex:(id)regex;
-(id)componentsMatchedByRegex:(id)regex options:(unsigned)options range:(NSRange)range capture:(int)capture error:(id*)error;
-(id)componentsMatchedByRegex:(id)regex range:(NSRange)range;
-(id)componentsMatchedByRegex:(id)regex capture:(int)capture;
-(id)componentsMatchedByRegex:(id)regex;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex withString:(id)string options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex withString:(id)string range:(NSRange)range;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex withString:(id)string;
-(id)stringByMatching:(id)matching options:(unsigned)options inRange:(NSRange)range capture:(int)capture error:(id*)error;
-(id)stringByMatching:(id)matching inRange:(NSRange)range;
-(id)stringByMatching:(id)matching capture:(int)capture;
-(id)stringByMatching:(id)matching;
-(NSRange)rangeOfRegex:(id)regex options:(unsigned)options inRange:(NSRange)range capture:(int)capture error:(id*)error;
-(NSRange)rangeOfRegex:(id)regex inRange:(NSRange)range;
-(NSRange)rangeOfRegex:(id)regex capture:(int)capture;
-(NSRange)rangeOfRegex:(id)regex;
-(void)flushCachedRegexData;
-(BOOL)isRegexValidWithOptions:(unsigned)options error:(id*)error;
-(BOOL)isRegexValid;
-(BOOL)isMatchedByRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error;
-(BOOL)isMatchedByRegex:(id)regex inRange:(NSRange)range;
-(BOOL)isMatchedByRegex:(id)regex;
-(id)componentsSeparatedByRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)componentsSeparatedByRegex:(id)regex range:(NSRange)range;
-(id)componentsSeparatedByRegex:(id)regex;
-(int)captureCountWithOptions:(unsigned)options error:(id*)error;
-(int)captureCount;
@end

@interface NSMutableString (RegexKitLiteAdditions)
-(int)replaceOccurrencesOfRegex:(id)regex withString:(id)string options:(unsigned)options range:(NSRange)range error:(id*)error;
-(int)replaceOccurrencesOfRegex:(id)regex withString:(id)string range:(NSRange)range;
-(int)replaceOccurrencesOfRegex:(id)regex withString:(id)string;
@end

@interface NSString (File)
+(id)thumbNailLocation;
+(id)middleImageLocation;
+(id)bigImageLocation;
+(id)originImageLocation;
+(id)documentPath;
+(id)uuid;
-(int)shortNameWidth;
-(id)shortAlbumName;
@end

@interface NSKeyedUnarchiver (ExceptionCatch)
+(id)unarchiveObjectWithFileNoException:(id)fileNoException;
+(id)unarchiveObjectWithDataNoException:(id)dataNoException;
@end

@interface NSString (NSStringBase64Ext)
+(id)base64StringForUrlFromData:(id)data;
+(id)base64StringFromData:(id)data;
@end

@interface NSData (NSDataBase64Ext)
+(id)base64DataFromString:(id)string;
@end

@interface NSMutableArray (UIADExtensions)
-(id)bottom;
-(id)peekUntilClass:(Class)aClass;
-(id)peek;
-(id)pop;
-(void)push:(id)push;
@end

@interface NSString (UIADSyntax)
-(BOOL)toDouble:(double*)aDouble;
-(BOOL)isValidName;
-(BOOL)isValidPropertyName;
@end

@interface UIView (UIADEntity)
+(UIView*)createDefaultEntity;
@end

@interface NSNumber (UIAD_NUM_OP)
-(BOOL)is:(int)is;
@end

@interface NSObject (MethodSwizzlingCategory)
+(void)switchAllMethod;
+(BOOL)swizzleClassMethod:(SEL)method withClassMethod:(SEL)classMethod;
+(BOOL)swizzleMethod:(SEL)method withMethod:(SEL)method2;
@end

@interface NSObject (SwizzleMethod)
+(char*)getLastPerformSelectorName;
+(char*)getLastPerformObjectName;
-(void)QQDoesNotRecognizeSelector:(SEL)selector;
-(id)QQPerformSelector:(SEL)selector withObject:(id)object;
-(id)QQPerformSelector:(SEL)selector;
-(id)QQPerformSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(void)printCallStack;
@end

@interface NSData (DDData)
-(id)base64Decoded;
-(id)base64Encoded;
-(id)hexStringValue;
-(id)sha1Digest;
-(id)md5Digest;
@end

@interface NSNumber (DDNumber)
+(BOOL)parseString:(id)string intoNSUInteger:(unsigned*)integer;
+(BOOL)parseString:(id)string intoNSInteger:(int*)integer;
+(BOOL)parseString:(id)string intoUInt64:(unsigned long long*)a64;
+(BOOL)parseString:(id)string intoSInt64:(long long*)a64;
@end

@interface NSValue (NSValueDDRangeExtensions)
+(id)valueWithDDRange:(DDRange)ddrange;
-(int)ddrangeCompare:(id)compare;
-(DDRange)ddrangeValue;
@end

@interface NSAssertionHandler (SwizzleMethod)
-(void)QQHandleFailureInMethod:(SEL)method object:(id)object file:(id)file lineNumber:(int)number description:(id)description;
@end

@interface UIWindow (SwizzleMethod)
-(void)QQSendEvent:(id)event;
@end

@interface ALAsset (QQ)
-(id)assetURL;
@end

@interface UINavigationController (SwizzleMethod)
-(id)QQPopToRootViewControllerAnimated:(BOOL)rootViewControllerAnimated;
-(id)QQPopToViewController:(id)viewController animated:(BOOL)animated;
-(id)QQPopViewControllerAnimated:(BOOL)animated;
-(void)QQPushViewController:(id)controller animated:(BOOL)animated;
@end

@interface UIViewController (SwizzleMethod)
-(void)QQViewDidDisappear:(BOOL)qqview;
-(void)QQViewDidAppear:(BOOL)qqview;
@end

@interface UIActionSheet (AnotherTitle)
-(void)anOtherTitle:(id)title;
@end

@interface NSObject (TextSelected)
-(CGRect)reCommRect:(CGRect)rect with:(CGPoint)with;
@end

@interface NSObject (QQTextDrawView)
+(CGPoint)GetTouchPoint:(CTLineRef)point point:(CGPoint)point2 forWidth:(float)width;
@end

@interface UITableViewCell (GroupedStyle)
-(void)setCustomAccessoryViewEnabled:(BOOL)enabled;
-(void)updateBackgroundViewInTableViewForIndex:(id)index Rows:(int)rows;
-(void)updateBackgroundViewInTableView:(id)tableView atIndexPath:(id)indexPath;
@end

@interface UIImagePickerController (SwizzleMethod)
-(void)QQViewWillDisappear:(BOOL)qqview;
-(void)QQSetSourceType:(int)type;
@end

@interface UISearchBar (SwizzleMethod) <QIMTextInputDelegate>
-(Class)textInputAccessoryViewClass:(id)aClass;
-(id)textInputReturnKeyDisplayString:(id)string;
-(void)textInputHandleInputString:(id)string string:(id)string2;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)QQDealloc;
-(id)getTextField;
@end

@interface NSString (sqlite3)
-(id)sqliteLikeString;
-(id)sqliteString;
@end

@interface NSData (EmojiEncrypt)
-(id)emojiDecrypt;
-(id)emojiEncrypt;
@end

@interface NSString (EmojiEncrypt)
-(BOOL)isEmojiStoreFile;
-(BOOL)isEncryptGif;
@end

@interface ALAsset (Custom)
@property(retain, nonatomic) NSString* sortedIndex;
@end

@interface UIImage (unread)
+(id)UnReadImage:(id)image;
@end

@interface UIFont (LargeFont)
+(id)GetLargerFont;
@end

@interface UINavigationBar (CustomNavigationBar) <ISkinProtocol>
+(void)globalReloadAppearance;
-(void)insertSubview:(id)subview atIndex:(int)index;
-(void)setBackgroundImage:(id)image;
-(void)setDefaultBackgroundImage;
-(id)navigationBarShadowView;
@end

@interface UIImage (DivideImage)
-(id)scaleImageHeight:(float)height withPoint:(CGPoint)point;
-(id)divideImageWithPoztion:(CGPoint)poztion;
@end

@interface UITableView (QQPrivate)
@property(assign, nonatomic) BOOL identifierShouldNotAppendThemeId;
@end

@interface UITableView (SwizzleMethod)
-(id)QQDequeueReusableCellWithIdentifier:(id)identifier forIndexPath:(id)indexPath;
-(id)QQDequeueReusableCellWithIdentifier:(id)identifier;
@end

@interface UILabel (Custom) <ISkinProtocol>
@property(assign, nonatomic) int skinShadowColor;
@property(assign, nonatomic) int skinTextColorHighlighted;
@property(assign, nonatomic) int skinTextColorNormal;
-(void)reloadAppearance;
@end

@interface UIButton (Custom) <ISkinProtocol>
@property(retain, nonatomic) NSString* skinBackgroundImageSelected;
@property(retain, nonatomic) NSString* skinBackgroundImageDisabled;
@property(retain, nonatomic) NSString* skinBackgroundImageHighlighted;
@property(retain, nonatomic) NSString* skinBackgroundImageNormal;
@property(retain, nonatomic) NSString* skinImageSelected;
@property(retain, nonatomic) NSString* skinImageNormal;
@property(assign, nonatomic) int skinTitleShadowColor;
@property(assign, nonatomic) int skinTitleColorSelected;
@property(assign, nonatomic) int skinTitleColorDisabled;
@property(assign, nonatomic) int skinTitleColorHighlighted;
@property(assign, nonatomic) int skinTitleColorNormal;
-(void)reloadAppearance;
@end

@interface NSString (JSONKitDeserializing)
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONString;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONString;
@end

@interface NSData (JSONKitDeserializing)
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONData;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONData;
@end

@interface NSString (JSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options includeQuotes:(BOOL)quotes error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options includeQuotes:(BOOL)quotes error:(id*)error;
-(id)JSONData;
@end

@interface NSArray (JSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface NSDictionary (JSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface NSArray (JSONKitSerializingBlockAdditions)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
@end

@interface NSDictionary (JSONKitSerializingBlockAdditions)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
@end

@interface UIScrollView (SVInfiniteScrolling)
@property(assign, nonatomic) BOOL showsInfiniteScrolling;
@property(readonly, assign, nonatomic) SVInfiniteScrollingView* infiniteScrollingView;
-(void)setInfiniteScrollingView:(id)view;
-(void)triggerInfiniteScrolling;
-(void)addInfiniteScrollingWithActionHandler:(id)actionHandler;
@end

@interface UIScrollView (SVPullToRefresh)
@property(assign, nonatomic) BOOL showsPullToRefresh;
@property(readonly, assign, nonatomic) SVPullToRefreshView* pullToRefreshView;
-(void)setPullToRefreshView:(id)refreshView;
-(void)triggerPullToRefresh;
-(void)triggerPullToLoading;
-(void)addPullToRefreshWithActionHandler:(id)actionHandler;
-(void)addPullToRefreshWithActionHandler:(id)actionHandler position:(unsigned)position;
@end

@interface NSData (uniAttribute)
+(id)dataWithName:(id)name inAttributes:(id)attributes;
-(void)setInAttributes:(id)attributes withName:(id)name;
@end

@interface NSString (uniAttribute)
+(id)stringWithName:(id)name inAttributes:(id)attributes;
-(void)setInAttributes:(id)attributes withName:(id)name;
@end

@interface NSArray (uniAttribute)
+(id)arrayWithName:(id)name inAttributes:(id)attributes withDescription:(id)description;
-(void)setInAttributes:(id)attributes withName:(id)name andType:(id)type;
@end

@interface NSNumber (uniAttribute)
+(id)numberWithName:(id)name inAttributes:(id)attributes;
+(void)setDouble:(double)aDouble InAttributes:(id)attributes withName:(id)name;
+(double)doubleValueWithName:(id)name inAttributes:(id)attributes;
+(void)setFloat:(float)aFloat InAttributes:(id)attributes withName:(id)name;
+(float)floatValueWithName:(id)name inAttributes:(id)attributes;
+(void)setLonglong:(long long)longlong InAttributes:(id)attributes withName:(id)name;
+(long long)longlongValueWithName:(id)name inAttributes:(id)attributes;
+(void)setInt:(int)int InAttributes:(id)attributes withName:(id)name;
+(int)intValueWithName:(id)name inAttributes:(id)attributes;
+(void)setShort:(short)aShort InAttributes:(id)attributes withName:(id)name;
+(short)shortValueWithName:(id)name inAttributes:(id)attributes;
+(void)setChar:(BOOL)aChar InAttributes:(id)attributes withName:(id)name;
+(BOOL)charValueWithName:(id)name inAttributes:(id)attributes;
+(void)setBool:(BOOL)aBool InAttributes:(id)attributes withName:(id)name;
+(BOOL)boolValueWithName:(id)name inAttributes:(id)attributes;
-(void)setInAttributes:(id)attributes withName:(id)name;
@end

@interface UIView (Custom) <ISkinProtocol>
@property(retain, nonatomic) QQBaseSkinConfig* skinConfig;
-(void)reloadAppearance;
@end

@interface UIImageView (Custom) <ISkinProtocol>
@property(retain, nonatomic) NSString* skinImageHighlighted;
@property(retain, nonatomic) NSString* skinImageNormal;
@property(assign, nonatomic) CGPoint skinImageStretchablePoint;
-(void)reloadAppearance;
@end

@interface UITableView (Custom) <ISkinProtocol>
-(void)reloadAppearance;
@end

@interface UITextField (Custom) <ISkinProtocol>
@property(retain, nonatomic) NSString* skinBackgroundImage;
@property(assign, nonatomic) int skinTextColor;
-(void)reloadAppearance;
@end

@interface UITableViewCell (SwizzleMethod)
-(id)QQInitWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface UIView (Genie)
-(CATransform3D)transformRect:(CGRect)rect toTrapezoid:(BCTrapezoid)trapezoid;
-(id)transformationsForSlices:(id)slices edge:(unsigned)edge startPosition:(float)position totalSize:(float)size firstBezier:(BCSegment)bezier secondBezier:(BCSegment)bezier6 finalRectDepth:(float)depth;
-(id)sliceImage:(id)image toLayersAlongAxis:(int)layersAlongAxis;
-(id)sliceGridImage:(id)image rows:(int)rows cols:(int)cols reverse:(BOOL)reverse;
-(id)renderSnapshotWithMarginForAxis:(int)axis;
-(void)genieTransitionWithDuration:(double)duration edge:(unsigned)edge destinationRect:(CGRect)rect reverse:(BOOL)reverse completion:(id)completion;
-(void)genieOpacityWithDuration:(double)duration edge:(unsigned)edge completion:(id)completion reverse:(BOOL)reverse;
-(id)caculateOpacityFrame:(id)frame indexFrame:(int)frame2 totalFrame:(int)frame3 step:(int)step;
-(void)deletePhotoAnimation:(id)animation during:(int)during toPoint:(CGPoint)point;
-(void)genieOutTransitionWithDuration:(double)duration startRect:(CGRect)rect startEdge:(unsigned)edge completion:(id)completion;
-(void)genieInTransitionWithDuration:(double)duration destinationRect:(CGRect)rect destinationEdge:(unsigned)edge completion:(id)completion;
-(void)genieOpactionWithDuration:(double)duration completion:(id)completion reverse:(BOOL)reverse;
-(void)genieForPopMenuWithDuration:(double)duration completion:(id)completion reverse:(BOOL)reverse;
@end

@interface UIView (Global)
+(id)textFieldBackgroundView;
+(id)tabBarBackgroundView;
+(id)commonGroupStyledTableView:(id)view dataSource:(id)source frame:(CGRect)frame;
+(id)announceViewForFoot:(id)foot textAlignment:(int)alignment yOffset:(float)offset;
+(id)announceViewForTitle:(id)title textAlignment:(int)alignment yOffset:(float)offset;
+(float)heightForAnnounceViewForFoot:(id)foot yOffset:(float)offset;
+(float)heightForAnnounceViewForTitle:(id)title yOffset:(float)offset;
+(id)commonRedButtonForTitle:(id)title target:(id)target action:(SEL)action;
+(id)commonWhiteButtonForTitle:(id)title target:(id)target action:(SEL)action;
+(id)commonGreenButtonForTitle:(id)title target:(id)target action:(SEL)action;
+(id)headerViewForTableViewSection:(id)tableViewSection;
+(float)heightForHeaderViewInTableViewSection;
@end

@interface UIView (RightDragToGoBack)
-(BOOL)isSupportRightDragToGoBack;
@end

@interface UIControl (RightDragToGoBack)
@property(assign, nonatomic) BOOL isSupportRightDragToGoBack;
@end

@interface UIImage (StackBlur)
+(void)applyStackBlurToBuffer:(char*)buffer width:(int)width height:(int)height withRadius:(unsigned)radius;
-(id)normalize;
-(id)stackBlur:(unsigned)blur;
-(id)stackBlurWithImages:(unsigned)images imageArray:(id)array;
@end

@interface NSMutableAttributedString (EmotionParseResult)
+(id)GetSysEmojiPath:(id)path;
+(id)GetSysEmoji:(id)emoji;
+(id)CreateAttributedString:(id)string result:(id)result wihtInfo:(id)info;
-(CFArrayRef)GetCTLines:(CGRect)lines origins:(CGPoint*)origins;
-(CTFrameRef)GetCTFrame:(CGRect)frame;
-(void)drawAttributedString:(CGRect)string inContext:(CGContextRef)context;
-(void)CreatAttributed:(id)attributed withInfo:(id)info range:(NSRange)range;
@end

@interface NSString (SwizzleMethod)
-(CGSize)QQSizeWithFont:(id)font forWidth:(float)width lineBreakMode:(int)mode;
@end

@interface NSValue (FSAccelerometerValue)
+(id)valueWithFSAccelerometerValue:(XXStruct_taVrlB)fsaccelerometerValue;
-(XXStruct_taVrlB)FSAccelerometerValue;
@end

@interface NSString (OAURLForEncoding)
-(id)URLDecodedString;
-(id)URLEncodedString;
-(id)OAURLDecodedStringWithCFStringEncoding:(unsigned long)cfstringEncoding;
-(id)OAURLEncodedStringWithCFStringEncoding:(unsigned long)cfstringEncoding;
@end

@interface NSString (WMCDeleteEmoji)
-(id)wmcStringByDeletingEmoji;
-(BOOL)wmcContainsEmoji;
@end

@interface NSFileManager (WMCICloudBackup)
-(BOOL)wmcICloudPreventBackupFlag:(id)flag;
-(BOOL)wmcSetICloudPreventBackupFile:(id)file flag:(BOOL)flag;
@end

@interface ALAssetsLibrary (WMCGroupSave)
+(void)wmcSaveImage:(CGImageRef)image metadata:(id)metadata result:(id)result;
-(void)addAssetURL:(id)url toAlbum:(id)album withCompletionBlock:(id)completionBlock;
-(void)wmcSaveImage:(CGImageRef)image metadata:(id)metadata toAlbum:(id)album result:(id)result;
@end

@interface UIScreen (WMCRetina)
-(CGSize)wmcScreenResolution;
-(BOOL)wmcIsiPhone5;
-(BOOL)wmcIsRetina;
@end

@interface UIDevice (WMCIdentifierAddition)
+(id)wmcGetDeviceType;
+(id)wmcGetPlatformType;
-(id)getIPAddress;
-(id)wmcUniqueGlobalDeviceIdentifier;
-(id)wmcUniqueDeviceIdentifier;
-(id)macaddress;
@end

@interface NSString (WMCMD5Addition)
-(id)wmcStringFromMD5;
@end

@interface UISearchBar (WMCExtraParams)
-(id)wmcGetTextField;
-(id)wmcGetCancelButton;
@end

@interface UIImage (Stretch)
-(id)stretchableButtonImage2;
-(id)stretchableButtonImage;
-(id)stretchableNavButtonImage;
@end

@interface UIButton (WMCCustomStyle)
+(id)wmcFetchDefaultNavigationBarButton:(id)button frame:(CGRect)frame addTarget:(id)target action:(SEL)action;
+(id)wmcFetchDefaultBlackButton:(id)button frame:(CGRect)frame addTarget:(id)target action:(SEL)action;
+(id)wmcFetchDefaultBlueButton:(id)button frame:(CGRect)frame addTarget:(id)target action:(SEL)action;
+(id)wmcFetchDefaultBlueButton:(id)button addTarget:(id)target action:(SEL)action;
+(id)wmcFetchDefaultBlackButton:(id)button addTarget:(id)target action:(SEL)action;
-(void)useCancelBackground;
-(id)wmcModifyCancelButtonStyle:(id)style frame:(CGRect)frame addTarget:(id)target action:(SEL)action fontSize:(float)size;
-(void)useDefaultNavigationBackground;
-(void)wmcUseDefaultBlackBackground;
-(void)wmcUseDefaultBlueBackground;
@end

@interface NSMutableDictionary (Metadata)
@property(retain, nonatomic) NSString* exifUserComment;
@property(assign, nonatomic) double gpsImageHeading;
@property(retain, nonatomic) CLLocation* gpsDestLocation;
@property(retain, nonatomic) CLLocation* gpsLocation;
@property(retain, nonatomic) NSDictionary* gpsDic;
@property(retain, nonatomic) NSDictionary* iptcDic;
@property(retain, nonatomic) NSDictionary* tiffDic;
@property(retain, nonatomic) NSDictionary* exifDic;
+(id)defaultTiffDictionary;
+(id)defaultTiff:(id)tiff make:(id)make model:(id)model;
+(id)tiffDateTimeFormate;
+(id)gpsDestLocationFromLocation:(id)location saveDic:(id)dic;
+(id)gpsLocationFromLocation:(id)location saveDic:(id)dic;
+(id)mutableDicitonaryFromDictionary:(id)dictionary;
-(void)setIptcAddress:(id)address city:(id)city country:(id)country;
-(void)setIptcKeywords:(id)keywords;
-(void)setTiffDescription:(id)description;
-(void)setTiffMake:(id)make model:(id)model software:(id)software;
-(void)setExifPixelDimension:(CGSize)dimension;
-(void)setImageOrientationToMetadata:(int)metadata;
-(id)mutableDicitonaryValueForKey:(id)key;
-(id)initWithOriginMetadata:(id)originMetadata;
-(id)initWithImageSampleBuffer:(opaqueCMSampleBuffer*)imageSampleBuffer;
@end

@interface NSMutableDictionary (UploadExif)
-(void)addUploadInfoFromWatermarkParams:(id)watermarkParams;
-(void)addUploadInfoFromWatermarkDic:(id)watermarkDic;
-(void)addUploadInfoFromTiffDic:(id)tiffDic;
-(void)addUploadInfoFromExifDic:(id)exifDic;
@end

@interface NSMutableDictionary (UserCommentExtend)
-(void)addUserCommentWeatherPM25:(id)a25;
-(void)addUserCommentWeatherCurrentTemperature:(id)temperature;
-(void)addUserCommentWeatherType:(id)type;
-(void)addUserCommentDecibelValue:(id)value;
-(void)addUserCommentPositionInfo:(id)info type:(id)type;
-(void)addUserCommentWatermarkScene:(id)scene;
-(void)addUserCommentWatermarkSid:(id)sid category:(id)category;
-(id)convertToUserCommentString;
@end

@interface NSString (OAURLEncodingAdditions)
-(id)URLDecodedString;
-(id)URLEncodedString;
@end

@interface UIView (MQZone_TTCategory)
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) CGPoint origin;
@property(assign, nonatomic) float centerY;
@property(assign, nonatomic) float centerX;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) float width;
@property(assign, nonatomic) float bottom;
@property(assign, nonatomic) float right;
@property(assign, nonatomic) float top;
@property(assign, nonatomic) float left;
@end

@interface UIView (UIViewController)
-(id)subviewWithClassName:(id)className;
-(id)viewController;
@end

@interface NSString (keboardHelper)
-(id)filterAssociationString;
-(BOOL)containsAssociationString;
-(BOOL)isWhitespaceAndNewlineString;
-(int)lengthOfFilterString;
-(id)filterString;
-(NSRange)backspaceAtLocation:(unsigned)location;
@end

@interface UIScrollView (page)
-(int)currentPage;
@end

@interface NSObject (Description)
-(id)propertiesDescription;
@end

@interface NSObject (NSObject_SBJSON)
-(id)JSONRepresentation;
-(id)JSONFragment;
@end

@interface NSString (NSString_SBJSON)
-(id)JSONValue;
-(id)JSONFragmentValue;
@end

@interface NSString (QZone)
+(id)clientKey;
@end

@interface NSStream (MyAdditions)
+(void)getStreamsToHostNamed:(id)hostNamed port:(int)port inputStream:(id*)stream outputStream:(id*)stream4;
@end

@interface NSMutableArray (QueueAdditions)
-(void)enqueueFront:(id)front;
-(void)enqueue:(id)enqueue;
-(id)dequeue;
@end

@interface NSString (imagePickerUUID)
-(id)findUUID;
@end

@interface UIViewController (PLCameraView)
-(id)getPhotoLibraryButton;
@end

@interface UIImage (GAUIImage_Resize)
-(id)GAStretchableImageWithLeftCapWidth:(int)leftCapWidth topCapHeight:(int)height;
@end

@interface NSDate (QZone)
+(id)getQZoneDaysDes:(long)des;
+(id)getQZoneDateFormat:(long)format;
@end

@interface NSObject (ExtendForBlock_Private)
@end

@interface NSObject (ExtendForBlock)
-(void)performBlockOnMainThread:(id)thread withObject:(id)object waitUntilDone:(BOOL)done;
-(id)asynOnQueue:(id)queue operate:(id)operate withObject:(id)object;
-(void)doOperate:(id)operate;
@end

@interface NSString (Numeric)
-(unsigned long long)longLongValueEX;
-(BOOL)isLongLongValue;
-(BOOL)isIntValue;
-(BOOL)isFloatValue;
@end

@interface NSString (Layout)
-(int)checkSpellToIndex:(int)index split:(BOOL*)split;
-(id)trimLeft;
-(BOOL)isWordCharAtIndex:(int)index;
-(BOOL)compareBetween:(id)between and:(id)anAnd;
-(BOOL)isWordChar:(BOOL)aChar;
-(BOOL)isDigital;
-(int)getMaxStringInWidth:(id)width inWidth:(int)width2 endIndex:(int*)index needSplit:(BOOL)split nextLine:(BOOL*)line preLine:(BOOL*)line6;
@end

@interface UIImage (size)
-(id)description;
-(CGSize)drawSize;
-(CGSize)realSize;
@end

@interface NSString (sizeWithFont)
-(CGSize)QZoneSizeWithFont:(id)font;
@end

@interface NSString (UBBAtString)
-(id)UBBAtString:(id)string;
@end

@interface UIViewController (ModalViewController)
-(id)QZoneModalViewController;
@end

@interface NSObject (NSObject_SBJsonWriting)
-(id)JSONRepresentation;
@end

@interface NSString (NSString_SBJsonParsing)
-(id)JSONValue;
@end

@interface UIDevice (Hardware)
-(id)macaddress;
-(int)deviceFamily;
-(BOOL)hasRetinaDisplay;
-(id)platformString;
-(unsigned)platformType;
-(id)freeDiskSpace;
-(id)totalDiskSpace;
-(unsigned)maxSocketBufferSize;
-(unsigned)userMemory;
-(unsigned)totalMemory;
-(unsigned)cpuCount;
-(unsigned)busFrequency;
-(unsigned)cpuFrequency;
-(unsigned)getSysInfo:(unsigned)info;
-(id)hwmodel;
-(id)platform;
-(id)getSysInfoByName:(char*)name;
@end

@interface UIView (QQVideoMsgBar)
-(void)removeAllSubviews;
@end

