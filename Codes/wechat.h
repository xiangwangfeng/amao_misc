/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct _NSZone NSZone;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct _NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

template<>
struct less<unsigned long>;

typedef struct _Rb_tree_node_base {
	int _M_color;
	Rb_tree_node_base* _M_parent;
	Rb_tree_node_base* _M_left;
	Rb_tree_node_base* _M_right;
} Rb_tree_node_base;

template<>
struct _Rb_tree_impl<std::less<unsigned long>, false> {
	less<unsigned long> _M_key_compare;
	Rb_tree_node_base _M_header;
	unsigned _M_node_count;
};

template<>
struct _Rb_tree<unsigned long, std::pair<const unsigned long, unsigned long>, std::_Select1st<std::pair<const unsigned long, unsigned long> >, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > {
	_Rb_tree_impl<std::less<unsigned long>, false> _M_impl;
};

template<>
struct map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > {
	_Rb_tree<unsigned long, std::pair<const unsigned long, unsigned long>, std::_Select1st<std::pair<const unsigned long, unsigned long> >, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > _M_t;
};

typedef struct opaqueCMSampleBuffer opaqueCMSampleBuffer;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct {
	double latitude;
	double longitude;
} XXStruct_zYrK5D;

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct stEntryRow {
	int _field1;
	BOOL _field2;
	id _field3;
	Class _field4;
	id _field5;
	id _field6;
	id _field7;
	id _field8;
	id _field9;
} stEntryRow;

template<>
struct less<unsigned int>;

template<>
struct _Rb_tree_impl<std::less<unsigned int>, false> {
	less<unsigned int> _M_key_compare;
	Rb_tree_node_base _M_header;
	unsigned _M_node_count;
};

template<>
struct _Rb_tree<unsigned int, std::pair<const unsigned int, unsigned int>, std::_Select1st<std::pair<const unsigned int, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > {
	_Rb_tree_impl<std::less<unsigned int>, false> _M_impl;
};

template<>
struct map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > {
	_Rb_tree<unsigned int, std::pair<const unsigned int, unsigned int>, std::_Select1st<std::pair<const unsigned int, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > _M_t;
};

typedef struct stWeixinEntryRow {
	int _field1;
	BOOL _field2;
	id _field3;
	Class _field4;
	id _field5;
	id _field6;
	id _field7;
	id _field8;
	id _field9;
} stWeixinEntryRow;

typedef struct CGAffineTransform {
	float _field1;
	float _field2;
	float _field3;
	float _field4;
	float _field5;
	float _field6;
} CGAffineTransform;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct _Vector_impl {
	unsigned long* _M_start;
	unsigned long* _M_finish;
	unsigned long* _M_end_of_storage;
} Vector_impl;

template<>
struct vector<unsigned long, std::allocator<unsigned long> > {
	Vector_impl _M_impl;
};

typedef struct _Vector_impl {
	Class* _M_start;
	Class* _M_finish;
	Class* _M_end_of_storage;
} Vector_impl;

template<>
struct vector<Class *, std::allocator<Class *> > {
	Vector_impl _M_impl;
};

typedef struct XmlReaderNode_t {
	int _field1;
	char* _field2;
	XmlReaderNode_t* _field3;
	XmlReaderNode_t* _field4;
	XmlReaderNode_t* _field5;
	XmlReaderNode_t** _field6;
	XmlReaderAttr_t* _field7;
	XmlReaderAttr_t** _field8;
	int _field9;
} XmlReaderNode_t;

typedef struct XmlReaderAttr_t XmlReaderAttr_t;

typedef struct AutoBuffer {
	char* _field1;
	long _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
} AutoBuffer;

typedef struct _Alloc_hider {
	char* _M_p;
} Alloc_hider;

template<>
struct basic_string<char, std::char_traits<char>, std::allocator<char> > {
	Alloc_hider _M_dataplus;
};

typedef struct CGImage* CGImageRef;

typedef struct CGContext* CGContextRef;

template<>
struct less<int>;

template<>
struct _Rb_tree_impl<std::less<int>, false> {
	less<int> _M_key_compare;
	Rb_tree_node_base _M_header;
	unsigned _M_node_count;
};

template<>
struct _Rb_tree<int, std::pair<const int, TimeLineSectionType>, std::_Select1st<std::pair<const int, TimeLineSectionType> >, std::less<int>, std::allocator<std::pair<const int, TimeLineSectionType> > > {
	_Rb_tree_impl<std::less<int>, false> _M_impl;
};

template<>
struct map<int, TimeLineSectionType, std::less<int>, std::allocator<std::pair<const int, TimeLineSectionType> > > {
	_Rb_tree<int, std::pair<const int, TimeLineSectionType>, std::_Select1st<std::pair<const int, TimeLineSectionType> >, std::less<int>, std::allocator<std::pair<const int, TimeLineSectionType> > > _M_t;
};

typedef struct dispatch_queue_s dispatch_queue_s;

typedef struct _NSParserPosition {
	float x;
	float y;
	float width;
	BOOL endOfString;
} NSParserPosition;

typedef struct objc_property objc_property;

typedef struct _Vector_impl {
	objc_property** _M_start;
	objc_property** _M_finish;
	objc_property** _M_end_of_storage;
} Vector_impl;

template<>
struct vector<objc_property *, std::allocator<objc_property *> > {
	Vector_impl _M_impl;
};

typedef struct tagSKBuiltinString {
	char* _field1;
} tagSKBuiltinString;

typedef struct tagMMBaseResponse {
	int _field1;
	tagSKBuiltinString _field2;
} tagMMBaseResponse;

typedef struct tagSKBuiltinBuffer {
	int _field1;
	char* _field2;
} tagSKBuiltinBuffer;

typedef struct tagMMCmdItem tagMMCmdItem;

template<>
struct SKSmartPickleStruct<MMMicroMsgPickle, tagMMNewInitResponse> {
	tagMMBaseResponse _field1;
	tagSKBuiltinBuffer _field2;
	tagSKBuiltinBuffer _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	tagMMCmdItem* _field7;
	unsigned _field8;
};

typedef struct tagMMBuiltinIP tagMMBuiltinIP;

typedef struct tagMMBuiltinIPList {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	tagMMBuiltinIP* _field4;
	tagMMBuiltinIP* _field5;
} tagMMBuiltinIPList;

typedef struct __CFSocket* CFSocketRef;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct timeval {
	int tv_sec;
	int tv_usec;
} timeval;

typedef struct in_addr {
	unsigned _field1;
} in_addr;

typedef struct sockaddr_in {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	in_addr _field4;
	BOOL _field5[8];
} sockaddr_in;

typedef struct in6_addr {
	union {
		unsigned char _field1[16];
		unsigned short _field2[8];
		unsigned _field3[4];
	} _field1;
} in6_addr;

typedef struct sockaddr_in6 {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	unsigned _field4;
	in6_addr _field5;
	unsigned _field6;
} sockaddr_in6;

typedef struct stMMHeader {
	unsigned _field1;
	unsigned short _field2;
	unsigned short _field3;
	unsigned _field4;
	unsigned _field5;
} stMMHeader;

typedef struct stFileHeader {
	unsigned m_uiVersion;
	long long m_i64FileSize;
	long long m_i64DownloadSize;
} stFileHeader;

template<>
struct less<unsigned long long>;

template<>
struct _Rb_tree_impl<std::less<unsigned long long>, false> {
	less<unsigned long long> _M_key_compare;
	Rb_tree_node_base _M_header;
	unsigned _M_node_count;
};

template<>
struct _Rb_tree<unsigned long long, std::pair<const unsigned long long, tagEmojiItem *>, std::_Select1st<std::pair<const unsigned long long, tagEmojiItem *> >, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, tagEmojiItem *> > > {
	_Rb_tree_impl<std::less<unsigned long long>, false> _M_impl;
};

template<>
struct map<unsigned long long, tagEmojiItem *, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, tagEmojiItem *> > > {
	_Rb_tree<unsigned long long, std::pair<const unsigned long long, tagEmojiItem *>, std::_Select1st<std::pair<const unsigned long long, tagEmojiItem *> >, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, tagEmojiItem *> > > _M_t;
};

typedef struct OpaqueAudioComponentInstance OpaqueAudioComponentInstance;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct OpaqueAudioFileID OpaqueAudioFileID;

typedef struct OpaqueAudioQueue OpaqueAudioQueue;

typedef struct AudioQueueBuffer {
	unsigned _field1;
	void* _field2;
	unsigned _field3;
	void* _field4;
	unsigned _field5;
	AudioStreamPacketDescription* _field6;
	unsigned _field7;
} AudioQueueBuffer;

typedef struct AMRDecodeFloat* AMRDecodeFloatRef;

typedef struct AudioStreamPacketDescription {
	long long mStartOffset;
	unsigned mVariableFramesInPacket;
	unsigned mDataByteSize;
} AudioStreamPacketDescription;

typedef struct PlayerState {
	id _field1;
	unsigned _field2;
	AudioStreamBasicDescription _field3;
	OpaqueAudioQueue* _field4;
	AudioQueueBuffer* _field5[3];
	unsigned _field6;
	long long _field7;
	unsigned _field8;
	bool _field9;
	bool _field10;
	bool _field11;
	bool _field12;
	bool _field13;
	unsigned _field14;
	id _field15;
	unsigned _field16;
	id _field17;
	id _field18;
	AMRDecodeFloatRef _field19;
	id _field20;
	id _field21;
	id _field22;
	id _field23;
	unsigned _field24;
	AudioStreamPacketDescription* _field25;
	OpaqueAudioFileID* _field26;
} PlayerState;

typedef struct AMREncodeFloat* AMREncodeFloatRef;

typedef struct RecorderState {
	id _field1;
	AudioStreamBasicDescription _field2;
	OpaqueAudioQueue* _field3;
	AudioQueueBuffer* _field4[3];
	unsigned _field5;
	long long _field6;
	long long _field7;
	OpaqueAudioFileID* _field8;
	bool _field9;
	long _field10;
	unsigned _field11;
	bool _field12;
	bool _field13;
	id _field14;
	id _field15;
	id _field16;
	AMREncodeFloatRef _field17;
	bool _field18;
	id _field19;
	id _field20;
	id _field21;
	id _field22;
	OpaqueAudioFileID* _field23;
	id _field24;
	float _field25;
} RecorderState;

typedef struct OpaqueAudioFileStreamID OpaqueAudioFileStreamID;

typedef struct _opaque_pthread_mutex_t {
	long __sig;
	BOOL __opaque[40];
} opaque_pthread_mutex_t;

typedef struct _opaque_pthread_cond_t {
	long __sig;
	BOOL __opaque[24];
} opaque_pthread_cond_t;

typedef struct tagMMRoomInfo {
	tagSKBuiltinString _field1;
	tagSKBuiltinString _field2;
} tagMMRoomInfo;

typedef struct tagMMSnsUserInfo {
	unsigned _field1;
	char* _field2;
	unsigned long long _field3;
	unsigned _field4;
} tagMMSnsUserInfo;

typedef struct tagMMCustomizedInfo {
	unsigned _field1;
	char* _field2;
	char* _field3;
	char* _field4;
} tagMMCustomizedInfo;

typedef struct tagMMModContact {
	tagSKBuiltinString _field1;
	tagSKBuiltinString _field2;
	tagSKBuiltinString _field3;
	tagSKBuiltinString _field4;
	int _field5;
	tagSKBuiltinBuffer _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned _field9;
	tagSKBuiltinString _field10;
	tagSKBuiltinString _field11;
	tagSKBuiltinString _field12;
	unsigned _field13;
	unsigned _field14;
	tagMMRoomInfo* _field15;
	tagSKBuiltinString _field16;
	unsigned _field17;
	unsigned _field18;
	char* _field19;
	char* _field20;
	char* _field21;
	unsigned _field22;
	unsigned _field23;
	unsigned _field24;
	char* _field25;
	int _field26;
	unsigned _field27;
	char* _field28;
	char* _field29;
	char* _field30;
	char* _field31;
	char* _field32;
	unsigned _field33;
	int _field34;
	int _field35;
	char* _field36;
	tagMMSnsUserInfo _field37;
	char* _field38;
	char* _field39;
	char* _field40;
	char* _field41;
	tagMMCustomizedInfo _field42;
	char* _field43;
	char* _field44;
	char* _field45;
	char* _field46;
	char* _field47;
	char* _field48;
	char* _field49;
} tagMMModContact;

typedef struct tagMMModChatRoomMember {
	tagSKBuiltinString _field1;
	tagSKBuiltinString _field2;
	tagSKBuiltinString _field3;
	tagSKBuiltinString _field4;
	int _field5;
	tagSKBuiltinBuffer _field6;
	unsigned _field7;
	tagSKBuiltinString _field8;
	tagSKBuiltinString _field9;
	tagSKBuiltinString _field10;
	unsigned _field11;
	char* _field12;
	char* _field13;
	char* _field14;
	unsigned _field15;
	unsigned _field16;
	char* _field17;
	char* _field18;
	char* _field19;
	char* _field20;
	unsigned _field21;
	int _field22;
	int _field23;
	char* _field24;
	char* _field25;
	tagMMSnsUserInfo _field26;
	char* _field27;
	char* _field28;
	char* _field29;
	char* _field30;
	tagMMCustomizedInfo _field31;
} tagMMModChatRoomMember;

template<>
struct _Rb_tree<unsigned long, std::pair<const unsigned long, id>, std::_Select1st<std::pair<const unsigned long, id> >, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, id> > > {
	_Rb_tree_impl<std::less<unsigned long>, false> _field1;
};

template<>
struct map<unsigned long, id, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, id> > > {
	_Rb_tree<unsigned long, std::pair<const unsigned long, id>, std::_Select1st<std::pair<const unsigned long, id> >, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, id> > > _field1;
};

typedef struct tagMMDisturbTimeSpan {
	unsigned _field1;
	unsigned _field2;
} tagMMDisturbTimeSpan;

typedef struct tagMMDisturbSetting {
	unsigned _field1;
	tagMMDisturbTimeSpan _field2;
	unsigned _field3;
	tagMMDisturbTimeSpan _field4;
} tagMMDisturbSetting;

typedef struct tagMMGmailInfo tagMMGmailInfo;

typedef struct tagMMGmailList {
	unsigned _field1;
	tagMMGmailInfo* _field2;
} tagMMGmailList;

typedef struct tagMMModUserInfo {
	unsigned _field1;
	tagSKBuiltinString _field2;
	tagSKBuiltinString _field3;
	unsigned _field4;
	tagSKBuiltinString _field5;
	tagSKBuiltinString _field6;
	unsigned _field7;
	unsigned _field8;
	char* _field9;
	int _field10;
	char* _field11;
	char* _field12;
	char* _field13;
	unsigned _field14;
	tagMMDisturbSetting _field15;
	unsigned _field16;
	unsigned _field17;
	char* _field18;
	int _field19;
	int _field20;
	int _field21;
	int _field22;
	int _field23;
	char* _field24;
	unsigned _field25;
	tagMMGmailList _field26;
	char* _field27;
	char* _field28;
	unsigned _field29;
	unsigned _field30;
	unsigned long long _field31;
	char* _field32;
	int _field33;
	int _field34;
	char* _field35;
	unsigned _field36;
	char* _field37;
	char* _field38;
} tagMMModUserInfo;

typedef struct tagMMModUserImg {
	unsigned _field1;
	unsigned _field2;
	char* _field3;
	char* _field4;
	char* _field5;
	char* _field6;
} tagMMModUserImg;

typedef struct CFastStr {
	char* _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
} CFastStr;

typedef struct tagSKBufferImpl tagSKBufferImpl;

typedef struct SKBuffer {
	tagSKBufferImpl* _field1;
} SKBuffer;

typedef struct tagMMLbsContactInfo {
	char* _field1;
	char* _field2;
	char* _field3;
	char* _field4;
	char* _field5;
	char* _field6;
	int _field7;
	unsigned _field8;
	unsigned _field9;
	char* _field10;
	char* _field11;
	char* _field12;
	char* _field13;
	char* _field14;
	unsigned _field15;
	int _field16;
	tagMMSnsUserInfo _field17;
	char* _field18;
	char* _field19;
	char* _field20;
	char* _field21;
	tagMMCustomizedInfo _field22;
} tagMMLbsContactInfo;

typedef struct Reader {
	/*function-pointer*/ void** _field1;
	unsigned _field2;
} Reader;

typedef struct Result Result;

template<>
struct Ref<zxing::Result> {
	Result* _field1;
};

typedef struct BinaryBitmap BinaryBitmap;

template<>
struct Ref<zxing::BinaryBitmap> {
	BinaryBitmap* _field1;
};

typedef struct ResultPointCallback ResultPointCallback;

template<>
struct Ref<zxing::ResultPointCallback> {
	ResultPointCallback* _field1;
};

typedef struct GF256 GF256;

typedef struct ReedSolomonDecoder {
	GF256* _field1;
} ReedSolomonDecoder;

typedef struct Decoder {
	ReedSolomonDecoder _field1;
	bool _field2;
	unsigned _field3;
} Decoder;

typedef struct QRCodeReader {
	/*function-pointer*/ void** _field1;
	unsigned _field2;
	Decoder _field3;
	unsigned _field4;
	int _field5;
	float _field6;
	float _field7;
} QRCodeReader;

typedef struct CGPath* CGPathRef;

typedef struct VOIPChannelAdapter {
	/*function-pointer*/ void** _field1;
} VOIPChannelAdapter;

typedef struct VOIPNetNotifier {
	/*function-pointer*/ void** _field1;
} VOIPNetNotifier;

typedef struct CTransportChannel CTransportChannel;

typedef struct ITransportChannel {
	CTransportChannel* _field1;
} ITransportChannel;

typedef struct CMVQQEngine* CMVQQEngineRef;

typedef struct IMVQQEngine {
	/*function-pointer*/ void** _field1;
	CMVQQEngineRef _field2;
} IMVQQEngine;

typedef struct _VoIPRingBufferElement VoIPRingBufferElement;

typedef struct VoIPRingBuffer {
	unsigned _field1;
	unsigned _field2;
	int _field3;
	int _field4;
	VoIPRingBufferElement* _field5;
	opaque_pthread_mutex_t* _field6;
	int _field7;
} VoIPRingBuffer;

typedef struct tagDialReport {
	unsigned long long llUin;
	unsigned long long llRoomKey;
	unsigned iRoomId;
	unsigned iRoomMemberId;
	unsigned iStopStatus;
	int iReqRet;
	int iReserve;
	int iUsedTime;
	unsigned char isCanConnect;
	unsigned char isGotPeerId;
	unsigned char isGotStrategy;
	unsigned char isConnected;
	unsigned char isCanTalk;
	unsigned char isGotCapInfo;
	unsigned char isTalked;
} tagDialReport;

typedef struct {
	short _field1;
	short _field2;
	short _field3;
	short _field4;
	short _field5;
	short _field6;
	short _field7;
	short _field8;
	short _field9;
	short _field10;
	short _field11;
	short _field12;
} XXStruct_fQ3fDD;

typedef struct VOIPNetTypeDetectorAdapter {
	/*function-pointer*/ void** _field1;
} VOIPNetTypeDetectorAdapter;

typedef struct NetTypeDetector NetTypeDetector;

typedef struct INetTypeDetectorAdapter INetTypeDetectorAdapter;

typedef struct INetTypeDetector {
	NetTypeDetector* _field1;
	INetTypeDetectorAdapter* _field2;
} INetTypeDetector;

typedef struct tagRelayReport {
	unsigned long long _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned _field9;
	unsigned _field10;
	unsigned _field11;
	unsigned _field12;
	unsigned _field13;
	unsigned _field14;
	unsigned _field15;
	unsigned _field16;
	unsigned _field17;
	unsigned _field18;
	unsigned _field19;
	unsigned _field20;
	unsigned short _field21;
	unsigned short _field22;
	unsigned short _field23;
	unsigned short _field24;
	unsigned short _field25;
	unsigned short _field26;
	unsigned short _field27;
	unsigned short _field28;
	unsigned short _field29;
	unsigned short _field30;
	unsigned short _field31;
	unsigned short _field32;
	unsigned short _field33;
	unsigned short _field34;
	unsigned short _field35;
	unsigned short _field36;
	unsigned short _field37;
	unsigned short _field38;
	unsigned short _field39;
	unsigned short _field40;
	unsigned _field41;
	unsigned char _field42;
	unsigned char _field43;
} tagRelayReport;

typedef struct tagDirectReport {
	unsigned long long _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned _field9;
	unsigned _field10;
	unsigned _field11;
	unsigned _field12;
	unsigned _field13;
	unsigned _field14;
	unsigned _field15;
	unsigned _field16;
	unsigned _field17;
	unsigned _field18;
	unsigned short _field19;
	unsigned short _field20;
	unsigned short _field21;
	unsigned short _field22;
	unsigned short _field23;
	unsigned short _field24;
	unsigned short _field25;
	unsigned short _field26;
	unsigned short _field27;
	unsigned short _field28;
	unsigned short _field29;
	unsigned short _field30;
	unsigned short _field31;
	unsigned short _field32;
	unsigned short _field33;
	unsigned short _field34;
	unsigned short _field35;
	unsigned short _field36;
	unsigned short _field37;
	unsigned short _field38;
	unsigned short _field39;
	unsigned char _field40;
	unsigned char _field41;
	unsigned char _field42;
} tagDirectReport;

typedef struct tagAVQualityReportInfo {
	unsigned short _field1;
	unsigned short _field2;
	unsigned short _field3;
	unsigned short _field4;
	unsigned short _field5;
	unsigned short _field6;
	unsigned short _field7;
	unsigned short _field8;
	unsigned short _field9;
	unsigned short _field10;
	unsigned short _field11;
	unsigned short _field12;
	unsigned short _field13;
	unsigned short _field14;
	unsigned short _field15;
	unsigned short _field16;
	unsigned short _field17;
	unsigned short _field18;
	unsigned short _field19;
	unsigned short _field20;
	unsigned short _field21;
	unsigned short _field22;
	unsigned short _field23;
	unsigned short _field24;
	unsigned short _field25;
	unsigned short _field26;
	unsigned short _field27;
	unsigned short _field28;
	unsigned short _field29;
	unsigned short _field30;
	unsigned short _field31;
	unsigned short _field32;
	unsigned short _field33;
	unsigned short _field34;
	unsigned char _field35;
	unsigned char _field36;
} tagAVQualityReportInfo;

typedef struct ExtReport_t {
	BOOL _field1[256];
	BOOL _field2[256];
	BOOL _field3[256];
	BOOL _field4[256];
	int _field5;
} ExtReport_t;

typedef struct WXTalkEngineAdapter {
	/*function-pointer*/ void** _field1;
} WXTalkEngineAdapter;

typedef struct LiveConEngine LiveConEngine;

typedef struct ILiveConEngine {
	LiveConEngine* _field1;
} ILiveConEngine;

typedef struct __sbuf {
	char* _field1;
	int _field2;
} sbuf;

typedef struct __sFILEX sFILEX;

typedef struct __sFILE {
	char* _field1;
	int _field2;
	int _field3;
	short _field4;
	short _field5;
	sbuf _field6;
	int _field7;
	void* _field8;
	/*function-pointer*/ void* _field9;
	/*function-pointer*/ void* _field10;
	/*function-pointer*/ void* _field11;
	/*function-pointer*/ void* _field12;
	sbuf _field13;
	sFILEX* _field14;
	int _field15;
	unsigned char _field16[3];
	unsigned char _field17[1];
	sbuf _field18;
	int _field19;
	long long _field20;
} FILE;

typedef struct CDNTransportComponent* CDNTransportComponentRef;

typedef struct CdnUploadCallback {
	/*function-pointer*/ void** _field1;
	id _field2;
} CdnUploadCallback;

typedef struct CdnDownloadCallback {
	/*function-pointer*/ void** _field1;
	id _field2;
} CdnDownloadCallback;

typedef struct INetCmdSendOnly {
	/*function-pointer*/ void** _field1;
} INetCmdSendOnly;

typedef struct dispatch_semaphore_s dispatch_semaphore_s;

typedef struct _Bit_iterator {
	unsigned* _M_p;
	unsigned _M_offset;
} Bit_iterator;

typedef struct _Bvector_impl {
	Bit_iterator _M_start;
	Bit_iterator _M_finish;
	unsigned* _M_end_of_storage;
} Bvector_impl;

template<>
struct vector<bool, std::allocator<bool> > {
	Bvector_impl _M_impl;
};

typedef struct INetCmdBase {
	/*function-pointer*/ void** _field1;
} INetCmdBase;

template<>
struct _Rb_tree<unsigned long long, std::pair<const unsigned long long, NSString *>, std::_Select1st<std::pair<const unsigned long long, NSString *> >, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, NSString *> > > {
	_Rb_tree_impl<std::less<unsigned long long>, false> _M_impl;
};

template<>
struct map<unsigned long long, NSString *, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, NSString *> > > {
	_Rb_tree<unsigned long long, std::pair<const unsigned long long, NSString *>, std::_Select1st<std::pair<const unsigned long long, NSString *> >, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, NSString *> > > _M_t;
};

typedef struct __CTFrame* CTFrameRef;

template<>
struct _Rb_tree<int, std::pair<const int, GameRecommandViewSectionType>, std::_Select1st<std::pair<const int, GameRecommandViewSectionType> >, std::less<int>, std::allocator<std::pair<const int, GameRecommandViewSectionType> > > {
	_Rb_tree_impl<std::less<int>, false> _M_impl;
};

template<>
struct map<int, GameRecommandViewSectionType, std::less<int>, std::allocator<std::pair<const int, GameRecommandViewSectionType> > > {
	_Rb_tree<int, std::pair<const int, GameRecommandViewSectionType>, std::_Select1st<std::pair<const int, GameRecommandViewSectionType> >, std::less<int>, std::allocator<std::pair<const int, GameRecommandViewSectionType> > > _M_t;
};

typedef struct CXmlReader {
	int _field1;
	XmlReaderNode_t* _field2;
	char* _field3;
	bool _field4;
	bool _field5;
} CXmlReader;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct PBCGIHelperWrap {
	Class _field1;
	Class _field2;
	Class _field3;
	unsigned _field4;
	unsigned _field5;
	id _field6;
	unsigned _field7;
} PBCGIHelperWrap;

typedef struct SpeexBits {
	char* chars;
	int nbBits;
	int charPtr;
	int bitPtr;
	int owner;
	int overflow;
	int buf_size;
	int reserved1;
	void* reserved2;
} SpeexBits;

typedef struct PCMFifoBuffer* PCMFifoBufferRef;

typedef struct _TRSpeexEncodeContex {
	void* st;
	SpeexBits bits;
	int frame_size;
	PCMFifoBufferRef pFifo;
} TRSpeexEncodeContex;

typedef struct _TRSpeexDecodeContex {
	void* st;
	SpeexBits bits;
	int frame_size;
	PCMFifoBufferRef pFifo;
} TRSpeexDecodeContex;

typedef struct {
	int _field1;
	int _field2;
	id _field3;
	id _field4;
	id _field5;
	id _field6;
	id _field7;
} XXStruct_R2OYDB;

typedef struct objc_method_description {
	SEL _field1;
	char* _field2;
} objc_method_description;

typedef struct JKHashTableEntry {
	unsigned _field1;
	id _field2;
	id _field3;
} JKHashTableEntry;

typedef struct JKConstPtrRange {
	char* _field1;
	unsigned _field2;
} JKConstPtrRange;

typedef struct JKConstBuffer {
	JKConstPtrRange _field1;
} JKConstBuffer;

typedef struct JKTokenCacheItem* JKTokenCacheItemRef;

typedef struct JKTokenValue {
	JKConstPtrRange _field1;
	unsigned _field2;
	unsigned _field3;
	union {
		long long _field1;
		unsigned long long _field2;
		double _field3;
	} _field4;
	JKTokenCacheItemRef _field5;
} JKTokenValue;

typedef struct JKPtrRange {
	char* _field1;
	unsigned _field2;
} JKPtrRange;

typedef struct JKManagedBuffer {
	JKPtrRange _field1;
	unsigned _field2;
	unsigned _field3;
} JKManagedBuffer;

typedef struct JKParseToken {
	JKConstPtrRange _field1;
	unsigned _field2;
	JKTokenValue _field3;
	JKManagedBuffer _field4;
} JKParseToken;

typedef struct JKObjectStack {
	void** _field1;
	void** _field2;
	unsigned* _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
} JKObjectStack;

typedef struct JKTokenCache {
	JKTokenCacheItemRef _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned char _field4[1024];
} JKTokenCache;

typedef struct JKObjCImpCache {
	Class _field1;
	/*function-pointer*/ void* _field2;
	/*function-pointer*/ void* _field3;
} JKObjCImpCache;

typedef struct JKParseState {
	unsigned _field1;
	JKConstBuffer _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	JKParseToken _field9;
	JKObjectStack _field10;
	JKTokenCache _field11;
	JKObjCImpCache _field12;
	id _field13;
	int _field14;
	BOOL _field15;
} JKParseState;

typedef struct JKFastClassLookup {
	void* _field1;
	void* _field2;
	void* _field3;
	void* _field4;
	void* _field5;
} JKFastClassLookup;

typedef struct JKEncodeCache {
	id _field1;
	unsigned _field2;
	unsigned _field3;
} JKEncodeCache;

typedef struct JKEncodeState {
	JKManagedBuffer _field1;
	JKManagedBuffer _field2;
	unsigned _field3;
	JKFastClassLookup _field4;
	JKEncodeCache _field5[1024];
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	id _field9;
	id _field10;
	SEL _field11;
	/*function-pointer*/ void* _field12;
	id _field13;
	/*function-pointer*/ void _field14;
} JKEncodeState;

typedef struct _Vector_impl {
	id* _M_start;
	id* _M_finish;
	id* _M_end_of_storage;
} Vector_impl;

template<>
struct vector<id, std::allocator<id> > {
	Vector_impl _M_impl;
};

typedef struct _Vector_impl {
	objc_method_description* _field1;
	objc_method_description* _field2;
	objc_method_description* _field3;
} Vector_impl;

template<>
struct vector<objc_method_description, std::allocator<objc_method_description> > {
	Vector_impl _field1;
};

typedef struct __CFString* CFStringRef;

typedef struct uregex uregex;

typedef struct locale {
	Impl* _field1;
} locale;

typedef struct sqlite3 sqlite3;

typedef struct _Impl Impl;

template<>
struct basic_stringbuf<char, std::char_traits<char>, std::allocator<char> > {
	/*function-pointer*/ void** _field1;
	char* _field2;
	char* _field3;
	char* _field4;
	char* _field5;
	char* _field6;
	char* _field7;
	locale _field8;
	int _field9;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _field10;
};

typedef struct _Callback_list Callback_list;

typedef struct _Words {
	void* _field1;
	long _field2;
} Words;

template<>
struct basic_ostream<char, std::char_traits<char> >;

template<>
struct basic_streambuf<char, std::char_traits<char> >;

template<>
struct ctype<char>;

template<>
struct num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >;

template<>
struct num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >;

template<>
struct basic_stringstream<char, std::char_traits<char>, std::allocator<char> > {
	/*function-pointer*/ void** _field1;
	int _field2;
	/*function-pointer*/ void** _field3;
	basic_stringbuf<char, std::char_traits<char>, std::allocator<char> > _field4;
	/*function-pointer*/ void** _field5;
	int _field6;
	int _field7;
	int _field8;
	int _field9;
	int _field10;
	Callback_list* _field11;
	Words _field12;
	Words _field13[8];
	int _field14;
	Words* _field15;
	locale _field16;
	basic_ostream<char, std::char_traits<char> >* _field17;
	BOOL _field18;
	bool _field19;
	basic_streambuf<char, std::char_traits<char> >* _field20;
	ctype<char>* _field21;
	num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >* _field22;
	num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >* _field23;
};

typedef struct sqlite3_stmt sqlite3_stmt;

typedef struct CodedInputData {
	id _field1;
	char* _field2;
	int _field3;
	int _field4;
	int _field5;
	int _field6;
	int _field7;
	int _field8;
	int _field9;
	int _field10;
} CodedInputData;

typedef struct PBEncodeItem* PBEncodeItemRef;

typedef struct _Vector_impl {
	PBEncodeItemRef _field1;
	PBEncodeItemRef _field2;
	PBEncodeItemRef _field3;
} Vector_impl;

template<>
struct vector<PBEncodeItem, std::allocator<PBEncodeItem> > {
	Vector_impl _field1;
};

typedef struct GifDecoder GifDecoder;

typedef struct _MxImage MxImage;

typedef struct GifExtInfo {
	int _field1;
	int _field2;
	int _field3;
} GifExtInfo;

typedef struct GifFrameRect {
	int _field1;
	int _field2;
	int _field3;
	int _field4;
} GifFrameRect;

typedef struct MxGifImage {
	GifDecoder* _field1;
	int _field2;
	MxImage* _field3;
	MxImage* _field4;
	int _field5;
	GifExtInfo _field6;
	int _field7;
	GifFrameRect _field8;
	unsigned long _field9;
} MxGifImage;

typedef struct TccStr8 {
	unsigned _field1;
	unsigned _field2;
	char* _field3;
} TccStr8;

typedef struct TccLoginUtil {
	/*function-pointer*/ void** _field1;
	TccStr8 _field2;
	TccStr8 _field3;
	unsigned _field4;
	char* _field5;
	char* _field6;
	char* _field7;
	char* _field8;
	TccStr8 _field9;
	TccStr8 _field10;
} TccLoginUtil;

typedef struct sockaddr_dl {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	unsigned char _field4;
	unsigned char _field5;
	unsigned char _field6;
	unsigned char _field7;
	BOOL _field8[12];
} sockaddr_dl;

typedef struct TccSyncmlInfo {
	TccStr8 _field1;
	TccStr8 _field2;
	TccStr8 _field3;
	TccStr8 _field4;
	TccStr8 _field5;
	TccStr8 _field6;
	int _field7;
	int _field8;
	int _field9;
	int _field10;
} TccSyncmlInfo;

typedef struct TccSyncmlDbCtrl TccSyncmlDbCtrl;

typedef struct TccSyncObject {
	TccStr8 _field1;
	TccStr8 _field2;
	TccStr8 _field3;
	TccStr8 _field4;
	int _field5;
	int _field6;
	int _field7;
	unsigned _field8;
} TccSyncObject;

typedef struct TccWxStr {
	char* _field1;
	int _field2;
} TccWxStr;

typedef struct TccWxTag {
	unsigned short _field1;
	TccWxStr _field2;
} TccWxTag;

typedef struct Node Node;

template<>
struct TccDeque<TccSyncmlAction *, TccPtrTraits<TccSyncmlAction *> > {
	Node* _field1;
	Node* _field2;
	int _field3;
};

typedef struct TccSyncmlStanza {
	unsigned _field1;
	TccWxStr _field2;
	TccWxStr _field3;
	TccWxStr _field4;
	TccWxStr _field5;
	TccWxStr _field6;
	TccWxStr _field7;
	TccWxStr _field8;
	TccWxStr _field9;
	TccWxStr _field10;
	int _field11;
	int _field12;
	int _field13;
	int _field14;
	int _field15;
	unsigned _field16;
	unsigned _field17;
	TccDeque<TccSyncmlAction *, TccPtrTraits<TccSyncmlAction *> > _field18;
} TccSyncmlStanza;

typedef struct TccSyncmlAction TccSyncmlAction;

typedef struct TccSyncmlParser {
	/*function-pointer*/ void** _field1;
	char* _field2;
	int _field3;
	int _field4;
	unsigned char _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	TccWxStr _field9;
	TccWxTag _field10[12];
	short _field11;
	unsigned char _field12;
	int _field13;
	int _field14;
	int _field15[12];
	TccSyncmlStanza _field16;
	TccSyncmlAction* _field17;
} TccSyncmlParser;

typedef struct TccSyncmlEncode {
	unsigned _field1;
	unsigned _field2;
	char* _field3;
} TccSyncmlEncode;

typedef struct TccRemoteSyncOberser TccRemoteSyncOberser;

template<>
struct TccVector<TccSyncmlAction *, TccSyncmlAction> {
	TccSyncmlAction** _field1;
	int _field2;
	int _field3;
};

template<>
struct TccVector<int, TccTraits<int> > {
	int* _field1;
	int _field2;
	int _field3;
};

template<>
struct TccVector<unsigned int, TccTraits<unsigned int> > {
	unsigned* _field1;
	int _field2;
	int _field3;
};

template<>
struct TccVector<TccStr8, TccTraits<TccStr8> > {
	TccStr8* _field1;
	int _field2;
	int _field3;
};

typedef struct TccRemoteSync {
	TccSyncmlInfo _field1;
	TccSyncmlDbCtrl* _field2[10];
	int _field3;
	TccSyncObject _field4;
	int _field5;
	TccSyncmlParser _field6;
	TccSyncmlEncode _field7;
	TccStr8 _field8;
	TccSyncmlStanza _field9;
	int _field10;
	int _field11;
	int _field12;
	bool _field13;
	TccRemoteSyncOberser* _field14;
	unsigned _field15;
	int _field16;
	TccVector<TccSyncmlAction *, TccSyncmlAction> _field17;
	TccVector<TccSyncmlAction *, TccSyncmlAction> _field18;
	TccVector<TccSyncmlAction *, TccSyncmlAction> _field19;
	TccVector<int, TccTraits<int> > _field20;
	TccVector<unsigned int, TccTraits<unsigned int> > _field21;
	TccVector<TccStr8, TccTraits<TccStr8> > _field22;
} TccRemoteSync;

typedef struct TccSyncDbAdapter {
	/*function-pointer*/ void** _field1;
} TccSyncDbAdapter;

typedef struct SyncObserver {
	/*function-pointer*/ void** _field1;
	id _field2;
} SyncObserver;

template<>
struct TccTreeMap<TccSyncDbAdapter::EDbAdapterType, TccSyncCount *, TccTraits<TccSyncDbAdapter::EDbAdapterType>, TccPtrTraits<TccSyncCount *> > {
	Node* _field1;
	int _field2;
};

typedef struct TccRemoteSyncCheckUtil {
	/*function-pointer*/ void** _field1;
	TccStr8 _field2;
	TccStr8 _field3;
	unsigned _field4;
	TccTreeMap<TccSyncDbAdapter::EDbAdapterType, TccSyncCount *, TccTraits<TccSyncDbAdapter::EDbAdapterType>, TccPtrTraits<TccSyncCount *> > _field5;
} TccRemoteSyncCheckUtil;

typedef struct __darwin_sigaltstack {
	void* ss_sp;
	unsigned ss_size;
	int ss_flags;
} darwin_sigaltstack;

typedef struct PLCrashReporterCallbacks {
	unsigned short _field1;
	void* _field2;
	/*function-pointer*/ void* _field3;
} PLCrashReporterCallbacks;

typedef struct _Plcrash__CrashReport {
	ProtobufCMessage _field1;
	Plcrash__CrashReport__SystemInfo* _field2;
	Plcrash__CrashReport__ApplicationInfo* _field3;
	unsigned _field4;
	Plcrash__CrashReport__Thread** _field5;
	unsigned _field6;
	Plcrash__CrashReport__BinaryImage** _field7;
	Plcrash__CrashReport__Exception* _field8;
	Plcrash__CrashReport__Signal* _field9;
	Plcrash__CrashReport__ProcessInfo* _field10;
	Plcrash__CrashReport__MachineInfo* _field11;
	Plcrash__CrashReport__ReportInfo* _field12;
} Plcrash__CrashReport;

typedef struct _PLCrashReportDecoder {
	Plcrash__CrashReport* _field1;
} PLCrashReportDecoder;

typedef struct _ProtobufCMessageDescriptor ProtobufCMessageDescriptor;

typedef struct _ProtobufCMessageUnknownField ProtobufCMessageUnknownField;

typedef struct _ProtobufCMessage {
	ProtobufCMessageDescriptor* _field1;
	unsigned _field2;
	ProtobufCMessageUnknownField* _field3;
} ProtobufCMessage;

typedef struct _Plcrash__CrashReport__SystemInfo {
	ProtobufCMessage _field1;
	int _field2;
	int _field3;
	char* _field4;
	int _field5;
	long long _field6;
	char* _field7;
} Plcrash__CrashReport__SystemInfo;

typedef struct _Plcrash__CrashReport__ApplicationInfo {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
} Plcrash__CrashReport__ApplicationInfo;

typedef struct _Plcrash__CrashReport__Thread Plcrash__CrashReport__Thread;

typedef struct _Plcrash__CrashReport__BinaryImage Plcrash__CrashReport__BinaryImage;

typedef struct _Plcrash__CrashReport__Exception {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
	unsigned _field4;
	Plcrash__CrashReport__Thread__StackFrame** _field5;
} Plcrash__CrashReport__Exception;

typedef struct _Plcrash__CrashReport__Signal {
	ProtobufCMessage _field1;
	char* _field2;
	char* _field3;
	unsigned long long _field4;
} Plcrash__CrashReport__Signal;

typedef struct _Plcrash__CrashReport__ProcessInfo {
	ProtobufCMessage _field1;
	char* _field2;
	unsigned _field3;
	char* _field4;
	char* _field5;
	unsigned _field6;
	int _field7;
} Plcrash__CrashReport__ProcessInfo;

typedef struct _Plcrash__CrashReport__MachineInfo {
	ProtobufCMessage _field1;
	char* _field2;
	Plcrash__CrashReport__Processor* _field3;
	unsigned _field4;
	unsigned _field5;
} Plcrash__CrashReport__MachineInfo;

typedef struct _Plcrash__CrashReport__ReportInfo Plcrash__CrashReport__ReportInfo;

typedef struct _Plcrash__CrashReport__Processor {
	ProtobufCMessage _field1;
	int _field2;
	int _field3;
	unsigned long long _field4;
	unsigned long long _field5;
} Plcrash__CrashReport__Processor;

typedef struct _Plcrash__CrashReport__Thread__StackFrame {
	ProtobufCMessage _field1;
	unsigned long long _field2;
} Plcrash__CrashReport__Thread__StackFrame;

typedef union BCPoint {
	double _field1[2];
	XXStruct_zYrK5D _field2;
} BCPoint;

typedef union BCTrapezoid {
	BCPoint _field1[4];
	struct {
		BCPoint _field1;
		BCPoint _field2;
		BCPoint _field3;
		BCPoint _field4;
	} _field2;
} BCTrapezoid;

typedef struct BCSegment {
	BCPoint _field1;
	BCPoint _field2;
} BCSegment;

typedef struct {
	id _field1;
	unsigned short _field2;
} XXStruct_c19r_A;

@protocol NSObject
-(id)description;
-(unsigned)retainCount;
-(id)autorelease;
-(oneway void)release;
-(id)retain;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)isMemberOfClass:(Class)aClass;
-(BOOL)isKindOfClass:(Class)aClass;
-(BOOL)isProxy;
-(id)performSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(id)performSelector:(SEL)selector withObject:(id)object;
-(id)performSelector:(SEL)selector;
-(NSZone*)zone;
-(id)self;
-(Class)class;
-(Class)superclass;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
@optional
-(id)debugDescription;
@end

@protocol QZoneLoginStatusDelegate <NSObject>
-(void)onQZoneUrl:(id)url;
@end

@protocol MFMessageComposeViewControllerDelegate <NSObject>
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
@end

@protocol UIActionSheetDelegate <NSObject>
@optional
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

@protocol UIAlertViewDelegate <NSObject>
@optional
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@protocol IGroupMgrExt
@optional
-(void)OnChatRoomContactUpdateOK:(id)ok;
-(void)OnQuitPaidChatRoom:(id)room rspCode:(int)code;
-(void)OnUnreadVerifyMsgCountChange:(id)change;
-(void)OnReadPresentMsg:(id)msg;
-(void)onGetChatRoomPresentList:(id)list fotChatRoom:(id)room;
-(void)OnReceiveChatRoomPresentMsg:(id)msg;
-(void)OnReceiveChatRoomRemindMsg:(id)msg;
-(void)OnReceiveChatRoomVerifyMsg:(id)msg;
-(void)OnChatRoomUpgrade:(id)upgrade rspCode:(int)code restQuota:(unsigned long)quota maxCount:(unsigned long)count;
-(void)OnVerifyChatRoomMember:(id)member rspCode:(int)code;
-(void)OnPersonalInfoVerified:(int)verified;
-(void)OnSetChatRoomVerifyStutas:(id)stutas isOpen:(BOOL)open rspCode:(int)code;
-(void)OnGotChatRoomUpgradeInfo:(id)info ofChatRoom:(id)chatRoom rspCode:(int)code;
-(void)OnGetChatRoomUpgradeStatus:(unsigned long)status phoneQuota:(unsigned long)quota payQuota:(unsigned long)quota3 maxCount:(unsigned long)count;
-(void)OnChangeMemberVerifyStatus:(id)status;
-(void)OnChangeMemberShowDisplayName:(id)name;
-(void)OnChangeMemberDisplayName:(id)name;
-(void)OnDelGroupMember:(id)member withResult:(unsigned long)result memberList:(id)list;
-(void)OnQuitGroup:(id)group;
-(void)OnChangeGroup:(id)group;
-(void)OnAddGroupMember:(id)member withStatus:(unsigned long)status memberList:(id)list contactList:(id)list4;
-(void)OnCreateGroup:(id)group withStatus:(long)status memberList:(id)list;
@end

@protocol contactVerifyLogicDelegate <NSObject>
@optional
-(void)canNotFollowContact:(id)contact;
-(float)getTextFieldTopMarginVerifyLogic:(id)logic;
-(id)getAlertMessageForVerifyLogic:(id)verifyLogic;
-(id)getAlertTitleForVerifyLogic:(id)verifyLogic;
-(void)contactVerifyOk:(id)ok opCode:(unsigned long)code;
-(void)onContactVerifyFail;
@end

@protocol contactInfoDelegate <NSObject>
@optional
-(void)deleteAllMsg;
-(void)ContactsViewReloadData;
-(void)contactInfoReturn;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
@end

@protocol IContactMgrExt
@optional
-(void)onModifyContactDraft:(id)draft;
-(void)OnChangeNotifyStatus:(id)status withStatus:(BOOL)status2;
-(void)onContactListUpdate:(unsigned long)update;
-(void)onSyncSXContactEnd;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)onModifyContactHeadImage:(id)image;
@end

@protocol UIScrollViewDelegate <NSObject>
@optional
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willDeselectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didUnhighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didHighlightRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForFooterInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
@end

@protocol UITableViewDataSource <NSObject>
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
@optional
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
@end

@protocol MessageObserverDelegate
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
@end

@protocol PBMessageObserverDelegate
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
@end

@protocol UITextFieldDelegate <NSObject>
@optional
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

@protocol SelectContactsViewControllerDelegate
-(void)onSelectContactReturn:(id)aReturn;
-(BOOL)onFilterContactCandidate:(id)candidate;
@end

@protocol MMWebImageViewDelegate <NSObject>
@optional
-(void)onLoadImageOK;
@end

@protocol MMService <NSObject>
@optional
-(void)onServiceClearData;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterForeground;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)onServiceInit;
@end

@protocol IBottleSessionExt
@optional
-(void)OnEndLoadBottleContact;
-(void)OnBeginLoadBottleContact;
-(void)BottlePluginChanged:(BOOL)changed;
-(void)BottleTotalUnreadCountChanged;
-(void)BottleSessionChanged:(id)changed;
-(void)BottleNeedReload;
@end

@protocol WCGroupMgrExt <NSObject>
@optional
-(void)onWCGroupSetMemberToGroupsReturn:(BOOL)groupsReturn username:(id)username groupIDs:(id)ids;
-(void)onWCGroupModMemberReturn:(BOOL)aReturn group:(id)group;
-(void)onWCGroupRemoveMemberReturn:(BOOL)aReturn group:(id)group;
-(void)onWCGroupAddMemberReturn:(BOOL)aReturn group:(id)group;
-(void)onWCDeleteGroupReturn:(BOOL)aReturn groupID:(id)anId;
-(void)onWCChangeGroupNameReturn:(BOOL)aReturn groupID:(id)anId;
-(void)onWCCreateGroupReturn:(BOOL)aReturn group:(id)group;
-(void)onWCGroupUpdatedReturn:(BOOL)aReturn;
-(void)onWCGroupRecommendUpdated;
-(void)onWCGroupUpdated;
@end

@protocol WCFacadeExt <WCGroupMgrExt>
@optional
-(void)onHomepageTotalCountChanged:(int)changed;
-(void)onHomepageUpdate:(int)update withAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(void)onCancelDownloadSuccess:(id)success downloadType:(int)type;
-(void)onDownloadFinish:(id)finish downloadType:(int)type;
-(void)onDownloadMediaProcessChange:(id)change downloadType:(int)type current:(int)current total:(int)total;
-(void)onWCPostPrivacyChanged;
-(void)onNotificationShowSettingChanged;
-(void)onDatabaseReloaded;
-(void)onNetworkActivityStatusChanged;
-(void)onBGStorageUpdated;
-(void)onWCBackgroundChanged;
-(void)onDataItemExposeFinisehd:(int)finisehd dataItem:(id)item;
-(void)onSetDataItemPublicFinished:(int)finished dataItemID:(id)anId;
-(void)onSetDataItemPrivateFinished:(int)finished dataItemID:(id)anId;
-(void)onCommentItemDeleteFinished:(int)finished commentItemID:(id)anId dataItemID:(id)anId3;
-(void)onDataItemDeleteFinished:(int)finished dataItemID:(id)anId;
-(void)onUpdateDataItemDetailFinisehd:(int)finisehd dataItem:(id)item;
-(void)onMessageUnReadCountChanged;
-(void)onReveiceWCMessage:(id)message;
-(void)onLatestWCObjectChanged:(id)changed;
-(void)onNoMoreTimelineData;
-(void)onDataChangedWithAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
@end

@protocol FriendAsistSessionExt
@optional
-(void)onFriendAssistRelpyMsg:(id)msg;
-(void)onFriendAssistAddMsg:(id)msg;
-(void)onFriendAssistClearMsg:(id)msg;
-(void)onFriendAssistUnreadCountChanged;
@end

@protocol ISettingExtChange
@optional
-(void)onSettingExtChanged:(int)changed;
@end

@protocol ShakeMgrExt
@optional
-(void)onShakeMusicStorageChanged;
-(void)OnShakeShareCountChanged;
-(void)onShakePageStorageChanged;
-(void)onShakePeopleStorageChanged;
-(void)onShakeStatusChanged;
@end

@protocol IGameFacadeExt
@optional
-(void)onGetUserRankListFail:(unsigned long)fail appID:(id)anId;
-(void)onGetUserRankListSuccess:(id)success count:(unsigned)count hasReportScore:(BOOL)score;
-(void)onGotBizAppInfo;
-(void)onUpdateGamePersonalInfoList;
-(void)onGotGameIntroList:(id)list errType:(int)type;
-(void)onGotRcAppList:(unsigned long)list rcAppList:(id)list2 adAppList:(id)list3 isInternalDownload:(BOOL)download errType:(int)type;
-(void)onGameNewAppCountChanged;
-(void)onGameMessageUnReadCountChanged;
@end

@protocol EditBottleProfileDelegate <NSObject>
@optional
-(void)goToSandyBeach;
-(void)SaveImg:(id)img;
@end

@protocol WCTimeLineViewControllerDelegate <NSObject>
-(void)onTimeLineViewReturn;
-(void)onMarkWCObjectAsRead:(id)read;
@end

@protocol BrandServiceIntroViewControllerDelegate
-(void)onBrandServicIntroOK:(id)ok;
@end

@protocol settingMyAccountExtInfoDelegate <NSObject>
@optional
-(void)SettingMyAccountExtInfoExit;
@end

@protocol ShakeViewDelegate
-(void)OnShakeVCDealloc;
@end

@protocol inviteFriendDelegate
-(void)inviteFriendReturn;
@end

@protocol MFMailComposeViewControllerDelegate <NSObject>
@optional
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

@protocol IAddressBookFriendMgrExt
-(void)newAddressBookFriendArrived;
@end

@protocol VerifyPhoneDelegate <NSObject>
@optional
-(void)loginByPhoneVerifiedWithUserName:(id)userName ticket:(id)ticket;
-(void)loginByPhoneVerifiedWithUserName:(id)userName pwd:(id)pwd;
-(void)bindPhoneReturn;
@end

@protocol ContactInfoViewControllerDelegate <NSObject>
@optional
-(void)onUpdateContact:(id)contact;
-(void)onRemoveContact;
-(void)onAddContact:(id)contact;
-(void)onAddContact;
@end

@protocol UIBarPositioningDelegate <NSObject>
@optional
-(int)positionForBar:(id)bar;
@end

@protocol UISearchBarDelegate <UIBarPositioningDelegate>
@optional
-(void)searchBar:(id)bar selectedScopeButtonIndexDidChange:(int)selectedScopeButtonIndex;
-(void)searchBarResultsListButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarBookmarkButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
@end

@protocol IScanAppSpaceSizeServiceExt <NSObject>
@optional
-(void)onScanTaskFinished;
-(void)onScanTaskUpdateProgress;
@end

@protocol IMMQRCodeExt <NSObject>
@optional
-(void)onDownloadQRCodeFinish:(id)finish;
@end

@protocol scrollViewDelegate <NSObject>
@optional
-(void)touchesCancelled_ScrollView:(id)view withEvent:(id)event;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)touchesMoved_ScrollView:(id)view withEvent:(id)event;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
@end

@protocol IMMFacebookMgrExt <NSObject>
@optional
-(void)onFBCheckPasswordFailed;
-(void)onFBCheckPasswordFinished:(BOOL)finished;
-(void)onGetPhotoByIDFailed:(id)failed error:(id)error;
-(void)facebookCheckAccessTokenValidFinished:(BOOL)finished;
-(void)onGetPhotoByIDFinish:(id)finish;
-(void)onGetPhotosFinish:(id)finish;
-(void)onGetMyAlbumsFinish:(id)finish;
-(void)onFBAccountNotMatch:(unsigned long)match;
-(void)onExtendTokenFinish:(BOOL)finish;
-(void)onDownloadFacebookFriendFinish:(unsigned long)finish Message:(id)message;
-(void)onUnBindFacebookFinish:(unsigned long)finish;
-(void)onBindFacebookFinish:(unsigned long)finish;
-(void)onLoginFacebookFinished:(unsigned long)finished isAutoReg:(BOOL)reg Title:(id)title Message:(id)message;
-(void)onLoginFacebookBegan:(id)began;
-(void)onFBDidNotLogin:(BOOL)onFB;
-(void)onFBDidLogin;
@end

@protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(BOOL)textView:(id)view shouldInteractWithTextAttachment:(id)textAttachment inRange:(NSRange)range;
-(BOOL)textView:(id)view shouldInteractWithURL:(id)url inRange:(NSRange)range;
-(void)textViewDidChangeSelection:(id)textView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
@end

@protocol imageViewDelegate <NSObject>
@optional
-(void)touchesCancelled_ImageView:(id)view withEvent:(id)event;
-(void)touchesEnded_ImageView:(id)view withEvent:(id)event;
-(void)touchesMoved_ImageView:(id)view withEvent:(id)event;
-(void)touchesBegan_ImageView:(id)view withEvent:(id)event;
@end

@protocol IAudioFuckBugExt
@optional
-(void)CheckIfButtonPressing:(id)pressing Status:(unsigned*)status;
@end

@protocol IAudioSenderExt
@optional
-(void)OnSendError:(id)error ErrNo:(int)no;
-(void)OnEndRecording:(unsigned long)recording;
-(void)OnBeginRecording:(unsigned long)recording ErrNo:(int)no;
-(void)OnLevelMeter:(unsigned long)meter Peak:(float)peak;
@end

@protocol IAudioReceiverExt
@optional
-(void)OnEarTip;
-(void)OnEndPlaying:(unsigned long)playing isForceStop:(BOOL)stop;
-(void)OnBeginPlaying:(unsigned long)playing ErrNo:(int)no;
-(void)OnLevelMeter:(unsigned long)meter Peak:(float)peak;
@end

@protocol IBottleMgrExt
@optional
-(void)OnUpdateBottle:(unsigned long)bottle;
-(void)OnDeleteSessionByBottle:(id)bottle;
-(void)OnBottleBan:(unsigned long)ban FishNetNum:(unsigned long)num;
-(void)OnGetCountOK:(unsigned long)ok FishNetNum:(unsigned long)num;
-(void)OnGetCountFail;
-(void)OnFishNumChanged:(unsigned long)changed;
-(void)OnThrowNumChanged:(unsigned long)changed;
-(void)OnThrowBack:(unsigned long)back;
-(void)OnThrowBackFail;
-(void)OnFishBottleFail:(unsigned long)fail;
-(void)OnFishBottleOK:(unsigned long)ok fishCount:(unsigned long)count msgType:(unsigned long)type userName:(id)name bottle:(id)bottle;
-(void)OnOpenBottleFail;
-(void)OnOpenBottleOK:(id)ok Contact:(id)contact MsgWrap:(id)wrap;
-(void)OnThrowBottleFail:(unsigned long)fail;
-(void)OnThrowBottleOK:(unsigned long)ok throwCount:(unsigned long)count distance:(unsigned long)distance;
@end

@protocol BottleTipViewDelegate
@optional
-(void)BottleTipAnimationFinish:(id)finish;
-(void)BottleTipPressButton:(id)button withButtonTitle:(id)buttonTitle;
@end

@protocol BottleAnimationDelegate
@optional
-(id)BottleAnimationGetBrandUserName:(id)name;
-(id)BottleAnimationGetBrandHeadUrl:(id)url;
-(void)BottleAnimationClickBottle:(id)bottle;
-(void)BottleAnimationClickStar:(id)star;
-(void)BottleAnimationFishFinish:(id)finish;
-(void)BottleAnimationThrowFinish:(id)finish;
@end

@protocol ISysCallCheckExt
@optional
-(void)InputIsAvailableChanged:(BOOL)changed;
-(void)EndInterruption;
-(void)BeginInterruption;
@end

@protocol IRecordPermissionCheckExt <NSObject>
@optional
-(void)OnRecordDenied;
-(void)OnRecordPermissioned;
@end

@protocol CanvasManagerDelegate
@optional
-(id)NavigationController;
-(void)enableTouch;
-(void)disableTouch;
-(void)unSpotLightCanvasAnimated:(BOOL)animated;
-(void)spotLightCanvasAnimated:(BOOL)animated;
-(void)unDarkenCanvasAnimated:(BOOL)animated;
-(void)darkenCanvasAnimated:(BOOL)animated;
-(unsigned long)canvasHeightForDraw;
-(void)showCanvasBottomBarAnimated:(BOOL)animated;
-(void)hideCanvasBottomBarAnimated:(BOOL)animated;
-(void)showCanvasTopBarAnimated:(BOOL)animated;
-(void)hideCanvasTopBarAnimated:(BOOL)animated;
@end

@protocol MMPickerViewDelegate <NSObject>
@optional
-(void)MMPickerViewDidChooseRowTitle:(id)mmpickerView atSessionTitle:(id)sessionTitle;
-(void)MMPickerViewDidChooseRow:(int)mmpickerView atSession:(int)session;
-(void)MMPickerViewDidCancel;
@end

@protocol MMImagePickerManagerDelegate <NSObject>
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
@optional
-(void)MMImagePickerManager:(id)manager didFinishPickingVideoWithInfo:(id)info;
@end

@protocol MMRegionPickerViewControllerDelegate <NSObject>
-(void)MMRegionPickerDidChoosRegion:(id)mmregionPicker;
@end

@protocol settingModifySignDelegate
-(void)saveNewSign:(id)sign;
@end

@protocol IMMNewSessionMgrExt <NSObject>
@optional
-(void)onSessionUpgrade;
-(void)getComparer:(id*)comparer ForSelector:(int)selector;
-(void)onDeleteSessionOfUser:(id)user;
-(void)isUser:(id)user hasSpecalSessionInfo:(id*)info;
-(void)isMessage:(id)message Handled:(BOOL*)handled;
-(void)isUser:(id)user Handled:(BOOL*)handled;
-(void)onSessionTotalUnreadCountChange:(unsigned long)change;
-(void)onDeleteSession:(unsigned long)session withUser:(id)user;
-(void)onActiveUsrNameChange:(id)change curUsrName:(id)name;
-(void)onNewMsgArriving:(id)arriving NotifyFlag:(int)flag;
-(void)onSessionChanged:(id)changed;
-(void)onNeedReload;
@end

@protocol FloatBottleContentLogicDelegate
-(void)showTips:(id)tips;
@end

@protocol MMKernelExt <NSObject>
@optional
-(void)onAuthOKWithVersionChangeFrom:(unsigned long)from to:(unsigned long)to;
-(void)onInitOK;
-(void)onPostQuit;
-(void)onPreQuit;
-(void)onKickQuit;
-(void)onGetUpdateInfoOk;
-(void)onAuthOKWithAuthInfo:(id)authInfo;
-(void)onAuthOK;
@end

@protocol MMUIViewControllerDelegate <NSObject>
-(id)getViewController;
@end

@protocol WCAccountBindPhoneControlLogicDelegate <NSObject, VerifyPhoneDelegate>
-(void)onWCAccountBindPhoneControlLogicStop;
@end

@protocol UIWebViewDelegate <NSObject>
@optional
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@protocol INetworkStatusMgrExt
@optional
-(void)OnGetOOBData;
-(void)onNetworkStatusChange:(unsigned long)change;
@end

@protocol IWXPresentExt <NSObject>
@optional
-(void)OnRoomMemberChange:(id)change withNewMemberList:(id)newMemberList;
@end

@protocol mainFrameLogicControllerDelegate <NSObject>
@optional
-(void)popToMainFrameAnimated:(BOOL)mainFrameAnimated;
-(BOOL)isStatusBarHidden;
-(void)updateStatusBar;
-(void)stopIniting:(unsigned long)initing;
-(void)percentIniting:(id)initing;
-(void)changeNetworkStatus:(unsigned long)status;
-(void)updateUnReadCount;
-(void)deleteSessionCell:(unsigned long)cell withUser:(id)user;
-(void)selectCellForName:(id)name;
-(void)cancelSelectedCell;
-(void)updateAllItemTimeLabel;
-(void)updateSession:(id)session;
-(void)reloadSessions;
@end

@protocol IVOIPUILogicMgrExt <NSObject>
@optional
-(void)onVideoVoipViewDisappear;
-(void)onVideoVoipViewDidAppear:(id)onVideoVoipView;
@end

@protocol IAutoSetRemarkExt <NSObject>
@optional
-(void)onSetStrangerRemark:(id)remark;
@end

@protocol CreateChatLogicDelegate <NSObject>
-(void)onCreateChatContactReturn:(id)aReturn;
@end

@protocol SessionDelegate
-(BOOL)zeroNewArrivalCount;
-(unsigned long)getNewArrivalCount;
-(id)getNewArrivalList;
-(void)unRegisterExt;
-(void)registerExt;
-(unsigned long)GetTotalUnreadCount;
-(void)DeleteSession:(unsigned long)session;
-(unsigned long)GetCount;
-(void)syncAllContact;
@end

@protocol IMainFrameCellExt <NSObject>
@optional
-(void)updateMessageLabelForItemView:(id)itemView;
-(void)setIsShowChatNotPushView:(id)view withIsShow:(BOOL)isShow;
-(void)setIsShowTime:(id)time withIsShow:(BOOL)isShow;
-(void)updateCellTime;
-(void)updateCellContent:(id)content withContact:(id)contact;
@end

@protocol UISearchDisplayDelegate <NSObject>
@optional
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
@end

@protocol MMVoiceSearchDelegate <NSObject>
-(void)pushVoiceSearchResultsViewController:(id)controller Animation:(BOOL)animation;
-(BOOL)handleVoiceSearchResults:(id)results;
@optional
-(void)OnVoiceSearchButtonDown;
-(void)voiceSearchBackFromResultView;
-(id)cellForHandleVoiceSearchViewTable:(id)handleVoiceSearchViewTable index:(id)index;
-(void)displayControllerSetActive:(BOOL)active animated:(BOOL)animated;
@end

@protocol MMSearchBarDelegate <NSObject>
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
@optional
-(void)didScrollViewScroll:(id)scroll;
-(BOOL)shouldShowTabbarAfterSearchBarBecomeUnActive;
-(void)SearchBarShouldEnd;
-(void)SearchBarBecomeUnActive;
-(void)SearchBarBecomeActive;
-(void)mmSearchDisplayControllerDidEndSearch;
-(void)mmSearchDisplayControllerWillEndSearch;
-(void)mmSearchBarDidEnd;
-(void)mmSearchBarTextDidChange:(id)mmSearchBarText;
-(void)mmsearchBarTextDidBeginEditing:(id)mmsearchBarText;
-(void)mmsearchBarSearchButtonClicked:(id)clicked;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
@end

@protocol VoiceSearchMutilLevelViewDelegate <NSObject>
-(void)backToPreView;
-(unsigned long)getVoiceID;
-(void)voiceSearchMultilLevelTableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)voiceSearchMultilLevelTableView:(id)view andCell:(id)cell cellForRowAtIndexPath:(id)indexPath;
-(float)voiceSearchMultilLevelTableView:(id)view heightForRowAtIndexPath:(id)indexPath;
@end

@protocol MMVoiceSearchBarDelegate <NSObject>
-(void)MMVoiceSearchBarCancelButtonClicked:(id)clicked;
-(void)MMVoiceSearchBarSearchButtonClicked:(id)clicked;
-(void)MMVoiceSearchBar:(id)bar textDidChange:(id)text;
-(BOOL)MMVoiceSearchBarShouldBeginEditing:(id)mmvoiceSearchBar;
@end

@protocol NewDeviceLoginViewControllerDelegate <NSObject>
@optional
-(void)newDeviceLoginBack;
-(void)newDeviceLoginVerifyOK:(id)ok ticket:(id)ticket;
@end

@protocol SetPassowrdViewControllerDelegate <NSObject>
@optional
-(void)setPasswordOK;
@end

@protocol UIGestureRecognizerDelegate <NSObject>
@optional
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
@end

@protocol IAcctStorageMgrExt <NSObject>
@optional
-(void)onSettingChange;
@end

@protocol UINavigationControllerDelegate <NSObject>
@optional
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(id)navigationController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)navigationControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)navigationControllerSupportedInterfaceOrientations:(id)orientations;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@protocol UIImagePickerControllerDelegate <NSObject>
@optional
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
@end

@protocol ImageBrowseDelegate <NSObject>
@optional
-(void)didSelectImage:(id)image Data:(id)data Finish:(BOOL)finish fromImagePicker:(id)imagePicker;
-(void)didSelectImage:(id)image Data:(id)data fromImagePicker:(id)imagePicker;
-(void)didSelectImage:(id)image fromImagePicker:(id)imagePicker;
-(void)downloadFailInImageBrowse;
@end

@protocol ImagePreviewDelegate <NSObject>
@optional
-(void)downloadFailInImagePreview;
-(void)returnFromImagePreview:(BOOL)imagePreview andPicker:(id)picker andImage:(id)image;
-(void)selectFromImagePreview:(id)imagePreview andImage:(id)image andData:(id)data;
@end

@protocol IAppMsgPathMgr <NSObject>
@optional
+(void)GetPathOfAppRemindAttach:(id)appRemindAttach retStrPath:(id*)path;
+(void)GetPathOfAppThumb:(id)appThumb LocalID:(unsigned long)anId retStrPath:(id*)path;
+(void)GetPathOfAppDataTemp:(id)appDataTemp LocalID:(unsigned long)anId retStrPath:(id*)path;
+(void)GetPathOfAppDataTemp:(id)appDataTemp LocalID:(unsigned long)anId AttachId:(id)anId3 retStrPath:(id*)path;
+(void)GetPathOfAppDataByUserName:(id)appDataByUserName andMessageWrap:(id)wrap retStrPath:(id*)path;
+(void)GetPathOfAppDataByUserName:(id)appDataByUserName andMessageWrap:(id)wrap andAttachId:(id)anId andAttachFileExt:(id)ext retStrPath:(id*)path;
+(void)GetPathOfAppData:(id)appData LocalID:(unsigned long)anId FileExt:(id)ext retStrPath:(id*)path;
+(void)GetPathOfAppDir:(id)appDir retStrPath:(id*)path;
@end

@protocol IRemoteControlCheckExt
@optional
-(void)iRemoteControlCheckShouldPrevTrack;
-(void)iRemoteControlCheckShouldNextTrack;
-(void)iRemoteControlCheckShouldStop;
-(void)iRemoteControlCheckShouldPause;
-(void)iRemoteControlCheckShouldPlay;
-(void)iRemoteControlCheckShouldFinishRecord;
-(void)iRemoteControlCheckShouldBeginRecord;
-(void)iRemoteControlCheckPluginOff;
-(void)iRemoteControlCheckPluginOn;
@end

@protocol IMsgExt
@optional
-(void)OnMsgDownloadAppAttachExpiredFail:(id)fail MsgWrap:(id)wrap;
-(void)OnMsgDownloadVideoExpiredFail:(id)fail MsgWrap:(id)wrap;
-(void)OnUpdateVideoStatus:(id)status MsgWrap:(id)wrap;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)OnMsgDownloadThumbFail:(id)fail MsgWrap:(id)wrap;
-(void)OnMsgDownloadThumbOK:(id)ok MsgWrap:(id)wrap;
-(void)OnMsgNotAddDBSession:(id)session MsgList:(id)list;
-(void)OnShowPush:(id)push;
-(void)OnAddMsgForSpecialSession:(id)specialSession MsgList:(id)list;
-(void)OnMsgNotAddDBNotify:(id)notify MsgWrap:(id)wrap;
-(void)OnAddMsgListForSession:(id)session NotifyUsrName:(id)name;
-(void)OnUnReadCountChange:(id)change;
-(void)OnDelMsg:(id)msg DelAll:(BOOL)all;
-(void)OnDelMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnDelMsg:(id)msg;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnPreAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnChangeMsg:(id)msg OpCode:(unsigned long)code;
@end

@protocol IUploadVoiceExt <NSObject>
@optional
-(void)OnUploadVoiceOK:(id)ok;
@end

@protocol ILinkEventExt <NSObject>
@optional
-(void)onTextLongPressed:(id)pressed withRect:(CGRect)rect withView:(id)view;
-(void)onPhoneLongPressed:(id)pressed withRect:(CGRect)rect withView:(id)view;
-(void)onLinkLongPressed:(id)pressed withRect:(CGRect)rect withView:(id)view;
-(void)onTextLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onPhoneLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onPhoneClicked:(id)clicked withRect:(CGRect)rect;
-(void)onLinkLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onLinkClicked:(id)clicked backupUrl:(id)url withRect:(CGRect)rect;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
@end

@protocol MMWebViewDelegate <NSObject>
@optional
-(void)onWebViewDelete:(id)aDelete;
-(void)onWebViewDidRotateFromInterfaceOrientation:(int)onWebView;
-(void)onWebViewWillRotateToInterfaceOrientation:(int)onWebView;
-(void)onWebViewDidFinishLoad:(id)onWebView;
-(void)onWebViewDidStartLoad:(id)onWebView;
-(id)webViewFailToLoad:(id)load;
-(void)webViewReturn:(id)aReturn;
@end

@protocol contactsDelegate <NSObject>
-(void)contactsReturn:(BOOL)aReturn contact:(id)contact;
@optional
-(void)contactsReturn:(id)aReturn;
@end

@protocol ImageControllerDelegate <NSObject>
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendMultiImage;
-(BOOL)CanSendOriginalImage;
-(id)getViewController;
@optional
-(void)CameraControllerDidTakeVideo:(id)cameraController;
-(void)processImageDidFinish;
-(void)processImageDidCancel;
-(void)processInsertedImage:(id)image withData:(id)data ImageInfo:(id)info;
-(void)processInsertedImage:(id)image ImageInfo:(id)info;
@end

@protocol AutoplayController <NSObject>
-(BOOL)canAutoplayWhenMessageDownloaded;
@optional
-(void)PlayNodeAtId:(unsigned long)anId;
-(id)GetMessagesWrapArray;
@end

@protocol ImplicitAnimationControllerDelegate <NSObject>
-(id)getViewController;
@end

@protocol ShakeControllerDelegate
-(void)onForceEarpieceModeChanged;
-(BOOL)isShakeEnabled;
-(id)getViewController;
@end

@protocol MultiSelectContollerDelegate <NSObject>
-(void)onForwardMessageOK;
-(id)getCurrentViewController;
-(void)onMultiOprationComplete;
@end

@protocol BaseMsgContentDelgate <NSObject>
-(BOOL)shouldPreventViewcontrollerAutorotate;
-(id)nameForHeadImageLongPressed:(id)headImageLongPressed;
-(BOOL)canReloadViewIfMemoryWarning;
-(void)didSelectSearchResultForMessageWrap:(id)messageWrap;
-(BOOL)ShouldShowSearchedAnyMsg;
-(BOOL)ShouldShowSearchResultMessageArray;
-(BOOL)ShouldShowSearchCompleteRightBarButton;
-(BOOL)ShouldShowSearchBar;
-(id)GetRightBarButtonTitle;
-(id)GetRightBarButtonImage;
-(void)StopPlaying:(id)playing;
-(void)StartPlaying:(id)playing FromTouch:(BOOL)touch;
-(BOOL)IsRecording;
-(void)CancelRecording;
-(void)StopRecording;
-(void)StartRecording;
-(id)GetContact;
-(void)onTextChange:(id)change selectedRange:(NSRange)range;
-(id)GetTitleImage;
-(void)onViewControllerDisshow;
-(void)onWillPushFromNavigationController;
-(void)onWillPopFromNavigationController;
-(void)onBackFromNavigationController;
-(void)onPopFromNavigationController;
-(BOOL)EnabledOfHeaderButtonAtIndex:(unsigned long)index;
-(id)ImageOfHeaderButtonAtIndex:(unsigned long)index;
-(id)TitleOfHeaderButtonsAtIndex:(unsigned long)index;
-(unsigned long)NumberOfHeaderButtons;
-(void)ResendMessage:(id)message;
-(void)StateChanged;
-(void)VoiceModeClicked;
-(void)ViewWillDisappear;
-(void)ViewWillAppear;
-(void)ViewDidAppear;
-(void)ViewDidInit;
-(void)ViewWillInit;
-(id)GetUsrTitle;
-(void)CustomToolViewEX:(id)ex;
-(BOOL)onLoadDownMoreMessage;
-(BOOL)onLoadMoreMessage;
-(void)onSendCaptrueImage:(id)image;
-(void)onOpenCameraController;
-(void)onOpenMediaBrowser;
-(void)DelMsgWithMsgList:(id)msgList DelAll:(BOOL)all;
-(id)GetMessageArray;
-(void)ShowReader:(id)reader;
-(void)PreviewImage:(id)image;
-(void)onOpenRecommandApp:(id)app downloadUrl:(id)url;
-(void)onOpenMyFavoritesListController;
-(void)onOpen3rdAppListController;
-(void)onVideoVoipInvite;
-(void)onVoipInvite;
-(void)WXTalk;
-(void)ViewLocation:(id)location;
-(void)SelectLocation:(BOOL)location;
-(void)ShareCard;
-(void)SendEmoticonMessage:(id)message;
-(void)SendEmojiArtMessage:(id)message;
-(void)SendTextMessage:(id)message;
-(void)SendMessageWrap:(id)wrap;
-(id)GetMessageFromImage:(id)image;
-(void)SendImageMessage:(id)message ImageInfo:(id)info;
-(BOOL)CanSelectMyFavoritesItemForSendingMsg;
-(BOOL)CanRotateOrientation;
-(BOOL)CanWXTalk;
-(BOOL)CanSendEmoticonMessage;
-(BOOL)CanAddApp;
-(BOOL)CanOpenCamera;
-(BOOL)CanLongPressHeadImage;
-(BOOL)CanSend3rdMsg;
-(BOOL)CanSendVoipMsg;
-(BOOL)CanSendLocationMsg;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendVoiceMsg;
-(BOOL)CanSendImageMsg:(id)msg;
-(BOOL)CanSendTextMsg:(id)msg;
-(id)GetSearchedResultContentMessageArray;
-(id)GetDownMessageArray;
-(id)GetMessageArray;
-(void)OpenContactInfo:(id)info;
-(void)OpenDetailInfo;
@optional
-(void)customCellContentForMsg:(id)msg;
-(void)resetWithMessageWrap:(id)messageWrap;
-(void)sendMultiMsgBySystemMail:(id)mail;
-(void)onMultiMsgDelete:(id)aDelete;
-(void)sendMultiMsgToBrandContact:(id)brandContact;
-(void)sendMultiMsgByMail:(id)mail;
-(void)sendMultiMsgToFriend:(id)aFriend;
-(void)addMultiMsgToMyFav:(id)myFav;
-(void)toBeEditing:(BOOL)beEditing;
-(id)getLeftBarButton;
-(void)onMassSendSendAgain:(id)again;
-(BOOL)isShowHeadImage:(id)image;
-(void)OnTagLink:(id)link;
-(id)GetRightBarBtn;
-(BOOL)hasDownMoreMsg;
-(BOOL)hasMoreMsg;
-(BOOL)canShowChatRoomInfo;
-(void)addGameNode:(id)node;
-(id)getBackgroundView;
-(void)StartPlayVideo:(id)video;
-(void)StartDownloadVideo:(id)video;
-(void)StartUploadVideo:(id)video;
-(void)StopDownloadVideo:(id)video;
-(void)StopUploadVideo:(id)video;
-(BOOL)NeedRightButtonRedDot;
-(id)GetTitleTailImage;
-(id)HighlightedImageOfHeaderButtonAtIndex:(unsigned long)index;
@end

@protocol MMPickLocationViewControllerDelegate
@optional
-(id)onGetRightBarButton;
-(void)onCancelSeletctedLocation;
@end

@protocol MyFavoritesListViewControllerDelegate <NSObject>
@optional
-(void)onSelectedFavoritesItem:(id)item;
@end

@protocol ViewLocationDelegate <NSObject>
@optional
-(void)onSendLocationToFriend:(id)aFriend ViewController:(id)controller;
@end

@protocol IWXTalkExt
@optional
-(void)onRemoteControlCheckShouldStop;
-(void)onRemoteControlCheckShouldPlay;
-(void)OnSomeOneCloseMode:(id)mode;
-(void)OnSomeOneOpenMode:(id)mode;
-(void)OnRestart;
-(void)OnPause;
-(void)OnReConnecting;
-(void)OnForceStopWXTalk;
-(void)onKickOutFromWXTalkRoom:(id)wxtalkRoom;
-(void)OnMyselfCloseMode:(id)mode;
-(void)OnNobodyTalking;
-(void)OnForceStopRecord;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnRoomMemberChange:(id)change;
-(void)OnSomeoneTalking:(id)talking;
-(void)OnGetMicrophoneResult:(int)result;
-(void)OnOpenWXTalkModeOK:(id)ok;
@end

@protocol BaseMsgContentInBackgroundThreadDelgate <NSObject>
-(id)QueryMsgText:(id)text FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count;
@end

@protocol TypingControllerDelgate <NSObject>
@optional
-(void)updateTypingTitle:(id)title;
@end

@protocol MsgDelegate <NSObject>
@optional
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(unsigned long)GetUnReadCount:(id)count;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data withImageInfo:(id)imageInfo;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data;
-(id)FormImageMsg:(id)msg withImage:(id)image;
-(id)FormTextMsg:(id)msg withText:(id)text;
@end

@protocol UrlControllerDelegate <NSObject>
-(id)getViewController;
-(void)verifyContactByUsrNameWithOpCode:(unsigned long)opCode userName:(id)name;
@end

@protocol RecordControllerDelegate <NSObject>
-(id)GetContactName;
-(unsigned long)CheckVoiceBtnState;
-(id)getViewController;
@optional
-(BOOL)CanRemoteRecord;
-(void)SetButtonHighlighted:(BOOL)highlighted;
-(void)SetPeakPower:(float)power;
-(void)ShowTooLongTips;
-(void)ShowTooShortTips;
-(void)SetVoiceEnabled:(BOOL)enabled;
-(void)HideRecordTips;
-(void)ShowPreparing;
-(void)ShowRecording;
-(void)onRecordModMsg:(id)msg;
-(void)onRecordAddMsg:(id)msg;
-(void)onRecordTimeOut;
@end

@protocol PlayControllerDelegate <NSObject>
-(id)getViewController;
@optional
-(void)onEndPlay:(unsigned long)play isForceStop:(BOOL)stop;
@end

@protocol ShareFriendOnChatDelegate
@optional
-(id)getMyFriendContact;
-(id)getShareMyFriendParentViewController;
-(void)onFinishedShareMyFriend:(BOOL)aFriend;
@end

@protocol MMInputToolViewCustomizationDelegate <NSObject>
@optional
-(BOOL)showKeyboardImmediately;
-(BOOL)shouldHideOrginInputToolView;
-(float)getCustomizedAreaWidth;
@end

@protocol IQQSessionExt
@optional
-(void)QQNewSessionArriving:(id)arriving;
-(void)QQSessionChanged:(id)changed;
-(void)QQNeedReload;
@end

@protocol chatRoomInfoDelegate
-(void)newMessageFromChatRoomInfo:(id)chatRoomInfo;
@end

@protocol chatRoomSettingDelegate
-(void)clearAllMsg;
@end

@protocol RoomContactSelectDelegate <NSObject>
-(void)didSelectContact:(id)contact;
@end

@protocol TipsViewDelegate <NSObject>
@optional
-(void)onPerformAction:(id)action;
-(void)onTipsViewClose:(id)close;
-(void)onTipsViewClick:(id)click;
@end

@protocol ISXSessionExt
@optional
-(void)SXNewSessionArriving:(id)arriving;
-(void)SXSessionChanged:(id)changed;
-(void)SXNeedReload;
@end

@protocol addContactToChatRoomDelegate
-(void)clearAllMsg;
-(void)newMessageFromAddContactToChatRoom:(id)chatRoom;
@end

@protocol MMReadMailViewDelegate <NSObject>
@optional
-(id)getNextMessageWrap;
-(id)getLastMessageWrap;
-(id)getNextPushMailWrap;
-(id)getLastPushMailWrap;
-(void)deleteMail:(id)mail;
@end

@protocol AppDetailDelegate
-(void)OnAppDataPreview:(id)preview MsgWrap:(id)wrap;
@end

@protocol messageNodeViewDelegate <NSObject>
@optional
-(void)switchEarMode;
-(void)onCommentOnMessageWrap:(id)wrap;
-(void)jumpToShakeView:(unsigned long)shakeView;
-(void)jumpToUserProfile:(id)userProfile Displayname:(id)displayname Scence:(unsigned long)scence;
-(void)onMoreOperateWithMsgId:(id)msgId;
-(void)onForwardMessageOK;
-(void)onMassSendSendAgain:(id)again;
-(void)onNodeViewChanged;
-(void)addEmoticonOK;
-(void)tagLink:(id)link;
-(id)getViewController;
-(void)longPressOnHeadImageForDebug:(id)debug;
-(void)longPressOnHeadImage:(id)image;
-(void)deleteNode:(id)node;
-(void)StartDownloadVideo:(id)video;
-(void)StartUploadVideo:(id)video;
-(void)StopDownloadVideo:(id)video;
-(void)StopUploadVideo:(id)video;
-(void)headerImageClicked:(id)clicked;
-(void)EndPlaying:(id)playing;
-(void)BeginPlaying:(id)playing FromTouch:(BOOL)touch;
-(void)PlayVideo:(id)video;
-(void)tapVoipNodeView:(id)view;
-(void)tapAppNodeView:(id)view;
-(void)tapFriendCard_NodeView:(id)view WithContact:(id)contact;
-(void)tapPushContact_NodeView:(id)view;
-(void)tapPushMail_NodeView:(id)view withPushMailWrap:(id)pushMailWrap;
-(void)tagHeadImage_NodeView:(id)view;
-(void)tapVideoStatus_NodeView:(id)view;
-(void)tapStatus_NodeView:(id)view;
-(void)tapText_NodeView:(id)view;
-(void)tapEmoticon_NodeView:(id)view;
-(void)tapLocation_NodeView:(id)view;
-(void)tapReader_NodeView:(id)view;
-(void)tapImage_NodeView:(id)view;
-(void)tapWeiboIMG_NodeView:(id)view;
@end

@protocol MMInputToolViewDelegate <NSObject>
@optional
-(id)GetCurrentViewController;
-(void)initAllowWxTalk;
-(void)initAllowVoiceInput;
-(void)initAllowVoip;
-(void)sendCaptruedImage:(id)image;
-(void)pasteImage:(id)image;
-(id)getCurrentChatName;
-(void)openRecommandApp:(id)app downloadUrl:(id)url;
-(void)openMyFavoritesListController;
-(void)open3rdAppListController;
-(void)onSelectLocation;
-(void)onVideoVoipInvite;
-(void)onVoipInvite;
-(void)onWXTalk;
-(void)onShareCard;
-(void)SendEmoticonMesssageToolView:(id)view;
-(void)TextDidChanged:(id)text selectedRange:(NSRange)range;
-(void)openCameraController;
-(void)openMediaBrowser;
-(void)CancelRecording;
-(void)StopRecording;
-(void)StartRecording;
-(void)ToolViewPositionDidChanged:(BOOL)toolViewPosition animated:(BOOL)animated;
-(void)SendEmojiArtMessageToolView:(id)view;
-(void)SendTextMessageToolView:(id)view;
@end

@protocol MMMultiSelectToolViewDelegate <NSObject>
@optional
-(void)OnMultiDeleteMessage;
-(void)OnMultiBrandMessage;
-(void)OnMultiEmailMessage;
-(void)OnMultiForwardMessage;
-(void)OnMultiFavAddMessage;
@end

@protocol WXGestureDelegate <NSObject>
@optional
-(void)gestureWillEndTransition:(id)gesture isCanceld:(BOOL)canceld;
-(void)gestureWillBeginTransition:(id)gesture;
@end

@protocol ShareMessageConfirmLogicHelperDelegate <NSObject>
@optional
-(void)OnStayAtWeChat:(id)weChat;
-(void)OnBackTo3rdApp:(id)a3rdApp;
-(void)OnSendMessageCancel:(id)cancel;
-(void)OnSendMessageFail:(id)fail WithError:(int)error;
-(void)OnSendMessageOK:(id)ok;
@end

@protocol ChatBackgroundExt
@optional
-(void)onChatBackgroundDownloadFinishedForUser:(id)user withCID:(id)cid;
-(void)onListStatusChange;
-(void)onChatBackgroundChanged:(id)changed;
@end

@protocol MMLandscapeInputToolViewDelegate <NSObject>
@optional
-(void)updateToolViewAnimationCurve:(int)curve;
-(void)updateToolViewAnimationDuration:(float)duration;
-(void)beforeLandscapeToolViewHeightUpdate:(id)update;
-(void)afterLandscapeToolViewHeightUpdate:(id)update;
-(void)pasteImage:(id)image;
-(void)TextDidChanged:(id)text selectedRange:(NSRange)range;
-(void)ToolViewPositionDidChanged:(BOOL)toolViewPosition animated:(BOOL)animated;
-(void)SendTextMessageToolView:(id)view;
@end

@protocol MsgSearchHelperDelegate <NSObject>
-(void)msgSearchBarDoSearch;
-(void)msgSearchBarCancel;
-(id)getParentTableView;
-(id)getParentView;
-(id)chatContactForMessageWrap:(id)messageWrap;
-(void)didSelectSearchResultForMessageWrap:(id)messageWrap;
-(id)QueryMsgText:(id)text FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count;
@end

@protocol tableViewDelegate <NSObject>
@optional
-(void)didFinishedLoading:(id)loading;
-(void)touchesCancelled_TableView:(id)view withEvent:(id)event;
-(void)touchesEnded_TableView:(id)view withEvent:(id)event;
-(void)touchesMoved_TableView:(id)view withEvent:(id)event;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
@end

@protocol IVOIPExt
@optional
-(void)OnLightInterrupt:(BOOL)interrupt;
-(void)OnTellMeViewIsExist:(BOOL*)exist;
-(void)OnMonitorWithSendFPS:(int)sendFPS andRecvFPS:(int)fps;
-(void)OnSyncError:(id)error ErrNo:(int)no;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnTimeOut:(id)anOut;
-(void)OnInterrupt:(id)interrupt;
-(void)OnBeginTalk:(id)talk;
-(void)OnBeginConnect:(id)connect;
-(void)OnBeHanguped:(id)hanguped;
-(void)OnBeRejected:(id)rejected;
-(void)OnBeAccepted:(id)accepted;
-(void)OnNoAnswer:(id)answer;
-(void)OnAccept:(id)accept ErrNo:(int)no;
-(void)OnCall:(id)call ErrNo:(int)no;
@end

@protocol UIDocumentInteractionControllerDelegate <NSObject>
@optional
-(BOOL)documentInteractionController:(id)controller performAction:(SEL)action;
-(BOOL)documentInteractionController:(id)controller canPerformAction:(SEL)action;
-(void)documentInteractionController:(id)controller didEndSendingToApplication:(id)application;
-(void)documentInteractionController:(id)controller willBeginSendingToApplication:(id)application;
-(void)documentInteractionControllerDidDismissOpenInMenu:(id)documentInteractionController;
-(void)documentInteractionControllerWillPresentOpenInMenu:(id)documentInteractionController;
-(void)documentInteractionControllerDidDismissOptionsMenu:(id)documentInteractionController;
-(void)documentInteractionControllerWillPresentOptionsMenu:(id)documentInteractionController;
-(void)documentInteractionControllerDidEndPreview:(id)documentInteractionController;
-(void)documentInteractionControllerWillBeginPreview:(id)documentInteractionController;
-(id)documentInteractionControllerViewForPreview:(id)preview;
-(CGRect)documentInteractionControllerRectForPreview:(id)preview;
-(id)documentInteractionControllerViewControllerForPreview:(id)preview;
@end

@protocol WXTalkTipsViewDelegate <NSObject>
@optional
-(void)onWXTalkTipsViewClick;
@end

@protocol ICertInfoMgrExt
@optional
-(void)OnUpdateCertInfo;
@end

@protocol IUpdateProfileMgrExt <NSObject>
@optional
-(void)onProfileChange;
@end

@protocol IStrangerContactMgrExt <NSObject>
@optional
-(void)onStrangerContactUpdateForbidden:(id)forbidden;
-(void)onStrangerContactUpdated:(id)updated Contact:(id)contact;
-(void)onStrangerContactUpdated:(id)updated;
@end

@protocol SessionSelectControllerDelegate <NSObject>
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
@optional
-(void)OnSelectSessionReturn:(id)aReturn;
-(void)getCustomConfirmViewWithShakeMusic;
-(void)getCustomConfirmView;
@end

@protocol MMSayHelloViewControllerDelegate
-(void)onSayHelloViewSendSayHello:(id)hello;
@end

@protocol ContactInfoAssistDelegate <NSObject>
-(id)getContactVerifyLogic;
-(void)onExposeFriend;
-(void)reloadFloatView;
-(void)onSetWCPermissions;
-(void)showAlbumList;
-(BOOL)isNeedVerify;
-(BOOL)isFromWCProfile;
-(BOOL)isNeedHideUserName;
-(BOOL)isFromBlackList;
-(BOOL)isFromFriendAssist;
-(BOOL)isFromChatroomVerify;
-(void)delAllMsg;
-(void)onEditRemarkName;
-(id)getViewController;
-(void)stopLoadingWithFailText:(id)failText;
-(void)stopLoadingWithOKText:(id)oktext;
-(void)startLoadingWithText:(id)text;
-(void)goToBindQQ;
-(void)onExposeByRecommand;
-(void)onRemoveContact;
-(void)onExpose;
-(void)onPushViewController:(id)controller;
-(void)onPresentViewController:(id)controller;
-(void)onPopToRootViewController:(BOOL)rootViewController;
-(void)onPopViewController:(BOOL)controller;
-(void)onSayHello;
-(void)onShareMyFriend;
-(void)ContactsViewReloadData;
-(void)showFolderConfigPage;
-(void)handleSelectedBindPhoneCell;
-(void)handleSelectedPrivateContactListCell;
-(void)onFriendRequestSend;
-(void)contactVerifyOk:(id)ok;
-(void)onNewMessage:(id)message;
-(void)onTalk:(id)talk;
@optional
-(void)canNotFollowContact:(id)contact;
-(unsigned long)GetFromScene;
-(void)performSelector:(SEL)selector withObject:(id)object afterDelay:(double)delay;
@end

@protocol IQQContactMgrExt
@optional
-(void)onSyncQQContactEnd;
-(void)onDeleteQQContact:(id)contact;
-(void)onModifyQQContact:(id)contact;
-(void)onNewQQContact:(id)contact;
-(void)onModifyQQContactHeadImage:(id)image;
@end

@protocol CSettingExt
@optional
-(void)onVerifyPersonalInfo:(unsigned long)info;
-(void)onSettingChanged:(int)changed;
@end

@protocol settingMyAccountExtInfoLogicDelegate <NSObject>
-(void)onInfoChange;
@optional
-(void)onImgChangeEnd:(BOOL)end;
-(void)onImgBeginChange:(id)change;
@end

@protocol crashReportConnectionDelegate <NSObject>
-(void)onUploadCrashCompleted:(BOOL)completed CrashWrap:(id)wrap;
@end

@protocol whatsnewViewDelegateEx <NSObject>
-(void)showWhatsNewEnd;
-(void)showWhatsNewWillEnd;
@end

@protocol UIViewControllerTransitioningDelegate <NSObject>
@optional
-(id)interactionControllerForDismissal:(id)dismissal;
-(id)interactionControllerForPresentation:(id)presentation;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
@end

@protocol CrossfadeAnimationDelegate <NSObject>
@optional
-(void)crossfadeAnimationCompleted;
@end

@protocol MMThemeSettingLogicControllerDelegate
-(void)onThemeUpdatePackUnpackError:(id)error;
-(void)onThemeItemChanged:(id)changed onIndex:(int)index;
-(void)onThemeListChanged:(id)changed;
@end

@protocol MMThemeManagerExt
-(void)onThemeChanged;
@end

@protocol IVoiceReminderExt <NSObject>
@optional
-(void)onNotifyRemindMsg:(id)msg;
-(void)onDeleteRemindMsgsReturn:(BOOL)aReturn;
-(void)onDeleteRemindMsgsReturn:(BOOL)aReturn msgWrap:(id)wrap;
@end

@protocol UITabBarControllerDelegate <NSObject>
@optional
-(id)tabBarController:(id)controller animationControllerForTransitionFromViewController:(id)viewController toViewController:(id)viewController3;
-(id)tabBarController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)tabBarControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)tabBarControllerSupportedInterfaceOrientations:(id)orientations;
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willBeginCustomizingViewControllers:(id)controllers;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
@end

@protocol BottleMsgViewControllerDelegate
-(void)setBottleUnread;
-(void)onThrowBack:(id)back;
-(BOOL)needShowReturnAlert;
@end

@protocol IViewControllerExt <NSObject>
@optional
-(void)onViewWillAppear:(BOOL)onView landscapeForbidden:(BOOL)forbidden;
@end

@protocol MMTransparentButtonDelegate <NSObject>
@optional
-(void)MMTransparentButton_touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)MMTransparentButton_touchesEnded:(id)ended withEvent:(id)event;
-(void)MMTransparentButton_touchesMoved:(id)moved withEvent:(id)event;
-(void)MMTransparentButton_touchesBegan:(id)began withEvent:(id)event;
@end

@protocol MMGrowTextViewDelegate <NSObject>
@optional
-(void)MMGrowTextViewBeginEditing:(id)editing;
-(void)MMGrowTextView:(id)view pasteImage:(id)image;
-(BOOL)MMGrowTextView:(id)view shouldPasteImage:(id)image;
-(void)UITextViewTextDidChangeNotification:(id)uitextViewText;
-(void)keyboardWillHide:(float)keyboard;
-(void)keyboardDidShow:(float)keyboard;
-(void)keyboardWillShow:(float)keyboard;
-(BOOL)TextViewDidDelete;
-(void)setKeyboardAnimationCurve:(int)curve;
-(void)setKeyboardAnimationDuration:(float)duration;
-(void)TextDidChanged:(id)text selectedRange:(NSRange)range;
-(void)TextViewDidEnter:(id)textView;
-(void)TextViewHeightDidChanged:(id)textViewHeight;
@end

@protocol SelectAttachmentViewControllerDelegate <NSObject>
-(void)didSelectAttachmentAtIndex:(unsigned long)index;
@optional
-(void)onMyFavoritesButtonClicked:(id)clicked;
-(void)on3rdRecommandButtonClicked:(id)clicked;
-(void)onToolsButtonClicked:(id)clicked;
-(void)onVoiceInputClicked:(id)clicked;
-(void)onVoiceVoipButtonClicked:(id)clicked;
-(void)onVideoVoipButtonClicked:(id)clicked;
-(void)onShareCardButtonClicked:(id)clicked;
-(void)onLocationButtonClicked:(id)clicked;
-(void)onCameraControllerClicked:(id)clicked;
-(void)onMediaBrowserClicked:(id)clicked;
@end

@protocol VoiceInputViewDelegate <NSObject>
-(void)OnClearText;
-(void)OnTextRecoged:(id)recoged;
-(id)GetCurrentText;
@end

@protocol EmoticonBoardViewDelegate <NSObject>
@optional
-(void)OnEmoticonStateDidChanged:(BOOL)onEmoticonState;
-(id)GetCurrentViewController;
-(void)onSendButtonClicked;
@end

@protocol BaseEmoticonViewDelegate <NSObject>
@optional
-(void)deleteEmoticon;
-(void)didSelectorSelfDefinedEmotcion:(id)emotcion;
-(void)didSelectorEmoticon:(id)emoticon;
@end

@protocol PBCoding <NSObject>
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@protocol NotifyFromMainCtrlDelegate
-(void)NotifyFromMainCtrl:(unsigned long)mainCtrl MessageInfo:(id)info Event:(unsigned long)event;
@optional
-(void)NotifyFromMainCtrl:(id)mainCtrl Event:(unsigned long)event;
@end

@protocol WebMailViewDelegate <NSObject>
-(void)onSendComplete;
@end

@protocol MMIconActionSheetDelegate <NSObject>
@optional
-(void)actionSheet:(id)sheet didDismissWithItem:(id)item;
-(void)actionSheet:(id)sheet willDismissWithItem:(id)item;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet didSelectWithItem:(id)item;
@end

@protocol MMAnimationTipViewDelegate
-(void)fadeShowEnd;
@end

@protocol ForwardMessageLogicDelegate <NSObject>
-(id)getCurrentViewController;
@optional
-(void)endMultiSelect;
@end

@protocol LoginLogicDelegate
@optional
-(void)AuthReturn:(unsigned long)aReturn MessageInfo:(id)info;
@end

@protocol WCPayLogicMgrExt <NSObject>
@optional
-(void)OnHandleVerifiedSMSString:(id)string;
-(void)OnHandleWCPayURL:(id)url Error:(id)error;
-(void)OnGetMallPrepayRequest:(id)request AppSource:(id)source Error:(id)error;
-(void)OnGetAppAuthUrlErrorRequest:(id)request;
-(void)OnGetAppAuthUrlRequest:(id)request AppSource:(id)source PrepayId:(id)anId;
-(void)OnGetGenPaypreErrorRequest:(id)request ErrorMsg:(id)msg;
-(void)OnGetGenPaypreRequest:(id)request SessionID:(id)anId AppSource:(id)source;
-(void)OnUnBindCard:(id)card Error:(id)error;
-(void)OnGetAvailableBank:(id)bank Error:(id)error;
-(void)OnGetBindingCardBin:(id)bin Error:(id)error;
-(void)OnMainPayCardChanged:(id)changed;
-(void)OnGetPayCardList:(id)list UsrVerifiedInfo:(id)info Error:(id)error;
-(void)OnGetLocalPayCardList:(id)list UsrVerifiedInfo:(id)info;
-(void)OnSetWCPayPasswordInReset:(id)reset;
-(void)OnResetWCPayPasswordVerifySMS:(id)sms;
-(void)OnResetWCPayPasswordVerifyCard:(id)card Error:(id)error;
-(void)OnModifyWCPayPassword:(id)password NewWCPayPassword:(id)password2 Error:(id)error;
-(void)OnDelAllOrder:(id)order;
-(void)OnDelOrder:(id)order Error:(id)error;
-(void)OnStatusChangedOrderListCountChanged:(unsigned long)changed;
-(void)OnGetBizOrderListResponse:(id)response Request:(id)request Error:(id)error;
-(void)OnGetHistoryIapOrderDetailInfo:(id)info Error:(id)error;
-(void)OnGetHistoryOrderDetailInfo:(id)info Error:(id)error;
-(void)OnGetOrderDetailInfo:(id)info Error:(id)error;
-(void)OnGetOrderList:(id)list TotalCount:(unsigned long)count Error:(id)error;
-(void)OnSetWCPayPasswordInBind:(id)bind;
-(void)OnBindCardVerifySMS:(id)sms Error:(id)error;
-(void)OnBindCardVerifyCard:(id)card Error:(id)error;
-(void)OnTenpayImportBindQuery:(id)query AppInfo:(id)info UsrVerifiedInfo:(id)info3 Error:(id)error;
-(void)OnPaySubscribeServiceApp:(id)app Error:(id)error;
-(void)OnSetWCPayPasswordInPay:(id)pay Error:(id)error;
-(void)OnAuthenticationPayVerifySMS:(id)sms PayStatus:(id)status Error:(id)error;
-(void)OnAuthenticationPay:(id)pay PayStatus:(id)status Error:(id)error;
-(void)OnGetBankPackage:(id)package Error:(id)error;
-(void)OnGetTenpaySecureCtrlSalt:(id)salt Date:(id)date Error:(id)error;
-(void)OnVerifyPayPassword:(id)password;
-(void)OnHandleSpecialPayError:(id)error ErrorType:(unsigned long)type;
-(void)OnValidError:(id)error;
-(void)OnCVVError:(id)error;
-(void)OnCVVAndValidError:(id)error;
-(void)OnPhoneNumberErrpr:(id)errpr;
-(void)OnPayPasswordError:(id)error ErrorCount:(int)count LockTotalCount:(unsigned long)count3;
-(void)OnWCPayBaseRequestNoKnownError:(id)error TenPayCmdType:(int)type;
@end

@protocol WCAccountFillPhoneFromAuthViewControllerDelegate <NSObject>
@optional
-(void)onFillPhoneBindAgreeMobileCanBeFound:(BOOL)found;
-(void)onFillPhoneNext:(id)next phoneNumber:(id)number;
-(void)onFillPhoneBack;
@end

@protocol CountryCodePickerDelegate
-(void)CountryCodePickerDidPickCountryCode:(id)countryCodePicker;
@end

@protocol MMPackageDownloadMgrExt
@optional
-(void)onPackageCancelFinish:(id)finish;
-(void)onPackageDownloadFinish:(id)finish package:(id)package;
-(void)onPackageDownloadProcessUpdated:(id)updated downloadSize:(int)size totalSize:(int)size3;
-(void)onPackageListUpdated:(id)updated;
@end

@protocol ChatBackgroundViewDelegate
-(void)onChatBackgroundViewClick:(id)click;
@end

@protocol IQQMailExt
@optional
-(void)OnViewImage:(id)image ErrNo:(int)no;
-(void)OnViewCompress:(id)compress ErrNo:(int)no;
-(void)OnComposeSend:(int)send;
-(void)OnUploadData:(id)data filename:(id)filename ErrNo:(int)no;
-(void)OnSetMailUnread:(int)unread;
-(void)OnGetMail:(id)mail ErrNo:(int)no;
-(void)OnGetAllMailContact:(id)contact ErrNo:(int)no;
@end

@protocol MailReceiverEditViewDelegate <NSObject>
@optional
-(void)onMailContactChanged:(id)changed;
-(void)onTextFieldNextItem:(id)item;
-(void)onTextFieldBeginEdit:(id)edit;
-(void)onTextFieldChanged:(id)changed;
-(void)onTextFieldFinishEdit:(id)edit;
-(void)onMailReceiverEditViewHeightChanged:(id)changed;
-(void)onAddMailContact:(id)contact;
-(void)onMailContactDoubleClicked:(id)clicked;
@end

@protocol MailContentViewDelegate
-(void)contentViewDidFinishEdit;
-(void)contentViewNeedSetContentOffset:(float)offset;
-(void)didStartWriteMailContent;
@end

@protocol MailContactFilterViewDelegate
@optional
-(void)contactReturn:(id)aReturn;
-(void)filterViewBeginDragging;
@end

@protocol MMMailContactSelectViewDelegate <NSObject>
@optional
-(void)onMailContactSelectDone:(id)done userInfo:(id)info;
@end

@protocol MailAttachmentViewDelegate
-(void)OnResend:(id)resend;
-(void)OnUploadSuccess;
-(void)OnDeleteAttachment:(id)attachment;
@end

@protocol MailAttachmentControlViewDelegate <NSObject>
-(id)getViewController;
@optional
-(void)onFirstResponderResigned;
-(void)onMailReceiverEditViewHeightChanged:(id)changed;
@end

@protocol ILocationMgrExt
@optional
-(void)onDidFindAddress:(id)on forTag:(int)tag;
-(void)onHeadingError:(int)error withTag:(int)tag;
-(void)onHeadingChanged:(id)changed withTag:(int)tag;
-(void)onMapLocationError:(id)error withTag:(int)tag;
-(void)onMapLocationChanged:(id)changed withTag:(int)tag;
-(BOOL)isUpdatingGPSLocation:(int)location;
-(void)onGPSLocationError:(int)error withTag:(int)tag;
-(void)onGPSLocationChanged:(id)changed withTag:(int)tag;
-(void)onGPSAccurateLocationChanged:(id)changed withTag:(int)tag;
@end

@protocol MKMapViewDelegate <NSObject>
@optional
-(void)mapView:(id)view didAddOverlayViews:(id)views;
-(id)mapView:(id)view viewForOverlay:(id)overlay;
-(void)mapView:(id)view didAddOverlayRenderers:(id)renderers;
-(id)mapView:(id)view rendererForOverlay:(id)overlay;
-(void)mapView:(id)view didChangeUserTrackingMode:(int)mode animated:(BOOL)animated;
-(void)mapView:(id)view annotationView:(id)view2 didChangeDragState:(unsigned)state fromOldState:(unsigned)oldState;
-(void)mapView:(id)view didFailToLocateUserWithError:(id)error;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)mapViewDidStopLocatingUser:(id)mapView;
-(void)mapViewWillStartLocatingUser:(id)mapView;
-(void)mapView:(id)view didDeselectAnnotationView:(id)view2;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(void)mapView:(id)view annotationView:(id)view2 calloutAccessoryControlTapped:(id)tapped;
-(void)mapView:(id)view didAddAnnotationViews:(id)views;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapViewDidFinishRenderingMap:(id)mapView fullyRendered:(BOOL)rendered;
-(void)mapViewWillStartRenderingMap:(id)mapView;
-(void)mapViewDidFailLoadingMap:(id)mapView withError:(id)error;
-(void)mapViewDidFinishLoadingMap:(id)mapView;
-(void)mapViewWillStartLoadingMap:(id)mapView;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
@end

@protocol MailAttachDelegate
-(void)OnMailAttachPreview:(id)preview;
@end

@protocol IMassSendExt
@optional
-(void)OnMassSendOK;
-(void)OnMassSendFail:(unsigned long)fail WithErrorMsg:(id)errorMsg;
@end

@protocol IUiUtilExt <NSObject>
@optional
-(void)onTaskBarHiddenChanged:(BOOL)changed withAnimation:(int)animation;
-(void)onTopBarHiddenChanged:(BOOL)changed withAnimation:(int)animation;
-(void)onStatusBarHiddenChanged:(int)changed;
-(void)onTopBarFrameChanged;
-(void)onStatusBarFrameChanged;
-(void)onMainWindowFrameChanged;
@end

@protocol IHttpCacheExt
-(void)OnHttpGetFinish:(id)finish response:(id)response ErrNo:(int)no;
@end

@protocol IWCPayControlLogicExt <NSObject>
@optional
-(void)OnFinishedWCPayInnerPayLogic:(id)logic CompleteStatus:(int)status ExtraInfo:(id)info;
-(void)OnPayCardListChanged:(id)changed;
-(void)OnGetLocalCachePayCardList:(id)list;
-(void)OnFinishedWCPayLogic:(id)logic CompleteStatus:(int)status;
-(void)OnPreFinishedWCPayLogic:(id)logic waitUntilDone:(BOOL*)done;
@end

@protocol textViewDelegate <NSObject>
@optional
-(void)textview:(id)textview pasteImage:(id)image;
-(BOOL)textview:(id)textview shouldPasteImage:(id)image;
-(void)touchesCancelled_TextView:(id)view withEvent:(id)event;
-(void)touchesEnded_TextView:(id)view withEvent:(id)event;
-(void)touchesMoved_TextView:(id)view withEvent:(id)event;
-(void)touchesBegan_TextView:(id)view withEvent:(id)event;
@end

@protocol IMMGrowTextViewExt <NSObject>
@optional
-(void)onTextViewDidChange:(id)onTextView;
-(void)onTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
@end

@protocol UIPickerViewDelegate <NSObject>
@optional
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(id)pickerView:(id)view attributedTitleForRow:(int)row forComponent:(int)component;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(float)pickerView:(id)view rowHeightForComponent:(int)component;
-(float)pickerView:(id)view widthForComponent:(int)component;
@end

@protocol UIPickerViewDataSource <NSObject>
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
@end

@protocol MMDelegateCenterExt <NSObject>
-(void)onClearMyDelegate:(id)delegate forProtocols:(id)protocols;
@end

@protocol MMWebViewFontFloatViewDelegate <NSObject>
-(void)onSelectFont:(unsigned long)font;
@end

@protocol LongPressViewDelegate <NSObject>
-(void)OnLongPress:(id)press;
-(void)OnPress:(id)press;
@end

@protocol ImageScrollViewDelegate <NSObject>
@optional
-(void)OnLongPress:(id)press;
-(void)onDoubleTap:(id)tap;
-(void)onSingleTap:(id)tap;
@end

@protocol IHDHeadImageViewExt <NSObject>
@optional
-(void)onHDHeadImageWillDisappear;
-(void)onHDHeadImageWillAppear;
@end

@protocol LongPressImageViewDelegate <NSObject>
@optional
-(void)OnTouchUp:(id)up;
-(void)OnTouchDown:(id)down;
-(void)OnLongPress:(id)press;
-(void)OnPress:(id)press;
@end

@protocol IHeadImageExt
@optional
-(void)onHeadImageDelete:(id)aDelete;
-(void)onHeadImageUploadFail;
-(void)onHeadImageUploadOK;
-(void)onHeadImageChange:(id)change;
@end

@protocol QRDecoderDelegate <NSObject>
@optional
-(void)decoder:(id)decoder foundPossibleResultPoint:(CGPoint)point;
-(void)decoder:(id)decoder failedToDecodeImage:(id)decodeImage usingSubset:(id)subset reason:(id)reason;
-(void)decoder:(id)decoder didDecodeImage:(id)image usingSubset:(id)subset withResult:(id)result;
-(void)decoder:(id)decoder willDecodeImage:(id)image usingSubset:(id)subset;
@end

@protocol QRCodeScannerOverlayViewDelegate <NSObject>
-(void)onSelectPhotoFromLibrary;
@end

@protocol AVCaptureVideoDataOutputSampleBufferDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didDropSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
@end

@protocol IMMFontMgrExt <NSObject>
@optional
-(void)onFontSizeChange;
@end

@protocol MultiSelectContactsViewControllerDelegate <NSObject>
-(void)onMultiSelectContactReturn:(id)aReturn;
@end

@protocol RadarSearchViewDelegate <NSObject>
-(id)getCurViewController;
-(void)onRadarSearchViewClose;
@end

@protocol RadarPushButtonDelegate <NSObject>
@optional
-(void)onTouchUp:(id)up;
-(void)onLongPress:(id)press;
-(void)onPress:(id)press;
-(void)onTouchBegan:(id)began;
@end

@protocol MMTableViewInfoDelegate <NSObject, UIScrollViewDelegate, tableViewDelegate>
@optional
-(void)commitEditingForRowAtIndexPath:(id)indexPath Cell:(id)cell;
-(void)accessoryButtonTappedForRowWithIndexPath:(id)indexPath Cell:(id)cell;
@end

@protocol WebViewA8KeyLogicDelegate <NSObject>
-(void)onUpdatedPermisson;
-(void)getA8KeyFail:(int)fail;
@end

@protocol WebViewJSLogicDelegate <NSObject>
-(void)onFinishedHandleJSApi;
-(void)onStartedHandleJSApi:(id)api withFuncDef:(id)funcDef andReportKeyParam:(id)param;
-(id)getCurrentWebviewViewController;
-(BOOL)canAccessJSApi:(id)api;
@end

@protocol WCCommentViewDelegate <NSObject>
@optional
-(BOOL)isTouchEnableOnCommentView;
-(void)onCommentViewLongPressed:(id)pressed withText:(id)text withRect:(CGRect)rect;
-(void)onCommentViewClicked:(id)clicked;
@end

@protocol InputControllerDelegate <NSObject>
@optional
-(void)keyboardDidHide;
-(void)keyboardWillHide;
-(void)keyboardWillShow;
-(void)textViewTextDidChange;
-(void)didCommitText:(id)text;
-(void)didCommitEmptyText;
-(float)getVisibleHeight;
-(void)MMGrowTextViewBeginEditing:(id)editing;
-(void)MMGrowTextViewHeightDidChanged:(id)mmgrowTextViewHeight;
@end

@protocol MMRefreshTableFooterDelegate <NSObject>
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
@end

@protocol WCImageViewDelegate <NSObject>
@optional
-(void)onImageReload:(id)reload;
-(void)onLongPressedWCImage:(id)image;
-(void)onClickWCImage:(id)image;
@end

@protocol TextLayoutDelegate <NSObject>
@optional
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(float)originXForLineAtHeight:(float)height;
@end

@protocol WCCommentDetailViewControllerFBDelegate <NSObject>
-(void)onDeleteData;
-(void)onRestartUpload;
@end

@protocol WCListHeaderViewDelegate <NSObject>
-(void)showContactInfo;
@end

@protocol WCListViewRowViewDelegate
@optional
-(void)handleClickImageView:(id)view;
-(void)handleFeedView:(id)view;
-(void)handleVideoView:(id)view;
-(void)handleMusicView:(id)view;
-(void)handleTextView:(id)view;
-(id)getImageViewByDataItem:(id)item;
@end

@protocol WCPuzzleImageViewDelegate <NSObject>
-(void)onClickWCPuzzleImage:(id)image;
@end

@protocol FacebookImagePickerControllerDelegate <NSObject>
@optional
-(void)fbImagePickerControllerDidCancel:(id)fbImagePickerController;
-(void)fbImagePickerController:(id)controller didFinishPickingImages:(id)images;
@end

@protocol WCIntroViewDelegate <NSObject>
@optional
-(void)onCloseIntroView;
-(void)onIKnowItBtnClick;
@end

@protocol WCListViewDelegate <NSObject>
@property(assign, nonatomic) WCListViewController* viewController;
-(void)reloadBackGround;
-(void)refreshFooterEnd:(unsigned long)end;
-(void)refreshHeaderEnd:(unsigned long)end;
-(void)onDataChanged:(id)changed;
-(void)shouldReloadData:(id)data;
@optional
-(void)didReceiveMemoryWarning;
-(void)onNoMoreDataWithRet:(int)ret;
@end

@protocol WCCommitViewAnimationDelegate <NSObject>
@optional
-(void)commitAnimationWillStart:(id)commitAnimation;
-(void)animationDidEndRemainView:(id)animation hintDataItem:(id)item;
@end

@protocol WCListViewContentRowViewDelegate <NSObject>
@optional
-(void)onClickVideoContentRowView:(id)view;
-(void)onClickFeedContentRowView:(id)view;
-(void)onClickMusicContentRowView:(id)view;
-(void)onClickTextContentRowView:(id)view;
@end

@protocol ContactsPanelViewDelegate <NSObject>
-(void)didClickImageAtIndex:(unsigned long)index withKey:(id)key;
@end

@protocol WCCommentViewFBDelegate <NSObject>
@optional
-(void)onCommentViewClicked:(id)clicked;
@end

@protocol WCPlainTextTipFullScreenViewDelegate <NSObject>
-(void)onIKnowItBtnClicked;
@end

@protocol WCCommentStrangerViewControllerDelegate <NSObject>
-(void)OnFinishComment:(BOOL)comment;
@end

@protocol EGORefreshTableHeaderDelegate <NSObject>
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
@end

@protocol WCTimeLineCellViewDelegate <NSObject>
-(id)getView;
-(void)onShowDetailViewForDataItem:(id)dataItem;
-(void)onEditBlackList:(id)list;
-(void)onUpdateDataItem:(id)item oldHeight:(float)height newHeight:(float)height3;
-(void)onDeleteDataItem:(id)item;
-(void)onCommentDataItem:(id)item point:(CGPoint)point;
@end

@protocol WCTimeLineCommentCellViewDelegate <NSObject>
-(void)onReplyComment:(id)comment ofDataItem:(id)dataItem ofTouchedView:(id)touchedView;
@end

@protocol WCSetPermissionsViewControllerDelegate <NSObject>
-(void)onDismissViewController:(id)controller userName:(id)name;
@end

@protocol SelectorControllerDelegate <NSObject>
-(BOOL)showAddView;
-(id)getViewController;
@optional
-(void)hideInputController;
-(void)updateSelectorView;
@end

@protocol WCSelectorViewDelegate <NSObject>
@optional
-(void)onClickWholeView;
-(void)onDeleteViewAtIndex:(unsigned)index;
-(void)onAddViews;
@end

@protocol WCSelectorViewDataSource <NSObject>
-(BOOL)shouldShowDeleteView;
-(CGSize)sizeForViews;
-(id)viewAtIndex:(unsigned)index;
-(unsigned)numbersOfViews;
@optional
-(void)didSelectViewAtIndex:(unsigned)index;
@end

@protocol WCEditMemberPannelDelegate <NSObject>
@optional
-(void)onClickAddButton:(id)button;
-(void)onPannelClose:(id)close;
@end

@protocol WCEditMemberPannelDataSource <NSObject>
-(id)editMemberPannel:(id)pannel viewForItem:(unsigned)item;
-(unsigned)numberOfItems:(id)items;
@end

@protocol ContactsSelectorControllerDelegate <NSObject>
@optional
-(BOOL)couldSelectContacts;
@end

@protocol MMTwitterAuthExt <NSObject>
@optional
-(void)twitterWillStartOpenSafari;
-(void)twitterCheckAccessTokenValidFinished:(int)finished;
-(void)twitterAuthFinished:(int)finished;
@end

@protocol IFacebookAuthExt <NSObject>
@optional
-(void)onExtendTokenFinish:(BOOL)finish;
-(void)fbDidNotLogin:(BOOL)fb;
-(void)fbDidLogin;
-(void)fbDidUpdateToken;
@end

@protocol IAppDataExt <NSObject>
@optional
-(void)OnNewAppStatusChanged;
-(void)OnAppInfoChanged:(id)changed;
-(void)OnAppWatermarkChanged:(id)changed;
-(void)OnAppIconChanged:(id)changed;
-(void)OnAppRegisterInfoChanged;
-(void)OnAppSettingChanged;
-(void)OnGotBizAppInfo;
-(void)OnGotAppPersonalInfoList:(id)list errType:(int)type;
-(void)OnGotAuthAppList:(id)list errType:(int)type;
-(void)OnGotListAppSettingItem:(id)item errType:(int)type;
-(void)OnUpdateAppAuthState:(id)state errType:(int)type;
-(void)OnUpdateAppRecvMsgState:(id)state appSettingFlag:(int)flag errType:(int)type;
@end

@protocol SelectAttachmentViewDelegate <NSObject>
@optional
-(void)didReleaseLongPressAttachmentAtIndex:(unsigned long)index;
-(void)didLongPressOnAttachmentAtIndex:(unsigned long)index;
-(void)didSelectAttachmentAtIndex:(unsigned long)index;
@end

@protocol SelectAttachmentViewDataSource <NSObject>
@optional
-(id)appIDAtIndex:(unsigned long)index;
-(id)descriptionForAttachmentAtIndex:(unsigned long)index;
-(id)viewForAttachmentAtIndex:(unsigned long)index;
-(unsigned long)numberOfCols;
-(unsigned long)numberOfRows;
-(unsigned long)numberOfAttachment;
@end

@protocol ForwardConfirmViewDelegate <NSObject>
@optional
-(void)onCancel;
-(void)onSendNeedSrc:(BOOL)src;
@end

@protocol WCBaseControlMgrExt <NSObject>
@optional
-(void)onWCBaseLogicDidStop:(unsigned long)onWCBaseLogic;
@end

@protocol WCBaseControlLogicDeleagte <NSObject>
@optional
-(BOOL)onError:(id)error;
-(BOOL)gotoViewController:(id)controller;
@end

@protocol WCPayPayMoneyLogicDelegate <NSObject>
@optional
-(void)OnHandleErrorAlertClickedCancelBtnDown;
@end

@protocol ContactsCreateChatRoomLogicDelegate <NSObject>
-(void)OnCreateRoom:(id)room;
@end

@protocol ContactsDataLogicDelegate <NSObject>
-(BOOL)onFilterContactCandidate:(id)candidate;
-(void)onContactsDataChange;
@end

@protocol GroupSelectContactsViewControllerDelegate <NSObject>
-(void)onGroupSelectContactReturn:(id)aReturn;
@end

@protocol PluginUtilExt <NSObject>
-(void)onUnInstallPlugin:(int)plugin;
-(void)onInstallPlugin:(int)plugin;
@end

@protocol MMImgageBrowseViewDelegate <NSObject>
@optional
-(void)onDoubleTapImageBrowseView;
-(void)onSingleTapImageBrowseView;
@end

@protocol EmoticonStoreItemExt
@optional
-(void)OnEmoticonStoreItemGetProductFinished:(id)finished;
-(void)OnEmoticonStoreItemInstallFailed:(id)failed;
-(void)OnEmoticonStoreItemInstallFinished:(id)finished;
-(void)OnEmoticonStoreItemInstallStarted:(id)started;
-(void)OnEmoticonStoreItemDownloadFailed:(id)failed;
-(void)OnEmoticonStoreItemDownloadFinished:(id)finished;
-(void)OnEmoticonStoreItemDownloadProgressChanged:(id)changed CurrLength:(unsigned)length TotalLength:(unsigned)length3;
-(void)OnEmoticonStoreItemChanged:(id)changed;
@end

@protocol MMImageScrollViewHelperDelegate <NSObject>
@optional
@property(copy, nonatomic) NSArray* gestureRecognizers;
@property(assign, nonatomic) float maximumZoomScale;
@property(assign, nonatomic) float minimumZoomScale;
@property(assign, nonatomic) float zoomScale;
@property(assign, nonatomic) CGRect frame;
-(void)zoomToRect:(CGRect)rect animated:(BOOL)animated;
-(void)setZoomScale:(float)scale animated:(BOOL)animated;
-(void)removeGestureRecognizer:(id)recognizer;
-(void)addGestureRecognizer:(id)recognizer;
-(void)onDoubleTap:(id)tap;
-(void)onSingleTap:(id)tap;
-(id)getScrollView;
-(id)viewForZooming;
@end

@protocol IMMLanguageMgrExt <NSObject>
@optional
-(void)onLanguageChange;
@end

@protocol NSCoding
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@protocol PickedImagePaneDelegate <NSObject>
-(void)pickedImagePaneDidFinishPickingImages:(id)pickedImagePane;
@end

@protocol IOnlineClientMgrExt <NSObject>
@optional
-(void)onOnlineInfoUpdated;
-(void)onLogoutWeb;
-(void)onLoginWeb;
@end

@protocol ABPeoplePickerNavigationControllerDelegate <NSObject>
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
@end

@protocol ABNewPersonViewControllerDelegate <NSObject>
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
@end

@protocol MMImageLoaderObserver <NSObject>
@optional
-(void)ImageDidFail;
-(void)ImageDidLoadWithData:(id)image;
-(void)ImageDidLoad:(id)image;
@end

@protocol IWCMallControlLogicExt <NSObject>
@optional
-(void)OnGetFunctionList:(id)list;
@end

@protocol IWebviewAskAuthorizationLogicExt
@optional
-(void)OnAskAuthorizationFailure:(id)failure ForAuthInfo:(id)authInfo;
-(void)OnAskAuthorizationSuccessForAuthInfo:(id)authInfo;
@end

@protocol NewChatRoomMemberItemViewDelegate <NSObject>
@optional
-(void)setShowRemoveMember;
-(void)onShowMoreMember;
-(void)onDeleteMember:(id)member;
-(void)onAddMember:(id)member;
-(void)openContactInfo:(id)info;
@end

@protocol WCCreateNewGroupViewControllerDelegate <NSObject>
@optional
-(void)OnWCCreatNewGroupName:(id)name;
@end

@protocol ContactsItemViewDelegate <NSObject>
@optional
-(void)onContactsItemViewRightButtonClick:(id)click;
@end

@protocol SayHelloDataLogicDelegate <NSObject>
-(void)OnSayHelloDataChange;
-(id)getViewController;
@optional
-(void)OnSayHelloDataVerifyContactOK:(id)ok;
-(void)OnSayHelloDataUnReadCountChange;
@end

@protocol IVOIPModeSwitchExt
@optional
-(void)OnBothEarMode;
-(void)OnRemoteVideoMode;
-(void)OnRemoteEarMode;
-(void)OnLocalVideoMode;
-(void)OnLocalEarMode;
-(void)OnBothVideoMode;
-(void)OnRemoteEarModeFor2G;
-(void)OnLocalEarModeFor2G;
@end

@protocol SmallCameraViewDelegate <NSObject>
@optional
-(void)onSmallCameraViewSingleTap;
@end

@protocol AVVideoDeviceDelegate <NSObject>
@optional
-(void)videoDevice:(id)device didFailWithError:(id)error;
-(void)videoDeviceSessionFinished:(id)finished;
-(void)videoDeviceSessionBegan:(id)began;
-(void)videoDeviceCameraBack:(id)back;
-(void)videoDeviceCameraFront:(id)front;
@end

@protocol VoipStatusDelegate <NSObject>
-(void)OnStatusChanged:(int)changed withStatus:(int)status;
@end

@protocol IAPPEmoticonDownloadExt <NSObject>
@optional
-(void)onAppEmoticonDownloadFinished:(id)finished;
@end

@protocol PasswordLogicDelegate <NSObject>
@optional
-(void)passwordLogicPause;
-(void)passwordLogicStart;
-(void)passwordLogicCancel;
-(void)unknownFail;
-(void)checkHaveNotSetPassword;
-(void)checkHaveSetPassword;
-(void)setPassowrdFail;
-(void)setPasswordOK;
-(void)verifyPassowrdFail;
-(void)verifyPassowrdOK:(id)ok;
@end

@protocol IQQAccountMgrExt <NSObject>
@optional
-(void)OnLocalUnBindQQFail;
-(void)OnLocalUnBindQQOK;
-(void)OnUnBindQQFail;
-(void)OnUnBindQQOK;
-(void)OnBindQQFail;
-(void)OnBindQQOK;
@end

@protocol settingModifyEmailDelegate <NSObject>
@optional
-(void)setEmailPasswordOK;
-(void)saveNewEmail;
@end

@protocol settingModifyAliasDelegate
-(void)saveNewAlias;
@end

@protocol VoiceVerifyLanguageDelegate <NSObject>
-(void)onSelectLanguage:(id)language Code:(id)code;
@end

@protocol IAutoVerifySMSExt <NSObject>
@optional
-(void)OnHandleOpenAutoVerifySMS:(id)sms;
@end

@protocol VerifyCodeByVoiceViewControllerDelegate <NSObject>
-(void)onCallVoiceVerify:(id)verify;
@end

@protocol ReturnToSettingAccoutDelegate
-(void)ReturnToSettingAccout;
@end

@protocol IDCHostMgrExt <NSObject>
@optional
-(void)OnRegAgain;
-(void)OnIDCRedirectResendPBCgi:(id)cgi;
-(void)BindMobileAgain:(id)again;
-(void)OnAuthAgain;
@end

@protocol IRsaCertMgrExt <NSObject>
@optional
-(void)OnRsaCertFail;
-(void)OnRsaCertAuthAgain;
@end

@protocol FBGridViewDelegate <NSObject>
-(void)pickedImagePaneDidFinishPickingImages:(id)pickedImagePane;
@end

@protocol FBPickedImagePaneDelegate <NSObject>
-(void)FBPickedImagePaneDidClickedImageAtIndex:(int)fbpickedImagePane;
@end

@protocol IVoiceSearchExt <NSObject>
@optional
-(void)OnError:(int)error andSearchId:(unsigned long)anId;
-(void)OnGetSearchResult:(id)result andSearchId:(unsigned long)anId;
-(void)OnLevelMeter:(unsigned long)meter Peak:(float)peak;
-(void)OnEndRecord;
-(void)OnStartRecord;
@end

@protocol VoiceSearchContactsViewDelegate <NSObject>
-(id)voiceSearchResultsTableView:(id)view andCell:(id)cell cellForRowAtIndexPath:(id)indexPath;
-(int)voiceSearchResultsTableView:(id)view numberOfRowsInSection:(int)section;
-(void)voiceSearchResultsTableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)voiceSearchResultsTableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(unsigned long)getVoiceID;
-(void)voiceSearchContactsViewCancel;
-(void)voiceSearchContactsViewBack;
@end

@protocol BrandServiceMgrExt
@optional
-(void)onBrandServiceAddedNewItem;
-(void)onBrandServiceItem:(id)item shouldShowNewBrandTips:(BOOL*)tips;
-(void)onBrandServiceDeleteAdviceChanged:(id)changed;
-(void)onBrandServiceUnReadCountChanged;
-(void)onBrandServiceAppChanged:(id)changed;
-(void)onBrandServiceDataChanged:(BOOL*)changed;
@end

@protocol EmoticonSelectorViewDelegate <NSObject>
-(int)gestureActionModeAtIndex:(unsigned long)index;
@optional
-(void)onEditModeChanged:(BOOL)changed;
-(void)commitEditingStyleForRowAtIndex:(unsigned long)index;
-(void)onTipsHide;
-(void)didClickMenuItemAtIndex:(unsigned long)index withEmoticonIndex:(unsigned long)emoticonIndex;
-(void)didReleaseLongPressEmoticonAtIndex:(unsigned long)index;
-(void)didLongPressOnEmoticonAtIndex:(unsigned long)index;
-(void)didSelectEmoticonAtIndex:(unsigned long)index;
-(id)getMenuItemArray;
-(id)scrollViewBackground;
@end

@protocol EmoticonSelectorViewDataSource <NSObject>
-(float)EmoticonInterval;
-(float)EmoticonMarginTopOffset;
-(float)PageControlMarginButtom;
-(float)EmoticonHeightAtIndex:(unsigned long)index;
-(id)descriptionForEmoticonAtIndex:(unsigned long)index;
-(id)viewForEmoticonAtIndex:(unsigned long)index;
-(unsigned long)numberOfCols;
-(unsigned long)numberOfRows;
-(unsigned long)numberOfEmoticons;
@optional
-(BOOL)canEditEmoticonAtIndex:(unsigned long)index;
-(id)GetEmoticonView;
@end

@protocol MFHeaderViewDelegate <NSObject>
-(void)dismissSetWechatIDView;
-(void)dismissSystemMsg;
-(id)getMainView;
@end

@protocol PushSystemMsgViewDelegate <NSObject>
-(void)dismissSystemMsg;
@end

@protocol MMMusicPlayerExt
@optional
-(void)onMusicPlayStatusChanged;
-(void)onLevelMeterPeak:(float)peak;
@end

@protocol MMMusicLyricsExt <NSObject>
@optional
-(void)OnGetLyrics:(id)lyrics Lyrics:(id)lyrics2;
@end

@protocol IMusicPlayerExt <NSObject>
@optional
-(void)onLyricsChanged:(id)changed Lyrics:(id)lyrics;
-(void)onLevelMeterPeak:(float)peak;
-(void)onMusicPlayStatusChanged;
@end

@protocol IPushSystemMsgExt
@optional
-(void)shouldShowPushSoftWare:(id)ware;
-(void)shouldShowSystemMsg:(id)msg;
@end

@protocol IBakChatRecoverMgrExt <NSObject>
@optional
-(void)OnDecryptError;
-(void)OnCancel;
-(void)OnRecoverProgress:(unsigned)progress WithTotalCount:(unsigned)totalCount;
-(void)OnSuccess;
-(void)OnError:(unsigned)error;
-(void)OnRestart;
-(void)OnPause;
-(void)OnDownloaded;
-(void)OnDownloadProgress:(unsigned)progress WithTotalSize:(unsigned)totalSize;
-(void)OnGetChatList:(id)list;
@end

@protocol IBakChatUploadMgrExt <NSObject>
@optional
-(void)OnGetSessionSize:(id)size;
-(void)OnBakChatUploadMessage:(id)message;
@end

@protocol MemberDataLogicProtocol
@optional
-(id)filtContactsByName:(id)name;
-(id)getFilteredContacts;
-(void)cancelSearch;
-(void)doSearch:(id)search;
-(id)getAllContacts;
-(id)getItemInSection:(unsigned)section atRow:(unsigned)row;
-(unsigned)getSectionItemCount:(unsigned)count;
-(id)getKeyAtSection:(unsigned)section;
-(id)getKeyArray;
-(unsigned)getSectionCount;
-(unsigned)getTotalCount;
-(BOOL)removeContact:(id)contact;
-(void)reloadMemberList:(id)list;
-(void)sortKeys;
-(void)addContact:(id)contact;
@end

@protocol IMessageWrapExt <NSObject>
@optional
+(void)CreateVideoMsg:(id)msg ToUsr:(id)usr VideoInfo:(id)info retMessageWrap:(id*)wrap;
+(void)CreateExtendInfoWithUserName:(id)userName retExtendInfo:(id*)info retIsContinueDispatch:(BOOL*)dispatch;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
@end

@protocol MMResPackageMgrExt
@optional
-(void)onResPackageDownloadProcessUpdated:(id)updated downloadSize:(int)size totalSize:(int)size3;
-(void)onResPackageDownloadFailed:(id)failed;
-(void)onResPackageReady:(id)ready;
@end

@protocol INewArrivalExt
@optional
-(void)onBottleNewArrivalCountChange:(unsigned long)change;
-(void)onSXNewArrivalCountChange:(unsigned long)change;
-(void)onQQNewArrivalCountChange:(unsigned long)change;
@end

@protocol JSEventExt <NSObject>
@optional
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsJumpWCMall:(id)mall;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsSetPageState:(id)state;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsGetBrandWCPayRequeset:(id)requeset;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsHandlerHandle:(id)handle;
-(void)jsVideoStateChanged:(id)changed;
-(void)jsAudioStateChanged:(id)changed;
-(void)jsHandlerHandle:(id)handle;
@end

@protocol WCPayOpenApiExt <NSObject>
@optional
-(void)OnWCPayOpenApi:(id)api withAppID:(id)appID;
@end

@protocol ICheckQQExt
@optional
-(void)OnCheckQQ;
@end

@protocol MMConfigMgrExt <NSObject>
@optional
-(void)onMMConfigUpdated;
@end

@protocol DonateExt
@optional
-(void)onGetChatRoomDonateUrl:(id)url;
-(void)onVerifyPayTransition:(unsigned long)transition outTradeNo:(id)no;
-(void)onGetPersonalDonateHistory:(id)history totalCount:(unsigned long)count totalAmount:(unsigned long)amount;
-(void)onGetChatRoomDonorList:(id)list donateWebUrl:(id)url fotChatRoom:(id)room;
-(void)onWebDonateResult:(id)result attrs:(id)attrs;
-(void)onGetDonateInfo:(id)info forType:(unsigned long)type;
@end

@protocol UIApplicationDelegate <NSObject>
@optional
@property(retain, nonatomic) UIWindow* window;
-(void)application:(id)application didDecodeRestorableStateWithCoder:(id)coder;
-(void)application:(id)application willEncodeRestorableStateWithCoder:(id)coder;
-(BOOL)application:(id)application shouldRestoreApplicationState:(id)state;
-(BOOL)application:(id)application shouldSaveApplicationState:(id)state;
-(id)application:(id)application viewControllerWithRestorationIdentifierPath:(id)restorationIdentifierPath coder:(id)coder;
-(unsigned)application:(id)application supportedInterfaceOrientationsForWindow:(id)window;
-(void)applicationProtectedDataDidBecomeAvailable:(id)applicationProtectedData;
-(void)applicationProtectedDataWillBecomeUnavailable:(id)applicationProtectedData;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)application:(id)application handleEventsForBackgroundURLSession:(id)backgroundURLSession completionHandler:(id)handler;
-(void)application:(id)application performFetchWithCompletionHandler:(id)completionHandler;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification fetchCompletionHandler:(id)handler;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application willChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application didChangeStatusBarOrientation:(int)orientation;
-(void)application:(id)application willChangeStatusBarOrientation:(int)orientation duration:(double)duration;
-(void)applicationSignificantTimeChange:(id)change;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(BOOL)application:(id)application willFinishLaunchingWithOptions:(id)options;
-(void)applicationDidFinishLaunching:(id)application;
@end

@protocol ResourceMonitorDelegate <NSObject>
-(void)onUpdateResourceInfo:(id)info;
@end

@protocol ShareConfirmViewDelegate <NSObject>
@optional
-(void)OnStayAtWeChat:(id)weChat;
-(void)OnBackToApp:(id)app;
-(void)OnError:(id)error;
-(void)OnCancel:(id)cancel;
-(void)OnSend:(id)send;
@end

@protocol BrandSessionMgrExt
@optional
-(void)onBrandSessionsChanged;
-(void)onBrandSessionAllDeleted;
@end

@protocol MultiImageScrollViewDelegate <NSObject>
-(id)imageAtPage:(unsigned long)page;
-(id)viewAtPage:(unsigned long)page frame:(CGRect)frame;
@optional
-(void)onChangePage;
-(void)multiImageScrollViewWillBeginDragging;
-(void)onDoubleTap:(id)tap;
-(void)onSingleTap:(id)tap;
@end

@protocol MultiPickImagePanelDelegate <NSObject>
@optional
-(void)MultiPickImagePanelDidCancel:(unsigned long)multiPickImagePanel;
-(void)MultiPickImagePanelAddImage;
-(void)MultiPickImagePanelDidFinishPickingImages:(id)multiPickImagePanel;
@end

@protocol IDownloadImageExt <NSObject>
@optional
-(void)OnDownloadImagePart:(id)part PartLen:(unsigned long)len TotalLen:(unsigned long)len3;
-(void)OnDownloadImageOk:(id)ok;
-(void)OnDownloadImageFail:(id)fail;
-(void)OnDownloadImageExpired:(id)expired;
@end

@protocol IBrandCustomReportExt
@optional
-(void)onJumpToPOIView:(id)poiview;
-(void)onJumpToPicView:(id)picView;
-(void)onJumpToScanView:(id)scanView;
-(void)onJumpToWebView:(id)webView;
-(void)onRecordActionEvent:(id)event toBrand:(id)brand;
-(void)onReportClickEvent:(id)event toBrand:(id)brand;
@end

@protocol VoiceVoipTalkingViewDelegate <NSObject>
-(void)TalkingViewEndCall;
@end

@protocol VoipLoudspeakerModeSwitchDelegate <NSObject>
@optional
-(void)VoipLoudspeakerModeSwitchChangeMode:(unsigned long)mode;
@end

@protocol WCMultiImageScannerDelegate <NSObject>
-(void)onDeleteItemAtIndex:(unsigned)index;
@end

@protocol WCContactItemDeleteViewDelegate <NSObject>
@optional
-(void)onClickDeleteButton:(id)button withContact:(id)contact;
-(void)onClickHeadImage:(id)image withContact:(id)contact;
@end

@protocol WCSelectContactDelegate
@optional
-(void)OnWCSelectUsrNameList:(id)list;
@end

@protocol IWCOfflinePayLogicMgrExt <NSObject>
@optional
-(void)OnOfflinePayCertGet:(id)get Error:(id)error;
@end

@protocol BrandStoryMgrExt
@end

@protocol HDHeadImageViewDelegate <NSObject>
@optional
-(void)HDHeadImageWillAppear;
@end

@protocol SettingTencentWBDelegate <NSObject>
@optional
-(void)OnOpenTXWB:(BOOL)txwb;
-(void)OnSettingTencentWBReturn:(id)aReturn;
@end

@protocol IVoiceInputExt <NSObject>
@optional
-(void)OnError:(int)error andInputId:(unsigned long)anId;
-(void)OnGetText:(id)text andInputId:(unsigned long)anId;
-(void)OnLevelMeter:(unsigned long)meter Peak:(float)peak;
-(void)OnEndRecord;
-(void)OnStartRecord;
@end

@protocol NotifyFromPrtlDelegate
@optional
-(unsigned long)GetNetworkReachabilitySeed;
-(BOOL)IsLogIn;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
@end

@protocol IAsyncTask <NSObject>
@optional
-(void)stopTask;
-(void)startAsyncTask;
-(void)taskDidStoped;
-(void)asyncTaskDidStarted;
@end

@protocol NotifyFromEventDelegate
@optional
-(id)GetLocalInfo;
-(unsigned long)GetNetworkReachabilitySeed;
-(BOOL)IsLogIn;
-(void)SpeedyNotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
@end

@protocol IAppTrafficExt <NSObject>
@optional
-(void)onReceiveDataLen:(unsigned long)len;
-(void)onSendDataLen:(unsigned long)len;
@end

@protocol NSCopying
-(id)copyWithZone:(NSZone*)zone;
@end

@protocol IMMBizCenterExt <NSObject>
@optional
-(void)OnGetOrderList:(id)list Error:(id)error;
@end

@protocol CgiObjectEditDelegate <NSObject>
-(void)setObject:(id)object propertyName:(id)name;
@end

@protocol CgiPropertyEditDelegate <NSObject>
-(void)setProperty:(id)property section:(int)section;
@end

@protocol UIAccelerometerDelegate <NSObject>
@optional
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
@end

@protocol ActionRecognitionDelegate
@optional
-(void)ActionRecognitionShake;
-(void)ActionRecognitionAwayFromEar;
-(void)ActionRecognitionCloseToEar;
-(void)ActionRecognitionProximityChange;
@end

@protocol AVAudioSessionDelegate <NSObject>
@optional
-(void)inputIsAvailableChanged:(BOOL)changed;
-(void)endInterruption;
-(void)endInterruptionWithFlags:(unsigned)flags;
-(void)beginInterruption;
@end

@protocol IAUAudioDeviceExt <NSObject>
@optional
-(void)audioDeviceRestart:(id)restart;
-(void)audioDeviceResetCallback:(id)callback;
-(void)audioDevicePause:(id)pause;
-(void)audioDeviceForceStop:(id)stop;
-(void)audioDeviceMeterLevel:(id)level Peak:(float)peak;
-(void)audioDeviceUnPluginHeadset:(id)headset;
-(void)audioDevicePluginHeadset:(id)headset;
-(void)audioDeviceFarawayEar:(id)ear;
-(void)audioDeviceNearEar:(id)ear;
@end

@protocol AVAudioPlayerDelegate <NSObject>
@optional
-(void)audioPlayerEndInterruption:(id)interruption;
-(void)audioPlayerEndInterruption:(id)interruption withFlags:(unsigned)flags;
-(void)audioPlayerEndInterruption:(id)interruption withOptions:(unsigned)options;
-(void)audioPlayerBeginInterruption:(id)interruption;
-(void)audioPlayerDecodeErrorDidOccur:(id)audioPlayerDecodeError error:(id)error;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
@end

@protocol AQAudioPlayerDelegate
@optional
-(void)OnAQEndPlaying:(id)playing;
-(void)OnAQBeginPlaying:(id)playing ErrNo:(int)no;
@end

@protocol MMAudioDataReadStreamDelegate
-(void)onHandleReadEventfromStream:(id)stream eventType:(unsigned long)type;
@end

@protocol NSURLConnectionDelegate <NSObject>
@optional
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
@end

@protocol MMAudioDataWriteStreamDelegate
-(void)onHandleWriteEventfromStream:(id)stream eventType:(unsigned long)type;
@end

@protocol LoopPageScrollViewDataSourceDelegate <NSObject>
@optional
-(void)didTapPageAtNum:(unsigned long)num;
-(void)didChangeToPage:(unsigned long)page;
-(int)totalNumOfPage;
-(id)viewForPage:(id)page pageNum:(unsigned long)num;
@end

@protocol MMLanguagePackageDownloadMgrExt
@optional
-(void)onLanguageBundleUpdated:(id)updated;
@end

@protocol IMMRegionPackageDownloadMgrExt
@optional
-(void)onRegionPackageUpdated;
@end

@protocol CLLocationManagerDelegate <NSObject>
@optional
-(void)locationManager:(id)manager didFinishDeferredUpdatesWithError:(id)error;
-(void)locationManagerDidResumeLocationUpdates:(id)locationManager;
-(void)locationManagerDidPauseLocationUpdates:(id)locationManager;
-(void)locationManager:(id)manager didStartMonitoringForRegion:(id)region;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)locationManager:(id)manager monitoringDidFailForRegion:(id)monitoring withError:(id)error;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didExitRegion:(id)region;
-(void)locationManager:(id)manager didEnterRegion:(id)region;
-(void)locationManager:(id)manager rangingBeaconsDidFailForRegion:(id)rangingBeacons withError:(id)error;
-(void)locationManager:(id)manager didRangeBeacons:(id)beacons inRegion:(id)region;
-(void)locationManager:(id)manager didDetermineState:(int)state forRegion:(id)region;
-(BOOL)locationManagerShouldDisplayHeadingCalibration:(id)locationManager;
-(void)locationManager:(id)manager didUpdateHeading:(id)heading;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
@end

@protocol MKReverseGeocoderDelegate <NSObject>
-(void)reverseGeocoder:(id)geocoder didFailWithError:(id)error;
-(void)reverseGeocoder:(id)geocoder didFindPlacemark:(id)placemark;
@end

@protocol GetIPDelegate
@optional
-(void)SetIPListFromAuth:(id)auth;
-(void)SetIPFail:(id)fail;
-(void)SetIPOK:(id)ipok;
-(id)GetIPFromHost:(id)host;
@end

@protocol NetworkStatusDelegate
-(void)ReachabilityChange:(unsigned long)change;
@end

@protocol NotifyFromNetWorkDelegate
@optional
-(void)OnLongConnTimeOut;
-(void)OnGetHttpHead:(id)head IP:(id)ip Port:(unsigned long)port;
-(id)GetCurLongConnIP;
-(void)onShortFail;
-(void)onShortOK;
-(BOOL)IsLongConnConnected;
-(void)onSetIPFail;
-(void)onSetIPOK;
-(void)NotifyFromNetWork:(unsigned long)netWork MessageInfo:(id)info;
@end

@protocol iConsoleDelegate
-(void)handleConsoleCommand:(id)command;
@end

@protocol IAddressBookMgrExt
@optional
-(void)OnAddressBookLoadedComplete;
-(void)OnConfirmAddressBookStatus:(unsigned long)status;
@end

@protocol IContactProfileMgrExt
@optional
-(void)DidGetSXContactProfile:(id) withImage:(BOOL)image;
-(void)DidGetQQContactProfile:(id) withImage:(BOOL)image;
@end

@protocol DownloadVoiceDelegate
@optional
-(void)OnRecvData:(id)data MesLocalID:(unsigned long)anId MesSvrID:(unsigned long)anId3 CreateTime:(unsigned long)time VoiceTime:(unsigned long)time5 Offset:(unsigned long)offset Len:(unsigned long)len Data:(id)data8 EndFlag:(unsigned long)flag ErrNo:(unsigned long)no;
@end

@protocol IAudioToMessageExt
@optional
-(void)OnErrorByReceiver:(id)receiver ErrNo:(int)no;
-(void)OnErrorBySender:(id)sender ErrNo:(int)no;
-(void)OnMessageSentBySender:(id)sender;
-(void)OnAddMessageByReceiver:(id)receiver;
-(void)OnAddMessageBySender:(id)sender;
@end

@protocol IVideoExt
-(void)UpdateVideoMsg:(id)msg;
@end

@protocol IEmoticonExt
-(void)CheckQQPwd;
-(void)UpdateEmoticonMsg:(id)msg;
@end

@protocol IMsgExtendOperation <NSObject>
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
-(id)copy;
@optional
-(void)UpdateMassSendContent:(id)content;
-(BOOL)IsHDImg;
-(void)setImage:(id)image withImageInfo:(id)imageInfo isLongOriginImage:(BOOL)image3;
-(void)setImage:(id)image withData:(id)data withImageInfo:(id)imageInfo isLongOriginImage:(BOOL)image4;
-(void)setImage:(id)image withData:(id)data isLongOriginImage:(BOOL)image3;
-(void)setImage:(id)image isLongOriginImage:(BOOL)image2;
-(BOOL)GetDownloadThumbStatus:(unsigned*)status;
-(BOOL)isShowAppMessageBlockButton;
-(BOOL)isShowAppBottomButton;
-(unsigned long)GetPreviewType;
-(void)UpdateVideoStatus:(id)status;
-(void)SetPlaySounded:(BOOL)sounded;
-(BOOL)IsPlaySounded;
-(BOOL)IsRecording;
-(void)SetPlayed;
-(BOOL)IsDownloadEnded;
-(BOOL)IsUnPlayed;
-(BOOL)SaveMesVoice:(id)voice;
-(id)GetThumbPath;
-(void)ChangeForBackup;
-(void)UpdateGameInfo:(id)info;
-(id)GetGameStatReportString;
-(void)UpdateMsgSource;
-(id)GetContent;
-(void)UpdateContent:(id)content;
-(void)ChangeForDisplay;
@end

@protocol EmoticonDescMgrExt
@optional
-(void)onGetEmoticonClickFlag:(unsigned long)flag pid:(id)pid;
-(void)onGetEmoticonDesc:(id)desc forMd5:(id)md5;
-(void)onGetEmoticonDesc:(id)desc descList:(id)list;
@end

@protocol MMSessionStorage <NSObject>
-(void)UpdateSessionFilePath:(id)path;
-(void)SetSessionFailCount:(unsigned long)count;
-(unsigned long)GetSessionFailCount;
-(void)SetSessionVersion:(unsigned long)version;
-(unsigned long)GetSessionVersion;
-(long)GetSessionImportTime;
-(void)ImportSessions:(id)sessions;
-(void)DeleteSessions:(id)sessions;
-(void)DeleteSessionByUserName:(id)name;
-(void)AddOrModifySessions:(id)sessions;
-(void)ModifySession:(id)session;
-(void)AddSession:(id)session;
-(void)CleanupPreLoadSessionCache;
-(void)ASyncFulFillSession:(id)session;
-(void)FulFillSession:(id)session;
-(void)FulFillSessions:(id)sessions;
-(id)GetAllSession;
@end

@protocol LongPressMenuViewDelegate <NSObject>
-(void)onLongPressMenuViewCopy:(id)copy;
@end

@protocol UIHorizontalTableViewDelegate <NSObject>
-(float)horizontalTableView:(id)view widthForColumnAtIndex:(unsigned)index;
-(void)horizontalTableView:(id)view didSelectColumnAtIndex:(unsigned)index;
@end

@protocol UIHorizontalTableViewDataSource <NSObject>
-(id)horizontalTableView:(id)view viewForColumnAtIndex:(unsigned)index;
-(unsigned)numberOfColumnsInHorizontalTableView:(id)horizontalTableView;
@end

@protocol PeopleNearByListViewControllerDelegate <NSObject>
-(void)onBindPhoneBtnClicked;
-(void)onChatRoomNearByBtnClicked;
@end

@protocol PeopleNearByListHeaderViewDelegate <NSObject>
-(void)onChatRoomNearByBtnClicked;
@end

@protocol SeePeopleNearByUIDelegate <NSObject>
-(void)onJoinChatRoomFailed;
-(void)onJoinChatRoomFinishedWithResult:(id)result;
-(void)onJoinChatRoomStart;
-(void)showMessage:(id)message;
-(void)onGetCertificationFinish;
-(void)onSelectedWithLbsContactInfo:(id)lbsContactInfo;
-(void)onUpdateLbsContactInfoError:(int)error;
-(void)onUpdateLbsContactInfoFinishedWithData:(id)data;
-(void)onClearMyLbsDataFinishedWithResult:(BOOL)result;
@end

@protocol LocationRetrieveDelegate <NSObject>
-(void)onRetrieveLocationError:(int)error;
-(void)onRetrieveLocationTimeOut:(id)anOut;
-(void)onRetrieveLocationOK:(id)ok;
@optional
-(void)onRetrieveHeadingError:(int)error;
-(void)onRetrieveHeadingOK:(id)ok;
@end

@protocol ShakeCheckerDelegate <NSObject>
@optional
-(void)OnShake;
@end

@protocol ShakeLogicProxyDelegate <NSObject>
@optional
-(void)onShakeMusicReportFail:(int)fail ErrMsg:(id)msg;
-(void)onShakeMusicReportEndWithMusicItem:(id)musicItem Offset:(float)offset;
-(void)onShakePageGetFail:(id)fail;
-(void)onShakePageReportFail:(id)fail;
-(void)onShakePageGetEndWithResult:(id)result;
-(void)onShakePageReportEndWithResult:(id)result;
-(void)onShakeGetFail:(id)fail;
-(void)onShakeReportFail:(id)fail;
-(void)onShakeGetEndWithResult:(id)result;
-(void)onShakeReportEndWithResult:(id)result;
-(void)onShakeResultCountChanged;
-(void)onShakeLogicChanged;
@end

@protocol ShakePageLogicControllerExt
@optional
-(void)onShakePageBigImageLoaded:(id)loaded;
-(void)onShakePageUrlUpdateWithInfo:(id)info;
-(void)addNeedForUpdateShakePageUrl:(id)updateShakePageUrl;
@end

@protocol ShakeBgImgDownloadMgrExt
@optional
-(void)OnGetNewBgImg;
@end

@protocol ShakeListDelegate
-(void)showViewControllerFromList:(id)list;
-(void)onSelectedContactInfo:(id)info isFromList:(BOOL)list;
@end

@protocol shakeSingleViewDelegate <NSObject>
-(void)showHDHeadImage;
-(void)GoToSayHello:(id)sayHello andScene:(unsigned long)scene;
-(void)onFinishShowAnimation;
@end

@protocol ShakeMainFrameDelegate
-(int)getShakeLogicType;
-(id)getMsgForState:(unsigned long)state;
-(void)OnClickBannerBtn;
-(void)OnOpenSayHello;
-(void)OnAnimationEnd:(BOOL)end;
-(void)OnClickIntroButton;
@end

@protocol ShakePageListViewControllerDelegate <NSObject>
-(void)enableShake:(BOOL)shake;
-(void)showViewControllerFromList:(id)list;
@end

@protocol ShakeSettingViewControllerDelegate
-(void)SetMuteStauts:(int)stauts;
-(void)onSelectShakeSetting:(id)setting withData:(id)data;
@end

@protocol PageScrollViewDelegate <NSObject>
-(void)onChangedWithCurrentIndex:(int)currentIndex;
@optional
-(void)onDoubleClicked;
-(void)onSingleClicked;
@end

@protocol PageScrollViewDataSource <NSObject>
-(id)pageScrollView:(id)view viewForItem:(unsigned)item;
-(unsigned)numberOfItems:(id)items;
-(unsigned)currentIndex:(id)index;
@end

@protocol ShakePageImageViewDelegate
-(void)onShakePageImageViewLoaded:(id)loaded;
@end

@protocol ShareUploadTaskConfirmLogicHelperDelegate <NSObject>
@optional
-(void)OnSendUploadTaskCancel:(id)cancel;
-(void)OnSendUploadTaskFail:(id)fail WithError:(int)error;
-(void)OnSendUploadTaskOK:(id)ok;
@end

@protocol ShareMessageLogicHelperDelegate <NSObject>
@optional
-(void)onCancel:(id)cancel;
-(void)onSendFail:(id)fail;
-(void)onSendOK:(id)ok;
@end

@protocol ScrollViewPageCountDelegate <NSObject>
@optional
-(void)onCurrentPageChangeTo:(unsigned long)to;
@end

@protocol AMRAudioPlayerDelegate
@optional
-(void)OnAMREarTip;
-(void)OnAMREndPlaying:(id)playing isForceStop:(BOOL)stop;
-(void)OnAMRBeginPlaying:(id)playing ErrNo:(int)no;
-(void)OnAMRLevelMeter:(id)meter Peak:(float)peak;
@end

@protocol SPXAudioPlayerDelegate
@optional
-(void)OnSPXEarTip;
-(void)OnSPXEndPlaying:(id)playing isForceStop:(BOOL)stop;
-(void)OnSPXBeginPlaying:(id)playing ErrNo:(int)no;
-(void)OnSPXLevelMeter:(id)meter Peak:(float)peak;
@end

@protocol AMRAudioRecorderDelegate
@optional
-(void)OnAMRPart:(id)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnAMREndRecording:(id)recording;
-(void)OnAMRBeginRecording:(id)recording ErrNo:(int)no;
-(void)OnAMRLevelMeter:(id)meter Peak:(float)peak;
-(BOOL)OnPrepareSendAMR:(id)amr;
-(BOOL)StopRecord;
-(BOOL)CheckIfButtonPressing:(id)pressing;
@end

@protocol SPXAudioRecorderDelegate
@optional
-(void)OnSPXPart:(id)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnSPXEndRecording:(id)recording;
-(void)OnSPXBeginRecording:(id)recording ErrNo:(int)no;
-(void)OnSPXLevelMeter:(id)meter Peak:(float)peak;
-(BOOL)OnPrepareSendSPX:(id)spx;
@end

@protocol UploadVoiceDelegate
@optional
-(void)OnPartSent:(id)sent MesLocalID:(unsigned long)anId MesSvrID:(unsigned long)anId3 CreateTime:(unsigned long)time Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ErrNo:(unsigned long)no VoiceFormat:(unsigned long)format ForwardFlag:(unsigned long)flag10;
@end

@protocol BakChatRecoverNetworkHelperDelegate <NSObject>
@optional
-(void)OnDecryptDataError;
-(void)OnGetChatDataError;
-(void)OnGetChatData:(id)data WithLength:(unsigned)length InPath:(id)path;
-(void)OnGetChatHeadError;
-(void)OnGetChatHead:(id)head Type:(unsigned)type;
-(void)OnGetChatList:(id)list;
@end

@protocol BakChatRecoverFileHelperDelegate <NSObject>
-(void)onMessageRecoverError:(int)error;
-(void)onMessageRecoverDone:(id)done;
-(void)onMessageRecoverProgress:(id)progress;
@end

@protocol BakChatUploadNetworkDelegate <NSObject>
-(void)OnFailureGetBakChatUploadEnd;
-(void)OnGetBakChatUploadEnd:(unsigned)end;
-(void)OnTryUploadAfterFailureUploadBakChatUploadPackage;
-(void)OnFailureUploadBakChatPackage:(id)package;
-(void)OnSuccessUploadBakChatPackage:(id)package;
-(void)OnFailureGetBakChatUploadHead;
-(void)OnGetBakChatUploadHead:(unsigned)head;
@optional
-(void)OnFailureEncryptData:(id)data;
@end

@protocol EmoticonWebDownloadMgrExt
-(void)onDownloadFailedWithUrl:(id)url userData:(id)data errType:(int)type;
-(void)onDownloadFinishedWithUrl:(id)url userData:(id)data;
@end

@protocol IFriendListMgrExt
-(void)onFriendListUpdated:(id)updated ErrorCode:(unsigned long)code Message:(id)message;
@end

@protocol IBottleContactMgrExt
@optional
-(void)onNewBottleContact:(id)contact;
-(void)onSyncBottleContactEnd;
-(void)onModifyBottleContact:(id)contact;
@end

@protocol UIViewControllerAnimatedTransitioning <NSObject>
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@optional
-(void)animationEnded:(BOOL)ended;
@end

@protocol IEmoticonMgrExt
@optional
-(void)OnUpdateEmojiCatalog;
-(void)OnUpdateEmoticonList;
@end

@protocol INewSyncPluginExt
@optional
-(void)NotifyCmd:(id)cmd;
-(void)NotifyCheckSelector;
@end

@protocol CNetworkStatusExt
-(void)ReachabilityChange:(unsigned long)change;
@end

@protocol IEmoticonPackageMgrExt
@optional
-(void)OnEmoticonPackageDownloadStatusChanged:(id)changed IsDownloaded:(BOOL)downloaded;
-(void)OnUpdateEmoticonPackageList;
@end

@protocol EmoticonRecommendMgrExt
@optional
-(void)OnEmoticonRecommendListChanged;
-(void)OnEmoticonRecommendNewStateChanged:(BOOL)changed;
@end

@protocol WCDataProviderDelegate
@optional
-(void)onReturnServerConfig:(id)config;
-(void)onReturnShowFlag:(unsigned long)flag;
-(void)onReturnBGUserInfo:(id)info;
-(void)onReturnIsAllData:(id)data;
-(void)onNoMoreDataWithRet:(int)ret;
-(void)onTotalCountChanged:(int)changed;
-(void)onDataUpdated:(id)updated withChangedTime:(unsigned long)changedTime;
-(void)onDataUpdated:(id)updated andData:(id)data withChangedTime:(unsigned long)changedTime;
@end

@protocol WCMediaUploaderDelegate <NSObject>
-(void)onMediaUploadFinished:(id)finished uploadResult:(int)result uploadErrType:(int)type;
@end

@protocol WCDataUploaderDelegate <NSObject>
-(void)onDataUploadFinished:(id)finished uploadResult:(int)result uploadErrType:(int)type;
@end

@protocol WCTaskUploaderDelegate <NSObject>
-(void)onUploadFinished:(id)finished;
-(void)onMediaUploadFinished:(id)finished task:(id)task;
@end

@protocol WCBGImgLogicNotity
@optional
-(id)database;
-(id)getUploadingDataItems;
-(void)NotifyBackgroundChanged;
-(void)NotifyToDownloadMedia:(id)downloadMedia downloadType:(int)type;
-(void)NotifyToUploadWithTask:(id)task;
@end

@protocol WCCommentUploadMgrDelegate <NSObject>
-(void)onCommentReturn:(id)aReturn;
@end

@protocol WCNotificationCenterMgrDelegate <NSObject>
-(id)database;
-(void)onMessageUnReadCountChanged;
-(void)onReveiceStrangerMessage:(id)message;
-(void)onReveiceWCMessages:(id)messages;
-(void)onLatestWCObjectChanged:(id)changed;
@end

@protocol WCDownloadMgrDelegate <NSObject>
-(void)onCancelDownloadSuccess:(id)success downloadType:(int)type;
-(void)onDownloadFinish:(id)finish downloadType:(int)type;
-(void)onDownloadMediaProcessChange:(id)change downloadType:(int)type current:(int)current total:(int)total;
@end

@protocol WCTimelineDelegate
-(void)onNoMoreTimelineData;
-(void)onTimelineDataChangedWithAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
@end

@protocol WCUploadMgrDelegate
@optional
-(void)onUploadRestarted:(id)restarted;
-(void)onUploadFailed:(id)failed;
-(void)onUploadFinished:(id)finished;
-(void)onMediaUploadFinished:(id)finished;
@end

@protocol WCLogicMgrDelegate
@optional
-(void)onDataItemExposeFinisehd:(int)finisehd dataItem:(id)item;
-(void)onUpdateDataItemDetailFinisehd:(int)finisehd dataItem:(id)item;
-(void)onSetDataItemPublicFinished:(int)finished dataItemID:(id)anId;
-(void)onSetDataItemPrivateFinished:(int)finished dataItemID:(id)anId;
-(void)onCommentItemDeleteFinished:(int)finished commentItemID:(id)anId dataItemID:(id)anId3;
-(void)onDataItemDeleteFinished:(int)finished dataItemID:(id)anId;
@end

@protocol WCHomepageDelegate
-(void)onHomepage:(id)homepage BGImgChanged:(id)changed;
-(void)onHomepage:(id)homepage totalCountChanged:(int)changed;
-(void)onHomepageUpdate:(int)update username:(id)username withAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
@end

@protocol WCBGRecommendMgrDelegate
-(void)onBGStorageUpdated;
@end

@protocol IEmoticonDownloadExt
-(void)OnEmoticonDownload:(unsigned long)download;
@end

@protocol OnGotAppMsgHandleDelegate
-(void)OnEndWithOnGotAppMsgHandle:(id)onGotAppMsgHandle;
@end

@protocol SendAppMsgHandleDelegate <NSObject>
@optional
-(void)OnStayAtWechatWithSendAppMsgHandle:(id)sendAppMsgHandle;
-(void)OnSendAppMsgOK;
@end

@protocol MMHttpConnectionDelegate
@optional
-(void)HttpConnectionFail:(id)fail;
-(void)HttpConnectionFinished:(id)finished Data:(id)data ErrNo:(int)no;
-(void)HttpConnectionFinished:(id)finished cachekey:(id)cachekey response:(id)response ErrNo:(int)no;
-(void)HttpConnectionFinished:(id)finished XML:(id)xml ErrNo:(int)no;
@end

@protocol WTloginLogProtocol <NSObject>
-(void)logWithfile:(const char*)withfile line:(int)line func:(const char*)func msg:(id)msg;
@end

@protocol MCssParserDelegate
-(void)onCssParseEnd;
-(void)onCssParseStart;
-(id)onNextCssFile;
-(void)onParseErrorInFile:(id)file onLineNumber:(id)number withText:(id)text withErrorMessage:(id)errorMessage;
-(void)onScriptFunctionWithSelectors:(id)selectors withStatements:(id)statements;
-(void)onReceiveCssRulesetWithSelectors:(id)selectors withDeclarations:(id)declarations;
@end

@protocol UploadInputVoiceMgrDelegate <NSObject>
@optional
-(void)OnNetworkError:(unsigned long)error;
-(void)OnLocalFileOperationError;
-(void)OnGetText:(id)text VoiceId:(unsigned long)anId;
@end

@protocol WCPayOrderDetailHistoryViewControllerDelegate <NSObject>
-(void)OnClickedBrandAppUserName:(id)name NickName:(id)name2;
-(void)OnHistoryOrderDetailRightActionBack:(BOOL)back;
-(void)OnHistoryOrderDetailBack:(BOOL)back;
@end

@protocol UploadSearchVoiceMgrDelegate <NSObject>
@optional
-(void)OnNetworkError:(unsigned long)error;
-(void)OnLocalFileOperationError;
-(void)OnGetResult:(id)result VoiceId:(unsigned long)anId;
@end

@protocol WCBizPickerViewDelegate <NSObject>
@optional
-(void)WCBizPickerViewDidComplete:(id)wcbizPickerView;
-(void)WCBizPickerViewDidCancel;
@end

@protocol IVOIPSyncExt
@optional
-(void)OnGotRemoteControlStatus:(unsigned long)status;
-(void)OnGotRemoteRelayData:(id)data;
-(void)OnGotRemoteConnectData:(id)data;
-(void)OnGotRemoteStatus:(unsigned long)status;
-(void)OnSyncError:(int)error;
@end

@protocol AVVideoDataSource <NSObject>
-(int)VideoDevPutData:(char*)data imageWidth:(unsigned long)width imageHeight:(unsigned long)height;
@end

@protocol AUAudioDataSource <NSObject>
-(int)AudioDevGetData:(char*)data length:(unsigned long)length;
-(int)AudioDevPutData:(char*)data length:(unsigned long)length;
@optional
-(BOOL)isGetDataReady;
@end

@protocol IMMNewSessionMgrComparerExt <NSObject>
-(int)compareSessionInfo:(id)info toInfo:(id)info2;
@end

@protocol IMusicSearchExt <NSObject>
@optional
-(void)OnError:(int)error andSessionId:(unsigned long)anId;
-(void)OnGetMusicItem:(id)item andOffset:(float)offset andSessionId:(unsigned long)anId;
-(void)OnEndRecord;
-(void)OnStartRecord;
@end

@protocol LbsRoomSessionMgrDelegate <NSObject>
-(void)onQuitRoomFinishedWithSuccessFlag:(BOOL)successFlag;
@end

@protocol ICdnComMgrExt <NSObject>
@optional
-(void)OnCdnDownload:(id)download;
-(void)OnCdnUpload:(id)upload;
-(void)OnCdnDownloadProgress:(id)progress;
-(void)OnCdnUploadProgress:(id)progress;
-(void)OnSetCdnDnsInfo;
@end

@protocol MMGridViewDataSource <NSObject>
-(id)MMGridView:(id)view cellForItemAtIndex:(int)index;
-(CGSize)MMGridView:(id)view sizeForItemsInInterfaceOrientation:(int)interfaceOrientation;
-(int)numberOfItemsInMMGridView:(id)mmgridView;
@optional
-(BOOL)MMGridView:(id)view canDeleteItemAtIndex:(int)index;
@end

@protocol MMGridViewSortingDelegate <NSObject>
-(void)MMGridView:(id)view exchangeItemAtIndex:(int)index withItemAtIndex:(int)index3;
-(void)MMGridView:(id)view moveItemAtIndex:(int)index toIndex:(int)index3;
-(BOOL)MMGridView:(id)view canMoveItemAtIndex:(int)index toIndex:(int)index3;
@optional
-(BOOL)MMGridView:(id)view shouldAllowShakingBehaviorWhenMovingCell:(id)cell atIndex:(int)index;
-(void)MMGridView:(id)view didEndMovingCell:(id)cell;
-(void)MMGridView:(id)view didStartMovingCell:(id)cell AtIndex:(int)index;
@end

@protocol MMGridViewActionDelegate <NSObject>
-(void)MMGridView:(id)view didTapOnItemAtIndex:(int)index;
@optional
-(void)MMGridView:(id)view onDeleteAtIndex:(int)index;
-(BOOL)MMGridView:(id)view canEditAtIndex:(int)index;
-(void)MMGridView:(id)view changedEdit:(BOOL)edit;
-(void)MMGridView:(id)view processDeleteActionForItemAtIndex:(int)index;
-(void)MMGridViewDidTapOnEmptySpace:(id)mmgridView;
@end

@protocol MMGridViewTransformationDelegate <NSObject>
-(id)MMGridView:(id)view fullSizeViewForCell:(id)cell atIndex:(int)index;
-(CGSize)MMGridView:(id)view sizeInFullSizeForCell:(id)cell atIndex:(int)index inInterfaceOrientation:(int)interfaceOrientation;
@optional
-(void)MMGridView:(id)view didEndTransformingCell:(id)cell;
-(void)MMGridView:(id)view didEnterFullSizeForCell:(id)cell;
-(void)MMGridView:(id)view didStartTransformingCell:(id)cell;
@end

@protocol MMGridViewLayoutStrategy <NSObject>
+(BOOL)requiresEnablingPaging;
-(NSRange)rangeOfPositionsInBoundsFromOffset:(CGPoint)offset;
-(int)itemPositionFromLocation:(CGPoint)location;
-(CGPoint)originForItemAtPosition:(int)position;
-(CGSize)contentSize;
-(void)rebaseWithItemCount:(int)itemCount insideOfBounds:(CGRect)bounds;
-(void)setupItemSize:(CGSize)size andItemSpacingH:(int)h andItemSpacingV:(int)v withMinEdgeInsets:(UIEdgeInsets)minEdgeInsets andCenteredGrid:(BOOL)grid;
-(int)type;
@end

@protocol MMGridViewCellDelegate <NSObject>
-(void)onDeleteCell:(int)cell;
@end

@protocol MMImagePickerControlCenter <NSObject>
@property(assign, nonatomic) BOOL isOriginalImage;
@property(retain, nonatomic) NSString* currentAlbum;
@property(retain, nonatomic) NSString* finishWording;
@property(assign, nonatomic) int compressType;
@property(retain, nonatomic) NSArray* selectedImageURLs;
@property(assign, nonatomic) int maxImageCount;
@property(assign, nonatomic) BOOL showPreviewView;
@property(assign, nonatomic) BOOL needThumbImage;
@property(assign, nonatomic) BOOL canSendMultiImage;
@property(assign, nonatomic) BOOL canSendVideoMessage;
@property(assign, nonatomic) BOOL canSendOriginImage;
-(void)selectedVideo:(id)video;
-(void)selectedAssets:(id)assets;
-(void)cancelImagePicker;
@end

@protocol MMImagePreviewBrowserControllerDelegate <NSObject>
-(void)sendImageByOriginal:(BOOL)original;
@end

@protocol MMVideoPreviewBrowserControllerDelegate <NSObject>
-(void)sendVideoWithURL:(id)url;
@end

@protocol WCPayTenpayImportCardInfoViewControllerDelegate <NSObject>
-(void)WCPayTenpayImportCardInfoViewControllerReadAgreement;
-(void)WCPayTenpayImportCardInfoViewControllerNext;
-(void)WCPayTenpayImportCardInfoViewControllerCancel;
@end

@protocol MMImagePickerControllerDelegate <NSObject>
-(void)MMImagePickerControllerDidCancel:(id)mmimagePickerController;
-(void)MMImagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
@optional
-(void)MMVideoPickerControllerDidCancel:(id)mmvideoPickerController;
-(void)MMVideoPickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
@end

@protocol MMUIHookViewDelegate <NSObject>
-(void)OnMMUIHookViewFrameChanged:(id)changed;
@end

@protocol WXTalkMiniBarDelegate <NSObject>
-(void)onWXTalkMiniBarClick;
@end

@protocol BrandServiceListLogicControllerDelegate <NSObject>
-(void)onCreateAddBrandContactRightBtn;
@end

@protocol BrandServiceUIEventExt
@optional
-(void)OnDeleteAdviceMsgChange:(id)change;
-(void)OnGridCellClickWithCellInfo:(id)cellInfo;
@end

@protocol BrandServiceNothingToShowViewDelegate <NSObject>
-(id)getNavigationController;
@end

@protocol WindowDelegate
@optional
-(void)touchesCancelled_Window:(id)window withEvent:(id)event;
-(void)touchesEnded_Window:(id)window withEvent:(id)event;
-(void)touchesMoved_Window:(id)window withEvent:(id)event;
-(void)touchesBegan_Window:(id)window withEvent:(id)event;
@end

@protocol WCOfflinePayQRCodePayViewControllerDelegate <NSObject>
-(void)OnWCOfflinePayQRCodePayViewControllerBack;
@end

@protocol VideoVoipTalkingViewDelegate <NSObject>
-(void)TalkingViewEndCall;
@end

@protocol WCMallLogicMgrExt <NSObject>
@optional
-(void)OnWCMallShowStatusInMoreViewChanged;
-(void)OnWCMallActivityChanged;
-(void)OnGetWCMallLatestFunctionProductInfo:(id)info Remarks:(id)remarks ResponseRemarks:(id)remarks3 Error:(id)error;
-(void)OnGetWCMallFunctionProductList:(id)list FunctionId:(unsigned long)anId Error:(id)error;
-(void)OnGetWCMallFunctionList:(id)list GlobalList:(id)list2 NotShowTutorial:(BOOL)tutorial Error:(id)error;
@end

@protocol FavoritesBatchGetMgrDelegate <NSObject>
-(void)onBatchGetItemList:(id)list ErrCode:(int)code;
@end

@protocol FavoritesUploadMgrDelegate <NSObject>
@optional
-(void)onUploadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onUploadFavoritesItemFinished:(id)finished ErrCode:(int)code;
-(void)onUsedCapacityUpdate:(unsigned long long)update;
@end

@protocol FavoritesDownloadMgrDelegate <NSObject>
@optional
-(void)onDownloadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onDownloadFavoritesItemFinished:(id)finished ErrCode:(int)code;
@end

@protocol FavoritesSearchMgrDelegate <NSObject>
-(void)OnSearch:(id)search;
@end

@protocol FavoritesSyncMgrDelegate <NSObject>
@optional
-(void)OnNeedUpdateFavInfo;
-(void)OnSyncResult:(int)result;
@end

@protocol FavoritesAsyncUploadMgrDelegate <NSObject>
@optional
-(void)onAsyncUploadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onAsyncUploadFavoritesItemFinished:(id)finished ErrCode:(int)code;
@end

@protocol FavoritesBatchDelMgrDelegate <NSObject>
@optional
-(void)onBatchDelItemSuccess;
@end

@protocol IFavoritesExt <NSObject>
@optional
-(void)OnStartDownloadFavoritesItem:(id)item;
-(void)OnStartUploadFavoritesItem:(id)item;
-(void)OnRestartAllUploadFailItems;
-(void)OnHasAnyFavoriteData:(BOOL)data;
-(void)OnLoadMoreFavoritesItemFail;
-(void)OnUpdateItemDescription:(id)description ErrCode:(int)code;
-(void)OnUpdateItemRemark:(unsigned long)remark ErrCode:(int)code;
-(void)OnSearch:(id)search;
-(void)OnUploadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)OnDownloadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)OnFavoritesItemDownloadFinished:(id)finished ErrCode:(int)code;
-(void)OnNewFavoritesItemUpdate:(id)update;
-(void)OnRemoveFavoritesItem;
-(void)OnFavoritesItemStartAsyncUpload:(id)upload;
-(void)OnAddFavoritesItem:(id)item ErrCode:(int)code;
-(void)OnGetNextPageFavoritesItemList:(id)list ErrCode:(int)code HasMoreItems:(BOOL)items;
-(void)OnGetFirstPageFavoritesItemList:(id)list ErrCode:(int)code HasMoreItems:(BOOL)items;
@end

@protocol IMMImagePickerManagerExt <NSObject>
-(void)onMMImagePickerManagerShow;
-(void)onMMImagePickerManagerFinish;
@end

@protocol MultiImagePickerControllerDelegate <NSObject>
@optional
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingImages:(id)images;
@end

@protocol WCImageScrollViewDelegate <NSObject>
@optional
-(void)onDoubleTapWCImageScrollView;
-(void)onSingleTapWCImageScrollView;
@end

@protocol WCImageFullScreenViewContainerDelegate <NSObject>
-(void)onExposeWithDataItem:(id)dataItem;
-(void)onLongPressedWithMediaItem:(id)mediaItem;
-(void)onContainerAnimationHideStop;
-(void)onContainerAnimationHideStart;
-(void)onContainerAnimationShowStop;
-(void)onContainerAnimationShowStart;
-(void)animationHideWithRotate;
@end

@protocol MMExposeViewControllerDelegate <NSObject>
@optional
-(void)onExposeCancel;
-(void)onExposeComplete;
@end

@protocol FavoritesUploaderDelegate <NSObject>
-(void)onUsedCapacityUpdate:(unsigned long long)update;
-(BOOL)deleteCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(BOOL)updateCdnInfo:(id)info;
-(id)getUploadCdnInfoByLocalItemDataId:(id)anId andType:(int)type;
-(id)getNextUploadCdnInfoByLocalItemId:(unsigned long)anId;
-(void)onUploadFavItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onUploadFail:(id)fail ErrCode:(int)code;
-(void)onUploadFinished:(id)finished;
@optional
-(void)onCopyFileFinished:(id)finished;
@end

@protocol IOCRTransMgrExt <NSObject>
@optional
-(void)OnSendOCRImage:(id)image Err:(int)err;
@end

@protocol CameraScanUIDelegate <NSObject>
@optional
-(id)getScanQRCodeTitle;
-(BOOL)shouldDirectShowImagePicker;
@end

@protocol CameraScanLogicDelegate <NSObject>
-(void)obtainScanResultDidFinish:(id)obtainScanResult;
-(BOOL)shouldBackToSessionImmediately;
-(BOOL)shouldObtainScanResult;
@end

@protocol BaseScanLogicDelegate <NSObject>
@optional
-(float)getBottomBarHeight;
-(float)getTopPadding;
-(id)getMainViewController;
-(void)onShowAlertWording;
-(void)onUpdateWording;
-(void)onStopScanAnimation;
-(void)onStartScanAnimation;
-(void)onStopLoading;
-(void)onStartLoading;
-(void)onPlaySound;
-(void)onPopViewControllerCount:(int)count animated:(BOOL)animated;
-(void)onPushViewContoller:(id)contoller animated:(BOOL)animated;
@end

@protocol IScanBookMgrExt <NSObject>
@optional
-(void)OnGetRemoteProductItem:(id)item Error:(int)error;
-(void)OnSendSBImageError:(int)error;
-(void)OnSendSBImage:(unsigned)image ScanItem:(id)item ImageType:(int)type;
@end

@protocol CameraScannerViewDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
@end

@protocol BookScannerDelegate <NSObject>
@optional
-(void)onSendDataLength:(unsigned)length;
-(void)onScanBookError:(int)error;
-(void)onGotScanItem:(id)item;
@end

@protocol MKAnnotation <NSObject>
@optional
@property(readonly, assign, nonatomic) NSString* subtitle;
@property(readonly, assign, nonatomic) NSString* title;
@required
@property(readonly, assign, nonatomic) XXStruct_zYrK5D coordinate;
@optional
-(void)setCoordinate:(XXStruct_zYrK5D)coordinate;
@end

@protocol IPreEnterWechatLogicExt <NSObject>
-(void)onPreEnterWechatDone;
@end

@protocol FavoritesDownloaderDelegate <NSObject>
-(BOOL)deleteDownloadCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(id)getNextDownloadCdnInfoByLocalItemId:(unsigned long)anId;
-(BOOL)updateDownloadCdnInfo:(id)info;
-(void)onDownloadFavItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onDownloadFail:(id)fail ErrCode:(int)code;
-(void)onDownloadFinished:(id)finished;
@end

@protocol WCOfflinePayEnableResultViewControllerDelegate <NSObject>
-(void)OnWCOfflinePayEnableResultViewControllerReturn;
-(id)GetWCOfflinePayEnableLabelText;
@end

@protocol OCRTransScannerDelegate <NSObject>
@optional
-(void)onSendDataLength:(unsigned)length;
-(void)onOCRTransError:(int)error;
-(void)onGotOCRResultOrign:(id)orign Translation:(id)translation;
@end

@protocol AQAudioRecorderDelegate
@optional
-(void)OnAQPart:(id)part Duration:(float)duration EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnAQEndRecording:(id)recording;
-(void)OnAQBeginRecording:(id)recording ErrNo:(int)no;
@end

@protocol UploadAFPMgrDelegate <NSObject>
@optional
-(void)OnNetworkError:(unsigned long)error;
@end

@protocol UploadMusicFPMgrDelegate <UploadAFPMgrDelegate>
@optional
-(void)OnGetMusicItem:(id)item Offset:(float)offset FPId:(unsigned long)anId;
@end

@protocol WCBaseInfoItemDelegate <NSObject>
@optional
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)WCBaseInfoItemEndEdit:(id)edit;
-(void)WCBaseInfoItemBeginEdit:(id)edit;
-(void)WCBaseInfoItemCancelEdit:(id)edit;
@end

@protocol WCPayFillCardInfoViewControllerDelegate <NSObject>
-(void)FillCardInfoReadAgreement;
-(void)FillCardInfoNext:(id)next;
-(void)FillCardInfoCancel;
@end

@protocol WCPayFillCardNumberViewControllerDelegate <NSObject>
-(void)FillCardNumberNext:(id)next;
-(void)FillCardNumberCancel:(BOOL)cancel;
@end

@protocol WCPayPayPwdViewControllerDelegate <NSObject>
-(void)PayPwdRightActionBack;
-(void)PayPwdBack;
@optional
-(void)SetPayPwdNext:(id)next;
-(void)VerifyPayPwdNext:(id)next;
@end

@protocol WCPayVerifyPayCardViewControllerDelegate <NSObject>
-(void)VerifyPayCardAgain:(id)again;
-(void)VerifyPayCardNext:(id)next;
-(void)VerifyPayCardBack;
@optional
-(void)VerifyPayCardModifyPhone:(id)phone;
@end

@protocol WCPayOrderHistoryViewControllerDelegate <NSObject>
-(void)OnSelectedOrderDetail:(id)detail;
-(void)OnOrderListBack;
-(void)OnLoadMoreOrderList;
-(BOOL)HasMoreOrderList;
-(void)OnDelAllOrder;
-(void)OnDelOrder:(id)order;
@end

@protocol WCPayOverseasCarTipDelegate <NSObject>
-(void)onPushWebView:(id)view;
-(void)onDisagree;
-(void)onAgree:(BOOL)agree;
@end

@protocol WCPayOrderDetailViewControllerDelegate <NSObject>
-(void)OrderDetailBack;
-(void)OrderDetailAdd:(id)add;
-(void)OrderDetailPay:(id)pay;
@end

@protocol WCPayResetPhoneViewViewControllerDelegate <NSObject>
-(void)OnResetPhoneNext:(id)next;
-(void)OnResetPhoneCancel;
@end

@protocol WCPayResetBindedCardInfoViewControllerDelegate <NSObject>
-(void)OnResetBindedCardInfoNext:(id)next;
-(void)OnResetBindedCardInfoCancel;
@end

@protocol WCPayOrderPayConfirmViewDelegate <NSObject>
-(void)onOrderPayConfirmViewCancel;
-(void)onOrderPayConfirmViewPay:(id)pay;
@end

@protocol WCPayPayCardAvailableListViewControllerDelegate <NSObject>
-(void)OnAddPayCard;
-(void)OnPayCardAvailbleListNext:(id)next;
-(void)OnPayCardAvalibleListRightActionBack;
-(void)OnPayCardAvalibleListBack;
@end

@protocol WCPayResetPwdCardInfoViewControllerDelegate <NSObject>
-(void)ResetPwdCardInfoReadAgreement;
-(void)ResetPwdCardInfoNext:(id)next;
-(void)ResetPwdCardInfoCardInfoCancel;
@end

@protocol WCPayResetPwdBindedCardListViewControllerDelegate <NSObject>
-(void)OnResetPwdBindedCardListNewCardClicked;
-(void)OnResetPwdBindedCardListNext;
-(void)OnResetPwdBindedCardListBack;
@end

@protocol WCPayResetPwdBindCardViewControllerDelegate <NSObject>
-(void)OnWCPayResetPwdBindCardBack;
-(void)OnWCPayResetPwdBindCardNext;
@end

@protocol WCPayCardDetailViewControllerDelegate <NSObject>
@optional
-(void)CardDetailBack;
-(void)CardDetailAddOfflineFunction:(id)function;
-(BOOL)IsNeedShowAddOfflineFunctionButton;
-(void)CardDetailExpiredUnbindCard:(id)card;
-(void)CardDetailSetMainBankCard:(id)card;
-(void)CardDetailUnbindCard:(id)card;
@end

@protocol WCPayNetworkHelperDelegate <NSObject>
-(void)OnGetBizOrderListErrorResponse:(id)response Request:(id)request;
-(void)OnGetBizOrderListResponse:(id)response Request:(id)request;
-(void)OnWCBizIapOrderDetailErrorResponse:(id)response Request:(id)request;
-(void)OnWCBizIapOrderDetailResponse:(id)response Request:(id)request;
-(void)OnGetA8KeyLogicErrorResponse:(id)response Request:(id)request;
-(void)OnGetA8KeyLogicResponse:(id)response Request:(id)request;
-(void)OnWCPaySubscribeServiceAppErrorResponse:(id)response Request:(id)request;
-(void)OnWCPaySubscribeServiceAppResponse:(id)response Request:(id)request;
-(void)OnWCPayQuitQRScanPayErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayQuitQRScanPayResponse:(id)response Request:(id)request;
-(void)OnWCPaySubmitMallPrepayErrorResponse:(id)response Request:(id)request;
-(void)OnWCPaySubmitMallPrepayResponse:(id)response Request:(id)request;
-(void)OnWCPayGenPrepayErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayGenPrepayResponse:(id)response Request:(id)request;
-(void)OnWCPayGetAppAuthUrlErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayGetAppAuthUrlResponse:(id)response Request:(id)request;
-(void)OnWCPayDelOrderHistoryErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayDelOrderHistoryResponse:(id)response Request:(id)request;
-(void)OnWCPayGetOrderHistoryErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayGetOrderHistoryResponse:(id)response Request:(id)request;
-(void)OnWCToTenpayCommonErrorResponse:(id)tenpayCommonErrorResponse Request:(id)request;
-(void)OnWCToTenpayCommonResponse:(id)tenpayCommonResponse Request:(id)request;
@end

@protocol WCPayBindedCardPikerItemDelegate <NSObject, WCBaseInfoItemDelegate>
@optional
-(void)OnChooseCard:(id)card;
-(void)OnChooseNewCard:(id)card;
@end

@protocol WCPayOrderDetailViewDelegate <NSObject>
-(void)OnWCPayOrderDetailViewHeightChange:(id)change;
@end

@protocol WCPayAreaItemDelegate <NSObject>
-(void)onWCPayAreaItemDidChoseRegion:(id)onWCPayAreaItem;
@end

@protocol WCBizTipViewDelegate <NSObject>
-(void)OnWCBizTipViewClosed;
@end

@protocol WCPayHistoryOrderDetailViewDelegate <NSObject>
-(void)OnClickedBrandProfile:(id)profile NickName:(id)name;
@end

@protocol IAPExt <NSObject>
@optional
-(void)onRestoreFail;
-(void)onRestoreSuccessForProduct:(id)product;
-(void)onPurchaseFailForProduct:(id)product;
-(void)onPurchaseCancelForProduct:(id)product;
-(void)onPurchaseSuccessForProduct:(id)product;
-(void)onGetProduct:(id)product invalidProductID:(id)anId;
@end

@protocol IBrandIAPMgrExt
@optional
-(void)OnBrandIAPGetResult:(id)result Error:(int)error;
-(void)OnBrandIAPPayFailForProduct:(id)product;
-(void)OnBrandIAPPayCancelForProduct:(id)product;
-(void)OnBrandIAPPaySuccessForProduct:(id)product;
-(void)OnBrandIAPPayRequestForProduct:(id)product;
-(void)OnBrandIAPPrepay:(id)prepay FailedWithError:(int)error;
-(void)OnBrandIAPPrepay:(id)prepay GetProductID:(id)anId ExtInfo:(id)info;
@end

@protocol WCAddressInfoViewControllerDelegate <NSObject>
-(void)AddressInfoNext:(id)next;
-(void)AddressInfoCancel;
@end

@protocol WCAddressListViewControllerDelegate <NSObject>
-(void)AddressListDelete:(id)aDelete;
-(void)AddressListEdit:(id)edit;
-(void)AddressListAdd;
-(void)AddressListComplete:(id)complete;
-(void)AddressListBack;
@end

@protocol TenpayPasswordCtrlDelegate <NSObject>
@optional
-(void)passwordCtrlDidEndEditing:(id)passwordCtrl;
-(void)passwordCtrlDidBeginEditing:(id)passwordCtrl;
-(void)passwordCtrlShouldChange:(id)passwordCtrl;
@end

@protocol TenpaySecureCtrlDelegate <NSObject>
@optional
-(void)tenpayCtrlShouldChange:(id)tenpayCtrl;
-(void)tenpayCtrlShouldReturn:(id)tenpayCtrl;
@end

@protocol WCAddressNetworkDelegate <NSObject>
-(void)OnSelectWCAddress:(id)address Request:(id)request Error:(id)error;
-(void)OnModifyWCAddress:(id)address Request:(id)request Error:(id)error;
-(void)OnQueryWCAddress:(id)address Request:(id)request Error:(id)error;
-(void)OnRemoveWCAddress:(id)address Request:(id)request Error:(id)error;
-(void)OnAddWCAddress:(id)address Request:(id)request Error:(id)error;
@end

@protocol WCAddressLogicMgrExt <NSObject>
@optional
-(void)OnGetGetAllAddressStageData:(id)data Error:(id)error;
-(void)OnGetAllAddress:(id)address UserName:(id)name NickName:(id)name3 Error:(id)error;
-(void)OnSetRecentlyUsedAddress:(id)address Error:(id)error;
-(void)OnModifyAddress:(id)address Error:(id)error;
-(void)OnDelAllAddress:(id)address;
-(void)OnDelAddress:(id)address Error:(id)error;
-(void)OnAddAddress:(id)address Error:(id)error;
-(void)OnGetLatestAddress:(id)address UserName:(id)name NickName:(id)name3 Error:(id)error;
@end

@protocol FavTextEditDelegate <NSObject>
-(void)onFavTextEditOK:(id)ok;
@end

@protocol FavImageFullScreenViewContainerDelegate <NSObject>
-(void)onLongPressedWithMediaItem:(id)mediaItem;
-(void)onContainerAnimationHideStop;
-(void)onContainerAnimationHideStart;
-(void)onContainerAnimationShowStop;
-(void)onContainerAnimationShowStart;
-(void)animationHideWithRotate;
@end

@protocol IFavPostVoiceViewExt
-(void)OnClosePostAnimate;
-(void)OnFavPostVoiceClose;
-(void)OnFavPostVoiceComplete:(id)complete VoiceTime:(float)time VoiceFmt:(unsigned long)fmt;
@end

@protocol MyFavoritesBaseCellDelegate <NSObject>
-(void)PushXMLContentForItem:(id)item;
@end

@protocol FavImageViewDelegate <NSObject>
@optional
-(void)onLongPressedFavImage:(id)image;
-(void)onClickFavImage:(id)image;
@end

@protocol FavTextDetailDelegate <NSObject>
-(void)DeleteTextFavItem:(id)item;
@end

@protocol FavImgDetailDelegate <NSObject>
-(void)DeleteImgFavItem:(id)item;
@end

@protocol FavVideoPlayDelegate <NSObject>
-(void)DeleteVideoFavItemInPlayer:(id)player;
@end

@protocol FavVideoDetailDelegate <NSObject>
-(void)DeleteVideoFavItem:(id)item;
-(void)OpenVideo:(id)video;
@end

@protocol FavVoiceDetailDelegate <NSObject>
-(void)DeleteVoiceFavItem:(id)item;
@end

@protocol FavLocDetailDelegate <NSObject>
-(void)DeleteLocFavItem:(id)item;
@end

@protocol FavFileDetailDelegate <NSObject>
-(void)DeleteFileFavItem:(id)item;
-(void)OpenVideoFile:(id)file;
@end

@protocol ProductDetailViewControllerDelegate <NSObject>
@optional
-(void)onDelete:(id)aDelete;
@end

@protocol FavAudioPlayerDelegate
@optional
-(void)OnEarTip;
-(void)OnEndPlaying:(unsigned long)playing isForceStop:(BOOL)stop;
-(void)OnBeginPlaying:(unsigned long)playing ErrNo:(int)no;
@end

@protocol TextInputViewDelegate <NSObject>
-(void)onTextInputComplete:(id)complete WithTag:(int)tag;
@end

@protocol FavLocRemarkDelegate <NSObject>
@optional
-(void)onFavLocAddOK;
-(void)onFavLocReamrkComplete:(id)complete;
@end

@protocol FavAudioCellDelegate
-(void)OnAudioItemClicked:(id)clicked ToPlay:(BOOL)play;
@end

@protocol MyFavFiltersViewDelegate
-(void)onClickOnType:(int)type;
@end

@protocol EmoticonStoreMgrExt
@optional
-(void)OnBuyEmoticonItemAlertStepTwo:(id)two;
-(void)OnBuyEmoticonItemAlertStepOne:(id)one ShouldShow:(BOOL*);
-(void)OnEmoticonStoreDownloadBeforeFailed_StepTwo:(id)two;
-(void)OnEmoticonStoreDownloadBeforeFailed_StepOne:(id)one ShouldContinueToNextStep:(BOOL*);
-(void)OnExchangedAfterBuySuccess:(BOOL*)success;
-(void)OnBuyEmoticonItemCanceled:(id)canceled;
-(void)OnBuyEmoticonItemFailed:(id)failed;
-(void)OnBuyEmoticonItemSuccess:(id)success;
-(void)OnStoreListChanged:(id)changed withRet:(int)ret;
@end

@protocol EmoticonBoughtListMgrExt
@optional
-(void)OnRestoreEmoticonItemFailed;
-(void)OnRestoreEmoticonItemSuccess;
-(void)OnBoughtListChanged:(id)changed withRet:(int)ret;
@end

@protocol EmoticonStoreCellDelegate <NSObject>
-(void)OnShowAlertWithIKnow:(id)iknow;
-(void)OnShowAlertWithOK:(id)ok;
-(void)OnStopLoading;
-(void)OnStopLoadingAndShowError:(id)error;
-(void)OnStopLoadingAndShowOK:(id)ok;
-(void)OnStartLoadingAndShowStringBlocked:(id)blocked;
-(void)OnStartLoadingAndShowString:(id)string;
@end

@protocol FavVoiceViewDelegate
-(void)OnVoiceNodeClicked:(BOOL)clicked;
@end

@protocol SKStoreProductViewControllerDelegate <NSObject>
@optional
-(void)productViewControllerDidFinish:(id)productViewController;
@end

@protocol ISvrErrorExt <NSObject>
-(void)OnGetSvrError:(id)error Url:(id)url TimeOut:(unsigned long)anOut;
@end

@protocol ScanBarcodeExt <NSObject>
-(void)OnSendBarcode:(id)barcode Err:(int)err;
@end

@protocol BarcodeScannerDelegate <NSObject>
@optional
-(void)onGotBarcode:(id)barcode Type:(id)type;
@end

@protocol SKPaymentTransactionObserver <NSObject>
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
@optional
-(void)paymentQueue:(id)queue updatedDownloads:(id)downloads;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueue:(id)queue removedTransactions:(id)transactions;
@end

@protocol SKRequestDelegate <NSObject>
@optional
-(void)request:(id)request didFailWithError:(id)error;
-(void)requestDidFinish:(id)request;
@end

@protocol SKProductsRequestDelegate <SKRequestDelegate>
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
@end

@protocol MotionDetectorDelegate <NSObject>
@optional
-(void)feedbackCameraFocused;
-(void)feedbackMotionStateChanged:(int)changed;
@end

@protocol WCAccountLoginFirstViewControllerDelegate <NSObject>
-(void)onFirstViewLogin;
-(void)onFirstViewRegester;
@end

@protocol WCAccountLoginFirstUserViewControllerDelegate <NSObject>
-(void)onFacebookConnect;
-(void)onForgetPwd;
-(void)onFirstUserBack;
-(void)onFirstUserLoginUserName:(id)name Pwd:(id)pwd;
@end

@protocol WCAccountLoginLastUserViewControllerDelegate <NSObject>
-(void)onLastUserChangeAccount;
-(void)onLastUserRegister;
-(void)onForgetPwd;
-(void)onLastUserLoginUserName:(id)name Pwd:(id)pwd;
@end

@protocol WCAccountGraphicVerifyViewControllerDelegate <NSObject>
-(void)onGraphicVerifyChangeImage;
-(void)onGraphicVerifyBack;
-(void)onGraphicVerifyWithVerifyCode:(id)verifyCode;
@end

@protocol WCAccountNewDeviceViewControllerDelegate <NSObject>
-(void)onNewDeviceVerifyPhone;
-(void)onNewDeviceBack;
@end

@protocol WCAccountPhoneVerifyViewControllerDelegate <NSObject>
@optional
-(void)onSignUpWithEmail;
-(void)onFacebookConnect;
-(void)onPhoneVerifyNext:(id)next;
-(void)onPhoneVerifyAgain;
-(void)onPhoneVerifyVoice;
-(void)onPhoneVerifyBack;
@end

@protocol WCAccountVoiceVerifyViewControllerDelegate <NSObject>
-(void)onVoiceVerifyGetVerifyCode:(id)code;
-(void)onVoiceVerifyBack;
@end

@protocol WCAccountRegisterViewControllerDelegate <NSObject>
-(void)onGetSuggestAlias:(id)alias alias:(id)alias2;
-(void)onRegNickNameReg:(id)reg alias:(id)alias headImage:(id)image;
-(void)onRegNickNameBack;
@end

@protocol WCAccountLoginByPhonePwdViewControllerDelegate <NSObject>
-(void)onByPhonePwdLoginByVerifyCode;
-(void)onByPhonePwdLoginWithPwd:(id)pwd;
-(void)onByPhonePwdBack;
@end

@protocol ShareFavoritesConfirmLogicHelperDelegate <NSObject>
@optional
-(void)OnShareFavoritesItemCancel:(id)cancel;
-(void)OnShareFavoritesItemFail:(id)fail WithError:(int)error;
-(void)OnShareFavoritesItemOK:(id)ok;
@end

@protocol IEmoticonPackageStateMgrExt
-(void)OnUpdateEmoticonPackageState:(id)state toState:(int)state2;
@optional
-(void)OnBuyItemCancel:(id)cancel;
-(void)OnBuyItemFailed:(id)failed;
-(void)OnBuyItemSuccess:(id)success;
-(void)OnDownloadProgressChanged:(id)changed CurrLength:(unsigned)length TotalLength:(unsigned)length3;
@end

@protocol IRadarSearchExt <NSObject>
-(void)OnRetrieveLocationOk;
-(void)OnRetrieveLocationTimeout;
-(void)OnRetrieveLocationError:(int)error;
-(void)OnCreateGroup:(int)group;
-(void)OnVerifyUsr:(id)usr ErrCode:(int)code;
-(void)OnAddFriend:(id)aFriend ErrCode:(int)code;
-(void)OnRadarSearch:(id)search ErrCode:(int)code;
@end

@protocol IScanStreetViewMgrExt <NSObject>
@optional
-(void)OnSendStreetViewLocation:(id)location Err:(int)err;
@end

@protocol ChatRoomMemberGridViewDelegate <NSObject>
-(void)extendEditingMemberList;
-(void)shrinkMemberList;
-(void)extendMemberList;
-(void)onDeleteMember:(id)member;
-(void)addMember;
-(void)openContactInfo:(id)info;
-(void)onEnterChat;
@end

@protocol WCAccountFillPhoneViewControllerDelegate <NSObject>
@optional
-(void)onFillPhoneBindAgreeMobileCanBeFound:(BOOL)found;
-(void)onFillPhoneRegByEmail;
-(void)onFillPhoneNext:(id)next phoneNumber:(id)number;
-(void)onFillPhoneBack;
-(void)onFillPhoneLoginByQQ;
@end

@protocol AsyncImageViewDelegate <NSObject>
@optional
-(void)touchesCancelled_AsyncImageView:(id)view withEvent:(id)event;
-(void)touchesEnded_AsyncImageView:(id)view withEvent:(id)event;
-(void)touchesMoved_AsyncImageView:(id)view withEvent:(id)event;
-(void)touchesBegan_AsyncImageView:(id)view withEvent:(id)event;
@end

@protocol QQPimEngineLoginDelegate <NSObject>
-(void)pimEngineLoginVerifyMobileAccountFailed:(id)failed withResultCode:(int)resultCode;
-(void)pimEngineLoginVerifyMobileAccountSuccess:(id)success;
-(void)pimEngineLoginRegisterMobileAccountFailed:(id)failed withResultCode:(int)resultCode;
-(void)pimEngineLoginRegisterMobileAccountSuccess:(id)success;
-(void)pimEngineLoginFailed:(id)failed withResultCode:(int)resultCode;
-(void)pimEngineLoginSuccess:(id)success;
-(void)pimEngineLoginNeedPimPassword:(id)password;
-(void)pimEngineLoginNeedVerifyCode:(id)code verifyCodeURL:(id)url;
@end

@protocol QQPimEngineSyncDelegate <NSObject>
-(void)pimEngineSyncInterruptBecauseOfNetworkError:(id)networkError;
-(void)pimEngineSyncFailed:(id)failed reason:(int)reason;
-(void)pimEngineSyncSuccess:(id)success withStatics:(id)statics;
-(void)pimEngineSyncProgressChanged:(id)changed currentProgress:(float)progress;
-(void)pimEngineSyncBegin:(id)begin;
@end

@protocol QQPimEngineQueryUtilDelegate <NSObject>
-(void)pimEngineQueryUtil:(id)util totalLocalResult:(id)result;
-(void)pimEngineQueryUtilTotalServerResultFailed:(id)failed;
-(void)pimEngineQueryUtil:(id)util totalServerResult:(id)result;
@end

@protocol WCOfflinePayNetworkHelperDelegate <NSObject>
-(void)OnWCToTenpayCommonErrorResponse:(id)tenpayCommonErrorResponse Request:(id)request;
-(void)OnWCToTenpayCommonResponse:(id)tenpayCommonResponse Request:(id)request;
@end

@protocol TakeOrSelectHeadImageLogicDelegate <NSObject>
-(void)onGetHeadImage:(id)image;
@end

@protocol WCAccountLogicDelegate <NSObject>
@optional
-(void)onGetQQVerifyImage:(id)image verifyCodeId:(id)anId verifyCodeImg:(id)img imgEncryptKey:(id)key;
-(void)onManualAuth:(id)auth authInfo:(id)info;
-(void)onCheckEmailRegVerifyCode:(id)code ticket:(id)ticket StyleKeyValue:(id)value;
-(void)onGetEmailRegVerifyCode:(id)code;
-(void)onGetSuggestAlias:(id)alias arrUserName:(id)name verifySignature:(id)signature verifyBuffer:(id)buffer userNameRet:(long)ret;
-(void)onRegisterByEmail:(id)email RegResp:(id)resp;
-(void)onRegisterByQQ:(id)qq RegResp:(id)resp;
-(void)onRegisterByMobile:(id)mobile RegResp:(id)resp;
-(void)onCheckForgetPwdVerifyCode:(id)code userName:(id)name password:(id)password StyleKeyValue:(id)value;
-(void)onCheckSafeDeviceVerifyCode:(id)code authTicket:(id)ticket userName:(id)name password:(id)password StyleKeyValue:(id)value;
-(void)onCheckLoginVerifyCode:(id)code ticket:(id)ticket controlShowFlag:(unsigned long)flag userName:(id)name password:(id)password StyleKeyValue:(id)value;
-(void)onCheckRegVerifyCode:(id)code ticket:(id)ticket controlShowFlag:(unsigned long)flag userName:(id)name password:(id)password StyleKeyValue:(id)value;
-(void)onGetForgetPwdVoiceVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetSafeDeviceVoiceVerifyCode:(id)code authTicket:(id)ticket StyleKeyValue:(id)value;
-(void)onGetLoginVoiceVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetRegVoiceVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetForgetPwdVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetSafeDeviceVerifyCode:(id)code authTicket:(id)ticket StyleKeyValue:(id)value;
-(void)onGetLoginVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetRegVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onCheckLoginPhoneNumberStatus:(id)status countryCode:(id)code phoneNumber:(id)number formatedPhoneNumber:(id)number4 StyleKeyValue:(id)value;
-(void)onCheckRegPhoneNumberStatus:(id)status countryCode:(id)code phoneNumber:(id)number formatedPhoneNumber:(id)number4 StyleKeyValue:(id)value;
@end

@protocol WCFindFriendLogicDelegate <NSObject>
@optional
-(void)onSendSmsToMFriendList:(id)mfriendList;
-(void)onAddMFriendList:(id)list;
-(void)onCheckMFriendList:(id)list ticket:(id)ticket arrMobileInfo:(id)info arrEmailInfo:(id)info4;
@end

@protocol WCAccountEnableUploadAddressbookViewControllerDelegate <NSObject>
-(void)onEnableUploadAddressbookSkip;
-(void)onEnableUploadAddressbookEnable:(id)enable dicEmailInfo:(id)info;
@end

@protocol WCAccountAddFriendAfterRegViewControllerDelegate <NSObject>
-(void)onAddFriendAfterRegNext:(id)next;
@end

@protocol WCAccountInviteFriendAfterRegViewControllerDelegate <NSObject>
-(void)onInviteFriendAfterRegNext:(id)next;
@end

@protocol WCAccountBindPhoneViewOKViewControllerDelegate <NSObject>
@optional
-(void)onBindPhoneViewOKDone;
@end

@protocol NewQRCodeScannerDelegate <NSObject>
@optional
-(void)onGotBarcode:(id)barcode Type:(id)type;
-(void)NewQRCodeScanner:(id)scanner didScanResult:(id)result;
@end

@protocol GetA8KeyLogicDelegate <NSObject>
@optional
-(void)onSearchContactHandleEnd;
-(void)onSearchContactEnd;
-(void)onSearchContactStart;
-(void)onGetA8KeyEnd;
-(void)onGetA8KeyStart;
@end

@protocol IFavAudioRecorderExt
@optional
-(void)OnFavFinishRecord:(id)record;
-(void)OnFavEndRecording:(id)recording;
-(void)OnFavBeginRecording:(int)recording;
-(void)OnFavLevelMeter:(float)meter;
@end

@protocol IFavAudioViewExt
@optional
-(void)onDisableAllButton;
-(void)onEnableAllButton;
-(void)onFinishAudioView:(id)view;
-(void)onBeginRecord;
@end

@protocol RSVerifyAnimationViewDelegate <NSObject>
-(void)onAnimationFinish:(BOOL)finish;
@end

@protocol RSVerifyViewDelegate <NSObject>
-(void)onExpose:(id)expose;
-(void)onRSVerifyViewHide;
@end

@protocol RadarEducationViewDelegate <NSObject>
-(void)onHideEducationView;
@end

@protocol RSHeadImageViewDelegate <NSObject>
-(void)onStatusViewHidden:(id)hidden;
-(void)onRSHeadImageClicked:(id)clicked;
@end

@protocol FavoritesAsyncUploaderDelegate <NSObject>
-(id)getUploadCdnInfoByLocalItemDataId:(id)anId andType:(int)type;
-(BOOL)deleteCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(BOOL)updateItemXMLInItemDB:(id)itemDB;
-(BOOL)updateCdnInfo:(id)info;
-(id)getNextAsyncUploadCdnInfoByLocalItemId:(unsigned long)anId;
-(void)onUploadFavItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onUploadFail:(id)fail ErrCode:(int)code;
-(void)onUploadFinished:(id)finished;
@end

@protocol JSEventHandler
-(id)GetCurrentWebviewViewController;
-(id)onEndEvent:(id)event withResult:(id)result;
@end

@protocol WebviewJSEventHandlerBaseDelegate <NSObject>
-(id)webviewController;
@end

@protocol BrandOpenSpecificViewHandlerDelegate <NSObject>
-(BOOL)shouldDismissCurrentViewController;
@optional
-(id)getCurrentController;
@end

@protocol ProductKeyValueTableCellDelegate <NSObject>
@optional
-(void)onCellViewMore:(id)more;
@end

@protocol GameCenterMgrDelegate <NSObject>
@optional
-(void)onGotBizAppInfo;
-(void)onUpdateGamePersonalInfoList;
-(void)onGotGameIntroList:(id)list errType:(int)type;
-(void)onGotRcAppList:(unsigned long)list rcAppList:(id)list2 adAppList:(id)list3 isInternalDownload:(BOOL)download errType:(int)type;
@end

@protocol GameNotifyMsgsMgrDelegate <NSObject>
@optional
-(void)onGameReceiveNewAppMsg;
-(void)onGameNewAppCountChanged;
-(void)onGameMessageUnReadCountChanged;
@end

@protocol GameUserRankListMgrDelegate <NSObject>
@optional
-(void)onGetUserRankListFail:(unsigned long)fail appID:(id)anId;
-(void)onGetUserRankListSuccess:(id)success count:(unsigned)count hasReportScore:(BOOL)score;
@end

@protocol FindBrandRecommendLogicControllerDelegate <NSObject>
-(void)showContactInfoView:(id)view;
@end

@protocol MMGameIntroHeaderViewDelegate
@optional
-(void)onEnterButtonClick;
-(void)onTabBarChangeTo:(unsigned)to;
@end

@protocol MMLightTabBarViewDelegate
@optional
-(void)onTabChange:(int)change;
@end

@protocol MMGameUserRankListScrollDelegate
@optional
-(void)tableViewDidScroll:(id)tableView;
@end

@protocol MMGameIntroScrollDelegate
@optional
-(void)tableViewDidScroll:(id)tableView;
@end

@protocol ILogReportExt
@optional
-(void)UploadSuccess;
-(void)UploadFail;
-(void)OnResponse:(id)response;
@end

@protocol testProtocol <NSObject>
-(BOOL)testCallBackWithPara:(id)para testPoint:(char*)point;
-(void)testCallBackNoPara;
@optional
-(BOOL)testCallBackWithPara:(id)para testBool:(BOOL)aBool;
@end

@protocol TestProtocol_1 <NSObject>
-(unsigned)test1;
@end

@protocol TestProtocol_2 <NSObject>
-(unsigned)test22;
-(unsigned)test21;
@end

@protocol TestProtocol_3 <NSObject>
-(unsigned)test3;
@end

@protocol TestProtocol_4 <NSObject>
-(unsigned)test4;
@end

@protocol TestProtocol_5 <NSObject>
-(unsigned)test5;
@end

@protocol VoipAlertViewDelegate <NSObject>
-(void)SendInvite:(int)invite;
-(void)Cancel;
@end

@protocol ForwardMessageToBrandLogicControllerDelegate <NSObject>
-(id)forwardMessageToBrandLogicGetViewController;
@end

@protocol RecoverDataManagerDelegate
@optional
-(void)onAddUploadData:(id)data order:(unsigned)order;
-(void)onAddRecoverData:(id)data order:(unsigned)order;
@end

@protocol HeadImgDelegate
-(void)onGetUsrImage:(id)image Status:(id)status Image:(id)image3;
-(void)notifyHeadImageChange:(id)change;
@end

@protocol initLogicControllerDelegate
-(void)stopIniting:(unsigned long)initing;
-(void)percentIniting:(id)initing;
@end

@protocol validateCodeDelegate
-(void)validateCodeReturn:(BOOL)aReturn;
@end

@protocol textViewComplete <NSObject>
-(void)onTextComplete:(id)complete WithTag:(int)tag;
@end

@protocol VerifyQQPwdMgrExt
@optional
-(void)onCancelButton;
@end

@protocol WCAccountFillEmailViewControllerDelegate <NSObject>
@optional
-(void)onFillEmailBack;
-(void)onFillEmailNext:(id)next password:(id)password;
@end

@protocol WCAccountEmailVerifyViewControllerDelegate <NSObject>
@optional
-(void)onEmailVerifyNext:(id)next isAuto:(BOOL)auto;
-(void)onEmailVerifyRefresh;
-(void)onEmailVerifyBack;
@end

@protocol IGetPOIListMgrExt <NSObject>
@optional
-(void)OnGetSearchPOIList:(id)list Coordinate:(XXStruct_zYrK5D)coordinate Keyword:(id)keyword StartFromFirst:(BOOL)first EndOfList:(BOOL)list5 Error:(int)error;
-(void)OnGetNearPOIList:(id)list Coordinate:(XXStruct_zYrK5D)coordinate StartFromFirst:(BOOL)first EndOfList:(BOOL)list4 Error:(int)error;
@end

@protocol MMLocationPinViewDelegate
@optional
-(void)OnActionButtonTapped;
-(void)OnPinViewAnimationFinish;
@end

@protocol IClearDataMgrExt <NSObject>
@optional
-(void)onReloadDataItem;
-(void)onLoadDataFinished;
-(void)onLoadDataProgroess:(unsigned long)progroess;
@end

@protocol UploadConversationFileDelegate <NSObject>
-(void)OnUploadConversationFileComplete:(id)complete err:(int)err;
@end

@protocol ComposeSendDelegate <NSObject>
-(void)OnComposeSendComplete:(int)complete;
@end

@protocol UploadAttachmentDataDelegate <NSObject>
-(void)OnUploadAttachmentData:(id)data attachID:(id)anId uploadedDataSize:(unsigned long)size err:(int)err;
@end

@protocol INewQQMailExt
@optional
-(void)OnNewComposeSend:(int)send;
-(void)OnNewUploadAttachmentData:(id)data fileName:(id)name uploadedDataSize:(unsigned long)size err:(int)err;
@end

@protocol IGoogleContactMgrExt <NSObject>
@optional
-(void)onFetchFromGoogleFailed;
-(void)onUnbindGoogleContactNetWorkFailed;
-(void)onUnbindGoogleContactFailedWith:(unsigned long)with;
-(void)onUnbindGoogleContactOK;
-(void)onBindGoogleContactNetWorkFailed;
-(void)onBindGoogleContactHasBeenUsed;
-(void)onBindGoogleContactFailedWith:(unsigned long)with;
-(void)onBindGoogleContactOK;
-(void)onInviteGoogleContacts:(id)contacts;
-(void)onListGoogleContacts:(id)contacts ret:(unsigned long)ret;
@end

@protocol GoogleContactViewDelegate <NSObject>
@optional
-(void)onSentInviteRequest:(id)request;
@end

@protocol GoogleContactAPIFetchImplDelegate <NSObject>
@optional
-(void)onNetWorkError;
-(void)onGetGoogleContact:(id)contact isDecodeOK:(BOOL)ok;
@end

@protocol listGoogleContactsFromWXServerDelegate <NSObject>
@optional
-(void)onListGoogleContactsFromWXServer:(id)wxserver ret:(unsigned long)ret;
@end

@protocol WCCommitViewResultDelegate <NSObject>
-(void)onDoneForwardForForwardView:(id)forwardView;
-(void)onCancelForwardForForwardView:(id)forwardView;
@end

@protocol GTMFetcherAuthorizationProtocol <NSObject>
@optional
@property(assign) id<GTMHTTPFetcherServiceProtocol> fetcherService;
@property(assign) BOOL shouldAuthorizeAllRequests;
@property(readonly, assign) BOOL canAuthorize;
@required
@property(readonly, assign) NSString* userEmail;
-(BOOL)isAuthorizedRequest:(id)request;
-(BOOL)isAuthorizingRequest:(id)request;
-(void)stopAuthorizationForRequest:(id)request;
-(void)stopAuthorization;
-(void)authorizeRequest:(id)request delegate:(id)delegate didFinishSelector:(SEL)selector;
@optional
-(BOOL)primeForRefresh;
-(void)authorizeRequest:(id)request completionHandler:(id)handler;
@end

@protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>
@optional
-(void)connectionDidFinishLoading:(id)connection;
-(id)connection:(id)connection willCacheResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
@end

@protocol WeiboShareViewControllerDelegate <NSObject>
-(void)onWeiboShareFail:(id)fail withRet:(int)ret;
-(void)onWeiboShareOK:(id)ok;
-(void)onWeiboShareCanceled:(id)canceled;
@end

@protocol JSShareFBLogicHelperDelegate <NSObject>
-(void)onJSShareFBFailedWithError:(int)error msg:(id)msg;
-(void)onJSShareFBFinished;
-(void)onJSShareFBSharing;
@end

@protocol WebviewJSEventHandler <NSObject>
-(void)OnWillAnimateRotationToInterfaceOrientation:(int)on duration:(double)duration;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@protocol WebAddContactDelegate
-(void)OnWebAddContactReturn;
-(void)OnWebAddContact:(int)contact Msg:(id)msg CallBack:(id)back;
@end

@protocol MemberDataDelegate <NSObject>
-(void)commitEditingStyle:(int)style ForIndexPath:(id)indexPath;
-(int)getEditingStyleForIndexPath:(id)indexPath;
-(void)didSelectRowAtIndexPath:(id)indexPath;
@end

@protocol IOperationMgrDelegate <NSObject>
-(void)onOperationDidStoped:(id)onOperation;
@end

@protocol CgiEventDelegate <NSObject>
@optional
-(void)onDidEventStoped;
@end

@protocol MailAttachmentsViewDelegate
-(void)OnDeleteAttachment:(id)attachment;
@end

@protocol MailContactButtonDelegate <NSObject>
@optional
-(void)onMailContactClicked:(id)clicked sender:(id)sender;
-(void)onMailContactDoubleClicked:(id)clicked;
@end

@protocol MMExposeResultViewControllerDelegate <NSObject>
-(void)onExposeResultOK;
@end

@protocol WCMallGlobalActivityViewDelegate <NSObject>
-(void)OnClickedActivitityButton:(unsigned long)button;
@end

@protocol WCPayPwdViewControllerDelegate <NSObject>
-(void)OnWCPayPwdViewControllerBack;
@end

@protocol WCMallNetworkHelperDelegate <NSObject>
-(void)OnCallBackGetWCMallLatestPayProductInfo:(id)info Request:(id)request Error:(id)error;
-(void)OnCallBackGetWCMallFunctionProductList:(id)list Request:(id)request Error:(id)error;
-(void)OnCallBackGetWCMallFunctionList:(id)list Request:(id)request Error:(id)error;
@end

@protocol BrandStyleUILogicControllerDelegate <NSObject>
-(void)updateToolViewStatus;
-(id)getLogicController;
@end

@protocol CustomMenuToolViewDelegate
-(void)onJumpToPOIView:(id)poiview;
-(void)onJumpToPicView:(id)picView;
-(void)onJumpToScanView:(id)scanView;
-(void)onJumpToWebView:(id)webView;
-(void)onRecordActionEvent:(id)event;
-(void)onReportClickEvent:(id)event;
-(void)onSubMenuDismiss;
-(void)onSubMenuPresentWithIndex:(int)index ArrowX:(float)x;
-(void)onChangeToMenuMode:(id)menuMode;
-(void)onChangeToInputMode;
@end

@protocol CustomSubMenuFloatViewDelegate
-(void)onJumpToPOIView:(id)poiview;
-(void)onJumpToPicView:(id)picView;
-(void)onJumpToScanView:(id)scanView;
-(void)onJumpToWebView:(id)webView;
-(void)onRecordActionEvent:(id)event;
-(void)onReportClickEvent:(id)event;
-(void)onSubMenuDismiss;
-(void)onChangeToMenuMode:(id)menuMode;
@end

@protocol WCMallMallProductsViewControllerDelegate <NSObject>
-(void)OnWCMallTelephoneInputComplete:(id)complete;
-(void)OnWCmallMallProductsClearOldList;
-(unsigned long)GetWCMallMallProductsAllListCount;
-(id)GetWCMallMallProductsFiltedOldList;
-(BOOL)IsUsedWCMallMallProduct;
-(void)OnWCMallMallProductsViewControllerPay:(id)pay;
-(void)OnWCMallMallProductsViewControllerProductSelected:(id)selected;
-(void)OnWCMallMallProductsViewControllerRightActionBack;
-(void)OnWCMallMallProductsViewControllerBack;
@end

@protocol WCMallOldTelephoneViewDelegate <NSObject>
-(id)GetOldTelephoneOwnerName:(unsigned long)name;
-(id)GetOldTelephoneNumber:(unsigned long)number;
-(unsigned long)GetNumberOfOldTelephoneListCount;
-(void)OnClickWCMallOldTelephoneClearButton;
-(void)OnClickWCMallOldTelephoneCell:(unsigned long)cell;
@end

@protocol WCMallCandidateTelephoneViewDelegate <NSObject>
-(id)GetCandidateTelephoneEnsureTip;
-(id)GetCandidateTelephoneDescription:(unsigned long)description DifferentIndex:(id)index;
-(unsigned long)GetNumberOfCandidateTelephoneListCount;
-(void)OnClickWCMallCandidateTelephoneEnsureCellClicked;
-(void)OnClickWCMallCandidateTelephoneCell:(unsigned long)cell;
@end

@protocol WloginProtocolBuff <NSObject>
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@protocol NSMutableCopying
-(id)mutableCopyWithZone:(NSZone*)zone;
@end

@protocol NSFastEnumeration
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
@end

@protocol SBJsonParser
-(id)objectWithString:(id)string;
@end

@protocol SBJsonWriter
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
-(id)stringWithObject:(id)object;
@end

@protocol PBMessage <NSObject>
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(id)builder;
-(id)serializedData;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(int)serializedSize;
-(id)unknownFields;
-(id)defaultInstance;
@end

@protocol PBMessage_Builder <NSObject>
-(id)mergeFromData:(id)data;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(id)mergeUnknownFields:(id)fields;
-(id)setUnknownFields:(id)fields;
-(id)unknownFields;
-(id)build;
@end

@protocol SyncObserverDelegate <NSObject>
-(void)syncObserverNewProgress:(int)progress;
-(void)syncObserverSvrFailWithCount:(int)count;
-(void)syncObserverSvrDelWithCount:(int)count;
-(void)syncObserverSvrMdfWithCount:(int)count;
-(void)syncObserverSvrAddWithCount:(int)count;
-(void)syncObserverCltFailWithCount:(int)count;
-(void)syncObserverCltDelWithCount:(int)count;
-(void)syncObserverCltMdfWithCount:(int)count;
-(void)syncObserverCltAddWithCount:(int)count;
@end

@protocol QQPimEngineLoginModelDelegate <NSObject>
-(void)loginModelVerifyMobileAccountFailed:(id)failed withResultCode:(int)resultCode;
-(void)loginModelVerifyMobileAccountSuccess:(id)success;
-(void)loginModelRegisterMobileAccountFailed:(id)failed withResultCode:(int)resultCode;
-(void)loginModelRegisterMobileAccountSuccess:(id)success;
-(void)loginModelLoginFailed:(id)failed withResultCode:(int)resultCode;
-(void)loginModelLoginSuccess:(id)success;
-(void)loginModelNeedPimPassword:(id)password;
-(void)loginModelNeedVerifyCode:(id)code verifyCodeURL:(id)url;
@end

@protocol QQPimEngineSyncModelDelegate <NSObject>
-(void)syncModelInterruptBecauseOfNetworkError:(id)networkError;
-(void)syncModelSyncFailed:(id)failed reason:(int)reason;
-(void)syncModelSyncSuccess:(id)success withStatics:(id)statics;
-(void)syncModelSyncProgressChanged:(id)changed currentProgress:(float)progress;
-(void)syncModelSyncBegin:(id)begin;
@end

@protocol QQPimEngineQueryUtilModelDelegate <NSObject>
-(void)queryUtil:(id)util totalLocalResult:(id)result;
-(void)queryUtilTotalServerResultFailed:(id)failed;
-(void)queryUtil:(id)util totalServerResult:(id)result;
@end

@protocol FBSBJsonParser
-(id)objectWithString:(id)string;
@end

@protocol FBSBJsonWriter
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
-(id)stringWithObject:(id)object;
@end

@protocol FBGraphObject <NSObject>
-(void)setObject:(id)object forKey:(id)key;
-(void)removeObjectForKey:(id)key;
-(id)keyEnumerator;
-(id)objectForKey:(id)key;
-(unsigned)count;
@end

@protocol FBRequestDelegate <NSObject>
@optional
-(void)request:(id)request didLoadRawResponse:(id)response;
-(void)request:(id)request didLoad:(id)load;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didReceiveResponse:(id)response;
-(void)requestLoading:(id)loading;
@end

@protocol NSCacheDelegate <NSObject>
@optional
-(void)cache:(id)cache willEvictObject:(id)object;
@end

@protocol FBCacheIndexFileDelegate <NSObject>
-(void)cacheIndex:(id)index deleteFileWithName:(id)name;
-(void)cacheIndex:(id)index writeFileWithName:(id)name data:(id)data;
@end

@protocol FBLoginDialogDelegate <NSObject>
-(void)fbDialogNotLogin:(BOOL)login;
-(void)fbDialogLogin:(id)login expirationDate:(id)date;
@end

@protocol FBGraphObjectSelectionChangedDelegate <NSObject>
-(void)graphObjectTableSelectionDidChange:(id)graphObjectTableSelection;
@end

@protocol FBGraphObjectViewControllerDelegate <NSObject>
-(id)graphObjectTableDataSource:(id)source titleOfItem:(id)item;
@optional
-(void)graphObjectTableDataSource:(id)source customizeTableCell:(id)cell;
-(BOOL)graphObjectTableDataSource:(id)source filterIncludesItem:(id)item;
-(id)graphObjectTableDataSource:(id)source pictureUrlOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source subtitleOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source titleSuffixOfItem:(id)item;
@end

@protocol FBGraphObjectPagingLoaderDelegate <NSObject>
@optional
-(void)pagingLoaderWasCancelled:(id)cancelled;
-(void)pagingLoader:(id)loader handleError:(id)error;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)pagingLoader:(id)loader didLoadData:(id)data;
-(void)pagingLoader:(id)loader willLoadURL:(id)url;
@end

@protocol FBGraphObjectSelectionQueryDelegate <NSObject>
-(BOOL)graphObjectTableDataSource:(id)source selectionIncludesItem:(id)item;
@end

@protocol FBGraphObjectDataSourceDataNeededDelegate <NSObject>
-(void)graphObjectTableDataSourceNeedsData:(id)data triggeredByIndexPath:(id)path;
@end

@protocol FBDialogDelegate <NSObject>
@optional
-(BOOL)dialog:(id)dialog shouldOpenURLInExternalBrowser:(id)externalBrowser;
-(void)dialog:(id)dialog didFailWithError:(id)error;
-(void)dialogDidNotComplete:(id)dialog;
-(void)dialogDidNotCompleteWithUrl:(id)dialog;
-(void)dialogCompleteWithUrl:(id)url;
-(void)dialogDidComplete:(id)dialog;
@end

@protocol PLCrashReportFormatter
-(id)formatReport:(id)report error:(id*)error;
@end

@protocol __ARCLiteKeyedSubscripting__
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
@end

@protocol __ARCLiteIndexedSubscripting__
-(void)setObject:(id)object atIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
@end

@interface ContactNoWeixinViewController : MMUIViewController <MFMessageComposeViewControllerDelegate, UIActionSheetDelegate, QZoneLoginStatusDelegate, UIAlertViewDelegate> {
	UILabel* m_Label;
	CBaseContact* m_contact;
	UIButton* m_btn;
	UIButton* m_btnSendQQMsg;
	UIView* m_headerView;
	NSArray* m_arrMobiles;
	QZoneLoginStatus* m_qzone;
	NSString* m_googleImageUrl;
}
@property(retain, nonatomic) NSString* m_googleImageUrl;
@property(retain, nonatomic) NSArray* m_arrMobiles;
-(void)onQZoneUrl:(id)url;
-(void)dealloc;
-(id)initWithContact:(id)contact;
-(void)viewDidLoad;
-(void)initView;
-(BOOL)isShowInviteBtn;
-(void)onInvite:(id)invite;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)showAlert:(id)alert;
-(void)initDetailInfoView;
-(id)getInfoUsrName;
-(id)getQQUsrName;
-(id)getInfoDetailText;
-(id)getInfoDisplayName;
-(id)getInfoIcon;
-(void)invitedAnimation;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)OnQQAction;
-(void)Call;
-(void)onSendQQMsg:(id)msg;
-(void)sendSMSInvite:(id)invite;
@end

@interface ContactsCreateChatRoomLogic : MMObject <contactVerifyLogicDelegate, IGroupMgrExt, UIAlertViewDelegate> {
	NSDictionary* m_dicMultiSelect;
	UIView* m_ParentView;
	MMLoadingView* m_loadingView;
	MMDelegateProxy<ContactsCreateChatRoomLogicDelegate>* m_Delegate;
	unsigned long m_uiUseChatState;
	CContactVerifyLogic* m_oContactVerifyLogic;
	NSMutableArray* m_arrNeedVerifyUsrName;
}
@property(assign, nonatomic) unsigned long m_uiUseChatState;
@property(assign, nonatomic) MMDelegateProxy<ContactsCreateChatRoomLogicDelegate>* m_Delegate;
-(void)OnCreateGroup:(id)group withStatus:(long)status memberList:(id)list;
-(id)genErrorString:(id)string needVerify:(BOOL*)verify;
-(id)getErrorContactName:(id)name;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)verifyContact;
-(void)contactVerifyOk:(id)ok opCode:(unsigned long)code;
-(BOOL)createChatRoom;
-(id)genMemerList;
-(void)stopLoading;
-(void)startLoading;
-(BOOL)start:(id)start parentView:(id)view;
-(void)reset;
-(void)dealloc;
-(id)init;
@end

@interface ContactsGenericViewController : MMSearchBarDisplayController <UITableViewDelegate, UITableViewDataSource, contactInfoDelegate, IContactMgrExt, MessageObserverDelegate> {
	MMTableView* m_tableView;
	NSMutableDictionary* m_dicAllContacts;
	NSMutableArray* m_arrAllKey;
	BOOL m_bSearching;
	NSMutableArray* m_arrFilteredContacts;
	int m_iViewType;
	NSString* m_nsDomain;
	BOOL m_bPopUp;
	MMLoadingView* m_loadingView;
	MMDelegateProxy<contactsDelegate>* m_delegate;
}
@property(assign, nonatomic) BOOL m_bPopUp;
@property(retain, nonatomic) NSString* m_nsDomain;
@property(assign, nonatomic) int m_iViewType;
@property(assign, nonatomic) MMDelegateProxy<contactsDelegate>* m_delegate;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)dealloc;
-(float)getVisibleHeight;
-(void)onSyncSXContactEnd;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)doSearch:(id)search;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell tableCell:(id)cell2 section:(unsigned)section row:(unsigned)row;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidLoad;
-(void)initView;
-(void)checkNeedLoading;
-(void)initSearchBar;
-(void)initTableView;
-(void)initTitleArea;
-(void)initData;
-(void)unListenMessage;
-(void)listenMessage;
-(void)onDone:(id)done;
-(void)loadContacts;
-(id)addSectionKey:(id)key;
-(void)showSearchFriendView;
-(void)showContactInfoView:(id)view;
-(void)ContactsViewReloadData;
-(void)reloadData;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)processNewContact:(id)contact;
-(void)addContactInternal:(id)internal;
-(void)tryDeleteContactInSection:(id)section;
-(void)deleteContact:(id)contact deleteInDB:(BOOL)db;
-(id)parseContactKey:(id)key;
-(void)processContact:(id)contact;
-(void)stopLoading;
-(void)startLoading;
@end

@interface ContactsItemView : MMUIView {
	UILabel* m_nickNameLabel;
	UIButton* m_rightButton;
	UILabel* m_greyLabel;
	UILabel* m_userNameLabel;
	UIImageView* m_contactTypeImage;
	MMHeadImageView* m_headImage;
	BOOL m_bShowHeadImage;
	UILabel* m_signatureLabel;
	UIImageView* m_signatureBackground;
	id m_data;
	MMDelegateProxy<ContactsItemViewDelegate>* m_delegate;
	MMWebImageView* m_webHeadImageView;
}
@property(retain, nonatomic) MMWebImageView* m_webHeadImageView;
@property(retain, nonatomic) id m_data;
@property(assign, nonatomic) MMDelegateProxy<ContactsItemViewDelegate>* m_delegate;
@property(assign, nonatomic) BOOL m_bShowHeadImage;
@property(retain, nonatomic) MMHeadImageView* m_headImage;
@property(retain, nonatomic) UIImageView* m_contactTypeImage;
@property(retain, nonatomic) UILabel* m_userNameLabel;
@property(retain, nonatomic) UILabel* m_nickNameLabel;
-(void)dealloc;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)showChatRoomName:(id)name;
-(void)initSignatureLabel:(id)label;
-(void)initUserNameLabel:(id)label needBackground:(BOOL)background;
-(void)initGreenRightButton:(id)button;
-(void)initGreyRightButton:(id)button;
-(void)onRightBtnAction;
-(void)initRightestPlaceImage:(id)image highlightedImage:(id)image2;
-(void)initRightPlaceImage:(id)image highlightedImage:(id)image2;
-(void)initRightPlaceInviteLabel;
-(void)initRightestPlaceAddLabel;
-(void)initRightPlaceAddLabel;
-(void)initRightPlaceCenterAlignmentAddedLabel;
-(void)initRightPlaceInvitedLabel;
-(void)initRightPlaceAddedLabel;
-(void)initRightPlaceWaitingLabel:(float)label;
-(void)initRightPlaceWaitingLabel;
-(void)initGrayLabel:(id)label color:(id)color;
-(void)initNickNameLabel:(id)label;
-(CGRect)calNickNameFrame:(id)frame;
-(void)initView:(id)view showSignature:(BOOL)signature showWeiboIcon:(BOOL)icon;
-(void)initView:(id)view showSignature:(BOOL)signature showChatRoomName:(id)name;
-(void)initView:(id)view showSignature:(BOOL)signature;
-(void)initSessionStyleView:(id)view showSignature:(BOOL)signature;
-(id)genChatRoomName:(id)name;
-(BOOL)isShowMobileName:(id)name mobileName:(id)name2;
-(void)initHeadImageForContact:(id)contact;
-(void)initHeadImage:(id)image;
-(void)initHeadImageUrl:(id)url withAuthorizationCode:(id)authorizationCode update:(BOOL)update;
-(void)initHeadImage:(id)image withUrl:(id)url;
-(void)initImage:(id)image;
-(id)init;
@end

@interface TestAskAuthorizationViewController : MMWebViewController <PBMessageObserverDelegate, UITextFieldDelegate> {
	UITextField* _appidTextField;
	UITextField* _urlTextField;
	UITextField* _apiTextField;
	UITextField* _statusTextField;
	UILabel* _label;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(unsigned long)structCGI:(id)cgi withType:(unsigned long)type;
-(void)setAuthorizationInfo:(id)info scopeInfoList:(id)list;
-(void)checkAuthorizationInfo:(id)info;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)hiddenKeyBoard;
-(void)startSet;
-(void)startCheck;
-(void)viewDidLoad;
-(id)init;
-(void)dealloc;
@end

@interface RemarkViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UITextFieldDelegate, UIActionSheetDelegate> {
	CContact* m_contact;
	NSString* m_nsMobileNickName;
	UITextField* m_userNameTextField;
	MMTableView* m_tableView;
}
@property(retain, nonatomic) UITextField* m_userNameTextField;
@property(retain, nonatomic) CContact* m_contact;
-(void)dealloc;
-(void)setMobileRemark;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)viewDidLoad;
-(void)onSave:(id)save;
-(void)onDismissRemarkView:(id)view;
@end

@interface ShareFriendOnChatLogicController : MMObject <SelectContactsViewControllerDelegate, UIAlertViewDelegate> {
	id<ShareFriendOnChatDelegate> m_delegate;
	CContact* m_contactToShare;
	CContact* m_contactShareToWho;
	SelectContactsViewController* m_selectContactViewController;
	BOOL m_bIsShareToChatRoom;
}
@property(assign, nonatomic) BOOL m_bIsShareToChatRoom;
@property(retain, nonatomic) CContact* m_contactShareToWho;
@property(retain, nonatomic) CContact* m_contactToShare;
@property(retain, nonatomic) SelectContactsViewController* selectContactViewController;
-(BOOL)onFilterSendReceiver:(id)receiver;
-(void)onSelectContactReturn:(id)aReturn;
-(BOOL)onFilterContactCandidate:(id)candidate;
-(void)start;
-(void)onDismiss:(id)dismiss;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)onConfirmShareMyFriend:(id)aFriend;
-(id)contactShareMsgFromUser:(id)user toUser:(id)user2 sharedContact:(id)contact;
-(void)showConfirmShareView;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface MMWebImageViewWithThumbPreview : MMUIView <MMWebImageViewDelegate> {
	MMWebImageView* m_imageView;
	MMImageView* m_imageFocusView;
	ThreeWayExpandImageView* m_previewBackView;
	MMWebImageView* m_previewView;
	NSURL* m_previewUrl;
	BOOL m_hasSetPreviewUrl;
	float m_leftEdge;
	float m_rightEdge;
	UIActivityIndicatorView* m_loadingView;
	NSString* m_emoticonPid;
	unsigned long m_startShowPreviewTime;
	BOOL m_isLoadFromLocal;
	BOOL m_hasLoadedPreview;
	BOOL m_isShowing;
}
@property(assign, nonatomic) BOOL m_isShowing;
@property(assign, nonatomic) BOOL m_hasLoadedPreview;
@property(assign, nonatomic) BOOL m_isLoadFromLocal;
@property(assign, nonatomic) unsigned long m_startShowPreviewTime;
@property(assign, nonatomic) float m_rightEdge;
@property(assign, nonatomic) float m_leftEdge;
@property(assign, nonatomic) BOOL m_hasSetPreviewUrl;
@property(retain, nonatomic) NSString* m_emoticonPid;
@property(retain, nonatomic) MMImageView* m_imageFocusView;
@property(retain, nonatomic) UIActivityIndicatorView* m_loadingView;
@property(retain, nonatomic) NSURL* m_previewUrl;
@property(retain, nonatomic) MMWebImageView* m_previewView;
@property(retain, nonatomic) ThreeWayExpandImageView* m_previewBackView;
@property(retain, nonatomic) MMWebImageView* m_imageView;
-(void)onLoadImageOK;
-(id)getPreviewView;
-(void)setPreviewEdgeLeft:(float)left right:(float)right;
-(void)layoutSubviews;
-(void)setPreviewSize:(CGSize)size;
-(void)setPreviewUrl:(id)url;
-(void)setImageUrl:(id)url;
-(void)setDefaultImage:(id)image;
-(void)setEmoticonPid:(id)pid;
-(BOOL)isHasLoadedPreview;
-(void)dealloc;
-(void)hidePreview;
-(void)showPreview;
-(void)loadPreviewUrl;
-(id)initWithFrame:(CGRect)frame;
@end

@interface ShareMyFriendLogicController : MMService <MMService, UIAlertViewDelegate> {
	CContact* m_contactShareToWho;
	CContact* m_contactToShare;
}
@property(retain, nonatomic) CContact* m_contactToShare;
@property(retain, nonatomic) CContact* m_contactShareToWho;
-(BOOL)onFilterSendReceiver:(id)receiver;
-(BOOL)onFilterContactCandidate:(id)candidate;
-(void)start;
-(void)showConfirmShareView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)onConfirmShareMyFriend:(id)aFriend;
-(id)contactShareMsgFromUser:(id)user toUser:(id)user2 sharedContact:(id)contact;
-(void)dealloc;
@end

@interface FindFriendEntryViewController : MMTabBarBaseViewController <BrandServiceIntroViewControllerDelegate, UIAlertViewDelegate, settingMyAccountExtInfoDelegate, ShakeViewDelegate, EditBottleProfileDelegate, UITableViewDataSource, UITableViewDelegate, IBottleSessionExt, EditBottleProfileDelegate, WCFacadeExt, WCTimeLineViewControllerDelegate, FriendAsistSessionExt, ISettingExtChange, ShakeMgrExt, IGameFacadeExt> {
	BOOL m_hasInitData;
	MMTableView* m_tableView;
	stEntryRow* m_aryEntryRow;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapSectionType;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapRowToRowTypeAdd;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapRowToRowTypeSocial;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapRowToRowTypeBrand;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapRowToRowTypeMotion;
	NSIndexPath* m_WCTimeLineIndexPath;
	WCDataItem* m_latestSeenDataItem;
	NSIndexPath* m_lbsIndexPath;
	NSIndexPath* m_shakeIndexPath;
	NSIndexPath* m_bottleIndexPath;
	NSIndexPath* m_brandServiceIndexPath;
	NSIndexPath* m_gameIndexPath;
	WCTimeLineViewController* m_timelineViewController;
	MMTimeChecker* m_timelineCacheTimer;
	MMHeadImageView* m_timelineHeadView;
	UIImageView* m_timelineRedDotView;
	BOOL m_inTimeline;
}
@property(retain, nonatomic) NSIndexPath* m_brandServiceIndexPath;
@property(retain, nonatomic) NSIndexPath* m_gameIndexPath;
@property(retain, nonatomic) NSIndexPath* m_bottleIndexPath;
@property(retain, nonatomic) NSIndexPath* m_shakeIndexPath;
@property(retain, nonatomic) NSIndexPath* m_lbsIndexPath;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)onGameNewAppCountChanged;
-(void)onGameMessageUnReadCountChanged;
-(void)onShakeStatusChanged;
-(void)onSettingExtChanged:(int)changed;
-(void)onFriendAssistUnreadCountChanged;
-(void)onTimeLineViewReturn;
-(void)onMarkWCObjectAsRead:(id)read;
-(void)onMessageUnReadCountChanged;
-(void)onReveiceWCMessage:(id)message;
-(void)onDatabaseReloaded;
-(void)onNotificationShowSettingChanged;
-(void)onLatestWCObjectChanged:(id)changed;
-(void)updateWCTimeLineView:(id)view;
-(void)openGameCenter;
-(void)openCameraScan:(int)scan;
-(void)openLBS;
-(void)searchFriend:(id)aFriend;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)initView;
-(void)initTitle;
-(void)initTableView;
-(void)updateViewWhenSelectTab:(BOOL)tab;
-(void)willAppear;
-(void)updateTabBarBadge;
-(int)getCurrentTotalCount;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)handleSelectedEntryCell:(unsigned)cell;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeEntryCell:(id)cell rowType:(unsigned)type;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)clickEntryBtn:(id)btn;
-(void)doSelectCell:(unsigned long)cell;
-(void)onBrandServicIntroOK:(id)ok;
-(void)tryOpenBrandService;
-(void)openBrandService;
-(void)onCloseAlbumTimeOut;
-(void)closeAlbum;
-(void)openAlbum;
-(void)OnShakeVCDealloc;
-(void)openShakeWithAnimate:(BOOL)animate;
-(void)promptForProfileExtInfo;
-(void)SettingMyAccountExtInfoExit;
-(void)goToShakeWithAnimate:(BOOL)animate;
-(void)openFloatBottle;
-(void)trySetDefaultHeadImage;
-(void)OpenSandyBeach;
-(void)goToSandyBeach;
-(void)dealloc;
-(id)init;
-(void)tryInit;
-(void)reloadData;
-(void)pluginsChanged:(id)changed;
-(void)resetSectionType;
-(void)resetRowType;
-(void)initRow;
-(void)BottlePluginChanged:(BOOL)changed;
-(void)BottleTotalUnreadCountChanged;
-(void)updateBottleEntryRow;
-(unsigned long)getBottleUnreadCountAtTarbar;
-(unsigned long)getBottleUnreadCountAtCell;
@end

@interface InviteBaseViewController : MMSearchBarDisplayController <UITableViewDelegate, UITableViewDataSource, MessageObserverDelegate, UIAlertViewDelegate> {
	NSString* m_title;
	UIBarButtonItem* m_btnInvite;
	MMTableView* m_tableView;
	MMLoadingView* m_loadingView;
	MMDelegateProxy<inviteFriendDelegate>* m_delegate;
	unsigned long m_uiGroupId;
	unsigned long m_uiFriendType;
	CFriendInfo* m_friendInfo;
	NSMutableArray* m_arrFilteredFriendList;
	NSMutableDictionary* m_dicSelected;
	NSMutableDictionary* m_dicItemView;
}
@property(assign, nonatomic) unsigned long m_uiGroupId;
@property(assign, nonatomic) MMDelegateProxy<inviteFriendDelegate>* m_delegate;
@property(retain, nonatomic) NSString* m_title;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)doSearch:(id)search;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell cell:(id)cell2 row:(unsigned)row;
-(id)getItemViewFromCache:(id)cache;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getCellImage:(id)image row:(unsigned)row;
-(void)updateSelected:(id)selected row:(int)row;
-(BOOL)checkLimit;
-(BOOL)SMS_reachLimit:(unsigned long)limit;
-(void)dealloc;
-(void)downloadFriends:(unsigned long)friends;
-(void)initButton;
-(void)initView;
-(void)initData;
-(void)onInvite:(id)invite;
-(void)reload;
-(void)refresh:(id)refresh;
-(void)stopLoading;
-(void)startLoading;
-(id)init;
@end

@interface InviteEmailFriendViewController : InviteBaseViewController {
}
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initData;
@end

@interface InviteFriendViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, inviteFriendDelegate> {
	MMTableView* m_tableView;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapCellToCellType;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)inviteFriendReturn;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)handleSelectdInviteCell:(unsigned)cell;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeInviteCell:(id)cell rowType:(unsigned)type;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initData;
-(void)showInviteWeiboFriendView;
-(void)showInviteEmailFriendView;
-(void)showInviteQQFriendView;
-(void)showInviteSMSFriendView;
-(BOOL)isSupportSMS;
@end

@interface InviteItemView : UIView {
	CInviteFriendWrap* m_friendInfo;
	UILabel* m_labelDisplayName;
	UILabel* m_labelDetail;
	UILabel* m_labelInvited;
	UIButton* m_btnSendInvite;
	MMHeadImageView* m_headImageView;
	BOOL m_showButton;
	BOOL m_bShowHeadImage;
}
@property(retain, nonatomic) CInviteFriendWrap* m_friendInfo;
+(id)displayName:(id)name;
+(unsigned long)inviteItemWidth;
-(void)dealloc;
-(void)reloadData;
-(void)updateInviteStatus;
-(void)sendInvite;
-(id)initWithFriendInfo:(id)friendInfo showButton:(BOOL)button;
-(void)initView;
-(void)initHeadImageView;
-(void)initSendInviteBtn;
-(void)initInvitedLabel;
-(void)initDetailLabel;
-(void)initDisplayNameLabel;
-(void)onSendInvite:(id)invite;
@end

@interface InviteQQFriendGroupViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, MessageObserverDelegate, inviteFriendDelegate, UIAlertViewDelegate> {
	MMTableView* m_tableView;
	MMLoadingView* m_loadingView;
	unsigned long m_uiFriendType;
	CFriendInfo* m_friendInfo;
}
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)inviteFriendReturn;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidLoad;
-(void)downloadFriends:(unsigned long)friends;
-(void)initView;
-(void)initData;
-(void)showInviteQQFriendView:(id)view GroupId:(unsigned long)anId;
-(void)stopLoading;
-(void)startLoading;
@end

@interface InviteQQFriendNewViewController : InviteBaseViewController {
}
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initData;
@end

@interface InviteSMSFriendViewController : InviteBaseViewController <MFMessageComposeViewControllerDelegate, MFMailComposeViewControllerDelegate, UIAlertViewDelegate> {
}
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)willAppear;
-(void)viewDidLoad;
-(void)downloadFriends:(unsigned long)friends;
-(void)initButton;
-(void)initView;
-(void)initData;
-(void)onInvite:(id)invite;
-(void)showAlert:(id)alert;
@end

@interface InviteWeiBoFriendViewController : InviteBaseViewController {
}
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initData;
@end

@interface AddressBookFriendViewController : MMSearchBarDisplayController <UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate, IAddressBookFriendMgrExt, contactInfoDelegate, VerifyPhoneDelegate, ContactInfoViewControllerDelegate> {
	MMTableView* m_tableView;
	UITextField* m_searchTextField;
	UIButton* m_searchBtn;
	MMLoadingView* m_loadingView;
	AddressBookFriend* m_oCurrentFriendWrap;
	NSMutableArray* m_arrAddressBookFriendList;
	NSMutableDictionary* m_dicNicknameToFriends;
	NSMutableArray* m_arrFilteredFriendList;
	ContactInfoViewController* m_CurrentFriendItemView;
}
@property(retain, nonatomic) ContactInfoViewController* m_CurrentFriendItemView;
@property(retain, nonatomic) AddressBookFriend* m_oCurrentFriendWrap;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)doSearch:(id)search;
-(void)bindPhoneReturn;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)onUpdateContact:(id)contact;
-(void)onRemoveContact;
-(void)onAddContact;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeAddressBookFriendCell:(id)cell row:(unsigned)row tableView:(id)view;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)newAddressBookFriendArrived;
-(void)viewDidLoad;
-(void)initView;
-(void)loadData:(BOOL)data;
-(void)trySyncAddressBook;
-(void)sortFriendList;
-(void)stopLoading;
-(void)startLoading;
-(BOOL)canSyncAddressBook;
-(void)dealloc;
-(id)init;
@end

@interface ListQQFriendGroupViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, MessageObserverDelegate, UIAlertViewDelegate> {
	MMTableView* m_tableView;
	MMLoadingView* m_loadingView;
	unsigned long m_uiViewControllerType;
	NSArray* m_arrQQGroupWrap;
}
@property(retain, nonatomic) NSArray* m_arrQQGroupWrap;
-(void)dealloc;
-(id)init;
-(id)initWithVCType:(unsigned long)vctype;
-(void)viewDidLoad;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)initView;
-(void)initData;
-(void)LoadQQGroup;
-(void)SaveQQGroup;
-(void)CheckQQGroupNeedReload:(id)reload;
-(void)LoadQQGroupNetworkEvent;
@end

@interface ScanAppSpaceSizeService : MMService <MMService> {
	BOOL _hasAppSpaceSize;
	int _runStatus;
	long long _appSpaceSize;
	long long _scannedFileCount;
}
@property(assign) long long scannedFileCount;
@property(assign) long long appSpaceSize;
@property(assign) int runStatus;
@property(assign) BOOL hasAppSpaceSize;
-(void)onServiceTerminate;
-(void)asyncStopTask;
-(void)asyncStartTask;
-(void)folderSizeAtPath:(const char*)path;
-(void)onScanTaskFinished;
-(void)onScanTaskUpdateProgress;
-(void)dealloc;
-(id)init;
@end

@interface ListQQFriendViewController : MMSearchBarDisplayController <UITableViewDelegate, UITableViewDataSource, MessageObserverDelegate, contactInfoDelegate, ContactInfoViewControllerDelegate, UIAlertViewDelegate> {
	CQQGroupWrap* m_oQQGroupWrap;
	CQQFiendWrap* m_oCurrentFriendWrap;
	NSMutableArray* m_arrQQFriendWrap;
	MMTableView* m_tableView;
	MMLoadingView* m_loadingView;
	NSMutableArray* m_arrFilteredFriendList;
	NSMutableDictionary* m_dicItemView;
	unsigned long m_uiViewControllerType;
	ContactInfoViewController* m_CurrentFriendItemView;
}
@property(retain, nonatomic) ContactInfoViewController* m_CurrentFriendItemView;
@property(retain, nonatomic) CQQFiendWrap* m_oCurrentFriendWrap;
@property(retain, nonatomic) NSMutableArray* m_arrQQFriendWrap;
@property(retain, nonatomic) CQQGroupWrap* m_oQQGroupWrap;
-(void)dealloc;
-(id)initWithVCType:(unsigned long)vctype;
-(void)viewDidLoad;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)doSearch:(id)search;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)onUpdateContact:(id)contact;
-(void)onRemoveContact;
-(void)onAddContact;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)onSendQQMsg:(id)msg;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)initView;
-(void)initData;
-(void)LoadQQGroupFriend;
-(void)SaveQQFriend;
-(void)LoadQQGroupFriendNetworkEvent;
-(void)FullfillQQFriendInfo;
@end

@interface FindContactViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, MessageObserverDelegate, contactInfoDelegate, UIAlertViewDelegate> {
	MMTableView* m_tableView;
	UITextField* m_userNameTextField;
	MMLoadingView* m_loadingView;
	UIButton* m_searchContactBtn;
	NSString* m_nsUserNameToFind;
}
@property(retain, nonatomic) NSString* m_nsUserNameToFind;
@property(retain, nonatomic) UIButton* m_searchContactBtn;
@property(retain, nonatomic) UITextField* m_userNameTextField;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeAddContactCell:(id)cell;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)textFieldTextDidChange:(id)textFieldText;
-(void)viewDidLoad;
-(void)initView;
-(void)showAlert:(id)alert;
-(void)onSearch:(id)search;
-(void)openNetLog;
-(void)showContactListInfoView:(id)view;
-(BOOL)allTextIsBlank;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)showContactInfoView:(id)view;
-(void)addFriendScene:(id)scene;
-(BOOL)isBestGuessPhoneNumber:(id)number;
-(void)doSearch;
-(id)filterUserName:(id)name;
-(void)stopLoading;
-(void)startLoading;
@end

@interface WebViewA8KeyLogicImpl : MMObject <PBMessageObserverDelegate> {
	unsigned long _firstGetA8KeyOpCode;
	NSString* _firstGetA8KeyAppId;
	NSString* _firstGetA8KeyScope;
	NSString* _firstGetA8KeyState;
	unsigned long _getA8KeyScene;
	NSString* _bundleId;
	NSString* _getA8KeyUsrname;
	unsigned long _getA8KeyEventId;
	NSString* _shareUrl;
	NSMutableDictionary* _dicUrlPermission;
	WebviewAskAuthorizationLogic* _authorizationLogic;
	BOOL _alwaysAllowJumpUrl;
	NSMutableSet* _disableGetA8KeyUrlList;
	MMDelegateProxy<WebViewA8KeyLogicDelegate>* _delegate;
	NSURL* _currentUrl;
	UIWebView* _webView;
	unsigned long _firstGetA8KeyOpcode;
}
@property(readonly, assign, nonatomic) BOOL alwaysAllowJumpUrl;
@property(retain, nonatomic) UIWebView* webView;
@property(retain, nonatomic) NSURL* currentUrl;
@property(assign, nonatomic) MMDelegateProxy<WebViewA8KeyLogicDelegate>* delegate;
@property(retain, nonatomic) NSString* getA8KeyUsrname;
@property(retain, nonatomic) NSString* bundleId;
@property(assign, nonatomic) unsigned long getA8KeyScene;
@property(retain, nonatomic) NSString* firstGetA8KeyState;
@property(retain, nonatomic) NSString* firstGetA8KeyScope;
@property(retain, nonatomic) NSString* firstGetA8KeyAppId;
@property(assign, nonatomic) unsigned long firstGetA8KeyOpcode;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)handleGetA8KeyResp:(id)resp EventID:(unsigned long)anId;
-(void)handleOnGetA8KeyOK:(id)ok reason:(int)reason;
-(void)goToURL:(id)url;
-(void)setUrlPermission:(id)permission GeneralCtrl:(id)ctrl forURL:(id)url;
-(BOOL)isDisableGetA8KeyForUrl:(id)url;
-(id)getUrlPermission:(id)permission;
-(BOOL)hasUrlPermission:(id)permission;
-(unsigned long)getGeneralBitSet;
-(unsigned long)getPermissionBitSet2;
-(unsigned long)getPermissionBitSet;
-(id)GetDefaultPermisson;
-(id)GetMainDocumentURL;
-(id)getRequestingOrCurrentUrl;
-(id)getShareUrl;
-(void)checkApiAuthorization:(id)authorization;
-(void)updateGetA8KeySceneBySourceType:(int)type;
-(BOOL)isGettingA8Key;
-(void)getA8Key:(id)key Reason:(int)reason;
-(void)dealloc;
-(id)init;
@end

@interface SendWeiboCardController : MMUIViewController <scrollViewDelegate, UIAlertViewDelegate, IMMQRCodeExt, UIActionSheetDelegate> {
	MMAnimationTipView* m_tipView;
	MMScrollView* m_viewBG;
	stWeixinEntryRow* m_weixinEntry;
	MMLoadingView* m_loadingView;
	UIImageView* m_imageView;
}
@property(assign, nonatomic) stWeixinEntryRow* m_weixinEntry;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)Operate;
-(void)saveToAlbum;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)touchesCancelled_ScrollView:(id)view withEvent:(id)event;
-(void)touchesMoved_ScrollView:(id)view withEvent:(id)event;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)viewDidLoad;
-(void)initView;
-(void)done:(id)done;
-(void)onDownloadQRCodeFinish:(id)finish;
-(void)getNextQRCode;
-(void)willAppear;
-(void)initQRCode;
-(void)initLoadingView;
-(void)scrollToNormal;
-(void)onNextStep:(id)step;
-(void)showFacebookBindView;
-(void)onFacebookWall;
-(void)onSinaMicroBlog;
-(void)onTxMicroBlog;
-(void)onCancel:(id)cancel;
-(void)didFinishSavingImage:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)CloseLoadingView:(id)view;
-(void)popToTop;
-(void)initTipView;
-(void)dealloc;
-(id)init;
-(BOOL)isMicroBlogOpen;
@end

@interface AddShareObject : NSObject {
	BOOL m_bIsSelected;
	NSString* m_nsTitle;
	NSString* m_nsContent;
	int m_eShareType;
}
@property(assign, nonatomic) int m_eShareType;
@property(retain, nonatomic) NSString* m_nsContent;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(assign, nonatomic) BOOL m_bIsSelected;
-(id)init;
@end

@interface SendWeiboPublishController : MMUIViewController <UIAlertViewDelegate, UITextViewDelegate, MessageObserverDelegate, scrollViewDelegate, UITableViewDelegate, UITableViewDataSource, UIScrollViewDelegate, IMMFacebookMgrExt> {
	MMLoadingView* m_loadingView;
	MMAnimationTipView* m_tipView;
	UITextView* m_descriptionView;
	MMScrollView* m_scrollView;
	UIImageView* m_textBkgImgView;
	stWeixinEntryRow* m_weixinEntry;
	MMTableView* m_tableView;
	NSMutableArray* m_arrAddShareObjects;
}
@property(assign, nonatomic) stWeixinEntryRow* m_weixinEntry;
-(void)viewDidLoad;
-(void)initData;
-(void)initView;
-(void)onAddShareButtonClicked:(id)clicked;
-(void)done:(id)done;
-(void)onValueChanged:(id)changed;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onExtendTokenFinish:(BOOL)finish;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showBindView;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)NotifyFromMainCtrl:(unsigned long)mainCtrl MessageInfo:(id)info Event:(unsigned long)event;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)updateTextViewFrame:(id)frame;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)touchesCancelled_ScrollView:(id)view withEvent:(id)event;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)touchesMoved_ScrollView:(id)view withEvent:(id)event;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)updateSendButtonEnabled;
-(void)onCancel:(id)cancel;
-(void)clickSend:(id)send;
-(void)sendFail;
-(void)sendOK;
-(void)popToTop;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)didFinishSavingImage:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(id)getPlaceHolderString;
-(void)initTipView;
-(void)initLoadingView;
-(void)stopLoading;
-(void)startLoading;
-(void)dealloc;
-(id)init;
@end

@interface ShareWeixinEntryViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate> {
	MMTableView* m_tableView;
	unsigned long m_uiRowCount;
	stWeixinEntryRow* m_aryEntryRow;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapInviteCellToCellType;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initTableHeaderView;
-(id)init;
-(void)initRow;
-(void)initInvite;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)handleSelectdInviteCell:(unsigned)cell;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeInviteCell:(id)cell rowType:(unsigned)type;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)showInviteWeiboFriendView;
-(void)showInviteEmailFriendView;
-(void)showInviteQQFriendView;
-(void)showInviteSMSFriendView;
-(BOOL)isSupportSMS;
@end

@interface AnimationHelper : NSObject {
}
+(CGAffineTransform)animationRotateTransformForOrientaion:(int)orientaion;
+(id)animationPathFrom:(CGPoint)from To:(CGPoint)to byDuration:(float)duration;
+(id)animationBoundsFrom:(CGRect)from To:(CGRect)to byDuration:(float)duration;
+(id)animationPositionFrom:(CGPoint)from To:(CGPoint)to byDuration:(float)duration;
+(id)animationAlphaFrom:(float)from To:(float)to byDuration:(float)duration;
+(id)animationScaleFrom:(float)from To:(float)to byDuration:(float)duration;
+(id)animationScaleYFrom:(float)from To:(float)to byDuration:(float)duration;
+(id)animationScaleXFrom:(float)from To:(float)to byDuration:(float)duration;
+(id)animationRotateBy:(float)by andDuration:(float)duration;
+(id)animationRockAlphaBy:(float)by andDuration:(float)duration;
+(id)animationRockScaleBy:(float)by andDuration:(float)duration;
+(id)animationRockRotateBy:(float)by andDuration:(float)duration;
@end

@interface BottleAnimation : MMObject <imageViewDelegate> {
	unsigned long mAnimationStatus;
	BOOL mIsBalloonAnimationEnabled;
	unsigned long mLightAnimationStatus;
	id<NSObject, BottleAnimationDelegate> delegate;
	UIView* mCanvasView;
	UIImageView* mBalloonImageView;
	NSTimer* mLightTimer;
	UIImageView* mMoonImageView;
	UIImageView* mStarImageView;
	UIImageView* mLightLImageView;
	UIImageView* mLightMImageView;
	UIImageView* mLightRImageView;
	UIImageView* mEmptyBottleImageView;
	UIImageView* mSuckedObjectImageView;
	UIImageView* mWaterImageView;
	UIImageView* mWater2ImageView;
	UIImageView* mWater3ImageView;
	MMImageView* mFishStarImageView;
	MMImageView* mFishBottleImageView;
	UIView* mFishBottleTipView;
	CGPoint mBalloonToPoint;
}
@property(retain, nonatomic) UIView* mFishBottleTipView;
@property(retain, nonatomic) MMImageView* mFishBottleImageView;
@property(retain, nonatomic) MMImageView* mFishStarImageView;
@property(retain, nonatomic) UIImageView* mWater3ImageView;
@property(retain, nonatomic) UIImageView* mWater2ImageView;
@property(retain, nonatomic) UIImageView* mWaterImageView;
@property(retain, nonatomic) UIImageView* mSuckedObjectImageView;
@property(retain, nonatomic) UIImageView* mEmptyBottleImageView;
@property(retain, nonatomic) UIImageView* mLightRImageView;
@property(retain, nonatomic) UIImageView* mLightMImageView;
@property(retain, nonatomic) UIImageView* mLightLImageView;
@property(retain, nonatomic) UIImageView* mStarImageView;
@property(retain, nonatomic) UIImageView* mMoonImageView;
@property(retain, nonatomic) NSTimer* mLightTimer;
@property(retain, nonatomic) UIImageView* mBalloonImageView;
@property(assign, nonatomic) CGPoint mBalloonToPoint;
@property(retain, nonatomic) UIView* mCanvasView;
@property(assign, nonatomic) id<NSObject, BottleAnimationDelegate> delegate;
-(id).cxx_construct;
-(BOOL)isFinish;
-(void)fishbranduser_animation;
-(void)fishtext_animation;
-(void)fishaudio_animation;
-(void)fishfail_animation;
-(void)fishing_animation;
-(void)throwtext_animation;
-(void)throwaudio_animation;
-(void)sucktext_animation;
-(void)suckaudio_animation;
-(void)stop_light_animationWithDarkValue:(float)darkValue;
-(void)light_animation;
-(void)stop_balloon_animationWithDarkValue:(float)darkValue forced:(BOOL)forced;
-(void)balloon_animation;
-(void)initStatus;
-(void)hideAllView;
-(void)resetStatus;
-(void)dealloc;
-(id)initWithCanvas:(id)canvas;
-(id)init;
-(void)fishoverAnimation;
-(void)fishfailAnimation;
-(void)fishing3Animation;
-(void)fishing2Animation;
-(void)fishingAnimation;
-(void)throwBottleAnimationToPoint:(CGPoint)point;
-(void)bottleSuckedAnimation;
-(void)curlupAnimation;
-(void)rippleAnimation;
-(void)lightAnimation;
-(void)OnLightTimer;
-(void)balloonAnimationGoToPoint:(CGPoint)point;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)showOpenBottleTip;
-(void)stopFishStar;
-(void)initFishBottleViewInFrame:(CGRect)frame imageSize:(CGSize)size;
-(void)initFishStarViewInFrame:(CGRect)frame;
-(void)initWaterViewInFrame:(CGRect)frame;
-(void)initThrowBottleViewAtPoint:(CGPoint)point;
-(void)initLightViewAtPoint:(CGPoint)point;
-(void)initBalloonViewAtPoint:(CGPoint)point;
-(void)touchesEnded_ImageView:(id)view withEvent:(id)event;
@end

@interface BottleAudioView : MMUIView <IAudioSenderExt, IAudioReceiverExt, IAudioFuckBugExt, IAudioSenderExt, IAudioReceiverExt> {
	BOOL mIsPlayEnabled;
	BOOL mIsAudioPlaying;
	BOOL mIsAudioRecording;
	unsigned long mAudioSessionId;
	NSString* mChatName;
	unsigned long mMessageId;
	id<NSObject> mStopPlayTargetor;
	SEL mStopPlaySelector;
	unsigned long mStartRecordTime;
	NSTimer* mRecordTimer;
	id<NSObject> mStopRecordTargetor;
	SEL mStopRecordSelector;
}
@property(assign, nonatomic) SEL mStopRecordSelector;
@property(assign, nonatomic) id<NSObject> mStopRecordTargetor;
@property(retain, nonatomic) NSTimer* mRecordTimer;
@property(assign, nonatomic) unsigned long mStartRecordTime;
@property(assign, nonatomic) SEL mStopPlaySelector;
@property(assign, nonatomic) id<NSObject> mStopPlayTargetor;
@property(assign, nonatomic) unsigned long mMessageId;
@property(retain, nonatomic) NSString* mChatName;
@property(assign, nonatomic) unsigned long mAudioSessionId;
-(void)addStopRecordTarget:(id)target action:(SEL)action;
-(unsigned long)stopRecord;
-(void)startRecord;
-(void)addStopPlayTarget:(id)target action:(SEL)action;
-(void)stopPlay;
-(void)startPlay;
-(void)setChatName:(id)name andMessageId:(unsigned long)anId;
-(void)setAudioSessionId:(unsigned long)anId;
-(void)moveToPoint:(CGPoint)point;
-(void)readyRecordWithPlayEnabeld:(BOOL)playEnabeld;
-(void)readyPlayWithAudioTime:(unsigned long)audioTime;
-(void)dealloc;
-(id)init;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)handleInterruption;
-(unsigned long)realStopRecord;
-(unsigned long)realStartRecord;
-(void)onTimeCount;
-(void)stopPlayAnimation;
-(void)startPlayAnimation;
-(void)stopRecordAnimation;
-(void)startRecordAnimation;
-(void)initViewForPlayReadyWithAudioTime:(unsigned long)audioTime;
-(void)initViewForRecordStart;
-(void)initViewForRecordReadyWithText:(id)text;
-(void)OnLevelMeter:(unsigned long)meter Peak:(float)peak;
-(void)OnEndPlaying:(unsigned long)playing isForceStop:(BOOL)stop;
@end

@interface BottleButton : UIView {
	BOOL mIsEnabled;
	BOOL mIsSelected;
	id<NSObject> targetor;
	SEL selector;
	UIImage* normalImage;
	UIImage* highlightImage;
	UIImage* highlightLabelImage;
	UIImage* selectedLabelImage;
	NSString* text;
}
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) UIImage* selectedLabelImage;
@property(retain, nonatomic) UIImage* highlightLabelImage;
@property(retain, nonatomic) UIImage* highlightImage;
@property(retain, nonatomic) UIImage* normalImage;
-(void)addTarget:(id)target action:(SEL)action;
-(void)setBadgeCount:(int)count;
-(BOOL)isSelected;
-(void)cancelSelected;
-(BOOL)isEnabeld;
-(void)setEnabled:(BOOL)enabled;
-(void)dealloc;
-(void)genBottleButton;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)checkTouchPoint:(CGPoint)point IfInView:(id)view;
-(void)selected;
-(void)highlight;
-(void)normal;
-(void)initView;
@end

@interface BottleTextView : UIView <UITextViewDelegate> {
	UIView* shiftView;
}
@property(retain, nonatomic) UIView* shiftView;
-(void)clearText;
-(void)setText:(id)text;
-(id)text;
-(void)endEdit;
-(void)beginEdit;
-(void)moveToPoint:(CGPoint)point;
-(void)readyWriteWithHeight:(unsigned long)height;
-(void)readReadWithHeight:(unsigned long)height;
-(void)dealloc;
-(id)init;
-(void)showNormalTextView;
-(void)showEditTextViewWithKeyBoardHeight:(unsigned long)keyBoardHeight;
-(void)initWriteView;
-(void)initViewWithEditEnabled:(BOOL)editEnabled;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
@end

@interface BottleTipView : UIView {
	UIImageView* mBackGroundView;
	UIImageView* mTipIconView;
	UILabel* mTipTextLabel;
	UILabel* mTitleTextLabel;
	UIView* mTitleLine;
	UIButton* mTipButton1;
	UIButton* mTipButton2;
	id<NSObject, BottleTipViewDelegate> delegate;
}
@property(assign, nonatomic) id<NSObject, BottleTipViewDelegate> delegate;
-(void)hideShow;
-(void)fadeShow;
-(void)readfade;
-(void)show;
-(void)setLeftTipButtonTitle:(id)title andRightTipButtonTitle:(id)title2;
-(void)setTipButtonTitle:(id)title;
-(void)setTitleTextColor:(id)color;
-(void)setTitleText:(id)text;
-(void)setTipTextColor:(id)color;
-(void)setTipText:(id)text;
-(void)setTipIcon:(id)icon;
-(void)setBackImage:(id)image;
-(void)reset;
-(void)toggleButton2:(id)a2;
-(void)toggleButton1:(id)a1;
-(void)dealloc;
-(id)init;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)updateView;
-(void)initView;
@end

@interface BaseBottleView : UIView {
	BOOL mIsShow;
	UIView* mCanvasView;
	id<NSObject, CanvasManagerDelegate> delegate;
	BottleTipView* mBottleTipView;
	BottleAnimation* mBottleAnimation;
}
@property(retain, nonatomic) BottleAnimation* mBottleAnimation;
@property(retain, nonatomic) BottleTipView* mBottleTipView;
@property(assign, nonatomic) id<NSObject, CanvasManagerDelegate> delegate;
@property(retain, nonatomic) UIView* mCanvasView;
-(BOOL)isAnimationFinish;
-(void)doBrandUserAnimation;
-(void)doFishTextAnimation;
-(void)doFishAudioAnimation;
-(void)doFishFailAnimation;
-(void)doFishingAnimation;
-(void)doThrowTextAnimation;
-(void)doThrowAudioAnimation;
-(void)doSuckTextAnimation;
-(void)doSuckAudioAnimation;
-(void)hideAllAnimationView;
-(void)resetAnimationStatus;
-(void)showTipViewWithLeftButtonTitle:(id)leftButtonTitle andRightButtonTitle:(id)title andMessage:(id)message;
-(void)showTipViewWithButtonTitle:(id)buttonTitle andMessage:(id)message;
-(void)showWarningTipViewNoConfirm:(id)confirm;
-(void)showWarningTipViewNoHide:(id)hide;
-(void)showWarningTipView:(id)view;
-(id)NavigationController;
-(void)enableTouch;
-(void)disableTouch;
-(void)unSpotLightCanvasAnimated:(BOOL)animated;
-(void)spotLightCanvasAnimated:(BOOL)animated;
-(void)unDarkenCanvasAnimated:(BOOL)animated;
-(void)darkenCanvasAnimated:(BOOL)animated;
-(void)showCanvasBottomBar;
-(void)hideCanvasBottomBar;
-(void)showCanvasTopBar;
-(void)hideCanvasTopBar;
-(BOOL)isShow;
-(void)hideOnCanvas;
-(void)removeFromCanvas;
-(void)drawOnCanvas;
-(void)clearCanvas;
-(void)dealloc;
-(void)setBottleAnimationDelegate:(id)delegate;
-(void)setBottleAnimation:(id)animation;
-(void)setBottleTipViewDelegate:(id)delegate;
-(void)setBottleTipView:(id)view;
-(void)copyTo:(id)to;
-(id)initWithCanvas:(id)canvas;
-(id)init;
-(BOOL)animationHasSetting;
-(BOOL)tipViewHasSetting;
-(BOOL)canvasHasSetting;
@end

@interface FishBottleLogicView : BaseBottleView <BottleTipViewDelegate, BottleAnimationDelegate, IBottleMgrExt> {
	unsigned long mBottleLocalId;
	unsigned long mBottleMessageType;
	unsigned long mFishStatus;
	CBottle* mBottle;
	OpenBottleLogicView* mOpenLogicView;
	MMHeadImageView* mHeadImageView;
}
@property(retain, nonatomic) MMHeadImageView* mHeadImageView;
@property(retain, nonatomic) OpenBottleLogicView* mOpenLogicView;
-(void)toggleOpenBottle:(unsigned long)bottle;
-(void)toggleClose;
-(void)fish_star;
-(void)fish_over;
-(void)drawOnCanvas;
-(void)doAnimation;
-(void)dealloc;
-(id)initWithCanvas:(id)canvas;
-(id)init;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)BottleTipPressButton:(id)button withButtonTitle:(id)buttonTitle;
-(id)BottleAnimationGetBrandUserName:(id)name;
-(id)BottleAnimationGetBrandHeadUrl:(id)url;
-(void)BottleAnimationClickBottle:(id)bottle;
-(void)BottleAnimationClickStar:(id)star;
-(void)BottleAnimationFishFinish:(id)finish;
-(void)OnThrowBackFail;
-(void)OnThrowBack:(unsigned long)back;
-(void)OnOpenBottleFail;
-(void)OnOpenBottleOK:(id)ok Contact:(id)contact MsgWrap:(id)wrap;
-(void)handleOpenBrandUserBottle:(id)bottle;
-(void)OnFishBottleFail:(unsigned long)fail;
-(void)OnFishBottleOK:(unsigned long)ok fishCount:(unsigned long)count msgType:(unsigned long)type userName:(id)name bottle:(id)bottle;
@end

@interface OpenBottleLogicView : BaseBottleView <BottleTipViewDelegate, BottleAnimationDelegate, IBottleMgrExt> {
	CBottle* mBottleInfo;
	CBottleContact* mBottleContactInfo;
	CMessageWrap* mMessageInfo;
	UIView* mTopView;
	MMHeadImageView* mHeadImageView;
	MMHDHeadImageView* mHDHeadImageView;
	UILabel* mSignClickLabel;
	UIImageView* mSignView;
	UIView* mBottomView;
	UIButton* mThrowBackBtn;
	UIButton* mReplyBtn;
	BottleAudioView* mAudioView;
	BottleTextView* mTextView;
}
@property(retain, nonatomic) BottleTextView* mTextView;
@property(retain, nonatomic) BottleAudioView* mAudioView;
@property(retain, nonatomic) UIButton* mReplyBtn;
@property(retain, nonatomic) UIButton* mThrowBackBtn;
@property(retain, nonatomic) UIView* mBottomView;
@property(retain, nonatomic) UIImageView* mSignView;
@property(retain, nonatomic) UILabel* mSignClickLabel;
@property(retain, nonatomic) MMHDHeadImageView* mHDHeadImageView;
@property(retain, nonatomic) MMHeadImageView* mHeadImageView;
@property(retain, nonatomic) UIView* mTopView;
@property(retain, nonatomic) CMessageWrap* mMessageInfo;
@property(retain, nonatomic) CBottleContact* mBottleContactInfo;
@property(retain, nonatomic) CBottle* mBottleInfo;
-(void)toggleReply:(id)reply;
-(void)toggleThrowBack:(id)back;
-(void)throw_ok;
-(void)setMessage:(id)message;
-(void)setContact:(id)contact;
-(void)setBottle:(id)bottle;
-(void)drawOnCanvas;
-(void)dealloc;
-(id)initWithCanvas:(id)canvas;
-(id)init;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)showBottomView;
-(void)showPreviewTextView;
-(void)showPreviewAudioView;
-(void)clearUnRead;
-(void)showMessageView;
-(void)exposeBottle;
-(void)showTopView;
-(void)showView;
-(void)BottleTipPressButton:(id)button withButtonTitle:(id)buttonTitle;
-(void)BottleAnimationThrowFinish:(id)finish;
-(void)OnThrowBackFail;
-(void)OnThrowBack:(unsigned long)back;
@end

@interface ThrowBottleLogicView : BaseBottleView <ISysCallCheckExt, UIActionSheetDelegate, BottleTipViewDelegate, BottleAnimationDelegate, IBottleMgrExt, IRecordPermissionCheckExt> {
	unsigned long mThrowMode;
	unsigned long mThrowStatus;
	unsigned long mThrowDistance;
	BOOL mIsRecordStoped;
	BOOL mIsRecordAllowed;
	UIActionSheet* mWarningSheet;
	UIImageView* mBottomView;
	UIButton* mSwitchBtn;
	UIButton* mMainBtn;
	unsigned long mAudioSessionId;
	BottleAudioView* mAudioView;
	BottleTextView* mTextView;
}
@property(retain, nonatomic) BottleTextView* mTextView;
@property(retain, nonatomic) BottleAudioView* mAudioView;
@property(assign, nonatomic) unsigned long mAudioSessionId;
@property(retain, nonatomic) UIButton* mMainBtn;
@property(retain, nonatomic) UIButton* mSwitchBtn;
@property(retain, nonatomic) UIImageView* mBottomView;
@property(retain, nonatomic) UIActionSheet* mWarningSheet;
-(void)OnRecordDenied;
-(void)OnRecordPermissioned;
-(void)toggleStopRecord;
-(void)realStartRecord;
-(void)toggleRecord;
-(void)toggleThrow;
-(void)doAnimation;
-(void)toggleSwitch;
-(void)toggleClose;
-(void)throw_fail;
-(void)throw_ok;
-(void)throwing;
-(void)drawOnCanvas;
-(void)dealloc;
-(id)initWithCanvas:(id)canvas;
-(id)init;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)InputIsAvailableChanged:(BOOL)changed;
-(void)showWarningActionSheet;
-(void)showTextView;
-(void)showAudioView;
-(void)checkIfInputsAvailabled;
-(void)clearTextData;
-(void)clearAudioData;
-(void)doSwitch;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)BottleTipPressButton:(id)button withButtonTitle:(id)buttonTitle;
-(void)BottleAnimationThrowFinish:(id)finish;
-(void)OnThrowBottleFail:(unsigned long)fail;
-(void)OnThrowBottleOK:(unsigned long)ok throwCount:(unsigned long)count distance:(unsigned long)distance;
@end

@interface SandyBeachViewController : MMUIViewController <CanvasManagerDelegate, scrollViewDelegate, IBottleSessionExt, IBottleMgrExt> {
	BOOL mIsFirstAppear;
	unsigned long mTimeOfDayType;
	BOOL mIsTouchEnabeld;
	unsigned long mThrowCount;
	unsigned long mFishCount;
	unsigned long mNewBottleCount;
	MMScrollView* mScrollView;
	UIImageView* mBGImageView;
	UIImageView* mMaskImageView;
	UIImageView* mSpotLightView;
	BottleTipView* mBottleTipView;
	BottleAnimation* mBottleAnimation;
	UIView* mBeachFlatView;
	BottleButton* mThrowBtnView;
	BottleButton* mFishBtnView;
	BottleButton* mBottleBtnView;
	ThrowBottleLogicView* mThrowLogicView;
	FishBottleLogicView* mFishLogicView;
}
@property(retain, nonatomic) FishBottleLogicView* mFishLogicView;
@property(retain, nonatomic) ThrowBottleLogicView* mThrowLogicView;
@property(retain, nonatomic) BottleButton* mBottleBtnView;
@property(retain, nonatomic) BottleButton* mFishBtnView;
@property(retain, nonatomic) BottleButton* mThrowBtnView;
@property(retain, nonatomic) UIView* mBeachFlatView;
@property(retain, nonatomic) BottleAnimation* mBottleAnimation;
@property(retain, nonatomic) BottleTipView* mBottleTipView;
@property(retain, nonatomic) UIImageView* mSpotLightView;
@property(retain, nonatomic) UIImageView* mMaskImageView;
@property(retain, nonatomic) UIImageView* mBGImageView;
@property(retain, nonatomic) MMScrollView* mScrollView;
-(void)willDisshow;
-(void)viewWillBePoped:(BOOL)view;
-(void)willShow;
-(void)willAppear;
-(void)viewDidLoad;
-(void)toggleSetting:(id)setting;
-(void)toggleBottle;
-(void)toggleFish;
-(void)toggleThrow;
-(void)dealloc;
-(id)init;
-(void)undoSandyAnimation:(BOOL)animation;
-(void)doSandyAnimation;
-(void)showWarningTipViewNoConfirm:(id)confirm;
-(void)showWarningTipView:(id)view;
-(void)updateBottleCountLabel;
-(void)updateFishCountLabel;
-(void)updateThrowCountLabel;
-(void)removeViewSlipToLeft:(BOOL)left;
-(void)addViewSlipToLeft:(BOOL)left;
-(void)hideTopBar;
-(void)initButtonView;
-(void)initBgView;
-(void)initData;
-(id)NavigationController;
-(void)enableTouch;
-(void)disableTouch;
-(void)unSpotLightCanvasAnimated:(BOOL)animated;
-(void)spotLightCanvasAnimated:(BOOL)animated;
-(void)unDarkenCanvasAnimated:(BOOL)animated;
-(void)darkenCanvasAnimated:(BOOL)animated;
-(unsigned long)canvasHeightForDraw;
-(void)showCanvasTopBarAnimated:(BOOL)animated;
-(void)showCanvasBottomBarAnimated:(BOOL)animated;
-(void)hideCanvasBottomBarAnimated:(BOOL)animated;
-(void)hideCanvasTopBarAnimated:(BOOL)animated;
-(void)touchesCancelled_ScrollView:(id)view withEvent:(id)event;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)touchesMoved_ScrollView:(id)view withEvent:(id)event;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)BottleTotalUnreadCountChanged;
-(void)OnEndLoadBottleContact;
-(void)OnBeginLoadBottleContact;
-(void)StartShowSyncAllContactLoadingView;
-(void)OnFishNumChanged:(unsigned long)changed;
-(void)OnThrowNumChanged:(unsigned long)changed;
-(void)OnBottleBan:(unsigned long)ban FishNetNum:(unsigned long)num;
-(void)OnGetCountFail;
-(void)OnGetCountOK:(unsigned long)ok FishNetNum:(unsigned long)num;
@end

@interface UIViewProxy : NSObject {
	CFRunLoopRef currentLoop;
}
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(id)initWithRunLoop:(CFRunLoopRef)runLoop;
@end

@interface BottleModHeadImgViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, MessageObserverDelegate, MMPickerViewDelegate, UIActionSheetDelegate, MMImagePickerManagerDelegate> {
	MMTableView* m_tableView;
	MMHeadImageView* m_headImage;
	MMLoadingView* m_loadingView;
	unsigned long m_uiUploadHeadEventID;
}
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeShowInMainFrameCell:(id)mainFrameCell;
-(void)showInMainFrame:(id)mainFrame;
-(void)setShowInMainFrameOpen:(BOOL)mainFrameOpen configType:(unsigned long)type status:(unsigned long)status;
-(void)makeSetHeadImageCell:(id)cell;
-(void)updateHead:(id)head;
-(id)getSettingHeadImage;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showChangeImg;
-(void)showImagePicker:(int)picker;
-(id)getViewController;
-(void)handleImage:(id)image;
-(void)stopLoadingAndShowOK:(id)ok;
-(void)stopLoadingAndShowError:(id)error;
-(void)stopLoading;
-(void)startLoading;
-(void)dealloc;
-(void)viewDidLoad;
-(void)OnLeave:(id)leave;
@end

@interface BottleMsgViewController : BaseMsgContentViewController <UIAlertViewDelegate> {
	MMDelegateProxy<BottleMsgViewControllerDelegate>* m_bottleDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<BottleMsgViewControllerDelegate>* m_bottleDelegate;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)getLeftBarButton;
-(void)onBackButtonClicked;
@end

@interface BottleProfileEditViewController : MMUIViewController <MessageObserverDelegate, MMPickerViewDelegate, settingModifySignDelegate, UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, MMRegionPickerViewControllerDelegate, MMImagePickerManagerDelegate> {
	MMTableView* m_tableView;
	CUsrInfo* m_oUsrInfo;
	MMHeadImageView* m_headImage;
	MMPickerView* m_pickerView;
	MMRegionPickerViewController* m_regionPickerView;
	unsigned long m_curPickerMode;
	MMLoadingView* m_loadingView;
	unsigned long m_uiUploadHeadEventID;
	BOOL m_bIsFirstIn;
	MMDelegateProxy<EditBottleProfileDelegate>* m_delegate;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_map;
}
@property(assign, nonatomic) BOOL m_bIsFirstIn;
@property(assign, nonatomic) MMDelegateProxy<EditBottleProfileDelegate>* m_delegate;
@property(retain, nonatomic) CUsrInfo* m_oUsrInfo;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)showModifySignView;
-(void)saveNewSign:(id)sign;
-(void)showModifyAddressView;
-(void)showModifySexView;
-(void)MMPickerViewDidChooseRowTitle:(id)mmpickerView atSessionTitle:(id)sessionTitle;
-(void)MMRegionPickerDidChoosRegion:(id)mmregionPicker;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showChangeImg;
-(void)showImagePicker:(int)picker;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(id)getViewController;
-(void)handleImage:(id)image;
-(void)initLoadingView;
-(void)stopLoadingAndShowOK:(id)ok;
-(void)stopLoadingAndShowError:(id)error;
-(void)stopLoading;
-(void)startLoading;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeSetDetailProfileCell:(id)cell row:(int)row;
-(void)makeSetSignatureCell:(id)cell;
-(int)getLinesForSignature:(id)signature;
-(void)makeSetAddressCell:(id)cell;
-(void)makeSetSexCell:(id)cell;
-(void)makeSetHeadImageCell:(id)cell;
-(void)updateHead:(id)head;
-(id)getSettingHeadImage;
-(void)makeCellInfoInternal:(id)internal col:(id)col value:(id)value mustFill:(BOOL)fill;
-(id)makeMustFillLabel;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initData;
-(void)initView;
-(id)init;
-(void)OnSave;
-(void)goToSandyBeach;
-(void)OnReturn;
-(void)OnPop;
@end

@interface BottleProfileViewController : MMUIViewController <PBMessageObserverDelegate, EditBottleProfileDelegate, UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate> {
	MMTableView* m_tableView;
	MMHeadImageView* m_headImage;
	UILabel* m_cityLabel;
	UIImageView* m_sexView;
	MMHDHeadImageView* m_HDHeadView;
	CBottleContact* m_contact;
}
@property(retain, nonatomic) CBottleContact* m_contact;
-(id)initWithContact:(id)contact;
-(id)init;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)makeSignatureCell:(id)cell;
-(int)getLinesForSignature:(id)signature;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initHeaderView;
-(void)initHDHeadImage;
-(void)onSayHello;
-(void)initExposeView;
-(void)initSayHelloToContactBtn;
-(void)viewWillAppear:(BOOL)view;
-(void)SaveImg:(id)img;
-(void)updateInfo;
-(void)onEdit:(id)edit;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onExpose;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)confirmExpose:(unsigned long)expose;
@end

@interface BottleSessionCellViewEx : UIView {
	UILabel* m_displayNameLabel;
	UILabel* m_lastMessageLabel;
	UILabel* m_timeLabel;
	UILabel* m_labelCount;
	UIImageView* m_unreadCountView;
	BOOL m_bNew;
	MMBadgeView* m_bvNew;
	MMHeadImageView* m_contactHeadImage;
	UIImageView* m_statusImageView;
	BottleSessionInfo* m_sessionInfo;
}
@property(retain, nonatomic) BottleSessionInfo* m_sessionInfo;
@property(retain, nonatomic) UIImageView* m_unreadCountView;
@property(retain, nonatomic) UILabel* m_timeLabel;
@property(retain, nonatomic) UILabel* m_lastMessageLabel;
@property(retain, nonatomic) MMHeadImageView* m_contactHeadImage;
@property(retain, nonatomic) UILabel* m_displayNameLabel;
-(void)dealloc;
-(void)SetNew:(BOOL)aNew;
-(id)init;
-(void)initView;
-(void)initNew;
-(void)initUnreadCountView;
-(void)updateUnreadCountView;
-(void)updateHeadImage;
-(void)updateTimeLabel;
-(void)initTimeLabel;
-(void)initLastMessageLabel;
-(void)updateLastMessageLabel;
-(void)initDisplayNameLabel;
-(void)updateDisplayNameLabel;
-(void)initImage;
-(void)hideLabels:(BOOL)labels;
@end

@interface BottleSessionViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, IBottleSessionExt, FloatBottleContentLogicDelegate, IMMNewSessionMgrExt> {
	MMTableView* m_tableView;
	UILabel* m_tipLabel;
	NSMutableDictionary* m_dicSessionCellCache;
	NSArray* m_arrNewArriveList;
	BOOL m_bFromMainFrame;
}
@property(assign, nonatomic) BOOL m_bFromMainFrame;
@property(retain, nonatomic) NSArray* m_arrNewArriveList;
-(void)onSessionTotalUnreadCountChange:(unsigned long)change;
-(void)showTips:(id)tips;
-(void)deleteThrowBackBottle:(id)bottle;
-(void)BottleSessionChanged:(id)changed;
-(void)BottleNeedReload;
-(void)updateSessionByName:(id)name;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
-(void)pluginsChanged:(id)changed;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewWillBePushed:(BOOL)view;
-(void)initData;
-(void)reloadNewArrList;
-(BOOL)isNewArrive:(id)arrive;
-(void)initView;
-(void)updateLeftBarButtonItem;
-(void)initRightButton;
-(void)updateRightButtonState;
-(void)onJumpToBottleMainFrame:(id)bottleMainFrame;
-(void)onEditContact:(id)contact;
-(void)OnLeave:(id)leave;
-(void)goToInfoViewController:(id)infoViewController;
-(void)UpdateTipLabel;
-(void)initTableView;
-(void)UpdateTableView;
-(void)UpdateHeaderView;
-(void)UpdateTitle;
@end

@interface InitLogicController : MMObject <MessageObserverDelegate> {
	MMDelegateProxy<initLogicControllerDelegate>* m_delegate;
	vector<unsigned long, std::allocator<unsigned long> > m_vecMesssageIdToListen;
	BOOL m_bIsIniting;
	BOOL m_bFromReg;
	NSTimer* m_percenTimer;
	unsigned long m_curPercent;
	unsigned long m_uiEventID;
}
@property(assign, nonatomic) BOOL m_bFromReg;
@property(readonly, assign, nonatomic) BOOL m_bIsIniting;
@property(assign, nonatomic) MMDelegateProxy<initLogicControllerDelegate>* m_delegate;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)dealloc;
-(BOOL)startInit;
-(void)stopPercentTimer;
-(void)startPercentTimer;
-(void)onPercentTimer;
-(void)percentIniting;
-(unsigned long)getCurNetworkStatus;
-(void)StopInit;
-(BOOL)initInternal;
-(BOOL)isNeedInit;
-(BOOL)isCanShowWhatsNew;
-(id)init;
-(void)initMessageIdToListen;
@end

@interface ChatRoomConfirmWebViewController : MMUIViewController <WCAccountBindPhoneControlLogicDelegate, IGroupMgrExt, UIWebViewDelegate> {
	UIWebView* m_webView;
	CContact* m_chatRoomContact;
	WCAccountBindPhoneControlLogic* m_bindLogic;
	BOOL m_needBindPhone;
}
@property(assign, nonatomic) BOOL needBindPhone;
@property(retain, nonatomic) CContact* chatRoomContact;
-(void)OnChatRoomUpgrade:(id)upgrade rspCode:(int)code restQuota:(unsigned long)quota maxCount:(unsigned long)count;
-(void)bindPhoneReturn;
-(void)onWCAccountBindPhoneControlLogicStop;
-(void)upgradeChatRoom;
-(void)checkBindPhone;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(id)dismissWithAnim;
-(void)dealloc;
-(void)viewDidLoad;
@end

@interface MainFrameLogicController : MMObject <MessageObserverDelegate, IGroupMgrExt, INetworkStatusMgrExt, IMMNewSessionMgrExt, IWXPresentExt, IContactMgrExt> {
	MMDelegateProxy<mainFrameLogicControllerDelegate>* m_delegate;
	BOOL m_bPlayNewMsgDuringOneSync;
	vector<unsigned long, std::allocator<unsigned long> > m_vecMesssageIdToListen;
	NSMutableArray* m_voiceSearcharrFilteredSession;
	NSMutableArray* m_arrFilteredSession;
	NSString* m_nsLastSearchText;
	NSTimer* m_updateTimeLabelTimer;
	BOOL m_bReadyToLoadData;
	NSMutableDictionary* m_dicPlayNewMsgNotify;
	NSString* m_nsUsrNameOnStatusBar;
	unsigned long m_shownCellMaxIndex;
	BOOL m_bIsPreCreatingCellData;
	int m_lastPreCreateCellIndex;
	MainFrameCellDataManager* m_cellDataMgr;
}
@property(retain, nonatomic) NSString* m_nsLastSearchText;
@property(readonly, assign, nonatomic) BOOL m_bReadyToLoadData;
@property(assign, nonatomic) MMDelegateProxy<mainFrameLogicControllerDelegate>* m_delegate;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)pluginsChanged:(id)changed;
-(void)onNetworkStatusChange:(unsigned long)change;
-(void)OnChangeNotifyStatus:(id)status withStatus:(BOOL)status2;
-(void)OnQuitPaidChatRoom:(id)room rspCode:(int)code;
-(void)OnQuitGroup:(id)group;
-(void)popToMainFrameAnimated:(id)mainFrameAnimated;
-(void)OnUnreadVerifyMsgCountChange:(id)change;
-(void)OnReceiveChatRoomVerifyMsg:(id)msg;
-(void)OnChangeGroup:(id)group;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)onDeleteSession:(unsigned long)session withUser:(id)user;
-(void)onActiveUsrNameChange:(id)change curUsrName:(id)name;
-(void)onNewMsgArriving:(id)arriving NotifyFlag:(int)flag;
-(void)onSessionTotalUnreadCountChange:(unsigned long)change;
-(void)onSessionChanged:(id)changed;
-(void)onNeedReload;
-(void)clearResource;
-(BOOL)canShowStatusBar;
-(id)getSessionInfoOnStatusBar;
-(unsigned long)getCurNetworkStatusType;
-(BOOL)isInitEd;
-(BOOL)isShowSetHead;
-(id)getSessionInfoByContact:(id)contact;
-(void)cancelSearch;
-(void)doSearch:(id)search;
-(void)setVoiceSearchFilteredSessionInfo:(id)info;
-(id)getVoiceSearchFilteredSessionInfo:(unsigned long)info;
-(int)getLastActionSessionIndex;
-(int)getFirstHasUnreadMsgSessionIndexFrom:(int)from;
-(id)getFilteredSessionInfo:(unsigned long)info;
-(unsigned long)getFilteredSessionCount;
-(unsigned long)getVoiceSearchFilteredSessionCount;
-(BOOL)isHasActiveUsr;
-(BOOL)isActiveUsr:(id)usr;
-(void)setActiveSession:(id)session;
-(void)deleteSession:(unsigned long)session;
-(unsigned long)getTotalUnreadCountInRedDot;
-(unsigned long)getTotalUnreadCount;
-(id)getSessionInfo:(unsigned long)info;
-(unsigned long)getSessionCount;
-(void)setReadyToLoadData;
-(void)updateTimeForAllCellDatas;
-(void)removeCellData:(id)data;
-(id)getCellDataByUsrName:(id)name;
-(void)cleanupPreLoadCacheIfNeed:(unsigned long)need;
-(void)cleanupCellDataCache;
-(id)updateCellData:(id)data;
-(id)getCellDataForFilterSession:(unsigned long)filterSession;
-(id)getCellData:(unsigned long)data;
-(void)dealloc;
-(id)initWithFromReg:(BOOL)reg;
-(void)fixSelfHeadImage;
-(void)removeNotificationCenterObservers;
-(void)addNotificationCenterObservers;
-(void)unRegisterExt;
-(void)registerExt;
-(void)unListenMessageId;
-(void)initMessageIdToListen;
-(void)callUpdateSessionByName:(id)name;
-(void)callUpdateSession:(id)session;
-(void)callUpdateWXTalkStatusBar;
-(void)callUpdateStatusBar;
-(id)getUnreadSessionInfoList;
-(void)playNewMsgNotify:(id)notify NotifyFlag:(int)flag;
-(BOOL)isPlayingOrRecording;
-(BOOL)isMsgUnread:(id)unread NotifyFlag:(int)flag;
-(void)onUpdateTimeLabelTimer:(id)timer;
-(void)stopUpdateTimeLabelTimer;
-(void)startUpdateTimeLabelTimer;
-(void)startupPreCreateForCellData;
@end

@interface NewMainFrameViewController : MMTabBarBaseViewController <mainFrameLogicControllerDelegate, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, UISearchDisplayDelegate, UIActionSheetDelegate, contactInfoDelegate, CreateChatLogicDelegate, MMVoiceSearchDelegate, MMSearchBarDelegate, VoiceSearchMutilLevelViewDelegate, MMVoiceSearchBarDelegate, NewDeviceLoginViewControllerDelegate, IMMFacebookMgrExt, SetPassowrdViewControllerDelegate, MMKernelExt, IWXPresentExt, IVOIPUILogicMgrExt, IAutoSetRemarkExt, UIGestureRecognizerDelegate, IAcctStorageMgrExt, UIAlertViewDelegate> {
	MainFrameLogicController* m_mainFrameLogicController;
	MMTableView* m_tableView;
	MFTitleView* m_titleView;
	MMLoadingView* m_loadingView;
	BOOL m_bSearching;
	CGPoint m_tableContentOffset;
	BOOL m_bFromReg;
	unsigned long m_uiTipStatus;
	CreateChatLogic* m_createChatLogic;
	BannerLogicController* m_bannerLogicController;
	NSString* m_nsTitle;
	int m_voiceSearchLevelNumber;
	VoiceSearchMutilLevelViewController* voiceSearchMultilLevelViewController;
	BOOL m_bFirstInitView;
	BOOL m_bOnMemoryWarningToFinishedSearchBar;
}
@property(assign, nonatomic) BOOL m_bFromReg;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(retain, nonatomic) BannerLogicController* m_bannerLogicController;
@property(retain, nonatomic) CreateChatLogic* m_createChatLogic;
-(id).cxx_construct;
-(void)onSettingChange;
-(void)onSetStrangerRemark:(id)remark;
-(void)OnRoomMemberChange:(id)change withNewMemberList:(id)newMemberList;
-(void)onVideoVoipViewDisappear;
-(void)onVideoVoipViewDidAppear:(id)onVideoVoipView;
-(void)updateItem:(id)item;
-(void)onAuthOK;
-(void)onFBCheckPasswordFinished:(BOOL)finished;
-(id)cellForHandleVoiceSearchViewTable:(id)handleVoiceSearchViewTable index:(id)index;
-(void)displayControllerSetActive:(BOOL)active animated:(BOOL)animated;
-(void)pushVoiceSearchResultsViewController:(id)controller Animation:(BOOL)animation;
-(BOOL)handleVoiceSearchResults:(id)results;
-(id)usrNameConvertToSessionInfos:(id)sessionInfos;
-(id)getSessionInfoByContact:(id)contact;
-(BOOL)shouldShowTabbarAfterSearchBarBecomeUnActive;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)SearchBarBecomeUnActive;
-(void)SearchBarBecomeActive;
-(void)updateViewWhenSelectTab:(BOOL)tab;
-(void)changeNetworkStatus:(unsigned long)status;
-(unsigned long)getTotalUnreadCount;
-(void)clearResource;
-(void)newMessageByContact:(id)contact msgWrapToAdd:(id)add;
-(void)newMessageByContact:(id)contact msgWrapToAdd:(id)add animated:(BOOL)animated;
-(void)newMessageByContact:(id)contact msgWrapToAdd:(id)add animated:(BOOL)animated FromOtherTab:(BOOL)otherTab;
-(void)resetTableViewOffset:(id)offset;
-(void)tapStatusBarMessage;
-(void)animationShow;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)popToMainFrameAnimated:(BOOL)mainFrameAnimated;
-(void)updateStatusBar;
-(void)stopLoading;
-(void)startLoading;
-(void)initLoadingView;
-(void)deleteSessionCell:(unsigned long)cell withUser:(id)user;
-(void)selectCellForName:(id)name;
-(void)cancelSelectedCell;
-(void)updateAllItemTimeLabel;
-(void)updateSession:(id)session;
-(void)reloadSessions;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(unsigned long)getVoiceID;
-(void)backToPreView;
-(void)voiceSearchMultilLevelTableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)voiceSearchMultilLevelTableView:(id)view andCell:(id)cell cellForRowAtIndexPath:(id)indexPath;
-(float)voiceSearchMultilLevelTableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(void)MMVoiceSearchBarCancelButtonClicked:(id)clicked;
-(void)MMVoiceSearchBarSearchButtonClicked:(id)clicked;
-(void)MMVoiceSearchBar:(id)bar textDidChange:(id)text;
-(BOOL)MMVoiceSearchBarShouldBeginEditing:(id)mmvoiceSearchBar;
-(void)cancelSearch;
-(void)doSearch:(id)search;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)handleCommitEdit:(unsigned)edit;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showEditActionSheet:(unsigned)sheet;
-(id)getDestructiveBtnTitle:(unsigned)title;
-(id)getActionSheetTitle:(unsigned)title;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)handleSelectIndexPath:(id)path tableView:(id)view;
-(id)getCommonChatRoom:(id)room;
-(void)openContactInfoView:(int)view;
-(BOOL)isNeedMutilLevelView:(id)view;
-(BOOL)isNeedShowProfileInVoiceSearch:(int)voiceSearch;
-(BOOL)isOpenPluginContactInfoView:(id)view;
-(void)openPluginContactInfoView:(id)view;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeFirstVoiceSearchResultCell:(id)cell row:(unsigned)row;
-(void)makeCell:(id)cell cell:(id)cell2 row:(unsigned)row responseTabGesture:(BOOL)gesture;
-(void)makeCellBackGroundBySession:(id)session cell:(id)cell showTopList:(BOOL)list;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)showChatNotPushView:(unsigned long)view show:(BOOL)show;
-(void)showTimeLabel:(unsigned long)label show:(BOOL)show;
-(void)openMessageContentView:(id)view startSendMessage:(BOOL)message msgWrapToAdd:(id)add animated:(BOOL)animated jumpToFirstUnreadNode:(BOOL)firstUnreadNode indexPath:(id)path;
-(void)openMessageContentView:(id)view startSendMessage:(BOOL)message msgWrapToAdd:(id)add animated:(BOOL)animated jumpToFirstUnreadNode:(BOOL)firstUnreadNode;
-(void)openBrandSessionView:(id)view;
-(void)openSyncPhoneContactsView:(id)view;
-(void)openFloatBottleContentView:(id)view;
-(void)openQQOfflineMsgView;
-(void)openSxMsgView;
-(void)onRightBtnActionSheet;
-(void)updateNearMode;
-(void)onAddContact;
-(void)createQRCodeViewController;
-(void)onCreateNewMessage;
-(void)openCreateNewMessageView:(unsigned long)view;
-(void)onCreateChatContactReturn:(id)aReturn;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)resetViewStatus;
-(void)unLoadView;
-(void)unLoadData;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidLoad;
-(void)viewWillPush:(BOOL)view;
-(void)viewWillPop:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)setTableViewContentInsetForSearchBar;
-(void)initView;
-(void)initStatusBar;
-(void)initFooterView;
-(void)onShowPhoneFriend;
-(void)onShowQQFriend;
-(void)onShowGoogleFriend;
-(void)initSearchController;
-(void)resetHeaderView;
-(void)initHeaderView;
-(void)reloadHeaderView;
-(void)initTableView;
-(void)initShadowLogo;
-(void)initTitle;
-(void)initTitleView;
-(void)initBarItem;
-(void)checkDelayLoadData;
-(void)setReadyToLoadData;
-(void)initData;
-(void)popToSelfViewController;
-(void)updateUnReadCount;
-(void)willAppear;
-(void)setTableViewContentOffset:(CGPoint)offset;
-(void)setNewMainFrameTableViewContentOffsetToTheFirstUnreadSession;
-(void)setNewMainFrameTableViewContentOffset:(CGPoint)offset;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface SetHeaderImageViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UINavigationControllerDelegate, UIImagePickerControllerDelegate, UIActionSheetDelegate, MMImagePickerManagerDelegate, MessageObserverDelegate> {
	MMTableView* m_tableView;
	MMHeadImageView* m_headView;
	UILabel* m_userNameLabel;
	UILabel* m_nickNameLabel;
	UILabel* m_remarkLael;
	UILabel* m_dddedLabel;
	UIButton* m_opBtn;
	UIButton* m_RemarkBtn;
	UIButton* m_BlockBtn;
	UILabel* m_BlockLabel;
	UILabel* m_domainLabel;
	CContact* m_contact;
	BOOL m_bInContactsInit;
	BOOL m_bInContactsAfter;
	id<SetHeaderImageViewDelegate> m_delegate;
	unsigned long m_uEventId;
	vector<unsigned long, std::allocator<unsigned long> > m_vecMesssageIdToListen;
	MMLoadingView* m_loadingView;
	unsigned long m_uiUploadHeadEventID;
}
@property(assign, nonatomic) id<SetHeaderImageViewDelegate> m_delegate;
@property(retain, nonatomic) CContact* m_contact;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)dealloc;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)modifyContactRemark:(id)remark;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(id)getViewController;
-(void)onIKnowItBtnClick;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onChangeImg;
-(void)showChangeImg;
-(void)showImagePicker:(int)picker;
-(void)handleImage:(id)image;
-(void)updateHead:(id)head;
-(void)stopLoadingAndShowOK:(id)ok;
-(void)stopLoadingAndShowError:(id)error;
-(void)stopLoading;
-(void)startLoading;
-(void)viewDidLoad;
-(void)initView;
-(void)initFooterView;
-(void)initHeaderView;
-(void)initTableView;
-(void)initData;
-(id)init;
-(void)initLoadingView;
-(void)initBlockLabel;
-(void)updateBlockLabel;
-(void)updateBlockBtn;
-(void)updateRemarkBtn;
-(void)initOpBtn;
-(void)updateOpBtn;
-(void)initRemarkLabel;
-(void)updateRemarkLabel;
-(void)initUserNameLabel;
-(id)getUserNameCol;
-(void)initNickNameLabel;
-(void)updateNickNameLabel;
-(void)initHeadImage;
-(void)initMessageIdToListen;
-(void)updateHeadImage;
-(id)getSettingHeadImage;
-(void)tryGetContactUsrImg;
@end

@interface AutoplayController : MMObject {
	NSMutableArray* m_arrMesLocalIDs;
	MMDelegateProxy<AutoplayController>* m_delegate;
	BOOL m_bCanPlay;
	BOOL m_bCanStart;
}
@property(assign, nonatomic) MMDelegateProxy<AutoplayController>* m_delegate;
-(void)dealloc;
-(void)Reset;
-(void)systemActived:(id)actived;
-(void)systemResigned:(id)resigned;
-(void)onStopPlayingVideo;
-(void)onStopRecordingVideo;
-(void)onBeginRecordVideo;
-(void)onBeginPlayVideo;
-(void)onStopRecording;
-(void)onStartPlaying:(id)playing;
-(void)onEndPlaying:(unsigned long)playing isForceStopped:(BOOL)stopped;
-(void)onBeginStartRecording;
-(void)onMessageDownloaded:(unsigned long)downloaded;
-(void)onMessagePlayed:(unsigned long)played;
-(void)AddMessageLocalID:(unsigned long)anId;
-(void)PlayList;
-(BOOL)isPlayOK;
-(id)init;
-(void)UnRegister;
-(void)Register;
@end

@interface ImageController : MMObject <UIActionSheetDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, ImagePreviewDelegate, ImageBrowseDelegate, MMImagePickerManagerDelegate, UIAlertViewDelegate> {
	MMDelegateProxy<ImageControllerDelegate>* m_delegate;
	CaptureVideoInfo* m_oVideoInfo;
	UINavigationController* m_oVideoPicker;
	MMLoadingView* m_loadingView;
}
@property(retain, nonatomic) UIViewController* m_oVideoPicker;
@property(retain, nonatomic) CaptureVideoInfo* m_oVideoInfo;
@property(assign, nonatomic) MMDelegateProxy<ImageControllerDelegate>* m_delegate;
-(void)downloadFailInImageBrowse;
-(void)preViewImage:(id)image;
-(void)Reset;
-(void)MMImagePickerManager:(id)manager didFinishPickingVideoWithInfo:(id)info;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)didSelectImage:(id)image Data:(id)data Finish:(BOOL)finish fromImagePicker:(id)imagePicker;
-(void)didSelectImage:(id)image Data:(id)data fromImagePicker:(id)imagePicker;
-(void)didSelectImage:(id)image fromImagePicker:(id)imagePicker;
-(void)didSelectImage:(id)image Data:(id)data Finish:(BOOL)finish ImageInfo:(id)info fromImagePicker:(id)imagePicker;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)willPresentAlertView:(id)view;
-(void)handleVideo:(id)video;
-(void)handleVideo:(id)video ImagePicker:(id)picker;
-(void)handleVideo;
-(int)getVideoDuration:(id)duration;
-(void)SendImage:(id)image;
-(void)onSendCaptrueCancel:(id)cancel;
-(void)OpenCameraController;
-(void)OpenMediaBrowser;
-(void)showImagePicker:(int)picker;
-(id)getViewController;
-(void)initLoadingView;
-(void)dealloc;
-(id)init;
@end

@interface PlayingController : NSObject <IAudioReceiverExt> {
	BOOL m_bPlaying;
	unsigned long m_uiMesLocalID;
	id<PlayControllerDelegate> m_delegate;
}
@property(assign, nonatomic) id<PlayControllerDelegate> m_delegate;
-(void)dealloc;
-(void)Reset;
-(void)PlayVideo:(id)video;
-(void)videoPlayFinished:(id)finished;
-(void)OnEarTip;
-(void)OnBeginPlaying:(unsigned long)playing ErrNo:(int)no;
-(void)OnEndPlaying:(unsigned long)playing isForceStop:(BOOL)stop;
-(void)OnPlayProcess:(unsigned long)process Process:(unsigned long)process2;
-(void)StopPlayMessageWithUsrName:(id)usrName;
-(void)StopPlayMessage:(id)message;
-(void)StartPlayMessage:(id)message;
-(id)getChatName:(id)name;
-(BOOL)isPlaying;
-(void)UnRegister;
-(void)Register;
-(id)init;
@end

@interface RecordController : MMObject <IAudioSenderExt, IAudioFuckBugExt, IRemoteControlCheckExt, IMsgExt> {
	NSTimer* m_TimeoutTimer;
	NSTimer* m_StartRecordTimer;
	id<RecordControllerDelegate> m_delegate;
	BOOL m_bRecording;
	BOOL m_bRecordEnabled;
	unsigned long m_uiTmpRecordID;
	BOOL m_bRemoteControl;
	BOOL m_isShowPreparing;
}
@property(assign, nonatomic) BOOL m_isShowPreparing;
@property(assign, nonatomic) unsigned long m_uiTmpRecordID;
@property(assign, nonatomic) id<RecordControllerDelegate> m_delegate;
-(void)dealloc;
-(void)Reset;
-(void)CheckIfButtonPressing:(id)pressing Status:(unsigned*)status;
-(void)OnSendError:(id)error ErrNo:(int)no;
-(void)OnMsgSent:(id)sent;
-(void)OnAddMsg:(id)msg;
-(void)OnLevelMeter:(unsigned long)meter Peak:(float)peak;
-(void)OnEndRecording:(unsigned long)recording;
-(void)OnBeginRecording:(unsigned long)recording ErrNo:(int)no;
-(void)iRemoteControlCheckShouldFinishRecord;
-(void)iRemoteControlCheckShouldBeginRecord;
-(BOOL)canRemoteRecord;
-(void)stopRecording_notification:(id)notification;
-(void)CancelRecording;
-(void)StopRecording;
-(void)StopRecordingInternal;
-(void)StartRecordingFromUsr:(id)usr ToUsr:(id)usr2 UserInfo:(id)info;
-(void)StartTmpRecording;
-(void)StartTmpRecordInternal:(id)internal;
-(void)StartRecordingInternal:(id)internal;
-(void)RecordingTimeOut;
-(void)TooLongTips;
-(void)TooShortTips;
-(void)ResetTips;
-(void)setButtonHighlighted:(BOOL)highlighted;
-(BOOL)isRecording;
-(id)init;
-(void)UnRegister;
-(void)Register;
@end

@interface TypingController : NSObject <MessageObserverDelegate, IUploadVoiceExt, IMsgExt> {
	unsigned long m_uLastSendTypingTime;
	CBaseContact* m_contact;
	NSString* m_nsLastTextViewText;
	id<TypingControllerDelgate> m_delegate;
	NSTimer* m_receiveTypingTimer;
	unsigned long m_uLastReveicedMsgTime;
	unsigned long m_uChatStatus;
	BOOL m_bFirstTyping;
}
@property(assign, nonatomic) unsigned long m_uLastReveicedMsgTime;
@property(retain, nonatomic) NSTimer* m_receiveTypingTimer;
@property(assign, nonatomic) id<TypingControllerDelgate> m_delegate;
@property(retain, nonatomic) NSString* m_nsLastTextViewText;
@property(retain, nonatomic) CBaseContact* m_contact;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnUploadVoiceOK:(id)ok;
-(void)dealloc;
-(void)Reset;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)onReceiveTypingTimer:(id)timer;
-(void)stopReceiveTypingTimer;
-(void)startReceiveTypingTimer;
-(void)updateTitle:(int)title;
-(id)getUsrNameTitle;
-(void)onTextChange:(id)change;
-(void)trySendTyping:(int)typing;
-(void)trySendClearTyping;
-(BOOL)sendChatStatusInternal:(unsigned long)internal;
-(BOOL)IsNeedTyping;
-(void)UnRegister;
-(void)Register;
-(id)init;
@end

@interface UrlController : MMObject <MMWebViewDelegate, contactInfoDelegate, IMsgExt, ILinkEventExt, UIActionSheetDelegate> {
	MMURLHandler* m_urlHandler;
	MMPhoneNumberHandler* m_phoneNumberHandler;
	id<UrlControllerDelegate> m_delegate;
}
@property(assign, nonatomic) id<UrlControllerDelegate> m_delegate;
-(void)dealloc;
-(void)CreateNewContact:(id)contact;
-(void)AddPhoneNumberToExistContact:(id)existContact;
-(void)handleUrl:(id)url withExtraInfo:(id)extraInfo;
-(void)onDone:(id)done;
-(void)jumpToProfile:(id)profile;
-(void)jumpToBindPhone;
-(void)jumpToMicroBlogContacts;
-(void)contactsReturn:(BOOL)aReturn contact:(id)contact;
-(void)webViewReturn:(id)aReturn;
-(void)webviewShow:(id)show;
-(void)Reset;
-(void)UnRegister;
-(void)Register;
-(id)init;
@end

@interface BaseMsgContentLogicController : MMObject <BaseMsgContentDelgate, BaseMsgContentInBackgroundThreadDelgate, UIActionSheetDelegate, ImageControllerDelegate, contactInfoDelegate, UINavigationControllerDelegate, MessageObserverDelegate, TypingControllerDelgate, MsgDelegate, IMsgExt, ILinkEventExt, contactVerifyLogicDelegate, UrlControllerDelegate, IContactMgrExt, IMMNewSessionMgrExt, RecordControllerDelegate, PlayControllerDelegate, AutoplayController, ShakeControllerDelegate, UIActionSheetDelegate, ShareFriendOnChatDelegate, MFMailComposeViewControllerDelegate, MMPickLocationViewControllerDelegate, ImplicitAnimationControllerDelegate, IVOIPUILogicMgrExt, MMInputToolViewCustomizationDelegate, IWXPresentExt, IWXTalkExt, UIAlertViewDelegate, MultiSelectContollerDelegate, ViewLocationDelegate, MyFavoritesListViewControllerDelegate> {
	BaseMsgContentViewController* m_viewController;
	CBaseContact* m_contact;
	ImageController* m_imageController;
	UrlController* m_urlController;
	RecordController* m_recordController;
	PlayingController* m_playingController;
	AutoplayController* m_autoplayController;
	TypingController* m_typingController;
	GameController* m_GameController;
	ShakeController* m_shakeController;
	ShareFriendOnChatLogicController* m_shareCardController;
	MMPickLocationViewController* m_pickLocationController;
	ImplicitAnimationController* m_implicitAnimationController;
	CContactVerifyLogic* m_contactVerifyLogic;
	MultiSelectController* m_multiSelectController;
	MyFavoritesListViewController* m_myFavListController;
	unsigned long m_uiDownLeftCount;
	unsigned long m_uiSearchedResultNodeLocalID;
	unsigned long m_uiDownLastCreateTime;
	unsigned long m_uiLastCreateTime;
	unsigned long m_uiLeftCount;
	unsigned long m_uiLeftUnreadCount;
	BOOL m_bInContacts;
	BOOL m_bAddUsr;
	CMessageWrap* m_msgResend;
	UINavigationController* m_navigationController;
	long m_pushTime;
	unsigned long m_uiSubviewShowStatus;
	int m_eViewDisshowStatus;
	BOOL m_bIsEditing;
}
@property(assign, nonatomic) long m_pushTime;
@property(retain, nonatomic) MMPickLocationViewController* m_pickLocationController;
@property(assign, nonatomic) UINavigationController* navigationController;
@property(retain, nonatomic) CMessageWrap* m_msgResend;
@property(retain, nonatomic) CBaseContact* m_contact;
-(void)UnRegister;
-(void)Register;
-(void)WillBePushedLogicController;
-(void)onWillPushFromNavigationController;
-(void)onWillPopFromNavigationController;
-(void)onPopFromNavigationController;
-(void)unsetSession;
-(void)OnAddFriend:(id)aFriend MsgWrap:(id)wrap OpCode:(unsigned long)code;
-(id)getBackgroundView;
-(void)dealloc;
-(void)onVideoVoipViewDisappear;
-(void)onVideoVoipViewDidAppear:(id)onVideoVoipView;
-(void)ViewWillDisappear;
-(void)ViewWillAppear;
-(void)ViewDidAppear;
-(void)onSessionTotalUnreadCountChange:(unsigned long)change;
-(void)CameraControllerDidTakeVideo:(id)cameraController;
-(void)onModifyContact:(id)contact;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)ContactsViewReloadData;
-(void)contactInfoReturn;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)onFinishedShareMyFriend:(BOOL)aFriend;
-(id)getMyFriendContact;
-(id)getShareMyFriendParentViewController;
-(void)onAddToContacts:(id)contacts;
-(void)onEditMessage:(id)message;
-(void)updateTypingTitle:(id)title;
-(BOOL)CanSendMultiImage;
-(BOOL)CanSendOriginalImage;
-(void)processInsertedImage:(id)image withData:(id)data ImageInfo:(id)info;
-(void)processInsertedImage:(id)image ImageInfo:(id)info;
-(void)DidEnterBackground:(id);
-(BOOL)isShowHeadImage:(id)image;
-(BOOL)CanRemoteRecord;
-(id)GetContactName;
-(unsigned long)CheckVoiceBtnState;
-(void)SetButtonHighlighted:(BOOL)highlighted;
-(void)SetPeakPower:(float)power;
-(void)ShowTooLongTips;
-(void)ShowTooShortTips;
-(void)SetVoiceEnabled:(BOOL)enabled;
-(void)HideRecordTips;
-(void)ShowPreparing;
-(void)ShowRecording;
-(void)onRecordModMsg:(id)msg;
-(void)onRecordAddMsg:(id)msg;
-(void)onForwardMessageOK;
-(id)getCurrentViewController;
-(void)onMultiOprationComplete;
-(void)onMultiMsgDelete:(id)aDelete;
-(void)sendMultiMsgBySystemMail:(id)mail;
-(void)sendMultiMsgToBrandContact:(id)brandContact;
-(void)sendMultiMsgByMail:(id)mail;
-(void)sendMultiMsgToFriend:(id)aFriend;
-(void)addMultiMsgToMyFav:(id)myFav;
-(void)toBeEditing:(BOOL)beEditing;
-(id)GetRightBarBtn;
-(BOOL)hasDownMoreMsg;
-(BOOL)hasMoreMsg;
-(void)addGameNode:(id)node;
-(void)StartPlayVideo:(id)video;
-(void)StartDownloadVideo:(id)video;
-(void)StartUploadVideo:(id)video;
-(void)StopDownloadVideo:(id)video;
-(void)StopUploadVideo:(id)video;
-(BOOL)canShowChatRoomInfo;
-(void)resetWithMessageWrap:(id)messageWrap;
-(void)didSelectSearchResultForMessageWrap:(id)messageWrap;
-(id)QueryMsgText:(id)text FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count;
-(BOOL)ShouldShowSearchedAnyMsg;
-(BOOL)ShouldShowSearchResultMessageArray;
-(BOOL)ShouldShowSearchCompleteRightBarButton;
-(BOOL)ShouldShowSearchBar;
-(id)GetRightBarButtonTitle;
-(id)GetRightBarButtonImage;
-(void)StateChanged;
-(void)StopPlaying:(id)playing;
-(void)StartPlaying:(id)playing FromTouch:(BOOL)touch;
-(void)StartPlayMessage:(id)message;
-(BOOL)IsRecording;
-(void)CancelRecording;
-(void)StopRecording;
-(void)StartRecording;
-(id)GetContact;
-(void)onTextChange:(id)change selectedRange:(NSRange)range;
-(id)GetTitleImage;
-(void)onViewControllerDisshow;
-(void)onBackFromNavigationController;
-(void)SaveContentAndState;
-(void)ResendMessage:(id)message;
-(BOOL)EnabledOfHeaderButtonAtIndex:(unsigned long)index;
-(id)ImageOfHeaderButtonAtIndex:(unsigned long)index;
-(id)TitleOfHeaderButtonsAtIndex:(unsigned long)index;
-(unsigned long)NumberOfHeaderButtons;
-(void)VoiceModeClicked;
-(void)ViewDidInit;
-(void)ViewWillInit;
-(void)updateWXTalkRoomTipsView;
-(id)GetUsrTitle;
-(void)CustomToolViewEX:(id)ex;
-(BOOL)shouldPreventViewcontrollerAutorotate;
-(id)nameForHeadImageLongPressed:(id)headImageLongPressed;
-(BOOL)canReloadViewIfMemoryWarning;
-(BOOL)onLoadDownMoreMessage;
-(BOOL)onLoadMoreMessage;
-(void)onVideoOperation;
-(void)selectVideo;
-(void)onSendCaptrueImage:(id)image;
-(void)onOpenCameraController;
-(void)onOpenMediaBrowser;
-(void)DelMsgWithMsgList:(id)msgList DelAll:(BOOL)all;
-(id)GetDownMessageArray;
-(id)GetMessageArray;
-(id)GetSearchedResultContentMessageArray;
-(id)GetDownMsgByOneIndex:(id)index FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetDownMsgByDoubleIndex:(id)index FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(unsigned long)getMsgCountToLoad;
-(void)ShowReader:(id)reader;
-(void)PreviewImage:(id)image;
-(void)ViewLocation:(id)location;
-(void)onSendLocationToFriend:(id)aFriend ViewController:(id)controller;
-(id)onGetRightBarButton;
-(void)onCancelSeletctedLocation;
-(void)onFinishSelectedLocation;
-(void)onSelectedFavoritesItem:(id)item;
-(void)onOpenRecommandApp:(id)app downloadUrl:(id)url;
-(void)onOpenMyFavoritesListController;
-(void)onOpen3rdAppListController;
-(void)SelectLocation:(BOOL)location;
-(void)AddLocationMessageWithLocation:(id)location;
-(void)OpenUrl:(id)url;
-(void)OnTagLink:(id)link;
-(void)onVideoVoipInvite;
-(void)onVoipInvite;
-(void)WXTalk;
-(void)ShareCard;
-(void)SendEmoticonMessage:(id)message;
-(void)SendEmojiArtMessage:(id)message;
-(void)SendTextMessage:(id)message;
-(void)SendImageMessage:(id)message withData:(id)data ImageInfo:(id)info;
-(void)SendMessageWrap:(id)wrap;
-(id)GetMessageFromImage:(id)image;
-(void)SendImageMessage:(id)message ImageInfo:(id)info;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)EmojiUncle:(id)uncle;
-(void)onShareAppMsg:(id)msg;
-(BOOL)CanSelectMyFavoritesItemForSendingMsg;
-(BOOL)CanRotateOrientation;
-(BOOL)CanWXTalk;
-(BOOL)CanSendEmoticonMessage;
-(BOOL)CanAddApp;
-(BOOL)CanOpenCamera;
-(BOOL)CanLongPressHeadImage;
-(BOOL)CanSend3rdMsg;
-(BOOL)CanSendVoipMsg;
-(BOOL)CanSendLocationMsg;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendVoiceMsg;
-(BOOL)CanSendImageMsg:(id)msg;
-(BOOL)CanSendTextMsg:(id)msg;
-(void)OpenContactInfo:(id)info;
-(void)OpenDetailInfo;
-(void)contactVerifyOk:(id)ok opCode:(unsigned long)code;
-(void)verifyContactByUsrNameWithOpCode:(unsigned long)opCode userName:(id)name;
-(void)onEndPlay:(unsigned long)play isForceStop:(BOOL)stop;
-(void)onForceEarpieceModeChanged;
-(BOOL)isShakeEnabled;
-(void)PlayNodeAtId:(unsigned long)anId;
-(id)GetMessagesWrapArray;
-(BOOL)canAutoplayWhenMessageDownloaded;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data withImageInfo:(id)imageInfo;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data;
-(id)FormImageMsg:(id)msg withImage:(id)image;
-(id)FormTextMsg:(id)msg withText:(id)text;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)SetReadWithMessageWrap:(id)messageWrap;
-(void)OnDelMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnUpdateVideoStatus:(id)status MsgWrap:(id)wrap;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DidAddMsg:(id);
-(void)AddEmoticonMsg:(id)msg MsgWrap:(id)wrap;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(void)Reset;
-(id)init;
-(id)initWithLocalID:(unsigned long)localID CreateTime:(unsigned long)time ContentViewDisshowStatus:(int)status;
-(id)getNavigationController;
-(id)getViewController;
-(id)getMsgContentViewController;
-(unsigned long)GetFirstLocalID;
-(unsigned long)GetLastLocalID;
-(void)initViewController;
-(void)initProperties;
-(void)initPropertiesWithLocalID:(unsigned long)localID CreateTime:(unsigned long)time;
-(void)resetController;
-(void)initControllers;
-(void)OnMyselfCloseMode:(id)mode;
-(void)OnRoomMemberChange:(id)change withNewMemberList:(id)newMemberList;
-(BOOL)isNeedCached;
-(void)RestoreStatusAndRegisterFromCacheStatus;
-(void)ClearStatusAndUnRegisterForCacheStatus;
-(void)cancelNodeViewPerformSelectors;
@end

@interface QQMsgContentLogicController : BaseMsgContentLogicController <IQQSessionExt, UIAlertViewDelegate> {
	BOOL m_bNeedAddEmptyMsg;
}
-(BOOL)isShakeEnabled;
-(void)dealloc;
-(id)GetTitleImage;
-(id)init;
-(BOOL)CanSendMultiImage;
-(BOOL)CanSendOriginalImage;
-(id)initWithNeedAddEmptyMsg;
-(void)ViewDidAppear;
-(void)UnRegister;
-(void)Register;
-(void)onPopFromNavigationController;
-(void)QQSessionChanged:(id)changed;
-(void)QQNeedReload;
-(void)SaveContentAndState;
-(void)VoiceModeClicked;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)sendInvite;
-(BOOL)CanSelectMyFavoritesItemForSendingMsg;
-(BOOL)CanSend3rdMsg;
-(BOOL)CanSendVoipMsg;
-(BOOL)CanSendLocationMsg;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendVoiceMsg;
-(BOOL)CanSendImageMsg:(id)msg;
-(BOOL)CanSendTextMsg:(id)msg;
-(void)OpenContactInfo:(id)info;
-(void)OpenDetailInfo;
-(void)SendEmojiArtMessage:(id)message;
-(void)SendEmoticonMessage:(id)message;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data withImageInfo:(id)imageInfo;
-(id)FormImageMsg:(id)msg withImage:(id)image;
-(id)FormTextMsg:(id)msg withText:(id)text;
-(BOOL)isQQOpen;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
@end

@interface RoomContentLogicController : BaseMsgContentLogicController <chatRoomInfoDelegate, chatRoomSettingDelegate, IGroupMgrExt, IContactMgrExt, ShareFriendOnChatDelegate, RoomContactSelectDelegate, IAutoSetRemarkExt, TipsViewDelegate> {
	BOOL m_bStartShowRoomContactSelector;
	ChatRoomInfoSettingMgr* m_ChatRoomInfoSettingMgr;
	BOOL m_bTipsShow;
	TipsView* m_chatRoomTipView;
}
-(void)customCellContentForMsg:(id)msg;
-(BOOL)isNeedCached;
-(void)OnChangeNotifyStatus:(id)status withStatus:(BOOL)status2;
-(void)OnChangeMemberVerifyStatus:(id)status;
-(void)OnChangeMemberShowDisplayName:(id)name;
-(void)OnChangeMemberDisplayName:(id)name;
-(void)OnChangeGroup:(id)group;
-(void)updateChatroomContact:(id)contact;
-(void)onSetStrangerRemark:(id)remark;
-(void)didSelectContact:(id)contact;
-(void)onTextChange:(id)change selectedRange:(NSRange)range;
-(BOOL)isLastCharacterAlphaNumeric:(id)numeric;
-(void)showRoomContactSelectorViewController;
-(void)dealloc;
-(void)ViewWillInit;
-(BOOL)existEmptyMemberContact;
-(void)OnUnreadVerifyMsgCountChange:(id)change;
-(void)OnReadPresentMsg:(id)msg;
-(void)OnReceiveChatRoomPresentMsg:(id)msg;
-(void)OnReceiveChatRoomVerifyMsg:(id)msg;
-(BOOL)CanRemoteRecord;
-(void)onModifyContact:(id)contact;
-(void)newMessageFromChatRoomInfo:(id)chatRoomInfo;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onPerformAction:(id)action;
-(id)nameForHeadImageLongPressed:(id)headImageLongPressed;
-(void)onPopFromNavigationController;
-(void)WillBePushedLogicController;
-(void)ViewDidInit;
-(void)ViewDidAppear;
-(void)ClearStatusAndUnRegisterForCacheStatus;
-(void)removeChatRoomTip;
-(void)showChatRoomTip;
-(BOOL)shouldPreventViewcontrollerAutorotate;
-(id)GetTitleTailImage;
-(id)GetUsrTitle;
-(id)GetUsrTitleOld;
-(void)OpenGroupSetting;
-(id)getDefaultChatRoomName;
-(void)OpenDetailInfo;
-(void)OpenContactInfo:(id)info;
-(BOOL)canShowChatRoomInfo;
-(id)GetRightBarButtonTitle;
-(id)GetRightBarButtonImage;
-(id)GetRightBarBtn;
-(void)QuitGroup;
-(void)onGroupSetting:(id)setting;
-(void)switchEarpieceMode;
-(void)StateChanged;
-(BOOL)EnabledOfHeaderButtonAtIndex:(unsigned long)index;
-(id)HighlightedImageOfHeaderButtonAtIndex:(unsigned long)index;
-(id)ImageOfHeaderButtonAtIndex:(unsigned long)index;
-(id)TitleOfHeaderButtonsAtIndex:(unsigned long)index;
-(unsigned long)NumberOfHeaderButtons;
-(void)CustomToolViewEX:(id)ex;
-(BOOL)CanSelectMyFavoritesItemForSendingMsg;
-(BOOL)CanSendVoipMsg;
-(BOOL)CanLongPressHeadImage;
-(BOOL)CanSend3rdMsg;
-(BOOL)CanSendLocationMsg;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendVoiceMsg;
-(BOOL)CanSendImageMsg:(id)msg;
-(BOOL)CanSendTextMsg:(id)msg;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data withImageInfo:(id)imageInfo;
-(id)FormImageMsg:(id)msg withImage:(id)image;
-(id)FormTextMsg:(id)msg withText:(id)text;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)clearAllMsg;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)getGroupContact;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(id)init;
@end

@interface SXMsgContentLogicController : BaseMsgContentLogicController <ISXSessionExt, UIAlertViewDelegate> {
	NSMutableArray* m_arrBlogContactInfoVC;
}
-(BOOL)isShakeEnabled;
-(void)dealloc;
-(id)init;
-(BOOL)CanSendMultiImage;
-(BOOL)CanSendOriginalImage;
-(void)ViewDidAppear;
-(void)UnRegister;
-(void)Register;
-(void)onPopFromNavigationController;
-(void)SXSessionChanged:(id)changed;
-(void)SXNeedReload;
-(void)OpenDetailInfo;
-(void)OpenContactInfo:(id)info;
-(void)VoiceModeClicked;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)showInviteSentAlert;
-(void)sendInvite;
-(id)GetTitleImage;
-(id)ImageOfHeaderButtonAtIndex:(unsigned long)index;
-(id)TitleOfHeaderButtonsAtIndex:(unsigned long)index;
-(unsigned long)NumberOfHeaderButtons;
-(void)SendEmojiArtMessage:(id)message;
-(void)SendEmoticonMessage:(id)message;
-(BOOL)CanSelectMyFavoritesItemForSendingMsg;
-(BOOL)CanSend3rdMsg;
-(BOOL)CanSendVoipMsg;
-(BOOL)CanSendLocationMsg;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendVoiceMsg;
-(BOOL)CanSendImageMsg:(id)msg;
-(BOOL)CanSendTextMsg:(id)msg;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data withImageInfo:(id)imageInfo;
-(id)FormImageMsg:(id)msg withImage:(id)image;
-(id)FormTextMsg:(id)msg withText:(id)text;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
@end

@interface WeixinContentLogicController : BaseMsgContentLogicController <addContactToChatRoomDelegate, TipsViewDelegate> {
}
-(BOOL)isNeedCached;
-(BOOL)isShakeEnabled;
-(id)GetRightBarBtn;
-(void)ShowNewMail;
-(void)dealloc;
-(void)checkAddFriend;
-(BOOL)isInMyContactList;
-(void)ViewWillAppear;
-(void)onPerformAction:(id)action;
-(id)GetChatContact;
-(void)OnChangeNotifyStatus:(id)status withStatus:(BOOL)status2;
-(void)newMessageFromAddContactToChatRoom:(id)chatRoom;
-(void)deleteAllMsg;
-(id)GetTitleTailImage;
-(void)OpenDetailInfo;
-(BOOL)isOpenSingleInfo;
-(void)OpenContactInfo:(id)info;
-(id)GetRightBarButtonTitle;
-(void)switchEarpieceMode;
-(void)StateChanged;
-(BOOL)EnabledOfHeaderButtonAtIndex:(unsigned long)index;
-(id)HighlightedImageOfHeaderButtonAtIndex:(unsigned long)index;
-(id)ImageOfHeaderButtonAtIndex:(unsigned long)index;
-(id)TitleOfHeaderButtonsAtIndex:(unsigned long)index;
-(unsigned long)NumberOfHeaderButtons;
-(void)CustomToolViewEX:(id)ex;
-(BOOL)isToolViewHidden;
-(BOOL)CanSelectMyFavoritesItemForSendingMsg;
-(BOOL)CanRemoteRecord;
-(BOOL)CanSend3rdMsg;
-(BOOL)CanSendLocationMsg;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendVoiceMsg;
-(BOOL)CanSendImageMsg:(id)msg;
-(BOOL)CanSendTextMsg:(id)msg;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data withImageInfo:(id)imageInfo;
-(id)FormImageMsg:(id)msg withImage:(id)image;
-(id)FormTextMsg:(id)msg withText:(id)text;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)clearAllMsg;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
@end

@interface BaseMsgContentViewController : MMUIViewController <MsgSearchHelperDelegate, UITableViewDelegate, UITableViewDataSource, tableViewDelegate, TypingControllerDelgate, messageNodeViewDelegate, contactInfoDelegate, UIActionSheetDelegate, UIAlertViewDelegate, MsgDelegate, IMsgExt, UINavigationControllerDelegate, MMInputToolViewDelegate, ChatBackgroundExt, ShareMessageConfirmLogicHelperDelegate, MMReadMailViewDelegate, IVOIPExt, AppDetailDelegate, UIDocumentInteractionControllerDelegate, TipsViewDelegate, UIAlertViewDelegate, WXTalkTipsViewDelegate, IMsgExt, MMLandscapeInputToolViewDelegate, IVOIPUILogicMgrExt, WXGestureDelegate, MMMultiSelectToolViewDelegate> {
	NSMutableArray* m_arrMessageNodeData;
	unsigned long m_uLastTime;
	unsigned long m_uLastMoreMsgTime;
	BOOL m_bKeyboardShow;
	BOOL m_bToolViewHidden;
	unsigned m_moreMsgIndex;
	BOOL m_bReadtToLoadMoreMsg;
	MMDelegateProxy<BaseMsgContentDelgate>* m_delegate;
	id<BaseMsgContentInBackgroundThreadDelgate> m_backgroundThreadDelegate;
	Class m_delegateClass;
	NSTimer* m_LockerTimer;
	NSTimer* m_updateTimeLabelTimer;
	MMTableView* m_tableView;
	UIActivityIndicatorView* m_activityView;
	UIView* m_headerView;
	UIBarButtonItem* m_leftButtonItem;
	MMInputToolView* _inputToolView;
	MMLandscapeInputToolView* landscapeInputToolView;
	MMAnimationTipView* m_tipView;
	UIView* m_backgroundView;
	NSMutableArray* m_arrDeleteRows;
	UIView* m_deleteContainView;
	UIButton* m_deleteBtn;
	BOOL m_bViewDidAppear;
	WXTalkTipsView* m_tipsView;
	vector<Class *, std::allocator<Class *> > m_messageNodeClass;
	BOOL m_bViewUnloaded;
	CGPoint m_pTableViewOffset;
	int m_keyboardHeight;
	NSString* m_text;
	int m_inputMode;
	int m_positionMode;
	int m_contentMode;
	float m_fKeyboardAnimationDuration;
	MsgSearchHelper* m_oMsgSearchHelper;
	int m_iInitTableViewContentOffset;
	BOOL m_bNeedAdjustTableViewContentOffset;
	unsigned long m_uiSearchResultNodeViewHeight;
	int m_uiInterfaceOrientation;
	MMLoadingView* m_loadingView;
	ShareMessageConfirmLogicHelper* _shareMessageConfirmLogicHelper;
	WXGesture* _gesture;
	MMMultiSelectToolView* _multiSelectView;
	NSMutableArray* m_arrSelectMsgLocalID;
	UIView* m_msgReceivingTipsView;
	unsigned long m_uiSelectSearchMsgID;
	TipsView* m_chatAddFriend;
	BOOL m_bChatAddFriendShow;
	BOOL m_isMsgReceiveTipsJacking;
}
@property(retain, nonatomic) NSTimer* m_updateTimeLabelTimer;
@property(retain, nonatomic) UIView* m_msgReceivingTipsView;
@property(retain, nonatomic) WXGesture* gesture;
@property(retain, nonatomic) NSTimer* m_LockerTimer;
@property(retain, nonatomic) MMLandscapeInputToolView* landscapeInputToolView;
@property(retain, nonatomic) MMInputToolView* toolView;
@property(assign, nonatomic) id<BaseMsgContentInBackgroundThreadDelgate> m_backgroundThreadDelegate;
@property(assign, nonatomic) MMDelegateProxy<BaseMsgContentDelgate>* m_delegate;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)showReceiveMsgTips;
-(void)stopReceiveMsg;
-(void)startReceiveMsg;
-(float)getInvisibleHeight;
-(BOOL)isContactSizeOverScreen;
-(void)endSearchAndDisplay;
-(void)OnMultiDeleteMessage;
-(void)OnMultiBrandMessage;
-(void)OnMultiEmailMessage;
-(void)OnMultiForwardMessage;
-(void)OnMultiFavAddMessage;
-(void)showAlertTooMany;
-(void)onMoreOperateWithMsgId:(id)msgId;
-(void)gestureWillEndTransition:(id)gesture isCanceld:(BOOL)canceld;
-(void)gestureWillBeginTransition:(id)gesture;
-(void)onVideoVoipViewDidAppear:(id)onVideoVoipView;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)rotate:(int)rotate duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)ToolViewStatusCanSupportAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldOtherPreventedAutorotateToInterfaceOrientation;
-(void)onWXTalkTipsViewClick;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OpenWXTalkMode;
-(BOOL)unfoldTalkRoomTips;
-(void)hideTalkRoomTips;
-(void)showTalkRoomTips;
-(BOOL)shouldHideOrginInputToolView;
-(void)updateToolViewAnimationCurve:(int)curve;
-(void)updateToolViewAnimationDuration:(float)duration;
-(float)getCustomizedAreaWidth;
-(void)loadingAfterForwardMessageOK;
-(void)stopLoading;
-(void)showLoadingViewWithText:(id)text;
-(void)showLoadingView;
-(void)updateChatRoomData:(id)data;
-(id)GetCurrentViewController;
-(void)initAllowWxTalk;
-(BOOL)isAllowWxTalk;
-(void)initAllowVoiceInput;
-(BOOL)isAllowVoiceInput;
-(void)initAllowVoip;
-(BOOL)isAllowVoip;
-(void)OnMsgDownloadThumbFail:(id)fail MsgWrap:(id)wrap;
-(void)OnMsgDownloadThumbOK:(id)ok MsgWrap:(id)wrap;
-(void)documentInteractionControllerWillBeginPreview:(id)documentInteractionController;
-(id)documentInteractionControllerViewControllerForPreview:(id)preview;
-(void)OnAppDataPreview:(id)preview MsgWrap:(id)wrap;
-(int)preferredInterfaceOrientationForPresentation;
-(void)PreviewAppNode:(id)node MsgWrap:(id)wrap Pop:(BOOL)pop;
-(void)onTopBarFrameChanged;
-(void)adjustDeleteViewRect;
-(void)hideToolViewAnimated:(BOOL)animated;
-(void)ReloadView;
-(void)Reset;
-(id)init;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidUnload;
-(void)my_viewWillUnload;
-(void)my_viewDidUnload;
-(void)resetToolView;
-(void)viewDidLoad;
-(void)onChatBackgroundChanged:(id)changed;
-(void)OnSendMessageCancel:(id)cancel;
-(void)OnSendMessageFail:(id)fail WithError:(int)error;
-(void)OnSendMessageOK:(id)ok;
-(void)systemActived:(id)actived;
-(void)systemResigned:(id)resigned;
-(void)MenuControllerWillHide:(id)menuController;
-(void)MenuControllerWillShow:(id)menuController;
-(void)stopLabelTimer;
-(void)beginLabelTimer;
-(void)lockerTimesup;
-(void)beginLockerTimer;
-(void)stopLockerTimesup;
-(float)getVisibleHeight;
-(float)getTableViewVisibleHeight;
-(void)willShow;
-(void)didAppear;
-(void)viewWillBePushed:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewDidBePoped:(BOOL)view;
-(void)onViewDisappear;
-(void)willDisshow;
-(void)willAppear;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(id)tagForActivePage;
-(void)viewDidAppear:(BOOL)view;
-(BOOL)shouldInteractivePop;
-(void)willDismissAndShow;
-(void)viewWillAppear:(BOOL)view;
-(void)fixInputToolViewKeyboard;
-(void)setState:(int)state animated:(BOOL)animated needKeyboard:(BOOL)keyboard;
-(void)SetVoiceEnabled:(BOOL)enabled;
-(id)GetContact;
-(void)updateMessageNodeStatus:(id)status;
-(void)onDeleteSomeMessage:(id)message;
-(void)onDeleteMessage:(id)message;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)handleDeleteAllMessage;
-(void)deleteAllMessage;
-(void)handleAfterDeleteAllMessage;
-(void)onEditMessage:(id)message;
-(void)updateDeleteCount;
-(void)updateEditAndClearBtnStatus;
-(void)openRecommandApp:(id)app downloadUrl:(id)url;
-(void)openMyFavoritesListController;
-(void)open3rdAppListController;
-(void)onSelectLocation;
-(void)onVideoVoipInvite;
-(void)onVoipInvite;
-(void)onWXTalk;
-(void)onShareCard;
-(void)SendEmoticonMesssageToolView:(id)view;
-(void)openCameraController;
-(void)openMediaBrowser;
-(void)CancelRecording;
-(void)StopRecording;
-(void)StartRecording;
-(void)TextDidChanged:(id)text selectedRange:(NSRange)range;
-(void)ToolViewPositionDidChanged:(BOOL)toolViewPosition animated:(BOOL)animated;
-(void)adjustTableViewRect;
-(void)updateTableContentSizeAnimated:(BOOL)animated init:(BOOL)init;
-(void)animationDidStop:(id)animation;
-(void)updateTableViewHeight;
-(void)updateTableViewHeightAnimated:(BOOL)animated;
-(void)SendEmojiArtMessageToolView:(id)view;
-(void)SendTextMessageToolView:(id)view;
-(id)getCurrentChatName;
-(void)sendCaptruedImage:(id)image;
-(void)pasteImage:(id)image;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)didFinishedLoading:(id)loading;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSections;
-(void)makeCell:(id)cell row:(unsigned)row;
-(void)initView;
-(void)initGestureRecognizer;
-(void)onSwipeGestureRecognizer:(id)recognizer;
-(void)adjustTableViewOffset;
-(void)reloadBackgroundView;
-(void)initSearchBar;
-(void)resetMsgSearchHelper;
-(void)initMsgSearchHelper:(int)helper;
-(float)getSearchBarHeight;
-(void)initNavigationView;
-(id)getLeftBarButton;
-(id)getRightBarButton;
-(void)OnFinished;
-(void)initMultiSelectToolView;
-(void)initToolView;
-(void)initToolEmoticonView;
-(void)changeRect:(BOOL)rect animated:(BOOL)animated init:(BOOL)init;
-(void)initDeleteView;
-(void)initTableView;
-(void)reloadTableHeaderView:(BOOL)view;
-(void)startVoiceAnimatingAtNodeId:(unsigned long)nodeId;
-(void)initTableHeaderView;
-(void)updateOpBtnState:(BOOL)state;
-(void)MoreMsgBtnUpdate:(unsigned long)update unReadCount:(unsigned long)count;
-(void)initData;
-(void)initControllers;
-(void)onLoadDownMoreMessage:(id)message;
-(void)onLoadMoreMessage:(id)message;
-(void)initHistroyMessageNodeData;
-(void)removeLastTimeNode;
-(void)addMessageNode:(id)node layout:(BOOL)layout addMoreMsg:(BOOL)msg;
-(void)addTimeNode:(id)node layout:(BOOL)layout addMoreMsg:(BOOL)msg;
-(void)preCreateMessageContentNode:(id)node;
-(id)getMessageChatContactByMessageWrap:(id)wrap;
-(id)newMessageNodeViewForMessageWrap:(id)messageWrap contact:(id)contact chatContact:(id)contact3;
-(BOOL)isShowHeadImage:(id)image;
-(void)updateMessageNodeViewForOrientation:(id)orientation;
-(void)updateTimeNodeViewForOrientation:(id)orientation;
-(void)preCreateMessageTimeNode:(id)node;
-(void)contactInfoReturn;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)switchEarMode;
-(void)onCommentOnMessageWrap:(id)wrap;
-(void)jumpToShakeView:(unsigned long)shakeView;
-(void)jumpToUserProfile:(id)userProfile Displayname:(id)displayname Scence:(unsigned long)scence;
-(void)onMassSendSendAgain:(id)again;
-(void)onForwardMessageOK;
-(void)onNodeViewChanged;
-(void)addEmoticonOK;
-(void)tagLink:(id)link;
-(void)deleteMail:(id)mail;
-(void)longPressOnHeadImageForDebug:(id)debug;
-(void)longPressOnHeadImage:(id)image;
-(void)deleteNode:(id)node;
-(void)StartDownloadVideo:(id)video;
-(void)StartUploadVideo:(id)video;
-(void)StopDownloadVideo:(id)video;
-(void)StopUploadVideo:(id)video;
-(void)showAddOKTips;
-(id)GetMessageNodeDataArray;
-(id)GetMessagesWrapArray;
-(void)ShowVolumeTips;
-(void)ShowEarTips;
-(void)ShowEarBackTips;
-(void)StopPlayingNodeView:(unsigned long)view;
-(void)StartPlayingNodeView:(unsigned long)view;
-(void)EndPlaying:(id)playing;
-(void)BeginPlaying:(id)playing FromTouch:(BOOL)touch;
-(void)setAddFriendTipShow:(BOOL)show;
-(void)showAddFriendTip:(BOOL)tip;
-(float)getAddFriendTipHeight;
-(void)onPerformAction:(id)action;
-(void)showEarModeTips;
-(void)headerImageClicked:(id)clicked;
-(void)PlayVideo:(id)video;
-(void)tapText_NodeView:(id)view;
-(void)tapAppNodeView:(id)view;
-(id)genAppMessage:(id)message;
-(void)tapFriendCard_NodeView:(id)view WithContact:(id)contact;
-(void)tapPushContact_NodeView:(id)view;
-(void)tapPushMail_NodeView:(id)view withPushMailWrap:(id)pushMailWrap;
-(void)tapReader_NodeView:(id)view;
-(void)tapImage_NodeView:(id)view;
-(void)tapLocation_NodeView:(id)view;
-(void)tapWeiboIMG_NodeView:(id)view;
-(void)tapVideoStatus_NodeView:(id)view;
-(void)tapStatus_NodeView:(id)view;
-(id)getViewController;
-(void)updateTypingTitle:(id)title;
-(id)chatContactForMessageWrap:(id)messageWrap;
-(void)unHighLightSelectSearchCell;
-(void)highLightSelectSearchCell;
-(void)didSelectSearchResultForMessageWrap:(id)messageWrap;
-(id)QueryMsgText:(id)text FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count;
-(void)msgSearchBarDoSearch;
-(void)msgSearchBarCancel;
-(id)getParentTableView;
-(id)getParentView;
-(void)deleteNode:(id)node withDB:(BOOL)db animated:(BOOL)animated;
-(void)setTableViewContentOffset:(id)offset;
-(void)openChatInfo:(id)info;
-(void)onUpdateTimeLabelTimer:(id)timer;
-(void)addReceiveMessageNode:(id)node;
-(void)sendMessageWithMsgWrap:(id)msgWrap;
-(void)updateMessageNodeImageLoadingPercent:(unsigned long)percent percent:(unsigned long)percent2;
-(void)tryScrollToBottomAnimated:(BOOL)bottomAnimated;
-(void)ScrollToBottomAnimated:(BOOL)bottomAnimated;
-(void)ScrollToBottomAnimatedAndLoadMoreNode;
-(BOOL)isScrollOK;
-(id)getNavigationButton:(id)button;
-(void)updateTitleView:(id)view;
-(void)locateTableViewWithLocalID:(unsigned long)localID;
-(unsigned)getMsgContentSizeHeight:(unsigned long)height;
-(unsigned)getCurContentSizeHeight;
-(unsigned)getLastNodePreContentSizeHeight;
-(unsigned)getRowHeight:(id)height;
-(id)findNodeDataByLocalId:(unsigned long)anId;
-(void)updateTableViewRowWithLocalID:(unsigned long)localID;
-(void)removeObjectsFromMessageNodeDatas:(id)messageNodeDatas;
-(void)removeAllObjectsFromMessageNodeDatas;
-(unsigned long)findNodeIndexByLocalId:(unsigned long)anId;
-(id)findNodeDataByView:(id)view;
-(unsigned)getMsgNodeCount;
-(void)initMessageNodeClass;
@end

@interface TipsView : UIView {
	id<TipsViewDelegate> _delegate;
	id _oUsrData;
	id _usrData;
}
@property(retain, nonatomic) id usrData;
@property(assign, nonatomic) id<TipsViewDelegate> delegate;
+(id)showChatAddFriendTipWithDelegate:(id)delegate;
+(void)showWebviewDangerousTips:(id)tips;
+(id)showTalkRoomTips:(id)tips withDelegate:(id)delegate;
+(void)showNearEarTips:(id)tips;
+(void)showAutoSaveTips:(id)tips;
+(void)showLoudModeTips:(id)tips;
+(void)showEarModeTips:(id)tips;
+(void)showVolumeTips:(id)tips;
+(void)showEarBackTips:(id)tips;
+(void)showEarTips:(id)tips;
+(id)showChatRoomStatusTips:(id)tips text:(id)text action:(id)action delegate:(id)delegate;
-(void)setFriendName:(id)name;
-(void)addFriend;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)performAction;
-(void)hideTipsView;
-(void)closeTipsView;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(BOOL)checkTouchPoint:(CGPoint)point IfInView:(id)view;
-(void)showUndismissTipsView:(float)view withAction:(id)action;
-(void)showTipsView:(float)view withAnimationTimes:(id)animationTimes AnimationValues:(id)values;
-(void)showTipsView:(float)view;
-(void)alignTipsTitle;
-(void)setArrow:(BOOL)arrow;
-(void)setTipsTitle:(id)title;
-(void)setTipsButton:(BOOL)button;
-(void)setTipsIconVerticalAlign:(id)align;
-(void)setTipsIcon:(id)icon;
-(void)initViewUndismissType;
-(void)initViewNormalType;
-(void)dealloc;
-(id)initForAddFriend;
-(id)initWithUndismissType;
-(id)init;
@end

@interface PrivateMsgViewController : MMListViewController <ISXSessionExt, contactInfoDelegate, IContactMgrExt, IMsgExt, IMMNewSessionMgrExt> {
	NSTimer* m_updateTimeLabelTimer;
	NSMutableDictionary* m_dicMessageItemView;
}
@property(retain, nonatomic) NSTimer* m_updateTimeLabelTimer;
-(void)newArrListUpDataReloadView;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)dealloc;
-(void)viewWillBePushed:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)didAppear;
-(void)onSessionTotalUnreadCountChange:(unsigned long)change;
-(void)updateLeftBarButtonItem;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)SXNewSessionArriving:(id)arriving;
-(void)SXSessionChanged:(id)changed;
-(void)SXNeedReload;
-(void)updateAllSessions;
-(void)updateSessionByName:(id)name;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)viewDidLoad;
-(void)initData;
-(void)initView;
-(void)onUpdateTimeLabelTimer:(id)timer;
-(void)stopUpdateTimeLabelTimer;
-(void)updateTimeLabel;
-(void)deleteSession:(unsigned long)session;
-(void)goToInfoViewController:(id)infoViewController;
-(void)ContactsViewReloadData;
-(void)openFunction;
-(void)updateViewControllerTitle;
@end

@interface PrivateRecentContactView : UIView {
	UILabel* m_displayNameLabel;
	UILabel* m_lastMessageLabel;
	UILabel* m_timeLabel;
	UILabel* m_labelCount;
	UIImageView* m_unreadCountView;
	MMHeadImageView* m_contactHeadImage;
	UIImageView* m_statusImageView;
	SXSessionInfo* m_sessionInfo;
}
@property(retain, nonatomic) SXSessionInfo* m_sessionInfo;
@property(retain, nonatomic) UIImageView* m_unreadCountView;
@property(retain, nonatomic) UILabel* m_timeLabel;
@property(retain, nonatomic) UILabel* m_lastMessageLabel;
@property(retain, nonatomic) MMHeadImageView* m_contactHeadImage;
@property(retain, nonatomic) UILabel* m_displayNameLabel;
-(void)dealloc;
-(void)initView;
-(void)initUnreadCountView;
-(void)updateUnreadCountView;
-(void)updateHeadImage;
-(void)updateTimeLabel;
-(void)initTimeLabel;
-(void)initLastMessageLabel;
-(void)updateLastMessageLabel;
-(void)initDisplayNameLabel;
-(void)updateDisplayNameLabel;
-(void)initImage;
-(void)hideLabels:(BOOL)labels;
@end

@interface QQOfflineMsgViewController : MMListViewController <IQQSessionExt, contactInfoDelegate, IMsgExt, IMMNewSessionMgrExt> {
	NSMutableDictionary* m_dicMessageItemView;
	NSTimer* m_updateTimeLabelTimer;
}
@property(retain, nonatomic) NSTimer* m_updateTimeLabelTimer;
-(void)newArrListUpDataReloadView;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)dealloc;
-(void)viewWillBePushed:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)didAppear;
-(void)onSessionTotalUnreadCountChange:(unsigned long)change;
-(void)updateLeftBarButtonItem;
-(void)QQNewSessionArriving:(id)arriving;
-(void)QQSessionChanged:(id)changed;
-(void)QQNeedReload;
-(void)updateAllSessions;
-(void)updateSessionByName:(id)name;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)viewDidLoad;
-(void)initData;
-(void)initView;
-(void)initHeaderView;
-(void)onEditContact:(id)contact;
-(void)OnShowAllQQFriend;
-(void)onUpdateTimeLabelTimer:(id)timer;
-(void)stopUpdateTimeLabelTimer;
-(void)updateTimeLabel;
-(void)deleteSession:(unsigned long)session;
-(void)goToInfoViewController:(id)infoViewController;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)openFunction;
-(void)ContactsViewReloadData;
-(void)updateViewControllerTitle;
@end

@interface MMUIUtil : NSObject {
}
+(BOOL)isFirstUserInThisDevice;
+(void)headImageJumpToProfile:(id)profile withViewController:(id)viewController Scence:(unsigned long)scence;
+(float)getMaxZoomScale:(id)scale;
+(id)generateNormalHeadImage:(id)image;
@end

@interface ContactInfoViewController : MMUIViewController <UIAlertViewDelegate, PBMessageObserverDelegate, ContactInfoAssistDelegate, IContactMgrExt, VerifyPhoneDelegate, MMSayHelloViewControllerDelegate, ICertInfoMgrExt, SessionSelectControllerDelegate, WCFacadeExt, IStrangerContactMgrExt, IAutoSetRemarkExt, IUpdateProfileMgrExt> {
	unsigned long m_uiVerify;
	CContact* m_contact;
	CContact* m_chatContact;
	MMDelegateProxy<contactInfoDelegate>* m_delegate;
	MMDelegateProxy<ContactInfoViewControllerDelegate>* m_InfoDelegate;
	CBaseContactInfoAssist* m_oContactInfoAssist;
	CContactVerifyLogic* m_contactVerifyLogic;
	ShareMyFriendLogicController* m_shareMyFriendLogic;
	NSString* m_nsLocation;
	BOOL m_bPopToRootWhenDelete;
	unsigned long m_uiFromScene;
	int m_wcOperateMode;
	Class m_popToViewControllerClassWhenDelete;
}
@property(retain, nonatomic) Class m_popToViewControllerClassWhenDelete;
@property(assign, nonatomic) unsigned long m_uiFromScene;
@property(assign, nonatomic) BOOL m_bPopToRootWhenDelete;
@property(retain, nonatomic) NSString* m_nsLocation;
@property(retain, nonatomic) ShareMyFriendLogicController* shareMyFriendLogic;
@property(assign, nonatomic) unsigned long m_uiVerify;
@property(assign, nonatomic) MMDelegateProxy<ContactInfoViewControllerDelegate>* m_InfoDelegate;
@property(assign, nonatomic) MMDelegateProxy<contactInfoDelegate>* m_delegate;
@property(retain, nonatomic) CContact* m_chatContact;
@property(retain, nonatomic) CContact* m_contact;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onExpose;
-(void)onExposeByRecommand;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)confirmExpose:(unsigned long)expose;
-(void)onSayHelloViewSendSayHello:(id)hello;
-(void)onSayHello;
-(void)onFinishedShareMyFriend:(BOOL)aFriend;
-(id)getMyFriendContact;
-(id)getShareMyFriendParentViewController;
-(void)bindPhoneReturn;
-(void)bindFacebookReturn;
-(void)onDeleteContact:(id)contact;
-(void)delAllMsg;
-(void)onVerifyOKWithContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)onStrangerContactUpdated:(id)updated;
-(void)OnUpdateCertInfo;
-(void)copyContactField:(id)field toContact:(id)contact;
-(void)onProfileChange;
-(void)onSetStrangerRemark:(id)remark;
-(void)dealloc;
-(void)onWCGroupModMemberReturn:(BOOL)aReturn group:(id)group;
-(id)getContactVerifyLogic;
-(void)onExposeFriend;
-(void)onSetWCPermissions;
-(void)onRemoveContact;
-(void)goToBindQQ;
-(void)onPushViewController:(id)controller;
-(void)onPresentViewController:(id)controller;
-(void)onPopToRootViewController:(BOOL)rootViewController;
-(void)onPopViewController:(BOOL)controller;
-(void)showFolderConfigPage;
-(void)onTalk:(id)talk;
-(BOOL)onFilterSendReceiver:(id)receiver;
-(void)onShareMyFriend;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)onEditRemarkName;
-(id)getViewController;
-(void)stopLoadingWithFailText:(id)failText;
-(void)stopLoadingWithOKText:(id)oktext;
-(void)startLoadingWithText:(id)text;
-(void)showAlbumList;
-(void)onNewMessage:(id)message;
-(void)jumpToContentViewController:(id)contentViewController;
-(void)doReset;
-(void)canNotFollowContact:(id)contact;
-(void)contactVerifyOk:(id)ok;
-(void)onFriendRequestSend;
-(BOOL)isWeiboContact;
-(BOOL)isQQContact;
-(void)viewDidLoad;
-(void)updateContactFromServer;
-(void)reloadContactAssist;
-(id)tagForActivePage;
-(void)viewWillAppear:(BOOL)view;
-(void)reloadView;
-(void)reloadFloatView;
-(void)reloadData;
-(void)initSystemPluginData:(int)data;
-(BOOL)isInMyContactList;
-(id)initWithTitle:(id)title;
-(id)init;
-(unsigned long)GetFromScene;
-(BOOL)isNeedVerify;
-(BOOL)isFromBlackList;
-(BOOL)isFromFriendAssist;
-(BOOL)isFromChatroomVerify;
-(BOOL)isFromWCProfile;
-(BOOL)isNeedHideUserName;
-(BOOL)isMyQQEmailInfo;
-(void)handleSelectedPrivateContactListCell;
-(void)ContactsViewReloadData;
-(void)handleSelectedBindPhoneCell;
@end

@interface QQContactInfoViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, IQQContactMgrExt> {
	MMTableView* m_tableView;
	CQQContact* m_contact;
	MMHeadImageView* m_headView;
	MMHDHeadImageView* m_HDHeadView;
	UILabel* m_userNameLabel;
	UILabel* m_nickNameLabel;
	BOOL m_bFinishLoading;
}
@property(retain, nonatomic) CQQContact* m_contact;
-(void)dealloc;
-(void)onModifyQQContact:(id)contact;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeLoadingCell:(id)cell;
-(void)stopActivityIndicatorView;
-(void)makeQQInfoCell:(id)cell atRow:(unsigned)row;
-(void)makeQQSignCell:(id)cell;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidLoad;
-(void)initData;
-(void)initView;
-(void)initHeaderView;
-(void)initHDHeadImage;
-(void)initUserNameLabel;
-(void)initNickNameLabel;
-(void)updateNickNameLabel;
-(void)initHeadImage;
-(void)updateHeadImage;
@end

@interface SettingModifySignViewController : MMUIViewController <UITextViewDelegate> {
	UITextView* m_textView;
	NSString* m_nsLastSign;
	MMDelegateProxy<settingModifySignDelegate>* m_delegate;
	UILabel* m_wordCountLabel;
}
@property(assign, nonatomic) MMDelegateProxy<settingModifySignDelegate>* m_delegate;
@property(retain, nonatomic) NSString* m_nsLastSign;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initTextView;
-(void)viewWillDisappear:(BOOL)view;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)SaveNick;
-(void)textViewDidChange:(id)textView;
-(void)updateWordCount:(int)count;
@end

@interface SettingMyAccountExtInfoViewController : SettingBaseViewController <settingModifySignDelegate, MMPickerViewDelegate, MMRegionPickerViewControllerDelegate, settingMyAccountExtInfoLogicDelegate, CSettingExt> {
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapAccountCellToCellType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapSessionType;
	id<settingMyAccountExtInfoDelegate> m_delegate;
	unsigned long m_curPickerMode;
	SettingMyAccountExtInfoLogic* m_infoLogic;
}
@property(assign, nonatomic) id<settingMyAccountExtInfoDelegate> m_delegate;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)onSettingChanged:(int)changed;
-(void)onInfoChange;
-(void)dealloc;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)showModifySignView;
-(void)showModifyAddressView;
-(void)showModifySexView;
-(void)MMPickerViewDidChooseRowTitle:(id)mmpickerView atSessionTitle:(id)sessionTitle;
-(void)MMRegionPickerDidChoosRegion:(id)mmregionPicker;
-(void)saveNewSign:(id)sign;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)makeAccountCell:(id)cell row:(unsigned)row;
-(void)makeAddressCell:(id)cell;
-(void)makeSexCell:(id)cell;
-(void)makeCellInfoInternal:(id)internal col:(id)col value:(id)value mustFill:(BOOL)fill;
-(id)makeMustFillLabel;
-(void)makeSignCell:(id)cell;
-(void)viewDidLoad;
-(void)ChangeSex:(id)sex;
-(void)SaveAndExit;
-(void)Save;
-(void)returnBack;
-(void)initCellType;
-(void)initSessionType;
@end

@interface NewChatRoomMemberItemView : MMUIView {
	UILabel* m_labelDisplayName;
	UIButton* m_addMemberBtn;
	UIButton* m_deleteMemberBtn;
	UIButton* m_showMoreBtn;
	CContact* m_contact;
	CContact* m_groupContact;
	MMDelegateProxy<NewChatRoomMemberItemViewDelegate>* m_delegate;
	SEL m_updateItemViewForDeleteSel;
	SEL initSubViewSel;
	BOOL m_bDeleteStatus;
	unsigned long m_uiIndex;
	UIColor* m_textColor;
	UIColor* m_shadowColor;
}
@property(assign, nonatomic) unsigned long m_uiIndex;
@property(retain, nonatomic) CContact* m_groupContact;
@property(retain, nonatomic) CContact* m_contact;
@property(assign, nonatomic) MMDelegateProxy<NewChatRoomMemberItemViewDelegate>* m_delegate;
-(void)dealloc;
-(id)initWithContact:(id)contact atIndex:(unsigned long)index;
-(void)willMoveToSuperview:(id)superview;
-(id)initWithMoreBtnAtIndex:(unsigned long)index;
-(id)initWithDeleteMemberBtnAtIndex:(unsigned long)index;
-(id)initWithAddMemberBtnAtIndex:(unsigned long)index;
-(id)initAtIndex:(unsigned long)index;
-(void)handleLongPressEx:(id)ex;
-(void)initSubView;
-(void)showTalkFlag;
-(void)initAdminIcon;
-(void)setTextColor:(id)color shadowColor:(id)color2;
-(void)initContactItemSubview;
-(void)initMoreItemSubview;
-(void)initDeleteItemSubview;
-(void)initAddItemSubview;
-(void)updateItemViewForDelete:(BOOL)aDelete;
-(void)updateContactItemViewForDelete;
-(void)updateDeleteItemViewForDelete;
-(void)updateAddItemViewForDelete;
-(void)updateContact;
-(void)OnClickDeleteBtn;
-(void)OnClickHeadImage;
@end

@interface FeedBackViewController : MMUIViewController <UITextViewDelegate, PBMessageObserverDelegate, UIAlertViewDelegate> {
	UITextView* m_textView;
	UILabel* m_labKF;
	UIButton* m_btnPhone;
	UIImageView* m_textBG;
	float m_fTextBGDefaultHeight;
	float m_fTextViewDefaultHeight;
	float m_fLabelKFDefaultY;
	float m_fBtnPhoneDefaultY;
	BOOL m_bPush;
}
@property(assign, nonatomic) BOOL m_bPush;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)keyboardWillShow:(id)keyboard;
-(void)dealloc;
-(void)viewDidLoad;
-(void)OnPhone;
-(void)initTextView;
-(void)initRightBtn;
-(void)initLeftBtn;
-(void)OnReturn;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)onSendFeedBack:(id)back;
-(void)doSendFeedBack;
-(void)startLoading;
@end

@interface MMNetworkLogViewController : MMUIViewController <MFMailComposeViewControllerDelegate, crashReportConnectionDelegate, UIAlertViewDelegate> {
	MMCrashReportConnection* m_oUpload;
}
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onUploadCrashCompleted:(BOOL)completed CrashWrap:(id)wrap;
-(void)OnUpload;
-(id)genDataLength:(unsigned long)length;
-(void)InternalUpload;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)OnSendMail;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface PushNoDisturbViewController : SettingBaseViewController {
	unsigned long m_uSelectedRow;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCloseCell:(id)cell;
-(void)makeOpenAtNightCell:(id)nightCell;
-(void)makeOpenCell:(id)cell;
-(void)doConfigNoDisturb:(unsigned long)disturb;
-(void)sendNoDisturbOplog;
-(void)saveLocalSetting:(unsigned long)setting;
-(void)dealloc;
-(void)viewDidLoad;
-(unsigned long)getSelectedRow;
@end

@interface SettingAboutMMViewController : MMUIViewController <whatsnewViewDelegateEx, UIViewControllerTransitioningDelegate, CrossfadeAnimationDelegate> {
	MMTableViewInfo* m_tableViewInfo;
	UILabel* m_labelProduct;
	BOOL m_bFullVersion;
	MMUIViewController* m_whatsNewViewController;
	CrossfadeAnimationController* m_transitionInstance;
}
-(void)dealloc;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
-(void)showWhatsNewWillEnd;
-(void)showWhatsNewEnd;
-(void)ShowWhatsNew;
-(void)onLaw;
-(void)onAboutVersion;
-(void)showFeedbackView;
-(void)showSystemNotice;
-(void)viewDidLoad;
-(id)getHeaderView;
-(void)updateProduct;
-(void)initData;
@end

@interface SettingNotificationViewController : SettingBaseViewController {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makePushNoDisturbCell:(id)cell row:(unsigned)row;
-(void)makePushDetailCell:(id)cell row:(unsigned)row;
-(void)makeNotificationRemindCell:(id)cell row:(unsigned)row;
-(void)makeWCNotificationCell:(id)cell row:(unsigned)row;
-(void)makeNotificationCell:(id)cell row:(unsigned)row;
-(void)makeSwitchCell:(id)cell colName:(id)name action:(SEL)action on:(BOOL)on;
-(void)openPushNoDisturbView;
-(void)pushDetailSwitchChanged:(id)changed;
-(void)doSetPrivateConfig:(unsigned long)config on:(BOOL)on bitset:(unsigned long)bitset;
-(void)vibrationSwitchChanged:(id)changed;
-(void)wcNotificationSwitchChanged:(id)changed;
-(void)soundSwitchChanged:(id)changed;
-(void)viewDidLoad;
@end

@interface MMMultiMenuItem : NSObject {
	int _editingStyle;
	UIColor* _backgroundColor;
	NSString* _nsTitle;
}
@property(retain, nonatomic) NSString* nsTitle;
@property(retain, nonatomic) UIColor* backgroundColor;
@property(assign, nonatomic) int editingStyle;
-(void)dealloc;
@end

@interface MMMultiMenuTableViewCell : MMTableViewCell {
	UIView* _menuContentView;
	UIView* _actualContentView;
	UIGestureRecognizer* _panGestureRecognizer;
	float _initialTouchPositionX;
	BOOL _shouldDisplayContextMenuView;
	BOOL _contextMenuHidden;
	BOOL _shouldDisplayRightSwipeTips;
	UIImageView* _copyedBackgroundView;
	BOOL m_bIsNeedUpdateMenu;
	BOOL _contextMenuEnabled;
	NSIndexPath* _indexPath;
	NSMutableArray* _arrMenuItems;
}
@property(assign, nonatomic) BOOL contextMenuEnabled;
@property(retain, nonatomic) NSMutableArray* arrMenuItems;
@property(retain, nonatomic) NSIndexPath* indexPath;
-(void)dealloc;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)handlePan:(id)pan;
-(float)getCurrentWidth;
-(void)showRightSwipeTips;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(id)animation;
-(void)resetActionContentView;
-(void)setMenuOptionsViewHidden:(BOOL)hidden animated:(BOOL)animated completionHandler:(id)handler;
-(void)onClearBackgroundView;
-(id)contentView;
-(void)hideMenuOptionsAnimated:(BOOL)animated;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(void)onButtonClicked:(id)clicked;
-(void)updateMenuView;
-(id)FindTableView:(id)view;
-(void)checkAndAddDeleteItem;
-(BOOL)isMenuHidden;
-(BOOL)isPointInMenu:(CGPoint)menu;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface SettingPluginsViewController : SettingBaseViewController <contactInfoDelegate, UIActionSheetDelegate> {
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapCellToCellType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_uninstallMapCellToCellType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapSectionType;
	NSMutableArray* m_nameArray;
	NSMutableArray* m_uninstallNameArray;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)dealloc;
-(void)viewDidLoad;
-(void)pluginsChanged:(id)changed;
-(void)initData;
-(void)initOnePlugin:(int)plugin;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)openContactInfoView:(int)view;
-(void)ContactsViewReloadData;
-(void)newMessageFromContactInfo:(id)contactInfo;
@end

@interface SettingPrivateConfigViewController : MMUIViewController {
	NSMutableDictionary* m_changesOnExitMap;
	BOOL m_applySettingNow;
	MMTableViewInfo* m_tableViewInfo;
	WCOpLog* m_wcOpLog;
	BOOL m_strangerRightOpen;
	BOOL m_contactVerifySwitchOpen;
	BOOL m_recommendQQOpen;
	BOOL m_bAllowFindByQQOpen;
	BOOL m_allowFindMeByPhoneSwitchOpen;
	BOOL m_recommendPhoneOpen;
	BOOL m_allowFindMeByContactConfigSwitchOpen;
	BOOL m_recommendGoogleOpen;
	BOOL m_allowFindMeByGoogleSwitchOpen;
	BOOL m_autoAddFriendPhoneShow;
	BOOL m_autoAddFriendPhoneOpen;
}
-(void)showWCBlackListView;
-(void)showWCOutsiderView;
-(void)editWCGroup:(id)group;
-(void)allowStrangerWC:(id)wc;
-(void)allowFindMeByContactConfigSwitchChanged:(id)changed;
-(void)allowFindMeByGoogleSwitchChanged:(id)changed;
-(void)allowFindMeByPhoneSwitchChanged:(id)changed;
-(void)contactVerifySwitchChanged:(id)changed;
-(void)allowQQFriendFindMeSwitchChanged:(id)changed;
-(void)recommendQQChanged:(id)changed;
-(void)recommendGoogleChanged:(id)changed;
-(void)autoAddFriendPhoneChanged:(id)changed;
-(void)recommendPhoneChanged:(id)changed;
-(void)doSetPrivateConfig:(unsigned long)config on:(BOOL)on bitset:(unsigned long)bitset;
-(void)applyUnSavedChanges;
-(BOOL)setChangeOnExitForSelector:(SEL)selector withControl:(id)control;
-(void)dealloc;
-(void)viewDidLoad;
-(void)reloadTableData;
-(void)showBlackListView;
-(id)init;
-(id)getHeaderView:(id)view;
@end

@interface SettingBaseViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	NSString* m_nsTitle;
}
@property(retain, nonatomic) NSString* m_nsTitle;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidLoad;
-(id)initWithTitle:(id)title;
-(void)touchesCancelled_TableView:(id)view withEvent:(id)event;
-(void)touchesEnded_TableView:(id)view withEvent:(id)event;
-(void)touchesMoved_TableView:(id)view withEvent:(id)event;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
@end

@interface MMThemeSettingCellView : UITableViewCell {
}
-(void)dealloc;
-(id)initWithEventHandler:(id)eventHandler andReuserableId:(id)anId;
@end

@interface MMThemeSettingItemView : UIControl {
	int m_themeIndex;
	UIView* m_downMaskView;
	UIImageView* m_themeIcon;
	UIImageView* m_downIndicatorView;
	UIButton* m_downBtn;
	UIButton* m_cancelBtn;
	UIButton* m_cancelingLabel;
	UIImageView* m_maskImage;
	UILabel* m_downProgressLabel;
	UIActivityIndicatorView* m_downloadFlower;
	UILabel* m_headerLabel;
	NSIndexPath* m_indexPath;
}
@property(retain, nonatomic) NSIndexPath* m_indexPath;
@property(retain, nonatomic) UIActivityIndicatorView* downloadFlower;
@property(retain, nonatomic) UILabel* downProgressLabel;
@property(retain, nonatomic) UILabel* headerLabel;
@property(retain, nonatomic) UIImageView* maskImage;
@property(retain, nonatomic) UIButton* cancelingLabel;
@property(retain, nonatomic) UIButton* cancelBtn;
@property(retain, nonatomic) UIButton* downBtn;
@property(retain, nonatomic) UIImageView* downIndicatorView;
@property(retain, nonatomic) UIImageView* themeIcon;
@property(retain, nonatomic) UIView* downMaskView;
@property(assign, nonatomic) int themeIndex;
-(void)dealloc;
-(void)onSetSelected:(BOOL)selected;
-(void)updateThemeSettingCellWithTheme:(id)theme andIndexPath:(int)path;
-(id)initWithEventHandler:(id)eventHandler andReuserableId:(id)anId;
@end

@interface MMThemeSettingLogicController : MMObject {
	MMDelegateProxy<MMThemeSettingLogicControllerDelegate>* m_delegate;
	NSMutableArray* m_mixedThemeList;
	BOOL m_isLoadServerThemeList;
}
@property(retain, nonatomic) NSMutableArray* mixedThemeList;
@property(assign, nonatomic, getter=isLoadServerThemeList) BOOL isLoadServerThemeList;
-(void)onCloseThemeSetting;
-(BOOL)changeTheme:(int)theme;
-(BOOL)stopDownloadTheme:(int)theme;
-(BOOL)startDownloadTheme:(int)theme;
-(id)getThemeByIndex:(int)index;
-(int)getThemeListCount;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(BOOL)isLocalCacheForServerThemeListExist;
-(void)notifyUIUpdateForThemeListChange;
-(void)updateMixedThemeList;
-(void)updateMixedThemeListWith:(id)with;
-(void)addThemeOpLogWithKey:(int)key andValue:(id)value;
-(id)getThemeByTid:(id)tid;
-(void)replaceMixedThemeListAtIndexes:(id)indexes withMixedThemeList:(id)mixedThemeList;
-(void)replaceObjectInMixedThemeListAtIndex:(unsigned)index withObject:(id)object;
-(void)removeMixedThemeListAtIndexes:(id)indexes;
-(void)removeObjectFromMixedThemeListAtIndex:(unsigned)index;
-(void)insertMixedThemeList:(id)list atIndexes:(id)indexes;
-(void)insertObject:(id)object inMixedThemeListAtIndex:(unsigned)index;
-(id)themeAtIndex:(unsigned)index;
-(void)getMixedThemeList:(id*)list range:(NSRange)range;
-(unsigned)countOfMixedThemeList;
-(void)removeFromMixedThemeList:(id)mixedThemeList;
-(void)addToMixedThemeList:(id)mixedThemeList;
@end

@interface CAppViewControllerManager : MMObject <UITabBarControllerDelegate, MMThemeManagerExt, MMKernelExt, IMsgExt, IVoiceReminderExt, WCFacadeExt, UIAlertViewDelegate, UITabBarControllerDelegate> {
	UIWindow* m_window;
	NSMutableArray* m_arrViewController;
	NSMutableArray* m_arrTabBarBaseViewController;
	unsigned long m_uCurrentTabViewIndex;
	CMMVector* m_vecViewController;
	BOOL m_bFromReg;
	BOOL m_isChangingTheme;
	BOOL m_isInBackground;
	SvrErrorTipWindow* m_svrErrorTipWindow;
	PreEnterWechatLogic* m_PreEnterWechatLogic;
	MMTabBarViewController* m_mainFrameTabBarController;
}
@property(readonly, assign, nonatomic) BOOL m_isInBackground;
@property(retain, nonatomic) MMTabBarViewController* m_mainFrameTabBarController;
+(id)getCurrentNavigationController;
+(id)getMainFrameTabBarController;
+(id)getAppViewControllerManager;
-(id)getPreEnterWechatLogic;
-(id)getTabBarController;
-(void)onDataChangedWithAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(void)onNotifyRemindMsg:(id)msg;
-(void)OnShowPush:(id)push;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)UIWindowDidResignKeyNotification:(id)uiwindow;
-(void)UIWindowDidBecomeKeyNotification:(id)uiwindow;
-(void)UIWindowDidBecomeHiddenNotification:(id)uiwindow;
-(void)UIWindowDidBecomeVisibleNotification:(id)uiwindow;
-(void)enterBackground;
-(void)enterForeground;
-(void)onPreQuit;
-(void)jumpToChat:(id)chat msgToLocate:(unsigned long)locate;
-(void)JumpToViewController:(id)viewController;
-(void)HandleFindFriendJump:(id)jump;
-(void)HandleMainFrameJump:(id)jump;
-(void)fixOnStatusBarClick;
-(id)getMainWindow;
-(void)changeLanguage;
-(void)refreshLanguage:(int)language;
-(void)refreshLanguage:(int)language withChildScene:(id)childScene;
-(void)jumpToShake;
-(void)jumpToCameraScan:(int)cameraScan;
-(void)jumpToURLShardBy3rdApp:(id)urlshardBy3rdApp;
-(void)searchFriend:(id)aFriend;
-(BOOL)isChangingTheme;
-(void)onThemeChanged;
-(unsigned long)getCurTabBarIndex;
-(id)getTopViewController;
-(void)removeViewController:(id)controller;
-(void)addViewController:(id)controller;
-(void)removeViewFromRootViewController:(id)rootViewController;
-(void)addViewControllerToRootView:(id)rootView;
-(void)removeViewFromRootView:(id)rootView;
-(void)addViewToRootView:(id)rootView;
-(BOOL)isInStatusBarShowViewController;
-(unsigned long)getTotalUnReadCount;
-(void)closeMainFrame;
-(void)openMainFrame:(BOOL)frame showStyle:(id)style;
-(void)openFirstView;
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willBeginCustomizingViewControllers:(id)controllers;
-(void)OnMainFrameDoubleClicked:(id)clicked;
-(void)OnMainFrameClicked:(id)clicked;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)setAllTabBarItemEnabled:(BOOL)enabled;
-(void)newMessageByContact:(id)contact msgWrapToAdd:(id)add;
-(void)newMessageByContact:(id)contact msgWrapToAdd:(id)add animated:(BOOL)animated;
-(void)newMessageByContact:(id)contact msgWrapToAdd:(id)add showMainView:(BOOL)view;
-(void)newMessageByContact:(id)contact msgWrapToAdd:(id)add showMainView:(BOOL)view animated:(BOOL)animated;
-(void)moveToTab:(int)tab showMainView:(BOOL)view;
-(void)moveToRootViewController;
-(void)handleSelectedTabWithHandleMainFrameSelect:(BOOL)handleMainFrameSelect;
-(void)dealloc;
-(void)tryShowWhatsNew;
-(void)createMainFrameWithShowStyle:(id)showStyle;
-(id)getTabBarButtons;
-(void)resetBarItems;
-(void)resetDefaultImage;
-(void)replaceTwoFile:(id)file desFile:(id)file2;
-(void)createMoreViewController;
-(void)createFindFriendViewController;
-(void)createContactsViewController;
-(void)createNewMainFrameViewController;
-(id)getTabBarBaseViewController:(unsigned long)controller;
-(id)getNewMainFrameViewController;
-(void)forceRedrawNavigationBars;
-(id)initWithWindow:(id)window;
@end

@interface FloatBottleContentLogicController : BaseMsgContentLogicController <BottleMsgViewControllerDelegate> {
	CBottle* m_bottle;
	MMDelegateProxy<FloatBottleContentLogicDelegate>* m_bottleLogicDelegate;
	BOOL m_bFromOpenBottle;
}
@property(assign, nonatomic) MMDelegateProxy<FloatBottleContentLogicDelegate>* m_bottleLogicDelegate;
@property(retain, nonatomic) CBottle* m_bottle;
-(BOOL)isShakeEnabled;
-(id)initWithBottle:(id)bottle andContact:(id)contact andFromOpenBottle:(BOOL)openBottle;
-(void)initViewController;
-(BOOL)needShowReturnAlert;
-(void)setBottleUnread;
-(void)dealloc;
-(void)onPopFromNavigationController;
-(id)GetUsrTitle;
-(id)GetTitleTailImage;
-(void)OpenDetailInfo;
-(BOOL)isOpenSingleInfo;
-(void)OpenContactInfo:(id)info;
-(id)GetRightBarButtonTitle;
-(id)GetRightBarButtonImage;
-(void)switchEarpieceMode;
-(void)StateChanged;
-(BOOL)EnabledOfHeaderButtonAtIndex:(unsigned long)index;
-(void)onThrowBack:(id)back;
-(id)HighlightedImageOfHeaderButtonAtIndex:(unsigned long)index;
-(id)ImageOfHeaderButtonAtIndex:(unsigned long)index;
-(id)TitleOfHeaderButtonsAtIndex:(unsigned long)index;
-(unsigned long)NumberOfHeaderButtons;
-(void)CustomToolViewEX:(id)ex;
-(BOOL)CanSelectMyFavoritesItemForSendingMsg;
-(BOOL)CanRemoteRecord;
-(BOOL)CanSend3rdMsg;
-(BOOL)CanSendVoipMsg;
-(BOOL)CanSendLocationMsg;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendVoiceMsg;
-(BOOL)CanSendImageMsg:(id)msg;
-(BOOL)CanSendTextMsg:(id)msg;
-(void)SendEmoticonMessage:(id)message;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data withImageInfo:(id)imageInfo;
-(id)FormImageMsg:(id)msg withImage:(id)image;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(id)FormTextMsg:(id)msg withText:(id)text;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
@end

@interface LocalSearch : NSObject {
}
+(id)searchFromGoogleContacts:(id)googleContacts allContact:(id)contact;
+(id)searchFromContacts:(id)contacts allContact:(id)contact;
+(id)searchFromContacts:(id)contacts allContact:(id)contact CheckList:(id)list;
+(BOOL)isMatchChatRoom:(id)room usrName:(id)name MemberCount:(unsigned*)count CheckList:(id)list;
+(BOOL)isMatchChatRoomWithMySelf:(id)mySelf usrName:(id)name MemberCount:(unsigned*)count CheckList:(id)list;
+(BOOL)isMatchObject:(id)object object:(id)object2;
@end

@interface KVCommReport : NSObject {
	int m_logId;
	long m_startTime;
	long m_endTime;
	NSMutableDictionary* m_setDic;
	NSMutableDictionary* m_addDic;
	/*function-pointer*/ void* m_handler;
	id<KVDataDelegate> m_observer;
}
@property(retain, nonatomic) id<KVDataDelegate> m_observer;
-(int)getLogId;
-(id)getArrayElementForKey:(id)key andIndex:(unsigned)index;
-(unsigned)getArrayElementCountForKey:(id)key;
-(void)addArrayElementValue:(id)value forKey:(id)key;
-(id)getElementForkey:(id)forkey;
-(void)setElementValue:(id)value forKey:(id)key;
-(void)end;
-(void)start;
-(void)dealloc;
-(id)initWithLogId:(int)logId andHandler:(/*function-pointer*/ void*)handler;
@end

@interface MMTabBarViewController : MMUIViewController {
	NSMutableArray* m_arrButtons;
	int selectedIndex;
	NSArray* m_arrViewControllers;
	MMDelegateProxy<UITabBarControllerDelegate>* delegate;
	UIImageView* m_tabbar;
	BOOL m_bHideTabbar;
	UIView* _currentView;
	UIView* m_baseView;
	BOOL forbiddenBringToFrontWhenShow;
}
@property(assign, nonatomic) BOOL forbiddenBringToFrontWhenShow;
@property(retain, nonatomic) UIView* baseView;
@property(retain, nonatomic) UIImageView* tabbar;
@property(retain, nonatomic) UIView* currentView;
@property(assign, nonatomic) MMDelegateProxy<UITabBarControllerDelegate>* delegate;
@property(retain, nonatomic) NSArray* viewControllers;
@property(retain, nonatomic) NSMutableArray* buttons;
-(int)preferredInterfaceOrientationForPresentation;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
-(void)dealloc;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(id)currentViewController;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)updateTabBarAccessibilityDescrible:(int)describle badgeValue:(int)value selected:(BOOL)selected;
-(void)setTabBarBadgeImage:(id)image forIndex:(int)index;
-(void)setTabBarBadgeString:(id)string forIndex:(int)index;
-(void)setTabBarBadgeValue:(int)value forIndex:(int)index;
-(void)viewDidLoad;
-(void)setBackgroundImage:(id)image;
-(void)onButtonClicked:(id)clicked;
-(int)selectedIndex;
-(void)setSelectedIndex:(unsigned)index;
-(void)addTabbar;
-(void)removeTabbar;
-(void)FullyShowTabbar;
-(void)FullyHideTabbar;
-(void)showTabBar;
-(void)hideTabBar;
-(void)setButtonsEnabled:(BOOL)enabled;
-(void)updateButtons;
-(void)updatGlowImageViewAnimated:(BOOL)animated;
-(void)setAllTabBarItemEnabled:(BOOL)enabled;
-(void)initGlowView;
-(void)onTopBarFrameChanged;
-(void)addRootViewController:(id)controller;
-(id)init;
@end

@interface MMTabBarButton : UIButton {
	NSString* _nsNormalTitle;
	NSString* _nsSelectedTitle;
	UIImage* _oNormalBackgroundImage;
	UIImage* _oSelectedBackgroundImage;
	UIImage* _oNormalImage;
	UIImage* _oSelectedImage;
	UIColor* _oNormalShadowColor;
	UIColor* _oSelectedShadowColor;
	UIColor* _oNormalTitleColor;
	UIColor* _oSelectedTitleColor;
}
@property(retain, nonatomic) UIColor* oSelectedTitleColor;
@property(retain, nonatomic) UIColor* oNormalShadowColor;
@property(retain, nonatomic) UIColor* oSelectedShadowColor;
@property(retain, nonatomic) UIColor* oNormalTitleColor;
@property(retain, nonatomic) UIImage* oSelectedImage;
@property(retain, nonatomic) UIImage* oNormalImage;
@property(retain, nonatomic) UIImage* oSelectedBackgroundImage;
@property(retain, nonatomic) UIImage* oNormalBackgroundImage;
@property(retain, nonatomic) NSString* nsSelectedTitle;
@property(retain, nonatomic) NSString* nsNormalTitle;
-(void)dealloc;
-(void)setTitleColor:(id)color forState:(unsigned)state;
-(void)setTitle:(id)title forState:(unsigned)state;
-(void)setBackgroundImage:(id)image forState:(unsigned)state;
-(void)setImage:(id)image forState:(unsigned)state;
-(void)setSelected:(BOOL)selected;
@end

@interface MMBarButton : UIButton {
	int iContentWidth;
	int iContentHight;
	int iOriginWidth;
	int iOriginHeight;
	int eBarButtonStyle;
}
@property(assign, nonatomic) int eBarButtonStyle;
@property(assign, nonatomic) int iOriginHeight;
@property(assign, nonatomic) int iOriginWidth;
@property(assign, nonatomic) int iContentHight;
@property(assign, nonatomic) int iContentWidth;
-(CGRect)backgroundRectForBounds:(CGRect)bounds;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

@interface MMBarButtonItem : UIBarButtonItem {
	CGRect m_standardPortraitFrame;
	MMBarButton* m_btn;
	int m_standardContentWidth;
	int m_standardContentHeight;
	UIEdgeInsets m_standardPortraitEdgeInsets;
	int m_iContentWidth;
	int m_iContentHeight;
	CGRect m_standardPortriatFrame;
}
@property(assign, nonatomic) int m_iContentHeight;
@property(assign, nonatomic) int m_iContentWidth;
@property(assign, nonatomic) UIEdgeInsets m_standardPortraitEdgeInsets;
@property(assign, nonatomic) CGRect m_standardPortriatFrame;
@property(assign, nonatomic) MMBarButton* m_btn;
-(id).cxx_construct;
-(void)setFitInterfaceOrientation:(int)orientation;
-(void)setEnabled:(BOOL)enabled;
@end

@interface MMUICommonUtil : NSObject {
}
+(id)getDefaultBackBarButtonWithTitle:(id)title target:(id)target action:(SEL)action;
+(id)getBackBarButtonWithProssibleTitle:(id)prossibleTitle target:(id)target action:(SEL)action;
+(id)getBackBarButtonWithTitle:(id)title target:(id)target action:(SEL)action;
+(id)getBackBarButtonWithImage:(id)image highlightedImage:(id)image2 target:(id)target action:(SEL)action;
+(id)getBackBarButtonWithImage:(id)image target:(id)target action:(SEL)action;
+(id)getBarButtonWithTitle:(id)title target:(id)target action:(SEL)action style:(int)style;
+(id)getBarButtonWithTitle:(id)title target:(id)target action:(SEL)action style:(int)style maxWidth:(float)width;
+(id)getBarButtonWithImage:(id)image highlightedImage:(id)image2 target:(id)target action:(SEL)action style:(int)style;
+(id)getBarButtonWithImage:(id)image target:(id)target action:(SEL)action style:(int)style;
+(id)getBarButtonWithTitle:(id)title withBackGroundImage:(id)backGroundImage withBackGroundImageHL:(id)backGroundImageHL target:(id)target action:(SEL)action style:(int)style maxWidth:(float)width;
+(id)getBarButtonWithTitle:(id)title withBackGroundImage:(id)backGroundImage withBackGroundImageHL:(id)backGroundImageHL target:(id)target action:(SEL)action style:(int)style;
+(id)getBarButtonWithImage:(id)image withHighlightedImage:(id)highlightedImage withBackGroundImage:(id)backGroundImage withBackGroundImageHL:(id)backGroundImageHL target:(id)target action:(SEL)action style:(int)style;
@end

@interface NavStackObj : NSObject {
	int _operationType;
	UIViewController* _stackView;
	BOOL _bAnimated;
}
@property(assign, nonatomic) BOOL bAnimated;
@property(retain, nonatomic) UIViewController* stackView;
@property(assign, nonatomic) int operationType;
-(void)dealloc;
@end

@interface MMInputToolView : MMUIView <UITextViewDelegate, ISysCallCheckExt, UIActionSheetDelegate, MMGrowTextViewDelegate, MMTransparentButtonDelegate, SelectAttachmentViewControllerDelegate, VoiceInputViewDelegate, EmoticonBoardViewDelegate, BaseEmoticonViewDelegate, IRecordPermissionCheckExt> {
	UIButton* _inputModeChangeButton;
	UIImageView* _toolView;
	VoiceInputView* _voiceInputView;
	SelectAttachmentView* _attachmentView;
	UIView* _expressionView;
	MMGrowTextView* _textView;
	UIButton* _attachmentButton;
	UIButton* _expressionDoneButton;
	UIView* _recordingTipsView;
	MMTransparentButton* _recordButton;
	UIButton* _expressionButton;
	RecordView* _recordView;
	UIButton* _sendCaptrueView;
	int _keyboardHeight;
	int _inputMode;
	int _positionMode;
	int _contentMode;
	MMDelegateProxy<MMInputToolViewDelegate>* _delegate;
	SelectAttachmentViewController* m_selectAttachmentViewController;
	float _fKeyboardAnimationDuration;
	int _iKeyboardAnimationCurve;
	int iMuteCount;
	int _recordStatus;
	MMDelegateProxy<MMInputToolViewCustomizationDelegate>* _uiDelegate;
	NSURL* _nsLastCaptrueAssetURL;
	ALAssetsLibrary* _oLibrary;
	UIImage* _oCapturedImage;
	BOOL m_bPositioning;
	UIButton* _disBandView;
	SEL mRecordSelector;
}
@property(assign, nonatomic) SEL mRecordSelector;
@property(assign, nonatomic) MMDelegateProxy<MMInputToolViewCustomizationDelegate>* _uiDelegate;
@property(assign, nonatomic) BOOL m_bPositioning;
@property(retain, nonatomic) RecordView* recordView;
@property(assign, nonatomic) int iKeyboardAnimationCurve;
@property(assign, nonatomic) float fKeyboardAnimationDuration;
@property(assign, nonatomic) int contentMode;
@property(assign, nonatomic) int positionMode;
@property(assign, nonatomic) int inputMode;
@property(assign, nonatomic) NSString* text;
@property(assign, nonatomic) MMDelegateProxy<MMInputToolViewDelegate>* delegate;
@property(assign, nonatomic) int keyboardHeight;
@property(retain, nonatomic) MMTransparentButton* recordButton;
@property(retain, nonatomic) UIView* recordingTipsView;
@property(retain, nonatomic) UIButton* expressionDoneButton;
@property(retain, nonatomic) UIButton* expressionButton;
@property(retain, nonatomic) UIButton* attachmentButton;
@property(retain, nonatomic) MMGrowTextView* textView;
@property(retain, nonatomic) UIView* expressionView;
@property(retain, nonatomic) UIImageView* toolView;
@property(retain, nonatomic) UIButton* inputModeChangeButton;
-(void)dealloc;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)CheckVoiceBtnState;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)expressionClicked:(unsigned long)clicked;
-(void)InputIsAvailableChanged:(BOOL)changed;
-(void)MMTransparentButton_touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)MMTransparentButton_touchesEnded:(id)ended withEvent:(id)event;
-(void)setVoiceEnabled:(BOOL)enabled;
-(void)resetRecordView;
-(void)MMTransparentButton_touchesMoved:(id)moved withEvent:(id)event;
-(void)MMTransparentButton_touchesBegan:(id)began withEvent:(id)event;
-(BOOL)isPointInRecordGarbageView:(CGPoint)recordGarbageView;
-(BOOL)isPointInRecordButton:(CGPoint)recordButton;
-(void)SetPeakPower:(float)power;
-(void)insertString:(id)string;
-(void)HideRecordTips;
-(void)ShowTooShortTips;
-(void)ShowTooLongTips;
-(void)ShowRecording;
-(void)ShowPreparing;
-(void)showRecord:(id)record;
-(void)showCancel:(id)cancel;
-(void)cancelRecording;
-(void)stopRecording:(id)recording;
-(void)resalStartRecording;
-(void)startRecording:(id)recording;
-(void)setContentMode:(int)mode animated:(BOOL)animated;
-(void)NotifyViewControllerPostionChanged:(BOOL)changed Animated:(BOOL)animated;
-(void)setPoisitionMode:(int)mode animated:(BOOL)animated;
-(void)onPositionAnimationEnd;
-(void)setInputMode:(int)mode animated:(BOOL)animated;
-(void)on3rdRecommandButtonClicked:(id)clicked;
-(void)onMyFavoritesButtonClicked:(id)clicked;
-(void)onToolsButtonClicked:(id)clicked;
-(void)onCameraControllerClicked:(id)clicked;
-(void)onMediaBrowserClicked:(id)clicked;
-(void)wxTalkBtnRealClicked;
-(void)onWXTalkButtonClicked:(id)clicked;
-(void)onShareCardButtonClicked:(id)clicked;
-(void)onLocationButtonClicked:(id)clicked;
-(void)videoVoipBtnRealClicked;
-(void)onVideoVoipButtonClicked:(id)clicked;
-(void)asyncStartNetDetect;
-(void)didSelectAttachmentAtIndex:(unsigned long)index;
-(void)voiceInputBtnRealClicked;
-(void)onVoiceInputButtonClicked:(id)clicked;
-(void)voiceVoipBtnRealClicked;
-(void)onVoiceVoipButtonClicked:(id)clicked;
-(void)onExpressionButtonClicked:(id)clicked;
-(void)onSendCaptrueButtonClicked:(id)clicked;
-(void)onAttachmentModeChangeButtonClicked:(id)clicked;
-(void)tryShowCaptrueButton;
-(void)onInputModeChangeButtonClicked:(id)clicked;
-(void)hideToolView:(BOOL)view;
-(void)Reset;
-(id)initWithUIDelegate:(id)uidelegate;
-(id)init;
-(void)initSubView;
-(void)setKeyboardAnimationCurve:(int)curve;
-(void)setKeyboardAnimationDuration:(float)duration;
-(void)MMGrowTextView:(id)view pasteImage:(id)image;
-(BOOL)MMGrowTextView:(id)view shouldPasteImage:(id)image;
-(void)keyboardWillHide:(float)keyboard;
-(void)keyboardWillShow:(float)keyboard;
-(void)UpdateTabBarSendButtonState;
-(void)TextDidChanged:(id)text selectedRange:(NSRange)range;
-(void)TextViewDidEnter:(id)textView;
-(void)TextViewHeightDidChanged:(id)textViewHeight;
-(BOOL)TextViewDidDelete;
-(void)deleteEmoticon;
-(id)GetCurrentViewController;
-(void)didSelectorSelfDefinedEmotcion:(id)emotcion;
-(void)didSelectorEmoticon:(id)emoticon;
-(void)OnEmoticonStateDidChanged:(BOOL)onEmoticonState;
-(void)onSendButtonClicked;
-(void)updateRecordButtonDisabled;
-(void)updateToolViewHeight;
-(void)SetButtonHighlighted:(BOOL)highlighted;
-(void)showSendCaptrueViewAnimated:(BOOL)animated;
-(void)hideSendCaptrueView;
-(void)hideSendCaptrueViewAnimated:(BOOL)animated;
-(void)initVoiceInputView;
-(void)OnVoiceInputSendBtnClicked;
-(void)OnVoiceInputKeyboardBtnClicked;
-(void)OnClearText;
-(void)OnTextRecoged:(id)recoged;
-(id)GetCurrentText;
-(void)initAttachmentView;
-(void)updateAttachmentView;
-(void)setIsAllowWxTalk:(BOOL)talk;
-(void)setIsAllowVoiceInput:(BOOL)input;
-(void)setIsAllowVoip:(BOOL)voip VoiceVoip:(BOOL)voip2;
-(void)initEmoticonView;
-(void)initToolView;
-(void)OnRecordDenied;
-(void)OnRecordPermissioned;
-(void)toRecordStautsTooShortTips;
-(void)toRecordStautsTooLongTips;
-(void)toRecordStautsRecordCancelTips;
-(void)toRecordStautsRecording;
-(void)toRecordStautsPerparing;
-(void)toRecordStautsIdle;
@end

@interface WhatsnewSubViewWrap : NSObject {
	bool isFullScreen;
	UIView* view;
}
@property(assign, nonatomic) bool isFullScreen;
@property(retain, nonatomic) UIView* view;
-(void)dealloc;
@end

@interface WhatsnewLogicController : NSObject {
}
-(id)loadWhatsnewSubViews:(id)views;
-(id)parseOnePage:(XmlReaderNode_t*)page;
-(id)parseOneView:(XmlReaderNode_t*)view;
-(id)parseOneImage:(XmlReaderNode_t*)image;
-(id)parseSizeFitToTextImage:(XmlReaderNode_t*)textImage path:(id)path;
-(id)getNormalImage:(id)image;
-(id)parseHead:(XmlReaderNode_t*)head;
-(id)parseOneText:(XmlReaderNode_t*)text;
-(id)parseColor:(id)color;
-(unsigned long)decodeAttributeToInteger:(XmlReaderNode_t*)integer key:(const char*)key;
-(id)decodeAttributeToString:(XmlReaderNode_t*)string key:(const char*)key;
@end

@interface CControlUtil : NSObject {
}
+(bool)pointInRect:(CGRect)rect point:(CGPoint)point error:(float)error;
+(void)showActionSheet:(id)sheet inView:(id)view;
+(CGRect)autoFitRectForLableAllowMultipleLines:(id)lableAllowMultipleLines;
+(CGRect)autoFitRectForLable:(id)lable;
+(CGSize)labelSizeOfLabel:(id)label maxWidth:(int)width;
+(CGSize)labelSizeOfLabel:(id)label;
+(float)labelWordBreakHeight:(id)height maxWidth:(int)width font:(id)font;
+(float)labelWordBreakWidth:(id)width maxWidth:(int)width2 font:(id)font;
+(float)labelHeight:(id)height maxWidth:(int)width font:(id)font;
+(float)labelHeight:(id)height;
+(float)labelWidth:(id)width maxWidth:(int)width2 font:(id)font;
+(float)labelLineHeight:(id)height;
+(unsigned)labelNumberOfLines:(id)lines maxWidth:(int)width font:(id)font;
+(void)makeLabelShadow:(id)shadow;
+(void)showReceiveMemoryWarningAlert;
+(id)showAlertEx:(id)ex message:(id)message delegate:(id)delegate confirmButtonTitle:(id)title cancelButtonTitle:(id)title5;
+(id)showAlertEx:(id)ex message:(id)message delegate:(id)delegate cancelButtonTitle:(id)title otherButtonTitle:(id)title5;
+(id)showAlert:(id)alert message:(id)message delegate:(id)delegate cancelButtonTitle:(id)title;
@end

@interface QQRecentContactView : UIView {
	UILabel* m_displayNameLabel;
	UILabel* m_lastMessageLabel;
	UILabel* m_timeLabel;
	UILabel* m_labelCount;
	UIImageView* m_unreadCountView;
	UIImageView* m_statusImageView;
	MMHeadImageView* m_contactHeadImage;
	QQSessionInfo* m_sessionInfo;
}
@property(retain, nonatomic) QQSessionInfo* m_sessionInfo;
@property(retain, nonatomic) UIImageView* m_unreadCountView;
@property(retain, nonatomic) UILabel* m_timeLabel;
@property(retain, nonatomic) UILabel* m_lastMessageLabel;
@property(retain, nonatomic) MMHeadImageView* m_contactHeadImage;
@property(retain, nonatomic) UILabel* m_displayNameLabel;
-(void)dealloc;
-(void)initView;
-(void)initUnreadCountView;
-(void)updateUnreadCountView;
-(void)updateHeadImage;
-(void)updateTimeLabel;
-(void)initTimeLabel;
-(void)initLastMessageLabel;
-(void)updateLastMessageLabel;
-(void)initDisplayNameLabel;
-(void)updateDisplayNameLabel;
-(void)initImage;
-(void)hideLabels:(BOOL)labels;
@end

@interface BottleCryptHelper : NSObject {
}
+(id)BottleUsrNameDeCrypt:(id)crypt;
+(id)BottleUsrNameEnCrypt:(id)crypt;
@end

@interface MMCrashReportHandler : MMObject <crashReportConnectionDelegate> {
	MMCrashReportViewController* m_viewController;
	MMCrashReportConnection* m_crashReportConnection;
	CrashReportInfo* m_oCrashReportInfo;
}
@property(retain, nonatomic) CrashReportInfo* m_oCrashReportInfo;
+(id)shareCrashReportHandler;
+(void)initialize;
-(BOOL)isNeedCrashReportOnJaiBreak;
-(void)setLastCrashLogTime;
-(double)getLastCrashLogTime;
-(BOOL)doCrashReportOnJaiBreak;
-(BOOL)reportCrashLogFile;
-(void)onUploadCrashCompleted:(BOOL)completed CrashWrap:(id)wrap;
-(BOOL)isReachable;
-(BOOL)doCrashReport:(int)report;
-(void)prepareCrashReportOnRun;
-(BOOL)isNeedCrashReport;
-(void)enableCrashReportHandler;
-(void)removeCrashView;
-(void)initCrashView;
-(id)getCrashReportData;
-(void)ClearCrashData;
-(void)disableExceptionHandle;
-(BOOL)tryCrashReportAfterRun;
-(void)cancelReportCrashReportOnRun;
-(void)reportCrashReportOnRun;
-(BOOL)tryCrashReportOnRun;
-(void)SaveCrashReportInfo;
-(void)LoadCrashReportInfo;
-(id)GetCrashReportInfoPath;
-(void)dealloc;
-(id)init;
@end

@interface MMCrashReportViewController : MMUIViewController {
}
-(void)dealloc;
-(void)viewDidLoad;
-(void)onReportCrash:(id)crash;
-(void)onCancelReportCrash:(id)crash;
-(void)startLoadingBlocked;
@end

@interface WCBaseTextFieldWithTipItem : WCBaseTextFieldItem {
	UIButton* m_tipBtn;
	MMUIViewController* m_viewController;
	NSString* m_nsTipTitle;
	NSString* m_nsTipContent;
}
-(void)setTipContent:(id)content Title:(id)title;
-(void)setTipBtnShowed:(BOOL)showed;
-(void)setViewController:(id)controller;
-(void)addTipBtnTarget:(id)target sel:(SEL)sel;
-(void)showPhoneTip;
-(void)initView:(CGRect)view;
-(void)dealloc;
@end

@interface MMRedHeadLiner : MMUIView {
	UILabel* m_label;
}
@property(retain, nonatomic) UILabel* m_label;
-(void)displayString:(id)string;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface DonateInfo : NSObject {
	BOOL m_needBindCard;
	NSString* m_donateWebUrl;
}
@property(retain, nonatomic) NSString* donateWebUrl;
@property(assign, nonatomic) BOOL needBindCard;
@end

@interface PersonalDonateInfo : NSObject {
	unsigned long totalCount;
	unsigned long totalAmount;
	NSArray* donateHistory;
}
@property(retain, nonatomic) NSArray* donateHistory;
@property(assign, nonatomic) unsigned long totalAmount;
@property(assign, nonatomic) unsigned long totalCount;
+(void)initialize;
+(void)_initPBTableOfPersonalDonateInfo;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface WCPayPhoneTextItem : WCPayInputTextInfoCtrlItem {
	UIButton* m_tipBtn;
	MMUIViewController* m_viewController;
	NSString* m_nsTipTitle;
	NSString* m_nsTipContent;
}
-(void)setTipContent:(id)content Title:(id)title;
-(void)setTipBtnShowed:(BOOL)showed;
-(void)setViewController:(id)controller;
-(void)addTipBtnTarget:(id)target sel:(SEL)sel;
-(void)showPhoneTip;
-(void)initView:(CGRect)view;
-(void)dealloc;
@end

@interface CAppObserverCenter : NSObject <NotifyFromMainCtrlDelegate> {
	NSMutableDictionary* m_eventObserverDic;
	NSMutableDictionary* m_messageObserverDic;
	NSMutableDictionary* m_pbEventObserverDic;
}
@property(readonly, assign, nonatomic) NSMutableDictionary* m_messageObserverDic;
-(void)NotifyFromMainCtrl:(id)mainCtrl Event:(unsigned long)event;
-(void)NotifyFromMainCtrl:(unsigned long)mainCtrl MessageInfo:(id)info Event:(unsigned long)event;
-(void)removeAllPBEventObserverListItem;
-(void)removePBEventObserverListItemByObject:(id)object;
-(void)removePBEventObserverListItem:(unsigned long)item andValue:(id)value;
-(void)addPBEventObserverListItem:(unsigned long)item andValue:(id)value;
-(void)removeAllMessageObserverListItem;
-(void)removeMessageObserverListItem:(unsigned long)item andValue:(id)value;
-(void)addMessageObserverListItem:(unsigned long)item andValue:(id)value;
-(void)removeAllEventObserverListItem;
-(void)removeEventObserverListItemByObject:(id)object;
-(void)removeEventObserverListItem:(unsigned long)item andValue:(id)value;
-(void)addEventObserverListItem:(unsigned long)item andValue:(id)value;
-(void)dealloc;
-(id)init;
@end

@interface SettingTencentWBViewController : SettingBaseViewController <UIAlertViewDelegate> {
	CUsrInfo* m_usrInfo;
	id<SettingTencentWBDelegate> m_delegate;
}
@property(assign, nonatomic) id<SettingTencentWBDelegate> m_delegate;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeWeiboCell:(id)cell;
-(void)makeCell:(id)cell col:(id)col value:(id)value andTag:(unsigned long)tag;
-(void)beginEdit:(id)edit;
-(void)onTextFieldChanged:(id)changed;
-(void)finishEditing:(id)editing;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(void)makeWeiboPrivateCell:(id)cell;
-(void)onSwitchValueChange:(id)change;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidLoad;
-(void)Save;
-(id)getWeiboUsrName;
-(BOOL)checkWeiboUsrName:(id)name;
@end

@interface MultiSelectController : MMObject <UIAlertViewDelegate, WebMailViewDelegate, MMIconActionSheetDelegate, MMAnimationTipViewDelegate, ForwardMessageLogicDelegate, MFMailComposeViewControllerDelegate> {
	NSString* m_nsChatUserName;
	NSMutableArray* m_arrSelectMsg;
	NSMutableArray* m_arrMsgCanBeOprate;
	NSMutableArray* supportContacts;
	CContact* m_toContact;
	BOOL hasAnyMsgCannotAddToFav;
	BOOL hasAnyMsgDidnotDownload;
	BOOL hasAnyMsgCannotSendtoFriend;
	BOOL hasAnyMsgCannotSendtoBrand;
	BOOL hasAnyMsgCannotSendByMail;
	MMFavAddTipView* m_tipView;
	ForwardMessageLogicController* m_forwardMsgLogic;
	MMDelegateProxy<MultiSelectContollerDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MultiSelectContollerDelegate>* m_delegate;
-(id)changeString2HtmlContent:(id)content;
-(void)fadeShowEnd;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)onSendComplete;
-(void)showSaveResultTip:(id)tip andText:(id)text;
-(void)initMMFavAddTipView;
-(void)actionSheet:(id)sheet didDismissWithItem:(id)item;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)sendMultiMsgBySystemMail:(id)mail WithUserName:(id)userName;
-(void)sendMultiMsgBySystemMailInternal;
-(void)sendMultiMsgByMail:(id)mail WithUserName:(id)userName;
-(void)sendMultiMsgByMailInternal;
-(void)sendMailBySystemMail:(id)mail Content:(id)content Subject:(id)subject;
-(id)mimeOfFile:(id)file;
-(void)sendMailByQQMail:(id)mail Content:(id)content Subject:(id)subject;
-(void)getSubject:(id)subject AndHeader:(id)header;
-(id)getMailNodeList;
-(id)convertMsg2MailContent:(id)content;
-(id)getContactNickName:(id)name;
-(void)CheckMsgForMail;
-(BOOL)canBeSendByMailCorrect:(id)correct;
-(void)sendMultiMsgToBrandContact:(id)brandContact WithUserName:(id)userName;
-(void)showConnectorSheet:(id)sheet;
-(void)sendMsgListToBrandInternal;
-(void)CheckMsgForSendToBrand;
-(BOOL)canBeSendToBrand:(id)brand;
-(BOOL)hasAnySupportContactsByMsgWrap:(id)wrap;
-(void)sendMultiMsgToFriend:(id)aFriend WithUserName:(id)userName;
-(void)sendMultiMsgToFriend;
-(void)endMultiSelect;
-(id)getCurrentViewController;
-(void)CheckMsgForSendToFriend;
-(BOOL)canBeSendToFriend:(id)aFriend;
-(BOOL)didDownloadOK:(id)ok;
-(void)addMultiMsgToMyFav:(id)myFav WithUserName:(id)userName;
-(void)addMsgListToFavInternal;
-(id)convertMsgList2FavItem:(id)item;
-(id)convertMsgList2Content:(id)content;
-(id)convertMsg2Content:(id)content;
-(id)convertMsgToFavItem:(id)favItem;
-(void)CheckMsgForFavAdd;
-(BOOL)canBeAddToFav:(id)fav;
-(void)EndMultiEdit;
-(id)getMultiMsgWithMsgIDList:(id)msgIDList AndUserName:(id)name;
-(void)Reset;
-(void)ResetDataWithMsgIDList:(id)msgIDList AndUserName:(id)name;
-(void)sortMsgList:(id)list;
-(void)dealloc;
-(id)init;
@end

@interface LoginBaseViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	UITextField* m_firstTextField;
	UITextField* m_secondTextField;
	NSString* m_nsTitle;
	NSString* m_nsLeftBarItemTitle;
	NSString* m_nsRightBarItemTitle;
	NSString* m_nsFirstTextFieldTitle;
	NSString* m_nsSecondTextFieldTitle;
	NSString* m_nsFirstTextFieldText;
	NSString* m_nsFirstTextFieldPlaceHolder;
	NSString* m_nsSecondTextFieldPlaceHolder;
	NSString* m_nsSectionHeaderTitle;
	NSString* m_nsSectionFooterTitle;
	NSString* m_nsSectionHeaderTip;
	int m_nFirstCharType;
	int m_nSecondCharType;
	int m_nSectionFooterLine;
	int m_nSectionHeaderTipLine;
	UITextField* m_firstTextField2;
	UITextField* m_secondTextField2;
	NSString* m_nsFirstTextFieldTitle2;
	NSString* m_nsSecondTextFieldTitle2;
	NSString* m_nsFirstTextFieldPlaceHolder2;
	NSString* m_nsSecondTextFieldPlaceHolder2;
	NSString* m_nsSectionHeaderTitle2;
	NSString* m_nsSectionFooterTitle2;
	int m_nFirstCharType2;
	int m_nSecondCharType2;
	int m_nSectionFooterLine2;
	MMLoadingView* m_loadingView;
	NSString* m_nsLoadingText;
	int m_nSectionCount;
	int m_nTableCellCount;
	int m_nTableCellCount2;
	BOOL m_bHasBackBtn;
	int m_eErrorTextFieldIndex;
}
@property(retain, nonatomic) NSString* m_nsLoadingText;
@property(retain, nonatomic) NSString* m_nsSectionFooterTitle2;
@property(retain, nonatomic) NSString* m_nsSectionHeaderTitle2;
@property(retain, nonatomic) NSString* m_nsSecondTextFieldPlaceHolder2;
@property(retain, nonatomic) NSString* m_nsFirstTextFieldPlaceHolder2;
@property(retain, nonatomic) NSString* m_nsSecondTextFieldTitle2;
@property(retain, nonatomic) NSString* m_nsFirstTextFieldTitle2;
@property(retain, nonatomic) NSString* m_nsSectionHeaderTip;
@property(retain, nonatomic) NSString* m_nsSectionFooterTitle;
@property(retain, nonatomic) NSString* m_nsSectionHeaderTitle;
@property(retain, nonatomic) NSString* m_nsSecondTextFieldPlaceHolder;
@property(retain, nonatomic) NSString* m_nsFirstTextFieldPlaceHolder;
@property(retain, nonatomic) NSString* m_nsFirstTextFieldText;
@property(retain, nonatomic) NSString* m_nsSecondTextFieldTitle;
@property(retain, nonatomic) NSString* m_nsFirstTextFieldTitle;
@property(retain, nonatomic) NSString* m_nsRightBarItemTitle;
@property(retain, nonatomic) NSString* m_nsLeftBarItemTitle;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(retain, nonatomic) UITextField* m_secondTextField2;
@property(retain, nonatomic) UITextField* m_firstTextField2;
@property(retain, nonatomic) UITextField* m_secondTextField;
@property(retain, nonatomic) UITextField* m_firstTextField;
-(BOOL)isHeaderViewShownAsSection;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)confirmByAlertView:(id)view;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeSecondCell2:(id)a2;
-(void)makeFirstCell2:(id)a2;
-(void)goToSetPassword:(id)setPassword;
-(void)makeSecondCell:(id)cell;
-(void)makeFirstCell:(id)cell;
-(void)goToEMailAddress:(id)emailAddress;
-(void)goToPassword:(id)password;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)stopLoading;
-(void)startLoading;
-(void)initView;
-(void)onSetTableViewShowRect:(CGRect*)rect;
-(void)initData;
-(void)nextStep:(id)step;
-(void)returnBack:(id)back;
@end

@interface ValidateCodeViewController : WCAccountBaseViewController <MessageObserverDelegate, LoginLogicDelegate, NewDeviceLoginViewControllerDelegate, UIAlertViewDelegate> {
	id<validateCodeDelegate> m_delegate;
	NSString* m_nsVerifyCodeID;
	NSData* m_dtVerifyCodeImg;
	NSString* m_nsUserName;
	NSString* m_nsPwd;
	NSString* m_nsTicket;
	int m_eValidateFromType;
	BOOL m_bNeedReturnPrevPage;
	UIImageView* m_codeImageView;
	UITextField* m_codeTextField;
	UIButton* m_changeImgBtn;
	MMLoadingView* m_loadingView;
	NSString* m_nsImgEncryptKey;
	NSData* m_dtA2Key;
	NSData* m_dtKSid;
	unsigned long m_uiNextAuthType;
	LoginLogic* m_oLoginLogic;
	UITextField* m_textFieldCode;
}
@property(assign, nonatomic) unsigned long m_uiNextAuthType;
@property(retain, nonatomic) NSData* m_dtKSid;
@property(retain, nonatomic) NSData* m_dtA2Key;
@property(retain, nonatomic) NSString* m_nsImgEncryptKey;
@property(assign, nonatomic) int m_eValidateFromType;
@property(assign, nonatomic) id<validateCodeDelegate> m_delegate;
@property(retain, nonatomic) NSData* m_dtVerifyCodeImg;
@property(retain, nonatomic) NSString* m_nsVerifyCodeID;
@property(retain, nonatomic) NSString* m_nsTicket;
@property(retain, nonatomic) NSString* m_nsPwd;
@property(retain, nonatomic) NSString* m_nsUserName;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)AuthReturn:(unsigned long)aReturn MessageInfo:(id)info;
-(void)showVerifyPhone:(id)phone ticket:(id)ticket;
-(void)newDeviceLoginVerifyOK:(id)ok ticket:(id)ticket;
-(void)resetCodeImage:(id)image;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)handleValidateOK:(id)ok;
-(void)dealloc;
-(void)textFieldDidChanged:(id)textField;
-(void)viewDidLoad;
-(void)initNavigationBar;
-(void)initHeaderView;
-(void)changeCodeImg:(id)img;
-(void)nextStep:(id)step;
-(void)returnBack:(id)back;
-(void)doValidate;
-(void)setInputDicInfo:(id)info eventId:(unsigned*)anId getImg:(BOOL)img;
-(void)stopLoading;
-(void)startLoading;
@end

@interface WCAccountFillPhoneFromAuthViewController : WCAccountBaseViewController <CountryCodePickerDelegate, UITextFieldDelegate> {
	UILabel* m_countryNameLabel;
	UIButton* m_btnBind;
	WCBaseTextFieldItem* m_textFieldContryCodeItem;
	WCBaseTextFieldItem* m_textFieldPhoneNumberItem;
	WCBaseKeyboardToolBar* m_keyboardBar;
	CountryCodeWrap* m_curCountryCode;
	CountryCodePickerViewController* m_countryCodePicker;
	PhoneNumberFormatLogic* m_phoneNumFormatter;
	BOOL m_bAgreementMobileCanBeFound;
	NSString* m_nsHeaderWording;
	MMDelegateProxy<WCAccountFillPhoneFromAuthViewControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) BOOL m_bAgreementMobileCanBeFound;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemBeginEdit:(id)edit;
-(void)fillCountryCode:(id)code phoneNum:(id)num;
-(void)CountryCodePickerDidPickCountryCode:(id)countryCodePicker;
-(void)refreshViewWithData:(id)data;
-(void)findCountryCode;
-(void)showCountryCodePickerView;
-(void)makeCountryCodeCell:(id)cell;
-(void)initTableView;
-(void)showCountryCode;
-(void)vcResignFirstResponder;
-(void)vcBecomeFirstResponder;
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)onMobileCanBeFoundAgreementClick:(id)click;
-(void)initNavigationBar;
-(void)onNext;
-(void)setHeaderTip:(id)tip;
-(void)dealloc;
-(id)init;
@end

@interface SettingModifyAliasController : SettingBaseViewController <PBMessageObserverDelegate, UIAlertViewDelegate> {
	UITextField* m_textField;
	MMLoadingView* m_loadingView;
	id<settingModifyAliasDelegate> m_delegate;
	NSString* m_nsAlias;
	NSString* m_nsOldText;
	int m_setAliasScene;
}
@property(assign, nonatomic) id<settingModifyAliasDelegate> m_delegate;
@property(assign, nonatomic) int m_setAliasScene;
@property(retain, nonatomic) NSString* m_nsOldText;
@property(retain, nonatomic) NSString* m_nsAlias;
@property(retain, nonatomic) UITextField* m_textField;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeAliasCell:(id)cell;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)textFieldTextDidChange:(id)textFieldText;
-(void)viewDidLoad;
-(void)onSave:(id)save;
-(void)ModifyAccount;
-(void)onCancel;
-(void)OnSetAliasOK;
-(void)stopLoading;
-(void)startLoading;
@end

@interface SettingGeneralViewController : MMUIViewController <UIActionSheetDelegate> {
	MMTableViewInfo* m_tableViewInfo;
}
-(void)handelEmoticonSetting;
-(void)handleLocalDataMigration;
-(void)handleFontSizeChange;
-(void)handleLanguageChange;
-(void)onVoipRingToneSwitchChanged:(id)changed;
-(void)onUploadHDImageSwitchChanged:(id)changed;
-(void)onSavePhotoSwitchChanged:(id)changed;
-(void)alertNoAlbumAcess;
-(void)onNearModeSwitchChanged:(id)changed;
-(void)doSetPrivateConfig:(unsigned long)config on:(BOOL)on bitset:(unsigned long)bitset;
-(void)showNotificationView;
-(void)viewDidLoad;
-(void)reloadTableData;
-(void)onClearData;
-(void)onWebWX;
-(void)onLoudModeSwitch:(id)aSwitch;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)clearLocalData;
-(void)showClearLocalDataActionSheet;
-(void)showPluginsView;
-(void)showChatBackgroundConfig;
@end

@interface SettingLanguageViewController : SettingBaseViewController {
	unsigned long m_uiCurIndex;
	unsigned long m_uiCurWorkingIndex;
	NSArray* m_arrLanguages;
	NSArray* m_arrLanguageDisplayNames;
	MMLoadingView* m_loadingView;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)doChangeLanguage;
-(void)save;
-(void)cancel;
-(void)fixNavigationBar;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initLanguageData;
@end

@interface ChatBackgroundItem : NSObject {
	int cid;
	NSString* basePath;
	MMRuleSetList* m_ruleSetList;
	int version;
	NSData* thumbData;
	int status;
}
@property(assign, nonatomic) int status;
@property(assign, nonatomic) int version;
@property(retain, nonatomic) NSData* thumbData;
@property(retain, nonatomic) MMRuleSetList* m_ruleSetList;
@property(retain, nonatomic) NSString* basePath;
@property(assign, nonatomic) int cid;
+(id)loadChatBackgroundItemFromPath:(id)path;
-(BOOL)getBOOLNamed:(id)named;
-(id)getColorNamed:(id)named;
-(int)getVersion;
-(id)getThumbPath;
-(id)getBackgroundImagePath;
-(id)fileOfImageNamed:(id)imageNamed;
-(id)description;
-(id)keyPaths;
-(void)dealloc;
@end

@interface ChatBackgroundSettings : NSObject {
	NSMutableArray* items;
	NSMutableDictionary* backgroundPreferences;
	int currentCID;
	int lastSyncListDate;
}
@property(assign, nonatomic) int lastSyncListDate;
@property(assign, nonatomic) int currentCID;
@property(retain, nonatomic) NSMutableDictionary* backgroundPreferences;
@property(retain, nonatomic) NSMutableArray* items;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(id)keyPaths;
-(void)dealloc;
-(unsigned)countOfItems;
-(id)getDefaultBackgroundItem;
-(id)getBackgroundPreferenceForUsername:(id)username;
-(void)setBackgroundPreference:(id)preference forUsername:(id)username;
-(id)getChatBackgroundItemByCID:(int)cid;
-(void)removeItem:(id)item;
-(void)addItem:(id)item;
-(id)initWithDefault;
@end

@interface ChatBackgroundMgr : MMService <MMService, MMPackageDownloadMgrExt> {
	ChatBackgroundSettings* m_settings;
	NSMutableArray* m_serverItems;
	NSMutableArray* m_downloadingItems;
	NSMutableArray* m_cancelingItems;
	NSMutableDictionary* m_downloadTaskBook;
	NSString* m_nsCachePathString;
	UIImage* m_ocacheImage;
	CGRect m_cacheRect;
}
@property(retain, nonatomic) NSMutableArray* m_cancelingItems;
@property(retain, nonatomic) NSMutableArray* m_downloadingItems;
@property(retain, nonatomic) NSMutableArray* m_serverItems;
@property(retain, nonatomic) NSMutableDictionary* m_downloadTaskBook;
@property(retain, nonatomic) ChatBackgroundSettings* m_settings;
-(id).cxx_construct;
-(void)removeCancelingItem:(id)item;
-(void)addCancelingItem:(id)item;
-(void)removeDownloadingItem:(id)item;
-(void)addDownloadingItem:(id)item;
-(void)removeServerItem:(id)item;
-(void)addServerItem:(id)item;
-(void)onPackageCancelFinish:(id)finish;
-(void)onPackageDownloadFinish:(id)finish package:(id)package;
-(void)onPackageDownloadProcessUpdated:(id)updated downloadSize:(int)size totalSize:(int)size3;
-(void)onPackageListUpdated:(id)updated;
-(void)cancelItem:(id)item;
-(void)downloadItem:(id)item forUsername:(id)username;
-(id)getAllItemsList;
-(void)tryUpdateListFromServer;
-(void)updateListenerData;
-(id)getChatBackgroundViewForUser:(id)user;
-(id)getPluginChatBackgroundView:(int)view;
-(id)getThumbImageViewForCID:(id)cid;
-(id)imageInPath:(id)path;
-(BOOL)getBOOLByName:(id)name forUser:(id)user;
-(id)getColorByName:(id)name forUser:(id)user;
-(void)resetAllPreferece;
-(BOOL)setBackgroundPreferenceByCustomImage:(id)image forUsername:(id)username;
-(void)setBackgroundPreference:(id)preference forUsername:(id)username;
-(id)getBackgroundPreferenceForUsername:(id)username;
-(void)saveUserChatBackgroundSetting;
-(void)loadUserChatBackgroundSetting;
-(BOOL)unPackChatBackgroundPackToDir;
-(BOOL)unPackChatBackgroundPackIfNotExist;
-(BOOL)installChatUpdatePack:(id)pack;
-(BOOL)isChatBKZipInBundle;
-(void)loadAllItems;
-(BOOL)createDirIfNotExist:(id)exist;
-(id)getDownloadFinishedUsernameForCID:(int)cid;
-(void)setDownadFinishedCID:(int)cid forUsername:(id)username;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceReloadData;
-(void)dealloc;
-(id)init;
@end

@interface ChatBackgroundView : MMUIControl {
	ChatBackgroundItem* m_cbItem;
	NSIndexPath* m_indexPath;
	MMDelegateProxy<ChatBackgroundViewDelegate>* m_delegate;
	int m_index;
}
@property(assign, nonatomic) int m_index;
@property(assign, nonatomic) MMDelegateProxy<ChatBackgroundViewDelegate>* m_delegate;
@property(retain, nonatomic) NSIndexPath* m_indexPath;
@property(retain, nonatomic) ChatBackgroundItem* m_cbItem;
-(void)startDownloadingAnimation;
-(id)initWithFrame:(CGRect)frame andData:(id)data;
-(void)setStatus:(int)status;
-(int)getStatus;
-(void)onClick;
-(void)initViewWithData;
-(void)dealloc;
@end

@interface MMChatBackgroundSettingViewController : MMUIViewController <ChatBackgroundExt, ChatBackgroundViewDelegate, UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	int m_columnCount;
	NSMutableArray* m_itemViews;
	NSString* m_username;
	NSMutableArray* m_allItems;
	BOOL isSettingChanged;
}
@property(retain, nonatomic) NSMutableArray* m_allItems;
@property(retain, nonatomic) NSString* m_username;
@property(retain, nonatomic) NSMutableArray* m_itemViews;
@property(retain, nonatomic) MMTableView* m_tableView;
-(void)onListStatusChange;
-(void)onChatBackgroundViewClick:(id)click;
-(void)onChatBackgroundDownloadFinishedForUser:(id)user withCID:(id)cid;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)onBackButtonClicked;
-(void)popToMessageSessionView;
-(void)viewDidLoad;
-(int)getRowCount;
-(id)getAllItems;
-(void)dealloc;
-(id)init;
-(void)addItemView:(id)view;
@end

@interface ChatBackgroundEntranceViewController : MMUIViewController <UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource, MMImagePickerManagerDelegate> {
	NSMutableArray* m_rowsData;
	MMTableView* m_tableView;
	NSString* m_username;
}
@property(retain, nonatomic) NSString* m_username;
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_rowsData;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)showImagePicker:(int)picker;
-(void)onFinishedSelectImage:(id)image fromSource:(int)source;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)popToMessageSessionView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)reloadRowData;
-(void)dealloc;
@end

@interface GameNode : NSObject {
	CMessageNodeData* m_oNodeData;
	unsigned long m_uiAnimationTimes;
}
@property(assign, nonatomic) unsigned long m_uiAnimationTimes;
@property(retain, nonatomic) CMessageNodeData* m_oNodeData;
-(void)dealloc;
-(id)init;
@end

@interface GameController : NSObject {
	NSMutableArray* m_arrNodeData;
	NSTimer* m_timer;
}
@property(retain, nonatomic) NSTimer* m_timer;
+(id)getMD5ByGameContent:(unsigned long)content;
-(void)Reset;
-(void)sendGameMessage:(id)message toUsr:(id)usr;
-(void)addNodeData:(id)data;
-(void)doAnimation;
-(void)stopTimer;
-(void)startTimer;
-(void)dealloc;
-(id)init;
@end

@interface ContactsPanelView : MMUIScrollView {
	NSMutableArray* m_arrKeys;
	NSMutableArray* m_arrImages;
	unsigned long m_uiImageSize;
	unsigned long m_uiCellSize;
	unsigned long m_uiLeftMargin;
	unsigned long m_uiRightMargin;
	bool m_bShouldDeleteOnClick;
	UIImageView* m_emptyView;
	BOOL m_showEmptyView;
	int m_headerType;
	MMDelegateProxy<ContactsPanelViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<ContactsPanelViewDelegate>* m_delegate;
@property(assign, nonatomic) BOOL m_showEmptyView;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)DeleteStop:(id)stop finished:(id)finished context:(void*)context;
-(void)deleteImage:(unsigned long)image;
-(void)addImage:(id)image animated:(BOOL)animated;
-(void)RemoveImageForKey:(id)key;
-(void)SetImageForKey:(id)key animated:(BOOL)animated;
-(void)SetRightMargin:(unsigned long)margin;
-(void)SetLeftMargin:(unsigned long)margin;
-(void)SetCellSize:(unsigned long)size;
-(void)SetImageSize:(unsigned long)size;
-(void)SetImageType:(int)type;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface FacebookViewController : AccountBaseViewController <IMMFacebookMgrExt, UIAlertViewDelegate> {
	UIButton* m_bindBtn;
	UIButton* m_unBindBtn;
	UIButton* m_doneBtn;
	UIViewController* m_vcAccount;
	MMTableViewInfo* m_tableViewInfo;
}
@property(retain, nonatomic) UIViewController* m_vcAccount;
-(void)onUnBindFacebookFinish:(unsigned long)finish;
-(void)onBindFacebookFinish:(unsigned long)finish;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onUnbind;
-(void)done;
-(void)onUnBindAccount;
-(void)bind;
-(void)viewDidLoad;
-(void)updateTableCell;
-(void)initFooterView;
-(void)initHeaderView;
-(void)onSkip:(id)skip;
-(void)dealloc;
-(void)disMiss;
-(void)updateView;
@end

@interface RecordView : UIView {
	UIView* _recordLeftView;
	UIImageView* _recordImageView;
	UIImageView* _recordSignalView;
	UIButton* _recordGarbageView;
	UIImageView* _recordWarningView;
	UIImageView* _recordBkgView;
	UILabel* _warningMessageLabel;
	UIActivityIndicatorView* _indicatorView;
	BOOL _bPreparing;
}
@property(assign, nonatomic) BOOL bPreparing;
@property(retain, nonatomic) UILabel* warningMessageLabel;
@property(retain, nonatomic) UIImageView* recordBkgView;
@property(retain, nonatomic) UIImageView* recordWarningView;
@property(retain, nonatomic) UIButton* recordGarbageView;
@property(retain, nonatomic) UIImageView* recordSignalView;
@property(retain, nonatomic) UIImageView* recordImageView;
-(void)SetPeakPower:(float)power;
-(BOOL)isRecordBkgShow;
-(void)HideRecordAnimated:(BOOL)animated;
-(void)StartTooLongTipsAnimated:(BOOL)animated;
-(void)StartTooShortTipsAnimated:(BOOL)animated;
-(void)StartRecordCancelAnimated:(BOOL)animated;
-(void)StartRecordAnimated:(BOOL)animated;
-(void)ShowPreparing:(BOOL)preparing;
-(void)reset;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

@interface WriteMailViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UITextViewDelegate, UIActionSheetDelegate, UINavigationControllerDelegate, MailContactFilterViewDelegate, MailContentViewDelegate, MailAttachmentViewDelegate, UIAlertViewDelegate, IQQMailExt, MMMailContactSelectViewDelegate, MailReceiverEditViewDelegate, MailAttachmentControlViewDelegate> {
	MMTableView* m_tableView;
	MailContactFilterView* m_filterView;
	MailContentView* m_contentView;
	MailReceiverEditView* m_receiverView;
	MailReceiverEditView* m_ccView;
	MailReceiverEditView* m_bccView;
	MailSubjectEditView* m_topicView;
	UIView* m_ccBccView;
	NSMutableArray* m_arrShowViews;
	MailAttachmentControlView* m_attachmentControlView;
	int m_firstResponderStatus;
	int m_ccBccFlodStatus;
	CMail* m_mail;
	NSMutableArray* m_arrReceiver;
	NSMutableArray* m_arrCc;
	NSMutableArray* m_arrBcc;
	NSMutableArray* m_arrAttachment;
	unsigned long m_uiMailType;
	float m_fKeyboardHeight;
	NSTimer* m_autoSaveTimer;
	unsigned long m_firstResponderTag;
	NSMutableArray* m_arrAttachmentView;
	NSMutableArray* m_arrAllMailContacts;
	NSString* m_nsMailID;
	BOOL m_bFromReadMail;
	BOOL m_bFirstFixContectHeight;
	BOOL m_bPresentModal;
}
@property(assign, nonatomic) BOOL m_bPresentModal;
@property(assign, nonatomic) BOOL m_bFromReadMail;
@property(retain, nonatomic) NSMutableArray* m_arrAllMailContacts;
-(void)onMailContactSelectDone:(id)done userInfo:(id)info;
-(void)onMailContactChanged:(id)changed;
-(void)onTextFieldNextItem:(id)item;
-(void)onTextFieldFinishEdit:(id)edit;
-(void)onTextFieldChanged:(id)changed;
-(void)onMailReceiverEditViewHeightChanged:(id)changed;
-(void)onMailContactDoubleClicked:(id)clicked;
-(void)onAddMailContact:(id)contact;
-(int)indexForView:(id)view;
-(void)onFirstResponderResigned;
-(id)getViewController;
-(id)initWithMail:(id)mail mailID:(id)anId mailType:(unsigned long)type;
-(void)uploadAttachment:(id)attachment name:(id)name;
-(id)initWithMail:(id)mail mailType:(unsigned long)type;
-(id)initWithNewEmptyMail:(id)newEmptyMail;
-(id)initWithEmptyMail:(id)emptyMail;
-(id)init;
-(void)dealloc;
-(void)releaseAutoSaveTimer;
-(void)initAutoSaveTimer;
-(void)removeNotificationObservers;
-(void)initNotificationObservers;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)ReleaseTextField;
-(void)viewDidUnload;
-(BOOL)isTextFirstResponder;
-(void)viewDidLoad;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnUploadData:(id)data filename:(id)filename ErrNo:(int)no;
-(void)OnGetAllMailContact:(id)contact ErrNo:(int)no;
-(void)OnDeleteAttachment:(id)attachment;
-(void)doDeleteAttachment:(unsigned long)attachment;
-(void)OnResend:(id)resend;
-(void)OnUploadSuccess;
-(void)contentViewDidFinishEdit;
-(void)filterViewBeginDragging;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)contactReturn:(id)aReturn;
-(void)didStartWriteMailContent;
-(void)contentViewNeedSetContentOffset:(float)offset;
-(id)getFilterName:(id)name;
-(void)reloadTableView;
-(void)setContentResponderStatus;
-(void)initView;
-(void)initTableItemViews;
-(void)updateRightBarButton;
-(void)OnReturn;
-(void)CheckCancel;
-(void)initData;
-(BOOL)SendBtnEnable;
-(void)onSend;
-(void)OnComposeSend:(int)send;
-(void)doSearch:(id)search;
-(void)fixFilterView;
-(void)onAutoSaveTimer;
-(void)deleteDraft;
-(void)loadDraft;
-(void)saveDraft;
-(void)setccBccFlodStatus:(int)status;
-(void)setNextFirstRespondStatus:(int)status;
-(void)setNewFirstResponse;
-(void)setFirstRespondStatus:(int)status;
-(int)getFirstResponderStatusForRow:(int)row;
-(int)getNextResponderStautsForFirstResponderStatus:(int)firstResponderStatus;
-(id)getViewForFirstResponderStatus:(int)firstResponderStatus;
-(void)staticReloadTableView;
-(id)getSelfMailContact;
@end

@interface MMViewLocationViewController : MMUIViewController <MKMapViewDelegate, UIAlertViewDelegate, UIActionSheetDelegate, ILocationMgrExt, PBMessageObserverDelegate> {
	NSString* _nsLocation;
	NSString* _nsPoiName;
	NSString* _nsMessageLocalID;
	BOOL _canAddToFav;
	BOOL _enableTrackMode;
	XXStruct_zYrK5D _location;
	MMDelegateProxy<ViewLocationDelegate>* _delegate;
	NSURL* _streetViewUrl;
	MKMapView* _mapView;
	NSMutableArray* _anotations;
	SelectLocationInfo* _locationInfo;
	CLLocation* _currentMapLocation;
	int _mapLocationTag;
	int _geoTag;
	BOOL _limitZoomLevel;
	unsigned _maxZoomLevel;
	NSString* _trackroomID;
	NSString* _nsUserName;
	NSString* _nsChatname;
}
@property(retain, nonatomic) NSString* trackroomID;
@property(assign, nonatomic) MMDelegateProxy<ViewLocationDelegate>* delegate;
@property(assign, nonatomic) XXStruct_zYrK5D location;
@property(readonly, assign, nonatomic) BOOL enableTrackMode;
@property(assign, nonatomic) BOOL canAddToFav;
@property(retain, nonatomic) NSString* nsMessageLocalID;
@property(readonly, assign, nonatomic) NSString* nsChatname;
@property(retain, nonatomic) NSString* nsPoiName;
@property(retain, nonatomic) NSString* nsUserName;
@property(retain, nonatomic) NSString* nsLocation;
-(id).cxx_construct;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onDidFindAddress:(id)on forTag:(int)tag;
-(void)stopGeocoder;
-(void)getAddressByLocation:(XXStruct_zYrK5D)location;
-(void)onMapLocationError:(id)error withTag:(int)tag;
-(void)onMapLocationChanged:(id)changed withTag:(int)tag;
-(void)startGetLocation;
-(void)mapView:(id)view didDeselectAnnotationView:(id)view2;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)favAddLocItemWithRemark:(id)remark;
-(void)onOpenStreetView:(id)view;
-(void)startGetStreetViewUrl;
-(void)onConfirmOpenMap;
-(void)RouteFrom:(XXStruct_zYrK5D)from To:(XXStruct_zYrK5D)to;
-(void)onOpenMap:(id)map;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onAction;
-(void)addAddressAnotation:(XXStruct_zYrK5D)anotation;
-(void)showLocationCalloutView;
-(void)removeAllAnotations;
-(void)setMapLocationScale:(int)scale withAnimated:(BOOL)animated;
-(id)getLocationText:(XXStruct_zYrK5D)text;
-(void)stopViewing;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithUsername:(id)username Chatname:(id)chatname EnableTrackMode:(BOOL)mode;
-(id)init;
@end

@interface MailContentView : MMUIView <UITextViewDelegate> {
	UITextView* m_textView;
	UIView* m_labelView;
	MMDelegateProxy<MailContentViewDelegate>* m_delegate;
	unsigned long m_uiLines;
	NSString* m_nsText;
	BOOL m_bPaste;
}
@property(retain, nonatomic) NSString* m_nsText;
@property(assign, nonatomic) MMDelegateProxy<MailContentViewDelegate>* m_delegate;
-(void)sizeToFit;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame showTips:(BOOL)tips;
-(void)initView;
-(void)showReplyTips;
-(float)getContentHeight;
-(BOOL)isTextViewFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidChange:(id)textView;
-(void)updateHeight;
-(void)setTextViewText;
-(void)setFrame:(CGRect)frame;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidBeginEditing:(id)textView;
-(void)setContent:(id)content;
-(id)getContent;
@end

@interface MailAttachment : NSObject {
	NSData* m_dtData;
	NSString* m_nsDataID;
	NSString* m_nsName;
	unsigned m_uiSize;
}
@property(assign, nonatomic) unsigned m_uiSize;
@property(retain, nonatomic) NSString* m_nsName;
@property(retain, nonatomic) NSString* m_nsDataID;
@property(retain, nonatomic) NSData* m_dtData;
-(void)dealloc;
-(id)init;
@end

@interface MailAttachmentView : MMUIView {
	UIActivityIndicatorView* m_loadingView;
	UILabel* m_labelName;
	UILabel* m_labelPercent;
	UILabel* m_labelUploadFail;
	UIButton* m_btnDelete;
	UIButton* m_btnResend;
	unsigned long m_uiPercent;
	unsigned long m_uiSize;
	NSString* m_nsAttachmentName;
	NSString* m_nsName;
	MMDelegateProxy<MailAttachmentViewDelegate>* m_delegate;
}
@property(assign, nonatomic) unsigned long m_uiSize;
@property(assign, nonatomic) MMDelegateProxy<MailAttachmentViewDelegate>* m_delegate;
@property(retain, nonatomic) NSString* m_nsName;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame name:(id)name;
-(void)initView;
-(void)OnResend:(id)resend;
-(void)OnDelete:(id)aDelete;
-(void)setUploadingStatus;
-(void)updateUploadPercent:(unsigned long)percent;
-(void)setUploadSuccessStatus;
-(void)setUploadFailStatus;
-(BOOL)isUploadSuccess;
-(void)initData;
@end

@interface MMLocationPinView : MKAnnotationView {
	UIImageView* m_pinView;
	UIImageView* m_shadowView;
	UIImageView* m_pointView;
	ThreeWayExpandImageView* m_calloutView;
	UIActivityIndicatorView* m_loadingView;
	UILabel* m_labelLocation;
	UILabel* m_labelPOIName;
	BOOL m_bCallOutViewEnable;
}
@property(assign, nonatomic) BOOL m_bCallOutViewEnable;
-(void)dealloc;
-(id)initWithAnnotation:(id)annotation reuseIdentifier:(id)identifier;
-(id)init;
-(void)initData;
-(void)initView;
-(void)hideCallOutView;
-(void)showCallOutView;
-(void)updatePinView:(CGRect)view;
-(void)setLoadingStatus;
-(void)setLocationText:(id)text POIName:(id)name;
-(void)doUpAnimation;
-(void)doDownAnimation;
-(void)onAnimationFinish;
-(void)stopAllAnimation;
-(void)setHighestFrame;
-(void)setDownFrame;
-(void)setUpFrame;
-(void)setDownStatus;
-(void)setUpStatus;
@end

@interface MMReadMailViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UIWebViewDelegate, IMsgExt, IQQMailExt, UIActionSheetDelegate, UIAlertViewDelegate, MailAttachDelegate, UIScrollViewDelegate> {
	MMTableView* _tableView;
	UIWebView* _webView;
	UIView* _fromListView;
	UIView* _toListView;
	UIView* _ccListView;
	UIView* _titleView;
	UIView* _tipView;
	UIView* _loadingView;
	UIView* _loadFailView;
	UILabel* _webContentView;
	UIView* _attachView;
	UIButton* _hideDetailBtn;
	UIButton* _showDetailBtn;
	UIButton* _setUnreadBtn;
	UIButton* _readOriginalBtn;
	BOOL bShowDetail;
	int eLoadingEnd;
	NSMutableArray* arrCells;
	UIBarButtonItem* _refreshButtonItem;
	UIBarButtonItem* _deleteButtonItem;
	UIBarButtonItem* _replyButtonItem;
	UIBarButtonItem* _newWriteButtonItem;
	PushMailWrap* _pushMailWrap;
	CMessageWrap* _messageWrap;
	CMail* _mail;
	MMDelegateProxy<MMReadMailViewDelegate>* _delegate;
	MMLoadingView* m_loadingView;
	CAttach* m_loadingAttach;
}
@property(retain, nonatomic) CAttach* m_loadingAttach;
@property(assign, nonatomic) MMDelegateProxy<MMReadMailViewDelegate>* m_delegate;
@property(retain, nonatomic) CMail* mail;
@property(retain, nonatomic) CMessageWrap* messageWrap;
@property(retain, nonatomic) PushMailWrap* pushMailWrap;
-(void)resetTableViewOffset:(id)offset;
-(void)onTopBarFrameChanged;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)OnPress:(id)press;
-(void)OnMailAttachPreview:(id)preview;
-(void)PreviewAttach:(id)attach Pop:(BOOL)pop;
-(void)OnComposeSend:(int)send;
-(void)OnSetMailUnread:(int)unread;
-(void)OnGetMail:(id)mail ErrNo:(int)no;
-(void)onNewWrite:(id)write;
-(void)onOperate:(id)operate;
-(void)onDeleteMail:(id)mail;
-(void)onRefresh:(id)refresh;
-(void)viewDidLoad;
-(void)SetCookie;
-(void)deleteMail;
-(void)updateCells;
-(void)FormCells;
-(void)FormAttachView:(id)view;
-(void)FormWebView;
-(void)FormLoadFailView;
-(void)FormLoadingView;
-(void)FromTipsView;
-(void)FormMailTitle;
-(void)FormCCList;
-(void)FormToList;
-(void)FormFromList;
-(void)endLoadMail;
-(void)beginLoadMail;
-(void)updateWebViewMarginTopAnimated:(BOOL)animated;
-(unsigned long)getWebviewMarginTopHeight;
-(void)SetWebviewMargin:(unsigned long)margin;
-(unsigned long)getMarginTop;
-(id)flattenHTML:(id)html;
-(id)GetContactButton;
-(CGPoint)findPossibleOriginForCGRect:(CGRect)cgrect withLeftWidth:(int)leftWidth;
-(void)onReadOrigin:(id)origin;
-(void)onSetUnread:(id)unread;
-(void)onLoadFailRefresh:(id)refresh;
-(void)onCCListClicked:(id)clicked;
-(void)onToListClicked:(id)listClicked;
-(void)onSenderClicked:(id)clicked;
-(void)onHideDetail:(id)detail;
-(void)onShowDetail:(id)detail;
-(void)webViewDidStartLoad:(id)webView;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(id)init;
@end

@interface MMMassSendContactSelectorViewController : MMSearchBarDisplayController <UITableViewDelegate, UITableViewDataSource> {
	NSMutableArray* _arrAllContacts;
	NSMutableArray* _arrKeys;
	NSMutableDictionary* _dicContacts;
	MMTableView* _tableView;
	NSMutableArray* _arrFilteredContacts;
	NSMutableSet* _setSelectedContacts;
	UIBarButtonItem* _selectAllButton;
	UIBarButtonItem* _deSelectAllButton;
	UIButton* _panelBtn;
	UIImageView* _toolView;
}
@property(retain, nonatomic) NSMutableSet* setSelectedContacts;
-(void)willShow;
-(void)onTopBarFrameChanged;
-(void)onDone:(id)done;
-(void)onDeSelectAll:(id)all;
-(void)onSelectAll:(id)all;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)doSearch:(id)search;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell tableCell:(id)cell2 section:(unsigned)section row:(unsigned)row;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)initToolView;
-(void)initSearchBar;
-(void)initTableView;
-(void)initView;
-(void)initData;
-(id)parseContactKey:(id)key;
-(void)processContact:(id)contact;
-(void)showAlertTooMany;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface MMMassSendWriteMessageViewController : MMUIViewController <MMInputToolViewDelegate, UITableViewDelegate, UITableViewDataSource, tableViewDelegate, ImageControllerDelegate, IMsgExt, IMassSendExt, RecordControllerDelegate, UIAlertViewDelegate> {
	MMTableView* _tableView;
	UIView* _receiverView;
	MMInputToolView* _inputToolView;
	NSMutableArray* _arrContacts;
	ImageController* _imageController;
	RecordController* _recordController;
	MMLoadingView* _loadingView;
	unsigned long _uiTmpRecordID;
	NSTimer* m_popBackTimer;
	unsigned long _iFromSendAgain;
}
@property(assign, nonatomic) unsigned long iFromSendAgain;
@property(retain, nonatomic) MMInputToolView* toolView;
@property(retain, nonatomic) NSArray* arrContacts;
-(void)initAllowWxTalk;
-(void)initAllowVoiceInput;
-(void)initAllowVoip;
-(void)willDisappear;
-(void)PopBack;
-(void)OnMassSendOK;
-(void)OnMassSendFail:(unsigned long)fail WithErrorMsg:(id)errorMsg;
-(void)stopLoadingAndShowError:(id)error withDelay:(float)delay;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(id)GetContactName;
-(unsigned long)CheckVoiceBtnState;
-(void)SetPeakPower:(float)power;
-(void)ShowTooLongTips;
-(void)ShowTooShortTips;
-(void)SetVoiceEnabled:(BOOL)enabled;
-(void)HideRecordTips;
-(void)ShowRecording;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendOriginalImage;
-(BOOL)CanSendMultiImage;
-(id)getNavigationController;
-(id)getViewController;
-(void)CameraControllerDidTakeVideo:(id)cameraController;
-(void)processInsertedImage:(id)image withData:(id)data ImageInfo:(id)info;
-(void)processInsertedImage:(id)image ImageInfo:(id)info;
-(void)onAddApp;
-(void)openRecommandApp:(id)app downloadUrl:(id)url;
-(void)openMyFavoritesListController;
-(void)open3rdAppListController;
-(void)onShareAppMsg:(id)msg;
-(void)openCameraController;
-(void)openMediaBrowser;
-(void)hideToolViewAnimated:(BOOL)animated;
-(void)CancelRecording;
-(void)StopRecording;
-(void)SendRecording;
-(void)StartRecording;
-(void)onSelectLocation;
-(void)onVoipInvite;
-(void)onWXTalk;
-(void)onShareCard;
-(void)SendEmoticonMesssageToolView:(id)view;
-(void)SendEmojiArtMessageToolView:(id)view;
-(void)SendTextMessageToolView:(id)view;
-(void)ToolViewPositionDidChanged:(BOOL)toolViewPosition animated:(BOOL)animated;
-(id)GetCurrentViewController;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)initLoadingView;
-(void)initReceiverView;
-(void)adjustSubviewRects;
-(void)initToolView;
-(void)initTableView;
-(void)MassSend:(id)send;
-(void)ShowAlert;
-(id)getAllUsrName;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface MassSendContentLogicController : BaseMsgContentLogicController <IUiUtilExt> {
	BOOL m_bNeedIntroView;
	UIImageView* _toolView;
}
-(BOOL)isShakeEnabled;
-(void)deleteAllMsg;
-(void)onTopBarFrameChanged;
-(void)onPopFromNavigationController;
-(void)onMassSendSendAgain:(id)again;
-(void)ViewDidInit;
-(void)ViewWillInit;
-(void)onNewMassSend:(id)send;
-(void)StopPlaying;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)handleToolView;
-(void)initIntroView;
-(BOOL)CanRotateOrientation;
-(BOOL)CanSelectMyFavoritesItemForSendingMsg;
-(BOOL)CanSend3rdMsg;
-(void)reloadIntroView;
-(void)initToolView;
-(void)OpenDetailInfo;
-(void)CustomToolViewEX:(id)ex;
-(void)Register;
-(void)UnRegister;
-(void)dealloc;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
@end

@interface AsyncImageView : MMUIView <IHttpCacheExt> {
	NSURLConnection* connection;
	NSMutableData* m_data;
	UIActivityIndicatorView* activityIndicator;
	UIImageView* imageView;
	int m_contentMode;
	MMDelegateProxy<AsyncImageViewDelegate>* _delegate;
	NSString* m_nsNotifyKey;
}
@property(retain, nonatomic) NSString* m_nsNotifyKey;
@property(assign, nonatomic) MMDelegateProxy<AsyncImageViewDelegate>* delegate;
@property(assign, nonatomic) int m_contentMode;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)image;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)OnHttpGetFinish:(id)finish response:(id)response ErrNo:(int)no;
-(void)loadImageFromHttpCacheMgr:(id)httpCacheMgr Type:(unsigned long)type;
-(void)stopActivityIndicator;
-(void)loadImageFromURL:(id)url;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)setFrame:(CGRect)frame;
@end

@interface MMActivityIndicator : UIImageView {
	double duration;
}
@property(assign, nonatomic) double duration;
-(void)stopAnimating;
-(void)startAnimating;
@end

@interface MMAdaptiveLabel : UILabel {
	int m_adaptiveType;
}
+(CGSize)getIdealSize:(id)size initSize:(CGSize)size2 forAdaptiveType:(int)adaptiveType;
-(void)setLineBreakMode:(int)mode;
-(void)setFont:(id)font;
-(void)setText:(id)text;
-(void)setSize:(CGSize)size;
-(void)setFrame:(CGRect)frame;
-(void)setAdaptiveType:(int)type;
-(void)adjustSize;
-(void)internalAdjustFrame:(CGRect*)frame;
@end

@interface MMHeaderLabel : MMAdaptiveLabel {
}
-(void)internalAdjustFrame:(CGRect*)frame;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
-(void)initStyle;
@end

@interface MMSectionHeaderLabel : MMHeaderLabel {
}
+(float)sectionHeaderHeightForTitle:(id)title;
+(id)sectionHeaderWithTitle:(id)title;
-(void)internalAdjustFrame:(CGRect*)frame;
-(void)initStyle;
@end

@interface MMFooterLabel : MMAdaptiveLabel {
}
-(void)internalAdjustFrame:(CGRect*)frame;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
-(void)initStyle;
@end

@interface MMAnimationTipView : MMUIView {
	UIImageView* m_bkgView;
	UIImageView* m_tipIconView;
	UILabel* m_label;
	MMDelegateProxy<MMAnimationTipViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MMAnimationTipViewDelegate>* m_delegate;
@property(readonly, assign, nonatomic) UILabel* m_label;
@property(readonly, assign, nonatomic) UIImageView* m_tipIconView;
-(void)fadeWithDuration:(id)duration;
-(void)showWithDuration:(float)duration AndFadeDuration:(float)duration2;
-(void)fadeShowWithDuration:(float)duration;
-(void)fadeShow;
-(CGRect)getBkgRect;
-(CGRect)convertIconRectTo:(id)to;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)dealloc;
-(void)setTipView;
-(id)initWithTipIcon:(id)tipIcon andText:(id)text;
@end

@interface MMBadgeView : UIImageView {
	CGPoint pOriginPoint;
	float fAddedWidth;
	float fOriginWidth;
}
@property(assign, nonatomic) float fAddedWidth;
@property(assign, nonatomic) CGPoint pOriginPoint;
-(id).cxx_construct;
-(void)SetImage:(id)image;
-(void)setImage:(id)image;
-(void)setString:(id)string;
-(void)setValue:(unsigned)value;
-(id)labelView;
-(id)initWithFrame:(CGRect)frame;
-(void)setStringImage;
@end

@interface ChatRoomBindCardUpgradeViewController : MMUIViewController <IWCPayControlLogicExt, IGroupMgrExt, UIAlertViewDelegate, WCAccountBindPhoneControlLogicDelegate> {
	CContact* m_chatRoomContact;
	unsigned long m_scene;
	unsigned long m_status;
	unsigned long m_phoneQuota;
	unsigned long m_cardQuota;
	unsigned long m_maxCount;
	WCPayAddPayCardLogic* m_cardLogic;
	unsigned long m_upgradeRet;
	NSArray* m_presentArray;
	BOOL m_upgradeDirect;
	WCAccountBindPhoneControlLogic* m_bindLogic;
}
-(void)OnChatRoomUpgrade:(id)upgrade rspCode:(int)code restQuota:(unsigned long)quota maxCount:(unsigned long)count;
-(void)OnGetChatRoomUpgradeStatus:(unsigned long)status phoneQuota:(unsigned long)quota payQuota:(unsigned long)quota3 maxCount:(unsigned long)count;
-(void)OnFinishedWCPayLogic:(id)logic CompleteStatus:(int)status;
-(void)bindPhoneReturn;
-(void)onWCAccountBindPhoneControlLogicStop;
-(void)upgradeChatRoom;
-(void)checkBindPhone;
-(void)startBindCard;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)startUpgrade:(BOOL)upgrade;
-(void)confirmAction;
-(void)getUpgradeStatus;
-(void)openInfoPage;
-(id)initFooterSection:(unsigned long)section;
-(id)initProductSection:(unsigned long)section;
-(id)makeUpgraderView:(id)view upgrader:(id)upgrader maxCount:(unsigned long)count;
-(BOOL)shouldNotShowConfirmPage;
-(id)getUpgrader;
-(id)getUpgraderText;
-(void)initUpgraderView:(id)view upgrader:(id)upgrader maxCount:(unsigned long)count;
-(void)initUpgraderView;
-(id)dismissWithAnim;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithChatRoomContact:(id)chatRoomContact forScene:(unsigned long)scene;
@end

@interface MMCellBackgroundView : UIView {
	UIColor* borderColor;
	UIColor* fillColor;
	int position;
}
@property(assign, nonatomic) int position;
@property(retain, nonatomic) UIColor* fillColor;
@property(retain, nonatomic) UIColor* borderColor;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)setNeedsDisplay;
-(id)initWithFrame:(CGRect)frame;
-(BOOL)isOpaque;
@end

@interface MMGrowTextView : MMUIView <UITextFieldDelegate, UITextViewDelegate, UIScrollViewDelegate, textViewDelegate> {
	id<MMGrowTextViewDelegate> m_delegate;
	UIImageView* _backgroundView;
	CGSize textViewMaxSize;
	UIEdgeInsets backgroundImageInsets;
	MMTextView* _textView;
	UITextField* _textField;
	NSString* _nsLastText;
	BOOL enabled;
	NSString* placeHolder;
	NSRange _selectedRange;
	NSString* _extensionKey;
	NSString* text;
}
@property(retain, nonatomic) NSString* extensionKey;
@property(assign, nonatomic) NSString* placeHolder;
@property(assign, nonatomic) BOOL enabled;
@property(retain, nonatomic) NSString* nsLastText;
@property(assign, nonatomic) NSString* text;
@property(assign, nonatomic) id<MMGrowTextViewDelegate> m_delegate;
@property(assign, nonatomic) UIEdgeInsets backgroundImageInsets;
@property(assign, nonatomic) CGSize textViewMaxSize;
-(id).cxx_construct;
-(void)dealloc;
-(void)deleteBackward;
-(void)insertString:(id)string;
-(float)getTextViewHeight;
-(void)setTextColor:(id)color;
-(void)setTextFont:(id)font;
-(void)setTextWidth:(float)width;
-(BOOL)isFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)touchesEnded_TextView:(id)view withEvent:(id)event;
-(void)touchesBegan_TextView:(id)view withEvent:(id)event;
-(void)textview:(id)textview pasteImage:(id)image;
-(BOOL)textview:(id)textview shouldPasteImage:(id)image;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)sendTextViewMessage;
-(void)textViewDidBeginEditing:(id)textView;
-(id)textArea;
-(void)adjustRect;
-(void)adjustSize;
-(CGRect)pbBoundingRectWithWidth:(float)width andStringAttributes:(id)attributes;
-(float)measureHeight;
-(void)UITextViewTextDidBeginEditingNotification:(id)uitextViewText;
-(void)UITextViewTextDidChangeNotification:(id)uitextViewText;
-(void)setBackgroundImage:(id)image;
-(void)setFrame:(CGRect)frame;
-(id)init;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)postTextChangeNotification;
-(void)setTextViewContentInsets;
-(BOOL)useTextView;
-(void)setAdjustToInterfaceOrientation:(int)interfaceOrientation;
@end

@interface MMImageView : MMUIImageView {
	MMDelegateProxy<imageViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<imageViewDelegate>* m_delegate;
-(void)dealloc;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface MMListViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UINavigationControllerDelegate> {
	NSMutableArray* m_arrAllMessageData;
	NSArray* newArriveList;
	MMTableView* m_tableView;
	MMDelegateProxy<SessionDelegate>* m_delegate;
	UIView* m_noMsgView;
	UIImageView* m_imgView;
	UILabel* m_tipLabel;
	UILabel* m_label;
	UILabel* m_setLabel;
	unsigned long m_uiUnreadCount;
	UIButton* m_btn;
	UIButton* m_headerView;
}
@property(assign, nonatomic) MMDelegateProxy<SessionDelegate>* m_delegate;
@property(retain, nonatomic) NSArray* newArriveList;
@property(retain, nonatomic) NSMutableArray* m_arrAllMessageData;
-(void)dealloc;
-(void)viewDidLoad;
-(BOOL)isNewArrive:(id)arrive;
-(void)reloadNewArrList;
-(void)newArrListUpDataReloadView;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)deleteSession:(unsigned long)session;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)initView;
-(void)openFunction;
-(void)goToInfoViewController:(id)infoViewController;
-(void)updateLabel;
-(void)ContactsViewReloadData;
-(void)initData;
-(void)updateViewControllerTitle;
@end

@interface MMPickerView : MMUIActionSheet <UIPickerViewDelegate, UIPickerViewDataSource> {
	UIPickerView* m_pickerView;
	MMDelegateProxy<MMPickerViewDelegate>* m_delegate;
	int m_curSession;
	NSMutableArray* m_arrSessions;
	NSMutableArray* m_arrRows;
	NSMutableDictionary* m_dicSelectionIndex;
	float m_fLeftWidth;
}
@property(retain, nonatomic) NSMutableDictionary* m_dicSelectionIndex;
@property(assign, nonatomic) MMDelegateProxy<MMPickerViewDelegate>* m_delegate;
@property(retain, nonatomic) UIPickerView* m_pickerView;
-(void)setSelectedRowTitle:(id)title atSessionTitle:(id)sessionTitle;
-(void)setSelectedRows:(id)rows;
-(void)setSelectedRow:(int)row atSession:(int)session;
-(void)UIPickerViewDidFinish;
-(void)UIPickerViewDidCancel;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(float)pickerView:(id)view widthForComponent:(int)component;
-(void)setLeftWidth:(float)width;
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)showInView:(id)view;
-(void)dealloc;
-(id)initWithRows:(id)rows;
-(id)initWithSessions:(id)sessions andRows:(id)rows;
-(id)initWithDataString:(id)dataString needCache:(BOOL)cache;
-(void)initView;
@end

@interface MMProgressView : UIView {
	UIImageView* m_imgvBack;
	UIImageView* m_imgvFront;
	CGRect m_rectLayout;
	float m_fProgress;
	float m_fTopWidth;
}
@property(retain, nonatomic) UIImageView* m_imgvFront;
@property(retain, nonatomic) UIImageView* m_imgvBack;
-(id).cxx_construct;
-(void)dealloc;
-(void)SetFrontImageByName:(id)name;
-(void)SetProgress:(float)progress;
-(id)initWithFrame:(CGRect)frame BackImg:(id)img FrontImg:(id)img3 Layout:(CGRect)layout CapWidth:(float)width CapHeight:(float)height;
@end

@interface MMScrollView : MMUIScrollView {
	MMDelegateProxy<scrollViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<scrollViewDelegate>* m_delegate;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
@end

@interface MMSearchBarDisplayController : MMUIViewController <UISearchDisplayDelegate, UISearchBarDelegate> {
	UISearchBar* m_searchBar;
	UISearchDisplayController* m_searchDisplayController;
	UIView* _projectionView;
}
@property(retain, nonatomic) UISearchDisplayController* searchDisplayController;
@property(retain, nonatomic) UISearchBar* searchBar;
-(void)dealloc;
-(void)didAppear;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)SearchBarBecomeUnActive;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarBookmarkButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
@end

@interface MMTabBarBaseViewController : MMSearchBarDisplayController {
}
-(id)init;
-(void)updateViewWhenSelectTab:(BOOL)tab;
@end

@interface MMTableView : UITableView <MMDelegateCenterExt> {
	MMDelegateProxy<UITableViewDataSource>* dataSourceProxy;
	MMDelegateProxy<UITableViewDelegate>* delegateProxy;
	MMDelegateProxy<tableViewDelegate>* m_delegateProxy;
	BOOL cancelButtonTouchsTrack;
	Class cancelTouchsTrackClass;
	UIView* _footerView;
	UIColor* _tailColor;
	BOOL m_dontDrawFooterLine;
	BOOL _isMainView;
	id<tableViewDelegate> m_delegate;
}
@property(assign, nonatomic) BOOL isMainView;
@property(assign, nonatomic) Class cancelTouchsTrackClass;
@property(assign, nonatomic) BOOL cancelButtonTouchsTrack;
@property(assign, nonatomic) id<tableViewDelegate> m_delegate;
@property(retain, nonatomic) UIColor* tailColor;
-(void)deleteRowsAtIndexPaths:(id)indexPaths withRowAnimation:(int)rowAnimation;
-(void)reloadRowsAtIndexPaths:(id)indexPaths withRowAnimation:(int)rowAnimation;
-(void)setTableFooterView:(id)view;
-(void)drawFooterLine:(BOOL)line;
-(void)setContentInsetTop:(float)top andBottom:(float)bottom;
-(void)dealloc;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame style:(int)style;
-(void)reloadDataAnimated;
-(void)reloadData;
-(BOOL)touchesShouldCancelInContentView:(id)touches;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)onClearMyDelegate:(id)delegate forProtocols:(id)protocols;
-(void)setDataSource:(id)source;
-(void)setDelegate:(id)delegate;
@end

@interface MMTableViewCell : UITableViewCell {
}
+(id)getCellTextHightlightedColor;
-(void)addBackgroundView;
-(void)addCustomArrow;
-(void)setAccessoryType:(int)type;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)init;
-(void)dealloc;
@end

@interface MMTextView : MMUITextView {
	NSString* placeholder;
	BOOL _shouldDrawPlaceholder;
	MMDelegateProxy<textViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<textViewDelegate>* m_delegate;
@property(retain, nonatomic) NSString* placeholder;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)paste:(id)paste;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)setContentInset:(UIEdgeInsets)inset;
-(void)setText:(id)text;
-(void)_textChanged:(id)changed;
-(void)_updateShouldDrawPlaceholder;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMTransparentButton : MMUIButton {
	BOOL m_bScale;
	MMDelegateProxy<MMTransparentButtonDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MMTransparentButtonDelegate>* m_delegate;
@property(assign, nonatomic) BOOL m_bScale;
-(CGRect)imageRectForContentRect:(CGRect)contentRect;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(id)init;
-(id)description;
@end

@interface PrtlBase : NSObject {
	unsigned long m_uiUin;
	unsigned long m_uiScene;
	unsigned long m_uiCgi;
	NSRecursiveLock* m_oLock;
	CMMDB* m_oMMDB;
	id<NotifyFromPrtlDelegate> m_delNotifyFromPrtl;
}
@property(assign, nonatomic) id<NotifyFromPrtlDelegate> m_delNotifyFromPrtl;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(retain, nonatomic) CMMDB* m_oMMDB;
@property(assign, nonatomic) unsigned long m_uiCgi;
@property(assign, nonatomic) unsigned long m_uiScene;
@property(assign, nonatomic) unsigned long m_uiUin;
-(void)GetRespKey:(AutoBuffer*)key;
-(void)GetReqRSAKey:(int*)key KEYN:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)keyn KEYE:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)keye;
-(void)GetReqKey:(AutoBuffer*)key;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)InitPrtl:(unsigned long)prtl Delegate:(id)delegate DB:(id)db Lock:(id)lock Scene:(unsigned long)scene;
-(void)dealloc;
-(id)init;
@end

@interface MMUILongPressImageView : MMUIImageView {
	BOOL m_bIsLongPressHandled;
	float m_fLongPressTime;
	UIImage* _normalImage;
	MMDelegateProxy<LongPressImageViewDelegate>* _delegate;
}
@property(retain, nonatomic) UIImage* normalImage;
@property(assign, nonatomic) MMDelegateProxy<LongPressImageViewDelegate>* m_delegate;
@property(assign, nonatomic) float m_fLongPressTime;
-(void)setNormalImage;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)LongPressEvents;
-(void)dealloc;
-(id)init;
-(id)initWithImage:(id)image;
@end

@interface MMUILongPressMenuView : MMUILongPressView {
	MMDelegateProxy<LongPressMenuViewDelegate>* menu_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<LongPressMenuViewDelegate>* menu_delegate;
-(void)copy:(id)copy;
-(BOOL)canBecomeFirstResponder;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)LongPressEvents;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMUILongPressView : MMUIView {
	BOOL m_bIsLongPressHandled;
	float m_fLongPressTime;
	MMDelegateProxy<LongPressViewDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<LongPressViewDelegate>* m_delegate;
@property(assign, nonatomic) float m_fLongPressTime;
-(void)LongPressEvents;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMUIViewController : UIViewController <IUiUtilExt, MMUIViewControllerDelegate, UIGestureRecognizerDelegate> {
	BOOL m_isPopByClickingURL;
	MMLoadingView* m_loadingViewX;
	unsigned long m_uiVcType;
	BOOL m_bKeyboardShowForGesture;
	UIViewController* _presentingModalViewController;
	UIViewController* _presentedModalViewController;
	UILabel* m_newsTitleRecordLabel;
	NSMutableArray* m_fullScreenViews;
	BOOL _isSupportWXGesture;
	BOOL m_bAnimated;
	BOOL m_bInteractivePopEnabled;
	UINavigationController* m_navigationController;
	UIView* bottomView;
}
@property(retain, nonatomic) NSMutableArray* m_fullScreenViews;
@property(assign, nonatomic) BOOL m_bInteractivePopEnabled;
@property(assign, nonatomic) BOOL m_bAnimated;
@property(assign, nonatomic) BOOL isSupportWXGesture;
@property(retain, nonatomic) UIView* bottomView;
@property(retain, nonatomic) UILabel* m_newsTitleRecordLabel;
@property(assign, nonatomic) UIViewController* presentedModalViewController;
@property(assign, nonatomic) UIViewController* presentingModalViewController;
@property(assign, nonatomic) unsigned long m_uiVcType;
@property(retain, nonatomic) MMLoadingView* loadingViewX;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)shouldInteractivePop;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(BOOL)isSubviewResponder:(id)responder;
-(void)resignSubviewResponder:(id)responder;
-(void)viewWillDismiss:(BOOL)view;
-(void)viewWillPresent:(BOOL)view;
-(void)viewWillPop:(BOOL)view;
-(void)viewDidPush:(BOOL)view;
-(void)viewWillPush:(BOOL)view;
-(void)viewDidBeDismissed:(BOOL)view;
-(void)viewWillBeDismissed:(BOOL)view;
-(void)viewDidBePresented:(BOOL)view;
-(void)viewWillBePresented:(BOOL)view;
-(void)viewDidBePoped:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewDidBePushed:(BOOL)view;
-(void)viewWillBePushed:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(id)getNavigationRightButton:(id)button;
-(id)getNavigationLeftButton:(id)button;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)isPresentedIn;
-(BOOL)isPushedIn;
-(id)tagForActivePage;
-(id)getViewController;
-(void)resetViewStatus;
-(void)startForcedRotationToPortrait;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)isSvrErrorTipForbidden;
-(BOOL)shouldOtherPreventedAutorotateToInterfaceOrientation;
-(int)preferredInterfaceOrientationForPresentation;
-(void)protectStatusBarFromBeingFuckedByForeGround:(SEL)beingFuckedByForeGround;
-(int)preferredStatusBarStyle;
-(BOOL)prefersStatusBarHidden;
-(void)setStatusBarHidden:(BOOL)hidden;
-(void)fixNavigationBar;
-(void)postNotification;
-(void)setOutLine:(BOOL)line;
-(void)setSubView:(id)view OutLine:(BOOL)line;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(void)setTitleOnly:(id)only;
-(void)willDismissAndShow;
-(void)setTitleInterfaceOritation:(int)oritation;
-(void)setTitle:(id)title;
-(void)willShow;
-(void)willDisshow;
-(void)didDisshow;
-(void)didAppear;
-(void)willDisappear;
-(void)adjustView;
-(void)willAppear;
-(void)setIsPopByClickingURL;
-(void)handleUrl:(id)url DisableFirstGetA8Key:(BOOL)key extraInfo:(id)info;
-(void)resetTableViewOffset:(id)offset;
-(void)onMainWindowFrameChanged;
-(void)RemoveFullScreenViewList;
-(void)AddViewToFullScreenViewList:(id)fullScreenViewList;
-(void)onTopBarHiddenChanged:(int)changed;
-(void)onTopBarFrameChanged;
-(void)ReLayoutFullScreenViews;
-(float)getVisibleHeight;
-(void)dealloc;
-(id)init;
-(void)viewDidUnload;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)disMissSelf;
-(void)adjustViewAndNavBarRect;
-(void)adjustSubviewRects;
-(void)adjustTableViewRect;
-(void)stopLoading;
-(void)startLoadingNonBlock;
-(void)startLoadingBlocked;
@end

@interface MMURLHandler : MMObject <UIActionSheetDelegate, MFMailComposeViewControllerDelegate, contactInfoDelegate, MMWebViewDelegate, UIAlertViewDelegate> {
	UIViewController* m_viewController;
	NSMutableDictionary* m_urlToViewController;
	NSMutableDictionary* m_urlToBackupURL;
	NSString* m_url;
	unsigned long m_urlPermittedSet;
	BOOL m_bPresentViewController;
	BOOL m_isDisableShare;
	BOOL m_disalbeStartLoadGetA8Key;
	UIAlertView* alertView;
	int m_urlSource;
}
@property(retain, nonatomic) NSString* m_url;
@property(assign, nonatomic) unsigned long m_urlPermittedSet;
@property(assign, nonatomic) int m_urlSource;
@property(assign, nonatomic) BOOL m_disalbeStartLoadGetA8Key;
@property(assign, nonatomic) BOOL m_isDisableShare;
@property(assign, nonatomic) UIViewController* m_viewController;
@property(assign, nonatomic) BOOL m_bPresentViewController;
+(id)grepTextNumber:(id)number;
+(id)grepPhoneNumber:(id)number;
+(id)grepString:(id)string withRegex:(id)regex;
+(BOOL)containsProtocalHead:(id)head;
+(BOOL)containsAppStoreLinkString:(id)string;
+(BOOL)containsTextLinkString:(id)string;
+(BOOL)containsPhoneLinkString:(id)string;
+(BOOL)containEmailString:(id)string;
+(BOOL)containsMoaString:(id)string;
+(BOOL)containsWXPayLinkString:(id)string;
+(BOOL)containsWeixinString:(id)string;
+(BOOL)containsLocalPathString:(id)string;
+(BOOL)containsHTTPString:(id)string;
+(BOOL)containsString:(id)string withRegex:(id)regex;
+(void)handleUrl:(id)url withBackupURL:(id)backupURL withExtraInfo:(id)extraInfo;
+(id)sharedInstance;
-(void)ContactsViewReloadData;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)sendEmailTo:(id)to withSubject:(id)subject withBody:(id)body;
-(void)writeEmailWithSystemMail;
-(void)writeEmailWithQQMail;
-(void)dealloc;
-(BOOL)isURLRegistered:(id)registered;
-(void)handleURL:(id)url withBackupURL:(id)backupURL withExtraInfo:(id)extraInfo;
-(void)handleURL:(id)url withExtraInfo:(id)extraInfo;
-(id)getAvailableURL:(id)url;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)handleOutterAppURL:(id)url;
-(void)handleSystemAppURL:(id)url;
-(void)handleInnerAppURL:(id)url;
-(void)handleInnerWXPayURL:(id)url;
-(BOOL)isSystemAppURL:(id)url;
-(BOOL)isInnerAppURL:(id)url;
-(BOOL)isInnerWXPayURL:(id)url;
-(void)handleLocalResource:(id)resource;
-(void)handleEmailURL:(id)url;
-(void)handleHttpURL:(id)url withExtraInfo:(id)extraInfo;
-(void)handleInnerJumpURL:(id)url;
-(void)webViewReturn:(id)aReturn;
-(id)webViewFailToLoad:(id)load;
-(void)showAlert:(id)alert;
-(void)showAppStore;
-(id)showBlackList:(id)list;
-(id)openQQOfflineMsgPlugin:(id)plugin;
-(id)openPrivateMsgPlugin:(id)plugin;
-(id)openQQMailPlugin:(id)plugin;
-(id)initSetHeaderImageViewController:(id)controller;
-(id)initContactInfoView:(id)view withUserName:(id)userName;
-(void)popViewController:(id)controller;
-(id)getNavigationController;
-(id)getViewController;
-(id)init;
-(void)initData;
@end

@interface MMWindow : MMUIWindow {
	MMDelegateProxy<WindowDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WindowDelegate>* m_delegate;
-(void)dealloc;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface ThreeWayExpandImageView : UIView {
	UIImage* _leftImage;
	UIImage* _middleImage;
	UIImage* _rightImage;
	int _expandMode;
	UIImageView* _leftImageView;
	UIImageView* _middleImageView;
	UIImageView* _rightImageView;
}
@property(assign, nonatomic) int expandMode;
@property(retain, nonatomic) UIImage* rightImage;
@property(retain, nonatomic) UIImage* middleImage;
@property(retain, nonatomic) UIImage* leftImage;
-(void)layoutSubviews;
-(void)dealloc;
-(id)init;
@end

@interface VerticallyAlignedLabel : UILabel {
	int verticalAlignment_;
}
@property(assign, nonatomic) int verticalAlignment;
-(void)drawTextInRect:(CGRect)rect;
-(CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(int)lines;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMHDHeadImageView : MMUIView <MessageObserverDelegate, LongPressViewDelegate, UIActionSheetDelegate, ImageScrollViewDelegate> {
	UIImageView* m_backgroundView;
	MMUILongPressView* m_LongPressView;
	UIActivityIndicatorView* m_activityIndicatorView;
	ImageScrollView* m_imgView;
	UIView* m_imgMask;
	BOOL m_bLoading;
	MMAnimationTipView* m_tipView;
	CBaseContact* m_contact;
	CGRect m_rcImgBegin;
	unsigned long m_uiDownloadEventID;
	MMDelegateProxy<HDHeadImageViewDelegate>* m_delegate;
	int headScene;
	BOOL m_fullScreen;
}
@property(assign, nonatomic) int headScene;
@property(assign, nonatomic) MMDelegateProxy<HDHeadImageViewDelegate>* m_delegate;
@property(retain, nonatomic) CBaseContact* m_contact;
@property(readonly, assign, nonatomic) BOOL m_bLoading;
@property(retain, nonatomic) UIActivityIndicatorView* m_activityIndicatorView;
@property(retain, nonatomic) UIImageView* m_backgroundView;
-(id).cxx_construct;
-(void)dealloc;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)onSingleTap:(id)tap;
-(void)OnLongPress:(id)press;
-(void)OnPress:(id)press;
-(void)promptSaveToPhotoLibrary;
-(void)show;
-(void)showInOriginPlace:(BOOL)originPlace;
-(void)hide;
-(void)hideOver;
-(void)downloadHDImg;
-(void)updateHDHead;
-(void)updateHead;
-(id)getRealUserName:(id)name;
-(void)setImgBeginRect:(CGRect)rect;
-(void)startShowImg:(BOOL)img;
-(void)reset;
-(void)stopLoading;
-(void)stopLoadingInternal;
-(void)startLoading;
-(id)initWithContact:(id)contact;
-(void)BeforeInit;
@end

@interface MMHeadImageView : MMUIView <IMsgExt, IHeadImageExt, LongPressImageViewDelegate, IContactMgrExt> {
	MMUILongPressImageView* _headImageView;
	UIButton* _borderButton;
	NSString* _nsHeadImgUrl;
	NSString* _nsUsrName;
	BOOL _bAutoUpdate;
	CGSize _imageSize;
	UIImage* _borderImage;
	UIImage* _borderImageHL;
	UIColor* _borderColor;
	UIColor* _shadowColor;
	int _borderWidth;
	int _shadowWidth;
	BOOL _bAddBorder;
	BOOL _bRoundedCorner;
	id _oTarget;
	SEL _selAction;
	id _object;
	id _oLongPressTarget;
	SEL _selLongPressAction;
	id _oLongPressObject;
	BOOL _bNeedHandleLongPress;
	UIImageView* _sceneImageView;
	unsigned long m_conerSize;
	UIImage* _defaultImage;
	int _headScene;
}
@property(assign, nonatomic) int headScene;
@property(retain, nonatomic) UIImage* defaultImage;
@property(assign, nonatomic) unsigned long m_conerSize;
@property(retain, nonatomic) NSString* nsHeadImgUrl;
@property(assign, nonatomic) BOOL bAutoUpdate;
@property(retain, nonatomic) NSString* nsUsrName;
@property(assign, nonatomic) BOOL bRoundedCorner;
@property(assign, nonatomic) BOOL bAddBorder;
@property(assign, nonatomic) int shadowWidth;
@property(assign, nonatomic) int borderWidth;
@property(retain, nonatomic) UIColor* shadowColor;
@property(retain, nonatomic) UIColor* borderColor;
@property(retain, nonatomic) UIImage* borderImageHL;
@property(retain, nonatomic) UIImage* borderImage;
@property(assign, nonatomic) CGSize imageSize;
-(id).cxx_construct;
-(void)OnLongPressGesture:(id)gesture;
-(void)OnPress:(id)press;
-(void)onModifyContact:(id)contact;
-(void)addSceneImageView:(int)view;
-(void)setFrameForNonRoundHeaderView:(CGRect)nonRoundHeaderView;
-(void)updateHeadImage:(id)image;
-(void)setTargetForLongPress:(id)longPress action:(SEL)action;
-(void)setTarget:(id)target action:(SEL)action withObject:(id)object;
-(void)setTarget:(id)target action:(SEL)action;
-(void)onHeadImageChange:(id)change;
-(id)getRealUserName:(id)name;
-(void)checkAndUpdateImage;
-(void)setHeadImageByName:(id)name;
-(void)layoutSubviews;
-(void)dealloc;
-(id)init;
@end

@interface EmoticonStoreItemPreviewThumb : NSObject <PBCoding> {
	NSString* m_previewUrl;
	NSString* m_desc;
}
@property(retain, nonatomic) NSString* m_desc;
@property(retain, nonatomic) NSString* m_previewUrl;
+(void)initialize;
+(void)_initPBTableOfEmoticonStoreItemPreviewThumb;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface QRCodeScanner : UIView <QRDecoderDelegate, UINavigationControllerDelegate, QRCodeScannerOverlayViewDelegate, AVCaptureVideoDataOutputSampleBufferDelegate, IUiUtilExt> {
	NSSet* readers;
	NSString* result;
	QRCodeScannerOverlayView* overlayView;
	unsigned long beepSound;
	NSURL* soundToPlay;
	id<QRCodeScannerDelegate> delegate;
	BOOL oneDMode;
	AVCaptureSession* captureSession;
	AVCaptureVideoPreviewLayer* prevLayer;
	BOOL decoding;
	BOOL hasInit;
	CGRect cropRect;
}
@property(assign) BOOL oneDMode;
@property(assign, nonatomic) CGRect cropRect;
@property(retain, nonatomic) QRCodeScannerOverlayView* overlayView;
@property(retain, nonatomic) NSString* result;
@property(retain, nonatomic) NSURL* soundToPlay;
@property(assign, nonatomic) id<QRCodeScannerDelegate> delegate;
@property(retain, nonatomic) NSSet* readers;
@property(retain, nonatomic) AVCaptureVideoPreviewLayer* prevLayer;
@property(retain, nonatomic) AVCaptureSession* captureSession;
-(id).cxx_construct;
-(BOOL)torchIsOn;
-(void)setTorch:(BOOL)torch;
-(void)setDescription:(id)description;
-(void)stopCapture;
-(void)startCapture;
-(bool)scanOnePicture:(id)picture;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)initCapture;
-(void)onSelectPhotoFromLibrary;
-(void)notifyDelegate:(id)delegate;
-(void)presentResultPoints:(id)points;
-(void)presentResultForString:(id)string;
-(CGImageRef)CGImageRotated180:(CGImageRef)a180;
-(CGImageRef)CGImageRotated90:(CGImageRef)a90;
-(void)onTopBarFrameChanged;
-(void)willDisappear;
-(void)didAppear;
-(void)willAppear;
-(BOOL)fixedFocus;
-(id)getPlatform;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate OneDMode:(BOOL)mode;
@end

@interface QRCodeScannerOverlayView : UIView {
	UIView* m_blackMatte;
	UILabel* m_decription;
	MMLoadingView* m_loadingView;
	UIImageView* m_scanLine;
	CGRect cropRect;
	UIView* m_leftMatte;
	UIView* m_topMatte;
	UIView* m_buttomMatte;
	UIView* m_rightMatte;
	bool m_hasCamera;
	bool m_hasInitScanner;
	bool m_isAnimating;
	bool m_shouldAnimate;
	BOOL oneDMode;
	NSMutableArray* _points;
	id<QRCodeScannerOverlayViewDelegate> m_delegate;
}
@property(assign, nonatomic) id<QRCodeScannerOverlayViewDelegate> m_delegate;
@property(readonly, assign, nonatomic) UILabel* m_decription;
@property(assign, nonatomic) CGRect cropRect;
@property(assign, nonatomic) BOOL oneDMode;
@property(retain, nonatomic) NSMutableArray* points;
-(id).cxx_construct;
-(void)onTopBarFrameChanged;
-(void)willDisappear;
-(void)didAppear;
-(void)onSelectPhotoFromLibrary;
-(void)willAppear;
-(void)stopAnimation;
-(void)startAnimation;
-(void)animationStoped;
-(void)doAnimation;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame oneDMode:(BOOL)mode;
@end

@interface MMHeadImageHelper : NSObject {
}
+(id)getFavTextDetailHeadImageView;
+(id)getFavHeadImageView;
+(id)getYiQiCameraHeadImageView;
+(id)getWCProfileHeadImageView;
+(id)getTimeLineHeadImageView;
+(id)getRedHeardHeadImageView;
+(id)getVOIPBIGProfileHeadImageView;
+(id)getVOIPProfileHeadImageView;
+(id)getContactPanelHeadImageView;
+(id)getGroupMemberProfileHeadImageView;
+(id)getNewMainFrameHeadImageView;
+(id)getShakeSingleShowHeadImageView;
+(id)getBottleProfileHeadImageView;
+(id)getShakeProfileHeadImageView;
+(id)getContactBrandUserHeadImageView;
+(id)getContactHeadImageView;
+(id)getProfileDetailHeadImageView;
+(id)getShowCardHeadImageView;
+(id)getMessageContentHeadImageView;
+(id)getMainFrameHeadImageView;
+(id)getProfileHeadImageView;
@end

@interface MMUserNameLabel : UILabel {
	NSString* _nsUserName;
	NSString* _nsCandidateName;
}
@property(retain, nonatomic) NSString* nsCandidateName;
@property(retain, nonatomic) NSString* nsUserName;
-(void)dealloc;
-(id)init;
@end

@interface ImplicitView : UILabel {
	int vx;
	int vy;
	BOOL bStop;
}
-(void)onAnimationComplete:(id)complete finished:(id)finished context:(void*)context;
-(void)tick;
-(void)stop;
-(void)start;
-(id)initWithEmoji:(id)emoji;
@end

@interface ImplicitAnimationController : MMObject {
	NSMutableArray* m_arrAnimationView;
	MMDelegateProxy<ImplicitAnimationControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<ImplicitAnimationControllerDelegate>* m_delegate;
-(void)stopAnimation;
-(void)startAnimaionWithMyMessage:(id)myMessage;
-(void)startAnimaionWithMessages:(id)messages;
-(void)dealloc;
-(id)init;
-(void)clearResourse;
-(void)doEggAnimation:(id)animation;
@end

@interface TXNewsContentLogicController : BaseMsgContentLogicController {
	BOOL m_bNeedIntroView;
}
-(BOOL)isShakeEnabled;
-(void)deleteAllMsg;
-(BOOL)isNeedCached;
-(void)ViewDidInit;
-(void)ViewWillInit;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)CustomToolViewEX:(id)ex;
-(void)initIntroView;
-(void)reloadIntroView;
-(void)OpenDetailInfo;
-(void)dealloc;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
@end

@interface TXBlogContentLogicController : BaseMsgContentLogicController {
	BOOL m_bNeedIntroView;
}
-(BOOL)isShakeEnabled;
-(void)deleteAllMsg;
-(BOOL)isNeedCached;
-(void)ViewDidInit;
-(void)ViewWillInit;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)CustomToolViewEX:(id)ex;
-(void)initIntroView;
-(void)reloadIntroView;
-(void)OpenDetailInfo;
-(void)dealloc;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
@end

@interface SettingFontSizeViewController : SettingBaseViewController {
	int m_uiCurIndex;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)done;
-(void)cancel;
-(void)viewDidLoad;
-(void)updateFontData;
-(void)initFontData;
-(unsigned long)getFontSizeByIndex:(unsigned long)index;
-(unsigned long)getCurIndexByFontSize:(unsigned long)size;
@end

@interface SessionSelectController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, CreateChatLogicDelegate, UIAlertViewDelegate, MMSearchBarDelegate, MultiSelectContactsViewControllerDelegate> {
	int m_iSessionType;
	MMDelegateProxy<SessionSelectControllerDelegate>* m_delegate;
	MMTableView* m_tableView;
	NSMutableArray* m_arrContacts;
	CContact* m_contactSelected;
	int m_confirmType;
	int m_barTitleType;
	CreateChatLogic* m_createChatLogic;
	int m_createRoomType;
	MMSearchBar* m_searchBar;
	NSObject* _userData;
	BOOL m_bShowNewSession;
}
@property(retain, nonatomic) NSObject* userData;
@property(assign, nonatomic) int m_createRoomType;
@property(retain, nonatomic) CreateChatLogic* m_createChatLogic;
@property(retain, nonatomic) CContact* m_contactSelected;
@property(assign, nonatomic) MMDelegateProxy<SessionSelectControllerDelegate>* m_delegate;
@property(assign, nonatomic) int confirmType;
@property(assign, nonatomic) int barTitleType;
@property(assign, nonatomic) BOOL m_bShowNewSession;
-(void)onMultiSelectContactReturn:(id)aReturn;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(void)onCreateChatContactReturn:(id)aReturn;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)handleSelectIndexPath:(id)path tableView:(id)view;
-(id)getGroupDispName:(id)name;
-(void)onSelect:(id)select;
-(void)onConfirm;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)handleSelectNewSession;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell contact:(id)contact;
-(void)makeNewSessionCell:(id)cell;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initSearchBar;
-(void)initTitle;
-(void)initBarItem;
-(void)onCancel:(id)cancel;
-(void)initData;
-(void)dealloc;
-(id)init;
@end

@interface ZipViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, IQQMailExt> {
	NSString* m_nsPath;
	NSString* m_nsCompressXml;
	unsigned long m_uiViewType;
	MMTableView* m_tableView;
	MMLoadingView* m_loadingView;
	NSArray* m_arrAttachList;
	CAttach* m_loadingAttach;
}
@property(retain, nonatomic) CAttach* m_loadingAttach;
@property(retain, nonatomic) NSArray* m_arrAttachList;
@property(assign, nonatomic) unsigned long m_uiViewType;
@property(retain, nonatomic) NSString* m_nsCompressXml;
@property(retain, nonatomic) NSString* m_nsPath;
-(void)OnViewImage:(id)image ErrNo:(int)no;
-(void)OnViewCompress:(id)compress ErrNo:(int)no;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeAttachCell:(id)cell Index:(unsigned long)index;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)didAppear;
-(void)viewDidLoad;
-(void)ReloadTableView;
-(void)dealloc;
-(id)init;
@end

@interface MMProgressViewExLayer : CAShapeLayer {
	float angle;
}
@property(assign, nonatomic) float angle;
+(BOOL)needsDisplayForKey:(id)key;
-(void)drawInContext:(CGContextRef)context;
-(void)dealloc;
-(id)initWithLayer:(id)layer;
@end

@interface MMProgressViewEx : UIView {
	float total;
	float current;
	UIColor* frontColor;
	UIColor* backColor;
	double stepDuration;
	BOOL hideOnCompleteProcess;
	MMProgressViewExLayer* m_layer;
}
@property(assign, nonatomic) BOOL hideOnCompleteProcess;
@property(assign, nonatomic) double stepDuration;
@property(retain, nonatomic) UIColor* backColor;
@property(retain, nonatomic) UIColor* frontColor;
@property(assign, nonatomic) float current;
@property(assign, nonatomic) float total;
-(void)stopLoading;
-(void)startLoadingWithImage:(id)image;
-(void)startLoading;
-(void)setFrame:(CGRect)frame;
-(void)drawRect:(CGRect)rect;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)hideSelf;
-(void)doAnimation_v2;
-(void)doAnimation;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface AddFriendEntryViewController : MMTabBarBaseViewController <UIAlertViewDelegate, RadarSearchViewDelegate, RadarPushButtonDelegate, MMTableViewInfoDelegate> {
	FindContactSearchViewCellInfo* m_headerSearchView;
	NSString* m_nsUserNameToFind;
	RadarSearchView* m_radarView;
	RadarPushButton* m_pushButton;
	UIImageView* m_pushBtnBackgroundView;
	UIImageView* m_screenCaptureView;
	BOOL m_bIsScrolling;
	BOOL m_bIsFirstEnterRadar;
	CGPoint m_radarSearchCenterPoint;
	BOOL m_bIsStopHideRadarViewAnimation;
	MMTableViewInfo* m_tableViewInfo;
	BOOL m_bPresent;
}
@property(assign, nonatomic) BOOL m_bPresent;
@property(retain, nonatomic) NSString* m_nsUserNameToFind;
-(id).cxx_construct;
-(void)onTouchUp:(id)up;
-(void)onLongPress:(id)press;
-(void)onPress:(id)press;
-(void)onTouchBegan:(id)began;
-(void)onRaderSearchViewShow;
-(id)getCurViewController;
-(void)onRadarSearchViewClose;
-(void)onShowNavigationBar;
-(void)onHideRadarSearchViewFinished;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)searchFriend:(id)aFriend;
-(void)onCancel:(id)cancel;
-(void)viewDidLoad;
-(void)initLeftButton;
-(void)initView;
-(void)initTitle;
-(void)initRadarSearchView;
-(void)onStopRadarSearch;
-(void)takeScreenShot;
-(void)onShowRadarSearchViewFinished;
-(void)initTableView;
-(void)updateViewWhenSelectTab:(BOOL)tab;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)onSelectQQCell:(id)cell;
-(void)onSelectCell:(id)cell;
-(void)onSelectGoogleContactCell:(id)cell;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)dealloc;
-(id)init;
-(void)onDidBecomeActive;
-(void)ssss;
-(void)onWillResignActive;
-(void)makeRaderCell:(id)cell;
-(void)reloadData;
-(void)pluginsChanged:(id)changed;
-(unsigned long)getBottleUnreadCountAtTarbar;
-(unsigned long)getBottleUnreadCount;
@end

@interface KFViewController : MMWebViewController {
}
-(void)viewWillAppear:(BOOL)view;
-(void)webViewDidFinishLoad:(id)webView;
-(void)ShowFeedback;
-(id)initWithURL:(id)url;
-(void)dealloc;
@end

@interface WCCommentDetailViewControllerFB : MMUIViewController <InputControllerDelegate, BaseEmoticonViewDelegate, UITableViewDelegate, UITableViewDataSource, WCFacadeExt, IMsgExt, MMGrowTextViewDelegate, tableViewDelegate, BaseEmoticonViewDelegate, UIActionSheetDelegate, ILinkEventExt, WCCommentViewDelegate, UIAlertViewDelegate> {
	MMTableView* _tableView;
	NSMutableArray* _contentViews;
	UIView* _likeListView;
	WCHeaderGridView* _headerGridView;
	UIImageView* _inputView;
	EmoticonBoardView* _emoticonBoardView;
	UIButton* _expressionButton;
	MMGrowTextView* _growTextView;
	WCOperateFloatView* _floatOperateView;
	WCInputController* _inputController;
	WCDataItem* _dataItem;
	WCContentItem* _contentItem;
	NSMutableArray* _arrMediaList;
	NSMutableArray* _arrCommentList;
	NSMutableArray* _arrLikeList;
	BOOL _bStranger;
	NSString* _nsStrangerUsrName;
	BOOL _bForbideComment;
	MMURLHandler* _urlHandler;
	BOOL _bIsShow;
	WCUserComment* _refComment;
	WCUserComment* _defaultRefComment;
	float _defaultRefCommentContentOffset;
	BOOL _hasFoundDefaultRefComment;
	NSObject<WCCommentDetailViewControllerFBDelegate>* m_delegate;
	NSString* _copyedText;
	RichTextView* _contentDescView;
	BOOL _bJustShowContent;
	NSString* _nsUsrName;
	int _uiSource;
}
@property(assign, nonatomic) BOOL bJustShowContent;
@property(retain, nonatomic) WCUserComment* defaultRefComment;
@property(retain, nonatomic) WCUserComment* refComment;
@property(assign, nonatomic) NSObject<WCCommentDetailViewControllerFBDelegate>* m_delegate;
@property(assign, nonatomic) BOOL bForbideComment;
@property(assign, nonatomic) BOOL bStranger;
@property(retain, nonatomic) WCDataItem* dataItem;
@property(assign, nonatomic) int uiSource;
@property(retain, nonatomic) NSString* nsUsrName;
@property(retain, nonatomic) NSString* nsStrangerUsrName;
+(id)getReplyNickNameFromComment:(id)comment;
-(void)onNetworkActivityStatusChanged;
-(void)willDisshow;
-(void)willDisappear;
-(void)willShow;
-(void)willAppear;
-(void)adjustTableViewRect;
-(void)updateNetworkStatus;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)onResendBtnClicked:(id)clicked;
-(void)onCommentPhoto:(id)photo;
-(void)onClickCommentBtnOnFloatView;
-(void)onClickContent:(id)content;
-(void)onShowGroup;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onDeletePhoto:(id)photo;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onHeadImageClicked:(id)clicked;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)updateHeaderGridView;
-(id)FormCommentTipsView:(id)view;
-(void)onClickWithBtn;
-(void)initTableView;
-(void)initTableFooterView;
-(int)getInputViewHeight;
-(void)initTableHeaderView;
-(void)initData;
-(void)dealloc;
-(id)init;
-(void)onCommentItemDeleteFinished:(int)finished commentItemID:(id)anId dataItemID:(id)anId3;
-(void)onDataChangedWithAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(void)reloadExpressionButtonImage:(int)image;
-(void)onExpressionButtonClicked:(id)clicked;
-(BOOL)isTouchEnableOnCommentView;
-(void)onCommentViewLongPressed:(id)pressed withText:(id)text withRect:(CGRect)rect;
-(void)onCommentViewClicked:(id)clicked;
-(void)onLinkClicked:(id)clicked backupUrl:(id)url withRect:(CGRect)rect;
-(void)onPhoneClicked:(id)clicked withRect:(CGRect)rect;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)onTextLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onPhoneLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onLinkLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)showMenuItemForText:(id)text withRect:(CGRect)rect isWord:(BOOL)word;
-(void)onFavAdd:(id)add;
-(void)onCopy:(id)copy;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)onMenuControllerWillHide:(id)onMenuController;
-(void)onMenuControllerDidHide:(id)onMenuController;
-(void)onMenuControllerWillShow:(id)onMenuController;
-(void)keyboardWillShow;
-(void)keyboardWillHide;
-(void)MMGrowTextViewBeginEditing:(id)editing;
-(void)MMGrowTextViewHeightDidChanged:(id)mmgrowTextViewHeight;
-(void)updateTableViewHeight;
-(float)getTableViewVisibleHeight;
-(void)didCommitText:(id)text;
-(void)reloadData:(id)data;
-(void)updateInputView;
-(void)keyboardDidHide;
-(void)updateContentOffset;
-(void)initInputController;
-(void)initEmoticonView;
-(void)initInputToolView;
-(void)onSingleTapOnInputView;
-(void)didFinishedLoading:(id)loading;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)resignInput;
-(void)becomeInput;
@end

@interface WCCommentListViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, tableViewDelegate, IMsgExt, WCFacadeExt, WCImageViewDelegate, UIActionSheetDelegate, TextLayoutDelegate, MMRefreshTableFooterDelegate, WCCommentDetailViewControllerFBDelegate> {
	MMTableView* _tableView;
	WCTimeLineFooterView* _footerView;
	NSMutableArray* _arrCommentList;
	NSMutableDictionary* _dicDataItems;
	BOOL _bUnreadOnly;
	BOOL _bHasNullIDs;
	BOOL _bHasMoreItems;
	NSMutableDictionary* _dicCells;
	NSMutableDictionary* _dicCellHeights;
}
@property(assign, nonatomic) BOOL bUnreadOnly;
-(void)onDeleteData;
-(void)onRestartUpload;
-(void)onClearList:(id)list;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)clearList;
-(void)onClickWCImage:(id)image;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)openWCCommentDetail:(id)detail;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)getLoadMoreCell;
-(id)getCellContentViewAtIndexPath:(id)indexPath;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(float)getCellContentViewHeightAtIndexPath:(id)indexPath;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)onLoadMore;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)initTableView;
-(void)initTableFooterView;
-(void)getMoreData;
-(void)getData;
-(void)addWCMessagesWithArray:(id)array;
-(id)getObjIDByWCMessage:(id)message;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface WCListHeaderView : MMUIView <IContactMgrExt, UIActionSheetDelegate, WCFacadeExt> {
	CContact* m_contact;
	BOOL m_isMyWC;
	BOOL m_showSignature;
	CGRect m_bkgRect;
	UILabel* m_nickLabel;
	UILabel* m_signatureLabel;
	MMHeadImageView* m_headImageView;
	UILabel* m_totalCountLabel;
	MMUIViewController* viewController;
	UIImageView* m_headImageBkgView;
	UIImageView* m_bkgMaskView;
	UIImageView* m_backgroundImageView;
	CGRect oBackgroundImageRect;
	float m_fLastY;
	MMDelegateProxy<WCListHeaderViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCListHeaderViewDelegate>* m_delegate;
@property(retain, nonatomic) UIImageView* m_backgroundImageView;
@property(retain, nonatomic) UIImageView* m_bkgMaskView;
@property(retain, nonatomic) UILabel* m_nickLabel;
@property(retain, nonatomic) UIImageView* m_headImageBkgView;
@property(retain, nonatomic) MMHeadImageView* m_headImageView;
@property(assign, nonatomic) MMUIViewController* viewController;
@property(assign, nonatomic) CGRect m_bkgRect;
@property(assign, nonatomic) BOOL m_showSignature;
-(id).cxx_construct;
-(void)scrollViewDidEndScroll:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showChangeBkgOption;
-(void)reloadBackGround;
-(void)onWCBackgroundChanged;
-(void)onWCGroupSetMemberToGroupsReturn:(BOOL)groupsReturn username:(id)username groupIDs:(id)ids;
-(void)showContactInfo;
-(void)onModifyContact:(id)contact;
-(void)dealloc;
-(id)initWithContact:(id)contact bkgRect:(CGRect)rect;
-(void)initView;
-(void)updateframe;
@end

@interface WCCellGroupItem : NSObject {
	int m_type;
	NSMutableArray* m_arrPhotoDatas;
}
@property(retain, nonatomic) NSMutableArray* m_arrPhotoDatas;
@property(assign, nonatomic) int m_type;
-(void)dealloc;
-(id)init;
@end

@interface WCListView : MMUIView <WCCommitViewAnimationDelegate, UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource, WCImageViewDelegate, MMRefreshTableFooterDelegate, WCListViewDelegate, UINavigationControllerDelegate, WCFacadeExt, WCListViewRowViewDelegate, WCListHeaderViewDelegate, WCPuzzleImageViewDelegate, tableViewDelegate, WCIntroViewDelegate, WCCommentDetailViewControllerFBDelegate, FacebookImagePickerControllerDelegate, IUiUtilExt, MMImagePickerManagerDelegate> {
	BOOL m_isMyWC;
	CContact* m_contact;
	float m_statusBarHeight;
	WCListViewController* viewController;
	MMTableView* m_tableView;
	WCTimeLineFooterView* m_footerView;
	WCListHeaderView* m_headerView;
	MMURLHandler* m_urlHandler;
	MMAdaptiveLabel* m_tipsLabel;
	UIView* m_blackView;
	UIImageView* m_animationView;
	BOOL m_bWaitingForAddAnimation;
	int eAnimationStage;
	NSArray* m_arrPhotoDatas;
	NSMutableArray* m_arrDates;
	NSMutableArray* m_arrCitysForDate;
	NSMutableArray* m_arrGroupsForDate;
	NSMutableDictionary* m_cellHeightCache;
	NSMutableDictionary* m_cellViewCache;
	NSMutableArray* m_arrPhotoDataForView;
	NSArray* m_arrUnreadNotify;
	BOOL m_bTapHeaderView;
	WCDataItem* _cacheDateItem;
	UIView* _animationView;
	IntroView* m_introView;
}
@property(retain, nonatomic) NSMutableArray* m_arrPhotoDataForView;
@property(retain, nonatomic) NSMutableDictionary* m_cellViewCache;
@property(retain, nonatomic) NSMutableDictionary* m_cellHeightCache;
@property(retain, nonatomic) NSMutableArray* m_arrGroupsForDate;
@property(retain, nonatomic) NSMutableArray* m_arrCitysForDate;
@property(retain, nonatomic) NSMutableArray* m_arrDates;
@property(assign, nonatomic) WCListViewController* viewController;
-(void)handleClickImageView:(id)view;
-(void)handleFeedView:(id)view;
-(void)handleVideoView:(id)view;
-(void)handleMusicView:(id)view;
-(void)handleTextView:(id)view;
-(void)showDetailViewController:(id)controller;
-(void)jumpToContentViewController:(id)contentViewController;
-(void)showContactInfo;
-(void)onClickWCPuzzleImage:(id)image;
-(void)onClickWCImage:(id)image;
-(void)reloadBackGround;
-(id)genImageView:(id)view imageType:(int)type;
-(void)refreshFooterEnd:(unsigned long)end;
-(void)refreshHeaderEnd:(unsigned long)end;
-(void)onNoMoreDataWithRet:(int)ret;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)onTopBarFrameChanged;
-(void)showDetailView:(id)view;
-(void)onDeleteData;
-(void)onRestartUpload;
-(void)showUploadOption;
-(void)showPhotoAlert;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(id)getViewController;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)fbImagePickerController:(id)controller didFinishPickingImages:(id)images;
-(void)OnAddPhoto:(id)photo;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)doAnimationAfterMattedTwo;
-(void)doAnimationAfterMatted;
-(void)showFacebookAlbums;
-(void)showImagePicker:(int)picker;
-(int)indexOfPageForMediaItem:(id)mediaItem;
-(id)getImageViewByDataItem:(id)item;
-(CGRect)getAnimationRectInWindow;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)idForIndexPath:(id)indexPath;
-(void)showNoContentTips:(BOOL)tips;
-(void)updateRowsData;
-(void)shouldReloadData:(id)data;
-(void)onDataChanged:(id)changed;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)doAnimationAfterAddedTwo;
-(void)animationDidStop;
-(void)doAnimationOnPhotoAdded;
-(void)didReceiveMemoryWarning;
-(id)initWithData:(id)data frame:(CGRect)frame contact:(id)contact;
-(void)initTableView;
-(void)initTipsLabel;
-(void)initFooterView;
-(void)initHeaderView;
-(void)dealloc;
-(void)onCloseIntroView;
-(void)onIKnowItBtnClick;
-(void)touchesCancelled_TableView:(id)view withEvent:(id)event;
-(void)touchesEnded_TableView:(id)view withEvent:(id)event;
-(void)touchesMoved_TableView:(id)view withEvent:(id)event;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)animationDidEndRemainView:(id)animation hintDataItem:(id)item;
-(void)scrollTableViewToShowDataItem:(id)showDataItem;
-(void)showAnimationToImageView;
-(id)FindTheRowViewContainDataItem:(id)item;
-(void)clearAnimationProperties;
@end

@interface WCListViewController : MMUIViewController <UIActionSheetDelegate, UINavigationControllerDelegate, WCFacadeExt> {
	BOOL m_isMyWC;
	NSMutableArray* m_arrPhotoDatas;
	CContact* m_contact;
	BOOL m_isNoMoreData;
	MMDelegateProxy<WCListViewDelegate>* m_view;
}
@property(retain, nonatomic) CContact* m_contact;
-(void)onNetworkActivityStatusChanged;
-(void)willDisshow;
-(void)willDisappear;
-(void)willShow;
-(void)willAppear;
-(void)refreshFooter;
-(void)refreshHeader;
-(void)forceReload;
-(void)onHomepageUpdate:(int)update withAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(void)reloadData;
-(void)initData:(BOOL)data;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)view;
-(void)initBarItem;
-(void)onDissmiss;
-(void)onOperate:(id)operate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)reloadStyle;
-(void)updateNetworkStatus;
@end

@interface WCListViewRowView : MMUIView <TextLayoutDelegate, WCListViewContentRowViewDelegate> {
	NSMutableArray* m_rowDatas;
	NSString* m_nsCity;
	NSString* m_nsDescription;
	BOOL m_bShowDateLabel;
	BOOL m_bShowLock;
	BOOL m_bIsLastOneInSection;
	int m_type;
	UIView* m_timeLable;
	UIView* m_imageGridView;
	UIView* m_gridViewBkg;
	UILabel* m_withLabel;
	UIView* m_signView;
	WCListViewBaseContentRowView* m_contentView;
	MMDelegateProxy<WCListViewRowViewDelegate>* m_delegate;
	UINavigationController* m_navigationController;
}
@property(retain, nonatomic) UINavigationController* m_navigationController;
@property(assign, nonatomic) MMDelegateProxy<WCListViewRowViewDelegate>* m_delegate;
@property(retain, nonatomic) UIView* m_imageGridView;
@property(retain, nonatomic) UIView* m_timeLable;
@property(assign, nonatomic) BOOL m_bIsLastOneInSection;
@property(assign, nonatomic) int m_type;
@property(assign, nonatomic) BOOL m_bShowLock;
@property(assign, nonatomic) BOOL m_bShowDateLabel;
@property(retain, nonatomic) NSString* m_nsDescription;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSMutableArray* m_rowDatas;
+(float)getLayoutHeightForRowData:(id)rowData ofType:(int)type isLastOneInSection:(BOOL)section isFirstOneInsection:(BOOL)insection;
-(void)onClickVideoContentRowView:(id)view;
-(void)onClickFeedContentRowView:(id)view;
-(void)onClickMusicContentRowView:(id)view;
-(void)onClickTextContentRowView:(id)view;
-(void)setRowDatas:(id)datas andDate:(id)date;
-(void)initVideoView;
-(void)initMusicView;
-(void)initFeedView;
-(void)initTextView;
-(void)handleTextView;
-(void)initImageView;
-(void)handleClickImageView;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(void)initDateTimeLabel:(id)label;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WCCustomizeViewController : MMUIViewController <UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource, MMImagePickerManagerDelegate> {
	NSMutableArray* m_rowsData;
	MMTableView* m_tableView;
	NSString* m_username;
	BOOL m_isUploading;
}
@property(retain, nonatomic) NSString* m_username;
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_rowsData;
-(id)cropAndResize:(id)resize realCropRect:(CGRect)rect;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)showImagePicker:(int)picker;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(id)getNavigationController;
-(id)getViewController;
-(void)onFinishedSelectImage:(id)image;
-(void)popToMessageSessionView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidLoad;
-(void)reloadRowData;
-(void)dealloc;
@end

@interface WCSetBackgroundViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, WCFacadeExt, WCImageViewDelegate> {
	MMTableView* m_tableView;
	WCBGStorage* m_backgroundData;
	NSMutableDictionary* m_cache;
}
-(void)onClickWCImage:(id)image;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)idForIndexPath:(id)indexPath;
-(void)onBGStorageUpdated;
-(void)viewDidLoad;
-(void)dealloc;
@end

@interface WCTimeLineCellView : MMUIView <WCImageViewDelegate, IContactMgrExt, ContactsPanelViewDelegate, UIActionSheetDelegate, TextLayoutDelegate, ILinkEventExt, UIAlertViewDelegate> {
	WCDataItem* m_dataItem;
	unsigned long m_row;
	unsigned long m_section;
	UIView* m_headImage;
	UrlLabel* m_nickLabel;
	UIView* m_timeView;
	UINavigationController* navigationController;
	RichTextView* m_contentDescView;
	UIView* m_withLabel;
	UIView* m_timeLabel;
	UIView* m_sourceLabel;
	UIView* m_privacyButton;
	InteractionLabel* m_deleteLabel;
	UIView* m_operateBtn;
	UIView* m_resendBtn;
	UIView* m_actionLabel;
	UIView* oContainer;
	UIView* m_mediaView;
	BOOL m_showDetail;
	InteractionLabel* m_showFullTextView;
	NSString* m_copyedText;
	MMDelegateProxy<ILinkEventExt>* m_urlLabelDelegate;
	MMDelegateProxy<WCTimeLineCellViewDelegate>* m_WCImageDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<ILinkEventExt>* m_urlLabelDelegate;
@property(retain, nonatomic) NSString* m_copyedText;
@property(assign, nonatomic) UINavigationController* navigationController;
@property(assign, nonatomic) MMDelegateProxy<WCTimeLineCellViewDelegate>* m_WCImageDelegate;
@property(assign, nonatomic) unsigned long m_section;
@property(assign, nonatomic) unsigned long m_row;
@property(readonly, assign, nonatomic) InteractionLabel* m_showFullTextView;
@property(readonly, assign, nonatomic) BOOL m_showDetail;
@property(retain, nonatomic) WCDataItem* m_dataItem;
+(float)heightForDataItem:(id)dataItem;
+(id)getWithTextForDataItem:(id)dataItem;
+(id)getWithNickNameForPhotoData:(id)photoData;
+(id)getNickNameForPhotoData:(id)photoData;
+(float)heightForMedia:(id)media;
-(void)onReSendPhoto:(id)photo;
-(void)onActionJump:(id)jump;
-(void)onDeletePhoto:(id)photo;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onCommentPhoto:(id)photo;
-(void)onClickWithBtn;
-(void)didClickImageAtIndex:(unsigned long)index withKey:(id)key;
-(void)editBlackList;
-(void)showContactInfo;
-(void)showWCForUser:(id)user;
-(void)onTextLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onPhoneLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onLinkLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)showMenuItemForText:(id)text withRect:(CGRect)rect;
-(void)onExpose:(id)expose;
-(void)onFavAdd:(id)add;
-(void)onCopy:(id)copy;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)onLinkClicked:(id)clicked backupUrl:(id)url withRect:(CGRect)rect;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)onClickWCImage:(id)image;
-(void)onModifyContact:(id)contact;
-(void)dealloc;
-(id)initWitDataItem:(id)item urlLabelDelegate:(id)delegate;
-(void)onMenuControllerWillHide:(id)onMenuController;
-(void)initView;
-(id)getWordingkey;
-(id)genContentDescButton:(id)button;
-(void)onShowFullText;
-(void)onShowGroup;
-(void)onStatusChange;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(void)layoutChangesWithMediaSize:(CGSize)mediaSize;
-(CGSize)getStringSizeWithString:(id)string;
-(id)getContactDisplayName;
-(id)addViewForMedia:(id)media toView:(id)view inPoint:(CGPoint)point urlLabelDelegate:(id)delegate;
@end

@interface WCTimeLineCommentCellView : MMUIView <UIActionSheetDelegate, WCCommentViewFBDelegate> {
	int _iSection;
	WCDataItem* _mainDataItem;
	UINavigationController* _navigationController;
	MMDelegateProxy<WCTimeLineCommentCellViewDelegate>* m_delegate;
	MMDelegateProxy<ILinkEventExt>* m_urlDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<ILinkEventExt>* m_urlDelegate;
@property(assign, nonatomic) MMDelegateProxy<WCTimeLineCommentCellViewDelegate>* m_delegate;
@property(assign, nonatomic) UINavigationController* navigationController;
@property(retain, nonatomic) WCDataItem* mainDataItem;
@property(assign, nonatomic) int iSection;
+(float)getHeightForDataItem:(id)dataItem;
+(id)getNickNameForDataItem:(id)dataItem;
-(void)onCommentViewClicked:(id)clicked;
-(void)dealloc;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showCommentOption:(id)option;
-(void)initView:(id)view urlDelegate:(id)delegate;
@end

@interface WCTimeLineFooterView : MMRefreshTableFooterView {
	UIActivityIndicatorView* m_activityIndicatorView;
	UILabel* m_label;
	unsigned long m_lineViewWidth;
}
@property(assign, nonatomic) unsigned long m_lineViewWidth;
@property(retain, nonatomic) UILabel* m_label;
@property(retain, nonatomic) UIActivityIndicatorView* m_activityIndicatorView;
-(void)onStateOfNoData:(id)noData;
-(void)onStateOfNoMoreData:(id)noMoreData;
-(void)onStateOfLoading;
-(void)onStateOfNormal;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WCTimeLineHeaderView : EGORefreshTableHeaderView {
	MMActivityIndicator* m_reflashImageView;
	UIImageView* m_tipBkg;
}
-(void)egoRefreshScrollViewDidScroll:(id)egoRefreshScrollView;
-(void)onStateOfLoading;
-(void)onStateOfNormal;
-(void)onStateOfPulling;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WCCommentCountItem : NSObject {
	int m_likeCount;
	int m_commentCount;
}
@property(assign, nonatomic) int m_commentCount;
@property(assign, nonatomic) int m_likeCount;
-(id)init;
@end

@interface WCTimeLineViewController : MMUIViewController <tableViewDelegate, BaseEmoticonViewDelegate, WCCommitViewAnimationDelegate, UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, WCFacadeExt, WCTimeLineCellViewDelegate, EGORefreshTableHeaderDelegate, MMRefreshTableFooterDelegate, InputControllerDelegate, scrollViewDelegate, UIGestureRecognizerDelegate, WCListHeaderViewDelegate, WCIntroViewDelegate, WCCommentStrangerViewControllerDelegate, WCCommentDetailViewControllerFBDelegate, WCTimeLineCommentCellViewDelegate, ILinkEventExt, FacebookImagePickerControllerDelegate, WCSetPermissionsViewControllerDelegate, IMMFacebookMgrExt, MMImagePickerManagerDelegate, WCPlainTextTipFullScreenViewDelegate, WXGestureDelegate> {
	NSMutableDictionary* m_cellSection;
	NSMutableDictionary* m_cellCache;
	NSMutableDictionary* m_commentCache;
	NSMutableDictionary* m_cellHeightCache;
	NSMutableDictionary* m_commentHeightCache;
	NSMutableDictionary* m_commentCountCache;
	map<int, TimeLineSectionType, std::less<int>, std::allocator<std::pair<const int, TimeLineSectionType> > > m_sectionIndexToType;
	MMTableView* m_tableView;
	WCTimeLineHeaderView* m_headRefreshView;
	WCTimeLineFooterView* m_footerView;
	WCListHeaderView* m_headerView;
	IntroView* m_introView;
	UIButton* m_messageTipView;
	MMHeadImageView* m_messageHeaderView;
	UIView* m_blackView;
	UIImageView* m_animationView;
	int eAnimationStage;
	WCInputController* _inputController;
	WCOperateFloatView* m_floatOperateView;
	WCPlainTextTipFullScreenView* m_plainTextFullScreenView;
	BOOL m_isReflashingHead;
	BOOL m_isNoMoreData;
	BOOL m_isDelayStopFooterLoading;
	BOOL m_bTapHeaderView;
	BOOL m_bLongPressRightButton;
	BOOL m_hasSpeedyLoadView;
	BOOL m_shouldReloadData;
	UIImageView* _inputView;
	EmoticonBoardView* _emoticonBoardView;
	UIButton* _expressionButton;
	WCDataItem* _inputDataItem;
	WCUserComment* _inputRefComment;
	int scrollCount;
	float m_fLastY;
	MMURLHandler* m_urlHandler;
	WCDataItem* _cacheDateItem;
	UIView* _animationView;
	NSArray* m_arrUploadFailItems;
	NSString* m_userName;
	MMDelegateProxy<WCTimeLineViewControllerDelegate>* m_delegate;
	WXGesture* m_gesture;
	BOOL m_hasBeginTimeline;
}
@property(assign, nonatomic) MMDelegateProxy<WCTimeLineViewControllerDelegate>* m_delegate;
-(id).cxx_construct;
-(void).cxx_destruct;
-(BOOL)shouldInteractivePop;
-(void)updateNetworkStatus;
-(void)onLinkClicked:(id)clicked backupUrl:(id)url withRect:(CGRect)rect;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)handleUrl:(id)url backupUrl:(id)url2;
-(void)jumpToUserProfile:(id)userProfile Displayname:(id)displayname Scence:(unsigned long)scence;
-(id)getAppIdFromUrl:(id)url;
-(void)onBindFacebookFinish:(unsigned long)finish;
-(void)gestureWillEndTransition:(id)gesture isCanceld:(BOOL)canceld;
-(void)onDismissViewController:(id)controller userName:(id)name;
-(void)onReplyComment:(id)comment ofDataItem:(id)dataItem ofTouchedView:(id)touchedView;
-(void)onEditBlackList:(id)list;
-(id)getView;
-(void)onShowDetailViewForDataItem:(id)dataItem;
-(void)onUpdateDataItem:(id)item oldHeight:(float)height newHeight:(float)height3;
-(void)onDeleteDataItem:(id)item;
-(void)onCommentDataItem:(id)item point:(CGPoint)point;
-(void)onIKnowItBtnClicked;
-(void)onClickCommentBtnOnFloatView;
-(void)showComment:(id)comment refComment:(id)comment2 touchedView:(id)view;
-(void)showContactInfo;
-(void)onReveiceWCMessage:(id)message;
-(void)onMessageUnReadCountChanged;
-(void)checkNewMessage;
-(BOOL)hasUnReadMessage;
-(void)shouldUpdateMessageButton:(id)button;
-(void)resetHeaderView;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)showUploadOption;
-(void)showPhotoAlert;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(id)getViewController;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)fbImagePickerController:(id)controller didFinishPickingImages:(id)images;
-(void)doAnimationAfterAddedTwo;
-(void)animationDidStop;
-(void)doAnimationOnPhotoAdded;
-(CGRect)getAnimationRectInWindow;
-(void)editBlackList;
-(void)showFacebookAlbums;
-(void)showImagePicker:(int)picker;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)hideMenu;
-(BOOL)egoRefreshTableHeaderDataSourceIsLoading:(id)loading;
-(void)egoRefreshTableHeaderDidTriggerRefresh:(id)egoRefreshTableHeader;
-(void)stopRefreshHeaderView;
-(void)refreshHead;
-(void)onNoMoreTimelineData;
-(void)onDataChangedWithAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(void)onLoadMore;
-(void)initData;
-(void)onMenuControllerWillHide:(id)onMenuController;
-(void)onMenuControllerDidHide:(id)onMenuController;
-(void)onMenuControllerWillShow:(id)onMenuController;
-(void)touchesCancelled_TableView:(id)view withEvent:(id)event;
-(void)touchesEnded_TableView:(id)view withEvent:(id)event;
-(void)touchesMoved_TableView:(id)view withEvent:(id)event;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)showDetailView:(id)view;
-(void)showDetailViewForDataItem:(id)dataItem;
-(void)onDeleteData;
-(void)onRestartUpload;
-(void)showMessageList;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)genRedHeartCell:(id)cell;
-(void)genUploadFailCell:(id)cell indexPath:(id)path;
-(void)genNormalCell:(id)cell indexPath:(id)path;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)calcDataItemIndex:(int)index;
-(int)getFirstNormalItemIndex;
-(void)willDisshow;
-(void)onNetworkActivityStatusChanged;
-(void)willShow;
-(void)willDisappear;
-(void)didAppear;
-(void)initGestureRecognizer;
-(void)willAppear;
-(void)viewDidBePushed:(BOOL)view;
-(id)getNavigationRightButton:(id)button;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)panned:(id)panned;
-(void)viewDidLoad;
-(void)resetStatus;
-(void)onTimeLineViewReturn;
-(void)handleLongPressEx:(id)ex;
-(void)openWriteTextViewController;
-(void)OnFinishComment:(BOOL)comment;
-(void)resetRightButtonStatus;
-(void)reloadTableView;
-(void)didDisshow;
-(void)cacheInputText;
-(void)clearWCCache;
-(void)clearAllWCCache;
-(BOOL)shouldRemoveCacheCellEx2:(id)a2;
-(BOOL)shouldRemoveCacheCellEx:(id)ex;
-(BOOL)shouldRemoveCacheCell:(id)cell;
-(void)viewDidAppear:(BOOL)view;
-(id)init;
-(void)didCommitText:(id)text;
-(void)onHideKeyboard;
-(void)MMGrowTextViewBeginEditing:(id)editing;
-(void)MMGrowTextViewHeightDidChanged:(id)mmgrowTextViewHeight;
-(void)keyboardWillHide;
-(void)keyboardDidHide;
-(void)keyboardWillShow;
-(void)updateContentOffset;
-(void)reloadExpressionButtonImage:(int)image;
-(void)onExpressionButtonClicked:(id)clicked;
-(void)ensureInitInputView;
-(void)initEmoticonView;
-(void)initInputToolView;
-(void)onCloseIntroView;
-(void)onIKnowItBtnClick;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)commitAnimationWillStart:(id)commitAnimation;
-(void)animationDidEndRemainView:(id)animation hintDataItem:(id)item;
-(void)scrollTableViewToShowDataItem:(id)showDataItem;
-(void)showAnimationToImageView;
-(void)setAnimatedImageHidden:(BOOL)hidden;
-(void)clearAnimationPropertiesProtection;
-(void)clearAnimationProperties;
@end

@interface WCCommentView : MMUIView <ILinkEventExt> {
	MMHeadImageView* _headImageView;
	MMUserNameLabel* _userNameLabel;
	UIImageView* _likeImageView;
	RichTextView* _contentView;
	BOOL _isLongPressHandled;
	MMDelegateProxy<WCCommentViewDelegate>* _commentDelegate;
	UILabel* _timeLabel;
	UrlLabel* _nameLabel;
	MMDelegateProxy<ILinkEventExt>* _urlLabelDelegate;
	WCUserComment* _commentUserInfo;
	float _fMaxWidth;
	UINavigationController* navigationController;
}
@property(assign, nonatomic) UINavigationController* navigationController;
@property(assign, nonatomic) MMDelegateProxy<WCCommentViewDelegate>* commentDelegate;
@property(assign, nonatomic) MMDelegateProxy<ILinkEventExt>* urlLabelDelegate;
@property(assign, nonatomic) float fMaxWidth;
+(id)genShowContentUserStr:(id)str nickname:(id)nickname;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)delayedTouchesEnded:(id)ended;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)resetNormal;
-(void)onViewLongPressed;
-(void)onPhoneClicked:(id)clicked withRect:(CGRect)rect;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)onPhoneLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onLinkLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)showMenuItemForText:(id)text withRect:(CGRect)rect;
-(BOOL)isTouchEnable;
-(BOOL)canBecomeFirstResponder;
-(void)onMenuControllerWillHide:(id)onMenuController;
-(void)setHighlightedColor;
-(void)setNormalColor;
-(void)showWC;
-(float)getVisibleHeight;
-(void)layoutSubviews;
-(void)createSubviews;
-(void)initContentView;
-(id)genContentStrPrefix:(id)prefix;
-(id)genContentUserStr:(id)str nickname:(id)nickname;
-(void)dealloc;
-(id)initWithCommentUserInfo:(id)commentUserInfo;
@end

@interface WCCommentViewFB : MMUIView <ILinkEventExt> {
	MMUserNameLabel* _userNameLabel;
	UIImageView* _likeImageView;
	RichTextView* _contentView;
	MMDelegateProxy<ILinkEventExt>* _urlLabelDelegate;
	NSString* _copyedText;
	BOOL _isLongPressHandled;
	MMDelegateProxy<WCCommentViewFBDelegate>* _commentDelegate;
	WCUserComment* _commentUserInfo;
	float _fMaxWidth;
	UINavigationController* navigationController;
}
@property(assign, nonatomic) MMDelegateProxy<WCCommentViewFBDelegate>* commentDelegate;
@property(assign, nonatomic) MMDelegateProxy<ILinkEventExt>* urlLabelDelegate;
@property(assign, nonatomic) UINavigationController* navigationController;
@property(assign, nonatomic) float fMaxWidth;
+(float)getVisibleHeightWithCommentInfo:(id)commentInfo withMaxWidth:(float)maxWidth;
+(id)genShowContentUserStr:(id)str nickname:(id)nickname;
+(id)genContentStrPrefix:(id)prefix;
+(id)genContentStr:(id)str;
+(id)genContentUserStr:(id)str nickname:(id)nickname;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)delayedTouchesEnded:(id)ended;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)resetNormal;
-(void)onViewLongPressed;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)onPhoneLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onLinkLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)showMenuItemForText:(id)text withRect:(CGRect)rect;
-(void)onCopy:(id)copy;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)onMenuControllerWillHide:(id)onMenuController;
-(void)setHighlightedColor;
-(void)setNormalColor;
-(void)showWC;
-(id)getCommandString;
-(float)getVisibleHeight;
-(void)layoutSubviews;
-(void)createSubviews;
-(void)dealloc;
-(id)initWithCommentUserInfo:(id)commentUserInfo;
@end

@interface WCSelectContactViewController : MMSearchBarDisplayController <UITableViewDelegate, UITableViewDataSource, IMsgExt, WCFacadeExt, UIAlertViewDelegate> {
	MMTableView* m_tableView;
	NSMutableSet* m_setSelectedUsrName;
	NSMutableDictionary* m_dicLocalContactList;
	NSMutableArray* m_arrLocalContactList;
	NSMutableArray* m_arrRecommendContactList;
	NSMutableArray* m_arrSection;
	MMDelegateProxy<WCSelectContactDelegate>* m_delSelect;
	NSMutableArray* m_arrFilterList;
	BOOL m_hasSelectCountLimit;
	unsigned long m_selectCountLimit;
}
@property(assign, nonatomic) unsigned long m_selectCountLimit;
@property(assign, nonatomic) BOOL m_hasSelectCountLimit;
@property(retain, nonatomic) NSMutableArray* m_arrFilterList;
@property(assign, nonatomic) MMDelegateProxy<WCSelectContactDelegate>* m_delSelect;
@property(retain, nonatomic) NSMutableArray* m_arrSection;
@property(retain, nonatomic) NSMutableArray* m_arrRecommendContactList;
@property(retain, nonatomic) NSMutableArray* m_arrLocalContactList;
@property(retain, nonatomic) NSMutableDictionary* m_dicLocalContactList;
@property(retain, nonatomic) NSMutableSet* m_setSelectedUsrName;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)doSearch:(id)search;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell tableCell:(id)cell2 section:(unsigned)section row:(unsigned)row;
-(id)GetContactList:(unsigned long)list;
-(void)OnReturn;
-(void)onDone:(id)done;
-(void)SetSelectedUsrName:(id)name;
-(void)initSearchBar;
-(void)initView;
-(void)updateRightBarButton;
-(void)initData;
-(BOOL)IsInSelecteList:(id)selecteList;
-(BOOL)IsInRecommendList:(id)recommendList;
-(id)parseContactKey:(id)key;
-(void)processContact:(id)contact;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface SelectAttachmentView : MMUIView <UIScrollViewDelegate, scrollViewDelegate> {
	id<SelectAttachmentViewDelegate> _delegate;
	id<SelectAttachmentViewDataSource> _dataSource;
	MMScrollView* _scrollView;
	UIPageControl* _pageController;
	UIImageView* m_tipsView;
	unsigned long _iCurSelection;
	BOOL bPageControlUsed;
	unsigned long iCount;
	unsigned long iRow;
	unsigned long iCol;
	unsigned long iPage;
	unsigned long iTouchBeganTime;
	BOOL isLayout;
	BOOL bIsLongPressedCalled;
	NSMutableArray* m_arrAttachmentButton;
}
@property(assign, nonatomic) id<SelectAttachmentViewDataSource> dataSource;
@property(assign, nonatomic) id<SelectAttachmentViewDelegate> delegate;
-(void)setVoiceOverAccessibilityElements:(BOOL)elements;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(id)appIDAtIndex:(unsigned long)index;
-(void)touchesCancelled_ScrollView:(id)view withEvent:(id)event;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)touchesMoved_ScrollView:(id)view withEvent:(id)event;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)onLongPress:(id)press;
-(void)onPageControllerChangePage:(id)page;
-(void)resetView;
-(void)layoutSubviews;
-(CGRect)calculateEmoticonViewFrameAtIndex:(unsigned long)index;
-(unsigned long)calculateEmoticonOrder:(CGPoint)order;
-(BOOL)pointInScrollView:(CGPoint)scrollView;
-(void)dealloc;
-(id)init;
@end

@interface WCCommitViewController : MMUIViewController <InputControllerDelegate, BaseEmoticonViewDelegate, UIScrollViewDelegate, scrollViewDelegate, UITextViewDelegate, SelectorControllerDelegate, ContactsSelectorControllerDelegate, UIAlertViewDelegate, IMsgExt, ILocationMgrExt, WCFacadeExt, MMTwitterAuthExt, IMMFacebookMgrExt, IFacebookAuthExt, IMMGrowTextViewExt> {
	int _geotag;
	XXStruct_zYrK5D _coordinate;
	NSString* _city;
	int _iLocationTag;
	MMScrollView* _scrollView;
	MMGrowTextView* _textView;
	UIImageView* _textViewBkgView;
	WCSelectorView* _withImageView;
	WCSelectorView* _withContactView;
	UIButton* _locationButton;
	UIButton* _microBlogButton;
	UIButton* _qzoneButton;
	UIButton* _facebookButton;
	UIButton* _twitterButton;
	UILabel* _withYouLabel;
	UIImageView* _withYouLogo;
	RoundTableViewCell* _privacyCell;
	WCEditMemberPannel* _editMemberPannel;
	ImageSelectorController* _imageSelectorController;
	ContactsSelectorController* _contactsSelectorController;
	WCInputController* _inputController;
	BOOL _bHasInput;
	UIImageView* _inputView;
	EmoticonBoardView* _emoticonBoardView;
	UIButton* _expressionButton;
	unsigned long _iInputSection;
	id<WCCommitViewAnimationDelegate> _delegate;
	WCDataItem* _cacheDateItem;
	MMLoadingView* _loadingView;
	NSTimer* _fireTimer;
	BOOL _bNeedAnimation;
	BOOL _bShowLocation;
	unsigned _singlePasteTextMaxLength;
}
@property(assign, nonatomic) BOOL bShowLocation;
@property(assign, nonatomic) BOOL bNeedAnimation;
@property(assign, nonatomic) id<WCCommitViewAnimationDelegate> delegate;
-(id).cxx_construct;
-(void)dealloc;
-(BOOL)couldSelectContacts;
-(void)hideInputController;
-(BOOL)showAddView;
-(void)updateSelectorView;
-(void)onWCPostPrivacyChanged;
-(void)facebookCheckAccessTokenValidFinished:(BOOL)finished;
-(void)fbDidNotLogin;
-(void)fbDidLogin;
-(void)twitterCheckAccessTokenValidFinished:(int)finished;
-(void)twitterAuthFinished:(int)finished;
-(void)twitterWillStartOpenSafari;
-(void)OnDone;
-(void)OnReturn;
-(void)OnFacebookBinded;
-(void)onLocationBtnClick;
-(void)onTwitterClicked:(id)clicked;
-(void)onFacebookClicked:(id)clicked;
-(void)onPrivacyCellClicked;
-(void)onQZoneClicked:(id)clicked;
-(void)onMicroBlogClicked:(id)clicked;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)bindFacebook;
-(void)bindQQ;
-(void)stopUpdateLocation;
-(void)startUpdateLocation;
-(void)initLocation;
-(void)onGPSAccurateLocationChanged:(id)changed withTag:(int)tag;
-(void)onDidFindAddress:(id)on forTag:(int)tag;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)showPrivacyAlertView;
-(void)viewDidLoad;
-(void)shareOptionsCheck;
-(void)initView;
-(void)layoutSubviews;
-(void)createSubviews;
-(void)saveShareOptions;
-(void)restoreLastShareOptions;
-(id)getViewController;
-(id)initWithImages:(id)images contacts:(id)contacts;
-(void)commonInit;
-(void)reloadExpressionButtonImage:(int)image;
-(void)onExpressionButtonClicked:(id)clicked;
-(void)keyboardDidHide;
-(void)textViewTextDidChange;
-(void)keyboardWillShow;
-(void)MMGrowTextViewBeginEditing:(id)editing;
-(void)MMGrowTextViewHeightDidChanged:(id)mmgrowTextViewHeight;
-(void)didCommitText:(id)text;
-(void)resignInput;
-(void)becomeInput;
-(void)updateContentOffset;
-(void)initInputController;
-(void)initEmoticonView;
-(void)initInputToolView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)onTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)beginAnimationStepTwo;
-(void)beginAnimationStepOne;
-(void)onLoadingShowOK:(id)ok;
-(void)showLoadingView;
@end

@interface MMImage : UIImage {
	int _mattID;
	NSString* _dataPath;
	int _imageFrom;
	NSURL* _referenceURL;
}
@property(retain, nonatomic) NSURL* referenceURL;
@property(assign, nonatomic) int imageFrom;
@property(retain, nonatomic) NSString* dataPath;
@property(assign, nonatomic) int mattID;
-(id)initWithImage:(id)image;
-(void)dealloc;
-(id)init;
-(void)commonInit;
@end

@interface AttachementObjectItem : NSObject {
	SEL _selAction;
	UIImage* _oImage;
	NSString* _nsTitle;
	NSObject* _object;
	BOOL _isNew;
}
@property(assign, nonatomic) BOOL isNew;
@property(retain, nonatomic) NSObject* object;
@property(retain, nonatomic) NSString* nsTitle;
@property(retain, nonatomic) UIImage* oImage;
@property(assign, nonatomic) SEL selAction;
-(void)dealloc;
@end

@interface AttachmentButton : MMTransparentButton {
}
-(CGRect)imageRectForContentRect:(CGRect)contentRect;
@end

@interface SelectAttachmentViewController : MMUIViewController <SelectAttachmentViewDelegate, SelectAttachmentViewDataSource, MMTransparentButtonDelegate, IAppDataExt> {
	int _iCurSelection;
	id<SelectAttachmentViewControllerDelegate> m_delegate;
	NSArray* m_rcmApps;
	BOOL _allowVideoVoip;
	BOOL _allowVoiceVoip;
	BOOL _allowVoiceInput;
	BOOL _bAllocCamera;
	BOOL _allowWxTalk;
	NSMutableArray* _arrAttachementObjectItems;
}
@property(assign, nonatomic) BOOL allowWxTalk;
@property(assign, nonatomic) BOOL allowVoiceInput;
@property(assign, nonatomic) BOOL allowVoiceVoip;
@property(assign, nonatomic) BOOL allowVideoVoip;
@property(retain, nonatomic) NSArray* m_rcmApps;
@property(assign, nonatomic) id<SelectAttachmentViewControllerDelegate> m_delegate;
-(void)setSelectAttachmentViewAccessibility:(BOOL)accessibility;
-(void)adjustViewAndNavBarRect;
-(void)onTopBarFrameChanged;
-(void)OnAppSettingChanged;
-(void)OnNewAppStatusChanged;
-(void)OnAppIconChanged:(id)changed;
-(void)OnAppRegisterInfoChanged;
-(void)MMTransparentButton_touchesEnded:(id)ended withEvent:(id)event;
-(void)MMTransparentButton_touchesBegan:(id)began withEvent:(id)event;
-(id)descriptionForAttachmentAtIndex:(unsigned long)index;
-(id)viewForAttachmentAtIndex:(unsigned long)index;
-(void)OnAttachmentClicked:(id)clicked;
-(unsigned long)numberOfCols;
-(unsigned long)numberOfRows;
-(unsigned long)numberOfAttachment;
-(id)getTextAtIndex:(unsigned long)index;
-(id)getImageAtIndex:(unsigned long)index;
-(id)appIDAtIndex:(unsigned long)index;
-(void)viewDidLoad;
-(void)updateView;
-(void)dealloc;
-(id)init;
-(void)initObjectItem;
-(void)initData;
@end

@interface ForwardMessageLogicController : MMObject <SessionSelectControllerDelegate, ForwardConfirmViewDelegate, UIAlertViewDelegate> {
	id<ForwardMessageLogicDelegate> m_delegate;
	CMessageWrap* m_messageWrap;
	NSMutableArray* m_msgList;
	CContact* m_toContact;
	int m_forwardScene;
	ForwardConfirmView* m_confirmView;
	MMLoadingView* m_loadingView;
}
@property(assign, nonatomic) int forwardScene;
@property(retain, nonatomic) CContact* toContact;
@property(retain, nonatomic) CMessageWrap* messageWrap;
@property(assign, nonatomic) id<ForwardMessageLogicDelegate> delegate;
-(void)onCancel;
-(void)onSendNeedSrc:(BOOL)src;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)showTips;
-(void)showContactSelectViewController;
-(void)forwardMsgList:(id)list;
-(void)forwardMessage:(id)message;
-(void)dealloc;
-(id)init;
@end

@interface AppDetailViewController : MMUIViewController <IMsgExt, UIAlertViewDelegate, UIActionSheetDelegate> {
	NSString* m_nsUsrName;
	CMessageWrap* m_wrapMsg;
	BOOL m_bDownloading;
	BOOL m_bRegister;
	MMProgressView* m_viewProgress;
	UILabel* m_labProgress;
	UIButton* m_btnCancelDownload;
	UIButton* m_btnDownload;
	UILabel* m_labCannotOpen;
	UIButton* m_btnOpenByApp;
	MMDelegateProxy<AppDetailDelegate>* m_delegate;
	BOOL m_bPreview;
	unsigned long m_uiPreviewType;
	UIDocumentInteractionController* m_vcDocument;
	BOOL m_bViewDidAppear;
	BOOL m_bOpenMode;
	BOOL m_bFileExpired;
	MMMPMoviePlayerController* _moviePlayerController;
}
@property(assign, nonatomic) BOOL m_bOpenMode;
@property(assign, nonatomic) MMDelegateProxy<AppDetailDelegate>* m_delegate;
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnMsgDownloadAppAttachExpiredFail:(id)fail MsgWrap:(id)wrap;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(id)GetShowStringBySize:(unsigned long)size;
-(void)SetProgress:(unsigned long)progress;
-(void)ShowProgressView;
-(void)ShowDownloadBtn;
-(void)StopDownload;
-(void)StartDownload;
-(void)tryRegister;
-(void)OnReturn;
-(void)OnOperate;
-(void)InitDownload:(BOOL)download;
-(void)OnOpenByApp;
-(void)InitPreview;
-(void)didAppear;
-(void)viewDidLoad;
-(void)SetDownloadHide:(BOOL)hide;
-(void)SetProgressHide:(BOOL)hide;
-(id)GetFileImgByFileExt;
-(id)GetTmpFilePath;
-(id)GetFilePath;
-(unsigned long)GetPreviewType;
-(void)dealloc;
-(void)SafeDeleteDocument;
-(id)init;
@end

@interface AppIntroViewController : MMUIViewController <IAppDataExt> {
	UIImageView* m_appIconView;
	UILabel* m_appName;
	UILabel* m_appDes;
	UIButton* m_btnAdd;
	UIButton* m_btnRemove;
	UIButton* m_btnInstall;
	UIImageView* m_desBkgView;
	AppRegisterInfo* m_info;
	MMAnimationTipView* m_tipView;
	BOOL m_bFromRecommand;
}
@property(assign, nonatomic) BOOL m_bFromRecommand;
@property(retain, nonatomic) MMAnimationTipView* m_tipView;
-(void)OnAppInfoChanged:(id)changed;
-(void)OnAppIconChanged:(id)changed;
-(void)viewDidLoad;
-(void)jumpToInstallApp:(id)installApp;
-(void)removeApp:(id)app;
-(void)addApp:(id)app;
-(void)dealloc;
-(id)initWithAppInfo:(id)appInfo;
@end

@interface MailAttachDetailViewController : MMUIViewController <UIAlertViewDelegate, UIActionSheetDelegate, PBMessageObserverDelegate, SessionSelectControllerDelegate> {
	CAttach* m_oAttach;
	NSString* m_nsMailID;
	BOOL m_bDownloading;
	MMProgressView* m_viewProgress;
	UILabel* m_labProgress;
	UIButton* m_btnCancelDownload;
	UIButton* m_btnDownload;
	UILabel* m_labCannotOpen;
	UIButton* m_btnPreview;
	UIButton* m_btnOpenByApp;
	MMDelegateProxy<MailAttachDelegate>* m_delegate;
	BOOL m_bPreview;
	unsigned long m_uiPreviewType;
	UIDocumentInteractionController* m_vcDocument;
	unsigned long m_uiStartPos;
	unsigned long m_uiDataLen;
	BOOL m_bViewDidAppear;
	unsigned long m_uiEventID;
	MMMPMoviePlayerController* _moviePlayerController;
}
@property(assign, nonatomic) MMDelegateProxy<MailAttachDelegate>* m_delegate;
@property(retain, nonatomic) NSString* m_nsMailID;
@property(retain, nonatomic) CAttach* m_oAttach;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(id)GetShowStringBySize:(unsigned long)size;
-(void)SetProgress:(unsigned long)progress;
-(void)ShowProgressView;
-(void)ShowDownloadBtn;
-(void)StopDownload;
-(void)StartDownload;
-(void)CreateDownloadEvent;
-(void)OnReturn;
-(void)OnOperate;
-(void)InitDownload:(BOOL)download;
-(void)OnPreviewCompress;
-(void)OnOpenByApp;
-(void)InitPreview;
-(void)didAppear;
-(void)viewDidLoad;
-(void)SetDownloadHide:(BOOL)hide;
-(void)SetProgressHide:(BOOL)hide;
-(id)GetFileImgByFileExt;
-(id)GetTmpFilePath;
-(id)GetFilePath;
-(unsigned long)GetPreviewType;
-(BOOL)IsPreviewFile;
-(void)dealloc;
-(void)SafeDeleteDocument;
-(id)init;
@end

@interface MMLineView : UIView {
	float _solidHeight;
	float _whiteHeight;
	UIColor* _solidColor;
	UIColor* _whiteColor;
}
@property(retain, nonatomic) UIColor* whiteColor;
@property(retain, nonatomic) UIColor* solidColor;
@property(assign, nonatomic) float whiteHeight;
@property(assign, nonatomic) float solidHeight;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(float)getColorValue:(float)value;
-(void)layoutSubviews;
-(id)init;
@end

@interface WCCommentStrangerMessageViewController : MMUIViewController <InputControllerDelegate, BaseEmoticonViewDelegate, UITableViewDelegate, UITableViewDataSource, tableViewDelegate, WCImageViewDelegate, IMsgExt, WCFacadeExt, UIActionSheetDelegate, ILinkEventExt> {
	MMTableView* _tableView;
	WCInputController* _inputController;
	UIImageView* _inputView;
	EmoticonBoardView* _emoticonBoardView;
	UIButton* _expressionButton;
	MMGrowTextView* _growTextView;
	BOOL _bHasInput;
	WCDataItem* _dataItem;
	WCContentItem* _contentItem;
	NSMutableArray* _arrMediaList;
	NSMutableArray* _arrCommentList;
	NSMutableArray* _arrLikeList;
	NSMutableDictionary* _dicCells;
	NSMutableDictionary* _dicCellHeights;
	int _uiSource;
	NSString* _nsStrangerName;
	NSString* _nsStrangerNickName;
	MMURLHandler* m_urlHandler;
	NSMutableArray* _arrImageViews;
}
@property(retain, nonatomic) NSString* nsStrangerNickName;
@property(retain, nonatomic) NSString* nsStrangerName;
@property(assign, nonatomic) int uiSource;
@property(retain, nonatomic) WCDataItem* dataItem;
-(void)dealloc;
-(void)onNetworkActivityStatusChanged;
-(void)willDisshow;
-(void)willDisappear;
-(void)willShow;
-(void)willAppear;
-(void)updateNetworkStatus;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)getCellContentViewHeightAtIndexPath:(id)indexPath;
-(id)getCellContentViewAtIndexPath:(id)indexPath;
-(id)getParsedNameStringWithComment:(id)comment;
-(id)getNameStringWithComment:(id)comment;
-(void)onClickWCImage:(id)image;
-(void)onHeadImageClicked:(id)clicked;
-(void)onOwnerHeadImageClicked:(id)clicked;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)jumpToProfile:(id)profile;
-(void)jumpToAlbum:(id)album;
-(void)viewDidLoad;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)opBlackList;
-(void)doOpBlackList;
-(void)onOperate:(id)operate;
-(void)initTableView;
-(void)initTableHeadView;
-(void)initData;
-(id)init;
-(void)onDataChangedWithAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(void)reloadExpressionButtonImage:(int)image;
-(void)onExpressionButtonClicked:(id)clicked;
-(void)keyboardWillHide;
-(void)MMGrowTextViewBeginEditing:(id)editing;
-(void)MMGrowTextViewHeightDidChanged:(id)mmgrowTextViewHeight;
-(void)didCommitText:(id)text;
-(void)reloadData;
-(void)textViewTextDidChange;
-(void)keyboardDidHide;
-(void)keyboardWillShow;
-(void)updateContentOffset;
-(void)initInputController;
-(void)initEmoticonView;
-(void)initInputToolView;
-(void)didFinishedLoading:(id)loading;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)resignInput;
-(void)becomeInput;
@end

@interface WCCommentStrangerViewController : MMUIViewController <UITextViewDelegate> {
	UITextView* m_textView;
	UILabel* m_labKF;
	UIButton* m_btnPhone;
	UIImageView* m_textBG;
	float m_fTextBGDefaultHeight;
	float m_fTextViewDefaultHeight;
	float m_fLabelKFDefaultY;
	float m_fBtnPhoneDefaultY;
	WCDataItem* dataItem;
	unsigned long source;
	BOOL m_bSendTextOnly;
	MMDelegateProxy<WCCommentStrangerViewControllerDelegate>* m_delegate;
	unsigned m_singlePasteTextMaxLength;
}
@property(assign, nonatomic) MMDelegateProxy<WCCommentStrangerViewControllerDelegate>* delegate;
@property(assign, nonatomic) BOOL isSendTextOnly;
@property(assign, nonatomic) unsigned long source;
@property(retain, nonatomic) WCDataItem* dataItem;
+(void)removeOldText;
+(void)writeOldText:(id)text;
+(id)openOldText;
-(void)dealloc;
-(id)init;
-(void)viewDidLoad;
-(void)keyboardWillShow:(id)keyboard;
-(void)initTextView;
-(void)initRightBtn;
-(void)initLeftBtn;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)onSendMessage:(id)message;
-(void)doSendMessage;
-(void)OnReturn;
-(void)OnCancel;
-(void)startLoading;
-(void)setTextViewContent:(id)content;
@end

@interface WCPayMoneyFromInnerPayLogic : WCPayControlLogic <WCBaseControlMgrExt, WCPayPayMoneyLogicDelegate> {
	WCPayPayMoneyLogic* m_payLogic;
	WCPayInnerPayRequestStruct* m_oWCPayInnerPayRequestStruct;
	NSString* m_dicExtraInfo;
	BOOL m_bEndFlag;
	BOOL m_bExtEndFlag;
}
-(void)OnGetGenPaypreErrorRequest:(id)request ErrorMsg:(id)msg;
-(void)OnGetGenPaypreRequest:(id)request SessionID:(id)anId AppSource:(id)source;
-(void)OnHandleErrorAlertClickedCancelBtnDown;
-(void)onWCBaseLogicDidStop:(unsigned long)onWCBaseLogic;
-(void)onErrorAlertViewStopLogic:(id)logic;
-(BOOL)gotoViewController:(id)controller;
-(id)getInnerPayResponseStruct;
-(void)startLogic;
-(void)dealloc;
-(id)initWithInnerPayRequest:(id)innerPayRequest extraInfo:(id)info;
@end

@interface ContactsItemCell : MMTableViewCell {
}
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface ContactsCommon : NSObject {
}
+(void)fixContactFullPy:(id)py;
+(id)parseContactKeyIgnoreGroup:(id)group;
+(id)parseContactKeyWithOutPaidGroupSection:(id)outPaidGroupSection;
+(id)parseContactKey:(id)key;
@end

@interface CreateChatLogic : MMObject <ContactsCreateChatRoomLogicDelegate, MultiSelectContactsViewControllerDelegate, UIAlertViewDelegate> {
	MMDelegateProxy<CreateChatLogicDelegate>* m_delegate;
	ContactsCreateChatRoomLogic* m_createLogic;
	MultiSelectContactsViewController* m_MultiSelectController;
	BOOL m_isCreateWXTalk;
}
@property(assign, nonatomic) BOOL m_isCreateWXTalk;
@property(readonly, assign, nonatomic) MultiSelectContactsViewController* m_MultiSelectController;
@property(assign, nonatomic) MMDelegateProxy<CreateChatLogicDelegate>* m_delegate;
-(void)OnCreateRoom:(id)room;
-(void)dealloc;
-(void)onMultiSelectContactReturn:(id)aReturn;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)init;
@end

@interface GroupSelectContactsViewController : MMUIViewController <UISearchDisplayDelegate, UITableViewDelegate, UITableViewDataSource, MMSearchBarDelegate, ContactsDataLogicDelegate> {
	MMDelegateProxy<GroupSelectContactsViewControllerDelegate>* m_delegate;
	MMTableView* m_tableView;
	ContactsDataLogic* m_contactsDataLogic;
	UIView* m_titleView;
	BOOL m_bShowSearchBar;
	unsigned long m_uiDataScene;
	MMSearchBar* m_searchBar;
}
@property(assign, nonatomic) unsigned long m_uiDataScene;
@property(assign, nonatomic) BOOL m_bShowSearchBar;
@property(assign, nonatomic) MMDelegateProxy<GroupSelectContactsViewControllerDelegate>* m_delegate;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(BOOL)onFilterContactCandidate:(id)candidate;
-(void)onContactsDataChange;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell tableCell:(id)cell2 section:(unsigned)section row:(unsigned)row;
-(void)makeCell:(id)cell contact:(id)contact;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)initView;
-(void)initSearchBar;
-(void)initTableView;
-(void)setExtraCellLineHidden:(id)hidden;
-(void)initTitleArea;
-(void)initData;
-(void)onCancelBack:(id)back;
-(id)init;
@end

@interface MultiSelectContactsViewController : MMUIViewController <UISearchDisplayDelegate, UITableViewDelegate, UITableViewDataSource, MMSearchBarDelegate, UIActionSheetDelegate, ContactsPanelViewDelegate, GroupSelectContactsViewControllerDelegate, ContactsDataLogicDelegate> {
	MMDelegateProxy<MultiSelectContactsViewControllerDelegate>* m_delegate;
	MMTableView* m_tableView;
	NSDictionary* m_dicExistContact;
	NSDictionary* m_dicIgnoreContact;
	BOOL m_bShowHistoryGroup;
	BOOL m_bShowBrandContact;
	NSMutableDictionary* m_dicMultiSelect;
	NSIndexPath* m_indexPathToBeDeleted;
	ContactsPanelView* m_panelView;
	UIButton* m_panelBtn;
	NSMutableArray* m_selectIndexPaths;
	ContactsDataLogic* m_contactsDataLogic;
	unsigned long m_uiGroupScene;
	MMSearchBar* m_searchBar;
}
@property(retain, nonatomic) UIButton* m_panelBtn;
@property(retain, nonatomic) NSMutableDictionary* m_dicMultiSelect;
@property(assign, nonatomic) unsigned long m_uiGroupScene;
@property(assign, nonatomic) BOOL m_bShowBrandContact;
@property(assign, nonatomic) BOOL m_bShowHistoryGroup;
@property(retain, nonatomic) NSDictionary* m_dicIgnoreContact;
@property(retain, nonatomic) NSDictionary* m_dicExistContact;
@property(assign, nonatomic) MMDelegateProxy<MultiSelectContactsViewControllerDelegate>* m_delegate;
-(void)resetTableViewOffset:(id)offset;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(void)makeSearchCell:(id)cell contact:(id)contact;
-(BOOL)onFilterContactCandidate:(id)candidate;
-(void)onContactsDataChange;
-(void)didClickImageAtIndex:(unsigned long)index withKey:(id)key;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)handleSelectHistoryGroup;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeHistoryGroupCell:(id)cell;
-(void)makeCell:(id)cell tableCell:(id)cell2 section:(unsigned)section row:(unsigned)row;
-(void)makeCell:(id)cell contact:(id)contact;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)initView;
-(void)initSearchBar;
-(void)initTableView;
-(void)setExtraCellLineHidden:(id)hidden;
-(void)initFooterPanelView;
-(void)initTitleArea;
-(void)initData;
-(void)onDone:(id)done;
-(void)onCancel:(id)cancel;
-(BOOL)updateMultiSelect:(id)select contact:(id)contact tableView:(id)view;
-(void)updatePanelView:(id)view;
-(void)updatePanelBtn;
-(void)addSelect:(id)select;
-(BOOL)checkAddMultiSelect:(id)select;
-(id)getCellTextView:(id)view;
-(id)getCellImage:(id)image;
-(BOOL)isSelected:(id)selected;
-(BOOL)isExisted:(id)existed;
-(BOOL)isIgnore:(id)ignore;
-(void)onGroupSelectContactReturn:(id)aReturn;
-(void)removeSelect:(id)select;
-(id)init;
@end

@interface SelectContactsViewController : MMUIViewController <UISearchDisplayDelegate, UITableViewDelegate, UITableViewDataSource, MMSearchBarDelegate, ContactsDataLogicDelegate> {
	id<SelectContactsViewControllerDelegate> m_delegate;
	MMTableView* m_tableView;
	UIView* m_titleView;
	ContactsDataLogic* m_contactsDataLogic;
	MMSearchBar* m_searchBar;
	unsigned long m_uiScene;
	BOOL m_bSupportSectionIndex;
}
@property(assign, nonatomic) BOOL m_bSupportSectionIndex;
@property(assign, nonatomic) unsigned long m_uiScene;
@property(assign, nonatomic) id<SelectContactsViewControllerDelegate> m_delegate;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(BOOL)onFilterContactCandidate:(id)candidate;
-(void)onContactsDataChange;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell tableCell:(id)cell2 section:(unsigned)section row:(unsigned)row;
-(void)makeCell:(id)cell contact:(id)contact;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)initView;
-(void)initSearchBar;
-(void)initTableView;
-(void)setExtraCellLineHidden:(id)hidden;
-(void)initTitleArea;
-(void)initData;
-(void)onCancelBack:(id)back;
-(id)init;
@end

@interface ContactsDataLogic : MMObject <IContactMgrExt, PluginUtilExt> {
	MMDelegateProxy<ContactsDataLogicDelegate>* m_delegate;
	NSMutableDictionary* m_dicAllContacts;
	NSMutableArray* m_arrAllKey;
	NSMutableArray* m_arrFilteredContacts;
	NSMutableArray* m_arrChatRooms;
	unsigned long m_uiScene;
	unsigned long m_uiNormalContact;
	BOOL m_bSort;
	BOOL m_bNeedReload;
	BOOL m_extendChatRoom;
}
@property(assign, nonatomic) BOOL m_extendChatRoom;
@property(assign, nonatomic) BOOL m_bSort;
@property(readonly, assign, nonatomic) unsigned long m_uiNormalContact;
@property(assign, nonatomic) unsigned long m_uiScene;
@property(assign, nonatomic) MMDelegateProxy<ContactsDataLogicDelegate>* m_delegate;
-(void)onUnInstallPlugin:(int)plugin;
-(void)onInstallPlugin:(int)plugin;
-(void)onContactListUpdate:(unsigned long)update;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(id)getFilteredContacts;
-(id)getContactsArrayWith:(id)with;
-(id)getKeysArray;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)doSearch:(id)search Pre:(BOOL)pre CheckList:(id)list;
-(void)dealloc;
-(id)initWithScene:(unsigned long)scene delegate:(id)delegate;
-(id)initWithScene:(unsigned long)scene delegate:(id)delegate sort:(BOOL)sort extendChatRoom:(BOOL)room;
-(id)initWithScene:(unsigned long)scene delegate:(id)delegate sort:(BOOL)sort;
-(BOOL)reloadContacts;
-(void)filtInContacts:(id)contacts;
-(void)filterOnlyWeixinContact:(id)contact;
-(void)filterMutilSelectWithBakChatFilter:(id)bakChatFilter;
-(void)filterSelectWithVerifyedContacts:(id)verifyedContacts;
-(void)filterHistoryGroupContacts:(id)contacts;
-(void)filterGroupContacts:(id)contacts;
-(void)filterMultiSelectContacts:(id)contacts;
-(void)filterSelectWithBrandContacts:(id)brandContacts;
-(void)filterSelectContacts:(id)contacts;
-(void)filterContactsViewContacts:(id)contacts;
-(id)getChatRoomContacts;
-(void)addContact:(id)contact;
-(void)sort;
-(id)addSectionKey:(id)key;
-(id)addHiddenSectionKey:(id)key;
-(void)pluginsChanged;
-(BOOL)hasChatRoom;
-(void)deleteContact:(id)contact deleteInDB:(BOOL)db;
-(void)unInstallPlugin:(id)plugin;
-(BOOL)shouldShowBrandGroup;
-(void)processOnModifyContact;
@end

@interface CommonImageBrowseViewController : MMUIViewController <MMImgageBrowseViewDelegate, UIActionSheetDelegate> {
	MMImageBrowseView* m_imageView;
	UIImage* m_image;
	MMAnimationTipView* m_tipView;
	id m_singleTapOnNav;
}
@property(retain, nonatomic) id m_singleTapOnNav;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onSingleTapImageBrowseView;
-(void)onSavedPhotosAlbum:(id)album;
-(void)onOperate;
-(void)onSingleTapOnNavigationBar:(id)bar;
-(void)dealloc;
-(id)initWithImage:(id)image;
-(void)willAppear;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)initImageView;
-(void)initNavigationBar;
-(void)exitFullScreen;
-(void)setFullScreen:(BOOL)screen;
-(void)removeNvGestureRecognizer;
-(void)addNvGestureRecognizer;
-(void)handleViewWillDisappear;
-(void)handleViewWillAppear;
-(void)showStatusBar;
-(void)hideStatusBar;
-(void)adjustImageViewRect;
@end

@interface EmoticonMsgBrowseViewController : MMUIViewController <MMImgageBrowseViewDelegate, UIActionSheetDelegate, EmoticonStoreItemExt> {
	MMImageBrowseView* m_imageView;
	MMAnimationTipView* m_tipView;
	CMessageWrap* m_wrapMsg;
	CEmoticonWrap* m_wrapEmoticon;
	id m_singleTapOnNav;
	EmoticonStoreItem* m_item;
}
@property(retain, nonatomic) EmoticonStoreItem* m_item;
@property(retain, nonatomic) id m_singleTapOnNav;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onSingleTapImageBrowseView;
-(void)OnEmoticonStoreItemChanged:(id)changed;
-(void)onPurchase:(id)purchase;
-(void)onSaveEmoticon:(id)emoticon;
-(void)onOperate;
-(void)onSingleTapOnNavigationBar:(id)bar;
-(void)exitFullScreen;
-(void)setFullScreen:(BOOL)screen;
-(void)removeNvGestureRecognizer;
-(void)addNvGestureRecognizer;
-(void)handleViewWillDisappear;
-(void)handleViewWillAppear;
-(void)showStatusBar;
-(void)hideStatusBar;
-(void)adjustImageViewRect;
-(void)initBottomView;
-(void)initImageView;
-(void)initView;
-(void)initData;
-(void)willAppear;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithMsgWrap:(id)msgWrap;
-(void)dealloc;
-(void)adjustViewAndNavBarRect;
@end

@interface MMImageBrowseView : MMUIScrollView <UIScrollViewDelegate, MMImageScrollViewHelperDelegate> {
	MMDelegateProxy<MMImgageBrowseViewDelegate>* m_delegate;
	UIView* m_vImage;
	CGSize m_szFit;
	MMImageScrollViewHelper* m_scrollViewHelper;
}
@property(copy, nonatomic) NSArray* gestureRecognizers;
@property(assign, nonatomic) float maximumZoomScale;
@property(assign, nonatomic) float minimumZoomScale;
@property(assign, nonatomic) float zoomScale;
@property(assign, nonatomic) CGRect frame;
@property(assign, nonatomic) MMDelegateProxy<MMImgageBrowseViewDelegate>* m_delegate;
-(id).cxx_construct;
-(void)onDoubleTap:(id)tap;
-(void)onSingleTap:(id)tap;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)getScrollView;
-(id)viewForZooming;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)ZoomForPoint:(CGPoint)point;
-(void)ResetScroll;
-(void)UpdateEmoticon:(id)emoticon;
-(void)UpdateData:(id)data orientation:(int)orientation;
-(void)UpdateData:(id)data;
-(void)UpdateImage:(id)image orientation:(int)orientation;
-(void)UpdateImage:(id)image;
-(void)InitEmoticonView:(id)view;
-(void)InitImageView;
-(void)dealloc;
-(id)init;
@end

@interface MsgImageBrowseViewController : MMUIViewController <MMImgageBrowseViewDelegate, UIActionSheetDelegate, UIAlertViewDelegate, MessageObserverDelegate> {
	MMImageBrowseView* m_imageView;
	MMAnimationTipView* m_tipView;
	CMessageWrap* m_wrapMsg;
	UIImage* m_image;
	MMDelegateProxy<ImageBrowseDelegate>* m_delegate;
	unsigned long m_uiEvent;
	MMLoadingView* m_loadingView;
	id m_singleTapGesture;
	id m_doubleTapGesture;
	BOOL m_saveMode;
}
@property(assign, nonatomic) BOOL m_saveMode;
@property(retain, nonatomic) id m_doubleTapGesture;
@property(retain, nonatomic) id m_singleTapGesture;
@property(retain, nonatomic) UIImage* m_image;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onSingleTapImageBrowseView;
-(void)onSavedPhotosAlbum:(id)album;
-(void)onOperate;
-(void)onDouTapOnNavigationBar:(id)bar;
-(void)onSingleTapOnNavigationBar:(id)bar;
-(void)stopImageLoading;
-(void)startImageLoading;
-(void)startDownloadImg;
-(int)preferredInterfaceOrientationForPresentation;
-(void)updateLoadingPercent:(unsigned long)percent PartLen:(unsigned long)len DataLen:(unsigned long)len3;
-(void)dealloc;
-(id)initWithMsgWrap:(id)msgWrap;
-(void)didAppear;
-(void)willAppear;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)initData;
-(void)initLoadingView;
-(void)initImageView;
-(void)initNavigationBar;
-(id)genDataLength:(unsigned long)length;
-(void)UpdateImage;
-(void)UpdateHDImage:(int)image;
-(void)GetImage;
-(void)exitFullScreen;
-(void)setFullScreen:(BOOL)screen;
-(void)removeNvGestureRecognizer;
-(void)addNvGestureRecognizer;
-(void)handleViewWillDisappear;
-(void)handleViewWillAppear;
-(void)showStatusBar;
-(void)hideStatusBar;
-(void)adjustImageViewRect;
@end

@interface PickImageForCommonViewController : MMUIViewController <MMImgageBrowseViewDelegate> {
	MMImageBrowseView* m_imageView;
	UIImage* m_image;
	id<ImageBrowseDelegate> m_delegate;
	id m_singleTapOnNav;
}
@property(assign, nonatomic) id<ImageBrowseDelegate> m_delegate;
@property(retain, nonatomic) id m_singleTapOnNav;
-(void)onSingleTapImageBrowseView;
-(void)doCancel;
-(void)doSelect;
-(void)onSingleTapOnNavigationBar:(id)bar;
-(void)dealloc;
-(id)initWithImage:(id)image;
-(void)onTopBarFrameChanged;
-(void)willAppear;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)initImageView;
-(void)initNavigationBar;
-(void)exitFullScreen;
-(void)setFullScreen:(BOOL)screen;
-(void)removeNvGestureRecognizer;
-(void)addNvGestureRecognizer;
-(void)handleViewWillDisappear;
-(void)handleViewWillAppear;
-(void)showStatusBar;
-(void)hideStatusBar;
-(void)adjustImageViewRect;
@end

@interface QQBlogContactInfoViewController : MMUIViewController {
	CContact* _contact;
	MMHeadImageView* _headView;
	MMHDHeadImageView* _HDHeadView;
	UILabel* _userNameLabel;
	UILabel* _nickNameLabel;
	UIButton* _sendMsgBtn;
	id<contactInfoDelegate> _delegate;
}
@property(assign, nonatomic) id<contactInfoDelegate> _delegate;
@property(retain, nonatomic) CContact* _contact;
-(void)dealloc;
-(id)initWithContact:(id)contact;
-(id)init;
-(void)viewDidLoad;
-(void)initView;
-(void)initSendMsgBtn;
-(void)onNewMessage:(id)message;
-(void)jumpToContentViewController:(id)contentViewController;
-(void)initUserNameLabel;
-(void)initNickNameLabel;
-(void)updateNickNameLabel;
-(void)initHDHeadImage;
-(void)initHeadImage;
@end

@interface MMImageScrollViewHelper : NSObject {
	BOOL dontCalcPreviewRect;
	BOOL noSingleTaps;
	BOOL noDoubleTaps;
	BOOL dontSupportVerticalLongImage;
	BOOL dontSupportHorizontalLongImage;
	id<MMImageScrollViewHelperDelegate> m_delegate;
}
@property(assign, nonatomic) id<MMImageScrollViewHelperDelegate> m_delegate;
@property(assign, nonatomic) BOOL dontSupportHorizontalLongImage;
@property(assign, nonatomic) BOOL dontSupportVerticalLongImage;
@property(assign, nonatomic) BOOL noDoubleTaps;
@property(assign, nonatomic) BOOL noSingleTaps;
@property(assign, nonatomic) BOOL dontCalcPreviewRect;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)ZoomForPoint:(CGPoint)point;
-(void)onDoubleTap:(id)tap;
-(CGRect)zoomRectForScale:(float)scale withCenter:(CGPoint)center;
-(void)onSingleTap:(id)tap;
-(void)dealloc;
-(void)initHelper:(CGSize)helper orientation:(int)orientation;
-(void)initHelper:(CGSize)helper orientation:(int)orientation containSize:(CGSize)size;
-(void)initHelper:(CGSize)helper;
-(CGSize)calculateImageFitSizeForPreview:(CGSize)preview maxSize:(CGSize)size;
-(void)InitGestureRecognizer;
-(id)init;
@end

@interface MMMsgLogicManager : MMService <MMService, IMMLanguageMgrExt, IMMFontMgrExt, IContactMgrExt, IMMNewSessionMgrExt> {
	NSMutableArray* _arrLogicControllers;
	BaseMsgContentLogicController* _topLogicController;
	BaseMsgContentLogicController* _weixinLogicController;
	BaseMsgContentLogicController* _roomLogicController;
}
@property(retain, nonatomic) BaseMsgContentLogicController* topLogicController;
@property(retain, nonatomic) NSMutableArray* arrLogicControllers;
-(id)GetCurrentLogicController;
-(void)PopLogicController:(id)controller;
-(void)PushSearchLogicControllerByContact:(id)contact navigationController:(id)controller ForMessageWrap:(id)messageWrap animated:(BOOL)animated;
-(void)PushLBSRoomLogicControllerByContact:(id)contact navigationController:(id)controller animated:(BOOL)animated;
-(void)PushLogicControllerByContact:(id)contact navigationController:(id)controller animated:(BOOL)animated jumpToLocationNode:(id)locationNode;
-(void)PushLogicController:(id)controller navigationController:(id)controller2 animated:(BOOL)animated;
-(id)GetReuseableLogicControllerFromCacheWithContact:(Class)contact;
-(id)GetLogicControllerFromCacheWithContact:(id)contact;
-(void)setMsgLogicToCache:(id)cache;
-(Class)GetLogicClassByContact:(id)contact;
-(BOOL)onServiceMemoryWarning;
-(void)onPluginsChanged:(id)changed;
-(void)onDeleteSession:(unsigned long)session;
-(void)onModifyContact:(id)contact;
-(void)onDeleteContact:(id)contact;
-(void)onFontSizeChange;
-(void)onLanguageChange;
-(void)onServiceReloadData;
-(void)CheckIfTopViewControllerPoped;
-(void)cleanUpLogicByName:(id)name;
-(void)cleanUp;
-(void)dealloc;
-(void)onServiceInit;
@end

@interface VOIPUIHelper : NSObject {
}
+(id)FormVoipRemindMessageWithUsrname:(id)usrname andInviteType:(int)type;
+(id)FormVoipMessageWithUsrname:(id)usrname andInviteType:(int)type;
@end

@interface PushCard : NSObject {
	NSString* m_nsTitle;
	NSString* m_nsBoldTitle;
	CContact* m_oContact;
	NSString* m_nsDescTitle;
	NSString* m_nsThirdTitle;
	UIImage* m_oBackgroundImg;
	UIImage* m_oBackgroundImgHL;
	UIImage* m_oSmallIcon;
}
@property(retain, nonatomic) NSString* m_nsThirdTitle;
@property(retain, nonatomic) NSString* m_nsDescTitle;
@property(retain, nonatomic) NSString* m_nsBoldTitle;
@property(retain, nonatomic) CContact* m_oContact;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(retain, nonatomic) UIImage* m_oSmallIcon;
@property(retain, nonatomic) UIImage* m_oBackgroundImgHL;
@property(retain, nonatomic) UIImage* m_oBackgroundImg;
-(void)dealloc;
-(id)initWithMessageWrap:(id)messageWrap;
-(void)parseXMLFromMessage:(id)message;
-(id)getFilterString:(id)string;
@end

@interface CFriendInfo : NSObject <NSCoding> {
	unsigned long m_uiSyncTime;
	NSArray* m_arrGroupList;
	NSArray* m_arrFriendList;
}
@property(retain, nonatomic) NSArray* m_arrFriendList;
@property(retain, nonatomic) NSArray* m_arrGroupList;
@property(assign, nonatomic) unsigned long m_uiSyncTime;
-(void)SaveFriendData:(unsigned long)data GroupId:(unsigned long)anId;
-(BOOL)LoadFriendData:(unsigned long)data GroupId:(unsigned long)anId;
-(void)SaveGroupData:(unsigned long)data;
-(BOOL)LoadGroupData:(unsigned long)data;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface MultiImagePickerController : MMUIImagePickerController <UIImagePickerControllerDelegate, UINavigationControllerDelegate, PickedImagePaneDelegate> {
	MMDelegateProxy<MultiImagePickerControllerDelegate>* _mpdelegate;
	PickedImagePane* _imagePane;
	unsigned long _maxSelectNum;
	NSDictionary* _imageInfo;
	BOOL _isStatusbarHidden;
}
@property(assign, nonatomic) unsigned long _maxSelectNum;
@property(assign, nonatomic) MMDelegateProxy<MultiImagePickerControllerDelegate>* _mpdelegate;
-(void)MultiImagePickerPreviewViewFinishSelectingImages:(id)images;
-(void)pickedImagePaneDidFinishPickingImages:(id)pickedImagePane;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)viewWillDisappear:(BOOL)view;
-(void)removeImages;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)dealloc;
-(id)init;
@end

@interface PickedImagePane : MMUIView <UIAlertViewDelegate> {
	NSMutableArray* _imageInfos;
	UIScrollView* _scrollView;
	unsigned long _maxSelectNum;
	MMDelegateProxy<PickedImagePaneDelegate>* _delegate;
}
@property(assign, nonatomic) unsigned long _maxSelectNum;
@property(assign, nonatomic) MMDelegateProxy<PickedImagePaneDelegate>* _delegate;
-(void)onDoneBtnClicked:(id)clicked;
-(void)onImageClicked:(id)clicked;
-(BOOL)addImage:(id)image;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andMaxSelectNum:(unsigned long)num;
-(void)updateCount:(int)count;
@end

@interface MMSwithItemView : UIView <IOnlineClientMgrExt> {
	ForwardSwitchView* oSwitch;
	UILabel* oTip;
}
@property(retain, nonatomic) UILabel* oTip;
@property(retain, nonatomic) ForwardSwitchView* oSwitch;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMWebOnlineController : MMUIViewController <IOnlineClientMgrExt, UIAlertViewDelegate> {
	UILabel* _labelLogout;
	MMSwithItemView* _oSwitch;
	UIButton* _btnLogout;
}
-(void)onOnlineInfoUpdated;
-(void)updateWithOnlineInfo;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(void)onSwitchValueChange:(id)change;
-(void)logoutWeb;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onBack;
@end

@interface MMMPMoviePlayerController : NSObject {
	CGRect _frame;
	UIView* _superView;
	MPMoviePlayerController* _moviePlayerController;
}
@property(retain, nonatomic) MPMoviePlayerController* moviePlayerController;
@property(assign, nonatomic) UIView* superView;
@property(assign, nonatomic) CGRect frame;
-(id).cxx_construct;
-(void)dealloc;
-(void)playMovieStream:(id)stream;
-(void)playMovieFile:(id)file;
-(void)createAndPlayMovieForURL:(id)url sourceType:(int)type;
-(void)createAndConfigurePlayerWithURL:(id)url sourceType:(int)type;
-(void)moviePlayBackStateDidChange:(id)moviePlayBackState;
-(void)mediaIsPreparedToPlayDidChange:(id)mediaIsPreparedToPlay;
-(void)loadStateDidChange:(id)loadState;
-(void)moviePlayBackDidFinish:(id)moviePlayBack;
-(void)removeMovieViewFromViewHierarchy;
-(void)deletePlayerAndNotificationObservers;
-(void)removeMovieNotificationHandlers;
-(void)installMovieNotificationObservers;
-(void)applyUserSettingsToMoviePlayer;
@end

@interface SettingMyAccountExtInfoLogic : MMObject <UIActionSheetDelegate, MessageObserverDelegate, MMImagePickerManagerDelegate> {
	id<settingMyAccountExtInfoLogicDelegate> m_delegate;
	UIViewController* m_viewController;
	CUsrInfo* m_usrInfo;
	unsigned long m_uiUploadHeadEventID;
}
@property(retain, nonatomic) CUsrInfo* m_usrInfo;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)dealloc;
-(void)saveInfo;
-(void)reload;
-(void)resetViewControllerAndDelegate;
-(id)initWithViewController:(id)viewController delegate:(id)delegate;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showChangeImg;
-(void)handleImage:(id)image;
-(void)showImagePicker:(int)picker;
-(id)getNavigationController;
-(id)getViewController;
@end

@interface MMPhoneNumberHandler : MMObject <ABPeoplePickerNavigationControllerDelegate, ABNewPersonViewControllerDelegate, UIActionSheetDelegate> {
	NSString* _phoneNumber;
	UIViewController* _viewController;
}
@property(assign, nonatomic) UIViewController* viewController;
@property(retain, nonatomic) NSString* phoneNumber;
+(void)makePhoneCall:(id)call;
+(void)handlePhoneNumber:(id)number;
+(id)sharedInstance;
-(void)dealloc;
-(void)CreateNewContact:(id)contact viewController:(id)controller;
-(void)AddPhoneNumberToExistContact:(id)existContact viewController:(id)controller;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)openNewPersonViewController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)onCancel:(id)cancel;
-(void)showNewPersonViewController;
-(void)showPeoplePickerController;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)handleContactActionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)handleTotalActionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)handlePhoneNumber:(id)number;
-(void)showTotalActionSheet:(id)sheet;
-(void)showContactActionSheet:(id)sheet;
-(id)getViewController;
@end

@interface WebviewAuthorizationCache : NSObject {
	NSMutableDictionary* _dicScope2ApiInfo;
}
-(BOOL)isAuthorizedApi:(id)api inScope:(id)scope;
-(BOOL)isExistAuthInfoForApi:(id)api inScope:(id)scope;
-(BOOL)isAuthorizedScope:(id)scope;
-(BOOL)isExistAuthInfoForScope:(id)scope;
-(id)getScopeInfoForScope:(id)scope;
-(void)removeScopeInfoForScope:(id)scope;
-(void)addScopeInfo:(id)info forScope:(id)scope;
-(void)addScopeInfoList:(id)list;
-(id)init;
-(void)dealloc;
@end

@interface MMImageLoader : MMService <MMService> {
	NSRecursiveLock* m_lock;
	NSMutableDictionary* m_requestInfoDictionary;
	NSMutableDictionary* m_imageCaches;
	dispatch_queue_s* _request_queue;
	NSMutableDictionary* m_gifDataCaches;
}
@property(retain, nonatomic) NSRecursiveLock* m_lock;
-(id)urlMD5ForConnection:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(BOOL)isImageLoaded:(id)loaded;
-(void)cancelLoadForURL:(id)url oberver:(id)oberver;
-(void)loadImageForURL:(id)url withAuthorizationCode:(id)authorizationCode observer:(id)observer;
-(void)loadImageForURL:(id)url observer:(id)observer;
-(id)imageDataForURL:(id)url LoadOnMainThread:(BOOL)thread;
-(id)imageCacheForURL:(id)url LoadOnMainThread:(BOOL)thread;
-(id)imageForURL:(id)url LoadOnMainThread:(BOOL)thread;
-(void)callAllExtWithOrder:(id)order Data:(id)data UrlMd5:(id)a5;
-(void)callImageDidLoadOrFailedExt:(id)callImage UrlMd5:(id)a5;
-(BOOL)callImageDidLoadWithDataOrFailedExt:(id)callImage withUrlMd5:(id)urlMd5;
-(void)callImageDidLoadWithDataExt:(id)callImage withUrlMd5:(id)urlMd5;
-(void)callImageDidLoadExt:(id)callImage withUrlMd5:(id)urlMd5;
-(id)getDataFromCache:(id)cache;
-(id)getImageFromImageCache:(id)imageCache;
-(id)getImageFromCache:(id)cache;
-(id)cacheImageFromData:(id)data fromUrl:(id)url;
-(id)cacheNotGifImageFromFile:(id)file fromUrl:(id)url;
-(id)cacheImageFromFile:(id)file fromUrl:(id)url;
-(id)cacheDataFromFile:(id)file fromUrl:(id)url;
-(BOOL)onServiceMemoryWarning;
-(void)setImageObject:(id)object forKey:(id)key;
-(void)setImageDataObject:(id)object forKey:(id)key;
-(id)imageObjectForKey:(id)key;
-(id)imageDataObjectForKey:(id)key;
-(void)dealloc;
-(void)onServiceInit;
@end

@interface WCMallJumpWCMallControlLogic : WCMallControlLogic <IWCMallControlLogicExt, WCBaseControlMgrExt> {
	JSEvent* m_jsEvent;
	NSString* m_nsStepUrl;
	WCMallFunctionActivityPayControlLogic* m_oWCMallFunctionActivityPayControlLogic;
	BOOL m_bEndFlag;
	BOOL m_bJSEventEnd;
}
-(void)OnGetWCMallFunctionList:(id)list GlobalList:(id)list2 NotShowTutorial:(BOOL)tutorial Error:(id)error;
-(void)stopLogic;
-(void)endJSEventWith:(BOOL)with;
-(void)onWCBaseLogicDidStop:(unsigned long)onWCBaseLogic;
-(void)startLogic;
-(void)dealloc;
-(id)initWithJSEvent:(id)jsevent URL:(id)url;
@end

@interface MMWebImageButton : UIButton <MMImageLoaderObserver> {
	UIImage* _defaultImage;
	NSURL* _url;
}
+(BOOL)CanLoadImage:(id)image;
-(void)dealloc;
-(void)ImageDidFail;
-(void)ImageDidLoad:(id)image;
-(void)setDefaultImage:(id)image;
-(BOOL)setImageURL:(id)url;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMWebImageView : MMUIImageView <MMImageLoaderObserver> {
	UIImage* _defaultImage;
	NSURL* _url;
	BOOL _loadCachedImageFileOnMainThread;
	MMDelegateProxy<MMWebImageViewDelegate>* m_loadingDelegate;
	MMGifView* m_gifView;
}
@property(assign, nonatomic) MMDelegateProxy<MMWebImageViewDelegate>* m_loadingDelegate;
@property(retain, nonatomic) MMGifView* m_gifView;
@property(assign, nonatomic) BOOL loadCachedImageFileOnMainThread;
+(BOOL)CanLoadImage:(id)image;
-(BOOL)setImageFromCacheImage:(id)cacheImage;
-(void)removeGifView;
-(BOOL)setImageFromImageLoaderForUrl:(id)url;
-(void)setGifViewFount:(id)fount;
-(id)getGifViewFromData:(id)data;
-(id)getImageFromData:(id)data;
-(BOOL)setImageFromData:(id)data;
-(void)dealloc;
-(void)ImageDidFail;
-(void)ImageDidLoadWithData:(id)image;
-(id)getUrl;
-(id)getImage;
-(void)setDefaultImage:(id)image;
-(void)setImageURL:(id)url withAuthorizationCode:(id)authorizationCode forceUpdate:(BOOL)update;
-(void)setImageURL:(id)url forceUpdate:(BOOL)update;
-(void)setImageURL:(id)url;
-(id)initWithFrame:(CGRect)frame;
-(void)setLoadingDelegate:(id)delegate;
@end

@interface WCCommitSelectGroupViewControllerCell : MMTableViewCell {
	UIImageView* leftCheckMark;
	UILabel* totalMemberCountLabel;
	BOOL m_checked;
	BOOL m_showCount;
	unsigned long m_count;
	int m_leftCheckMarkType;
}
@property(assign, nonatomic) int m_leftCheckMarkType;
@property(assign, nonatomic) unsigned long m_count;
@property(assign, nonatomic) BOOL m_showCount;
@property(assign, nonatomic) BOOL m_checked;
@property(readonly, assign, nonatomic) UIImageView* leftCheckMark;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface WCCommitSelectGroupViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, WCFacadeExt> {
	MMTableView* m_tableView;
	NSMutableArray* m_arrMyGroup;
	NSMutableSet* m_selectedGroupIDs;
	NSSet* m_originSelectedGroupIDs;
	int m_originProviacy;
	BOOL m_privacyGroupHidden;
}
@property(assign, nonatomic) BOOL m_privacyGroupHidden;
-(void)onEditMyGroup;
-(void)onEditOutsider;
-(void)onDone;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfRowsInFirstSection;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)willShow;
-(void)onWCGroupUpdated;
-(void)OnDataChange;
-(void)dealloc;
-(id)init;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initTableFooterView;
-(void)initData;
-(void)loadMyGroups;
@end

@interface MMBrandHeadImageView : UIButton <IContactMgrExt, IStrangerContactMgrExt> {
	UIImageView* m_frameView;
	MMWebImageView* m_headView;
	CGSize m_headSize;
	NSString* m_username;
	id m_oTarget;
	SEL m_selAction;
	id m_object;
}
@property(assign, nonatomic) CGSize m_headSize;
@property(retain, nonatomic) MMWebImageView* m_headView;
@property(retain, nonatomic) UIImageView* m_frameView;
@property(retain, nonatomic) id m_object;
@property(assign, nonatomic) SEL m_selAction;
@property(retain, nonatomic) id m_oTarget;
+(id)getWCPayServiceBrandAppHeadImageViewFromUrl:(id)url username:(id)username;
+(id)getBottleHeadImageViewFromUrl:(id)url username:(id)username;
+(id)getProfileHeadImageViewFromUrl:(id)url username:(id)username;
+(id)getBrandServiceListHeaderFromUrl:(id)url username:(id)username;
+(id)getUserInfoCellHeaderFromUrl:(id)url username:(id)username;
+(id)getProfileCellHeaderFromUrl:(id)url username:(id)username;
-(id).cxx_construct;
-(void)OnPress:(id)press;
-(void)setTarget:(id)target action:(SEL)action withObject:(id)object;
-(void)setTarget:(id)target action:(SEL)action;
-(void)layoutSubviews;
-(void)onStrangerContactUpdated:(id)updated;
-(void)onModifyContact:(id)contact;
-(void)setUserName:(id)name;
-(void)setUpdateUrl:(id)url;
-(id)getUpdateUrl;
-(void)dealloc;
-(void)TrySetDefaultHeadImage;
-(void)SetDefaultFrameImage;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WebviewJSEventHandler_editAddress : WebviewJSEventHandlerBase <IWebviewAskAuthorizationLogicExt> {
	JSEvent* _jsEvent;
}
-(void)startEditAddress;
-(void)OnAskAuthorizationFailure:(id)failure ForAuthInfo:(id)authInfo;
-(void)OnAskAuthorizationSuccessForAuthInfo:(id)authInfo;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
-(id)init;
-(void)dealloc;
@end

@interface WCCreateNewGroupViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate> {
	MMTableView* m_tableView;
	UITextField* m_textField;
	NSString* m_title;
	NSString* m_placeHolderText;
	NSString* m_originText;
	NSString* m_hintText;
	MMDelegateProxy<WCCreateNewGroupViewControllerDelegate>* m_delegate;
}
@property(retain, nonatomic) NSString* m_hintText;
@property(retain, nonatomic) NSString* m_originText;
@property(retain, nonatomic) NSString* m_placeHolderText;
@property(retain, nonatomic) NSString* m_title;
@property(assign, nonatomic) MMDelegateProxy<WCCreateNewGroupViewControllerDelegate>* m_delegate;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)makeTextCell:(id)cell;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)textFieldTextDidChange:(id)textFieldText;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)onCancel;
-(void)onSave;
@end

@interface WCGroupListCell : UITableViewCell {
	int leftImageViewType;
	UIImageView* leftImageView;
	UIImageView* rightRedDot;
	UIView* headerView;
	UILabel* memberCountView;
	WCGroup* m_group;
	BOOL m_hasRecommend;
	BOOL m_checked;
}
@property(assign, nonatomic) BOOL m_checked;
@property(assign, nonatomic) BOOL m_hasRecommend;
@property(assign, nonatomic) int leftImageViewType;
@property(retain, nonatomic) WCGroup* m_group;
@property(retain, nonatomic) UIImageView* leftImageView;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface WCGroupListViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, WCFacadeExt, MultiSelectContactsViewControllerDelegate> {
	MMTableView* m_tableView;
	NSMutableArray* m_arrGroups;
	NSMutableSet* m_selectedGroupIDs;
	NSString* m_nsToDeleteGroupID;
}
-(void)onMultiSelectContactReturn:(id)aReturn;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)onBtnClicked:(id)clicked event:(id)event;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)willDisappear;
-(void)onWCGroupUpdatedReturn:(BOOL)aReturn;
-(void)onWCGroupUpdated;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initData;
@end

@interface WCClassifyMembersViewController : MMUIViewController <UIActionSheetDelegate, tableViewDelegate, NewChatRoomMemberItemViewDelegate, MultiSelectContactsViewControllerDelegate, IContactMgrExt, WCFacadeExt, WCCreateNewGroupViewControllerDelegate, UIAlertViewDelegate> {
	WCGroup* _group;
	NSMutableArray* _arrGroupTempMember;
	NSString* _tempGroupName;
	NSMutableDictionary* _dicGroupOutsiderMember;
	UIView* _headerView;
	UIImageView* _memberBkgView;
	RoundTableViewCell* _roundCellView;
	NSMutableArray* _arrGroupMemberView;
	NSMutableArray* _arrGroupMember;
	MMTableView* _tableView;
	BOOL _deleteStatus;
	WCOpLog* _wcOpLog;
}
@property(retain, nonatomic) NSMutableDictionary* dicGroupOutsiderMember;
@property(retain, nonatomic) WCGroup* group;
@property(retain, nonatomic) MMTableView* tableView;
@property(retain, nonatomic) NSString* tempGroupName;
@property(retain, nonatomic) NSMutableArray* arrGroupTempMember;
@property(retain, nonatomic) NSMutableArray* arrGroupMember;
@property(retain, nonatomic) NSMutableArray* arrGroupMemberView;
@property(retain, nonatomic) RoundTableViewCell* roundCellView;
@property(retain, nonatomic) UIImageView* memberBkgView;
@property(retain, nonatomic) UIView* headerView;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)processModContact:(id)contact;
-(void)onWCDeleteGroupReturn:(BOOL)aReturn groupID:(id)anId;
-(void)onWCGroupModMemberReturn:(BOOL)aReturn group:(id)group;
-(void)setShowRemoveMember;
-(void)onDeleteMember:(id)member;
-(void)onAddMember:(id)member;
-(void)openContactInfo:(id)info;
-(void)onMultiSelectContactReturn:(id)aReturn;
-(void)OnWCCreatNewGroupName:(id)name;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)viewDidLoad;
-(void)dealloc;
-(void)onDeleteGroup;
-(void)tryDeleteGroup;
-(void)showAlert:(id)alert;
-(void)onSelectRoundCell;
-(void)onDone;
-(void)modOutsiderGroup;
-(void)onCancel;
-(BOOL)shouldModGroup;
-(void)onDismiss;
-(id)initWithWCGroup:(id)wcgroup;
-(void)initGroupTempMember;
-(void)reloadMember:(id)member;
-(void)reloadMemberListAndView;
-(void)stopLoading;
-(void)startLoadingWithTitle:(id)title;
-(void)initView;
-(void)initFooterView;
-(void)initOutsiderFooterView;
-(void)initBlacklistFooterView;
-(void)updateHeaderView;
-(void)initData;
-(void)loadOutsiderMembers;
-(void)loadMemberList;
-(void)updateGroupTitle;
-(void)updateNavigation;
-(void)updateTitle;
-(id)getGroupName;
-(id)getDefaultGroupName;
@end

@interface WCGroupMemberViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	NSMutableArray* m_arrGroups;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)OnDataChange;
-(id)getContact:(id)contact;
-(void)dealloc;
-(id)initWithGroupIDs:(id)groupIDs;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initData;
@end

@interface MMTimer : UILabel {
	int _second;
	int _minute;
	int _hour;
	BOOL _isShowHourDefault;
	BOOL _isActive;
}
@property(assign, nonatomic) int hour;
@property(assign, nonatomic) int minute;
@property(assign, nonatomic) int second;
-(void)dealloc;
-(void)pauseTimer;
-(void)stopTimer;
-(void)startTimer;
-(void)reset;
-(void)setIsShowHourDefault:(BOOL)aDefault;
-(void)increaseTime;
-(void)updateLabel;
@end

@interface BaseParser : NSObject {
	id<TextLayoutDelegate> _layoutDelegate;
	unsigned _parserType;
}
@property(assign, nonatomic) unsigned parserType;
@property(assign, nonatomic) id<TextLayoutDelegate> layoutDelegate;
+(id)sharedInstance;
+(id)newInstance;
-(void)dealloc;
-(id)attributeStringForContent:(id)content;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(float)getNextLineOriginWithCurrentY:(float)currentY lineHeight:(float)height withMaxWidth:(float)maxWidth;
-(id)parseTextForStyles:(id)styles withParserPosition:(NSParserPosition*)parserPosition;
-(void)insertString:(id)string stringRange:(NSRange)range styleRect:(CGRect)rect;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(id)styleStringForContent:(id)content withParserPosition:(NSParserPosition)parserPosition outputLastPosition:(NSParserPosition*)position;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
@end

@interface BoldTextParser : TextParser {
}
+(id)newInstance;
-(void)dealloc;
-(id)attributeStringForContent:(id)content;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(id)styleStringForContent:(id)content withParserPosition:(NSParserPosition)parserPosition outputLastPosition:(NSParserPosition*)position;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(id)getStyle;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
@end

@interface EmoticonParser : ImageParser {
}
+(id)newInstance;
-(void)dealloc;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(id)styleStringForContent:(id)content withParserPosition:(NSParserPosition)parserPosition outputLastPosition:(NSParserPosition*)position;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
-(id)getImage;
@end

@interface ImageParser : BaseParser {
	UIFont* _font;
	NSString* _nsImgSrc;
}
@property(retain, nonatomic) UIFont* font;
+(id)newInstance;
-(void)dealloc;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(id)styleStringForContent:(id)content withParserPosition:(NSParserPosition)parserPosition outputLastPosition:(NSParserPosition*)position;
-(id)getImageStylesForString:(id)string withStyleString:(id)styleString;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
-(id)getImage;
-(void)setImageSrc:(id)src;
@end

@interface LinkTextParser : TextParser {
	NSString* _url;
	NSString* _sourceUrl;
}
@property(retain, nonatomic) NSString* sourceUrl;
@property(retain, nonatomic) NSString* url;
+(id)newInstance;
-(void)dealloc;
-(id)getStyle;
-(id)attributeStringForContent:(id)content;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
@end

@interface PhoneNumberParser : TextParser {
	NSString* _nsUrl;
	NSString* _nsSourceUrl;
}
@property(retain, nonatomic) NSString* nsSourceUrl;
@property(retain, nonatomic) NSString* nsUrl;
+(id)newInstance;
-(void)dealloc;
-(id)getStyle;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
-(id)init;
@end

@interface TextParser : BaseParser {
	UIFont* _font;
	UIColor* _color;
	UIColor* _shadowColor;
	CGSize shadowOffset;
	CGSize _shadowOffset;
}
@property(assign, nonatomic) CGSize shadowOffset;
@property(retain, nonatomic) UIColor* shadowColor;
@property(retain, nonatomic) UIColor* color;
@property(retain, nonatomic) UIFont* font;
+(void)initialize;
+(id)newInstance;
+(id)getAlphaSet;
-(id).cxx_construct;
-(void)dealloc;
-(id)attributeStringForContent:(id)content;
-(id)styleStringForContent:(id)content withParserPosition:(NSParserPosition)parserPosition outputLastPosition:(NSParserPosition*)position;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(id)parseTextForStyles:(id)styles withParserPosition:(NSParserPosition*)parserPosition;
-(int)FindtheIndexToFillFullLine:(id)fillFullLine startIndex:(int)index endIndex:(int)index3 width:(int)width withFont:(id)font withError:(int)error;
-(id)arrayWithWordSplit:(id)wordSplit;
-(id)getStyle;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
@end

@interface RichTextView : UILabel {
	NSMutableArray* _arrParserObjects;
	UIColor* _oNormalBackgroundColor;
	UIColor* _oHighlightedBGColor;
	BOOL _bWholeField;
	BOOL _bHightlighted;
	BOOL _bEnableBGColor;
	UIFont* _oFont;
	float _fWidth;
	UIColor* _oTextColor;
	UIColor* _oTextHLColor;
	NSMutableArray* _arrStyles;
	NSString* _nsContent;
	CGRect _touchedRect;
	BOOL _bSourceUrlForLP;
	unsigned _parserType;
	id<TextLayoutDelegate> _layoutDelegate;
	id<ILinkEventExt> _linkDelegate;
	BOOL _bIsLongPressHandled;
	BOOL _bDismissHightLightOutside;
	BOOL _bHandleLongPress;
	BOOL _bTouchesPassOn;
	UIColor* _oNormalBGColor;
}
@property(assign, nonatomic) id<ILinkEventExt> linkDelegate;
@property(assign, nonatomic) BOOL bTouchesPassOn;
@property(assign, nonatomic) BOOL bEnableBGColor;
@property(retain, nonatomic) UIColor* oHighlightedBGColor;
@property(retain, nonatomic) UIColor* oNormalBGColor;
@property(assign, nonatomic) BOOL bSourceUrlForLP;
@property(assign, nonatomic) BOOL bDismissHightLightOutside;
@property(assign, nonatomic) BOOL bHandleLongPress;
@property(assign, nonatomic) unsigned parserType;
@property(retain, nonatomic) UIColor* oTextHLColor;
@property(retain, nonatomic) UIColor* oTextColor;
@property(assign, nonatomic) float fWidth;
@property(retain, nonatomic) UIFont* oFont;
@property(assign, nonatomic) id<TextLayoutDelegate> layoutDelegate;
+(id)getStyleString:(id)string font:(id)font width:(float)width parserType:(unsigned)type;
+(id)getStyleString:(id)string parserType:(unsigned)type;
+(CGSize)sizeForPrefixContent:(id)prefixContent TargetContent:(id)content TargetParserString:(id)string SuffixContent:(id)content4 font:(id)font width:(float)width parserType:(unsigned)type delegate:(id)delegate;
+(float)heightForPrefixContent:(id)prefixContent TargetContent:(id)content TargetParserString:(id)string SuffixContent:(id)content4 font:(id)font width:(float)width parserType:(unsigned)type delegate:(id)delegate;
+(id)getParserString:(id)string;
+(id)getParserString:(id)string parserType:(unsigned)type;
+(id)getStyleString:(id)string font:(id)font width:(float)width parserType:(unsigned)type delegate:(id)delegate;
+(float)getHeightForContent:(id)content font:(id)font width:(float)width parserType:(unsigned)type delegate:(id)delegate;
+(float)getHeightForContent:(id)content font:(id)font width:(float)width parserType:(unsigned)type;
+(void)initialize;
-(id).cxx_construct;
-(void)dealloc;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)delayedTouchesEnded:(id)ended;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)longPressOnTextEvent:(id)event;
-(void)longPressOnPhoneEvent:(id)event;
-(void)longPressOnLinkEvent:(id)event;
-(void)clickOnPhoneEvent:(id)event;
-(void)clickOnLinkEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(void)dismissHighLight;
-(BOOL)setContent:(id)content StyleString:(id)string;
-(BOOL)setPrefixContent:(id)content TargetContent:(id)content2 TargetParserString:(id)string SuffixContent:(id)content4;
-(BOOL)getStylesForContent:(id)content parserString:(id)string parserPosition:(NSParserPosition)position;
-(id)getParserString:(id)string;
-(id)getStyleString:(id)string;
-(id)getPatternStringFromContent:(id)content patternGenerator:(id)generator;
-(id)getParserByPaserType:(unsigned)type;
-(void)setContent:(id)content;
-(id)initParser:(unsigned)parser;
-(void)updateFrame:(float)frame;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
-(void)baseInit;
@end

@interface BaseStyle : NSObject {
	CGRect _frame;
	BOOL _bUserInteractionEnabled;
}
@property(assign, nonatomic) BOOL bUserInteractionEnabled;
@property(assign, nonatomic) CGRect frame;
-(id).cxx_construct;
-(void)drawInContext:(CGContextRef)context;
-(id)init;
@end

@interface ImageStyle : BaseStyle {
	UIImage* _oImage;
}
@property(retain, nonatomic) UIImage* oImage;
-(void)dealloc;
-(void)drawInContext:(CGContextRef)context;
@end

@interface LinkStyle : TextStyle {
	BOOL _bHighlighted;
	UIColor* _oHighlightedColor;
	NSString* _nsUrl;
	NSString* _nsSourceUrl;
	unsigned _eDataDectorType;
	BOOL _bDrawsUnderLine;
	BOOL _bBackgroundEnabled;
}
@property(assign, nonatomic) BOOL bBackgroundEnabled;
@property(assign, nonatomic) BOOL bDrawsUnderLine;
@property(assign, nonatomic) unsigned eDataDectorType;
@property(retain, nonatomic) NSString* nsSourceUrl;
@property(retain, nonatomic) NSString* nsUrl;
@property(retain, nonatomic) UIColor* oHighlightedColor;
@property(assign, nonatomic) BOOL bHighlighted;
-(void)dealloc;
-(void)drawInContext:(CGContextRef)context;
-(id)init;
@end

@interface TextStyle : BaseStyle {
	UIFont* _oFont;
	NSString* _nsContent;
	UIColor* _oTextColor;
	UIColor* _oDrawColor;
	UIColor* _shadowColor;
	CGSize shadowOffset;
	BOOL _bNewLine;
	CGSize _shadowOffset;
}
@property(assign, nonatomic) BOOL bNewLine;
@property(assign, nonatomic) CGSize shadowOffset;
@property(retain, nonatomic) UIColor* shadowColor;
@property(retain, nonatomic) UIColor* oDrawColor;
@property(retain, nonatomic) UIColor* oTextColor;
@property(retain, nonatomic) NSString* nsContent;
@property(retain, nonatomic) UIFont* oFont;
-(id).cxx_construct;
-(void)dealloc;
-(void)drawInContext:(CGContextRef)context;
-(id)init;
@end

@interface InteractionLabel : UILabel {
	UIColor* _normalBackgroundColor;
	UIColor* _highlightedBackgroundColor;
	id _target;
	SEL _selAction;
}
@property(retain, nonatomic) UIColor* highlightedBackgroundColor;
@property(retain, nonatomic) UIColor* normalBackgroundColor;
-(void)setTarget:(id)target action:(SEL)action;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
-(void)becomeHighlightedBackgroundColor;
-(void)becomeNormalBackgroundColor;
-(void)initMembers;
@end

@interface UrlLabel : UILabel {
	NSString* _urlString;
	NSString* _backupUrlString;
	id<ILinkEventExt> _linkDelegate;
	BOOL _ignoreHighlight;
	UIColor* _normalBackgroundColor;
	UIColor* _highlightedBackgroundColor;
}
@property(retain, nonatomic) UIColor* highlightedBackgroundColor;
@property(retain, nonatomic) UIColor* normalBackgroundColor;
@property(assign, nonatomic) BOOL ignoreHighlight;
@property(assign, nonatomic) id<ILinkEventExt> linkDelegate;
@property(retain, nonatomic) NSString* backupUrlString;
@property(retain, nonatomic) NSString* urlString;
-(void)dealloc;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)throwUrlMessage;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setHighlightedColor;
-(void)setNormalColor;
-(id)initWithFrame:(CGRect)frame;
@end

@interface FavRecordBody : NSObject {
	UITextView* _textView;
	UIView* _View;
}
@property(retain, nonatomic) UIView* View;
@property(retain, nonatomic) UITextView* textView;
@end

@interface FavRecordViewController : MMUIViewController <UITextFieldDelegate, UITextViewDelegate, UIScrollViewDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate> {
	FavRecordHead* _FavRecordHeadView;
	int _FavItemNum;
	UIScrollView* _scrollView;
	NSMutableArray* _FavRecordList;
	FavRecordToolBar* _FavRecordToolBarView;
	float m_fKeyboardHeight;
}
-(void)dealloc;
-(void)initView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)gotoPickerController;
-(void)gotoCameraController;
-(void)loadData;
-(void)initInputView;
-(void)updateHeight;
-(float)CalculateHeight;
-(void)viewDidLoad;
-(void)keyboardWillHde:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)removeNotificationObservers;
-(void)initNotificationObservers;
-(id)init;
@end

@interface RoundTableViewCell : UIView {
	UILabel* _leftLabel;
	UILabel* _rightLabel;
	UIImageView* _backgroundView;
	UIImageView* _accessoryView;
	int _accessoryViewType;
	id _target;
	SEL _selAction;
}
@property(retain, nonatomic) UILabel* rightLabel;
@property(retain, nonatomic) UILabel* leftLabel;
@property(assign, nonatomic) int accessoryViewType;
-(void)setTarget:(id)target action:(SEL)action;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)layoutSubviews;
-(void)setRightLabelText:(id)text;
-(void)setLeftLabelText:(id)text;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)becomeNormal;
-(void)becomeHighlight;
-(void)ensureSubviewsExist;
@end

@interface MMWebAddContactView : MMUIView <MessageObserverDelegate, PBMessageObserverDelegate> {
	NSString* m_nsUsrName;
	JSEvent* m_nsCallBack;
	MMDelegateProxy<WebAddContactDelegate>* m_delegate;
	MMLoadingView* m_loadingView;
	UIButton* m_btnConfirm;
	UIButton* m_btnCancel;
	UIButton* m_btnRetry;
	UIButton* m_btnAdd;
	UIImageView* m_backgroundView;
	CContact* m_oContact;
}
@property(assign, nonatomic) MMDelegateProxy<WebAddContactDelegate>* m_delegate;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleContact:(id)contact;
-(void)CreateVerify;
-(void)CreateSearch;
-(void)OnAddOk;
-(void)OnConfirm;
-(void)OnAdd;
-(void)OnCancel;
-(void)layoutSubviewToOrientation:(int)orientation;
-(void)UpdateView:(unsigned long)view;
-(void)initView;
-(void)dealloc;
-(id)initWithUsrName:(id)usrName CallBack:(id)back;
@end

@interface MMWebView : UIWebView {
	BOOL _canScrollVertical;
	BOOL _canScrollHorizontal;
	CGPoint _touchPoint;
}
@property(assign, nonatomic) BOOL canScrollHorizontal;
@property(assign, nonatomic) BOOL canScrollVertical;
-(id).cxx_construct;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface MMWebViewController : MMUIViewController <UIGestureRecognizerDelegate, UIActionSheetDelegate, UIWebViewDelegate, UIAlertViewDelegate, MMWebViewFontFloatViewDelegate, MMIconActionSheetDelegate, WebViewA8KeyLogicDelegate, WebViewJSLogicDelegate> {
	UIWebView* webView;
	UIImageView* m_toolbarView;
	UIButton* m_backButton;
	UIButton* m_forwardButton;
	UIButton* m_actionButton;
	UIActivityIndicatorView* m_activityView;
	MMURLHandler* m_urlHandler;
	WXGesture* m_gesture;
	NSString* m_initUrl;
	WebViewA8KeyLogicImpl* m_a8KeyLogicImpl;
	JSConsoleViewController* m_consoleViewController;
	WebViewJSLogicImpl* m_jsLogicImpl;
	MMDelegateProxy<MMWebViewDelegate>* m_delegate;
	BOOL m_bAutoSetTitle;
	UIImageView* m_imageView;
	NSMutableSet* m_jsTempAllowApiCalls;
	BOOL m_isPageDidLoaded;
	BOOL m_shouldOpenUrlInNewWebview;
	BOOL m_isDisableShareMenu;
	BOOL m_disalbeStartLoadGetA8Key;
	unsigned long m_addScence;
	MMTimeChecker* m_timerChecker;
	UIView* m_customLoadingView;
	BOOL m_bShouldForcedRotationToPortrait;
	unsigned long m_stat_enterTime;
	int m_loadingCount;
	MMTimeChecker* m_timerHistoryChecker;
	UILongPressGestureRecognizer* m_longPressGestureRecognizer;
	BOOL m_openAllPermission;
	BOOL m_isPageLoading;
	BOOL m_isLanscape;
	BOOL _m_canCache;
	NSMutableDictionary* m_extraInfo;
	int _m_webviewType;
	MMAnimationTipView* _m_animationTipView;
}
@property(retain, nonatomic) UIView* m_customLoadingView;
@property(retain, nonatomic) MMAnimationTipView* m_animationTipView;
@property(assign, nonatomic) BOOL m_isLanscape;
@property(assign, nonatomic) int m_webviewType;
@property(retain, nonatomic) NSMutableDictionary* m_extraInfo;
@property(assign, nonatomic) BOOL m_canCache;
@property(assign, nonatomic) MMDelegateProxy<MMWebViewDelegate>* m_delegate;
@property(retain, nonatomic) UIWebView* webView;
-(void)onFinishedHandleJSApi;
-(void)onStartedHandleJSApi:(id)api withFuncDef:(id)funcDef andReportKeyParam:(id)param;
-(id)getCurrentWebviewViewController;
-(BOOL)canAccessJSApi:(id)api;
-(void)onUpdatedPermisson;
-(void)getA8KeyFail:(int)fail;
-(void)doJsApiInitEvent;
-(void)showWXPayTip;
-(id)getCurrentUrl;
-(void)stopForcedRotationToPortrait;
-(void)startForcedRotationToPortrait;
-(void)keyboardDidShow:(id)keyboard;
-(void)removeNotificationObservers;
-(void)initNotificationObservers;
-(id)webviewController;
-(void)permitTempAccessOfJSApi:(id)jsapi;
-(BOOL)isTempAccessOfJSApiPermitted:(id)jsapiPermitted;
-(BOOL)isAccessPermitttedByPermissionBitSet:(id)set;
-(void)onPageNotifyFinishedLoading:(id)loading;
-(void)onDomReady:(id)ready;
-(BOOL)shareToFB;
-(void)dismissWebViewController;
-(void)setDisableWebAlertView:(BOOL)view;
-(void)hideToolbar:(BOOL)toolbar;
-(BOOL)isMenuAction:(SEL)action;
-(id)getRequestingOrCurrentUrl;
-(void)onSelectFont:(unsigned long)font;
-(void)dealloc;
-(void)cleanJSAPIDelegate;
-(BOOL)isSvrErrorTipForbidden;
-(void)willDisappear;
-(void)viewDidLoad;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)setCustomLoadingView:(id)view;
-(void)updateToolbar:(int)toolbar;
-(void)updateToolbarHistoryButtons;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)removeCustomLoadingView;
-(void)delaySetFontsWithSize:(id)size;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)pageLoadChecker;
-(void)handleJumpProfileUrl:(id)url profileRange:(NSRange)range;
-(void)delayHandleUrl:(id)url;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)delayPopForAppStore;
-(id)getUrlPermission:(id)permission;
-(BOOL)hasUrlPermission:(id)permission;
-(BOOL)isGetingA8Key;
-(void)goToURL:(id)url;
-(void)goForward;
-(void)goBack;
-(void)stop;
-(void)reload;
-(void)initGestureRecognizer;
-(void)onSwipeGestureRecognizer:(id)recognizer;
-(unsigned long)GetGeneralBitSet;
-(BOOL)IsBitsetSet:(unsigned long)set;
-(unsigned long)GetPermissionBitSet2;
-(unsigned long)GetPermissionBitSet;
-(void)done:(id)done;
-(void)adjustSubviewRects;
-(void)willDismissAndShow;
-(void)viewWillBeDismissed:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didAppear;
-(void)willAppear;
-(void)viewDidAppear:(BOOL)view;
-(void)gotoWebviewController:(id)controller;
-(void)loadHTMLString:(id)string baseURL:(id)url;
-(id)extraInfo;
-(void)StartLoadWeb;
-(void)setExtraInfoValue:(id)value forKey:(id)key;
-(void)setDisableShareMenu:(BOOL)menu;
-(void)setAddFriendScene:(unsigned long)scene;
-(void)setAutoSetTitle:(BOOL)title;
-(void)setWebviewType:(int)type;
-(void)timeCheckUpdateHistory;
-(void)onLongPressOnWebview:(id)webview;
-(void)enableLongPressDetect;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(id)initWithURL:(id)url presentModal:(BOOL)modal extraInfo:(id)info;
-(void)initToolbarView;
-(id)getShareUrl;
-(void)setPayTitle:(id)title;
-(void)setTitle:(id)title;
-(void)setRightBarButtonItemEnabled:(BOOL)enabled;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet didDismissWithItem:(id)item;
-(void)onOperate;
-(void)addSupportBrandToMenuAtEndOf:(id)of;
-(void)AddNewActionSheetCell2Array:(id)array WithText:(id)text WithImage:(id)image;
-(void)hideChangeFont;
-(void)exposeArticle;
-(void)showChangeFont:(unsigned long)font;
-(void)copyToPasteBoard;
-(void)openWithSafari;
-(BOOL)shareWithAppMessage:(id)appMessage;
-(BOOL)shareWithEmail;
-(BOOL)shareToFaceBook;
-(BOOL)shareToWeibo;
-(BOOL)shareToTimeline;
-(void)setFontWithSize:(int)size;
-(void)showJSLog;
-(void)promptForAuthInfo:(id)authInfo;
-(void)checkApiAuthorization:(id)authorization;
-(void)showJSLog:(id)log;
@end

@interface MMWebViewFontFloatView : MMUIButton {
	MMTransparentButton* btnFont1;
	MMTransparentButton* btnFont2;
	MMTransparentButton* btnFont3;
	MMTransparentButton* btnFont4;
	MMTransparentButton* btnClose;
	UIImageView* viewBg;
	UIView* view;
	unsigned long m_uiFontType;
	MMDelegateProxy<MMWebViewFontFloatViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MMWebViewFontFloatViewDelegate>* m_delegate;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFontType:(unsigned long)fontType attachToView:(id)view;
-(void)onClose;
-(void)onSetFont:(id)font;
-(void)onChangeFont:(id)font;
-(void)setFontType:(unsigned long)type;
@end

@interface BasePatternGenerator : NSObject {
}
-(id)patternForContent:(id)content range:(NSRange)range parser:(id)parser;
@end

@interface ParserPatternGenerator : BasePatternGenerator {
}
-(id)patternForContent:(id)content range:(NSRange)range parser:(id)parser;
@end

@interface StylePatternGenerator : BasePatternGenerator {
	NSParserPosition _startParserPosition;
}
@property(assign, nonatomic) NSParserPosition startParserPosition;
-(id).cxx_construct;
-(id)patternForContent:(id)content range:(NSRange)range parser:(id)parser;
-(id)init;
@end

@interface StylesArrayGenerator : BasePatternGenerator {
	NSParserPosition _stPosition;
	NSMutableArray* _arrStyles;
}
@property(assign, nonatomic) NSParserPosition stPosition;
-(id).cxx_construct;
-(void)dealloc;
-(id)patternForContent:(id)content range:(NSRange)range parser:(id)parser;
-(void)clearData;
-(id)getStyles;
-(id)init;
@end

@interface LinkAnchorParser : TextParser {
	NSString* _url;
	NSString* _sourceUrl;
	UIColor* _highlightedColor;
	BOOL _bBackgroundEnabled;
}
@property(retain, nonatomic) NSString* sourceUrl;
@property(retain, nonatomic) NSString* url;
+(id)newInstance;
-(void)dealloc;
-(id)attributeStringForContent:(id)content;
-(id)getStyle;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(id)styleStringForContent:(id)content withParserPosition:(NSParserPosition)parserPosition outputLastPosition:(NSParserPosition*)position;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
-(id)init;
@end

@interface ReaderMessageNodeView : UIView {
	NSArray* m_arrReaderWaps;
	id<ReaderMessageNodeViewDelegate> m_delegate;
	CMessageWrap* m_oMessageWrap;
}
-(void)resetNodeViewBackground;
-(void)handleLongPressEx:(id)ex;
-(void)ReaderItemClicked:(id)clicked;
-(void)BlogItemClickedUp:(id)up;
-(void)setHightline:(BOOL)hightline;
-(void)forwardMessage;
-(id)getArrReaderWaps;
-(void)setDelegate:(id)delegate;
-(void)onTap;
-(void)ShowReader:(id)reader;
-(void)formBlogNodeView:(id)view withFrame:(CGRect)frame;
-(void)formReaderNodeView:(id)view withFrame:(CGRect)frame;
-(void)formBlogReaderContentNodeWithMessageWrap:(id)messageWrap withFrame:(CGRect)frame;
-(void)formReaderContentNodeWithMessageWrap:(id)messageWrap withFrame:(CGRect)frame;
-(void)formReaderMultiContentNodeWithMessageWrap:(id)messageWrap withFrame:(CGRect)frame;
-(void)formReaderMessageNodeWithMessageWrap:(id)messageWrap withFrame:(CGRect)frame;
-(id)getItemLabel:(id)label with:(float)with size:(float)size;
-(id)getItemTitle:(float)title;
-(id)getAsyncImageWithFrame:(CGRect)frame;
-(id)addNickName:(id)name ToView:(id)view withFrame:(CGRect)frame;
-(id)getHighlightedImage:(unsigned long)image;
-(id)getTitleString:(id)string bBig:(BOOL)big bGray:(BOOL)gray;
-(id)getBigVideoImage;
-(id)getSmallVideoImage;
-(void)dealloc;
-(void)getArrReaderWaps:(id)waps;
@end

@interface SayHelloDataLogic : MMObject <FriendAsistSessionExt, ContactsItemViewDelegate, contactVerifyLogicDelegate, IAutoSetRemarkExt, IContactMgrExt> {
	unsigned long m_uiScene;
	id<SayHelloDataLogicDelegate> m_delegate;
	NSMutableArray* m_arrHellos;
	NSMutableDictionary* m_dicHellos;
}
@property(assign, nonatomic) id<SayHelloDataLogicDelegate> m_delegate;
+(id)getContactFrom:(id)from;
-(void)onModifyContact:(id)contact;
-(void)onSetStrangerRemark:(id)remark;
-(void)onFriendAssistClearMsg:(id)msg;
-(void)onFriendAssistRelpyMsg:(id)msg;
-(void)onFriendAssistAddMsg:(id)msg;
-(void)onFriendAssistUnreadCountChanged;
-(void)dealloc;
-(id)initWithScene:(unsigned long)scene delegate:(id)delegate;
-(unsigned long)getHelloCount;
-(void)contactVerifyOk:(id)ok opCode:(unsigned long)code;
-(void)onContactVerifyFail;
-(void)handleAddedContact:(id)contact;
-(void)clearMsg:(unsigned long)msg;
-(void)clearMsg:(unsigned long)msg ForIndex:(unsigned long)index;
-(id)getChatName:(unsigned long)name;
-(void)loadData:(unsigned long)data;
-(id)getContactForIndex:(unsigned long)index;
-(id)getContactForUserName:(id)userName;
-(void)removeArrHello:(id)hello;
@end

@interface SayHelloViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, SayHelloDataLogicDelegate, UIActionSheetDelegate, ContactsItemViewDelegate> {
	MMTableView* m_tableView;
	unsigned long m_uiScene;
	SayHelloDataLogic* m_DataLogic;
	CContactVerifyLogic* m_oContactVerifyLogic;
}
@property(assign, nonatomic) unsigned long m_uiScene;
+(void)makeHelloCell:(id)cell helloMsg:(id)msg delegate:(id)delegate;
+(void)OnViewDetail:(id)detail prarentViewController:(id)controller;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)OnSayHelloDataVerifyContactOK:(id)ok;
-(void)onContactsItemViewRightButtonClick:(id)click;
-(void)verifyContactWithOpCode:(id)opCode opcode:(unsigned long)opcode;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)OnClear;
-(id)GetClearTip;
-(id)getViewController;
-(void)OnSayHelloDataChange;
-(void)willAppear;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)updateNoHello;
-(void)initTableView;
-(void)initData;
@end

@interface MMSayHelloButton : UIButton <FriendAsistSessionExt> {
	CPushContact* m_oLastVerifyContact;
	NSString* m_nsUsrName;
	unsigned long m_uiUnReadCount;
	float m_fHeight;
}
-(void)onFriendAssistUnreadCountChanged;
-(unsigned long)GetUnReadCount;
-(void)UpdateView;
-(void)dealloc;
-(id)initWithUsrName:(id)usrName Height:(float)height;
@end

@interface MMWebLoginController : MMUIViewController {
}
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(void)beginScan;
-(void)onBack;
@end

@interface SmallCameraView : UIImageView {
	id<SmallCameraViewDelegate> _delegate;
	BOOL _hasMoved;
}
@property(assign, nonatomic) id<SmallCameraViewDelegate> delegate;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WCEditMemberPannel : MMUIView {
	NSString* _descriptionTip;
	UIImageView* _backgroundView;
	UIImageView* _pannelBackgroundView;
	UIScrollView* _pannelScrollView;
	UIButton* _pannelAddButton;
	UIImageView* _pannelLineView;
	UILabel* _pannelDescLabel;
	UIButton* _closeButton;
	MMDelegateProxy<WCEditMemberPannelDelegate>* _pannelDelegate;
	MMDelegateProxy<WCEditMemberPannelDataSource>* _pannelDataSource;
}
@property(retain, nonatomic) NSString* descriptionTip;
@property(assign, nonatomic) MMDelegateProxy<WCEditMemberPannelDataSource>* pannelDataSource;
@property(assign, nonatomic) MMDelegateProxy<WCEditMemberPannelDelegate>* pannelDelegate;
-(void)layoutSubviews;
-(void)dealloc;
-(void)hiddenAddButton:(BOOL)button;
-(void)showAnimation;
-(void)reload;
-(id)initWithFrame:(CGRect)frame andDecriptionTip:(id)tip;
-(id)viewForItem:(unsigned)item;
-(unsigned)numberOfItems;
-(void)onClickAddButton;
-(void)onClickCloseButton;
-(void)initView;
@end

@interface VoipTalkingView : UIView <SmallCameraViewDelegate, AVVideoDeviceDelegate, IVOIPModeSwitchExt, IVOIPExt, VoipStatusDelegate> {
	int _status;
	UIView* _backgroundView;
	UIImageView* _footerView;
	MMTimer* _timer;
	UIButton* _tipsView;
	UIImageView* _timeBkgView;
	VOIPVideoRender* _peerRender;
	VOIPVideoRender* _localRender;
	UIButton* _flipCameraBtn;
	UIButton* _hangupBtn;
	SmallCameraView* _smallCameraView;
	UIView* _bigCameraView;
	UIView* _peerRenderView;
	BOOL _isMyselfInMainView;
	UILabel* _EarModeTips;
	BOOL _isEndCall;
	AVAudioPlayer* _player;
	UIButton* _bigTipsView;
	VoipStatusControlView* _statusControl;
	int _loudspeakerStatus;
	id<NSObject, VoipTalkingViewDelegate> _delegate;
}
@property(assign, nonatomic) id<NSObject, VoipTalkingViewDelegate> delegate;
-(void)OnSyncError:(id)error ErrNo:(int)no;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnInterrupt:(id)interrupt;
-(void)OnBeHanguped:(id)hanguped;
-(void)onHangup;
-(void)onFlipCamera;
-(void)OnLightInterrupt:(BOOL)interrupt;
-(void)OnMonitorWithSendFPS:(int)sendFPS andRecvFPS:(int)fps;
-(void)onSmallCameraViewSingleTap;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)OnStatusChanged:(int)changed withStatus:(int)status;
-(void)OnRemoteVideoMode;
-(void)OnRemoteEarMode;
-(void)OnLocalVideoMode;
-(void)OnLocalEarMode;
-(void)OnBothVideoMode;
-(void)OnRemoteEarModeFor2G;
-(void)OnLocalEarModeFor2G;
-(void)videoDeviceCameraBack:(id)back;
-(void)videoDeviceCameraFront:(id)front;
-(void)updateEarModeStatusView:(int)view;
-(void)setVoiceStatusOn;
-(void)initDebugFPSView;
-(void)initTipsView;
-(void)initFooterView;
-(void)initStatusControlView;
-(void)initCarmeraView;
-(void)initFlipCameraBtn;
-(void)initBackgroundView;
-(void)initView;
-(void)stopPlaySound;
-(void)playTipsSound:(id)sound ofType:(id)type;
-(void)asyncPlayTipsSound;
-(void)playSound:(id)sound OfType:(id)type;
-(void)updateInputOutputRender:(BOOL)render;
-(void)updateTipsView;
-(void)updateTipsStatusLabel;
-(void)updateLoudspeakerStatus;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VoipAlertView : UIWindow {
	id<VoipAlertViewDelegate> _mydelegate;
	int _inviteType;
}
@property(assign, nonatomic) id<VoipAlertViewDelegate> delegate;
-(void)onInvite;
-(void)onCancel;
-(void)appearWithAnimation;
-(void)initView;
-(id)initWithFrame:(CGRect)frame andInviteType:(int)type;
@end

@interface ReuseObjectController : NSObject {
	NSMutableDictionary* _dicReuseObjects;
}
+(id)sharedInstance;
+(void)initialize;
-(id)getObjectWithReuseIdentifier:(id)reuseIdentifier;
-(void)addObject:(id)object reuseIdentifier:(id)identifier;
-(void)DidReceiveMemoryWarning:(id);
-(void)dealloc;
-(id)init;
@end

@interface EGORefreshTableHeaderView : MMUIView {
	int m_pulldownHeight;
	int _state;
	MMDelegateProxy<EGORefreshTableHeaderDelegate>* delegate;
}
@property(assign, nonatomic) MMDelegateProxy<EGORefreshTableHeaderDelegate>* delegate;
@property(assign, nonatomic) int state;
-(void)dealloc;
-(void)egoRefreshScrollViewDataSourceDidFinishedLoading:(id)egoRefreshScrollViewDataSource;
-(void)egoRefreshScrollViewDidEndDragging:(id)egoRefreshScrollView;
-(void)egoRefreshScrollViewDidScroll:(id)egoRefreshScrollView;
-(void)onStateOfLoading;
-(void)onStateOfNormal;
-(void)onStateOfPulling;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMRefreshTableFooterView : MMUIControl {
	int m_state;
	float m_heightLimit;
	MMDelegateProxy<MMRefreshTableFooterDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MMRefreshTableFooterDelegate>* m_delegate;
@property(assign, nonatomic) float m_heightLimit;
-(void)refreshScrollViewDataSourceDidFinishedLoading:(id)refreshScrollViewDataSource;
-(void)refreshScrollViewDidScroll:(id)refreshScrollView;
-(void)removeClickAction;
-(void)onClick;
-(void)setState:(int)state;
-(void)onStateOfNoData:(id)noData;
-(void)onStateOfNoMoreData:(id)noMoreData;
-(void)onStateOfLoading;
-(void)onStateOfNormal;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface ImageScrollView : MMUIScrollView <UIScrollViewDelegate, MMImageScrollViewHelperDelegate> {
	UIImageView* imageView;
	UIActivityIndicatorView* mActivityIndicator;
	MMImageScrollViewHelper* m_scrollViewHelper;
	BOOL isLoaded;
	MMDelegateProxy<ImageScrollViewDelegate>* m_delegate;
}
@property(copy, nonatomic) NSArray* gestureRecognizers;
@property(assign, nonatomic) float maximumZoomScale;
@property(assign, nonatomic) float minimumZoomScale;
@property(assign, nonatomic) float zoomScale;
@property(assign, nonatomic) CGRect frame;
@property(assign, nonatomic) BOOL isLoaded;
@property(assign) MMDelegateProxy<ImageScrollViewDelegate>* m_delegate;
-(void)LongPressEvents;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)getImage;
-(void)displayImage:(id)image withFrame:(CGRect)frame;
-(void)displayImage:(id)image withFrame:(CGRect)frame FullScreen:(BOOL)screen;
-(void)reloadView:(id)view FullScreen:(BOOL)screen;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(id)getScrollView;
-(id)viewForZooming;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)onSingleTap:(id)tap;
-(void)onDoubleTap:(id)tap;
@end

@interface MsgImageDownloadView : MMUIView {
	MMLoadingView* m_loadingView;
	MMDelegateProxy<ImageScrollViewDelegate>* m_delegate;
}
@property(assign) MMDelegateProxy<ImageScrollViewDelegate>* m_delegate;
@property(retain, nonatomic) MMLoadingView* m_loadingView;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)initGestureRecognizer;
-(void)onSingleTap:(id)tap;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MultiImageScrollView : MMUIScrollView <UIScrollViewDelegate, ImageScrollViewDelegate, UIActionSheetDelegate> {
	NSMutableDictionary* dicVisiblePageIndex;
	int m_iNumberOfPages;
	int m_iCurrentPage;
	MMAnimationTipView* m_tipView;
	BOOL m_bFromPicker;
	MMDelegateProxy<MultiImageScrollViewDelegate>* m_delegate;
	MMUIViewController* m_viewController;
}
@property(assign, nonatomic) BOOL m_bFromPicker;
@property(assign, nonatomic) int m_iCurrentPage;
@property(assign, nonatomic) int m_iNumberOfPages;
@property(assign, nonatomic) MMDelegateProxy<MultiImageScrollViewDelegate>* m_delegate;
@property(assign, nonatomic) MMUIViewController* m_viewController;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(id)getPhotoatIndex:(unsigned)index;
-(void)updatePhotoatIndex:(unsigned)index;
-(void)setPage:(unsigned long)page atIndex:(unsigned)index;
-(void)updatePageCount:(unsigned long)count;
-(unsigned)imageCount;
-(id)viewAtPage:(unsigned)page frame:(CGRect)frame;
-(id)imageAtPage:(unsigned)page;
-(CGPoint)contentOffsetForPagingScrollView;
-(CGSize)contentSizeForPagingScrollView;
-(CGRect)frameForPageAtIndex:(unsigned)index;
-(CGRect)frameForPagingScrollView:(BOOL)pagingScrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(BOOL)isDisplayingPageForIndex:(unsigned)index;
-(void)tilePages;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)initScrollView;
-(void)onDoubleTap:(id)tap;
-(void)onSingleTap:(id)tap;
-(void)handleViewWillDisappear;
-(void)handleViewWillAppear;
-(void)showStatusBar;
-(void)hideStatusBar;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)addToFavorites;
-(void)forwardMessage;
-(void)onOperate;
-(void)onSavedPhotosAlbum;
@end

@interface AppEmoticonPreviewViewController : MMUIViewController <IMsgExt, UIAlertViewDelegate, UIActionSheetDelegate> {
	NSString* _usrname;
	CMessageWrap* _msgWrap;
	BOOL _isDownloading;
	BOOL _isRegister;
	MMProgressView* _progressView;
	UILabel* _progressLabel;
	MMAnimationTipView* _tipView;
	id _singleTapOnNav;
	UIView* _bkgView;
}
@property(retain, nonatomic) id singleTapOnNav;
@property(retain, nonatomic) CMessageWrap* msgWrap;
@property(retain, nonatomic) NSString* username;
-(void)onSingleTap:(id)tap;
-(void)setFullScreen:(BOOL)screen;
-(void)removeNvGestureRecognizer;
-(void)addNvGestureRecognizer;
-(void)onSingleTapOnNavigationBar:(id)bar;
-(void)showStatusBar;
-(void)hideStatusBar;
-(void)addSingleTapEvent;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onSaveEmoticon:(id)emoticon;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)updateGifView;
-(void)initBottomView;
-(void)initDownloadingView;
-(void)initDownloadedView;
-(void)viewDidLoad;
-(void)addBackgroundView;
-(void)SetProgressHide:(BOOL)hide;
-(void)SetProgress:(unsigned long)progress;
-(id)GetShowStringBySize:(unsigned long)size;
-(void)ShowProgressView;
-(void)StopDownload;
-(void)StartDownload;
-(void)onOperate;
-(void)onReturn;
-(void)launch:(id)launch;
-(void)dealloc;
-(id)init;
@end

@interface SetPassowrdViewController : LoginBaseViewController <PasswordLogicDelegate, UIAlertViewDelegate> {
	id<SetPassowrdViewControllerDelegate> m_delegate;
	NSString* m_nsTicket;
	PasswordLogic* m_setPasswdLogic;
	NSString* m_nsHeaderTitle;
	unsigned long m_uiFromScene;
	UIView* m_headerView;
}
@property(assign, nonatomic) unsigned long m_uiFromScene;
@property(retain, nonatomic) NSString* m_nsHeaderTitle;
@property(retain, nonatomic) NSString* m_nsTicket;
@property(assign, nonatomic) id<SetPassowrdViewControllerDelegate> m_delegate;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(BOOL)isHeaderViewShownAsSection;
-(id)init;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initHeaderView;
-(id)getHeaderView;
-(void)initData;
-(void)initFooterView;
-(void)nextStep:(id)step;
-(void)returnBack:(id)back;
-(void)doChangePassword;
-(void)unknownFail;
-(void)setPassowrdFail;
-(void)setPasswordOK;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)textFieldTextDidChange:(id)textFieldText;
@end

@interface SettingMyAccountInfoViewController : MMUIViewController <VerifyPhoneDelegate, ICertInfoMgrExt, IMMFacebookMgrExt, SetPassowrdViewControllerDelegate, PasswordLogicDelegate, settingModifyEmailDelegate, IQQAccountMgrExt, settingModifyAliasDelegate, IUpdateProfileMgrExt> {
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapCellToCellType;
	CertInfo* m_certInfo;
	PasswordLogic* m_passwdLogic;
	MMTableViewInfo* m_tableViewInfo;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)saveNewAlias;
-(void)willShow;
-(void)onProfileChange;
-(void)OnUnBindQQOK;
-(void)onUnBindFacebookFinish:(unsigned long)finish;
-(void)onBindFacebookFinish:(unsigned long)finish;
-(void)ReloadData;
-(void)unknownFail;
-(void)checkHaveNotSetPassword;
-(void)checkHaveSetPassword;
-(void)setPasswordOK;
-(void)passwordLogicPause;
-(void)passwordLogicStart;
-(void)passwordLogicCancel;
-(void)verifyPassowrdOK:(id)ok;
-(void)verifyPassowrdFail;
-(void)showBigChatRoom;
-(void)setSaveDevice;
-(void)setPassword;
-(void)modifyEmail;
-(void)showSetPassword:(id)password;
-(void)showModifyEmailView:(BOOL)view;
-(void)showFacebook;
-(void)showWhatsVView;
-(void)bindPhoneReturn;
-(void)showBindPhone;
-(void)showModifyQQView;
-(void)saveNewEmail;
-(void)makeVInfoCell:(id)cell;
-(void)makeSafeDeviceCell:(id)cell;
-(void)OnUpdateCertInfo;
-(void)dealloc;
-(void)viewDidLoad;
-(void)undoRegester;
-(void)doRegester;
-(void)reloadTableData;
-(void)initBigChatRoomView;
-(void)initVerifyCellData;
-(void)initSecurityCellData;
-(void)initAccountCellData;
-(void)initWeChatIDView;
-(void)showModifyUserName;
-(int)getLinesForV:(id)v;
@end

@interface BindPhoneInfoViewController : AccountBaseViewController <UIAlertViewDelegate, PBMessageObserverDelegate, WCAccountBindPhoneControlLogicDelegate> {
	MMAnimationTipView* m_tipView;
	int m_alertStatus;
	UIImageView* m_bindImageView;
	UIButton* m_unBoundButton;
	UIButton* m_inviteFriendButton;
	MMDelegateProxy<VerifyPhoneDelegate>* m_delegate;
	MMTableViewInfo* m_tableViewInfo;
	unsigned long m_uiFromScene;
	WCAccountBindPhoneControlLogic* m_bindLogic;
}
@property(assign, nonatomic) MMDelegateProxy<VerifyPhoneDelegate>* m_delegate;
-(id)init;
-(void)dealloc;
-(void)bindPhoneReturn;
-(void)onWCAccountBindPhoneControlLogicStop;
-(void)popBack;
-(void)makeCell:(id)cell;
-(void)viewDidLoad;
-(void)initTableView;
-(void)dismissAndBack:(id)back;
-(void)updateView;
-(void)showNoVerifyView;
-(void)showBindedView;
-(void)updateInviteFriendBtnTitle;
-(void)onSyncAddressBookSwitch:(id)aSwitch;
-(void)cancelCloseSyncAddressBook:(id)book;
-(void)closeSyncAddressBook;
-(void)showNoBindView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onDelete:(id)aDelete;
-(void)onUnBind:(id)bind;
-(void)onBind:(id)bind;
-(void)startSyncAddressBook;
-(void)onUnBindAccount;
-(void)unBoundFaild;
-(void)unBoundSucess;
-(void)showInviteFriendView;
-(void)showValifyView;
-(id)getNotVerifyPhone;
-(id)getBoundPhone;
-(BOOL)notVerifyed;
-(BOOL)hasBound;
@end

@interface CountryCodePickerViewController : MMSearchBarDisplayController <UITableViewDelegate, UITableViewDataSource> {
	MMDelegateProxy<CountryCodePickerDelegate>* m_delegate;
	NSArray* m_arrData;
	unsigned long m_curSelectedSection;
	unsigned long m_curSelectedRow;
	MMTableView* m_tableView;
	BOOL m_bSearching;
	NSMutableArray* m_arrFilteredData;
	NSMutableArray* m_arrAllKeys;
	NSMutableDictionary* m_dicKeyToCountryCode;
}
@property(assign, nonatomic) MMDelegateProxy<CountryCodePickerDelegate>* m_delegate;
-(void)dealloc;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)doSearch:(id)search;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)setCurSelectedCountryCode:(id)code;
-(void)scrollToSelected;
-(void)viewDidLoad;
-(void)initSearchBar;
-(id)init;
-(void)initData;
@end

@interface VerifyCodeByVoiceViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, VoiceVerifyLanguageDelegate, PBMessageObserverDelegate, UIAlertViewDelegate> {
	UIButton* m_VoiceBtn;
	MMTableView* m_tableView;
	NSString* m_nsLanguageName;
	NSString* m_nsLanguageCode;
	NSString* m_nsPhoneNumber;
	id<VerifyCodeByVoiceViewControllerDelegate> m_delegate;
	unsigned long m_uiReadyOpcode;
	unsigned long m_uiVerifyCGI;
}
@property(assign, nonatomic) unsigned long m_uiVerifyCGI;
@property(assign, nonatomic) unsigned long m_uiReadyOpcode;
@property(assign, nonatomic) id<VerifyCodeByVoiceViewControllerDelegate> m_delegate;
@property(retain, nonatomic) NSString* m_nsLanguageCode;
@property(retain, nonatomic) NSString* m_nsLanguageName;
@property(retain, nonatomic) NSString* m_nsPhoneNumber;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)opWaitVerify;
-(void)opFreqLimited;
-(void)onSelectLanguage:(id)language Code:(id)code;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidLoad;
-(void)initFooterView;
-(void)initHeaderView;
-(void)dealloc;
-(void)onGetVerifyCode:(id)code;
-(void)disMiss;
-(void)initLanguage;
@end

@interface VerifyPhoneViewController : MMUIViewController <IMMFacebookMgrExt, UIAlertViewDelegate, PBMessageObserverDelegate, VerifyCodeByVoiceViewControllerDelegate, IAutoVerifySMSExt> {
	UITextField* m_verifyCode;
	MMDelegateProxy<VerifyPhoneDelegate>* m_delegate;
	int m_getVerifyCodeCount;
	unsigned long m_uiFromScene;
	NSString* m_nsPhoneNumber;
	BOOL m_bShouldNotRequestValifyCode;
	NSString* m_nsTicket;
	NSString* m_nsAuthTicket;
	NSString* m_nsLanguageCode;
	unsigned long m_uiReadyOpcode;
	unsigned long m_uiCheckOpcode;
	unsigned long m_uiVerifyCGI;
}
@property(assign, nonatomic) unsigned long m_uiVerifyCGI;
@property(assign, nonatomic) unsigned long m_uiCheckOpcode;
@property(assign, nonatomic) unsigned long m_uiReadyOpcode;
@property(assign, nonatomic) unsigned long m_uiFromScene;
@property(retain, nonatomic) NSString* m_nsLanguageCode;
@property(retain, nonatomic) NSString* m_nsAuthTicket;
@property(retain, nonatomic) NSString* m_nsTicket;
@property(assign, nonatomic) BOOL m_bShouldNotRequestValifyCode;
@property(retain, nonatomic) NSString* m_nsPhoneNumber;
@property(assign, nonatomic) MMDelegateProxy<VerifyPhoneDelegate>* m_delegate;
-(void)OnHandleOpenAutoVerifySMS:(id)sms;
-(id)init;
-(void)dealloc;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)viewDidLoad;
-(id)getCloseLink;
-(void)onCloseLink;
-(void)jumpToUnProtectPage;
-(id)checkShowVoiceBtn:(CGRect)btn;
-(void)onLoginByFacebook:(id)facebook;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onGetVerifyCodeByVoice:(id)voice;
-(void)onGetVerifyCode:(id)code;
-(void)onVerify:(id)verify;
-(void)verify:(id)verify;
-(void)onCallVoiceVerify:(id)verify;
-(void)handleVerifiedOk:(id)ok;
-(void)showSyncAddressBookAlert;
-(void)regByPhoneVerifySucceed:(id)succeed;
-(void)removeRegisterInfo;
-(void)saveRegisterInfo;
-(void)bindPhoneOKReturn;
-(void)trySyncAddressBook;
-(void)opFreqLimited;
-(void)networkFaild;
-(void)forwardError;
-(void)sendVerifyCodeFail;
-(void)verifyFaild;
-(void)bindFaild;
-(void)syncAddressBook;
@end

@interface VoiceVerifyLanguageViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource> {
	unsigned long m_uiCurIndex;
	unsigned long m_uiCurWorkingIndex;
	NSArray* m_arrLanguages;
	NSArray* m_arrLanguageDisplayNames;
	MMTableView* m_tableView;
	id<VoiceVerifyLanguageDelegate> m_delegate;
}
@property(assign, nonatomic) id<VoiceVerifyLanguageDelegate> m_delegate;
+(id)GetLanguageCodeByPhoneNumber:(id)number;
+(id)GetLanguageNameByLanguageCode:(id)code;
+(id)GetLanguageCodes;
+(id)GetLanguageNames;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)OnBack;
-(void)dealloc;
-(void)viewDidLoad;
-(id)initWithLanguageCode:(id)languageCode;
-(void)initLanguageData;
@end

@interface SettingBindQQVerifyViewController : MMUIViewController <MessageObserverDelegate, UIAlertViewDelegate> {
	MMLoadingView* m_loadingView;
	MMAnimationTipView* m_tipView;
	NSString* m_nsUsrName;
	NSString* m_nsPwd;
	UITextField* m_tfVerifyCode;
	unsigned long m_uiEventID;
	NSData* m_dtImg;
	NSString* m_nsVerifyID;
	UIViewController* m_vcAccount;
	id<ReturnToSettingAccoutDelegate> m_delReturn;
	unsigned long m_uiOpCode;
	UIButton* m_btVerify;
	NSString* m_nsImgEncryptKey;
}
@property(retain, nonatomic) NSString* m_nsImgEncryptKey;
@property(retain, nonatomic) UIButton* m_btVerify;
@property(assign, nonatomic) id<ReturnToSettingAccoutDelegate> m_delReturn;
@property(retain, nonatomic) UIViewController* m_vcAccount;
@property(retain, nonatomic) NSString* m_nsVerifyID;
@property(retain, nonatomic) NSData* m_dtImg;
@property(retain, nonatomic) UITextField* m_tfVerifyCode;
@property(retain, nonatomic) NSString* m_nsPwd;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)ReturnToBindView:(id)bindView;
-(void)GetVerifyImg:(id)img;
-(void)LogIn:(id)anIn;
-(unsigned long)CreateBindQQEvent:(unsigned long)event;
-(void)UpdateVerifyImg:(id)img Img:(id)img2;
-(BOOL)CheckInputValid;
-(void)StopLoading;
-(void)StartLoading;
@end

@interface SettingBindQQViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, MessageObserverDelegate, ReturnToSettingAccoutDelegate, UIAlertViewDelegate> {
	MMTableView* m_tableView;
	MMLoadingView* m_loadingView;
	MMAnimationTipView* m_tipView;
	NSString* m_nsUsrName;
	NSString* m_nsPwd;
	UITextField* m_tfUsrName;
	UITextField* m_tfPwd;
	unsigned long m_uiEventID;
	UIViewController* m_vcAccount;
}
@property(retain, nonatomic) UIViewController* m_vcAccount;
@property(retain, nonatomic) UITextField* m_tfPwd;
@property(retain, nonatomic) UITextField* m_tfUsrName;
@property(retain, nonatomic) NSString* m_nsPwd;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)ReturnToSettingAccout;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)DismissSelf;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCellOfPwd:(id)pwd;
-(void)makeCellOfQQ:(id)qq;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)LogIn:(id)anIn;
-(void)goToPassword:(id)password;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
-(unsigned long)CreateBindQQEvent;
-(BOOL)CheckInputValid;
-(void)StopLoading;
-(void)StartLoading;
-(void)ShowVerifyController:(id)controller Img:(id)img Key:(id)key;
@end

@interface SettingModifyQQViewController : AccountBaseViewController <UIAlertViewDelegate, IQQAccountMgrExt> {
	unsigned long m_uiUin;
	MMTableViewInfo* m_tableViewInfo;
	UIViewController* m_vcAccount;
}
@property(retain, nonatomic) UIViewController* m_vcAccount;
@property(assign, nonatomic) unsigned long m_uiUin;
-(void)makeCell:(id)cell;
-(void)dealloc;
-(void)viewDidLoad;
-(void)undoRegester;
-(void)doRegester;
-(void)OnBindQQOK;
-(void)OnUnBindQQOK;
-(void)updateViewOnQQChange;
-(id)getHeaderView;
-(void)updateTableCell;
-(void)onCancel:(id)cancel;
-(void)ShowBindQQView;
-(void)onUnBind:(id)bind;
-(void)onUnBindAccount;
@end

@interface SettingUnbindQQViewController : SettingBaseViewController <PasswordLogicDelegate, IQQAccountMgrExt> {
	NSString* m_nsTicket;
	PasswordLogic* m_verifyPasswdLogic;
}
@property(retain, nonatomic) NSString* m_nsTicket;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidLoad;
-(void)undoRegester;
-(void)doRegester;
-(void)OnLocalUnBindQQOK;
-(void)OnUnBindQQFail;
-(void)OnUnBindQQOK;
-(void)passwordLogicPause;
-(void)passwordLogicStart;
-(void)passwordLogicCancel;
-(void)verifyPassowrdOK:(id)ok;
-(void)verifyPassowrdFail;
-(void)unknownFail;
-(void)onUnBindQQ;
-(void)startVerityPasswd;
-(void)updateUnbindOK;
-(void)updateViewWithIcon:(id)icon tip:(id)tip;
-(void)onDone:(id)done;
-(void)onCancel:(id)cancel;
@end

@interface LoginLogic : NSObject <MessageObserverDelegate, IDCHostMgrExt, IRsaCertMgrExt> {
	NSDictionary* m_dicEventInfo;
	id<LoginLogicDelegate> m_delAuth;
	NSDictionary* m_dicAuthRespInfo;
}
@property(retain, nonatomic) NSDictionary* m_dicAuthRespInfo;
@property(assign, nonatomic) id<LoginLogicDelegate> m_delAuth;
-(void)OnRsaCertFail;
-(void)OnRsaCertAuthAgain;
-(void)OnAuthAgain;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(unsigned long)CreateAuthEvent:(id)event;
-(unsigned long)InternalCreateAuth;
-(void)dealloc;
-(id)init;
@end

@interface AccountBaseViewController : MMUIViewController <PBMessageObserverDelegate> {
}
-(void)dealloc;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onUnBindAccount;
-(void)prepareToUnbindAccount:(unsigned long)unbindAccount;
-(void)onCheckUnbindFail;
@end

@interface FacebookImagePickerController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, IMMFacebookMgrExt, FBGridViewDelegate, UIAlertViewDelegate> {
	MMFacebookMgr* m_fbMgr;
	MMTableView* m_tableView;
	NSMutableArray* m_albumArray;
	NSMutableDictionary* m_coversCache;
	NSThread* _downloadCoversThread;
	NSString* albumURL;
	int nextIndex;
	BOOL _isSinglePick;
	BOOL _isDownloading;
	BOOL _shouldStopDownload;
	MMDelegateProxy<FacebookImagePickerControllerDelegate>* _fbIPDelegate;
	unsigned long _maxSelectNum;
}
@property(assign, nonatomic) MMDelegateProxy<FacebookImagePickerControllerDelegate>* _fbIPDelegate;
@property(assign, nonatomic) unsigned long _maxSelectNum;
@property(assign, nonatomic) BOOL _isSinglePick;
-(void)pickedImagePaneDidFinishPickingImages:(id)pickedImagePane;
-(void)onGetPhotoByIDFailed:(id)failed error:(id)error;
-(void)getNextPhoto;
-(void)onGetPhotoByIDFinish:(id)finish;
-(void)onGetMyAlbumsFinish:(id)finish;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)OnCancel;
-(id)getFBAlbumPath;
-(void)OnReturn;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initData;
@end

@interface PasswordLogic : MMObject <PBMessageObserverDelegate, UITextFieldDelegate, UIAlertViewDelegate> {
	id<PasswordLogicDelegate> m_delegate;
	unsigned long m_opCode;
	unsigned long m_uiScene;
	NSString* m_nsPwdMd5;
	NSString* m_nsPwd2;
	NSString* m_nsVerifyCode;
	NSString* m_nsVerifyCodeID;
	NSData* m_dtVerifyImg;
	UIButton* m_btnVerifyImg;
	NSString* m_nsImgEncryptKey;
	NSData* m_dtKSid;
	UIAlertView* m_alertViewVerifyCode;
	UIAlertView* m_alertViewVerifyPwd;
	NSString* m_nsTitle;
	NSString* m_nsMessage;
}
@property(retain, nonatomic) NSData* m_dtKSid;
@property(retain, nonatomic) NSString* m_nsImgEncryptKey;
@property(retain, nonatomic) UIButton* m_btnVerifyImg;
@property(retain, nonatomic) NSData* m_dtVerifyImg;
@property(retain, nonatomic) NSString* m_nsVerifyCodeID;
@property(retain, nonatomic) NSString* m_nsVerifyCode;
@property(retain, nonatomic) NSString* m_nsPwd2;
@property(retain, nonatomic) NSString* m_nsPwdMd5;
@property(retain, nonatomic) NSString* m_nsMessage;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(assign, nonatomic) unsigned long m_uiScene;
@property(assign, nonatomic) unsigned long m_opCode;
@property(assign, nonatomic) id<PasswordLogicDelegate> m_delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)MessageReturnVerifyPasswd:(id)passwd Event:(unsigned long)event;
-(void)MessageReturnCheckPasswd:(id)passwd Event:(unsigned long)event;
-(void)MessageReturnSetPasswd:(id)passwd Event:(unsigned long)event;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)dealloc;
-(id)init;
-(void)startSetPassword:(id)password;
-(void)startCheckPassword:(unsigned long)password;
-(void)startVerifyPassword;
-(void)showVerifyPassFailAlert;
-(void)showFailAlert:(id)alert message:(id)message;
-(void)showVerifyAlert;
-(void)showPasswordAlert;
-(void)addVerifyCodeViewToAlert:(id)alert;
-(void)updateVerifyImg;
-(void)addTextFieldToAlert:(id)alert;
-(void)willPresentAlertView:(id)view;
-(void)doGetVerifyImg;
-(void)doVerifyPwd:(id)pwd;
-(void)doVerifyCode:(id)code;
-(void)getPassword:(id)password;
@end

@interface SettingModifyEmailViewController : AccountBaseViewController <IUpdateProfileMgrExt, MessageObserverDelegate, settingModifyEmailDelegate, UIAlertViewDelegate, SetPassowrdViewControllerDelegate> {
	UITextField* m_textField;
	NSString* m_nsLastEmail;
	MMTableViewInfo* m_tableViewInfo;
	BOOL m_bEdit;
	BOOL m_bHasPwd;
	BOOL m_bSaveAndReturn;
	id<settingModifyEmailDelegate> m_delegate;
}
@property(assign, nonatomic) BOOL m_bSaveAndReturn;
@property(assign, nonatomic) BOOL m_bHasPwd;
@property(assign, nonatomic) BOOL m_bEdit;
@property(assign, nonatomic) id<settingModifyEmailDelegate> m_delegate;
@property(retain, nonatomic) NSString* m_nsLastEmail;
@property(retain, nonatomic) UITextField* m_textField;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)onProfileChange;
-(void)CgiFail:(id)fail;
-(void)UnBindOk;
-(void)BindOk;
-(void)saveNewEmail;
-(void)sendValidateEmail;
-(void)onUnBindAccount;
-(void)makeEmailCell:(id)cell;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)textFieldTextDidChange:(id)textFieldText;
-(void)viewDidLoad;
-(void)initView;
-(void)updateTableCell;
-(void)updateFooterView;
-(void)updateBarItem;
-(void)stopLoading;
-(void)startLoading;
-(void)onSave;
-(void)onEdit;
-(void)onReturn;
-(void)onUnBind;
-(void)onUnBindConfirm;
-(BOOL)isExistEmail;
-(BOOL)isVerify;
-(BOOL)isEdit;
@end

@interface FacebookGridViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, IMMFacebookMgrExt, PickedImagePaneDelegate, FBPickedImagePaneDelegate, UIAlertViewDelegate> {
	MMTableView* m_tableView;
	NSDictionary* m_albumDict;
	NSMutableArray* m_photosData;
	NSMutableArray* m_selectedPhotos;
	NSMutableDictionary* m_downloadingPhotos;
	NSMutableDictionary* m_photosCache;
	FBPickedImagePane* _imagePane;
	NSThread* _downloadPhotosThread;
	NSThread* _downloadSourcePhotoThread;
	unsigned long _maxSelectNum;
	int m_numOfImageCellRow;
	BOOL m_showMore;
	BOOL _shouldStopDownload;
	BOOL _isLoadingMore;
	MMFacebookMgr* fbMgr;
	NSString* m_albumID;
	NSString* m_kFBAlbumPath;
	BOOL _isSinglePick;
	MMDelegateProxy<FBGridViewDelegate>* _delegate;
	int _photosCount;
}
@property(assign, nonatomic) int _photosCount;
@property(assign, nonatomic) unsigned long _maxSelectNum;
@property(assign, nonatomic) MMDelegateProxy<FBGridViewDelegate>* _delegate;
@property(assign, nonatomic) BOOL _isSinglePick;
-(void)FBPickedImagePaneDidClickedImageAtIndex:(int)fbpickedImagePane;
-(void)pickedImagePaneDidFinishPickingImages:(id)pickedImagePane;
-(void)downloadPhotos;
-(void)onDownloadSourcePhotoFailded:(id)failded;
-(id)getSavedPhotoByID:(id)anId;
-(void)onChooseImageDone:(id)done;
-(void)onDownloadSourcePhotoFinished:(id)finished;
-(void)onDownloadSourcePhotoWithURL:(id)url;
-(void)onGetPhotosFinish:(id)finish;
-(void)makeCell:(id)cell atIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)addImageToImagePaneWithPhotoID:(id)photoID;
-(void)addDownloadAbleView:(id)view;
-(void)addDowloadingView:(id)view;
-(void)onPhotoButtonClicked:(id)clicked;
-(void)OnLoadMore;
-(void)OnReturn;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initData;
-(id)initWithAlbum:(id)album;
@end

@interface SearchContactListViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate> {
	MMTableView* m_tableView;
	NSMutableArray* m_contactList;
}
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_contactList;
-(void)showContactInfoView:(id)view;
-(void)makeCell:(id)cell contact:(id)contact;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)initView;
-(void)initData;
-(void)viewDidLoad;
-(id)initWithContactList:(id)contactList;
-(void)dealloc;
@end

@interface MMUISearchBar : UISearchBar {
}
-(void)setFrame:(CGRect)frame;
@end

@interface MMSearchBar : MMObject <UISearchDisplayDelegate, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate> {
	MMDelegateProxy<MMSearchBarDelegate>* m_delegate;
	NSString* m_nsLastSearchText;
	MMUISearchBar* m_searchBar;
	NSMutableArray* m_arrFilteredObject;
	UISearchDisplayController* m_searchDisplayController;
	int m_returnKeyType;
}
@property(assign, nonatomic) int m_returnKeyType;
@property(retain, nonatomic) UISearchBar* m_searchBar;
@property(retain, nonatomic) UISearchDisplayController* m_searchDisplayController;
@property(retain, nonatomic) NSString* m_nsLastSearchText;
@property(assign, nonatomic) MMDelegateProxy<MMSearchBarDelegate>* m_delegate;
-(void)clearSearchDisplayController;
-(void)finishSearch;
-(void)finishSearch:(id)search;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)cancelSearch;
-(void)doSearch:(id)search;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getFilteredObjects;
-(void)clearFilteredObjects;
-(void)addFilteredObject:(id)object;
-(unsigned)getObjectCount;
-(void)setFilteredObjects:(id)objects;
-(id)getObjectFor:(unsigned)aFor;
-(void)dealloc;
-(id)initWithContentsController:(id)contentsController;
@end

@interface MMVoiceSearchBar : MMSearchBar <UIAlertViewDelegate, IVoiceSearchExt, IRecordPermissionCheckExt, VoiceSearchContactsViewDelegate> {
	UIButton* m_voiceSearchBackButton;
	UIButton* m_searchingCancelButton;
	UIViewController* m_parentViewController;
	UIView* m_preventSearchBarView;
	UIButton* m_voiceSearchBtn;
	int m_voiceSearchStatus;
	int m_voiceSearchSpecies;
	BOOL m_useDefaultDisplayController;
	BOOL m_indexBarEffect;
	VoiceRecogView* m_voiceRecogView;
	MMDelegateProxy<MMVoiceSearchDelegate>* m_voiceSearchDelegate;
	MMDelegateProxy<MMVoiceSearchBarDelegate>* m_voiceSearchBarDelegate;
	unsigned long m_voiceID;
	BOOL m_bVoiceSearchEnabled;
	SEL mRecordSelector;
}
@property(assign, nonatomic) SEL mRecordSelector;
@property(assign, nonatomic) MMDelegateProxy<MMVoiceSearchBarDelegate>* m_voiceSearchBarDelegate;
@property(assign, nonatomic) MMDelegateProxy<MMVoiceSearchDelegate>* m_voiceSearchDelegate;
-(BOOL)isVoiceSearchActive;
-(void)finishSearch;
-(void)voiceSearchViewErrorCancelButtonDone;
-(void)voiceSearchCancelButtonDone;
-(void)voiceSearchRecordDone;
-(void)OnError:(int)error andSearchId:(unsigned long)anId;
-(void)OnGetSearchResult:(id)result andSearchId:(unsigned long)anId;
-(void)OnLevelMeter:(unsigned long)meter Peak:(float)peak;
-(void)OnEndRecord;
-(void)OnStartRecord;
-(unsigned long)getVoiceID;
-(id)voiceSearchResultsTableView:(id)view andCell:(id)cell cellForRowAtIndexPath:(id)indexPath;
-(int)voiceSearchResultsTableView:(id)view numberOfRowsInSection:(int)section;
-(void)voiceSearchResultsTableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)voiceSearchResultsTableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)voiceSearchContactsViewCancel;
-(void)voiceSearchContactsViewBack;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
-(void)voiceSearchRestart;
-(void)voiceSearchBackToPreviousView;
-(void)OnRecordPermissioned;
-(void)OnRecordDenied;
-(void)voiceSearchByMainFrameRealDone;
-(void)voiceSearchStartByNewMainFrame;
-(void)voiceSearchBtnRealDone;
-(void)voiceSearchButtonDone;
-(void)voiceSearchButtonClick;
-(void)backButtonDone:(id)done;
-(BOOL)stopVoiceSearch;
-(void)startVoiceSearch;
-(BOOL)callVoiceSearchMgrStop;
-(void)callVoiceSearchMgrStart;
-(void)tabbarViewDown;
-(void)tabbarViewUp;
-(void)statusFrameChange:(id)change;
-(void)showVoiceSearchButton:(BOOL)button;
-(void)dealloc;
-(id)initWithContentsController:(id)contentsController withParentViewController:(id)parentViewController withSpecies:(int)species withUseDefaultDisplayController:(BOOL)useDefaultDisplayController hasIndexBar:(BOOL)bar;
-(id)initWithContentsController:(id)contentsController withParentViewController:(id)parentViewController withSpecies:(int)species withUseDefaultDisplayController:(BOOL)useDefaultDisplayController;
-(BOOL)setVoiceSearchStatusFrom:(int)from transferToStatus:(int)status;
-(BOOL)setVoiceSearchStatusFrom:(int)from transferToStatus:(int)status withVoiceID:(int)voiceID;
-(BOOL)canFromStatus:(int)status transferToStatus:(int)status2;
-(void)loadView;
-(void)setVoiceSearchBarFrame:(BOOL)frame animation:(BOOL)animation;
-(void)setVoiceSearchToParentView:(id)parentView;
@end

@interface VoiceSearchContactsViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource> {
	BOOL m_hasResults;
	MMTableView* m_tableView;
	UILabel* m_emptyLabelView;
	BOOL m_isFirstControl;
	unsigned long m_voiceID;
	NSString* m_errorLabelTextString;
	id<VoiceSearchContactsViewDelegate> m_voiceSearchContactsViewDelegate;
}
@property(assign, nonatomic) id<VoiceSearchContactsViewDelegate> m_voiceSearchContactsViewDelegate;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)viewDidBePoped:(BOOL)view;
-(void)backToPreView:(id)preView;
-(void)willDisappear;
-(void)willAppear;
-(void)didAppear;
-(void)loadView;
-(void)dealloc;
-(id)initByResults:(BOOL)results;
-(void)onTopBarFrameChanged;
-(void)setErrorLabelViewText:(id)text;
-(void)initTableView;
@end

@interface ContactsViewController : MMTabBarBaseViewController <UITableViewDelegate, UITableViewDataSource, MMSearchBarDelegate, VerifyPhoneDelegate, UIActionSheetDelegate, ContactsDataLogicDelegate, MMVoiceSearchDelegate, FriendAsistSessionExt, BrandServiceMgrExt> {
	MMTableView* m_tableView;
	UILabel* m_countLabel;
	BOOL m_bShouldShowBindPhoneTip;
	ContactsDataLogic* m_contactsDataLogic;
	ContactsViewcontrollerSearchBar* m_mmSearchBar;
	BOOL m_bShowHelloGroup;
	unsigned long m_uiHelloGroupUnreadCount;
	NSMutableArray* m_brandContactGroupList;
}
@property(retain, nonatomic) NSMutableArray* m_brandContactGroupList;
-(void)onBrandServiceAddedNewItem;
-(void)resetViewStatus;
-(void)onFriendAssistUnreadCountChanged;
-(void)updateTabBarBadge;
-(void)updateHelloGroup;
-(void)updateViewWhenSelectTab:(BOOL)tab;
-(id)getViewController;
-(void)OnSayHelloDataChange;
-(id)cellForHandleVoiceSearchViewTable:(id)handleVoiceSearchViewTable index:(id)index;
-(void)pushVoiceSearchResultsViewController:(id)controller Animation:(BOOL)animation;
-(BOOL)handleVoiceSearchResults:(id)results;
-(id)usrNameConvertToOContacts:(id)ocontacts;
-(id)sortVoiceSearchResultContacts:(id)contacts;
-(id)filterContactsViewContacts:(id)contacts;
-(BOOL)isInCurrentContactsview:(id)currentContactsview;
-(BOOL)hidesBottomBarWhenPushed;
-(BOOL)shouldShowTabbarAfterSearchBarBecomeUnActive;
-(void)SearchBarBecomeUnActive;
-(void)SearchBarBecomeActive;
-(void)OnVoiceSearchButtonDown;
-(void)resetTableViewOffset:(id)offset;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(BOOL)onFilterContactCandidate:(id)candidate;
-(void)onContactsDataChange;
-(void)willShow;
-(void)didAppear;
-(void)willDisshow;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)bindPhoneReturn;
-(void)handleSelectdNewUserTip;
-(void)handleSelectdBrandGroup:(int)group;
-(void)handleSelectdBindPhone;
-(void)handleSelectdHelloGroup:(unsigned)group;
-(void)handleSelectdChatRoom;
-(void)handleSelectdHelloGroup;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(int)internalEditingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeNewUserTipCell:(id)cell;
-(void)makeBindPhoneCell:(id)cell;
-(void)makeHelloGroupCelll:(id)celll row:(unsigned)row;
-(void)makeCell:(id)cell tableCell:(id)cell2 section:(unsigned)section row:(unsigned)row;
-(void)makeChatRoomCell:(id)cell;
-(void)makeHelloGroupCell:(id)cell;
-(void)addRedDotInGroupCell:(id)groupCell existNewBrand:(BOOL)brand;
-(void)makeGroupCell:(id)cell head:(id)head title:(id)title;
-(void)makeCell:(id)cell contact:(id)contact;
-(BOOL)showWeiboFlag:(id)flag;
-(int)numberOfCellForBrandGroup;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(unsigned long)getSectionType:(int)type;
-(int)ConvertToNormalContactSection:(int)normalContactSection;
-(BOOL)HasNewUserTip;
-(BOOL)HasBindPhoneTip;
-(BOOL)HasBrandGroup;
-(BOOL)HasHelloGroup;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewWillPush:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)willAppear;
-(void)initSearchBar;
-(void)initTableView;
-(void)initCountLabel:(id)label;
-(void)updateCount;
-(void)initTitleArea;
-(void)initData;
-(void)onAddContact;
-(void)showContactInfoView:(id)view;
-(void)openContactInfoView:(int)view;
-(id)init;
@end

@interface FacebookAlbumCell : MMTableViewCell {
}
-(void)layoutSubviews;
@end

@interface FBPickedImagePane : PickedImagePane {
	MMDelegateProxy<FBPickedImagePaneDelegate>* _fbDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<FBPickedImagePaneDelegate>* _fbDelegate;
-(void)dealloc;
-(void)onImageClicked:(id)clicked;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MultiSelectTableViewCell : UITableViewCell {
	UIImageView* m_selectedImageView;
	BOOL m_bSelected;
	BOOL m_bNeedOffset;
	BOOL m_bAnimated;
	unsigned long m_iAnimatedCount;
	BOOL m_bIsEditting;
}
@property(assign, nonatomic) BOOL m_bIsEditting;
@property(assign, nonatomic) BOOL m_bNeedOffset;
@property(readonly, assign, nonatomic) BOOL m_bSelected;
-(void)dealloc;
-(void)layoutSubviews;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)changeSelectdStatus:(BOOL)status;
-(void)adjustSelectFlagFrameByOffsetY:(float)y;
-(void)adjustSelectFlagFrame:(float)frame;
-(void)adjustSelectFlagFrameInternal;
@end

@interface ShareMessageLogicHelper : MMObject <SessionSelectControllerDelegate, ShareMessageConfirmLogicHelperDelegate, UIAlertViewDelegate> {
	UIViewController* _viewController;
	CMessageWrap* _msgWrap;
	MMDelegateProxy<ShareMessageLogicHelperDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<ShareMessageLogicHelperDelegate>* delegate;
@property(retain, nonatomic) CMessageWrap* messageWrap;
@property(retain, nonatomic) UIViewController* viewController;
-(void)OnSendMessageFail:(id)fail WithError:(int)error;
-(void)OnSendMessageCancel:(id)cancel;
-(void)OnSendMessageOK:(id)ok;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showAlertView;
-(void)startSendMessage;
-(void)dealloc;
-(id)initWithViewController:(id)viewController andMessageWrap:(id)wrap;
@end

@interface BaseEmoticonView : MMUIView <EmoticonSelectorViewDelegate, EmoticonSelectorViewDataSource> {
	EmoticonSelectorView* _selectorView;
	MMDelegateProxy<BaseEmoticonViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<BaseEmoticonViewDelegate>* m_delegate;
-(float)EmoticonInterval;
-(float)EmoticonMarginTopOffset;
-(float)EmoticonMarginTop;
-(float)PageControlMarginButtom;
-(float)EmoticonHeightAtIndex:(unsigned long)index;
-(id)descriptionForEmoticonAtIndex:(unsigned long)index;
-(id)viewForEmoticonAtIndex:(unsigned long)index;
-(unsigned long)numberOfCols;
-(unsigned long)numberOfRows;
-(unsigned long)numberOfEmoticons;
-(int)gestureActionModeAtIndex:(unsigned long)index;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)initSelectorView;
@end

@interface ContactsViewcontrollerSearchBar : MMVoiceSearchBar <MessageObserverDelegate, UIAlertViewDelegate> {
	unsigned long m_uiStatus;
	NSMutableArray* m_arrBandContact;
}
@property(retain, nonatomic) NSMutableArray* m_arrBandContact;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)cellForTypeItemSearchBandTip:(id)typeItemSearchBandTip;
-(void)dealloc;
-(id)initWithContentsController:(id)contentsController;
-(void)handleSearchBandTip;
-(void)onSearchBand;
-(BOOL)isInMyContactList:(id)myContactList;
-(id)getObjectFor:(unsigned)aFor;
-(unsigned long)getTypeFor:(unsigned)aFor;
@end

@interface WCSetPermissionsViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, WCFacadeExt> {
	MMTableView* _tableView;
	NSString* _userName;
	WCOpLog* _wcOpLog;
	MMDelegateProxy<WCSetPermissionsViewControllerDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCSetPermissionsViewControllerDelegate>* delegate;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onWCGroupModMemberReturn:(BOOL)aReturn group:(id)group;
-(void)makeSwitchCell:(id)cell tip:(id)tip status:(BOOL)status tag:(int)tag;
-(void)onSwitchValueChange:(id)change;
-(void)becomeWCBlacklist:(BOOL)blacklist;
-(void)becomeOutsider:(BOOL)outsider;
-(void)viewDidLoad;
-(void)initView;
-(void)onDissmiss;
-(void)dealloc;
-(id)initWithUserName:(id)userName;
@end

@interface TextFlowView : UIView {
	BOOL _needFlow;
	NSTimer* _timer;
	int _textAlignment;
	unsigned long _spaceLength;
	UIFont* _font;
	NSString* _text;
	UILabel* _label;
	int _startIndex;
	float _XOffset;
	CGSize _textSize;
}
@property(assign, nonatomic) unsigned long spaceLength;
-(id).cxx_construct;
-(void)setTextAlignment:(int)alignment;
-(void)setText:(id)text;
-(void)setFont:(id)font;
-(id)initWithFrame:(CGRect)frame Font:(id)font Text:(id)text;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)cancelRun;
-(void)startRun;
-(void)timerAction;
-(CGSize)computeTextSize:(id)size Font:(id)font;
-(CGRect)moveNewPoint:(CGPoint)point rect:(CGRect)rect;
@end

@interface VoipLoudspeakerModeSwitch : UIView {
	unsigned long _mode;
	BOOL _isActive;
	id<VoipLoudspeakerModeSwitchDelegate> _delegate;
	BOOL _isDisable;
}
@property(assign, nonatomic) id<VoipLoudspeakerModeSwitchDelegate> delegate;
@property(assign, nonatomic) unsigned long mode;
-(void)setLoudspeakerOn;
-(void)setLoudspeakerOff;
-(void)setDisable:(BOOL)disable;
-(void)handleSwipeLeft:(id)left;
-(void)handleSwipeRight:(id)right;
-(void)reActiveSelf;
-(void)doSwitchMode:(BOOL)mode;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)checkTouchPoint:(CGPoint)point IfInView:(id)view;
-(void)initView;
-(id)initWithFrame:(CGRect)frame andMode:(unsigned long)mode;
@end

@interface MMLoadingView : UIView {
	UIImageView* m_backgroundView;
	UILabel* m_label;
	UIActivityIndicatorView* m_activityIndicatorView;
	UIImageView* m_tipIconView;
	MMProgressView* m_viewProgress;
	BOOL m_bLoading;
	BOOL m_bIgnoringInteractionEventsWhenLoading;
	NSTimer* m_timer;
	NSString* m_loadingText;
	UILabel* m_labelTip;
}
@property(retain, nonatomic) UILabel* m_labelTip;
@property(assign, nonatomic) BOOL m_bIgnoringInteractionEventsWhenLoading;
@property(readonly, assign, nonatomic) BOOL m_bLoading;
@property(retain, nonatomic) MMProgressView* m_viewProgress;
@property(retain, nonatomic) UIActivityIndicatorView* m_activityIndicatorView;
@property(retain, nonatomic) UILabel* m_label;
@property(retain, nonatomic) UIImageView* m_backgroundView;
-(void)dealloc;
-(void)setActivityIndicatorViewCenter:(BOOL)center;
-(void)ShowTipView:(id)view Title:(id)title Delay:(float)delay;
-(void)stopLoadingAndShowOK;
-(void)stopLoadingAndShowError:(id)error withDelay:(float)delay;
-(void)stopLoadingAndShowError:(id)error;
-(void)stopLoadingAndShowOK:(id)ok withDelay:(float)delay;
-(void)stopLoadingAndShowOK:(id)ok;
-(void)StopLoadingTimerFired:(id)fired;
-(void)stopLoading;
-(void)setFitFrameDownloadImg:(int)img;
-(void)stopLoadingInternal;
-(void)startLoading;
-(id)initWithDownloadImg;
-(id)initWithCustom:(CGRect)custom bkgColor:(id)color textColor:(id)color3;
-(void)setFitFrame:(int)frame;
-(id)init;
-(void)BeforeInit;
@end

@interface MainFrameActionFloatView : UIButton {
	UIImageView* m_viewBg;
	UIView* m_viewContent;
}
-(void)dealloc;
-(void)animateShowInView:(id)view;
-(id)init;
-(void)addItem:(id)item title:(id)title sel:(SEL)sel target:(id)target;
-(void)addLine;
-(void)updateSubviewWidth;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)animateHideAction;
-(void)onHideAction;
@end

@interface MFHeaderView : MMUIView <PushSystemMsgViewDelegate> {
	MMVoiceSearchBar* m_searchBar;
	PushSystemMsgView* m_pushSystemMsgView;
	MFWebMMBtn* m_webMMBtn;
	MFMusicPlayBtn* m_musicPlayBtn;
	MFSetHeadBtn* m_setHeadBtn;
	MFBakChatView* m_bakChatBtn;
	MFSetWechatIDBtn* m_setWechatIDBtn;
	BOOL m_isOnline;
	MMDelegateProxy<MFHeaderViewDelegate>* m_bannerLogicDelegate;
	BOOL m_bPauseUpdated;
	BOOL m_bNeedRestartedUpdate;
}
@property(assign, nonatomic) BOOL m_isOnline;
@property(readonly, assign, nonatomic) MFBakChatView* m_bakChatBtn;
@property(readonly, assign, nonatomic) MFSetHeadBtn* m_setHeadBtn;
@property(readonly, assign, nonatomic) MFMusicPlayBtn* m_musicPlayBtn;
@property(readonly, assign, nonatomic) MFWebMMBtn* m_webMMBtn;
@property(readonly, assign, nonatomic) PushSystemMsgView* m_pushSystemMsgView;
@property(readonly, assign, nonatomic) MMVoiceSearchBar* m_searchBar;
-(void)applicationWillBecomeActive;
-(void)dismissSystemMsg;
-(void)SetNeedRestartUpdateBanner:(BOOL)banner;
-(BOOL)GetNeedRestartUpdateBanner;
-(void)RestartUpdate;
-(void)PausedUpdate;
-(void)showCancelMusicPlay;
-(void)showBakChatViewInDownload;
-(void)showBakChatViewInUpload;
-(void)showLogoutWebOnline;
-(void)setWechatID;
-(void)setHeaderImage:(id)image;
-(void)showSetWechatIDTips:(BOOL)tips;
-(void)processSetWechatIDTips:(BOOL)tips;
-(void)showSetHeadBtn:(BOOL)btn;
-(void)processSetHeadBtn:(BOOL)btn;
-(void)showMusicPlayBtn:(BOOL)btn;
-(void)processMusicPlayBtn:(BOOL)btn;
-(void)updateWebMMBtn;
-(void)showWebMMBtn:(BOOL)btn;
-(void)showBakChatBtn:(BOOL)btn WithStatus:(unsigned)status;
-(void)progressBakChatView:(BOOL)view WithStatus:(unsigned)status;
-(void)processWebMMBtn:(BOOL)btn;
-(void)showPushSystemMsgView:(BOOL)view systemMsg:(id)msg;
-(void)processPushSystemMsgView:(BOOL)view systemMsg:(id)msg;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(void)updateHeaderViewInternal;
-(void)initSetWechatIDBtn;
-(void)initSetHeadBtn;
-(void)initMusicPlayBtn;
-(void)initBakChatBtn:(unsigned)btn;
-(void)initWebMMBtn;
-(void)initPushSymtemView:(id)view;
-(void)initSearchBar;
@end

@interface MFMusicPlayBtn : UIButton {
}
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MFSetHeadBtn : UIButton {
}
-(void)ButtonTouchUpOutside:(id)outside;
-(void)ButtonTouchDown:(id)down;
-(void)setLabelHighlighted:(BOOL)highlighted;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MFTitleView : MMTitleView {
}
-(void)updateTitleView:(unsigned long)view title:(id)title;
-(void)updateNearMode;
-(void)updateSubviews;
-(id)init;
@end

@interface MFWebMMBtn : UIButton <IOnlineClientMgrExt> {
	UILabel* _title;
}
-(void)dealloc;
-(void)onOnlineInfoUpdated;
-(void)updateWithOnlineStatus;
-(id)GetOnlineSummaryWordingForKey:(id)key;
-(id)initWithFrame:(CGRect)frame;
-(void)updateWebMMBtnView;
@end

@interface PushSystemMsgView : UIControl {
	SystemMsgWrap* m_msgWrap;
	MMURLHandler* m_urlHandler;
	id<PushSystemMsgViewDelegate> m_delegate;
}
@property(assign, nonatomic) id<PushSystemMsgViewDelegate> m_delegate;
-(void)dealloc;
-(void)setMainFrameViewController:(id)controller;
-(id)initWithMsgWrap:(id)msgWrap andFrame:(CGRect)frame;
-(void)initView;
-(id)formatText:(id)text;
-(void)handleClose:(id)close;
-(void)handleURL;
@end

@interface MMMusicPlayerMgr : MMService <MMService, MMMusicPlayerExt, MMMusicLyricsExt> {
	NSMutableArray* m_arrMusicItems;
	MMMusicInfo* m_curMusicInfo;
	int m_playMode;
	int m_playState;
	unsigned long m_uiCurMusicIndex;
	float m_musicOffset;
	NSDate* m_musicStartTime;
	BOOL m_bforceStop;
}
@property(retain, nonatomic) MMMusicInfo* m_curMusicInfo;
-(void)OnGetLyrics:(id)lyrics Lyrics:(id)lyrics2;
-(void)onLevelMeterPeak:(float)peak;
-(void)onMusicPlayStatusChanged;
-(id)getNextMusicInfo;
-(unsigned long)indexOfMusic:(id)music;
-(void)playWithMusicInfo:(id)musicInfo;
-(id)getMusicUrlWithMusicInfo:(id)musicInfo;
-(float)getMusicOffset;
-(int)getMusicPlayState;
-(id)getMusicPhotoUrl;
-(id)getMusicTitle;
-(id)getCurMusicInfo;
-(BOOL)stopWithMusicKey:(id)musicKey;
-(void)stopPlay;
-(void)playWithMusicKey:(id)musicKey;
-(void)setMusicItemList:(id)list;
-(void)setAndPlayMusicItem:(id)item;
-(void)setPlayMode:(int)mode;
-(void)dealloc;
-(id)init;
@end

@interface BannerLogicController : MMObject <INetworkStatusMgrExt, IPushSystemMsgExt, IOnlineClientMgrExt, IMusicPlayerExt, IHeadImageExt, MFHeaderViewDelegate, IBakChatRecoverMgrExt, IBakChatUploadMgrExt, MMKernelExt> {
	NewMainFrameViewController* m_mainView;
	MFHeaderView* m_headerView;
	unsigned long m_uiTipStatus;
	BOOL m_bWebWXLogined;
	BOOL m_bBakChatStarted;
	NSTimer* m_OOBTimer;
}
@property(retain, nonatomic) NSTimer* m_OOBTimer;
@property(retain, nonatomic) MFHeaderView* m_headerView;
-(void)onPreQuit;
-(void)updateSetHeadBtn;
-(void)onHeadImageChange:(id)change;
-(void)updateMusicPlayBanner;
-(void)onMusicPlayStatusChanged;
-(void)onLoginWeb;
-(void)onLogoutWeb;
-(void)OnCancel;
-(void)OnSuccess;
-(void)OnDownloaded;
-(void)OnDownloadProgress:(unsigned)progress WithTotalSize:(unsigned)totalSize;
-(void)OnBakChatUploadMessage:(id)message;
-(void)shouldShowSystemMsg:(id)msg;
-(id)getMainView;
-(void)dismissSystemMsg;
-(void)showOOBData;
-(void)onOOBTimer;
-(void)showNetworkTip:(id)tip;
-(void)updateSystemNetworkNotification:(unsigned long)notification;
-(void)OnGetOOBData;
-(void)onNetworkStatusChange:(unsigned long)change;
-(BOOL)showSystemMsg:(id)msg;
-(void)stopOOBTimer;
-(BOOL)shouldShowSetWechatIDTips;
-(BOOL)isShowSetHead;
-(BOOL)isInitEd;
-(void)unRegisterExt;
-(void)registerExt;
-(void)clearResource;
-(void)dismissSystemMessage;
-(void)dismissSetWechatIDView;
-(id)getVoiceSearchBar;
-(id)getHeaderView;
-(id)getHeaderViewWithoutUpdate;
-(void)initHeaderView;
-(void)dealloc;
-(id)initWithMainFrameViewController:(id)mainFrameViewController;
@end

@interface MemberDataLogic : NSObject <MemberDataLogicProtocol> {
	NSString* m_adminName;
	NSMutableDictionary* m_dicAllContacts;
	NSMutableArray* m_searchFilterContacts;
	NSMutableArray* m_keyArr;
	NSMutableArray* m_allContacts;
}
-(id)filtContactsByName:(id)name;
-(id)getFilteredContacts;
-(void)cancelSearch;
-(void)doSearch:(id)search;
-(id)getItemInSection:(unsigned)section atRow:(unsigned)row;
-(unsigned)getSectionItemCount:(unsigned)count;
-(unsigned)getSectionCount;
-(id)getKeyAtSection:(unsigned)section;
-(id)getKeyArray;
-(void)sortKeys;
-(BOOL)removeContact:(id)contact;
-(void)addContact:(id)contact;
-(void)reloadMemberList:(id)list;
-(id)addSectionKey:(id)key;
-(id)getAllContacts;
-(unsigned)getTotalCount;
-(void)dealloc;
-(id)initWithMemberList:(id)memberList admin:(id)admin;
@end

@interface MMMusicPlayerContoller : UIButton <MMMusicPlayerExt, IMusicPlayerExt> {
	MMMusicInfo* m_musicInfo;
	UIImage* m_imgForIdle;
	UIImage* m_imgForIdleHL;
	UIImage* m_imgForPlaying;
	UIImage* m_imgForPlayingHL;
	NSString* m_key;
	int m_playerSource;
	NSString* m_title;
	NSString* m_photoUrl;
	NSString* m_url;
	NSString* m_lowBandUrl;
	NSString* m_webUrl;
	NSString* m_singer;
}
@property(retain, nonatomic) NSString* m_singer;
@property(retain, nonatomic) NSString* m_webUrl;
@property(retain, nonatomic) NSString* m_lowBandUrl;
@property(retain, nonatomic) NSString* m_url;
@property(retain, nonatomic) NSString* m_photoUrl;
@property(retain, nonatomic) NSString* m_title;
@property(assign, nonatomic) int m_playerSource;
@property(retain, nonatomic) NSString* m_key;
@property(retain, nonatomic) UIImage* m_imgForPlayingHL;
@property(retain, nonatomic) UIImage* m_imgForPlaying;
@property(retain, nonatomic) UIImage* m_imgForIdleHL;
@property(retain, nonatomic) UIImage* m_imgForIdle;
@property(retain, nonatomic) MMMusicInfo* m_musicInfo;
-(void)setImage:(id)image HLImage:(id)image2 forPlayerState:(int)playerState;
-(void)setMusicSinger:(id)singer;
-(void)setMusicWebUrl:(id)url;
-(void)setLowBandUrl:(id)url;
-(void)setUrl:(id)url;
-(void)setMusicPhotoUrl:(id)url;
-(void)setMusicTitle:(id)title;
-(void)setPlayerSource:(int)source;
-(void)setKey:(id)key;
-(id)getMusicInfo;
-(void)setMusicInfo:(id)info;
-(void)addMusicItem;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)onClickOnMe;
-(void)onLevelMeterPeak:(float)peak;
-(void)onMusicPlayStatusChanged;
-(void)updateButtonImage;
-(BOOL)isCurrentControllForPlayer;
@end

@interface MMMusicPlayViewController : MMUIViewController <UIActionSheetDelegate> {
}
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onAction;
-(void)cancelMusicPlay;
-(BOOL)isURL:(id)url;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface RegularUtil : NSObject {
}
+(id)getPhoneText:(id)text;
+(BOOL)isPhoneNumberChina:(id)china;
+(BOOL)isLegalQQNum:(id)num;
+(BOOL)isLegalPhoneNumber:(id)number;
+(unsigned long)isLegalPwd:(id)pwd;
+(BOOL)isLegalEmail:(id)email;
+(BOOL)isLegalAccount:(id)account;
+(BOOL)isUsrNameSX:(id)sx;
+(BOOL)isUsrNameQQ:(id)qq;
@end

@interface WCMallOldTelephoneView : MMUIView <UITableViewDataSource, UITableViewDelegate> {
	UITableView* m_oTelFilterTableView;
	UIButton* clearBtn;
	UIImageView* bgImageView;
	id<WCMallOldTelephoneViewDelegate> m_delegate;
}
@property(assign, nonatomic) id<WCMallOldTelephoneViewDelegate> m_delegate;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)reloadTelFilterTableView;
-(void)resetWCMallTelListTableViewHeight:(float)height;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)initView;
-(void)initTableView;
-(void)initClearButton;
@end

@interface CAppUtil : NSObject {
}
+(BOOL)IsCanAutoAuth;
+(void)openSessionWithContact:(id)contact fromViewController:(id)viewController;
+(id)addHtmlHrefForText:(id)text;
+(id)getCurrentDeviceName;
+(void)fireLocalMemoryWarningNotify;
+(void)removeLocalMemoryWarningObserver:(id)observer;
+(void)addLocalMemoryWarningObserver:(id)observer selector:(SEL)selector;
+(BOOL)isOrientationPortrait;
+(BOOL)isOrientationLandscape;
+(id)getCurrentLanguageAppDescription:(id)description;
+(id)getCurrentLanguageAppName:(id)name;
+(id)getRecommandAppItemCurrentLanguageAppName:(id)name;
+(int)GetAppVerCompareWithLastRun;
+(int)VersionCompare:(id)compare vs:(id)vs;
+(id)getAppNameById:(id)anId;
+(id)getAppNameByMsg:(id)msg;
+(id)getAppFromUrl:(id)url from:(int)from;
+(id)getAppInstallUrl:(id)url from:(int)from;
+(id)getDeviceType;
+(id)getOriginUrlFromSecureUrl:(id)secureUrl;
+(id)getSecureUrl:(id)url from:(int)from isAppInstalled:(BOOL)installed;
+(id)UrlFromTypeToString:(int)string;
+(BOOL)isChinaPhoneOrSimpleCHSUser;
+(BOOL)isChinaPhoneAndSimpleCHSUser;
+(BOOL)isSimpleChinaLanguageUser;
+(BOOL)isChinaPhoneUser;
+(BOOL)checkSavePhoto:(id)photo;
+(void)updateSyncPhoneContactsMsg;
+(void)saveLastUserName:(id)name;
+(id)getLastUserName;
+(void)saveLastLoginName:(id)name;
+(id)getLastLoginName;
+(BOOL)uploadUpdateStatOpLog:(unsigned long)log;
+(unsigned long)calStringLen:(id)len;
+(int)daysBetweenFrom:(id)from To:(id)to;
+(unsigned long)genCurrentTime;
+(id)genFavCellTimeStringByUInt:(unsigned long)int;
+(id)genWCTimeShortStringByUInt:(unsigned long)int;
+(id)genWCTimeStringByUInt:(unsigned long)int;
+(id)genMessageListTimeStringByUInt:(unsigned long)int retIsMoreThanAWeek:(BOOL*)week;
+(id)genMessageListTimeString:(id)string;
+(id)genShortDateTimeStringByUInt:(unsigned long)int;
+(id)genDateTimeStringByUInt:(unsigned long)int;
+(id)dateFormatMonth:(id)month;
+(id)dateFormatLongLong:(id)aLong;
+(id)dateFormatLong:(id)aLong;
+(id)dateFormatWithOutYear:(id)outYear;
+(id)dateFormat:(id)format;
+(id)timeAdjustDateString:(id)string timeHour:(int)hour;
+(id)timeFormat:(id)format;
+(id)genHourAndMinStringFromInt:(int)int;
+(id)genDateTimeString:(id)string;
+(id)genVoiceReminderDataTimeString:(id)string;
+(id)genVoiceReminderDataTimeStringByUInt:(unsigned long)int;
+(id)timeAjustFormat:(id)format timeHour:(int)hour;
+(id)dateMonthFormatLong:(id)aLong;
+(id)dateYearFormatLong:(id)aLong;
+(void)removePBEventObserverListItemByObject:(id)object;
+(void)removePBEventObserverListItem:(unsigned long)item andValue:(id)value;
+(void)addPBEventObserverListItem:(unsigned long)item andValue:(id)value;
+(void)removeMessageObserverListItemByList:(vector<unsigned long, std::allocator<unsigned long> >)list andValue:(id)value;
+(void)addMessageObserverListItemByList:(vector<unsigned long, std::allocator<unsigned long> >)list andValue:(id)value;
+(void)removeMessageObserverListItem:(unsigned long)item andValue:(id)value;
+(void)addMessageObserverListItem:(unsigned long)item andValue:(id)value;
+(void)removeEventObserverListItemByObject:(id)object;
+(void)removeEventObserverListItem:(unsigned long)item andValue:(id)value;
+(void)addEventObserverListItem:(unsigned long)item andValue:(id)value;
+(id)getMainController;
+(void)closeMainFrameWithoutReset;
+(BOOL)isSupportRTMatte;
+(BOOL)isSupportVideoRecord;
+(BOOL)isLongOriginImage:(id)image;
+(BOOL)isSupportHQImage;
+(BOOL)isIOSVersionOver3_1;
+(BOOL)isIOSVersionOver4;
+(BOOL)isIOSVersionOver5_0;
+(BOOL)isIOSVersionOver6;
+(double)GetOsVersion;
+(BOOL)isiPodTouch;
+(BOOL)isGoogleScene:(unsigned long)scene;
+(BOOL)isLBSScene:(unsigned long)scene;
+(BOOL)isShakeScene:(unsigned long)scene;
@end

@interface MicroMessengerAppDelegate : MMUIResponder <UIApplicationDelegate, UIAlertViewDelegate, ResourceMonitorDelegate> {
	CAppObserverCenter* m_appObserverCenter;
	CMainControll* m_mainController;
	MMServiceCenter* m_serviceCenter;
	CAppViewControllerManager* m_appViewControllerMgr;
	NSString* m_nsToken;
	NSString* m_nsSound;
	NSString* m_nsVoipSound;
	unsigned long m_uLastTimeResignActive;
	long m_tTotalRunningTime;
	long m_tLastActiveTime;
	int m_appVerCompareWithLastRun;
	BOOL m_isActive;
	UILabel* m_changeValueLabel;
	UILabel* m_resourceLabel;
	UIWindow* m_resourceWindow;
	ResourceInfo* m_lastResourceInfo;
	ResourceMonitor* m_resourceMonitor;
	UIWindow* _window;
}
@property(retain, nonatomic) UIWindow* window;
@property(retain, nonatomic) NSString* m_nsVoipSound;
@property(retain, nonatomic) NSString* m_nsSound;
@property(retain, nonatomic) NSString* m_nsToken;
@property(retain, nonatomic) CMainControll* m_mainController;
@property(readonly, assign, nonatomic) BOOL m_isActive;
@property(readonly, assign, nonatomic) CAppViewControllerManager* m_appViewControllerMgr;
@property(readonly, assign, nonatomic) CAppObserverCenter* m_appObserverCenter;
-(void)onUpdateResourceInfo:(id)info;
-(void)setUserAgent;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)closeMainFrameWithoutReset;
-(void)delayStopMain;
-(void)closeMainFrameInternal:(BOOL)internal;
-(void)dealloc;
-(int)GetAppVerCompareWithLastRun;
-(void)saveAppVersion;
-(void)detectAppFirstRunOrFirstRunAfterUpgrade;
-(void)firstStartAfterUpgradeDowngrade;
-(void)didReceiveLocalMemoryWarning:(id)warning;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(void)handleMemoryWarning;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url bundleID:(id)anId;
-(id)decodeUrlAttrs:(id)attrs;
-(BOOL)handleOpenURL:(id)url bundleID:(id)anId;
-(void)application:(id)application willChangeStatusBarFrame:(CGRect)frame;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)handleOpenPush;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)resetBadge;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)jumpToChatWhenReceivePush:(id)chatWhenReceivePush remotePush:(BOOL)push;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)doSendTokenTimeOut;
-(void)doSendToken:(id)token error:(BOOL)error;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(void)mainUISetting;
-(void)monitorResource;
-(void)mainLauching:(id)lauching;
-(void)logEssencialInfo;
-(void)clearServiceObject;
-(void)initServiceObject;
-(void)registerLazyExtensionListener;
-(void)registerClsMethodObserver;
-(void)releaseSeviceCenter;
-(void)RenamePath;
-(void)disableExceptionHandle;
-(void)crashReportDoneNotification:(id)notification;
-(BOOL)tryCrashReportAfterRun;
-(BOOL)tryCrashReportOnRun;
@end

@interface WCContentItemBaseView : MMUIView {
	UINavigationController* _navigationController;
	WCDataItem* _oDataItem;
	int _touchCount;
	BOOL _bShowDetail;
	BOOL _bIsLongPressHandled;
}
@property(assign, nonatomic) BOOL bShowDetail;
@property(retain, nonatomic) WCDataItem* oDataItem;
@property(assign, nonatomic) UINavigationController* navigationController;
+(CGSize)getImageSize:(id)size;
+(float)heightForMedia:(id)media showDetail:(BOOL)detail;
+(float)heightForMedia:(id)media;
-(void)onMenuControllerWillHide:(id)onMenuController;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)LongPressEvents;
-(void)onLongTouch;
-(void)throwUrlMessage;
-(void)setNormalColor;
-(void)setHighlightedColor;
-(BOOL)canBecomeFirstResponder;
-(void)dealloc;
-(id)initWithWCDataItem:(id)wcdataItem showDetail:(BOOL)detail;
-(id)initWithWCDataItem:(id)wcdataItem;
@end

@interface WCContentItemViewTemplateGrid : WCContentItemBaseView <WCImageViewDelegate> {
	MMAdaptiveLabel* _descriptionView;
	MMImageGridView* _imageGridView;
	UIButton* _moreButton;
	UIButton* _moreImageButton;
	WCMediaItem* m_currentMediaItem;
	NSMutableArray* m_arrMediaItem;
}
+(float)heightForMedia:(id)media showDetail:(BOOL)detail;
-(void)throwUrlMessage;
-(void)hideMenu;
-(void)onLongPressedWCImage:(id)image;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)onClickWCImage:(id)image;
-(void)onFavoriteAdd:(id)add;
-(void)dealloc;
-(void)layoutSubviews;
-(id)initWithWCDataItem:(id)wcdataItem showDetail:(BOOL)detail;
-(id)initWithWCDataItem:(id)wcdataItem;
-(void)initViewsWithWCDataItem:(id)wcdataItem;
@end

@interface WCContentItemViewTemplateNews : WCContentItemBaseView <WCImageViewDelegate, MMWebViewDelegate, UIGestureRecognizerDelegate> {
	MMWebViewController* _webViewController;
	MMImageGridView* _imageGridView;
	UIImageView* _defaultImageView;
	UILabel* _titleLabel;
	UILabel* _descLabel;
	float _targetMargin;
	float _targetWidth;
}
@property(assign, nonatomic) float targetWidth;
@property(assign, nonatomic) float targetMargin;
+(float)heightForMedia:(id)media showDetail:(BOOL)detail;
-(void)throwUrlMessage;
-(void)setNormalColor;
-(void)setHighlightedColor;
-(id)webViewFailToLoad:(id)load;
-(void)dealloc;
-(id)initWithWCDataItem:(id)wcdataItem showDetail:(BOOL)detail;
-(id)initWithWCDataItem:(id)wcdataItem;
-(void)onClickWCImage:(id)image;
-(void)layoutSubviews;
-(void)onLongTouch;
-(void)onFavoriteAdd:(id)add;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)initViewsWithWCDataItem:(id)wcdataItem;
@end

@interface WCContentItemViewTemplateClassic : WCContentItemBaseView <WCImageViewDelegate, TextLayoutDelegate, MMWebViewDelegate, UIGestureRecognizerDelegate> {
	MMWebViewController* _webViewController;
	UILabel* _titleLabel;
	UILabel* _descLabel;
	WCImageView* _coverImage;
	MMMusicPlayerContoller* _playButton;
	BOOL _forbidJumpUrl;
}
@property(assign, nonatomic) BOOL forbidJumpUrl;
+(float)heightForMedia:(id)media showDetail:(BOOL)detail;
-(void)dealloc;
-(void)setNormalColor;
-(void)setHighlightedColor;
-(void)onClickWCImage:(id)image;
-(void)throwUrlMessage;
-(id)webViewFailToLoad:(id)load;
-(id)initWithWCDataItem:(id)wcdataItem showDetail:(BOOL)detail;
-(id)initWithWCDataItem:(id)wcdataItem;
-(void)onLongTouch;
-(void)onFavoriteAdd:(id)add;
-(void)initViewsWithWCDataItem:(id)wcdataItem;
-(void)layoutSubviews;
@end

@interface ShareConfirmView : MMUIWindow <MMGrowTextViewDelegate, UIAlertViewDelegate, MessageObserverDelegate, IMsgExt, InputControllerDelegate, IMMGrowTextViewExt> {
	UIButton* _confirmButton;
	UIButton* _cancelButton;
	UIImageView* _inputView;
	EmoticonBoardView* _emoticonBoardView;
	UIButton* _expressionButton;
	MMGrowTextView* _textView;
	WCInputController* _inputController;
	UIImage* _thumbImage;
	NSString* _title;
	NSString* _description;
	NSString* _source;
	NSString* _thumbImageUrl;
	NSString* _defaultInputText;
	NSString* _defaultShowText;
	unsigned _style;
	unsigned _innerPlayerStyle;
	BOOL _isShowTextView;
	BOOL _hasInputSth;
	int _currentOrientation;
	int _confirmType;
	MMDelegateProxy<ShareConfirmViewDelegate>* _scvDelegate;
	unsigned _singlePasteTextMaxLength;
}
@property(assign, nonatomic) unsigned singlePasteTextMaxLength;
@property(assign, nonatomic) int confirmType;
@property(assign, nonatomic) BOOL hasInputSth;
@property(assign, nonatomic) MMDelegateProxy<ShareConfirmViewDelegate>* scvDelegate;
@property(assign, nonatomic) BOOL isShowTextView;
@property(assign, nonatomic) unsigned innerPlayerStyle;
@property(assign, nonatomic) unsigned style;
@property(retain, nonatomic) NSString* defaultShowText;
@property(retain, nonatomic) NSString* defaultInputText;
@property(retain, nonatomic) NSString* thumbImageUrl;
@property(retain, nonatomic) NSString* source;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) UIImage* thumbImage;
-(void)onTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(id)getWebThumbImage;
-(void)hideKeyBoard;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)reloadExpressionButtonImage:(int)image;
-(void)onExpressionButtonClicked:(id)clicked;
-(void)onCancel;
-(void)onConfirm;
-(void)keyboardDidHide;
-(void)textViewTextDidChange;
-(void)keyboardWillShow;
-(void)MMGrowTextViewBeginEditing:(id)editing;
-(void)MMGrowTextViewHeightDidChanged:(id)mmgrowTextViewHeight;
-(void)didCommitEmptyText;
-(void)didCommitText:(id)text;
-(void)stayAtWeChat;
-(void)notifySendMsgOK;
-(void)showSendSuccessView;
-(void)resignInput;
-(void)becomeInput;
-(void)initInputController;
-(void)initEmoticonView;
-(void)initInputToolView;
-(void)initBottomButtons;
-(void)genBottomContentView:(id)view;
-(void)formTitleAtTopContentView;
-(void)formTitleAtRightContentView;
-(void)formImageContentView;
-(id)genDescriptionLabel;
-(id)genTitleLabel;
-(id)genBackgroundView;
-(id)genSourceLabel:(id)label;
-(void)genTextView:(CGRect)view;
-(int)calTextViewBackgroundImageFrameHeight:(int)height;
-(int)getTextViewBackgroundFrameHeight;
-(id)genFitImage:(id)image;
-(void)calImageViewFrame:(id)frame;
-(id)genCenterImage:(id)image;
-(void)rotateToCurrentOrientation;
-(void)rotateToOrientation:(int)orientation;
-(void)layoutSubviewToOrientation:(int)orientation;
-(float)getVisibleHeight;
-(float)getOrietationHeight;
-(float)getOrietationWidth;
-(void)initContentView;
-(id)getInputText;
-(void)showView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)unregisterLogoutEvent;
-(void)registerLogoutEvent;
@end

@interface ShareMessageConfirmLogicHelper : MMObject <ShareConfirmViewDelegate> {
	ShareConfirmView* _confirmView;
	CMessageWrap* _msgWrap;
	MMDelegateProxy<ShareMessageConfirmLogicHelperDelegate>* _delegate;
	NSData* _imageData;
	NSString* _thumbImageUrl;
	unsigned long _scene;
	BOOL _isShowTextView;
	BOOL _isAddMessage;
	BOOL _isShowSendSuccessView;
	unsigned long _style;
	BOOL _hasBeenHidden;
	NSDictionary* _userData;
}
@property(retain, nonatomic) NSDictionary* userData;
@property(assign, nonatomic) BOOL isShowSendSuccessView;
@property(assign, nonatomic) BOOL isAddMessage;
@property(retain, nonatomic) NSString* thumbImageUrl;
@property(retain, nonatomic) NSData* imageData;
@property(retain, nonatomic) CMessageWrap* msgWrap;
@property(assign, nonatomic) MMDelegateProxy<ShareMessageConfirmLogicHelperDelegate>* delegate;
-(void)OnStayAtWeChat:(id)weChat;
-(void)OnBackToApp:(id)app;
-(void)OnError:(id)error;
-(void)OnCancel:(id)cancel;
-(void)OnSend:(id)send;
-(void)shareAppMessage;
-(void)rotateToOrientaion:(int)orientaion;
-(void)rotateToCurrentOrietation;
-(void)hideConfirmView;
-(void)showConfirmView;
-(void)setConfirmViewStyle:(int)style;
-(void)dealloc;
-(id)initWithMessageWrap:(id)messageWrap isShowTextView:(BOOL)view andAppScene:(unsigned long)scene;
@end

@interface ShareUploadTaskConfirmLogicHelper : MMObject <ShareConfirmViewDelegate> {
	ShareConfirmView* _confirmView;
	WCUploadTask* _uploadTask;
	MMDelegateProxy<ShareUploadTaskConfirmLogicHelperDelegate>* _delegate;
	NSData* _imageData;
	NSString* _thumbImageUrl;
	BOOL _isShowTextView;
	BOOL _hasBeenHidden;
	NSDictionary* _userData;
}
@property(retain, nonatomic) NSDictionary* userData;
@property(retain, nonatomic) NSString* thumbImageUrl;
@property(retain, nonatomic) NSData* imageData;
@property(retain, nonatomic) WCUploadTask* uploadTask;
@property(assign, nonatomic) MMDelegateProxy<ShareUploadTaskConfirmLogicHelperDelegate>* delegate;
-(void)OnBackToApp:(id)app;
-(void)OnError:(id)error;
-(void)OnCancel:(id)cancel;
-(void)OnSend:(id)send;
-(void)layoutSubviewToOrientation:(int)orientation;
-(void)rotateToOrientaion:(int)orientaion;
-(void)rotateToCurrentOrietation;
-(void)hideConfirmView;
-(void)showConfirmView;
-(void)dealloc;
-(id)initWithUploadTask:(id)uploadTask isShowTextView:(BOOL)view;
@end

@interface VoiceSearchMutilLevelViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	NSMutableArray* m_mutableArray;
	BOOL m_isFirstControl;
	id<VoiceSearchMutilLevelViewDelegate> m_voiceSearchMutilLevelViewDelegate;
}
@property(retain, nonatomic) NSMutableArray* m_mutableArray;
@property(assign, nonatomic) id<VoiceSearchMutilLevelViewDelegate> m_voiceSearchMutilLevelViewDelegate;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)viewDidBePoped:(BOOL)view;
-(void)backToPreView:(id)preView;
-(void)viewDidUnload;
-(void)willAppear;
-(void)setNotUploadData;
-(void)didAppear;
-(void)loadView;
-(void)dealloc;
-(id)init;
-(void)onTopBarFrameChanged;
-(void)initTableView;
@end

@interface MMTableViewUserInfo : MMObject {
	NSMutableDictionary* _dicInfo;
	id _userInfo;
}
@property(retain, nonatomic) id userInfo;
-(void)dealloc;
-(id)getUserInfoValueForKey:(id)key;
-(void)addUserInfoValue:(id)value forKey:(id)key;
@end

@interface MMTableViewCellInfo : MMTableViewUserInfo {
	SEL _makeSel;
	id _makeTarget;
	SEL _actionSel;
	id _actionTarget;
	float _fCellHeight;
	int _selectionStyle;
	int _accessoryType;
	int _editStyle;
	int _autoCorrectionType;
	int _cellStyle;
	MMTableViewCell* _cell;
}
@property(assign, nonatomic) MMTableViewCell* cell;
@property(assign, nonatomic) int cellStyle;
@property(assign, nonatomic) int autoCorrectionType;
@property(assign, nonatomic) int editStyle;
@property(assign, nonatomic) int accessoryType;
@property(assign, nonatomic) int selectionStyle;
@property(assign, nonatomic) float fCellHeight;
@property(assign, nonatomic) id actionTarget;
@property(assign, nonatomic) SEL actionSel;
@property(assign, nonatomic) id makeTarget;
@property(assign, nonatomic) SEL makeSel;
+(id)centerCellForSel:(SEL)sel target:(id)target title:(id)title;
+(id)urlCellForTitle:(id)title url:(id)url;
+(id)badgeCellForSel:(SEL)sel target:(id)target title:(id)title badge:(id)badge rightValue:(id)value imageName:(id)name;
+(id)badgeCellForSel:(SEL)sel target:(id)target title:(id)title badge:(id)badge rightValue:(id)value;
+(id)badgeCellForSel:(SEL)sel target:(id)target title:(id)title badge:(id)badge;
+(id)editorCellForSel:(SEL)sel target:(id)target tip:(id)tip focus:(BOOL)focus text:(id)text;
+(id)editorCellForSel:(SEL)sel target:(id)target tip:(id)tip focus:(BOOL)focus autoCorrect:(BOOL)correct text:(id)text;
+(id)editorCellForSel:(SEL)sel target:(id)target title:(id)title margin:(float)margin tip:(id)tip focus:(BOOL)focus text:(id)text;
+(id)editorCellForSel:(SEL)sel target:(id)target title:(id)title margin:(float)margin tip:(id)tip focus:(BOOL)focus autoCorrect:(BOOL)correct text:(id)text;
+(id)normalCellForTitle:(id)title rightValue:(id)value imageName:(id)name;
+(id)normalCellForTitle:(id)title rightValue:(id)value;
+(id)normalCellForSel:(SEL)sel target:(id)target title:(id)title accessoryType:(int)type;
+(id)normalCellForSel:(SEL)sel target:(id)target title:(id)title rightValue:(id)value imageName:(id)name accessoryType:(int)type;
+(id)normalCellForSel:(SEL)sel target:(id)target title:(id)title rightValue:(id)value accessoryType:(int)type;
+(id)switchCellForSel:(SEL)sel target:(id)target title:(id)title on:(BOOL)on;
+(id)cellForMakeSel:(SEL)makeSel makeTarget:(id)target height:(float)height userInfo:(id)info;
+(id)cellForMakeSel:(SEL)makeSel makeTarget:(id)target actionSel:(SEL)sel actionTarget:(id)target4 height:(float)height userInfo:(id)info;
-(void)makeEditorCell:(id)cell;
-(void)makeCenterCell:(id)cell;
-(void)makeNormalCell:(id)cell;
-(void)makeSwitchCell:(id)cell;
-(void)actionUrlCell;
-(void)actionSwitchCell:(id)cell;
-(void)actionEditorCell:(id)cell;
-(void)dealloc;
-(id)init;
@end

@interface MMTableViewInfo : MMTableViewUserInfo <UITableViewDelegate, UITableViewDataSource, tableViewDelegate> {
	MMTableView* _tableView;
	NSMutableArray* _arrSections;
	id<MMTableViewInfoDelegate> _delegate;
}
@property(assign, nonatomic, setter=setDelegate:) id<MMTableViewInfoDelegate> delegate;
-(void)touchesCancelled_TableView:(id)view withEvent:(id)event;
-(void)touchesEnded_TableView:(id)view withEvent:(id)event;
-(void)touchesMoved_TableView:(id)view withEvent:(id)event;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)didFinishedLoading:(id)loading;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getCellAtSection:(unsigned long)section row:(unsigned long)row;
-(void)removeCellAt:(id)at;
-(void)removeSectionAt:(unsigned long)at;
-(id)getSectionAt:(unsigned long)at;
-(unsigned long)getSectionCount;
-(void)clearAllSection;
-(void)addSection:(id)section;
-(void)setMainView:(BOOL)view;
-(id)getTableView;
-(id)initWithFrame:(CGRect)frame style:(int)style;
-(void)dealloc;
@end

@interface MMTableViewSectionInfo : MMTableViewUserInfo {
	SEL _makeHeaderSel;
	id _makeHeaderTarget;
	SEL _makeFooterSel;
	id _makeFooterTarget;
	float _fHeaderHeight;
	float _fFooterHeight;
	NSMutableArray* _arrCells;
}
@property(assign, nonatomic) float fFooterHeight;
@property(assign, nonatomic) float fHeaderHeight;
@property(assign, nonatomic) id makeFooterTarget;
@property(assign, nonatomic) SEL makeFooterSel;
@property(assign, nonatomic) id makeHeaderTarget;
@property(assign, nonatomic) SEL makeHeaderSel;
+(id)sectionInfoFooterWithView:(id)view;
+(id)sectionInfoHeaderWithView:(id)view;
+(id)sectionInfoHeaderMakeSel:(SEL)sel makeTarget:(id)target;
+(id)sectionInfoHeader:(id)header Footer:(id)footer;
+(id)sectionInfoFooter:(id)footer;
+(id)sectionInfoHeader:(id)header;
+(id)sectionInfoDefaut;
-(void)setHeaderTitle:(id)title;
-(void)setFooterTitle:(id)title;
-(id)getHeaderView;
-(void)setHeaderView:(id)view;
-(void)setFooterView:(id)view;
-(void)removeCellAt:(unsigned long)at;
-(id)getCellAt:(unsigned long)at;
-(unsigned long)getCellCount;
-(void)addCell:(id)cell;
-(void)dealloc;
-(id)init;
-(void)sortCellsByText;
-(void)sortCellsByText;
@end

@interface MMMultiSelectToolView : MMUIView {
	UIImageView* m_bkgView;
	UIButton* m_btnForward;
	UIButton* m_btnEmail;
	UIButton* m_btnBrand;
	UIButton* m_btnDelete;
	UIButton* m_btnFavAdd;
	MMDelegateProxy<MMMultiSelectToolViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MMMultiSelectToolViewDelegate>* m_delegate;
-(void)onBtnClicked:(id)clicked;
-(void)updateButtons;
-(BOOL)hasAnySupportContactsByMsgWrap;
-(void)updateBtnsWithSelectCount:(unsigned long)selectCount;
-(id)createBtnWithBkgImg:(id)bkgImg BtnImg:(id)img Tag:(int)tag;
-(void)initButtonForDebug;
-(id)createBtnWithImg:(id)img HLImg:(id)img2 Tag:(int)tag;
-(void)initButtonForRelease;
-(void)initSubView;
-(void)dealloc;
-(id)init;
@end

@interface BigChatRoomInviteViewController : MMUIViewController <SelectContactsViewControllerDelegate, UIActionSheetDelegate, PBMessageObserverDelegate> {
	CContact* m_contactToGive;
	MMTableViewInfo* m_tableViewInfo;
}
@property(retain, nonatomic) CContact* m_contactToGive;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onSelectContactReturn:(id)aReturn;
-(BOOL)onFilterContactCandidate:(id)candidate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onBeginGive;
-(void)makeChatRoomInviteCountCell:(id)cell;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initFooterView;
-(void)initView;
-(void)initData;
-(void)reloadTableData;
-(void)onBeginSelect;
-(void)onBack;
@end

@interface BrandSessionViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, BrandSessionMgrExt> {
	MMTableView* m_tableView;
	NSMutableArray* m_sessions;
}
@property(retain, nonatomic) NSMutableArray* m_sessions;
-(void)dealloc;
-(void)ClearTotalNewArrivalCount;
-(void)onBrandSessionAllDeleted;
-(void)handleAllBrandSessionDeleted;
-(void)handleAllBrandSessionDeletedStep2;
-(void)onBrandSessionsChanged;
-(id)init;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(id)findMessageItemViewAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)deleteSessionOnIndexPath:(id)path;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)getSessionInfoByIndexPath:(id)path;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)willDisappear;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewWillBePushed:(BOOL)view;
-(void)viewDidLoad;
-(void)initTableView;
@end

@interface MultiPickImageMsgViewController : MMFullScreenViewController <MultiImageScrollViewDelegate, MultiPickImagePanelDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, UIActionSheetDelegate, UIAlertViewDelegate> {
	MultiImageScrollView* pagingScrollView;
	MultiPickImagePanel* m_vPickImagePanel;
	NSDictionary* m_oInitInfo;
	NSData* m_dtImg;
	MMDelegateProxy<ImageBrowseDelegate>* m_delegate;
	MMLoadingView* m_loadingView;
	NSMutableArray* m_arrImageScrollView;
	BOOL _canSendOriginalImage;
}
@property(assign, nonatomic) BOOL canSendOriginalImage;
@property(assign, nonatomic) MMDelegateProxy<ImageBrowseDelegate>* m_delegate;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)MultiPickImagePanelDidCancel:(unsigned long)multiPickImagePanel;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)MultiPickImagePanelAddImage;
-(void)MultiPickImagePanelDidFinishPickingImages:(id)multiPickImagePanel;
-(id)GetOriginImage;
-(id)GetImageByIndex:(unsigned long)index;
-(void)AddMediaInfo:(id)info;
-(void)multiImageScrollViewWillBeginDragging;
-(void)onSingleTap:(id)tap;
-(id)imageAtPage:(unsigned long)page;
-(id)viewAtPage:(unsigned long)page frame:(CGRect)frame;
-(void)onSelectPhoto:(id)photo;
-(void)onOperate;
-(void)doCancel;
-(void)showStatusBar;
-(void)stopImageLoading;
-(void)startImageLoading;
-(void)doSelectPhoto;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)viewDidLoad;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)initData;
-(void)initView;
-(void)initLoadingView;
-(void)UpdateScrollView;
-(void)initScrollView;
-(void)initNavigationBar;
-(void)OnReturn;
-(BOOL)isCurHDImage;
-(BOOL)isLongOriginImage;
-(id)getImageData;
-(id)genDataLength:(unsigned long)length;
-(BOOL)isShowHDImageAlert;
-(void)dealloc;
-(id)initWithImageInfo:(id)imageInfo;
@end

@interface MsgMultiImageBrowseViewController : MMUIViewController <UIActionSheetDelegate, UIAlertViewDelegate, MultiImageScrollViewDelegate, IDownloadImageExt, IMsgExt> {
	MultiImageScrollView* pagingScrollView;
	NSMutableDictionary* m_dicMsgStatus;
	NSMutableDictionary* m_dicMsg;
	NSString* m_nsChatName;
	UIImageView* _bottomBar;
}
@property(retain, nonatomic) NSString* m_nsChatName;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)viewAtPage:(unsigned long)page frame:(CGRect)frame;
-(void)delayStartDownloadImg:(id)img;
-(void)onChangePage;
-(void)updateDownloadView:(id)view index:(unsigned long)index bHDImage:(BOOL)image;
-(id)imageAtPage:(unsigned long)page;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onViewHDImage:(id)image;
-(void)startDownloadImg:(BOOL)img forIndex:(unsigned long)index;
-(void)OnDownloadImagePart:(id)part PartLen:(unsigned long)len TotalLen:(unsigned long)len3;
-(void)OnDownloadImageOk:(id)ok;
-(void)OnDownloadImageExpired:(id)expired;
-(void)OnDownloadImageFail:(id)fail;
-(void)updateDownloadPartLen:(unsigned long)len TotalLen:(unsigned long)len2 view:(id)view;
-(id)genDataLength:(unsigned long)length;
-(id)getImageFor:(id)aFor;
-(unsigned long)getIndexFor:(id)aFor;
-(id)getMsgFor:(unsigned long)aFor;
-(void)setStatusFor:(id)aFor status:(unsigned long)status;
-(unsigned long)getStatusFor:(id)aFor;
-(BOOL)isHDImageDownloaded:(id)downloaded;
-(void)dealloc;
-(void)adjustSubviewRects;
-(void)viewDidLoad;
-(void)viewWillAppear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)uninitLogic;
-(void)initLogic:(id)logic;
-(void)initScrollView;
-(void)initNavigationBar;
-(void)onOperate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)willAppear;
-(void)viewWillBePushed:(BOOL)view;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)viewWillBePoped:(BOOL)view;
-(void)showStatusBar;
-(void)onSingleTap:(id)tap;
-(void)multiImageScrollViewWillBeginDragging;
-(void)updateToolbar:(BOOL)toolbar;
-(id)initWithMsgWrap:(id)msgWrap;
-(void)adjustViewAndNavBarRect;
@end

@interface PhotoViewController : MMFullScreenViewController <MultiImageScrollViewDelegate, IHttpCacheExt> {
	MultiImageScrollView* pagingScrollView;
	NSMutableArray* m_arrayImageUrl;
	NSMutableArray* m_arrImageScrollView;
}
-(void)OnHttpGetFinish:(id)finish response:(id)response ErrNo:(int)no;
-(unsigned)getIndexArrayImageUrlCacheKey:(id)key;
-(id)tryGetResource:(id)resource;
-(id)genKeyForUrl:(id)url;
-(void)initImageViewerWithUrls:(id)urls current:(id)current;
-(unsigned)getIndexArrayImageUrl:(id)url;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)updatePhotoatIndex:(unsigned long)index;
-(void)setPage:(unsigned long)page atIndex:(unsigned long)index;
-(id)viewAtPage:(unsigned long)page frame:(CGRect)frame;
-(id)imageAtPage:(unsigned long)page;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)initScrollView;
-(void)initNavigationBar;
-(void)willAppear;
-(void)viewWillBePoped:(BOOL)view;
-(void)showStatusBar;
@end

@interface BaseMessageNodeView : MMUIView <IHeadImageExt, IContactMgrExt, IQQContactMgrExt, IStrangerContactMgrExt, UIActionSheetDelegate, IAppDataExt, MMIconActionSheetDelegate, IStrangerContactMgrExt> {
	CMessageWrap* m_oMessageWrap;
	CBaseContact* m_oContact;
	CBaseContact* m_oChatContact;
	MMDelegateProxy<messageNodeViewDelegate>* m_delegate;
	unsigned long m_uiTouchBeginTime;
	BOOL m_bIsLongPressHandled;
	unsigned long m_eNodeType;
	UIView* m_oContentView;
	UIView* m_oHeadImageView;
	UIButton* m_oCommentButton;
	UILabel* m_oChatRoomNameLabel;
	BOOL m_bHasLayout;
	float m_fContentViewLeftMargin;
	float m_fContentViewRightMargin;
	int m_orientation;
	NSArray* m_arrMenuItems;
	UIButton* m_oSendFailButton;
	UIActivityIndicatorView* m_oActivityIndicator;
	UIButton* m_oAppBottomButton;
	AppMessageBlockButton* m_oAppMessageBlockButton;
	BOOL m_donorIconHidden;
	float m_testHeight;
}
@property(assign, nonatomic) unsigned long m_eNodeType;
@property(assign, nonatomic) MMDelegateProxy<messageNodeViewDelegate>* m_delegate;
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getCurrentNodeAccessibilityDescription:(id)description;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)launch:(id)launch;
-(id)m_msgWrap;
-(void)OnAppInfoChanged:(id)changed;
-(void)OnAppWatermarkChanged:(id)changed;
-(void)onMenuItemWillHide;
-(void)onEndTouch;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)isTouchInView:(id)view;
-(void)pressedEvents;
-(void)LongPressEvents;
-(void)resend:(id)resend;
-(void)dealloc;
-(void)onModifyQQContact:(id)contact;
-(void)onStrangerContactUpdated:(id)updated;
-(void)onModifyContact:(id)contact;
-(void)onHeadImageChange:(id)change;
-(void)onComment;
-(void)onHeadImageClicked:(id)clicked;
-(void)OnLongPressGesture:(id)gesture;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateMessageContent:(id)content;
-(BOOL)isShowChatRoomDisplayName;
-(void)updateChatContact:(id)contact;
-(void)layoutSubviews;
-(void)onOrientationChanged;
-(void)setOrientation:(int)orientation;
-(void)reLayoutSubviews;
-(void)calculateSize;
-(void)initHeadImageView;
-(void)updateThumbImage;
-(void)updateNodeStatus:(id)status;
-(void)updateStatus:(id)status;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet didDismissWithItem:(id)item;
-(void)setDonorIconHidden:(BOOL)hidden;
-(void)showConnectorSheet:(id)sheet;
-(void)onMsgSource:(id)source;
-(void)onDebug:(id)debug;
-(void)onBrandConnector:(id)connector;
-(void)onDelete:(id)aDelete;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)MenuControllerWillHide:(id)menuController;
-(void)showOperationMenu:(id)menu NeedDelete:(BOOL)aDelete;
-(void)showOperationMenuWithoutDelete:(id)aDelete CanBeForward:(BOOL)forward;
-(void)showOperationMenu:(id)menu;
-(BOOL)canShowFavMenu;
-(BOOL)canShowMoreMenu;
-(BOOL)hasForwardInList:(id)list;
-(BOOL)isLocationMessage;
-(BOOL)shouldShowForwardBrandItem;
-(BOOL)isPortait;
-(BOOL)isShowMenuItem;
-(void)calculateLeftRightMargin;
-(void)initChatRoomNameLabel;
-(void)initCommentButton;
-(void)updateAppBottomButton;
-(void)clearAppBottomButton;
-(void)initAppBottomButton;
-(void)initAppMessageBlockButton;
-(void)clearActivityView;
-(void)initAcitivityView;
-(void)clearSendFailButton;
-(void)initSendFailButton;
-(id)initWithMessageWrap:(id)messageWrap Contact:(id)contact ChatContact:(id)contact3;
@end

@interface EmoticonMessageNodeView : BaseMessageNodeView {
	MMEmoticonView* m_oImageView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onMoreOperate:(id)operate;
-(void)onForward:(id)forward;
-(void)onClick;
-(BOOL)canPurchaseByPid:(id)pid;
-(void)showOperations;
-(void)purchaseEmoticon:(id)emoticon;
-(void)SaveEmoticon:(id)emoticon;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface FriendAssistMessageNodeView : BaseMessageNodeView <IContactMgrExt> {
	UIImageView* m_oBkgImageView;
	PushCard* m_oPushCard;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onModifyContact:(id)contact;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClick;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(void)recreateViews;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)updateBkgImage:(BOOL)image;
-(void)dealloc;
@end

@interface WTLoginMgr : MMObject {
}
+(void)clearPwdSig:(unsigned long long)sig;
+(BOOL)refreshVerfiyImageWithServerPackage:(id)serverPackage WithDictionary:(id)dictionary;
+(BOOL)resolveServerPackage:(id)package WithDictionary:(id)dictionary;
+(id)getCheckVerifyBuffer:(id)buffer;
+(id)getRefreshVerifyImageBuffer;
+(id)getLoginBuffer:(id)buffer;
+(id)getWTLoginAPIInstance;
@end

@interface GameMessageNodeView : BaseMessageNodeView {
	UIImageView* m_imageViewGame;
	unsigned long m_uiRealGameIndex;
	unsigned long m_uiGameType;
	unsigned long m_uiCurImageIndex;
	BOOL m_bIsSender;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)showOperations;
-(void)onMoreOperate:(id)operate;
-(void)onForward:(id)forward;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(void)stopAnimation;
-(void)doAnimation;
-(id)getGameImageByIndex:(unsigned long)index;
-(void)chageGameImage:(id)image;
-(id)tryGenHQImage:(id)image;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)dealloc;
-(id)initWithMessageWrap:(id)messageWrap Contact:(id)contact ChatContact:(id)contact3;
@end

@interface ImageMessageNodeView : BaseMessageNodeView {
	UIImageView* m_oBkgImageView;
	UIImageView* m_oImageView;
	MMLoadingView* m_oImageLoadingView;
	UIImageView* m_oImageDownloadFailView;
	BOOL m_bhasDownloadComplete;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)dealloc;
-(id)thumbImage;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onCopy:(id)copy;
-(void)onMoreOperate:(id)operate;
-(void)onFavoriteAdd:(id)add;
-(void)onForward:(id)forward;
-(void)showImage;
-(void)showOpearation;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(void)updateBkgImage:(BOOL)image;
-(CGSize)sizeForFrame:(CGRect)frame;
@end

@interface LocationMessageNodeView : BaseMessageNodeView <ILocationMgrExt, UIAlertViewDelegate> {
	XXStruct_zYrK5D m_coordinate;
	int m_geotag;
	MMLoadingView* m_oImageLoadingView;
	UILabel* m_oLocationLabel;
	UILabel* m_oPOINameLabel;
	UIActivityIndicatorView* m_oLoadingView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id).cxx_construct;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onMoreOperate:(id)operate;
-(void)onFavoriteAdd:(id)add;
-(void)onForward:(id)forward;
-(void)showOpearation;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(void)onDidFindAddress:(id)on forTag:(int)tag;
-(void)createNewRequest;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)updateBkgImage:(BOOL)image;
-(void)dealloc;
@end

@interface MailMessageNodeView : BaseMessageNodeView {
	UIImageView* m_oBkgImageView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClick;
-(void)onDelete:(id)aDelete;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)updateBkgImage:(BOOL)image;
-(void)dealloc;
@end

@interface ShareCardMessageNodeView : BaseMessageNodeView {
	UIImageView* m_oBkgImageView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)showOperations;
-(void)onClick;
-(void)onMoreOperate:(id)operate;
-(void)onForward:(id)forward;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)updateBkgImage:(BOOL)image;
-(void)dealloc;
@end

@interface TextMessageNodeView : BaseMessageNodeView <ILinkEventExt> {
	RichTextView* m_oRichTextView;
	UIImageView* m_oBkgImageView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(id)patternText;
-(id)titleText;
-(id)getContactDisplayName:(id)name;
-(void)dealloc;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(id)accessibilityLabel;
-(BOOL)isAccessibilityElement;
-(void)onMoreOperate:(id)operate;
-(void)onFavoriteAdd:(id)add;
-(void)onCopy:(id)copy;
-(void)onForward:(id)forward;
-(void)showOpearation;
-(void)onOrientationChanged;
-(void)layoutSubviewsInternal;
-(void)setRichtextViewContent;
-(void)updateSubviews;
-(void)updateBkgImage:(BOOL)image;
-(CGSize)sizeForFrame:(CGRect)frame;
-(float)labelWidth;
-(void)updateStatus:(id)status;
@end

@interface VideoMessageNodeView : BaseMessageNodeView {
	UIImageView* m_oBkgImageView;
	UIImageView* m_oImageView;
	UIImageView* m_oStatusView;
	UIView* m_oStatusBkgView;
	UILabel* m_oTimeLabel;
	UILabel* m_oFileSizeLabel;
	UIView* m_oProgressBkgView;
	MMProgressView* m_oProgressView;
	UIButton* m_oDownloadButton;
	MMLoadingView* m_oLoadingView;
	UIImageView* m_oImageDownloadFailView;
	BOOL m_bhasDownloadComplete;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(BOOL)isTouchInView:(id)view;
-(void)onClick;
-(void)showOpearation;
-(void)StartDownloadVideo:(id)video;
-(void)StartUploadVideo:(id)video;
-(void)StopDownloadVideo:(id)video;
-(void)StopUploadVideo:(id)video;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)updateBkgImage:(BOOL)image;
-(void)resend:(id)resend;
-(void)onMoreOperate:(id)operate;
-(void)onFavoriteAdd:(id)add;
-(void)onForward:(id)forward;
-(void)layoutSubviewsInternal;
-(void)updateContentViewHeight;
-(CGSize)sizeForFrame:(CGRect)frame;
-(id)thumbImage;
-(void)dealloc;
-(float)BkgImageHeight;
@end

@interface VoiceMessageNodeView : BaseMessageNodeView <ChatBackgroundExt> {
	UIImageView* m_oBkgImageView;
	UILabel* m_oSecLabel;
	UIImageView* m_oPlayingImageView;
	UIImageView* m_oBackImageView;
	UIImageView* m_oUnreadImageView;
	UILabel* m_oFwdHintLabel;
	UIImageView* m_oFwdHintBkgImageView;
	BOOL m_bIsPlaying;
	BOOL m_bVoiceOverFoucused;
}
@property(retain, nonatomic) UILabel* m_oSecLabel;
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)accessibilityElementDidLoseFocus;
-(void)accessibilityElementDidBecomeFocused;
-(void)onChatBackgroundChanged:(id)changed;
-(void)restartNodeViewAnimation;
-(void)stopNodeViewAnimation;
-(void)startNodeViewAnimation;
-(BOOL)isTouchInView:(id)view;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onClick;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onMoreOperate:(id)operate;
-(void)onForward:(id)forward;
-(void)onFavorite:(id)favorite;
-(void)onSwitch:(id)aSwitch;
-(void)showOpearation;
-(CGSize)forwardMsgSize;
-(BOOL)isForwardMsg;
-(void)initForwardHintLabel;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)updateVoiceLength:(id)length;
-(void)initUnreadView;
-(void)initBackImageView;
-(void)layoutSubviewsInternal;
-(void)updateSecLabelColor;
-(void)updateBkgImage:(BOOL)image;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)dealloc;
-(id)initWithMessageWrap:(id)messageWrap Contact:(id)contact ChatContact:(id)contact3;
-(float)calculateVoiceTimeLength:(unsigned long)length;
@end

@interface MultiPickImagePanel : MMUIView {
	NSMutableArray* _imageInfos;
	UIScrollView* _scrollView;
	UIButton* m_btnAdd;
	MMDelegateProxy<MultiPickImagePanelDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MultiPickImagePanelDelegate>* _delegate;
-(id)GetImageByIndex:(unsigned long)index;
-(unsigned long)GetImageCount;
-(void)onDoneBtnClicked:(id)clicked;
-(void)onAddBtn:(id)btn;
-(void)onImageClicked:(id)clicked;
-(BOOL)addImage:(id)image;
-(void)updateAddBtnFrame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMSwitchView : MMUIView <UIScrollViewDelegate, scrollViewDelegate> {
	BOOL m_on;
	MMScrollView* m_scrollView;
	UIImageView* m_ballView;
	UIImageView* m_sliderView;
	UIImageView* m_bgView;
	id m_targetChange;
	SEL m_selChange;
}
@property(assign, nonatomic, setter=set_on:) BOOL m_on;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)setChangeTarget:(id)target sel:(SEL)sel;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)fixSwitch:(int)aSwitch;
-(void)dealloc;
-(id)init;
-(void)fixBall;
@end

@interface ReaderNewMessageNodeView : BaseMessageNodeView {
	UIImageView* m_oBkgImageView;
	NSArray* m_arrBtnList;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(BOOL)shouldGoToEmoticonDetail:(id)emoticonDetail;
-(void)onClicked;
-(void)showOpearation;
-(void)onForward:(id)forward;
-(void)onFavoriteAdd:(id)add;
-(void)forwardMessage;
-(void)ShowReader:(id)reader;
-(void)updateBkgImage:(BOOL)image;
-(BOOL)isTouchInView:(id)view;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)reLayoutSubviews;
-(void)clickNodeViewBtn:(id)btn;
-(void)layoutSubviewsInternal;
-(id)getItemLabel:(id)label with:(float)with size:(float)size;
-(id)getAsyncImageWithFrame:(CGRect)frame;
-(id)getItemTitle:(float)title;
-(id)getTitleString:(id)string bBig:(BOOL)big bGray:(BOOL)gray;
-(id)getBigVideoImage;
-(id)getSmallVideoImage;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface MultiReaderMessageNodeView : ReaderNewMessageNodeView {
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)handleLongPressEx:(id)ex;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)BlogItemClickedUp:(id)up;
-(void)ReaderItemClicked:(id)clicked;
-(float)appendNodeViewHeightIfIndex:(int)index;
-(void)clickNodeViewBtn:(id)btn;
-(void)layoutSubviewsInternal;
-(void)updateBkgImage:(BOOL)image;
-(CGSize)sizeForFrame:(CGRect)frame;
-(id)getHighlightedImage:(unsigned long)image;
-(void)dealloc;
@end

@interface FeatureInfoLogViewController : SettingBaseViewController {
	UISwitch* _featureInfoSwitch;
}
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)makeSwitchCell:(id)cell colName:(id)name action:(SEL)action on:(BOOL)on;
-(void)onFeatureLogSwitchChanged:(id)changed;
-(void)viewDidLoad;
-(void)initView;
-(void)dealloc;
@end

@interface BlogMessageNodeView : ReaderNewMessageNodeView {
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)showOpearation;
-(void)BlogItemClickedUp:(id)up;
-(void)ReaderItemClicked:(id)clicked;
-(void)layoutSubviewsInternal;
-(void)updateBkgImage:(BOOL)image;
-(CGSize)sizeForFrame:(CGRect)frame;
-(id)getHighlightedImage:(unsigned long)image;
-(void)dealloc;
@end

@interface NewDeviceLoginViewController : MMUIViewController <VerifyPhoneDelegate, UIAlertViewDelegate> {
	MMTableViewInfo* m_tableViewInfo;
	NSString* m_nsPhoneNumber;
	NSString* m_nsAuthTicket;
	unsigned long m_uiFromScene;
	MMDelegateProxy<NewDeviceLoginViewControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) unsigned long m_uiFromScene;
@property(assign, nonatomic) MMDelegateProxy<NewDeviceLoginViewControllerDelegate>* m_delegate;
@property(retain, nonatomic) NSString* m_nsAuthTicket;
@property(retain, nonatomic) NSString* m_nsPhoneNumber;
-(void)loginByPhoneVerifiedWithUserName:(id)userName ticket:(id)ticket;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initFooterView;
-(void)onCloseLink;
-(void)jumpToUnProtectPage;
-(void)setNavigationButton;
-(void)showVerifyPhoneView;
-(void)onBack;
@end

@interface VoiceVOIPViewController : MMUIWindow <IVOIPExt, VoiceVoipTalkingViewDelegate> {
	UIAlertView* _alertView;
	int _status;
	CContact* _contact;
	BOOL _isEndCall;
	UIView* _profileContainerView;
	UIView* _containerView;
	UIImageView* _backgroundView;
	MMHeadImageView* _HeadImageView;
	UIView* _footerView;
	UIImageView* _headFrame;
	UIButton* _tipsView;
	UILabel* _statusLabel;
	CMessageWrap* _msgWrap;
	BOOL _isConnectOK;
	AVAudioPlayer* _player;
}
@property(retain, nonatomic) CMessageWrap* msgWrap;
@property(retain, nonatomic) CContact* contact;
-(void)switchToTalkingView;
-(void)onConfirm;
-(void)stopPlaySound;
-(void)playEndingSound;
-(void)playSound:(id)sound OfType:(id)type numberOfLoops:(int)loops;
-(void)endCall;
-(void)TalkingViewEndCall;
-(void)endCallAfterDelay:(float)delay;
-(void)disAppearWithAnimation;
-(void)stopDisAppearWithAnimation;
-(void)appearWithAnimation;
-(void)dealloc;
-(void)initView;
-(void)initTipsView;
-(void)initFooterView;
-(void)initProfileContainerView;
-(void)initBackgroundView;
-(void)updateStatusLabel;
-(void)formVOIPSysMsgView;
-(id)initWithFrame:(CGRect)frame andContact:(id)contact;
@end

@interface VoiceVOIPCallerViewController : VoiceVOIPViewController <UIAlertViewDelegate> {
	UIButton* _cancelBtn;
}
-(void)switchToTalkingView;
-(void)endCallAfterDelay:(float)delay;
-(void)OnInterrupt:(id)interrupt;
-(void)OnSyncError:(id)error ErrNo:(int)no;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnBeginTalk:(id)talk;
-(void)OnBeHanguped:(id)hanguped;
-(void)OnBeginConnect:(id)connect;
-(void)OnBeRejected:(id)rejected;
-(void)OnTimeOut:(id)anOut;
-(void)OnBeAccepted:(id)accepted;
-(void)OnNoAnswer:(id)answer;
-(void)OnCall:(id)call ErrNo:(int)no;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showAlertTips;
-(void)viewDidLoad;
-(void)checkAndShowAlertView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andContact:(id)contact;
-(id)init;
-(void)cancelCall;
-(void)call;
-(void)initTipsView;
-(void)initFooterView;
-(void)updateStatusLabel;
@end

@interface VoiceVoipTalkingView : UIView <IVOIPExt, VoipLoudspeakerModeSwitchDelegate> {
	int _status;
	UIView* _backgroundView;
	UIButton* _tipsView;
	UIImageView* _footerView;
	BOOL _isEndCall;
	AVAudioPlayer* _player;
	VoipLoudspeakerModeSwitch* _loudSpeakerSwitch;
	CContact* _contact;
	id<NSObject, VoiceVoipTalkingViewDelegate> _delegate;
	BOOL _isLoudspeaker;
}
@property(retain, nonatomic) CContact* contact;
@property(assign, nonatomic) id<NSObject, VoiceVoipTalkingViewDelegate> delegate;
-(void)VoipLoudspeakerModeSwitchChangeMode:(unsigned long)mode;
-(void)OnSyncError:(id)error ErrNo:(int)no;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnInterrupt:(id)interrupt;
-(void)OnBeHanguped:(id)hanguped;
-(void)onHangup;
-(void)initTipsView;
-(void)initFooterView;
-(void)initProfileView;
-(void)initBackgroundView;
-(void)initView;
-(void)stopPlaySound;
-(void)playTipsSound:(id)sound ofType:(id)type;
-(void)asyncPlayTipsSound;
-(void)playSound:(id)sound OfType:(id)type;
-(void)updateTipsView;
-(void)updateTipsStatusLabel;
-(void)updateLoudspeakerStatus;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andContact:(id)contact isLoundSpeaker:(BOOL)speaker;
@end

@interface VoiceVOIPReceiverViewController : VoiceVOIPViewController <VoipLoudspeakerModeSwitchDelegate, UIAlertViewDelegate, IRecordPermissionCheckExt> {
	BOOL isNeedFormSysMsg;
	UIButton* _acceptBtn;
	UIButton* _rejectBtn;
	UIButton* _hangupBtn;
	UIImageView* _newFooterView;
	VoipLoudspeakerModeSwitch* _loudSpeakerSwitch;
}
-(void)switchToTalkingView;
-(void)VoipLoudspeakerModeSwitchChangeMode:(unsigned long)mode;
-(void)OnBeHanguped:(id)hanguped;
-(void)OnSyncError:(id)error ErrNo:(int)no;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnTimeOut:(id)anOut;
-(void)OnInterrupt:(id)interrupt;
-(void)OnBeginTalk:(id)talk;
-(void)OnBeginConnect:(id)connect;
-(void)OnAccept:(id)accept ErrNo:(int)no;
-(void)endCallByCancel;
-(void)endCallAfterDelay:(float)delay;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)viewDidLoad;
-(void)checkAndShowAlertView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andContact:(id)contact;
-(id)init;
-(void)OnRecordPermissioned;
-(void)OnRecordDenied;
-(void)hangup;
-(void)rejectCall;
-(void)realAcceptCall;
-(void)acceptCall;
-(void)updateFooterView;
-(void)showNewFooterView;
-(void)asyncStartNetDetect;
-(void)asyncPlaySoundFromBackgroundToForeground;
-(void)asyncPlaySound;
-(void)asyncAcceptVoice;
-(void)updateStatusLabel;
-(void)markLastVoipInfo;
-(void)initTipsView;
-(void)initFooterView;
@end

@interface CShareResourceProvider : NSObject <MMThemeManagerExt> {
}
+(float)GetTableViewSeperatorLineHeight;
+(id)GetContactIndexTitleColor;
+(id)GetLinkBtnWithTitle:(id)title image:(id)image;
+(id)GetLinkBtnWithTitle:(id)title;
+(id)GetTabBarSettingHLImage;
+(id)GetTabBarFFHLImage;
+(id)GetTabBarContactsHLImage;
+(id)GetTabBarMainFrameHLImage;
+(id)GetShadowLogoImage;
+(id)GetNavigationBarTintColor;
+(id)GetWhiteRoundButton:(id)button;
+(id)GetBottleButton;
+(id)GetRedBigButton;
+(id)GetDeleteRedButton;
+(id)GetBlueButton;
+(id)GetGreenBigButton;
+(id)GetGreenButton;
+(id)GetOperateBigFontSizeButton;
+(id)GetOperateBigButton;
+(id)GetOperateButton;
+(id)GetBackGroundViewOfDefaultTheme;
+(id)GetBackGroundView;
+(id)GetBlackBackGroundView;
+(id)CreateBackGroundImageWithImage:(id)image;
+(id)GetGrayBlueColor;
+(id)GetLoginLinkColor;
+(id)GetSendMsgDisabledColor;
+(id)GetTableViewValueColor;
+(id)GetMessageNodeTimeColor;
+(id)GetMessageListTimeColor;
+(id)GetReturnButton:(id)button andRect:(CGRect)rect;
+(id)GetDefaultButton:(id)button andRect:(CGRect)rect;
+(id)GetButtonWithoutTitle:(id)title highlightImage:(id)image andRect:(CGRect)rect;
+(id)GetButtonWithTitle:(id)title normalImage:(id)image highlightImage:(id)image3 andRect:(CGRect)rect;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedCShareResourceProvider;
+(void)initialize;
-(void)onThemeChanged;
-(void)dealloc;
-(id)init;
@end

@interface UiUtil : NSObject {
}
+(CGRect)screenRectRelativeToView:(id)view;
+(void)fixNavigationController:(id)controller;
+(float)topBarNormalOffset;
+(BOOL)isTopBarInNormalState;
+(float)taskBarHeight;
+(void)setTaskBarHeight:(float)height Animated:(BOOL)animated;
+(void)setTaskBarHidden:(BOOL)hidden withAnimation:(int)animation;
+(void)setTaskBarHidden:(BOOL)hidden;
+(BOOL)isTaskBarHidden;
+(void)setTopBarHidden:(BOOL)hidden withAnimation:(int)animation;
+(void)setTopBarHidden:(BOOL)hidden;
+(BOOL)isTopBarHidden;
+(void)changeOffset:(float)offset;
+(void)setStatusBarHidden:(BOOL)hidden withAnimation:(int)animation;
+(void)setStatusBarHidden:(BOOL)hidden;
+(BOOL)isStatusBarHidden;
+(void)OnSystemStatusBarFrameChange;
+(id)mainWindow;
+(float)contentViewHeight:(id)height;
+(float)screenWidth:(int)width;
+(float)screenWidth;
+(float)screenHeight:(int)height;
+(float)screenHeight;
+(float)navigationBarHeight:(int)height;
+(float)navigationBarHeight;
+(float)statusBarHeight:(int)height;
+(float)statusBarHeight;
@end

@interface ImageSelectorController : MMObject <ILocationMgrExt, WCSelectorViewDelegate, WCSelectorViewDataSource, UIActionSheetDelegate, WCMultiImageScannerDelegate, FacebookImagePickerControllerDelegate, MMImagePickerManagerDelegate> {
	NSMutableArray* _arrImages;
	WCSelectorView* _selectorView;
	UINavigationController* _navigationController;
	MMDelegateProxy<SelectorControllerDelegate>* _delegate;
	BOOL _bChoosed;
}
@property(assign, nonatomic) BOOL bChoosed;
@property(assign, nonatomic) MMDelegateProxy<SelectorControllerDelegate>* delegate;
@property(assign, nonatomic) UINavigationController* navigationController;
@property(retain, nonatomic) WCSelectorView* selectorView;
@property(retain, nonatomic) NSMutableArray* arrImages;
-(BOOL)shouldShowDeleteView;
-(id)getViewController;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)fbImagePickerController:(id)controller didFinishPickingImages:(id)images;
-(void)onDeleteItemAtIndex:(unsigned)index;
-(void)onAddViews;
-(void)showFBAlbumActionSheet;
-(void)showActionSheet;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showFacebookAlbums;
-(void)showImagePicker:(int)picker;
-(void)onDeleteViewAtIndex:(unsigned)index;
-(void)didSelectViewAtIndex:(unsigned)index;
-(CGSize)sizeForViews;
-(id)viewAtIndex:(unsigned)index;
-(unsigned)numbersOfViews;
-(void)dealloc;
-(id)init;
@end

@interface ContactsSelectorController : MMObject <WCSelectorViewDelegate, WCSelectorViewDataSource, WCSelectContactDelegate, WCEditMemberPannelDelegate, WCEditMemberPannelDataSource, WCContactItemDeleteViewDelegate> {
	NSMutableArray* _arrFilteredContacts;
	NSMutableArray* _arrContacts;
	WCSelectorView* _selectorView;
	WCEditMemberPannel* _editMemberPannel;
	NSMutableDictionary* _dicContactItemDeleteView;
	UINavigationController* _navigationController;
	MMDelegateProxy<SelectorControllerDelegate>* _delegate;
	MMDelegateProxy<ContactsSelectorControllerDelegate>* _selectDelegate;
	BOOL _hasSelectCountLimit;
	unsigned long _selectCountLimit;
}
@property(assign, nonatomic) unsigned long selectCountLimit;
@property(assign, nonatomic) BOOL hasSelectCountLimit;
@property(assign, nonatomic) MMDelegateProxy<ContactsSelectorControllerDelegate>* selectDelegate;
@property(assign, nonatomic) MMDelegateProxy<SelectorControllerDelegate>* delegate;
@property(assign, nonatomic) UINavigationController* navigationController;
@property(retain, nonatomic) WCEditMemberPannel* editMemberPannel;
@property(retain, nonatomic) WCSelectorView* selectorView;
@property(retain, nonatomic) NSMutableArray* arrContacts;
@property(retain, nonatomic) NSMutableArray* arrFilteredContacts;
-(void)onClickDeleteButton:(id)button withContact:(id)contact;
-(void)onClickHeadImage:(id)image withContact:(id)contact;
-(id)editMemberPannel:(id)pannel viewForItem:(unsigned)item;
-(unsigned)numberOfItems:(id)items;
-(void)onClickAddButton:(id)button;
-(void)OnWCSelectUsrNameList:(id)list;
-(void)onClickWholeView;
-(BOOL)shouldShowDeleteView;
-(CGSize)sizeForViews;
-(id)viewAtIndex:(unsigned)index;
-(unsigned)numbersOfViews;
-(void)dealloc;
-(id)init;
-(id)getViewController;
-(void)removeContact:(id)contact;
@end

@interface AddContactToChatRoomViewController : MMUIViewController <NewChatRoomMemberItemViewDelegate, IContactMgrExt, CreateChatLogicDelegate, contactInfoDelegate, UIActionSheetDelegate, UIAlertViewDelegate> {
	CContact* m_contact;
	id<addContactToChatRoomDelegate> m_delegate;
	MMTableView* m_tableView;
	UIView* m_headerView;
	CreateChatLogic* m_createChatLogic;
	BOOL m_bTopSession;
	MMTableViewInfo* m_tableViewInfo;
}
@property(retain, nonatomic) CreateChatLogic* m_createChatLogic;
@property(assign, nonatomic) id<addContactToChatRoomDelegate> m_delegate;
@property(retain, nonatomic) CContact* m_contact;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)setTopSession;
-(void)onDeleteContact:(id)contact;
-(void)OnChangeNotifyStatus:(id)status withStatus:(BOOL)status2;
-(void)onModifyContact:(id)contact;
-(void)processModContact:(id)contact;
-(void)onCreateChatContactReturn:(id)aReturn;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)dealloc;
-(void)viewDidLoad;
-(void)reloadView;
-(void)initView;
-(void)reloadTableData;
-(void)makeMemberCell:(id)cell;
-(void)initMemberView;
-(void)setWXTalkRoomFlag:(id)flag TalkRoomMemberList:(id)list ItemUsername:(id)username;
-(void)onClear;
-(void)onOpenWXTalk;
-(void)onEditAndSearch;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showChatBackgroundConfig;
-(void)setMuteStatus;
-(BOOL)setUpdateNotifyMuted:(BOOL)muted;
-(void)onFinishedShareMyFriend:(BOOL)aFriend;
-(id)getMyFriendContact;
-(id)getShareMyFriendParentViewController;
-(void)initData;
-(BOOL)isTopSessionCountExceed;
-(void)onTopSession:(BOOL)session;
-(BOOL)getSessionTopped;
-(void)tryGetContactUsrImg;
-(void)onAddMember:(id)member;
-(void)createChatRoom;
-(void)openContactInfo:(id)info;
@end

@interface WCOfflinePayControlLogic : WCBizControlLogic <IWCOfflinePayLogicMgrExt> {
	WCOfflinePayControlData* m_data;
}
-(void)onErrorAlertViewDismiss:(id)dismiss;
-(void)onErrorAlertViewStopLogic:(id)logic;
-(BOOL)onError:(id)error;
-(void)stopLogic;
-(void)pause;
-(void)resume;
-(void)dealloc;
-(id)initWithData:(id)data;
-(id)init;
@end

@interface WCForwardViewController : MMUIViewController <InputControllerDelegate, BaseEmoticonViewDelegate, UIScrollViewDelegate, scrollViewDelegate, UITextViewDelegate, SelectorControllerDelegate, ContactsSelectorControllerDelegate, UIAlertViewDelegate, IMsgExt, ILocationMgrExt, WCFacadeExt, IMMGrowTextViewExt> {
	WCDataItem* _forwardDataItem;
	int _iPostSource;
	int _geotag;
	XXStruct_zYrK5D _coordinate;
	NSString* _city;
	int _iLocationTag;
	MMScrollView* _scrollView;
	MMGrowTextView* _textView;
	UIImageView* _textViewBkgView;
	UIView* _mediaViewBkgView;
	WCSelectorView* _withContactView;
	UIButton* _locationButton;
	UILabel* _withYouLabel;
	UIImageView* _withYouLogo;
	RoundTableViewCell* _privacyCell;
	WCEditMemberPannel* _editMemberPannel;
	ContactsSelectorController* _contactsSelectorController;
	WCInputController* _inputController;
	BOOL _bHasInput;
	UIImageView* _inputView;
	EmoticonBoardView* _emoticonBoardView;
	UIButton* _expressionButton;
	unsigned long _iInputSection;
	id<WCCommitViewAnimationDelegate> _delegate;
	WCDataItem* _cacheDateItem;
	MMLoadingView* _loadingView;
	NSTimer* _fireTimer;
	BOOL _bNeedAnimation;
	BOOL _bShowLocation;
	unsigned _singlePasteTextMaxLength;
	id<WCCommitViewResultDelegate> _resultDelegate;
	NSObject* _userData;
}
@property(retain, nonatomic) NSObject* userData;
@property(retain, nonatomic) id<WCCommitViewResultDelegate> resultDelegate;
@property(assign, nonatomic) int iPostSource;
@property(assign, nonatomic) BOOL bShowLocation;
@property(assign, nonatomic) BOOL bNeedAnimation;
@property(assign, nonatomic) id<WCCommitViewAnimationDelegate> delegate;
-(id).cxx_construct;
-(void)dealloc;
-(BOOL)couldSelectContacts;
-(void)hideInputController;
-(BOOL)showAddView;
-(void)updateSelectorView;
-(void)onWCPostPrivacyChanged;
-(void)OnDone;
-(void)OnReturn;
-(void)onLocationBtnClick;
-(void)onPrivacyCellClicked;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)stopUpdateLocation;
-(void)startUpdateLocation;
-(void)initLocation;
-(void)onGPSAccurateLocationChanged:(id)changed withTag:(int)tag;
-(void)onDidFindAddress:(id)on forTag:(int)tag;
-(void)viewDidUnload;
-(void)viewWillAppear:(BOOL)view;
-(void)showPrivacyAlertView;
-(void)viewDidLoad;
-(void)initView;
-(void)layoutSubviews;
-(void)createSubviews;
-(void)addViewForMedia;
-(id)getViewController;
-(id)initWithDataItem:(id)dataItem;
-(void)commonInit;
-(void)reloadExpressionButtonImage:(int)image;
-(void)onExpressionButtonClicked:(id)clicked;
-(void)keyboardDidHide;
-(void)textViewTextDidChange;
-(void)keyboardWillShow;
-(void)MMGrowTextViewBeginEditing:(id)editing;
-(void)MMGrowTextViewHeightDidChanged:(id)mmgrowTextViewHeight;
-(void)didCommitText:(id)text;
-(void)resignInput;
-(void)becomeInput;
-(void)updateContentOffset;
-(void)initInputController;
-(void)initEmoticonView;
-(void)initInputToolView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)onTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)animationDidStop:(id)animation finished:(id)finished context:(void*)context;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)beginAnimationStepTwo;
-(void)beginAnimationStepOne;
-(void)onLoadingShowOK:(id)ok;
-(void)showLoadingView;
@end

@interface MassSendMessageNodeView : BaseMessageNodeView <LongPressImageViewDelegate, IAudioReceiverExt> {
	NSMutableArray* _arrReceivers;
	MMUILongPressImageView* _bkgImageView;
	UILabel* _receiverLabel;
	UIView* _contentView;
	UIButton* _sendAgainBtn;
	UIImageView* _arrowImageView;
	UIImageView* _upperFrameImageView;
	UIImageView* _lowerFrameImageView;
	BOOL _bShowDetail;
	BOOL _bIsPlaying;
	BOOL _bLayout;
}
@property(retain, nonatomic) UIImageView* lowerFrameImageView;
@property(retain, nonatomic) UIImageView* upperFrameImageView;
@property(retain, nonatomic) UIImageView* arrowImageView;
@property(retain, nonatomic) UIButton* sendAgainBtn;
@property(retain, nonatomic) UIView* contentView;
@property(retain, nonatomic) UILabel* receiverLabel;
@property(retain, nonatomic) MMUILongPressImageView* bkgImageView;
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)StopPlaying;
-(void)OnEndPlaying:(unsigned long)playing isForceStop:(BOOL)stop;
-(void)onSendAgain:(id)again;
-(void)onVoiceClicked:(id)clicked;
-(void)onVideoClicked:(id)clicked;
-(void)onImageClicked:(id)clicked;
-(void)OnLongPress:(id)press;
-(void)OnPress:(id)press;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(id)FormVideoView;
-(id)FormVoiceView;
-(float)calculateVoiceTimeLength:(unsigned long)length;
-(id)FormImageView;
-(id)FormTextView;
-(void)layoutSubviewsInternal;
-(void)reLayoutSubviews;
-(void)layoutViews;
-(void)createSubviews;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)initData;
-(void)dealloc;
@end

@interface NameEditorViewController : MMUIViewController <UITextFieldDelegate> {
	MMTableViewInfo* m_tableViewInfo;
	MMTableViewCellInfo* m_editInfo;
	NSString* m_nsOldText;
	NSString* m_nsFooterTip;
	id m_targetOnSave;
	SEL m_selOnSave;
	BOOL m_bEnableEmpty;
	id m_userData;
}
@property(retain, nonatomic) id m_userData;
@property(assign, nonatomic) BOOL m_bEnableEmpty;
@property(retain, nonatomic) NSString* m_nsOldText;
-(void)enableAutoCorrect:(BOOL)correct;
-(void)dealloc;
-(id)initWithSaveTarget:(id)saveTarget sel:(SEL)sel footerTip:(id)tip textTip:(id)tip4;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)onSaveText;
-(void)disMissThisViewAnimated;
-(void)viewDidLoad;
@end

@interface SettingMyProfileViewController : MMUIViewController <HDHeadImageViewDelegate, settingModifySignDelegate, settingModifyAliasDelegate, MMRegionPickerViewControllerDelegate, settingMyAccountExtInfoLogicDelegate, CSettingExt, BrandStoryMgrExt, SettingTencentWBDelegate> {
	MMHeadImageView* m_headImage;
	MMRegionPickerViewController* m_regionPicker;
	MMHDHeadImageView* m_hdHeadImageView;
	SettingMyAccountExtInfoLogic* m_infoLogic;
	MMTableViewInfo* m_tableViewInfo;
}
-(void)MMRegionPickerDidChoosRegion:(id)mmregionPicker;
-(void)saveNewSign:(id)sign;
-(void)onModifySex:(id)sex;
-(void)saveNewAlias;
-(void)onModifyNickName:(id)name;
-(void)onSettingChanged:(int)changed;
-(void)onImgChangeEnd:(BOOL)end;
-(void)onImgBeginChange:(id)change;
-(void)onInfoChange;
-(void)dealloc;
-(void)showAccountView;
-(void)showQRInfoView;
-(void)showModifySignView;
-(void)showModifyAddressView;
-(void)showModifyUserName;
-(void)showModifyNickName;
-(void)showModifySexView;
-(id)getAddressString;
-(id)getSexString;
-(float)getSignCellHeight;
-(void)makeChangeImgCell:(id)cell;
-(void)makeMyAccountCell:(id)cell;
-(void)makeQRInfoCell:(id)cell;
-(void)setClickHeadImageEvent;
-(void)makeSignCell:(id)cell;
-(void)willAppear;
-(void)willDisshow;
-(void)viewDidLoad;
-(void)onIKnowItBtnClick;
-(void)onChangeImg;
-(void)ChangeSex:(id)sex;
-(void)SaveAndExit;
-(void)Save;
-(void)returnBack;
-(void)updateHead:(id)head;
-(id)getSettingHeadImage;
-(void)updateTableCell;
-(void)makeWeiboCell:(id)cell;
-(void)goToSetTencentWB;
-(void)OnOpenTXWB:(BOOL)txwb;
-(BOOL)isNeedShowWCPay;
@end

@interface NSStringSelectViewController : MMUIViewController {
	MMTableViewInfo* m_tableViewInfo;
	id m_targetOnSelect;
	SEL m_selOnSelect;
}
-(void)OnSelectCell:(id)cell;
-(void)dealloc;
-(void)viewDidLoad;
-(void)setOnSelectTarget:(id)target sel:(SEL)sel;
-(id)initWithArray:(id)array selected:(id)selected;
-(void)updateTableViewWithArray:(id)array selected:(id)selected;
-(void)initView;
@end

@interface VoipContentNodeView : BaseMessageNodeView {
	UIImageView* m_oBkgImageView;
	UIImageView* m_oUnreadImageView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)asyncStartNetDetect;
-(void)startVoiceVoip;
-(void)startVideoVoip;
-(void)tapVoiceVoipNodeView;
-(void)tapVoipNodeView;
-(void)onMoreOperate:(id)operate;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onLongPressed;
-(void)onClicked;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)updateBkgImage:(BOOL)image;
-(void)dealloc;
@end

@interface AlbumContactInfoAssist : PluginContactInfoAssist <WCFacadeExt> {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onWCGroupUpdatedReturn:(BOOL)aReturn;
-(void)dealloc;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface CBaseContactInfoAssist : MMObject <UITableViewDelegate, UITableViewDataSource, contactVerifyLogicDelegate, IContactMgrExt, UIActionSheetDelegate, UIAlertViewDelegate, PBMessageObserverDelegate, WCFacadeExt, QZoneLoginStatusDelegate, BrandStoryMgrExt> {
	UIView* m_headerView;
	UIView* m_footerView;
	UIView* m_introView;
	MMHeadImageView* m_headView;
	MMHDHeadImageView* m_HDHeadView;
	MMLoadingView* m_loadingView;
	CContact* m_contact;
	CContact* m_chatContact;
	MMTableView* m_tableView;
	UIImageView* m_statusView;
	UILabel* m_statusLabel;
	UIView* m_switchView;
	UILabel* m_nickNameLabel;
	UILabel* m_userNameLabel;
	UILabel* m_roomNicknameLabel;
	UILabel* m_locationLabel;
	NSString* _location;
	UILabel* m_remarkLael;
	UIButton* m_headRemarkBtn;
	UIButton* m_wcPrivacyBtn;
	unsigned long m_uOpType;
	unsigned long m_uiVerify;
	BOOL m_bInContactsInit;
	BOOL m_bInContactsAfter;
	UIButton* m_favourButton;
	UIImageView* m_sexImageView;
	int m_pluginType;
	UIButton* m_installBtn;
	UIButton* m_uninstallBtn;
	BOOL m_isFirstAddThisContact;
	UIImageView* m_outsiderView;
	UIImageView* m_wcBlacklistView;
	MMDelegateProxy<ContactInfoAssistDelegate>* m_delegate;
	NSMutableArray* m_buttonArray;
	CertInfo* m_certInfo;
	NSMutableArray* m_arrRowType;
	MMHeadImageView* m_infoHeadView;
	NSArray* m_arrayAlbum;
	BOOL m_hasRequestUpdateAlbum;
	QZoneLoginStatus* m_qzone;
	NSMutableDictionary* m_tableIndexPathMap;
}
@property(retain, nonatomic) NSString* location;
@property(retain, nonatomic) NSArray* m_arrayAlbum;
@property(retain, nonatomic) MMHeadImageView* m_headView;
@property(assign, nonatomic) MMDelegateProxy<ContactInfoAssistDelegate>* m_delegate;
@property(assign, nonatomic) BOOL m_bInContactsAfter;
@property(assign, nonatomic) BOOL m_bInContactsInit;
@property(assign, nonatomic) unsigned long m_uiVerify;
@property(retain, nonatomic) CContact* m_chatContact;
@property(retain, nonatomic) CContact* m_contact;
-(void)onContactUpdated;
-(void)onQZoneUrl:(id)url;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onSendQQMsg:(id)msg;
-(void)updateSaveRemarkNameBtn;
-(void)updateOnGetCertInfo;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)Call;
-(void)tryCall;
-(void)showAlbum;
-(void)showWeibo;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(void)makeAlbumCell:(id)cell;
-(void)addImageToCell:(id)cell;
-(void)onHomepageUpdate:(int)update withAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(void)makeSourceCell:(id)cell;
-(void)makeFacebookCell:(id)cell row:(unsigned)row;
-(void)makeQQCell:(id)cell row:(unsigned)row;
-(id)getQQUsrName;
-(void)updateWCBlacklistView;
-(void)updateOutsiderView;
-(void)OnQQAction;
-(void)OnHandleMobile;
-(void)makeGMailCell:(id)cell row:(unsigned)row;
-(void)makeMobileCell:(id)cell row:(unsigned)row;
-(void)makeVCell:(id)cell row:(unsigned)row;
-(void)makeWeiboCell:(id)cell;
-(void)makeWeiboCellInfoInternal:(id)internal col:(id)col nickname:(id)nickname address:(id)address;
-(void)makeCellInfoInternal:(id)internal col:(id)col value:(id)value;
-(void)makeContactIntroCell:(id)cell text:(id)text;
-(float)heightForPluginIntroCell:(id)pluginIntroCell;
-(void)makeSignatureCell:(id)cell row:(unsigned)row;
-(void)makeCell:(id)cell col:(id)col value:(id)value imageView:(id)view;
-(void)makeTwoLineCell:(id)cell col:(id)col value:(id)value value2:(id)a2 imageView:(id)view;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)getLinesForSignature:(id)signature;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(void)updateNavigatorController:(id)controller;
-(void)resetPushmailCellType;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)dealloc;
-(id)GetFloatView;
-(id)GetTableView;
-(id)GetLoadingView;
-(BOOL)isFromStrangeScene;
-(id)initWithContact:(id)contact andChatContact:(id)contact2 andVerify:(unsigned long)verify delegate:(id)delegate;
-(id)initWithContact:(id)contact andVerify:(unsigned long)verify delegate:(id)delegate;
-(void)initLoadingView;
-(void)stopLoading;
-(void)startLoading;
-(void)resetLoadingText;
-(id)getLoadingText;
-(void)initFooterView;
-(void)contactVerifyOk:(id)ok opCode:(unsigned long)code;
-(void)addContactInternal;
-(void)handleAddedContact;
-(void)onVerifyContactOk;
-(void)onSayHelloToContact;
-(void)onAddToContacts;
-(void)verifyContactWithOpCode:(unsigned long)opCode;
-(void)initIntroViewWithText:(id)text;
-(void)initTableView;
-(void)initData;
-(BOOL)isShowAddFriendScene;
-(BOOL)isInMyContactList;
-(BOOL)isFromQRCode;
-(void)initHeaderView;
-(void)reloadTableView;
-(void)initHeadImage;
-(void)initNickNameLabel;
-(void)initFavourButton;
-(void)initWCBlacklistView;
-(void)initOutsiderView;
-(void)initWCPrivacyButton;
-(void)initHeadRemarkButton;
-(void)initRoomNameLabel;
-(void)initRemarkLabel;
-(void)initLocationLabel;
-(void)initUserNameLabel;
-(BOOL)IsShowUserName;
-(id)getWeiboUserName;
-(id)getUserNameCol;
-(void)onClickClearMessage;
-(void)makeClearMessageCell:(id)cell;
-(void)promptUninstall;
-(void)initInstallView;
-(void)clearPluginData;
-(void)uninstallPlugin;
-(void)installPlugin;
-(void)updateInstallStateAndReloadTableView;
-(void)updateInstallView;
-(void)makeSwitchCell:(id)cell withTip:(id)tip andStatus:(BOOL)status;
-(void)onSwitchValueChange:(id)change;
-(void)onSwitchViewOff;
-(void)onSwitchViewOn;
-(void)opFavour;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)opSetWCPermissions;
-(void)opEditRemarkName;
-(void)opShareMyFriend;
-(void)updateFooterView;
-(void)updateHeadImage;
-(void)updateFavourMarkAnimated:(BOOL)animated;
-(void)updateNickNameLabel;
-(void)initSexImageView;
-(void)doFavourAnimation;
-(void)updateRemarkLabel;
-(void)updateLocationLabel:(id)label;
-(void)updateLabelBelowUsrName;
-(void)initHDHeadImage;
-(id)init;
@end

@interface BlogAppContactInfoAssist : PluginContactInfoAssist <UIAlertViewDelegate> {
}
-(void)installPlugin;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface BrandUserContactInfoAssist : CBaseContactInfoAssist <UIAlertViewDelegate> {
	UIButton* _viewMsgBtn;
	UIButton* _followBtn;
	BOOL _isChanged;
	MMBrandHeadImageView* m_brandHeadView;
	NSMutableArray* m_arrData;
}
@property(retain, nonatomic) NSMutableArray* m_arrData;
-(BOOL)isInCustomAlertMode;
-(BOOL)isContactExpired;
-(float)getVerifySourceRightWidth;
-(void)canNotFollowContact:(id)contact;
-(float)getTextFieldTopMarginVerifyLogic:(id)logic;
-(id)getAlertMessageForVerifyLogic:(id)verifyLogic;
-(id)getAlertTitleForVerifyLogic:(id)verifyLogic;
-(void)contactVerifyOk:(id)ok opCode:(unsigned long)code;
-(void)checkIsChanged;
-(void)onBlockSwitchChanged:(id)changed;
-(void)onShowSwitchChanged:(id)changed;
-(void)onEnterWebView:(id)view;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onAllowPositionChanged:(id)changed;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onClearContent;
-(void)onCancelFocus:(id)focus;
-(void)onClickNavRightButton;
-(id)getUrlItemUrl:(id)url;
-(id)getUrlItemDescription:(id)description;
-(id)getMatchTitle:(id)title;
-(id)getPrivilegeIcon:(id)icon;
-(id)getMatchDescription:(id)description;
-(int)getPrivilegeItemHeight:(id)height;
-(int)calPrivilegesCellHeight;
-(int)calVerifySourceCellHeight;
-(int)calSignatureCellHeight;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)reloadTableView;
-(void)onContactUpdated;
-(void)updateFooterView;
-(void)makeShowMessageCell:(id)cell;
-(void)makeAllowPositionCell:(id)cell;
-(void)makeHideFromProfileCell:(id)profileCell;
-(void)makeBlockMessageNotifyCell:(id)cell;
-(void)makeUrlCell:(id)cell withData:(id)data;
-(void)makePrivilegesCell:(id)cell;
-(void)makeVerifySourceCell:(id)cell;
-(void)makeSignatureCell:(id)cell;
-(void)reloadRowData;
-(void)updateNickNameLabel;
-(void)initFooterView;
-(void)initNickNameLabel;
-(void)initHDHeadImage;
-(void)initHeadImage;
-(void)updateNavigationBarRightButton;
-(void)initHeaderView;
-(id)initWithContact:(id)contact andVerify:(unsigned long)verify delegate:(id)delegate;
-(void)dealloc;
@end

@interface FacebookContactInfoAssist : PluginContactInfoAssist <IMMFacebookMgrExt> {
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapSectionIndexType;
	stWeixinEntryRow* m_ShareInfo;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)onUnBindFacebookFinish:(unsigned long)finish;
-(void)onBindFacebookFinish:(unsigned long)finish;
-(void)updateInstallStateAndReloadTableView;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)showShareView;
-(void)showBindView;
-(id)getPluginIntro;
-(void)initHeaderView;
-(void)dealloc;
-(void)initData;
-(void)initFacebookContactData;
-(id)initWithContact:(id)contact andVerify:(unsigned long)verify delegate:(id)delegate;
@end

@interface CFloatBottleContactInfoAssist : PluginContactInfoAssist {
}
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeReadMsgCell:(id)cell;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
-(void)makeApplyCell:(id)cell;
@end

@interface CFriendAssistContactInfoAssist : PluginContactInfoAssist <IMMFacebookMgrExt> {
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapCellType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapSectionType;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)onUnBindFacebookFinish:(unsigned long)finish;
-(void)onBindFacebookFinish:(unsigned long)finish;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(void)makeRecommendCell:(id)cell row:(unsigned)row;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)showBindView;
-(void)recommendFacebookChanged:(id)changed;
-(void)recommendPhoneChanged:(id)changed;
-(void)recommendQQChanged:(id)changed;
-(void)doSetPluginConfig:(unsigned long)config on:(BOOL)on bitset:(unsigned long)bitset;
-(void)initFooterView;
-(id)getPluginIntro;
-(void)initHeaderView;
-(void)initTableView;
-(void)reloadData;
-(void)dealloc;
@end

@interface LBSContactInfoAssist : PluginContactInfoAssist <MessageObserverDelegate, UIAlertViewDelegate> {
}
-(void)dealloc;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)uninstallPlugin;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)clearLBSData;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface MassSendContactInfoAssist : PluginContactInfoAssist {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface CMediaNoteContactInfoAssist : PluginContactInfoAssist <UIAlertViewDelegate> {
}
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onSwitchViewOn;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface CPushMailContactInfoAssist : PluginContactInfoAssist <MessageObserverDelegate, UIAlertViewDelegate> {
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapPushMailCellToCellType;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)dealloc;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)handleSwitchPushMailOk;
-(id)getPushMailErrorTitle;
-(void)showInputPwdAlert:(BOOL)alert;
-(void)onSendPushMailPwd:(id)pwd;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)willPresentAlertView:(id)view;
-(void)doSwitchPushMailByAlertView:(id)view;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(void)makePushMailWriteMailCell:(id)cell;
-(void)makePushMailFolderConfigCell:(id)cell;
-(void)makePushMailViewMailCell:(id)cell;
-(id)getLoadingText;
-(id)getPluginIntro;
-(void)initHeaderView;
-(void)installPlugin;
-(void)onSwitchViewOff;
-(void)onSwitchViewOn;
-(void)showClosePushMailAlert;
-(void)doSwitchPushMail:(id)mail;
-(void)reloadPushMailTableView;
-(void)resetPushmailCellType;
-(BOOL)isShowOpenPushMailBtn;
@end

@interface CQQContactInfoAssist : PluginContactInfoAssist {
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > m_mapCellToCellType;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(void)setQQOfflineMsgOpen:(BOOL)open configType:(unsigned long)type status:(unsigned long)status;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeShowInContactCell:(id)contactCell row:(unsigned long)row;
-(void)makeSendQQMsgCell:(id)cell;
-(void)makeReadMsgCell:(id)cell;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)installPlugin;
-(void)updateInstallStateAndReloadTableView;
-(void)initData;
-(void)reloadQQOfflineMap;
@end

@interface QQFriendContactInfoAssist : PluginContactInfoAssist <UIAlertViewDelegate> {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface ReaderAppContactInfoAssist : PluginContactInfoAssist <UIAlertViewDelegate> {
}
-(void)installPlugin;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface ShakeContactInfoAssist : PluginContactInfoAssist <ShakeMgrExt> {
}
-(void)onShakeStatusChanged;
-(void)uninstallPlugin;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
-(void)dealloc;
@end

@interface CSXContactInfoAssist : PluginContactInfoAssist {
}
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(void)pushPrivateMsgSwitchChanged:(id)changed;
-(void)makeCellInfoInternal:(id)internal col:(id)col value:(id)value valueGray:(BOOL)gray;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)getPluginIntro;
-(void)initHeaderView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)installPlugin;
@end

@interface SyncPhoneContactsAssist : PluginContactInfoAssist {
}
-(void)reloadTableView;
-(void)dealloc;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
-(void)onSwitchChange:(id)change;
-(void)onEnter;
@end

@interface WCOfflinePayCertStruct : NSObject {
	NSString* m_nsBindNumber;
	NSString* m_nsOpenID;
	NSString* m_nsCertNumber;
	NSString* m_nsCertKey;
}
@property(retain, nonatomic) NSString* m_nsCertKey;
@property(retain, nonatomic) NSString* m_nsCertNumber;
@property(retain, nonatomic) NSString* m_nsOpenID;
@property(retain, nonatomic) NSString* m_nsBindNumber;
-(void)dealloc;
@end

@interface VoiceInputContactInfoAssist : PluginContactInfoAssist {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface VoiceVoipContactInfoAssist : PluginContactInfoAssist <UIAlertViewDelegate> {
	BOOL _OpenVoipRingToneOldValue;
}
-(void)dealloc;
-(void)onSwitchViewOff;
-(void)onSwitchViewOn;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getLoadingText;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface VoipContactInfoAssist : PluginContactInfoAssist <UIAlertViewDelegate> {
	BOOL _OpenVoipRingToneOldValue;
}
-(void)dealloc;
-(void)onSwitchViewOff;
-(void)onSwitchViewOn;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getLoadingText;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface WeixinContactInfoAssist : CBaseContactInfoAssist <MMIconActionSheetDelegate> {
	BOOL m_bFirstBecomeFriend;
}
-(id)init;
-(void)dealloc;
-(void)contactVerifyOk:(id)ok opCode:(unsigned long)code;
-(void)handleAddedContact;
-(void)onVerifyContactOk;
-(void)onRelpyContact:(id)contact;
-(void)onVerifyContact:(id)contact opcode:(unsigned long)opcode;
-(void)onStartChat:(id)chat;
-(void)onNewMessage:(id)message;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet didSelectWithItem:(id)item;
-(void)onAction;
-(void)AddNewActionSheetCell2Array:(id)array WithText:(id)text WithImage:(id)image;
-(void)opDelete;
-(void)opExpose;
-(void)opBlackList;
-(void)doAddToBlackList;
-(void)addToBlackList;
-(void)removeFromBlackList;
-(void)showRightButton;
-(void)initFooterView;
-(void)initBlackListTipsLabel;
-(void)initFooterBtnArea;
-(void)initBlackAndExposeContactBtn;
-(void)initExposeBtn;
-(void)initAddContactBtn;
-(void)initVerifyBtn;
-(void)initSayHelloBtn;
-(void)initSendMsgBtn;
-(void)initHeaderView;
-(void)initHelloWord;
-(void)reloadTableView;
-(void)updateSaveRemarkNameBtn;
-(void)updateFooterView;
-(void)updateRemarkLabel;
-(id)getInfoDisplayName;
-(BOOL)isShowExposeButton;
-(BOOL)isShowBlackAction;
-(BOOL)isNeedShowRightBtn;
@end

@interface CContactVerifyLogic : MMObject <MessageObserverDelegate, UITextFieldDelegate, UIAlertViewDelegate> {
	NSArray* m_arrVerifyContactWrap;
	UIView* m_parentView;
	NSString* m_nsVerifyValue;
	MMLoadingView* m_loadingView;
	unsigned long m_uiOpCode;
	BOOL m_bFromChatRoom;
	BOOL m_bNotShowAlert;
	BOOL m_bNeedSaveToLocalDB;
	UIAlertView* m_alert;
	unsigned long m_uiFriendScene;
	MMDelegateProxy<contactVerifyLogicDelegate>* m_delegate;
}
@property(assign, nonatomic) BOOL m_bNotShowAlert;
@property(assign, nonatomic) MMDelegateProxy<contactVerifyLogicDelegate>* m_delegate;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)handleVerifyOk:(id)ok;
-(id)getErrorTitle;
-(void)startWithVerifyContactWrap:(id)verifyContactWrap opCode:(unsigned long)code parentView:(id)view fromChatRoom:(BOOL)chatRoom;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showVerifyAlert;
-(void)addTextField:(id)field;
-(float)getTextFieldTopMargin;
-(id)getAlertMessage;
-(id)getAlertTitle;
-(void)onSendContactVerify:(id)verify;
-(void)doVerifyByAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)dealloc;
-(BOOL)doVerify:(id)verify;
-(void)SaveToLocalDB;
-(BOOL)needSetSayHelloStatus;
-(BOOL)needSaveToLocalDB;
-(id)filterString:(id)string;
-(void)stopLoadingAndShowOK;
-(void)stopLoading;
-(void)startLoading;
-(id)getLoadingOkText;
-(id)getLoadingText;
-(void)reset;
-(id)init;
@end

@interface EmoticonDesc : NSObject <PBCoding> {
	NSString* m_md5;
	NSMutableArray* m_LangList;
}
@property(retain, nonatomic) NSMutableArray* m_LangList;
@property(retain, nonatomic) NSString* m_md5;
+(void)initialize;
+(void)_initPBTableOfEmoticonDesc;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface MMSayHelloViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UITextFieldDelegate, MessageObserverDelegate, UIAlertViewDelegate> {
	UITextField* m_sayHelloTextView;
	NSString* m_helloContent;
	CContact* m_helloReceiver;
	unsigned long m_eventID;
	MMDelegateProxy<MMSayHelloViewControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MMSayHelloViewControllerDelegate>* delegate;
@property(retain, nonatomic) CContact* helloReceiver;
@property(retain, nonatomic) NSString* helloContent;
@property(retain, nonatomic) UITextField* sayHelloTextView;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)handleVerifyOk;
-(void)quitSayHello;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)textFieldShouldReturn:(id)textField;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)onCancelSendSayHello;
-(void)onSendSayHello:(id)hello;
-(id)filterString:(id)string;
-(BOOL)doSayHello:(id)hello;
-(void)dealloc;
-(void)unregEventObserver;
-(id)init;
@end

@interface AppTextMessageNodeView : TextMessageNodeView {
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)patternText;
-(id)titleText;
@end

@interface AppImageMessageNodeView : ImageMessageNodeView {
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onForward:(id)forward;
-(id)thumbImage;
-(void)showImage;
@end

@interface AppEmoticonMessageNodeView : BaseMessageNodeView <IAPPEmoticonDownloadExt> {
	MMEmoticonView* m_oImageView;
	UIButton* m_oDownloadButton;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onAppEmoticonDownloadFinished:(id)finished;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onMoreOperate:(id)operate;
-(void)onForward:(id)forward;
-(void)onClick;
-(void)showOperations;
-(void)SaveEmoticon:(id)emoticon;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)updateEmoticonView;
-(void)dealloc;
-(id)initWithMessageWrap:(id)messageWrap Contact:(id)contact ChatContact:(id)contact3;
@end

@interface AppFileMessageNodeView : BaseMessageNodeView <UIAlertViewDelegate> {
	UIImageView* m_oBkgImageView;
	UILabel* m_detailLabel;
	MMProgressView* m_progressView;
	UIView* m_progressBkgView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClearResource;
-(void)onDisappear;
-(void)onClick;
-(void)onMoreOperate:(id)operate;
-(void)onForward:(id)forward;
-(void)onFavoriteAdd:(id)add;
-(void)showOpearation;
-(void)updateBkgImage:(BOOL)image;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)resend;
-(void)updateThumbImage;
-(void)updateStatus:(id)status;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)layoutSubviewsInternal;
-(id)getTitleText;
-(id)getFileDetailText;
-(void)genProgressViewWithFrame:(CGRect)frame andBackgroundFrame:(CGRect)frame2;
-(void)initDetailLabel;
-(id)getTitleLabel;
-(id)getDefaultThumbImage;
-(id)genCenterImage:(id)image;
-(id)getBackgroundImageHL;
-(id)getBackgroundImage;
-(void)dealloc;
-(id)initWithMessageWrap:(id)messageWrap Contact:(id)contact ChatContact:(id)contact3;
@end

@interface AppUrlMessageNodeView : BaseMessageNodeView <UIAlertViewDelegate> {
	UIImageView* m_oBkgImageView;
	UILabel* m_detailLabel;
	MMProgressView* m_progressView;
	UIView* m_progressBkgView;
	NSArray* m_arrBtnList;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClearResource;
-(void)onDisappear;
-(void)onClick;
-(void)onMoreOperate:(id)operate;
-(void)onForward:(id)forward;
-(void)onFavoriteAdd:(id)add;
-(void)showOpearation;
-(void)updateBkgImage:(BOOL)image;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)resend;
-(void)updateThumbImage;
-(void)updateStatus:(id)status;
-(CGSize)sizeForFrame:(CGRect)frame;
-(int)numberOfBtnInNodeViewForShow;
-(void)clickNodeViewBtn:(id)btn;
-(void)layoutSubviewsInternal;
-(id)getTitleText;
-(id)getFileDetailText;
-(void)genProgressViewWithFrame:(CGRect)frame andBackgroundFrame:(CGRect)frame2;
-(void)initDetailLabel;
-(id)getTitleLabel;
-(id)getDefaultThumbImage;
-(id)genCenterImage:(id)image;
-(id)getBackgroundImageHL;
-(id)getBackgroundImage;
-(void)dealloc;
@end

@interface DonateMgr : MMService <MMService, PBMessageObserverDelegate> {
}
+(id)ParseChatRoomFromDontateExtInfo:(id)dontateExtInfo;
+(id)GetChatRoomDonateExtInfo:(id)info;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(int)GetDonateStatus;
-(id)LoadChatRoomDonateHistoryFromCache:(id)cache;
-(BOOL)saveChatRoomDonateHistory:(id)history forChatRoom:(id)chatRoom;
-(id)LoadPersonalDonateHistoryFromCache;
-(BOOL)savePersonalDonateHistory:(id)history;
-(id)pathForChatRoomDonateHistory:(id)chatRoomDonateHistory;
-(id)pathForPersonalDonateHistory;
-(void)onGetChatRoomDonateUrl:(id)url;
-(BOOL)GetChatRoomDonateUrl:(id)url forScene:(unsigned long)scene withCard:(id)card;
-(void)onGetMyDonateChatRoomHistory:(id)history;
-(BOOL)GetMyDonateHistory;
-(void)onGetChatRoomDonateHistory:(id)history;
-(BOOL)GetChatRoomDonateHistory:(id)history;
-(void)onVerifyDonate:(id)donate;
-(BOOL)VerifyDonate:(id)donate ExtInfo:(id)info;
-(id)decodeDonateInfo:(id)info;
-(void)onGetDonateInfo:(id)info;
-(BOOL)GetDonateInfo:(unsigned long)info forScene:(int)scene extInfo:(id)info3;
-(BOOL)GetDonateInfo:(unsigned long)info forScene:(int)scene;
-(BOOL)GetChatRoomDonateInfo:(id)info forScene:(unsigned long)scene;
-(unsigned long)createProtoBufEvent:(id)event forCgi:(unsigned long)cgi andUserData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface AppShakeMessageNodeView : BaseMessageNodeView <ILinkEventExt, UIAlertViewDelegate> {
	UIImageView* m_oBkgImageView;
	UILabel* m_detailLabel;
	MMProgressView* m_progressView;
	UIView* m_progressBkgView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClearResource;
-(void)onDisappear;
-(void)onClick;
-(void)onForward:(id)forward;
-(void)showOpearation;
-(void)updateBkgImage:(BOOL)image;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)resend;
-(void)updateStatus:(id)status;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)layoutSubviewsInternal;
-(id)getTitleText;
-(id)getFileDetailText;
-(void)genProgressViewWithFrame:(CGRect)frame andBackgroundFrame:(CGRect)frame2;
-(id)getBackgroundImageHL;
-(id)getBackgroundImage;
-(void)dealloc;
@end

@interface VoiceInputView : UIView <IVoiceInputExt> {
	unsigned long mVoiceId;
	id<NSObject> keyboard_targetor;
	SEL keyboard_selector;
	id<NSObject> send_targetor;
	SEL send_selector;
	int voiceInputStatus;
	id<VoiceInputViewDelegate> delegate;
	VoiceRecogView* mRecogView;
	UIButton* mKeyboardBtn;
	UIButton* mSendBtn;
}
@property(retain, nonatomic) UIButton* mKeyboardBtn;
@property(retain, nonatomic) UIButton* mSendBtn;
@property(retain, nonatomic) VoiceRecogView* mRecogView;
@property(assign, nonatomic) id<VoiceInputViewDelegate> delegate;
-(void)stopVoiceInput;
-(void)resetView;
-(void)addSendTarget:(id)target action:(SEL)action;
-(void)addKeyboardTarget:(id)target action:(SEL)action;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)OnSendBtnClicked:(id)clicked;
-(void)OnClearBtnClicked:(id)clicked;
-(void)stopRecord;
-(void)startRecord;
-(void)changeBkgView;
-(void)updateButtonStatus;
-(void)OnError:(int)error andInputId:(unsigned long)anId;
-(void)OnGetText:(id)text andInputId:(unsigned long)anId;
-(void)OnLevelMeter:(unsigned long)meter Peak:(float)peak;
-(void)OnEndRecord;
-(void)OnStartRecord;
@end

@interface BakChatDownloadViewController : MMUIViewController <UIAlertViewDelegate, IBakChatRecoverMgrExt> {
	UIImageView* m_downloadIcon;
	MMProgressView* m_progressView;
	UILabel* m_successLabel;
	UITextView* m_successRemarkLabel;
	UILabel* m_progressLabel;
	UIButton* m_restartButton;
	UIButton* m_cancelButton;
	UIActivityIndicatorView* m_activityIndicatorView;
	long long allSize;
	long long downloadSize;
	BakChatItem* m_bakChatItem;
	NSString* m_oPassword;
	unsigned m_bakChatDownloadStatus;
	BOOL isNeedReturnAlert;
	BOOL m_immediateStarted;
	BOOL m_bRecovering;
	unsigned downloadInterval;
	NSDate* startDate;
	unsigned Time;
	unsigned DownloadTime;
	NSLock* m_progressLock;
}
-(void)OnDecryptError;
-(void)OnPause;
-(void)OnRecoverProgress:(unsigned)progress WithTotalCount:(unsigned)totalCount;
-(void)OnSuccess;
-(void)OnDownloaded;
-(void)OnError:(unsigned)error;
-(void)OnDownloadProgress:(unsigned)progress WithTotalSize:(unsigned)totalSize;
-(void)setRecoverProgressLable:(float)lable;
-(void)setDownloadProgressLabel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)SucessReturnButtonDown:(id)down;
-(void)ReturnButtonDown:(id)down;
-(void)BackDownloadButtonDown:(id)down;
-(void)cancelButtonDone:(id)done;
-(void)recoverButtonDone:(id)done;
-(void)retryButtonDone:(id)done;
-(void)pauseButtonDone:(id)done;
-(void)viewDidLoad;
-(void)dealloc;
-(void)loadView;
-(id)initWithBakChatItem:(id)bakChatItem Password:(id)password WithImmediateContinueStarted:(BOOL)immediateContinueStarted;
-(id)initWithImmediateContinueStarted:(BOOL)immediateContinueStarted;
-(void)inNoListInServer;
-(void)inSuccessStatus;
-(void)inNotKnownErrorStatus;
-(void)inRecoverErrorStatus;
-(void)inRecoverStatus;
-(void)inPauseStatus;
-(void)inDownloadErrorStatus;
-(void)inDownloadStatus;
-(void)SafeSetProgress:(float)progress;
@end

@interface BakChatListViewController : MMUIViewController <UIAlertViewDelegate, IBakChatRecoverMgrExt> {
	UIButton* button;
	UILabel* loadLabel;
	UIActivityIndicatorView* activityIndicatorView;
	UILabel* timeLabel;
	UILabel* deviceLabel;
	UILabel* sizeLabel;
	UIImageView* acrossImageView;
	UILabel* noListLabel;
	NSString* m_oPassword;
	unsigned m_bakChatSelectListStatus;
	BakChatItem* m_bakChatItem;
}
-(void)addTextFieldToAlert:(id)alert;
-(id)ConversionUnit:(long long)unit;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnGetChatList:(id)list;
-(void)OnButtonDoneCancel:(id)cancel;
-(void)OnButtonDone:(id)done;
-(void)OnSelectListButtonDone:(id)done;
-(void)setListConf;
-(void)viewDidLoad;
-(void)showPasswordErrorAlertView;
-(void)showInputPasswordAlertView;
-(void)showEnsureDownloadAlert;
-(void)inHasListStatus;
-(void)inNoListStatus;
-(void)inLoadingStatus;
-(void)dealloc;
-(id)init;
@end

@interface BakChatViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate> {
	MMTableView* tableView;
}
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnGetBakChatList:(id)list;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)onShowUserIntruction:(id)intruction;
-(void)viewDidLoad;
-(void)initView;
-(void)dealloc;
-(id)init;
@end

@interface MFBakChatView : MMUIButton <IBakChatRecoverMgrExt, IBakChatUploadMgrExt, UIAlertViewDelegate> {
	UIImageView* m_titleImageView;
	UILabel* m_label;
	BOOL m_bShowNotify;
	BOOL m_bRestartRecover;
}
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnRestart;
-(void)OnDecryptError;
-(void)OnPause;
-(void)OnError:(unsigned)error;
-(void)OnDownloaded;
-(void)OnDownloadProgress:(unsigned)progress WithTotalSize:(unsigned)totalSize;
-(void)OnBakChatUploadMessage:(id)message;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMRegionPickerViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	NSMutableDictionary* m_dataDict;
	NSMutableArray* m_dataAry;
	MMRegionCodeMgr* m_regionCodeMgr;
	BOOL _isTopLevel;
	UIViewController* topController;
	MMDelegateProxy<MMRegionPickerViewControllerDelegate>* _delegate;
}
@property(assign, nonatomic) UIViewController* topController;
@property(assign, nonatomic) MMDelegateProxy<MMRegionPickerViewControllerDelegate>* delegate;
@property(assign, nonatomic) BOOL isTopLevel;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)scrollToRegion:(id)region;
-(void)OnReturn;
-(void)OnDataChange;
-(void)viewWillAppear:(BOOL)view;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initData;
-(id)initWithArray:(id)array;
@end

@interface CBaseEvent : NSObject <NotifyFromPrtlDelegate, IAsyncTask> {
	BOOL m_bStart;
	unsigned long m_uiEventType;
	unsigned long m_uiError;
	unsigned long m_uiUin;
	unsigned long m_uiEventID;
	id<NotifyFromEventDelegate> m_delNotifyFromEvent;
	id<NotifyFromMainCtrlDelegate> m_delNotifyToEventOwner;
	CMMDB* m_oMMDB;
	NSString* m_nsDocPath;
	NSRecursiveLock* m_oLock;
	BOOL m_bStop;
	BOOL m_bEventFinish;
	BOOL m_bBackGround;
	BOOL m_bNeedNotify;
	BOOL m_bSyncRun;
	BOOL m_bUseOperationQueue;
	BOOL m_bShortRetry;
	NSThread* m_oCurThread;
}
@property(assign, nonatomic) BOOL m_bEventFinish;
@property(assign, nonatomic) BOOL m_bStop;
@property(assign) NSThread* m_oCurThread;
@property(retain, nonatomic) id<NotifyFromMainCtrlDelegate> m_delNotifyToEventOwner;
@property(assign, nonatomic) BOOL m_bShortRetry;
@property(assign, nonatomic) BOOL m_bUseOperationQueue;
@property(assign, nonatomic) BOOL m_bSyncRun;
@property(assign, nonatomic) BOOL m_bNeedNotify;
@property(assign, nonatomic) BOOL m_bBackGround;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(assign, nonatomic) unsigned long m_uiEventID;
@property(assign, nonatomic) unsigned long m_uiUin;
@property(retain, nonatomic) NSString* m_nsDocPath;
@property(retain, nonatomic) CMMDB* m_oMMDB;
@property(assign, nonatomic) id<NotifyFromEventDelegate> m_delNotifyFromEvent;
@property(assign, nonatomic, getter=GetLastError) unsigned long m_uiError;
@property(assign, nonatomic, getter=GetEventType) unsigned long m_uiEventType;
-(void)stopTask;
-(void)taskDidStoped;
-(void)asyncTaskDidStarted;
-(unsigned long)GetNetworkReachabilitySeed;
-(BOOL)IsLogIn;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)AddOplog:(id)oplog;
-(void)AddReportOplog:(id)oplog;
-(BOOL)InsertUnhandleOplog:(unsigned long)oplog Oplog:(id)oplog2 Type:(unsigned long)type;
-(BOOL)InsertOplog:(unsigned long)oplog Oplog:(id)oplog2;
-(void)AddOperationQueueEvent:(id)event;
-(void)emptyThreadTimer:(id)timer;
-(BOOL)IsStart;
-(void)ForceStop;
-(void)SetStart:(BOOL)start;
-(BOOL)SetEventInfo:(id)info;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CMultiEvent : CBaseEvent <NotifyFromEventDelegate> {
	NSMutableArray* m_arrEvent;
	NSTimer* m_oTimerCheckEvent;
	NSMutableDictionary* m_dicThreadEvent;
	NSOperationQueue* m_operationQueuEvent;
	NSRecursiveLock* m_oEventLock;
}
-(id)GetLock;
-(id)FindEvent:(unsigned long)event;
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(BOOL)IsEventRunning:(unsigned long)running;
-(unsigned long)IsEventTypeExist:(unsigned long)exist;
-(void)StopEvent:(unsigned long)event;
-(BOOL)SetEvent:(id)event EventInfo:(id)info Start:(BOOL)start Ret:(unsigned*)ret RetInfo:(id)info5;
-(BOOL)StartEvent:(id)event Ret:(unsigned*)ret RetInfo:(id)info;
-(void)ClearStopEvent;
-(void)TimerCheckEvent;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface ProtobufEvent : CBaseEvent {
	ProtobufPrtlChannel* m_ptrl;
	ProtobufCGIWrap* m_pbCGIWrap;
	ProtobufEventHandler* m_pbEventHandler;
	BOOL m_bSpeedy;
	BOOL m_hasInvokePreHandler;
	int m_cmdstatus;
}
@property(assign, nonatomic) BOOL m_bSpeedy;
@property(readonly, assign) ProtobufCGIWrap* m_pbCGIWrap;
-(void)OnCmdRecv;
-(int)UnPack:(const AutoBuffer*)pack SvrID:(AutoBuffer*)anId;
-(BOOL)Pack:(AutoBuffer*)pack;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)Start;
-(void)dealloc;
-(id)initWithCGIWrap:(id)cgiwrap;
@end

@interface CdnChannel : NSObject {
	ProtobufCGIWrap* m_wrapInfo;
	id<NotifyFromPrtlDelegate> m_delNotifyFromPrtl;
	NSTimer* m_tmCheck;
	NSDate* m_tLastRecvData;
	unsigned long m_uiRetryCount;
	unsigned long m_uiMaxRetryCount;
	NSMutableData* m_dtResponseData;
	unsigned long m_uiChannelStatus;
	unsigned long m_uiRetStatusCode;
	unsigned long long m_ui64StartTime;
	unsigned long long m_ui64ConnectStartTime;
	unsigned long long m_ui64SendStartTime;
	unsigned long long m_ui64WaitResponseStartTime;
	unsigned long long m_ui64ReceiveStartTime;
	unsigned long m_uiContentLen;
	AsyncSocket* m_oSocket;
	NSURL* m_urlCurLink;
	unsigned long m_uiRedirectCount;
	NSString* m_nsIP;
}
@property(retain, nonatomic) NSString* m_nsIP;
@property(retain, nonatomic) NSURL* m_urlCurLink;
@property(retain, nonatomic) NSMutableData* m_dtResponseData;
@property(assign, nonatomic) unsigned long m_uiMaxRetryCount;
@property(retain, nonatomic) NSDate* m_tLastRecvData;
@property(retain, nonatomic) NSTimer* m_tmCheck;
@property(assign, nonatomic) id<NotifyFromPrtlDelegate> m_delNotifyFromPrtl;
@property(retain, nonatomic) ProtobufCGIWrap* m_wrapInfo;
-(void)onReceiveDataLength:(id)length;
-(void)onSocket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)onSocket:(id)socket didReadPartialDataOfLength:(unsigned)length tag:(long)tag;
-(void)onSocket:(id)socket didWriteDataWithTag:(long)tag;
-(void)onSocket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)onSocketDidDisconnect:(id)onSocket;
-(void)onSocket:(id)socket willDisconnectWithError:(id)error;
-(void)HandleHttpResp:(id)resp;
-(void)GetClientIP:(id)ip;
-(BOOL)IsNoCache:(id)cache;
-(unsigned long)GetContentLen:(id)len;
-(id)GetRedirectUrl:(id)url;
-(unsigned long)GetRetCode:(id)code;
-(id)PackHttpHeader;
-(void)TryReportFailIP;
-(void)CheckTimeOut;
-(void)Connect;
-(void)ConnectToHost:(id)host;
-(void)ResetChannel;
-(void)ClearSocket;
-(void)Stop;
-(BOOL)Start;
-(void)InitPrtl:(id)prtl;
-(void)dealloc;
-(id)init;
@end

@interface ProtobufPrtlChannel : NSObject {
	ProtobufCGIWrap* m_pbCGIWrap;
	NSObject* m_ptrl;
}
-(void)dealloc;
-(void)Stop;
-(BOOL)Start;
-(void)InitPrtl:(unsigned long)prtl Delegate:(id)delegate DB:(id)db Lock:(id)lock Scene:(unsigned long)scene;
-(id)initWithCGIWrap:(id)cgiwrap;
-(void)initProtocolChannel;
@end

@interface UrlInfo : NSObject <NSCopying> {
	NSString* m_nsRequestUrl;
	NSData* m_dtResponseData;
	NSString* m_nsRefer;
	BOOL m_bGetMethod;
	NSData* m_dtBodyData;
	NSDictionary* m_dicReq;
	NSDictionary* m_dicResp;
	BOOL m_bCdn;
	unsigned long m_uiRecvTime;
	unsigned long m_uiRetCode;
	unsigned long m_uiDataSize;
	unsigned long m_uiDnsCostTime;
	unsigned long m_uiConnectCostTime;
	unsigned long m_uiSendCostTime;
	unsigned long m_uiWaitResponseCostTime;
	unsigned long m_uiReceiveCostTime;
	NSString* m_nsClientIP;
	NSString* m_nsServerIP;
}
@property(retain, nonatomic) NSString* m_nsServerIP;
@property(retain, nonatomic) NSString* m_nsClientIP;
@property(assign, nonatomic) unsigned long m_uiReceiveCostTime;
@property(assign, nonatomic) unsigned long m_uiWaitResponseCostTime;
@property(assign, nonatomic) unsigned long m_uiSendCostTime;
@property(assign, nonatomic) unsigned long m_uiConnectCostTime;
@property(assign, nonatomic) unsigned long m_uiDnsCostTime;
@property(assign, nonatomic) unsigned long m_uiDataSize;
@property(assign, nonatomic) unsigned long m_uiRetCode;
@property(assign, nonatomic) unsigned long m_uiRecvTime;
@property(assign, nonatomic) BOOL m_bCdn;
@property(retain, nonatomic) NSDictionary* m_dicResp;
@property(retain, nonatomic) NSDictionary* m_dicReq;
@property(retain, nonatomic) NSData* m_dtBodyData;
@property(assign, nonatomic) BOOL m_bGetMethod;
@property(retain, nonatomic) NSString* m_nsRefer;
@property(retain, nonatomic) NSData* m_dtResponseData;
@property(retain, nonatomic) NSString* m_nsRequestUrl;
-(id)GenStatString;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface ProtobufCGIWrap : NSObject <NSCopying> {
	PBGeneratedMessage* m_pbRequest;
	Class m_pbRespClass;
	PBGeneratedMessage* m_pbResponse;
	unsigned long m_uiChannelType;
	unsigned long m_uiCgi;
	NSString* m_nsCgiName;
	unsigned long m_uiRequestEncryptType;
	NSData* m_dtResponseDecryptKey;
	unsigned long m_uiMessage;
	Class m_preEventHandlerClass;
	Class m_postEventHandlerClass;
	NSObject* m_oUserData;
	UrlInfo* m_oUrlInfo;
	BOOL m_bNotifyPartLen;
	unsigned long m_uiRetryCount;
	double m_douTimeout;
}
@property(assign, nonatomic) double m_douTimeout;
@property(assign, nonatomic) unsigned long m_uiRetryCount;
@property(assign, nonatomic) BOOL m_bNotifyPartLen;
@property(retain, nonatomic) UrlInfo* m_oUrlInfo;
@property(retain, nonatomic) NSObject* m_oUserData;
@property(assign, nonatomic) Class m_postEventHandlerClass;
@property(assign, nonatomic) Class m_preEventHandlerClass;
@property(assign, nonatomic) unsigned long m_uiMessage;
@property(retain, nonatomic) NSData* m_dtResponseDecryptKey;
@property(assign, nonatomic) unsigned long m_uiRequestEncryptType;
@property(retain, nonatomic) NSString* m_nsCgiName;
@property(assign, nonatomic) unsigned long m_uiCgi;
@property(assign, nonatomic) unsigned long m_uiChannelType;
@property(retain, nonatomic) PBGeneratedMessage* m_pbResponse;
@property(assign, nonatomic) Class m_pbRespClass;
@property(retain, nonatomic) PBGeneratedMessage* m_pbRequest;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface MMMusicLyricsMgr : MMService <MMService, PBMessageObserverDelegate> {
	NSMutableArray* m_arrMusicItems;
	NSString* m_nsLyricsRootPath;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)handleGetLyricsResp:(id)resp Event:(unsigned long)event;
-(BOOL)GetLyricsFromSvr:(id)svr;
-(unsigned long)indexOfMusicByWeUrl:(id)musicByWeUrl;
-(BOOL)saveLyricsToFile:(id)file FilePath:(id)path;
-(id)getLyricsFromFile:(id)file;
-(id)getLyricFileName:(id)name AndSinger:(id)singer;
-(void)ClearLyricsFile;
-(void)GetLyricsByMusicInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface UrlChannel : NSObject {
	ProtobufCGIWrap* m_wrapInfo;
	id<NotifyFromPrtlDelegate> m_delNotifyFromPrtl;
	NSURLConnection* m_ucChannel;
	NSTimer* m_tmCheck;
	NSDate* m_tLastRecvData;
	unsigned long m_uiRetryCount;
	unsigned long m_uiMaxRetryCount;
	NSMutableData* m_dtResponseData;
	unsigned long m_uiChannelStatus;
	unsigned long m_uiRetStatusCode;
	unsigned long m_uiRetContentLength;
	unsigned long long m_ui64StartTime;
	unsigned long long m_ui64ConnectStartTime;
	unsigned long long m_ui64SendStartTime;
	unsigned long long m_ui64ReceiveStartTime;
	NSString* m_nsIP;
}
@property(retain, nonatomic) NSString* m_nsIP;
@property(retain, nonatomic) NSMutableData* m_dtResponseData;
@property(assign, nonatomic) unsigned long m_uiMaxRetryCount;
@property(retain, nonatomic) NSDate* m_tLastRecvData;
@property(retain, nonatomic) NSTimer* m_tmCheck;
@property(retain, nonatomic) NSURLConnection* m_ucChannel;
@property(assign, nonatomic) id<NotifyFromPrtlDelegate> m_delNotifyFromPrtl;
@property(retain, nonatomic) ProtobufCGIWrap* m_wrapInfo;
-(void)onReceiveDataLength:(id)length;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)CheckTimeOut;
-(void)Connect;
-(void)ResetChannel;
-(void)TryReportFailIP;
-(void)Stop;
-(BOOL)Start;
-(void)InitPrtl:(id)prtl;
-(void)dealloc;
-(id)init;
@end

@interface CMessage : NSObject {
	unsigned long m_uiMessage;
	unsigned long m_uiEventID;
	NSDictionary* m_dicMessageInfo;
	ProtobufCGIWrap* m_pbCGIWrap;
	BOOL m_bNotify;
	id<NotifyFromMainCtrlDelegate> m_delNotifyToEventOwner;
}
@property(retain, nonatomic) id<NotifyFromMainCtrlDelegate> m_delNotifyToEventOwner;
@property(assign, nonatomic) BOOL m_bNotify;
@property(retain, nonatomic) ProtobufCGIWrap* m_pbCGIWrap;
@property(retain, nonatomic) NSDictionary* m_dicMessageInfo;
@property(assign, nonatomic) unsigned long m_uiEventID;
@property(assign, nonatomic) unsigned long m_uiMessage;
-(void)dealloc;
-(id)init;
@end

@interface CSyncOplogWrap : NSObject {
	unsigned long m_uiOplogID;
	unsigned long m_uiCmdID;
	NSMutableData* m_dtBuffer;
}
@property(retain, nonatomic) NSMutableData* m_dtBuffer;
@property(assign, nonatomic) unsigned long m_uiCmdID;
@property(assign, nonatomic) unsigned long m_uiOplogID;
-(void)dealloc;
-(id)init;
@end

@interface CNoDisturbInfo : NSObject <NSCoding> {
	BOOL m_bNightSetting;
	unsigned long m_uiNightBeginTime;
	unsigned long m_uiNightEndTime;
	BOOL m_bAllDaySetting;
	unsigned long m_uiAllDayBeginTime;
	unsigned long m_uiAllDayEndTime;
}
@property(assign, nonatomic) unsigned long m_uiAllDayEndTime;
@property(assign, nonatomic) unsigned long m_uiAllDayBeginTime;
@property(assign, nonatomic) BOOL m_bAllDaySetting;
@property(assign, nonatomic) unsigned long m_uiNightEndTime;
@property(assign, nonatomic) unsigned long m_uiNightBeginTime;
@property(assign, nonatomic) BOOL m_bNightSetting;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(void)preInit;
@end

@interface CUsrInfo : NSObject {
	NSString* m_nsUsrName;
	NSString* m_nsAliasName;
	NSString* m_nsNickName;
	unsigned long m_uiUin;
	NSString* m_nsEmail;
	NSString* m_nsMobile;
	unsigned long m_uiStatus;
	unsigned long m_uiSex;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
	unsigned long m_uiPersonalCardStatus;
	NSString* m_nsHDHeadImgMD5;
	CNoDisturbInfo* m_oNoDisturbInfo;
	NSString* m_nsBottleHDImgMD5;
	NSData* m_dtBottleImg;
	unsigned long m_uiPluginInstallStatus;
	unsigned long m_uiCertificationFlag;
	NSString* m_nsCertificationInfo;
	NSString* m_nsWeiboAddress;
	NSString* m_nsWeiboNickName;
	unsigned long m_uiWeiboFlag;
	unsigned long m_uiFacebookFlag;
	NSString* m_nsFacebookID;
	NSString* m_nsFacebookName;
	NSString* m_nsFacebookToken;
	unsigned long m_uiPluginSwitch;
	NSString* m_nsGMailAccount;
	unsigned long m_uiGMailStatus;
	unsigned long m_uiGMailSwitch;
	NSString* m_nsExternalInfo;
	NSString* m_nsBrandSubscriptConfigUrl;
	unsigned long m_uiBrandSubscriptionSettings;
	SubscriptBrandInfo* m_subBrandInfo;
}
@property(retain, nonatomic) SubscriptBrandInfo* m_subBrandInfo;
@property(assign, nonatomic) unsigned long m_uiBrandSubscriptionSettings;
@property(retain, nonatomic) NSString* m_nsBrandSubscriptConfigUrl;
@property(retain, nonatomic) NSString* m_nsExternalInfo;
@property(assign, nonatomic) unsigned long m_uiGMailSwitch;
@property(assign, nonatomic) unsigned long m_uiGMailStatus;
@property(retain, nonatomic) NSString* m_nsGMailAccount;
@property(assign, nonatomic) unsigned long m_uiPluginSwitch;
@property(retain, nonatomic) NSString* m_nsFacebookToken;
@property(retain, nonatomic) NSString* m_nsFacebookName;
@property(retain, nonatomic) NSString* m_nsFacebookID;
@property(assign, nonatomic) unsigned long m_uiFacebookFlag;
@property(assign, nonatomic) unsigned long m_uiWeiboFlag;
@property(retain, nonatomic) NSString* m_nsWeiboNickName;
@property(retain, nonatomic) NSString* m_nsWeiboAddress;
@property(retain, nonatomic) NSString* m_nsCertificationInfo;
@property(assign, nonatomic) unsigned long m_uiCertificationFlag;
@property(assign, nonatomic) unsigned long m_uiPluginInstallStatus;
@property(retain, nonatomic) NSData* m_dtBottleImg;
@property(retain, nonatomic) NSString* m_nsBottleHDImgMD5;
@property(retain, nonatomic) CNoDisturbInfo* m_oNoDisturbInfo;
@property(retain, nonatomic) NSString* m_nsHDHeadImgMD5;
@property(assign, nonatomic) unsigned long m_uiPersonalCardStatus;
@property(retain, nonatomic) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
@property(assign, nonatomic) unsigned long m_uiSex;
@property(assign, nonatomic) unsigned long m_uiStatus;
@property(retain, nonatomic) NSString* m_nsMobile;
@property(retain, nonatomic) NSString* m_nsEmail;
@property(assign, nonatomic) unsigned long m_uiUin;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsAliasName;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(id)description;
-(id)keyPaths;
-(BOOL)isHasPersonalCard;
-(void)dealloc;
-(id)init;
@end

@interface CUploadImgWrap : NSObject {
	NSString* m_nsFromUsr;
	NSString* m_nsToUsr;
	unsigned long m_uiLocalID;
	unsigned long m_uiSvrID;
	unsigned long m_uiTotalLen;
	unsigned long m_uiStartPos;
	unsigned long m_uiDataLen;
	NSData* m_dtBuffer;
	unsigned long m_uiCreateTime;
	unsigned long m_uiMessageType;
	unsigned long m_uiSendTime;
	BOOL m_bHDImg;
	BOOL m_bWifi;
	unsigned long m_uiSource;
}
@property(assign, nonatomic) unsigned long m_uiSource;
@property(assign, nonatomic) BOOL m_bWifi;
@property(assign, nonatomic) BOOL m_bHDImg;
@property(assign, nonatomic) unsigned long m_uiSendTime;
@property(assign, nonatomic) unsigned long m_uiMessageType;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(retain, nonatomic) NSData* m_dtBuffer;
@property(assign, nonatomic) unsigned long m_uiDataLen;
@property(assign, nonatomic) unsigned long m_uiStartPos;
@property(assign, nonatomic) unsigned long m_uiTotalLen;
@property(assign, nonatomic) unsigned long m_uiSvrID;
@property(assign, nonatomic) unsigned long m_uiLocalID;
@property(retain, nonatomic) NSString* m_nsToUsr;
@property(retain, nonatomic) NSString* m_nsFromUsr;
-(void)dealloc;
-(id)init;
@end

@interface CInviteFriendWrap : NSObject <NSCoding> {
	unsigned long m_uiInviteCount;
	unsigned long m_uiFriendType;
	unsigned long m_uiGroupId;
	unsigned long m_uiUin;
	NSString* m_nsNickName;
	NSString* m_nsNickFullPY;
	NSString* m_nsEmail;
	NSString* m_nsRemark;
	NSString* m_nsRemarkFullPY;
	NSString* m_nsUsrName;
}
@property(retain, nonatomic) NSString* m_nsUsrName;
@property(retain, nonatomic) NSString* m_nsRemarkFullPY;
@property(retain, nonatomic) NSString* m_nsRemark;
@property(retain, nonatomic) NSString* m_nsEmail;
@property(retain, nonatomic) NSString* m_nsNickFullPY;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(assign, nonatomic) unsigned long m_uiUin;
@property(assign, nonatomic) unsigned long m_uiGroupId;
@property(assign, nonatomic) unsigned long m_uiFriendType;
@property(assign, nonatomic) unsigned long m_uiInviteCount;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(int)compare:(id)compare;
@end

@interface CFriendGroupWrap : NSObject <NSCoding> {
	unsigned long m_uiGroupId;
	NSString* m_nsGroupName;
}
@property(retain, nonatomic) NSString* m_nsGroupName;
@property(assign, nonatomic) unsigned long m_uiGroupId;
-(void)dealloc;
-(id)init;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface CDomainEmailWrap : NSObject <NSCoding> {
	NSString* m_nsDomainEmail;
	unsigned long m_uiStatus;
}
@property(assign, nonatomic) unsigned long m_uiStatus;
@property(retain, nonatomic) NSString* m_nsDomainEmail;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface CUploadVoiceWrap : NSObject {
	NSString* m_nsFromUsrName;
	NSString* m_nsToUsrName;
	unsigned long m_uiSvrID;
	unsigned long m_uiLocalID;
	unsigned long m_uiOffset;
	unsigned long m_uiLen;
	unsigned long m_uiCreateTime;
	unsigned long m_uiVoiceLen;
	unsigned long m_uiVoiceTime;
	unsigned long m_uiVoiceFormat;
	unsigned long m_uiEndFlag;
	NSData* m_dtVoice;
	unsigned long m_uiRetryCount;
	unsigned long m_uiInsertQueueTime;
	unsigned long m_uiCancelFlag;
	unsigned long m_uiVoiceForwardFlag;
	unsigned long m_uiCgi;
	NSString* m_nsMsgThumbUrl;
	NSString* m_nsMsgSource;
}
@property(retain, nonatomic) NSString* m_nsMsgSource;
@property(assign, nonatomic) unsigned long m_uiCgi;
@property(assign, nonatomic) unsigned long m_uiVoiceForwardFlag;
@property(assign, nonatomic) unsigned long m_uiCancelFlag;
@property(assign, nonatomic) unsigned long m_uiInsertQueueTime;
@property(assign, nonatomic) unsigned long m_uiRetryCount;
@property(retain, nonatomic) NSData* m_dtVoice;
@property(assign, nonatomic) unsigned long m_uiEndFlag;
@property(assign, nonatomic) unsigned long m_uiVoiceFormat;
@property(assign, nonatomic) unsigned long m_uiVoiceTime;
@property(assign, nonatomic) unsigned long m_uiVoiceLen;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(assign, nonatomic) unsigned long m_uiLen;
@property(assign, nonatomic) unsigned long m_uiOffset;
@property(assign, nonatomic) unsigned long m_uiLocalID;
@property(assign, nonatomic) unsigned long m_uiSvrID;
@property(retain, nonatomic) NSString* m_nsToUsrName;
@property(retain, nonatomic) NSString* m_nsFromUsrName;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CDownloadVoiceWrap : NSObject {
	NSString* m_nsChatUsrName;
	unsigned long m_uiSvrID;
	unsigned long m_uiLocalID;
	unsigned long m_uiOffset;
	unsigned long m_uiLen;
	unsigned long m_uiCreateTime;
	unsigned long m_uiVoiceLen;
	unsigned long m_uiVoiceTime;
	unsigned long m_uiEndFlag;
	NSData* m_dtVoice;
	unsigned long m_uiRetryCount;
	unsigned long m_uiCancelFlag;
}
@property(assign, nonatomic) unsigned long m_uiCancelFlag;
@property(assign, nonatomic) unsigned long m_uiRetryCount;
@property(retain, nonatomic) NSData* m_dtVoice;
@property(assign, nonatomic) unsigned long m_uiEndFlag;
@property(assign, nonatomic) unsigned long m_uiVoiceTime;
@property(assign, nonatomic) unsigned long m_uiVoiceLen;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(assign, nonatomic) unsigned long m_uiLen;
@property(assign, nonatomic) unsigned long m_uiOffset;
@property(assign, nonatomic) unsigned long m_uiLocalID;
@property(assign, nonatomic) unsigned long m_uiSvrID;
@property(retain, nonatomic) NSString* m_nsChatUsrName;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CQQGroupWrap : NSObject <NSCoding, NSCopying> {
	unsigned long m_uiGroupId;
	NSString* m_nsGroupName;
	NSString* m_nsGroupMD5;
	unsigned long m_uiMemberNum;
	unsigned long m_uiWeixinNum;
	BOOL m_bNeedReloadFriend;
}
@property(assign, nonatomic) BOOL m_bNeedReloadFriend;
@property(assign, nonatomic) unsigned long m_uiWeixinNum;
@property(assign, nonatomic) unsigned long m_uiMemberNum;
@property(retain, nonatomic) NSString* m_nsGroupMD5;
@property(retain, nonatomic) NSString* m_nsGroupName;
@property(assign, nonatomic) unsigned long m_uiGroupId;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface CQQFiendWrap : NSObject <NSCoding> {
	unsigned long m_uiUin;
	NSString* m_nsQQNickName;
	NSString* m_nsQQRemark;
	unsigned long m_uiWXStatus;
	NSString* m_nsWXUsrName;
	NSString* m_nsWXAliasName;
	NSString* m_nsWXNickName;
	BOOL m_bIsInContact;
	NSString* m_nsQQNickNamePinYin;
	unsigned long m_uiSex;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
	NSString* m_nsWCBGImgObjectID;
	int m_iWCFlag;
	NSString* m_pcWCBGImgID;
	NSString* m_nsExternalInfo;
	NSString* m_nsBrandSubscriptConfigUrl;
	unsigned long m_uiBrandSubscriptionSettings;
	SubscriptBrandInfo* m_subBrandInfo;
	NSString* m_nsBrandIconUrl;
	NSString* m_nsHeadImgUrl;
	NSString* m_nsHeadHDImgUrl;
}
@property(retain, nonatomic) NSString* m_nsHeadHDImgUrl;
@property(retain, nonatomic) NSString* m_nsHeadImgUrl;
@property(retain, nonatomic) NSString* m_nsBrandIconUrl;
@property(retain, nonatomic) SubscriptBrandInfo* m_subBrandInfo;
@property(assign, nonatomic) unsigned long m_uiBrandSubscriptionSettings;
@property(retain, nonatomic) NSString* m_nsBrandSubscriptConfigUrl;
@property(retain, nonatomic) NSString* m_nsExternalInfo;
@property(retain, nonatomic) NSString* m_pcWCBGImgID;
@property(assign, nonatomic) int m_iWCFlag;
@property(retain, nonatomic) NSString* m_nsWCBGImgObjectID;
@property(retain, nonatomic) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
@property(assign, nonatomic) unsigned long m_uiSex;
@property(retain, nonatomic) NSString* m_nsQQNickNamePinYin;
@property(assign, nonatomic) BOOL m_bIsInContact;
@property(retain, nonatomic) NSString* m_nsWXNickName;
@property(retain, nonatomic) NSString* m_nsWXAliasName;
@property(retain, nonatomic) NSString* m_nsWXUsrName;
@property(assign, nonatomic) unsigned long m_uiWXStatus;
@property(retain, nonatomic) NSString* m_nsQQRemark;
@property(retain, nonatomic) NSString* m_nsQQNickName;
@property(assign, nonatomic) unsigned long m_uiUin;
-(id)GetDisplayName;
-(int)compareQQFriendAscending:(id)ascending;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface CModUserImgWrap : NSObject {
	unsigned long m_uiImgType;
	NSData* m_dtImg;
	NSString* m_nsHDImgMD5;
	NSString* m_nsHeadImgUrl;
	NSString* m_nsHeadHDImgUrl;
}
@property(retain, nonatomic) NSString* m_nsHeadHDImgUrl;
@property(retain, nonatomic) NSString* m_nsHeadImgUrl;
@property(assign, nonatomic) unsigned long m_uiImgType;
@property(retain, nonatomic) NSString* m_nsHDImgMD5;
@property(retain, nonatomic) NSData* m_dtImg;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface ImageInfo : NSObject <NSCopying> {
	unsigned long m_uiImageSource;
	NSURL* m_nuImageSourceURL;
}
@property(retain, nonatomic) NSURL* m_nuImageSourceURL;
@property(assign, nonatomic) unsigned long m_uiImageSource;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(id)init;
@end

@interface CMMDB : CBaseDB {
	unsigned long m_uiDelSendDBFailCount;
}
-(BOOL)tableIsExist:(id)exist;
-(BOOL)SetFriendMetaFlag:(unsigned long)flag ForUser:(id)user;
-(unsigned long)GetFriendMetaFlag:(id)flag;
-(BOOL)SetLastUpdateTime:(unsigned long)time ForUser:(id)user;
-(unsigned long)GetLastUpdateTimeOfUser:(id)user;
-(void)ResetSendTable;
-(void)ClearDelSendFailCount;
-(unsigned long)GetDelSendFailCount;
-(void)AddDelSendFailCount;
-(void)RegisterTypeOfCol;
-(BOOL)DropChatExt:(id)ext;
-(BOOL)DropChat:(id)chat;
-(unsigned long)GetConTypeCountFromFriendExt:(unsigned long)friendExt;
-(BOOL)DelRowInOfflinePay:(id)offlinePay;
-(BOOL)DelRowInPushContact:(id)pushContact;
-(BOOL)DelRowInSendImg:(id)sendImg LocalID:(unsigned long)anId;
-(void)DelAllRowInUnhandleOplog;
-(BOOL)DelRowInUnhandleOplog:(unsigned long)unhandleOplog New:(BOOL)aNew;
-(BOOL)DelRowInOplog:(unsigned long)oplog;
-(BOOL)DelRowInSend:(id)send LocalID:(unsigned long)anId;
-(BOOL)DelRowInHello:(id)hello SvrID:(unsigned long)anId;
-(BOOL)DelRowInHello:(id)hello LocalID:(unsigned long)anId;
-(BOOL)DelAllRowInHello:(id)hello HelloUser:(id)user;
-(BOOL)DelRowInChatExt:(id)chatExt LocalID:(unsigned long)anId;
-(BOOL)DelRowInChat:(id)chat SvrID:(unsigned long)anId;
-(BOOL)DelRowInChat:(id)chat LocalID:(unsigned long)anId;
-(BOOL)DelAllRowInChat:(id)chat;
-(BOOL)DelRowInFriendExt:(id)friendExt;
-(BOOL)DelRowInFriend:(id)aFriend;
-(BOOL)CheckHasColInFriend:(id)aFriend;
-(BOOL)GetColValueInOfflinePay:(id)offlinePay RetCol:(id)col;
-(unsigned long)GetCountOfOfflinePay;
-(BOOL)GetOneRowInSendImg:(id)sendImg RetCol:(id)col AfterRowID:(unsigned long)anId;
-(unsigned long)GetCountOfOplog;
-(unsigned long)GetCountOfSendMes;
-(unsigned long)GetCountOfUnhandleOplog:(BOOL)unhandleOplog;
-(BOOL)GetOneRowInTable:(id)table QryCol:(id)col RetCol:(id)col3 AfterRowID:(unsigned long)anId;
-(BOOL)GetOneRowInUnhandleOplog:(id)unhandleOplog RetCol:(id)col AfterRowID:(unsigned long)anId New:(BOOL)aNew;
-(BOOL)GetOneRowInOplog:(id)oplog RetCol:(id)col AfterRowID:(unsigned long)anId;
-(BOOL)GetOneRowInSend:(id)send RetCol:(id)col AfterRowID:(unsigned long)anId;
-(BOOL)GetColValueInSend:(id)send LocalID:(unsigned long)anId QryCol:(id)col RetCol:(id)col4;
-(unsigned long)GetMaxCreateTimeInHello:(id)hello;
-(unsigned long)GetMaxCreateTimeInChat:(id)chat;
-(unsigned long)GetMaxSvrIDInChat:(id)chat;
-(unsigned long)GetMesCountInChat:(id)chat MesType:(unsigned long)type;
-(unsigned long)GetAllMesCountInChat:(id)chat;
-(unsigned long)GetUnReadCountInHello:(id)hello;
-(unsigned long)GetCountInHello:(id)hello;
-(unsigned long)GetUnReadCountInChat:(id)chat;
-(unsigned long)GetLeftUnReadCountInChat:(id)chat FromID:(unsigned long)anId;
-(unsigned long)CheckHasLeft:(id)left FromID:(unsigned long)anId;
-(unsigned long)GetLeftCountInChat:(id)chat FromID:(unsigned long)anId;
-(BOOL)GetLastRowInChat:(id)chat QryCol:(id)col RetCol:(id)col3;
-(BOOL)GetUnReadInChat:(id)chat QryCol:(id)col RetCol:(id)col3 Limit:(unsigned long)limit FromID:(unsigned long)anId ToID:(unsigned long)anId6;
-(BOOL)GetUnReadInChat:(id)chat QryCol:(id)col RetCol:(id)col3 Limit:(unsigned long)limit;
-(BOOL)GetColValueInHello:(id)hello LocalID:(unsigned long)anId SvrID:(unsigned long)anId3 QryCol:(id)col RetCol:(id)col5;
-(id)GetOneRowInChatExt:(id)chatExt LocalID:(unsigned long)anId;
-(BOOL)GetColValueInChatExt:(id)chatExt LocalID:(unsigned long)anId QryCol:(id)col RetCol:(id)col4;
-(BOOL)GetColValueInChat:(id)chat LocalID:(unsigned long)anId SvrID:(unsigned long)anId3 QryCol:(id)col RetCol:(id)col5;
-(BOOL)GetAllRowInPushContact:(id)pushContact RetCol:(id)col;
-(BOOL)GetColValueInPushContact:(id)pushContact QryCol:(id)col RetCol:(id)col3;
-(BOOL)GetFriendInfoFromFriendAndExtTable_New:(id)friendAndExtTable_New dicCol:(id)col mmdbResult:(id)result listType:(unsigned long)type Limit:(unsigned long)limit;
-(BOOL)GetAllRowInFriendExtQryCol:(id)friendExtQryCol RetCol:(id)col;
-(BOOL)GetAllRowInFriend:(unsigned long)aFriend QryCol:(id)col RetCol:(id)col3;
-(BOOL)GetColValueInFriendExt:(id)friendExt domain:(id)domain QryCol:(id)col RetCol:(id)col4;
-(BOOL)GetColValueInFriendExt:(id)friendExt QryCol:(id)col RetCol:(id)col3;
-(BOOL)GetColValueInFriend:(id)aFriend QryCol:(id)col RetCol:(id)col3;
-(BOOL)SetAllColValueInPushContact:(id)pushContact;
-(BOOL)SetColValueInPushContact:(id)pushContact ColValue:(id)value;
-(BOOL)SetColValueInHello:(id)hello Con:(id)con ColValue:(id)value;
-(BOOL)SetColValueInChat:(id)chat LocalID:(unsigned long)anId ColValue:(id)value;
-(BOOL)SetColValueInFriendExt:(id)friendExt ColValue:(id)value;
-(BOOL)SetColValueInFriend:(id)aFriend ColValue:(id)value;
-(BOOL)InsertNewRowInOfflinePay:(id)offlinePay;
-(BOOL)InsertNewRowInPushContact:(id)pushContact;
-(BOOL)InsertNewRowInSendImg:(id)sendImg;
-(BOOL)InsertNewRowInUnhandleOplog:(id)unhandleOplog;
-(BOOL)InsertNewRowInOplog:(id)oplog;
-(BOOL)InsertNewRowInSend:(id)send;
-(unsigned long)InsertNewRowInHello:(id)hello ColValue:(id)value;
-(BOOL)InsertNewRowInChatExt:(id)chatExt ColValue:(id)value;
-(unsigned long)InsertNewRowInChat:(id)chat ColValue:(id)value;
-(BOOL)InsertNewRowInFriendExt:(id)friendExt;
-(BOOL)InsertNewRowInFriend:(id)aFriend;
-(BOOL)CreateOffLinePayTable;
-(BOOL)CreateUnhandleOplogTable;
-(BOOL)CreateOplogTable;
-(BOOL)CreateSendMesTable;
-(BOOL)CreateHelloTable:(id)table;
-(BOOL)CreateChatExtTable:(id)table;
-(BOOL)CreateChatTable:(id)table;
-(BOOL)CreateFriendExtTable;
-(BOOL)CreateMassSendContactTable;
-(BOOL)CreateFriendTable;
-(BOOL)CreateEmojiCatalogTable;
-(BOOL)CreateEmoticonDownloadTable;
-(BOOL)CreateEmoticonUploadTable;
-(BOOL)CreateEmojiTable;
-(BOOL)CreateEmoticonTable;
-(BOOL)CreateBottleContactTable;
-(BOOL)CreateBottleTable;
-(BOOL)CreateQQContactTable;
-(BOOL)CreateDownloadVoiceQueueTable;
-(BOOL)CreateUploadVoiceQueueTable;
-(BOOL)CreatePushContactTable;
-(BOOL)CreateFriendMetaInfoTable;
-(void)InitMMDB:(id)mmdb UsrName:(id)name;
-(void)dealloc;
-(id)init;
-(unsigned long)GetCountOfDownloadVoice;
-(BOOL)DelRowInDownloadVoice:(id)downloadVoice LocalID:(unsigned long)anId VoiceLen:(unsigned long)len EndFlag:(unsigned long)flag;
-(BOOL)DelRowInDownloadVoice:(id)downloadVoice LocalID:(unsigned long)anId;
-(BOOL)GetOneRowInDownloadVoice:(id)downloadVoice RetCol:(id)col AfterRowID:(unsigned long)anId;
-(BOOL)GetColValueInDownloadVoice:(id)downloadVoice LocalID:(unsigned long)anId VoiceLen:(unsigned long)len EndFlag:(unsigned long)flag QryCol:(id)col RetCol:(id)col6;
-(BOOL)SetColValueInDownloadVoice:(id)downloadVoice LocalID:(unsigned long)anId VoiceLen:(unsigned long)len EndFlag:(unsigned long)flag ColValue:(id)value;
-(BOOL)InsertNewRowInDownloadVoice:(id)downloadVoice;
-(unsigned long)GetCountOfUploadVoice;
-(BOOL)DelRowInUploadVoice:(id)uploadVoice LocalID:(unsigned long)anId Offset:(unsigned long)offset;
-(BOOL)DelRowInUploadVoice:(id)uploadVoice LocalID:(unsigned long)anId;
-(BOOL)GetOneRowInUploadVoice:(id)uploadVoice RetCol:(id)col AfterRowID:(unsigned long)anId;
-(BOOL)GetMergeRowInUploadVoice:(id)uploadVoice LocalID:(unsigned long)anId Offset:(unsigned long)offset QryCol:(id)col RetCol:(id)col5;
-(BOOL)GetColValueInUploadVoice:(id)uploadVoice LocalID:(unsigned long)anId Offset:(unsigned long)offset QryCol:(id)col RetCol:(id)col5;
-(BOOL)SetColValueInUploadVoice:(id)uploadVoice LocalID:(unsigned long)anId Offset:(unsigned long)offset ColValue:(id)value;
-(BOOL)InsertNewRowInUploadVoice:(id)uploadVoice;
-(unsigned long)GetCountInBottle;
-(BOOL)DelRowInBottle:(unsigned long)bottle;
-(BOOL)GetOneRowInBottle:(unsigned long)bottle QryCol:(id)col RetCol:(id)col3;
-(BOOL)GetOneRowInBottleByBottleID:(id)bottleByBottleID QryCol:(id)col RetCol:(id)col3;
-(BOOL)SetColValueInBottle:(unsigned long)bottle ColValue:(id)value;
-(unsigned long)InsertNewRowInBottle:(id)bottle;
-(BOOL)DelRowInBottleContact:(id)bottleContact;
-(BOOL)GetAllRowInBottleContact:(id)bottleContact RetCol:(id)col;
-(BOOL)DelRowInInBottleContact:(id)bottleContact;
-(BOOL)GetColValueInBottleContact:(id)bottleContact QryCol:(id)col RetCol:(id)col3;
-(BOOL)SetColValueInBottleContact:(id)bottleContact ColValue:(id)value;
-(BOOL)InsertNewRowInBottleContact:(id)bottleContact;
-(BOOL)GetAllRowInMassSendContact:(id)massSendContact RetCol:(id)col;
-(BOOL)DelRowInMassSendContact:(id)massSendContact;
-(BOOL)GetOneRowInMassSendContact:(id)massSendContact QryCol:(id)col RetCol:(id)col3;
-(unsigned long)InsertNewRowInMassSendContact:(id)massSendContact;
-(BOOL)DelRowInQQContact:(id)qqcontact;
-(BOOL)GetAllRowInQQContact:(id)qqcontact RetCol:(id)col;
-(BOOL)GetColValueInQQContact:(id)qqcontact QryCol:(id)col RetCol:(id)col3;
-(BOOL)SetColValueInQQContact:(id)qqcontact ColValue:(id)value;
-(BOOL)InsertNewRowInQQContact:(id)qqcontact;
-(BOOL)SetColValueInEmojiCatalog:(unsigned long)emojiCatalog ColValue:(id)value;
-(BOOL)GetColValueInEmojiCatalog:(unsigned long)emojiCatalog QryCol:(id)col RetCol:(id)col3;
-(BOOL)GetAllRowInEmojiCatalog:(id)emojiCatalog RetCol:(id)col;
-(BOOL)InsertNewRowInEmojiCatalog:(id)emojiCatalog;
-(BOOL)DelRowInEmoji:(unsigned long)emoji Emoji:(id)emoji2;
-(BOOL)GetColValueInEmoji:(unsigned long)emoji Emoji:(id)emoji2 QryCol:(id)col RetCol:(id)col4;
-(BOOL)GetAllRowInEmoji:(id)emoji RetCol:(id)col CatalogID:(unsigned long)anId;
-(BOOL)InsertNewRowInEmoji:(id)emoji;
-(unsigned long)GetCountOfEmoticonDownload;
-(BOOL)GetFirstRowInEmoticonDownload:(id)emoticonDownload RetCol:(id)col;
-(BOOL)DelRowInEmoticonDownload:(id)emoticonDownload SvrID:(unsigned long)anId;
-(BOOL)GetColValueInEmoticonDownload:(id)emoticonDownload SvrID:(unsigned long)anId QryCol:(id)col RetCol:(id)col4;
-(BOOL)InsertNewRowInEmoticonDownload:(id)emoticonDownload;
-(unsigned long)GetCountOfEmoticonUpload;
-(BOOL)GetFirstRowInEmoticonUpload:(id)emoticonUpload RetCol:(id)col;
-(BOOL)DelRowInEmoticonUpload:(id)emoticonUpload LocalID:(unsigned long)anId;
-(BOOL)GetColValueInEmoticonUpload:(id)emoticonUpload LocalID:(unsigned long)anId QryCol:(id)col RetCol:(id)col4;
-(BOOL)InsertNewRowInEmoticonUpload:(id)emoticonUpload;
-(BOOL)DelRowInEmoticon:(id)emoticon;
-(BOOL)GetColValueInEmoticon:(id)emoticon QryCol:(id)col RetCol:(id)col3;
-(BOOL)GetRowEmoticon:(id)emoticon RetCol:(id)col nsCon:(id)con OrderBy:(id)by limit:(unsigned long)limit;
-(BOOL)GetAllRowInEmoticon:(id)emoticon RetCol:(id)col where:(id)where;
-(BOOL)GetAllRowInEmoticon:(id)emoticon RetCol:(id)col;
-(BOOL)InsertNewRowInEmoticon:(id)emoticon;
@end

@interface CChatStatusEvent : NetCmdSendOnlyEvent {
	NSString* m_nsUsrName;
	unsigned long m_uiChatStatus;
}
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface MMBizCenterMgr : MMService <MMService, WCPayLogicMgrExt> {
}
-(void)OnGetBizOrderListResponse:(id)response Request:(id)request Error:(id)error;
-(void)GetOrderList:(unsigned long)list Offset:(unsigned long)offset Scene:(int)scene ExtInfo:(id)info;
-(void)onServiceClearData;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)dealloc;
-(id)init;
@end

@interface CFunctionSwitchEvent : CBaseEvent {
	unsigned long m_uiFunctionId;
	unsigned long m_uiSwitchValue;
}
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)AddOplogInternal;
-(void)dealloc;
-(id)init;
@end

@interface GenericOplogEvent : CBaseEvent {
	unsigned long m_uiCmdID;
	PBGeneratedMessage* m_message;
	BOOL m_bNeedSync;
}
@property(assign, nonatomic) BOOL m_bNeedSync;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)dealloc;
-(id)init:(unsigned long)init withMessage:(id)message;
@end

@interface CInviteFriendSyncEvent : CBaseEvent {
	NSString* m_nsUsrName;
	unsigned long m_uiFriendType;
}
@property(assign, nonatomic) unsigned long m_uiFriendType;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(BOOL)AddOplog;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CModDisturbSettingEvent : CBaseEvent {
	CNoDisturbInfo* m_oNoDisturbInfo;
}
@property(retain, nonatomic) CNoDisturbInfo* m_oNoDisturbInfo;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)AddOplogInternal;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CModUsrInfoEvent : CBaseEvent {
	CUsrInfo* m_oUsrInfo;
	NSData* m_dtLocalUsrPic;
}
@property(retain, nonatomic) NSData* m_dtLocalUsrPic;
@property(retain, nonatomic) CUsrInfo* m_oUsrInfo;
-(BOOL)AddOplog:(id)oplog UsrPic:(id)pic;
-(BOOL)isModifyExtInfo:(id)info;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CPluginConfigEvent : CFunctionSwitchEvent {
	unsigned long m_uiPluginConfigType;
	BOOL m_bSwitch;
}
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CPrivateConfigEvent : CFunctionSwitchEvent {
	unsigned long m_uiPrivateConfigType;
	BOOL m_bSwitch;
}
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CSetOpenFlagEvent : CBaseEvent {
	unsigned long m_uiOpenFlag;
	unsigned long m_uiBindUin;
	NSString* m_nsMBlogAddr;
}
@property(retain, nonatomic) NSString* m_nsMBlogAddr;
-(BOOL)AddCloseOplog:(id)oplog;
-(BOOL)AddOpenOplog:(id)oplog;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CSetPrivatePushEvent : CBaseEvent {
	unsigned long m_uiPushStatus;
	NSString* m_nsMBlogAddr;
}
@property(retain, nonatomic) NSString* m_nsMBlogAddr;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CUpdateStatOplogEvent : CBaseEvent {
	unsigned long m_uiOpCode;
}
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)AddOplogInternal;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CAuthEvent : NetCmdEvent {
	NSString* m_nsAuthUsrName;
	NSString* m_nsPassWord;
	NSString* m_nsPassWordMd5;
	NSString* m_nsVerifyCodeID;
	NSString* m_nsVerifyCode;
	NSString* m_nsPwd16Md5;
	unsigned long m_uiScene;
	unsigned long m_uiInputType;
	NSString* m_nsUinPwdMD5;
	NSString* m_nsUin16PwdMD5;
	NSString* m_nsImgEncryptKey;
	NSData* m_dtKSid;
	BOOL m_bAutoLogin;
	NSString* m_nsAuthTicket;
	NSString* m_nsAutoAuthTicket;
	NSString* m_nsClientSeqID;
	NSMutableData* m_dtWTLoginReqBuff;
	BOOL m_bIsGetWTLoginVerfiyImg;
}
@property(assign, nonatomic) BOOL m_bIsGetWTLoginVerfiyImg;
@property(retain, nonatomic) NSMutableData* m_dtWTLoginReqBuff;
@property(retain, nonatomic) NSString* m_nsClientSeqID;
@property(retain, nonatomic) NSString* m_nsAutoAuthTicket;
@property(retain, nonatomic) NSString* m_nsAuthTicket;
@property(retain, nonatomic) NSData* m_dtKSid;
@property(retain, nonatomic) NSString* m_nsImgEncryptKey;
@property(retain, nonatomic) NSString* m_nsUin16PwdMD5;
@property(retain, nonatomic) NSString* m_nsUinPwdMD5;
@property(retain, nonatomic) NSString* m_nsPwd16Md5;
@property(retain, nonatomic) NSString* m_nsVerifyCode;
@property(retain, nonatomic) NSString* m_nsVerifyCodeID;
@property(retain, nonatomic) NSString* m_nsPassWordMd5;
@property(retain, nonatomic) NSString* m_nsPassWord;
@property(retain, nonatomic) NSString* m_nsAuthUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CBindQQEvent : NetCmdEvent {
	unsigned long m_uiBindUin;
	NSString* m_nsPwd;
	NSString* m_nsVerifyCode;
	NSString* m_nsVerifyID;
	unsigned long m_uiOpCode;
	NSString* m_nsImgEncryptKey;
	NSData* m_dtKSid;
}
@property(retain, nonatomic) NSData* m_dtKSid;
@property(retain, nonatomic) NSString* m_nsImgEncryptKey;
@property(retain, nonatomic) NSString* m_nsVerifyID;
@property(retain, nonatomic) NSString* m_nsVerifyCode;
@property(retain, nonatomic) NSString* m_nsPwd;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CCheckQQEvent : NetCmdEvent {
	unsigned long m_uiCheckUin;
	NSString* m_nsPwd;
	NSString* m_nsVerifyCode;
	NSString* m_nsVerifyID;
	unsigned long m_uiOpCode;
	NSString* m_nsImgEncryptKey;
	NSData* m_dtKSid;
}
@property(retain, nonatomic) NSData* m_dtKSid;
@property(retain, nonatomic) NSString* m_nsImgEncryptKey;
@property(retain, nonatomic) NSString* m_nsVerifyID;
@property(retain, nonatomic) NSString* m_nsVerifyCode;
@property(retain, nonatomic) NSString* m_nsPwd;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CGetImgEvent : CMultiEvent {
	CUploadImgWrap* m_oGetImgWrap;
	NSString* m_nsUsrName;
	unsigned long m_uiLastNotifyPartLen;
	unsigned long m_uiNotifyTotalLen;
	unsigned long m_uiLastNotifyPercent;
}
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(void)TimerCheckEvent;
-(void)SetNotifyData:(unsigned long)data PartLen:(unsigned long)len Complete:(BOOL)complete;
-(BOOL)HandleGetImgPart:(id)part;
-(BOOL)CreateImplGetImg;
-(void)NotifyError:(unsigned long)error MessageInfo:(id)info;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CImplGetImgEvent : NetCmdEvent {
	CUploadImgWrap* m_oGetImgWrap;
}
@property(retain, nonatomic) CUploadImgWrap* m_oGetImgWrap;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CGetQQGroupEvent : NetCmdEvent {
	unsigned long m_uiOpType;
	unsigned long m_uiGroupID;
}
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CGetVerifyImgEvent : NetCmdEvent {
	NSString* m_nsAuthUsrName;
	NSString* m_nsPassWord;
	NSString* m_nsPassWordMd5;
	NSString* m_nsVerifyCodeID;
}
@property(retain, nonatomic) NSString* m_nsVerifyCodeID;
@property(retain, nonatomic) NSString* m_nsPassWordMd5;
@property(retain, nonatomic) NSString* m_nsPassWord;
@property(retain, nonatomic) NSString* m_nsAuthUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface LBSFindEvent : NetCmdEvent {
	float fLongitude;
	float fLatitude;
	int iPrecision;
	int iOpCode;
}
@property(assign, nonatomic) int iOpCode;
@property(assign, nonatomic) int iPrecision;
@property(assign, nonatomic) float fLatitude;
@property(assign, nonatomic) float fLongitude;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CNewInviteFriendEvent : NetCmdEvent {
	unsigned long m_uiFriendType;
}
@property(assign, nonatomic) unsigned long m_uiFriendType;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CSearchContactEvent : NetCmdEvent {
	NSString* m_nsUsrName;
	int m_opCode;
	NSData* m_reqBuf;
}
@property(retain, nonatomic) NSData* m_reqBuf;
@property(assign, nonatomic) int m_opCode;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(void)handleContactImg:(id)img;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CSendCardEvent : NetCmdEvent {
	NSString* m_nsUsrName;
	NSString* m_nsContent;
	unsigned long m_uiSendCardType;
	unsigned long m_uiStyle;
}
@property(retain, nonatomic) NSString* m_nsContent;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CImplSendEvent : NetCmdEvent {
	NSMutableDictionary* m_dicMsgList;
	NSMutableArray* m_arrMsgList;
	unsigned long m_uiScene;
}
@property(retain, nonatomic) NSMutableArray* m_arrMsgList;
@property(retain, nonatomic) NSMutableDictionary* m_dicMsgList;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CSendMesEvent : CMultiEvent {
	NSMutableDictionary* m_dicMsgList;
	NSMutableArray* m_arrMsgList;
	NSString* m_nsLocalUsrName;
	BOOL m_bFinish;
	BOOL m_bNotifyNotOpen;
	unsigned long m_uiScene;
}
@property(retain, nonatomic) NSString* m_nsLocalUsrName;
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(void)HandleSendFail:(unsigned long)fail MessageInfo:(id)info;
-(void)LoadMsgFromDB;
-(void)TimerCheckEvent;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)CheckMessageTime;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CSwitchPushMailEvent : NetCmdEvent {
	unsigned long m_uiSwitchValue;
	NSString* m_nsSecPwd;
}
@property(retain, nonatomic) NSString* m_nsSecPwd;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CVerifyEmailEvent : NetCmdEvent {
	NSString* m_nsLocalUsrName;
}
@property(retain, nonatomic) NSString* m_nsLocalUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CNewRegEvent : NetCmdEvent {
	NSString* m_nsUsrName;
	NSString* m_nsAliasName;
	NSString* m_nsPwd;
	NSString* m_nsNickName;
	unsigned long m_uiBindUin;
	NSString* m_nsBindEmail;
	NSString* m_nsBindMobile;
	NSString* m_nsTicket;
	NSString* m_nsVerifySignature;
	NSString* m_nsVerifyContent;
	unsigned long m_uiScene;
	unsigned long m_uiMode;
	unsigned long m_uiForceReg;
	BOOL m_bHasHeadImg;
	NSString* m_nsClientSeqID;
	unsigned long m_uiSuggestRet;
}
@property(retain, nonatomic) NSString* m_nsClientSeqID;
@property(retain, nonatomic) NSString* m_nsVerifyContent;
@property(retain, nonatomic) NSString* m_nsVerifySignature;
@property(retain, nonatomic) NSString* m_nsTicket;
@property(retain, nonatomic) NSString* m_nsBindMobile;
@property(retain, nonatomic) NSString* m_nsBindEmail;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsPwd;
@property(retain, nonatomic) NSString* m_nsAliasName;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CNewRegPrtl : PrtlBase {
	NSString* m_nsUsrName;
	NSString* m_nsAliasName;
	NSString* m_nsPwd;
	NSString* m_nsNickName;
	unsigned long m_uiBindUin;
	NSString* m_nsBindEmail;
	NSString* m_nsBindMobile;
	NSString* m_nsTicket;
	NSString* m_nsVerifySignature;
	NSString* m_nsVerifyContent;
	basic_string<char, std::char_traits<char>, std::allocator<char> > m_strPwdMd5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > m_strPwd16Md5;
	unsigned long m_uiMode;
	unsigned long m_uiForceReg;
	BOOL m_bHasHeadImg;
	NSString* m_nsClientSeqID;
	unsigned long m_uiSuggestRet;
	NSData* m_dtRandomKey;
}
@property(retain, nonatomic) NSData* m_dtRandomKey;
@property(assign, nonatomic) unsigned long m_uiSuggestRet;
@property(retain, nonatomic) NSString* m_nsClientSeqID;
@property(assign, nonatomic) BOOL m_bHasHeadImg;
@property(retain, nonatomic) NSString* m_nsVerifyContent;
@property(retain, nonatomic) NSString* m_nsVerifySignature;
@property(assign, nonatomic) unsigned long m_uiForceReg;
@property(assign, nonatomic) unsigned long m_uiMode;
@property(retain, nonatomic) NSString* m_nsTicket;
@property(retain, nonatomic) NSString* m_nsBindMobile;
@property(retain, nonatomic) NSString* m_nsBindEmail;
@property(assign, nonatomic) unsigned long m_uiBindUin;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsPwd;
@property(retain, nonatomic) NSString* m_nsAliasName;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)GetRespKey:(AutoBuffer*)key;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface NetworkStatReportMgr : MMService <MMService, PBMessageObserverDelegate> {
	int m_nMaxReportPerTime;
	int m_nReportFlag;
	NSMutableArray* m_aryFiles;
	long m_lastReportTime;
	NSTimer* m_timer;
}
-(void)onServiceEnterBackground;
-(void)sendStatReportWithFlag:(int)flag;
-(void)sendStatReport;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)dealloc;
-(id)init;
-(BOOL)hasExpired;
-(void)onTimeExpired;
-(void)startOneStatReport;
-(BOOL)getReqFromFile:(id)file Req:(id)req;
-(BOOL)checkReportItem:(id)item;
@end

@interface CGetBottleContactEvent : CMultiEvent {
	unsigned long m_uiSyncCount;
	NSString* m_nsLastSyncKeyMD5;
}
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(BOOL)CreateSyncEvent;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)TimerCheckEvent;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CGetQQEvent : CMultiEvent {
	unsigned long m_uiSyncCount;
	NSString* m_nsLastSyncKeyMD5;
}
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(BOOL)CreateSyncEvent;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)TimerCheckEvent;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CGetSxEvent : CMultiEvent {
	unsigned long m_uiSyncCount;
	NSString* m_nsLastSyncKeyMD5;
}
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(BOOL)CreateSyncEvent;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)TimerCheckEvent;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CImplNewInitEvent : CSyncBaseEvent {
	NSString* m_nsUsrName;
	NSData* m_dtCurSyncBuffer;
	NSData* m_dtMaxSyncBuffer;
	unsigned long m_uiScene;
	dispatch_queue_s* m_worker;
}
@property(assign, nonatomic) dispatch_queue_s* m_worker;
@property(retain, nonatomic) NSData* m_dtMaxSyncBuffer;
@property(retain, nonatomic) NSData* m_dtCurSyncBuffer;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CImplNewSyncEvent : CSyncBaseEvent {
	NSMutableArray* m_arrOplogList;
	unsigned long m_uiSelector;
	NSString* m_nsUsrName;
	NSData* m_dtSyncBuffer;
	BOOL m_bUploadOplog;
	unsigned long m_uiSyncScene;
}
@property(retain, nonatomic) NSData* m_dtSyncBuffer;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(void)ClearOplog;
-(BOOL)LoadOplog;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface ImplSpecialSyncEvent : CSyncBaseEvent {
	NSMutableArray* m_arrOplogList;
	unsigned long m_uiSelector;
	NSString* m_nsUsrName;
	NSData* m_dtSyncBuffer;
	BOOL m_bUploadOplog;
	unsigned long m_uiSyncScene;
}
@property(retain, nonatomic) NSData* m_dtSyncBuffer;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(void)ClearOplog;
-(BOOL)LoadOplog;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CNewInitEvent : CMultiEvent {
	unsigned long m_uiInitCount;
	unsigned long m_uiScene;
	NSData* m_dtCurSyncBuffer;
	NSData* m_dtMaxSyncBuffer;
	NSDate* m_tStartDate;
	dispatch_queue_s* m_worker;
}
@property(retain, nonatomic) NSDate* m_tStartDate;
@property(retain, nonatomic) NSData* m_dtMaxSyncBuffer;
@property(retain, nonatomic) NSData* m_dtCurSyncBuffer;
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)CreateInitEvent;
-(BOOL)SetEventInfo:(id)info;
-(void)TimerCheckEvent;
-(void)dealloc;
-(id)init;
@end

@interface CgiObjectEditViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, UIAlertViewDelegate, CgiObjectEditDelegate, CgiPropertyEditDelegate> {
	MMDelegateProxy<CgiObjectEditDelegate>* m_delegate;
	MMTableView* m_tableView;
	vector<objc_property *, std::allocator<objc_property *> > m_pros;
	NSString* m_name;
	unsigned m_count;
	NSObject* m_object;
	NSString* m_filename;
	BOOL m_isArray;
	UIAlertView* m_inputFileName;
}
@property(retain, nonatomic) MMDelegateProxy<CgiObjectEditDelegate>* delegate;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)setProperty:(id)property section:(int)section;
-(void)setObject:(id)object propertyName:(id)name;
-(void)willDisappear;
-(void)setSingleValue:(id)value propertyType:(id)type propertyValue:(id)value3;
-(id)getSingleValue:(id)value propertyType:(id)type;
-(BOOL)isSingleType:(id)type;
-(void)doSaveAs:(id)as;
-(void)onSaveAsButton:(id)button;
-(void)onAddButton:(id)button;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(id)initWithObject:(id)object propertyName:(id)name;
@end

@interface CNewInitPrtl : CSyncBasePrtl {
	NSData* m_dtCurSyncBuffer;
	NSData* m_dtMaxSyncBuffer;
	NSString* m_nsUsrName;
	dispatch_queue_s* m_worker;
}
@property(assign, nonatomic) dispatch_queue_s* m_worker;
@property(retain, nonatomic) NSString* m_nsUsrName;
@property(retain, nonatomic) NSData* m_dtMaxSyncBuffer;
@property(retain, nonatomic) NSData* m_dtCurSyncBuffer;
-(BOOL)HandleResp:(void*)resp;
-(void)doParseCMD:(const SKSmartPickleStruct<MMMicroMsgPickle, tagMMNewInitResponse>*)cmd dicMessageInfo:(id)info;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CNewSyncEvent : CMultiEvent {
	unsigned long m_uiSyncCount;
	unsigned long m_uiSyncScene;
	NSString* m_nsLastSyncKeyMD5;
}
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(void)NotifySyncEnd;
-(BOOL)CreateSyncEvent;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)TimerCheckEvent;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface NewSyncHandler : CSyncBaseEvent {
	BOOL m_bPush;
}
-(BOOL)HandleSyncResp:(id)resp Push:(BOOL)push ShowPush:(BOOL)push3 ContinueFlag:(unsigned*)flag;
-(void)InitHandler:(id)handler Lock:(id)lock DocPath:(id)path Notify:(id)notify;
-(void)dealloc;
-(id)init;
@end

@interface CNewSyncPrtl : CSyncBasePrtl {
	NSArray* m_arrOplogList;
	unsigned long m_uiSelector;
	NSString* m_nsUsrName;
	NSData* m_dtSyncBuffer;
}
@property(retain, nonatomic) NSData* m_dtSyncBuffer;
@property(retain, nonatomic) NSString* m_nsUsrName;
@property(assign, nonatomic) unsigned long m_uiSelector;
@property(retain, nonatomic) NSArray* m_arrOplogList;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface SpecialSyncPrtl : CSyncBasePrtl {
	NSArray* m_arrOplogList;
	unsigned long m_uiSelector;
	NSString* m_nsUsrName;
	NSData* m_dtSyncBuffer;
}
@property(retain, nonatomic) NSData* m_dtSyncBuffer;
@property(retain, nonatomic) NSString* m_nsUsrName;
@property(assign, nonatomic) unsigned long m_uiSelector;
@property(retain, nonatomic) NSArray* m_arrOplogList;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CAuthPrtl : PrtlBase {
	NSString* m_nsAuthUsrName;
	NSString* m_nsPassWord;
	basic_string<char, std::char_traits<char>, std::allocator<char> > m_strPwdMd5;
	NSString* m_nsPassWordMd5;
	NSString* m_nsVerifyCodeID;
	NSString* m_nsVerifyCode;
	NSString* m_nsPwd16Md5;
	basic_string<char, std::char_traits<char>, std::allocator<char> > m_strPwd16Md5;
	NSString* m_nsUinPwdMD5;
	NSString* m_nsUin16PwdMD5;
	NSString* m_nsImgEncryptKey;
	NSData* m_dtKSid;
	BOOL m_bAutoLogin;
	NSString* m_nsAuthTicket;
	NSString* m_nsAutoAuthTicket;
	NSData* m_dtRandomKey;
	unsigned long m_uiInputType;
	NSString* m_nsClientSeqID;
	NSMutableData* m_dtWTLoginReqBuff;
	BOOL m_bIsGetWTLoginVerfiyImg;
}
@property(assign, nonatomic) BOOL m_bIsGetWTLoginVerfiyImg;
@property(retain, nonatomic) NSMutableData* m_dtWTLoginReqBuff;
@property(retain, nonatomic) NSData* m_dtRandomKey;
@property(retain, nonatomic) NSString* m_nsClientSeqID;
@property(assign, nonatomic) unsigned long m_uiInputType;
@property(retain, nonatomic) NSString* m_nsAutoAuthTicket;
@property(retain, nonatomic) NSString* m_nsAuthTicket;
@property(assign, nonatomic) BOOL m_bAutoLogin;
@property(retain, nonatomic) NSData* m_dtKSid;
@property(retain, nonatomic) NSString* m_nsImgEncryptKey;
@property(retain, nonatomic) NSString* m_nsUin16PwdMD5;
@property(retain, nonatomic) NSString* m_nsUinPwdMD5;
@property(retain, nonatomic) NSString* m_nsPwd16Md5;
@property(retain, nonatomic) NSString* m_nsVerifyCode;
@property(retain, nonatomic) NSString* m_nsVerifyCodeID;
@property(retain, nonatomic) NSString* m_nsPassWordMd5;
@property(retain, nonatomic) NSString* m_nsPassWord;
@property(retain, nonatomic) NSString* m_nsAuthUsrName;
+(void)ProcessBuildInIPList:(tagMMBuiltinIPList*)iplist withPortList:(id)portList andTimeoutList:(id)list;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)GetRespKey:(AutoBuffer*)key;
-(void)GetReqRSAKey:(int*)key KEYN:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)keyn KEYE:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)keye;
-(void)GetReqKey:(AutoBuffer*)key;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CBindQQPrtl : PrtlBase {
	unsigned long m_uiBindUin;
	NSString* m_nsPwd;
	NSString* m_nsVerifyCode;
	NSString* m_nsVerifyID;
	unsigned long m_uiOpCode;
	NSString* m_nsPwdMD5;
	NSString* m_ns16PwdMD5;
	NSString* m_nsImgEncryptKey;
	NSData* m_dtKSid;
}
@property(retain, nonatomic) NSData* m_dtKSid;
@property(retain, nonatomic) NSString* m_nsImgEncryptKey;
@property(retain, nonatomic) NSString* m_ns16PwdMD5;
@property(retain, nonatomic) NSString* m_nsPwdMD5;
@property(assign, nonatomic) unsigned long m_uiOpCode;
@property(retain, nonatomic) NSString* m_nsVerifyID;
@property(retain, nonatomic) NSString* m_nsVerifyCode;
@property(retain, nonatomic) NSString* m_nsPwd;
@property(assign, nonatomic) unsigned long m_uiBindUin;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CCheckQQPrtl : PrtlBase {
	unsigned long m_uiCheckUin;
	NSString* m_nsPwd;
	NSString* m_nsVerifyCode;
	NSString* m_nsVerifyID;
	unsigned long m_uiOpCode;
	NSString* m_nsPwdMD5;
	NSString* m_ns16PwdMD5;
	NSString* m_nsImgEncryptKey;
	NSData* m_dtKSid;
}
@property(retain, nonatomic) NSData* m_dtKSid;
@property(retain, nonatomic) NSString* m_nsImgEncryptKey;
@property(retain, nonatomic) NSString* m_ns16PwdMD5;
@property(retain, nonatomic) NSString* m_nsPwdMD5;
@property(assign, nonatomic) unsigned long m_uiOpCode;
@property(retain, nonatomic) NSString* m_nsVerifyID;
@property(retain, nonatomic) NSString* m_nsVerifyCode;
@property(retain, nonatomic) NSString* m_nsPwd;
@property(assign, nonatomic) unsigned long m_uiCheckUin;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CGetImgPrtl : PrtlBase {
	CUploadImgWrap* m_oGetImgWrap;
}
@property(retain, nonatomic) CUploadImgWrap* m_oGetImgWrap;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CGetQQGroupPrtl : PrtlBase {
	unsigned long m_uiOpType;
	unsigned long m_uiGroupID;
}
@property(assign, nonatomic) unsigned long m_uiGroupID;
@property(assign, nonatomic) unsigned long m_uiOpType;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CGetVerifyImgPrtl : PrtlBase {
	NSString* m_nsAuthUsrName;
	NSString* m_nsPassWord;
	NSString* m_nsPassWordMd5;
	NSString* m_nsVerifyCodeID;
	basic_string<char, std::char_traits<char>, std::allocator<char> > m_strPassWordMd5;
	NSData* m_dtRandomKey;
}
@property(retain, nonatomic) NSData* m_dtRandomKey;
@property(retain, nonatomic) NSString* m_nsVerifyCodeID;
@property(retain, nonatomic) NSString* m_nsPassWordMd5;
@property(retain, nonatomic) NSString* m_nsPassWord;
@property(retain, nonatomic) NSString* m_nsAuthUsrName;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)GetRespKey:(AutoBuffer*)key;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface LBSFindPrtl : PrtlBase {
	float fLongitude;
	float fLatitude;
	int iPrecision;
	int iOpCode;
	LbsContactInfoList* m_lbsContactList;
}
@property(retain, nonatomic) LbsContactInfoList* lbsContactList;
@property(assign, nonatomic) int iOpCode;
@property(assign, nonatomic) int iPrecision;
@property(assign, nonatomic) float fLatitude;
@property(assign, nonatomic) float fLongitude;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandler_getLatestAddress : WebviewJSEventHandlerBase <IWebviewAskAuthorizationLogicExt> {
	JSEvent* _jsEvent;
}
-(void)startGetLatestAddress;
-(void)OnAskAuthorizationFailure:(id)failure ForAuthInfo:(id)authInfo;
-(void)OnAskAuthorizationSuccessForAuthInfo:(id)authInfo;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
-(id)init;
-(void)dealloc;
@end

@interface CNewInviteFriendPrtl : PrtlBase {
	unsigned long m_uiFriendType;
}
@property(assign, nonatomic) unsigned long m_uiFriendType;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CSearchContactPrtl : PrtlBase {
	NSString* m_nsUsrName;
	int m_opCode;
	NSData* m_reqBuf;
}
@property(retain, nonatomic) NSData* m_reqBuf;
@property(assign, nonatomic) int m_opCode;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CSendCardPrtl : PrtlBase {
	NSString* m_nsUsrName;
	NSString* m_nsContent;
	unsigned long m_uiSendCardType;
	unsigned long m_uiStyle;
}
@property(assign, nonatomic) unsigned long m_uiStyle;
@property(assign, nonatomic) unsigned long m_uiSendCardType;
@property(retain, nonatomic) NSString* m_nsContent;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CSendMesPrtl : PrtlBase {
	NSString* m_nsDocPath;
	NSMutableDictionary* m_dicMsgList;
	NSMutableArray* m_arrMsgList;
}
@property(retain, nonatomic) NSMutableArray* m_arrMsgList;
@property(retain, nonatomic) NSMutableDictionary* m_dicMsgList;
@property(retain, nonatomic) NSString* m_nsDocPath;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CSwitchPushMailPrtl : PrtlBase {
	unsigned long m_uiSwithPushMailValue;
	NSString* m_nsSecPwd;
}
@property(retain, nonatomic) NSString* m_nsSecPwd;
@property(assign, nonatomic) unsigned long m_uiSwithPushMailValue;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CVerifyEmailPrtl : PrtlBase {
	NSString* m_nsLocalUsrName;
}
@property(retain, nonatomic) NSString* m_nsLocalUsrName;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface AsyncReadPacket : NSObject {
	NSMutableData* buffer;
	unsigned startOffset;
	unsigned bytesDone;
	unsigned maxLength;
	double timeout;
	unsigned readLength;
	NSData* term;
	BOOL bufferOwner;
	unsigned originalBufferLength;
	long tag;
}
-(void)dealloc;
-(int)searchForTermAfterPreBuffering:(unsigned)termAfterPreBuffering;
-(unsigned)prebufferReadLengthForTerm;
-(unsigned)readLengthForTermWithPreBuffer:(id)preBuffer found:(BOOL*)found;
-(unsigned)readLengthForTerm;
-(unsigned)readLengthForNonTerm;
-(id)initWithData:(id)data startOffset:(unsigned)offset maxLength:(unsigned)length timeout:(double)timeout readLength:(unsigned)length5 terminator:(id)terminator tag:(long)tag;
@end

@interface AsyncWritePacket : NSObject {
	NSData* buffer;
	unsigned bytesDone;
	long tag;
	double timeout;
}
-(void)dealloc;
-(id)initWithData:(id)data timeout:(double)timeout tag:(long)tag;
@end

@interface AsyncSpecialPacket : NSObject {
	NSDictionary* tlsSettings;
}
-(void)dealloc;
-(id)initWithTLSSettings:(id)tlssettings;
@end

@interface AsyncSocket : NSObject {
	int theNativeSocket4;
	int theNativeSocket6;
	CFSocketRef theSocket4;
	CFSocketRef theSocket6;
	CFReadStreamRef theReadStream;
	CFWriteStreamRef theWriteStream;
	CFRunLoopSourceRef theSource4;
	CFRunLoopSourceRef theSource6;
	CFRunLoopRef theRunLoop;
	struct {
		int version;
		void* info;
		/*function-pointer*/ void* retain;
		/*function-pointer*/ void* release;
		/*function-pointer*/ void* copyDescription;
	} theContext;
	NSArray* theRunLoopModes;
	NSTimer* theConnectTimer;
	NSMutableArray* theReadQueue;
	AsyncReadPacket* theCurrentRead;
	NSTimer* theReadTimer;
	NSMutableData* partialReadBuffer;
	NSMutableArray* theWriteQueue;
	AsyncWritePacket* theCurrentWrite;
	NSTimer* theWriteTimer;
	id theDelegate;
	unsigned short theFlags;
	long theUserData;
}
+(id)ZeroData;
+(id)LFData;
+(id)CRData;
+(id)CRLFData;
-(void)doCFWriteStreamCallback:(unsigned long)callback forStream:(CFWriteStreamRef)stream;
-(void)doCFReadStreamCallback:(unsigned long)callback forStream:(CFReadStreamRef)stream;
-(void)doCFSocketCallback:(unsigned long)callback forSocket:(CFSocketRef)socket withAddress:(id)address withData:(const void*)data;
-(void)onTLSHandshakeSuccessful;
-(void)maybeStartTLS;
-(void)startTLS:(id)tls;
-(void)doWriteTimeout:(id)timeout;
-(void)endCurrentWrite;
-(void)completeCurrentWrite;
-(BOOL)doSendBytes;
-(BOOL)canAcceptBytes;
-(void)maybeDequeueWrite;
-(void)scheduleDequeueWrite;
-(void)writeData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)doReadTimeout:(id)timeout;
-(void)endCurrentRead;
-(void)completeCurrentRead;
-(void)doBytesAvailable;
-(long)readIntoBuffer:(void*)buffer maxLength:(unsigned)length;
-(BOOL)hasBytesAvailable;
-(void)maybeDequeueRead;
-(void)scheduleDequeueReadDelay;
-(void)scheduleDequeueRead;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout tag:(long)tag;
-(id)description;
-(BOOL)areStreamsConnected;
-(BOOL)isIPv6;
-(BOOL)isIPv4;
-(id)localAddress;
-(id)connectedAddress;
-(unsigned short)portFromAddress6:(sockaddr_in6*)address6;
-(unsigned short)portFromAddress4:(sockaddr_in*)address4;
-(id)hostFromAddress6:(sockaddr_in6*)address6;
-(id)hostFromAddress4:(sockaddr_in*)address4;
-(unsigned short)localPortFromCFSocket6:(CFSocketRef)cfsocket6;
-(unsigned short)localPortFromCFSocket4:(CFSocketRef)cfsocket4;
-(unsigned short)localPortFromNativeSocket6:(int)nativeSocket6;
-(unsigned short)localPortFromNativeSocket4:(int)nativeSocket4;
-(id)localHostFromCFSocket6:(CFSocketRef)cfsocket6;
-(id)localHostFromCFSocket4:(CFSocketRef)cfsocket4;
-(id)localHostFromNativeSocket6:(int)nativeSocket6;
-(id)localHostFromNativeSocket4:(int)nativeSocket4;
-(unsigned short)connectedPortFromCFSocket6:(CFSocketRef)cfsocket6;
-(unsigned short)connectedPortFromCFSocket4:(CFSocketRef)cfsocket4;
-(unsigned short)connectedPortFromNativeSocket6:(int)nativeSocket6;
-(unsigned short)connectedPortFromNativeSocket4:(int)nativeSocket4;
-(id)connectedHostFromCFSocket6:(CFSocketRef)cfsocket6;
-(id)connectedHostFromCFSocket4:(CFSocketRef)cfsocket4;
-(id)connectedHostFromNativeSocket6:(int)nativeSocket6;
-(id)connectedHostFromNativeSocket4:(int)nativeSocket4;
-(unsigned short)localPort6;
-(unsigned short)localPort4;
-(id)localHost6;
-(id)localHost4;
-(unsigned short)connectedPort6;
-(unsigned short)connectedPort4;
-(id)connectedHost6;
-(id)connectedHost4;
-(unsigned short)localPort;
-(id)localHost;
-(unsigned short)connectedPort;
-(id)connectedHost;
-(BOOL)isConnected;
-(BOOL)isDisconnected;
-(id)errorFromCFStreamError:(timeval)cfstreamError;
-(id)getWriteTimeoutError;
-(id)getReadTimeoutError;
-(id)getReadMaxedOutError;
-(id)getConnectTimeoutError;
-(id)getAbortError;
-(id)getStreamError;
-(id)getSocketError;
-(id)getErrnoError;
-(id)unreadData;
-(void)maybeScheduleDisconnect;
-(void)disconnectAfterReadingAndWriting;
-(void)disconnectAfterWriting;
-(void)disconnectAfterReading;
-(void)disconnect;
-(void)close;
-(void)emptyQueues;
-(void)recoverUnreadData;
-(void)closeWithError:(id)error;
-(BOOL)setSocketFromStreamsAndReturnError:(id*)streamsAndReturnError;
-(void)doStreamOpen;
-(BOOL)openStreamsAndReturnError:(id*)error;
-(BOOL)configureStreamsAndReturnError:(id*)error;
-(BOOL)attachStreamsToRunLoop:(id)runLoop error:(id*)error;
-(BOOL)createStreamsToHost:(id)host onPort:(unsigned short)port error:(id*)error;
-(BOOL)createStreamsFromNative:(int)native error:(id*)error;
-(void)doSocketOpen:(CFSocketRef)open withCFSocketError:(long)cfsocketError;
-(void)doAcceptFromSocket:(CFSocketRef)socket withNewNativeSocket:(int)newNativeSocket;
-(BOOL)connectSocketToAddress:(id)address error:(id*)error;
-(BOOL)configureSocketAndReturnError:(id*)error;
-(BOOL)attachSocketsToRunLoop:(id)runLoop error:(id*)error;
-(BOOL)bindSocketToAddress:(id)address error:(id*)error;
-(BOOL)createSocketForAddress:(id)address error:(id*)error;
-(CFSocketRef)newAcceptSocketForAddress:(id)address error:(id*)error;
-(void)doConnectTimeout:(id)timeout;
-(void)endConnectTimeout;
-(void)startConnectTimeout:(double)timeout;
-(BOOL)connectToAddress:(id)address viaInterfaceAddress:(id)address2 withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port error:(id*)error;
-(BOOL)acceptOnInterface:(id)interface port:(unsigned short)port error:(id*)error;
-(BOOL)acceptOnPort:(unsigned short)port error:(id*)error;
-(id)runLoopModes;
-(BOOL)removeRunLoopMode:(id)mode;
-(BOOL)addRunLoopMode:(id)mode;
-(BOOL)setRunLoopModes:(id)modes;
-(BOOL)moveToRunLoop:(id)runLoop;
-(void)enablePreBuffering;
-(void)runLoopUnscheduleWriteStream;
-(void)runLoopUnscheduleReadStream;
-(void)runLoopRemoveTimer:(id)timer mode:(id)mode;
-(void)runLoopAddTimer:(id)timer mode:(id)mode;
-(void)runLoopRemoveTimer:(id)timer;
-(void)runLoopAddTimer:(id)timer;
-(void)runLoopRemoveSource:(CFRunLoopSourceRef)source mode:(id)mode;
-(void)runLoopAddSource:(CFRunLoopSourceRef)source mode:(id)mode;
-(void)runLoopRemoveSource:(CFRunLoopSourceRef)source;
-(void)runLoopAddSource:(CFRunLoopSourceRef)source;
-(float)progressOfWriteReturningTag:(long*)writeReturningTag bytesDone:(unsigned*)done total:(unsigned*)total;
-(float)progressOfReadReturningTag:(long*)readReturningTag bytesDone:(unsigned*)done total:(unsigned*)total;
-(CFWriteStreamRef)getCFWriteStream;
-(CFReadStreamRef)getCFReadStream;
-(CFSocketRef)getCFSocket;
-(BOOL)canSafelySetDelegate;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)setUserData:(long)data;
-(long)userData;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate userData:(long)data;
-(id)initWithDelegate:(id)delegate;
-(id)init;
@end

@interface HostIPMgrEx : NSObject <NSCoding> {
	NSRecursiveLock* m_oLock;
	NSMutableDictionary* m_ipGroupDict;
	NSMutableArray* m_portList;
}
@property(retain, nonatomic) NSMutableDictionary* ipGroupDict;
@property(retain, nonatomic) NSRecursiveLock* oLock;
@property(retain, nonatomic) NSMutableArray* portList;
+(void)doTest;
+(void)SaveHostMgr:(id)mgr toFile:(id)file;
+(id)LoadHostMgr:(id)mgr;
+(id)IPFilePath;
-(void)SetIPFail:(id)fail;
-(void)SetIPOK:(id)ipok;
-(id)GetIPFromHost:(id)host;
-(void)ClearHardCodeIP;
-(void)ClearAllIP;
-(id)initWithHardCodeIP;
-(void)resetHardCodeIP:(BOOL)ip;
-(void)resetHardCodeIP;
-(void)setHardCodeIP:(BOOL)ip IP:(id)ip2;
-(void)SetIPListFromAuth:(id)auth;
-(void)processExtAuthIPInfo:(id)info;
-(void)SetIPListFromDNS:(id)dns IPList:(id)list CheckSameList:(BOOL)list3;
-(void)SetIPListFromDNS:(id)dns IPList:(id)list;
-(BOOL)isIPList:(id)list equalWith:(id)with;
-(id)getPortList;
-(id)description;
-(id)keyPaths;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)getIpGroupForHost:(id)host;
-(void)setIpGroup:(id)group forHost:(id)host;
@end

@interface WCOfflinePayNetworkHelper : NSObject <PBMessageObserverDelegate> {
	id<WCOfflinePayNetworkHelperDelegate> m_delegate;
}
@property(assign, nonatomic) id<WCOfflinePayNetworkHelperDelegate> m_delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnMessageReturnInTenpayCommon:(id)tenpayCommon Event:(unsigned long)event;
-(void)WCToTenpayCommonRequest:(id)tenpayCommonRequest;
-(void)WCToTenpayCommonRequest:(id)tenpayCommonRequest RetryCount:(unsigned long)count;
-(void)removeAllObserver;
-(void)dealloc;
-(id)init;
@end

@interface IDCHostMgr : MMService <MMService, MMKernelExt> {
	NSMutableDictionary* m_dicHostMapList;
	NSRecursiveLock* m_oLock;
	BOOL m_bCanAuth;
}
+(id)GetPathOfHostFile;
-(void)onAuthOKWithAuthInfo:(id)authInfo;
-(void)GetIDCHostFromBindMobile:(id)bindMobile Delegate:(id)delegate;
-(void)HandleIPListFromPB:(id)pb PortList:(id)list TimeOutList:(id)list3;
-(void)HandleHostListFromPB:(id)pb;
-(void)SaveIDCHost;
-(void)LoadIDCHost;
-(void)IDCRedirectForPBCgi:(id)pbcgi Host:(id)host AuthIP:(id)ip Delegate:(id)delegate;
-(id)GetRealHostFromHost:(id)host;
-(void)SaveIDCHostForReg:(id)reg AuthIP:(id)ip Delegate:(id)delegate;
-(void)SaveIDCHost:(id)host FromAuth:(BOOL)auth AuthIP:(id)ip;
-(void)SaveIDCHost:(id)host;
-(void)SetAuthFlag:(BOOL)flag;
-(BOOL)IsCanAutoAuth;
-(void)dealloc;
-(id)init;
@end

@interface IPGroup : NSObject <NSCoding> {
	NSString* m_host;
	NSMutableArray* m_dnsIP;
	NSMutableArray* m_authIP;
	NSMutableArray* m_hardcodeIP;
	CIPInfo* m_lastReturnIP;
	int m_dnsFailCount;
	int m_timeout;
	CIPInfo* m_lastBackupIP;
	CIPInfo* m_randomDNSIP;
}
@property(assign, nonatomic) int timeout;
@property(retain, nonatomic) NSMutableArray* hardcodeIP;
@property(retain, nonatomic) NSMutableArray* authIP;
@property(retain, nonatomic) NSMutableArray* dnsIP;
@property(retain, nonatomic) CIPInfo* m_randomDNSIP;
@property(retain, nonatomic) CIPInfo* lastBackupIP;
@property(assign, nonatomic) int dnsFailCount;
@property(retain, nonatomic) CIPInfo* lastReturnIP;
@property(retain, nonatomic) NSString* host;
-(void)SetIPFail:(id)fail;
-(void)SetIPOK:(id)ipok;
-(void)reloadAllIPListWithPortList:(id)portList;
-(id)getIPFromIPList:(id)iplist;
-(id)getNextIP;
-(id)getBAKIP;
-(id)description;
-(id)keyPaths;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)removeFromHardcodeIP:(id)hardcodeIP;
-(void)addToHardcodeIP:(id)hardcodeIP;
-(void)removeFromAuthIP:(id)authIP;
-(void)addToAuthIP:(id)authIP;
-(void)removeFromDnsIP:(id)dnsIP;
-(void)addToDnsIP:(id)dnsIP;
-(int)getTimeOut;
-(BOOL)isDNSFailed;
-(int)getDNSFailStatusCount;
-(void)setDNSFailCount:(int)count;
-(void)resetDNSFailCount;
-(void)addDNSFailCount;
-(void)dealloc;
-(id)init;
@end

@interface CIPInfo : NSObject {
	NSString* m_host;
	int m_ip;
	int m_port;
	int m_lastErrCode;
	int m_sourceType;
	CIPInfo* m_lastIPInfo;
	BOOL m_isForLongConn;
	int m_flag;
	unsigned long m_uiFailCount;
	int m_timeout;
}
@property(assign, nonatomic) int timeout;
@property(assign, nonatomic) unsigned long m_uiFailCount;
@property(assign, nonatomic, getter=isForLongConn) BOOL isForLongConn;
@property(retain, nonatomic) CIPInfo* lastIPInfo;
@property(assign, nonatomic) int lastErrCode;
@property(readonly, assign, nonatomic) int flag;
@property(readonly, assign, nonatomic) int sourceType;
@property(readonly, assign, nonatomic) int port;
@property(readonly, assign, nonatomic) int ip;
@property(readonly, assign, nonatomic) NSString* host;
-(BOOL)isLocked;
-(void)resetFlag;
-(void)setFlagFail;
-(void)setFlagOK;
-(id)description;
-(id)keyPaths;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithIp:(int)ip port:(int)port host:(id)host srcType:(int)type;
-(id)init;
@end

@interface CDirectSend : NSObject {
	unsigned char m_ucCmdID;
	unsigned char m_ucFlag;
	unsigned long m_uiSeq;
	unsigned short m_usUsrNameLen;
	NSString* m_nsUsrNameList;
	unsigned short m_usDataLen;
	NSData* m_dtData;
}
@property(retain, nonatomic) NSData* m_dtData;
@property(assign, nonatomic) unsigned short m_usDataLen;
@property(retain, nonatomic) NSString* m_nsUsrNameList;
@property(assign, nonatomic) unsigned short m_usUsrNameLen;
@property(assign, nonatomic) unsigned long m_uiSeq;
@property(assign, nonatomic) unsigned char m_ucFlag;
@property(assign, nonatomic) unsigned char m_ucCmdID;
-(BOOL)Decode:(id)decode;
-(id)Encode;
-(void)dealloc;
-(id)init;
@end

@interface NetworkLog : NSObject {
	NSRecursiveLock* m_lock;
	NSFileHandle* m_hLogFile;
}
@property(retain, nonatomic) NSFileHandle* hLogFile;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedNetworkLog;
+(void)initialize;
-(void)addLog:(id)log;
-(id)getLogLastPartWithMaxSize;
-(id)getLog;
-(void)dealloc;
-(id)init;
-(long long)getLogSize;
-(id)openLogFile;
-(id)getLogPath;
@end

@interface CSockWrap : NSObject {
	AsyncSocket* m_oSock;
	unsigned long m_uiConnStatus;
	unsigned long m_uiRecvStatus;
	unsigned long m_uiRtyConnCount;
	BOOL m_bHost;
	NSData* m_dtHost;
	NSString* m_nsHost;
	unsigned short m_usPort;
	unsigned short m_usHeaderLen;
	unsigned long m_uiDataLen;
	NSMutableData* m_dtHead;
	NSMutableData* m_dtBody;
	unsigned long m_uiErrorCode;
	unsigned long m_uiCmd;
	unsigned long m_uiSeq;
	NSString* m_nsConnIP;
	unsigned long m_uiTimeOut;
}
@property(assign, nonatomic) unsigned long m_uiTimeOut;
@property(retain, nonatomic) NSString* m_nsConnIP;
@property(assign, nonatomic) unsigned long m_uiSeq;
@property(assign, nonatomic) unsigned long m_uiCmd;
@property(assign, nonatomic) unsigned long m_uiErrorCode;
@property(retain, nonatomic) NSMutableData* m_dtBody;
@property(retain, nonatomic) NSMutableData* m_dtHead;
@property(assign, nonatomic) unsigned long m_uiDataLen;
@property(assign, nonatomic) unsigned short m_usHeaderLen;
@property(assign, nonatomic) unsigned short m_usPort;
@property(retain, nonatomic) NSString* m_nsHost;
@property(retain, nonatomic) NSData* m_dtHost;
@property(assign, nonatomic) BOOL m_bHost;
@property(assign, nonatomic) unsigned long m_uiRtyConnCount;
@property(assign, nonatomic) unsigned long m_uiRecvStatus;
@property(assign, nonatomic) unsigned long m_uiConnStatus;
@property(retain, nonatomic) AsyncSocket* m_oSock;
-(void)Clear;
-(void)ResetBuf;
-(void)dealloc;
-(id)init;
@end

@interface CNetWorkMgr : MMService <MMService> {
	NSRecursiveLock* m_oLock;
	NSMutableDictionary* m_dicShortSockList;
	NSMutableDictionary* m_dicShortSockDelList;
	CSockWrap* m_oLongSock;
	id<NotifyFromNetWorkDelegate> m_delLongConnNotify;
	id<NotifyFromNetWorkDelegate> m_delMainControl;
	NSMutableDictionary* m_dicLongAttachDelList;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapSeqSID;
	double m_dbConnTimeOut;
	unsigned long m_uiSendTag;
	unsigned long m_uiRecvTag;
	id<GetIPDelegate> m_delGetIP;
	NSThread* m_thLongConn;
	BOOL m_bNeedLongConn;
	BOOL m_bLongAuth;
	unsigned long m_uiNewSID;
	unsigned long m_uiSendBytes;
	unsigned long m_uiSendPackCount;
	unsigned long m_uiRecvBytes;
	unsigned long m_uiRecvPackCount;
}
@property(retain, nonatomic) NSThread* m_thLongConn;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)ResetShortChannels;
-(id)GetCurLongConnIP;
-(void)onShortFail;
-(void)onShortOK;
-(BOOL)IsLongConnConnected;
-(void)OnIPFailForLongConn;
-(void)OnIPOKForLongConn;
-(void)SetIPListFromAuth:(id)auth;
-(void)SetIPFail:(id)fail;
-(void)SetIPOK:(id)ipok;
-(id)GetIPFromHost:(id)host;
-(void)AddDownloadBytes:(unsigned long)bytes;
-(void)AddUploadBytes:(unsigned long)bytes;
-(void)GetFlowData:(unsigned*)data SendPackCount:(unsigned*)count RecvBytes:(unsigned*)bytes RecvPackCount:(unsigned*)count4;
-(void)onSocket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)onSocket:(id)socket didReadPartialDataOfLength:(unsigned)length tag:(long)tag;
-(void)onSocket:(id)socket didWriteDataWithTag:(long)tag;
-(void)onSocketDidDisconnect:(id)onSocket;
-(void)onSocket:(id)socket willDisconnectWithError:(id)error;
-(void)onSocket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)HandleRecvBody:(id)body Sock:(id)sock;
-(void)HandleRecvHeader:(id)header Sock:(id)sock;
-(void)HandleRecvLen:(id)len Sock:(id)sock;
-(unsigned long long)ParseHttpHeadResp:(id)resp;
-(void)Dispatch:(id)dispatch Message:(unsigned long)message MessageInfo:(id)info Seq:(unsigned long)seq;
-(void)Dispatch:(id)dispatch Message:(unsigned long)message MessageInfo:(id)info;
-(id)FindSock:(unsigned long)sock;
-(void)AsynSendData:(id)data;
-(void)ImplAsynSendData:(id)data;
-(BOOL)SendData:(id)data SID:(unsigned long)sid Header:(stMMHeader*)header NeedResp:(BOOL)resp;
-(BOOL)SendData:(id)data SID:(unsigned long)sid;
-(void)LongConnTimeOut;
-(void)CheckRecvTimeOut:(unsigned long)anOut;
-(void)DisConnect:(unsigned long)connect;
-(BOOL)ConnectToHost:(id)host SID:(unsigned long)sid TimeOut:(double)anOut;
-(BOOL)ConnectToHost:(id)host Port:(unsigned short)port SID:(unsigned long)sid;
-(void)DeleteSockWithSID:(unsigned long)sid;
-(BOOL)CreateSockWithSID:(unsigned long)sid Delegate:(id)delegate;
-(void)DetachFromLongWithSID:(unsigned long)sid;
-(BOOL)AttachToLongWithSID:(unsigned long)sid Delegate:(id)delegate NeedCreateLongConn:(BOOL)conn;
-(void)SetGetIPDelegate:(id)delegate;
-(unsigned long)GetNewSID;
-(unsigned long)GetNewSeq;
-(id)GetLongConnIP;
-(void)StopLongConn;
-(BOOL)GetLongAuth;
-(void)SetNeedLongConn:(BOOL)conn;
-(BOOL)GetNeedLongConn;
-(unsigned long)GetLongSockStatus;
-(void)SetMainControlDelegate:(id)delegate;
-(void)SetLongConnDelegate:(id)delegate;
-(void)Stop;
-(void)dealloc;
-(id)init;
@end

@interface CSendDataWrap : NSObject {
	NSData* m_dtSend;
	unsigned long m_uiSeq;
	unsigned long m_uiSID;
	BOOL m_bReturn;
}
@property(assign, nonatomic) BOOL m_bReturn;
@property(assign, nonatomic) unsigned long m_uiSID;
@property(assign, nonatomic) unsigned long m_uiSeq;
@property(retain, nonatomic) NSData* m_dtSend;
-(void)dealloc;
-(id)init;
@end

@interface PluginUtilMgr : MMService <MMService, IMMLanguageMgrExt> {
	NSDictionary* m_dicNameToType;
	NSArray* m_arrNames;
	NSArray* m_arrLocalizedNickNames;
	NSArray* m_arrOfficialNames;
	NSArray* m_arrLocalizedOfficialNickNames;
}
-(void)onLanguageChange;
-(void)refreshLocalizedName;
-(id)getWenxinAliasName;
-(id)getOfficialLocalizedNickNameWithType:(int)type;
-(id)getOfficialUserNameWithType:(int)type;
-(BOOL)hasOfficialExpectWeixinUserNmae:(id)nmae;
-(BOOL)hasOfficialUserName:(id)name;
-(id)getPluginLocalizedNickName:(int)name;
-(int)nameToPluginType:(id)pluginType;
-(id)pluginTypeToName:(int)name;
-(void)dealloc;
-(id)init;
-(void)initOfficialName;
-(void)initLocalizedOfficialName;
-(void)initLocalizedName;
@end

@interface PluginUtil : NSObject {
}
+(id)getWenxinAliasName;
+(id)getOfficialLocalizedNickNameWithType:(int)type;
+(id)getOfficialUserNameWithType:(int)type;
+(bool)isOfficialExpectWeixinUserNmae:(id)nmae;
+(bool)isOfficialExpectWeixinContact:(id)contact;
+(bool)isOfficialUserName:(id)name;
+(void)closePlugin:(int)plugin;
+(void)openPlugin:(int)plugin;
+(unsigned long)getAlbumPrivacyOption;
+(void)setAlbumPrivacyOption:(unsigned long)option;
+(unsigned long)clearLBSPluginData;
+(unsigned long)closePushMailPlugin;
+(unsigned long)openPushMailPlugin:(id)plugin;
+(unsigned long)opPushMailPlugin:(unsigned long)plugin pwd:(id)pwd;
+(BOOL)isPluginShow:(int)show;
+(void)switchSXPlugin:(BOOL)plugin;
+(void)newGenericFunctionSwitch:(unsigned long)aSwitch statusBit:(unsigned long)bit setOpen:(BOOL)open;
+(void)genericFunctionSwitch:(unsigned long)aSwitch statusBit:(unsigned long)bit setOpen:(BOOL)open;
+(bool)isPluginOpened:(int)opened;
+(bool)isOfficialContact:(id)contact;
+(id)getPluginLocalizedNickName:(int)name;
+(id)getPluginUserName:(int)name;
+(int)getPluginUserNameType:(id)type;
+(int)getPluginContactType:(id)type;
+(id)getPluginContact:(int)contact;
+(void)refreshLocalizedName;
+(bool)isPluginUserName:(id)name;
+(void)clearPluginData:(int)data;
+(void)unInstallPlugin:(int)plugin;
+(void)installPlugin:(int)plugin;
+(bool)isPluginInstalled:(int)installed;
+(unsigned long)pluginTypeToUnInstallBit:(int)unInstallBit;
@end

@interface CDownloadFile : NSObject {
	NSString* m_nsFileName;
	long long m_i64FileSize;
	stFileHeader m_stFileHeader;
	CBaseFile* m_oFile;
	unsigned long m_uiMode;
	BOOL m_bComplete;
	NSString* m_nsDownloadPath;
}
@property(retain, nonatomic) NSString* m_nsDownloadPath;
@property(retain, nonatomic) NSString* m_nsFileName;
+(long long)GetFileSize:(id)size;
-(id).cxx_construct;
-(BOOL)DumpHeader;
-(BOOL)ReadHeader;
-(BOOL)DoComplete;
-(BOOL)InitDownloadFile;
-(BOOL)WriteData:(id)data Offset:(long long)offset;
-(BOOL)ReadData:(id)data Length:(unsigned long)length Offset:(long long)offset;
-(unsigned long)GetRealFileSize;
-(unsigned long)GetDownloadSize;
-(BOOL)IsComplete;
-(void)Close;
-(BOOL)Open;
-(void)SetDownloadInfo:(long long)info FileName:(id)name Mode:(unsigned long)mode;
-(BOOL)IsOpen;
-(void)dealloc;
-(id)init;
@end

@interface FavRecordUtil : NSObject {
}
@end

@interface EmojiEmoticonChangeMgr : MMService <MMService> {
	map<unsigned long long, tagEmojiItem *, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, tagEmojiItem *> > > m_mapEmojiChangeFromSoftbankToUnified;
	map<unsigned long long, tagEmojiItem *, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, tagEmojiItem *> > > m_mapEmojiChangeFromUnifiedToSoftbank;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(unsigned long)countEmojiFromSoftbank:(id)softbank;
-(BOOL)stringContainsUnifiedEmoji:(id)emoji;
-(unsigned long)countEmojiFromUnified:(id)unified;
-(id)changeEmojiFromUnifiedToSoftbank:(id)softbank;
-(id)changeEmojiFromSoftbankToUnified:(id)unified;
-(void)dealloc;
-(id)init;
@end

@interface MMKernelUtil : NSObject {
}
+(BOOL)IsFBFriend:(id)aFriend;
+(BOOL)IsBottleContact:(id)contact;
+(BOOL)IsQQContact:(id)contact;
+(BOOL)IsSXContact:(id)contact;
+(BOOL)IsGroupCard:(id)card;
+(BOOL)IsLbsRoom:(id)room;
+(BOOL)IsChatRoom:(id)room;
+(BOOL)IsEncodeUserName:(id)name;
@end

@interface WCPayOverseasCardTipView : MMUIView <ILinkEventExt, MMWebViewDelegate> {
	UIImageView* _backgroundView;
	UIButton* _selectBtn;
	UIButton* _cancelButton;
	MMWebViewController* _webView;
	MMDelegateProxy<WCPayOverseasCarTipDelegate>* m_tipViewDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCPayOverseasCarTipDelegate>* m_tipViewDelegate;
-(void)dealloc;
-(id)genBackgroundView;
-(void)initBottomView;
-(void)initTextView;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)onConfirm;
-(void)onCancel;
-(void)webViewReturn:(id)aReturn;
-(void)onSelect;
-(void)initView;
-(id)initWithFrame:(CGRect)frame;
@end

@interface ResourceInfo : NSObject {
	float _virtualMemorySize;
	float _residentMemorySize;
	long long _currentCap;
	float _cpuUsage;
}
@property(assign, nonatomic) float _cpuUsage;
@property(assign, nonatomic) long long _currentCap;
@property(assign, nonatomic) float residentMemorySize;
@property(assign, nonatomic) float virtualMemorySize;
-(void)dealloc;
-(id)init;
@end

@interface ResourceMonitor : MMObject {
	MMDelegateProxy<ResourceMonitorDelegate>* _delegate;
	NSThread* _monitorThread;
	NSRecursiveLock* _lock;
	BOOL _monitoring;
	int m_nCnt;
}
@property(assign, nonatomic) MMDelegateProxy<ResourceMonitorDelegate>* delegate;
-(void)dealloc;
-(id)init;
-(void)startService;
-(void)threadFunc;
-(void)updateResourceInfo:(id)info;
-(void)stopService;
@end

@interface SystemUASetter : UIWebView <UIWebViewDelegate> {
}
-(void)startSetDefaultUserAgent;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CUtility : NSObject {
}
+(id)GetTelephonyNetWorkCountryCode;
+(id)GetEmoticonLinkPid:(id)pid;
+(id)snapshotForUIView:(id)uiview;
+(id)GetKeyValueFromPB:(id)pb;
+(id)filterAllWhiteSpaceAndNewLineString:(id)string;
+(id)filterWhiteSpaceAndNewLineString:(id)string;
+(id)filterString:(id)string;
+(id)trimString:(id)string;
+(id)GetExcutablePath;
+(void)ClearAllWebViewCookies;
+(void)SetDefaultUserAgent;
+(id)GetUserAgentSuffix;
+(int)imageTypeForImageData:(id)imageData;
+(void)ReportFailIPToNewDNS:(id)newDNS;
+(id)DoNewDns:(id)dns;
+(id)DoDns:(id)dns;
+(BOOL)isGIFFile:(id)file;
+(long)DecodePack:(id)pack Output:(id)output DESKey:(char*)key KeyLen:(unsigned long)len;
+(id)SafeUnarchiveFromData:(id)data;
+(id)SafeUnarchive:(id)unarchive;
+(XXStruct_zYrK5D)MakeLocationCoordinate2D:(double)d andLongitude:(double)longitude;
+(id)getStringFromUrl:(id)url needle:(id)needle;
+(id)getDomainName:(id)name;
+(id)ReplaceClientVersion:(id)version;
+(id)GetMimeTypeByFileExt:(id)ext;
+(id)UTF8HexToNSString:(id)nsstring;
+(id)NSStringToUTF8Hex:(id)utf8Hex;
+(BOOL)IsFacebookAuthName:(id)name;
+(id)SafeUtf8WithCString:(const char*)cstring;
+(BOOL)CheckSyncMediaNote:(id)note;
+(id)componentsSeparated:(id)separated byString:(id)string;
+(id)getCurSystemLanguage;
+(id)getSystemTimeZoneString;
+(BOOL)IsURLFromAppStore:(id)appStore;
+(unsigned long)getRegSrcVersionNum;
+(id)stringOfFriendlySizeForApple:(double)apple maxFractionDigits:(unsigned)digits;
+(id)stringOfFriendlySize:(double)friendlySize maxFractionDigits:(unsigned)digits;
+(id)SyncBufferToString:(id)string;
+(id)MergeSyncBuffer:(id)buffer NewBuffer:(id)buffer2;
+(id)IntToIPString:(unsigned long)ipstring;
+(unsigned long)IPStringToInt:(id)int;
+(BOOL)NeedNewSync:(unsigned long)sync;
+(unsigned long long)genCurrentTimeInMs;
+(unsigned long)genCurrentTime;
+(unsigned long)ChatNotifyC2S:(unsigned long)s;
+(unsigned long)ChatNotifyS2C:(unsigned long)c;
+(BOOL)HasDomainLink:(id)link;
+(BOOL)HasEmail:(id)email;
+(BOOL)HasLink:(id)link;
+(unsigned long)CheckUsrNameType:(id)type;
+(id)ReplaceSingleQuote:(id)quote;
+(id)ReplaceInvalidChar:(id)aChar;
+(void)AddLog:(id)log;
+(id)ParseFullVersionString:(unsigned long)string;
+(id)ParseVersionString:(unsigned long)string;
+(void)ParseVersion:(unsigned long)version Major:(unsigned*)major Minor:(unsigned*)minor Minorex:(unsigned*)minorex;
+(unsigned long)GetVersion;
+(id)DecodeWithBase64:(id)base64;
+(id)EncodeWithBase64:(id)base64;
+(id)DecodeBase64:(id)a64;
+(id)NsDataEncodeBase64:(id)a64;
+(id)EncodeBase64:(id)a64;
+(id)GetSystemCachePath;
+(id)GetLibraryCachePath;
+(id)GetTmpPath;
+(id)GetDocPath;
+(id)GetPathOfURLCache;
+(id)GetPathOfTempEmoticon:(id)tempEmoticon;
+(id)GetDownloadPathOfEmoticonPackage:(id)emoticonPackage;
+(id)GetThumbPathOfEmoticon:(id)emoticon;
+(id)GetPathOfEmoticon:(id)emoticon;
+(id)GetPathOfTempPackage:(id)tempPackage;
+(id)GetThumbPathOfPackage:(id)package;
+(id)GetPathOfPackage:(id)package;
+(id)GetPathOfTempCacheVideo;
+(id)GetClientIDOfMsg:(id)msg LocalID:(unsigned long)anId Time:(unsigned long)time;
+(id)GetPathOfMesVideoDir:(id)mesVideoDir;
+(id)GetPathOfMesVideoThumb:(id)mesVideoThumb LocalID:(unsigned long)anId DocPath:(id)path;
+(id)GetPathOfMesVideo:(id)mesVideo LocalID:(unsigned long)anId DocPath:(id)path;
+(id)GetPathOfMesVideoDir:(id)mesVideoDir DocPath:(id)path;
+(id)GetPathOfMesAudioDir:(id)mesAudioDir;
+(id)GetPathOfMesAudio:(id)mesAudio LocalID:(unsigned long)anId DocPath:(id)path;
+(id)GetPathOfMesAudioDir:(id)mesAudioDir DocPath:(id)path;
+(id)GetPathOfMesImgDir:(id)mesImgDir;
+(id)GetPathOfDraftUsrDir;
+(id)GetPathOfMesHDImgTemp:(id)mesHDImgTemp LocalID:(unsigned long)anId DocPath:(id)path;
+(id)GetPathOfMesImgTemp:(id)mesImgTemp LocalID:(unsigned long)anId DocPath:(id)path;
+(id)GetPathOfMesImgThumb:(id)mesImgThumb LocalID:(unsigned long)anId DocPath:(id)path;
+(id)GetPathOfMesHDImg:(id)mesHDImg LocalID:(unsigned long)anId DocPath:(id)path;
+(id)GetPathOfMesImg:(id)mesImg LocalID:(unsigned long)anId DocPath:(id)path;
+(id)GetPathOfMesImgDir:(id)mesImgDir DocPath:(id)path;
+(id)GetPathOfProductItem:(id)productItem;
+(id)GetPathOfProductDetail;
+(id)GetPathOfShakeBkgUp;
+(id)GetPathOfShakeTvStorage;
+(id)GetPathOfShakeTvStoragePB;
+(id)GetPathOfShakeMusicStorage;
+(id)GetPathOfShakeMusicStoragePB;
+(id)GetPathOfShakeShareStorage;
+(id)GetPathOfShakePageStoragePB;
+(id)GetPathOfShakePageStorage;
+(id)GetPathOfSHakePeopleStorage;
+(id)GetPathOfShakePeopleStoragePB;
+(id)GetUserAlbumRootDir;
+(id)GetRandomPathOfTrash;
+(id)GetRootPathOfTrash;
+(id)GetPathOfWCPayBaseFile;
+(id)GetPathOfWCMallBaseFile;
+(id)GetPathOfWCAddressBaseFile;
+(id)GetPathOfBakChat;
+(id)GetPathOfShakeBgImg;
+(id)GetPathOfShakeBgImgTmp:(unsigned long)shakeBgImgTmp;
+(id)GetPathOfUsrShakeImg:(id)usrShakeImg;
+(id)GetPathOfCacheLocalUsrDir;
+(id)GetPathOfLocalUsrDir;
+(id)GetPathOfLocalUsrDirAsync;
+(id)GetPathOfUsrWCBKSetting;
+(id)GetPathOfUsrChatBKSetting;
+(basic_string<char, std::char_traits<char>, std::allocator<char> >)GetMd5StrOfUsr:(id)usr;
+(basic_string<char, std::char_traits<char>, std::allocator<char> >)GetMd5StrOfLocalUsr;
+(void)SetLocalUsrNameMD5:(id)a5;
+(id)GetHttpEndData;
+(char*)NewStrFromNSStr:(id)nsstr;
+(id)GetRandomMD5;
+(unsigned long)GenID;
+(int)GetNetWorkReachable;
+(id)GetRandomKeyWithSalt:(id)salt;
+(id)GetRandomKey;
+(id)GetRandomUUID;
+(void)Initial;
+(id)GetUUIDNew;
+(BOOL)SetDoNotBackupForPath:(id)path;
+(id)hashForString:(id)string;
+(id)hashPathForString:(id)string;
@end

@interface CKVCommReportLogic : MMService <MMService, PBMessageObserverDelegate> {
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)ReportData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface ActionRecognition : NSObject <UIAccelerometerDelegate> {
	CMMotionManager* mMotionMgr;
	float mGFactor;
	BOOL mIsCloseToEarRecognEnabled;
	BOOL mStartProximityState;
	BOOL mIsCloseToEar;
	BOOL mIsShakeRecognEnabled;
	id<NSObject, ActionRecognitionDelegate> delegate;
}
@property(assign, nonatomic) id<NSObject, ActionRecognitionDelegate> delegate;
-(void)unregisterNotify;
-(void)registerNotify;
-(void)proximityChange:(id)change;
-(void)disableProximity;
-(void)enableProximity;
-(void)closeToEarRecognByX:(double)earRecognByX Y:(double)y Z:(double)z;
-(BOOL)isShakeRecogning;
-(void)stopShakeRecogn;
-(void)startShakeRecognByFactor:(float)factor;
-(BOOL)isCloseToEarRecogning;
-(void)stopCloseToEarRecogn;
-(void)startCloseToEarRecogn;
-(void)dealloc;
-(id)init;
-(void)accelerometer:(id)accelerometer didAccelerate:(id)accelerate;
@end

@interface RemoteControlCheck : MMService <ActionRecognitionDelegate, MMService> {
	BOOL mIsCondRecordCheck;
	BOOL mIsForceRecordCheck;
	BOOL mIsRecordCheckEnabled;
	BOOL mIsRecordMayStart;
	BOOL mIsPlayCheckEnabled;
	BOOL mIsPlayMayStart;
	ActionRecognition* mActionRecogn;
}
-(void)HandleRemoteControlEvent:(id)event;
-(BOOL)isPlayChecking;
-(void)stopPlayCheck;
-(void)startPlayCheck;
-(BOOL)isRecordChecking;
-(void)stopRecordCheck;
-(void)startRecordCheck;
-(void)stopRecordCheckIfOpenRC;
-(void)startRecordCheckIfOpenRC;
-(void)dealloc;
-(id)init;
-(BOOL)IsSoundPlaying;
-(BOOL)IsOpenRemoteControl;
-(void)unregisterNotify;
-(void)registerNotify;
-(void)endReceiveRemoteControlEvent:(unsigned long)event;
-(void)realEndReceiveRemoteControlEvent;
-(void)beginReceiveRemoteControlEvent:(unsigned long)event;
-(void)realBeginReceiveRemoteControlEvent;
-(void)plugin_off;
-(void)plugin_on;
-(BOOL)CanRecord;
-(void)ActionRecognitionShake;
@end

@interface SysCallCheck : MMService <MMService, JSEventExt, AVAudioSessionDelegate> {
	BOOL mIsNeedRestartAudioTalk;
	CTCallCenter* mCallCenter;
	unsigned long mCallState;
}
@property(assign, nonatomic) BOOL mIsNeedRestartAudioTalk;
@property(assign, nonatomic) unsigned long mCallState;
@property(retain, nonatomic) CTCallCenter* mCallCenter;
-(void)jsVideoStateChanged:(id)changed;
-(void)jsAudioStateChanged:(id)changed;
-(void)OnMediaPlayStateChanged:(id)changed;
-(void)onServiceClearData;
-(BOOL)isPhoneCalling;
-(void)stopCheck;
-(void)startCheck;
-(void)inputIsAvailableChanged:(BOOL)changed;
-(void)endInterruption;
-(void)beginInterruption;
-(void)playEnd;
-(void)playBegin;
-(void)callEnd;
-(void)callBegin;
-(void)swithAudioRoute;
-(void)appBecomeActive;
-(void)delayRestartTalk;
-(void)restartTalk;
-(void)pauseTalk;
@end

@interface AUAudioDevice : MMService <MMService> {
	struct {
		OpaqueAudioComponentInstance* ioUnit;
		AudioStreamBasicDescription inputDataFormat;
		AudioStreamBasicDescription outputDataFormat;
		id<AUAudioDataSource> recordDS;
		id<AUAudioDataSource> playDS;
		unsigned volumeFactor;
		bool isRunning;
	} mAUState;
	int mWillWorkMode;
	int mWorkMode;
	int mInSamplerate;
	int mInChannels;
	int mInFrameSize;
	int mOutChannels;
	int mOutSamplerate;
	int mOutFrameSize;
	char* pRecBuff;
	int mRBLeft;
	char* pPlayBuff;
	int mPBLeft;
	bool bMicrophoneMute;
	bool bSpeakerphone;
	bool bEnableProximity;
	NSString* mOutFromName;
	PCMAudioFile* mOutPCMFile;
	BOOL mIsNeedRestartAudioTalk;
	BOOL mHasiOS7UsedVoip;
	NSTimer* mMeterTimer;
	id<AUAudioDataSource> dataSource;
}
@property(retain, nonatomic) NSTimer* mMeterTimer;
@property(assign, nonatomic) BOOL needRestartAudioTalk;
@property(assign, nonatomic) int workMode;
@property(assign, nonatomic) id<AUAudioDataSource> dataSource;
-(id).cxx_construct;
-(BOOL)isVoIPPlaying;
-(BOOL)isAudioRecording;
-(BOOL)isAudioPlaying;
-(BOOL)isRunning;
-(void)StopForVoIP;
-(void)StopAndNotifyUIPause;
-(void)StopAndNotifyUIStop;
-(void)Stop;
-(void)RestartTalkAndNotifyUIRestart;
-(BOOL)Restart;
-(BOOL)StartRecordAndPlayForVoIP;
-(BOOL)StartPlay;
-(BOOL)StartRecord;
-(void)setCaptureToFileFrom:(id)from;
-(void)UnPluginHeadset;
-(void)PluginHeadset;
-(void)disableProximity;
-(void)enableProximity;
-(void)proximityChange:(id)change;
-(void)setVolumeFactor:(unsigned long)factor;
-(void)setSpeakerphone:(bool)speakerphone;
-(void)setMicrophoneMute:(bool)mute;
-(int)setPlayDataFormat:(int)format Channels:(int)channels Duration:(int)duration;
-(int)setRecDataFormat:(int)format Channels:(int)channels Duration:(int)duration;
-(void)dealloc;
-(id)init;
-(void)delayRestartTalk;
-(void)restartTalk;
-(void)pauseTalk;
-(void)enterBackground;
-(void)enterForeground;
-(void)killWeiXin;
-(void)StopSession;
-(BOOL)StartSessionWithWorkMode:(int)workMode;
-(void)TimerCheckMeter;
-(void)SetOutputCallback:(OpaqueAudioComponentInstance*)callback;
-(void)SetInputCallback:(OpaqueAudioComponentInstance*)callback;
-(void)SetOutputDataFormat:(OpaqueAudioComponentInstance*)format;
-(void)SetInputDataFormat:(OpaqueAudioComponentInstance*)format;
-(void)SetDataFormat:(AudioStreamBasicDescription*)format SampleRate:(int)rate ChannelPerFrame:(int)frame;
-(void)SetOutputIOEnable:(OpaqueAudioComponentInstance*)enable enabled:(BOOL)enabled;
-(void)SetInputIOEnable:(OpaqueAudioComponentInstance*)enable enabled:(BOOL)enabled;
-(void)CloseVoiceAGC:(OpaqueAudioComponentInstance*)agc;
-(void)CloseVoiceProcess:(OpaqueAudioComponentInstance*)process;
-(void)OpenVoiceProcess:(OpaqueAudioComponentInstance*)process;
@end

@interface PCMAudioFile : NSObject {
	AudioStreamBasicDescription mDataFormat;
	OpaqueAudioFileID* mAudioFile;
	NSString* mFileName;
	unsigned long mCurrentPacket;
}
-(id).cxx_construct;
-(BOOL)copyForName:(id)name;
-(BOOL)writeBytes:(void*)bytes len:(unsigned long)len;
-(BOOL)openByName:(id)name;
-(void)setDataFormat:(AudioStreamBasicDescription)format;
-(void)dealloc;
-(id)init;
-(void)createAudioFile_WAVE:(id)wave;
@end

@interface AudioFile : NSObject {
	NSFileHandle* m_fhFile;
	unsigned long m_uiDataWrited;
}
-(BOOL)writeBytes:(unsigned long)bytes len:(unsigned long)len buffer:(void*)buffer;
-(BOOL)readBytes:(unsigned long)bytes len:(unsigned*)len buffer:(void*)buffer;
-(unsigned long)getLength;
-(unsigned long)seekToEnd;
-(void)close;
-(BOOL)open:(id)open;
-(BOOL)create:(id)create;
-(void)dealloc;
-(id)init;
@end

@interface AVAudioPlayWraper : MMService <MMService, AVAudioPlayerDelegate> {
	AVAudioPlayer* audioPlayer;
}
-(void)playWithPath:(id)path;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
-(void)dealloc;
-(id)init;
@end

@interface AudioHelper : NSObject {
}
+(void)showRecordDenied;
+(void)playSendMsgNotify;
+(void)playNewMsgNotifyInMessageContent;
+(void)playNewMsgNotify;
+(void)playVibration;
+(void)AVPlaySystemSound:(id)sound FileType:(id)type Ambient:(BOOL)ambient;
+(void)PlaySystemSound:(id)sound FileType:(id)type Ambient:(BOOL)ambient;
+(void)RestartAudioTalk;
+(BOOL)PauseAudioTalk;
+(void)StopAudioTalk;
+(BOOL)IsAudioTalkRecording;
+(BOOL)IsAudioTalkPlaying;
+(void)NextMusic;
+(void)RestartMusic;
+(BOOL)PauseMusic;
+(void)StopMusic;
+(BOOL)IsMusicPaused;
+(BOOL)IsMusicPlaying;
+(void)StopAudio;
+(BOOL)IsWeiXinSoundPaused;
+(BOOL)IsWeiXinSoundPlaying;
@end

@interface AMRAudioPlayer : BaseAudioPlayer {
	BOOL mIsNeedRestartMusic;
	BOOL mIsNeedRestartAudioTalk;
}
@property(assign, nonatomic) BOOL needRestartAudioTalk;
@property(assign, nonatomic) BOOL needRestartMusic;
-(void)autostop;
-(void)stop;
-(void)replay;
-(void)play;
-(BOOL)preparePlayWithAMRFile:(id)amrfile;
-(void)setDelegate:(id)delegate;
-(void)prepareBuffers;
-(void)setDataFormat;
-(void)openAMRFile:(id)file;
@end

@interface AQAudioPlayer : BaseAudioPlayer {
	BOOL mIsBindMuteSwitch;
	BOOL mIsNeedRestartMusic;
	BOOL mIsNeedRestartAudioTalk;
	NSString* mCachedTag;
}
@property(retain, nonatomic) NSString* mCachedTag;
@property(assign, nonatomic) BOOL needRestartAudioTalk;
@property(assign, nonatomic) BOOL needRestartMusic;
-(void)autostop;
-(void)stop;
-(void)replay;
-(void)play;
-(BOOL)preparePlayWithAudioFile:(id)audioFile cachedForTag:(id)tag;
-(void)setBindMuteSwitch:(BOOL)aSwitch;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
-(void)prepareBuffers;
-(void)setMagicCookieForPlayBack;
-(void)setDataFormat;
-(void)openAudioFile:(id)file;
@end

@interface AudioPlayerUserData : NSObject {
	unsigned long audioid;
}
@property(assign) unsigned long audioid;
@end

@interface BaseAudioPlayer : MMService <ActionRecognitionDelegate, MMService> {
	PlayerState* mAqData;
	BOOL mIsNeedNotifyOtherAudio;
	AudioPlayerUserData* mUserData;
	NSTimer* mMeterTimer;
	ActionRecognition* mActionRecogn;
}
@property(retain, nonatomic) ActionRecognition* mActionRecogn;
@property(retain, nonatomic) NSTimer* mMeterTimer;
@property(retain) AudioPlayerUserData* mUserData;
@property(assign, nonatomic) BOOL needNotifyOtherAudio;
-(void)setUserData:(id)data;
-(BOOL)isPlaying;
-(void)forceNotifyOtherAudioPlay;
-(void)stopAndNotifyUI;
-(void)autostop;
-(void)stop;
-(void)EndNotifyOnMainThread;
-(void)replay;
-(void)restart;
-(void)pause;
-(void)play;
-(void)BeginNotifyOnMainThread:(id)thread;
-(void)setAutoMode;
-(void)setEarpieceMode;
-(void)setSpeakerMode;
-(void)updateStatus;
-(void)updateSetting;
-(BOOL)initQueue;
-(void)initSession;
-(void)unopenMonitorDetection;
-(void)openMonitorDetection;
-(void)disableProximity;
-(void)enableProximity;
-(void)dealloc;
-(id)init;
-(void)ActionRecognitionProximityChange;
-(void)unregisterInter;
-(void)registerInter;
-(void)handleInterruption;
-(void)TimerCheckMeter;
@end

@interface SPXAudioPlayer : BaseAudioPlayer {
	BOOL mIsNeedRestartMusic;
	BOOL mIsNeedRestartAudioTalk;
}
@property(assign, nonatomic) BOOL needRestartAudioTalk;
@property(assign, nonatomic) BOOL needRestartMusic;
-(void)autostop;
-(void)stop;
-(void)replay;
-(void)play;
-(BOOL)preparePlayWithSPXFile:(id)spxfile;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
-(void)prepareBuffers;
-(void)setDataFormat;
-(void)openSPXFile:(id)file;
@end

@interface AMRAudioRecorder : BaseAudioRecorder {
	NSRecursiveLock* mPrepareSentLock;
	BOOL mIsPrepareSent;
	BOOL mIsNeedRestartMusic;
	BOOL mIsNeedRestartAudioTalk;
}
@property(assign, nonatomic) BOOL needRestartAudioTalk;
@property(assign, nonatomic) BOOL needRestartMusic;
-(void)stop;
-(void)record;
-(BOOL)prepareSend;
-(void)createAMRFile:(id)file;
-(BOOL)prepareRecord;
-(void)setDelegate:(id)delegate;
-(void)MainThreadStopRecord;
-(void)dealloc;
-(id)init;
-(void)prepareBuffers;
-(void)setDataFormat;
@end

@interface AQAudioRecorder : BaseAudioRecorder {
	BOOL mIsNeedRestartMusic;
	BOOL mIsNeedRestartAudioTalk;
}
@property(assign, nonatomic) BOOL needRestartAudioTalk;
@property(assign, nonatomic) BOOL needRestartMusic;
-(void)autostop;
-(void)stop;
-(void)record;
-(BOOL)prepareRecordWithiLBCFile:(id)file;
-(BOOL)prepareRecordWithPCMFile:(id)pcmfile;
-(void)getAudioFingerPrintData:(char*)data Length:(int*)length UserData:(id*)data3;
-(void)extractAudioFingerPrintData:(char*)data Length:(int)length;
-(void)createQAFPFile:(id)file;
-(void)createWaveFile:(id)file;
-(BOOL)prepareRecordForQAFP;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
-(void)setMagicCookieToAudioFile:(OpaqueAudioFileID*)audioFile;
-(void)prepareBuffers;
-(void)setDataFormat_PCM;
-(void)createAudioFile_WAVE:(id)wave Fd:(OpaqueAudioFileID**)fd;
-(void)setDataFormat_iLBC;
-(void)createAudioFile_CAF:(id)caf;
@end

@interface AudioRecorderUserData : NSObject {
	NSString* fromusr;
	NSString* tousr;
	NSString* chatname;
	unsigned long createtime;
	unsigned long audioid;
	NSString* msgSource;
}
@property(copy) NSString* msgSource;
@property(assign) unsigned long audioid;
@property(assign) unsigned long createtime;
@property(retain) NSString* chatname;
@property(retain) NSString* tousr;
@property(retain) NSString* fromusr;
-(void)dealloc;
@end

@interface BaseAudioRecorder : MMService <MMService> {
	RecorderState* mAqData;
	BOOL mIsNeedNotifyOtherAudio;
	AudioRecorderUserData* mUserData;
	NSTimer* mMeterTimer;
}
@property(retain, nonatomic) NSTimer* mMeterTimer;
@property(retain) AudioRecorderUserData* mUserData;
@property(assign, nonatomic) BOOL needNotifyOtherAudio;
-(void)RecordPrepareDenied;
-(void)setBeginSendData;
-(void)setForceDelete;
-(void)setUserData:(id)data;
-(long)RecordingTime;
-(unsigned long)RecordStatus;
-(BOOL)isRecording;
-(void)autostop;
-(void)stop;
-(void)EndNotifyOnMainThread;
-(void)record;
-(void)real_record;
-(void)BeginNotifyOnMainThread:(id)thread;
-(void)setStopping;
-(void)setStartRecordTime;
-(void)updateStatus;
-(void)updateSetting;
-(BOOL)initQueue;
-(void)initSession;
-(void)dealloc;
-(id)init;
-(void)unregisterInter;
-(void)registerInter;
-(void)TimerCheckMeter;
@end

@interface SPXAudioRecorder : BaseAudioRecorder <AQAudioPlayerDelegate> {
	NSRecursiveLock* mPrepareSentLock;
	BOOL mIsPrepareSent;
	int mSlientTime;
	BOOL mIsNeedRestartMusic;
	BOOL mIsNeedRestartAudioTalk;
}
@property(assign, nonatomic) BOOL needRestartAudioTalk;
@property(assign, nonatomic) BOOL needRestartMusic;
-(void)autostop;
-(void)stop;
-(void)record;
-(void)playEndTipAudio;
-(void)playBeginTipAudio;
-(BOOL)prepareSend;
-(void)createSpeexFile:(id)file;
-(void)createWaveFile:(id)file;
-(BOOL)prepareRecord:(BOOL)record cache:(BOOL)cache;
-(void)setSlientTime:(int)time;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
-(void)setMagicCookieToAudioFile;
-(void)createAudioFile_WAVE:(id)wave;
-(void)prepareBuffers;
-(void)setDataFormat;
-(void)OnAQEndPlaying:(id)playing;
@end

@interface ChatRoomMemberGridView : MMUIView <NewChatRoomMemberItemViewDelegate> {
	CContact* m_chatRoomContact;
	BOOL m_editable;
	BOOL m_isExpanded;
	unsigned long m_showStartRow;
	unsigned long m_showEndRow;
	NSMutableArray* m_arrMemberList;
	NSMutableDictionary* m_dicMemberView;
	BOOL m_bDeleteStatus;
	NSArray* m_talkList;
	MMDelegateProxy<ChatRoomMemberGridViewDelegate>* m_delegate;
}
@property(assign, nonatomic) BOOL expand;
@property(retain, nonatomic) MMDelegateProxy<ChatRoomMemberGridViewDelegate>* delegate;
@property(readonly, assign, nonatomic) BOOL deleteStatus;
@property(assign, nonatomic) BOOL editable;
@property(retain, nonatomic) CContact* chatRoomContact;
-(void)onShowRemoveMember;
-(void)onShowMoreMember;
-(void)setShowRemoveMember;
-(void)onDeleteMember:(id)member;
-(void)onAddMember:(id)member;
-(void)openContactInfo:(id)info;
-(void)updateToDeleteStatus;
-(void)updateToNormalStatus;
-(void)showExtendBtn:(CGRect)btn;
-(void)setMemberList:(id)list withWXTalkListL:(id)wxtalkListL;
-(void)reflashCellsWithTalkList:(id)talkList;
-(void)reflashExpandedCellsWithTalkList:(id)talkList;
-(int)cacGridTotleHeight:(int)height;
-(int)getEditCellCount:(int)count;
-(id)genMemberCell:(id)cell atIndex:(unsigned long)index;
-(void)setShowBoardHeight:(unsigned long)height andStartAt:(unsigned long)at;
-(void)reloadMember:(id)member;
-(void)extendMemberList;
-(void)onChat:(id)chat;
-(void)setWXTalkRoomFlag:(id)flag TalkRoomMemberList:(id)list ItemUsername:(id)username;
-(void)dealloc;
-(id)initWithChatRoom:(id)chatRoom andWidth:(float)width;
@end

@interface BCDEncoding : NSObject {
}
+(unsigned)mycharTo4Bits:(unsigned char)a4Bits;
+(id)dataFromHexString:(id)hexString;
+(id)hexStringFromData:(id)data;
@end

@interface MMAudioDataPipe : NSObject {
	NSRecursiveLock* m_lock;
	id<MMAudioDataReadStreamDelegate> m_readDelegate;
	id<MMAudioDataWriteStreamDelegate> m_writeDelegate;
	CFReadStreamRef m_readStream;
	CFWriteStreamRef m_writeStream;
	NSDictionary* m_streamProperties;
	NSMutableArray* m_dataQueue;
	int m_readOffset;
	int m_writeOffset;
}
@property(retain, nonatomic) NSMutableArray* m_dataQueue;
@property(retain, nonatomic) NSDictionary* m_streamProperties;
-(void)resetStream;
-(BOOL)seekToPosition:(int)position;
-(int)read:(void*)read size:(int)size;
-(void)dataErrorWithCode:(int)code;
-(BOOL)hasBytesAvailable;
-(void)closeStream;
-(BOOL)openReadStream;
-(id)copyStreamProperties;
-(void)handleReadFromCFStream:(CFReadStreamRef)cfstream eventType:(unsigned long)type;
-(void)handleWriteFromCFStream:(CFWriteStreamRef)cfstream eventType:(unsigned long)type;
-(int)getWriteOffset;
-(int)getReadOffset;
-(void)appendEOF;
-(void)stopWithError;
-(void)pumpQueueDataToWriteStream;
-(void)appendBuffer:(id)buffer;
-(void)setProperties:(id)properties;
-(void)setWriteDelegate:(id)delegate;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface MMAudioStreamPlayer : NSObject <MMAudioDataReadStreamDelegate> {
	MMAudioDataPipe* m_dataPipe;
	OpaqueAudioQueue* audioQueue;
	OpaqueAudioFileStreamID* audioFileStream;
	AudioStreamBasicDescription asbd;
	NSThread* internalThread;
	AudioQueueBuffer* audioQueueBuffer[16];
	AudioStreamPacketDescription packetDescs[512];
	unsigned fillBufferIndex;
	unsigned long packetBufferSize;
	unsigned long bytesFilled;
	unsigned long packetsFilled;
	bool inuse[16];
	int buffersUsed;
	int state;
	int stopReason;
	int errorCode;
	long err;
	bool discontinuous;
	opaque_pthread_mutex_t queueBuffersMutex;
	opaque_pthread_cond_t queueBufferReadyCondition;
	NSNotificationCenter* notificationCenter;
	unsigned long bitRate;
	int dataOffset;
	int fileLength;
	unsigned long long audioDataByteCount;
	unsigned long long processedPacketsCount;
	unsigned long long processedPacketsSizeTotal;
	double seekTime;
	BOOL seekWasRequested;
	double requestedSeekTime;
	double sampleRate;
	double packetDuration;
	double lastProgress;
	BOOL pausedByInterruption;
	NSDictionary* streamProperties;
}
@property(readonly, assign) NSDictionary* streamProperties;
@property(assign) unsigned long bitRate;
@property(readonly, assign) double duration;
@property(readonly, assign) double progress;
@property(assign) int state;
@property(assign) int errorCode;
+(unsigned long)hintForFileExtension:(id)fileExtension;
+(id)stringForErrorCode:(int)errorCode;
-(void)handleInterruptionChangeToState:(unsigned long)state;
-(void)handlePropertyChangeForQueue:(OpaqueAudioQueue*)queue propertyID:(unsigned long)anId;
-(void)handleBufferCompleteForQueue:(OpaqueAudioQueue*)queue buffer:(AudioQueueBuffer*)buffer;
-(void)handleAudioPackets:(const void*)packets numberBytes:(unsigned long)bytes numberPackets:(unsigned long)packets3 packetDescriptions:(AudioStreamPacketDescription*)descriptions;
-(void)handlePropertyChangeForFileStream:(OpaqueAudioFileStreamID*)fileStream fileStreamPropertyID:(unsigned long)anId ioFlags:(unsigned*)flags;
-(void)createQueue;
-(void)enqueueBuffer;
-(void)handleReadFromStream:(id)stream eventType:(unsigned long)type;
-(OpaqueAudioQueue*)getAudioQueue;
-(void)stop;
-(void)pause;
-(double)calculatedBitRate;
-(void)seekToTime:(double)time;
-(void)internalSeekToTime:(double)time;
-(void)start;
-(void)startInternal;
-(BOOL)isIdle;
-(BOOL)isPaused;
-(BOOL)isPlaying;
-(BOOL)isWaiting;
-(void)mainThreadStateNotification;
-(void)failWithErrorCode:(int)errorCode;
-(void)presentAlertWithTitle:(id)title message:(id)message;
-(void)onHandleReadEventfromStream:(id)stream eventType:(unsigned long)type;
-(BOOL)runLoopShouldExit;
-(BOOL)isFinishing;
-(void)dealloc;
-(id)initWithDataPipe:(id)dataPipe;
@end

@interface MMMusicItem : NSObject {
	NSString* key;
	NSString* title;
	NSString* photourl;
	NSString* musicurl;
	unsigned long musicstatus;
}
@property(assign, nonatomic) unsigned long musicstatus;
@property(retain, nonatomic) NSString* musicurl;
@property(retain, nonatomic) NSString* photourl;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* key;
-(void)dealloc;
@end

@interface MMMusicList : NSObject {
	NSMutableDictionary* mMusicItemDic;
	NSMutableArray* mMusicItemList;
	unsigned long mCurrentItemIndex;
	NSMutableSet* mDeletedMusicItem;
}
@property(retain, nonatomic) NSMutableSet* mDeletedMusicItem;
@property(assign, nonatomic) unsigned long mCurrentItemIndex;
@property(retain, nonatomic) NSMutableArray* mMusicItemList;
@property(retain, nonatomic) NSMutableDictionary* mMusicItemDic;
-(id)nextItem;
-(void)setCurrentPlayItemWithKey:(id)key;
-(void)deleteItemWithKey:(id)key;
-(void)ignoreItemWithKey:(id)key;
-(void)addItem:(id)item;
-(void)dealloc;
-(id)init;
@end

@interface MMMusicPlayer : MMService <MMService, NSURLConnectionDelegate, MMAudioDataWriteStreamDelegate> {
	MMAudioStreamPlayer* m_audioPlayer;
	MMAudioDataPipe* m_dataPipe;
	BOOL m_isLocalPlay;
	BOOL m_isQQMusicWifiPlay;
	BOOL m_isCyclePlay;
	MMMusicInfo* m_musicInfo;
	NSTimer* m_levelTimer;
	NSObject* m_clientInfo;
	NSString* m_title;
	NSString* m_photoUrl;
	NSURLConnection* m_dlConn;
	NSString* m_url;
}
@property(retain, nonatomic) MMMusicInfo* m_musicInfo;
@property(retain, nonatomic) NSURLConnection* m_dlConn;
@property(retain, nonatomic) NSString* m_url;
@property(retain, nonatomic) NSString* m_photoUrl;
@property(retain, nonatomic) NSString* m_title;
@property(retain, nonatomic) NSObject* m_clientInfo;
-(int)status;
-(BOOL)isIdle;
-(BOOL)isPaused;
-(BOOL)isPlaying;
-(BOOL)isWaiting;
-(void)pause;
-(void)tryStopClientId:(id)anId;
-(void)stopcycle;
-(void)stop;
-(void)start;
-(void)TimerCheckMeter;
-(void)playWithUrl:(id)url MusicID:(id)anId;
-(id)bcdStringFromUrl_WechatMusicUrl:(id)url_WechatMusicUrl;
-(id)bcdStringFromUrl_QQMusic:(id)url_QQMusic;
-(void)ignoreCurrentMusicItem;
-(void)addMusicItem:(id)item;
-(void)playbackStateChanged:(id)changed;
-(void)destroyStreamer;
-(void)dealloc;
-(void)onServiceInit;
-(id)init;
-(void)startDownloadMusicFromUrl:(id)url;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)onHandleWriteEventfromStream:(id)stream eventType:(unsigned long)type;
-(id)downloadTempPathForMusicFromUrl:(id)url;
-(id)cachePathForMusicFromUrl:(id)url;
-(id)getUrlPathExt:(id)ext;
-(id)hashForUrl:(id)url;
-(id)cacheRootPath;
@end

@interface MMMusicPlayerSessionMgr : NSObject <IRemoteControlCheckExt> {
	BOOL mIsNeedRestartAudioTalk;
}
@property(assign, nonatomic) BOOL needRestartAudioTalk;
+(id)sharedMusicPlayerSessionMgr;
-(void)iRemoteControlCheckShouldNextTrack;
-(void)iRemoteControlCheckShouldStop;
-(void)iRemoteControlCheckShouldPause;
-(void)iRemoteControlCheckShouldPlay;
-(void)notifyPlayStateChange:(id)change;
-(void)endMusicPlayerAudioSession:(id)session;
-(void)beginMusicPlayerAudioSession:(id)session;
-(void)dealloc;
-(id)init;
@end

@interface DataMatrix : NSObject {
	int dim;
	bool** data;
}
-(void)dealloc;
-(id)toString;
-(bool)valueAt:(int)at y:(int)y;
-(void)set:(bool)set x:(int)x y:(int)y;
-(int)dimension;
-(id)initWith:(int)with;
@end

@interface CaptureVideoInfo : NSObject {
	NSString* thumb_path;
	NSString* video_path;
	unsigned long video_time;
	unsigned long video_size;
	BOOL front_camera;
	unsigned long m_uiVideoSource;
	BOOL m_bForward;
	NSString* m_nsMsgDataUrl;
	NSString* m_nsAesKey;
	NSString* m_nsSrcUserName;
	NSString* m_nsSrcNickName;
	unsigned long m_uiSrcCreateTime;
}
@property(retain, nonatomic) NSString* m_nsAesKey;
@property(retain, nonatomic) NSString* m_nsMsgDataUrl;
@property(assign, nonatomic) unsigned long m_uiSrcCreateTime;
@property(retain, nonatomic) NSString* m_nsSrcNickName;
@property(retain, nonatomic) NSString* m_nsSrcUserName;
@property(assign, nonatomic) BOOL m_bForward;
@property(assign, nonatomic) unsigned long m_uiVideoSource;
@property(assign, nonatomic) BOOL front_camera;
@property(assign, nonatomic) unsigned long video_size;
@property(assign, nonatomic) unsigned long video_time;
@property(retain, nonatomic) NSString* video_path;
@property(retain, nonatomic) NSString* thumb_path;
-(void)dealloc;
-(id)init;
@end

@interface LoopPageScrollView : MMUIView <UIScrollViewDelegate, UIGestureRecognizerDelegate> {
	MMUIScrollView* m_scrollView;
	MMDelegateProxy<LoopPageScrollViewDataSourceDelegate>* m_delegate;
	int m_curPageNum;
	UIPanGestureRecognizer* m_panGesture;
}
@property(retain, nonatomic) UIPanGestureRecognizer* m_panGesture;
@property(assign, nonatomic) int m_curPageNum;
@property(assign, nonatomic) MMDelegateProxy<LoopPageScrollViewDataSourceDelegate>* m_delegate;
@property(retain, nonatomic) MMUIScrollView* m_scrollView;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)changeToLastPage;
-(void)changeToNextPage;
-(void)handleSingleTap:(id)tap;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(int)getRealPageNum:(int)num;
-(void)reloadData;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame withDelegate:(id)delegate;
-(id)getPanGestureRecognizer;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CFlowStat : MMService <MMService> {
	NSRecursiveLock* m_oLock;
	FlowStatDB* m_flowStatDB;
}
@property(retain, nonatomic) FlowStatDB* m_flowStatDB;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
-(unsigned long)GetRecvBytesByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan;
-(unsigned long)GetSendBytesByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan;
-(unsigned long)GetSumOfValueByNetworkType:(unsigned long)valueByNetworkType InTimeSpan:(id)timeSpan withCmd:(unsigned long)cmd inCol:(id)col;
-(unsigned long)GetCurrNetworkType;
-(void)GetRecvBigByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Count:(unsigned*)count Len:(unsigned*)len;
-(void)GetRecvThumbByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Count:(unsigned*)count Len:(unsigned*)len;
-(void)GetSendImgByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Count:(unsigned*)count Len:(unsigned*)len;
-(void)GetImgDataByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Cmd:(unsigned long)cmd Count:(unsigned*)count Len:(unsigned*)len;
-(void)GetRecvTextByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Count:(unsigned*)count Len:(unsigned*)len;
-(void)GetSendTextByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Count:(unsigned*)count Len:(unsigned*)len;
-(void)GetTextDataByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Cmd:(unsigned long)cmd Count:(unsigned*)count Len:(unsigned*)len;
-(void)GetDownloadVoiceTimeByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Count:(unsigned*)count VoiceTime:(unsigned*)time;
-(void)GetUploadVoiceTimeByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Count:(unsigned*)count VoiceTime:(unsigned*)time;
-(void)GetVoiceDataByNetworkType:(unsigned long)type InTimeSpan:(id)timeSpan Cmd:(unsigned long)cmd Count:(unsigned*)count VoiceTime:(unsigned*)time;
-(void)GetCmdDataByNetworkType:(unsigned long)type Cmd:(unsigned long)cmd Time:(unsigned long)time UploadBytes:(unsigned*)bytes UploadCount:(unsigned*)count DownloadBytes:(unsigned*)bytes6 DownloadCount:(unsigned*)count7;
-(id)GetCmdDataByNetworkType:(unsigned long)type Time:(unsigned long)time;
-(void)AddRecvBig:(unsigned long)big;
-(void)AddRecvThumbLen:(unsigned long)len;
-(void)AddSendImgLen:(unsigned long)len;
-(void)AddImgLen:(unsigned long)len Len:(unsigned long)len2;
-(void)AddRecvTextLen:(unsigned long)len;
-(void)AddSendTextLen:(unsigned long)len;
-(void)AddTextLen:(unsigned long)len Len:(unsigned long)len2;
-(void)AddDownloadVoiceTime:(unsigned long)time;
-(void)AddUploadVoiceTime:(unsigned long)time;
-(void)SetVoiceTime:(unsigned long)time VoiceTime:(unsigned long)time2;
-(void)AddDownloadBytes:(unsigned long)bytes Cmd:(unsigned long)cmd;
-(void)AddUploadBytes:(unsigned long)bytes Cmd:(unsigned long)cmd;
-(void)SetData:(unsigned long)data Cmd:(unsigned long)cmd Type:(unsigned long)type;
-(void)Stop;
-(void)dealloc;
-(id)init;
-(void)initDB;
@end

@interface FlowStatDB : CBaseDB {
}
-(id)init;
-(void)RegisterTypeOfCol;
-(BOOL)GetOneRowInFlowStatInNetwork:(unsigned long)network InTimeSpan:(id)timeSpan Cmd:(unsigned long)cmd QryCol:(id)col RetCol:(id)col5;
-(BOOL)GetAllRowInFlowStatInNetwork:(unsigned long)network InTimeSpan:(id)timeSpan Cmd:(unsigned long)cmd QryCol:(id)col RetCol:(id)col5;
-(BOOL)GetAllRowInFlowStatInNetwork:(unsigned long)network InTimeSpan:(id)timeSpan QryCol:(id)col RetCol:(id)col4;
-(BOOL)GetColValueInFlowStatInNetwork:(unsigned long)network InTime:(unsigned long)time Cmd:(unsigned long)cmd QryCol:(id)col RetCol:(id)col5;
-(BOOL)SetColValueInFlowStatInNetwork:(unsigned long)network InTime:(unsigned long)time Cmd:(unsigned long)cmd ColValue:(id)value;
-(BOOL)InsertNewRowInFlowStat:(id)flowStat;
-(BOOL)CreateFlowStatTable;
@end

@interface MMLanguageMgr : MMService <MMService> {
	NSString* m_nsCurSystemLanguage;
	NSString* m_curLanguage;
	NSBundle* m_curBundle;
	NSBundle* m_backupBundle;
	BOOL bDownloadPackageRightNow;
}
-(void)refreshNewVersionForCurLanguage:(id)curLanguage fromViewScene:(unsigned long)viewScene;
-(void)setCurLanguage:(id)language;
-(void)setCurLanguage:(id)language forRefresh:(BOOL)refresh withViewScene:(unsigned long)viewScene;
-(id)getStringForLanguage:(id)language withID:(id)anId defaultTo:(id)to;
-(id)getStringForCurLanguage:(id)curLanguage defaultTo:(id)to table:(id)table;
-(id)getStringForCurLanguage:(id)curLanguage defaultTo:(id)to;
-(id)getStringForCurLanguage:(id)curLanguage defaultString:(id)string;
-(id)getStringForCurLanguageWithBackupBundle:(id)backupBundle defaultTo:(id)to table:(id)table;
-(id)getStringForCurLanguageWithBackupBundle:(id)backupBundle defaultTo:(id)to;
-(id)getSupportedLanguageDisplayNames;
-(id)getSupportedLanguages;
-(id)getCurLanguageDisplayName;
-(id)getCurLanguage;
-(id)getCurBundle;
-(void)dealloc;
-(id)init;
-(void)initLanguage;
-(void)initBackUpLanguage;
-(BOOL)ifNeedBackupBundle;
-(id)getBackUpLanguage;
-(id)isSupportedLanguage:(id)language;
-(id)getRealCurSystemLanguage;
-(id)getCurSystemLanguage;
-(void)internalSetCurLanguage:(id)language;
-(id)internalGetCurLanguage;
-(id)getLanguagePath;
-(id)getLangPackageFileForLang:(id)lang;
-(id)getLangPackageZipFileForLang:(id)lang;
-(id)getLangPackagePathForLang:(id)lang;
-(id)getLangPackageRootPath;
@end

@interface LanguagePackage : NSObject {
	NSString* nsLang;
	Package* pack;
	unsigned long uiTimeCost;
	BOOL hasCost;
	timeval tvStart;
}
@property(retain, nonatomic) Package* pack;
@property(retain, nonatomic) NSString* nsLang;
-(id).cxx_construct;
-(unsigned long)timeCost;
-(void)end;
-(id)init;
@end

@interface MMLanguagePackageDownloadMgr : MMService <MMService, MMPackageDownloadMgrExt> {
	NSString* m_sLangRootPath;
	NSMutableDictionary* m_dicUpdatingPackage;
	NSMutableDictionary* m_dicCurLangVersions;
	NSMutableDictionary* m_dicHasUpdate;
	bool isCheckingPackageList;
	unsigned long uiInterval;
	NSMutableDictionary* m_dicLanguageDownloadTimeCost;
}
-(void)checkIfUpdatedForLang:(id)lang andRefreshOn:(unsigned long)on;
-(void)onPackageCancelFinish:(id)finish;
-(void)onPackageDownloadFinish:(id)finish package:(id)package;
-(void)onPackageDownloadProcessUpdated:(id)updated downloadSize:(int)size totalSize:(int)size3;
-(void)onPackageListUpdated:(id)updated;
-(void)availableUpdatedForLang:(id)lang;
-(id)popLanguagePackageWithPID:(id)pid;
-(id)getLanguagePackageWithPID:(id)pid;
-(bool)isUpdating:(id)updating;
-(void)doCheckUpdateOnMainThread:(BOOL)thread;
-(void)doCheckUpdateDelay;
-(void)doCheckUpdate;
-(BOOL)checkInterval:(BOOL)interval;
-(void)downloadForLang:(id)lang pack:(id)pack localVersion:(id)version;
-(void)updateVersion:(id)version ForLang:(id)lang;
-(unsigned long)getLangVersion:(id)version;
-(id)getPackItemFromPackageListWithLang:(id)lang;
-(id)genPackageNameWithLang:(id)lang;
-(id)getLangVersionFileForLang:(id)lang;
-(void)dealloc;
-(id)init;
@end

@interface JSConsoleLog : NSObject {
	unsigned long _jsLogLevel;
	NSString* _jsLogInfo;
}
@property(retain, nonatomic) NSString* jsLogInfo;
@property(assign, nonatomic) unsigned long jsLogLevel;
+(id)extractLogInfo:(id)info;
-(id)init;
-(void)dealloc;
@end

@interface MMRegion : NSObject {
	NSString* code;
	NSString* name;
	NSString* parentCode;
	int type;
	int numbersOfChildren;
}
@property(assign, nonatomic) int numbersOfChildren;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* parentCode;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* code;
-(id)description;
-(void)dealloc;
@end

@interface MMRegionCodeMgr : MMService <MMService, IMMRegionPackageDownloadMgrExt, IMMLanguageMgrExt> {
	NSDictionary* m_regionDict;
	NSMutableArray* m_pickedRegionAry;
}
+(int)numberOfOccurrencesOfString:(id)string inString:(id)string2;
+(id)encodeCountry:(id)country province:(id)province city:(id)city;
-(BOOL)isProvinceMO:(id)mo;
-(BOOL)isProvinceHK:(id)hk;
-(BOOL)isProvinceTW:(id)tw;
-(BOOL)isCountryMO:(id)mo;
-(BOOL)isCountryHK:(id)hk;
-(BOOL)isCountryTW:(id)tw;
-(BOOL)isZhCN:(id)cn;
-(void)removePickedResult;
-(id)getPickedResult;
-(void)popupData;
-(void)pushData:(id)data;
-(void)onLanguageChange;
-(void)onRegionPackageUpdated;
-(BOOL)saveStirng:(id)stirng toFileForLang:(id)lang;
-(id)readRegionCodeFileForLang:(id)lang;
-(void)trySplitRegionCodeFile:(id)file;
-(void)splitRegionCodeFile:(id)file;
-(id)getRegionCodeLangForCurLang:(id)curLang;
-(id)getLanguagePrefixByLanguage:(id)language;
-(id)getChildrenOfCode:(id)code;
-(id)getCountries;
-(id)getRegionCodeFromString:(id)string type:(int)type;
-(id)getValueForKey:(id)key;
-(id)getDisplayRegionWithCountry:(id)country province:(id)province city:(id)city;
-(void)dealloc;
-(void)setRegionDictForCurLang;
-(id)init;
@end

@interface MMRegionPackageDownloadMgr : MMService <MMService, MMPackageDownloadMgrExt> {
	Package* _cachedPackage;
	unsigned long uiInterval;
}
-(void)onPackageDownloadFinish:(id)finish package:(id)package;
-(void)onPackageDownloadProcessUpdated:(id)updated downloadSize:(int)size totalSize:(int)size3;
-(void)onPackageListUpdated:(id)updated;
-(id)getVersionFilePath;
-(id)getRegionFilePathForLang:(id)lang;
-(id)getRegionFilePath;
-(id)getRegionRootPath;
-(int)getCurrentVersion;
-(void)startDownload:(id)download localVersion:(id)version;
-(BOOL)shoulCheckUpadte;
-(void)checkUpdate;
-(void)dealloc;
-(id)init;
@end

@interface LBSSystemCacheUpdater : NSObject {
	int m_locationTag;
	NSTimer* m_stopTimer;
}
@property(retain, nonatomic) NSTimer* m_stopTimer;
@property(assign, nonatomic) int m_locationTag;
-(void)stop;
-(void)start;
-(void)dealloc;
-(id)init;
@end

@interface LocationRetriever : NSObject <ILocationMgrExt> {
	int m_locationTag;
	int m_timeoutCount;
	int m_headingTag;
	CLHeading* m_heading;
	BOOL m_bCanRepeatReportLocation;
	float m_requiredAccuracy;
	NSTimer* m_checkResultTimer;
	id<LocationRetrieveDelegate> m_delegate;
	NSMutableArray* m_recentLocationList;
	LBSSystemCacheUpdater* m_sysCacheUpdater;
}
@property(retain, nonatomic) LBSSystemCacheUpdater* m_sysCacheUpdater;
@property(retain, nonatomic) NSTimer* m_checkResultTimer;
@property(retain, nonatomic) NSMutableArray* m_recentLocationList;
@property(assign, nonatomic) id<LocationRetrieveDelegate> m_delegate;
@property(assign, nonatomic) float m_requiredAccuracy;
@property(assign, nonatomic) BOOL m_bCanRepeatReportLocation;
+(double)getLocationAccuracy:(id)accuracy;
-(void)onHeadingTimeCheck;
-(void)addToRecentLocationList:(id)recentLocationList;
-(id)objectInRecentLocationListAtIndex:(unsigned)index;
-(unsigned)countOfRecentLocationList;
-(id)getBestResultFromLocationList;
-(void)onGpsTimerTimeCheck;
-(BOOL)isHeadingOK:(id)ok;
-(void)onHeadingChanged:(id)changed withTag:(int)tag;
-(BOOL)isLocationOK:(id)ok;
-(void)onGPSLocationChanged:(id)changed withTag:(int)tag;
-(void)onGPSLocationError:(int)error withTag:(int)tag;
-(void)CleanDelegate;
-(void)CancelRetrieveHeading;
-(void)RetrieveHeading;
-(void)CancelRetrieveLocation;
-(void)RetrieveLocation;
-(void)dealloc;
-(void)Reset;
-(id)initWithDelegate:(id)delegate;
@end

@interface MMLocationDB : NSObject {
	MMDatabase* m_db;
}
-(BOOL)setAddress:(id)address ByLocation:(XXStruct_zYrK5D)location;
-(id)getAddressByLocation:(XXStruct_zYrK5D)location;
-(id)argumentArrFromLocation:(XXStruct_zYrK5D)location;
-(id)pathForDatabase;
-(id)database;
-(void)dealloc;
-(id)init;
@end

@interface MMLocationMgr : MMService <MMService, CLLocationManagerDelegate, MKReverseGeocoderDelegate, MKMapViewDelegate> {
	NSMutableArray* m_loactionMgrList;
	NSMutableArray* m_unusedLocationMgr;
	MMLocationDB* m_locationDB;
	NSMutableArray* m_reversGeolocators;
	int mapViewTagMark;
	NSMutableArray* mapViewList;
}
@property(retain, nonatomic) NSMutableArray* unusedLocationMgr;
@property(retain, nonatomic) NSMutableArray* loactionMgrList;
-(id)getLocationForTest;
-(void)mapView:(id)view didFailToLocateUserWithError:(id)error;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)requestReverseGeoWithParam:(id)param;
-(id)countryCodeFromAddressDic:(id)addressDic;
-(id)countryFromAddressDic:(id)addressDic;
-(id)evolvedCityFromAddressDic:(id)addressDic;
-(id)cityFromAddressDic:(id)addressDic;
-(id)addressNoSpaceFromAddressDic:(id)addressDic;
-(id)addressFromAddressDic:(id)addressDic;
-(void)reverseGeocoder:(id)geocoder didFailWithError:(id)error;
-(void)reverseGeocoder:(id)geocoder didFindPlacemark:(id)placemark;
-(id)findDictionaryByConn:(id)conn;
-(id)findDictionaryByGeo:(id)geo;
-(void)stopUpdateAddressByTag:(int)tag;
-(void)stopGeoAddress:(id)address;
-(int)updateAddressByLocation:(XXStruct_zYrK5D)location;
-(id)getAddressByLocation:(XXStruct_zYrK5D)location;
-(id)keyForLocation:(XXStruct_zYrK5D)location;
-(void)tryStartNextGeo;
-(void)setAddressDic:(id)dic ByPlacemark:(id)placemark;
-(void)locationManager:(id)manager didUpdateHeading:(id)heading;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)onUpdateLocationFromLocationManager:(id)locationManager;
-(void)dealloc;
-(id)init;
-(BOOL)isUpdatingHeading:(int)heading;
-(void)stopUpdateHeading:(int)heading;
-(int)startUpdateHeading;
-(BOOL)isUpdatingMapLocation:(int)location;
-(void)stopUpdateMapLocation:(int)location;
-(int)startUpdateMapLocation;
-(BOOL)isUpdatingGPSLocation:(int)location;
-(void)stopUpdateGPSLocation:(int)location;
-(int)startUpdateGPSLocation;
-(void)cleanUpUnusedLocationMgr;
-(void)addToUnusedLocationMgr:(id)unusedLocationMgr;
-(BOOL)isAccurateLocation:(id)location;
-(double)locationAccuracy:(id)accuracy;
@end

@interface CMainControll : NSObject <NotifyFromEventDelegate, GetIPDelegate, NetworkStatusDelegate, NotifyFromNetWorkDelegate, MMKernelExt, PBMessageObserverDelegate> {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSString* m_nsDocPath;
	NSTimer* m_oTimerCheckEvent;
	id<NotifyFromMainCtrlDelegate> m_delNotifyFromMainCtrl;
	NSMutableArray* m_arrMessageList;
	NSString* m_nsToken;
	unsigned long m_uiTokenStatus;
	NSString* m_nsSound;
	NSString* m_nsVoipSound;
	unsigned long m_uiTimerCount;
	BOOL m_bLogIn;
	BOOL m_bSendingToken;
	BOOL m_bNeedSend;
	unsigned long m_uiLastNetworkStatus;
	unsigned long m_uiNetworkReachabilitySeed;
	unsigned long long m_unLastDNS;
	NSDate* m_dtLastSyncSend;
	unsigned long m_uiSyncSendCount;
	NSDate* m_dtLastSyncForAuth;
	NSDate* m_dtLastGetUpdateInfo;
	CNetworkStatus* m_oNetworkStatus;
	BOOL m_bNeedSyncAddressBook;
	BOOL m_bSyncAddrFromAuth;
	BOOL m_bCanAutoLogin;
	BOOL m_bFirstAutoLoginAfterUpdate;
	unsigned long m_uiSyncScene;
	NSRecursiveLock* m_oMsgQueLock;
	unsigned long m_lastmakesuretime;
	BOOL m_bStop;
	NSDate* _m_tLastNotify;
	NSDate* _m_tLastLongConnDisconnect;
}
@property(retain, nonatomic) CMMDB* m_oMMDB;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(retain, nonatomic) NSString* m_nsDocPath;
@property(retain, nonatomic) CNetworkStatus* m_oNetworkStatus;
@property(retain, nonatomic) NSDate* m_tLastLongConnDisconnect;
@property(retain, nonatomic) NSDate* m_tLastNotify;
@property(retain, nonatomic) NSDate* m_dtLastGetUpdateInfo;
@property(retain, nonatomic) NSDate* m_dtLastSyncForAuth;
@property(retain, nonatomic) NSDate* m_dtLastSyncSend;
@property(retain, nonatomic) NSString* m_nsVoipSound;
@property(retain, nonatomic) NSString* m_nsSound;
@property(assign, nonatomic) unsigned long m_uiTokenStatus;
@property(retain, nonatomic) NSString* m_nsToken;
@property(assign, nonatomic) id<NotifyFromMainCtrlDelegate> m_delNotifyFromMainCtrl;
-(void)TimerSync;
-(BOOL)MakeSureAuth;
-(void)SessionTimeout;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleRespForGetUpdateInfo:(id)getUpdateInfo;
-(void)CheckUpdate:(unsigned long)update;
-(void)HandleRespForSendToken:(id)sendToken;
-(void)CreateSendTokenEvent;
-(void)SendToken:(id)token Status:(unsigned long)status Sound:(id)sound VoipSound:(id)sound4;
-(void)onKickQuit;
-(void)HandleGetCert:(id)cert;
-(void)HandleIdcRedirect:(id)redirect;
-(void)HandleNewSyncPush:(id)push;
-(void)HandleSpecialMessage:(id)message;
-(void)MainThreadNotifyAuthOK:(id)ok Message:(unsigned long)message;
-(void)speedyDispacthMessage:(id)message;
-(void)SpeedyNotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(void)OnGetHttpHead:(id)head IP:(id)ip Port:(unsigned long)port;
-(void)ReachabilityChange:(unsigned long)change;
-(void)handleIPXXMessage:(id)message;
-(void)addUploadIPXXOpLog;
-(id)GetIPFromHost:(id)host;
-(void)RaiseEvent:(unsigned long)event MessageID:(unsigned long)anId MessageInfo:(id)info;
-(id)GetCurLongConnIP;
-(id)GetLocalInfo;
-(void)GetBottleContact;
-(unsigned long)GetNetworkReachabilitySeed;
-(unsigned long)GetNetworkStatus;
-(unsigned long)CheckVersion;
-(BOOL)IsNewUser;
-(void)CheckWhatsnew;
-(void)SetShowWhatsnew:(BOOL)whatsnew;
-(void)CreateSyncTimer;
-(void)HandleQQChanged;
-(void)CheckResend;
-(void)SendMsg:(BOOL)msg;
-(BOOL)IsInit;
-(BOOL)IsLogIn;
-(BOOL)AutoLogIn;
-(void)ForceAutoLoginFail;
-(void)MainThreadForceAutoLoginFail;
-(void)ForceAutoLogin;
-(BOOL)CreateAutoLogin:(id)login;
-(void)ReloadData:(BOOL)data;
-(void)ReloadServiceData_InMainThread;
-(void)ClearData;
-(void)TimerCheckEvent;
-(void)CheckSyncAddressBook;
-(void)HandleAuthAtFirstTime;
-(void)Stop;
-(unsigned long)Start:(id)start;
-(void)dealloc;
-(id)init;
@end

@interface BackgroundTask : NSObject {
}
+(void)run;
@end

@interface iConsoleWindow : MainWindow <iConsoleDelegate> {
}
+(void)initialize;
-(void)handleConsoleCommand:(id)command;
-(void)remoteControlReceivedWithEvent:(id)event;
@end

@interface AutoSetRemarkMgr : MMService <MMService, IContactMgrExt, IAddressBookMgrExt> {
	NSMutableDictionary* m_dicMobileRemarkList;
	NSMutableDictionary* m_dicStrangerRemarkList;
	NSMutableDictionary* m_dicGoogleRemarkList;
	NSMutableDictionary* m_dicWaitToSetRemark;
}
+(id)GetPathOfGoogleRemarkList;
+(id)GetPathOfStrangerRemarkList;
+(id)GetPathOfVerifyList;
-(void)onModifyContact:(id)contact;
-(void)OnAddressBookLoadedComplete;
-(void)autoSetRemark:(id)remark;
-(void)clearRemark:(id)remark;
-(void)SetRemark:(id)remark;
-(id)GetStrangerRemark:(id)remark;
-(void)SaveStrangerRemark;
-(void)SetStrangerRemarkNotSave:(id)save Remark:(id)remark;
-(void)SetStrangerRemark:(id)remark Remark:(id)remark2;
-(void)InternalSetStrangerRemark:(id)remark Remark:(id)remark2;
-(void)AddVerifyUsr:(id)usr MobileIdentify:(id)identify;
-(void)SetGoogleRemark:(id)remark Remark:(id)remark2;
-(void)SaveGoogleData;
-(void)SaveStrangerData;
-(void)SaveMobileData;
-(void)LoadData;
-(void)dealloc;
-(id)init;
@end

@interface ChatRoomData : NSObject {
	NSMutableDictionary* m_dicData;
	unsigned long m_level;
	unsigned long m_status;
	unsigned long m_flag;
	unsigned long m_maxMemberCount;
	unsigned long m_expireTime;
	NSArray* m_admin;
	NSString* m_lastDonor;
	unsigned long m_lastDonorLevel;
	NSString* m_lastPresenter;
	NSString* m_upgrader;
}
@property(readonly, assign, nonatomic) NSString* upgrader;
@property(readonly, assign, nonatomic) NSString* lastPresenter;
@property(readonly, assign, nonatomic) unsigned long lastDonorLevel;
@property(readonly, assign, nonatomic) NSString* lastDonor;
@property(readonly, assign, nonatomic) NSArray* admin;
@property(readonly, assign, nonatomic) unsigned long expireTime;
@property(readonly, assign, nonatomic) unsigned long maxMemberCount;
@property(readonly, assign, nonatomic) unsigned long flag;
@property(readonly, assign, nonatomic) unsigned long status;
@property(readonly, assign, nonatomic) unsigned long level;
-(BOOL)isSeriousFrozen;
-(BOOL)isFrozen;
-(BOOL)isExpire;
-(void)setDisband;
-(BOOL)isDisband;
-(void)updateDicData:(XmlReaderNode_t*)data;
-(unsigned long)getXmlNodeIntValue:(XmlReaderNode_t*)value forName:(char*)name;
-(BOOL)isUndeliverCountOpen;
-(void)setUndeliverCountOpen:(BOOL)open;
-(BOOL)isShowDislayName;
-(void)setShowDislayName:(BOOL)name;
-(BOOL)isNeedVerifyMember;
-(void)setNeedVerifyMember:(BOOL)member;
-(id)getDislayNameForUserName:(id)userName;
-(void)setDislayName:(id)name forUserName:(id)userName;
-(void)updateChatRoomData:(XmlReaderNode_t*)data;
-(id)getDataXml;
-(void)parseData:(id)data;
-(void)setDataForUserName:(id)userName key:(id)key value:(id)value;
-(id)getDataForUserName:(id)userName key:(id)key;
-(id)initWithChatRoomData:(id)chatRoomData;
-(void)dealloc;
@end

@interface CBaseContact : NSObject <PBCoding, NSCoding> {
	NSString* m_nsUsrName;
	NSString* m_nsEncodeUserName;
	NSString* m_nsAliasName;
	unsigned long m_uiConType;
	NSString* m_nsNickName;
	NSString* m_nsFullPY;
	NSString* m_nsRemark;
	NSString* m_nsRemarkPYShort;
	NSString* m_nsRemarkPYFull;
	unsigned long m_uiSex;
	unsigned long m_uiType;
	unsigned long m_uiChatState;
	NSData* m_dtUsrImg;
	NSString* m_nsImgStatus;
	NSString* m_nsHDImgStatus;
	NSString* m_nsHeadImgUrl;
	NSString* m_nsHeadHDImgUrl;
	NSString* m_nsHeadHDMd5;
	NSString* m_nsDraft;
	unsigned long m_uiDraftTime;
	unsigned long m_uiQQUin;
	NSString* m_nsQQNickName;
	NSString* m_nsQQRemark;
	NSString* m_nsMobileIdentify;
	NSString* m_nsGoogleContactName;
	NSString* m_nsGoogleContactNickName;
	unsigned long m_uiFriendScene;
	unsigned long m_uiImgKey;
	unsigned long m_uiExtKey;
	unsigned long m_uiImgKeyAtLastGet;
	unsigned long m_uiExtKeyAtLastGet;
	BOOL m_hasDetectPlugin;
	BOOL m_isPlugin;
	BOOL m_hasDetectSelf;
	BOOL m_isSelf;
	NSDictionary* _externalInfoJSONCache;
}
@property(retain, nonatomic) NSDictionary* externalInfoJSONCache;
@property(readonly, assign, nonatomic) BOOL m_isPlugin;
@property(assign, nonatomic) unsigned long m_uiExtKeyAtLastGet;
@property(assign, nonatomic) unsigned long m_uiImgKeyAtLastGet;
@property(assign, nonatomic) unsigned long m_uiExtKey;
@property(assign, nonatomic) unsigned long m_uiImgKey;
@property(assign, nonatomic) unsigned long m_uiFriendScene;
@property(retain, nonatomic) NSString* m_nsGoogleContactNickName;
@property(retain, nonatomic) NSString* m_nsGoogleContactName;
@property(retain, nonatomic) NSString* m_nsMobileIdentify;
@property(retain, nonatomic) NSString* m_nsQQRemark;
@property(retain, nonatomic) NSString* m_nsQQNickName;
@property(assign, nonatomic) unsigned long m_uiQQUin;
@property(assign, nonatomic) unsigned long m_uiDraftTime;
@property(retain, nonatomic) NSString* m_nsDraft;
@property(retain, nonatomic) NSString* m_nsHeadHDMd5;
@property(retain, nonatomic) NSString* m_nsHeadHDImgUrl;
@property(retain, nonatomic) NSString* m_nsHeadImgUrl;
@property(retain, nonatomic) NSString* m_nsHDImgStatus;
@property(retain, nonatomic) NSString* m_nsImgStatus;
@property(retain, nonatomic) NSData* m_dtUsrImg;
@property(assign, nonatomic) unsigned long m_uiChatState;
@property(assign, nonatomic) unsigned long m_uiType;
@property(assign, nonatomic) unsigned long m_uiSex;
@property(retain, nonatomic) NSString* m_nsRemarkPYFull;
@property(retain, nonatomic) NSString* m_nsRemarkPYShort;
@property(retain, nonatomic) NSString* m_nsRemark;
@property(retain, nonatomic) NSString* m_nsFullPY;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(assign, nonatomic) unsigned long m_uiConType;
@property(retain, nonatomic) NSString* m_nsAliasName;
@property(retain, nonatomic) NSString* m_nsEncodeUserName;
@property(retain, nonatomic) NSString* m_nsUsrName;
+(void)initialize;
+(void)_initPBTableOfCBaseContact;
-(int)getImageStatusCode;
-(id)getMobileDisplayName;
-(BOOL)isHasGMail;
-(BOOL)isHasMobile;
-(id)getMobileNumString;
-(id)getQQDisplayName;
-(BOOL)isHasQQDisplayName;
-(BOOL)isHasQQ;
-(BOOL)isWeixinTeamContact;
-(BOOL)isSelf;
-(BOOL)hasContactDisplayUsrName;
-(id)getContactDisplayUsrName;
-(id)getContactTalkRoomName;
-(id)getContactDisplayName;
-(id)getRemark;
-(void)saveUserImage;
-(id)getContactHeadImage;
-(BOOL)isNeedGetHDImg;
-(BOOL)isHasHDImg;
-(BOOL)isNeedGetUsrImg;
-(BOOL)isQQ;
-(BOOL)isQQMBlog;
-(BOOL)isBrandSessionHolder;
-(BOOL)isGroupCard;
-(BOOL)isChatroom;
-(BOOL)isLbsroom;
-(BOOL)isWeixin;
-(BOOL)isChatRoomContact;
-(BOOL)isMMContact;
-(BOOL)isFavour;
-(BOOL)isSnsBlack;
-(void)setBlack:(BOOL)black;
-(BOOL)isBlack;
-(BOOL)isEqualToName:(id)name;
-(BOOL)isEqualToContact:(id)contact;
-(id)getEncodeUserName;
-(BOOL)isValid;
-(void)setChatRoomTopic:(id)topic;
-(id)chatRoomTopic;
-(int)compare:(id)compare;
-(id)description;
-(BOOL)copyFrom:(id)from;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(void)setRemarkWithoutEmojiChange:(id)change;
-(void)setNickNameWithoutEmojiChange:(id)change;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface SubscriptBrandInfo : NSObject <PBCoding, NSCoding> {
	unsigned long m_brandListCount;
	unsigned long m_brandListVersion;
}
@property(assign, nonatomic) unsigned long m_brandListVersion;
@property(assign, nonatomic) unsigned long m_brandListCount;
+(void)initialize;
+(void)_initPBTableOfSubscriptBrandInfo;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface CContact : CBaseContact <PBCoding, NSCoding> {
	unsigned long m_uiChatRoomStatus;
	NSString* m_nsChatRoomMemList;
	NSString* m_nsChatRoomData;
	ChatRoomData* m_ChatRoomData;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
	unsigned long m_uiCertificationFlag;
	NSString* m_nsCertificationInfo;
	NSString* m_nsOwner;
	NSString* m_nsWeiboAddress;
	NSString* m_nsWeiboNickName;
	unsigned long m_uiWeiboFlag;
	NSString* m_nsFBNickName;
	NSString* m_nsFBID;
	unsigned long m_uiNeedUpdate;
	NSString* m_nsWCBGImgObjectID;
	int m_iWCFlag;
	NSString* m_pcWCBGImgID;
	NSString* m_nsExternalInfo;
	NSString* m_nsBrandSubscriptConfigUrl;
	unsigned long m_uiBrandSubscriptionSettings;
	SubscriptBrandInfo* m_subBrandInfo;
	NSString* m_nsBrandIconUrl;
	BOOL m_isExtInfoValid;
	NSDictionary* externalInfoJSONCache;
	BOOL m_isShowRedDot;
	NSString* m_nsMobileHash;
	NSString* m_nsMobileFullHash;
}
@property(retain, nonatomic) NSString* m_nsMobileFullHash;
@property(retain, nonatomic) NSString* m_nsMobileHash;
@property(assign, nonatomic) BOOL m_isShowRedDot;
@property(retain, nonatomic) ChatRoomData* m_ChatRoomData;
@property(retain, nonatomic) NSString* m_nsChatRoomData;
@property(assign, nonatomic) BOOL m_isExtInfoValid;
@property(retain, nonatomic) NSString* m_nsBrandIconUrl;
@property(retain, nonatomic) SubscriptBrandInfo* m_subBrandInfo;
@property(assign, nonatomic) unsigned long m_uiBrandSubscriptionSettings;
@property(retain, nonatomic) NSString* m_nsBrandSubscriptConfigUrl;
@property(retain, nonatomic) NSString* m_nsExternalInfo;
@property(retain, nonatomic) NSString* m_pcWCBGImgID;
@property(assign, nonatomic) int m_iWCFlag;
@property(retain, nonatomic) NSString* m_nsWCBGImgObjectID;
@property(assign, nonatomic) unsigned long m_uiNeedUpdate;
@property(retain, nonatomic) NSString* m_nsFBID;
@property(retain, nonatomic) NSString* m_nsFBNickName;
@property(assign, nonatomic) unsigned long m_uiWeiboFlag;
@property(retain, nonatomic) NSString* m_nsWeiboNickName;
@property(retain, nonatomic) NSString* m_nsWeiboAddress;
@property(retain, nonatomic) NSString* m_nsOwner;
@property(retain, nonatomic) NSString* m_nsCertificationInfo;
@property(assign, nonatomic) unsigned long m_uiCertificationFlag;
@property(retain, nonatomic) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
@property(assign, nonatomic) unsigned long m_uiChatRoomStatus;
@property(retain, nonatomic) NSString* m_nsChatRoomMemList;
+(BOOL)isHeadImgUpdated:(id)updated Local:(id)local;
+(void)HandleChatMemUsrImg:(tagMMModChatRoomMember*)img Contatct:(id)contatct DocPath:(id)path;
+(void)HandleUsrImgPB:(id)pb Contatct:(id)contatct DocPath:(id)path;
+(void)HandleUsrImg:(tagMMModContact*)img Contatct:(id)contatct DocPath:(id)path;
+(id)genChatRoomName:(id)name;
+(id)getChatRoomMemberWithoutMyself:(id)myself;
+(id)getChatRoomMember:(id)member;
+(id)getMicroBlogUsrDisplayName:(id)name;
+(id)getContactTypeImage:(unsigned long)image isFrontPage:(BOOL)page;
+(id)getWeixinTeamContact;
+(id)parseContactKey:(id)key;
+(id)SubscriptedBrandsFromString:(id)string;
+(void)initialize;
+(void)_initPBTableOfCContact;
-(void)setExternalInfoJSONCache:(id)cache;
-(id)externalInfoJSONCache;
-(BOOL)IsUserInChatRoom:(id)chatRoom;
-(BOOL)needShowUnreadCountOnSession;
-(void)setChatStatusNotifyOpen:(BOOL)open;
-(BOOL)isChatStatusNotifyOpen;
-(BOOL)isContactSessionTop;
-(BOOL)isShowChatRoomDisplayName;
-(BOOL)isAdmin;
-(id)xmlForMessageWrapContent;
-(id)getChatRoomMemberNickName:(id)name;
-(id)getChatRoomMemberDisplayName:(id)name;
-(BOOL)isHardCodeSpecialBrandContact;
-(int)compareForFavourGroup:(id)favourGroup;
-(BOOL)isLocalizedContact;
-(BOOL)isHolderContact;
-(BOOL)isVerified;
-(BOOL)isVerifiedBrandContact;
-(BOOL)isBrandContact;
-(BOOL)isMyContact;
-(void)tryLoadExtInfo;
-(id)description;
-(BOOL)copyPatialFieldFromContact:(id)contact;
-(BOOL)copyFieldFromContact:(id)contact;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithModContact:(id)modContact;
-(id)initWithShareCardMsgWrap:(id)shareCardMsgWrap;
-(BOOL)genContactFromShareCardMsgWrap:(id)shareCardMsgWrap;
-(id)init;
-(void)setSignatureWithoutEmojiChange:(id)change;
-(void)setChatRoomDataWithoutEmojiChange:(id)change;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
-(id)supportEmoticonLinkPrefix;
-(BOOL)isShowToolBarInMsg;
-(BOOL)isShowHeadImgInMsg;
-(id)verifyContactButtonTitle;
-(id)verifyContactPromptTitle;
-(int)GetScanQRCodeType;
-(int)GetReportLocationType;
-(int)GetAudioPlayType;
-(BOOL)isContactCanReceiveSpeexVoice;
-(id)brandUrls;
-(BOOL)isShowObtainShippingAddress;
-(unsigned long)conferenceContactExpireTime;
-(id)bizMenuInfoFromContact;
-(int)getCustomInteractiveMode;
-(unsigned long)getConnectorMsgType;
-(int)GetBrandContactType;
-(BOOL)isBrandContactShowInMainSession;
-(id)brandPrivileges;
-(id)getBrandVerifySourceName;
-(id)getBrandVerifySourceIntroUrl;
-(id)getBrandVerifySourceDescription;
-(unsigned long)getBrandVerifySourceType;
-(id)GetExternalInfoDictionary;
@end

@interface CPushContact : CContact {
	NSString* m_nsSource;
	BOOL m_bReaded;
	unsigned long m_uiPushTime;
	NSString* m_nsDes;
	NSString* m_nsTicket;
	CMessageWrap* m_oMessage;
	unsigned long m_uiOpCode;
	unsigned long m_uiStatus;
}
@property(assign, nonatomic) unsigned long m_uiStatus;
@property(assign, nonatomic) unsigned long m_uiOpCode;
@property(retain, nonatomic) CMessageWrap* m_oMessage;
@property(retain, nonatomic) NSString* m_nsTicket;
@property(retain, nonatomic) NSString* m_nsDes;
@property(assign, nonatomic) unsigned long m_uiPushTime;
@property(assign, nonatomic) BOOL m_bReaded;
@property(retain, nonatomic) NSString* m_nsSource;
+(id)thread_GetContactDetailFromMsg:(id)msg;
-(BOOL)isGoogleContactPush;
-(BOOL)isMobilePush;
-(BOOL)copyFieldFromContact:(id)contact;
-(id)toContact;
-(int)compare:(id)compare;
-(id)description;
-(BOOL)copyFieldFromPushContact:(id)pushContact;
-(void)getPushContactDes;
-(id)getPushContactSourceIcon;
-(void)getPushContactSource;
-(BOOL)isAddRequestContact;
-(BOOL)isWaitingForVerify;
-(BOOL)isVerifyRequestFromMe;
-(BOOL)isMsgSendFromMe;
-(BOOL)IsShake;
-(BOOL)IsLbs;
-(void)dealloc;
-(id)initWithMsgWrap:(id)msgWrap;
-(int)comparePushContactAscending:(id)ascending;
-(id)xmlForMessageWrapContent:(id)messageWrapContent OpCode:(unsigned long)code;
-(BOOL)genPushContactFromMsgWrap:(id)msgWrap;
-(void)checkSetRemark:(id)remark;
-(id)init;
@end

@interface CQQContact : CBaseContact {
	unsigned long m_uiAge;
	unsigned long m_uiUin;
	NSString* m_nsSign;
	NSString* m_nsAddress;
	NSString* m_nsBirthday;
}
@property(retain, nonatomic) NSString* m_nsBirthday;
@property(retain, nonatomic) NSString* m_nsAddress;
@property(retain, nonatomic, setter=setNsSignature:) NSString* m_nsSign;
@property(assign, nonatomic) unsigned long m_uiUin;
@property(assign, nonatomic) unsigned long m_uiAge;
-(id)description;
-(BOOL)isMyQQ;
-(BOOL)copyFrom:(id)from;
-(void)dealloc;
-(id)init;
@end

@interface CChatRoomVerifyContact : CContact {
	ChatRoomVerifyMsg* m_verifyMsg;
}
@property(retain, nonatomic) ChatRoomVerifyMsg* m_verifyMsg;
-(void)dealloc;
@end

@interface CContactMgr : MMService <MMService, MessageObserverDelegate, IContactProfileMgrExt, PBMessageObserverDelegate, IAcctStorageMgrExt, IMMLanguageMgrExt> {
	unsigned long m_uiLoadedType;
	CContactDB* m_oContactDB;
	CContactOPLog* m_oContactOPLog;
	NSMutableDictionary* m_dicContacts;
	NSMutableDictionary* m_dicEncodeContacts;
	BOOL m_bDataNeedReload;
	NSMutableDictionary* m_mapLastGetTime;
	NSMutableDictionary* m_dicHardCodeUsers;
	unsigned long m_uiDBVersion;
	CContact* m_oSelfContact;
	BOOL m_bIsSelfContactUpdated;
}
-(BOOL)ChangeNotifyStatus:(id)status withStatus:(BOOL)status2;
-(BOOL)ChangeNotifyStatusForChatRoom:(id)chatRoom withStatus:(BOOL)status;
-(void)main_onPushModifyContact:(id)contact;
-(id)thread_onBatchModifyChatRoomMember:(id)member;
-(id)thread_onpushBatchModContact:(id)contact;
-(BOOL)thread_onPushModifyContact:(id)contact isInit:(BOOL)init;
-(void)main_onPushDeleteContact:(id)contact;
-(BOOL)thread_onPushDeleteContact:(id)contact;
-(void)setSelfContactUpdated;
-(id)getSelfContact;
-(BOOL)SetFriendMetaFlag:(unsigned long)flag ForUser:(id)user;
-(unsigned long)GetFriendMetaFlag:(id)flag;
-(BOOL)isLastUpdateTimeExpired:(id)expired;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onGetContact:(id)contact;
-(id)HandleMemContact:(id)contact;
-(void)MainThread_ReloadContact:(id)contact;
-(void)thread_ReloadConact:(id)conact;
-(id)thread_HandleMemContact:(id)contact;
-(void)DidGetSXContactProfile:(id) withImage:(BOOL)image;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)main_onPushBatchModContact:(id)contact;
-(void)onLanguageChange;
-(void)onSettingChange;
-(void)onServiceClearData;
-(void)onServiceReloadData;
-(BOOL)onServiceMemoryWarning;
-(void)fixContactPluginOldData;
-(id)getGroupCardMemberList:(id)list;
-(BOOL)getContactsFromServer:(id)server;
-(void)addToGetContactMap:(id)getContactMap;
-(BOOL)checkIfForbiddenGetContact:(id)contact;
-(BOOL)syncAllSXContact;
-(BOOL)syncContacts:(id)contacts;
-(BOOL)syncContact:(id)contact;
-(void)tryLoadExtInfoForContact:(id)contact;
-(void)reloadContact:(id)contact;
-(BOOL)delayLoadAllContactInBackGround;
-(void)thread_saveContactImageStatus:(id)status Status:(id)status2 Image:(id)image;
-(void)reloadContactImageStatus:(id)status Status:(id)status2 Image:(id)image;
-(BOOL)setHDHeadUpdated:(id)updated;
-(BOOL)setContact:(id)contact chatState:(unsigned long)state;
-(BOOL)setContact:(id)contact sessionTop:(BOOL)top;
-(BOOL)setContact:(id)contact notifyOpen:(BOOL)open;
-(BOOL)setContact:(id)contact favour:(BOOL)favour;
-(BOOL)setContact:(id)contact typeBit:(unsigned long)bit set:(BOOL)set;
-(BOOL)setNoBlack:(id)black;
-(BOOL)setBlack:(id)black;
-(BOOL)setBlack:(id)black blackFlag:(BOOL)flag;
-(BOOL)setContact:(id)contact chatRoomData:(id)data;
-(BOOL)setContact:(id)contact owner:(id)owner;
-(BOOL)setContact:(id)contact mobileIdentify:(id)identify;
-(BOOL)setContact:(id)contact googleContactName:(id)name;
-(BOOL)setContact:(id)contact googleContactNickName:(id)name;
-(BOOL)setContact:(id)contact draft:(id)draft;
-(BOOL)setContact:(id)contact nickName:(id)name;
-(BOOL)setContact:(id)contact remark:(id)remark;
-(BOOL)modifyContactNickName:(id)name nickName:(id)name2;
-(BOOL)RemoveContactFromChatList:(id)chatList;
-(BOOL)deleteContact:(id)contact listType:(unsigned long)type;
-(BOOL)addFromMobileContact:(id)mobileContact;
-(BOOL)addFromQQContact:(id)qqcontact;
-(BOOL)addSXContact:(id)contact;
-(BOOL)addLocalContact:(id)contact listType:(unsigned long)type;
-(void)addContactInternal:(id)internal;
-(BOOL)addMMContact:(id)contact;
-(BOOL)addContact:(id)contact listType:(unsigned long)type;
-(BOOL)addContact:(id)contact listType:(unsigned long)type addScene:(unsigned long)scene;
-(id)getAllBrandContacts;
-(unsigned long)getContactCount:(unsigned long)count contactType:(unsigned long)type domain:(id)domain;
-(id)getContactList:(unsigned long)list contactType:(unsigned long)type domain:(id)domain;
-(BOOL)isInContactList:(id)contactList;
-(BOOL)isContactExist:(id)exist listType:(unsigned long)type contactType:(unsigned long)type3;
-(BOOL)isContactBlack:(id)black;
-(id)getContact:(id)contact listType:(unsigned long)type contactType:(unsigned long)type3;
-(id)getContactByNameForce:(id)force;
-(id)getContactByNameFromCache:(id)cache;
-(id)getContactByName:(id)name;
-(id)getContactByNameNotMySelf:(id)aSelf;
-(void)initDB:(id)db lock:(id)lock;
-(void)onSyncTContact:(id)contact;
-(void)onPushDeleteContact:(id)contact;
-(void)onGetUsrImgSingle:(id)single;
-(void)onPushModifyContact:(id)contact updateImage:(BOOL)image isInit:(BOOL)init;
-(void)onPushModifySXContact:(id)contact;
-(void)handleLocalField:(id)field oldContact:(id)contact;
-(id)reloadContact:(id)contact mergeImage:(id)image;
-(void)callOnModifyContactHeadImageExt:(id)ext;
-(void)callOnDeleteExt:(id)ext;
-(void)callOnModifyExt:(id)ext;
-(void)callOnModifyDraftExt:(id)ext;
-(void)internalDeleteContact:(id)contact;
-(void)internalModifyContact:(id)contact;
-(void)internalNewContact:(id)contact;
-(void)handleOfficalContactName:(id)name;
-(BOOL)isContactMatch:(id)match listType:(unsigned long)type contactType:(unsigned long)type3 domain:(id)domain;
-(int)interalReloadContacts:(unsigned long)contacts;
-(BOOL)isHardCodeContact:(id)contact;
-(void)addHardCodeContacts;
-(void)addAddHardcodeContact:(id)contact selector:(SEL)selector;
-(id)generateOfficialContact:(id)contact;
-(id)generatePluginContactNoListContact:(id)contact;
-(id)generatePluginContact:(id)contact;
-(id)generatePluginContact:(id)contact uiType:(unsigned long)type;
-(void)refreshPluginNickName;
-(BOOL)updateContactToDb:(id)db andImage:(BOOL)image;
-(BOOL)updateContactToDb:(id)db;
-(BOOL)addContactToDb:(id)db;
-(BOOL)addSelfContact;
-(BOOL)deleteSelfContact;
-(void)addDictoryDataToCache:(id)cache listType:(unsigned long)type;
-(int)autoreloadContacts:(unsigned long)contacts;
-(void)addSelfContactToCache;
-(void)removeContactFromDic:(id)dic;
-(void)setContactToDic:(id)dic forKey:(id)key;
-(id)getContactFromDic:(id)dic;
-(BOOL)isCacheAllLoaded;
-(void)SetReloadFlag;
-(void)dealloc;
-(void)removeListen;
-(void)initListen;
-(void)updateFieldForSelfContact;
-(id)init;
@end

@interface CContactOPLog : NSObject {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSMutableDictionary* m_dicSkipContacts;
}
-(BOOL)add_ModifyNotifyStatus:(id)status withStatus:(unsigned long)status2 NeedSync:(BOOL)sync;
-(BOOL)add_DeleteChatMsg:(id)msg sync:(BOOL)sync;
-(BOOL)add_DeleteChatContact:(id)contact sync:(BOOL)sync;
-(BOOL)add_ModifyContact:(id)contact sync:(BOOL)sync;
-(BOOL)add_ModifyContact:(id)contact addScene:(unsigned long)scene sync:(BOOL)sync;
-(BOOL)InsertOplog:(unsigned long)oplog Oplog:(id)oplog2;
-(BOOL)isSkipContact:(id)contact;
-(void)add_SkipContact:(id)contact;
-(void)notifySync;
-(void)initDB:(id)db lock:(id)lock;
-(void)dealloc;
-(id)init;
@end

@interface ContactProfileMgr : MMService <MMService, PBMessageObserverDelegate> {
	NSMutableDictionary* m_profiles;
	NSMutableDictionary* m_profileImages;
	BOOL m_isGettingProfile;
	BOOL m_isGettingProfileAndImage;
	unsigned long m_retryCount;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(id)unpackProfiles:(id)profiles;
-(void)parseBasicInfo:(id)info basicInfo:(id)info2;
-(void)parseExtInfo:(id)info extInfo:(id)info2;
-(unsigned long)decodeToInteger:(XmlReaderNode_t*)integer key:(const char*)key;
-(id)decodeToString:(XmlReaderNode_t*)string key:(const char*)key;
-(void)cleanUpContacts:(id)contacts withOpCode:(unsigned long)opCode;
-(void)updateContacts:(id)contacts withOpCode:(unsigned long)opCode andNames:(id)names;
-(void)GetSXContactProfileAndImages:(id)images;
-(void)GetSXContactProfileAndImage:(id)image;
-(void)GetQQContactProfileAndImages:(id)images;
-(void)GetQQContactProfileAndImage:(id)image;
-(void)GetSXContactProfiles:(id)profiles;
-(void)GetSXContactProfile:(id)profile;
-(void)GetQQContactProfiles:(id)profiles;
-(void)GetQQContactProfile:(id)profile;
-(void)InternalGetContactProfileAndImage:(id)image startNow:(BOOL)now;
-(void)InternalGetContactProfile:(id)profile startNow:(BOOL)now;
-(void)GetProfiles:(unsigned long)profiles;
-(void)dealloc;
-(id)init;
@end

@interface MMBizMenuItem : NSObject {
	NSString* _menuId;
	unsigned long _menuType;
	unsigned long _menuActionType;
	NSString* _name;
	NSString* _key;
	NSString* _value;
	NSArray* _arrSubMenu;
}
@property(retain, nonatomic) NSArray* arrSubMenu;
@property(retain, nonatomic) NSString* value;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* key;
@property(assign, nonatomic) unsigned long menuActionType;
@property(assign, nonatomic) unsigned long menuType;
@property(retain, nonatomic) NSString* menuId;
-(void)parseFromJsonDictionary:(id)jsonDictionary;
-(id)init;
-(void)dealloc;
@end

@interface MMBizMenuInfo : NSObject {
	unsigned long _uin;
	unsigned long _interativeMode;
	unsigned long _updateTime;
	NSArray* _arrMenu;
}
@property(retain, nonatomic) NSArray* arrMenu;
@property(assign, nonatomic) unsigned long updateTime;
@property(assign, nonatomic) unsigned long interactiveMode;
@property(assign, nonatomic) unsigned long uin;
-(void)parseFromJsonDictionary:(id)jsonDictionary;
-(id)init;
-(void)dealloc;
@end

@interface CQQContactMgr : MMService <MMService, MessageObserverDelegate, IContactProfileMgrExt> {
	CQQContactDB* m_oDB;
	NSMutableDictionary* m_dicContacts;
	BOOL m_bDataNeedReload;
}
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)DidGetQQContactProfile:(id) withImage:(BOOL)image;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)saveContactImageStatus:(id)status Status:(id)status2 Image:(id)image;
-(BOOL)syncAllQQContact;
-(BOOL)syncContacts:(id)contacts;
-(BOOL)syncContact:(id)contact;
-(BOOL)RemoveContactFromChatList:(id)chatList;
-(BOOL)setContact:(id)contact draft:(id)draft;
-(BOOL)setContact:(id)contact chatState:(unsigned long)state;
-(BOOL)addContact:(id)contact;
-(id)getContactByName:(id)name;
-(id)getAllContactInChatList;
-(void)initDB:(id)db lock:(id)lock;
-(BOOL)autoReload;
-(void)dealloc;
-(id)init;
-(void)initTestData;
-(void)initTestDataItem:(unsigned long)item name:(id)name;
-(BOOL)onGetQQContact:(id)contact withImage:(BOOL)image;
-(BOOL)onSyncQQContact:(id)contact;
-(void)internalDeleteContact:(id)contact;
-(void)internalModifyContact:(id)contact;
-(void)internalAddContact:(id)contact;
-(void)removeListen;
-(void)initListen;
@end

@interface StrangerContactMgr : MMService <MMService, PBMessageObserverDelegate> {
	BOOL m_bMemCacheNeedReload;
	NSMutableDictionary* m_dicContacts;
	NSMutableDictionary* m_dicLastAccessTime;
	NSMutableDictionary* m_lastUpdateTime;
	NSMutableArray* m_arrQueue;
	NSMutableArray* m_arrUploading;
	unsigned long m_uiCurEventID;
	NSMutableDictionary* m_dicEncodeNameToRealName;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)handleNewContact:(id)contact;
-(BOOL)InternalUpdateContact:(id)contact;
-(BOOL)checkIfForbiddenGetContact:(id)contact;
-(void)CheckQueue;
-(id)GetUsrArray;
-(void)forceUpdate:(id)update;
-(void)updateContact:(id)contact;
-(void)addContact:(id)contact;
-(id)getContactByName:(id)name;
-(void)SetAccessTime:(id)time;
-(BOOL)IsInQueue:(id)queue;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceReloadData;
-(void)dealloc;
-(void)onServiceInit;
-(void)clearMemoryCache;
-(void)saveData;
-(void)ReduceCache;
-(void)tryLoadData;
-(id)pathForTimeData;
-(id)pathForOldTimeData;
-(id)pathForData;
-(id)pathForOldData;
@end

@interface CDownloadVoiceMgr : MMObject <NotifyFromMainCtrlDelegate> {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSTimer* m_tmCheckDownloadQueue;
	unsigned long m_uiCurDownloadID;
	MMDelegateProxy<DownloadVoiceDelegate>* m_delNotifyToReceiver;
	unsigned long m_uiQueueCount;
	BOOL m_bAddQueue;
	BOOL m_bDBError;
}
@property(assign, nonatomic) MMDelegateProxy<DownloadVoiceDelegate>* m_delNotifyToReceiver;
@property(retain, nonatomic) NSTimer* m_tmCheckDownloadQueue;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(retain, nonatomic) CMMDB* m_oMMDB;
-(void)NotifyFromMainCtrl:(unsigned long)mainCtrl MessageInfo:(id)info Event:(unsigned long)event;
-(void)HandleDownloadOK:(id)ok;
-(void)AddToStat:(unsigned long)stat;
-(BOOL)WriteAudioFile:(id)file LocalID:(unsigned long)anId Offset:(unsigned long)offset Len:(unsigned long)len Data:(id)data;
-(void)HandleDownloadError:(id)error Happen:(unsigned long)happen;
-(void)PrepareForDownload:(id)download;
-(void)AddNewDownload:(id)download LocalID:(unsigned long)anId SvrID:(unsigned long)anId3 VoiceLen:(unsigned long)len VoiceTime:(unsigned long)time CreateTime:(unsigned long)time6 EndFlag:(unsigned long)flag;
-(void)OnSyncDownload:(id)download LocalID:(unsigned long)anId SvrID:(unsigned long)anId3 CreateTime:(unsigned long)time Xml:(id)xml Voice:(id)voice;
-(void)TimerCheckDownloadQueue;
-(void)DeleteMsg:(id)msg LocalID:(unsigned long)anId Happen:(unsigned long)happen;
-(BOOL)IsInDownloadQueue:(id)downloadQueue LocalID:(unsigned long)anId VoiceLen:(unsigned long)len EndFlag:(unsigned long)flag;
-(void)ReportDBError:(unsigned long)error;
-(void)Stop;
-(void)Start;
-(void)InitDownloadMgr:(id)mgr Lock:(id)lock Delegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface CDownloadVoiceEvent : NetCmdEvent {
	CDownloadVoiceWrap* m_wrapDownloadVoice;
}
@property(retain, nonatomic) CDownloadVoiceWrap* m_wrapDownloadVoice;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CUploadVoiceEvent : NetCmdEvent {
	CUploadVoiceWrap* m_wrapUploadVoice;
}
@property(retain, nonatomic) CUploadVoiceWrap* m_wrapUploadVoice;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CDownloadVoicePrtl : PrtlBase {
	CDownloadVoiceWrap* m_wrapDownloadVoice;
}
@property(retain, nonatomic) CDownloadVoiceWrap* m_wrapDownloadVoice;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CUploadVoicePrtl : PrtlBase {
	CUploadVoiceWrap* m_wrapUploadVoice;
}
@property(retain, nonatomic) CUploadVoiceWrap* m_wrapUploadVoice;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface DownloadImageMgr : NSObject <MessageObserverDelegate> {
	NSMutableArray* m_arrQueue;
	DownloadImageInfo* m_oCurInfo;
}
@property(retain, nonatomic) DownloadImageInfo* m_oCurInfo;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)DownloadFail:(long)fail;
-(void)DownloadFail:(long)fail Expired:(BOOL)expired;
-(void)HandleDownload:(id)download;
-(id)GetTempFilePath:(id)path;
-(id)GetFilePath:(id)path;
-(BOOL)CreateDownload;
-(BOOL)CreateImplGetImg:(id)img;
-(void)CheckQueue;
-(unsigned long)GetDownloadImageTotalLen:(id)len;
-(unsigned long)GetDownloadImagePartLen:(id)len;
-(void)StopDownloadImage:(id)image;
-(void)StartDownloadImage:(id)image HD:(BOOL)hd;
-(void)RemoveInfoFromQueue:(id)queue;
-(BOOL)CheckMsgIsInQueue:(id)queue;
-(void)StopCurrentDownload;
-(void)dealloc;
-(id)init;
@end

@interface UploadImageMgr : NSObject <PBMessageObserverDelegate> {
	NSMutableArray* m_arrQueue;
	UploadImageInfo* m_oCurUpload;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)UploadFail:(long)fail;
-(void)UploadOk:(id)ok;
-(BOOL)CreateUploadEvent:(unsigned long)event;
-(void)StartUploadImage:(id)image;
-(unsigned long)GetUploadPercent:(id)percent;
-(BOOL)IsUploading:(id)uploading;
-(void)CheckQueue;
-(unsigned long)GetTotalLen:(id)len;
-(void)dealloc;
-(id)init;
@end

@interface CMessageDB : NSObject {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
}
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(retain, nonatomic) CMMDB* m_oMMDB;
-(BOOL)RollBackTransation;
-(BOOL)CommitTransation;
-(BOOL)BeginTransation;
-(unsigned long)GetImgMsgCount:(id)count;
-(unsigned long)GetImgMsgCount:(id)count FromID:(unsigned long)anId CreateTime:(unsigned long)time;
-(id)GetImgLastMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit CreateTime:(unsigned long)time;
-(id)GetImgNextMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit CreateTime:(unsigned long)time;
-(id)GetLastMsgToUsr:(id)usr;
-(id)GetLastMsgFromUsr:(id)usr;
-(void)ModVoipMsgStatus:(id)status MsgWrap:(id)wrap;
-(void)ModMsgByBitSet:(id)set MsgWrap:(id)wrap BitSet:(unsigned long)set3;
-(void)ModLocationMsg:(id)msg MsgWrap:(id)wrap;
-(void)UpdatePimMsg:(id)msg LocalID:(unsigned long)anId Content:(id)content CreateTime:(unsigned long)time;
-(void)DropChatTable:(id)table;
-(BOOL)AddMsgReadOplog:(id)oplog SvrID:(unsigned long)anId LastStatus:(unsigned long)status CurStatus:(unsigned long)status4;
-(BOOL)InsertOplog:(unsigned long)oplog Oplog:(id)oplog2;
-(void)UpdateVideoMessage:(id)message MsgWrap:(id)wrap;
-(void)UpdateMessage:(id)message MsgWrap:(id)wrap;
-(void)UpdateVoiceMessage:(id)message MsgWrap:(id)wrap;
-(void)UpdateVoiceStatus:(id)status LocalID:(unsigned long)anId DownloadStatus:(unsigned long)status3;
-(unsigned long)GetMesCount:(id)count MesType:(unsigned long)type;
-(unsigned long)GetAllMesCount:(id)count;
-(unsigned long)GetUnReadCount:(id)count;
-(unsigned long)GetUnReadCountInHello:(id)hello;
-(unsigned long)GetCountInHello:(id)hello;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)ClearUnReadForSync:(id)sync SvrID:(unsigned long)anId;
-(BOOL)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(unsigned long)GetSayHelloStatus:(id)status LocalID:(unsigned long)anId;
-(BOOL)SetSayHelloStatus:(id)status LocalID:(unsigned long)anId Status:(unsigned long)status3;
-(BOOL)ClearHelloUnRead:(id)read HelloUser:(id)user;
-(void)DelHelloMsg:(id)msg HelloUser:(id)user;
-(id)GetHelloMsg:(id)msg HelloUser:(id)user Limit:(unsigned long)limit OnlyTo:(BOOL)to;
-(id)GetHelloUsers:(id)users Limit:(unsigned long)limit OnlyUnread:(BOOL)unread;
-(id)GetFirstUnreadMsg:(id)msg;
-(id)GetLastMsg:(id)msg;
-(id)GetMsg:(id)msg SvrID:(unsigned long)anId;
-(id)GetMsg:(id)msg LocalID:(unsigned long)anId;
-(id)QueryMsgByCreateTime:(id)time FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit Where:(id)where;
-(id)GetDownMsgByCreateTime:(id)time FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit;
-(id)GetMsgByCreateTime:(id)time FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit;
-(id)GetHelloMsg:(id)msg Where:(id)where Limit:(unsigned long)limit;
-(id)GetMsg:(id)msg Where:(id)where Limit:(unsigned long)limit;
-(void)GetMsgExt:(id)ext Msg:(id)msg;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsgToSendTable:(id)sendTable MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(BOOL)AddMessageToChatExt:(id)chatExt MsgWrap:(id)wrap DB:(id)db;
-(void)AddHelloMsg:(id)msg MsgWrap:(id)wrap HelloUser:(id)user OpCode:(unsigned long)code DES:(unsigned long)des checkCreateTime:(BOOL)time status:(unsigned long)status;
-(void)AddBackupMsg:(id)msg MsgWrap:(id)wrap;
-(void)InitDB:(id)db Lock:(id)lock;
-(void)HandleMessage:(id)message ChatName:(id)name Des:(unsigned long)des;
-(id)GetLocalUsrName:(id)name;
-(void)dealloc;
-(id)init;
@end

@interface CMessageMgr : MMService <MessageObserverDelegate, MMService, IAudioToMessageExt, IVideoExt, IEmoticonExt> {
	CMessageDB* m_oMsgDB;
	CNoteAgentStat* m_oNoteAgentStat;
	CUploadVideoMgr* m_oUploadVideoMgr;
	CDownloadVideoMgr* m_oDownloadVideoMgr;
	CEmoticonUploadMgr* m_oEmoticonUploadMgr;
	CEmoticonDownloadMgr* m_oEmoticonDownloadMgr;
	BOOL m_bCheckQueue;
	OpenUploadMgr* m_oOpenUploadMgr;
	OpenDownloadMgr* m_oOpenDownloadMgr;
	MessagePatternCacheMgr* m_oMessagePatternMgr;
	UploadImageMgr* m_oUploadImageMgr;
	DownloadImageMgr* m_oDownloadImageMgr;
	UploadImageCDNMgr* m_oUploadImageCdnMgr;
	DownloadImageCDNMgr* m_oDownloadImageCdnMgr;
	ThumbDownloadMgr* m_oThumbDownloadMgr;
	UploadVideoCDNMgr* m_oUploadVideoCdnMgr;
	DownloadVideoCDNMgr* m_oDownloadVideoCdnMgr;
	OpenUploadCDNMgr* m_oOpenUploadCDNMgr;
	OpenDownloadCDNMgr* m_oOpenDownloadCDNMgr;
}
+(id)GetPathOfOpenUploadCDNFile;
+(id)GetPathOfOpenUploadFile;
-(void)StartDownloadAppAttach:(id)attach MsgWrap:(id)wrap AttachId:(id)anId AttachDataSize:(unsigned long)size AttachFileExt:(id)ext;
-(BOOL)InAppAttachDownloading:(id)appAttachDownloading MsgWrap:(id)wrap;
-(BOOL)InAppAttachDownloading:(id)appAttachDownloading MsgWrap:(id)wrap AttachId:(id)anId;
-(BOOL)RollBackTransation;
-(BOOL)CommitTransation;
-(BOOL)BeginTransation;
-(unsigned long)GetDownloadThumbStatus:(id)status;
-(void)StartDownloadThumb:(id)thumb;
-(unsigned long)GetUploadPercent:(id)percent;
-(unsigned long)GetDownloadImageTotalLen:(id)len;
-(unsigned long)GetDownloadImagePartLen:(id)len;
-(void)StopDownloadImage:(id)image;
-(void)StartDownloadImage:(id)image HD:(BOOL)hd;
-(unsigned long)GetImgMsgCount:(id)count;
-(unsigned long)GetImgMsgCount:(id)count FromID:(unsigned long)anId CreateTime:(unsigned long)time;
-(id)GetImgLastMsg:(id)msg FromID:(unsigned long)anId CreateTime:(unsigned long)time;
-(id)GetImgNextMsg:(id)msg FromID:(unsigned long)anId CreateTime:(unsigned long)time;
-(void)onServiceClearData;
-(BOOL)onServiceMemoryWarning;
-(void)CheckQQPwd;
-(void)UpdateVideoMsg:(id)msg;
-(void)OnErrorByReceiver:(id)receiver ErrNo:(int)no;
-(void)OnErrorBySender:(id)sender ErrNo:(int)no;
-(void)OnMessageSentBySender:(id)sender;
-(void)OnAddMessageByReceiver:(id)receiver;
-(void)OnAddMessageBySender:(id)sender;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)HandleSvrCmd:(id)cmd MsgWrap:(id)wrap;
-(void)DelMsgPatten:(id)patten MsgWrap:(id)wrap;
-(id)GetLastMsgToUsr:(id)usr;
-(id)GetLastMsgFromUsr:(id)usr;
-(void)ModVoipMsgStatus:(id)status MsgWrap:(id)wrap;
-(void)CheckQueue;
-(id)GetRealChatName:(id)name;
-(void)StopDownloadAppAttach:(id)attach MsgWrap:(id)wrap;
-(void)StartDownloadAppAttach:(id)attach MsgWrap:(id)wrap;
-(void)AddAppMsg:(id)msg MsgWrap:(id)wrap Data:(id)data Scene:(unsigned long)scene;
-(void)StartUploadAppMsg:(id)msg MsgWrap:(id)wrap Scene:(unsigned long)scene;
-(void)SetGetLocationEnd:(id)end MsgWrap:(id)wrap;
-(void)UpdateEmoticonMsg:(id)msg;
-(void)SetEmoticonGameEnd:(id)end MsgWrap:(id)wrap;
-(void)StartDownloadEmoticon:(id)emoticon MsgWrap:(id)wrap;
-(void)AddEmoticonMsg:(id)msg MsgWrap:(id)wrap;
-(BOOL)AddBackupMsg:(id)msg MsgWrap:(id)wrap;
-(BOOL)backupMsgSrvIDExit:(id)exit MsgWrap:(id)wrap;
-(id)backupGetMsg:(id)msg SvrID:(unsigned long)anId;
-(void)AddLocalMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddPimMsg:(id)msg MsgWrap:(id)wrap;
-(void)DropChatTable:(id)table;
-(void)AddFloatBottle:(id)bottle MsgWrap:(id)wrap;
-(void)StopDownloadVideoByChatName:(id)name;
-(void)StopDownloadVideo:(id)video MsgWrap:(id)wrap;
-(void)StartDownloadVideo:(id)video MsgWrap:(id)wrap;
-(void)StopUploadVideoByChatName:(id)name;
-(void)StopUploadVideo:(id)video MsgWrap:(id)wrap;
-(void)StartUploadVideo:(id)video MsgWrap:(id)wrap;
-(void)AddVideoMsg:(id)msg ToUsr:(id)usr VideoInfo:(id)info;
-(void)UpdateMessage:(id)message MsgWrap:(id)wrap;
-(void)UpdateVoiceMessage:(id)message MsgWrap:(id)wrap;
-(void)UpdateVoiceStatus:(id)status LocalID:(unsigned long)anId DownloadStatus:(unsigned long)status3;
-(unsigned long)GetMesCount:(id)count MesType:(unsigned long)type;
-(unsigned long)GetAllMesCount:(id)count;
-(unsigned long)GetUnReadCountInHello:(id)hello;
-(unsigned long)GetCountInHello:(id)hello;
-(unsigned long)GetUnReadCount:(id)count;
-(void)DelMsg:(id)msg MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)ClearUnreadForSync:(id)sync SvrID:(unsigned long)anId;
-(void)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(unsigned long)GetSayHelloStatus:(id)status LocalID:(unsigned long)anId;
-(BOOL)SetSayHelloStatus:(id)status LocalID:(unsigned long)anId Status:(unsigned long)status3;
-(void)AddHelloMsgList:(id)list MsgList:(id)list2;
-(void)AddHelloMsg:(id)msg MsgWrap:(id)wrap HelloUser:(id)user OpCode:(unsigned long)code DES:(unsigned long)des checkCreateTime:(BOOL)time status:(unsigned long)status;
-(BOOL)ClearHelloUnRead:(id)read HelloUser:(id)user;
-(void)DelHelloMsg:(id)msg HelloUser:(id)user;
-(id)GetHelloMsg:(id)msg HelloUser:(id)user Limit:(unsigned long)limit OnlyTo:(BOOL)to;
-(id)GetHelloUsers:(id)users Limit:(unsigned long)limit OnlyUnread:(BOOL)unread;
-(void)CheckMessageStatus:(id)status Msg:(id)msg;
-(id)GetFirstUnreadMsg:(id)msg;
-(id)GetLastMsg:(id)msg;
-(id)GetMsg:(id)msg SvrID:(unsigned long)anId;
-(id)GetMsg:(id)msg LocalID:(unsigned long)anId;
-(id)QueryMsgFromChat:(id)chat queryText:(id)text FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count;
-(id)GetDownMsgByCreateTime:(id)time FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count;
-(id)GetMsgByCreateTime:(id)time FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(void)HandleMsgList:(id)list MsgList:(id)list2;
-(void)ResendMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsgByBitSet:(id)set MsgWrap:(id)wrap BitSet:(unsigned long)set3;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)AsyncOnCheckQQ;
-(void)AsyncOnModMsg:(id)msg MsgWrap:(id)wrap;
-(BOOL)IsVideoMsgdDownloadIng:(id)ing;
-(BOOL)IsVideoMsgUploadIng:(id)ing;
-(void)InitMsgMgr:(id)mgr Lock:(id)lock;
-(BOOL)SaveMesVoice:(id)voice MsgWrap:(id)wrap;
-(BOOL)SaveMesThumb:(id)thumb MsgWrap:(id)wrap;
-(BOOL)SaveMesImg:(id)img MsgWrap:(id)wrap;
-(void)dealloc;
-(id)init;
-(void)MainThreadNotifyToExt:(id)ext;
-(void)AsyncOnPushMsg:(id)msg;
-(void)AsyncOnDelMsg:(id)msg MsgWrap:(id)wrap;
-(void)AsyncOnSendVoiceError:(id)error MsgWrap:(id)wrap ErroNO:(unsigned long)no;
-(void)AsyncOnUnReadChange:(id)change;
-(void)AsyncOnDelMsg:(id)msg DelAll:(BOOL)all;
-(void)AsyncOnDelMsg:(id)msg;
-(void)AsyncOnMsgNotAddDBSession:(id)session MsgList:(id)list;
-(void)AsyncOnSpecialSession:(id)session MsgList:(id)list;
-(void)AsyncOnNotAddDBMessage:(id)message MsgWrap:(id)wrap;
-(void)AsyncOnAddMsgForSession:(id)session MsgWrap:(id)wrap;
-(void)AsyncOnAddMsgListForSession:(id)session NotifyUsrName:(id)name;
-(void)AsyncOnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)AsyncOnPreAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)UpdateVideoStatus:(id)status;
-(BOOL)IsImageMsgUploadIng:(id)ing;
-(id)escapeKeywordForQueryString:(id)queryString;
-(BOOL)isContact:(id)contact ConfirmToQueryString:(id)queryString;
-(void)BackGroundAddHelloMsg:(id)msg;
@end

@interface MessagePatternInfo : NSObject <NSCoding> {
	unsigned long m_uiLocalID;
	NSString* m_nsPattern;
}
@property(retain, nonatomic) NSString* m_nsPattern;
@property(assign, nonatomic) unsigned long m_uiLocalID;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface MessagePatternWrap : NSObject {
	NSMutableArray* m_arrPatternList;
	BOOL m_bChange;
	NSString* m_nsChatName;
	dispatch_queue_s* m_worker;
}
@property(retain, nonatomic) NSString* m_nsChatName;
@property(assign) BOOL m_bChange;
@property(retain, nonatomic) NSMutableArray* m_arrPatternList;
+(id)GetPathOfPatternCache:(id)patternCache;
-(void)DelMsgPatten:(id)patten;
-(void)DelMsg:(id)msg;
-(void)SetPattern:(id)pattern;
-(id)GetPattern:(id)pattern;
-(BOOL)isBrandContactMsg:(id)msg;
-(void)RemoveFromFile;
-(void)SaveToFile;
-(void)doSaveToFile:(id)file;
-(void)LoadFromFile;
-(void)dealloc;
-(id)InitWithChatName:(id)chatName andWorker:(dispatch_queue_s*)worker;
@end

@interface MessagePatternCacheMgr : NSObject <IMMFontMgrExt> {
	NSMutableDictionary* m_dicCache;
	dispatch_queue_s* m_worker;
}
-(void)OnMemoryWarning;
-(void)onFontSizeChange;
-(void)DelMsgPatten:(id)patten MsgWrap:(id)wrap;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)SaveCache:(id)cache;
-(void)SetMsgPattern:(id)pattern MsgWrap:(id)wrap;
-(id)GetMsgPattern:(id)pattern MsgWrap:(id)wrap;
-(void)ClearAllCache;
-(void)dealloc;
-(id)init;
@end

@interface CCatchUnImplementMethod : NSObject {
}
-(long long)catchUnImplementMethod;
@end

@interface CMessageWrap : NSObject <IAppMsgPathMgr, IMsgExtendOperation, NSCopying> {
	BOOL m_bIsSplit;
	BOOL m_bNew;
	unsigned long m_uiMesLocalID;
	unsigned long m_uiMesSvrID;
	NSString* m_nsFromUsr;
	NSString* m_nsToUsr;
	unsigned long m_uiMessageType;
	NSString* m_nsContent;
	unsigned long m_uiStatus;
	unsigned long m_uiImgStatus;
	unsigned long m_uiCreateTime;
	NSString* m_nsPushContent;
	NSString* m_nsMsgSource;
	NSString* m_nsRealChatUsr;
	NSData* m_dtThumbnail;
	unsigned long m_uiSendTime;
	unsigned long m_uiEmojiStatFlag;
	NSString* m_nsPattern;
	BOOL m_bForward;
	BOOL m_bCdnForward;
	unsigned long m_uiPercent;
	unsigned long m_uiDownloadStatus;
	id<IMsgExtendOperation> m_extendInfoWithMsgType;
	id<IMsgExtendOperation> m_extendInfoWithFromUsr;
	NSString* m_nsLastDisplayContent;
	NSString* m_nsSrcUserName;
	NSString* m_nsSrcNickName;
	unsigned long m_uiSrcCreateTime;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(retain, nonatomic) NSString* m_nsMsgAttachUrl;
@property(assign, nonatomic) unsigned long m_uiApiSDKVersion;
@property(retain, nonatomic) NSString* m_nsAppID;
@property(retain, nonatomic) NSString* m_nsAppAttachID;
@property(retain, nonatomic) NSString* m_nsAppFileExt;
@property(retain, nonatomic) NSString* m_nsMsgDataUrl;
@property(assign, nonatomic) unsigned long m_uiAppDataSize;
@property(assign, nonatomic) unsigned long m_uiVoipStatus;
@property(assign, nonatomic) unsigned long m_uiAppMsgInnerType;
@property(retain, nonatomic) NSString* m_nsDisplayName;
@property(assign, nonatomic) unsigned long m_uiUploadStatus;
@property(retain, nonatomic) NSString* m_nsImgSrc;
@property(retain, nonatomic) NSArray* m_arrReaderWaps;
@property(retain, nonatomic) NSString* m_nsEmoticonMD5;
@property(assign, nonatomic) unsigned long m_uiMsgThumbHeight;
@property(assign, nonatomic) unsigned long m_uiMsgThumbWidth;
@property(assign, nonatomic) unsigned long m_uiMsgThumbSize;
@property(retain, nonatomic) NSString* m_nsMsgThumbAesKey;
@property(retain, nonatomic) NSString* m_nsMsgThumbUrl;
@property(retain, nonatomic) NSString* m_nsCommentUrl;
@property(retain, nonatomic) NSString* m_nsAesKey;
@property(assign, nonatomic) unsigned long m_uiSrcCreateTime;
@property(retain, nonatomic) NSString* m_nsSrcNickName;
@property(retain, nonatomic) NSString* m_nsSrcUserName;
@property(assign, nonatomic) unsigned long m_uiDownloadStatus;
@property(assign, nonatomic) unsigned long m_uiPercent;
@property(retain, nonatomic) NSString* m_nsPattern;
@property(assign, nonatomic) unsigned long m_uiEmojiStatFlag;
@property(assign, nonatomic) unsigned long m_uiSendTime;
@property(assign, nonatomic) BOOL m_bNew;
@property(assign, nonatomic) BOOL m_bIsSplit;
@property(retain, nonatomic) NSData* m_dtThumbnail;
@property(assign, nonatomic) BOOL m_bCdnForward;
@property(assign, nonatomic) BOOL m_bForward;
@property(retain, nonatomic) id<IMsgExtendOperation> m_extendInfoWithFromUsr;
@property(retain, nonatomic) id<IMsgExtendOperation> m_extendInfoWithMsgType;
@property(retain, nonatomic) NSString* m_nsRealChatUsr;
@property(retain, nonatomic) NSString* m_nsMsgSource;
@property(retain, nonatomic) NSString* m_nsPushContent;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(assign, nonatomic) unsigned long m_uiImgStatus;
@property(assign, nonatomic) unsigned long m_uiStatus;
@property(retain, nonatomic) NSString* m_nsContent;
@property(assign, nonatomic) unsigned long m_uiMessageType;
@property(retain, nonatomic) NSString* m_nsToUsr;
@property(retain, nonatomic) NSString* m_nsFromUsr;
@property(assign, nonatomic) unsigned long m_uiMesSvrID;
@property(assign, nonatomic) unsigned long m_uiMesLocalID;
@property(copy, nonatomic) NSString* m_nsEmoticonBelongToProductID;
@property(assign, nonatomic) unsigned long m_uiGameContent;
@property(assign, nonatomic) unsigned long m_uiGameType;
@property(assign, nonatomic) unsigned long m_uiEmoticonType;
@property(retain, nonatomic) NSString* m_nsImgMidUrl;
@property(retain, nonatomic) NSString* m_nsImgHDUrl;
@property(retain, nonatomic) ImageInfo* m_oImageInfo;
@property(retain, nonatomic) NSData* m_dtImg;
@property(assign, nonatomic) unsigned long m_uiNormalImgSize;
@property(assign, nonatomic) unsigned long m_uiHDImgSize;
@property(retain, nonatomic) NSString* m_mapType;
@property(retain, nonatomic) NSString* m_poiName;
@property(retain, nonatomic) NSString* m_locationLabel;
@property(assign, nonatomic) int m_mapScale;
@property(assign, nonatomic) double m_longitude;
@property(assign, nonatomic) double m_latitude;
@property(assign, nonatomic) BOOL m_isDirectSend;
@property(assign, nonatomic) BOOL m_bIsForceUpdate;
@property(retain, nonatomic) NSString* m_nsAppMessageAction;
@property(retain, nonatomic) NSString* m_nsAppMessageExt;
@property(retain, nonatomic) AppProductItem* m_oAppProductItem;
@property(retain, nonatomic) NSString* m_nsAppMediaTagName;
@property(assign, nonatomic) unsigned long m_uiEncryVer;
@property(retain, nonatomic) NSArray* m_arrCustomWrap;
@property(retain, nonatomic) NSString* m_nsAppName;
@property(retain, nonatomic) NSString* m_nsThumbUrl;
@property(assign, nonatomic) unsigned long m_uiOriginMsgSvrId;
@property(assign, nonatomic) unsigned long m_uiOriginFormat;
@property(assign, nonatomic) unsigned long m_uiRemindFormat;
@property(assign, nonatomic) unsigned long m_uiRemindAttachTotalLen;
@property(retain, nonatomic) NSString* m_nsRemindAttachId;
@property(assign, nonatomic) unsigned long m_uiRemindId;
@property(assign, nonatomic) unsigned long m_uiRemindTime;
@property(retain, nonatomic) NSString* m_nsSourceDisplayname;
@property(retain, nonatomic) NSString* m_nsSourceUsername;
@property(retain, nonatomic) NSString* m_nsAppExtInfo;
@property(assign, nonatomic) unsigned long m_uiAppExtShowType;
@property(assign, nonatomic) unsigned long m_uiAppVersion;
@property(retain, nonatomic) ShakePageItem* m_oShakeResult;
@property(retain, nonatomic) NSString* m_nsAppMediaLowBandDataUrl;
@property(retain, nonatomic) NSString* m_nsAppMediaDataUrl;
@property(retain, nonatomic) NSString* m_nsAppMediaLowUrl;
@property(retain, nonatomic) NSString* m_nsAppMediaUrl;
@property(retain, nonatomic) NSString* m_nsAppContent;
@property(assign, nonatomic) unsigned long m_uiShowType;
@property(retain, nonatomic) NSString* m_nsAppAction;
@property(retain, nonatomic) NSString* m_nsDesc;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(assign, nonatomic) long long m_i64VoipKey;
@property(assign, nonatomic) long m_iVoipRoomid;
@property(assign, nonatomic) unsigned long m_uiVoipInviteType;
@property(assign, nonatomic) unsigned long m_uiVoipRecvTime;
@property(retain, nonatomic) PushMailWrap* m_oPushMailWrap;
@property(assign, nonatomic) unsigned long m_uiVoiceCancelFlag;
@property(assign, nonatomic) unsigned long m_uiVoiceEndFlag;
@property(retain, nonatomic) NSData* m_dtVoice;
@property(assign, nonatomic) unsigned long m_uiVoiceForwardFlag;
@property(assign, nonatomic) unsigned long m_uiVoiceFormat;
@property(assign, nonatomic) unsigned long m_uiVoiceTime;
@property(assign, nonatomic) unsigned long m_uiVideoOffset;
@property(assign, nonatomic) unsigned long m_uiVideoSource;
@property(assign, nonatomic) unsigned long m_uiCameraType;
@property(assign, nonatomic) unsigned long m_uiVideoLen;
@property(assign, nonatomic) unsigned long m_uiVideoTime;
+(id)GetTempPathOfMsgThumb:(id)msgThumb;
+(id)GetPathOfMesVideoWithMessageWrap:(id)messageWrap;
+(id)getMsgImgThumb:(id)thumb;
+(id)getPathOfVideoMsgImgThumb:(id)videoMsgImgThumb;
+(id)getPathOfMsgImgThumb:(id)msgImgThumb;
+(id)getMsgImgData:(id)data;
+(id)getMsgImg:(id)img;
+(id)getPathOfMsgImg:(id)msgImg;
+(id)getMsgHDImgData:(id)data;
+(id)getMsgHDImg:(id)img;
+(id)getPathOfMsgHDImg:(id)msgHDImg;
+(id)getUserNameFromMsgWrap:(id)msgWrap;
+(BOOL)isSenderFromMsgWrap:(id)msgWrap;
+(id)FormMessageWrapFromBuffer:(id)buffer;
+(void)initialize;
+(id)getMessageListStatusImage:(unsigned long)image;
+(void)GetPathOfAppRemindAttach:(id)appRemindAttach retStrPath:(id*)path;
+(void)GetPathOfAppThumb:(id)appThumb LocalID:(unsigned long)anId retStrPath:(id*)path;
+(void)GetPathOfAppDataTemp:(id)appDataTemp LocalID:(unsigned long)anId retStrPath:(id*)path;
+(void)GetPathOfAppDataTemp:(id)appDataTemp LocalID:(unsigned long)anId AttachId:(id)anId3 retStrPath:(id*)path;
+(void)GetPathOfAppDataByUserName:(id)appDataByUserName andMessageWrap:(id)wrap retStrPath:(id*)path;
+(void)GetPathOfAppDataByUserName:(id)appDataByUserName andMessageWrap:(id)wrap andAttachId:(id)anId andAttachFileExt:(id)ext retStrPath:(id*)path;
+(void)GetPathOfAppData:(id)appData LocalID:(unsigned long)anId FileExt:(id)ext retStrPath:(id*)path;
+(void)GetPathOfAppDir:(id)appDir retStrPath:(id*)path;
-(BOOL)isShowAppMessageBlockButton;
-(BOOL)isShowAppBottomButton;
-(BOOL)isShowCommentButton;
-(id)keyDescription;
-(id)description;
-(BOOL)IsNeedChatExt;
-(id)GetThumb;
-(id)GetImg;
-(id)GetMsgClientMsgID;
-(BOOL)IsSameMsg:(id)msg;
-(BOOL)IsSendBySendMsg;
-(BOOL)IsAppMessage;
-(BOOL)IsVideoMsg;
-(BOOL)IsImgMsg;
-(BOOL)IsChatRoomMessage;
-(BOOL)IsMassSendMessage;
-(BOOL)IsBottleMessage;
-(BOOL)IsQQMessage;
-(BOOL)IsSxMessage;
-(id)GetChatName;
-(void)UpdateMsgSource;
-(void)ChangeForDisplay;
-(void)ChangeForBackup;
-(void)ChangeForMsgSource;
-(void)ChangeForChatRoom;
-(id)forwardingTargetForSelector:(SEL)selector;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)initWithMsgType:(int)msgType nsFromUsr:(id)usr;
-(id)initWithMsgType:(int)msgType;
-(id)init;
-(int)compareQQAscending:(id)ascending;
-(int)compareSXAscending:(id)ascending;
-(int)compareMessageAscending:(id)ascending;
-(int)compareMessageLocalIDDescending:(id)descending;
-(id)getNodeBtnList;
@end

@interface NewArrivalCountItem : NSObject <NSCoding> {
	NSString* m_nsUsrName;
	unsigned long m_uiMsgID;
	unsigned long m_uiArrivalCount;
}
@property(retain, nonatomic) NSString* m_nsUsrName;
@property(assign, nonatomic) unsigned long m_uiMsgID;
@property(assign, nonatomic) unsigned long m_uiArrivalCount;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface NewArrivalCountData : NSObject <NSCoding> {
	NSString* m_nsFile;
	NSMutableDictionary* m_dicHistory;
}
+(id)dataFromFile:(id)file;
-(BOOL)removeItem:(id)item;
-(BOOL)updateItem:(id)item arrivalCount:(unsigned long)count msgid:(unsigned long)msgid;
-(BOOL)setItem:(id)item;
-(id)getItem:(id)item;
-(id)getArrayItem;
-(BOOL)save;
-(void)afterLoadData:(id)data;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface NewArrivalCountMgr : MMService <MMService, IMsgExt> {
	NewArrivalCountData* m_data;
}
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnDelMsg:(id)msg;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)lastMessageChange:(id)change MsgWrap:(id)wrap;
-(void)lastMessageChange:(id)change msgid:(unsigned long)msgid msg:(id)msg;
-(BOOL)clearQQNewArrivalCountByName:(id)name;
-(BOOL)zeroQQNewArrivalCount;
-(unsigned long)getQQNewArrivalCount;
-(id)getQQNewArrivalList;
-(BOOL)zeroSXNewArrivalCount;
-(unsigned long)getSXNewArrivalCount;
-(id)getSXNewArrivalList;
-(BOOL)zeroBottleNewArrivalCount;
-(BOOL)clearBottleNewArrivalCount:(id)count;
-(unsigned long)getBottleNewArrivalCount;
-(id)getBottleNewArrivalList;
-(void)dealloc;
-(id)init;
-(void)zeroQQNewArrivalMsgItem;
-(void)zeroSXNewArrivalMsgItem;
-(void)callExt:(id)ext;
-(void)callBottleExt;
-(void)callQQExt;
-(void)callSXExt;
-(BOOL)loadData;
-(id)getPath;
@end

@interface CNoteAgentStat : NSObject {
	unsigned long m_uiTextCount;
	unsigned long m_uiImgCount;
	unsigned long m_uiVoiceCount;
	unsigned long m_uiVideoCount;
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSTimer* m_tmReport;
}
@property(retain, nonatomic) NSTimer* m_tmReport;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(retain, nonatomic) CMMDB* m_oMMDB;
-(void)AddMsg:(unsigned long)msg;
-(void)TimerCheckReport;
-(void)MainThreadSync;
-(BOOL)AddOplog:(unsigned long)oplog Count:(unsigned long)count;
-(void)Stop;
-(void)InitDB:(id)db Lock:(id)lock;
-(void)dealloc;
-(id)init;
@end

@interface OpenDownloadMgr : NSObject <PBMessageObserverDelegate> {
	NSMutableArray* m_queDownload;
	unsigned long m_uiCurEventID;
	OpenInfo* m_oCurDownloadInfo;
}
@property(retain, nonatomic) OpenInfo* m_oCurDownloadInfo;
@property(retain, nonatomic) NSMutableArray* m_queDownload;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)DownloadOK:(id)ok;
-(void)DownloadFail:(unsigned long)fail;
-(BOOL)CreateDownloadEvent;
-(void)CheckQueue;
-(void)StopDownloadByUsr:(id)usr;
-(void)StopDownload:(id)download MsgWrap:(id)wrap;
-(void)StopDownload:(id)download MsgWrap:(id)wrap AttachId:(id)anId;
-(void)StartDownload:(id)download MsgWrap:(id)wrap;
-(void)StartDownload:(id)download MsgWrap:(id)wrap AttachId:(id)anId AttachDataSize:(unsigned long)size AttachFileExt:(id)ext;
-(BOOL)InDownloading:(id)downloading MsgWrap:(id)wrap;
-(BOOL)InDownloading:(id)downloading MsgWrap:(id)wrap AttachId:(id)anId;
-(void)Pop;
-(id)GetTop;
-(void)ClearEventID;
-(void)dealloc;
-(id)init;
@end

@interface MMBizOrderInfo : NSObject {
	NSString* m_nsTransId;
	unsigned long m_uiTotalFee;
	NSString* m_nsGoodsName;
	unsigned long m_uiCreateTime;
	NSString* m_nsTradeStateName;
	unsigned long m_uiModifyTime;
	int m_ePayType;
	NSString* m_nsIapTotalFee;
}
@property(retain, nonatomic) NSString* m_nsIapTotalFee;
@property(assign, nonatomic) int m_ePayType;
@property(assign, nonatomic) unsigned long m_uiModifyTime;
@property(retain, nonatomic) NSString* m_nsTradeStateName;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(retain, nonatomic) NSString* m_nsGoodsName;
@property(assign, nonatomic) unsigned long m_uiTotalFee;
@property(retain, nonatomic) NSString* m_nsTransId;
-(void)dealloc;
@end

@interface MMBizOrderList : NSObject {
	BOOL m_isWCPayUser;
	int m_eGetOrderListScene;
	unsigned long m_uiTotalNumber;
	unsigned long m_uiTotalSceneNumber;
	unsigned long m_uiTotalSceneLeftNumber;
	unsigned long m_uiRecNumber;
	NSDictionary* m_dicExtInfo;
	NSArray* m_arrOrderList;
}
@property(retain, nonatomic) NSArray* m_arrOrderList;
@property(retain, nonatomic) NSDictionary* m_dicExtInfo;
@property(assign, nonatomic) unsigned long m_uiRecNumber;
@property(assign, nonatomic) unsigned long m_uiTotalSceneLeftNumber;
@property(assign, nonatomic) unsigned long m_uiTotalSceneNumber;
@property(assign, nonatomic) unsigned long m_uiTotalNumber;
@property(assign, nonatomic) int m_eGetOrderListScene;
@property(assign, nonatomic) BOOL m_isWCPayUser;
-(void)dealloc;
@end

@interface OpenInfo : NSObject <NSCoding> {
	unsigned long m_uiLocalID;
	NSString* m_nsUsrName;
	unsigned long m_uiCreateTime;
	unsigned long m_uiScene;
	CMessageWrap* m_wrapMsg;
	unsigned long m_uiStartPos;
	unsigned long m_uiAddQueueTime;
	BOOL m_bCheckMd5;
	NSString* m_nsAttachId;
	NSString* m_nsAttachFileExt;
	unsigned long m_uiAttachDataSize;
	unsigned long long m_ui64StartTime;
	BOOL m_bUpload;
	long m_nRetCode;
}
@property(assign, nonatomic) long m_nRetCode;
@property(assign, nonatomic) BOOL m_bUpload;
@property(assign, nonatomic) unsigned long m_uiAttachDataSize;
@property(retain, nonatomic) NSString* m_nsAttachFileExt;
@property(retain, nonatomic) NSString* m_nsAttachId;
@property(assign, nonatomic) BOOL m_bCheckMd5;
@property(assign, nonatomic) unsigned long m_uiAddQueueTime;
@property(assign, nonatomic) unsigned long m_uiStartPos;
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
@property(assign, nonatomic) unsigned long m_uiScene;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(retain, nonatomic) NSString* m_nsUsrName;
@property(assign, nonatomic) unsigned long m_uiLocalID;
-(id)GetStatInfo;
-(void)SetStartTime;
-(void)SetStatus;
-(BOOL)IsCanDownload;
-(BOOL)IsCanUpload;
-(void)GetMsg;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface OpenUploadMgr : NSObject <PBMessageObserverDelegate> {
	FIFOFileQueue* m_queUpload;
	unsigned long m_uiCurEventID;
	OpenInfo* m_oCurUploadInfo;
	BOOL m_bInitQueue;
}
@property(retain, nonatomic) OpenInfo* m_oCurUploadInfo;
@property(retain, nonatomic) FileQueue* m_queUpload;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)UploadOK:(BOOL)ok;
-(void)UploadFail:(unsigned long)fail;
-(BOOL)CreateUploadAppAttach;
-(BOOL)CreateCheckMd5Upload;
-(BOOL)CreateSendAppMsg;
-(BOOL)CreateUploadEvent;
-(void)CheckQueue;
-(void)StopUploadByUsr:(id)usr;
-(void)StopUpload:(id)upload MsgWrap:(id)wrap;
-(void)StartUpload:(id)upload MsgWrap:(id)wrap Scene:(unsigned long)scene;
-(void)ClearEventID;
-(void)InitQueue;
-(void)dealloc;
-(id)init;
@end

@interface SXSessionInfo : NSObject {
	CContact* m_contact;
	CMessageWrap* m_lastMessage;
	unsigned long m_unReadCount;
}
@property(assign, nonatomic) unsigned long m_unReadCount;
@property(retain, nonatomic) CMessageWrap* m_lastMessage;
@property(retain, nonatomic) CContact* m_contact;
-(int)compare:(id)compare;
-(void)dealloc;
@end

@interface SXSessionMgr : MMService <IMsgExt, MMService, IContactMgrExt, SessionDelegate, INewArrivalExt, IMMNewSessionMgrExt> {
	NSMutableArray* m_arrSessions;
	BOOL m_hasInit;
}
-(void)dealloc;
-(id)init;
-(void)unRegisterExt;
-(void)registerExt;
-(void)isUser:(id)user hasSpecalSessionInfo:(id*)info;
-(void)onDeleteSessionOfUser:(id)user;
-(void)isMessage:(id)message Handled:(BOOL*)handled;
-(void)isUser:(id)user Handled:(BOOL*)handled;
-(void)onSyncSXContactEnd;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)OnUnReadCountChange:(id)change;
-(void)OnDelMsg:(id)msg;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnPreAddMsg:(id)msg MsgWrap:(id)wrap;
-(id)GetSessionInfoByUsrName:(id)name Index:(unsigned*)index;
-(void)onSXNewArrivalCountChange:(unsigned long)change;
-(BOOL)zeroNewArrivalCount;
-(unsigned long)getNewArrivalCount;
-(id)getNewArrivalList;
-(void)DeleteAllSession;
-(void)DeleteSession:(unsigned long)session;
-(id)GetSessionInfo:(unsigned long)info;
-(unsigned long)GetCount;
-(id)GetLastMessage;
-(unsigned long)GetTotalUnreadCount;
-(void)loadData;
-(void)fireListener:(int)listener withIndex:(unsigned long)index;
-(id)genMainFrameSessionInfo;
-(int)updateSessionInfo:(id)info;
-(void)syncAllContact;
-(void)syncSessionContact;
@end

@interface CDownloadVideoWrap : NSObject {
	NSString* m_nsFromUsrName;
	NSString* m_nsToUsrName;
	unsigned long m_uiLocalID;
	unsigned long m_uiSvrID;
	unsigned long m_uiVideoTotalLen;
	unsigned long m_uiVideoStartPos;
	NSData* m_dtVideo;
	unsigned long m_uiNetwork;
}
@property(assign, nonatomic) unsigned long m_uiNetwork;
@property(retain, nonatomic) NSData* m_dtVideo;
@property(assign, nonatomic) unsigned long m_uiVideoStartPos;
@property(assign, nonatomic) unsigned long m_uiVideoTotalLen;
@property(assign, nonatomic) unsigned long m_uiSvrID;
@property(assign, nonatomic) unsigned long m_uiLocalID;
@property(retain, nonatomic) NSString* m_nsToUsrName;
@property(retain, nonatomic) NSString* m_nsFromUsrName;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CDownloadVideoMgr : NSObject <NotifyFromMainCtrlDelegate> {
	NSRecursiveLock* m_oLock;
	NSMutableArray* m_arrDownloadList;
	NSMutableArray* m_arrDownloadStatList;
	CMessageWrap* m_wrapCurDownloadMsg;
	unsigned long m_uiCurDownloadEventID;
}
@property(retain, nonatomic) CMessageWrap* m_wrapCurDownloadMsg;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
-(void)NotifyFromMainCtrl:(unsigned long)mainCtrl MessageInfo:(id)info Event:(unsigned long)event;
-(void)OnDownloadPartOK:(id)ok messageWrap:(id)wrap;
-(BOOL)CheckDownloadPart:(id)part messageWrap:(id)wrap;
-(void)OnDownloadPartFail:(id)fail RetCode:(long)code;
-(id)getDownloadingMesageWrap:(id)wrap;
-(void)StopDownloadByChatName:(id)name;
-(void)StopDownload:(id)download MsgWrap:(id)wrap;
-(void)interStopDownload:(id)download;
-(void)StartDownload:(id)download MsgWrap:(id)wrap;
-(id)GetMsg:(id)msg;
-(BOOL)IsMsgInDownloadQueue:(id)downloadQueue;
-(void)downloadVideo:(id)video;
-(BOOL)createDownloadEvent:(id)event;
-(void)Stop;
-(void)StopCurrentDownload;
-(void)resetCurrentDownloadStatus;
-(unsigned long)getFileSize:(id)size;
-(BOOL)saveData:(id)data file:(id)file;
-(id)getFilePath:(id)path;
-(void)updateMessageWrapDownload:(id)download offset:(unsigned long)offset;
-(void)logStatInfo:(id)info retCode:(long)code;
-(void)updateMessageWrap:(id)wrap downloadStatus:(unsigned long)status;
-(id)GetStatInfo:(id)info;
-(void)DelMsgInDownloadQueue:(id)downloadQueue;
-(void)InitWithLock:(id)lock;
-(void)dealloc;
-(id)init;
@end

@interface CDownloadVideoEvent : NetCmdEvent {
	CDownloadVideoWrap* m_wrapVideo;
}
@property(retain, nonatomic) CDownloadVideoWrap* m_wrapVideo;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CUploadVideoEvent : NetCmdEvent {
	CUploadVideoWrap* m_wrapVideo;
}
@property(retain, nonatomic) CUploadVideoWrap* m_wrapVideo;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CDownloadVideoPrtl : PrtlBase {
	CDownloadVideoWrap* m_wrapVideo;
}
@property(retain, nonatomic) CDownloadVideoWrap* m_wrapVideo;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CUploadVideoPrtl : PrtlBase {
	CUploadVideoWrap* m_wrapVideo;
}
@property(retain, nonatomic) CUploadVideoWrap* m_wrapVideo;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CUploadVideoMgr : NSObject <NotifyFromMainCtrlDelegate> {
	NSMutableArray* m_arrUploadList;
	CMessageWrap* m_wrapCurUploadMsg;
	unsigned long m_uiCurUploadEventID;
	unsigned long m_uiUploadMaxPacketLen;
}
@property(retain, nonatomic) CMessageWrap* m_wrapCurUploadMsg;
-(void)NotifyFromMainCtrl:(unsigned long)mainCtrl MessageInfo:(id)info Event:(unsigned long)event;
-(void)StopUpload:(id)upload MsgWrap:(id)wrap;
-(void)StartUpload:(id)upload MsgWrap:(id)wrap;
-(id)GetMsg:(id)msg;
-(BOOL)IsMsgInUploadQueue:(id)uploadQueue;
-(void)Stop;
-(void)InitWithLock:(id)lock;
-(void)UploadVideo:(id)video;
-(BOOL)CreateUploadEvent:(id)event;
-(BOOL)LoadMediaData:(id)data Path:(id)path Offset:(unsigned long)offset TotalLen:(unsigned long)len HasRead:(unsigned long)read RealRead:(unsigned*)read6 ReadData:(id)data7;
-(id)LoadDataFromPath:(id)path Offset:(unsigned long)offset Len:(unsigned long)len;
-(void)SendMsgFail:(id)fail RetCode:(long)code;
-(void)StopCurUpload;
-(void)DelMsgInUploadQueue:(id)uploadQueue;
-(id)GetUpdateInfoByID:(unsigned long)anId From:(id)from To:(id)to;
-(void)SetMaxPacketLenFor8K;
-(void)dealloc;
-(id)init;
@end

@interface MMNewSessionMgr : MMService <MMService, IMsgExt, IContactMgrExt, EmoticonDescMgrExt> {
	NSMutableArray* m_arrSession;
	id<MMSessionStorage> m_sessionStorage;
	NSString* m_nsActiveUserName;
	SessionSortLogic* m_oSessionSortLogic;
	unsigned long m_uiTotalUnReadCount;
}
-(void)checkAndMergeTopFlag;
-(void)onContactListUpdate:(unsigned long)update;
-(void)OnChangeNotifyStatus:(id)status withStatus:(BOOL)status2;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContactDraft:(id)draft;
-(void)onModifyContact:(id)contact;
-(void)checkSessionTop:(id)top contact:(id)contact;
-(void)OnUnReadCountChange:(id)change;
-(void)OnDelMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnDelMsg:(id)msg;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)onGetEmoticonDesc:(id)desc descList:(id)list;
-(void)OnAddMsgListForSession:(id)session NotifyUsrName:(id)name;
-(void)OnMsgNotAddDBNotify:(id)notify MsgWrap:(id)wrap;
-(void)recountUnReadCountAndFireExtension;
-(void)recountUnReadCount;
-(void)fulFillSession:(id)session;
-(unsigned long)getSessionIndexOfUser:(id)user;
-(void)deleteSessionAtIndex:(unsigned long)index forceDelete:(BOOL)aDelete;
-(BOOL)isNeedDeleteMsg:(id)msg forceDelete:(BOOL)aDelete;
-(BOOL)isNeedCallNewMsgArrival:(id)arrival;
-(void)processOnAddMsgWithNotifyFlag:(int)notifyFlag UsrName:(id)name;
-(BOOL)isNeedSaveSessionInfo:(id)info;
-(BOOL)isMsgNeedProcess:(id)process;
-(BOOL)isUserNeedProcess:(id)process;
-(void)processContactWhenAddMsg:(id)msg;
-(void)tryGetContactImage:(id)image;
-(void)resortSessions;
-(void)filterSessionDeleted:(id)deleted modified:(id)modified;
-(void)checkLoadData;
-(id)genSessionInfoByContact:(id)contact;
-(void)ReImportData;
-(void)AddSessionToTop:(id)top;
-(BOOL)isSessionTopable:(id)topable;
-(BOOL)IsTopSessionCountExceed;
-(void)UntopSessionByName:(id)name;
-(void)TopSessionByName:(id)name;
-(BOOL)IsSessionNeedDelayLoad;
-(void)DeleteAllSession;
-(unsigned long)GenSendMsgTime;
-(BOOL)HasActiveUser;
-(BOOL)IsActiveUser:(id)user;
-(void)SetActiveSession:(id)session;
-(id)GetUserNamesOnSessionList;
-(void)DeleteSessionWithoutDeleteMessage:(id)message;
-(void)DeleteSessionAtIndex:(unsigned long)index;
-(void)DeleteSessionOfUser:(id)user;
-(void)ChangeSessionUnReadCount:(id)count to:(unsigned long)to;
-(void)AddOrModifySession:(id)session withNotifyFlag:(int)notifyFlag;
-(id)SessionEnumerator;
-(unsigned long)GetTotalUnreadCount;
-(unsigned long)GetSessionIndexByUserName:(id)name;
-(id)GetSessionByUserName:(id)name;
-(void)AsyncFulFillSession:(id)session;
-(void)CleanupPreLoadSessionCache;
-(id)GetSessionInfoList;
-(id)GetSessionAtIndex:(unsigned long)index;
-(unsigned long)GetSessionCount;
-(void)onServiceReloadData;
-(void)dealloc;
-(void)onServiceInit;
@end

@interface MMSessionFileItem : NSObject {
}
+(id)fromData:(id)data;
+(BOOL)deleteSessionOfUser:(id)user;
+(id)loadSessionOfUser:(id)user;
+(BOOL)saveSession:(id)session;
@end

@interface MMSessionInfo : NSObject {
	NSString* m_nsUserName;
	NSString* m_nsFilePath;
	unsigned long m_uUnReadCount;
	BOOL m_bShowUnReadAsRedDot;
	CContact* m_contact;
	CMessageWrap* m_msgWrap;
	unsigned long m_uLastTime;
	BOOL m_bIsTop;
	unsigned long m_uTopTime;
	unsigned long m_uUnTopTime;
}
@property(assign, nonatomic) unsigned long m_uUnTopTime;
@property(assign, nonatomic) unsigned long m_uTopTime;
@property(assign, nonatomic) BOOL m_bIsTop;
@property(assign, nonatomic) unsigned long m_uLastTime;
@property(retain, nonatomic) CMessageWrap* m_msgWrap;
@property(retain, nonatomic) CContact* m_contact;
@property(assign, nonatomic) BOOL m_bShowUnReadAsRedDot;
@property(assign, nonatomic) unsigned long m_uUnReadCount;
@property(retain, nonatomic) NSString* m_nsFilePath;
@property(retain, nonatomic) NSString* m_nsUserName;
-(id)description;
-(int)compare:(id)compare;
-(void)tryLoadExtInfo;
-(void)dealloc;
-(id)init;
@end

@interface MMSessionSetting : NSObject <NSCoding> {
	long m_sessionImportTime;
	unsigned long m_sessionVersion;
	unsigned long m_sessionFailCount;
}
@property(assign) unsigned long m_sessionFailCount;
@property(assign) unsigned long m_sessionVersion;
@property(assign) long m_sessionImportTime;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
@end

@interface AbstractDB : CBaseDB {
}
-(void)UpdateSessionFilePath:(id)path;
-(BOOL)DeleteSessions:(id)sessions;
-(BOOL)DeleteSession:(id)session;
-(void)ImportSessions:(id)sessions;
-(BOOL)AddOrModifySessions:(id)sessions;
-(BOOL)AddOrModifySession:(id)session;
-(id)GetAllSession;
-(id)getSessionsByCondition:(id)condition andGroupBy:(id)by andOrder:(id)order andLimit:(unsigned long)limit;
-(BOOL)CreateSessionAbstractTable;
-(void)RegisterTypeOfCol;
-(void)reloadDatabase;
-(void)dealloc;
-(id)init;
-(BOOL)initDB;
@end

@interface MMSessionStorageAbstractDB : NSObject <MMSessionStorage> {
	AbstractDB* m_database;
	NSMutableDictionary* m_sessionCache;
	MMSessionSetting* m_sessionSetting;
	NSCache* m_preLoadSessionCache;
}
-(void)UpdateSessionFilePath:(id)path;
-(void)DeleteSessions:(id)sessions;
-(void)DeleteSessionByUserName:(id)name;
-(void)AddOrModifySessions:(id)sessions;
-(void)ModifySession:(id)session;
-(void)AddSession:(id)session;
-(void)FulFillSession:(id)session;
-(void)ASyncFulFillSession:(id)session;
-(void)CleanupPreLoadSessionCache;
-(void)FulFillSessions:(id)sessions;
-(id)GetAllSession;
-(void)SetSessionFailCount:(unsigned long)count;
-(unsigned long)GetSessionFailCount;
-(void)SetSessionVersion:(unsigned long)version;
-(unsigned long)GetSessionVersion;
-(void)ImportSessions:(id)sessions;
-(long)GetSessionImportTime;
-(void)SetSessionImported;
-(void)saveSessionSetting;
-(void)tryLoadSessionSetting;
-(void)dealloc;
-(id)init;
@end

@interface WebViewJSEventHandler_launch3rdApp : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface SessionCacheItem : NSObject <NSCoding> {
	NSString* m_nsUsrName;
	NSString* m_nsAliasName;
	unsigned long m_uiConType;
	NSString* m_nsNickName;
	NSString* m_nsFullPY;
	NSString* m_nsRemark;
	NSString* m_nsRemarkPYShort;
	NSString* m_nsRemarkPYFull;
	unsigned long m_uiSex;
	unsigned long m_uiType;
	unsigned long m_uiChatState;
	NSString* m_nsImgStatus;
	NSString* m_nsHDImgStatus;
	NSString* m_nsDraft;
	unsigned long m_uiQQUin;
	NSString* m_nsQQNickName;
	NSString* m_nsQQRemark;
	NSString* m_nsMobileIdentify;
	unsigned long m_uiFriendScene;
	unsigned long m_uiChatStatus;
	NSString* m_nsChatRoomMemList;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
	NSString* m_nsOwner;
	NSString* m_nsWeiboAddress;
	NSString* m_nsWeiboNickName;
	unsigned long m_uiWeiboFlag;
	NSString* m_nsFBNickName;
	NSString* m_nsFBID;
	unsigned long m_uiNeedUpdate;
	NSString* m_nsWCBGImgObjectID;
	int m_iWCFlag;
	NSString* m_nsWCBGImgID;
	NSString* m_nsExternalInfo;
	NSString* m_nsBrandSubscriptConfigUrl;
	unsigned long m_uiBrandSubscriptionSettings;
	SubscriptBrandInfo* m_subBrandInfo;
	NSString* m_nsBrandIconUrl;
	unsigned long m_uiMesSvrID;
	unsigned long m_uiMesLocalID;
	NSString* m_nsFromUsr;
	NSString* m_nsToUsr;
	unsigned long m_uiMessageType;
	NSString* m_nsContent;
	unsigned long m_uiStatus;
	unsigned long m_uiImgStatus;
	unsigned long m_uiDownloadStatus;
	NSString* m_nsRealChatUsr;
	unsigned long m_uiCreateTime;
	unsigned long m_uiUnReadCount;
	BOOL m_bIsTop;
}
@property(assign, nonatomic) BOOL m_bIsTop;
@property(assign, nonatomic) unsigned long m_uiUnReadCount;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(retain, nonatomic) NSString* m_nsRealChatUsr;
@property(assign, nonatomic) unsigned long m_uiDownloadStatus;
@property(assign, nonatomic) unsigned long m_uiImgStatus;
@property(assign, nonatomic) unsigned long m_uiStatus;
@property(retain, nonatomic) NSString* m_nsContent;
@property(assign, nonatomic) unsigned long m_uiMessageType;
@property(retain, nonatomic) NSString* m_nsToUsr;
@property(retain, nonatomic) NSString* m_nsFromUsr;
@property(assign, nonatomic) unsigned long m_uiMesLocalID;
@property(assign, nonatomic) unsigned long m_uiMesSvrID;
@property(retain, nonatomic) NSString* m_nsBrandIconUrl;
@property(retain, nonatomic) SubscriptBrandInfo* m_subBrandInfo;
@property(assign, nonatomic) unsigned long m_uiBrandSubscriptionSettings;
@property(retain, nonatomic) NSString* m_nsBrandSubscriptConfigUrl;
@property(retain, nonatomic) NSString* m_nsExternalInfo;
@property(retain, nonatomic) NSString* m_nsWCBGImgID;
@property(assign, nonatomic) int m_iWCFlag;
@property(retain, nonatomic) NSString* m_nsWCBGImgObjectID;
@property(assign, nonatomic) unsigned long m_uiNeedUpdate;
@property(retain, nonatomic) NSString* m_nsFBID;
@property(retain, nonatomic) NSString* m_nsFBNickName;
@property(assign, nonatomic) unsigned long m_uiWeiboFlag;
@property(retain, nonatomic) NSString* m_nsWeiboNickName;
@property(retain, nonatomic) NSString* m_nsWeiboAddress;
@property(retain, nonatomic) NSString* m_nsOwner;
@property(retain, nonatomic) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
@property(retain, nonatomic) NSString* m_nsChatRoomMemList;
@property(assign, nonatomic) unsigned long m_uiChatStatus;
@property(assign, nonatomic) unsigned long m_uiFriendScene;
@property(retain, nonatomic) NSString* m_nsMobileIdentify;
@property(retain, nonatomic) NSString* m_nsQQRemark;
@property(retain, nonatomic) NSString* m_nsQQNickName;
@property(assign, nonatomic) unsigned long m_uiQQUin;
@property(retain, nonatomic) NSString* m_nsDraft;
@property(retain, nonatomic) NSString* m_nsHDImgStatus;
@property(retain, nonatomic) NSString* m_nsImgStatus;
@property(assign, nonatomic) unsigned long m_uiChatState;
@property(assign, nonatomic) unsigned long m_uiType;
@property(assign, nonatomic) unsigned long m_uiSex;
@property(retain, nonatomic) NSString* m_nsRemarkPYFull;
@property(retain, nonatomic) NSString* m_nsRemarkPYShort;
@property(retain, nonatomic) NSString* m_nsRemark;
@property(retain, nonatomic) NSString* m_nsFullPY;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(assign, nonatomic) unsigned long m_uiConType;
@property(retain, nonatomic) NSString* m_nsAliasName;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(id)toSessionInfo;
-(void)setFromSessionInfo:(id)sessionInfo;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface SessionCacheData : NSObject <NSCoding> {
	NSMutableArray* m_arrSessionCacheItem;
}
-(id)toSessions;
-(void)setFromSessions:(id)sessions;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface NewSessionCacheData : NSObject {
	NSMutableArray* m_arrSessionCacheItems;
	NSMutableDictionary* m_dicSeliazed;
	NSMutableDictionary* m_dicSessionCacheItems;
}
@property(retain, nonatomic) NSMutableDictionary* m_dicSessionCacheItems;
@property(retain, nonatomic) NSMutableDictionary* m_dicSeliazed;
@property(retain, nonatomic) NSMutableArray* m_arrSessionCacheItems;
+(id)parseFromData:(id)data;
-(id)toSessions;
-(void)setFromSessions:(id)sessions;
-(id)serializedData;
-(void)dealloc;
-(id)init;
@end

@interface SessionCacheLogic : NSObject {
	NewSessionCacheData* m_seCacheData;
	SessionCacheValidInfo* m_seCacheValidInfo;
}
-(long)getCacheValidTime;
-(long)getOldCacheValidTime;
-(void)removeCacheData;
-(void)removeOldCacheData;
-(id)loadOldCacheData;
-(BOOL)isOldCacheValid;
-(id)loadCacheData;
-(BOOL)isCacheValid;
-(void)checkLoadCacheData;
-(void)checkLoadCacheValidInfo;
-(id)getCacheDataFilePath;
-(id)getCacheValidInfoFilePath;
-(id)getOldCacheDataFilePath;
-(id)getOldCacheValidInfoFilePath;
-(void)dealloc;
-(id)init;
@end

@interface SessionCacheValidInfo : NSObject <NSCoding> {
	unsigned long m_uiCacheValid;
	unsigned long m_uiCacheVer;
	unsigned long m_uiFailCount;
}
@property(assign, nonatomic) unsigned long m_uiFailCount;
-(BOOL)isValid;
-(void)setValid:(BOOL)valid;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface SessionSortCache : NSObject <PBCoding> {
	NSMutableDictionary* dicUsrNameUntopTime;
	NSMutableDictionary* dicUsrNameTopTime;
	BOOL hasMergeTopFlag;
}
@property(assign, nonatomic) BOOL hasMergeTopFlag;
@property(retain, nonatomic) NSMutableDictionary* dicUsrNameTopTime;
@property(retain, nonatomic) NSMutableDictionary* dicUsrNameUntopTime;
+(void)initialize;
+(void)_initPBTableOfSessionSortCache;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface SessionSortLogic : NSObject {
	SessionSortCache* _oSessionSortCache;
}
-(void)setMergeFlag;
-(BOOL)hasMergeFlag;
-(BOOL)isTopSessionCountExceed;
-(id)getUntopTime:(id)time;
-(id)getTopTime:(id)time;
-(void)RemoveUntopSession;
-(void)UntopSession:(id)session;
-(void)TopSession:(id)session;
-(id)getCurrentDate;
-(void)ReloadCache;
-(void)SaveCache;
-(void)LoadCache;
-(void)LoadSortDataInternal;
-(void)saveSortDataInternal;
-(id)getSortCacheDataFilePath;
-(id)getOldSortCacheDataFilePath;
-(void)dealloc;
-(id)init;
@end

@interface PrivateSettingUtil : NSObject {
}
+(void)setCanFindMeByContactName:(BOOL)name;
+(BOOL)canFindMeByContactName;
@end

@interface SyncBufferInfo : NSObject {
	NSData* m_dtSyncBuffer;
	NSString* m_nsUserName;
}
@property(readonly, assign, nonatomic) NSString* m_nsUserName;
@property(readonly, assign, nonatomic) NSData* m_dtSyncBuffer;
-(void)dealloc;
-(id)initWithUserName:(id)userName SyncBuffer:(id)buffer;
@end

@interface AccountStorageMgr : MMService <MMService> {
	CLocalInfo* m_oLocalInfo;
	CSetting* m_oSetting;
	CSettingExt* m_oSettingExt;
	CUpdateInfo* m_oUpdateInfo;
	NSRecursiveLock* m_oLock;
	NSString* m_nsDocPath;
	SyncBufferInfo* m_oSyncBufferInfo;
	NSData* m_dtKFSyncBuffer;
	BOOL m_testMemoryInvalid;
	BOOL m_testPhysicalInvalid;
	BOOL m_testSettingInvalid;
}
@property(retain, nonatomic) NSString* m_nsDocPath;
@property(copy, nonatomic) CUpdateInfo* m_oUpdateInfo;
@property(copy, nonatomic) CSettingExt* m_oSettingExt;
@property(copy, nonatomic) CSetting* m_oSetting;
@property(copy, nonatomic) CLocalInfo* m_oLocalInfo;
-(void)clearSyncBuffer;
-(void)onServiceClearData;
-(id)GetKFSyncBuffer;
-(BOOL)MergeAndSaveKFSyncBuffer:(id)buffer;
-(id)GetKFSyncBufferFilePath;
-(id)GetSyncBuffer;
-(BOOL)SaveSyncBuffer:(id)buffer;
-(BOOL)MergeAndSaveSyncBuffer:(id)buffer;
-(id)GetSyncBufferFilePath;
-(void)ClearLocalInfo;
-(void)SaveLocalInfo:(BOOL)info;
-(void)LoadLocalInfo;
-(id)GetUpdateInfo;
-(void)SaveUpdateInfo;
-(void)LoadUpdateInfo;
-(void)SaveSettingExt;
-(void)LoadSettingExt;
-(void)MainThreadSaveSetting;
-(void)DirectSaveSetting;
-(void)LoadSetting;
-(BOOL)ValidForSettingInfo;
-(BOOL)ValidForMemorySyncBuffer;
-(BOOL)ValidForPhysicalSyncBuffer;
-(void)ResetMemorySyncBuffer;
-(void)dealloc;
-(void)closeResource;
-(void)initWithDocPath:(id)docPath;
-(id)init;
@end

@interface CLocalInfo : NSObject <NSCoding> {
	NSString* m_nsCurUsrName;
	NSString* m_nsLastUserName;
	NSString* m_nsLastLoginName;
	NSString* m_nsLastApnsToken;
	NSData* m_dtLastKSid;
	unsigned long m_uiRegType;
}
@property(assign, nonatomic) unsigned long m_uiRegType;
@property(retain, nonatomic) NSData* m_dtLastKSid;
@property(retain, nonatomic) NSString* m_nsLastApnsToken;
@property(retain, nonatomic) NSString* m_nsLastLoginName;
@property(retain, nonatomic) NSString* m_nsLastUserName;
@property(retain, nonatomic) NSString* m_nsCurUsrName;
-(void)copyFromLocalInfo:(id)localInfo;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface CSetting : NSObject <NSCoding> {
	unsigned long m_uiUin;
	NSString* m_nsUsrName;
	NSString* m_nsAliasName;
	NSString* m_nsNickName;
	BOOL m_bSyncNickName;
	NSString* m_nsEmail;
	NSString* m_nsMobile;
	unsigned long m_uiStatus;
	NSString* m_nsPassWordMD5;
	BOOL m_bNewMsgSound;
	BOOL m_bNewMsgVibration;
	unsigned long m_uiSyncKey;
	NSString* m_nsSyncBuffer;
	NSString* m_nsMMdevName;
	NSString* m_nsMMdevNick;
	unsigned long m_uiLastTimeOfNotifyOpenPush;
	NSString* m_nsMicroBlogUsrName;
	BOOL m_bRevPrivateMsg;
	BOOL m_bPushPrivateMsg;
	unsigned long m_uiShowWhatsnewVersion;
	unsigned long m_uiShowFirstTimeTipsVersion;
	unsigned long m_uiCryptUin;
	NSString* m_nsGoogleContactName;
	unsigned long m_uiLastInitVersion;
	unsigned long m_uiInitSyncKey;
	NSString* m_nsInitBuffer;
	unsigned long m_uiInitStatus;
	NSString* m_nsPwd16MD5;
	BOOL m_bAuthAnotherPlace;
	unsigned long m_uiPushMailSwitchStatus;
	BOOL m_bQQOfflineSwitchStatus;
	unsigned long m_uiDefaultChatState;
	BOOL m_bReplyToAddContact;
	unsigned long m_uiSendCardType;
	NSString* m_nsPushmailFolderUrl;
	NSData* m_dtSyncBuffer;
	NSString* m_nsUinPwdMD5;
	NSString* m_nsUin16PwdMD5;
	unsigned long m_uiSex;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
	unsigned long m_uiPersonalCardStatus;
	NSString* m_nsHDHeadImgMD5;
	NSString* m_nsHDImgStatus;
	unsigned long m_uiSelfShowType;
	CNoDisturbInfo* m_oNoDisturbInfo;
	unsigned long m_uiPluginInstallStatus;
	unsigned long m_uiCertificationFlag;
	NSString* m_nsCertificationInfo;
	NSString* m_nsWeiboAddress;
	NSString* m_nsWeiboNickName;
	unsigned long m_uiWeiboFlag;
	unsigned long m_uiFacebookFlag;
	NSString* m_nsFacebookID;
	NSString* m_nsFacebookName;
	NSString* m_nsFacebookToken;
	unsigned long m_uiPluginSwitch;
	NSString* m_nsGMailAccount;
	unsigned long m_uiGMailStatus;
	unsigned long m_uiGMailSwitch;
	unsigned long m_uiRegType;
	NSString* m_nsAuthKey;
	NSString* m_nsWCBGImgObjectID;
	int m_iWCFlag;
	int m_iWCFlagExt;
	NSString* m_pcWCBGImgID;
	NSString* m_nsExternalInfo;
	NSString* m_nsBrandSubscriptConfigUrl;
	unsigned long m_uiBrandSubscriptionSettings;
	SubscriptBrandInfo* m_subBrandInfo;
	NSData* m_dtA2Key;
	NSData* m_dtA2KeyNew;
	unsigned long m_uiProfileFlag;
	unsigned long m_uiReaderFontSize;
	NSString* m_nsLastUUID;
	NSData* m_dtNewInitTempBuffer;
	NSString* m_nsVoipPushSound;
	NSString* m_nsMsgPushSound;
	NSMutableDictionary* m_dicSetting;
	unsigned long m_uiNextAuthType;
}
@property(assign, nonatomic) unsigned long m_uiNextAuthType;
@property(retain) NSString* m_nsMsgPushSound;
@property(retain) NSString* m_nsVoipPushSound;
@property(retain) NSData* m_dtNewInitTempBuffer;
@property(retain) NSString* m_nsLastUUID;
@property(assign, nonatomic) unsigned long m_uiReaderFontSize;
@property(assign, nonatomic) unsigned long m_uiProfileFlag;
@property(retain) NSData* m_dtA2KeyNew;
@property(retain) NSData* m_dtA2Key;
@property(retain) SubscriptBrandInfo* m_subBrandInfo;
@property(assign, nonatomic) unsigned long m_uiBrandSubscriptionSettings;
@property(retain) NSString* m_nsBrandSubscriptConfigUrl;
@property(retain) NSString* m_nsExternalInfo;
@property(retain) NSString* m_pcWCBGImgID;
@property(assign, nonatomic) int m_iWCFlagExt;
@property(assign, nonatomic) int m_iWCFlag;
@property(retain) NSString* m_nsWCBGImgObjectID;
@property(retain) NSString* m_nsAuthKey;
@property(assign, nonatomic) unsigned long m_uiRegType;
@property(assign, nonatomic) unsigned long m_uiGMailSwitch;
@property(assign, nonatomic) unsigned long m_uiGMailStatus;
@property(retain) NSString* m_nsGMailAccount;
@property(assign, nonatomic) unsigned long m_uiPluginSwitch;
@property(retain) NSString* m_nsFacebookToken;
@property(retain) NSString* m_nsFacebookName;
@property(retain) NSString* m_nsFacebookID;
@property(assign, nonatomic) unsigned long m_uiFacebookFlag;
@property(assign, nonatomic) unsigned long m_uiWeiboFlag;
@property(retain) NSString* m_nsWeiboNickName;
@property(retain) NSString* m_nsWeiboAddress;
@property(retain) NSString* m_nsCertificationInfo;
@property(assign, nonatomic) unsigned long m_uiCertificationFlag;
@property(assign, nonatomic) unsigned long m_uiSelfShowType;
@property(assign, nonatomic) unsigned long m_uiPluginInstallStatus;
@property(retain) CNoDisturbInfo* m_oNoDisturbInfo;
@property(retain) NSString* m_nsHDImgStatus;
@property(retain) NSString* m_nsHDHeadImgMD5;
@property(assign, nonatomic) unsigned long m_uiPersonalCardStatus;
@property(retain) NSString* m_nsCity;
@property(retain) NSString* m_nsProvince;
@property(retain) NSString* m_nsCountry;
@property(assign, nonatomic) unsigned long m_uiSex;
@property(retain) NSString* m_nsUin16PwdMD5;
@property(retain) NSString* m_nsUinPwdMD5;
@property(retain) NSData* m_dtSyncBuffer;
@property(retain) NSString* m_nsPushmailFolderUrl;
@property(assign, nonatomic) unsigned long m_uiSendCardType;
@property(assign, nonatomic) BOOL m_bReplyToAddContact;
@property(assign, nonatomic) unsigned long m_uiShowFirstTimeTipsVersion;
@property(assign, nonatomic) unsigned long m_uiDefaultChatState;
@property(assign, nonatomic) unsigned long m_uiPushMailSwitchStatus;
@property(assign, nonatomic) BOOL m_bAuthAnotherPlace;
@property(retain) NSString* m_nsPwd16MD5;
@property(assign, nonatomic) unsigned long m_uiInitStatus;
@property(retain) NSString* m_nsInitBuffer;
@property(assign, nonatomic) unsigned long m_uiInitSyncKey;
@property(assign, nonatomic) unsigned long m_uiLastInitVersion;
@property(assign, nonatomic) unsigned long m_uiCryptUin;
@property(assign, nonatomic) unsigned long m_uiShowWhatsnewVersion;
@property(assign, nonatomic) BOOL m_bPushPrivateMsg;
@property(assign, nonatomic) BOOL m_bRevPrivateMsg;
@property(assign, nonatomic) unsigned long m_uiLastTimeOfNotifyOpenPush;
@property(retain) NSString* m_nsMMdevNick;
@property(retain) NSString* m_nsMMdevName;
@property(assign, nonatomic) BOOL m_bQQOfflineSwitchStatus;
@property(assign, nonatomic) BOOL m_bNewMsgVibration;
@property(assign, nonatomic) BOOL m_bNewMsgSound;
@property(retain) NSString* m_nsSyncBuffer;
@property(assign, nonatomic) unsigned long m_uiSyncKey;
@property(retain) NSString* m_nsPassWordMD5;
@property(assign, nonatomic) unsigned long m_uiStatus;
@property(assign, nonatomic) BOOL m_bSyncNickName;
@property(assign, nonatomic) unsigned long m_uiUin;
-(id)getDicSetting;
-(void)theadSafeRemoveObjectForKey:(id)key;
-(void)theadSafeSetObject:(id)object forKey:(id)key;
-(id)theadSafeGetObject:(id)object;
-(int)getInt32ForKey:(id)key;
-(void)setInt32:(int)a32 forKey:(id)key;
-(unsigned long)getUInt32ForKey:(id)key;
-(void)setUInt32:(unsigned long)a32 forKey:(id)key;
-(BOOL)getBoolForKey:(id)key;
-(void)setBool:(BOOL)aBool forKey:(id)key;
-(BOOL)IsVoipSoundOpen;
-(id)description;
-(id)keyPaths;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)copyFromSetting:(id)setting;
-(void)dealloc;
-(id)init;
-(void)preInit;
-(BOOL)isiPodTouch;
-(id)m_nsGoogleContactName;
-(void)setM_nsGoogleContactName:(id)name;
-(id)m_nsMicroBlogUsrName;
-(void)setM_nsMicroBlogUsrName:(id)name;
-(id)m_nsMobile;
-(void)setM_nsMobile:(id)mobile;
-(id)m_nsEmail;
-(void)setM_nsEmail:(id)email;
-(id)m_nsSignature;
-(void)setM_nsSignature:(id)signature;
-(id)m_nsNickName;
-(void)setM_nsNickName:(id)name;
-(id)m_nsAliasName;
-(void)setM_nsAliasName:(id)name;
-(id)m_nsUsrName;
-(void)setM_nsUsrName:(id)name;
@end

@interface CustomButton : UIButton {
	id m_usrData;
}
@property(retain, nonatomic) id m_usrData;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CSettingExt : NSObject <NSCoding> {
	unsigned long m_iPlayTipsCounter;
	NSString* m_nsMobile;
	BOOL m_bAllowSearchAddressBook;
	BOOL m_bHasConfirmSearchAddressBook;
	BOOL m_bHasClickBindPhoneView;
	BOOL m_bPitchShift;
	int m_iPitchShift;
	unsigned long m_iVideoCameraPos;
	unsigned long m_iMatteCameraPos;
	unsigned long m_iMatteFlashStatus;
	BOOL m_isLBSPromptNotShowAgain;
	BOOL m_isShakePromptNotShowAgain;
	BOOL m_isWXTalkPromptNotShowAgain;
	BOOL m_isEmoticonPanelNewNotCausedByUpdate;
	BOOL m_isExistNewBrandServiceTip;
	BOOL m_isExistNewBrandSubscriptionTip;
	BOOL m_bIsSyncPhoneContactsLogined;
	unsigned m_uiCloudContactsAmount;
	BOOL m_bIsSyncReminderOn;
	NSDate* m_LBSDataValidateTime;
	BOOL m_isForceEarpieceMode;
	BOOL m_hasShowQRCodeTip;
	unsigned long m_uiLastDownloadEmojiArtTime;
	unsigned long m_uiSyncAddressBookLocalMode;
	BOOL m_bSavePhotoWhenTake;
	BOOL m_bUploadHDImage;
	unsigned long m_uiImageSourceType;
	BOOL m_bReadMailShowDetail;
	unsigned long m_uiMatteHistoryOrder;
	BOOL m_bShowReaderSettingTip;
	BOOL m_bAlbumSyncMicroblog;
	unsigned long m_uiFontSize;
	unsigned long m_uiLbsOpCode;
	BOOL m_hideWCTimelineEventNotification;
	int m_showIntroViewTimes;
	BOOL m_bOpenRemoteControl;
	BOOL m_bHasUseVideoVoip;
	BOOL m_bHasUseWXTalk;
	BOOL m_autoPlay;
	unsigned long m_uiLastAlertVoipTime;
	unsigned long m_uiLastAlertRemindTime;
	BOOL m_bNoShowPushTip;
	BOOL m_bMusicCyclePlay;
	BOOL m_bMusicListPlay;
	BOOL m_bMusicOrderPlay;
	BOOL m_bMonitorMemory;
	BOOL m_bFeatureLogViewInRealTime;
	int m_cameraFlashMode;
	NSMutableDictionary* m_dicSetting;
	BOOL m_bHaveCheckedSetPassword;
	BOOL m_bHaveUploadWholeAddress;
	BOOL m_bShakeMusicOpen;
	BOOL m_bMultiFavAddOpen;
	NSString* m_nsTransFromLang;
	NSString* m_nsTransToLang;
	NSString* m_nsImagePickerAlbum;
	BOOL m_bImagePickerForcedOldVersion;
	BOOL m_bOpenJSDebug;
	unsigned long m_playVoiceTimes;
	unsigned long m_lastBrandMsgSvrID;
	BOOL m_bOverseasCardIsNoOpenProtocal;
	BOOL m_bTitOfflinePayShow;
	int m_nMonitorResource;
}
@property(assign, nonatomic) BOOL m_bTitOfflinePayShow;
@property(assign, nonatomic) BOOL m_bOverseasCardIsNoOpenProtocal;
@property(assign, nonatomic) BOOL m_bFeatureLogViewInRealTime;
@property(assign, nonatomic) unsigned long m_lastBrandMsgSvrID;
@property(assign, nonatomic) unsigned long m_playVoiceTimes;
@property(assign, nonatomic) int m_nMonitorResource;
@property(assign, nonatomic) BOOL m_bOpenJSDebug;
@property(assign, nonatomic) BOOL m_bImagePickerForcedOldVersion;
@property(retain, nonatomic) NSString* m_nsImagePickerAlbum;
@property(retain, nonatomic) NSString* m_nsTransToLang;
@property(retain, nonatomic) NSString* m_nsTransFromLang;
@property(assign, nonatomic) BOOL m_bMultiFavAddOpen;
@property(assign, nonatomic) BOOL m_bShakeMusicOpen;
@property(assign, nonatomic) int m_cameraFlashMode;
@property(assign, nonatomic) BOOL m_bHaveUploadWholeAddress;
@property(assign, nonatomic) BOOL m_bHaveCheckedSetPassword;
@property(assign, nonatomic) BOOL m_bMonitorMemory;
@property(assign, nonatomic) BOOL m_bMusicOrderPlay;
@property(assign, nonatomic) BOOL m_bMusicListPlay;
@property(assign, nonatomic) BOOL m_bMusicCyclePlay;
@property(assign, nonatomic) BOOL m_bNoShowPushTip;
@property(assign, nonatomic) unsigned long m_uiLastAlertRemindTime;
@property(assign, nonatomic) unsigned long m_uiLastAlertVoipTime;
@property(assign, nonatomic) BOOL m_autoPlay;
@property(assign, nonatomic) BOOL m_bHasUseWXTalk;
@property(assign, nonatomic) BOOL m_bHasUseVideoVoip;
@property(assign, nonatomic) BOOL m_bOpenRemoteControl;
@property(assign, nonatomic) int m_showIntroViewTimes;
@property(assign, nonatomic) BOOL m_hideWCTimelineEventNotification;
@property(assign, nonatomic) unsigned long m_uiLbsOpCode;
@property(assign, nonatomic) unsigned long m_uiFontSize;
@property(assign, nonatomic) BOOL m_bAlbumSyncMicroblog;
@property(assign, nonatomic) BOOL m_bShowReaderSettingTip;
@property(assign, nonatomic) unsigned long m_uiMatteHistoryOrder;
@property(assign, nonatomic) BOOL m_bReadMailShowDetail;
@property(assign, nonatomic) unsigned long m_uiImageSourceType;
@property(assign, nonatomic) BOOL m_bUploadHDImage;
@property(assign, nonatomic) BOOL m_bSavePhotoWhenTake;
@property(assign, nonatomic) unsigned long m_uiSyncAddressBookLocalMode;
@property(assign, nonatomic) unsigned long m_uiLastDownloadEmojiArtTime;
@property(assign, nonatomic) BOOL m_hasShowQRCodeTip;
@property(assign, nonatomic) BOOL m_isForceEarpieceMode;
@property(retain, nonatomic) NSDate* m_LBSDataValidateTime;
@property(assign, nonatomic) BOOL m_bIsSyncReminderOn;
@property(assign, nonatomic) unsigned m_uiCloudContactsAmount;
@property(assign, nonatomic) BOOL m_bIsSyncPhoneContactsLogined;
@property(assign, nonatomic) BOOL m_isExistNewBrandSubscriptionTip;
@property(assign, nonatomic) BOOL m_isExistNewBrandServiceTip;
@property(assign, nonatomic) BOOL m_isEmoticonPanelNewNotCausedByUpdate;
@property(assign, nonatomic) BOOL m_isWXTalkPromptNotShowAgain;
@property(assign, nonatomic) BOOL m_isShakePromptNotShowAgain;
@property(assign, nonatomic) BOOL m_isLBSPromptNotShowAgain;
@property(assign, nonatomic) unsigned long m_iMatteFlashStatus;
@property(assign, nonatomic) unsigned long m_iMatteCameraPos;
@property(assign, nonatomic) unsigned long m_iVideoCameraPos;
@property(assign, nonatomic) int m_iPitchShift;
@property(assign, nonatomic) BOOL m_bPitchShift;
@property(assign, nonatomic) BOOL m_bHasClickBindPhoneView;
@property(assign, nonatomic) BOOL m_bHasConfirmSearchAddressBook;
@property(assign, nonatomic) BOOL m_bAllowSearchAddressBook;
@property(retain, nonatomic) NSString* m_nsMobile;
@property(assign, nonatomic) unsigned long m_iPlayTipsCounter;
-(id)getDicSetting;
-(void)theadSafeRemoveObjectForKey:(id)key;
-(void)theadSafeSetObject:(id)object forKey:(id)key;
-(id)theadSafeGetObject:(id)object;
-(int)getInt32ForKey:(id)key;
-(void)setInt32:(int)a32 forKey:(id)key;
-(unsigned long)getUInt32ForKey:(id)key;
-(void)setUInt32:(unsigned long)a32 forKey:(id)key;
-(BOOL)getBoolForKey:(id)key;
-(void)setBool:(BOOL)aBool forKey:(id)key;
-(void)updateLastAlertRemindTime:(unsigned long)time;
-(void)setLBSFootstepShow:(BOOL)show;
-(BOOL)isLBSFootstepShow;
-(void)copyFromSettingExt:(id)settingExt;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface CUpdateInfo : NSObject <NSCoding> {
	unsigned long m_uiNewVersion;
	NSString* m_nsDescription;
	BOOL m_bShowInTab;
	BOOL m_bShowInSetting;
	unsigned long m_uiLastShowAlertTime;
	unsigned long m_uiNewVersionUpdateTime;
	unsigned long m_uiSysNoticeVersion;
	unsigned long m_uiSysNoticeCount;
	BOOL m_bSysNoticeShowInTab;
}
@property(assign, nonatomic) unsigned long m_uiNewVersionUpdateTime;
@property(assign, nonatomic) unsigned long m_uiSysNoticeCount;
@property(assign, nonatomic) unsigned long m_uiSysNoticeVersion;
@property(assign, nonatomic) unsigned long m_uiLastShowAlertTime;
@property(assign, nonatomic) BOOL m_bSysNoticeShowInTab;
@property(assign, nonatomic) BOOL m_bShowInTab;
@property(assign, nonatomic) BOOL m_bShowInSetting;
@property(retain, nonatomic) NSString* m_nsDescription;
@property(assign, nonatomic) unsigned long m_uiNewVersion;
+(void)updateSysNotice:(id)notice;
-(void)copyFromUpdateInfo:(id)updateInfo;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface HelloMsgsPanelView : MMUIView <LongPressMenuViewDelegate> {
	NSMutableArray* m_arrHellos;
	CPushContact* m_lastMsg;
	id m_replyTarget;
	SEL m_replySel;
}
-(void)onLongPressMenuViewCopy:(id)copy;
-(void)onReply:(id)reply;
-(void)setRelpyTarget:(id)target sel:(SEL)sel;
-(void)dealloc;
-(id)initHelloWord:(id)word HelloUser:(id)user;
-(id)getArrayContacts:(id)contacts;
@end

@interface SettingUtil : NSObject {
}
+(BOOL)isCurUsrHasAliasName;
+(BOOL)isHasWBlogAccount;
+(BOOL)isOpenFloatBottle;
+(BOOL)isMicroBlogOpen;
+(BOOL)isOpenQQMail;
+(BOOL)isOpenSX;
+(BOOL)isOpenGMail;
+(BOOL)isBindQQ;
+(BOOL)isOpenQQ;
+(void)loadCurUserInfo:(id)info;
+(int)getFontSize;
+(id)getLocalUsrName:(unsigned long)name;
+(id)getBottleLocalUsrName;
+(id)GetLocalUsrImg;
+(id)getCurUsrDisplayName;
+(id)getCurUsrNickname;
+(id)getCurUsrName;
+(BOOL)isCurUsrName:(id)name;
+(id)getLocalInfo;
+(id)getUpdateInfo;
+(id)getMainSettingExt;
+(id)getMainSetting;
@end

@interface SetDeviceSafeViewController : MMUIViewController <WCAccountBindPhoneControlLogicDelegate, PBMessageObserverDelegate, NewDeviceLoginViewControllerDelegate, MMTableViewInfoDelegate, UIAlertViewDelegate> {
	MMTableViewInfo* m_tableViewInfo;
	WCAccountBindPhoneControlLogic* m_bindLogic;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)MessageReturnUpdateDevice:(id)device Event:(unsigned long)event;
-(void)MessageReturnDelDevice:(id)device Event:(unsigned long)event;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnClickRightTopBtn;
-(void)commitEditingForRowAtIndexPath:(id)indexPath Cell:(id)cell;
-(void)setDeviceName:(id)name deviceInfo:(id)info;
-(void)actionCell:(id)cell;
-(void)makeCell:(id)cell cellInfo:(id)info;
-(void)onSwitchSafeDeviceVerify:(id)verify;
-(void)closeSafeDeviceVerify;
-(void)openSafeDeviceVerify;
-(void)onSetSafeDevice;
-(void)bindPhoneReturn;
-(void)onWCAccountBindPhoneControlLogicStop;
-(void)newDeviceLoginVerifyOK:(id)ok ticket:(id)ticket;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)willAppear;
-(void)updatView;
-(void)updateUnSetView;
-(void)updateSetView;
-(void)updateTopRightButtion;
@end

@interface SafeDeviceData : NSCoder {
	NSString* name;
	NSString* uuid;
	NSString* deviceType;
	unsigned createTime;
}
@property(assign, nonatomic) unsigned createTime;
@property(retain, nonatomic) NSString* deviceType;
@property(retain, nonatomic) NSString* uuid;
@property(retain, nonatomic) NSString* name;
+(BOOL)isSafeDeviceSwitchOpen;
+(id)GetSafeDeviceStatusString;
+(void)SetThisDeviceSafe:(BOOL)safe;
+(BOOL)isThisDeviceInTrustList;
+(id)getDeviceUuid;
+(void)SetSafeDeviceList:(id)list;
+(void)UpdateSafeDevice:(id)device withName:(id)name;
+(void)DelSafeDevice:(id)device;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface CustomMenuButton : UIButton {
	NSString* m_btnId;
	NSString* m_btnKey;
	NSString* m_btnName;
	NSString* m_btnValue;
	int m_btnType;
	int m_btnActionType;
	int m_btnIndex;
}
@property(assign, nonatomic) int m_btnIndex;
@property(assign, nonatomic) int m_btnActionType;
@property(assign, nonatomic) int m_btnType;
@property(retain, nonatomic) NSString* m_btnValue;
@property(retain, nonatomic) NSString* m_btnName;
@property(retain, nonatomic) NSString* m_btnKey;
@property(retain, nonatomic) NSString* m_btnId;
+(id)getPOIJsonContentFromSelectLocationInfo:(id)selectLocationInfo;
+(id)getPicsJsonContentFromPicMd5List:(id)picMd5List;
+(id)getScanJsonContentFromScanType:(id)scanType scanResult:(id)result;
+(int)serverActionType2LocalCustomType:(int)type;
+(int)localCustomActionType2ServerType:(int)type;
+(int)serverType2LocalCustom:(int)custom;
+(int)localCustomType2ServerType:(int)type;
-(void)dealloc;
-(id)init;
@end

@interface CustomMenuToolView : MMUIView <UIHorizontalTableViewDelegate, UIHorizontalTableViewDataSource, UIScrollViewDelegate> {
	MMDelegateProxy<CustomMenuToolViewDelegate>* m_delegate;
	NSMutableArray* m_menuList;
	UIHorizontalTableView* m_tableView;
	UIButton* m_pageBtn;
	int lastClickMenuIndex;
}
@property(retain, nonatomic) UIButton* m_pageBtn;
@property(retain, nonatomic) UIHorizontalTableView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_menuList;
@property(assign, nonatomic) MMDelegateProxy<CustomMenuToolViewDelegate>* m_delegate;
-(void)resetLastClickMenuIndex;
-(BOOL)isMenusNumerous;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)onChangeBtnClick:(id)click;
-(void)onPageBtnClick:(id)click;
-(void)onMenuButtonClick:(id)click;
-(void)horizontalTableView:(id)view didSelectColumnAtIndex:(unsigned)index;
-(id)horizontalTableView:(id)view viewForColumnAtIndex:(unsigned)index;
-(float)horizontalTableView:(id)view widthForColumnAtIndex:(unsigned)index;
-(unsigned)numberOfColumnsInHorizontalTableView:(id)horizontalTableView;
-(void)loadSubView;
-(id)initWithMenuList:(id)menuList;
-(void)dealloc;
@end

@interface CustomSubMenuFloatView : MMUIButton <UITableViewDelegate, UITableViewDataSource> {
	UIView* m_contentView;
	MMTableView* m_tableView;
	NSMutableArray* m_btnList;
	float m_tableCellWidth;
	MMDelegateProxy<CustomSubMenuFloatViewDelegate>* m_delegate;
}
@property(retain, nonatomic) NSMutableArray* m_btnList;
@property(retain, nonatomic) UIView* m_contentView;
@property(assign, nonatomic) MMDelegateProxy<CustomSubMenuFloatViewDelegate>* m_delegate;
-(id)displayViews:(id)views;
-(void)dumpView:(id)view atIndent:(int)indent into:(id)into;
-(int)show2StorageIndex:(int)index;
-(int)storage2ShowIndex:(int)index;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)getTableCellWidth;
-(float)getFontSize;
-(void)onRemoveFloatView;
-(void)animateDismissContentView;
-(void)animatePresentContentView;
-(void)onTableViewButtonDown:(id)down;
-(void)onTapScreenBtn;
-(void)loadContentViewWithArrowX:(float)arrowX;
-(id)initWithList:(id)list ArrowX:(float)x;
-(void)dealloc;
@end

@interface FeatureLogInfo : NSObject {
	unsigned long logid;
	unsigned long begin_time;
	unsigned long end_time;
	unsigned long log_count;
	NSString* log_ext;
}
@property(retain, nonatomic) NSString* log_ext;
@property(assign, nonatomic) unsigned long log_count;
@property(assign, nonatomic) unsigned long end_time;
@property(assign, nonatomic) unsigned long begin_time;
@property(assign, nonatomic) unsigned long logid;
-(void)dealloc;
-(id)init;
@end

@interface ActionLogInfo : NSObject {
	unsigned long eventid;
	unsigned long begin_time;
	unsigned long end_time;
	unsigned long log_count;
	NSString* action_path;
}
@property(retain, nonatomic) NSString* action_path;
@property(assign, nonatomic) unsigned long log_count;
@property(assign, nonatomic) unsigned long end_time;
@property(assign, nonatomic) unsigned long begin_time;
@property(assign, nonatomic) unsigned long eventid;
-(void)dealloc;
-(id)init;
@end

@interface PerformLogInfo : NSObject {
	unsigned long eventid;
	unsigned long begin_time;
	unsigned long end_time;
	unsigned long max_duration;
	unsigned long min_duration;
	unsigned long avg_duration;
	unsigned long log_count;
}
@property(assign, nonatomic) unsigned long log_count;
@property(assign, nonatomic) unsigned long avg_duration;
@property(assign, nonatomic) unsigned long min_duration;
@property(assign, nonatomic) unsigned long max_duration;
@property(assign, nonatomic) unsigned long end_time;
@property(assign, nonatomic) unsigned long begin_time;
@property(assign, nonatomic) unsigned long eventid;
-(void)dealloc;
-(id)init;
@end

@interface LogReportMgr : MMService <PBMessageObserverDelegate, MMService, MMKernelExt> {
	BOOL mIsStart;
	NSMutableDictionary* mFeatureLogInfos;
	NSTimer* mFeatureReportCheckTimer;
	unsigned long mFeatureReportIntervalTime;
	unsigned long mFeatureReportFlag;
	NSMutableDictionary* mActionLogInfos;
	NSMutableArray* mActionPathPoints;
	NSTimer* mActionReportCheckTimer;
	unsigned long mActionReportIntervalTime;
	unsigned long mActionReportFlag;
	NSMutableDictionary* mPerformLogInfos;
	NSTimer* mPerformReportCheckTimer;
	unsigned long mPerformReportIntervalTime;
	unsigned long mPerformReportFlag;
}
@property(assign, nonatomic) unsigned long mPerformReportFlag;
@property(assign, nonatomic) unsigned long mPerformReportIntervalTime;
@property(retain, nonatomic) NSTimer* mPerformReportCheckTimer;
@property(retain, nonatomic) NSMutableDictionary* mPerformLogInfos;
@property(assign, nonatomic) unsigned long mActionReportFlag;
@property(assign, nonatomic) unsigned long mActionReportIntervalTime;
@property(retain, nonatomic) NSTimer* mActionReportCheckTimer;
@property(retain, nonatomic) NSMutableArray* mActionPathPoints;
@property(retain, nonatomic) NSMutableDictionary* mActionLogInfos;
@property(assign, nonatomic) unsigned long mFeatureReportFlag;
@property(assign, nonatomic) unsigned long mFeatureReportIntervalTime;
@property(retain, nonatomic) NSTimer* mFeatureReportCheckTimer;
@property(retain, nonatomic) NSMutableDictionary* mFeatureLogInfos;
-(void)onServiceClearData;
-(void)onServiceInit;
-(void)AddPerformLogWithEventId:(unsigned long)eventId Duration:(unsigned long)duration;
-(void)MainThreadAddPerformLog:(id)log;
-(void)AddActionLogWithEventId:(unsigned long)eventId ActionLogType:(unsigned long)type;
-(void)MainThreadAddActionLog:(id)log;
-(unsigned long)GetFeatureCount;
-(void)AddFeatureLogWithLogId:(unsigned long)logId ExtLog:(id)log;
-(void)AddFeatureLogWithLogId:(unsigned long)logId;
-(void)MainThreadAddFeatureLog:(id)log;
-(void)StopReport;
-(void)StartReport;
-(void)PerformReportTimerCheck;
-(void)ActionReportTimerCheck;
-(void)FeatureReportTimerCheck;
-(void)dealloc;
-(id)init;
-(void)onAuthOK;
-(void)SendReportRequestWithPerformLogInfo:(id)performLogInfo;
-(void)SendReportRequestWithActionLogInfo:(id)actionLogInfo;
-(void)SendReportRequestWithFeatureLogInfo:(id)featureLogInfo;
-(void)SendReportStrategyRequest;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleReportClientPerfResp:(id)resp Event:(unsigned long)event;
-(void)HandleReportActionResp:(id)resp Event:(unsigned long)event;
-(void)HandleReportKVResp:(id)resp Event:(unsigned long)event;
-(void)HandleReportStrategyResp:(id)resp Event:(unsigned long)event;
@end

@interface MFSetWechatIDBtn : UIButton {
}
-(void)ButtonTouchUpOutside:(id)outside;
-(void)ButtonTouchDown:(id)down;
-(void)setLabelHighlighted:(BOOL)highlighted;
-(id)initWithFrame:(CGRect)frame;
@end

@interface FileHelperContactInfoAssist : WeixinContactInfoAssist {
}
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface GroupMember : NSObject {
	NSString* m_nsMemberName;
	unsigned long m_uiMemberStatus;
	NSString* m_nsNickName;
	NSString* m_nsFullPY;
	unsigned long m_uiSex;
	NSString* m_nsRemark;
	NSString* m_nsRemarkShortPY;
	NSString* m_nsRemarkFullPY;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
}
@property(retain, nonatomic) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
@property(retain, nonatomic) NSString* m_nsRemarkFullPY;
@property(retain, nonatomic) NSString* m_nsRemarkShortPY;
@property(retain, nonatomic) NSString* m_nsRemark;
@property(assign, nonatomic) unsigned long m_uiSex;
@property(retain, nonatomic) NSString* m_nsFullPY;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(assign, nonatomic) unsigned long m_uiMemberStatus;
@property(retain, nonatomic) NSString* m_nsMemberName;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CGroupDB : NSObject {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSString* m_nsDocPath;
}
-(id)GetMMDB;
-(id)GetGroupMember:(id)member;
-(BOOL)QuitGroup:(id)group withUsrName:(id)usrName;
-(BOOL)SetGroupTopic:(id)topic withTopic:(id)topic2;
-(BOOL)DeleteGroupMember:(id)member withMemberList:(id)memberList;
-(BOOL)AddGroupMember:(id)member withMemberList:(id)memberList;
-(BOOL)isUserName:(id)name ExistInList:(id)list;
-(void)initDB:(id)db withLock:(id)lock;
-(void)dealloc;
-(id)init;
@end

@interface MMShakeMusicCoverImgView : MMUIView <MMImageLoaderObserver> {
	MMWebImageView* m_imgWithUrl;
	MMUIImageView* m_imgWithPath;
	NSString* m_nsImgPath;
	BOOL m_bNeedBlur;
	BOOL m_bUrl;
	UIImage* m_image;
}
@property(retain, nonatomic) NSString* m_nsImgPath;
-(void)ImageDidLoad:(id)image;
-(void)updateImgViewNeedBlur;
-(void)updateImgView;
-(id)getImage;
-(void)setImgPath:(id)path NeedBlur:(BOOL)blur;
-(void)initImgView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CGroupMgr : MMService <MMService, NotifyFromEventDelegate, PBMessageObserverDelegate, IMsgExt> {
	CGroupDB* m_oGroupDB;
	CGroupOpLog* m_oGroupOpLog;
	NSMutableArray* m_remindMsgs;
	NSMutableArray* m_verifyMsgs;
	NSString* m_verifyMsgChatRoom;
	NSMutableDictionary* m_verifyMsgIndex;
	NSMutableDictionary* m_noticeIndex;
}
+(BOOL)IsReservedGroupTopic:(id)topic;
-(BOOL)saveNoticeIndex;
-(void)loadNoticeIndex;
-(BOOL)saveVerifyIndex;
-(void)loadVerifyIndex;
-(id)loadVerifyMsgs:(id)msgs forceLoad:(BOOL)load;
-(BOOL)addRemindMsg:(id)msg;
-(void)loadRemindMsgs;
-(BOOL)saveAllRemindMsg;
-(BOOL)saveRemindMsg:(id)msg;
-(BOOL)saveVerifyMsg:(id)msg forChatRoom:(id)chatRoom;
-(BOOL)saveAllVerifyMsg:(id)msg forChatRoom:(id)chatRoom;
-(id)pathForPresentHistory:(id)presentHistory;
-(id)pathForUpgradeInfo:(id)upgradeInfo;
-(id)pathForNotice;
-(id)pathForIndex;
-(id)pathForRemindMsg;
-(id)pathForVerifyMsg:(id)verifyMsg;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(id)decodeNoticeMsgNode:(XmlReaderNode_t*)node forID:(unsigned long)anId andTime:(unsigned long)time;
-(id)decodeChatRoomUpgradeProduct:(XmlReaderNode_t*)product;
-(id)decodeChatRoomUpgradeInfo:(id)info;
-(id)decodeRemindMsgNode:(XmlReaderNode_t*)node forID:(unsigned long)anId andTime:(unsigned long)time;
-(void)handleRemindMsg:(id)msg;
-(id)decodeVerifyMsgNode:(XmlReaderNode_t*)node forID:(unsigned long)anId andTime:(unsigned long)time;
-(void)handleVerifyMsg:(id)msg;
-(void)handlePresentMsg:(id)msg;
-(int)CanDonateChatRoom;
-(int)CanUpgradeChatRoom;
-(id)GetPaidChatRoomActionUrl;
-(int)GetPaidChatRoomStatus;
-(BOOL)ClearChatRoomVerifyMsg:(id)msg;
-(BOOL)DeleteChatRoomReminderMsg:(unsigned long)msg;
-(BOOL)DeleteChatRoomVerifyMsg:(id)msg msgID:(unsigned long)anId;
-(BOOL)MarkChatRoomVerifyMsgAsVerified:(id)verified msg:(id)msg;
-(BOOL)MarkChatRoomVerifyMsgAsRead:(id)read msgList:(id)list;
-(BOOL)MarkAllChatRoomVerifyMsgAsRead:(id)read;
-(id)GetLastChatRoomReminderMsg:(id)msg;
-(BOOL)DeleteNotice:(id)notice;
-(BOOL)HasNotice:(id)notice;
-(int)GetUnreadVerifyMsgCount:(id)count;
-(id)GetAllChatRoomVerifyMsg:(id)msg;
-(BOOL)SaveUpgradeInfo:(id)info forChatRoom:(id)chatRoom;
-(id)LoadChatRoomPresentHistoryFromCache:(id)cache;
-(BOOL)saveChatRoomPresentHistory:(id)history forChatRoom:(id)chatRoom;
-(BOOL)GetChatRoomPresentHistory:(id)history;
-(BOOL)QuitPaidChatRoom:(id)room;
-(BOOL)VerifyChatRoomMember:(id)member;
-(BOOL)UpgradeChatRoom:(id)room;
-(BOOL)GetChatRoomUpgradeStatus:(id)status;
-(BOOL)ForceUpdateChatRoomContact:(id)contact;
-(unsigned long)createProtoBufEvent:(id)event forCgi:(unsigned long)cgi andUserData:(id)data;
-(void)onGetChatRoomUpgradeStatus:(id)status;
-(void)onGetChatRoomPresentHistory:(id)history;
-(void)OnUpdateContact:(id)contact;
-(void)OnQuitChatRoom:(id)room;
-(void)OnVerifyChatRoom:(id)room;
-(void)OnUpgradeChatRoom:(id)room;
-(void)OnGetChatRoomUpgradeInfo:(id)info;
-(void)OnCreateChatRoom:(id)room;
-(void)addCreateMsg:(id)msg ContactList:(id)list;
-(void)OnDeleteChatRoomMemberResponse:(id)response;
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(void)OnAddChatRoomMember:(id)member;
-(void)checkChatMemberNeedVerifyMsg:(id)msg;
-(id)genContactFromMemberResp:(id)memberResp;
-(void)addReceiveVerifyMsgSystemMsg:(id)msg Msg:(id)msg2;
-(id)genVerifyMsgDesc:(id)desc;
-(void)addChatMemberNeedVerifyMsg:(id)msg ContactList:(id)list;
-(BOOL)UnShowInContactBook:(id)contactBook;
-(BOOL)ShowInContactBook:(id)contactBook;
-(BOOL)IsUsrInChatRoom:(id)chatRoom Usr:(id)usr;
-(id)GetGroupMemberWithOutMyself:(id)outMyself;
-(id)GetGroupMember:(id)member;
-(BOOL)QuitGroup:(id)group withUsrName:(id)usrName;
-(BOOL)SetGroupTopic:(id)topic withTopic:(id)topic2;
-(BOOL)SetUndeliverCountOpen:(BOOL)open forGroup:(id)group;
-(BOOL)SetShowDislayName:(BOOL)name forGroup:(id)group;
-(BOOL)SetDislayName:(id)name forGroup:(id)group;
-(BOOL)DeleteGroupMember:(id)member withMemberList:(id)memberList;
-(BOOL)AddGroupMember:(id)member withMemberList:(id)memberList;
-(BOOL)CreateGroup:(id)group withMemberList:(id)memberList;
-(void)initDB:(id)db withLock:(id)lock;
-(void)dealloc;
-(void)onServiceInit;
-(id)init;
@end

@interface CGroupOpLog : NSObject {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
}
-(BOOL)add_QuitGroup:(id)group withUsrName:(id)usrName NeedSync:(BOOL)sync;
-(BOOL)add_MemberSwitch:(id)aSwitch usrName:(id)name flag:(unsigned long)flag open:(BOOL)open sync:(BOOL)sync;
-(BOOL)add_DislayName:(id)name usrName:(id)name2 dislayName:(id)name3 sync:(BOOL)sync;
-(BOOL)add_SetGroupTopic:(id)topic withTopic:(id)topic2 NeedSync:(BOOL)sync;
-(void)initDB:(id)db withLock:(id)lock;
-(void)dealloc;
-(id)init;
-(BOOL)InsertOpLog:(unsigned long)log OpLog:(id)log2;
-(void)notifySync;
@end

@interface CSyncBaseEvent : NetCmdEvent {
	NSString* m_nsLocalUsrName;
	unsigned long m_uiSyncOplogCount;
	NSMutableSet* m_setGetUsrImgList;
	BOOL m_bNotifyGetUsrImg;
	NSMutableArray* m_arrMsgList;
	NSMutableArray* m_arrContactList;
	NSMutableArray* m_arrChatroomContactList;
	NSMutableDictionary* m_dicChatroomMemberList;
	NSMutableDictionary* m_dicWebWxClearUnRead;
	BOOL m_bInit;
}
@property(retain, nonatomic) NSMutableSet* m_setGetUsrImgList;
@property(retain, nonatomic) NSString* m_nsLocalUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)HandleBatch:(BOOL)batch ShowPush:(BOOL)push;
-(void)BatchModChatroomMember;
-(void)BatchModContact;
-(BOOL)processSpecialMessage:(id)message;
-(void)ModChatRoomNotify:(id)notify Status:(unsigned long)status;
-(void)QuitChatRoom:(id)room UsrName:(id)name;
-(BOOL)BatchAddMsg:(BOOL)msg ShowPush:(BOOL)push;
-(void)NotifySessionMessage:(id)message Message:(unsigned long)message2;
-(void)NotifyArrayMessage:(id)message Message:(unsigned long)message2;
-(void)NotifyMessage:(id)message Message:(unsigned long)message2;
-(BOOL)HandleHelloMsg:(id)msg SpcialSession:(id)session NotAddDBSession:(id)session3;
-(void)AddSpecialMsg:(id)msg ChatName:(id)name MsgWrap:(id)wrap;
-(void)ParseStatusNotify:(id)notify map:(map<unsigned long, id, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, id> > >*)map;
-(id)StatusNotifyWebWxClearUnRead:(XmlReaderNode_t*)read msg:(id)msg;
-(BOOL)AddHelloMsg:(id)msg HelloUser:(id)user ChatName:(id)name Des:(unsigned long)des OpCode:(unsigned long)code DBRet:(BOOL*)ret;
-(BOOL)AddHelloMessageToDB:(id)db HelloUser:(id)user MsgWrap:(id)wrap Des:(unsigned long)des OpCode:(unsigned long)code;
-(void)Stop;
-(void)dealloc;
-(id)init;
@end

@interface CSyncBasePrtl : PrtlBase {
	NSString* m_nsDocPath;
}
@property(retain, nonatomic) NSString* m_nsDocPath;
-(void)HandleModUsrImg:(tagMMModUserImg*)img;
-(void)HandleModUsrInfo:(tagMMModUserInfo*)info;
-(id)HandleMemContact:(tagMMRoomInfo*)contact;
-(void)HandleModContact:(tagMMModContact*)contact Cmd:(unsigned long)cmd;
-(void)ParseCmd:(unsigned long)cmd Buff:(char*)buff Len:(unsigned long)len;
-(void)dealloc;
-(id)init;
@end

@interface QRCodeViewController : MMUIViewController <IMMQRCodeExt, UIActionSheetDelegate> {
	UIActivityIndicatorView* m_loadingView;
	UIImageView* m_imageQRView;
	MMHeadImageView* m_imageHeadView;
	UILabel* m_labelNickName;
	UILabel* m_labelLacation;
	UIImageView* m_sexImageView;
	stWeixinEntryRow* m_aryEntryRow;
	unsigned long m_arrEntryRowSize;
	unsigned long m_curOperateType;
	CContact* m_contact;
	UIImageView* cardBkg;
	MMAnimationTipView* m_tipView;
	BOOL _isOpenedByScanQR;
}
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(BOOL)preViewControllerIsKindOf:(Class)of;
-(void)Operate;
-(void)scanQRCode;
-(void)shareQRCode;
-(void)shareChatRoomQRCode;
-(void)initRow;
-(void)saveToAlbum;
-(void)onDownloadQRCodeFinish:(id)finish;
-(void)getNextQRCode;
-(void)willAppear;
-(void)adjustSubviewRects;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)updateLocation;
-(void)updateNickName;
-(id)initWithContact:(id)contact;
-(void)stopLoading;
-(void)startLoading;
@end

@interface ShareQRCodeByEmailViewController : MMUIViewController <MailReceiverEditViewDelegate, PBMessageObserverDelegate, MailContactFilterViewDelegate, MMMailContactSelectViewDelegate, UIAlertViewDelegate> {
	MailReceiverEditView* m_receiverView;
	MailSubjectEditView* m_topicView;
	UIButton* m_contentView;
	MailContactFilterView* m_filterView;
	NSMutableArray* m_arrAllMailContacts;
	CContact* m_contact;
	MMTableViewInfo* m_tableViewInfo;
}
@property(retain, nonatomic) CContact* m_contact;
-(void)removeNotificationObservers;
-(void)initNotificationObservers;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)contactReturn:(id)aReturn;
-(void)filterViewBeginDragging;
-(void)onMailContactSelectDone:(id)done userInfo:(id)info;
-(void)onAddMailContact:(id)contact;
-(void)onMailContactChanged:(id)changed;
-(void)onTextFieldNextItem:(id)item;
-(void)onTextFieldFinishEdit:(id)edit;
-(void)onTextFieldChanged:(id)changed;
-(void)onMailReceiverEditViewHeightChanged:(id)changed;
-(void)onMailContactDoubleClicked:(id)clicked;
-(void)onTextFieldBeginEdit:(id)edit;
-(void)makeCell:(id)cell :(id)arg2;
-(void)hideKeyBoard;
-(void)onSelectCell:(id)cell;
-(void)doSearch:(id)search;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initContentView;
-(void)reloadTableData;
-(void)initData;
-(void)onShare;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onBack;
-(void)onReturn;
@end

@interface EnterLbsViewController : MMUIViewController <FriendAsistSessionExt> {
	UIButton* m_btnLbs;
	MMSayHelloButton* m_btnSayHello;
	UILabel* m_labNoHello;
}
-(void)onFriendAssistUnreadCountChanged;
-(void)UpdateView;
-(void)OnOpenLbs;
-(void)OnOpenSayHello;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initData;
@end

@interface LBSErrorViewController : UIViewController {
	UILabel* errorMessageLabel;
	UIImageView* m_errorImage;
}
@property(retain, nonatomic) UILabel* errorMessageLabel;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)setErrorMessage:(id)message;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface EmoticonLangDesc : NSObject <PBCoding> {
	NSString* m_languageCode;
	NSString* m_desc;
}
@property(retain, nonatomic) NSString* m_desc;
@property(retain, nonatomic) NSString* m_languageCode;
+(void)initialize;
+(void)_initPBTableOfEmoticonLangDesc;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface PeopleNearByItemTableViewCell : MMTableViewCell {
	UILabel* m_nickNameLabel;
	UILabel* m_personalRemarkLabel;
	UILabel* m_remarkContainer;
	UILabel* m_distanceLabel;
	MMAdaptiveLabel* m_addedLabel;
	UIImageView* m_genderImageView;
	UIImageView* m_remarkBKImage;
	UIView* m_headerView;
	UIImageView* m_albumFlagView;
	BOOL m_showGenderIcon;
}
@property(assign, nonatomic) BOOL showGenderIcon;
-(void)updateWithLbsContactInfo:(id)lbsContactInfo withHeaderView:(id)headerView;
-(void)dealloc;
@end

@interface PeopleNearByListViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, PeopleNearByListHeaderViewDelegate> {
	PeopleNearByListHeaderView* m_lbsHeaderView;
	LbsContactInfoList* m_lbsContactList;
	MMTableView* m_tableView;
	SeePeopleNearByLogicController* m_logicController;
	NSMutableDictionary* m_userHeaderImageCache;
	int m_iRoomMemberCount;
	MMDelegateProxy<PeopleNearByListViewControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) int iRoomMemberCount;
@property(retain, nonatomic) NSMutableDictionary* userHeaderImageCache;
@property(retain, nonatomic) SeePeopleNearByLogicController* logicController;
@property(retain, nonatomic) MMTableView* tableView;
@property(retain, nonatomic) LbsContactInfoList* lbsContactList;
-(void)adjustSubviewRects;
-(void)onChatRoomNearByBtnClicked;
-(void)reloadWithLbsContactInfoList:(id)lbsContactInfoList;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)checkShowBindPhoneLogic;
-(void)startBindPhone;
-(id)getCachedHeaderImageForUser:(id)user;
-(void)showChatRoomView;
-(void)dealloc;
-(id)init;
-(void)setDelegate:(id)delegate;
@end

@interface SeePeopleNearByLogicController : MMObject <MessageObserverDelegate, ICertInfoMgrExt, LocationRetrieveDelegate, PBMessageObserverDelegate> {
	unsigned long m_uiEventID;
	unsigned long m_lbsEventID;
	unsigned long m_uiTryCount;
	NSRecursiveLock* m_oLock;
	LbsContactInfoList* m_lbsContactList;
	LocationRetriever* m_locationRetrieve;
	MMDelegateProxy<SeePeopleNearByUIDelegate>* m_delegate;
	unsigned long m_uiCurOpCode;
	CLLocation* m_location;
}
@property(retain, nonatomic) CLLocation* m_location;
@property(retain, nonatomic) LocationRetriever* m_locationRetrieve;
@property(retain, nonatomic) LbsContactInfoList* m_lbsContactList;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)CreateJoinLBSRoomEvent:(id)event;
-(void)tryJoinChatRoom;
-(void)OnUpdateCertInfo;
-(void)onSelectedWithLbsContactInfo:(id)lbsContactInfo;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(BOOL)CreateLBSFindEvent:(id)event;
-(BOOL)CreateClearLBSDataEvent;
-(void)onRetrieveLocationError:(int)error;
-(void)onRetrieveLocationTimeOut:(id)anOut;
-(void)onRetrieveLocationOK:(id)ok;
-(BOOL)clearMyLbsData;
-(void)cancelUpdateLbsContactInfo;
-(void)updateLbsContactInfo;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(id)init;
@end

@interface SeePeopleNearbyViewController : MMUIViewController <SeePeopleNearByUIDelegate, settingMyAccountExtInfoDelegate, UIAlertViewDelegate, UIActionSheetDelegate, WCIntroViewDelegate, PeopleNearByListViewControllerDelegate, MMIconActionSheetDelegate, VerifyPhoneDelegate> {
	PeopleNearByListViewController* m_peopleListView;
	SeePeopleNearByLogicController* m_logicController;
	MMLoadingView* m_loadingView;
	LBSErrorViewController* m_findNothingView;
	IntroView* m_introView;
}
@property(retain, nonatomic) LBSErrorViewController* findNothingView;
@property(retain, nonatomic) SeePeopleNearByLogicController* logicController;
@property(retain, nonatomic) PeopleNearByListViewController* peopleListView;
-(void)bindPhoneReturn;
-(void)onBindPhoneBtnClicked;
-(void)adjustSubviewRects;
-(void)onChatRoomNearByBtnClicked;
-(void)onCloseIntroView;
-(void)onIKnowItBtnClick;
-(void)confirmClearMyLbsData;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)SettingMyAccountExtInfoExit;
-(void)onJoinChatRoomFailed;
-(void)onJoinChatRoomFinishedWithResult:(id)result;
-(void)onJoinChatRoomStart;
-(void)onGetCertificationFinish;
-(void)onSelectedWithLbsContactInfo:(id)lbsContactInfo;
-(void)showPeopleInfoView:(id)view;
-(void)showContactInfoView:(id)view;
-(void)onUpdateLbsContactInfoError:(int)error;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onUpdateLbsContactInfoFinishedWithData:(id)data;
-(void)onClearMyLbsDataFinishedWithResult:(BOOL)result;
-(void)goBackToRootView;
-(void)showMessage:(id)message;
-(void)onRefreshMyFriends;
-(void)onClearMyLbsData;
-(void)willAppear;
-(void)viewDidLoad;
-(void)setTitleNavView;
-(id)getSexImage;
-(void)setRightNavBtn;
-(void)setRightNavBtnNil;
-(void)actionSheet:(id)sheet didSelectWithItem:(id)item;
-(void)showOperationMenu;
-(void)AddNewActionSheetCell2Array:(id)array WithText:(id)text WithImage:(id)image;
-(void)promptForLBSUsageWarnning;
-(void)onClickNeverPromptForAgree:(id)agree;
-(void)promptForProfileExtInfo;
-(BOOL)isProfileExtInfoOK;
-(void)stopLoading;
-(void)startLoading;
-(void)startLoadingWithText:(id)text;
-(void)dealloc;
-(id)init;
@end

@interface AccelerometerFilter : NSObject {
	double x;
	double y;
	double z;
}
@property(readonly, assign, nonatomic) double z;
@property(readonly, assign, nonatomic) double y;
@property(readonly, assign, nonatomic) double x;
@end

@interface HighpassFilter : AccelerometerFilter {
	double lastX;
	double lastY;
	double lastZ;
	BOOL hasXCrash;
	BOOL hasYCrash;
	BOOL hasZCrash;
	int xCountDown;
	int yCountDown;
	int zCountDown;
}
-(void)dealloc;
-(BOOL)addAccelerationByX:(double)x Y:(double)y Z:(double)z;
@end

@interface CShakeChecker : MMObject <UIAccelerometerDelegate> {
	MMDelegateProxy<ShakeCheckerDelegate>* m_delegate;
	CMMotionManager* m_motionMgr;
	HighpassFilter* m_filter;
	NSOperationQueue* m_queue;
}
-(void)dealloc;
-(void)stopCheck;
-(void)startCheck;
-(id)init;
-(void)setM_Delegate:(id)delegate;
@end

@interface ShakeLogicProxy : MMObject <ShakeMgrExt> {
	int m_logicType;
	MMDelegateProxy<ShakeLogicProxyDelegate>* m_delegate;
	ShakePeopleLogicController* m_shakePeopleLogic;
	ShakePageLogicController* m_shakePageLogic;
	ShakeShareLogicController* m_shakeShareLogic;
	ShakeMusicLogicController* m_shakeMusicLogic;
}
-(void)SetShakeList:(id)list andScene:(unsigned long)scene;
-(void)updateShakeLocation;
-(id)getMsgForState:(unsigned long)state;
-(BOOL)isShowBannerView;
-(void)shakeTerminate;
-(void)shakeReset;
-(void)shakeStop;
-(BOOL)shakeReport;
-(int)getShakeLogicType;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(void)onShakeMusicStorageChanged;
-(void)OnShakeShareCountChanged;
-(void)onShakePageStorageChanged;
-(void)onShakeStatusChanged;
-(void)onShakePeopleStorageChanged;
-(int)GetLogicTypeFromStatus;
@end

@interface ShakePageLogicController : MMObject <PBMessageObserverDelegate, ShakePageLogicControllerExt> {
	MMDelegateProxy<ShakeLogicProxyDelegate>* m_delegate;
	NSMutableArray* m_eventIDsToListen;
	ShakeTranImgReportResponse* m_reportResponse;
	ShakeTranImgGetResponse* m_getResponse;
	BOOL m_isShakeReportStarted;
	double m_dbLastReportTime;
	int m_shakeGetRetryTime;
	OrderedDictionary* m_needUpdateUrls;
	int m_lastBatchGetThumbEventID;
	double m_dbLastBatchGetThumbTime;
	int m_batchGetThumbInterval;
	NSTimer* m_timer;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(id)getMsgForState:(unsigned long)state;
-(BOOL)isShowBannerView;
-(void)shakeTerminate;
-(void)shakeReset;
-(void)shakeStop;
-(void)internalResetShake;
-(void)shakeReport;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(void)TimeCheckBatchGetThumb;
-(void)processBatchGetShakeTranImgRespone:(id)respone;
-(void)processGetResponse;
-(void)processReportResponse;
-(void)doBatchUpdateImageUrls;
-(void)doShakePageGet;
-(void)createBatchGetShakePageImageEvent;
-(void)createShakePageGetEvent;
-(void)createShakePageReportEvent;
-(void)removeObserverBatchGetEvent;
-(void)RemoveAllEvents;
-(BOOL)isInEventIDsToListen:(int)listen;
-(void)removeFromEventIDsToListen:(int)listen;
-(void)addToEventIDsToListen:(int)listen;
-(void)addNeedForUpdateShakePageUrl:(id)updateShakePageUrl;
@end

@interface ShakePeopleLogicController : MMObject <PBMessageObserverDelegate, LocationRetrieveDelegate> {
	unsigned long m_uiEventID;
	unsigned long m_uiTryCount;
	double m_dbLastReportTime;
	MMDelegateProxy<ShakeLogicProxyDelegate>* m_delegate;
	LocationRetriever* m_locationRetrieve;
	BOOL m_isTriggeredShakeReport;
	NSMutableArray* m_eventIDsToListen;
	ShakeReportResponse* m_reportResponse;
	ShakeGetResponse* m_getResponse;
	BOOL m_isTaskStoped;
	CLLocation* m_location;
}
@property(retain, nonatomic) CLLocation* m_location;
@property(assign, nonatomic) BOOL m_isTaskStoped;
@property(retain, nonatomic) ShakeGetResponse* m_getResponse;
@property(retain, nonatomic) ShakeReportResponse* m_reportResponse;
@property(retain, nonatomic) NSMutableArray* m_eventIDsToListen;
@property(assign, nonatomic) BOOL m_isTriggeredShakeReport;
@property(retain, nonatomic) LocationRetriever* m_locationRetrieve;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)SetShakeList:(id)list andScene:(unsigned long)scene;
-(void)updateShakeLocation;
-(id)getMsgForState:(unsigned long)state;
-(BOOL)isShowBannerView;
-(void)shakeTerminate;
-(void)shakeReset;
-(void)shakeStop;
-(void)shakeReport;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(void)onRetrieveLocationError:(int)error;
-(void)onRetrieveLocationTimeOut:(id)anOut;
-(void)onRetrieveLocationOK:(id)ok;
-(void)processGetResponse;
-(void)processReportResponse;
-(void)doShakeGet;
-(void)createShakeGetEvent;
-(void)createShakeReportEvent;
-(BOOL)isInEventIDsToListen:(int)listen;
-(void)removeFromEventIDsToListen:(int)listen;
-(void)addToEventIDsToListen:(int)listen;
-(BOOL)isShakeStarted;
@end

@interface ShakeShareLogicController : MMObject {
	MMDelegateProxy<ShakeLogicProxyDelegate>* m_delegate;
}
-(id)getMsgForState:(unsigned long)state;
-(BOOL)isShowBannerView;
-(void)shakeTerminate;
-(void)shakeReset;
-(void)shakeStop;
-(void)shakeReport;
-(void)internalStartShake;
-(id)initWithDelegate:(id)delegate;
-(void)dealloc;
@end

@interface ShakeViewController : MMUIViewController <ShakeListDelegate, ShakeBgImgDownloadMgrExt, ShakeCheckerDelegate, MMPickerViewDelegate, ShakeLogicProxyDelegate, shakeSingleViewDelegate, UIActionSheetDelegate, ShakeMainFrameDelegate, MMImagePickerManagerDelegate, ShakePageListViewControllerDelegate, ShakeSettingViewControllerDelegate, WCIntroViewDelegate, UIScrollViewDelegate, IUiUtilExt, MMIconActionSheetDelegate, IRecordPermissionCheckExt> {
	ShakeLogicProxy* m_logicProxy;
	ShakeCombineListViewController* m_listViewController;
	ShakeSingleView* m_shakeSingleView;
	ShakeMainView* m_mainView;
	IntroView* m_introView;
	BOOL m_bShaking;
	MMDelegateProxy<ShakeViewDelegate>* m_delegate;
	CShakeChecker* m_shakeChecker;
	BOOL m_bCanShake;
	MMHDHeadImageView* m_HDHeadImage;
	UIView* m_scrollView;
	BOOL m_bStartScroll;
	BOOL m_bListAnimating;
	BOOL m_bBackgroundRunning;
	unsigned m_shakeResultLocalID;
	BOOL m_bForceShakePageBannerHidden;
	UIImageView* m_shakeMusicIconImageView;
	UILabel* m_shakeMusicTipLable;
	UIButton* m_shakeMuiscSwitchButton;
	BOOL m_shakeMusicAnimation;
	BOOL m_isShowShakeMuiscSwitchButton;
	BOOL m_canDown;
	BOOL isChinaUser;
	BOOL _m_bShowActionSheet;
}
@property(assign, nonatomic) BOOL m_bShowActionSheet;
@property(assign, nonatomic) BOOL m_bCanShake;
-(void)OnRecordDenied;
-(void)OnRecordPermissioned;
-(void)adjustSubviewRects;
-(void)onCloseIntroView;
-(void)onIKnowItBtnClick;
-(void)onSelectShakeSetting:(id)setting withData:(id)data;
-(void)setShakeResultLocalID:(unsigned)anId;
-(int)getShakeLogicType;
-(void)enableShake:(BOOL)shake;
-(id)getMsgForState:(unsigned long)state;
-(void)onShakeResultCountChanged;
-(void)onShakeLogicChanged;
-(void)tryShowShakeMusicTipBanner;
-(void)updateShakeMusicTipBannerView;
-(void)showViewControllerFromList:(id)list;
-(id)getViewController;
-(void)OnClickBannerBtn;
-(void)OnOpenSayHello;
-(void)showMessage:(id)message;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnGetNewBgImg;
-(void)onShakeMatchFail:(id)fail;
-(void)onShakeGetFail:(id)fail;
-(void)onShakeReportFail:(id)fail;
-(void)onShakeGetEndWithResult:(id)result;
-(void)onShakeReportEndWithResult:(id)result;
-(void)onShakePageGetFail:(id)fail;
-(void)onShakePageGetEndWithResult:(id)result;
-(void)dismissViewController;
-(void)onShakePageReportFail:(id)fail;
-(void)onShakePageReportEndWithResult:(id)result;
-(void)onShakeMusicReportFail:(int)fail ErrMsg:(id)msg;
-(void)onShakeMusicReportEndWithMusicItem:(id)musicItem Offset:(float)offset;
-(void)onSelectedWithLbsContactInfo:(id)lbsContactInfo;
-(void)onUpdateLbsContactInfoError:(int)error;
-(void)onUpdateLbsContactInfoFinishedWithData:(id)data;
-(void)onClearMyLbsDataFinishedWithResult:(BOOL)result;
-(void)onNewCountChanging:(int)changing;
-(void)OnShake;
-(BOOL)isInFindFriendTab;
-(void)setCanShake:(BOOL)shake;
-(void)viewWillBePoped:(BOOL)view;
-(void)willAppear;
-(BOOL)shouldInteractivePop;
-(void)onBeforeShow;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)Report;
-(void)playShakeSound;
-(void)playShakeResultSound:(BOOL)sound;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)OnAnimationEnd:(BOOL)end;
-(void)playSoundByAQAudioPlayer:(id)player type:(id)type;
-(void)showImagePicker:(int)picker;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)handleImage:(id)image;
-(void)useDefalutHideImage;
-(void)showList;
-(void)updateListView;
-(void)showShakeSingleView:(id)view andScene:(unsigned long)scene;
-(void)initHDHeadImage:(id)image;
-(void)showHDHeadImage;
-(id)itemToContact:(id)contact;
-(void)onFinishShowAnimation;
-(void)GoToSayHello:(id)sayHello andScene:(unsigned long)scene;
-(void)onSelectedContactInfo:(id)info isFromList:(BOOL)list;
-(BOOL)isInMyContactList:(id)myContactList;
-(void)showPeopleInfoView:(id)view isFromList:(BOOL)list;
-(void)showContactInfoView:(id)view isFromList:(BOOL)list;
-(void)showErrorAlert:(id)alert;
-(void)dealloc;
-(BOOL)canBecomeFirstResponder;
-(void)promptForShakeUsageWarnning;
-(void)viewDidLoad;
-(void)initView;
-(void)openShakeMusic;
-(void)withdrawMusicBannerView;
-(void)popShakeMusicBannerView;
-(void)OnStopShakeMusicAnimation;
-(void)initBackgroundView;
-(void)initScrollView;
-(void)initListView;
-(void)updateMuteStauts:(BOOL)stauts;
-(void)SetMuteStauts:(int)stauts;
-(void)switchListStatus:(id)status;
-(void)willDismissAndShow;
-(void)willShow;
-(void)willDisshow;
-(void)stopAllAnimation;
-(void)OnCloseIntroView;
-(void)OnClickIntroButton;
-(void)OnSetting;
-(void)stopLoading;
-(void)startLoading;
-(void)lockScreen;
-(void)unlockScreen;
-(void)enableAllButton;
-(void)disableAllButton;
-(void)doDownAnimation;
-(void)doUpAnimation;
-(void)OnStopDownAnimation;
-(void)OnStopUpAnimation;
-(void)updateTopBannerView;
-(id)init;
-(void)applicationDidBecomeActiveNotification:(id)application;
-(void)applicationWillResignActiveNotification:(id)application;
-(void)setM_Delegate:(id)delegate;
@end

@interface ShakePageDeActivateViewController : MMUIViewController <UIAlertViewDelegate> {
}
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(void)onClickUnbind;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onBack;
@end

@interface ShakePageUnbindBookmarkViewController : MMUIViewController <UIAlertViewDelegate> {
}
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(void)onClickUnbind;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onBack;
@end

@interface ShakePageUnbindViewController : MMUIViewController <UIAlertViewDelegate> {
}
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(void)onClickUnbind;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onBack;
@end

@interface ShakeCombineListViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, ShakeMgrExt> {
	MMTableView* m_tableView;
	NSMutableDictionary* m_userHeaderImageCache;
	MMDelegateProxy<ShakeListDelegate>* m_delegate;
	BOOL m_bShowMore;
	unsigned long m_shakeListViewType;
	NSMutableArray* m_tableRows;
	int m_newCount;
}
@property(retain, nonatomic) NSMutableDictionary* m_userHeaderImageCache;
@property(retain, nonatomic) MMTableView* m_tableView;
-(void)adjustSubviewRects;
-(void)adjustView;
-(void)onTopBarFrameChanged;
-(void)onShakeMusicStorageChanged;
-(void)onShakePeopleStorageChanged;
-(void)onShakePageStorageChanged;
-(void)willDisappear;
-(void)willAppear;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)onSelectedContactInfo:(id)info;
-(BOOL)isInMyContactList:(id)myContactList;
-(void)showPeopleInfoView:(id)view;
-(void)showContactInfoView:(id)view;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)makeShakeMusicCell:(id)cell Item:(id)item IndexPath:(id)path;
-(id)makeShakePageCell:(id)cell Item:(id)item IndexPath:(id)path;
-(id)makeShakePeopleCell:(id)cell Item:(id)item IndexPath:(id)path;
-(void)makeMoreCell:(id)cell;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)showNoResultTips:(id)tips;
-(id)getCachedHeaderImageForUser:(id)user imgUrl:(id)url;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initTableView;
-(void)onShowAll;
-(void)setShowAll:(BOOL)all;
-(void)OnReturn;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onClickClearHistory;
-(void)clearListData;
-(id)initWithListType:(unsigned long)listType;
-(void)setM_Delegate:(id)delegate;
@end

@interface ShakePageImageScrollViewController : MMFullScreenViewController <UIScrollViewDelegate, PageScrollViewDelegate, PageScrollViewDataSource, UIActionSheetDelegate, ShakePageImageViewDelegate, ShareUploadTaskConfirmLogicHelperDelegate, SessionSelectControllerDelegate, UIAlertViewDelegate> {
	PageScrollView* _pageScrollView;
	BOOL _pageScrollViewLayouting;
	BOOL _orientationRotating;
	UIButton* _deleteButton;
	NSMutableArray* _arrViewItem;
	unsigned _currentIndex;
	MMDelegateProxy<WCMultiImageScannerDelegate>* _scannerDelegate;
	CMessageWrap* _currentShareMsgWrap;
	CContact* _toContact;
}
@property(retain, nonatomic) NSMutableArray* arrViewItem;
@property(retain, nonatomic) UIButton* deleteButton;
@property(retain, nonatomic) PageScrollView* pageScrollView;
-(void)onShakePageImageViewLoaded:(id)loaded;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)forwardMessage:(id)message;
-(void)OnSendUploadTaskOK:(id)ok;
-(void)onSavedPhotosAlbum:(id)album;
-(id)getCurrentPageImage;
-(id)getCurrentPageImageUrl;
-(void)onOperate;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)pageScrollView:(id)view viewForItem:(unsigned)item;
-(unsigned)numberOfItems:(id)items;
-(unsigned)currentIndex:(id)index;
-(void)updateShareButton;
-(void)onChangedWithCurrentIndex:(int)currentIndex;
-(void)onSingleClicked;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)layoutScrollView:(BOOL)view;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)willDisappear;
-(void)didAppear;
-(void)willAppear;
-(void)dealloc;
-(id)initWithViewItems:(id)viewItems currentIndex:(unsigned)index;
-(void)setScannerDelegate:(id)delegate;
-(CGPoint)contentOffsetForPageScrollView;
-(CGSize)contentSizeForPageScrollView;
-(CGRect)frameForPageAtItem:(unsigned)item;
-(CGRect)frameForPageScrollView:(BOOL)pageScrollView;
-(void)handleSingleTap;
-(void)existFullScreen;
-(void)enterFullScreen;
-(void)showStatusBar;
-(void)hideStatusBar;
-(void)shareTimeline;
-(void)showAlert;
-(void)deleteCurrentItem;
-(void)updateTitle;
-(void)initScrollView;
-(void)initNavigationBar;
@end

@interface DataButton : UIButton {
	NSIndexPath* data;
}
@property(retain, nonatomic) NSIndexPath* data;
-(void)dealloc;
@end

@interface ShakePageListViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, ShareMessageLogicHelperDelegate> {
	MMTableView* m_tableView;
	NSMutableArray* m_tableDatas;
	BOOL m_isShowAll;
	int m_newCount;
	MMDelegateProxy<ShakePageListViewControllerDelegate>* m_delegate;
	ShakePageItem* m_showSingleItme;
	ShakePageItem* m_currentItem;
	CMessageWrap* m_wrapMsg;
	NSString* m_nsThumbUrl;
}
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) NSString* m_nsThumbUrl;
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
-(void)onSendOK:(id)ok;
-(void)setShowWithItem:(id)item;
-(void)setIsShowAll:(BOOL)all;
-(void)onShare:(id)share;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)getImageRowCountAtSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)reloadTableSecionData;
-(void)updateRowsViews;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onClickLinkBtn:(id)btn;
-(void)viewImage:(id)image;
-(void)showViewController:(id)controller;
-(void)willAppear;
-(void)didAppear;
-(void)OnXXX;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(id)showMoreBtnView;
-(void)OnClickShowMoreBtn;
-(void)initData;
-(void)setM_Delegate:(id)delegate;
@end

@interface ShakeSettingViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, ShakeMgrExt> {
	MMDelegateProxy<ShakeSettingViewControllerDelegate>* m_delegate;
	MMTableView* m_tableView;
	NSMutableArray* m_tableSections;
}
-(void)onShakeStatusChanged;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)onSouncStatusSwitchChanged:(id)changed;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)OnXXX;
-(void)OnDataChange;
-(void)dealloc;
-(id)init;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initData;
-(void)setM_Delegate:(id)delegate;
@end

@interface ShakeMainView : MMUIScrollView <FriendAsistSessionExt> {
	UIImageView* m_imageHide;
	UIImageView* m_imageLineUp;
	UIImageView* m_imageLineDown;
	UIButton* m_btnHelp;
	UILabel* m_label;
	UIImageView* m_bkgViewUp;
	UIImageView* m_bkgViewDown;
	UIActivityIndicatorView* m_loadingView;
	UILabel* m_labelTips;
	UIView* m_hideView;
	BOOL m_bAnimating;
	BOOL m_bClickHideImage;
	BOOL m_bUseDefaultImage;
	MMDelegateProxy<ShakeMainFrameDelegate>* m_delegate;
	MMSayHelloButton* m_btnSayHello;
	UILabel* m_labNoHello;
	BOOL m_bShowList;
	UIActivityIndicatorView* m_pageLoading;
	UIButton* m_bannerBtn;
	UILabel* m_pageLable;
	UILabel* m_shakeResultCountLable;
	UIImageView* m_shakeResultBGImage;
	CGRect m_originalLableFrame;
	BOOL m_bIsSetImageLine;
	UIImageView* m_imageViewDown;
	UIImageView* m_imageViewUp;
}
@property(retain, nonatomic) UIImageView* m_imageViewDown;
@property(retain, nonatomic) UIImageView* m_imageViewUp;
-(id).cxx_construct;
-(void)updateShakeResultCountLabel;
-(id)floatShakeResultCountLable;
-(id)stringOfSharedResultCount;
-(int)countOfSharedResult;
-(void)SetShakePageBannerHidden:(BOOL)hidden;
-(id)shakePageBannerView;
-(void)onFriendAssistUnreadCountChanged;
-(void)hideSayHello:(BOOL)hello;
-(void)OnOpenSayHello;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)startAnimationSplit;
-(BOOL)bIsAnimating;
-(void)waitToNextAnimation;
-(void)startAnimationMerge;
-(void)resetStatus;
-(void)resetTipViewStatus;
-(void)dealloc;
-(void)fadeHide;
-(void)stopAllAnimation;
-(void)stopFade;
-(void)setErrorMsg:(id)msg;
-(void)updateViewForLoading;
-(void)updateViewForNormal;
-(void)updateView;
-(void)updateShakeSayHelloView;
-(void)initSayHelloBtn;
-(void)updateHideImage;
-(void)setInfoBtnEnable;
-(void)setInfoBtnDisabled;
-(void)onClickHelp;
-(id)getHideImage;
-(id)tryGenHQImage:(id)image;
-(void)hideIntroButton:(BOOL)button;
-(id)getHideView;
-(id)initWithFrame:(CGRect)frame;
-(void)setM_Delegate:(id)delegate;
@end

@interface ShakePageBigImageView : MMWebImageView {
	MMDelegateProxy<ShakePageImageViewDelegate>* m_delegate;
	ShakePageUrl* m_urlItem;
	BOOL m_bIsLoading;
}
@property(retain, nonatomic) ShakePageUrl* m_urlItem;
-(BOOL)isLoading;
-(void)ImageDidLoad:(id)image;
-(void)startLoadImage;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)setM_Delegate:(id)delegate;
@end

@interface ShakePageThumbImageView : MMWebImageButton <ShakePageLogicControllerExt> {
	ShakePageUrl* urlItem;
}
@property(retain, nonatomic) ShakePageUrl* urlItem;
-(void)onShakePageBigImageLoaded:(id)loaded;
-(BOOL)isLoaded;
-(void)onShakePageUrlUpdateWithInfo:(id)info;
-(void)layoutSubviews;
-(void)ImageDidFail;
-(void)ImageDidLoad:(id)image;
-(BOOL)setImageURL:(id)url;
-(void)updateContentPosition;
-(void)stopLoadIndicator;
-(void)startLoadIndicator;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(void)UnRegBigImageLoad;
-(void)RegBigImageLoad;
@end

@interface ShakeSingleView : MMUIView <IHeadImageExt> {
	UIImageView* m_bkgImageView;
	UIImageView* m_indicatorImageView;
	UIImageView* m_sexImageView;
	MMHeadImageView* m_headImageView;
	UILabel* m_labelLoc;
	UILabel* m_labelNickName;
	UILabel* m_labelCity;
	UILabel* m_labelFriend;
	ShakeGetItem* m_oShakeGetItem;
	unsigned long m_uiScene;
	MMDelegateProxy<shakeSingleViewDelegate>* m_delegate;
}
-(void)dealloc;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)isClickHead:(CGPoint)head;
-(BOOL)isPointInView:(CGPoint)view;
-(id)initWithItem:(id)item andScene:(unsigned long)scene;
-(BOOL)isInMyContactList:(id)myContactList;
-(void)doShowAnimation;
-(void)finishShowAnimation;
-(void)stopAllAnimation;
-(void)setM_Delegate:(id)delegate;
@end

@interface ShakeTableViewCell : MMTableViewCell {
	UILabel* m_nickNameLabel;
	UILabel* m_personalRemarkLabel;
	UILabel* m_remarkContainer;
	UILabel* m_distanceLabel;
	UILabel* m_addedLabel;
	UIImageView* m_genderImageView;
	UIImageView* m_remarkBKImage;
	UIView* m_headerView;
}
-(void)hideSubViews;
-(void)updateWithLbsContactInfo:(id)lbsContactInfo withHeaderView:(id)headerView;
-(BOOL)isInMyContactList:(id)myContactList;
-(void)dealloc;
@end

@interface ScrollViewPageCountHelper : MMObject <UIScrollViewDelegate> {
	MMDelegateProxy<ScrollViewPageCountDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<ScrollViewPageCountDelegate>* m_delegate;
-(id)initWithDelegate:(id)delegate;
-(void)scrollViewDidScroll:(id)scrollView;
@end

@interface QRSpecialViewController : MMUIViewController <UIWebViewDelegate> {
	NSString* m_nsUrl;
	UIWebView* m_webView;
	UIActivityIndicatorView* m_activityIndicator;
}
@property(retain, nonatomic) NSString* m_nsUrl;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidStartLoad:(id)webView;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initData;
@end

@interface VcardViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate, ABPeoplePickerNavigationControllerDelegate, ABNewPersonViewControllerDelegate, ILinkEventExt> {
	MMVcardItem* _vcardItem;
	MMTableView* _tableView;
	NSString* _copyedText;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > _mapSectionToSectionType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > _mapPersonCellToCellType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > _mapUrlCellToCellType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > _mapBirthdayCellToCellType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > _mapNoteCellToCellType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > _mapLogoCellToCellType;
	map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > _mapSoundCellToCellType;
}
@property(retain, nonatomic) NSString* copyedText;
@property(retain, nonatomic) MMTableView* tableView;
@property(retain, nonatomic) MMVcardItem* vcardItem;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)onPhoneLongPressed:(id)pressed withRect:(CGRect)rect withView:(id)view;
-(void)onLinkLongPressed:(id)pressed withRect:(CGRect)rect withView:(id)view;
-(void)showMenuItemForText:(id)text withRect:(CGRect)rect withView:(id)view;
-(void)onCopy:(id)copy;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)heightForUrlSectionRow:(unsigned)urlSectionRow;
-(float)heightForPersonSectionRow:(unsigned)personSectionRow;
-(float)heightForCellAddress:(id)cellAddress;
-(float)heightForCellText:(id)cellText;
-(void)makeSoundSectionCell:(id)cell row:(unsigned)row;
-(void)makeSoundCell:(id)cell;
-(void)makeLogoSectionCell:(id)cell row:(unsigned)row;
-(void)makeNoteSectionCell:(id)cell row:(unsigned)row;
-(void)makeBirthdaySectionCell:(id)cell row:(unsigned)row;
-(void)makeUrlSectionCell:(id)cell row:(unsigned)row;
-(void)makePersonSectionCell:(id)cell row:(unsigned)row;
-(void)makeAddressCell:(id)cell addressType:(id)type addressItem:(id)item;
-(id)validAddressFields:(id)fields;
-(void)makeCell:(id)cell col:(id)col value:(id)value;
-(int)getLinesForLabelValueText:(id)labelValueText;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)selectSoundSectionRow:(unsigned)row;
-(void)selectUrlSectionRow:(unsigned)row;
-(id)ensureHttpScheme:(id)scheme;
-(void)selectPersonSectionRow:(unsigned)row;
-(void)callPhoneNumber:(id)number;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)createNewContact;
-(void)addToExistContact;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)openNewPersonViewController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)onCancel:(id)cancel;
-(void)addRelatedNameProperty:(void*)property;
-(void)addUrlProperty:(void*)property;
-(void)addAddressProperty:(void*)property;
-(void)addAddressProperty:(id)property fromVcardAddress:(id)vcardAddress;
-(void)addPhoneProperty:(void*)property;
-(void)addEmailProperty:(void*)property;
-(void)addSingleValueProperty:(void*)property;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)onReturn;
-(void)dealloc;
-(void)initView;
-(void)initFooterView;
-(void)onAddContact;
-(void)initHeaderView;
-(id)getShowName:(id)name;
-(void)initData;
-(void)initSectionType;
-(void)initCellType;
-(void)initSoundSectionCellType;
-(void)initLogoSectionCellType;
-(void)initNoteSectionCellType;
-(void)initBirthdaySectionCellType;
-(void)initUrlSectionCellType;
-(void)initPersonSectionCellType;
-(BOOL)containDigit:(id)digit;
@end

@interface RespWrap : NSObject {
	int errType;
	int errCode;
	unsigned long eventID;
}
@property(assign, nonatomic) unsigned long eventID;
@property(assign, nonatomic) int errCode;
@property(assign, nonatomic) int errType;
-(void)dealloc;
-(id)init;
@end

@interface EventService : MMService <MMService> {
	CMultiEvent* m_oEventMgr;
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	CNetWorkMgr* m_oNetworkMgr;
	id<NotifyFromEventDelegate> m_delEventHandler;
	id<NotifyFromCgiEventDelegate> m_delCgiEventHandler;
	NSString* m_nsDocPath;
	NSMutableDictionary* m_usbCmdHandler;
	NSRecursiveLock* m_usbCmdLock;
	NSData* m_usbEncyptKey;
}
@property(retain, nonatomic) CMultiEvent* m_oEventMgr;
-(void)onGYNetEnd:(int)end Code:(int)code Msg:(const char*)msg Hashcode:(unsigned long)hashcode SvrID:(const AutoBuffer*)anId;
-(void)HandleRespThread:(id)thread;
-(int)buf2Resp:(unsigned long)resp In:(const AutoBuffer*)anIn Id:(AutoBuffer*)anId;
-(BOOL)req2Buf:(unsigned long)buf Out:(AutoBuffer*)anOut;
-(void)StopEvent:(unsigned long)event;
-(void)TryStartEvents;
-(void)StopService;
-(void)StartService;
-(unsigned long)CreateGenericSwitchEvent:(unsigned long)event on:(BOOL)on bitset:(unsigned long)bitset;
-(unsigned long)CreateGenericOplogEvent:(unsigned long)event message:(id)message needSync:(BOOL)sync;
-(unsigned long)CreateProtobufEvent:(id)event Flag:(unsigned long)flag EventType:(unsigned long)type;
-(unsigned long)CreateProtobufEvent:(id)event Flag:(unsigned long)flag;
-(unsigned long)internalCreateProtobufEvent:(id)event Flag:(unsigned long)flag EventType:(unsigned long)type;
-(void)dealloc;
-(void)InitDB:(id)db Lock:(id)lock NetworkdMgr:(id)mgr DocPath:(id)path EventHandler:(id)handler CgiEventHandler:(id)handler6;
-(id)init;
-(unsigned long)AddEvent:(id)event;
-(unsigned long)CreateEvent:(unsigned long)event EventInfo:(id)info Flag:(unsigned long)flag Ret:(unsigned*)ret RetInfo:(id)info5 Delegate:(id)delegate MultiEvent:(id)event7;
-(unsigned long)CreateEvent:(unsigned long)event EventInfo:(id)info Flag:(unsigned long)flag Ret:(unsigned*)ret RetInfo:(id)info5;
-(unsigned long)CreateEvent:(unsigned long)event EventInfo:(id)info Flag:(unsigned long)flag Ret:(unsigned*)ret RetInfo:(id)info5 Delegate:(id)delegate;
-(unsigned long)CreateEvent:(unsigned long)event EventInfo:(id)info Flag:(unsigned long)flag Ret:(unsigned*)ret RetInfo:(id)info5 LogicDelegate:(id)delegate;
-(unsigned long)CreateEvent:(unsigned long)event EventInfo:(id)info Flag:(unsigned long)flag Ret:(unsigned*)ret RetInfo:(id)info5 Delegate:(id)delegate LogicDelegate:(id)delegate7;
-(unsigned long)CreateEvent:(unsigned long)event EventInfo:(id)info Flag:(unsigned long)flag Ret:(unsigned*)ret RetInfo:(id)info5 Delegate:(id)delegate LogicDelegate:(id)delegate7 MultiEvent:(id)event8;
@end

@interface EventServiceUtil : NSObject {
}
+(void)AddReportOplog:(id)oplog;
+(BOOL)InsertOplog:(unsigned long)oplog Oplog:(id)oplog2;
+(BOOL)IsEventRunning:(unsigned long)running;
+(unsigned long)IsEventTypeExist:(unsigned long)exist;
@end

@interface MsgHelper : NSObject {
}
+(BOOL)IsShowPush:(BOOL)push Des:(unsigned long)des Msg:(id)msg;
+(BOOL)AddMsg:(id)msg EventInfo:(id)info ChatName:(id)name Des:(unsigned long)des DBRet:(BOOL*)ret DB:(id)db Lock:(id)lock DuplicateList:(id)list;
+(BOOL)AddMessageToDB:(id)db MsgWrap:(id)wrap Des:(unsigned long)des DB:(id)db4 Lock:(id)lock;
+(BOOL)AddMessageToChatExt:(id)chatExt MsgWrap:(id)wrap DB:(id)db;
+(void)HandleThumb:(id)thumb Message:(id)message Lock:(id)lock;
+(BOOL)IsNotifyOnNotAddDB:(id)db ChatName:(id)name;
+(BOOL)IsNotifyOnAddMsg:(id)msg ChatName:(id)name;
+(BOOL)CanNotAddToDB:(id)db ChatName:(id)name;
+(BOOL)InternalCanNotAddDB:(id)db ChatName:(id)name;
+(id)GetChatName:(id)name Des:(unsigned*)des;
@end

@interface BakChatUploadSelecteSessionViewController : MMUIViewController <UISearchDisplayDelegate, UITableViewDelegate, UITableViewDataSource, MMSearchBarDelegate, ContactsDataLogicDelegate> {
	MMTableView* m_tableView;
	UILabel* m_nobodyLabel;
	NSDictionary* m_dicExistContact;
	NSMutableArray* m_nsContactsArray;
	NSMutableArray* m_nsFilterContactsArray;
	BOOL m_bShowHistoryGroup;
	BOOL m_bShowBrandContact;
	BOOL m_bSelectedAll;
	NSMutableDictionary* m_dicMultiSelect;
	NSIndexPath* m_indexPathToBeDeleted;
	MMSearchBar* m_searchBar;
	UIButton* m_panelBtn;
	UILabel* m_totalSizeLabel;
	unsigned totalSize;
	unsigned long m_uiGroupScene;
}
-(void)resetTableViewOffset:(id)offset;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(void)makeSearchCell:(id)cell contact:(id)contact;
-(BOOL)onFilterContactCandidate:(id)candidate;
-(void)onContactsDataChange;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeHistoryGroupCell:(id)cell;
-(void)makeCell:(id)cell tableCell:(id)cell2 section:(unsigned)section row:(unsigned)row;
-(void)makeCell:(id)cell contact:(id)contact;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)initView;
-(void)initSearchBar;
-(void)initTableView;
-(void)setExtraCellLineHidden:(id)hidden;
-(void)initFooterPanelView;
-(void)initTitleArea;
-(void)initData;
-(void)onDone:(id)done;
-(void)onCancel:(id)cancel;
-(void)onSelectAll:(id)all;
-(BOOL)updateMultiSelect:(id)select contact:(id)contact tableView:(id)view;
-(void)updataTotalSizeLabel;
-(void)updatePanelBtn;
-(void)addSelect:(id)select;
-(BOOL)checkAddMultiSelect:(id)select;
-(id)getCellTextView:(id)view;
-(id)getCellImage:(id)image;
-(BOOL)isSelected:(id)selected;
-(void)removeSelect:(id)select;
-(id)init;
@end

@interface BakChatUploadViewController : MMUIViewController <IBakChatUploadMgrExt, UIAlertViewDelegate> {
	UIImageView* m_uploadIcon;
	MMProgressView* m_uploadProgressView;
	UILabel* m_successLabel;
	UITextView* m_successRemarkLabel;
	UILabel* m_uploadLabel;
	UIButton* m_restartButton;
	UIButton* m_cancelButton;
	UIActivityIndicatorView* m_activityIndicatorView;
	BOOL m_inmidiated;
	BOOL m_bSuccessUpload;
	BOOL m_allSelected;
	NSArray* m_sessionUsrnameArray;
	unsigned PopViewControllerCount;
	NSString* m_oPassword;
}
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnBakChatUploadMessage:(id)message;
-(void)BackButtonDown:(id)down;
-(void)ReturnButtonDown:(id)down;
-(void)comeToMainFrame;
-(void)pauseButtonDone:(id)done;
-(void)retryButtonDone:(id)done;
-(void)cancelButtonDone:(id)done;
-(void)inPauseStatus;
-(void)inNoDataError;
-(void)inErrorStatus;
-(void)inSuccessStatus;
-(void)inGetEndStatus;
-(void)inUploadPackageStatus:(float)uploadPackageStatus;
-(void)inGetHeadStatus;
-(void)inCopyDBStatus;
-(void)loadView;
-(void)dealloc;
-(id)initWithBakCHatBreakPointInmidiatedStart:(BOOL)bakCHatBreakPointInmidiatedStart;
-(id)initWithBakChatSessionUsrnameArray:(id)bakChatSessionUsrnameArray InmidiatedStart:(BOOL)start AllSelected:(BOOL)selected;
-(id)initWithBakChatSessionUsrnameArray:(id)bakChatSessionUsrnameArray Password:(id)password InmidiatedStart:(BOOL)start AllSelected:(BOOL)selected;
@end

@interface DraftController : NSObject <NSCoding> {
	NSMutableArray* m_arrReceiver;
	NSMutableArray* m_arrCc;
	NSMutableArray* m_arrBcc;
	NSString* m_topic;
	NSString* m_content;
}
@property(retain, nonatomic) NSString* m_content;
@property(retain, nonatomic) NSString* m_topic;
@property(retain, nonatomic) NSMutableArray* m_arrBcc;
@property(retain, nonatomic) NSMutableArray* m_arrCc;
@property(retain, nonatomic) NSMutableArray* m_arrReceiver;
+(void)deleteAllDraft;
+(void)deleteDraft:(id)draft;
+(BOOL)writeAllDraft:(id)draft mailID:(id)anId;
+(id)readAllDraft:(id)draft;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface AudioReceiver : MMService <AMRAudioPlayerDelegate, SPXAudioPlayerDelegate, DownloadVoiceDelegate, MessageObserverDelegate, MMService> {
	AMRAudioPlayer* m_amrplayer;
	SPXAudioPlayer* m_spxplayer;
	CMainControll* m_mainController;
	CDownloadVoiceMgr* m_download;
}
-(BOOL)isPlaying;
-(BOOL)StopPlayTmpAudio:(unsigned long)audio;
-(BOOL)StartPlayTmpAudioWithAutoMode:(unsigned long)autoMode;
-(BOOL)StartPlayTmpAudioWithEarpieceMode:(unsigned long)earpieceMode;
-(BOOL)StartPlayTmpAudio:(unsigned long)audio;
-(BOOL)StartPlayTmpAudio:(unsigned long)audio forceEarpieceMode:(BOOL)mode forceAutoMode:(BOOL)mode3;
-(BOOL)StopPlay:(id)play MesLocalID:(unsigned long)anId;
-(BOOL)StartPlayWithAutoMode:(id)autoMode MesLocalID:(unsigned long)anId;
-(BOOL)StartPlayWithEarpieceMode:(id)earpieceMode MesLocalID:(unsigned long)anId;
-(BOOL)StartPlay:(id)play MesLocalID:(unsigned long)anId Path:(id)path;
-(BOOL)StartPlay:(id)play MesLocalID:(unsigned long)anId;
-(BOOL)StartPlay:(id)play MesLocalID:(unsigned long)anId Path:(id)path forceEarpieceMode:(BOOL)mode forceAutoMode:(BOOL)mode5;
-(void)dealloc;
-(BOOL)initFacade:(id)facade;
-(id)init;
-(BOOL)updateMessageToDB:(id)db;
-(BOOL)getMessageFromDB:(id)db;
-(id)getAudioFileName:(id)name LocalID:(unsigned long)anId;
-(id)getChatName:(id)name;
-(void)OnAMREarTip;
-(void)OnAMREndPlaying:(id)playing isForceStop:(BOOL)stop;
-(void)OnAMRBeginPlaying:(id)playing ErrNo:(int)no;
-(void)OnAMRLevelMeter:(id)meter Peak:(float)peak;
-(void)OnSPXEarTip;
-(void)OnSPXEndPlaying:(id)playing isForceStop:(BOOL)stop;
-(void)OnSPXLevelMeter:(id)meter Peak:(float)peak;
-(void)OnRecvData:(id)data MesLocalID:(unsigned long)anId MesSvrID:(unsigned long)anId3 CreateTime:(unsigned long)time VoiceTime:(unsigned long)time5 Offset:(unsigned long)offset Len:(unsigned long)len Data:(id)data8 EndFlag:(unsigned long)flag ErrNo:(unsigned long)no;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
@end

@interface AudioSender : MMService <AMRAudioRecorderDelegate, SPXAudioRecorderDelegate, UploadVoiceDelegate, MMService> {
	AMRAudioRecorder* m_amrrecorder;
	SPXAudioRecorder* m_spxrecorder;
	CMainControll* m_mainController;
	MMNewUploadVoiceMgr* m_upload;
}
-(void)ForwardVoiceMsg:(id)msg ToUsr:(id)usr;
-(void)ResendVoiceMsg:(id)msg MsgWrap:(id)wrap;
-(BOOL)IsNeedRecordPrepareStatus;
-(unsigned long)calcVoiceTime:(unsigned long)time;
-(BOOL)isRecording;
-(BOOL)StopRecord;
-(void)stop;
-(BOOL)CancelRecord;
-(BOOL)RemoveTmpAudio:(unsigned long)audio;
-(id)GetTmpAudio:(unsigned long)audio;
-(unsigned long)StartRecord;
-(BOOL)CanStartRecord;
-(BOOL)StartRecordFrom:(id)from ToUser:(id)user UserInfo:(id)info;
-(BOOL)CanStartRecordFrom:(id)from ToUser:(id)user;
-(BOOL)isNeedSpeexAudioByUsrName:(id)name;
-(void)dealloc;
-(void)onServiceInit;
-(BOOL)initFacade:(id)facade;
-(id)init;
-(BOOL)prepareSend:(id)send;
-(void)MainThreadAddMsg:(id)msg;
-(BOOL)deleteMessageFromDB:(id)db;
-(BOOL)updateMessageStatus:(id)status;
-(BOOL)updateMessageToDB:(id)db;
-(BOOL)addMessageToDB:(id)db;
-(id)getTmpAudioFileName:(unsigned long)name;
-(id)getAudioFileName:(id)name LocalID:(unsigned long)anId;
-(id)getChatName:(id)name;
-(void)OnAMRPart:(id)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnAMREndRecording:(id)recording;
-(void)OnAMRBeginRecording:(id)recording ErrNo:(int)no;
-(void)OnAMRLevelMeter:(id)meter Peak:(float)peak;
-(BOOL)OnPrepareSendAMR:(id)amr;
-(BOOL)CheckIfButtonPressing:(id)pressing;
-(void)OnSPXPart:(id)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnSPXEndRecording:(id)recording;
-(void)OnSPXBeginRecording:(id)recording ErrNo:(int)no;
-(void)OnSPXLevelMeter:(id)meter Peak:(float)peak;
-(BOOL)OnPrepareSendSPX:(id)spx;
-(void)OnPartSent:(id)sent MesLocalID:(unsigned long)anId MesSvrID:(unsigned long)anId3 CreateTime:(unsigned long)time Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ErrNo:(unsigned long)no VoiceFormat:(unsigned long)format ForwardFlag:(unsigned long)flag10;
@end

@interface AudioUtil : NSObject {
}
+(unsigned long)calcVoiceTime:(unsigned long)time VoiceFormat:(unsigned long)format;
@end

@interface BakChatAESDecrypt : NSObject {
}
+(id)dataPackageAESDecrypt:(id)decrypt WithKey:(id)key Final:(BOOL)final;
@end

@interface BakChatAESEncrypt : NSObject {
}
+(id)msgPackageAESEncrypt:(id)encrypt WithKey:(id)key;
+(id)mediaPackageAESEncrypt:(id)encrypt WithKey:(id)key Final:(BOOL)final;
@end

@interface BakChatDB : CBaseDB {
}
-(void)RegisterTypeOfCol;
-(unsigned)GetMsgCount:(id)count;
-(id)GetMsg:(id)msg FromSvrID:(unsigned long)svrID Limit:(unsigned long)limit;
-(id)GetMsg:(id)msg Where:(id)where Limit:(unsigned long)limit;
-(void)HandleMessage:(id)message ChatName:(id)name Des:(unsigned long)des;
-(id)GetLocalUsrName:(id)name;
-(BOOL)copyMainDBToBakChatDB:(id)bakChatDB WithMainControllerLock:(id)mainControllerLock;
-(void)removeBakChatDB;
-(BOOL)openBakChatDB;
-(void)dealloc;
-(id)initBakChatDB:(id)db UsrName:(id)name WithLock:(id)lock;
@end

@interface BakChatRecoverPackage : NSObject <NSCoding> {
	NSString* msgClientID;
	NSString* msgSavePath;
	unsigned msgStatus;
}
@property(readonly, assign, nonatomic) NSString* msgSavePath;
@property(assign, nonatomic) unsigned msgStatus;
@property(retain, nonatomic) NSString* msgClientID;
-(void)setPackageStatus:(unsigned)status WithPath:(id)path;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithMsgClientID:(id)msgClientID;
@end

@interface BakChatRecoverBreakPointStruct : NSObject <NSCoding> {
	NSMutableArray* msgPackage;
	NSMutableArray* mediaPackage;
	unsigned svrID;
	unsigned bakChatRecoverStatus;
	NSRecursiveLock* m_lock;
	unsigned totalLength;
	unsigned currentLength;
	NSDate* startDate;
	NSData* oKeyData;
	NSDate* uploadData_UploadDate;
	unsigned long uploadData_DownloadNetworkType;
	unsigned long uploadData_DownloadTime;
	unsigned long uploadData_UploadDeviceType;
	unsigned long uploadData_ErrorCount;
	unsigned long uploadData_PauseCount;
}
@property(assign, nonatomic) unsigned long uploadData_DownloadNetworkType;
@property(assign, nonatomic) unsigned long uploadData_PauseCount;
@property(assign, nonatomic) unsigned long uploadData_ErrorCount;
@property(assign, nonatomic) unsigned long uploadData_UploadDeviceType;
@property(assign, nonatomic) unsigned long uploadData_DownloadTime;
@property(retain, nonatomic) NSDate* uploadData_UploadDate;
@property(retain, nonatomic) NSData* oKeyData;
@property(retain, nonatomic) NSDate* startDate;
@property(readonly, assign, nonatomic) unsigned currentLength;
@property(readonly, assign, nonatomic) unsigned totalLength;
@property(readonly, assign, nonatomic) unsigned svrID;
@property(readonly, assign, nonatomic) unsigned bakChatRecoverStatus;
@property(readonly, assign, nonatomic) NSMutableArray* mediaPackage;
@property(readonly, assign, nonatomic) NSMutableArray* msgPackage;
+(BOOL)removeRecoverBreakPointStruct;
+(id)recoverBreakPointStructWithLock:(id)lock;
+(BOOL)saveRecoverBreakPointStruct:(id)aStruct;
-(unsigned)getPackagesInStatusCount:(unsigned)statusCount;
-(id)getNextPackageIDInStatus:(unsigned)status WithType:(unsigned*)type;
-(void)changeAllPackageStatusFrom:(unsigned)from To:(unsigned)to;
-(void)setStatus:(unsigned)status WithPath:(id)path OfPackage:(id)package;
-(void)addMediaPackage:(id)package;
-(void)addMsgPackage:(id)package;
-(void)addLength:(unsigned)length;
-(void)setTotalLength:(unsigned)length;
-(void)setBakChatRecoverStatus:(unsigned)status;
-(void)setSvrID:(unsigned)anId;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(void)clear;
-(void)initLock:(id)lock;
-(id)initWithLock:(id)lock;
@end

@interface BakChatRecoverProgressInfo : NSObject {
	unsigned recoveredCount;
	unsigned totalCount;
}
@property(assign, nonatomic) unsigned totalCount;
@property(assign, nonatomic) unsigned recoveredCount;
@end

@interface BakChatRecoverPacketInfo : NSObject {
	NSMutableArray* m_arrMessagePackagePaths;
	NSMutableDictionary* m_dicMediaPath;
}
@property(retain, nonatomic) NSMutableDictionary* m_dicMediaPath;
@property(retain, nonatomic) NSMutableArray* m_arrMessagePackagePaths;
-(void)clearAllMediaData;
-(void)clearAllMsgData;
-(id)DecryptionData:(id)data WithPassword:(id)password;
-(id)gerRecoverChatMsgListAtIndex:(unsigned)index;
-(id)getUploadMsgRequestAtIndex:(unsigned)index;
-(void)dealloc;
-(id)init;
@end

@interface BakChatRecoverFileHelper : NSObject {
	BOOL m_bRecovering;
	NSOperationQueue* m_operationQueue;
	id<BakChatRecoverFileHelperDelegate> m_delegate;
	BakChatRecoverPacketInfo* m_oldBakPacketInfo;
	NSMutableDictionary* m_dicMediaIDPath;
	NSMutableSet* m_setChatName;
	BakChatRecoverProgressInfo* m_bakChatRecoverProgressInfo;
}
@property(assign, nonatomic) id<BakChatRecoverFileHelperDelegate> m_delegate;
-(BOOL)StartRecoverMessageInternal:(id)internal;
-(void)ALLRollback;
-(void)DBRollback;
-(void)FileRollback;
-(void)cleanupTmpFile;
-(BOOL)AddContactListChat;
-(BOOL)RenameMediaFiles;
-(BOOL)addMsgAndFormMediaDictionary:(id)dictionary;
-(id)messageWrapFromBakChatMsgItem:(id)bakChatMsgItem;
-(void)convertStatusVideo:(id)video andBakchatMsgItem:(id)item;
-(BOOL)handleBufferForBakChatMsgItem:(id)bakChatMsgItem messageWrap:(id)wrap bakPacketInfo:(id)info;
-(id)onClearVoiceHeadData:(id)data;
-(id)pathForMessageWrap:(id)messageWrap forBakChatMediaType:(unsigned long)bakChatMediaType;
-(id)getMediaHeadByMessageWrap:(id)wrap;
-(id)getMediaIDByMessageWrap:(id)wrap;
-(id)getPackagePathNameForMediaID:(id)mediaID;
-(void)initPackagePath;
-(void)clearAllOldPackage;
-(void)clearAllMsgAndMediaPackage;
-(void)StopRecoverMessage;
-(void)StartRecoverMessageThread:(id)thread;
-(void)ReImportData;
-(void)checkOperationExcuting:(id)excuting;
-(void)StartRecoverMessage:(id)message;
-(BOOL)isBakChatName:(id)name;
-(void)dealloc;
-(id)init;
@end

@interface BakChatRecoverCountStruct : NSObject {
	unsigned count;
	unsigned totalCount;
}
@property(assign, nonatomic) unsigned totalCount;
@property(assign, nonatomic) unsigned count;
@end

@interface BakChatRecoverMgr : MMService <MMService, BakChatRecoverNetworkHelperDelegate, BakChatRecoverFileHelperDelegate> {
	BakChatRecoverNetworkHelper* m_bakChatRecoverNetworkHelper;
	BakChatRecoverBreakPointStruct* m_bakChatRecoverBreakPointStruct;
	BakChatRecoverFileHelper* m_bakChatRecoverFileHelper;
	NSRecursiveLock* m_HeadLock;
	NSOperationQueue* m_operationQueue;
	unsigned m_totalLength;
	unsigned m_currentLength;
	unsigned m_svrID;
	BOOL hasMsgPackageList;
	BOOL hasMediaPackageList;
	BOOL isCancel;
	BOOL m_bError;
}
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)onMessageRecoverError:(int)error;
-(void)onMessageRecoverDone:(id)done;
-(void)onMessageRecoverProgress:(id)progress;
-(void)OnDecryptDataError;
-(void)OnGetChatDataError;
-(void)OnGetChatData:(id)data WithLength:(unsigned)length InPath:(id)path;
-(void)OnGetChatHeadError;
-(void)OnGetChatHead:(id)head Type:(unsigned)type;
-(void)OnGetChatList:(id)list;
-(void)cancelDownloadAndRecoverBakChat;
-(void)stopDownloadAndRecoverBakChat;
-(void)stopWithOutPauseCountAddtionInDownloadAndRecoverBakChat;
-(void)continueDownloadBakChat;
-(void)recoverBreakPointStatus;
-(void)recoverCurrentStatus;
-(BOOL)usableBreakPoint;
-(void)startRecoverBakChat;
-(void)startDownloadBakChat:(id)chat TotalLength:(unsigned)length WithPassword:(id)password;
-(BOOL)isWorking;
-(void)getBakChatList;
-(void)innerCancelDownloadAndRecoverBakChat;
-(void)innerStartRecover;
-(void)innerStopDownloadAndRecoverBakChat;
-(void)innerCountinueDowloadBakChat;
-(void)innerRecoverBreakPointStatus;
-(void)innerRecoverCurrentStatus;
-(BOOL)innerUsableBreakPoint;
-(void)innerStartDownloadBakChat:(id)chat;
-(void)startDownload;
-(BOOL)downloadNextPackage;
-(void)OnRestartOnMainThread;
-(void)OnPauseOnMainThread;
-(void)OnRecoverProgressOnMainThread:(id)thread;
-(void)OnSuccessOnMainThread;
-(void)OnErrorOnMainThread:(id)thread;
-(void)OnDownloadedOnMainThread;
-(void)OnDownloadProgressOnMainThread:(id)thread;
-(void)OnGetChatListOnMainThread:(id)thread;
-(void)updateSavePackage:(id)package WithLength:(unsigned)length InPath:(id)path;
-(void)setBakChatRecoverStatusAndSave:(unsigned)save;
-(id)recoverBreakPointStructWithLock:(id)lock;
-(void)saveRecoverBreakPointStruct;
-(unsigned)getPackagesInStatusCount:(unsigned)statusCount;
-(id)getNextClientIDWithReturnType:(unsigned*)returnType;
-(void)changeStatus:(unsigned)status WithPath:(id)path OfPackage:(id)package;
-(void)addPackages:(id)packages WithType:(unsigned)type;
-(void)setBakChatRecoverStatus:(unsigned)status;
-(void)setSvrID:(unsigned)anId;
-(void)addCurrentLength:(unsigned)length;
-(void)setTotalLength:(unsigned)length;
-(void)dealloc;
-(id)init;
@end

@interface BakChatRecoverNetworkInnerRequestObject : NSObject {
	NSString* m_msgClientID;
	unsigned m_svrID;
	unsigned m_type;
}
@property(assign, nonatomic) unsigned m_type;
@property(assign, nonatomic) unsigned m_svrID;
@property(retain, nonatomic) NSString* m_msgClientID;
-(void)dealloc;
-(id)initWithMsgClientID:(id)msgClientID WithSvrID:(unsigned)svrID WithType:(unsigned)type;
@end

@interface BakChatRecoverNetworkHelper : NSObject <PBMessageObserverDelegate> {
	NSOperationQueue* netWorkHelperOperationQueue;
	NSOperationQueue* callBackHandleOperationQueue;
	id<BakChatRecoverNetworkHelperDelegate> m_delegate;
	NSMutableArray* msgHeadArray;
	NSMutableArray* mediaHeadArray;
	NSMutableArray* eventIDArray;
	NSString* baseFilePath;
	NSLock* m_oKeyDataLock;
	NSData* m_oKeyData;
}
@property(assign, nonatomic) id<BakChatRecoverNetworkHelperDelegate> m_delegate;
-(void)waitOperationQueueFinished;
-(void)stopNetworkHelper;
-(BOOL)isOpertationQueueFull;
-(void)getDataInCurrentThread:(id)currentThread Type:(unsigned)type SvrID:(unsigned)anId WithKeyData:(id)keyData;
-(void)getHead:(unsigned)head;
-(void)getList;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onDataMessageReturn:(id)aReturn;
-(void)onHeadMessageReturn:(id)aReturn;
-(void)onChatListMessageReturn:(id)aReturn;
-(void)getBakChatRecoverDataWithInnerRequestObject:(id)innerRequestObject;
-(void)getBakChatRecoverData:(id)data Type:(unsigned)type SvrID:(unsigned)anId Offset:(unsigned)offset;
-(void)getBakChatRecoverMediaHead:(id)head;
-(void)getBakChatRecoverMsgHead:(id)head;
-(void)getBakChatRecoverHead:(unsigned)head Type:(unsigned)type StartIndex:(unsigned)index;
-(void)getBakChatList;
-(id)onClearVoiceHeadData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface BakChatUploadMediaPackageStruct : NSObject <NSCoding> {
	NSString* mediaPath;
	NSString* mediaID;
}
@property(retain, nonatomic) NSString* mediaID;
@property(retain, nonatomic) NSString* mediaPath;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)clear;
-(void)dealloc;
-(id)init;
@end

@interface BakChatUploadPackageHelperStruct : NSObject <NSCoding> {
	NSMutableArray* m_usrNameArray;
	unsigned m_chatSvrID;
	unsigned m_mediaIndex;
	BakChatMsgItem* m_msgItem;
	BakChatMsgList* m_msgList;
	unsigned m_bakChatSvrID;
	unsigned filterCount;
	BOOL m_bGetAnyOneMessage;
	NSData* encryptKeyData;
	unsigned long uploadData_NetworkType;
	unsigned long uploadData_ErrorCount;
	unsigned long uploadData_PauseCount;
	BOOL uploadData_AllSelected;
}
@property(assign, nonatomic) BOOL uploadData_AllSelected;
@property(assign, nonatomic) unsigned long uploadData_PauseCount;
@property(assign, nonatomic) unsigned long uploadData_ErrorCount;
@property(assign, nonatomic) unsigned long uploadData_NetworkType;
@property(assign, nonatomic) BOOL m_bGetAnyOneMessage;
@property(retain, nonatomic) NSData* encryptKeyData;
@property(assign, nonatomic) unsigned filterCount;
@property(assign, nonatomic) unsigned m_bakChatSvrID;
@property(retain, nonatomic) BakChatMsgList* m_msgList;
@property(retain, nonatomic) BakChatMsgItem* m_msgItem;
@property(assign, nonatomic) unsigned m_mediaIndex;
@property(assign, nonatomic) unsigned m_chatSvrID;
@property(retain, nonatomic) NSMutableArray* m_usrNameArray;
+(id)getSameBakChatUploadPackageHelperStruct:(id)aStruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)setEncryptKey:(id)key;
-(void)clear;
-(void)dealloc;
-(id)init;
@end

@interface BakChatUploadBreakPointStruct : NSObject <NSCoding> {
	BakChatUploadPackageHelperStruct* m_bakChatUploadpackageHelperStruct;
	unsigned totalCount;
	unsigned count;
	NSDate* startDate;
	NSMutableArray* m_packageArray;
	NSMutableArray* m_uploadingPackageArray;
	int m_bakChatUploadStatus;
}
@property(assign, nonatomic) int m_bakChatUploadStatus;
@property(retain, nonatomic) NSMutableArray* m_uploadingPackageArray;
@property(retain, nonatomic) NSMutableArray* m_packageArray;
@property(retain, nonatomic) NSDate* startDate;
@property(assign, nonatomic) unsigned count;
@property(assign, nonatomic) unsigned totalCount;
@property(retain, nonatomic) BakChatUploadPackageHelperStruct* m_bakChatUploadpackageHelperStruct;
+(BOOL)removeUploadBreakPointStruct;
+(id)recoverBreakPointStruct;
+(BOOL)saveUploadBreakPointStruct:(id)aStruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)clear;
-(void)dealloc;
-(id)init;
@end

@interface BakChatEmoticonConverter : NSObject {
	NSMutableDictionary* _dicMD5Converter;
}
-(void)dealloc;
-(void)ConvertEmoticonMessageWrap:(id)wrap;
-(void)initDic;
@end

@interface BakChatUploadFileHelper : NSObject {
	BakChatDB* m_bakChatDB;
	NSRecursiveLock* m_oLock;
	NSMutableArray* cancelUploadPackageArray;
	unsigned MsgIDCount;
}
-(id)getNextPackage:(id)package;
-(unsigned)getSessionCount:(id)count;
-(unsigned)getTotalCount:(id)count;
-(void)removeBakChatDB;
-(BOOL)copyMainDBToBakChatDB;
-(id)innerGetAllLeftMsgPackage:(id)package;
-(id)innerGetNextMsgPackage:(id)package;
-(BOOL)innerGetNextMsg:(id)msg ByReturnAppMsg:(unsigned*)msg2;
-(BOOL)isBakChatMessage:(id)message;
-(BOOL)isBakChatName:(id)name;
-(id)innerGetNextMediaPackage:(id)package Error:(int*)error;
-(id)innerGetNextMediaPackageForAppMsg:(id)appMsg Error:(int*)error;
-(id)innerGetNextMediaPackageForEmotion:(id)emotion Error:(int*)error;
-(id)innerGetNextMediaPackageForVideo:(id)video Error:(int*)error;
-(id)innerGetNextMediaPackageForVoice:(id)voice Error:(int*)error;
-(id)innerGetNextMediaPackageForImg:(id)img Error:(int*)error;
-(id)EncryptionData:(id)data WithPassword:(id)password;
-(id)MessageWrapFromBakChatItem:(id)bakChatItem;
-(id)BakChatItemFromMessageWrap:(id)messageWrap;
-(void)addMediaOutterIntoBakChatMsgItem:(id)item MediaID:(id)anId Type:(int)type;
-(void)addInnerMediaToBakChatMsgItem:(id)bakChatMsgItem WithData:(id)data AndType:(int)type;
-(id)getNextMsgID;
-(id)getMediaIDFromBakChatMsgItem:(id)bakChatMsgItem;
-(id)getVoiceMediaIDFromBakChatMsgItem:(id)bakChatMsgItem;
-(void)dealloc;
-(id)init;
@end

@interface BakChatUploadMessage : NSObject {
	int m_bakChatUploadStatus;
	int m_bakChatUploadError;
	float m_progress;
	unsigned m_totalCount;
	unsigned m_currentCount;
}
@property(assign, nonatomic) unsigned m_currentCount;
@property(assign, nonatomic) unsigned m_totalCount;
@property(assign, nonatomic) float m_progress;
@property(assign, nonatomic) int m_bakChatUploadError;
@property(assign, nonatomic) int m_bakChatUploadStatus;
@end

@interface BakChatUploadMgr : MMService <MMService, BakChatUploadNetworkDelegate> {
	BakChatUploadFileHelper* m_bakChatUploadFileHelper;
	BakChatUploadNetworkHelper* m_bakChatUploadNetworkHelper;
	BakChatUploadBreakPointStruct* m_bakChatUploadBreakPointStruct;
	NSCondition* m_condition;
	NSOperationQueue* m_operationQueue;
	BOOL m_operationCancel;
	BOOL m_bError;
	BOOL m_producerEnd;
}
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)OnFailureEncryptData:(id)data;
-(void)OnFailureGetBakChatUploadEnd;
-(void)OnGetBakChatUploadEnd:(unsigned)end;
-(void)OnTryUploadAfterFailureUploadBakChatUploadPackage;
-(void)OnFailureUploadBakChatPackage:(id)package;
-(void)OnSuccessUploadBakChatPackage:(id)package;
-(void)OnFailureGetBakChatUploadHead;
-(void)OnGetBakChatUploadHead:(unsigned)head;
-(void)handleFailureGetBakChatUploadEnd;
-(void)handleGetBakChatUploadEnd:(id)end;
-(void)handleTryUploadAfterFailureBakChatUploadPackage;
-(void)handleFailureUploadBakChatPackage:(id)package;
-(void)handleSuccessUploadBakChatPackage:(id)package;
-(void)handleFailureGetBakChatUploadHead;
-(void)handleGetBakChatUploadHead:(id)head;
-(void)CloseAllObvesever;
-(void)CancelBakChatUpload;
-(void)StopBakChatUpload;
-(void)StartBakChatUpload:(id)upload WithPassword:(id)password WithAllSessionSelected:(BOOL)allSessionSelected;
-(void)StartBakChatUpload:(id)upload WithAllSessionSelected:(BOOL)allSessionSelected;
-(void)ContinueBakChatUpload;
-(void)RestartOrRecoverBakChatUpload;
-(BOOL)TryRestartOrRecoverBakChatUpload;
-(void)GetEachSessionSize:(id)size;
-(void)cancelBakChatUpload;
-(void)stopBakChatUpload;
-(void)startBakChatUpload:(id)upload;
-(void)continuBakChatUpload;
-(void)recoverBreakPoint;
-(void)recoverCurrentStatus;
-(BOOL)tryRestartOrRecoverBakChatUpload;
-(void)SendMessageToMainThread:(int)mainThread WithErrorMessage:(int)errorMessage AndProgress:(float)progress AndTotalCount:(unsigned)count AndCurrentCount:(unsigned)count5;
-(void)OnBakChatUploadMessageOnMainThread:(id)thread;
-(id)SafeGetBakChatUploadBreakPointStruct;
-(void)SafeSaveBakChatUploadBreakPointStruct:(id)aStruct;
-(void)dealloc;
-(id)init;
-(void)StartUploadBakChat;
-(void)RemoveUploadedPackage:(id)package;
-(void)UploadPackage;
-(void)ProducePackage;
-(void)innerStartBakChatUpload:(id)upload;
-(void)innerContinueBakChatUpload;
-(void)innerRecoverBreakPoint;
-(void)innerRecoverCurrentStatus;
-(BOOL)isBreakPointUsable;
-(BOOL)isWorking;
-(void)innerStopBakChatUpload;
-(void)getEachSessionSize:(id)size;
-(void)SafeCallOnGetSessionSizeOnMainThread:(id)thread;
@end

@interface BakChatUploadNetworkHelper : NSObject <PBMessageObserverDelegate> {
	id<BakChatUploadNetworkDelegate> m_delegate;
	NSOperationQueue* m_operationQueue;
	NSMutableDictionary* m_operationMediaPackageHelperDic;
	NSData* m_oKeyData;
	NSLock* m_oKeyDataLock;
	NSMutableDictionary* m_dicConnectionErrorCount;
	unsigned long m_uAllErrorCount;
}
@property(assign, nonatomic) id<BakChatUploadNetworkDelegate> m_delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onEndMessageReturn:(id)aReturn;
-(void)onMediaPackageMessageReturn:(id)aReturn;
-(void)onMsgPackageMessageReturn:(id)aReturn;
-(void)onHeadMessageReturn:(id)aReturn;
-(void)retryUploadMediaPackage:(id)package;
-(void)retryUploadMsgPackage:(id)package;
-(void)stopUploadBakChat;
-(void)getBakChatUploadEnd:(unsigned)end;
-(void)uploadBakChatMediaPackage:(id)package withSvrID:(unsigned)svrID WithKeyData:(id)keyData;
-(void)uploadBakChatMsgPackage:(id)package WithKeyData:(id)keyData;
-(void)getBakChatUploadHead:(int)head;
-(void)getBakChatUploadNoEncrypt;
-(void)uploadBakChatMediaFirstCommonPackage:(id)package withSvrID:(unsigned)svrID;
-(void)uploadBakChatMediaCancelPackage:(id)package withSvrID:(unsigned)svrID;
-(void)retryUploadAfterFailure;
-(void)dealloc;
-(id)init;
@end

@interface BrandSessionCache : NSObject {
	BOOL hasNewArrival;
	NSString* latestMsgOwner;
	CMessageWrap* latestMsg;
}
@property(retain, nonatomic) CMessageWrap* latestMsg;
@property(copy, nonatomic) NSString* latestMsgOwner;
@property(assign, nonatomic) BOOL hasNewArrival;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface BrandSessionInfo : NSObject {
	NSString* username;
	int unreadCount;
	NSString* lastMessage;
	unsigned lastMessageTime;
	CContact* contact;
	CMessageWrap* message;
}
@property(retain, nonatomic) CMessageWrap* message;
@property(retain, nonatomic) CContact* contact;
@property(assign, nonatomic) unsigned lastMessageTime;
@property(copy, nonatomic) NSString* lastMessage;
@property(assign, nonatomic) int unreadCount;
@property(copy, nonatomic) NSString* username;
-(void)dealloc;
@end

@interface BrandSessionMgr : MMService <MMService, IMsgExt, IContactMgrExt, IMMNewSessionMgrExt> {
	NSMutableArray* m_allSessions;
	BrandSessionCache* m_sessionCache;
	BOOL m_isUpgradeFromOldVersion;
	NSMutableArray* m_delayCleanUpList;
}
@property(retain, nonatomic) BrandSessionCache* m_sessionCache;
@property(retain, nonatomic) NSMutableArray* m_allSessions;
-(void)dealloc;
-(id)init;
-(void)onSessionUpgrade;
-(void)addBrandSessionHolderToSessionList;
-(void)isUser:(id)user hasSpecalSessionInfo:(id*)info;
-(void)onDeleteSessionOfUser:(id)user;
-(void)isMessage:(id)message Handled:(BOOL*)handled;
-(void)isUser:(id)user Handled:(BOOL*)handled;
-(id)genMainFrameSessionInfo;
-(void)clearSessionCacheNewArrival;
-(void)updateSessionCacheOnReadCountChangeWithMsgWrap:(id)msgWrap;
-(void)updateSessionCacheWithMsgWrap:(id)msgWrap;
-(id)lastMessageFromSessionCache;
-(unsigned long)hasNewArrivalFromSessionCache;
-(void)RecordLastBrandMsgSvrIDWhenExitSessionWithBrand:(id)brand;
-(void)RecordLastBrandMsgSvrIDWhenEnterBrandSessionHolder;
-(void)tryLoadSessionCache;
-(void)saveSessionCache;
-(id)pathForSessionCache;
-(BOOL)isSessionCacheValid;
-(void)UpdateSendStatusOfUser:(id)user MsgWrap:(id)wrap;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnDelMsg:(id)msg;
-(void)OnAddMsgListForSession:(id)session NotifyUsrName:(id)name;
-(void)onContactListUpdate:(unsigned long)update;
-(void)onModifyContact:(id)contact;
-(void)onDeleteContact:(id)contact;
-(void)OnUnReadCountChange:(id)change;
-(void)OnClearReadCountForBrand:(id)brand;
-(BOOL)isContactNeedProcess:(id)process;
-(void)addToCleanupList:(id)cleanupList;
-(unsigned long)updateOrAddSessionForUser:(id)user AllowAdd:(BOOL)add;
-(unsigned long)updateSessionForUser:(id)user AllowAdd:(BOOL)add;
-(id)findSessionByUser:(id)user;
-(id)allSessions;
-(void)cleanUpNoMsgSessions:(id)sessions;
-(id)loadAllSessions;
-(void)DeleteSessionOfUserWithoutDeleteContactOrMessage:(id)userWithoutDeleteContactOrMessage;
-(void)UpdateSessionOfUser:(id)user;
-(void)DeleteSessionOfUser:(id)user;
-(void)notifyDeletedAllSession;
-(void)tryInvalidateSessionCacheForUser:(id)user;
-(void)ClearNewArrivalCount;
-(id)GetAllBrandSession;
-(BOOL)HasNewArrival;
-(unsigned long)GetNewArrivalCount;
-(void)DeleteAllBrandSession;
-(void)clearSessions;
-(id)GetBrandLastMessage;
@end

@interface BrandStoryMgr : MMService <MMService> {
}
-(void)modifyBrandFlagForListContact:(id)listContact;
-(BOOL)modifyBrandFlag:(unsigned long)flag forUser:(id)user;
-(void)dealloc;
-(id)init;
-(void)onServiceInit;
@end

@interface CertInfo : NSObject <NSCoding> {
	unsigned long m_uiVersion;
	unsigned long m_uiKey;
	unsigned long m_uiLastUpdateTime;
	NSString* m_nsDesc;
	UIImage* m_imgIcon;
}
@property(retain, nonatomic) UIImage* m_imgIcon;
@property(retain, nonatomic) NSString* m_nsDesc;
@property(assign, nonatomic) unsigned long m_uiLastUpdateTime;
@property(assign, nonatomic) unsigned long m_uiKey;
@property(assign, nonatomic) unsigned long m_uiVersion;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(void)preInit;
@end

@interface CertInfoMgr : MMService <MMService, PBMessageObserverDelegate> {
	NSMutableDictionary* m_dicCertInfo;
	BOOL m_bUpdating;
	unsigned long m_uiUpdateCount;
	NSDate* m_tLastUpdate;
}
@property(retain, nonatomic) NSDate* m_tLastUpdate;
@property(retain, nonatomic) NSMutableDictionary* m_dicCertInfo;
+(id)GetPathOfIcon:(unsigned long)icon;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)UpdateCertInfo:(unsigned long)info Version:(unsigned long)version Time:(unsigned long)time Desc:(id)desc Icon:(id)icon HDIcon:(id)icon6;
-(void)SaveIcon:(id)icon Data:(id)data;
-(id)GetCertInfoByKey:(unsigned long)key Update:(BOOL)update;
-(unsigned long)GetBitSet:(unsigned long)set;
-(id)GetCertIconByKey:(unsigned long)key;
-(void)CreateUpdateEvent;
-(unsigned long)GetCertInfoVersion;
-(void)UpdateInfoTime;
-(void)CheckUpdate;
-(void)SaveCertInfo;
-(void)LoadCertInfo;
-(void)dealloc;
-(void)onServiceInit;
-(id)init;
@end

@interface ChatRoomInfoSetting : NSObject <NSCoding> {
	unsigned long m_uiSettingFlag;
}
@property(assign, nonatomic) unsigned long m_uiSettingFlag;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ChatRoomInfoSettingMgr : NSObject {
	NSMutableDictionary* m_dicInfoSetting;
}
-(void)setHasShowPushMsgTip:(id)tip;
-(BOOL)needToShowPushMsgTip:(id)showPushMsgTip;
-(void)load;
-(void)save;
-(void)dealloc;
-(id)init;
@end

@interface MMConfigMgr : MMService <MMPackageDownloadMgrExt, MMService, MMKernelExt, IMMLanguageMgrExt, IMsgExt> {
	NSMutableDictionary* m_dicConfigSeperator;
	NSMutableDictionary* m_dicConfig;
	NSMutableDictionary* m_dicDynamicConfig;
	int m_iVersion;
}
-(unsigned long)uintFromDynamicConfigForKey:(id)key;
-(id)valueFromDynamicConfigForKey:(id)key;
-(unsigned long)uintForKey:(id)key config:(id)config;
-(id)valueForKey:(id)key config:(id)config;
-(id)arrSubValueForKey:(id)key config:(id)config seperator:(id)seperator;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)onLanguageChange;
-(void)onAuthOK;
-(void)dealloc;
-(id)init;
-(void)onServiceInit;
-(id)getDynamicConfigFilePath;
-(void)initStaticConfig:(id)config;
-(void)initDynamicConfig:(id)config;
-(void)initConfig:(id)config for:(id)aFor;
-(BOOL)isItemSupportCountry:(id)country item:(XmlReaderNode_t*)item;
-(BOOL)isItemSupportLanguage:(id)language item:(XmlReaderNode_t*)item;
-(id)addConfigName:(id)name for:(id)aFor;
-(void)downLoadConfig;
-(void)onPackageListUpdated:(id)updated;
-(CGSize)GetCurrentNetworkCompressResolution;
@end

@interface CVerifyContactEvent : NetCmdEvent {
	unsigned long m_uiOpCode;
	NSArray* m_arrVerifyContactWrap;
	NSString* m_nsVerifyValue;
}
@property(retain, nonatomic) NSString* m_nsVerifyValue;
@property(retain, nonatomic) NSArray* m_arrVerifyContactWrap;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CVerifyContactPrtl : PrtlBase {
	unsigned long m_uiOpCode;
	NSArray* m_arrVerifyContactWrap;
	NSString* m_nsVerifyValue;
}
@property(retain, nonatomic) NSString* m_nsVerifyValue;
@property(retain, nonatomic) NSArray* m_arrVerifyContactWrap;
@property(assign, nonatomic) unsigned long m_uiOpCode;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CVerifyContactWrap : NSObject {
	NSString* m_nsUsrName;
	NSString* m_nsOriginalUsrName;
	unsigned long m_uiScene;
	NSString* m_nsTicket;
	CContact* m_oVerifyContact;
}
@property(retain, nonatomic) CContact* m_oVerifyContact;
@property(retain, nonatomic) NSString* m_nsTicket;
@property(assign, nonatomic) unsigned long m_uiScene;
@property(retain, nonatomic) NSString* m_nsOriginalUsrName;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(id)getRealUserName;
-(void)dealloc;
-(id)init;
@end

@interface MMEasterEgg : NSObject {
	NSString* m_nsEmoji;
	NSDate* m_oBeginDate;
	NSDate* m_oEndDate;
	unsigned long m_uiReport;
}
@property(assign, nonatomic) unsigned long m_uiReport;
@property(retain, nonatomic) NSDate* m_oEndDate;
@property(retain, nonatomic) NSDate* m_oBeginDate;
@property(retain, nonatomic) NSString* m_nsEmoji;
-(BOOL)isEffective;
-(void)dealloc;
@end

@interface MMEasterEggMgr : MMService <MMPackageDownloadMgrExt, MMService> {
	BOOL m_isShowEgg;
	unsigned long m_uiEasterEggLastUpdateTime;
	NSMutableDictionary* m_dicEgg;
}
-(id)eggWithMessage:(id)message isSender:(BOOL)sender;
-(BOOL)isShowEasterEgg;
-(void)dealloc;
-(void)onServiceInit;
-(id)init;
-(void)initEgg:(id)egg;
-(void)downLoadEgg;
-(BOOL)isNeedUpdateEgg;
-(void)onPackageListUpdated:(id)updated;
@end

@interface EmoticonWebDownloadMgr : MMService <MMService> {
	NSMutableDictionary* m_downloadQueue;
}
-(BOOL)cancelDownloadEmoticon:(id)emoticon ThumbUrl:(id)url;
-(BOOL)downloadEmoticon:(id)emoticon withUserData:(id)userData;
-(BOOL)isEmoticonExist:(id)exist;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(id)thumbForImageData:(id)imageData;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)infoForUrlConnnection:(id)urlConnnection;
-(id)downloadTempPathForUrl:(id)url;
-(id)cachePathForUrl:(id)url;
-(id)hashForUrl:(id)url;
-(id)cacheRootPath;
-(void)dealloc;
-(id)init;
-(void)onServiceInit;
@end

@interface ExpressionMgr : MMService <MMService> {
	NSMutableArray* m_ExpressionImages;
	NSArray* m_ExpressionWordsArray;
	NSArray* m_ExpressionSymbolArray;
	NSArray* m_EmoticonZnArray;
	NSArray* m_EmoticonTwArray;
	NSArray* m_EmoticonEnArray;
	NSArray* m_EmoticonThArray;
	NSString* m_nsTotalEmoticonRegex;
}
-(void)dealloc;
-(id)getExpressionDescriptionAtIndex:(unsigned long)index;
-(unsigned long)countOfEmoji:(id)emoji;
-(NSRange)rangeOfEmoticon:(id)emoticon inRange:(NSRange)range;
-(unsigned long)getExpressionCount;
-(id)getStringByExpressionOrder:(unsigned long)order;
-(id)getImageByExpressionOrder:(unsigned long)order;
-(id)getImageByExpression:(id)expression;
-(void)onLocalMemoryWarning;
-(id)init;
-(void)updateExpressionImages;
@end

@interface FacebookAuth : MMObject {
	BOOL m_bIsReAuth;
	FBSession* m_fbSession;
	int m_uiFacebookUsageType;
	MMFBTokenCachingStrategy* m_fbTokenStrategy;
}
@property(assign, nonatomic) int m_uiFacebookUsageType;
@property(assign, nonatomic) FBSession* m_fbSession;
-(void)sessionStateChanged:(id)changed state:(int)state error:(id)error;
-(void)reAuth;
-(void)requestNewPermission;
-(void)tryAuth;
-(BOOL)tryExtendToken;
-(void)clearToken;
-(id)getAccessToken;
-(void)SaveData;
-(void)fbSessionInvalidated;
-(void)fbDidExtendToken;
-(void)fbDidLogout;
-(void)fbDidNotLogin:(BOOL)fb;
-(void)fbDidLogin;
-(void)dealloc;
-(id)init;
@end

@interface FacebookFriend : NSObject {
	NSString* m_nickname;
	NSString* m_pinyin;
	BOOL m_hasInvited;
	BOOL m_isInMyContactList;
	MFriend* m_originInfo;
}
@property(retain, nonatomic) MFriend* m_originInfo;
@property(assign, nonatomic) BOOL m_hasInvited;
@property(assign, nonatomic) BOOL m_isInMyContactList;
@property(retain, nonatomic) NSString* m_pinyin;
@property(retain, nonatomic) NSString* m_nickname;
-(int)compare:(id)compare;
-(void)dealloc;
@end

@interface MMFacebookMgr : MMService <MMService, IFacebookAuthExt, IFriendListMgrExt, PBMessageObserverDelegate, MessageObserverDelegate, LoginLogicDelegate, PasswordLogicDelegate> {
	FacebookAuth* m_facebookAuth;
	FBRequest* m_getMyAlbumsRequest;
	FBRequest* m_getPhotosRequest;
	FBRequest* m_getPhotoByIDRequest;
	FBRequest* m_verifyTokenRequest;
	NSArray* m_albumsCache;
	NSMutableDictionary* m_photosCache;
	NSMutableDictionary* m_albumPhotoPaging;
	NSMutableDictionary* m_fbFriendImageKeys;
	NSMutableDictionary* m_fbFriends;
	MMDelegateProxy<IMMFacebookMgrExt>* FBdelegate;
	LoginLogic* m_oLoginLogic;
	PasswordLogic* m_passwdLogic;
	unsigned long m_uiQuitEventID;
}
@property(retain, nonatomic) MMDelegateProxy<IMMFacebookMgrExt>* FBdelegate;
@property(retain, nonatomic) FacebookAuth* m_facebookAuth;
-(void)unknownFail;
-(void)checkHaveNotSetPassword;
-(void)checkHaveSetPassword;
-(void)setHaveCheckedPassword;
-(void)checkIfShowPasswordNotify;
-(BOOL)shouldCheckPassword;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)AuthReturn:(unsigned long)aReturn MessageInfo:(id)info;
-(id)getPhotosCacheByAlbumID:(id)anId;
-(void)setPhotosCache:(id)cache byAlbumID:(id)anId;
-(id)getMyAlbumsCache;
-(void)setMyAlbumsCache:(id)cache;
-(void)simpleHandleError;
-(void)getPhotoByID:(id)anId;
-(void)getPhotosByAlbumID:(id)anId limit:(int)limit after:(id)after;
-(void)getMyAlbums;
-(void)verifyAccessTokenValid;
-(void)setFacebookFriendImageUpdated:(id)updated;
-(BOOL)isFacebookFriendImageNeedUpdate:(id)update;
-(void)onFriendListUpdated:(id)updated ErrorCode:(unsigned long)code Message:(id)message;
-(void)updateFacebookFriend;
-(id)getFacebookFriendsInWeChat;
-(id)getFacebookFriends;
-(void)clearFacebookToken;
-(void)onExtendTokenFinish:(BOOL)finish;
-(void)fbDidNotLogin:(BOOL)fb;
-(void)fbDidLogin;
-(void)updateTokenToSvr;
-(int)getFacebookUsageType;
-(void)setFacebookUsageType:(int)type;
-(void)tryUnBindFacebook;
-(void)saveAuthData;
-(BOOL)tryExtendToken;
-(void)tryConnectFacebook;
-(void)tryBindFacebook;
-(BOOL)handleOpenURL:(id)url;
-(bool)isFacebookConnectAccount;
-(bool)isFacebookBounded;
-(id)getFacebookName;
-(BOOL)isPluginInstalled;
-(void)dealloc;
-(id)init;
-(void)LoadData;
-(void)SaveData;
-(void)LoadFriendList;
-(id)getArchivePath;
@end

@interface FriendAsistSessionMgr : MMService <MMService, IMsgExt, IMMNewSessionMgrExt> {
}
-(void)onSessionUpgrade;
-(void)moveOldData;
-(void)OnMsgNotAddDBSession:(id)session MsgList:(id)list;
-(void)OnAddMsgForSpecialSession:(id)specialSession MsgList:(id)list;
-(void)OnUnReadCountChange:(id)change;
-(unsigned long)GetSayHelloStatus:(id)status LocalID:(unsigned long)anId;
-(BOOL)SetSayHelloStatus:(id)status LocalID:(unsigned long)anId Status:(unsigned long)status3;
-(void)AddHelloMsg:(id)msg helloWord:(id)word opCode:(unsigned long)code;
-(id)GetLastMessage:(id)message HelloUser:(id)user OnlyTo:(BOOL)to;
-(id)GetLastMessage:(id)message OnlyTo:(BOOL)to;
-(void)ClearMsg:(id)msg HelloUser:(id)user;
-(void)ClearUnRead:(id)read HelloUser:(id)user;
-(id)GetHelloMsg:(id)msg HelloUser:(id)user Limit:(unsigned long)limit OnlyTo:(BOOL)to;
-(id)GetHelloUsers:(id)users Limit:(unsigned long)limit OnlyUnread:(BOOL)unread;
-(int)getCountForChat:(id)chat;
-(int)getUnreadCountForChat:(id)chat;
-(void)dealloc;
-(id)init;
-(void)onServiceInit;
@end

@interface CBottle : NSObject {
	int m_uiStatus;
	unsigned long m_uiCreateTime;
	unsigned long m_uiSvrID;
	unsigned long m_uiLocalID;
	unsigned long m_uiSex;
	unsigned long m_uiDistance;
	unsigned long m_bottleType;
	unsigned long m_uiMsgType;
	unsigned long m_uiParentID;
	NSString* m_nsImgStatus;
	NSString* m_nsEnryptUsrName;
	NSString* m_nsBottleID;
	NSString* m_nsBottleName;
	NSString* m_nsNickName;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
	BOOL m_isBrandUser;
	NSString* m_brandUsername;
	NSString* m_brandNickname;
	NSString* m_brandIconUrl;
	NSString* m_nsHeadImgUrl;
	NSString* m_nsHeadHDImgUrl;
}
@property(retain, nonatomic) NSString* m_nsHeadHDImgUrl;
@property(retain, nonatomic) NSString* m_nsHeadImgUrl;
@property(retain, nonatomic) NSString* m_brandIconUrl;
@property(retain, nonatomic) NSString* m_brandNickname;
@property(retain, nonatomic) NSString* m_brandUsername;
@property(assign, nonatomic) BOOL m_isBrandUser;
@property(retain, nonatomic) NSString* m_nsImgStatus;
@property(assign, nonatomic) int m_uiStatus;
@property(retain, nonatomic) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsBottleName;
@property(retain, nonatomic) NSString* m_nsBottleID;
@property(retain, nonatomic) NSString* m_nsEnryptUsrName;
@property(assign, nonatomic) unsigned long m_uiDistance;
@property(assign, nonatomic) unsigned long m_uiParentID;
@property(assign, nonatomic) unsigned long m_uiMsgType;
@property(assign, nonatomic) unsigned long m_bottleType;
@property(assign, nonatomic) unsigned long m_uiLocalID;
@property(assign, nonatomic) unsigned long m_uiSvrID;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(assign, nonatomic) unsigned long m_uiSex;
+(unsigned long)genBottleIDByLocalUsrName:(id)name;
+(id)genLocalUsrNameByBottleID:(unsigned long)anId;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CThrowBottleWrap : NSObject {
	unsigned long m_uiLocalID;
	unsigned long m_uiCreateTime;
	unsigned long m_uiMsgType;
	unsigned long m_uiBottleType;
	unsigned long m_uiStartPos;
	unsigned long m_uiTotalLen;
	NSData* m_dtData;
	unsigned long m_uiVoiceTime;
	unsigned long m_uiThrowCount;
	unsigned long m_uiFishCount;
	unsigned long m_uiBottleListCount;
	unsigned long m_uiDistance;
	NSMutableArray* m_arrBottleInfo;
	NSMutableArray* m_arrEncryptUsrName;
	NSMutableArray* m_arrBottleID;
}
@property(retain, nonatomic) NSMutableArray* m_arrBottleID;
@property(retain, nonatomic) NSMutableArray* m_arrEncryptUsrName;
@property(retain, nonatomic) NSMutableArray* m_arrBottleInfo;
@property(assign, nonatomic) unsigned long m_uiDistance;
@property(assign, nonatomic) unsigned long m_uiBottleListCount;
@property(assign, nonatomic) unsigned long m_uiFishCount;
@property(assign, nonatomic) unsigned long m_uiThrowCount;
@property(assign, nonatomic) unsigned long m_uiVoiceTime;
@property(retain, nonatomic) NSData* m_dtData;
@property(assign, nonatomic) unsigned long m_uiTotalLen;
@property(assign, nonatomic) unsigned long m_uiStartPos;
@property(assign, nonatomic) unsigned long m_uiBottleType;
@property(assign, nonatomic) unsigned long m_uiMsgType;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(assign, nonatomic) unsigned long m_uiLocalID;
-(id)description;
-(void)GenName;
-(void)dealloc;
-(id)init;
@end

@interface CFishBottleWrap : NSObject {
	unsigned long m_uiBottleType;
	unsigned long m_uiMsgType;
	NSString* m_nsBottleInfo;
	NSString* m_nsNickName;
	NSString* m_nsUsrInfo;
	unsigned long m_uiThrowCount;
	unsigned long m_uiFishCount;
	unsigned long m_uiDistance;
}
@property(assign, nonatomic) unsigned long m_uiDistance;
@property(assign, nonatomic) unsigned long m_uiFishCount;
@property(assign, nonatomic) unsigned long m_uiThrowCount;
@property(retain, nonatomic) NSString* m_nsUsrInfo;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsBottleInfo;
@property(assign, nonatomic) unsigned long m_uiMsgType;
@property(assign, nonatomic) unsigned long m_uiBottleType;
-(id)description;
-(id)ToBottle;
-(void)dealloc;
-(id)init;
@end

@interface COpenBottleWrap : NSObject {
	unsigned long m_uiLocalID;
	NSString* m_nsBottleInfo;
	unsigned long m_uiMsgType;
	unsigned long m_uiThumbStartPos;
	unsigned long m_uiThumbTotalLen;
	NSData* m_dtThumb;
	unsigned long m_uiContentStartPos;
	unsigned long m_uiContentTotalLen;
	NSData* m_dtContent;
	unsigned long m_uiVoiceTime;
}
@property(assign, nonatomic) unsigned long m_uiVoiceTime;
@property(retain, nonatomic) NSData* m_dtContent;
@property(assign, nonatomic) unsigned long m_uiContentTotalLen;
@property(assign, nonatomic) unsigned long m_uiContentStartPos;
@property(retain, nonatomic) NSData* m_dtThumb;
@property(assign, nonatomic) unsigned long m_uiThumbTotalLen;
@property(assign, nonatomic) unsigned long m_uiThumbStartPos;
@property(assign, nonatomic) unsigned long m_uiMsgType;
@property(retain, nonatomic) NSString* m_nsBottleInfo;
@property(assign, nonatomic) unsigned long m_uiLocalID;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CBottleContact : CBaseContact {
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
}
@property(retain, nonatomic, setter=setNsSignature:) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
-(BOOL)isNeedGetHDImg;
-(BOOL)copyFrom:(id)from;
-(id)toContact;
-(BOOL)isSelf;
-(void)dealloc;
-(id)init;
@end

@interface CBottleContactDB : NSObject {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSString* m_nsDocPath;
}
-(int)GetBottleContactCount;
-(BOOL)updateContact:(id)contact;
-(BOOL)deleteContact:(id)contact;
-(BOOL)addContact:(id)contact;
-(BOOL)getAllContactList:(id)list;
-(id)getContact:(id)contact;
-(void)initDB:(id)db lock:(id)lock;
-(id)convertBottleContactToDictionary:(id)dictionary;
-(void)getBottleContactValue:(id)value dicInfo:(id)info;
-(unsigned long)getBottleContactInteger:(id)integer key:(id)key;
-(void)initQueryArray:(id)array;
-(void)saveUserImage:(id)image;
-(void)dealloc;
-(id)init;
@end

@interface BottleContactExtendCode : NSObject {
}
-(void)decodeBottleField:(XmlReaderNode_t*)field BottleContact:(id)contact;
-(void)codeBottleField:(CFastStr*)field BottleContact:(id)contact;
-(BOOL)decodeExtentField:(id)field BottleContact:(id)contact;
-(id)codeExtentField:(id)field;
-(unsigned long)decodeToInteger:(XmlReaderNode_t*)integer key:(const char*)key;
-(id)decodeToString:(XmlReaderNode_t*)string key:(const char*)key;
-(BOOL)code:(CFastStr*)code key:(const char*)key integer:(unsigned long)integer;
-(BOOL)code:(CFastStr*)code key:(const char*)key string:(id)string;
@end

@interface CBottleContactMgr : MMService <MMService, MessageObserverDelegate> {
	CBottleContactDB* m_oDB;
	NSMutableDictionary* m_dicContacts;
	BOOL m_bDataNeedReload;
}
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(int)GetBottleContactCount;
-(void)saveImageStatus:(id)status ImgStatus:(id)status2;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(BOOL)syncAllBottleContact;
-(BOOL)RemoveContactList:(id)list;
-(BOOL)addContact:(id)contact;
-(id)getContactByName:(id)name;
-(id)getSelfContact;
-(id)getAllContact;
-(void)initDB:(id)db lock:(id)lock;
-(BOOL)autoReload;
-(BOOL)setHDHeadUpdated:(id)updated;
-(void)dealloc;
-(id)init;
-(BOOL)onSyncBottleContact:(id)contact;
-(void)internalDeleteContact:(id)contact;
-(void)internalModifyContact:(id)contact;
-(void)internalAddContact:(id)contact;
-(void)removeListen;
-(void)initListen;
@end

@interface CBottleExtendCode : NSObject {
}
-(void)decodeBottleField:(XmlReaderNode_t*)field bottle:(id)bottle;
-(void)codeBottleField:(CFastStr*)field bottle:(id)bottle;
-(BOOL)decodeExtentField:(id)field bottle:(id)bottle;
-(unsigned long)decodeToInteger:(XmlReaderNode_t*)integer key:(const char*)key;
-(id)decodeToString:(XmlReaderNode_t*)string key:(const char*)key;
-(id)codeExtentField:(id)field;
-(BOOL)code:(CFastStr*)code key:(const char*)key integer:(unsigned long)integer;
-(BOOL)code:(CFastStr*)code key:(const char*)key string:(id)string;
-(void)dealloc;
-(id)init;
@end

@interface CThrowBottleInfo : NSObject {
	CThrowBottleWrap* m_oThrowBottleWrap;
	CMessageWrap* m_oMsgWrap;
	NSData* m_dtBuffer;
}
@property(retain, nonatomic) NSData* m_dtBuffer;
@property(retain, nonatomic) CMessageWrap* m_oMsgWrap;
@property(retain, nonatomic) CThrowBottleWrap* m_oThrowBottleWrap;
-(void)dealloc;
-(id)init;
@end

@interface COpenBottleInfo : NSObject {
	COpenBottleWrap* m_oOpenBottleWrap;
	CMessageWrap* m_oMsgWrap;
	NSMutableData* m_dtThumbBuffer;
	NSMutableData* m_dtContentBuffer;
}
@property(retain, nonatomic) NSMutableData* m_dtContentBuffer;
@property(retain, nonatomic) NSMutableData* m_dtThumbBuffer;
@property(retain, nonatomic) CMessageWrap* m_oMsgWrap;
@property(retain, nonatomic) COpenBottleWrap* m_oOpenBottleWrap;
-(void)dealloc;
-(id)init;
@end

@interface BottleMgr : MMService <MMService, NotifyFromMainCtrlDelegate, MessageObserverDelegate> {
	CBottleExtendCode* m_oCode;
	CMMDB* m_oMMDB;
	CBottleOpLog* m_oBottleOpLog;
	NSRecursiveLock* m_oLock;
	unsigned long m_uiThrowCount;
	unsigned long m_uiFishCount;
	NSMutableData* m_dtThumbBuffer;
	NSMutableData* m_dtContentBuffer;
	NSMutableDictionary* m_dicThrow;
	NSMutableDictionary* m_dicOpen;
	NSMutableArray* m_arrWording;
	CBottleSetting* m_oSetting;
	BOOL m_bBan;
}
@property(retain, nonatomic) NSMutableArray* m_arrWording;
@property(retain, nonatomic) CBottleSetting* m_oSetting;
-(void)onServiceReloadData;
-(void)dealloc;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)NotifyFromMainCtrl:(unsigned long)mainCtrl MessageInfo:(id)info Event:(unsigned long)event;
-(void)SafeCallThrowAndFishNumChanged;
-(void)handleOpenBottleOK:(id)ok;
-(void)handleFishBottleOK:(id)ok;
-(void)handleThrowBottleOK:(id)ok;
-(unsigned long)GetFishCount;
-(unsigned long)GetThrowCount;
-(void)GetThrowAndFishCount;
-(void)FishBottle;
-(void)FishThenOpenBottle:(unsigned long)bottle;
-(void)createOpenBottleEvent:(unsigned long)event;
-(void)OpenBottle:(unsigned long)bottle;
-(void)setVoiceMsgReadByLocalID:(unsigned long)anId andMsgWrap:(id)wrap;
-(id)getThrowBottleWording;
-(void)throwBack:(id)back;
-(unsigned long)throwBottle:(id)bottle MsgWrap:(id)wrap;
-(void)createThrowBottleEvent:(unsigned long)event;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(void)DeleteBottleByLocalID:(unsigned long)anId backed:(BOOL)backed;
-(void)DeleteBottle:(id)bottle;
-(void)updateBottle:(id)bottle;
-(unsigned long)AddBottleToDB:(id)db;
-(void)checkBottle:(id)bottle;
-(id)GetAllBottles;
-(id)GetBottleByLocalID:(unsigned long)anId;
-(unsigned long)GetSvrIDByLocalID:(unsigned long)anId;
-(id)getSvrUsrNameByLocalUsrName:(id)name;
-(id)getLocalUsrNameBySvrUsrName:(id)name;
-(void)setBottleUsrInfo:(id)info;
-(void)spliteSvrUsrName:(id)name encryptUsrName:(id*)name2 bottleID:(id*)anId;
-(id)getSvrUsrNameByLocalID:(unsigned long)anId;
-(unsigned long)getMsgTypeByBottleDataType:(unsigned long)type;
-(unsigned long)getMsgTypeByDataType:(unsigned long)type;
-(BOOL)isBeBanned;
-(void)initDB:(id)db withLock:(id)lock;
-(void)onServiceInit;
-(id)init;
-(id)GetBottleIDFromContactName:(id)contactName;
-(void)SaveSetting;
-(id)GetSetting;
-(void)LoadSetting;
-(void)GenTestData;
-(void)testThrow;
@end

@interface CBottleOpLog : NSObject {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
}
-(void)dealloc;
-(BOOL)DeleteBottle:(id)bottle backed:(BOOL)backed;
-(BOOL)InsertOpLog:(unsigned long)log OpLog:(id)log2;
-(void)initDB:(id)db withLock:(id)lock;
-(id)init;
@end

@interface BottleSessionCache : NSObject {
	BottleSessionCacheData* m_seCacheData;
	SessionCacheValidInfo* m_seCacheValidInfo;
}
-(void)saveCacheData:(id)data;
-(id)loadCacheData;
-(BOOL)isCacheValid;
-(void)setCacheInvalid;
-(BOOL)saveCacheDataInternal;
-(void)checkLoadCacheData;
-(void)setCacheValid:(BOOL)valid;
-(void)saveCacheValidInfoInternal;
-(void)checkLoadCacheValidInfo;
-(id)getCacheDataFilePath;
-(id)getCacheValidInfoFilePath;
-(void)dealloc;
-(id)init;
@end

@interface BottleSessionCacheData : NSObject {
	NSMutableArray* m_arrSessionCacheItems;
	NSMutableDictionary* m_dicSeliazed;
	NSMutableDictionary* m_dicSessionCacheItems;
}
@property(retain, nonatomic) NSMutableDictionary* m_dicSessionCacheItems;
@property(retain, nonatomic) NSMutableDictionary* m_dicSeliazed;
@property(retain, nonatomic) NSMutableArray* m_arrSessionCacheItems;
+(id)parseFromData:(id)data;
-(id)toSessions;
-(void)setFromSessions:(id)sessions;
-(id)serializedData;
-(void)dealloc;
-(id)init;
@end

@interface BottleSessionInfo : NSObject {
	CBottleContact* m_contact;
	CBottle* m_bottle;
	CMessageWrap* m_lastMessage;
	unsigned long m_uiBottleLocalID;
	unsigned long m_uiBottleParentID;
	int m_bottleStatus;
	unsigned long m_unReadCount;
	unsigned long m_uiCreateTime;
	BOOL m_bRealBottle;
	NSMutableArray* m_arrLocalID;
}
@property(retain, nonatomic) NSMutableArray* m_arrLocalID;
@property(assign, nonatomic) BOOL m_bRealBottle;
@property(assign, nonatomic) unsigned long m_unReadCount;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(assign, nonatomic) int m_bottleStatus;
@property(assign, nonatomic) unsigned long m_uiBottleParentID;
@property(assign, nonatomic) unsigned long m_uiBottleLocalID;
@property(retain, nonatomic) CBottleContact* m_contact;
@property(retain, nonatomic) CMessageWrap* m_lastMessage;
@property(retain, nonatomic) CBottle* m_bottle;
-(id)description;
-(void)tryLoadExtInfo;
-(int)compare:(id)compare;
-(void)dealloc;
-(id)init;
@end

@interface BottleSessionMgr : MMService <MMService, IBottleMgrExt, IMsgExt, INewArrivalExt, IBottleContactMgrExt, IMMNewSessionMgrExt, MMKernelExt> {
	NSMutableArray* m_arrSessions;
	BOOL m_bHasInit;
	BottleSessionCache* m_sessionCache;
}
@property(retain, nonatomic) NSMutableArray* m_arrSessions;
-(void)dealloc;
-(void)onPreQuit;
-(void)isUser:(id)user hasSpecalSessionInfo:(id*)info;
-(void)onDeleteSessionOfUser:(id)user;
-(void)isMessage:(id)message Handled:(BOOL*)handled;
-(void)isUser:(id)user Handled:(BOOL*)handled;
-(id)genMainFrameSessionInfo;
-(void)onSyncBottleContactEnd;
-(void)onDeleteQQContact:(id)contact;
-(void)onModifyBottleContact:(id)contact;
-(void)onNewBottleContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)systemResigned:(id)resigned;
-(void)OnThrowBack:(unsigned long)back;
-(void)OnUpdateBottle:(unsigned long)bottle;
-(void)OnUnReadCountChange:(id)change;
-(void)OnDelMsg:(id)msg;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnPreAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)onBottleNewArrivalCountChange:(unsigned long)change;
-(void)saveSessionCache;
-(BOOL)clearBottleNewArrivalCount:(id)count;
-(BOOL)zeroNewArrivalCount;
-(unsigned long)getNewArrivalCount;
-(id)getNewArrivalList;
-(void)DeleteAllSession;
-(void)DeleteSession:(unsigned long)session;
-(void)DeleteSession:(unsigned long)session backed:(BOOL)backed;
-(void)OnDeleteSessionByBottle:(id)bottle;
-(void)tryUpdateSessionInfo:(id)info;
-(int)updateSessionInfo:(id)info;
-(id)GetSessionInfoByUsrName:(id)name Index:(unsigned*)index;
-(id)GetLastMessage;
-(id)GetSessionInfo:(unsigned long)info;
-(unsigned long)GetCount;
-(unsigned long)GetUnreadBottleCount;
-(unsigned long)GetTotalUnreadCount;
-(void)onServiceInit;
-(id)init;
-(void)loadData;
-(id)genSessionInfoByBottle:(id)bottle;
-(void)fireListener:(int)listener withIndex:(unsigned long)index;
-(BOOL)isNeedShowInMainFrame;
-(void)SafeCallPluginChanged:(BOOL)changed;
-(void)displayPluginAtMainFrame:(BOOL)mainFrame;
-(void)syncAllContact;
-(void)checkAndSort;
-(void)setCacheInvalid;
-(id)toString:(unsigned long)string;
@end

@interface CBottleSetting : NSObject <NSCoding> {
	unsigned long m_uiSex;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
	NSString* m_nsHeadImageMD5;
	NSString* m_nsHDImgStatus;
	NSString* m_nsImgStatus;
	BOOL m_bFirstIn;
	unsigned long m_uiLastMsgType;
	unsigned long m_uiChatStatus;
	NSString* m_nsHeadImgUrl;
	NSString* m_nsHeadHDImgUrl;
}
@property(retain, nonatomic) NSString* m_nsHeadHDImgUrl;
@property(retain, nonatomic) NSString* m_nsHeadImgUrl;
@property(assign, nonatomic) unsigned long m_uiChatStatus;
@property(assign, nonatomic) unsigned long m_uiLastMsgType;
@property(assign, nonatomic) BOOL m_bFirstIn;
@property(retain, nonatomic) NSString* m_nsImgStatus;
@property(retain, nonatomic) NSString* m_nsHDImgStatus;
@property(retain, nonatomic) NSString* m_nsHeadImageMD5;
@property(retain, nonatomic) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
@property(assign, nonatomic) unsigned long m_uiSex;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(void)preInit;
@end

@interface CFishBottleEvent : NetCmdEvent {
}
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CGetBottleCountEvent : NetCmdEvent {
	NSString* m_nsUsrName;
}
@property(retain, nonatomic) NSString* m_nsUsrName;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface COpenBottleEvent : NetCmdEvent {
	COpenBottleWrap* m_wrapOpenBottle;
}
@property(retain, nonatomic) COpenBottleWrap* m_wrapOpenBottle;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CThrowBottleEvent : NetCmdEvent {
	CThrowBottleWrap* m_wrapThrowBottle;
}
@property(retain, nonatomic) CThrowBottleWrap* m_wrapThrowBottle;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CFishBottlePrtl : PrtlBase {
}
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CGetBottleCountPrtl : PrtlBase {
	NSString* m_nsUsrName;
	unsigned long m_uiTime;
}
@property(assign, nonatomic) unsigned long m_uiTime;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface COpenBottlePrtl : PrtlBase {
	COpenBottleWrap* m_wrapOpenBottle;
}
@property(retain, nonatomic) COpenBottleWrap* m_wrapOpenBottle;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface CThrowBottlePrtl : PrtlBase {
	CThrowBottleWrap* m_wrapThrowBottle;
}
@property(retain, nonatomic) CThrowBottleWrap* m_wrapThrowBottle;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface MassSendInfo : NSObject {
	NSString* m_nsToList;
	NSString* m_nsToListMD5;
	unsigned long m_uiMessageType;
	NSData* m_dtBuffer;
	unsigned long m_uiStartPos;
	unsigned long m_uiTotalLen;
	NSString* m_nsLocalID;
	unsigned long m_uiMediaTime;
	NSData* m_dtThumb;
	unsigned long m_uiThumbStartPos;
	unsigned long m_uiThumbTotalLen;
	unsigned long m_uiVideoSource;
	unsigned long m_uiCameraType;
	unsigned long m_uiToListCount;
	UIImage* m_image;
	NSString* m_nsText;
	CaptureVideoInfo* m_videoInfo;
	BOOL m_bDataSent;
	unsigned long m_uiIsSendAgain;
	unsigned long m_uiCompressType;
}
@property(assign, nonatomic) unsigned long m_uiCompressType;
@property(assign, nonatomic) unsigned long m_uiIsSendAgain;
@property(assign, nonatomic) unsigned long m_uiToListCount;
@property(assign, nonatomic) BOOL m_bDataSent;
@property(retain, nonatomic) CaptureVideoInfo* m_videoInfo;
@property(retain, nonatomic) NSString* m_nsText;
@property(retain, nonatomic) UIImage* m_image;
@property(assign, nonatomic) unsigned long m_uiCameraType;
@property(assign, nonatomic) unsigned long m_uiVideoSource;
@property(assign, nonatomic) unsigned long m_uiThumbTotalLen;
@property(assign, nonatomic) unsigned long m_uiThumbStartPos;
@property(retain, nonatomic) NSData* m_dtThumb;
@property(assign, nonatomic) unsigned long m_uiMediaTime;
@property(retain, nonatomic) NSString* m_nsLocalID;
@property(assign, nonatomic) unsigned long m_uiTotalLen;
@property(assign, nonatomic) unsigned long m_uiStartPos;
@property(retain, nonatomic) NSData* m_dtBuffer;
@property(assign, nonatomic) unsigned long m_uiMessageType;
@property(retain, nonatomic) NSString* m_nsToListMD5;
@property(retain, nonatomic) NSString* m_nsToList;
-(void)dealloc;
-(id)init;
@end

@interface MassSendContact : NSObject {
	NSString* m_nsUsrName;
	NSString* m_nsDetail;
	unsigned long m_uiToListCount;
}
@property(assign, nonatomic) unsigned long m_uiToListCount;
@property(retain, nonatomic) NSString* m_nsDetail;
@property(retain, nonatomic) NSString* m_nsUsrName;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface MassSendWrap : NSObject {
	unsigned long m_uiMessageType;
	NSArray* m_arrayToList;
	NSString* m_nsText;
	UIImage* m_image;
	NSData* m_dtImage;
	NSData* m_dtVoice;
	unsigned long m_uiVoiceTime;
	unsigned long m_uiVoiceTmpID;
	NSString* m_nsChatName;
	unsigned long m_uiMesLocalID;
	unsigned long m_uiIsSendAgain;
	CaptureVideoInfo* m_oVideoInfo;
	unsigned long m_uiCreateTime;
}
@property(assign, nonatomic) unsigned long m_uiIsSendAgain;
@property(assign, nonatomic) unsigned long m_uiMesLocalID;
@property(retain, nonatomic) NSString* m_nsChatName;
@property(assign, nonatomic) unsigned long m_uiVoiceTmpID;
@property(assign, nonatomic) unsigned long m_uiCreateTime;
@property(retain, nonatomic) CaptureVideoInfo* m_oVideoInfo;
@property(assign, nonatomic) unsigned long m_uiVoiceTime;
@property(retain, nonatomic) NSData* m_dtVoice;
@property(retain, nonatomic) NSData* m_dtImage;
@property(retain, nonatomic) UIImage* m_image;
@property(retain, nonatomic) NSString* m_nsText;
@property(retain, nonatomic) NSArray* m_arrayToList;
@property(assign, nonatomic) unsigned long m_uiMessageType;
-(void)dealloc;
-(id)init;
@end

@interface MassSendMgr : MMService <PBMessageObserverDelegate, MMService, IMsgExt> {
	MassSendInfo* m_info;
	unsigned long m_uiEventID;
	unsigned long m_uiMaxSupport;
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSMutableDictionary* m_dicContacts;
	BOOL m_bDataNeedReload;
	BOOL m_bCancel;
	CMessageWrap* m_msgWrap;
	BOOL m_bFreqLimit;
}
@property(retain, nonatomic) CMessageWrap* m_msgWrap;
@property(retain, nonatomic) MassSendInfo* m_info;
-(BOOL)HandleMassSendTopMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnMsgNotAddDBNotify:(id)notify MsgWrap:(id)wrap;
-(id)genMainFrameSessionInfo:(id)info;
-(BOOL)isNeedBeTop:(id)top;
-(BOOL)GetStartAndEndDateFromXmlContent:(id)xmlContent arrStart:(id)start arrEnd:(id)end;
-(void)CancelMassSend;
-(void)DelMsg:(id)msg MsgWrap:(id)wrap;
-(id)GetMsg:(id)msg LocalID:(unsigned long)anId;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit LeftCount:(unsigned*)count LeftUnreadCount:(unsigned*)count5;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)cancelFreqLimit;
-(void)hanldeMassSendUploadOK:(id)ok;
-(void)MassSend:(id)send;
-(void)CreateMassSendEvent;
-(void)addLocalMessage;
-(void)genImgMsgWrap:(id)wrap;
-(BOOL)isNeedShowInMainFrame;
-(BOOL)SaveMesThumb:(id)thumb MsgWrap:(id)wrap;
-(BOOL)SaveMesImg:(id)img MsgWrap:(id)wrap;
-(BOOL)WriteAudioFile:(id)file LocalID:(unsigned long)anId Offset:(unsigned long)offset Len:(unsigned long)len Data:(id)data;
-(void)safeCallFailExtension:(unsigned long)extension WithErrorMsg:(id)errorMsg;
-(void)safeCallFailExtension:(unsigned long)extension;
-(id)getToList:(id)list;
-(id)getToListMD5:(id)listMD5;
-(id)getRealChatUsrByMD5:(id)a5;
-(void)dealloc;
-(id)init;
-(void)initDB:(id)db withLock:(id)lock;
-(void)deleteContact:(id)contact;
-(void)addContact:(id)contact;
-(BOOL)deleteContactInDB:(id)db;
-(BOOL)addContactInDB:(id)db;
-(id)convertMassSendContactToDictionary:(id)dictionary;
-(id)getContactByName:(id)name;
-(BOOL)autoReload;
-(void)getAllContactsFromDB;
-(void)getMassSendContactValue:(id)value dicInfo:(id)info;
-(unsigned long)getMassSendContactInteger:(id)integer key:(id)key;
-(void)initQueryArray:(id)array;
-(void)onServiceInit;
@end

@interface CrossfadeAnimationController : NSObject <UIViewControllerAnimatedTransitioning> {
	id<CrossfadeAnimationDelegate> m_delegate;
	BOOL _reverse;
	double _duration;
}
@property(assign, nonatomic) double duration;
@property(assign, nonatomic) BOOL reverse;
@property(assign, nonatomic) id<CrossfadeAnimationDelegate> delegate;
-(void)animationEnded:(BOOL)ended;
-(void)animateTransition:(id)transition fromVC:(id)vc toVC:(id)vc3 fromView:(id)view toView:(id)view5;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
-(id)init;
@end

@interface AddressBookFriend : NSObject {
	MMAddressBook* m_addressBook;
	NSString* m_username;
	NSString* m_aliasname;
	NSString* m_nickname;
	BOOL m_isInMyContactList;
	unsigned long m_uiSex;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	NSString* m_nsSignature;
	NSString* m_nsWCBGImgObjectID;
	int m_iWCFlag;
	NSString* m_pcWCBGImgID;
	NSString* m_nsExternalInfo;
	NSString* m_nsBrandSubscriptConfigUrl;
	unsigned long m_uiBrandSubscriptionSettings;
	SubscriptBrandInfo* m_subBrandInfo;
	NSString* m_nsBrandIconUrl;
	NSString* m_nsHeadImgUrl;
	NSString* m_nsHeadHDImgUrl;
}
@property(retain, nonatomic) NSString* m_nsHeadHDImgUrl;
@property(retain, nonatomic) NSString* m_nsHeadImgUrl;
@property(retain, nonatomic) NSString* m_nsBrandIconUrl;
@property(retain, nonatomic) SubscriptBrandInfo* m_subBrandInfo;
@property(assign, nonatomic) unsigned long m_uiBrandSubscriptionSettings;
@property(retain, nonatomic) NSString* m_nsBrandSubscriptConfigUrl;
@property(retain, nonatomic) NSString* m_nsExternalInfo;
@property(retain, nonatomic) NSString* m_pcWCBGImgID;
@property(assign, nonatomic) int m_iWCFlag;
@property(retain, nonatomic) NSString* m_nsWCBGImgObjectID;
@property(retain, nonatomic) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
@property(assign, nonatomic) unsigned long m_uiSex;
@property(assign, nonatomic) BOOL m_isInMyContactList;
@property(retain, nonatomic) NSString* m_nickname;
@property(retain, nonatomic) NSString* m_aliasname;
@property(retain, nonatomic) NSString* m_username;
@property(retain, nonatomic) MMAddressBook* m_addressBook;
-(int)compareMobileFriendAscending:(id)ascending;
-(int)compare:(id)compare;
-(void)dealloc;
-(id)init;
@end

@interface AddressBookFriendMgr : MMService <MMService, IFriendListMgrExt> {
	NSMutableDictionary* m_friends;
}
-(void)dealloc;
-(id)init;
-(BOOL)trySyncAddressBookFriends;
-(void)onFriendListUpdated:(id)updated ErrorCode:(unsigned long)code Message:(id)message;
-(id)getAddressBookFriends;
-(void)LoadData;
@end

@interface BindOpMobileEventHandler : ProtobufEventHandler {
}
-(void)OnProtocolReturn:(id)aReturn shouldContinue:(bool*)aContinue;
-(void)ProcessOnMainThread:(id)thread;
@end

@interface FriendListMgr : MMService <PBMessageObserverDelegate, MMService> {
	NSMutableSet* m_downliadingPackageLists;
}
-(void)dealloc;
-(id)init;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onFriendListSynced:(id)synced;
-(BOOL)downloadFriendListForType:(int)type;
-(void)clearFriendListForType:(int)type;
-(id)getFriendListForType:(int)type;
-(void)SaveFriendListArchive:(id)archive packageListArchive:(id)archive2;
-(id)LoadFriendListArchive:(id)archive;
-(id)getFriendListPath:(id)path;
@end

@interface WebviewAuthorizationInfo : NSObject {
	NSString* _appId;
	NSString* _url;
	NSString* _api;
	NSString* _scope;
	NSString* _signature;
	NSString* _signatureMethod;
	NSString* _timeStamp;
	NSString* _nonce;
}
@property(retain, nonatomic) NSString* nonce;
@property(retain, nonatomic) NSString* timeStamp;
@property(retain, nonatomic) NSString* signatureMethod;
@property(retain, nonatomic) NSString* signature;
@property(retain, nonatomic) NSString* scope;
@property(retain, nonatomic) NSString* api;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* appId;
-(id)init;
-(void)dealloc;
@end

@interface AddressBookArchive : NSObject <PBCoding> {
	NSMutableSet* phones;
	NSMutableSet* emails;
}
@property(retain, nonatomic) NSMutableSet* emails;
@property(retain, nonatomic) NSMutableSet* phones;
+(void)initialize;
+(void)_initPBTableOfAddressBookArchive;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface MMAddressBook : NSObject {
	NSString* m_phone;
	NSString* m_email;
	NSString* m_nickname;
	NSString* m_nicknamePinYin;
	NSString* m_nicknamePinYinShort;
	UIImage* m_image;
}
@property(retain, nonatomic) UIImage* m_image;
@property(retain, nonatomic) NSString* m_nicknamePinYinShort;
@property(retain, nonatomic) NSString* m_nicknamePinYin;
@property(retain, nonatomic) NSString* m_nickname;
@property(retain, nonatomic) NSString* m_email;
@property(retain, nonatomic) NSString* m_phone;
-(int)compareMMAddressBookAscending:(id)ascending;
-(id)description;
-(void)dealloc;
@end

@interface CountryCodeWrap : NSObject {
	NSString* m_nsCountryName;
	NSString* m_nsCountryNamePinYin;
	NSString* m_nsCountryCode;
	NSString* m_nsISOCountryCodes;
	unsigned long m_uiCountryNamesChineseStrokesCount;
}
@property(assign, nonatomic) unsigned long m_uiCountryNamesChineseStrokesCount;
@property(retain, nonatomic) NSString* m_nsISOCountryCodes;
@property(retain, nonatomic) NSString* m_nsCountryCode;
@property(retain, nonatomic) NSString* m_nsCountryNamePinYin;
@property(retain, nonatomic) NSString* m_nsCountryName;
-(void)dealloc;
-(id)description;
-(int)compare:(id)compare;
@end

@interface MMAddressBookMgr : MMService <MessageObserverDelegate, MMService, IMsgExt> {
	NSMutableDictionary* m_phoneAddressBooks;
	NSMutableDictionary* m_emailAddressBooks;
	AddressBookArchive* m_addressBookArchive;
	BOOL m_isSyningAddressBook;
	BOOL m_isFirstSync;
	void* m_addressBook;
	BOOL m_bLocalAddressBookChanged;
	BOOL m_bShouldResponeAddressBookChange;
	NSLocale* m_curLocale;
	NSMutableArray* m_countryCodes;
	BOOL m_bTempCanSyncAddressBook;
}
@property(assign, nonatomic) BOOL m_bTempCanSyncAddressBook;
@property(assign, nonatomic) BOOL m_bShouldResponeAddressBookChange;
+(BOOL)isMobileVerifiedForStatic;
+(BOOL)isBindMobile;
+(BOOL)isPhoneUploaded:(id)uploaded;
-(void)BlockLoadAddressMobile:(id)mobile Email:(id)email Status:(unsigned*)status;
-(void*)BlockCreateAddressBook:(unsigned*)book;
-(unsigned long)getAddressBookStatus;
-(void)applicationWillEnterForeground:(id)application;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)dealloc;
-(id)getCurCountryCode;
-(id)getAllCountryCode;
-(void)setCanSyncAddressBook:(BOOL)book;
-(BOOL)canSyncAddressBook;
-(BOOL)isMobileVerified;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)revertLocalAddressBook;
-(void)checkReloadByLocalAddressBookChanged;
-(void)setLocalAddressBookChanged;
-(void)clearLocalSnapshot;
-(void)trySyncAddressBook;
-(void)uploadNewPhones:(id)phones withNewMD5Emails:(id)newMD5Emails;
-(id)getNewMD5Emails;
-(id)getNewPhones;
-(void)updateUploadedList;
-(void)LoadAddressBookArchive;
-(BOOL)SaveAddressBookArchive;
-(id)getAddressBooksWithoutBindPhone;
-(id)getAddressBooks;
-(id)getNickNameForPhone:(id)phone;
-(BOOL)CheckPhoneInAddressBook:(id)addressBook;
-(id)getAddressBookForPhone:(id)phone;
-(void)onServiceInit;
-(id)init;
-(void)removeNotificationCenterObservers;
-(void)addNotificationCenterObservers;
-(void)tryLoad;
-(void)load:(void*)load;
-(void)doLoadFromDB:(void*)db useBlock:(BOOL)block;
-(void)InternalLoadFromDB:(void*)db Mobile:(id)mobile Email:(id)email;
-(void)addToCacheInMainThreadWithPhone:(id)phone email:(id)email;
-(BOOL)isAddressBookLoaded;
-(id)validEmail:(id)email;
-(id)validPhoneNumber:(id)number;
-(void*)createAddressBook;
@end

@interface CImplUploadMContactEvent : NetCmdEvent {
	NSArray* m_arrMobileList;
	NSString* m_nsMobile;
	NSString* m_nsUsrName;
	NSArray* m_arrEmailList;
}
@property(retain, nonatomic) NSArray* m_arrEmailList;
@property(retain, nonatomic) NSString* m_nsUsrName;
@property(retain, nonatomic) NSString* m_nsMobile;
@property(retain, nonatomic) NSArray* m_arrMobileList;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface ResetPasswordByMobileEvent : NetCmdEvent {
	NSString* m_nsMobile;
	unsigned long m_uiOpCode;
}
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface CUploadMContactEvent : CMultiEvent {
	NSMutableArray* m_arrMobileList;
	NSString* m_nsMobile;
	unsigned long m_uiUploadCount;
	NSMutableArray* m_arrEmailList;
}
@property(retain, nonatomic) NSMutableArray* m_arrEmailList;
@property(retain, nonatomic) NSMutableArray* m_arrMobileList;
-(void)NotifyFromEvent:(id)event Message:(unsigned long)message MessageInfo:(id)info;
-(BOOL)CreateUploadEvent;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)TimerCheckEvent;
-(void)dealloc;
-(id)init;
@end

@interface ResetPasswordByMobilePrtl : PrtlBase {
	NSString* m_nsMobile;
	unsigned long m_uiOpCode;
}
@property(assign, nonatomic) unsigned long m_uiOpCode;
@property(retain, nonatomic) NSString* m_nsMobile;
-(void)GetRespKey:(AutoBuffer*)key;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface StickerEmoticonView : BaseEmoticonView <EmoticonDescMgrExt, MMImagePickerManagerDelegate, MMTransparentButtonDelegate, IEmoticonMgrExt, UIActionSheetDelegate> {
	NSString* _pid;
	NSMutableArray* _emoticonWrapArray;
	unsigned long _currentIndex;
	unsigned long _longPressedIndex;
	BOOL _isInLongPressMode;
	BOOL _formerEditMode;
	MMDelegateProxy<BaseEmoticonViewDelegate>* m_delegate;
}
@property(retain, nonatomic) NSMutableArray* emoticonWrapArray;
-(void)setM_delegate:(id)delegate;
-(id)m_delegate;
-(void)OnUpdateEmoticonList;
-(void)onGetEmoticonDesc:(id)desc descList:(id)list;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)MMTransparentButton_touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)MMTransparentButton_touchesEnded:(id)ended withEvent:(id)event;
-(void)MMTransparentButton_touchesMoved:(id)moved withEvent:(id)event;
-(void)MMTransparentButton_touchesBegan:(id)began withEvent:(id)event;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)onTipsHide;
-(BOOL)canEditEmoticonAtIndex:(unsigned long)index;
-(void)commitEditingStyleForRowAtIndex:(unsigned long)index;
-(void)onEditModeChanged:(BOOL)changed;
-(void)didReleaseLongPressEmoticonAtIndex:(unsigned long)index;
-(void)didLongPressOnEmoticonAtIndex:(unsigned long)index;
-(id)GetEmoticonView;
-(int)gestureActionModeAtIndex:(unsigned long)index;
-(id)descriptionForEmoticonAtIndex:(unsigned long)index;
-(id)viewForEmoticonAtIndex:(unsigned long)index;
-(float)EmoticonInterval;
-(float)EmoticonMarginTopOffset;
-(float)PageControlMarginButtom;
-(float)EmoticonHeightAtIndex:(unsigned long)index;
-(unsigned long)numberOfCols;
-(unsigned long)numberOfRows;
-(unsigned long)numberOfEmoticons;
-(BOOL)indexOfDeleteButton:(unsigned long)deleteButton;
-(BOOL)indexOfAddButton:(unsigned long)addButton;
-(void)OnEmoticonDeleteBtnUp:(id)up;
-(void)OnEmoticonDeleteBtnDown:(id)down;
-(void)OnEmoticonAddBtnUp:(id)up;
-(void)OnEmoticonAddBtnDown:(id)down;
-(void)OnEmoticonItemBtnUp:(id)up;
-(void)OnEmoticonItemBtnDown:(id)down;
-(BOOL)canDeleteItem;
-(BOOL)canAddItem;
-(void)reloadWithPid:(id)pid;
-(void)reloadView;
-(id)getViewController;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)initView;
-(void)initData;
@end

@interface CUploadMContactPrtl : PrtlBase {
	NSArray* m_arrMobileList;
	NSString* m_nsUsrName;
	NSArray* m_arrEmailList;
}
@property(retain, nonatomic) NSArray* m_arrEmailList;
@property(retain, nonatomic) NSString* m_nsUsrName;
@property(retain, nonatomic) NSArray* m_arrMobileList;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface WCOfflinePayControlMgr : WCBaseControlMgr {
}
-(unsigned long)startWCOfflinePayPayMoneyLogic:(id)logic Data:(id)data;
-(unsigned long)startAddOfflineFunctionLogic:(id)logic Data:(id)data PayData:(id)data3;
@end

@interface Api2ScopeAuthInfo : NSObject {
	NSString* _scope;
	unsigned long _scopeStatus;
}
@property(assign, nonatomic) unsigned long scopeStatus;
@property(retain, nonatomic) NSString* scope;
-(id)init;
-(void)dealloc;
@end

@interface RegisterInfo : NSObject <NSCoding> {
	NSString* m_nsPhoneToRegister;
}
@property(retain, nonatomic) NSString* m_nsPhoneToRegister;
+(void)RemoveRegiserInfo;
+(id)LoadRegiserInfo;
-(void)SaveToFile;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface WCCommentItem : NSObject <NSCoding> {
	NSString* toUserName;
	NSString* itemID;
	NSString* content;
	int type;
	int source;
	unsigned createTime;
	WCUserComment* refComment;
	unsigned inQueueTime;
	NSString* clientID;
}
@property(retain, nonatomic) NSString* clientID;
@property(assign, nonatomic) unsigned inQueueTime;
@property(retain, nonatomic) WCUserComment* refComment;
@property(assign, nonatomic) unsigned createTime;
@property(assign, nonatomic) int source;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* itemID;
@property(retain, nonatomic) NSString* toUserName;
-(id)toServerObject;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCCommentUploadMgr : MMObject <PBMessageObserverDelegate, MessageObserverDelegate> {
	FIFOFileQueue* m_queue;
	NSMutableDictionary* m_inQueueCommentsForWCObject;
	int m_uploadingCount;
	MMDelegateProxy<WCCommentUploadMgrDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCCommentUploadMgrDelegate>* m_delegate;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)doComment:(id)comment;
-(void)tryStartNextTask;
-(void)pushBackTopTask;
-(void)popTopTask;
-(void)removeCommentFromWCObjectCache:(id)wcobjectCache;
-(void)addCommentToWCObjectCache:(id)wcobjectCache;
-(id)getInQueueCommentForWCObject:(id)wcobject;
-(void)removeInQueueLikeCommentForWCObject:(id)wcobject;
-(void)addComment:(id)comment;
-(void)dealloc;
-(id)init;
@end

@interface WCNotificationCenterMgr : MMObject <INewSyncPluginExt> {
	WCDataItem* m_lastDataItem;
	MyWCDB* m_database;
	int m_unReadCount;
	MMDelegateProxy<WCNotificationCenterMgrDelegate>* m_delegate;
}
@property(retain, nonatomic) MyWCDB* m_database;
@property(assign, nonatomic) MMDelegateProxy<WCNotificationCenterMgrDelegate>* m_delegate;
-(void)deleteMessage:(id)message;
-(void)deleteAllMessages;
-(void)markMessageListRead:(id)read;
-(void)markMessageRead:(id)read;
-(id)getMessageFrom:(id)from maxCount:(unsigned long)count;
-(id)getAllMessages;
-(id)getUnReadMessages;
-(id)getLastUnReadMessage;
-(unsigned long)getUnReadMessageCount;
-(id)getLastWCObject;
-(void)NotifyCmd:(id)cmd;
-(void)NotifyCheckSelector;
-(void)saveSetting;
-(void)dealloc;
-(id)init;
@end

@interface WCStrangerCommentMgr : NSObject {
	MyWCDB* m_database;
}
@property(retain, nonatomic) MyWCDB* m_database;
-(void)getStrangerCommentForDataItem:(id)dataItem partner:(id)partner;
-(void)addComment:(id)comment toItem:(id)item;
-(void)dealloc;
@end

@interface WCSyncEventHandler : ProtobufEventHandler {
}
-(void)OnProtocolReturn:(id)aReturn shouldContinue:(bool*)aContinue;
-(void)onReveiceWCMessage:(id)message;
@end

@interface WCBGAuthor : NSObject {
	NSString* name;
	NSString* title;
	NSString* quote;
	NSString* desc;
	WCMediaItem* icon;
}
@property(retain, nonatomic) WCMediaItem* icon;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* quote;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* name;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCBGGroup : NSObject {
	NSString* name;
	NSMutableArray* mediaList;
}
@property(retain, nonatomic) NSMutableArray* mediaList;
@property(retain, nonatomic) NSString* name;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCBGAlbum : NSObject {
	WCBGAuthor* author;
	NSMutableArray* groupList;
}
@property(retain, nonatomic) NSMutableArray* groupList;
@property(retain, nonatomic) WCBGAuthor* author;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCBGStorage : NSObject {
	unsigned hash;
	NSMutableArray* albumList;
}
@property(retain, nonatomic) NSMutableArray* albumList;
@property(assign, nonatomic) unsigned hash;
+(id)fromBuffer:(id)buffer;
+(id)parseFromXml:(id)xml preferLang:(id)lang;
-(id)toBuffer;
-(id)toXml;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCBGUserInfo : NSObject {
	NSString* m_nsWCBGImgObjectID;
	int m_iWCFlag;
	NSString* m_pcWCBGImgID;
}
@property(retain, nonatomic) NSString* m_pcWCBGImgID;
@property(assign, nonatomic) int m_iWCFlag;
@property(retain, nonatomic) NSString* m_nsWCBGImgObjectID;
-(BOOL)isEqual:(id)equal;
-(void)dealloc;
@end

@interface WCUserComment : NSObject <NSCoding> {
	NSString* commentID;
	NSString* username;
	NSString* nickname;
	NSString* content;
	int source;
	int type;
	unsigned createTime;
	int isLocalAdded;
	NSString* refCommentID;
	NSString* refUserName;
	NSString* contentPattern;
	int isRichText;
}
@property(assign, nonatomic) int isRichText;
@property(retain, nonatomic) NSString* contentPattern;
@property(retain, nonatomic) NSString* refUserName;
@property(retain, nonatomic) NSString* refCommentID;
@property(assign, nonatomic) int isLocalAdded;
@property(assign, nonatomic) unsigned createTime;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) int source;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* username;
@property(retain, nonatomic) NSString* commentID;
+(id)fromServerCommentObj:(id)serverCommentObj;
+(id)fromServerObj:(id)serverObj;
+(id)fromCommentUploadItem:(id)commentUploadItem;
-(BOOL)isEqual:(id)equal;
-(id)description;
-(id)descriptionForKeyPaths;
-(id)keyPaths;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(int)compareComment:(id)comment;
@end

@interface WCAppInfo : NSObject {
	NSString* appID;
	NSString* appName;
	NSString* version;
	NSString* installUrl;
	NSString* fromUrl;
	BOOL isForceUpdate;
}
@property(assign, nonatomic) BOOL isForceUpdate;
@property(retain, nonatomic) NSString* fromUrl;
@property(retain, nonatomic) NSString* installUrl;
@property(retain, nonatomic) NSString* version;
@property(retain, nonatomic) NSString* appName;
@property(retain, nonatomic) NSString* appID;
-(BOOL)isValid;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCActionInfo : NSObject {
	NSString* mediaTagName;
	int scene;
	int type;
	NSString* appID;
	NSString* url;
	NSString* wordingKey;
	NSString* messageExt;
	NSString* messageAction;
	int appInstalledActionScene;
	int appUninstalledActionScene;
	NSString* appInstalledWordingKey;
	NSString* appUninstalledWordingKey;
}
@property(retain, nonatomic) NSString* appUninstalledWordingKey;
@property(retain, nonatomic) NSString* appInstalledWordingKey;
@property(assign, nonatomic) int appUninstalledActionScene;
@property(assign, nonatomic) int appInstalledActionScene;
@property(retain, nonatomic) NSString* messageAction;
@property(retain, nonatomic) NSString* messageExt;
@property(retain, nonatomic) NSString* wordingKey;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* appID;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) int scene;
@property(retain, nonatomic) NSString* mediaTagName;
-(BOOL)isValidForShow;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCUrl : NSObject <NSCoding> {
	NSString* url;
	int type;
}
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* url;
+(id)UrlWithUrl:(id)url type:(int)type;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCMediaItem : NSObject <NSCoding> {
	NSString* mid;
	int type;
	int subType;
	NSString* title;
	NSString* desc;
	NSString* titlePattern;
	NSString* descPattern;
	NSString* userData;
	NSString* source;
	NSMutableArray* previewUrls;
	WCUrl* dataUrl;
	WCUrl* lowBandUrl;
	CGSize imgSize;
	BOOL likeFlag;
	int likeCount;
	NSMutableArray* likeUsers;
	int commentCount;
	NSMutableArray* commentUsers;
	int withCount;
	NSMutableArray* withUsers;
}
@property(retain, nonatomic) NSMutableArray* withUsers;
@property(assign, nonatomic) int withCount;
@property(retain, nonatomic) NSMutableArray* commentUsers;
@property(assign, nonatomic) int commentCount;
@property(retain, nonatomic) NSMutableArray* likeUsers;
@property(assign, nonatomic) int likeCount;
@property(assign, nonatomic) BOOL likeFlag;
@property(assign, nonatomic) CGSize imgSize;
@property(retain, nonatomic) WCUrl* lowBandUrl;
@property(retain, nonatomic) WCUrl* dataUrl;
@property(retain, nonatomic) NSMutableArray* previewUrls;
@property(retain, nonatomic) NSString* userData;
@property(retain, nonatomic) NSString* source;
@property(retain, nonatomic) NSString* descPattern;
@property(retain, nonatomic) NSString* titlePattern;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int subType;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* mid;
-(id).cxx_construct;
-(BOOL)isValid;
-(BOOL)savePreviewFromMedia:(id)media;
-(BOOL)saveDataFromMedia:(id)media;
-(BOOL)savePreviewFromData:(id)data;
-(BOOL)saveDataFromData:(id)data;
-(BOOL)savePreviewFromPath:(id)path;
-(BOOL)saveDataFromPath:(id)path;
-(BOOL)hasPreview;
-(BOOL)hasData;
-(id)imageOfSizeNoAutoRelease:(int)sizeNoAutoRelease;
-(id)imageOfSize:(int)size;
-(id)pathForPreview;
-(id)pathForData;
-(id)hashPathForString:(id)string;
-(XXStruct_zYrK5D)locationForData;
-(id)cityForData;
-(id)videoStreamForData;
-(id)voiceStreamForData;
-(int)mediaType;
-(id)mediaID;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCMediaItemWrap : NSObject {
	WCMediaItem* mediaItem;
	WCDataItem* parent;
	unsigned long index;
}
@property(assign, nonatomic) unsigned long index;
@property(retain, nonatomic) WCDataItem* parent;
@property(retain, nonatomic) WCMediaItem* mediaItem;
-(void)dealloc;
@end

@interface WCContentItem : NSObject <NSCoding> {
	NSString* title;
	NSString* desc;
	NSString* titlePattern;
	NSString* descPattern;
	NSString* linkUrl;
	NSString* linkUrl2;
	int type;
	int flag;
	NSString* username;
	NSString* nickname;
	int createtime;
	NSMutableArray* mediaList;
}
@property(retain, nonatomic) NSMutableArray* mediaList;
@property(assign, nonatomic) int createtime;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* username;
@property(assign, nonatomic) int flag;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* linkUrl2;
@property(retain, nonatomic) NSString* linkUrl;
@property(retain, nonatomic) NSString* descPattern;
@property(retain, nonatomic) NSString* titlePattern;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* title;
-(BOOL)isValid;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCDataItem : NSObject <NSCoding> {
	int cid;
	NSString* tid;
	int type;
	int flag;
	NSString* username;
	NSString* nickname;
	int createtime;
	NSString* sourceUrl;
	NSString* sourceUrl2;
	NSString* city;
	XXStruct_zYrK5D location;
	BOOL isPrivate;
	NSMutableArray* sharedGroupIDs;
	BOOL likeFlag;
	int likeCount;
	NSMutableArray* likeUsers;
	int commentCount;
	NSMutableArray* commentUsers;
	int withCount;
	NSMutableArray* withUsers;
	WCContentItem* contentObj;
	WCAppInfo* appInfo;
	NSString* publicUserName;
	NSString* sourceUserName;
	NSString* sourceNickName;
	NSString* contentDesc;
	NSString* contentDescPattern;
	int contentDescShowType;
	int contentDescScene;
	WCActionInfo* actionInfo;
	unsigned hash;
	SnsObject* snsObject;
	BOOL isBidirectionalFan;
	BOOL noChange;
	BOOL isRichText;
	NSMutableDictionary* extData;
	int uploadErrType;
	NSString* statisticsData;
}
@property(retain, nonatomic) NSMutableArray* sharedGroupIDs;
@property(assign, nonatomic) BOOL isPrivate;
@property(retain, nonatomic) NSString* statisticsData;
@property(assign, nonatomic) int uploadErrType;
@property(assign, nonatomic) BOOL isRichText;
@property(assign, nonatomic) BOOL noChange;
@property(retain, nonatomic) NSMutableArray* withUsers;
@property(assign, nonatomic) int withCount;
@property(retain, nonatomic) NSMutableArray* commentUsers;
@property(assign, nonatomic) int commentCount;
@property(retain, nonatomic) NSMutableArray* likeUsers;
@property(assign, nonatomic) int likeCount;
@property(assign, nonatomic) BOOL likeFlag;
@property(retain, nonatomic) WCActionInfo* actionInfo;
@property(assign, nonatomic) int contentDescScene;
@property(assign, nonatomic) int contentDescShowType;
@property(retain, nonatomic) NSString* contentDescPattern;
@property(retain, nonatomic) NSString* contentDesc;
@property(retain, nonatomic) NSString* sourceNickName;
@property(retain, nonatomic) NSString* sourceUserName;
@property(retain, nonatomic) NSString* publicUserName;
@property(retain, nonatomic) WCAppInfo* appInfo;
@property(retain, nonatomic) WCContentItem* contentObj;
@property(assign, nonatomic) BOOL isBidirectionalFan;
@property(assign, nonatomic) int createtime;
@property(assign, nonatomic) XXStruct_zYrK5D location;
@property(retain, nonatomic) NSMutableDictionary* extData;
@property(retain, nonatomic) SnsObject* snsObject;
@property(retain, nonatomic) NSString* sourceUrl2;
@property(retain, nonatomic) NSString* sourceUrl;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* username;
@property(assign, nonatomic) int flag;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* tid;
@property(assign, nonatomic) int cid;
+(id)fromUploadTask:(id)uploadTask;
+(id)fromServerObject:(id)serverObject;
+(id)fromBuffer:(id)buffer;
-(id).cxx_construct;
-(void)parseContentForNetWithDataItem:(id)dataItem;
-(void)parseContentForUI;
-(void)parsePattern;
-(void)loadPattern;
-(int)compareTime:(id)time;
-(BOOL)isValid;
-(void)mergeMessage:(id)message needParseContent:(BOOL)content;
-(void)mergeMessage:(id)message;
-(void)mergeLikeUsers:(id)users;
-(id)getMediaWraps;
-(BOOL)isRead;
-(void)setIsUploadFailed:(BOOL)failed;
-(BOOL)isUploadFailed;
-(BOOL)isUploading;
-(id)toBuffer;
-(void)setHash:(unsigned)hash;
-(unsigned)hash;
-(void)setSequence:(id)sequence;
-(void)setCreateTime:(unsigned long)time;
-(id)sequence;
-(int)itemType;
-(id)itemID;
-(void)setCity:(id)city;
-(id)city;
-(id)description;
-(id)descriptionForKeyPaths;
-(id)keyPaths;
-(int)compareDesc:(id)desc;
-(BOOL)isEqual:(id)equal;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface WCMessage : NSObject {
	NSString* msgID;
	NSString* objID;
	NSString* parentObjID;
	WCUserComment* comment;
	WCUserComment* refComment;
	BOOL hasRead;
}
@property(assign, nonatomic) BOOL hasRead;
@property(retain, nonatomic) WCUserComment* refComment;
@property(retain, nonatomic) WCUserComment* comment;
@property(retain, nonatomic) NSString* parentObjID;
@property(retain, nonatomic) NSString* objID;
@property(retain, nonatomic) NSString* msgID;
-(void)dealloc;
@end

@interface WCGroup : NSObject <NSCoding> {
	NSString* gid;
	NSString* name;
	NSMutableArray* memberList;
}
@property(retain, nonatomic) NSMutableArray* memberList;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* gid;
+(id)getMembersWithWCGroup:(id)wcgroup;
+(BOOL)isFixedGroup:(id)group;
-(id)description;
-(int)compare:(id)compare;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithSvrObject:(id)svrObject;
-(id)init;
@end

@interface WCServerConfig : NSObject {
	unsigned long postMentionLimit;
	unsigned long pasteLengthLimit;
}
@property(assign, nonatomic) unsigned long pasteLengthLimit;
@property(assign, nonatomic) unsigned long postMentionLimit;
-(void)dealloc;
-(id)init;
@end

@interface WCSetting : NSObject <NSCoding> {
	NSString* groupListMD5;
	NSString* groupRecommendListMD5;
	int postPrivacy;
	NSMutableArray* lastPostGroupIDs;
	unsigned long lastShareOptions;
	WCDataItem* lastDataItem;
	int unReadCount;
	unsigned long timelineShowFlag;
	int postMentionLimit;
	int pasteLengthLimit;
	BOOL hasShowPlainTextTip;
}
@property(assign, nonatomic) BOOL hasShowPlainTextTip;
@property(assign, nonatomic) int pasteLengthLimit;
@property(assign, nonatomic) int postMentionLimit;
@property(assign, nonatomic) unsigned long timelineShowFlag;
@property(assign, nonatomic) int unReadCount;
@property(retain, nonatomic) WCDataItem* lastDataItem;
@property(assign, nonatomic) unsigned long lastShareOptions;
@property(retain, nonatomic) NSMutableArray* lastPostGroupIDs;
@property(assign, nonatomic) int postPrivacy;
@property(retain, nonatomic) NSString* groupRecommendListMD5;
@property(retain, nonatomic) NSString* groupListMD5;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCUtil : NSObject {
}
+(BOOL)isExistGroupName:(id)name exceptGroup:(id)group;
+(void)saveWCSetting:(id)setting;
+(id)getWCSetting;
+(id)pathForWCSetting;
+(void)endNetworkEvent:(int)event event:(int)event2;
+(void)beginNetworkEvent:(int)event event:(int)event2;
+(id)mergeTimeline:(id)timeline Left:(id)left Right:(id)right Added:(id)added Changed:(id)changed Deleted:(id)deleted;
+(id)pathForSelfHomepageFPBackup;
+(id)pathForTimelineFPBackup;
+(id)pathForCurUserBGImg;
+(id)pathForBGImg:(id)bgimg;
+(id)pathForBGImgDir;
+(int)serverUrlTypeToLocalType:(int)localType;
+(int)localUrlTypeToServerType:(int)serverType;
+(int)serverActionTypeToLocalType:(int)localType;
+(int)localActionTypeToServerType:(int)serverType;
+(int)serverActionSceneToLocalScene:(int)localScene;
+(int)localActionSceneToServerScene:(int)serverScene;
+(int)serverContentDescSceneToLocalType:(int)localType;
+(int)localContentDescSceneToServerType:(int)serverType;
+(int)serverContentDescShowTypeToLocalType:(int)localType;
+(int)localContentDescShowTypeToServerType:(int)serverType;
+(int)serverContentTypeToLocalType:(int)localType;
+(int)localContentTypeToServerType:(int)serverType;
+(int)serverMediaSubTypeToLocalType:(int)localType serverSubType:(int)type;
+(int)localMediaSubTypeToServerType:(int)serverType localSubType:(int)type;
+(int)serverMediaTypeToLocalType:(int)localType;
+(int)localMediaTypeToServerType:(int)serverType;
+(id)getUserWCSucceedItemPath;
+(id)getUserWCFailedQueuePath;
+(id)uploadPathForUploadMedia:(id)uploadMedia;
+(id)getWCDBPath;
+(id)getUserWCMediaUploadDir;
+(id)getUserWCMediaDownloadDir;
+(id)getUserWCMediaDir;
+(id)getUserWCDBRootDir;
+(id)getUserWCRootDir;
@end

@interface WCXmlParser : NSObject {
}
+(BOOL)SetBGStorage:(id)storage ByXml:(id)xml preferLang:(id)lang;
+(id)WCBGStorageToXML:(id)xml;
+(BOOL)SetDataItem:(id)item ByXml:(id)xml;
+(id)albumListFromXmlNode:(XmlReaderNode_t*)xmlNode;
+(id)bgAlbumFromXmlNode:(XmlReaderNode_t*)xmlNode;
+(id)bgAuthorFromXmlNode:(XmlReaderNode_t*)xmlNode;
+(id)bgGroupListFromXmlNode:(XmlReaderNode_t*)xmlNode;
+(id)bgGroupFromXmlNode:(XmlReaderNode_t*)xmlNode;
+(id)mediaListFromXmlNode:(XmlReaderNode_t*)xmlNode;
+(id)mediaItemFromXmlNode:(XmlReaderNode_t*)xmlNode;
+(id)urlFromXmlNode:(XmlReaderNode_t*)xmlNode;
+(void)setActionInfo:(id)info byXmlNode:(XmlReaderNode_t*)node;
+(void)setAppInfo:(id)info byXmlNode:(XmlReaderNode_t*)node;
+(id)xmlOfActionInfo:(id)actionInfo;
+(id)xmlOfAppInfo:(id)appInfo;
+(void)setWCContentItem:(id)item byXmlNode:(XmlReaderNode_t*)node;
+(id)WCUploadTaskToXML:(id)xml;
@end

@interface WCDownloadEventHandler : ProtobufEventHandler {
}
-(void)OnProtocolReturn:(id)aReturn shouldContinue:(bool*)aContinue;
-(void)OnProtocolStart:(id)start shouldContinue:(bool*)aContinue;
@end

@interface DownloadMediaWrap : NSObject {
	WCMediaItem* mediaItem;
	int downloadType;
	NSString* downloadID;
	int downloadSource;
	BOOL isDownloading;
	UIImage* resultImage;
}
@property(retain, nonatomic) UIImage* resultImage;
@property(assign, nonatomic) BOOL isDownloading;
@property(readonly, assign, nonatomic) int downloadSource;
@property(readonly, assign, nonatomic) NSString* downloadID;
@property(assign, nonatomic) int downloadType;
@property(retain, nonatomic) WCMediaItem* mediaItem;
+(id)getDownloadID:(id)anId downloadType:(int)type;
-(void)dealloc;
-(id)initWithMediaItem:(id)mediaItem downloadType:(int)type;
@end

@interface WCDownloadMgr : MMObject <PBMessageObserverDelegate, CNetworkStatusExt> {
	int m_currScene;
	NSMutableSet* m_cancelDownloadMedias;
	NSMutableSet* m_needNotifyMedias;
	OrderedDictionary* m_dataDownloadQueue;
	int m_dataCurrentDownloadingCount;
	int m_dataMaxDownloadCount;
	OrderedDictionary* m_previewDownloadQueue;
	int m_previewCurrentDownloadingCount;
	int m_previewMaxDownloadCount;
	MMDelegateProxy<WCDownloadMgrDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCDownloadMgrDelegate>* m_delegate;
-(void)ReachabilityChange:(unsigned long)change;
-(void)onReveicePartFromURL:(id)url;
-(void)ReveicePartFromURL:(id)url;
-(void)MessageReturnCDN:(id)cdn Event:(unsigned long)event;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)doDownloadMediaCDN:(id)cdn;
-(void)doDownloadMedia:(id)media;
-(void)tryStartNextDownloadTask:(int)task;
-(void)setDownloadScene:(int)scene;
-(void)pullDownloadMediaToFront:(id)front downloadType:(int)type;
-(void)setPreviewMaxDownloadCountWifi:(int)wifi Edge:(int)edge;
-(void)setDataMaxDownloadCountWifi:(int)wifi Edge:(int)edge;
-(void)cancelDownloadMedia:(id)media downloadType:(int)type;
-(void)forceDownloadMediaWithProcessNotify:(id)processNotify downloadType:(int)type;
-(void)forceDownloadMedia:(id)media downloadType:(int)type;
-(void)downloadMediaWithProcessNotify:(id)processNotify downloadType:(int)type;
-(void)downloadMedia:(id)media downloadType:(int)type;
-(void)addDownloadTask:(id)task downloadType:(int)type withNotify:(BOOL)notify;
-(id)getDownloadQueue:(int)queue;
-(void)dealloc;
-(id)init;
@end

@interface WCGroupMgr : MMObject <PBMessageObserverDelegate> {
	BOOL m_bMemCacheNeedReload;
	NSMutableDictionary* m_groups;
	NSMutableDictionary* m_recommends;
	NSMutableDictionary* m_readRecommends;
	MMDelegateProxy<WCGroupMgrExt>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCGroupMgrExt>* m_delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onSetMemberToGroupsReturn:(id)groupsReturn Event:(unsigned long)event;
-(void)onGroupListReturn:(id)aReturn Event:(unsigned long)event;
-(void)onGroupMemberOpReturn:(id)aReturn Event:(unsigned long)event;
-(void)onGroupOpReturn:(id)aReturn Event:(unsigned long)event;
-(void)doGroupListOp:(unsigned long)op withMD5:(id)md5;
-(void)doGroupMemberOp:(unsigned long)op onGroup:(id)group withGroupName:(id)groupName withMemberList:(id)memberList;
-(void)doGroupOp:(unsigned long)op onGroup:(id)group withGroupName:(id)groupName;
-(BOOL)tryFuzzDefaultGroup;
-(id)getGroupsWithMember:(id)member;
-(void)setMember:(id)member toGroups:(id)groups;
-(void)modGroup:(id)group newName:(id)name members:(id)members;
-(void)removeMembers:(id)members fromGroup:(id)group;
-(void)addMembers:(id)members toGroup:(id)group;
-(void)modifyGroupName:(id)name newName:(id)name2;
-(void)deleteGroup:(id)group;
-(void)createGroup:(id)group withGroupName:(id)groupName;
-(void)updateAllRecommends;
-(void)setRecommendReadForGroup:(id)group;
-(id)getUnReadRecommendsForGroup:(id)group;
-(id)getReadRecommendsForGroup:(id)group;
-(void)updateAllGroups;
-(id)getGroupByID:(id)anId;
-(id)getAllGroups;
-(void)dealloc;
-(id)init;
-(void)clearMD5;
-(void)clearMemoryCache;
-(void)saveData;
-(void)tryLoadData;
-(id)pathForReadRecommendData;
-(id)pathForRecommendData;
-(id)pathForGroupData;
@end

@interface WCHomepageDataProvider_Sns : MMObject <PBMessageObserverDelegate> {
	NSString* username;
	NSString* fpHash;
	BOOL isWorking;
	MMDelegateProxy<WCDataProviderDelegate>* delegate;
}
@property(retain, nonatomic) NSString* username;
@property(assign, nonatomic) MMDelegateProxy<WCDataProviderDelegate>* delegate;
-(void)forceUpdateWithReferID:(id)referID;
-(void)updateHeadWithSource:(int)source;
-(void)updateWithReferID:(id)referID;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)responseForSnsUserPageResponse:(id)snsUserPageResponse Event:(unsigned long)event;
-(void)saveResponseListForFutureList:(id)futureList;
-(void)internalSaveResponseListForFutureList:(id)futureList;
-(void)requestForSnsHomepageRequest:(id)snsHomepageRequest source:(int)source;
-(id)converListToList:(id)list;
-(void)dealloc;
@end

@interface EmoticonBoardView : MMUIView <IMMLanguageMgrExt, MMKernelExt, IEmoticonPackageMgrExt, EmoticonRecommendMgrExt> {
	UIView* _bottomBar;
	MMUIScrollView* _scrollTabBar;
	UIButton* _sendButton;
	UIView* _sendButtonBackgroundView;
	UIImageView* _newBadge;
	NSArray* _viewPool;
	NSArray* _emoticonTabItems;
	int _currentIndex;
	BOOL _isSingleTab;
	UIView* _currentView;
	MMDelegateProxy<EmoticonBoardViewDelegate>* m_delegate;
	NSString* _finishButtonTitle;
}
@property(assign, nonatomic) MMDelegateProxy<EmoticonBoardViewDelegate>* m_delegate;
@property(retain, nonatomic) UIView* currentView;
@property(retain, nonatomic) NSString* finishButtonTitle;
@property(assign, nonatomic) BOOL isSingleTab;
+(void)unRegisterInstanceDelegate;
+(void)destroyInstance;
+(id)sharedInstance;
-(void)onPreQuit;
-(void)onLanguageChange;
-(void)OnEmoticonRecommendNewStateChanged:(BOOL)changed;
-(void)OnUpdateEmoticonPackageList;
-(void)onTopBarFrameChanged;
-(void)OnSend:(id)send;
-(void)OnShowStore;
-(void)OnTabButtonTapped:(id)tapped;
-(void)setEmoticonAccessibility:(BOOL)accessibility;
-(BOOL)selectTabAtIndex:(int)index isForceUpdate:(BOOL)update;
-(void)OnReloadBottomBar;
-(void)updateNew:(BOOL)aNew;
-(void)UnRegisterDelegate;
-(void)RegisterDelegate:(id)delegate;
-(void)reloadTabItems;
-(id)GetCurrentViewController;
-(id)getEmoticonTabItems;
-(id)getStickerPackages;
-(id)getEmoticonViewAtIndex:(int)index;
-(void)SetCanSend:(BOOL)send;
-(BOOL)isSticker;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)initView;
-(void)initData;
@end

@interface WCHomepageMgr : MMObject <WCDataProviderDelegate> {
	NSString* m_username;
	MMDelegateProxy<WCHomepageDelegate>* m_delegate;
	NSMutableArray* m_cache;
	MyWCDB* m_database;
	WCHomepageDataProvider_Sns* m_dataProvider;
	int m_refCount;
}
@property(retain, nonatomic) NSString* m_username;
@property(retain, nonatomic) WCHomepageDataProvider_Sns* m_dataProvider;
@property(retain, nonatomic) MyWCDB* m_database;
@property(retain, nonatomic) NSMutableArray* m_cache;
@property(assign, nonatomic) MMDelegateProxy<WCHomepageDelegate>* m_delegate;
+(id)homepageMgrForUser:(id)user;
-(void)onServiceMemoryWarning;
-(id)findDataItemInCacheByItemID:(id)cacheByItemID;
-(void)modifyCache:(id)cache;
-(void)deleteDataItem:(id)item notify:(BOOL)notify;
-(void)modifyDataItem:(id)item notify:(BOOL)notify;
-(void)addDataItem:(id)item notify:(BOOL)notify;
-(void)onReturnServerConfig:(id)config;
-(void)onReturnBGUserInfo:(id)info;
-(void)onNoMoreDataWithRet:(int)ret;
-(void)onTotalCountChanged:(int)changed;
-(void)onReturnIsAllData:(id)data;
-(void)onDataUpdated:(id)updated andData:(id)data withChangedTime:(unsigned long)changedTime;
-(id)getHomepageData;
-(BOOL)updateTail;
-(BOOL)updateHeadWithSource:(int)source;
-(BOOL)updateHead;
-(void)endHomepage;
-(void)beginHomepage;
-(id)dataProvider;
-(void)dealloc;
-(id)init;
@end

@interface WCBGImgLogic : MMObject <WCFacadeExt> {
	MMDelegateProxy<WCBGImgLogicNotity>* m_delFacade;
	WCMediaItem* m_lastUploadItem;
	NSMutableDictionary* m_bgUserInfoMap;
	NSString* m_lastDownloadMediaID;
}
@property(assign, nonatomic) MMDelegateProxy<WCBGImgLogicNotity>* m_delFacade;
-(BOOL)setLocalBGImgForUser:(id)user BGUserInfo:(id)info;
-(void)setBGImgLikedForUser:(id)user source:(int)source;
-(BOOL)isBGImgLikedForUser:(id)user;
-(BOOL)hasBGImg:(id)img;
-(void)SetBGImgByImg:(id)img;
-(void)SetBGImgByMedia:(id)media;
-(void)onDownloadFinish:(id)finish downloadType:(int)type;
-(id)backgroundImageByContact:(id)contact;
-(id)tryLoadSelfWCBackground;
-(void)trySaveSelfWCBackground:(id)background;
-(void)saveSelfWCBackground:(id)background;
-(id)hashForImageUrl:(id)imageUrl;
-(id)bgUserInfoMap;
-(void)dealloc;
-(id)init;
@end

@interface WCBGRecommendMgr : MMObject <MMPackageDownloadMgrExt> {
	MMDelegateProxy<WCBGRecommendMgrDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCBGRecommendMgrDelegate>* m_delegate;
-(void)onPackageListUpdated:(id)updated;
-(void)updateBGStorage;
-(id)getBGStorage;
-(id)getPackageDataOfBGStorage;
-(id)bgStorageWithDataList:(id)dataList;
-(int)packageKey;
-(void)dealloc;
-(id)init;
@end

@interface WCImageCache : MMService <MMService> {
	NSMutableDictionary* m_WCImagesOfType;
}
+(BOOL)couldCacheImage:(id)image;
-(BOOL)onServiceMemoryWarning;
-(void)clearAllCaches;
-(void)setImage:(id)image forMedia:(id)media ofType:(int)type;
-(id)getImage:(id)image ofType:(int)type;
-(void)dealloc;
-(id)init;
@end

@interface WCLogicMgr : MMObject <PBMessageObserverDelegate> {
	MMDelegateProxy<WCLogicMgrDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCLogicMgrDelegate>* m_delegate;
-(BOOL)unLikeDataItem:(id)item;
-(BOOL)unCommentDataItem:(id)item commentID:(id)anId;
-(void)updateDataItemDetail:(id)detail;
-(BOOL)responseForSnsObjectDetailResponse:(id)snsObjectDetailResponse Event:(unsigned long)event;
-(void)requestForSnsObjectDetailRequest:(id)snsObjectDetailRequest;
-(void)exposeDataItem:(id)item;
-(void)requestForExposeRequest:(id)exposeRequest;
-(BOOL)responseForExposeResponse:(id)exposeResponse Event:(unsigned long)event;
-(void)deleteDataItem:(id)item;
-(void)setDataItemPublic:(id)aPublic;
-(void)setDataItemPrivate:(id)aPrivate;
-(void)onOperation:(id)operation Finished:(int)finished;
-(BOOL)responseForSnsObjectOpResponse:(id)snsObjectOpResponse Event:(unsigned long)event;
-(BOOL)requestForSnsObjectOpRequest:(id)snsObjectOpRequest;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)dealloc;
-(id)init;
@end

@interface WCOpLog : NSObject {
	CMMDB* _db;
	NSRecursiveLock* _lock;
}
-(void)dealloc;
-(BOOL)modSnsBlackList:(id)list modType:(int)type syncNow:(BOOL)now;
-(BOOL)changeStrangerRight:(BOOL)right;
-(BOOL)insertOpLog:(unsigned long)log OpLog:(id)log2;
-(void)initDB:(id)db withLock:(id)lock;
-(id)init;
@end

@interface WCPattern : NSObject <NSCoding> {
	WCDataItem* dataItem;
	double lastAccessTime;
}
@property(assign, nonatomic) double lastAccessTime;
@property(retain, nonatomic) WCDataItem* dataItem;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCPatternCacheMgr : NSObject {
	NSMutableDictionary* m_cache;
	BOOL m_needWriteBack;
	BOOL m_needLoadData;
}
-(void)tryGetWCDataItemPattern:(id)pattern;
-(void)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)dealloc;
-(id)init;
-(void)trySaveData;
-(void)tryLoadData;
-(id)pathForData;
@end

@interface WCTimelineDataProvider : MMObject <PBMessageObserverDelegate> {
	NSString* fpHash;
	BOOL isWorking;
	MMDelegateProxy<WCDataProviderDelegate>* delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCDataProviderDelegate>* delegate;
-(void)updateChangedItemsWithReferID:(id)referID bottomID:(id)anId minChangedTime:(unsigned long)time;
-(void)updateWithReferID:(id)referID;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)responseForSnsTimeLineResponse:(id)snsTimeLineResponse Event:(unsigned long)event;
-(void)saveResponseListForFutureList:(id)futureList;
-(void)internalSaveResponseListForFutureList:(id)futureList;
-(void)requestForSnsTimeLineRequest:(id)snsTimeLineRequest minID:(id)anId lastRequestTime:(unsigned long)time;
-(id)converListToList:(id)list;
-(void)dealloc;
-(void)SafeMD5;
-(id)init;
@end

@interface WCTimelineMgr : MMObject <WCDataProviderDelegate> {
	MMDelegateProxy<WCTimelineDelegate>* m_delegate;
	NSMutableArray* m_cache;
	MyWCDB* m_database;
	WCTimelineDataProvider* m_dataProvider;
	BOOL isNoMoreData;
	unsigned long m_showFlag;
	BOOL m_needWriteBackDataItemUpdateTime;
	BOOL m_needLoadDataItemUpdateTime;
	NSMutableDictionary* m_dataUpdateTime;
}
@property(assign, nonatomic) unsigned long m_showFlag;
@property(assign, nonatomic) BOOL isNoMoreData;
@property(retain, nonatomic) WCTimelineDataProvider* m_dataProvider;
@property(retain, nonatomic) MyWCDB* m_database;
@property(retain, nonatomic) NSMutableArray* m_cache;
@property(assign, nonatomic) MMDelegateProxy<WCTimelineDelegate>* m_delegate;
-(void)setChangedTimeForDatas:(id)datas withChangedTime:(unsigned long)changedTime;
-(unsigned long)getMinChangedTimeBetween:(id)between andMinID:(id)anId;
-(void)trySaveDataItemUpdateTime;
-(void)tryDeleteDataItemUpdateTime;
-(void)tryLoadDataItemUpdateTime;
-(id)pathForDataItemUpdateTime;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceMemoryWarning;
-(id)findDataItemInCacheByItemID:(id)cacheByItemID;
-(void)modifyCache:(id)cache;
-(void)deleteDataItem:(id)item notify:(BOOL)notify;
-(void)modifyDataItem:(id)item notify:(BOOL)notify;
-(void)addDataItem:(id)item notify:(BOOL)notify;
-(void)onReturnServerConfig:(id)config;
-(void)onReturnShowFlag:(unsigned long)flag;
-(void)onNoMoreDataWithRet:(int)ret;
-(void)onReturnIsAllData:(id)data;
-(void)onDataUpdated:(id)updated withChangedTime:(unsigned long)changedTime;
-(void)onDataUpdated:(id)updated andData:(id)data withChangedTime:(unsigned long)changedTime;
-(BOOL)updateDataTail:(id)tail;
-(BOOL)updateDataHead:(id)head;
-(BOOL)updateData:(id)data WithReferID:(id)referID;
-(id)getDataItem:(id)item OfIndex:(int)index;
-(int)countOfDataItem:(id)dataItem;
-(void)endSession;
-(void)beginSession;
-(void)dealloc;
-(id)init;
@end

@interface WCDataUploader : WCUploader {
	int currentPos;
	int uploadResult;
	int uploadErrType;
	WCUploadTask* m_task;
	MMDelegateProxy<WCDataUploaderDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCDataUploaderDelegate>* m_delegate;
@property(retain, nonatomic) WCUploadTask* m_task;
-(void)onResponse:(id)response Event:(unsigned long)event;
-(void)setFinished;
-(BOOL)onSetRequest:(id)request;
-(id)xmlForUploadTask:(id)uploadTask;
-(void)dealloc;
@end

@interface WCMediaUploader : WCUploader {
	int currentPos;
	int uploadResult;
	int uploadErrType;
	WCUploadMedia* m_media;
	MMDelegateProxy<WCMediaUploaderDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCMediaUploaderDelegate>* m_delegate;
@property(retain, nonatomic) WCUploadMedia* m_media;
-(void)onResponse:(id)response Event:(unsigned long)event;
-(BOOL)onSetRequest:(id)request;
-(void)setFinished;
-(void)tryNextRequest;
-(void)dealloc;
-(id)init;
@end

@interface WCTaskUploader : MMObject <WCMediaUploaderDelegate, WCDataUploaderDelegate> {
	WCUploadTask* _uploadTask;
	WCUploader* _uploader;
	NSMutableSet* _runnedSubTask;
	int _runningState;
	MMDelegateProxy<WCTaskUploaderDelegate>* _delegate;
}
-(void)onDataUploadFinished:(id)finished uploadResult:(int)result uploadErrType:(int)type;
-(void)onMediaUploadFinished:(id)finished uploadResult:(int)result uploadErrType:(int)type;
-(void)dealloc;
-(void)run;
-(id)initWithTask:(id)task withDelegate:(id)delegate;
-(void)tryStartNextTask;
-(void)handleError;
@end

@interface WCUploadMedia : NSObject {
	int type;
	int subType;
	NSData* buffer;
	NSString* clientID;
	int failCount;
	BOOL isFinished;
	WCUrl* bufferUrl;
	WCUrl* lowBandUrl;
	WCUrl* bufferDataUrl;
	WCUrl* lowBandDataUrl;
	NSMutableArray* thumbUrlsList;
	NSString* serverID;
	int outType;
	int imageFilterID;
	CGSize imgSize;
	BOOL isSyncToWeibo;
	BOOL isSyncToFacebook;
	BOOL isSyncToTwitter;
	BOOL isSyncToQZone;
	NSString* title;
	NSString* desc;
	BOOL isThumbForPrevMeida;
	int imageFrom;
	NSString* twitterOAuthToken;
	NSString* twitterOAuthTokenSecret;
	NSString* userData;
}
@property(retain, nonatomic) NSString* userData;
@property(retain, nonatomic) NSString* twitterOAuthTokenSecret;
@property(retain, nonatomic) NSString* twitterOAuthToken;
@property(assign, nonatomic) int imageFrom;
@property(assign, nonatomic) BOOL isThumbForPrevMeida;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* desc;
@property(assign, nonatomic) BOOL isSyncToQZone;
@property(assign, nonatomic) BOOL isSyncToTwitter;
@property(assign, nonatomic) BOOL isSyncToFacebook;
@property(assign, nonatomic) BOOL isSyncToWeibo;
@property(assign, nonatomic) CGSize imgSize;
@property(assign, nonatomic) int outType;
@property(retain, nonatomic) NSString* serverID;
@property(retain, nonatomic) NSMutableArray* thumbUrlsList;
@property(retain, nonatomic) WCUrl* lowBandDataUrl;
@property(retain, nonatomic) WCUrl* bufferDataUrl;
@property(retain, nonatomic) WCUrl* lowBandUrl;
@property(retain, nonatomic) WCUrl* bufferUrl;
@property(assign, nonatomic) BOOL isFinished;
@property(assign, nonatomic) int imageFilterID;
@property(retain, nonatomic) NSString* clientID;
@property(retain, nonatomic) NSData* buffer;
@property(assign, nonatomic) int subType;
@property(assign, nonatomic) int type;
-(id).cxx_construct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)removeMediaBuffer;
-(void)saveMediaBuffer;
-(void)clearMediaBuffer;
-(id)mediaBuffer;
-(id)getTypeName;
-(void)dealloc;
@end

@interface WCUploadTask : NSObject <NSCoding> {
	NSString* serverID;
	NSString* clientID;
	int type;
	BOOL isPrivate;
	NSMutableArray* sharedGroupIDs;
	BOOL isSyncToWeibo;
	BOOL isSyncToFacebook;
	BOOL isSyncToTwitter;
	BOOL isSyncToQZone;
	NSString* statisticsData;
	XXStruct_zYrK5D location;
	NSString* city;
	float scale;
	NSString* linkUrl;
	NSString* title;
	NSString* desc;
	NSString* contentDesc;
	int contentDescShowType;
	int contentDescScene;
	WCAppInfo* appInfo;
	WCActionInfo* actionInfo;
	NSString* sourceUserName;
	NSString* sourceNickName;
	NSMutableArray* withUserList;
	NSMutableArray* mediaList;
	SnsObject* snsObj;
	WCDataItem* dataItem;
	NSDate* createTime;
	int uploadResult;
	int BGImgSetType;
	BOOL isUploadFailed;
	int postSource;
	NSString* twitterOAuthToken;
	NSString* twitterOAuthTokenSecret;
}
@property(retain, nonatomic) WCActionInfo* actionInfo;
@property(retain, nonatomic) NSString* statisticsData;
@property(retain, nonatomic) NSString* twitterOAuthTokenSecret;
@property(retain, nonatomic) NSString* twitterOAuthToken;
@property(assign, nonatomic) int postSource;
@property(assign, nonatomic) BOOL isUploadFailed;
@property(assign, nonatomic) int BGImgSetType;
@property(assign, nonatomic) int contentDescScene;
@property(assign, nonatomic) int contentDescShowType;
@property(retain, nonatomic) NSString* contentDesc;
@property(retain, nonatomic) NSString* sourceNickName;
@property(retain, nonatomic) NSString* sourceUserName;
@property(retain, nonatomic) WCAppInfo* appInfo;
@property(retain, nonatomic) NSString* linkUrl;
@property(retain, nonatomic) WCDataItem* dataItem;
@property(assign, nonatomic) int uploadResult;
@property(retain, nonatomic) NSDate* createTime;
@property(retain, nonatomic) SnsObject* snsObj;
@property(retain, nonatomic) NSMutableArray* mediaList;
@property(retain, nonatomic) NSMutableArray* withUserList;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) float scale;
@property(retain, nonatomic) NSString* city;
@property(assign, nonatomic) XXStruct_zYrK5D location;
@property(assign, nonatomic) BOOL isSyncToQZone;
@property(assign, nonatomic) BOOL isSyncToTwitter;
@property(assign, nonatomic) BOOL isSyncToFacebook;
@property(assign, nonatomic) BOOL isSyncToWeibo;
@property(retain, nonatomic) NSMutableArray* sharedGroupIDs;
@property(assign, nonatomic) BOOL isPrivate;
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* clientID;
@property(retain, nonatomic) NSString* serverID;
-(id).cxx_construct;
-(id)description;
-(void)setUploadFailedStatus:(BOOL)status;
-(BOOL)isLocationValide;
-(void)addThumbForPrevMedia:(id)prevMedia;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCUploader : MMObject <PBMessageObserverDelegate> {
	int eventID;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onResponse:(id)response Event:(unsigned long)event;
-(BOOL)onSetRequest:(id)request;
-(void)setFinished;
-(void)run;
-(BOOL)startRequest;
-(void)dealloc;
@end

@interface WCUploadMgr : MMObject <WCTaskUploaderDelegate, INetworkStatusMgrExt> {
	FIFOFileQueue* m_taskQueue;
	NSMutableArray* m_failedQueue;
	NSMutableArray* m_succeedItems;
	MMDelegateProxy<WCUploadMgrDelegate>* m_delegate;
	BOOL m_taskRunning;
	WCTaskUploader* m_taskUploader;
}
@property(assign, nonatomic) MMDelegateProxy<WCUploadMgrDelegate>* m_delegate;
-(void)onNetworkStatusChange:(unsigned long)change;
-(void)onUploadFinished:(id)finished;
-(void)onMediaUploadFinished:(id)finished task:(id)task;
-(void)saveCurrentTask;
-(void)notifyUploadFailStatusChanged:(id)changed;
-(void)notifyUploadRestart:(id)restart;
-(void)notifyUploadFailed:(id)failed;
-(void)notifyUploadFinished:(id)finished;
-(void)addUploadTask:(id)task;
-(void)deleteUploadTaskWithDataIem:(id)dataIem;
-(void)restartUploadTaskWithDataIem:(id)dataIem;
-(void)TryStartTask;
-(void)setTaskFail:(id)fail;
-(void)deleteHomepageSucceedUploads:(id)uploads;
-(void)deleteTimelineSucceedUploads:(id)uploads;
-(void)doDeleteSucceedUploads:(id)uploads from:(id)from;
-(id)getHomepageSucceedUploads;
-(id)getTimelineSucceedUploads;
-(void)addSucceedUpload:(id)upload;
-(id)getFailedUploads;
-(id)getInQueueUploads;
-(void)cleanUpForTask:(id)task;
-(void)setClientIDForMedia:(id)media;
-(BOOL)saveSucceedItems;
-(BOOL)loadSucceedItems;
-(BOOL)saveFailedQueue;
-(BOOL)loadFailedQueue;
-(void)dealloc;
-(id)init;
@end

@interface MyWCDB : CBaseDB {
}
-(id)getRowsDataByItemID:(id)anId InTable:(id)table KeyCol:(id)col;
-(id)getDataItemsByIds:(id)ids;
-(id)tryGetDataItemByItemID:(id)anId;
-(id)getOwnerByItemID:(id)anId;
-(void)setBGImgLiked:(id)liked username:(id)username;
-(BOOL)isBGImgLiked:(id)liked username:(id)username;
-(BOOL)setHomepageTotalCount:(int)count username:(id)username;
-(int)getHomepageTotalCount:(id)count;
-(void)clearAllWCData;
-(BOOL)updateAllCacheWithDataItem:(id)dataItem useTransaction:(BOOL)transaction;
-(id)getMaxID;
-(BOOL)deleteRowInWCIndexForUser:(id)user ByItemID:(id)anId;
-(BOOL)deleteRowInTimelineByItemID:(id)timelineByItemID;
-(BOOL)deleteDataItemFromTable:(id)table ByItemID:(id)anId;
-(id)getWCIndexDataItemListForUser:(id)user withItemID:(id)itemID;
-(id)getWCIndexDataItemListForUser:(id)user AfterItemID:(id)anId andMaxCount:(int)count;
-(id)getWCTimeLineDataItemWithItemID:(id)itemID;
-(id)getWCTimeLineDataItemDictionaryByArrayItemID:(id)anId;
-(id)getDataItemDictionaryFromTable:(id)table KeyCol:(id)col arrayItemID:(id)anId;
-(id)getLatestDataItem:(id)item;
-(id)getWCTimeLineDataItemListAfterItemID:(id)anId andMaxCount:(int)count;
-(id)getDataItemListFromTable:(id)table KeyCol:(id)col afterItemID:(id)anId limit:(unsigned long)limit;
-(BOOL)deleteAllIndexDataForUser:(id)user;
-(BOOL)deleteAllTimelineTableData;
-(BOOL)updateWCIndexForUser:(id)user WithDatas:(id)datas AfterItemID:(id)anId;
-(BOOL)updateWCTimeLineTableWithDatas:(id)datas AfterItemID:(id)anId;
-(BOOL)updateWCTimeLineTableWithChangedDatas:(id)changedDatas;
-(BOOL)updateTable:(id)table WithDatas:(id)datas keyCol:(id)col AfterItemID:(id)anId;
-(id)getRowDataByItemID:(id)anId InTable:(id)table KeyCol:(id)col;
-(id)getMaxGroupHintInTable:(id)table Where:(id)where;
-(id)getStrangerMessagesOfItem:(id)item partner:(id)partner;
-(id)getStrangerMessagesByCondition:(id)condition andGroupBy:(id)by andOrder:(id)order andLimit:(unsigned long)limit;
-(BOOL)addStrangerMessage:(id)message toItem:(id)item;
-(BOOL)deleteAllMessages;
-(BOOL)deleteMessage:(id)message;
-(BOOL)setAllWCMessagesRead;
-(BOOL)setWCMessageListRead:(id)read;
-(BOOL)setWCMessageRead:(id)read;
-(BOOL)addNewWCMessage:(id)message;
-(id)getWCMessagesFrom:(id)from maxCount:(unsigned long)count;
-(id)getUnreadWCMessages;
-(unsigned long)getUnReadMessageCount;
-(id)getAllWCMessages;
-(id)getWCMessage:(id)message;
-(id)getLatestMessage;
-(id)getWCMessagesByCondition:(id)condition andGroupBy:(id)by andOrder:(id)order andLimit:(unsigned long)limit;
-(BOOL)deleteAllWCDataItem;
-(BOOL)deleteWCDataItemByItemID:(id)anId;
-(BOOL)setWCDataItem:(id)item forItemID:(id)itemID;
-(id)getWCDataItemByItemID:(id)anId;
-(void)RegisterTypeOfCol;
-(BOOL)UpdateRowsInTable:(id)table ColValue:(id)value Where:(id)where;
-(BOOL)GetRowsInTable:(id)table QryCol:(id)col RetCol:(id)col3 withWhere:(id)where groupBy:(id)by orderBy:(id)by6 limit:(unsigned long)limit;
-(BOOL)DelRowsInTable:(id)table Where:(id)where;
-(BOOL)GetRowsInStrangerMessageQryCol:(id)strangerMessageQryCol RetCol:(id)col withWhere:(id)where groupBy:(id)by orderBy:(id)by5 limit:(unsigned long)limit;
-(BOOL)InsertNewRowInStrangerMessage:(id)strangerMessage;
-(BOOL)DelAllMyWCMessage;
-(BOOL)DelRowInMyWCMessage:(id)myWCMessage;
-(BOOL)GetRowsInMyWCMessageQryCol:(id)myWCMessageQryCol RetCol:(id)col withWhere:(id)where groupBy:(id)by orderBy:(id)by5 limit:(unsigned long)limit;
-(BOOL)SetColsValueInMyWCMessageWhere:(id)myWCMessageWhere ColValue:(id)value;
-(BOOL)SetColValueInMyWCMessage:(id)myWCMessage ColValue:(id)value;
-(void)ResetWCAttrTable;
-(BOOL)DelRowInMyWCAttr:(id)myWCAttr;
-(BOOL)GetColValueInMyWCAttr:(id)myWCAttr QryCol:(id)col RetCol:(id)col3;
-(BOOL)InsertOrUpdateRowInMyWCAttr:(id)myWCAttr ColValue:(id)value;
-(BOOL)CreateWCIndexTableForUser:(id)user;
-(BOOL)CreateWCTimeLineTable;
-(BOOL)CreateStrangerMessageTable;
-(BOOL)CreateMyWCMessageTable;
-(BOOL)CreateMyWCAttrTable;
-(id)WCIndexTableNameForUser:(id)user;
-(BOOL)initDB;
-(void)reloadDatabase;
-(void)dealloc;
-(id)init;
@end

@interface WCFacade : MMService <MMService, WCBGImgLogicNotity, WCDownloadMgrDelegate, WCTimelineDelegate, WCCommentUploadMgrDelegate, WCUploadMgrDelegate, WCNotificationCenterMgrDelegate, WCHomepageDelegate, WCLogicMgrDelegate, WCFacadeExt, WCBGRecommendMgrDelegate, WCGroupMgrExt> {
	MyWCDB* m_database;
	NSMutableArray* m_timelineWithLocalDatas;
	WCUploadMgr* m_uploadMgr;
	WCBGImgLogic* m_bgImgLogic;
	WCTimelineMgr* m_timelineMgr;
	WCDownloadMgr* m_downloadMgr;
	WCCommentUploadMgr* m_commentUploadMgr;
	WCNotificationCenterMgr* m_messageMgr;
	WCLogicMgr* m_logicMgr;
	WCBGRecommendMgr* m_bgMaster;
	WCStrangerCommentMgr* m_strangerCommentMgr;
	WCGroupMgr* m_groupMgr;
	WCPatternCacheMgr* m_patternCacheMgr;
	WCInputTextCacheMgr* m_inputTextCacheMgr;
	NSMutableDictionary* m_homepageMgrDic;
	NSMutableDictionary* m_networkEventDic;
	NSMutableSet* m_deletedItemSet;
}
-(id)getDataItemsByIds:(id)ids;
-(void)onWCGroupModMemberReturn:(BOOL)aReturn group:(id)group;
-(void)onWCGroupSetMemberToGroupsReturn:(BOOL)groupsReturn username:(id)username groupIDs:(id)ids;
-(void)onWCGroupRemoveMemberReturn:(BOOL)aReturn group:(id)group;
-(void)onWCGroupAddMemberReturn:(BOOL)aReturn group:(id)group;
-(void)onWCDeleteGroupReturn:(BOOL)aReturn groupID:(id)anId;
-(void)onWCChangeGroupNameReturn:(BOOL)aReturn groupID:(id)anId;
-(void)onWCCreateGroupReturn:(BOOL)aReturn group:(id)group;
-(void)onWCGroupUpdatedReturn:(BOOL)aReturn;
-(void)onWCGroupRecommendUpdated;
-(void)onWCGroupUpdated;
-(void)setPostPrivacy:(int)privacy withGroupIDs:(id)groupIDs;
-(void)setPostPrivacy:(int)privacy;
-(id)getLastPostGroups;
-(int)getPostPrivacy;
-(id)getGroupsWithMember:(id)member;
-(void)modGroup:(id)group newName:(id)name members:(id)members;
-(void)setMember:(id)member toGroups:(id)groups;
-(void)removeMembers:(id)members fromGroup:(id)group;
-(void)addMembers:(id)members toGroup:(id)group;
-(void)modifyGroupName:(id)name newName:(id)name2;
-(void)deleteGroup:(id)group;
-(void)createGroup:(id)group withGroupName:(id)groupName;
-(void)updateAllRecommends;
-(void)setRecommendReadForGroup:(id)group;
-(id)getUnReadRecommendsForGroup:(id)group;
-(id)getReadRecommendsForGroup:(id)group;
-(void)updateAllGroups;
-(BOOL)isUserInGroup:(id)group GroupID:(id)anId;
-(id)getGroupByID:(id)anId;
-(id)getAllGroups;
-(void)setShowNewTimelineEventNotification:(BOOL)notification;
-(BOOL)isShowNewTimelineEventNotification;
-(BOOL)isNetworkActive;
-(void)endNetworkActivity:(int)activity cgi:(int)cgi;
-(void)beginNetworkActivity:(int)activity cgi:(int)cgi;
-(id)networkEventDic;
-(void)exposeDataItem:(id)item;
-(void)updateDataItemDetail:(id)detail;
-(void)deleteDataItem:(id)item;
-(void)setDataItemPublic:(id)aPublic;
-(void)setDataItemPrivate:(id)aPrivate;
-(void)onSetDataItemPublicFinished:(int)finished dataItemID:(id)anId;
-(void)onSetDataItemPrivateFinished:(int)finished dataItemID:(id)anId;
-(void)onCommentItemDeleteFinished:(int)finished commentItemID:(id)anId dataItemID:(id)anId3;
-(void)onDataItemDeleteFinished:(int)finished dataItemID:(id)anId;
-(void)onDataItemExposeFinisehd:(int)finisehd dataItem:(id)item;
-(void)onUpdateDataItemDetailFinisehd:(int)finisehd dataItem:(id)item;
-(void)deleteMessage:(id)message;
-(void)deleteAllMessages;
-(void)markMessageListRead:(id)read;
-(void)markMessageRead:(id)read;
-(id)getMessageFrom:(id)from maxCount:(unsigned long)count;
-(id)getAllMessages;
-(id)getUnReadMessages;
-(id)getLastUnReadMessage;
-(unsigned long)getUnReadMessageCount;
-(void)onMessageUnReadCountChanged;
-(void)onReveiceStrangerMessage:(id)message;
-(void)onReveiceWCMessages:(id)messages;
-(void)onLatestWCObjectChanged:(id)changed;
-(void)onCommentReturn:(id)aReturn;
-(void)commentObject:(id)object toStranger:(id)stranger content:(id)content ref:(id)ref source:(int)source;
-(void)likeObject:(id)object toStranger:(id)stranger source:(int)source;
-(BOOL)unCommentObject:(id)object ofUser:(id)user comment:(id)comment;
-(BOOL)unLikeObject:(id)object ofUser:(id)user;
-(void)commentObject:(id)object ofUser:(id)user content:(id)content ref:(id)ref source:(int)source;
-(void)likeObject:(id)object ofUser:(id)user source:(int)source;
-(void)NotifyBackgroundChanged;
-(id)getUploadingDataItems;
-(void)NotifyToDownloadMedia:(id)downloadMedia downloadType:(int)type;
-(void)NotifyToUploadWithTask:(id)task;
-(void)onBGStorageUpdated;
-(void)updateBGStorage;
-(id)getBGStorage;
-(void)setBGImgLikedForUser:(id)user source:(int)source;
-(BOOL)isBGImgLikedForUser:(id)user;
-(BOOL)hasBGImg:(id)img;
-(void)SetBGImgByImg:(id)img;
-(void)SetBGImgByMedia:(id)media;
-(id)backgroundImageByContact:(id)contact;
-(void)onCancelDownloadSuccess:(id)success downloadType:(int)type;
-(void)onDownloadFinish:(id)finish downloadType:(int)type;
-(void)onDownloadMediaProcessChange:(id)change downloadType:(int)type current:(int)current total:(int)total;
-(void)cancelDownloadMedia:(id)media downloadType:(int)type;
-(void)forceDownloadMediaWithProcessNotify:(id)processNotify downloadType:(int)type;
-(void)forceDownloadMedia:(id)media downloadType:(int)type;
-(void)downloadMediaWithProcessNotify:(id)processNotify downloadType:(int)type;
-(void)downloadMedia:(id)media downloadType:(int)type;
-(void)pullDownloadMediaToFront:(id)front downloadType:(int)type;
-(void)setDownloadScene:(int)scene;
-(int)getHomepageTotalCount:(id)count;
-(void)tryGetWCDataItemPattern:(id)pattern;
-(id)getStrangerDataItemByID:(id)anId ofPartner:(id)partner;
-(id)getDataItemByID:(id)anId;
-(id)getDataItemByID:(id)anId addLocal:(BOOL)local;
-(void)onUploadRestarted:(id)restarted;
-(void)onUploadFailed:(id)failed;
-(void)onUploadFinished:(id)finished;
-(id)getFailedUploads;
-(void)deleteUploadDataItem:(id)item;
-(void)restartUploadDataItem:(id)item;
-(id)uploadDataItem:(id)item;
-(id)getCacheText:(id)text refCommentItem:(id)item;
-(void)cacheText:(id)text refDataItem:(id)item refCommentItem:(id)item3;
-(void)uncacheText:(id)text refCommentItem:(id)item;
-(BOOL)updateTimelineTail;
-(BOOL)updateTimelineHead;
-(id)getLatestDataItem;
-(void)deleteAllTimelineDataItems;
-(id)getTimelineDataItemOfIndex:(int)index;
-(int)countOfTimelineDataItem;
-(void)reloadTimelineDataItems;
-(unsigned long)getTimelineShowFlag;
-(void)endTimeline;
-(void)beginTimeline;
-(void)onNoMoreTimelineData;
-(void)onTimelineDataChangedWithAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(void)onHomepage:(id)homepage BGImgChanged:(id)changed;
-(void)onHomepage:(id)homepage totalCountChanged:(int)changed;
-(void)onHomepageUpdate:(int)update username:(id)username withAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(id)getHomepageData:(id)data;
-(id)getCurrentUserHomepage;
-(id)innerGetHomepage:(id)homepage;
-(BOOL)updateHomePageTail:(id)tail;
-(BOOL)updateHomePageHead:(id)head source:(int)source;
-(BOOL)updateHomePageHead:(id)head;
-(void)endHomepage:(id)homepage;
-(void)beginHomepage:(id)homepage;
-(id)GetRecommendUsr;
-(BOOL)isValidRecommendUsr:(id)usr;
-(id)findDataItemInCacheByItemID:(id)cacheByItemID;
-(void)modifyDataItem:(id)item notify:(BOOL)notify;
-(BOOL)LL_onBeforeReturnDataItem:(id)item;
-(BOOL)isDataItemDeleted:(id)deleted;
-(void)markDataItemDeleted:(id)deleted;
-(id)deletedItemSet;
-(id)inputTextCacheMgr;
-(id)patternCacheMgr;
-(id)groupMgr;
-(id)bgMaster;
-(id)bgImgLogic;
-(id)homepageMgr:(id)mgr;
-(id)logicMgr;
-(id)strangerCommentMgrWithDB;
-(id)messageMgrWithDB;
-(id)uploadMgr;
-(id)timelineMgr;
-(id)downloadMgr;
-(id)database;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)reloadDatabase;
-(void)dealloc;
-(void)onServiceInit;
-(id)init;
-(void)addAutoCleanTask;
-(void)LLComment_onBeforeReturnUnLikeDataItem:(id)item;
-(void)LLComment_onBeforeReturnUnCommentDataItem:(id)item comment:(id)comment;
-(void)LLComment_onBeforeReturnStrangerDataItem:(id)item partner:(id)partner;
-(void)LLComment_onBeforeReturnDataItem:(id)item;
-(void)LLDelete_onAfterDeleteDataItemFinished:(id)finished;
-(void)LLDelete_onBeforeDeleteDataItem:(id)item;
-(void)notifyTotalCountWhenDataItemDeleted:(id)deleted;
-(void)LLUpload_onAfterUploadTaskRestarted:(id)restarted;
-(void)LLUpload_onAfterUploadTaskFailed:(id)failed;
-(void)LLUpload_onAfterUploadTaskFinished:(id)finished;
-(void)LLUpload_onAfterAddUploadTask:(id)task;
-(void)LLUpload_onBeforeAddUploadTask:(id)task;
@end

@interface COOBData : NSObject {
	unsigned long m_uiType;
	unsigned long m_uiTime;
	NSString* m_nsIPPort;
}
@property(retain, nonatomic) NSString* m_nsIPPort;
@property(assign, nonatomic) unsigned long m_uiTime;
@property(assign, nonatomic) unsigned long m_uiType;
-(void)LoadDataFromOOBData:(id)oobdata;
-(void)dealloc;
-(id)init;
@end

@interface CNetworkStatusMgr : MMService <MMService, MessageObserverDelegate, IAudioToMessageExt, CNetworkStatusExt, IEmoticonDownloadExt> {
	BOOL m_bConnecting;
	BOOL m_bConnected;
	BOOL m_bReadToGettingData;
	unsigned long m_uiMsgIdForVoiceMsgToDownload;
	BOOL m_bDownloadingEmoticon;
	BOOL m_bReadOnceAgain;
	unsigned long m_uiConnnectType;
	unsigned long m_uiShortChannelFailCount;
	unsigned long m_uiLastReportTime;
	timeval m_tvLastGettingDataTime;
	CNetworkStatusReportArchive* m_reportArchive;
	vector<unsigned long, std::allocator<unsigned long> > m_vecMesssageIdToListen;
	int m_eNetworkStatusType;
	COOBData* m_dtOOB;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)ReachabilityChange:(unsigned long)change;
-(id)GetOOBUrl;
-(id)GetOOBData;
-(void)doReportIpxx:(id)ipxx;
-(void)setReadToGettingData;
-(unsigned long)getNetworkStatusType;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)OnEmoticonDownload:(unsigned long)download;
-(void)zeroEmocticonDownloadingStatus;
-(void)OnErrorByReceiver:(id)receiver ErrNo:(int)no;
-(void)OnAddMessageByReceiver:(id)receiver;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)dealloc;
-(id)init;
-(void)unregExt;
-(void)regExt;
-(void)unListenMessageId;
-(void)initMessageIdToListen;
-(void)handleVoiceDowdload:(id)dowdload error:(BOOL)error;
-(void)zeroVoiceMsgToDownload;
-(void)handleSyncEnd;
-(void)handleSyncBegin;
-(void)handleNetworkStatusChange:(unsigned long)change;
-(void)checkCallStatusChangedExt;
-(void)callDisconnectStatusChangedExt;
-(void)translateStatus;
-(void)translateStatusLongUnConnect;
-(void)translateStatusLongConnect;
-(BOOL)isDuringSync;
-(void)handleReport:(int)report;
-(void)handleReportLongUnConnectCount;
-(void)handleReportDisconnected:(int)disconnected;
-(void)realCalDisconnected;
-(void)handleReportGettingData:(int)data;
-(void)doReportNetworkStatus;
-(BOOL)isNeedReport;
-(void)loadNetworkStatusReportArchive;
-(timeval)getCurTimeVal;
@end

@interface CNetworkStatusReportArchive : NSObject {
	NSString* m_nsGetDataTime;
	NSString* m_nsDisconnectedCountWifi;
	NSString* m_nsDisconnectedCountNoWifi;
	NSString* m_nsIpxx;
	NSString* m_nsLongUnConnectCount;
}
@property(retain, nonatomic) NSString* m_nsLongUnConnectCount;
@property(retain, nonatomic) NSString* m_nsIpxx;
@property(retain, nonatomic) NSString* m_nsDisconnectedCountNoWifi;
@property(retain, nonatomic) NSString* m_nsDisconnectedCountWifi;
@property(retain, nonatomic) NSString* m_nsGetDataTime;
-(void)zeroAllReport;
-(void)zeroIpxx;
-(void)zeroLongUnConnectCount;
-(void)zeroDisconnectedCount;
-(void)zeroGetDataTime;
-(void)addIpxx:(id)ipxx;
-(void)addLongUnConnectCount;
-(void)addDisconnnectedCountNoWifi;
-(void)addDisconnnectedCountWifi;
-(void)addGetDataTime:(unsigned long)time;
-(BOOL)hasReportData;
-(void)dealloc;
-(id)init;
@end

@interface CNetworkStatusReportOplogEvent : CBaseEvent {
	CNetworkStatusReportArchive* m_reportArchive;
}
@property(retain, nonatomic) CNetworkStatusReportArchive* m_reportArchive;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)AddOplogInternal;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface MMMailComposeViewController : MFMailComposeViewController <UINavigationControllerDelegate> {
}
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface CNewSyncWrap : NSObject {
	unsigned long m_uiSelector;
	unsigned long m_uiCgi;
	BOOL m_bIsSyncIng;
	BOOL m_bContinue;
	NSString* m_nsSyncKeyMd5;
	unsigned long m_uiSyncBufferType;
}
@property(assign, nonatomic) unsigned long m_uiSyncBufferType;
@property(retain, nonatomic) NSString* m_nsSyncKeyMd5;
@property(assign, nonatomic) BOOL m_bContinue;
@property(assign, nonatomic) BOOL m_bIsSyncIng;
@property(assign, nonatomic) unsigned long m_uiCgi;
@property(assign, nonatomic) unsigned long m_uiSelector;
-(void)dealloc;
-(id)init;
@end

@interface NewSyncPluginMgr : MMService <MMService, PBMessageObserverDelegate, MessageObserverDelegate> {
	NSMutableDictionary* m_dicSelectorList;
	NSRecursiveLock* m_oMgrLock;
}
@property(retain, nonatomic) NSMutableDictionary* m_dicSelectorList;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)CheckSelector:(unsigned long)selector Request:(id)request;
-(void)MergeKeyBufferByType:(unsigned long)type Buffer:(id)buffer;
-(id)GetKeyBufferByType:(unsigned long)type;
-(BOOL)IsMd5Different:(unsigned long)different Md5:(id)a5;
-(void)SetSyncKeyMd5BySelector:(unsigned long)selector Md5:(id)a5;
-(id)GetSyncWrapBySelector:(unsigned long)selector;
-(unsigned long)GetCgiBySelector:(unsigned long)selector;
-(unsigned long)GetSelectorByCgi:(unsigned long)cgi;
-(void)SetContinueFlag:(BOOL)flag Selector:(unsigned long)selector;
-(void)SetSyncIngFlag:(BOOL)flag Selector:(unsigned long)selector;
-(BOOL)IsSelectorContinue:(unsigned long)aContinue;
-(BOOL)IsSelectorSyncIng:(unsigned long)ing;
-(void)ResetNewSyncWrap:(unsigned long)wrap;
-(void)InitSelectorList;
-(void)dealloc;
-(id)init;
@end

@interface AppCommunicate : NSObject {
}
+(id)appCommunicateDataForAppIDForiOS7Plus:(id)appIDForiOS7Plus;
+(id)appCommunicateDataForAppID:(id)appID;
+(BOOL)setAppCommunicateDataForiOS7Plus:(id)plus forAppID:(id)appID;
+(BOOL)setAppCommunicateData:(id)data forAppID:(id)appID;
+(id)fileDataForAppID:(id)appID;
+(BOOL)setFileData:(id)data forAppID:(id)appID;
+(BOOL)setPropertyListForiOS7Plus:(id)plus forAppID:(id)appID;
+(BOOL)setPropertyList:(id)list forAppID:(id)appID;
+(id)propertyListForAppIDForiOS7Plus:(id)appIDForiOS7Plus;
+(id)propertyListForAppID:(id)appID;
+(id)propertyListForAllAppForiOS7Plus;
+(id)propertyListForAllApp;
+(id)getFilePasteboard;
+(id)getDataPasteboardForiOS7Plus;
+(id)getDataPasteboard;
+(id)getFilePasteboardName;
+(id)getDataPasteboardName;
-(void)dealloc;
-(id)init;
@end

@interface AppSettingItem : NSObject <NSCoding> {
	BOOL appAddedByUser;
	NSString* openID;
	unsigned long flag;
	NSString* appID;
}
@property(assign, nonatomic) BOOL appAddedByUser;
@property(assign, nonatomic) unsigned long flag;
@property(retain, nonatomic) NSString* openID;
@property(retain, nonatomic) NSString* appID;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface AppRegisterInfo : NSObject <NSCoding> {
	BOOL needUpdateInfo;
	BOOL needUpdateIcon;
	BOOL needUpdateWatermark;
	BOOL appAddedByUser;
	BOOL appCanShowNew;
	BOOL isNewApp;
	unsigned appInfoVer;
	NSString* appName;
	NSString* appName4ZhTw;
	NSString* appName4EnUs;
	NSString* appID;
	NSString* appIdentifier;
	NSString* appDescription;
	NSString* appDescription4ZhTw;
	NSString* appDescription4EnUs;
	NSString* appInstallUrl;
	NSString* appIconUrl;
	NSString* appWatermarkUrl;
	unsigned long lastUpdateInfoTime;
	unsigned long lastUpdateWatermarkTime;
	unsigned long lastUpdateIconTime;
	NSString* appTypeList;
	NSString* appDevInfo;
	unsigned long appInfoFlag;
	unsigned long appUpdateVersion;
	NSString* appDownloadUrl;
	NSString* appDownloadUrlMD5;
	unsigned long nextUpdateInfoTime;
}
@property(assign, nonatomic) unsigned long nextUpdateInfoTime;
@property(retain, nonatomic) NSString* appDownloadUrlMD5;
@property(retain, nonatomic) NSString* appDownloadUrl;
@property(assign, nonatomic) BOOL isNewApp;
@property(assign, nonatomic) BOOL appCanShowNew;
@property(assign, nonatomic) unsigned long appUpdateVersion;
@property(assign, nonatomic) unsigned long appInfoFlag;
@property(retain, nonatomic) NSString* appDevInfo;
@property(retain, nonatomic) NSString* appTypeList;
@property(assign, nonatomic) unsigned long lastUpdateIconTime;
@property(assign, nonatomic) unsigned long lastUpdateWatermarkTime;
@property(assign, nonatomic) unsigned long lastUpdateInfoTime;
@property(retain, nonatomic) NSString* appWatermarkUrl;
@property(retain, nonatomic) NSString* appIconUrl;
@property(assign, nonatomic) BOOL appAddedByUser;
@property(retain, nonatomic) NSString* appInstallUrl;
@property(retain, nonatomic) NSString* appDescription4EnUs;
@property(retain, nonatomic) NSString* appDescription4ZhTw;
@property(retain, nonatomic) NSString* appDescription;
@property(retain, nonatomic) NSString* appIdentifier;
@property(retain, nonatomic) NSString* appID;
@property(retain, nonatomic) NSString* appName4EnUs;
@property(retain, nonatomic) NSString* appName4ZhTw;
@property(retain, nonatomic) NSString* appName;
@property(assign, nonatomic) BOOL needUpdateWatermark;
@property(assign, nonatomic) BOOL needUpdateIcon;
@property(assign, nonatomic) BOOL needUpdateInfo;
@property(assign, nonatomic) unsigned appInfoVer;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface WXMediaInternalMessage : NSObject {
	NSString* title;
	NSString* description;
	NSData* thumbData;
	NSString* mediaTagName;
	unsigned objectType;
	NSString* extInfo;
	NSString* fileExt;
	NSData* fileData;
	NSString* mediaUrl;
	NSString* mediaLowBandUrl;
	NSString* mediaDataUrl;
	NSString* mediaLowBandDataUrl;
	NSString* messageExt;
	NSString* messageAction;
}
@property(retain, nonatomic) NSData* fileData;
@property(retain, nonatomic) NSString* fileExt;
@property(retain, nonatomic) NSString* extInfo;
@property(retain, nonatomic) NSString* mediaLowBandDataUrl;
@property(retain, nonatomic) NSString* mediaDataUrl;
@property(retain, nonatomic) NSString* mediaLowBandUrl;
@property(retain, nonatomic) NSString* mediaUrl;
@property(assign, nonatomic) unsigned objectType;
@property(retain, nonatomic) NSString* messageAction;
@property(retain, nonatomic) NSString* messageExt;
@property(retain, nonatomic) NSString* mediaTagName;
@property(retain, nonatomic) NSData* thumbData;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* title;
+(id)message;
-(void)dealloc;
-(id)init;
@end

@interface WXAuthInternal : NSObject {
	NSString* scope;
	NSString* state;
}
@property(retain, nonatomic) NSString* state;
@property(retain, nonatomic) NSString* scope;
-(void)dealloc;
-(id)init;
@end

@interface AppCommunicateData : NSObject {
	unsigned _command;
	NSMutableDictionary* _dictionaryData;
	NSData* _fileData;
	BOOL _returnFromApp;
	NSString* _conversationAccount;
	int _result;
	int _scene;
	NSString* _openID;
	NSString* _sdkVer;
	NSString* _lang;
	NSString* _country;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* lang;
@property(retain, nonatomic) NSString* sdkVer;
@property(retain, nonatomic) NSString* openID;
@property(assign, nonatomic) int scene;
@property(retain, nonatomic) NSData* fileData;
@property(retain, nonatomic) NSString* conversationAccount;
@property(assign, nonatomic) BOOL returnFromApp;
@property(assign, nonatomic) int result;
-(BOOL)RespToData:(id)data;
-(BOOL)ReqToData:(id)data withMediaInternalMessage:(id)mediaInternalMessage;
-(BOOL)ReqToData:(id)data;
-(id)DataToResp;
-(id)DataToReq;
-(BOOL)MakeMediaInternalMessage:(id)message;
-(id)mediaInternalMessage;
-(BOOL)MakeMediaMessage:(id)message;
-(BOOL)MakeLinkObject:(id)object;
-(id)mediaMessage;
-(BOOL)MakeTextMessage:(id)message;
-(id)textMessage;
-(BOOL)MakeAuthResp:(id)resp;
-(id)authResp;
-(BOOL)MakeAuthRequest:(id)request;
-(id)authRequest;
-(BOOL)MakeCommand:(unsigned)command;
-(void)initCommonField:(unsigned)field;
-(unsigned)command;
-(id)propertList;
-(id)initWithPropertList:(id)propertList;
-(void)dealloc;
-(id)init;
@end

@interface WeChatApiUtil : NSObject {
}
+(id)getSDKVersion;
+(id)_internal_getSDKVersion;
+(BOOL)isWXAppSupportApi;
+(id)getAppUrlWithPlatformId:(id)platformId withOtherArgs:(id)otherArgs;
+(id)getAppUrlWithPlatformId:(id)platformId;
+(BOOL)launchApp:(id)app;
+(BOOL)isAppInstalledWithoutCatchException:(id)exception;
+(BOOL)isAppInstalledWithCatchException:(id)catchException;
+(BOOL)isAppOpenUrl:(id)url appID:(id)anId;
+(id)getAppUrl:(id)url;
+(id)getWeChatUrl:(id)url extraUrl:(id)url2;
+(id)getWeChatUrl:(id)url;
+(id)dataFromPropertyList:(id)propertyList;
+(id)propertyListFromData:(id)data;
+(BOOL)is2xScreen;
+(BOOL)isiOS7plus;
@end

@interface BaseReq : NSObject {
	int type;
	NSString* openID;
}
@property(retain, nonatomic) NSString* openID;
@property(assign, nonatomic) int type;
-(void)dealloc;
-(id)init;
@end

@interface BaseResp : NSObject {
	int errCode;
	NSString* errStr;
	int type;
}
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* errStr;
@property(assign, nonatomic) int errCode;
-(void)dealloc;
-(id)init;
@end

@interface SendMessageToWXReq : BaseReq {
	BOOL bText;
	NSString* text;
	WXMediaMessage* message;
	int scene;
}
@property(assign, nonatomic) int scene;
@property(assign, nonatomic) BOOL bText;
@property(retain, nonatomic) WXMediaMessage* message;
@property(retain, nonatomic) NSString* text;
-(void)dealloc;
-(id)init;
@end

@interface SendMessageToWXResp : BaseResp {
	NSString* lang;
	NSString* country;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* lang;
-(void)dealloc;
-(id)init;
@end

@interface SendAuthReq : BaseReq {
	NSString* scope;
	NSString* state;
}
@property(retain, nonatomic) NSString* state;
@property(retain, nonatomic) NSString* scope;
-(void)dealloc;
-(id)init;
@end

@interface SendAuthResp : BaseResp {
	NSString* code;
	NSString* state;
	NSString* lang;
	NSString* country;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* lang;
@property(retain, nonatomic) NSString* state;
@property(retain, nonatomic) NSString* code;
-(void)dealloc;
-(id)init;
@end

@interface PayReq : BaseReq {
	NSString* nonceStr;
	NSString* package;
	NSString* partnerId;
	NSString* prepayId;
	unsigned long timeStamp;
	NSString* sign;
}
@property(retain, nonatomic) NSString* sign;
@property(retain, nonatomic) NSString* package;
@property(assign, nonatomic) unsigned long timeStamp;
@property(retain, nonatomic) NSString* nonceStr;
@property(retain, nonatomic) NSString* prepayId;
@property(retain, nonatomic) NSString* partnerId;
-(void)dealloc;
@end

@interface PayResp : BaseResp {
	NSString* returnKey;
}
@property(retain, nonatomic) NSString* returnKey;
-(void)dealloc;
-(id)init;
@end

@interface GetMessageFromWXReq : BaseReq {
	NSString* lang;
	NSString* country;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* lang;
-(void)dealloc;
-(id)init;
@end

@interface GetMessageFromWXResp : BaseResp {
	BOOL bText;
	NSString* text;
	WXMediaMessage* message;
}
@property(assign, nonatomic) BOOL bText;
@property(retain, nonatomic) WXMediaMessage* message;
@property(retain, nonatomic) NSString* text;
-(void)dealloc;
-(id)init;
@end

@interface ShowMessageFromWXReq : BaseReq {
	WXMediaMessage* message;
	NSString* country;
	NSString* lang;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* lang;
@property(retain, nonatomic) WXMediaMessage* message;
-(void)dealloc;
-(id)init;
@end

@interface ShowMessageFromWXResp : BaseResp {
}
-(void)dealloc;
-(id)init;
@end

@interface LaunchFromWXReq : BaseReq {
	NSString* lang;
	NSString* country;
	WXMediaMessage* message;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* lang;
@property(retain, nonatomic) WXMediaMessage* message;
-(void)dealloc;
-(id)init;
@end

@interface WXImageObject : NSObject {
	NSData* imageData;
	NSString* imageUrl;
}
@property(retain, nonatomic) NSString* imageUrl;
@property(retain, nonatomic) NSData* imageData;
+(id)object;
-(void)dealloc;
-(id)init;
@end

@interface WXMusicObject : NSObject {
	NSString* musicUrl;
	NSString* musicLowBandUrl;
	NSString* musicDataUrl;
	NSString* musicLowBandDataUrl;
}
@property(retain, nonatomic) NSString* musicLowBandDataUrl;
@property(retain, nonatomic) NSString* musicDataUrl;
@property(retain, nonatomic) NSString* musicLowBandUrl;
@property(retain, nonatomic) NSString* musicUrl;
+(id)object;
-(void)dealloc;
-(id)init;
@end

@interface WXVideoObject : NSObject {
	NSString* videoUrl;
	NSString* videoLowBandUrl;
}
@property(retain, nonatomic) NSString* videoLowBandUrl;
@property(retain, nonatomic) NSString* videoUrl;
+(id)object;
-(void)dealloc;
-(id)init;
@end

@interface WXWebpageObject : NSObject {
	NSString* webpageUrl;
}
@property(retain, nonatomic) NSString* webpageUrl;
+(id)object;
-(void)dealloc;
-(id)init;
@end

@interface WXAppExtendObject : NSObject {
	NSString* extInfo;
	NSData* fileData;
	NSString* url;
}
@property(retain, nonatomic) NSData* fileData;
@property(retain, nonatomic) NSString* extInfo;
@property(retain, nonatomic) NSString* url;
+(id)object;
-(void)dealloc;
-(id)init;
@end

@interface WXEmoticonObject : NSObject {
	NSData* emoticonData;
}
@property(retain, nonatomic) NSData* emoticonData;
+(id)object;
-(void)dealloc;
-(id)init;
@end

@interface WXFileObject : NSObject {
	NSString* fileExtension;
	NSData* fileData;
}
@property(retain, nonatomic) NSData* fileData;
@property(retain, nonatomic) NSString* fileExtension;
+(id)object;
-(void)dealloc;
-(id)init;
@end

@interface WXMediaMessage : NSObject {
	NSString* title;
	NSString* description;
	NSData* thumbData;
	NSString* mediaTagName;
	id mediaObject;
	NSString* messageExt;
	NSString* messageAction;
}
@property(retain, nonatomic) id mediaObject;
@property(retain, nonatomic) NSString* messageAction;
@property(retain, nonatomic) NSString* messageExt;
@property(retain, nonatomic) NSString* mediaTagName;
@property(retain, nonatomic) NSData* thumbData;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* title;
+(id)message;
-(void)setThumbImage:(id)image;
-(void)dealloc;
-(id)init;
@end

@interface OpenApiMgr : MMService <MMService, IMsgExt, UIActionSheetDelegate, WCPayOpenApiExt, SendAppMsgHandleDelegate, OnGotAppMsgHandleDelegate> {
	SendAppMsgHandler* m_oSendAppMsgHandler;
	OnGotAppMsgHandler* m_oOnGotAppMsgHandler;
	SendFileMsgHandler* m_oSendFileMsgHandler;
	WechatConnectHandler* m_oWechatConnectHandler;
	SendAppMsgToWCHandler* m_oSendAppMsgToWCHandler;
	SendAppMsgToFavoritesHandler* m_oSendAppMsgToFavoritesHandler;
	WeChatPayHandler* m_oWeChatPayHandler;
	NewAuthHandler* m_oNewAuthHandler;
	AppJumpLogicHelper* m_oAppJumpHandler;
	NSMutableDictionary* m_paraDic;
	BOOL m_uiIsInternalDownload;
}
-(void)OnEndWithOnGotAppMsgHandle:(id)onGotAppMsgHandle;
-(void)OnStayAtWechatWithSendAppMsgHandle:(id)sendAppMsgHandle;
-(void)doOAuthOpenApi:(id)api authInfo:(id)info;
-(void)doWCPayOpenApi:(id)api payInfo:(id)info;
-(BOOL)sendWCPayResp:(id)resp toApp:(id)app;
-(void)OnPreAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)jumpToInstallUrl:(id)installUrl;
-(void)setIsInternalDownload:(BOOL)download;
-(void)cancelNewAuth;
-(void)cancelWechatPay;
-(void)cancelSendAppMsgToFavorites;
-(void)cancelSendAppMsgToWCHandler;
-(void)cancelWechatConnectHandler;
-(void)cancelSendFileMsgHandler;
-(void)cancelOnGotAppMsgHandler;
-(void)cancelSendAppMsgHandler;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceInit;
-(BOOL)sendReqShowMessage:(id)message toApp:(id)app;
-(BOOL)sendResp:(id)resp toApp:(id)app;
-(BOOL)sendReq:(id)req conversationAccount:(id)account toApp:(id)app;
-(BOOL)sendReqLaunchApp:(id)app withMediaInternalMessage:(id)mediaInternalMessage;
-(BOOL)launch3rdApp:(id)app;
-(void)cancelAllApi;
-(void)doApi:(id)api;
-(BOOL)checkSupportCommand:(unsigned long)command;
-(id)getAppIdByFunctionType:(int)type;
-(BOOL)isShowAppMessageBottom:(id)bottom;
-(BOOL)isShowTimelineSource:(id)source;
-(BOOL)isShowTimeLineJumpLink:(id)link;
-(BOOL)isCanJumpWithAppId:(id)appId;
-(BOOL)jumpByAppIdInTimeline:(id)timeline;
-(BOOL)jumpByAppIdInMessage:(id)message;
-(void)dealloc;
-(id)init;
@end

@interface OpenApiMgrHelper : NSObject {
}
+(id)getNetWorkErrorHtml;
+(void)checkShowTabbar;
+(void)hideChatViewKeyborad;
+(void)makeFileInternalMessage:(id)message;
+(BOOL)isNeedInit;
+(BOOL)isLogin;
+(id)createConfirmLogicHelper:(id)helper withAppData:(id)appData withAppId:(id)appId showTextView:(BOOL)view appScene:(unsigned long)scene;
+(id)FormAppMessage:(id)message withAppMessage:(id)appMessage appID:(id)anId;
+(id)FormTextMsg:(id)msg withText:(id)text appID:(id)anId;
@end

@interface MMPackageDownloadMgr : MMService <MMService, PBMessageObserverDelegate> {
	NSMutableSet* m_downliadingPackageLists;
	NSMutableSet* m_freshDownliadingPackageLists;
	NSMutableSet* m_downloadingPackages;
	NSMutableSet* m_cancelDownloadPackages;
	NSDateFormatter* m_dateFormatter;
}
-(void)dealloc;
-(id)init;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)cancelPackage:(unsigned long)package tid:(id)tid;
-(void)onPackageSynced:(id)synced;
-(void)downloadPackage:(unsigned long)package tid:(id)tid localVersion:(id)version;
-(void)onPackageListSynced:(id)synced;
-(void)downloadPackageList:(unsigned long)list;
-(void)downloadPackageList:(unsigned long)list fresh:(BOOL)fresh;
-(id)getPackageList:(unsigned long)list;
-(void)SavePackageListArchive:(id)archive packageListArchive:(id)archive2;
-(id)LoadPackageListArchive:(id)archive;
-(id)getPackageIconPath:(id)path tid:(id)tid;
-(id)getPackageCachePath:(id)path tid:(id)tid;
-(id)getPackageBasePath:(id)path tid:(id)tid;
-(id)getPackageListPath:(id)path;
@end

@interface MMPackageListDownloadEventHandler : ProtobufEventHandler {
	unsigned long m_tryCount;
}
-(void)OnProtocolReturn:(id)aReturn shouldContinue:(bool*)aContinue;
@end

@interface LbsContactInfoList : NSObject {
	NSMutableArray* m_LbsContactList;
	int m_iRet;
	NSString* m_nsErrorMsg;
	int m_iState;
	int m_iFlushTime;
	BOOL m_iIsShowRoom;
	int m_iRoomMemberCount;
}
@property(assign, nonatomic) int m_iRoomMemberCount;
@property(assign, nonatomic) BOOL m_iIsShowRoom;
@property(assign, nonatomic) int m_iFlushTime;
@property(assign, nonatomic) int m_iState;
@property(retain, nonatomic) NSMutableArray* lbsContactList;
@property(retain, nonatomic) NSString* m_nsErrorMsg;
@property(assign, nonatomic) int iRet;
-(void)replaceLbsContactListAtIndexes:(id)indexes withLbsContactList:(id)lbsContactList;
-(void)replaceObjectInLbsContactListAtIndex:(unsigned)index withObject:(id)object;
-(void)removeLbsContactListAtIndexes:(id)indexes;
-(void)removeObjectFromLbsContactListAtIndex:(unsigned)index;
-(void)insertLbsContactList:(id)list atIndexes:(id)indexes;
-(void)insertObject:(id)object inLbsContactListAtIndex:(unsigned)index;
-(id)objectInLbsContactListAtIndex:(unsigned)index;
-(void)getLbsContactList:(id*)list range:(NSRange)range;
-(unsigned)countOfLbsContactList;
-(void)removeFromLbsContactList:(id)lbsContactList;
-(void)addToLbsContactList:(id)lbsContactList;
-(BOOL)fromSKBuffer:(SKBuffer*)skbuffer;
-(id)description;
-(id)keyPaths;
-(void)dealloc;
-(id)init;
@end

@interface MMLbsContactInfo : NSObject {
	NSString* UserName;
	NSString* NickName;
	NSString* Country;
	NSString* Province;
	NSString* City;
	NSString* Signature;
	NSString* Distance;
	int Sex;
	unsigned ImgStatus;
	unsigned long CertificationFlag;
	NSString* CertificationInfo;
	NSString* m_nsAlias;
	NSString* m_nsWeiboAddress;
	NSString* m_nsWeiboNickName;
	unsigned long m_uiWeiboFlag;
	NSString* m_nsWCBGImgObjectID;
	int m_iAlbumFlag;
	NSString* m_pcAlbumBGImgID;
	NSString* m_nsExternalInfo;
	NSString* m_nsBrandSubscriptConfigUrl;
	unsigned long m_uiBrandSubscriptionSettings;
	SubscriptBrandInfo* m_subBrandInfo;
	NSString* m_nsBrandIconUrl;
	NSString* m_nsHeadImgUrl;
	NSString* m_nsHeadHDImgUrl;
	BOOL m_isFriend;
	NSString* m_displayName;
}
@property(copy, nonatomic) NSString* m_displayName;
@property(assign, nonatomic) BOOL m_isFriend;
@property(retain, nonatomic) NSString* m_nsBrandIconUrl;
@property(retain, nonatomic) SubscriptBrandInfo* m_subBrandInfo;
@property(assign, nonatomic) unsigned long m_uiBrandSubscriptionSettings;
@property(retain, nonatomic) NSString* m_nsBrandSubscriptConfigUrl;
@property(retain, nonatomic) NSString* m_nsExternalInfo;
@property(retain, nonatomic) NSString* m_nsHeadHDImgUrl;
@property(retain, nonatomic) NSString* m_nsHeadImgUrl;
@property(retain, nonatomic) NSString* m_pcAlbumBGImgID;
@property(assign, nonatomic) int m_iAlbumFlag;
@property(retain, nonatomic) NSString* m_nsWCBGImgObjectID;
@property(assign, nonatomic) unsigned long m_uiWeiboFlag;
@property(retain, nonatomic) NSString* m_nsWeiboNickName;
@property(retain, nonatomic) NSString* m_nsWeiboAddress;
@property(retain, nonatomic) NSString* m_nsAlias;
@property(retain, nonatomic) NSString* CertificationInfo;
@property(assign, nonatomic) unsigned long CertificationFlag;
@property(assign, nonatomic) unsigned imgStatus;
@property(assign, nonatomic) int sex;
@property(retain, nonatomic) NSString* distance;
@property(retain, nonatomic) NSString* signature;
@property(retain, nonatomic) NSString* city;
@property(retain, nonatomic) NSString* province;
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* nickName;
@property(retain, nonatomic) NSString* userName;
-(BOOL)isInMyContactList;
-(void)fromStruct:(tagMMLbsContactInfo*)aStruct;
-(id)description;
-(id)keyPaths;
-(void)dealloc;
-(id)init;
@end

@interface ModPushSystemMsgEvent : CBaseEvent {
	NSString* m_nsMsgID;
	unsigned long m_uiType;
}
-(BOOL)AddOplog;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface GetPushSystemImageEvent : NetCmdEvent {
	NSString* m_url;
	unsigned long m_offset;
	unsigned long m_mode;
}
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(BOOL)SetEventInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface GetPushSystemImagePrtl : PrtlBase {
	NSString* m_url;
	unsigned long m_offset;
	unsigned long m_mode;
}
@property(assign, nonatomic) unsigned long m_mode;
@property(assign, nonatomic) unsigned long m_offset;
@property(retain, nonatomic) NSString* m_url;
-(BOOL)HandleResp:(void*)resp;
-(void)InitReq:(void*)req;
-(void)dealloc;
-(id)init;
@end

@interface SystemMsgTextWrap : NSObject <NSCoding> {
	NSString* text;
	CGPoint origin;
	unsigned long width;
	UIColor* color;
	unsigned long font;
}
@property(assign, nonatomic) unsigned long font;
@property(retain, nonatomic) UIColor* color;
@property(assign, nonatomic) unsigned long width;
@property(assign, nonatomic) CGPoint origin;
@property(retain, nonatomic) NSString* text;
-(id).cxx_construct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface SystemMsgWrap : NSObject <NSCoding> {
	SystemMsgTextWrap* m_title;
	SystemMsgTextWrap* m_description;
	UIImage* m_backgroundImage;
	UIView* m_backgroundView;
	NSString* m_url;
	NSString* m_backupURL;
	BOOL m_enableClose;
	BOOL m_closeButtonTransparent;
}
@property(assign, nonatomic) BOOL m_closeButtonTransparent;
@property(assign, nonatomic) BOOL m_enableClose;
@property(retain, nonatomic) NSString* m_backupURL;
@property(retain, nonatomic) NSString* m_url;
@property(retain, nonatomic) UIView* m_backgroundView;
@property(retain, nonatomic) UIImage* m_backgroundImage;
@property(retain, nonatomic) SystemMsgTextWrap* m_description;
@property(retain, nonatomic) SystemMsgTextWrap* m_title;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface InternalSystemMsg : NSObject <NSCoding> {
	SystemMsgWrap* m_msgWrap;
	NSDate* m_startTime;
	NSDate* m_endTime;
	NSString* m_imageUri;
	NSString* m_id;
}
@property(retain, nonatomic) NSString* m_id;
@property(retain, nonatomic) NSString* m_imageUri;
@property(retain, nonatomic) NSDate* m_endTime;
@property(retain, nonatomic) NSDate* m_startTime;
@property(retain, nonatomic) SystemMsgWrap* m_msgWrap;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface PushSystemMsgMgr : MMService <MessageObserverDelegate, MMService> {
	unsigned long m_retryCount;
	NSDateFormatter* m_dateFormatter;
}
-(void)dealloc;
-(id)init;
-(void)CheckMsg;
-(void)initMessage:(unsigned long)message;
-(void)testParseXml;
-(void)initListen;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)RemovePushSoftWare;
-(void)ModPushSoftWare:(unsigned long)ware;
-(void)RemoveSystemMsg;
-(void)ModSystemMsg:(unsigned long)msg;
-(void)internalModeMessage:(unsigned long)message mode:(unsigned long)mode;
-(void)handleNewMessage:(id)message mode:(unsigned long)mode;
-(void)showMessage:(id)message mode:(unsigned long)mode;
-(void)ReportPushSystemMsg:(id)msg modType:(unsigned long)type;
-(void)getImageOfURI:(id)uri startPos:(unsigned long)pos mode:(unsigned long)mode;
-(void)RemoveMessage:(unsigned long)message;
-(id)GetPathOfDownloadingMessageImage:(unsigned long)downloadingMessageImage;
-(id)GetPathOfDownloadingMessage:(unsigned long)downloadingMessage;
-(id)GetPathOfCurrentMessageImage:(unsigned long)currentMessageImage;
-(id)GetPathOfCurrentMessage:(unsigned long)currentMessage;
-(id)parseSystemMsg:(id)msg;
-(id)decodeChild:(XmlReaderNode_t*)child withType:(id)type equals:(id)equals;
-(id)parseDateMsg:(XmlReaderNode_t*)msg;
-(id)parseTextMsg:(XmlReaderNode_t*)msg;
-(unsigned long)decodeAttributeToInteger:(XmlReaderNode_t*)integer key:(const char*)key;
-(unsigned long)decodeToInteger:(XmlReaderNode_t*)integer key:(const char*)key;
-(id)decodeAttributeToString:(XmlReaderNode_t*)string key:(const char*)key;
-(id)decodeToString:(XmlReaderNode_t*)string key:(const char*)key;
@end

@interface QQAccountMgr : MMService <MMService, MessageObserverDelegate, PBMessageObserverDelegate> {
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)localUnBindQQ;
-(void)unBindQQclearQQ;
-(void)unBindQQ:(id)qq;
-(void)bindQQ;
-(void)clearQQFlags;
-(void)uninstallQQPluginWithoutCGI;
-(void)clearQQData;
-(void)clearWBReader;
-(void)clearQQInvite;
-(void)clearQQFriend;
-(void)clearQQMsg;
-(void)clearWBSX;
-(void)clearQQMail;
-(void)dealloc;
@end

@interface CAttach : NSObject {
	unsigned long m_uiFileType;
	NSMutableArray* m_arrFileList;
	NSString* m_nsAttachID;
	BOOL isCanPreview;
	NSString* name;
	NSString* path;
	unsigned long size;
}
@property(retain, nonatomic) NSString* m_nsAttachID;
@property(retain, nonatomic) NSMutableArray* m_arrFileList;
@property(assign, nonatomic) unsigned long m_uiFileType;
@property(assign, nonatomic) unsigned long size;
@property(assign, nonatomic) BOOL isCanPreview;
@property(retain, nonatomic) NSString* path;
@property(retain, nonatomic) NSString* name;
-(id)GetAttachIDFromPath;
-(id)GetAttachTempPath:(id)path;
-(id)GetAttachPath:(id)path;
-(BOOL)IsTextFile;
-(unsigned long)GetPreviewType;
-(id)GetAttachPic;
-(void)AddAttach:(id)attach ParentPath:(id)path;
-(BOOL)IsCompressFile;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CMail : NSObject {
	CMailContact* from;
	NSMutableArray* tolist;
	NSMutableArray* cclist;
	NSMutableArray* bcclist;
	NSString* subject;
	NSString* datetime;
	NSString* contentType;
	NSString* content;
	NSMutableArray* attachlist;
	int tipColor;
	NSString* tipWording;
}
@property(retain, nonatomic) NSString* tipWording;
@property(assign, nonatomic) int tipColor;
@property(retain, nonatomic) NSMutableArray* attachlist;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* contentType;
@property(retain, nonatomic) NSString* datetime;
@property(retain, nonatomic) NSString* subject;
@property(retain, nonatomic) NSMutableArray* bcclist;
@property(retain, nonatomic) NSMutableArray* cclist;
@property(retain, nonatomic) NSMutableArray* tolist;
@property(retain, nonatomic) CMailContact* from;
-(id)description;
-(void)dealloc;
-(id)initWithXml:(id)xml;
-(void)parseFromXML:(id)xml;
@end

@interface CMailContact : NSObject <NSCoding> {
	unsigned long freq;
	unsigned long sort;
	NSString* name;
	NSString* addr;
	unsigned long uin;
}
@property(assign, nonatomic) unsigned long uin;
@property(retain, nonatomic) NSString* addr;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) unsigned long sort;
@property(assign, nonatomic) unsigned long freq;
-(int)compare:(id)compare;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface CMailContactInfo : NSObject <NSCoding> {
	NSString* mSyncInfo;
	NSMutableDictionary* mMailContactDic;
}
@property(retain, nonatomic) NSMutableDictionary* mMailContactDic;
@property(retain, nonatomic) NSString* mSyncInfo;
-(void)SaveMailContactData;
-(void)LoadMailContactData;
-(id)description;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface MMHttpCacheMgr : MMService <MMService, MMHttpConnectionDelegate> {
}
+(void)ClearCacheDirByUsrName:(id)name;
+(void)ClearCacheDir:(unsigned long)dir;
+(id)GetFilePath:(id)path Type:(unsigned long)type;
+(id)GetCacheDir:(unsigned long)dir;
+(unsigned long)GetCacheType:(id)type;
-(void)HttpConnectionFail:(id)fail;
-(void)HttpConnectionFinished:(id)finished cachekey:(id)cachekey response:(id)response ErrNo:(int)no;
-(void)LoadCache:(id*)cache CacheKey:(id)key Type:(unsigned long)type;
-(void)getWithURL:(id)url cacheKey:(id)key Type:(unsigned long)type NotifyKey:(id)key4;
-(void)dealloc;
-(void)onServiceInit;
-(void)addAutoCleanTask:(unsigned long)task;
@end

@interface MMHttpConnection : NSObject {
	unsigned long mStatusCode;
	NSString* m_nsFileName;
	NSTimer* m_tmCheckTimeOut;
	unsigned long m_uiHttpType;
	NSString* m_nsNotifyKey;
	unsigned long m_uiContentLen;
	NSURLConnection* mUrlConn;
	NSMutableData* mRecvData;
	NSString* mCacheKey;
	unsigned long mConnProto;
	id<NSObject, MMHttpConnectionDelegate> mDelegate;
}
@property(retain, nonatomic) NSString* m_nsNotifyKey;
@property(assign, nonatomic) unsigned long m_uiHttpType;
@property(retain, nonatomic) NSTimer* m_tmCheckTimeOut;
@property(retain, nonatomic) NSString* m_nsFileName;
@property(assign, nonatomic) id<NSObject, MMHttpConnectionDelegate> mDelegate;
@property(assign, nonatomic) unsigned long mConnProto;
@property(retain, nonatomic) NSString* mCacheKey;
@property(retain, nonatomic) NSMutableData* mRecvData;
@property(retain, nonatomic) NSURLConnection* mUrlConn;
-(void)TimeOut;
-(void)cancelRequest;
-(BOOL)spostWithURL:(id)url body:(id)body boundary:(id)boundary;
-(BOOL)sgetWithURL:(id)url;
-(BOOL)getWithURL:(id)url;
-(void)dealloc;
-(void)CancelTimer;
-(id)initWithProtocol:(unsigned long)protocol andDelegate:(id)delegate;
-(BOOL)connectWithRequest:(id)request;
-(BOOL)setPostRequestHeader:(id)header boundary:(id)boundary;
-(BOOL)setNormalRequestHeader:(id)header;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
@end

@interface QQMailHttpRespHandler : NSObject <MMHttpConnectionDelegate> {
}
-(void)HttpConnectionFail:(id)fail;
-(void)HttpConnectionFinished:(id)finished Data:(id)data ErrNo:(int)no;
-(void)HttpConnectionFinished:(id)finished XML:(id)xml ErrNo:(int)no;
-(void)handleXML4ViewCompress:(id)compress NotifyKey:(id)key;
-(void)handleXML4ComposeSend:(id)send;
-(void)handleXML4UploadData:(id)data FileName:(id)name;
-(void)handleXML4SetMailUnRead:(id)read;
-(void)handleXML4ReadMail:(id)mail;
-(void)handleXML4MailContact:(id)contact;
-(void)checkIfNeedLogin:(int)login;
@end

@interface QQMailMgr : MMService <IMsgExt, MMService, IQQMailExt> {
	BOOL m_bSyncingContact;
	unsigned long m_uiSyncCount;
	NSMutableDictionary* m_dicCookie;
	QQMailHttpRespHandler* mHandler;
}
@property(retain, nonatomic) NSMutableDictionary* m_dicCookie;
@property(retain, nonatomic) QQMailHttpRespHandler* mHandler;
-(void)GetAttachPic:(id)pic;
-(id)GetAttachListFromCompressInfo:(id)compressInfo;
-(id)CreateAttachList:(XmlReaderNode_t*)list;
-(void)SaveCompressInfo:(id)info Path:(id)path;
-(id)GetMailCompressInfo:(id)info;
-(id)GetFilePathOfCompressInfo:(id)compressInfo;
-(void)ComposeSend:(id)send sendtype:(unsigned long)sendtype mailid:(id)mailid attach:(id)attach;
-(void)UploadData:(id)data filename:(id)filename;
-(void)SetMailUnread:(id)unread;
-(id)GetMail:(id)mail;
-(id)GetAllMailContact;
-(void)ResetSyncCount;
-(void)SyncContact;
-(void)SetCookie:(id)cookie;
-(id)GetCookieString;
-(id)GetCookie;
-(void)dealloc;
-(id)init;
-(void)setLastBoundary:(id)boundary;
-(void)setBoundary:(id)boundary;
-(void)OnDelMsg:(id)msg DelAll:(BOOL)all;
-(void)OnDelMsg:(id)msg MsgWrap:(id)wrap;
-(void)DeleteMailByMailId:(id)anId;
-(void)SaveMail:(id)mail byMailId:(id)anId;
-(void)LoadMail:(id*)mail byMailId:(id)anId;
@end

@interface MMQRCodeMgr : MMService <MMService, PBMessageObserverDelegate> {
	NSMutableSet* m_downloadSet;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)getNextQRCode:(id)code;
-(id)getQRCode:(id)code pullIfNotExist:(bool)exist;
-(void)getQRCodeFromServer:(id)server withStyle:(unsigned long)style;
-(unsigned long)getCurStyle:(id)style;
-(id)getQRCodeStylePath:(id)path;
-(id)getQRCodeImagePath:(id)path;
-(void)dealloc;
-(id)init;
@end

@interface QREncoder : NSObject {
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
-(id)renderDataMatrix:(id)matrix imageDimension:(int)dimension;
-(id)encodeWithECLevel:(int)eclevel version:(int)version string:(id)string;
-(id)encodeWithECLevel:(int)eclevel version:(int)version string:(id)string AESPassphrase:(id)passphrase;
-(id)encodeCStringWithECLevel:(int)eclevel version:(int)version cstring:(const char*)cstring;
-(id)AESDecryptString:(id)string withPassphrase:(id)passphrase;
-(id)AESEncryptString:(id)string withPassphrase:(id)passphrase;
-(void)dealloc;
@end

@interface MMQRCodeReader : NSObject {
	Reader* reader_;
}
+(void)clearSubsetSizeType;
-(int)getSubsetSizeType:(int)type;
-(int)getAdditionSubsetSizeType:(QRCodeReader*)type prevType:(int)type2;
-(Ref<zxing::Result>)decode:(Ref<zxing::BinaryBitmap>)decode andCallback:(Ref<zxing::ResultPointCallback>)callback tryHarder:(BOOL)harder;
-(Ref<zxing::Result>)decode:(Ref<zxing::BinaryBitmap>)decode;
-(void)dealloc;
-(id)init;
@end

@interface MMQRDecoder : NSObject {
	NSSet* readers;
	UIImage* image;
	CGRect cropRect;
	UIImage* subsetImage;
	char* subsetData;
	unsigned long subsetWidth;
	unsigned long subsetHeight;
	unsigned long subsetBytesPerRow;
}
@property(assign) unsigned long subsetBytesPerRow;
@property(assign) unsigned long subsetHeight;
@property(assign) unsigned long subsetWidth;
@property(assign, nonatomic) char* subsetData;
@property(retain, nonatomic) UIImage* subsetImage;
@property(assign, nonatomic) CGRect cropRect;
@property(retain, nonatomic) NSSet* readers;
@property(retain, nonatomic) UIImage* image;
-(id).cxx_construct;
-(void)dealloc;
-(void)setSubsetSizeType:(int)type;
-(int)getSubsetSizeType;
-(id)decodeImage:(id)image cropRect:(CGRect)rect tryHarder:(BOOL)harder;
-(id)decodeImage:(id)image tryHarder:(BOOL)harder;
-(id)decode:(BOOL)decode;
-(void)prepareSubset:(BOOL)subset;
@end

@interface VcardName : NSObject {
	NSString* _firstName;
	NSString* _middleName;
	NSString* _lastName;
}
@property(retain, nonatomic) NSString* lastName;
@property(retain, nonatomic) NSString* middleName;
@property(retain, nonatomic) NSString* firstName;
+(BOOL)isChineseName:(id)name;
+(BOOL)isValidName:(id)name;
-(void)print;
-(void)dealloc;
@end

@interface VcardAddress : NSObject {
	NSString* _postOfficeBox;
	NSString* _extendedAddress;
	NSString* _street;
	NSString* _locality;
	NSString* _region;
	NSString* _postalCode;
	NSString* _country;
}
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* postalCode;
@property(retain, nonatomic) NSString* region;
@property(retain, nonatomic) NSString* locality;
@property(retain, nonatomic) NSString* street;
@property(retain, nonatomic) NSString* extendedAddress;
@property(retain, nonatomic) NSString* postOfficeBox;
+(BOOL)isChineseAddress:(id)address;
+(BOOL)isValidAddress:(id)address;
-(void)dealloc;
-(void)print;
@end

@interface MMVcardItem : NSObject {
	VcardName* _name;
	NSString* _nickName;
	NSString* _photoUrl;
	NSString* _photoType;
	NSData* _photoBuffer;
	VcardAddress* _address;
	VcardAddress* _homeAddress;
	VcardAddress* _workAddress;
	VcardAddress* _deliveryAddress;
	NSString* _phoneNumber;
	NSString* _mobilePhoneNumber;
	NSString* _homePhoneNumber;
	NSString* _workPhoneNumber;
	NSString* _telAVPhoneNumber;
	NSString* _birthday;
	NSString* _email;
	NSString* _title;
	NSString* _role;
	NSString* _logoType;
	NSData* _logoBuffer;
	NSString* _agent;
	NSString* _organization;
	NSString* _note;
	NSString* _soundType;
	NSData* _soundBuffer;
	NSString* _url;
}
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSData* soundBuffer;
@property(retain, nonatomic) NSString* soundType;
@property(retain, nonatomic) NSString* note;
@property(retain, nonatomic) NSString* organization;
@property(retain, nonatomic) NSString* agent;
@property(retain, nonatomic) NSData* logoBuffer;
@property(retain, nonatomic) NSString* logoType;
@property(retain, nonatomic) NSString* role;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* email;
@property(retain, nonatomic) NSString* birthday;
@property(retain, nonatomic) NSString* telAVPhoneNumber;
@property(retain, nonatomic) NSString* workPhoneNumber;
@property(retain, nonatomic) NSString* homePhoneNumber;
@property(retain, nonatomic) NSString* mobilePhoneNumber;
@property(retain, nonatomic) NSString* phoneNumber;
@property(retain, nonatomic) VcardAddress* deliveryAddress;
@property(retain, nonatomic) VcardAddress* workAddress;
@property(retain, nonatomic) VcardAddress* homeAddress;
@property(retain, nonatomic) VcardAddress* address;
@property(retain, nonatomic) NSData* photoBuffer;
@property(retain, nonatomic) NSString* photoType;
@property(retain, nonatomic) NSString* photoUrl;
@property(retain, nonatomic) NSString* nickName;
@property(retain, nonatomic) VcardName* name;
+(void)Test;
+(BOOL)setVCardItem:(id)item byXml:(id)xml;
+(BOOL)setVcardAddress:(id)address byXmlNode:(XmlReaderNode_t*)node;
+(id)loadXmlByVcardItem:(id)item;
-(void)print;
-(void)dealloc;
-(id)init;
@end

@interface TwoDDecoderResult : NSObject <NSCopying> {
	NSString* text;
	NSArray* points;
}
@property(retain, nonatomic) NSArray* points;
@property(retain, nonatomic) NSString* text;
+(id)resultWithText:(id)text points:(id)points;
-(id)description;
-(void)dealloc;
-(id)copy;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithText:(id)text points:(id)points;
@end

@interface QZoneLoginStatus : MMObject <PBMessageObserverDelegate> {
	MMDelegateProxy<QZoneLoginStatusDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<QZoneLoginStatusDelegate>* m_delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)getQZoneLoginStatusUrl:(unsigned long)url;
-(void)dealloc;
-(id)init;
@end

@interface ShakeBgImgDownloadMgr : MMService <MMService, PBMessageObserverDelegate> {
	ShakeInfo* m_oShakeInfo;
	unsigned long m_uiCurDownloadID;
	unsigned long m_uiCurTotalLen;
	unsigned long m_uiCurEventID;
	unsigned long m_uiCurDownloadCount;
}
@property(retain, nonatomic) ShakeInfo* m_oShakeInfo;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)DownloadBgImg:(unsigned long)img TotalLen:(unsigned long)len;
-(void)CreateDownloadEvent;
-(void)AddShakeTimes:(unsigned long)times;
-(unsigned long)GetShakeBgImgID;
-(unsigned long)GetShakeTimes;
-(void)SaveShakeInfo;
-(void)LoadShakeInfo;
-(void)dealloc;
-(id)init;
-(void)ResetDownloadInfo;
@end

@interface WTLoginLogHelper : NSObject <WTloginLogProtocol> {
}
-(void)logWithfile:(const char*)withfile line:(int)line func:(const char*)func msg:(id)msg;
@end

@interface ShakeMgr : MMService <MMService, MessageObserverDelegate, PBMessageObserverDelegate, IMsgExt> {
	BOOL m_isBindPage;
	BOOL m_isBindBookmark;
	BOOL m_isPageActive;
	BOOL m_isMusicActive;
	ShakePeopleStorage* m_peopleStorage;
	ShakePageStorage* m_pageStorage;
	ShakeMusicStorage* m_musicStorage;
	ShakePageShareStorage* m_shakeShareStorage;
	int m_peopleStorageRefCount;
	int m_pageStorageRefCount;
	int m_musicStorageRefCount;
	int m_shakeShareStorageRefCount;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(BOOL)onServiceMemoryWarning;
-(id)getShakeBackgroundView;
-(void)endMusicStorage;
-(void)beginMusicStorage;
-(void)endPageStorage;
-(void)beginPageStorage;
-(void)endShakeShareStorage;
-(void)beginShakeShareStorage;
-(void)endPeopleStorage;
-(void)beginPeopleStorage;
-(void)ClearMusicStorage;
-(void)SaveMusicStorage:(BOOL)storage;
-(id)getMusicStorage;
-(void)LoadMusicStorage;
-(void)ClearPeopleStorage;
-(void)SavePeopleStorage:(BOOL)storage;
-(id)getPeopleStorage;
-(void)LoadPeopleStorage;
-(void)ClearShakeShareStorage;
-(void)SaveShakeShareStorage:(BOOL)storage;
-(id)getShakeShareStorage;
-(void)LoadShakeShareStorage;
-(void)ClearPageStorage;
-(void)SavePageStorage:(BOOL)storage;
-(id)getPageStorage;
-(void)LoadPageStorage;
-(void)setSoundStatus:(int)status;
-(int)getSoundStatus;
-(void)NotifyStatusChanged;
-(void)unbindPlugin:(unsigned long)plugin andOpCode:(unsigned long)code;
-(void)shakeMusicSwitch:(BOOL)aSwitch;
-(BOOL)isMusicActive;
-(BOOL)isShareActive;
-(BOOL)isPageActive;
-(BOOL)isBindBookmark;
-(BOOL)isBindPage;
-(void)dealloc;
-(id)init;
-(void)onServiceInit;
@end

@interface ShakePageUrl : NSObject <PBCoding, NSCopying> {
	NSString* webUrl;
	NSString* thumbUrl;
	NSString* imgUrl;
}
@property(retain, nonatomic) NSString* imgUrl;
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* webUrl;
+(void)initialize;
+(void)_initPBTableOfShakePageUrl;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakePageItem : NSObject <PBCoding, NSCopying> {
	NSString* pageUrl;
	NSString* pageTitle;
	NSMutableArray* imgUrls;
	NSString* username;
	NSString* nickname;
	unsigned msgLocalID;
	unsigned createTime;
}
@property(assign, nonatomic) unsigned createTime;
@property(assign, nonatomic) unsigned msgLocalID;
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* username;
@property(retain, nonatomic) NSMutableArray* imgUrls;
@property(retain, nonatomic) NSString* pageTitle;
@property(retain, nonatomic) NSString* pageUrl;
+(void)initialize;
+(void)_initPBTableOfShakePageItem;
-(id)toXml;
-(BOOL)fromXml:(XmlReaderNode_t*)xml;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakePageStorage : NSObject <PBCoding, NSCopying> {
	NSMutableArray* pages;
	NSMutableArray* results;
	int newCount;
}
@property(assign, nonatomic) int newCount;
@property(retain, nonatomic) NSMutableArray* results;
@property(retain, nonatomic) NSMutableArray* pages;
+(void)initialize;
+(void)_initPBTableOfShakePageStorage;
-(int)getTotalImageCount;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakePageShareStorage : NSObject <PBCoding> {
	NSMutableArray* m_shakeShare;
}
@property(retain, nonatomic) NSMutableArray* m_shakeShare;
+(void)initialize;
+(void)_initPBTableOfShakePageShareStorage;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakePeopleItem : NSObject <PBCoding, NSCoding> {
	NSString* m_nsUserName;
	NSString* m_nsNickName;
	NSString* m_nsCountry;
	NSString* m_nsProvince;
	NSString* m_nsCity;
	unsigned long m_uiSex;
	NSString* m_nsDistance;
	NSString* m_nsSignature;
	unsigned long m_uiScene;
	NSString* m_nsWeiboAddress;
	NSString* m_nsWeiboNickName;
	unsigned long m_uiWeiboFlag;
	unsigned long m_uiVerifyFlag;
	NSString* m_nsVerifyInfo;
	NSString* m_nsVerifyContent;
	NSString* m_nsWCBGImgObjectID;
	int m_iAlbumFlag;
	NSString* m_pcAlbumBGImgID;
	NSString* m_nsExternalInfo;
	NSString* m_nsBrandSubscriptConfigUrl;
	unsigned long m_uiBrandSubscriptionSettings;
	SubscriptBrandInfo* m_subBrandInfo;
	NSString* m_nsBrandIconUrl;
	unsigned m_createTime;
	NSString* m_headImgUrl;
	NSString* m_nsHeadHDImgUrl;
}
@property(retain, nonatomic) NSString* m_nsHeadHDImgUrl;
@property(retain, nonatomic) NSString* m_headImgUrl;
@property(assign, nonatomic) unsigned m_createTime;
@property(retain, nonatomic) NSString* m_nsBrandIconUrl;
@property(retain, nonatomic) SubscriptBrandInfo* m_subBrandInfo;
@property(assign, nonatomic) unsigned long m_uiBrandSubscriptionSettings;
@property(retain, nonatomic) NSString* m_nsBrandSubscriptConfigUrl;
@property(retain, nonatomic) NSString* m_nsExternalInfo;
@property(retain, nonatomic) NSString* m_pcAlbumBGImgID;
@property(assign, nonatomic) int m_iAlbumFlag;
@property(retain, nonatomic) NSString* m_nsWCBGImgObjectID;
@property(retain, nonatomic) NSString* m_nsVerifyContent;
@property(retain, nonatomic) NSString* m_nsVerifyInfo;
@property(assign, nonatomic) unsigned long m_uiVerifyFlag;
@property(assign, nonatomic) unsigned long m_uiWeiboFlag;
@property(retain, nonatomic) NSString* m_nsWeiboNickName;
@property(retain, nonatomic) NSString* m_nsWeiboAddress;
@property(assign, nonatomic) unsigned long m_uiScene;
@property(retain, nonatomic) NSString* m_nsSignature;
@property(retain, nonatomic) NSString* m_nsDistance;
@property(assign, nonatomic) unsigned long m_uiSex;
@property(retain, nonatomic) NSString* m_nsCity;
@property(retain, nonatomic) NSString* m_nsProvince;
@property(retain, nonatomic) NSString* m_nsCountry;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsUserName;
+(void)initialize;
+(void)_initPBTableOfShakePeopleItem;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(void)dealloc;
-(id)init;
-(void)preInit;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakePeopleStorage : NSObject <PBCoding, NSCoding, NSCopying> {
	NSMutableArray* m_arrShakeList;
	unsigned long m_uiSoundStatus;
	unsigned long m_uiNewArriveCount;
}
@property(assign, nonatomic) unsigned long m_uiNewArriveCount;
@property(assign, nonatomic) unsigned long m_uiSoundStatus;
@property(retain, nonatomic) NSMutableArray* m_arrShakeList;
+(void)initialize;
+(void)_initPBTableOfShakePeopleStorage;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(void)preInit;
-(id)copyWithZone:(NSZone*)zone;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakeInfo : NSObject <NSCoding> {
	unsigned long m_uiShakeTimes;
	unsigned long m_uiBackGroundImgID;
}
@property(assign, nonatomic) unsigned long m_uiBackGroundImgID;
@property(assign, nonatomic) unsigned long m_uiShakeTimes;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(void)preInit;
@end

@interface CStatReportMgr : MMService <MMService> {
	unsigned long m_uiChatBGImgID;
	BOOL m_bReportChatBG;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapSceneCount;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapEggSendCount;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapEggRecvCount;
	unsigned long m_uiGoogleCount;
	unsigned long m_uiQQMailCount;
	NSTimer* m_tmCheck;
	NSMutableDictionary* m_selfHomepageEntryCountMap;
	int m_wcBigPhotoViewCount;
	unsigned long m_nFBOpLogCount;
	NSMutableArray* m_arrFacebookConnectCount;
	NSMutableArray* m_arrFacebookLinkCount;
	NSMutableArray* m_arrFacebookInviteCount;
	NSMutableArray* m_arrLanguagePackageDownload;
	unsigned long m_uiTwitterAuthCount;
	unsigned long m_uiTwitterAuthSuccessCount;
	unsigned long m_uiTwitterAuthFailedCount;
	NSMutableArray* m_arrLbsCdnStat;
	NSMutableArray* m_arrSnsCdnStat;
	unsigned long m_uiMusicTimeLineCount;
	unsigned long m_uiMusicMessageCount;
	map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > > m_mapTapCount;
	NSMutableDictionary* m_map3rdAppInstallCount;
	NSMutableDictionary* m_mapVoipTenMinsLogicCount;
	unsigned long m_uiEnterShakeViewFromSession;
	unsigned long m_uiEnterShakeViewFromFindFriend;
	unsigned long m_uiVisitWebPage;
	unsigned long m_uiForwardPhoto;
	unsigned long m_uiShareWebPage;
}
@property(retain, nonatomic) NSTimer* m_tmCheck;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)onServiceClearData;
-(void)AddPushFromUserName:(id)userName msgType:(id)type isLocal:(id)local;
-(void)EndOfSnsCdn;
-(void)AddSnsBigCdn:(id)cdn;
-(void)AddSnsSmallCdn:(id)cdn;
-(void)PrepareForSnsCdn;
-(void)EndOfLbsCdn;
-(void)AddLbsCdn:(id)cdn;
-(void)PrepareForLbsCdn;
-(void)AddResourceCleanPerformance:(unsigned long)performance CleanSize:(unsigned long)size CleanFileCount:(unsigned long)count LoadDataCostTime:(unsigned long)time;
-(void)ShareWebpagePlusOne;
-(void)ForwardPhotoPlusOne;
-(void)VisitWebpagePlusOne;
-(void)EntryShakeViewFromFindFriendPlusOne;
-(void)EntryShakeViewFromSessionPlusOne;
-(void)AddVoipTenMinsLogicReport:(id)report;
-(void)VoipSendInviteCountPlusOne:(id)one;
-(void)VoipTenMinsLogicCountPlusOne:(id)one;
-(void)Add3rdAppInstallStatusReport:(id)report;
-(void)Add3rdAppInstallStatusCount:(id)count andStatus:(unsigned long)status;
-(void)AddTapCount:(id)count;
-(void)TapCount:(unsigned long)count;
-(void)AddMusicReport:(id)report;
-(void)AddMusicMessage;
-(void)AddMusicTimeLine;
-(void)AddQQMailClickReport:(id)report;
-(void)AddQQMailClickCount;
-(void)AddLanguagePackageDownloadTimeCost:(id)cost;
-(void)languagePackageDownloadTimeCost:(unsigned long)cost Lang:(id)lang isSucc:(BOOL)succ;
-(void)AddTwitterReportAllInOne;
-(void)TwitterAuthFailedCountPlusOne;
-(void)TwitterAuthSuccessCountPlusOne;
-(void)TwitterAuthCountPlusOne;
-(void)AddFacebookReportAllInOne:(id)one;
-(void)FacebookInviteCountPlus:(unsigned long)plus;
-(void)FacebookLinkFailurePlusOne;
-(void)FacebookLinkSuccessPlusOne;
-(void)FacebookLinkCountPlusOne;
-(void)FacebookLinkCount:(unsigned long)count;
-(void)FacebookConnentFailurePlusOne;
-(void)FacebookConnentSuccessPlusOne;
-(void)FacebookConnentCountPlusOne;
-(void)FacebookConnentCount:(unsigned long)count;
-(bool)ifReachFBOplogLimit;
-(void)AddEggRecvReport:(id)report;
-(void)AddEggRecvCount:(unsigned long)count;
-(void)AddEggSendReport:(id)report;
-(void)AddEggSendCount:(unsigned long)count;
-(void)AddWCBigPhotoViewCountReport:(id)report;
-(void)AddWCBigPhotoViewCount;
-(void)AddWCSelfHomepageEntryCountReport:(id)report;
-(void)AddWCSelfHomepageEntryCount:(int)count;
-(void)AddGoogleReport:(id)report;
-(void)AddGoogleTapCount;
-(void)AddSceneReport:(id)report;
-(void)AddSceneTapCount:(unsigned long)count;
-(void)AddChatBGImgReport:(id)report;
-(void)SetChatBGImgID:(unsigned long)anId;
-(void)StopTimer;
-(void)dealloc;
-(id)init;
-(void)CheckReport;
@end

@interface CgiPropertyEditViewController : MMUIViewController <UITextFieldDelegate> {
	UITextField* m_textField;
	MMDelegateProxy<CgiPropertyEditDelegate>* m_delegate;
	int m_section;
	BOOL m_isLong;
	UITextView* m_textView;
}
@property(retain, nonatomic) MMDelegateProxy<CgiPropertyEditDelegate>* delegate;
-(void)willDisappear;
-(void)dealloc;
-(id)initWithProperty:(id)property section:(int)section propertyName:(id)name;
@end

@interface MCssParser : NSObject {
	id<MCssParserDelegate> m_delegate;
	NSRecursiveLock* m_oLock;
	NSString* m_currentFile;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedCssParser;
+(void)initialize;
-(void)startWithDelegate:(id)delegate;
-(BOOL)isParsing;
-(void)onScriptFunctionWithSelectors:(id)selectors withStatements:(id)statements;
-(void)onCssRuleSetWithSelectors:(id)selectors withDeclarations:(id)declarations;
-(void)onParseErrorOnLineNumber:(id)number withText:(id)text withErrorMessage:(id)errorMessage;
-(BOOL)onParseNextFile;
-(void)startParseCssFiles;
-(void)cleanUpLexer;
-(BOOL)openNextCssFile;
-(void)safeCloseCssFile;
-(void)dealloc;
-(id)init;
@end

@interface MMResPackageMgr : MMService <MMService, MMPackageDownloadMgrExt> {
	NSMutableDictionary* m_resMap;
}
+(BOOL)RenameResRoot;
-(id)pathForResNamed:(id)resNamed withPID:(id)pid;
-(void)onPackageCancelFinish:(id)finish;
-(void)onPackageDownloadFinish:(id)finish package:(id)package;
-(void)onPackageDownloadProcessUpdated:(id)updated downloadSize:(int)size totalSize:(int)size3;
-(void)onPackageListUpdated:(id)updated;
-(void)cancelResPackageDownload:(id)download;
-(float)getResPackageSize:(id)size;
-(void)downloadResPackage:(id)package;
-(BOOL)isResPackageReady:(id)ready;
-(BOOL)createDirIfNotExist:(id)exist;
-(void)dealloc;
-(id)init;
@end

@interface MMColor : NSObject <MCssParserDelegate> {
	NSMutableDictionary* m_colorDictionary;
	BOOL m_isAlreadyParsed;
	BOOL m_isParseOK;
	NSString* m_colorCssPath;
}
@property(retain, nonatomic) NSString* colorCssPath;
@property(retain, nonatomic) NSMutableDictionary* colorDictionary;
-(BOOL)loadColorFromPath:(id)path;
-(id)getColorByName:(id)name withAlpha:(float)alpha;
-(id)getColorByName:(id)name;
-(BOOL)startParse;
-(void)onCssParseEnd;
-(void)onCssParseStart;
-(id)onNextCssFile;
-(void)onParseErrorInFile:(id)file onLineNumber:(id)number withText:(id)text withErrorMessage:(id)errorMessage;
-(void)onReceiveCssRulesetWithSelectors:(id)selectors withDeclarations:(id)declarations;
-(void)onScriptFunctionWithSelectors:(id)selectors withStatements:(id)statements;
-(void)dealloc;
-(id)init;
-(id)getColorDictionaryObjectForKey:(id)key;
-(void)removeColorDictionaryObjectForKey:(id)key;
-(void)setColorDictionaryObject:(id)object forKey:(id)key;
@end

@interface FavRecordToolBar : UIView {
	UIView* _toolbarAttach;
	id<FavRecordToolBarDelegate> _delegate;
}
@property(assign, nonatomic) id<FavRecordToolBarDelegate> delegate;
-(void)dealloc;
-(id)addToolbarButton:(id)button index:(int)index;
-(void)initView;
-(id)init;
@end

@interface MMDrawFunction : NSObject {
	NSDictionary* signature;
	NSArray* statements;
}
@property(retain, nonatomic) NSArray* statements;
@property(retain, nonatomic) NSDictionary* signature;
-(int)indexOfArg:(id)arg;
-(void)dealloc;
@end

@interface MMDrawScript : NSObject <MCssParserDelegate> {
	NSMutableDictionary* m_drawScripts;
	BOOL m_isAlreadyParsed;
	BOOL m_isParseOK;
	BOOL m_isParseError;
	NSString* m_scriptFilePath;
}
@property(retain, nonatomic) NSString* m_scriptFilePath;
@property(assign, nonatomic) BOOL m_isParseError;
@property(assign, nonatomic) BOOL m_isParseOK;
@property(assign, nonatomic) BOOL m_isAlreadyParsed;
@property(retain, nonatomic) NSMutableDictionary* m_drawScripts;
-(void)clearAllScripts;
-(BOOL)loadScriptsFromPath:(id)path;
-(BOOL)startParse;
-(void)onCssParseEnd;
-(void)onCssParseStart;
-(id)onNextCssFile;
-(void)onParseErrorInFile:(id)file onLineNumber:(id)number withText:(id)text withErrorMessage:(id)errorMessage;
-(void)onReceiveCssRulesetWithSelectors:(id)selectors withDeclarations:(id)declarations;
-(void)onScriptFunctionWithSelectors:(id)selectors withStatements:(id)statements;
-(void)dealloc;
-(void)setDrawFunctionByName:(id)name withFunction:(id)function;
-(id)getDrawFunctionByName:(id)name;
@end

@interface MMRuleSetList : NSObject <MCssParserDelegate> {
	NSMutableDictionary* m_ruleSets;
	BOOL m_isAlreadyParsed;
	BOOL m_isParseOK;
	BOOL m_isParseError;
	NSString* m_styleSheetFilePath;
}
@property(retain, nonatomic) NSString* styleSheetFilePath;
@property(retain, nonatomic) NSMutableDictionary* ruleSets;
-(void)clearAllRuleSets;
-(BOOL)loadRuleSetsFromPath:(id)path;
-(BOOL)startParse;
-(void)onCssParseEnd;
-(void)onCssParseStart;
-(id)onNextCssFile;
-(void)onParseErrorInFile:(id)file onLineNumber:(id)number withText:(id)text withErrorMessage:(id)errorMessage;
-(void)onReceiveCssRulesetWithSelectors:(id)selectors withDeclarations:(id)declarations;
-(void)onScriptFunctionWithSelectors:(id)selectors withStatements:(id)statements;
-(void)dealloc;
-(id)init;
-(void)addOrMergeRuleSet:(id)set forSelector:(id)selector;
-(id)getValueOfProperty:(id)property forSeletor:(id)seletor;
-(id)getRuleSetForSeletor:(id)seletor;
-(void)removeRuleSetForKey:(id)key;
-(void)setRuleSet:(id)set forKey:(id)key;
@end

@interface MMScriptInterpreter : NSObject {
	MMDrawScript* m_script;
	NSMutableArray* m_stack;
	NSMutableDictionary* m_statics;
	NSMutableDictionary* m_buildInActions;
	CGContextRef m_context;
	CGPathRef m_path;
	UIFont* m_font;
}
@property(retain, nonatomic) UIFont* m_font;
@property(assign, nonatomic) CGContextRef m_context;
@property(retain, nonatomic) NSMutableDictionary* m_buildInActions;
@property(retain, nonatomic) NSMutableDictionary* m_statics;
@property(retain, nonatomic) NSMutableArray* m_stack;
@property(retain, nonatomic) MMDrawScript* m_script;
-(void)ActionText:(id)text;
-(void)ActionFont:(id)font;
-(void)ActionImage:(id)image;
-(void)ActionFill:(id)fill;
-(void)ActionStroke:(id)stroke;
-(void)ActionStyle:(id)style;
-(void)ActionShadow:(id)shadow;
-(void)ActionPop:(id)pop;
-(void)ActionPush:(id)push;
-(void)ActionScale:(id)scale;
-(void)ActionRotate:(id)rotate;
-(void)ActionMove:(id)move;
-(void)ActionClip:(id)clip;
-(void)ActionRound:(id)round;
-(void)ActionArc:(id)arc;
-(void)ActionCurve:(id)curve;
-(void)ActionEnd:(id)end;
-(void)ActionStart:(id)start;
-(void)ActionCircle:(id)circle;
-(void)ActionLine:(id)line;
-(void)ActionRect:(id)rect;
-(void)ActionClear:(id)clear;
-(id)initWithScript:(id)script;
-(CGSize)getSizeFromFunction:(id)function withArguments:(id)arguments;
-(void)callFunctionByName:(id)name withArguments:(id)arguments;
-(void)clearStack;
-(void)pushStack:(id)stack;
-(SEL)actionByName:(id)name;
-(void)dealloc;
-(void)push:(id)push;
-(id)pop;
-(id)stackVarAtIndex:(unsigned)index;
-(unsigned)sizeOfStack;
-(id)getStatic:(id)aStatic;
-(void)setStatic:(id)aStatic forKey:(id)key;
@end

@interface MMTheme : NSObject <MCssParserDelegate> {
	NSString* m_tid;
	NSString* m_name;
	NSString* m_icon;
	NSString* m_version;
	NSString* m_author;
	NSString* m_discription;
	NSString* m_website;
	NSString* m_basePath;
	int m_totalSize;
	int m_finishedSize;
	int m_themeType;
	BOOL m_isAlreadyParsed;
	BOOL m_isParseOK;
}
@property(assign, nonatomic) int themeType;
@property(assign, nonatomic) int finishedSize;
@property(assign, nonatomic) int totalSize;
@property(retain, nonatomic) NSString* basePath;
@property(retain, nonatomic) NSString* website;
@property(retain, nonatomic) NSString* discription;
@property(retain, nonatomic) NSString* author;
@property(retain, nonatomic) NSString* version;
@property(retain, nonatomic) NSString* icon;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* tid;
+(id)defaultTheme;
+(id)themeFromPath:(id)path;
-(int)getThemeType;
-(id)getThemeIcon;
-(id)pathForLocalizedResource:(id)localizedResource;
-(id)pathForResource:(id)resource;
-(void)setAsDefaultTheme;
-(BOOL)isDefaultTheme;
-(BOOL)startParse;
-(void)onCssParseEnd;
-(void)onCssParseStart;
-(id)onNextCssFile;
-(void)onParseErrorInFile:(id)file onLineNumber:(id)number withText:(id)text withErrorMessage:(id)errorMessage;
-(void)onReceiveCssRulesetWithSelectors:(id)selectors withDeclarations:(id)declarations;
-(void)onScriptFunctionWithSelectors:(id)selectors withStatements:(id)statements;
-(void)dealloc;
-(id)initWithBasePath:(id)basePath;
-(id)description;
-(id)keyPaths;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface MMThemeManager : MMService <MMService> {
	NSMutableArray* m_themeList;
	MMTheme* m_currentTheme;
	MMColor* m_colorList;
	NSMutableDictionary* m_imageCache;
	int m_cachedImageSize;
	MMRuleSetList* m_ruleSetList;
	MMRuleSetList* m_imageMapList;
	MMRuleSetList* m_resMapList;
	NSThread* m_backgroundWorkerThread;
	MMDrawScript* m_drawScripts;
	MMScriptInterpreter* m_scriptInterpreter;
	NSRecursiveLock* m_lock;
}
@property(retain, nonatomic) NSRecursiveLock* lock;
@property(retain, nonatomic) NSThread* backgroundWorkerThread;
@property(retain, nonatomic) MMScriptInterpreter* m_scriptInterpreter;
@property(retain, nonatomic) MMDrawScript* m_drawScripts;
@property(retain, nonatomic) MMRuleSetList* m_resMapList;
@property(retain, nonatomic) MMRuleSetList* m_imageMapList;
@property(retain, nonatomic) MMRuleSetList* ruleSetList;
@property(retain, nonatomic) NSMutableDictionary* imageCache;
@property(retain, nonatomic) NSMutableArray* themeList;
@property(retain, nonatomic) MMColor* colorList;
@property(retain, nonatomic) MMTheme* currentTheme;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedThemeManager;
+(void)initialize;
-(BOOL)onServiceMemoryWarning;
-(void)onFirstRun;
-(BOOL)changeThemeByThemeID:(id)anId;
-(int)reloadThemeList;
-(void)waitForInstallDone;
-(BOOL)isInstallDone;
-(void)installThemeInBundleInBackground:(int)background;
-(void)startInstallThreadAfterDelay;
-(void)installThemeInBundle;
-(void)onBackgroundInstallDone;
-(BOOL)installThemeUpdatePack:(id)pack;
-(void)uninstallAllThemes;
-(BOOL)isThemeDirExist;
-(id)getThemeDir;
-(id)imageFromScript:(id)script withArguments:(id)arguments;
-(void)runScript:(id)script withArguments:(id)arguments;
-(void)clearImageCache;
-(id)getValueOfProperty:(id)property inRuleSet:(id)ruleSet;
-(id)getRuleSetForSeletor:(id)seletor;
-(id)imageFromColor:(id)color;
-(id)localizedImageNamed:(id)named;
-(id)localizedImageNamed:(id)named inTheme:(id)theme;
-(id)imageNamed:(id)named;
-(id)image_for_different_ios_version:(id)version;
-(id)imageFromSystemFileContent:(id)systemFileContent;
-(id)imageFromImageMap:(id)imageMap;
-(id)pathOfResNamed:(id)resNamed;
-(id)pathOfImageNamed:(id)imageNamed;
-(id)imageFromResPackage:(id)resPackage withName:(id)name;
-(id)imageNamed:(id)named inTheme:(id)theme;
-(id)imageNamedWithCurTheme:(id)curTheme;
-(void)setUserPreferedTheme:(id)theme;
-(BOOL)loadUserPreferedThemeNoCallExtension;
-(BOOL)loadUserPreferedTheme;
-(BOOL)loadDefaultTheme;
-(id)getUserThemeIDPrefKey;
-(BOOL)needToClearCache;
-(void)removeImageSizeFromCachedSize:(id)cachedSize;
-(void)addImageSizeToCachedSize:(id)cachedSize;
-(void)reloadThemeResource;
-(void)loadScripts;
-(void)loadColors;
-(void)loadImageMap;
-(void)loadResPackageSetting;
-(void)loadRuleSets;
-(BOOL)unPackThemePackToThemeDir;
-(BOOL)isThemesZipInBundle;
-(id)getThemeByThemeID:(id)anId;
-(id)getDefaultTheme;
-(id)fileOfImageNamed:(id)imageNamed;
-(BOOL)is568H2xScreen;
-(BOOL)is2xScreen;
-(void)dealloc;
-(id)init;
-(void)removeFromThemeList:(id)themeList;
-(void)addToThemeList:(id)themeList;
-(id)getImageCacheObjectForKey:(id)key;
-(void)removeImageCacheObjectForKey:(id)key;
-(void)setImageCacheObject:(id)object forKey:(id)key;
@end

@interface MMThemeUtil : NSObject {
}
+(void)setUITextField:(id)field FromDictionary:(id)dictionary;
+(void)setUIButton:(id)button FromDictionary:(id)dictionary;
+(void)setUIControl:(id)control FromDictionary:(id)dictionary;
+(void)setUITableViewCell:(id)cell FromDictionary:(id)dictionary;
+(void)setUIImageView:(id)view FromDictionary:(id)dictionary;
+(void)setUILabel:(id)label FromDictionary:(id)dictionary;
+(void)setUIView:(id)view FromDictionary:(id)dictionary;
+(id)parseColorFromValues:(id)values;
+(UIEdgeInsets)parseEdgeInsetsFromValues:(id)values;
+(CGRect)parseRectFromValues:(id)values;
+(id)parseStringFromValues:(id)values;
+(id)parseStrechedImageFromValues:(id)values;
+(id)parseStrechedImageFromValues_for_different_ios_version:(id)values_for_different_ios_version;
+(CGSize)parseSizeFromValues:(id)values;
+(CGPoint)parsePointFromValues:(id)values;
+(float)parseFloatFromValues:(id)values;
+(int)parseIntegerFromValues:(id)values;
+(id)parseFontFromValues:(id)values;
+(BOOL)parseBOOLFromValues:(id)values;
@end

@interface GTMOAuthAuthentication : NSObject {
	NSMutableDictionary* paramValues_;
	NSString* realm_;
	NSString* privateKey_;
	NSString* timestamp_;
	NSString* nonce_;
	BOOL hasAccessToken_;
	BOOL shouldUseParamsToAuthorize_;
	id userData_;
}
@property(retain, nonatomic) id userData;
@property(readonly, assign, nonatomic) BOOL canAuthorize;
@property(assign, nonatomic) BOOL shouldUseParamsToAuthorize;
@property(copy, nonatomic) NSString* accessToken;
@property(copy, nonatomic) NSString* userEmailIsVerified;
@property(copy, nonatomic) NSString* userEmail;
@property(copy, nonatomic) NSString* serviceProvider;
@property(copy, nonatomic) NSString* privateKey;
@property(copy, nonatomic) NSString* realm;
@property(copy, nonatomic) NSString* nonce;
@property(copy, nonatomic) NSString* timestamp;
@property(copy, nonatomic) NSString* callbackConfirmed;
@property(copy, nonatomic) NSString* tokenSecret;
@property(copy, nonatomic) NSString* verifier;
@property(copy, nonatomic) NSString* callback;
@property(copy, nonatomic) NSString* token;
@property(copy, nonatomic) NSString* version;
@property(copy, nonatomic) NSString* signatureMethod;
@property(copy, nonatomic) NSString* consumerKey;
@property(copy, nonatomic) NSString* mobile;
@property(copy, nonatomic) NSString* language;
@property(copy, nonatomic) NSString* iconURLString;
@property(copy, nonatomic) NSString* domain;
@property(copy, nonatomic) NSString* hostedDomain;
@property(copy, nonatomic) NSString* displayName;
@property(copy, nonatomic) NSString* scope;
+(id)normalizeQueryString:(id)string;
+(id)stringWithBase64ForData:(id)data;
+(id)HMACSHA1HashForConsumerSecret:(id)consumerSecret tokenSecret:(id)secret body:(id)body;
+(id)scopeWithStrings:(id)strings;
+(id)dictionaryWithResponseData:(id)responseData;
+(id)dictionaryWithResponseString:(id)responseString;
+(id)unencodedOAuthParameterForString:(id)string;
+(id)encodedOAuthParameterForString:(id)string;
+(id)tokenResourceKeys;
+(id)tokenAccessKeys;
+(id)tokenAuthorizeKeys;
+(id)tokenRequestKeys;
+(id)paramStringForParams:(id)params joiner:(id)joiner shouldQuote:(BOOL)quote shouldSort:(BOOL)sort;
+(void)addBodyFromRequest:(id)request toParams:(id)params;
+(void)addQueryFromRequest:(id)request toParams:(id)params;
+(void)addQueryString:(id)string toParams:(id)params;
+(id)authForInstalledApp;
-(void)setHasAccessToken:(BOOL)token;
-(BOOL)hasAccessToken;
-(void)reset;
-(id)persistenceResponseString;
-(void)setKeysForPersistenceResponseString:(id)persistenceResponseString;
-(BOOL)isAuthorizedRequest:(id)request;
-(BOOL)isAuthorizingRequest:(id)request;
-(void)stopAuthorization;
-(void)authorizeRequest:(id)request delegate:(id)delegate didFinishSelector:(SEL)selector;
-(BOOL)authorizeRequest:(id)request;
-(void)addAuthorizationHeaderToRequest:(id)request forKeys:(id)keys;
-(void)addParamsForKeys:(id)keys toRequest:(id)request;
-(void)addParams:(id)params toRequest:(id)request;
-(void)addResourceTokenParamsToRequest:(id)request;
-(void)addResourceTokenHeaderToRequest:(id)request;
-(void)addAccessTokenParamsToRequest:(id)request;
-(void)addAccessTokenHeaderToRequest:(id)request;
-(void)addAuthorizeTokenParamsToRequest:(id)request;
-(void)addAuthorizeTokenHeaderToRequest:(id)request;
-(void)addRequestTokenParamsToRequest:(id)request;
-(void)addRequestTokenHeaderToRequest:(id)request;
-(void)setKeysForResponseString:(id)responseString;
-(void)setKeysForResponseData:(id)responseData;
-(void)setKeysForResponseDictionary:(id)responseDictionary;
-(id)normalizedRequestURLStringForRequest:(id)request;
-(id)signatureForParams:(id)params request:(id)request;
-(id)paramsForKeys:(id)keys request:(id)request;
-(void)dealloc;
-(id)initWithSignatureMethod:(id)signatureMethod consumerKey:(id)key privateKey:(id)key3;
@end

@interface OAuthParameter : NSObject {
	NSString* name_;
	NSString* value_;
}
@property(copy, nonatomic) NSString* value;
@property(copy, nonatomic) NSString* name;
+(id)sortDescriptors;
+(id)parameterWithName:(id)name value:(id)value;
-(id)description;
-(id)quotedEncodedParam;
-(id)encodedParam;
-(id)encodedName;
-(id)encodedValue;
-(void)dealloc;
@end

@interface TwitterArchiveData : NSObject <NSCoding> {
	NSString* m_nsAccessToken;
	NSString* m_nsAccessTokenSecret;
}
@property(retain, nonatomic) NSString* m_nsAccessTokenSecret;
@property(retain, nonatomic) NSString* m_nsAccessToken;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@interface MMTwitterAuth : NSObject <NSURLConnectionDelegate> {
	GTMOAuthAuthentication* m_OAuth;
	NSMutableData* m_revData;
	int m_nRespStatusCode;
	NSURLConnection* m_verifyTokenConn;
}
@property(retain, nonatomic) NSURLConnection* m_verifyTokenConn;
@property(retain, nonatomic) NSMutableData* m_revData;
@property(retain, nonatomic) GTMOAuthAuthentication* m_OAuth;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)verifyReturned;
-(void)verifyAccessTokenValid;
-(BOOL)hasRequestToken;
-(void)startAuth;
-(void)convertingRequestTokenToAccessToken:(id)accessToken;
-(void)redirectUser;
-(void)obtainRequestToken;
-(void)SaveData;
-(void)LoadData;
-(id)getTwitterArchivePath;
-(void)dealloc;
-(id)init;
@end

@interface MMTwitterMgr : MMService <MMService, NSURLConnectionDelegate> {
	MMTwitterAuth* m_TwitterAuth;
}
@property(retain, nonatomic) MMTwitterAuth* m_TwitterAuth;
-(BOOL)hasAccessToken;
-(void)verifyAccessTokenValid;
-(void)didTwitterLogin:(id)login;
-(void)startAuth;
-(void)dealloc;
-(id)init;
@end

@interface InputQueueItem : NSObject {
	unsigned long voiceId;
	unsigned long offset;
	unsigned long length;
	unsigned long endflag;
	unsigned long trycount;
}
@property(assign, nonatomic) unsigned long trycount;
@property(assign, nonatomic) unsigned long endflag;
@property(assign, nonatomic) unsigned long length;
@property(assign, nonatomic) unsigned long offset;
@property(assign, nonatomic) unsigned long voiceId;
@end

@interface UploadInputVoiceMgr : MMObject <PBMessageObserverDelegate> {
	unsigned long _curVoiceId;
	BOOL _isUploading;
	BOOL _isEnd;
	NSMutableArray* _uploadQueue;
	MMDelegateProxy<UploadInputVoiceMgrDelegate>* delegate;
	NSTimer* checkUploadQueueTimer;
}
@property(retain, nonatomic) NSTimer* checkUploadQueueTimer;
@property(assign, nonatomic) MMDelegateProxy<UploadInputVoiceMgrDelegate>* delegate;
-(void)AddNewPart:(unsigned long)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag;
-(void)MainUpdateQueue:(id)queue;
-(void)Stop;
-(void)Start:(unsigned long)start;
-(void)dealloc;
-(id)init;
-(void)doUpload:(unsigned long)upload Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag;
-(void)checkUploadQueue;
-(void)stopUploadTaskWithErr:(int)err;
-(void)stopUploadTask;
-(void)clearTempFile;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
@end

@interface VoiceInputMgr : MMService <MMService, SPXAudioRecorderDelegate, UploadInputVoiceMgrDelegate> {
	unsigned long _curInputId;
	SPXAudioRecorder* _recoder;
	UploadInputVoiceMgr* _uploadMgr;
}
-(void)OnNetworkError:(unsigned long)error;
-(void)OnLocalFileOperationError;
-(void)OnGetText:(id)text VoiceId:(unsigned long)anId;
-(void)OnSPXPart:(id)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnSPXEndRecording:(id)recording;
-(void)OnSPXBeginRecording:(id)recording ErrNo:(int)no;
-(void)OnSPXLevelMeter:(id)meter Peak:(float)peak;
-(BOOL)StopSearch:(unsigned long)search;
-(BOOL)StopRecord:(unsigned long)record;
-(int)StartInput;
-(void)dealloc;
-(id)init;
@end

@interface VoiceReminderMgr : MMService <MMService, PBMessageObserverDelegate, IMsgExt> {
	NSMutableDictionary* _dicRemindId;
}
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)deleteRemindMsgs:(id)msgs;
-(void)dealloc;
-(id)init;
-(BOOL)shouldNotifyRemindMsg:(id)msg;
-(void)doRemindMsgsOp:(unsigned long)op arrRemindId:(id)anId;
-(void)onRemindMsgsOpReturn:(id)aReturn Event:(unsigned long)event;
@end

@interface WCPayPaidSuccessLogic : WCPayControlLogic <WCPayOrderDetailHistoryViewControllerDelegate> {
	int m_eWCPayPaidSuccessLogicWCPaySituationType;
}
-(void)OnSelectedSuccessBtnDown;
-(void)OnClickedBrandAppUserName:(id)name NickName:(id)name2;
-(void)OnHistoryOrderDetailRightActionBack:(BOOL)back;
-(void)OnHistoryOrderDetailBack:(BOOL)back;
-(void)stopLogic;
-(void)startLogic;
-(void)convertIAPOrderDetailToWCPayOrderDetailStruct;
-(void)setPayPaidSuccessLogicSituationType:(int)type;
@end

@interface SearchQueueItem : NSObject {
	unsigned long voiceId;
	unsigned long offset;
	unsigned long length;
	unsigned long endflag;
	unsigned long trycount;
}
@property(assign, nonatomic) unsigned long trycount;
@property(assign, nonatomic) unsigned long endflag;
@property(assign, nonatomic) unsigned long length;
@property(assign, nonatomic) unsigned long offset;
@property(assign, nonatomic) unsigned long voiceId;
@end

@interface UploadSearchVoiceMgr : MMObject <PBMessageObserverDelegate> {
	unsigned long _searchType;
	unsigned long _curVoiceId;
	BOOL _isUploading;
	BOOL _isEnd;
	NSMutableArray* _uploadQueue;
	MMDelegateProxy<UploadSearchVoiceMgrDelegate>* delegate;
	NSTimer* checkUploadQueueTimer;
}
@property(retain, nonatomic) NSTimer* checkUploadQueueTimer;
@property(assign, nonatomic) MMDelegateProxy<UploadSearchVoiceMgrDelegate>* delegate;
-(void)AddNewPart:(unsigned long)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag;
-(void)MainUpdateQueue:(id)queue;
-(void)Stop;
-(void)Start:(unsigned long)start SearchType:(unsigned long)type;
-(void)dealloc;
-(id)init;
-(void)doUpload:(unsigned long)upload Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag;
-(void)checkUploadQueue;
-(void)stopUploadTaskWithErr:(int)err;
-(void)stopUploadTask;
-(void)clearTempFile;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
@end

@interface VoiceSearchMgr : MMService <MMService, SPXAudioRecorderDelegate, UploadSearchVoiceMgrDelegate> {
	unsigned long _curSearchId;
	SPXAudioRecorder* _recoder;
	UploadSearchVoiceMgr* _uploadMgr;
}
-(void)OnNetworkError:(unsigned long)error;
-(void)OnLocalFileOperationError;
-(void)OnGetResult:(id)result VoiceId:(unsigned long)anId;
-(void)OnSPXPart:(id)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnSPXEndRecording:(id)recording;
-(void)OnSPXBeginRecording:(id)recording ErrNo:(int)no;
-(void)OnSPXLevelMeter:(id)meter Peak:(float)peak;
-(BOOL)StopSearch:(unsigned long)search;
-(BOOL)StopRecord:(unsigned long)record;
-(int)StartSearchSession;
-(int)StartSearchContact;
-(int)StartSearchWithType:(unsigned long)type;
-(void)dealloc;
-(id)init;
@end

@interface AVVideoDevice : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate> {
	BOOL mIsCameraFront;
	char* mCameraBuf;
	id<AVVideoDataSource> mRecDevCallBack;
	AVCaptureSession* session;
	AVCaptureDeviceInput* videoInput;
	AVCaptureVideoDataOutput* videoDataOutput;
	id<AVVideoDeviceDelegate> delegate;
	id<AVVideoDataSource> dataSource;
}
@property(assign, nonatomic) id<AVVideoDataSource> dataSource;
@property(assign) id<AVVideoDeviceDelegate> delegate;
@property(retain, nonatomic) AVCaptureVideoDataOutput* videoDataOutput;
@property(retain, nonatomic) AVCaptureDeviceInput* videoInput;
@property(retain, nonatomic) AVCaptureSession* session;
-(BOOL)isCameraFront;
-(unsigned)cameraCount;
-(void)toggleCamera;
-(id)previewLayer:(CGRect)layer;
-(void)stopSession;
-(void)startSession;
-(BOOL)setupSessionWithCameraFront:(BOOL)cameraFront;
-(void)dealloc;
-(id)init;
-(id)cameraWithPosition:(int)position;
-(id)backFacingCamera;
-(id)frontFacingCamera;
-(void)setTorchModeOff;
-(void)setTorchModeOn;
-(void)setFlashModeOff;
-(void)setFlashModeOn;
-(void)setFrameDuration;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)newVideoSample:(opaqueCMSampleBuffer*)sample;
@end

@interface LView : UIImageView {
	id<NSObject> targetor;
	SEL selector;
	AVCaptureVideoPreviewLayer* mpLocalLayer;
	BOOL mIsCameraFront;
}
@property(retain, nonatomic) AVCaptureVideoPreviewLayer* localLayer;
-(void)switchLocalView:(BOOL)view;
-(void)dealloc;
-(void)changeFrame:(CGRect)frame;
-(void)renderImage:(char*)image Width:(unsigned long)width Height:(unsigned long)height;
-(void)stopRender;
-(void)restartRender;
-(void)transformFrontImage;
-(void)transformBackImage;
-(void)addSingleTapTarget:(id)target action:(SEL)action;
-(id)initWithView:(id)view Layer:(id)layer;
-(id)initWithFrame:(CGRect)frame;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)checkTouchPoint:(CGPoint)point IfInView:(id)view;
@end

@interface EAGLView_v2 : UIView {
	id<NSObject> targetor;
	SEL selector;
	char* m_pData[3];
	int srcWidth;
	int srcHeight;
	int dstWidth;
	int dstHeight;
	bool sizeChanged;
	EAGLContext* _context;
	unsigned _colorRenderBuffer;
	CAEAGLLayer* _eaglLayer;
	unsigned _YPlanarTexture;
	unsigned _UPlanarTexture;
	unsigned _VPlanarTexture;
	unsigned _textureUniformY;
	unsigned _textureUniformU;
	unsigned _textureUniformV;
	unsigned _positionSlot;
	unsigned _texCoordSlot;
	unsigned rotateUniform;
	unsigned framebuffer;
	unsigned vertexBuffer;
	unsigned indexBuffer;
	float _degrees;
	BOOL _full;
	float _viewWidth;
	float _viewHeight;
	BOOL _isSmallView;
	BOOL _hasInit;
}
+(Class)layerClass;
-(void)changeFrame:(CGRect)frame;
-(void)compileShaders;
-(void)applyRotation:(float)rotation;
-(unsigned)compileShader:(id)shader withType:(unsigned)type;
-(void)drawFrame:(float)frame fullScr:(BOOL)scr;
-(void)updateRenderParam:(BOOL)param;
-(void)updateTextureYUV:(char*)yuv widthType:(int)type heightType:(int)type3 texName:(unsigned)name;
-(unsigned)textureYUV:(char*)yuv widthType:(int)type heightType:(int)type3;
-(void)setupFrameBuffer;
-(void)setupRenderBuffer;
-(void)setupIndices;
-(void)setupContext;
-(void)setupLayer;
-(void)dealloc;
-(void)renderImage:(char*)image Width:(unsigned long)width Height:(unsigned long)height;
-(void)addSingleTapTarget:(id)target action:(SEL)action;
-(void)stopRender;
-(void)restartRender;
-(void)deleteELGS;
-(void)setupELGS;
-(id)initWithView:(id)view;
-(id)initWithFrame:(CGRect)frame;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)checkTouchPoint:(CGPoint)point IfInView:(id)view;
@end

@interface VOIPVideoRender : NSObject {
	EAGLView_v2* glview;
	LView* lview;
}
-(void)switchLocalView:(BOOL)view;
-(void)changeFrame:(CGRect)frame;
-(void)renderImage:(char*)image Width:(unsigned long)width Height:(unsigned long)height;
-(void)stopRender;
-(void)restartRender;
-(void)transformFrontImage;
-(void)transformBackImage;
-(void)addSingleTapTarget:(id)target action:(SEL)action;
-(void)dealloc;
-(id)initWithView:(id)view UseELGS2:(BOOL)a2 Layer:(id)layer;
@end

@interface VOIPHelper : NSObject {
}
+(void)NotifyWithData:(id)data;
+(void)DataNotifyWithData:(id)data;
+(void)APNSPushWithUsrInfo:(id)usrInfo;
+(void)DisableVoIPComLog;
+(void)EnableVoIPComLog;
@end

@interface WCPayCredTypeItem : WCBaseTextFieldItem <UIPickerViewDelegate, UIPickerViewDataSource, WCBizPickerViewDelegate> {
	UILabel* m_textLabel;
	WCBizPickerView* m_pickerView;
	NSMutableArray* m_arrSection;
	WCPayCredInfo* m_selectType;
	int m_iCurrentSectoin;
}
-(void)WCBizPickerViewDidComplete:(id)wcbizPickerView;
-(void)WCBizPickerViewDidCancel;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)setEnable:(BOOL)enable;
-(void)setCredTypeList:(id)list;
-(void)setSelectCredType:(id)type;
-(void)setTextAlignment:(int)alignment;
-(void)setText:(id)text;
-(id)getValue;
-(void)becomeFirstResponder;
-(id)getStringFrom:(id)from;
-(void)dealloc;
-(void)initView:(CGRect)view;
@end

@interface VOIPMessageMgr : MMService <MMService, IMsgExt> {
	unsigned long _lastRoomId;
	unsigned long long _lastVoipKey;
}
-(void)handleVoipInvite:(id)invite withMessageWrap:(id)messageWrap;
-(void)handleVoipRemind:(id)remind MsgWrap:(id)wrap;
-(void)handleVoipCancel:(id)cancel MsgWrap:(id)wrap;
-(void)handleVoipInvite:(id)invite MsgWrap:(id)wrap;
-(void)updateVoipLastRoomId:(unsigned long)anId andVoipKey:(unsigned long long)key;
-(void)OnMsgNotAddDBNotify:(id)notify MsgWrap:(id)wrap;
-(void)dealloc;
-(id)init;
@end

@interface OnlineClientMgr : MMService <MMService, MessageObserverDelegate, PBMessageObserverDelegate, IMMNewSessionMgrExt> {
	BOOL m_isLoginWebWX;
	unsigned long m_curOnlineVersion;
	NSString* m_summaryXml;
	NSArray* m_arrOnlineInfo;
	BOOL m_isGettingOnlineInfo;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)onActiveUsrNameChange:(id)change curUsrName:(id)name;
-(void)getAllChat;
-(void)QuitChat:(id)chat;
-(void)EnterChat:(id)chat;
-(void)logoutWeb:(BOOL)web;
-(BOOL)isNeedShowPush;
-(BOOL)isLoginWebWX;
-(void)dealloc;
-(id)init;
@end

@interface VOIPComponent : NSObject {
	VOIPChannelAdapter* mChannelAdapter;
	VOIPNetNotifier* mNetNotifier;
	ITransportChannel* mTransChannel;
	IMVQQEngine* mMVEngine;
	int mEngineChid;
	char* mRemoteRenderImgBuf;
	char* mLocalCaptureImgBuf;
	char* mLocalRenderImgBuf;
	VoIPRingBuffer* mVideoDecBuf;
	VoIPRingBuffer* mAudioDecBuf;
}
@property(assign, nonatomic) VoIPRingBuffer* mAudioDecBuf;
@property(assign, nonatomic) VoIPRingBuffer* mVideoDecBuf;
@property(assign, nonatomic) int mEngineChid;
@property(assign, nonatomic) IMVQQEngine* mMVEngine;
@property(assign, nonatomic) ITransportChannel* mTransChannel;
@property(assign, nonatomic) VOIPNetNotifier* mNetNotifier;
@property(assign, nonatomic) VOIPChannelAdapter* mChannelAdapter;
-(void)dealloc;
-(id)init;
@end

@interface VOIPDialData : NSObject {
	NSData* mLocalPid;
	NSData* mLocalCapInfo;
	NSData* mRemotePid;
	NSData* mRemoteCapInfo;
	int mStrategy;
	int mRoomId;
	int mRoomMemberId;
	CContact* mContact;
	NSString* mCaller;
	long long mRoomKey;
}
@property(retain, nonatomic) NSString* mCaller;
@property(retain, nonatomic) CContact* mContact;
@property(assign, nonatomic) long long mRoomKey;
@property(assign, nonatomic) int mRoomMemberId;
@property(assign, nonatomic) int mRoomId;
@property(assign, nonatomic) int mStrategy;
@property(retain, nonatomic) NSData* mRemoteCapInfo;
@property(retain, nonatomic) NSData* mRemotePid;
@property(retain, nonatomic) NSData* mLocalCapInfo;
@property(retain, nonatomic) NSData* mLocalPid;
-(BOOL)isValidKey;
-(void)reset;
-(void)SetRoomKey:(long long)key;
-(void)SetRoomMemberId:(int)anId;
-(void)SetRoomId:(int)anId;
-(void)dealloc;
-(id)init;
@end

@interface VOIPDNSController : NSObject {
	unsigned long mNetType;
	NSString* mDetectIP;
	unsigned long mDetectPort;
	NSString* mRelayIP;
	unsigned long mRelayPort;
	NSString* mPunchIP;
	unsigned long mPunchPort;
	NSArray* mDetectIPList;
	NSArray* mRelayIPList;
	NSArray* mPunchIPList;
}
@property(retain, nonatomic) NSArray* mPunchIPList;
@property(retain, nonatomic) NSArray* mRelayIPList;
@property(retain, nonatomic) NSArray* mDetectIPList;
@property(assign, nonatomic) unsigned long mPunchPort;
@property(retain, nonatomic) NSString* mPunchIP;
@property(assign, nonatomic) unsigned long mRelayPort;
@property(retain, nonatomic) NSString* mRelayIP;
@property(assign, nonatomic) unsigned long mDetectPort;
@property(retain, nonatomic) NSString* mDetectIP;
-(void)GetIPFromDNSWithNetType:(unsigned long)netType;
-(id)getIpListFromHost:(id)host;
-(void)dealloc;
-(id)init;
@end

@interface VOIPMgr : MMService <PBMessageObserverDelegate, ISysCallCheckExt, IVOIPSyncExt, AVVideoDataSource, AUAudioDataSource, IAUAudioDeviceExt, MMService> {
	BOOL mIsInterrupted;
	BOOL mIsGotRelayData;
	BOOL mIsCanConnect;
	BOOL mIsConnected;
	BOOL mIsCanTalk;
	BOOL mIsTalked;
	VOIPVideoRender* inputVideoRender;
	VOIPVideoRender* outputVideoRender;
	unsigned long mVoIPType;
	VOIPDialData* mDialData;
	VOIPComponent* mComponent;
	AUAudioDevice* mAudioDevice;
	AVVideoDevice* mVideoDevice;
	VOIPDNSController* mDNSController;
	VOIPNetTypeDetector* mNetTypeDetector;
	NSRecursiveLock* mAudioEncLock;
	NSRecursiveLock* mAudioDecLock;
	NSRecursiveLock* mVideoEncLock;
	NSRecursiveLock* mVideoDecLock;
	NSTimer* mVoipTimer;
	unsigned long mTimeCounter;
	int send_fps;
	int recv_fps;
	int status;
	timeval dialStartTime;
	tagDialReport dialReport;
}
@property(assign, nonatomic) int status;
@property(assign, nonatomic) tagDialReport dialReport;
@property(assign, nonatomic) timeval dialStartTime;
@property(assign, nonatomic) int recv_fps;
@property(assign, nonatomic) int send_fps;
@property(assign, nonatomic) unsigned long mTimeCounter;
@property(retain, nonatomic) NSTimer* mVoipTimer;
@property(retain, nonatomic) NSRecursiveLock* mVideoDecLock;
@property(retain, nonatomic) NSRecursiveLock* mVideoEncLock;
@property(retain, nonatomic) NSRecursiveLock* mAudioDecLock;
@property(retain, nonatomic) NSRecursiveLock* mAudioEncLock;
@property(retain, nonatomic) VOIPNetTypeDetector* mNetTypeDetector;
@property(retain, nonatomic) VOIPDNSController* mDNSController;
@property(retain, nonatomic) AVVideoDevice* mVideoDevice;
@property(retain, nonatomic) AUAudioDevice* mAudioDevice;
@property(retain, nonatomic) VOIPComponent* mComponent;
@property(retain, nonatomic) VOIPDialData* mDialData;
@property(assign, nonatomic) unsigned long mVoIPType;
@property(retain, nonatomic) VOIPVideoRender* outputVideoRender;
@property(retain, nonatomic) VOIPVideoRender* inputVideoRender;
-(id).cxx_construct;
-(BOOL)isCameraFront;
-(void)FlipCamera;
-(void)SetSpeakerPhone:(BOOL)phone;
-(void)SetMicroPhoneMute:(BOOL)mute;
-(void)SetVideoEnable:(BOOL)enable;
-(void)Hangup;
-(void)Reject:(id)reject withRoomId:(int)roomId andKey:(long long)key;
-(void)AcceptVideo:(id)video withRoomId:(int)roomId andKey:(long long)key;
-(void)AcceptAudio:(id)audio withRoomId:(int)roomId andKey:(long long)key;
-(void)RealAccept:(id)accept;
-(void)BeCanceled;
-(void)CancelCall;
-(void)VideoCall:(id)call withCallType:(unsigned long)callType;
-(void)AudioCall:(id)call withCallType:(unsigned long)callType;
-(void)RealCall:(id)call withCallType:(id)callType;
-(void)StartLocalVideo;
-(void)setVideoDelegate:(id)delegate;
-(void)StartNetDetect;
-(void)dealloc;
-(id)init;
-(void)SetStatus:(int)status andErrNo:(int)no;
-(void)CalcDialUsedTime;
-(void)SetMVEInfo:(XXStruct_fQ3fDD*)info;
-(int)cpuCapacity;
-(unsigned long)GetDispRate;
-(int)GetFR;
-(int)OnTransportChannelEvent:(unsigned short)event ErrNo:(int)no;
-(int)OnTransportChannelCmd:(void*)cmd len:(int)len;
-(void)PushRelayData:(id)data;
-(void)ConnectFail:(id)fail;
-(void)StopConnect;
-(void)StartConnect;
-(void)tryStartConnect;
-(void)SendStatReportRequest;
-(void)SendHeartbeatRequest;
-(void)SendShutdownRequest;
-(void)SendAnswerRequestBy:(id)by AnswerType:(unsigned long)type;
-(void)SendCancelInviteRequest;
-(void)SendInviteRequestBy:(id)by InviteType:(unsigned long)type CallType:(unsigned long)type3;
-(void)SetReportData:(id*)data;
-(void)HandleVoipStatReportResp:(id)resp Event:(unsigned long)event;
-(void)HandleVoipHeartbeatResp:(id)resp Event:(unsigned long)event;
-(void)HandleVoipShutdownResp:(id)resp Event:(unsigned long)event;
-(void)HandleVoipAnswerResp:(id)resp Event:(unsigned long)event;
-(void)HandleVoipCancelInviteResp:(id)resp Event:(unsigned long)event;
-(void)HandleVoipInviteResp:(id)resp Event:(unsigned long)event;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnDetectorEvent:(unsigned short)event;
-(void)GotMultiRelayData:(id)data;
-(void)StopSessionWithProtocolErr:(int)protocolErr;
-(void)StopSession;
-(void)StartSession;
-(void)handleEnterForeground;
-(void)handleEnterBackground;
-(void)BeginInterruption;
-(void)TimerCheck;
-(void)UnInitAll;
-(void)InitAll;
-(void)OnGotRemoteRelayData:(id)data;
-(void)OnGotRemoteConnectData:(id)data;
-(void)OnGotRemoteStatus:(unsigned long)status;
-(void)OnSyncError:(int)error;
-(void)TalkBroken:(id)broken;
-(void)StopTalk;
-(void)StartTalk;
-(void)tryStartTalk;
-(int)VideoDevPutData:(char*)data imageWidth:(unsigned long)width imageHeight:(unsigned long)height;
-(int)AudioDevGetData:(char*)data length:(unsigned long)length;
-(int)AudioDevPutData:(char*)data length:(unsigned long)length;
-(int)OnTransportChannelData:(void*)data len:(int)len;
-(void)DataNotify:(char*)notify len:(int)len;
-(void)EventNotify:(int)notify param:(int)param;
-(void)audioDeviceUnPluginHeadset:(id)headset;
-(void)audioDevicePluginHeadset:(id)headset;
-(void)audioDeviceFarawayEar:(id)ear;
-(void)audioDeviceNearEar:(id)ear;
@end

@interface VOIPNetTypeDetector : NSObject {
	id<NSObject> call_targetor;
	SEL call_selector;
	id<NSObject> accept_targetor;
	SEL accept_selector;
	VOIPNetTypeDetectorAdapter* mNetTypeDetectorAdapter;
	INetTypeDetector* mNetTypeDetector;
	unsigned long mLastDetectTime;
	BOOL mIsNetDetecting;
	unsigned long mNetType;
	CContact* mContact;
	NSNumber* mCallType;
}
@property(retain, nonatomic) NSNumber* mCallType;
@property(retain, nonatomic) CContact* mContact;
@property(assign, nonatomic) unsigned long mNetType;
-(void)OnDetectorEvent:(unsigned short)event;
-(void)HandleEventOnMainThread;
-(BOOL)isNetDetecting;
-(void)StopDetect;
-(void)StartDetectByIP:(id)ip andPort:(unsigned long)port;
-(void)addDelayAcceptTarget:(id)target action:(SEL)action withObject:(id)object;
-(void)addDelayCallTarget:(id)target action:(SEL)action withObject:(id)object withObject:(id)object4;
-(void)dealloc;
-(id)init;
@end

@interface VOIPStatHelper : NSObject {
}
+(id)GenExtLog:(ExtReport_t*)log;
+(id)GenQualityLog:(tagAVQualityReportInfo*)log;
+(id)GenDirectLog:(tagDirectReport*)log;
+(id)GenRelayLog:(tagRelayReport*)log;
+(id)GenDialLog:(tagDialReport*)log;
@end

@interface VOIPModeSwitchMgr : MMService <IVOIPSyncExt, MMService> {
	BOOL mIsWeakSessionActive;
	BOOL mIsSessionActive;
	BOOL mIsLocalVideoClosed;
	BOOL mIsRemoteVideoClosed;
	int mRoomId;
	long long mRoomKey;
	VOIPModeSwitchStateMachine* mStateMachine;
}
@property(retain, nonatomic) VOIPModeSwitchStateMachine* mStateMachine;
-(int)CurrentStatus;
-(BOOL)isRemoteVideoClosed;
-(BOOL)isLocalVideoClosed;
-(void)StopSession;
-(void)OpenLocalVideoMode;
-(void)OpenLocalEarMode;
-(void)StartSessionWithRoomId:(int)roomId andRoomKey:(long long)key;
-(void)OpenLocalEarModeFor2G;
-(void)StartWeakSessionWithRoomId:(int)roomId andRoomKey:(long long)key;
-(void)dealloc;
-(id)init;
-(void)CallBackForModeStatus:(int)modeStatus;
-(void)SetVideoEnable:(BOOL)enable;
-(void)SetAudioSpeakerPhone:(BOOL)phone;
-(void)PushControlStatusToRemote:(unsigned long)remote;
-(void)OnGotRemoteControlStatus:(unsigned long)status;
@end

@interface VOIPModeSwitchStateMachine : NSObject {
	int _status;
}
@property(readonly, assign, nonatomic) int status;
-(int)doAction:(int)action;
-(void)ChangeRemoteVideoModeOpenWhen:(int)when;
-(void)ChangeRemoteEarModeOpenWhen:(int)when;
-(void)ChangeLocalVideoModeOpenWhen:(int)when;
-(void)ChangeLocalEarModeOpenWhen:(int)when;
-(void)ChangeBothVideoModeWhen:(int)when;
-(void)ChangeRemoteEarModeOpenFor2GWhen:(int)a2GWhen;
-(void)ChangeLocalEarModeOpenFor2GWhen:(int)a2GWhen;
-(void)resetStatus;
-(id)initWithStatus:(int)status;
-(id)init;
@end

@interface VOIPPushMgr : MMService <PBMessageObserverDelegate, MMService> {
	NSMutableSet* mGotRoomInfoStatuses;
}
@property(retain, nonatomic) NSMutableSet* mGotRoomInfoStatuses;
-(void)InviteRemindByUsrName:(id)name InviteType:(int)type;
-(void)GetRoomInfoByData:(id)data;
-(void)GetRoomInfoByUsrName:(id)name andRoomId:(int)anId andRoomKey:(long long)key;
-(void)dealloc;
-(id)init;
-(void)GenMessageByUsrName:(id)name andRoomId:(int)anId andRoomKey:(long long)key andInviteType:(unsigned long)type andCreateTime:(unsigned long)time;
-(void)DeleteGotRoomInfoStatus:(long long)status;
-(void)AddGotRoomInfoStatus:(long long)status;
-(BOOL)CheckIfGotRoomInfo:(long long)info;
-(void)SendInviteRemindRequestBy:(id)by InviteType:(int)type;
-(void)SendAckRequestByRoomId:(int)anId andRoomKey:(long long)key;
-(void)SendGetRoomInfoRequestByUsrName:(id)name andRoomId:(int)anId andRoomKey:(long long)key;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleVoipInviteRemindResp:(id)resp Event:(unsigned long)event;
-(void)HandleVoipAckResp:(id)resp Event:(unsigned long)event;
-(void)HandleVoipGetRoomInfoResp:(id)resp Event:(unsigned long)event;
@end

@interface VOIPSyncMgr : MMService <PBMessageObserverDelegate, MMService> {
	BOOL mIsWeakSessionActive;
	BOOL mIsSessionActive;
	BOOL mIsNeedSync;
	int mRoomId;
	long long mRoomKey;
	NSData* mKeyBuf;
	NSMutableArray* mOplogList;
	NSRecursiveLock* mOplogLock;
}
@property(retain, nonatomic) NSRecursiveLock* mOplogLock;
@property(retain, nonatomic) NSMutableArray* mOplogList;
@property(retain, nonatomic) NSData* mKeyBuf;
-(void)StopSession;
-(void)PushRelayData:(id)data;
-(void)PushControlStatus:(unsigned long)status;
-(void)SyncByNotifyWithRoomId:(int)roomId andRoomKey:(long long)key;
-(void)StartSessionWithRoomId:(int)roomId andRoomKey:(long long)key;
-(void)StartWeakSessionWithRoomId:(int)roomId andRoomKey:(long long)key;
-(void)dealloc;
-(id)init;
-(void)ClearOplog;
-(void)RemoveOplog:(id)oplog;
-(id)GetOplog;
-(void)AddOplog:(unsigned long)oplog data:(id)data;
-(void)SendSyncRequestFor:(id)aFor withSelector:(unsigned long)selector;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleVoipSyncResp:(id)resp Event:(unsigned long)event;
-(void)check_next_sync;
@end

@interface WXPresentMgr : MMService <MMService, IMsgExt, IContactMgrExt> {
	NSMutableDictionary* _infoList;
	BOOL _isInfoListLoaded;
}
@property(retain, nonatomic) NSMutableDictionary* infoList;
-(BOOL)isTalkRoomEmpty:(id)empty;
-(BOOL)loadWXTalkRoomInfoList;
-(void)saveWXTalkRoomInfoList;
-(BOOL)writeToFile:(id)file data:(id)data;
-(id)getRoomMembersByUsername:(id)username;
-(void)handleWXTalkRoomInfoMessage:(id)message withMessageWrap:(id)messageWrap;
-(BOOL)isMembersChange:(id)change andWith:(id)with;
-(id)getRoomInfoFromMessageWrap:(id)messageWrap;
-(void)OnMsgNotAddDBNotify:(id)notify MsgWrap:(id)wrap;
-(void)dealloc;
-(id)init;
@end

@interface WXTalkComponent : NSObject {
	WXTalkEngineAdapter* _engineAdapter;
	ILiveConEngine* _wxTalkEngine;
}
@property(assign, nonatomic) ILiveConEngine* wxTalkEngine;
@property(assign, nonatomic) WXTalkEngineAdapter* engineAdapter;
-(void)dealloc;
-(id)init;
@end

@interface WXTalkDNSController : NSObject {
	unsigned long _netType;
	NSString* relayIP;
	unsigned long relayPort;
	NSArray* relayIPList;
}
@property(retain, nonatomic) NSArray* relayIPList;
@property(assign, nonatomic) unsigned long relayPort;
@property(retain, nonatomic) NSString* relayIP;
-(void)GetIPFromDNSWithNetType:(unsigned long)netType;
-(id)getIpListFromHost:(id)host;
-(void)dealloc;
-(id)init;
@end

@interface Scope2ApiAuthInfo : NSObject {
	unsigned long _scopeStatus;
	NSString* _scopeDesc;
	NSMutableArray* _apiList;
}
@property(retain, nonatomic) NSMutableArray* apiList;
@property(retain, nonatomic) NSString* scopeDesc;
@property(assign, nonatomic) unsigned long scopeStatus;
-(id)init;
-(void)dealloc;
@end

@interface WXTalkMgr : MMService <CNetworkStatusExt, IAUAudioDeviceExt, AUAudioDataSource, IRemoteControlCheckExt, AVAudioPlayerDelegate, MMService, PBMessageObserverDelegate, IWXPresentExt, AVAudioPlayerDelegate, IContactMgrExt, IMMNewSessionMgrExt, IMMNewSessionMgrComparerExt, MMKernelExt> {
	BOOL _isInTalkRoom;
	BOOL _isRealInTalkRoom;
	NSTimer* _regetMicTimer;
	BOOL _isPause;
	BOOL _isPlayingBeginSound;
	BOOL _isGettingRoomMember;
	BOOL _isRecording;
	NSData* _giveupMicSound;
	BOOL _hasPlayGetMicSound;
	BOOL _isWantToTalk;
	AVAudioPlayer* _player;
	WXTalkStatusReportHelper* _reportHelper;
	WXTalkRoomData* roomData;
	WXTalkComponent* component;
	WXTalkDNSController* wxTalkDNSController;
	NSRecursiveLock* audioEncLock;
	NSRecursiveLock* audioDecLock;
	NSTimer* wxTalkTimer;
	FILE* recordDumpFile;
}
@property(assign, nonatomic) FILE* recordDumpFile;
@property(retain, nonatomic) NSTimer* wxTalkTimer;
@property(retain, nonatomic) NSRecursiveLock* audioDecLock;
@property(retain, nonatomic) NSRecursiveLock* audioEncLock;
@property(retain, nonatomic) WXTalkDNSController* wxTalkDNSController;
@property(retain, nonatomic) WXTalkComponent* component;
@property(retain, nonatomic) WXTalkRoomData* roomData;
-(void)onPreQuit;
-(void)onKickQuit;
-(void)getComparer:(id*)comparer ForSelector:(int)selector;
-(int)compareSessionInfo:(id)info toInfo:(id)info2;
-(void)onModifyContact:(id)contact;
-(void)OnRoomMemberChange:(id)change withNewMemberList:(id)newMemberList;
-(void)TellOthersAllMembersExitRoom;
-(void)TellOthersWhoEnterOrExitRoom:(id)room;
-(void)reOpenWXTalkMode:(id)mode;
-(BOOL)checkIfOfflineAndNeedReEnter:(id)enter;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)handleHeartBeatResponse:(id)response;
-(void)handleGetTalkRoomMemberResponse:(id)response;
-(void)SendGiveupMicrophoneRequest;
-(void)SendRegetMicrophoneRequest;
-(void)handleGetMicrophoneResponse:(id)response;
-(void)SendGetMicrophoneRequest;
-(void)handleExitTalkRoomResponse:(id)response;
-(void)SendExitTalkRoomRequest;
-(void)handleEnterTalkRoomResponse:(id)response;
-(int)retToErrType:(int)errType;
-(void)SendEnterTalkRoomRequest;
-(void)stopRegetMicLogic;
-(void)startRegetMicLogic;
-(void)GiveupMicrophone;
-(void)sendGiveupMicrophoneSound;
-(void)GetMicrophone;
-(void)CloseWXTalkModeAndNotifyUI:(BOOL)ui;
-(void)CloseWXTalkMode:(BOOL)mode;
-(BOOL)IsRealInTalkRoom;
-(BOOL)OpenWXTalkMode:(id)mode;
-(BOOL)CanEnterThisRoom:(id)room;
-(BOOL)IsOpenAnyWXTalkMode;
-(BOOL)IsOpenWXTalkMode:(id)mode;
-(void)audioPlayerBeginInterruption:(id)interruption;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
-(void)playSound:(id)sound OfType:(id)type numberOfLoops:(int)loops;
-(void)stopPlaySound;
-(void)resetData;
-(void)onServiceClearData;
-(void)onServiceInit;
-(void)dealloc;
-(void)UnInitAll;
-(void)InitAll;
-(void)audioDeviceRestart:(id)restart;
-(void)audioDeviceResetCallback:(id)callback;
-(void)Restart;
-(void)audioDevicePause:(id)pause;
-(void)Pause;
-(void)audioDeviceForceStop:(id)stop;
-(void)ForceStop;
-(void)ReachabilityChange:(unsigned long)change;
-(void)OnEngineError:(int)error;
-(void)OnOpenEngineSuccess;
-(void)NotifyMainThreadEngineError;
-(void)NotifyMainThreadEnterRoomOK;
-(void)handleEndInterruption;
-(void)handleBeginInterruption;
-(void)StopSession;
-(void)StartSession;
-(void)CloseRecordDumpFile;
-(void)CreateRecordDumpFile;
-(void)TimerCheck;
-(void)SendHeartBeatRequest;
-(void)iRemoteControlCheckShouldFinishRecord;
-(void)iRemoteControlCheckShouldBeginRecord;
-(int)AudioDevGetData:(char*)data length:(unsigned long)length;
-(int)AudioDevPutData:(char*)data length:(unsigned long)length;
-(BOOL)isGetDataReady;
-(void)DumpToRecordFile:(char*)recordFile withDataLen:(unsigned)dataLen;
-(void)NotifyMainThreadCurrentSpeakingStatus:(id)status;
-(void)NotifyMainThreadHasTalkingData;
-(void)NotifyMainThreadNoTalkingData;
-(void)PlayBeginSound;
-(void)StopReportNobodyTalking;
-(void)ReportNobodyTalking;
-(void)SetCurrentSpeakingMember:(id)member;
-(void)GetUnknowMemberByMemberId:(unsigned long)anId;
-(void)StopRecord;
-(void)StartPlay;
-(void)StartRecord;
-(void)StopTalk;
-(void)StartTalk;
@end

@interface WXTalkRoomMember : NSObject {
	NSString* username;
	unsigned long memberId;
}
@property(assign, nonatomic) unsigned long memberId;
@property(retain, nonatomic) NSString* username;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface WXTalkRoomData : NSObject {
	BOOL isSlience;
	BOOL isNobodyTalking;
	int roomId;
	int roomMemberId;
	NSString* username;
	NSMutableArray* memberList;
	NSData* localCapInfo;
	unsigned long lastTryGetMicTime;
	unsigned long countDown;
	unsigned long lastHeartBeatTime;
	NSArray* unSpMemberList;
	unsigned long lastSendInviteTime;
	unsigned long inviteCountWithinOneMin;
	unsigned long curGetMicEventID;
	long long roomKey;
	long long micId;
	long long curHoldMicMemberId;
}
@property(assign, nonatomic) unsigned long curGetMicEventID;
@property(assign, nonatomic) unsigned long inviteCountWithinOneMin;
@property(assign, nonatomic) unsigned long lastSendInviteTime;
@property(assign, nonatomic) BOOL isNobodyTalking;
@property(retain, nonatomic) NSArray* unSpMemberList;
@property(assign, nonatomic) BOOL isSlience;
@property(assign, nonatomic) unsigned long lastHeartBeatTime;
@property(assign, nonatomic) unsigned long countDown;
@property(assign, nonatomic) unsigned long lastTryGetMicTime;
@property(retain, nonatomic) NSData* localCapInfo;
@property(assign, nonatomic) long long curHoldMicMemberId;
@property(assign, nonatomic) long long micId;
@property(retain, nonatomic) NSMutableArray* memberList;
@property(retain, nonatomic) NSString* username;
@property(assign, nonatomic) int roomMemberId;
@property(assign, nonatomic) long long roomKey;
@property(assign, nonatomic) int roomId;
-(id)GetRoomContactList;
-(BOOL)isValidKey;
-(void)reset;
-(void)SetRoomKey:(long long)key;
-(void)SetRoomId:(int)anId;
-(void)dealloc;
-(id)init;
@end

@interface EncryptGuideViewController : MMUIViewController {
	NSArray* m_oSessionNameArray;
	BOOL m_allSelected;
}
-(void)uploadButtonDone:(id)done;
-(void)encryptButtonDone:(id)done;
-(void)ReturnButtonDown:(id)down;
-(void)viewDidLoad;
-(void)initView;
-(void)dealloc;
-(id)initWithContactsArray:(id)contactsArray allSelected:(BOOL)selected;
@end

@interface EncryptViewController : MMUIViewController {
	NSString* m_oPassword;
	NSArray* m_oSessionNameArray;
	BOOL m_allSelected;
	UITextField* passwordTextField1;
	UITextField* passwordTextField2;
}
-(void)encryptButtonDone:(id)done;
-(BOOL)allCharacterIsNumber:(id)number;
-(void)ReturnButtonDown:(id)down;
-(void)viewDidLoad;
-(void)initView;
-(void)dealloc;
-(id)initWithSessionNameArray:(id)sessionNameArray allSelected:(BOOL)selected;
@end

@interface ShakeMusicTableViewCell : MMTableViewCell {
	MMWebImageView* coverImageView;
	UILabel* musicNameLabel;
	UILabel* singerLabel;
}
-(void)dealloc;
-(void)updateWithShakeMusicItem:(id)shakeMusicItem;
@end

@interface ShakeMusicItem : NSObject <PBCoding, NSCoding, NSCopying> {
	NSString* musicName;
	NSString* singer;
	NSString* albumName;
	NSString* coverImageUrl;
	NSString* lyrics;
	NSString* musicUrl;
	NSString* musicLowBandUrl;
	NSString* webUrl;
	int musicID;
	unsigned createTime;
}
@property(assign, nonatomic) unsigned createTime;
@property(assign, nonatomic) int musicID;
@property(retain, nonatomic) NSString* webUrl;
@property(retain, nonatomic) NSString* musicLowBandUrl;
@property(retain, nonatomic) NSString* musicUrl;
@property(retain, nonatomic) NSString* lyrics;
@property(retain, nonatomic) NSString* coverImageUrl;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSString* singer;
@property(retain, nonatomic) NSString* musicName;
+(void)initialize;
+(void)_initPBTableOfShakeMusicItem;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakeMusicStorage : NSObject <PBCoding, NSCoding, NSCopying> {
	NSMutableArray* musics;
	int newCount;
}
@property(assign, nonatomic) int newCount;
@property(retain, nonatomic) NSMutableArray* musics;
+(void)initialize;
+(void)_initPBTableOfShakeMusicStorage;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface RecoverDBViewController : MMUIViewController <UIAlertViewDelegate> {
	UIButton* m_btnRecover;
	UIActivityIndicatorView* m_actView;
}
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnRecover;
-(void)DoRecover;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
@end

@interface VoiceExtendCode : NSObject {
}
+(void)decodeVoiceField:(XmlReaderNode_t*)field UploadVoice:(id)voice;
+(void)codeVoiceField:(CFastStr*)field UploadVoice:(id)voice;
+(BOOL)decodeExtentField:(id)field UploadVoice:(id)voice;
+(id)codeExtentField:(id)field;
@end

@interface CMessageNodeData : NSObject {
	int m_eMsgNodeType;
	CMessageWrap* m_msgWrap;
	UIView* m_view;
	unsigned long m_uCreateTime;
}
@property(assign, nonatomic) unsigned long m_uCreateTime;
@property(retain, nonatomic) UIView* m_view;
@property(retain, nonatomic) CMessageWrap* m_msgWrap;
@property(assign, nonatomic) int m_eMsgNodeType;
-(unsigned)GetNodeViewType;
-(int)compare:(id)compare;
-(void)dealloc;
-(id)init;
@end

@interface EmoticonSortSetting : NSObject <PBCoding> {
	NSMutableArray* m_sortPids;
	BOOL m_hasSetCoustomToTop;
}
@property(assign, nonatomic) BOOL m_hasSetCoustomToTop;
@property(retain, nonatomic) NSMutableArray* m_sortPids;
+(void)initialize;
+(void)_initPBTableOfEmoticonSortSetting;
-(id)getSortPackageList:(id)list withTusiji:(BOOL)tusiji;
-(id)getLocalCachePath;
-(id)getLocalCacheRootDir;
-(void)saveSetting;
-(void)copyFeildFrom:(id)from;
-(BOOL)loadSetting;
-(void)resetSetting;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface MessageSysNodeView : BaseMessageNodeView <ILinkEventExt> {
	UIImageView* m_bkgImageView;
	RichTextView* m_richTextView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)dealloc;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)onOrientationChanged;
-(void)layoutSubviewsInternal;
-(void)updateSubviews;
-(id)getBkgImage:(BOOL)image;
@end

@interface ShakeMusicLogicController : MMObject <IMusicSearchExt> {
	MMDelegateProxy<ShakeLogicProxyDelegate>* m_delegate;
	unsigned long m_sessionId;
}
-(unsigned long)getSessionId;
-(id)getMsgForState:(unsigned long)state;
-(BOOL)isShowBannerView;
-(void)shakeTerminate;
-(void)shakeReset;
-(void)shakeStop;
-(void)shakeReport;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(void)OnError:(int)error andSessionId:(unsigned long)anId;
-(void)OnGetMusicItem:(id)item andOffset:(float)offset andSessionId:(unsigned long)anId;
-(void)OnEndRecord;
-(void)OnStartRecord;
@end

@interface VoiceReminderConfirmNodeView : BaseMessageNodeView <UIActionSheetDelegate, IVoiceReminderExt, IAudioReceiverExt, ISettingExtChange, UIAlertViewDelegate> {
	UIImageView* _bkgImageView;
	UIImageView* _remindStatusImageView;
	UIImageView* _bodyBkgImageView;
	UILabel* _dateLabel;
	UILabel* _timeLabel;
	UILabel* _timeDescLabel;
	UILabel* _descLabel;
	UIButton* _playButton;
	UIButton* _cancelButton;
	UIActivityIndicatorView* _spinner;
	int _playCount;
	BOOL _playing;
	BOOL _deleteing;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClearResource;
-(void)onDisappear;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)onSettingExtChanged:(int)changed;
-(void)OnEndPlaying:(unsigned long)playing isForceStop:(BOOL)stop;
-(void)onDeleteRemindMsgsReturn:(BOOL)aReturn msgWrap:(id)wrap;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onDelete:(id)aDelete;
-(void)becomeNormalBackground;
-(void)becomeHighlighedBackground;
-(id)init;
-(void)initData;
-(void)initView;
-(void)onPlayButtonClick;
-(void)onCancelButtonClick;
-(void)cancelRemindMsg;
-(void)becomeRemindStatus;
-(void)dealloc;
-(void)stopPlayVoice;
-(void)startPlayVoice;
@end

@interface VoiceReminderRemindNodeView : BaseMessageNodeView <IAudioReceiverExt> {
	UIImageView* _bkgImageView;
	UIButton* _playButton;
	int _playCount;
	BOOL _playing;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClearResource;
-(void)onDisappear;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)OnEndPlaying:(unsigned long)playing isForceStop:(BOOL)stop;
-(void)becomeNormalBackground;
-(void)becomeHighlighedBackground;
-(id)init;
-(void)initData;
-(void)initView;
-(void)dealloc;
-(void)onPlayClick;
-(void)stopPlayVoice;
-(void)startPlayVoice;
@end

@interface VoiceRecogView : UIView {
	BOOL mIsRecording;
	id<NSObject> begin_targetor;
	SEL begin_selector;
	id<NSObject> end_targetor;
	SEL end_selector;
	BOOL isEndTipAnimation;
	int mode;
	UIImageView* mBkgView;
	UIImageView* mIconView;
	UIImageView* mVolumeAnimationView;
	NSArray* mLowVolumeImages;
	NSArray* mHighVolumeImages;
	NSArray* mMiddleVolumeImages;
	UIImageView* mRecogAnimationView;
}
@property(retain, nonatomic) UIImageView* mRecogAnimationView;
@property(retain, nonatomic) NSArray* mMiddleVolumeImages;
@property(retain, nonatomic) NSArray* mHighVolumeImages;
@property(retain, nonatomic) NSArray* mLowVolumeImages;
@property(retain, nonatomic) UIImageView* mVolumeAnimationView;
@property(retain, nonatomic) UIImageView* mIconView;
@property(retain, nonatomic) UIImageView* mBkgView;
@property(assign, nonatomic) int mode;
+(unsigned long)HeightWithMode:(int)mode;
+(unsigned long)WidthWithMode:(int)mode;
-(void)rollbackRecordingStatus;
-(void)stopAnimation;
-(void)stopRecogAnimation;
-(void)startRecogAnimation;
-(void)updateVolume:(float)volume;
-(void)stopVolumeAnimation;
-(void)startVolumeAnimation;
-(void)endTipAnimation;
-(void)genVoiceRecogView;
-(void)touchOnce;
-(void)addEndRecordTarget:(id)target action:(SEL)action;
-(void)addBeginRecordTarget:(id)target action:(SEL)action;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)highlight;
-(void)normal;
-(BOOL)checkTouchPoint:(CGPoint)point IfInView:(id)view;
@end

@interface PeopleNearByListHeaderView : MMUIView {
	UIButton* m_chatRoomNearByBtn;
	UILabel* m_maxPeopleLabel;
	int m_iRoomMemberCount;
	MMDelegateProxy<PeopleNearByListHeaderViewDelegate>* m_delegate;
}
@property(assign) int m_iRoomMemberCount;
-(void)setMaxPeopleNum:(int)num;
-(void)onChatRoomNearByBtnClicked;
-(void)initChatRoomBtn;
-(void)dealloc;
-(id)initWithMaxNum:(int)maxNum;
-(id)init;
-(void)setDelegate:(id)delegate;
@end

@interface MsgSearchResult : NSObject {
	unsigned long m_msgSearchResultType;
	CMessageWrap* m_oMessageWrap;
	NSString* m_nsSearchText;
}
@property(retain, nonatomic) NSString* m_nsSearchText;
@property(retain, nonatomic) CMessageWrap* m_oMessageWrap;
@property(assign, nonatomic) unsigned long m_msgSearchResultType;
-(void)dealloc;
@end

@interface MsgSearchHelper : MMObject <TextLayoutDelegate, MMSearchBarDelegate> {
	BOOL m_bStartSearch;
	BOOL m_bSearchBarBecomeFirstRespones;
	BOOL m_bSearchBarCancelBtnDown;
	NSMutableArray* m_arrSearchResult;
	MMSearchBar* m_oSearchBar;
	MMLoadingView* m_oLoadingView;
	UIButton* backGroundButton;
	UIButton* cancelButton;
	int m_eMsgSearchHelperScene;
	id<MsgSearchHelperDelegate> m_delegate;
}
@property(assign, nonatomic) int m_eMsgSearchHelperScene;
@property(assign, nonatomic) id<MsgSearchHelperDelegate> m_delegate;
-(BOOL)isSearchBarActive;
-(void)startSearch;
-(void)dealloc;
-(void)mmSearchDisplayControllerWillEndSearch;
-(void)SearchBarBecomeActive;
-(void)cancelBtnDown;
-(void)mmSearchBarDidEnd;
-(void)mmSearchBarTextDidChange:(id)mmSearchBarText;
-(void)mmsearchBarTextDidBeginEditing:(id)mmsearchBarText;
-(void)mmsearchBarSearchButtonClicked:(id)clicked;
-(void)finishSearch;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(void)startSearch:(id)search;
-(void)fillSearcLoadMoreCell:(id)cell;
-(void)fillSearcResultCell:(id)cell MessageWrap:(id)wrap;
-(void)fillSearchWordingCell:(id)cell withSearchText:(id)searchText;
-(id)searchBar;
-(BOOL)searchBarShouldBecomeFirstResponse;
-(void)resetBackGroundView;
-(void)initBackGroundView;
-(id)initWithContentsController:(id)contentsController;
@end

@interface BakChatBaseMethodHelper : NSObject {
}
+(int)GetAndroidHashCode:(id)code;
@end

@interface MMShakeMusicViewController : MMUIViewController <UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource, ShareUploadTaskConfirmLogicHelperDelegate, IUiUtilExt, SendAppMsgHandleDelegate, IMusicPlayerExt> {
	SendAppMsgHandler* _sendAppMsgHandler;
	UITableView* _lyricsView;
	NSMutableArray* _lyricsList;
	NSMutableArray* _timeList;
	NSMutableArray* _heightOfRow;
	NSMutableArray* _totalHeightOfRow;
	UIImageView* _blackView;
	UILabel* _noLyricsTip;
	NSTimer* _timer;
	int _count;
	int _currentIndex;
	float _currentRowHeight;
	float _heightOfPerSecond;
	float _totalScrollHeight;
	float _perScrolHeight;
	NSString* _lyrics;
	NSString* _singer;
	NSString* _musicName;
	NSString* _coverImageUrl;
	NSString* _album;
	NSString* _mediaUrl;
	NSString* _musicUrl;
	NSString* _musicLowBandUrl;
	NSString* _musicID;
	NSString* _musicAppId;
	float _offset;
	NSMutableArray* _musicInfoList;
	BOOL _isDone;
	UIButton* _playMusicButton;
	MMShakeMusicCoverImgView* _enlargeCoverImageView;
	BOOL isPlaying;
	float _lastTime;
	BOOL _isWating;
	BOOL _isBlur;
	int _lyricsViewHeight;
	UIImageView* _infoView;
	UIImageView* _wordShade;
	UIImageView* _coverImageShadeView;
	MMShakeMusicCoverImgView* _coverImageView;
	UILabel* _musicNameLabel;
	UILabel* _singerLabel;
	UILabel* _albumLabel;
	UIImageView* _coverImageGlowView;
	unsigned long long _lastSystemTime;
	float _totalDelayTime;
	BOOL m_isFromBanner;
	BOOL m_isFirstAppear;
	MMAnimationTipView* m_tipView;
	BOOL isScroll;
	NSString* _coverPath;
}
@property(retain, nonatomic) MMAnimationTipView* m_tipView;
@property(assign, nonatomic) BOOL isFromBanner;
@property(assign, nonatomic) float offset;
@property(assign, nonatomic) BOOL isScroll;
@property(retain, nonatomic) NSString* coverPath;
@property(retain, nonatomic) NSString* musicAppId;
@property(retain, nonatomic) NSString* musicID;
@property(retain, nonatomic) NSString* musicLowBandUrl;
@property(retain, nonatomic) NSString* musicUrl;
@property(retain, nonatomic) NSString* mediaUrl;
@property(retain, nonatomic) NSString* album;
@property(retain, nonatomic) NSString* coverImageUrl;
@property(retain, nonatomic) NSString* musicName;
@property(retain, nonatomic) NSString* singer;
@property(retain, nonatomic) NSString* lyrics;
-(void)OnSendAppMsgOK;
-(void)onTopBarFrameChanged;
-(void)onLyricsChanged:(id)changed Lyrics:(id)lyrics;
-(void)onMusicPlayStatusChanged;
-(void)updatePlayBtn;
-(void)dealloc;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)updateSubViews;
-(void)playMusic;
-(id)getMusiclUrl;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(id)getCoverImageData;
-(id)getMessageWrap:(id)wrap;
-(id)getUpLoadTask:(id)task;
-(void)showList;
-(void)OnReturn;
-(void)scroll;
-(void)startScroll;
-(void)stopTimer;
-(void)setTextHighLightWithIndex:(int)index;
-(void)makeCurrentIndexWithTime:(float)time;
-(void)resolveLyrics;
-(float)time_StringToFloat:(id)aFloat;
-(void)initDataFromMusicMgr;
-(id)initFromBanner;
-(void)initMusicList;
-(id)initWithMusicItem:(id)musicItem andOffset:(float)offset;
@end

@interface WXTalkLog : NSObject {
	NSString* logStr;
	unsigned long logId;
}
@property(assign, nonatomic) unsigned long logId;
@property(retain, nonatomic) NSString* logStr;
-(void)dealloc;
@end

@interface WXTalkStatusReportHelper : NSObject <PBMessageObserverDelegate> {
	unsigned long _openWXTalkModeTime;
	unsigned long _startTalkingTime;
	unsigned long _startGetMicTime;
	unsigned long _getMicCount;
	unsigned long _getMicSucCount;
	unsigned long _getMicFailCount;
	double _openModeUseTime;
	double _openModeAndOpenEngineUsedTime;
	unsigned long _openModeResult;
	unsigned long _totalTalkingTime;
	double _getMicTotalTime;
	unsigned long _sendInviteTimes;
	unsigned long _offlineReConnectTimes;
	unsigned long _changeNetWorkReConTimes;
	unsigned long _isEngineError;
	unsigned long _getRoomMemberCGI;
	unsigned long _systemMsgErrorCount;
	unsigned long _isBeKickedOut;
	int _errCode;
	int _talkingTimeDistributed[10];
	BOOL _getMicResult;
	BOOL _isGettingMic;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)handleWXTalkStatReportResp:(id)resp Event:(unsigned long)event;
-(void)LogReportErrorCode:(int)code;
-(void)LogReportOpenEngineOk;
-(void)LogReportBeKickedOut;
-(void)LogReportSystemMsgError;
-(void)LogReportEngineError;
-(void)LogReportChangeNetWorkReConnect;
-(void)LogReportOfflineReConnect;
-(void)LogReportWXTalkInvite;
-(void)LogReportGiveupMic;
-(void)distributeTalkingTime:(int)time;
-(void)LogReportGetMicResult:(BOOL)result;
-(void)LogReportGetMic;
-(void)LogReportOpenWXTalkModeResult:(BOOL)result;
-(void)LogReportCloseWXTalkMode:(id)mode RoomName:(id)name RoomId:(int)anId RoomKey:(long long)key;
-(void)sendStatusReportRequest:(id)request;
-(void)LogReportOpenWXTalkMode;
-(id)genReportLog:(id)log RoomId:(int)anId RoomKey:(long long)key;
-(void)resetData;
@end

@interface LbsRoomContentLogicController : RoomContentLogicController <LbsRoomSessionMgrDelegate, MMInputToolViewDelegate, UIAlertViewDelegate> {
}
-(BOOL)isShakeEnabled;
-(void)showAlertWithMessage:(id)message;
-(void)showAlert;
-(BOOL)CanWXTalk;
-(BOOL)CanAddApp;
-(BOOL)CanOpenCamera;
-(BOOL)CanSendVoipMsg;
-(BOOL)CanSend3rdMsg;
-(BOOL)CanSendLocationMsg;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendVoiceMsg;
-(BOOL)CanSendImageMsg:(id)msg;
-(BOOL)CanSendEmoticonMessage;
-(void)SendEmoticonMessage:(id)message;
-(void)CustomToolViewEX:(id)ex;
-(void)onTextChange:(id)change selectedRange:(NSRange)range;
-(id)GetUsrTitle;
-(void)OpenContactInfo:(id)info;
-(void)OpenDetailInfo;
-(BOOL)canShowChatRoomInfo;
-(void)onQuitRoomFinishedWithSuccessFlag:(BOOL)successFlag;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(id)GetRightBarButtonImage;
-(id)getLeftBarButton;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)dealloc;
-(void)onBackButtonClicked:(id)clicked;
-(void)ViewDidInit;
@end

@interface AppCommentMsg : NSObject {
	NSString* deviceType;
	NSString* message;
	NSMutableArray* items;
	NSString* title;
}
@property(retain, nonatomic) NSMutableArray* items;
@property(retain, nonatomic) NSString* message;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* deviceType;
-(id)getItemByButtonIndex:(int)index;
-(id)getCancelItem;
-(void)parseXML:(id)xml;
-(id)description;
-(void)dealloc;
-(id)initWithXml:(id)xml;
@end

@interface AppCommentItem : NSObject {
	NSString* caption;
	NSString* reportid;
	NSURL* commenturl;
	NSString* itemType;
	int buttonIndex;
}
@property(assign, nonatomic) int buttonIndex;
@property(retain, nonatomic) NSString* itemType;
@property(retain, nonatomic) NSURL* commenturl;
@property(retain, nonatomic) NSString* reportid;
@property(retain, nonatomic) NSString* caption;
-(BOOL)isCancelButton;
-(id)description;
-(void)dealloc;
@end

@interface LbsRoomSessionMgr : MMService <MMService, IMMNewSessionMgrExt, PBMessageObserverDelegate> {
	unsigned long m_uiQuiLbsRoomEvent;
	CContact* m_lbsRoomContact;
	BOOL m_bIsQuitingRoom;
	BOOL m_bIsQuitRoomManually;
	unsigned long m_uiJoinRoomTime;
	unsigned long m_uiExitLbsRoomScene;
	MMDelegateProxy<LbsRoomSessionMgrDelegate>* m_delegate;
	SeePeopleNearbyViewController* m_seePeopleNearbyViewController;
}
@property(assign, nonatomic) SeePeopleNearbyViewController* m_seePeopleNearbyViewController;
@property(retain, nonatomic) CContact* m_lbsRoomContact;
@property(assign, nonatomic) unsigned long m_uiExitLbsRoomScene;
@property(assign, nonatomic) MMDelegateProxy<LbsRoomSessionMgrDelegate>* m_delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)creatQuitLbsRoomEventWithRoomName:(id)roomName;
-(unsigned long)getStayTime;
-(void)clearLocalData:(id)data;
-(void)onQuitLbsRoom:(id)room;
-(void)onQuitLbsRoom;
-(void)onQuitLbsRoomManually;
-(void)onJoinLbsRoom;
-(void)isUser:(id)user Handled:(BOOL*)handled;
-(void)dealloc;
-(id)init;
-(void)onServiceInit;
@end

@interface UIHorizontalTableView : UIScrollView <UIScrollViewDelegate> {
	NSMutableDictionary* onScreenViewDic;
	NSMutableDictionary* offScreenViewDic;
	unsigned numberOfColumns;
	unsigned startIndex;
	unsigned endIndex;
	NSArray* itemDataList;
	id<UIHorizontalTableViewDelegate> viewDelegate;
	id<UIHorizontalTableViewDataSource> viewDataSource;
	NSMutableArray* originPointList;
}
@property(assign, nonatomic) id<UIHorizontalTableViewDataSource> viewDataSource;
@property(assign, nonatomic) id<UIHorizontalTableViewDelegate> viewDelegate;
@property(retain, nonatomic) NSArray* itemDataList;
-(BOOL)touchesShouldBegin:(id)touches withEvent:(id)event inContentView:(id)contentView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)addSubviewsOnScreen;
-(void)calculateItemIndexRange;
-(void)calculateAllItemsOrigin;
-(float)contentSizeWidth;
-(void)reloadData;
-(id)dequeueReusableCellWithIdentifier:(id)identifier;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface BrandServiceMgr : MMService <MMService, IContactMgrExt, IMsgExt, IMMNewSessionMgrExt, PBMessageObserverDelegate, MMKernelExt> {
	BrandServiceDataStorage* m_storage;
	NSMutableDictionary* m_changeSet;
	BrandServiceDeleteAdviceMsg* m_adviceMsgCache;
	BOOL hasStorageChanged;
	unsigned long uploadAppListId;
	unsigned long downloadAppListId;
	BOOL ignoreModifyContact;
}
@property(retain, nonatomic) BrandServiceDeleteAdviceMsg* m_adviceMsgCache;
-(void)shouldClearRedDotIfOpenSession:(int)session;
-(void)clearRedDotForType:(int)type ShouldNotify:(BOOL);
-(void)isMessage:(id)message Handled:(BOOL*)handled;
-(void)isUser:(id)user Handled:(BOOL*)handled;
-(void)delayReloadData;
-(void)onModifyContact:(id)contact;
-(void)OnMsgNotAddDBNotify:(id)notify MsgWrap:(id)wrap;
-(void)invalidateCacheOfUser:(id)user;
-(void)ClearDeleteAdviceMsg;
-(id)GetDeleteAdviceMsg;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)downloadAppList;
-(void)uploadAppList;
-(BOOL)removeBrandServiceItem:(id)item;
-(BOOL)MoveBrandServiceItem:(id)item toItem:(id)item2;
-(BOOL)ExchangePositionForBrandServiceItem:(id)brandServiceItem withItme:(id)itme;
-(void)clearOpenItemUnRead:(id)read;
-(void)ResetLocationForUser:(id)user;
-(BOOL)HasSetLocationForUser:(id)user;
-(void)MarkHasSetLocationForUser:(id)user Notify:(BOOL)notify;
-(void)ClearNewFlagForUser:(id)user Notify:(BOOL)notify;
-(int)GetBrandServiceUnreadCount;
-(id)GetBrandUserForConnectMessageType:(int)connectMessageType;
-(int)GetConnectorTypeByMessageWrap:(id)wrap;
-(id)GetAllBrandServiceContact;
-(int)GetBrandFollowedMaxCount;
-(int)GetContinueLocationReportInterval;
-(int)GetMaxAllowedStarBrandCount;
-(int)GetStarBrandCount;
-(id)GetBrandServiceItemListByType:(int)type;
-(void)reloadDataIfChanged;
-(void)saveStorageFromContact:(id)contact;
-(void)saveStorageFromServerContact:(id)serverContact;
-(void)reloadData;
-(id)storage;
-(void)loadServiceItems;
-(id)pathForAdviceMsg;
-(void)unFavourBrandContact:(id)contact;
-(void)onServiceClearData;
-(id)init;
-(void)dealloc;
-(void)onServiceReloadData;
-(BOOL)IsBrandServiceUser:(id)user;
-(void)onInitOK;
-(void)onServiceInit;
@end

@interface BrandServiceDataStorage : NSObject {
	NSMutableArray* itemList;
	BOOL isCacheValid;
	unsigned long hash;
	unsigned long lastUpdateTime;
}
@property(assign, nonatomic) unsigned long lastUpdateTime;
@property(assign, nonatomic) unsigned long hash;
@property(assign, nonatomic) BOOL isCacheValid;
@property(retain, nonatomic) NSMutableArray* itemList;
+(BOOL)IsStorageExist;
+(id)pathForCache;
-(void)dealloc;
-(BOOL)loadStorage;
-(BOOL)saveStorage;
@end

@interface BrandServiceItem : NSObject {
	NSString* username;
	int unreadCount;
	BOOL isNew;
	BOOL isStar;
	BOOL hasSetLocation;
	CContact* m_contact;
}
@property(retain, nonatomic) CContact* m_contact;
@property(assign, nonatomic) BOOL hasSetLocation;
@property(assign, nonatomic) BOOL isStar;
@property(assign, nonatomic) BOOL isNew;
@property(assign, nonatomic) int unreadCount;
@property(copy, nonatomic) NSString* username;
+(id)FromCacheItem:(id)cacheItem;
-(void)dealloc;
-(id)debugDescription;
-(id)toCacheItem;
-(id)Contact;
@end

@interface CustomMessageNodeView : BaseMessageNodeView {
	UIImageView* m_oBkgImageView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClicked;
-(void)showOpearation;
-(void)onForward:(id)forward;
-(void)forwardMessage;
-(void)handleLongPressEx:(id)ex;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)ShowCustom:(id)custom;
-(void)CustomItemClickAction:(id)action;
-(void)CustomItemClickedUp:(id)up;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)updateBkgImage:(BOOL)image;
-(id)getHighlightedImage:(unsigned long)image;
-(id)getTitleString:(id)string bBig:(BOOL)big bGray:(BOOL)gray;
-(id)getBigVideoImage;
-(id)getSmallVideoImage;
@end

@interface UploadImageCDNMgr : NSObject <ICdnComMgrExt, PBMessageObserverDelegate> {
	NSMutableArray* m_arrQueue;
	CdnTaskInfo* m_oCurTaskInfo;
}
@property(retain, nonatomic) CdnTaskInfo* m_oCurTaskInfo;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)CreateUploadEvent:(id)event;
-(void)OnCdnUpload:(id)upload;
-(void)OnCdnUploadProgress:(id)progress;
-(void)OnSetCdnDnsInfo;
-(void)UploadFail:(long)fail;
-(void)UploadOk:(id)ok;
-(void)StopUploadImageByUsrName:(id)name;
-(void)StopUploadImage:(id)image;
-(void)StopCurUpload;
-(void)StartUploadImage:(id)image;
-(unsigned long)GetUploadPercent:(id)percent;
-(BOOL)IsUploading:(id)uploading;
-(void)CheckQueue;
-(void)dealloc;
-(id)init;
@end

@interface DownloadImageCDNMgr : NSObject <ICdnComMgrExt> {
	NSMutableArray* m_arrQueue;
	CdnTaskInfo* m_oCurTaskInfo;
}
@property(retain, nonatomic) CdnTaskInfo* m_oCurTaskInfo;
-(void)OnCdnDownload:(id)download;
-(void)OnCdnDownloadProgress:(id)progress;
-(void)OnSetCdnDnsInfo;
-(id)GetTempFilePath:(id)path;
-(id)GetFilePath:(id)path;
-(void)DownloadFail:(long)fail;
-(void)DownloadFail:(long)fail Expired:(BOOL)expired;
-(unsigned long)GetDownloadImageTotalLen:(id)len;
-(unsigned long)GetDownloadImagePartLen:(id)len;
-(void)StopDownloadImageByUsrName:(id)name;
-(void)StopCurDownload;
-(void)StartDownloadImage:(id)image HD:(BOOL)hd;
-(BOOL)IsDownloading:(id)downloading;
-(void)CheckQueue;
-(void)dealloc;
-(id)init;
@end

@interface PublicAccountUtil : NSObject {
}
+(int)getType:(id)type;
@end

@interface CdnComMgr : MMService <MMService, MMKernelExt, PBMessageObserverDelegate, CNetworkStatusExt> {
	CDNTransportComponentRef m_pCdnCom;
	CdnUploadCallback* m_pUploadCallback;
	CdnDownloadCallback* m_pDownloadCallback;
	unsigned long m_uiGetCdnDnsInfoEventID;
	unsigned long m_uiGetCdnCount;
	NSDate* m_tGetCdn;
}
@property(retain, nonatomic) NSDate* m_tGetCdn;
+(id)GetDownloadThumbClientID:(id)anId;
+(id)GetDownloadClientID:(id)anId HD:(BOOL)hd;
+(id)GetCdnRootPath;
-(void)onServiceInit;
-(void)onServiceClearData;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)ReachabilityChange:(unsigned long)change;
-(void)GetCdnDnsInfo;
-(void)onPreQuit;
-(void)onKickQuit;
-(void)onAuthOKWithAuthInfo:(id)authInfo;
-(void)OnDownloadEnd:(id)end;
-(void)CallDownloadExtendsion:(id)extendsion;
-(void)OnUploadEnd:(id)end;
-(void)CallUploadExtendsion:(id)extendsion;
-(void)OnDownloadProgress:(id)progress;
-(void)CallDownloadProgressExtendsion:(id)extendsion;
-(void)OnUploadProgress:(id)progress;
-(void)CallUploadProgressExtendsion:(id)extendsion;
-(void)StopDownloadFavMedia:(id)media;
-(BOOL)StrartDownloadFavMedia:(id)media;
-(void)StopUploadFavMedia:(id)media;
-(BOOL)StartUploadFavMedia:(id)media;
-(void)StopDownloadComMedia:(id)media;
-(BOOL)StartDownloadComMedia:(id)media;
-(BOOL)StopDownloadAppAttach:(id)attach CdnDownloadTaskInfo:(id)info;
-(void)StopDownloadAppAttach:(id)attach;
-(BOOL)StartDownloadAppAttach:(id)attach;
-(void)StopUploadAppAttach:(id)attach;
-(BOOL)StartUploadAppAttach:(id)attach;
-(void)StopDownloadThumb:(id)thumb;
-(BOOL)StartDownloadThumb:(id)thumb;
-(BOOL)StopDownloadVideo:(id)video CdnDownloadTaskInfo:(id)info;
-(void)StopDownloadVideo:(id)video;
-(BOOL)StartDownloadVideo:(id)video;
-(void)StopUploadVideo:(id)video;
-(BOOL)StartUploadVideo:(id)video;
-(BOOL)StopDownloadImage:(id)image HD:(BOOL)hd CdnDownloadTaskInfo:(id)info;
-(void)StopDownloadImage:(id)image HD:(BOOL)hd;
-(BOOL)StartDownloadImage:(id)image HD:(BOOL)hd;
-(void)StopUploadImage:(id)image;
-(BOOL)StartUploadImage:(id)image;
-(BOOL)StopDownloadComMedia:(id)media CdnDownloadTaskInfo:(id)info;
-(BOOL)IsCdnAvaible;
-(BOOL)IsAppMsgUseCdn;
-(BOOL)IsVideoUseCdn;
-(BOOL)IsImageUseCdn;
-(BOOL)IsUseCdn;
-(BOOL)IsMessageCanUseCdnDownload:(id)download;
-(BOOL)IsMessageCanUseCdnUpload:(id)upload;
-(void)UnInit;
-(void)dealloc;
-(id)init;
@end

@interface TestWhatsNewViewController : MMUIViewController <UIScrollViewDelegate> {
	UIScrollView* _scrollView;
	UIPageControl* _pageCtrl;
	MMHeadImageView* _myHeadImgView;
	UIView* _friendsView;
	UILabel* _welcomeLabel;
	UIButton* _enterBtn;
	UIView* _moreFriendsView;
	NSMutableArray* _contactList;
}
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)doPopupAnimation;
-(void)enterWechat:(id)wechat;
-(void)didReceiveMemoryWarning;
-(CGPoint)getMoreFriendsHeadImageViewFrameByIndex:(unsigned long)index;
-(CGRect)getHeadImageViewFrameByIndex:(unsigned long)index;
-(void)initMoreFriendsView;
-(void)initFriendsView;
-(id)getRandomUsrname;
-(void)initView;
-(void)dealloc;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface WXTalkTipsView : UIView {
	id<WXTalkTipsViewDelegate> _delegate;
	CContact* _contact;
	BOOL _isUnfold;
	UIImageView* _bgView;
	UIImageView* _iconView;
	UILabel* _foldTipsLabel;
	UIImageView* _arrowView;
	UILabel* _unfoldTipsLabel;
	UIButton* _enterButton;
	UIButton* _cancelButton;
}
@property(assign, nonatomic) id<WXTalkTipsViewDelegate> delegate;
+(id)showTalkRoomTips:(id)tips withDelegate:(id)delegate;
-(void)onEnterButtonPress;
-(void)onCancelButtonPress;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(BOOL)checkTouchPoint:(CGPoint)point IfInView:(id)view;
-(void)doFadeOutAnimation;
-(void)resetTipsView;
-(void)doFoldAnimation;
-(void)unfold;
-(void)doUnfoldAnimation;
-(void)unfoldAnimationFinish;
-(void)setTipsTitle:(id)title;
-(void)dealloc;
-(id)initWithContact:(id)contact;
-(void)updateFoldTipsLabel:(id)label;
@end

@interface MMGridView : MMUIScrollView <UIGestureRecognizerDelegate, UIScrollViewDelegate, MMGridViewCellDelegate> {
	UIPanGestureRecognizer* _sortingPanGesture;
	UILongPressGestureRecognizer* _longPressGesture;
	UIPinchGestureRecognizer* _pinchGesture;
	UITapGestureRecognizer* _tapGesture;
	UIRotationGestureRecognizer* _rotationGesture;
	UIPanGestureRecognizer* _panGesture;
	int _numberTotalItems;
	CGSize _itemSize;
	NSMutableSet* _reusableCells;
	MMGridViewCell* _sortMovingItem;
	int _sortFuturePosition;
	BOOL _autoScrollActive;
	CGPoint _minPossibleContentOffset;
	CGPoint _maxPossibleContentOffset;
	MMGridViewCell* _transformingItem;
	float _lastRotation;
	float _lastScale;
	BOOL _inFullSizeMode;
	BOOL _inTransformingState;
	BOOL _rotationActive;
	int m_moveState;
	MMDelegateProxy<MMGridViewDataSource>* m_dataSource;
	MMDelegateProxy<MMGridViewActionDelegate>* m_actionDelegate;
	MMDelegateProxy<MMGridViewSortingDelegate>* m_sortingDelegate;
	MMDelegateProxy<MMGridViewTransformationDelegate>* m_transformDelegate;
	MMDelegateProxy<MMGridViewLayoutStrategy>* m_layoutStrategy;
	UIView* _mainSuperView;
	int _itemSpacingH;
	int _itemSpacingV;
	BOOL _centerGridH;
	UIEdgeInsets _minEdgeInsets;
	BOOL _editing;
	BOOL _itemsSubviewsCacheIsValid;
	int _firstPositionLoaded;
	int _lastPositionLoaded;
	float cellResponseOffset;
	BOOL showFullSizeViewWithAlphaWhenTransforming;
	BOOL enableEditOnLongPress;
	BOOL disableEditOnEmptySpaceTap;
	int _style;
	NSArray* itemSubviewsCache;
	double minimumPressDuration;
}
@property(assign, nonatomic) int lastPositionLoaded;
@property(assign, nonatomic) int firstPositionLoaded;
@property(retain, nonatomic) NSArray* itemSubviewsCache;
@property(readonly, assign, nonatomic) BOOL itemsSubviewsCacheIsValid;
@property(assign, nonatomic) float cellResponseOffset;
@property(assign) int m_moveState;
@property(readonly, assign, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) BOOL disableEditOnEmptySpaceTap;
@property(assign, nonatomic) BOOL enableEditOnLongPress;
@property(assign, nonatomic) BOOL showFullSizeViewWithAlphaWhenTransforming;
@property(assign, nonatomic) double minimumPressDuration;
@property(assign, nonatomic) UIEdgeInsets minEdgeInsets;
@property(assign, nonatomic) BOOL centerGridH;
@property(assign, nonatomic) int itemSpacingV;
@property(assign, nonatomic) int itemSpacingH;
@property(assign, nonatomic) int style;
@property(assign, nonatomic) UIView* mainSuperView;
@property(assign, nonatomic, getter=isEditing) BOOL editing;
-(id).cxx_construct;
-(void)swapObjectAtIndex:(int)index withObjectAtIndex:(int)index2 withAnimation:(int)animation;
-(void)swapObjectAtIndex:(int)index withObjectAtIndex:(int)index2 animated:(BOOL)animated;
-(void)removeObjectAtIndex:(int)index withAnimation:(int)animation;
-(void)removeObjectAtIndex:(int)index animated:(BOOL)animated;
-(void)deleteCell:(int)cell;
-(void)onDeleteCell:(int)cell;
-(void)insertObjectAtIndex:(int)index withAnimation:(int)animation;
-(void)insertObjectAtIndex:(int)index animated:(BOOL)animated;
-(void)scrollToObjectAtIndex:(int)index atScrollPosition:(int)scrollPosition animated:(BOOL)animated;
-(void)reloadObjectAtIndex:(int)index withAnimation:(int)animation;
-(void)reloadObjectAtIndex:(int)index animated:(BOOL)animated;
-(void)reloadData;
-(void)updateBasicSettings;
-(id)dequeueReusableCellWithIdentifier:(id)identifier;
-(id)dequeueReusableCell;
-(void)queueReusableCell:(id)cell;
-(void)cleanupUnseenItems;
-(void)loadRequiredItems;
-(CGRect)rectForPoint:(CGPoint)point inPaggingMode:(BOOL)paggingMode;
-(void)relayoutItemsAnimated:(BOOL)animated;
-(void)relayoutItemsAnimated:(BOOL)animated duration:(double)duration;
-(void)recomputeSizeAnimated:(BOOL)animated;
-(int)positionForItemSubview:(id)itemSubview;
-(id)cellForItemAtIndex:(int)index;
-(id)itemSubviews;
-(id)newItemSubViewForPosition:(int)position;
-(void)setSubviewsCacheAsInvalid;
-(void)tapGestureUpdated:(id)updated;
-(void)transformingGestureDidFinish;
-(BOOL)isInTransformingState;
-(void)transformingGestureDidBeginWithGesture:(id)transformingGesture;
-(void)rotationGestureUpdated:(id)updated;
-(void)pinchGestureUpdated:(id)updated;
-(void)panGestureUpdated:(id)updated;
-(void)sortingMoveDidContinueToPoint:(CGPoint)sortingMove;
-(void)sortingMoveDidStopAtPoint:(CGPoint)sortingMove;
-(void)sortingMoveDidStartAtPoint:(CGPoint)sortingMove;
-(void)sortingAutoScrollMovementCheck;
-(void)sortingPanGestureUpdated:(id)updated;
-(BOOL)shouldActAtPoint:(CGPoint)point;
-(void)longPressGestureUpdated:(id)updated;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)contentOffset:(CGPoint)offset;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)setLayoutStrategy:(id)strategy;
-(void)setTransformDelegate:(id)delegate;
-(void)setActionDelegate:(id)delegate;
-(void)setSortingDelegate:(id)delegate;
-(void)setDataSource:(id)source;
-(void)receivedWillRotateNotification:(id)received;
-(void)receivedMemoryWarningNotification:(id)notification;
-(void)layoutSubviews;
-(void)layoutSubviewsWithAnimation:(int)animation;
-(void)applyWithoutAnimation:(id)animation;
-(id)getRotationGestureRecognizer;
-(id)getTapGestureRecognizer;
-(id)getPinchGestureRecognizer;
-(id)getLongPressGestureRecognizer;
-(id)getSortPanGestureRecognizer;
-(id)getPanGestureRecognizer;
-(id)getScrollViewPanGestureRecognizer;
-(void)setContentOffset:(CGPoint)offset;
-(void)gotoPage:(unsigned long)page;
-(void)dealloc;
-(void)commonInit;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

@interface MMGridViewCell : MMUIView {
	MMDelegateProxy<MMGridViewCellDelegate>* m_delegate;
	UIView* _contentView;
	BOOL _editing;
	BOOL _inShakingMode;
	CGSize _fullSize;
	UIView* _fullSizeView;
	BOOL _inFullSizeMode;
	unsigned _defaultFullsizeViewResizingMask;
	UIImage* _deleteButtonIcon;
	UIButton* _deleteButton;
	CGPoint _deleteButtonOffset;
	BOOL _canEdit;
	CGPoint _deleteButtonFrameOffset;
	BOOL highlighted;
	NSString* reuseIdentifier;
}
@property(assign, nonatomic) unsigned defaultFullsizeViewResizingMask;
@property(assign, nonatomic, getter=isEditing) BOOL editing;
@property(readonly, assign, nonatomic, getter=isInFullSizeMode) BOOL inFullSizeMode;
@property(readonly, assign, nonatomic, getter=isInShakingMode) BOOL inShakingMode;
@property(assign, nonatomic) CGSize fullSize;
@property(retain, nonatomic) UIView* fullSizeView;
@property(assign, nonatomic) CGPoint deleteButtonFrameOffset;
@property(assign, nonatomic) BOOL canEdit;
@property(retain, nonatomic) UIButton* deleteButton;
@property(assign, nonatomic, getter=isHighlighted) BOOL highlighted;
@property(retain, nonatomic) NSString* reuseIdentifier;
@property(assign, nonatomic) CGPoint deleteButtonOffset;
@property(retain, nonatomic) UIImage* deleteButtonIcon;
@property(retain, nonatomic) UIView* contentView;
-(id).cxx_construct;
-(void)stepToFullsizeWithAlpha:(float)alpha;
-(void)switchToFullSizeMode:(BOOL)fullSizeMode;
-(void)shake:(BOOL)shake;
-(void)prepareForReuse;
-(void)actionDelete;
-(void)tryInitDeleteButton;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)layoutSubviews;
-(void)setDelegate:(id)delegate;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(id)init;
@end

@interface MMGridViewLayoutStrategyFactory : NSObject {
}
+(id)strategyFromType:(int)type;
@end

@interface MMGridViewLayoutStrategyBase : MMObject {
	int _type;
	CGSize _itemSize;
	int _itemSpacingH;
	int _itemSpacingV;
	UIEdgeInsets _minEdgeInsets;
	BOOL _centeredGridH;
	int _itemCount;
	UIEdgeInsets _edgeInsets;
	CGRect _gridBounds;
	CGSize _contentSize;
	BOOL m_shouldAutoAdaptColumn;
	BOOL m_hasSetColumn;
	BOOL m_shouldAutoAdaptRow;
	BOOL m_hasSetRow;
}
@property(readonly, assign, nonatomic) CGSize contentSize;
@property(readonly, assign, nonatomic) CGRect gridBounds;
@property(readonly, assign, nonatomic) UIEdgeInsets edgeInsets;
@property(readonly, assign, nonatomic) int itemCount;
@property(readonly, assign, nonatomic) BOOL centeredGridH;
@property(readonly, assign, nonatomic) UIEdgeInsets minEdgeInsets;
@property(readonly, assign, nonatomic) int itemSpacingV;
@property(readonly, assign, nonatomic) int itemSpacingH;
@property(readonly, assign, nonatomic) CGSize itemSize;
@property(readonly, assign, nonatomic) int type;
@property(assign, nonatomic) BOOL m_shouldAutoAdaptRow;
@property(assign, nonatomic) BOOL m_shouldAutoAdaptColumn;
-(id).cxx_construct;
-(void)setEdgeAndContentSizeFromAbsoluteContentSize:(CGSize)absoluteContentSize;
-(void)setupItemSize:(CGSize)size andItemSpacingH:(int)h andItemSpacingV:(int)v withMinEdgeInsets:(UIEdgeInsets)minEdgeInsets andCenteredGrid:(BOOL)grid;
-(id)init;
-(void)dealloc;
@end

@interface MMGridViewLayoutVerticalStrategy : MMGridViewLayoutStrategyBase <MMGridViewLayoutStrategy> {
	int _numberOfItemsPerRow;
}
@property(readonly, assign, nonatomic) int numberOfItemsPerRow;
+(BOOL)requiresEnablingPaging;
-(NSRange)rangeOfPositionsInBoundsFromOffset:(CGPoint)offset;
-(int)itemPositionFromLocation:(CGPoint)location;
-(CGPoint)originForItemAtPosition:(int)position;
-(void)rebaseWithItemCount:(int)itemCount insideOfBounds:(CGRect)bounds;
-(id)init;
@end

@interface MMGridViewLayoutHorizontalStrategy : MMGridViewLayoutStrategyBase <MMGridViewLayoutStrategy> {
	int _numberOfItemsPerColumn;
}
@property(readonly, assign, nonatomic) int numberOfItemsPerColumn;
+(BOOL)requiresEnablingPaging;
-(NSRange)rangeOfPositionsInBoundsFromOffset:(CGPoint)offset;
-(int)itemPositionFromLocation:(CGPoint)location;
-(CGPoint)originForItemAtPosition:(int)position;
-(void)rebaseWithItemCount:(int)itemCount insideOfBounds:(CGRect)bounds;
-(id)init;
@end

@interface MMGridViewLayoutHorizontalPagedStrategy : MMGridViewLayoutHorizontalStrategy {
	int _numberOfItemsPerRow;
	int _numberOfItemsPerPage;
	int _numberOfPages;
}
@property(readonly, assign, nonatomic) int numberOfPages;
@property(readonly, assign, nonatomic) int numberOfItemsPerPage;
@property(readonly, assign, nonatomic) int numberOfItemsPerRow;
+(BOOL)requiresEnablingPaging;
-(NSRange)rangeOfPositionsInBoundsFromOffset:(CGPoint)offset;
-(int)itemPositionFromLocation:(CGPoint)location;
-(CGPoint)originForItemAtPosition:(int)position;
-(int)rowForItemAtPosition:(int)position;
-(int)columnForItemAtPosition:(int)position;
-(int)positionForItemAtColumn:(int)column row:(int)row page:(int)page;
-(CGPoint)originForItemAtColumn:(int)column row:(int)row page:(int)page;
-(int)pageForItemAtIndex:(int)index;
-(void)rebaseWithItemCount:(int)itemCount insideOfBounds:(CGRect)bounds;
@end

@interface MMGridViewLayoutHorizontalPagedLTRStrategy : MMGridViewLayoutHorizontalPagedStrategy {
}
-(id)init;
@end

@interface MMGridViewLayoutHorizontalPagedTTBStrategy : MMGridViewLayoutHorizontalPagedStrategy {
}
-(int)rowForItemAtPosition:(int)position;
-(int)columnForItemAtPosition:(int)position;
-(int)positionForItemAtColumn:(int)column row:(int)row page:(int)page;
-(id)init;
@end

@interface MMGridViewLayoutHorizontalPagedMyAppStrategy : MMGridViewLayoutHorizontalPagedStrategy {
}
@end

@interface MainWindow : UIWindow {
	float windowOffset;
	float mainWindowX;
	float mainWindowY;
	float mainWindowWidth;
	float mainWindowHeight;
	CGRect mainWindowFrame;
}
@property(assign, nonatomic) float mainWindowHeight;
@property(assign, nonatomic) float mainWindowWidth;
@property(assign, nonatomic) float mainWindowY;
@property(assign, nonatomic) float mainWindowX;
@property(assign, nonatomic) CGRect mainWindowFrame;
@property(assign, nonatomic) float windowOffset;
-(id).cxx_construct;
-(void)setX:(float)x;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WXTalkRoomMemberItemView : UIView {
	MMHeadImageView* _headImage;
	UIImageView* _lightFrame;
}
-(BOOL)isShowLightFrame;
-(id)getUsername;
-(void)hideLightFrame;
-(void)showLightFrame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame AndUsername:(id)username;
@end

@interface BrandServiceEnterConversationLogic : NSObject <PBMessageObserverDelegate> {
	CContact* m_contact;
}
@property(retain, nonatomic) CContact* m_contact;
-(void)startReportExitConversationForContact;
-(void)startReportEnterConversationForContact:(id)contact;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(id)init;
-(void)dealloc;
@end

@interface WCOfflinePayControlData : NSObject {
}
@end

@interface BrandServiceDeleteAdviceMsg : NSObject {
	NSString* title;
	NSMutableArray* brandServiceNameList;
}
@property(retain, nonatomic) NSMutableArray* brandServiceNameList;
@property(copy, nonatomic) NSString* title;
-(void)dealloc;
-(BOOL)fromXml:(XmlReaderNode_t*)xml;
@end

@interface BrandServiceContinueLocationReportLogic : MMObject <PBMessageObserverDelegate, LocationRetrieveDelegate, UIAlertViewDelegate> {
	unsigned long m_eventID;
	LocationRetriever* m_locationRetriever;
	CContact* m_contact;
	NSDate* m_lastReportTime;
}
@property(retain, nonatomic) NSDate* m_lastReportTime;
@property(retain, nonatomic) CContact* m_contact;
@property(retain, nonatomic) LocationRetriever* m_locationRetriever;
-(void)cancelRetrieveLocationIfOnlyReportOnce;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)onRetrieveLocationTimeOut:(id)anOut;
-(void)onRetrieveLocationOK:(id)ok;
-(void)onRetrieveLocationError:(int)error;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)reportLocationWithLocation:(id)location ErrorCode:(int)code;
-(void)stopReportLocation;
-(void)startReportLocationForContact:(id)contact HasSetLocation:(BOOL)location;
-(id)init;
-(void)dealloc;
@end

@interface NetCmdSendOnlyEvent : CBaseEvent {
	INetCmdSendOnly* m_netcmd;
	int m_cmdstatus;
}
@property(assign, nonatomic) INetCmdSendOnly* m_netcmd;
-(void)OnCmdRecv;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface VoipStatusControl : UIButton {
	UILabel* nameLabel;
	int status;
}
@property(assign, nonatomic) int status;
-(id)initWithFrame:(CGRect)frame withName:(id)name withTag:(int)tag;
@end

@interface VoipStatusControlView : UIView {
	VoipStatusControl* voiceControl;
	VoipStatusControl* videoControl;
	VoipStatusControl* loudSpeakerControl;
	id<VoipStatusDelegate> delegate;
}
@property(assign, nonatomic) id<VoipStatusDelegate> delegate;
+(int)reverseStatus:(int)status;
-(void)controlTapped:(id)tapped;
-(void)dealloc;
-(id)initWithVoice:(BOOL)voice withLoudSpeakerStatus:(int)loudSpeakerStatus;
-(int)getStatusFromTag:(int)tag;
-(void)setStatus:(int)status toTag:(int)tag;
@end

@interface CdnTaskInfo : NSObject {
	NSString* m_nsClientMsgID;
	CMessageWrap* m_wrapMsg;
	NSString* m_nsChatName;
	unsigned long m_uiThumbSize;
	BOOL m_bHD;
	unsigned long m_uiFinishedLen;
	unsigned long m_uiTotalLen;
	unsigned long long m_ui64StartTime;
	int m_nRetCode;
	BOOL m_bUpload;
	BOOL m_bThumb;
	NSString* m_nsCdnStatInfo;
	unsigned long m_uiOpType;
}
@property(assign, nonatomic) unsigned long m_uiOpType;
@property(retain, nonatomic) NSString* m_nsCdnStatInfo;
@property(assign, nonatomic) BOOL m_bThumb;
@property(assign, nonatomic) BOOL m_bUpload;
@property(assign, nonatomic) int m_nRetCode;
@property(assign, nonatomic) unsigned long long m_ui64StartTime;
@property(assign, nonatomic) unsigned long m_uiTotalLen;
@property(assign, nonatomic) unsigned long m_uiFinishedLen;
@property(assign, nonatomic) BOOL m_bHD;
@property(assign, nonatomic) unsigned long m_uiThumbSize;
@property(retain, nonatomic) NSString* m_nsChatName;
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
@property(retain, nonatomic) NSString* m_nsClientMsgID;
-(id)GetStatInfo;
-(void)dealloc;
-(id)init;
@end

@interface CdnFavMediaInfo : NSObject {
	NSString* m_nsClientMsgID;
	NSString* m_nsFilePath;
	unsigned long m_uiFileType;
	BOOL m_bStreamMedia;
	NSString* m_nsFileID;
	NSString* m_nsAesKey;
	unsigned long m_uiFileTotalLen;
}
@property(assign, nonatomic) unsigned long m_uiFileType;
@property(assign, nonatomic) unsigned long m_uiFileTotalLen;
@property(retain, nonatomic) NSString* m_nsAesKey;
@property(retain, nonatomic) NSString* m_nsFileID;
@property(assign, nonatomic) BOOL m_bStreamMedia;
@property(retain, nonatomic) NSString* m_nsFilePath;
@property(retain, nonatomic) NSString* m_nsClientMsgID;
-(void)dealloc;
-(id)init;
@end

@interface CdnComMediaInfo : NSObject {
	NSString* m_nsClientMsgID;
	NSString* m_nsFilePath;
	NSString* m_nsFileID;
	NSString* m_nsAesKey;
	unsigned long m_uiFileTotalLen;
	unsigned long m_uiScene;
	NSString* m_nsExtInfo;
}
@property(retain, nonatomic) NSString* m_nsExtInfo;
@property(assign, nonatomic) unsigned long m_uiScene;
@property(assign, nonatomic) unsigned long m_uiFileTotalLen;
@property(retain, nonatomic) NSString* m_nsAesKey;
@property(retain, nonatomic) NSString* m_nsFileID;
@property(retain, nonatomic) NSString* m_nsFilePath;
@property(retain, nonatomic) NSString* m_nsClientMsgID;
-(void)dealloc;
-(id)init;
@end

@interface CdnProgressInfo : NSObject {
	NSString* m_nsClientMsgID;
	long m_nTotalLength;
	long m_nFinishedLegth;
	long m_nStatus;
}
@property(assign, nonatomic) long m_nStatus;
@property(assign, nonatomic) long m_nFinishedLegth;
@property(assign, nonatomic) long m_nTotalLength;
@property(retain, nonatomic) NSString* m_nsClientMsgID;
-(void)dealloc;
-(id)init;
@end

@interface CdnUploadTaskInfo : NSObject {
	NSString* m_nsClientMsgID;
	NSString* m_nsFileId;
	NSString* m_nsAesKey;
	long m_nFileLength;
	NSString* m_nsTransInfo;
	long m_nRetCode;
	NSString* m_nsChatName;
	NSString* m_nsThumbAesKey;
	long m_nThumbImgLength;
	long m_nMidimgLength;
	NSString* m_nsStreamId;
	unsigned long m_uiScene;
}
@property(assign, nonatomic) unsigned long m_uiScene;
@property(retain, nonatomic) NSString* m_nsStreamId;
@property(assign, nonatomic) long m_nThumbImgLength;
@property(retain, nonatomic) NSString* m_nsChatName;
@property(assign, nonatomic) long m_nRetCode;
@property(retain, nonatomic) NSString* m_nsTransInfo;
@property(assign, nonatomic) long m_nMidimgLength;
@property(assign, nonatomic) long m_nFileLength;
@property(retain, nonatomic) NSString* m_nsThumbAesKey;
@property(retain, nonatomic) NSString* m_nsAesKey;
@property(retain, nonatomic) NSString* m_nsFileId;
@property(retain, nonatomic) NSString* m_nsClientMsgID;
-(void)dealloc;
-(id)init;
@end

@interface CdnDownloadTaskInfo : NSObject {
	NSString* m_nsClientMsgID;
	unsigned long m_uiFileLength;
	NSString* m_nsTransInfo;
	long m_nRetCode;
	unsigned long m_uiScene;
	NSString* m_nsFileID;
	NSString* m_nsExtInfo;
}
@property(retain, nonatomic) NSString* m_nsExtInfo;
@property(retain, nonatomic) NSString* m_nsFileID;
@property(assign, nonatomic) unsigned long m_uiScene;
@property(assign, nonatomic) long m_nRetCode;
@property(retain, nonatomic) NSString* m_nsTransInfo;
@property(assign, nonatomic) unsigned long m_uiFileLength;
@property(retain, nonatomic) NSString* m_nsClientMsgID;
-(void)dealloc;
-(id)init;
@end

@interface UploadImageInfo : NSObject {
	CMessageWrap* m_wrapMsg;
	unsigned long long m_ui64StartTime;
	unsigned long m_uiTotalLen;
	int m_nRetCode;
}
@property(assign, nonatomic) int m_nRetCode;
@property(assign, nonatomic) unsigned long m_uiTotalLen;
@property(assign, nonatomic) unsigned long long m_ui64StartTime;
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
-(id)GetStatInfo;
-(void)dealloc;
-(id)init;
@end

@interface DownloadImageInfo : NSObject {
	CMessageWrap* m_wrapMsg;
	unsigned long m_uiTotalLen;
	unsigned long m_uiStartPos;
	BOOL m_bDownloadHD;
	NSString* m_nsChatName;
	CUploadImgWrap* m_wrapDownload;
	unsigned long m_uiNotifyPartLen;
	unsigned long m_uiNotifyTotalLen;
	unsigned long long m_ui64StartTime;
	int m_nRetCode;
}
@property(assign, nonatomic) int m_nRetCode;
@property(assign, nonatomic) unsigned long long m_ui64StartTime;
@property(assign, nonatomic) unsigned long m_uiNotifyTotalLen;
@property(assign, nonatomic) unsigned long m_uiNotifyPartLen;
@property(retain, nonatomic) NSString* m_nsChatName;
@property(assign, nonatomic) BOOL m_bDownloadHD;
@property(assign, nonatomic) unsigned long m_uiStartPos;
@property(assign, nonatomic) unsigned long m_uiTotalLen;
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
-(id)GetStatInfo;
-(void)NotifyOffset;
-(void)NotifyPartLen:(unsigned long)len TotalLen:(unsigned long)len2;
-(id)GenDownloadInfo;
-(void)SetTotalLen:(unsigned long)len;
-(void)UpdateInfo;
-(BOOL)IsSameInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface ForwardMessageToBrandLogicController : NSObject {
	id<ForwardMessageToBrandLogicControllerDelegate> m_delegate;
}
@property(assign, nonatomic) id<ForwardMessageToBrandLogicControllerDelegate> m_delegate;
-(void)forwardMessage:(id)message toContact:(id)contact;
-(void)dealloc;
-(id)init;
@end

@interface GetContactEventHandler : ProtobufEventHandler {
}
-(void)OnProtocolReturn:(id)aReturn shouldContinue:(bool*)aContinue;
-(void)HandleMemContact:(id)contact;
@end

@interface MMAlbumPickerController : MMUIViewController <UITableViewDataSource, UITableViewDelegate> {
	NSOperationQueue* _queue;
	ALAssetsLibrary* _library;
	BOOL _firstTime;
	NSMutableArray* _assetGroups;
	MMTableView* _tableView;
	MMDelegateProxy<MMImagePickerControlCenter>* _controlCenter;
}
@property(assign, nonatomic) MMDelegateProxy<MMImagePickerControlCenter>* controlCenter;
@property(retain, nonatomic) NSMutableArray* assetGroups;
@property(retain, nonatomic) MMTableView* tableView;
-(void)adjustSubviewRects;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)OnTableViewCellSelected:(id)selected animated:(BOOL)animated;
-(void)cancelImagePicker;
-(void)prepareAlbums;
-(void)reloadTableView;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)showEmptyTip;
-(void)showAuthTip;
-(void)showTipWithWording:(id)wording;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(id)init;
@end

@interface MMAssetInfo : NSObject {
	ALAsset* _asset;
	NSURL* _url;
	int _index;
	NSString* _type;
}
@property(readonly, assign, nonatomic) NSString* type;
@property(readonly, assign, nonatomic) int index;
@property(retain, nonatomic) NSURL* url;
@property(readonly, assign, nonatomic) ALAsset* asset;
-(int)compareAssetInfo:(id)info;
-(void)dealloc;
-(id)initWithUrl:(id)url forIndex:(int)index withType:(id)type;
-(id)initWithAsset:(id)asset withUrl:(id)url forIndex:(int)index withType:(id)type;
@end

@interface MMAsset : MMUIView <UIAlertViewDelegate> {
	UIView* _overlayView;
	UIImageView* _markSelectedImageView;
	BOOL bSelected;
	BOOL selected;
	ALAsset* asset;
	id parent;
	int _index;
}
@property(assign, nonatomic) int index;
@property(assign, nonatomic) BOOL selected;
@property(assign, nonatomic) id parent;
@property(retain, nonatomic) ALAsset* asset;
-(id)timeStringBySeconds:(double)seconds;
-(void)dealloc;
-(void)tagAseetToPreview;
-(void)toggleSelection;
-(void)showedSelectedMark:(BOOL)mark;
-(void)startPopUpAnimation:(id)animation originScale:(float)scale;
-(id)initWithAsset:(id)asset;
@end

@interface MMAssetCell : UITableViewCell {
	NSArray* _rowAssets;
}
@property(retain, nonatomic) NSArray* rowAssets;
-(void)dealloc;
-(void)layoutSubviews;
-(void)setAssets:(id)assets;
-(id)initWithAssets:(id)assets reuseIdentifier:(id)identifier;
@end

@interface MMAssetPickerController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, MMImagePreviewBrowserControllerDelegate, MMVideoPreviewBrowserControllerDelegate> {
	NSOperationQueue* _queue;
	NSMutableArray* _imageDictionaries;
	float _previousOffset;
	UIImageView* _bottomBar;
	UIButton* _previewButton;
	UIButton* _sendButton;
	UIButton* _sendBadge;
	UIImageView* _sendBadgeBackImageView;
	float _realBottomBarHeight;
	NSMutableDictionary* m_dicAssetViewsCache;
	int m_assetPickerControllerDisplayStatus;
	BOOL _isOriginalImageForSend;
	BOOL _needThumbImage;
	BOOL _compressType;
	MMDelegateProxy<MMImagePickerControlCenter>* controlCenter;
	ALAssetsGroup* _assetGroup;
	NSMutableArray* _assets;
	NSString* _albumName;
	NSMutableArray* _selectedAssetInfos;
	MMTableView* _tableView;
}
@property(retain, nonatomic) NSMutableArray* selectedAssetInfos;
@property(retain, nonatomic) NSString* albumName;
@property(retain, nonatomic) NSMutableArray* assets;
@property(assign, nonatomic) ALAssetsGroup* assetGroup;
@property(retain, nonatomic) MMTableView* tableView;
@property(assign, nonatomic) MMDelegateProxy<MMImagePickerControlCenter>* controlCenter;
-(void)sendVideoWithURL:(id)url;
-(void)sendImageByOriginal:(BOOL)original;
-(void)processingImageAtIndex:(id)index;
-(void)stopLoadingAfterSent;
-(void)getImageAtIndex:(int)index;
-(void)getImageFromAsset:(id)asset;
-(id)backupImageToJPEG:(id)jpeg scale:(float)scale orientation:(int)orientation original:(BOOL)original;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)assetsForIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)isSelected:(id)selected;
-(id)getHeaderView;
-(void)OnSelectEachSelectedDisplay:(id)display;
-(void)OnSelectAllDisplay:(id)display;
-(void)OnPreview:(id)preview;
-(void)OnBack:(id)back;
-(void)OnCancel:(id)cancel;
-(void)OnSend:(id)send;
-(void)sendImage;
-(void)prepareSend;
-(void)previewVideo;
-(void)previewImage;
-(void)previewImage:(id)image;
-(void)preparePreview;
-(void)preparePreview:(id)preview;
-(void)prepareOnlyPhotos;
-(void)preparePhotosAndVideos;
-(void)preparePhotos:(BOOL)photos;
-(void)reloadBottomBar;
-(void)startPopUpAnimation:(id)animation originScale:(float)scale;
-(void)reloadPhotoView;
-(void)fixOffset;
-(void)reloadSelectedDisplayView;
-(void)adjustSubviewRects;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initBottomBar;
-(void)initOverlayView;
-(void)initTableView;
-(void)initView;
-(void)initData;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)init;
@end

@interface WCPayTenpayImportCardInfoViewController : WCPayBaseViewController <ILinkEventExt, UIActionSheetDelegate> {
	BOOL m_bReadAgreement;
	BOOL m_bSubscribeApp;
	UIButton* m_footerButton;
	NSMutableArray* m_arrayInfoGroup;
	MMDelegateProxy<WCPayTenpayImportCardInfoViewControllerDelegate>* m_delegate;
}
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)setDelegate:(id)delegate;
-(void)onNext;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)initFooterView;
-(void)onReadAgreement:(id)agreement;
-(void)onSubscribeAppBtn:(id)btn;
-(void)reloadTableView;
-(void)viewDidLoad;
-(void)initInfoTemplate;
-(id)getHeaderView;
-(void)initNavigationBar;
-(void)dealloc;
@end

@interface MMImagePickerController : MMUINavigationController <MMImagePickerControllerDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, MMImagePickerControlCenter> {
	BOOL _canSendOriginImage;
	BOOL _canSendVideoMessage;
	BOOL _canSendMultiImage;
	BOOL _needThumbImage;
	BOOL _showPreviewView;
	BOOL _isOriginalImage;
	MMDelegateProxy<MMImagePickerControllerDelegate>* m_delegate;
	MMAlbumPickerController* _photoPicker;
	int _maxImageCount;
	int _compressType;
	NSString* _finishWording;
	NSString* _currentAlbum;
	NSArray* _selectedImageURLs;
}
@property(retain, nonatomic) NSString* currentAlbum;
@property(assign, nonatomic) BOOL isOriginalImage;
@property(retain, nonatomic) NSString* finishWording;
@property(assign, nonatomic) int compressType;
@property(retain, nonatomic) NSArray* selectedImageURLs;
@property(assign, nonatomic) int maxImageCount;
@property(assign, nonatomic) BOOL showPreviewView;
@property(assign, nonatomic) BOOL needThumbImage;
@property(assign, nonatomic) BOOL canSendMultiImage;
@property(assign, nonatomic) BOOL canSendVideoMessage;
@property(assign, nonatomic) BOOL canSendOriginImage;
@property(assign, nonatomic) MMAlbumPickerController* photoPicker;
@property(assign, nonatomic) MMDelegateProxy<MMImagePickerControllerDelegate>* m_delegate;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)MMImagePickerControllerDidCancel:(id)mmimagePickerController;
-(void)MMImagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)selectedVideo:(id)video;
-(void)selectedAssets:(id)assets;
-(void)cancelImagePicker;
-(void)removeImageDatas;
-(id)init;
@end

@interface MMImagePickerDemoViewController : MMUIViewController <MMImagePickerControllerDelegate, UINavigationControllerDelegate, UIScrollViewDelegate> {
	UIButton* _button;
	UISwitch* _switch;
	UIScrollView* _scrollView;
}
@property(retain, nonatomic) UIScrollView* scrollView;
-(void)dealloc;
-(void)OnSwitch:(id)aSwitch;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(void)MMVideoPickerControllerDidCancel:(id)mmvideoPickerController;
-(void)MMVideoPickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)MMImagePickerControllerDidCancel:(id)mmimagePickerController;
-(void)MMImagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)launchController;
@end

@interface MMImagePreviewBrowserController : MMUIViewController <MultiImageScrollViewDelegate, UIActionSheetDelegate> {
	MultiImageScrollView* _pagingScrollView;
	UIButton* _selectedButton;
	UIImageView* _selectedBackImageView;
	UIImageView* _bottomBar;
	UIButton* _sendButton;
	UIButton* _originImageCheck;
	UIButton* _sendBadge;
	UIImageView* _sendBadgeBackImageView;
	UILabel* _originImageLabel;
	UILabel* _imageLocalNameInfoLabel;
	UILabel* _imageCreateTimeLabel;
	UIView* oTitleBackGroundView;
	NSMutableArray* _imageScrollViewPool;
	id* _tempImagePool;
	NSMutableDictionary* originImageSizeDictionary;
	NSMutableDictionary* imageLocalNameInfoDictionary;
	NSMutableDictionary* imageCreateTimeDictionary;
	UIActivityIndicatorView* _originIndictorView;
	unsigned long startLoadIndex;
	BOOL showTopAndBottonBar;
	int _compressType;
	NSMutableArray* _assetInfos;
	NSMutableArray* _selectedAssetInfos;
	NSMutableDictionary* _thumbImages;
	MMDelegateProxy<MMImagePickerControlCenter>* controlCenter;
	MMDelegateProxy<MMImagePreviewBrowserControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MMImagePreviewBrowserControllerDelegate>* m_delegate;
@property(assign, nonatomic) MMDelegateProxy<MMImagePickerControlCenter>* controlCenter;
@property(retain, nonatomic) NSMutableDictionary* thumbImages;
@property(retain, nonatomic) NSMutableArray* selectedAssetInfos;
@property(retain, nonatomic) NSMutableArray* assetInfos;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onChangePage;
-(void)multiImageScrollViewWillBeginDragging;
-(void)onSingleTap:(id)tap;
-(void)setBottomAndTopBarHidden:(BOOL)hidden;
-(id)imageAtPage:(unsigned long)page;
-(id)viewAtPage:(unsigned long)page frame:(CGRect)frame;
-(void)preloadImage:(id)image;
-(void)loadImage:(id)image;
-(void)baseLoadImage:(id)image isCurrentImage:(BOOL)image2;
-(void)displayImage:(id)image withPageIndex:(int)pageIndex;
-(void)prepareImagePool:(id)pool;
-(void)clearImagePool;
-(void)clearThumbImageCache;
-(void)OnFullScreenChanged;
-(void)onOriginImageCheck:(id)check;
-(void)getOriginSize;
-(void)getThumbImage:(id)image;
-(void)getThumbImageAtIndex:(unsigned long)index;
-(void)getImageInfo:(id)info;
-(void)getOriginSize:(id)size;
-(void)onGetOriginSize:(id)size;
-(void)onImageInfoGot:(id)got withDate:(id)date ofAsset:(id)asset;
-(void)setCreateTimeAndLocationWithAnimation:(id)animation;
-(void)setCreateTimeInMiddleLocation:(id)middleLocation;
-(void)OnOriginSizeGot:(id)got;
-(void)OnSelectedButtonDone;
-(void)startBottomBadgePopUpAnimation;
-(unsigned long)IndexFromSelectedAssetInfosOfPageIndex:(unsigned long)pageIndex;
-(void)OnSend:(id)send;
-(void)sendSelectedImage;
-(void)prepareSend;
-(void)stopLoadingAfterSent;
-(void)OnCancel:(id)cancel;
-(void)OnDeleteImage:(id)image;
-(void)deleteImage;
-(void)setPageAtIndex:(unsigned long)index;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)initView;
-(void)startPopUpAnimation:(id)animation originScale:(float)scale;
-(void)OnClickBackBarButton:(id)button;
-(void)initBackgroundView;
-(void)initTitle;
-(void)initBackBarButton;
-(void)initSelectionControlView;
-(void)initBottomBar;
-(void)initData;
@end

@interface GetA8KeyLogic : MMObject <WCPayLogicMgrExt, PBMessageObserverDelegate, MessageObserverDelegate, UIAlertViewDelegate> {
	UIViewController* m_viewController;
	id<GetA8KeyLogicDelegate> m_delegate;
	NSString* m_nsLastResult;
	bool m_isSearching;
	NSString* m_nsBundleID;
}
@property(assign, nonatomic) bool m_isSearching;
-(void)OnWCPayBaseRequestNoKnownError:(id)error TenPayCmdType:(int)type;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnGetA8Key:(id)key;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)showContactInfoView:(id)view;
-(void)doSearch:(id)search;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)doUnknow:(id)unknow;
-(void)GetA8Key:(id)key Scene:(unsigned long)scene;
-(void)setGetA8KeyBundleID:(id)anId;
-(id)initWithViewController:(id)viewController delegate:(id)delegate;
-(void)dealloc;
@end

@interface MMUIHookView : MMUIView {
	MMDelegateProxy<MMUIHookViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MMUIHookViewDelegate>* m_delegate;
-(void)dealloc;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMFullScreenViewController : MMUIViewController <MMUIHookViewDelegate> {
}
-(void)viewDidLoad;
-(void)OnMMUIHookViewFrameChanged:(id)changed;
@end

@interface NewWXTalkView : MMUIWindow <IWXTalkExt, IAUAudioDeviceExt, UIAlertViewDelegate, AVAudioPlayerDelegate, IMsgExt, IVOIPUILogicMgrExt, IContactMgrExt, IWXPresentExt, WXTalkMiniBarDelegate, UIActionSheetDelegate, IUiUtilExt, WCIntroViewDelegate, IRecordPermissionCheckExt> {
	CContact* _contact;
	UIButton* _pushButton;
	UIView* _backgroundView;
	UIImageView* _meterView;
	UIImageView* _peerMeterView;
	UIButton* _foldButton;
	UIButton* _settingButton;
	UILabel* _titleLabel;
	WXTalkHeadListView* _headListView;
	UIImageView* _shadowView;
	WXTalkMiniBar* _miniBarView;
	UIImageView* _ledLight;
	IntroView* _introView;
	UIView* _blackView;
	NSArray* _talkingMemberList;
	NSMutableDictionary* _tipsArray;
	BOOL _isPrepared;
	SEL mRecordSelector;
}
@property(assign, nonatomic) SEL mRecordSelector;
@property(retain, nonatomic) NSArray* talkingMemberList;
@property(retain, nonatomic) CContact* contact;
-(void)onStatusBarFrameChanged;
-(void)onTaskBarHiddenChanged:(BOOL)changed withAnimation:(int)animation;
-(void)onTopBarHiddenChanged:(BOOL)changed withAnimation:(int)animation;
-(void)onIKnowItBtnClick;
-(void)onWXTalkMiniBarClick;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)setSelfFrame:(CGRect)frame;
-(void)setFrame:(CGRect)frame;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showSetting;
-(void)foldWXTalkView;
-(void)unfoldWXTalkView;
-(void)disappearWXTalkView;
-(void)stopDisAppearWithAnimation;
-(void)appearWXTalkView;
-(void)promptForWXTalkUserEducation;
-(void)OnRecordDenied;
-(void)OnRecordPermissioned;
-(void)onPushButtonCancel:(id)cancel;
-(void)realStartByMicroPhone;
-(void)realStartByBtn;
-(void)onPushButtonPress:(id)press;
-(void)onBack;
-(void)onVideoVoipViewDidAppear:(id)onVideoVoipView;
-(void)audioDeviceMeterLevel:(id)level Peak:(float)peak;
-(void)doMeterAnimationOnMainThread:(id)thread;
-(void)OnForceStopWXTalk;
-(void)onKickOutFromWXTalkRoom:(id)wxtalkRoom;
-(void)onRemoteControlCheckShouldStop;
-(void)onRemoteControlCheckShouldPlay;
-(void)OnRestart;
-(void)OnPause;
-(void)OnForceStopRecord;
-(void)OnReConnecting;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnRoomMemberChange:(id)change;
-(void)OnNobodyTalking;
-(void)OnSomeoneTalking:(id)talking;
-(void)OnGetMicrophoneResult:(int)result;
-(void)OnOpenWXTalkModeOK:(id)ok;
-(id)getRoomInfoTips;
-(id)getContactDisplayName:(id)name;
-(void)OnSomeOneCloseMode:(id)mode;
-(void)OnSomeOneOpenMode:(id)mode;
-(id)usernameToDisplayName:(id)displayName;
-(void)stopBreathingAnimation;
-(void)doLEDBreathingAnimationWithFromAlphaWithDuration;
-(void)doMiniBarFadeOutAnimation;
-(void)doMiniBarFadeInAnimation;
-(void)doViewFadeInAnimation:(id)animation;
-(void)doViewFadeOutAnimation:(id)animation DidFinishSelector:(SEL);
-(void)hideMeterView;
-(void)openNewModeWithContact:(id)contact;
-(void)viewDidLoad;
-(void)initView;
-(void)initMiniBar;
-(void)initBlackBottomView;
-(void)initLEDLight;
-(void)initPushButton;
-(void)initCoverView;
-(void)initMeterView;
-(void)initHeadListView;
-(void)initTopView;
-(void)initBackgroundView;
-(void)dealloc;
-(void)releaseSomething;
-(id)initWithFrame:(CGRect)frame andContact:(id)contact;
-(void)unregisterExtension;
-(void)registerExtension;
@end

@interface HeadListTips : NSObject {
	NSString* _tips;
	UIColor* _textColor;
}
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) NSString* tips;
-(void)dealloc;
@end

@interface WXTalkHeadListView : UIView <UIScrollViewDelegate> {
	NSMutableArray* _memberItemList;
	UIScrollView* _scrollView;
	UILabel* _tipsLabel;
	NSMutableDictionary* _tipsArray;
	UILabel* _memberCount;
	MMTimer* _timer;
	NSMutableArray* _tempDelArray;
}
-(void)setMemberCount:(unsigned)count;
-(void)reset;
-(void)removeTipsForOrderAndUpdate:(int)orderAndUpdate;
-(void)setTipsAndUpdate:(id)update forOrder:(int)order;
-(void)doUpdateStrategy;
-(void)updateTipsLabel:(id)label TextColor:(id)color;
-(void)clearEnterExitTips;
-(void)noBodyTalking;
-(id)usernameToDisplayName:(id)displayName;
-(void)doTimerFadeInFadeOutAnimation:(BOOL)fadeOutAnimation;
-(void)someBodyTalking:(id)talking;
-(BOOL)delMember:(id)member;
-(BOOL)addMember:(id)member;
-(void)updateItemViewPosition;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface JailBreakHelper : NSObject <PBCoding, MMPackageDownloadMgrExt> {
	unsigned long m_hasCheckPuginTimes;
	NSMutableArray* m_checkPaths;
	unsigned long m_lastCheckTime;
}
@property(assign, nonatomic) unsigned long m_lastCheckTime;
@property(retain, nonatomic) NSMutableArray* m_checkPaths;
@property(assign, nonatomic) unsigned long m_hasCheckPuginTimes;
+(id)loadSetting;
+(id)getIAPCheckPath;
+(id)getJailbreakPath;
+(id)getJailbreakRootDir;
+(void)initialize;
+(void)_initPBTableOfJailBreakHelper;
-(void)onPackageListUpdated:(id)updated;
-(void)onPackageDownloadProcessUpdated:(id)updated downloadSize:(int)size totalSize:(int)size3;
-(void)onPackageDownloadFinish:(id)finish package:(id)package;
-(BOOL)save;
-(BOOL)HasInstallJailbreakPluginInvalidIAPPurchase;
-(BOOL)isOverADay;
-(BOOL)HasInstallJailbreakPlugin:(id)plugin;
-(BOOL)IsJailBreak;
-(id)getKeyStr;
-(id)init;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface WXTalkMiniBar : UIView {
	id<WXTalkMiniBarDelegate> _delegate;
	NSMutableDictionary* _tipsArray;
	UILabel* _newLabel;
	UILabel* _oldLabel;
	UIImageView* _lightView;
}
@property(assign, nonatomic) id<WXTalkMiniBarDelegate> miniBarDelegate;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)reset;
-(void)stopBreathAnimation;
-(void)doBreathingAnimation;
-(void)removeTipsForOrderAndUpdate:(int)orderAndUpdate;
-(void)setTipsAndUpdate:(id)update forOrder:(int)order;
-(void)doUpdateStrategy;
-(void)clearTapToReturnTips;
-(void)showTapToReturnTips;
-(void)clearEnterExitTips;
-(void)updateTipsLabel:(id)label;
-(void)dealloc;
-(void)setHidden:(BOOL)hidden;
-(id)initWithFrame:(CGRect)frame;
-(CGRect)getNewViewFrame;
-(CGRect)getNewViewPreFrame;
-(CGRect)getOldViewFrame;
-(CGRect)getOldViewPreFrame;
-(void)formatLabel:(id)label;
@end

@interface VolumeView : UIView {
	float m_currentVolume;
}
-(void)setVolume:(float)volume;
-(id)initWithFrame:(CGRect)frame;
@end

@interface BrandServiceViewController : MMUIViewController <BrandServiceUIEventExt, BrandServiceNothingToShowViewDelegate, BrandServiceListLogicControllerDelegate, BrandServiceMgrExt> {
	BrandServiceListLogicController* m_listLogicController;
	BrandServiceSearchLogicController* m_searchLogicController;
	BrandServiceNotifyRemoveView* m_notifyDeleteView;
	BrandServiceNothingToShowView* m_nothingToShowView;
	int pageNum;
	int m_listType;
}
@property(assign, nonatomic) int pageNum;
-(void)onCreateAddBrandContactRightBtn;
-(void)OnDeleteAdviceMsgChange:(id)change;
-(void)OnGridCellClickWithCellInfo:(id)cellInfo;
-(void)onBrandServiceItem:(id)item shouldShowNewBrandTips:(BOOL*)tips;
-(void)OnDataChange;
-(void)dealloc;
-(id)initWithBrandContactListType:(int)brandContactListType;
-(id)init;
-(void)tryUpdateAppList;
-(void)doLoadView;
-(void)viewDidLoad;
-(void)gotoPage:(int)page;
-(void)reloadView;
-(void)AddSomeNewApp;
-(id)getNavigationController;
-(void)initNothingToShowView;
-(void)onClickNotifyDelete;
-(void)initNotifyDeleteView;
-(void)initData;
@end

@interface BrandServiceNothingToShowView : MMUIView {
	MMDelegateProxy<BrandServiceNothingToShowViewDelegate>* m_delegate;
}
-(void)onClickPlus;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)initWithTypeWording:(id)typeWording;
@end

@interface BrandServiceNotifyRemoveView : UIButton {
	UILabel* m_label;
}
@property(retain, nonatomic) UILabel* m_label;
-(void)dealloc;
-(void)layoutSubviews;
-(void)SetAdviceMsg:(id)msg;
-(id)initWithFrame:(CGRect)frame;
@end

@interface BrandServiceAddNewItemView : BrandServiceBaseItemView {
	UIButton* m_addButton;
}
+(CGSize)SizeOfView;
-(void)UpdateWithCellInfo:(id)cellInfo;
-(void)layoutSubviews;
-(void)InitWithCellInfo:(id)cellInfo HeadImageProvider:(id)provider;
@end

@interface BrandServiceBaseItemView : MMGridViewCell {
}
+(CGSize)SizeOfView;
-(void)setHighlighted:(BOOL)highlighted;
-(void)UpdateWithCellInfo:(id)cellInfo;
-(void)InitWithCellInfo:(id)cellInfo HeadImageProvider:(id)provider;
@end

@interface BrandServiceNormalItemView : BrandServiceBaseItemView {
	BrandServiceCellInfo* m_info;
	MMBrandHeadImageView* m_headImage;
	UILabel* m_displayNameLabel;
	MMBadgeView* m_unreadBadge;
	UIImageView* m_NewImage;
}
@property(retain, nonatomic) MMBadgeView* m_unreadBadge;
@property(retain, nonatomic) UILabel* m_displayNameLabel;
@property(retain, nonatomic) MMBrandHeadImageView* m_headImage;
@property(retain, nonatomic) BrandServiceCellInfo* m_info;
-(void)dealloc;
-(void)UpdateWithCellInfo:(id)cellInfo;
-(void)InitWithCellInfo:(id)cellInfo HeadImageProvider:(id)provider;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
-(id)initWithFrame:(CGRect)frame;
@end

@interface BrandServiceStarItemView : BrandServiceBaseItemView {
	BrandServiceCellInfo* m_info;
	MMHeadImageView* m_headImage;
	UILabel* m_displayNameLabel;
	MMBadgeView* m_unreadBadge;
	UIImageView* m_starImage;
	UIImageView* m_NewImage;
	UIImageView* m_headBGImage;
}
@property(retain, nonatomic) MMBadgeView* m_unreadBadge;
@property(retain, nonatomic) UILabel* m_displayNameLabel;
@property(retain, nonatomic) MMHeadImageView* m_headImage;
@property(retain, nonatomic) BrandServiceCellInfo* m_info;
-(void)dealloc;
-(void)UpdateWithCellInfo:(id)cellInfo;
-(void)InitWithCellInfo:(id)cellInfo HeadImageProvider:(id)provider;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
-(id)initWithFrame:(CGRect)frame;
@end

@interface BrandServiceCellInfo : NSObject {
	int type;
	BrandServiceItem* item;
}
@property(retain, nonatomic) BrandServiceItem* item;
@property(assign, nonatomic) int type;
+(id)objectWithType:(int)type;
-(void)UpdateWithCell:(id)cell HeadImageProvider:(id)provider;
-(void)InitWithCell:(id)cell HeadImageProvider:(id)provider;
-(id)cellTypeID;
-(BOOL)cellCanEdit;
-(UIEdgeInsets)cellEdgeInsets;
-(CGSize)cellSize;
-(void)dealloc;
-(id)initWithType:(int)type;
@end

@interface BrandServiceListLogicController : MMObject <BrandServiceMgrExt, MMGridViewDataSource, MMGridViewActionDelegate, MMGridViewSortingDelegate, UIScrollViewDelegate, UIActionSheetDelegate> {
	MMDelegateProxy<BrandServiceListLogicControllerDelegate>* m_delegate;
	MMGridView* m_mainGridView;
	UIPageControl* m_pageControl;
	NSMutableArray* m_tableMainSections;
	NSMutableArray* m_itemList;
	int m_totalItemCount;
	MMGridViewLayoutHorizontalPagedMyAppStrategy* m_layoutStrategy;
	int _lastPageNum;
	NSMutableArray* m_tobeRecoverItems;
	int m_listType;
	BrandServiceHeadImageProvider* m_headImageCache;
}
@property(retain, nonatomic) NSMutableArray* m_itemList;
@property(retain, nonatomic) MMGridView* m_mainGridView;
@property(assign, nonatomic) MMDelegateProxy<BrandServiceListLogicControllerDelegate>* m_delegate;
-(void)reloadSingleItem:(id)item;
-(void)hideGridViews;
-(void)showGridViews;
-(BOOL)shouldShowGridView;
-(BOOL)shouldShowNotifyDelete;
-(void)onBrandServiceDeleteAdviceChanged:(id)changed;
-(BOOL)shouldShowSearchBar;
-(int)TotalItemCount;
-(void)dealloc;
-(BOOL)MMGridView:(id)view shouldAllowShakingBehaviorWhenMovingCell:(id)cell atIndex:(int)index;
-(BOOL)MMGridView:(id)view canEditAtIndex:(int)index;
-(void)MMGridView:(id)view didStartMovingCell:(id)cell AtIndex:(int)index;
-(void)MMGridView:(id)view didEndMovingCell:(id)cell;
-(void)MMGridViewDidTapOnEmptySpace:(id)mmgridView;
-(void)MMGridView:(id)view processDeleteActionForItemAtIndex:(int)index;
-(void)MMGridView:(id)view changedEdit:(BOOL)edit;
-(BOOL)MMGridView:(id)view canDeleteItemAtIndex:(int)index;
-(void)MMGridView:(id)view exchangeItemAtIndex:(int)index withItemAtIndex:(int)index3;
-(void)MMGridView:(id)view moveItemAtIndex:(int)index toIndex:(int)index3;
-(BOOL)MMGridView:(id)view canMoveItemAtIndex:(int)index toIndex:(int)index3;
-(void)recoverCellPosition:(id)position;
-(void)MMGridView:(id)view didTapOnItemAtIndex:(int)index;
-(id)MMGridView:(id)view cellForItemAtIndex:(int)index;
-(CGSize)MMGridView:(id)view sizeForItemsInInterfaceOrientation:(int)interfaceOrientation;
-(int)numberOfItemsInMMGridView:(id)mmgridView;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)MMGridView:(id)view onDeleteAtIndex:(int)index;
-(id)itemForMMGridView:(id)mmgridView AtIndex:(int)index;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)itemListForMMGridView:(id)mmgridView;
-(int)numberOfItems;
-(id)initWithBrandContactListType:(int)brandContactListType;
-(void)reloadData;
-(void)onBrandServiceAppChanged:(id)changed;
-(void)onBrandServiceDataChanged:(BOOL*)changed;
-(id)itemAtIndexPath:(id)indexPath GridView:(id)view;
-(id)tableSectionForGridView:(id)gridView;
-(void)gotoPage:(int)page;
-(void)InitGridView:(id)view LayoutRect:(CGRect*)rect withPageNum:(int)pageNum;
@end

@interface BrandServiceSearchLogicController : MMObject <MMSearchBarDelegate> {
	MMSearchBar* m_searchBar;
}
@property(retain, nonatomic) MMSearchBar* m_searchBar;
-(void)dealloc;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(void)makeCell:(id)cell contact:(id)contact;
-(void)initSearchBar:(id)bar;
@end

@interface BrandServiceBatchRemoveViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, UIActionSheetDelegate> {
	MMTableView* m_tableView;
	NSMutableArray* m_sectionArray;
	MMLoadingView* m_loadingView;
}
@property(retain, nonatomic) MMLoadingView* m_loadingView;
@property(retain, nonatomic) NSMutableArray* m_sectionArray;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onClick:(id)click;
-(void)makeSettingCell:(id)cell AtRow:(int)row;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)OnXXX;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initData;
@end

@interface BrandServiceIntroViewController : MMUIViewController {
	MMDelegateProxy<BrandServiceIntroViewControllerDelegate>* m_deletgate;
}
@property(assign, nonatomic) MMDelegateProxy<BrandServiceIntroViewControllerDelegate>* m_deletgate;
-(void)OnXXX;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)onClick;
-(void)initData;
@end

@interface MMMoviePlayerController : MMUIViewController <IMsgExt, scrollViewDelegate, WindowDelegate, UIActionSheetDelegate, SessionSelectControllerDelegate> {
	NSURL* m_url;
	NSString* m_videoPath;
	unsigned long m_uiVideoTime;
	BOOL m_bIsFullScreen;
	BOOL m_bLoadFinished;
	BOOL m_bIsPlaying;
	BOOL m_bRestart;
	UIView* m_loadingView;
	UIImageView* imageView;
	MMProgressView* m_progressView;
	UILabel* m_percentageLabel;
	MPMoviePlayerController* m_moviePlayer;
	UIButton* m_playBigButton;
	CMessageWrap* m_msgWrap;
	MMScrollView* m_scrollView;
	UILabel* m_timerLabel;
	NSTimer* m_timer;
	MMAnimationTipView* m_tipView;
	UIView* m_maskView;
	CGSize m_size;
	BOOL m_isFromFav;
	FavoritesItem* m_favItem;
	FavForwardLogicController* m_favForwardController;
	int curOrientation;
	float curScreenWith;
	float curScreenHeight;
	BOOL m_bIsStatusBarHidden;
	BOOL m_bSaveMode;
	BOOL m_bDownloadExpired;
	MMDelegateProxy<FavVideoPlayDelegate>* m_delegate;
}
@property(assign, nonatomic) BOOL m_bSaveMode;
@property(retain, nonatomic) FavoritesItem* m_favItem;
@property(assign, nonatomic) BOOL m_isFromFav;
@property(retain, nonatomic) NSTimer* m_timer;
@property(retain, nonatomic) CMessageWrap* m_msgWrap;
@property(retain, nonatomic) MPMoviePlayerController* m_moviePlayer;
@property(copy, nonatomic) NSURL* m_url;
@property(retain, nonatomic) NSString* m_videoPath;
@property(assign, nonatomic) MMDelegateProxy<FavVideoPlayDelegate>* m_delegate;
-(id).cxx_construct;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)handleLongPressEx:(id)ex;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)updateSubViewsRect;
-(void)willAppear;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewDidUnload;
-(void)resetTableViewOffset:(id)offset;
-(void)dealloc;
-(id)initWithMsgWrap:(id)msgWrap VideoPath:(id)path;
-(id)initWithCaptureVideoInfo:(id)captureVideoInfo;
-(id)initWithFavItem:(id)favItem;
-(void)OnMsgDownloadVideoExpiredFail:(id)fail MsgWrap:(id)wrap;
-(void)OnUpdateVideoStatus:(id)status MsgWrap:(id)wrap;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)InternalUpdateVideo:(id)video;
-(void)touchesCancelled_ScrollView:(id)view withEvent:(id)event;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)touchesMoved_ScrollView:(id)view withEvent:(id)event;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)changePlayerStatus;
-(void)autoPlay;
-(void)didAppear;
-(void)viewDidLoad;
-(void)initView;
-(void)initVideoPlayerView;
-(void)updateTimerLabel;
-(void)openPlayer;
-(void)onOperate:(id)operate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)delayHideBar;
-(void)onSave:(id)save;
-(void)onReturn:(id)aReturn;
-(void)initData;
-(void)systemActived:(id)actived;
-(void)systemResigned:(id)resigned;
-(void)hideLoadingView;
-(void)showLoadingView;
-(void)initLoadingView;
-(void)handleDownloadFail;
-(void)updateProgress:(unsigned long)progress;
-(void)startPlayingWithURL:(id)url at:(id)at;
-(void)videoPlayFinished:(id)finished;
-(void)videoPlayStateChanged:(id)changed;
-(void)clearPlaying;
-(void)setFullScreen;
-(void)setStandardScreen;
-(void)stopTimer;
-(void)updateTitle;
-(void)startTimer;
-(void)hideToolBar:(BOOL)bar;
-(CGRect)getFullscreenRect;
-(CGRect)getStandardRect;
-(CGRect)getLabelRect;
-(CGRect)getImageViewRect;
-(CGRect)getImageViewRectFullAndShowBar;
-(CGRect)getMaskViewFrameFullAndHideBar;
-(CGRect)getMaskViewFrameFullAndShowBar;
-(void)resetTimeLabel;
-(void)setTimeLabel:(unsigned long)label;
@end

@interface ThumbDownloadMgr : NSObject <ICdnComMgrExt> {
	NSMutableArray* m_arrQueue;
	CdnTaskInfo* m_oCurTaskInfo;
}
@property(retain, nonatomic) CdnTaskInfo* m_oCurTaskInfo;
-(void)OnCdnDownload:(id)download;
-(void)OnSetCdnDnsInfo;
-(void)DownloadFail:(long)fail;
-(void)StopDownloadThumbByUsrName:(id)name;
-(void)StopDownloadThumb:(id)thumb;
-(void)StopCurDownload;
-(void)StartDownloadThumb:(id)thumb;
-(BOOL)IsDownloadingThumb:(id)thumb;
-(void)CheckQueue;
-(void)dealloc;
-(id)init;
@end

@interface DownloadVideoCDNMgr : NSObject <ICdnComMgrExt> {
	NSMutableArray* _arrDownloadTask;
	CdnTaskInfo* _curTaskInfo;
}
-(void)OnCdnDownload:(id)download;
-(void)OnCdnDownloadProgress:(id)progress;
-(void)OnSetCdnDnsInfo;
-(void)Stop;
-(void)StopDownloadByChatName:(id)name;
-(void)StopDownload:(id)download;
-(void)StopCurDownload;
-(void)StartDownload:(id)download;
-(void)CheckQueue;
-(void)DelTaskInDownloadQueue:(id)downloadQueue;
-(BOOL)IsMsgInDownloadQueue:(id)downloadQueue;
-(void)DownloadFail:(long)fail;
-(void)DownloadOk;
-(void)dealloc;
-(id)init;
@end

@interface UploadVideoCDNMgr : NSObject <ICdnComMgrExt, NotifyFromMainCtrlDelegate> {
	NSMutableArray* _arrUploadTask;
	CdnTaskInfo* _curTaskInfo;
	unsigned long _curUploadEventID;
}
-(void)NotifyFromMainCtrl:(unsigned long)mainCtrl MessageInfo:(id)info Event:(unsigned long)event;
-(void)OnCdnUpload:(id)upload;
-(void)OnCdnUploadProgress:(id)progress;
-(void)OnSetCdnDnsInfo;
-(BOOL)CreateCurUploadEvent;
-(void)Stop;
-(void)StopUploadByChatName:(id)name;
-(void)StopUpload:(id)upload;
-(void)StopCurUpload;
-(void)StartUpload:(id)upload;
-(void)CheckQueue;
-(BOOL)IsCurTaskByID:(unsigned long)anId From:(id)from To:(id)to;
-(void)DelTaskInUploadQueue:(id)uploadQueue;
-(BOOL)IsMsgInUploadQueue:(id)uploadQueue;
-(void)UploadFail:(long)fail;
-(void)UploadOk:(id)ok;
-(void)dealloc;
-(id)init;
@end

@interface FacebookAuthData : NSObject <NSCoding> {
	NSString* accessToken;
	NSDate* expirationDate;
}
@property(retain, nonatomic) NSDate* expirationDate;
@property(retain, nonatomic) NSString* accessToken;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

@interface MMFBTokenCachingStrategy : FBSessionTokenCachingStrategy {
}
-(void)clearToken;
-(id)fetchFBAccessTokenData;
-(void)cacheFBAccessTokenData:(id)data;
-(BOOL)saveData:(id)data;
-(id)loadData;
-(id)getArchivePath;
-(void)saveData;
-(BOOL)isTokenCached;
-(void)dealloc;
-(id)init;
@end

@interface CUploadVideoWrap : NSObject {
	NSString* m_nsClientMsgID;
	NSString* m_nsFromUsrName;
	NSString* m_nsToUsrName;
	unsigned long m_uiLocalID;
	unsigned long m_uiSvrID;
	unsigned long m_uiThumbTotalLen;
	unsigned long m_uiThumbStartPos;
	NSData* m_dtThumb;
	unsigned long m_uiVideoTotalLen;
	unsigned long m_uiVideoStartPos;
	unsigned long m_uiVideoTime;
	NSData* m_dtVideo;
	unsigned long m_uiCameraType;
	unsigned long m_uiNetwork;
	unsigned long m_uiVideoSource;
	unsigned long m_uiEncrypVer;
	NSString* m_nsAesKey;
	NSString* m_nsVideoUrl;
	NSString* m_nsVideoThumbUrl;
	NSString* m_nsThumbAesKey;
	unsigned long m_uiVideoThumbSize;
	unsigned long m_uiVideoThumbWidth;
	unsigned long m_uiVideoThumbHeight;
	NSString* m_nsMsgSource;
}
@property(retain, nonatomic) NSString* m_nsMsgSource;
@property(assign, nonatomic) unsigned long m_uiVideoThumbHeight;
@property(assign, nonatomic) unsigned long m_uiVideoThumbWidth;
@property(assign, nonatomic) unsigned long m_uiVideoThumbSize;
@property(retain, nonatomic) NSString* m_nsThumbAesKey;
@property(retain, nonatomic) NSString* m_nsVideoThumbUrl;
@property(retain, nonatomic) NSString* m_nsVideoUrl;
@property(retain, nonatomic) NSString* m_nsAesKey;
@property(assign, nonatomic) unsigned long m_uiEncrypVer;
@property(assign, nonatomic) unsigned long m_uiVideoSource;
@property(assign, nonatomic) unsigned long m_uiNetwork;
@property(assign, nonatomic) unsigned long m_uiCameraType;
@property(retain, nonatomic) NSData* m_dtVideo;
@property(assign, nonatomic) unsigned long m_uiVideoTime;
@property(assign, nonatomic) unsigned long m_uiVideoStartPos;
@property(assign, nonatomic) unsigned long m_uiVideoTotalLen;
@property(retain, nonatomic) NSData* m_dtThumb;
@property(assign, nonatomic) unsigned long m_uiThumbStartPos;
@property(assign, nonatomic) unsigned long m_uiThumbTotalLen;
@property(assign, nonatomic) unsigned long m_uiSvrID;
@property(assign, nonatomic) unsigned long m_uiLocalID;
@property(retain, nonatomic) NSString* m_nsToUsrName;
@property(retain, nonatomic) NSString* m_nsFromUsrName;
@property(retain, nonatomic) NSString* m_nsClientMsgID;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CUploadVideoInfo : NSObject {
	unsigned long m_uiUploadCount;
	unsigned long m_uiCurOffset;
	unsigned long m_uiCurOffsetCount;
	unsigned long m_uiZeroUploadCount;
	CMessageWrap* m_wrapMsg;
	unsigned long long m_ui64StartTime;
	unsigned long m_uiOpType;
	long m_nRetCode;
}
@property(assign, nonatomic) long m_nRetCode;
@property(assign, nonatomic) unsigned long m_uiOpType;
@property(assign, nonatomic) unsigned long long m_ui64StartTime;
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
@property(assign, nonatomic) unsigned long m_uiZeroUploadCount;
@property(assign, nonatomic) unsigned long m_uiCurOffsetCount;
@property(assign, nonatomic) unsigned long m_uiCurOffset;
@property(assign, nonatomic) unsigned long m_uiUploadCount;
-(id)GetStatInfo;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CDownloadVideoInfo : NSObject {
	CMessageWrap* m_wrapMsg;
	unsigned long long m_ui64StartTime;
	unsigned long m_uiOpType;
	long m_nRetCode;
}
@property(assign, nonatomic) long m_nRetCode;
@property(assign, nonatomic) unsigned long m_uiOpType;
@property(assign, nonatomic) unsigned long long m_ui64StartTime;
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
-(id)GetStatInfo;
-(void)dealloc;
-(id)init;
@end

@interface SystemTipBkgView : UIView {
	UIImageView* m_oBkgImageView;
	UIImageView* m_oArrowImageView;
	UIButton* m_oWarningButton;
}
-(void)layoutSubviews;
-(void)initView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface VideoVoipCallerView : VideoVoipView <UIAlertViewDelegate> {
	UIButton* _voiceBtn;
}
-(void)endCallAfterDelay:(float)delay;
-(void)OnInterrupt:(id)interrupt;
-(void)OnSyncError:(id)error ErrNo:(int)no;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnBeginTalk:(id)talk;
-(void)OnBeHanguped:(id)hanguped;
-(void)OnBeginConnect:(id)connect;
-(void)OnBeRejected:(id)rejected;
-(void)OnTimeOut:(id)anOut;
-(void)OnBeAccepted:(id)accepted;
-(void)OnNoAnswer:(id)answer;
-(void)OnCall:(id)call ErrNo:(int)no;
-(void)showAlertTips;
-(void)switchVoice;
-(void)switchLoudspeaker;
-(void)initFooterView;
-(void)initView;
-(void)cancelCall;
-(void)call;
-(void)startShowView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)checkAndShowAlertView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andContact:(id)contact isEarMode:(BOOL)mode;
-(void)updateStatusLabel;
@end

@interface VideoVoipReceiverView : VideoVoipView <UIAlertViewDelegate, IRecordPermissionCheckExt> {
	BOOL isNeedFormSysMsg;
	UIButton* _acceptBtn;
	UIButton* _hangupBtn;
}
-(void)OnBeHanguped:(id)hanguped;
-(void)OnSyncError:(id)error ErrNo:(int)no;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnTimeOut:(id)anOut;
-(void)OnInterrupt:(id)interrupt;
-(void)OnBeginTalk:(id)talk;
-(void)OnBeginConnect:(id)connect;
-(void)OnAccept:(id)accept ErrNo:(int)no;
-(void)endCallByCancel;
-(void)endCallAfterDelay:(float)delay;
-(void)startShowView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)checkAndShowAlertView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andContact:(id)contact isEarMode:(BOOL)mode;
-(id)init;
-(void)OnRecordDenied;
-(void)OnRecordPermissioned;
-(void)hangup;
-(void)rejectCall;
-(void)realAcceptCall;
-(void)acceptCall;
-(void)updateFooterView;
-(void)asyncStartNetDetect;
-(void)asyncPlaySoundFromBackgroundToForeground;
-(void)asyncPlaySound;
-(void)asyncAcceptVideo;
-(void)markLastVoipInfo;
-(void)initView;
-(void)initFooterView;
-(void)updateStatusLabel;
@end

@interface MacMsgSyncViewController : MMUIViewController {
}
-(void)startSync;
-(void)setupView;
-(void)dealloc;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface VideoVoipTalkingView : UIView <SmallCameraViewDelegate, AVVideoDeviceDelegate, IVOIPModeSwitchExt, IVOIPExt> {
	CContact* _contact;
	int _status;
	UIView* _backgroundView;
	MMTimer* _timer;
	UIImageView* _voiceView;
	VOIPVideoRender* _peerRender;
	VOIPVideoRender* _localRender;
	UIView* _bigCameraView;
	UIView* _peerRenderView;
	UILabel* _voiceTipsLabel;
	UIButton* _hangupBtn;
	UIButton* _loudspeakerBtn;
	UIButton* _voiceBtn;
	UIButton* _tipsView;
	UIButton* _lpTipsView;
	MMTimer* _voiceTimer;
	BOOL _isMyselfInMainView;
	BOOL _isEndCall;
	AVAudioPlayer* _player;
	id<NSObject, VideoVoipTalkingViewDelegate> _delegate;
}
@property(assign, nonatomic) id<NSObject, VideoVoipTalkingViewDelegate> delegate;
-(void)OnSyncError:(id)error ErrNo:(int)no;
-(void)OnError:(id)error ErrNo:(int)no;
-(void)OnInterrupt:(id)interrupt;
-(void)OnBeHanguped:(id)hanguped;
-(void)onHangup;
-(void)onFlipCamera;
-(void)OnRemoteVideoMode;
-(void)OnRemoteEarMode;
-(void)OnLocalVideoMode;
-(void)OnLocalEarMode;
-(void)OnBothVideoMode;
-(void)OnRemoteEarModeFor2G;
-(void)OnLocalEarModeFor2G;
-(void)showLoudspeaker;
-(void)hideLoudspeaker;
-(void)OnLightInterrupt:(BOOL)interrupt;
-(void)OnMonitorWithSendFPS:(int)sendFPS andRecvFPS:(int)fps;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)startAutoHideButtonsTimer;
-(void)cancelAutoHideButtons;
-(void)autoHideButtons;
-(void)clearButtonsAnimation;
-(void)showButtons;
-(void)hideButtons;
-(void)onSmallCameraViewSingleTap;
-(void)videoDeviceCameraBack:(id)back;
-(void)videoDeviceCameraFront:(id)front;
-(void)updateEarModeStatusView:(int)view;
-(void)setVoiceStatusOn;
-(void)switchVoice;
-(void)asyncSwitchToVideo;
-(void)asyncSwitchToVoice;
-(void)switchLoudspeaker;
-(void)hideLoudspeakerTipsView;
-(void)initDebugFPSView;
-(void)initFooterView;
-(void)initTipsView;
-(void)initVoiceView;
-(void)initVoiceTipsLabel;
-(void)initProfileContainerView;
-(void)initTimerView;
-(void)initCarmeraView;
-(void)initFlipCameraBtn;
-(void)initBackgroundView;
-(void)initView;
-(void)stopPlaySound;
-(void)playTipsSound:(id)sound ofType:(id)type;
-(void)asyncPlayTipsSound;
-(void)playSound:(id)sound OfType:(id)type;
-(void)updateInputOutputRender:(BOOL)render;
-(void)updateTipsView;
-(void)updateTipsStatusLabel;
-(void)updateLoudspeakerTipsViewFrame;
-(void)updateTipsViewFrame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andContact:(id)contact;
@end

@interface WCOfflinePayQRCodePayViewController : WCOfflinePayBaseViewController <UIActionSheetDelegate> {
	UIImageView* m_imageQRView;
	UIImageView* cardBkg;
	UIImageView* bkgUp;
	UIImageView* bkgDown;
	MMDelegateProxy<WCOfflinePayQRCodePayViewControllerDelegate>* m_delegate;
}
-(void)setDelegate:(id)delegate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(BOOL)preViewControllerIsKindOf:(Class)of;
-(void)Operate;
-(void)updateQRCode;
-(void)willAppear;
-(void)adjustSubviewRects;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
-(void)initView;
@end

@interface VideoVoipView : MMUIWindow <IVOIPModeSwitchExt, IVOIPExt, AVVideoDeviceDelegate, SmallCameraViewDelegate, VideoVoipTalkingViewDelegate> {
	UIAlertView* _alertView;
	int _status;
	CContact* _contact;
	BOOL _isEndCall;
	UIView* _containerView;
	UIImageView* _backgroundView;
	UIButton* _tipsView;
	CMessageWrap* _msgWrap;
	BOOL _isConnectOK;
	AVAudioPlayer* _player;
	BOOL _isAcceptVoice;
	BOOL _canUpdateStatusMachine;
}
@property(retain, nonatomic) CMessageWrap* msgWrap;
@property(retain, nonatomic) CContact* contact;
-(void)TalkingViewEndCall;
-(void)endCallAfterDelay:(float)delay;
-(void)updateNetTypeStatus;
-(void)OnRemoteEarModeFor2G;
-(void)OnLocalEarModeFor2G;
-(void)switchToTalkingView;
-(void)onConfirm;
-(void)stopPlaySound;
-(void)playEndingSound;
-(void)playSound:(id)sound OfType:(id)type numberOfLoops:(int)loops;
-(void)disAppearWithAnimation;
-(void)appearWithAnimation;
-(void)stopDisAppearWithAnimation;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andContact:(id)contact isEarMode:(BOOL)mode;
-(void)initView;
-(void)initTipsView;
-(void)initProfileContainerView;
-(void)initBackgroundView;
-(void)updateStatusLabel;
-(void)formVOIPSysMsgView;
@end

@interface OpenDownloadCDNMgr : NSObject <ICdnComMgrExt> {
	NSMutableArray* _arrFileInfo;
	CdnTaskInfo* _curTaskInfo;
}
-(void)OnCdnDownload:(id)download;
-(void)OnCdnDownloadProgress:(id)progress;
-(void)OnSetCdnDnsInfo;
-(void)StopDownloadByUsr:(id)usr;
-(void)StopDownload:(id)download MsgWrap:(id)wrap;
-(void)StopCurDownload;
-(void)StartDownload:(id)download MsgWrap:(id)wrap;
-(void)DownloadFail:(long)fail;
-(void)DownloadOk;
-(void)CheckQueue;
-(void)Pop;
-(id)GetTop;
-(void)DelTaskInDownloadQueue:(id)downloadQueue;
-(BOOL)InDownloading:(id)downloading MsgWrap:(id)wrap;
-(void)dealloc;
-(id)init;
@end

@interface OpenUploadCDNMgr : NSObject <ICdnComMgrExt, PBMessageObserverDelegate> {
	FIFOFileQueue* _fileInfoQueue;
	unsigned long _curEventId;
	CdnTaskInfo* _curTaskInfo;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnCdnUpload:(id)upload;
-(void)OnCdnUploadProgress:(id)progress;
-(void)OnSetCdnDnsInfo;
-(BOOL)CreateCurUploadEvent;
-(void)StopUploadByChatName:(id)name;
-(void)StopUpload:(id)upload;
-(void)StopCurUpload;
-(void)StartUpload:(id)upload MsgWrap:(id)wrap Scene:(unsigned long)scene;
-(void)ClearEventID;
-(void)UploadFail:(long)fail;
-(void)UploadOk:(unsigned long)ok;
-(void)CheckQueue;
-(void)InitQueue;
-(void)dealloc;
-(id)init;
@end

@interface MoreViewController : MMTabBarBaseViewController <MessageObserverDelegate, IHeadImageExt, CSettingExt, WCPayLogicMgrExt, EmoticonRecommendMgrExt, MMKernelExt, WCMallLogicMgrExt> {
	vector<unsigned long, std::allocator<unsigned long> > m_vecMesssageIdToListen;
	MMTableViewInfo* m_tableViewInfo;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)OnWCMallShowStatusInMoreViewChanged;
-(void)OnWCMallActivityChanged;
-(void)OnEmoticonRecommendNewStateChanged:(BOOL)changed;
-(void)OnStatusChangedOrderListCountChanged:(unsigned long)changed;
-(void)onSettingChanged:(int)changed;
-(void)onHeadImageChange:(id)change;
-(void)updateHead:(id)head;
-(id)getSettingHeadImage;
-(void)pluginsChanged:(id)changed;
-(void)onGetUpdateInfoOk;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)didReceiveMemoryWarning;
-(void)updateViewWhenSelectTab:(BOOL)tab;
-(void)updateTabBarBadge;
-(int)getTotalCount;
-(void)checkReload;
-(void)showAboutMMView;
-(BOOL)isNeedShowWCPayInTabNew;
-(BOOL)isNeedShowOfflinePay;
-(BOOL)isNeedShowWCPay;
-(void)showChangeLanguage;
-(void)showSettingView;
-(void)showEmoticonStoreView;
-(void)showOfflinePayView;
-(void)showWCPayView;
-(void)showFavoriteView;
-(void)showMyWCView;
-(void)showProfileView;
-(void)makeWCPayView:(id)view;
-(void)makeWCCell:(id)cell;
-(void)makeProfileCell:(id)cell;
-(void)addSettingSection;
-(void)addStoreSection;
-(void)addFunctionSection;
-(void)addOfflineSection;
-(void)addProfileSection;
-(void)viewDidAppear:(BOOL)view;
-(void)reloadMoreView;
-(void)willAppear;
-(void)initView;
-(void)viewDidLoad;
-(void)initMessageIdToListen;
-(id)init;
-(void)dealloc;
@end

@interface WCInputTextCacheMgr : NSObject {
	NSMutableArray* _arrCacheText;
}
-(void)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(id)getCacheText:(id)text refCommentItem:(id)item;
-(void)cacheText:(id)text refDataItem:(id)item refCommentItem:(id)item3;
-(void)uncacheText:(id)text refCommentItem:(id)item;
-(id)cacheTextKey:(id)key refCommentItem:(id)item;
-(void)dealloc;
-(void)saveCacheText;
-(id)init;
@end

@interface FavLocationItem : NSObject {
	double _lng;
	double _lat;
	int _scale;
	NSString* _label;
	NSString* _poiname;
}
@property(retain, nonatomic) NSString* poiname;
@property(retain, nonatomic) NSString* label;
@property(assign, nonatomic) int scale;
@property(assign, nonatomic) double lat;
@property(assign, nonatomic) double lng;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
@end

@interface FavURLItem : NSObject {
	NSString* _title;
	NSString* _description;
	NSString* _cleanUrl;
	NSString* _thumbUrl;
	int _openCache;
}
@property(assign, nonatomic) int openCache;
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* cleanUrl;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
@end

@interface FavProductItem : NSObject {
	NSString* _title;
	NSString* _description;
	NSString* _thumbUrl;
	NSString* _info;
}
@property(retain, nonatomic) NSString* info;
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
@end

@interface FavoritesItemDataField : NSObject {
	int _dataType;
	NSString* _dataFmt;
	NSString* _sourceDataID;
	NSString* _localDataID;
	NSString* _dataTitle;
	NSString* _dataDescription;
	NSString* _cdnThumbUrl;
	NSString* _cdnThumbKey;
	NSString* _cdnDataUrl;
	NSString* _cdnDataKey;
	int _cdnEncryVer;
	float _thumbWidth;
	float _thumbHeight;
	unsigned long _dataSize;
	unsigned long _thumbSize;
	unsigned long _duration;
	NSString* _streamWebUrl;
	NSString* _streamDataUrl;
	NSString* _streamLowbandUrl;
	NSString* _ext;
	NSString* _streamId;
	int _dataStatus;
	NSString* _thumbMd5;
	NSString* _thumbHead256Md5;
	NSString* _dataMd5;
	NSString* _dataHead256Md5;
	NSString* _sourceThumbPath;
	NSString* _sourceDataPath;
}
@property(retain, nonatomic) NSString* sourceDataPath;
@property(retain, nonatomic) NSString* sourceThumbPath;
@property(retain, nonatomic) NSString* dataHead256Md5;
@property(retain, nonatomic) NSString* dataMd5;
@property(retain, nonatomic) NSString* thumbHead256Md5;
@property(retain, nonatomic) NSString* thumbMd5;
@property(assign, nonatomic) int dataStatus;
@property(retain, nonatomic) NSString* streamId;
@property(retain, nonatomic) NSString* ext;
@property(retain, nonatomic) NSString* streamLowbandUrl;
@property(retain, nonatomic) NSString* streamDataUrl;
@property(retain, nonatomic) NSString* streamWebUrl;
@property(assign, nonatomic) unsigned long duration;
@property(assign, nonatomic) unsigned long thumbSize;
@property(assign, nonatomic) unsigned long dataSize;
@property(assign, nonatomic) float thumbHeight;
@property(assign, nonatomic) float thumbWidth;
@property(assign, nonatomic) int cdnEncryVer;
@property(retain, nonatomic) NSString* cdnDataKey;
@property(retain, nonatomic) NSString* cdnDataUrl;
@property(retain, nonatomic) NSString* cdnThumbKey;
@property(retain, nonatomic) NSString* cdnThumbUrl;
@property(retain, nonatomic) NSString* dataDescription;
@property(retain, nonatomic) NSString* dataTitle;
@property(retain, nonatomic) NSString* localDataID;
@property(retain, nonatomic) NSString* sourceDataID;
@property(retain, nonatomic) NSString* dataFmt;
@property(assign, nonatomic) int dataType;
+(id)GetPathByMd5:(id)a5 isThumb:(BOOL)thumb DataFmt:(id)fmt;
-(void)dealloc;
-(id)GenFavItemDataClientIDByCreateTime:(int)time Index:(int)index;
-(void)ThumbToCheckCdnItem:(id)checkCdnItem;
-(void)DataToCheckCdnItem:(id)checkCdnItem;
-(id)Get3rdAppFileDataTempPath;
-(id)Get3rdAppThumbDataTempPath;
-(id)GetDataPath;
-(id)GetThumbPath;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
@end

@interface FavoritesItem : NSObject <NSCoding> {
	unsigned long _favId;
	int _type;
	int _status;
	unsigned long _updateSeq;
	unsigned long _localUpdateSeq;
	unsigned long _updateTime;
	int _sourceType;
	unsigned long _editTime;
	NSString* _title;
	NSString* _description;
	NSString* _link;
	unsigned long _ctrlFlag;
	NSString* _sourceId;
	NSString* _fromUsr;
	NSString* _toUsr;
	NSString* _realChatName;
	unsigned long _msgId;
	NSString* _eventId;
	NSString* _appId;
	unsigned long _srcCreateTime;
	NSString* _brandId;
	NSMutableArray* _dataList;
	FavLocationItem* _locItem;
	FavURLItem* _urlItem;
	FavProductItem* _productItem;
	NSString* _remark;
	unsigned long _remarkTime;
	int _localStatus;
	unsigned long _localId;
	int _countMd5Status;
	int _retryTimes;
	NSDate* _startUploadTime;
	float _cellHeight;
}
@property(assign, nonatomic) float cellHeight;
@property(retain, nonatomic) NSDate* startUploadTime;
@property(assign, nonatomic) int retryTimes;
@property(assign, nonatomic) int countMd5Status;
@property(assign, nonatomic) unsigned long localId;
@property(assign, nonatomic) int localStatus;
@property(assign, nonatomic) unsigned long remarkTime;
@property(retain, nonatomic) NSString* remark;
@property(retain, nonatomic) FavProductItem* productItem;
@property(retain, nonatomic) FavURLItem* urlItem;
@property(retain, nonatomic) FavLocationItem* locItem;
@property(retain, nonatomic) NSArray* dataList;
@property(retain, nonatomic) NSString* brandId;
@property(assign, nonatomic) unsigned long srcCreateTime;
@property(retain, nonatomic) NSString* appId;
@property(retain, nonatomic) NSString* eventId;
@property(assign, nonatomic) unsigned long msgId;
@property(retain, nonatomic) NSString* realChatName;
@property(retain, nonatomic) NSString* toUsr;
@property(retain, nonatomic) NSString* fromUsr;
@property(retain, nonatomic) NSString* sourceId;
@property(assign, nonatomic) unsigned long ctrlFlag;
@property(retain, nonatomic) NSString* link;
@property(retain, nonatomic) NSString* description;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) unsigned long editTime;
@property(assign, nonatomic) int sourceType;
@property(assign, nonatomic) unsigned long updateTime;
@property(assign, nonatomic) unsigned long localUpdateSeq;
@property(assign, nonatomic) unsigned long updateSeq;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) unsigned long favId;
+(id)FavritesItemToXML:(id)xml;
+(BOOL)ParseItemXML:(id)xml ToItem:(id)item;
-(unsigned long)itemTotalSize;
-(BOOL)canAutoDownload;
-(BOOL)canAutoUpload;
-(void)changeToFavSearchItem:(id)favSearchItem;
-(id)changeToFavSearchString;
-(BOOL)dataHasBeenCopyedToTarget;
-(void)addData:(id)data Index:(int)index;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)initWithAddFavItem:(id)addFavItem;
-(id)init;
@end

@interface FavoritesCDNInfo : NSObject {
	unsigned long _localItemId;
	NSString* _localDataID;
	NSString* _cdnUrl;
	NSString* _cdnKey;
	unsigned long _size;
	int _status;
	int _isThumb;
	NSString* _md5;
	NSString* _head256Md5;
	NSString* _streamId;
	int _dataType;
	NSString* _dataFmt;
}
@property(retain, nonatomic) NSString* dataFmt;
@property(assign, nonatomic) int dataType;
@property(retain, nonatomic) NSString* streamId;
@property(retain, nonatomic) NSString* head256Md5;
@property(retain, nonatomic) NSString* md5;
@property(assign, nonatomic) int isThumb;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) unsigned long size;
@property(retain, nonatomic) NSString* cdnKey;
@property(retain, nonatomic) NSString* cdnUrl;
@property(retain, nonatomic) NSString* localDataID;
@property(assign, nonatomic) unsigned long localItemId;
-(void)dealloc;
-(id)init;
@end

@interface FavoritesDownloadCDNInfo : NSObject {
	unsigned long _localItemId;
	NSString* _localDataID;
	NSString* _cdnUrl;
	NSString* _cdnKey;
	unsigned long _size;
	int _status;
	int _isThumb;
	NSString* _md5;
	NSString* _head256Md5;
	int _dataType;
	NSString* _dataFmt;
}
@property(retain, nonatomic) NSString* dataFmt;
@property(assign, nonatomic) int dataType;
@property(retain, nonatomic) NSString* head256Md5;
@property(retain, nonatomic) NSString* md5;
@property(assign, nonatomic) int isThumb;
@property(assign, nonatomic) int status;
@property(assign, nonatomic) unsigned long size;
@property(retain, nonatomic) NSString* cdnKey;
@property(retain, nonatomic) NSString* cdnUrl;
@property(retain, nonatomic) NSString* localDataID;
@property(assign, nonatomic) unsigned long localItemId;
-(void)dealloc;
-(id)init;
@end

@interface FavSessionInfo : NSObject {
	NSString* _usrname;
	unsigned long _lastUpdateTime;
	unsigned long _msgCount;
}
@property(assign, nonatomic) unsigned long msgCount;
@property(assign, nonatomic) unsigned long lastUpdateTime;
@property(retain, nonatomic) NSString* usrname;
-(void)dealloc;
-(id)init;
@end

@interface FavSearchItem : NSObject {
	unsigned long _localId;
	int _type;
	NSString* _searchStr;
}
@property(retain, nonatomic) NSString* searchStr;
@property(assign, nonatomic) int type;
@property(assign, nonatomic) unsigned long localId;
-(void)dealloc;
-(id)init;
@end

@interface FavoritesMgr : MMService <MMService, PBMessageObserverDelegate, FavoritesUploadMgrDelegate, FavoritesDownloadMgrDelegate, FavoritesBatchGetMgrDelegate, FavoritesSearchMgrDelegate, FavoritesSyncMgrDelegate, FavoritesAsyncUploadMgrDelegate, FavoritesBatchDelMgrDelegate> {
	FavoritesItemDB* _favItemDB;
	MyFavoritesDB* _favDB;
	FavoritesUploadMgr* _favUploadMgr;
	FavoritesDownloadMgr* _favDownloadMgr;
	FavoritesSearchMgr* _favSearchMgr;
	FavoritesSyncMgr* _favSyncMgr;
	FavoritesAsyncUploadMgr* _favAsyncUploadMgr;
	FavoritesBatchDelMgr* _batchDelMgr;
	FavoritesBatchGetMgr* _batchGetMgr;
	BOOL _isCheckingItem;
	NSMutableArray* _removingItemsArray;
	FavoritesSetting* _setting;
	dispatch_semaphore_s* _semaphore;
}
@property(retain, nonatomic) FavoritesSetting* setting;
-(dispatch_semaphore_s*)getSemaphore;
-(void)onBatchDelItemSuccess;
-(void)OnNeedUpdateFavInfo;
-(void)OnSyncResult:(int)result;
-(void)OnSearch:(id)search;
-(void)onBatchGetItemList:(id)list ErrCode:(int)code;
-(void)onDownloadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onDownloadFavoritesItemFinished:(id)finished ErrCode:(int)code;
-(void)BroadcastDownloadFavoritesItemResult:(id)result ErrCode:(int)code;
-(void)onUploadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onUploadFavoritesItemFinished:(id)finished ErrCode:(int)code;
-(void)onUsedCapacityUpdate:(unsigned long long)update;
-(void)onAsyncUploadFavoritesItemFinished:(id)finished ErrCode:(int)code;
-(void)BroadcastAddFavoritesItemResult:(id)result ErrCode:(int)code;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleGetFavInfoResp:(id)resp Event:(unsigned long)event;
-(void)HandleModifyFavItemResp:(id)resp Event:(unsigned long)event;
-(void)handleModifyFavItemDescriptionOk:(id)ok;
-(id)getDownloadPausedItemList;
-(id)getUploadPausedItemList;
-(id)getDownloadingItemList;
-(id)getUploadFailedItemList;
-(id)getUploadingItemList;
-(void)restartAllUploadFailedItems;
-(BOOL)isAutoUploadOrDownload;
-(BOOL)pauseDownloadFavoritesItem:(unsigned long)item;
-(BOOL)pauseUploadFavoritesItem:(unsigned long)item;
-(BOOL)startDownloadFavoritesItem:(id)item ISPriority:(BOOL)priority;
-(BOOL)startUploadFavoritesItem:(id)item IsPriority:(BOOL)priority;
-(void)updateCapacityInfo;
-(void)checkBatchDelQueue;
-(BOOL)updateItem:(id)item Description:(id)description Time:(unsigned long)time;
-(BOOL)updateItem:(id)item Remark:(id)remark Time:(unsigned long)time;
-(void)updateItemUpdateTime:(id)time;
-(void)search:(id)search byType:(int)type;
-(BOOL)delAllFavoritesItems;
-(BOOL)batchDelFavoritesItem:(id)item;
-(void)removeItemFile:(id)file;
-(BOOL)delFavoritesItem:(id)item;
-(BOOL)addFavoritesItem:(id)item;
-(void)getNextPageFavoritesList:(int)list byCurMinUpdateTime:(unsigned long)time;
-(void)getFirstPageFavoritesList:(int)list;
-(void)SyncByNotify:(unsigned)notify;
-(void)clearSyncKey;
-(void)dealloc;
-(void)saveSetting;
-(void)loadFavoritesSetting;
-(void)initDB:(id)db;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(id)init;
@end

@interface iConsole : UIViewController <UITextFieldDelegate, UIActionSheetDelegate> {
	BOOL animating;
	BOOL hidden;
	id<iConsoleDelegate> delegate;
	UITextView* consoleView;
	UITextField* inputField;
	UIButton* infoButton;
	NSMutableArray* log;
	int logFilter;
}
@property(assign) int logFilter;
@property(assign, nonatomic) BOOL hidden;
@property(assign, nonatomic) BOOL animating;
@property(retain, nonatomic) NSMutableArray* log;
@property(retain, nonatomic) UIButton* infoButton;
@property(retain, nonatomic) UITextField* inputField;
@property(retain, nonatomic) UITextView* consoleView;
@property(assign, nonatomic) id<iConsoleDelegate> delegate;
+(BOOL)shouldEnableDebugLog;
+(void)grep:(id)grep;
+(void)hide;
+(void)show;
+(void)flush;
+(void)clear;
+(void)debugWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt;
+(void)infoWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt;
+(void)warnWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt;
+(void)errorWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt;
+(void)outputDebugWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt arguments:(void*)arguments;
+(void)outputInfoWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt arguments:(void*)arguments;
+(void)outputWarnWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt arguments:(void*)arguments;
+(void)outputErrorWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt arguments:(void*)arguments;
+(void)crash:(id)crash;
+(void)purelog:(id)purelog;
+(void)command:(id)command;
+(void)logToFile:(unsigned long)file module:(const char*)module file:(const char*)file3 line:(int)line func:(const char*)func fmt:(id)fmt arguments:(void*)arguments;
+(void)logToConsoleWithColor:(unsigned long)color module:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt arguments:(void*)arguments;
+(void)logToConsole:(unsigned long)console module:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt arguments:(void*)arguments;
+(void)printLog:(unsigned long)log module:(const char*)module file:(const char*)file line:(int)line func:(const char*)func log:(id)log6;
+(void)purelog:(id)purelog arguments:(void*)arguments isCommand:(bool)command;
+(void)doNSLog:(id)log;
+(id)sharedConsole;
+(void)initialize;
-(void)logOnMainThread:(id)thread;
-(void)dealloc;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)resizeView:(id)view;
-(void)rotateView:(id)view;
-(void)consoleHidden;
-(void)hideConsole;
-(void)consoleShown;
-(void)showConsole;
-(CGRect)offscreenFrame;
-(CGRect)onscreenFrame;
-(CGAffineTransform)viewTransform;
-(void)logFilterAction;
-(void)infoAction;
-(BOOL)findAndResignFirstResponder:(id)responder;
-(void)resetLog;
-(void)saveLogLevel;
-(void)savePreferences;
-(void)setConsoleTextByKeyword:(id)keyword;
-(void)setConsoleText;
@end

@interface MMImageAlbumCell : UITableViewCell {
	UIImageView* _headImageView;
	UILabel* _nameLabel;
	UILabel* _numberLabel;
}
@property(retain, nonatomic) UILabel* numberLabel;
@property(retain, nonatomic) UILabel* nameLabel;
@property(retain, nonatomic) UIImageView* headImageView;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface ClickStreamMgr : MMService <MMService> {
	timeval m_tvStart;
	NSString* m_nsLastPageID;
	NSString* m_nsInterruptPageID;
	NSMutableString* m_nsReport;
	NSSet* m_setIgnorePageIDs;
}
-(id).cxx_construct;
-(void)clearClickStreamReport;
-(id)getClickStreamReport;
-(void)onServiceEnterForeground;
-(void)onServiceEnterBackground;
-(void)recordPage:(id)page withTime:(long)time;
-(id)genRedunDantReport;
-(void)inActivePage:(id)activePage;
-(void)activePage:(id)page;
-(void)dealloc;
-(void)onServiceInit;
@end

@interface NewSettingViewController : MMUIViewController <UIActionSheetDelegate, SetPassowrdViewControllerDelegate, PasswordLogicDelegate, PBMessageObserverDelegate> {
	MMTableViewInfo* m_tableViewInfo;
	PasswordLogic* m_checkPasswdLogic;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)tryQuit;
-(void)checkHaveNotSetPassword;
-(void)checkHaveSetPassword;
-(void)setPasswordOK;
-(void)unknownFail;
-(void)finalQuit;
-(void)quitInternal;
-(void)showQuitActionSheet;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)initFooterView;
-(void)viewDidLoad;
-(void)willAppear;
-(void)reloadTableData;
-(void)showAboutMMView;
-(void)showEmotionShopView;
-(void)showAuthAppListView;
-(void)showGeneralView;
-(void)showPrivateConfigView;
-(void)showNotificationView;
-(id)init;
-(void)dealloc;
@end

@interface MMImagePickerManagerOptionObj : MMObject {
	BOOL _isCamera;
	BOOL _canSendOriginalImage;
	BOOL _canSendVideoMessage;
	BOOL _canSendMultiImage;
	BOOL _needThumbImage;
	BOOL _isShowForMessage;
	int _previewType;
	int _maxImageCount;
	int _compressType;
	NSArray* _selectedImageURLs;
	int _finishWordMode;
	id _delegateObj;
}
@property(assign, nonatomic) id delegateObj;
@property(assign, nonatomic) BOOL isShowForMessage;
@property(assign, nonatomic) int finishWordMode;
@property(assign, nonatomic) int compressType;
@property(retain, nonatomic) NSArray* selectedImageURLs;
@property(assign, nonatomic) int maxImageCount;
@property(assign, nonatomic) BOOL needThumbImage;
@property(assign, nonatomic) BOOL canSendMultiImage;
@property(assign, nonatomic) BOOL canSendOriginalImage;
@property(assign, nonatomic) int previewType;
@property(assign, nonatomic) BOOL canSendVideoMessage;
@property(assign, nonatomic) BOOL isCamera;
-(void)dealloc;
-(id)init;
@end

@interface MMImagePickerManager : MMObject <MultiImagePickerControllerDelegate, MMImagePickerControllerDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, ImageBrowseDelegate> {
	MMDelegateProxy<MMImagePickerManagerDelegate>* m_delegate;
	MMImagePickerManagerOptionObj* _optionObj;
	NSMutableArray* _tempImagePool;
}
@property(retain, nonatomic) NSMutableArray* tempImagePool;
@property(retain, nonatomic) MMImagePickerManagerOptionObj* optionObj;
@property(assign, nonatomic) MMDelegateProxy<MMImagePickerManagerDelegate>* m_delegate;
+(BOOL)isCaptureByImagePicker:(id)picker;
+(BOOL)isOldVersion;
+(id)getImagePickerControllerWithOptionObj:(id)optionObj;
+(id)getImagePickerFromCameraWithOptionObj:(id)optionObj withManager:(id)manager;
+(id)getImagePickerFromPhotoLibraryWithOptionObj:(id)optionObj withManager:(id)manager;
+(void)showWithOptionObj:(id)optionObj inViewController:(id)viewController;
-(void)OnShowDidFinished;
-(void)OnShowWillFinished;
-(void)dealloc;
-(id)init;
-(void)didSelectImage:(id)image Data:(id)data Finish:(BOOL)finish fromImagePicker:(id)imagePicker;
-(void)didSelectImage:(id)image Data:(id)data fromImagePicker:(id)imagePicker;
-(void)didSelectImage:(id)image fromImagePicker:(id)imagePicker;
-(void)sendImages:(id)images originalInfos:(id)infos newInfos:(id)infos3;
-(void)imagePickerController:(id)controller didFinishPickingImages:(id)images;
-(void)MMVideoPickerControllerDidCancel:(id)mmvideoPickerController;
-(void)MMVideoPickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)MMImagePickerControllerDidCancel:(id)mmimagePickerController;
-(void)MMImagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@interface IntroView : MMUIView {
	NSString* _title;
	NSString* _content;
	UIImageView* _backgroundView;
	MMDelegateProxy<WCIntroViewDelegate>* _mydelegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCIntroViewDelegate>* _mydelegate;
@property(retain, nonatomic) NSString* _content;
@property(retain, nonatomic) NSString* _title;
-(void)hideCloseBtn;
-(void)onCloseIntroView;
-(void)onTipsBtnPressed:(id)pressed;
-(void)onIKnowItBtnClick:(id)click;
-(void)dealloc;
-(void)showAnimation;
-(void)initViewWithoutTitle;
-(void)initView;
-(id)initWithFrame:(CGRect)frame andTittle:(id)tittle andContent:(id)content;
@end

@interface MMImageGridView : UIView {
	CGRect m_startRect;
	float m_stepX;
	float m_stepY;
	int m_columnCount;
	NSMutableArray* m_arrOfViews;
}
@property(retain, nonatomic) NSMutableArray* m_arrOfViews;
@property(assign, nonatomic) int m_columnCount;
@property(assign, nonatomic) float m_stepY;
@property(assign, nonatomic) float m_stepX;
@property(assign, nonatomic) CGRect m_startRect;
+(float)getLayoutHeightForViews:(int)views columms:(int)columms unitHeight:(float)height;
-(id).cxx_construct;
-(CGSize)getLayoutSizeEx:(BOOL)ex;
-(CGSize)getLayoutSize;
-(void)layoutSubviews;
-(void)dealloc;
-(id)init;
@end

@interface PageScrollView : MMScrollView <WCImageScrollViewDelegate> {
	NSMutableSet* _recycledPages;
	NSMutableSet* _visiblePages;
	BOOL _reloading;
	BOOL _supportOrientation;
	id<PageScrollViewDataSource> _pageDataSource;
	id<PageScrollViewDelegate> _pageDelegate;
}
@property(assign, nonatomic) id<PageScrollViewDelegate> pageDelegate;
@property(assign, nonatomic) id<PageScrollViewDataSource> pageDataSource;
@property(retain, nonatomic) NSMutableSet* visiblePages;
@property(retain, nonatomic) NSMutableSet* recycledPages;
@property(assign, nonatomic) BOOL supportOrientation;
-(void)updatePageAtIndex:(unsigned)index;
-(void)removeVisiblePageAtIndex:(unsigned)index;
-(void)foreceReloadData;
-(void)reloadData;
-(void)onDoubleTapWCImageScrollView;
-(void)onSingleTapWCImageScrollView;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
-(id)dequeueRecycledPage;
-(BOOL)isDisplayingPageForItem:(unsigned)item;
-(CGRect)frameForPageAtItem:(unsigned)item;
-(id)getViewForItem:(unsigned)item;
-(unsigned)getItemsCount;
-(unsigned)getCurrentIndex;
@end

@interface WCContactItemDeleteView : MMUIView {
	UILabel* _displayNameLabel;
	UIView* _headImageView;
	UIButton* _deleteButton;
	CContact* _contact;
	MMDelegateProxy<WCContactItemDeleteViewDelegate>* _deleteViewDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCContactItemDeleteViewDelegate>* deleteViewDelegate;
@property(retain, nonatomic) CContact* contact;
-(id)initWithContact:(id)contact;
-(void)dealloc;
-(void)onClickDeleteButton;
-(void)onClickHeadImage;
-(void)initDisplayName;
-(void)initHeadImage;
-(void)initDeleteButton;
@end

@interface WCHeaderGridView : UIView {
	NSMutableArray* m_arrContacts;
	float imageHeight;
	float rowSpace;
	float sectionSpace;
	unsigned long countPerLine;
	unsigned long likeCount;
	UILabel* m_titleLabel;
	UIImageView* m_iconImageView;
	RichTextView* m_richText;
	NSMutableArray* m_arrHeaderViews;
	NSMutableArray* m_arrHeaderMatteViews;
	UINavigationController* navigationController;
}
@property(assign, nonatomic) UINavigationController* navigationController;
@property(readonly, assign, nonatomic) UIImageView* m_iconImageView;
@property(readonly, assign, nonatomic) UILabel* m_titleLabel;
@property(assign, nonatomic) unsigned long countPerLine;
@property(assign, nonatomic) float sectionSpace;
@property(assign, nonatomic) float rowSpace;
@property(assign, nonatomic) float imageHeight;
-(void)updateView;
-(void)initView;
-(id)getTextContent;
-(void)onClickHeadImageView:(id)view;
-(void)showWCOfUser:(id)user;
-(void)dealloc;
-(id)initWithUserInfos:(id)userInfos likeCount:(unsigned long)count;
@end

@interface WCImageFullScreanViewMgr : MMService <MMService> {
	WCImageFullScreenView* m_view;
}
-(void)animationShowWithMediaDataArray:(id)mediaDataArray originView:(id)view index:(unsigned long)index;
-(void)animationShowWithHint:(id)hint;
-(void)dealloc;
-(id)getWCImageFullScreenView;
@end

@interface WCImageFullScreenView : MMWindow <UIScrollViewDelegate, scrollViewDelegate, WCImageFullScreenViewContainerDelegate, IVOIPUILogicMgrExt, SessionSelectControllerDelegate, MMExposeViewControllerDelegate> {
	UIView* m_fakeScreenView;
	CGRect m_originImageRectInScreen;
	BOOL m_isAnimating;
	MMScrollView* m_scrollView;
	UIPageControl* m_pageCtrl;
	UIView* m_blackMask;
	NSArray* m_arrMediaDataWrap;
	NSArray* m_arrMediaData;
	NSMutableArray* m_arrImage;
	unsigned long m_iCurIndex;
	BOOL m_hasScroll;
	int m_lastDeviceOrientation;
}
@property(assign, nonatomic) unsigned long m_iCurIndex;
-(id).cxx_construct;
-(void)onVideoVoipViewDidAppear:(id)onVideoVoipView;
-(void)didDeviceRotate;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)onExposeWithDataItem:(id)dataItem;
-(void)onLongPressedWithMediaItem:(id)mediaItem;
-(void)captureScreen;
-(void)animationHideWithRotate;
-(void)onContainerAnimationHideStart;
-(void)onContainerAnimationShowStop;
-(void)onContainerAnimationShowStart;
-(void)onContainerAnimationHideStop;
-(void)animationHideStop;
-(BOOL)shouldHideContainerOnRotate;
-(BOOL)isContainerVisible:(id)visible;
-(void)onExposeComplete;
-(void)onExposeCancel;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(id)getVisibleViewController;
-(void)rotateToDeviceOrientation:(BOOL)deviceOrientation;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)downloadImage;
-(void)animationShowWithMediaDataArray:(id)mediaDataArray originView:(id)view index:(unsigned long)index;
-(void)animationShowWithHint:(id)hint;
-(void)animationShowWithMediaDataArray:(id)mediaDataArray mediaDataWrapArray:(id)array originView:(id)view index:(unsigned long)index;
-(void)resetScrollView;
-(void)clearStatus;
-(void)dealloc;
-(id)init;
@end

@interface UIImageViewEx : UIImageView {
}
-(void)setFrame:(CGRect)frame;
@end

@interface WCImageFullScreenViewContainer : MMUIScrollView <UIScrollViewDelegate, MMImageScrollViewHelperDelegate, WCFacadeExt, UIActionSheetDelegate> {
	WCMediaItem* m_mediaData;
	WCMediaItemWrap* m_mediaDataWrap;
	CGRect m_originImageRectInScreen;
	CGSize m_initalContentSize;
	UIImage* m_image;
	BOOL m_isAnimating;
	BOOL m_isShowing;
	BOOL m_bIsLongPressHandled;
	BOOL m_isImageReady;
	int m_lastDeviceOrientation;
	UIImageView* m_container;
	MMLoadingView* m_loadingView;
	MMProgressViewEx* m_processView;
	MMImageScrollViewHelper* m_scrollViewHelper;
	UIActionSheet* m_actionSheet;
	MMDelegateProxy<WCImageFullScreenViewContainerDelegate>* m_delegate;
}
@property(copy, nonatomic) NSArray* gestureRecognizers;
@property(assign, nonatomic) float maximumZoomScale;
@property(assign, nonatomic) float minimumZoomScale;
@property(assign, nonatomic) float zoomScale;
@property(assign, nonatomic) CGRect frame;
@property(readonly, assign, nonatomic) MMLoadingView* m_loadingView;
@property(assign, nonatomic) MMDelegateProxy<WCImageFullScreenViewContainerDelegate>* m_delegate;
@property(assign, nonatomic) CGSize m_initalContentSize;
@property(assign, nonatomic) CGRect m_originImageRectInScreen;
@property(retain, nonatomic) WCMediaItemWrap* m_mediaDataWrap;
@property(retain, nonatomic) WCMediaItem* m_mediaData;
@property(retain, nonatomic) UIImage* m_image;
-(id).cxx_construct;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)LongPressEvents;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)animationRotateDidStop;
-(void)onDeviceRotate;
-(void)onDownloadMediaProcessChange:(id)change downloadType:(int)type current:(int)current total:(int)total;
-(void)animationHideDidStop;
-(void)animationHideWithRotate;
-(CGAffineTransform)getAnimationRotateTransform;
-(void)tryDownloadImage;
-(void)animationShowWithMediaItem:(id)mediaItem;
-(void)animationShowStep2;
-(void)animationShowStep2_Animate;
-(void)animationShowStep2_ImageNotReady;
-(void)animationShowDidStop;
-(void)animationShowView;
-(void)setContentOffsetAndSize;
-(void)clearStatus;
-(CGRect)getCenterRect:(CGSize)rect maxSize:(CGSize)size;
-(void)showProcessView;
-(void)initScrollViewHelper;
-(void)onDoubleTap:(id)tap;
-(void)onSingleTap:(id)tap;
-(id)viewForZooming;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)startLoadingBlocked;
-(void)setContentSize:(CGSize)size;
-(void)setContentOffset:(CGPoint)offset;
-(void)setZoomScale:(float)scale animated:(BOOL)animated;
-(void)dealloc;
-(void)stopAllAnimation;
-(id)init;
@end

@interface WCImageScrollView : MMUIScrollView <UIScrollViewDelegate, MMImageScrollViewHelperDelegate> {
	UIView* imageView;
	unsigned index;
	UIActivityIndicatorView* mActivityIndicator;
	MMImageScrollViewHelper* m_scrollViewHelper;
	BOOL supportOrientation;
	MMDelegateProxy<WCImageScrollViewDelegate>* m_delegate;
}
@property(copy, nonatomic) NSArray* gestureRecognizers;
@property(assign, nonatomic) float maximumZoomScale;
@property(assign, nonatomic) float minimumZoomScale;
@property(assign, nonatomic) float zoomScale;
@property(assign, nonatomic) CGRect frame;
@property(assign, nonatomic) MMDelegateProxy<WCImageScrollViewDelegate>* m_delegate;
@property(readonly, assign, nonatomic) UIActivityIndicatorView* mActivityIndicator;
@property(assign, nonatomic) BOOL supportOrientation;
@property(assign, nonatomic) unsigned index;
-(void)rotateImageWithImage:(id)image;
-(void)setImageTransform:(CGAffineTransform)transform;
-(void)displayView:(id)view;
-(void)displayImage:(id)image withFrame:(CGRect)frame;
-(void)internalDisplayImage:(id)image withFrame:(CGRect)frame animate:(BOOL)animate;
-(float)angelFromOldOrientation:(int)oldOrientation newOrientation:(int)orientation;
-(int)orientationToInt:(int)int;
-(void)onDoubleTap:(id)tap;
-(void)onSingleTap:(id)tap;
-(id)getScrollView;
-(id)viewForZooming;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WCImageView : MMUIControl <WCFacadeExt, UIActionSheetDelegate> {
	WCMediaItem* m_mediaData;
	int m_uiImageType;
	int m_uiPrecedentImageType;
	unsigned long m_uiSourceType;
	BOOL m_bIsLongPressHandled;
	int m_style;
	int m_photoType;
	BOOL m_isImageReady;
	UIImageView* m_imageView;
	UINavigationController* navigationController;
	MMAnimationTipView* m_tipView;
	UIImageView* m_lockStausView;
	UIImageView* m_sharedStausView;
	UILabel* m_nickLabel;
	UIView* m_highLightView;
	MMDelegateProxy<WCImageViewDelegate>* m_delegate;
	UIImage* m_image;
}
@property(assign, nonatomic) UINavigationController* navigationController;
@property(assign, nonatomic) MMDelegateProxy<WCImageViewDelegate>* m_delegate;
@property(assign, nonatomic) unsigned long m_uiSourceType;
@property(readonly, assign, nonatomic) BOOL m_isImageReady;
@property(assign, nonatomic) int m_photoType;
@property(assign, nonatomic) int m_style;
@property(readonly, assign, nonatomic) UIImageView* m_imageView;
@property(readonly, assign, nonatomic) UIImage* m_image;
@property(readonly, assign, nonatomic) int m_uiImageType;
@property(readonly, assign, nonatomic) WCMediaItem* m_mediaData;
-(void)showOwnerNickname:(BOOL)nickname username:(id)username;
-(void)switchToImageType:(int)imageType;
-(void)showSharedStatus:(BOOL)status;
-(void)showLockStatus:(BOOL)status;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showSuccessTip:(id)tip;
-(void)promptSaveToPhotoLibrary;
-(void)LongPressEvents;
-(void)animationShow:(BOOL)show;
-(void)onDownloadFinish:(id)finish downloadType:(int)type;
-(void)onClickWCImage:(id)image;
-(void)setFrame:(CGRect)frame;
-(void)layoutSubviews;
-(void)setHighlighted:(BOOL)highlighted;
-(void)dealloc;
-(id)initWithMediaData:(id)mediaData imageType:(int)type precedentImageType:(int)type3;
-(id)initWithMediaData:(id)mediaData imageType:(int)type;
-(void)initData:(id)data imageType:(int)type precedentImageType:(int)type3;
-(void)reloadImage;
-(id)getImage;
-(id)getStyledImage;
@end

@interface WCInputController : MMObject <MMGrowTextViewDelegate, EmoticonBoardViewDelegate, BaseEmoticonViewDelegate> {
	float _fKeyboardAnimationDuration;
	float _fKeyboardHeight;
	int _iKeyboardAnimationCurve;
	int _eInputMode;
	UIView* _inputView;
	UIScrollView* _scrollView;
	MMGrowTextView* _textView;
	EmoticonBoardView* _emoticonBoardView;
	float _fInputViewY;
	float _fScrollViewY;
	float _fScrollViewOriginY;
	MMDelegateProxy<InputControllerDelegate>* _delegate;
	BOOL _bAnimationCutHeight;
}
@property(readonly, assign, nonatomic) float fKeyboardHeight;
@property(assign, nonatomic) BOOL bAnimationCutHeight;
@property(assign, nonatomic) int eInputMode;
@property(assign, nonatomic) MMDelegateProxy<InputControllerDelegate>* delegate;
@property(assign, nonatomic) float fScrollViewOriginY;
@property(assign, nonatomic) float fScrollViewY;
@property(assign, nonatomic) float fInputViewY;
@property(assign, nonatomic) EmoticonBoardView* emoticonBoardView;
@property(assign, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) MMGrowTextView* textView;
@property(assign, nonatomic) UIView* inputView;
-(void)onSendButtonClicked;
-(void)textViewCommit;
-(void)UpdateTabbarSendButtonState;
-(void)MMGrowTextViewBeginEditing:(id)editing;
-(void)TextDidChanged:(id)text selectedRange:(NSRange)range;
-(void)TextViewDidEnter:(id)textView;
-(void)updateScrollViewY:(float)y;
-(void)inputModeChangeButtonClicked;
-(void)AnimationDidStop:(id)animation;
-(void)keyboardWillHide:(float)keyboard;
-(void)keyboardWillShow:(float)keyboard;
-(BOOL)TextViewDidDelete;
-(void)setKeyboardAnimationCurve:(int)curve;
-(void)setKeyboardAnimationDuration:(float)duration;
-(void)TextViewHeightDidChanged:(id)textViewHeight;
-(void)becomeTextView;
-(void)resignResponder;
-(void)resignTextView;
-(void)deleteEmoticon;
-(void)didSelectorEmoticon:(id)emoticon;
-(void)dealloc;
-(id)init;
@end

@interface WCLikeButton : UIButton {
	WCDataItem* m_item;
	unsigned long m_uiSourceType;
	BOOL m_likeOperating;
}
@property(assign, nonatomic) unsigned long m_uiSourceType;
@property(retain, nonatomic) WCDataItem* m_item;
-(void)onLikeFriend;
-(void)LikeBtnReduceEnd;
-(void)LikeBtnReduce;
-(void)LikeBtnEnlarge;
-(void)dealloc;
-(id)initWithDataItem:(id)dataItem;
-(void)updateLikeBtn;
@end

@interface WCMultiImageScannerController : MMFullScreenViewController <UIScrollViewDelegate, PageScrollViewDelegate, PageScrollViewDataSource, UIActionSheetDelegate> {
	PageScrollView* _pageScrollView;
	UIButton* _deleteButton;
	NSMutableArray* _arrViewItem;
	unsigned _currentIndex;
	MMDelegateProxy<WCMultiImageScannerDelegate>* _scannerDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCMultiImageScannerDelegate>* scannerDelegate;
@property(retain, nonatomic) NSMutableArray* arrViewItem;
@property(retain, nonatomic) UIButton* deleteButton;
@property(retain, nonatomic) PageScrollView* pageScrollView;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(id)pageScrollView:(id)view viewForItem:(unsigned)item;
-(unsigned)numberOfItems:(id)items;
-(unsigned)currentIndex:(id)index;
-(void)onChangedWithCurrentIndex:(int)currentIndex;
-(void)onSingleClicked;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithViewItems:(id)viewItems currentIndex:(unsigned)index;
-(void)onTopBarFrameChanged;
-(void)onMainWindowFrameChanged;
-(CGPoint)contentOffsetForPageScrollView;
-(CGSize)contentSizeForPageScrollView;
-(CGRect)frameForPageAtItem:(unsigned)item;
-(CGRect)frameForPageScrollView;
-(void)handleSingleTap;
-(void)viewWillBePoped:(BOOL)view;
-(void)hideFullScreen;
-(void)showFullScreen;
-(void)showFullScreenAnimated:(BOOL)animated;
-(void)showAlert;
-(void)deleteCurrentItem;
-(void)updateTitle;
-(void)initScrollView;
-(void)initNavigationBar;
@end

@interface WCOperateFloatView : UIView {
	WCDataItem* m_item;
	WCLikeButton* m_likeBtn;
	UIButton* m_commentBtn;
	UIImageView* m_bkgImageView;
	UIView* m_clipView;
	UINavigationController* navigationController;
}
@property(assign, nonatomic) UINavigationController* navigationController;
@property(readonly, assign, nonatomic) UIButton* m_commentBtn;
@property(readonly, assign, nonatomic) UIButton* m_likeBtn;
@property(readonly, assign, nonatomic) WCDataItem* m_item;
-(void)onLikeItem:(id)item;
-(void)hide;
-(void)animationDidStopHide;
-(void)animationDidStop;
-(void)showWithItemData:(id)itemData tipPoint:(CGPoint)point;
-(void)dealloc;
-(id)init;
@end

@interface LALALAView : UIView {
}
-(void)setFrame:(CGRect)frame;
@end

@interface WCPhotoMutipleImageViewController : MMUIViewController <UIScrollViewDelegate, scrollViewDelegate, WCImageViewDelegate, UIActionSheetDelegate, SessionSelectControllerDelegate, WCFacadeExt, WCImageScrollViewDelegate, WCCommentDetailViewControllerFBDelegate, TextLayoutDelegate, UIAlertViewDelegate> {
	MMScrollView* pagingScrollView;
	NSMutableArray* m_arrDatas;
	unsigned long m_uiSource;
	BOOL m_isShowingDataItemList;
	int m_logicType;
	NSMutableSet* recycledPages;
	NSMutableSet* visiblePages;
	int firstVisiblePageIndexBeforeRotation;
	float percentScrolledIntoFirstVisiblePage;
	int m_iNumberOfPages;
	int m_iCurrentPage;
	MMAnimationTipView* m_tipView;
	BOOL m_hideWhenDisappear;
	CContact* m_contact;
	UIView* m_titleView;
	UILabel* m_titleOne;
	UILabel* m_titleTwo;
	NSMutableArray* menuItems;
	UIView* bottomView;
	UIImageView* redHeartView;
	UIView* descBackgroundView;
	RichTextView* descLabel;
	MMHeadImageView* headImg;
	UIImageView* lockImgView;
	WCLikeButton* btnLike;
	UIButton* btnComment;
	UIButton* rightBottomCtrl;
	UILabel* likeCountLable;
	UILabel* commentCountLable;
	UIImageView* smallLikeImg;
	UIImageView* smallCommentImg;
	UIButton* setBGButton;
	BOOL m_isTileing;
	BOOL m_supportLandscape;
	BOOL m_scrollViewLayouting;
	BOOL m_orientationRotating;
	BOOL m_isBidirectionalFan;
	BOOL m_backing;
	BOOL m_backEnabled;
}
@property(assign, nonatomic) int m_logicType;
@property(assign, nonatomic) unsigned long m_uiSource;
@property(retain, nonatomic) NSMutableArray* menuItems;
@property(retain, nonatomic) CContact* m_contact;
-(void)adjustViewAndNavBarRect;
-(void)onTopBarFrameChanged;
-(void)onMainWindowFrameChanged;
-(void)setWCBackground;
-(void)goBackAfterSetBackground;
-(void)onNetworkActivityStatusChanged;
-(void)willShow;
-(void)updateNetworkStatus;
-(void)onTouchEndOnFullScreenView:(id)view;
-(BOOL)shouldAnimateFullScreenViewOnShow:(id)show;
-(void)updatePhotoatIndex:(unsigned)index;
-(CGPoint)contentOffsetForPagingScrollView;
-(CGSize)contentSizeForPagingScrollView;
-(CGRect)frameForPageAtIndex:(unsigned)index;
-(CGRect)frameForPagingScrollView:(BOOL)pagingScrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)onDownloadFinish:(id)finish downloadType:(int)type;
-(void)reloadImage:(id)image;
-(void)onClickWCImage:(id)image;
-(void)configurePage:(id)page forIndex:(unsigned)index;
-(BOOL)isDisplayingPageForIndex:(unsigned)index;
-(id)dequeueRecycledPage;
-(void)tilePages;
-(void)viewDidLoad;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(void)flashRedHeartView;
-(void)redHeartReduceEnd;
-(void)redHeartReduce;
-(void)redHeartShowForAWhile;
-(void)redHeartEnlarge;
-(void)setNaviTitleLineOne:(id)one andLineTwo:(id)two;
-(void)updateButtonStateAnimate:(BOOL)animate;
-(void)initBottomView;
-(void)layoutBottomView:(BOOL)view;
-(void)onPageChangedWithIndex:(int)index;
-(id)tryUpdateMedia:(unsigned long)media;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)contactsReturn:(BOOL)aReturn contact:(id)contact;
-(void)onBackButtonClicked;
-(void)onShowMenu;
-(void)onGoToWithUserWC;
-(void)onSetDataItemPublicFinished:(int)finished dataItemID:(id)anId;
-(void)onMakePublic;
-(void)onSetDataItemPrivateFinished:(int)finished dataItemID:(id)anId;
-(void)onMakePrivate;
-(void)onSaveToWC;
-(void)onDeletePhoto;
-(void)onPresentBackFromViewController;
-(void)onBackFromDetailView;
-(void)onPopupCommentFriend;
-(void)onCommentFriend;
-(void)onDeleteData;
-(void)onRestartUpload;
-(BOOL)isPrivate;
-(void)reportThisPhoto:(id)photo;
-(void)onDataChangedWithAdded:(id)added andChanged:(id)changed andDeleted:(id)deleted;
-(void)onDataItemDeleteFinished:(int)finished dataItemID:(id)anId;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)initScrollView;
-(void)layoutScrollView:(BOOL)view;
-(void)onSingleTapWCImageScrollView;
-(void)onSingleTapOnNavigationBar:(id)bar;
-(void)handleSingleTap;
-(void)hideFullScreen;
-(void)showFullScreen:(BOOL)screen;
-(void)showFullScreen;
-(void)layoutHiddenView:(BOOL)view;
-(void)initNavigationBar;
-(void)didAppear;
-(void)willDisshow;
-(void)didDisshow;
-(void)willDisappear;
-(void)viewWillBePushed:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)willAppear;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)removeNvGestureRecognizer;
-(void)addNvGestureRecognizer;
-(id)getMediaItemWrapAnywayAt:(unsigned long)at;
-(id)getMediaItemWrapAt:(unsigned long)at;
-(BOOL)isMyOwnWC;
-(void)dealloc;
-(id)initWithWCMediaItemWraps:(id)wcmediaItemWraps currentIndex:(unsigned long)index;
-(id)initWithDataItems:(id)dataItems currentIndex:(unsigned long)index;
@end

@interface WCPuzzleImageView : MMUIView <WCFacadeExt> {
	NSArray* m_arrMediaData;
	NSMutableArray* m_arrView;
	int m_visableCount;
	vector<bool, std::allocator<bool> > m_imageReady;
	UIImageView* m_lockStausView;
	UIImageView* m_sharedStausView;
	UILabel* m_nickLabel;
	MMDelegateProxy<WCPuzzleImageViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCPuzzleImageViewDelegate>* m_delegate;
@property(readonly, assign, nonatomic) NSArray* m_arrMediaData;
+(id)getImageForMedia:(id)media;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)showOwnerNickname:(BOOL)nickname username:(id)username;
-(void)showSharedStatus:(BOOL)status;
-(void)showLockStatus:(BOOL)status;
-(void)onDownloadFinish:(id)finish downloadType:(int)type;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)setFrame:(CGRect)frame;
-(void)resetImages;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithMediaData:(id)mediaData;
@end

@interface WCSelectorView : MMUIView {
	BOOL _bNeedLayout;
	UIImageView* _backgroundImageView;
	UIButton* _addButton;
	UIView* _deleteView;
	MMDelegateProxy<WCSelectorViewDataSource>* _dataSource;
	MMDelegateProxy<WCSelectorViewDelegate>* _delegate;
	UINavigationController* _navigationController;
	CGPoint _startPoint;
	BOOL _bShowAddButton;
	float _fDeleteScrollViewOffset;
	BOOL _bHandleOutside;
	BOOL _bHandleWholeView;
}
@property(assign, nonatomic) BOOL bHandelWholeView;
@property(assign, nonatomic) BOOL bHandleOutside;
@property(assign, nonatomic) UINavigationController* navigationController;
@property(assign, nonatomic) MMDelegateProxy<WCSelectorViewDelegate>* delegate;
@property(assign, nonatomic) MMDelegateProxy<WCSelectorViewDataSource>* dataSource;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(assign, nonatomic) CGPoint startPoint;
@property(assign, nonatomic) BOOL bShowAddButton;
-(id).cxx_construct;
-(void)dealloc;
-(void)onXviewClicked:(id)clicked;
-(void)onAddButtonClicked:(id)clicked;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)delayedHandleWholeView;
-(void)delayedTouchesEnded:(id)ended;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)showAddView;
-(void)hideAddView;
-(void)reloadDeleteView;
-(void)showDeleteView;
-(void)hideDeleteView;
-(void)layoutDeleteView;
-(void)reload;
-(void)layoutSubviews;
-(id)init;
-(void)commmtInit;
@end

@interface WCUIUtil : NSObject {
}
+(float)getTimelineImageCompressRate;
+(BOOL)showCellSource:(id)source;
+(BOOL)showCellSummary;
+(id)getDefaultProductImage:(int)image;
+(id)getErrTipForDataItem:(id)dataItem;
+(id)getLocalizedArrayGroupName:(id)name;
+(id)getLocalizedGroupName:(id)name;
+(id)getWCGroupPrivacyContent;
@end

@interface FavoritesCDNInfoDB : NSObject {
	MyFavoritesDB* _mmDB;
	NSRecursiveLock* _lock;
}
-(BOOL)deleteCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(id)getUploadCdnInfoByLocalItemDataId:(id)anId andType:(int)type;
-(BOOL)updateCdnInfo:(id)info;
-(BOOL)updateCdnInfoByDicColValue:(id)value HeadMd5:(id)a5 FullMd5:(id)a53;
-(BOOL)updateCdnInfo:(id)info MD5:(id)a5 Head256Md5:(id)a53 Type:(int)type;
-(id)getNextAsyncUploadCdnInfoByLocalItemId:(unsigned long)anId;
-(id)getNextUploadCdnInfoByLocalItemId:(unsigned long)anId;
-(BOOL)GetFavoritesCDNInfoValue:(id)value dicInfo:(id)info;
-(void)initUpdateArray:(id)array ByFavoritesCDNInfo:(id)info;
-(BOOL)addCDNInfo:(id)info;
-(void)initDB:(id)db;
-(void)initQueryArray:(id)array;
-(void)dealloc;
-(id)init;
@end

@interface FavoritesItemDB : NSObject {
	MyFavoritesDB* _mmDB;
}
-(BOOL)getDeletedItemList:(id)list;
-(BOOL)updateItemXMLInFavItemDB:(id)favItemDB;
-(BOOL)updateItemLocalStatus:(id)status;
-(BOOL)getAsyncUploadFailedItemList:(id)list;
-(BOOL)getAsyncUploadingItemList:(id)list;
-(BOOL)rollbackTransation;
-(BOOL)commitTransation;
-(BOOL)beginTransation;
-(id)checkBeforeAddItemByFavId:(unsigned long)anId andLocalId:(unsigned long)anId2;
-(unsigned long)getMaxLastUpdateTimeByUsrname:(id)usrname;
-(unsigned long)getItemCountByFromUsr:(id)usr andToUsr:(id)usr2;
-(unsigned long)getItemCountByUsrname:(id)usrname;
-(BOOL)getAllFavoritesItems:(id)items;
-(BOOL)updateItemUpdateTime:(unsigned long)time ByLocalId:(unsigned long)anId;
-(BOOL)updateUpdateSeq:(unsigned long)seq ByFavId:(unsigned long)anId;
-(BOOL)getNextPageNeedBatchGetFavoritesItemList:(id)list byType:(int)type andMinUpdateTime:(unsigned long)time;
-(BOOL)getFirstPageNeedBatchGetFavoritesItemList:(id)list byType:(int)type;
-(BOOL)getNeedBatchGetFavoritesItemList:(id)list byType:(int)type andMinUpdateTime:(unsigned long)time;
-(BOOL)getNextPageFavoritesItemList:(id)list byType:(int)type andCurMinUpdateTime:(unsigned long)time;
-(BOOL)getFirstPageFavoritesItemListContainUnBatchGet:(id)get;
-(BOOL)getFirstPageFavoritesItemList:(id)list byType:(int)type;
-(BOOL)updateItemInFavItemDBByFavObject:(id)favItemDBByFavObject;
-(BOOL)updateItemInFavItemDB:(id)favItemDB;
-(BOOL)getDownloadFailedItemList:(id)list;
-(BOOL)getUploadFailedItemList:(id)list;
-(BOOL)getDownloadingItemList:(id)list;
-(BOOL)getUploadingItemList:(id)list;
-(BOOL)deleteFavoritesItemByLocalItemId:(unsigned long)anId;
-(BOOL)deleteFavoritesItemById:(unsigned long)anId;
-(id)getFavoritesItemBySourceId:(id)anId;
-(id)getFavoritesItemByLocalId:(unsigned long)anId;
-(id)getFavoritesItemById:(unsigned long)anId;
-(BOOL)getFavoritesItemValue:(id)value dicInfo:(id)info;
-(BOOL)insertNewRowInFavoritesItem:(id)favoritesItem XML:(id)xml;
-(void)initDB:(id)db;
-(void)initUpdateArray:(id)array ByFavObject:(id)object;
-(void)initUpdateArray:(id)array ByFavoritesItem:(id)item;
-(void)initQueryArray:(id)array;
-(void)dealloc;
-(id)init;
@end

@interface MyFavoritesDB : CBaseDB {
}
-(BOOL)CreateFavoritesSearchTable;
-(BOOL)CreateFavoritesFileRetainCountTable;
-(BOOL)CreateFavoritesSessionTable;
-(BOOL)CreateFavoritesDownloadCdnInfoTable;
-(BOOL)CreateFavoritesCdnInfoTable;
-(BOOL)CreateFavoritesItemTable;
-(void)RegisterTypeOfCol;
-(BOOL)initDB;
-(void)reloadDataBase;
-(void)dealloc;
-(id)init;
-(unsigned long)getMaxLastUpdateTimeByUsrname:(id)usrname;
-(unsigned long)getItemCountByFromUsr:(id)usr andToUsr:(id)usr2;
-(unsigned long)getItemCountByUsrname:(id)usrname;
-(BOOL)getAllFavoritesItemList:(id)list RetCol:(id)col;
-(BOOL)updateItemInFavItemDB:(id)favItemDB ByFavId:(unsigned long)anId;
-(BOOL)checkBeforeAddItemByFavId:(unsigned long)anId andLocalId:(unsigned long)anId2 ArrQry:(id)qry Ret:(id)ret;
-(BOOL)getNextPageNeedBatchGetFavoritesItemList:(id)list byType:(int)type andMinUpdateTime:(unsigned long)time RetCol:(id)col;
-(BOOL)getFirstPageNeedBatchGetFavoritesItemList:(id)list byType:(int)type RetCol:(id)col;
-(BOOL)getNeedBatchGetFavoritesItemList:(id)list byType:(int)type andMinUpdateTime:(unsigned long)time RetCol:(id)col;
-(BOOL)getNextPageFavoritesItemList:(id)list byType:(int)type andCurMinUpdateTime:(unsigned long)time RetCol:(id)col;
-(BOOL)getFirstPageFavoritesItemListContainUnBatchGet:(id)get RetCol:(id)col;
-(BOOL)getFirstPageFavoritesItemList:(id)list byType:(int)type RetCol:(id)col;
-(BOOL)getDeleteItemList:(id)list RetCol:(id)col;
-(BOOL)updateItemXML:(id)xml ByLocalId:(unsigned long)anId;
-(BOOL)updateItemLocalStatus:(int)status ByLocalId:(unsigned long)anId;
-(BOOL)updateItemUpdateTime:(unsigned long)time ByLocalId:(unsigned long)anId;
-(BOOL)updateUpdateSeq:(unsigned long)seq ByFavId:(unsigned long)anId;
-(BOOL)updateItemInFavItemDB:(id)favItemDB ByLocalItemId:(unsigned long)anId;
-(BOOL)getDownloadFailedItemList:(id)list RetCol:(id)col;
-(BOOL)getAsyncUploadFailedItemList:(id)list RetCol:(id)col;
-(BOOL)getUploadFailedItemList:(id)list RetCol:(id)col;
-(BOOL)getDownloadingItemList:(id)list RetCol:(id)col;
-(BOOL)getAsyncUploadingItemList:(id)list RetCol:(id)col;
-(BOOL)getUploadingItemList:(id)list RetCol:(id)col;
-(BOOL)deleteFavoritesItemByLocalItemId:(unsigned long)anId;
-(BOOL)deleteFavoritesItemById:(unsigned long)anId;
-(BOOL)getFavoritesItemBySourceId:(id)anId ArrQry:(id)qry Ret:(id)ret;
-(BOOL)getFavoritesItemByLocalId:(unsigned long)anId ArrQry:(id)qry Ret:(id)ret;
-(BOOL)getFavoritesItemById:(unsigned long)anId ArrQry:(id)qry Ret:(id)ret;
-(unsigned long)insertNewRowInFavoritesItemTable:(id)favoritesItemTable;
-(BOOL)deleteCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(BOOL)getUploadCdnInfoByLocalItemDataId:(id)anId andType:(int)type ArrQry:(id)qry Ret:(id)ret;
-(BOOL)updateCdnInfo:(id)info byItemLocalDataId:(id)anId andType:(int)type;
-(BOOL)updateCdnInfoByDicColValue:(id)value HeadMd5:(id)a5 FullMd5:(id)a53;
-(BOOL)updateCdnInfo:(id)info MD5:(id)a5 Head256Md5:(id)a53 Type:(int)type;
-(BOOL)getNextAsyncUploadCdnInfoByLocalItemId:(unsigned long)anId ArrQry:(id)qry Ret:(id)ret;
-(BOOL)getNextUploadCdnInfoByLocalItemId:(unsigned long)anId ArrQry:(id)qry Ret:(id)ret;
-(BOOL)insertNewRowInCdnInfoTable:(id)cdnInfoTable;
-(BOOL)deleteDownloadCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(BOOL)getDownloadCdnInfoByLocalItemDataId:(id)anId andType:(int)type ArrQry:(id)qry Ret:(id)ret;
-(BOOL)updateDownloadCdnInfo:(id)info byItemLocalDataId:(id)anId andType:(int)type;
-(BOOL)getNextDownloadCdnInfoByLocalItemId:(unsigned long)anId ArrQry:(id)qry Ret:(id)ret;
-(BOOL)insertNewRowInDownloadCdnInfoTable:(id)downloadCdnInfoTable;
-(BOOL)isMd5RetainCountZero:(id)zero;
-(BOOL)insertNewRowInFileRetainCountTable:(id)fileRetainCountTable;
-(BOOL)deleteItemFromFavoritesFileRetainCountTableByMd5:(id)favoritesFileRetainCountTableByMd5 andLocalItemId:(unsigned long)anId;
-(BOOL)isItemExist:(id)exist andLocalItemId:(unsigned long)anId;
-(BOOL)getSearchItemList:(id)list byType:(int)type SearchContent:(id)content RetCol:(id)col;
-(BOOL)deleteSearchItemByLocalFavId:(unsigned long)anId;
@end

@interface MMActionSheet : MMUIActionSheet <UIActionSheetDelegate, UIActionSheetDelegate> {
	NSString* _cancelButtonTitle;
	NSMutableArray* _buttonTitleList;
	UIView* _pannelView;
	UIView* _titleView;
	MMDelegateProxy<UIActionSheetDelegate>* _delegateEx;
	NSString* _titleEx;
	int _destructiveButtonIndexEx;
	int _firstOtherButtonIndexEx;
	int _cancelButtonIndexEx;
}
@property(copy, nonatomic) NSString* titleEx;
@property(assign, nonatomic) MMDelegateProxy<UIActionSheetDelegate>* delegateEx;
@property(retain, nonatomic) UIView* titleView;
@property(retain, nonatomic) UIView* pannelView;
@property(assign, nonatomic) int cancelButtonIndexEx;
@property(assign, nonatomic) int destructiveButtonIndexEx;
@property(assign, nonatomic) int firstOtherButtonIndexEx;
@property(retain, nonatomic) NSString* cancelButtonTitle;
@property(retain, nonatomic) NSMutableArray* buttonTitleList;
+(BOOL)isUseIOS6StyleActionsheetForIOS7;
-(void)OnCancel:(id)cancel;
-(void)OnDefaultButtonTapped:(id)tapped;
-(void)reloadInnerView;
-(void)showFromToolbar:(id)toolbar;
-(void)showFromTabBar:(id)tabBar;
-(void)showFromRect:(CGRect)rect inView:(id)view animated:(BOOL)animated;
-(void)showFromBarButtonItem:(id)barButtonItem animated:(BOOL)animated;
-(void)showInView:(id)view;
-(void)dismissWithClickedButtonIndex:(int)clickedButtonIndex animated:(BOOL)animated;
-(void)setDestructiveButtonIndex:(int)index;
-(int)destructiveButtonIndex;
-(void)setCancelButtonIndex:(int)index;
-(int)cancelButtonIndex;
-(int)firstOtherButtonIndex;
-(id)buttonTitleAtIndex:(int)index;
-(int)numberOfButtons;
-(int)addButtonWithTitle:(id)title;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)setTitle:(id)title;
-(id)title;
-(id)initWithTitle:(id)title delegate:(id)delegate cancelButtonTitle:(id)title3 destructiveButtonTitle:(id)title4 otherButtonTitles:(id)titles;
-(id)init;
-(id)makePannelViewWithButtonList:(id)buttonList withCancelButtonTitle:(id)cancelButtonTitle;
-(id)makeTitleViewWithTitle:(id)title;
-(float)heightOfWholeSheet;
-(void)dealloc;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
@end

@interface FavoritesUploadMgr : MMObject <CNetworkStatusExt, FavoritesUploaderDelegate> {
	NSMutableArray* _uploadingQueue;
	NSMutableArray* _failedQueue;
	NSMutableArray* _activeQueue;
	BOOL _isUploading;
	FavoritesItemDB* _favItemDB;
	FavoritesCDNInfoDB* _favCdnDB;
	FavoritesUploader* _favUploader;
	BOOL _isCountingMd5;
	MMDelegateProxy<FavoritesUploadMgrDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesUploadMgrDelegate>* delegate;
-(void)ReachabilityChange:(unsigned long)change;
-(void)onUploadFavItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onUploadFail:(id)fail ErrCode:(int)code;
-(void)onUploadFinished:(id)finished;
-(void)onCopyFileFinished:(id)finished;
-(void)onUsedCapacityUpdate:(unsigned long long)update;
-(void)tryStartUpload;
-(id)getUploadFailedItemList;
-(id)getUploadPausedItemList;
-(id)getUploadItemList;
-(void)changeToNoWifi;
-(BOOL)pauseUploadFavoritesItem:(unsigned long)item;
-(BOOL)restartAllUploadFailedItems;
-(BOOL)startUploadItem:(id)item IsPriority:(BOOL)priority;
-(BOOL)deleteCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(id)getUploadCdnInfoByLocalItemDataId:(id)anId andType:(int)type;
-(BOOL)updateCdnInfo:(id)info;
-(BOOL)updateCdnInfoByExistCheckCDNItem:(id)item;
-(BOOL)updateCdnInfo:(id)info MD5:(id)a5 Head256Md5:(id)a53 Type:(int)type;
-(id)getNextUploadCdnInfoByLocalItemId:(unsigned long)anId;
-(void)TryStartUpload;
-(void)checkAndTryStartUpload;
-(void)setItemUploadFail:(id)fail ErrCode:(int)code;
-(BOOL)delUploadItem:(id)item;
-(BOOL)addUploadItem:(id)item;
-(void)startCountMd5;
-(void)doCopyFile:(id)file;
-(void)saveMd5ToCdnInfoTable:(id)cdnInfoTable;
-(BOOL)CountItemDataMD5:(id)a5;
-(BOOL)loadFailedQueue;
-(BOOL)loadUploadingQueue;
-(void)dealloc;
-(void)initDB:(id)db;
-(id)init;
@end

@interface FavoritesUtil : MMObject {
}
+(id)getWebpageFavItemUrl:(id)url;
+(id)getFavTextCellText:(id)text;
+(id)favTextFilter:(id)filter;
+(id)getFavoritesBatchDelQueuePath;
+(id)getFavoritesSettingPath;
+(id)getFavoritesSyncBufferPath;
+(id)getFavoritesDBPath;
+(id)getUserFavoritesRootDir;
+(id)getFavFilterTitle:(id)title MaxWidth:(float)width;
+(id)ConvertVideoFavItem2WCUploadTask:(id)task;
+(id)ConvertImgFavItem2WCUploadTask:(id)task;
+(id)ConvertGoodsFavItem2MsgWrap:(id)wrap;
+(id)ConvertWebPageFavItem2MsgWrap:(id)wrap;
+(id)ConvertMusicFavItem2MsgWrap:(id)wrap;
+(id)ConvertLocFavItem2MsgWrap:(id)wrap;
+(id)ConvertVideoFavItem2VideoInfo:(id)info;
+(id)ConvertVideoFavItem2MsgWrap:(id)wrap;
+(id)ConvertFileFavItem2MsgWrap:(id)wrap;
+(id)ConvertImgFavItem2MsgWrap:(id)wrap;
+(id)ConvertTextFavItem2MsgWrap:(id)wrap;
+(id)ConvertProductWC2FavItem:(id)item;
+(id)ConvertProductMsg2FavItem:(id)item;
+(id)ConvertProductDetail2FavItem:(id)item Desc:(id)desc ThumbUrl:(id)url ProductInfo:(id)info appId:(id)anId;
+(id)ConvertVideoSNS2FavItem:(id)item desc:(id)desc WebUrl:(id)url FromUser:(id)user EventId:(id)anId MediaId:(id)anId6 AppId:(id)anId7 ThumbUrl:(id)url8 SrcCreateTime:(unsigned long)time;
+(id)ConvertVideoMsg2FavItem:(id)item;
+(id)ConvertFileMail2FavItem:(id)item Attach:(id)attach;
+(id)ConvertFileMsg2FavItem:(id)item;
+(id)ConvertVoicePost2FavItem:(id)item VoiceTime:(unsigned long)time VoiceFmt:(unsigned long)fmt;
+(id)ConvertVoiceMsg2FavItem:(id)item;
+(id)ConvertLocPost2FavItem:(double)item Lng:(double)lng Scale:(int)scale Label:(id)label PoiName:(id)name Remark:(id)remark;
+(id)ConvertLocationMap2FavItem:(double)item Lng:(double)lng Scale:(int)scale Label:(id)label Username:(id)username PoiName:(id)name;
+(id)ConvertLocationMsg2FavItem:(id)item;
+(id)ConvertMusicShake2FavItem:(id)item Singer:(id)singer WebUrl:(id)url LowUrl:(id)url4 DataUrl:(id)url5 ThumbUrl:(id)url6;
+(id)ConvertMusicBanner2FavItem:(id)item Singer:(id)singer WebUrl:(id)url LowUrl:(id)url4 DataUrl:(id)url5 ThumbUrl:(id)url6;
+(id)ConvertMusicSNS2FavItem:(id)item Singer:(id)singer WebUrl:(id)url LowUrl:(id)url4 DataUrl:(id)url5 FromUser:(id)user EventId:(id)anId MediaId:(id)anId8 AppId:(id)anId9 ThumbUrl:(id)url10 SrcCreateTime:(unsigned long)time;
+(id)ConvertMusicMsg2FavItem:(id)item;
+(id)ConvertImgPost2FavItem:(id)item ThumbPath:(id)path;
+(id)ConvertImgSNS2FavItem:(id)item ThumbUrl:(id)url SourceDataPath:(id)path FromUser:(id)user EventId:(id)anId mediaId:(id)anId6 AppId:(id)anId7 SrcCreateTime:(unsigned long)time;
+(id)ConvertImgMsg2FavItem:(id)item;
+(id)ConvertUrlWeb2FavItem:(id)item Title:(id)title Desc:(id)desc ThumbUrl:(id)url AppId:(id)anId;
+(id)ConvertUrlSNS2FavItem:(id)item Title:(id)title EventId:(id)anId FromUser:(id)user AppId:(id)anId5 ThumbUrl:(id)url SrcCreateTime:(unsigned long)time;
+(id)ConvertUrlReader2FavItem:(id)item Url:(id)url;
+(id)ConvertUrlMsg2FavItem:(id)item;
+(id)ConvertTextPost2FavItem:(id)item;
+(id)ConvertTextSNS2FavItem:(id)item;
+(id)ConvertTextMsg2FavItem:(id)item;
+(id)ConvertWebPage2FavItem:(id)item FavSourceId:(id)anId FromUrl:(id)url;
@end

@interface OCRResult : NSObject {
	unsigned _ocrId;
	unsigned _imageType;
	NSString* _oriString;
	NSString* _translation;
	unsigned ocrId;
	unsigned imageType;
	NSString* oriString;
	NSString* translation;
}
@property(retain, nonatomic) NSString* translation;
@property(retain, nonatomic) NSString* oriString;
@property(assign, nonatomic) unsigned imageType;
@property(assign, nonatomic) unsigned ocrId;
-(void)dealloc;
-(id)init;
@end

@interface OCRTransMgr : MMService <MMService, PBMessageObserverDelegate> {
	unsigned m_uOcrId;
	BOOL m_bUploading;
}
@property(assign, nonatomic) unsigned ocrId;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(id)getToLang;
-(id)getFromLang;
-(BOOL)setToLang:(id)lang;
-(BOOL)setFromLang:(id)lang;
-(int)sendOCRTransImage:(id)image BufLen:(unsigned)len ImageType:(int)type SessionId:(unsigned)anId;
-(void)dealloc;
-(id)init;
@end

@interface MMCapturePreviewBrowserController : MMUIViewController <MultiImageScrollViewDelegate> {
	MultiImageScrollView* _pagingScrollView;
	UIImageView* _bottomBar;
	UIButton* _sendButton;
	UIButton* _originImageCheck;
	UILabel* _originImageLabel;
	NSMutableArray* _imageScrollViewPool;
	NSDictionary* _imageInfo;
	NSData* _imageData;
	long _originImageSize;
	UIActivityIndicatorView* _originIndictorView;
	BOOL _canSendOriginalImage;
	MMDelegateProxy<ImageBrowseDelegate>* m_delegate;
}
@property(assign, nonatomic) BOOL canSendOriginalImage;
@property(assign, nonatomic) MMDelegateProxy<ImageBrowseDelegate>* m_delegate;
-(void)onSingleTap:(id)tap;
-(id)imageAtPage:(unsigned long)page;
-(id)viewAtPage:(unsigned long)page frame:(CGRect)frame;
-(void)OnFullScreenChanged;
-(void)onOriginImageCheck:(id)check;
-(void)getOriginSize;
-(void)OnOriginSizeGot:(id)got;
-(void)OnSend:(id)send;
-(void)OnCancel:(id)cancel;
-(id)getfullScreenImage;
-(void)viewDidDisappear:(BOOL)view;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)viewDidLoad;
-(void)initView;
-(void)initBottomBar;
-(void)initData;
-(void)dealloc;
-(id)initWithImageInfo:(id)imageInfo;
@end

@interface CameraScanViewController : MMUIViewController <MMImagePickerManagerDelegate, UIGestureRecognizerDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, UIActionSheetDelegate, BaseScanLogicDelegate, CNetworkStatusExt, WCIntroViewDelegate> {
	int _cameraScanType;
	BOOL _hideBottomBar;
	BOOL _hideIntroButton;
	NSString* _desc;
	MMDelegateProxy<CameraScanUIDelegate>* _delegate;
	MMScrollView* _bottomScrollView;
	NSMutableDictionary* _logicDict;
	NSMutableDictionary* _buttonDict;
	UIView* _overlayLeftView;
	UIView* _overlayRightView;
	UIView* _overlayTopView;
	UIView* _overlayBottomView;
	UIView* _loadingBgView;
	UIView* _alertBgView;
	UIImageView* _scanLineImgView;
	UIView* _topLineView;
	UIView* _bottomLineView;
	UIView* _leftLineView;
	UIView* _rightLineView;
	UIImageView* _leftTopCropImageView;
	UIImageView* _rightTopCropImageView;
	UIImageView* _leftBottomCropImageView;
	UIImageView* _rightBottomCropImageView;
	UILabel* _infoLabel;
	UILabel* _descLabel;
	UILabel* _alertLabel;
	UILabel* _smallAlertLabel;
	UIButton* _introButton;
	IntroView* _introView;
	unsigned long _beepSound;
	BOOL _hasInit;
}
@property(assign, nonatomic) MMDelegateProxy<CameraScanUIDelegate>* delegate;
@property(retain, nonatomic) NSString* desc;
@property(assign, nonatomic) BOOL hideIntroButton;
@property(assign, nonatomic) BOOL hideBottomBar;
@property(assign, nonatomic) int cameraScanType;
-(void)onShowAlertWording;
-(void)onUpdateWording;
-(id)getMainViewController;
-(void)onStopScanAnimation;
-(void)onStartScanAnimation;
-(void)onPlaySound;
-(void)onStopLoading;
-(void)onStartLoading;
-(void)onPopFromStack;
-(void)onPopViewControllerCount:(int)count animated:(BOOL)animated;
-(void)onPushViewContoller:(id)contoller animated:(BOOL)animated;
-(void)ReachabilityChange:(unsigned long)change;
-(void)tapAtPoint:(id)point;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)showImagePicker;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onIKnowItBtnClick;
-(void)onShowIntroView;
-(BOOL)preViewControllerIsKindOf:(Class)of;
-(void)onQRCodeAction:(id)action;
-(float)getBottomBarHeight;
-(float)getTopPadding;
-(id)getFunctionTitle:(int)title;
-(float)getPreviewScale:(int)scale;
-(void)scrollButtonToVisible:(int)visible;
-(id)getButtonByTag:(int)tag;
-(void)addButtonWithTitle:(id)title Icon:(id)icon HighlightIcon:(id)icon3 Frame:(CGRect)frame Action:(SEL)action Tag:(int)tag;
-(void)hideIntroView;
-(void)showIntroView;
-(void)hideAlertWording;
-(void)showAlertWording:(id)wording Animated:(BOOL)animated;
-(void)updateIntroButton;
-(void)updateWording;
-(void)stopScanAnimation;
-(void)startScanAnimation;
-(void)doScanAnimation;
-(void)updateAnimationStoped;
-(void)updateScanViewAnimated:(BOOL)animated;
-(void)openView:(int)view Animated:(BOOL)animated;
-(void)switchView:(int)view;
-(id)getScanLogicController:(int)controller;
-(id)getActiveLogicController;
-(void)playsound;
-(void)stopLoadingDark;
-(void)startLoadingDarkAnimated:(BOOL)animated;
-(void)stopScan;
-(void)startScan;
-(void)alignTop:(id)top;
-(void)drawCropAreaRect:(CGRect)rect;
-(void)onButtonDown:(id)down;
-(void)enterForeground;
-(void)enterBackground;
-(void)viewDidPush:(BOOL)view;
-(void)viewWillPush:(BOOL)view;
-(void)viewWillBePushed:(BOOL)view;
-(void)viewWillBePoped:(BOOL)view;
-(void)willDisappear;
-(void)setScannerDelegate:(id)delegate cameraScanType:(int)type;
-(void)didAppear;
-(void)willAppear;
-(void)viewDidLoad;
-(void)setNavigationBarTranslucent:(BOOL)translucent;
-(void)initGesture;
-(void)initView;
-(float)getContentHeight;
-(void)dealloc;
-(void)initMember;
-(id)initWithCameraScanType:(int)cameraScanType delegate:(id)delegate presentModal:(BOOL)modal;
-(id)initWithCameraScanType:(int)cameraScanType presentModal:(BOOL)modal;
-(id)init;
@end

@interface MMImageUtil : NSObject {
}
+(void)mov2mp4withInputURL:(id)inputURL withOutputURL:(id)outputURL withTarget:(id)target withSel:(SEL)sel withQuality:(id)quality;
+(id)scaledImageWithAsset:(id)asset inWidth:(float)width inHeight:(float)height;
+(id)scaledImage:(unsigned)image withAsset:(id)asset;
+(BOOL)isImageEditedWithRepresentation:(id)representation;
+(id)compressImageToFullScreen:(id)fullScreen;
+(id)bytes2str:(long long)str;
+(id)fitImageOfLongImage:(id)longImage;
+(void)writeImageToFile:(id)file withURL:(id)url;
@end

@interface UrlPermission : NSObject <NSCoding> {
	JSAPIPermissionBitSet* m_permissionBitSet;
	GeneralControlBitSet* m_generalControlBitSet;
}
@property(retain, nonatomic) GeneralControlBitSet* m_generalControlBitSet;
@property(retain, nonatomic) JSAPIPermissionBitSet* m_permissionBitSet;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
-(void)dealloc;
@end

@interface BookScanner : MMUIView <IScanBookMgrExt, CameraScannerViewDelegate> {
	CGRect _cropRect;
	int _imageType;
	id<BookScannerDelegate> _delegate;
	unsigned _sessionId;
	UploadDetectLogic* _uploadDetectLogic;
	BOOL _enableUpload;
	BOOL _isDecoding;
	unsigned long _beepSound;
	char* _moveImage;
	char* _sendImage;
	CGRect _moveRect;
}
@property(assign, nonatomic) unsigned sessionId;
@property(assign, nonatomic) id<BookScannerDelegate> delegate;
@property(assign, nonatomic) CGRect cropRect;
-(id).cxx_construct;
-(void)OnSendSBImageError:(int)error;
-(void)OnSendSBImage:(unsigned)image ScanItem:(id)item ImageType:(int)type;
-(void)notifySendDataLength:(id)length;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)enableUpload:(BOOL)upload;
-(void)stop;
-(void)start;
-(void)dealloc;
-(id)init;
@end

@interface ScanBookLogicController : BaseScanLogicController <BookScannerDelegate, IScanBookMgrExt, UIActionSheetDelegate, UIAlertViewDelegate> {
	BookScanner* _scanner;
	int _unrecoCount;
	BOOL _isSearching;
	NSString* _alertText;
}
-(void)onGotScanItem:(id)item;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showUnrecoAlert;
-(void)onScanBookError:(int)error;
-(void)onSendDataLength:(unsigned)length;
-(void)onScanTimeout;
-(id)getAlertText;
-(id)getInfoText;
-(CGRect)getDrawCropRect;
-(void)stopScan;
-(void)startScan;
-(void)dealloc;
-(id)init;
@end

@interface ScanBookMgr : MMService <MMService, PBMessageObserverDelegate> {
	unsigned _scanBookId;
	unsigned _sessionId;
	unsigned _opCode;
	NSData* _dataToSend;
	unsigned _totalLen;
	unsigned _offset;
	unsigned _lastPackLen;
	int _imageType;
	int _uploadAction;
	BOOL _isUploading;
	NSTimer* _uploadTimer;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)saveProductItem:(id)item;
-(id)getLocalProductItemById:(id)anId;
-(void)checkUpload;
-(void)stop;
-(void)start;
-(id)getProductItemById:(id)anId Scence:(unsigned)scence;
-(int)sendSBImage:(id)image BufLen:(unsigned)len ImageType:(int)type OPCode:(unsigned)code SessionId:(unsigned)anId;
-(void)dealloc;
-(id)init;
@end

@interface ActionBase : NSObject <NSCoding> {
	int _actionType;
	id _actionItem;
}
@property(retain, nonatomic) id actionItem;
@property(assign, nonatomic) int actionType;
-(id)toXml;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ActionUrl : NSObject <NSCoding> {
	NSString* _name;
	NSString* _desc;
	NSString* _link;
	NSString* _username;
	NSString* _nickname;
}
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* username;
@property(retain, nonatomic) NSString* link;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* name;
-(id)toXml;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ActionUser : NSObject <NSCoding> {
	NSString* _name;
	NSString* _desc;
	NSString* _username;
	NSString* _nickname;
}
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* username;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* name;
-(id)toXml;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ActionText : NSObject <NSCoding> {
	NSString* _name;
	NSString* _desc;
}
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* name;
-(id)toXml;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ActionMusic : NSObject <NSCoding> {
	NSString* _name;
	NSString* _desc;
	NSString* _wifiUrl;
	NSString* _wapUrl;
	NSString* _webUrl;
}
@property(retain, nonatomic) NSString* webUrl;
@property(retain, nonatomic) NSString* wapUrl;
@property(retain, nonatomic) NSString* wifiUrl;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* name;
-(id)toXml;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ActionList : NSObject <NSCoding> {
	int _type;
	NSString* _title;
	NSMutableArray* _actions;
}
@property(retain, nonatomic) NSMutableArray* actions;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int type;
-(id)toXml;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ScanProductItem : NSObject <NSCoding> {
	NSString* _productID;
	int _type;
	NSString* _title;
	NSString* _thumbUrl;
	NSString* _subtitle;
	NSString* _source;
	NSString* _shareUrl;
	NSString* _playUrl;
	NSMutableArray* _actionLists;
}
@property(retain, nonatomic) NSString* productID;
@property(retain, nonatomic) NSMutableArray* actionLists;
@property(retain, nonatomic) NSString* playUrl;
@property(retain, nonatomic) NSString* shareUrl;
@property(retain, nonatomic) NSString* source;
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* subtitle;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) int type;
-(id)toXml:(int)xml;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ScanUserItem : NSObject <NSCoding> {
	NSString* _username;
	NSString* _nickname;
}
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* username;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ScanUrlItem : NSObject <NSCoding> {
	NSString* _title;
	NSString* _link;
	NSString* _imageUrl;
}
@property(retain, nonatomic) NSString* imageUrl;
@property(retain, nonatomic) NSString* link;
@property(retain, nonatomic) NSString* title;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface ScanItemBase : NSObject <NSCoding> {
	int _itemType;
	id _scanItem;
}
@property(retain, nonatomic) id scanItem;
@property(assign, nonatomic) int itemType;
+(id)getBaseItemOfType:(int)type rootNode:(XmlReaderNode_t*)node;
+(id)getScanItemFromXml:(id)xml andType:(int)type;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface MMAddressAnnotation : MMObject <MKAnnotation, ILocationMgrExt> {
	int _geoTag;
	NSString* _title;
	NSString* _subtitle;
	MMDelegateProxy<MMAddressAnnotationDelegate>* m_delegate;
	XXStruct_zYrK5D _coordinate;
}
@property(assign, nonatomic) XXStruct_zYrK5D coordinate;
@property(assign, nonatomic) MMDelegateProxy<MMAddressAnnotationDelegate>* m_delegate;
@property(copy, nonatomic) NSString* subtitle;
@property(copy, nonatomic) NSString* title;
-(id).cxx_construct;
-(void)onDidFindAddress:(id)on forTag:(int)tag;
-(void)createNewRequest;
-(void)safeDeleteGeocoder;
-(id)initWithCoordinate:(XXStruct_zYrK5D)coordinate Location:(id)location POIName:(id)name;
-(void)dealloc;
@end

@interface FavoritesUploader : MMObject <PBMessageObserverDelegate, ICdnComMgrExt> {
	FavoritesItem* _favItem;
	MMDelegateProxy<FavoritesUploaderDelegate>* _delegate;
	int _runningState;
	FavoritesCDNInfo* _uploadingInfo;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesUploaderDelegate>* delegate;
-(void)OnCdnUpload:(id)upload;
-(void)OnCdnUploadProgress:(id)progress;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleAddFavItemResp:(id)resp Event:(unsigned long)event;
-(void)BroadcastUploadFail:(int)fail;
-(void)HandleCheckCDNResp:(id)resp Event:(unsigned long)event;
-(void)updateCDNInfoByUnExistButServerAsyncUploadFavCDNItem:(id)item;
-(void)updateCDNInfoByUnExistFavCDNItem:(id)item;
-(void)updateCDNInfoByExistFavCDNItem:(id)item;
-(void)tryStartNextData;
-(void)updateFavoritesItemCDNInfo;
-(id)getItem;
-(BOOL)stop;
-(void)run;
-(void)doCheckCDN;
-(void)dealloc;
-(id)initWithFavoritesItem:(id)favoritesItem;
@end

@interface OnGotAppMsgHandler : MMObject <ShareMessageConfirmLogicHelperDelegate, IPreEnterWechatLogicExt> {
	NSString* m_nsAppid;
	AppCommunicateData* m_appData;
	ShareMessageConfirmLogicHelper* _confirmHelper;
	MMDelegateProxy<OnGotAppMsgHandleDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<OnGotAppMsgHandleDelegate>* m_delegate;
-(void)OnSendMessageCancel:(id)cancel;
-(void)OnSendMessageOK:(id)ok;
-(void)onPreEnterWechatDone;
-(void)removeConfirmView;
-(void)jumpToMessageContentViewAndConfirm;
-(void)createConfirmView;
-(void)clearAllHandle;
-(void)cancelAllHandle;
-(void)cancelGotAppMsg;
-(void)onGotAppMsg:(id)msg withData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface SendAppMsgHandler : MMObject <SessionSelectControllerDelegate, ShareMessageConfirmLogicHelperDelegate, UIAlertViewDelegate, IPreEnterWechatLogicExt> {
	NSString* m_nsAppid;
	AppCommunicateData* m_appData;
	CMessageWrap* m_messageWrap;
	UINavigationController* m_sessionSelectViewController;
	ShareMessageConfirmLogicHelper* m_helper;
	CContact* m_oContact;
	UIAlertView* m_alertView;
	BOOL m_bIsHiddenTarBar;
	MMDelegateProxy<SendAppMsgHandleDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<SendAppMsgHandleDelegate>* m_delegate;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showAlertView;
-(void)OnStayAtWeChat:(id)weChat;
-(void)OnBackTo3rdApp:(id)a3rdApp;
-(void)OnSendMessageCancel:(id)cancel;
-(void)OnSendMessageFail:(id)fail WithError:(int)error;
-(void)OnSendMessageOK:(id)ok;
-(void)asyncNotifySendAppMsgOk;
-(void)getCustomConfirmViewWithShakeMusic;
-(void)getCustomConfirmView;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)onPreEnterWechatDone;
-(void)removeConfirmView;
-(void)removeSelectSessionView;
-(void)createConfirmViewWithShakeMusic;
-(void)createConfirmView;
-(void)createSelectSessionViewWithShakeMusic;
-(void)createSelectSessionView;
-(void)clearAllHandleAndReturn3rdApp:(BOOL)app;
-(void)cancelAllHandleAndReturn3rdApp;
-(void)clearAllHandle;
-(void)cancelAllHandle;
-(void)cancelSendAppMsg;
-(void)sendAppMsg:(id)msg;
-(void)sendAppMsg:(id)msg withData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface SendAppMsgToWCHandler : MMObject <ShareUploadTaskConfirmLogicHelperDelegate, UIAlertViewDelegate, IPreEnterWechatLogicExt> {
	NSString* _appId;
	AppCommunicateData* _appData;
	ShareUploadTaskConfirmLogicHelper* _shareHelper;
	UIAlertView* _alertView;
}
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showAlertView;
-(void)OnSendUploadTaskCancel:(id)cancel;
-(void)OnSendUploadTaskOK:(id)ok;
-(void)onPreEnterWechatDone;
-(void)sendTimeLineWithComunicateData:(id)comunicateData;
-(id)sendTimeLine3rdAppWithComunicateData:(id)comunicateData;
-(id)sendTimeLineFeedWithComunicateData:(id)comunicateData;
-(id)sendTimeLineVideoWithComunicateData:(id)comunicateData;
-(id)sendTimeLineMusicWithComunicateData:(id)comunicateData;
-(id)sendTimeLinePhotoWithComunicateData:(id)comunicateData;
-(id)sendTimeLineTextWithComunicateData:(id)comunicateData;
-(void)removeConfirmView;
-(void)clearAllHandleAndReturn3rdApp:(BOOL)app;
-(void)cancelAllHandleAndReturn3rdApp;
-(void)clearAllHandle;
-(void)cancelAllHandle;
-(void)cancelSendAppMsgToWC;
-(void)sendAppMsgToWC:(id)wc withData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface SendFileMsgHandler : MMObject <SessionSelectControllerDelegate, ShareMessageConfirmLogicHelperDelegate, IPreEnterWechatLogicExt> {
	NSString* m_nsAppid;
	AppCommunicateData* m_appData;
	UINavigationController* m_sessionSelectViewController;
	ShareMessageConfirmLogicHelper* m_helper;
	CContact* m_oContact;
}
-(void)OnSendMessageCancel:(id)cancel;
-(void)OnSendMessageOK:(id)ok;
-(void)getCustomConfirmView;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)jumpToMessageContentViewAndConfirm;
-(void)removeConfirmView;
-(void)removeSelectSessionView;
-(void)createConfirmView;
-(void)createSelectSessionView;
-(void)clearAllHandle;
-(void)cancelAllHandle;
-(void)onPreEnterWechatDone;
-(void)cancelSendFileMsg;
-(void)sendFileMsg:(id)msg withData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface WechatConnectHandler : MMObject <IAppDataExt, MMWebViewDelegate, MMKernelExt, IPreEnterWechatLogicExt> {
	NSString* m_nsAppid;
	AppCommunicateData* m_appData;
	UINavigationController* m_oAuthViewController;
	BOOL m_isDoing;
}
-(void)onPostQuit;
-(void)onPreQuit;
-(void)onKickQuit;
-(void)OnGotListAppSettingItem:(id)item errType:(int)type;
-(id)webViewFailToLoad:(id)load;
-(void)onWebViewDidFinishLoad:(id)onWebView;
-(void)onWebViewDidStartLoad:(id)onWebView;
-(void)OnOAuthCancel;
-(void)onPreEnterWechatDone;
-(void)removeOAuthView;
-(void)onRetry:(id)retry;
-(void)createOAuthView;
-(void)cancelAllHandleAndReturn3rdApp;
-(void)clearAllHandle;
-(void)cancelAllHandle;
-(void)cancelWechatConnect;
-(void)startWechatConnect:(id)connect withData:(id)data;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
@end

@interface AppDataMgr : MMService <MMService, PBMessageObserverDelegate, MMKernelExt> {
	BOOL _appDataChecked;
	BOOL _appSettingLoaded;
	NSMutableDictionary* _appSettingMap;
	NSMutableArray* _aryAuthApp;
	BOOL _aryAuthAppLoaded;
	NSMutableArray* _aryAppPersonalInfo;
	BOOL _aryAppPersonalInfoLoader;
	BOOL _appResisterInfoLoaded;
	BOOL _newAppStatus;
	NSMutableArray* _aryInstalledApp;
	NSMutableArray* _aryReceivedApp;
	NSMutableArray* _aryBuiltInApp;
	RecommendAppsLogicImpl* _rcmAppsLogicImpl;
	NSMutableArray* _getAppInfoRunningQueue;
	NSMutableArray* _getAppInfoWaitingQueue;
	BOOL _bGetAppInfoListRunning;
	AppIconItem* _updateAppIconRunningItem;
	NSMutableArray* _updateAppIconWaitingQueue;
	BOOL _bUpdateAppIconRunning;
	BOOL _hasMoveFinished;
	NSMutableDictionary* _dictInnerJumpAppIdType;
	NSMutableDictionary* _dictInnerJumpTypeAppId;
}
@property(retain, nonatomic) NSMutableDictionary* appSettingMap;
-(void)onServiceReloadData;
-(void)onPreQuit;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)structCGI:(id)cgi withType:(unsigned long)type;
-(void)updateAppSettingItemList:(id)list;
-(BOOL)makeUrlRequst:(id)requst userData:(id)data cdn:(BOOL)cdn;
-(void)handleGetWatermark:(id)watermark;
-(void)handleGetIcon:(id)icon;
-(void)handleGetAppInfoList:(id)list;
-(id)updateValue:(id)value newValue:(id)value2;
-(BOOL)updateAppWatermark:(id)watermark;
-(BOOL)updateAppIcon:(id)icon;
-(void)saveAppInfo:(id)info;
-(id)getInstalledAppInfo:(id)info;
-(BOOL)checkAndSaveIcon:(id)icon appID:(id)anId;
-(BOOL)checkRegisterInfo:(id)info;
-(void)refreshAppInfoLastUpdateTimeForNewUser;
-(BOOL)loadAppRegisterInfo;
-(void)trimAppRegisterInfo:(id)info;
-(void)saveAppRegisterInfo;
-(id)getRegisterDictionary;
-(id)dictionaryToAppRegisterInfo:(id)appRegisterInfo;
-(id)getRegisterPasteboardName;
-(id)GetPathOfAppWatermark:(id)appWatermark;
-(id)GetPathOfAppIcon:(id)appIcon;
-(BOOL)setSDKVersion;
-(void)saveAppPersonalInfo;
-(BOOL)loadAppPersonalInfo;
-(void)saveAuthAppInfo;
-(BOOL)loadAuthAppInfo;
-(id)getPersonalInfoWithAppID:(id)appID;
-(void)handleGetAppPersonalInfoList:(id)list;
-(void)handleGetAuthAppList:(id)list;
-(id)getAuthAppList;
-(void)filterUnInstalledApp;
-(BOOL)UpdateAuthAppList:(int)list;
-(BOOL)removeAppByUser:(id)user;
-(BOOL)addAppByUser:(id)user;
-(BOOL)forceUpdateBizAppInfo:(id)info;
-(void)forceUpdateBizAppInfoWithAppIDList:(id)appIDList;
-(void)forceUpdateAppInfo:(id)info;
-(void)updateAppInfo:(id)info appInfoVer:(unsigned long)ver isForceUpdate:(BOOL)update;
-(void)clearGetAppInfoListRunningQueue;
-(void)checkGetAppInfoListWaitingQueue;
-(void)addGetAppInfoListQueue:(id)queue;
-(BOOL)checkUpdateAppIconWaitingQueue;
-(BOOL)addUpdateAppIconQueue:(id)queue appID:(id)anId cmd:(id)cmd;
-(void)updateAppTypeList:(id)list appTypeList:(id)list2;
-(void)updateBizAppInfoWithGameCenter;
-(void)updateBizAppInfoWithAddByUser;
-(id)getAppRegisterInfo:(id)info;
-(id)mergeBuiltInAppInfo:(id)appInfo;
-(id)mergeValue:(id)value newValue:(id)value2;
-(BOOL)compareAppID:(id)anId withOtherAppID:(id)otherAppID;
-(id)getAppWatermark:(id)watermark;
-(id)getRecommendAppIcon:(id)icon IconUrl:(id)url;
-(id)getAppIcon:(id)icon;
-(BOOL)receiveAppInfoFromMsg:(id)msg name:(id)name version:(int)version isForceUpdate:(BOOL)update;
-(id)getShowGameCenterArray;
-(id)getGameInstalledArray;
-(id)getAppInstalledArray;
-(void)updateRecommendAppArray;
-(id)getRecommendAppArray;
-(id)getGeneralAppInstalledArray;
-(void)addInstalledAppInfoByAppID:(id)anId appName:(id)name appIconUrl:(id)url;
-(void)addAppByUserMoveToAppSetting;
-(BOOL)isAppDataChecked;
-(BOOL)checkAndUpdateAppData;
-(BOOL)checkAndUpdateAppDataForiOS7Plus:(id)plus forceUpdate:(BOOL)update;
-(void)saveAppSetting;
-(BOOL)loadAppSetting;
-(void)handleSetAppSetting:(id)setting;
-(void)handleGetAppSetting:(id)setting;
-(BOOL)SetAppSetting:(id)setting setCmdID:(int)anId setCmdValue:(id)value;
-(BOOL)UpdateAppPersonalInfoList:(id)list;
-(BOOL)UpdateBatchAppSettingItem:(id)item;
-(void)onAuthOK;
-(void)doUpdateAppSettingItem;
-(void)setAppSettingFlag:(unsigned long)flag withAppID:(id)appID;
-(void)UpdateAppRecvMsgState:(id)state isRecvMsg:(BOOL)msg;
-(void)UpdateAppAuthState:(id)state isAuth:(BOOL)auth;
-(BOOL)UpdateAppSettingItem:(id)item;
-(void)updateAppAddedByUser:(id)user :(BOOL)arg2;
-(void)updateAppSettingFlag:(id)flag;
-(void)setShowNewInGameCenter:(id)gameCenter withCanShow:(BOOL)canShow;
-(BOOL)isShowNewInGameCenter:(id)gameCenter;
-(BOOL)isGeneralApp:(id)app;
-(BOOL)isGame:(id)game;
-(BOOL)isNeedDetectRequetURL:(id)url;
-(BOOL)isCanForward:(id)forward;
-(BOOL)isAppAddedByUser:(id)user;
-(id)getOpenID:(id)anId;
-(BOOL)isOpenIDExist:(id)exist;
-(BOOL)isRecvMsg:(id)msg;
-(BOOL)isAppSettingExist:(id)exist;
-(void)loadNewAppStatus;
-(void)saveNewAppStatus;
-(void)setNewAppStatus:(BOOL)status;
-(BOOL)getNewAppStatus;
-(BOOL)writeToFile:(id)file data:(id)data;
-(void)mergeBuiltInAppList;
-(id)getAppIdWithFuncType:(int)funcType;
-(int)getFuncTypeWithAppId:(id)appId;
-(void)initInnerJumpDict;
-(void)dealloc;
-(id)init;
@end

@interface FavoritesDownloader : MMObject <ICdnComMgrExt> {
	FavoritesItem* _favItem;
	MMDelegateProxy<FavoritesDownloaderDelegate>* _delegate;
	int _runningState;
	FavoritesDownloadCDNInfo* _downloadingInfo;
	BOOL _isCanceled;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesDownloaderDelegate>* delegate;
-(void)OnCdnDownload:(id)download;
-(void)OnCdnDownloadProgress:(id)progress;
-(void)BroadcastDownloadFail:(int)fail;
-(void)tryStartNextData;
-(id)getItem;
-(BOOL)stop;
-(void)run;
-(void)dealloc;
-(id)initWithFavoritesItem:(id)favoritesItem;
@end

@interface FavoritesDownloadMgr : MMObject <CNetworkStatusExt, FavoritesDownloaderDelegate> {
	NSMutableArray* _downloadingQueue;
	NSMutableArray* _failQueue;
	NSMutableArray* _activeQueue;
	BOOL _isDownloading;
	FavoritesItemDB* _favItemDB;
	FavoritesDownloadCDNInfoDB* _favCdnDB;
	FavoritesDownloader* _favDownloader;
	MMDelegateProxy<FavoritesDownloadMgrDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesDownloadMgrDelegate>* delegate;
-(void)ReachabilityChange:(unsigned long)change;
-(void)onDownloadFavItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onDownloadFail:(id)fail ErrCode:(int)code;
-(void)onDownloadFinished:(id)finished;
-(id)getDownloadPausedItemList;
-(id)getDownloadingItemList;
-(void)changeToNoWifi;
-(BOOL)pauseDownloadFavoritesItem:(unsigned long)item;
-(BOOL)startDownloadItem:(id)item IsPriority:(BOOL)priority;
-(BOOL)deleteDownloadCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(BOOL)updateDownloadCdnInfo:(id)info;
-(void)TryStartDownload;
-(void)checkAndTryStartDownload;
-(id)getNextDownloadCdnInfoByLocalItemId:(unsigned long)anId;
-(void)setItemDownloadFail:(id)fail ErrCode:(int)code;
-(BOOL)delDownloadItem:(id)item;
-(BOOL)addDownloadItem:(id)item;
-(BOOL)loadFailedQueue;
-(BOOL)loadDownloadingQueue;
-(void)dealloc;
-(void)initDB:(id)db;
-(id)init;
@end

@interface WCOfflinePayEnableResultViewController : WCOfflinePayBaseViewController {
	MMDelegateProxy<WCOfflinePayEnableResultViewControllerDelegate>* m_delegate;
}
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)initView;
-(void)OnReturn;
-(void)dealloc;
@end

@interface CleanTaskInfo : NSObject {
	NSString* _fileDirPath;
	unsigned long _readWriteInterval;
}
@property(assign, nonatomic) unsigned long readWriteInterval;
@property(retain, nonatomic) NSString* fileDirPath;
-(void)dealloc;
-(id)init;
@end

@interface CleanCacheService : MMService <MMService, IAppTrafficExt> {
	NSMutableArray* _arrDoneTask;
	NSMutableArray* _arrWaitTask;
	CleanTaskInfo* _curTaskInfo;
	NSMutableArray* _arrSubFolderName;
	NSMutableArray* _arrSubFileName;
	NSThread* _taskThread;
	NSRecursiveLock* _lock;
	int _runStatus;
	unsigned long _cleanedTotalSize;
	unsigned long _receivedTotalSize;
}
+(int)randomIndex:(unsigned)index;
-(void)onReceiveDataLen:(unsigned long)len;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceEnterForeground;
-(void)dealloc;
-(id)init;
-(void)forceStop;
-(void)asyncPause;
-(void)asyncStart;
-(void)start;
-(void)threadFunc;
-(BOOL)shouldDeletePath:(id)path;
-(void)reportCleanPerformance;
-(void)addAutoCleanTask:(id)task;
-(BOOL)canAddTask:(id)task;
@end

@interface DeletePathService : MMService <MMService> {
	NSMutableArray* _arrSubFolderName;
	NSMutableArray* _arrSubFileName;
	NSThread* _taskThread;
	NSRecursiveLock* _lock;
	int _runStatus;
}
-(void)onServiceTerminate;
-(void)onServiceEnterForeground;
-(void)onServiceEnterBackground;
-(void)dealloc;
-(void)onServiceInit;
-(id)init;
-(void)forceStop;
-(void)asyncPause;
-(void)asyncStart;
-(void)start;
-(void)threadFunc;
@end

@interface FavoritesDownloadCDNInfoDB : NSObject {
	MyFavoritesDB* _mmDB;
}
-(BOOL)deleteDownloadCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(id)getDownloadCdnInfoByLocalItemDataId:(id)anId andType:(int)type;
-(BOOL)updateDownloadCdnInfo:(id)info;
-(id)getNextDownloadCdnInfoByLocalItemId:(unsigned long)anId;
-(BOOL)GetFavoritesDownloadCDNInfoValue:(id)value dicInfo:(id)info;
-(void)initUpdateArray:(id)array ByFavoritesDownloadCDNInfo:(id)info;
-(BOOL)addDownloadCDNInfo:(id)info;
-(void)initDB:(id)db;
-(void)initQueryArray:(id)array;
-(void)dealloc;
-(id)init;
@end

@interface OCRTransScanner : MMObject <IOCRTransMgrExt, CameraScannerViewDelegate> {
	CGRect _cropRect;
	int _imageType;
	id<OCRTransScannerDelegate> _delegate;
	unsigned _sessionId;
	UploadDetectLogic* _uploadDetectLogic;
	BOOL _enableUpload;
	char* _sendImage;
}
@property(assign, nonatomic) unsigned sessionId;
@property(assign, nonatomic) id<OCRTransScannerDelegate> delegate;
@property(assign, nonatomic) CGRect cropRect;
-(id).cxx_construct;
-(void)OnSendOCRImage:(id)image Err:(int)err;
-(void)notifySendDataLength:(id)length;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)enableUpload:(BOOL)upload;
-(void)stop;
-(void)start;
-(void)dealloc;
-(id)init;
@end

@interface OCRTransLogicController : BaseScanLogicController <OCRTransScannerDelegate> {
	OCRTransScanner* _scanner;
	NSString* _orign;
	NSString* _translation;
}
-(void)onSendDataLength:(unsigned)length;
-(void)onOCRTransError:(int)error;
-(void)onGotOCRResultOrign:(id)orign Translation:(id)translation;
-(BOOL)shouldStartScanAnimation;
-(id)getDescriptionText;
-(float)getDescriptionLabelTopPadding;
-(id)getInfoLabelColor;
-(id)getInfoLabelFont;
-(float)getInfoLabelTopPadding;
-(id)getInfoText;
-(CGRect)getDrawCropRect;
-(void)stopScan;
-(void)startScan;
-(void)dealloc;
-(id)init;
@end

@interface WeChatPayHandler : NSObject <IPreEnterWechatLogicExt, UIAlertViewDelegate> {
	NSString* m_nsAppID;
	NSURL* m_nsAppUrl;
}
-(void)createWeChatePay;
-(id)parseURLParams:(id)params;
-(void)onPreEnterWechatDone;
-(void)cancelWeChatPay;
-(void)startWeChatPay:(id)pay payInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface MusicSearchMgr : MMService <MMService, AQAudioRecorderDelegate, UploadMusicFPMgrDelegate> {
	timeval _startTime;
	unsigned long _curSessionId;
	AQAudioRecorder* _recoder;
	UploadMusicFPMgr* _uploadMgr;
}
-(id).cxx_construct;
-(void)OnNetworkError:(unsigned long)error;
-(void)OnGetMusicItem:(id)item Offset:(float)offset FPId:(unsigned long)anId;
-(void)OnAQPart:(id)part Duration:(float)duration EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnAQEndRecording:(id)recording;
-(void)OnAQBeginRecording:(id)recording ErrNo:(int)no;
-(BOOL)StopSearch:(unsigned long)search;
-(BOOL)StopRecord:(unsigned long)record;
-(int)StartSearch;
-(void)dealloc;
-(id)init;
@end

@interface AFPQueueItem : NSObject {
	unsigned long FPId;
	float duration;
	unsigned long endflag;
	unsigned long trycount;
}
@property(assign, nonatomic) unsigned long trycount;
@property(assign, nonatomic) unsigned long endflag;
@property(assign, nonatomic) float duration;
@property(assign, nonatomic) unsigned long FPId;
@end

@interface UploadAFPMgr : MMObject <PBMessageObserverDelegate> {
	unsigned long _curFPId;
	BOOL _isUploading;
	BOOL _isEnd;
	NSMutableArray* _uploadQueue;
	int _eventType;
	MMDelegateProxy* _delegate;
	NSTimer* checkUploadQueueTimer;
}
@property(retain, nonatomic) NSTimer* checkUploadQueueTimer;
@property(assign, nonatomic) MMDelegateProxy* delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)isNeedUploadForDuration:(float)duration;
-(void)checkUploadQueue;
-(void)stopUploadTaskWithErr:(int)err;
-(void)stopUploadTask;
-(void)SendFPData:(id)data FPId:(unsigned long)anId Duration:(float)duration EndFlag:(unsigned long)flag;
-(void)AddNewPart:(unsigned long)part Duration:(float)duration EndFlag:(unsigned long)flag;
-(void)MainUpdateQueue:(id)queue;
-(void)Stop;
-(void)Start:(unsigned long)start;
-(void)dealloc;
-(id)init;
-(void)doUpload:(unsigned long)upload Duration:(float)duration EndFlag:(unsigned long)flag;
@end

@interface ShakeUserItem : NSObject <PBCoding, NSCoding, NSCopying> {
	NSString* nickname;
	NSString* username;
}
@property(retain, nonatomic) NSString* username;
@property(retain, nonatomic) NSString* nickname;
+(void)initialize;
+(void)_initPBTableOfShakeUserItem;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakeUrlItem : NSObject <PBCoding, NSCoding, NSCopying> {
	NSString* title;
	NSString* link;
	NSString* thumbUrl;
}
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* link;
@property(retain, nonatomic) NSString* title;
+(void)initialize;
+(void)_initPBTableOfShakeUrlItem;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakeTvActionItem : NSObject <PBCoding, NSCoding, NSCopying> {
	int actionType;
	NSString* actionThumbUrl;
	NSString* name;
	NSString* desc;
	NSString* link;
	NSDate* expire;
	NSString* username;
	NSString* nickname;
}
@property(retain, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* username;
@property(retain, nonatomic) NSDate* expire;
@property(retain, nonatomic) NSString* link;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* actionThumbUrl;
@property(assign, nonatomic) int actionType;
+(void)initialize;
+(void)_initPBTableOfShakeTvActionItem;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakeTvItem : NSObject <PBCoding, NSCoding, NSCopying> {
	NSString* title;
	NSString* subTitle;
	NSString* source;
	NSString* thumbUrl;
	NSString* playUrl;
	NSString* shareUrl;
	NSString* appUrl;
	NSMutableArray* descActions;
	NSMutableArray* tableActions;
	NSString* appStoreUrl;
}
@property(retain, nonatomic) NSString* appStoreUrl;
@property(retain, nonatomic) NSMutableArray* tableActions;
@property(retain, nonatomic) NSMutableArray* descActions;
@property(retain, nonatomic) NSString* appUrl;
@property(retain, nonatomic) NSString* shareUrl;
@property(retain, nonatomic) NSString* playUrl;
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* source;
@property(retain, nonatomic) NSString* subTitle;
@property(retain, nonatomic) NSString* title;
+(void)initialize;
+(void)_initPBTableOfShakeTvItem;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakeItemBase : NSObject <PBCoding, NSCoding, NSCopying> {
	int itemType;
	unsigned createTime;
	ShakeTvItem* shakeTvItem;
	ShakeUrlItem* shakeUrlItem;
	ShakeUserItem* shakeUsrItem;
}
@property(retain, nonatomic) ShakeUserItem* shakeUsrItem;
@property(retain, nonatomic) ShakeUrlItem* shakeUrlItem;
@property(retain, nonatomic) ShakeTvItem* shakeTvItem;
@property(assign, nonatomic) unsigned createTime;
@property(assign, nonatomic) int itemType;
+(id)getShakeItemFromXml:(id)xml andType:(int)type;
+(void)initialize;
+(void)_initPBTableOfShakeItemBase;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ShakeTvStorage : NSObject <PBCoding, NSCoding, NSCopying> {
	NSMutableArray* items;
	int newCount;
}
@property(assign, nonatomic) int newCount;
@property(retain, nonatomic) NSMutableArray* items;
+(void)initialize;
+(void)_initPBTableOfShakeTvStorage;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(id)copyWithZone:(NSZone*)zone;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface UploadMusicFPMgr : UploadAFPMgr {
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)SendFPData:(id)data FPId:(unsigned long)anId Duration:(float)duration EndFlag:(unsigned long)flag;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface EmojiEncodeViewController : MMUIViewController <UIActionSheetDelegate> {
	UITextView* textView;
}
-(void)OnXXX;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)OnOperate;
-(void)initView;
-(void)initData;
@end

@interface QQMailLogSender : NSObject <IQQMailExt> {
	UIWindow* _window;
}
+(id)sharedInstance;
-(void)OnViewImage:(id)image ErrNo:(int)no;
-(void)OnViewCompress:(id)compress ErrNo:(int)no;
-(void)OnSetMailUnread:(int)unread;
-(void)OnGetMail:(id)mail ErrNo:(int)no;
-(void)OnGetAllMailContact:(id)contact ErrNo:(int)no;
-(void)OnComposeSend:(int)send;
-(void)OnUploadData:(id)data filename:(id)filename ErrNo:(int)no;
-(id)getSelfMailContact;
-(void)dealloc;
-(void)startSendLog;
-(void)onError;
-(void)onSuccess;
-(void)killQQMailLogSender;
@end

@interface WCBizInfoGroup : NSObject {
	NSMutableArray* m_arrayItem;
	NSString* m_error;
	NSString* m_footerTip;
	NSString* m_headerTip;
	UILabel* m_tipLabel;
}
@property(retain, nonatomic) NSString* m_headerTip;
@property(retain, nonatomic) NSString* m_footerTip;
@property(retain, nonatomic) NSString* m_error;
@property(retain, nonatomic) NSArray* m_arrayItem;
-(id)getTipLabel;
-(void)addItem:(id)item;
-(void)setError:(id)error;
-(void)dealloc;
-(id)initWithFooterTip:(id)footerTip headerTip:(id)tip error:(id)error;
@end

@interface WCBizPickerView : MMUIActionSheet {
	UIPickerView* m_pickerView;
	MMDelegateProxy<WCBizPickerViewDelegate>* m_delegate;
}
-(void)reloadComponent:(int)component;
-(void)setSelectedRow:(int)row Component:(int)component;
-(void)UIPickerViewDidFinish;
-(void)UIPickerViewDidCancel;
-(void)showInView:(id)view;
-(void)dealloc;
-(void)removeAllPickerViewDelegate;
-(id)initWithDelegate:(id)delegate;
@end

@interface WCBizTipView : UIView <ILinkEventExt> {
	NSString* _title;
	NSString* _content;
	NSString* _imageName;
	UIImageView* _backgroundView;
	UIImageView* contentImageView;
	RichTextView* richTextView;
	id<WCBizTipViewDelegate> m_delegate;
}
@property(assign, nonatomic) id<WCBizTipViewDelegate> m_delegate;
-(id)getContentImageView;
-(void)onCloseIntroView;
-(void)dealloc;
-(void)showAnimation;
-(void)initView;
-(id)initWithFrame:(CGRect)frame andTittle:(id)tittle andContent:(id)content andImage:(id)image;
@end

@interface WCBizBaseViewController : MMUIViewController <MMTableViewInfoDelegate, WCBaseInfoItemDelegate, UIAlertViewDelegate> {
	MMTableViewInfo* m_tableViewInfo;
	UILabel* m_powerByTenpay;
}
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showEnsureAlert:(id)alert Title:(id)title;
-(void)OnComfireEnsureAlert;
-(id)getSectionFromGroup:(id)group;
-(id)makeFooter:(id)footer;
-(void)clickInfoCell:(id)cell;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)OnDataChange;
-(void)dealloc;
-(void)setTitle:(id)title;
-(void)setWCBizAuthTitle:(id)title;
-(void)viewDidLoad;
-(void)addPowerByTenpayTip;
-(void)initView;
-(void)callViewDidLoad;
-(void)initNavigationBar;
-(void)OnBack;
-(void)initData;
@end

@interface WCBizUtil : NSObject {
}
+(BOOL)isDomesticOrderWithMulitOrderDetail:(id)mulitOrderDetail;
+(BOOL)isDomesticUserWithCardUserFlag:(unsigned long)cardUserFlag;
+(BOOL)isOverseasUserWithCardUserFlag:(unsigned long)cardUserFlag;
+(BOOL)isDomesticCardWithCardBankTag:(unsigned long)cardBankTag;
+(BOOL)isOverseasCardWithCardBankTag:(unsigned long)cardBankTag;
+(unsigned long)differntCharactorCountCompareString:(id)string WithOriginalString:(id)originalString;
+(id)getAddressBookTelphoneNumberDictionary;
+(id)validWCMallPhoneNumber:(id)number;
+(id)dictionaryWithDecodedComponets:(id)decodedComponets separator:(id)separator;
+(id)stringWithFormEncodedComponentsAscending:(id)formEncodedComponentsAscending ascending:(BOOL)ascending skipempty:(BOOL)skipempty separator:(id)separator;
+(id)getWCBizAuthTitle:(id)title MaxWidth:(float)width;
+(id)getWCBizAuthTitle:(id)title LandscapeMode:(BOOL)mode MaxWidth:(float)width;
+(id)getSaveStyleBarItemTitle:(id)title target:(id)target sel:(SEL)sel;
+(id)getWCMallFunctionListPath;
+(id)getWCPayServerDynamicWordingPath;
+(id)getWCAddressStageDataFilePath;
+(id)getWCMallShowedInActivityCellProductId;
+(id)getWCMallShowedProductId;
+(id)getWCMallShowedRedCodePath;
+(id)getWCMallShowedNewPath;
+(id)getWCMallTicketsListPath;
+(id)getWCMallTelephoneDictionaryPath;
+(id)getWCMallTelephoneListPath;
+(id)getWCAddressFilePath;
+(id)getWCPayUserInfoPath;
+(id)getWCPayPayCardListPath;
+(BOOL)isBindCardInfoFull:(id)full;
+(id)getHeaderTipView:(id)view;
+(id)getHeaderErrorTipView:(id)view;
+(float)getFooterTipViewHeight:(id)height;
+(id)getFooterTipView:(id)view;
+(id)getFooterErrorTipView:(id)view;
+(id)getStringFromBindCardInfo:(id)bindCardInfo;
+(id)getCardTypeName:(id)name;
@end

@interface WCOfflinePayPayMoneyLogic : WCOfflinePayControlLogic <WCOfflinePayQRCodePayViewControllerDelegate> {
}
-(void)OnWCOfflinePayQRCodePayViewControllerBack;
-(void)startLogic;
@end

@interface WCPayAddPayCardLogic : WCPayControlLogic <WCPayFillCardInfoViewControllerDelegate, WCPayFillCardNumberViewControllerDelegate, WCPayPayPwdViewControllerDelegate, WCPayVerifyPayCardViewControllerDelegate, WCPayPayPwdViewControllerDelegate, WCPayTenpayImportCardInfoViewControllerDelegate> {
	int m_uiLogicFinishedStatus;
	int m_uiWCPayAddPayCardLogicScene;
}
@property(assign, nonatomic) int m_uiWCPayAddPayCardLogicScene;
-(void)EndWCPayAddPayCardLogic;
-(void)OnHandleVerifiedSMSString:(id)string;
-(void)OnSetWCPayPasswordInBind:(id)bind;
-(void)OnBindCardVerifySMS:(id)sms Error:(id)error;
-(void)OnBindCardVerifyCard:(id)card Error:(id)error;
-(void)OnGetAvailableBank:(id)bank Error:(id)error;
-(void)OnGetBindingCardBin:(id)bin Error:(id)error;
-(void)OnPayPasswordError:(id)error ErrorCount:(int)count LockTotalCount:(unsigned long)count3;
-(void)OnVerifyPayPassword:(id)password;
-(void)OnGetPayCardList:(id)list UsrVerifiedInfo:(id)info Error:(id)error;
-(void)OnTenpayImportBindQuery:(id)query AppInfo:(id)info UsrVerifiedInfo:(id)info3 Error:(id)error;
-(void)onErrorAlertViewDismiss:(id)dismiss;
-(void)stopLogicToMyPayCardView;
-(void)stopLogicToRefreshPayCardList;
-(void)PayPwdRightActionBack;
-(void)PayPwdBack;
-(void)SetPayPwdNext:(id)next;
-(void)VerifyPayCardAgain:(id)again;
-(void)VerifyPayCardNext:(id)next;
-(void)VerifyPayCardBack;
-(void)WCPayTenpayImportCardInfoViewControllerReadAgreement;
-(void)WCPayTenpayImportCardInfoViewControllerNext;
-(void)WCPayTenpayImportCardInfoViewControllerCancel;
-(void)FillCardInfoReadAgreement;
-(void)FillCardInfoNext:(id)next;
-(id)getWCPayBindInfo:(id)info;
-(void)FillCardInfoCancel;
-(void)FillCardNumberNext:(id)next;
-(void)FillCardNumberCancel:(BOOL)cancel;
-(void)VerifyPayPwdNext:(id)next;
-(void)OnAlertGiveUpLogic;
-(void)showGiveUpLogicAlert;
-(void)startAddCardLogic;
-(void)startTenpayImportCardLogic;
-(void)stopLogic;
-(void)startLogic;
-(id)initWithData:(id)data;
@end

@interface WCPayControlData : NSObject {
	NSString* nsCardHodlerName;
	NSString* nsCardHodlerCredit;
	NSString* nsCardHodlerIdentifyCard;
	NSString* nsCardNumber;
	NSString* nsPhoneNumber;
	NSString* nsResetPhoneNumber;
	NSString* nsResetCVVCode;
	NSString* nsCVVCode;
	NSString* nsResetValidDate;
	NSString* nsValidDate;
	NSString* nsPhoneVerifyCode;
	NSString* nsMainCardSerial;
	NSString* nsOrderID;
	NSString* nsUUID;
	NSString* nsImportCode;
	NSString* nsProductsID;
	NSString* nsPayPasswd;
	NSString* nsRepeatPayPasswd;
	unsigned long uiFlag;
	NSString* nsVerifiedPasswd;
	NSString* nsBindSerial;
	unsigned long uiPayScene;
	unsigned long uiBindScene;
	unsigned long uiJSApiPayScene;
	NSString* nsServiceAppID;
	NSString* nsServiceAppUserName;
	NSString* nsServiceAppName;
	NSString* nsServiceAppLogoUrl;
	NSString* nsServiceDetail;
	NSString* nsShareToFriendURL;
	NSString* nsPaidSuccessDetail;
	int uiServiceSubscribeStrategy;
	NSString* nsAppName;
	NSString* nsAppID;
	NSString* nsAppSource;
	WCPayAppAuthRequestStruct* structAppAuthRequest;
	WCPayBindUserInfo* bindUserInfo;
	unsigned long uiCardBankTag;
	NSString* nsWCLanguage;
	NSString* nsFirstName;
	NSString* nsLastName;
	NSString* nsCountry;
	NSString* nsArea;
	NSString* nsCity;
	NSString* nsAddress;
	NSString* nsPhoneNumber_Overseas;
	NSString* nsZipCode;
	NSString* nsEmail;
	NSString* m_nsToken;
	NSArray* m_arrBindedCard;
	NSArray* m_arrTenpayImportBindCard;
	TenpayBindCardInfo* m_structSelectedTenpayBindCardInfo;
	TenpayBindCardSubscribeAppInfo* m_structSelectedTenpayBindCardSubscribeAppInfo;
	WCPayBindCardInfo* m_structSelectedCardInfo;
	WCPayCardBinInfo* m_structSelectedCardType;
	WCPayUserInfo* m_structUserInfo;
	WCPayIAPOrderDetail* m_structIAPOrderDetail;
	WCPayMultiOrderDetail* m_structOrderDetail;
	NSArray* m_arrAvailableBank;
	NSString* m_nsSalt;
	WCPayAuthenticationPay* m_structAuthenticationPay;
	WCPayAuthenticationPayVerifySMSStruct* m_structAuthenticationPayVerifySMS;
	WCPayResetPasswordInfo* m_structResetPayPasswordInfo;
	WCPayBindInfo* m_structBindInfo;
	NSMutableArray* m_arrStatusChangeOrderArray;
	NSMutableArray* m_arrOrderArray;
	WCPayAuthenticationPayStatusStruct* m_structAuthenticationPayStatus;
	NSDate* startPayDate;
	NSDate* startVerifySMSDate;
	BOOL bNeedGetSMSAgain;
}
@property(assign, nonatomic) BOOL bNeedGetSMSAgain;
@property(retain, nonatomic) NSDate* startVerifySMSDate;
@property(retain, nonatomic) NSDate* startPayDate;
@property(retain, nonatomic) WCPayAuthenticationPayStatusStruct* m_structAuthenticationPayStatus;
@property(retain, nonatomic) NSMutableArray* m_arrOrderArray;
@property(retain, nonatomic) NSMutableArray* m_arrStatusChangeOrderArray;
@property(retain, nonatomic) WCPayResetPasswordInfo* m_structResetPayPasswordInfo;
@property(retain, nonatomic) WCPayBindInfo* m_structBindInfo;
@property(retain, nonatomic) WCPayAuthenticationPayVerifySMSStruct* m_structAuthenticationPayVerifySMS;
@property(retain, nonatomic) WCPayAuthenticationPay* m_structAuthenticationPay;
@property(retain, nonatomic) NSString* m_nsSalt;
@property(retain, nonatomic) NSArray* m_arrAvailableBank;
@property(retain, nonatomic) WCPayMultiOrderDetail* m_structOrderDetail;
@property(retain, nonatomic) WCPayIAPOrderDetail* m_structIAPOrderDetail;
@property(retain, nonatomic) WCPayUserInfo* m_structUserInfo;
@property(retain, nonatomic) WCPayCardBinInfo* m_structSelectedCardType;
@property(retain, nonatomic) WCPayBindCardInfo* m_structSelectedCardInfo;
@property(retain, nonatomic) TenpayBindCardSubscribeAppInfo* m_structSelectedTenpayBindCardSubscribeAppInfo;
@property(retain, nonatomic) TenpayBindCardInfo* m_structSelectedTenpayBindCardInfo;
@property(retain, nonatomic) NSArray* m_arrTenpayImportBindCard;
@property(retain, nonatomic) NSArray* m_arrBindedCard;
@property(retain, nonatomic) NSString* m_nsToken;
@property(retain, nonatomic) NSString* nsEmail;
@property(retain, nonatomic) NSString* nsZipCode;
@property(retain, nonatomic) NSString* nsPhoneNumber_Overseas;
@property(retain, nonatomic) NSString* nsAddress;
@property(retain, nonatomic) NSString* nsCity;
@property(retain, nonatomic) NSString* nsArea;
@property(retain, nonatomic) NSString* nsCountry;
@property(retain, nonatomic) NSString* nsLastName;
@property(retain, nonatomic) NSString* nsFirstName;
@property(retain, nonatomic) NSString* nsWCLanguage;
@property(assign, nonatomic) unsigned long uiCardBankTag;
@property(retain, nonatomic) WCPayBindUserInfo* bindUserInfo;
@property(retain, nonatomic) WCPayAppAuthRequestStruct* structAppAuthRequest;
@property(retain, nonatomic) NSString* nsAppSource;
@property(retain, nonatomic) NSString* nsAppID;
@property(assign, nonatomic) int uiServiceSubscribeStrategy;
@property(retain, nonatomic) NSString* nsServiceAppLogoUrl;
@property(retain, nonatomic) NSString* nsAppName;
@property(assign, nonatomic) unsigned long uiJSApiPayScene;
@property(assign, nonatomic) unsigned long uiBindScene;
@property(assign, nonatomic) unsigned long uiPayScene;
@property(retain, nonatomic) NSString* nsVerifiedPasswd;
@property(assign, nonatomic) unsigned long uiFlag;
@property(retain, nonatomic) NSString* nsRepeatPayPasswd;
@property(retain, nonatomic) NSString* nsPayPasswd;
@property(retain, nonatomic) NSString* nsPaidSuccessDetail;
@property(retain, nonatomic) NSString* nsShareToFriendURL;
@property(retain, nonatomic) NSString* nsServiceDetail;
@property(retain, nonatomic) NSString* nsServiceAppUserName;
@property(retain, nonatomic) NSString* nsServiceAppName;
@property(retain, nonatomic) NSString* nsServiceAppID;
@property(retain, nonatomic) NSString* nsImportCode;
@property(retain, nonatomic) NSString* nsProductsID;
@property(retain, nonatomic) NSString* nsUUID;
@property(retain, nonatomic) NSString* nsOrderID;
@property(retain, nonatomic) NSString* nsMainCardSerial;
@property(retain, nonatomic) NSString* nsPhoneVerifyCode;
@property(retain, nonatomic) NSString* nsValidDate;
@property(retain, nonatomic) NSString* nsResetValidDate;
@property(retain, nonatomic) NSString* nsResetCVVCode;
@property(retain, nonatomic) NSString* nsCVVCode;
@property(retain, nonatomic) NSString* nsResetPhoneNumber;
@property(retain, nonatomic) NSString* nsPhoneNumber;
@property(retain, nonatomic) NSString* nsCardNumber;
@property(retain, nonatomic) NSString* nsCardHodlerIdentifyCard;
@property(retain, nonatomic) NSString* nsCardHodlerCredit;
@property(retain, nonatomic) NSString* nsCardHodlerName;
-(void)dealloc;
@end

@interface WCPayControlLogic : WCBizControlLogic <WCPayLogicMgrExt> {
	WCPayControlData* m_data;
}
-(void)OnWCPayBaseRequestNoKnownError:(id)error TenPayCmdType:(int)type;
-(void)onAlertResetPwd:(id)pwd;
-(void)OnPayPasswordError:(id)error ErrorCount:(int)count LockTotalCount:(unsigned long)count3;
-(void)onCannotToPay;
-(void)onBindNewCardToPay;
-(void)onPayPasswordErrorAlertViewDismiss:(id)dismiss;
-(void)onErrorAlertViewDismiss:(id)dismiss;
-(void)onErrorAlertViewStopLogic:(id)logic;
-(BOOL)onError:(id)error;
-(void)stopLogic;
-(void)pause;
-(void)resume;
-(void)dealloc;
-(id)initWithData:(id)data;
-(id)init;
@end

@interface WCPayControlMgr : WCBaseControlMgr <JSEventExt, WCPayOpenApiExt> {
}
-(unsigned long)startPaidSuccessLogic:(id)logic Data:(id)data IAPOrderDetail:(id)detail SituationType:(int)type;
-(unsigned long)startPayMoneyFromInnerPayLogic:(id)innerPayLogic RequestStruct:(id)aStruct ExtraInfo:(id)info;
-(void)jsGetBrandWCPayRequeset:(id)requeset;
-(void)OnWCPayOpenApi:(id)api withAppID:(id)appID;
-(unsigned long)startPayMoneyFromMallLogic:(id)mallLogic Data:(id)data ProductInfo:(id)info;
-(unsigned long)startPayMoneyFromBrandContactLocalViewLogic:(id)brandContactLocalViewLogic HandleURL:(id)url;
-(unsigned long)startPayMoneyFromBrandContactLocalViewLogic:(id)brandContactLocalViewLogic Data:(id)data HandleURL:(id)url;
-(unsigned long)startPayMoneyFromQRCodeLogic:(id)qrcodeLogic Data:(id)data;
-(unsigned long)startPayMoneyFromAppLogic:(id)appLogic info:(id)info appID:(id)anId;
-(unsigned long)startPayMoneyFromBrandContactJSApiLogic:(id)brandContactJSApiLogic jsEvent:(id)event;
-(unsigned long)startDisplayOrderHistoryLogic:(id)logic Data:(id)data;
-(unsigned long)startResetPayPwdLogic:(id)logic Data:(id)data;
-(unsigned long)startModifyPayPwdLogic:(id)logic Data:(id)data;
-(unsigned long)startUnbindLogic:(id)logic Data:(id)data;
-(unsigned long)startPayCardList:(id)list;
-(unsigned long)startPayMoneyLogic:(id)logic Data:(id)data;
-(unsigned long)startAddPayCardLogic:(id)logic Data:(id)data Scene:(int)scene;
-(unsigned long)startAddPayCardLogic:(id)logic Data:(id)data;
-(void)stopCurrentLogic;
-(unsigned long)startLogic:(id)logic;
-(BOOL)IsDoingWCPayLogic:(Class)logic;
-(void)dealloc;
-(id)init;
@end

@interface WCPayGetPayCardListLogic : WCPayControlLogic {
}
-(void)OnGetLocalPayCardList:(id)list UsrVerifiedInfo:(id)info;
-(void)OnGetPayCardList:(id)list UsrVerifiedInfo:(id)info Error:(id)error;
-(void)startLogic;
@end

@interface WCPayModifyPayPwdLogic : WCPayControlLogic <WCPayPayPwdViewControllerDelegate, WCPayPayPwdViewControllerDelegate> {
}
-(void)OnModifyWCPayPassword:(id)password NewWCPayPassword:(id)password2 Error:(id)error;
-(void)OnPayPasswordError:(id)error ErrorCount:(int)count LockTotalCount:(unsigned long)count3;
-(void)OnVerifyPayPassword:(id)password;
-(void)onErrorAlertViewDismiss:(id)dismiss;
-(void)BackToRootView;
-(void)PayPwdRightActionBack;
-(void)PayPwdBack;
-(void)SetPayPwdNext:(id)next;
-(void)VerifyPayPwdNext:(id)next;
-(void)OnAlertGiveUpLogic;
-(void)showGiveUpLogicAlert;
-(void)startLogic;
@end

@interface WCPayOrderHistoryLogic : WCPayControlLogic <WCPayLogicMgrExt, WCPayOrderHistoryViewControllerDelegate, WCPayOrderDetailHistoryViewControllerDelegate> {
	unsigned long offset;
	BOOL hasMoreOrder;
}
-(void)OnDelOrder:(id)order Error:(id)error;
-(void)OnDelAllOrder:(id)order;
-(void)OnGetHistoryIapOrderDetailInfo:(id)info Error:(id)error;
-(void)OnGetHistoryOrderDetailInfo:(id)info Error:(id)error;
-(void)OnGetOrderList:(id)list TotalCount:(unsigned long)count Error:(id)error;
-(void)OnClickedBrandAppUserName:(id)name NickName:(id)name2;
-(void)OnHistoryOrderDetailRightActionBack:(BOOL)back;
-(void)OnHistoryOrderDetailBack:(BOOL)back;
-(void)OnSelectedOrderDetail:(id)detail;
-(void)OnOrderListBack;
-(BOOL)HasMoreOrderList;
-(void)OnLoadMoreOrderList;
-(void)OnDelAllOrder;
-(void)OnDelOrder:(id)order;
-(void)startLogic;
@end

@interface WCPayPayMoneyFromAppLogic : WCPayControlLogic <WCBaseControlMgrExt> {
	NSDictionary* m_payInfo;
	NSString* m_appID;
	PayResp* m_resp;
	WCPayPayMoneyLogic* m_payLogic;
	BOOL m_bEndFlag;
	WCPayBaseViewController* rootViewController;
}
-(void)OnGetAppAuthUrlErrorRequest:(id)request;
-(void)OnGetAppAuthUrlRequest:(id)request AppSource:(id)source PrepayId:(id)anId;
-(void)onWCBaseLogicDidStop:(unsigned long)onWCBaseLogic;
-(void)onClearMyDelegate:(id)delegate forProtocol:(id)protocol;
-(void)stopLogic;
-(void)onErrorAlertViewStopLogic:(id)logic;
-(BOOL)gotoViewController:(id)controller;
-(void)startLogic;
-(void)dealloc;
-(id)initWithInfo:(id)info appID:(id)anId;
@end

@interface WCPayPayMoneyFromBrandContactJSApiLogic : WCPayControlLogic <WCBaseControlMgrExt, WCPayPayMoneyLogicDelegate> {
	JSEvent* m_jsEvent;
	NSString* m_stepInURL;
	NSString* m_stepAppUserName;
	WCPayPayMoneyLogic* m_payLogic;
	BOOL m_bEndFlag;
	BOOL m_bJSEventEnd;
}
-(void)OnGetGenPaypreErrorRequest:(id)request ErrorMsg:(id)msg;
-(void)OnGetGenPaypreRequest:(id)request SessionID:(id)anId AppSource:(id)source;
-(void)OnHandleErrorAlertClickedCancelBtnDown;
-(void)onWCBaseLogicDidStop:(unsigned long)onWCBaseLogic;
-(void)onErrorAlertViewStopLogic:(id)logic;
-(BOOL)gotoViewController:(id)controller;
-(void)startLogic;
-(void)stopForceRotationToPortrait;
-(void)startForceRotationToPortrait;
-(void)dealloc;
-(void)setExtraInfo:(id)info;
-(id)initWithJSEvent:(id)jsevent URL:(id)url BrandUserName:(id)name;
@end

@interface WCPayPayMoneyLogic : WCPayControlLogic <WCPayFillCardInfoViewControllerDelegate, WCPayFillCardNumberViewControllerDelegate, WCPayPayPwdViewControllerDelegate, WCPayVerifyPayCardViewControllerDelegate, WCPayPayPwdViewControllerDelegate, WCPayOrderDetailViewControllerDelegate, WCPayOrderDetailHistoryViewControllerDelegate, WCPayResetPhoneViewViewControllerDelegate, WCPayResetBindedCardInfoViewControllerDelegate, WCPayOrderPayConfirmViewDelegate, WCPayPayCardAvailableListViewControllerDelegate, WCPayOverseasCarTipDelegate> {
	MMDelegateProxy<WCPayPayMoneyLogicDelegate>* m_payMoneyLogicDelegate;
	WCPayOverseasCardTipView* m_overseasCardTipView;
	BOOL m_bNeedPreShowOrderDetailToGetPayCardList;
}
@property(assign, nonatomic) BOOL m_bNeedPreShowOrderDetailToGetPayCardList;
@property(assign, nonatomic) MMDelegateProxy<WCPayPayMoneyLogicDelegate>* m_payMoneyLogicDelegate;
-(void)OnHandleVerifiedSMSString:(id)string;
-(void)OnSetWCPayPasswordInPay:(id)pay Error:(id)error;
-(void)OnAuthenticationPayVerifySMS:(id)sms PayStatus:(id)status Error:(id)error;
-(void)OnHandleSpecialPayError:(id)error ErrorType:(unsigned long)type;
-(void)OnSelectOtherCardToPay;
-(void)OnNewCardToPay;
-(void)OnValidError:(id)error;
-(void)OnCVVError:(id)error;
-(void)OnPhoneNumberErrpr:(id)errpr;
-(void)OnCVVAndValidError:(id)error;
-(void)onAlertResetCVVAndValidDate;
-(void)OnAlertResetPhoneNumber;
-(void)onAlertResetValidDate;
-(void)onAlertResetCVV;
-(void)OnAuthenticationPay:(id)pay PayStatus:(id)status Error:(id)error;
-(void)OnGetAvailableBank:(id)bank Error:(id)error;
-(void)OnGetBindingCardBin:(id)bin Error:(id)error;
-(void)OnPayPasswordError:(id)error ErrorCount:(int)count LockTotalCount:(unsigned long)count3;
-(void)OnPayPasswordErrorClickedResetBtnDown:(id)down;
-(void)OnPayPasswordErrorClickedCancelBtnDown;
-(void)OnVerifyPayPassword:(id)password;
-(void)OnGetPayCardList:(id)list UsrVerifiedInfo:(id)info Error:(id)error;
-(void)OnGetOrderDetailInfo:(id)info Error:(id)error;
-(void)OnPayMoneyPayRetry;
-(void)onErrorAlertViewDismiss:(id)dismiss;
-(void)OnClickedBrandAppUserName:(id)name NickName:(id)name2;
-(void)OnHistoryOrderDetailRightActionBack:(BOOL)back;
-(void)OnHistoryOrderDetailBack:(BOOL)back;
-(void)OnSelectedSuccessBtnDown;
-(void)PayPwdRightActionBack;
-(void)PayPwdBack;
-(void)SetPayPwdNext:(id)next;
-(void)OnResetBindedCardInfoNext:(id)next;
-(void)OnResetBindedCardInfoCancel;
-(void)OnResetPhoneNext:(id)next;
-(void)OnResetPhoneCancel;
-(void)VerifyPayCardModifyPhone:(id)phone;
-(void)VerifyPayCardAgain:(id)again;
-(void)VerifyPayCardNext:(id)next;
-(void)VerifyPayCardBack;
-(void)FillCardInfoReadAgreement;
-(void)FillCardInfoNext:(id)next;
-(void)FillCardInfoCancel;
-(void)FillCardNumberNext:(id)next;
-(void)FillCardNumberCancel:(BOOL)cancel;
-(void)VerifyPayPwdNext:(id)next;
-(void)onOrderPayConfirmViewCancel;
-(void)onOrderPayConfirmViewPay:(id)pay;
-(BOOL)isOrderAvailableCardBankType:(id)type;
-(void)OrderDetailBack;
-(void)OrderDetailPay:(id)pay;
-(void)OrderDetailAdd:(id)add;
-(void)onPushWebView:(id)view;
-(void)onDisagree;
-(void)onAgree:(BOOL)agree;
-(BOOL)needShowOverseasCardProtocalView;
-(void)OnAddPayCard;
-(void)OnPayCardAvailbleListNext:(id)next;
-(void)OnPayCardAvalibleListRightActionBack;
-(void)OnPayCardAvalibleListBack;
-(BOOL)checkHandlePrepayErrorPath;
-(void)onBindNewCardToPay;
-(BOOL)checkBankAvailable:(id)available;
-(void)preShowOrderPaySuccess;
-(void)showOrderPaySuccess;
-(id)getWCPayAuthenticationPay:(id)pay;
-(void)showResetBindedCardInfoWithCVV:(BOOL)cvv ValidDate:(BOOL)date;
-(void)startBindCardToPay:(id)pay;
-(void)OnAlertGiveUpBind;
-(void)showGiveUpBindAlert;
-(void)stopLogic;
-(void)startLogic;
-(void)OnErrorPathHandleCheck;
-(void)mergeOrderDetail:(id)detail;
-(void)dealloc;
-(id)initWithData:(id)data;
-(id)init;
@end

@interface WCPayResetPayPwdLogic : WCPayControlLogic <WCPayResetPwdCardInfoViewControllerDelegate, WCPayVerifyPayCardViewControllerDelegate, WCPayPayPwdViewControllerDelegate, WCPayResetPwdBindedCardListViewControllerDelegate, WCPayResetPwdBindCardViewControllerDelegate> {
}
-(void)OnHandleVerifiedSMSString:(id)string;
-(void)OnGetAvailableBank:(id)bank Error:(id)error;
-(void)OnGetBindingCardBin:(id)bin Error:(id)error;
-(void)OnGetPayCardList:(id)list UsrVerifiedInfo:(id)info Error:(id)error;
-(void)OnSetWCPayPasswordInReset:(id)reset;
-(void)OnResetWCPayPasswordVerifySMS:(id)sms;
-(void)OnResetWCPayPasswordVerifyCard:(id)card Error:(id)error;
-(void)onErrorAlertViewDismiss:(id)dismiss;
-(void)OnWCPayResetPwdBindCardBack;
-(void)OnWCPayResetPwdBindCardNext;
-(void)OnResetPwdBindedCardListNext;
-(void)OnResetPwdBindedCardListBack;
-(void)OnResetPwdBindedCardListNewCardClicked;
-(BOOL)OnSelectBindCardAvailble:(id)availble;
-(void)BackToRootView;
-(void)PayPwdRightActionBack;
-(void)PayPwdBack;
-(void)SetPayPwdNext:(id)next;
-(void)VerifyPayPwdNext:(id)next;
-(void)showGiveUpResetAlert;
-(void)OnAlertGiveUpResetPwd;
-(void)VerifyPayCardAgain:(id)again;
-(void)VerifyPayCardNext:(id)next;
-(void)VerifyPayCardBack;
-(void)ResetPwdCardInfoReadAgreement;
-(void)ResetPwdCardInfoNext:(id)next;
-(void)ResetPwdCardInfoCardInfoCancel;
-(void)startLogic;
@end

@interface WCPayUnbindPayCardLogic : WCPayControlLogic <WCPayPayPwdViewControllerDelegate, WCPayCardDetailViewControllerDelegate> {
}
-(void)OnMainPayCardChanged:(id)changed;
-(void)OnGetPayCardList:(id)list UsrVerifiedInfo:(id)info Error:(id)error;
-(void)OnUnBindCard:(id)card Error:(id)error;
-(void)BackToRootView;
-(void)PayPwdRightActionBack;
-(void)PayPwdBack;
-(void)VerifyPayPwdNext:(id)next;
-(void)CardDetailAddOfflineFunction:(id)function;
-(BOOL)IsNeedShowAddOfflineFunctionButton;
-(void)CardDetailBack;
-(void)CardDetailExpiredUnbindCard:(id)card;
-(void)CardDetailSetMainBankCard:(id)card;
-(void)CardDetailUnbindCard:(id)card;
-(void)startLogic;
@end

@interface WCPayCredInfo : NSObject {
	NSString* m_nsWCPayCredType;
	NSString* m_nsWCPayCredName;
}
@property(retain, nonatomic) NSString* m_nsWCPayCredName;
@property(retain, nonatomic) NSString* m_nsWCPayCredType;
-(void)dealloc;
@end

@interface WCPayBindCardInfo : NSObject <NSCoding> {
	NSString* m_cardBankName;
	NSString* m_cardBankType;
	NSString* m_cardType;
	NSString* m_creditTypeID;
	unsigned long m_cardBankTag;
	NSString* m_cardNumber;
	NSString* m_cardLogoUrl;
	NSString* m_cardHolder;
	NSString* m_bindSerial;
	NSString* m_bindPhoneNumber;
	NSString* m_bankPhone;
	WCPayCredInfo* m_oWCPayCredInfo;
	unsigned long m_virtualSingalTranscationLimit;
	unsigned long m_virtualDayTranscationLimit;
	unsigned long m_physicalSignalTranscationLimit;
	unsigned long m_physicalDayTranscationLimit;
	BOOL m_bankFlag;
	BOOL m_expiredFlag;
	BOOL m_bNeedMoneyToResetPwd;
	BOOL m_bCanReturnMoneyAfterResetPwd;
	BOOL m_bIsSupportOfflinePay;
}
@property(assign, nonatomic) BOOL m_bIsSupportOfflinePay;
@property(assign, nonatomic) BOOL m_bCanReturnMoneyAfterResetPwd;
@property(assign, nonatomic) BOOL m_bNeedMoneyToResetPwd;
@property(assign, nonatomic) BOOL m_expiredFlag;
@property(retain, nonatomic) NSString* m_bindSerial;
@property(assign, nonatomic) unsigned long m_physicalDayTranscationLimit;
@property(assign, nonatomic) unsigned long m_physicalSignalTranscationLimit;
@property(assign, nonatomic) unsigned long m_virtualDayTranscationLimit;
@property(assign, nonatomic) unsigned long m_virtualSingalTranscationLimit;
@property(retain, nonatomic) WCPayCredInfo* m_oWCPayCredInfo;
@property(retain, nonatomic) NSString* m_bankPhone;
@property(retain, nonatomic) NSString* m_bindPhoneNumber;
@property(retain, nonatomic) NSString* m_cardHolder;
@property(retain, nonatomic) NSString* m_cardLogoUrl;
@property(retain, nonatomic) NSString* m_cardNumber;
@property(assign, nonatomic) unsigned long m_cardBankTag;
@property(retain, nonatomic) NSString* m_creditTypeID;
@property(retain, nonatomic) NSString* m_cardType;
@property(retain, nonatomic) NSString* m_cardBankName;
@property(retain, nonatomic) NSString* m_cardBankType;
@property(assign, nonatomic) BOOL m_bankFlag;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface TenpayBindQueryStruct : NSObject {
	NSString* m_nsImportCode;
	NSString* m_nsQQ;
}
@property(retain, nonatomic) NSString* m_nsQQ;
@property(retain, nonatomic) NSString* m_nsImportCode;
-(void)dealloc;
@end

@interface TenpayBindCardInfo : NSObject {
	BOOL m_bSameCardExist;
	NSString* m_nsBankType;
	NSString* m_nsBankName;
	NSString* m_nsTelphone;
	NSString* m_nsCardType;
	NSString* m_nsBindCardNumber;
	NSString* m_nsBindSerial;
	NSString* m_nsToken;
}
@property(retain, nonatomic) NSString* m_nsToken;
@property(retain, nonatomic) NSString* m_nsBindSerial;
@property(retain, nonatomic) NSString* m_nsBindCardNumber;
@property(retain, nonatomic) NSString* m_nsCardType;
@property(retain, nonatomic) NSString* m_nsTelphone;
@property(retain, nonatomic) NSString* m_nsBankName;
@property(retain, nonatomic) NSString* m_nsBankType;
@property(assign, nonatomic) BOOL m_bSameCardExist;
-(void)dealloc;
@end

@interface TenpayBindCardSubscribeAppInfo : NSObject {
	BOOL m_bIsSubscribe;
	NSString* m_nsUserName;
	NSString* m_nsNickName;
	NSString* m_nsRecommandDesc;
}
@property(retain, nonatomic) NSString* m_nsRecommandDesc;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsUserName;
@property(assign, nonatomic) BOOL m_bIsSubscribe;
-(void)dealloc;
@end

@interface WCPayUserInfo : NSObject <NSCoding> {
	BOOL m_regFlag;
	NSString* m_usrName;
	WCPayCredInfo* m_usrCredInfo;
	NSString* m_usrIDNumber;
	NSString* m_usrPhoneNumber;
	unsigned long m_cardUserFlag;
}
@property(assign, nonatomic) unsigned long m_cardUserFlag;
@property(retain, nonatomic) NSString* m_usrPhoneNumber;
@property(retain, nonatomic) NSString* m_usrIDNumber;
@property(retain, nonatomic) WCPayCredInfo* m_usrCredInfo;
@property(retain, nonatomic) NSString* m_usrName;
@property(assign, nonatomic) BOOL m_regFlag;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCPayCardBinInfo : NSObject {
	NSString* m_cardBankType;
	NSString* m_cardBankName;
	NSString* m_cardType;
	NSString* m_cardNumber;
	NSString* m_cardLogoUrl;
	NSString* m_bankPhone;
	NSArray* m_arrSupCredInfo;
	BOOL m_isBankUsable;
	BOOL m_isConfidentTrue;
	BOOL m_needUsrNameInfo;
	BOOL m_needUsrIDInfo;
	BOOL m_needValidDate;
	BOOL m_needCVVNumber;
	BOOL m_needUsrPhoneNumber;
	BOOL m_needPayMoneyAfferBind;
	BOOL m_canBindReturnMoney;
	BOOL m_needFirstName;
	BOOL m_needLastName;
	BOOL m_needCountry;
	BOOL m_needArea;
	BOOL m_needAddress;
	BOOL m_needPhoneNumber;
	BOOL m_needEmail;
	BOOL m_needZip;
	unsigned long m_cardBankTag;
	unsigned long m_cardAuthMode;
	NSString* m_usrName;
}
@property(assign, nonatomic) unsigned long m_cardAuthMode;
@property(assign, nonatomic) unsigned long m_cardBankTag;
@property(assign, nonatomic) BOOL m_needZip;
@property(assign, nonatomic) BOOL m_needEmail;
@property(assign, nonatomic) BOOL m_needPhoneNumber;
@property(assign, nonatomic) BOOL m_needAddress;
@property(assign, nonatomic) BOOL m_needArea;
@property(assign, nonatomic) BOOL m_needCountry;
@property(assign, nonatomic) BOOL m_needLastName;
@property(assign, nonatomic) BOOL m_needFirstName;
@property(assign, nonatomic) BOOL m_canBindReturnMoney;
@property(assign, nonatomic) BOOL m_needPayMoneyAfferBind;
@property(retain, nonatomic) NSString* m_usrName;
@property(assign, nonatomic) BOOL m_isBankUsable;
@property(assign, nonatomic) BOOL m_needUsrPhoneNumber;
@property(assign, nonatomic) BOOL m_needCVVNumber;
@property(assign, nonatomic) BOOL m_needValidDate;
@property(assign, nonatomic) BOOL m_needUsrIDInfo;
@property(assign, nonatomic) BOOL m_needUsrNameInfo;
@property(assign, nonatomic) BOOL m_isConfidentTrue;
@property(retain, nonatomic) NSArray* m_arrSupCredInfo;
@property(retain, nonatomic) NSString* m_bankPhone;
@property(retain, nonatomic) NSString* m_cardLogoUrl;
@property(retain, nonatomic) NSString* m_cardNumber;
@property(retain, nonatomic) NSString* m_cardType;
@property(retain, nonatomic) NSString* m_cardBankName;
@property(retain, nonatomic) NSString* m_cardBankType;
-(void)dealloc;
@end

@interface WCPayBindUserInfo : NSObject {
	unsigned long m_uiScene;
}
@property(assign, nonatomic) unsigned long m_uiScene;
-(void)dealloc;
@end

@interface WCPayBindInfo : NSObject {
	unsigned long m_flag;
	NSString* m_cardBankName;
	NSString* m_cardBankType;
	unsigned long m_cardBankTag;
	unsigned long m_cardType;
	NSString* m_cardNumber;
	NSString* m_usrNameInfo;
	NSString* m_userIDType;
	NSString* m_usrIDInfo;
	NSString* m_validDate;
	NSString* m_cvvInfo;
	NSString* m_usrPhoneNumber;
	NSString* m_payPassword;
	NSString* m_nsTenpayBindSerialNo;
	NSString* m_nsQQID;
	NSString* m_nsImportCode;
	NSString* m_nsToken;
	NSString* m_WCLanguage;
	NSString* m_firstName;
	NSString* m_lastName;
	NSString* m_country;
	NSString* m_area;
	NSString* m_city;
	NSString* m_address;
	NSString* m_phoneNumber_Overseas;
	NSString* m_email;
	NSString* m_zipcode;
	NSString* m_retKey;
}
@property(retain, nonatomic) NSString* m_retKey;
@property(retain, nonatomic) NSString* m_zipcode;
@property(retain, nonatomic) NSString* m_email;
@property(retain, nonatomic) NSString* m_phoneNumber_Overseas;
@property(retain, nonatomic) NSString* m_address;
@property(retain, nonatomic) NSString* m_city;
@property(retain, nonatomic) NSString* m_area;
@property(retain, nonatomic) NSString* m_country;
@property(retain, nonatomic) NSString* m_lastName;
@property(retain, nonatomic) NSString* m_firstName;
@property(retain, nonatomic) NSString* m_WCLanguage;
@property(retain, nonatomic) NSString* m_nsToken;
@property(retain, nonatomic) NSString* m_nsImportCode;
@property(retain, nonatomic) NSString* m_nsQQID;
@property(retain, nonatomic) NSString* m_nsTenpayBindSerialNo;
@property(retain, nonatomic) NSString* m_payPassword;
@property(retain, nonatomic) NSString* m_usrPhoneNumber;
@property(retain, nonatomic) NSString* m_cvvInfo;
@property(retain, nonatomic) NSString* m_validDate;
@property(retain, nonatomic) NSString* m_usrIDInfo;
@property(retain, nonatomic) NSString* m_userIDType;
@property(retain, nonatomic) NSString* m_usrNameInfo;
@property(retain, nonatomic) NSString* m_cardNumber;
@property(assign, nonatomic) unsigned long m_cardType;
@property(assign, nonatomic) unsigned long m_cardBankTag;
@property(retain, nonatomic) NSString* m_cardBankName;
@property(retain, nonatomic) NSString* m_cardBankType;
@property(assign, nonatomic) unsigned long m_flag;
-(void)dealloc;
@end

@interface WCPayBindInfoSMS : NSObject {
	unsigned long m_flag;
	NSString* m_payPassword;
	NSString* m_SMSMsg;
	NSString* m_retKey;
}
@property(retain, nonatomic) NSString* m_retKey;
@property(retain, nonatomic) NSString* m_SMSMsg;
@property(retain, nonatomic) NSString* m_payPassword;
@property(assign, nonatomic) unsigned long m_flag;
-(void)dealloc;
@end

@interface WCPayResetPasswordInfo : NSObject {
	NSString* m_cardBankName;
	NSString* m_cardBankType;
	NSString* m_cardType;
	NSString* m_cardNumber;
	NSString* m_cardCVV2;
	NSString* m_cardValid;
	NSString* m_usrNameInfo;
	NSString* m_usrIDType;
	NSString* m_usrIDInfo;
	NSString* m_usrPhoneNumber;
	unsigned long m_cardBankTag;
	unsigned long m_flag;
	NSString* m_WCLanguage;
	NSString* m_firstName;
	NSString* m_lastName;
	NSString* m_country;
	NSString* m_city;
	NSString* m_area;
	NSString* m_address;
	NSString* m_phoneNumber_Overseas;
	NSString* m_zipCode;
	NSString* m_email;
	NSString* m_retKey;
	BOOL m_bSelectOldCardToResetPwd;
	BOOL m_bRetry;
}
@property(retain, nonatomic) NSString* m_email;
@property(retain, nonatomic) NSString* m_zipCode;
@property(retain, nonatomic) NSString* m_phoneNumber_Overseas;
@property(retain, nonatomic) NSString* m_address;
@property(retain, nonatomic) NSString* m_area;
@property(retain, nonatomic) NSString* m_city;
@property(retain, nonatomic) NSString* m_country;
@property(retain, nonatomic) NSString* m_lastName;
@property(retain, nonatomic) NSString* m_firstName;
@property(retain, nonatomic) NSString* m_WCLanguage;
@property(assign, nonatomic) unsigned long m_cardBankTag;
@property(assign, nonatomic) unsigned long m_flag;
@property(assign, nonatomic) BOOL m_bRetry;
@property(assign, nonatomic) BOOL m_bSelectOldCardToResetPwd;
@property(retain, nonatomic) NSString* m_retKey;
@property(retain, nonatomic) NSString* m_cardValid;
@property(retain, nonatomic) NSString* m_cardCVV2;
@property(retain, nonatomic) NSString* m_cardBankType;
@property(retain, nonatomic) NSString* m_usrPhoneNumber;
@property(retain, nonatomic) NSString* m_usrIDInfo;
@property(retain, nonatomic) NSString* m_usrIDType;
@property(retain, nonatomic) NSString* m_usrNameInfo;
@property(retain, nonatomic) NSString* m_cardNumber;
@property(retain, nonatomic) NSString* m_cardType;
@property(retain, nonatomic) NSString* m_cardBankName;
-(void)dealloc;
@end

@interface WCPayOrderDetail : NSObject {
	int m_eWCPayOrderDetailSituationType;
	NSString* m_productName;
	NSString* m_productRemark;
	unsigned long m_productCount;
	long long m_totalMoney;
	NSString* m_totalFeeString;
	NSString* m_feeType;
	unsigned long m_cardBankTag;
	unsigned long m_payStatus;
	NSString* m_sellerID;
	NSString* m_sellerName;
	NSString* m_sellerFrom;
	NSString* m_sellerUserName;
	NSString* m_createTime;
	NSString* m_transcationID;
	NSString* m_payStatusName;
	NSString* m_payBankName;
	NSString* m_paySituation;
	NSString* m_sellerPhone;
	BOOL m_isOpenFeeProtocal;
}
@property(assign, nonatomic) BOOL m_isOpenFeeProtocal;
@property(retain, nonatomic) NSString* m_paySituation;
@property(assign, nonatomic) int m_eWCPayOrderDetailSituationType;
@property(retain, nonatomic) NSString* m_totalFeeString;
@property(retain, nonatomic) NSString* m_sellerPhone;
@property(retain, nonatomic) NSString* m_payBankName;
@property(retain, nonatomic) NSString* m_payStatusName;
@property(retain, nonatomic) NSString* m_transcationID;
@property(retain, nonatomic) NSString* m_createTime;
@property(retain, nonatomic) NSString* m_sellerUserName;
@property(retain, nonatomic) NSString* m_sellerFrom;
@property(retain, nonatomic) NSString* m_sellerName;
@property(retain, nonatomic) NSString* m_sellerID;
@property(assign, nonatomic) unsigned long m_payStatus;
@property(assign, nonatomic) unsigned long m_cardBankTag;
@property(retain, nonatomic) NSString* m_feeType;
@property(assign, nonatomic) long long m_totalMoney;
@property(assign, nonatomic) unsigned long m_productCount;
@property(retain, nonatomic) NSString* m_productRemark;
@property(retain, nonatomic) NSString* m_productName;
-(void)dealloc;
@end

@interface WCPayMultiOrderDetail : NSObject {
	unsigned long m_productNum;
	long long m_totalFee;
	NSArray* m_supportBankArray;
	NSMutableArray* m_orderDetailArray;
	BOOL m_isOpenProtocal;
}
@property(assign, nonatomic) BOOL m_isOpenProtocal;
@property(retain, nonatomic) NSMutableArray* m_orderDetailArray;
@property(retain, nonatomic) NSArray* m_supportBankArray;
@property(assign, nonatomic) long long m_totalFee;
@property(assign, nonatomic) unsigned long m_productNum;
-(void)dealloc;
@end

@interface WCPayIAPOrderDetail : NSObject {
	NSString* m_productName;
	NSString* m_totalMoney;
	unsigned long m_payStatus;
	NSString* m_sellerID;
	NSString* m_sellerName;
	NSString* m_sellerFrom;
	NSString* m_sellerUserName;
	NSString* m_createTime;
	NSString* m_transcationID;
	NSString* m_payStatusName;
	NSString* m_paySituation;
	NSString* m_sellerPhone;
	NSString* nsServiceAppID;
	NSString* nsServiceDetail;
	NSString* nsServiceAppUserName;
	NSString* nsServiceAppLogoUrl;
	NSString* nsServiceAppNickName;
	NSString* nsShareToFriendsURL;
	NSString* nsPaidSuccessDetail;
	int uiServiceSubscribeStrategy;
}
@property(assign, nonatomic) int uiServiceSubscribeStrategy;
@property(retain, nonatomic) NSString* nsServiceAppLogoUrl;
@property(retain, nonatomic) NSString* nsShareToFriendsURL;
@property(retain, nonatomic) NSString* nsServiceAppNickName;
@property(retain, nonatomic) NSString* nsServiceAppUserName;
@property(retain, nonatomic) NSString* nsPaidSuccessDetail;
@property(retain, nonatomic) NSString* nsServiceDetail;
@property(retain, nonatomic) NSString* nsServiceAppID;
@property(retain, nonatomic) NSString* m_sellerPhone;
@property(retain, nonatomic) NSString* m_paySituation;
@property(retain, nonatomic) NSString* m_payStatusName;
@property(retain, nonatomic) NSString* m_transcationID;
@property(retain, nonatomic) NSString* m_createTime;
@property(retain, nonatomic) NSString* m_sellerUserName;
@property(retain, nonatomic) NSString* m_sellerFrom;
@property(retain, nonatomic) NSString* m_sellerName;
@property(retain, nonatomic) NSString* m_sellerID;
@property(retain, nonatomic) NSString* m_totalMoney;
@property(retain, nonatomic) NSString* m_productName;
@property(assign, nonatomic) unsigned long m_payStatus;
-(void)dealloc;
@end

@interface WCPayAuthenticationPay : NSObject {
	unsigned long m_flag;
	BOOL m_bRetry;
	NSString* m_1bankType;
	NSString* m_1cardHolderName;
	NSString* m_1IDCardNumber;
	NSString* m_1IDCardType;
	NSString* m_1phoneNumber;
	NSString* m_1bankCardID;
	NSString* m_1cvv2;
	NSString* m_1validDate;
	NSString* m_1payKey;
	NSString* m_2bankType;
	NSString* m_2cardHolderName;
	NSString* m_2IDCardNumber;
	NSString* m_2IDCardType;
	NSString* m_2phoneNumber;
	NSString* m_2bankCardID;
	NSString* m_2cvv2;
	NSString* m_2validDate;
	NSString* m_2payKey;
	NSString* m_3payPassword;
	NSString* m_3bankType;
	NSString* m_3bindID;
	NSString* m_3payKey;
	BOOL m_3resetFlag;
	NSString* m_3resetMobile;
	NSString* m_3resetCVV2;
	NSString* m_3resetValidDate;
	NSString* m_4WCLanguage;
	NSString* m_4firstName;
	NSString* m_4lastName;
	NSString* m_4country;
	NSString* m_4city;
	NSString* m_4area;
	NSString* m_4zipcode;
	NSString* m_4address;
	NSString* m_4phoneNumber_Overseas;
	NSString* m_4email;
	NSString* m_4bankType;
	NSString* m_4bankCardID;
	NSString* m_4cvv2;
	NSString* m_4validDate;
	NSString* m_4payKey;
	NSString* m_5WCLanguage;
	NSString* m_5firstName;
	NSString* m_5lastName;
	NSString* m_5country;
	NSString* m_5city;
	NSString* m_5area;
	NSString* m_5zipcode;
	NSString* m_5address;
	NSString* m_5phoneNumber_Overseas;
	NSString* m_5email;
	NSString* m_5bankType;
	NSString* m_5bankCardID;
	NSString* m_5cvv2;
	NSString* m_5validDate;
	NSString* m_5payKey;
	NSString* m_6bankType;
	NSString* m_6payPassword;
	NSString* m_6bindID;
	NSString* m_6payKey;
	BOOL m_6resetFlag;
	NSString* m_6resetMobile;
	NSString* m_6resetCVV2;
	NSString* m_6resetValidDate;
	BOOL m_freeSMSFlag;
	NSString* m_payToken;
	unsigned long m_payScene;
	unsigned long m_payChannel;
	NSString* m_partnerID;
	NSString* m_package;
	NSString* m_uuid;
	NSString* m_appName;
	NSString* m_appSource;
	NSString* m_appID;
}
@property(retain, nonatomic) NSString* m_appSource;
@property(retain, nonatomic) NSString* m_appID;
@property(retain, nonatomic) NSString* m_appName;
@property(retain, nonatomic) NSString* m_uuid;
@property(retain, nonatomic) NSString* m_package;
@property(retain, nonatomic) NSString* m_partnerID;
@property(assign, nonatomic) unsigned long m_payChannel;
@property(assign, nonatomic) unsigned long m_payScene;
@property(retain, nonatomic) NSString* m_payToken;
@property(assign, nonatomic) BOOL m_freeSMSFlag;
@property(retain, nonatomic) NSString* m_6resetValidDate;
@property(retain, nonatomic) NSString* m_6resetCVV2;
@property(retain, nonatomic) NSString* m_6resetMobile;
@property(assign, nonatomic) BOOL m_6resetFlag;
@property(retain, nonatomic) NSString* m_6payKey;
@property(retain, nonatomic) NSString* m_6bindID;
@property(retain, nonatomic) NSString* m_6payPassword;
@property(retain, nonatomic) NSString* m_6bankType;
@property(retain, nonatomic) NSString* m_5payKey;
@property(retain, nonatomic) NSString* m_5validDate;
@property(retain, nonatomic) NSString* m_5cvv2;
@property(retain, nonatomic) NSString* m_5bankCardID;
@property(retain, nonatomic) NSString* m_5email;
@property(retain, nonatomic) NSString* m_5bankType;
@property(retain, nonatomic) NSString* m_5phoneNumber_Overseas;
@property(retain, nonatomic) NSString* m_5address;
@property(retain, nonatomic) NSString* m_5zipcode;
@property(retain, nonatomic) NSString* m_5area;
@property(retain, nonatomic) NSString* m_5city;
@property(retain, nonatomic) NSString* m_5country;
@property(retain, nonatomic) NSString* m_5lastName;
@property(retain, nonatomic) NSString* m_5firstName;
@property(retain, nonatomic) NSString* m_5WCLanguage;
@property(retain, nonatomic) NSString* m_4payKey;
@property(retain, nonatomic) NSString* m_4validDate;
@property(retain, nonatomic) NSString* m_4cvv2;
@property(retain, nonatomic) NSString* m_4bankCardID;
@property(retain, nonatomic) NSString* m_4email;
@property(retain, nonatomic) NSString* m_4bankType;
@property(retain, nonatomic) NSString* m_4phoneNumber_Overseas;
@property(retain, nonatomic) NSString* m_4address;
@property(retain, nonatomic) NSString* m_4zipcode;
@property(retain, nonatomic) NSString* m_4area;
@property(retain, nonatomic) NSString* m_4city;
@property(retain, nonatomic) NSString* m_4country;
@property(retain, nonatomic) NSString* m_4lastName;
@property(retain, nonatomic) NSString* m_4firstName;
@property(retain, nonatomic) NSString* m_4WCLanguage;
@property(retain, nonatomic) NSString* m_3resetValidDate;
@property(retain, nonatomic) NSString* m_3resetCVV2;
@property(retain, nonatomic) NSString* m_3resetMobile;
@property(assign, nonatomic) BOOL m_3resetFlag;
@property(retain, nonatomic) NSString* m_3payKey;
@property(retain, nonatomic) NSString* m_3bindID;
@property(retain, nonatomic) NSString* m_3bankType;
@property(retain, nonatomic) NSString* m_3payPassword;
@property(retain, nonatomic) NSString* m_2payKey;
@property(retain, nonatomic) NSString* m_2validDate;
@property(retain, nonatomic) NSString* m_2cvv2;
@property(retain, nonatomic) NSString* m_2bankCardID;
@property(retain, nonatomic) NSString* m_2phoneNumber;
@property(retain, nonatomic) NSString* m_2IDCardType;
@property(retain, nonatomic) NSString* m_2IDCardNumber;
@property(retain, nonatomic) NSString* m_2cardHolderName;
@property(retain, nonatomic) NSString* m_2bankType;
@property(retain, nonatomic) NSString* m_1payKey;
@property(retain, nonatomic) NSString* m_1validDate;
@property(retain, nonatomic) NSString* m_1cvv2;
@property(retain, nonatomic) NSString* m_1bankCardID;
@property(retain, nonatomic) NSString* m_1phoneNumber;
@property(retain, nonatomic) NSString* m_1IDCardType;
@property(retain, nonatomic) NSString* m_1IDCardNumber;
@property(retain, nonatomic) NSString* m_1cardHolderName;
@property(retain, nonatomic) NSString* m_1bankType;
@property(assign, nonatomic) BOOL m_bRetry;
@property(assign, nonatomic) unsigned long m_flag;
-(void)dealloc;
@end

@interface WCPayAuthenticationPayVerifySMSStruct : NSObject {
	unsigned long m_flag;
	unsigned long m_payScene;
	unsigned long m_payChannel;
	NSString* m_payPassword;
	NSString* m_payKey;
	NSString* m_payToken;
	NSString* m_uuid;
	NSString* m_verifySMS;
	NSString* m_appId;
	NSString* m_appName;
	NSString* m_appSource;
}
@property(retain, nonatomic) NSString* m_appSource;
@property(retain, nonatomic) NSString* m_appName;
@property(retain, nonatomic) NSString* m_appId;
@property(retain, nonatomic) NSString* m_verifySMS;
@property(retain, nonatomic) NSString* m_payToken;
@property(retain, nonatomic) NSString* m_uuid;
@property(retain, nonatomic) NSString* m_payKey;
@property(retain, nonatomic) NSString* m_payPassword;
@property(assign, nonatomic) unsigned long m_payChannel;
@property(assign, nonatomic) unsigned long m_payScene;
@property(assign, nonatomic) unsigned long m_flag;
-(void)dealloc;
@end

@interface WCPaySetWCPayPasswordStruct : NSObject {
	NSString* m_nsWCPayPassword;
	NSString* m_nsRequestKey;
	unsigned long m_uiPayScene;
	unsigned long m_uiPayChannel;
	NSString* m_nsToken;
	NSString* m_nsVerifyCode;
	NSString* m_nsUUID;
	NSString* m_nsAppID;
	NSString* m_nsAppName;
	NSString* m_nsAppSource;
	unsigned long m_cardBankTag;
}
@property(assign, nonatomic) unsigned long m_cardBankTag;
@property(retain, nonatomic) NSString* m_nsAppSource;
@property(retain, nonatomic) NSString* m_nsAppName;
@property(retain, nonatomic) NSString* m_nsAppID;
@property(retain, nonatomic) NSString* m_nsUUID;
@property(retain, nonatomic) NSString* m_nsVerifyCode;
@property(retain, nonatomic) NSString* m_nsToken;
@property(assign, nonatomic) unsigned long m_uiPayChannel;
@property(assign, nonatomic) unsigned long m_uiPayScene;
@property(retain, nonatomic) NSString* m_nsRequestKey;
@property(retain, nonatomic) NSString* m_nsWCPayPassword;
-(void)dealloc;
@end

@interface WCPayAppAuthRequestStruct : NSObject {
	NSString* appId;
	NSString* partnerId;
	NSString* prepayId;
	NSString* nonceStr;
	NSString* timeStamp;
	NSString* package;
	NSString* sign;
	NSString* signType;
}
@property(retain, nonatomic) NSString* signType;
@property(retain, nonatomic) NSString* sign;
@property(retain, nonatomic) NSString* package;
@property(retain, nonatomic) NSString* timeStamp;
@property(retain, nonatomic) NSString* nonceStr;
@property(retain, nonatomic) NSString* prepayId;
@property(retain, nonatomic) NSString* partnerId;
@property(retain, nonatomic) NSString* appId;
-(void)dealloc;
@end

@interface WCPayBrandPrepayRequestStruct : NSObject {
	NSString* appId;
	NSString* nonceStr;
	NSString* timestamp;
	NSString* package;
	NSString* paySign;
	NSString* signType;
	NSString* stepInURL;
	NSString* stepInAppUserName;
	unsigned long payChannel;
	NSString* extInfo;
}
@property(retain, nonatomic) NSString* extInfo;
@property(assign, nonatomic) unsigned long payChannel;
@property(retain, nonatomic) NSString* stepInAppUserName;
@property(retain, nonatomic) NSString* stepInURL;
@property(retain, nonatomic) NSString* signType;
@property(retain, nonatomic) NSString* paySign;
@property(retain, nonatomic) NSString* package;
@property(retain, nonatomic) NSString* timestamp;
@property(retain, nonatomic) NSString* nonceStr;
@property(retain, nonatomic) NSString* appId;
-(void)dealloc;
@end

@interface WCPayAuthenticationPayStatusStruct : NSObject {
	BOOL m_bPayCompleteFlag;
	NSString* m_nsReturnKey;
	NSArray* m_naTranscationID;
	NSString* nsServiceAppID;
	NSString* nsServiceDetail;
	NSString* nsServiceAppUserName;
	NSString* nsServiceAppLogoUrl;
	NSString* nsServiceAppNickName;
	NSString* nsShareToFriendsURL;
	NSString* nsPaidSuccessDetail;
	int uiServiceSubscribeStrategy;
	WCPayMultiOrderDetail* m_oOrdelStatusDetail;
	NSString* nsBindSerial;
}
@property(retain, nonatomic) NSString* nsBindSerial;
@property(retain, nonatomic) WCPayMultiOrderDetail* m_oOrdelStatusDetail;
@property(assign, nonatomic) int uiServiceSubscribeStrategy;
@property(retain, nonatomic) NSString* nsPaidSuccessDetail;
@property(retain, nonatomic) NSString* nsShareToFriendsURL;
@property(retain, nonatomic) NSString* nsServiceAppNickName;
@property(retain, nonatomic) NSString* nsServiceAppLogoUrl;
@property(retain, nonatomic) NSString* nsServiceAppUserName;
@property(retain, nonatomic) NSString* nsServiceDetail;
@property(retain, nonatomic) NSString* nsServiceAppID;
@property(retain, nonatomic) NSArray* m_naTranscationID;
@property(retain, nonatomic) NSString* m_nsReturnKey;
@property(assign, nonatomic) BOOL m_bPayCompleteFlag;
-(void)dealloc;
@end

@interface WCPayHandleWCPayURLResult : NSObject {
	NSString* nsOrderID;
	NSString* nsProductsID;
	NSString* nsUUID;
	NSString* nsAppID;
	NSString* nsAppSource;
}
@property(retain, nonatomic) NSString* nsAppSource;
@property(retain, nonatomic) NSString* nsAppID;
@property(retain, nonatomic) NSString* nsUUID;
@property(retain, nonatomic) NSString* nsProductsID;
@property(retain, nonatomic) NSString* nsOrderID;
-(void)dealloc;
@end

@interface WCPayMallPayStruct : NSObject {
	NSString* m_nsPayFuncId;
	NSString* m_nsPayProductId;
	NSString* m_nsPayAppId;
	NSMutableDictionary* m_dicRemarks;
	NSString* m_nsTecket;
}
@property(retain, nonatomic) NSString* m_nsTecket;
@property(retain, nonatomic) NSMutableDictionary* m_dicRemarks;
@property(retain, nonatomic) NSString* m_nsPayAppId;
@property(retain, nonatomic) NSString* m_nsPayProductId;
@property(retain, nonatomic) NSString* m_nsPayFuncId;
-(void)dealloc;
@end

@interface WCPayInnerPayRequestStruct : NSObject {
	NSString* m_nsPackage;
}
@property(retain, nonatomic) NSString* m_nsPackage;
-(void)dealloc;
@end

@interface WCPayInnerPayResponseStruct : NSObject {
	NSString* m_nsPartnerId;
	NSString* m_nsOutTradeNumber;
}
@property(retain, nonatomic) NSString* m_nsOutTradeNumber;
@property(retain, nonatomic) NSString* m_nsPartnerId;
-(void)dealloc;
@end

@interface NetCmdEvent : CBaseEvent {
	PrtlBase* m_prtl;
	INetCmdBase* m_netcmd;
	int m_cmdstatus;
}
@property(readonly, assign) INetCmdBase* m_netcmd;
@property(readonly, assign) PrtlBase* m_prtl;
-(void)OnCmdRecv;
-(void)Stop;
-(BOOL)Start:(unsigned*)start RetInfo:(id)info;
-(void)dealloc;
-(id)init;
@end

@interface WCPayLogicMgr : MMService <MMService, WCPayNetworkHelperDelegate, MMPackageDownloadMgrExt, IMsgExt, IAutoVerifySMSExt> {
	WCPayNetworkHelper* m_oWCPayNetworkHelper;
	unsigned long m_uWCPayLogicQuitCount;
	WCPayAuthenticationPay* m_oWCPayAuthenticationPay;
	WCPayAuthenticationPayVerifySMSStruct* m_oWCPayAuthenticationPayVerifySMSStruct;
	WCPayBindInfo* m_oWCPayBindInfo;
	WCPayBindInfoSMS* m_oWCPayBindInfoSMS;
	WCPayBindCardInfo* m_owcPayUnbindCardInfo;
	WCPayResetPasswordInfo* m_oWCPayResetPasswordInfo;
	NSString* m_orderListExtBuffer;
	NSString* m_bizOrderListExtBuffer;
	NSDictionary* m_dicCFTNeedPayRequestInfo;
	NSString* m_oOldPassword;
	NSString* m_oNewPassword;
	NSDictionary* m_bufferAvailableCard;
	NSDate* m_oGetDate;
	NSString* m_nsBufferStamp;
	NSDate* m_oGetBankLogoDate;
	NSMutableArray* m_aReceivedStatusChangedOrderList;
	NSMutableArray* m_aOrderList;
	unsigned long m_uiOrderListSum;
	unsigned long m_uiLimit;
	BOOL m_bGetTenpaySecureCtrlSalt;
	BOOL m_needSortByMainCard;
	BOOL m_needRetryDownloadPackageList;
}
+(unsigned long)GetStatusChangedOrderListCount;
-(void)OnHandleOpenAutoVerifySMS:(id)sms;
-(void)onPackageListUpdated:(id)updated;
-(void)GetBankPackage;
-(void)QuitWCPay;
-(void)StartWCPay;
-(void)GetTenpaySecureCtrlSalt;
-(void)VerifyPayPassword:(id)password Scene:(unsigned long)scene;
-(void)setCFTNeedPayRequestExtraInfo:(id)info;
-(void)OnWCToTenpayCommonResponse:(id)tenpayCommonResponse Request:(id)request;
-(void)OnWCToTenpayCommonErrorResponse:(id)tenpayCommonErrorResponse Request:(id)request;
-(void)OnWCPaySubscribeServiceAppErrorResponse:(id)response Request:(id)request;
-(void)OnWCPaySubscribeServiceAppResponse:(id)response Request:(id)request;
-(void)OnWCPayQuitQRScanPayErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayQuitQRScanPayResponse:(id)response Request:(id)request;
-(void)OnGetBizOrderListErrorResponse:(id)response Request:(id)request;
-(void)OnGetBizOrderListResponse:(id)response Request:(id)request;
-(void)OnWCBizIapOrderDetailErrorResponse:(id)response Request:(id)request;
-(void)OnWCBizIapOrderDetailResponse:(id)response Request:(id)request;
-(void)OnGetA8KeyLogicErrorResponse:(id)response Request:(id)request;
-(void)OnGetA8KeyLogicResponse:(id)response Request:(id)request;
-(void)OnWCPaySubmitMallPrepayErrorResponse:(id)response Request:(id)request;
-(void)OnWCPaySubmitMallPrepayResponse:(id)response Request:(id)request;
-(void)OnWCPayGenPrepayErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayGenPrepayResponse:(id)response Request:(id)request;
-(void)OnWCPayGetAppAuthUrlErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayGetAppAuthUrlResponse:(id)response Request:(id)request;
-(void)OnWCPayDelOrderHistoryErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayDelOrderHistoryResponse:(id)response Request:(id)request;
-(void)OnWCPayGetOrderHistoryErrorResponse:(id)response Request:(id)request;
-(void)OnWCPayGetOrderHistoryResponse:(id)response Request:(id)request;
-(void)insideGetTenpaySecureCtrlSalt:(id)salt OnRequest:(id)request;
-(void)insideCallBackVerifyPayPassword:(id)password OnRequest:(id)request;
-(void)onServiceClearData;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)dealloc;
-(void)clearData;
-(void)enterForeground;
-(id)init;
-(void)GetWCPayQuitQRPay:(id)pay UUID:(id)uuid;
-(void)PaySubscribeServiceApp:(id)app;
-(void)SetWCPayPasswordInPay:(id)pay;
-(void)AuthenticationPayVerifySMS:(id)sms;
-(void)AuthenticationPay:(id)pay;
-(void)insideCallBackSetWCPayPasswordInPay:(id)pay OnRequest:(id)request;
-(void)insideCallBackAuthenticationPayVerifySMS:(id)sms OnRequest:(id)request;
-(void)insideCallBackAuthenticationPay:(id)pay OnRequest:(id)request;
-(void)GetA8Key:(id)key;
-(void)GetMallPaypreRequest:(id)request;
-(void)GetGenPaypreRequest:(id)request;
-(void)GetAppAuthVerifyRequest:(id)request;
-(void)insideCallBackWCPaySubmitMallPrepayErrorResponse:(id)response Request:(id)request;
-(void)insideCallBackWCPaySubmitMallPrepayResponse:(id)response Request:(id)request;
-(void)insideCallBackGetA8KeyLogicErrorResponse:(id)response Request:(id)request;
-(void)insideCallBackGetA8KeyLogicResponse:(id)response Request:(id)request;
-(void)insideCallBackWCPayGetAppAuthUrlResponse:(id)response Request:(id)request;
-(void)insideCallBackWCPayGetAppAuthUrlErrorResponse:(id)response Request:(id)request;
-(void)insideCallBackWCPayGenPrepayResponse:(id)response Request:(id)request;
-(void)insideCallBackWCPayGenPrepayErrorResponse:(id)response Request:(id)request;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)HandleWCPayOrderListStatusUpdate:(id)update;
-(id)GetStatusChangedOrderList;
-(void)RemoveAllStatusChangedOrder;
-(void)RemoveStatusChangedOrderDetail:(id)detail;
-(void)AddStatusChangedOrderDetail:(id)detail;
-(void)GetIAPHistoryOrderDetailInfo:(id)info;
-(void)GetHistoryOrderDetailInfo:(id)info;
-(void)GetOrderDetailInfo:(id)info ProductsID:(id)anId;
-(void)DeleteAllOrder;
-(void)DeleteOrder:(id)order PayType:(unsigned long)type;
-(void)GetBizOrderList:(id)list;
-(void)GetOrderList:(unsigned long)list Limit:(unsigned long)limit;
-(void)clearOrderListCache;
-(void)insideCallBackWCPayGetOrderHistoryResponse:(id)response Request:(id)request;
-(void)insideCallBackWCPayGetOrderHistoryErrorResponse:(id)response Request:(id)request;
-(void)insideCallBackWCPayDelOrderHistoryResponse:(id)response Request:(id)request;
-(void)insideCallBackWCPayDelOrderHistoryErrorResponse:(id)response Request:(id)request;
-(void)insideCallBackGetBizOrderListErrorResponse:(id)response Request:(id)request;
-(void)insideCallBackGetBizOrderListResponse:(id)response Request:(id)request;
-(void)insideCallBackWCBizIapOrderDetailErrorResponse:(id)response Request:(id)request;
-(void)insideCallBackWCBizIapOrderDetailResponse:(id)response Request:(id)request;
-(void)insideCallBackGetHistoryOrderDetailInfo:(id)info OnRequest:(id)request;
-(void)insideCallBackGetOrderDetailInfo:(id)info OnRequest:(id)request;
-(id)GetMainBankCard;
-(void)SetMainBankCard:(id)card;
-(void)GetAvailableBank;
-(void)UnBindCard:(id)card WCPayPassword:(id)password;
-(void)GetBindingCardBin:(id)bin;
-(void)GetPayCardListAndUsrVerifiedInfo:(BOOL)info ToMainServiceSearch:(BOOL)mainServiceSearch UsedMemoryCacheCard:(BOOL)card UsedLocalCacheCard:(BOOL)card4;
-(void)GetPayCardListAndUsrVerifiedInfo:(BOOL)info ToMainServiceSearch:(BOOL)mainServiceSearch;
-(void)GetPayCardListAndUsrVerifiedInfo:(BOOL)info ToMainServiceSearch:(BOOL)mainServiceSearch UsedMemoryCacheCard:(BOOL)card;
-(void)callBackBufferGetPayCardListAndUsrVerifiedInfo:(id)info;
-(void)insideCallBackUnBindCard:(id)card OnRequest:(id)request;
-(void)insideCallBackGetAvailableBank:(id)bank OnRequest:(id)request;
-(void)insideCallBackGetCardBin:(id)bin OnRequest:(id)request;
-(void)insideCallBackGetPayCardListAndUsrVerifiedInfo:(id)info OnRequest:(id)request NewInfo:(BOOL)info3;
-(void)SetWCPayPasswordInBind:(id)bind RepeatPassword:(id)password PayKey:(id)key VerifySMS:(id)sms UserInfo:(id)info isOverseasBankCard:(BOOL)card;
-(void)BindCardVerifySMS:(id)sms UserInfo:(id)info;
-(void)BindCardVerifyCard:(id)card UserInfo:(id)info;
-(void)BindCardVerifyCard:(id)card UserInfo:(id)info Retry:(BOOL)retry;
-(void)GetTenpayImportBindQuery:(id)query;
-(void)insideCallBackSetWCPayPasswordInReset:(id)reset OnRequest:(id)request;
-(void)insideCallBackSetWCPayPasswordInBind:(id)bind OnRequest:(id)request;
-(void)insideCallBackBindCardVerifyCardSMS:(id)sms OnRequest:(id)request;
-(void)insideCallBackBindCardVerifyCard:(id)card OnRequest:(id)request;
-(void)insideCallBackTenpayImportBindQuery:(id)query OnRequest:(id)request;
-(void)UpdateTenpaySecureCtrlSalt;
-(id)GetAllOrderCanPayBank:(id)bank;
-(void)GetWCPayBusinessRequest:(id)request WXInnerUseDic:(id)dic CMDID:(unsigned long)cmdid OutputType:(unsigned long)type;
-(void)SetWCPayPasswordInReset:(id)reset RepeatPassword:(id)password PayKey:(id)key VerifySMS:(id)sms isOverseasBankCard:(BOOL)card;
-(void)ResetWCPayPasswordVerifySMS:(id)sms RetKey:(id)key;
-(void)ResetWCPayPasswordVerifyCard:(id)card;
-(void)ModifyWCPayPassword:(id)password NewWCPayPassword:(id)password2 RepeatWCPayPassword:(id)password3;
-(void)insideCallBackResetWCPayPasswordVerifySMS:(id)sms OnRequest:(id)request;
-(void)insideCallBackResetWCPayPasswordVerifyCard:(id)card OnRequest:(id)request;
-(void)insideCallBackModifyWCPayPassword:(id)password OnRequest:(id)request;
@end

@interface WCPayNetworkHelper : NSObject <PBMessageObserverDelegate> {
	id<WCPayNetworkHelperDelegate> m_delegate;
}
@property(assign, nonatomic) id<WCPayNetworkHelperDelegate> m_delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnGetBizOrderList:(id)list Event:(unsigned long)event;
-(void)OnMessageReturnInBizIapDetail:(id)bizIapDetail Event:(unsigned long)event;
-(void)OnMessageReturnInMallPay:(id)mallPay Event:(unsigned long)event;
-(void)OnMessageReturnInGetA8KeyLogic:(id)getA8KeyLogic Event:(unsigned long)event;
-(void)OnMessageReturnInPaySubscribeServiceApp:(id)paySubscribeServiceApp Event:(unsigned long)event;
-(void)OnMessageReturnInCancelQRPay:(id)cancelQRPay Event:(unsigned long)event;
-(void)OnMessageReturnInGenPrepay:(id)genPrepay Event:(unsigned long)event;
-(void)OnMessageReturnInGetAppAuthUrl:(id)getAppAuthUrl Event:(unsigned long)event;
-(void)OnMessageReturnInDelOrderHistory:(id)delOrderHistory Event:(unsigned long)event;
-(void)OnMessageReturnInGetOrderHistory:(id)getOrderHistory Event:(unsigned long)event;
-(void)OnMessageReturnInTenpayCommon:(id)tenpayCommon Event:(unsigned long)event;
-(void)GetA8KeyLogic:(id)logic;
-(void)WCPaySubscribeServiceApp:(id)app;
-(void)WCPayQuitQRScanPay:(id)pay;
-(void)WCPaySubmitMallPrepay:(id)prepay;
-(void)WCPayGenPrepay:(id)prepay;
-(void)WCPayGetAppAuthUrl:(id)url;
-(void)WCPayIAPOrderHistoryDetailRequest:(id)request;
-(void)WCPayDelOrderHistoryRequest:(id)request;
-(void)WCPayGetBizOrderList:(id)list;
-(void)WCPayGetOrderHistoryRequest:(id)request;
-(void)WCToTenpayCommonRequest:(id)tenpayCommonRequest;
-(void)WCToTenpayCommonRequest:(id)tenpayCommonRequest RetryCount:(unsigned long)count;
-(void)performHardCodeCallback:(id)callback;
-(void)removeAllObserver;
-(void)dealloc;
-(id)init;
@end

@interface WCPayBankLogoView : UIImageView {
	NSString* m_bankType;
}
-(void)UpdateImage:(id)image;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame WithBankType:(id)bankType;
-(void)initViewWithBankType:(id)bankType Frame:(CGRect)frame;
@end

@interface WCPayBindedCardPikerItem : WCBaseTextFieldItem <UIPickerViewDelegate, UIPickerViewDataSource, WCBizPickerViewDelegate> {
	UILabel* m_textLabel;
	WCBizPickerView* m_pickerView;
	WCPayBindCardInfo* m_selectCard;
	NSMutableDictionary* m_dicAll;
	NSArray* m_arrRows;
	MMDelegateProxy<WCPayBindedCardPikerItemDelegate>* m_cardDelegate;
	NSArray* m_arrOrderAvailableCards;
}
-(void)WCBizPickerViewDidComplete:(id)wcbizPickerView;
-(void)WCBizPickerViewDidCancel;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(BOOL)checkOrderCardAvailable:(id)available;
-(BOOL)checkCardAvailable:(id)available;
-(void)setDelegate:(id)delegate;
-(BOOL)isOrderAvailableCard:(id)card;
-(void)setOrderAvailableCardList:(id)list;
-(void)setBindCardList:(id)list;
-(void)setText:(id)text;
-(void)setSelectBindCard:(id)card;
-(void)becomeFirstResponder;
-(unsigned long)findIndexFromInfo:(id)info;
-(id)getValue;
-(void)dealloc;
-(void)initView:(CGRect)view;
@end

@interface WCPayCardDetailView : UIButton <WCPayLogicMgrExt> {
	WCPayBindCardInfo* m_info;
	UIImageView* backView;
	UIImageView* waterMaskView;
	WCPayBankLogoView* logoView;
	BOOL needUpdateResource;
	UILabel* bankTypeLabel;
}
@property(assign, nonatomic) BOOL needUpdateResource;
-(id)getInfo;
-(void)CancelPerformGetData;
-(void)dealloc;
-(id)initWithBindCardInfo:(id)bindCardInfo;
-(void)initViewWithBindCardInfo:(id)bindCardInfo;
-(void)OnGetBankPackage:(id)package Error:(id)error;
-(void)OnSuccessGetBankPackage:(id)package;
-(void)SaveAndShowBankLogoImage:(id)image;
-(void)SaveAndShowBackGroundImage:(id)image;
-(void)layoutLogoView:(id)view;
-(void)SaveAndShowWaterMaskImage:(id)image;
-(void)GetAboutAllImage;
-(id)getBackGroundImage:(id)image;
@end

@interface WCPayCardTypeItem : WCBaseTextFieldItem <UIPickerViewDelegate, UIPickerViewDataSource, WCBizPickerViewDelegate> {
	UILabel* m_textLabel;
	WCBizPickerView* m_pickerView;
	NSMutableArray* m_arrSection;
	NSMutableDictionary* m_dicRows;
	WCPayCardBinInfo* m_selectType;
	int m_iCurrentSectoin;
	NSArray* m_arrOrderAvailableCards;
}
-(void)WCBizPickerViewDidComplete:(id)wcbizPickerView;
-(void)WCBizPickerViewDidCancel;
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(BOOL)isOrderAvailableCard:(id)card;
-(void)setOrderAvailableCardList:(id)list;
-(void)setCardTypeList:(id)list;
-(void)setSelectCardType:(id)type;
-(BOOL)checkOrderCardAvailable:(id)available;
-(BOOL)checkBankAvailable:(id)available;
-(void)setTextAlignment:(int)alignment;
-(void)setText:(id)text;
-(id)getValue;
-(void)becomeFirstResponder;
-(id)getStringFrom:(id)from;
-(void)dealloc;
-(void)initView:(CGRect)view;
@end

@interface WCPayCVVItem : WCPayTenpaySecureCtrlItem {
	UIButton* m_tipBtn;
	MMUIViewController* m_viewController;
	NSString* m_nsTipTitle;
	NSString* m_nsTipContent;
}
-(void)setTipBtnShowed:(BOOL)showed;
-(void)showCVVTip;
-(void)setTipContent:(id)content Title:(id)title;
-(void)setViewController:(id)controller;
-(void)addTipBtnTarget:(id)target sel:(SEL)sel;
-(void)dealloc;
-(void)initView:(CGRect)view;
@end

@interface WCPayHistoryOrderDetailView : MMUIView <LongPressMenuViewDelegate, LongPressViewDelegate> {
	WCPayOrderDetail* m_oWCPayOrderDetail;
	MMDelegateProxy<WCPayHistoryOrderDetailViewDelegate>* m_delegate;
	UILabel* serialNameLable;
}
@property(assign, nonatomic) MMDelegateProxy<WCPayHistoryOrderDetailViewDelegate>* m_delegate;
-(void)MenuControllerWillHide:(id)menuController;
-(void)OnLongPress:(id)press;
-(void)OnPress:(id)press;
-(void)onLongPressMenuViewCopy:(id)copy;
-(id)initWithOrderDetail:(id)orderDetail AppFromShowed:(BOOL)showed;
-(id)getMoneyView:(id)view;
-(id)getDetailView:(id)view ShowedAppFrom:(BOOL)from;
-(void)onShowAppProfile:(id)profile;
-(void)onShowUserIntruction:(id)intruction;
-(id)GetFooterView:(id)view;
-(void)dealloc;
@end

@interface WCPayNewOrderRecordButton : UIButton {
}
+(float)height;
-(id)initWithCount:(unsigned long)count;
@end

@interface WCPayOrderDetailView : MMUIView {
	float m_fBodyViewHeight;
	UIButton* m_btnFold;
	UIButton* m_btnUnFold;
	UIView* m_BodyView;
	UIView* m_HeaderView;
	UIView* m_FooterView;
	MMDelegateProxy<WCPayOrderDetailViewDelegate>* m_delegate;
}
-(void)OnUnfold;
-(void)OnFold;
-(void)dealloc;
-(id)initWithOrderDetail:(id)orderDetail delegate:(id)delegate;
-(void)setBodyHeight:(float)height;
-(float)getMinHeight;
-(void)onShowUserIntruction:(id)intruction;
-(void)initFooterView:(id)view withBtn:(BOOL)btn;
-(void)initHeaderView:(id)view;
-(void)initBodyView:(id)view;
-(id)getViewWithOrderDetail:(id)orderDetail;
@end

@interface WCPayResetBindedCardInfoView : UIView {
}
-(id)initWithData:(id)data;
@end

@interface WCPayValidDateItem : WCBaseTextFieldItem <UIPickerViewDataSource, UIPickerViewDelegate> {
	UIPickerView* m_pickerView;
	int m_iStartYear;
	NSString* m_value;
	UIButton* m_tipBtn;
	MMUIViewController* m_viewController;
	NSString* m_nsTipTitle;
	NSString* m_nsTipContent;
}
-(void)setTipContent:(id)content Title:(id)title;
-(void)setTipBtnShowed:(BOOL)showed;
-(void)showValidTip;
-(void)setViewController:(id)controller;
-(void)addTipBtnTarget:(id)target sel:(SEL)sel;
-(void)UIPickerViewDidFinish;
-(void)UIPickerViewDidCancel;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(float)pickerView:(id)view widthForComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)dealloc;
-(void)initView:(CGRect)view;
-(id)getValue;
-(id)initWithTitle:(id)title tip:(id)tip key:(id)key;
@end

@interface WCPayBaseViewController : WCBizBaseViewController <MMTableViewInfoDelegate, WCBaseInfoItemDelegate, UIAlertViewDelegate> {
	WCPayControlData* m_data;
}
-(void)refreshViewWithData:(id)data;
-(void)initWithData:(id)data;
-(void)dealloc;
-(void)viewDidLoad;
-(void)showTestViewController;
@end

@interface WCPayCardDetailViewController : WCPayBaseViewController <UIActionSheetDelegate> {
	UIButton* m_footerButton;
	UIActionSheet* m_actionSheet;
	MMDelegateProxy<WCPayCardDetailViewControllerDelegate>* m_delegate;
	UIView* m_overseasCardView;
}
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)CardDetailExpireUnbindCard;
-(void)onOperate;
-(void)initOverseasCardDetailView;
-(void)viewDidLoad;
-(void)initTenpayTelView;
-(void)initNavigationBar;
-(void)OnLeftBarButtonDone;
-(void)onBankPhone;
-(void)refreshViewWithData:(id)data;
-(id)GetMainCardHeaderView;
-(void)dealloc;
-(id)init;
@end

@interface WCPayFillCardInfoViewController : WCPayBaseViewController <WCBaseInfoItemDelegate, ILinkEventExt, UIActionSheetDelegate, WCPayAreaItemDelegate> {
	UIButton* m_footerButton;
	WCPayCardTypeItem* m_pikerCardTypeItem;
	WCPayValidDateItem* m_pikerValidDateItem;
	WCPayCVVItem* m_textFieldCVVItem;
	WCBaseTextFieldItem* m_textFieldNameItem;
	WCPayCredTypeItem* m_pickerCredTypeItem;
	WCPayTenpaySecureCtrlItem* m_textFieldHolderIDItem;
	WCBaseTextFieldItem* m_textFieldPhoneItem;
	NSMutableArray* m_arrayInfoGroup;
	WCBaseKeyboardToolBar* m_keyboardBar;
	BOOL m_bReadAgreement;
	MMDelegateProxy<WCPayFillCardInfoViewControllerDelegate>* m_delegate;
	NSIndexPath* m_selectItemIndex;
	WCBaseTextFieldItem* m_textFieldFirstNameItem;
	WCBaseTextFieldItem* m_textFieldLastNameItem;
	WCPayAreaItem* m_textFieldAreaItem;
	WCBaseTextFieldItem* m_textFieldAddressItem;
	WCBaseTextFieldItem* m_textFieldPhoneNumberItem;
	WCBaseTextFieldItem* m_textFieldZipItem;
	WCBaseTextFieldItem* m_textFieldEmailItem;
}
-(void)onWCPayAreaItemDidChoseRegion:(id)onWCPayAreaItem;
-(void)setDelegate:(id)delegate;
-(void)showDetailTip;
-(void)clickInfoCell:(id)cell index:(id)index;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)WCBaseInfoItemEndEdit:(id)edit;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemBeginEdit:(id)edit;
-(void)WCBaseInfoItemCancelEdit:(id)edit;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)checkData:(id)data;
-(BOOL)checkIsEmpty:(id)empty;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onReadAgreement:(id)agreement;
-(void)onNext;
-(BOOL)getData:(id)data;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)initNavigationBar;
-(void)initFooterView;
-(void)reloadTableView;
-(void)initInfoTemplate;
-(void)dealloc;
-(id)init;
@end

@interface ShowHtmlSourceCodeViewController : MMUIViewController {
	NSString* _htmlSourceCode;
	UITextView* _consoleView;
}
-(void)onExit;
-(void)initView;
-(void)viewDidLoad;
-(id)initwithHtmlSourceCode:(id)code;
-(void)dealloc;
@end

@interface WCPayFillCardNumberViewController : WCPayBaseViewController <ILinkEventExt, WCBizTipViewDelegate> {
	UIButton* m_footerButton;
	WCBizInfoGroup* m_group;
	WCPayTenpaySecureCtrlItem* m_textFieldItem;
	RichTextView* richTextView;
	MMDelegateProxy<WCPayFillCardNumberViewControllerDelegate>* m_delegate;
	WCBizTipView* introView;
}
-(void)OnWCBizTipViewClosed;
-(void)showDetailTip;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)stopLogicLoading;
-(void)startLogicLoading;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)onNext;
-(void)viewDidLoad;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)reloadTableView;
-(id)getFirstUserTipView;
-(void)initNavigationBar;
-(void)FillCardNumberCancel;
-(void)initFirstUserTipView;
-(void)initFooterView;
-(void)dealloc;
-(id)init;
@end

@interface WCPayOrderDetailHistoryViewController : WCPayBaseViewController <WCPayHistoryOrderDetailViewDelegate> {
	MMDelegateProxy<WCPayOrderDetailHistoryViewControllerDelegate>* m_delegate;
	BOOL m_bShowCompleteBtn;
	BOOL m_bShowSuccessTip;
	BOOL m_bSelectedSuscribeServiceApp;
	BOOL m_bShowAppFrom;
	BOOL m_bHandlePoped;
	NSString* m_nsCompleteBtnTitle;
	NSString* m_nsCommondTip;
}
-(void)OnClickedBrandProfile:(id)profile NickName:(id)name;
-(void)showBizSafeTitle:(BOOL)title;
-(void)showOrderFromApp:(BOOL)app;
-(void)showSuccessPayTip:(BOOL)tip;
-(void)showCompleteBtn:(BOOL)btn;
-(void)setCompleteBtnTitle:(id)title;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)refreshViewWithData:(id)data;
-(void)reloadTableView;
-(void)selectSubscribeApp:(id)app;
-(void)initNavigationBar;
-(void)OnWXPayPhone;
-(void)OnNextStepBack;
-(void)OnHistoryOrderDetailBack;
-(void)viewDidBePoped:(BOOL)view;
-(void)BackHistoryOrderDetail;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface WCPayOrderDetailViewController : WCPayBaseViewController <WCPayBindedCardPikerItemDelegate, WCPayOrderDetailViewDelegate> {
	UIButton* m_footerButton;
	WCBaseKeyboardToolBar* m_keyboardBar;
	WCPayTenpayPasswordCtrlItem* m_textFieldItemPwd;
	WCPayBindedCardPikerItem* m_cardTypeItem;
	MMDelegateProxy<WCPayOrderDetailViewControllerDelegate>* m_delegate;
	NSString* m_nsError;
	NSIndexPath* m_selectItemIndex;
}
-(void)clearPwdInput;
-(void)OnWCPayOrderDetailViewHeightChange:(id)change;
-(void)setDelegate:(id)delegate;
-(void)OnChooseCard:(id)card;
-(void)OnChooseNewCard:(id)card;
-(void)onNext;
-(void)OnAddPayCard;
-(void)clickInfoCell:(id)cell index:(id)index;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)WCBaseInfoItemEndEdit:(id)edit;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemCancelEdit:(id)edit;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)refreshViewWithData:(id)data;
-(void)initNavigationBar;
-(void)OnCancel;
-(void)OnComfireEnsureAlert;
-(void)reloadPayTableView;
-(void)reloadBindTableView;
-(void)dealloc;
-(id)init;
@end

@interface WCPayOrderHistoryViewController : WCPayBaseViewController <UITableViewDataSource, UITableViewDelegate, UIActionSheetDelegate> {
	MMTableView* m_tableView;
	BOOL m_loadingMoreOrderList;
	MMDelegateProxy<WCPayOrderHistoryViewControllerDelegate>* m_delegate;
}
-(void)OnStatusChangedOrderListCountChanged:(unsigned long)changed;
-(void)scrollViewDidScroll:(id)scrollView;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell cell:(id)cell2 row:(unsigned)row;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)loadMoreOrderList;
-(void)setDelegate:(id)delegate;
-(void)OnDelAllOrder;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(void)initView;
-(void)initNavigationBar;
-(void)initTableView;
-(id)getHeaderView;
-(id)getBottomView;
-(id)init;
@end

@interface WCPayPayPwdViewController : WCPayBaseViewController {
	UIButton* m_footerButton;
	WCPayPwdCtrlPanelView* m_VerifyView;
	WCPayPwdCtrlPanelView* m_FirstView;
	WCPayPwdCtrlPanelView* m_SecondView;
	WCPayPwdCtrlPanelView* m_currentView;
	MMDelegateProxy<WCPayPayPwdViewControllerDelegate>* m_delegate;
}
-(void)resignInputViewFirstResponse;
-(void)clearPwdInput;
-(void)stopLogicLoading;
-(void)startLogicLoading;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)onNext;
-(void)setFooterBtnTitle:(id)title;
-(void)showSecondPwdCtrlWithTip:(id)tip withShowFooterButton:(BOOL)showFooterButton;
-(void)showSetPwdCtrlWithTip:(id)tip;
-(void)showVerifyPwdCtrlWithTip:(id)tip;
-(void)showVerifyPwdCtrlWithTip:(id)tip withShowFooterButton:(BOOL)showFooterButton;
-(void)showViewWithCurrentView:(id)currentView NextView:(id)view;
-(void)initNavigationBar;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)initFooterView;
-(void)dealloc;
-(id)init;
@end

@interface WCPayPwdViewController : WCPayBaseViewController {
	MMDelegateProxy<WCPayPwdViewControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCPayPwdViewControllerDelegate>* m_delegate;
-(void)didReceiveMemoryWarning;
-(void)onResetPwd;
-(void)onModifyPwd;
-(void)viewDidLoad;
-(void)OnBack;
-(void)dealloc;
-(id)init;
@end

@interface WCPayResetBindedCardInfoViewController : WCPayBaseViewController <ILinkEventExt> {
	BOOL m_bCVV;
	BOOL m_bValidDate;
	UIButton* m_footerButton;
	WCPayCVVItem* m_textFieldCVVItem;
	WCPayValidDateItem* m_pikerValidDateItem;
	WCBaseKeyboardToolBar* m_keyboardBar;
	MMDelegateProxy<WCPayResetBindedCardInfoViewControllerDelegate>* m_delegate;
}
-(void)WCBaseInfoItemEndEdit:(id)edit;
-(void)WCBaseInfoItemBeginEdit:(id)edit;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)onPhoneClicked:(id)clicked withRect:(CGRect)rect;
-(void)showDetailTip;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)setItemWithCVV:(BOOL)cvv ValidDate:(BOOL)date;
-(void)initNavigationBar;
-(void)initFooterView;
-(void)onNext;
-(void)dealloc;
-(id)init;
@end

@interface WCPayResetPhoneViewController : WCPayBaseViewController <ILinkEventExt> {
	UIButton* m_footerButton;
	WCBizInfoGroup* m_group;
	WCBaseTextFieldItem* m_textFieldItem;
	WCBaseKeyboardToolBar* m_keyboardBar;
	MMDelegateProxy<WCPayResetPhoneViewViewControllerDelegate>* m_delegate;
}
-(void)WCBaseInfoItemEndEdit:(id)edit;
-(void)WCBaseInfoItemBeginEdit:(id)edit;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)onPhoneClicked:(id)clicked withRect:(CGRect)rect;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)reloadTableView;
-(void)initNavigationBar;
-(void)initFooterView;
-(void)onNext;
-(void)dealloc;
-(id)init;
@end

@interface BrandIAPPrepayRequestStruct : NSObject {
	NSString* _appId;
	NSString* _nonceStr;
	NSString* _timestamp;
	NSString* _package;
	NSString* _paySign;
	NSString* _signType;
	NSString* _stepInURL;
	NSString* _extKey;
}
@property(retain, nonatomic) NSString* extKey;
@property(retain, nonatomic) NSString* stepInURL;
@property(retain, nonatomic) NSString* signType;
@property(retain, nonatomic) NSString* paySign;
@property(retain, nonatomic) NSString* package;
@property(retain, nonatomic) NSString* timestamp;
@property(retain, nonatomic) NSString* nonceStr;
@property(retain, nonatomic) NSString* appId;
-(void)dealloc;
@end

@interface BrandIAPMgr : MMService <PBMessageObserverDelegate, IAPExt, MMService> {
	BOOL _isPaying;
}
-(void)dealloc;
-(void)onPurchaseFailForProduct:(id)product;
-(void)onPurchaseCancelForProduct:(id)product;
-(void)onPurchaseSuccessForProduct:(id)product;
-(void)onGetProduct:(id)product invalidProductID:(id)anId;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(int)brandIAPGetResult:(id)result;
-(int)brandIAPPay:(id)pay ExtInfo:(id)info;
-(int)brandIAPRequestProduct:(id)product;
-(int)brandIAPPreay:(id)preay;
@end

@interface WCPayResetPwdBindCardViewController : WCPayBaseViewController {
	UIButton* m_footerButton;
	WCPayTenpaySecureCtrlItem* m_textFieldItem;
	MMDelegateProxy<WCPayResetPwdBindCardViewControllerDelegate>* m_delegate;
}
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)onNext;
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)initFooterView;
-(void)reloadTableView;
-(void)initNavigationBar;
-(void)dealloc;
-(id)init;
@end

@interface WCPayResetPwdBindedCardListViewController : WCPayBaseViewController {
	UIButton* m_footerButton;
	NSMutableArray* m_cellInfoArray;
	WCPayBindCardInfo* selectedPayCardInfo;
	MMDelegateProxy<WCPayResetPwdBindedCardListViewControllerDelegate>* m_delegate;
}
-(void)onNext;
-(void)OnSelectCard:(id)card;
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)reloadCardListView;
-(void)initFooterView;
-(void)initNavigationBar;
-(BOOL)checkBankCanShow:(id)show;
-(id)checkBankAvailable:(id)available;
-(void)dealloc;
-(id)init;
@end

@interface WCPayResetPwdCardInfoViewController : WCPayBaseViewController <WCBaseInfoItemDelegate, ILinkEventExt, UIActionSheetDelegate, WCPayAreaItemDelegate> {
	UIButton* m_footerButton;
	NSMutableArray* m_arrayInfoGroup;
	WCBaseKeyboardToolBar* m_keyboardBar;
	WCPayTenpaySecureCtrlItem* m_textFieldCardNumItem;
	WCPayValidDateItem* m_pikerValidDateItem;
	WCPayCVVItem* m_textFieldCVVItem;
	WCPayCardTypeItem* m_pikerCardTypeItem;
	WCBaseTextFieldItem* m_textFieldNameItem;
	WCPayCredTypeItem* m_pickerCredTypeItem;
	WCPayTenpaySecureCtrlItem* m_textFieldHolderIDItem;
	WCBaseTextFieldItem* m_textFieldPhoneItem;
	UILabel* appendNumberLabel;
	MMDelegateProxy<WCPayResetPwdCardInfoViewControllerDelegate>* m_delegate;
	BOOL m_bReadAgreement;
	WCBaseTextFieldItem* m_textFieldFirstNameItem;
	WCBaseTextFieldItem* m_textFieldLastNameItem;
	WCPayAreaItem* m_textFieldAreaItem;
	WCBaseTextFieldItem* m_textFieldAddressItem;
	WCBaseTextFieldItem* m_textFieldPhoneNumberItem;
	WCBaseTextFieldItem* m_textFieldZipItem;
	WCBaseTextFieldItem* m_textFieldEmailItem;
}
-(void)onWCPayAreaItemDidChoseRegion:(id)onWCPayAreaItem;
-(void)setDelegate:(id)delegate;
-(void)showDetailTip;
-(void)clickInfoCell:(id)cell;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)WCBaseInfoItemEndEdit:(id)edit;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemBeginEdit:(id)edit;
-(void)checkData:(id)data;
-(BOOL)checkIsEmpty:(id)empty;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onReadAgreement:(id)agreement;
-(void)onNext;
-(BOOL)getData:(id)data;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)initNavigationBar;
-(void)initFooterView;
-(void)reloadTableView;
-(void)initInfoTemplate;
-(void)dealloc;
-(id)init;
@end

@interface WCPayVerifyPayCardViewController : WCPayBaseViewController <ILinkEventExt> {
	UIButton* m_footerButton;
	WCBaseTextFieldItem* m_textFieldItem;
	UIButton* m_sendVerifyCodeBtn;
	UILabel* m_sendVerifyCodeLabel;
	int m_iCountDown;
	NSString* m_nsHeaderTip;
	RichTextView* richTextView;
	WCBaseKeyboardToolBar* m_keyboardBar;
	MMDelegateProxy<WCPayVerifyPayCardViewControllerDelegate>* m_delegate;
}
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)autoInputVerifyCode:(id)code;
-(void)showNotSMSTipBtn;
-(void)showModifyPhoneBtn;
-(void)OnModifyPhoneBtn;
-(void)onAlertModifyPhone;
-(void)setFooterBtnTitle:(id)title;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)initNavigationBar;
-(void)updateSendVerifyCodeButton;
-(void)initSendVerifyCodeButton;
-(void)willDisappear;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)onNext;
-(void)onSendVerifyCodeClicked:(id)clicked;
-(void)startTimer;
-(void)stopTimer;
-(void)initFooterView;
-(void)makeInfoCell:(id)cell;
-(void)reloadTableView;
-(void)setHeaderTip:(id)tip;
-(void)dealloc;
-(id)init;
@end

@interface WCAddressPickerItem : WCBaseTextFieldItem <UIPickerViewDataSource, UIPickerViewDelegate, WCBizPickerViewDelegate> {
	NSArray* m_arrStage;
	WCAddressStageDataStruct* m_selectProvince;
	WCAddressStageDataStruct* m_selectCity;
	WCAddressStageDataStruct* m_selectDistrict;
	unsigned long m_uiCurProvince;
	unsigned long m_uiCurCity;
	unsigned long m_uiCurDistrict;
	UIPickerView* m_pickerView;
}
-(void)UIPickerViewDidFinish;
-(void)UIPickerViewDidCancel;
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(float)pickerView:(id)view widthForComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)SetText;
-(void)becomeFirstResponder;
-(void)dealloc;
-(void)initView:(CGRect)view;
-(id)getSelectDistrict;
-(id)getSelectCity;
-(id)getSelectProvice;
-(void)setSelectStageProvince:(id)province City:(id)city District:(id)district;
-(void)setAllAddressStageData:(id)data;
@end

@interface WCAddressBaseViewController : WCBizBaseViewController {
	WCAddressControlData* m_data;
}
-(void)refreshViewWithData:(id)data;
-(void)initWithData:(id)data;
-(void)dealloc;
@end

@interface WCAddressInfoViewController : WCAddressBaseViewController {
	UIButton* m_footerButton;
	WCBaseTextFieldItem* m_textFieldNameItem;
	WCAddressPickerItem* m_pickerDistrictItem;
	WCBaseTextFieldItem* m_textFieldStreetItem;
	WCBaseTextFieldItem* m_textFieldPostalCodeItem;
	WCBaseTextFieldItem* m_textFieldPhoneItem;
	WCBaseKeyboardToolBar* m_keyboardBar;
	NSMutableArray* m_arrayInfo;
	MMDelegateProxy<WCAddressInfoViewControllerDelegate>* m_delegate;
	NSIndexPath* m_selectItemIndex;
}
-(void)setDelegate:(id)delegate;
-(void)clickInfoCell:(id)cell index:(id)index;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)WCBaseInfoItemEndEdit:(id)edit;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemBeginEdit:(id)edit;
-(void)WCBaseInfoItemCancelEdit:(id)edit;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(BOOL)checkIsEmpty:(id)empty;
-(void)onNext;
-(BOOL)getData:(id)data;
-(void)viewDidLoad;
-(void)initNavigationBar;
-(void)OnCancelClick;
-(void)OnComfireEnsureAlert;
-(void)reloadTableView;
-(void)initInfoTemplate;
-(void)dealloc;
-(id)init;
@end

@interface WCAddressListViewController : WCAddressBaseViewController {
	MMDelegateProxy<WCAddressListViewControllerDelegate>* m_delegate;
}
-(void)setDelegate:(id)delegate;
-(void)accessoryButtonTappedForRowWithIndexPath:(id)indexPath Cell:(id)cell;
-(void)commitEditingForRowAtIndexPath:(id)indexPath Cell:(id)cell;
-(void)actionCell:(id)cell;
-(void)makeCell:(id)cell cellInfo:(id)info;
-(void)makeNewCell:(id)cell cellInfo:(id)info;
-(void)refreshViewWithData:(id)data;
-(void)resetDefautSelect;
-(float)getCellHeightForAddress:(id)address;
-(id)getAddressDetailString:(id)string;
-(void)viewDidLoad;
-(void)onNext;
-(void)initNavigationBar;
@end

@interface WCAddressControlData : NSObject {
	WCAddressBaseAddress* structSelectBaseAddress;
	WCAddressBaseAddress* structEditBaseAddress;
	NSArray* m_arrAllAddress;
	NSArray* m_arrAddressStageData;
}
@property(retain, nonatomic) NSArray* m_arrAddressStageData;
@property(retain, nonatomic) NSArray* m_arrAllAddress;
@property(retain, nonatomic) WCAddressBaseAddress* structEditBaseAddress;
@property(retain, nonatomic) WCAddressBaseAddress* structSelectBaseAddress;
+(id)getSelectAddressDicFromAddress:(id)address;
-(void)dealloc;
@end

@interface ChatRoomUtils : NSObject {
}
+(void)onChatRoomExpired:(id)expired delegate:(id)delegate tag:(int)tag;
+(void)onAddChatroomMemberTooMuch:(id)much delegate:(id)delegate;
+(void)onNeedUpgradeChatRoom:(id)room delegate:(id)delegate tag:(int)tag;
+(void)bindCardUpgradeChatRoom:(id)room ViewController:(id)controller forScene:(int)scene;
+(void)openVerifyContactProfile:(id)profile forChatRoom:(id)chatRoom inViewController:(id)viewController delegate:(id)delegate;
+(void)genFildsOfContact:(id)contact toContact:(id)contact2;
+(void)openContactProfile:(id)profile ofChatRoomContact:(id)chatRoomContact inViewController:(id)viewController delegate:(id)delegate;
+(void)openAddContactWithMemberList:(id)memberList inViewController:(id)viewController delegate:(id)delegate;
@end

@interface MMUIButton : UIButton {
}
-(void)setFrame:(CGRect)frame;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMUIView : UIView {
}
+(void)load;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WCPayPwdCtrlPanelView : UIView {
	UIImageView* m_footerTipImageView;
	UILabel* m_footerTip;
	UIView* m_footerView;
	WCPayTenpayPasswordCtrlItem* m_textField;
}
@property(retain, nonatomic) WCPayTenpayPasswordCtrlItem* m_textField;
-(void)dealloc;
-(void)setFooterView:(id)view;
-(void)setError:(id)error;
-(id)initWithTip:(id)tip;
@end

@interface HRHResistantURLCache : NSURLCache {
}
+(id)startHRHResistant;
-(void)storeCachedResponse:(id)response forRequest:(id)request;
@end

@interface WCPayTenpayPasswordCtrlItem : WCBaseInfoItem <TenpayPasswordCtrlDelegate, WCPayLogicMgrExt> {
	TenpayPasswordCtrl* m_textField;
	UIImage* m_image;
}
-(void)OnGetTenpaySecureCtrlSalt:(id)salt Date:(id)date Error:(id)error;
-(BOOL)onError:(id)error;
-(void)passwordCtrlDidEndEditing:(id)passwordCtrl;
-(void)passwordCtrlDidBeginEditing:(id)passwordCtrl;
-(void)passwordCtrlShouldChange:(id)passwordCtrl;
-(id)getHashData;
-(void)dealloc;
-(id)initWithImage:(id)image;
-(void)resignFirstResponder;
-(void)becomeFirstResponder;
-(void)clearInput;
-(void)initView:(CGRect)view;
-(id)getValue;
-(CGSize)getSize;
-(int)getTextLength;
@end

@interface WCPayTenpaySecureCtrlItem : WCBaseInfoItem <TenpaySecureCtrlDelegate, WCPayLogicMgrExt> {
	TenpaySecureCtrl* m_textField;
	int m_eEncryptType;
	NSString* m_nsUserCredType;
}
@property(retain, nonatomic) NSString* m_nsUserCredType;
-(void)OnGetTenpaySecureCtrlSalt:(id)salt Date:(id)date Error:(id)error;
-(void)appendString:(id)string;
-(void)setMaxInputLen:(int)len;
-(BOOL)onError:(id)error;
-(void)tenpayCtrlShouldChange:(id)tenpayCtrl;
-(void)tenpayCtrlShouldReturn:(id)tenpayCtrl;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidEndOnExit:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(void)setSecureTextEntry:(BOOL)entry;
-(void)setEncryptType:(int)type;
-(void)setClearButtonMode:(int)mode;
-(void)setReturnKeyType:(int)type;
-(void)setKeyboardType:(int)type;
-(void)dealloc;
-(id)initWithTitle:(id)title tip:(id)tip key:(id)key;
-(void)onEndEditor;
-(void)resignFirstResponder;
-(void)becomeFirstResponder;
-(void)initView:(CGRect)view;
-(void)startGetSalt;
-(void)setEnable:(BOOL)enable;
-(id)getValue;
-(id)getValueWithEncryptType:(int)encryptType;
-(void)setKeyboardUseID:(BOOL)anId;
-(void)setFormatBankCard;
-(BOOL)isUserIDNum:(unsigned long)num;
-(BOOL)isBankCardNum;
-(BOOL)isPhoneNum;
-(int)getTextLength;
@end

@interface MMUIControl : UIControl {
}
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMUIImageView : UIImageView {
}
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMUIScrollView : UIScrollView <MMDelegateCenterExt> {
	MMDelegateProxy<UIScrollViewDelegate>* m_deleteProxy;
}
-(void)onClearMyDelegate:(id)delegate forProtocols:(id)protocols;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface URLSourceInfo : NSObject {
	NSString* m_url;
	NSString* m_bundleId;
}
@property(retain, nonatomic) NSString* m_bundleId;
@property(retain, nonatomic) NSString* m_url;
-(id)init;
-(void)dealloc;
@end

@interface WCAddressBaseAddress : NSObject <NSCoding> {
	NSString* m_nsNationalCode;
	unsigned long m_uiAddressID;
	NSString* m_nsUserName;
	NSString* m_nsTelNumber;
	NSString* m_nsAddressStageID;
	NSString* m_nsAddressPostCode;
	NSString* m_nsAddressProviceFirstStageName;
	NSString* m_nsAddressCitySecondStageName;
	NSString* m_nsAddressCountiesThirdStageName;
	NSString* m_nsAddressDetailInfo;
}
@property(retain, nonatomic) NSString* m_nsAddressDetailInfo;
@property(retain, nonatomic) NSString* m_nsAddressCountiesThirdStageName;
@property(retain, nonatomic) NSString* m_nsAddressCitySecondStageName;
@property(retain, nonatomic) NSString* m_nsAddressProviceFirstStageName;
@property(retain, nonatomic) NSString* m_nsAddressPostCode;
@property(retain, nonatomic) NSString* m_nsAddressStageID;
@property(retain, nonatomic) NSString* m_nsTelNumber;
@property(retain, nonatomic) NSString* m_nsUserName;
@property(readonly, assign, nonatomic) unsigned long m_uiAddressID;
@property(retain, nonatomic) NSString* m_nsNationalCode;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)copyAddress;
-(id)initWithID:(unsigned long)anId;
-(void)dealloc;
@end

@interface WCAddressStageDataStruct : NSObject <NSCoding> {
	NSString* m_nsAddressStageID;
	NSString* m_nsAddressPostCode;
	unsigned long m_uiAddressStage;
	NSString* m_nsAddressStageName;
	NSMutableArray* m_arrAddressSubStageData;
}
@property(retain, nonatomic) NSMutableArray* m_arrAddressSubStageData;
@property(retain, nonatomic) NSString* m_nsAddressStageName;
@property(retain, nonatomic) NSString* m_nsAddressPostCode;
@property(retain, nonatomic) NSString* m_nsAddressStageID;
@property(assign, nonatomic) unsigned long m_uiAddressStage;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
@end

@interface WCAddressAuthenticationSturct : NSObject {
	NSString* m_nsHandleUrl;
	NSString* m_appID;
	int m_uiPayRcptScene;
}
@property(assign, nonatomic) int m_uiPayRcptScene;
@property(retain, nonatomic) NSString* m_appID;
@property(retain, nonatomic) NSString* m_nsHandleUrl;
-(void)dealloc;
@end

@interface WCAddressLogicMgr : MMService <MMService, WCAddressNetworkDelegate, MMPackageDownloadMgrExt> {
	NSMutableArray* m_arrAddress;
	NSMutableArray* m_arrAddressStageData;
	unsigned long m_retainCount;
	unsigned long currentVersion;
	WCAddressNetworkHelper* m_networkHelper;
	unsigned m_timeStamp;
	int m_uiWCAddressGetAddressStategy;
}
-(void)onPackageDownloadProcessUpdated:(id)updated downloadSize:(int)size totalSize:(int)size3;
-(void)onPackageDownloadFinish:(id)finish package:(id)package;
-(void)onPackageListUpdated:(id)updated;
-(void)OnSelectWCAddress:(id)address Request:(id)request Error:(id)error;
-(void)OnModifyWCAddress:(id)address Request:(id)request Error:(id)error;
-(void)OnQueryWCAddress:(id)address Request:(id)request Error:(id)error;
-(void)HandleGetAddressStategy:(id)stategy UserName:(id)name NickName:(id)name3 Error:(id)error;
-(void)OnRemoveWCAddress:(id)address Request:(id)request Error:(id)error;
-(void)OnAddWCAddress:(id)address Request:(id)request Error:(id)error;
-(void)GetAllAddressStageData;
-(void)GetServerRequestToAddressStageData;
-(void)SetRecentlyUsedAddress:(id)address;
-(id)GetRecentlyUsedAddress;
-(void)GetAllAddress:(id)address;
-(void)ModifyAddress:(id)address;
-(void)DelAddress:(id)address;
-(void)AddAddress:(id)address;
-(void)GetLatestAddress:(id)address;
-(void)StopWCAddressService;
-(void)StartWCAddressService;
-(void)onServiceClearData;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)removeArchiveAddress;
-(id)safeGetAddress;
-(BOOL)safeArchiveAddress;
-(BOOL)GetAddressDataFromPath:(id)path Error:(id*)error;
-(id)GetRcptInfoNode:(id)node;
-(void)dealloc;
-(id)init;
@end

@interface WCAddressNetworkHelper : MMObject <PBMessageObserverDelegate> {
	MMDelegateProxy<WCAddressNetworkDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCAddressNetworkDelegate>* m_delegate;
-(void)SelectWCAddress:(id)address;
-(void)ModifyWCAddress:(id)address;
-(void)QueryWCAddress:(id)address;
-(void)RemoveWCAddress:(id)address;
-(void)AddWCAddress:(id)address;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnMessageReturnInSelectWCAddress:(id)selectWCAddress Event:(unsigned long)event;
-(void)OnMessageReturnInModifyWCAddress:(id)modifyWCAddress Event:(unsigned long)event;
-(void)OnMessageReturnInRemoveWCAddress:(id)removeWCAddress Event:(unsigned long)event;
-(void)OnMessageReturnInQueryWCAddress:(id)queryWCAddress Event:(unsigned long)event;
-(void)OnMessageReturnInAddWCAddress:(id)addWCAddress Event:(unsigned long)event;
-(void)dealloc;
-(id)init;
@end

@interface WCAddressControlLogic : WCBizControlLogic <WCAddressLogicMgrExt, WCAddressInfoViewControllerDelegate, WCAddressListViewControllerDelegate> {
	JSEvent* m_jsEvent;
	WCAddressControlData* m_data;
	WCAddressAuthenticationSturct* m_oWCAddressAuthenticationStruct;
	NSString* m_nsUserName;
}
-(void)OnNotAcceptGetLatestAddress;
-(void)OnAcceptGetLatestAddress;
-(void)OnSetRecentlyUsedAddress:(id)address Error:(id)error;
-(void)OnModifyAddress:(id)address Error:(id)error;
-(void)OnDelAddress:(id)address Error:(id)error;
-(void)OnAddAddress:(id)address Error:(id)error;
-(void)OnGetGetAllAddressStageData:(id)data Error:(id)error;
-(void)OnGetAllAddress:(id)address UserName:(id)name NickName:(id)name3 Error:(id)error;
-(BOOL)onError:(id)error;
-(void)AddressListDelete:(id)aDelete;
-(void)AddressListEdit:(id)edit;
-(void)AddressListAdd;
-(void)AddressListComplete:(id)complete;
-(void)AddressListBack;
-(void)AddressInfoNext:(id)next;
-(void)AddressInfoCancel;
-(void)startLogic;
-(void)stopLogic;
-(void)stopForceRotationToPortrait;
-(void)startForceRotationToPortrait;
-(void)pause;
-(void)resume;
-(void)stopLoading;
-(void)startLoading;
-(void)dealloc;
-(id)initWithJSEvent:(id)jsevent AuthenticationStruct:(id)aStruct;
@end

@interface WCAddressControlMgr : WCBaseControlMgr <JSEventExt> {
}
-(void)jsGetLatestAddresss:(id)addresss;
-(void)jsEditAddress:(id)address;
-(unsigned long)startGetLatestAddressControlLogic:(id)logic jsEvent:(id)event;
-(unsigned long)startAddressControlLogic:(id)logic jsEvent:(id)event;
-(void)dealloc;
-(id)init;
@end

@interface MMUIWindow : UIWindow {
}
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMUIActionSheet : UIActionSheet {
}
+(id)generateTitleWithHeight:(float)height;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMUINavigationController : UINavigationController {
}
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)popViewControllerAnimated:(BOOL)animated;
-(id)DispatchPopViewControllerAnimated:(BOOL)animated;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface MMUITextView : UITextView {
}
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMUIImagePickerController : UIImagePickerController {
}
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface ShakeTvViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, MMWebViewDelegate, JSEventExt, UIActionSheetDelegate> {
	MMTableView* _tableView;
	int m_uiShakeTvViewControllerShowStyle;
	BOOL _isModal;
	ShakeTvItem* _tvItem;
	UIView* _infoView;
	UIButton* _playBtn;
	UIImageView* _videoBgImgView;
	UIImageView* _videoRimImgView;
	MMWebImageView* _videoThumbImgView;
	MMWebViewController* _videoWebView;
	MMWebImageView* _actionImgView;
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
	UILabel* _sourceLabel;
	UILabel* _actionDescLabel;
	UIActivityIndicatorView* _activityIndicatorView;
	SendAppMsgHandler* _sendAppMsgHandler;
}
-(void)jsSetPageState:(id)state;
-(void)onWebViewDidRotateFromInterfaceOrientation:(int)onWebView;
-(id)getThumbImageData;
-(id)getMessageWrap:(id)wrap;
-(id)getUpLoadTask:(id)task;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onAction;
-(void)onReturn;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)stopLoading;
-(void)startLoading;
-(void)viewDidLoad;
-(void)initView;
-(void)openPlayUrl;
-(void)openPlayUrlLeftRightStyle;
-(void)initTableView;
-(void)initHeaderView:(int)view;
-(void)onPlayerExitFullscreen;
-(void)onPlayerEnterFullscreen;
-(void)dealloc;
-(id)initWithShakeTvItem:(id)shakeTvItem andModal:(BOOL)modal Style:(int)style;
@end

@interface ShakeTvTableViewCell : MMTableViewCell {
	MMWebImageView* _thumbImageView;
	MMHeadImageView* _headImageView;
	UILabel* _titleLabel;
}
-(void)dealloc;
-(void)updateWithShakeItemBase:(id)shakeItemBase;
@end

@interface FavTextDetailViewController : MMUIViewController <TextLayoutDelegate, ILinkEventExt, IContactMgrExt, IFavoritesExt, FavTextEditDelegate, UIActionSheetDelegate> {
	UIScrollView* m_scrollView;
	FavoritesItem* m_favItem;
	UIImageView* m_headImgView;
	UIView* m_separateLine;
	RichTextView* m_textLabel;
	UILabel* m_fromLabel;
	UILabel* m_sourceTimeLabel;
	UILabel* m_addFavTimeLabel;
	NSString* m_nsText;
	NSString* m_nsFrom;
	NSString* m_copyedText;
	FavForwardLogicController* m_favForwardController;
	MMAnimationTipView* m_tipView;
	MMDelegateProxy<FavTextDetailDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavTextDetailDelegate>* m_delegate;
-(void)onFavTextEditOK:(id)ok;
-(void)showMenuItemForText:(id)text withRect:(CGRect)rect;
-(void)onCopy:(id)copy;
-(void)onTextLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onPhoneLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onLinkLongPressed:(id)pressed withRect:(CGRect)rect;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onAction;
-(void)onMenuControllerWillHide:(id)onMenuController;
-(void)updateViewWithFavItem:(id)favItem;
-(void)initAddFavTimeLabel;
-(void)initTextLabel;
-(void)initSeparateLine;
-(void)initTimeLabel;
-(id)getContactDisplayName:(id)name;
-(id)getTextFrom;
-(void)initFromLabel;
-(void)initHeadImg;
-(void)initData;
-(void)onSwipeGestureRecognizer:(id)recognizer;
-(void)initGestureRecognizer;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithFavItem:(id)favItem;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
@end

@interface MMFavAddTipView : MMUIWindow {
	MMAnimationTipView* m_tipView;
	int _currentOrientation;
	float m_fShowDuration;
	float m_fFadeDuration;
	BOOL _shouldRestoreMainwindow;
}
@property(assign, nonatomic) float m_fFadeDuration;
@property(assign, nonatomic) float m_fShowDuration;
@property(assign, nonatomic) BOOL shouldRestoreMainwindow;
@property(retain, nonatomic) MMAnimationTipView* m_tipView;
-(void)layoutSubviewToOrientation:(int)orientation;
-(void)rotateToOrientation:(int)orientation;
-(void)rotateToCurrentOrientation;
-(void)showSaveResultTip:(id)tip andText:(id)text andDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface FavAddItemHelper : MMObject <IFavoritesExt, WCIntroViewDelegate, MMAnimationTipViewDelegate> {
	MMFavAddTipView* m_tipView;
	IntroView* m_favIntroView;
	BOOL isUsing;
	BOOL _shouldRestoreMainwindow;
}
@property(assign, nonatomic) BOOL shouldRestoreMainwindow;
@property(retain, nonatomic) MMFavAddTipView* m_tipView;
+(void)freeFavAddHelper;
+(id)getFavAddHelper;
-(void)dealloc;
-(void)onCloseIntroView;
-(void)onIKnowItBtnClick;
-(void)fadeShowEnd;
-(void)addFavItems:(id)items;
-(void)addFavItemWithNoTip:(id)noTip;
-(void)addFavItem:(id)item;
-(void)stopShowTip;
-(void)showSaveResultTip:(id)tip andText:(id)text;
-(void)initMMFavAddTipView;
-(id)init;
@end

@interface FavFullScreenImageView : MMUIWindow <UIScrollViewDelegate, scrollViewDelegate, FavImageFullScreenViewContainerDelegate, SessionSelectControllerDelegate> {
	UIView* m_fakeScreenView;
	CGRect m_originImageRectInScreen;
	BOOL m_isAnimating;
	MMScrollView* m_scrollView;
	UIPageControl* m_pageCtrl;
	UIView* m_blackMask;
	NSArray* m_arrMediaData;
	NSMutableArray* m_arrImage;
	unsigned long m_iCurIndex;
	BOOL m_hasScroll;
	int m_lastDeviceOrientation;
}
@property(assign, nonatomic) unsigned long m_iCurIndex;
+(void)freeFavFullScreenView;
+(id)getFavFullScreenView;
-(id).cxx_construct;
-(void)onVideoVoipViewDidAppear:(id)onVideoVoipView;
-(void)didDeviceRotate;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)onLongPressedWithMediaItem:(id)mediaItem;
-(void)captureScreen;
-(void)animationHideWithRotate;
-(void)onContainerAnimationHideStart;
-(void)onContainerAnimationShowStop;
-(void)onContainerAnimationShowStart;
-(void)onContainerAnimationHideStop;
-(void)animationHideStop;
-(BOOL)shouldHideContainerOnRotate;
-(BOOL)isContainerVisible:(id)visible;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(id)getVisibleViewController;
-(void)rotateToDeviceOrientation:(BOOL)deviceOrientation;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)downloadImage;
-(void)animationShowWithMediaDataArray:(id)mediaDataArray originView:(id)view index:(unsigned long)index;
-(void)animationShowWithImageViewArray:(id)imageViewArray index:(unsigned long)index;
-(void)animationShowWithHint:(id)hint;
-(void)resetScrollView;
-(void)clearStatus;
-(void)dealloc;
-(id)init;
@end

@interface FavImageFullScreenViewContainer : UIScrollView <UIScrollViewDelegate, MMImageScrollViewHelperDelegate, UIActionSheetDelegate> {
	FavoritesItem* m_favData;
	CGRect m_originImageRectInScreen;
	CGSize m_initalContentSize;
	UIImage* m_image;
	BOOL m_isAnimating;
	BOOL m_isShowing;
	BOOL m_bIsLongPressHandled;
	BOOL m_isImageReady;
	int m_lastDeviceOrientation;
	UIImageView* m_container;
	MMLoadingView* m_loadingView;
	MMProgressViewEx* m_processView;
	MMImageScrollViewHelper* m_scrollViewHelper;
	UIActionSheet* m_actionSheet;
	MMDelegateProxy<FavImageFullScreenViewContainerDelegate>* m_delegate;
}
@property(copy, nonatomic) NSArray* gestureRecognizers;
@property(assign, nonatomic) float maximumZoomScale;
@property(assign, nonatomic) float minimumZoomScale;
@property(assign, nonatomic) float zoomScale;
@property(assign, nonatomic) CGRect frame;
@property(readonly, assign, nonatomic) MMLoadingView* m_loadingView;
@property(assign, nonatomic) MMDelegateProxy<FavImageFullScreenViewContainerDelegate>* m_delegate;
@property(assign, nonatomic) CGSize m_initalContentSize;
@property(assign, nonatomic) CGRect m_originImageRectInScreen;
@property(retain, nonatomic) FavoritesItem* m_favData;
@property(retain, nonatomic) UIImage* m_image;
-(id).cxx_construct;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)LongPressEvents;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)animationRotateDidStop;
-(void)onDeviceRotate;
-(void)animationHideDidStop;
-(void)animationHideWithRotate;
-(CGAffineTransform)getAnimationRotateTransform;
-(void)tryDownloadImage;
-(void)setImageWithoutAnimation:(id)animation;
-(void)animationShowWithImageView:(id)imageView;
-(void)animationShowWithMediaItem:(id)mediaItem;
-(void)animationShowStep2;
-(void)animationShowStep2_Animate;
-(void)animationShowStep2_ImageNotReady;
-(void)animationShowDidStop;
-(void)animationShowView;
-(void)setContentOffsetAndSize;
-(void)clearStatus;
-(CGRect)getCenterRect:(CGSize)rect maxSize:(CGSize)size;
-(void)showProcessView;
-(void)initScrollViewHelper;
-(void)onDoubleTap:(id)tap;
-(void)onSingleTap:(id)tap;
-(id)viewForZooming;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)startLoadingBlocked;
-(void)setContentSize:(CGSize)size;
-(void)setContentOffset:(CGPoint)offset;
-(void)setZoomScale:(float)scale animated:(BOOL)animated;
-(void)dealloc;
-(void)stopAllAnimation;
-(id)init;
@end

@interface MyFavoritesViewController : MMSearchBarDisplayController <UITableViewDataSource, UITableViewDelegate, UIActionSheetDelegate, tableViewDelegate, scrollViewDelegate, ILinkEventExt, IFavoritesExt, FavAudioPlayerDelegate, FavAudioCellDelegate, MyFavFiltersViewDelegate, MyFavoritesBaseCellDelegate, FavImageViewDelegate, TextInputViewDelegate, MMIconActionSheetDelegate, MMImagePickerManagerDelegate, MMPickLocationViewControllerDelegate, ShareConfirmViewDelegate, FavTextDetailDelegate, FavFileDetailDelegate, FavVideoDetailDelegate, FavImgDetailDelegate, FavLocDetailDelegate, ProductDetailViewControllerDelegate, MMWebViewDelegate, FavVideoPlayDelegate, FavVoiceDetailDelegate, IFavPostVoiceViewExt, UIAlertViewDelegate, MMImagePickerManagerDelegate, FavLocRemarkDelegate> {
	NSMutableArray* m_arrFavData;
	NSMutableArray* m_arrFilterItems;
	NSMutableDictionary* m_cellViewCache;
	NSMutableDictionary* m_imageCellViewCache;
	UIView* m_emptyView;
	UIView* m_loadingView;
	UIView* m_switchLoadingView;
	UIView* m_noPicView;
	MMTableView* m_tableView;
	UIView* m_headView;
	UIButton* m_btnFilter;
	UIImageView* m_tipsView;
	UILabel* m_uploadFailLabel;
	UILabel* m_capFullLabel;
	UIView* m_footerView;
	UIActivityIndicatorView* m_activityView;
	UIButton* m_button;
	FavAudioPlayer* m_audioPlayer;
	BOOL m_bHasMoreData;
	BOOL m_bReadyToLoad;
	unsigned long m_playingItemId;
	unsigned long m_curMinItemUpdateTime;
	float m_contentOffsetAfterAdd;
	BOOL m_bSearching;
	int m_dataType;
	BOOL m_bFilterEnable;
	NSString* m_nsCopyText;
	NSString* m_nsCopyImgPath;
	NSString* m_nsCopyImgThumbPath;
	NSString* m_searchText;
	MMPickLocationViewController* m_locationViewCtrl;
	SelectLocationInfo* locInfo;
	MMViewLocationViewController* m_viewLocViewCtrl;
	ShareConfirmView* m_pasteConfirm;
	FavPostVoiceView* m_postVoiceView;
}
@property(retain, nonatomic) NSMutableArray* m_arrFavData;
-(void)restartAllFailedItem;
-(void)addPostItem:(id)item;
-(void)deleteFavItemAndPopViewByfavId:(unsigned long)anId;
-(void)onWebViewDelete:(id)aDelete;
-(void)onDelete:(id)aDelete;
-(void)DeleteImgFavItem:(id)item;
-(void)DeleteVoiceFavItem:(id)item;
-(void)DeleteVideoFavItemInPlayer:(id)player;
-(void)OpenVideo:(id)video;
-(void)DeleteVideoFavItem:(id)item;
-(void)OpenVideoFile:(id)file;
-(void)DeleteFileFavItem:(id)item;
-(void)DeleteLocFavItem:(id)item;
-(void)DeleteTextFavItem:(id)item;
-(void)PushXMLContentForItem:(id)item;
-(void)OnBackToApp:(id)app;
-(void)OnError:(id)error;
-(void)OnCancel:(id)cancel;
-(void)OnSend:(id)send;
-(void)onPasteToMyFav;
-(void)showAlertWithTitle:(id)title;
-(void)onPostFavLocItem:(id)item;
-(void)onCreatPostLocationView;
-(void)onCancelSeletctedLocation;
-(id)onGetRightBarButton;
-(void)onFavLocAddOK;
-(void)onFinishSelectedLocation;
-(void)OnClosePostAnimate;
-(void)OnFavPostVoiceClose;
-(void)OnFavPostVoiceComplete:(id)complete VoiceTime:(float)time VoiceFmt:(unsigned long)fmt;
-(void)OnMainThreadToPostVoice:(id)postVoice;
-(unsigned long)GetTmpAudioTime:(id)time;
-(void)onCreatePostVoiceView;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)PostFullResolutionImgWithALAsset:(id)alasset Finish:(BOOL)finish;
-(void)didselectFullImgWithImgUrl:(id)imgUrl Finish:(BOOL)finish;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)onTakePhotoForPost;
-(void)onCreatePostImageView;
-(void)showImagePicker:(int)picker;
-(void)onTextInputComplete:(id)complete WithTag:(int)tag;
-(void)onCreatePostTextView;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet didSelectWithItem:(id)item;
-(void)AddNewActionSheetCell2Array:(id)array WithText:(id)text WithImage:(id)image Enable:(BOOL)enable;
-(void)onShowPostActionSheet;
-(void)getItemsForImageType;
-(void)getItemsForNormalType;
-(void)onBtnFilter;
-(void)hideTips;
-(void)showCapacityExceedTips;
-(void)showUploadFailTips;
-(void)onClickFavImage:(id)image;
-(void)onClickOnType:(int)type;
-(void)OnEarTip;
-(void)OnEndPlaying:(unsigned long)playing isForceStop:(BOOL)stop;
-(void)OnBeginPlaying:(unsigned long)playing ErrNo:(int)no;
-(void)OnAudioItemClicked:(id)clicked ToPlay:(BOOL)play;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)OnRemoveFavoritesItem;
-(void)OnSearch:(id)search;
-(void)updateCellView:(id)view;
-(void)OnFavoritesItemDownloadFinished:(id)finished ErrCode:(int)code;
-(void)OnUpdateItemDescription:(id)description ErrCode:(int)code;
-(void)OnUpdateItemRemark:(unsigned long)remark ErrCode:(int)code;
-(void)OnAddFavoritesItem:(id)item ErrCode:(int)code;
-(void)OnNewFavoritesItemUpdate:(id)update;
-(void)OnGetNextPageFavoritesItemList:(id)list ErrCode:(int)code HasMoreItems:(BOOL)items;
-(void)OnGetFirstPageFavoritesItemList:(id)list ErrCode:(int)code HasMoreItems:(BOOL)items;
-(void)OnHasAnyFavoriteData:(BOOL)data;
-(void)stopActivityLoading;
-(float)getContentOffsetAfterAdd:(id)add;
-(float)heightForItem:(id)item;
-(unsigned long)getFirstVisibleTime;
-(void)safeAddItemList:(id)list;
-(BOOL)isValidItem:(id)item;
-(BOOL)isItemInArray:(unsigned long)array;
-(int)indexOfFavItem:(unsigned long)favItem;
-(void)onLoadMore;
-(void)initData;
-(void)touchesCancelled_TableView:(id)view withEvent:(id)event;
-(void)touchesEnded_TableView:(id)view withEvent:(id)event;
-(void)touchesMoved_TableView:(id)view withEvent:(id)event;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)selectDefaultItem:(id)item;
-(void)selectGoodsItem:(id)item;
-(void)selectFileItem:(id)item;
-(void)selectLocItem:(id)item;
-(void)selectMusicItem:(id)item;
-(void)selectVoiceItem:(id)item;
-(void)selectVideoItem:(id)item;
-(void)selectUrlItem:(id)item;
-(void)selectImgItem:(id)item;
-(void)selectTextItem:(id)item;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)genFilterCellView:(id)view indexPath:(id)path;
-(void)genImgCell:(id)cell indexPath:(id)path;
-(int)calcImgItemIndex:(int)index num:(int)num;
-(void)genNormalCell:(id)cell indexPath:(id)path;
-(float)getHeightForItem:(id)item;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)showTimeLabel:(unsigned long)label show:(BOOL)show;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)resetTableViewOffset:(id)offset;
-(void)cancelSearch;
-(int)getFirstNormalItemIndex;
-(void)willDisshow;
-(void)willDisappear;
-(void)cancelSelectCell;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)showNoPicView;
-(void)initEmptyView;
-(void)initSwithLoadingView;
-(void)initLoadingView;
-(void)initTableFooterView;
-(void)updateTableFooterHasMore:(BOOL)more;
-(void)initHeaderView;
-(void)initTableView;
-(id)genLabel:(id)label;
-(void)setViewTitle;
-(void)initNavigationBar;
-(void)viewDidLoad;
-(id)init;
-(void)clearFavCache;
-(void)HideLoadingView;
-(void)reloadTableView;
@end

@interface MMCDNImageView : MMUIImageView {
	UIImage* _defaultImage;
	NSString* _localSrcPath;
	NSString* _cdnUrl;
	NSString* _aesKey;
	unsigned long _datasize;
	NSString* _clientID;
	BOOL _isCompressImage;
	BOOL _isloaded;
	BOOL _autoDownloadNoWifi;
}
@property(assign, nonatomic) BOOL autoDownloadNoWifi;
@property(assign, nonatomic) BOOL isCompressImage;
@property(assign, nonatomic) unsigned long dataSize;
@property(retain, nonatomic) NSString* aesKey;
@property(retain, nonatomic) NSString* cdnUrl;
@property(retain, nonatomic) NSString* localSrcPath;
-(void)stopLoadingImage;
-(BOOL)startLoadingImage;
-(void)loadingImageWithGCD;
-(id)compressImage:(id)image;
-(void)setDefaultImage:(id)image;
-(void)dealloc;
@end

@interface RsaCertInfo : NSObject <NSCoding> {
	unsigned long m_uiCertVersion;
	NSString* m_nsCertE;
	NSString* m_nsCertN;
}
@property(retain, nonatomic) NSString* m_nsCertN;
@property(retain, nonatomic) NSString* m_nsCertE;
@property(assign, nonatomic) unsigned long m_uiCertVersion;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface RsaCertMgr : MMService <MMService, PBMessageObserverDelegate> {
	NSRecursiveLock* m_oLock;
	RsaCertInfo* m_oRsaCertInfo;
	BOOL m_bCanAuth;
	BOOL m_bHandleAuto;
}
+(id)GetPathOfRsaCertInfo;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandlegetCertOK:(id)ok;
-(void)HandleGetCertFail;
-(BOOL)CreateGetCert;
-(void)HandleGetCert:(BOOL)cert;
-(BOOL)IsCanAutoAuth;
-(void)SetAuthFlag:(BOOL)flag;
-(id)GetRsaCertInfo;
-(void)SaveRsaCertInfo;
-(void)LoadRsaCertInfo;
-(void)dealloc;
-(id)init;
@end

@interface FavoritesBatchGetMgr : MMObject <PBMessageObserverDelegate> {
	FavoritesItemDB* _favItemDB;
	NSMutableArray* _batchGetArray;
	MMDelegateProxy<FavoritesBatchGetMgrDelegate>* _delegate;
	BOOL _isGetting;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesBatchGetMgrDelegate>* delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleBatchGetFavItemResp:(id)resp Event:(unsigned long)event;
-(void)asyncDoAddNewItemList:(id)list;
-(void)TryStartBatchGet;
-(void)addBatchGetFavoritesItemList:(id)list;
-(void)dealloc;
-(void)initDB:(id)db;
-(id)init;
@end

@interface MyFavoriteFooterView : MMRefreshTableFooterView {
	UIActivityIndicatorView* m_activityIndicatorView;
	UILabel* m_label;
	unsigned long m_lineViewWidth;
}
@property(assign, nonatomic) unsigned long m_lineViewWidth;
@property(retain, nonatomic) UILabel* m_label;
@property(retain, nonatomic) UIActivityIndicatorView* m_activityIndicatorView;
-(void)onStateOfNoData:(id)noData;
-(void)onStateOfNoMoreData:(id)noMoreData;
-(void)onStateOfLoading;
-(void)onStateOfNormal;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MyFavFilterBtn : MMUIButton {
}
-(void)setSelected:(BOOL)selected;
-(id)initwithImage:(id)image HLImage:(id)image2 Title:(id)title;
@end

@interface FavMultiImageBrowseViewController : MMFullScreenViewController <UIActionSheetDelegate, MultiImageScrollViewDelegate, IFavoritesExt> {
	MultiImageScrollView* pagingScrollView;
	NSMutableDictionary* m_dicFavItemStatus;
	NSMutableArray* m_arrFavItem;
	NSMutableArray* m_arrImageScrollView;
	unsigned long m_iCurIndex;
	FavForwardLogicController* m_favForwardController;
	MMDelegateProxy<FavImgDetailDelegate>* m_delegate;
	BOOL m_bCanBeForward;
}
@property(assign, nonatomic) MMDelegateProxy<FavImgDetailDelegate>* m_delegate;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)viewAtPage:(unsigned long)page frame:(CGRect)frame;
-(void)onChangePage;
-(void)updateDownloadView:(id)view index:(unsigned long)index;
-(id)imageAtPage:(unsigned long)page;
-(void)delayStartDownloadImg:(id)img;
-(void)startDownloadForIndex:(unsigned long)index;
-(void)downloadOK:(id)ok;
-(void)downloadFail:(id)fail;
-(void)OnDownloadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)OnFavoritesItemDownloadFinished:(id)finished ErrCode:(int)code;
-(void)updateDownloadPartLen:(unsigned long)len TotalLen:(unsigned long)len2 view:(id)view;
-(id)genDataLength:(unsigned long)length;
-(id)getImageFor:(id)aFor;
-(id)compressImage:(id)image;
-(unsigned long)getIndexFor:(id)aFor;
-(id)getFavItemFor:(unsigned long)aFor;
-(void)setStatusFor:(id)aFor status:(unsigned long)status;
-(unsigned long)getStatusFor:(id)aFor;
-(void)dealloc;
-(void)adjustSubviewRects;
-(void)deleteImgItemAtIndex:(unsigned long)index;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onOperate;
-(void)handleLongPressEx:(id)ex;
-(void)initNavigationBar;
-(void)viewDidLoad;
-(void)uninitLogic;
-(void)willAppear;
-(void)viewWillBePushed:(BOOL)view;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)viewWillBePoped:(BOOL)view;
-(void)showStatusBar;
-(void)onSingleTap:(id)tap;
-(void)updateToolbar:(BOOL)toolbar;
-(void)initScrollView;
-(id)initWithFavArray:(id)favArray CurrentIndex:(int)index;
@end

@interface CgiTestMgr : MMService <MMService> {
	NSRecursiveLock* m_oLock;
	BOOL m_bHandlePacket;
}
-(BOOL)IsHandlePacket:(unsigned long)packet;
-(void)SetHandlePacket:(BOOL)packet;
-(void)dealloc;
-(id)init;
@end

@interface MMUIAlertView : UIAlertView <MMDelegateCenterExt> {
	MMDelegateProxy<UIAlertViewDelegate>* delegateProxy;
}
-(void)dealloc;
-(void)onClearMyDelegate:(id)delegate forProtocols:(id)protocols;
-(void)setDelegate:(id)delegate;
-(id)initWithTitle:(id)title message:(id)message delegate:(id)delegate cancelButtonTitle:(id)title4 otherButtonTitles:(id)titles;
@end

@interface FavImageView : MMUIImageView <IFavoritesExt> {
	FavoritesItem* m_favItem;
	int m_imageType;
	int m_imageStyle;
	UIButton* m_bgButton;
	UIView* m_maskView;
	MMCDNImageView* m_CDNImageView;
	NSString* m_imageLocalPath;
	NSString* m_imageCDNUrl;
	NSString* m_imageAesKey;
	unsigned long m_imageSize;
	NSString* m_nsUserName;
	UIView* m_highLightView;
	BOOL m_bIsImageExit;
	BOOL m_bIsSourceImg;
	MMDelegateProxy<FavImageViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavImageViewDelegate>* m_delegate;
-(void)OnFavoritesItemDownloadFinished:(id)finished ErrCode:(int)code;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)hideMaskView;
-(void)showMaskView;
-(void)onClickFavImage;
-(void)initImage;
-(void)initData;
-(void)initView;
-(id)initWithFavItem:(id)favItem imageType:(int)type;
-(void)dealloc;
@end

@interface EmoticonStoreViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, EmoticonStoreMgrExt, EmoticonStoreCellDelegate, MMRefreshTableFooterDelegate, UIGestureRecognizerDelegate, EmoticonBoughtListMgrExt, UIScrollViewDelegate, LoopPageScrollViewDataSourceDelegate> {
	unsigned long m_extrance;
	NSString* m_storeSessionID;
	NSMutableArray* m_arrStoreItem;
	NSMutableArray* m_storeAds;
	MMTableView* m_tableView;
	EmoticonStoreFootView* m_tailView;
	BOOL isLoadedFromCache;
	unsigned long m_scence;
	EmoticonStoreItem* m_currentPurchaseItem;
	MMWebImageView* m_bannerImageView;
	UIPageControl* m_pageControl;
	LoopPageScrollView* m_bannerView;
	NSTimer* m_timer;
}
@property(retain, nonatomic) NSTimer* m_timer;
@property(retain, nonatomic) LoopPageScrollView* m_bannerView;
@property(retain, nonatomic) UIPageControl* m_pageControl;
@property(assign, nonatomic) unsigned long m_scence;
@property(retain, nonatomic) MMWebImageView* m_bannerImageView;
@property(retain, nonatomic) EmoticonStoreItem* m_currentPurchaseItem;
@property(retain, nonatomic) EmoticonStoreFootView* m_tailView;
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_storeAds;
@property(retain, nonatomic) NSMutableArray* m_arrStoreItem;
@property(retain, nonatomic) NSString* m_storeSessionID;
@property(assign, nonatomic) unsigned long m_extrance;
-(void)didTapPageAtNum:(unsigned long)num;
-(void)didChangeToPage:(unsigned long)page;
-(int)totalNumOfPage;
-(id)viewForPage:(id)page pageNum:(unsigned long)num;
-(void)OnRestoreEmoticonItemSuccess;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)OnStoreListChanged:(id)changed withRet:(int)ret;
-(void)OnExchangedAfterBuySuccess:(BOOL*)success;
-(void)OnBuyEmoticonItemCancelAlert:(id)alert ShouldShow:(BOOL*) CanNotMakePayment:(id)payment;
-(void)OnBuyEmoticonItemCancelAlert:(id)alert ShouldShow:(BOOL*) byJailbreakError:(id)error;
-(void)OnBuyEmoticonItemAlertStepOne:(id)one ShouldShow:(BOOL*);
-(void)OnEmoticonStoreDownloadBeforeFailed_StepOne:(id)one ShouldContinueToNextStep:(BOOL*);
-(void)didFinishedLoading:(id)loading;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)OnShowAlertWithIKnow:(id)iknow;
-(void)OnShowAlertWithOK:(id)ok;
-(void)OnStopLoading;
-(void)OnStartLoadingAndShowStringBlocked:(id)blocked;
-(void)OnStopLoadingAndShowError:(id)error;
-(void)OnStopLoadingAndShowOK:(id)ok;
-(void)OnStartLoadingAndShowString:(id)string;
-(void)OnCancelModalView:(id)view;
-(void)reloadData;
-(id)initWithScence:(unsigned long)scence;
-(void)initTableFooterView;
-(void)initTableHeaderView;
-(void)initTableView;
-(void)willAppear;
-(void)onOperate;
-(void)changeBannerToNextPage;
-(void)initBannerPageTimer;
-(void)initView;
-(void)reloadAdFromMgr;
-(void)initData;
-(void)viewDidLoad;
-(id)init;
-(void)dealloc;
@end

@interface JSShareFBLogicHelper : MMObject <ShareConfirmViewDelegate, PBMessageObserverDelegate> {
	ShareConfirmView* _confirmView;
	unsigned long fbEventID;
	MMDelegateProxy<JSShareFBLogicHelperDelegate>* _delegate;
	NSString* _link;
	NSString* _thumbImageUrl;
}
@property(retain, nonatomic) NSString* thumbImageUrl;
@property(retain, nonatomic) NSString* link;
@property(assign, nonatomic) MMDelegateProxy<JSShareFBLogicHelperDelegate>* delegate;
-(void)rotateToOrientaion:(int)orientaion;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnError:(id)error;
-(void)OnCancel:(id)cancel;
-(void)OnSend:(id)send;
-(void)showConfirmView;
-(void)initConfirmViewWithTitle:(id)title description:(id)description thumbURL:(id)url;
-(void)dealloc;
-(id)initWithTitle:(id)title link:(id)link description:(id)description thumbURL:(id)url;
@end

@interface FavVoiceDetaiViewController : MMUIViewController <IContactMgrExt, FavVoiceViewDelegate, FavAudioPlayerDelegate, UIActionSheetDelegate> {
	FavoritesItem* m_favItem;
	UIScrollView* m_scrollView;
	MMHeadImageView* m_headImg;
	UIView* m_separateLine;
	UILabel* m_fromLabel;
	UILabel* m_sourceTimeLabel;
	UILabel* m_addFavTimeLabel;
	UIButton* m_voicePlayBtn;
	UIImageView* m_voiceLine;
	UIImageView* m_progressBgView;
	UILabel* m_voiceTimeLabel;
	MMProgressView* m_voiceProgressView;
	FavVoiceView* m_voiceView;
	NSString* m_nsFromUser;
	NSString* m_nsVoicePath;
	double m_iVoiceTime;
	unsigned long m_uiVoiceFmt;
	NSTimer* m_playTimer;
	double m_playedTime;
	FavAudioPlayer* m_audioPlayer;
	int m_playStatus;
	BOOL m_bIsBtnEnable;
	MMDelegateProxy<FavVoiceDetailDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavVoiceDetailDelegate>* m_delegate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onAction;
-(void)onVoicePlaying;
-(void)stopTimer;
-(void)OnEarTip;
-(void)OnEndPlaying:(unsigned long)playing isForceStop:(BOOL)stop;
-(void)OnBeginPlaying:(unsigned long)playing ErrNo:(int)no;
-(void)OnVoiceNodeClicked:(BOOL)clicked;
-(void)initAddFavTimeLabel;
-(void)BeginPlay;
-(void)StopPlay;
-(void)RestartPlay;
-(void)PausePlay;
-(void)onBtnVoice;
-(void)initVoiceProgressView;
-(void)initVoicePlayBtn;
-(void)initVoiceView;
-(void)initSeparateLine;
-(void)initSourceTimeLabel;
-(id)getContactDisplayName:(id)name;
-(id)getVoiceFrom;
-(void)initFromLabel;
-(void)initHeadImg;
-(void)initView;
-(void)initData;
-(void)onSwipeGestureRecognizer:(id)recognizer;
-(void)initGestureRecognizer;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithFavItem:(id)favItem;
@end

@interface FavFileDetailViewController : MMUIViewController <UIAlertViewDelegate, INetworkStatusMgrExt, IFavoritesExt, UIActionSheetDelegate> {
	FavoritesItem* m_favItem;
	UIImageView* m_imageView;
	UILabel* m_labFileName;
	MMProgressView* m_progressBar;
	UILabel* m_labProgress;
	UIButton* m_btnFileOpen;
	UIButton* m_btnOpenByApp;
	UILabel* m_labelSyncTip;
	UIButton* m_labelSync;
	UIView* m_capExceedView;
	UIDocumentInteractionController* m_vcDocument;
	int syncStautus;
	BOOL m_bIsUnkownType;
	NSString* m_nsDataPath;
	NSString* m_nsFileName;
	unsigned long m_uiFileSize;
	unsigned long m_uiPreviewType;
	BOOL m_bFileExit;
	FavForwardLogicController* m_favForwardController;
	MMDelegateProxy<FavFileDetailDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavFileDetailDelegate>* m_delegate;
-(void)updateRightBtn;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onAction;
-(void)onNetworkStatusChange:(unsigned long)change;
-(void)OnFavoritesItemStartAsyncUpload:(id)upload;
-(void)OnAddFavoritesItem:(id)item ErrCode:(int)code;
-(void)OnUploadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)OnFavoritesItemDownloadFinished:(id)finished ErrCode:(int)code;
-(void)OnDownloadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(id)GetShowStringBySize:(unsigned long)size;
-(void)SetProgress:(float)progress TotalSize:(float)size;
-(void)StopSync;
-(void)StartSync;
-(void)OpenByApp;
-(void)OpenFile;
-(void)showVideoExpire;
-(void)showSyncComplete;
-(void)showDownloading;
-(void)showUploading;
-(void)showNeedDownload;
-(void)showNeedUpload;
-(void)updateBtns;
-(void)updateStatus;
-(id)getFileImgByPreviewType;
-(unsigned long)getPreviewType;
-(void)initView;
-(void)updateData;
-(void)onSwipeGestureRecognizer:(id)recognizer;
-(void)initGestureRecognizer;
-(void)viewDidLoad;
-(void)SafeDeleteDocument;
-(void)dealloc;
-(id)initWithFavItem:(id)favItem;
@end

@interface FavVideoDetailViewController : MMUIViewController <UIAlertViewDelegate, INetworkStatusMgrExt, IFavoritesExt, MMWebViewDelegate, UIActionSheetDelegate> {
	FavoritesItem* m_favItem;
	UIImageView* m_imageView;
	MMProgressView* m_progressBar;
	UILabel* m_labProgress;
	UIButton* m_btnVideoOpen;
	UIButton* m_btnVideoPlay;
	UIButton* m_btnOpenByApp;
	UIView* m_syncView;
	UILabel* m_labelSyncTip;
	UIButton* m_labelSync;
	UIDocumentInteractionController* m_vcDocument;
	int syncStautus;
	BOOL m_bIsUnkownType;
	BOOL m_bIsFileExit;
	NSString* m_nsVideoPath;
	NSString* m_nsSteamUrl;
	unsigned long m_uiVideoSize;
	MMWebViewController* m_webViewController;
	UIView* m_loadingView;
	FavForwardLogicController* m_favForwardController;
	MMDelegateProxy<FavVideoDetailDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavVideoDetailDelegate>* m_delegate;
-(void)updateRightBtn;
-(void)handleLongPressEx:(id)ex;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onAction;
-(void)onWebViewDidRotateFromInterfaceOrientation:(int)onWebView;
-(void)onNetworkStatusChange:(unsigned long)change;
-(void)OnAddFavoritesItem:(id)item ErrCode:(int)code;
-(void)OnUploadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)OnFavoritesItemDownloadFinished:(id)finished ErrCode:(int)code;
-(void)OnDownloadFavoritesItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(id)GetShowStringBySize:(unsigned long)size;
-(void)SetProgress:(float)progress TotalSize:(float)size;
-(void)StopSync;
-(void)StartSync;
-(void)OpenByApp;
-(void)PreViewVideo;
-(void)OpenVideo;
-(void)showVideoExpire;
-(void)showSyncComplete;
-(void)showDownloading;
-(void)showUploading;
-(void)showNeedDownload;
-(void)showNeedUpload;
-(void)updateBtns;
-(void)updateStatus;
-(void)initView;
-(void)updateData;
-(void)onSwipeGestureRecognizer:(id)recognizer;
-(void)initGestureRecognizer;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)SafeDeleteDocument;
-(void)dealloc;
-(id)initWithFavItem:(id)favItem;
@end

@interface MMProductController : NSObject <SKStoreProductViewControllerDelegate> {
	NSString* productId;
	NSString* callbackUrl;
	UIViewController* pushViewController;
}
@property(retain) UIViewController* pushViewController;
@property(copy) NSString* callbackUrl;
@property(copy) NSString* productId;
+(id)sharedControllerWithProductId:(id)productId callbackUrl:(id)url;
+(BOOL)isAvailable;
-(void)productViewControllerDidFinish:(id)productViewController;
-(void)showInViewController:(id)viewController;
-(void)dealloc;
-(id)initWithProductId:(id)productId callbackUrl:(id)url;
@end

@interface WCPayPayMoneyFromQRCodeLogic : WCPayPayMoneyLogic {
}
-(id)gotoViewController:(Class)controller withData:(id)data;
-(id)gotoViewController:(Class)controller withData:(id)data Present:(BOOL)present;
-(id)gotoViewController:(Class)controller withData:(id)data Title:(id)title HeadTip:(id)tip;
-(void)startLogic;
@end

@interface PBSessionCacheItem : PBGeneratedMessage {
	unsigned hasIsTop : 1;
	unsigned hasShowUnReadAsRedDot : 1;
	unsigned hasUserName : 1;
	unsigned hasCreateTime : 1;
	unsigned hasUnReadCount : 1;
	unsigned isTop_ : 1;
	unsigned showUnReadAsRedDot_ : 1;
	NSString* userName;
	unsigned createTime;
	unsigned unReadCount;
}
@property(assign) BOOL showUnReadAsRedDot;
@property(assign) BOOL hasShowUnReadAsRedDot;
@property(assign) BOOL isTop;
@property(assign) BOOL hasIsTop;
@property(assign) BOOL hasUnReadCount;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasUserName;
@property(assign) unsigned unReadCount;
@property(assign) unsigned createTime;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetShowUnReadAsRedDot:(BOOL)dot;
-(id)SetIsTop:(BOOL)top;
-(id)SetUnReadCount:(unsigned)count;
-(id)SetCreateTime:(unsigned)time;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(id)toSessionInfo;
-(void)setFromSessionInfo:(id)sessionInfo;
@end

@interface PBSessionCacheData : PBGeneratedMessage {
	NSMutableArray* mutableArrSessionCacheItemList;
}
@property(retain) NSMutableArray* mutableArrSessionCacheItemList;
+(id)parseFromData:(id)data;
-(id)addArrSessionCacheItemFromArray:(id)array;
-(id)addArrSessionCacheItem:(id)item;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)arrSessionCacheItemList;
-(id)init;
-(void)dealloc;
@end

@interface PBBottleSessionCacheItem : PBGeneratedMessage {
	unsigned hasRealBottle : 1;
	unsigned hasBottleLocalId : 1;
	unsigned hasBottleParentId : 1;
	unsigned hasBottleStatus : 1;
	unsigned hasCreateTime : 1;
	unsigned hasUnReadCount : 1;
	unsigned realBottle_ : 1;
	unsigned bottleLocalId;
	unsigned bottleParentId;
	unsigned bottleStatus;
	unsigned createTime;
	unsigned unReadCount;
	NSMutableArray* mutableLocalIdsList;
	int localIdsMemoizedSerializedSize;
}
@property(retain) NSMutableArray* mutableLocalIdsList;
@property(assign) BOOL realBottle;
@property(assign) BOOL hasRealBottle;
@property(assign) BOOL hasUnReadCount;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasBottleStatus;
@property(assign) BOOL hasBottleParentId;
@property(assign) BOOL hasBottleLocalId;
@property(assign) unsigned unReadCount;
@property(assign) unsigned createTime;
@property(assign) unsigned bottleStatus;
@property(assign) unsigned bottleParentId;
@property(assign) unsigned bottleLocalId;
+(id)parseFromData:(id)data;
-(id)addLocalIdsFromArray:(id)array;
-(id)addLocalIds:(unsigned)ids;
-(id)SetRealBottle:(BOOL)bottle;
-(id)SetUnReadCount:(unsigned)count;
-(id)SetCreateTime:(unsigned)time;
-(id)SetBottleStatus:(unsigned)status;
-(id)SetBottleParentId:(unsigned)anId;
-(id)SetBottleLocalId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)localIdsList;
-(id)init;
-(void)dealloc;
-(id)toSessionInfo;
-(void)setFromSessionInfo:(id)sessionInfo;
@end

@interface PBBaseContact : PBGeneratedMessage {
	unsigned hasMobileIdentify : 1;
	unsigned hasQqremark : 1;
	unsigned hasQqnickName : 1;
	unsigned hasDraft : 1;
	unsigned hasHeadHdimgUrl : 1;
	unsigned hasHeadImgUrl : 1;
	unsigned hasHdimgStatus : 1;
	unsigned hasImgStatus : 1;
	unsigned hasRemarkPyfull : 1;
	unsigned hasRemarkPyshort : 1;
	unsigned hasRemark : 1;
	unsigned hasFullPy : 1;
	unsigned hasNickName : 1;
	unsigned hasAliasName : 1;
	unsigned hasUserName : 1;
	unsigned hasExtKeyAtLastGet : 1;
	unsigned hasImgKeyAtLastGet : 1;
	unsigned hasExtKey : 1;
	unsigned hasImgKey : 1;
	unsigned hasFriendScene : 1;
	unsigned hasConType : 1;
	unsigned hasQquin : 1;
	unsigned hasChatState : 1;
	unsigned hasType : 1;
	unsigned hasSex : 1;
	NSString* mobileIdentify;
	NSString* qqremark;
	NSString* qqnickName;
	NSString* draft;
	NSString* headHdimgUrl;
	NSString* headImgUrl;
	NSString* hdimgStatus;
	NSString* imgStatus;
	NSString* remarkPyfull;
	NSString* remarkPyshort;
	NSString* remark;
	NSString* fullPy;
	NSString* nickName;
	NSString* aliasName;
	NSString* userName;
	unsigned extKeyAtLastGet;
	unsigned imgKeyAtLastGet;
	unsigned extKey;
	unsigned imgKey;
	unsigned friendScene;
	unsigned conType;
	unsigned qquin;
	unsigned chatState;
	unsigned type;
	unsigned sex;
}
@property(assign) BOOL hasExtKeyAtLastGet;
@property(assign) BOOL hasImgKeyAtLastGet;
@property(assign) BOOL hasExtKey;
@property(assign) BOOL hasImgKey;
@property(assign) BOOL hasFriendScene;
@property(assign) BOOL hasMobileIdentify;
@property(assign) BOOL hasQqremark;
@property(assign) BOOL hasQqnickName;
@property(assign) BOOL hasQquin;
@property(assign) BOOL hasDraft;
@property(assign) BOOL hasHeadHdimgUrl;
@property(assign) BOOL hasHeadImgUrl;
@property(assign) BOOL hasHdimgStatus;
@property(assign) BOOL hasImgStatus;
@property(assign) BOOL hasChatState;
@property(assign) BOOL hasType;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasRemarkPyfull;
@property(assign) BOOL hasRemarkPyshort;
@property(assign) BOOL hasRemark;
@property(assign) BOOL hasFullPy;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasConType;
@property(assign) BOOL hasAliasName;
@property(assign) BOOL hasUserName;
@property(assign) unsigned extKeyAtLastGet;
@property(assign) unsigned imgKeyAtLastGet;
@property(assign) unsigned extKey;
@property(assign) unsigned imgKey;
@property(assign) unsigned friendScene;
@property(retain) NSString* mobileIdentify;
@property(retain) NSString* qqremark;
@property(retain) NSString* qqnickName;
@property(assign) unsigned qquin;
@property(retain) NSString* draft;
@property(retain) NSString* headHdimgUrl;
@property(retain) NSString* headImgUrl;
@property(retain) NSString* hdimgStatus;
@property(retain) NSString* imgStatus;
@property(assign) unsigned chatState;
@property(assign) unsigned type;
@property(assign) unsigned sex;
@property(retain) NSString* remarkPyfull;
@property(retain) NSString* remarkPyshort;
@property(retain) NSString* remark;
@property(retain) NSString* fullPy;
@property(retain) NSString* nickName;
@property(assign) unsigned conType;
@property(retain) NSString* aliasName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetExtKeyAtLastGet:(unsigned)lastGet;
-(id)SetImgKeyAtLastGet:(unsigned)lastGet;
-(id)SetExtKey:(unsigned)key;
-(id)SetImgKey:(unsigned)key;
-(id)SetFriendScene:(unsigned)scene;
-(id)SetMobileIdentify:(id)identify;
-(id)SetQqremark:(id)qqremark;
-(id)SetQqnickName:(id)name;
-(id)SetQquin:(unsigned)qquin;
-(id)SetDraft:(id)draft;
-(id)SetHeadHdimgUrl:(id)url;
-(id)SetHeadImgUrl:(id)url;
-(id)SetHdimgStatus:(id)status;
-(id)SetImgStatus:(id)status;
-(id)SetChatState:(unsigned)state;
-(id)SetType:(unsigned)type;
-(id)SetSex:(unsigned)sex;
-(id)SetRemarkPyfull:(id)pyfull;
-(id)SetRemarkPyshort:(id)pyshort;
-(id)SetRemark:(id)remark;
-(id)SetFullPy:(id)py;
-(id)SetNickName:(id)name;
-(id)SetConType:(unsigned)type;
-(id)SetAliasName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(void)setFromCBaseContact:(id)cbaseContact;
-(id)toCBaseContact;
@end

@interface PBCContact : PBGeneratedMessage {
	unsigned hasBrandIconUrl : 1;
	unsigned hasSubscriptedBrands : 1;
	unsigned hasBrandSubscriptConfigUrl : 1;
	unsigned hasExternalInfo : 1;
	unsigned hasWcbgimgId : 1;
	unsigned hasWcbgimgObjectId : 1;
	unsigned hasFbid : 1;
	unsigned hasFbnickName : 1;
	unsigned hasWeiboNickName : 1;
	unsigned hasWeiboAddress : 1;
	unsigned hasOwner : 1;
	unsigned hasCertInfoExt : 1;
	unsigned hasCertificationInfo : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasCountry : 1;
	unsigned hasChatRoomData : 1;
	unsigned hasChatRoomMemList : 1;
	unsigned hasQqmblog : 1;
	unsigned hasBaseContact : 1;
	unsigned hasCertificationFlag : 1;
	unsigned hasPersonalCardStatus : 1;
	unsigned hasWeiboFlag : 1;
	unsigned hasNeedUpdate : 1;
	unsigned hasWcflag : 1;
	unsigned hasChatRoomStatus : 1;
	unsigned hasBrandSubscriptionSettings : 1;
	NSString* brandIconUrl;
	NSString* subscriptedBrands;
	NSString* brandSubscriptConfigUrl;
	NSString* externalInfo;
	NSString* wcbgimgId;
	NSString* wcbgimgObjectId;
	NSString* fbid;
	NSString* fbnickName;
	NSString* weiboNickName;
	NSString* weiboAddress;
	NSString* owner;
	NSString* certInfoExt;
	NSString* certificationInfo;
	NSString* signature;
	NSString* city;
	NSString* province;
	NSString* country;
	NSString* chatRoomData;
	NSString* chatRoomMemList;
	NSString* qqmblog;
	PBBaseContact* baseContact;
	unsigned certificationFlag;
	unsigned personalCardStatus;
	unsigned weiboFlag;
	unsigned needUpdate;
	unsigned wcflag;
	unsigned chatRoomStatus;
	unsigned brandSubscriptionSettings;
}
@property(assign) BOOL hasBrandIconUrl;
@property(assign) BOOL hasSubscriptedBrands;
@property(assign) BOOL hasBrandSubscriptionSettings;
@property(assign) BOOL hasBrandSubscriptConfigUrl;
@property(assign) BOOL hasExternalInfo;
@property(assign) BOOL hasWcbgimgId;
@property(assign) BOOL hasWcflag;
@property(assign) BOOL hasWcbgimgObjectId;
@property(assign) BOOL hasNeedUpdate;
@property(assign) BOOL hasFbid;
@property(assign) BOOL hasFbnickName;
@property(assign) BOOL hasWeiboFlag;
@property(assign) BOOL hasWeiboNickName;
@property(assign) BOOL hasWeiboAddress;
@property(assign) BOOL hasOwner;
@property(assign) BOOL hasCertInfoExt;
@property(assign) BOOL hasCertificationInfo;
@property(assign) BOOL hasCertificationFlag;
@property(assign) BOOL hasPersonalCardStatus;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasChatRoomData;
@property(assign) BOOL hasChatRoomStatus;
@property(assign) BOOL hasChatRoomMemList;
@property(assign) BOOL hasQqmblog;
@property(assign) BOOL hasBaseContact;
@property(retain) NSString* brandIconUrl;
@property(retain) NSString* subscriptedBrands;
@property(assign) unsigned brandSubscriptionSettings;
@property(retain) NSString* brandSubscriptConfigUrl;
@property(retain) NSString* externalInfo;
@property(retain) NSString* wcbgimgId;
@property(assign) unsigned wcflag;
@property(retain) NSString* wcbgimgObjectId;
@property(assign) unsigned needUpdate;
@property(retain) NSString* fbid;
@property(retain) NSString* fbnickName;
@property(assign) unsigned weiboFlag;
@property(retain) NSString* weiboNickName;
@property(retain) NSString* weiboAddress;
@property(retain) NSString* owner;
@property(retain) NSString* certInfoExt;
@property(retain) NSString* certificationInfo;
@property(assign) unsigned certificationFlag;
@property(assign) unsigned personalCardStatus;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(retain) NSString* country;
@property(retain) NSString* chatRoomData;
@property(assign) unsigned chatRoomStatus;
@property(retain) NSString* chatRoomMemList;
@property(retain) NSString* qqmblog;
@property(retain) PBBaseContact* baseContact;
+(id)parseFromData:(id)data;
-(id)SetBrandIconUrl:(id)url;
-(id)SetSubscriptedBrands:(id)brands;
-(id)SetBrandSubscriptionSettings:(unsigned)settings;
-(id)SetBrandSubscriptConfigUrl:(id)url;
-(id)SetExternalInfo:(id)info;
-(id)SetWcbgimgId:(id)anId;
-(id)SetWcflag:(unsigned)wcflag;
-(id)SetWcbgimgObjectId:(id)anId;
-(id)SetNeedUpdate:(unsigned)update;
-(id)SetFbid:(id)fbid;
-(id)SetFbnickName:(id)name;
-(id)SetWeiboFlag:(unsigned)flag;
-(id)SetWeiboNickName:(id)name;
-(id)SetWeiboAddress:(id)address;
-(id)SetOwner:(id)owner;
-(id)SetCertInfoExt:(id)ext;
-(id)SetCertificationInfo:(id)info;
-(id)SetCertificationFlag:(unsigned)flag;
-(id)SetPersonalCardStatus:(unsigned)status;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetCountry:(id)country;
-(id)SetChatRoomData:(id)data;
-(id)SetChatRoomStatus:(unsigned)status;
-(id)SetChatRoomMemList:(id)list;
-(id)SetQqmblog:(id)qqmblog;
-(id)SetBaseContact:(id)contact;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(void)setFromCContact:(id)ccontact;
-(id)toCContact;
@end

@interface PBCMessageWrap : PBGeneratedMessage {
	unsigned hasFromUser : 1;
	unsigned hasToUser : 1;
	unsigned hasRealChatUser : 1;
	unsigned hasContent : 1;
	unsigned hasMesSvrId : 1;
	unsigned hasMesLocalId : 1;
	unsigned hasMessageType : 1;
	unsigned hasStatus : 1;
	unsigned hasImgStatus : 1;
	unsigned hasDownloadStatus : 1;
	unsigned hasCreateTime : 1;
	NSString* fromUser;
	NSString* toUser;
	NSString* realChatUser;
	NSString* content;
	unsigned mesSvrId;
	unsigned mesLocalId;
	unsigned messageType;
	unsigned status;
	unsigned imgStatus;
	unsigned downloadStatus;
	unsigned createTime;
}
@property(assign) BOOL hasContent;
@property(assign) BOOL hasRealChatUser;
@property(assign) BOOL hasToUser;
@property(assign) BOOL hasFromUser;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasDownloadStatus;
@property(assign) BOOL hasImgStatus;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasMessageType;
@property(assign) BOOL hasMesLocalId;
@property(assign) BOOL hasMesSvrId;
@property(retain) NSString* content;
@property(retain) NSString* realChatUser;
@property(retain) NSString* toUser;
@property(retain) NSString* fromUser;
@property(assign) unsigned createTime;
@property(assign) unsigned downloadStatus;
@property(assign) unsigned imgStatus;
@property(assign) unsigned status;
@property(assign) unsigned messageType;
@property(assign) unsigned mesLocalId;
@property(assign) unsigned mesSvrId;
+(id)parseFromData:(id)data;
-(id)SetContent:(id)content;
-(id)SetRealChatUser:(id)user;
-(id)SetToUser:(id)user;
-(id)SetFromUser:(id)user;
-(id)SetCreateTime:(unsigned)time;
-(id)SetDownloadStatus:(unsigned)status;
-(id)SetImgStatus:(unsigned)status;
-(id)SetStatus:(unsigned)status;
-(id)SetMessageType:(unsigned)type;
-(id)SetMesLocalId:(unsigned)anId;
-(id)SetMesSvrId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(void)setFromCMessageWrap:(id)cmessageWrap;
-(id)toCMessageWrap;
@end

@interface PBSessionInfo : PBGeneratedMessage {
	unsigned hasContact : 1;
	unsigned hasMessage : 1;
	PBCContact* contact;
	PBCMessageWrap* message;
}
@property(assign) BOOL hasMessage;
@property(assign) BOOL hasContact;
@property(retain) PBCMessageWrap* message;
@property(retain) PBCContact* contact;
+(id)parseFromData:(id)data;
-(id)SetMessage:(id)message;
-(id)SetContact:(id)contact;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(void)setFromSessionInfo:(id)sessionInfo;
-(id)toSessionInfo;
@end

@interface PBBrandServiceItem : PBGeneratedMessage {
	unsigned hasIsNew : 1;
	unsigned hasIsStar : 1;
	unsigned hasHasSetLocation : 1;
	unsigned hasUsername : 1;
	unsigned hasUnreadCount : 1;
	unsigned isNew_ : 1;
	unsigned isStar_ : 1;
	unsigned hasSetLocation_ : 1;
	NSString* username;
	unsigned unreadCount;
}
@property(assign) BOOL hasSetLocation;
@property(assign) BOOL hasHasSetLocation;
@property(assign) BOOL isStar;
@property(assign) BOOL hasIsStar;
@property(assign) BOOL isNew;
@property(assign) BOOL hasIsNew;
@property(assign) BOOL hasUnreadCount;
@property(assign) BOOL hasUsername;
@property(assign) unsigned unreadCount;
@property(retain) NSString* username;
+(id)parseFromData:(id)data;
-(id)SetHasSetLocation:(BOOL)location;
-(id)SetIsStar:(BOOL)star;
-(id)SetIsNew:(BOOL)aNew;
-(id)SetUnreadCount:(unsigned)count;
-(id)SetUsername:(id)username;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PBBrandServiceItemListCache : PBGeneratedMessage {
	unsigned hasIsCacheValid : 1;
	unsigned hasIsChange : 1;
	unsigned hasLastUpdateTime : 1;
	unsigned hasHash : 1;
	unsigned isCacheValid_ : 1;
	unsigned isChange_ : 1;
	unsigned lastUpdateTime;
	unsigned hash;
	NSMutableArray* mutableItemListList;
}
@property(assign) BOOL isChange;
@property(assign) BOOL hasIsChange;
@property(assign) BOOL hasHash;
@property(assign) BOOL hasLastUpdateTime;
@property(assign) BOOL isCacheValid;
@property(assign) BOOL hasIsCacheValid;
@property(retain) NSMutableArray* mutableItemListList;
@property(assign) unsigned hash;
@property(assign) unsigned lastUpdateTime;
+(id)parseFromData:(id)data;
-(id)SetIsChange:(BOOL)change;
-(id)SetHash:(unsigned)hash;
-(id)SetLastUpdateTime:(unsigned)time;
-(id)SetIsCacheValid:(BOOL)valid;
-(id)addItemList:(id)list;
-(id)addItemListFromArray:(id)array;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)itemListList;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinInt32_t : PBGeneratedMessage {
	unsigned hasIVal : 1;
	unsigned iVal;
}
@property(assign) BOOL hasIVal;
@property(assign) unsigned iVal;
+(id)parseFromData:(id)data;
-(id)SetIVal:(unsigned)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinUint32_t : PBGeneratedMessage {
	unsigned hasUiVal : 1;
	unsigned uiVal;
}
@property(assign) BOOL hasUiVal;
@property(assign) unsigned uiVal;
+(id)parseFromData:(id)data;
-(id)SetUiVal:(unsigned)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinChar_t : PBGeneratedMessage {
	unsigned hasIVal : 1;
	int iVal;
}
@property(assign) BOOL hasIVal;
@property(assign) int iVal;
+(id)parseFromData:(id)data;
-(id)SetIVal:(int)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinUchar_t : PBGeneratedMessage {
	unsigned hasUiVal : 1;
	unsigned uiVal;
}
@property(assign) BOOL hasUiVal;
@property(assign) unsigned uiVal;
+(id)parseFromData:(id)data;
-(id)SetUiVal:(unsigned)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinInt8_t : PBGeneratedMessage {
	unsigned hasIVal : 1;
	int iVal;
}
@property(assign) BOOL hasIVal;
@property(assign) int iVal;
+(id)parseFromData:(id)data;
-(id)SetIVal:(int)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinUint8_t : PBGeneratedMessage {
	unsigned hasUiVal : 1;
	unsigned uiVal;
}
@property(assign) BOOL hasUiVal;
@property(assign) unsigned uiVal;
+(id)parseFromData:(id)data;
-(id)SetUiVal:(unsigned)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinInt16_t : PBGeneratedMessage {
	unsigned hasIVal : 1;
	int iVal;
}
@property(assign) BOOL hasIVal;
@property(assign) int iVal;
+(id)parseFromData:(id)data;
-(id)SetIVal:(int)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinUint16_t : PBGeneratedMessage {
	unsigned hasUiVal : 1;
	unsigned uiVal;
}
@property(assign) BOOL hasUiVal;
@property(assign) unsigned uiVal;
+(id)parseFromData:(id)data;
-(id)SetUiVal:(unsigned)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinInt64_t : PBGeneratedMessage {
	unsigned hasLlVal : 1;
	long long llVal;
}
@property(assign) BOOL hasLlVal;
@property(assign) long long llVal;
+(id)parseFromData:(id)data;
-(id)SetLlVal:(long long)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinUint64_t : PBGeneratedMessage {
	unsigned hasUllVal : 1;
	unsigned long long ullVal;
}
@property(assign) BOOL hasUllVal;
@property(assign) unsigned long long ullVal;
+(id)parseFromData:(id)data;
-(id)SetUllVal:(unsigned long long)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinFloat32_t : PBGeneratedMessage {
	unsigned hasFVal : 1;
	float fVal;
}
@property(assign) BOOL hasFVal;
@property(assign) float fVal;
+(id)parseFromData:(id)data;
-(id)SetFVal:(float)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinDouble64_t : PBGeneratedMessage {
	unsigned hasDVal : 1;
	double dVal;
}
@property(assign) BOOL hasDVal;
@property(assign) double dVal;
+(id)parseFromData:(id)data;
-(id)SetDVal:(double)val;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinBuffer_t : PBGeneratedMessage {
	unsigned hasBuffer : 1;
	unsigned hasILen : 1;
	NSData* buffer;
	unsigned iLen;
}
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasILen;
@property(retain) NSData* buffer;
@property(assign) unsigned iLen;
+(id)parseFromData:(id)data;
+(id)skBufferWithData:(id)data;
-(id)SetBuffer:(id)buffer;
-(id)SetILen:(unsigned)len;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SKBuiltinString_t : PBGeneratedMessage {
	unsigned hasString : 1;
	NSString* string;
}
@property(assign) BOOL hasString;
@property(retain) NSString* string;
+(id)parseFromData:(id)data;
+(id)skStringWithString:(id)string;
-(id)SetString:(id)string;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EchoInfo : PBGeneratedMessage {
	unsigned hasEchoStr : 1;
	unsigned hasEchoLen : 1;
	NSData* echoStr;
	unsigned echoLen;
}
@property(assign) BOOL hasEchoStr;
@property(assign) BOOL hasEchoLen;
@property(retain) NSData* echoStr;
@property(assign) unsigned echoLen;
+(id)parseFromData:(id)data;
-(id)SetEchoStr:(id)str;
-(id)SetEchoLen:(unsigned)len;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BaseRequest : PBGeneratedMessage {
	unsigned hasClientVersion : 1;
	unsigned hasSessionKey : 1;
	unsigned hasDeviceId : 1;
	unsigned hasDeviceType : 1;
	unsigned hasUin : 1;
	unsigned hasScene : 1;
	int clientVersion;
	NSData* sessionKey;
	NSData* deviceId;
	NSData* deviceType;
	unsigned uin;
	unsigned scene;
}
@property(assign) BOOL hasScene;
@property(assign) BOOL hasDeviceType;
@property(assign) BOOL hasClientVersion;
@property(assign) BOOL hasDeviceId;
@property(assign) BOOL hasUin;
@property(assign) BOOL hasSessionKey;
@property(assign) unsigned scene;
@property(retain) NSData* deviceType;
@property(assign) int clientVersion;
@property(retain) NSData* deviceId;
@property(assign) unsigned uin;
@property(retain) NSData* sessionKey;
+(id)parseFromData:(id)data;
-(id)SetScene:(unsigned)scene;
-(id)SetDeviceType:(id)type;
-(id)SetClientVersion:(int)version;
-(id)SetDeviceId:(id)anId;
-(id)SetUin:(unsigned)uin;
-(id)SetSessionKey:(id)key;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BaseResponse : PBGeneratedMessage {
	unsigned hasRet : 1;
	unsigned hasErrMsg : 1;
	int ret;
	SKBuiltinString_t* errMsg;
}
@property(assign) BOOL hasErrMsg;
@property(assign) BOOL hasRet;
@property(retain) SKBuiltinString_t* errMsg;
@property(assign) int ret;
+(id)parseFromData:(id)data;
-(id)SetErrMsg:(id)msg;
-(id)SetRet:(int)ret;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BuiltinIP : PBGeneratedMessage {
	unsigned hasIp : 1;
	unsigned hasType : 1;
	unsigned hasPort : 1;
	NSData* ip;
	unsigned type;
	unsigned port;
}
@property(assign) BOOL hasIp;
@property(assign) BOOL hasPort;
@property(assign) BOOL hasType;
@property(retain) NSData* ip;
@property(assign) unsigned port;
@property(assign) unsigned type;
+(id)parseFromData:(id)data;
-(id)SetIp:(id)ip;
-(id)SetPort:(unsigned)port;
-(id)SetType:(unsigned)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BuiltinIPList : PBGeneratedMessage {
	unsigned hasLongConnectIpcount : 1;
	unsigned hasShortConnectIpcount : 1;
	unsigned hasSeq : 1;
	unsigned longConnectIpcount;
	unsigned shortConnectIpcount;
	unsigned seq;
	NSMutableArray* mutableLongConnectIplistList;
	NSMutableArray* mutableShortConnectIplistList;
}
@property(retain) NSMutableArray* mutableShortConnectIplistList;
@property(retain) NSMutableArray* mutableLongConnectIplistList;
@property(assign) BOOL hasSeq;
@property(assign) BOOL hasShortConnectIpcount;
@property(assign) BOOL hasLongConnectIpcount;
@property(assign) unsigned seq;
@property(assign) unsigned shortConnectIpcount;
@property(assign) unsigned longConnectIpcount;
+(id)parseFromData:(id)data;
-(id)addShortConnectIplist:(id)iplist;
-(id)addShortConnectIplistFromArray:(id)array;
-(id)addLongConnectIplist:(id)iplist;
-(id)addLongConnectIplistFromArray:(id)array;
-(id)SetSeq:(unsigned)seq;
-(id)SetShortConnectIpcount:(unsigned)ipcount;
-(id)SetLongConnectIpcount:(unsigned)ipcount;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)shortConnectIplistList;
-(id)longConnectIplistList;
-(id)init;
-(void)dealloc;
@end

@interface NetworkControl : PBGeneratedMessage {
	unsigned hasTypingInterval : 1;
	unsigned hasNoopIntervalTime : 1;
	unsigned hasPortList : 1;
	unsigned hasTimeoutList : 1;
	unsigned hasMinNoopInterval : 1;
	unsigned hasMaxNoopInterval : 1;
	int typingInterval;
	int noopIntervalTime;
	NSString* portList;
	NSString* timeoutList;
	unsigned minNoopInterval;
	unsigned maxNoopInterval;
}
@property(assign) BOOL hasNoopIntervalTime;
@property(assign) BOOL hasTypingInterval;
@property(assign) BOOL hasMaxNoopInterval;
@property(assign) BOOL hasMinNoopInterval;
@property(assign) BOOL hasTimeoutList;
@property(assign) BOOL hasPortList;
@property(assign) int noopIntervalTime;
@property(assign) int typingInterval;
@property(assign) unsigned maxNoopInterval;
@property(assign) unsigned minNoopInterval;
@property(retain) NSString* timeoutList;
@property(retain) NSString* portList;
+(id)parseFromData:(id)data;
-(id)SetNoopIntervalTime:(int)time;
-(id)SetTypingInterval:(int)interval;
-(id)SetMaxNoopInterval:(unsigned)interval;
-(id)SetMinNoopInterval:(unsigned)interval;
-(id)SetTimeoutList:(id)list;
-(id)SetPortList:(id)list;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PluginKey : PBGeneratedMessage {
	unsigned hasKey : 1;
	unsigned hasId : 1;
	NSString* key;
	unsigned id;
}
@property(assign) BOOL hasId;
@property(assign) BOOL hasKey;
@property(assign) unsigned id;
@property(retain) NSString* key;
+(id)parseFromData:(id)data;
-(id)SetId:(unsigned)anId;
-(id)SetKey:(id)key;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PluginKeyList : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface Host : PBGeneratedMessage {
	unsigned hasOrigin : 1;
	unsigned hasSubstitute : 1;
	NSString* origin;
	NSString* substitute;
}
@property(assign) BOOL hasSubstitute;
@property(assign) BOOL hasOrigin;
@property(retain) NSString* substitute;
@property(retain) NSString* origin;
+(id)parseFromData:(id)data;
-(id)SetSubstitute:(id)substitute;
-(id)SetOrigin:(id)origin;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface HostList : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface PositionInfo : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasPrecision : 1;
	unsigned hasGpssource : 1;
	unsigned hasMacAddr : 1;
	unsigned hasCellId : 1;
	float longitude;
	float latitude;
	int precision;
	int gpssource;
	NSString* macAddr;
	NSString* cellId;
}
@property(assign) BOOL hasGpssource;
@property(assign) BOOL hasCellId;
@property(assign) BOOL hasMacAddr;
@property(assign) BOOL hasPrecision;
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) int gpssource;
@property(retain) NSString* cellId;
@property(retain) NSString* macAddr;
@property(assign) int precision;
@property(assign) float latitude;
@property(assign) float longitude;
+(id)parseFromData:(id)data;
-(id)SetGpssource:(int)gpssource;
-(id)SetCellId:(id)anId;
-(id)SetMacAddr:(id)addr;
-(id)SetPrecision:(int)precision;
-(id)SetLatitude:(float)latitude;
-(id)SetLongitude:(float)longitude;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsUserInfo : PBGeneratedMessage {
	unsigned hasSnsBgobjectId : 1;
	unsigned hasSnsBgimgId : 1;
	unsigned hasSnsFlag : 1;
	unsigned hasSnsFlagEx : 1;
	unsigned long long snsBgobjectId;
	NSString* snsBgimgId;
	unsigned snsFlag;
	unsigned snsFlagEx;
}
@property(assign) BOOL hasSnsFlagEx;
@property(assign) BOOL hasSnsBgobjectId;
@property(assign) BOOL hasSnsBgimgId;
@property(assign) BOOL hasSnsFlag;
@property(assign) unsigned snsFlagEx;
@property(assign) unsigned long long snsBgobjectId;
@property(retain) NSString* snsBgimgId;
@property(assign) unsigned snsFlag;
+(id)parseFromData:(id)data;
-(id)SetSnsFlagEx:(unsigned)ex;
-(id)SetSnsBgobjectId:(unsigned long long)anId;
-(id)SetSnsBgimgId:(id)anId;
-(id)SetSnsFlag:(unsigned)flag;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CustomizedInfo : PBGeneratedMessage {
	unsigned hasExternalInfo : 1;
	unsigned hasBrandInfo : 1;
	unsigned hasBrandIconUrl : 1;
	unsigned hasBrandFlag : 1;
	NSString* externalInfo;
	NSString* brandInfo;
	NSString* brandIconUrl;
	unsigned brandFlag;
}
@property(assign) BOOL hasBrandIconUrl;
@property(assign) BOOL hasBrandInfo;
@property(assign) BOOL hasExternalInfo;
@property(assign) BOOL hasBrandFlag;
@property(retain) NSString* brandIconUrl;
@property(retain) NSString* brandInfo;
@property(retain) NSString* externalInfo;
@property(assign) unsigned brandFlag;
+(id)parseFromData:(id)data;
-(id)SetBrandIconUrl:(id)url;
-(id)SetBrandInfo:(id)info;
-(id)SetExternalInfo:(id)info;
-(id)SetBrandFlag:(unsigned)flag;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CmdItem : PBGeneratedMessage {
	unsigned hasCmdId : 1;
	unsigned hasCmdBuf : 1;
	int cmdId;
	SKBuiltinBuffer_t* cmdBuf;
}
@property(assign) BOOL hasCmdBuf;
@property(assign) BOOL hasCmdId;
@property(retain) SKBuiltinBuffer_t* cmdBuf;
@property(assign) int cmdId;
+(id)parseFromData:(id)data;
-(id)SetCmdBuf:(id)buf;
-(id)SetCmdId:(int)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CmdList : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface ShakeSyncRequest : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasPrecision : 1;
	unsigned hasMacAddr : 1;
	unsigned hasCellId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasImgId : 1;
	unsigned hasTimes : 1;
	float longitude;
	float latitude;
	int precision;
	NSString* macAddr;
	NSString* cellId;
	BaseRequest* baseRequest;
	unsigned imgId;
	unsigned times;
}
@property(assign) BOOL hasTimes;
@property(assign) BOOL hasImgId;
@property(assign) BOOL hasCellId;
@property(assign) BOOL hasMacAddr;
@property(assign) BOOL hasPrecision;
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned times;
@property(assign) unsigned imgId;
@property(retain) NSString* cellId;
@property(retain) NSString* macAddr;
@property(assign) int precision;
@property(assign) float latitude;
@property(assign) float longitude;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTimes:(unsigned)times;
-(id)SetImgId:(unsigned)anId;
-(id)SetCellId:(id)anId;
-(id)SetMacAddr:(id)addr;
-(id)SetPrecision:(int)precision;
-(id)SetLatitude:(float)latitude;
-(id)SetLongitude:(float)longitude;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeSyncResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasBuffer : 1;
	unsigned hasRet : 1;
	unsigned hasImgId : 1;
	unsigned hasImgTotoalLen : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* buffer;
	unsigned ret;
	unsigned imgId;
	unsigned imgTotoalLen;
}
@property(assign) BOOL hasImgTotoalLen;
@property(assign) BOOL hasImgId;
@property(assign) BOOL hasRet;
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned imgTotoalLen;
@property(assign) unsigned imgId;
@property(assign) unsigned ret;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetImgTotoalLen:(unsigned)len;
-(id)SetImgId:(unsigned)anId;
-(id)SetRet:(unsigned)ret;
-(id)SetBuffer:(id)buffer;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BindEmailRequest : PBGeneratedMessage {
	unsigned hasEmail : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	NSString* email;
	BaseRequest* baseRequest;
	unsigned opCode;
}
@property(assign) BOOL hasEmail;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* email;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetEmail:(id)email;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BindEmailResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetLocationRequest : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasPrecision : 1;
	unsigned hasGpssource : 1;
	unsigned hasMacAddr : 1;
	unsigned hasCellId : 1;
	unsigned hasBaseRequest : 1;
	int longitude;
	int latitude;
	int precision;
	int gpssource;
	NSString* macAddr;
	NSString* cellId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasGpssource;
@property(assign) BOOL hasCellId;
@property(assign) BOOL hasMacAddr;
@property(assign) BOOL hasPrecision;
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasBaseRequest;
@property(assign) int gpssource;
@property(retain) NSString* cellId;
@property(retain) NSString* macAddr;
@property(assign) int precision;
@property(assign) int latitude;
@property(assign) int longitude;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetGpssource:(int)gpssource;
-(id)SetCellId:(id)anId;
-(id)SetMacAddr:(id)addr;
-(id)SetPrecision:(int)precision;
-(id)SetLatitude:(int)latitude;
-(id)SetLongitude:(int)longitude;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetLocationResponse : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasBaseResponse : 1;
	int longitude;
	int latitude;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasBaseResponse;
@property(assign) int latitude;
@property(assign) int longitude;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetLatitude:(int)latitude;
-(id)SetLongitude:(int)longitude;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LbsContactInfo : PBGeneratedMessage {
	unsigned hasHeadImgVersion : 1;
	unsigned hasSex : 1;
	unsigned hasMyBrandList : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasCountry : 1;
	unsigned hasWeiboNickname : 1;
	unsigned hasWeibo : 1;
	unsigned hasAlias : 1;
	unsigned hasVerifyContent : 1;
	unsigned hasVerifyInfo : 1;
	unsigned hasDistance : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasNickName : 1;
	unsigned hasUserName : 1;
	unsigned hasSnsUserInfo : 1;
	unsigned hasCustomizedInfo : 1;
	unsigned hasVerifyFlag : 1;
	unsigned hasImgStatus : 1;
	unsigned hasWeiboFlag : 1;
	int headImgVersion;
	int sex;
	NSString* myBrandList;
	NSString* smallHeadImgUrl;
	NSString* bigHeadImgUrl;
	NSString* country;
	NSString* weiboNickname;
	NSString* weibo;
	NSString* alias;
	NSString* verifyContent;
	NSString* verifyInfo;
	NSString* distance;
	NSString* signature;
	NSString* city;
	NSString* province;
	NSString* nickName;
	NSString* userName;
	SnsUserInfo* snsUserInfo;
	CustomizedInfo* customizedInfo;
	unsigned verifyFlag;
	unsigned imgStatus;
	unsigned weiboFlag;
}
@property(assign) BOOL hasCustomizedInfo;
@property(assign) BOOL hasMyBrandList;
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasSnsUserInfo;
@property(assign) BOOL hasHeadImgVersion;
@property(assign) BOOL hasWeiboFlag;
@property(assign) BOOL hasWeiboNickname;
@property(assign) BOOL hasWeibo;
@property(assign) BOOL hasAlias;
@property(assign) BOOL hasVerifyContent;
@property(assign) BOOL hasVerifyInfo;
@property(assign) BOOL hasVerifyFlag;
@property(assign) BOOL hasImgStatus;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasDistance;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(retain) CustomizedInfo* customizedInfo;
@property(retain) NSString* myBrandList;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) NSString* country;
@property(retain) SnsUserInfo* snsUserInfo;
@property(assign) int headImgVersion;
@property(assign) unsigned weiboFlag;
@property(retain) NSString* weiboNickname;
@property(retain) NSString* weibo;
@property(retain) NSString* alias;
@property(retain) NSString* verifyContent;
@property(retain) NSString* verifyInfo;
@property(assign) unsigned verifyFlag;
@property(assign) unsigned imgStatus;
@property(assign) int sex;
@property(retain) NSString* distance;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(retain) NSString* nickName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetCustomizedInfo:(id)info;
-(id)SetMyBrandList:(id)list;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetCountry:(id)country;
-(id)SetSnsUserInfo:(id)info;
-(id)SetHeadImgVersion:(int)version;
-(id)SetWeiboFlag:(unsigned)flag;
-(id)SetWeiboNickname:(id)nickname;
-(id)SetWeibo:(id)weibo;
-(id)SetAlias:(id)alias;
-(id)SetVerifyContent:(id)content;
-(id)SetVerifyInfo:(id)info;
-(id)SetVerifyFlag:(unsigned)flag;
-(id)SetImgStatus:(unsigned)status;
-(id)SetSex:(int)sex;
-(id)SetDistance:(id)distance;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeReportRequest : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasPrecision : 1;
	unsigned hasGpssource : 1;
	unsigned hasMacAddr : 1;
	unsigned hasCellId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	unsigned hasImgId : 1;
	unsigned hasTimes : 1;
	float longitude;
	float latitude;
	int precision;
	int gpssource;
	NSString* macAddr;
	NSString* cellId;
	BaseRequest* baseRequest;
	unsigned opCode;
	unsigned imgId;
	unsigned times;
}
@property(assign) BOOL hasGpssource;
@property(assign) BOOL hasTimes;
@property(assign) BOOL hasImgId;
@property(assign) BOOL hasCellId;
@property(assign) BOOL hasMacAddr;
@property(assign) BOOL hasPrecision;
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(assign) int gpssource;
@property(assign) unsigned times;
@property(assign) unsigned imgId;
@property(retain) NSString* cellId;
@property(retain) NSString* macAddr;
@property(assign) int precision;
@property(assign) float latitude;
@property(assign) float longitude;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetGpssource:(int)gpssource;
-(id)SetTimes:(unsigned)times;
-(id)SetImgId:(unsigned)anId;
-(id)SetCellId:(id)anId;
-(id)SetMacAddr:(id)addr;
-(id)SetPrecision:(int)precision;
-(id)SetLatitude:(float)latitude;
-(id)SetLongitude:(float)longitude;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeBuffer : PBGeneratedMessage {
	unsigned hasReportTime : 1;
	unsigned hasX : 1;
	unsigned hasY : 1;
	unsigned reportTime;
	unsigned x;
	unsigned y;
}
@property(assign) BOOL hasY;
@property(assign) BOOL hasX;
@property(assign) BOOL hasReportTime;
@property(assign) unsigned y;
@property(assign) unsigned x;
@property(assign) unsigned reportTime;
+(id)parseFromData:(id)data;
-(id)SetY:(unsigned)y;
-(id)SetX:(unsigned)x;
-(id)SetReportTime:(unsigned)time;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeReportResponse : PBGeneratedMessage {
	unsigned hasRet : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBuffer : 1;
	unsigned hasImgId : 1;
	unsigned hasImgTotoalLen : 1;
	int ret;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* buffer;
	unsigned imgId;
	unsigned imgTotoalLen;
}
@property(assign) BOOL hasImgTotoalLen;
@property(assign) BOOL hasImgId;
@property(assign) BOOL hasRet;
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned imgTotoalLen;
@property(assign) unsigned imgId;
@property(assign) int ret;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetImgTotoalLen:(unsigned)len;
-(id)SetImgId:(unsigned)anId;
-(id)SetRet:(int)ret;
-(id)SetBuffer:(id)buffer;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeGetRequest : PBGeneratedMessage {
	unsigned hasIsNewVerson : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasBuffer : 1;
	int isNewVerson;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* buffer;
}
@property(assign) BOOL hasIsNewVerson;
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasBaseRequest;
@property(assign) int isNewVerson;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetIsNewVerson:(int)verson;
-(id)SetBuffer:(id)buffer;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeGetItem : PBGeneratedMessage {
	unsigned hasHeadImgVersion : 1;
	unsigned hasSex : 1;
	unsigned hasMyBrandList : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasCountry : 1;
	unsigned hasVerifyContent : 1;
	unsigned hasVerifyInfo : 1;
	unsigned hasWeiboNickname : 1;
	unsigned hasWeibo : 1;
	unsigned hasDistance : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasNickName : 1;
	unsigned hasUserName : 1;
	unsigned hasImgBuffer : 1;
	unsigned hasSnsUserInfo : 1;
	unsigned hasCustomizedInfo : 1;
	unsigned hasNumDistance : 1;
	unsigned hasHasHdimg : 1;
	unsigned hasWeiboFlag : 1;
	unsigned hasVerifyFlag : 1;
	unsigned hasImgStatus : 1;
	int headImgVersion;
	int sex;
	NSString* myBrandList;
	NSString* smallHeadImgUrl;
	NSString* bigHeadImgUrl;
	NSString* country;
	NSString* verifyContent;
	NSString* verifyInfo;
	NSString* weiboNickname;
	NSString* weibo;
	NSString* distance;
	NSString* signature;
	NSString* city;
	NSString* province;
	NSString* nickName;
	NSString* userName;
	SKBuiltinBuffer_t* imgBuffer;
	SnsUserInfo* snsUserInfo;
	CustomizedInfo* customizedInfo;
	unsigned numDistance;
	unsigned hasHdimg;
	unsigned weiboFlag;
	unsigned verifyFlag;
	unsigned imgStatus;
}
@property(assign) BOOL hasCustomizedInfo;
@property(assign) BOOL hasMyBrandList;
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasSnsUserInfo;
@property(assign) BOOL hasHeadImgVersion;
@property(assign) BOOL hasVerifyContent;
@property(assign) BOOL hasVerifyInfo;
@property(assign) BOOL hasVerifyFlag;
@property(assign) BOOL hasWeiboFlag;
@property(assign) BOOL hasWeiboNickname;
@property(assign) BOOL hasWeibo;
@property(assign) BOOL hasNumDistance;
@property(assign) BOOL hasImgBuffer;
@property(assign) BOOL hasHasHdimg;
@property(assign) BOOL hasImgStatus;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasDistance;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(retain) CustomizedInfo* customizedInfo;
@property(retain) NSString* myBrandList;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) NSString* country;
@property(retain) SnsUserInfo* snsUserInfo;
@property(assign) int headImgVersion;
@property(retain) NSString* verifyContent;
@property(retain) NSString* verifyInfo;
@property(assign) unsigned verifyFlag;
@property(assign) unsigned weiboFlag;
@property(retain) NSString* weiboNickname;
@property(retain) NSString* weibo;
@property(assign) unsigned numDistance;
@property(retain) SKBuiltinBuffer_t* imgBuffer;
@property(assign) unsigned hasHdimg;
@property(assign) unsigned imgStatus;
@property(assign) int sex;
@property(retain) NSString* distance;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(retain) NSString* nickName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetCustomizedInfo:(id)info;
-(id)SetMyBrandList:(id)list;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetCountry:(id)country;
-(id)SetSnsUserInfo:(id)info;
-(id)SetHeadImgVersion:(int)version;
-(id)SetVerifyContent:(id)content;
-(id)SetVerifyInfo:(id)info;
-(id)SetVerifyFlag:(unsigned)flag;
-(id)SetWeiboFlag:(unsigned)flag;
-(id)SetWeiboNickname:(id)nickname;
-(id)SetWeibo:(id)weibo;
-(id)SetNumDistance:(unsigned)distance;
-(id)SetImgBuffer:(id)buffer;
-(id)SetHasHdimg:(unsigned)hdimg;
-(id)SetImgStatus:(unsigned)status;
-(id)SetSex:(int)sex;
-(id)SetDistance:(id)distance;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeGetResponse : PBGeneratedMessage {
	unsigned hasRet : 1;
	unsigned hasTips : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	unsigned hasScence : 1;
	int ret;
	NSString* tips;
	BaseResponse* baseResponse;
	unsigned count;
	unsigned scence;
	NSMutableArray* mutableShakeGetListList;
}
@property(assign) BOOL hasRet;
@property(assign) BOOL hasScence;
@property(assign) BOOL hasTips;
@property(retain) NSMutableArray* mutableShakeGetListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) int ret;
@property(assign) unsigned scence;
@property(retain) NSString* tips;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRet:(int)ret;
-(id)SetScence:(unsigned)scence;
-(id)SetTips:(id)tips;
-(id)addShakeGetList:(id)list;
-(id)addShakeGetListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)shakeGetListList;
-(id)init;
-(void)dealloc;
@end

@interface ShakeMatchRequest : PBGeneratedMessage {
	unsigned hasToUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	unsigned hasScence : 1;
	NSString* toUserName;
	BaseRequest* baseRequest;
	unsigned opCode;
	unsigned scence;
}
@property(assign) BOOL hasScence;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned scence;
@property(retain) NSString* toUserName;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetScence:(unsigned)scence;
-(id)SetToUserName:(id)userName;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeMatchResponse : PBGeneratedMessage {
	unsigned hasTips : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasRet : 1;
	NSString* tips;
	BaseResponse* baseResponse;
	unsigned ret;
}
@property(assign) BOOL hasRet;
@property(assign) BOOL hasTips;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned ret;
@property(retain) NSString* tips;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRet:(unsigned)ret;
-(id)SetTips:(id)tips;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeImgRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasImgId : 1;
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	BaseRequest* baseRequest;
	unsigned imgId;
	unsigned startPos;
	unsigned totalLen;
}
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasImgId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned totalLen;
@property(assign) unsigned startPos;
@property(assign) unsigned imgId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTotalLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetImgId:(unsigned)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeImgResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasBuffer : 1;
	unsigned hasImgId : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* buffer;
	unsigned imgId;
	unsigned totalLen;
	unsigned startPos;
}
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasImgId;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(assign) unsigned imgId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBuffer:(id)buffer;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetImgId:(unsigned)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ScanStreetViewRequest : PBGeneratedMessage {
	unsigned hasHeading : 1;
	unsigned hasPitch : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasUserPos : 1;
	unsigned hasScene : 1;
	float heading;
	float pitch;
	BaseRequest* baseRequest;
	PositionInfo* userPos;
	unsigned scene;
}
@property(assign) BOOL hasPitch;
@property(assign) BOOL hasHeading;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasUserPos;
@property(assign) BOOL hasBaseRequest;
@property(assign) float pitch;
@property(assign) float heading;
@property(assign) unsigned scene;
@property(retain) PositionInfo* userPos;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetPitch:(float)pitch;
-(id)SetHeading:(float)heading;
-(id)SetScene:(unsigned)scene;
-(id)SetUserPos:(id)pos;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ScanStreetViewResponse : PBGeneratedMessage {
	unsigned hasDescriptionXml : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasType : 1;
	NSString* descriptionXml;
	BaseResponse* baseResponse;
	unsigned type;
}
@property(assign) BOOL hasDescriptionXml;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* descriptionXml;
@property(assign) unsigned type;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDescriptionXml:(id)xml;
-(id)SetType:(unsigned)type;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LbsRoomRequest : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasPrecision : 1;
	unsigned hasGpssource : 1;
	unsigned hasExitScene : 1;
	unsigned hasStayTime : 1;
	unsigned hasMacAddr : 1;
	unsigned hasCellId : 1;
	unsigned hasRoomName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	float longitude;
	float latitude;
	int precision;
	int gpssource;
	int exitScene;
	int stayTime;
	NSString* macAddr;
	NSString* cellId;
	NSString* roomName;
	BaseRequest* baseRequest;
	unsigned opCode;
}
@property(assign) BOOL hasStayTime;
@property(assign) BOOL hasExitScene;
@property(assign) BOOL hasRoomName;
@property(assign) BOOL hasGpssource;
@property(assign) BOOL hasCellId;
@property(assign) BOOL hasMacAddr;
@property(assign) BOOL hasPrecision;
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(assign) int stayTime;
@property(assign) int exitScene;
@property(retain) NSString* roomName;
@property(assign) int gpssource;
@property(retain) NSString* cellId;
@property(retain) NSString* macAddr;
@property(assign) int precision;
@property(assign) float latitude;
@property(assign) float longitude;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetStayTime:(int)time;
-(id)SetExitScene:(int)scene;
-(id)SetRoomName:(id)name;
-(id)SetGpssource:(int)gpssource;
-(id)SetCellId:(id)anId;
-(id)SetMacAddr:(id)addr;
-(id)SetPrecision:(int)precision;
-(id)SetLatitude:(float)latitude;
-(id)SetLongitude:(float)longitude;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LbsRoomResponse : PBGeneratedMessage {
	unsigned hasRoomName : 1;
	unsigned hasRoomNickName : 1;
	unsigned hasBaseResponse : 1;
	NSString* roomName;
	NSString* roomNickName;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasRoomNickName;
@property(assign) BOOL hasRoomName;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* roomNickName;
@property(retain) NSString* roomName;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRoomNickName:(id)name;
-(id)SetRoomName:(id)name;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LbsRoomMemberRequest : PBGeneratedMessage {
	unsigned hasRoomName : 1;
	unsigned hasBaseRequest : 1;
	NSString* roomName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasRoomName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* roomName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRoomName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LbsRoomMember : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasNickName : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasSmallHeadImgUrl : 1;
	NSString* userName;
	NSString* nickName;
	NSString* bigHeadImgUrl;
	NSString* smallHeadImgUrl;
}
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) NSString* nickName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LbsRoomMemberResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasMemberCount : 1;
	BaseResponse* baseResponse;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned memberCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface RadarSearchRequest : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasPrecision : 1;
	unsigned hasGpssource : 1;
	unsigned hasMacAddr : 1;
	unsigned hasCellId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	float longitude;
	float latitude;
	int precision;
	int gpssource;
	NSString* macAddr;
	NSString* cellId;
	BaseRequest* baseRequest;
	unsigned opCode;
}
@property(assign) BOOL hasGpssource;
@property(assign) BOOL hasCellId;
@property(assign) BOOL hasMacAddr;
@property(assign) BOOL hasPrecision;
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(assign) int gpssource;
@property(retain) NSString* cellId;
@property(retain) NSString* macAddr;
@property(assign) int precision;
@property(assign) float latitude;
@property(assign) float longitude;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetGpssource:(int)gpssource;
-(id)SetCellId:(id)anId;
-(id)SetMacAddr:(id)addr;
-(id)SetPrecision:(int)precision;
-(id)SetLatitude:(float)latitude;
-(id)SetLongitude:(float)longitude;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RadarSearchMember : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasNickName : 1;
	unsigned hasSmallImgUrl : 1;
	unsigned hasEncodeUserName : 1;
	unsigned hasDistance : 1;
	NSString* userName;
	NSString* nickName;
	NSString* smallImgUrl;
	NSString* encodeUserName;
	unsigned distance;
}
@property(assign) BOOL hasEncodeUserName;
@property(assign) BOOL hasSmallImgUrl;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasDistance;
@property(assign) BOOL hasUserName;
@property(retain) NSString* encodeUserName;
@property(retain) NSString* smallImgUrl;
@property(retain) NSString* nickName;
@property(assign) unsigned distance;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetEncodeUserName:(id)name;
-(id)SetSmallImgUrl:(id)url;
-(id)SetNickName:(id)name;
-(id)SetDistance:(unsigned)distance;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RadarSearchResponse : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasOpCode : 1;
	unsigned hasMemberCount : 1;
	NSString* ticket;
	BaseResponse* baseResponse;
	unsigned opCode;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned memberCount;
@property(assign) unsigned opCode;
@property(retain) NSString* ticket;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetOpCode:(unsigned)code;
-(id)SetTicket:(id)ticket;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface GetPOIListRequest : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasKeyword : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasBuff : 1;
	unsigned hasScene : 1;
	unsigned hasOpCode : 1;
	double longitude;
	double latitude;
	NSString* keyword;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* buff;
	unsigned scene;
	unsigned opCode;
}
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasBuff;
@property(assign) BOOL hasKeyword;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasBaseRequest;
@property(assign) double latitude;
@property(assign) double longitude;
@property(retain) SKBuiltinBuffer_t* buff;
@property(retain) NSString* keyword;
@property(assign) unsigned opCode;
@property(assign) unsigned scene;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetLatitude:(double)latitude;
-(id)SetLongitude:(double)longitude;
-(id)SetBuff:(id)buff;
-(id)SetKeyword:(id)keyword;
-(id)SetOpCode:(unsigned)code;
-(id)SetScene:(unsigned)scene;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface POIItem : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasName : 1;
	unsigned hasAddr : 1;
	unsigned hasTypeId : 1;
	unsigned hasLink : 1;
	double longitude;
	double latitude;
	NSString* name;
	NSString* addr;
	NSString* typeId;
	NSString* link;
}
@property(assign) BOOL hasLink;
@property(assign) BOOL hasTypeId;
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasAddr;
@property(assign) BOOL hasName;
@property(retain) NSString* link;
@property(retain) NSString* typeId;
@property(assign) double latitude;
@property(assign) double longitude;
@property(retain) NSString* addr;
@property(retain) NSString* name;
+(id)parseFromData:(id)data;
-(id)SetLink:(id)link;
-(id)SetTypeId:(id)anId;
-(id)SetLatitude:(double)latitude;
-(id)SetLongitude:(double)longitude;
-(id)SetAddr:(id)addr;
-(id)SetName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetPOIListResponse : PBGeneratedMessage {
	unsigned hasUrl : 1;
	unsigned hasLogoUrl : 1;
	unsigned hasText : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBuff : 1;
	unsigned hasListCount : 1;
	unsigned hasOpCode : 1;
	unsigned hasIsEnd : 1;
	NSString* url;
	NSString* logoUrl;
	NSString* text;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* buff;
	unsigned listCount;
	unsigned opCode;
	unsigned isEnd;
	NSMutableArray* mutablePoilistList;
}
@property(assign) BOOL hasText;
@property(assign) BOOL hasLogoUrl;
@property(assign) BOOL hasUrl;
@property(assign) BOOL hasBuff;
@property(assign) BOOL hasIsEnd;
@property(assign) BOOL hasOpCode;
@property(retain) NSMutableArray* mutablePoilistList;
@property(assign) BOOL hasListCount;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* text;
@property(retain) NSString* logoUrl;
@property(retain) NSString* url;
@property(retain) SKBuiltinBuffer_t* buff;
@property(assign) unsigned isEnd;
@property(assign) unsigned opCode;
@property(assign) unsigned listCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetText:(id)text;
-(id)SetLogoUrl:(id)url;
-(id)SetUrl:(id)url;
-(id)SetBuff:(id)buff;
-(id)SetIsEnd:(unsigned)end;
-(id)SetOpCode:(unsigned)code;
-(id)addPoilist:(id)poilist;
-(id)addPoilistFromArray:(id)array;
-(id)SetListCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)poilistList;
-(id)init;
-(void)dealloc;
@end

@interface PositionItem : PBGeneratedMessage {
	unsigned hasLatitude : 1;
	unsigned hasLongitude : 1;
	unsigned hasHeading : 1;
	double latitude;
	double longitude;
	double heading;
}
@property(assign) BOOL hasHeading;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasLatitude;
@property(assign) double heading;
@property(assign) double longitude;
@property(assign) double latitude;
+(id)parseFromData:(id)data;
-(id)SetHeading:(double)heading;
-(id)SetLongitude:(double)longitude;
-(id)SetLatitude:(double)latitude;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UserPositionItem : PBGeneratedMessage {
	unsigned hasUsername : 1;
	unsigned hasPosition : 1;
	NSString* username;
	PositionItem* position;
}
@property(assign) BOOL hasPosition;
@property(assign) BOOL hasUsername;
@property(retain) PositionItem* position;
@property(retain) NSString* username;
+(id)parseFromData:(id)data;
-(id)SetPosition:(id)position;
-(id)SetUsername:(id)username;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RefreshTrackRoomRequest : PBGeneratedMessage {
	unsigned hasType : 1;
	unsigned hasTrackRoomId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasUserPosition : 1;
	int type;
	NSString* trackRoomId;
	BaseRequest* baseRequest;
	UserPositionItem* userPosition;
}
@property(assign) BOOL hasUserPosition;
@property(assign) BOOL hasType;
@property(assign) BOOL hasTrackRoomId;
@property(assign) BOOL hasBaseRequest;
@property(retain) UserPositionItem* userPosition;
@property(assign) int type;
@property(retain) NSString* trackRoomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUserPosition:(id)position;
-(id)SetType:(int)type;
-(id)SetTrackRoomId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RefreshTrackRoomResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutablePositionsList;
}
@property(retain) NSMutableArray* mutablePositionsList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addPositions:(id)positions;
-(id)addPositionsFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)positionsList;
-(id)init;
-(void)dealloc;
@end

@interface JoinTrackRoomRequest : PBGeneratedMessage {
	unsigned hasChatname : 1;
	unsigned hasBaseRequest : 1;
	NSString* chatname;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasChatname;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* chatname;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetChatname:(id)chatname;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface JoinTrackRoomResponse : PBGeneratedMessage {
	unsigned hasTrackRoomId : 1;
	unsigned hasBaseResponse : 1;
	NSString* trackRoomId;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasTrackRoomId;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* trackRoomId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetTrackRoomId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ExitTrackRoomRequest : PBGeneratedMessage {
	unsigned hasTrackRoomId : 1;
	unsigned hasBaseRequest : 1;
	NSString* trackRoomId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasTrackRoomId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* trackRoomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTrackRoomId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ExitTrackRoomResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AppMsg : PBGeneratedMessage {
	unsigned hasSource : 1;
	unsigned hasRemindId : 1;
	unsigned hasFromUserName : 1;
	unsigned hasAppId : 1;
	unsigned hasToUserName : 1;
	unsigned hasContent : 1;
	unsigned hasClientMsgId : 1;
	unsigned hasMsgSource : 1;
	unsigned hasThumb : 1;
	unsigned hasSdkVersion : 1;
	unsigned hasType : 1;
	unsigned hasCreateTime : 1;
	int source;
	int remindId;
	NSString* fromUserName;
	NSString* appId;
	NSString* toUserName;
	NSString* content;
	NSString* clientMsgId;
	NSString* msgSource;
	SKBuiltinBuffer_t* thumb;
	unsigned sdkVersion;
	unsigned type;
	unsigned createTime;
}
@property(assign) BOOL hasMsgSource;
@property(assign) BOOL hasRemindId;
@property(assign) BOOL hasSource;
@property(assign) BOOL hasThumb;
@property(assign) BOOL hasClientMsgId;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasType;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasSdkVersion;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasFromUserName;
@property(retain) NSString* msgSource;
@property(assign) int remindId;
@property(assign) int source;
@property(retain) SKBuiltinBuffer_t* thumb;
@property(retain) NSString* clientMsgId;
@property(assign) unsigned createTime;
@property(retain) NSString* content;
@property(assign) unsigned type;
@property(retain) NSString* toUserName;
@property(assign) unsigned sdkVersion;
@property(retain) NSString* appId;
@property(retain) NSString* fromUserName;
+(id)parseFromData:(id)data;
-(id)SetMsgSource:(id)source;
-(id)SetRemindId:(int)anId;
-(id)SetSource:(int)source;
-(id)SetThumb:(id)thumb;
-(id)SetClientMsgId:(id)anId;
-(id)SetCreateTime:(unsigned)time;
-(id)SetContent:(id)content;
-(id)SetType:(unsigned)type;
-(id)SetToUserName:(id)userName;
-(id)SetSdkVersion:(unsigned)version;
-(id)SetAppId:(id)anId;
-(id)SetFromUserName:(id)userName;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SendAppMsgRequest : PBGeneratedMessage {
	unsigned hasCommentUrl : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasMsg : 1;
	NSString* commentUrl;
	BaseRequest* baseRequest;
	AppMsg* msg;
}
@property(assign) BOOL hasCommentUrl;
@property(assign) BOOL hasMsg;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* commentUrl;
@property(retain) AppMsg* msg;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetCommentUrl:(id)url;
-(id)SetMsg:(id)msg;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SendAppMsgResponse : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasFromUserName : 1;
	unsigned hasToUserName : 1;
	unsigned hasClientMsgId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasMsgId : 1;
	unsigned hasCreateTime : 1;
	unsigned hasType : 1;
	NSString* appId;
	NSString* fromUserName;
	NSString* toUserName;
	NSString* clientMsgId;
	BaseResponse* baseResponse;
	unsigned msgId;
	unsigned createTime;
	unsigned type;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasClientMsgId;
@property(assign) BOOL hasMsgId;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned type;
@property(assign) unsigned createTime;
@property(retain) NSString* clientMsgId;
@property(assign) unsigned msgId;
@property(retain) NSString* toUserName;
@property(retain) NSString* fromUserName;
@property(retain) NSString* appId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetCreateTime:(unsigned)time;
-(id)SetClientMsgId:(id)anId;
-(id)SetMsgId:(unsigned)anId;
-(id)SetToUserName:(id)userName;
-(id)SetFromUserName:(id)userName;
-(id)SetAppId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DownloadAppAttachRequest : PBGeneratedMessage {
	unsigned hasRotation : 1;
	unsigned hasAppId : 1;
	unsigned hasMediaId : 1;
	unsigned hasUserName : 1;
	unsigned hasOutFmt : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasSdkVersion : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasDataLen : 1;
	unsigned hasType : 1;
	unsigned hasCdntype : 1;
	int rotation;
	NSString* appId;
	NSString* mediaId;
	NSString* userName;
	NSString* outFmt;
	BaseRequest* baseRequest;
	unsigned sdkVersion;
	unsigned totalLen;
	unsigned startPos;
	unsigned dataLen;
	unsigned type;
	unsigned cdntype;
}
@property(assign) BOOL hasCdntype;
@property(assign) BOOL hasType;
@property(assign) BOOL hasRotation;
@property(assign) BOOL hasOutFmt;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasSdkVersion;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned cdntype;
@property(assign) unsigned type;
@property(assign) int rotation;
@property(retain) NSString* outFmt;
@property(assign) unsigned dataLen;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) NSString* userName;
@property(retain) NSString* mediaId;
@property(assign) unsigned sdkVersion;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetCdntype:(unsigned)cdntype;
-(id)SetType:(unsigned)type;
-(id)SetRotation:(int)rotation;
-(id)SetOutFmt:(id)fmt;
-(id)SetDataLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetUserName:(id)name;
-(id)SetMediaId:(id)anId;
-(id)SetSdkVersion:(unsigned)version;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DownloadAppAttachResponse : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasMediaId : 1;
	unsigned hasUserName : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasData : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasDataLen : 1;
	NSString* appId;
	NSString* mediaId;
	NSString* userName;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* data;
	unsigned totalLen;
	unsigned startPos;
	unsigned dataLen;
}
@property(assign) BOOL hasData;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned dataLen;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) NSString* userName;
@property(retain) NSString* mediaId;
@property(retain) NSString* appId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetData:(id)data;
-(id)SetDataLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetUserName:(id)name;
-(id)SetMediaId:(id)anId;
-(id)SetAppId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface OpenAppInfo : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasAppName : 1;
	unsigned hasAppDescription : 1;
	unsigned hasAppIconUrl : 1;
	unsigned hasAppStoreUrl : 1;
	unsigned hasAppWatermarkUrl : 1;
	unsigned hasAndroidPackageName : 1;
	unsigned hasAndroidSignature : 1;
	unsigned hasAppName4EnUs : 1;
	unsigned hasAppDescription4EnUs : 1;
	unsigned hasAppName4ZhTw : 1;
	unsigned hasAppDescription4ZhTw : 1;
	unsigned hasAppVersion : 1;
	unsigned hasAppInfoFlag : 1;
	NSString* appId;
	NSString* appName;
	NSString* appDescription;
	NSString* appIconUrl;
	NSString* appStoreUrl;
	NSString* appWatermarkUrl;
	NSString* androidPackageName;
	NSString* androidSignature;
	NSString* appName4EnUs;
	NSString* appDescription4EnUs;
	NSString* appName4ZhTw;
	NSString* appDescription4ZhTw;
	unsigned appVersion;
	unsigned appInfoFlag;
}
@property(assign) BOOL hasAppInfoFlag;
@property(assign) BOOL hasAppDescription4ZhTw;
@property(assign) BOOL hasAppName4ZhTw;
@property(assign) BOOL hasAppDescription4EnUs;
@property(assign) BOOL hasAppName4EnUs;
@property(assign) BOOL hasAndroidSignature;
@property(assign) BOOL hasAndroidPackageName;
@property(assign) BOOL hasAppWatermarkUrl;
@property(assign) BOOL hasAppVersion;
@property(assign) BOOL hasAppStoreUrl;
@property(assign) BOOL hasAppIconUrl;
@property(assign) BOOL hasAppDescription;
@property(assign) BOOL hasAppName;
@property(assign) BOOL hasAppId;
@property(assign) unsigned appInfoFlag;
@property(retain) NSString* appDescription4ZhTw;
@property(retain) NSString* appName4ZhTw;
@property(retain) NSString* appDescription4EnUs;
@property(retain) NSString* appName4EnUs;
@property(retain) NSString* androidSignature;
@property(retain) NSString* androidPackageName;
@property(retain) NSString* appWatermarkUrl;
@property(assign) unsigned appVersion;
@property(retain) NSString* appStoreUrl;
@property(retain) NSString* appIconUrl;
@property(retain) NSString* appDescription;
@property(retain) NSString* appName;
@property(retain) NSString* appId;
+(id)parseFromData:(id)data;
-(id)SetAppInfoFlag:(unsigned)flag;
-(id)SetAppDescription4ZhTw:(id)tw;
-(id)SetAppName4ZhTw:(id)tw;
-(id)SetAppDescription4EnUs:(id)us;
-(id)SetAppName4EnUs:(id)us;
-(id)SetAndroidSignature:(id)signature;
-(id)SetAndroidPackageName:(id)name;
-(id)SetAppWatermarkUrl:(id)url;
-(id)SetAppVersion:(unsigned)version;
-(id)SetAppStoreUrl:(id)url;
-(id)SetAppIconUrl:(id)url;
-(id)SetAppDescription:(id)description;
-(id)SetAppName:(id)name;
-(id)SetAppId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAppInfoRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasIconType : 1;
	NSString* appId;
	BaseRequest* baseRequest;
	unsigned iconType;
}
@property(assign) BOOL hasIconType;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned iconType;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetIconType:(unsigned)type;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAppInfoResponse : PBGeneratedMessage {
	unsigned hasDevInfo : 1;
	unsigned hasAppType : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasAppInfo : 1;
	unsigned hasNoUse : 1;
	NSString* devInfo;
	NSString* appType;
	BaseResponse* baseResponse;
	OpenAppInfo* appInfo;
	unsigned noUse;
}
@property(assign) BOOL hasAppType;
@property(assign) BOOL hasDevInfo;
@property(assign) BOOL hasNoUse;
@property(assign) BOOL hasAppInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* appType;
@property(retain) NSString* devInfo;
@property(assign) unsigned noUse;
@property(retain) OpenAppInfo* appInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetAppType:(id)type;
-(id)SetDevInfo:(id)info;
-(id)SetNoUse:(unsigned)use;
-(id)SetAppInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetRecommendAppListRequest : PBGeneratedMessage {
	unsigned hasInstalledList : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasStart : 1;
	unsigned hasCount : 1;
	unsigned hasIconType : 1;
	NSString* installedList;
	BaseRequest* baseRequest;
	unsigned start;
	unsigned count;
	unsigned iconType;
}
@property(assign) BOOL hasIconType;
@property(assign) BOOL hasInstalledList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasStart;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned iconType;
@property(retain) NSString* installedList;
@property(assign) unsigned count;
@property(assign) unsigned start;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetIconType:(unsigned)type;
-(id)SetInstalledList:(id)list;
-(id)SetCount:(unsigned)count;
-(id)SetStart:(unsigned)start;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetRecommendAppListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasTotal : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned total;
	unsigned count;
	NSMutableArray* mutableAppListList;
}
@property(retain) NSMutableArray* mutableAppListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) BOOL hasTotal;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
@property(assign) unsigned total;
+(id)parseFromData:(id)data;
-(id)addAppList:(id)list;
-(id)addAppListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)SetTotal:(unsigned)total;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)appListList;
-(id)init;
-(void)dealloc;
@end

@interface TwitterInfo : PBGeneratedMessage {
	unsigned hasOauthToken : 1;
	unsigned hasOauthTokenSecret : 1;
	NSString* oauthToken;
	NSString* oauthTokenSecret;
}
@property(assign) BOOL hasOauthTokenSecret;
@property(assign) BOOL hasOauthToken;
@property(retain) NSString* oauthTokenSecret;
@property(retain) NSString* oauthToken;
+(id)parseFromData:(id)data;
-(id)SetOauthTokenSecret:(id)secret;
-(id)SetOauthToken:(id)token;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsBufferUrl : PBGeneratedMessage {
	unsigned hasUrl : 1;
	unsigned hasType : 1;
	NSString* url;
	unsigned type;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasUrl;
@property(assign) unsigned type;
@property(retain) NSString* url;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetUrl:(id)url;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsUploadRequest : PBGeneratedMessage {
	unsigned hasPhotoFrom : 1;
	unsigned hasNetType : 1;
	unsigned hasClientId : 1;
	unsigned hasDescription : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasBuffer : 1;
	unsigned hasTwitterInfo : 1;
	unsigned hasType : 1;
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	unsigned hasFilterStype : 1;
	unsigned hasSyncFlag : 1;
	int photoFrom;
	int netType;
	NSString* clientId;
	NSString* description;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* buffer;
	TwitterInfo* twitterInfo;
	unsigned type;
	unsigned startPos;
	unsigned totalLen;
	unsigned filterStype;
	unsigned syncFlag;
}
@property(assign) BOOL hasTwitterInfo;
@property(assign) BOOL hasNetType;
@property(assign) BOOL hasPhotoFrom;
@property(assign) BOOL hasDescription;
@property(assign) BOOL hasSyncFlag;
@property(assign) BOOL hasFilterStype;
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(retain) TwitterInfo* twitterInfo;
@property(assign) int netType;
@property(assign) int photoFrom;
@property(retain) NSString* description;
@property(assign) unsigned syncFlag;
@property(assign) unsigned filterStype;
@property(retain) NSString* clientId;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(assign) unsigned totalLen;
@property(assign) unsigned startPos;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTwitterInfo:(id)info;
-(id)SetNetType:(int)type;
-(id)SetPhotoFrom:(int)from;
-(id)SetDescription:(id)description;
-(id)SetSyncFlag:(unsigned)flag;
-(id)SetFilterStype:(unsigned)stype;
-(id)SetClientId:(id)anId;
-(id)SetBuffer:(id)buffer;
-(id)SetTotalLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsUploadResponse : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasClientId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBufferUrl : 1;
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	unsigned hasThumbUrlCount : 1;
	unsigned hasType : 1;
	unsigned long long id;
	NSString* clientId;
	BaseResponse* baseResponse;
	SnsBufferUrl* bufferUrl;
	unsigned startPos;
	unsigned totalLen;
	unsigned thumbUrlCount;
	unsigned type;
	NSMutableArray* mutableThumbUrlsList;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasId;
@property(retain) NSMutableArray* mutableThumbUrlsList;
@property(assign) BOOL hasThumbUrlCount;
@property(assign) BOOL hasBufferUrl;
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned type;
@property(assign) unsigned long long id;
@property(assign) unsigned thumbUrlCount;
@property(retain) SnsBufferUrl* bufferUrl;
@property(retain) NSString* clientId;
@property(assign) unsigned totalLen;
@property(assign) unsigned startPos;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetId:(unsigned long long)anId;
-(id)addThumbUrls:(id)urls;
-(id)addThumbUrlsFromArray:(id)array;
-(id)SetThumbUrlCount:(unsigned)count;
-(id)SetBufferUrl:(id)url;
-(id)SetClientId:(id)anId;
-(id)SetTotalLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)thumbUrlsList;
-(id)init;
-(void)dealloc;
@end

@interface SnsDownloadRequest : PBGeneratedMessage {
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	unsigned hasBufferId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	unsigned hasDownBufLen : 1;
	int startPos;
	int totalLen;
	NSString* bufferId;
	BaseRequest* baseRequest;
	unsigned type;
	unsigned downBufLen;
}
@property(assign) BOOL hasDownBufLen;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBufferId;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned downBufLen;
@property(assign) unsigned type;
@property(retain) NSString* bufferId;
@property(assign) int totalLen;
@property(assign) int startPos;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetDownBufLen:(unsigned)len;
-(id)SetType:(unsigned)type;
-(id)SetBufferId:(id)anId;
-(id)SetTotalLen:(int)len;
-(id)SetStartPos:(int)pos;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsDownloadResponse : PBGeneratedMessage {
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	unsigned hasBufferId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBuffer : 1;
	unsigned hasType : 1;
	int startPos;
	int totalLen;
	NSString* bufferId;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* buffer;
	unsigned type;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasBufferId;
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned type;
@property(retain) NSString* bufferId;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(assign) int totalLen;
@property(assign) int startPos;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetBufferId:(id)anId;
-(id)SetBuffer:(id)buffer;
-(id)SetTotalLen:(int)len;
-(id)SetStartPos:(int)pos;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsCommentInfo : PBGeneratedMessage {
	unsigned hasCommentId : 1;
	unsigned hasReplyCommentId : 1;
	unsigned hasUsername : 1;
	unsigned hasNickname : 1;
	unsigned hasContent : 1;
	unsigned hasReplyUsername : 1;
	unsigned hasSource : 1;
	unsigned hasType : 1;
	unsigned hasCreateTime : 1;
	unsigned hasIsNotRichText : 1;
	int commentId;
	int replyCommentId;
	NSString* username;
	NSString* nickname;
	NSString* content;
	NSString* replyUsername;
	unsigned source;
	unsigned type;
	unsigned createTime;
	unsigned isNotRichText;
}
@property(assign) BOOL hasIsNotRichText;
@property(assign) BOOL hasReplyUsername;
@property(assign) BOOL hasReplyCommentId;
@property(assign) BOOL hasCommentId;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasType;
@property(assign) BOOL hasSource;
@property(assign) BOOL hasNickname;
@property(assign) BOOL hasUsername;
@property(assign) unsigned isNotRichText;
@property(retain) NSString* replyUsername;
@property(assign) int replyCommentId;
@property(assign) int commentId;
@property(assign) unsigned createTime;
@property(retain) NSString* content;
@property(assign) unsigned type;
@property(assign) unsigned source;
@property(retain) NSString* nickname;
@property(retain) NSString* username;
+(id)parseFromData:(id)data;
-(id)SetIsNotRichText:(unsigned)text;
-(id)SetReplyUsername:(id)username;
-(id)SetReplyCommentId:(int)anId;
-(id)SetCommentId:(int)anId;
-(id)SetCreateTime:(unsigned)time;
-(id)SetContent:(id)content;
-(id)SetType:(unsigned)type;
-(id)SetSource:(unsigned)source;
-(id)SetNickname:(id)nickname;
-(id)SetUsername:(id)username;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsGroup : PBGeneratedMessage {
	unsigned hasGroupId : 1;
	unsigned long long groupId;
}
@property(assign) BOOL hasGroupId;
@property(assign) unsigned long long groupId;
+(id)parseFromData:(id)data;
-(id)SetGroupId:(unsigned long long)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsObject : PBGeneratedMessage {
	unsigned hasReferId : 1;
	unsigned hasId : 1;
	unsigned hasReferUsername : 1;
	unsigned hasUsername : 1;
	unsigned hasNickname : 1;
	unsigned hasObjectDesc : 1;
	unsigned hasIsNotRichText : 1;
	unsigned hasGroupCount : 1;
	unsigned hasNoChange : 1;
	unsigned hasExtFlag : 1;
	unsigned hasWithUserListCount : 1;
	unsigned hasWithUserCount : 1;
	unsigned hasCommentUserListCount : 1;
	unsigned hasCommentCount : 1;
	unsigned hasLikeUserListCount : 1;
	unsigned hasLikeCount : 1;
	unsigned hasLikeFlag : 1;
	unsigned hasCreateTime : 1;
	unsigned long long referId;
	unsigned long long id;
	NSString* referUsername;
	NSString* username;
	NSString* nickname;
	SKBuiltinBuffer_t* objectDesc;
	unsigned isNotRichText;
	unsigned groupCount;
	unsigned noChange;
	unsigned extFlag;
	unsigned withUserListCount;
	unsigned withUserCount;
	unsigned commentUserListCount;
	unsigned commentCount;
	unsigned likeUserListCount;
	unsigned likeCount;
	unsigned likeFlag;
	unsigned createTime;
	NSMutableArray* mutableCommentUserListList;
	NSMutableArray* mutableWithUserListList;
	NSMutableArray* mutableLikeUserListList;
	NSMutableArray* mutableGroupListList;
}
@property(assign) BOOL hasReferId;
@property(assign) BOOL hasReferUsername;
@property(assign) BOOL hasIsNotRichText;
@property(retain) NSMutableArray* mutableGroupListList;
@property(assign) BOOL hasGroupCount;
@property(assign) BOOL hasNoChange;
@property(assign) BOOL hasExtFlag;
@property(retain) NSMutableArray* mutableWithUserListList;
@property(assign) BOOL hasWithUserListCount;
@property(assign) BOOL hasWithUserCount;
@property(retain) NSMutableArray* mutableCommentUserListList;
@property(assign) BOOL hasCommentUserListCount;
@property(assign) BOOL hasCommentCount;
@property(retain) NSMutableArray* mutableLikeUserListList;
@property(assign) BOOL hasLikeUserListCount;
@property(assign) BOOL hasLikeCount;
@property(assign) BOOL hasLikeFlag;
@property(assign) BOOL hasObjectDesc;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasNickname;
@property(assign) BOOL hasUsername;
@property(assign) BOOL hasId;
@property(assign) unsigned long long referId;
@property(retain) NSString* referUsername;
@property(assign) unsigned isNotRichText;
@property(assign) unsigned groupCount;
@property(assign) unsigned noChange;
@property(assign) unsigned extFlag;
@property(assign) unsigned withUserListCount;
@property(assign) unsigned withUserCount;
@property(assign) unsigned commentUserListCount;
@property(assign) unsigned commentCount;
@property(assign) unsigned likeUserListCount;
@property(assign) unsigned likeCount;
@property(assign) unsigned likeFlag;
@property(retain) SKBuiltinBuffer_t* objectDesc;
@property(assign) unsigned createTime;
@property(retain) NSString* nickname;
@property(retain) NSString* username;
@property(assign) unsigned long long id;
+(id)parseFromData:(id)data;
-(id)SetReferId:(unsigned long long)anId;
-(id)SetReferUsername:(id)username;
-(id)SetIsNotRichText:(unsigned)text;
-(id)addGroupList:(id)list;
-(id)addGroupListFromArray:(id)array;
-(id)SetGroupCount:(unsigned)count;
-(id)SetNoChange:(unsigned)change;
-(id)SetExtFlag:(unsigned)flag;
-(id)addWithUserList:(id)userList;
-(id)addWithUserListFromArray:(id)array;
-(id)SetWithUserListCount:(unsigned)userListCount;
-(id)SetWithUserCount:(unsigned)userCount;
-(id)addCommentUserList:(id)list;
-(id)addCommentUserListFromArray:(id)array;
-(id)SetCommentUserListCount:(unsigned)count;
-(id)SetCommentCount:(unsigned)count;
-(id)addLikeUserList:(id)list;
-(id)addLikeUserListFromArray:(id)array;
-(id)SetLikeUserListCount:(unsigned)count;
-(id)SetLikeCount:(unsigned)count;
-(id)SetLikeFlag:(unsigned)flag;
-(id)SetObjectDesc:(id)desc;
-(id)SetCreateTime:(unsigned)time;
-(id)SetNickname:(id)nickname;
-(id)SetUsername:(id)username;
-(id)SetId:(unsigned long long)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)groupListList;
-(id)withUserListList;
-(id)commentUserListList;
-(id)likeUserListList;
-(id)init;
-(void)dealloc;
@end

@interface SnsPostRequest : PBGeneratedMessage {
	unsigned hasReferId : 1;
	unsigned hasClientId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasObjectDesc : 1;
	unsigned hasWithUserListCount : 1;
	unsigned hasPrivacy : 1;
	unsigned hasSyncFlag : 1;
	unsigned hasPostBgimgType : 1;
	unsigned hasGroupCount : 1;
	unsigned hasObjectSource : 1;
	unsigned hasBlackListCount : 1;
	unsigned long long referId;
	NSString* clientId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* objectDesc;
	unsigned withUserListCount;
	unsigned privacy;
	unsigned syncFlag;
	unsigned postBgimgType;
	unsigned groupCount;
	unsigned objectSource;
	unsigned blackListCount;
	NSMutableArray* mutableWithUserListList;
	NSMutableArray* mutableGroupIdsList;
	NSMutableArray* mutableBlackListList;
}
@property(retain) NSMutableArray* mutableBlackListList;
@property(assign) BOOL hasBlackListCount;
@property(assign) BOOL hasReferId;
@property(assign) BOOL hasObjectSource;
@property(retain) NSMutableArray* mutableGroupIdsList;
@property(assign) BOOL hasGroupCount;
@property(assign) BOOL hasPostBgimgType;
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasSyncFlag;
@property(assign) BOOL hasPrivacy;
@property(retain) NSMutableArray* mutableWithUserListList;
@property(assign) BOOL hasWithUserListCount;
@property(assign) BOOL hasObjectDesc;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned blackListCount;
@property(assign) unsigned long long referId;
@property(assign) unsigned objectSource;
@property(assign) unsigned groupCount;
@property(assign) unsigned postBgimgType;
@property(retain) NSString* clientId;
@property(assign) unsigned syncFlag;
@property(assign) unsigned privacy;
@property(assign) unsigned withUserListCount;
@property(retain) SKBuiltinBuffer_t* objectDesc;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addBlackList:(id)list;
-(id)addBlackListFromArray:(id)array;
-(id)SetBlackListCount:(unsigned)count;
-(id)SetReferId:(unsigned long long)anId;
-(id)SetObjectSource:(unsigned)source;
-(id)addGroupIds:(id)ids;
-(id)addGroupIdsFromArray:(id)array;
-(id)SetGroupCount:(unsigned)count;
-(id)SetPostBgimgType:(unsigned)type;
-(id)SetClientId:(id)anId;
-(id)SetSyncFlag:(unsigned)flag;
-(id)SetPrivacy:(unsigned)privacy;
-(id)addWithUserList:(id)userList;
-(id)addWithUserListFromArray:(id)array;
-(id)SetWithUserListCount:(unsigned)userListCount;
-(id)SetObjectDesc:(id)desc;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)blackListList;
-(id)groupIdsList;
-(id)withUserListList;
-(id)init;
-(void)dealloc;
@end

@interface SnsPostResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasSnsObject : 1;
	BaseResponse* baseResponse;
	SnsObject* snsObject;
}
@property(assign) BOOL hasSnsObject;
@property(assign) BOOL hasBaseResponse;
@property(retain) SnsObject* snsObject;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSnsObject:(id)object;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsObjectDetailRequest : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasBaseRequest : 1;
	unsigned long long id;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned long long id;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetId:(unsigned long long)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsObjectDetailResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasObject : 1;
	BaseResponse* baseResponse;
	SnsObject* object;
}
@property(assign) BOOL hasObject;
@property(assign) BOOL hasBaseResponse;
@property(retain) SnsObject* object;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetObject:(id)object;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsServerConfig : PBGeneratedMessage {
	unsigned hasPostMentionLimit : 1;
	unsigned hasCopyAndPasteWordLimit : 1;
	int postMentionLimit;
	int copyAndPasteWordLimit;
}
@property(assign) BOOL hasCopyAndPasteWordLimit;
@property(assign) BOOL hasPostMentionLimit;
@property(assign) int copyAndPasteWordLimit;
@property(assign) int postMentionLimit;
+(id)parseFromData:(id)data;
-(id)SetCopyAndPasteWordLimit:(int)limit;
-(id)SetPostMentionLimit:(int)limit;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsTimeLineRequest : PBGeneratedMessage {
	unsigned hasMaxId : 1;
	unsigned hasMinFilterId : 1;
	unsigned hasFirstPageMd5 : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasLastRequestTime : 1;
	unsigned long long maxId;
	unsigned long long minFilterId;
	NSString* firstPageMd5;
	BaseRequest* baseRequest;
	unsigned lastRequestTime;
}
@property(assign) BOOL hasLastRequestTime;
@property(assign) BOOL hasMinFilterId;
@property(assign) BOOL hasMaxId;
@property(assign) BOOL hasFirstPageMd5;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned lastRequestTime;
@property(assign) unsigned long long minFilterId;
@property(assign) unsigned long long maxId;
@property(retain) NSString* firstPageMd5;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetLastRequestTime:(unsigned)time;
-(id)SetMinFilterId:(unsigned long long)anId;
-(id)SetMaxId:(unsigned long long)anId;
-(id)SetFirstPageMd5:(id)a5;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsTimeLineResponse : PBGeneratedMessage {
	unsigned hasFirstPageMd5 : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasServerConfig : 1;
	unsigned hasObjectCount : 1;
	unsigned hasNewRequestTime : 1;
	unsigned hasObjectCountForSameMd5 : 1;
	unsigned hasControlFlag : 1;
	NSString* firstPageMd5;
	BaseResponse* baseResponse;
	SnsServerConfig* serverConfig;
	unsigned objectCount;
	unsigned newRequestTime;
	unsigned objectCountForSameMd5;
	unsigned controlFlag;
	NSMutableArray* mutableObjectListList;
}
@property(assign) BOOL hasServerConfig;
@property(assign) BOOL hasControlFlag;
@property(assign) BOOL hasObjectCountForSameMd5;
@property(assign) BOOL hasNewRequestTime;
@property(retain) NSMutableArray* mutableObjectListList;
@property(assign) BOOL hasObjectCount;
@property(assign) BOOL hasFirstPageMd5;
@property(assign) BOOL hasBaseResponse;
@property(retain) SnsServerConfig* serverConfig;
@property(assign) unsigned controlFlag;
@property(assign) unsigned objectCountForSameMd5;
@property(assign) unsigned newRequestTime;
@property(assign) unsigned objectCount;
@property(retain) NSString* firstPageMd5;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetServerConfig:(id)config;
-(id)SetControlFlag:(unsigned)flag;
-(id)SetObjectCountForSameMd5:(unsigned)sameMd5;
-(id)SetNewRequestTime:(unsigned)time;
-(id)addObjectList:(id)list;
-(id)addObjectListFromArray:(id)array;
-(id)SetObjectCount:(unsigned)count;
-(id)SetFirstPageMd5:(id)a5;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)objectListList;
-(id)init;
-(void)dealloc;
@end

@interface SnsUserPageRequest : PBGeneratedMessage {
	unsigned hasMaxId : 1;
	unsigned hasMinFilterId : 1;
	unsigned hasFirstPageMd5 : 1;
	unsigned hasUsername : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasSource : 1;
	unsigned hasLastRequestTime : 1;
	unsigned long long maxId;
	unsigned long long minFilterId;
	NSString* firstPageMd5;
	NSString* username;
	BaseRequest* baseRequest;
	unsigned source;
	unsigned lastRequestTime;
}
@property(assign) BOOL hasLastRequestTime;
@property(assign) BOOL hasMinFilterId;
@property(assign) BOOL hasSource;
@property(assign) BOOL hasMaxId;
@property(assign) BOOL hasUsername;
@property(assign) BOOL hasFirstPageMd5;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned lastRequestTime;
@property(assign) unsigned long long minFilterId;
@property(assign) unsigned source;
@property(assign) unsigned long long maxId;
@property(retain) NSString* username;
@property(retain) NSString* firstPageMd5;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetLastRequestTime:(unsigned)time;
-(id)SetMinFilterId:(unsigned long long)anId;
-(id)SetSource:(unsigned)source;
-(id)SetMaxId:(unsigned long long)anId;
-(id)SetUsername:(id)username;
-(id)SetFirstPageMd5:(id)a5;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsUserPageResponse : PBGeneratedMessage {
	unsigned hasFirstPageMd5 : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasSnsUserInfo : 1;
	unsigned hasServerConfig : 1;
	unsigned hasObjectCount : 1;
	unsigned hasObjectTotalCount : 1;
	unsigned hasNewRequestTime : 1;
	unsigned hasObjectCountForSameMd5 : 1;
	NSString* firstPageMd5;
	BaseResponse* baseResponse;
	SnsUserInfo* snsUserInfo;
	SnsServerConfig* serverConfig;
	unsigned objectCount;
	unsigned objectTotalCount;
	unsigned newRequestTime;
	unsigned objectCountForSameMd5;
	NSMutableArray* mutableObjectListList;
}
@property(assign) BOOL hasServerConfig;
@property(assign) BOOL hasObjectCountForSameMd5;
@property(assign) BOOL hasNewRequestTime;
@property(assign) BOOL hasSnsUserInfo;
@property(assign) BOOL hasObjectTotalCount;
@property(retain) NSMutableArray* mutableObjectListList;
@property(assign) BOOL hasObjectCount;
@property(assign) BOOL hasFirstPageMd5;
@property(assign) BOOL hasBaseResponse;
@property(retain) SnsServerConfig* serverConfig;
@property(assign) unsigned objectCountForSameMd5;
@property(assign) unsigned newRequestTime;
@property(retain) SnsUserInfo* snsUserInfo;
@property(assign) unsigned objectTotalCount;
@property(assign) unsigned objectCount;
@property(retain) NSString* firstPageMd5;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetServerConfig:(id)config;
-(id)SetObjectCountForSameMd5:(unsigned)sameMd5;
-(id)SetNewRequestTime:(unsigned)time;
-(id)SetSnsUserInfo:(id)info;
-(id)SetObjectTotalCount:(unsigned)count;
-(id)addObjectList:(id)list;
-(id)addObjectListFromArray:(id)array;
-(id)SetObjectCount:(unsigned)count;
-(id)SetFirstPageMd5:(id)a5;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)objectListList;
-(id)init;
-(void)dealloc;
@end

@interface SnsAction : PBGeneratedMessage {
	unsigned hasReplyCommentId : 1;
	unsigned hasCommentId : 1;
	unsigned hasFromUsername : 1;
	unsigned hasToUsername : 1;
	unsigned hasFromNickname : 1;
	unsigned hasToNickname : 1;
	unsigned hasContent : 1;
	unsigned hasType : 1;
	unsigned hasSource : 1;
	unsigned hasCreateTime : 1;
	unsigned hasIsNotRichText : 1;
	int replyCommentId;
	int commentId;
	NSString* fromUsername;
	NSString* toUsername;
	NSString* fromNickname;
	NSString* toNickname;
	NSString* content;
	unsigned type;
	unsigned source;
	unsigned createTime;
	unsigned isNotRichText;
}
@property(assign) BOOL hasIsNotRichText;
@property(assign) BOOL hasCommentId;
@property(assign) BOOL hasReplyCommentId;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasSource;
@property(assign) BOOL hasType;
@property(assign) BOOL hasToNickname;
@property(assign) BOOL hasFromNickname;
@property(assign) BOOL hasToUsername;
@property(assign) BOOL hasFromUsername;
@property(assign) unsigned isNotRichText;
@property(assign) int commentId;
@property(assign) int replyCommentId;
@property(retain) NSString* content;
@property(assign) unsigned createTime;
@property(assign) unsigned source;
@property(assign) unsigned type;
@property(retain) NSString* toNickname;
@property(retain) NSString* fromNickname;
@property(retain) NSString* toUsername;
@property(retain) NSString* fromUsername;
+(id)parseFromData:(id)data;
-(id)SetIsNotRichText:(unsigned)text;
-(id)SetCommentId:(int)anId;
-(id)SetReplyCommentId:(int)anId;
-(id)SetContent:(id)content;
-(id)SetCreateTime:(unsigned)time;
-(id)SetSource:(unsigned)source;
-(id)SetType:(unsigned)type;
-(id)SetToNickname:(id)nickname;
-(id)SetFromNickname:(id)nickname;
-(id)SetToUsername:(id)username;
-(id)SetFromUsername:(id)username;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsActionGroup : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasParentId : 1;
	unsigned hasClientId : 1;
	unsigned hasCurrentAction : 1;
	unsigned hasReferAction : 1;
	unsigned long long id;
	unsigned long long parentId;
	NSString* clientId;
	SnsAction* currentAction;
	SnsAction* referAction;
}
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasReferAction;
@property(assign) BOOL hasCurrentAction;
@property(assign) BOOL hasParentId;
@property(assign) BOOL hasId;
@property(retain) NSString* clientId;
@property(retain) SnsAction* referAction;
@property(retain) SnsAction* currentAction;
@property(assign) unsigned long long parentId;
@property(assign) unsigned long long id;
+(id)parseFromData:(id)data;
-(id)SetClientId:(id)anId;
-(id)SetReferAction:(id)action;
-(id)SetCurrentAction:(id)action;
-(id)SetParentId:(unsigned long long)anId;
-(id)SetId:(unsigned long long)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsCommentRequest : PBGeneratedMessage {
	unsigned hasClientId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasAction : 1;
	NSString* clientId;
	BaseRequest* baseRequest;
	SnsActionGroup* action;
}
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasAction;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* clientId;
@property(retain) SnsActionGroup* action;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetClientId:(id)anId;
-(id)SetAction:(id)action;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsCommentResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasSnsObject : 1;
	BaseResponse* baseResponse;
	SnsObject* snsObject;
}
@property(assign) BOOL hasSnsObject;
@property(assign) BOOL hasBaseResponse;
@property(retain) SnsObject* snsObject;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSnsObject:(id)object;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsSyncRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasKeyBuf : 1;
	unsigned hasSelector : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* keyBuf;
	unsigned selector;
}
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasSelector;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(assign) unsigned selector;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetKeyBuf:(id)buf;
-(id)SetSelector:(unsigned)selector;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsSyncResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCmdList : 1;
	unsigned hasKeyBuf : 1;
	unsigned hasContinueFlag : 1;
	BaseResponse* baseResponse;
	CmdList* cmdList;
	SKBuiltinBuffer_t* keyBuf;
	unsigned continueFlag;
}
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasContinueFlag;
@property(assign) BOOL hasCmdList;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(assign) unsigned continueFlag;
@property(retain) CmdList* cmdList;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetKeyBuf:(id)buf;
-(id)SetContinueFlag:(unsigned)flag;
-(id)SetCmdList:(id)list;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsObjectOp : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasExt : 1;
	unsigned hasOpType : 1;
	unsigned long long id;
	SKBuiltinBuffer_t* ext;
	unsigned opType;
}
@property(assign) BOOL hasExt;
@property(assign) BOOL hasOpType;
@property(assign) BOOL hasId;
@property(retain) SKBuiltinBuffer_t* ext;
@property(assign) unsigned opType;
@property(assign) unsigned long long id;
+(id)parseFromData:(id)data;
-(id)SetExt:(id)ext;
-(id)SetOpType:(unsigned)type;
-(id)SetId:(unsigned long long)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsObjectOpDeleteComment : PBGeneratedMessage {
	unsigned hasCommentId : 1;
	int commentId;
}
@property(assign) BOOL hasCommentId;
@property(assign) int commentId;
+(id)parseFromData:(id)data;
-(id)SetCommentId:(int)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsObjectOpRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasOpCount : 1;
	BaseRequest* baseRequest;
	unsigned opCount;
	NSMutableArray* mutableOpListList;
}
@property(retain) NSMutableArray* mutableOpListList;
@property(assign) BOOL hasOpCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned opCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addOpList:(id)list;
-(id)addOpListFromArray:(id)array;
-(id)SetOpCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)opListList;
-(id)init;
-(void)dealloc;
@end

@interface SnsObjectOpResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasOpCount : 1;
	BaseResponse* baseResponse;
	unsigned opCount;
	NSMutableArray* mutableOpRetListList;
	int opRetListMemoizedSerializedSize;
}
@property(retain) NSMutableArray* mutableOpRetListList;
@property(assign) BOOL hasOpCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned opCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addOpRetListFromArray:(id)array;
-(id)addOpRetList:(int)list;
-(id)SetOpCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)opRetListList;
-(id)init;
-(void)dealloc;
@end

@interface SnsLbsContactInfo : PBGeneratedMessage {
	unsigned hasUserName : 1;
	NSString* userName;
}
@property(assign) BOOL hasUserName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsGetCityRequest : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasPrecision : 1;
	unsigned hasGpssource : 1;
	unsigned hasMacAddr : 1;
	unsigned hasCellId : 1;
	unsigned hasBaseRequest : 1;
	int longitude;
	int latitude;
	int precision;
	int gpssource;
	NSString* macAddr;
	NSString* cellId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasGpssource;
@property(assign) BOOL hasCellId;
@property(assign) BOOL hasMacAddr;
@property(assign) BOOL hasPrecision;
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasBaseRequest;
@property(assign) int gpssource;
@property(retain) NSString* cellId;
@property(retain) NSString* macAddr;
@property(assign) int precision;
@property(assign) int latitude;
@property(assign) int longitude;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetGpssource:(int)gpssource;
-(id)SetCellId:(id)anId;
-(id)SetMacAddr:(id)addr;
-(id)SetPrecision:(int)precision;
-(id)SetLatitude:(int)latitude;
-(id)SetLongitude:(int)longitude;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsGetCityResponse : PBGeneratedMessage {
	unsigned hasLongitude : 1;
	unsigned hasLatitude : 1;
	unsigned hasCountry : 1;
	unsigned hasCity : 1;
	unsigned hasBaseResponse : 1;
	int longitude;
	int latitude;
	NSString* country;
	NSString* city;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasCity;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasLatitude;
@property(assign) BOOL hasLongitude;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* city;
@property(retain) NSString* country;
@property(assign) int latitude;
@property(assign) int longitude;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCity:(id)city;
-(id)SetCountry:(id)country;
-(id)SetLatitude:(int)latitude;
-(id)SetLongitude:(int)longitude;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoiceAddrRequest : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasClientVoiceId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasOffset : 1;
	unsigned hasEndFlag : 1;
	unsigned hasSamplePerSec : 1;
	unsigned hasBitsPerSample : 1;
	unsigned hasVoiceEncodeType : 1;
	unsigned hasFileType : 1;
	unsigned hasSearchType : 1;
	unsigned hasExtraNameCount : 1;
	NSString* userName;
	NSString* clientVoiceId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned offset;
	unsigned endFlag;
	unsigned samplePerSec;
	unsigned bitsPerSample;
	unsigned voiceEncodeType;
	unsigned fileType;
	unsigned searchType;
	unsigned extraNameCount;
	NSMutableArray* mutableExtraNameUserNameListList;
	NSMutableArray* mutableExtraNameRemarkNameListList;
}
@property(retain) NSMutableArray* mutableExtraNameRemarkNameListList;
@property(retain) NSMutableArray* mutableExtraNameUserNameListList;
@property(assign) BOOL hasExtraNameCount;
@property(assign) BOOL hasSearchType;
@property(assign) BOOL hasFileType;
@property(assign) BOOL hasVoiceEncodeType;
@property(assign) BOOL hasBitsPerSample;
@property(assign) BOOL hasSamplePerSec;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasClientVoiceId;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasData;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned extraNameCount;
@property(assign) unsigned searchType;
@property(assign) unsigned fileType;
@property(assign) unsigned voiceEncodeType;
@property(assign) unsigned bitsPerSample;
@property(assign) unsigned samplePerSec;
@property(assign) unsigned endFlag;
@property(retain) NSString* clientVoiceId;
@property(assign) unsigned offset;
@property(retain) SKBuiltinBuffer_t* data;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addExtraNameRemarkNameList:(id)list;
-(id)addExtraNameRemarkNameListFromArray:(id)array;
-(id)addExtraNameUserNameList:(id)list;
-(id)addExtraNameUserNameListFromArray:(id)array;
-(id)SetExtraNameCount:(unsigned)count;
-(id)SetSearchType:(unsigned)type;
-(id)SetFileType:(unsigned)type;
-(id)SetVoiceEncodeType:(unsigned)type;
-(id)SetBitsPerSample:(unsigned)sample;
-(id)SetSamplePerSec:(unsigned)sec;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetClientVoiceId:(id)anId;
-(id)SetOffset:(unsigned)offset;
-(id)SetData:(id)data;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)extraNameRemarkNameListList;
-(id)extraNameUserNameListList;
-(id)init;
-(void)dealloc;
@end

@interface VoiceAddrResponse : PBGeneratedMessage {
	unsigned hasUserCount : 1;
	unsigned hasReportFiled : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasEndFlag : 1;
	int userCount;
	NSString* reportFiled;
	BaseResponse* baseResponse;
	unsigned endFlag;
	NSMutableArray* mutableUserNameListList;
}
@property(assign) BOOL hasReportFiled;
@property(retain) NSMutableArray* mutableUserNameListList;
@property(assign) BOOL hasUserCount;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* reportFiled;
@property(assign) int userCount;
@property(assign) unsigned endFlag;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetReportFiled:(id)filed;
-(id)addUserNameList:(id)list;
-(id)addUserNameListFromArray:(id)array;
-(id)SetUserCount:(int)count;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)userNameListList;
-(id)init;
-(void)dealloc;
@end

@interface VoiceAddrReportRequest : PBGeneratedMessage {
	unsigned hasHitUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasHitPos : 1;
	NSString* hitUserName;
	BaseRequest* baseRequest;
	unsigned hitPos;
}
@property(assign) BOOL hasHitUserName;
@property(assign) BOOL hasHitPos;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* hitUserName;
@property(assign) unsigned hitPos;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetHitUserName:(id)name;
-(id)SetHitPos:(unsigned)pos;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoiceAddrReportResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ScanBarcodeRequest : PBGeneratedMessage {
	unsigned hasBarcode : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	unsigned hasScene : 1;
	NSString* barcode;
	BaseRequest* baseRequest;
	unsigned type;
	unsigned scene;
}
@property(assign) BOOL hasScene;
@property(assign) BOOL hasBarcode;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned scene;
@property(retain) NSString* barcode;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetScene:(unsigned)scene;
-(id)SetBarcode:(id)barcode;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ScanBarcodeResponse : PBGeneratedMessage {
	unsigned hasDescXml : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasType : 1;
	NSString* descXml;
	BaseResponse* baseResponse;
	unsigned type;
}
@property(assign) BOOL hasDescXml;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* descXml;
@property(assign) unsigned type;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDescXml:(id)xml;
-(id)SetType:(unsigned)type;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ScanImageRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasImageBuffer : 1;
	unsigned hasClientScanId : 1;
	unsigned hasTotalLength : 1;
	unsigned hasOffset : 1;
	unsigned hasEndFlag : 1;
	unsigned hasImageType : 1;
	unsigned hasOpcode : 1;
	unsigned hasSessionId : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* imageBuffer;
	unsigned clientScanId;
	unsigned totalLength;
	unsigned offset;
	unsigned endFlag;
	unsigned imageType;
	unsigned opcode;
	unsigned sessionId;
}
@property(assign) BOOL hasSessionId;
@property(assign) BOOL hasOpcode;
@property(assign) BOOL hasImageType;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasTotalLength;
@property(assign) BOOL hasImageBuffer;
@property(assign) BOOL hasClientScanId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned sessionId;
@property(assign) unsigned opcode;
@property(assign) unsigned imageType;
@property(assign) unsigned endFlag;
@property(assign) unsigned offset;
@property(assign) unsigned totalLength;
@property(retain) SKBuiltinBuffer_t* imageBuffer;
@property(assign) unsigned clientScanId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSessionId:(unsigned)anId;
-(id)SetOpcode:(unsigned)opcode;
-(id)SetImageType:(unsigned)type;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetOffset:(unsigned)offset;
-(id)SetTotalLength:(unsigned)length;
-(id)SetImageBuffer:(id)buffer;
-(id)SetClientScanId:(unsigned)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ScanImageResponse : PBGeneratedMessage {
	unsigned hasDescriptionXml : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasClientScanId : 1;
	unsigned hasType : 1;
	unsigned hasEndFlag : 1;
	unsigned hasImageType : 1;
	NSString* descriptionXml;
	BaseResponse* baseResponse;
	unsigned clientScanId;
	unsigned type;
	unsigned endFlag;
	unsigned imageType;
}
@property(assign) BOOL hasImageType;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasDescriptionXml;
@property(assign) BOOL hasType;
@property(assign) BOOL hasClientScanId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned imageType;
@property(assign) unsigned endFlag;
@property(retain) NSString* descriptionXml;
@property(assign) unsigned type;
@property(assign) unsigned clientScanId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetImageType:(unsigned)type;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetDescriptionXml:(id)xml;
-(id)SetType:(unsigned)type;
-(id)SetClientScanId:(unsigned)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetProductInfoRequest : PBGeneratedMessage {
	unsigned hasProductId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasScene : 1;
	NSString* productId;
	BaseRequest* baseRequest;
	unsigned scene;
}
@property(assign) BOOL hasScene;
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned scene;
@property(retain) NSString* productId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetScene:(unsigned)scene;
-(id)SetProductId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetProductInfoResponse : PBGeneratedMessage {
	unsigned hasDescXml : 1;
	unsigned hasProductId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasType : 1;
	NSString* descXml;
	NSString* productId;
	BaseResponse* baseResponse;
	unsigned type;
}
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasDescXml;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* productId;
@property(retain) NSString* descXml;
@property(assign) unsigned type;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetProductId:(id)anId;
-(id)SetDescXml:(id)xml;
-(id)SetType:(unsigned)type;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface OCRTranslationRequest : PBGeneratedMessage {
	unsigned hasFromLanguage : 1;
	unsigned hasToLanguage : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasImageBuffer : 1;
	unsigned hasClientScanId : 1;
	unsigned hasImageType : 1;
	unsigned hasSessionId : 1;
	NSString* fromLanguage;
	NSString* toLanguage;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* imageBuffer;
	unsigned clientScanId;
	unsigned imageType;
	unsigned sessionId;
}
@property(assign) BOOL hasSessionId;
@property(assign) BOOL hasToLanguage;
@property(assign) BOOL hasFromLanguage;
@property(assign) BOOL hasImageType;
@property(assign) BOOL hasImageBuffer;
@property(assign) BOOL hasClientScanId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned sessionId;
@property(retain) NSString* toLanguage;
@property(retain) NSString* fromLanguage;
@property(assign) unsigned imageType;
@property(retain) SKBuiltinBuffer_t* imageBuffer;
@property(assign) unsigned clientScanId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSessionId:(unsigned)anId;
-(id)SetToLanguage:(id)language;
-(id)SetFromLanguage:(id)language;
-(id)SetImageType:(unsigned)type;
-(id)SetImageBuffer:(id)buffer;
-(id)SetClientScanId:(unsigned)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface OCRTranslationResponse : PBGeneratedMessage {
	unsigned hasSource : 1;
	unsigned hasTranslation : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasClientScanId : 1;
	unsigned hasImageType : 1;
	NSString* source;
	NSString* translation;
	BaseResponse* baseResponse;
	unsigned clientScanId;
	unsigned imageType;
}
@property(assign) BOOL hasImageType;
@property(assign) BOOL hasTranslation;
@property(assign) BOOL hasSource;
@property(assign) BOOL hasClientScanId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned imageType;
@property(retain) NSString* translation;
@property(retain) NSString* source;
@property(assign) unsigned clientScanId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetImageType:(unsigned)type;
-(id)SetTranslation:(id)translation;
-(id)SetSource:(id)source;
-(id)SetClientScanId:(unsigned)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeTVRequest : PBGeneratedMessage {
	unsigned hasVoiceLen : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasDataId : 1;
	unsigned hasEndFlag : 1;
	unsigned hasNetType : 1;
	unsigned hasSdkVersion : 1;
	float voiceLen;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned dataId;
	unsigned endFlag;
	unsigned netType;
	unsigned sdkVersion;
}
@property(assign) BOOL hasSdkVersion;
@property(assign) BOOL hasNetType;
@property(assign) BOOL hasVoiceLen;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasDataId;
@property(assign) BOOL hasData;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned sdkVersion;
@property(assign) unsigned netType;
@property(assign) float voiceLen;
@property(assign) unsigned endFlag;
@property(assign) unsigned dataId;
@property(retain) SKBuiltinBuffer_t* data;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSdkVersion:(unsigned)version;
-(id)SetNetType:(unsigned)type;
-(id)SetVoiceLen:(float)len;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetDataId:(unsigned)anId;
-(id)SetData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeTVResponse : PBGeneratedMessage {
	unsigned hasDescriptionXml : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasEndFlag : 1;
	unsigned hasType : 1;
	NSString* descriptionXml;
	BaseResponse* baseResponse;
	unsigned endFlag;
	unsigned type;
}
@property(assign) BOOL hasDescriptionXml;
@property(assign) BOOL hasType;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* descriptionXml;
@property(assign) unsigned type;
@property(assign) unsigned endFlag;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDescriptionXml:(id)xml;
-(id)SetType:(unsigned)type;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeMusicRequest : PBGeneratedMessage {
	unsigned hasVoiceLen : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasDataId : 1;
	unsigned hasEndFlag : 1;
	unsigned hasNetType : 1;
	unsigned hasSdkVersion : 1;
	float voiceLen;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned dataId;
	unsigned endFlag;
	unsigned netType;
	unsigned sdkVersion;
}
@property(assign) BOOL hasSdkVersion;
@property(assign) BOOL hasNetType;
@property(assign) BOOL hasVoiceLen;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasDataId;
@property(assign) BOOL hasData;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned sdkVersion;
@property(assign) unsigned netType;
@property(assign) float voiceLen;
@property(assign) unsigned endFlag;
@property(assign) unsigned dataId;
@property(retain) SKBuiltinBuffer_t* data;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSdkVersion:(unsigned)version;
-(id)SetNetType:(unsigned)type;
-(id)SetVoiceLen:(float)len;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetDataId:(unsigned)anId;
-(id)SetData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeMusicResponse : PBGeneratedMessage {
	unsigned hasOffset : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasSongName : 1;
	unsigned hasSongSinger : 1;
	unsigned hasSongAlbum : 1;
	unsigned hasSongAlbumUrl : 1;
	unsigned hasSongWifiUrl : 1;
	unsigned hasSongWapLinkUrl : 1;
	unsigned hasSongWebUrl : 1;
	unsigned hasSongLyric : 1;
	unsigned hasEndFlag : 1;
	unsigned hasMusicId : 1;
	float offset;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* songName;
	SKBuiltinBuffer_t* songSinger;
	SKBuiltinBuffer_t* songAlbum;
	SKBuiltinBuffer_t* songAlbumUrl;
	SKBuiltinBuffer_t* songWifiUrl;
	SKBuiltinBuffer_t* songWapLinkUrl;
	SKBuiltinBuffer_t* songWebUrl;
	SKBuiltinBuffer_t* songLyric;
	unsigned endFlag;
	unsigned musicId;
}
@property(assign) BOOL hasSongLyric;
@property(assign) BOOL hasSongWebUrl;
@property(assign) BOOL hasSongWapLinkUrl;
@property(assign) BOOL hasSongWifiUrl;
@property(assign) BOOL hasSongAlbumUrl;
@property(assign) BOOL hasSongAlbum;
@property(assign) BOOL hasSongSinger;
@property(assign) BOOL hasSongName;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasMusicId;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* songLyric;
@property(retain) SKBuiltinBuffer_t* songWebUrl;
@property(retain) SKBuiltinBuffer_t* songWapLinkUrl;
@property(retain) SKBuiltinBuffer_t* songWifiUrl;
@property(retain) SKBuiltinBuffer_t* songAlbumUrl;
@property(retain) SKBuiltinBuffer_t* songAlbum;
@property(retain) SKBuiltinBuffer_t* songSinger;
@property(retain) SKBuiltinBuffer_t* songName;
@property(assign) float offset;
@property(assign) unsigned musicId;
@property(assign) unsigned endFlag;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSongLyric:(id)lyric;
-(id)SetSongWebUrl:(id)url;
-(id)SetSongWapLinkUrl:(id)url;
-(id)SetSongWifiUrl:(id)url;
-(id)SetSongAlbumUrl:(id)url;
-(id)SetSongAlbum:(id)album;
-(id)SetSongSinger:(id)singer;
-(id)SetSongName:(id)name;
-(id)SetOffset:(float)offset;
-(id)SetMusicId:(unsigned)anId;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetQQMusicLyricRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasUrl : 1;
	unsigned hasSongId : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* url;
	unsigned songId;
}
@property(assign) BOOL hasUrl;
@property(assign) BOOL hasSongId;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* url;
@property(assign) unsigned songId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUrl:(id)url;
-(id)SetSongId:(unsigned)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetQQMusicLyricResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasSongLyric : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* songLyric;
}
@property(assign) BOOL hasSongLyric;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* songLyric;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSongLyric:(id)lyric;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadInputVoiceRequest : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasClientVoiceId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasOffset : 1;
	unsigned hasEndFlag : 1;
	unsigned hasSamplePerSec : 1;
	unsigned hasBitsPerSample : 1;
	unsigned hasVoiceEncodeType : 1;
	unsigned hasFileType : 1;
	NSString* userName;
	NSString* clientVoiceId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned offset;
	unsigned endFlag;
	unsigned samplePerSec;
	unsigned bitsPerSample;
	unsigned voiceEncodeType;
	unsigned fileType;
}
@property(assign) BOOL hasFileType;
@property(assign) BOOL hasVoiceEncodeType;
@property(assign) BOOL hasBitsPerSample;
@property(assign) BOOL hasSamplePerSec;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasClientVoiceId;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasData;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned fileType;
@property(assign) unsigned voiceEncodeType;
@property(assign) unsigned bitsPerSample;
@property(assign) unsigned samplePerSec;
@property(assign) unsigned endFlag;
@property(retain) NSString* clientVoiceId;
@property(assign) unsigned offset;
@property(retain) SKBuiltinBuffer_t* data;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetFileType:(unsigned)type;
-(id)SetVoiceEncodeType:(unsigned)type;
-(id)SetBitsPerSample:(unsigned)sample;
-(id)SetSamplePerSec:(unsigned)sec;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetClientVoiceId:(id)anId;
-(id)SetOffset:(unsigned)offset;
-(id)SetData:(id)data;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadInputVoiceResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasText : 1;
	unsigned hasEndFlag : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* text;
	unsigned endFlag;
}
@property(assign) BOOL hasText;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* text;
@property(assign) unsigned endFlag;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetText:(id)text;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CDNDnsInfo : PBGeneratedMessage {
	unsigned hasFrontId : 1;
	unsigned hasFrontIpcount : 1;
	unsigned hasZoneId : 1;
	unsigned hasZoneIpcount : 1;
	unsigned hasZoneDomain : 1;
	unsigned hasAuthKey : 1;
	unsigned hasVer : 1;
	unsigned hasUin : 1;
	unsigned hasExpireTime : 1;
	int frontId;
	int frontIpcount;
	int zoneId;
	int zoneIpcount;
	NSString* zoneDomain;
	SKBuiltinBuffer_t* authKey;
	unsigned ver;
	unsigned uin;
	unsigned expireTime;
	NSMutableArray* mutableFrontIplistList;
	NSMutableArray* mutableZoneIplistList;
}
@property(retain) NSMutableArray* mutableZoneIplistList;
@property(assign) BOOL hasZoneIpcount;
@property(assign) BOOL hasZoneId;
@property(assign) BOOL hasAuthKey;
@property(assign) BOOL hasZoneDomain;
@property(retain) NSMutableArray* mutableFrontIplistList;
@property(assign) BOOL hasFrontIpcount;
@property(assign) BOOL hasFrontId;
@property(assign) BOOL hasExpireTime;
@property(assign) BOOL hasUin;
@property(assign) BOOL hasVer;
@property(assign) int zoneIpcount;
@property(assign) int zoneId;
@property(retain) SKBuiltinBuffer_t* authKey;
@property(retain) NSString* zoneDomain;
@property(assign) int frontIpcount;
@property(assign) int frontId;
@property(assign) unsigned expireTime;
@property(assign) unsigned uin;
@property(assign) unsigned ver;
+(id)parseFromData:(id)data;
-(id)addZoneIplist:(id)iplist;
-(id)addZoneIplistFromArray:(id)array;
-(id)SetZoneIpcount:(int)ipcount;
-(id)SetZoneId:(int)anId;
-(id)SetAuthKey:(id)key;
-(id)SetZoneDomain:(id)domain;
-(id)addFrontIplist:(id)iplist;
-(id)addFrontIplistFromArray:(id)array;
-(id)SetFrontIpcount:(int)ipcount;
-(id)SetFrontId:(int)anId;
-(id)SetExpireTime:(unsigned)time;
-(id)SetUin:(unsigned)uin;
-(id)SetVer:(unsigned)ver;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)zoneIplistList;
-(id)frontIplistList;
-(id)init;
-(void)dealloc;
@end

@interface GetCDNDnsRequest : PBGeneratedMessage {
	unsigned hasClientIp : 1;
	unsigned hasBaseRequest : 1;
	NSString* clientIp;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasClientIp;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* clientIp;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetClientIp:(id)ip;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCDNDnsResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasDnsInfo : 1;
	BaseResponse* baseResponse;
	CDNDnsInfo* dnsInfo;
}
@property(assign) BOOL hasDnsInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) CDNDnsInfo* dnsInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDnsInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EmojiUploadInfoReq : PBGeneratedMessage {
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	unsigned hasType : 1;
	unsigned hasMd5 : 1;
	unsigned hasToUserName : 1;
	unsigned hasExternXml : 1;
	unsigned hasReport : 1;
	unsigned hasClientMsgId : 1;
	unsigned hasMsgSource : 1;
	unsigned hasEmojiBuffer : 1;
	int startPos;
	int totalLen;
	int type;
	NSString* md5;
	NSString* toUserName;
	NSString* externXml;
	NSString* report;
	NSString* clientMsgId;
	NSString* msgSource;
	SKBuiltinBuffer_t* emojiBuffer;
}
@property(assign) BOOL hasMsgSource;
@property(assign) BOOL hasClientMsgId;
@property(assign) BOOL hasReport;
@property(assign) BOOL hasExternXml;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasType;
@property(assign) BOOL hasEmojiBuffer;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasMd5;
@property(retain) NSString* msgSource;
@property(retain) NSString* clientMsgId;
@property(retain) NSString* report;
@property(retain) NSString* externXml;
@property(retain) NSString* toUserName;
@property(assign) int type;
@property(retain) SKBuiltinBuffer_t* emojiBuffer;
@property(assign) int totalLen;
@property(assign) int startPos;
@property(retain) NSString* md5;
+(id)parseFromData:(id)data;
-(id)SetMsgSource:(id)source;
-(id)SetClientMsgId:(id)anId;
-(id)SetReport:(id)report;
-(id)SetExternXml:(id)xml;
-(id)SetToUserName:(id)userName;
-(id)SetType:(int)type;
-(id)SetEmojiBuffer:(id)buffer;
-(id)SetTotalLen:(int)len;
-(id)SetStartPos:(int)pos;
-(id)SetMd5:(id)a5;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadEmojiRequest : PBGeneratedMessage {
	unsigned hasEmojiItemCount : 1;
	unsigned hasBaseRequest : 1;
	int emojiItemCount;
	BaseRequest* baseRequest;
	NSMutableArray* mutableEmojiItemList;
}
@property(retain) NSMutableArray* mutableEmojiItemList;
@property(assign) BOOL hasEmojiItemCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) int emojiItemCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addEmojiItem:(id)item;
-(id)addEmojiItemFromArray:(id)array;
-(id)SetEmojiItemCount:(int)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)emojiItemList;
-(id)init;
-(void)dealloc;
@end

@interface EmojiUploadInfoResp : PBGeneratedMessage {
	unsigned hasRet : 1;
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	unsigned hasMd5 : 1;
	unsigned hasMsgId : 1;
	int ret;
	int startPos;
	int totalLen;
	NSString* md5;
	unsigned msgId;
}
@property(assign) BOOL hasMsgId;
@property(assign) BOOL hasMd5;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasRet;
@property(assign) unsigned msgId;
@property(retain) NSString* md5;
@property(assign) int totalLen;
@property(assign) int startPos;
@property(assign) int ret;
+(id)parseFromData:(id)data;
-(id)SetMsgId:(unsigned)anId;
-(id)SetMd5:(id)a5;
-(id)SetTotalLen:(int)len;
-(id)SetStartPos:(int)pos;
-(id)SetRet:(int)ret;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadEmojiResponse : PBGeneratedMessage {
	unsigned hasEmojiItemCount : 1;
	unsigned hasBaseResponse : 1;
	int emojiItemCount;
	BaseResponse* baseResponse;
	NSMutableArray* mutableEmojiItemList;
}
@property(retain) NSMutableArray* mutableEmojiItemList;
@property(assign) BOOL hasEmojiItemCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) int emojiItemCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addEmojiItem:(id)item;
-(id)addEmojiItemFromArray:(id)array;
-(id)SetEmojiItemCount:(int)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)emojiItemList;
-(id)init;
-(void)dealloc;
@end

@interface EmojiDownloadInfoReq : PBGeneratedMessage {
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	unsigned hasId : 1;
	unsigned hasMd5 : 1;
	int startPos;
	int totalLen;
	NSString* id;
	NSString* md5;
}
@property(assign) BOOL hasMd5;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasId;
@property(retain) NSString* md5;
@property(assign) int totalLen;
@property(assign) int startPos;
@property(retain) NSString* id;
+(id)parseFromData:(id)data;
-(id)SetMd5:(id)a5;
-(id)SetTotalLen:(int)len;
-(id)SetStartPos:(int)pos;
-(id)SetId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DownloadEmojiRequest : PBGeneratedMessage {
	unsigned hasEmojiItemCount : 1;
	unsigned hasBaseRequest : 1;
	int emojiItemCount;
	BaseRequest* baseRequest;
	NSMutableArray* mutableEmojiItemList;
}
@property(retain) NSMutableArray* mutableEmojiItemList;
@property(assign) BOOL hasEmojiItemCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) int emojiItemCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addEmojiItem:(id)item;
-(id)addEmojiItemFromArray:(id)array;
-(id)SetEmojiItemCount:(int)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)emojiItemList;
-(id)init;
-(void)dealloc;
@end

@interface EmojiDownloadInfoResp : PBGeneratedMessage {
	unsigned hasRet : 1;
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	unsigned hasMd5 : 1;
	unsigned hasId : 1;
	unsigned hasEmojiBuffer : 1;
	int ret;
	int startPos;
	int totalLen;
	NSString* md5;
	NSString* id;
	SKBuiltinBuffer_t* emojiBuffer;
}
@property(assign) BOOL hasId;
@property(assign) BOOL hasMd5;
@property(assign) BOOL hasEmojiBuffer;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasRet;
@property(retain) NSString* id;
@property(retain) NSString* md5;
@property(retain) SKBuiltinBuffer_t* emojiBuffer;
@property(assign) int totalLen;
@property(assign) int startPos;
@property(assign) int ret;
+(id)parseFromData:(id)data;
-(id)SetId:(id)anId;
-(id)SetMd5:(id)a5;
-(id)SetEmojiBuffer:(id)buffer;
-(id)SetTotalLen:(int)len;
-(id)SetStartPos:(int)pos;
-(id)SetRet:(int)ret;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DownloadEmojiResponse : PBGeneratedMessage {
	unsigned hasEmojiItemCount : 1;
	unsigned hasBaseResponse : 1;
	int emojiItemCount;
	BaseResponse* baseResponse;
	NSMutableArray* mutableEmojiItemList;
}
@property(retain) NSMutableArray* mutableEmojiItemList;
@property(assign) BOOL hasEmojiItemCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) int emojiItemCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addEmojiItem:(id)item;
-(id)addEmojiItemFromArray:(id)array;
-(id)SetEmojiItemCount:(int)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)emojiItemList;
-(id)init;
-(void)dealloc;
@end

@interface UploadMsgImgRequest : PBGeneratedMessage {
	unsigned hasCdnthumbImgWidth : 1;
	unsigned hasCdnthumbImgHeight : 1;
	unsigned hasCdnthumbImgSize : 1;
	unsigned hasCdnmidImgSize : 1;
	unsigned hasCdnbigImgSize : 1;
	unsigned hasEncryVer : 1;
	unsigned hasNetType : 1;
	unsigned hasPhotoFrom : 1;
	unsigned hasCdnthumbAeskey : 1;
	unsigned hasCdnthumbImgUrl : 1;
	unsigned hasAeskey : 1;
	unsigned hasCdnmidImgUrl : 1;
	unsigned hasCdnbigImgUrl : 1;
	unsigned hasMediaId : 1;
	unsigned hasMsgSource : 1;
	unsigned hasData : 1;
	unsigned hasToUserName : 1;
	unsigned hasFromUserName : 1;
	unsigned hasClientImgId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasCompressType : 1;
	unsigned hasMsgType : 1;
	unsigned hasDataLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	int cdnthumbImgWidth;
	int cdnthumbImgHeight;
	int cdnthumbImgSize;
	int cdnmidImgSize;
	int cdnbigImgSize;
	int encryVer;
	int netType;
	int photoFrom;
	NSString* cdnthumbAeskey;
	NSString* cdnthumbImgUrl;
	NSString* aeskey;
	NSString* cdnmidImgUrl;
	NSString* cdnbigImgUrl;
	NSString* mediaId;
	NSString* msgSource;
	SKBuiltinBuffer_t* data;
	SKBuiltinString_t* toUserName;
	SKBuiltinString_t* fromUserName;
	SKBuiltinString_t* clientImgId;
	BaseRequest* baseRequest;
	unsigned compressType;
	unsigned msgType;
	unsigned dataLen;
	unsigned startPos;
	unsigned totalLen;
}
@property(assign) BOOL hasCdnthumbAeskey;
@property(assign) BOOL hasCdnthumbImgWidth;
@property(assign) BOOL hasCdnthumbImgHeight;
@property(assign) BOOL hasCdnthumbImgSize;
@property(assign) BOOL hasCdnthumbImgUrl;
@property(assign) BOOL hasCdnmidImgSize;
@property(assign) BOOL hasCdnbigImgSize;
@property(assign) BOOL hasEncryVer;
@property(assign) BOOL hasAeskey;
@property(assign) BOOL hasCdnmidImgUrl;
@property(assign) BOOL hasCdnbigImgUrl;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasPhotoFrom;
@property(assign) BOOL hasNetType;
@property(assign) BOOL hasCompressType;
@property(assign) BOOL hasMsgSource;
@property(assign) BOOL hasMsgType;
@property(assign) BOOL hasData;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasClientImgId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* cdnthumbAeskey;
@property(assign) int cdnthumbImgWidth;
@property(assign) int cdnthumbImgHeight;
@property(assign) int cdnthumbImgSize;
@property(retain) NSString* cdnthumbImgUrl;
@property(assign) int cdnmidImgSize;
@property(assign) int cdnbigImgSize;
@property(assign) int encryVer;
@property(retain) NSString* aeskey;
@property(retain) NSString* cdnmidImgUrl;
@property(retain) NSString* cdnbigImgUrl;
@property(retain) NSString* mediaId;
@property(assign) int photoFrom;
@property(assign) int netType;
@property(assign) unsigned compressType;
@property(retain) NSString* msgSource;
@property(assign) unsigned msgType;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned dataLen;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) SKBuiltinString_t* toUserName;
@property(retain) SKBuiltinString_t* fromUserName;
@property(retain) SKBuiltinString_t* clientImgId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetCdnthumbAeskey:(id)aeskey;
-(id)SetCdnthumbImgWidth:(int)width;
-(id)SetCdnthumbImgHeight:(int)height;
-(id)SetCdnthumbImgSize:(int)size;
-(id)SetCdnthumbImgUrl:(id)url;
-(id)SetCdnmidImgSize:(int)size;
-(id)SetCdnbigImgSize:(int)size;
-(id)SetEncryVer:(int)ver;
-(id)SetAeskey:(id)aeskey;
-(id)SetCdnmidImgUrl:(id)url;
-(id)SetCdnbigImgUrl:(id)url;
-(id)SetMediaId:(id)anId;
-(id)SetPhotoFrom:(int)from;
-(id)SetNetType:(int)type;
-(id)SetCompressType:(unsigned)type;
-(id)SetMsgSource:(id)source;
-(id)SetMsgType:(unsigned)type;
-(id)SetData:(id)data;
-(id)SetDataLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetToUserName:(id)userName;
-(id)SetFromUserName:(id)userName;
-(id)SetClientImgId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadMsgImgResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasClientImgId : 1;
	unsigned hasFromUserName : 1;
	unsigned hasToUserName : 1;
	unsigned hasMsgId : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasDataLen : 1;
	unsigned hasCreateTime : 1;
	BaseResponse* baseResponse;
	SKBuiltinString_t* clientImgId;
	SKBuiltinString_t* fromUserName;
	SKBuiltinString_t* toUserName;
	unsigned msgId;
	unsigned totalLen;
	unsigned startPos;
	unsigned dataLen;
	unsigned createTime;
}
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasClientImgId;
@property(assign) BOOL hasMsgId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned createTime;
@property(assign) unsigned dataLen;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) SKBuiltinString_t* toUserName;
@property(retain) SKBuiltinString_t* fromUserName;
@property(retain) SKBuiltinString_t* clientImgId;
@property(assign) unsigned msgId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCreateTime:(unsigned)time;
-(id)SetDataLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetToUserName:(id)userName;
-(id)SetFromUserName:(id)userName;
-(id)SetClientImgId:(id)anId;
-(id)SetMsgId:(unsigned)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetQRCodeRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasUserName : 1;
	unsigned hasStyle : 1;
	BaseRequest* baseRequest;
	SKBuiltinString_t* userName;
	unsigned style;
}
@property(assign) BOOL hasStyle;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned style;
@property(retain) SKBuiltinString_t* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetStyle:(unsigned)style;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetQRCodeResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasQrcode : 1;
	unsigned hasStyle : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* qrcode;
	unsigned style;
}
@property(assign) BOOL hasStyle;
@property(assign) BOOL hasQrcode;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned style;
@property(retain) SKBuiltinBuffer_t* qrcode;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetStyle:(unsigned)style;
-(id)SetQrcode:(id)qrcode;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SendQRCodeByEmailReq : PBGeneratedMessage {
	unsigned hasQrcodeUserName : 1;
	unsigned hasTittle : 1;
	unsigned hasContent : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasToCount : 1;
	NSString* qrcodeUserName;
	NSString* tittle;
	NSString* content;
	BaseRequest* baseRequest;
	unsigned toCount;
	NSMutableArray* mutableToListList;
}
@property(assign) BOOL hasContent;
@property(assign) BOOL hasTittle;
@property(retain) NSMutableArray* mutableToListList;
@property(assign) BOOL hasToCount;
@property(assign) BOOL hasQrcodeUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* content;
@property(retain) NSString* tittle;
@property(assign) unsigned toCount;
@property(retain) NSString* qrcodeUserName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetContent:(id)content;
-(id)SetTittle:(id)tittle;
-(id)addToList:(id)list;
-(id)addToListFromArray:(id)array;
-(id)SetToCount:(unsigned)count;
-(id)SetQrcodeUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)toListList;
-(id)init;
-(void)dealloc;
@end

@interface SendQRCodeByEmailResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipRelayData : PBGeneratedMessage {
	unsigned hasType : 1;
	unsigned hasBuffer : 1;
	int type;
	SKBuiltinBuffer_t* buffer;
}
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasType;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(assign) int type;
+(id)parseFromData:(id)data;
-(id)SetBuffer:(id)buffer;
-(id)SetType:(int)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipMultiRelayData : PBGeneratedMessage {
	unsigned hasSendingType : 1;
	unsigned hasPeerId : 1;
	unsigned hasCapInfo : 1;
	int sendingType;
	VoipRelayData* peerId;
	VoipRelayData* capInfo;
}
@property(assign) BOOL hasSendingType;
@property(assign) BOOL hasCapInfo;
@property(assign) BOOL hasPeerId;
@property(assign) int sendingType;
@property(retain) VoipRelayData* capInfo;
@property(retain) VoipRelayData* peerId;
+(id)parseFromData:(id)data;
-(id)SetSendingType:(int)type;
-(id)SetCapInfo:(id)info;
-(id)SetPeerId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipStatReportData : PBGeneratedMessage {
	unsigned hasStatReport : 1;
	SKBuiltinString_t* statReport;
}
@property(assign) BOOL hasStatReport;
@property(retain) SKBuiltinString_t* statReport;
+(id)parseFromData:(id)data;
-(id)SetStatReport:(id)report;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipInviteRemindReq : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasListCount : 1;
	unsigned hasInviteType : 1;
	BaseRequest* baseRequest;
	unsigned listCount;
	unsigned inviteType;
	NSMutableArray* mutableToUserNameListList;
}
@property(assign) BOOL hasInviteType;
@property(retain) NSMutableArray* mutableToUserNameListList;
@property(assign) BOOL hasListCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned inviteType;
@property(assign) unsigned listCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetInviteType:(unsigned)type;
-(id)addToUserNameList:(id)userNameList;
-(id)addToUserNameListFromArray:(id)array;
-(id)SetListCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)toUserNameListList;
-(id)init;
-(void)dealloc;
@end

@interface VoipInviteRemindResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipInviteReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasInviteUserCount : 1;
	unsigned hasNetType : 1;
	unsigned hasCallType : 1;
	unsigned hasRoomId : 1;
	unsigned hasFromUsername : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasPeerId : 1;
	unsigned hasCapInfo : 1;
	unsigned hasInviteType : 1;
	long long roomKey;
	int inviteUserCount;
	int netType;
	int callType;
	int roomId;
	NSString* fromUsername;
	BaseRequest* baseRequest;
	VoipRelayData* peerId;
	VoipRelayData* capInfo;
	unsigned inviteType;
	NSMutableArray* mutableToUsernameListList;
}
@property(assign) BOOL hasInviteType;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasCallType;
@property(assign) BOOL hasNetType;
@property(assign) BOOL hasCapInfo;
@property(assign) BOOL hasPeerId;
@property(retain) NSMutableArray* mutableToUsernameListList;
@property(assign) BOOL hasInviteUserCount;
@property(assign) BOOL hasFromUsername;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned inviteType;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(assign) int callType;
@property(assign) int netType;
@property(retain) VoipRelayData* capInfo;
@property(retain) VoipRelayData* peerId;
@property(assign) int inviteUserCount;
@property(retain) NSString* fromUsername;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetInviteType:(unsigned)type;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetCallType:(int)type;
-(id)SetNetType:(int)type;
-(id)SetCapInfo:(id)info;
-(id)SetPeerId:(id)anId;
-(id)addToUsernameList:(id)usernameList;
-(id)addToUsernameListFromArray:(id)array;
-(id)SetInviteUserCount:(int)count;
-(id)SetFromUsername:(id)username;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)toUsernameListList;
-(id)init;
-(void)dealloc;
@end

@interface VoipAddr : PBGeneratedMessage {
	unsigned hasIp : 1;
	unsigned hasPort : 1;
	int ip;
	int port;
}
@property(assign) BOOL hasPort;
@property(assign) BOOL hasIp;
@property(assign) int port;
@property(assign) int ip;
+(id)parseFromData:(id)data;
-(id)SetPort:(int)port;
-(id)SetIp:(int)ip;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipInviteResp : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasAddrCount : 1;
	unsigned hasRoomMemberId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasRelayData : 1;
	long long roomKey;
	int roomId;
	int addrCount;
	int roomMemberId;
	BaseResponse* baseResponse;
	VoipMultiRelayData* relayData;
	NSMutableArray* mutableAddrListList;
}
@property(assign) BOOL hasRelayData;
@property(assign) BOOL hasRoomMemberId;
@property(assign) BOOL hasRoomKey;
@property(retain) NSMutableArray* mutableAddrListList;
@property(assign) BOOL hasAddrCount;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseResponse;
@property(retain) VoipMultiRelayData* relayData;
@property(assign) int roomMemberId;
@property(assign) long long roomKey;
@property(assign) int addrCount;
@property(assign) int roomId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRelayData:(id)data;
-(id)SetRoomMemberId:(int)anId;
-(id)SetRoomKey:(long long)key;
-(id)addAddrList:(id)list;
-(id)addAddrListFromArray:(id)array;
-(id)SetAddrCount:(int)count;
-(id)SetRoomId:(int)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)addrListList;
-(id)init;
-(void)dealloc;
@end

@interface VoipCancelInviteReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasFromUsername : 1;
	unsigned hasToUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasReportData : 1;
	unsigned hasInviteType : 1;
	long long roomKey;
	int roomId;
	NSString* fromUsername;
	NSString* toUserName;
	BaseRequest* baseRequest;
	VoipStatReportData* reportData;
	unsigned inviteType;
}
@property(assign) BOOL hasInviteType;
@property(assign) BOOL hasReportData;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasFromUsername;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned inviteType;
@property(retain) VoipStatReportData* reportData;
@property(retain) NSString* toUserName;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) NSString* fromUsername;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetInviteType:(unsigned)type;
-(id)SetReportData:(id)data;
-(id)SetToUserName:(id)userName;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetFromUsername:(id)username;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipCancelInviteResp : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseResponse : 1;
	long long roomKey;
	int roomId;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseResponse;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipSyncExtendData : PBGeneratedMessage {
	unsigned hasSendingType : 1;
	int sendingType;
}
@property(assign) BOOL hasSendingType;
@property(assign) int sendingType;
+(id)parseFromData:(id)data;
-(id)SetSendingType:(int)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipAnswerReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasAnswer : 1;
	unsigned hasNetType : 1;
	unsigned hasFromUsername : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasPeerId : 1;
	unsigned hasCapInfo : 1;
	long long roomKey;
	int roomId;
	int answer;
	int netType;
	NSString* fromUsername;
	BaseRequest* baseRequest;
	VoipRelayData* peerId;
	VoipRelayData* capInfo;
}
@property(assign) BOOL hasNetType;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasCapInfo;
@property(assign) BOOL hasPeerId;
@property(assign) BOOL hasAnswer;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasFromUsername;
@property(assign) BOOL hasBaseRequest;
@property(assign) int netType;
@property(assign) long long roomKey;
@property(retain) VoipRelayData* capInfo;
@property(retain) VoipRelayData* peerId;
@property(assign) int answer;
@property(assign) int roomId;
@property(retain) NSString* fromUsername;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetNetType:(int)type;
-(id)SetRoomKey:(long long)key;
-(id)SetCapInfo:(id)info;
-(id)SetPeerId:(id)anId;
-(id)SetAnswer:(int)answer;
-(id)SetRoomId:(int)anId;
-(id)SetFromUsername:(id)username;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipAnswerResp : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasAddrCount : 1;
	unsigned hasRoomId : 1;
	unsigned hasRoomMemberId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasRelayData : 1;
	long long roomKey;
	int addrCount;
	int roomId;
	int roomMemberId;
	BaseResponse* baseResponse;
	VoipMultiRelayData* relayData;
	NSMutableArray* mutableAddrListList;
}
@property(assign) BOOL hasRelayData;
@property(assign) BOOL hasRoomMemberId;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(retain) NSMutableArray* mutableAddrListList;
@property(assign) BOOL hasAddrCount;
@property(assign) BOOL hasBaseResponse;
@property(retain) VoipMultiRelayData* relayData;
@property(assign) int roomMemberId;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(assign) int addrCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRelayData:(id)data;
-(id)SetRoomMemberId:(int)anId;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)addAddrList:(id)list;
-(id)addAddrListFromArray:(id)array;
-(id)SetAddrCount:(int)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)addrListList;
-(id)init;
-(void)dealloc;
@end

@interface VoipShutDownReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasFromUsername : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasReportData : 1;
	long long roomKey;
	int roomId;
	NSString* fromUsername;
	BaseRequest* baseRequest;
	VoipStatReportData* reportData;
}
@property(assign) BOOL hasReportData;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasFromUsername;
@property(assign) BOOL hasBaseRequest;
@property(retain) VoipStatReportData* reportData;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) NSString* fromUsername;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReportData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetFromUsername:(id)username;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipShutDownResp : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseResponse : 1;
	long long roomKey;
	int roomId;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseResponse;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipCmdItem : PBGeneratedMessage {
	unsigned hasCmdId : 1;
	unsigned hasFromUserName : 1;
	unsigned hasCmdBuf : 1;
	int cmdId;
	NSString* fromUserName;
	SKBuiltinBuffer_t* cmdBuf;
}
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasCmdBuf;
@property(assign) BOOL hasCmdId;
@property(retain) NSString* fromUserName;
@property(retain) SKBuiltinBuffer_t* cmdBuf;
@property(assign) int cmdId;
+(id)parseFromData:(id)data;
-(id)SetFromUserName:(id)userName;
-(id)SetCmdBuf:(id)buf;
-(id)SetCmdId:(int)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipCmdList : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface VoipSyncReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasSelector : 1;
	unsigned hasFromUsername : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasKeyBuf : 1;
	unsigned hasOpLog : 1;
	long long roomKey;
	int roomId;
	int selector;
	NSString* fromUsername;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* keyBuf;
	VoipCmdList* opLog;
}
@property(assign) BOOL hasSelector;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasOpLog;
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasFromUsername;
@property(assign) BOOL hasBaseRequest;
@property(assign) int selector;
@property(assign) long long roomKey;
@property(retain) VoipCmdList* opLog;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(assign) int roomId;
@property(retain) NSString* fromUsername;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSelector:(int)selector;
-(id)SetRoomKey:(long long)key;
-(id)SetOpLog:(id)log;
-(id)SetKeyBuf:(id)buf;
-(id)SetRoomId:(int)anId;
-(id)SetFromUsername:(id)username;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipHeartBeatReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseRequest : 1;
	long long roomKey;
	int roomId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseRequest;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipHeartBeatResp : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseResponse : 1;
	long long roomKey;
	int roomId;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseResponse;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipSyncResp : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasContinueFlag : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasKeyBuf : 1;
	unsigned hasCmdList : 1;
	long long roomKey;
	int roomId;
	int continueFlag;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* keyBuf;
	VoipCmdList* cmdList;
}
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasContinueFlag;
@property(assign) BOOL hasCmdList;
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseResponse;
@property(assign) long long roomKey;
@property(assign) int continueFlag;
@property(retain) VoipCmdList* cmdList;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(assign) int roomId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetContinueFlag:(int)flag;
-(id)SetCmdList:(id)list;
-(id)SetKeyBuf:(id)buf;
-(id)SetRoomId:(int)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipRelayDataToResdis : PBGeneratedMessage {
	unsigned hasSeq : 1;
	unsigned hasBuffer : 1;
	unsigned hasUin : 1;
	int seq;
	SKBuiltinBuffer_t* buffer;
	unsigned uin;
}
@property(assign) BOOL hasUin;
@property(assign) BOOL hasSeq;
@property(assign) BOOL hasBuffer;
@property(assign) unsigned uin;
@property(assign) int seq;
@property(retain) SKBuiltinBuffer_t* buffer;
+(id)parseFromData:(id)data;
-(id)SetUin:(unsigned)uin;
-(id)SetSeq:(int)seq;
-(id)SetBuffer:(id)buffer;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipRelayDataToResdisList : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface VoipStatusItem : PBGeneratedMessage {
	unsigned hasStatus : 1;
	unsigned hasUsername : 1;
	int status;
	NSString* username;
}
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasUsername;
@property(assign) int status;
@property(retain) NSString* username;
+(id)parseFromData:(id)data;
-(id)SetStatus:(int)status;
-(id)SetUsername:(id)username;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipStatReq : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasStatBuffer : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* statBuffer;
}
@property(assign) BOOL hasStatBuffer;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* statBuffer;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetStatBuffer:(id)buffer;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipStatResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipGetRoomInfoReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasCallerUserName : 1;
	unsigned hasBaseRequest : 1;
	long long roomKey;
	int roomId;
	NSString* callerUserName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasCallerUserName;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* callerUserName;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetCallerUserName:(id)name;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipGetRoomInfoResp : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasMemberCount : 1;
	unsigned hasCallerUserName : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasCreateTime : 1;
	unsigned hasInviteType : 1;
	long long roomKey;
	int roomId;
	int memberCount;
	NSString* callerUserName;
	BaseResponse* baseResponse;
	unsigned createTime;
	unsigned inviteType;
	NSMutableArray* mutableMemberStatusList;
}
@property(assign) BOOL hasInviteType;
@property(assign) BOOL hasCallerUserName;
@property(retain) NSMutableArray* mutableMemberStatusList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned inviteType;
@property(retain) NSString* callerUserName;
@property(assign) int memberCount;
@property(assign) unsigned createTime;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetInviteType:(unsigned)type;
-(id)SetCallerUserName:(id)name;
-(id)addMemberStatus:(id)status;
-(id)addMemberStatusFromArray:(id)array;
-(id)SetMemberCount:(int)count;
-(id)SetCreateTime:(unsigned)time;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberStatusList;
-(id)init;
-(void)dealloc;
@end

@interface VoipAckReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseRequest : 1;
	long long roomKey;
	int roomId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseRequest;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipAckResp : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseResponse : 1;
	long long roomKey;
	int roomId;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseResponse;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipGetDeviceInfoReq : PBGeneratedMessage {
	unsigned hasDeviceType : 1;
	unsigned hasBaseRequest : 1;
	NSString* deviceType;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasDeviceType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* deviceType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetDeviceType:(id)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipGetDeviceInfoResp : PBGeneratedMessage {
	unsigned hasDeviceInfo : 1;
	unsigned hasBaseResponse : 1;
	int deviceInfo;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasDeviceInfo;
@property(assign) BOOL hasBaseResponse;
@property(assign) int deviceInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDeviceInfo:(int)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipStatReportReq : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasReportData : 1;
	BaseRequest* baseRequest;
	VoipStatReportData* reportData;
}
@property(assign) BOOL hasReportData;
@property(assign) BOOL hasBaseRequest;
@property(retain) VoipStatReportData* reportData;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReportData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoipStatReportResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface InitBuffer : PBGeneratedMessage {
	unsigned hasMaxSyncKey : 1;
	unsigned maxSyncKey;
}
@property(assign) BOOL hasMaxSyncKey;
@property(assign) unsigned maxSyncKey;
+(id)parseFromData:(id)data;
-(id)SetMaxSyncKey:(unsigned)key;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface NewSyncRequest : PBGeneratedMessage {
	unsigned hasDeviceType : 1;
	unsigned hasOplog : 1;
	unsigned hasKeyBuf : 1;
	unsigned hasSelector : 1;
	unsigned hasScene : 1;
	NSString* deviceType;
	CmdList* oplog;
	SKBuiltinBuffer_t* keyBuf;
	unsigned selector;
	unsigned scene;
}
@property(assign) BOOL hasDeviceType;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasSelector;
@property(assign) BOOL hasOplog;
@property(retain) NSString* deviceType;
@property(assign) unsigned scene;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(assign) unsigned selector;
@property(retain) CmdList* oplog;
+(id)parseFromData:(id)data;
-(id)SetDeviceType:(id)type;
-(id)SetScene:(unsigned)scene;
-(id)SetKeyBuf:(id)buf;
-(id)SetSelector:(unsigned)selector;
-(id)SetOplog:(id)oplog;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface NewSyncResponse : PBGeneratedMessage {
	unsigned hasRet : 1;
	unsigned hasCmdList : 1;
	unsigned hasKeyBuf : 1;
	unsigned hasContinueFlag : 1;
	unsigned hasStatus : 1;
	unsigned hasOnlineVersion : 1;
	int ret;
	CmdList* cmdList;
	SKBuiltinBuffer_t* keyBuf;
	unsigned continueFlag;
	unsigned status;
	unsigned onlineVersion;
}
@property(assign) BOOL hasOnlineVersion;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasContinueFlag;
@property(assign) BOOL hasCmdList;
@property(assign) BOOL hasRet;
@property(assign) unsigned onlineVersion;
@property(assign) unsigned status;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(assign) unsigned continueFlag;
@property(retain) CmdList* cmdList;
@property(assign) int ret;
+(id)parseFromData:(id)data;
-(id)SetOnlineVersion:(unsigned)version;
-(id)SetStatus:(unsigned)status;
-(id)SetKeyBuf:(id)buf;
-(id)SetContinueFlag:(unsigned)flag;
-(id)SetCmdList:(id)list;
-(id)SetRet:(int)ret;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RoomInfo : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasNickName : 1;
	SKBuiltinString_t* userName;
	SKBuiltinString_t* nickName;
}
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(retain) SKBuiltinString_t* nickName;
@property(retain) SKBuiltinString_t* userName;
+(id)parseFromData:(id)data;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModContact : PBGeneratedMessage {
	unsigned hasLevel : 1;
	unsigned hasSex : 1;
	unsigned hasAlbumStyle : 1;
	unsigned hasAlbumFlag : 1;
	unsigned hasVerifyInfo : 1;
	unsigned hasWeibo : 1;
	unsigned hasVerifyContent : 1;
	unsigned hasAlias : 1;
	unsigned hasChatRoomOwner : 1;
	unsigned hasWeiboNickname : 1;
	unsigned hasAlbumBgimgId : 1;
	unsigned hasCountry : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasMyBrandList : 1;
	unsigned hasChatRoomData : 1;
	unsigned hasHeadImgMd5 : 1;
	unsigned hasEncryptUserName : 1;
	unsigned hasIdcardNum : 1;
	unsigned hasRealName : 1;
	unsigned hasMobileHash : 1;
	unsigned hasMobileFullHash : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasRemarkPyinitial : 1;
	unsigned hasRemarkQuanPin : 1;
	unsigned hasSnsUserInfo : 1;
	unsigned hasRemark : 1;
	unsigned hasCustomizedInfo : 1;
	unsigned hasDomainList : 1;
	unsigned hasImgBuf : 1;
	unsigned hasQuanPin : 1;
	unsigned hasPyinitial : 1;
	unsigned hasNickName : 1;
	unsigned hasUserName : 1;
	unsigned hasBitMask : 1;
	unsigned hasBitVal : 1;
	unsigned hasImgFlag : 1;
	unsigned hasContactType : 1;
	unsigned hasRoomInfoCount : 1;
	unsigned hasWeiboFlag : 1;
	unsigned hasChatRoomNotify : 1;
	unsigned hasAddContactScene : 1;
	unsigned hasSource : 1;
	unsigned hasPersonalCard : 1;
	unsigned hasVerifyFlag : 1;
	unsigned hasHasWeiXinHdHeadImg : 1;
	int level;
	int sex;
	int albumStyle;
	int albumFlag;
	NSString* verifyInfo;
	NSString* weibo;
	NSString* verifyContent;
	NSString* alias;
	NSString* chatRoomOwner;
	NSString* weiboNickname;
	NSString* albumBgimgId;
	NSString* country;
	NSString* bigHeadImgUrl;
	NSString* smallHeadImgUrl;
	NSString* myBrandList;
	NSString* chatRoomData;
	NSString* headImgMd5;
	NSString* encryptUserName;
	NSString* idcardNum;
	NSString* realName;
	NSString* mobileHash;
	NSString* mobileFullHash;
	NSString* signature;
	NSString* city;
	NSString* province;
	SKBuiltinString_t* remarkPyinitial;
	SKBuiltinString_t* remarkQuanPin;
	SnsUserInfo* snsUserInfo;
	SKBuiltinString_t* remark;
	CustomizedInfo* customizedInfo;
	SKBuiltinString_t* domainList;
	SKBuiltinBuffer_t* imgBuf;
	SKBuiltinString_t* quanPin;
	SKBuiltinString_t* pyinitial;
	SKBuiltinString_t* nickName;
	SKBuiltinString_t* userName;
	unsigned bitMask;
	unsigned bitVal;
	unsigned imgFlag;
	unsigned contactType;
	unsigned roomInfoCount;
	unsigned weiboFlag;
	unsigned chatRoomNotify;
	unsigned addContactScene;
	unsigned source;
	unsigned personalCard;
	unsigned verifyFlag;
	unsigned hasWeiXinHdHeadImg;
	NSMutableArray* mutableRoomInfoListList;
}
@property(assign) BOOL hasMobileFullHash;
@property(assign) BOOL hasMobileHash;
@property(assign) BOOL hasRealName;
@property(assign) BOOL hasIdcardNum;
@property(assign) BOOL hasEncryptUserName;
@property(assign) BOOL hasHeadImgMd5;
@property(assign) BOOL hasChatRoomData;
@property(assign) BOOL hasCustomizedInfo;
@property(assign) BOOL hasMyBrandList;
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasSnsUserInfo;
@property(assign) BOOL hasAlbumBgimgId;
@property(assign) BOOL hasAlbumFlag;
@property(assign) BOOL hasAlbumStyle;
@property(assign) BOOL hasWeiboFlag;
@property(assign) BOOL hasWeiboNickname;
@property(assign) BOOL hasChatRoomOwner;
@property(assign) BOOL hasAlias;
@property(assign) BOOL hasVerifyContent;
@property(assign) BOOL hasWeibo;
@property(assign) BOOL hasSource;
@property(assign) BOOL hasLevel;
@property(assign) BOOL hasVerifyInfo;
@property(assign) BOOL hasVerifyFlag;
@property(assign) BOOL hasHasWeiXinHdHeadImg;
@property(assign) BOOL hasPersonalCard;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasAddContactScene;
@property(assign) BOOL hasChatRoomNotify;
@property(assign) BOOL hasDomainList;
@property(retain) NSMutableArray* mutableRoomInfoListList;
@property(assign) BOOL hasRoomInfoCount;
@property(assign) BOOL hasContactType;
@property(assign) BOOL hasRemarkQuanPin;
@property(assign) BOOL hasRemarkPyinitial;
@property(assign) BOOL hasRemark;
@property(assign) BOOL hasImgFlag;
@property(assign) BOOL hasBitVal;
@property(assign) BOOL hasBitMask;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasQuanPin;
@property(assign) BOOL hasPyinitial;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(retain) NSString* mobileFullHash;
@property(retain) NSString* mobileHash;
@property(retain) NSString* realName;
@property(retain) NSString* idcardNum;
@property(retain) NSString* encryptUserName;
@property(retain) NSString* headImgMd5;
@property(retain) NSString* chatRoomData;
@property(retain) CustomizedInfo* customizedInfo;
@property(retain) NSString* myBrandList;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) NSString* country;
@property(retain) SnsUserInfo* snsUserInfo;
@property(retain) NSString* albumBgimgId;
@property(assign) int albumFlag;
@property(assign) int albumStyle;
@property(assign) unsigned weiboFlag;
@property(retain) NSString* weiboNickname;
@property(retain) NSString* chatRoomOwner;
@property(retain) NSString* alias;
@property(retain) NSString* verifyContent;
@property(retain) NSString* weibo;
@property(assign) unsigned source;
@property(assign) int level;
@property(retain) NSString* verifyInfo;
@property(assign) unsigned verifyFlag;
@property(assign) unsigned hasWeiXinHdHeadImg;
@property(assign) unsigned personalCard;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(assign) unsigned addContactScene;
@property(assign) unsigned chatRoomNotify;
@property(retain) SKBuiltinString_t* domainList;
@property(assign) unsigned roomInfoCount;
@property(assign) unsigned contactType;
@property(retain) SKBuiltinString_t* remarkQuanPin;
@property(retain) SKBuiltinString_t* remarkPyinitial;
@property(retain) SKBuiltinString_t* remark;
@property(assign) unsigned imgFlag;
@property(assign) unsigned bitVal;
@property(assign) unsigned bitMask;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(assign) int sex;
@property(retain) SKBuiltinString_t* quanPin;
@property(retain) SKBuiltinString_t* pyinitial;
@property(retain) SKBuiltinString_t* nickName;
@property(retain) SKBuiltinString_t* userName;
+(id)parseFromData:(id)data;
-(id)SetMobileFullHash:(id)hash;
-(id)SetMobileHash:(id)hash;
-(id)SetRealName:(id)name;
-(id)SetIdcardNum:(id)num;
-(id)SetEncryptUserName:(id)name;
-(id)SetHeadImgMd5:(id)a5;
-(id)SetChatRoomData:(id)data;
-(id)SetCustomizedInfo:(id)info;
-(id)SetMyBrandList:(id)list;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetCountry:(id)country;
-(id)SetSnsUserInfo:(id)info;
-(id)SetAlbumBgimgId:(id)anId;
-(id)SetAlbumFlag:(int)flag;
-(id)SetAlbumStyle:(int)style;
-(id)SetWeiboFlag:(unsigned)flag;
-(id)SetWeiboNickname:(id)nickname;
-(id)SetChatRoomOwner:(id)owner;
-(id)SetAlias:(id)alias;
-(id)SetVerifyContent:(id)content;
-(id)SetWeibo:(id)weibo;
-(id)SetSource:(unsigned)source;
-(id)SetLevel:(int)level;
-(id)SetVerifyInfo:(id)info;
-(id)SetVerifyFlag:(unsigned)flag;
-(id)SetHasWeiXinHdHeadImg:(unsigned)img;
-(id)SetPersonalCard:(unsigned)card;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetAddContactScene:(unsigned)scene;
-(id)SetChatRoomNotify:(unsigned)notify;
-(id)SetDomainList:(id)list;
-(id)addRoomInfoList:(id)list;
-(id)addRoomInfoListFromArray:(id)array;
-(id)SetRoomInfoCount:(unsigned)count;
-(id)SetContactType:(unsigned)type;
-(id)SetRemarkQuanPin:(id)pin;
-(id)SetRemarkPyinitial:(id)pyinitial;
-(id)SetRemark:(id)remark;
-(id)SetImgFlag:(unsigned)flag;
-(id)SetBitVal:(unsigned)val;
-(id)SetBitMask:(unsigned)mask;
-(id)SetImgBuf:(id)buf;
-(id)SetSex:(int)sex;
-(id)SetQuanPin:(id)pin;
-(id)SetPyinitial:(id)pyinitial;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)roomInfoListList;
-(id)init;
-(void)dealloc;
@end

@interface ModChatRoomMemberDisplayName : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasUserName : 1;
	unsigned hasDisplayName : 1;
	NSString* chatRoomName;
	NSString* userName;
	NSString* displayName;
}
@property(assign) BOOL hasDisplayName;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasChatRoomName;
@property(retain) NSString* displayName;
@property(retain) NSString* userName;
@property(retain) NSString* chatRoomName;
+(id)parseFromData:(id)data;
-(id)SetDisplayName:(id)name;
-(id)SetUserName:(id)name;
-(id)SetChatRoomName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModChatRoomMemberFlag : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasUserName : 1;
	unsigned hasFlagSwitch : 1;
	unsigned hasValue : 1;
	NSString* chatRoomName;
	NSString* userName;
	unsigned flagSwitch;
	unsigned value;
}
@property(assign) BOOL hasValue;
@property(assign) BOOL hasFlagSwitch;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasChatRoomName;
@property(assign) unsigned value;
@property(assign) unsigned flagSwitch;
@property(retain) NSString* userName;
@property(retain) NSString* chatRoomName;
+(id)parseFromData:(id)data;
-(id)SetValue:(unsigned)value;
-(id)SetFlagSwitch:(unsigned)aSwitch;
-(id)SetUserName:(id)name;
-(id)SetChatRoomName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AddMsg : PBGeneratedMessage {
	unsigned hasMsgId : 1;
	unsigned hasMsgType : 1;
	unsigned hasMsgSource : 1;
	unsigned hasPushContent : 1;
	unsigned hasFromUserName : 1;
	unsigned hasToUserName : 1;
	unsigned hasContent : 1;
	unsigned hasImgBuf : 1;
	unsigned hasStatus : 1;
	unsigned hasImgStatus : 1;
	unsigned hasCreateTime : 1;
	int msgId;
	int msgType;
	NSString* msgSource;
	NSString* pushContent;
	SKBuiltinString_t* fromUserName;
	SKBuiltinString_t* toUserName;
	SKBuiltinString_t* content;
	SKBuiltinBuffer_t* imgBuf;
	unsigned status;
	unsigned imgStatus;
	unsigned createTime;
}
@property(assign) BOOL hasPushContent;
@property(assign) BOOL hasMsgSource;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasImgStatus;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasMsgType;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasMsgId;
@property(retain) NSString* pushContent;
@property(retain) NSString* msgSource;
@property(assign) unsigned createTime;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(assign) unsigned imgStatus;
@property(assign) unsigned status;
@property(retain) SKBuiltinString_t* content;
@property(assign) int msgType;
@property(retain) SKBuiltinString_t* toUserName;
@property(retain) SKBuiltinString_t* fromUserName;
@property(assign) int msgId;
+(id)parseFromData:(id)data;
-(id)SetPushContent:(id)content;
-(id)SetMsgSource:(id)source;
-(id)SetCreateTime:(unsigned)time;
-(id)SetImgBuf:(id)buf;
-(id)SetImgStatus:(unsigned)status;
-(id)SetStatus:(unsigned)status;
-(id)SetContent:(id)content;
-(id)SetMsgType:(int)type;
-(id)SetToUserName:(id)userName;
-(id)SetFromUserName:(id)userName;
-(id)SetMsgId:(int)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface NewDelMsg : PBGeneratedMessage {
	unsigned hasMsgId : 1;
	unsigned hasFromUserName : 1;
	unsigned hasToUserName : 1;
	unsigned hasMsgType : 1;
	int msgId;
	NSString* fromUserName;
	NSString* toUserName;
	unsigned msgType;
}
@property(assign) BOOL hasMsgType;
@property(assign) BOOL hasMsgId;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasFromUserName;
@property(assign) unsigned msgType;
@property(assign) int msgId;
@property(retain) NSString* toUserName;
@property(retain) NSString* fromUserName;
+(id)parseFromData:(id)data;
-(id)SetMsgType:(unsigned)type;
-(id)SetMsgId:(int)anId;
-(id)SetToUserName:(id)userName;
-(id)SetFromUserName:(id)userName;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DisturbTimeSpan : PBGeneratedMessage {
	unsigned hasBeginTime : 1;
	unsigned hasEndTime : 1;
	unsigned beginTime;
	unsigned endTime;
}
@property(assign) BOOL hasEndTime;
@property(assign) BOOL hasBeginTime;
@property(assign) unsigned endTime;
@property(assign) unsigned beginTime;
+(id)parseFromData:(id)data;
-(id)SetEndTime:(unsigned)time;
-(id)SetBeginTime:(unsigned)time;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DisturbSetting : PBGeneratedMessage {
	unsigned hasNightTime : 1;
	unsigned hasAllDayTime : 1;
	unsigned hasNightSetting : 1;
	unsigned hasAllDaySetting : 1;
	DisturbTimeSpan* nightTime;
	DisturbTimeSpan* allDayTime;
	unsigned nightSetting;
	unsigned allDaySetting;
}
@property(assign) BOOL hasAllDayTime;
@property(assign) BOOL hasAllDaySetting;
@property(assign) BOOL hasNightTime;
@property(assign) BOOL hasNightSetting;
@property(retain) DisturbTimeSpan* allDayTime;
@property(assign) unsigned allDaySetting;
@property(retain) DisturbTimeSpan* nightTime;
@property(assign) unsigned nightSetting;
+(id)parseFromData:(id)data;
-(id)SetAllDayTime:(id)time;
-(id)SetAllDaySetting:(unsigned)setting;
-(id)SetNightTime:(id)time;
-(id)SetNightSetting:(unsigned)setting;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GmailInfo : PBGeneratedMessage {
	unsigned hasGmailAcct : 1;
	unsigned hasGmailSwitch : 1;
	unsigned hasGmailErrCode : 1;
	NSString* gmailAcct;
	unsigned gmailSwitch;
	unsigned gmailErrCode;
}
@property(assign) BOOL hasGmailErrCode;
@property(assign) BOOL hasGmailSwitch;
@property(assign) BOOL hasGmailAcct;
@property(assign) unsigned gmailErrCode;
@property(assign) unsigned gmailSwitch;
@property(retain) NSString* gmailAcct;
+(id)parseFromData:(id)data;
-(id)SetGmailErrCode:(unsigned)code;
-(id)SetGmailSwitch:(unsigned)aSwitch;
-(id)SetGmailAcct:(id)acct;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GmailList : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface FacebookInfo : PBGeneratedMessage {
	unsigned hasUid : 1;
	unsigned hasName : 1;
	unsigned hasToken : 1;
	unsigned long long uid;
	NSString* name;
	NSString* token;
}
@property(assign) BOOL hasToken;
@property(assign) BOOL hasName;
@property(assign) BOOL hasUid;
@property(retain) NSString* token;
@property(retain) NSString* name;
@property(assign) unsigned long long uid;
+(id)parseFromData:(id)data;
-(id)SetToken:(id)token;
-(id)SetName:(id)name;
-(id)SetUid:(unsigned long long)uid;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SafeDevice : PBGeneratedMessage {
	unsigned hasName : 1;
	unsigned hasUuid : 1;
	unsigned hasDeviceType : 1;
	unsigned hasCreateTime : 1;
	NSString* name;
	NSString* uuid;
	NSString* deviceType;
	unsigned createTime;
}
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasDeviceType;
@property(assign) BOOL hasUuid;
@property(assign) BOOL hasName;
@property(assign) unsigned createTime;
@property(retain) NSString* deviceType;
@property(retain) NSString* uuid;
@property(retain) NSString* name;
+(id)parseFromData:(id)data;
-(id)SetCreateTime:(unsigned)time;
-(id)SetDeviceType:(id)type;
-(id)SetUuid:(id)uuid;
-(id)SetName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SafeDeviceList : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface UserInfoExt : PBGeneratedMessage {
	unsigned hasBbmnickName : 1;
	unsigned hasMyBrandList : 1;
	unsigned hasMsgPushSound : 1;
	unsigned hasVoipPushSound : 1;
	unsigned hasBbpin : 1;
	unsigned hasBbppid : 1;
	unsigned hasRegCountry : 1;
	unsigned hasSafeMobile : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasRealName : 1;
	unsigned hasIdcardNum : 1;
	unsigned hasGoogleContactName : 1;
	unsigned hasSafeDeviceList : 1;
	unsigned hasExtXml : 1;
	unsigned hasSnsUserInfo : 1;
	unsigned hasSafeDevice : 1;
	unsigned hasGrayscaleFlag : 1;
	unsigned hasMainAcctType : 1;
	unsigned hasBigChatRoomInvite : 1;
	unsigned hasBigChatRoomQuota : 1;
	unsigned hasBigChatRoomSize : 1;
	NSString* bbmnickName;
	NSString* myBrandList;
	NSString* msgPushSound;
	NSString* voipPushSound;
	NSString* bbpin;
	NSString* bbppid;
	NSString* regCountry;
	NSString* safeMobile;
	NSString* bigHeadImgUrl;
	NSString* smallHeadImgUrl;
	NSString* realName;
	NSString* idcardNum;
	NSString* googleContactName;
	SafeDeviceList* safeDeviceList;
	SKBuiltinString_t* extXml;
	SnsUserInfo* snsUserInfo;
	unsigned safeDevice;
	unsigned grayscaleFlag;
	unsigned mainAcctType;
	unsigned bigChatRoomInvite;
	unsigned bigChatRoomQuota;
	unsigned bigChatRoomSize;
}
@property(assign) BOOL hasBbmnickName;
@property(assign) BOOL hasBbpin;
@property(assign) BOOL hasBbppid;
@property(assign) BOOL hasRegCountry;
@property(assign) BOOL hasRealName;
@property(assign) BOOL hasIdcardNum;
@property(assign) BOOL hasGoogleContactName;
@property(assign) BOOL hasGrayscaleFlag;
@property(assign) BOOL hasSafeDevice;
@property(assign) BOOL hasSafeDeviceList;
@property(assign) BOOL hasExtXml;
@property(assign) BOOL hasMainAcctType;
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasSafeMobile;
@property(assign) BOOL hasBigChatRoomInvite;
@property(assign) BOOL hasBigChatRoomQuota;
@property(assign) BOOL hasBigChatRoomSize;
@property(assign) BOOL hasVoipPushSound;
@property(assign) BOOL hasMsgPushSound;
@property(assign) BOOL hasMyBrandList;
@property(assign) BOOL hasSnsUserInfo;
@property(retain) NSString* bbmnickName;
@property(retain) NSString* bbpin;
@property(retain) NSString* bbppid;
@property(retain) NSString* regCountry;
@property(retain) NSString* realName;
@property(retain) NSString* idcardNum;
@property(retain) NSString* googleContactName;
@property(assign) unsigned grayscaleFlag;
@property(assign) unsigned safeDevice;
@property(retain) SafeDeviceList* safeDeviceList;
@property(retain) SKBuiltinString_t* extXml;
@property(assign) unsigned mainAcctType;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) NSString* safeMobile;
@property(assign) unsigned bigChatRoomInvite;
@property(assign) unsigned bigChatRoomQuota;
@property(assign) unsigned bigChatRoomSize;
@property(retain) NSString* voipPushSound;
@property(retain) NSString* msgPushSound;
@property(retain) NSString* myBrandList;
@property(retain) SnsUserInfo* snsUserInfo;
+(id)parseFromData:(id)data;
-(id)SetBbmnickName:(id)name;
-(id)SetBbpin:(id)bbpin;
-(id)SetBbppid:(id)bbppid;
-(id)SetRegCountry:(id)country;
-(id)SetRealName:(id)name;
-(id)SetIdcardNum:(id)num;
-(id)SetGoogleContactName:(id)name;
-(id)SetGrayscaleFlag:(unsigned)flag;
-(id)SetSafeDevice:(unsigned)device;
-(id)SetSafeDeviceList:(id)list;
-(id)SetExtXml:(id)xml;
-(id)SetMainAcctType:(unsigned)type;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetSafeMobile:(id)mobile;
-(id)SetBigChatRoomInvite:(unsigned)invite;
-(id)SetBigChatRoomQuota:(unsigned)quota;
-(id)SetBigChatRoomSize:(unsigned)size;
-(id)SetVoipPushSound:(id)sound;
-(id)SetMsgPushSound:(id)sound;
-(id)SetMyBrandList:(id)list;
-(id)SetSnsUserInfo:(id)info;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModUserInfo : PBGeneratedMessage {
	unsigned hasFbuserId : 1;
	unsigned hasPoint : 1;
	unsigned hasExperience : 1;
	unsigned hasAlbumFlag : 1;
	unsigned hasAlbumStyle : 1;
	unsigned hasLevel : 1;
	unsigned hasLevelLowExp : 1;
	unsigned hasLevelHighExp : 1;
	unsigned hasSex : 1;
	unsigned hasVerifyInfo : 1;
	unsigned hasWeibo : 1;
	unsigned hasAlias : 1;
	unsigned hasWeiboNickname : 1;
	unsigned hasFbuserName : 1;
	unsigned hasAlbumBgimgId : 1;
	unsigned hasFbtoken : 1;
	unsigned hasCountry : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasUserName : 1;
	unsigned hasDisturbSetting : 1;
	unsigned hasNickName : 1;
	unsigned hasGmailList : 1;
	unsigned hasBindEmail : 1;
	unsigned hasBindMobile : 1;
	unsigned hasImgBuf : 1;
	unsigned hasBitFlag : 1;
	unsigned hasTxnewsCategory : 1;
	unsigned hasBindUin : 1;
	unsigned hasStatus : 1;
	unsigned hasFaceBookFlag : 1;
	unsigned hasWeiboFlag : 1;
	unsigned hasImgLen : 1;
	unsigned hasPluginSwitch : 1;
	unsigned hasPersonalCard : 1;
	unsigned hasPluginFlag : 1;
	unsigned hasVerifyFlag : 1;
	unsigned long long fbuserId;
	int point;
	int experience;
	int albumFlag;
	int albumStyle;
	int level;
	int levelLowExp;
	int levelHighExp;
	int sex;
	NSString* verifyInfo;
	NSString* weibo;
	NSString* alias;
	NSString* weiboNickname;
	NSString* fbuserName;
	NSString* albumBgimgId;
	NSString* fbtoken;
	NSString* country;
	NSString* signature;
	NSString* city;
	NSString* province;
	SKBuiltinString_t* userName;
	DisturbSetting* disturbSetting;
	SKBuiltinString_t* nickName;
	GmailList* gmailList;
	SKBuiltinString_t* bindEmail;
	SKBuiltinString_t* bindMobile;
	NSData* imgBuf;
	unsigned bitFlag;
	unsigned txnewsCategory;
	unsigned bindUin;
	unsigned status;
	unsigned faceBookFlag;
	unsigned weiboFlag;
	unsigned imgLen;
	unsigned pluginSwitch;
	unsigned personalCard;
	unsigned pluginFlag;
	unsigned verifyFlag;
}
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasFbtoken;
@property(assign) BOOL hasTxnewsCategory;
@property(assign) BOOL hasAlbumBgimgId;
@property(assign) BOOL hasAlbumFlag;
@property(assign) BOOL hasAlbumStyle;
@property(assign) BOOL hasFbuserName;
@property(assign) BOOL hasFbuserId;
@property(assign) BOOL hasFaceBookFlag;
@property(assign) BOOL hasWeiboFlag;
@property(assign) BOOL hasWeiboNickname;
@property(assign) BOOL hasAlias;
@property(assign) BOOL hasGmailList;
@property(assign) BOOL hasPluginSwitch;
@property(assign) BOOL hasWeibo;
@property(assign) BOOL hasLevelHighExp;
@property(assign) BOOL hasLevelLowExp;
@property(assign) BOOL hasLevel;
@property(assign) BOOL hasExperience;
@property(assign) BOOL hasPoint;
@property(assign) BOOL hasVerifyInfo;
@property(assign) BOOL hasVerifyFlag;
@property(assign) BOOL hasPluginFlag;
@property(assign) BOOL hasDisturbSetting;
@property(assign) BOOL hasPersonalCard;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasImgLen;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasBindMobile;
@property(assign) BOOL hasBindEmail;
@property(assign) BOOL hasBindUin;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBitFlag;
@property(retain) NSString* country;
@property(retain) NSString* fbtoken;
@property(assign) unsigned txnewsCategory;
@property(retain) NSString* albumBgimgId;
@property(assign) int albumFlag;
@property(assign) int albumStyle;
@property(retain) NSString* fbuserName;
@property(assign) unsigned long long fbuserId;
@property(assign) unsigned faceBookFlag;
@property(assign) unsigned weiboFlag;
@property(retain) NSString* weiboNickname;
@property(retain) NSString* alias;
@property(retain) GmailList* gmailList;
@property(assign) unsigned pluginSwitch;
@property(retain) NSString* weibo;
@property(assign) int levelHighExp;
@property(assign) int levelLowExp;
@property(assign) int level;
@property(assign) int experience;
@property(assign) int point;
@property(retain) NSString* verifyInfo;
@property(assign) unsigned verifyFlag;
@property(assign) unsigned pluginFlag;
@property(retain) DisturbSetting* disturbSetting;
@property(assign) unsigned personalCard;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(assign) int sex;
@property(retain) NSData* imgBuf;
@property(assign) unsigned imgLen;
@property(assign) unsigned status;
@property(retain) SKBuiltinString_t* bindMobile;
@property(retain) SKBuiltinString_t* bindEmail;
@property(assign) unsigned bindUin;
@property(retain) SKBuiltinString_t* nickName;
@property(retain) SKBuiltinString_t* userName;
@property(assign) unsigned bitFlag;
+(id)parseFromData:(id)data;
-(id)SetCountry:(id)country;
-(id)SetFbtoken:(id)fbtoken;
-(id)SetTxnewsCategory:(unsigned)category;
-(id)SetAlbumBgimgId:(id)anId;
-(id)SetAlbumFlag:(int)flag;
-(id)SetAlbumStyle:(int)style;
-(id)SetFbuserName:(id)name;
-(id)SetFbuserId:(unsigned long long)anId;
-(id)SetFaceBookFlag:(unsigned)flag;
-(id)SetWeiboFlag:(unsigned)flag;
-(id)SetWeiboNickname:(id)nickname;
-(id)SetAlias:(id)alias;
-(id)SetGmailList:(id)list;
-(id)SetPluginSwitch:(unsigned)aSwitch;
-(id)SetWeibo:(id)weibo;
-(id)SetLevelHighExp:(int)exp;
-(id)SetLevelLowExp:(int)exp;
-(id)SetLevel:(int)level;
-(id)SetExperience:(int)experience;
-(id)SetPoint:(int)point;
-(id)SetVerifyInfo:(id)info;
-(id)SetVerifyFlag:(unsigned)flag;
-(id)SetPluginFlag:(unsigned)flag;
-(id)SetDisturbSetting:(id)setting;
-(id)SetPersonalCard:(unsigned)card;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetSex:(int)sex;
-(id)SetImgBuf:(id)buf;
-(id)SetImgLen:(unsigned)len;
-(id)SetStatus:(unsigned)status;
-(id)SetBindMobile:(id)mobile;
-(id)SetBindEmail:(id)email;
-(id)SetBindUin:(unsigned)uin;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)SetBitFlag:(unsigned)flag;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModDisturbSetting : PBGeneratedMessage {
	unsigned hasDisturbSetting : 1;
	DisturbSetting* disturbSetting;
}
@property(assign) BOOL hasDisturbSetting;
@property(retain) DisturbSetting* disturbSetting;
+(id)parseFromData:(id)data;
-(id)SetDisturbSetting:(id)setting;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface WebWxFunctionSwitch : PBGeneratedMessage {
	unsigned hasFunctionId : 1;
	unsigned hasSwitchValue : 1;
	unsigned functionId;
	unsigned switchValue;
}
@property(assign) BOOL hasSwitchValue;
@property(assign) BOOL hasFunctionId;
@property(assign) unsigned switchValue;
@property(assign) unsigned functionId;
+(id)parseFromData:(id)data;
-(id)SetSwitchValue:(unsigned)value;
-(id)SetFunctionId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PluginInstall : PBGeneratedMessage {
	unsigned hasPluginFlag : 1;
	unsigned hasIsUnInstall : 1;
	unsigned pluginFlag;
	unsigned isUnInstall;
}
@property(assign) BOOL hasIsUnInstall;
@property(assign) BOOL hasPluginFlag;
@property(assign) unsigned isUnInstall;
@property(assign) unsigned pluginFlag;
+(id)parseFromData:(id)data;
-(id)SetIsUnInstall:(unsigned)install;
-(id)SetPluginFlag:(unsigned)flag;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModTXNewsCategory : PBGeneratedMessage {
	unsigned hasTxnewsCategory : 1;
	unsigned txnewsCategory;
}
@property(assign) BOOL hasTxnewsCategory;
@property(assign) unsigned txnewsCategory;
+(id)parseFromData:(id)data;
-(id)SetTxnewsCategory:(unsigned)category;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GmailSwitchOplog : PBGeneratedMessage {
	unsigned hasGmailAcct : 1;
	unsigned hasGmailSwitch : 1;
	NSString* gmailAcct;
	unsigned gmailSwitch;
}
@property(assign) BOOL hasGmailSwitch;
@property(assign) BOOL hasGmailAcct;
@property(assign) unsigned gmailSwitch;
@property(retain) NSString* gmailAcct;
+(id)parseFromData:(id)data;
-(id)SetGmailSwitch:(unsigned)aSwitch;
-(id)SetGmailAcct:(id)acct;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface KVStatItem : PBGeneratedMessage {
	unsigned hasValue : 1;
	unsigned hasKey : 1;
	NSString* value;
	unsigned key;
}
@property(assign) BOOL hasValue;
@property(assign) BOOL hasKey;
@property(retain) NSString* value;
@property(assign) unsigned key;
+(id)parseFromData:(id)data;
-(id)SetValue:(id)value;
-(id)SetKey:(unsigned)key;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface KVStatOpLog : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface ThemeOpLog : PBGeneratedMessage {
	unsigned hasValue : 1;
	unsigned hasKey : 1;
	NSString* value;
	unsigned key;
}
@property(assign) BOOL hasValue;
@property(assign) BOOL hasKey;
@property(retain) NSString* value;
@property(assign) unsigned key;
+(id)parseFromData:(id)data;
-(id)SetValue:(id)value;
-(id)SetKey:(unsigned)key;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetBrandListRequestBuffer : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasHiddenCount : 1;
	unsigned count;
	unsigned hiddenCount;
}
@property(assign) BOOL hasHiddenCount;
@property(assign) BOOL hasCount;
@property(assign) unsigned hiddenCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)SetHiddenCount:(unsigned)count;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetBrandListRequest : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasRequestBuffer : 1;
	NSString* userName;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* requestBuffer;
}
@property(assign) BOOL hasRequestBuffer;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* requestBuffer;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRequestBuffer:(id)buffer;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetBrandListResponse : PBGeneratedMessage {
	unsigned hasBrandList : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasRequestBuffer : 1;
	NSString* brandList;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* requestBuffer;
}
@property(assign) BOOL hasRequestBuffer;
@property(assign) BOOL hasBrandList;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* requestBuffer;
@property(retain) NSString* brandList;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRequestBuffer:(id)buffer;
-(id)SetBrandList:(id)list;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface APPItem : PBGeneratedMessage {
	unsigned hasUserName : 1;
	NSString* userName;
}
@property(assign) BOOL hasUserName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SetAPPListRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface SetAPPListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasHash : 1;
	BaseResponse* baseResponse;
	unsigned hash;
}
@property(assign) BOOL hasHash;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned hash;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetHash:(unsigned)hash;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAPPListRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasHash : 1;
	BaseRequest* baseRequest;
	unsigned hash;
}
@property(assign) BOOL hasHash;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned hash;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetHash:(unsigned)hash;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAPPListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	unsigned hasHash : 1;
	BaseResponse* baseResponse;
	unsigned count;
	unsigned hash;
	NSMutableArray* mutableListList;
}
@property(assign) BOOL hasHash;
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned hash;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetHash:(unsigned)hash;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface SearchQRCodeReq : PBGeneratedMessage {
	unsigned hasQrcode : 1;
	unsigned hasBaseRequest : 1;
	NSString* qrcode;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasQrcode;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* qrcode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetQrcode:(id)qrcode;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SearchQRCodeResp : PBGeneratedMessage {
	unsigned hasUrl : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasType : 1;
	NSString* url;
	BaseResponse* baseResponse;
	unsigned type;
}
@property(assign) BOOL hasUrl;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* url;
@property(assign) unsigned type;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetUrl:(id)url;
-(id)SetType:(unsigned)type;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SearchContactRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasUserName : 1;
	unsigned hasReqBuf : 1;
	unsigned hasOpCode : 1;
	BaseRequest* baseRequest;
	SKBuiltinString_t* userName;
	SKBuiltinBuffer_t* reqBuf;
	unsigned opCode;
}
@property(assign) BOOL hasReqBuf;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* reqBuf;
@property(assign) unsigned opCode;
@property(retain) SKBuiltinString_t* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReqBuf:(id)buf;
-(id)SetOpCode:(unsigned)code;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SearchContactItem : PBGeneratedMessage {
	unsigned hasSex : 1;
	unsigned hasAlbumFlag : 1;
	unsigned hasAlbumStyle : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasMyBrandList : 1;
	unsigned hasCountry : 1;
	unsigned hasAlbumBgimgId : 1;
	unsigned hasWeiboNickname : 1;
	unsigned hasAlias : 1;
	unsigned hasWeibo : 1;
	unsigned hasVerifyInfo : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasImgBuf : 1;
	unsigned hasSnsUserInfo : 1;
	unsigned hasQuanPin : 1;
	unsigned hasPyinitial : 1;
	unsigned hasCustomizedInfo : 1;
	unsigned hasNickName : 1;
	unsigned hasUserName : 1;
	unsigned hasVerifyFlag : 1;
	unsigned hasPersonalCard : 1;
	unsigned hasWeiboFlag : 1;
	int sex;
	int albumFlag;
	int albumStyle;
	NSString* smallHeadImgUrl;
	NSString* bigHeadImgUrl;
	NSString* myBrandList;
	NSString* country;
	NSString* albumBgimgId;
	NSString* weiboNickname;
	NSString* alias;
	NSString* weibo;
	NSString* verifyInfo;
	NSString* signature;
	NSString* city;
	NSString* province;
	SKBuiltinBuffer_t* imgBuf;
	SnsUserInfo* snsUserInfo;
	SKBuiltinString_t* quanPin;
	SKBuiltinString_t* pyinitial;
	CustomizedInfo* customizedInfo;
	SKBuiltinString_t* nickName;
	SKBuiltinString_t* userName;
	unsigned verifyFlag;
	unsigned personalCard;
	unsigned weiboFlag;
}
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasCustomizedInfo;
@property(assign) BOOL hasMyBrandList;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasSnsUserInfo;
@property(assign) BOOL hasAlbumBgimgId;
@property(assign) BOOL hasAlbumFlag;
@property(assign) BOOL hasAlbumStyle;
@property(assign) BOOL hasWeiboFlag;
@property(assign) BOOL hasWeiboNickname;
@property(assign) BOOL hasAlias;
@property(assign) BOOL hasWeibo;
@property(assign) BOOL hasVerifyInfo;
@property(assign) BOOL hasVerifyFlag;
@property(assign) BOOL hasPersonalCard;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasQuanPin;
@property(assign) BOOL hasPyinitial;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) CustomizedInfo* customizedInfo;
@property(retain) NSString* myBrandList;
@property(retain) NSString* country;
@property(retain) SnsUserInfo* snsUserInfo;
@property(retain) NSString* albumBgimgId;
@property(assign) int albumFlag;
@property(assign) int albumStyle;
@property(assign) unsigned weiboFlag;
@property(retain) NSString* weiboNickname;
@property(retain) NSString* alias;
@property(retain) NSString* weibo;
@property(retain) NSString* verifyInfo;
@property(assign) unsigned verifyFlag;
@property(assign) unsigned personalCard;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(assign) int sex;
@property(retain) SKBuiltinString_t* quanPin;
@property(retain) SKBuiltinString_t* pyinitial;
@property(retain) SKBuiltinString_t* nickName;
@property(retain) SKBuiltinString_t* userName;
+(id)parseFromData:(id)data;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetCustomizedInfo:(id)info;
-(id)SetMyBrandList:(id)list;
-(id)SetCountry:(id)country;
-(id)SetSnsUserInfo:(id)info;
-(id)SetAlbumBgimgId:(id)anId;
-(id)SetAlbumFlag:(int)flag;
-(id)SetAlbumStyle:(int)style;
-(id)SetWeiboFlag:(unsigned)flag;
-(id)SetWeiboNickname:(id)nickname;
-(id)SetAlias:(id)alias;
-(id)SetWeibo:(id)weibo;
-(id)SetVerifyInfo:(id)info;
-(id)SetVerifyFlag:(unsigned)flag;
-(id)SetPersonalCard:(unsigned)card;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetImgBuf:(id)buf;
-(id)SetSex:(int)sex;
-(id)SetQuanPin:(id)pin;
-(id)SetPyinitial:(id)pyinitial;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SearchContactResponse : PBGeneratedMessage {
	unsigned hasAlbumStyle : 1;
	unsigned hasAlbumFlag : 1;
	unsigned hasSex : 1;
	unsigned hasWeiboNickname : 1;
	unsigned hasAlias : 1;
	unsigned hasWeibo : 1;
	unsigned hasVerifyInfo : 1;
	unsigned hasAlbumBgimgId : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasCountry : 1;
	unsigned hasMyBrandList : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasSnsUserInfo : 1;
	unsigned hasCustomizedInfo : 1;
	unsigned hasResBuf : 1;
	unsigned hasImgBuf : 1;
	unsigned hasQuanPin : 1;
	unsigned hasPyinitial : 1;
	unsigned hasNickName : 1;
	unsigned hasUserName : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasWeiboFlag : 1;
	unsigned hasVerifyFlag : 1;
	unsigned hasPersonalCard : 1;
	unsigned hasContactCount : 1;
	int albumStyle;
	int albumFlag;
	int sex;
	NSString* weiboNickname;
	NSString* alias;
	NSString* weibo;
	NSString* verifyInfo;
	NSString* albumBgimgId;
	NSString* signature;
	NSString* city;
	NSString* province;
	NSString* country;
	NSString* myBrandList;
	NSString* bigHeadImgUrl;
	NSString* smallHeadImgUrl;
	SnsUserInfo* snsUserInfo;
	CustomizedInfo* customizedInfo;
	SKBuiltinBuffer_t* resBuf;
	SKBuiltinBuffer_t* imgBuf;
	SKBuiltinString_t* quanPin;
	SKBuiltinString_t* pyinitial;
	SKBuiltinString_t* nickName;
	SKBuiltinString_t* userName;
	BaseResponse* baseResponse;
	unsigned weiboFlag;
	unsigned verifyFlag;
	unsigned personalCard;
	unsigned contactCount;
	NSMutableArray* mutableContactListList;
}
@property(assign) BOOL hasResBuf;
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(retain) NSMutableArray* mutableContactListList;
@property(assign) BOOL hasContactCount;
@property(assign) BOOL hasCustomizedInfo;
@property(assign) BOOL hasMyBrandList;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasSnsUserInfo;
@property(assign) BOOL hasAlbumBgimgId;
@property(assign) BOOL hasAlbumFlag;
@property(assign) BOOL hasAlbumStyle;
@property(assign) BOOL hasWeiboFlag;
@property(assign) BOOL hasWeiboNickname;
@property(assign) BOOL hasAlias;
@property(assign) BOOL hasWeibo;
@property(assign) BOOL hasVerifyInfo;
@property(assign) BOOL hasVerifyFlag;
@property(assign) BOOL hasPersonalCard;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasQuanPin;
@property(assign) BOOL hasPyinitial;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* resBuf;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(assign) unsigned contactCount;
@property(retain) CustomizedInfo* customizedInfo;
@property(retain) NSString* myBrandList;
@property(retain) NSString* country;
@property(retain) SnsUserInfo* snsUserInfo;
@property(retain) NSString* albumBgimgId;
@property(assign) int albumFlag;
@property(assign) int albumStyle;
@property(assign) unsigned weiboFlag;
@property(retain) NSString* weiboNickname;
@property(retain) NSString* alias;
@property(retain) NSString* weibo;
@property(retain) NSString* verifyInfo;
@property(assign) unsigned verifyFlag;
@property(assign) unsigned personalCard;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(assign) int sex;
@property(retain) SKBuiltinString_t* quanPin;
@property(retain) SKBuiltinString_t* pyinitial;
@property(retain) SKBuiltinString_t* nickName;
@property(retain) SKBuiltinString_t* userName;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetResBuf:(id)buf;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)addContactList:(id)list;
-(id)addContactListFromArray:(id)array;
-(id)SetContactCount:(unsigned)count;
-(id)SetCustomizedInfo:(id)info;
-(id)SetMyBrandList:(id)list;
-(id)SetCountry:(id)country;
-(id)SetSnsUserInfo:(id)info;
-(id)SetAlbumBgimgId:(id)anId;
-(id)SetAlbumFlag:(int)flag;
-(id)SetAlbumStyle:(int)style;
-(id)SetWeiboFlag:(unsigned)flag;
-(id)SetWeiboNickname:(id)nickname;
-(id)SetAlias:(id)alias;
-(id)SetWeibo:(id)weibo;
-(id)SetVerifyInfo:(id)info;
-(id)SetVerifyFlag:(unsigned)flag;
-(id)SetPersonalCard:(unsigned)card;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetImgBuf:(id)buf;
-(id)SetSex:(int)sex;
-(id)SetQuanPin:(id)pin;
-(id)SetPyinitial:(id)pyinitial;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)contactListList;
-(id)init;
-(void)dealloc;
@end

@interface MemberReq : PBGeneratedMessage {
	unsigned hasMemberName : 1;
	SKBuiltinString_t* memberName;
}
@property(assign) BOOL hasMemberName;
@property(retain) SKBuiltinString_t* memberName;
+(id)parseFromData:(id)data;
-(id)SetMemberName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface MemberResp : PBGeneratedMessage {
	unsigned hasSex : 1;
	unsigned hasCountry : 1;
	unsigned hasVerifyInfo : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasRemarkQuanPin : 1;
	unsigned hasRemarkPyinitial : 1;
	unsigned hasRemark : 1;
	unsigned hasQuanPin : 1;
	unsigned hasPyinitial : 1;
	unsigned hasNickName : 1;
	unsigned hasMemberName : 1;
	unsigned hasContactType : 1;
	unsigned hasPersonalCard : 1;
	unsigned hasVerifyFlag : 1;
	unsigned hasMemberStatus : 1;
	int sex;
	NSString* country;
	NSString* verifyInfo;
	NSString* signature;
	NSString* city;
	NSString* province;
	SKBuiltinString_t* remarkQuanPin;
	SKBuiltinString_t* remarkPyinitial;
	SKBuiltinString_t* remark;
	SKBuiltinString_t* quanPin;
	SKBuiltinString_t* pyinitial;
	SKBuiltinString_t* nickName;
	SKBuiltinString_t* memberName;
	unsigned contactType;
	unsigned personalCard;
	unsigned verifyFlag;
	unsigned memberStatus;
}
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasVerifyInfo;
@property(assign) BOOL hasVerifyFlag;
@property(assign) BOOL hasPersonalCard;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasContactType;
@property(assign) BOOL hasRemarkQuanPin;
@property(assign) BOOL hasRemarkPyinitial;
@property(assign) BOOL hasRemark;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasQuanPin;
@property(assign) BOOL hasPyinitial;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasMemberStatus;
@property(assign) BOOL hasMemberName;
@property(retain) NSString* country;
@property(retain) NSString* verifyInfo;
@property(assign) unsigned verifyFlag;
@property(assign) unsigned personalCard;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(assign) unsigned contactType;
@property(retain) SKBuiltinString_t* remarkQuanPin;
@property(retain) SKBuiltinString_t* remarkPyinitial;
@property(retain) SKBuiltinString_t* remark;
@property(assign) int sex;
@property(retain) SKBuiltinString_t* quanPin;
@property(retain) SKBuiltinString_t* pyinitial;
@property(retain) SKBuiltinString_t* nickName;
@property(assign) unsigned memberStatus;
@property(retain) SKBuiltinString_t* memberName;
+(id)parseFromData:(id)data;
-(id)SetCountry:(id)country;
-(id)SetVerifyInfo:(id)info;
-(id)SetVerifyFlag:(unsigned)flag;
-(id)SetPersonalCard:(unsigned)card;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetContactType:(unsigned)type;
-(id)SetRemarkQuanPin:(id)pin;
-(id)SetRemarkPyinitial:(id)pyinitial;
-(id)SetRemark:(id)remark;
-(id)SetSex:(int)sex;
-(id)SetQuanPin:(id)pin;
-(id)SetPyinitial:(id)pyinitial;
-(id)SetNickName:(id)name;
-(id)SetMemberStatus:(unsigned)status;
-(id)SetMemberName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DelMemberReq : PBGeneratedMessage {
	unsigned hasMemberName : 1;
	SKBuiltinString_t* memberName;
}
@property(assign) BOOL hasMemberName;
@property(retain) SKBuiltinString_t* memberName;
+(id)parseFromData:(id)data;
-(id)SetMemberName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DelMemberResp : PBGeneratedMessage {
	unsigned hasMemberName : 1;
	SKBuiltinString_t* memberName;
}
@property(assign) BOOL hasMemberName;
@property(retain) SKBuiltinString_t* memberName;
+(id)parseFromData:(id)data;
-(id)SetMemberName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GroupCardReq : PBGeneratedMessage {
	unsigned hasGroupCardName : 1;
	NSString* groupCardName;
}
@property(assign) BOOL hasGroupCardName;
@property(retain) NSString* groupCardName;
+(id)parseFromData:(id)data;
-(id)SetGroupCardName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CreateChatRoomRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasTopic : 1;
	unsigned hasMemberCount : 1;
	BaseRequest* baseRequest;
	SKBuiltinString_t* topic;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasTopic;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned memberCount;
@property(retain) SKBuiltinString_t* topic;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetTopic:(id)topic;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface CreateChatRoomResponse : PBGeneratedMessage {
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasTopic : 1;
	unsigned hasPyinitial : 1;
	unsigned hasQuanPin : 1;
	unsigned hasChatRoomName : 1;
	unsigned hasImgBuf : 1;
	unsigned hasMemberCount : 1;
	NSString* bigHeadImgUrl;
	NSString* smallHeadImgUrl;
	BaseResponse* baseResponse;
	SKBuiltinString_t* topic;
	SKBuiltinString_t* pyinitial;
	SKBuiltinString_t* quanPin;
	SKBuiltinString_t* chatRoomName;
	SKBuiltinBuffer_t* imgBuf;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasChatRoomName;
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasQuanPin;
@property(assign) BOOL hasPyinitial;
@property(assign) BOOL hasTopic;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(retain) SKBuiltinString_t* chatRoomName;
@property(assign) unsigned memberCount;
@property(retain) SKBuiltinString_t* quanPin;
@property(retain) SKBuiltinString_t* pyinitial;
@property(retain) SKBuiltinString_t* topic;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetImgBuf:(id)buf;
-(id)SetChatRoomName:(id)name;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetQuanPin:(id)pin;
-(id)SetPyinitial:(id)pyinitial;
-(id)SetTopic:(id)topic;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface AddChatRoomMemberRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasChatRoomName : 1;
	unsigned hasMemberCount : 1;
	BaseRequest* baseRequest;
	SKBuiltinString_t* chatRoomName;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(assign) BOOL hasChatRoomName;
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinString_t* chatRoomName;
@property(assign) unsigned memberCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetChatRoomName:(id)name;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface AddChatRoomMemberResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasMemberCount : 1;
	BaseResponse* baseResponse;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned memberCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface DelChatRoomMemberRequest : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasMemberCount : 1;
	NSString* chatRoomName;
	BaseRequest* baseRequest;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(assign) BOOL hasChatRoomName;
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* chatRoomName;
@property(assign) unsigned memberCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetChatRoomName:(id)name;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface DelChatRoomMemberResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasMemberCount : 1;
	BaseResponse* baseResponse;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned memberCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface BatchGetHeadImgRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableUserNameListList;
}
@property(retain) NSMutableArray* mutableUserNameListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addUserNameList:(id)list;
-(id)addUserNameListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)userNameListList;
-(id)init;
-(void)dealloc;
@end

@interface ImgPair : PBGeneratedMessage {
	unsigned hasImgBuf : 1;
	unsigned hasUsername : 1;
	SKBuiltinBuffer_t* imgBuf;
	SKBuiltinString_t* username;
}
@property(assign) BOOL hasUsername;
@property(assign) BOOL hasImgBuf;
@property(retain) SKBuiltinString_t* username;
@property(retain) SKBuiltinBuffer_t* imgBuf;
+(id)parseFromData:(id)data;
-(id)SetUsername:(id)username;
-(id)SetImgBuf:(id)buf;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BatchGetHeadImgResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableImgPairListList;
}
@property(retain) NSMutableArray* mutableImgPairListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addImgPairList:(id)list;
-(id)addImgPairListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)imgPairListList;
-(id)init;
-(void)dealloc;
@end

@interface GetChatRoomUpgradeInfoReq : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasScene : 1;
	NSString* chatRoomName;
	BaseRequest* baseRequest;
	unsigned scene;
}
@property(assign) BOOL hasScene;
@property(assign) BOOL hasChatRoomName;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned scene;
@property(retain) NSString* chatRoomName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetScene:(unsigned)scene;
-(id)SetChatRoomName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetChatRoomUpgradeInfoResp : PBGeneratedMessage {
	unsigned hasChatRoomUpgradeInfo : 1;
	unsigned hasBaseResponse : 1;
	NSString* chatRoomUpgradeInfo;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasChatRoomUpgradeInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* chatRoomUpgradeInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetChatRoomUpgradeInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface KeyValStr : PBGeneratedMessage {
	unsigned hasVal : 1;
	unsigned hasKey : 1;
	NSString* val;
	unsigned key;
}
@property(assign) BOOL hasVal;
@property(assign) BOOL hasKey;
@property(retain) NSString* val;
@property(assign) unsigned key;
+(id)parseFromData:(id)data;
-(id)SetVal:(id)val;
-(id)SetKey:(unsigned)key;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetDonateInfoReq : PBGeneratedMessage {
	unsigned hasExtInfo : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	unsigned hasScene : 1;
	NSString* extInfo;
	BaseRequest* baseRequest;
	unsigned type;
	unsigned scene;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* extInfo;
@property(assign) unsigned scene;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetScene:(unsigned)scene;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetDonateInfoResp : PBGeneratedMessage {
	unsigned hasDonateInfo : 1;
	unsigned hasBaseResponse : 1;
	NSString* donateInfo;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasDonateInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* donateInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDonateInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetPayPurchasePackageReq : PBGeneratedMessage {
	unsigned hasPriceType : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	unsigned hasPrice : 1;
	NSString* priceType;
	NSString* extInfo;
	BaseRequest* baseRequest;
	unsigned type;
	unsigned price;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasPriceType;
@property(assign) BOOL hasPrice;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* extInfo;
@property(retain) NSString* priceType;
@property(assign) unsigned price;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetPriceType:(id)type;
-(id)SetPrice:(unsigned)price;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetPayPurchasePackageResp : PBGeneratedMessage {
	unsigned hasPackage : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseResponse : 1;
	NSString* package;
	NSString* extInfo;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasPackage;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* extInfo;
@property(retain) NSString* package;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetPackage:(id)package;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyPayTransitionReq : PBGeneratedMessage {
	unsigned hasOutTradeNo : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	NSString* outTradeNo;
	NSString* extInfo;
	BaseRequest* baseRequest;
	unsigned type;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasOutTradeNo;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* extInfo;
@property(retain) NSString* outTradeNo;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetOutTradeNo:(id)no;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyPayTransitionResp : PBGeneratedMessage {
	unsigned hasResultMsg : 1;
	unsigned hasBaseResponse : 1;
	NSString* resultMsg;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasResultMsg;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* resultMsg;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetResultMsg:(id)msg;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetChatRoomDonateHistoryReq : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasBaseRequest : 1;
	NSString* chatRoomName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasChatRoomName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* chatRoomName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetChatRoomName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface Donor : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasNickName : 1;
	unsigned hasDonateTitle : 1;
	unsigned hasDonateUrl : 1;
	unsigned hasTime : 1;
	NSString* userName;
	NSString* nickName;
	NSString* donateTitle;
	NSString* donateUrl;
	unsigned time;
}
@property(assign) BOOL hasDonateUrl;
@property(assign) BOOL hasDonateTitle;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasTime;
@property(retain) NSString* donateUrl;
@property(retain) NSString* donateTitle;
@property(retain) NSString* nickName;
@property(retain) NSString* userName;
@property(assign) unsigned time;
+(id)parseFromData:(id)data;
-(id)SetDonateUrl:(id)url;
-(id)SetDonateTitle:(id)title;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)SetTime:(unsigned)time;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetChatRoomDonateHistoryResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasTotalCount : 1;
	BaseResponse* baseResponse;
	unsigned totalCount;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasTotalCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned totalCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetTotalCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface GetChatRoomPresentHistoryReq : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasBaseRequest : 1;
	NSString* chatRoomName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasChatRoomName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* chatRoomName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetChatRoomName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface Presentation : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasNickName : 1;
	unsigned hasTitle : 1;
	unsigned hasWebUrl : 1;
	unsigned hasTime : 1;
	unsigned hasPrice : 1;
	unsigned hasNum : 1;
	NSString* userName;
	NSString* nickName;
	NSString* title;
	NSString* webUrl;
	unsigned time;
	unsigned price;
	unsigned num;
}
@property(assign) BOOL hasNum;
@property(assign) BOOL hasWebUrl;
@property(assign) BOOL hasPrice;
@property(assign) BOOL hasTitle;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasTime;
@property(assign) unsigned num;
@property(retain) NSString* webUrl;
@property(assign) unsigned price;
@property(retain) NSString* title;
@property(retain) NSString* nickName;
@property(retain) NSString* userName;
@property(assign) unsigned time;
+(id)parseFromData:(id)data;
-(id)SetNum:(unsigned)num;
-(id)SetWebUrl:(id)url;
-(id)SetPrice:(unsigned)price;
-(id)SetTitle:(id)title;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)SetTime:(unsigned)time;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetChatRoomPresentHistoryResp : PBGeneratedMessage {
	unsigned hasUrl : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasTotalCount : 1;
	unsigned hasDonateStatus : 1;
	NSString* url;
	BaseResponse* baseResponse;
	unsigned totalCount;
	unsigned donateStatus;
	NSMutableArray* mutableListList;
}
@property(assign) BOOL hasDonateStatus;
@property(assign) BOOL hasUrl;
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasTotalCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned donateStatus;
@property(retain) NSString* url;
@property(assign) unsigned totalCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDonateStatus:(unsigned)status;
-(id)SetUrl:(id)url;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetTotalCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface GetPersonalDonateHistoryReq : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBaseRequest;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DonateHistory : PBGeneratedMessage {
	unsigned hasDonateTitle : 1;
	unsigned hasDonateUrl : 1;
	unsigned hasDonateThumbUrl : 1;
	unsigned hasTime : 1;
	unsigned hasPrice : 1;
	NSString* donateTitle;
	NSString* donateUrl;
	NSString* donateThumbUrl;
	unsigned time;
	unsigned price;
}
@property(assign) BOOL hasDonateThumbUrl;
@property(assign) BOOL hasPrice;
@property(assign) BOOL hasDonateUrl;
@property(assign) BOOL hasDonateTitle;
@property(assign) BOOL hasTime;
@property(retain) NSString* donateThumbUrl;
@property(assign) unsigned price;
@property(retain) NSString* donateUrl;
@property(retain) NSString* donateTitle;
@property(assign) unsigned time;
+(id)parseFromData:(id)data;
-(id)SetDonateThumbUrl:(id)url;
-(id)SetPrice:(unsigned)price;
-(id)SetDonateUrl:(id)url;
-(id)SetDonateTitle:(id)title;
-(id)SetTime:(unsigned)time;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetPersonalDonateHistoryResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasTotalAmount : 1;
	unsigned hasTotalCount : 1;
	BaseResponse* baseResponse;
	unsigned totalAmount;
	unsigned totalCount;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasTotalCount;
@property(assign) BOOL hasTotalAmount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned totalCount;
@property(assign) unsigned totalAmount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetTotalCount:(unsigned)count;
-(id)SetTotalAmount:(unsigned)amount;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface VerifyPersonalInfoReq : PBGeneratedMessage {
	unsigned hasUserRealName : 1;
	unsigned hasUserIdcardNum : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasUserIdcardType : 1;
	NSString* userRealName;
	NSString* userIdcardNum;
	BaseRequest* baseRequest;
	unsigned userIdcardType;
}
@property(assign) BOOL hasUserIdcardNum;
@property(assign) BOOL hasUserIdcardType;
@property(assign) BOOL hasUserRealName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* userIdcardNum;
@property(assign) unsigned userIdcardType;
@property(retain) NSString* userRealName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUserIdcardNum:(id)num;
-(id)SetUserIdcardType:(unsigned)type;
-(id)SetUserRealName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyPersonalInfoResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyChatRoomReq : PBGeneratedMessage {
	unsigned hasApplyUserName : 1;
	unsigned hasChatRoomName : 1;
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	NSString* applyUserName;
	NSString* chatRoomName;
	NSString* ticket;
	BaseRequest* baseRequest;
	unsigned opCode;
}
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasChatRoomName;
@property(assign) BOOL hasApplyUserName;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* ticket;
@property(retain) NSString* chatRoomName;
@property(retain) NSString* applyUserName;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTicket:(id)ticket;
-(id)SetChatRoomName:(id)name;
-(id)SetApplyUserName:(id)name;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyChatRoomResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface QuitChatRoomReq : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasBaseRequest : 1;
	NSString* chatRoomName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasChatRoomName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* chatRoomName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetChatRoomName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface QuitChatRoomResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetChatRoomUpgradeStatusReq : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasBaseRequest : 1;
	NSString* chatRoomName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasChatRoomName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* chatRoomName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetChatRoomName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetChatRoomUpgradeStatusResp : PBGeneratedMessage {
	unsigned hasResultMsg : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasStatus : 1;
	unsigned hasMobileQuota : 1;
	unsigned hasCardQuota : 1;
	unsigned hasDonateQuota : 1;
	unsigned hasMaxCount : 1;
	NSString* resultMsg;
	BaseResponse* baseResponse;
	unsigned status;
	unsigned mobileQuota;
	unsigned cardQuota;
	unsigned donateQuota;
	unsigned maxCount;
}
@property(assign) BOOL hasResultMsg;
@property(assign) BOOL hasMaxCount;
@property(assign) BOOL hasDonateQuota;
@property(assign) BOOL hasCardQuota;
@property(assign) BOOL hasMobileQuota;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* resultMsg;
@property(assign) unsigned maxCount;
@property(assign) unsigned donateQuota;
@property(assign) unsigned cardQuota;
@property(assign) unsigned mobileQuota;
@property(assign) unsigned status;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetResultMsg:(id)msg;
-(id)SetMaxCount:(unsigned)count;
-(id)SetDonateQuota:(unsigned)quota;
-(id)SetCardQuota:(unsigned)quota;
-(id)SetMobileQuota:(unsigned)quota;
-(id)SetStatus:(unsigned)status;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UpgradeChatRoomReq : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasBaseRequest : 1;
	NSString* chatRoomName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasChatRoomName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* chatRoomName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetChatRoomName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UpgradeChatRoomResp : PBGeneratedMessage {
	unsigned hasChatRoomData : 1;
	unsigned hasResultMsg : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasMaxCount : 1;
	unsigned hasMobileQuota : 1;
	unsigned hasCardQuota : 1;
	unsigned hasDonateQuota : 1;
	NSString* chatRoomData;
	NSString* resultMsg;
	BaseResponse* baseResponse;
	unsigned maxCount;
	unsigned mobileQuota;
	unsigned cardQuota;
	unsigned donateQuota;
}
@property(assign) BOOL hasDonateQuota;
@property(assign) BOOL hasCardQuota;
@property(assign) BOOL hasMobileQuota;
@property(assign) BOOL hasMaxCount;
@property(assign) BOOL hasResultMsg;
@property(assign) BOOL hasChatRoomData;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned donateQuota;
@property(assign) unsigned cardQuota;
@property(assign) unsigned mobileQuota;
@property(assign) unsigned maxCount;
@property(retain) NSString* resultMsg;
@property(retain) NSString* chatRoomData;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDonateQuota:(unsigned)quota;
-(id)SetCardQuota:(unsigned)quota;
-(id)SetMobileQuota:(unsigned)quota;
-(id)SetMaxCount:(unsigned)count;
-(id)SetResultMsg:(id)msg;
-(id)SetChatRoomData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AddChatRoomDonateRecordReq : PBGeneratedMessage {
	unsigned hasChatRoomName : 1;
	unsigned hasTransId : 1;
	unsigned hasTitle : 1;
	unsigned hasWebUrl : 1;
	unsigned hasBaseRequest : 1;
	NSString* chatRoomName;
	NSString* transId;
	NSString* title;
	NSString* webUrl;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasWebUrl;
@property(assign) BOOL hasTitle;
@property(assign) BOOL hasTransId;
@property(assign) BOOL hasChatRoomName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* webUrl;
@property(retain) NSString* title;
@property(retain) NSString* transId;
@property(retain) NSString* chatRoomName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetWebUrl:(id)url;
-(id)SetTitle:(id)title;
-(id)SetTransId:(id)anId;
-(id)SetChatRoomName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AddChatRoomDonateRecordResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasMaxCount : 1;
	BaseResponse* baseResponse;
	unsigned maxCount;
}
@property(assign) BOOL hasMaxCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned maxCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetMaxCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GoogleContactUploadItem : PBGeneratedMessage {
	unsigned hasGoogleContactName : 1;
	NSString* googleContactName;
}
@property(assign) BOOL hasGoogleContactName;
@property(retain) NSString* googleContactName;
+(id)parseFromData:(id)data;
-(id)SetGoogleContactName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ListGoogleContactRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	unsigned hasContinueFlag : 1;
	unsigned hasClickSource : 1;
	BaseRequest* baseRequest;
	unsigned count;
	unsigned continueFlag;
	unsigned clickSource;
	NSMutableArray* mutableListList;
}
@property(assign) BOOL hasClickSource;
@property(assign) BOOL hasContinueFlag;
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned clickSource;
@property(assign) unsigned continueFlag;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetClickSource:(unsigned)source;
-(id)SetContinueFlag:(unsigned)flag;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface GoogleContactItem : PBGeneratedMessage {
	unsigned hasRet : 1;
	unsigned hasGoogleContactName : 1;
	unsigned hasUserName : 1;
	unsigned hasBigHeadUrl : 1;
	unsigned hasSmallHeadUrl : 1;
	unsigned hasNickName : 1;
	int ret;
	NSString* googleContactName;
	NSString* userName;
	NSString* bigHeadUrl;
	NSString* smallHeadUrl;
	NSString* nickName;
}
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasRet;
@property(assign) BOOL hasSmallHeadUrl;
@property(assign) BOOL hasBigHeadUrl;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasGoogleContactName;
@property(retain) NSString* nickName;
@property(assign) int ret;
@property(retain) NSString* smallHeadUrl;
@property(retain) NSString* bigHeadUrl;
@property(retain) NSString* userName;
@property(retain) NSString* googleContactName;
+(id)parseFromData:(id)data;
-(id)SetNickName:(id)name;
-(id)SetRet:(int)ret;
-(id)SetSmallHeadUrl:(id)url;
-(id)SetBigHeadUrl:(id)url;
-(id)SetUserName:(id)name;
-(id)SetGoogleContactName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ListGoogleContactResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface InviteGoogleContactItem : PBGeneratedMessage {
	unsigned hasGoogleContactName : 1;
	NSString* googleContactName;
}
@property(assign) BOOL hasGoogleContactName;
@property(retain) NSString* googleContactName;
+(id)parseFromData:(id)data;
-(id)SetGoogleContactName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface InviteGoogleContactRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface InviteGoogleContactResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableRetsList;
	int retsMemoizedSerializedSize;
}
@property(retain) NSMutableArray* mutableRetsList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addRetsFromArray:(id)array;
-(id)addRets:(int)rets;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)retsList;
-(id)init;
-(void)dealloc;
@end

@interface BBMContactUploadItem : PBGeneratedMessage {
	unsigned hasBbppid : 1;
	unsigned hasBbpin : 1;
	unsigned hasBbmnickName : 1;
	NSString* bbppid;
	NSString* bbpin;
	NSString* bbmnickName;
}
@property(assign) BOOL hasBbmnickName;
@property(assign) BOOL hasBbpin;
@property(assign) BOOL hasBbppid;
@property(retain) NSString* bbmnickName;
@property(retain) NSString* bbpin;
@property(retain) NSString* bbppid;
+(id)parseFromData:(id)data;
-(id)SetBbmnickName:(id)name;
-(id)SetBbpin:(id)bbpin;
-(id)SetBbppid:(id)bbppid;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface OnlineInfo : PBGeneratedMessage {
	unsigned hasWordingXml : 1;
	unsigned hasClientKey : 1;
	unsigned hasDeviceId : 1;
	unsigned hasDeviceType : 1;
	NSString* wordingXml;
	SKBuiltinBuffer_t* clientKey;
	NSData* deviceId;
	unsigned deviceType;
}
@property(assign) BOOL hasClientKey;
@property(assign) BOOL hasWordingXml;
@property(assign) BOOL hasDeviceId;
@property(assign) BOOL hasDeviceType;
@property(retain) SKBuiltinBuffer_t* clientKey;
@property(retain) NSString* wordingXml;
@property(retain) NSData* deviceId;
@property(assign) unsigned deviceType;
+(id)parseFromData:(id)data;
-(id)SetClientKey:(id)key;
-(id)SetWordingXml:(id)xml;
-(id)SetDeviceId:(id)anId;
-(id)SetDeviceType:(unsigned)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(id)GetWordingForKey:(id)key;
@end

@interface GetOnlineInfoRequest : PBGeneratedMessage {
	unsigned hasLanguage : 1;
	unsigned hasBaseRequest : 1;
	NSString* language;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasLanguage;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* language;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetLanguage:(id)language;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetOnlineInfoResponse : PBGeneratedMessage {
	unsigned hasSummaryXml : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasOnlineCount : 1;
	NSString* summaryXml;
	BaseResponse* baseResponse;
	unsigned onlineCount;
	NSMutableArray* mutableOnlineListList;
}
@property(assign) BOOL hasSummaryXml;
@property(retain) NSMutableArray* mutableOnlineListList;
@property(assign) BOOL hasOnlineCount;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* summaryXml;
@property(assign) unsigned onlineCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSummaryXml:(id)xml;
-(id)addOnlineList:(id)list;
-(id)addOnlineListFromArray:(id)array;
-(id)SetOnlineCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)onlineListList;
-(id)init;
-(void)dealloc;
@end

@interface GetA8KeyReq : PBGeneratedMessage {
	unsigned hasFriendUserName : 1;
	unsigned hasUserName : 1;
	unsigned hasBundleId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasA2Key : 1;
	unsigned hasAppId : 1;
	unsigned hasScope : 1;
	unsigned hasState : 1;
	unsigned hasReqUrl : 1;
	unsigned hasA2KeyNew : 1;
	unsigned hasOpCode : 1;
	unsigned hasFriendQq : 1;
	unsigned hasScene : 1;
	unsigned hasReason : 1;
	NSString* friendUserName;
	NSString* userName;
	NSString* bundleId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* a2Key;
	SKBuiltinString_t* appId;
	SKBuiltinString_t* scope;
	SKBuiltinString_t* state;
	SKBuiltinString_t* reqUrl;
	SKBuiltinBuffer_t* a2KeyNew;
	unsigned opCode;
	unsigned friendQq;
	unsigned scene;
	unsigned reason;
}
@property(assign) BOOL hasReason;
@property(assign) BOOL hasA2KeyNew;
@property(assign) BOOL hasBundleId;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasFriendQq;
@property(assign) BOOL hasFriendUserName;
@property(assign) BOOL hasReqUrl;
@property(assign) BOOL hasState;
@property(assign) BOOL hasScope;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasA2Key;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned reason;
@property(retain) SKBuiltinBuffer_t* a2KeyNew;
@property(retain) NSString* bundleId;
@property(retain) NSString* userName;
@property(assign) unsigned scene;
@property(assign) unsigned friendQq;
@property(retain) NSString* friendUserName;
@property(retain) SKBuiltinString_t* reqUrl;
@property(retain) SKBuiltinString_t* state;
@property(retain) SKBuiltinString_t* scope;
@property(retain) SKBuiltinString_t* appId;
@property(retain) SKBuiltinBuffer_t* a2Key;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReason:(unsigned)reason;
-(id)SetA2KeyNew:(id)aNew;
-(id)SetBundleId:(id)anId;
-(id)SetUserName:(id)name;
-(id)SetScene:(unsigned)scene;
-(id)SetFriendQq:(unsigned)qq;
-(id)SetFriendUserName:(id)name;
-(id)SetReqUrl:(id)url;
-(id)SetState:(id)state;
-(id)SetScope:(id)scope;
-(id)SetAppId:(id)anId;
-(id)SetA2Key:(id)key;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface JSAPIPermissionBitSet : PBGeneratedMessage {
	unsigned hasBitValue : 1;
	unsigned hasBitValue2 : 1;
	unsigned bitValue;
	unsigned bitValue2;
}
@property(assign) BOOL hasBitValue2;
@property(assign) BOOL hasBitValue;
@property(assign) unsigned bitValue2;
@property(assign) unsigned bitValue;
+(id)parseFromData:(id)data;
-(id)SetBitValue2:(unsigned)a2;
-(id)SetBitValue:(unsigned)value;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GeneralControlBitSet : PBGeneratedMessage {
	unsigned hasBitValue : 1;
	unsigned bitValue;
}
@property(assign) BOOL hasBitValue;
@property(assign) unsigned bitValue;
+(id)parseFromData:(id)data;
-(id)SetBitValue:(unsigned)value;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BizApiInfo : PBGeneratedMessage {
	unsigned hasApiName : 1;
	NSString* apiName;
}
@property(assign) BOOL hasApiName;
@property(retain) NSString* apiName;
+(id)parseFromData:(id)data;
-(id)SetApiName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BizScopeInfo : PBGeneratedMessage {
	unsigned hasScope : 1;
	unsigned hasScopeDesc : 1;
	unsigned hasScopeStatus : 1;
	unsigned hasApiCount : 1;
	NSString* scope;
	NSString* scopeDesc;
	unsigned scopeStatus;
	unsigned apiCount;
	NSMutableArray* mutableApiListList;
}
@property(retain) NSMutableArray* mutableApiListList;
@property(assign) BOOL hasApiCount;
@property(assign) BOOL hasScopeDesc;
@property(assign) BOOL hasScopeStatus;
@property(assign) BOOL hasScope;
@property(assign) unsigned apiCount;
@property(retain) NSString* scopeDesc;
@property(assign) unsigned scopeStatus;
@property(retain) NSString* scope;
+(id)parseFromData:(id)data;
-(id)addApiList:(id)list;
-(id)addApiListFromArray:(id)array;
-(id)SetApiCount:(unsigned)count;
-(id)SetScopeDesc:(id)desc;
-(id)SetScopeStatus:(unsigned)status;
-(id)SetScope:(id)scope;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)apiListList;
-(id)init;
-(void)dealloc;
@end

@interface YYBStruct : PBGeneratedMessage {
	unsigned hasDownloadUrl : 1;
	unsigned hasApkMd5 : 1;
	unsigned hasPreemptiveUrl : 1;
	unsigned hasExtInfo : 1;
	unsigned hasAndroidDownloadFlag : 1;
	NSString* downloadUrl;
	NSString* apkMd5;
	NSString* preemptiveUrl;
	NSString* extInfo;
	unsigned androidDownloadFlag;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasPreemptiveUrl;
@property(assign) BOOL hasApkMd5;
@property(assign) BOOL hasDownloadUrl;
@property(assign) BOOL hasAndroidDownloadFlag;
@property(retain) NSString* extInfo;
@property(retain) NSString* preemptiveUrl;
@property(retain) NSString* apkMd5;
@property(retain) NSString* downloadUrl;
@property(assign) unsigned androidDownloadFlag;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetPreemptiveUrl:(id)url;
-(id)SetApkMd5:(id)a5;
-(id)SetDownloadUrl:(id)url;
-(id)SetAndroidDownloadFlag:(unsigned)flag;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetA8KeyResp : PBGeneratedMessage {
	unsigned hasFullUrl : 1;
	unsigned hasA8Key : 1;
	unsigned hasTitle : 1;
	unsigned hasContent : 1;
	unsigned hasUserName : 1;
	unsigned hasShareUrl : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasJsapipermission : 1;
	unsigned hasGeneralControlBitSet : 1;
	unsigned hasActionCode : 1;
	unsigned hasScopeCount : 1;
	NSString* fullUrl;
	NSString* a8Key;
	NSString* title;
	NSString* content;
	NSString* userName;
	NSString* shareUrl;
	BaseResponse* baseResponse;
	JSAPIPermissionBitSet* jsapipermission;
	GeneralControlBitSet* generalControlBitSet;
	unsigned actionCode;
	unsigned scopeCount;
	NSMutableArray* mutableScopeListList;
}
@property(retain) NSMutableArray* mutableScopeListList;
@property(assign) BOOL hasScopeCount;
@property(assign) BOOL hasShareUrl;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasGeneralControlBitSet;
@property(assign) BOOL hasJsapipermission;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasTitle;
@property(assign) BOOL hasActionCode;
@property(assign) BOOL hasA8Key;
@property(assign) BOOL hasFullUrl;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned scopeCount;
@property(retain) NSString* shareUrl;
@property(retain) NSString* userName;
@property(retain) GeneralControlBitSet* generalControlBitSet;
@property(retain) JSAPIPermissionBitSet* jsapipermission;
@property(retain) NSString* content;
@property(retain) NSString* title;
@property(assign) unsigned actionCode;
@property(retain) NSString* a8Key;
@property(retain) NSString* fullUrl;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addScopeList:(id)list;
-(id)addScopeListFromArray:(id)array;
-(id)SetScopeCount:(unsigned)count;
-(id)SetShareUrl:(id)url;
-(id)SetUserName:(id)name;
-(id)SetGeneralControlBitSet:(id)set;
-(id)SetJsapipermission:(id)jsapipermission;
-(id)SetContent:(id)content;
-(id)SetTitle:(id)title;
-(id)SetActionCode:(unsigned)code;
-(id)SetA8Key:(id)key;
-(id)SetFullUrl:(id)url;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)scopeListList;
-(id)init;
-(void)dealloc;
@end

@interface AdAppList : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasAppCoverUrl : 1;
	unsigned hasAppDownloadUrl : 1;
	unsigned hasAndroidApkMd5 : 1;
	unsigned hasAppName : 1;
	unsigned hasAppIconUrl : 1;
	unsigned hasAppSnsDesc : 1;
	unsigned hasAndroidPackageName : 1;
	unsigned hasGooglePlayDownloadUrl : 1;
	unsigned hasSyyb : 1;
	NSString* appId;
	NSString* appCoverUrl;
	NSString* appDownloadUrl;
	NSString* androidApkMd5;
	NSString* appName;
	NSString* appIconUrl;
	NSString* appSnsDesc;
	NSString* androidPackageName;
	NSString* googlePlayDownloadUrl;
	YYBStruct* syyb;
}
@property(assign) BOOL hasSyyb;
@property(assign) BOOL hasGooglePlayDownloadUrl;
@property(assign) BOOL hasAndroidPackageName;
@property(assign) BOOL hasAppSnsDesc;
@property(assign) BOOL hasAppIconUrl;
@property(assign) BOOL hasAppName;
@property(assign) BOOL hasAndroidApkMd5;
@property(assign) BOOL hasAppDownloadUrl;
@property(assign) BOOL hasAppCoverUrl;
@property(assign) BOOL hasAppId;
@property(retain) YYBStruct* syyb;
@property(retain) NSString* googlePlayDownloadUrl;
@property(retain) NSString* androidPackageName;
@property(retain) NSString* appSnsDesc;
@property(retain) NSString* appIconUrl;
@property(retain) NSString* appName;
@property(retain) NSString* androidApkMd5;
@property(retain) NSString* appDownloadUrl;
@property(retain) NSString* appCoverUrl;
@property(retain) NSString* appId;
+(id)parseFromData:(id)data;
-(id)SetSyyb:(id)syyb;
-(id)SetGooglePlayDownloadUrl:(id)url;
-(id)SetAndroidPackageName:(id)name;
-(id)SetAppSnsDesc:(id)desc;
-(id)SetAppIconUrl:(id)url;
-(id)SetAppName:(id)name;
-(id)SetAndroidApkMd5:(id)a5;
-(id)SetAppDownloadUrl:(id)url;
-(id)SetAppCoverUrl:(id)url;
-(id)SetAppId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcAppList : PBGeneratedMessage {
	unsigned hasAppScreenShotCount : 1;
	unsigned hasAppSuggestionIntroUrl : 1;
	unsigned hasAppSuggestionIconUrl : 1;
	unsigned hasGooglePlayDownloadUrl : 1;
	unsigned hasAppNameEnUs : 1;
	unsigned hasAppNamezhTw : 1;
	unsigned hasAndroidPackageName : 1;
	unsigned hasAndroidApkMd5 : 1;
	unsigned hasAppType : 1;
	unsigned hasAppDetailDesc : 1;
	unsigned hasAppSnapshotUrl : 1;
	unsigned hasAppSnsDesc : 1;
	unsigned hasAppDevInfo : 1;
	unsigned hasAppCoverUrl : 1;
	unsigned hasAppDownloadUrl : 1;
	unsigned hasAppDesc : 1;
	unsigned hasAppIconUrl : 1;
	unsigned hasAppName : 1;
	unsigned hasAppId : 1;
	unsigned hasSyyb : 1;
	unsigned hasFriendCount : 1;
	int appScreenShotCount;
	NSString* appSuggestionIntroUrl;
	NSString* appSuggestionIconUrl;
	NSString* googlePlayDownloadUrl;
	NSString* appNameEnUs;
	NSString* appNamezhTw;
	NSString* androidPackageName;
	NSString* androidApkMd5;
	NSString* appType;
	NSString* appDetailDesc;
	NSString* appSnapshotUrl;
	NSString* appSnsDesc;
	NSString* appDevInfo;
	NSString* appCoverUrl;
	NSString* appDownloadUrl;
	NSString* appDesc;
	NSString* appIconUrl;
	NSString* appName;
	NSString* appId;
	YYBStruct* syyb;
	unsigned friendCount;
	NSMutableArray* mutableAppScreenShotListList;
}
@property(assign) BOOL hasSyyb;
@property(assign) BOOL hasAppSuggestionIntroUrl;
@property(assign) BOOL hasAppSuggestionIconUrl;
@property(assign) BOOL hasGooglePlayDownloadUrl;
@property(assign) BOOL hasAppNameEnUs;
@property(assign) BOOL hasAppNamezhTw;
@property(assign) BOOL hasAndroidPackageName;
@property(assign) BOOL hasAndroidApkMd5;
@property(assign) BOOL hasAppType;
@property(assign) BOOL hasFriendCount;
@property(assign) BOOL hasAppDetailDesc;
@property(assign) BOOL hasAppSnapshotUrl;
@property(assign) BOOL hasAppSnsDesc;
@property(retain) NSMutableArray* mutableAppScreenShotListList;
@property(assign) BOOL hasAppScreenShotCount;
@property(assign) BOOL hasAppDevInfo;
@property(assign) BOOL hasAppCoverUrl;
@property(assign) BOOL hasAppDownloadUrl;
@property(assign) BOOL hasAppDesc;
@property(assign) BOOL hasAppIconUrl;
@property(assign) BOOL hasAppName;
@property(assign) BOOL hasAppId;
@property(retain) YYBStruct* syyb;
@property(retain) NSString* appSuggestionIntroUrl;
@property(retain) NSString* appSuggestionIconUrl;
@property(retain) NSString* googlePlayDownloadUrl;
@property(retain) NSString* appNameEnUs;
@property(retain) NSString* appNamezhTw;
@property(retain) NSString* androidPackageName;
@property(retain) NSString* androidApkMd5;
@property(retain) NSString* appType;
@property(assign) unsigned friendCount;
@property(retain) NSString* appDetailDesc;
@property(retain) NSString* appSnapshotUrl;
@property(retain) NSString* appSnsDesc;
@property(assign) int appScreenShotCount;
@property(retain) NSString* appDevInfo;
@property(retain) NSString* appCoverUrl;
@property(retain) NSString* appDownloadUrl;
@property(retain) NSString* appDesc;
@property(retain) NSString* appIconUrl;
@property(retain) NSString* appName;
@property(retain) NSString* appId;
+(id)parseFromData:(id)data;
-(id)SetSyyb:(id)syyb;
-(id)SetAppSuggestionIntroUrl:(id)url;
-(id)SetAppSuggestionIconUrl:(id)url;
-(id)SetGooglePlayDownloadUrl:(id)url;
-(id)SetAppNameEnUs:(id)us;
-(id)SetAppNamezhTw:(id)tw;
-(id)SetAndroidPackageName:(id)name;
-(id)SetAndroidApkMd5:(id)a5;
-(id)SetAppType:(id)type;
-(id)SetFriendCount:(unsigned)count;
-(id)SetAppDetailDesc:(id)desc;
-(id)SetAppSnapshotUrl:(id)url;
-(id)SetAppSnsDesc:(id)desc;
-(id)addAppScreenShotList:(id)list;
-(id)addAppScreenShotListFromArray:(id)array;
-(id)SetAppScreenShotCount:(int)count;
-(id)SetAppDevInfo:(id)info;
-(id)SetAppCoverUrl:(id)url;
-(id)SetAppDownloadUrl:(id)url;
-(id)SetAppDesc:(id)desc;
-(id)SetAppIconUrl:(id)url;
-(id)SetAppName:(id)name;
-(id)SetAppId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)appScreenShotListList;
-(id)init;
-(void)dealloc;
@end

@interface GetGameIntroListRequest : PBGeneratedMessage {
	unsigned hasDevicePlatform : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	NSString* devicePlatform;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableAppIdListList;
}
@property(assign) BOOL hasDevicePlatform;
@property(retain) NSMutableArray* mutableAppIdListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* devicePlatform;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetDevicePlatform:(id)platform;
-(id)addAppIdList:(id)list;
-(id)addAppIdListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)appIdListList;
-(id)init;
-(void)dealloc;
@end

@interface GameIntro : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasGameIntroPage : 1;
	unsigned hasAndroidApkMd5 : 1;
	unsigned hasAppDownloadUrl : 1;
	unsigned hasGooglePlayDownloadUrl : 1;
	unsigned hasSyyb : 1;
	NSString* appId;
	NSString* gameIntroPage;
	NSString* androidApkMd5;
	NSString* appDownloadUrl;
	NSString* googlePlayDownloadUrl;
	YYBStruct* syyb;
}
@property(assign) BOOL hasSyyb;
@property(assign) BOOL hasGooglePlayDownloadUrl;
@property(assign) BOOL hasAppDownloadUrl;
@property(assign) BOOL hasAndroidApkMd5;
@property(assign) BOOL hasGameIntroPage;
@property(assign) BOOL hasAppId;
@property(retain) YYBStruct* syyb;
@property(retain) NSString* googlePlayDownloadUrl;
@property(retain) NSString* appDownloadUrl;
@property(retain) NSString* androidApkMd5;
@property(retain) NSString* gameIntroPage;
@property(retain) NSString* appId;
+(id)parseFromData:(id)data;
-(id)SetSyyb:(id)syyb;
-(id)SetGooglePlayDownloadUrl:(id)url;
-(id)SetAppDownloadUrl:(id)url;
-(id)SetAndroidApkMd5:(id)a5;
-(id)SetGameIntroPage:(id)page;
-(id)SetAppId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetGameIntroListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableGameIntroListList;
}
@property(retain) NSMutableArray* mutableGameIntroListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addGameIntroList:(id)list;
-(id)addGameIntroListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)gameIntroListList;
-(id)init;
-(void)dealloc;
@end

@interface GetAppPersonalInfoListRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableAppIdListList;
}
@property(retain) NSMutableArray* mutableAppIdListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addAppIdList:(id)list;
-(id)addAppIdListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)appIdListList;
-(id)init;
-(void)dealloc;
@end

@interface AppPersonalInfo : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasPersonalSettingXml : 1;
	NSString* appId;
	NSString* personalSettingXml;
}
@property(assign) BOOL hasPersonalSettingXml;
@property(assign) BOOL hasAppId;
@property(retain) NSString* personalSettingXml;
@property(retain) NSString* appId;
+(id)parseFromData:(id)data;
-(id)SetPersonalSettingXml:(id)xml;
-(id)SetAppId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAppPersonalInfoListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableAppPersonalInfoListList;
}
@property(retain) NSMutableArray* mutableAppPersonalInfoListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addAppPersonalInfoList:(id)list;
-(id)addAppPersonalInfoListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)appPersonalInfoListList;
-(id)init;
-(void)dealloc;
@end

@interface GetSuggestionAppDetailRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasLang : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	NSString* lang;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasLang;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* lang;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetLang:(id)lang;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetSuggestionAppDetailResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasRcDetail : 1;
	BaseResponse* baseResponse;
	RcAppList* rcDetail;
}
@property(assign) BOOL hasRcDetail;
@property(assign) BOOL hasBaseResponse;
@property(retain) RcAppList* rcDetail;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRcDetail:(id)detail;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UserGameRankInfo : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasScore : 1;
	unsigned hasRank : 1;
	NSString* userName;
	unsigned score;
	unsigned rank;
}
@property(assign) BOOL hasRank;
@property(assign) BOOL hasScore;
@property(assign) BOOL hasUserName;
@property(assign) unsigned rank;
@property(assign) unsigned score;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetRank:(unsigned)rank;
-(id)SetScore:(unsigned)score;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetGameRankListRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetGameRankListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasSyyb : 1;
	unsigned hasCount : 1;
	unsigned hasFriendsCount : 1;
	unsigned hasHasReportScore : 1;
	BaseResponse* baseResponse;
	YYBStruct* syyb;
	unsigned count;
	unsigned friendsCount;
	unsigned hasReportScore;
	NSMutableArray* mutableRankListList;
}
@property(assign) BOOL hasSyyb;
@property(assign) BOOL hasHasReportScore;
@property(assign) BOOL hasFriendsCount;
@property(retain) NSMutableArray* mutableRankListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(retain) YYBStruct* syyb;
@property(assign) unsigned hasReportScore;
@property(assign) unsigned friendsCount;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSyyb:(id)syyb;
-(id)SetHasReportScore:(unsigned)score;
-(id)SetFriendsCount:(unsigned)count;
-(id)addRankList:(id)list;
-(id)addRankListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)rankListList;
-(id)init;
-(void)dealloc;
@end

@interface GetAppInfoListRequest : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasBaseRequest : 1;
	int count;
	BaseRequest* baseRequest;
	NSMutableArray* mutableAppIdListList;
}
@property(retain) NSMutableArray* mutableAppIdListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) int count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addAppIdList:(id)list;
-(id)addAppIdListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)appIdListList;
-(id)init;
-(void)dealloc;
@end

@interface BizAppInfo : PBGeneratedMessage {
	unsigned hasGooglePlayDownloadUrl : 1;
	unsigned hasDownloadUrlMd5 : 1;
	unsigned hasDownloadUrl : 1;
	unsigned hasIconUrlMdpi : 1;
	unsigned hasDevInfo : 1;
	unsigned hasAppType : 1;
	unsigned hasAndroidSignature : 1;
	unsigned hasAndroidPackageName : 1;
	unsigned hasWatermarkUrl : 1;
	unsigned hasStoreUrl : 1;
	unsigned hasIconUrlHd : 1;
	unsigned hasIconUrlSd : 1;
	unsigned hasDescription4ZhTw : 1;
	unsigned hasName4ZhTw : 1;
	unsigned hasDescription4EnUs : 1;
	unsigned hasName4EnUs : 1;
	unsigned hasDescription : 1;
	unsigned hasName : 1;
	unsigned hasAppId : 1;
	unsigned hasAppInfoFlag : 1;
	unsigned hasAppVersion : 1;
	unsigned hasAppUpdateVersion : 1;
	NSString* googlePlayDownloadUrl;
	NSString* downloadUrlMd5;
	NSString* downloadUrl;
	NSString* iconUrlMdpi;
	NSString* devInfo;
	NSString* appType;
	NSString* androidSignature;
	NSString* androidPackageName;
	NSString* watermarkUrl;
	NSString* storeUrl;
	NSString* iconUrlHd;
	NSString* iconUrlSd;
	NSString* description4ZhTw;
	NSString* name4ZhTw;
	NSString* description4EnUs;
	NSString* name4EnUs;
	NSString* description;
	NSString* name;
	NSString* appId;
	unsigned appInfoFlag;
	unsigned appVersion;
	unsigned appUpdateVersion;
}
@property(assign) BOOL hasGooglePlayDownloadUrl;
@property(assign) BOOL hasDownloadUrlMd5;
@property(assign) BOOL hasDownloadUrl;
@property(assign) BOOL hasIconUrlMdpi;
@property(assign) BOOL hasAppUpdateVersion;
@property(assign) BOOL hasAppVersion;
@property(assign) BOOL hasAppInfoFlag;
@property(assign) BOOL hasDevInfo;
@property(assign) BOOL hasAppType;
@property(assign) BOOL hasAndroidSignature;
@property(assign) BOOL hasAndroidPackageName;
@property(assign) BOOL hasWatermarkUrl;
@property(assign) BOOL hasStoreUrl;
@property(assign) BOOL hasIconUrlHd;
@property(assign) BOOL hasIconUrlSd;
@property(assign) BOOL hasDescription4ZhTw;
@property(assign) BOOL hasName4ZhTw;
@property(assign) BOOL hasDescription4EnUs;
@property(assign) BOOL hasName4EnUs;
@property(assign) BOOL hasDescription;
@property(assign) BOOL hasName;
@property(assign) BOOL hasAppId;
@property(retain) NSString* googlePlayDownloadUrl;
@property(retain) NSString* downloadUrlMd5;
@property(retain) NSString* downloadUrl;
@property(retain) NSString* iconUrlMdpi;
@property(assign) unsigned appUpdateVersion;
@property(assign) unsigned appVersion;
@property(assign) unsigned appInfoFlag;
@property(retain) NSString* devInfo;
@property(retain) NSString* appType;
@property(retain) NSString* androidSignature;
@property(retain) NSString* androidPackageName;
@property(retain) NSString* watermarkUrl;
@property(retain) NSString* storeUrl;
@property(retain) NSString* iconUrlHd;
@property(retain) NSString* iconUrlSd;
@property(retain) NSString* description4ZhTw;
@property(retain) NSString* name4ZhTw;
@property(retain) NSString* description4EnUs;
@property(retain) NSString* name4EnUs;
@property(retain) NSString* description;
@property(retain) NSString* name;
@property(retain) NSString* appId;
+(id)parseFromData:(id)data;
-(id)SetGooglePlayDownloadUrl:(id)url;
-(id)SetDownloadUrlMd5:(id)a5;
-(id)SetDownloadUrl:(id)url;
-(id)SetIconUrlMdpi:(id)mdpi;
-(id)SetAppUpdateVersion:(unsigned)version;
-(id)SetAppVersion:(unsigned)version;
-(id)SetAppInfoFlag:(unsigned)flag;
-(id)SetDevInfo:(id)info;
-(id)SetAppType:(id)type;
-(id)SetAndroidSignature:(id)signature;
-(id)SetAndroidPackageName:(id)name;
-(id)SetWatermarkUrl:(id)url;
-(id)SetStoreUrl:(id)url;
-(id)SetIconUrlHd:(id)hd;
-(id)SetIconUrlSd:(id)sd;
-(id)SetDescription4ZhTw:(id)tw;
-(id)SetName4ZhTw:(id)tw;
-(id)SetDescription4EnUs:(id)us;
-(id)SetName4EnUs:(id)us;
-(id)SetDescription:(id)description;
-(id)SetName:(id)name;
-(id)SetAppId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAppInfoListResponse : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasBaseResponse : 1;
	int count;
	BaseResponse* baseResponse;
	NSMutableArray* mutableAppInfoListList;
}
@property(retain) NSMutableArray* mutableAppInfoListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) int count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addAppInfoList:(id)list;
-(id)addAppInfoListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)appInfoListList;
-(id)init;
-(void)dealloc;
@end

@interface AppCenterRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasReqBuf : 1;
	unsigned hasType : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* reqBuf;
	unsigned type;
}
@property(assign) BOOL hasReqBuf;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* reqBuf;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReqBuf:(id)buf;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AppCenterResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasRespBuf : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* respBuf;
}
@property(assign) BOOL hasRespBuf;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* respBuf;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRespBuf:(id)buf;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAuthAppListRequest : PBGeneratedMessage {
	unsigned hasLang : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	NSString* lang;
	BaseRequest* baseRequest;
	unsigned type;
}
@property(assign) BOOL hasLang;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* lang;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetLang:(id)lang;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AuthAppBaseInfo : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasAppType : 1;
	unsigned hasIconUrl : 1;
	unsigned hasAppName : 1;
	unsigned hasExternInfo : 1;
	unsigned hasAuthInfo : 1;
	unsigned hasDevInfo : 1;
	unsigned hasAppFlag : 1;
	NSString* appId;
	NSString* appType;
	NSString* iconUrl;
	NSString* appName;
	NSString* externInfo;
	NSString* authInfo;
	NSString* devInfo;
	unsigned appFlag;
}
@property(assign) BOOL hasDevInfo;
@property(assign) BOOL hasAuthInfo;
@property(assign) BOOL hasExternInfo;
@property(assign) BOOL hasAppFlag;
@property(assign) BOOL hasAppName;
@property(assign) BOOL hasIconUrl;
@property(assign) BOOL hasAppType;
@property(assign) BOOL hasAppId;
@property(retain) NSString* devInfo;
@property(retain) NSString* authInfo;
@property(retain) NSString* externInfo;
@property(assign) unsigned appFlag;
@property(retain) NSString* appName;
@property(retain) NSString* iconUrl;
@property(retain) NSString* appType;
@property(retain) NSString* appId;
+(id)parseFromData:(id)data;
-(id)SetDevInfo:(id)info;
-(id)SetAuthInfo:(id)info;
-(id)SetExternInfo:(id)info;
-(id)SetAppFlag:(unsigned)flag;
-(id)SetAppName:(id)name;
-(id)SetIconUrl:(id)url;
-(id)SetAppType:(id)type;
-(id)SetAppId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAuthAppListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasAppCount : 1;
	BaseResponse* baseResponse;
	unsigned appCount;
	NSMutableArray* mutableAuthAppListList;
}
@property(retain) NSMutableArray* mutableAuthAppListList;
@property(assign) BOOL hasAppCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned appCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addAuthAppList:(id)list;
-(id)addAuthAppListFromArray:(id)array;
-(id)SetAppCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)authAppListList;
-(id)init;
-(void)dealloc;
@end

@interface GetAuthAppInfoRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAuthAppInfoResponse : PBGeneratedMessage {
	unsigned hasAuthInfo : 1;
	unsigned hasDevInfo : 1;
	unsigned hasExternInfo : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBaseInfo : 1;
	NSString* authInfo;
	NSString* devInfo;
	NSString* externInfo;
	BaseResponse* baseResponse;
	AuthAppBaseInfo* baseInfo;
}
@property(assign) BOOL hasExternInfo;
@property(assign) BOOL hasDevInfo;
@property(assign) BOOL hasAuthInfo;
@property(assign) BOOL hasBaseInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* externInfo;
@property(retain) NSString* devInfo;
@property(retain) NSString* authInfo;
@property(retain) AuthAppBaseInfo* baseInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetExternInfo:(id)info;
-(id)SetDevInfo:(id)info;
-(id)SetAuthInfo:(id)info;
-(id)SetBaseInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SetAppSettingRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasCmdValue : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasCmdId : 1;
	NSString* appId;
	NSString* cmdValue;
	BaseRequest* baseRequest;
	unsigned cmdId;
}
@property(assign) BOOL hasCmdValue;
@property(assign) BOOL hasCmdId;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* cmdValue;
@property(assign) unsigned cmdId;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetCmdValue:(id)value;
-(id)SetCmdId:(unsigned)anId;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SetAppSettingResponse : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasAppFlag : 1;
	unsigned hasCmdId : 1;
	NSString* appId;
	BaseResponse* baseResponse;
	unsigned appFlag;
	unsigned cmdId;
}
@property(assign) BOOL hasCmdId;
@property(assign) BOOL hasAppFlag;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned cmdId;
@property(assign) unsigned appFlag;
@property(retain) NSString* appId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCmdId:(unsigned)anId;
-(id)SetAppFlag:(unsigned)flag;
-(id)SetAppId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AppSettingReq : PBGeneratedMessage {
	unsigned hasAppId : 1;
	NSString* appId;
}
@property(assign) BOOL hasAppId;
@property(retain) NSString* appId;
+(id)parseFromData:(id)data;
-(id)SetAppId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AppSetting : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasOpenId : 1;
	unsigned hasAppFlag : 1;
	NSString* appId;
	NSString* openId;
	unsigned appFlag;
}
@property(assign) BOOL hasOpenId;
@property(assign) BOOL hasAppFlag;
@property(assign) BOOL hasAppId;
@property(retain) NSString* openId;
@property(assign) unsigned appFlag;
@property(retain) NSString* appId;
+(id)parseFromData:(id)data;
-(id)SetOpenId:(id)anId;
-(id)SetAppFlag:(unsigned)flag;
-(id)SetAppId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetAppSettingRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasAppCount : 1;
	BaseRequest* baseRequest;
	unsigned appCount;
	NSMutableArray* mutableAppSettingReqListList;
}
@property(retain) NSMutableArray* mutableAppSettingReqListList;
@property(assign) BOOL hasAppCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned appCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addAppSettingReqList:(id)list;
-(id)addAppSettingReqListFromArray:(id)array;
-(id)SetAppCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)appSettingReqListList;
-(id)init;
-(void)dealloc;
@end

@interface GetAppSettingResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasAppCount : 1;
	BaseResponse* baseResponse;
	unsigned appCount;
	NSMutableArray* mutableSettingListList;
}
@property(retain) NSMutableArray* mutableSettingListList;
@property(assign) BOOL hasAppCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned appCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addSettingList:(id)list;
-(id)addSettingListFromArray:(id)array;
-(id)SetAppCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)settingListList;
-(id)init;
-(void)dealloc;
@end

@interface GetSuggestionAppListRequest : PBGeneratedMessage {
	unsigned hasLang : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasAppType : 1;
	unsigned hasOffSet : 1;
	unsigned hasLimit : 1;
	unsigned hasInstalledAppCount : 1;
	NSString* lang;
	BaseRequest* baseRequest;
	unsigned appType;
	unsigned offSet;
	unsigned limit;
	unsigned installedAppCount;
	NSMutableArray* mutableInstalledAppListList;
}
@property(retain) NSMutableArray* mutableInstalledAppListList;
@property(assign) BOOL hasInstalledAppCount;
@property(assign) BOOL hasLang;
@property(assign) BOOL hasLimit;
@property(assign) BOOL hasOffSet;
@property(assign) BOOL hasAppType;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned installedAppCount;
@property(retain) NSString* lang;
@property(assign) unsigned limit;
@property(assign) unsigned offSet;
@property(assign) unsigned appType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addInstalledAppList:(id)list;
-(id)addInstalledAppListFromArray:(id)array;
-(id)SetInstalledAppCount:(unsigned)count;
-(id)SetLang:(id)lang;
-(id)SetLimit:(unsigned)limit;
-(id)SetOffSet:(unsigned)set;
-(id)SetAppType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)installedAppListList;
-(id)init;
-(void)dealloc;
@end

@interface GetSuggestionAppListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasRcCount : 1;
	unsigned hasIsInternalDownload : 1;
	unsigned hasAdCount : 1;
	BaseResponse* baseResponse;
	unsigned rcCount;
	unsigned isInternalDownload;
	unsigned adCount;
	NSMutableArray* mutableRcListList;
	NSMutableArray* mutableAdListList;
}
@property(retain) NSMutableArray* mutableAdListList;
@property(assign) BOOL hasAdCount;
@property(assign) BOOL hasIsInternalDownload;
@property(retain) NSMutableArray* mutableRcListList;
@property(assign) BOOL hasRcCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned adCount;
@property(assign) unsigned isInternalDownload;
@property(assign) unsigned rcCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addAdList:(id)list;
-(id)addAdListFromArray:(id)array;
-(id)SetAdCount:(unsigned)count;
-(id)SetIsInternalDownload:(unsigned)download;
-(id)addRcList:(id)list;
-(id)addRcListFromArray:(id)array;
-(id)SetRcCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)adListList;
-(id)rcListList;
-(id)init;
-(void)dealloc;
@end

@interface JSOAuthRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasUrl : 1;
	unsigned hasScope : 1;
	unsigned hasSignature : 1;
	unsigned hasSignatureMethod : 1;
	unsigned hasTimeStamp : 1;
	unsigned hasNonce : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	NSString* url;
	NSString* scope;
	NSString* signature;
	NSString* signatureMethod;
	NSString* timeStamp;
	NSString* nonce;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasNonce;
@property(assign) BOOL hasTimeStamp;
@property(assign) BOOL hasSignatureMethod;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasScope;
@property(assign) BOOL hasUrl;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* nonce;
@property(retain) NSString* timeStamp;
@property(retain) NSString* signatureMethod;
@property(retain) NSString* signature;
@property(retain) NSString* scope;
@property(retain) NSString* url;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetNonce:(id)nonce;
-(id)SetTimeStamp:(id)stamp;
-(id)SetSignatureMethod:(id)method;
-(id)SetSignature:(id)signature;
-(id)SetScope:(id)scope;
-(id)SetUrl:(id)url;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface JSOAuthResponse : PBGeneratedMessage {
	unsigned hasOauthTitle : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasScopeCount : 1;
	NSString* oauthTitle;
	BaseResponse* baseResponse;
	unsigned scopeCount;
	NSMutableArray* mutableScopeListList;
}
@property(assign) BOOL hasOauthTitle;
@property(retain) NSMutableArray* mutableScopeListList;
@property(assign) BOOL hasScopeCount;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* oauthTitle;
@property(assign) unsigned scopeCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetOauthTitle:(id)title;
-(id)addScopeList:(id)list;
-(id)addScopeListFromArray:(id)array;
-(id)SetScopeCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)scopeListList;
-(id)init;
-(void)dealloc;
@end

@interface SetOAuthScopeRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasScopeCount : 1;
	NSString* appId;
	BaseRequest* baseRequest;
	unsigned scopeCount;
	NSMutableArray* mutableScopeListList;
}
@property(retain) NSMutableArray* mutableScopeListList;
@property(assign) BOOL hasScopeCount;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned scopeCount;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addScopeList:(id)list;
-(id)addScopeListFromArray:(id)array;
-(id)SetScopeCount:(unsigned)count;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)scopeListList;
-(id)init;
-(void)dealloc;
@end

@interface SetOAuthScopeResponse : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasScopeCount : 1;
	BaseRequest* baseRequest;
	unsigned scopeCount;
	NSMutableArray* mutableScopeListList;
}
@property(retain) NSMutableArray* mutableScopeListList;
@property(assign) BOOL hasScopeCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned scopeCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addScopeList:(id)list;
-(id)addScopeListFromArray:(id)array;
-(id)SetScopeCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)scopeListList;
-(id)init;
-(void)dealloc;
@end

@interface StyleKeyVal : PBGeneratedMessage {
	unsigned hasVal : 1;
	unsigned hasKey : 1;
	NSString* val;
	unsigned key;
}
@property(assign) BOOL hasVal;
@property(assign) BOOL hasKey;
@property(retain) NSString* val;
@property(assign) unsigned key;
+(id)parseFromData:(id)data;
-(id)SetVal:(id)val;
-(id)SetKey:(unsigned)key;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShowStyleKey : PBGeneratedMessage {
	unsigned hasKeyCount : 1;
	unsigned keyCount;
	NSMutableArray* mutableKeyList;
}
@property(retain) NSMutableArray* mutableKeyList;
@property(assign) BOOL hasKeyCount;
@property(assign) unsigned keyCount;
+(id)parseFromData:(id)data;
-(id)addKey:(id)key;
-(id)addKeyFromArray:(id)array;
-(id)SetKeyCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)keyList;
-(id)init;
-(void)dealloc;
@end

@interface BaseResponseErrMsg : PBGeneratedMessage {
	unsigned hasShowType : 1;
	unsigned hasDispSec : 1;
	unsigned hasAction : 1;
	unsigned hasContent : 1;
	unsigned hasUrl : 1;
	unsigned hasTitle : 1;
	int showType;
	int dispSec;
	int action;
	NSString* content;
	NSString* url;
	NSString* title;
}
@property(assign) BOOL hasAction;
@property(assign) BOOL hasTitle;
@property(assign) BOOL hasDispSec;
@property(assign) BOOL hasUrl;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasShowType;
@property(assign) int action;
@property(retain) NSString* title;
@property(assign) int dispSec;
@property(retain) NSString* url;
@property(retain) NSString* content;
@property(assign) int showType;
+(id)parseFromData:(id)data;
-(id)SetAction:(int)action;
-(id)SetTitle:(id)title;
-(id)SetDispSec:(int)sec;
-(id)SetUrl:(id)url;
-(id)SetContent:(id)content;
-(id)SetShowType:(int)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(id)initWithXml:(id)xml;
@end

@interface GetStreamUrlRequest : PBGeneratedMessage {
	unsigned hasStreamId : 1;
	unsigned hasBaseRequest : 1;
	NSString* streamId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasStreamId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* streamId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetStreamId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetStreamUrlResponse : PBGeneratedMessage {
	unsigned hasStreamUrl : 1;
	unsigned hasBaseResponse : 1;
	NSString* streamUrl;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasStreamUrl;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* streamUrl;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetStreamUrl:(id)url;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SetPushSoundReq : PBGeneratedMessage {
	unsigned hasSound : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	NSString* sound;
	BaseRequest* baseRequest;
	unsigned type;
}
@property(assign) BOOL hasSound;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* sound;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSound:(id)sound;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SetPushSoundResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SendCardRequest : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasContent : 1;
	unsigned hasContentEx : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasSendCardBitFlag : 1;
	unsigned hasStyle : 1;
	NSString* userName;
	NSString* content;
	NSString* contentEx;
	BaseRequest* baseRequest;
	unsigned sendCardBitFlag;
	unsigned style;
}
@property(assign) BOOL hasContentEx;
@property(assign) BOOL hasStyle;
@property(assign) BOOL hasSendCardBitFlag;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* contentEx;
@property(assign) unsigned style;
@property(assign) unsigned sendCardBitFlag;
@property(retain) NSString* content;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetContentEx:(id)ex;
-(id)SetStyle:(unsigned)style;
-(id)SetSendCardBitFlag:(unsigned)flag;
-(id)SetContent:(id)content;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SendCardResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface Mobile : PBGeneratedMessage {
	unsigned hasV : 1;
	NSString* v;
}
@property(assign) BOOL hasV;
@property(retain) NSString* v;
+(id)parseFromData:(id)data;
-(id)SetV:(id)v;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface MEmail : PBGeneratedMessage {
	unsigned hasV : 1;
	NSString* v;
}
@property(assign) BOOL hasV;
@property(retain) NSString* v;
+(id)parseFromData:(id)data;
-(id)SetV:(id)v;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyUser : PBGeneratedMessage {
	unsigned hasValue : 1;
	unsigned hasVerifyUserTicket : 1;
	NSString* value;
	NSString* verifyUserTicket;
}
@property(assign) BOOL hasVerifyUserTicket;
@property(assign) BOOL hasValue;
@property(retain) NSString* verifyUserTicket;
@property(retain) NSString* value;
+(id)parseFromData:(id)data;
-(id)SetVerifyUserTicket:(id)ticket;
-(id)SetValue:(id)value;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyUserRequest : PBGeneratedMessage {
	unsigned hasVerifyContent : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpcode : 1;
	unsigned hasVerifyUserListSize : 1;
	unsigned hasSceneListCount : 1;
	NSString* verifyContent;
	BaseRequest* baseRequest;
	unsigned opcode;
	unsigned verifyUserListSize;
	unsigned sceneListCount;
	NSMutableArray* mutableVerifyUserListList;
	NSMutableArray* mutableSceneListList;
	int sceneListMemoizedSerializedSize;
}
@property(retain) NSMutableArray* mutableSceneListList;
@property(assign) BOOL hasSceneListCount;
@property(assign) BOOL hasVerifyContent;
@property(retain) NSMutableArray* mutableVerifyUserListList;
@property(assign) BOOL hasVerifyUserListSize;
@property(assign) BOOL hasOpcode;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned sceneListCount;
@property(retain) NSString* verifyContent;
@property(assign) unsigned verifyUserListSize;
@property(assign) unsigned opcode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addSceneListFromArray:(id)array;
-(id)addSceneList:(unsigned)list;
-(id)SetSceneListCount:(unsigned)count;
-(id)SetVerifyContent:(id)content;
-(id)addVerifyUserList:(id)list;
-(id)addVerifyUserListFromArray:(id)array;
-(id)SetVerifyUserListSize:(unsigned)size;
-(id)SetOpcode:(unsigned)opcode;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)sceneListList;
-(id)verifyUserListList;
-(id)init;
-(void)dealloc;
@end

@interface VerifyUserResponse : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasBaseResponse : 1;
	NSString* userName;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* userName;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ContactProfile : PBGeneratedMessage {
	unsigned hasSex : 1;
	unsigned hasAlias : 1;
	unsigned hasExtInfo : 1;
	unsigned hasDomainList : 1;
	unsigned hasRemarkQuanPin : 1;
	unsigned hasRemarkPyinitial : 1;
	unsigned hasRemark : 1;
	unsigned hasQuanPin : 1;
	unsigned hasPyinitial : 1;
	unsigned hasNickName : 1;
	unsigned hasUserName : 1;
	unsigned hasImgBuf : 1;
	unsigned hasBitVal : 1;
	unsigned hasBitMask : 1;
	unsigned hasImgRet : 1;
	unsigned hasContactType : 1;
	unsigned hasRoomInfoCount : 1;
	unsigned hasChatRoomNotify : 1;
	unsigned hasAddContactScene : 1;
	unsigned hasExtUpdateSeq : 1;
	unsigned hasImgUpdateSeq : 1;
	int sex;
	NSString* alias;
	NSString* extInfo;
	NSString* domainList;
	NSString* remarkQuanPin;
	NSString* remarkPyinitial;
	NSString* remark;
	NSString* quanPin;
	NSString* pyinitial;
	NSString* nickName;
	NSString* userName;
	SKBuiltinBuffer_t* imgBuf;
	unsigned bitVal;
	unsigned bitMask;
	unsigned imgRet;
	unsigned contactType;
	unsigned roomInfoCount;
	unsigned chatRoomNotify;
	unsigned addContactScene;
	unsigned extUpdateSeq;
	unsigned imgUpdateSeq;
	NSMutableArray* mutableRoomInfoListList;
}
@property(assign) BOOL hasAlias;
@property(assign) BOOL hasImgUpdateSeq;
@property(assign) BOOL hasExtUpdateSeq;
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasAddContactScene;
@property(assign) BOOL hasChatRoomNotify;
@property(assign) BOOL hasDomainList;
@property(retain) NSMutableArray* mutableRoomInfoListList;
@property(assign) BOOL hasRoomInfoCount;
@property(assign) BOOL hasContactType;
@property(assign) BOOL hasRemarkQuanPin;
@property(assign) BOOL hasRemarkPyinitial;
@property(assign) BOOL hasImgRet;
@property(assign) BOOL hasRemark;
@property(assign) BOOL hasBitVal;
@property(assign) BOOL hasBitMask;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasQuanPin;
@property(assign) BOOL hasPyinitial;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(retain) NSString* alias;
@property(assign) unsigned imgUpdateSeq;
@property(assign) unsigned extUpdateSeq;
@property(retain) NSString* extInfo;
@property(assign) unsigned addContactScene;
@property(assign) unsigned chatRoomNotify;
@property(retain) NSString* domainList;
@property(assign) unsigned roomInfoCount;
@property(assign) unsigned contactType;
@property(retain) NSString* remarkQuanPin;
@property(retain) NSString* remarkPyinitial;
@property(assign) unsigned imgRet;
@property(retain) NSString* remark;
@property(assign) unsigned bitVal;
@property(assign) unsigned bitMask;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(assign) int sex;
@property(retain) NSString* quanPin;
@property(retain) NSString* pyinitial;
@property(retain) NSString* nickName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetAlias:(id)alias;
-(id)SetImgUpdateSeq:(unsigned)seq;
-(id)SetExtUpdateSeq:(unsigned)seq;
-(id)SetExtInfo:(id)info;
-(id)SetAddContactScene:(unsigned)scene;
-(id)SetChatRoomNotify:(unsigned)notify;
-(id)SetDomainList:(id)list;
-(id)addRoomInfoList:(id)list;
-(id)addRoomInfoListFromArray:(id)array;
-(id)SetRoomInfoCount:(unsigned)count;
-(id)SetContactType:(unsigned)type;
-(id)SetRemarkQuanPin:(id)pin;
-(id)SetRemarkPyinitial:(id)pyinitial;
-(id)SetImgRet:(unsigned)ret;
-(id)SetRemark:(id)remark;
-(id)SetBitVal:(unsigned)val;
-(id)SetBitMask:(unsigned)mask;
-(id)SetImgBuf:(id)buf;
-(id)SetSex:(int)sex;
-(id)SetQuanPin:(id)pin;
-(id)SetPyinitial:(id)pyinitial;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)roomInfoListList;
-(id)init;
-(void)dealloc;
@end

@interface BatchGetContactProfileRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasMode : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned mode;
	unsigned count;
	NSMutableArray* mutableUserNameListList;
}
@property(retain) NSMutableArray* mutableUserNameListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasMode;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(assign) unsigned mode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addUserNameList:(id)list;
-(id)addUserNameListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetMode:(unsigned)mode;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)userNameListList;
-(id)init;
-(void)dealloc;
@end

@interface BatchGetContactProfileResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableContactProfileBufListList;
}
@property(retain) NSMutableArray* mutableContactProfileBufListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addContactProfileBufList:(id)list;
-(id)addContactProfileBufListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)contactProfileBufListList;
-(id)init;
-(void)dealloc;
@end

@interface PSMStat : PBGeneratedMessage {
	unsigned hasAtype : 1;
	unsigned hasMtype : 1;
	NSString* atype;
	unsigned mtype;
}
@property(assign) BOOL hasAtype;
@property(assign) BOOL hasMtype;
@property(retain) NSString* atype;
@property(assign) unsigned mtype;
+(id)parseFromData:(id)data;
-(id)SetAtype:(id)atype;
-(id)SetMtype:(unsigned)mtype;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetMFriendRequest : PBGeneratedMessage {
	unsigned hasUpdateMobileListSize : 1;
	unsigned hasUpdateEmailListSize : 1;
	unsigned hasMd5 : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpType : 1;
	int updateMobileListSize;
	int updateEmailListSize;
	NSString* md5;
	BaseRequest* baseRequest;
	unsigned opType;
	NSMutableArray* mutableUpdateMobileListList;
	NSMutableArray* mutableUpdateEmailListList;
}
@property(retain) NSMutableArray* mutableUpdateEmailListList;
@property(assign) BOOL hasUpdateEmailListSize;
@property(retain) NSMutableArray* mutableUpdateMobileListList;
@property(assign) BOOL hasUpdateMobileListSize;
@property(assign) BOOL hasMd5;
@property(assign) BOOL hasOpType;
@property(assign) BOOL hasBaseRequest;
@property(assign) int updateEmailListSize;
@property(assign) int updateMobileListSize;
@property(retain) NSString* md5;
@property(assign) unsigned opType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addUpdateEmailList:(id)list;
-(id)addUpdateEmailListFromArray:(id)array;
-(id)SetUpdateEmailListSize:(int)size;
-(id)addUpdateMobileList:(id)list;
-(id)addUpdateMobileListFromArray:(id)array;
-(id)SetUpdateMobileListSize:(int)size;
-(id)SetMd5:(id)a5;
-(id)SetOpType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)updateEmailListList;
-(id)updateMobileListList;
-(id)init;
-(void)dealloc;
@end

@interface FBFriend : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasName : 1;
	unsigned hasImgKey : 1;
	unsigned long long id;
	NSString* name;
	unsigned imgKey;
}
@property(assign) BOOL hasImgKey;
@property(assign) BOOL hasName;
@property(assign) BOOL hasId;
@property(assign) unsigned imgKey;
@property(retain) NSString* name;
@property(assign) unsigned long long id;
+(id)parseFromData:(id)data;
-(id)SetImgKey:(unsigned)key;
-(id)SetName:(id)name;
-(id)SetId:(unsigned long long)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface MFriend : PBGeneratedMessage {
	unsigned hasSex : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasMyBrandList : 1;
	unsigned hasCountry : 1;
	unsigned hasAlbumBgimgId : 1;
	unsigned hasAlias : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasMobileMd5 : 1;
	unsigned hasNickname : 1;
	unsigned hasUsername : 1;
	unsigned hasFbinfo : 1;
	unsigned hasSnsUserInfo : 1;
	unsigned hasCustomizedInfo : 1;
	unsigned hasPersonalCard : 1;
	unsigned hasAlbumFlag : 1;
	unsigned hasAlbumStyle : 1;
	int sex;
	NSString* smallHeadImgUrl;
	NSString* bigHeadImgUrl;
	NSString* myBrandList;
	NSString* country;
	NSString* albumBgimgId;
	NSString* alias;
	NSString* signature;
	NSString* city;
	NSString* province;
	NSString* mobileMd5;
	NSString* nickname;
	NSString* username;
	FBFriend* fbinfo;
	SnsUserInfo* snsUserInfo;
	CustomizedInfo* customizedInfo;
	unsigned personalCard;
	unsigned albumFlag;
	unsigned albumStyle;
}
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasCustomizedInfo;
@property(assign) BOOL hasMyBrandList;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasSnsUserInfo;
@property(assign) BOOL hasAlbumBgimgId;
@property(assign) BOOL hasAlbumStyle;
@property(assign) BOOL hasAlbumFlag;
@property(assign) BOOL hasFbinfo;
@property(assign) BOOL hasAlias;
@property(assign) BOOL hasPersonalCard;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasMobileMd5;
@property(assign) BOOL hasNickname;
@property(assign) BOOL hasUsername;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) CustomizedInfo* customizedInfo;
@property(retain) NSString* myBrandList;
@property(retain) NSString* country;
@property(retain) SnsUserInfo* snsUserInfo;
@property(retain) NSString* albumBgimgId;
@property(assign) unsigned albumStyle;
@property(assign) unsigned albumFlag;
@property(retain) FBFriend* fbinfo;
@property(retain) NSString* alias;
@property(assign) unsigned personalCard;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(assign) int sex;
@property(retain) NSString* mobileMd5;
@property(retain) NSString* nickname;
@property(retain) NSString* username;
+(id)parseFromData:(id)data;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetCustomizedInfo:(id)info;
-(id)SetMyBrandList:(id)list;
-(id)SetCountry:(id)country;
-(id)SetSnsUserInfo:(id)info;
-(id)SetAlbumBgimgId:(id)anId;
-(id)SetAlbumStyle:(unsigned)style;
-(id)SetAlbumFlag:(unsigned)flag;
-(id)SetFbinfo:(id)fbinfo;
-(id)SetAlias:(id)alias;
-(id)SetPersonalCard:(unsigned)card;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetSex:(int)sex;
-(id)SetMobileMd5:(id)a5;
-(id)SetNickname:(id)nickname;
-(id)SetUsername:(id)username;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(id)description;
@end

@interface GetMFriendResponse : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasMd5 : 1;
	unsigned hasBaseResponse : 1;
	int count;
	NSString* md5;
	BaseResponse* baseResponse;
	NSMutableArray* mutableFriendListList;
}
@property(assign) BOOL hasMd5;
@property(retain) NSMutableArray* mutableFriendListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* md5;
@property(assign) int count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetMd5:(id)a5;
-(id)addFriendList:(id)list;
-(id)addFriendListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)friendListList;
-(id)init;
-(void)dealloc;
@end

@interface SendFeedbackRequest : PBGeneratedMessage {
	unsigned hasMachineType : 1;
	unsigned hasContent : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasReportType : 1;
	NSString* machineType;
	NSString* content;
	BaseRequest* baseRequest;
	unsigned reportType;
}
@property(assign) BOOL hasReportType;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasMachineType;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned reportType;
@property(retain) NSString* content;
@property(retain) NSString* machineType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReportType:(unsigned)type;
-(id)SetContent:(id)content;
-(id)SetMachineType:(id)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SendFeedbackResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadHDHeadImgRequest : PBGeneratedMessage {
	unsigned hasImgHash : 1;
	unsigned hasUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasHeadImgType : 1;
	NSString* imgHash;
	NSString* userName;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned totalLen;
	unsigned startPos;
	unsigned headImgType;
}
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasImgHash;
@property(assign) BOOL hasData;
@property(assign) BOOL hasHeadImgType;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* userName;
@property(retain) NSString* imgHash;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned headImgType;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)SetImgHash:(id)hash;
-(id)SetData:(id)data;
-(id)SetHeadImgType:(unsigned)type;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadHDHeadImgResponse : PBGeneratedMessage {
	unsigned hasFinalImgMd5Sum : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	NSString* finalImgMd5Sum;
	NSString* bigHeadImgUrl;
	NSString* smallHeadImgUrl;
	BaseResponse* baseResponse;
	unsigned totalLen;
	unsigned startPos;
}
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasFinalImgMd5Sum;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) NSString* finalImgMd5Sum;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetFinalImgMd5Sum:(id)sum;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetHDHeadImgRequest : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasImgFormat : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasImgWidth : 1;
	unsigned hasImgHeight : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasHeadImgType : 1;
	NSString* userName;
	NSString* imgFormat;
	BaseRequest* baseRequest;
	unsigned imgWidth;
	unsigned imgHeight;
	unsigned totalLen;
	unsigned startPos;
	unsigned headImgType;
}
@property(assign) BOOL hasHeadImgType;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasImgFormat;
@property(assign) BOOL hasImgHeight;
@property(assign) BOOL hasImgWidth;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned headImgType;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) NSString* imgFormat;
@property(assign) unsigned imgHeight;
@property(assign) unsigned imgWidth;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetHeadImgType:(unsigned)type;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetImgFormat:(id)format;
-(id)SetImgHeight:(unsigned)height;
-(id)SetImgWidth:(unsigned)width;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetHDHeadImgResponse : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasData : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	NSString* userName;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* data;
	unsigned totalLen;
	unsigned startPos;
}
@property(assign) BOOL hasData;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) NSString* userName;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetData:(id)data;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetUserName:(id)name;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface Package : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasVersion : 1;
	unsigned hasName : 1;
	unsigned hasPackName : 1;
	unsigned hasThumb : 1;
	unsigned hasExt : 1;
	unsigned hasSize : 1;
	int id;
	int version;
	NSString* name;
	NSString* packName;
	SKBuiltinBuffer_t* thumb;
	SKBuiltinBuffer_t* ext;
	unsigned size;
}
@property(assign) BOOL hasExt;
@property(assign) BOOL hasPackName;
@property(assign) BOOL hasThumb;
@property(assign) BOOL hasSize;
@property(assign) BOOL hasName;
@property(assign) BOOL hasVersion;
@property(assign) BOOL hasId;
@property(retain) SKBuiltinBuffer_t* ext;
@property(retain) NSString* packName;
@property(retain) SKBuiltinBuffer_t* thumb;
@property(assign) unsigned size;
@property(retain) NSString* name;
@property(assign) int version;
@property(assign) int id;
+(id)parseFromData:(id)data;
-(id)SetExt:(id)ext;
-(id)SetPackName:(id)name;
-(id)SetThumb:(id)thumb;
-(id)SetSize:(unsigned)size;
-(id)SetName:(id)name;
-(id)SetVersion:(int)version;
-(id)SetId:(int)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetPackageListRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	unsigned hasType : 1;
	BaseRequest* baseRequest;
	unsigned count;
	unsigned type;
	NSMutableArray* mutableListList;
}
@property(assign) BOOL hasType;
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned type;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface GetPackageListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	unsigned hasContinueFlag : 1;
	unsigned hasSvrCount : 1;
	unsigned hasType : 1;
	BaseResponse* baseResponse;
	unsigned count;
	unsigned continueFlag;
	unsigned svrCount;
	unsigned type;
	NSMutableArray* mutableListList;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasSvrCount;
@property(assign) BOOL hasContinueFlag;
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned type;
@property(assign) unsigned svrCount;
@property(assign) unsigned continueFlag;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetSvrCount:(unsigned)count;
-(id)SetContinueFlag:(unsigned)flag;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface DownLoadPackageRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasPackage : 1;
	unsigned hasOffset : 1;
	unsigned hasLen : 1;
	unsigned hasType : 1;
	BaseRequest* baseRequest;
	Package* package;
	unsigned offset;
	unsigned len;
	unsigned type;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasLen;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasPackage;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned type;
@property(assign) unsigned len;
@property(assign) unsigned offset;
@property(retain) Package* package;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetLen:(unsigned)len;
-(id)SetOffset:(unsigned)offset;
-(id)SetPackage:(id)package;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DownLoadPackageResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasPackageBuf : 1;
	unsigned hasType : 1;
	unsigned hasTotalSize : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* packageBuf;
	unsigned type;
	unsigned totalSize;
}
@property(assign) BOOL hasTotalSize;
@property(assign) BOOL hasType;
@property(assign) BOOL hasPackageBuf;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned totalSize;
@property(assign) unsigned type;
@property(retain) SKBuiltinBuffer_t* packageBuf;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetTotalSize:(unsigned)size;
-(id)SetType:(unsigned)type;
-(id)SetPackageBuf:(id)buf;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ExposeRequest : PBGeneratedMessage {
	unsigned hasSnsId : 1;
	unsigned hasUserName : 1;
	unsigned hasAlbumPhotoId : 1;
	unsigned hasExposeContent : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasScene : 1;
	unsigned hasType : 1;
	unsigned hasAlbumType : 1;
	unsigned long long snsId;
	NSString* userName;
	NSString* albumPhotoId;
	NSString* exposeContent;
	BaseRequest* baseRequest;
	unsigned scene;
	unsigned type;
	unsigned albumType;
}
@property(assign) BOOL hasExposeContent;
@property(assign) BOOL hasSnsId;
@property(assign) BOOL hasAlbumType;
@property(assign) BOOL hasAlbumPhotoId;
@property(assign) BOOL hasType;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* exposeContent;
@property(assign) unsigned long long snsId;
@property(assign) unsigned albumType;
@property(retain) NSString* albumPhotoId;
@property(assign) unsigned type;
@property(assign) unsigned scene;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetExposeContent:(id)content;
-(id)SetSnsId:(unsigned long long)anId;
-(id)SetAlbumType:(unsigned)type;
-(id)SetAlbumPhotoId:(id)anId;
-(id)SetType:(unsigned)type;
-(id)SetScene:(unsigned)scene;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ExposeResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ExposeItem : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableUinListList;
	int uinListMemoizedSerializedSize;
	NSMutableArray* mutableTimeListList;
	int timeListMemoizedSerializedSize;
	NSMutableArray* mutableCountListList;
	int countListMemoizedSerializedSize;
}
@property(retain) NSMutableArray* mutableCountListList;
@property(retain) NSMutableArray* mutableTimeListList;
@property(retain) NSMutableArray* mutableUinListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addCountListFromArray:(id)array;
-(id)addCountList:(unsigned)list;
-(id)addTimeListFromArray:(id)array;
-(id)addTimeList:(unsigned)list;
-(id)addUinListFromArray:(id)array;
-(id)addUinList:(unsigned)list;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)countListList;
-(id)timeListList;
-(id)uinListList;
-(id)init;
-(void)dealloc;
@end

@interface VUserResponseItem : PBGeneratedMessage {
	unsigned hasDesc : 1;
	unsigned hasIcon : 1;
	unsigned hasHdicon : 1;
	unsigned hasId : 1;
	NSString* desc;
	SKBuiltinBuffer_t* icon;
	SKBuiltinBuffer_t* hdicon;
	unsigned id;
}
@property(assign) BOOL hasHdicon;
@property(assign) BOOL hasIcon;
@property(assign) BOOL hasDesc;
@property(assign) BOOL hasId;
@property(retain) SKBuiltinBuffer_t* hdicon;
@property(retain) SKBuiltinBuffer_t* icon;
@property(retain) NSString* desc;
@property(assign) unsigned id;
+(id)parseFromData:(id)data;
-(id)SetHdicon:(id)hdicon;
-(id)SetIcon:(id)icon;
-(id)SetDesc:(id)desc;
-(id)SetId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetVUserInfoRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasVersion : 1;
	BaseRequest* baseRequest;
	unsigned version;
}
@property(assign) BOOL hasVersion;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned version;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetVersion:(unsigned)version;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetVUserInfoResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasVersion : 1;
	unsigned hasVuserCount : 1;
	BaseResponse* baseResponse;
	unsigned version;
	unsigned vuserCount;
	NSMutableArray* mutableVuserListList;
}
@property(retain) NSMutableArray* mutableVuserListList;
@property(assign) BOOL hasVuserCount;
@property(assign) BOOL hasVersion;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned vuserCount;
@property(assign) unsigned version;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addVuserList:(id)list;
-(id)addVuserListFromArray:(id)array;
-(id)SetVuserCount:(unsigned)count;
-(id)SetVersion:(unsigned)version;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)vuserListList;
-(id)init;
-(void)dealloc;
@end

@interface GmailOperRequest : PBGeneratedMessage {
	unsigned hasGmailAcct : 1;
	unsigned hasGmailPwd : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpType : 1;
	NSString* gmailAcct;
	NSString* gmailPwd;
	BaseRequest* baseRequest;
	unsigned opType;
}
@property(assign) BOOL hasGmailPwd;
@property(assign) BOOL hasGmailAcct;
@property(assign) BOOL hasOpType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* gmailPwd;
@property(retain) NSString* gmailAcct;
@property(assign) unsigned opType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetGmailPwd:(id)pwd;
-(id)SetGmailAcct:(id)acct;
-(id)SetOpType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GmailOperResponse : PBGeneratedMessage {
	unsigned hasRetCode : 1;
	unsigned retCode;
}
@property(assign) BOOL hasRetCode;
@property(assign) unsigned retCode;
+(id)parseFromData:(id)data;
-(id)SetRetCode:(unsigned)code;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface MailComposeSendRequest : PBGeneratedMessage {
	unsigned hasReplyType : 1;
	unsigned hasMailAccount : 1;
	unsigned hasOldMailId : 1;
	unsigned hasSubject : 1;
	unsigned hasRcptTo : 1;
	unsigned hasCc : 1;
	unsigned hasBcc : 1;
	unsigned hasFrom : 1;
	unsigned hasMailContent : 1;
	unsigned hasBaseRequest : 1;
	int replyType;
	NSString* mailAccount;
	NSString* oldMailId;
	NSString* subject;
	NSString* rcptTo;
	NSString* cc;
	NSString* bcc;
	NSString* from;
	NSString* mailContent;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasReplyType;
@property(assign) BOOL hasMailContent;
@property(assign) BOOL hasFrom;
@property(assign) BOOL hasBcc;
@property(assign) BOOL hasCc;
@property(assign) BOOL hasRcptTo;
@property(assign) BOOL hasSubject;
@property(assign) BOOL hasOldMailId;
@property(assign) BOOL hasMailAccount;
@property(assign) BOOL hasBaseRequest;
@property(assign) int replyType;
@property(retain) NSString* mailContent;
@property(retain) NSString* from;
@property(retain) NSString* bcc;
@property(retain) NSString* cc;
@property(retain) NSString* rcptTo;
@property(retain) NSString* subject;
@property(retain) NSString* oldMailId;
@property(retain) NSString* mailAccount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReplyType:(int)type;
-(id)SetMailContent:(id)content;
-(id)SetFrom:(id)from;
-(id)SetBcc:(id)bcc;
-(id)SetCc:(id)cc;
-(id)SetRcptTo:(id)to;
-(id)SetSubject:(id)subject;
-(id)SetOldMailId:(id)anId;
-(id)SetMailAccount:(id)account;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface MailComposeSendResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GeneralSetRequest : PBGeneratedMessage {
	unsigned hasSetType : 1;
	unsigned hasSetValue : 1;
	unsigned hasBaseRequest : 1;
	int setType;
	NSString* setValue;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasSetValue;
@property(assign) BOOL hasSetType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* setValue;
@property(assign) int setType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSetValue:(id)value;
-(id)SetSetType:(int)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GeneralSetResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetMailOAuthUrlRequest : PBGeneratedMessage {
	unsigned hasMailAccount : 1;
	unsigned hasBaseRequest : 1;
	NSString* mailAccount;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasMailAccount;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* mailAccount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetMailAccount:(id)account;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetMailOAuthUrlResponse : PBGeneratedMessage {
	unsigned hasOauthUrl : 1;
	unsigned hasBaseResponse : 1;
	NSString* oauthUrl;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasOauthUrl;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* oauthUrl;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetOauthUrl:(id)url;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetContactRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasUserCount : 1;
	BaseRequest* baseRequest;
	unsigned userCount;
	NSMutableArray* mutableUserNameListList;
}
@property(retain) NSMutableArray* mutableUserNameListList;
@property(assign) BOOL hasUserCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned userCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addUserNameList:(id)list;
-(id)addUserNameListFromArray:(id)array;
-(id)SetUserCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)userNameListList;
-(id)init;
-(void)dealloc;
@end

@interface GetContactResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasContactCount : 1;
	BaseResponse* baseResponse;
	unsigned contactCount;
	NSMutableArray* mutableRetList;
	int retMemoizedSerializedSize;
	NSMutableArray* mutableContactListList;
}
@property(retain) NSMutableArray* mutableRetList;
@property(retain) NSMutableArray* mutableContactListList;
@property(assign) BOOL hasContactCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned contactCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addRetFromArray:(id)array;
-(id)addRet:(int)ret;
-(id)addContactList:(id)list;
-(id)addContactListFromArray:(id)array;
-(id)SetContactCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)retList;
-(id)contactListList;
-(id)init;
-(void)dealloc;
@end

@interface BizRegRequest : PBGeneratedMessage {
	unsigned hasPwd : 1;
	unsigned hasPwd2 : 1;
	unsigned hasImgSid : 1;
	unsigned hasImgCode : 1;
	unsigned hasUserName : 1;
	unsigned hasNickName : 1;
	unsigned hasQquin : 1;
	NSString* pwd;
	NSString* pwd2;
	NSString* imgSid;
	NSString* imgCode;
	NSString* userName;
	NSString* nickName;
	unsigned qquin;
}
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasImgCode;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasPwd2;
@property(assign) BOOL hasPwd;
@property(assign) BOOL hasQquin;
@property(retain) NSString* nickName;
@property(retain) NSString* userName;
@property(retain) NSString* imgCode;
@property(retain) NSString* imgSid;
@property(retain) NSString* pwd2;
@property(retain) NSString* pwd;
@property(assign) unsigned qquin;
+(id)parseFromData:(id)data;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)SetImgCode:(id)code;
-(id)SetImgSid:(id)sid;
-(id)SetPwd2:(id)a2;
-(id)SetPwd:(id)pwd;
-(id)SetQquin:(unsigned)qquin;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BizRegResponse : PBGeneratedMessage {
	unsigned hasImgSid : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasImgBuf : 1;
	NSString* imgSid;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* imgBuf;
}
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(retain) NSString* imgSid;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetImgBuf:(id)buf;
-(id)SetImgSid:(id)sid;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BizAuthRequest : PBGeneratedMessage {
	unsigned hasPwd : 1;
	unsigned hasPwd2 : 1;
	unsigned hasImgSid : 1;
	unsigned hasImgCode : 1;
	unsigned hasQquin : 1;
	NSString* pwd;
	NSString* pwd2;
	NSString* imgSid;
	NSString* imgCode;
	unsigned qquin;
}
@property(assign) BOOL hasImgCode;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasPwd2;
@property(assign) BOOL hasPwd;
@property(assign) BOOL hasQquin;
@property(retain) NSString* imgCode;
@property(retain) NSString* imgSid;
@property(retain) NSString* pwd2;
@property(retain) NSString* pwd;
@property(assign) unsigned qquin;
+(id)parseFromData:(id)data;
-(id)SetImgCode:(id)code;
-(id)SetImgSid:(id)sid;
-(id)SetPwd2:(id)a2;
-(id)SetPwd:(id)pwd;
-(id)SetQquin:(unsigned)qquin;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BizAuthResponse : PBGeneratedMessage {
	unsigned hasImgSid : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasImgBuf : 1;
	NSString* imgSid;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* imgBuf;
}
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(retain) NSString* imgSid;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetImgBuf:(id)buf;
-(id)SetImgSid:(id)sid;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface MassSendRequest : PBGeneratedMessage {
	unsigned hasToList : 1;
	unsigned hasToListMd5 : 1;
	unsigned hasClientId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasDataBuffer : 1;
	unsigned hasThumbData : 1;
	unsigned hasCompressType : 1;
	unsigned hasIsSendAgain : 1;
	unsigned hasToListCount : 1;
	unsigned hasVideoSource : 1;
	unsigned hasCameraType : 1;
	unsigned hasThumbStartPos : 1;
	unsigned hasThumbTotalLen : 1;
	unsigned hasDataTotalLen : 1;
	unsigned hasDataStartPos : 1;
	unsigned hasMediaTime : 1;
	unsigned hasMsgType : 1;
	NSString* toList;
	NSString* toListMd5;
	NSString* clientId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* dataBuffer;
	SKBuiltinBuffer_t* thumbData;
	unsigned compressType;
	unsigned isSendAgain;
	unsigned toListCount;
	unsigned videoSource;
	unsigned cameraType;
	unsigned thumbStartPos;
	unsigned thumbTotalLen;
	unsigned dataTotalLen;
	unsigned dataStartPos;
	unsigned mediaTime;
	unsigned msgType;
}
@property(assign) BOOL hasCompressType;
@property(assign) BOOL hasIsSendAgain;
@property(assign) BOOL hasToListCount;
@property(assign) BOOL hasVideoSource;
@property(assign) BOOL hasCameraType;
@property(assign) BOOL hasThumbData;
@property(assign) BOOL hasThumbStartPos;
@property(assign) BOOL hasThumbTotalLen;
@property(assign) BOOL hasDataTotalLen;
@property(assign) BOOL hasDataStartPos;
@property(assign) BOOL hasDataBuffer;
@property(assign) BOOL hasMediaTime;
@property(assign) BOOL hasMsgType;
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasToListMd5;
@property(assign) BOOL hasToList;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned compressType;
@property(assign) unsigned isSendAgain;
@property(assign) unsigned toListCount;
@property(assign) unsigned videoSource;
@property(assign) unsigned cameraType;
@property(retain) SKBuiltinBuffer_t* thumbData;
@property(assign) unsigned thumbStartPos;
@property(assign) unsigned thumbTotalLen;
@property(assign) unsigned dataTotalLen;
@property(assign) unsigned dataStartPos;
@property(retain) SKBuiltinBuffer_t* dataBuffer;
@property(assign) unsigned mediaTime;
@property(assign) unsigned msgType;
@property(retain) NSString* clientId;
@property(retain) NSString* toListMd5;
@property(retain) NSString* toList;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetCompressType:(unsigned)type;
-(id)SetIsSendAgain:(unsigned)again;
-(id)SetToListCount:(unsigned)listCount;
-(id)SetVideoSource:(unsigned)source;
-(id)SetCameraType:(unsigned)type;
-(id)SetThumbData:(id)data;
-(id)SetThumbStartPos:(unsigned)pos;
-(id)SetThumbTotalLen:(unsigned)len;
-(id)SetDataTotalLen:(unsigned)len;
-(id)SetDataStartPos:(unsigned)pos;
-(id)SetDataBuffer:(id)buffer;
-(id)SetMediaTime:(unsigned)time;
-(id)SetMsgType:(unsigned)type;
-(id)SetClientId:(id)anId;
-(id)SetToListMd5:(id)listMd5;
-(id)SetToList:(id)list;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface MassSendResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasDataStartPos : 1;
	unsigned hasThumbStartPos : 1;
	unsigned hasMaxSupport : 1;
	BaseResponse* baseResponse;
	unsigned dataStartPos;
	unsigned thumbStartPos;
	unsigned maxSupport;
}
@property(assign) BOOL hasMaxSupport;
@property(assign) BOOL hasThumbStartPos;
@property(assign) BOOL hasDataStartPos;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned maxSupport;
@property(assign) unsigned thumbStartPos;
@property(assign) unsigned dataStartPos;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetMaxSupport:(unsigned)support;
-(id)SetThumbStartPos:(unsigned)pos;
-(id)SetDataStartPos:(unsigned)pos;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BufferId : PBGeneratedMessage {
	unsigned hasMasterBufId : 1;
	unsigned hasSlaveBufId : 1;
	unsigned long long masterBufId;
	unsigned long long slaveBufId;
}
@property(assign) BOOL hasSlaveBufId;
@property(assign) BOOL hasMasterBufId;
@property(assign) unsigned long long slaveBufId;
@property(assign) unsigned long long masterBufId;
+(id)parseFromData:(id)data;
-(id)SetSlaveBufId:(unsigned long long)anId;
-(id)SetMasterBufId:(unsigned long long)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadAppAttachRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasClientAppDataId : 1;
	unsigned hasUserName : 1;
	unsigned hasMd5 : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasSdkVersion : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasDataLen : 1;
	unsigned hasType : 1;
	NSString* appId;
	NSString* clientAppDataId;
	NSString* userName;
	NSString* md5;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned sdkVersion;
	unsigned totalLen;
	unsigned startPos;
	unsigned dataLen;
	unsigned type;
}
@property(assign) BOOL hasMd5;
@property(assign) BOOL hasType;
@property(assign) BOOL hasData;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasClientAppDataId;
@property(assign) BOOL hasSdkVersion;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* md5;
@property(assign) unsigned type;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned dataLen;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) NSString* userName;
@property(retain) NSString* clientAppDataId;
@property(assign) unsigned sdkVersion;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetMd5:(id)a5;
-(id)SetType:(unsigned)type;
-(id)SetData:(id)data;
-(id)SetDataLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetUserName:(id)name;
-(id)SetClientAppDataId:(id)anId;
-(id)SetSdkVersion:(unsigned)version;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadAppAttachResponse : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasMediaId : 1;
	unsigned hasClientAppDataId : 1;
	unsigned hasUserName : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasDataLen : 1;
	unsigned hasCreateTime : 1;
	NSString* appId;
	NSString* mediaId;
	NSString* clientAppDataId;
	NSString* userName;
	BaseResponse* baseResponse;
	unsigned totalLen;
	unsigned startPos;
	unsigned dataLen;
	unsigned createTime;
}
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasClientAppDataId;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned createTime;
@property(assign) unsigned dataLen;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) NSString* userName;
@property(retain) NSString* clientAppDataId;
@property(retain) NSString* mediaId;
@property(retain) NSString* appId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCreateTime:(unsigned)time;
-(id)SetDataLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetUserName:(id)name;
-(id)SetClientAppDataId:(id)anId;
-(id)SetMediaId:(id)anId;
-(id)SetAppId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ImportFriendsRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	unsigned hasSource : 1;
	BaseRequest* baseRequest;
	unsigned opCode;
	unsigned source;
}
@property(assign) BOOL hasSource;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned source;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSource:(unsigned)source;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ImportFriendsResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasImportedCount : 1;
	BaseResponse* baseResponse;
	unsigned importedCount;
}
@property(assign) BOOL hasImportedCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned importedCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetImportedCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BizBottleInfo : PBGeneratedMessage {
	unsigned hasBottleId : 1;
	unsigned hasFromUserName : 1;
	unsigned hasMsgType : 1;
	NSString* bottleId;
	NSString* fromUserName;
	unsigned msgType;
}
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasMsgType;
@property(assign) BOOL hasBottleId;
@property(retain) NSString* fromUserName;
@property(assign) unsigned msgType;
@property(retain) NSString* bottleId;
+(id)parseFromData:(id)data;
-(id)SetFromUserName:(id)userName;
-(id)SetMsgType:(unsigned)type;
-(id)SetBottleId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadMediaRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasClientMediaId : 1;
	unsigned hasDataMd5 : 1;
	unsigned hasData : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasDataLen : 1;
	unsigned hasMediaType : 1;
	BaseRequest* baseRequest;
	SKBuiltinString_t* clientMediaId;
	SKBuiltinString_t* dataMd5;
	SKBuiltinBuffer_t* data;
	unsigned totalLen;
	unsigned startPos;
	unsigned dataLen;
	unsigned mediaType;
}
@property(assign) BOOL hasMediaType;
@property(assign) BOOL hasData;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasDataMd5;
@property(assign) BOOL hasClientMediaId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned mediaType;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned dataLen;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) SKBuiltinString_t* dataMd5;
@property(retain) SKBuiltinString_t* clientMediaId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetMediaType:(unsigned)type;
-(id)SetData:(id)data;
-(id)SetDataLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetDataMd5:(id)a5;
-(id)SetClientMediaId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadMediaResponse : PBGeneratedMessage {
	unsigned hasMediaId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasStartPos : 1;
	NSString* mediaId;
	BaseResponse* baseResponse;
	unsigned startPos;
}
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned startPos;
@property(retain) NSString* mediaId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetStartPos:(unsigned)pos;
-(id)SetMediaId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface HandleImgMsgRequest : PBGeneratedMessage {
	unsigned hasMediaId : 1;
	unsigned hasMsgSource : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasClientImgId : 1;
	unsigned hasFromUserName : 1;
	unsigned hasToUserName : 1;
	unsigned hasImgLen : 1;
	unsigned hasMsgType : 1;
	unsigned hasCompressType : 1;
	NSString* mediaId;
	NSString* msgSource;
	BaseRequest* baseRequest;
	SKBuiltinString_t* clientImgId;
	SKBuiltinString_t* fromUserName;
	SKBuiltinString_t* toUserName;
	unsigned imgLen;
	unsigned msgType;
	unsigned compressType;
}
@property(assign) BOOL hasCompressType;
@property(assign) BOOL hasMsgSource;
@property(assign) BOOL hasMsgType;
@property(assign) BOOL hasImgLen;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasClientImgId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned compressType;
@property(retain) NSString* msgSource;
@property(assign) unsigned msgType;
@property(assign) unsigned imgLen;
@property(retain) SKBuiltinString_t* toUserName;
@property(retain) SKBuiltinString_t* fromUserName;
@property(retain) NSString* mediaId;
@property(retain) SKBuiltinString_t* clientImgId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetCompressType:(unsigned)type;
-(id)SetMsgSource:(id)source;
-(id)SetMsgType:(unsigned)type;
-(id)SetImgLen:(unsigned)len;
-(id)SetToUserName:(id)userName;
-(id)SetFromUserName:(id)userName;
-(id)SetMediaId:(id)anId;
-(id)SetClientImgId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface HandleImgMsgResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasClientImgId : 1;
	unsigned hasFromUserName : 1;
	unsigned hasToUserName : 1;
	unsigned hasMsgId : 1;
	unsigned hasImgLen : 1;
	unsigned hasCreateTime : 1;
	BaseResponse* baseResponse;
	SKBuiltinString_t* clientImgId;
	SKBuiltinString_t* fromUserName;
	SKBuiltinString_t* toUserName;
	unsigned msgId;
	unsigned imgLen;
	unsigned createTime;
}
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasImgLen;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasClientImgId;
@property(assign) BOOL hasMsgId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned createTime;
@property(assign) unsigned imgLen;
@property(retain) SKBuiltinString_t* toUserName;
@property(retain) SKBuiltinString_t* fromUserName;
@property(retain) SKBuiltinString_t* clientImgId;
@property(assign) unsigned msgId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCreateTime:(unsigned)time;
-(id)SetImgLen:(unsigned)len;
-(id)SetToUserName:(id)userName;
-(id)SetFromUserName:(id)userName;
-(id)SetClientImgId:(id)anId;
-(id)SetMsgId:(unsigned)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface StatReportItem : PBGeneratedMessage {
	unsigned hasEndTimeMs : 1;
	unsigned hasBeginTimeMs : 1;
	unsigned hasReserved3 : 1;
	unsigned hasReserved2 : 1;
	unsigned hasReserved1 : 1;
	unsigned hasErrCode : 1;
	unsigned hasIspname : 1;
	unsigned hasHost : 1;
	unsigned hasIsSocket : 1;
	unsigned hasSignalStrength : 1;
	unsigned hasIspcode : 1;
	unsigned hasRetryCount : 1;
	unsigned hasIpcnt : 1;
	unsigned hasClientIp : 1;
	unsigned hasNetworkCost : 1;
	unsigned hasDnsCount : 1;
	unsigned hasDnsCost : 1;
	unsigned hasConnCount : 1;
	unsigned hasConnCost : 1;
	unsigned hasActionId : 1;
	unsigned hasTime : 1;
	unsigned hasIp : 1;
	unsigned hasPort : 1;
	unsigned hasIptype : 1;
	unsigned hasNetType : 1;
	unsigned hasIfSuc : 1;
	unsigned hasFunId : 1;
	unsigned hasCost : 1;
	unsigned hasAliveTime : 1;
	unsigned hasUploadSize : 1;
	unsigned hasDownloadSize : 1;
	unsigned hasCount : 1;
	unsigned hasIsWifiFirstConnect : 1;
	unsigned hasNotifySyncCount : 1;
	unsigned hasPushSyncCount : 1;
	unsigned hasSyncCount : 1;
	unsigned hasIsDns : 1;
	unsigned long long endTimeMs;
	unsigned long long beginTimeMs;
	unsigned long long reserved3;
	unsigned long long reserved2;
	unsigned long long reserved1;
	int errCode;
	NSString* ispname;
	NSString* host;
	unsigned isSocket;
	unsigned signalStrength;
	unsigned ispcode;
	unsigned retryCount;
	unsigned ipcnt;
	unsigned clientIp;
	unsigned networkCost;
	unsigned dnsCount;
	unsigned dnsCost;
	unsigned connCount;
	unsigned connCost;
	unsigned actionId;
	unsigned time;
	unsigned ip;
	unsigned port;
	unsigned iptype;
	unsigned netType;
	unsigned ifSuc;
	unsigned funId;
	unsigned cost;
	unsigned aliveTime;
	unsigned uploadSize;
	unsigned downloadSize;
	unsigned count;
	unsigned isWifiFirstConnect;
	unsigned notifySyncCount;
	unsigned pushSyncCount;
	unsigned syncCount;
	unsigned isDns;
}
@property(assign) BOOL hasConnCost;
@property(assign) BOOL hasConnCount;
@property(assign) BOOL hasDnsCost;
@property(assign) BOOL hasDnsCount;
@property(assign) BOOL hasNetworkCost;
@property(assign) BOOL hasClientIp;
@property(assign) BOOL hasReserved3;
@property(assign) BOOL hasReserved2;
@property(assign) BOOL hasReserved1;
@property(assign) BOOL hasIpcnt;
@property(assign) BOOL hasHost;
@property(assign) BOOL hasRetryCount;
@property(assign) BOOL hasIspname;
@property(assign) BOOL hasIspcode;
@property(assign) BOOL hasSignalStrength;
@property(assign) BOOL hasErrCode;
@property(assign) BOOL hasIsSocket;
@property(assign) BOOL hasIsDns;
@property(assign) BOOL hasSyncCount;
@property(assign) BOOL hasPushSyncCount;
@property(assign) BOOL hasNotifySyncCount;
@property(assign) BOOL hasEndTimeMs;
@property(assign) BOOL hasBeginTimeMs;
@property(assign) BOOL hasIsWifiFirstConnect;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasDownloadSize;
@property(assign) BOOL hasUploadSize;
@property(assign) BOOL hasAliveTime;
@property(assign) BOOL hasCost;
@property(assign) BOOL hasFunId;
@property(assign) BOOL hasIfSuc;
@property(assign) BOOL hasNetType;
@property(assign) BOOL hasIptype;
@property(assign) BOOL hasPort;
@property(assign) BOOL hasIp;
@property(assign) BOOL hasTime;
@property(assign) BOOL hasActionId;
@property(assign) unsigned connCost;
@property(assign) unsigned connCount;
@property(assign) unsigned dnsCost;
@property(assign) unsigned dnsCount;
@property(assign) unsigned networkCost;
@property(assign) unsigned clientIp;
@property(assign) unsigned long long reserved3;
@property(assign) unsigned long long reserved2;
@property(assign) unsigned long long reserved1;
@property(assign) unsigned ipcnt;
@property(retain) NSString* host;
@property(assign) unsigned retryCount;
@property(retain) NSString* ispname;
@property(assign) unsigned ispcode;
@property(assign) unsigned signalStrength;
@property(assign) int errCode;
@property(assign) unsigned isSocket;
@property(assign) unsigned isDns;
@property(assign) unsigned syncCount;
@property(assign) unsigned pushSyncCount;
@property(assign) unsigned notifySyncCount;
@property(assign) unsigned long long endTimeMs;
@property(assign) unsigned long long beginTimeMs;
@property(assign) unsigned isWifiFirstConnect;
@property(assign) unsigned count;
@property(assign) unsigned downloadSize;
@property(assign) unsigned uploadSize;
@property(assign) unsigned aliveTime;
@property(assign) unsigned cost;
@property(assign) unsigned funId;
@property(assign) unsigned ifSuc;
@property(assign) unsigned netType;
@property(assign) unsigned iptype;
@property(assign) unsigned port;
@property(assign) unsigned ip;
@property(assign) unsigned time;
@property(assign) unsigned actionId;
+(id)parseFromData:(id)data;
-(id)SetConnCost:(unsigned)cost;
-(id)SetConnCount:(unsigned)count;
-(id)SetDnsCost:(unsigned)cost;
-(id)SetDnsCount:(unsigned)count;
-(id)SetNetworkCost:(unsigned)cost;
-(id)SetClientIp:(unsigned)ip;
-(id)SetReserved3:(unsigned long long)a3;
-(id)SetReserved2:(unsigned long long)a2;
-(id)SetReserved1:(unsigned long long)a1;
-(id)SetIpcnt:(unsigned)ipcnt;
-(id)SetHost:(id)host;
-(id)SetRetryCount:(unsigned)count;
-(id)SetIspname:(id)ispname;
-(id)SetIspcode:(unsigned)ispcode;
-(id)SetSignalStrength:(unsigned)strength;
-(id)SetErrCode:(int)code;
-(id)SetIsSocket:(unsigned)socket;
-(id)SetIsDns:(unsigned)dns;
-(id)SetSyncCount:(unsigned)count;
-(id)SetPushSyncCount:(unsigned)count;
-(id)SetNotifySyncCount:(unsigned)count;
-(id)SetEndTimeMs:(unsigned long long)ms;
-(id)SetBeginTimeMs:(unsigned long long)ms;
-(id)SetIsWifiFirstConnect:(unsigned)connect;
-(id)SetCount:(unsigned)count;
-(id)SetDownloadSize:(unsigned)size;
-(id)SetUploadSize:(unsigned)size;
-(id)SetAliveTime:(unsigned)time;
-(id)SetCost:(unsigned)cost;
-(id)SetFunId:(unsigned)anId;
-(id)SetIfSuc:(unsigned)suc;
-(id)SetNetType:(unsigned)type;
-(id)SetIptype:(unsigned)iptype;
-(id)SetPort:(unsigned)port;
-(id)SetIp:(unsigned)ip;
-(id)SetTime:(unsigned)time;
-(id)SetActionId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(id)toString;
-(id)toString;
-(id)toString;
@end

@interface StatReportInfo : PBGeneratedMessage {
	unsigned hasCount : 1;
	int count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) int count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface StatReportExtInfo : PBGeneratedMessage {
	unsigned hasBeginTime : 1;
	unsigned hasEndTime : 1;
	unsigned hasClientReportTime : 1;
	unsigned hasTotalUploadSize : 1;
	unsigned hasTotalDownloadSize : 1;
	unsigned hasSyncCount : 1;
	unsigned hasSyncFailCount : 1;
	unsigned hasNotifyCount : 1;
	unsigned hasCgicount : 1;
	unsigned hasCgifailCount : 1;
	unsigned hasPushSyncCount : 1;
	unsigned beginTime;
	unsigned endTime;
	unsigned clientReportTime;
	unsigned totalUploadSize;
	unsigned totalDownloadSize;
	unsigned syncCount;
	unsigned syncFailCount;
	unsigned notifyCount;
	unsigned cgicount;
	unsigned cgifailCount;
	unsigned pushSyncCount;
}
@property(assign) BOOL hasPushSyncCount;
@property(assign) BOOL hasCgifailCount;
@property(assign) BOOL hasCgicount;
@property(assign) BOOL hasNotifyCount;
@property(assign) BOOL hasSyncFailCount;
@property(assign) BOOL hasSyncCount;
@property(assign) BOOL hasTotalDownloadSize;
@property(assign) BOOL hasTotalUploadSize;
@property(assign) BOOL hasClientReportTime;
@property(assign) BOOL hasEndTime;
@property(assign) BOOL hasBeginTime;
@property(assign) unsigned pushSyncCount;
@property(assign) unsigned cgifailCount;
@property(assign) unsigned cgicount;
@property(assign) unsigned notifyCount;
@property(assign) unsigned syncFailCount;
@property(assign) unsigned syncCount;
@property(assign) unsigned totalDownloadSize;
@property(assign) unsigned totalUploadSize;
@property(assign) unsigned clientReportTime;
@property(assign) unsigned endTime;
@property(assign) unsigned beginTime;
+(id)parseFromData:(id)data;
-(id)SetPushSyncCount:(unsigned)count;
-(id)SetCgifailCount:(unsigned)count;
-(id)SetCgicount:(unsigned)cgicount;
-(id)SetNotifyCount:(unsigned)count;
-(id)SetSyncFailCount:(unsigned)count;
-(id)SetSyncCount:(unsigned)count;
-(id)SetTotalDownloadSize:(unsigned)size;
-(id)SetTotalUploadSize:(unsigned)size;
-(id)SetClientReportTime:(unsigned)time;
-(id)SetEndTime:(unsigned)time;
-(id)SetBeginTime:(unsigned)time;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface StatReportRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasInfo : 1;
	unsigned hasExtInfo : 1;
	BaseRequest* baseRequest;
	StatReportInfo* info;
	StatReportExtInfo* extInfo;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasInfo;
@property(assign) BOOL hasBaseRequest;
@property(retain) StatReportExtInfo* extInfo;
@property(retain) StatReportInfo* info;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetInfo:(id)info;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface StatReportResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasNextReportTime : 1;
	unsigned hasReportFlag : 1;
	BaseResponse* baseResponse;
	unsigned nextReportTime;
	unsigned reportFlag;
}
@property(assign) BOOL hasReportFlag;
@property(assign) BOOL hasNextReportTime;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned reportFlag;
@property(assign) unsigned nextReportTime;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetReportFlag:(unsigned)flag;
-(id)SetNextReportTime:(unsigned)time;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PropertySurveyItem : PBGeneratedMessage {
	unsigned hasDeviceModel : 1;
	unsigned hasOsType : 1;
	unsigned hasModule : 1;
	unsigned hasSubModule : 1;
	unsigned hasExpand : 1;
	unsigned hasAvgElapsedTime : 1;
	unsigned hasMaxElapsedTime : 1;
	unsigned hasMinElapsedTime : 1;
	unsigned hasUseModuleCount : 1;
	unsigned hasBeginTime : 1;
	unsigned hasEndTime : 1;
	NSString* deviceModel;
	NSString* osType;
	NSString* module;
	NSString* subModule;
	NSString* expand;
	unsigned avgElapsedTime;
	unsigned maxElapsedTime;
	unsigned minElapsedTime;
	unsigned useModuleCount;
	unsigned beginTime;
	unsigned endTime;
}
@property(assign) BOOL hasEndTime;
@property(assign) BOOL hasBeginTime;
@property(assign) BOOL hasExpand;
@property(assign) BOOL hasUseModuleCount;
@property(assign) BOOL hasMinElapsedTime;
@property(assign) BOOL hasMaxElapsedTime;
@property(assign) BOOL hasAvgElapsedTime;
@property(assign) BOOL hasSubModule;
@property(assign) BOOL hasModule;
@property(assign) BOOL hasOsType;
@property(assign) BOOL hasDeviceModel;
@property(assign) unsigned endTime;
@property(assign) unsigned beginTime;
@property(retain) NSString* expand;
@property(assign) unsigned useModuleCount;
@property(assign) unsigned minElapsedTime;
@property(assign) unsigned maxElapsedTime;
@property(assign) unsigned avgElapsedTime;
@property(retain) NSString* subModule;
@property(retain) NSString* module;
@property(retain) NSString* osType;
@property(retain) NSString* deviceModel;
+(id)parseFromData:(id)data;
-(id)SetEndTime:(unsigned)time;
-(id)SetBeginTime:(unsigned)time;
-(id)SetExpand:(id)expand;
-(id)SetUseModuleCount:(unsigned)count;
-(id)SetMinElapsedTime:(unsigned)time;
-(id)SetMaxElapsedTime:(unsigned)time;
-(id)SetAvgElapsedTime:(unsigned)time;
-(id)SetSubModule:(id)module;
-(id)SetModule:(id)module;
-(id)SetOsType:(id)type;
-(id)SetDeviceModel:(id)model;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PropertySurveyInfo : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface PropertySurveyRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasInfo : 1;
	BaseRequest* baseRequest;
	PropertySurveyInfo* info;
}
@property(assign) BOOL hasInfo;
@property(assign) BOOL hasBaseRequest;
@property(retain) PropertySurveyInfo* info;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetInfo:(id)info;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PropertySurveyResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasNextReportTime : 1;
	unsigned hasReportFlag : 1;
	BaseResponse* baseResponse;
	unsigned nextReportTime;
	unsigned reportFlag;
}
@property(assign) BOOL hasReportFlag;
@property(assign) BOOL hasNextReportTime;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned reportFlag;
@property(assign) unsigned nextReportTime;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetReportFlag:(unsigned)flag;
-(id)SetNextReportTime:(unsigned)time;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UnbindMobileByQQRequest : PBGeneratedMessage {
	unsigned hasPwd : 1;
	unsigned hasPwd2 : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasUserName : 1;
	unsigned hasImgSid : 1;
	unsigned hasImgCode : 1;
	unsigned hasImgEncryptKey : 1;
	unsigned hasKsid : 1;
	NSString* pwd;
	NSString* pwd2;
	BaseRequest* baseRequest;
	SKBuiltinString_t* userName;
	SKBuiltinString_t* imgSid;
	SKBuiltinString_t* imgCode;
	SKBuiltinString_t* imgEncryptKey;
	SKBuiltinBuffer_t* ksid;
}
@property(assign) BOOL hasKsid;
@property(assign) BOOL hasImgEncryptKey;
@property(assign) BOOL hasImgCode;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasPwd2;
@property(assign) BOOL hasPwd;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* ksid;
@property(retain) SKBuiltinString_t* imgEncryptKey;
@property(retain) SKBuiltinString_t* imgCode;
@property(retain) SKBuiltinString_t* imgSid;
@property(retain) NSString* pwd2;
@property(retain) NSString* pwd;
@property(retain) SKBuiltinString_t* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetKsid:(id)ksid;
-(id)SetImgEncryptKey:(id)key;
-(id)SetImgCode:(id)code;
-(id)SetImgSid:(id)sid;
-(id)SetPwd2:(id)a2;
-(id)SetPwd:(id)pwd;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UnbindMobileByQQResponse : PBGeneratedMessage {
	unsigned hasImgSid : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasImgBuf : 1;
	unsigned hasImgEncryptKey : 1;
	unsigned hasA2Key : 1;
	unsigned hasKsid : 1;
	NSString* imgSid;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* imgBuf;
	SKBuiltinString_t* imgEncryptKey;
	SKBuiltinBuffer_t* a2Key;
	SKBuiltinBuffer_t* ksid;
}
@property(assign) BOOL hasKsid;
@property(assign) BOOL hasA2Key;
@property(assign) BOOL hasImgEncryptKey;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* ksid;
@property(retain) SKBuiltinBuffer_t* a2Key;
@property(retain) SKBuiltinString_t* imgEncryptKey;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(retain) NSString* imgSid;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetKsid:(id)ksid;
-(id)SetA2Key:(id)key;
-(id)SetImgEncryptKey:(id)key;
-(id)SetImgBuf:(id)buf;
-(id)SetImgSid:(id)sid;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LogOutWebWxRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	BaseRequest* baseRequest;
	unsigned opCode;
}
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LogOutWebWxResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LogOutRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBaseRequest;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface LogOutResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModBrandSetting : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasBrandFlag : 1;
	NSString* userName;
	unsigned brandFlag;
}
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBrandFlag;
@property(retain) NSString* userName;
@property(assign) unsigned brandFlag;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)SetBrandFlag:(unsigned)flag;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsTag : PBGeneratedMessage {
	unsigned hasTagId : 1;
	unsigned hasTagName : 1;
	unsigned hasCount : 1;
	unsigned long long tagId;
	NSString* tagName;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasTagName;
@property(assign) BOOL hasTagId;
@property(assign) unsigned count;
@property(retain) NSString* tagName;
@property(assign) unsigned long long tagId;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetTagName:(id)name;
-(id)SetTagId:(unsigned long long)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface SnsTagOptionRequest : PBGeneratedMessage {
	unsigned hasTagId : 1;
	unsigned hasTagName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	unsigned long long tagId;
	NSString* tagName;
	BaseRequest* baseRequest;
	unsigned opCode;
}
@property(assign) BOOL hasTagName;
@property(assign) BOOL hasTagId;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* tagName;
@property(assign) unsigned long long tagId;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTagName:(id)name;
-(id)SetTagId:(unsigned long long)anId;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsTagOptionResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasSnsTag : 1;
	BaseResponse* baseResponse;
	SnsTag* snsTag;
}
@property(assign) BOOL hasSnsTag;
@property(assign) BOOL hasBaseResponse;
@property(retain) SnsTag* snsTag;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSnsTag:(id)tag;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsTagMemberOptionRequest : PBGeneratedMessage {
	unsigned hasTagId : 1;
	unsigned hasTagName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	unsigned hasCount : 1;
	unsigned long long tagId;
	NSString* tagName;
	BaseRequest* baseRequest;
	unsigned opCode;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasTagName;
@property(assign) BOOL hasTagId;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) NSString* tagName;
@property(assign) unsigned long long tagId;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetTagName:(id)name;
-(id)SetTagId:(unsigned long long)anId;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface SnsTagMemberOptionResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasSnsTag : 1;
	BaseResponse* baseResponse;
	SnsTag* snsTag;
}
@property(assign) BOOL hasSnsTag;
@property(assign) BOOL hasBaseResponse;
@property(retain) SnsTag* snsTag;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSnsTag:(id)tag;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsTagListRequest : PBGeneratedMessage {
	unsigned hasTagListMd5 : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	NSString* tagListMd5;
	BaseRequest* baseRequest;
	unsigned opCode;
}
@property(assign) BOOL hasTagListMd5;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* tagListMd5;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTagListMd5:(id)a5;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SnsTagListResponse : PBGeneratedMessage {
	unsigned hasTagListMd5 : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasOpCode : 1;
	unsigned hasCount : 1;
	NSString* tagListMd5;
	BaseResponse* baseResponse;
	unsigned opCode;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasTagListMd5;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) NSString* tagListMd5;
@property(assign) unsigned opCode;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetTagListMd5:(id)a5;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface SnsTagMemMutilSetRequest : PBGeneratedMessage {
	unsigned hasModUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	NSString* modUserName;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableTagIdListList;
}
@property(retain) NSMutableArray* mutableTagIdListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasModUserName;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) NSString* modUserName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addTagIdList:(id)list;
-(id)addTagIdListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetModUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)tagIdListList;
-(id)init;
-(void)dealloc;
@end

@interface SnsTagMemMutilSetResponse : PBGeneratedMessage {
	unsigned hasModUserName : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	NSString* modUserName;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableTagIdListList;
}
@property(retain) NSMutableArray* mutableTagIdListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasModUserName;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) NSString* modUserName;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addTagIdList:(id)list;
-(id)addTagIdListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetModUserName:(id)name;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)tagIdListList;
-(id)init;
-(void)dealloc;
@end

@interface GetProfileRequest : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasBaseRequest : 1;
	NSString* userName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetProfileResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasUserInfo : 1;
	unsigned hasUserInfoExt : 1;
	BaseResponse* baseResponse;
	ModUserInfo* userInfo;
	UserInfoExt* userInfoExt;
}
@property(assign) BOOL hasUserInfoExt;
@property(assign) BOOL hasUserInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) UserInfoExt* userInfoExt;
@property(retain) ModUserInfo* userInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetUserInfoExt:(id)ext;
-(id)SetUserInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface StatusNotifyRequest : PBGeneratedMessage {
	unsigned hasFromUserName : 1;
	unsigned hasToUserName : 1;
	unsigned hasClientMsgId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasCode : 1;
	NSString* fromUserName;
	NSString* toUserName;
	NSString* clientMsgId;
	BaseRequest* baseRequest;
	unsigned code;
}
@property(assign) BOOL hasClientMsgId;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasCode;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* clientMsgId;
@property(retain) NSString* toUserName;
@property(retain) NSString* fromUserName;
@property(assign) unsigned code;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetClientMsgId:(id)anId;
-(id)SetToUserName:(id)userName;
-(id)SetFromUserName:(id)userName;
-(id)SetCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface StatusNotifyResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasMsgId : 1;
	BaseResponse* baseResponse;
	unsigned msgId;
}
@property(assign) BOOL hasMsgId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned msgId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetMsgId:(unsigned)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface StrategyItem : PBGeneratedMessage {
	unsigned hasLogType : 1;
	unsigned hasEnalbe : 1;
	unsigned hasCycle : 1;
	unsigned logType;
	unsigned enalbe;
	unsigned cycle;
}
@property(assign) BOOL hasCycle;
@property(assign) BOOL hasEnalbe;
@property(assign) BOOL hasLogType;
@property(assign) unsigned cycle;
@property(assign) unsigned enalbe;
@property(assign) unsigned logType;
+(id)parseFromData:(id)data;
-(id)SetCycle:(unsigned)cycle;
-(id)SetEnalbe:(unsigned)enalbe;
-(id)SetLogType:(unsigned)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetReportStrategyReq : PBGeneratedMessage {
	unsigned hasLogid : 1;
	unsigned hasDeviceModel : 1;
	unsigned hasDeviceBrand : 1;
	unsigned hasOsName : 1;
	unsigned hasOsVersion : 1;
	unsigned hasLanguageVer : 1;
	unsigned hasBaseRequest : 1;
	int logid;
	NSString* deviceModel;
	NSString* deviceBrand;
	NSString* osName;
	NSString* osVersion;
	NSString* languageVer;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasLogid;
@property(assign) BOOL hasLanguageVer;
@property(assign) BOOL hasOsVersion;
@property(assign) BOOL hasOsName;
@property(assign) BOOL hasDeviceBrand;
@property(assign) BOOL hasDeviceModel;
@property(assign) BOOL hasBaseRequest;
@property(assign) int logid;
@property(retain) NSString* languageVer;
@property(retain) NSString* osVersion;
@property(retain) NSString* osName;
@property(retain) NSString* deviceBrand;
@property(retain) NSString* deviceModel;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetLogid:(int)logid;
-(id)SetLanguageVer:(id)ver;
-(id)SetOsVersion:(id)version;
-(id)SetOsName:(id)name;
-(id)SetDeviceBrand:(id)brand;
-(id)SetDeviceModel:(id)model;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetReportStrategyResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCnt : 1;
	BaseResponse* baseResponse;
	unsigned cnt;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCnt;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned cnt;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCnt:(unsigned)cnt;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface ClientPerfItem : PBGeneratedMessage {
	unsigned hasEventId : 1;
	unsigned hasAvgElapseTime : 1;
	unsigned hasMaxElapseTime : 1;
	unsigned hasMinElapseTime : 1;
	unsigned hasCnt : 1;
	unsigned hasStartTime : 1;
	unsigned hasEndTime : 1;
	unsigned eventId;
	unsigned avgElapseTime;
	unsigned maxElapseTime;
	unsigned minElapseTime;
	unsigned cnt;
	unsigned startTime;
	unsigned endTime;
}
@property(assign) BOOL hasEndTime;
@property(assign) BOOL hasStartTime;
@property(assign) BOOL hasCnt;
@property(assign) BOOL hasMinElapseTime;
@property(assign) BOOL hasMaxElapseTime;
@property(assign) BOOL hasAvgElapseTime;
@property(assign) BOOL hasEventId;
@property(assign) unsigned endTime;
@property(assign) unsigned startTime;
@property(assign) unsigned cnt;
@property(assign) unsigned minElapseTime;
@property(assign) unsigned maxElapseTime;
@property(assign) unsigned avgElapseTime;
@property(assign) unsigned eventId;
+(id)parseFromData:(id)data;
-(id)SetEndTime:(unsigned)time;
-(id)SetStartTime:(unsigned)time;
-(id)SetCnt:(unsigned)cnt;
-(id)SetMinElapseTime:(unsigned)time;
-(id)SetMaxElapseTime:(unsigned)time;
-(id)SetAvgElapseTime:(unsigned)time;
-(id)SetEventId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ClientPerfReportReq : PBGeneratedMessage {
	unsigned hasDeviceModel : 1;
	unsigned hasDeviceBrand : 1;
	unsigned hasOsName : 1;
	unsigned hasOsVersion : 1;
	unsigned hasLanguageVer : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasEventIdCnt : 1;
	NSString* deviceModel;
	NSString* deviceBrand;
	NSString* osName;
	NSString* osVersion;
	NSString* languageVer;
	BaseRequest* baseRequest;
	unsigned eventIdCnt;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasEventIdCnt;
@property(assign) BOOL hasLanguageVer;
@property(assign) BOOL hasOsVersion;
@property(assign) BOOL hasOsName;
@property(assign) BOOL hasDeviceBrand;
@property(assign) BOOL hasDeviceModel;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned eventIdCnt;
@property(retain) NSString* languageVer;
@property(retain) NSString* osVersion;
@property(retain) NSString* osName;
@property(retain) NSString* deviceBrand;
@property(retain) NSString* deviceModel;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetEventIdCnt:(unsigned)cnt;
-(id)SetLanguageVer:(id)ver;
-(id)SetOsVersion:(id)version;
-(id)SetOsName:(id)name;
-(id)SetDeviceBrand:(id)brand;
-(id)SetDeviceModel:(id)model;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface ClientPerfReportResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeTranImgReportRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBaseRequest;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeTranImgReportResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasBuffer : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* buffer;
}
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBuffer:(id)buffer;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeTranImgGetRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasBuffer : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* buffer;
}
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBuffer:(id)buffer;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeTranImgGetItem : PBGeneratedMessage {
	unsigned hasWebUrl : 1;
	unsigned hasThumbUrl : 1;
	unsigned hasImgUrl : 1;
	NSString* webUrl;
	NSString* thumbUrl;
	NSString* imgUrl;
}
@property(assign) BOOL hasImgUrl;
@property(assign) BOOL hasThumbUrl;
@property(assign) BOOL hasWebUrl;
@property(retain) NSString* imgUrl;
@property(retain) NSString* thumbUrl;
@property(retain) NSString* webUrl;
+(id)parseFromData:(id)data;
-(id)SetImgUrl:(id)url;
-(id)SetThumbUrl:(id)url;
-(id)SetWebUrl:(id)url;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeTranImgGetResponse : PBGeneratedMessage {
	unsigned hasPageUrl : 1;
	unsigned hasTitle : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBuffer : 1;
	unsigned hasCount : 1;
	NSString* pageUrl;
	NSString* title;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* buffer;
	unsigned count;
	NSMutableArray* mutableImgUrlListList;
}
@property(assign) BOOL hasTitle;
@property(assign) BOOL hasBuffer;
@property(retain) NSMutableArray* mutableImgUrlListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasPageUrl;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* title;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(assign) unsigned count;
@property(retain) NSString* pageUrl;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetTitle:(id)title;
-(id)SetBuffer:(id)buffer;
-(id)addImgUrlList:(id)list;
-(id)addImgUrlListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetPageUrl:(id)url;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)imgUrlListList;
-(id)init;
-(void)dealloc;
@end

@interface ShakeTranImgUnBindRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasScene : 1;
	unsigned hasOpType : 1;
	BaseRequest* baseRequest;
	unsigned scene;
	unsigned opType;
}
@property(assign) BOOL hasOpType;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned opType;
@property(assign) unsigned scene;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetOpType:(unsigned)type;
-(id)SetScene:(unsigned)scene;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShakeTranImgUnBindResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BatchGetShakeTranImgRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableWebUrlListList;
}
@property(retain) NSMutableArray* mutableWebUrlListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addWebUrlList:(id)list;
-(id)addWebUrlListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)webUrlListList;
-(id)init;
-(void)dealloc;
@end

@interface BatchGetShakeTranImgResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableImgUrlListList;
}
@property(retain) NSMutableArray* mutableImgUrlListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addImgUrlList:(id)list;
-(id)addImgUrlListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)imgUrlListList;
-(id)init;
-(void)dealloc;
@end

@interface KVReportItem : PBGeneratedMessage {
	unsigned hasValue : 1;
	unsigned hasLogId : 1;
	unsigned hasStartTime : 1;
	unsigned hasEndTime : 1;
	unsigned hasCount : 1;
	NSString* value;
	unsigned logId;
	unsigned startTime;
	unsigned endTime;
	unsigned count;
}
@property(assign) BOOL hasCount;
@property(assign) BOOL hasEndTime;
@property(assign) BOOL hasStartTime;
@property(assign) BOOL hasValue;
@property(assign) BOOL hasLogId;
@property(assign) unsigned count;
@property(assign) unsigned endTime;
@property(assign) unsigned startTime;
@property(retain) NSString* value;
@property(assign) unsigned logId;
+(id)parseFromData:(id)data;
-(id)SetCount:(unsigned)count;
-(id)SetEndTime:(unsigned)time;
-(id)SetStartTime:(unsigned)time;
-(id)SetValue:(id)value;
-(id)SetLogId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface KVReportReq : PBGeneratedMessage {
	unsigned hasDeviceModel : 1;
	unsigned hasDeviceBrand : 1;
	unsigned hasOsName : 1;
	unsigned hasOsVersion : 1;
	unsigned hasLanguageVer : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasRandomEncryKey : 1;
	unsigned hasKvcnt : 1;
	NSString* deviceModel;
	NSString* deviceBrand;
	NSString* osName;
	NSString* osVersion;
	NSString* languageVer;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* randomEncryKey;
	unsigned kvcnt;
	NSMutableArray* mutableListList;
}
@property(assign) BOOL hasRandomEncryKey;
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasKvcnt;
@property(assign) BOOL hasLanguageVer;
@property(assign) BOOL hasOsVersion;
@property(assign) BOOL hasOsName;
@property(assign) BOOL hasDeviceBrand;
@property(assign) BOOL hasDeviceModel;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* randomEncryKey;
@property(assign) unsigned kvcnt;
@property(retain) NSString* languageVer;
@property(retain) NSString* osVersion;
@property(retain) NSString* osName;
@property(retain) NSString* deviceBrand;
@property(retain) NSString* deviceModel;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRandomEncryKey:(id)key;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetKvcnt:(unsigned)kvcnt;
-(id)SetLanguageVer:(id)ver;
-(id)SetOsVersion:(id)version;
-(id)SetOsName:(id)name;
-(id)SetDeviceBrand:(id)brand;
-(id)SetDeviceModel:(id)model;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface KVReportResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface KVCommReportReq : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasKvbuffer : 1;
	unsigned hasRandomEncryKey : 1;
	unsigned hasBin : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* kvbuffer;
	SKBuiltinBuffer_t* randomEncryKey;
	unsigned bin;
}
@property(assign) BOOL hasRandomEncryKey;
@property(assign) BOOL hasKvbuffer;
@property(assign) BOOL hasBin;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* randomEncryKey;
@property(retain) SKBuiltinBuffer_t* kvbuffer;
@property(assign) unsigned bin;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRandomEncryKey:(id)key;
-(id)SetKvbuffer:(id)kvbuffer;
-(id)SetBin:(unsigned)bin;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface KVCommReportResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasKvresponBuffer : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* kvresponBuffer;
}
@property(assign) BOOL hasKvresponBuffer;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* kvresponBuffer;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetKvresponBuffer:(id)buffer;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameKVReportReq : PBGeneratedMessage {
	unsigned hasDeviceModel : 1;
	unsigned hasDeviceBrand : 1;
	unsigned hasOsName : 1;
	unsigned hasOsVersion : 1;
	unsigned hasLanguageVer : 1;
	unsigned hasLogExt : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasLogId : 1;
	NSString* deviceModel;
	NSString* deviceBrand;
	NSString* osName;
	NSString* osVersion;
	NSString* languageVer;
	NSString* logExt;
	BaseRequest* baseRequest;
	unsigned logId;
}
@property(assign) BOOL hasLogExt;
@property(assign) BOOL hasLogId;
@property(assign) BOOL hasLanguageVer;
@property(assign) BOOL hasOsVersion;
@property(assign) BOOL hasOsName;
@property(assign) BOOL hasDeviceBrand;
@property(assign) BOOL hasDeviceModel;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* logExt;
@property(assign) unsigned logId;
@property(retain) NSString* languageVer;
@property(retain) NSString* osVersion;
@property(retain) NSString* osName;
@property(retain) NSString* deviceBrand;
@property(retain) NSString* deviceModel;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetLogExt:(id)ext;
-(id)SetLogId:(unsigned)anId;
-(id)SetLanguageVer:(id)ver;
-(id)SetOsVersion:(id)version;
-(id)SetOsName:(id)name;
-(id)SetDeviceBrand:(id)brand;
-(id)SetDeviceModel:(id)model;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameKVReportResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UserActionItem : PBGeneratedMessage {
	unsigned hasActionPath : 1;
	unsigned hasEventId : 1;
	unsigned hasClickCnt : 1;
	unsigned hasStartTime : 1;
	unsigned hasEndTime : 1;
	NSString* actionPath;
	unsigned eventId;
	unsigned clickCnt;
	unsigned startTime;
	unsigned endTime;
}
@property(assign) BOOL hasEndTime;
@property(assign) BOOL hasStartTime;
@property(assign) BOOL hasActionPath;
@property(assign) BOOL hasClickCnt;
@property(assign) BOOL hasEventId;
@property(assign) unsigned endTime;
@property(assign) unsigned startTime;
@property(retain) NSString* actionPath;
@property(assign) unsigned clickCnt;
@property(assign) unsigned eventId;
+(id)parseFromData:(id)data;
-(id)SetEndTime:(unsigned)time;
-(id)SetStartTime:(unsigned)time;
-(id)SetActionPath:(id)path;
-(id)SetClickCnt:(unsigned)cnt;
-(id)SetEventId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UserActionReportReq : PBGeneratedMessage {
	unsigned hasDeviceModel : 1;
	unsigned hasDeviceBrand : 1;
	unsigned hasOsName : 1;
	unsigned hasOsVersion : 1;
	unsigned hasLanguageVer : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasActionCnt : 1;
	NSString* deviceModel;
	NSString* deviceBrand;
	NSString* osName;
	NSString* osVersion;
	NSString* languageVer;
	BaseRequest* baseRequest;
	unsigned actionCnt;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasActionCnt;
@property(assign) BOOL hasLanguageVer;
@property(assign) BOOL hasOsVersion;
@property(assign) BOOL hasOsName;
@property(assign) BOOL hasDeviceBrand;
@property(assign) BOOL hasDeviceModel;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned actionCnt;
@property(retain) NSString* languageVer;
@property(retain) NSString* osVersion;
@property(retain) NSString* osName;
@property(retain) NSString* deviceBrand;
@property(retain) NSString* deviceModel;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetActionCnt:(unsigned)cnt;
-(id)SetLanguageVer:(id)ver;
-(id)SetOsVersion:(id)version;
-(id)SetOsName:(id)name;
-(id)SetDeviceBrand:(id)brand;
-(id)SetDeviceModel:(id)model;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface UserActionReportResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VoiceRemindInfo : PBGeneratedMessage {
	unsigned hasRemindId : 1;
	unsigned remindId;
}
@property(assign) BOOL hasRemindId;
@property(assign) unsigned remindId;
+(id)parseFromData:(id)data;
-(id)SetRemindId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface OpVoiceReminderReq : PBGeneratedMessage {
	unsigned hasOpCode : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasRemindInfoNum : 1;
	int opCode;
	BaseRequest* baseRequest;
	unsigned remindInfoNum;
	NSMutableArray* mutableRemindInfoListList;
}
@property(retain) NSMutableArray* mutableRemindInfoListList;
@property(assign) BOOL hasRemindInfoNum;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned remindInfoNum;
@property(assign) int opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addRemindInfoList:(id)list;
-(id)addRemindInfoListFromArray:(id)array;
-(id)SetRemindInfoNum:(unsigned)num;
-(id)SetOpCode:(int)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)remindInfoListList;
-(id)init;
-(void)dealloc;
@end

@interface OpVoiceReminderResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetQuestionReq : PBGeneratedMessage {
	unsigned hasBrandUserName : 1;
	unsigned hasBaseRequest : 1;
	NSString* brandUserName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBrandUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* brandUserName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBrandUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetQuestionResp : PBGeneratedMessage {
	unsigned hasContent : 1;
	unsigned hasBaseResponse : 1;
	NSString* content;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasContent;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* content;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetContent:(id)content;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetQACountReq : PBGeneratedMessage {
	unsigned hasBrandUserName : 1;
	unsigned hasBaseRequest : 1;
	NSString* brandUserName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBrandUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* brandUserName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBrandUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetQACountResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCanAskCount : 1;
	unsigned hasCanAnswerCount : 1;
	BaseResponse* baseResponse;
	unsigned canAskCount;
	unsigned canAnswerCount;
}
@property(assign) BOOL hasCanAnswerCount;
@property(assign) BOOL hasCanAskCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned canAnswerCount;
@property(assign) unsigned canAskCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCanAnswerCount:(unsigned)count;
-(id)SetCanAskCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GrantBigChatRoomReq : PBGeneratedMessage {
	unsigned hasToUserName : 1;
	unsigned hasBaseRequest : 1;
	NSString* toUserName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* toUserName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetToUserName:(id)userName;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GrantBigChatRoomResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasQuota : 1;
	BaseResponse* baseResponse;
	unsigned quota;
}
@property(assign) BOOL hasQuota;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned quota;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetQuota:(unsigned)quota;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ClickCommandRequest : PBGeneratedMessage {
	unsigned hasClickInfo : 1;
	unsigned hasBizUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasClickType : 1;
	NSString* clickInfo;
	NSString* bizUserName;
	BaseRequest* baseRequest;
	unsigned clickType;
}
@property(assign) BOOL hasBizUserName;
@property(assign) BOOL hasClickInfo;
@property(assign) BOOL hasClickType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* bizUserName;
@property(retain) NSString* clickInfo;
@property(assign) unsigned clickType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBizUserName:(id)name;
-(id)SetClickInfo:(id)info;
-(id)SetClickType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ClickCommandResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCardListBuffer : PBGeneratedMessage {
	unsigned hasMd5 : 1;
	NSString* md5;
}
@property(assign) BOOL hasMd5;
@property(retain) NSString* md5;
+(id)parseFromData:(id)data;
-(id)SetMd5:(id)a5;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CardType : PBGeneratedMessage {
	unsigned hasStyleType : 1;
	unsigned hasSubType : 1;
	unsigned hasCustomizeType : 1;
	unsigned styleType;
	unsigned subType;
	unsigned customizeType;
}
@property(assign) BOOL hasCustomizeType;
@property(assign) BOOL hasSubType;
@property(assign) BOOL hasStyleType;
@property(assign) unsigned customizeType;
@property(assign) unsigned subType;
@property(assign) unsigned styleType;
+(id)parseFromData:(id)data;
-(id)SetCustomizeType:(unsigned)type;
-(id)SetSubType:(unsigned)type;
-(id)SetStyleType:(unsigned)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCardListRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	unsigned hasBuffer : 1;
	BaseRequest* baseRequest;
	CardType* type;
	SKBuiltinBuffer_t* buffer;
}
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(retain) CardType* type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBuffer:(id)buffer;
-(id)SetType:(id)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CardBaseInfo : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasLocation : 1;
	unsigned hasSummary : 1;
	unsigned hasType : 1;
	unsigned hasCreateTime : 1;
	NSString* id;
	NSString* location;
	NSString* summary;
	CardType* type;
	unsigned createTime;
}
@property(assign) BOOL hasSummary;
@property(assign) BOOL hasLocation;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasType;
@property(assign) BOOL hasId;
@property(retain) NSString* summary;
@property(retain) NSString* location;
@property(assign) unsigned createTime;
@property(retain) CardType* type;
@property(retain) NSString* id;
+(id)parseFromData:(id)data;
-(id)SetSummary:(id)summary;
-(id)SetLocation:(id)location;
-(id)SetCreateTime:(unsigned)time;
-(id)SetType:(id)type;
-(id)SetId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCardListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasBuffer : 1;
	unsigned hasCardCount : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* buffer;
	unsigned cardCount;
	NSMutableArray* mutableCardListList;
}
@property(assign) BOOL hasBuffer;
@property(retain) NSMutableArray* mutableCardListList;
@property(assign) BOOL hasCardCount;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(assign) unsigned cardCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBuffer:(id)buffer;
-(id)addCardList:(id)list;
-(id)addCardListFromArray:(id)array;
-(id)SetCardCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)cardListList;
-(id)init;
-(void)dealloc;
@end

@interface GetCardInfoRequest : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasBaseRequest : 1;
	NSString* id;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* id;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCardInfoResponse : PBGeneratedMessage {
	unsigned hasDetail : 1;
	unsigned hasEx : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBaseInfo : 1;
	NSString* detail;
	NSString* ex;
	BaseResponse* baseResponse;
	CardBaseInfo* baseInfo;
}
@property(assign) BOOL hasEx;
@property(assign) BOOL hasDetail;
@property(assign) BOOL hasBaseInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* ex;
@property(retain) NSString* detail;
@property(retain) CardBaseInfo* baseInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetEx:(id)ex;
-(id)SetDetail:(id)detail;
-(id)SetBaseInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface InsertCardRequest : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	NSString* ticket;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* ticket;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTicket:(id)ticket;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface InsertCardResponse : PBGeneratedMessage {
	unsigned hasDetail : 1;
	unsigned hasEx : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBaseInfo : 1;
	NSString* detail;
	NSString* ex;
	BaseResponse* baseResponse;
	CardBaseInfo* baseInfo;
}
@property(assign) BOOL hasEx;
@property(assign) BOOL hasDetail;
@property(assign) BOOL hasBaseInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* ex;
@property(retain) NSString* detail;
@property(retain) CardBaseInfo* baseInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetEx:(id)ex;
-(id)SetDetail:(id)detail;
-(id)SetBaseInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DeleteCardRequest : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasBaseRequest : 1;
	NSString* id;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* id;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DeleteCardResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TransferCardRequest : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasToUserName : 1;
	unsigned hasBaseRequest : 1;
	NSString* id;
	NSString* toUserName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* toUserName;
@property(retain) NSString* id;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetToUserName:(id)userName;
-(id)SetId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TransferCardResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ParseCardRequest : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	NSString* ticket;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* ticket;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTicket:(id)ticket;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ParseCardResponse : PBGeneratedMessage {
	unsigned hasDetail : 1;
	unsigned hasEx : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBaseInfo : 1;
	NSString* detail;
	NSString* ex;
	BaseResponse* baseResponse;
	CardBaseInfo* baseInfo;
}
@property(assign) BOOL hasEx;
@property(assign) BOOL hasDetail;
@property(assign) BOOL hasBaseInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* ex;
@property(retain) NSString* detail;
@property(retain) CardBaseInfo* baseInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetEx:(id)ex;
-(id)SetDetail:(id)detail;
-(id)SetBaseInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCardImgBuffer : PBGeneratedMessage {
	unsigned hasMd5 : 1;
	NSString* md5;
}
@property(assign) BOOL hasMd5;
@property(retain) NSString* md5;
+(id)parseFromData:(id)data;
-(id)SetMd5:(id)a5;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCardImgRequest : PBGeneratedMessage {
	unsigned hasId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasBuffer : 1;
	unsigned hasImageSizeType : 1;
	NSString* id;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* buffer;
	unsigned imageSizeType;
}
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasImageSizeType;
@property(assign) BOOL hasId;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(assign) unsigned imageSizeType;
@property(retain) NSString* id;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBuffer:(id)buffer;
-(id)SetImageSizeType:(unsigned)type;
-(id)SetId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCardImgResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasImage : 1;
	unsigned hasBuffer : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* image;
	SKBuiltinBuffer_t* buffer;
}
@property(assign) BOOL hasBuffer;
@property(assign) BOOL hasImage;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(retain) SKBuiltinBuffer_t* image;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBuffer:(id)buffer;
-(id)SetImage:(id)image;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CreateSubUserRequest : PBGeneratedMessage {
	unsigned hasNickName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	NSString* nickName;
	BaseRequest* baseRequest;
	unsigned type;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned type;
@property(retain) NSString* nickName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetNickName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CreateSubUserResponse : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasBaseResponse : 1;
	NSString* userName;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* userName;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SubUserAttrItem : PBGeneratedMessage {
	unsigned hasValue : 1;
	unsigned hasKey : 1;
	SKBuiltinString_t* value;
	unsigned key;
}
@property(assign) BOOL hasValue;
@property(assign) BOOL hasKey;
@property(retain) SKBuiltinString_t* value;
@property(assign) unsigned key;
+(id)parseFromData:(id)data;
-(id)SetValue:(id)value;
-(id)SetKey:(unsigned)key;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UpdateSubUserRequest : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	NSString* userName;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface UpdateSubUserResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UnbindSubUserRequest : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasBaseRequest : 1;
	NSString* userName;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UnbindSubUserResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetSubUserListRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	BaseRequest* baseRequest;
	unsigned type;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SubUserItem : PBGeneratedMessage {
	unsigned hasUserName : 1;
	NSString* userName;
}
@property(assign) BOOL hasUserName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetSubUserListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface ModSnsBlackList : PBGeneratedMessage {
	unsigned hasContactUsername : 1;
	unsigned hasModType : 1;
	NSString* contactUsername;
	unsigned modType;
}
@property(assign) BOOL hasModType;
@property(assign) BOOL hasContactUsername;
@property(assign) unsigned modType;
@property(retain) NSString* contactUsername;
+(id)parseFromData:(id)data;
-(id)SetModType:(unsigned)type;
-(id)SetContactUsername:(id)username;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SubmsgSyncRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasKeyBuf : 1;
	unsigned hasSelector : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* keyBuf;
	unsigned selector;
}
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasSelector;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(assign) unsigned selector;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetKeyBuf:(id)buf;
-(id)SetSelector:(unsigned)selector;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SubmsgSyncResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCmdList : 1;
	unsigned hasKeyBuf : 1;
	unsigned hasContinueFlag : 1;
	BaseResponse* baseResponse;
	CmdList* cmdList;
	SKBuiltinBuffer_t* keyBuf;
	unsigned continueFlag;
}
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasContinueFlag;
@property(assign) BOOL hasCmdList;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(assign) unsigned continueFlag;
@property(retain) CmdList* cmdList;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetKeyBuf:(id)buf;
-(id)SetContinueFlag:(unsigned)flag;
-(id)SetCmdList:(id)list;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface NBSInfo : PBGeneratedMessage {
	unsigned hasDistance : 1;
	unsigned hasSummary : 1;
	unsigned hasCategory : 1;
	unsigned hasNbsid : 1;
	unsigned hasCardFlag : 1;
	unsigned hasRank : 1;
	unsigned hasStatus : 1;
	float distance;
	NSString* summary;
	NSString* category;
	unsigned nbsid;
	unsigned cardFlag;
	unsigned rank;
	unsigned status;
}
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasRank;
@property(assign) BOOL hasCategory;
@property(assign) BOOL hasDistance;
@property(assign) BOOL hasCardFlag;
@property(assign) BOOL hasSummary;
@property(assign) BOOL hasNbsid;
@property(assign) unsigned status;
@property(assign) unsigned rank;
@property(retain) NSString* category;
@property(assign) float distance;
@property(assign) unsigned cardFlag;
@property(retain) NSString* summary;
@property(assign) unsigned nbsid;
+(id)parseFromData:(id)data;
-(id)SetStatus:(unsigned)status;
-(id)SetRank:(unsigned)rank;
-(id)SetCategory:(id)category;
-(id)SetDistance:(float)distance;
-(id)SetCardFlag:(unsigned)flag;
-(id)SetSummary:(id)summary;
-(id)SetNbsid:(unsigned)nbsid;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface NBSConfigInfo : PBGeneratedMessage {
	unsigned hasSummary : 1;
	unsigned hasConfId : 1;
	unsigned hasType : 1;
	NSString* summary;
	unsigned confId;
	unsigned type;
}
@property(assign) BOOL hasSummary;
@property(assign) BOOL hasType;
@property(assign) BOOL hasConfId;
@property(retain) NSString* summary;
@property(assign) unsigned type;
@property(assign) unsigned confId;
+(id)parseFromData:(id)data;
-(id)SetSummary:(id)summary;
-(id)SetType:(unsigned)type;
-(id)SetConfId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface FindNBSRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasUserPos : 1;
	unsigned hasPageBuff : 1;
	unsigned hasNbstype : 1;
	BaseRequest* baseRequest;
	PositionInfo* userPos;
	SKBuiltinBuffer_t* pageBuff;
	unsigned nbstype;
}
@property(assign) BOOL hasPageBuff;
@property(assign) BOOL hasUserPos;
@property(assign) BOOL hasNbstype;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* pageBuff;
@property(retain) PositionInfo* userPos;
@property(assign) unsigned nbstype;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetPageBuff:(id)buff;
-(id)SetUserPos:(id)pos;
-(id)SetNbstype:(unsigned)nbstype;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface FindNBSResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasPageBuff : 1;
	unsigned hasNbscount : 1;
	unsigned hasNbsconfigCount : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* pageBuff;
	unsigned nbscount;
	unsigned nbsconfigCount;
	NSMutableArray* mutableNbslistList;
	NSMutableArray* mutableNbsconfigListList;
}
@property(assign) BOOL hasPageBuff;
@property(retain) NSMutableArray* mutableNbsconfigListList;
@property(assign) BOOL hasNbsconfigCount;
@property(retain) NSMutableArray* mutableNbslistList;
@property(assign) BOOL hasNbscount;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* pageBuff;
@property(assign) unsigned nbsconfigCount;
@property(assign) unsigned nbscount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetPageBuff:(id)buff;
-(id)addNbsconfigList:(id)list;
-(id)addNbsconfigListFromArray:(id)array;
-(id)SetNbsconfigCount:(unsigned)count;
-(id)addNbslist:(id)nbslist;
-(id)addNbslistFromArray:(id)array;
-(id)SetNbscount:(unsigned)nbscount;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)nbsconfigListList;
-(id)nbslistList;
-(id)init;
-(void)dealloc;
@end

@interface SearchNBSRequest : PBGeneratedMessage {
	unsigned hasKeyWord : 1;
	unsigned hasTags : 1;
	unsigned hasBizMarkets : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasUserPos : 1;
	unsigned hasPageBuff : 1;
	NSString* keyWord;
	NSString* tags;
	NSString* bizMarkets;
	BaseRequest* baseRequest;
	PositionInfo* userPos;
	SKBuiltinBuffer_t* pageBuff;
}
@property(assign) BOOL hasPageBuff;
@property(assign) BOOL hasUserPos;
@property(assign) BOOL hasBizMarkets;
@property(assign) BOOL hasTags;
@property(assign) BOOL hasKeyWord;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* pageBuff;
@property(retain) PositionInfo* userPos;
@property(retain) NSString* bizMarkets;
@property(retain) NSString* tags;
@property(retain) NSString* keyWord;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetPageBuff:(id)buff;
-(id)SetUserPos:(id)pos;
-(id)SetBizMarkets:(id)markets;
-(id)SetTags:(id)tags;
-(id)SetKeyWord:(id)word;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SearchNBSResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasPageBuff : 1;
	unsigned hasNbscount : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* pageBuff;
	unsigned nbscount;
	NSMutableArray* mutableNbslistList;
}
@property(assign) BOOL hasPageBuff;
@property(retain) NSMutableArray* mutableNbslistList;
@property(assign) BOOL hasNbscount;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* pageBuff;
@property(assign) unsigned nbscount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetPageBuff:(id)buff;
-(id)addNbslist:(id)nbslist;
-(id)addNbslistFromArray:(id)array;
-(id)SetNbscount:(unsigned)nbscount;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)nbslistList;
-(id)init;
-(void)dealloc;
@end

@interface GetNBSDetailRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasNbsid : 1;
	BaseRequest* baseRequest;
	unsigned nbsid;
}
@property(assign) BOOL hasNbsid;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned nbsid;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetNbsid:(unsigned)nbsid;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetNBSDetailResponse : PBGeneratedMessage {
	unsigned hasDetailInfo : 1;
	unsigned hasCardInfo : 1;
	unsigned hasBaseResponse : 1;
	NSString* detailInfo;
	NSString* cardInfo;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasCardInfo;
@property(assign) BOOL hasDetailInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* cardInfo;
@property(retain) NSString* detailInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCardInfo:(id)info;
-(id)SetDetailInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ShowcaseInfo : PBGeneratedMessage {
	unsigned hasSummary : 1;
	unsigned hasObjectId : 1;
	NSString* summary;
	unsigned objectId;
}
@property(assign) BOOL hasSummary;
@property(assign) BOOL hasObjectId;
@property(retain) NSString* summary;
@property(assign) unsigned objectId;
+(id)parseFromData:(id)data;
-(id)SetSummary:(id)summary;
-(id)SetObjectId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetShowcaseInfoRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasPageBuff : 1;
	unsigned hasNbsid : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* pageBuff;
	unsigned nbsid;
}
@property(assign) BOOL hasPageBuff;
@property(assign) BOOL hasNbsid;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* pageBuff;
@property(assign) unsigned nbsid;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetPageBuff:(id)buff;
-(id)SetNbsid:(unsigned)nbsid;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetShowcaseInfoResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasPageBuff : 1;
	unsigned hasObjectCount : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* pageBuff;
	unsigned objectCount;
	NSMutableArray* mutableObjectListList;
}
@property(assign) BOOL hasPageBuff;
@property(retain) NSMutableArray* mutableObjectListList;
@property(assign) BOOL hasObjectCount;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* pageBuff;
@property(assign) unsigned objectCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetPageBuff:(id)buff;
-(id)addObjectList:(id)list;
-(id)addObjectListFromArray:(id)array;
-(id)SetObjectCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)objectListList;
-(id)init;
-(void)dealloc;
@end

@interface GetObjectDetailRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasNbsid : 1;
	unsigned hasObjectId : 1;
	BaseRequest* baseRequest;
	unsigned nbsid;
	unsigned objectId;
}
@property(assign) BOOL hasObjectId;
@property(assign) BOOL hasNbsid;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned objectId;
@property(assign) unsigned nbsid;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetObjectId:(unsigned)anId;
-(id)SetNbsid:(unsigned)nbsid;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetObjectDetailResponse : PBGeneratedMessage {
	unsigned hasDetailInfo : 1;
	unsigned hasBaseResponse : 1;
	NSString* detailInfo;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasDetailInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* detailInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDetailInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AppCommentRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasStatus : 1;
	BaseRequest* baseRequest;
	unsigned status;
}
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned status;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetStatus:(unsigned)status;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AppCommentResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface WebWxLoginConfirmRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBaseRequest;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface WebWxLoginConfirmResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SyncCheckResponse : PBGeneratedMessage {
	unsigned hasErrMsg : 1;
	unsigned hasSignature : 1;
	NSString* errMsg;
	NSString* signature;
}
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasErrMsg;
@property(retain) NSString* signature;
@property(retain) NSString* errMsg;
+(id)parseFromData:(id)data;
-(id)SetSignature:(id)signature;
-(id)SetErrMsg:(id)msg;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ListMFriendMobileInfo : PBGeneratedMessage {
	unsigned hasValue : 1;
	unsigned hasUserName : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasNickName : 1;
	unsigned hasStatus : 1;
	NSString* value;
	NSString* userName;
	NSString* bigHeadImgUrl;
	NSString* smallHeadImgUrl;
	NSString* nickName;
	unsigned status;
}
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasValue;
@property(retain) NSString* nickName;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(assign) unsigned status;
@property(retain) NSString* userName;
@property(retain) NSString* value;
+(id)parseFromData:(id)data;
-(id)SetNickName:(id)name;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetStatus:(unsigned)status;
-(id)SetUserName:(id)name;
-(id)SetValue:(id)value;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ListMFriendReq : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasMobileCount : 1;
	unsigned hasEmailCount : 1;
	NSString* ticket;
	BaseRequest* baseRequest;
	unsigned mobileCount;
	unsigned emailCount;
	NSMutableArray* mutableMobileListList;
	NSMutableArray* mutableEmailListList;
}
@property(retain) NSMutableArray* mutableEmailListList;
@property(assign) BOOL hasEmailCount;
@property(retain) NSMutableArray* mutableMobileListList;
@property(assign) BOOL hasMobileCount;
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned emailCount;
@property(assign) unsigned mobileCount;
@property(retain) NSString* ticket;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addEmailList:(id)list;
-(id)addEmailListFromArray:(id)array;
-(id)SetEmailCount:(unsigned)count;
-(id)addMobileList:(id)list;
-(id)addMobileListFromArray:(id)array;
-(id)SetMobileCount:(unsigned)count;
-(id)SetTicket:(id)ticket;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)emailListList;
-(id)mobileListList;
-(id)init;
-(void)dealloc;
@end

@interface ListMFriendResp : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasMobileCount : 1;
	unsigned hasEmailCount : 1;
	NSString* ticket;
	BaseResponse* baseResponse;
	unsigned mobileCount;
	unsigned emailCount;
	NSMutableArray* mutableMobileInfoList;
	NSMutableArray* mutableEmailInfoList;
}
@property(retain) NSMutableArray* mutableEmailInfoList;
@property(assign) BOOL hasEmailCount;
@property(retain) NSMutableArray* mutableMobileInfoList;
@property(assign) BOOL hasMobileCount;
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned emailCount;
@property(assign) unsigned mobileCount;
@property(retain) NSString* ticket;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addEmailInfo:(id)info;
-(id)addEmailInfoFromArray:(id)array;
-(id)SetEmailCount:(unsigned)count;
-(id)addMobileInfo:(id)info;
-(id)addMobileInfoFromArray:(id)array;
-(id)SetMobileCount:(unsigned)count;
-(id)SetTicket:(id)ticket;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)emailInfoList;
-(id)mobileInfoList;
-(id)init;
-(void)dealloc;
@end

@interface SendSmsToMFriendReq : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasMobileCount : 1;
	NSString* ticket;
	BaseRequest* baseRequest;
	unsigned mobileCount;
	NSMutableArray* mutableMobileListList;
}
@property(retain) NSMutableArray* mutableMobileListList;
@property(assign) BOOL hasMobileCount;
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned mobileCount;
@property(retain) NSString* ticket;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addMobileList:(id)list;
-(id)addMobileListFromArray:(id)array;
-(id)SetMobileCount:(unsigned)count;
-(id)SetTicket:(id)ticket;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)mobileListList;
-(id)init;
-(void)dealloc;
@end

@interface SendSmsToMFriendResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SendPhoto2FBWallRequest : PBGeneratedMessage {
	unsigned hasMessage : 1;
	unsigned hasPicture : 1;
	unsigned hasLink : 1;
	unsigned hasName : 1;
	unsigned hasDescription : 1;
	unsigned hasCaption : 1;
	unsigned hasBaseRequest : 1;
	NSString* message;
	NSString* picture;
	NSString* link;
	NSString* name;
	NSString* description;
	NSString* caption;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasCaption;
@property(assign) BOOL hasDescription;
@property(assign) BOOL hasName;
@property(assign) BOOL hasLink;
@property(assign) BOOL hasPicture;
@property(assign) BOOL hasMessage;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* caption;
@property(retain) NSString* description;
@property(retain) NSString* name;
@property(retain) NSString* link;
@property(retain) NSString* picture;
@property(retain) NSString* message;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetCaption:(id)caption;
-(id)SetDescription:(id)description;
-(id)SetName:(id)name;
-(id)SetLink:(id)link;
-(id)SetPicture:(id)picture;
-(id)SetMessage:(id)message;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SendPhoto2FBWallResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SearchOrRecommendItem : PBGeneratedMessage {
	unsigned hasSex : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasCountry : 1;
	unsigned hasWeiboNickname : 1;
	unsigned hasAlias : 1;
	unsigned hasWeibo : 1;
	unsigned hasVerifyInfo : 1;
	unsigned hasSignature : 1;
	unsigned hasCity : 1;
	unsigned hasProvince : 1;
	unsigned hasCustomizedInfo : 1;
	unsigned hasNickName : 1;
	unsigned hasUserName : 1;
	unsigned hasVerifyFlag : 1;
	unsigned hasPersonalCard : 1;
	unsigned hasWeiboFlag : 1;
	int sex;
	NSString* smallHeadImgUrl;
	NSString* bigHeadImgUrl;
	NSString* country;
	NSString* weiboNickname;
	NSString* alias;
	NSString* weibo;
	NSString* verifyInfo;
	NSString* signature;
	NSString* city;
	NSString* province;
	CustomizedInfo* customizedInfo;
	SKBuiltinString_t* nickName;
	SKBuiltinString_t* userName;
	unsigned verifyFlag;
	unsigned personalCard;
	unsigned weiboFlag;
}
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasCustomizedInfo;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasWeiboFlag;
@property(assign) BOOL hasWeiboNickname;
@property(assign) BOOL hasAlias;
@property(assign) BOOL hasWeibo;
@property(assign) BOOL hasVerifyInfo;
@property(assign) BOOL hasVerifyFlag;
@property(assign) BOOL hasPersonalCard;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasSex;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) CustomizedInfo* customizedInfo;
@property(retain) NSString* country;
@property(assign) unsigned weiboFlag;
@property(retain) NSString* weiboNickname;
@property(retain) NSString* alias;
@property(retain) NSString* weibo;
@property(retain) NSString* verifyInfo;
@property(assign) unsigned verifyFlag;
@property(assign) unsigned personalCard;
@property(retain) NSString* signature;
@property(retain) NSString* city;
@property(retain) NSString* province;
@property(assign) int sex;
@property(retain) SKBuiltinString_t* nickName;
@property(retain) SKBuiltinString_t* userName;
+(id)parseFromData:(id)data;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetCustomizedInfo:(id)info;
-(id)SetCountry:(id)country;
-(id)SetWeiboFlag:(unsigned)flag;
-(id)SetWeiboNickname:(id)nickname;
-(id)SetAlias:(id)alias;
-(id)SetWeibo:(id)weibo;
-(id)SetVerifyInfo:(id)info;
-(id)SetVerifyFlag:(unsigned)flag;
-(id)SetPersonalCard:(unsigned)card;
-(id)SetSignature:(id)signature;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetSex:(int)sex;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SearchOrRecommendBizRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasNickName : 1;
	unsigned hasReqBuf : 1;
	unsigned hasOpCode : 1;
	unsigned hasEntryFlag : 1;
	BaseRequest* baseRequest;
	SKBuiltinString_t* nickName;
	SKBuiltinBuffer_t* reqBuf;
	unsigned opCode;
	unsigned entryFlag;
}
@property(assign) BOOL hasReqBuf;
@property(assign) BOOL hasEntryFlag;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* reqBuf;
@property(assign) unsigned entryFlag;
@property(assign) unsigned opCode;
@property(retain) SKBuiltinString_t* nickName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReqBuf:(id)buf;
-(id)SetEntryFlag:(unsigned)flag;
-(id)SetOpCode:(unsigned)code;
-(id)SetNickName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SearchOrRecommendBizResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasResBuf : 1;
	unsigned hasBizCount : 1;
	unsigned hasShowFlag : 1;
	unsigned hasIsEnd : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* resBuf;
	unsigned bizCount;
	unsigned showFlag;
	unsigned isEnd;
	NSMutableArray* mutableBizListList;
}
@property(assign) BOOL hasResBuf;
@property(assign) BOOL hasIsEnd;
@property(assign) BOOL hasShowFlag;
@property(retain) NSMutableArray* mutableBizListList;
@property(assign) BOOL hasBizCount;
@property(assign) BOOL hasBaseResponse;
@property(retain) SKBuiltinBuffer_t* resBuf;
@property(assign) unsigned isEnd;
@property(assign) unsigned showFlag;
@property(assign) unsigned bizCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetResBuf:(id)buf;
-(id)SetIsEnd:(unsigned)end;
-(id)SetShowFlag:(unsigned)flag;
-(id)addBizList:(id)list;
-(id)addBizListFromArray:(id)array;
-(id)SetBizCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)bizListList;
-(id)init;
-(void)dealloc;
@end

@interface GroupRecommendBizRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBaseRequest;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RecommendGroup : PBGeneratedMessage {
	unsigned hasGroupName : 1;
	unsigned hasMemCount : 1;
	SKBuiltinString_t* groupName;
	unsigned memCount;
	NSMutableArray* mutableMembersList;
}
@property(retain) NSMutableArray* mutableMembersList;
@property(assign) BOOL hasMemCount;
@property(assign) BOOL hasGroupName;
@property(assign) unsigned memCount;
@property(retain) SKBuiltinString_t* groupName;
+(id)parseFromData:(id)data;
-(id)addMembers:(id)members;
-(id)addMembersFromArray:(id)array;
-(id)SetMemCount:(unsigned)count;
-(id)SetGroupName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)membersList;
-(id)init;
-(void)dealloc;
@end

@interface RecommendGroups : PBGeneratedMessage {
	unsigned hasGroupCount : 1;
	unsigned groupCount;
	NSMutableArray* mutableGroupsList;
}
@property(retain) NSMutableArray* mutableGroupsList;
@property(assign) BOOL hasGroupCount;
@property(assign) unsigned groupCount;
+(id)parseFromData:(id)data;
-(id)addGroups:(id)groups;
-(id)addGroupsFromArray:(id)array;
-(id)SetGroupCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)groupsList;
-(id)init;
-(void)dealloc;
@end

@interface GroupRecommendBizResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasGroupList : 1;
	BaseResponse* baseResponse;
	RecommendGroups* groupList;
}
@property(assign) BOOL hasGroupList;
@property(assign) BOOL hasBaseResponse;
@property(retain) RecommendGroups* groupList;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetGroupList:(id)list;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GeneralShareBaseInfo : PBGeneratedMessage {
	unsigned hasDestType : 1;
	unsigned destType;
}
@property(assign) BOOL hasDestType;
@property(assign) unsigned destType;
+(id)parseFromData:(id)data;
-(id)SetDestType:(unsigned)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GeneralShareContent : PBGeneratedMessage {
	unsigned hasTitle : 1;
	unsigned hasContent : 1;
	unsigned hasDescription : 1;
	unsigned hasImageUrl : 1;
	unsigned hasLinkUrl : 1;
	unsigned hasDataUrl : 1;
	unsigned hasExtInfo : 1;
	unsigned hasContentType : 1;
	NSString* title;
	NSString* content;
	NSString* description;
	NSString* imageUrl;
	NSString* linkUrl;
	NSString* dataUrl;
	NSString* extInfo;
	unsigned contentType;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasDataUrl;
@property(assign) BOOL hasLinkUrl;
@property(assign) BOOL hasImageUrl;
@property(assign) BOOL hasDescription;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasTitle;
@property(assign) BOOL hasContentType;
@property(retain) NSString* extInfo;
@property(retain) NSString* dataUrl;
@property(retain) NSString* linkUrl;
@property(retain) NSString* imageUrl;
@property(retain) NSString* description;
@property(retain) NSString* content;
@property(retain) NSString* title;
@property(assign) unsigned contentType;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetDataUrl:(id)url;
-(id)SetLinkUrl:(id)url;
-(id)SetImageUrl:(id)url;
-(id)SetDescription:(id)description;
-(id)SetContent:(id)content;
-(id)SetTitle:(id)title;
-(id)SetContentType:(unsigned)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GeneralShareRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasBaseInfo : 1;
	unsigned hasContent : 1;
	BaseRequest* baseRequest;
	GeneralShareBaseInfo* baseInfo;
	GeneralShareContent* content;
}
@property(assign) BOOL hasContent;
@property(assign) BOOL hasBaseInfo;
@property(assign) BOOL hasBaseRequest;
@property(retain) GeneralShareContent* content;
@property(retain) GeneralShareBaseInfo* baseInfo;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetContent:(id)content;
-(id)SetBaseInfo:(id)info;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GeneralShareResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetSuggestAliasRequest : PBGeneratedMessage {
	unsigned hasRegBindName : 1;
	unsigned hasRegTicket : 1;
	unsigned hasNickName : 1;
	unsigned hasInputAlias : 1;
	unsigned hasVerifySignature : 1;
	unsigned hasVerifyContent : 1;
	unsigned hasLanguage : 1;
	unsigned hasClientSeqId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasRandomEncryKey : 1;
	unsigned hasRegMode : 1;
	NSString* regBindName;
	NSString* regTicket;
	NSString* nickName;
	NSString* inputAlias;
	NSString* verifySignature;
	NSString* verifyContent;
	NSString* language;
	NSString* clientSeqId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* randomEncryKey;
	unsigned regMode;
}
@property(assign) BOOL hasClientSeqId;
@property(assign) BOOL hasLanguage;
@property(assign) BOOL hasRegMode;
@property(assign) BOOL hasVerifyContent;
@property(assign) BOOL hasVerifySignature;
@property(assign) BOOL hasInputAlias;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasRegTicket;
@property(assign) BOOL hasRegBindName;
@property(assign) BOOL hasRandomEncryKey;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* clientSeqId;
@property(retain) NSString* language;
@property(assign) unsigned regMode;
@property(retain) NSString* verifyContent;
@property(retain) NSString* verifySignature;
@property(retain) NSString* inputAlias;
@property(retain) NSString* nickName;
@property(retain) NSString* regTicket;
@property(retain) NSString* regBindName;
@property(retain) SKBuiltinBuffer_t* randomEncryKey;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetClientSeqId:(id)anId;
-(id)SetLanguage:(id)language;
-(id)SetRegMode:(unsigned)mode;
-(id)SetVerifyContent:(id)content;
-(id)SetVerifySignature:(id)signature;
-(id)SetInputAlias:(id)alias;
-(id)SetNickName:(id)name;
-(id)SetRegTicket:(id)ticket;
-(id)SetRegBindName:(id)name;
-(id)SetRandomEncryKey:(id)key;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetSuggestAliasResponse : PBGeneratedMessage {
	unsigned hasUserNameRet : 1;
	unsigned hasVerifySignature : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasVerifyBuff : 1;
	unsigned hasCount : 1;
	int userNameRet;
	NSString* verifySignature;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* verifyBuff;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(assign) BOOL hasUserNameRet;
@property(assign) BOOL hasVerifyBuff;
@property(assign) BOOL hasVerifySignature;
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) int userNameRet;
@property(retain) SKBuiltinBuffer_t* verifyBuff;
@property(retain) NSString* verifySignature;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetUserNameRet:(int)ret;
-(id)SetVerifyBuff:(id)buff;
-(id)SetVerifySignature:(id)signature;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface BindOpMobileRequest : PBGeneratedMessage {
	unsigned hasOpcode : 1;
	unsigned hasDialFlag : 1;
	unsigned hasUserName : 1;
	unsigned hasMobile : 1;
	unsigned hasVerifycode : 1;
	unsigned hasDialLang : 1;
	unsigned hasAuthTicket : 1;
	unsigned hasSafeDeviceName : 1;
	unsigned hasSafeDeviceType : 1;
	unsigned hasLanguage : 1;
	unsigned hasClientSeqId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasRandomEncryKey : 1;
	unsigned hasForceReg : 1;
	unsigned hasInputMobileRetrys : 1;
	unsigned hasAdjustRet : 1;
	int opcode;
	int dialFlag;
	NSString* userName;
	NSString* mobile;
	NSString* verifycode;
	NSString* dialLang;
	NSString* authTicket;
	NSString* safeDeviceName;
	NSString* safeDeviceType;
	NSString* language;
	NSString* clientSeqId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* randomEncryKey;
	unsigned forceReg;
	unsigned inputMobileRetrys;
	unsigned adjustRet;
}
@property(assign) BOOL hasClientSeqId;
@property(assign) BOOL hasAdjustRet;
@property(assign) BOOL hasInputMobileRetrys;
@property(assign) BOOL hasLanguage;
@property(assign) BOOL hasRandomEncryKey;
@property(assign) BOOL hasSafeDeviceType;
@property(assign) BOOL hasSafeDeviceName;
@property(assign) BOOL hasForceReg;
@property(assign) BOOL hasAuthTicket;
@property(assign) BOOL hasDialLang;
@property(assign) BOOL hasDialFlag;
@property(assign) BOOL hasVerifycode;
@property(assign) BOOL hasOpcode;
@property(assign) BOOL hasMobile;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* clientSeqId;
@property(assign) unsigned adjustRet;
@property(assign) unsigned inputMobileRetrys;
@property(retain) NSString* language;
@property(retain) SKBuiltinBuffer_t* randomEncryKey;
@property(retain) NSString* safeDeviceType;
@property(retain) NSString* safeDeviceName;
@property(assign) unsigned forceReg;
@property(retain) NSString* authTicket;
@property(retain) NSString* dialLang;
@property(assign) int dialFlag;
@property(retain) NSString* verifycode;
@property(assign) int opcode;
@property(retain) NSString* mobile;
@property(retain) NSString* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetClientSeqId:(id)anId;
-(id)SetAdjustRet:(unsigned)ret;
-(id)SetInputMobileRetrys:(unsigned)retrys;
-(id)SetLanguage:(id)language;
-(id)SetRandomEncryKey:(id)key;
-(id)SetSafeDeviceType:(id)type;
-(id)SetSafeDeviceName:(id)name;
-(id)SetForceReg:(unsigned)reg;
-(id)SetAuthTicket:(id)ticket;
-(id)SetDialLang:(id)lang;
-(id)SetDialFlag:(int)flag;
-(id)SetVerifycode:(id)verifycode;
-(id)SetOpcode:(int)opcode;
-(id)SetMobile:(id)mobile;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BindOpMobileResponse : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasSmsNo : 1;
	unsigned hasFormatedMobile : 1;
	unsigned hasPwd : 1;
	unsigned hasUsername : 1;
	unsigned hasPureMobile : 1;
	unsigned hasCc : 1;
	unsigned hasAuthTicket : 1;
	unsigned hasShowStyle : 1;
	unsigned hasSafeDeviceList : 1;
	unsigned hasNetworkControl : 1;
	unsigned hasBuiltinIplist : 1;
	unsigned hasNewHostList : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasSafeDevice : 1;
	unsigned hasObsoleteItem1 : 1;
	unsigned hasNeedSetPwd : 1;
	NSString* ticket;
	NSString* smsNo;
	NSString* formatedMobile;
	NSString* pwd;
	NSString* username;
	NSString* pureMobile;
	NSString* cc;
	NSString* authTicket;
	ShowStyleKey* showStyle;
	SafeDeviceList* safeDeviceList;
	NetworkControl* networkControl;
	BuiltinIPList* builtinIplist;
	HostList* newHostList;
	BaseResponse* baseResponse;
	unsigned safeDevice;
	unsigned obsoleteItem1;
	unsigned needSetPwd;
}
@property(assign) BOOL hasShowStyle;
@property(assign) BOOL hasFormatedMobile;
@property(assign) BOOL hasPureMobile;
@property(assign) BOOL hasSafeDeviceList;
@property(assign) BOOL hasObsoleteItem1;
@property(assign) BOOL hasCc;
@property(assign) BOOL hasSafeDevice;
@property(assign) BOOL hasAuthTicket;
@property(assign) BOOL hasNetworkControl;
@property(assign) BOOL hasBuiltinIplist;
@property(assign) BOOL hasNewHostList;
@property(assign) BOOL hasUsername;
@property(assign) BOOL hasPwd;
@property(assign) BOOL hasNeedSetPwd;
@property(assign) BOOL hasSmsNo;
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasBaseResponse;
@property(retain) ShowStyleKey* showStyle;
@property(retain) NSString* formatedMobile;
@property(retain) NSString* pureMobile;
@property(retain) SafeDeviceList* safeDeviceList;
@property(assign) unsigned obsoleteItem1;
@property(retain) NSString* cc;
@property(assign) unsigned safeDevice;
@property(retain) NSString* authTicket;
@property(retain) NetworkControl* networkControl;
@property(retain) BuiltinIPList* builtinIplist;
@property(retain) HostList* newHostList;
@property(retain) NSString* username;
@property(retain) NSString* pwd;
@property(assign) unsigned needSetPwd;
@property(retain) NSString* smsNo;
@property(retain) NSString* ticket;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetShowStyle:(id)style;
-(id)SetFormatedMobile:(id)mobile;
-(id)SetPureMobile:(id)mobile;
-(id)SetSafeDeviceList:(id)list;
-(id)SetObsoleteItem1:(unsigned)a1;
-(id)SetCc:(id)cc;
-(id)SetSafeDevice:(unsigned)device;
-(id)SetAuthTicket:(id)ticket;
-(id)SetNetworkControl:(id)control;
-(id)SetBuiltinIplist:(id)iplist;
-(id)SetNewHostList:(id)list;
-(id)SetUsername:(id)username;
-(id)SetPwd:(id)pwd;
-(id)SetNeedSetPwd:(unsigned)pwd;
-(id)SetSmsNo:(id)no;
-(id)SetTicket:(id)ticket;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EmailRegRequest : PBGeneratedMessage {
	unsigned hasEmail : 1;
	unsigned hasLanguage : 1;
	unsigned hasPwd : 1;
	unsigned hasVerifyCode : 1;
	unsigned hasClientSeqId : 1;
	unsigned hasRealCountry : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasRandomEncryKey : 1;
	unsigned hasOpcode : 1;
	unsigned hasVerifyScene : 1;
	NSString* email;
	NSString* language;
	NSString* pwd;
	NSString* verifyCode;
	NSString* clientSeqId;
	NSString* realCountry;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* randomEncryKey;
	unsigned opcode;
	unsigned verifyScene;
}
@property(assign) BOOL hasVerifyScene;
@property(assign) BOOL hasRealCountry;
@property(assign) BOOL hasClientSeqId;
@property(assign) BOOL hasVerifyCode;
@property(assign) BOOL hasPwd;
@property(assign) BOOL hasLanguage;
@property(assign) BOOL hasEmail;
@property(assign) BOOL hasOpcode;
@property(assign) BOOL hasRandomEncryKey;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned verifyScene;
@property(retain) NSString* realCountry;
@property(retain) NSString* clientSeqId;
@property(retain) NSString* verifyCode;
@property(retain) NSString* pwd;
@property(retain) NSString* language;
@property(retain) NSString* email;
@property(assign) unsigned opcode;
@property(retain) SKBuiltinBuffer_t* randomEncryKey;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetVerifyScene:(unsigned)scene;
-(id)SetRealCountry:(id)country;
-(id)SetClientSeqId:(id)anId;
-(id)SetVerifyCode:(id)code;
-(id)SetPwd:(id)pwd;
-(id)SetLanguage:(id)language;
-(id)SetEmail:(id)email;
-(id)SetOpcode:(unsigned)opcode;
-(id)SetRandomEncryKey:(id)key;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EmailRegResponse : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBuiltinIplist : 1;
	unsigned hasNewHostList : 1;
	unsigned hasShowStyle : 1;
	unsigned hasNetworkControl : 1;
	NSString* ticket;
	BaseResponse* baseResponse;
	BuiltinIPList* builtinIplist;
	HostList* newHostList;
	ShowStyleKey* showStyle;
	NetworkControl* networkControl;
}
@property(assign) BOOL hasNetworkControl;
@property(assign) BOOL hasShowStyle;
@property(assign) BOOL hasNewHostList;
@property(assign) BOOL hasBuiltinIplist;
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasBaseResponse;
@property(retain) NetworkControl* networkControl;
@property(retain) ShowStyleKey* showStyle;
@property(retain) HostList* newHostList;
@property(retain) BuiltinIPList* builtinIplist;
@property(retain) NSString* ticket;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetNetworkControl:(id)control;
-(id)SetShowStyle:(id)style;
-(id)SetNewHostList:(id)list;
-(id)SetBuiltinIplist:(id)iplist;
-(id)SetTicket:(id)ticket;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SetEmailPwdRequest : PBGeneratedMessage {
	unsigned hasPwd : 1;
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	NSString* pwd;
	NSString* ticket;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasPwd;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* ticket;
@property(retain) NSString* pwd;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTicket:(id)ticket;
-(id)SetPwd:(id)pwd;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SetEmailPwdResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UpdateSafeDeviceRequest : PBGeneratedMessage {
	unsigned hasUuid : 1;
	unsigned hasName : 1;
	unsigned hasDeviceType : 1;
	unsigned hasBaseRequest : 1;
	NSString* uuid;
	NSString* name;
	NSString* deviceType;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasDeviceType;
@property(assign) BOOL hasName;
@property(assign) BOOL hasUuid;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* deviceType;
@property(retain) NSString* name;
@property(retain) NSString* uuid;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetDeviceType:(id)type;
-(id)SetName:(id)name;
-(id)SetUuid:(id)uuid;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UpdateSafeDeviceResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasSafeDevice : 1;
	BaseResponse* baseResponse;
	unsigned safeDevice;
}
@property(assign) BOOL hasSafeDevice;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned safeDevice;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSafeDevice:(unsigned)device;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DelSafeDeviceRequest : PBGeneratedMessage {
	unsigned hasUuid : 1;
	unsigned hasBaseRequest : 1;
	NSString* uuid;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasUuid;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* uuid;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUuid:(id)uuid;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DelSafeDeviceResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasSafeDevice : 1;
	BaseResponse* baseResponse;
	unsigned safeDevice;
}
@property(assign) BOOL hasSafeDevice;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned safeDevice;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSafeDevice:(unsigned)device;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BindSafeMobileRequest : PBGeneratedMessage {
	unsigned hasOpcode : 1;
	unsigned hasMobile : 1;
	unsigned hasBaseRequest : 1;
	int opcode;
	NSString* mobile;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasOpcode;
@property(assign) BOOL hasMobile;
@property(assign) BOOL hasBaseRequest;
@property(assign) int opcode;
@property(retain) NSString* mobile;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetOpcode:(int)opcode;
-(id)SetMobile:(id)mobile;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BindSafeMobileResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UnBindQQRequest : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	NSString* ticket;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* ticket;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTicket:(id)ticket;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UnBindQQResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CheckUnBindRequest : PBGeneratedMessage {
	unsigned hasBindType : 1;
	unsigned hasBaseRequest : 1;
	int bindType;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBindType;
@property(assign) BOOL hasBaseRequest;
@property(assign) int bindType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBindType:(int)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CheckUnBindResponse : PBGeneratedMessage {
	unsigned hasRandomPasswd : 1;
	unsigned hasBaseResponse : 1;
	NSString* randomPasswd;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasRandomPasswd;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* randomPasswd;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetRandomPasswd:(id)passwd;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface FaceBookAuthRequest : PBGeneratedMessage {
	unsigned hasAccessToken : 1;
	unsigned hasRandomEncryKey : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpType : 1;
	NSString* accessToken;
	NSString* randomEncryKey;
	BaseRequest* baseRequest;
	unsigned opType;
}
@property(assign) BOOL hasRandomEncryKey;
@property(assign) BOOL hasAccessToken;
@property(assign) BOOL hasOpType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* randomEncryKey;
@property(retain) NSString* accessToken;
@property(assign) unsigned opType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRandomEncryKey:(id)key;
-(id)SetAccessToken:(id)token;
-(id)SetOpType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface FaceBookAuthResponse : PBGeneratedMessage {
	unsigned hasFbuserId : 1;
	unsigned hasFbuserName : 1;
	unsigned hasBaseResponse : 1;
	unsigned long long fbuserId;
	NSString* fbuserName;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasFbuserName;
@property(assign) BOOL hasFbuserId;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* fbuserName;
@property(assign) unsigned long long fbuserId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetFbuserName:(id)name;
-(id)SetFbuserId:(unsigned long long)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RegEquipmentRequest : PBGeneratedMessage {
	unsigned hasSerialNumber : 1;
	unsigned hasImei : 1;
	unsigned hasMac : 1;
	unsigned hasNickName : 1;
	unsigned hasTimeZone : 1;
	unsigned hasLanguage : 1;
	unsigned hasRealCountry : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasRandomEncryKey : 1;
	unsigned hasType : 1;
	unsigned hasBuiltinIpseq : 1;
	unsigned hasDlsrc : 1;
	unsigned hasRegMode : 1;
	unsigned hasForceReg : 1;
	NSString* serialNumber;
	NSString* imei;
	NSString* mac;
	NSString* nickName;
	NSString* timeZone;
	NSString* language;
	NSString* realCountry;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* randomEncryKey;
	unsigned type;
	unsigned builtinIpseq;
	unsigned dlsrc;
	unsigned regMode;
	unsigned forceReg;
}
@property(assign) BOOL hasRandomEncryKey;
@property(assign) BOOL hasRealCountry;
@property(assign) BOOL hasForceReg;
@property(assign) BOOL hasLanguage;
@property(assign) BOOL hasTimeZone;
@property(assign) BOOL hasRegMode;
@property(assign) BOOL hasDlsrc;
@property(assign) BOOL hasBuiltinIpseq;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasMac;
@property(assign) BOOL hasImei;
@property(assign) BOOL hasSerialNumber;
@property(assign) BOOL hasType;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* randomEncryKey;
@property(retain) NSString* realCountry;
@property(assign) unsigned forceReg;
@property(retain) NSString* language;
@property(retain) NSString* timeZone;
@property(assign) unsigned regMode;
@property(assign) unsigned dlsrc;
@property(assign) unsigned builtinIpseq;
@property(retain) NSString* nickName;
@property(retain) NSString* mac;
@property(retain) NSString* imei;
@property(retain) NSString* serialNumber;
@property(assign) unsigned type;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRandomEncryKey:(id)key;
-(id)SetRealCountry:(id)country;
-(id)SetForceReg:(unsigned)reg;
-(id)SetLanguage:(id)language;
-(id)SetTimeZone:(id)zone;
-(id)SetRegMode:(unsigned)mode;
-(id)SetDlsrc:(unsigned)dlsrc;
-(id)SetBuiltinIpseq:(unsigned)ipseq;
-(id)SetNickName:(id)name;
-(id)SetMac:(id)mac;
-(id)SetImei:(id)imei;
-(id)SetSerialNumber:(id)number;
-(id)SetType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RegEquipmentResponse : PBGeneratedMessage {
	unsigned hasPassword : 1;
	unsigned hasSessionKey : 1;
	unsigned hasOfficialUserName : 1;
	unsigned hasOfficialNickName : 1;
	unsigned hasQqmicroBlogUserName : 1;
	unsigned hasBindEmail : 1;
	unsigned hasAuthKey : 1;
	unsigned hasPushMailSettingTicket : 1;
	unsigned hasFsurl : 1;
	unsigned hasUserName : 1;
	unsigned hasNewHostList : 1;
	unsigned hasPluginKeyList : 1;
	unsigned hasNetworkControl : 1;
	unsigned hasBuiltinIplist : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasStatus : 1;
	unsigned hasReturnFlag : 1;
	unsigned hasRegType : 1;
	unsigned hasSendCardBitFlag : 1;
	unsigned hasPushMailStatus : 1;
	unsigned hasUin : 1;
	unsigned hasProfileFlag : 1;
	NSString* password;
	NSString* sessionKey;
	NSString* officialUserName;
	NSString* officialNickName;
	NSString* qqmicroBlogUserName;
	NSString* bindEmail;
	NSString* authKey;
	NSString* pushMailSettingTicket;
	NSString* fsurl;
	NSString* userName;
	HostList* newHostList;
	PluginKeyList* pluginKeyList;
	NetworkControl* networkControl;
	BuiltinIPList* builtinIplist;
	BaseResponse* baseResponse;
	unsigned status;
	unsigned returnFlag;
	unsigned regType;
	unsigned sendCardBitFlag;
	unsigned pushMailStatus;
	unsigned uin;
	unsigned profileFlag;
}
@property(assign) BOOL hasNewHostList;
@property(assign) BOOL hasProfileFlag;
@property(assign) BOOL hasPassword;
@property(assign) BOOL hasPluginKeyList;
@property(assign) BOOL hasAuthKey;
@property(assign) BOOL hasRegType;
@property(assign) BOOL hasReturnFlag;
@property(assign) BOOL hasNetworkControl;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasFsurl;
@property(assign) BOOL hasBuiltinIplist;
@property(assign) BOOL hasPushMailSettingTicket;
@property(assign) BOOL hasSendCardBitFlag;
@property(assign) BOOL hasPushMailStatus;
@property(assign) BOOL hasBindEmail;
@property(assign) BOOL hasQqmicroBlogUserName;
@property(assign) BOOL hasOfficialNickName;
@property(assign) BOOL hasOfficialUserName;
@property(assign) BOOL hasSessionKey;
@property(assign) BOOL hasUin;
@property(assign) BOOL hasBaseResponse;
@property(retain) HostList* newHostList;
@property(assign) unsigned profileFlag;
@property(retain) NSString* password;
@property(retain) PluginKeyList* pluginKeyList;
@property(retain) NSString* authKey;
@property(assign) unsigned regType;
@property(assign) unsigned returnFlag;
@property(retain) NetworkControl* networkControl;
@property(assign) unsigned status;
@property(retain) NSString* userName;
@property(retain) NSString* fsurl;
@property(retain) BuiltinIPList* builtinIplist;
@property(retain) NSString* pushMailSettingTicket;
@property(assign) unsigned sendCardBitFlag;
@property(assign) unsigned pushMailStatus;
@property(retain) NSString* bindEmail;
@property(retain) NSString* qqmicroBlogUserName;
@property(retain) NSString* officialNickName;
@property(retain) NSString* officialUserName;
@property(retain) NSString* sessionKey;
@property(assign) unsigned uin;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetNewHostList:(id)list;
-(id)SetProfileFlag:(unsigned)flag;
-(id)SetPassword:(id)password;
-(id)SetPluginKeyList:(id)list;
-(id)SetAuthKey:(id)key;
-(id)SetRegType:(unsigned)type;
-(id)SetReturnFlag:(unsigned)flag;
-(id)SetNetworkControl:(id)control;
-(id)SetStatus:(unsigned)status;
-(id)SetUserName:(id)name;
-(id)SetFsurl:(id)fsurl;
-(id)SetBuiltinIplist:(id)iplist;
-(id)SetPushMailSettingTicket:(id)ticket;
-(id)SetSendCardBitFlag:(unsigned)flag;
-(id)SetPushMailStatus:(unsigned)status;
-(id)SetBindEmail:(id)email;
-(id)SetQqmicroBlogUserName:(id)name;
-(id)SetOfficialNickName:(id)name;
-(id)SetOfficialUserName:(id)name;
-(id)SetSessionKey:(id)key;
-(id)SetUin:(unsigned)uin;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ResetEquipmentRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBaseRequest;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ResetEquipmentResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SetPwdRequest : PBGeneratedMessage {
	unsigned hasPassword : 1;
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	NSString* password;
	NSString* ticket;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasPassword;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* ticket;
@property(retain) NSString* password;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTicket:(id)ticket;
-(id)SetPassword:(id)password;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SetPwdResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface QueryHasPswdRequest : PBGeneratedMessage {
	unsigned hasScene : 1;
	unsigned hasBaseRequest : 1;
	int scene;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasScene;
@property(assign) BOOL hasBaseRequest;
@property(assign) int scene;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetScene:(int)scene;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface QueryHasPswdResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyPswdRequest : PBGeneratedMessage {
	unsigned hasPwd1 : 1;
	unsigned hasPwd2 : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasImgSid : 1;
	unsigned hasImgCode : 1;
	unsigned hasImgEncryptKey : 1;
	unsigned hasKsid : 1;
	unsigned hasOpCode : 1;
	NSString* pwd1;
	NSString* pwd2;
	BaseRequest* baseRequest;
	SKBuiltinString_t* imgSid;
	SKBuiltinString_t* imgCode;
	SKBuiltinString_t* imgEncryptKey;
	SKBuiltinBuffer_t* ksid;
	unsigned opCode;
}
@property(assign) BOOL hasKsid;
@property(assign) BOOL hasImgEncryptKey;
@property(assign) BOOL hasImgCode;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasPwd2;
@property(assign) BOOL hasPwd1;
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* ksid;
@property(retain) SKBuiltinString_t* imgEncryptKey;
@property(retain) SKBuiltinString_t* imgCode;
@property(retain) SKBuiltinString_t* imgSid;
@property(retain) NSString* pwd2;
@property(retain) NSString* pwd1;
@property(assign) unsigned opCode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetKsid:(id)ksid;
-(id)SetImgEncryptKey:(id)key;
-(id)SetImgCode:(id)code;
-(id)SetImgSid:(id)sid;
-(id)SetPwd2:(id)a2;
-(id)SetPwd1:(id)a1;
-(id)SetOpCode:(unsigned)code;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyPswdResponse : PBGeneratedMessage {
	unsigned hasTicket : 1;
	unsigned hasAuthKey : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasImgSid : 1;
	unsigned hasImgBuf : 1;
	unsigned hasImgEncryptKey : 1;
	unsigned hasA2Key : 1;
	unsigned hasKsid : 1;
	NSString* ticket;
	NSString* authKey;
	BaseResponse* baseResponse;
	SKBuiltinString_t* imgSid;
	SKBuiltinBuffer_t* imgBuf;
	SKBuiltinString_t* imgEncryptKey;
	SKBuiltinBuffer_t* a2Key;
	SKBuiltinBuffer_t* ksid;
}
@property(assign) BOOL hasAuthKey;
@property(assign) BOOL hasKsid;
@property(assign) BOOL hasA2Key;
@property(assign) BOOL hasImgEncryptKey;
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* authKey;
@property(retain) SKBuiltinBuffer_t* ksid;
@property(retain) SKBuiltinBuffer_t* a2Key;
@property(retain) SKBuiltinString_t* imgEncryptKey;
@property(retain) NSString* ticket;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(retain) SKBuiltinString_t* imgSid;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetAuthKey:(id)key;
-(id)SetKsid:(id)ksid;
-(id)SetA2Key:(id)key;
-(id)SetImgEncryptKey:(id)key;
-(id)SetTicket:(id)ticket;
-(id)SetImgBuf:(id)buf;
-(id)SetImgSid:(id)sid;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetWeiBoURLReq : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasBlogUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasA2Key : 1;
	unsigned hasA2KeyNew : 1;
	unsigned hasScene : 1;
	NSString* userName;
	NSString* blogUserName;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* a2Key;
	SKBuiltinBuffer_t* a2KeyNew;
	unsigned scene;
}
@property(assign) BOOL hasA2KeyNew;
@property(assign) BOOL hasBlogUserName;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasA2Key;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* a2KeyNew;
@property(retain) NSString* blogUserName;
@property(assign) unsigned scene;
@property(retain) NSString* userName;
@property(retain) SKBuiltinBuffer_t* a2Key;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetA2KeyNew:(id)aNew;
-(id)SetBlogUserName:(id)name;
-(id)SetScene:(unsigned)scene;
-(id)SetUserName:(id)name;
-(id)SetA2Key:(id)key;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetWeiBoURLResp : PBGeneratedMessage {
	unsigned hasUrl : 1;
	unsigned hasBaseResponse : 1;
	NSString* url;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasUrl;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* url;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetUrl:(id)url;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface IphoneRegRequest : PBGeneratedMessage {
	unsigned hasToken : 1;
	unsigned hasSound : 1;
	unsigned hasVoipSound : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasStatus : 1;
	NSString* token;
	NSString* sound;
	NSString* voipSound;
	BaseRequest* baseRequest;
	unsigned status;
}
@property(assign) BOOL hasVoipSound;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasSound;
@property(assign) BOOL hasToken;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* voipSound;
@property(assign) unsigned status;
@property(retain) NSString* sound;
@property(retain) NSString* token;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetVoipSound:(id)sound;
-(id)SetStatus:(unsigned)status;
-(id)SetSound:(id)sound;
-(id)SetToken:(id)token;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface IphoneRegResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AshaRegRequest : PBGeneratedMessage {
	unsigned hasNid : 1;
	unsigned hasBaseRequest : 1;
	NSString* nid;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasNid;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* nid;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetNid:(id)nid;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AshaRegResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AshaUnRegRequest : PBGeneratedMessage {
	unsigned hasNid : 1;
	unsigned hasBaseRequest : 1;
	NSString* nid;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasNid;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* nid;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetNid:(id)nid;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AshaUnRegResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BlackBerryRegRequest : PBGeneratedMessage {
	unsigned hasPin : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasPort : 1;
	NSString* pin;
	BaseRequest* baseRequest;
	unsigned port;
}
@property(assign) BOOL hasPort;
@property(assign) BOOL hasPin;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned port;
@property(retain) NSString* pin;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetPort:(unsigned)port;
-(id)SetPin:(id)pin;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BlackBerryRegResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BlackBerryUnRegRequest : PBGeneratedMessage {
	unsigned hasPin : 1;
	unsigned hasBaseRequest : 1;
	NSString* pin;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasPin;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* pin;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetPin:(id)pin;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BlackBerryUnRegResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RSACert : PBGeneratedMessage {
	unsigned hasKeyN : 1;
	unsigned hasKeyE : 1;
	NSString* keyN;
	NSString* keyE;
}
@property(assign) BOOL hasKeyE;
@property(assign) BOOL hasKeyN;
@property(retain) NSString* keyE;
@property(retain) NSString* keyN;
+(id)parseFromData:(id)data;
-(id)SetKeyE:(id)e;
-(id)SetKeyN:(id)n;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCertRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasRandomEncryKey : 1;
	unsigned hasCurrentCertVersion : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* randomEncryKey;
	unsigned currentCertVersion;
}
@property(assign) BOOL hasCurrentCertVersion;
@property(assign) BOOL hasRandomEncryKey;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned currentCertVersion;
@property(retain) SKBuiltinBuffer_t* randomEncryKey;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetCurrentCertVersion:(unsigned)version;
-(id)SetRandomEncryKey:(id)key;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetCertResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCertValue : 1;
	unsigned hasCertVersion : 1;
	BaseResponse* baseResponse;
	RSACert* certValue;
	unsigned certVersion;
}
@property(assign) BOOL hasCertVersion;
@property(assign) BOOL hasCertValue;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned certVersion;
@property(retain) RSACert* certValue;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCertVersion:(unsigned)version;
-(id)SetCertValue:(id)value;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface NewAuthRequest : PBGeneratedMessage {
	unsigned hasChannel : 1;
	unsigned hasAuthTicket : 1;
	unsigned hasSoftType : 1;
	unsigned hasDeviceType : 1;
	unsigned hasOstype : 1;
	unsigned hasDeviceModel : 1;
	unsigned hasDeviceBrand : 1;
	unsigned hasRealCountry : 1;
	unsigned hasSignature : 1;
	unsigned hasIphoneVer : 1;
	unsigned hasImei : 1;
	unsigned hasLanguage : 1;
	unsigned hasTimeZone : 1;
	unsigned hasExtPwd2 : 1;
	unsigned hasExtPwd : 1;
	unsigned hasAutoAuthTicket : 1;
	unsigned hasPwd2 : 1;
	unsigned hasDeviceName : 1;
	unsigned hasClientSeqId : 1;
	unsigned hasBundleId : 1;
	unsigned hasAdSource : 1;
	unsigned hasRandomEncryKey : 1;
	unsigned hasWtloginReqBuff : 1;
	unsigned hasKsid : 1;
	unsigned hasImgEncryptKey : 1;
	unsigned hasImgCode : 1;
	unsigned hasImgSid : 1;
	unsigned hasPwd : 1;
	unsigned hasUserName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasTimeStamp : 1;
	unsigned hasBuiltinIpseq : 1;
	unsigned hasInputType : 1;
	int channel;
	NSString* authTicket;
	NSString* softType;
	NSString* deviceType;
	NSString* ostype;
	NSString* deviceModel;
	NSString* deviceBrand;
	NSString* realCountry;
	NSString* signature;
	NSString* iphoneVer;
	NSString* imei;
	NSString* language;
	NSString* timeZone;
	NSString* extPwd2;
	NSString* extPwd;
	NSString* autoAuthTicket;
	NSString* pwd2;
	NSString* deviceName;
	NSString* clientSeqId;
	NSString* bundleId;
	NSString* adSource;
	SKBuiltinBuffer_t* randomEncryKey;
	SKBuiltinBuffer_t* wtloginReqBuff;
	SKBuiltinBuffer_t* ksid;
	SKBuiltinString_t* imgEncryptKey;
	SKBuiltinString_t* imgCode;
	SKBuiltinString_t* imgSid;
	SKBuiltinString_t* pwd;
	SKBuiltinString_t* userName;
	BaseRequest* baseRequest;
	unsigned timeStamp;
	unsigned builtinIpseq;
	unsigned inputType;
}
@property(assign) BOOL hasAdSource;
@property(assign) BOOL hasBundleId;
@property(assign) BOOL hasClientSeqId;
@property(assign) BOOL hasInputType;
@property(assign) BOOL hasWtloginReqBuff;
@property(assign) BOOL hasDeviceName;
@property(assign) BOOL hasAutoAuthTicket;
@property(assign) BOOL hasRandomEncryKey;
@property(assign) BOOL hasSignature;
@property(assign) BOOL hasRealCountry;
@property(assign) BOOL hasAuthTicket;
@property(assign) BOOL hasSoftType;
@property(assign) BOOL hasDeviceType;
@property(assign) BOOL hasOstype;
@property(assign) BOOL hasDeviceModel;
@property(assign) BOOL hasDeviceBrand;
@property(assign) BOOL hasTimeStamp;
@property(assign) BOOL hasKsid;
@property(assign) BOOL hasImgEncryptKey;
@property(assign) BOOL hasIphoneVer;
@property(assign) BOOL hasChannel;
@property(assign) BOOL hasImei;
@property(assign) BOOL hasLanguage;
@property(assign) BOOL hasTimeZone;
@property(assign) BOOL hasExtPwd2;
@property(assign) BOOL hasExtPwd;
@property(assign) BOOL hasBuiltinIpseq;
@property(assign) BOOL hasPwd2;
@property(assign) BOOL hasImgCode;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasPwd;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* adSource;
@property(retain) NSString* bundleId;
@property(retain) NSString* clientSeqId;
@property(assign) unsigned inputType;
@property(retain) SKBuiltinBuffer_t* wtloginReqBuff;
@property(retain) NSString* deviceName;
@property(retain) NSString* autoAuthTicket;
@property(retain) SKBuiltinBuffer_t* randomEncryKey;
@property(retain) NSString* signature;
@property(retain) NSString* realCountry;
@property(retain) NSString* authTicket;
@property(retain) NSString* softType;
@property(retain) NSString* deviceType;
@property(retain) NSString* ostype;
@property(retain) NSString* deviceModel;
@property(retain) NSString* deviceBrand;
@property(assign) unsigned timeStamp;
@property(retain) SKBuiltinBuffer_t* ksid;
@property(retain) SKBuiltinString_t* imgEncryptKey;
@property(retain) NSString* iphoneVer;
@property(assign) int channel;
@property(retain) NSString* imei;
@property(retain) NSString* language;
@property(retain) NSString* timeZone;
@property(retain) NSString* extPwd2;
@property(retain) NSString* extPwd;
@property(assign) unsigned builtinIpseq;
@property(retain) NSString* pwd2;
@property(retain) SKBuiltinString_t* imgCode;
@property(retain) SKBuiltinString_t* imgSid;
@property(retain) SKBuiltinString_t* pwd;
@property(retain) SKBuiltinString_t* userName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetAdSource:(id)source;
-(id)SetBundleId:(id)anId;
-(id)SetClientSeqId:(id)anId;
-(id)SetInputType:(unsigned)type;
-(id)SetWtloginReqBuff:(id)buff;
-(id)SetDeviceName:(id)name;
-(id)SetAutoAuthTicket:(id)ticket;
-(id)SetRandomEncryKey:(id)key;
-(id)SetSignature:(id)signature;
-(id)SetRealCountry:(id)country;
-(id)SetAuthTicket:(id)ticket;
-(id)SetSoftType:(id)type;
-(id)SetDeviceType:(id)type;
-(id)SetOstype:(id)ostype;
-(id)SetDeviceModel:(id)model;
-(id)SetDeviceBrand:(id)brand;
-(id)SetTimeStamp:(unsigned)stamp;
-(id)SetKsid:(id)ksid;
-(id)SetImgEncryptKey:(id)key;
-(id)SetIphoneVer:(id)ver;
-(id)SetChannel:(int)channel;
-(id)SetImei:(id)imei;
-(id)SetLanguage:(id)language;
-(id)SetTimeZone:(id)zone;
-(id)SetExtPwd2:(id)a2;
-(id)SetExtPwd:(id)pwd;
-(id)SetBuiltinIpseq:(unsigned)ipseq;
-(id)SetPwd2:(id)a2;
-(id)SetImgCode:(id)code;
-(id)SetImgSid:(id)sid;
-(id)SetPwd:(id)pwd;
-(id)SetUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface NewAuthResponse : PBGeneratedMessage {
	unsigned hasFsurl : 1;
	unsigned hasAlias : 1;
	unsigned hasPushMailSettingTicket : 1;
	unsigned hasAuthKey : 1;
	unsigned hasSid : 1;
	unsigned hasTicket : 1;
	unsigned hasPassword : 1;
	unsigned hasKickResponse : 1;
	unsigned hasApplyBetaUrl : 1;
	unsigned hasDeviceInfoXml : 1;
	unsigned hasSoftConfigXml : 1;
	unsigned hasAuthTicket : 1;
	unsigned hasHintMsg : 1;
	unsigned hasAutoAuthTicket : 1;
	unsigned hasNewHostList : 1;
	unsigned hasKsid : 1;
	unsigned hasA2Key : 1;
	unsigned hasImgEncryptKey : 1;
	unsigned hasPluginKeyList : 1;
	unsigned hasDnsInfo : 1;
	unsigned hasWtloginRspBuff : 1;
	unsigned hasShowStyle : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasUserName : 1;
	unsigned hasNickName : 1;
	unsigned hasBindEmail : 1;
	unsigned hasBindMobile : 1;
	unsigned hasImgSid : 1;
	unsigned hasImgBuf : 1;
	unsigned hasOfficialUserName : 1;
	unsigned hasOfficialNickName : 1;
	unsigned hasNetworkControl : 1;
	unsigned hasBuiltinIplist : 1;
	unsigned hasQqmicroBlogUserName : 1;
	unsigned hasSessionKey : 1;
	unsigned hasUin : 1;
	unsigned hasNextAuthType : 1;
	unsigned hasPluginFlag : 1;
	unsigned hasProfileFlag : 1;
	unsigned hasBindUin : 1;
	unsigned hasNeedSetEmailPwd : 1;
	unsigned hasObsoleteItem1 : 1;
	unsigned hasSafeDevice : 1;
	unsigned hasRegType : 1;
	unsigned hasSendCardBitFlag : 1;
	unsigned hasStatus : 1;
	unsigned hasPushMailStatus : 1;
	unsigned hasNewVersion : 1;
	unsigned hasIsAutoReg : 1;
	unsigned hasTimeStamp : 1;
	unsigned hasQqmicroBlogStatus : 1;
	NSString* fsurl;
	NSString* alias;
	NSString* pushMailSettingTicket;
	NSString* authKey;
	NSString* sid;
	NSString* ticket;
	NSString* password;
	NSString* kickResponse;
	NSString* applyBetaUrl;
	NSString* deviceInfoXml;
	NSString* softConfigXml;
	NSString* authTicket;
	NSString* hintMsg;
	NSString* autoAuthTicket;
	HostList* newHostList;
	SKBuiltinBuffer_t* ksid;
	SKBuiltinBuffer_t* a2Key;
	SKBuiltinString_t* imgEncryptKey;
	PluginKeyList* pluginKeyList;
	CDNDnsInfo* dnsInfo;
	SKBuiltinBuffer_t* wtloginRspBuff;
	ShowStyleKey* showStyle;
	BaseResponse* baseResponse;
	SKBuiltinString_t* userName;
	SKBuiltinString_t* nickName;
	SKBuiltinString_t* bindEmail;
	SKBuiltinString_t* bindMobile;
	SKBuiltinString_t* imgSid;
	SKBuiltinBuffer_t* imgBuf;
	SKBuiltinString_t* officialUserName;
	SKBuiltinString_t* officialNickName;
	NetworkControl* networkControl;
	BuiltinIPList* builtinIplist;
	SKBuiltinString_t* qqmicroBlogUserName;
	NSData* sessionKey;
	unsigned uin;
	unsigned nextAuthType;
	unsigned pluginFlag;
	unsigned profileFlag;
	unsigned bindUin;
	unsigned needSetEmailPwd;
	unsigned obsoleteItem1;
	unsigned safeDevice;
	unsigned regType;
	unsigned sendCardBitFlag;
	unsigned status;
	unsigned pushMailStatus;
	unsigned newVersion;
	unsigned isAutoReg;
	unsigned timeStamp;
	unsigned qqmicroBlogStatus;
}
@property(assign) BOOL hasShowStyle;
@property(assign) BOOL hasWtloginRspBuff;
@property(assign) BOOL hasNextAuthType;
@property(assign) BOOL hasDnsInfo;
@property(assign) BOOL hasAutoAuthTicket;
@property(assign) BOOL hasHintMsg;
@property(assign) BOOL hasNeedSetEmailPwd;
@property(assign) BOOL hasObsoleteItem1;
@property(assign) BOOL hasSafeDevice;
@property(assign) BOOL hasAuthTicket;
@property(assign) BOOL hasNewHostList;
@property(assign) BOOL hasSoftConfigXml;
@property(assign) BOOL hasDeviceInfoXml;
@property(assign) BOOL hasApplyBetaUrl;
@property(assign) BOOL hasKickResponse;
@property(assign) BOOL hasIsAutoReg;
@property(assign) BOOL hasTimeStamp;
@property(assign) BOOL hasPassword;
@property(assign) BOOL hasProfileFlag;
@property(assign) BOOL hasKsid;
@property(assign) BOOL hasA2Key;
@property(assign) BOOL hasImgEncryptKey;
@property(assign) BOOL hasPluginKeyList;
@property(assign) BOOL hasSid;
@property(assign) BOOL hasAuthKey;
@property(assign) BOOL hasRegType;
@property(assign) BOOL hasAlias;
@property(assign) BOOL hasPluginFlag;
@property(assign) BOOL hasNetworkControl;
@property(assign) BOOL hasFsurl;
@property(assign) BOOL hasBuiltinIplist;
@property(assign) BOOL hasPushMailSettingTicket;
@property(assign) BOOL hasSendCardBitFlag;
@property(assign) BOOL hasPushMailStatus;
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasNewVersion;
@property(assign) BOOL hasQqmicroBlogStatus;
@property(assign) BOOL hasQqmicroBlogUserName;
@property(assign) BOOL hasOfficialNickName;
@property(assign) BOOL hasOfficialUserName;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasImgSid;
@property(assign) BOOL hasSessionKey;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasBindMobile;
@property(assign) BOOL hasBindEmail;
@property(assign) BOOL hasBindUin;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasUin;
@property(assign) BOOL hasBaseResponse;
@property(retain) ShowStyleKey* showStyle;
@property(retain) SKBuiltinBuffer_t* wtloginRspBuff;
@property(assign) unsigned nextAuthType;
@property(retain) CDNDnsInfo* dnsInfo;
@property(retain) NSString* autoAuthTicket;
@property(retain) NSString* hintMsg;
@property(assign) unsigned needSetEmailPwd;
@property(assign) unsigned obsoleteItem1;
@property(assign) unsigned safeDevice;
@property(retain) NSString* authTicket;
@property(retain) HostList* newHostList;
@property(retain) NSString* softConfigXml;
@property(retain) NSString* deviceInfoXml;
@property(retain) NSString* applyBetaUrl;
@property(retain) NSString* kickResponse;
@property(assign) unsigned isAutoReg;
@property(assign) unsigned timeStamp;
@property(retain) NSString* password;
@property(assign) unsigned profileFlag;
@property(retain) SKBuiltinBuffer_t* ksid;
@property(retain) SKBuiltinBuffer_t* a2Key;
@property(retain) SKBuiltinString_t* imgEncryptKey;
@property(retain) PluginKeyList* pluginKeyList;
@property(retain) NSString* sid;
@property(retain) NSString* authKey;
@property(assign) unsigned regType;
@property(retain) NSString* alias;
@property(assign) unsigned pluginFlag;
@property(retain) NetworkControl* networkControl;
@property(retain) NSString* fsurl;
@property(retain) BuiltinIPList* builtinIplist;
@property(retain) NSString* pushMailSettingTicket;
@property(assign) unsigned sendCardBitFlag;
@property(assign) unsigned pushMailStatus;
@property(retain) NSString* ticket;
@property(assign) unsigned newVersion;
@property(assign) unsigned qqmicroBlogStatus;
@property(retain) SKBuiltinString_t* qqmicroBlogUserName;
@property(retain) SKBuiltinString_t* officialNickName;
@property(retain) SKBuiltinString_t* officialUserName;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(retain) SKBuiltinString_t* imgSid;
@property(retain) NSData* sessionKey;
@property(assign) unsigned status;
@property(retain) SKBuiltinString_t* bindMobile;
@property(retain) SKBuiltinString_t* bindEmail;
@property(assign) unsigned bindUin;
@property(retain) SKBuiltinString_t* nickName;
@property(retain) SKBuiltinString_t* userName;
@property(assign) unsigned uin;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetShowStyle:(id)style;
-(id)SetWtloginRspBuff:(id)buff;
-(id)SetNextAuthType:(unsigned)type;
-(id)SetDnsInfo:(id)info;
-(id)SetAutoAuthTicket:(id)ticket;
-(id)SetHintMsg:(id)msg;
-(id)SetNeedSetEmailPwd:(unsigned)pwd;
-(id)SetObsoleteItem1:(unsigned)a1;
-(id)SetSafeDevice:(unsigned)device;
-(id)SetAuthTicket:(id)ticket;
-(id)SetNewHostList:(id)list;
-(id)SetSoftConfigXml:(id)xml;
-(id)SetDeviceInfoXml:(id)xml;
-(id)SetApplyBetaUrl:(id)url;
-(id)SetKickResponse:(id)response;
-(id)SetIsAutoReg:(unsigned)reg;
-(id)SetTimeStamp:(unsigned)stamp;
-(id)SetPassword:(id)password;
-(id)SetProfileFlag:(unsigned)flag;
-(id)SetKsid:(id)ksid;
-(id)SetA2Key:(id)key;
-(id)SetImgEncryptKey:(id)key;
-(id)SetPluginKeyList:(id)list;
-(id)SetSid:(id)sid;
-(id)SetAuthKey:(id)key;
-(id)SetRegType:(unsigned)type;
-(id)SetAlias:(id)alias;
-(id)SetPluginFlag:(unsigned)flag;
-(id)SetNetworkControl:(id)control;
-(id)SetFsurl:(id)fsurl;
-(id)SetBuiltinIplist:(id)iplist;
-(id)SetPushMailSettingTicket:(id)ticket;
-(id)SetSendCardBitFlag:(unsigned)flag;
-(id)SetPushMailStatus:(unsigned)status;
-(id)SetTicket:(id)ticket;
-(id)SetNewVersion:(unsigned)version;
-(id)SetQqmicroBlogStatus:(unsigned)status;
-(id)SetQqmicroBlogUserName:(id)name;
-(id)SetOfficialNickName:(id)name;
-(id)SetOfficialUserName:(id)name;
-(id)SetImgBuf:(id)buf;
-(id)SetImgSid:(id)sid;
-(id)SetSessionKey:(id)key;
-(id)SetStatus:(unsigned)status;
-(id)SetBindMobile:(id)mobile;
-(id)SetBindEmail:(id)email;
-(id)SetBindUin:(unsigned)uin;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)SetUin:(unsigned)uin;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BindGoogleContactRequest : PBGeneratedMessage {
	unsigned hasGoogleContactName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpcode : 1;
	unsigned hasForce : 1;
	NSString* googleContactName;
	BaseRequest* baseRequest;
	unsigned opcode;
	unsigned force;
}
@property(assign) BOOL hasForce;
@property(assign) BOOL hasGoogleContactName;
@property(assign) BOOL hasOpcode;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned force;
@property(retain) NSString* googleContactName;
@property(assign) unsigned opcode;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetForce:(unsigned)force;
-(id)SetGoogleContactName:(id)name;
-(id)SetOpcode:(unsigned)opcode;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BindGoogleContactResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetLoginURLRequest : PBGeneratedMessage {
	unsigned hasUuid : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasFromDeviceId : 1;
	NSString* uuid;
	BaseRequest* baseRequest;
	NSData* fromDeviceId;
}
@property(assign) BOOL hasFromDeviceId;
@property(assign) BOOL hasUuid;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSData* fromDeviceId;
@property(retain) NSString* uuid;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetFromDeviceId:(id)deviceId;
-(id)SetUuid:(id)uuid;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetLoginURLResponse : PBGeneratedMessage {
	unsigned hasUrl : 1;
	unsigned hasBaseResponse : 1;
	NSString* url;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasUrl;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* url;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetUrl:(id)url;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatUploadHeadRequest : PBGeneratedMessage {
	unsigned hasKey : 1;
	unsigned hasBakChatClientId : 1;
	unsigned hasBakChatName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasEncryptType : 1;
	int key;
	NSString* bakChatClientId;
	NSString* bakChatName;
	BaseRequest* baseRequest;
	unsigned encryptType;
}
@property(assign) BOOL hasEncryptType;
@property(assign) BOOL hasKey;
@property(assign) BOOL hasBakChatName;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned encryptType;
@property(assign) int key;
@property(retain) NSString* bakChatName;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetEncryptType:(unsigned)type;
-(id)SetKey:(int)key;
-(id)SetBakChatName:(id)name;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatUploadHeadResponse : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBakChatSvrId : 1;
	NSString* bakChatClientId;
	BaseResponse* baseResponse;
	unsigned bakChatSvrId;
}
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned bakChatSvrId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatUploadEndRequest : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasBakChatSvrId : 1;
	unsigned hasNetworkType : 1;
	NSString* bakChatClientId;
	BaseRequest* baseRequest;
	unsigned bakChatSvrId;
	unsigned networkType;
}
@property(assign) BOOL hasNetworkType;
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned networkType;
@property(assign) unsigned bakChatSvrId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetNetworkType:(unsigned)type;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatUploadEndResponse : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBakChatSvrId : 1;
	NSString* bakChatClientId;
	BaseResponse* baseResponse;
	unsigned bakChatSvrId;
}
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned bakChatSvrId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatMsgItem : PBGeneratedMessage {
	unsigned hasClientMsgId : 1;
	unsigned hasMsgSource : 1;
	unsigned hasFromUserName : 1;
	unsigned hasToUserName : 1;
	unsigned hasContent : 1;
	unsigned hasBuffer : 1;
	unsigned hasType : 1;
	unsigned hasMsgStatus : 1;
	unsigned hasClientMsgTime : 1;
	unsigned hasMsgId : 1;
	unsigned hasMediaIdCount : 1;
	unsigned hasBufferLength : 1;
	unsigned hasBufferType : 1;
	NSString* clientMsgId;
	NSString* msgSource;
	SKBuiltinString_t* fromUserName;
	SKBuiltinString_t* toUserName;
	SKBuiltinString_t* content;
	SKBuiltinBuffer_t* buffer;
	unsigned type;
	unsigned msgStatus;
	unsigned clientMsgTime;
	unsigned msgId;
	unsigned mediaIdCount;
	unsigned bufferLength;
	unsigned bufferType;
	NSMutableArray* mutableMediaIdList;
	NSMutableArray* mutableMediaTypeList;
}
@property(assign) BOOL hasBufferType;
@property(assign) BOOL hasBufferLength;
@property(assign) BOOL hasBuffer;
@property(retain) NSMutableArray* mutableMediaTypeList;
@property(retain) NSMutableArray* mutableMediaIdList;
@property(assign) BOOL hasMediaIdCount;
@property(assign) BOOL hasMsgId;
@property(assign) BOOL hasMsgSource;
@property(assign) BOOL hasClientMsgTime;
@property(assign) BOOL hasMsgStatus;
@property(assign) BOOL hasContent;
@property(assign) BOOL hasToUserName;
@property(assign) BOOL hasFromUserName;
@property(assign) BOOL hasClientMsgId;
@property(assign) BOOL hasType;
@property(assign) unsigned bufferType;
@property(assign) unsigned bufferLength;
@property(retain) SKBuiltinBuffer_t* buffer;
@property(assign) unsigned mediaIdCount;
@property(assign) unsigned msgId;
@property(retain) NSString* msgSource;
@property(assign) unsigned clientMsgTime;
@property(assign) unsigned msgStatus;
@property(retain) SKBuiltinString_t* content;
@property(retain) SKBuiltinString_t* toUserName;
@property(retain) SKBuiltinString_t* fromUserName;
@property(retain) NSString* clientMsgId;
@property(assign) unsigned type;
+(id)parseFromData:(id)data;
-(id)SetBufferType:(unsigned)type;
-(id)SetBufferLength:(unsigned)length;
-(id)SetBuffer:(id)buffer;
-(id)addMediaType:(id)type;
-(id)addMediaTypeFromArray:(id)array;
-(id)addMediaId:(id)anId;
-(id)addMediaIdFromArray:(id)array;
-(id)SetMediaIdCount:(unsigned)count;
-(id)SetMsgId:(unsigned)anId;
-(id)SetMsgSource:(id)source;
-(id)SetClientMsgTime:(unsigned)time;
-(id)SetMsgStatus:(unsigned)status;
-(id)SetContent:(id)content;
-(id)SetToUserName:(id)userName;
-(id)SetFromUserName:(id)userName;
-(id)SetClientMsgId:(id)anId;
-(id)SetType:(unsigned)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)mediaTypeList;
-(id)mediaIdList;
-(id)init;
-(void)dealloc;
@end

@interface BakChatMsgList : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface BakChatUploadMsgRequest : PBGeneratedMessage <NSCoding> {
	unsigned hasBakChatClientId : 1;
	unsigned hasClientMsgId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasDataBuffer : 1;
	unsigned hasBakChatSvrId : 1;
	unsigned hasDataLen : 1;
	NSString* bakChatClientId;
	NSString* clientMsgId;
	BaseRequest* baseRequest;
	BakChatMsgList* data;
	SKBuiltinBuffer_t* dataBuffer;
	unsigned bakChatSvrId;
	unsigned dataLen;
}
@property(assign) BOOL hasDataBuffer;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasData;
@property(assign) BOOL hasClientMsgId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* dataBuffer;
@property(assign) unsigned dataLen;
@property(assign) unsigned bakChatSvrId;
@property(retain) BakChatMsgList* data;
@property(retain) NSString* clientMsgId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetDataBuffer:(id)buffer;
-(id)SetDataLen:(unsigned)len;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetData:(id)data;
-(id)SetClientMsgId:(id)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface BakChatUploadMsgResponse : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasClientMsgId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBakChatSvrId : 1;
	NSString* bakChatClientId;
	NSString* clientMsgId;
	BaseResponse* baseResponse;
	unsigned bakChatSvrId;
}
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasClientMsgId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned bakChatSvrId;
@property(retain) NSString* clientMsgId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetClientMsgId:(id)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatUploadMediaRequest : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasMediaId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasOffset : 1;
	unsigned hasLength : 1;
	unsigned hasEndFlag : 1;
	unsigned hasCancelFlag : 1;
	unsigned hasBakChatSvrId : 1;
	NSString* bakChatClientId;
	NSString* mediaId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned offset;
	unsigned length;
	unsigned endFlag;
	unsigned cancelFlag;
	unsigned bakChatSvrId;
}
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasCancelFlag;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasData;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasLength;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned bakChatSvrId;
@property(assign) unsigned cancelFlag;
@property(assign) unsigned endFlag;
@property(retain) SKBuiltinBuffer_t* data;
@property(retain) NSString* mediaId;
@property(assign) unsigned length;
@property(assign) unsigned offset;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetCancelFlag:(unsigned)flag;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetData:(id)data;
-(id)SetMediaId:(id)anId;
-(id)SetLength:(unsigned)length;
-(id)SetOffset:(unsigned)offset;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatUploadMediaResponse : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasMediaId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasOffset : 1;
	unsigned hasMaxLength : 1;
	unsigned hasCreateTime : 1;
	unsigned hasEndFlag : 1;
	unsigned hasCancelFlag : 1;
	unsigned hasBakChatSvrId : 1;
	NSString* bakChatClientId;
	NSString* mediaId;
	BaseResponse* baseResponse;
	unsigned offset;
	unsigned maxLength;
	unsigned createTime;
	unsigned endFlag;
	unsigned cancelFlag;
	unsigned bakChatSvrId;
}
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasCancelFlag;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasMaxLength;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned bakChatSvrId;
@property(assign) unsigned cancelFlag;
@property(assign) unsigned endFlag;
@property(retain) NSString* mediaId;
@property(assign) unsigned createTime;
@property(assign) unsigned maxLength;
@property(assign) unsigned offset;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetCancelFlag:(unsigned)flag;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetMediaId:(id)anId;
-(id)SetCreateTime:(unsigned)time;
-(id)SetMaxLength:(unsigned)length;
-(id)SetOffset:(unsigned)offset;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatItem : PBGeneratedMessage {
	unsigned hasClientVersion : 1;
	unsigned hasKey : 1;
	unsigned hasBakChatClientId : 1;
	unsigned hasBakChatName : 1;
	unsigned hasWording : 1;
	unsigned hasDeviceId : 1;
	unsigned hasDeviceType : 1;
	unsigned hasScene : 1;
	unsigned hasCreateTime : 1;
	unsigned hasBakChatSvrId : 1;
	unsigned hasBakChatSize : 1;
	unsigned hasUpdateTime : 1;
	unsigned hasDeviceNum : 1;
	unsigned hasNeedPwd : 1;
	unsigned hasEncryptType : 1;
	int clientVersion;
	int key;
	NSString* bakChatClientId;
	NSString* bakChatName;
	SKBuiltinString_t* wording;
	NSData* deviceId;
	NSData* deviceType;
	unsigned scene;
	unsigned createTime;
	unsigned bakChatSvrId;
	unsigned bakChatSize;
	unsigned updateTime;
	unsigned deviceNum;
	unsigned needPwd;
	unsigned encryptType;
}
@property(assign) BOOL hasEncryptType;
@property(assign) BOOL hasKey;
@property(assign) BOOL hasWording;
@property(assign) BOOL hasNeedPwd;
@property(assign) BOOL hasDeviceNum;
@property(assign) BOOL hasUpdateTime;
@property(assign) BOOL hasBakChatSize;
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasDeviceType;
@property(assign) BOOL hasClientVersion;
@property(assign) BOOL hasDeviceId;
@property(assign) BOOL hasBakChatName;
@property(assign) BOOL hasBakChatClientId;
@property(assign) unsigned encryptType;
@property(assign) int key;
@property(retain) SKBuiltinString_t* wording;
@property(assign) unsigned needPwd;
@property(assign) unsigned deviceNum;
@property(assign) unsigned updateTime;
@property(assign) unsigned bakChatSize;
@property(assign) unsigned bakChatSvrId;
@property(assign) unsigned createTime;
@property(assign) unsigned scene;
@property(retain) NSData* deviceType;
@property(assign) int clientVersion;
@property(retain) NSData* deviceId;
@property(retain) NSString* bakChatName;
@property(retain) NSString* bakChatClientId;
+(id)parseFromData:(id)data;
-(id)SetEncryptType:(unsigned)type;
-(id)SetKey:(int)key;
-(id)SetWording:(id)wording;
-(id)SetNeedPwd:(unsigned)pwd;
-(id)SetDeviceNum:(unsigned)num;
-(id)SetUpdateTime:(unsigned)time;
-(id)SetBakChatSize:(unsigned)size;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetCreateTime:(unsigned)time;
-(id)SetScene:(unsigned)scene;
-(id)SetDeviceType:(id)type;
-(id)SetClientVersion:(int)version;
-(id)SetDeviceId:(id)anId;
-(id)SetBakChatName:(id)name;
-(id)SetBakChatClientId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatRecoverGetListRequest : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasBaseRequest : 1;
	NSString* bakChatClientId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatRecoverGetListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface BakChatRecoverHeadRequest : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasBakChatSvrId : 1;
	unsigned hasStartIndex : 1;
	unsigned hasMaxLength : 1;
	unsigned hasType : 1;
	NSString* bakChatClientId;
	BaseRequest* baseRequest;
	unsigned bakChatSvrId;
	unsigned startIndex;
	unsigned maxLength;
	unsigned type;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasMaxLength;
@property(assign) BOOL hasStartIndex;
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned type;
@property(assign) unsigned maxLength;
@property(assign) unsigned startIndex;
@property(assign) unsigned bakChatSvrId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetMaxLength:(unsigned)length;
-(id)SetStartIndex:(unsigned)index;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatRecoverHeadResponse : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	unsigned hasBakChatSvrId : 1;
	unsigned hasStartIndex : 1;
	unsigned hasType : 1;
	unsigned hasEndFlag : 1;
	unsigned hasTotalCount : 1;
	NSString* bakChatClientId;
	BaseResponse* baseResponse;
	unsigned count;
	unsigned bakChatSvrId;
	unsigned startIndex;
	unsigned type;
	unsigned endFlag;
	unsigned totalCount;
	NSMutableArray* mutableListList;
}
@property(assign) BOOL hasTotalCount;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasType;
@property(assign) BOOL hasStartIndex;
@property(assign) BOOL hasBakChatSvrId;
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned totalCount;
@property(assign) unsigned endFlag;
@property(assign) unsigned type;
@property(assign) unsigned startIndex;
@property(assign) unsigned bakChatSvrId;
@property(assign) unsigned count;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetTotalCount:(unsigned)count;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetType:(unsigned)type;
-(id)SetStartIndex:(unsigned)index;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface BakChatRecoverDataRequest : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasClientMsgId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasBakChatSvrId : 1;
	unsigned hasOffset : 1;
	unsigned hasMaxLength : 1;
	unsigned hasCancelFlag : 1;
	unsigned hasType : 1;
	NSString* bakChatClientId;
	NSString* clientMsgId;
	BaseRequest* baseRequest;
	unsigned bakChatSvrId;
	unsigned offset;
	unsigned maxLength;
	unsigned cancelFlag;
	unsigned type;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasCancelFlag;
@property(assign) BOOL hasMaxLength;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasClientMsgId;
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned type;
@property(assign) unsigned cancelFlag;
@property(assign) unsigned maxLength;
@property(assign) unsigned offset;
@property(retain) NSString* clientMsgId;
@property(assign) unsigned bakChatSvrId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetCancelFlag:(unsigned)flag;
-(id)SetMaxLength:(unsigned)length;
-(id)SetOffset:(unsigned)offset;
-(id)SetClientMsgId:(id)anId;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatRecoverDataResponse : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasClientMsgId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasData : 1;
	unsigned hasBakChatSvrId : 1;
	unsigned hasOffset : 1;
	unsigned hasLength : 1;
	unsigned hasEndFlag : 1;
	unsigned hasCancelFlag : 1;
	unsigned hasTotalLen : 1;
	NSString* bakChatClientId;
	NSString* clientMsgId;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* data;
	unsigned bakChatSvrId;
	unsigned offset;
	unsigned length;
	unsigned endFlag;
	unsigned cancelFlag;
	unsigned totalLen;
}
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasCancelFlag;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasData;
@property(assign) BOOL hasLength;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasClientMsgId;
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned totalLen;
@property(assign) unsigned cancelFlag;
@property(assign) unsigned endFlag;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned length;
@property(assign) unsigned offset;
@property(retain) NSString* clientMsgId;
@property(assign) unsigned bakChatSvrId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetTotalLen:(unsigned)len;
-(id)SetCancelFlag:(unsigned)flag;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetData:(id)data;
-(id)SetLength:(unsigned)length;
-(id)SetOffset:(unsigned)offset;
-(id)SetClientMsgId:(id)anId;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatDeleteRequest : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasBakChatSvrId : 1;
	NSString* bakChatClientId;
	BaseRequest* baseRequest;
	unsigned bakChatSvrId;
}
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned bakChatSvrId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatDeleteResponse : PBGeneratedMessage {
	unsigned hasBakChatClientId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBakChatSvrId : 1;
	NSString* bakChatClientId;
	BaseResponse* baseResponse;
	unsigned bakChatSvrId;
}
@property(assign) BOOL hasBakChatSvrId;
@property(assign) BOOL hasBakChatClientId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned bakChatSvrId;
@property(retain) NSString* bakChatClientId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBakChatSvrId:(unsigned)anId;
-(id)SetBakChatClientId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatUploadDBRequest : PBGeneratedMessage {
	unsigned hasMediaId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasOffset : 1;
	unsigned hasLength : 1;
	unsigned hasEndFlag : 1;
	unsigned hasCancelFlag : 1;
	unsigned hasTotalLen : 1;
	NSString* mediaId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned offset;
	unsigned length;
	unsigned endFlag;
	unsigned cancelFlag;
	unsigned totalLen;
}
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasCancelFlag;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasData;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasLength;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned totalLen;
@property(assign) unsigned cancelFlag;
@property(assign) unsigned endFlag;
@property(retain) SKBuiltinBuffer_t* data;
@property(retain) NSString* mediaId;
@property(assign) unsigned length;
@property(assign) unsigned offset;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTotalLen:(unsigned)len;
-(id)SetCancelFlag:(unsigned)flag;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetData:(id)data;
-(id)SetMediaId:(id)anId;
-(id)SetLength:(unsigned)length;
-(id)SetOffset:(unsigned)offset;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatUploadDBResponse : PBGeneratedMessage {
	unsigned hasMediaId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasOffset : 1;
	unsigned hasMaxLength : 1;
	unsigned hasEndFlag : 1;
	unsigned hasCancelFlag : 1;
	NSString* mediaId;
	BaseResponse* baseResponse;
	unsigned offset;
	unsigned maxLength;
	unsigned endFlag;
	unsigned cancelFlag;
}
@property(assign) BOOL hasCancelFlag;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasMaxLength;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned cancelFlag;
@property(assign) unsigned endFlag;
@property(retain) NSString* mediaId;
@property(assign) unsigned maxLength;
@property(assign) unsigned offset;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCancelFlag:(unsigned)flag;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetMediaId:(id)anId;
-(id)SetMaxLength:(unsigned)length;
-(id)SetOffset:(unsigned)offset;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatRecoverDBRequest : PBGeneratedMessage {
	unsigned hasMediaId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOffset : 1;
	unsigned hasMaxLength : 1;
	NSString* mediaId;
	BaseRequest* baseRequest;
	unsigned offset;
	unsigned maxLength;
}
@property(assign) BOOL hasMaxLength;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned maxLength;
@property(assign) unsigned offset;
@property(retain) NSString* mediaId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetMaxLength:(unsigned)length;
-(id)SetOffset:(unsigned)offset;
-(id)SetMediaId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BakChatRecoverDBResponse : PBGeneratedMessage {
	unsigned hasMediaId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasData : 1;
	unsigned hasOffset : 1;
	unsigned hasLength : 1;
	unsigned hasEndFlag : 1;
	unsigned hasTotalLen : 1;
	NSString* mediaId;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* data;
	unsigned offset;
	unsigned length;
	unsigned endFlag;
	unsigned totalLen;
}
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasEndFlag;
@property(assign) BOOL hasData;
@property(assign) BOOL hasLength;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasMediaId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned totalLen;
@property(assign) unsigned endFlag;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned length;
@property(assign) unsigned offset;
@property(retain) NSString* mediaId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetTotalLen:(unsigned)len;
-(id)SetEndFlag:(unsigned)flag;
-(id)SetData:(id)data;
-(id)SetLength:(unsigned)length;
-(id)SetOffset:(unsigned)offset;
-(id)SetMediaId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ConversationMsgInfo : PBGeneratedMessage {
	unsigned hasMsgId : 1;
	unsigned msgId;
}
@property(assign) BOOL hasMsgId;
@property(assign) unsigned msgId;
+(id)parseFromData:(id)data;
-(id)SetMsgId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CheckConversationFileRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableMsgInfoListList;
}
@property(retain) NSMutableArray* mutableMsgInfoListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addMsgInfoList:(id)list;
-(id)addMsgInfoListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)msgInfoListList;
-(id)init;
-(void)dealloc;
@end

@interface ConversationFileInfo : PBGeneratedMessage {
	unsigned hasAttachId : 1;
	unsigned hasMsgId : 1;
	unsigned hasStatus : 1;
	unsigned hasFileSize : 1;
	NSString* attachId;
	unsigned msgId;
	unsigned status;
	unsigned fileSize;
}
@property(assign) BOOL hasFileSize;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasAttachId;
@property(assign) BOOL hasMsgId;
@property(assign) unsigned fileSize;
@property(assign) unsigned status;
@property(retain) NSString* attachId;
@property(assign) unsigned msgId;
+(id)parseFromData:(id)data;
-(id)SetFileSize:(unsigned)size;
-(id)SetStatus:(unsigned)status;
-(id)SetAttachId:(id)anId;
-(id)SetMsgId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CheckConversationFileResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableFileInfoListList;
}
@property(retain) NSMutableArray* mutableFileInfoListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addFileInfoList:(id)list;
-(id)addFileInfoListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)fileInfoListList;
-(id)init;
-(void)dealloc;
@end

@interface UploadFileRequest : PBGeneratedMessage {
	unsigned hasClientId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasDataLen : 1;
	NSString* clientId;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned totalLen;
	unsigned startPos;
	unsigned dataLen;
}
@property(assign) BOOL hasData;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned dataLen;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) NSString* clientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetData:(id)data;
-(id)SetDataLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UploadFileResponse : PBGeneratedMessage {
	unsigned hasAttachId : 1;
	unsigned hasClientId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	NSString* attachId;
	NSString* clientId;
	BaseResponse* baseResponse;
	unsigned startPos;
	unsigned totalLen;
}
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasAttachId;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* clientId;
@property(assign) unsigned totalLen;
@property(retain) NSString* attachId;
@property(assign) unsigned startPos;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetClientId:(id)anId;
-(id)SetTotalLen:(unsigned)len;
-(id)SetAttachId:(id)anId;
-(id)SetStartPos:(unsigned)pos;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ComposeSendRequest : PBGeneratedMessage {
	unsigned hasClientId : 1;
	unsigned hasFromUser : 1;
	unsigned hasToUserList : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasData : 1;
	unsigned hasTotalLen : 1;
	unsigned hasStartPos : 1;
	unsigned hasDataLen : 1;
	unsigned hasRealSize : 1;
	NSString* clientId;
	NSString* fromUser;
	NSString* toUserList;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* data;
	unsigned totalLen;
	unsigned startPos;
	unsigned dataLen;
	unsigned realSize;
}
@property(assign) BOOL hasRealSize;
@property(assign) BOOL hasToUserList;
@property(assign) BOOL hasFromUser;
@property(assign) BOOL hasData;
@property(assign) BOOL hasDataLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned realSize;
@property(retain) NSString* toUserList;
@property(retain) NSString* fromUser;
@property(retain) SKBuiltinBuffer_t* data;
@property(assign) unsigned dataLen;
@property(assign) unsigned startPos;
@property(assign) unsigned totalLen;
@property(retain) NSString* clientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRealSize:(unsigned)size;
-(id)SetToUserList:(id)userList;
-(id)SetFromUser:(id)user;
-(id)SetData:(id)data;
-(id)SetDataLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetTotalLen:(unsigned)len;
-(id)SetClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ComposeSendResponse : PBGeneratedMessage {
	unsigned hasClientId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasStartPos : 1;
	unsigned hasTotalLen : 1;
	NSString* clientId;
	BaseResponse* baseResponse;
	unsigned startPos;
	unsigned totalLen;
}
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasTotalLen;
@property(assign) BOOL hasStartPos;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* clientId;
@property(assign) unsigned totalLen;
@property(assign) unsigned startPos;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetClientId:(id)anId;
-(id)SetTotalLen:(unsigned)len;
-(id)SetStartPos:(unsigned)pos;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TalkRoomMember : PBGeneratedMessage {
	unsigned hasMemberId : 1;
	unsigned hasUserName : 1;
	int memberId;
	NSString* userName;
}
@property(assign) BOOL hasUserName;
@property(assign) BOOL hasMemberId;
@property(retain) NSString* userName;
@property(assign) int memberId;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)SetMemberId:(int)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EnterTalkRoomReq : PBGeneratedMessage {
	unsigned hasToUsername : 1;
	unsigned hasBaseRequest : 1;
	NSString* toUsername;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasToUsername;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* toUsername;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetToUsername:(id)username;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EnterTalkRoomResp : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasMicSeq : 1;
	unsigned hasMemberNum : 1;
	unsigned hasMyRoomMemberId : 1;
	unsigned hasBaseResponse : 1;
	long long roomKey;
	int roomId;
	int micSeq;
	int memberNum;
	int myRoomMemberId;
	BaseResponse* baseResponse;
	NSMutableArray* mutableMemberListList;
}
@property(assign) BOOL hasMyRoomMemberId;
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberNum;
@property(assign) BOOL hasMicSeq;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseResponse;
@property(assign) int myRoomMemberId;
@property(assign) int memberNum;
@property(assign) int micSeq;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetMyRoomMemberId:(int)anId;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberNum:(int)num;
-(id)SetMicSeq:(int)seq;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface ExitTalkRoomReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasToUsername : 1;
	unsigned hasBaseRequest : 1;
	long long roomKey;
	int roomId;
	NSString* toUsername;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasToUsername;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* toUsername;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetToUsername:(id)username;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ExitTalkRoomResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TalkMicActionReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasActionType : 1;
	unsigned hasUpdateTime : 1;
	long long roomKey;
	int roomId;
	BaseRequest* baseRequest;
	unsigned actionType;
	unsigned updateTime;
}
@property(assign) BOOL hasUpdateTime;
@property(assign) BOOL hasActionType;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned updateTime;
@property(assign) unsigned actionType;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUpdateTime:(unsigned)time;
-(id)SetActionType:(unsigned)type;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TalkMicActionResp : PBGeneratedMessage {
	unsigned hasMicSeq : 1;
	unsigned hasBaseResponse : 1;
	int micSeq;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasMicSeq;
@property(assign) BOOL hasBaseResponse;
@property(assign) int micSeq;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetMicSeq:(int)seq;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TalkNoopReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasUpdateTime : 1;
	long long roomKey;
	int roomId;
	BaseRequest* baseRequest;
	unsigned updateTime;
}
@property(assign) BOOL hasUpdateTime;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned updateTime;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUpdateTime:(unsigned)time;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TalkNoopResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetTalkRoomMemberReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseRequest : 1;
	long long roomKey;
	int roomId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseRequest;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetTalkRoomMemberResp : PBGeneratedMessage {
	unsigned hasMicSeq : 1;
	unsigned hasMemberNum : 1;
	unsigned hasBaseResponse : 1;
	int micSeq;
	int memberNum;
	BaseResponse* baseResponse;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberNum;
@property(assign) BOOL hasMicSeq;
@property(assign) BOOL hasBaseResponse;
@property(assign) int memberNum;
@property(assign) int micSeq;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberNum:(int)num;
-(id)SetMicSeq:(int)seq;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface TalkInviteReq : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasBaseRequest : 1;
	long long roomKey;
	int roomId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasBaseRequest;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TalkInviteResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TalkStatReportData : PBGeneratedMessage {
	unsigned hasLogId : 1;
	unsigned hasStatReport : 1;
	int logId;
	SKBuiltinString_t* statReport;
}
@property(assign) BOOL hasStatReport;
@property(assign) BOOL hasLogId;
@property(retain) SKBuiltinString_t* statReport;
@property(assign) int logId;
+(id)parseFromData:(id)data;
-(id)SetStatReport:(id)report;
-(id)SetLogId:(int)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TalkStatReportReq : PBGeneratedMessage {
	unsigned hasDataNum : 1;
	unsigned hasBaseRequest : 1;
	int dataNum;
	BaseRequest* baseRequest;
	NSMutableArray* mutableReportDataList;
}
@property(retain) NSMutableArray* mutableReportDataList;
@property(assign) BOOL hasDataNum;
@property(assign) BOOL hasBaseRequest;
@property(assign) int dataNum;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addReportData:(id)data;
-(id)addReportDataFromArray:(id)array;
-(id)SetDataNum:(int)num;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)reportDataList;
-(id)init;
-(void)dealloc;
@end

@interface TalkStatReportResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CreateTalkRoomRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasTopic : 1;
	unsigned hasMemberCount : 1;
	BaseRequest* baseRequest;
	SKBuiltinString_t* topic;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasTopic;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned memberCount;
@property(retain) SKBuiltinString_t* topic;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetTopic:(id)topic;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface CreateTalkRoomResponse : PBGeneratedMessage {
	unsigned hasRoomKey : 1;
	unsigned hasRoomId : 1;
	unsigned hasMicSeq : 1;
	unsigned hasMyRoomMemberId : 1;
	unsigned hasBigHeadImgUrl : 1;
	unsigned hasSmallHeadImgUrl : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasTopic : 1;
	unsigned hasPyinitial : 1;
	unsigned hasQuanPin : 1;
	unsigned hasTalkRoomName : 1;
	unsigned hasImgBuf : 1;
	unsigned hasMemberCount : 1;
	long long roomKey;
	int roomId;
	int micSeq;
	int myRoomMemberId;
	NSString* bigHeadImgUrl;
	NSString* smallHeadImgUrl;
	BaseResponse* baseResponse;
	SKBuiltinString_t* topic;
	SKBuiltinString_t* pyinitial;
	SKBuiltinString_t* quanPin;
	SKBuiltinString_t* talkRoomName;
	SKBuiltinBuffer_t* imgBuf;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(assign) BOOL hasMyRoomMemberId;
@property(assign) BOOL hasMicSeq;
@property(assign) BOOL hasRoomKey;
@property(assign) BOOL hasRoomId;
@property(assign) BOOL hasSmallHeadImgUrl;
@property(assign) BOOL hasBigHeadImgUrl;
@property(assign) BOOL hasImgBuf;
@property(assign) BOOL hasTalkRoomName;
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasQuanPin;
@property(assign) BOOL hasPyinitial;
@property(assign) BOOL hasTopic;
@property(assign) BOOL hasBaseResponse;
@property(assign) int myRoomMemberId;
@property(assign) int micSeq;
@property(assign) long long roomKey;
@property(assign) int roomId;
@property(retain) NSString* smallHeadImgUrl;
@property(retain) NSString* bigHeadImgUrl;
@property(retain) SKBuiltinBuffer_t* imgBuf;
@property(retain) SKBuiltinString_t* talkRoomName;
@property(assign) unsigned memberCount;
@property(retain) SKBuiltinString_t* quanPin;
@property(retain) SKBuiltinString_t* pyinitial;
@property(retain) SKBuiltinString_t* topic;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetMyRoomMemberId:(int)anId;
-(id)SetMicSeq:(int)seq;
-(id)SetRoomKey:(long long)key;
-(id)SetRoomId:(int)anId;
-(id)SetSmallHeadImgUrl:(id)url;
-(id)SetBigHeadImgUrl:(id)url;
-(id)SetImgBuf:(id)buf;
-(id)SetTalkRoomName:(id)name;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetQuanPin:(id)pin;
-(id)SetPyinitial:(id)pyinitial;
-(id)SetTopic:(id)topic;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface AddTalkRoomMemberRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasTalkRoomName : 1;
	unsigned hasMemberCount : 1;
	BaseRequest* baseRequest;
	SKBuiltinString_t* talkRoomName;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(assign) BOOL hasTalkRoomName;
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinString_t* talkRoomName;
@property(assign) unsigned memberCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTalkRoomName:(id)name;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface AddTalkRoomMemberResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasMemberCount : 1;
	BaseResponse* baseResponse;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned memberCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface DelTalkRoomMemberRequest : PBGeneratedMessage {
	unsigned hasTalkRoomName : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasMemberCount : 1;
	NSString* talkRoomName;
	BaseRequest* baseRequest;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(assign) BOOL hasTalkRoomName;
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* talkRoomName;
@property(assign) unsigned memberCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTalkRoomName:(id)name;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface DelTalkRoomMemberResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasMemberCount : 1;
	BaseResponse* baseResponse;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned memberCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface EnemyGameInfo : PBGeneratedMessage {
	unsigned hasType : 1;
	unsigned hasScore : 1;
	unsigned type;
	unsigned score;
}
@property(assign) BOOL hasScore;
@property(assign) BOOL hasType;
@property(assign) unsigned score;
@property(assign) unsigned type;
+(id)parseFromData:(id)data;
-(id)SetScore:(unsigned)score;
-(id)SetType:(unsigned)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EnemyGameKilled : PBGeneratedMessage {
	unsigned hasType : 1;
	unsigned hasCount : 1;
	unsigned hasGeneralCount : 1;
	unsigned hasUsedCount : 1;
	unsigned type;
	unsigned count;
	unsigned generalCount;
	unsigned usedCount;
}
@property(assign) BOOL hasUsedCount;
@property(assign) BOOL hasGeneralCount;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasType;
@property(assign) unsigned usedCount;
@property(assign) unsigned generalCount;
@property(assign) unsigned count;
@property(assign) unsigned type;
+(id)parseFromData:(id)data;
-(id)SetUsedCount:(unsigned)count;
-(id)SetGeneralCount:(unsigned)count;
-(id)SetCount:(unsigned)count;
-(id)SetType:(unsigned)type;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UserGameInfo : PBGeneratedMessage {
	unsigned hasUserName : 1;
	unsigned hasNickName : 1;
	unsigned hasHeadImageUrl : 1;
	NSString* userName;
	NSString* nickName;
	NSString* headImageUrl;
}
@property(assign) BOOL hasHeadImageUrl;
@property(assign) BOOL hasNickName;
@property(assign) BOOL hasUserName;
@property(retain) NSString* headImageUrl;
@property(retain) NSString* nickName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetHeadImageUrl:(id)url;
-(id)SetNickName:(id)name;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UserGameAchieveInfo : PBGeneratedMessage {
	unsigned hasUserInfo : 1;
	unsigned hasScore : 1;
	unsigned hasRank : 1;
	UserGameInfo* userInfo;
	unsigned score;
	unsigned rank;
}
@property(assign) BOOL hasRank;
@property(assign) BOOL hasScore;
@property(assign) BOOL hasUserInfo;
@property(assign) unsigned rank;
@property(assign) unsigned score;
@property(retain) UserGameInfo* userInfo;
+(id)parseFromData:(id)data;
-(id)SetRank:(unsigned)rank;
-(id)SetScore:(unsigned)score;
-(id)SetUserInfo:(id)info;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface UserGameWishInfo : PBGeneratedMessage {
	unsigned hasUserInfo : 1;
	UserGameInfo* userInfo;
}
@property(assign) BOOL hasUserInfo;
@property(retain) UserGameInfo* userInfo;
+(id)parseFromData:(id)data;
-(id)SetUserInfo:(id)info;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GamePropsInfo : PBGeneratedMessage {
	unsigned hasIconUrl : 1;
	unsigned hasName : 1;
	unsigned hasDesc : 1;
	unsigned hasPropsId : 1;
	unsigned hasType : 1;
	NSString* iconUrl;
	NSString* name;
	NSString* desc;
	unsigned propsId;
	unsigned type;
}
@property(assign) BOOL hasType;
@property(assign) BOOL hasDesc;
@property(assign) BOOL hasName;
@property(assign) BOOL hasIconUrl;
@property(assign) BOOL hasPropsId;
@property(assign) unsigned type;
@property(retain) NSString* desc;
@property(retain) NSString* name;
@property(retain) NSString* iconUrl;
@property(assign) unsigned propsId;
+(id)parseFromData:(id)data;
-(id)SetType:(unsigned)type;
-(id)SetDesc:(id)desc;
-(id)SetName:(id)name;
-(id)SetIconUrl:(id)url;
-(id)SetPropsId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameUserPropsInfo : PBGeneratedMessage {
	unsigned hasPropsId : 1;
	unsigned hasCount : 1;
	unsigned propsId;
	unsigned count;
}
@property(assign) BOOL hasCount;
@property(assign) BOOL hasPropsId;
@property(assign) unsigned count;
@property(assign) unsigned propsId;
+(id)parseFromData:(id)data;
-(id)SetCount:(unsigned)count;
-(id)SetPropsId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameAnnouncementInfo : PBGeneratedMessage {
	unsigned hasTitle : 1;
	unsigned hasDesc : 1;
	unsigned hasStyle : 1;
	NSString* title;
	NSString* desc;
	unsigned style;
}
@property(assign) BOOL hasDesc;
@property(assign) BOOL hasTitle;
@property(assign) BOOL hasStyle;
@property(retain) NSString* desc;
@property(retain) NSString* title;
@property(assign) unsigned style;
+(id)parseFromData:(id)data;
-(id)SetDesc:(id)desc;
-(id)SetTitle:(id)title;
-(id)SetStyle:(unsigned)style;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameConsumeProps : PBGeneratedMessage {
	unsigned hasConsumeCount : 1;
	unsigned hasPropsId : 1;
	int consumeCount;
	unsigned propsId;
}
@property(assign) BOOL hasConsumeCount;
@property(assign) BOOL hasPropsId;
@property(assign) int consumeCount;
@property(assign) unsigned propsId;
+(id)parseFromData:(id)data;
-(id)SetConsumeCount:(int)count;
-(id)SetPropsId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameInitReq : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameInitResp : PBGeneratedMessage {
	unsigned hasFriendCount : 1;
	unsigned hasWishCount : 1;
	unsigned hasGamePropsCount : 1;
	unsigned hasGameAnnouncementCount : 1;
	unsigned hasOilCurrency : 1;
	unsigned hasOilPrice : 1;
	unsigned hasGameNumerConfig : 1;
	unsigned hasBuyEngineOilWording : 1;
	unsigned hasToken : 1;
	unsigned hasRankViewTip : 1;
	unsigned hasPropsViewTip : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasGameCoinCount : 1;
	unsigned hasProductIdCount : 1;
	unsigned hasCheckLeftTime : 1;
	unsigned hasLifeNum : 1;
	int friendCount;
	int wishCount;
	int gamePropsCount;
	int gameAnnouncementCount;
	NSString* oilCurrency;
	NSString* oilPrice;
	NSString* gameNumerConfig;
	NSString* buyEngineOilWording;
	NSString* token;
	NSString* rankViewTip;
	NSString* propsViewTip;
	BaseResponse* baseResponse;
	unsigned gameCoinCount;
	unsigned productIdCount;
	unsigned checkLeftTime;
	unsigned lifeNum;
	NSMutableArray* mutableGamePropsListList;
	NSMutableArray* mutableGameAnnouncementListList;
	NSMutableArray* mutableWishListList;
	NSMutableArray* mutableFriendListList;
	NSMutableArray* mutableProductIdListList;
}
@property(assign) BOOL hasOilCurrency;
@property(assign) BOOL hasOilPrice;
@property(assign) BOOL hasBuyEngineOilWording;
@property(retain) NSMutableArray* mutableProductIdListList;
@property(assign) BOOL hasProductIdCount;
@property(assign) BOOL hasGameCoinCount;
@property(assign) BOOL hasRankViewTip;
@property(assign) BOOL hasPropsViewTip;
@property(retain) NSMutableArray* mutableGameAnnouncementListList;
@property(assign) BOOL hasGameAnnouncementCount;
@property(retain) NSMutableArray* mutableGamePropsListList;
@property(assign) BOOL hasGamePropsCount;
@property(retain) NSMutableArray* mutableWishListList;
@property(assign) BOOL hasWishCount;
@property(retain) NSMutableArray* mutableFriendListList;
@property(assign) BOOL hasFriendCount;
@property(assign) BOOL hasToken;
@property(assign) BOOL hasCheckLeftTime;
@property(assign) BOOL hasGameNumerConfig;
@property(assign) BOOL hasLifeNum;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* oilCurrency;
@property(retain) NSString* oilPrice;
@property(retain) NSString* buyEngineOilWording;
@property(assign) unsigned productIdCount;
@property(assign) unsigned gameCoinCount;
@property(retain) NSString* rankViewTip;
@property(retain) NSString* propsViewTip;
@property(assign) int gameAnnouncementCount;
@property(assign) int gamePropsCount;
@property(assign) int wishCount;
@property(assign) int friendCount;
@property(retain) NSString* token;
@property(assign) unsigned checkLeftTime;
@property(retain) NSString* gameNumerConfig;
@property(assign) unsigned lifeNum;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetOilCurrency:(id)currency;
-(id)SetOilPrice:(id)price;
-(id)SetBuyEngineOilWording:(id)wording;
-(id)addProductIdList:(id)list;
-(id)addProductIdListFromArray:(id)array;
-(id)SetProductIdCount:(unsigned)count;
-(id)SetGameCoinCount:(unsigned)count;
-(id)SetRankViewTip:(id)tip;
-(id)SetPropsViewTip:(id)tip;
-(id)addGameAnnouncementList:(id)list;
-(id)addGameAnnouncementListFromArray:(id)array;
-(id)SetGameAnnouncementCount:(int)count;
-(id)addGamePropsList:(id)list;
-(id)addGamePropsListFromArray:(id)array;
-(id)SetGamePropsCount:(int)count;
-(id)addWishList:(id)list;
-(id)addWishListFromArray:(id)array;
-(id)SetWishCount:(int)count;
-(id)addFriendList:(id)list;
-(id)addFriendListFromArray:(id)array;
-(id)SetFriendCount:(int)count;
-(id)SetToken:(id)token;
-(id)SetCheckLeftTime:(unsigned)time;
-(id)SetGameNumerConfig:(id)config;
-(id)SetLifeNum:(unsigned)num;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)productIdListList;
-(id)gameAnnouncementListList;
-(id)gamePropsListList;
-(id)wishListList;
-(id)friendListList;
-(id)init;
-(void)dealloc;
@end

@interface GameEndReq : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasGameConsumePropsCount : 1;
	unsigned hasAppId : 1;
	unsigned hasToken : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasLocalScore : 1;
	unsigned hasConsumeTime : 1;
	unsigned hasDeadCount : 1;
	unsigned hasGameStartTime : 1;
	unsigned hasGameEndTime : 1;
	unsigned hasShieldNum : 1;
	unsigned hasTotalShots : 1;
	unsigned hasGameCoinCount : 1;
	unsigned hasClientUseReviveNum : 1;
	int count;
	int gameConsumePropsCount;
	NSString* appId;
	NSString* token;
	BaseRequest* baseRequest;
	unsigned localScore;
	unsigned consumeTime;
	unsigned deadCount;
	unsigned gameStartTime;
	unsigned gameEndTime;
	unsigned shieldNum;
	unsigned totalShots;
	unsigned gameCoinCount;
	unsigned clientUseReviveNum;
	NSMutableArray* mutableEnemyKilledList;
	NSMutableArray* mutableGameConsumePropsListList;
}
@property(assign) BOOL hasClientUseReviveNum;
@property(assign) BOOL hasGameCoinCount;
@property(assign) BOOL hasTotalShots;
@property(assign) BOOL hasShieldNum;
@property(assign) BOOL hasGameEndTime;
@property(assign) BOOL hasGameStartTime;
@property(retain) NSMutableArray* mutableGameConsumePropsListList;
@property(assign) BOOL hasGameConsumePropsCount;
@property(assign) BOOL hasDeadCount;
@property(assign) BOOL hasToken;
@property(assign) BOOL hasConsumeTime;
@property(assign) BOOL hasLocalScore;
@property(retain) NSMutableArray* mutableEnemyKilledList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned clientUseReviveNum;
@property(assign) unsigned gameCoinCount;
@property(assign) unsigned totalShots;
@property(assign) unsigned shieldNum;
@property(assign) unsigned gameEndTime;
@property(assign) unsigned gameStartTime;
@property(assign) int gameConsumePropsCount;
@property(assign) unsigned deadCount;
@property(retain) NSString* token;
@property(assign) unsigned consumeTime;
@property(assign) unsigned localScore;
@property(assign) int count;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetClientUseReviveNum:(unsigned)num;
-(id)SetGameCoinCount:(unsigned)count;
-(id)SetTotalShots:(unsigned)shots;
-(id)SetShieldNum:(unsigned)num;
-(id)SetGameEndTime:(unsigned)time;
-(id)SetGameStartTime:(unsigned)time;
-(id)addGameConsumePropsList:(id)list;
-(id)addGameConsumePropsListFromArray:(id)array;
-(id)SetGameConsumePropsCount:(int)count;
-(id)SetDeadCount:(unsigned)count;
-(id)SetToken:(id)token;
-(id)SetConsumeTime:(unsigned)time;
-(id)SetLocalScore:(unsigned)score;
-(id)addEnemyKilled:(id)killed;
-(id)addEnemyKilledFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)gameConsumePropsListList;
-(id)enemyKilledList;
-(id)init;
-(void)dealloc;
@end

@interface GameEndResp : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasAchievement : 1;
	unsigned hasPropsViewTip : 1;
	unsigned hasRankViewTip : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasScore : 1;
	unsigned hasRank : 1;
	unsigned hasLifeNum : 1;
	unsigned hasCheckLeftTime : 1;
	unsigned hasGameCoinCount : 1;
	int count;
	NSString* achievement;
	NSString* propsViewTip;
	NSString* rankViewTip;
	BaseResponse* baseResponse;
	unsigned score;
	unsigned rank;
	unsigned lifeNum;
	unsigned checkLeftTime;
	unsigned gameCoinCount;
	NSMutableArray* mutableRankListList;
}
@property(assign) BOOL hasGameCoinCount;
@property(assign) BOOL hasRankViewTip;
@property(assign) BOOL hasPropsViewTip;
@property(retain) NSMutableArray* mutableRankListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasCheckLeftTime;
@property(assign) BOOL hasLifeNum;
@property(assign) BOOL hasRank;
@property(assign) BOOL hasAchievement;
@property(assign) BOOL hasScore;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned gameCoinCount;
@property(retain) NSString* rankViewTip;
@property(retain) NSString* propsViewTip;
@property(assign) int count;
@property(assign) unsigned checkLeftTime;
@property(assign) unsigned lifeNum;
@property(assign) unsigned rank;
@property(retain) NSString* achievement;
@property(assign) unsigned score;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetGameCoinCount:(unsigned)count;
-(id)SetRankViewTip:(id)tip;
-(id)SetPropsViewTip:(id)tip;
-(id)addRankList:(id)list;
-(id)addRankListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetCheckLeftTime:(unsigned)time;
-(id)SetLifeNum:(unsigned)num;
-(id)SetRank:(unsigned)rank;
-(id)SetAchievement:(id)achievement;
-(id)SetScore:(unsigned)score;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)rankListList;
-(id)init;
-(void)dealloc;
@end

@interface GameRankListReq : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameRankListResp : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasBaseResponse : 1;
	int count;
	BaseResponse* baseResponse;
	NSMutableArray* mutableRankListList;
}
@property(retain) NSMutableArray* mutableRankListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) int count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addRankList:(id)list;
-(id)addRankListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)rankListList;
-(id)init;
-(void)dealloc;
@end

@interface GameStartReq : PBGeneratedMessage {
	unsigned hasGameConsumePropsCount : 1;
	unsigned hasAppId : 1;
	unsigned hasToken : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasLocalLifeNum : 1;
	unsigned hasNeedClearWishList : 1;
	int gameConsumePropsCount;
	NSString* appId;
	NSString* token;
	BaseRequest* baseRequest;
	unsigned localLifeNum;
	unsigned needClearWishList;
	NSMutableArray* mutableGameConsumePropsListList;
}
@property(retain) NSMutableArray* mutableGameConsumePropsListList;
@property(assign) BOOL hasGameConsumePropsCount;
@property(assign) BOOL hasNeedClearWishList;
@property(assign) BOOL hasToken;
@property(assign) BOOL hasLocalLifeNum;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(assign) int gameConsumePropsCount;
@property(assign) unsigned needClearWishList;
@property(retain) NSString* token;
@property(assign) unsigned localLifeNum;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addGameConsumePropsList:(id)list;
-(id)addGameConsumePropsListFromArray:(id)array;
-(id)SetGameConsumePropsCount:(int)count;
-(id)SetNeedClearWishList:(unsigned)list;
-(id)SetToken:(id)token;
-(id)SetLocalLifeNum:(unsigned)num;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)gameConsumePropsListList;
-(id)init;
-(void)dealloc;
@end

@interface GameStartResp : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasGamePropsCount : 1;
	unsigned hasToken : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasLifeNum : 1;
	unsigned hasCheckLeftTime : 1;
	unsigned hasGameCoinCount : 1;
	int count;
	int gamePropsCount;
	NSString* token;
	BaseResponse* baseResponse;
	unsigned lifeNum;
	unsigned checkLeftTime;
	unsigned gameCoinCount;
	NSMutableArray* mutableRankListList;
	NSMutableArray* mutableGamePropsListList;
}
@property(assign) BOOL hasGameCoinCount;
@property(retain) NSMutableArray* mutableGamePropsListList;
@property(assign) BOOL hasGamePropsCount;
@property(retain) NSMutableArray* mutableRankListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasToken;
@property(assign) BOOL hasCheckLeftTime;
@property(assign) BOOL hasLifeNum;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned gameCoinCount;
@property(assign) int gamePropsCount;
@property(assign) int count;
@property(retain) NSString* token;
@property(assign) unsigned checkLeftTime;
@property(assign) unsigned lifeNum;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetGameCoinCount:(unsigned)count;
-(id)addGamePropsList:(id)list;
-(id)addGamePropsListFromArray:(id)array;
-(id)SetGamePropsCount:(int)count;
-(id)addRankList:(id)list;
-(id)addRankListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetToken:(id)token;
-(id)SetCheckLeftTime:(unsigned)time;
-(id)SetLifeNum:(unsigned)num;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)gamePropsListList;
-(id)rankListList;
-(id)init;
-(void)dealloc;
@end

@interface GameCheckReq : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasToken : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasLocalLifeNum : 1;
	NSString* appId;
	NSString* token;
	BaseRequest* baseRequest;
	unsigned localLifeNum;
}
@property(assign) BOOL hasToken;
@property(assign) BOOL hasLocalLifeNum;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* token;
@property(assign) unsigned localLifeNum;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetToken:(id)token;
-(id)SetLocalLifeNum:(unsigned)num;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameCheckResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCheckLeftTime : 1;
	unsigned hasLifeNum : 1;
	BaseResponse* baseResponse;
	unsigned checkLeftTime;
	unsigned lifeNum;
}
@property(assign) BOOL hasLifeNum;
@property(assign) BOOL hasCheckLeftTime;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned lifeNum;
@property(assign) unsigned checkLeftTime;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetLifeNum:(unsigned)num;
-(id)SetCheckLeftTime:(unsigned)time;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameWishReq : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	int count;
	NSString* appId;
	BaseRequest* baseRequest;
	NSMutableArray* mutableUserNameListList;
}
@property(retain) NSMutableArray* mutableUserNameListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(assign) int count;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addUserNameList:(id)list;
-(id)addUserNameListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)userNameListList;
-(id)init;
-(void)dealloc;
@end

@interface GameWishResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameGiftReq : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasLocalLifeNum : 1;
	int count;
	NSString* appId;
	BaseRequest* baseRequest;
	unsigned localLifeNum;
	NSMutableArray* mutableUserNameListList;
}
@property(retain) NSMutableArray* mutableUserNameListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasLocalLifeNum;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(assign) int count;
@property(assign) unsigned localLifeNum;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addUserNameList:(id)list;
-(id)addUserNameListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetLocalLifeNum:(unsigned)num;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)userNameListList;
-(id)init;
-(void)dealloc;
@end

@interface GameGiftResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasLifeNum : 1;
	unsigned hasCheckLeftTime : 1;
	BaseResponse* baseResponse;
	unsigned lifeNum;
	unsigned checkLeftTime;
}
@property(assign) BOOL hasCheckLeftTime;
@property(assign) BOOL hasLifeNum;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned checkLeftTime;
@property(assign) unsigned lifeNum;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetCheckLeftTime:(unsigned)time;
-(id)SetLifeNum:(unsigned)num;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameFriendListReq : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameFriendListResp : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasBaseResponse : 1;
	int count;
	BaseResponse* baseResponse;
	NSMutableArray* mutableFriendListList;
}
@property(retain) NSMutableArray* mutableFriendListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) int count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addFriendList:(id)list;
-(id)addFriendListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)friendListList;
-(id)init;
-(void)dealloc;
@end

@interface GameWishListReq : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameWishListResp : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasBaseResponse : 1;
	int count;
	BaseResponse* baseResponse;
	NSMutableArray* mutableWishListList;
}
@property(retain) NSMutableArray* mutableWishListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) int count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addWishList:(id)list;
-(id)addWishListFromArray:(id)array;
-(id)SetCount:(int)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)wishListList;
-(id)init;
-(void)dealloc;
@end

@interface GameShareReq : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasAchieve : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	unsigned hasScore : 1;
	NSString* appId;
	NSString* achieve;
	BaseRequest* baseRequest;
	unsigned type;
	unsigned score;
}
@property(assign) BOOL hasAchieve;
@property(assign) BOOL hasScore;
@property(assign) BOOL hasType;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* achieve;
@property(assign) unsigned score;
@property(assign) unsigned type;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetAchieve:(id)achieve;
-(id)SetScore:(unsigned)score;
-(id)SetType:(unsigned)type;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameShareResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameResourceReq : PBGeneratedMessage {
	unsigned hasPropsCount : 1;
	unsigned hasBaseRequest : 1;
	int propsCount;
	BaseRequest* baseRequest;
	NSMutableArray* mutablePropsIdListList;
	int propsIdListMemoizedSerializedSize;
}
@property(retain) NSMutableArray* mutablePropsIdListList;
@property(assign) BOOL hasPropsCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) int propsCount;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addPropsIdListFromArray:(id)array;
-(id)addPropsIdList:(unsigned)list;
-(id)SetPropsCount:(int)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)propsIdListList;
-(id)init;
-(void)dealloc;
@end

@interface GameResourceResp : PBGeneratedMessage {
	unsigned hasPropsCount : 1;
	unsigned hasBaseResponse : 1;
	int propsCount;
	BaseResponse* baseResponse;
	NSMutableArray* mutablePropsListList;
}
@property(retain) NSMutableArray* mutablePropsListList;
@property(assign) BOOL hasPropsCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) int propsCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addPropsList:(id)list;
-(id)addPropsListFromArray:(id)array;
-(id)SetPropsCount:(int)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)propsListList;
-(id)init;
-(void)dealloc;
@end

@interface GameConsumeReq : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GameConsumeResp : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasConsumeOk : 1;
	unsigned hasGameCoinCount : 1;
	BaseResponse* baseResponse;
	unsigned consumeOk;
	unsigned gameCoinCount;
}
@property(assign) BOOL hasGameCoinCount;
@property(assign) BOOL hasConsumeOk;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned gameCoinCount;
@property(assign) unsigned consumeOk;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetGameCoinCount:(unsigned)count;
-(id)SetConsumeOk:(unsigned)ok;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoNode : PBGeneratedMessage {
	unsigned hasCountry : 1;
	unsigned hasProvince : 1;
	unsigned hasCity : 1;
	unsigned hasDistrict : 1;
	unsigned hasZipcode : 1;
	unsigned hasDetail : 1;
	unsigned hasName : 1;
	unsigned hasPhone : 1;
	unsigned hasNationalcodeGbt2260 : 1;
	unsigned hasId : 1;
	SKBuiltinString_t* country;
	SKBuiltinString_t* province;
	SKBuiltinString_t* city;
	SKBuiltinString_t* district;
	SKBuiltinString_t* zipcode;
	SKBuiltinString_t* detail;
	SKBuiltinString_t* name;
	SKBuiltinString_t* phone;
	SKBuiltinString_t* nationalcodeGbt2260;
	unsigned id;
}
@property(assign) BOOL hasNationalcodeGbt2260;
@property(assign) BOOL hasPhone;
@property(assign) BOOL hasName;
@property(assign) BOOL hasDetail;
@property(assign) BOOL hasZipcode;
@property(assign) BOOL hasDistrict;
@property(assign) BOOL hasCity;
@property(assign) BOOL hasProvince;
@property(assign) BOOL hasCountry;
@property(assign) BOOL hasId;
@property(retain) SKBuiltinString_t* nationalcodeGbt2260;
@property(retain) SKBuiltinString_t* phone;
@property(retain) SKBuiltinString_t* name;
@property(retain) SKBuiltinString_t* detail;
@property(retain) SKBuiltinString_t* zipcode;
@property(retain) SKBuiltinString_t* district;
@property(retain) SKBuiltinString_t* city;
@property(retain) SKBuiltinString_t* province;
@property(retain) SKBuiltinString_t* country;
@property(assign) unsigned id;
+(id)parseFromData:(id)data;
-(id)SetNationalcodeGbt2260:(id)a2260;
-(id)SetPhone:(id)phone;
-(id)SetName:(id)name;
-(id)SetDetail:(id)detail;
-(id)SetZipcode:(id)zipcode;
-(id)SetDistrict:(id)district;
-(id)SetCity:(id)city;
-(id)SetProvince:(id)province;
-(id)SetCountry:(id)country;
-(id)SetId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoList : PBGeneratedMessage {
	unsigned hasCount : 1;
	unsigned hasTimestamp : 1;
	unsigned count;
	unsigned timestamp;
	NSMutableArray* mutableRcptinfolistList;
}
@property(assign) BOOL hasTimestamp;
@property(retain) NSMutableArray* mutableRcptinfolistList;
@property(assign) BOOL hasCount;
@property(assign) unsigned timestamp;
@property(assign) unsigned count;
+(id)parseFromData:(id)data;
-(id)SetTimestamp:(unsigned)timestamp;
-(id)addRcptinfolist:(id)rcptinfolist;
-(id)addRcptinfolistFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)rcptinfolistList;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoAddRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasRcptinfo : 1;
	BaseRequest* baseRequest;
	RcptInfoNode* rcptinfo;
}
@property(assign) BOOL hasRcptinfo;
@property(assign) BOOL hasBaseRequest;
@property(retain) RcptInfoNode* rcptinfo;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRcptinfo:(id)rcptinfo;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoAddResponse : PBGeneratedMessage {
	unsigned hasRcptinfolist : 1;
	unsigned hasBaseResponse : 1;
	RcptInfoList* rcptinfolist;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(assign) BOOL hasRcptinfolist;
@property(retain) BaseResponse* baseResponse;
@property(retain) RcptInfoList* rcptinfolist;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)SetRcptinfolist:(id)rcptinfolist;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoRemoveRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasId : 1;
	BaseRequest* baseRequest;
	unsigned id;
}
@property(assign) BOOL hasId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned id;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetId:(unsigned)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoRemoveResponse : PBGeneratedMessage {
	unsigned hasRcptinfolist : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasId : 1;
	RcptInfoList* rcptinfolist;
	BaseResponse* baseResponse;
	unsigned id;
}
@property(assign) BOOL hasBaseResponse;
@property(assign) BOOL hasRcptinfolist;
@property(assign) BOOL hasId;
@property(retain) BaseResponse* baseResponse;
@property(retain) RcptInfoList* rcptinfolist;
@property(assign) unsigned id;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)SetRcptinfolist:(id)rcptinfolist;
-(id)SetId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoQueryRequest : PBGeneratedMessage {
	unsigned hasWebviewurl : 1;
	unsigned hasAppid : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasTimestamp : 1;
	unsigned hasScene : 1;
	NSString* webviewurl;
	NSString* appid;
	BaseRequest* baseRequest;
	unsigned timestamp;
	unsigned scene;
}
@property(assign) BOOL hasScene;
@property(assign) BOOL hasAppid;
@property(assign) BOOL hasWebviewurl;
@property(assign) BOOL hasTimestamp;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned scene;
@property(retain) NSString* appid;
@property(retain) NSString* webviewurl;
@property(assign) unsigned timestamp;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetScene:(unsigned)scene;
-(id)SetAppid:(id)appid;
-(id)SetWebviewurl:(id)webviewurl;
-(id)SetTimestamp:(unsigned)timestamp;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoQueryResponse : PBGeneratedMessage {
	unsigned hasAppusername : 1;
	unsigned hasAppnickname : 1;
	unsigned hasRcptinfolist : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasIslatest : 1;
	unsigned hasIsauthority : 1;
	NSString* appusername;
	NSString* appnickname;
	RcptInfoList* rcptinfolist;
	BaseResponse* baseResponse;
	unsigned islatest;
	unsigned isauthority;
}
@property(assign) BOOL hasAppnickname;
@property(assign) BOOL hasIsauthority;
@property(assign) BOOL hasAppusername;
@property(assign) BOOL hasBaseResponse;
@property(assign) BOOL hasIslatest;
@property(assign) BOOL hasRcptinfolist;
@property(retain) NSString* appnickname;
@property(assign) unsigned isauthority;
@property(retain) NSString* appusername;
@property(retain) BaseResponse* baseResponse;
@property(assign) unsigned islatest;
@property(retain) RcptInfoList* rcptinfolist;
+(id)parseFromData:(id)data;
-(id)SetAppnickname:(id)appnickname;
-(id)SetIsauthority:(unsigned)isauthority;
-(id)SetAppusername:(id)appusername;
-(id)SetBaseResponse:(id)response;
-(id)SetIslatest:(unsigned)islatest;
-(id)SetRcptinfolist:(id)rcptinfolist;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoUpdateRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasRcptinfo : 1;
	BaseRequest* baseRequest;
	RcptInfoNode* rcptinfo;
}
@property(assign) BOOL hasRcptinfo;
@property(assign) BOOL hasBaseRequest;
@property(retain) RcptInfoNode* rcptinfo;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetRcptinfo:(id)rcptinfo;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoUpdateResponse : PBGeneratedMessage {
	unsigned hasRcptinfolist : 1;
	unsigned hasBaseResponse : 1;
	RcptInfoList* rcptinfolist;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(assign) BOOL hasRcptinfolist;
@property(retain) BaseResponse* baseResponse;
@property(retain) RcptInfoList* rcptinfolist;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)SetRcptinfolist:(id)rcptinfolist;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoTouchRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasId : 1;
	BaseRequest* baseRequest;
	unsigned id;
}
@property(assign) BOOL hasId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned id;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetId:(unsigned)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface RcptInfoTouchResponse : PBGeneratedMessage {
	unsigned hasRcptinfolist : 1;
	unsigned hasBaseResponse : 1;
	RcptInfoList* rcptinfolist;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(assign) BOOL hasRcptinfolist;
@property(retain) BaseResponse* baseResponse;
@property(retain) RcptInfoList* rcptinfolist;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)SetRcptinfolist:(id)rcptinfolist;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TenPayRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasReqText : 1;
	unsigned hasReqTextWx : 1;
	unsigned hasCgiCmd : 1;
	unsigned hasOutPutType : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* reqText;
	SKBuiltinBuffer_t* reqTextWx;
	unsigned cgiCmd;
	unsigned outPutType;
}
@property(assign) BOOL hasReqTextWx;
@property(assign) BOOL hasReqText;
@property(assign) BOOL hasOutPutType;
@property(assign) BOOL hasCgiCmd;
@property(assign) BOOL hasBaseRequest;
@property(retain) SKBuiltinBuffer_t* reqTextWx;
@property(retain) SKBuiltinBuffer_t* reqText;
@property(assign) unsigned outPutType;
@property(assign) unsigned cgiCmd;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReqTextWx:(id)wx;
-(id)SetReqText:(id)text;
-(id)SetOutPutType:(unsigned)type;
-(id)SetCgiCmd:(unsigned)cmd;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface TenPayResponse : PBGeneratedMessage {
	unsigned hasPlatRet : 1;
	unsigned hasCgiCmdid : 1;
	unsigned hasTenpayErrType : 1;
	unsigned hasPlatMsg : 1;
	unsigned hasTenpayErrMsg : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasRetText : 1;
	int platRet;
	int cgiCmdid;
	int tenpayErrType;
	NSString* platMsg;
	NSString* tenpayErrMsg;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* retText;
}
@property(assign) BOOL hasTenpayErrMsg;
@property(assign) BOOL hasTenpayErrType;
@property(assign) BOOL hasCgiCmdid;
@property(assign) BOOL hasPlatMsg;
@property(assign) BOOL hasPlatRet;
@property(assign) BOOL hasRetText;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* tenpayErrMsg;
@property(assign) int tenpayErrType;
@property(assign) int cgiCmdid;
@property(retain) NSString* platMsg;
@property(assign) int platRet;
@property(retain) SKBuiltinBuffer_t* retText;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetTenpayErrMsg:(id)msg;
-(id)SetTenpayErrType:(int)type;
-(id)SetCgiCmdid:(int)cmdid;
-(id)SetPlatMsg:(id)msg;
-(id)SetPlatRet:(int)ret;
-(id)SetRetText:(id)text;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PayQueryUserRollRequest : PBGeneratedMessage {
	unsigned hasExtbuf : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasLimit : 1;
	unsigned hasOffset : 1;
	NSString* extbuf;
	BaseRequest* baseRequest;
	unsigned limit;
	unsigned offset;
}
@property(assign) BOOL hasExtbuf;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasLimit;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* extbuf;
@property(assign) unsigned offset;
@property(assign) unsigned limit;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetExtbuf:(id)extbuf;
-(id)SetOffset:(unsigned)offset;
-(id)SetLimit:(unsigned)limit;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PaySimpleUserRoll : PBGeneratedMessage {
	unsigned hasTotalFee : 1;
	unsigned hasStatusType : 1;
	unsigned hasTransid : 1;
	unsigned hasGoodsName : 1;
	unsigned hasTradeStateName : 1;
	unsigned hasFeeType : 1;
	unsigned hasIapTotalFee : 1;
	unsigned hasCreateTime : 1;
	unsigned hasModifyTime : 1;
	unsigned hasPayType : 1;
	int totalFee;
	int statusType;
	NSString* transid;
	NSString* goodsName;
	NSString* tradeStateName;
	NSString* feeType;
	NSString* iapTotalFee;
	unsigned createTime;
	unsigned modifyTime;
	unsigned payType;
}
@property(assign) BOOL hasIapTotalFee;
@property(assign) BOOL hasPayType;
@property(assign) BOOL hasStatusType;
@property(assign) BOOL hasFeeType;
@property(assign) BOOL hasModifyTime;
@property(assign) BOOL hasTradeStateName;
@property(assign) BOOL hasCreateTime;
@property(assign) BOOL hasGoodsName;
@property(assign) BOOL hasTotalFee;
@property(assign) BOOL hasTransid;
@property(retain) NSString* iapTotalFee;
@property(assign) unsigned payType;
@property(assign) int statusType;
@property(retain) NSString* feeType;
@property(assign) unsigned modifyTime;
@property(retain) NSString* tradeStateName;
@property(assign) unsigned createTime;
@property(retain) NSString* goodsName;
@property(assign) int totalFee;
@property(retain) NSString* transid;
+(id)parseFromData:(id)data;
-(id)SetIapTotalFee:(id)fee;
-(id)SetPayType:(unsigned)type;
-(id)SetStatusType:(int)type;
-(id)SetFeeType:(id)type;
-(id)SetModifyTime:(unsigned)time;
-(id)SetTradeStateName:(id)name;
-(id)SetCreateTime:(unsigned)time;
-(id)SetGoodsName:(id)name;
-(id)SetTotalFee:(int)fee;
-(id)SetTransid:(id)transid;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PayQueryUserRollResponse : PBGeneratedMessage {
	unsigned hasExtbuf : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasTotalNum : 1;
	unsigned hasRecNum : 1;
	NSString* extbuf;
	BaseResponse* baseResponse;
	unsigned totalNum;
	unsigned recNum;
	NSMutableArray* mutableUserRollListList;
}
@property(assign) BOOL hasExtbuf;
@property(retain) NSMutableArray* mutableUserRollListList;
@property(assign) BOOL hasRecNum;
@property(assign) BOOL hasTotalNum;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* extbuf;
@property(assign) unsigned recNum;
@property(assign) unsigned totalNum;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetExtbuf:(id)extbuf;
-(id)addUserRollList:(id)list;
-(id)addUserRollListFromArray:(id)array;
-(id)SetRecNum:(unsigned)num;
-(id)SetTotalNum:(unsigned)num;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)userRollListList;
-(id)init;
-(void)dealloc;
@end

@interface PayDelUserRollRequest : PBGeneratedMessage {
	unsigned hasTransid : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasDelType : 1;
	unsigned hasPayType : 1;
	NSString* transid;
	BaseRequest* baseRequest;
	unsigned delType;
	unsigned payType;
}
@property(assign) BOOL hasPayType;
@property(assign) BOOL hasTransid;
@property(assign) BOOL hasDelType;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned payType;
@property(retain) NSString* transid;
@property(assign) unsigned delType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetPayType:(unsigned)type;
-(id)SetTransid:(id)transid;
-(id)SetDelType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PayDelUserRollResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PayAuthAppRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasPartnerId : 1;
	unsigned hasPrepayId : 1;
	unsigned hasNonceStr : 1;
	unsigned hasTimeStamp : 1;
	unsigned hasPackage : 1;
	unsigned hasSign : 1;
	unsigned hasSignType : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	NSString* partnerId;
	NSString* prepayId;
	NSString* nonceStr;
	NSString* timeStamp;
	NSString* package;
	NSString* sign;
	NSString* signType;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasSignType;
@property(assign) BOOL hasSign;
@property(assign) BOOL hasPackage;
@property(assign) BOOL hasTimeStamp;
@property(assign) BOOL hasNonceStr;
@property(assign) BOOL hasPrepayId;
@property(assign) BOOL hasPartnerId;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* signType;
@property(retain) NSString* sign;
@property(retain) NSString* package;
@property(retain) NSString* timeStamp;
@property(retain) NSString* nonceStr;
@property(retain) NSString* prepayId;
@property(retain) NSString* partnerId;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSignType:(id)type;
-(id)SetSign:(id)sign;
-(id)SetPackage:(id)package;
-(id)SetTimeStamp:(id)stamp;
-(id)SetNonceStr:(id)str;
-(id)SetPrepayId:(id)anId;
-(id)SetPartnerId:(id)anId;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PayAuthAppResponse : PBGeneratedMessage {
	unsigned hasErrCode : 1;
	unsigned hasAppSource : 1;
	unsigned hasErrMsg : 1;
	unsigned hasPrepayId : 1;
	unsigned hasBaseResponse : 1;
	int errCode;
	NSString* appSource;
	NSString* errMsg;
	NSString* prepayId;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasPrepayId;
@property(assign) BOOL hasErrMsg;
@property(assign) BOOL hasErrCode;
@property(assign) BOOL hasAppSource;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* prepayId;
@property(retain) NSString* errMsg;
@property(assign) int errCode;
@property(retain) NSString* appSource;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetPrepayId:(id)anId;
-(id)SetErrMsg:(id)msg;
-(id)SetErrCode:(int)code;
-(id)SetAppSource:(id)source;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GenPrepayRequest : PBGeneratedMessage {
	unsigned hasChannel : 1;
	unsigned hasAppId : 1;
	unsigned hasNonceStr : 1;
	unsigned hasTimestamp : 1;
	unsigned hasPackage : 1;
	unsigned hasSign : 1;
	unsigned hasSignType : 1;
	unsigned hasWebViewUrl : 1;
	unsigned hasContactAppUsername : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseRequest : 1;
	int channel;
	NSString* appId;
	NSString* nonceStr;
	NSString* timestamp;
	NSString* package;
	NSString* sign;
	NSString* signType;
	NSString* webViewUrl;
	NSString* contactAppUsername;
	NSString* extInfo;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasChannel;
@property(assign) BOOL hasContactAppUsername;
@property(assign) BOOL hasWebViewUrl;
@property(assign) BOOL hasSignType;
@property(assign) BOOL hasSign;
@property(assign) BOOL hasPackage;
@property(assign) BOOL hasTimestamp;
@property(assign) BOOL hasNonceStr;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* extInfo;
@property(assign) int channel;
@property(retain) NSString* contactAppUsername;
@property(retain) NSString* webViewUrl;
@property(retain) NSString* signType;
@property(retain) NSString* sign;
@property(retain) NSString* package;
@property(retain) NSString* timestamp;
@property(retain) NSString* nonceStr;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetChannel:(int)channel;
-(id)SetContactAppUsername:(id)username;
-(id)SetWebViewUrl:(id)url;
-(id)SetSignType:(id)type;
-(id)SetSign:(id)sign;
-(id)SetPackage:(id)package;
-(id)SetTimestamp:(id)timestamp;
-(id)SetNonceStr:(id)str;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GenPrepayResponse : PBGeneratedMessage {
	unsigned hasErrCode : 1;
	unsigned hasPrepayId : 1;
	unsigned hasAppSource : 1;
	unsigned hasErrMsg : 1;
	unsigned hasBaseResponse : 1;
	int errCode;
	NSString* prepayId;
	NSString* appSource;
	NSString* errMsg;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasErrMsg;
@property(assign) BOOL hasErrCode;
@property(assign) BOOL hasAppSource;
@property(assign) BOOL hasPrepayId;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* errMsg;
@property(assign) int errCode;
@property(retain) NSString* appSource;
@property(retain) NSString* prepayId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetErrMsg:(id)msg;
-(id)SetErrCode:(int)code;
-(id)SetAppSource:(id)source;
-(id)SetPrepayId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CancelQRPayRequest : PBGeneratedMessage {
	unsigned hasQrUuid : 1;
	unsigned hasReqKey : 1;
	unsigned hasBaseRequest : 1;
	NSString* qrUuid;
	NSString* reqKey;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasReqKey;
@property(assign) BOOL hasQrUuid;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* reqKey;
@property(retain) NSString* qrUuid;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetReqKey:(id)key;
-(id)SetQrUuid:(id)uuid;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CancelQRPayResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PaySubscribeRequest : PBGeneratedMessage {
	unsigned hasAppServiceUserName : 1;
	unsigned hasTransactionId : 1;
	unsigned hasBaseRequest : 1;
	NSString* appServiceUserName;
	NSString* transactionId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasTransactionId;
@property(assign) BOOL hasAppServiceUserName;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* transactionId;
@property(retain) NSString* appServiceUserName;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTransactionId:(id)anId;
-(id)SetAppServiceUserName:(id)name;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PaySubscribeResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetPayFunctionListRequest : PBGeneratedMessage {
	unsigned hasTelephonyNetIso : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasTicketCount : 1;
	NSString* telephonyNetIso;
	NSString* extInfo;
	BaseRequest* baseRequest;
	unsigned ticketCount;
	NSMutableArray* mutableTicketListList;
}
@property(assign) BOOL hasExtInfo;
@property(retain) NSMutableArray* mutableTicketListList;
@property(assign) BOOL hasTicketCount;
@property(assign) BOOL hasTelephonyNetIso;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* extInfo;
@property(assign) unsigned ticketCount;
@property(retain) NSString* telephonyNetIso;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)addTicketList:(id)list;
-(id)addTicketListFromArray:(id)array;
-(id)SetTicketCount:(unsigned)count;
-(id)SetTelephonyNetIso:(id)iso;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)ticketListList;
-(id)init;
-(void)dealloc;
@end

@interface GetPayFunctionListResponse : PBGeneratedMessage {
	unsigned hasPayFunctionList : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasNotShowTutorial : 1;
	NSString* payFunctionList;
	BaseResponse* baseResponse;
	unsigned notShowTutorial;
}
@property(assign) BOOL hasNotShowTutorial;
@property(assign) BOOL hasPayFunctionList;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned notShowTutorial;
@property(retain) NSString* payFunctionList;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetNotShowTutorial:(unsigned)tutorial;
-(id)SetPayFunctionList:(id)list;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetPayFunctionProductListRequest : PBGeneratedMessage {
	unsigned hasPayFuncId : 1;
	unsigned hasBaseRequest : 1;
	NSString* payFuncId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasPayFuncId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* payFuncId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetPayFuncId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetPayFunctionProductListResponse : PBGeneratedMessage {
	unsigned hasProductList : 1;
	unsigned hasBaseResponse : 1;
	NSString* productList;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasProductList;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* productList;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetProductList:(id)list;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetLatestPayProductInfoRequest : PBGeneratedMessage {
	unsigned hasPayFuncId : 1;
	unsigned hasPayProductId : 1;
	unsigned hasPayAppId : 1;
	unsigned hasRemarks : 1;
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	NSString* payFuncId;
	NSString* payProductId;
	NSString* payAppId;
	NSString* remarks;
	NSString* ticket;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasRemarks;
@property(assign) BOOL hasPayAppId;
@property(assign) BOOL hasPayProductId;
@property(assign) BOOL hasPayFuncId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* ticket;
@property(retain) NSString* remarks;
@property(retain) NSString* payAppId;
@property(retain) NSString* payProductId;
@property(retain) NSString* payFuncId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTicket:(id)ticket;
-(id)SetRemarks:(id)remarks;
-(id)SetPayAppId:(id)anId;
-(id)SetPayProductId:(id)anId;
-(id)SetPayFuncId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetLatestPayProductInfoResponse : PBGeneratedMessage {
	unsigned hasOuterErrCode : 1;
	unsigned hasWxErrCode : 1;
	unsigned hasProduct : 1;
	unsigned hasOuterErrMsg : 1;
	unsigned hasOuterRemarks : 1;
	unsigned hasWxErrMsg : 1;
	unsigned hasBaseResponse : 1;
	int outerErrCode;
	int wxErrCode;
	NSString* product;
	NSString* outerErrMsg;
	NSString* outerRemarks;
	NSString* wxErrMsg;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasWxErrMsg;
@property(assign) BOOL hasWxErrCode;
@property(assign) BOOL hasOuterRemarks;
@property(assign) BOOL hasOuterErrMsg;
@property(assign) BOOL hasOuterErrCode;
@property(assign) BOOL hasProduct;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* wxErrMsg;
@property(assign) int wxErrCode;
@property(retain) NSString* outerRemarks;
@property(retain) NSString* outerErrMsg;
@property(assign) int outerErrCode;
@property(retain) NSString* product;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetWxErrMsg:(id)msg;
-(id)SetWxErrCode:(int)code;
-(id)SetOuterRemarks:(id)remarks;
-(id)SetOuterErrMsg:(id)msg;
-(id)SetOuterErrCode:(int)code;
-(id)SetProduct:(id)product;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SubmitPayProductBuyInfoRequest : PBGeneratedMessage {
	unsigned hasPayFuncId : 1;
	unsigned hasPayProductId : 1;
	unsigned hasPayAppId : 1;
	unsigned hasRemarks : 1;
	unsigned hasTicket : 1;
	unsigned hasBaseRequest : 1;
	NSString* payFuncId;
	NSString* payProductId;
	NSString* payAppId;
	NSString* remarks;
	NSString* ticket;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasTicket;
@property(assign) BOOL hasRemarks;
@property(assign) BOOL hasPayAppId;
@property(assign) BOOL hasPayProductId;
@property(assign) BOOL hasPayFuncId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* ticket;
@property(retain) NSString* remarks;
@property(retain) NSString* payAppId;
@property(retain) NSString* payProductId;
@property(retain) NSString* payFuncId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetTicket:(id)ticket;
-(id)SetRemarks:(id)remarks;
-(id)SetPayAppId:(id)anId;
-(id)SetPayProductId:(id)anId;
-(id)SetPayFuncId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface SubmitPayProductBuyInfoResponse : PBGeneratedMessage {
	unsigned hasOuterErrCode : 1;
	unsigned hasReqKey : 1;
	unsigned hasAppSource : 1;
	unsigned hasOuterErrMsg : 1;
	unsigned hasBaseResponse : 1;
	int outerErrCode;
	NSString* reqKey;
	NSString* appSource;
	NSString* outerErrMsg;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasOuterErrMsg;
@property(assign) BOOL hasOuterErrCode;
@property(assign) BOOL hasAppSource;
@property(assign) BOOL hasReqKey;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* outerErrMsg;
@property(assign) int outerErrCode;
@property(retain) NSString* appSource;
@property(retain) NSString* reqKey;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetOuterErrMsg:(id)msg;
-(id)SetOuterErrCode:(int)code;
-(id)SetAppSource:(id)source;
-(id)SetReqKey:(id)key;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GenBizIapPrepayRequest : PBGeneratedMessage {
	unsigned hasAppId : 1;
	unsigned hasNonceStr : 1;
	unsigned hasTimeStamp : 1;
	unsigned hasPackage : 1;
	unsigned hasPaySign : 1;
	unsigned hasSignType : 1;
	unsigned hasStepInUrl : 1;
	unsigned hasBaseRequest : 1;
	NSString* appId;
	NSString* nonceStr;
	NSString* timeStamp;
	NSString* package;
	NSString* paySign;
	NSString* signType;
	NSString* stepInUrl;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasStepInUrl;
@property(assign) BOOL hasSignType;
@property(assign) BOOL hasPaySign;
@property(assign) BOOL hasPackage;
@property(assign) BOOL hasTimeStamp;
@property(assign) BOOL hasNonceStr;
@property(assign) BOOL hasAppId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* stepInUrl;
@property(retain) NSString* signType;
@property(retain) NSString* paySign;
@property(retain) NSString* package;
@property(retain) NSString* timeStamp;
@property(retain) NSString* nonceStr;
@property(retain) NSString* appId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetStepInUrl:(id)url;
-(id)SetSignType:(id)type;
-(id)SetPaySign:(id)sign;
-(id)SetPackage:(id)package;
-(id)SetTimeStamp:(id)stamp;
-(id)SetNonceStr:(id)str;
-(id)SetAppId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GenBizIapPrepayResponse : PBGeneratedMessage {
	unsigned hasProductId : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseResponse : 1;
	NSString* productId;
	NSString* extInfo;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* extInfo;
@property(retain) NSString* productId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetProductId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetBizIapPayResultRequest : PBGeneratedMessage {
	unsigned hasSerialId : 1;
	unsigned hasBaseRequest : 1;
	NSString* serialId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasSerialId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* serialId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSerialId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetBizIapPayResultResponse : PBGeneratedMessage {
	unsigned hasDetailBuff : 1;
	unsigned hasBaseResponse : 1;
	NSString* detailBuff;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasDetailBuff;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* detailBuff;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDetailBuff:(id)buff;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetBizIapDetailRequest : PBGeneratedMessage {
	unsigned hasSerialId : 1;
	unsigned hasBaseRequest : 1;
	NSString* serialId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasSerialId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* serialId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSerialId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetBizIapDetailResponse : PBGeneratedMessage {
	unsigned hasDetailBuff : 1;
	unsigned hasBaseResponse : 1;
	NSString* detailBuff;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasDetailBuff;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* detailBuff;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDetailBuff:(id)buff;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetWebPayUrlRequest : PBGeneratedMessage {
	unsigned hasScene : 1;
	unsigned hasBankType : 1;
	unsigned hasBindSerial : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseRequest : 1;
	int scene;
	NSString* bankType;
	NSString* bindSerial;
	NSString* extInfo;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasScene;
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasBindSerial;
@property(assign) BOOL hasBankType;
@property(assign) BOOL hasBaseRequest;
@property(assign) int scene;
@property(retain) NSString* extInfo;
@property(retain) NSString* bindSerial;
@property(retain) NSString* bankType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetScene:(int)scene;
-(id)SetExtInfo:(id)info;
-(id)SetBindSerial:(id)serial;
-(id)SetBankType:(id)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetWebPayUrlResponse : PBGeneratedMessage {
	unsigned hasWebPayUrl : 1;
	unsigned hasBaseResponse : 1;
	NSString* webPayUrl;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasWebPayUrl;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* webPayUrl;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetWebPayUrl:(id)url;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetOrderListRequest : PBGeneratedMessage {
	unsigned hasScene : 1;
	unsigned hasLimit : 1;
	unsigned hasOffset : 1;
	unsigned hasExtBuff : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseRequest : 1;
	int scene;
	int limit;
	int offset;
	NSString* extBuff;
	NSString* extInfo;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasExtBuff;
@property(assign) BOOL hasOffset;
@property(assign) BOOL hasLimit;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* extInfo;
@property(retain) NSString* extBuff;
@property(assign) int offset;
@property(assign) int limit;
@property(assign) int scene;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetExtBuff:(id)buff;
-(id)SetOffset:(int)offset;
-(id)SetLimit:(int)limit;
-(id)SetScene:(int)scene;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetOrderListResponse : PBGeneratedMessage {
	unsigned hasIsWcpayUser : 1;
	unsigned hasScene : 1;
	unsigned hasTotalNum : 1;
	unsigned hasTotalSceneNum : 1;
	unsigned hasTotalSceneLeftNum : 1;
	unsigned hasRecNum : 1;
	unsigned hasExtBuff : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseResponse : 1;
	int isWcpayUser;
	int scene;
	int totalNum;
	int totalSceneNum;
	int totalSceneLeftNum;
	int recNum;
	NSString* extBuff;
	NSString* extInfo;
	BaseResponse* baseResponse;
	NSMutableArray* mutableUserRollListList;
}
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasExtBuff;
@property(retain) NSMutableArray* mutableUserRollListList;
@property(assign) BOOL hasRecNum;
@property(assign) BOOL hasTotalSceneLeftNum;
@property(assign) BOOL hasTotalSceneNum;
@property(assign) BOOL hasTotalNum;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasIsWcpayUser;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* extInfo;
@property(retain) NSString* extBuff;
@property(assign) int recNum;
@property(assign) int totalSceneLeftNum;
@property(assign) int totalSceneNum;
@property(assign) int totalNum;
@property(assign) int scene;
@property(assign) int isWcpayUser;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetExtInfo:(id)info;
-(id)SetExtBuff:(id)buff;
-(id)addUserRollList:(id)list;
-(id)addUserRollListFromArray:(id)array;
-(id)SetRecNum:(int)num;
-(id)SetTotalSceneLeftNum:(int)num;
-(id)SetTotalSceneNum:(int)num;
-(id)SetTotalNum:(int)num;
-(id)SetScene:(int)scene;
-(id)SetIsWcpayUser:(int)user;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)userRollListList;
-(id)init;
-(void)dealloc;
@end

@interface EmotionCDNUrl : PBGeneratedMessage {
	unsigned hasUrl : 1;
	unsigned hasAesKey : 1;
	unsigned hasFileSize : 1;
	NSString* url;
	NSString* aesKey;
	unsigned fileSize;
}
@property(assign) BOOL hasFileSize;
@property(assign) BOOL hasAesKey;
@property(assign) BOOL hasUrl;
@property(assign) unsigned fileSize;
@property(retain) NSString* aesKey;
@property(retain) NSString* url;
+(id)parseFromData:(id)data;
-(id)SetFileSize:(unsigned)size;
-(id)SetAesKey:(id)key;
-(id)SetUrl:(id)url;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EmotionSummary : PBGeneratedMessage {
	unsigned hasTimeLimitStr : 1;
	unsigned hasSendInfo : 1;
	unsigned hasPriceType : 1;
	unsigned hasPriceNum : 1;
	unsigned hasPanelUrl : 1;
	unsigned hasPackCopyright : 1;
	unsigned hasCoverUrl : 1;
	unsigned hasPackPrice : 1;
	unsigned hasPackAuthInfo : 1;
	unsigned hasPackDesc : 1;
	unsigned hasPackName : 1;
	unsigned hasIconUrl : 1;
	unsigned hasProductId : 1;
	unsigned hasPackFlag : 1;
	unsigned hasPackType : 1;
	unsigned hasPackExpire : 1;
	unsigned hasTimestamp : 1;
	NSString* timeLimitStr;
	NSString* sendInfo;
	NSString* priceType;
	NSString* priceNum;
	NSString* panelUrl;
	NSString* packCopyright;
	NSString* coverUrl;
	NSString* packPrice;
	NSString* packAuthInfo;
	NSString* packDesc;
	NSString* packName;
	NSString* iconUrl;
	NSString* productId;
	unsigned packFlag;
	unsigned packType;
	unsigned packExpire;
	unsigned timestamp;
}
@property(assign) BOOL hasTimeLimitStr;
@property(assign) BOOL hasSendInfo;
@property(assign) BOOL hasPriceType;
@property(assign) BOOL hasPriceNum;
@property(assign) BOOL hasPanelUrl;
@property(assign) BOOL hasTimestamp;
@property(assign) BOOL hasPackCopyright;
@property(assign) BOOL hasPackExpire;
@property(assign) BOOL hasCoverUrl;
@property(assign) BOOL hasPackFlag;
@property(assign) BOOL hasPackType;
@property(assign) BOOL hasPackPrice;
@property(assign) BOOL hasPackAuthInfo;
@property(assign) BOOL hasPackDesc;
@property(assign) BOOL hasPackName;
@property(assign) BOOL hasIconUrl;
@property(assign) BOOL hasProductId;
@property(retain) NSString* timeLimitStr;
@property(retain) NSString* sendInfo;
@property(retain) NSString* priceType;
@property(retain) NSString* priceNum;
@property(retain) NSString* panelUrl;
@property(assign) unsigned timestamp;
@property(retain) NSString* packCopyright;
@property(assign) unsigned packExpire;
@property(retain) NSString* coverUrl;
@property(assign) unsigned packFlag;
@property(assign) unsigned packType;
@property(retain) NSString* packPrice;
@property(retain) NSString* packAuthInfo;
@property(retain) NSString* packDesc;
@property(retain) NSString* packName;
@property(retain) NSString* iconUrl;
@property(retain) NSString* productId;
+(id)parseFromData:(id)data;
-(id)SetTimeLimitStr:(id)str;
-(id)SetSendInfo:(id)info;
-(id)SetPriceType:(id)type;
-(id)SetPriceNum:(id)num;
-(id)SetPanelUrl:(id)url;
-(id)SetTimestamp:(unsigned)timestamp;
-(id)SetPackCopyright:(id)copyright;
-(id)SetPackExpire:(unsigned)expire;
-(id)SetCoverUrl:(id)url;
-(id)SetPackFlag:(unsigned)flag;
-(id)SetPackType:(unsigned)type;
-(id)SetPackPrice:(id)price;
-(id)SetPackAuthInfo:(id)info;
-(id)SetPackDesc:(id)desc;
-(id)SetPackName:(id)name;
-(id)SetIconUrl:(id)url;
-(id)SetProductId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PackThumbExt : PBGeneratedMessage {
	unsigned hasPreviewUrl : 1;
	unsigned hasDesc : 1;
	NSString* previewUrl;
	NSString* desc;
}
@property(assign) BOOL hasDesc;
@property(assign) BOOL hasPreviewUrl;
@property(retain) NSString* desc;
@property(retain) NSString* previewUrl;
+(id)parseFromData:(id)data;
-(id)SetDesc:(id)desc;
-(id)SetPreviewUrl:(id)url;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EmotionDetail : PBGeneratedMessage {
	unsigned hasVersion : 1;
	unsigned hasTimeLimitStr : 1;
	unsigned hasConsumeProductId : 1;
	unsigned hasPanelUrl : 1;
	unsigned hasPriceType : 1;
	unsigned hasPriceNum : 1;
	unsigned hasPackCopyright : 1;
	unsigned hasCoverUrl : 1;
	unsigned hasPackPrice : 1;
	unsigned hasPackAuthInfo : 1;
	unsigned hasPackDesc : 1;
	unsigned hasPackName : 1;
	unsigned hasIconUrl : 1;
	unsigned hasProductId : 1;
	unsigned hasPackThumbCnt : 1;
	unsigned hasPackFlag : 1;
	unsigned hasPackExpire : 1;
	unsigned hasPackType : 1;
	unsigned hasThumbExtCount : 1;
	int version;
	NSString* timeLimitStr;
	NSString* consumeProductId;
	NSString* panelUrl;
	NSString* priceType;
	NSString* priceNum;
	NSString* packCopyright;
	NSString* coverUrl;
	NSString* packPrice;
	NSString* packAuthInfo;
	NSString* packDesc;
	NSString* packName;
	NSString* iconUrl;
	NSString* productId;
	unsigned packThumbCnt;
	unsigned packFlag;
	unsigned packExpire;
	unsigned packType;
	unsigned thumbExtCount;
	NSMutableArray* mutablePackThumbListList;
	NSMutableArray* mutableThumbExtListList;
}
@property(assign) BOOL hasTimeLimitStr;
@property(assign) BOOL hasVersion;
@property(retain) NSMutableArray* mutableThumbExtListList;
@property(assign) BOOL hasThumbExtCount;
@property(assign) BOOL hasConsumeProductId;
@property(assign) BOOL hasPanelUrl;
@property(assign) BOOL hasPriceType;
@property(assign) BOOL hasPriceNum;
@property(assign) BOOL hasPackCopyright;
@property(assign) BOOL hasPackExpire;
@property(assign) BOOL hasCoverUrl;
@property(retain) NSMutableArray* mutablePackThumbListList;
@property(assign) BOOL hasPackThumbCnt;
@property(assign) BOOL hasPackFlag;
@property(assign) BOOL hasPackType;
@property(assign) BOOL hasPackPrice;
@property(assign) BOOL hasPackAuthInfo;
@property(assign) BOOL hasPackDesc;
@property(assign) BOOL hasPackName;
@property(assign) BOOL hasIconUrl;
@property(assign) BOOL hasProductId;
@property(retain) NSString* timeLimitStr;
@property(assign) int version;
@property(assign) unsigned thumbExtCount;
@property(retain) NSString* consumeProductId;
@property(retain) NSString* panelUrl;
@property(retain) NSString* priceType;
@property(retain) NSString* priceNum;
@property(retain) NSString* packCopyright;
@property(assign) unsigned packExpire;
@property(retain) NSString* coverUrl;
@property(assign) unsigned packThumbCnt;
@property(assign) unsigned packFlag;
@property(assign) unsigned packType;
@property(retain) NSString* packPrice;
@property(retain) NSString* packAuthInfo;
@property(retain) NSString* packDesc;
@property(retain) NSString* packName;
@property(retain) NSString* iconUrl;
@property(retain) NSString* productId;
+(id)parseFromData:(id)data;
-(id)SetTimeLimitStr:(id)str;
-(id)SetVersion:(int)version;
-(id)addThumbExtList:(id)list;
-(id)addThumbExtListFromArray:(id)array;
-(id)SetThumbExtCount:(unsigned)count;
-(id)SetConsumeProductId:(id)anId;
-(id)SetPanelUrl:(id)url;
-(id)SetPriceType:(id)type;
-(id)SetPriceNum:(id)num;
-(id)SetPackCopyright:(id)copyright;
-(id)SetPackExpire:(unsigned)expire;
-(id)SetCoverUrl:(id)url;
-(id)addPackThumbList:(id)list;
-(id)addPackThumbListFromArray:(id)array;
-(id)SetPackThumbCnt:(unsigned)cnt;
-(id)SetPackFlag:(unsigned)flag;
-(id)SetPackType:(unsigned)type;
-(id)SetPackPrice:(id)price;
-(id)SetPackAuthInfo:(id)info;
-(id)SetPackDesc:(id)desc;
-(id)SetPackName:(id)name;
-(id)SetIconUrl:(id)url;
-(id)SetProductId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)thumbExtListList;
-(id)packThumbListList;
-(id)init;
-(void)dealloc;
@end

@interface EmotionBannerImg : PBGeneratedMessage {
	unsigned hasImgUrl : 1;
	unsigned hasWidth : 1;
	unsigned hasHeight : 1;
	NSString* imgUrl;
	unsigned width;
	unsigned height;
}
@property(assign) BOOL hasHeight;
@property(assign) BOOL hasWidth;
@property(assign) BOOL hasImgUrl;
@property(assign) unsigned height;
@property(assign) unsigned width;
@property(retain) NSString* imgUrl;
+(id)parseFromData:(id)data;
-(id)SetHeight:(unsigned)height;
-(id)SetWidth:(unsigned)width;
-(id)SetImgUrl:(id)url;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EmotionBanner : PBGeneratedMessage {
	unsigned hasBannerSummary : 1;
	unsigned hasBannerImg : 1;
	EmotionSummary* bannerSummary;
	EmotionBannerImg* bannerImg;
}
@property(assign) BOOL hasBannerImg;
@property(assign) BOOL hasBannerSummary;
@property(retain) EmotionBannerImg* bannerImg;
@property(retain) EmotionSummary* bannerSummary;
+(id)parseFromData:(id)data;
-(id)SetBannerImg:(id)img;
-(id)SetBannerSummary:(id)summary;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetEmotionListRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasReqBuf : 1;
	unsigned hasReqType : 1;
	unsigned hasScene : 1;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* reqBuf;
	unsigned reqType;
	unsigned scene;
}
@property(assign) BOOL hasScene;
@property(assign) BOOL hasReqType;
@property(assign) BOOL hasReqBuf;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned scene;
@property(assign) unsigned reqType;
@property(retain) SKBuiltinBuffer_t* reqBuf;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetScene:(unsigned)scene;
-(id)SetReqType:(unsigned)type;
-(id)SetReqBuf:(id)buf;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetEmotionListResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasReqBuf : 1;
	unsigned hasBanner : 1;
	unsigned hasEmotionCount : 1;
	unsigned hasNewBannerCount : 1;
	BaseResponse* baseResponse;
	SKBuiltinBuffer_t* reqBuf;
	EmotionBanner* banner;
	unsigned emotionCount;
	unsigned newBannerCount;
	NSMutableArray* mutableEmotionListList;
	NSMutableArray* mutableNewBannerListList;
}
@property(retain) NSMutableArray* mutableNewBannerListList;
@property(assign) BOOL hasNewBannerCount;
@property(assign) BOOL hasBanner;
@property(retain) NSMutableArray* mutableEmotionListList;
@property(assign) BOOL hasEmotionCount;
@property(assign) BOOL hasReqBuf;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned newBannerCount;
@property(retain) EmotionBanner* banner;
@property(assign) unsigned emotionCount;
@property(retain) SKBuiltinBuffer_t* reqBuf;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addNewBannerList:(id)list;
-(id)addNewBannerListFromArray:(id)array;
-(id)SetNewBannerCount:(unsigned)count;
-(id)SetBanner:(id)banner;
-(id)addEmotionList:(id)list;
-(id)addEmotionListFromArray:(id)array;
-(id)SetEmotionCount:(unsigned)count;
-(id)SetReqBuf:(id)buf;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)newBannerListList;
-(id)emotionListList;
-(id)init;
-(void)dealloc;
@end

@interface GetEmotionDetailRequest : PBGeneratedMessage {
	unsigned hasVersion : 1;
	unsigned hasProductId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasScene : 1;
	int version;
	NSString* productId;
	BaseRequest* baseRequest;
	unsigned scene;
}
@property(assign) BOOL hasVersion;
@property(assign) BOOL hasScene;
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasBaseRequest;
@property(assign) int version;
@property(assign) unsigned scene;
@property(retain) NSString* productId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetVersion:(int)version;
-(id)SetScene:(unsigned)scene;
-(id)SetProductId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetEmotionDetailResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasEmotionDetail : 1;
	BaseResponse* baseResponse;
	EmotionDetail* emotionDetail;
}
@property(assign) BOOL hasEmotionDetail;
@property(assign) BOOL hasBaseResponse;
@property(retain) EmotionDetail* emotionDetail;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetEmotionDetail:(id)detail;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyPurchaseRequest : PBGeneratedMessage {
	unsigned hasProductId : 1;
	unsigned hasPrice : 1;
	unsigned hasCurrencyType : 1;
	unsigned hasBillNo : 1;
	unsigned hasReceiptSig : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasReceipt : 1;
	unsigned hasVerifyType : 1;
	unsigned hasPayType : 1;
	unsigned hasPayTime : 1;
	unsigned hasQuantity : 1;
	NSString* productId;
	NSString* price;
	NSString* currencyType;
	NSString* billNo;
	NSString* receiptSig;
	BaseRequest* baseRequest;
	SKBuiltinBuffer_t* receipt;
	unsigned verifyType;
	unsigned payType;
	unsigned payTime;
	unsigned quantity;
}
@property(assign) BOOL hasQuantity;
@property(assign) BOOL hasReceiptSig;
@property(assign) BOOL hasPayTime;
@property(assign) BOOL hasBillNo;
@property(assign) BOOL hasCurrencyType;
@property(assign) BOOL hasPrice;
@property(assign) BOOL hasPayType;
@property(assign) BOOL hasVerifyType;
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasReceipt;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned quantity;
@property(retain) NSString* receiptSig;
@property(assign) unsigned payTime;
@property(retain) NSString* billNo;
@property(retain) NSString* currencyType;
@property(retain) NSString* price;
@property(assign) unsigned payType;
@property(assign) unsigned verifyType;
@property(retain) NSString* productId;
@property(retain) SKBuiltinBuffer_t* receipt;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetQuantity:(unsigned)quantity;
-(id)SetReceiptSig:(id)sig;
-(id)SetPayTime:(unsigned)time;
-(id)SetBillNo:(id)no;
-(id)SetCurrencyType:(id)type;
-(id)SetPrice:(id)price;
-(id)SetPayType:(unsigned)type;
-(id)SetVerifyType:(unsigned)type;
-(id)SetProductId:(id)anId;
-(id)SetReceipt:(id)receipt;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyPurchaseResponse : PBGeneratedMessage {
	unsigned hasSeriesId : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasBizType : 1;
	NSString* seriesId;
	BaseResponse* baseResponse;
	unsigned bizType;
}
@property(assign) BOOL hasBizType;
@property(assign) BOOL hasSeriesId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned bizType;
@property(retain) NSString* seriesId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBizType:(unsigned)type;
-(id)SetSeriesId:(id)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModEmotionPackRequest : PBGeneratedMessage {
	unsigned hasProductId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasOpCode : 1;
	NSString* productId;
	BaseRequest* baseRequest;
	unsigned opCode;
}
@property(assign) BOOL hasOpCode;
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned opCode;
@property(retain) NSString* productId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetOpCode:(unsigned)code;
-(id)SetProductId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModEmotionPackResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PreparePurchaseRequest : PBGeneratedMessage {
	unsigned hasProductId : 1;
	unsigned hasPrice : 1;
	unsigned hasCurrencyType : 1;
	unsigned hasExtInfo : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasPayType : 1;
	unsigned hasQuantity : 1;
	NSString* productId;
	NSString* price;
	NSString* currencyType;
	NSString* extInfo;
	BaseRequest* baseRequest;
	unsigned payType;
	unsigned quantity;
}
@property(assign) BOOL hasQuantity;
@property(assign) BOOL hasExtInfo;
@property(assign) BOOL hasPayType;
@property(assign) BOOL hasCurrencyType;
@property(assign) BOOL hasPrice;
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned quantity;
@property(retain) NSString* extInfo;
@property(assign) unsigned payType;
@property(retain) NSString* currencyType;
@property(retain) NSString* price;
@property(retain) NSString* productId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetQuantity:(unsigned)quantity;
-(id)SetExtInfo:(id)info;
-(id)SetPayType:(unsigned)type;
-(id)SetCurrencyType:(id)type;
-(id)SetPrice:(id)price;
-(id)SetProductId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface PreparePurchaseResponse : PBGeneratedMessage {
	unsigned hasBillNo : 1;
	unsigned hasTradeToken4TenPay : 1;
	unsigned hasPartner4TenPay : 1;
	unsigned hasSign4TenPay : 1;
	unsigned hasBaseResponse : 1;
	NSString* billNo;
	NSString* tradeToken4TenPay;
	NSString* partner4TenPay;
	NSString* sign4TenPay;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasSign4TenPay;
@property(assign) BOOL hasPartner4TenPay;
@property(assign) BOOL hasTradeToken4TenPay;
@property(assign) BOOL hasBillNo;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* sign4TenPay;
@property(retain) NSString* partner4TenPay;
@property(retain) NSString* tradeToken4TenPay;
@property(retain) NSString* billNo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetSign4TenPay:(id)pay;
-(id)SetPartner4TenPay:(id)pay;
-(id)SetTradeToken4TenPay:(id)pay;
-(id)SetBillNo:(id)no;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ExchangeEmotionPackRequest : PBGeneratedMessage {
	unsigned hasProductId : 1;
	unsigned hasSeriesId : 1;
	unsigned hasBaseRequest : 1;
	NSString* productId;
	NSString* seriesId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasSeriesId;
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* seriesId;
@property(retain) NSString* productId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSeriesId:(id)anId;
-(id)SetProductId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ExchangeEmotionPackResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasDownloadInfo : 1;
	BaseResponse* baseResponse;
	EmotionCDNUrl* downloadInfo;
}
@property(assign) BOOL hasDownloadInfo;
@property(assign) BOOL hasBaseResponse;
@property(retain) EmotionCDNUrl* downloadInfo;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetDownloadInfo:(id)info;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CancelPurchaseRequest : PBGeneratedMessage {
	unsigned hasErrorCode : 1;
	unsigned hasProductId : 1;
	unsigned hasPrice : 1;
	unsigned hasCurrencyType : 1;
	unsigned hasBillNo : 1;
	unsigned hasErrorDescription : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasVerifyType : 1;
	unsigned hasPayType : 1;
	unsigned hasPayTime : 1;
	int errorCode;
	NSString* productId;
	NSString* price;
	NSString* currencyType;
	NSString* billNo;
	NSString* errorDescription;
	BaseRequest* baseRequest;
	unsigned verifyType;
	unsigned payType;
	unsigned payTime;
}
@property(assign) BOOL hasErrorDescription;
@property(assign) BOOL hasErrorCode;
@property(assign) BOOL hasPayTime;
@property(assign) BOOL hasBillNo;
@property(assign) BOOL hasCurrencyType;
@property(assign) BOOL hasPrice;
@property(assign) BOOL hasPayType;
@property(assign) BOOL hasVerifyType;
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* errorDescription;
@property(assign) int errorCode;
@property(assign) unsigned payTime;
@property(retain) NSString* billNo;
@property(retain) NSString* currencyType;
@property(retain) NSString* price;
@property(assign) unsigned payType;
@property(assign) unsigned verifyType;
@property(retain) NSString* productId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetErrorDescription:(id)description;
-(id)SetErrorCode:(int)code;
-(id)SetPayTime:(unsigned)time;
-(id)SetBillNo:(id)no;
-(id)SetCurrencyType:(id)type;
-(id)SetPrice:(id)price;
-(id)SetPayType:(unsigned)type;
-(id)SetVerifyType:(unsigned)type;
-(id)SetProductId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CancelPurchaseResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EmotionMember : PBGeneratedMessage {
	unsigned hasUserName : 1;
	NSString* userName;
}
@property(assign) BOOL hasUserName;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface MemberStatus : PBGeneratedMessage {
	unsigned hasStatus : 1;
	unsigned hasUserName : 1;
	int status;
	NSString* userName;
}
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasUserName;
@property(assign) int status;
@property(retain) NSString* userName;
+(id)parseFromData:(id)data;
-(id)SetStatus:(int)status;
-(id)SetUserName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface VerifyEmotionPresentationRequest : PBGeneratedMessage {
	unsigned hasProductId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasMemberCount : 1;
	NSString* productId;
	BaseRequest* baseRequest;
	unsigned memberCount;
	NSMutableArray* mutableMemberListList;
}
@property(retain) NSMutableArray* mutableMemberListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned memberCount;
@property(retain) NSString* productId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addMemberList:(id)list;
-(id)addMemberListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetProductId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)memberListList;
-(id)init;
-(void)dealloc;
@end

@interface VerifyEmotionPresentationResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasMemberCount : 1;
	BaseResponse* baseResponse;
	unsigned memberCount;
	NSMutableArray* mutableStatusListList;
}
@property(retain) NSMutableArray* mutableStatusListList;
@property(assign) BOOL hasMemberCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned memberCount;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addStatusList:(id)list;
-(id)addStatusListFromArray:(id)array;
-(id)SetMemberCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)statusListList;
-(id)init;
-(void)dealloc;
@end

@interface LangDesc : PBGeneratedMessage {
	unsigned hasLang : 1;
	unsigned hasDesc : 1;
	NSString* lang;
	NSString* desc;
}
@property(assign) BOOL hasDesc;
@property(assign) BOOL hasLang;
@property(retain) NSString* desc;
@property(retain) NSString* lang;
+(id)parseFromData:(id)data;
-(id)SetDesc:(id)desc;
-(id)SetLang:(id)lang;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface EmotionDesc : PBGeneratedMessage {
	unsigned hasMd5 : 1;
	unsigned hasCount : 1;
	NSString* md5;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasMd5;
@property(assign) unsigned count;
@property(retain) NSString* md5;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetMd5:(id)a5;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface GetEmotionDescRequest : PBGeneratedMessage {
	unsigned hasProductId : 1;
	unsigned hasBaseRequest : 1;
	NSString* productId;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasProductId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* productId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetProductId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetEmotionDescResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	unsigned hasClickFlag : 1;
	BaseResponse* baseResponse;
	unsigned count;
	unsigned clickFlag;
	NSMutableArray* mutableListList;
}
@property(assign) BOOL hasClickFlag;
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned clickFlag;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetClickFlag:(unsigned)flag;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface AddFavItem : PBGeneratedMessage {
	unsigned hasFavId : 1;
	unsigned hasType : 1;
	unsigned hasFlag : 1;
	unsigned hasUpdateTime : 1;
	unsigned hasUpdateSeq : 1;
	int favId;
	int type;
	unsigned flag;
	unsigned updateTime;
	unsigned updateSeq;
}
@property(assign) BOOL hasUpdateSeq;
@property(assign) BOOL hasUpdateTime;
@property(assign) BOOL hasFlag;
@property(assign) BOOL hasType;
@property(assign) BOOL hasFavId;
@property(assign) unsigned updateSeq;
@property(assign) unsigned updateTime;
@property(assign) unsigned flag;
@property(assign) int type;
@property(assign) int favId;
+(id)parseFromData:(id)data;
-(id)SetUpdateSeq:(unsigned)seq;
-(id)SetUpdateTime:(unsigned)time;
-(id)SetFlag:(unsigned)flag;
-(id)SetType:(int)type;
-(id)SetFavId:(int)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CheckFavItemRequest : PBGeneratedMessage {
	unsigned hasSourceId : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasSourceType : 1;
	NSString* sourceId;
	BaseRequest* baseRequest;
	unsigned sourceType;
}
@property(assign) BOOL hasSourceId;
@property(assign) BOOL hasSourceType;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* sourceId;
@property(assign) unsigned sourceType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetSourceId:(id)anId;
-(id)SetSourceType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CheckFavItemResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModFavIndex : PBGeneratedMessage {
	unsigned hasModField : 1;
	unsigned hasModValue : 1;
	unsigned modField;
	unsigned modValue;
}
@property(assign) BOOL hasModValue;
@property(assign) BOOL hasModField;
@property(assign) unsigned modValue;
@property(assign) unsigned modField;
+(id)parseFromData:(id)data;
-(id)SetModValue:(unsigned)value;
-(id)SetModField:(unsigned)field;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModFavObject : PBGeneratedMessage {
	unsigned hasTagName : 1;
	unsigned hasAttrName : 1;
	unsigned hasValue : 1;
	NSString* tagName;
	NSString* attrName;
	NSString* value;
}
@property(assign) BOOL hasValue;
@property(assign) BOOL hasAttrName;
@property(assign) BOOL hasTagName;
@property(retain) NSString* value;
@property(retain) NSString* attrName;
@property(retain) NSString* tagName;
+(id)parseFromData:(id)data;
-(id)SetValue:(id)value;
-(id)SetAttrName:(id)name;
-(id)SetTagName:(id)name;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface ModFavItemRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasFavId : 1;
	unsigned hasIndexCount : 1;
	unsigned hasObjectCount : 1;
	BaseRequest* baseRequest;
	unsigned favId;
	unsigned indexCount;
	unsigned objectCount;
	NSMutableArray* mutableIndexListList;
	NSMutableArray* mutableObjectListList;
}
@property(retain) NSMutableArray* mutableObjectListList;
@property(assign) BOOL hasObjectCount;
@property(retain) NSMutableArray* mutableIndexListList;
@property(assign) BOOL hasIndexCount;
@property(assign) BOOL hasFavId;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned objectCount;
@property(assign) unsigned indexCount;
@property(assign) unsigned favId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addObjectList:(id)list;
-(id)addObjectListFromArray:(id)array;
-(id)SetObjectCount:(unsigned)count;
-(id)addIndexList:(id)list;
-(id)addIndexListFromArray:(id)array;
-(id)SetIndexCount:(unsigned)count;
-(id)SetFavId:(unsigned)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)objectListList;
-(id)indexListList;
-(id)init;
-(void)dealloc;
@end

@interface ModFavItemResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	BaseResponse* baseResponse;
}
@property(assign) BOOL hasBaseResponse;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AddFavItemRequest : PBGeneratedMessage {
	unsigned hasClientId : 1;
	unsigned hasSourceId : 1;
	unsigned hasObject : 1;
	unsigned hasBaseRequest : 1;
	unsigned hasType : 1;
	unsigned hasSourceType : 1;
	NSString* clientId;
	NSString* sourceId;
	NSString* object;
	BaseRequest* baseRequest;
	unsigned type;
	unsigned sourceType;
}
@property(assign) BOOL hasObject;
@property(assign) BOOL hasSourceId;
@property(assign) BOOL hasSourceType;
@property(assign) BOOL hasType;
@property(assign) BOOL hasClientId;
@property(assign) BOOL hasBaseRequest;
@property(retain) NSString* object;
@property(retain) NSString* sourceId;
@property(assign) unsigned sourceType;
@property(assign) unsigned type;
@property(retain) NSString* clientId;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetObject:(id)object;
-(id)SetSourceId:(id)anId;
-(id)SetSourceType:(unsigned)type;
-(id)SetType:(unsigned)type;
-(id)SetClientId:(id)anId;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface AddFavItemResponse : PBGeneratedMessage {
	unsigned hasUsedSize : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasFavId : 1;
	unsigned hasUpdateSeq : 1;
	unsigned long long usedSize;
	BaseResponse* baseResponse;
	unsigned favId;
	unsigned updateSeq;
}
@property(assign) BOOL hasUsedSize;
@property(assign) BOOL hasUpdateSeq;
@property(assign) BOOL hasFavId;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned long long usedSize;
@property(assign) unsigned updateSeq;
@property(assign) unsigned favId;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetUsedSize:(unsigned long long)size;
-(id)SetUpdateSeq:(unsigned)seq;
-(id)SetFavId:(unsigned)anId;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface DelFavItemRsp : PBGeneratedMessage {
	unsigned hasRet : 1;
	unsigned hasFavId : 1;
	int ret;
	unsigned favId;
}
@property(assign) BOOL hasFavId;
@property(assign) BOOL hasRet;
@property(assign) unsigned favId;
@property(assign) int ret;
+(id)parseFromData:(id)data;
-(id)SetFavId:(unsigned)anId;
-(id)SetRet:(int)ret;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BatchDelFavItemRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableFavIdListList;
	int favIdListMemoizedSerializedSize;
}
@property(retain) NSMutableArray* mutableFavIdListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addFavIdListFromArray:(id)array;
-(id)addFavIdList:(unsigned)list;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)favIdListList;
-(id)init;
-(void)dealloc;
@end

@interface BatchDelFavItemResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface FavObject : PBGeneratedMessage {
	unsigned hasStatus : 1;
	unsigned hasObject : 1;
	unsigned hasFavId : 1;
	unsigned hasFlag : 1;
	unsigned hasUpdateTime : 1;
	unsigned hasUpdateSeq : 1;
	int status;
	NSString* object;
	unsigned favId;
	unsigned flag;
	unsigned updateTime;
	unsigned updateSeq;
}
@property(assign) BOOL hasUpdateSeq;
@property(assign) BOOL hasUpdateTime;
@property(assign) BOOL hasFlag;
@property(assign) BOOL hasObject;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasFavId;
@property(assign) unsigned updateSeq;
@property(assign) unsigned updateTime;
@property(assign) unsigned flag;
@property(retain) NSString* object;
@property(assign) int status;
@property(assign) unsigned favId;
+(id)parseFromData:(id)data;
-(id)SetUpdateSeq:(unsigned)seq;
-(id)SetUpdateTime:(unsigned)time;
-(id)SetFlag:(unsigned)flag;
-(id)SetObject:(id)object;
-(id)SetStatus:(int)status;
-(id)SetFavId:(unsigned)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface BatchGetFavItemRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableFavIdListList;
	int favIdListMemoizedSerializedSize;
}
@property(retain) NSMutableArray* mutableFavIdListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addFavIdListFromArray:(id)array;
-(id)addFavIdList:(unsigned)list;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)favIdListList;
-(id)init;
-(void)dealloc;
@end

@interface BatchGetFavItemResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableObjectListList;
}
@property(retain) NSMutableArray* mutableObjectListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addObjectList:(id)list;
-(id)addObjectListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)objectListList;
-(id)init;
-(void)dealloc;
@end

@interface CheckCDN : PBGeneratedMessage {
	unsigned hasDataId : 1;
	unsigned hasFullMd5 : 1;
	unsigned hasHead256Md5 : 1;
	unsigned hasDataSourceId : 1;
	unsigned hasFullSize : 1;
	unsigned hasDataSourceType : 1;
	unsigned hasIsThumb : 1;
	NSString* dataId;
	NSString* fullMd5;
	NSString* head256Md5;
	NSString* dataSourceId;
	unsigned fullSize;
	unsigned dataSourceType;
	unsigned isThumb;
}
@property(assign) BOOL hasIsThumb;
@property(assign) BOOL hasDataSourceId;
@property(assign) BOOL hasDataSourceType;
@property(assign) BOOL hasFullSize;
@property(assign) BOOL hasHead256Md5;
@property(assign) BOOL hasFullMd5;
@property(assign) BOOL hasDataId;
@property(assign) unsigned isThumb;
@property(retain) NSString* dataSourceId;
@property(assign) unsigned dataSourceType;
@property(assign) unsigned fullSize;
@property(retain) NSString* head256Md5;
@property(retain) NSString* fullMd5;
@property(retain) NSString* dataId;
+(id)parseFromData:(id)data;
-(id)SetIsThumb:(unsigned)thumb;
-(id)SetDataSourceId:(id)anId;
-(id)SetDataSourceType:(unsigned)type;
-(id)SetFullSize:(unsigned)size;
-(id)SetHead256Md5:(id)a5;
-(id)SetFullMd5:(id)a5;
-(id)SetDataId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface FavCDNItem : PBGeneratedMessage {
	unsigned hasEncryVer : 1;
	unsigned hasStatus : 1;
	unsigned hasDataStatus : 1;
	unsigned hasDataId : 1;
	unsigned hasFullMd5 : 1;
	unsigned hasHead256Md5 : 1;
	unsigned hasCdnurl : 1;
	unsigned hasAeskey : 1;
	unsigned hasVideoId : 1;
	unsigned hasFullSize : 1;
	int encryVer;
	int status;
	int dataStatus;
	NSString* dataId;
	NSString* fullMd5;
	NSString* head256Md5;
	NSString* cdnurl;
	NSString* aeskey;
	NSString* videoId;
	unsigned fullSize;
}
@property(assign) BOOL hasDataStatus;
@property(assign) BOOL hasStatus;
@property(assign) BOOL hasVideoId;
@property(assign) BOOL hasEncryVer;
@property(assign) BOOL hasAeskey;
@property(assign) BOOL hasCdnurl;
@property(assign) BOOL hasFullSize;
@property(assign) BOOL hasHead256Md5;
@property(assign) BOOL hasFullMd5;
@property(assign) BOOL hasDataId;
@property(assign) int dataStatus;
@property(assign) int status;
@property(retain) NSString* videoId;
@property(assign) int encryVer;
@property(retain) NSString* aeskey;
@property(retain) NSString* cdnurl;
@property(assign) unsigned fullSize;
@property(retain) NSString* head256Md5;
@property(retain) NSString* fullMd5;
@property(retain) NSString* dataId;
+(id)parseFromData:(id)data;
-(id)SetDataStatus:(int)status;
-(id)SetStatus:(int)status;
-(id)SetVideoId:(id)anId;
-(id)SetEncryVer:(int)ver;
-(id)SetAeskey:(id)aeskey;
-(id)SetCdnurl:(id)cdnurl;
-(id)SetFullSize:(unsigned)size;
-(id)SetHead256Md5:(id)a5;
-(id)SetFullMd5:(id)a5;
-(id)SetDataId:(id)anId;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetFavInfoRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	BaseRequest* baseRequest;
}
@property(assign) BOOL hasBaseRequest;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetFavInfoResponse : PBGeneratedMessage {
	unsigned hasUsedSize : 1;
	unsigned hasTotalSize : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasMxFavFileSize : 1;
	unsigned hasMxAutoUploadSize : 1;
	unsigned hasMxAutoDownloadSize : 1;
	unsigned long long usedSize;
	unsigned long long totalSize;
	BaseResponse* baseResponse;
	unsigned mxFavFileSize;
	unsigned mxAutoUploadSize;
	unsigned mxAutoDownloadSize;
}
@property(assign) BOOL hasMxAutoDownloadSize;
@property(assign) BOOL hasMxAutoUploadSize;
@property(assign) BOOL hasMxFavFileSize;
@property(assign) BOOL hasTotalSize;
@property(assign) BOOL hasUsedSize;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned mxAutoDownloadSize;
@property(assign) unsigned mxAutoUploadSize;
@property(assign) unsigned mxFavFileSize;
@property(assign) unsigned long long totalSize;
@property(assign) unsigned long long usedSize;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetMxAutoDownloadSize:(unsigned)size;
-(id)SetMxAutoUploadSize:(unsigned)size;
-(id)SetMxFavFileSize:(unsigned)size;
-(id)SetTotalSize:(unsigned long long)size;
-(id)SetUsedSize:(unsigned long long)size;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface CheckCDNRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasCount : 1;
	BaseRequest* baseRequest;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned count;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface CheckCDNResponse : PBGeneratedMessage {
	unsigned hasBaseResponse : 1;
	unsigned hasCount : 1;
	BaseResponse* baseResponse;
	unsigned count;
	NSMutableArray* mutableListList;
}
@property(retain) NSMutableArray* mutableListList;
@property(assign) BOOL hasCount;
@property(assign) BOOL hasBaseResponse;
@property(assign) unsigned count;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)addList:(id)list;
-(id)addListFromArray:(id)array;
-(id)SetCount:(unsigned)count;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)listList;
-(id)init;
-(void)dealloc;
@end

@interface FavSyncRequest : PBGeneratedMessage {
	unsigned hasKeyBuf : 1;
	unsigned hasSelector : 1;
	SKBuiltinBuffer_t* keyBuf;
	unsigned selector;
}
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasSelector;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(assign) unsigned selector;
+(id)parseFromData:(id)data;
-(id)SetKeyBuf:(id)buf;
-(id)SetSelector:(unsigned)selector;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface FavSyncResponse : PBGeneratedMessage {
	unsigned hasRet : 1;
	unsigned hasCmdList : 1;
	unsigned hasKeyBuf : 1;
	unsigned hasContinueFlag : 1;
	int ret;
	CmdList* cmdList;
	SKBuiltinBuffer_t* keyBuf;
	unsigned continueFlag;
}
@property(assign) BOOL hasContinueFlag;
@property(assign) BOOL hasKeyBuf;
@property(assign) BOOL hasCmdList;
@property(assign) BOOL hasRet;
@property(assign) unsigned continueFlag;
@property(retain) SKBuiltinBuffer_t* keyBuf;
@property(retain) CmdList* cmdList;
@property(assign) int ret;
+(id)parseFromData:(id)data;
-(id)SetContinueFlag:(unsigned)flag;
-(id)SetKeyBuf:(id)buf;
-(id)SetCmdList:(id)list;
-(id)SetRet:(int)ret;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetUpdateInfoRequest : PBGeneratedMessage {
	unsigned hasBaseRequest : 1;
	unsigned hasUpdateType : 1;
	BaseRequest* baseRequest;
	unsigned updateType;
}
@property(assign) BOOL hasUpdateType;
@property(assign) BOOL hasBaseRequest;
@property(assign) unsigned updateType;
@property(retain) BaseRequest* baseRequest;
+(id)parseFromData:(id)data;
-(id)SetUpdateType:(unsigned)type;
-(id)SetBaseRequest:(id)request;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)init;
-(void)dealloc;
@end

@interface GetUpdateInfoResponse : PBGeneratedMessage {
	unsigned hasPackMd5 : 1;
	unsigned hasPackDescription : 1;
	unsigned hasPatchInfo : 1;
	unsigned hasBaseResponse : 1;
	unsigned hasPackVersion : 1;
	unsigned hasPackSize : 1;
	unsigned hasUrlCount : 1;
	NSString* packMd5;
	NSString* packDescription;
	NSString* patchInfo;
	BaseResponse* baseResponse;
	unsigned packVersion;
	unsigned packSize;
	unsigned urlCount;
	NSMutableArray* mutableDownLoadUrlList;
}
@property(assign) BOOL hasPatchInfo;
@property(retain) NSMutableArray* mutableDownLoadUrlList;
@property(assign) BOOL hasUrlCount;
@property(assign) BOOL hasPackDescription;
@property(assign) BOOL hasPackSize;
@property(assign) BOOL hasPackMd5;
@property(assign) BOOL hasPackVersion;
@property(assign) BOOL hasBaseResponse;
@property(retain) NSString* patchInfo;
@property(assign) unsigned urlCount;
@property(retain) NSString* packDescription;
@property(assign) unsigned packSize;
@property(retain) NSString* packMd5;
@property(assign) unsigned packVersion;
@property(retain) BaseResponse* baseResponse;
+(id)parseFromData:(id)data;
-(id)SetPatchInfo:(id)info;
-(id)addDownLoadUrl:(id)url;
-(id)addDownLoadUrlFromArray:(id)array;
-(id)SetUrlCount:(unsigned)count;
-(id)SetPackDescription:(id)description;
-(id)SetPackSize:(unsigned)size;
-(id)SetPackMd5:(id)a5;
-(id)SetPackVersion:(unsigned)version;
-(id)SetBaseResponse:(id)response;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(int)serializedSize;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)downLoadUrlList;
-(id)init;
-(void)dealloc;
@end

@interface LoginRegABTestSetting : NSObject <PBCoding> {
	unsigned long m_randomIntForEmailReg;
}
@property(assign, nonatomic) unsigned long m_randomIntForEmailReg;
+(id)getInstance;
+(void)initialize;
+(void)_initPBTableOfLoginRegABTestSetting;
-(BOOL)needOpenSignUpByEmail;
-(BOOL)isBeforeDeadline:(id)deadline;
-(BOOL)shouldShowSignUpByEmail;
-(id)getLocalCachePath;
-(id)getLocalCacheRootDir;
-(void)saveSetting;
-(void)copyFeildFrom:(id)from;
-(BOOL)loadSetting;
-(void)resetSetting;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface FindContactSearchViewCellInfo : MMTableViewCellInfo <MessageObserverDelegate, contactInfoDelegate, UIAlertViewDelegate> {
	UITextField* m_userNameTextField;
	MMLoadingView* m_loadingView;
	NSString* m_nsUserNameToFind;
	MMUIViewController* m_containViewController;
}
@property(retain, nonatomic) NSString* m_nsUserNameToFind;
@property(retain, nonatomic) UITextField* m_userNameTextField;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)dealloc;
-(BOOL)resignFirstResponder;
-(id)init;
-(void)makeCell:(id)cell;
-(void)showAlert:(id)alert;
-(void)onSearch:(id)search;
-(void)openNetLog;
-(void)showContactListInfoView:(id)view;
-(BOOL)allTextIsBlank;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)showContactInfoView:(id)view;
-(void)addFriendScene:(id)scene;
-(BOOL)isBestGuessPhoneNumber:(id)number;
-(void)doSearch;
-(id)filterUserName:(id)name;
-(void)stopLoading;
-(void)startLoading;
-(void)setViewController:(id)controller;
@end

@interface EmoticonStoreGridView : MMImageGridView {
	unsigned long m_currentSelectIndex;
	NSString* m_emoticonPid;
}
@property(retain, nonatomic) NSString* m_emoticonPid;
-(BOOL)isPoint:(CGPoint)point inView:(id)view;
-(void)loadPreViewAtIndex:(int)index;
-(id)showPreviewAtIndex:(int)index;
-(int)getRealIndexFromPoint:(CGPoint)point;
-(void)handleLongPress:(id)press;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
@end

@interface RecommendAppsLogicImpl : MMObject <PBMessageObserverDelegate> {
	NSArray* _recommendAppsList;
	NSMutableArray* _tempList;
	BOOL _isUpdating;
	BOOL _isGettingIcon;
	NSMutableDictionary* _updateIconDic;
	unsigned long _lastUpdateTime;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)handleGetAppIconRsp:(id)rsp;
-(void)handleUpdateRecommendAppsListWithOffsetResp:(id)offsetResp;
-(void)addNewItemToUpdateIconDicAndStartUpdate;
-(BOOL)makeUrlRequest:(id)request userData:(id)data;
-(void)getAppIcon:(id)icon appID:(id)anId;
-(void)checkAndUpdateAppIcon;
-(id)GetPathOfRecommendAppIcon:(id)recommendAppIcon IconUrl:(id)url;
-(void)saveRecommendAppsList;
-(void)loadRecommendAppsListFromFile;
-(id)getAppInfoDataRootDir;
-(BOOL)updateRecommendAppsListWithOffset:(unsigned long)offset;
-(BOOL)updateRecommendAppsList;
-(id)getRecommendAppsList;
-(void)dealloc;
-(id)init;
@end

@interface SvrErrorMgr : MMService <MMService> {
}
-(void)MainThreadNotifyIDCErrorMsg:(id)msg;
-(void)SetSvrErrorMsg:(id)msg Cgi:(unsigned long)cgi;
-(void)dealloc;
-(id)init;
@end

@interface FavoritesFileMgr : MMService <MMService> {
	FavoritesFileRetainCountDB* _frcDB;
}
-(BOOL)decFileRetainCountByMd5:(id)a5 IsThumb:(BOOL)thumb ItemLocalId:(unsigned long)anId DataFmt:(id)fmt;
-(BOOL)incFileRetainCountByMd5:(id)a5 andItemLocalId:(unsigned long)anId;
-(void)initDB:(id)db;
-(void)dealloc;
-(id)init;
@end

@interface FavoritesFileRetainCountDB : NSObject {
	MyFavoritesDB* _mmDB;
}
-(BOOL)isMd5RetainCountZero:(id)zero;
-(BOOL)deleteItemByMd5:(id)a5 andItemLocalId:(unsigned long)anId;
-(BOOL)insertToFileRetainCountTable:(id)fileRetainCountTable ItemLocalId:(unsigned long)anId;
-(BOOL)isItemExist:(id)exist ItemLocalId:(unsigned long)anId;
-(void)initDB:(id)db;
-(void)dealloc;
-(id)init;
@end

@interface BarcodeScanner : MMObject <CameraScannerViewDelegate> {
	CGRect _cropRect;
	id<BarcodeScannerDelegate> _delegate;
	BOOL _isDecoding;
	char* _sendImage;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _barcodeData;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _barcodeType;
}
@property(assign, nonatomic) id<BarcodeScannerDelegate> delegate;
@property(assign, nonatomic) CGRect cropRect;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)notifyGotBarcode:(id)barcode;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(BOOL)scanOnePicture:(id)picture;
-(void)stop;
-(void)start;
-(void)dealloc;
-(id)init;
@end

@interface ScanBarcodeLogicController : BaseScanLogicController <ScanBarcodeExt, BarcodeScannerDelegate, UIAlertViewDelegate> {
	BarcodeScanner* _scanner;
}
-(void)onGotBarcode:(id)barcode Type:(id)type;
-(void)OnSendBarcode:(id)barcode Err:(int)err;
-(void)actionSheetCancel:(id)cancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(float)getPreviewScale;
-(id)getAlertText;
-(id)getLoadingText;
-(id)getInfoText;
-(CGRect)getDrawCropRect;
-(void)stopScan;
-(void)startScan;
-(void)dealloc;
-(id)init;
@end

@interface ScanBarcodeMgr : MMService <MMService, PBMessageObserverDelegate> {
	NSString* _extKey;
	BOOL _isUploading;
}
@property(retain, nonatomic) NSString* extKey;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)cancelUploading;
-(void)sendBarcode:(id)barcode andType:(id)type Scene:(unsigned)scene;
-(unsigned)getBarcodeType:(id)type;
-(void)dealloc;
-(id)init;
@end

@interface iAPMgr : MMService <SKPaymentTransactionObserver, SKProductsRequestDelegate, PBMessageObserverDelegate, MMService> {
	NSMutableSet* _setSKProductsRequests;
	NSMutableArray* _arrRestoredTransactions;
	NSMutableArray* _arrRestoredVerifiedTransaction;
	BOOL _bIsRestoring;
	unsigned long _status;
	iAPCache* _iAPCache;
	JailBreakHelper* m_jailBreakHelper;
}
@property(retain, nonatomic) JailBreakHelper* m_jailBreakHelper;
+(unsigned long)getBizTypeOfProductID:(id)productID;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onPreparePurchase:(id)purchase;
-(void)onVerifyPurchase:(id)purchase;
-(void)onVerifyPurchaseForRestore:(id)restore request:(id)request;
-(void)restoreNextTransaction:(id)transaction;
-(void)onVerifyPurchaseForPurchase:(id)purchase request:(id)request;
-(void)finishTransactionForTransactionID:(id)transactionID;
-(BOOL)FinishTransaction:(id)transaction;
-(BOOL)RecoverTransactions;
-(unsigned long)UnfinishTransactionCount;
-(int)RestoreCompletedTransactions;
-(int)RestoreCompletedTransactionsNeedCheckJailBreak:(BOOL)aBreak;
-(int)Purchase:(id)purchase extInfo:(id)info;
-(int)Purchase:(id)purchase extInfo:(id)info NeedCheckJailBreak:(BOOL)aBreak;
-(BOOL)cannotPurchaseDuetoJailbreakPlugin:(BOOL)plugin;
-(BOOL)GetProduct:(id)product;
-(void)request:(id)request didFailWithError:(id)error;
-(void)productsRequest:(id)request didReceiveResponse:(id)response;
-(void)paymentQueueRestoreCompletedTransactionsFinished:(id)finished;
-(void)paymentQueue:(id)queue restoreCompletedTransactionsFailedWithError:(id)error;
-(void)paymentQueue:(id)queue removedTransactions:(id)transactions;
-(void)paymentQueue:(id)queue updatedTransactions:(id)transactions;
-(void)cancelPurchase:(id)purchase verifyType:(int)type;
-(void)verifyTransationForUnVerifyTransaction:(id)unVerifyTransaction verifyType:(int)type;
-(void)verifyTransation:(id)transation verifyType:(int)type;
-(BOOL)preparePurchase:(id)purchase extInfo:(id)info;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)dealloc;
-(void)onServiceInit;
-(void)writeCache;
-(id)pathForCache;
@end

@interface iAPTransation : NSObject {
	NSString* nsProductID;
	NSString* nsTransationID;
	NSString* nsSerialID;
	unsigned long iRequestType;
	unsigned long iBizType;
}
@property(assign, nonatomic) unsigned long iBizType;
@property(assign, nonatomic) unsigned long iRequestType;
@property(retain, nonatomic) NSString* nsSerialID;
@property(retain, nonatomic) NSString* nsTransationID;
@property(retain, nonatomic) NSString* nsProductID;
-(id)description;
-(void)dealloc;
@end

@interface WCPayOrderPayConfirmView : MMUIView <WCBaseInfoItemDelegate> {
	UIImageView* m_backgroundView;
	UIButton* m_payButton;
	WCPayTenpayPasswordCtrlItem* m_textFieldItemPwd;
	MMDelegateProxy<WCPayOrderPayConfirmViewDelegate>* m_delegate;
}
-(BOOL)shouldPreventedAutorotateToInterfaceOrientation;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)onCancelBtnClick;
-(void)onPayBtnClick;
-(void)closeView;
-(void)showAnimation;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame andData:(id)data delegate:(id)delegate;
@end

@interface MotionDetector : MMObject {
	id<MotionDetectorDelegate> _delegate;
	BOOL _isInit;
	AVCaptureDevice* _defaultCaptureDevice;
	int _state;
}
@property(readonly, assign, nonatomic) int state;
@property(assign, nonatomic) id<MotionDetectorDelegate> delegate;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)stop;
-(void)start;
-(int)releaseQMP;
-(id)getGrayScaleImageData:(id)data;
-(void)getQMPMotion:(char*)motion;
-(int)initQMPWithSize:(CGSize)size andMode:(int)mode;
-(void)dealloc;
-(id)init;
@end

@interface UploadDetectLogic : MMObject <MotionDetectorDelegate> {
	int _retryTimes;
	CGSize _qmpSize;
	int _qmpMode;
	int _motionState;
	MotionDetector* _motionDetector;
	int _uploadTimes;
	BOOL _canUpload;
	timeval _lastProcessTime;
}
@property(assign, nonatomic) int motionState;
@property(assign, nonatomic) CGSize qmpSize;
@property(assign, nonatomic) int qmpMode;
@property(assign, nonatomic) int retryTimes;
-(id).cxx_construct;
-(void)feedbackCameraFocused;
-(void)feedbackMotionStateChanged:(int)changed;
-(void)uploadRetry;
-(void)cancelUpload;
-(void)didUpload;
-(BOOL)canUpload;
-(void)process:(char*)process;
-(void)stop;
-(void)start;
-(void)dealloc;
-(id)init;
-(id)initWithQMPSize:(CGSize)qmpsize Mode:(int)mode;
@end

@interface FavVoiceView : MMUIView {
	MMUIImageView* m_bkgImageView;
	UILabel* m_secLabel;
	MMUIImageView* m_playingImageView;
	int m_iAudioDuration;
	BOOL m_bIsSender;
	BOOL m_bIsPlaying;
	MMDelegateProxy<FavVoiceViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavVoiceViewDelegate>* m_delegate;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)stopNodeViewAnimation;
-(void)startNodeViewAnimation;
-(void)layoutSubviews;
-(void)initAnimationView;
-(void)SetSecLabelByVoiceTime:(int)time;
-(void)initSecLabel;
-(void)updateBkgView:(BOOL)view;
-(void)initView;
-(float)calculateVoiceTimeLength:(int)length;
-(void)dealloc;
-(id)initWithAudioDuration:(int)audioDuration IsSender:(BOOL)sender;
@end

@interface MMVideoPreviewBrowserController : MMUIViewController <scrollViewDelegate, UIAlertViewDelegate> {
	MMScrollView* _panelView;
	MPMoviePlayerController* _moviePlayer;
	UIImageView* _bottomBar;
	UIButton* _sendButton;
	UIView* _maskView;
	UIButton* _playBigButton;
	BOOL _isPlaying;
	BOOL _isSending;
	NSURL* _videoOutputURL;
	MMDelegateProxy<MMVideoPreviewBrowserControllerDelegate>* m_delegate;
	MMDelegateProxy<MMImagePickerControlCenter>* _controlCenter;
	MMAssetInfo* _assetInfo;
}
@property(assign, nonatomic) MMDelegateProxy<MMVideoPreviewBrowserControllerDelegate>* m_delegate;
@property(assign, nonatomic) MMDelegateProxy<MMImagePickerControlCenter>* controlCenter;
@property(retain, nonatomic) MMAssetInfo* assetInfo;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)videoPlayFinished:(id)finished;
-(void)videoPlayStateChanged:(id)changed;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)systemActived:(id)actived;
-(void)systemResigned:(id)resigned;
-(void)OnPlay:(id)play;
-(void)changePlayStatus:(BOOL)status;
-(void)hideToolBar:(BOOL)bar;
-(void)OnSend:(id)send;
-(void)newCompressionWithInputURL:(id)inputURL withOutputURL:(id)outputURL;
-(void)compressVideo:(id)video;
-(void)compressVideoWithInputURL:(id)inputURL outputURL:(id)url blockHandler:(id)handler;
-(void)OnCompressedSuccess:(id)success;
-(void)OnCompressEnd;
-(void)OnCompressBegin;
-(void)dealloc;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)viewWillBePoped:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)initMaskView;
-(void)initPlayerView;
-(void)initBottomBar;
-(void)initData;
-(id)init;
@end

@interface WCUIActionSheetLogic : MMObject <UIActionSheetDelegate> {
	NSMutableDictionary* m_dicTarget;
	NSMutableDictionary* m_dicSel;
}
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)addBtnTitle:(id)title target:(id)target sel:(SEL)sel;
-(void)dealloc;
-(id)init;
@end

@interface WCUIActionSheet : MMActionSheet {
	WCUIActionSheetLogic* logic;
}
-(void)addDestructiveButtonTitle:(id)title target:(id)target sel:(SEL)sel;
-(void)addCancelBtnTitle:(id)title target:(id)target sel:(SEL)sel;
-(void)addBtnTitle:(id)title target:(id)target sel:(SEL)sel;
-(void)dealloc;
-(id)initWithTitle:(id)title;
@end

@interface FavoritesSearchDB : NSObject {
	MyFavoritesDB* _mmDB;
}
-(BOOL)getSearchItemList:(id)list byType:(int)type SearchContent:(id)content;
-(BOOL)deleteSearchItemByLocalFavId:(unsigned long)anId;
-(BOOL)insertOrUpdateSearchItem:(id)item;
-(BOOL)getSearchItemValue:(id)value dicInfo:(id)info;
-(void)initQueryArray:(id)array;
-(void)initDB:(id)db;
-(void)dealloc;
-(id)init;
@end

@interface WCBaseControlLogic : MMObject <WCBaseControlLogicDeleagte> {
	MMDelegateProxy<MMUIViewControllerDelegate>* m_vcRootDelegate;
	MMDelegateProxy<WCBaseControlLogicDeleagte>* m_logicDelegate;
	NSMutableArray* m_arrVC;
	unsigned long m_uiLogicStatus;
	unsigned long m_tag;
}
@property(assign, nonatomic) unsigned long m_tag;
-(BOOL)isLogicCancel;
-(BOOL)isLogicCompleteOK;
-(void)onClearMyDelegate:(id)delegate forProtocols:(id)protocols;
-(BOOL)onError:(id)error;
-(id)getCurrentViewController;
-(void)setlogicDelegate:(id)delegate;
-(void)setRootViewControllerDelegate:(id)delegate;
-(void)gotoRootViewControllerAndStopLogicWithAnimated:(BOOL)animated;
-(void)gotoRootViewControllerWithAnimated:(BOOL)animated;
-(id)gotoViewController:(Class)controller withData:(id)data Animation:(BOOL)animation;
-(id)gotoViewController:(Class)controller withData:(id)data;
-(id)gotoViewController:(Class)controller withData:(id)data Present:(BOOL)present;
-(id)gotoViewController:(Class)controller withData:(id)data Present:(BOOL)present Animation:(BOOL)animation;
-(id)gotoViewController:(Class)controller withData:(id)data Title:(id)title HeadTip:(id)tip;
-(id)gotoViewController:(Class)controller withData:(id)data Title:(id)title HeadTip:(id)tip Present:(BOOL)present;
-(void)pushViewController:(id)controller Animated:(BOOL)animated;
-(void)presentViewController:(id)controller Animated:(BOOL)animated;
-(void)dismissCurrentViewAndCheckStopLogicWithAnimated:(BOOL)animated;
-(void)dismissCurrentViewWithAnimated:(BOOL)animated;
-(void)checkStopLogic;
-(void)showLoadingOK:(id)ok;
-(void)stopLoading;
-(void)startLoadingWithTip:(id)tip;
-(void)startLoading;
-(void)addTopViewController:(id)controller;
-(void)removeTopViewController;
-(void)stopLogic;
-(void)startLogic;
-(void)cancel;
-(void)pause;
-(void)resume;
-(void)dealloc;
-(id)init;
@end

@interface WCBaseControlMgr : MMService <MMService> {
	NSMutableArray* m_arrLogicStack;
	unsigned long m_uiMaxTag;
}
-(void)cancelAllLogic;
-(void)stopLogic:(unsigned long)logic;
-(void)stopCurrentLogic;
-(id)getLogic:(unsigned long)logic;
-(unsigned long)startLogic:(id)logic;
-(void)onServiceClearData;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterForeground;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)dealloc;
-(id)init;
@end

@interface WCBaseInfoItem : MMObject {
	NSString* m_title;
	NSString* m_tip;
	NSString* m_key;
	UIView* m_view;
	UIView* m_superView;
	BOOL m_bEnable;
	BOOL m_bActive;
	MMDelegateProxy<WCBaseInfoItemDelegate>* m_delegate;
}
@property(assign, nonatomic) BOOL m_bActive;
@property(readonly, assign, nonatomic) BOOL m_bEnable;
@property(retain, nonatomic) UIView* m_view;
@property(retain, nonatomic) NSString* m_key;
@property(retain, nonatomic) NSString* m_tip;
@property(retain, nonatomic) NSString* m_title;
-(void)dealloc;
-(id)initWithTitle:(id)title tip:(id)tip key:(id)key;
-(void)resignFirstResponder;
-(void)becomeFirstResponder;
-(void)setEnable:(BOOL)enable;
-(id)getValue;
-(void)setDelegate:(id)delegate;
-(void)setSuperView:(id)view;
-(void)initView:(CGRect)view;
@end

@interface WCBaseTextFieldItem : WCBaseInfoItem <UITextFieldDelegate> {
	WCUITextField* m_textField;
	int m_iMaxInputLen;
}
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidChanged:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidEndOnExit:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(void)setColor:(id)color;
-(void)setFont:(id)font;
-(void)setText:(id)text;
-(void)setMaxInputLen:(int)len;
-(void)setClearButtonMode:(int)mode;
-(void)setSecureTextEntry:(BOOL)entry;
-(void)setReturnKeyType:(int)type;
-(void)setKeyboardType:(int)type;
-(id)getTextField;
-(void)resignFirstResponder;
-(void)becomeFirstResponder;
-(void)dealloc;
-(id)initWithTitle:(id)title tip:(id)tip key:(id)key;
-(void)setRestrictShareMenu:(BOOL)menu;
-(void)setEnable:(BOOL)enable;
-(id)getValue;
-(void)initView:(CGRect)view;
@end

@interface FavoritesSearchMgr : MMObject {
	FavoritesItemDB* _favItemDB;
	FavoritesSearchDB* _favSearchDB;
	BOOL _isStop;
	MMDelegateProxy<FavoritesSearchMgrDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesSearchMgrDelegate>* delegate;
-(void)stopSearch;
-(void)search:(id)search byType:(int)type;
-(BOOL)deleteSearchItemByLocalFavId:(unsigned long)anId;
-(BOOL)insertOrUpdateSearchItem:(id)item;
-(void)broadcastGetSearchResult:(id)result;
-(void)dealloc;
-(void)initDB:(id)db;
-(id)init;
@end

@interface SvrErrorTipWindow : MMUIWindow <ISvrErrorExt, IUiUtilExt, IViewControllerExt, IHDHeadImageViewExt, IMMImagePickerManagerExt, TextLayoutDelegate, ILinkEventExt> {
	UIImageView* _iconImage;
	RichTextView* _tipView;
	UIButton* _closeButton;
	NSString* _tipMsg;
	unsigned long _tipTimeOut;
	unsigned long _tipStartShowTime;
	BOOL _tipForbidden;
	BOOL _tipTempForbidden;
	BOOL _landscapeForbidden;
}
-(void)OnGetSvrError:(id)error Url:(id)url TimeOut:(unsigned long)anOut;
-(void)onMMImagePickerManagerShow;
-(void)onMMImagePickerManagerFinish;
-(void)onHDHeadImageWillDisappear;
-(void)onHDHeadImageWillAppear;
-(void)onViewWillAppear:(BOOL)onView landscapeForbidden:(BOOL)forbidden;
-(void)onStatusBarHiddenChanged:(int)changed;
-(void)onTopBarFrameChanged;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(void)hideSvrErrorTip;
-(void)showSvrErrorTip;
-(BOOL)isTipBusy;
-(void)dealloc;
-(id)init;
-(void)initData;
-(void)initView;
-(void)closetipView;
-(void)safeCall;
-(void)onTimeOut;
@end

@interface WCAccountControlData : NSObject {
	unsigned long m_uiLoginType;
	unsigned long m_uiFromScene;
	NSString* m_nsEmail;
	NSString* m_nsPwd;
	NSString* m_nsPwdMD5;
	NSString* m_nsUserName;
	NSString* m_nsContryCode;
	NSString* m_nsPhoneNumber;
	NSString* m_nsFormatedPhoneNumber;
	NSString* m_nsTicket;
	int m_iRegisterControlFlag;
	AuthInfo* m_structAuthInfoWrap;
	NSArray* m_arrNextStep;
	UIImage* m_headImage;
	NSData* m_dtVerifyImg;
	NSString* m_nsAlias;
	NSString* m_nsNickName;
	NSString* m_nsVerifySignature;
	NSString* m_nsVerifyCode;
	int m_iInputType;
	NSArray* m_arrUserName;
	int m_iForceReg;
	int m_iRegMode;
	unsigned long m_uiRegNextShowStyle;
	unsigned long m_uiReportStatus;
	NSDictionary* m_dicStyleKeyValue;
	unsigned long m_uiNextAuthType;
	AccountBindPhoneInfo* m_oBindPhoneInfo;
}
@property(retain, nonatomic) AccountBindPhoneInfo* m_oBindPhoneInfo;
@property(assign, nonatomic) unsigned long m_uiNextAuthType;
@property(retain, nonatomic) NSDictionary* m_dicStyleKeyValue;
@property(assign, nonatomic) unsigned long m_uiReportStatus;
@property(assign, nonatomic) unsigned long m_uiRegNextShowStyle;
@property(assign, nonatomic) int m_iRegMode;
@property(assign, nonatomic) int m_iForceReg;
@property(retain, nonatomic) NSArray* m_arrUserName;
@property(assign, nonatomic) int m_iInputType;
@property(retain, nonatomic) NSString* m_nsVerifyCode;
@property(retain, nonatomic) NSString* m_nsVerifySignature;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsAlias;
@property(retain, nonatomic) NSData* m_dtVerifyImg;
@property(retain, nonatomic) UIImage* m_headImage;
@property(retain, nonatomic) NSArray* m_arrNextStep;
@property(retain, nonatomic) AuthInfo* m_structAuthInfoWrap;
@property(assign, nonatomic) int m_iRegisterControlFlag;
@property(retain, nonatomic) NSString* m_nsTicket;
@property(retain, nonatomic) NSString* m_nsFormatedPhoneNumber;
@property(retain, nonatomic) NSString* m_nsPhoneNumber;
@property(retain, nonatomic) NSString* m_nsContryCode;
@property(retain, nonatomic) NSString* m_nsUserName;
@property(retain, nonatomic) NSString* m_nsPwdMD5;
@property(retain, nonatomic) NSString* m_nsPwd;
@property(retain, nonatomic) NSString* m_nsEmail;
@property(assign, nonatomic) unsigned long m_uiFromScene;
@property(assign, nonatomic) unsigned long m_uiLoginType;
-(void)ParseBindPhoneInfoFromStyle:(id)style;
-(BOOL)isFromBindPhone;
-(BOOL)isFromForgetPwd;
-(BOOL)isFromLogin;
-(BOOL)isFromReg;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountControlMgr : WCBaseControlMgr <PBMessageObserverDelegate> {
	NSString* m_reportClientID;
	map<unsigned long long, NSString *, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, NSString *> > > m_mapStatus;
	UINavigationController* m_firstViewController;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)handleRespForKvReport:(id)kvReport;
-(unsigned long long)getReportTime;
-(void)reportClickStream:(id)stream;
-(unsigned long)startEmailRegLogic:(id)logic Data:(id)data;
-(unsigned long)startInviteLogic:(id)logic Data:(id)data;
-(unsigned long)startRegisterLogic:(id)logic Data:(id)data;
-(unsigned long)startFacebookLogic:(id)logic Data:(id)data;
-(unsigned long)startPhoneLoginLogic:(id)logic Data:(id)data;
-(unsigned long)startLoginLogic:(id)logic Data:(id)data;
-(id)showAlertWithTitle:(id)title message:(id)message btnTitle:(id)title3 target:(id)target sel:(SEL)sel btnTitle:(id)title6 target:(id)target7 sel:(SEL)sel8 btnTitle:(id)title9 target:(id)target10 sel:(SEL)sel11 status:(unsigned long)status;
-(id)showAlertWithTitle:(id)title message:(id)message btnTitle:(id)title3 target:(id)target sel:(SEL)sel btnTitle:(id)title6 target:(id)target7 sel:(SEL)sel8 status:(unsigned long)status;
-(id)showAlertWithTitle:(id)title message:(id)message btnTitle:(id)title3 target:(id)target sel:(SEL)sel status:(unsigned long)status;
-(void)dismissAlertView:(id)view buttonIndex:(id)index;
-(void)reportExitAlert:(id)alert;
-(void)reportEnterAlert:(id)alert;
-(void)reportClickAction:(unsigned long)action;
-(void)reportClickAction:(unsigned long)action styleID:(id)anId;
-(id)getStatusName:(unsigned long)name;
-(void)resetReportClientID;
-(id)getReportClientID;
-(void)closeFirstView;
-(void)openFirstView:(id)view;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountLoginControlLogic : WCAccountBaseControlLogic <IMMFacebookMgrExt, WCAccountLoginFirstViewControllerDelegate, WCAccountLoginFirstUserViewControllerDelegate, WCAccountLoginLastUserViewControllerDelegate, WCAccountGraphicVerifyViewControllerDelegate, WCAccountNewDeviceViewControllerDelegate, WCAccountPhoneVerifyViewControllerDelegate, WCAccountVoiceVerifyViewControllerDelegate> {
	BOOL m_bNeverAutoStop;
}
-(void)onManualAuth:(id)auth authInfo:(id)info;
-(void)onGetQQVerifyImage:(id)image verifyCodeId:(id)anId verifyCodeImg:(id)img imgEncryptKey:(id)key;
-(void)onCheckSafeDeviceVerifyCode:(id)code authTicket:(id)ticket userName:(id)name password:(id)password StyleKeyValue:(id)value;
-(void)onGetSafeDeviceVoiceVerifyCode:(id)code authTicket:(id)ticket StyleKeyValue:(id)value;
-(void)onGetSafeDeviceVerifyCode:(id)code authTicket:(id)ticket StyleKeyValue:(id)value;
-(void)registerAccount;
-(void)loginAccount;
-(void)onLoginFacebookBegan:(id)began;
-(void)onFBDidNotLogin:(BOOL)onFB;
-(void)onVoiceVerifyGetVerifyCode:(id)code;
-(void)onVoiceVerifyBack;
-(void)onPhoneVerifyNext:(id)next;
-(void)onPhoneVerifyAgain;
-(void)onPhoneVerifyVoice;
-(void)onPhoneVerifyBack;
-(void)onNewDeviceVerifyPhone;
-(void)onNewDeviceBack;
-(void)onGraphicVerifyChangeImage;
-(void)onGraphicVerifyBack;
-(void)onGraphicVerifyWithVerifyCode:(id)verifyCode;
-(void)onLastUserChangeAccount;
-(void)onLoginByQQ;
-(void)onLoginByPhone;
-(void)onLastUserRegister;
-(void)onLastUserLoginUserName:(id)name Pwd:(id)pwd;
-(void)onFacebookConnect;
-(void)onFirstUserBack;
-(void)onFirstUserLoginUserName:(id)name Pwd:(id)pwd;
-(void)onFirstViewRegester;
-(void)onFirstViewLogin;
-(void)onForgetPwd;
-(void)resetPwdByPhone;
-(void)resetPwdByEmail;
-(void)resetPwdByQQ;
-(void)stopLogic;
-(void)startLogic;
-(void)cancelAllEvent;
-(void)pause;
-(void)checkStopLogic;
-(id)setRootviewController:(Class)controller withData:(id)data;
@end

@interface WCAccountRegisterControlLogic : WCAccountBaseControlLogic <IAddressBookMgrExt, WCAccountRegisterViewControllerDelegate, WCAccountGraphicVerifyViewControllerDelegate> {
	NSMutableSet* m_suggestAlias;
	BOOL m_bCanSyncAddressBook;
}
-(void)onGetSuggestAlias:(id)alias arrUserName:(id)name verifySignature:(id)signature verifyBuffer:(id)buffer userNameRet:(long)ret;
-(void)onRegisterByEmail:(id)email RegResp:(id)resp;
-(void)onRegisterByQQ:(id)qq RegResp:(id)resp;
-(void)onRegisterByMobile:(id)mobile RegResp:(id)resp;
-(void)onRegister:(id)aRegister RegResp:(id)resp;
-(void)onEnableAddressBookTip;
-(void)showDeniedTip;
-(void)showEnableTip;
-(void)enableAddressBook;
-(void)jumpToMainFrame;
-(void)OnConfirmAddressBookStatus:(unsigned long)status;
-(void)onGraphicVerifyChangeImage;
-(void)onGraphicVerifyBack;
-(void)onGraphicVerifyWithVerifyCode:(id)verifyCode;
-(void)onGetSuggestAlias:(id)alias alias:(id)alias2;
-(void)onRegNickNameReg:(id)reg alias:(id)alias headImage:(id)image;
-(void)onRegNickNameBack;
-(void)getSuggestAlias;
-(BOOL)regAccount;
-(id)getBindName;
-(void)startLogic;
-(void)dealloc;
-(id)initWithData:(id)data;
@end

@interface WCAccountBaseViewController : MMUIViewController <MMTableViewInfoDelegate, WCBaseInfoItemDelegate> {
	MMTableViewInfo* m_tableViewInfo;
	WCAccountControlData* m_data;
	unsigned long m_uiReportStatus;
	NSString* m_nsStyleID;
	timeval m_tvStart;
}
@property(assign, nonatomic) unsigned long m_uiReportStatus;
@property(retain, nonatomic) NSString* m_nsStyleID;
-(id).cxx_construct;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)onNext;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(id)getSaveStypeBarBtnWithTitle:(id)title target:(id)target action:(SEL)action;
-(id)getGreenBtn;
-(id)GetUnderLineLinkBtnWithTitle:(id)title image:(id)image;
-(id)GetUnderLineLinkBtnWithTitle:(id)title image:(id)image font:(id)font;
-(id)getWhiteBtn;
-(id)getHeaderView:(id)view;
-(void)initNavigationBar;
-(unsigned long)getStayTime;
-(void)setStartTime;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)callViewDidLoad;
-(void)initData;
-(void)refreshViewWithData:(id)data;
-(void)initWithData:(id)data;
-(id)init;
@end

@interface WCAccountGraphicVerifyViewController : WCAccountBaseViewController {
	UIImageView* m_codeImageView;
	UIButton* m_changeImgBtn;
	UITextField* m_textFieldCode;
	MMDelegateProxy<WCAccountGraphicVerifyViewControllerDelegate>* m_delegate;
}
-(void)textFieldDidEndOnExit:(id)textField;
-(void)textFieldDidChanged:(id)textField;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)onNext;
-(void)refreshViewWithData:(id)data;
-(void)vcResignFirstResponder;
-(void)vcBecomeFirstResponder;
-(void)viewDidLoad;
-(void)initNavigationBar;
-(void)initHeaderView;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountLoginLastUserViewController : WCAccountBaseViewController <IMMLanguageMgrExt> {
	WCBaseTextFieldItem* m_textFieldPwdItem;
	WCBaseKeyboardToolBar* m_keyboardBar;
	UIButton* m_loginBtn;
	UILabel* m_labelUserName;
	MMDelegateProxy<WCAccountLoginLastUserViewControllerDelegate>* m_delegate;
}
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(id)init;
-(void)dealloc;
-(void)vcResignFirstResponder;
-(void)onNext;
-(void)viewDidLoad;
-(void)adjustTableViewRect;
-(void)adjustViewAndNavBarRect;
-(float)getVisibleHeight;
-(void)initHeaderView;
@end

@interface WCAccountLoginByPhonePwdViewController : WCAccountBaseViewController {
	WCUITextField* m_textFieldPwd;
	MMDelegateProxy<WCAccountLoginByPhonePwdViewControllerDelegate>* m_delegate;
}
-(void)textFieldDidEndOnExit:(id)textField;
-(void)textFieldDidChanged:(id)textField;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(void)onNext;
-(void)vcResignFirstResponder;
-(void)vcBecomeFirstResponder;
-(void)viewDidLoad;
-(void)initNavigationBar;
@end

@interface WCAccountLoginFirstUserViewController : WCAccountBaseViewController <ILinkEventExt> {
	WCBaseTextFieldItem* m_textFieldUserNameItem;
	WCBaseTextFieldItem* m_textFieldPwdItem;
	MMDelegateProxy<WCAccountLoginFirstUserViewControllerDelegate>* m_delegate;
	BOOL m_bReadAgreement;
}
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)setDelegate:(id)delegate;
-(void)vcResignFirstResponder;
-(void)vcBecomeFirstResponder;
-(void)onNext;
-(void)viewDidLoad;
-(void)onOpenAgreementLink:(id)link;
-(void)onReadAgreement:(id)agreement;
-(void)initNavigationBar;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountLoginFirstViewController : WCAccountBaseViewController <ILinkEventExt, IMMLanguageMgrExt> {
	MMDelegateProxy<WCAccountLoginFirstViewControllerDelegate>* m_delegate;
	UIView* m_view;
	UIView* m_bottomView;
	UIImageView* m_earthImageView;
	UIImageView* m_logoView;
	UIButton* m_regBtn;
	UIButton* m_loginBtn;
	UIButton* m_btnChangeLanguage;
}
-(void)onChangeLanguage;
-(void)initView;
-(void)adjustTableViewRect;
-(void)adjustViewAndNavBarRect;
-(float)getVisibleHeight;
-(void)startAnimate;
-(void)updateChangeLanguageBtn;
-(id)getLogo;
-(void)setDelegate:(id)delegate;
-(void)onLanguageChange;
-(id)init;
-(void)dealloc;
@end

@interface WCAccountNewDeviceViewController : WCAccountBaseViewController {
	NSString* m_nsHeaderTip;
	MMDelegateProxy<WCAccountNewDeviceViewControllerDelegate>* m_delegate;
}
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)makeSafeDeviceCell:(id)cell;
-(void)onNewDeviceVerifyPhone;
-(void)viewDidLoad;
-(void)onCloseLink;
-(void)jumpToUnProtectPage;
-(void)initNavigationBar;
-(void)setHeaderTip:(id)tip;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountPhoneVerifyViewController : WCAccountBaseViewController <IAutoVerifySMSExt, UITextFieldDelegate> {
	UIButton* m_noCodeBtn;
	WCUITextField* m_textFieldVerifyCode;
	MMDelegateProxy<WCAccountPhoneVerifyViewControllerDelegate>* m_delegate;
	int m_iCountDown;
	int m_iCount;
	int m_stypeType;
	int m_fbReg;
	int m_qqReg;
	int m_emailReg;
	BOOL m_bFirstLoop;
	UIButton* m_btnQQReg;
}
-(void)OnHandleOpenAutoVerifySMS:(id)sms;
-(void)textFieldDidEndOnExit:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidChanged:(id)textField;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)vcResignFirstResponder;
-(void)vcBecomeFirstResponder;
-(void)initView;
-(void)onNoCodeClicked;
-(void)onPhoneVerifyAgain;
-(void)startTimer;
-(void)stopTimer;
-(void)updateSendVerifyCodeButton;
-(void)showCloseSafeDevice;
-(void)onCloseSafeDevice;
-(void)jumpToUnProtectPage;
-(BOOL)isShowEmailReg;
-(BOOL)isShowQQReg;
-(BOOL)isFBClose;
-(BOOL)noCodeStyleBtn;
-(BOOL)noCodeStyleLink;
-(BOOL)noCodeStyleWordingToBtn;
-(BOOL)needCount;
-(void)initNavigationBar;
-(void)onPhoneVerifyBack;
-(void)onNext;
-(void)dealloc;
-(id)init;
@end

@interface ShareFavoritesConfirmLogicHelper : MMObject <ShareConfirmViewDelegate> {
	ShareConfirmView* _confirmView;
	FavoritesItem* _favItem;
	MMDelegateProxy<ShareFavoritesConfirmLogicHelperDelegate>* _delegate;
	NSString* _thumbImageUrl;
	BOOL _hasBeenHidden;
	NSDictionary* _userData;
	NSData* _thumbData;
	NSData* _fileData;
}
@property(retain, nonatomic) NSData* fileData;
@property(retain, nonatomic) NSData* thumbData;
@property(retain, nonatomic) NSDictionary* userData;
@property(retain, nonatomic) NSString* thumbImageUrl;
@property(retain, nonatomic) FavoritesItem* favItem;
@property(assign, nonatomic) MMDelegateProxy<ShareFavoritesConfirmLogicHelperDelegate>* delegate;
-(void)OnBackToApp:(id)app;
-(void)OnError:(id)error;
-(void)OnCancel:(id)cancel;
-(void)OnSend:(id)send;
-(void)layoutSubviewToOrientation:(int)orientation;
-(void)rotateToOrientaion:(int)orientaion;
-(void)rotateToCurrentOrietation;
-(void)hideConfirmView;
-(void)showConfirmView;
-(void)dealloc;
-(id)initWithFavoritesItem:(id)favoritesItem;
@end

@interface SendAppMsgToFavoritesHandler : MMObject <ShareFavoritesConfirmLogicHelperDelegate, IPreEnterWechatLogicExt> {
	NSString* _appId;
	AppCommunicateData* _appData;
	ShareFavoritesConfirmLogicHelper* _shareHelper;
}
-(void)OnShareFavoritesItemCancel:(id)cancel;
-(void)OnShareFavoritesItemFail:(id)fail WithError:(int)error;
-(void)OnShareFavoritesItemOK:(id)ok;
-(void)onPreEnterWechatDone;
-(void)sendFavoritesWithComunicateData:(id)comunicateData;
-(id)sendFavoritesFileWithComunicateData:(id)comunicateData;
-(id)sendFavoritesFeedWithComunicateData:(id)comunicateData;
-(id)sendFavoritesVideoWithComunicateData:(id)comunicateData;
-(id)sendFavoritesMusicWithComunicateData:(id)comunicateData;
-(id)sendFavoritesPhotoWithComunicateData:(id)comunicateData;
-(id)sendFavoritesTextWithComunicateData:(id)comunicateData;
-(void)saveData:(id)data ToFile:(id)file;
-(void)removeConfirmView;
-(void)clearAllHandleAndReturn3rdApp:(BOOL)app;
-(void)cancelAllHandleAndReturn3rdApp;
-(void)clearAllHandle;
-(void)cancelAllHandle;
-(void)cancelSendAppMsgToFavorites;
-(void)sendAppMsgToFavorites:(id)favorites withData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface EmoticonStoreCell : MMTableViewCell <IEmoticonPackageStateMgrExt> {
	NSString* m_storeSession;
	BOOL isPromitDownLoad;
	UIImageView* m_downloadedView;
	UIButton* m_button;
	UIActivityIndicatorView* m_activityIndicatorView;
	EmoticonStoreItem* m_storeItem;
	MMDelegateProxy<EmoticonStoreCellDelegate>* m_delegate;
	unsigned long m_extrance;
	MMProgressView* m_progressView;
	BOOL m_showBlackLine;
	float m_cellHeight;
	BOOL m_freeToDownload;
}
@property(retain, nonatomic) MMProgressView* m_progressView;
@property(retain, nonatomic) EmoticonStoreItem* m_storeItem;
@property(retain, nonatomic) UIActivityIndicatorView* m_activityIndicatorView;
@property(retain, nonatomic) UIButton* m_button;
@property(retain, nonatomic) UIImageView* m_downloadedView;
@property(retain, nonatomic) NSString* m_storeSession;
@property(assign, nonatomic) MMDelegateProxy<EmoticonStoreCellDelegate>* m_delegate;
@property(assign, nonatomic) unsigned long m_extrance;
-(void)setRightBtnGreenBackground;
-(void)setRightBtnGrayBackground;
-(void)OnBuyItemCancel:(id)cancel;
-(void)OnBuyItemFailed:(id)failed;
-(void)OnBuyItemSuccess:(id)success;
-(void)OnDownloadProgressChanged:(id)changed CurrLength:(unsigned)length TotalLength:(unsigned)length3;
-(void)OnUpdateEmoticonPackageState:(id)state toState:(int)state2;
-(void)checkEmoticonBuyRet:(int)ret;
-(void)onClickButton;
-(void)onState:(int)state;
-(void)loadSubView;
-(void)initStoreSession:(id)session StoreItem:(id)item ShouldShowBlackLine:(BOOL) CellHeight:(float)height;
-(void)dealloc;
@end

@interface EmoticonCacheController : NSObject {
	NSMutableDictionary* _dicCache;
}
+(id)sharedInstance;
+(void)initialize;
-(void)removeAllCache;
-(void)dealloc;
-(id)objectForWrap:(id)wrap;
-(void)DidReceiveMemoryWarning:(id);
-(id)init;
@end

@interface EmoticonPickViewController : MMUIViewController <UIAlertViewDelegate> {
	UIImage* _image;
	MMGifView* _gifView;
	UIImageView* _imageView;
	NSData* _imageData;
}
@property(retain, nonatomic) NSData* imageData;
@property(retain, nonatomic) UIImage* image;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)viewDidLoad;
-(void)Confirm;
-(void)Cancel;
-(void)showTipsAndQuit:(id)quit;
-(void)initToolBar;
-(void)dealloc;
@end

@interface EmoticonSelectorView : MMUIView <UIScrollViewDelegate, scrollViewDelegate> {
	MMDelegateProxy<EmoticonSelectorViewDelegate>* _delegate;
	MMDelegateProxy<EmoticonSelectorViewDataSource>* _dataSource;
	MMScrollView* _scrollView;
	UIPageControl* _pageController;
	UIImageView* m_tipsView;
	unsigned long _iCurSelection;
	BOOL bPageControlUsed;
	unsigned long iCount;
	unsigned long iRow;
	unsigned long iCol;
	unsigned long iPage;
	unsigned long iTouchBeganTime;
	BOOL isLayout;
	BOOL bIsLongPressedCalled;
	UIImageView* tipsView;
	BOOL _editing;
	BOOL m_isValidSelect;
}
@property(assign, nonatomic) BOOL editing;
@property(assign, nonatomic) MMDelegateProxy<EmoticonSelectorViewDataSource>* dataSource;
@property(assign, nonatomic) MMDelegateProxy<EmoticonSelectorViewDelegate>* delegate;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)scrollToBottom;
-(BOOL)IsLastSelectedEmoticonValid;
-(void)touchesCancelled_ScrollView:(id)view withEvent:(id)event;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)touchesMoved_ScrollView:(id)view withEvent:(id)event;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)setFrame:(CGRect)frame;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)onLongPressed:(id)pressed;
-(void)onTapped:(id)tapped;
-(void)onPageControllerChangePage:(id)page;
-(void)showDeleteMode;
-(void)showMenuItem;
-(void)showNoTips;
-(void)showTips;
-(void)showLargeTips;
-(void)showSmallTips;
-(void)resetView;
-(void)onLocalMemoryWarning;
-(void)layoutSubviews;
-(CGRect)calculateEmoticonViewFrameAtIndex:(unsigned long)index;
-(unsigned long)calculateEmoticonOrder:(CGPoint)order;
-(BOOL)pointInScrollView:(CGPoint)scrollView;
-(void)dealloc;
-(void)OnClickDeleteBtn:(id)btn;
-(id)init;
@end

@interface MMEmoticonView : UIView {
	CEmoticonWrap* _emoticonWrap;
	MMGifView* _gifView;
	UIImageView* _imageView;
	float _maxHeight;
}
@property(assign, nonatomic) float maxHeight;
@property(retain, nonatomic) CEmoticonWrap* emoticonWrap;
-(void)dealloc;
-(void)setFrame:(CGRect)frame;
-(void)setPlayGif:(BOOL)gif;
-(BOOL)isPlayGif;
-(void)setEmoticonWrap:(id)wrap PlayGif:(BOOL)gif;
-(void)formGifView:(BOOL)view;
-(void)formImageView:(id)view;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

@interface AppMessageBlockButton : MMUIButton <UIAlertViewDelegate> {
	CMessageWrap* _messageWrap;
}
@property(retain, nonatomic) CMessageWrap* messageWrap;
-(void)dealloc;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showAlertView;
-(void)changeMessageState;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WCBizLoadingView : UIView {
	UIImageView* m_imageView;
	UILabel* m_labelTitle;
	UILabel* m_labelMsg;
}
-(void)stopLoading;
-(void)startLoading;
-(void)setMessage:(id)message;
-(void)setTitle:(id)title;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandler_getBrandIAPPayRequest : WebviewJSEventHandlerBase <IBrandIAPMgrExt> {
	JSEvent* jsEvent;
	NSString* productExtInfo;
}
@property(retain, nonatomic) NSString* productExtInfo;
@property(retain, nonatomic) JSEvent* jsEvent;
-(void)OnBrandIAPGetResult:(id)result Error:(int)error;
-(void)OnBrandIAPPayFailForProduct:(id)product;
-(void)OnBrandIAPPayCancelForProduct:(id)product;
-(void)OnBrandIAPPaySuccessForProduct:(id)product;
-(void)OnBrandIAPPayRequestForProduct:(id)product;
-(void)OnBrandIAPPrepay:(id)prepay FailedWithError:(int)error;
-(void)OnBrandIAPPrepay:(id)prepay GetProductID:(id)anId ExtInfo:(id)info;
-(void)stopLoading:(BOOL)loading;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
-(void)dealloc;
@end

@interface WCBizControlLogic : WCBaseControlLogic {
	WCBizLoadingView* m_loadView;
}
-(void)showLoadingOK:(id)ok;
-(void)stopLoading;
-(void)startLoadingWithTip:(id)tip;
-(void)startLoading;
-(void)dealloc;
-(void)initLoadView;
@end

@interface MMLandscapeInputToolView : MMUIView <MMGrowTextViewDelegate> {
	int _keyboardHeight;
	UIImageView* _toolView;
	MMGrowTextView* _textView;
	int _positionMode;
	UIButton* _sendButton;
	CGPoint fPreToolViewOrigin;
	float _fKeyboardAnimationDuration;
	int _iKeyboardAnimationCurve;
	MMDelegateProxy<MMLandscapeInputToolViewDelegate>* m_delegate;
	BOOL m_bPositioning;
}
@property(assign, nonatomic) BOOL m_bPositioning;
@property(assign, nonatomic) NSString* text;
@property(assign, nonatomic) MMDelegateProxy<MMLandscapeInputToolViewDelegate>* m_delegate;
-(id).cxx_construct;
-(void)onTextViewDidChange:(id)onTextView;
-(void)onTextView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)isFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)keyboardDidShow:(float)keyboard;
-(BOOL)TextViewDidDelete;
-(void)setKeyboardAnimationCurve:(int)curve;
-(void)setKeyboardAnimationDuration:(float)duration;
-(void)MMGrowTextView:(id)view pasteImage:(id)image;
-(BOOL)MMGrowTextView:(id)view shouldPasteImage:(id)image;
-(void)keyboardWillHide:(float)keyboard;
-(void)keyboardWillShow:(float)keyboard;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)UpdateTabBarSendButtonState;
-(void)TextDidChanged:(id)text selectedRange:(NSRange)range;
-(void)TextViewDidEnter:(id)textView;
-(void)TextViewHeightDidChanged:(id)textViewHeight;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)NotifyViewControllerPostionChanged:(BOOL)changed Animated:(BOOL)animated;
-(void)dealloc;
-(float)getToolViewHeight;
-(id)getText;
-(void)insertString:(id)string;
-(id)initWithFrame:(CGRect)frame;
-(void)initSubview;
@end

@interface CExtendInfoOfVideo : NSObject <IMessageWrapExt, IMsgExtendOperation, NSCopying> {
	unsigned long m_uiVideoLen;
	unsigned long m_uiVideoTime;
	unsigned long m_uiUploadStatus;
	unsigned long m_uiVideoOffset;
	unsigned long m_uiCameraType;
	unsigned long m_uiVideoSource;
	NSString* m_nsAesKey;
	NSString* m_nsMsgDataUrl;
	NSString* m_nsMsgThumbUrl;
	NSString* m_nsMsgThumbAesKey;
	unsigned long m_uiMsgThumbSize;
	unsigned long m_uiMsgThumbWidth;
	unsigned long m_uiMsgThumbHeight;
	NSString* m_nsCommentUrl;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(retain, nonatomic) NSString* m_nsCommentUrl;
@property(assign, nonatomic) unsigned long m_uiMsgThumbHeight;
@property(assign, nonatomic) unsigned long m_uiMsgThumbWidth;
@property(assign, nonatomic) unsigned long m_uiMsgThumbSize;
@property(retain, nonatomic) NSString* m_nsMsgThumbAesKey;
@property(retain, nonatomic) NSString* m_nsMsgThumbUrl;
@property(retain, nonatomic) NSString* m_nsMsgDataUrl;
@property(retain, nonatomic) NSString* m_nsAesKey;
@property(assign, nonatomic) unsigned long m_uiVideoSource;
@property(assign, nonatomic) unsigned long m_uiCameraType;
@property(assign, nonatomic) unsigned long m_uiVideoOffset;
@property(assign, nonatomic) unsigned long m_uiUploadStatus;
@property(assign, nonatomic) unsigned long m_uiVideoTime;
@property(assign, nonatomic) unsigned long m_uiVideoLen;
+(void)CreateVideoMsg:(id)msg ToUsr:(id)usr VideoInfo:(id)info retMessageWrap:(id*)wrap;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
-(id)GetThumbPath;
-(void)UpdateVideoStatus:(id)status;
-(void)ChangeForBackup;
-(void)UpdateContent:(id)content;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface CExtendInfoOfVoiceMsg : NSObject <IMsgExtendOperation, IMessageWrapExt, NSCopying> {
	unsigned long m_uiVoiceTime;
	unsigned long m_uiVoiceFormat;
	unsigned long m_uiVoiceEndFlag;
	unsigned long m_uiVoiceCancelFlag;
	unsigned long m_uiVoiceForwardFlag;
	NSString* m_nsCommentUrl;
	NSData* m_dtVoice;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(retain, nonatomic) NSData* m_dtVoice;
@property(retain, nonatomic) NSString* m_nsCommentUrl;
@property(assign, nonatomic) unsigned long m_uiVoiceForwardFlag;
@property(assign, nonatomic) unsigned long m_uiVoiceCancelFlag;
@property(assign, nonatomic) unsigned long m_uiVoiceEndFlag;
@property(assign, nonatomic) unsigned long m_uiVoiceFormat;
@property(assign, nonatomic) unsigned long m_uiVoiceTime;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
-(void)SetPlaySounded:(BOOL)sounded;
-(BOOL)IsPlaySounded;
-(BOOL)IsRecording;
-(void)SetPlayed;
-(BOOL)IsDownloadEnded;
-(BOOL)IsUnPlayed;
-(BOOL)SaveMesVoice:(id)voice;
-(void)ChangeForBackup;
-(void)UpdateContent:(id)content;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface RadarSearchVerifyResult : NSObject {
	NSString* _username;
	NSString* _content;
	NSString* _encryUsrName;
	int _type;
}
@property(assign, nonatomic) int type;
@property(retain, nonatomic) NSString* encryUsrName;
@property(retain, nonatomic) NSString* content;
@property(retain, nonatomic) NSString* username;
-(void)dealloc;
@end

@interface RadarSearchMgr : MMService <MMService, LocationRetrieveDelegate, PBMessageObserverDelegate> {
	BOOL _isStartReport;
	LocationRetriever* _locationRetrieve;
	NSTimer* _sendReportTimer;
	NSString* _ticket;
	RadarSearchSetting* _setting;
	CLLocation* _location;
}
@property(retain, nonatomic) CLLocation* location;
@property(retain, nonatomic) RadarSearchSetting* setting;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleRadarSearchResp:(id)resp Event:(unsigned long)event;
-(void)HandleVerifyUserResp:(id)resp Event:(unsigned long)event;
-(void)onVerifyOkSuccessed:(id)successed;
-(void)onVerifyOkFail:(id)fail;
-(void)onAddContactSuccessed:(id)successed;
-(void)onAddContactFail:(id)fail;
-(void)onRetrieveHeadingError:(int)error;
-(void)onRetrieveHeadingOK:(id)ok;
-(void)onRetrieveLocationError:(int)error;
-(void)onRetrieveLocationTimeOut:(id)anOut;
-(void)onRetrieveLocationOK:(id)ok;
-(void)sendRadarReportRequest:(BOOL)request;
-(void)createGroup:(id)group;
-(void)verifyUsr:(id)usr withTicket:(id)ticket;
-(void)addFriend:(id)aFriend;
-(void)stopRadarReport;
-(void)removeRadarReportRequest;
-(void)startRadarReport;
-(void)stopResendRadarReportLogic;
-(void)startResendRadarReportLogic;
-(void)reSendRadarReportRequest;
-(void)stopRetrieveLocation;
-(void)startRetrieveLocation;
-(void)saveSetting;
-(void)loadRadarSearchSetting;
-(id)getSettingPath;
-(void)onServiceInit;
-(void)dealloc;
-(id)init;
@end

@interface GoogleItemData : NSObject {
	NSString* m_email;
	int m_mode;
}
@property(assign, nonatomic) int m_mode;
@property(retain, nonatomic) NSString* m_email;
-(void)dealloc;
-(id)init;
@end

@interface ScanStreetViewMgr : MMService <MMService, PBMessageObserverDelegate> {
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)sendStreetViewLocation:(id)location Heading:(float)heading Pitch:(float)pitch;
-(void)dealloc;
@end

@interface StreetViewItemBase : NSObject {
	int _type;
	id _streetViewItem;
}
@property(retain, nonatomic) id streetViewItem;
@property(assign, nonatomic) int type;
+(id)getStreetViewItemFromXml:(id)xml andType:(int)type;
-(void)dealloc;
-(id)init;
@end

@interface StreetViewItem : NSObject {
	NSString* _link;
}
@property(retain, nonatomic) NSString* link;
-(void)dealloc;
-(id)init;
@end

@interface RecommendItem : NSObject {
	NSString* _title;
	NSString* _desc;
	int _actionType;
	NSString* _actionIconUrl;
	NSString* _actionDesc;
	NSString* _actionLink;
}
@property(retain, nonatomic) NSString* actionLink;
@property(retain, nonatomic) NSString* actionDesc;
@property(retain, nonatomic) NSString* actionIconUrl;
@property(assign, nonatomic) int actionType;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* title;
-(void)dealloc;
-(id)init;
@end

@interface ScanStreetViewLogicController : BaseScanLogicController <IScanStreetViewMgrExt, LocationRetrieveDelegate, MMWebViewDelegate, UIActionSheetDelegate, UIAlertViewDelegate> {
	MMWebViewController* _webViewController;
	int _retryCount;
	CLLocation* _location;
	LocationRetriever* _locationRetriever;
	CMMotionManager* _motionManager;
	NSString* _streetViewUrl;
	NSString* _alertText;
	BOOL _shouldShowScanAnimation;
}
-(void)onWebViewDidFinishLoad:(id)onWebView;
-(void)checkAllReady;
-(void)onRetrieveLocationError:(int)error;
-(void)onRetrieveLocationTimeOut:(id)anOut;
-(void)onRetrieveLocationOK:(id)ok;
-(void)OnSendStreetViewLocation:(id)location Err:(int)err;
-(void)stopLocating;
-(void)startLocating;
-(BOOL)shouldStartScanAnimation;
-(BOOL)shouldHideAlertOnClicked;
-(id)getAlertText;
-(id)getInfoText;
-(CGRect)getDrawCropRect;
-(void)stopScan;
-(void)startScan;
-(void)dealloc;
-(id)init;
@end

@interface PurchasedEmoticonViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, EmoticonBoughtListMgrExt, MMRefreshTableFooterDelegate, UIActionSheetDelegate, UIAlertViewDelegate> {
	unsigned long m_extrance;
	NSMutableArray* m_arrTableData;
	MMTableView* m_tableView;
	EmoticonStoreFootView* m_tailView;
	BOOL isLoadedFromCache;
}
@property(retain, nonatomic) EmoticonStoreFootView* m_tailView;
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_arrTableData;
@property(assign, nonatomic) unsigned long m_extrance;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)reloadData;
-(void)OnBoughtListChanged:(id)changed withRet:(int)ret;
-(void)OnRestoreEmoticonItemFailed;
-(void)OnRestoreEmoticonItemSuccess;
-(CGPoint)makeTimeLimitLabel:(id)label IndexPath:(id)path marginRight:(CGPoint)right;
-(CGPoint)makeTimeLabel:(id)label IndexPath:(id)path marginPoint:(CGPoint)point;
-(CGPoint)makePriceLabel:(id)label IndexPath:(id)path marginPoint:(CGPoint)point;
-(CGPoint)makePackNameLabel:(id)label IndexPath:(id)path marginPoint:(CGPoint)point;
-(CGPoint)makeImageView:(id)view IndexPath:(id)path marginPoint:(CGPoint)point;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)checkIAPRet:(int)ret;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onClickNavRightButton;
-(void)OnStartLoadingAndShowStringBlocked:(id)blocked;
-(void)OnStopLoadingAndShowError:(id)error;
-(void)OnStopLoadingAndShowOK:(id)ok;
-(void)OnStartLoadingAndShowString:(id)string;
-(void)initFooterView;
-(void)initTableView;
-(void)initView;
-(void)initData;
-(void)viewDidLoad;
-(id)init;
-(void)dealloc;
@end

@interface EmoticonStoreDetailViewController : MMUIViewController <IEmoticonPackageStateMgrExt, EmoticonStoreMgrExt, UIAlertViewDelegate> {
	unsigned long m_extrance;
	NSString* m_storeSession;
	EmoticonStoreItem* m_storeItem;
	NSMutableArray* m_arrEmoticon;
	MMUIScrollView* m_tableView;
	UIView* m_downLoadStateView;
	UIButton* m_button;
	MMProgressView* m_progressView;
	UIButton* m_cancelButton;
	unsigned long m_scence;
	UILabel* m_priceLabel;
	MMWebImageView* m_coverImageView;
	UILabel* m_nameLabel;
	UILabel* m_timeLabel;
	UILabel* m_copyrightLabel;
	UIButton* m_statementButton;
	EmoticonStoreGridView* m_thumbGridView;
	MMRedHeadLiner* m_haadliner;
	UIView* m_previewTipsLabel;
	UILabel* m_descLabel;
	UIImageView* m_animationImageView;
	UILabel* m_animationLabel;
	UIView* m_packDescContainView;
}
@property(retain, nonatomic) UIView* m_packDescContainView;
@property(retain, nonatomic) UILabel* m_animationLabel;
@property(retain, nonatomic) UIImageView* m_animationImageView;
@property(retain, nonatomic) UILabel* m_descLabel;
@property(retain, nonatomic) UIView* m_previewTipsLabel;
@property(retain, nonatomic) MMRedHeadLiner* m_haadliner;
@property(retain, nonatomic) EmoticonStoreGridView* m_thumbGridView;
@property(retain, nonatomic) UIButton* m_statementButton;
@property(retain, nonatomic) UILabel* m_copyrightLabel;
@property(retain, nonatomic) UILabel* m_timeLabel;
@property(retain, nonatomic) UILabel* m_nameLabel;
@property(retain, nonatomic) MMWebImageView* m_coverImageView;
@property(retain, nonatomic) UILabel* m_priceLabel;
@property(retain, nonatomic) UIView* m_downLoadStateView;
@property(retain, nonatomic) MMProgressView* m_progressView;
@property(retain, nonatomic) UIButton* m_cancelButton;
@property(retain, nonatomic) UIButton* m_button;
@property(retain, nonatomic) MMUIScrollView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_arrEmoticon;
@property(retain, nonatomic) EmoticonStoreItem* m_storeItem;
@property(retain, nonatomic) NSString* m_storeSession;
@property(assign, nonatomic) unsigned long m_extrance;
-(void)setRightBtnGreenBackground;
-(void)setRightBtnGrayBackground;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnBuyFailed:(id)failed;
-(void)OnDownloadFailed:(id)failed;
-(void)OnExchangedAfterBuySuccess:(BOOL*)success;
-(void)OnBuyEmoticonItemAlertStepOne:(id)one ShouldShow:(BOOL*);
-(void)OnEmoticonStoreDownloadBeforeFailed_StepOne:(id)one ShouldContinueToNextStep:(BOOL*);
-(void)onState:(int)state;
-(BOOL)showExpiredButton;
-(void)OnDownloadProgressChanged:(id)changed CurrLength:(unsigned)length TotalLength:(unsigned)length3;
-(void)OnUpdateEmoticonPackageState:(id)state toState:(int)state2;
-(void)OnBuyItemCancel:(id)cancel;
-(void)OnBuyItemFailed:(id)failed;
-(void)OnBuyItemSuccess:(id)success;
-(void)onLawBtnClick;
-(void)onCancelDownloadBtnClick;
-(void)checkEmoticonBuyRet:(int)ret;
-(void)onPurchaseBtnClick;
-(void)OnCancelModalView:(id)view;
-(CGPoint)makeStatementCell:(id)cell marginPoint:(CGPoint)point;
-(CGPoint)makeCopyRightCell:(id)cell marginPoint:(CGPoint)point;
-(CGPoint)makeEmoticonsCell:(id)cell rowEmoticons:(id)emoticons Previews:(id)previews marginPoint:(CGPoint)point;
-(CGPoint)updateGridView:(id)view WithEmoticons:(id)emoticons Previews:(id)previews marginPoint:(CGPoint)point;
-(CGPoint)updateStatement:(id)statement marginPoint:(CGPoint)point;
-(CGPoint)updateCopyRight:(id)right marginPoint:(CGPoint)point;
-(void)makeRightDotLine:(id)line marginPoint:(CGPoint)point width:(float)width height:(float)height;
-(void)makeLeftDotLine:(id)line marginPoint:(CGPoint)point width:(float)width height:(float)height;
-(CGPoint)updatePreviewTipCell:(CGPoint)cell;
-(CGPoint)makePreviewTipCell:(id)cell marginPoint:(CGPoint)point;
-(CGPoint)updateDescCell:(id)cell marginPoint:(CGPoint)point;
-(CGPoint)makeDescCell:(id)cell marginPoint:(CGPoint)point;
-(CGPoint)makeBuyButton:(id)button item:(id)item marginPoint:(CGPoint)point;
-(CGPoint)makeCoverImageCell:(id)cell;
-(void)updatePackTypeView:(CGPoint)view;
-(CGPoint)makePackTypeLabel:(id)label item:(id)item marginPoint:(CGPoint)point;
-(CGPoint)updatePackTimeLabel:(id)label item:(id)item marginPoint:(CGPoint)point;
-(CGPoint)makePackTimeLabel:(id)label item:(id)item marginPoint:(CGPoint)point;
-(CGPoint)updatePackNameLabel:(id)label item:(id)item marginPoint:(CGPoint)point;
-(CGPoint)makePackNameLabel:(id)label item:(id)item marginPoint:(CGPoint)point;
-(void)refreshPriceLabelString;
-(CGPoint)makePackPriceLabel:(id)label item:(id)item marginRightPoint:(CGPoint)point;
-(CGPoint)makeContainerView:(id)view item:(id)item marginPoint:(CGPoint)point;
-(CGPoint)makeCoverImage:(id)image item:(id)item marginPoint:(CGPoint)point;
-(void)updateScrollView;
-(void)initScrollView;
-(void)initView;
-(void)initData;
-(void)viewDidLoad;
-(id)initWithPid:(id)pid Scence:(unsigned long)scence;
-(id)initWithStoreSession:(id)storeSession StoreItem:(id)item Scence:(unsigned long)scence;
-(void)dealloc;
@end

@interface FavRecordHeadData : NSObject {
	NSString* m_title;
}
@property(retain, nonatomic) NSString* title;
@end

@interface FavRecordHead : UIView {
	UITextField* m_textTitle;
	UIImageView* m_separateLine;
	FavRecordHeadData* m_data;
}
@property(retain, nonatomic) UITextField* textTitle;
-(void)dealloc;
-(CGRect)getFrame;
-(void)setFrame:(CGRect)frame;
-(void)resignHeaderFirstResponder;
-(int)initalHeight;
-(void)setHeaderDelegate:(id)delegate;
-(void)renderWithData:(id)data;
-(void)layout;
-(void)initView;
-(id)init;
@end

@interface MyFavoritesBaseCellView : MMUIView <INetworkStatusMgrExt, IStrangerContactMgrExt, IFavoritesExt> {
	FavoritesItem* m_favItem;
	MMUIImageView* m_headImgView;
	UILabel* m_titleLabel;
	UILabel* m_timeLabel;
	MMUIImageView* m_syncImg;
	MMUIButton* m_syncButton;
	UIImageView* m_failIcon;
	BOOL m_bIsFromOpenApi;
	BOOL m_bIsForSearch;
	NSString* m_nsUsername;
	unsigned long m_uiFavUpDateTime;
	unsigned long m_uiSingalLineHeight;
	MMDelegateProxy<MyFavoritesBaseCellDelegate>* m_FavBaseCellDelegate;
}
@property(assign, nonatomic) BOOL m_bIsForSearch;
@property(assign, nonatomic) MMDelegateProxy<MyFavoritesBaseCellDelegate>* m_FavBaseCellDelegate;
+(float)heightForFavItem:(id)favItem;
-(void)OnStartDownloadFavoritesItem:(id)item;
-(void)OnStartUploadFavoritesItem:(id)item;
-(void)OnRestartAllUploadFailItems;
-(void)onStrangerContactUpdated:(id)updated;
-(void)onNetworkStatusChange:(unsigned long)change;
-(void)OnHeadImgLongPress:(id)press;
-(void)onSyncButtonClick:(id)click;
-(void)showTimeLabel:(BOOL)label;
-(void)layoutSubviews;
-(void)updateSyncStatus;
-(void)initSyncStatus;
-(void)initContentView;
-(void)initTimeLabel;
-(id)getContactDisplayName:(id)name;
-(id)getTitleText;
-(void)initTitleLabel;
-(void)initHeadImgView;
-(void)setCellSize;
-(void)initView;
-(void)initData;
-(void)dealloc;
-(id)initWithFavItem:(id)favItem;
@end

@interface MyFavoritesUrlCellView : MyFavoritesBaseCellView <IStrangerContactMgrExt, TextLayoutDelegate> {
	MMUIImageView* m_urlThumbView;
	RichTextView* m_urlTitleLabel;
	UILabel* m_urlFromLabel;
	NSString* m_urlBrandId;
	NSString* m_urlTitle;
	BOOL m_bHasThumb;
	float fContentHeight;
	float fContentLongLength;
}
+(float)heightForFavItem:(id)favItem;
-(void)showTimeLabel:(BOOL)label;
-(void)onStrangerContactUpdated:(id)updated;
-(void)layoutSubviews;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(id)getDomain;
-(void)initUrlFromLabel;
-(void)initUrlTitleLabel;
-(id)getThumbImageWithDataFmt:(id)dataFmt;
-(void)initUrlThumb;
-(void)initContentView;
-(void)setCellSize;
-(void)dealloc;
@end

@interface ChatRoomInfoViewController : MMUIViewController <tableViewDelegate, ChatRoomMemberGridViewDelegate, MMTableViewInfoDelegate, contactInfoDelegate, MultiSelectContactsViewControllerDelegate, IContactMgrExt, contactVerifyLogicDelegate, ShareFriendOnChatDelegate, IGroupMgrExt, UIAlertViewDelegate, UIActionSheetDelegate, IAutoSetRemarkExt> {
	CContact* m_chatRoomContact;
	NSArray* m_arrMemberList;
	id<ShareFriendOnChatDelegate, chatRoomInfoDelegate, chatRoomSettingDelegate> m_delegate;
	CContactVerifyLogic* m_oContactVerifyLogic;
	NSMutableArray* m_arrNeedVerifyUsrName;
	UIButton* m_muteButton;
	UIView* m_titleView;
	ChatRoomMemberGridView* m_memberGrid;
	BOOL m_bDeleteStatus;
	BOOL m_bFromAddressBook;
	BOOL m_isChatStatusNotifyOpen;
	MMTableViewInfo* m_tableViewInfo;
	ShareFriendOnChatLogicController* m_shareMyFriendLogic;
	BOOL m_isShowDislayName;
}
@property(assign, nonatomic) BOOL m_bFromAddressBook;
@property(retain, nonatomic) ShareFriendOnChatLogicController* m_shareMyFriendLogic;
@property(retain, nonatomic) UIButton* m_muteButton;
@property(retain, nonatomic) CContact* m_chatRoomContact;
@property(assign, nonatomic) id<ShareFriendOnChatDelegate, chatRoomInfoDelegate, chatRoomSettingDelegate> m_delegate;
-(void)onDonateResult;
-(void)onSetStrangerRemark:(id)remark;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)changeSetting;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)OnQuitPaidChatRoom:(id)room rspCode:(int)code;
-(void)OnVerifyChatRoomMember:(id)member rspCode:(int)code;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)processModContact:(id)contact;
-(id)genErrorString:(id)string needVerify:(BOOL*)verify;
-(id)getErrorContactName:(id)name;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)quitChatRoom;
-(void)verifyContact;
-(void)contactVerifyOk:(id)ok opCode:(unsigned long)code;
-(void)onMultiSelectContactReturn:(id)aReturn;
-(void)addMembersToChatRoom:(id)chatRoom;
-(void)OnAddGroupMember:(id)member withStatus:(unsigned long)status memberList:(id)list contactList:(id)list4;
-(BOOL)canShowUpgradeStatus;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)setShowDisplayName:(id)name;
-(void)showSetRoomDisplayName;
-(void)setChatRoomDisplayName:(id)name;
-(id)getDisplayName;
-(void)bindCardUpgradeChatRoom;
-(void)extendEditingMemberList;
-(void)shrinkMemberList;
-(void)extendMemberList;
-(void)onDeleteMember:(id)member;
-(void)addMember;
-(void)openContactInfo:(id)info;
-(void)onEnterChat;
-(void)dealloc;
-(id)init;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)reloadMember:(id)member;
-(void)reloadMemberListAndView;
-(void)initView;
-(void)doReset;
-(void)updateMemberView;
-(void)initFooterView;
-(void)setTopSession;
-(void)jumpPaidChatRoomAction;
-(void)onOpenWXTalk;
-(void)onEditAndSearch;
-(void)onQuit:(id)quit;
-(void)updateBtnTitle;
-(void)onQRCodeView;
-(void)makeQRInfoCell:(id)cell;
-(void)makeUpgradeCell:(id)cell;
-(void)showSetTopicView;
-(void)setChatRoomTopic:(id)topic;
-(void)initData;
-(id)makeEnterBtn;
-(void)reloadTableData;
-(void)reloadProfileTableData;
-(id)makeInfoHeaderSection;
-(void)makeMemberCardCell:(id)cell CellInfo:(id)info;
-(void)loadMemberList;
-(void)tryGetContactUsrImg;
-(void)initTitleView;
-(void)updateTitleView;
-(void)onFinishedShareMyFriend:(BOOL)aFriend;
-(id)getMyFriendContact;
-(id)getShareMyFriendParentViewController;
-(BOOL)isTopSessionCountExceed;
-(void)onTopSession:(BOOL)session;
-(BOOL)getSessionTopped;
-(void)OnChangeMemberDisplayName:(id)name;
-(void)checkNeedReload:(id)reload;
-(void)OnReceiveChatRoomPresentMsg:(id)msg;
-(void)OnReadPresentMsg:(id)msg;
-(void)OnUnreadVerifyMsgCountChange:(id)change;
-(void)OnReceiveChatRoomVerifyMsg:(id)msg;
-(void)OnChangeGroup:(id)group;
-(void)onExpose;
-(void)switchSaveToAddressBook:(id)addressBook;
-(void)onClear;
-(void)showChatBackgroundConfig;
-(void)setMuteStatus:(id)status;
-(BOOL)setUpdateNotifyMuted:(BOOL)muted;
-(void)OnDelGroupMember:(id)member withResult:(unsigned long)result memberList:(id)list;
-(void)startLoading;
@end

@interface MyFavoritesMusicCellView : MyFavoritesBaseCellView {
	MMUIImageView* m_musicThumbView;
	UILabel* m_musicNameLabel;
	UILabel* m_musicSingerLabel;
	UILabel* m_musicFromLabel;
	NSString* m_musicName;
	NSString* m_musicSinger;
	NSString* m_musicFrom;
	MMMusicPlayerContoller* m_musicPlayButton;
}
+(float)heightForFavItem:(id)favItem;
-(void)showTimeLabel:(BOOL)label;
-(void)layoutSubviews;
-(void)initMusicFromLabel;
-(void)initMusicSingerLabel;
-(void)initMusicNameLabel;
-(void)initMusicPlayButton;
-(void)initMusicThumbView;
-(void)initContentView;
-(void)setCellSize;
-(void)dealloc;
@end

@interface MyFavoritesVideoCellView : MyFavoritesBaseCellView {
	MMUIImageView* m_videoThumbView;
	UILabel* m_videoTitleLabel;
	UILabel* m_videoTimeLabel;
	UILabel* m_videoAppLabel;
	NSString* m_nsVideoTitle;
	NSString* m_nsVideoTime;
	NSString* m_nsVideoFrom;
}
+(float)heightForFavItem:(id)favItem;
-(void)showTimeLabel:(BOOL)label;
-(void)layoutSubviews;
-(id)getContactDisplayName:(id)name;
-(id)getVideoFrom;
-(id)getAppName;
-(void)initVideoAppLabel;
-(id)getVideoTimeByDuration:(unsigned long)duration;
-(void)initVideoTimeLabel;
-(id)getVideoTitle;
-(void)initVideoTitleLabel;
-(void)initVideoThumbView;
-(void)initContentView;
-(void)setCellSize;
-(void)dealloc;
@end

@interface PushMailContact : NSObject <NSCopying> {
	NSString* nsContactName;
	NSString* nsContactAddress;
}
@property(retain, nonatomic) NSString* nsContactAddress;
@property(retain, nonatomic) NSString* nsContactName;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface PushMailWrap : NSObject <NSCopying> {
	NSString* nsSender;
	NSString* nsSenderAddress;
	NSString* nsSubject;
	NSString* nsDigest;
	NSString* nsDate;
	NSString* nsWapLink;
	NSString* nsMailID;
	NSString* nsAccount;
	NSString* nsArgs;
	unsigned uiUin;
	BOOL bHasAttachment;
	NSMutableArray* arrToList;
	NSMutableArray* arrCCList;
}
@property(assign, nonatomic) unsigned uiUin;
@property(assign, nonatomic) BOOL bHasAttachment;
@property(retain, nonatomic) NSMutableArray* arrCCList;
@property(retain, nonatomic) NSMutableArray* arrToList;
@property(retain, nonatomic) NSString* nsArgs;
@property(retain, nonatomic) NSString* nsAccount;
@property(retain, nonatomic) NSString* nsMailID;
@property(retain, nonatomic) NSString* nsWapLink;
@property(retain, nonatomic) NSString* nsDate;
@property(retain, nonatomic) NSString* nsDigest;
@property(retain, nonatomic) NSString* nsSubject;
@property(retain, nonatomic) NSString* nsSenderAddress;
@property(retain, nonatomic) NSString* nsSender;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface CExtendInfoOfPushMail : NSObject <IMsgExtendOperation, IMessageWrapExt, NSCopying> {
	PushMailWrap* m_oPushMailWrap;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(retain, nonatomic) PushMailWrap* m_oPushMailWrap;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface CExtendInfoOfVoip : NSObject <IMessageWrapExt, IMsgExtendOperation, NSCopying> {
	unsigned long m_uiVoipRecvTime;
	unsigned long m_uiVoipStatus;
	unsigned long m_uiVoipInviteType;
	long m_iVoipRoomid;
	long long m_i64VoipKey;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(assign, nonatomic) long long m_i64VoipKey;
@property(assign, nonatomic) long m_iVoipRoomid;
@property(assign, nonatomic) unsigned long m_uiVoipInviteType;
@property(assign, nonatomic) unsigned long m_uiVoipStatus;
@property(assign, nonatomic) unsigned long m_uiVoipRecvTime;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
-(void)UpdateContent:(id)content;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface CExtendInfoOfMassSend : NSObject <IMessageWrapExt, IMsgExtendOperation, NSCopying> {
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
+(void)CreateExtendInfoWithUserName:(id)userName retExtendInfo:(id*)info retIsContinueDispatch:(BOOL*)dispatch;
-(void)UpdateMassSendContent:(id)content;
-(void)ChangeForDisplay;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
@end

@interface CExtendInfoOfQQ : NSObject <IMessageWrapExt, IMsgExtendOperation, NSCopying> {
	NSString* m_nsDisplayName;
	NSString* m_nsImgSrc;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(retain, nonatomic) NSString* m_nsImgSrc;
@property(retain, nonatomic) NSString* m_nsDisplayName;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface QQSessionInfo : NSObject {
	CQQContact* m_contact;
	CMessageWrap* m_lastMessage;
	unsigned long m_unReadCount;
}
@property(assign, nonatomic) unsigned long m_unReadCount;
@property(retain, nonatomic) CMessageWrap* m_lastMessage;
@property(retain, nonatomic) CQQContact* m_contact;
-(int)compare:(id)compare;
-(void)dealloc;
@end

@interface QQSessionMgr : MMService <IMsgExt, MMService, IQQContactMgrExt, SessionDelegate, IAudioSenderExt, INewArrivalExt, IMMNewSessionMgrExt> {
	NSMutableArray* m_arrSessions;
	BOOL m_hasInit;
}
-(void)dealloc;
-(id)init;
-(void)unRegisterExt;
-(void)registerExt;
-(void)isUser:(id)user hasSpecalSessionInfo:(id*)info;
-(void)onDeleteSessionOfUser:(id)user;
-(void)isMessage:(id)message Handled:(BOOL*)handled;
-(void)isUser:(id)user Handled:(BOOL*)handled;
-(void)onSyncQQContactEnd;
-(void)onDeleteQQContact:(id)contact;
-(void)onModifyQQContact:(id)contact;
-(void)onNewQQContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)OnMsgSent:(id)sent;
-(void)OnAddMsg:(id)msg;
-(void)OnUnReadCountChange:(id)change;
-(void)OnDelMsg:(id)msg;
-(void)OnModMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(void)OnPreAddMsg:(id)msg MsgWrap:(id)wrap;
-(id)GetSessionInfoByUsrName:(id)name Index:(unsigned*)index;
-(void)onQQNewArrivalCountChange:(unsigned long)change;
-(BOOL)zeroNewArrivalCount;
-(unsigned long)getNewArrivalCount;
-(id)getNewArrivalList;
-(void)DeleteAllSession;
-(void)DeleteSession:(unsigned long)session;
-(id)GetSessionInfo:(unsigned long)info;
-(unsigned long)GetCount;
-(id)GetLastMessage;
-(unsigned long)GetTotalUnreadCount;
-(void)loadData;
-(void)fireListener:(int)listener withIndex:(unsigned long)index;
-(id)genMainFrameSessionInfo;
-(int)updateSessionInfo:(id)info;
-(void)syncAllContact;
-(void)syncSessionContact;
@end

@interface CustomMessageWrap : NSObject {
	unsigned long m_uiItemType;
	unsigned long m_uiItemShowType;
	NSString* m_nsTitle;
	NSString* m_nsUrl;
	NSString* m_nsShortUrl;
	NSString* m_nsTid;
	NSString* m_nsSource;
	NSString* m_nsSourceIcon;
	NSDate* m_pubTime;
	unsigned long m_uiType;
	BOOL m_bHasVedio;
	NSString* m_nsCategory;
	NSString* m_nsUserName;
	NSString* m_nsNickName;
	NSString* m_nsCover;
	NSString* m_nsDigest;
	unsigned long m_uiCoverWidth;
	unsigned long m_uiCoverHeight;
}
@property(assign, nonatomic) unsigned long m_uiCoverHeight;
@property(assign, nonatomic) unsigned long m_uiCoverWidth;
@property(retain, nonatomic) NSString* m_nsDigest;
@property(retain, nonatomic) NSString* m_nsCover;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsUserName;
@property(retain, nonatomic) NSString* m_nsCategory;
@property(assign, nonatomic) BOOL m_bHasVedio;
@property(assign, nonatomic) unsigned long m_uiType;
@property(retain, nonatomic) NSDate* m_pubTime;
@property(retain, nonatomic) NSString* m_nsSourceIcon;
@property(retain, nonatomic) NSString* m_nsSource;
@property(retain, nonatomic) NSString* m_nsTid;
@property(retain, nonatomic) NSString* m_nsShortUrl;
@property(retain, nonatomic) NSString* m_nsUrl;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(assign, nonatomic) unsigned long m_uiItemShowType;
@property(assign, nonatomic) unsigned long m_uiItemType;
+(id)getArrCustomFromWrap:(id)wrap;
+(id)getFirstCustomTitle:(id)title;
+(XmlReaderNode_t*)getReaderNode:(XmlReaderNode_t*)node;
-(void)dealloc;
-(id)description;
@end

@interface AppProductItem : NSObject <PBCoding> {
	unsigned long type;
	NSString* productInfo;
}
@property(retain, nonatomic) NSString* productInfo;
@property(assign, nonatomic) unsigned long type;
+(void)initialize;
+(void)_initPBTableOfAppProductItem;
-(id)toXML;
-(BOOL)fromXML:(XmlReaderNode_t*)xml;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface CExtendInfoOfAPP : NSObject <IMessageWrapExt, IMsgExtendOperation, NSCopying> {
	NSString* m_nsAppID;
	unsigned long m_uiApiSDKVersion;
	NSString* m_nsTitle;
	NSString* m_nsDesc;
	NSString* m_nsAppAction;
	unsigned long m_uiAppMsgInnerType;
	unsigned long m_uiShowType;
	NSString* m_nsAppContent;
	NSString* m_nsAppMediaUrl;
	NSString* m_nsAppMediaLowUrl;
	NSString* m_nsAppMediaDataUrl;
	NSString* m_nsAppMediaLowBandDataUrl;
	unsigned long m_uiAppDataSize;
	NSString* m_nsAppAttachID;
	NSString* m_nsAppFileExt;
	NSString* m_nsMsgAttachUrl;
	ShakePageItem* m_oShakeResult;
	unsigned long m_uiAppVersion;
	unsigned long m_uiAppExtShowType;
	NSString* m_nsAppExtInfo;
	NSString* m_nsSourceUsername;
	NSString* m_nsSourceDisplayname;
	unsigned long m_uiRemindTime;
	unsigned long m_uiRemindId;
	NSString* m_nsRemindAttachId;
	unsigned long m_uiRemindAttachTotalLen;
	unsigned long m_uiRemindFormat;
	unsigned long m_uiOriginFormat;
	unsigned long m_uiOriginMsgSvrId;
	NSString* m_nsThumbUrl;
	NSString* m_nsAppName;
	NSString* m_nsDisplayName;
	NSArray* m_arrReaderWaps;
	NSArray* m_arrCustomWrap;
	unsigned long m_uiEncryVer;
	NSString* m_nsImgSrc;
	NSString* m_nsAppMediaTagName;
	AppProductItem* m_oAppProductItem;
	NSString* m_nsAppMessageExt;
	NSString* m_nsAppMessageAction;
	NSString* m_nsMsgThumbUrl;
	NSString* m_nsMsgThumbAesKey;
	unsigned long m_uiMsgThumbSize;
	unsigned long m_uiMsgThumbWidth;
	unsigned long m_uiMsgThumbHeight;
	NSString* m_nsCommentUrl;
	NSString* m_nsEmoticonMD5;
	NSString* m_nsAesKey;
	BOOL m_bIsForceUpdate;
	BOOL m_isDirectSend;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(assign, nonatomic) BOOL m_isDirectSend;
@property(assign, nonatomic) BOOL m_bIsForceUpdate;
@property(retain, nonatomic) NSString* m_nsAppMessageAction;
@property(retain, nonatomic) NSString* m_nsAppMessageExt;
@property(retain, nonatomic) AppProductItem* m_oAppProductItem;
@property(retain, nonatomic) NSString* m_nsAppMediaTagName;
@property(retain, nonatomic) NSString* m_nsImgSrc;
@property(retain, nonatomic) NSArray* m_arrCustomWrap;
@property(retain, nonatomic) NSArray* m_arrReaderWaps;
@property(retain, nonatomic) NSString* m_nsMsgThumbUrl;
@property(retain, nonatomic) NSString* m_nsAppName;
@property(retain, nonatomic) NSString* m_nsThumbUrl;
@property(assign, nonatomic) unsigned long m_uiOriginMsgSvrId;
@property(assign, nonatomic) unsigned long m_uiOriginFormat;
@property(assign, nonatomic) unsigned long m_uiRemindFormat;
@property(assign, nonatomic) unsigned long m_uiRemindAttachTotalLen;
@property(retain, nonatomic) NSString* m_nsRemindAttachId;
@property(assign, nonatomic) unsigned long m_uiRemindId;
@property(assign, nonatomic) unsigned long m_uiRemindTime;
@property(retain, nonatomic) NSString* m_nsSourceDisplayname;
@property(retain, nonatomic) NSString* m_nsSourceUsername;
@property(retain, nonatomic) NSString* m_nsAppExtInfo;
@property(assign, nonatomic) unsigned long m_uiEncryVer;
@property(retain, nonatomic) NSString* m_nsAesKey;
@property(assign, nonatomic) unsigned long m_uiAppExtShowType;
@property(assign, nonatomic) unsigned long m_uiAppVersion;
@property(retain, nonatomic) ShakePageItem* m_oShakeResult;
@property(retain, nonatomic) NSString* m_nsCommentUrl;
@property(assign, nonatomic) unsigned long m_uiMsgThumbHeight;
@property(assign, nonatomic) unsigned long m_uiMsgThumbWidth;
@property(assign, nonatomic) unsigned long m_uiMsgThumbSize;
@property(retain, nonatomic) NSString* m_nsMsgThumbAesKey;
@property(retain, nonatomic) NSString* m_nsMsgAttachUrl;
@property(retain, nonatomic) NSString* m_nsAppFileExt;
@property(retain, nonatomic) NSString* m_nsEmoticonMD5;
@property(retain, nonatomic) NSString* m_nsAppAttachID;
@property(assign, nonatomic) unsigned long m_uiAppDataSize;
@property(retain, nonatomic) NSString* m_nsAppMediaLowBandDataUrl;
@property(retain, nonatomic) NSString* m_nsAppMediaDataUrl;
@property(retain, nonatomic) NSString* m_nsAppMediaLowUrl;
@property(retain, nonatomic) NSString* m_nsAppMediaUrl;
@property(retain, nonatomic) NSString* m_nsAppContent;
@property(assign, nonatomic) unsigned long m_uiShowType;
@property(assign, nonatomic) unsigned long m_uiAppMsgInnerType;
@property(retain, nonatomic) NSString* m_nsAppAction;
@property(retain, nonatomic) NSString* m_nsDesc;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(assign, nonatomic) unsigned long m_uiApiSDKVersion;
@property(retain, nonatomic) NSString* m_nsAppID;
@property(retain, nonatomic) NSString* m_nsDisplayName;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
-(id)GetThumbPath;
-(BOOL)GetDownloadThumbStatus:(unsigned*)status;
-(BOOL)isShowAppMessageBlockButton;
-(BOOL)isShowAppBottomButton;
-(unsigned long)GetPreviewType;
-(void)UpdateContent:(id)content;
-(id)GetContent;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
-(id)GetAppMsgAttachContent;
-(void)ChangeForCustom;
-(void)ChangeForReader;
@end

@interface CExtendInfoOfLocation : NSObject <IMessageWrapExt, IMsgExtendOperation, NSCopying> {
	double m_latitude;
	double m_longitude;
	int m_mapScale;
	NSString* m_locationLabel;
	NSString* m_poiName;
	NSString* m_mapType;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(retain, nonatomic) NSString* m_mapType;
@property(retain, nonatomic) NSString* m_poiName;
@property(retain, nonatomic) NSString* m_locationLabel;
@property(assign, nonatomic) int m_mapScale;
@property(assign, nonatomic) double m_longitude;
@property(assign, nonatomic) double m_latitude;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
-(void)UpdateContent:(id)content;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountFillPhoneViewController : WCAccountBaseViewController <CountryCodePickerDelegate, UITextFieldDelegate, ILinkEventExt> {
	UILabel* m_countryNameLabel;
	WCBaseTextFieldItem* m_textFieldContryCodeItem;
	WCBaseTextFieldItem* m_textFieldPhoneNumberItem;
	WCBaseKeyboardToolBar* m_keyboardBar;
	CountryCodeWrap* m_curCountryCode;
	CountryCodePickerViewController* m_countryCodePicker;
	PhoneNumberFormatLogic* m_phoneNumFormatter;
	BOOL m_bReadAgreement;
	BOOL m_bAgreementMobileCanBeFound;
	NSString* m_nsHeaderWording;
	MMDelegateProxy<WCAccountFillPhoneViewControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) BOOL m_bAgreementMobileCanBeFound;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)fillCountryCode:(id)code phoneNum:(id)num;
-(void)CountryCodePickerDidPickCountryCode:(id)countryCodePicker;
-(void)refreshViewWithData:(id)data;
-(void)findCountryCode;
-(void)showCountryCodePickerView;
-(void)makeCountryCodeCell:(id)cell;
-(id)makeHeaderView;
-(void)initTableView;
-(void)showCountryCode;
-(void)vcResignFirstResponder;
-(void)vcBecomeFirstResponder;
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)setLeftBarBtnTitle:(id)title;
-(void)showMobileCanBeFound;
-(void)onMobileCanBeFoundAgreementClick:(id)click;
-(void)showLoginByQQ:(id)qq withAgreement:(BOOL)agreement;
-(void)onOpenAgreementLink:(id)link;
-(void)onReadAgreement:(id)agreement;
-(void)initNavigationBar;
-(void)onNext;
-(void)setHeaderTip:(id)tip;
-(void)dealloc;
-(id)init;
@end

@interface SyncPhoneContactsViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, IMsgExt, ILinkEventExt, QQPimEngineLoginDelegate, QQPimEngineSyncDelegate, QQPimEngineQueryUtilDelegate, ReturnToSettingAccoutDelegate, IMsgExt, IMMNewSessionMgrExt, UIAlertViewDelegate> {
	UILabel* _headLabel;
	UIButton* _userInstruction;
	UIButton* _agreement;
	UILabel* _relatedText;
	UILabel* _linkText;
	UIView* _tailView;
	UIView* _headView;
	MMTableView* _tableView;
	MMUIAlertView* _alertView;
	NSString* _verifyUrl;
	UIActivityIndicatorView* _activityIndicator;
	NSString* _passwordText;
	NSString* _verifyCode;
	NSString* _pimPassword;
	UIView* _messageBaseNodeView;
	UILabel* _headViewlabel;
	int eOperationType;
	BOOL _bBackupTipsShow;
	BOOL _bRestoreTipsShow;
}
@property(retain, nonatomic) NSString* verifyUrl;
@property(retain, nonatomic) NSString* pimPassword;
@property(retain, nonatomic) NSString* verifyCode;
@property(retain, nonatomic) NSString* passwordText;
@property(retain, nonatomic) MMTableView* tableView;
@property(retain, nonatomic) UIView* headView;
@property(retain, nonatomic) UIView* tailView;
@property(retain, nonatomic) UILabel* relatedText;
@property(retain, nonatomic) UIButton* agreement;
@property(retain, nonatomic) UIButton* userInstruction;
@property(retain, nonatomic) UILabel* headLabel;
-(void)dealloc;
-(void)willDisappear;
-(void)didAppear;
-(void)willAppear;
-(void)onLinkClicked:(id)clicked withRect:(CGRect)rect;
-(void)onSetting:(id)setting;
-(void)onSessionTotalUnreadCountChange:(unsigned long)change;
-(void)onRestore;
-(void)onBackup;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)doBackup;
-(void)doRestore;
-(void)onQueryServer;
-(BOOL)CanPerformSync;
-(void)onShowPr:(id)pr;
-(void)onShowUserIntruction:(id)intruction;
-(void)pimEngineQueryUtil:(id)util totalLocalResult:(id)result;
-(void)pimEngineQueryUtilTotalServerResultFailed:(id)failed;
-(void)pimEngineQueryUtil:(id)util totalServerResult:(id)result;
-(void)pimEngineSyncInterruptBecauseOfNetworkError:(id)networkError;
-(void)pimEngineSyncFailed:(id)failed reason:(int)reason;
-(void)pimEngineSyncFailedWrap:(id)wrap;
-(void)pimEngineSyncSuccess:(id)success withStatics:(id)statics;
-(void)wrapSyncSuc:(id)suc;
-(void)pimEngineSyncProgressChanged:(id)changed currentProgress:(float)progress;
-(void)pimEngineSyncProgressChangedWrap:(id)wrap;
-(void)pimEngineSyncBegin:(id)begin;
-(void)pimEngineLoginVerifyMobileAccountFailed:(id)failed withResultCode:(int)resultCode;
-(void)pimEngineLoginVerifyMobileAccountSuccess:(id)success;
-(void)pimEngineLoginRegisterMobileAccountFailed:(id)failed withResultCode:(int)resultCode;
-(void)pimEngineLoginRegisterMobileAccountSuccess:(id)success;
-(void)pimEngineLoginFailed:(id)failed withResultCode:(int)resultCode;
-(void)pimEngineLoginFailedWrap:(id)wrap;
-(void)pimEngineLoginSuccess:(id)success;
-(void)pimEngineLoginNeedPimPassword:(id)password;
-(void)pimEngineLoginNeedVerifyCode:(id)code verifyCodeURL:(id)url;
-(void)pimEngineLoginNeedVerifyCodeWrap:(id)wrap;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertView:(id)view doneWithButtonIndex:(int)buttonIndex;
-(void)ReturnToSettingAccout;
-(void)bindQQ;
-(void)login:(BOOL)login;
-(void)startRestore;
-(void)startBackup;
-(void)viewDidLoad;
-(void)updateMessageBaseNodeView;
-(void)ReloadData;
-(void)makeLabelShadow;
-(void)clearUnreadAndShowTips;
-(void)setAlertViewStyle:(id)style withTag:(int)tag;
-(void)setVerifyCodeAlertView:(id)view withTag:(int)tag;
-(void)updateVerifyImage;
-(void)done;
-(void)getAlertView;
-(id)getLocalTime;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)showDeniedTips;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)UnRegister;
-(void)Register;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
@end

@interface WCOfflinePayLogicMgr : MMService <MMService, WCOfflinePayNetworkHelperDelegate> {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	unsigned long m_uiEventID;
	NSData* m_dbKey;
	NSString* m_bindNo;
	WCOfflinePayNetworkHelper* m_oWCOfflinePayNetworkHelper;
}
-(void)OnWCToTenpayCommonErrorResponse:(id)tenpayCommonErrorResponse Request:(id)request;
-(void)OnWCToTenpayCommonResponse:(id)tenpayCommonResponse Request:(id)request;
-(void)sendGetWCOfflinePayCertRequest:(id)request cardInfo:(id)info;
-(id)getBindInfo;
-(void)removeBindInfo:(id)info;
-(void)addBindInfo:(id)info OpenID:(id)anId CertNo:(id)no CertKey:(id)key;
-(BOOL)isWCOfflinePayEnabled;
-(id)decrypt:(id)decrypt;
-(id)encrypt:(id)encrypt;
-(void)onServiceInit;
-(void)initDB:(id)db withLock:(id)lock;
-(void)GetWCPayBusinessRequest:(id)request WXInnerUseDic:(id)dic CMDID:(unsigned long)cmdid OutputType:(unsigned long)type;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountRegisterViewController : WCAccountBaseViewController <TakeOrSelectHeadImageLogicDelegate> {
	BOOL m_bReadAgreement;
	WCBaseTextFieldItem* m_textFieldNameItem;
	WCBaseTextFieldItem* m_textFieldIDItem;
	WCBaseKeyboardToolBar* m_keyboardBar;
	UIButton* m_btnHeadimage;
	MMHeadImageView* m_headImageView;
	UIImageView* m_footerTipImageView;
	UILabel* m_footerTip;
	UIImageView* m_nameOKImageView;
	UIImageView* m_idOKImageView;
	UIActivityIndicatorView* m_idLoadingView;
	TakeOrSelectHeadImageLogic* m_photoLogic;
	MMDelegateProxy<WCAccountRegisterViewControllerDelegate>* m_delegate;
	UIImage* m_headImage;
	NSMutableArray* m_arrMenuItems;
	NSMutableDictionary* m_dicAction;
	NSTimer* m_aliasTimer;
	NSString* m_nsLastWechatID;
	BOOL m_bFirstSuggestAlias;
	NSString* m_nsWechatIDTip;
}
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemEndEdit:(id)edit;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)WCBaseInfoItemBeginEdit:(id)edit;
-(void)resetSuggestAlias;
-(void)getSuggestAlias;
-(BOOL)isLastWeChatIDChanged;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)MenuControllerWillHide:(id)menuController;
-(void)refreshViewWithData:(id)data;
-(void)updateMenu:(id)menu;
-(void)forwarder:(id)forwarder;
-(void)setDelegate:(id)delegate;
-(void)didReceiveMemoryWarning;
-(void)getAliasDone;
-(void)setAliasOK;
-(void)setError:(id)error;
-(void)viewDidLoad;
-(BOOL)isShowWeChatID;
-(BOOL)isShowHead;
-(void)showHeadImageOption;
-(void)onGetHeadImage:(id)image;
-(void)onNext;
-(void)initNavigationBar;
-(void)onRegNickNameBack;
-(void)dealloc;
-(id)init;
@end

@interface CExtendInfoOfReader : NSObject <IMessageWrapExt, IMsgExtendOperation, NSCopying> {
	NSArray* m_arrReaderWaps;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(retain, nonatomic) NSArray* m_arrReaderWaps;
+(void)CreateExtendInfoWithUserName:(id)userName retExtendInfo:(id*)info retIsContinueDispatch:(BOOL*)dispatch;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface ReaderTopNewWrap : NSObject {
	NSString* m_nsCover;
	NSString* m_nsDigest;
	unsigned long m_uiCoverWidth;
	unsigned long m_uiCoverHeight;
}
@property(assign, nonatomic) unsigned long m_uiCoverHeight;
@property(assign, nonatomic) unsigned long m_uiCoverWidth;
@property(retain, nonatomic) NSString* m_nsDigest;
@property(retain, nonatomic) NSString* m_nsCover;
-(void)dealloc;
@end

@interface ReaderStyleWrap : NSObject {
	UIColor* m_color;
	UIFont* m_font;
	BOOL m_bUnderline;
	NSRange m_range;
}
@property(assign, nonatomic) NSRange m_range;
@property(assign, nonatomic) BOOL m_bUnderline;
@property(retain, nonatomic) UIFont* m_font;
@property(retain, nonatomic) UIColor* m_color;
-(id).cxx_construct;
-(void)dealloc;
-(int)compare:(id)compare;
@end

@interface LineStyleWrap : NSObject {
	NSString* m_nsChars;
	UIColor* m_color;
	UIFont* m_font;
	float m_fOffset;
	BOOL m_bUnderline;
	float m_fRealLength;
}
@property(assign, nonatomic) float m_fRealLength;
@property(assign, nonatomic) BOOL m_bUnderline;
@property(assign, nonatomic) float m_fOffset;
@property(retain, nonatomic) UIFont* m_font;
@property(retain, nonatomic) UIColor* m_color;
@property(retain, nonatomic) NSString* m_nsChars;
-(void)dealloc;
-(int)compare:(id)compare;
@end

@interface ReaderWrap : NSObject {
	NSString* m_nsTitle;
	NSString* m_nsUrl;
	NSString* m_nsShortUrl;
	NSString* m_nsTid;
	NSString* m_nsSource;
	NSString* m_nsSourceIcon;
	NSDate* m_pubTime;
	unsigned long m_uiType;
	BOOL m_bHasVedio;
	NSString* m_nsCategory;
	NSString* m_nsUserName;
	NSString* m_nsNickName;
	ReaderTopNewWrap* m_TopNewWrap;
	unsigned long m_uiItemShowType;
	UIColor* m_topColor;
	NSMutableArray* m_arrStyles;
	NSMutableArray* m_arrLines;
	unsigned _m_index;
}
@property(assign, nonatomic) unsigned m_index;
@property(retain, nonatomic) NSMutableArray* m_arrLines;
@property(retain, nonatomic) NSMutableArray* m_arrStyles;
@property(retain, nonatomic) UIColor* m_topColor;
@property(assign, nonatomic) unsigned long m_uiItemShowType;
@property(retain, nonatomic) ReaderTopNewWrap* m_TopNewWrap;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(retain, nonatomic) NSString* m_nsUserName;
@property(retain, nonatomic) NSString* m_nsCategory;
@property(assign, nonatomic) BOOL m_bHasVedio;
@property(assign, nonatomic) unsigned long m_uiType;
@property(retain, nonatomic) NSDate* m_pubTime;
@property(retain, nonatomic) NSString* m_nsSourceIcon;
@property(retain, nonatomic) NSString* m_nsSource;
@property(retain, nonatomic) NSString* m_nsTid;
@property(retain, nonatomic) NSString* m_nsShortUrl;
@property(retain, nonatomic) NSString* m_nsUrl;
@property(retain, nonatomic) NSString* m_nsTitle;
+(id)getArrReaderWaps:(id)waps;
+(id)getFirstReaderTitle:(id)title;
+(XmlReaderNode_t*)getReaderNode:(XmlReaderNode_t*)node;
-(void)dealloc;
-(id)description;
@end

@interface CExtendInfoOfImg : NSObject <IMessageWrapExt, IMsgExtendOperation, NSCopying> {
	unsigned long m_uiHDImgSize;
	unsigned long m_uiNormalImgSize;
	NSString* m_nsImgHDUrl;
	NSString* m_nsImgMidUrl;
	NSData* m_dtImg;
	ImageInfo* m_oImageInfo;
	NSString* m_nsAesKey;
	NSString* m_nsMsgThumbUrl;
	NSString* m_nsMsgThumbAesKey;
	unsigned long m_uiMsgThumbSize;
	unsigned long m_uiMsgThumbWidth;
	unsigned long m_uiMsgThumbHeight;
	NSString* m_nsCommentUrl;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(retain, nonatomic) ImageInfo* m_oImageInfo;
@property(retain, nonatomic) NSData* m_dtImg;
@property(retain, nonatomic) NSString* m_nsCommentUrl;
@property(assign, nonatomic) unsigned long m_uiMsgThumbHeight;
@property(assign, nonatomic) unsigned long m_uiMsgThumbWidth;
@property(assign, nonatomic) unsigned long m_uiMsgThumbSize;
@property(retain, nonatomic) NSString* m_nsMsgThumbAesKey;
@property(retain, nonatomic) NSString* m_nsMsgThumbUrl;
@property(retain, nonatomic) NSString* m_nsAesKey;
@property(retain, nonatomic) NSString* m_nsImgMidUrl;
@property(retain, nonatomic) NSString* m_nsImgHDUrl;
@property(assign, nonatomic) unsigned long m_uiNormalImgSize;
@property(assign, nonatomic) unsigned long m_uiHDImgSize;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
-(id)GetThumbPath;
-(BOOL)IsHDImg;
-(void)setImage:(id)image withData:(id)data isLongOriginImage:(BOOL)image3;
-(void)setImage:(id)image withImageInfo:(id)imageInfo isLongOriginImage:(BOOL)image3;
-(void)setImage:(id)image isLongOriginImage:(BOOL)image2;
-(void)setImage:(id)image withData:(id)data withImageInfo:(id)imageInfo isLongOriginImage:(BOOL)image4;
-(void)UpdateContent:(id)content;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
-(float)currentCompressPicQuality;
-(BOOL)isUploadHDImage:(id)image isLongOriginImage:(BOOL)image2;
@end

@interface MyFavoritesFileCellView : MyFavoritesBaseCellView {
	MMUIImageView* m_FileThumbView;
	UILabel* m_FileNameLabel;
	UILabel* m_FileExtLabel;
	UILabel* m_FileFromLabel;
	NSString* m_fileName;
}
+(float)heightForFavItem:(id)favItem;
-(void)showTimeLabel:(BOOL)label;
-(void)layoutSubviews;
-(id)getContactDisplayName:(id)name;
-(void)initFileFromLabel;
-(void)initFileExtLabel;
-(void)initFileNameLabel;
-(void)initFileThumbView;
-(void)initContentView;
-(void)setCellSize;
-(void)dealloc;
@end

@interface MyFavoritesLocationCellView : MyFavoritesBaseCellView {
	MMUIImageView* m_LocationThumbView;
	UILabel* m_locationPOILabel;
	UILabel* m_locationRemarkLabel;
	UILabel* m_locationTitleLabel;
	UILabel* m_locationFromLabel;
	NSString* m_nsLocPOI;
	NSString* m_nsLocRemark;
	NSString* m_nsLocTitle;
	NSString* m_nsLocFrom;
}
+(float)heightForFavItem:(id)favItem;
-(void)showTimeLabel:(BOOL)label;
-(void)layoutSubviews;
-(id)getContactDisplayName:(id)name;
-(void)initLocationFromLabel;
-(void)initLocationTitleLabel;
-(void)initLocationPOILabel;
-(void)initlocationRemarkLabel;
-(void)initLocationThumbView;
-(void)initContentView;
-(void)setCellHeight;
-(void)dealloc;
@end

@interface MyFavoritesTextCellView : MyFavoritesBaseCellView <TextLayoutDelegate> {
	RichTextView* m_textContentLabel;
	UILabel* m_appLabel;
	float m_fCellHeight;
	NSString* m_nsTextDesc;
	float fContentHeight;
	float fContentLongLength;
}
+(float)heightForFavItem:(id)favItem;
-(void)showTimeLabel:(BOOL)label;
-(void)layoutSubviews;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(id)getAppName;
-(void)initAppLabel;
-(void)initTextContentLabel;
-(void)initContentView;
-(void)setCellSize;
-(void)dealloc;
@end

@interface MyFavoritesAudioCellView : MyFavoritesBaseCellView {
	MMUIView* m_audioView;
	MMUIImageView* m_playingImageView;
	UILabel* m_secLabel;
	int m_iAudioDuration;
	BOOL m_bIsPlaying;
	MMDelegateProxy<FavAudioCellDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavAudioCellDelegate>* m_delegate;
+(float)heightForFavItem:(id)favItem;
-(void)stopNodeViewAnimation;
-(void)startNodeViewAnimation;
-(void)OnAudioTap;
-(void)layoutSubviews;
-(void)initSecLabel;
-(void)initPlayingImageView;
-(void)initAudioView;
-(void)initContentView;
-(void)setCellSize;
-(void)dealloc;
@end

@interface MyFavoritesImageCellView : MyFavoritesBaseCellView {
	MMUIImageView* m_imagePreView;
	MMCDNImageView* m_cdnImg;
	UILabel* m_appLabel;
	UIImageView* m_searchIcon;
	UILabel* m_ocrLabel;
	UILabel* m_forSearchLabel;
}
+(float)heightForFavItem:(id)favItem;
-(void)showTimeLabel:(BOOL)label;
-(void)layoutSubviews;
-(id)getAppName;
-(void)initOCRLabel;
-(void)initAppLabel;
-(void)initImagePreView;
-(void)initContentView;
-(void)setCellSize;
-(void)dealloc;
@end

@interface WCAccountLogic : MMObject <PBMessageObserverDelegate, MessageObserverDelegate, LoginLogicDelegate, IDCHostMgrExt> {
	MMDelegateProxy<WCAccountLogicDelegate>* _delegate;
	LoginLogic* _loginLogic;
	NSMutableDictionary* _dicEventID;
	int _accountRegMode;
	AuthInfo* _curAuthInfo;
	NSString* _clientSeqID;
	RegInfo* _regInfoForIDCChange;
	unsigned long _nextAuthType;
}
@property(retain, nonatomic) RegInfo* regInfoForIDCChange;
@property(retain, nonatomic) NSString* clientSeqID;
-(void)OnIDCRedirectResendPBCgi:(id)cgi;
-(void)OnRegAgain;
-(void)BindMobileAgain:(id)again;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)AuthReturn:(unsigned long)aReturn MessageInfo:(id)info;
-(void)handleRespForQQVerifyImg:(unsigned long)qqverifyImg MessageInfo:(id)info;
-(void)handleRespForEmailReg:(id)emailReg;
-(void)handleRespForSuggestAlias:(id)suggestAlias;
-(void)handleRespForReg:(unsigned long)reg MessageInfo:(id)info;
-(void)handleRespForBindMobile:(id)bindMobile;
-(BOOL)wtloginAuthWithVerifyCode:(id)verifyCode Username:(id)username Password:(id)password PasswordMd5:(id)a5 Sid:(id)sid;
-(BOOL)getWTLoginQQVerifyImage:(id)image Password:(id)password PasswordMd5:(id)a5 Sid:(id)sid;
-(BOOL)getQQVerifyImage:(id)image userName:(id)name password:(id)password passwordMD5:(id)a5 kSid:(id)sid;
-(BOOL)CreateMd5AuthInternal;
-(BOOL)manualAuth:(id)auth;
-(BOOL)getSuggestAlias:(id)alias ticket:(id)ticket regMode:(unsigned long)mode nickName:(id)name inputAliasName:(id)name5 verifySignature:(id)signature verifyContent:(id)content;
-(BOOL)registerByEmail:(id)email;
-(BOOL)registerByQQ:(id)qq;
-(BOOL)registerByMobile:(id)mobile;
-(BOOL)checkEmailRegVerifyCode:(id)code verifyCode:(id)code2 isAuto:(BOOL)auto;
-(BOOL)getEmailRegVerifyCode:(id)code password:(id)password;
-(BOOL)checkForgetPwdVerifyCode:(id)code verifyCode:(id)code2;
-(BOOL)checkSafeDeviceVerifyCode:(id)code authTicket:(id)ticket verifyCode:(id)code3;
-(BOOL)checkLoginVerifyCode:(id)code verifyCode:(id)code2;
-(BOOL)checkRegVerifyCode:(id)code verifyCode:(id)code2;
-(BOOL)getForgetPwdVoiceVerifyCode:(id)code languageCode:(id)code2;
-(BOOL)getSafeDeviceVoiceVerifyCode:(id)code authTicket:(id)ticket languageCode:(id)code3;
-(BOOL)getLoginVoiceVerifyCode:(id)code languageCode:(id)code2;
-(BOOL)getRegVoiceVerifyCode:(id)code languageCode:(id)code2;
-(BOOL)getForgetPwdVerifyCode:(id)code;
-(BOOL)getSafeDeviceVerifyCode:(id)code authTicket:(id)ticket;
-(BOOL)getLoginVerifyCode:(id)code;
-(BOOL)getRegVerifyCode:(id)code;
-(BOOL)checkLoginPhoneNumberStatus:(id)status tryCount:(unsigned long)count adjustRet:(unsigned long)ret;
-(BOOL)checkRegPhoneNumberStatus:(id)status tryCount:(unsigned long)count adjustRet:(unsigned long)ret;
-(BOOL)createBindMobileProtobufEvent:(id)event;
-(BOOL)createEmailRegProtobufEvent:(id)event;
-(void)cancelAllEvent;
-(void)removeCGI:(int)cgi;
-(BOOL)isRunningForCGI:(int)cgi;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface AccountErrorInfo : NSObject {
	unsigned long _uiMessage;
	BaseResponseErrMsg* _errMsg;
}
@property(retain, nonatomic) BaseResponseErrMsg* errMsg;
@property(assign, nonatomic) unsigned long uiMessage;
-(void)parseErrMsgXml:(id)xml;
-(void)dealloc;
-(id)init;
@end

@interface AuthInfo : NSObject {
	unsigned long _inputType;
	NSString* _password;
	NSString* _verifyCode;
	NSString* _userName;
	NSString* _passwordMD5;
	NSData* _kSid;
	NSData* _dtA2Key;
	NSData* _dtA2KeyNew;
	NSString* _verifyCodeId;
	NSData* _verifyCodeImg;
	NSString* _imgEncryptKey;
	NSString* _authTicket;
	NSString* _phoneNumber;
	unsigned long _controlShowFlag;
	NSString* _ticket;
	NSString* _applyBetaUrl;
	NSString* _kick;
	BOOL _isAutoReg;
	unsigned long _nextAuthType;
	BOOL _isGetVerifyImg;
	NSDictionary* _styleKeyValue;
}
@property(assign, nonatomic) unsigned long nextAuthType;
@property(retain, nonatomic) NSDictionary* styleKeyValue;
@property(assign, nonatomic) BOOL isAutoReg;
@property(retain, nonatomic) NSString* kick;
@property(retain, nonatomic) NSString* applyBetaUrl;
@property(retain, nonatomic) NSString* ticket;
@property(assign, nonatomic) unsigned long controlShowFlag;
@property(retain, nonatomic) NSString* phoneNumber;
@property(assign, nonatomic) BOOL isGetVerifyImg;
@property(retain, nonatomic) NSString* authTicket;
@property(retain, nonatomic) NSString* imgEncryptKey;
@property(retain, nonatomic) NSData* verifyCodeImg;
@property(retain, nonatomic) NSString* verifyCodeId;
@property(retain, nonatomic) NSData* kSid;
@property(retain, nonatomic) NSData* dtA2KeyNew;
@property(retain, nonatomic) NSData* dtA2Key;
@property(retain, nonatomic) NSString* passwordMD5;
@property(retain, nonatomic) NSString* userName;
@property(retain, nonatomic) NSString* verifyCode;
@property(retain, nonatomic) NSString* password;
@property(assign, nonatomic) unsigned long inputType;
-(void)dealloc;
-(id)init;
@end

@interface RegInfo : NSObject {
	NSString* _phoneNumber;
	NSString* _QQUin;
	NSString* _password;
	NSString* _email;
	NSString* _ticket;
	unsigned long _opCode;
	NSString* _aliasName;
	unsigned long _regForceType;
	NSString* _nickName;
	unsigned long _scene;
	NSString* _verifySignature;
	NSString* _verifyContent;
	BOOL _hasHeadImg;
	unsigned long _suggestRet;
}
@property(assign, nonatomic) unsigned long suggestRet;
@property(assign, nonatomic) BOOL hasHeadImg;
@property(retain, nonatomic) NSString* verifyContent;
@property(retain, nonatomic) NSString* verifySignature;
@property(assign, nonatomic) unsigned long scene;
@property(retain, nonatomic) NSString* nickName;
@property(assign, nonatomic) unsigned long regForceType;
@property(retain, nonatomic) NSString* aliasName;
@property(assign, nonatomic) unsigned long opCode;
@property(retain, nonatomic) NSString* ticket;
@property(retain, nonatomic) NSString* password;
@property(retain, nonatomic) NSString* QQUin;
@property(retain, nonatomic) NSString* phoneNumber;
@property(retain, nonatomic) NSString* email;
-(void)dealloc;
-(id)init;
@end

@interface RegRespInfo : NSObject {
	NSArray* _arrNextStep;
	NSString* _ticket;
	NSString* _verifySignature;
	NSData* _verifyBuffer;
	unsigned long _nextStepShowStyle;
	NSDictionary* _styleKeyValue;
}
@property(retain, nonatomic) NSDictionary* styleKeyValue;
@property(assign, nonatomic) unsigned long nextStepShowStyle;
@property(retain, nonatomic) NSData* verifyBuffer;
@property(retain, nonatomic) NSString* verifySignature;
@property(retain, nonatomic) NSString* ticket;
@property(retain, nonatomic) NSArray* arrNextStep;
-(void)dealloc;
-(id)init;
@end

@interface MFriendMobileInfo : MMObject {
	NSString* _hashValue;
	NSString* _userName;
	NSString* _nickName;
	unsigned long _status;
	NSString* _bigHeadImgUrl;
	NSString* _smallHeadImgUrl;
}
@property(retain, nonatomic) NSString* smallHeadImgUrl;
@property(retain, nonatomic) NSString* bigHeadImgUrl;
@property(assign, nonatomic) unsigned long status;
@property(retain, nonatomic) NSString* nickName;
@property(retain, nonatomic) NSString* userName;
@property(retain, nonatomic) NSString* hashValue;
-(int)compareMFriendMobileInfoAscending:(id)ascending;
-(void)dealloc;
-(id)init;
@end

@interface AccountReportInfo : NSObject {
	NSString* _clientSeqID;
	NSString* _interfaceName;
	NSString* _viewClassName;
	unsigned long _stayTime;
	unsigned long _action;
	NSString* _styleID;
	unsigned long long _startTime;
	NSString* _nextInterfaceName;
}
@property(retain, nonatomic) NSString* nextInterfaceName;
@property(assign, nonatomic) unsigned long long startTime;
@property(retain, nonatomic) NSString* styleID;
@property(assign, nonatomic) unsigned long action;
@property(assign, nonatomic) unsigned long stayTime;
@property(retain, nonatomic) NSString* viewClassName;
@property(retain, nonatomic) NSString* interfaceName;
@property(retain, nonatomic) NSString* clientSeqID;
-(id)description;
-(id)getStatInfo;
-(void)dealloc;
-(id)init;
@end

@interface AccountBindPhoneInfo : NSObject {
	NSString* m_nsTitle;
	NSString* m_nsDetail;
	unsigned long m_uiSafeRemindType;
	unsigned long m_uiMobileCanBeFoundShowPos;
}
@property(assign, nonatomic) unsigned long m_uiMobileCanBeFoundShowPos;
@property(assign, nonatomic) unsigned long m_uiSafeRemindType;
@property(retain, nonatomic) NSString* m_nsDetail;
@property(retain, nonatomic) NSString* m_nsTitle;
-(BOOL)isMobileCanBeFoundShowInFillPhoneViewController;
-(id)getHeadIcon;
-(void)ParseFromStyle:(id)style;
-(void)ParseFromXml:(id)xml;
-(void)dealloc;
-(id)init;
@end

@interface FavPostTextViewController : MMUIViewController <UITextViewDelegate, UIScrollViewDelegate> {
	UIScrollView* m_scrollView;
	UITextView* _textView;
	int minTextLength;
	int maxTextLength;
	int viewTag;
	MMDelegateProxy<TextInputViewDelegate>* m_delegate;
	UIImageView* m_textViewBkg;
	UILabel* m_wordCountLabel;
	float m_fKeyboardHeight;
}
@property(assign, nonatomic) int viewTag;
@property(assign, nonatomic) int maxTextLength;
@property(assign, nonatomic) int minTextLength;
@property(assign, nonatomic) MMDelegateProxy<TextInputViewDelegate>* m_delegate;
-(void)setTextViewContent:(id)content;
-(void)onFavText;
-(void)OnCancel;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)updateWordCount;
-(void)viewDidLoad;
-(void)initTextBkg;
-(void)initWordCountLabel;
-(void)initTextView;
-(void)initRightBtn;
-(void)initLeftBtn;
-(id)init;
-(void)dealloc;
-(void)removeNotificationObservers;
-(void)initNotificationObservers;
@end

@interface WCAccountBaseControlLogic : WCBaseControlLogic <WCAccountLogicDelegate> {
	WCAccountControlData* m_data;
	WCAccountLogic* m_modelLogic;
}
-(void)addTopViewController:(id)controller;
-(void)removeTopViewController;
-(void)reportExitView:(id)view;
-(void)reportEnterView:(id)view;
-(void)reportOpenMainView:(id)view;
-(void)openMainFrame:(BOOL)frame showStyle:(id)style;
-(BOOL)onHandleError:(id)error;
-(void)onErrorAction:(id)action;
-(void)stopLoading;
-(void)startLoading;
-(void)vcResignFirstResponder;
-(void)vcBecomeFirstResponder;
-(void)dealloc;
-(void)stopLogic;
-(id)initWithData:(id)data;
@end

@interface WCAccountFindFriendControlLogic : WCAccountBaseControlLogic <WCFindFriendLogicDelegate, WCAccountEnableUploadAddressbookViewControllerDelegate, WCAccountAddFriendAfterRegViewControllerDelegate, WCAccountInviteFriendAfterRegViewControllerDelegate> {
	unsigned long m_uiNextIndex;
	WCFindFriendLogic* m_findFriendLogic;
	NSMutableDictionary* m_dicMobileInfo;
	NSMutableDictionary* m_dicEmailInfo;
	NSMutableArray* m_arrAddFriendMobileInfo;
	NSMutableArray* m_arrAddFriendEmailInfo;
	NSMutableArray* m_arrInviteFriendMobileInfo;
	NSArray* m_arrUserNameToAdd;
	NSArray* m_arrMobileToInvite;
}
-(void)onInviteFriendAfterRegNext:(id)next;
-(void)onAddFriendAfterRegNext:(id)next;
-(void)onEnableUploadAddressbookSkip;
-(void)onEnableUploadAddressbookEnable:(id)enable dicEmailInfo:(id)info;
-(void)onSendSmsToMFriendList:(id)mfriendList;
-(void)onAddMFriendList:(id)list;
-(void)onCheckMFriendList:(id)list ticket:(id)ticket arrMobileInfo:(id)info arrEmailInfo:(id)info4;
-(void)handleSvrError:(id)error message:(id)message sel:(SEL)sel;
-(void)handleLocalError:(id)error sel:(SEL)sel;
-(void)dealloc;
-(void)startLogic;
-(void)gotoNextViewController;
-(void)gotoLastViewController;
-(id)initWithData:(id)data;
@end

@interface WCAccountPhoneLoginControlLogic : WCAccountBaseControlLogic <WCBaseControlMgrExt, WCAccountFillPhoneViewControllerDelegate, WCAccountVoiceVerifyViewControllerDelegate, WCAccountPhoneVerifyViewControllerDelegate, WCAccountLoginByPhonePwdViewControllerDelegate, WCAccountNewDeviceViewControllerDelegate> {
	unsigned long m_uiTryCount;
	BOOL m_bAdjustRet;
	WCAccountBaseControlLogic* m_subFBLogic;
}
-(void)onManualAuth:(id)auth authInfo:(id)info;
-(void)onCheckSafeDeviceVerifyCode:(id)code authTicket:(id)ticket userName:(id)name password:(id)password StyleKeyValue:(id)value;
-(void)onGetSafeDeviceVoiceVerifyCode:(id)code authTicket:(id)ticket StyleKeyValue:(id)value;
-(void)onGetSafeDeviceVerifyCode:(id)code authTicket:(id)ticket StyleKeyValue:(id)value;
-(void)onCheckForgetPwdVerifyCode:(id)code userName:(id)name password:(id)password StyleKeyValue:(id)value;
-(void)onCheckLoginVerifyCode:(id)code ticket:(id)ticket controlShowFlag:(unsigned long)flag userName:(id)name password:(id)password StyleKeyValue:(id)value;
-(void)onCheckRegVerifyCode:(id)code ticket:(id)ticket controlShowFlag:(unsigned long)flag userName:(id)name password:(id)password StyleKeyValue:(id)value;
-(void)onGetForgetPwdVoiceVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetLoginVoiceVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetRegVoiceVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetForgetPwdVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetLoginVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetRegVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)loginForPhone;
-(void)forceRegisterForPhone;
-(void)login_but_registerForPhone;
-(void)registerForPhone;
-(void)onGetVoiceVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onGetVerifyCode:(id)code StyleKeyValue:(id)value;
-(void)onCheckRegPhoneNumberStatus:(id)status countryCode:(id)code phoneNumber:(id)number formatedPhoneNumber:(id)number4 StyleKeyValue:(id)value;
-(void)onCheckLoginPhoneNumberStatus:(id)status countryCode:(id)code phoneNumber:(id)number formatedPhoneNumber:(id)number4 StyleKeyValue:(id)value;
-(void)onNewDeviceVerifyPhone;
-(void)onNewDeviceBack;
-(void)onByPhonePwdLoginByVerifyCode;
-(void)onByPhonePwdLoginWithPwd:(id)pwd;
-(void)onByPhonePwdBack;
-(void)onVoiceVerifyGetVerifyCode:(id)code;
-(void)onVoiceVerifyBack;
-(void)onWCBaseLogicDidStop:(unsigned long)onWCBaseLogic;
-(void)onSignUpWithQQ;
-(void)onSignUpWithEmail;
-(void)onFacebookConnect;
-(void)onPhoneVerifyNext:(id)next;
-(void)onPhoneVerifyAgain;
-(void)onPhoneVerifyVoice;
-(void)onPhoneVerifyBack;
-(void)onFillPhoneNext:(id)next phoneNumber:(id)number;
-(void)onFillPhoneBack;
-(void)onFillPhoneRegByEmail;
-(void)onFillPhoneLoginByQQ;
-(void)getVerifyCode;
-(BOOL)checkPhoneNumberStatus:(unsigned long)status;
-(BOOL)checkVerifyCode:(id)code;
-(BOOL)getVoideVerifyCodeReady:(id)ready;
-(BOOL)getVerifyCodeReady;
-(void)cancelAllEvent;
-(void)startLogic;
-(void)dealloc;
@end

@interface WCAccountAddSingleFriendCell : UITableViewCell {
	MFriendMobileInfo* m_mobileFriendInfo;
	UILabel* m_textLabel;
	UILabel* m_detailTextLabel;
	MMHeadImageView* m_headImageView;
	UIButton* m_addButton;
	InteractionLabel* m_cancelLabel;
	UIImageView* m_selectedView;
	BOOL m_selected;
}
@property(assign, nonatomic) BOOL m_selected;
@property(readonly, assign, nonatomic) MFriendMobileInfo* m_mobileFriendInfo;
@property(retain, nonatomic) InteractionLabel* m_cancelLabel;
@property(retain, nonatomic) UIButton* m_addButton;
-(void)updateMobileInfo:(id)info selected:(BOOL)selected;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)layoutSelectedStatus;
@end

@interface WCAccountAddAllFriendsCell : UITableViewCell {
	UILabel* m_textLabel;
	UILabel* m_detailTextLabel;
	UIButton* m_addAllButton;
	InteractionLabel* m_cancelAllLabel;
	BOOL m_selectedAll;
	unsigned long m_friendsCount;
}
@property(assign, nonatomic) unsigned long m_friendsCount;
@property(assign, nonatomic) BOOL m_selectedAll;
@property(retain, nonatomic) InteractionLabel* m_cancelAllLabel;
@property(retain, nonatomic) UIButton* m_addAllButton;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface WCAccountAddAllFriendsExtendCell : UITableViewCell {
	UILabel* m_textLabel;
	UILabel* m_detailTextLabel;
	UIButton* m_addAllButton;
}
@property(retain, nonatomic) UIButton* m_addAllButton;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)updateFriendsCount:(unsigned long)count;
@end

@interface WCAccountAddFriendAfterRegViewController : WCAccountBaseViewController <UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate> {
	MMDelegateProxy<WCAccountAddFriendAfterRegViewControllerDelegate>* m_delegate;
	NSArray* m_arrMFriendInfo;
	NSMutableArray* m_arrSelectedUserInfo;
	BOOL m_selectedAll;
	MMTableView* m_tableView;
}
@property(retain, nonatomic) NSArray* m_arrMFriendInfo;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onCancelAll:(id)all;
-(void)onCancelOne:(id)one;
-(void)onAddAll:(id)all;
-(void)onSelectAll:(id)all;
-(void)onSelectOne:(id)one;
-(void)setLastStep:(BOOL)step;
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(BOOL)isUserSelected:(id)selected;
-(void)onNextStep;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountBindPhoneControlLogic : WCBaseControlLogic <WCAccountFillPhoneViewControllerDelegate, WCAccountVoiceVerifyViewControllerDelegate, WCAccountPhoneVerifyViewControllerDelegate, WCAccountBindPhoneViewOKViewControllerDelegate, WCAccountFillPhoneFromAuthViewControllerDelegate, PBMessageObserverDelegate, LoginLogicDelegate, IDCHostMgrExt> {
	BOOL m_bAgreementMobileCanBeFound;
	BOOL m_bFromUpdate;
	WCAccountControlData* m_data;
	MMDelegateProxy<WCAccountBindPhoneControlLogicDelegate>* m_delegate;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)onHandleError:(id)error;
-(void)BindMobileAgain:(id)again;
-(void)onBindPhoneViewOKDone;
-(void)onVoiceVerifyGetVerifyCode:(id)code;
-(void)onVoiceVerifyBack;
-(void)onPhoneVerifyNext:(id)next;
-(void)onPhoneVerifyAgain;
-(void)onPhoneVerifyVoice;
-(void)onPhoneVerifyBack;
-(void)onFillPhoneBindAgreeMobileCanBeFound:(BOOL)found;
-(void)onFillPhoneNext:(id)next phoneNumber:(id)number;
-(void)onFillPhoneBack;
-(BOOL)checkVerifyCode:(id)code;
-(BOOL)getVoideVerifyCodeReady:(id)ready;
-(BOOL)getVerifyCodeReady;
-(id)getFullPhoneNum;
-(void)cancelAllEvent;
-(void)startLogic;
-(void)startlogic:(id)startlogic;
-(void)startlogicFromAuth:(id)auth;
-(void)dealloc;
-(void)stopLogic;
-(void)setScene:(unsigned long)scene;
-(id)initWithData:(id)data;
-(void)setDelegate:(id)delegate;
@end

@interface WCAccountEnableUploadButton : MMUIView {
	id m_target;
	SEL m_selAction;
	UIImageView* m_backgroundView;
}
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)becomeNormalBackgroundColor;
-(void)becomeHighlightedBackgroundColor;
-(void)setTarget:(id)target action:(SEL)action;
-(void)dealloc;
-(id)init;
-(void)initView;
@end

@interface WCAccountEnableUploadAddressbookViewController : WCAccountBaseViewController <IAddressBookMgrExt> {
	MMDelegateProxy<WCAccountEnableUploadAddressbookViewControllerDelegate>* m_delegate;
	UIView* m_enableButton;
	BOOL m_bCanSyncAddressBook;
	WCUIAlertView* m_reportAlert;
}
-(void)OnConfirmAddressBookStatus:(unsigned long)status;
-(void)onEnableButtonClicked;
-(void)showDeniedTip;
-(void)showEnableTip;
-(void)enableAddressBook;
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)onSkip;
-(void)dealloc;
@end

@interface MobileFriendInfo : NSObject {
	MFriendMobileInfo* m_mobileInfo;
	NSString* m_phoneNumber;
}
@property(retain, nonatomic) NSString* m_phoneNumber;
@property(retain, nonatomic) MFriendMobileInfo* m_mobileInfo;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountInviteSingleFriendCell : UITableViewCell {
	MobileFriendInfo* m_mobileFriendInfo;
	UILabel* m_textLabel;
	UILabel* m_detailTextLabel;
	UIButton* m_inviteButton;
	InteractionLabel* m_cancelLabel;
	UIImageView* m_selectedView;
	BOOL m_selected;
	PhoneNumberFormatLogic* m_phoneNumFormatter;
	CountryCodeWrap* m_curCountryCode;
}
@property(retain, nonatomic) CountryCodeWrap* m_curCountryCode;
@property(retain, nonatomic) PhoneNumberFormatLogic* m_phoneNumFormatter;
@property(assign, nonatomic) BOOL m_selected;
@property(readonly, assign, nonatomic) MobileFriendInfo* m_mobileFriendInfo;
@property(retain, nonatomic) InteractionLabel* m_cancelLabel;
@property(retain, nonatomic) UIButton* m_inviteButton;
-(void)updateMobileInfo:(id)info selected:(BOOL)selected;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)layoutSelectedStatus;
@end

@interface WCAccountInviteAllFriendsCell : UITableViewCell {
	UILabel* m_textLabel;
	UILabel* m_detailTextLabel;
	UIButton* m_inviteAllButton;
	InteractionLabel* m_cancelAllLabel;
	BOOL m_selectedAll;
	unsigned long m_friendsCount;
}
@property(assign, nonatomic) unsigned long m_friendsCount;
@property(assign, nonatomic) BOOL m_selectedAll;
@property(retain, nonatomic) InteractionLabel* m_cancelAllLabel;
@property(retain, nonatomic) UIButton* m_inviteAllButton;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface WCAccountInviteAllFriendsExtendCell : UITableViewCell {
	UILabel* m_textLabel;
	UILabel* m_detailTextLabel;
	UIButton* m_inviteAllButton;
}
@property(retain, nonatomic) UIButton* m_inviteAllButton;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)updateFriendsCount:(unsigned long)count;
@end

@interface WCAccountInviteFriendAfterRegViewController : WCAccountBaseViewController <UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate> {
	MMDelegateProxy<WCAccountInviteFriendAfterRegViewControllerDelegate>* m_delegate;
	NSArray* m_arrMobileFriendInfo;
	NSMutableArray* m_arrSelectedMobileInfo;
	BOOL m_selectedAll;
	MMTableView* m_tableView;
	PhoneNumberFormatLogic* m_phoneNumFormatter;
	CountryCodeWrap* m_curCountryCode;
}
@property(retain, nonatomic) NSArray* m_arrMobileFriendInfo;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onCancelAll:(id)all;
-(void)onCancelOne:(id)one;
-(void)onInviteAll:(id)all;
-(void)doInviteAll;
-(void)onSelectAll:(id)all;
-(void)onSelectOne:(id)one;
-(void)setLastStep:(BOOL)step;
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)onNextStep;
-(void)onInviteFriendAfterRegNext;
-(void)dealloc;
-(id)init;
@end

@interface WebviewAskAuthorizationLogic : MMObject <PBMessageObserverDelegate, UIAlertViewDelegate> {
	WebviewAuthorizationCache* _authCache;
	NSMutableArray* _needCheckQueue;
	WebviewAuthorizationInfo* _willSetScopeInfo;
	NSMutableArray* _willSetScopeList;
	NSString* _alertTitle;
	BOOL _isQueueHandling;
}
-(id)getScopeListStrFromArray:(id)array;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(unsigned long)structCGI:(id)cgi withType:(unsigned long)type withUserData:(id)userData;
-(void)onSetScopeReq:(id)req scopeResp:(id)resp;
-(void)setScopeAuthInfo:(id)info scopeInfoList:(id)list;
-(void)onCheckScopeReq:(id)req scopeResp:(id)resp authInfo:(id)info;
-(void)checkScopeAuthInfo;
-(void)askUserAuthInfo:(id)info;
-(void)askSvrAuthInfo:(id)info;
-(void)askAuthInfo:(id)info;
-(void)updateScopeInfoList:(id)list;
-(id)init;
-(void)dealloc;
@end

@interface WCAccountVoiceVerifyViewController : WCAccountBaseViewController <VoiceVerifyLanguageDelegate> {
	NSString* m_nsLanguageName;
	NSString* m_nsLanguageCode;
	MMDelegateProxy<WCAccountVoiceVerifyViewControllerDelegate>* m_delegate;
}
-(void)onSelectLanguage:(id)language Code:(id)code;
-(void)onGetVerifyCode;
-(void)initFooterView;
-(void)initHeaderView;
-(void)initLanguage;
-(void)onChangeLang;
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)makeCell:(id)cell;
-(void)initTableView;
-(void)initNavigationBar;
-(void)dealloc;
-(id)init;
@end

@interface FavDebugXMLViewController : MMUIViewController <ILinkEventExt> {
	UIScrollView* m_scrollView;
	FavoritesItem* m_favItem;
	UILabel* m_syncLabel;
	UILabel* m_favIdLabel;
	RichTextView* m_textLabel;
	NSString* m_copyedText;
}
-(void)showMenuItemForText:(id)text withRect:(CGRect)rect;
-(void)onCopy:(id)copy;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)onTextLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)initTextLabel;
-(void)initSyncLabel;
-(void)initFavIdLabel;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithFavItem:(id)favItem;
@end

@interface WCOfflinePayBaseViewController : WCBizBaseViewController <MMTableViewInfoDelegate, WCBaseInfoItemDelegate, UIAlertViewDelegate> {
	WCOfflinePayControlData* m_data;
}
-(void)refreshViewWithData:(id)data;
-(void)initWithData:(id)data;
-(void)dealloc;
-(void)viewDidLoad;
@end

@interface CgiData : NSObject <NSCoding> {
	BOOL m_isDebugMode;
	BOOL m_isRecordMode;
	int m_returnMode;
	NSString* m_cgiName;
	unsigned long m_cgiNumber;
	int m_errorCode;
	PBGeneratedMessage* m_pbResponse;
}
@property(retain, nonatomic) PBGeneratedMessage* pbResponse;
@property(assign, nonatomic) int errorCode;
@property(assign, nonatomic) unsigned long cgiNumber;
@property(retain, nonatomic) NSString* cgiName;
@property(assign, nonatomic) int returnMode;
@property(assign, nonatomic) BOOL isRecordMode;
@property(assign, nonatomic) BOOL isDebugMode;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface CgiDataManager : MMService <MMService> {
	NSMutableArray* m_dataArray;
	NSRecursiveLock* m_lock;
}
-(id)cgiDataWithCgiNumber:(unsigned long)cgiNumber;
-(void)replaceCgiDataAtCgiNumber:(unsigned long)cgiNumber withCgiData:(id)cgiData;
-(void)removeAll;
-(void)removeCgiDataAtCgiNumber:(unsigned long)cgiNumber;
-(void)addCgiData:(id)data;
-(id)cgiDatas;
-(id)pbResponseWithCgiNumber:(unsigned long)cgiNumber;
-(BOOL)isRecordWithCgiNumber:(unsigned long)cgiNumber;
-(int)errorCodeWithCgiNumber:(unsigned long)cgiNumber;
-(int)typeWithCgiNumber:(unsigned long)cgiNumber;
-(id)responseClass:(unsigned long)aClass;
-(id)responseName:(unsigned long)name;
-(void)saveData;
-(void)readData;
-(void)dealloc;
-(id)init;
-(id)cgiResponseForShakeGetResponse:(id)shakeGetResponse;
-(id)cgiResponseForShakeReportResponse:(id)shakeReportResponse;
@end

@interface CgiErrorCodeViewController : MMUIViewController <UITextFieldDelegate> {
	UITextField* m_textField;
	MMDelegateProxy<CgiErrorCodeDelegate>* m_delegate;
}
@property(retain, nonatomic) MMDelegateProxy<CgiErrorCodeDelegate>* delegate;
-(void)willDisappear;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)dealloc;
-(id)initWithErrorCode:(int)errorCode;
@end

@interface CgiInterfaceViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, MMSearchBarDelegate> {
	NSMutableArray* m_cgiNames;
	unsigned long m_cgiNumbers[1000];
	MMSearchBar* m_searchBar;
	MMTableView* m_tableView;
	MMDelegateProxy<CgiInterfaceDelegate>* m_delegate;
}
@property(retain, nonatomic) MMDelegateProxy<CgiInterfaceDelegate>* delegate;
-(void)resetCgiNames;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(void)dealloc;
-(void)viewDidLoad;
@end

@interface ScanQRCodeLogicController : BaseScanLogicController <NewQRCodeScannerDelegate, UIImagePickerControllerDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, UIAlertViewDelegate, GetA8KeyLogicDelegate, ScanBarcodeExt> {
	NewQRCodeScanner* _scanner;
	bool _hasCamera;
	GetA8KeyLogic* _logic;
	NSString* _desc;
	NSString* _loadingText;
	NSString* _alertText;
}
@property(retain, nonatomic) NSString* desc;
-(void)onSearchContactHandleEnd;
-(void)onSearchContactEnd;
-(void)onSearchContactStart;
-(void)onGetA8KeyEnd;
-(void)onGetA8KeyStart;
-(void)OnSendBarcode:(id)barcode Err:(int)err;
-(void)onGotBarcode:(id)barcode Type:(id)type;
-(void)NewQRCodeScanner:(id)scanner didScanResult:(id)result;
-(BOOL)shouldDoAnimationWhenDismiss;
-(void)scanOnePicture:(id)picture;
-(void)startLoadingCheck;
-(void)startLoadingSearch;
-(id)getIntroDesctiption;
-(id)getIntroTitle;
-(float)getIntroButtonTopPadding;
-(id)getIntroButtonTitle;
-(BOOL)shouldShowIntroButton;
-(float)getPreviewScale;
-(id)getAlertText;
-(id)getLoadingText;
-(id)getInfoText;
-(CGRect)getDrawCropRect;
-(void)stopScan;
-(void)startScan;
-(void)dealloc;
-(id)initWithViewController:(id)viewController;
@end

@interface CameraScannerView : MMUIView <AVCaptureVideoDataOutputSampleBufferDelegate> {
	AVCaptureSession* _captureSession;
	AVCaptureVideoPreviewLayer* _prevLayer;
	id<CameraScannerViewDelegate> _delegate;
	BOOL _hasInit;
	BOOL _hasCaptureOutput;
	NSRecursiveLock* _oLock;
	AVCaptureDeviceInput* _captureInput;
	AVCaptureVideoDataOutput* _captureOutput;
}
@property(assign) BOOL hasCaptureOutput;
@property(readonly, assign, nonatomic) BOOL hasInit;
@property(assign, nonatomic) id<CameraScannerViewDelegate> delegate;
@property(readonly, assign, nonatomic) AVCaptureVideoPreviewLayer* prevLayer;
@property(readonly, assign, nonatomic) AVCaptureSession* captureSession;
+(void)releaseInstance;
+(id)sharedInstance;
-(void)continuousExposureAtPoint:(CGPoint)point;
-(void)continuousFocusAtPoint:(CGPoint)point;
-(CGPoint)pointToCaptureDevice:(CGPoint)captureDevice;
-(void)stop;
-(void)start;
-(void)setPreviewScale:(float)scale;
-(void)onCaptureTimeout;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)initCaptureWithPreviewScale:(float)previewScale;
-(void)dealloc;
-(id)init;
@end

@interface AppMessageDebugXMLViewController : MMUIViewController {
	UIScrollView* m_scrollView;
	RichTextView* m_textLabel;
	CMessageWrap* m_oMessageWrap;
}
-(void)initTextLabel;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMessageWrap:(id)messageWrap;
@end

@interface SonicView : UIView {
	NSMutableArray* _headImageList;
	NSMutableArray* _firstPageRandomArray;
}
-(void)onVerifyOk:(id)ok;
-(void)onGetMsg:(id)msg PushContact:(id)contact;
-(void)addHeadImageList:(id)list;
-(void)fadeinItems:(id)items;
-(void)popupView:(id)view;
-(int)getRandomNumber;
-(CGRect)get3ItemsPerRowImageRectByRow:(int)row andCol:(int)col;
-(void)dealloc;
-(id)init;
@end

@interface iAPUnVerifyTransaction : NSObject <PBCoding> {
	NSString* nsProductIdentifier;
	NSData* dtReceipt;
	unsigned long uiTransactionDate;
}
@property(assign, nonatomic) unsigned long uiTransactionDate;
@property(retain, nonatomic) NSData* dtReceipt;
@property(retain, nonatomic) NSString* nsProductIdentifier;
+(void)initialize;
+(void)_initPBTableOfiAPUnVerifyTransaction;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface iAPCache : NSObject <PBCoding> {
	NSMutableDictionary* dicProductToPrepare;
	NSMutableDictionary* dicBillNos;
	NSMutableDictionary* dicProductPrice;
	NSMutableDictionary* dicProductLocale;
	NSMutableDictionary* dicUnVerifyReceipt;
}
@property(retain, nonatomic) NSMutableDictionary* dicUnVerifyReceipt;
@property(retain, nonatomic) NSMutableDictionary* dicProductLocale;
@property(retain, nonatomic) NSMutableDictionary* dicProductPrice;
@property(retain, nonatomic) NSMutableDictionary* dicBillNos;
+(void)initialize;
+(void)_initPBTableOfiAPCache;
-(void)removeUnverifyTransactionForProductID:(id)productID;
-(void)addUnverifyTransaction:(id)transaction;
-(id)UnVerifyTransactionForProductID:(id)productID;
-(id)localeForProductID:(id)productID;
-(id)priceForProductID:(id)productID;
-(id)productForProductID:(id)productID;
-(void)addProduct:(id)product;
-(void)initUnVerifyTransaction;
-(void)initProductDictionary;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface FavForwardLogicController : MMObject <SessionSelectControllerDelegate, UIAlertViewDelegate> {
	CMessageWrap* m_messageWrap;
	CContact* m_toContact;
	NSData* m_fileData;
	CaptureVideoInfo* m_videoInfo;
	WCUploadTask* m_wcUploadTask;
	UIViewController* m_currentViewController;
	MMLoadingView* m_loadingView;
}
-(void)forwardWCUploadItem:(id)item From:(id)from;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)showTips;
-(void)forwardMessage;
-(void)forwardVideoMessage:(id)message From:(id)from;
-(void)forwardFileMessage:(id)message FileData:(id)data From:(id)from;
-(void)forwardMessage:(id)message From:(id)from;
-(void)dealloc;
-(id)init;
@end

@interface NewBindOpMobileEventHandler : ProtobufEventHandler {
}
-(void)OnProtocolReturn:(id)aReturn shouldContinue:(bool*)aContinue;
-(void)ProcessOnMainThread:(id)thread;
@end

@interface WCBaseKeyboardToolBar : NSObject <UIGestureRecognizerDelegate, MMTableViewInfoDelegate> {
	UIBarButtonItem* m_PreviousButtonItem;
	UIBarButtonItem* m_NextButtonItem;
	UIBarButtonItem* m_SpaceButtonItem;
	UIBarButtonItem* m_FinishButtonItem;
	UIToolbar* m_toolBar;
	UIScrollView* m_scrollView;
	CGRect m_scrollNormalRect;
	CGSize m_scrollNormalContentSize;
	CGRect m_keyboardRect;
	NSMutableArray* m_arrItem;
	int m_uiCurrentItemIndex;
	UIView* keyboard;
	int m_originalKeyboardY;
	BOOL m_bLockOffset;
	BOOL m_bTouchHide;
}
-(id).cxx_construct;
-(void)animateKeyboardReturnToOriginalPosition;
-(void)animateKeyboardOffscreen;
-(void)panGesture:(id)gesture;
-(void)initPanGestureRecognizer;
-(void)touchesBegan_TableView:(id)view withEvent:(id)event;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)done;
-(void)OnNextItem;
-(void)OnPreviousItem;
-(void)UpdateBarButtonItem;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)positionWhenBecameFirstResponder:(id)responder withAnimated:(BOOL)animated;
-(void)sizeWhenBecameFirstResponder;
-(void)changeKeyBoardSize:(id)size;
-(void)initNotification;
-(void)initBtnItem;
-(BOOL)setCurrentActiveItem:(id)item;
-(BOOL)findCurrentActiveItem;
-(void)setScrollViewSize:(CGSize)size;
-(void)setScrollView:(id)view;
-(void)addItem:(id)item;
-(void)removeAllItem;
-(id)getView;
-(void)initToolBar;
-(void)dealloc;
-(void)setReturnBtnTitle:(id)title;
-(void)setNavigateBtnHidden:(BOOL)hidden;
-(void)setTouchHide:(BOOL)hide;
-(id)init;
@end

@interface TakeOrSelectHeadImageLogic : MMObject <UIActionSheetDelegate, MMImagePickerManagerDelegate> {
	UIViewController* m_viewController;
	MMDelegateProxy<TakeOrSelectHeadImageLogicDelegate>* m_delegate;
}
-(void)dealloc;
-(id)initWithViewController:(id)viewController delegate:(id)delegate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showGetHeadImage;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)showImagePikcer:(int)pikcer;
-(id)getNavigationController;
-(id)getViewController;
@end

@interface WCTextDetailViewController : MMUIViewController <ILinkEventExt, WXGestureDelegate> {
	WCDataItem* _dataItem;
	NSString* _copyedText;
	RichTextView* _contentDescView;
	WXGesture* _gesture;
}
-(void)gestureWillEndTransition:(id)gesture isCanceld:(BOOL)canceld;
-(void)onTextLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onPhoneLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)onLinkLongPressed:(id)pressed withRect:(CGRect)rect;
-(void)showMenuItemForText:(id)text withRect:(CGRect)rect isWord:(BOOL)word;
-(void)onExpose:(id)expose;
-(void)onFavAdd:(id)add;
-(void)onCopy:(id)copy;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)initGestureRecognizer;
-(void)didAppear;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithDataItem:(id)dataItem;
-(void)onMenuControllerWillHide:(id)onMenuController;
@end

@interface CContactDB : NSObject {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSString* m_nsDocPath;
}
-(BOOL)SetFriendMetaFlag:(unsigned long)flag ForUser:(id)user;
-(unsigned long)GetFriendMetaFlag:(id)flag;
-(BOOL)SetLastUpdateTime:(unsigned long)time ForUser:(id)user;
-(unsigned long)GetLastUpdateTimeOfUser:(id)user;
-(BOOL)updateContact:(id)contact;
-(BOOL)ModifyNotifyStatus:(id)status withStatus:(unsigned long)status2;
-(BOOL)updateContact:(id)contact andImage:(BOOL)image;
-(BOOL)deleteContact:(id)contact;
-(BOOL)addContact:(id)contact;
-(BOOL)getAllContactNoExtInfoList:(id)list listType:(unsigned long)type;
-(BOOL)getAllContactList:(id)list listType:(unsigned long)type;
-(void)getFriendAndExtTableValue:(id)value dbResult:(id)result uiRow:(unsigned)row arrCol:(id)col;
-(void)initResultColName:(id)name;
-(BOOL)loadContactExtInfo:(id)info;
-(id)getContact:(id)contact;
-(id)GetDBLock;
-(void)initDB:(id)db lock:(id)lock;
-(BOOL)updateContactKeyExtInfo:(id)info;
-(BOOL)modifyFriendExtTable:(id)table;
-(BOOL)modifyFriendTable:(id)table;
-(BOOL)addFriendExtTable:(id)table;
-(BOOL)addFriendTable:(id)table;
-(BOOL)isFriendExtTableExist:(id)exist;
-(BOOL)isFriendTableExist:(id)exist;
-(void)getFriendExtTableValue:(id)value dicInfo:(id)info;
-(void)getFriendTableValue:(id)value dicInfo:(id)info;
-(void)saveUserImage:(id)image;
-(BOOL)RollBackTransation;
-(BOOL)CommitTransation;
-(BOOL)BeginTransation;
-(void)dealloc;
-(id)init;
@end

@interface CContactExtendCode : NSObject {
}
+(void)decodeKeyContactFieldPurePB:(char*)pb size:(unsigned long)size contact:(id)contact;
+(void)decodeKeyContactField:(XmlReaderNode_t*)field contact:(id)contact;
+(void)codeKeyContactFieldPB:(CFastStr*)pb contact:(id)contact;
+(void)codeKeyContactField:(CFastStr*)field contact:(id)contact;
+(void)decodeContactField:(XmlReaderNode_t*)field contact:(id)contact;
+(void)codeContactField:(CFastStr*)field contact:(id)contact;
+(BOOL)decodeKeyExtentField:(id)field contact:(id)contact;
+(id)codeKeyExtentField:(id)field;
+(BOOL)decodeExtentField_New:(id)aNew contact:(id)contact;
+(BOOL)decodeExtentField:(id)field contact:(id)contact;
+(id)codeExtentField:(id)field;
+(id)decodeToBrandInfoFromXml:(id)xml;
+(id)decodeToBrandInfoFromXmlNode:(XmlReaderNode_t*)xmlNode;
+(id)decodeToBrandInfo:(XmlReaderNode_t*)brandInfo key:(const char*)key;
+(unsigned long)decodeToInteger:(XmlReaderNode_t*)integer attribute:(const char*)attribute;
+(unsigned long)decodeToInteger:(XmlReaderNode_t*)integer key:(const char*)key;
+(id)decodeToString:(XmlReaderNode_t*)string key:(const char*)key;
+(BOOL)code:(CFastStr*)code key:(const char*)key BrandList:(id)list;
+(id)encodeToXmlFromBrandInfo:(id)brandInfo;
+(BOOL)code:(CFastStr*)code key:(const char*)key integer:(unsigned long)integer;
+(BOOL)code:(CFastStr*)code key:(const char*)key string:(id)string;
@end

@interface CQQContactDB : NSObject {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSString* m_nsDocPath;
}
-(BOOL)updateContact:(id)contact;
-(BOOL)deleteContact:(id)contact;
-(BOOL)addContact:(id)contact;
-(BOOL)getAllContactList:(id)list;
-(id)getContact:(id)contact;
-(void)initDB:(id)db lock:(id)lock;
-(id)convertQQContactToDictionary:(id)dictionary;
-(void)getQQContactValue:(id)value dicInfo:(id)info;
-(unsigned long)getQQContactInteger:(id)integer key:(id)key;
-(void)initQueryArray:(id)array;
-(void)saveUserImage:(id)image;
-(void)dealloc;
-(id)init;
@end

@interface ImageEffect : NSObject {
}
+(id)convolveImage:(id)image withBlurRadius:(int)blurRadius;
+(char*)bitmapFromImage:(id)image;
+(id)imageWithBits:(char*)bits withSize:(CGSize)size;
+(id)blurView:(id)view;
@end

@interface EmoticonStoreLoadFailedView : MMUIView {
}
-(id)initWithFrame:(CGRect)frame;
@end

@interface EmoticonStoreLoadNoDataView : MMUIView {
}
-(id)initWithFrame:(CGRect)frame;
@end

@interface ContactExtendCodePB : NSObject <PBCoding> {
	NSString* remark;
	NSString* remarkPYFull;
	unsigned long conType;
	unsigned long certificationFlag;
}
@property(assign, nonatomic) unsigned long certificationFlag;
@property(assign, nonatomic) unsigned long conType;
@property(retain, nonatomic) NSString* remarkPYFull;
@property(retain, nonatomic) NSString* remark;
+(void)initialize;
+(void)_initPBTableOfContactExtendCodePB;
-(bool)decodeFromData:(id)data;
-(id)encodeData;
-(void)dealloc;
-(id)initWithContact:(id)contact;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface FavAudioPlayer : MMObject <AMRAudioPlayerDelegate, SPXAudioPlayerDelegate> {
	AMRAudioPlayer* m_amrplayer;
	SPXAudioPlayer* m_spxplayer;
	unsigned long uiPlayingID;
	MMDelegateProxy<FavAudioPlayerDelegate>* m_delegate;
}
@property(retain, nonatomic) SPXAudioPlayer* m_spxplayer;
@property(retain, nonatomic) AMRAudioPlayer* m_amrplayer;
@property(assign, nonatomic) MMDelegateProxy<FavAudioPlayerDelegate>* m_delegate;
+(void)freeFavAudioPlayer;
+(id)getFavAudioPlayer;
-(BOOL)isPlaying;
-(BOOL)ReStartPlay;
-(BOOL)PausePlay;
-(BOOL)StopPlay;
-(BOOL)StartPlayWithAutoMode:(unsigned long)autoMode AudioFormat:(unsigned long)format Path:(id)path;
-(BOOL)StartPlayWithEarpieceMode:(unsigned long)earpieceMode AudioFormat:(unsigned long)format Path:(id)path;
-(BOOL)StartPlay:(unsigned long)play AudioFormat:(unsigned long)format Path:(id)path;
-(BOOL)StartPlay:(unsigned long)play AudioFormat:(unsigned long)format Path:(id)path forceEarpieceMode:(BOOL)mode forceAutoMode:(BOOL)mode5;
-(void)dealloc;
-(id)init;
-(void)OnAMREarTip;
-(void)OnAMREndPlaying:(id)playing isForceStop:(BOOL)stop;
-(void)OnAMRBeginPlaying:(id)playing ErrNo:(int)no;
-(void)OnSPXEarTip;
-(void)OnSPXEndPlaying:(id)playing isForceStop:(BOOL)stop;
-(void)OnSPXBeginPlaying:(id)playing ErrNo:(int)no;
@end

@interface FavAudioRecorder : NSObject {
	AMRAudioRecorder* m_amrRecorder;
	SPXAudioRecorder* m_spxRecorder;
	unsigned long m_audioFormat;
	NSString* m_filePath;
}
@property(retain, nonatomic) NSString* m_filePath;
-(BOOL)OnPrepareSendSPX:(id)spx;
-(void)OnSPXPart:(id)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnSPXEndRecording:(id)recording;
-(void)OnSPXBeginRecording:(id)recording ErrNo:(int)no;
-(void)OnSPXLevelMeter:(id)meter Peak:(float)peak;
-(void)OnAMRPart:(id)part Offset:(unsigned long)offset Len:(unsigned long)len EndFlag:(unsigned long)flag ForceDelete:(BOOL)aDelete;
-(void)OnAMREndRecording:(id)recording;
-(void)OnAMRBeginRecording:(id)recording ErrNo:(int)no;
-(void)OnAMRLevelMeter:(id)meter Peak:(float)peak;
-(id)getTmpAudioFileName:(unsigned long)name;
-(unsigned long)startSpxRecorder;
-(unsigned long)StartAmrRecorder;
-(unsigned long)StartRecord:(unsigned long)record;
-(void)stop;
-(BOOL)StopRecord;
-(void)dealloc;
-(id)init;
@end

@interface FavImageDataManager : MMService <MMService> {
}
-(id)getTempFilePath;
-(void)DeleteImageFromFile:(id)file;
-(id)UIImageDataWriteToFile:(id)file;
-(id)UIImageWriteToFile:(id)file;
@end

@interface WCPayPayCardAvailableListViewController : WCPayBaseViewController {
	UIButton* m_footerButton;
	WCPayBindCardInfo* selectedPayCardInfo;
	NSMutableArray* m_cellInfoArray;
	MMDelegateProxy<WCPayPayCardAvailableListViewControllerDelegate>* m_delegate;
}
-(void)onNext;
-(void)OnSelectCard:(id)card;
-(void)setDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)reloadCardListView;
-(id)GetBeingOrderDetailDescrible;
-(void)initFooterView;
-(void)initNavigationBar;
-(id)checkBankAvailable:(id)available;
-(BOOL)isOrderAvailableCardBankType:(id)type;
-(void)dealloc;
-(id)init;
@end

@interface MMGroupView : UIView {
	NSMutableArray* _arrGroupViews;
	unsigned long _groupViewDirection;
}
@property(retain, nonatomic) NSMutableArray* arrGroupViews;
@property(assign, nonatomic) unsigned long groupViewDirection;
-(void)layoutSubviews;
-(void)addConstraints;
-(void)dealloc;
-(id)init;
@end

@interface WCFindFriendLogic : MMObject <PBMessageObserverDelegate> {
	MMDelegateProxy<WCFindFriendLogicDelegate>* _delegate;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)handleRespForSendSms:(id)sendSms;
-(void)handleRespForVerifyUser:(id)verifyUser;
-(void)handleRespForListMFriend:(id)listMFriend;
-(BOOL)sendSmsToMFriendList:(id)mfriendList arrMobile:(id)mobile;
-(BOOL)addMFriendList:(id)list;
-(BOOL)checkMFriendList:(id)list arrMobile:(id)mobile arrEmail:(id)email;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface FavAudioView : UIView {
	UIView* _recordLeftView;
	UIImageView* _recordImageView;
	UIImageView* _recordSignalView;
	UIButton* _recordGarbageView;
	UIImageView* _recordWarningView;
	UIImageView* _recordBkgView;
	UILabel* _warningMessageLabel;
}
@property(retain, nonatomic) UILabel* warningMessageLabel;
@property(retain, nonatomic) UIImageView* recordBkgView;
@property(retain, nonatomic) UIImageView* recordWarningView;
@property(retain, nonatomic) UIButton* recordGarbageView;
@property(retain, nonatomic) UIImageView* recordSignalView;
@property(retain, nonatomic) UIImageView* recordImageView;
-(void)ShowTooLongTips;
-(void)ShowTooShortTips;
-(void)showCancelTip;
-(void)SetPeakPower:(float)power;
-(void)showRecoding;
-(void)showStyleIdle;
-(void)dealloc;
-(id)init;
@end

@interface RSHeadImageView : MMUIView {
	int _status;
	UILabel* _displayNameWhite;
	UIImageView* _normalBg;
	UIImageView* _statusBGView;
	UIImageView* _statusView;
	MMHeadImageView* _imageView;
	RadarSearchMember* _member;
	NSString* _verifyTicket;
	MMDelegateProxy<RSHeadImageViewDelegate>* _delegate;
	NSString* m_nsDisplayName;
}
@property(retain, nonatomic) NSString* m_nsDisplayName;
@property(retain, nonatomic) NSString* verifyTicket;
@property(assign, nonatomic) int status;
@property(retain, nonatomic) RadarSearchMember* member;
@property(retain, nonatomic) MMHeadImageView* imageView;
@property(assign, nonatomic) MMDelegateProxy<RSHeadImageViewDelegate>* delegate;
+(CGSize)getHeadImageSize;
-(void)OnClickHeadImageView;
-(void)initDisplayNameView;
-(id)genDisplayNameLabel;
-(void)initStatusView;
-(void)animationShowDidStop;
-(void)showStatusView;
-(void)hideStatusView;
-(void)afterStatusViewHide;
-(void)doStatusPopupAnimation;
-(void)updateStatusView;
-(void)initHeadImageView;
-(void)initBackgroundView;
-(void)initView;
-(void)dealloc;
-(id)initWithRadarSearchMember:(id)radarSearchMember;
@end

@interface RSVerifyAnimationView : MMUIScrollView <UIScrollViewDelegate> {
	RSAnimationHeadImgView* _headImage;
	CGPoint _originPoint;
	CGSize _originSize;
	MMDelegateProxy<RSVerifyAnimationViewDelegate>* _rsDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<RSVerifyAnimationViewDelegate>* rsDelegate;
@property(retain, nonatomic) RSAnimationHeadImgView* headImage;
-(id).cxx_construct;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)onZoomOutFinish;
-(void)onZoomInFinish;
-(void)doZoomOutAnimation;
-(void)startAnimationWithRadarSearchMember:(id)radarSearchMember remarkName:(id)name OriginPoint:(CGPoint)point;
-(void)doZoomOut:(float)anOut animated:(BOOL)animated;
-(void)doZoomIn:(float)anIn animated:(BOOL)animated;
-(void)dealloc;
-(id)init;
@end

@interface RSVerifyView : MMUIImageView <RSVerifyAnimationViewDelegate> {
	MMHeadImageView* _imageView;
	UIImageView* _headBGView;
	UILabel* _displayName;
	RSVerifyAnimationView* _animationView;
	UIButton* _statusFrame;
	UILabel* _helloLabel;
	UIButton* _addFriendBtn;
	UIButton* _exposeBtn;
	RSHeadImageView* _headImage;
	MMDelegateProxy<RSVerifyViewDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<RSVerifyViewDelegate>* delegate;
-(void)onAnimationFinish:(BOOL)finish;
-(void)onExpose;
-(void)onAddFriend;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)hideSelf;
-(void)startAnimationWithUsername:(id)username OriginPoint:(CGPoint)point;
-(void)doShowAddFriendButtonAnimation;
-(void)doShowStatusFrameAnimation;
-(void)initView;
-(void)initAnimationView;
-(void)initBackgroundView;
-(void)initExposeButton;
-(void)initAddFriendButton;
-(void)initHelloLabel;
-(void)initStatusFrame;
-(void)initDisplayNameLabel;
-(void)initHeadView;
-(void)dealloc;
-(id)init;
@end

@interface EmoticonStoreFootView : MMRefreshTableFooterView {
	UIActivityIndicatorView* m_activityIndicatorView;
	UILabel* m_label;
	unsigned long m_lineViewWidth;
}
@property(assign, nonatomic) unsigned long m_lineViewWidth;
@property(retain, nonatomic) UILabel* m_label;
@property(retain, nonatomic) UIActivityIndicatorView* m_activityIndicatorView;
-(void)onStateOfNoData:(id)noData;
-(void)onStateOfNoMoreData:(id)noMoreData;
-(void)onStateOfLoading;
-(void)onStateOfNormal;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface UploadMContactMsg : NSObject {
	NSString* deviceType;
}
@property(retain, nonatomic) NSString* deviceType;
-(void)parseXML:(id)xml;
-(void)dealloc;
-(id)initWithXml:(id)xml;
@end

@interface WCUITextField : UITextField {
	BOOL m_bRestrictShareMenu;
	float m_fPlaceholderFontSize;
}
@property(assign, nonatomic) float m_fPlaceholderFontSize;
@property(assign, nonatomic) BOOL m_bRestrictShareMenu;
-(void)drawPlaceholderInRect:(CGRect)rect;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(id)init;
@end

@interface CameraConfig : NSObject {
}
+(BOOL)tryShowAccessCameraAlert;
+(BOOL)canAccessCamera;
+(BOOL)isBlackCameraSize480x640;
+(BOOL)isBlackCameraSize720x1280;
+(CGSize)getBlackCameraSizeByPreset:(id)preset;
+(id)getBlackCameraPreset;
@end

@interface CEmoticonWrap : NSObject {
	unsigned long m_uiType;
	NSString* m_nsMD5;
	BOOL m_bCanDelete;
	unsigned long m_uiGameType;
	NSString* m_nsAppID;
	NSMutableDictionary* m_extInfo;
	NSString* m_nsThumbImgPath;
	NSString* m_packageId;
	unsigned long m_lastUsedTime;
}
@property(assign, nonatomic) unsigned long m_lastUsedTime;
@property(retain, nonatomic) NSString* m_packageId;
@property(retain, nonatomic) NSString* m_nsThumbImgPath;
@property(retain, nonatomic) NSMutableDictionary* m_extInfo;
@property(retain, nonatomic) NSString* m_nsAppID;
@property(assign, nonatomic) unsigned long m_uiGameType;
@property(assign, nonatomic) BOOL m_bCanDelete;
@property(retain, nonatomic) NSString* m_nsMD5;
@property(assign, nonatomic) unsigned long m_uiType;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CEmojiWrap : NSObject {
	NSString* m_nsEmoji;
	NSString* m_nsDesc;
	unsigned long m_uiCataLogLocalID;
	BOOL m_bCanDelete;
}
@property(assign, nonatomic) BOOL m_bCanDelete;
@property(assign, nonatomic) unsigned long m_uiCataLogLocalID;
@property(retain, nonatomic) NSString* m_nsDesc;
@property(retain, nonatomic) NSString* m_nsEmoji;
-(void)ChangeForDisplay;
-(void)dealloc;
-(id)init;
@end

@interface CEmojiCataLogWrap : NSObject {
	NSString* m_nsDisplay;
	NSString* m_nsCataLog;
	unsigned long m_uiLocalID;
	unsigned long m_uiSvrID;
	unsigned long m_uiVersion;
	unsigned long m_uiStatus;
}
@property(assign, nonatomic) unsigned long m_uiStatus;
@property(assign, nonatomic) unsigned long m_uiVersion;
@property(assign, nonatomic) unsigned long m_uiSvrID;
@property(assign, nonatomic) unsigned long m_uiLocalID;
@property(retain, nonatomic) NSString* m_nsCataLog;
@property(retain, nonatomic) NSString* m_nsDisplay;
-(void)ChangeForDisplay;
-(void)dealloc;
-(id)init;
@end

@interface CEmoticonMgr : MMService <IMMLanguageMgrExt, MMService, MMPackageDownloadMgrExt, MMResPackageMgrExt, EmoticonDescMgrExt> {
	CEmoticonDB* m_oEmoticonDB;
	NSRecursiveLock* m_oLock;
	unsigned long m_uiLastUpdateTime;
	NSMutableArray* m_needRemoveEmoticons;
	NSMutableDictionary* m_emoticonDescCache;
	NSMutableDictionary* m_emoticonPackageClickFlagCache;
	NSMutableDictionary* m_emoticonPackageHasDesc;
}
@property(retain, nonatomic) NSMutableDictionary* m_emoticonPackageHasDesc;
@property(retain, nonatomic) NSMutableDictionary* m_emoticonPackageClickFlagCache;
@property(retain, nonatomic) NSMutableArray* m_needRemoveEmoticons;
@property(retain, nonatomic) NSMutableDictionary* m_emoticonDescCache;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
+(BOOL)isTusijiEmoticonMD5:(id)a5;
+(id)getEmoticonImageByMD5:(id)a5;
+(void)RenameEmoticon;
-(id)getRecentUsedEmoticonList:(unsigned long)list;
-(BOOL)updateEmoticon:(id)emoticon packageId:(id)anId;
-(id)getCustomEmoticonList;
-(BOOL)updateEmoticon:(id)emoticon usedTime:(unsigned long)time;
-(id)getEmoticonListByPackageId:(id)anId;
-(BOOL)AddEmoticonSilently:(id)silently Type:(unsigned long)type packageId:(id)anId Source:(int)source;
-(id)AddEmoticon:(id)emoticon Type:(unsigned long)type packageId:(id)anId Source:(int)source;
-(id)AddEmoticonSilently:(id)silently Type:(unsigned long)type Source:(int)source;
-(id)updatedEmoticonArrayForGame:(id)game;
-(void)ResetEmoticon;
-(void)ResetEmojiArt;
-(void)onResPackageReady:(id)ready;
-(void)onPackageListUpdated:(id)updated;
-(void)CheckUpdate;
-(void)UpdateEmojiArtFromResource;
-(void)UpdateLocalEmojiArtByData:(id)data;
-(void)UpdateEmojiArtByXml:(XmlReaderNode_t*)xml;
-(id)GetEmojiCataLogList;
-(void)InitHardCodeEmojiArtList;
-(BOOL)DeleteEmojiByEmoji:(id)emoji;
-(BOOL)AddEmoji:(id)emoji;
-(id)GetEmojiList:(unsigned long)list;
-(BOOL)IsCanDelete:(id)aDelete;
-(BOOL)CheckEmoticonExist:(id)exist;
-(id)GetEmoticonByMD5:(id)a5;
-(BOOL)hasDescPid:(id)pid;
-(void)onGetEmoticonDesc:(id)desc descList:(id)list;
-(void)onGetEmoticonDesc:(id)desc forMd5:(id)md5;
-(void)onGetEmoticonClickFlag:(unsigned long)flag pid:(id)pid;
-(void)updateDescFromFile:(id)file;
-(id)getEmoticonDescFromFileByPackageId:(id)fileByPackageId Md5:(id)a5 withLanguageCode:(id)languageCode;
-(id)updateEmoticonDescFromServer:(id)server;
-(unsigned long)getEmoticonPackageClickFlagByPackageId:(id)anId;
-(id)getEmoticonDescByPackageId:(id)anId Md5:(id)a5 withLanguageCode:(id)languageCode;
-(id)getWordingFromDic:(id)dic withCode:(id)code;
-(BOOL)deleteEmoticonByPid:(id)pid;
-(void)DeleteEmoticonByListMD5:(id)a5;
-(BOOL)DeleteEmoticonByMD5:(id)a5;
-(id)AddEmoticon:(id)emoticon Type:(unsigned long)type ExtInfo:(id)info Source:(int)source;
-(id)AddEmoticon:(id)emoticon Type:(unsigned long)type Source:(int)source;
-(id)checkAndSaveEmoticon:(id)emoticon;
-(id)GetEmoticonList;
-(void)InitLocalList;
-(void)CopyPic:(id)pic From:(id)from;
-(void)AddHardCode:(id)code Type:(unsigned long)type GameType:(unsigned long)type3 OriginPath:(id)path packageId:(id)anId;
-(void)InitEmoticonMgr:(id)mgr Lock:(id)lock;
-(void)cleanUpNonExistEmoticonList;
-(void)addToCleanUpList:(id)cleanUpList;
-(BOOL)onServiceMemoryWarning;
-(void)onLanguageChange;
-(void)dealloc;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(id)init;
@end

@interface CEmoticonPackageDB : NSObject {
	CMMDB* m_db;
	NSRecursiveLock* m_oLock;
}
-(id)lastErrorMsg;
-(BOOL)addPackageList:(id)list;
-(BOOL)removeItemsNotInIDList:(id)idlist;
-(BOOL)clearAllData;
-(BOOL)isEmoticonPackageDownLoaded:(id)loaded;
-(BOOL)isEmoticonPackagePurchased:(id)purchased;
-(BOOL)isEmoticonPackageExist:(id)exist;
-(BOOL)deleteEmoticonPackageByPid:(id)pid;
-(id)getEmoticonPackageList;
-(id)getEmoticonPackageByPid:(id)pid;
-(BOOL)update:(id)update downloadStatus:(unsigned long)status;
-(BOOL)update:(id)update payStatus:(unsigned long)status;
-(BOOL)addEmoticonPackage:(id)package name:(id)name iconUrl:(id)url payStatus:(unsigned long)status downloadStatus:(unsigned long)status5;
-(BOOL)addEmoticonPackage:(id)package name:(id)name payStatus:(unsigned long)status downloadStatus:(unsigned long)status4;
-(BOOL)CreateEmoticonPackageTable;
-(BOOL)IsEmoticonPackageTableExist;
-(void)HardcodePackage;
-(void)tryInitHardcodeEmoticonPackages;
-(id)initWithDB:(id)db withLock:(id)lock;
-(void)dealloc;
@end

@interface ForwardConfirmView : MMUIWindow {
	UIImageView* m_backGroundView;
	UIButton* m_confirmButton;
	UIButton* m_cancelButton;
	UILabel* m_titleLabel;
	BOOL m_bNeedSrc;
	id<ForwardConfirmViewDelegate> m_delegate;
	BOOL bNeedShowSrcSwitch;
}
@property(assign, nonatomic) BOOL bNeedShowSrcSwitch;
@property(assign, nonatomic) id<ForwardConfirmViewDelegate> m_delegate;
-(void)onSwitchChange:(id)change;
-(void)onCancel;
-(void)onConfirm;
-(void)initButtons;
-(void)initSwitch;
-(void)initTitle;
-(void)initBackGroundView;
-(void)showView;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandler_promptForAuthorization : WebviewJSEventHandlerBase <IWebviewAskAuthorizationLogicExt> {
	JSEvent* _jsEvent;
}
-(void)onAskUserAuthInfoSuccessForAuthInfo:(id)authInfo;
-(void)onAskUserAuthInfoFailure:(id)failure ForAuthInfo:(id)authInfo;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
-(id)init;
-(void)dealloc;
@end

@interface CEmoticonPackageWrap : NSObject {
	NSString* m_packageId;
	NSString* m_packageName;
	unsigned long m_payStatus;
	unsigned long m_downloadStatus;
	unsigned long m_installTime;
	unsigned long m_removeTime;
	NSString* m_iconUrl;
	NSString* m_panelUrl;
}
@property(copy, nonatomic) NSString* m_panelUrl;
@property(copy, nonatomic) NSString* m_iconUrl;
@property(assign, nonatomic) unsigned long m_removeTime;
@property(assign, nonatomic) unsigned long m_installTime;
@property(assign, nonatomic) unsigned long m_downloadStatus;
@property(assign, nonatomic) unsigned long m_payStatus;
@property(retain, nonatomic) NSString* m_packageName;
@property(retain, nonatomic) NSString* m_packageId;
+(id)packageItemFromSummary:(id)summary;
-(void)dealloc;
-(id)init;
-(id)description;
@end

@interface EmoticonPackageMgr : MMService <MMService, PBMessageObserverDelegate> {
	CEmoticonPackageDB* m_oEmoticonPackageDB;
	NSRecursiveLock* m_oLock;
	unsigned long m_getEmoticonListEventID;
	unsigned long m_lastRequestTime;
	EmoticonSortSetting* m_sortSetting;
}
@property(retain, nonatomic) EmoticonSortSetting* m_sortSetting;
@property(retain, nonatomic) CEmoticonPackageDB* m_oEmoticonPackageDB;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
+(id)getEmoticonPackageImageByPid:(id)pid;
-(void)clearAllEmoticonPackageData;
-(void)OnModEmotionPackage:(id)package;
-(id)PreProcessServerUpdateList:(id)list;
-(void)OnGetEmoticonPanelList:(id)list;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)ModEmoticonPackage:(id)package OpCode:(int)code;
-(void)removeEmoticonPackageTellSvr:(id)svr;
-(void)reDownloadEmoticonPackageTellSvr:(id)svr;
-(BOOL)SetPanelListRequestBuffer:(id)buffer;
-(id)pathForEmoticonPanelReqBufer;
-(id)GetPanelListRequestBuffer;
-(BOOL)updateEmoticonPannelPackageList:(BOOL)list;
-(BOOL)installPackageAtPath:(id)path withName:(id)name withPid:(id)pid iconUrl:(id)url;
-(BOOL)installPackageAtPath:(id)path withName:(id)name withPid:(id)pid;
-(BOOL)unzipPackageAtPath:(id)path withPid:(id)pid;
-(BOOL)isEmoticonPackageDownLoaded:(id)loaded;
-(BOOL)isEmoticonPackagePurchased:(id)purchased;
-(BOOL)canPurchasePackageForPid:(id)pid;
-(id)getSortEmoticonPackageListWithTusiji:(BOOL)tusiji withCustom:(BOOL)custom;
-(BOOL)hadSetCustomToTop;
-(void)saveSort:(id)sort;
-(id)getTusijiPackage;
-(id)getCustomPackage;
-(id)getEmoticonPackageList;
-(BOOL)updateSilently:(id)silently downloadStatus:(unsigned long)status;
-(BOOL)update:(id)update downloadStatus:(unsigned long)status;
-(void)notifyPackageListChanged;
-(BOOL)update:(id)update payStatus:(unsigned long)status;
-(BOOL)deleteEmoticonPackageByPid:(id)pid;
-(BOOL)addEmoticonPackageSilently:(id)silently name:(id)name payStatus:(unsigned long)status downloadStatus:(unsigned long)status4;
-(BOOL)addEmoticonPackageSilently:(id)silently name:(id)name iconUrl:(id)url payStatus:(unsigned long)status downloadStatus:(unsigned long)status5;
-(BOOL)addEmoticonPackage:(id)package name:(id)name payStatus:(unsigned long)status downloadStatus:(unsigned long)status4;
-(void)notifyUpdatePackageList;
-(void)hardcodeTusiji;
-(BOOL)addHardCode:(id)code name:(id)name;
-(void)initLocalList;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(id)init;
-(void)dealloc;
@end

@interface CEmoticonDB : NSObject {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
}
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(retain, nonatomic) CMMDB* m_oMMDB;
-(unsigned long)GetCountOfEmoticonDownload:(id)emoticonDownload;
-(void)ResetEmoticonDownload;
-(unsigned long)GetCountOfEmoticonDownload;
-(BOOL)DelRowInEmoticonDownload:(id)emoticonDownload SvrID:(unsigned long)anId;
-(id)GetFirstEmoticonDownloadInfoFromTable;
-(BOOL)InsertMessageInEmoticonDownload:(id)emoticonDownload;
-(BOOL)IsInEmoticonDownloadTable:(id)emoticonDownloadTable SvrID:(unsigned long)anId;
-(unsigned long)GetCountOfEmoticonUpload:(id)emoticonUpload;
-(void)ResetEmoticonUpload;
-(unsigned long)GetCountOfEmoticonUpload;
-(BOOL)DelRowInEmoticonUpload:(id)emoticonUpload LocalID:(unsigned long)anId;
-(id)GetFirstEmoticonUploadInfoFromTable;
-(BOOL)InsertMessageInEmoticonUpload:(id)emoticonUpload;
-(BOOL)IsInEmoticonUploadTable:(id)emoticonUploadTable LocalID:(unsigned long)anId;
-(void)ResetEmoticon;
-(BOOL)IsEmoticonExist:(id)exist;
-(BOOL)DeleteEmoticonByMD5:(id)a5;
-(BOOL)AddEmoticon:(id)emoticon Type:(unsigned long)type ExtInfo:(id)info;
-(id)getRecentUsedEmoticonList:(unsigned long)list;
-(id)getEmoticonListByPackageId:(id)anId;
-(BOOL)deleteEmoticonByPid:(id)pid;
-(id)getSelfEmoticonList;
-(BOOL)updateEmoticon:(id)emoticon packageId:(id)anId;
-(BOOL)updateEmoticon:(id)emoticon usedTime:(unsigned long)time;
-(BOOL)UpdateEmoticon:(id)emoticon ExtInfo:(id)info;
-(BOOL)AddEmoticon:(id)emoticon Type:(unsigned long)type;
-(id)GetEmoticonList;
-(void)InitDB:(id)db Lock:(id)lock;
-(void)dealloc;
-(id)init;
-(void)ResetEmojiArt;
-(void)UpdateCatalogVersion:(unsigned long)version Display:(id)display SvrID:(unsigned long)anId;
-(void)AddCatalog:(id)catalog SvrID:(unsigned long)anId Version:(unsigned long)version Display:(id)display;
-(id)GetEmojiCataLogList;
-(BOOL)IsCataLogExist:(unsigned long)exist;
-(unsigned long)GetCatalogVersion:(unsigned long)version;
-(unsigned long)GetLocalCatalogID:(unsigned long)anId;
-(BOOL)DeleteEmojiByCatalogID:(unsigned long)anId;
-(BOOL)DeleteEmojiByEmoji:(id)emoji;
-(BOOL)AddEmoji:(id)emoji;
-(id)GetEmojiList:(unsigned long)list;
@end

@interface CEmoticonDownloadInfo : NSObject {
	NSString* m_nsMD5;
	NSString* m_nsServerID;
	unsigned long m_uiStartPos;
	unsigned long m_uiTotalLen;
	unsigned long m_uiDownloadCount;
	CMessageWrap* m_wrapMsg;
}
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
@property(assign, nonatomic) unsigned long m_uiDownloadCount;
@property(assign, nonatomic) unsigned long m_uiTotalLen;
@property(assign, nonatomic) unsigned long m_uiStartPos;
@property(retain, nonatomic) NSString* m_nsServerID;
@property(retain, nonatomic) NSString* m_nsMD5;
-(void)UpdateDownloadInfoFromMsg:(id)msg;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CEmoticonDownloadMgr : NSObject <PBMessageObserverDelegate> {
	unsigned long m_uiCurEventID;
	CEmoticonDB* m_oEmoticonDB;
	CEmoticonDownloadInfo* m_oCurDownloadInfo;
	NSRecursiveLock* m_oLock;
}
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(retain, nonatomic) CEmoticonDownloadInfo* m_oCurDownloadInfo;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)DownloadOK:(BOOL)ok;
-(void)DownloadFail;
-(unsigned long)CreateDownloadEvent:(id)event;
-(void)CheckDownload;
-(BOOL)IntervalCreateDownloadEvent;
-(void)StopDownloadByChatName:(id)name;
-(void)StartDownload:(id)download;
-(void)DeleteMsg:(id)msg SvrID:(unsigned long)anId;
-(BOOL)IsMsgInDownloadQueue:(id)downloadQueue;
-(void)InitWithDB:(id)db Lock:(id)lock;
-(void)ClearCurDownload;
-(void)ClearEventID;
-(void)dealloc;
-(id)init;
@end

@interface CEmoticonUploadInfo : NSObject {
	NSString* m_nsMD5;
	unsigned long m_uiSendTime;
	unsigned long m_uiStartPos;
	unsigned long m_uiTotalLen;
	BOOL m_bFirst;
	NSString* m_nsUsrExtern;
	CMessageWrap* m_wrapMsg;
}
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
@property(retain, nonatomic) NSString* m_nsUsrExtern;
@property(assign, nonatomic) BOOL m_bFirst;
@property(assign, nonatomic) unsigned long m_uiTotalLen;
@property(assign, nonatomic) unsigned long m_uiStartPos;
@property(assign, nonatomic) unsigned long m_uiSendTime;
@property(retain, nonatomic) NSString* m_nsMD5;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface CEmoticonUploadMgr : NSObject <PBMessageObserverDelegate> {
	unsigned long m_uiCurEventID;
	CEmoticonDB* m_oEmoticonDB;
	NSRecursiveLock* m_oLock;
	CEmoticonUploadInfo* m_oCurUploadInfo;
}
@property(retain, nonatomic) CEmoticonUploadInfo* m_oCurUploadInfo;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)UploadOK:(BOOL)ok;
-(void)UploadFail;
-(BOOL)CreateUploadEvent:(id)event;
-(void)CheckUpload;
-(void)StopUploadByChatName:(id)name;
-(void)StopUpload:(id)upload;
-(void)StartUpload:(id)upload;
-(void)DeleteMsg:(id)msg LocalID:(unsigned long)anId;
-(BOOL)IsMsgInUploadQueue:(id)uploadQueue;
-(void)InitWithDB:(id)db Lock:(id)lock;
-(void)ClearCurUpload;
-(void)ClearEventID;
-(void)dealloc;
-(id)init;
@end

@interface DeviceInfo : NSObject {
}
+(BOOL)is568hScreen;
+(BOOL)isiOS3plus;
+(BOOL)isiOS3_1plus;
+(BOOL)isiOS3_2plus;
+(BOOL)isiOS4plus;
+(BOOL)isiOS4_1plus;
+(BOOL)isiOS4_2plus;
+(BOOL)isiOS4_3plus;
+(BOOL)isiOS5plus;
+(BOOL)isiOS5_1plus;
+(BOOL)isiOS6plus;
+(BOOL)isiOS6_1plus;
+(BOOL)isiOS7plus;
+(BOOL)isiPadMini;
+(BOOL)isiPad4;
+(BOOL)isiPad3;
+(BOOL)isiPad2;
+(BOOL)isiPad1;
+(BOOL)isiPad;
+(BOOL)isiPodTouch5;
+(BOOL)isiPodTouch4;
+(BOOL)isiPodTouch3;
+(BOOL)isiPodTouch2;
+(BOOL)isiPodTouch1;
+(BOOL)isiPodTouch;
+(BOOL)isiPhone5C;
+(BOOL)isiPhone5S;
+(BOOL)isiPhone5;
+(BOOL)isiPhone4S;
+(BOOL)isiPhone4;
+(BOOL)isiPhone3GS;
+(BOOL)isiPhone3G;
+(BOOL)isiPhone2G;
+(BOOL)isiPhone;
+(float)FreeDiskSpaceSize;
+(float)TotalDiskSpaceSize;
+(id)DCache;
+(id)DBus;
+(id)DMemory;
+(id)DCPU;
+(id)DSystem;
+(id)DModel;
+(id)modelPlatform;
@end

@interface CExtendInfoOfEmoticon : NSObject <IMessageWrapExt, IMsgExtendOperation, NSCopying> {
	NSString* m_nsEmoticonMD5;
	unsigned long m_uiEmoticonType;
	unsigned long m_uiGameType;
	unsigned long m_uiGameContent;
	unsigned long m_uiUploadStatus;
	NSString* m_nsEmoticonBelongToProductID;
	CMessageWrap* m_refMessageWrap;
}
@property(assign, nonatomic) CMessageWrap* m_refMessageWrap;
@property(copy, nonatomic) NSString* m_nsEmoticonBelongToProductID;
@property(assign, nonatomic) unsigned long m_uiUploadStatus;
@property(assign, nonatomic) unsigned long m_uiGameContent;
@property(assign, nonatomic) unsigned long m_uiGameType;
@property(assign, nonatomic) unsigned long m_uiEmoticonType;
@property(retain, nonatomic) NSString* m_nsEmoticonMD5;
+(void)CreateExtendInfoWithType:(unsigned long)type retExtendInfo:(id*)info;
-(id)description;
-(void)UpdateGameInfo:(id)info;
-(id)GetGameStatReportString;
-(void)UpdateContent:(id)content;
-(id)GetContent;
-(void)ChangeForDisplay;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(id)init;
@end

@interface EmoticonBoughtListCache : NSObject <PBCoding> {
	NSMutableArray* itemList;
}
@property(retain, nonatomic) NSMutableArray* itemList;
+(void)initialize;
+(void)_initPBTableOfEmoticonBoughtListCache;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface EmoticonPackageStateItem : NSObject {
	int m_state;
	EmoticonStoreItem* m_item;
	float m_process;
}
@property(retain, nonatomic) EmoticonStoreItem* m_item;
@property(assign, nonatomic) float m_process;
@property(assign, nonatomic) int m_state;
@end

@interface EmoticonPackageStateMgr : MMService <MMService, EmoticonStoreMgrExt, EmoticonStoreItemExt, IEmoticonPackageMgrExt> {
	NSMutableDictionary* m_dicState;
}
@property(retain, nonatomic) NSMutableDictionary* m_dicState;
-(void)OnEmoticonPackageDownloadStatusChanged:(id)changed IsDownloaded:(BOOL)downloaded;
-(void)OnEmoticonStoreItemInstallFailed:(id)failed;
-(void)OnEmoticonStoreItemInstallFinished:(id)finished;
-(void)OnEmoticonStoreItemInstallStarted:(id)started;
-(void)OnEmoticonStoreItemGetProductFinished:(id)finished;
-(void)resetState:(id)state;
-(void)OnEmoticonStoreItemDownloadFailed:(id)failed;
-(void)OnEmoticonStoreItemDownloadFinished:(id)finished;
-(void)OnEmoticonStoreItemDownloadProgressChanged:(id)changed CurrLength:(unsigned)length TotalLength:(unsigned)length3;
-(void)OnEmoticonStoreItemChanged:(id)changed;
-(void)OnBuyEmoticonItemCanceled:(id)canceled;
-(void)OnBuyEmoticonItemFailed:(id)failed;
-(void)OnBuyEmoticonItemSuccess:(id)success;
-(void)removeItem:(id)item;
-(int)getStateByItem:(id)item;
-(void)addOrReplaceItem:(id)item withState:(int)state;
-(float)getDownloadProgress:(id)progress;
-(void)cancelDownloadItem:(id)item;
-(void)downloadEmoticonItem:(id)item;
-(int)buyEmoticonItem:(id)item;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(id)init;
-(void)dealloc;
@end

@interface EmoticonStoreAd : NSObject <PBCoding> {
	NSString* imageUrl;
	CGSize imageSize;
	EmoticonStoreItem* storeItem;
}
@property(retain, nonatomic) EmoticonStoreItem* storeItem;
@property(assign, nonatomic) CGSize imageSize;
@property(copy, nonatomic) NSString* imageUrl;
+(id)StoreAdFromBanner:(id)banner;
+(void)initialize;
+(void)_initPBTableOfEmoticonStoreAd;
-(id).cxx_construct;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface EmoticonStoreItem : NSObject <PBCoding> {
	NSString* productID;
	NSString* iconUrl;
	NSString* packName;
	NSString* packDesc;
	NSString* packAuthInfo;
	NSString* packPrice;
	unsigned packType;
	unsigned packFlag;
	NSString* packThumb;
	NSString* coverUrl;
	unsigned boughtTime;
	NSString* packCopyright;
	NSArray* packThumbList;
	NSArray* packThumbPreviewList;
	NSString* timeLimit;
	unsigned long version;
	SKProduct* product;
	BOOL isInvalidProductFromApple;
	iAPTransation* transation;
	NSString* packFileID;
	NSString* packFileKey;
	unsigned packFileSize;
	NSString* cdnDownloadClientID;
	NSString* cdnDownloadPath;
}
@property(retain, nonatomic) iAPTransation* transation;
@property(assign, nonatomic) BOOL isInvalidProductFromApple;
@property(retain, nonatomic) SKProduct* product;
@property(assign, nonatomic) unsigned packFileSize;
@property(assign, nonatomic) unsigned boughtTime;
@property(assign, nonatomic) unsigned packFlag;
@property(assign, nonatomic) unsigned packType;
@property(assign, nonatomic) unsigned long version;
@property(retain, nonatomic) NSString* timeLimit;
@property(retain, nonatomic) NSArray* packThumbPreviewList;
@property(retain, nonatomic) NSArray* packThumbList;
@property(copy, nonatomic) NSString* packFileKey;
@property(copy, nonatomic) NSString* packCopyright;
@property(copy, nonatomic) NSString* cdnDownloadPath;
@property(copy, nonatomic) NSString* cdnDownloadClientID;
@property(copy, nonatomic) NSString* packFileID;
@property(copy, nonatomic) NSString* coverUrl;
@property(copy, nonatomic) NSString* packThumb;
@property(copy, nonatomic) NSString* packPrice;
@property(copy, nonatomic) NSString* packAuthInfo;
@property(copy, nonatomic) NSString* packDesc;
@property(copy, nonatomic) NSString* packName;
@property(copy, nonatomic) NSString* iconUrl;
@property(copy, nonatomic) NSString* productID;
+(id)loadItemFromCache:(id)cache;
+(id)getMd5Pid:(id)pid;
+(id)getItemCachePath:(id)path;
+(id)getItemCacheRootDir;
+(BOOL)IsPrivilegeEmoticonByPid:(id)pid;
+(void)megerWithOutProduct:(id)outProduct item:(id)item;
+(id)StoreItemFromEmotionDetail:(id)emotionDetail;
+(id)StoreItemFromEmotionSummary:(id)emotionSummary;
+(void)initialize;
+(void)_initPBTableOfEmoticonStoreItem;
-(void)saveItemToCache;
-(BOOL)IsStaticPicture;
-(id)GetServerPrice;
-(BOOL)isEmptyItem;
-(BOOL)isExpired;
-(BOOL)hasDetail;
-(id)GetBoughtTimeString;
-(BOOL)IsFreeLimited;
-(BOOL)IsFree;
-(id)description;
-(id)GetSmallIconUrlList;
-(id)GetDesc;
-(id)GetCoverUrl;
-(id)GetPrice;
-(id)priceStringForProduct:(id)product;
-(id)GetName;
-(id)GetIconUrl;
-(BOOL)isSameAs:(id)as;
-(BOOL)canDownload;
-(BOOL)canBuy;
-(BOOL)isValid;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface EmoticonStoreMgr : MMService <MMService, PBMessageObserverDelegate, IAPExt, ICdnComMgrExt, IMMLanguageMgrExt> {
	NSMutableSet* m_requestDetailForPids;
	EmoticonStoreSession* m_session;
	NSMutableDictionary* m_skProducts;
	unsigned m_boughtListEventID;
	NSData* m_broughtBuff;
}
@property(retain, nonatomic) NSMutableSet* m_requestDetailForPids;
@property(retain, nonatomic) EmoticonStoreSession* m_session;
@property(retain, nonatomic) NSData* m_broughtBuff;
@property(retain, nonatomic) NSMutableDictionary* m_skProducts;
-(void)onLanguageChange;
-(void)setBoughtListCacheWithItemList:(id)itemList;
-(id)getBoughtListCache;
-(id)pathForBoughtListCache;
-(void)setStoreListCacheWithItemList:(id)itemList Advertisment:(id)advertisment;
-(id)getStoreListCache;
-(id)pathForStoreListCache;
-(void)notifyDownloadErrorWithItem:(id)item;
-(id)findEmoticonItemByProductID:(id)anId;
-(void)updateBoughtListTailFromServer;
-(void)startBoughtListSession;
-(id)emoticonItemInCacheWithProductID:(id)productID;
-(id)updateItemDetailWithProductID:(id)productID Scence:(unsigned long)scence;
-(BOOL)updateTailForSession:(id)session Scence:(unsigned long)scence;
-(id)getStoreAdvertismentForSession:(id)session;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onGetBroughtItemList:(id)list;
-(unsigned long)getBoughtListFromServer;
-(void)removeItemFromDownloadingQueueByClientID:(id)downloadingQueueByClientID;
-(void)tryInstallEmoticonPackage:(id)package;
-(void)OnCdnDownload:(id)download;
-(id)findDownloadingEmoticonItemByProductID:(id)anId;
-(id)findDownloadingEmoticonItemByClientDownloadID:(id)anId;
-(void)OnCdnDownloadProgress:(id)progress;
-(void)OnSetCdnDnsInfo;
-(BOOL)IsCdnEmoticonPackageDownlaodFromClientID:(id)clientID;
-(id)mediaInfoForEmoticonItem:(id)emoticonItem;
-(BOOL)cancelDownloadAndInstallEmoticonItem:(id)item;
-(BOOL)reDownloadAndInstallEmoticonItem:(id)item;
-(BOOL)downloadAndInstallEmoticonItem:(id)item;
-(void)OnExchangeEmoticonPack:(id)pack;
-(BOOL)exchangeEmoticonItemForDownloadUrl:(id)downloadUrl Scence:(int)scence;
-(void)onRestoreFail;
-(void)onRestoreSuccessForProduct:(id)product;
-(void)onPurchaseCancelForProduct:(id)product;
-(void)onPurchaseFailForProduct:(id)product;
-(void)onPurchaseSuccessForProduct:(id)product;
-(int)buyEmoticonItem:(id)item;
-(void)onGetProduct:(id)product invalidProductID:(id)anId;
-(void)updateListFromAppleForSKProduct;
-(void)updateItemFromAppleForSKProduct:(id)skproduct;
-(BOOL)updateItemProductFromCache:(id)cache;
-(void)updateItemInSession:(id)session;
-(void)OnGetStoreEmoticonItemDetail:(id)detail;
-(BOOL)GetEmotionDetailWithProductID:(id)productID Scence:(unsigned long)scence;
-(void)OnGetStoreEmoticonList:(id)list;
-(BOOL)GetEmotionListFromStore:(unsigned long)store;
-(void)endStoreSession:(id)session;
-(id)beginStoreSessionWithItem:(id)item;
-(id)beginStoreSession:(unsigned long)session;
-(void)dealloc;
-(void)onServiceReloadData;
-(void)onServiceInit;
@end

@interface EmoticonStoreSession : NSObject {
	NSMutableDictionary* m_itemList;
	NSMutableArray* m_downloadingItemList;
	NSData* m_reqBuf;
	unsigned long m_eventID;
	NSString* m_sessionID;
	NSMutableArray* m_adArray;
}
@property(retain, nonatomic) NSMutableArray* m_downloadingItemList;
@property(retain, nonatomic) NSMutableArray* m_adArray;
@property(copy, nonatomic) NSString* m_sessionID;
@property(assign, nonatomic) unsigned long m_eventID;
@property(retain, nonatomic) NSData* m_reqBuf;
@property(retain, nonatomic) NSMutableDictionary* m_itemList;
-(id)megerFromArray:(id)array;
-(id)addItem:(id)item ForProductID:(id)productID;
-(id)findItemByProductID:(id)anId;
-(void)dealloc;
-(id)init;
@end

@interface RadarSearchView : MMUIImageView <IRadarSearchExt, IMsgExt, UIScrollViewDelegate, RSHeadImageViewDelegate, RSVerifyViewDelegate, RadarEducationViewDelegate, MMExposeViewControllerDelegate, CNetworkStatusExt> {
	UIView* _backgroundView;
	UIImageView* _acousticView;
	UIImageView* _acousticView2;
	UIImageView* _acousticView3;
	NSMutableArray* _foundResult;
	RSVerifyView* _verifyView;
	SonicView* _sonicView;
	RadarPushButton* _pushButton;
	UIButton* _closeBtn;
	RadarEducationView* _eduView;
	AVAudioPlayer* _popPlayer;
	AVAudioPlayer* _holdPlayer;
	UIView* _tipsView;
	BOOL _shouldStopAnimations;
	MMScrollView* _scrollView;
	MMDelegateProxy<RadarSearchViewDelegate>* _delegate;
	BOOL m_bIsRespondHeadImgClicking;
	BOOL m_bAcoustViewAnimationIsStop;
	BOOL m_bAcoustView1AnimationIsStop;
	BOOL m_bAcoustView2AinmationIsStop;
	BOOL m_bIsStartAcousViewAnimation;
	BOOL m_bIsFirstTimeTouchBtn;
	BOOL m_bIsSingleTouchEnter;
	int m_locationErrorCode;
	int m_continueClickTimes;
	BOOL m_bIsShowingLongPressTips;
	BOOL m_bIsFirstStartResearch;
	BOOL m_bIsInitedBackgroundView;
	BOOL m_bIsShowNetworkTips;
	int m_touchTotalCnt;
	double m_touchTotalTimeSpent;
	double m_startSearchTime;
	int m_foundFriendsCntPerTime;
	double m_enterRadarTime;
	UIImageView* _skyBkgView;
}
@property(assign, nonatomic) BOOL m_bIsSingleTouchEnter;
@property(readonly, assign, nonatomic) UIImageView* skyBkgView;
@property(retain, nonatomic) RadarPushButton* pushButton;
@property(assign, nonatomic) MMDelegateProxy<RadarSearchViewDelegate>* delegate;
-(void)ReachabilityChange:(unsigned long)change;
-(void)onExposeCancel;
-(void)onExposeComplete;
-(void)onExpose:(id)expose;
-(void)onHideEducationView;
-(void)onRSVerifyViewHide;
-(void)onStatusViewHidden:(id)hidden;
-(void)onRSHeadImageClicked:(id)clicked;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)OnMsgNotAddDBNotify:(id)notify MsgWrap:(id)wrap;
-(id)parseXML:(id)xml;
-(void)OnRetrieveLocationError:(int)error;
-(void)OnRetrieveLocationOk;
-(void)OnRetrieveLocationTimeout;
-(void)OnCreateGroup:(int)group;
-(void)OnVerifyUsr:(id)usr ErrCode:(int)code;
-(void)OnAddFriend:(id)aFriend ErrCode:(int)code;
-(void)OnRadarSearch:(id)search ErrCode:(int)code;
-(void)handleSomeoneAppear:(id)appear;
-(void)stopSearch;
-(void)startSearch;
-(void)hideCloseBtnIfNeed;
-(void)hideLongPressTipsIfNeed;
-(void)showLongPressTipsIfNeed;
-(void)hideTipsViewIfNeed;
-(void)showFindingTipsViewIfNeed;
-(void)hideEducationViewIfNeed;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)stopAcousticAnimation;
-(void)startAcousticAnimation3;
-(void)startAcousticAnimation2;
-(void)startAcousticAnimation1;
-(void)startAcousticAnimation;
-(void)stopPlayPopupSound;
-(void)startPlayPopupSound;
-(void)fadeOutPlayHoldSound;
-(void)stopPlayHoldSound;
-(void)startPlayHoldSound;
-(void)fadeInPlaySound;
-(void)onClose;
-(void)removeSubViews;
-(void)showEducationView;
-(void)hideEducationView;
-(void)initView;
-(void)resetDataMember;
-(void)initEducationView;
-(void)showLongPressTips;
-(void)showFindFailTips;
-(void)showTipsWithType:(int)type;
-(void)hideTipsView;
-(void)showTipsView;
-(void)initTipsView;
-(void)initVerifyView;
-(void)initCloseButton;
-(void)initAcousticView;
-(void)initBackgroundView;
-(void)dealloc;
-(id)init;
-(void)initSkyBackground;
@end

@interface RadarPushButton : MMUIImageView {
	BOOL m_bIsLongPressHandled;
	UIImage* _normalImage;
	MMDelegateProxy<RadarPushButtonDelegate>* _delegate;
	BOOL m_bIsTouching;
	BOOL m_bIsLongPress;
	double m_intervalOfTouch;
	double m_timeOfTouchBegan;
}
@property(readonly, assign, nonatomic) double intervalOfTouch;
@property(readonly, assign, nonatomic) BOOL isLongPress;
@property(readonly, assign, nonatomic) BOOL isTouching;
@property(assign, nonatomic) MMDelegateProxy<RadarPushButtonDelegate>* delegate;
@property(retain, nonatomic) UIImage* normalImage;
-(void)showHighlighedImg;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)LongPressEvents;
-(void)dealloc;
-(id)init;
@end

@interface RadarEducationView : MMUIView {
	MMDelegateProxy<RadarEducationViewDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<RadarEducationViewDelegate>* delegate;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface MMNewUploadVoiceMgr : MMObject <NotifyFromMainCtrlDelegate> {
	CMMDB* m_oMMDB;
	NSRecursiveLock* m_oLock;
	NSTimer* m_timerCheck;
	unsigned long m_uiCurUploadID;
	BOOL m_bIsUploading;
	MMDelegateProxy<UploadVoiceDelegate>* m_delNotifyToSender;
	unsigned long m_uiQueueCount;
	BOOL m_bDBError;
	NSMutableDictionary* m_dicMergeResult;
}
@property(assign, nonatomic) MMDelegateProxy<UploadVoiceDelegate>* m_delNotifyToSender;
@property(retain, nonatomic) NSTimer* m_timerCheck;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(retain, nonatomic) CMMDB* m_oMMDB;
-(void)ReportDBError:(unsigned long)error;
-(void)HandleUploadVoiceOK:(id)ok;
-(BOOL)IsInUploadQueue:(id)uploadQueue LocalID:(unsigned long)anId Offset:(unsigned long)offset;
-(void)MainThreadNotifyUploadVoiceOK:(id)ok;
-(BOOL)PrepareForUpload:(id)upload packetExpireTime:(BOOL)time;
-(BOOL)PrepareForUploadEx:(id)uploadEx;
-(BOOL)loadDataFromAudioFileForExpirePacket:(id)expirePacket;
-(BOOL)loadDataFromAudioFile:(id)audioFile;
-(id)getOneUploadItemFromDB;
-(BOOL)uploadOnePacket;
-(BOOL)startSend;
-(id)getFromUsrNameBytoUsrName:(id)usrNameBytoUsrName;
-(void)CancelUpload:(id)upload LocalID:(unsigned long)anId SvrID:(unsigned long)anId3 Offset:(unsigned long)offset Len:(unsigned long)len VoiceTime:(unsigned long)time CreateTime:(unsigned long)time7 EndFlag:(unsigned long)flag CancelFlag:(unsigned long)flag9 VoiceFormat:(unsigned long)format;
-(void)DeleteMsg:(id)msg LocalID:(unsigned long)anId Happen:(unsigned long)happen;
-(BOOL)mergeToDB:(id)db;
-(BOOL)insertNewRowInUploadVoice:(id)uploadVoice;
-(void)NotifyFromMainCtrl:(unsigned long)mainCtrl MessageInfo:(id)info Event:(unsigned long)event;
-(void)ResendVoiceMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddNewPart:(id)part LocalID:(unsigned long)anId SvrID:(unsigned long)anId3 Offset:(unsigned long)offset Len:(unsigned long)len VoiceTime:(unsigned long)time CreateTime:(unsigned long)time7 EndFlag:(unsigned long)flag CancelFlag:(unsigned long)flag9 VoiceFormat:(unsigned long)format ForwardFlag:(unsigned long)flag11;
-(void)AddNewPart:(id)part LocalID:(unsigned long)anId SvrID:(unsigned long)anId3 Offset:(unsigned long)offset Len:(unsigned long)len VoiceTime:(unsigned long)time CreateTime:(unsigned long)time7 EndFlag:(unsigned long)flag CancelFlag:(unsigned long)flag9 VoiceFormat:(unsigned long)format;
-(void)TimerCheckUploadQueue;
-(void)Stop;
-(void)Start;
-(void)InitUploadMgr:(id)mgr Lock:(id)lock Delegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface MainFrameCellData : NSObject <IContactMgrExt> {
	MMSessionInfo* m_sessionInfo;
	BOOL m_isNeedUpdateDataForUI;
	NSString* m_nsHeadImgUsrName;
	NSString* m_nsHeadImgUrl;
	BOOL m_timeIsMoreThanAWeek;
	BOOL m_isFirstInitTimeText;
	BOOL m_isHavenInitedWithSessionInfo;
	float m_widthForTimeLabelText;
	float m_widthForNameLabelText;
	BOOL m_bIsSenderFromSelf;
	NSString* m_textForNameLabel;
	NSString* m_textForMessageLabel;
	NSString* m_textForGreenLabel;
	NSString* m_textForTimeLabel;
	NSString* m_prefixTextForQuoteMessage;
	NSString* m_subfixTextForQuoteMessage;
	float m_widthForMessageLabelText;
	float m_widthForGreenLabelText;
	BOOL m_isRealTimeTalkRoomEmpty;
	NSString* m_textForMemberCntLabel;
	unsigned long m_memberCnt;
	BOOL m_bIsEnableCacheCellData;
	BOOL m_bIsNeedSaveCellData;
	BOOL m_bIsRoomDisplayEmpty;
}
@property(readonly, assign, nonatomic) BOOL m_bIsRoomDisplayEmpty;
@property(retain, nonatomic) NSString* m_textForMemberCntLabel;
@property(assign, nonatomic) float m_widthForNameLabelText;
@property(assign, nonatomic) float m_widthForTimeLabelText;
@property(readonly, assign, nonatomic) BOOL m_isRealTimeTalkRoomEmpty;
@property(assign, nonatomic) float m_widthForGreenLabelText;
@property(assign, nonatomic) float m_widthForMessageLabelText;
@property(retain, nonatomic) NSString* m_subfixTextForQuoteMessage;
@property(retain, nonatomic) NSString* m_prefixTextForQuoteMessage;
@property(retain, nonatomic) NSString* m_textForTimeLabel;
@property(retain, nonatomic) NSString* m_textForGreenLabel;
@property(retain, nonatomic) NSString* m_textForMessageLabel;
@property(retain, nonatomic) NSString* m_textForNameLabel;
@property(readonly, assign, nonatomic) BOOL m_bIsSenderFromSelf;
@property(readonly, assign, nonatomic) BOOL m_isHavenInitedWithSessionInfo;
@property(assign, nonatomic) BOOL m_isFirstInitTimeText;
@property(assign, nonatomic) BOOL m_timeIsMoreThanAWeek;
@property(retain, nonatomic) NSString* m_nsHeadImgUrl;
@property(retain, nonatomic) NSString* m_nsHeadImgUsrName;
@property(retain, nonatomic) MMSessionInfo* m_sessionInfo;
-(void)onModifyContact:(id)contact;
-(void)updateTextForTimeLabel;
-(void)updateData:(id)data;
-(void)dealloc;
-(id)initWithSessionInfo:(id)sessionInfo isEnableCacheCellData:(BOOL)data PBCellData:(id)data3;
-(id)initWithSessionInfo:(id)sessionInfo isEnableCacheCellData:(BOOL)data;
-(id)init;
-(void)makeTextForPluginMessage;
-(void)makeTextForQuoteMessage;
-(void)makeTextForSingleMessage;
-(void)makeTextForChatRoomMessage:(id)chatRoomMessage;
-(void)makeTextForMessageLabel;
-(void)makeTextForNameLabel;
-(void)updateDataFieldForUI;
-(void)updateHeadImgData;
-(void)checkAndUpdateImg;
-(void)updateExtensionRegister:(id)aRegister;
-(id)copyFieldToPBCellData;
-(void)checkDataIsValid;
-(void)copyFieldFromPBCellData:(id)pbcellData;
-(void)updateTimeField:(unsigned long)field;
-(void)updateWidthForNameLabel;
-(void)savePBCellData;
@end

@interface PBMainFrameCellData : NSObject <PBCoding> {
	NSString* m_nsHeadImgUsrName;
	NSString* m_nsHeadImgUrl;
	BOOL m_timeIsMoreThanAWeek;
	float m_widthForTimeLabelText;
	float m_widthForNameLabelText;
	BOOL m_bIsSenderFromSelf;
	NSString* m_textForNameLabel;
	NSString* m_textForMessageLabel;
	NSString* m_textForGreenLabel;
	NSString* m_textForTimeLabel;
	NSString* m_prefixTextForQuoteMessage;
	NSString* m_subfixTextForQuoteMessage;
	float m_widthForMessageLabelText;
	float m_widthForGreenLabelText;
	BOOL m_isRealTimeTalkRoomEmpty;
	NSString* m_textForMemberCntLabel;
	unsigned long m_memberCnt;
	BOOL m_bIsRoomDisplayEmpty;
}
@property(assign, nonatomic) BOOL m_bIsRoomDisplayEmpty;
@property(assign, nonatomic) unsigned long m_memberCnt;
@property(retain, nonatomic) NSString* m_textForMemberCntLabel;
@property(assign, nonatomic) BOOL m_isRealTimeTalkRoomEmpty;
@property(assign, nonatomic) float m_widthForGreenLabelText;
@property(assign, nonatomic) float m_widthForMessageLabelText;
@property(retain, nonatomic) NSString* m_subfixTextForQuoteMessage;
@property(retain, nonatomic) NSString* m_prefixTextForQuoteMessage;
@property(retain, nonatomic) NSString* m_textForTimeLabel;
@property(retain, nonatomic) NSString* m_textForGreenLabel;
@property(retain, nonatomic) NSString* m_textForMessageLabel;
@property(retain, nonatomic) NSString* m_textForNameLabel;
@property(assign, nonatomic) BOOL m_bIsSenderFromSelf;
@property(assign, nonatomic) float m_widthForNameLabelText;
@property(assign, nonatomic) float m_widthForTimeLabelText;
@property(assign, nonatomic) BOOL m_timeIsMoreThanAWeek;
@property(retain, nonatomic) NSString* m_nsHeadImgUrl;
@property(retain, nonatomic) NSString* m_nsHeadImgUsrName;
+(void)deleteCellDataFromLocalWithUsrName:(id)usrName;
+(void)deleteCellDataFromLocal:(id)local;
+(void)saveCellDataToLocal:(id)local nsUsrName:(id)name filePath:(id)path;
+(id)loadCellDataFromLocal:(id)local;
+(id)pathForCellData:(id)cellData;
+(void)initialize;
+(void)_initPBTableOfPBMainFrameCellData;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface NewMainFrameCell : MMMultiMenuTableViewCell <IMainFrameCellExt> {
	MainFrameItemView* m_itemView;
	UIImageView* m_backGroundViewOfCell;
	UIImage* m_cellBkgImageWithTop;
	UIImage* m_cellBkgImage;
	MainFrameCellData* m_cellData;
	BOOL m_bIsHideMemberCntLabel;
	MMDelegateProxy<NewMainFrameCellDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<NewMainFrameCellDelegate>* m_delegate;
@property(assign, nonatomic) BOOL m_bIsHideMemberCntLabel;
@property(retain, nonatomic) MainFrameCellData* m_cellData;
-(void)updateMessageLabelForItemView:(id)itemView;
-(void)setIsShowChatNotPushView:(id)view withIsShow:(BOOL)isShow;
-(void)setIsShowTime:(id)time withIsShow:(BOOL)isShow;
-(void)updateCellTime;
-(void)updateCellContent:(id)content withContact:(id)contact;
-(void)updateContentView:(id)view tableViewFrame:(CGRect)frame isSearching:(BOOL)searching isEditing:(BOOL)editing isSearchTableView:(BOOL)view5 searchBarText:(id)text;
-(void)updateViewForBrandSession:(id)brandSession tableViewFrame:(CGRect)frame;
-(void)updateSetUnreadMenu:(id)menu;
-(void)onDelete:(id)aDelete;
-(void)onSetUnread:(id)unread;
-(BOOL)isSessionSetUnreadable:(id)unreadable;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)updateCellBackground:(id)background tableViewFrame:(CGRect)frame;
@end

@interface NoLineBreakLabel : UILabel {
}
-(void)setText:(id)text;
@end

@interface MainFrameItemView : UIView {
	unsigned long m_curCreateTime;
	BOOL m_bSender;
	unsigned long m_uStatus;
	unsigned long m_uUnReadCnt;
	BOOL m_bShowRedDot;
	MainFrameHeadView* m_frameHeadView;
	MMBadgeView* m_messageCountView;
	UILabel* m_labelCount;
	UILabel* m_labelName;
	UILabel* m_labelMemberCount;
	UILabel* m_labelTime;
	UILabel* m_greenLabel;
	UIImageView* m_statusView;
	UILabel* m_labelMessage;
	UIImageView* m_contactTypeView;
	UIImageView* m_chatNotPushView;
	UIImageView* m_wxtalkTipsView;
	UIImageView* m_inputDraftView;
	MMGroupView* m_groupView;
	MainFrameCellData* m_cellData;
	BOOL m_bIsHideMemberCntLabel;
}
@property(assign, nonatomic) BOOL m_bIsHideMemberCntLabel;
@property(retain, nonatomic) MainFrameCellData* m_cellData;
-(void)setLabelHighlighted:(BOOL)highlighted;
-(void)showChatNotPushView:(BOOL)view;
-(void)showTime:(BOOL)time;
-(void)updateTime;
-(void)updateMessage;
-(void)updateWithCellData:(id)cellData withContact:(id)contact;
-(void)updateFlagVariable;
-(void)dealloc;
-(id)initWithCellData:(id)cellData frame:(CGRect)frame withContact:(id)contact isHideMemberCntLabel:(BOOL)label;
-(void)initSubView;
-(id)getLabelNameColor;
-(void)initNameLabelAndMemberCnt;
-(void)initMemberCntLabel;
-(void)updateStatus;
-(void)updateContactTypeView;
-(void)updateUnReadCount;
-(void)updateHead;
-(BOOL)isShowPluginStatus;
-(float)getStatusRightMargin;
-(void)updateMessageForSingle;
-(void)updateMessageForChatRoom;
-(void)removeQuoteMessageLabel;
-(void)quoteMessageLable:(id)lable prefixText:(id)text subfixText:(id)text3;
-(void)updateWXTalkTipsView;
-(void)updateChatNotPushView;
-(void)updateNameWidth;
-(void)initInputDraftView;
-(void)initWXTalkTipsView;
-(void)initChatNotPushView;
-(void)initGroupView;
-(void)updateGroupView;
-(void)updateInputDraftView;
-(void)updateNameAndMemberCnt;
@end

@interface MainFrameHeadView : MMUIView <IHeadImageExt, LongPressImageViewDelegate> {
	MMUILongPressImageView* _headImageView;
	UIButton* _borderButton;
	NSString* _nsHeadImgUrl;
	NSString* _nsUsrName;
	BOOL _bAutoUpdate;
	CGSize _imageSize;
	UIImage* _borderImage;
	UIImage* _borderImageHL;
	UIColor* _borderColor;
	UIColor* _shadowColor;
	int _borderWidth;
	int _shadowWidth;
	BOOL _bAddBorder;
	BOOL _bRoundedCorner;
	UIImageView* _sceneImageView;
	unsigned long m_conerSize;
}
@property(assign, nonatomic) unsigned long m_conerSize;
@property(retain, nonatomic) NSString* nsHeadImgUrl;
@property(assign, nonatomic) BOOL bAutoUpdate;
@property(retain, nonatomic) NSString* nsUsrName;
@property(assign, nonatomic) BOOL bRoundedCorner;
@property(assign, nonatomic) BOOL bAddBorder;
@property(assign, nonatomic) int shadowWidth;
@property(assign, nonatomic) int borderWidth;
@property(retain, nonatomic) UIColor* shadowColor;
@property(retain, nonatomic) UIColor* borderColor;
@property(retain, nonatomic) UIImage* borderImageHL;
@property(retain, nonatomic) UIImage* borderImage;
@property(assign, nonatomic) CGSize imageSize;
-(id).cxx_construct;
-(void)onHeadImageChange:(id)change;
-(void)setHeadImageByName:(id)name;
-(void)layoutSubviews;
-(void)dealloc;
-(id)init;
-(void)updateHeadImg;
@end

@interface FavoritesSyncLogicHelper : NSObject {
}
+(void)NotifyByServer:(id)server;
@end

@interface FavoritesSyncMgr : MMObject <PBMessageObserverDelegate> {
	NSData* _syncKeyBuffer;
	NSData* _syncSelector;
	FavoritesItemDB* _favItemDB;
	MMDelegateProxy<FavoritesSyncMgrDelegate>* _delegate;
	BOOL _isSendingReq;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesSyncMgrDelegate>* delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleFavoritesSyncResp:(id)resp Event:(unsigned long)event;
-(void)aysncHandleFavoritesSyncRespCmdList:(id)list Response:(id)response;
-(void)SyncByNotify:(unsigned)notify;
-(void)clearSyncKey;
-(void)initDB:(id)db;
-(void)dealloc;
-(id)init;
-(void)reloadSyncKeyBuffer;
-(void)loadSyncKeyBuffer;
-(BOOL)saveSyncKeyBuffer:(id)buffer;
-(id)getSyncKeyBufferFilePath;
@end

@interface WCPayPayMoneyFromBrandContactLocalViewLogic : WCPayPayMoneyLogic {
	NSString* m_nsHandleURL;
}
-(void)OnHandleWCPayURL:(id)url Error:(id)error;
-(id)gotoViewController:(Class)controller withData:(id)data;
-(id)gotoViewController:(Class)controller withData:(id)data Present:(BOOL)present;
-(id)gotoViewController:(Class)controller withData:(id)data Title:(id)title HeadTip:(id)tip;
-(void)OrderDetailBack;
-(void)OrderDetailPay:(id)pay;
-(void)OrderDetailAdd:(id)add;
-(void)stopLogic;
-(void)startLogic;
-(void)dealloc;
-(void)SetHandleURL:(id)url;
@end

@interface EmoticonStoreListCache : NSObject <PBCoding> {
	NSMutableArray* itemList;
	NSMutableArray* m_adArray;
}
@property(retain, nonatomic) NSMutableArray* m_adArray;
@property(retain, nonatomic) NSMutableArray* itemList;
+(void)initialize;
+(void)_initPBTableOfEmoticonStoreListCache;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface FavoritesAsyncUploader : MMObject <PBMessageObserverDelegate, ICdnComMgrExt> {
	FavoritesItem* _favItem;
	MMDelegateProxy<FavoritesAsyncUploaderDelegate>* _delegate;
	int _runningState;
	FavoritesCDNInfo* _uploadingInfo;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesAsyncUploaderDelegate>* delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleModifyFavItemResp:(id)resp Event:(unsigned long)event;
-(void)OnCdnUpload:(id)upload;
-(void)OnCdnUploadProgress:(id)progress;
-(void)BroadcastUploadFail:(int)fail;
-(void)tryStartNextData;
-(void)doModifyItemCGI:(id)cgi;
-(id)updateFavoritesItemCDNInfo;
-(id)getItem;
-(BOOL)stop;
-(void)run;
-(void)dealloc;
-(id)initWithFavoritesItem:(id)favoritesItem;
@end

@interface FavoritesAsyncUploadMgr : MMObject <CNetworkStatusExt, FavoritesAsyncUploaderDelegate> {
	NSMutableArray* _uploadingQueue;
	NSMutableArray* _failedQueue;
	NSMutableArray* _activeQueue;
	BOOL _isUploading;
	FavoritesCDNInfoDB* _favCdnDB;
	FavoritesItemDB* _favItemDB;
	FavoritesAsyncUploader* _favUploader;
	MMDelegateProxy<FavoritesAsyncUploadMgrDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesAsyncUploadMgrDelegate>* delegate;
-(void)ReachabilityChange:(unsigned long)change;
-(BOOL)deleteCdnInfoByFavoritesItemLocalId:(unsigned long)anId;
-(BOOL)updateItemXMLInItemDB:(id)itemDB;
-(void)onUploadFavItem:(id)item LocalDataId:(id)anId FinishedLength:(long)length TotalLength:(long)length4;
-(void)onUploadFail:(id)fail ErrCode:(int)code;
-(void)onUploadFinished:(id)finished;
-(id)getAsyncUploadFaildItemList;
-(id)getUploadPausedItemList;
-(id)getUploadItemList;
-(void)changeToNoWifi;
-(BOOL)pauseAsyncUploadFavoritesItem:(unsigned long)item;
-(BOOL)restartAllAsyncUploadFailedItems;
-(BOOL)startAsyncUploadItem:(id)item IsPriority:(BOOL)priority;
-(id)getUploadCdnInfoByLocalItemDataId:(id)anId andType:(int)type;
-(BOOL)updateCdnInfo:(id)info;
-(id)getNextAsyncUploadCdnInfoByLocalItemId:(unsigned long)anId;
-(void)tryStartUpload;
-(void)setItemUploadFail:(id)fail ErrCode:(int)code;
-(BOOL)delAsyncUploadItem:(id)item;
-(BOOL)addAsyncUploadItem:(id)item;
-(BOOL)loadAsyncUploadFailedQueue;
-(BOOL)loadAsyncUploadingQueue;
-(void)dealloc;
-(void)initDB:(id)db;
-(id)init;
@end

@interface FavLocationDetailViewController : MMUIViewController <MKMapViewDelegate, ILocationMgrExt, FavLocRemarkDelegate, PBMessageObserverDelegate, UIActionSheetDelegate> {
	FavoritesItem* m_favItem;
	MKMapView* m_mapView;
	MMAddressAnnotation* m_myAnnotation;
	FavLocationLabelView* m_locLabelView;
	XXStruct_zYrK5D m_location;
	int m_scale;
	NSString* m_nsPoiName;
	NSString* m_nsLocation;
	NSString* m_nsUserName;
	NSString* m_favRemark;
	NSURL* m_streetViewUrl;
	BOOL m_bLoadFinish;
	int mapLocationTag;
	FavForwardLogicController* m_favForwardController;
	MMDelegateProxy<FavLocDetailDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavLocDetailDelegate>* m_delegate;
-(id).cxx_construct;
-(void)onTextInputComplete:(id)complete WithTag:(int)tag;
-(void)onFavLocReamrkComplete:(id)complete;
-(void)onFavRemark:(id)remark;
-(id)getLocationText:(XXStruct_zYrK5D)text;
-(void)OpenMap;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onAction;
-(void)onOpenStreetView:(id)view;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)addAnotation:(XXStruct_zYrK5D)anotation;
-(void)hideLoactionLabelView;
-(void)showLocationLabelView;
-(void)showLocationCalloutView;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)StartGetStreetViewUrl;
-(void)startGetLocation;
-(void)initView;
-(void)initData;
-(void)viewDidLoad;
-(void)didReceiveMemoryWarning;
-(id)initWithFavItem:(id)favItem;
-(void)dealloc;
@end

@interface RSAnimationHeadImgView : MMUIView {
	UILabel* _displayName;
	UIImageView* _avatarView;
	MMHeadImageView* _headImage;
	RadarSearchMember* _member;
	NSString* m_nsRemarkName;
}
@property(retain, nonatomic) NSString* m_nsRemarkName;
@property(retain, nonatomic) RadarSearchMember* member;
+(CGSize)getHeadImageSize;
-(void)initDisplayNameView;
-(void)initAvatarView;
-(void)initHeadImageView;
-(void)initView;
-(void)dealloc;
-(id)initWithRadarSearchMember:(id)radarSearchMember remarkName:(id)name;
@end

@interface RadarSearchSetting : NSObject <NSCoding> {
	int _usrEduTimes;
	int _enterRadarTimes;
}
@property(assign, nonatomic) int enterRadarTimes;
@property(assign, nonatomic) int usrEduTimes;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
@end

@interface WCListViewBaseContentRowView : MMUIView {
	WCDataItem* _dataItem;
	MMDelegateProxy<WCListViewContentRowViewDelegate>* _delegate;
}
@property(readonly, assign, nonatomic) WCDataItem* dataItem;
@property(assign, nonatomic) MMDelegateProxy<WCListViewContentRowViewDelegate>* delegate;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)onClickEvent;
-(void)setHighlightedColor;
-(void)setNormalColor;
-(void)dealloc;
-(id)initWithWCDataItem:(id)wcdataItem;
@end

@interface WCListViewTextContentRowView : WCListViewBaseContentRowView {
}
+(float)heightForDataItem:(id)dataItem;
-(void)onClickEvent;
-(id)initWithWCDataItem:(id)wcdataItem;
-(void)initView;
@end

@interface WCListViewMusicContentRowView : WCListViewBaseContentRowView {
}
+(float)heightForDataItem:(id)dataItem;
-(void)setHighlightedColor;
-(void)setNormalColor;
-(void)onClickEvent;
-(id)initWithWCDataItem:(id)wcdataItem;
-(void)initView;
@end

@interface WCListViewVideoContentRowView : WCListViewBaseContentRowView {
}
+(float)heightForDataItem:(id)dataItem;
-(void)setHighlightedColor;
-(void)setNormalColor;
-(void)onClickEvent;
-(id)initWithWCDataItem:(id)wcdataItem;
-(void)initView;
@end

@interface WCListViewFeedContentRowView : WCListViewBaseContentRowView {
}
+(float)heightForDataItem:(id)dataItem;
-(void)setHighlightedColor;
-(void)setNormalColor;
-(void)onClickEvent;
-(id)initWithWCDataItem:(id)wcdataItem;
-(void)initView;
@end

@interface FavoritesSetting : NSObject <NSCoding> {
	unsigned long long _totalCapacity;
	unsigned long long _usedCapcity;
	unsigned long _maxAutoUploadSize;
	unsigned long _maxAutoDownloadSize;
	unsigned long _maxFavFileSize;
	BOOL _bIsFirstTimeInFav;
	int _showFavIntroViewTimes;
	unsigned long long _usedCapacity;
}
@property(assign, nonatomic) int showFavIntroViewTimes;
@property(assign, nonatomic) BOOL bIsFirstTimeInFav;
@property(assign, nonatomic) unsigned long maxFavFileSize;
@property(assign, nonatomic) unsigned long maxAutoDownloadSize;
@property(assign, nonatomic) unsigned long maxAutoUploadSize;
@property(assign, nonatomic) unsigned long long usedCapacity;
@property(assign, nonatomic) unsigned long long totalCapacity;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)init;
@end

@interface NewQRCodeScanner : MMUIView <QRDecoderDelegate, UINavigationControllerDelegate, CameraScannerViewDelegate, IUiUtilExt> {
	NSString* result;
	BOOL oneDMode;
	BOOL decoding;
	BOOL hasInit;
	CGRect cropRect;
	char* _sendImage;
	MMQRDecoder* _decoder;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _barcodeData;
	basic_string<char, std::char_traits<char>, std::allocator<char> > _barcodeType;
	NSSet* readers;
	id<NewQRCodeScannerDelegate> _delegate;
}
@property(assign) BOOL oneDMode;
@property(assign, nonatomic) CGRect cropRect;
@property(retain, nonatomic) NSString* result;
@property(assign, nonatomic) id<NewQRCodeScannerDelegate> delegate;
@property(retain, nonatomic) NSSet* readers;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)stopCapture;
-(void)startCapture;
-(bool)scanOnePicture:(id)picture;
-(void)notifyResult:(id)result;
-(void)notifyGotBarcode:(id)barcode;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)notifyDelegate:(id)delegate;
-(void)presentResultForString:(id)string;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate OneDMode:(BOOL)mode;
@end

@interface EmoticonPackageDesc : NSObject <PBCoding> {
	NSMutableArray* m_descList;
	NSString* m_packageId;
	unsigned long m_lastRequestTime;
	unsigned long m_clickFlag;
}
@property(assign, nonatomic) unsigned long m_clickFlag;
@property(assign, nonatomic) unsigned long m_lastRequestTime;
@property(retain, nonatomic) NSString* m_packageId;
@property(retain, nonatomic) NSMutableArray* m_descList;
+(id)loadFromCache:(id)cache;
+(id)getSavePath:(id)path;
+(id)getSaveRootDir;
+(id)getMd5Pid:(id)pid;
+(void)initialize;
+(void)_initPBTableOfEmoticonPackageDesc;
-(void)saveToCache;
-(BOOL)hasDesc;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface FavLocationLabelView : MMUIView {
	NSString* m_nsRemark;
	UIImageView* m_remarkBkgView;
	RichTextView* m_favRemarkLabel;
}
@property(retain, nonatomic) NSString* m_nsRemark;
-(void)updateLabelWithRemark:(id)remark;
-(void)initLocLabelView;
-(id)init;
-(void)dealloc;
@end

@interface MyFavoritesGoodsCellView : MyFavoritesBaseCellView {
	MMWebImageView* m_goodsThumbView;
	UILabel* m_goodsTitleLabel;
	UILabel* m_goodsFromLabel;
	NSString* m_nsGoodsTitle;
	NSString* m_nsGoodsFrom;
}
+(float)heightForFavItem:(id)favItem;
-(void)showTimeLabel:(BOOL)label;
-(void)layoutSubviews;
-(void)initGoodsFromLabel;
-(void)initGoodsTitleLabel;
-(void)initGoodsThumb;
-(void)initContentView;
-(void)setCellSize;
-(void)dealloc;
@end

@interface DefaultEmoticonView : BaseEmoticonView <MMTransparentButtonDelegate> {
	int _iCurSelection;
	NSArray* _emoticonPool;
	NSArray* _emojiCodes;
	NSArray* _emojiDescriptions;
	MMDelegateProxy<BaseEmoticonViewDelegate>* m_delegate;
}
-(void)setM_delegate:(id)delegate;
-(id)m_delegate;
-(void)MMTransparentButton_touchesEnded:(id)ended withEvent:(id)event;
-(void)MMTransparentButton_touchesMoved:(id)moved withEvent:(id)event;
-(id)descriptionForEmoticonAtIndex:(unsigned long)index;
-(id)viewForEmoticonAtIndex:(unsigned long)index;
-(id)viewForEmojiEmoticonAtIndex:(unsigned long)index;
-(id)viewForQQEmoticonAtIndex:(unsigned long)index;
-(unsigned long)numberOfCols;
-(unsigned long)numberOfRows;
-(unsigned long)numberOfEmoticons;
-(id)scrollViewBackground;
-(id)getMenuItemArray;
-(void)didSelectEmoticonAtIndex:(unsigned long)index;
-(void)didReleaseLongPressEmoticonAtIndex:(unsigned long)index;
-(int)gestureActionModeAtIndex:(unsigned long)index;
-(void)OnEmoticonClicked:(id)clicked;
-(void)onTipsHide;
-(void)OnEmoticonDelete:(id)aDelete;
-(void)sendDefaultEmoticonAtIndex:(unsigned long)index;
-(id)getEmoticonString:(unsigned long)string;
-(id)getEmojiEmoticonString:(unsigned long)string;
-(id)getQQEmoticonString:(unsigned long)string;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(void)initView;
-(void)initData;
@end

@interface MyFavoritesDefaultCellView : MyFavoritesBaseCellView {
	UIImageView* m_defaultThumbView;
	UILabel* m_defaultTitleLabel;
	UILabel* m_defaultFromLabel;
	NSString* m_nsTitle;
	NSString* m_nsFrom;
}
+(float)heightForFavItem:(id)favItem;
-(void)showTimeLabel:(BOOL)label;
-(void)layoutSubviews;
-(void)initDefaultFromLabel;
-(void)initDefaultTitleLabel;
-(void)initDefaultThumb;
-(void)initContentView;
-(void)setCellSize;
-(void)dealloc;
@end

@interface WebViewJSLogicImpl : MMObject <JSEventHandler, WebviewJSEventHandlerBaseDelegate> {
	NSMutableDictionary* _jsCallbackHooks;
	NSMutableDictionary* _jsUrlHooks;
	NSMutableArray* _jsEvents;
	WebviewJSEventHandlerFacade* _jsEventHandlerFacade;
	UIWebView* _webView;
	MMDelegateProxy<WebViewJSLogicDelegate>* _delegate;
}
@property(retain, nonatomic) UIWebView* webView;
@property(assign, nonatomic) MMDelegateProxy<WebViewJSLogicDelegate>* delegate;
-(id)sendEventToJSBridge:(id)jsbridge params:(id)params;
-(id)sendMessageToJSBridge:(id)jsbridge;
-(void)injectPluginJS;
-(void)injectWeixinJSBridge;
-(BOOL)tryInjectWeixinJSBridge:(id)bridge;
-(BOOL)isJSBridgeLoaded;
-(id)webviewController;
-(id)GetCurrentWebviewViewController;
-(void)jsHandlerHandle:(id)handle;
-(id)onEndEvent:(id)event withResult:(id)result;
-(id)funcDefByName:(id)name;
-(void)webviewWillAnimateRotationToInterfaceOrientation:(int)webview duration:(double)duration;
-(id)extraDataForNextJSEventCalled:(id)nextJSEventCalled;
-(void)cleanJSAPIDelegate;
-(void)handleJSApiDispatchMessage:(id)message;
-(void)functionCall:(id)call withParams:(id)params withCallbackID:(id)callbackID;
-(id)jsEventWithFunction:(id)function params:(id)params callBackID:(id)anId;
-(void)dealloc;
-(id)init;
@end

@interface RecoverFavoritesDBViewController : MMUIViewController <UIAlertViewDelegate> {
	UIButton* _btnRecover;
}
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)DoRecover;
-(void)OnRecover;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
@end

@interface BrandServiceHeadImageProvider : NSObject <IContactMgrExt> {
	NSMutableDictionary* m_headImageCache;
}
-(void)dealloc;
-(id)headImageForUrl:(id)url :(id)arg2;
-(id)init;
-(void)onMemoryWarnning;
-(void)onModifyContactHeadImage:(id)image;
-(void)onModifyContact:(id)contact;
@end

@interface AppProductMessageNodeView : BaseMessageNodeView {
	UIImageView* m_oBkgImageView;
	UILabel* titleLabel;
	UILabel* descLabel;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onFavoriteAdd:(id)add;
-(void)onForward:(id)forward;
-(void)onMoreOperate:(id)operate;
-(void)showOpearation;
-(void)onClick;
-(void)updateThumbImage;
-(id)genCenterImage:(id)image;
-(void)updateBkgImage:(BOOL)image;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)dealloc;
-(id)getBackgroundImageHL;
-(id)getBackgroundImage;
@end

@interface CTFrameWrap : NSObject {
	CTFrameRef _frameRef;
	CGSize _frameSize;
}
@property(assign, nonatomic) CGSize frameSize;
@property(assign, nonatomic) CTFrameRef frameRef;
-(id).cxx_construct;
-(void)dealloc;
-(id)initWithFrameRef:(CTFrameRef)frameRef;
@end

@interface imgDrawUnit : NSObject {
	UIImage* _image;
	CGRect _bound;
}
@property(assign, nonatomic) CGRect bound;
@property(retain, nonatomic) UIImage* image;
-(id).cxx_construct;
-(void)dealloc;
@end

@interface colorDrawUnit : NSObject {
	UIColor* _color;
	NSRange _range;
	CGRect _bound;
}
@property(assign, nonatomic) NSRange range;
@property(assign, nonatomic) CGRect bound;
@property(retain, nonatomic) UIColor* color;
-(id).cxx_construct;
-(void)dealloc;
@end

@interface CTRichTextView : UILabel {
	NSMutableAttributedString* _attString;
	NSMutableArray* _frames;
	NSMutableArray* _images;
	NSMutableArray* _colors;
	NSMutableArray* _tempImages;
	UIFont* _oFont;
	float _fWidth;
	float _fHeight;
	UIColor* _oTextColor;
	unsigned _parserType;
	id<TextLayoutDelegate> _layoutDelegate;
	id<ILinkEventExt> _linkDelegate;
}
@property(assign, nonatomic) unsigned parserType;
@property(retain, nonatomic) UIColor* oTextColor;
@property(assign, nonatomic) float fHeight;
@property(assign, nonatomic) float fWidth;
@property(retain, nonatomic) UIFont* oFont;
-(void)dealloc;
-(void)drawRect:(CGRect)rect;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setAttributedText:(id)text;
-(void)setContent:(id)content;
-(void)updateFrames;
-(id)initParser:(unsigned)parser;
-(id)getParserByPaserType:(unsigned)type;
-(id)init;
@end

@interface AppDefaultMessageNodeView : BaseMessageNodeView {
	UIImageView* m_oBkgImageView;
	float m_width;
	float m_height;
	UILabel* titleLabel;
	UILabel* descLabel;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(id)getMoreMainInfomationAccessibilityDescription;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onMoreOperate:(id)operate;
-(void)onForward:(id)forward;
-(void)showOpearation;
-(void)onClick;
-(void)updateThumbImage;
-(id)genCenterImage:(id)image;
-(void)updateBkgImage:(BOOL)image;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)layoutSubviewsInternal;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)dealloc;
-(id)getBackgroundImageHL;
-(id)getBackgroundImage;
@end

@interface WhatsnewViewController : MMUIViewController <UIScrollViewDelegate, scrollViewDelegate> {
	id<whatsnewViewDelegateEx> m_delegate;
	MMScrollView* m_scrollView;
	UIPageControl* m_pageControl;
	UIButton* m_ctrl;
	BOOL bPageControlUsed;
	BOOL m_bWhatsnewEnd;
	int m_iNumberOfPages;
	NSArray* m_arrPages;
}
@property(retain, nonatomic) MMScrollView* m_scrollView;
@property(assign, nonatomic) id<whatsnewViewDelegateEx> m_delegate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(BOOL)isSvrErrorTipForbidden;
-(void)viewDidLoad;
-(void)dealloc;
-(void)initView;
-(void)backgroundInitialize;
-(void)initData;
-(void)initImageView;
-(void)initEnterButton;
-(void)initPageCtrl;
-(void)initScrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)touchesBegan_ScrollView:(id)view withEvent:(id)event;
-(void)touchesCancelled_ScrollView:(id)view withEvent:(id)event;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)touchesMoved_ScrollView:(id)view withEvent:(id)event;
-(BOOL)fixPageControl;
-(void)changePage:(id)page;
-(void)updatePageControl:(unsigned long)control;
-(void)enterAnimation;
-(void)endAnimation;
-(void)beginAnimation;
-(void)Animation1;
-(void)hideBackgroundAnimationWithTime:(float)time view:(id)view;
-(void)showBackgroundAnimationWithTime:(float)time view:(id)view;
-(void)viewFliesHideAnimationWithTime:(float)time view:(id)view by:(CGPoint)by radio:(float)radio;
-(void)viewFliesShowAnimationWithTime:(float)time view:(id)view by:(CGPoint)by;
-(void)shakeScaleSmallViewAnimationWithTime:(float)time view:(id)view by:(CGPoint)by radio:(float)radio;
-(void)shakeScaleBigViewAnimationWithTime:(float)time view:(id)view by:(CGPoint)by radio:(float)radio;
-(void)shakeViewAnimationWithTime:(float)time view:(id)view byX:(float)x;
-(void)moveViewAnimationWithTime:(float)time view:(id)view to:(CGPoint)to;
-(void)rotateAnimationWithTime:(float)time;
-(void)stopShowWhatsNew;
-(id)init;
@end

@interface ForwardMsgUtil : MMObject {
}
+(id)GenForwardVideoFromMsgWrap:(id)msgWrap NeedSrcInfo:(BOOL)info;
+(void)setVideoSource:(id)source FromMsg:(id)msg NeedSrcInfo:(BOOL)info;
+(id)locMsgFromMsgWrap:(id)msgWrap;
+(id)cardMsgFromMsgWrap:(id)msgWrap;
+(id)emojiMsgFromMsgWrap:(id)msgWrap;
+(id)appMsgFromMsgWrap:(id)msgWrap;
+(id)imgMsgFromMsgWrap:(id)msgWrap;
+(id)textMsgFromMsgWrap:(id)msgWrap;
+(id)GenForwardMsgFromMsgWrap:(id)msgWrap ToContact:(id)contact NeedSrcInfo:(BOOL)info;
+(void)setMsgSource4Msg:(id)msg FromMsg:(id)msg2 NeedSrcInfo:(BOOL)info;
+(id)getContactNickName:(id)name;
+(id)getMsgRealFrom:(id)from;
+(void)ForwardMsg:(id)msg ToContact:(id)contact NeedSrcInfo:(BOOL)info;
+(void)ForwardMsgList:(id)list ToContact:(id)contact NeedSrcInfo:(BOOL)info;
@end

@interface BrandOpenSpecificViewHandler : MMObject <VerifyPhoneDelegate> {
	NSMutableDictionary* m_urlToViewController;
	id<BrandOpenSpecificViewHandlerDelegate> _delegate;
}
-(void)jumpToSettingViewController:(id)settingViewController;
-(void)jumpToScanViewController;
-(void)jumpToTimeLineViewController;
-(void)jumpToSearchBrandViewController;
-(void)jumpToAddFriendViewController:(BOOL)addFriendViewController;
-(void)jumpToNewFriendViewController;
-(void)handleJumpURL:(id)url;
-(void)loadUrlToViewControllerArray;
-(void)handleViewJump:(id)jump;
-(BOOL)canHandleViewJump:(id)jump;
-(id)initWithDelegate:(id)delegate;
-(void)dealloc;
@end

@interface MMGameMsgListCellView : MMUIView <TextLayoutDelegate> {
	GameMsgItem* m_msgItem;
	MMHeadImageView* m_headerView;
	MMWebImageView* m_iconView;
	RichTextView* m_contentLabel;
	UILabel* m_timeLabel;
	UILabel* m_appNameLabel;
	UIView* m_lineImageView;
	UIView* m_backgroundView;
}
+(float)heightForGameMsg:(id)gameMsg;
-(BOOL)shouldOpenNewLineAtY:(float)y withLineHeight:(float)lineHeight;
-(void)showEdit:(BOOL)edit;
-(void)layoutSubviews;
-(void)initGameMsgCell;
-(id)initWithMsgItem:(id)msgItem withSize:(CGSize)size;
-(void)dealloc;
@end

@interface ReportHead : NSObject {
	long long m_aryBuf[20];
}
+(id)toExtInfo:(id)extInfo;
-(void)writeToFile:(id)file;
-(BOOL)readFromFile:(id)file;
-(void)plus:(int)plus Value:(int)value;
-(void)set:(int)set Value:(long long)value;
-(long long)get:(int)get;
-(id)init;
@end

@interface ReportInfo : NSObject {
	long rtType;
	long long beginTime;
	long long endTime;
	long long cost;
	NSString* clientIp;
	NSString* ip;
	int port;
	int ipType;
	BOOL socket;
	int netType;
	int errType;
	int errCode;
	long tx;
	long rx;
	long count;
	int retryCount;
	long netSignal;
	long expand1;
	long expand2;
}
@property(assign, nonatomic) long expand2;
@property(assign, nonatomic) long expand1;
@property(assign, nonatomic) long netSignal;
@property(assign, nonatomic) int retryCount;
@property(assign, nonatomic) long count;
@property(assign, nonatomic) long rx;
@property(assign, nonatomic) long tx;
@property(assign, nonatomic) int errCode;
@property(assign, nonatomic) int errType;
@property(assign, nonatomic) int netType;
@property(assign, nonatomic) BOOL socket;
@property(assign, nonatomic) int ipType;
@property(assign, nonatomic) int port;
@property(retain, nonatomic) NSString* ip;
@property(retain, nonatomic) NSString* clientIp;
@property(assign, nonatomic) long long cost;
@property(assign, nonatomic) long long endTime;
@property(assign, nonatomic) long long beginTime;
@property(assign, nonatomic) long rtType;
-(void)dealloc;
-(id)init;
@end

@interface NetStatWatchDog : MMService <MMService> {
	ReportHead* m_head;
	NSFileHandle* m_pFile;
	long long m_lNextReportTime;
	NSString* m_lastFileName;
	int m_nReportFlag;
	int m_nTryConnectCount;
	BOOL m_bConnectFirstTime;
	long m_lNotifyCountPerConnect;
	long m_lPushSyncCountPerConnect;
	long m_lsyncCountPerConnect;
	NSMutableArray* m_pData;
	dispatch_queue_s* m_worker;
	NSTimer* m_timer;
}
@property(retain, nonatomic) NSTimer* m_timer;
@property(retain, nonatomic) NSString* m_lastFileName;
+(int)convertActionId:(long)anId;
+(void)setConfigFileName:(id)name NextReportTime:(long long)time Flag:(int)flag;
+(void)getConfigFileName:(id*)name NextReportTime:(long long*)time Flag:(int*)flag;
+(id)genFile:(id)file;
+(id)getRootPath;
-(void)reportStatus:(int)status Obj:(id)obj;
-(void)readConfig;
-(void)dealloc;
-(id)init;
-(void)closeFile;
-(void)reportAction:(id)action;
-(BOOL)fixItemTimes:(BOOL)times Cost:(long long)cost BeginTime:(long long)time EndTime:(long long)time4 Item:(id)item;
-(int)saveToItem:(int)item Item:(id)item2 Object:(id)object;
-(void)commitFile;
-(void)onTimeExpired;
-(void)saveConfigWithoutNextReport;
-(void)openFile:(BOOL)file;
@end

@interface FavPostVoiceView : MMUIWindow <IFavAudioRecorderExt, IFavAudioViewExt, IRecordPermissionCheckExt, MMTransparentButtonDelegate> {
	FavAudioRecorder* _recorder;
	UIImageView* _bottomView;
	MMTransparentButton* _recordBtn;
	FavAudioView* _recordView;
	int _recordStatus;
	NSTimer* _recordTimer;
	NSString* _lastFilePath;
	BOOL _isCancelRecord;
	unsigned long _startRecordTime;
	unsigned long _endRecordTime;
}
@property(retain, nonatomic) NSString* lastFilePath;
@property(retain, nonatomic) FavAudioView* recordView;
@property(retain, nonatomic) MMTransparentButton* recordBtn;
-(void)ClosePostAnimate;
-(void)closePostVoiceView;
-(unsigned long)GetTmpAudioTime:(id)time;
-(void)FinishRecord:(id)record;
-(void)showRecoding;
-(void)SetPeakPower:(id)power;
-(void)onDisableAllButton;
-(void)onEnableAllButton;
-(void)stopTime;
-(void)onTimeCount;
-(void)OnFavFinishRecord:(id)record;
-(void)OnFavBeginRecording:(int)recording;
-(void)OnFavLevelMeter:(float)meter;
-(void)OnRecordDenied;
-(void)OnRecordPermissioned;
-(void)cancelRecord;
-(void)stopRecord;
-(void)realStartRecord;
-(void)startRecord;
-(void)showRecording;
-(void)showCancel;
-(void)CancelPostAnimate;
-(void)cancelPost;
-(void)MMTransparentButton_touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)MMTransparentButton_touchesEnded:(id)ended withEvent:(id)event;
-(void)MMTransparentButton_touchesMoved:(id)moved withEvent:(id)event;
-(void)MMTransparentButton_touchesBegan:(id)began withEvent:(id)event;
-(BOOL)isPointInRecordButton:(CGPoint)recordButton;
-(void)initView;
-(id)init;
-(void)dealloc;
@end

@interface AttributedReaderMessageNodeaView : ReaderNewMessageNodeView {
	CTRichTextView* m_ctRichTextView;
}
+(BOOL)canCreateMessageNodeViewInstanceWithMessageWrap:(id)messageWrap;
-(void)onMenuItemWillHide;
-(void)onTouchCancel;
-(void)onLongTouch;
-(void)onTouchUpInside;
-(void)onTouchDownRepeat;
-(void)onTouchDown;
-(void)onClicked;
-(void)onForward:(id)forward;
-(void)onFavoriteAdd:(id)add;
-(void)forwardMessage;
-(void)ShowReader:(id)reader;
-(void)updateBkgImage:(BOOL)image;
-(BOOL)isTouchInView:(id)view;
-(void)onClearResource;
-(void)onDisappear;
-(void)updateStatus:(id)status;
-(void)reLayoutSubviews;
-(void)clickNodeViewBtn:(id)btn;
-(void)layoutSubviewsInternal;
-(id)getItemLabel:(id)label with:(float)with size:(float)size;
-(id)getAsyncImageWithFrame:(CGRect)frame;
-(id)getItemDesc:(float)desc forReaderWrap:(id)readerWrap;
-(id)getItemTitle:(float)title;
-(id)getTitleString:(id)string bBig:(BOOL)big bGray:(BOOL)gray;
-(id)getBigVideoImage;
-(id)getSmallVideoImage;
-(CGSize)sizeForFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface TwoRoundedColorView : UIView {
	UIColor* _oColor;
}
@property(retain, nonatomic) UIColor* oColor;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WCPayInputTextInfoCtrlItem : WCBaseTextFieldItem {
	TPIDKeyboardView* keyboardView;
}
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)dealloc;
-(id)initWithTitle:(id)title tip:(id)tip key:(id)key;
@end

@interface FavoritesBatchDelMgr : MMObject <PBMessageObserverDelegate> {
	FavoritesItemDB* _favItemDB;
	NSMutableArray* _batchDelArray;
	NSMutableArray* _failArray;
	MMDelegateProxy<FavoritesBatchDelMgrDelegate>* _delegate;
	BOOL _isDeling;
}
@property(assign, nonatomic) MMDelegateProxy<FavoritesBatchDelMgrDelegate>* delegate;
-(void)checkFailQueue;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)HandleBatchDelFavItemResp:(id)resp Event:(unsigned long)event;
-(void)TryStartBatchDel;
-(void)addBatchDelFavoritesItemList:(id)list;
-(void)dealloc;
-(BOOL)loadBatchDelQueue;
-(void)initDB:(id)db;
-(id)init;
@end

@interface ProductDetailViewController : MMUIViewController <UIActionSheetDelegate, SendAppMsgHandleDelegate, IScanBookMgrExt> {
	BOOL _canShareToFriend;
	BOOL _canShareToWC;
	BOOL _canAddToFav;
	BOOL _canDelete;
	id _userdata;
	MMDelegateProxy<ProductDetailViewControllerDelegate>* _delegate;
	UIView* _infoView;
	UILabel* _titleLabel;
	UILabel* _subtitleLabel;
	UILabel* _sourceLabel;
	UIButton* _playBtn;
	MMWebViewController* _videoWebView;
	UIActivityIndicatorView* _activityIndicatorView;
	UIView* _thumbBgView;
	MMWebImageView* _thumbImgView;
	UIImageView* _defaultImgView;
	UIImageView* _shadowImgView;
	UIImageView* _shadowBorderImgView;
	ScanProductItem* _productItem;
	ProductTableView* _productTableView;
	SendAppMsgHandler* _sendAppMsgHandler;
	MMAnimationTipView* _tipView;
	BOOL _isVideoPlaying;
	int _functionType;
}
@property(assign, nonatomic) MMDelegateProxy<ProductDetailViewControllerDelegate>* delegate;
@property(retain, nonatomic) id userdata;
@property(assign, nonatomic) BOOL canDelete;
@property(assign, nonatomic) BOOL canAddToFav;
@property(assign, nonatomic) BOOL canShareToWC;
@property(assign, nonatomic) BOOL canShareToFriend;
-(void)OnSendAppMsgOK;
-(void)stopVideoLoading;
-(void)startVideoLoading;
-(void)openPlayUrl;
-(id)getThumbImageData;
-(id)getMessageWrap:(id)wrap;
-(id)getUpLoadTask:(id)task;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onAction;
-(void)dealloc;
-(void)onPlayerExitFullscreen;
-(void)onPlayerEnterFullscreen;
-(void)viewDidLoad;
-(void)initView;
-(unsigned long)getJumpProfileScenceFromFunctionType;
-(unsigned long)getGetA8KeyScenceFromFunctionType;
-(void)initTableView;
-(void)OnGetRemoteProductItem:(id)item Error:(int)error;
-(id)initWithExtContent:(id)extContent Scence:(unsigned long)scence;
-(id)initWithScanItem:(id)scanItem FunctionType:(int)type;
@end

@interface ProductMusicPlayButton : MMMusicPlayerContoller {
}
-(void)onClickOnMe;
@end

@interface ProductTableView : MMUIView <ProductKeyValueTableCellDelegate, tableViewDelegate, UITableViewDelegate, UITableViewDataSource> {
	MMTableView* _tableView;
	NSString* _epName;
	NSString* _musicSinger;
	NSString* _thumbUrl;
	NSString* _productId;
	unsigned long _getA8KeyScence;
	unsigned long _jumpProfileScence;
	NSMutableArray* _musicInfoList;
	NSMutableArray* _actionLists;
	NSMutableDictionary* _indexTextCellDict;
	UIViewController* _containerViewController;
}
@property(assign, nonatomic) unsigned long jumpProfileScence;
@property(assign, nonatomic) unsigned long getA8KeyScence;
@property(retain, nonatomic) NSString* productId;
@property(retain, nonatomic) NSString* thumbUrl;
@property(retain, nonatomic) NSString* musicSinger;
@property(retain, nonatomic) NSString* epName;
-(void)onCellViewMore:(id)more;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)onPlayBtnClicked:(id)clicked;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)initMusicList;
-(void)initView;
-(void)initTableView;
-(id)getTextCellByIndexPath:(id)path;
-(void)reloadWithActionLists:(id)actionLists;
-(void)setFooterView:(id)view;
-(void)setHeaderView:(id)view;
-(id)initWithFrame:(CGRect)frame ActionLists:(id)lists ViewController:(id)controller;
@end

@interface ProductKeyValueTableCell : MMUIView {
	NSString* _key;
	NSString* _value;
	BOOL _isExpanded;
	MMDelegateProxy<ProductKeyValueTableCellDelegate>* _delegate;
	UILabel* _keyLabel;
	UILabel* _valueLabel;
	UIButton* _expandButton;
	BOOL _shouldExpand;
}
@property(retain, nonatomic) MMDelegateProxy<ProductKeyValueTableCellDelegate>* delegate;
@property(assign, nonatomic) BOOL isExpanded;
@property(retain, nonatomic) NSString* value;
@property(retain, nonatomic) NSString* key;
-(void)onViewMore;
-(CGSize)updateSizeForCell;
-(void)sizeToFit;
-(void)dealloc;
-(id)init;
@end

@interface GameFacade : MMService <MMService, GameUserRankListMgrDelegate, GameNotifyMsgsMgrDelegate, GameCenterMgrDelegate> {
	GameCenterMgr* m_gameCenterMgr;
	GameNotifyMsgsMgr* m_gameNotifyMsgsMgr;
	GameUserRankListMgr* m_gameUserRankListMgr;
}
-(void)onGotBizAppInfo;
-(void)onUpdateGamePersonalInfoList;
-(void)onGotGameIntroList:(id)list errType:(int)type;
-(void)onGotRcAppList:(unsigned long)list rcAppList:(id)list2 adAppList:(id)list3 isInternalDownload:(BOOL)download errType:(int)type;
-(void)onGameReceiveNewAppMsg;
-(void)onGameNewAppCountChanged;
-(void)onGameMessageUnReadCountChanged;
-(void)onGetUserRankListFail:(unsigned long)fail appID:(id)anId;
-(void)onGetUserRankListSuccess:(id)success count:(unsigned)count hasReportScore:(BOOL)score;
-(BOOL)UpdateGameIntroList:(id)list;
-(id)getGameIntroInfoWithAppID:(id)appID;
-(BOOL)pullUserRankInfosByAppID:(id)anId;
-(void)deleteUserRankInfosByAppID:(id)anId;
-(id)getSelfRankInfoByAppID:(id)anId;
-(id)getUserRankInfosFrom:(id)from appID:(id)anId maxCount:(unsigned long)count;
-(unsigned)getRemainRankInfoCountFrom:(id)from appID:(id)anId;
-(unsigned)getUserRankInfosCount:(id)count;
-(unsigned)getFriendsCount:(id)count;
-(void)markAppListRead:(id)read;
-(void)markAppNotNew:(id)aNew;
-(id)getNewAppDict;
-(BOOL)isNewApp:(id)app;
-(BOOL)hasNewApp;
-(void)deleteGameMsg:(id)msg;
-(void)deleteAllMessages;
-(void)markMessageListRead:(id)read;
-(id)getMessagesFrom:(id)from maxCount:(unsigned long)count;
-(unsigned)getAllMessagesCount;
-(id)getLatestUnreadMessage;
-(id)getUnreadMessages;
-(unsigned)getUnreadMessagesCount;
-(BOOL)hasUnreadMessages;
-(void)removeAllLaunchGame;
-(void)addLaunchGame:(id)game;
-(void)tryUpdateLaunchGamePersonalInfo;
-(void)updateGamePersonalInfoList:(id)list;
-(id)getGameAdList;
-(id)getGameRecommandFirstPage;
-(void)updateRecommendFirstPage;
-(BOOL)updateSuggestAppList:(int)list withOffset:(unsigned long)offset withLimit:(unsigned long)limit;
-(BOOL)isShowGameCenterEntrance;
-(id)init;
-(void)dealloc;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceInit;
-(void)onServiceReloadData;
@end

@interface AdAppItem : NSObject <PBCoding> {
	NSString* appID;
	NSString* appCoverUrl;
	NSString* appDownloadUrl;
	NSString* appName;
	NSString* appIconUrl;
	NSString* appSnsDesc;
}
@property(retain, nonatomic) NSString* appSnsDesc;
@property(retain, nonatomic) NSString* appIconUrl;
@property(retain, nonatomic) NSString* appName;
@property(retain, nonatomic) NSString* appDownloadUrl;
@property(retain, nonatomic) NSString* appCoverUrl;
@property(retain, nonatomic) NSString* appID;
+(void)initialize;
+(void)_initPBTableOfAdAppItem;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface RecommandAppItem : NSObject <PBCoding> {
	NSString* _appID;
	NSString* _appName;
	NSString* _appIconUrl;
	NSString* _appDesc;
	NSString* _appSnsDesc;
	NSString* _appSnapShotUrl;
	NSString* _appDownloadUrl;
	NSString* _appCoverUrl;
	NSString* _appNameEn;
	NSString* _appNameTW;
	NSString* _appRcmIconUrl;
	NSString* _appIntroViewUrl;
	NSString* appID;
	NSString* appName;
	NSString* appIconUrl;
	NSString* appDesc;
	NSString* appSnsDesc;
	NSString* appSnapShotUrl;
	NSString* appDownloadUrl;
	NSString* appCoverUrl;
	NSString* appNameEn;
	NSString* appNameTW;
	NSString* appRcmIconUrl;
	NSString* appIntroViewUrl;
}
@property(retain, nonatomic) NSString* appIntroViewUrl;
@property(retain, nonatomic) NSString* appRcmIconUrl;
@property(retain, nonatomic) NSString* appNameTW;
@property(retain, nonatomic) NSString* appNameEn;
@property(retain, nonatomic) NSString* appCoverUrl;
@property(retain, nonatomic) NSString* appDownloadUrl;
@property(retain, nonatomic) NSString* appSnapShotUrl;
@property(retain, nonatomic) NSString* appSnsDesc;
@property(retain, nonatomic) NSString* appDesc;
@property(retain, nonatomic) NSString* appIconUrl;
@property(retain, nonatomic) NSString* appName;
@property(retain, nonatomic) NSString* appID;
+(void)initialize;
+(void)_initPBTableOfRecommandAppItem;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface GameMsgItem : NSObject <PBCoding> {
	unsigned long type;
	NSString* userName;
	NSString* url;
	NSString* formatContent;
	NSDictionary* dicFormatContentKey;
	NSString* appID;
	NSString* appName;
	NSString* appIconUrl;
	NSString* appDownloadUrl;
	unsigned long msgSvrID;
	unsigned long createTime;
	BOOL isRead;
	NSString* appSnsDesc;
	unsigned long noticeID;
	NSString* iconUrl;
	unsigned long newType;
}
@property(assign, nonatomic) unsigned long newType;
@property(retain, nonatomic) NSString* iconUrl;
@property(assign, nonatomic) unsigned long noticeID;
@property(retain, nonatomic) NSString* appSnsDesc;
@property(assign, nonatomic) BOOL isRead;
@property(assign, nonatomic) unsigned long createTime;
@property(assign, nonatomic) unsigned long msgSvrID;
@property(retain, nonatomic) NSString* appDownloadUrl;
@property(retain, nonatomic) NSString* appIconUrl;
@property(retain, nonatomic) NSString* appName;
@property(retain, nonatomic) NSString* appID;
@property(retain, nonatomic) NSDictionary* dicFormatContentKey;
@property(retain, nonatomic) NSString* formatContent;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* userName;
@property(assign, nonatomic) unsigned long type;
+(void)initialize;
+(void)_initPBTableOfGameMsgItem;
-(void)dealloc;
-(id)description;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface UserRankInfo : NSObject {
	unsigned long number;
	NSString* userName;
	unsigned long rank;
	unsigned long score;
}
@property(assign, nonatomic) unsigned long score;
@property(assign, nonatomic) unsigned long rank;
@property(retain, nonatomic) NSString* userName;
@property(assign, nonatomic) unsigned long number;
-(void)dealloc;
-(id)init;
@end

@interface GameIntroInfo : NSObject <PBCoding> {
	NSString* appID;
	NSMutableArray* gameScreenShotUrlList;
	NSMutableArray* gameDescItemList;
}
@property(retain, nonatomic) NSMutableArray* gameDescItemList;
@property(retain, nonatomic) NSMutableArray* gameScreenShotUrlList;
@property(retain, nonatomic) NSString* appID;
+(void)initialize;
+(void)_initPBTableOfGameIntroInfo;
-(void)dealloc;
-(void)fromXML:(id)xml;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface GameDescItem : NSObject <PBCoding> {
	NSString* title;
	NSString* desc;
}
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* title;
+(void)initialize;
+(void)_initPBTableOfGameDescItem;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface GameSetting : NSObject <PBCoding> {
	unsigned long lastPreGetRecommendAppsTime;
}
@property(assign, nonatomic) unsigned long lastPreGetRecommendAppsTime;
+(void)initialize;
+(void)_initPBTableOfGameSetting;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface GameCenterMgr : MMObject <PBMessageObserverDelegate, IAppDataExt> {
	NSMutableArray* _gameRecommandList;
	NSMutableArray* _gameIntroList;
	NSMutableArray* _gameAdList;
	NSMutableArray* _gameLaunchList;
	NSMutableArray* _gameRunningCgiType;
	MMDelegateProxy<GameCenterMgrDelegate>* _delegate;
	BOOL _gameRecommandLoaded;
	BOOL _gameIntroLoaded;
	BOOL _gameAdLoaded;
}
@property(assign, nonatomic) MMDelegateProxy<GameCenterMgrDelegate>* delegate;
-(void)OnGotBizAppInfo;
-(void)OnGotAppPersonalInfoList:(id)list errType:(int)type;
-(void)saveGameAdList;
-(BOOL)loadGameAdList;
-(void)saveGameIntroList;
-(BOOL)loadGameIntroList;
-(void)saveGameRecommand;
-(BOOL)loadGameRecommand;
-(void)removeAllLaunchGame;
-(void)addLaunchGame:(id)game;
-(void)tryUpdateLaunchGamePersonalInfo;
-(void)updateGamePersonalInfoList:(id)list;
-(void)dealloc;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)structCGI:(id)cgi withType:(unsigned long)type;
-(void)addRecommandList:(id)list;
-(BOOL)updateSuggestAppList:(int)list withOffset:(unsigned long)offset withLimit:(unsigned long)limit;
-(id)getGameAdList;
-(id)getGameRecommandFirstPage;
-(BOOL)UpdateGameIntroList:(id)list;
-(id)getGameIntroInfoWithAppID:(id)appID;
-(void)removeCgiType:(unsigned long)type;
-(BOOL)isCgiTypeRunning:(unsigned long)running;
-(id)init;
@end

@interface GameNotifyMsgsMgr : MMObject <IMsgExt> {
	NSMutableArray* _messageQueue;
	NSMutableArray* _unreadMsgQueue;
	BOOL _needWriteBackMsgs;
	BOOL _needLoadMsgs;
	NSMutableDictionary* _dicAppStatus;
	NSMutableArray* _newAppQueue;
	BOOL _needWriteBackApps;
	BOOL _needLoadApps;
	MMDelegateProxy<GameNotifyMsgsMgrDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<GameNotifyMsgsMgrDelegate>* delegate;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)markAppListRead:(id)read;
-(void)markAppNotNew:(id)aNew;
-(id)getNewAppDict;
-(BOOL)isNewApp:(id)app;
-(id)getAllNewApps;
-(void)markMessageListRead:(id)read;
-(void)deleteGameMsg:(id)msg;
-(void)deleteAllMessages;
-(id)getMessagesFrom:(id)from maxCount:(unsigned long)count;
-(unsigned)getAllMessagesCount;
-(id)getLatestUnreadMessage;
-(id)getUnreadMessages;
-(unsigned)getUnreadMessagesCount;
-(BOOL)hasSameMsg:(id)msg;
-(BOOL)hasUnreadMessages;
-(void)dealloc;
-(id)init;
-(void)saveNewApps;
-(void)loadNewApps;
-(void)trySaveApps;
-(void)tryLoadApps;
-(void)saveOneMsg:(id)msg;
-(void)trySaveMsgs;
-(void)tryLoadMsgs;
-(id)pathForNewApps;
-(id)pathForApps;
-(id)pathForMsgs;
@end

@interface GameStatMgr : MMService <MMService, PBMessageObserverDelegate> {
	unsigned long _networkType;
	NSString* _UUID;
	NSMutableDictionary* _gameLaunchTime;
	NSMutableDictionary* _gameDescSDK;
	BOOL _appInfoExtendLoaded;
}
@property(retain, nonatomic) NSMutableDictionary* gameDescSDK;
@property(retain, nonatomic) NSMutableDictionary* gameLaunchTime;
@property(retain, nonatomic) NSString* UUID;
@property(assign, nonatomic) unsigned long networkType;
-(BOOL)writeToFile:(id)file data:(id)data;
-(BOOL)loadAppInfoExtend;
-(void)saveAppInfoExtend;
-(id)convertStr:(id)str;
-(BOOL)isGameForStat:(id)stat;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)uploadGameReport:(unsigned long)report withLogExt:(id)logExt;
-(void)statClickGameCenterTip;
-(void)statViewGameCenterUnreadMsg;
-(id)getGameCenterUnreadMsgString;
-(void)statViewGameCenter;
-(void)statDiffAccountShare:(id)share appID:(id)anId withOpID:(unsigned long)opID;
-(void)statGameMsgView:(unsigned long)view withSource:(unsigned long)source;
-(void)statGameCenterClick:(id)click scenc:(int)scenc opType:(int)type fromUsrName:(id)usrName msgType:(unsigned long)type5 msgID:(unsigned long)anId sourceScenc:(int)scenc7;
-(void)statMsgDetailViewGameRankMore:(id)more sourceScene:(int)scene;
-(void)statMsgDetailView:(id)view sourceScene:(int)scene;
-(void)statGameRankMore:(id)more sourceScene:(int)scene;
-(void)statGameIntroList:(id)list sourceScene:(int)scene;
-(void)statGameRankList:(id)list sourceScene:(int)scene;
-(void)statGameDetailView:(id)view sourceScene:(int)scene;
-(void)statGameSettingDetailView:(id)view isReceived:(BOOL)received;
-(void)statDeleteMsgInConversation:(id)conversation;
-(void)statRefuseMsgInGameSettingView:(id)gameSettingView isReceived:(BOOL)received;
-(void)statRefuseMsgInConversation:(id)conversation isReceived:(BOOL)received;
-(void)statLoadMoreGameMsgs:(unsigned long)msgs endTime:(unsigned long)time count:(unsigned long)count;
-(void)statCleanGameMsgs:(unsigned long)msgs endTime:(unsigned long)time count:(unsigned long)count;
-(void)statGameMsgListReadStatus:(id)status;
-(void)statClickTimeLineTextTail:(id)tail opType:(int)type;
-(void)statClickTimeLineMessage:(id)message isSource:(BOOL)source;
-(void)statClickInConversation:(id)conversation isSource:(BOOL)source;
-(void)statShowInAD:(id)ad;
-(void)statShowConversation:(id)conversation;
-(void)statShowTimeLineMessage:(id)message;
-(void)endStatAppInfoExtend;
-(void)statAppInfoExtend:(id)extend withLaunchTime:(id)launchTime withAppDescSDK:(id)appDescSDK;
-(void)startStatAppInfoExtend;
-(void)dealloc;
-(id)init;
@end

@interface GameUtil : MMObject {
}
+(void)saveGameSetting:(id)setting;
+(id)getGameSetting;
+(id)pathForGameSetting;
+(id)getShowContentForGameMsg:(id)gameMsg;
+(id)getUserGameRootDir;
@end

@interface GoogleContactInfoAssist : PluginContactInfoAssist {
}
-(void)uninstallPlugin;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell row:(unsigned)row section:(unsigned long)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)getPluginIntro;
-(void)initHeaderView;
@end

@interface EmoticonRecommendMgr : MMService <PBMessageObserverDelegate, MMService, IMsgExt, IEmoticonPackageMgrExt, EmoticonStoreItemExt> {
	unsigned long m_eventID;
}
-(void)onServiceClearData;
-(void)setRecommendListCacheWithItemList:(id)itemList;
-(id)getRecommendListCache;
-(void)dealloc;
-(id)pathForRecommendListCache;
-(id)pathForNewCountFile;
-(id)basePathForEmoticonRecommend;
-(void)OnEmoticonStoreItemInstallFinished:(id)finished;
-(void)OnEmoticonPackageDownloadStatusChanged:(id)changed IsDownloaded:(BOOL)downloaded;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)OnGetEmoticonRecommendList:(id)list;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(unsigned long)getRecommendListFromServer;
-(BOOL)UpdateEmoticonRecommendList;
-(id)GetEmoticonRecommendList;
-(BOOL)ClearNew;
-(BOOL)RemoveNewFile;
-(BOOL)HasNew;
-(id)init;
-(void)onServiceInit;
@end

@interface EmoticonRecommendCache : NSObject <PBCoding> {
	NSMutableArray* itemList;
}
@property(retain, nonatomic) NSMutableArray* itemList;
+(void)initialize;
+(void)_initPBTableOfEmoticonRecommendCache;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface GameUserRankListMgr : MMObject <PBMessageObserverDelegate> {
	NSMutableDictionary* _dicAppUserRankInfos;
	NSMutableDictionary* _dicAppFriendsCount;
	NSMutableArray* _arrAppIDGettingRankList;
	MMDelegateProxy<GameUserRankListMgrDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<GameUserRankListMgrDelegate>* delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)handleResponseForGetGameRankList:(id)getGameRankList;
-(BOOL)structCGI:(id)cgi withType:(unsigned long)type;
-(BOOL)pullUserRankInfosByAppID:(id)anId;
-(void)deleteUserRankInfosByAppID:(id)anId;
-(id)getSelfRankInfoByAppID:(id)anId;
-(id)getUserRankInfosFrom:(id)from appID:(id)anId maxCount:(unsigned long)count;
-(unsigned)getRemainRankInfoCountFrom:(id)from appID:(id)anId;
-(unsigned)getUserRankInfosCount:(id)count;
-(unsigned)getFriendsCount:(id)count;
-(void)dealloc;
-(id)init;
@end

@interface WCCustomImgParser : BaseParser {
	UIFont* _font;
	NSString* _nsImgSrc;
}
@property(retain, nonatomic) UIFont* font;
+(id)newInstance;
-(void)dealloc;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(id)styleStringForContent:(id)content withParserPosition:(NSParserPosition)parserPosition outputLastPosition:(NSParserPosition*)position;
-(id)getImageStylesForString:(id)string withStyleString:(id)styleString;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
-(id)getImage;
-(void)setImageSrc:(id)src;
@end

@interface WCCustomLinkParser : TextParser {
	NSString* _url;
	NSString* _sourceUrl;
	UIColor* _highlightedColor;
	BOOL _bBackgroundEnabled;
}
@property(retain, nonatomic) NSString* sourceUrl;
@property(retain, nonatomic) NSString* url;
+(id)newInstance;
-(void)dealloc;
-(id)attributeStringForContent:(id)content;
-(id)getStyle;
-(id)getStylesForString:(id)string withStyleString:(id)styleString;
-(id)styleStringForContent:(id)content withParserPosition:(NSParserPosition)parserPosition outputLastPosition:(NSParserPosition*)position;
-(id)stylesForString:(id)string withRange:(NSRange)range withParserPosition:(NSParserPosition*)parserPosition;
-(NSRange)rangeOfObjectInString:(id)string withRange:(NSRange)range;
-(id)init;
@end

@interface PurchasedEmoticonNoDataView : MMUIView {
}
-(id)initWithFrame:(CGRect)frame;
@end

@interface EmoticonTabItem : NSObject {
	NSString* packageId;
	NSString* iconUrl;
	unsigned long downloadStatus;
	int type;
	NSString* panelUrl;
}
@property(assign, nonatomic) int type;
@property(assign, nonatomic) unsigned long downloadStatus;
@property(retain, nonatomic) NSString* panelUrl;
@property(retain, nonatomic) NSString* iconUrl;
@property(retain, nonatomic) NSString* packageId;
-(void)dealloc;
-(id)init;
@end

@interface CustomEmoticonWrap : NSObject {
	int m_type;
	CEmoticonWrap* m_wrap;
	BOOL m_isMarkDelete;
	UIView* m_markDeleteView;
}
@property(retain, nonatomic) UIView* m_markDeleteView;
@property(assign, nonatomic) BOOL m_isMarkDelete;
@property(retain, nonatomic) CEmoticonWrap* m_wrap;
@property(assign, nonatomic) int m_type;
-(id)init;
-(void)dealloc;
@end

@interface CustomEmoticonDetailViewController : MMUIViewController <UIScrollViewDelegate, MMGridViewDataSource, MMGridViewActionDelegate, UINavigationControllerDelegate, UIActionSheetDelegate, UIAlertViewDelegate, IEmoticonMgrExt, MMImagePickerManagerDelegate> {
	int m_mode;
	unsigned long m_currentIndex;
	MMGridView* m_gridView;
	UIImageView* m_bottomBar;
	NSMutableArray* m_arrEmoticon;
	MMGridViewLayoutVerticalStrategy* m_layoutStrategy;
}
@property(retain, nonatomic) MMGridViewLayoutVerticalStrategy* m_layoutStrategy;
@property(retain, nonatomic) NSMutableArray* m_arrEmoticon;
@property(retain, nonatomic) UIImageView* m_bottomBar;
@property(retain, nonatomic) MMGridView* m_gridView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)updateBottomDeleteButton;
-(void)MMGridView:(id)view didTapOnItemAtIndex:(int)index;
-(unsigned long)currentEmoticonCount;
-(unsigned long)markDeleteCount;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(id)MMGridView:(id)view cellForItemAtIndex:(int)index;
-(CGSize)MMGridView:(id)view sizeForItemsInInterfaceOrientation:(int)interfaceOrientation;
-(int)numberOfItemsInMMGridView:(id)mmgridView;
-(void)OnUpdateEmoticonList;
-(void)reloadData;
-(void)onAddCustomEmoticon;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)deleteEmoticon;
-(void)onDeleteEmoticonConfirm;
-(void)onGotoNormalMode;
-(BOOL)hasAnyEmoticonMarked;
-(void)onGotoDeleteMode;
-(void)BackButtonDown:(id)down;
-(void)initView;
-(void)OnCancelModalView:(id)view;
-(id)createDeleteMarkView;
-(void)initData;
-(void)viewDidLoad;
-(id)init;
-(void)dealloc;
@end

@interface EmoticonManageViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, IEmoticonPackageMgrExt, UIActionSheetDelegate> {
	NSString* m_selectedPid;
	NSMutableArray* m_arrTableData;
	NSMutableArray* m_arrExistLocalPackage;
	NSMutableArray* m_arrOtherPackage;
	unsigned long m_extrance;
	UILabel* m_tipsLabel;
	BOOL m_isDeleteMode;
	BOOL m_hideOtherSectoin;
	MMTableView* m_tableView;
}
@property(assign, nonatomic) BOOL m_isDeleteMode;
@property(retain, nonatomic) UILabel* m_tipsLabel;
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_arrOtherPackage;
@property(retain, nonatomic) NSMutableArray* m_arrExistLocalPackage;
@property(retain, nonatomic) NSString* m_selectedPid;
@property(assign, nonatomic) unsigned long m_extrance;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)OnUpdateEmoticonPackageList;
-(void)onGotoNormalMode;
-(void)onGotoDeleteMode;
-(BOOL)isInExistLocalSecticon:(int)existLocalSecticon;
-(void)reloadData;
-(void)updateEditButtonStatus;
-(BOOL)isDeleteMode;
-(void)initView;
-(void)loadDataFromDB;
-(void)initData;
-(void)viewDidLoad;
-(id)init;
-(void)dealloc;
@end

@interface CrashReportInfo : NSObject <NSCoding> {
	unsigned long m_uiVersion;
	unsigned long m_uiReportCount;
	unsigned long m_uiReportSuccessCount;
}
@property(assign, nonatomic) unsigned long m_uiReportSuccessCount;
@property(assign, nonatomic) unsigned long m_uiReportCount;
@property(assign, nonatomic) unsigned long m_uiVersion;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
-(void)preInit;
@end

@interface MMCrashReportConnection : MMObject {
	MMDelegateProxy<crashReportConnectionDelegate>* m_delegate;
	NSURLConnection* m_ucReport;
	MMCrashReportWrap* m_wrapCrash;
	unsigned long m_uiRetStatusCode;
	NSTimer* m_tmCheckTimeOut;
	int m_eReportType;
	BOOL m_bTimeOut;
}
@property(assign, nonatomic) BOOL m_bTimeOut;
@property(retain, nonatomic) NSTimer* m_tmCheckTimeOut;
@property(retain, nonatomic) MMCrashReportWrap* m_wrapCrash;
@property(assign, nonatomic) MMDelegateProxy<crashReportConnectionDelegate>* m_delegate;
@property(retain, nonatomic) NSURLConnection* m_ucReport;
-(void)ReportTimeOut;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(BOOL)Connect;
-(id)EncodePack:(id)pack Key:(basic_string<char, std::char_traits<char>, std::allocator<char> >*)key;
-(BOOL)uploadCrash:(id)crash reportType:(int)type;
-(void)CancelUrlConnection;
-(void)dealloc;
-(id)init;
@end

@interface MMCrashReportWrap : NSObject {
	NSString* m_nsCrashUsrName;
	unsigned long m_uiCrashVersion;
	NSData* m_dtCrashData;
}
@property(retain, nonatomic) NSData* m_dtCrashData;
@property(assign, nonatomic) unsigned long m_uiCrashVersion;
@property(retain, nonatomic) NSString* m_nsCrashUsrName;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountFacebookControlLogic : WCAccountLoginControlLogic <IMMFacebookMgrExt> {
}
-(void)onLoginFacebookBegan:(id)began;
-(void)onFBDidNotLogin:(BOOL)onFB;
-(void)stopLogic;
-(void)startLogic;
-(void)pause;
@end

@interface TextFloatPreview : MMUIWindow <ILinkEventExt, scrollViewDelegate> {
	UIView* m_oBackView;
	UIButton* m_view;
	UIImageView* m_headerMask;
	MMScrollView* m_oScrollView;
	RichTextView* m_oRichTextView;
	MMDelegateProxy<ILinkEventExt>* m_linkDelegate;
	CGPoint m_origin;
	int deviceOrientation;
	BOOL _bNeedRebuildTextView;
	BOOL m_bHidden;
	NSString* _nsContent;
	UIFont* _oFont;
	unsigned _parserType;
}
@property(assign, nonatomic) unsigned parserType;
@property(retain, nonatomic) UIFont* oFont;
@property(retain, nonatomic) NSString* nsContent;
+(void)preViewContent:(id)content fromFrame:(CGRect)frame fontSize:(float)size;
-(id).cxx_construct;
-(BOOL)respondsToSelector:(SEL)selector;
-(id)forwardingTargetForSelector:(SEL)selector;
-(void)hideWithAnimate:(BOOL)animate;
-(void)showWithAnimate:(BOOL)animate;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)onSingleTap;
-(void)setOriginFrame:(CGRect)frame;
-(void)setContent:(id)content;
-(void)updateTextView;
-(void)setLinkDelegate:(id)delegate;
-(id)getTextView;
-(void)dealloc;
-(void)layoutSubviews;
-(void)receivedDidRotateNotification;
-(id)init;
-(void)rotateToCurrentOrientation;
-(void)rotateToOrientation:(int)orientation;
@end

@interface WCPlainTextTipFullScreenView : MMUIView {
	MMDelegateProxy<WCPlainTextTipFullScreenViewDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCPlainTextTipFullScreenViewDelegate>* delegate;
-(void)showAnimation;
-(void)dealloc;
-(id)init;
-(void)initView;
-(void)onIKnowItBtnClick:(id)click;
@end

@interface WCUIAlertView : MMUIAlertView <UIAlertViewDelegate> {
	NSMutableDictionary* m_dicTarget;
	NSMutableDictionary* m_dicSel;
	id m_userData;
	timeval m_tvStart;
	id m_disMissTarget;
	SEL m_disMissSel;
}
@property(retain, nonatomic) id m_userData;
+(id)showAlertWithTitle:(id)title message:(id)message btnTitle:(id)title3 target:(id)target sel:(SEL)sel btnTitle:(id)title6 target:(id)target7 sel:(SEL)sel8 btnTitle:(id)title9 target:(id)target10 sel:(SEL)sel11;
+(id)showAlertWithTitle:(id)title message:(id)message btnTitle:(id)title3 target:(id)target sel:(SEL)sel btnTitle:(id)title6 target:(id)target7 sel:(SEL)sel8;
+(id)showAlertWithTitle:(id)title message:(id)message btnTitle:(id)title3 target:(id)target sel:(SEL)sel;
-(id).cxx_construct;
-(void)show;
-(void)setUserData:(id)data;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)addCancelBtnTitle:(id)title target:(id)target sel:(SEL)sel;
-(void)addBtnTitle:(id)title target:(id)target sel:(SEL)sel;
-(void)setDisMissTarget:(id)target sel:(SEL)sel;
-(unsigned long)getStayTime;
-(void)setStartTime;
-(void)dealloc;
-(id)initWithTitle:(id)title message:(id)message;
@end

@interface SnapshotView : UIImageView {
}
@end

@interface WXGesture : MMObject <UIGestureRecognizerDelegate> {
	MMDelegateProxy<WXGestureDelegate>* _delegate;
	BOOL _isEnable;
	struct {
		unsigned isGesturePrepared : 1;
		unsigned isTransitioning : 2;
		unsigned isTransitionCanceled : 1;
		unsigned isGestureTransitioning : 1;
	} _transitionGestureFlags;
	UIPanGestureRecognizer* internalGesture;
	SnapshotView* bottomView;
	UIView* topView;
	UIView* internalShadowView;
	float startingTranslationValue;
	float animationProgress;
	CADisplayLink* timer;
	UIViewController* curViewController;
	UIImage* fromSnap;
	SnapshotView* fakeNavBar;
	CALayer* depthLayer;
	id _animationCompletionBlock;
}
@property(copy, nonatomic) id animationCompletionBlock;
@property(retain, nonatomic) CALayer* depthLayer;
@property(retain, nonatomic) SnapshotView* fakeNavBar;
@property(retain, nonatomic) UIImage* fromSnap;
@property(assign, nonatomic) UIViewController* curViewController;
@property(retain, nonatomic) CADisplayLink* timer;
@property(assign, nonatomic) float animationProgress;
@property(assign, nonatomic) float startingTranslationValue;
@property(retain, nonatomic) UIView* internalShadowView;
@property(retain, nonatomic) UIView* topView;
@property(retain, nonatomic) SnapshotView* bottomView;
@property(retain, nonatomic) UIPanGestureRecognizer* internalGesture;
@property(assign, nonatomic) MMDelegateProxy<WXGestureDelegate>* delegate;
-(id).cxx_construct;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)panGesture:(id)gesture;
-(void)gesture:(id)gesture translation:(CGPoint)translation;
-(void)translateAnimationByTransitionX:(float)x;
-(void)beginTransitionAnimation:(int)animation completion:(id)completion;
-(void)animateTranslationByFrame;
-(void)stopGestureAnimation;
-(void)prepareGestureAnimation;
-(id)snapshotForUIView:(id)uiview;
-(id)genShadowView;
-(id)genBottomView;
-(void)setGestureIsEnable:(BOOL)enable;
-(void)dealloc;
-(id)initWithCurViewController:(id)curViewController andFromViewSnapshot:(id)viewSnapshot;
@end

@interface WXGestureMgr : MMService <MMService> {
	NSMutableDictionary* _snapshotArray;
	UIImage* _navBarSnapshot;
	UIView* _lastView;
	BOOL _isShowTabBar;
	NSNumber* _lastKey;
	BOOL lastViewExtendedLayoutIncludesOpaqueBars;
}
@property(assign, nonatomic) BOOL lastViewExtendedLayoutIncludesOpaqueBars;
@property(retain, nonatomic) NSNumber* lastKey;
@property(assign, nonatomic) BOOL isShowTabBar;
@property(retain, nonatomic) UIView* lastView;
@property(retain, nonatomic) UIImage* navBarSnapshot;
@property(retain, nonatomic) NSMutableDictionary* snapshotArray;
-(void)formLastViewsSnapshot;
-(void)onServiceReloadData;
-(void)dealloc;
-(id)init;
@end

@interface MMUIResponder : UIResponder {
}
-(void)dealloc;
@end

@interface MMWebWxSwitchView : MMUIView <UIScrollViewDelegate, scrollViewDelegate> {
	BOOL m_on;
	MMScrollView* m_scrollView;
	UIImageView* m_ballView;
	UIImageView* m_sliderView;
	UIImageView* m_bgView;
	id m_targetChange;
	SEL m_selChange;
}
@property(assign, nonatomic, setter=set_on:) BOOL m_on;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)setChangeTarget:(id)target sel:(SEL)sel;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)fixSwitch:(int)aSwitch;
-(void)dealloc;
-(id)init;
-(void)fixBall;
@end

@interface MMImagesSaver : MMObject <MMAnimationTipViewDelegate> {
	MMImageSaveTipView* m_tipView;
	BOOL isUsing;
}
@property(assign, nonatomic) BOOL isUsing;
@property(assign, nonatomic) MMImageSaveTipView* m_tipView;
+(void)freeImagesSaver;
+(id)getImagesSaver;
-(void)dealloc;
-(void)fadeShowEnd;
-(void)saveImgToPhotoAlbum:(id)photoAlbum;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(void*)info;
-(void)stopShow;
-(void)showSaveResultTip:(id)tip andText:(id)text;
-(void)initMMImageSaveTipView;
-(void)alertNoAlbumAcess;
-(BOOL)isAlbumAcessNotDetermined;
-(BOOL)isAlbumAcessGranted;
@end

@interface MMImageSaveTipView : MMUIWindow {
	MMAnimationTipView* m_tipView;
	int _currentOrientation;
}
@property(retain, nonatomic) MMAnimationTipView* m_tipView;
-(void)layoutSubviewToOrientation:(int)orientation;
-(void)rotateToOrientation:(int)orientation;
-(void)rotateToCurrentOrientation;
-(void)showSaveResultTip:(id)tip andText:(id)text andDelegate:(id)delegate;
-(void)dealloc;
-(id)initWithCustomFrame:(CGRect)customFrame;
-(id)init;
@end

@interface MMIconActionSheet : MMUIActionSheet <UIScrollViewDelegate, UIActionSheetDelegate, MMGridViewDataSource, MMGridViewActionDelegate> {
	MMDelegateProxy<MMIconActionSheetDelegate>* delegateEx;
	UIPageControl* pageControl;
	NSString* cancelButtonTitle;
	MMGridView* gridView;
	NSArray* items;
	MMGridViewLayoutHorizontalPagedLTRStrategy* layoutStrategy;
}
@property(retain, nonatomic) MMGridViewLayoutHorizontalPagedLTRStrategy* layoutStrategy;
@property(retain, nonatomic) NSArray* items;
@property(retain, nonatomic) NSString* cancelButtonTitle;
@property(assign, nonatomic) MMDelegateProxy<MMIconActionSheetDelegate>* delegateEx;
@property(retain, nonatomic) UIPageControl* pageControl;
@property(retain, nonatomic) MMGridView* gridView;
-(void)MMGridView:(id)view didTapOnItemAtIndex:(int)index;
-(id)MMGridView:(id)view cellForItemAtIndex:(int)index;
-(CGSize)MMGridView:(id)view sizeForItemsInInterfaceOrientation:(int)interfaceOrientation;
-(int)numberOfItemsInMMGridView:(id)mmgridView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)dismissWithClickedButtonIndex:(int)clickedButtonIndex animated:(BOOL)animated;
-(void)OnCancel:(id)cancel;
-(void)OnPageChanged:(id)changed;
-(void)showInView:(id)view;
-(void)setDelegate:(id)delegate;
-(void)reloadInnerView;
-(id)initWithItems:(id)items cancelButtonTitle:(id)title delegate:(id)delegate landscape:(BOOL)landscape headerView:(id)view;
-(id)initWithItems:(id)items cancelButtonTitle:(id)title delegate:(id)delegate landscape:(BOOL)landscape;
-(id)initWithItems:(id)items cancelButtonTitle:(id)title delegate:(id)delegate landscape:(BOOL)landscape title:(id)title5 description:(id)description;
-(void)dealloc;
@end

@interface MMIconActionSheetCell : UIView {
	UILabel* titleLabel;
	MMIconActionSheetContentView* contentView;
	UIImageView* imageView;
	int index;
	NSObject* userInfo;
}
@property(retain, nonatomic) NSObject* userInfo;
@property(assign, nonatomic) int index;
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) MMIconActionSheetContentView* contentView;
-(void)setEnable:(BOOL)enable;
-(void)setTitleText:(id)text;
-(float)lineHeight;
-(id)init;
-(id)initWithIndex:(int)index;
-(void)dealloc;
@end

@interface MMIconActionSheetContentView : UIView {
	BOOL highlighted;
}
@property(assign, nonatomic) BOOL highlighted;
@end

@interface NewAuthHandler : MMObject <IAppDataExt, MMWebViewDelegate, MMKernelExt, IPreEnterWechatLogicExt> {
	NSString* m_nsAppid;
	NSURL* m_url;
	UINavigationController* m_oAuthViewController;
	BOOL m_isDoing;
	NSString* _m_nsScope;
	NSString* _m_nsState;
}
@property(retain, nonatomic) NSString* m_nsState;
@property(retain, nonatomic) NSString* m_nsScope;
-(void)onPostQuit;
-(void)onPreQuit;
-(void)onKickQuit;
-(void)OnGotListAppSettingItem:(id)item errType:(int)type;
-(id)webViewFailToLoad:(id)load;
-(void)onWebViewDidFinishLoad:(id)onWebView;
-(void)onWebViewDidStartLoad:(id)onWebView;
-(void)OnOAuthCancel;
-(void)onPreEnterWechatDone;
-(void)removeOAuthView;
-(void)onRetry:(id)retry;
-(void)createOAuthView;
-(void)cancelAllHandleAndReturn3rdApp;
-(void)clearAllHandle;
-(void)cancelAllHandle;
-(id)parseURLParams;
-(void)cancelWechatConnect;
-(void)startWechatConnect:(id)connect authInfo:(id)info;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
@end

@interface FindBrandViewController : MMUIViewController <FindBrandRecommendLogicControllerDelegate> {
	unsigned long _entryFlag;
	FindBrandRecommendLogicController* _recommendLogicController;
	FindBrandSearchLogicController* _searchLogicController;
}
-(void)showContactInfoView:(id)view;
-(void)initSearchLogicController;
-(void)initListLogicController;
-(void)viewDidAppear:(BOOL)view;
-(void)initView;
-(void)viewDidLoad;
-(id)initWithEntryFlay:(unsigned long)entryFlay;
-(void)dealloc;
@end

@interface FindBrandRecommendLogicController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, PBMessageObserverDelegate> {
	MMTableView* m_tableView;
	NSMutableArray* m_sectionList;
	BOOL m_isLoadedFromCache;
	MMDelegateProxy<FindBrandRecommendLogicControllerDelegate>* m_delegate;
	FindBrandRecommendNothingToShowView* m_nothingToShowView;
}
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_sectionList;
@property(assign, nonatomic) MMDelegateProxy<FindBrandRecommendLogicControllerDelegate>* m_delegate;
-(id)GroupListConvert:(id)convert;
-(void)setBrandRecommendCacheWithGroupList:(id)groupList;
-(id)getBrandRecommendCache;
-(id)pathForBrandRecommendCache;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnGetBrandRecommendList:(id)list eventID:(unsigned long)anId;
-(BOOL)getBrandRecommendList;
-(void)updateResultView;
-(void)makeCell:(id)cell contact:(id)contact;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)initWithParentVC:(id)parentVC;
-(void)dealloc;
@end

@interface FindBrandSearchLogicController : MMObject <MMSearchBarDelegate, PBMessageObserverDelegate, UIAlertViewDelegate, MMRefreshTableFooterDelegate> {
	MMSearchBar* m_searchBar;
	WCTimeLineFooterView* m_footerView;
	NSMutableArray* m_searchContactList;
	NSString* m_searchName;
	NSMutableArray* m_recommendContactList;
	NSData* m_searchReqBuf;
	unsigned long m_uiStatus;
	unsigned long m_entryFlag;
}
@property(retain, nonatomic) NSData* m_searchReqBuf;
@property(retain, nonatomic) NSString* m_searchName;
@property(retain, nonatomic) WCTimeLineFooterView* m_footerView;
@property(retain, nonatomic) NSMutableArray* m_recommendContactList;
@property(retain, nonatomic) NSMutableArray* m_searchContactList;
@property(retain, nonatomic) MMSearchBar* m_searchBar;
-(id)ContactsConvert:(id)convert;
-(unsigned long)getGo2ProfileScence:(id)scence;
-(void)reloadTableViewData;
-(void)resetFooterView;
-(void)resetAllData;
-(void)hiddenFooterView;
-(void)shownFooterView;
-(BOOL)isRecommendCell:(id)cell;
-(BOOL)isLoadingCell:(id)cell;
-(BOOL)isSearchCell:(id)cell;
-(BOOL)isContactCell:(id)cell;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)onUpdateRecommendCellFoldStatus;
-(void)onUpdateSearchCellLoadingStatus;
-(void)onGotoBrandCellProfile:(id)profile;
-(void)makeCell:(id)cell fold:(id)fold;
-(void)makeCell:(id)cell loading:(id)loading;
-(void)makeCell:(id)cell search:(id)search;
-(void)makeCell:(id)cell contact:(id)contact;
-(void)didScrollViewScroll:(id)scroll;
-(void)mmSearchDisplayControllerDidEndSearch;
-(void)mmsearchBarTextDidBeginEditing:(id)mmsearchBarText;
-(void)mmsearchBarSearchButtonClicked:(id)clicked;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)mmSearchDisplayControllerWillEndSearch;
-(void)SearchBarBecomeActive;
-(void)didSearchViewTableSelect:(id)select;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnGetBrandRecommendList:(id)list eventID:(unsigned long)anId;
-(void)OnGetBrandSearchList:(id)list eventID:(unsigned long)anId;
-(BOOL)getBrandRecommendList;
-(BOOL)getBrandSearchList;
-(void)searchBrandNeedClear:(BOOL)clear;
-(void)superViewDidAppear;
-(id)initWithParentVC:(id)parentVC withEntryFlag:(unsigned long)entryFlag;
-(void)dealloc;
@end

@interface AppData : NSObject {
}
@end

@interface AuthAppItem : NSObject <PBCoding> {
	NSString* appID;
	NSString* appIconURL;
	NSString* appTypeList;
	NSString* appName;
	int appSettingFlag;
	NSString* devInfo;
	NSString* authInfo;
	NSString* extInfo;
}
@property(retain, nonatomic) NSString* extInfo;
@property(retain, nonatomic) NSString* authInfo;
@property(retain, nonatomic) NSString* devInfo;
@property(assign, nonatomic) int appSettingFlag;
@property(retain, nonatomic) NSString* appName;
@property(retain, nonatomic) NSString* appTypeList;
@property(retain, nonatomic) NSString* appIconURL;
@property(retain, nonatomic) NSString* appID;
+(void)initialize;
+(void)_initPBTableOfAuthAppItem;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface AppPersonalInfoItem : NSObject <PBCoding> {
	NSString* appID;
	NSString* infoXml;
}
@property(retain, nonatomic) NSString* infoXml;
@property(retain, nonatomic) NSString* appID;
+(void)initialize;
+(void)_initPBTableOfAppPersonalInfoItem;
-(void)dealloc;
-(id)parseXML;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface AppPersonalInfoData : NSObject {
	NSString* rank;
	BOOL shouldBold;
}
@property(assign, nonatomic) BOOL shouldBold;
@property(retain, nonatomic) NSString* rank;
-(void)dealloc;
-(id)init;
@end

@interface AppIconItem : NSObject {
	NSString* appIconUrl;
	NSString* appID;
	NSString* cmd;
}
@property(retain, nonatomic) NSString* cmd;
@property(retain, nonatomic) NSString* appID;
@property(retain, nonatomic) NSString* appIconUrl;
-(void)dealloc;
-(id)init;
@end

@interface MMAuthAppTableViewCell : MMTableViewCell {
	MMWebImageView* _iconImageView;
	UILabel* _appNameLabel;
	UILabel* _recvLabel;
}
-(void)dealloc;
-(void)updateWithAuthAppItem:(id)authAppItem;
-(id)initCell;
@end

@interface UserRankInfoView : MMUIView {
	int _style;
	UserRankInfo* _rankInfo;
}
+(CGSize)sizeForUserRankInfoView;
-(void)dealloc;
-(id)initWithRankInfo:(id)rankInfo style:(int)style;
-(void)initView;
@end

@interface MMGameIntroHeaderView : MMUIView <MMLightTabBarViewDelegate> {
	GameMsgItem* _gameMsg;
	MMLightTabBarView* _tabBar;
	MMDelegateProxy<MMGameIntroHeaderViewDelegate>* m_delegate;
}
-(void)onTabChange:(int)change;
-(void)onEnterGame;
-(void)setDelegate:(id)delegate;
-(void)setHighlightTab:(unsigned)tab withNotify:(BOOL)notify;
-(void)initWithGameMsgItem:(id)gameMsgItem showTabBar:(BOOL)bar andShowMsg:(BOOL)msg;
-(void)dealloc;
@end

@interface MMGameUserRankListViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, IGameFacadeExt> {
	GameMsgItem* _gameMsg;
	NSMutableArray* _arrUserRankInfo;
	BOOL _hasFracture;
	BOOL _hasMoreItem;
	unsigned _remainItemCount;
	BOOL _showEmptyTip;
	BOOL _showCellShadow;
	int _statScencType;
	int _statSourceSceneType;
	MMTableView* _tableView;
	UIView* _fractureCellView;
	UIButton* _fractureCellMoreButton;
	UIButton* _moreItemCellView;
	UIView* _performanceCellView;
	UILabel* _emptyTipLabel;
	UIActivityIndicatorView* _activityIndicatorView;
	NSMutableDictionary* _dicCellView;
	MMDelegateProxy<MMGameUserRankListScrollDelegate>* m_delegate;
}
-(void)onTopBarFrameChanged;
-(void)adjustView;
-(void)adjustSubviewRects;
-(void)scrollViewDidScroll:(id)scrollView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)genFractureCellContentView;
-(id)genMoreCellContentView;
-(id)genPerformanceCellContentView;
-(id)genNormalCellContentViewAtIndexPath:(id)indexPath;
-(void)onGetUserRankListFail:(unsigned long)fail appID:(id)anId;
-(void)onGetUserRankListSuccess:(id)success count:(unsigned)count hasReportScore:(BOOL)score;
-(float)getContentHeight;
-(void)setScrollOffset:(float)offset;
-(float)getScrollOffset;
-(void)setScrollDelegate:(id)delegate;
-(void)viewDidLoad;
-(void)dealloc;
-(void)resetIndicatorFrame;
-(void)removeTableViewHeaderView;
-(void)setTableViewHeaderView:(id)view;
-(id)initWithGameMsg:(id)gameMsg;
-(void)initView;
-(void)onLoadMoreData;
-(void)pullData;
-(void)setSourceSceneType:(int)type;
-(void)setStatSceneType:(int)type;
-(void)showTopShadow;
-(void)setFrame:(CGRect)frame;
-(void)refreshTableView;
-(void)loadMoreData;
-(id)init;
@end

@interface MMLightTabBarView : MMUIView {
	MMDelegateProxy<MMLightTabBarViewDelegate>* m_delegate;
}
-(void)onTouchTab:(id)tab;
-(void)setHighlight:(unsigned)highlight withNotify:(BOOL)notify;
-(void)setHighlight:(unsigned)highlight;
-(void)setTabBarButtonWithStrArray:(id)strArray highlighted:(unsigned)highlighted;
-(void)setDelegate:(id)delegate;
-(id)initWithFrame:(CGRect)frame;
-(void)dealloc;
@end

@interface MMAuthAppDetailViewController : MMUIViewController <UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource, IAppDataExt> {
	AuthAppItem* _authAppItem;
	BOOL _isResvMsg;
	MMTableView* _detailTableView;
	UIView* _infoView;
	MMWebImageView* _iconImageView;
	UILabel* _appNameLabel;
	UILabel* _devInfoLabel;
	UIView* _authView;
	UILabel* _authInfoTipLabel;
	UILabel* _authInfoLabel;
	UISwitch* _oSwitch;
	UIButton* _unAuthButton;
	MMLoadingView* _loadingView;
	NSMutableArray* _authInfoAry;
}
@property(retain, nonatomic) NSMutableArray* authInfoAry;
-(void)stopLoadingAndShowOK:(id)ok;
-(void)stopLoadingAndShowError:(id)error;
-(void)stopLoading;
-(void)startLoadingCancelAuth;
-(void)startLoadingRecvMsg;
-(void)startLoading;
-(void)OnUnAuthAppFlag:(id)flag errType:(int)type;
-(void)OnSetAppSettingRecvMsgFlag:(id)flag errType:(int)type;
-(void)OnUpdateAppRecvMsgState:(id)state appSettingFlag:(int)flag errType:(int)type;
-(void)OnUpdateAppAuthState:(id)state errType:(int)type;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidDisappear:(BOOL)view;
-(void)dealloc;
-(id)initWithAppItem:(id)appItem;
-(void)viewDidLoad;
-(void)initData;
-(void)initView;
-(void)initLoadingView;
-(void)initTableView;
-(void)initAuthInfoView;
-(void)initInfoView;
-(void)onSwitchValueChange:(id)change;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showAuthActionSheet;
-(void)parseXML:(id)xml;
@end

@interface MMAuthAppListViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, IAppDataExt> {
	MMTableView* _appListTableView;
	UILabel* _tipLabel;
	UIImageView* _tipImageView;
	MMLoadingView* _loadingView;
	NSMutableArray* _arrAuthAppList;
}
-(void)stopLoadingAndShowOK:(id)ok;
-(void)stopLoadingAndShowError:(id)error;
-(void)stopLoading;
-(void)startLoadingNonBlock;
-(void)startLoading;
-(void)OnUpdateAppRecvMsgState:(id)state appSettingFlag:(int)flag errType:(int)type;
-(void)OnUnAuthAppFlag:(id)flag errType:(int)type;
-(void)OnSetAppSettingRecvMsgFlag:(id)flag errType:(int)type;
-(void)OnGotAuthAppList:(id)list errType:(int)type;
-(void)viewWillAppear:(BOOL)view;
-(void)reloadData;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)getAuthAppLsit;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initData;
-(void)initView;
-(void)initLoadingView;
-(void)initAppListTableView;
-(void)initTipView;
-(void)hiddenNoResultTip;
-(void)showNoResultTip;
@end

@interface MMGameMsgListViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, tableViewDelegate, UIActionSheetDelegate, MMRefreshTableFooterDelegate> {
	MMTableView* _tableView;
	WCTimeLineFooterView* _footerView;
	NSMutableArray* _arrMessage;
	BOOL _hasMoreItems;
	BOOL _loadUnreadOnly;
	NSMutableDictionary* _dicCells;
	NSMutableDictionary* _dicCellHeights;
	int _statSourceScene;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)tryOpenApp:(id)app;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)getNormalCellContentViewHeightAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(void)showEdit:(unsigned long)edit show:(BOOL)show;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)genLoadMoreCellContentView;
-(id)genNormalCellContentViewAtIndexPath:(id)indexPath;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)onLoadMore;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)didReceiveLocalMemoryWarning:(id)warning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(void)initView;
-(void)updateTableFooterView;
-(void)loadMoreData;
-(void)initData;
-(void)addGameMessagesWithArray:(id)array;
-(void)onClearList;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)clearList;
-(void)setSourceScene:(int)scene;
@end

@interface MMGameRecommandViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, UIScrollViewDelegate, UIActionSheetDelegate, MMRefreshTableFooterDelegate, IGameFacadeExt, UIGestureRecognizerDelegate> {
	NSMutableArray* _arrRecommendedApp;
	NSMutableArray* _arrInstalledApp;
	NSMutableArray* _arrUnInstalledApp;
	NSMutableArray* _adAppList;
	map<int, GameRecommandViewSectionType, std::less<int>, std::allocator<std::pair<const int, GameRecommandViewSectionType> > > _sectionIndexToType;
	NSMutableDictionary* _dicInstalledAppView;
	NSMutableDictionary* _dicUnInstalledAppCell;
	WCTimeLineFooterView* _tableFooterView;
	UIView* _tableDefaultFooterView;
	MMTableView* _mainTabelView;
	MMUIButton* _messageTipView;
	MMScrollView* _adScrollView;
	UIView* _headerView;
	UIPageControl* _adPageControl;
	unsigned long _unreadMessageCount;
}
@property(retain, nonatomic) NSMutableArray* adAppList;
@property(retain, nonatomic) NSMutableArray* arrRecommendedApp;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)OnLongPressGesture:(id)gesture;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)applicationDidBecomeActiveNotification:(id)application;
-(void)onGameNewAppCountChanged;
-(void)onGameMessageUnReadCountChanged;
-(void)onGotBizAppInfo;
-(void)onUpdateGamePersonalInfoList;
-(void)onGotRcAppList:(unsigned long)list rcAppList:(id)list2 adAppList:(id)list3 isInternalDownload:(BOOL)download errType:(int)type;
-(void)forceGetAppInfo;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)genUnInstalledCell:(id)cell indexPath:(id)path;
-(void)genInstalledCell:(id)cell indexPath:(id)path;
-(void)genMessageCell:(id)cell indexPath:(id)path;
-(void)onOperate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)showSettingView;
-(void)showMessageListByNewMsg;
-(void)showMessageListByActionSheet;
-(void)onTouchInstalledGame:(id)game;
-(void)handleClickEvents:(id)events withAppDownloadURL:(id)appDownloadURL scenc:(int)scenc;
-(void)reloadGameRecommandView;
-(void)reloadGameRecommandTableView;
-(void)refreshUnInstalledGameList;
-(void)refreshInstalledGameList;
-(void)checkNewMessages;
-(void)hideMessageTip;
-(BOOL)hasUnreadMessages;
-(void)didReceiveLocalMemoryWarning:(id)warning;
-(void)onPageControllerChangePage:(id)page;
-(void)touchAdView;
-(void)showAdBar;
-(void)willDisappear;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(void)forceUpdateNewGameInfo;
-(BOOL)loadMoreRcApp;
-(void)loadFirstPageRcApp;
-(void)initData;
-(void)initView;
-(void)initMainTableView;
@end

@interface RoomContactSelectViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	NSMutableArray* m_arrRoomMembers;
	CBaseContact* m_roomContact;
	id<RoomContactSelectDelegate> m_delegate;
}
@property(assign, nonatomic) id<RoomContactSelectDelegate> m_delegate;
@property(retain, nonatomic) CBaseContact* m_roomContact;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onCancel:(id)cancel;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initData;
@end

@interface MMGameDetailViewController : MMUIViewController <MMGameIntroHeaderViewDelegate, MMLightTabBarViewDelegate, MMGameUserRankListScrollDelegate, MMGameIntroScrollDelegate> {
	MMGameIntroHeaderView* _introHeaderView;
	MMGameIntroViewController* _introViewController;
	MMGameUserRankListViewController* _rankTableViewController;
	MMLightTabBarView* _floatTabbar;
	UIImageView* _shadowLine;
	GameMsgItem* _gameMsg;
	int _scene;
}
-(void)tableViewDidScroll:(id)tableView;
-(void)onTabChange:(int)change;
-(void)onEnterButtonClick;
-(void)onTabBarChangeTo:(unsigned)to;
-(void)checkFloatTabbarForScrollOffset:(unsigned)scrollOffset;
-(void)changeToTab:(unsigned)tab;
-(void)initHeadView;
-(void)viewDidLoad;
-(void)dealloc;
-(void)setSourceScene:(int)scene;
-(id)initWithGameMsg:(id)gameMsg;
@end

@interface MMGameIntroViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, ProductKeyValueTableCellDelegate, IGameFacadeExt> {
	GameIntroInfo* _gameIntro;
	MMTableView* _tableView;
	MMPictureGallery* _pictureGallery;
	NSMutableDictionary* _descCellDict;
	UIActivityIndicatorView* _activityIndicatorView;
	BOOL _isLoading;
	NSString* _appId;
	MMDelegateProxy<MMGameIntroScrollDelegate>* m_delegate;
}
-(float)getContentHeight;
-(void)setScrollOffset:(float)offset;
-(float)getScrollOffset;
-(void)onGotGameIntroList:(id)list errType:(int)type;
-(void)reloadView;
-(void)onCellViewMore:(id)more;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)resetDescCell:(id)cell atRow:(int)row withShadow:(BOOL)shadow;
-(void)resetImageGalleryCell:(id)cell;
-(void)setFrame:(CGRect)frame;
-(void)setScrollDelegate:(id)delegate;
-(void)removeTableViewHeaderView;
-(void)setTableViewHeaderView:(id)view;
-(void)dealloc;
-(void)resetIndicatorFrame;
-(void)viewDidLoad;
-(id)initWithAppId:(id)appId;
@end

@interface MMGameMsgDetailViewController : MMUIViewController <MMGameIntroHeaderViewDelegate> {
	MMGameIntroHeaderView* _introHeaderView;
	MMGameUserRankListViewController* _rankTableViewController;
	GameMsgItem* _gameMsg;
	int _scene;
}
-(void)onEnterButtonClick;
-(void)onTopBarFrameChanged;
-(void)viewDidLoad;
-(void)setSourceScene:(int)scene;
-(id)initWithGameMsg:(id)gameMsg;
-(void)dealloc;
@end

@interface MMPictureGallery : MMUIView <UIScrollViewDelegate> {
	MMScrollView* _scrollView;
	NSArray* _imageUrlArray;
}
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(float)getSlotOffset:(unsigned)offset;
-(unsigned)checkSlotByOffset:(float)offset andVelocity:(CGPoint)velocity;
-(void)dealloc;
-(void)setImageUrlArray:(id)array;
-(id)initWithFrame:(CGRect)frame;
@end

@interface RecordPermissionCheckMgr : MMService <MMService> {
	int m_CheckPermissionFlag;
}
-(void)callRecordDenied;
-(void)callRecordPermissioned;
-(void)CheckRecordPermission;
@end

@interface FindBrandRecommendNothingToShowView : MMUIView {
}
-(id)init;
-(void)dealloc;
@end

@interface BaseScanLogicController : MMObject {
	MMDelegateProxy<BaseScanLogicDelegate>* _delegate;
	MMDelegateProxy<CameraScanLogicDelegate>* _reportDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<CameraScanLogicDelegate>* reportDelegate;
@property(assign, nonatomic) MMDelegateProxy<BaseScanLogicDelegate>* delegate;
-(BOOL)shouldDoAnimationWhenDismiss;
-(void)scanOnePicture:(id)picture;
-(id)getIntroDesctiption;
-(id)getIntroTitle;
-(float)getIntroButtonTopPadding;
-(id)getIntroButtonTitle;
-(BOOL)shouldShowIntroButton;
-(BOOL)shouldHideAlertOnClicked;
-(BOOL)shouldPopFromStack;
-(BOOL)shouldStartScanAnimation;
-(float)getPreviewScale;
-(id)getLoadingText;
-(id)getAlertText;
-(id)getDescriptionText;
-(float)getDescriptionLabelTopPadding;
-(id)getInfoLabelColor;
-(id)getInfoLabelFont;
-(float)getInfoLabelTopPadding;
-(id)getInfoText;
-(CGRect)getDrawCropRect;
-(void)changePreviewScale;
-(void)stopScan;
-(void)startScan;
-(void)dealloc;
@end

@interface PhoneNumberFormatInfo : MMObject {
	NSString* leadingDigitsRegex;
	NSString* pattern;
	NSString* formatRegex;
}
@property(retain, nonatomic) NSString* formatRegex;
@property(retain, nonatomic) NSString* pattern;
@property(retain, nonatomic) NSString* leadingDigitsRegex;
-(void)dealloc;
-(id)init;
@end

@interface CountryFormatConfig : MMObject {
	NSString* nsCountryCode;
	NSString* nsISOCode;
	NSMutableArray* arrayFormats;
	unsigned long uiMinLength;
	unsigned long uiMaxLength;
	BOOL bHasLeading;
}
@property(assign, nonatomic) BOOL bHasLeading;
@property(assign, nonatomic) unsigned long uiMaxLength;
@property(assign, nonatomic) unsigned long uiMinLength;
@property(retain, nonatomic) NSMutableArray* arrayFormats;
@property(retain, nonatomic) NSString* nsISOCode;
@property(retain, nonatomic) NSString* nsCountryCode;
-(void)dealloc;
-(id)init;
@end

@interface PhoneNumberFormatLogic : MMObject {
	NSMutableDictionary* m_dicConfig;
}
-(id)getCountryCodeFromFullPhoneNum:(id)fullPhoneNum;
-(id)getFormatedForNum:(id)num countryCode:(id)code countryID:(id)anId;
-(id)formatedNumAfterTrimAutoFillNum:(id)num fullNum:(id)num2;
-(id)formatedNumForFullNum:(id)fullNum fullNum:(id)num;
-(id)autoFullLengthNum:(id)num countryInfo:(id)info;
-(id)formatInfoForPhoneNum:(id)phoneNum countryInfo:(id)info;
-(id)countrFormatConfigForCountryId:(id)countryId;
-(id)getPurePhoneNum:(id)num;
-(id)getMatch:(id)match withRegex:(id)regex;
-(BOOL)matchLeadingString:(id)string withRegex:(id)regex;
-(void)dealloc;
-(id)init;
-(void)loadConfig;
@end

@interface MMTitleView : UIView {
}
-(id)initWithFrame:(CGRect)frame;
@end

@interface DBRDBTableListViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	NSMutableArray* tableNameArray;
	BOOL isReturn;
	MMDatabase* mmdb;
}
@property(retain, nonatomic) MMDatabase* mmdb;
@property(retain, nonatomic) NSMutableArray* tableNameArray;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)updateDataWhenReturn;
-(void)dealloc;
-(void)clickRightButton;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)initTableView;
-(void)initData;
-(void)loadDatabase;
-(id)initWithDataPath:(id)dataPath;
@end

@interface DBRModifyDataViewController : MMUIViewController <UITextViewDelegate> {
	NSString* tableName;
	int rowId;
	NSString* columnName;
	NSString* content;
	UITextView* textView;
	UIBarButtonItem* rightButton;
	MMDatabase* mmdb;
}
@property(retain, nonatomic) MMDatabase* mmdb;
@property(assign) int rowId;
@property(retain, nonatomic) NSString* columnName;
@property(retain, nonatomic) NSString* tableName;
@property(retain, nonatomic) UITextView* textView;
-(void)textViewDidChange:(id)textView;
-(void)viewWillAppear:(BOOL)view;
-(void)clickRightButton;
-(void)viewDidLoad;
-(void)initView;
-(void)dealloc;
-(void)loadDatabase;
-(void)initData;
@end

@interface DBRRowDetailInfoViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	NSString* tableName;
	int rowId;
	NSMutableArray* columnNameArray;
	NSMutableArray* rowDetailInfoArray;
	BOOL isReturn;
	float colWidth1;
	float colWidth2;
	float tableRowHigh;
	float titleLabelHigh;
	MMDatabase* mmdb;
}
@property(retain, nonatomic) MMDatabase* mmdb;
@property(retain, nonatomic) NSMutableArray* rowDetailInfoArray;
@property(retain, nonatomic) NSMutableArray* columnNameArray;
@property(assign, nonatomic) int rowId;
@property(retain, nonatomic) NSString* tableName;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)updateDataWhenReturn;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)loadDatabase;
-(void)dealloc;
-(void)initData;
@end

@interface DBRRowListViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate> {
	NSString* tableName;
	NSMutableArray* columnNameArray;
	NSMutableArray* tableRowArray;
	MMTableView* m_tableView;
	int rowId;
	BOOL hasMoreData;
	BOOL dragNeedToLoadMore;
	BOOL scrollViewBeginDrag;
	BOOL isFootViewExist;
	BOOL releaceFromNeedMore;
	float footViewHigh;
	float titleLabelHigh;
	float tableRowHigh;
	float columnWith;
	int columnNum;
	int maxColumnNum;
	int dbReadStep;
	MMDatabase* mmdb;
}
@property(retain, nonatomic) MMDatabase* mmdb;
@property(retain, nonatomic) NSMutableArray* columnNameArray;
@property(retain, nonatomic) NSMutableArray* tableRowArray;
@property(retain) NSString* tableName;
-(void)performSelectorOnMainThread:(SEL)thread withObject:(id)object withObject:(id)object3 waitUntilDone:(BOOL)done;
-(void)updateDataWhenReturn;
-(void)appendTableWith:(id)with inScrollView:(id)scrollView;
-(id)getMoreData;
-(void)loadMoreEx:(id)ex;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)showFootView:(id)view;
-(void)refreshFootView:(id)view;
-(void)removeFootView:(id)view;
-(void)addFootView:(id)view;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)loadDatabase;
-(void)dealloc;
-(void)initData;
-(id)init;
@end

@interface DBRSqlCommandViewController : MMUIViewController <UITextViewDelegate> {
	UITextView* sqlTextView;
	UIBarButtonItem* rightButton;
	MMDatabase* mmdb;
}
@property(retain, nonatomic) MMDatabase* mmdb;
-(BOOL)isStringEmpty:(id)empty;
-(void)textViewDidChange:(id)textView;
-(void)viewWillAppear:(BOOL)view;
-(void)clickRightButton;
-(void)viewDidLoad;
-(void)initView;
-(void)dealloc;
@end

@interface DBRSqlResultDetailViewController : DBRRowDetailInfoViewController {
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)viewWillAppear:(BOOL)view;
-(void)loadDatabase;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithColumnNames:(id)columnNames rowDetails:(id)details;
@end

@interface DBRSqlResultViewController : DBRRowListViewController {
	NSString* sqlCommand;
	MMResultSet* result;
	BOOL isSelectCommand;
	BOOL goodResult;
}
@property(retain, nonatomic) NSString* sqlCommand;
-(void)showAlert;
-(id)getMoreData;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)isSqlSelectCommand:(id)command;
-(void)loadDatabase;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
@end

@interface DBRSqlWholeContentViewController : MMUIViewController {
	NSString* _columnName;
	NSString* _content;
}
-(void)OnXXX;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initData;
-(id)initWithColumnName:(id)columnName viewContent:(id)content;
@end

@interface InsetsLabel : UILabel {
	UIEdgeInsets _insets;
}
@property(assign, nonatomic) UIEdgeInsets insets;
-(void)drawTextInRect:(CGRect)rect;
-(id)initWithInsets:(UIEdgeInsets)insets;
-(id)initWithFrame:(CGRect)frame andInsets:(UIEdgeInsets)insets;
-(id)initWithFrame:(CGRect)frame;
@end

@interface ShakeController : MMObject <ShakeCheckerDelegate> {
	CShakeChecker* _shakeChecker;
	BOOL _bIsShakeViewShow;
	UIWindow* _shakeWindow;
	MMDelegateProxy<ShakeControllerDelegate>* _shakeControllerDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<ShakeControllerDelegate>* shakeControllerDelegate;
-(void)dealloc;
-(void)setForceEarpieceMode:(BOOL)mode;
-(void)OnShake;
-(void)onCancel:(id)cancel;
-(void)onConfirm:(id)confirm;
-(void)onTouchBackground:(id)background;
-(void)hideWindowAnimated:(BOOL)animated;
-(void)showWindowAnimated:(BOOL)animated;
-(void)StopShakeCheck;
-(void)StartShakeCheck;
-(void)Reset;
-(void)UnRegister;
-(void)Register;
-(id)init;
-(BOOL)isEarEnabled;
@end

@interface FindBrandRecommendGroup : NSObject <PBCoding> {
	NSString* m_groupName;
	NSMutableArray* m_contactList;
}
@property(retain, nonatomic) NSMutableArray* m_contactList;
@property(retain, nonatomic) NSString* m_groupName;
+(void)initialize;
+(void)_initPBTableOfFindBrandRecommendGroup;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface FindBrandRecommendCache : NSObject <PBCoding> {
	NSMutableArray* m_groupList;
}
@property(retain, nonatomic) NSMutableArray* m_groupList;
+(void)initialize;
+(void)_initPBTableOfFindBrandRecommendCache;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface MMLogViewController : MMUIViewController <ILogReportExt> {
	UIImageView* m_imgvUploadLog;
	UILabel* m_labelTip;
	UIButton* m_btnUpload;
	UIButton* m_btnFinish;
	UIView* m_roundView;
	UISwitch* m_switchView;
	UILabel* m_labelOpenLog;
	MMProgressView* m_progressView;
	UILabel* m_labelProgress;
}
-(void)UploadSuccess;
-(void)UploadFail;
-(void)OnResponse:(id)response;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)onSwitchValueChange:(id)change;
-(void)dealloc;
-(void)initView;
-(void)onShowLog;
-(void)initViewOnUploading;
-(void)onFinish;
-(void)onReportLog;
-(void)setUploadSuc;
-(void)setUploadFail;
-(void)setProgress:(id)progress;
@end

@interface MMShowHelpViewController : MMUIViewController <UIAlertViewDelegate> {
	UIScrollView* mScrollView;
}
@property(retain, nonatomic) UIScrollView* mScrollView;
-(void)OnXXX;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onJsDebug;
-(void)onUploadData;
-(void)onRecoverData;
-(void)onUpLoadLog;
-(void)onShowLog;
-(void)onRecoverDB;
-(void)onIPXX;
-(void)initData;
@end

@interface MMShowLogCellView : UIView {
	UILabel* m_lableContent;
	UILabel* m_lableModule;
	UILabel* m_lableFileName;
	UILabel* m_lableTime;
	NSString* m_nsContent;
	BOOL m_bOpen;
}
@property(assign, nonatomic) BOOL m_bOpen;
-(void)updateShowLogCellView:(BOOL)view;
-(float)getShowLogCellViewHigh;
-(void)dealloc;
-(id)initWithContene:(id)contene module:(id)module fileName:(id)name time:(id)time;
@end

@interface MMLogDataItem : NSObject {
	NSString* m_nsContent;
	NSString* m_nsModule;
	NSString* m_nsFileName;
	NSString* m_nsTime;
	NSString* m_nsKeyWord;
	UIColor* m_contentColor;
}
@property(retain, nonatomic) UIColor* m_contentColor;
@property(retain, nonatomic) NSString* m_nsTime;
@property(retain, nonatomic) NSString* m_nsFileName;
@property(retain, nonatomic) NSString* m_nsModule;
@property(retain, nonatomic) NSString* m_nsKeyWord;
@property(retain, nonatomic) NSString* m_nsContent;
-(void)dealloc;
-(id)initWithContent:(id)content;
-(id)init;
@end

@interface MMShowLogViewController : MMUIViewController <MMIconActionSheetDelegate, UITableViewDelegate, UITableViewDataSource, MMRefreshTableFooterDelegate> {
	UIWebView* m_webView;
	MMTableView* m_tableView;
	WCTimeLineFooterView* m_footerView;
	NSMutableString* m_strContent;
	NSMutableArray* m_arrLines;
	NSMutableArray* m_arrCellViews;
	NSMutableDictionary* m_dicKeyWordColor;
	int m_eLevel;
	BOOL m_bFirstLoad;
	unsigned m_fileSize;
	unsigned m_readOffset;
	unsigned m_readSize;
	BOOL m_bEndOfFile;
	NSDate* m_currentData;
	unsigned m_uDays;
}
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)genMMShowLogCellView:(id)view;
-(id)getContentString:(id)string;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)actionSheet:(id)sheet didSelectWithItem:(id)item;
-(void)onAction;
-(void)AddNewActionSheetCell2Array:(id)array WithText:(id)text WithImage:(id)image;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)reloadData;
-(void)initView;
-(void)initFooterView;
-(void)initTableView;
-(void)convertLinesOrder:(id)order;
-(id)getLog;
-(id)getLogFilePath;
-(void)dealloc;
-(id)init;
@end

@interface MMWCPayTestViewController : MMUIViewController <UITextFieldDelegate> {
	UITextField* m_cgiTextField;
	UITextView* m_hardCodeText;
}
-(void)OnXXX;
-(void)OnDataChange;
-(void)viewDidLoad;
-(void)initView;
-(void)initHardCodeData;
-(void)setHardCodeTextFor:(int)aFor andKey:(id)key;
-(void)textFieldDidEndEditing:(id)textField;
-(void)onDoneButtonClicked:(id)clicked;
-(void)onCancelButtonClicked:(id)clicked;
-(void)onOneCgiSwitchChanged:(id)changed;
-(void)onBlockSwitchChanged:(id)changed;
-(void)initData;
-(void)dealloc;
@end

@interface SettingsTestViewController : UIViewController {
	UILabel* testLabel;
	UITextField* textField;
}
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)buttonTapped:(id)tapped;
-(id)init;
@end

@interface TestCustomLocationSetting : NSObject <NSCoding> {
	BOOL isOn;
	double longitude;
	double latitude;
}
@property(assign, nonatomic) double latitude;
@property(assign, nonatomic) double longitude;
@property(assign, nonatomic) BOOL isOn;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface TestCustomLocationViewController : MMUIViewController <MMPickerViewDelegate> {
	UISwitch* aSwitch;
	UILabel* longitudeLabel;
	UITextField* longitudeTextField;
	UILabel* latitudeLabel;
	UITextField* latitudeTextField;
	MKMapView* mapView;
	MKPointAnnotation* lastAnnotation;
	BOOL isFirstTry;
	TestCustomLocationSetting* aSetting;
}
-(void)saveSetting;
-(void)loadSetting;
-(void)onDone;
-(void)viewDidLoad;
-(void)tapPress:(id)press;
-(void)setMarkWithCoord:(XXStruct_zYrK5D)coord;
-(void)dealloc;
-(id)init;
@end

@interface testDelegateCenter : NSObject {
}
-(BOOL)testOwnerDeallocDelegate;
-(BOOL)testDelegateDeallocCallBack;
-(BOOL)testPerformance;
-(BOOL)testNoProxy:(int)proxy;
-(BOOL)testWithProxy:(int)proxy;
-(BOOL)testDelegateAndOwner;
-(BOOL)testNilDelegateProxy;
-(BOOL)testDelegateSelf;
-(BOOL)testDeallocOwner;
-(BOOL)testDeallocDelegate;
-(BOOL)testOK;
-(void)testSingleProtocolEntrance;
-(void)dealloc;
-(void)testMultiProtocol;
-(void)testProtocolSort;
-(void)testGenerateKeys;
-(void)testDelegateProxy;
-(void)testMacro;
-(void)testMultiProtocolEntrance;
@end

@interface testOwner : MMObject <testProtocol> {
	MMDelegateProxy<testProtocol>* m_delegate;
	id<testProtocol> m_delegateId;
}
@property(assign, nonatomic) id<testProtocol> m_delegateId;
@property(assign, nonatomic) MMDelegateProxy<testProtocol>* m_delegate;
-(BOOL)testCallBackWithPara:(id)para testBool:(BOOL)aBool;
-(BOOL)testCallBackWithPara:(id)para testPoint:(char*)point;
-(void)testCallBackNoPara;
-(BOOL)callDelegateId;
-(BOOL)callDelegate;
-(void)dealloc;
-(id)initWithSelfDelegate;
-(id)initWithDelegate:(id)delegate;
@end

@interface testDelegate : MMObject <testProtocol> {
}
-(void)dealloc;
-(BOOL)testCallBackWithPara:(id)para testBool:(BOOL)aBool;
-(BOOL)testCallBackWithPara:(id)para testPoint:(char*)point;
-(void)testCallBackNoPara;
@end

@interface testDelegateAndOwner : MMObject <testProtocol> {
	MMDelegateProxy<testProtocol>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<testProtocol>* m_delegate;
-(BOOL)testCallBackWithPara:(id)para testBool:(BOOL)aBool;
-(BOOL)testCallBackWithPara:(id)para testPoint:(char*)point;
-(void)testCallBackNoPara;
-(BOOL)callDelegate;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

@interface specilOwner : testOwner <MMDelegateCenterExt> {
}
-(void)onClearMyDelegate:(id)delegate forProtocols:(id)protocols;
-(void)dealloc;
@end

@interface testBaseObj : NSObject {
	NSString* m_nsName;
}
@property(retain, nonatomic) NSString* m_nsName;
@end

@interface testSunObj : testBaseObj {
	NSString* _nsName;
}
@property(retain, nonatomic) NSString* m_nsName;
@end

@interface TestOwnerMulti : MMObject <MMDelegateCenterExt> {
}
-(void)onClearMyDelegate:(id)delegate forProtocols:(id)protocols;
-(void)dealloc;
-(id)init;
@end

@interface TestDelegateMulti : MMObject <TestProtocol_1, TestProtocol_2, TestProtocol_3, TestProtocol_4, TestProtocol_5> {
}
-(unsigned)test5;
-(unsigned)test4;
-(unsigned)test3;
-(unsigned)test22;
-(unsigned)test21;
-(unsigned)test1;
-(void)dealloc;
-(id)init;
@end

@interface DownloadTask : NSObject {
	int type;
	NSString* url;
	int uid;
	double addTime;
	double startTime;
	double endTime;
	unsigned long eventId;
}
@property(assign, nonatomic) unsigned long eventId;
@property(assign, nonatomic) double endTime;
@property(assign, nonatomic) double startTime;
@property(assign, nonatomic) double addTime;
@property(assign, nonatomic) int uid;
@property(retain, nonatomic) NSString* url;
@property(assign, nonatomic) int type;
@end

@interface TestDownloadQueueController : MMUIViewController <PBMessageObserverDelegate> {
	MMScrollView* mScrollView;
	UILabel* mMaxSmall;
	UILabel* mMaxBig;
	UILabel* mWaitingSmall;
	UILabel* mWaitingBig;
	UILabel* mExecutingSmall;
	UILabel* mExecutingBig;
	UILabel* mDoneSmall;
	UILabel* mDoneBig;
	UILabel* mAvgTimeSmall;
	UILabel* mAvgTimeBig;
	double totalSmallTime;
	double totalBigTime;
	UILabel* mTimeWeightSmall;
	UILabel* mTimeWeightBig;
	UILabel* mLastTaskTime;
	NSMutableArray* mSmallQueue;
	NSMutableArray* mBigQueue;
	NSMutableArray* mSmallExcute;
	NSMutableArray* mBigExcute;
	NSMutableArray* mSmallDone;
	NSMutableArray* mBigDone;
	int autoId;
	unsigned long waitingPic;
}
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)doDownloadMedia:(id)media;
-(void)addTask:(id)task ofType:(int)type;
-(void)checkTask;
-(void)updateMetre;
-(void)add5BigTask;
-(void)add50BigTask;
-(void)addOneBigTask;
-(void)add5PreviewTask;
-(void)add50PreviewTask;
-(void)addOnePreviewTask;
-(void)clearData;
-(void)bigPlus;
-(void)smallPlus;
-(void)maxMinus;
-(void)initButton;
-(void)deleteSelfHeadImg;
-(void)seprateLog;
-(void)initMetre;
-(id)addMetreItem:(id)item atX:(float)x andY:(float)y into:(id)into;
-(void)addButton:(unsigned)button name:(id)name selector:(SEL)selector;
-(void)done:(id)done;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface NewSyncService : MMService <MMService> {
	BOOL m_bNeedSync;
	BOOL m_bHasSync;
	BOOL m_bHasInit;
	unsigned long m_uiSelector;
	unsigned long m_uiSyncScene;
	NSDate* m_tLastNotify;
	NSDate* m_tLastLongConnDisconnect;
	CMMDB* m_oMMDB;
	NSString* m_nsDocPath;
	NSRecursiveLock* m_oLock;
	NSRecursiveLock* m_oHandleSyncLock;
	id<NotifyFromEventDelegate> m_delSyncHandler;
}
@property(assign) unsigned long m_uiSyncScene;
@property(assign) BOOL m_bHasSync;
@property(assign) BOOL m_bNeedSync;
-(BOOL)HandleSyncResp:(id)resp Push:(BOOL)push ShowPush:(BOOL)push3;
-(BOOL)CheckSelector:(unsigned long)selector;
-(void)SetSelector:(unsigned long)selector;
-(unsigned long)GetSelector;
-(void)ProcessStartSync;
-(void)BackGroundToForeGroundSync;
-(void)ApnsNotifySync;
-(void)NeedToSync;
-(void)NotifyToSync;
-(void)onServiceClearData;
-(void)SetLastLongConnDisconectTime:(id)time;
-(void)SetLastNotifyTime:(id)time;
-(void)InitDB:(id)db Lock:(id)lock DocPath:(id)path SyncHandlerDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
@end

@interface MMExposeResultViewController : MMUIViewController {
	UIImageView* m_iconView;
	UILabel* m_tipsLabel;
	MMDelegateProxy<MMExposeResultViewControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MMExposeResultViewControllerDelegate>* m_delegate;
-(void)onExposeDetail;
-(void)onExposeResultOK;
-(void)initRightBtn;
-(void)initDetailBtn;
-(void)initView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
@end

@interface VoipUIManager : MMService <MMService, IVOIPExt, VoipAlertViewDelegate, MMConfigMgrExt> {
	VideoVoipCallerView* m_videoVoipCallerViewController;
	VideoVoipReceiverView* m_videoVoipReceiverViewController;
	VoiceVOIPCallerViewController* m_voiceVoipCallerViewController;
	VoiceVOIPReceiverViewController* m_voiceVoipReceiverViewController;
	VoipAlertView* m_voipAlertView;
	CContact* m_tempContact;
}
@property(retain, nonatomic) VoiceVOIPReceiverViewController* m_voiceVoipReceiverViewController;
@property(retain, nonatomic) VoiceVOIPCallerViewController* m_voiceVoipCallerViewController;
@property(retain, nonatomic) VideoVoipReceiverView* m_videoVoipReceiverViewController;
@property(retain, nonatomic) VideoVoipCallerView* m_videoVoipCallerViewController;
-(void)onMMConfigUpdated;
-(void)OnTellMeViewIsExist:(BOOL*)exist;
-(void)SendInvite:(int)invite;
-(void)Cancel;
-(void)closeVoiceVoipViewByMsgWrap:(id)wrap;
-(void)closeVideoVoipViewByMsgWrap:(id)wrap;
-(void)closeVoiceVoipView;
-(void)closeVideoVoipView;
-(void)openVoipViewWithContact:(id)contact isCaller:(BOOL)caller andMsgWrap:(id)wrap;
-(void)openVideoVoipViewWithContact:(id)contact isCaller:(BOOL)caller andMsgWrap:(id)wrap isEarMode:(BOOL)mode;
-(BOOL)canStartVoip;
-(BOOL)canOpenVoipByTimeLogic:(id)logic;
-(void)onServiceReloadData;
-(void)dealloc;
-(id)init;
@end

@interface WXTalkUIManager : MMService <MMService> {
	NewWXTalkView* m_wxTalkViewContoller;
}
@property(retain, nonatomic) NewWXTalkView* m_wxTalkViewContoller;
-(void)closeWXTalkView;
-(BOOL)openWXTalkViewWithContact:(id)contact;
-(void)foldWXTalkView;
-(void)onServiceReloadData;
-(void)dealloc;
@end

@interface ForwardMessageMgr : MMService <MMService, ForwardMessageLogicDelegate, ForwardMessageToBrandLogicControllerDelegate> {
	ForwardMessageLogicController* m_forwardLogicController;
	UIViewController* m_forwardFromViewController;
	ForwardMessageToBrandLogicController* m_forwardMessageToBrandLogicController;
	UIViewController* m_forwardMessageToBrandFromViewController;
}
-(void)forwardMessageToBrand:(id)brand toContact:(id)contact fromViewController:(id)viewController;
-(void)forwardMessage:(id)message fromViewController:(id)viewController;
-(id)forwardMessageToBrandLogicGetViewController;
-(id)getCurrentViewController;
-(void)onServiceClearData;
-(void)dealloc;
-(void)onServiceInit;
@end

@interface UpdateProfileMgr : MMService <MMService, MMKernelExt, PBMessageObserverDelegate, MessageObserverDelegate> {
	NSRecursiveLock* m_lock;
	int m_profileUpdateEvent;
}
+(BOOL)modifyUserInfo:(id)info;
+(BOOL)isUserInfoNotReady;
-(void)onAuthOK;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)updateUserProfile;
-(void)HandleModUsrInfoExt:(id)ext;
-(void)HandleUsrInfo:(id)info;
-(void)handleModUserInfoExt:(id)ext withSetting:(id)setting;
-(void)handleModUserInfo:(id)info withSetting:(id)setting;
-(BOOL)verifyPersonalInfo:(id)info IDCardType:(unsigned long)type IDCardNumber:(id)number;
-(void)onServiceClearData;
-(void)dealloc;
-(id)init;
-(void)onServiceInit;
@end

@interface MMUploadDataViewController : MMUIViewController <RecoverDataManagerDelegate, MFMailComposeViewControllerDelegate> {
	MMTableViewInfo* m_tableViewInfo;
	MMLoadingView* m_loadingView;
	RecoverDataManager* m_recoverDataMgr;
	WebMailViewController* m_mailViewCtrl;
	NSData* m_mailAttachData;
	NSString* m_nsMailAttachName;
	NSMutableArray* m_aryMailAttachData;
	NSMutableArray* m_aryMailAttachName;
	NSString* _m_selName;
}
@property(retain, nonatomic) NSString* m_selName;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)findEmailAddresses:(id)addresses result:(id)result;
-(BOOL)checkStringSize:(id)size minSize:(int)size2 maxSize:(int)size3;
-(void)addAttach;
-(id)mimeOfFile:(id)file;
-(void)writeMailWithAttachFile:(id)attachFile zipName:(id)name zipPath:(id)path;
-(BOOL)isJailbreak;
-(id)getPlatform;
-(void)sendMail;
-(void)selectCell:(id)cell;
-(void)makeCell:(id)cell cellInfo:(id)info;
-(void)addRecoverName:(id)name order:(unsigned)order;
-(void)initView;
-(void)adjustTableViewRect;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(void)onAddUploadData:(id)data order:(unsigned)order;
@end

@interface BatchGetHeadImgEventHandler : ProtobufEventHandler {
}
-(void)OnProtocolReturn:(id)aReturn shouldContinue:(bool*)aContinue;
-(void)saveImageData:(id)data user:(id)user forScene:(int)scene;
@end

@interface CDownloadHDHeadImgWrap : NSObject {
	NSString* m_nsName;
	unsigned long m_headType;
	int m_headScene;
	int m_downloadType;
	unsigned long m_eventId;
	unsigned long m_uiDownloadEventId;
	unsigned long m_totalLen;
	unsigned long m_startOffset;
}
@property(assign, nonatomic) unsigned long m_startOffset;
@property(assign, nonatomic) unsigned long m_totalLen;
@property(assign, nonatomic) unsigned long m_uiDownloadEventId;
@property(assign, nonatomic) unsigned long m_eventId;
@property(assign, nonatomic) int m_downloadType;
@property(assign, nonatomic) int m_headScene;
@property(assign, nonatomic) unsigned long m_headType;
@property(retain, nonatomic) NSString* m_nsName;
@end

@interface CDownloadHDHeadImg : MMObject <PBMessageObserverDelegate> {
	NSString* m_nsTempFile;
	CDownloadHDHeadImgWrap* m_currTask;
	MMDelegateProxy<HeadImgDelegate>* delegate;
}
@property(assign, nonatomic) MMDelegateProxy<HeadImgDelegate>* delegate;
-(void)onDownloadPartOK:(id)ok;
-(void)onDownloadPartFail;
-(void)ondownloadComplete;
-(void)updateNormalHead;
-(id)generateNormalHeadData:(id)data;
-(void)MessageReturnCDN:(id)cdn;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(unsigned long)downloadHDImg:(id)img url:(id)url forScene:(int)scene;
-(unsigned long)downloadHDImg:(id)img forScene:(int)scene;
-(void)stopDownload;
-(BOOL)saveData:(id)data forTask:(id)task file:(id)file;
-(BOOL)downloadHDImg:(id)img offset:(unsigned long)offset len:(unsigned long)len;
-(unsigned long)getFileSize:(id)size;
-(id)getTempFilePath:(id)path;
-(void)reset;
-(void)dealloc;
-(id)init;
@end

@interface GetHeadImageRequest : NSObject {
	NSString* userName;
	unsigned long requestCount;
	int scene;
}
@property(assign, nonatomic) int scene;
@property(retain, nonatomic) NSString* userName;
@property(assign, nonatomic) unsigned long requestCount;
-(void)dealloc;
-(id)init;
@end

@interface GetHeadImage : MMObject <PBMessageObserverDelegate> {
	BOOL m_bGetting;
	BOOL m_bCommiting;
	NSMutableArray* m_aryRequest;
	NSMutableArray* m_aryGetting;
	NSMutableDictionary* m_mapLastGetTime;
	MMDelegateProxy<HeadImgDelegate>* delegate;
}
@property(assign, nonatomic) MMDelegateProxy<HeadImgDelegate>* delegate;
-(void)sendRequest;
-(void)addRequest:(id)request forScene:(int)scene;
-(void)cancelRequest:(id)request;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)commitRequestQueue;
-(void)removeRequest:(id)request;
-(BOOL)checkNeedGetImg:(id)img;
-(BOOL)isMobileName:(id)name;
-(BOOL)isUnknownNeegGetImg:(id)img;
-(void)addToLastMap;
-(BOOL)checkIfForbidden:(id)forbidden;
-(void)dealloc;
-(id)init;
@end

@interface GetUrlHeadImageRequest : NSObject {
	NSString* userName;
	NSString* url;
	unsigned long requestCount;
	int scene;
}
@property(assign, nonatomic) int scene;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* userName;
@property(assign, nonatomic) unsigned long requestCount;
-(void)dealloc;
-(id)init;
@end

@interface GetUrlHeadImage : MMObject <PBMessageObserverDelegate> {
	NSMutableArray* m_aryRequest;
	NSMutableDictionary* m_mapLastGetTime;
	BOOL m_bCommiting;
	NSMutableArray* m_aryGetting;
	unsigned long m_uiDownloadCount;
	MMDelegateProxy<HeadImgDelegate>* delegate;
}
@property(assign, nonatomic) MMDelegateProxy<HeadImgDelegate>* delegate;
-(void)SetDownloadCommonMode;
-(void)SetDownloadFastMode;
-(void)sendRequest;
-(void)addRequest:(id)request url:(id)url forScene:(int)scene;
-(void)cancelRequest:(id)request;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)commitRequestQueue;
-(void)startConnection:(id)connection;
-(void)removeOneRequest:(id)request;
-(BOOL)checkNeedGetImg:(id)img;
-(BOOL)isMobileName:(id)name;
-(BOOL)isUnknownNeegGetImg:(id)img;
-(void)addToLastMap:(id)lastMap;
-(BOOL)checkIfForbidden:(id)forbidden;
-(void)dealloc;
-(id)init;
@end

@interface CHeadImageMgr : MMService <MMService, IContactMgrExt, IQQContactMgrExt, MessageObserverDelegate, HeadImgDelegate, IBottleContactMgrExt, IStrangerContactMgrExt, IContactMgrExt> {
	NSMutableDictionary* m_dicCache;
	NSMutableDictionary* m_dicRoundCache;
	NSCache* m_roundImageCache;
	NSMutableDictionary* m_roundImageKeyDict;
	GetHeadImage* m_getter;
	GetUrlHeadImage* m_urlGetter;
	CUploadHDHeadImg* m_upload;
	CDownloadHDHeadImg* m_download;
	NSString* m_nsLibraryCachePath;
	NSObject* locker;
}
+(id)GetLocalUsrImage:(id)image;
+(id)GetPathOfUsrRoundImg:(id)usrRoundImg libPath:(id)path imgKey:(id)key;
+(id)GetDirPathOfUsrRoundImg:(id)usrRoundImg libPath:(id)path;
+(id)GetDirPathOfRoundImg;
-(void)SetUrlDownloadCommonMode;
-(void)SetUrlDownloadFastMode;
-(void)asyncComputeRoundImage:(id)image imgSize:(CGSize)size conerSize:(unsigned long)size3 forScene:(int)scene;
-(void)cleanupAsyncComputeRoundImgCache;
-(void)onStrangerContactUpdateForbidden:(id)forbidden;
-(void)onStrangerContactUpdated:(id)updated Contact:(id)contact;
-(BOOL)updateHeadImg:(id)img url:(id)url forScene:(int)scene;
-(BOOL)updateHeadImg:(id)img forScene:(int)scene;
-(void)cancelRequest:(id)request;
-(void)InternalGetHeadImage:(id)image forScene:(int)scene;
-(void)InternalGetUrlHeadImage:(id)image Url:(id)url forScene:(int)scene;
-(id)GetUsrHeadImageUrl:(id)url;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)handleModUserImg:(id)img;
-(void)onModifyContact:(id)contact;
-(void)onDeleteContact:(id)contact;
-(void)onModifyBottleContact:(id)contact;
-(void)onGetUsrImage:(id)image Status:(id)status Image:(id)image3;
-(void)notifyHeadImageChange:(id)change;
-(void)onModifyQQContactHeadImage:(id)image;
-(void)onModifyContactHeadImage:(id)image;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceInit;
-(id)getRoundImage:(id)image size:(CGSize)size conerSize:(unsigned long)size3 forScene:(int)scene;
-(id)getRoundImage:(id)image size:(CGSize)size forScene:(int)scene;
-(id)getRealHDHeadImg:(id)img forScene:(int)scene;
-(id)getHeadImg:(id)img forScene:(int)scene;
-(id)getRealHeadImg:(id)img forScene:(int)scene;
-(BOOL)isHeadImgExist:(id)exist isHD:(BOOL)hd;
-(BOOL)isHeadImgExist:(id)exist;
-(void)fixSelfHeadImgByLocalImg;
-(BOOL)DeleteUsrImg:(id)img;
-(BOOL)CreateEmptyUsrImg:(id)img;
-(BOOL)SaveUsrImg:(id)img withData:(id)data forScene:(int)scene isHD:(BOOL)hd forceReload:(BOOL)reload;
-(BOOL)SaveUsrImg:(id)img withData:(id)data forScene:(int)scene isHD:(BOOL)hd;
-(BOOL)SaveUsrImg:(id)img withFile:(id)file forScene:(int)scene isHD:(BOOL)hd;
-(id)getSavePath:(id)path forScene:(int)scene isHD:(BOOL)hd;
-(unsigned long)downloadHDHeadImg:(id)img url:(id)url forScene:(int)scene;
-(unsigned long)downloadHDHeadImg:(id)img forScene:(int)scene;
-(id)GetUsrHDHeadImageUrl:(id)url;
-(BOOL)isNeedGetHDImg:(id)img;
-(BOOL)IsUploadIngHeadImg;
-(unsigned long)uploadHDBottleImg:(id)img;
-(unsigned long)uploadHDHeadImg:(id)img qualityType:(unsigned long)type;
-(unsigned long)uploadHDHeadImg:(id)img;
-(id)setImage:(id)image key:(id)key;
-(void)discardImage:(id)image;
-(BOOL)saveImg:(id)img file:(id)file;
-(BOOL)isUnknownNeegGetHDImg:(id)img;
-(void)dealloc;
-(id)init;
-(void)addRoundImageKeyToCache:(id)cache withRoundImageKey:(id)roundImageKey;
-(id)loadRoundImgFromLocal:(id)local imgKey:(id)key;
-(void)saveRoundImgToLocal:(id)local nsUsrName:(id)name imgKey:(id)key;
-(void)saveRoundImgToLocal:(id)local nsFileName:(id)name;
-(id)loadImageFromLocal:(id)local forScene:(int)scene;
-(id)loadSelfImage;
-(BOOL)isGoogleName:(id)name;
-(BOOL)isMobileName:(id)name;
-(void)addAutoCleanTask;
-(id)amendImage:(id)image;
-(id)resizeImage:(id)image;
-(id)tryGenHQImage:(id)image;
-(BOOL)deleteUsrImg:(id)img isHD:(BOOL)hd;
-(id)loadImage:(id)image forScene:(int)scene isHD:(BOOL)hd;
-(BOOL)translateOldHeadImg:(id)img toScene:(int)scene isHD:(BOOL)hd;
-(BOOL)translateHeadImg:(id)img toScene:(int)scene fromPath:(id)path isHD:(BOOL)hd;
-(id)getPathOfHeadImg:(id)headImg forScene:(int)scene isHD:(BOOL)hd;
-(id)getPathOfHeadScene:(int)headScene;
-(id)getOldHeadImgPath:(id)path isHD:(BOOL)hd;
-(id)getOldHeadImgPath:(id)path;
-(id)getDefaultHeadImage:(id)image;
-(id)getPluginImage:(id)image;
@end

@interface ForwardSwitchView : MMUIView <UIScrollViewDelegate, scrollViewDelegate> {
	BOOL m_on;
	MMScrollView* m_scrollView;
	UIImageView* m_ballView;
	UIImageView* m_sliderView;
	UIImageView* m_switchView;
	id m_targetChange;
	SEL m_selChange;
}
@property(assign, nonatomic, setter=set_on:) BOOL m_on;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)setChangeTarget:(id)target sel:(SEL)sel;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)touchesEnded_ScrollView:(id)view withEvent:(id)event;
-(void)fixSwitch:(int)aSwitch;
-(void)dealloc;
-(id)initWithSwitchImg:(id)switchImg SliderImg:(id)img BallImg:(id)img3;
-(void)fixBall;
@end

@interface CUploadHDHeadImgWrap : NSObject {
	NSString* m_nsName;
	unsigned long m_startPos;
	unsigned long m_totalLen;
	NSData* m_dtData;
	NSData* m_dtNormalData;
	NSString* m_nsHash;
	NSString* m_nsFinalMD5;
	NSString* m_nsSmallUrl;
	NSString* m_nsHDUrl;
	unsigned long m_eventID;
	unsigned long m_uiUploadEventID;
	unsigned long m_headType;
	int m_headScene;
}
@property(retain, nonatomic) NSString* HDUrl;
@property(retain, nonatomic) NSString* smallUrl;
@property(assign, nonatomic) int headScene;
@property(assign, nonatomic) unsigned long headType;
@property(assign, nonatomic) unsigned long uiUploadEventID;
@property(assign, nonatomic) unsigned long eventID;
@property(assign, nonatomic) unsigned long totalLen;
@property(assign, nonatomic) unsigned long startPos;
@property(retain, nonatomic) NSData* normalData;
@property(retain, nonatomic) NSData* data;
@property(retain, nonatomic) NSString* finalMD5;
@property(retain, nonatomic) NSString* hash;
@property(retain, nonatomic) NSString* userName;
@end

@interface CUploadHDHeadImg : MMObject <PBMessageObserverDelegate> {
	NSString* m_nsFile;
	CUploadHDHeadImgWrap* m_currTask;
	MMDelegateProxy<HeadImgDelegate>* delegate;
}
@property(assign, nonatomic) MMDelegateProxy<HeadImgDelegate>* delegate;
-(void)onUploadPartFail;
-(void)onUploadComplete:(id)complete;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)IsUploadIngImg;
-(unsigned long)uploadHDImg:(id)img imgType:(unsigned long)type qualityType:(unsigned long)type3;
-(unsigned long)uploadHDImg:(id)img imgType:(unsigned long)type;
-(void)stopUpload;
-(BOOL)saveImg:(id)img file:(id)file;
-(unsigned long)InternalUpload:(id)upload imgType:(unsigned long)type qualityType:(unsigned long)type3;
-(BOOL)uploadTask:(id)task;
-(id)generateNormalHeadData:(id)data;
-(id)generateNormalHeadImage:(id)image;
-(id)generateHDHeadDataLow:(id)low;
-(id)generateHDHeadData:(id)data;
-(unsigned long)getFileSize:(id)size;
-(void)reset;
-(void)dealloc;
-(id)init;
@end

@interface UrlHeadImageEventHandler : ProtobufEventHandler {
}
-(void)OnProtocolReturn:(id)aReturn shouldContinue:(bool*)aContinue;
-(void)saveImageData:(id)data user:(id)user forScene:(int)scene;
@end

@interface PreEnterWechatLogic : MMObject <MessageObserverDelegate, validateCodeDelegate, NewDeviceLoginViewControllerDelegate, whatsnewViewDelegateEx, initLogicControllerDelegate, UIAlertViewDelegate, IMMFacebookMgrExt, MMKernelExt, WCAccountBindPhoneControlLogicDelegate, UIViewControllerTransitioningDelegate, CrossfadeAnimationDelegate> {
	UINavigationController* m_navValidateController;
	UINavigationController* m_navSafeDeviceViewController;
	vector<unsigned long, std::allocator<unsigned long> > m_vecMesssageIdToListen;
	NSURL* m_nsFeedBackUrl;
	MMUIViewController* m_whatsNewViewController;
	InitLogicController* m_initLogicController;
	MMLoadingView* m_loadingView;
	NSDictionary* m_dicShowStyle;
	BOOL m_bShowBindPhone;
	BOOL m_bCalledPreEnterWechatDone;
	WCAccountBindPhoneControlLogic* m_bindPhoneLogic;
	CrossfadeAnimationController* m_transitionInstance;
}
@property(retain, nonatomic) NSDictionary* m_dicShowStyle;
-(id).cxx_construct;
-(void).cxx_destruct;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
-(void)crossfadeAnimationCompleted;
-(void)showWhatsNewEnd;
-(void)setTopBarHidden;
-(void)showWhatsNewWillEnd;
-(void)tryShowWhatsNew;
-(void)removeTabbarFromMainFrame;
-(void)addTabbarToMainFrame;
-(void)showOverSeaWhatsNew;
-(void)showCHSWhatsNew;
-(void)handleNewUserWhatsnew;
-(void)handleInitAndPhoneSync;
-(void)stopIniting:(unsigned long)initing;
-(void)handleInitOk;
-(void)showBindPhoneInfoView;
-(void)onWCAccountBindPhoneControlLogicStop;
-(void)showSyncAddrAlert;
-(void)percentIniting:(id)initing;
-(void)stopLoading;
-(void)startLoading;
-(void)initLoadingView;
-(void)checkShouldShowPasswordNotify;
-(void)onGetUpdateInfoOk;
-(void)MessageReturn:(unsigned long)aReturn MessageInfo:(id)info Event:(unsigned long)event;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)newDeviceLoginBack;
-(void)newDeviceLoginVerifyOK:(id)ok ticket:(id)ticket;
-(void)showVerifyPhone:(id)phone ticket:(id)ticket;
-(void)delayLoadAndCheck;
-(void)checkUpdateTabbarBadgeNum;
-(void)checkUpdateNewVersionTip:(BOOL)tip;
-(void)preShowSystemPush;
-(void)preLoadContacts;
-(void)fixContactPlugin;
-(void)openFeedBackWapPage:(id)page;
-(void)checkShowStyle;
-(void)checkBindPhone;
-(void)callPreEnterWechatDone;
-(void)validateCodeReturn:(BOOL)aReturn;
-(void)showValidateCodeView:(id)view;
-(void)dealloc;
-(id)initFromReg:(BOOL)reg showStyle:(id)style;
-(void)initMessageIdToListen;
@end

@interface EmoticonDescMgr : MMService <MMService, PBMessageObserverDelegate> {
	NSMutableSet* m_requestPidSet;
}
@property(retain, nonatomic) NSMutableSet* m_requestPidSet;
-(void)handleRespForGetEmotionDesc:(id)getEmotionDesc;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)getEmoticonDescByPid:(id)pid LastRequestTime:(unsigned long)time;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandler_openUrlByExtBrowser : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface JSConsoleViewController : MMUIViewController {
	NSMutableAttributedString* _showLogInfo;
	UITextView* _consoleView;
}
-(void)onExit;
-(BOOL)shouldScrollToButtom;
-(void)setShowLogInfoWithoutScroll;
-(void)appendLogInfo:(id)info;
-(void)initView;
-(void)viewDidLoad;
-(id)init;
-(void)dealloc;
@end

@interface WCOfflinePayAddFuncControlLogic : WCOfflinePayControlLogic <WCPayPayPwdViewControllerDelegate, WCOfflinePayEnableResultViewControllerDelegate> {
	WCPayControlData* m_oTenpayControlData;
}
-(void)OnOfflinePayCertGet:(id)get Error:(id)error;
-(void)OnWCOfflinePayEnableResultViewControllerReturn;
-(id)GetWCOfflinePayEnableLabelText;
-(void)SetPayPwdNext:(id)next;
-(void)VerifyPayPwdNext:(id)next;
-(void)PayPwdRightActionBack;
-(void)PayPwdBack;
-(void)startLogic;
-(void)setPayData:(id)data;
-(void)dealloc;
@end

@interface TextAppDelegate : UIResponder <UIApplicationDelegate> {
	UIWindow* _window;
	UINavigationController* _navigationController;
}
@property(retain, nonatomic) UINavigationController* navigationController;
@property(retain, nonatomic) UIWindow* window;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(void)dealloc;
@end

@interface TextDataManager : MMService <MMService> {
}
-(id)getTempFilePath;
-(void)DeleteImageFromFile:(id)file;
-(id)UIImageDataWriteToFile:(id)file;
-(id)UIImageWriteToFile:(id)file;
@end

@interface TextEditViewController : MMUIViewController <UIWebViewDelegate, UIActionSheetDelegate, MMImagePickerManagerDelegate> {
	id<textViewComplete> m_delegate;
	NSString* m_detailItem;
	UIWebView* m_webview;
	int m_tag;
	NSMutableArray* m_arrImgPath;
	UIToolbar* m_toolbar;
	UIView* m_toolbarview;
	CGPoint m_initialPointOfImage;
	CGPoint m_finalPointOfImage;
	BOOL m_bIsNeedInsertImg;
	NSString* m_insertImgPath;
}
@property(retain, nonatomic) UIView* toolbarview;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(assign, nonatomic) CGPoint finalPointOfImage;
@property(assign, nonatomic) CGPoint initialPointOfImage;
@property(retain, nonatomic) UIWebView* webview;
@property(assign, nonatomic) int tag;
@property(retain, nonatomic) id<textViewComplete> delegate;
@property(retain, nonatomic) NSString* detailItem;
-(id).cxx_construct;
-(void)insertPicture:(id)picture;
-(void)viewDidAppear:(BOOL)view;
-(void)insertImgToRichText;
-(void)MMImagePickerManagerDidCancel:(id)mmimagePickerManager;
-(void)MMImagePickerManager:(id)manager didFinishPickingImageWithInfo:(id)info;
-(void)showImagePicker:(int)picker;
-(void)onTakePhotoForPost;
-(void)onCreatePostImageView;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)insertNewObject:(id)object;
-(void)webViewDidFinishLoad:(id)webView;
-(id)text;
-(void)checkSelections;
-(BOOL)resignFirstResponder:(id)responder;
-(void)wirteToFile:(id)file;
-(void)unorderedAction;
-(void)orderedAction;
-(void)strikeAction;
-(void)underlineAction;
-(void)italicAction;
-(void)boldAction;
-(id)init;
-(void)viewDidLoad;
-(void)dealloc;
@end

@interface TitleText : NSObject {
	NSString* m_title;
	NSString* m_text;
	int m_idx;
}
@property(assign, nonatomic) int idx;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* title;
@end

@interface TextMasterViewController : MMUIViewController <textViewComplete, UITableViewDataSource, UITableViewDelegate, tableViewDelegate> {
	MMTableView* m_tableView;
	int m_count;
	NSMutableArray* _objects;
	NSString* lastTitle;
	TextEditViewController* _editViewController;
}
@property(retain, nonatomic) NSString* lastTitle;
@property(assign, nonatomic) int count;
@property(retain, nonatomic) TextEditViewController* editViewController;
-(void)onTextComplete:(id)complete WithTag:(int)tag;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)insertNewObject:(id)object;
-(void)cancelSelectCell;
-(void)viewWillAppear:(BOOL)view;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface TextTouchRespone : UIGestureRecognizer {
	id touchesBeganCallback;
	id touchesEndedCallback;
}
@property(copy) id touchesEndedCallback;
@property(copy) id touchesBeganCallback;
-(BOOL)canBePreventedByGestureRecognizer:(id)recognizer;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface VerifyQQPwdMgr : MMService <MMService, PasswordLogicDelegate, ICheckQQExt> {
	PasswordLogic* m_pswLogic;
}
-(void)onServiceClearData;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterForeground;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)passwordLogicPause;
-(void)passwordLogicStart;
-(void)passwordLogicCancel;
-(void)verifyPassowrdOK:(id)ok;
-(void)verifyPassowrdFail;
-(void)unknownFail;
-(void)OnCheckQQ;
-(void)dealloc;
-(id)init;
-(void)unregExt;
-(void)regExt;
@end

@interface AppCommentMgr : MMService <MMService, IMsgExt, PBMessageObserverDelegate, UIAlertViewDelegate> {
	AppCommentMsg* storedAppCommentMsg;
	unsigned long m_uiReportEvent;
}
@property(retain, nonatomic) AppCommentMsg* storedAppCommentMsg;
-(void)onServiceClearData;
-(BOOL)onServiceMemoryWarning;
-(void)onServiceTerminate;
-(void)onServiceEnterForeground;
-(void)onServiceEnterBackground;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)createReportEventWithReportID:(int)reportID;
-(id)getAppCommentAlertViewWithDelegate:(id)delegate;
-(void)appCommentDidClickedButton:(int)appComment;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)tryShowAppCommentAlert;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(BOOL)haveNormalUnreadMsg;
-(BOOL)shouldShowAlert;
-(void)dealloc;
-(id)init;
@end

@interface MainFrameCellDataManager : MMObject {
	NSCache* m_cacheMainFrameCellData;
	NSMutableDictionary* m_dictMainFrameCellData;
}
-(void)updateTimeFieldForCellData;
-(void)removeCellData:(id)data;
-(id)getCellDataByUsrName:(id)name;
-(void)cleanupPreCreateCache;
-(void)cleanupAllCache;
-(id)updateCellData:(id)data;
-(id)getCellData:(id)data;
-(void)preCreateCellData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface BatchImportEmoticonController : MMUIViewController {
	UIButton* m_batchButton;
	UILabel* m_progress;
}
@property(retain, nonatomic) UILabel* m_progress;
@property(retain, nonatomic) UIButton* m_batchButton;
-(void)OnXXX;
-(void)OnDataChange;
-(void)dealloc;
-(void)viewDidLoad;
-(void)onImportButtonClick;
-(void)initView;
-(void)initData;
@end

@interface RNCachingURLProtocol : NSURLProtocol {
	NSURLConnection* connection_;
	NSMutableData* data_;
	NSURLResponse* response_;
}
@property(retain, nonatomic) NSURLResponse* response;
@property(retain, nonatomic) NSMutableData* data;
@property(retain, nonatomic) NSURLConnection* connection;
+(id)canonicalRequestForRequest:(id)request;
+(BOOL)canInitWithRequest:(id)request;
-(void)appendData:(id)data;
-(BOOL)useCache;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)stopLoading;
-(void)startLoading;
@end

@interface RNCachedData : NSObject <NSCoding> {
	NSData* data_;
	NSURLResponse* response_;
	NSURLRequest* redirectRequest_;
}
@property(retain, nonatomic) NSURLRequest* redirectRequest;
@property(retain, nonatomic) NSURLResponse* response;
@property(retain, nonatomic) NSData* data;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@interface WebCacheMgr : MMService <MMService> {
	NSString* _oldUrl;
	NSString* _newUrl;
	NSURLRequest* curRequest;
}
@property(retain, nonatomic) NSURLRequest* curRequest;
-(id)getPermissionCachePathByUrl:(id)url;
-(id)cachePathForUrl:(id)url;
-(BOOL)hasCacheForUrl:(id)url;
-(id)baseCachesPath;
-(id)cachePathForRequest:(id)request;
-(BOOL)hasCacheForRequest:(id)request;
-(id)transformUrl:(id)url;
-(void)setCacheOldUrl:(id)url NewUrl:(id)url2;
-(void)onServiceReloadData;
-(void)dealloc;
@end

@interface ChatRoomUpgradeProductItem : NSObject {
	NSString* title;
	NSString* productID;
	NSString* desc;
	NSString* extDesc;
	NSString* price;
	NSString* priceUnit;
	unsigned long productType;
	unsigned long lifeTime;
}
@property(assign, nonatomic) unsigned long lifeTime;
@property(assign, nonatomic) unsigned long productType;
@property(retain, nonatomic) NSString* extDesc;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSString* priceUnit;
@property(retain, nonatomic) NSString* price;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* productID;
+(void)initialize;
+(void)_initPBTableOfChatRoomUpgradeProductItem;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ChatRoomUpgradeInfo : NSObject {
	unsigned long chatRoomLevel;
	unsigned long maxMemberCount;
	NSString* chatRoomName;
	NSString* desc;
	NSArray* productList;
	NSString* bannerIconUrl;
	NSString* bannerBgUrl;
	NSString* bannerDesc;
	NSString* bannerAction;
	BOOL needVerifyPersonal;
	unsigned long productStatus;
	unsigned long bannerActionType;
}
@property(assign, nonatomic) unsigned long bannerActionType;
@property(assign, nonatomic) unsigned long productStatus;
@property(assign, nonatomic) BOOL needVerifyPersonal;
@property(retain, nonatomic) NSString* bannerAction;
@property(retain, nonatomic) NSString* bannerDesc;
@property(retain, nonatomic) NSString* bannerBgUrl;
@property(retain, nonatomic) NSString* bannerIconUrl;
@property(retain, nonatomic) NSArray* productList;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* chatRoomName;
@property(assign, nonatomic) unsigned long maxMemberCount;
@property(assign, nonatomic) unsigned long chatRoomLevel;
+(void)initialize;
+(void)_initPBTableOfChatRoomUpgradeInfo;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ChatRoomVerifyMsg : NSObject {
	unsigned long createTime;
	unsigned long msgSvrID;
	NSString* chatRoomName;
	NSString* inviterName;
	NSString* inviterNickName;
	unsigned long scene;
	NSString* desc;
	NSString* ticket;
	NSString* userName;
	NSString* userNickName;
	NSString* country;
	NSString* province;
	NSString* city;
	NSString* hdHeadImgUrl;
	NSString* headImgUrl;
	NSString* sign;
	NSString* weibo;
	NSString* weiboNickname;
	unsigned long albumFlag;
	unsigned long albumStyle;
	NSString* albumBgId;
	unsigned long snsFlag;
	NSString* snsBgId;
	unsigned long snsBgObjId;
	BOOL isRead;
	BOOL isVerified;
	unsigned long snsObjId;
}
@property(assign, nonatomic) unsigned long snsObjId;
@property(retain, nonatomic) NSString* snsBgId;
@property(assign, nonatomic) unsigned long snsFlag;
@property(retain, nonatomic) NSString* albumBgId;
@property(assign, nonatomic) unsigned long albumStyle;
@property(assign, nonatomic) unsigned long albumFlag;
@property(retain, nonatomic) NSString* weiboNickname;
@property(retain, nonatomic) NSString* weibo;
@property(retain, nonatomic) NSString* sign;
@property(retain, nonatomic) NSString* headImgUrl;
@property(retain, nonatomic) NSString* hdHeadImgUrl;
@property(retain, nonatomic) NSString* city;
@property(retain, nonatomic) NSString* province;
@property(retain, nonatomic) NSString* country;
@property(retain, nonatomic) NSString* userNickName;
@property(retain, nonatomic) NSString* userName;
@property(assign, nonatomic) BOOL isVerified;
@property(assign, nonatomic) BOOL isRead;
@property(retain, nonatomic) NSString* ticket;
@property(retain, nonatomic) NSString* desc;
@property(assign, nonatomic) unsigned long scene;
@property(retain, nonatomic) NSString* inviterNickName;
@property(retain, nonatomic) NSString* inviterName;
@property(retain, nonatomic) NSString* chatRoomName;
@property(assign, nonatomic) unsigned long msgSvrID;
@property(assign, nonatomic) unsigned long createTime;
+(void)initialize;
+(void)_initPBTableOfChatRoomVerifyMsg;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ChatRoomRemindMsg : NSObject {
	unsigned long createTime;
	unsigned long msgSvrID;
	NSString* desc;
	NSString* chatRoomName;
	unsigned long actionType;
	NSString* actionName;
	NSString* actionUrl;
	unsigned long expireTime;
}
@property(assign, nonatomic) unsigned long expireTime;
@property(retain, nonatomic) NSString* actionUrl;
@property(retain, nonatomic) NSString* actionName;
@property(assign, nonatomic) unsigned long actionType;
@property(retain, nonatomic) NSString* chatRoomName;
@property(retain, nonatomic) NSString* desc;
@property(assign, nonatomic) unsigned long msgSvrID;
@property(assign, nonatomic) unsigned long createTime;
+(void)initialize;
+(void)_initPBTableOfChatRoomRemindMsg;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ChatRoomNoticeMsg : NSObject {
	unsigned long createTime;
	unsigned long msgSvrID;
	NSString* chatRoomName;
}
@property(retain, nonatomic) NSString* chatRoomName;
@property(assign, nonatomic) unsigned long msgSvrID;
@property(assign, nonatomic) unsigned long createTime;
+(void)initialize;
+(void)_initPBTableOfChatRoomNoticeMsg;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ChatRoomVerifyMsgIndex : NSObject {
	NSMutableArray* index;
}
@property(retain, nonatomic) NSMutableArray* index;
+(void)initialize;
+(void)_initPBTableOfChatRoomVerifyMsgIndex;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface WCAccountFillEmailViewController : WCAccountBaseViewController <UITableViewDataSource, UITableViewDelegate> {
	WCBaseTextFieldItem* m_textFieldEmailItem;
	WCBaseTextFieldItem* m_textFieldPwdItem;
	MMDelegateProxy<WCAccountFillEmailViewControllerDelegate>* m_delegate;
	MMTableView* m_autoCompleteView;
	MMImageView* m_autoCompleteCover;
	NSMutableArray* m_autoInfo;
	NSMutableArray* m_currentInfo;
	float m_marginLeft;
	BOOL m_bReadAgreement;
}
@property(retain, nonatomic) MMImageView* m_autoCompleteCover;
@property(retain, nonatomic) NSMutableArray* m_currentInfo;
@property(retain, nonatomic) NSMutableArray* m_autoInfo;
@property(retain, nonatomic) MMTableView* m_autoCompleteView;
@property(retain, nonatomic) WCBaseTextFieldItem* m_textFieldPwdItem;
@property(retain, nonatomic) WCBaseTextFieldItem* m_textFieldEmailItem;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)checkAndChangeAotoComplete:(id)complete;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)vcResignFirstResponder;
-(void)onNext;
-(void)setDelegate:(id)delegate;
-(void)onFillEmailBack;
-(void)initNavigationBar;
-(void)onOpenAgreementLink:(id)link;
-(void)onReadAgreement:(id)agreement;
-(void)hardcodeInfo;
-(void)viewDidLoad;
-(void)dealloc;
@end

@interface WCAccountEmailVerifyViewController : WCAccountBaseViewController <IAutoVerifySMSExt> {
	MMDelegateProxy<WCAccountEmailVerifyViewControllerDelegate>* m_delegate;
	WCBaseTextFieldItem* m_textVerifyCodeItem_1;
	WCBaseTextFieldItem* m_textVerifyCodeItem_2;
	WCBaseTextFieldItem* m_textVerifyCodeItem_3;
	NSString* m_codeText_1;
	NSString* m_codeText_2;
	NSString* m_codeText_3;
	UILabel* m_verifyTip;
	NSMutableDictionary* m_urls;
	MMAnimationTipView* m_tipView;
}
@property(retain, nonatomic) MMAnimationTipView* m_tipView;
@property(retain, nonatomic) NSMutableDictionary* m_urls;
@property(retain, nonatomic) UILabel* m_verifyTip;
@property(retain, nonatomic) NSString* m_codeText_3;
@property(retain, nonatomic) NSString* m_codeText_2;
@property(retain, nonatomic) NSString* m_codeText_1;
@property(retain, nonatomic) WCBaseTextFieldItem* m_textVerifyCodeItem_3;
@property(retain, nonatomic) WCBaseTextFieldItem* m_textVerifyCodeItem_2;
@property(retain, nonatomic) WCBaseTextFieldItem* m_textVerifyCodeItem_1;
-(void)becomeResponderIndex:(unsigned long)index;
-(void)resignAllTextResponder;
-(id)getCodeFromIndex:(unsigned long)index withLength:(unsigned long)length fromString:(id)string;
-(id)getCodeWithLength:(unsigned long)length from:(id)from;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)onOpenBrowserBtnLink:(id)link;
-(void)onReSendEmailBtnLink:(id)link;
-(void)showResendTip;
-(void)viewDidLoad;
-(void)initNavigationBar;
-(void)onNext:(BOOL)next;
-(void)onEmailVerifyBack;
-(void)setDelegate:(id)delegate;
-(void)OnHandleOpenAutoVerifySMS:(id)sms;
-(id)getEmailDomain:(id)domain;
-(void)initUrls;
-(id)init;
-(void)dealloc;
@end

@interface WCAccountEmailRegControlLogic : WCAccountBaseControlLogic <WCAccountFillEmailViewControllerDelegate, WCAccountEmailVerifyViewControllerDelegate> {
}
-(void)onCheckEmailRegVerifyCode:(id)code ticket:(id)ticket StyleKeyValue:(id)value;
-(void)onGetEmailRegVerifyCode:(id)code;
-(void)shouldSignIn;
-(void)onEmailVerifyNext:(id)next isAuto:(BOOL)auto;
-(void)onEmailVerifyRefresh;
-(void)onEmailVerifyBack;
-(void)onFillEmailBack;
-(void)onFillEmailNext:(id)next password:(id)password;
-(void)cancelAllEvent;
-(void)startLogic;
-(void)dealloc;
@end

@interface ForwardMailTouchResponse : UIGestureRecognizer {
	id touchesBeganCallback;
	id touchesEndedCallback;
	id toucheMovedCallback;
	id touchesMovedCallback;
}
@property(copy) id touchesMovedCallback;
@property(copy) id touchesEndedCallback;
@property(copy) id touchesBeganCallback;
-(BOOL)canBePreventedByGestureRecognizer:(id)recognizer;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

@interface ForwardMailViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, UITextViewDelegate, UIActionSheetDelegate, UINavigationControllerDelegate, MailContactFilterViewDelegate, MailContentViewDelegate, MailAttachmentViewDelegate, UIAlertViewDelegate, IQQMailExt, MMMailContactSelectViewDelegate, MailReceiverEditViewDelegate, MailAttachmentControlViewDelegate, UIWebViewDelegate> {
	MMTableView* m_tableView;
	MailContactFilterView* m_filterView;
	UIWebView* m_contentView;
	MailReceiverEditView* m_receiverView;
	MailReceiverEditView* m_ccView;
	MailReceiverEditView* m_bccView;
	MailSubjectEditView* m_topicView;
	UIView* m_ccBccView;
	NSMutableArray* m_arrShowViews;
	MailAttachmentControlView* m_attachmentControlView;
	int m_firstResponderStatus;
	int m_ccBccFlodStatus;
	CMail* m_mail;
	NSMutableArray* m_arrReceiver;
	NSMutableArray* m_arrCc;
	NSMutableArray* m_arrBcc;
	NSMutableArray* m_arrAttachment;
	unsigned long m_uiMailType;
	float m_fKeyboardHeight;
	NSTimer* m_autoSaveTimer;
	unsigned long m_firstResponderTag;
	NSMutableArray* m_arrAttachmentView;
	NSMutableArray* m_arrAllMailContacts;
	CGPoint m_lasTouchPoint;
	NSString* m_nsMailID;
	BOOL m_bFromReadMail;
	BOOL m_bFirstFixContectHeight;
	BOOL m_bPresentModal;
	unsigned long m_contentWriteFlag;
	NSString* m_contentString;
}
@property(assign, nonatomic) BOOL m_bPresentModal;
@property(assign, nonatomic) BOOL m_bFromReadMail;
@property(retain, nonatomic) NSMutableArray* m_arrAllMailContacts;
-(id).cxx_construct;
-(void)webViewDidFinishLoad:(id)webView;
-(id)getContent;
-(void)setContent:(id)content;
-(void)onMailContactSelectDone:(id)done userInfo:(id)info;
-(void)onMailContactChanged:(id)changed;
-(void)onTextFieldNextItem:(id)item;
-(void)onTextFieldFinishEdit:(id)edit;
-(void)onTextFieldChanged:(id)changed;
-(void)onMailReceiverEditViewHeightChanged:(id)changed;
-(void)onMailContactDoubleClicked:(id)clicked;
-(void)onAddMailContact:(id)contact;
-(int)indexForView:(id)view;
-(void)onFirstResponderResigned;
-(id)getViewController;
-(id)initWithMail:(id)mail mailID:(id)anId mailType:(unsigned long)type;
-(void)uploadAttachment:(id)attachment name:(id)name;
-(id)initWithMail:(id)mail mailType:(unsigned long)type;
-(id)initWithNewEmptyMail:(id)newEmptyMail;
-(id)initWithEmptyMail:(id)emptyMail;
-(id)init;
-(void)dealloc;
-(void)releaseAutoSaveTimer;
-(void)initAutoSaveTimer;
-(void)removeNotificationObservers;
-(void)initNotificationObservers;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)onUpContentView;
-(void)ReleaseTextField;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(BOOL)check:(CGPoint)check Equal:(CGPoint)equal;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnUploadData:(id)data filename:(id)filename ErrNo:(int)no;
-(void)OnGetAllMailContact:(id)contact ErrNo:(int)no;
-(void)OnDeleteAttachment:(id)attachment;
-(void)doDeleteAttachment:(unsigned long)attachment;
-(void)OnResend:(id)resend;
-(void)OnUploadSuccess;
-(void)contentViewDidFinishEdit;
-(void)filterViewBeginDragging;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)contactReturn:(id)aReturn;
-(void)didStartWriteMailContent;
-(void)contentViewNeedSetContentOffset:(float)offset;
-(id)getFilterName:(id)name;
-(void)reloadTableView;
-(void)setContentResponderStatus;
-(void)initView;
-(void)initTableItemViews;
-(void)updateRightBarButton;
-(void)OnReturn;
-(void)CheckCancel;
-(void)initData;
-(BOOL)SendBtnEnable;
-(void)onSend;
-(void)OnComposeSend:(int)send;
-(void)doSearch:(id)search;
-(void)fixFilterView;
-(void)onAutoSaveTimer;
-(void)deleteDraft;
-(void)loadDraft;
-(void)saveDraft;
-(void)setccBccFlodStatus:(int)status;
-(void)setNextFirstRespondStatus:(int)status;
-(void)setFirstRespondStatus:(int)status;
-(int)getFirstResponderStatusForRow:(int)row;
-(int)getNextResponderStautsForFirstResponderStatus:(int)firstResponderStatus;
-(id)getViewForFirstResponderStatus:(int)firstResponderStatus;
-(void)staticReloadTableView;
-(id)getSelfMailContact;
@end

@interface ClickCommandRequestInfo : NSObject {
	NSString* m_magic;
	NSString* m_id;
	NSString* m_key;
	int m_type;
	int m_actionType;
	NSString* m_status;
	NSString* m_content;
}
@property(assign, nonatomic) int m_actionType;
@property(assign, nonatomic) int m_type;
@property(retain, nonatomic) NSString* m_content;
@property(retain, nonatomic) NSString* m_status;
@property(retain, nonatomic) NSString* m_key;
@property(retain, nonatomic) NSString* m_id;
@property(retain, nonatomic) NSString* m_magic;
-(id)description;
-(id)init;
-(void)dealloc;
@end

@interface RecoverDataViewController : MMUIViewController <RecoverDataManagerDelegate, UIAlertViewDelegate> {
	MMTableViewInfo* m_tableViewInfo;
	MMLoadingView* m_loadingView;
	RecoverDataManager* m_recoverDataMgr;
	NSString* _m_selName;
}
@property(retain, nonatomic) NSString* m_selName;
-(void)forceToClose;
-(void)onRecoverFailure;
-(void)onRecoverSuccess;
-(void)onDoRecover:(id)recover;
-(void)selectCell:(id)cell;
-(void)makeCell:(id)cell cellInfo:(id)info;
-(void)addRecoverName:(id)name order:(unsigned)order;
-(void)initView;
-(void)adjustTableViewRect;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
-(void)onAddRecoverData:(id)data order:(unsigned)order;
-(void)finishAlertView:(id)view clickedButtonAtIndex:(int)index;
-(void)startAlertView:(id)view clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@interface RecoverDataItem : NSObject {
	NSString* m_nsDescription;
	unsigned long m_dataType;
	unsigned long m_operationType;
	NSString* m_nsPath;
}
@property(retain, nonatomic) NSString* m_nsPath;
@property(assign, nonatomic) unsigned long m_operationType;
@property(assign, nonatomic) unsigned long m_dataType;
@property(retain, nonatomic) NSString* m_nsDescription;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface RecoverDataManager : MMObject <MMPackageDownloadMgrExt> {
	NSMutableDictionary* m_dicRecoverData;
	RecoverDataWorker* m_worker;
	MMDelegateProxy<RecoverDataManagerDelegate>* m_delegate;
}
-(id)getUploadPath:(id)path;
-(BOOL)doRecover:(id)recover;
-(BOOL)readItem:(XmlReaderNode_t*)item item:(id)item2;
-(void)parseConfigItems:(CXmlReader*)items name:(id)name order:(unsigned*)order items:(id)items4;
-(BOOL)parseConfigContent:(id)content xmlReader:(CXmlReader*)reader;
-(void)receiveConfigContent:(id)content;
-(void)notifyAddUploadData:(id)data order:(unsigned)order items:(id)items;
-(void)notifyAddRecoverData:(id)data order:(unsigned)order;
-(void)addRecoverData:(id)data order:(unsigned)order arrItems:(id)items;
-(void)downloadPackage:(id)package;
-(void)downloadConfigs;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(void)onPackageDownloadFinish:(id)finish package:(id)package;
-(void)onPackageListUpdated:(id)updated;
@end

@interface RecoverDataWorker : NSObject {
}
+(id)transformPath:(id)path;
-(BOOL)deleteOneFile:(id)file;
-(BOOL)databaseFix:(id)fix;
-(BOOL)recoverDataDatabase:(id)database;
-(BOOL)fileDelete:(id)aDelete;
-(BOOL)recoverDataFile:(id)file;
-(BOOL)doRecoverJob:(id)job;
-(void)dealloc;
-(id)init;
@end

@interface SelectLocationInfo : NSObject {
	NSString* label;
	NSString* poiName;
	CLLocation* location;
	int scale;
}
@property(retain, nonatomic) NSString* poiName;
@property(retain, nonatomic) NSString* label;
@property(assign, nonatomic) int scale;
@property(retain, nonatomic) CLLocation* location;
-(void)dealloc;
@end

@interface MMPickLocationViewController : MMUIViewController <UITableViewDelegate, tableViewDelegate, UITableViewDataSource, IGetPOIListMgrExt, ILocationMgrExt, UIGestureRecognizerDelegate, MMRefreshTableFooterDelegate, MMSearchBarDelegate, MKMapViewDelegate, MMLocationPinViewDelegate, UIAlertViewDelegate, UIActionSheetDelegate> {
	MMDelegateProxy<MMPickLocationViewControllerDelegate>* _delegate;
	NSString* _address;
	NSString* _searchKeyword;
	MMSearchBar* _searchBar;
	MMLocationPinView* _pinView;
	MKMapView* _mapView;
	MMTableView* _tableView;
	WCTimeLineFooterView* _nearTableFooterView;
	WCTimeLineFooterView* _searchTableFooterView;
	UIAlertView* _errorAlertView;
	UIImageView* _shadowLineImageView;
	BOOL _isLoadFinish;
	BOOL _shouldUpdateList;
	BOOL _isOnlyUseUserLocation;
	BOOL _isMapAnimating;
	BOOL _useWXPOI;
	BOOL _useApplePOI;
	BOOL _limitZoomLevel;
	int _geoTag;
	unsigned _scene;
	unsigned _maxZoomLevel;
	XXStruct_zYrK5D _lastSelectedLocation;
	XXStruct_zYrK5D _firstGetNearLocation;
	UIButton* _showMyLocationButton;
	NSMutableArray* _poiAnnotationList;
	NSMutableArray* _searchPOIResultList;
	unsigned _selectedPoiIndex;
	timeval _startLocateTime;
	CGSize _beginTouchDeltaRatio;
	XXStruct_zYrK5D _beginTouchRegion;
	UIPinchGestureRecognizer* _pinchGestureRecognizer;
	NSMutableArray* _sysGestureRecognizers;
}
@property(retain, nonatomic) NSString* searchKeyword;
@property(retain, nonatomic) NSString* address;
@property(assign, nonatomic) MMDelegateProxy<MMPickLocationViewControllerDelegate>* delegate;
-(id).cxx_construct;
-(void)OnGetSearchPOIList:(id)list Coordinate:(XXStruct_zYrK5D)coordinate Keyword:(id)keyword StartFromFirst:(BOOL)first EndOfList:(BOOL)list5 Error:(int)error;
-(void)OnGetNearPOIList:(id)list Coordinate:(XXStruct_zYrK5D)coordinate StartFromFirst:(BOOL)first EndOfList:(BOOL)list4 Error:(int)error;
-(id)getAddressFromPlaceMark:(id)placeMark;
-(void)OnSearchMKLocalSearchResponse:(id)response Error:(id)error;
-(void)updataSearchListWithCoordinate:(XXStruct_zYrK5D)coordinate Keyword:(id)keyword StartFromFirst:(BOOL)first;
-(void)updatePOIListWithCoordinate:(XXStruct_zYrK5D)coordinate StartFromFirst:(BOOL)first;
-(void)onDidFindAddress:(id)on forTag:(int)tag;
-(void)stopGeocoder;
-(void)getAddressByLocation:(XXStruct_zYrK5D)location;
-(void)setSearchTableResultText:(id)text;
-(void)mmSearchDisplayControllerWillEndSearch;
-(void)SearchBarBecomeActive;
-(void)relayoutSubviews;
-(void)mmsearchBarSearchButtonClicked:(id)clicked;
-(void)mmSearchBarTextDidChange:(id)mmSearchBarText;
-(void)didSearchViewTableSelect:(id)select;
-(void)mmsearchBarTextDidBeginEditing:(id)mmsearchBarText;
-(void)setSearchBar:(id)bar CancelButtonText:(id)text;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)didScrollViewScroll:(id)scroll;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)makeCell:(id)cell forPOIItem:(id)poiitem withWidth:(float)width atIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)resetSearchList;
-(id)getSearchItemAtIndex:(int)index;
-(void)updateUserPOIItem;
-(id)getSelectedPOIItem;
-(id)getPOIItemAtIndex:(unsigned)index;
-(id)getPOIAnnotationAtIndex:(unsigned)index;
-(void)scrollPOIItemToVisible:(unsigned)visible Animated:(BOOL)animated;
-(void)selectPOIAnnotation:(id)annotation;
-(void)selectPOIAtIndex:(unsigned)index Animated:(BOOL)animated;
-(void)onUpdatePOITableCell:(id)cell;
-(void)addUserPOIItem;
-(void)resetPOIList;
-(void)removePOIAtIndex:(unsigned)index UpdateTable:(BOOL)table Animated:(BOOL)animated;
-(void)addPOIItem:(id)item UpdateTable:(BOOL)table Animated:(BOOL)animated;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)showPinViewCallout;
-(void)addUserLocationAnnotation;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapViewDidFailLoadingMap:(id)mapView withError:(id)error;
-(void)mapViewDidFinishLoadingMap:(id)mapView;
-(void)mapView:(id)view didFailToLocateUserWithError:(id)error;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
-(double)getDistanceBetween:(XXStruct_zYrK5D)between AndTarget:(XXStruct_zYrK5D)target;
-(void)onCancelSelectLocation;
-(void)onLoadMapError:(id)error;
-(void)onTimerCheckUserLocation;
-(void)onTimeOut;
-(void)onShowMyLocation;
-(BOOL)isOnUserLocation:(XXStruct_zYrK5D)location;
-(id)getCurrentLocationInfo;
-(void)stopPicking;
-(void)onPinGestureUpdated:(id)updated;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)enableSysGestureRecognizers:(BOOL)recognizers;
-(void)initMapViewGestureRecognizer:(id)recognizer;
-(void)initGesture;
-(void)adjustSubviewRects;
-(void)willDisshow;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initView;
-(void)showSearchTableLoadMore;
-(void)initHeaderView;
-(void)initMapPinView:(BOOL)view;
-(void)initSearchBar;
-(void)initShowMyLocationButton;
-(void)initTableView;
-(void)reportOnDone;
-(void)dealloc;
-(id)initWithScene:(unsigned)scene OnlyUseUserLocation:(BOOL)location;
@end

@interface GetPOIListMgr : MMService <PBMessageObserverDelegate, MMService> {
	SKBuiltinBuffer_t* _nearBuff;
	SKBuiltinBuffer_t* _searchBuff;
	XXStruct_zYrK5D _lastCoordinate;
}
@property(retain, nonatomic) SKBuiltinBuffer_t* searchBuff;
@property(retain, nonatomic) SKBuiltinBuffer_t* nearBuff;
-(id).cxx_construct;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)getSearchPOIList:(XXStruct_zYrK5D)list KeyWord:(id)word StartFromFirst:(BOOL)first Scene:(unsigned)scene;
-(BOOL)getNearPOIList:(XXStruct_zYrK5D)list StartFromFirst:(BOOL)first Scene:(unsigned)scene;
-(void)dealloc;
@end

@interface FavLocationRemarkViewController : MMUIViewController <IFavoritesExt, UITextViewDelegate> {
	FavoritesItem* m_favItem;
	SelectLocationInfo* m_locInfo;
	UIImageView* m_textBkgView;
	UITextView* m_textView;
	UIImageView* m_locImg;
	UILabel* m_poiLabel;
	UILabel* m_placeholderLabel;
	MMDelegateProxy<FavLocRemarkDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavLocRemarkDelegate>* m_delegate;
-(void)OnUpdateItemRemark:(unsigned long)remark ErrCode:(int)code;
-(void)onFavLocRemarkComplete;
-(void)onCancel;
-(void)textViewDidChange:(id)textView;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)updateTextViewSize;
-(void)didReceiveMemoryWarning;
-(void)initView;
-(void)viewDidLoad;
-(void)initRightBtn;
-(void)initLeftBtn;
-(void)dealloc;
-(id)initWithFavItem:(id)favItem;
-(id)initWithLocInfo:(id)locInfo;
@end

@interface MMMusicInfo : NSObject {
	NSString* m_nsMusicID;
	NSString* m_nsTitle;
	NSString* m_nsSinger;
	NSString* m_nsEPName;
	NSString* m_nsCoverImg;
	NSString* m_nsLyrics;
	NSString* m_nsWebUrl;
	NSString* m_nsDataUrl;
	NSString* m_nsLowBandUrl;
	NSString* m_nsAppId;
}
@property(retain, nonatomic) NSString* m_nsAppId;
@property(retain, nonatomic) NSString* m_nsLowBandUrl;
@property(retain, nonatomic) NSString* m_nsDataUrl;
@property(retain, nonatomic) NSString* m_nsWebUrl;
@property(retain, nonatomic) NSString* m_nsLyrics;
@property(retain, nonatomic) NSString* m_nsCoverImg;
@property(retain, nonatomic) NSString* m_nsEPName;
@property(retain, nonatomic) NSString* m_nsSinger;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(retain, nonatomic) NSString* m_nsMusicID;
-(void)dealloc;
@end

@interface LbsRoomInfoViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, NewChatRoomMemberItemViewDelegate, contactInfoDelegate, PBMessageObserverDelegate, UIAlertViewDelegate> {
	unsigned long m_uiEventID;
	unsigned long m_iMemberCount;
	CContact* m_lbsRoomContact;
	NSMutableArray* m_arrMemberList;
	MMLoadingView* m_loadingView;
	MMTableView* m_tableView;
	UIView* m_headerView;
	UIImageView* m_memberBkgView;
	UIImageView* m_memberBorderView;
	NSMutableArray* m_arrMemberView;
}
@property(retain, nonatomic) NSMutableArray* m_arrMemberView;
@property(retain, nonatomic) CContact* m_lbsRoomContact;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)stopLoading;
-(void)startLoading;
-(id)createBackGroundImageWithImage:(id)image scale:(unsigned long)scale;
-(void)updateHeadView;
-(void)loadRoomMember:(id)member;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)tryGetRoomMember;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)openContactInfo:(id)info;
-(void)onGetRoomMemberFailed;
-(void)onGetRoomMemberFinished;
-(void)initHeaderView;
-(void)initTableView;
-(void)dealloc;
-(void)viewDidLoad;
-(void)initView;
-(void)initData;
@end

@interface ClearDataItem : NSObject {
	int _fileType;
	unsigned long _fileSize;
	NSString* _filePath;
	NSString* _session;
	NSString* _userName;
	unsigned long _mesLocalId;
}
@property(assign, nonatomic) unsigned long mesLocalId;
@property(retain, nonatomic) NSString* userName;
@property(retain, nonatomic) NSString* session;
@property(retain, nonatomic) NSString* filePath;
@property(assign, nonatomic) unsigned long fileSize;
@property(assign, nonatomic) int fileType;
-(void)dealloc;
-(id)init;
@end

@interface ClearDataMgr : MMService <MMService> {
	NSMutableArray* _arrSourceDataItem;
	NSMutableArray* _arrCacheDataItem;
	NSMutableArray* _arrSessionInfo;
	unsigned _curSessionIndex;
	MMTimeChecker* _dataLoaderTimeChecker;
	unsigned long long _startLoadDataTime;
	unsigned long _loadDataCostTime;
}
-(void)deleteData:(id)data;
-(void)loadMoreData;
-(BOOL)hasMoreDataItem;
-(id)getAllDataItem;
-(id)getDataItemOfIndex:(unsigned)index;
-(unsigned)getCountOfDataItem;
-(unsigned long)getLoadDataCostTime;
-(id)getAllSourceDataItem;
-(void)stopLoadData;
-(void)startLoadData;
-(void)onLoadData;
-(unsigned long)parseMesLocalIdFromPath:(id)path;
-(id)getSessionName:(id)name;
-(void)dealloc;
-(id)init;
@end

@interface ResourceItemCell : MMTableViewCell {
	UIImageView* _selectedImage;
	UIImageView* _resourceIcon;
	UIButton* _resourceButton;
	UIImageView* _playIcon;
	UIButton* _detailButton;
	UILabel* _sizeLabel;
	UILabel* _fileNameLabel;
	UILabel* _sourceLabel;
	UIView* _lineView;
	ClearDataItem* _dataItem;
}
@property(readonly, assign, nonatomic) ClearDataItem* dataItem;
@property(retain, nonatomic) UIButton* resourceButton;
@property(retain, nonatomic) UIButton* detailButton;
-(void)updateDataItem:(id)item selected:(BOOL)selected;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)initView;
@end

@interface ResourceCleanerViewController : MMUIViewController <tableViewDelegate, UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate, UIActionSheetDelegate, IClearDataMgrExt, IScanAppSpaceSizeServiceExt, MMRefreshTableFooterDelegate> {
	MMTableView* _tableView;
	WCTimeLineFooterView* _tableFooterView;
	UIView* _tableHeaderView;
	UIView* _appSpaceView;
	UIImageView* _footerView;
	UIButton* _selectAllButton;
	UIButton* _deleteButton;
	UILabel* _sizeLabel;
	UILabel* _emptyTipLabel;
	NSMutableArray* _arrSelectedData;
	BOOL _hasLoadFinished;
	BOOL _hasLookDetailed;
}
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onReturn;
-(void)onLookDetail:(id)detail;
-(void)onDeleteSelectedData;
-(void)deleteSelectedData;
-(void)onSelecteAll;
-(id)getDataSizeShowString:(id)string;
-(unsigned long)getDataSize:(id)size;
-(id)getSelectButtonTitle;
-(void)handleClickAppMessage:(id)message;
-(void)previewAppNode:(id)node msgWrap:(id)wrap;
-(void)handleClickVideoMessage:(id)message;
-(void)hanleClickImageMessage:(id)message;
-(void)onScanTaskFinished;
-(void)onScanTaskUpdateProgress;
-(void)onLoadDataFinished;
-(void)onLoadDataProgroess:(unsigned long)progroess;
-(void)updateProgress:(unsigned long)progress;
-(void)onReloadDataItem;
-(void)onSelectedDataChange;
-(void)MMRefreshTableFooterDidTriggerRefresh:(id)mmrefreshTableFooter;
-(void)onLoadMore;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)dealloc;
-(void)didAppear;
-(void)viewDidLoad;
-(void)initView;
-(void)initFooterPannelView;
-(void)updateFooterPannelView;
-(void)initTableHeaderView;
-(void)updateTableHeaderView;
-(void)updateTableFooterView;
-(void)updateTableView;
-(CGRect)getTableViewFrame;
-(BOOL)isDataEmpty;
-(void)initData;
-(void)loadMoreData;
-(id)init;
@end

@interface ComposeSendHelper : MMObject <PBMessageObserverDelegate> {
	MIMEInfo* m_mimeInfo;
	CMail* m_mail;
	unsigned long m_realSize;
	MMDelegateProxy<ComposeSendDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<ComposeSendDelegate>* m_delegate;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(BOOL)composeSendEvent;
-(id)getToUserList;
-(void)ComposeSend:(id)send mimeData:(id)data realSize:(unsigned long)size;
-(id)getClientID;
-(void)dealloc;
-(id)init;
@end

@interface ImageFileInfo : NSObject {
	BOOL isExistInServer;
	NSString* thumbPath;
	NSString* imagePath;
	unsigned long msgID;
	NSString* attachID;
	unsigned long checkedCount;
	unsigned long startPos;
	unsigned long totalSize;
	NSString* clientID;
}
@property(assign, nonatomic) BOOL isExistInServer;
@property(retain, nonatomic) NSString* clientID;
@property(assign, nonatomic) unsigned long totalSize;
@property(assign, nonatomic) unsigned long startPos;
@property(assign, nonatomic) unsigned long checkedCount;
@property(retain, nonatomic) NSString* attachID;
@property(assign, nonatomic) unsigned long msgID;
@property(retain, nonatomic) NSString* imagePath;
@property(retain, nonatomic) NSString* thumbPath;
-(void)dealloc;
-(id)init;
@end

@interface AttachmentFileInfo : NSObject {
	NSString* clientID;
	NSString* localPath;
	NSString* fileName;
	NSString* attachID;
	unsigned long startPos;
	unsigned long totalSize;
}
@property(assign, nonatomic) unsigned long totalSize;
@property(assign, nonatomic) unsigned long startPos;
@property(retain, nonatomic) NSString* attachID;
@property(retain, nonatomic) NSString* fileName;
@property(retain, nonatomic) NSString* localPath;
@property(retain, nonatomic) NSString* clientID;
-(void)dealloc;
-(id)init;
@end

@interface MIMEInfo : NSObject {
	NSString* clientID;
	NSData* MIMEData;
	unsigned long startPos;
	unsigned long totalSize;
}
@property(assign, nonatomic) unsigned long totalSize;
@property(assign, nonatomic) unsigned long startPos;
@property(retain, nonatomic) NSData* MIMEData;
@property(retain, nonatomic) NSString* clientID;
-(void)dealloc;
-(id)init;
@end

@interface MailItem : NSObject {
	unsigned long mailID;
	unsigned long realSize;
	CMail* mailBody;
	NSArray* uploadImageList;
	NSArray* attachInfoList;
}
@property(retain, nonatomic) NSArray* attachInfoList;
@property(retain, nonatomic) NSArray* uploadImageList;
@property(retain, nonatomic) CMail* mailBody;
@property(assign, nonatomic) unsigned long realSize;
@property(assign, nonatomic) unsigned long mailID;
-(void)dealloc;
-(id)init;
@end

@interface MailCacheItem : NSObject <PBCoding> {
	unsigned long mailID;
	NSString* subject;
}
@property(retain, nonatomic) NSString* subject;
@property(assign, nonatomic) unsigned long mailID;
+(void)initialize;
+(void)_initPBTableOfMailCacheItem;
-(void)dealloc;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface NewQQMailMgr : MMService <MMService, INewQQMailExt, UploadConversationFileDelegate, ComposeSendDelegate, UploadAttachmentDataDelegate> {
	UploadConversationFileHelper* m_uploadConversationFileHandler;
	ComposeSendHelper* m_composeSendHandler;
	UploadAttachmentDataHelper* m_uploadAttachmentDataHandler;
	NewQQMailQueueHelper* m_newQQMailQueueHandler;
	NSMutableArray* m_composeSendMailQueue;
	BOOL m_bIsComposeSending;
}
-(void)onServiceReloadData;
-(void)dealloc;
-(void)onServiceInit;
-(void)OnUploadAttachmentData:(id)data attachID:(id)anId uploadedDataSize:(unsigned long)size err:(int)err;
-(void)OnComposeSendComplete:(int)complete;
-(void)OnUploadConversationFileComplete:(id)complete err:(int)err;
-(void)checkComposeSendMailQueue;
-(void)enComposeSendMailQueue:(id)queue imageInfoList:(id)list attachInfoList:(id)list3;
-(void)popComposeSendMailQueue;
-(id)getComposeSendMailQueueFront;
-(void)NewComposeSend:(id)send imageInfoList:(id)list attachInfoList:(id)list3;
-(void)NewUploadAttachmentData:(id)data fileName:(id)name;
-(id)genMailContent:(id)content withUploadImageAry:(id)uploadImageAry;
-(id)genUploadImageAry:(id)ary imageInfoList:(id)list;
-(id)getMimeData:(id)data;
-(id)getMimeBody:(id)body;
-(id)getMimeHead:(id)head;
-(id)getLinkIDKey:(id)key;
-(id)getContentID;
-(id)init;
-(void)setLastBoundary:(id)boundary;
-(void)setBoundary:(id)boundary;
@end

@interface UploadAttachmentDataHelper : MMObject <PBMessageObserverDelegate> {
	NSMutableArray* m_uploadAttachmentQueue;
	BOOL m_bIsUploading;
	MMDelegateProxy<UploadAttachmentDataDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<UploadAttachmentDataDelegate>* m_delegate;
-(void)dealloc;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)popQueue;
-(BOOL)uploadAttachment;
-(void)startUploadAttachment:(id)attachment fileName:(id)name;
-(void)removeAttachmentTempFile:(id)file;
-(BOOL)createAttachmentTempFile:(id)file data:(id)data;
-(id)getLocalPathWithClientID:(id)clientID;
-(id)getFileNameWithClientID:(id)clientID;
-(id)getClientID;
-(id)getAttachmentTempPath:(id)path;
-(id)init;
@end

@interface UploadConversationFileHelper : MMObject <PBMessageObserverDelegate> {
	NSMutableArray* m_checkFileQueue;
	NSMutableArray* m_uploadFileQueue;
	NSMutableArray* m_uploadFileResult;
	MMDelegateProxy<UploadConversationFileDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<UploadConversationFileDelegate>* m_delegate;
-(void)dealloc;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)handleUploadFileResp:(id)resp;
-(BOOL)uploadFile;
-(void)handleCheckConversationFileResp:(id)resp;
-(id)getImageInfoFromCheckQueue:(unsigned long)checkQueue;
-(void)removeImageInfoFromCheckQueue:(unsigned long)checkQueue;
-(BOOL)checkFile;
-(id)getClientID;
-(void)clearResource;
-(void)updateUploadFileResult:(unsigned long)result attachID:(id)anId totalSize:(unsigned long)size isExistInServer:(BOOL)server;
-(void)StartUploadImageFile:(id)file;
-(id)init;
@end

@interface MMPOIAnnotation : MMObject <MKAnnotation> {
	POIItem* _poiItem;
}
@property(readonly, assign, nonatomic) NSString* subtitle;
@property(readonly, assign, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) XXStruct_zYrK5D coordinate;
@property(retain, nonatomic) POIItem* poiItem;
-(void)dealloc;
-(id)initWithPOIItem:(id)poiitem;
@end

@interface GoogleContactsViewController : MMSearchBarDisplayController <UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, IGoogleContactMgrExt, contactInfoDelegate, IContactMgrExt, GoogleContactViewDelegate, ContactInfoViewControllerDelegate, ContactsItemViewDelegate> {
	MMLoadingView* m_loadingView;
	MMTableView* m_tableView;
	NSMutableArray* m_filteredFriendList;
	NSMutableArray* m_googleContactList;
	unsigned long m_clickSource;
	BOOL m_needPopTwoCount;
	NSMutableSet* m_sentAddFriendRequestSet;
	NSMutableSet* m_sentInviteRequestSet;
	UILabel* m_noResultLabel;
}
@property(retain, nonatomic) UILabel* m_noResultLabel;
@property(retain, nonatomic) NSMutableSet* m_sentInviteRequestSet;
@property(retain, nonatomic) NSMutableSet* m_sentAddFriendRequestSet;
@property(retain, nonatomic) NSMutableArray* m_googleContactList;
@property(retain, nonatomic) NSMutableArray* m_filteredFriendList;
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) MMLoadingView* m_loadingView;
@property(assign, nonatomic) BOOL m_needPopTwoCount;
@property(assign, nonatomic) unsigned long m_clickSource;
-(void)onContactsItemViewRightButtonClick:(id)click;
-(void)onSentInviteRequest:(id)request;
-(void)newMessageFromContactInfo:(id)contactInfo;
-(void)onAddContact:(id)contact;
-(void)addToContactsFromContactInfo:(id)contactInfo;
-(void)onListGoogleContacts:(id)contacts ret:(unsigned long)ret;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)doSearch:(id)search;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeGoogleContactCell:(id)cell row:(unsigned)row tableView:(id)view;
-(id)getDisplayContactDataFromGContactAndDB:(id)gcontactAndDB;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)reloadTableData;
-(void)initView;
-(void)onReturn;
-(void)initData;
-(void)stopLoading;
-(void)startLoading;
-(void)updateInMyContactFlagAndKickOtherContact;
-(void)closureTheSameGoogleId;
-(void)kickTheSameWechatUsrName;
-(void)sortContactList;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface GoogleContact : NSObject <PBCoding> {
	BOOL isInMyContactList;
	BOOL isOnlyInOtherContact;
	NSString* googleId;
	NSString* nickName;
	NSString* gmail;
	unsigned long sex;
	NSString* wxUsrname;
	NSString* wxNickname;
	NSString* headImgUrl;
	NSString* headHDImgUrl;
	NSString* googleImageUrl;
	NSMutableArray* emailList;
}
@property(assign, nonatomic) BOOL isOnlyInOtherContact;
@property(retain, nonatomic) NSMutableArray* emailList;
@property(retain, nonatomic) NSString* googleImageUrl;
@property(retain, nonatomic) NSString* headHDImgUrl;
@property(retain, nonatomic) NSString* headImgUrl;
@property(retain, nonatomic) NSString* wxNickname;
@property(retain, nonatomic) NSString* wxUsrname;
@property(assign, nonatomic) BOOL isInMyContactList;
@property(assign, nonatomic) unsigned long sex;
@property(retain, nonatomic) NSString* gmail;
@property(retain, nonatomic) NSString* nickName;
@property(retain, nonatomic) NSString* googleId;
+(void)initialize;
+(void)_initPBTableOfGoogleContact;
-(int)compareGoogleContactsAscending:(id)ascending;
-(void)dealloc;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface GoogleContactLocalCacheImpl : NSObject <PBCoding> {
	NSMutableArray* m_contactList;
	NSString* m_googleContactName;
	NSMutableDictionary* m_nickNameDic;
}
@property(retain, nonatomic) NSMutableDictionary* m_nickNameDic;
@property(retain, nonatomic) NSString* m_googleContactName;
@property(retain, nonatomic) NSMutableArray* m_contactList;
+(void)initialize;
+(void)_initPBTableOfGoogleContactLocalCacheImpl;
-(id)getGoogleNickNameForGmail:(id)gmail forKey:(id)key;
-(id)getContactListForKey:(id)key;
-(void)clearCacheForKey:(id)key;
-(BOOL)saveContactToFile:(id)file forKey:(id)key;
-(id)loadContactForKey:(id)key;
-(id)getGoogleContactLocalCachePath;
-(id)getGoogleContactLocalCacheRootDir;
-(void)dealloc;
-(oneway void)release;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface GoogleContactMgr : MMService <MMService, listGoogleContactsFromWXServerDelegate, GoogleContactAPIFetchImplDelegate, PBMessageObserverDelegate> {
	GoogleContactLocalCacheImpl* m_contactCacheImpl;
	ListGoogleContactsFromWXServerImpl* _listContactImpl;
	GoogleContactAPIFetchImpl* _apiFetchImpl;
	NSString* m_contactKeyForGoogle;
	NSMutableArray* _contactsFromGoogle;
	GoogleSetting* m_setting;
	BOOL _isStopListContact;
	unsigned long m_listGoogleClickSource;
	unsigned long m_bindGoogleCgiEventID;
	unsigned long m_inviteGoogleCgiEventID;
}
@property(retain, nonatomic) GoogleContactAPIFetchImpl* m_apiFetchImpl;
@property(retain, nonatomic) ListGoogleContactsFromWXServerImpl* m_listContactImpl;
@property(retain, nonatomic) GoogleContactLocalCacheImpl* m_contactCacheImpl;
@property(retain, nonatomic) NSMutableArray* m_contactsFromGoogle;
@property(retain, nonatomic) GoogleSetting* m_setting;
-(void)clearCurrentContactCache;
-(void)handleRespForInviteGoogleContact:(id)inviteGoogleContact;
-(void)handleRespForBindGoogleContact:(id)bindGoogleContact;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)onGetGoogleContact:(id)contact isDecodeOK:(BOOL)ok;
-(void)onNetWorkError;
-(void)onListGoogleContactsFromWXServer:(id)wxserver ret:(unsigned long)ret;
-(id)getGoogleNickNameForGmail:(id)gmail;
-(id)getFillGoogleContactName;
-(id)getBindedGoogleContactName;
-(BOOL)isBindAGoogleAccount;
-(BOOL)beginGoogleOauth;
-(BOOL)refreshGoogleOauth;
-(BOOL)needGoogleOauth;
-(id)getCacheGoogleContacts;
-(BOOL)inviteGoogleContact:(id)contact;
-(BOOL)listGoogleContact:(unsigned long)contact;
-(BOOL)unbindGoogleContact:(id)contact;
-(BOOL)bindGoogleContact:(id)contact force:(BOOL)force;
-(void)stopListGoogleContact;
-(void)listGoogleContactsFromWXServer;
-(id)getMd5GoogleContactName;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(void)dealloc;
-(id)init;
-(id)getGoogleSetting;
-(id)getAuthorizationCode;
-(void)setOauth:(id)oauth;
@end

@interface GoogleSetting : NSObject <PBCoding> {
	NSString* m_clientID;
	NSString* m_clientSecret;
	NSString* m_refreshToken;
	NSString* m_scope;
	NSString* m_redirectURI;
	NSMutableDictionary* m_parameters;
	NSString* m_tokenURL;
	NSDate* m_expirationDate;
}
@property(retain, nonatomic) NSDate* m_expirationDate;
@property(retain, nonatomic) NSString* m_tokenURL;
@property(retain, nonatomic) NSMutableDictionary* m_parameters;
@property(retain, nonatomic) NSString* m_redirectURI;
@property(retain, nonatomic) NSString* m_scope;
@property(retain, nonatomic) NSString* m_refreshToken;
@property(retain, nonatomic) NSString* m_clientSecret;
@property(retain, nonatomic) NSString* m_clientID;
+(id)getGoogleSettingLocalCachePath;
+(id)getGoogleSettingLocalCacheRootDir;
+(id)loadSetting;
+(void)initialize;
+(void)_initPBTableOfGoogleSetting;
-(void)saveSetting;
-(void)dealloc;
-(void)resetSetting;
-(id)init;
-(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)getValueTagIndexMap;
-(id)getValueTypeTable;
@end

@interface ListGoogleContactsFromWXServerImpl : MMObject <PBMessageObserverDelegate> {
	NSMutableArray* _handlingList;
	NSMutableArray* _finishedList;
	MMDelegateProxy<listGoogleContactsFromWXServerDelegate>* _delegate;
	BOOL _isStop;
	unsigned long m_clickSource;
	unsigned long m_listGoogleContactCgiEventID;
	unsigned long m_LastHandleListCount;
}
@property(assign, nonatomic) MMDelegateProxy<listGoogleContactsFromWXServerDelegate>* delegate;
-(void)handleListGoogleContactsResp:(id)resp Event:(unsigned long)event;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)broadcastFail:(unsigned long)fail;
-(void)broadcastSuccessed;
-(void)sendListGoogleContactRequest:(unsigned long)request;
-(void)stopListGoogleContactsFromWXServer;
-(void)startListGoogleContactsFromWXServer:(id)wxserver clickSource:(unsigned long)source;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandlerFacade : NSObject {
	NSMutableDictionary* m_functionHandlers;
	NSMutableDictionary* m_functionCallExtraDataMap;
	NSDictionary* m_functionMap;
	id<WebviewJSEventHandlerBaseDelegate> m_delegate;
}
@property(assign, nonatomic) id<WebviewJSEventHandlerBaseDelegate> m_delegate;
-(void)OnWillAnimateRotationToInterfaceOrientation:(int)on duration:(double)duration;
-(id)extraDataForNextJSEventCalled:(id)nextJSEventCalled;
-(void)dealloc;
-(BOOL)canHandleJSEvent:(id)event;
-(id)handlerForFunction:(id)function;
-(void)handleJSEvent:(id)event;
-(id)init;
@end

@interface WebviewJSEventHandler_shareTimeline : WebviewJSEventHandlerBase <WCCommitViewResultDelegate> {
}
-(void)onDoneForwardForForwardView:(id)forwardView;
-(void)onCancelForwardForForwardView:(id)forwardView;
-(void)shareTimelineWithEvent:(id)event imageData:(id)data;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface JSEvent : NSObject {
	NSMutableDictionary* m_params;
	id<JSEventHandler> m_delegate;
	NSString* m_callbackID;
	NSString* m_funcName;
}
@property(assign, nonatomic) id<JSEventHandler> m_delegate;
-(id)endWithError:(id)error andDescription:(id)description;
-(id)endWithError:(id)error;
-(id)endWithResutl:(id)resutl;
-(id)webviewController;
-(id)getCallbackID;
-(id)getParams;
-(id)getFuncName;
-(void)setFuncName:(id)name;
-(void)setCallbackID:(id)anId;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate parameters:(id)parameters;
@end

@interface JSFunctionDef : NSObject {
	SEL funcSelector;
	int funcType;
	NSString* funcName;
	JSAPIPermissionBitSet* permissionBitset;
}
@property(copy, nonatomic) JSAPIPermissionBitSet* permissionBitset;
@property(copy, nonatomic) NSString* funcName;
@property(assign, nonatomic) int funcType;
@property(assign, nonatomic) SEL funcSelector;
+(id)FuncDefWithFunc:(id)func Selector:(SEL)selector FuncType:(int)type PermissionBitSet2:(unsigned long)a2;
+(id)FuncDefWithFunc:(id)func Selector:(SEL)selector FuncType:(int)type PermissionBitSet:(unsigned long)set;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandler_sendAppMessage : WebviewJSEventHandlerBase <SessionSelectControllerDelegate, ShareMessageConfirmLogicHelperDelegate> {
	ShareMessageConfirmLogicHelper* m_jsSendAppMsgHelper;
	CMessageWrap* m_wrapMsg;
	NSString* m_nsThumbUrl;
}
@property(copy, nonatomic) NSString* m_nsThumbUrl;
@property(retain, nonatomic) CMessageWrap* m_wrapMsg;
-(void)dealloc;
-(void)jsAdd2MyFav:(id)fav;
-(void)OnBackTo3rdApp:(id)a3rdApp;
-(void)OnSendMessageCancel:(id)cancel;
-(void)OnSendMessageFail:(id)fail WithError:(int)error;
-(void)OnSendMessageOK:(id)ok;
-(void)OnSelectSessionCancel:(id)cancel;
-(void)OnSelectSession:(id)session SessionSelectController:(id)controller;
-(void)OnWillAnimateRotationToInterfaceOrientation:(int)on duration:(double)duration;
-(void)sendAppMessage:(id)message extraData:(id)data imageData:(id)data3;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface BindOrUnbindGoogleAccountViewController : MMUIViewController <IGoogleContactMgrExt, UIActionSheetDelegate> {
	UIButton* m_bindButton;
	UIButton* m_unbindButton;
	UILabel* m_hadBindInfoText;
	UILabel* m_notBindInfoText;
	GTMOAuth2Authentication* m_auth;
	unsigned long m_clickSource;
	UIButton* m_viewButton;
	int m_mode;
}
@property(retain, nonatomic) UIButton* m_viewButton;
@property(retain, nonatomic) GTMOAuth2Authentication* m_auth;
@property(retain, nonatomic) UILabel* m_notBindInfoText;
@property(retain, nonatomic) UILabel* m_hadBindInfoText;
@property(retain, nonatomic) UIButton* m_unbindButton;
@property(retain, nonatomic) UIButton* m_bindButton;
@property(assign, nonatomic) int m_mode;
@property(assign, nonatomic) unsigned long m_clickSource;
-(void)adjustSubviewRects;
-(void)onFetchFromGoogleFailed;
-(void)onUnbindGoogleContactNetWorkFailed;
-(void)onUnbindGoogleContactFailedWith:(unsigned long)with;
-(void)onUnbindGoogleContactOK;
-(void)onBindGoogleContactNetWorkFailed;
-(void)onBindGoogleContactHasBeenUsed;
-(void)onBindGoogleContactFailedWith:(unsigned long)with;
-(void)onBindGoogleContactOK;
-(void)confirmBindGoogleAccountForce;
-(void)confrimBindAnotherGoogleAccount;
-(void)onCancelBindAnotherGoogleAccount;
-(void)viewController:(id)controller finishedWithAuth:(id)auth error:(id)error;
-(void)onClickBindButton;
-(void)clearBrowserCookies:(id)cookies;
-(void)gotoGoogleOauth;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onClickUnbindButton;
-(void)onClickViewButton;
-(void)didReceiveMemoryWarning;
-(void)updateUI;
-(void)viewDidLoad;
-(id)init;
-(void)dealloc;
@end

@interface GTMOAuth2AuthorizationArgs : NSObject {
	NSMutableURLRequest* request_;
	id delegate_;
	SEL sel_;
	id completionHandler_;
	NSThread* thread_;
	NSError* error_;
}
@property(retain) NSError* error;
@property(retain) NSThread* thread;
@property(copy) id completionHandler;
@property(assign) SEL selector;
@property(retain) id delegate;
@property(retain) NSMutableURLRequest* request;
+(id)argsWithRequest:(id)request delegate:(id)delegate selector:(SEL)selector completionHandler:(id)handler thread:(id)thread;
-(void)dealloc;
@end

@interface GTMOAuth2Authentication : NSObject <GTMFetcherAuthorizationProtocol> {
	NSString* clientID_;
	NSString* clientSecret_;
	NSString* redirectURI_;
	NSMutableDictionary* parameters_;
	NSURL* tokenURL_;
	NSDate* expirationDate_;
	NSString* authorizationTokenKey_;
	NSDictionary* additionalTokenRequestParameters_;
	NSDictionary* additionalGrantTypeRequestParameters_;
	GTMHTTPFetcher* refreshFetcher_;
	NSMutableArray* authorizationQueue_;
	id<GTMHTTPFetcherServiceProtocol> fetcherService_;
	Class parserClass_;
	BOOL shouldAuthorizeAllRequests_;
	id userData_;
	NSMutableDictionary* properties_;
}
@property(readonly, assign) NSString* authorizationToken;
@property(retain) NSMutableArray* authorizationQueue;
@property(retain) GTMHTTPFetcher* refreshFetcher;
@property(copy) NSString* authorizationTokenKey;
@property(assign) Class parserClass;
@property(assign) id<GTMHTTPFetcherServiceProtocol> fetcherService;
@property(retain) NSDictionary* properties;
@property(retain) id userData;
@property(assign) BOOL shouldAuthorizeAllRequests;
@property(readonly, assign) BOOL canAuthorize;
@property(retain) NSString* userEmailIsVerified;
@property(retain) NSString* userEmail;
@property(retain) NSString* userID;
@property(copy) NSString* serviceProvider;
@property(copy) NSDate* expirationDate;
@property(copy) NSURL* tokenURL;
@property(retain) NSString* errorString;
@property(retain) NSString* code;
@property(retain) NSNumber* expiresIn;
@property(retain) NSString* refreshToken;
@property(retain) NSString* accessToken;
@property(retain) NSMutableDictionary* parameters;
@property(retain) NSDictionary* additionalGrantTypeRequestParameters;
@property(retain) NSDictionary* additionalTokenRequestParameters;
@property(retain) NSString* refreshScope;
@property(retain) NSString* assertion;
@property(retain) NSString* tokenType;
@property(retain) NSString* scope;
@property(copy) NSString* redirectURI;
@property(copy) NSString* clientSecret;
@property(copy) NSString* clientID;
+(id)scopeWithStrings:(id)strings;
+(id)dictionaryWithResponseData:(id)responseData;
+(id)dictionaryWithResponseString:(id)responseString;
+(id)unencodedOAuthParameterForString:(id)string;
+(void)invokeDelegate:(id)delegate selector:(SEL)selector object:(id)object object:(id)object4 object:(id)object5;
+(id)encodedQueryParametersForDictionary:(id)dictionary;
+(id)encodedOAuthValueForString:(id)string;
+(id)dictionaryWithJSONData:(id)jsondata;
+(id)authenticationWithServiceProvider:(id)serviceProvider tokenURL:(id)url redirectURI:(id)uri clientID:(id)anId clientSecret:(id)secret;
-(id)propertyForKey:(id)key;
-(void)setProperty:(id)property forKey:(id)key;
-(void)updateExpirationDate;
-(void)reset;
-(BOOL)primeForRefresh;
-(id)persistenceResponseString;
-(void)setKeysForPersistenceResponseString:(id)persistenceResponseString;
-(void)notifyFetchIsRunning:(BOOL)running fetcher:(id)fetcher type:(id)type;
-(void)tokenFetcher:(id)fetcher finishedWithData:(id)data error:(id)error;
-(id)beginTokenFetchWithDelegate:(id)delegate didFinishSelector:(SEL)selector;
-(id)userAgent;
-(void)waitForCompletionWithTimeout:(double)timeout;
-(BOOL)shouldRefreshAccessToken;
-(BOOL)authorizeRequest:(id)request;
-(void)invokeCallbackArgs:(id)args;
-(BOOL)authorizeRequestImmediateArgs:(id)args;
-(void)stopAuthorizationForRequest:(id)request;
-(void)stopAuthorization;
-(BOOL)isAuthorizedRequest:(id)request;
-(BOOL)isAuthorizingRequest:(id)request;
-(void)auth:(id)auth finishedRefreshWithFetcher:(id)fetcher error:(id)error;
-(BOOL)authorizeRequestArgs:(id)args;
-(void)authorizeRequest:(id)request delegate:(id)delegate didFinishSelector:(SEL)selector;
-(void)authorizeRequest:(id)request completionHandler:(id)handler;
-(void)setKeysForResponseJSONData:(id)responseJSONData;
-(void)setKeysForResponseString:(id)responseString;
-(void)setKeysForResponseDictionary:(id)responseDictionary;
-(void)dealloc;
-(id)description;
-(id)init;
@end

@interface GTMOAuth2SignIn : NSObject {
	GTMOAuth2Authentication* auth_;
	NSURL* authorizationURL_;
	NSDictionary* additionalAuthorizationParameters_;
	id delegate_;
	SEL webRequestSelector_;
	SEL finishedSelector_;
	BOOL hasHandledCallback_;
	GTMHTTPFetcher* pendingFetcher_;
	BOOL shouldFetchGoogleUserEmail_;
	BOOL shouldFetchGoogleUserProfile_;
	NSDictionary* userProfile_;
	SCNetworkReachabilityRef reachabilityRef_;
	NSTimer* networkLossTimer_;
	double networkLossTimeoutInterval_;
	BOOL hasNotifiedNetworkLoss_;
	id userData_;
}
@property(retain) GTMHTTPFetcher* pendingFetcher;
@property(assign) BOOL hasHandledCallback;
@property(assign, nonatomic) double networkLossTimeoutInterval;
@property(retain, nonatomic) NSDictionary* userProfile;
@property(assign, nonatomic) BOOL shouldFetchGoogleUserProfile;
@property(assign, nonatomic) BOOL shouldFetchGoogleUserEmail;
@property(retain, nonatomic) id userData;
@property(assign, nonatomic) SEL finishedSelector;
@property(assign, nonatomic) SEL webRequestSelector;
@property(retain, nonatomic) id delegate;
@property(retain, nonatomic) NSDictionary* additionalAuthorizationParameters;
@property(retain, nonatomic) NSURL* authorizationURL;
@property(retain, nonatomic) GTMOAuth2Authentication* authentication;
+(id)decodeWebSafeBase64:(id)a64;
+(void)revokeTokenForGoogleAuthentication:(id)googleAuthentication;
+(id)userInfoFetcherWithAuth:(id)auth;
+(id)mutableURLRequestWithURL:(id)url paramString:(id)string;
+(id)standardGoogleAuthenticationForScope:(id)scope clientID:(id)anId clientSecret:(id)secret;
+(id)nativeClientRedirectURI;
+(id)googleUserInfoURL;
+(id)googleRevocationURL;
+(id)googleTokenURL;
+(id)googleAuthorizationURL;
-(void)stopReachabilityCheck;
-(void)reachabilityTimerFired:(id)fired;
-(void)reachabilityTarget:(SCNetworkReachabilityRef)target changedFlags:(unsigned)flags;
-(void)destroyUnreachabilityTimer;
-(void)startReachabilityCheck;
-(void)invokeFinalCallbackWithError:(id)error;
-(void)finishSignInWithError:(id)error;
-(void)updateGoogleUserInfoWithData:(id)data;
-(void)infoFetcher:(id)fetcher finishedWithData:(id)data error:(id)error;
-(void)fetchGoogleUserInfo;
-(void)auth:(id)auth finishedWithFetcher:(id)fetcher error:(id)error;
-(void)authCodeObtained;
-(BOOL)loadFailedWithError:(id)error;
-(BOOL)cookiesChanged:(id)changed;
-(BOOL)titleChanged:(id)changed;
-(BOOL)requestRedirectedToRequest:(id)request;
-(void)closeTheWindow;
-(void)windowWasClosed;
-(BOOL)startWebRequest;
-(id)parametersForWebRequest;
-(BOOL)startSigningIn;
-(void)cancelSigningIn;
-(void)dealloc;
-(id)initWithAuthentication:(id)authentication authorizationURL:(id)url delegate:(id)delegate webRequestSelector:(SEL)selector finishedSelector:(SEL)selector5;
-(void)addScopeForGoogleUserInfo;
@end

@interface GTMHTTPFetcher : NSObject {
	NSMutableURLRequest* request_;
	NSURLConnection* connection_;
	NSMutableData* downloadedData_;
	NSString* downloadPath_;
	NSString* temporaryDownloadPath_;
	NSFileHandle* downloadFileHandle_;
	unsigned long long downloadedLength_;
	NSURLCredential* credential_;
	NSURLCredential* proxyCredential_;
	NSData* postData_;
	NSInputStream* postStream_;
	NSMutableData* loggedStreamData_;
	NSURLResponse* response_;
	id delegate_;
	SEL finishedSel_;
	SEL sentDataSel_;
	SEL receivedDataSel_;
	id completionBlock_;
	id receivedDataBlock_;
	id sentDataBlock_;
	id retryBlock_;
	BOOL hasConnectionEnded_;
	BOOL isCancellingChallenge_;
	BOOL isStopNotificationNeeded_;
	BOOL shouldFetchInBackground_;
	unsigned backgroundTaskIdentifer_;
	id userData_;
	NSMutableDictionary* properties_;
	NSArray* runLoopModes_;
	NSOperationQueue* delegateQueue_;
	id<GTMHTTPFetchHistoryProtocol> fetchHistory_;
	int cookieStorageMethod_;
	id<GTMCookieStorageProtocol> cookieStorage_;
	id<GTMFetcherAuthorizationProtocol> authorizer_;
	id<GTMHTTPFetcherServiceProtocol> service_;
	NSString* serviceHost_;
	int servicePriority_;
	NSThread* thread_;
	BOOL isRetryEnabled_;
	SEL retrySel_;
	NSTimer* retryTimer_;
	unsigned retryCount_;
	double maxRetryInterval_;
	double minRetryInterval_;
	double retryFactor_;
	double lastRetryInterval_;
	BOOL hasAttemptedAuthRefresh_;
	NSString* comment_;
	NSString* log_;
	NSURL* redirectedFromURL_;
	NSString* logRequestBody_;
	NSString* logResponseBody_;
	BOOL shouldDeferResponseBodyLogging_;
}
@property(copy) id completionBlock;
@property(retain) id<GTMCookieStorageProtocol> cookieStorage;
@property(copy) NSString* temporaryDownloadPath;
@property(retain) NSArray* runLoopModes;
@property(retain) NSOperationQueue* delegateQueue;
@property(copy) NSString* log;
@property(copy) NSString* comment;
@property(copy) NSMutableDictionary* properties;
@property(retain) id userData;
@property(retain) id<GTMHTTPFetchHistoryProtocol> fetchHistory;
@property(retain) NSFileHandle* downloadFileHandle;
@property(copy) NSString* downloadPath;
@property(retain) NSData* downloadedData;
@property(readonly, assign) unsigned long long downloadedLength;
@property(retain) NSURLResponse* response;
@property(readonly, assign) NSDictionary* responseHeaders;
@property(readonly, assign) int statusCode;
@property(readonly, assign) double nextRetryInterval;
@property(readonly, assign) unsigned retryCount;
@property(assign) double retryFactor;
@property(assign) double minRetryInterval;
@property(assign) double maxRetryInterval;
@property(copy) id retryBlock;
@property(assign) SEL retrySelector;
@property(assign, getter=isRetryEnabled) BOOL retryEnabled;
@property(copy) id receivedDataBlock;
@property(copy) id sentDataBlock;
@property(assign) SEL receivedDataSelector;
@property(assign) SEL sentDataSelector;
@property(assign) BOOL shouldFetchInBackground;
@property(retain) id delegate;
@property(retain) NSThread* thread;
@property(assign) int servicePriority;
@property(copy) NSString* serviceHost;
@property(retain) id<GTMHTTPFetcherServiceProtocol> service;
@property(retain) id<GTMFetcherAuthorizationProtocol> authorizer;
@property(assign) int cookieStorageMethod;
@property(retain) NSInputStream* postStream;
@property(retain) NSData* postData;
@property(retain) NSURLCredential* proxyCredential;
@property(retain) NSURLCredential* credential;
@property(retain) NSMutableURLRequest* mutableRequest;
+(void)setConnectionClass:(Class)aClass;
+(Class)connectionClass;
+(BOOL)doesSupportSentDataCallback;
+(id)staticCookieStorage;
+(void)initialize;
+(id)fetcherWithURLString:(id)urlstring;
+(id)fetcherWithURL:(id)url;
+(id)fetcherWithRequest:(id)request;
-(void)setCommentWithFormat:(id)format;
-(void)addPropertiesFromDictionary:(id)dictionary;
-(id)propertyForKey:(id)key;
-(void)setProperty:(id)property forKey:(id)key;
-(void)destroyRetryTimer;
-(void)retryTimerFired:(id)fired;
-(void)primeRetryTimerWithNewTimeInterval:(double)newTimeInterval;
-(void)beginRetryTimer;
-(BOOL)shouldRetryNowForStatus:(int)status error:(id)error;
-(BOOL)isRetryError:(id)error;
-(void)logNowWithError:(id)error;
-(void)connection:(id)connection didFailWithError:(id)error;
-(BOOL)shouldReleaseCallbacksUponCompletion;
-(void)connectionDidFinishLoading:(id)connection;
-(int)statusAfterHandlingNotModifiedError;
-(id)cachedDataForStatus;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(BOOL)invokeRetryCallback:(SEL)callback target:(id)target willRetry:(BOOL)retry error:(id)error;
-(void)invokeSentDataCallback:(SEL)callback target:(id)target didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)invokeOnQueueWithDictionary:(id)dictionary;
-(void)invokeFetchCallbacksOnDelegateQueueWithData:(id)data error:(id)error;
-(void)invokeFetchCallback:(SEL)callback target:(id)target data:(id)data error:(id)error;
-(void)invokeFetchCallbacksWithData:(id)data error:(id)error;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)handleCookiesForResponse:(id)response;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)waitForCompletionWithTimeout:(double)timeout;
-(void)retryFetch;
-(void)sendStopNotificationIfNeeded;
-(void)stopFetching;
-(void)stopFetchReleasingCallbacks:(BOOL)callbacks;
-(void)releaseCallbacks;
-(BOOL)isFetching;
-(void)addCookiesToRequest:(id)request;
-(id)createTempDownloadFilePathForPath:(id)path;
-(BOOL)beginFetchWithCompletionHandler:(id)completionHandler;
-(void)authorizer:(id)authorizer request:(id)request finishedWithError:(id)error;
-(BOOL)authorizeRequest;
-(void)endBackgroundTask;
-(void)backgroundFetchExpired;
-(void)failToBeginFetchWithError:(id)error;
-(void)failToBeginFetchDeferWithError:(id)error;
-(BOOL)beginFetchMayDelay:(BOOL)delay mayAuthorize:(BOOL)authorize;
-(BOOL)beginFetchWithDelegate:(id)delegate didFinishSelector:(SEL)selector;
-(void)dealloc;
-(id)description;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithRequest:(id)request;
-(id)init;
@end

@interface GTMOAuth2ViewControllerTouch : MMUIViewController <UINavigationControllerDelegate, UIWebViewDelegate> {
	UIWebView* webView_;
	GTMOAuth2SignIn* signIn_;
	NSURLRequest* request_;
	id delegate_;
	SEL finishedSelector_;
	id completionBlock_;
	id popViewBlock_;
	NSString* keychainItemName_;
	void* keychainItemAccessibility_;
	NSString* initialHTMLString_;
	int mustShowActivityIndicator_;
	NSURL* browserCookiesURL_;
	id userData_;
	NSMutableDictionary* properties_;
	BOOL isViewShown_;
	BOOL didViewAppear_;
	BOOL hasNotifiedWebViewStartedLoading_;
	BOOL hasCalledFinished_;
	BOOL hasDoneFinalRedirect_;
	BOOL didDismissSelf_;
	NSString* m_autoCompleteEmail;
	GTMOAuth2Authentication* authentication;
	NSURLRequest* _request;
	double networkLossTimeoutInterval;
}
@property(copy, nonatomic) NSURLRequest* request;
@property(retain, nonatomic) NSDictionary* properties;
@property(retain, nonatomic) id userData;
@property(retain, nonatomic) NSURL* browserCookiesURL;
@property(assign, nonatomic) double networkLossTimeoutInterval;
@property(copy, nonatomic) id popViewBlock;
@property(retain, nonatomic) UIWebView* webView;
@property(readonly, assign, nonatomic) GTMOAuth2SignIn* signIn;
@property(readonly, assign, nonatomic) GTMOAuth2Authentication* authentication;
@property(assign, nonatomic) BOOL showsInitialActivityIndicator;
@property(copy, nonatomic) NSString* initialHTMLString;
@property(assign, nonatomic) void* keychainItemAccessibility;
@property(copy, nonatomic) NSString* keychainItemName;
@property(retain, nonatomic) NSString* m_autoCompleteEmail;
+(void)revokeTokenForGoogleAuthentication:(id)googleAuthentication;
+(void)setSignInClass:(Class)aClass;
+(Class)signInClass;
+(id)controllerWithAuthentication:(id)authentication authorizationURL:(id)url keychainItemName:(id)name completionHandler:(id)handler;
+(id)controllerWithAuthentication:(id)authentication authorizationURL:(id)url keychainItemName:(id)name delegate:(id)delegate finishedSelector:(SEL)selector;
+(id)controllerWithScope:(id)scope clientID:(id)anId clientSecret:(id)secret keychainItemName:(id)name completionHandler:(id)handler;
+(id)controllerWithScope:(id)scope clientID:(id)anId clientSecret:(id)secret keychainItemName:(id)name delegate:(id)delegate finishedSelector:(SEL)selector;
-(void)setSignAdditionalAuthorizationParameters:(id)parameters;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(void)updateUI;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)isNavigationBarTranslucent;
-(void)moveWebViewFromUnderNavigationBar;
-(void)signIn:(id)anIn finishedWithAuth:(id)auth error:(id)error;
-(void)signIn:(id)anIn displayRequest:(id)request;
-(id)propertyForKey:(id)key;
-(void)setProperty:(id)property forKey:(id)key;
-(BOOL)shouldUseKeychain;
-(void)clearBrowserCookies;
-(void)cancelSigningIn;
-(void)notifyWithName:(id)name webView:(id)view kind:(id)kind;
-(void)popView;
-(void)onBackButtonClick;
-(void)setUpNavigation;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithAuthentication:(id)authentication authorizationURL:(id)url keychainItemName:(id)name completionHandler:(id)handler;
-(void)signInNetworkLostOrFound:(id)networkLostOrFound;
-(void)stopLoadingAndShowTip:(id)tip;
-(void)showLoading:(id)loading;
-(void)stopIndicator:(id)indicator;
-(void)showIndicator:(id)indicator;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(id)initWithAuthentication:(id)authentication authorizationURL:(id)url keychainItemName:(id)name delegate:(id)delegate finishedSelector:(SEL)selector;
-(id)initWithScope:(id)scope clientID:(id)anId clientSecret:(id)secret keychainItemName:(id)name completionHandler:(id)handler;
-(id)initWithScope:(id)scope clientID:(id)anId clientSecret:(id)secret keychainItemName:(id)name delegate:(id)delegate finishedSelector:(SEL)selector;
@end

@interface GoogleContactAPIFetchImpl : MMObject <NSURLConnectionDataDelegate, NSURLConnectionDelegate> {
	MMDelegateProxy<GoogleContactAPIFetchImplDelegate>* m_delegate;
	GTMOAuth2Authentication* m_auth;
	NSMutableData* m_dataBuf;
	NSURLConnection* m_connection;
	NSMutableURLRequest* m_request;
	int m_state;
}
@property(assign, nonatomic) int m_state;
@property(retain, nonatomic) NSMutableURLRequest* m_request;
@property(retain, nonatomic) NSURLConnection* m_connection;
@property(retain, nonatomic) NSMutableData* m_dataBuf;
@property(assign, nonatomic) MMDelegateProxy<GoogleContactAPIFetchImplDelegate>* m_delegate;
@property(retain, nonatomic) GTMOAuth2Authentication* m_auth;
-(void)onFetcherRetryDelayStop:(id)stop;
-(void)onFetcherRetryDelayStart:(id)start;
-(void)onFetcherStop:(id)stop;
-(void)onFetcherStart:(id)start;
-(void)onOAuthRefreshTokenChange:(id)change;
-(void)onOAuthAccessTokenFailed:(id)failed;
-(void)onOAuthAccessTokenOK:(id)ok;
-(void)startConnection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)stopFetch;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(id)separateGoogleContactAddress:(id)address;
-(void)formatGoogleNickName:(id)name andNickName:(id)name2;
-(id)decodeJsonStringToGoogleContact:(id)googleContact;
-(void)doAnAuthenticatedAPIFetch;
-(void)dealloc;
-(id)init;
@end

@interface WCAccountBindPhoneViewOKViewController : WCAccountBaseViewController {
	BOOL m_bAgreementMobileCanBeFound;
	BOOL m_recommendPhoneOpen;
	MMDelegateProxy<WCAccountBindPhoneViewOKViewControllerDelegate>* m_delegate;
}
@property(assign, nonatomic) BOOL m_bAgreementMobileCanBeFound;
-(void)setDelegate:(id)delegate;
-(void)dealloc;
-(void)checkSwitch;
-(void)allowFindMeByPhoneSwitchChanged:(id)changed;
-(void)doSetPrivateConfig:(unsigned long)config on:(BOOL)on bitset:(unsigned long)bitset;
-(void)recommendPhoneChanged:(id)changed;
-(void)reloadTableData;
-(void)onDone;
-(void)onSyncAddressBook;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface WebviewJSEventHandler_shareWeibo : WebviewJSEventHandlerBase <WeiboShareViewControllerDelegate> {
}
-(void)dealloc;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onWeiboShareFail:(id)fail withRet:(int)ret;
-(void)onWeiboShareOK:(id)ok;
-(void)onWeiboShareCanceled:(id)canceled;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_profile : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_shareFB : WebviewJSEventHandlerBase <JSShareFBLogicHelperDelegate, UIAlertViewDelegate, IMMFacebookMgrExt> {
	JSShareFBLogicHelper* m_jsShareFBHelper;
}
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)onJSShareFBFailedWithError:(int)error msg:(id)msg;
-(void)onJSShareFBFinished;
-(void)onJSShareFBSharing;
-(void)onExtendTokenFinish:(BOOL)finish;
-(void)OnWillAnimateRotationToInterfaceOrientation:(int)on duration:(double)duration;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandlerBase : MMObject <WebviewJSEventHandler> {
	id<WebviewJSEventHandlerBaseDelegate> m_delegate;
	JSEvent* _currentEvent;
}
@property(retain, nonatomic) JSEvent* currentEvent;
@property(assign, nonatomic) id<WebviewJSEventHandlerBaseDelegate> m_delegate;
-(void)dealloc;
-(id)webviewController;
-(void)OnWillAnimateRotationToInterfaceOrientation:(int)on duration:(double)duration;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_addContact : WebviewJSEventHandlerBase <WebAddContactDelegate> {
	MMWebAddContactView* m_jsAddContactView;
}
-(void)dealloc;
-(void)OnWebAddContactReturn;
-(void)OnWebAddContact:(int)contact Msg:(id)msg CallBack:(id)back;
-(void)OnWillAnimateRotationToInterfaceOrientation:(int)on duration:(double)duration;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface MailContentNode : MMObject {
	unsigned long m_uiMsgId;
	int m_uiType;
	NSString* m_nsNickName;
	NSString* m_nsSrcTime;
	NSString* m_nsTitle;
	NSString* m_nsDescription;
	NSString* m_nsThumbPath;
	unsigned long m_dataSize;
}
@property(assign, nonatomic) unsigned long m_dataSize;
@property(retain, nonatomic) NSString* m_nsThumbPath;
@property(retain, nonatomic) NSString* m_nsDescription;
@property(retain, nonatomic) NSString* m_nsTitle;
@property(retain, nonatomic) NSString* m_nsSrcTime;
@property(retain, nonatomic) NSString* m_nsNickName;
@property(assign, nonatomic) int m_uiType;
@property(assign, nonatomic) unsigned long m_uiMsgId;
@end

@interface WebMailUtil : MMObject {
}
+(id)getWebMailTitle:(id)title MaxWidth:(float)width withAddress:(id)address;
+(id)getWebMailTitle:(id)title LandscapeMode:(BOOL)mode MaxWidth:(float)width withAddress:(id)address;
+(id)SystemConvertMailNode2HTMLContent:(id)content withImgIndex:(int)imgIndex;
+(id)MailcompressImage:(id)image;
+(id)SystemConvertMailNodeList2HTMLContent:(id)content;
+(id)ConvertMailNode2HTMLContent:(id)content;
+(id)GetHtmlImageMessage:(id)message;
+(id)ConvertMailNodeList2HTMLContent:(id)content;
@end

@interface WebMailViewController : MMUIViewController <UIActionSheetDelegate, UITableViewDelegate, UITableViewDataSource, UINavigationControllerDelegate, UIAlertViewDelegate, UIScrollViewDelegate, UIWebViewDelegate, MMMailContactSelectViewDelegate, MailAttachmentControlViewDelegate, MailReceiverEditViewDelegate, MailContactFilterViewDelegate, IQQMailExt, INewQQMailExt, VerifyQQPwdMgrExt> {
	MMTableView* m_tableView;
	MailContactFilterView* m_filterView;
	UIWebView* m_webView;
	MailReceiverEditView* m_receiverView;
	MailReceiverEditView* m_ccView;
	MailReceiverEditView* m_bccView;
	MailSubjectEditView* m_topicView;
	UIView* m_ccBccView;
	NSMutableArray* m_arrShowViews;
	MailAttachmentControlView* m_attachmentControlView;
	CMail* m_mail;
	NSMutableArray* m_arrReceiver;
	NSMutableArray* m_arrCc;
	NSMutableArray* m_arrBcc;
	NSMutableArray* m_arrAttachment;
	unsigned long m_uiMailType;
	NSString* m_nsSubject;
	NSString* m_nsMailHeader;
	int m_firstResponderStatus;
	int m_ccBccFlodStatus;
	NSTimer* m_autoSaveTimer;
	unsigned long m_firstResponderTag;
	float m_fKeyboardHeight;
	float m_defaultvisibleheight;
	NSMutableArray* m_arrAttachmentView;
	NSMutableArray* m_arrAllMailContacts;
	NSString* m_nsMailID;
	BOOL m_bFromReadMail;
	BOOL m_bFirstFixContectHeight;
	BOOL m_bPresentModal;
	NSMutableArray* m_nsChats;
	BOOL m_bIsSending;
	MMDelegateProxy<WebMailViewDelegate>* m_delegate;
	UIResponder* keyboardActiveInput;
}
@property(retain, nonatomic) NSString* m_nsMailHeader;
@property(assign, nonatomic) float m_defaultvisibleheight;
@property(retain, nonatomic) UIResponder* keyboardActiveInput;
@property(assign, nonatomic) BOOL m_bPresentModal;
@property(assign, nonatomic) BOOL m_bFromReadMail;
@property(retain, nonatomic) NSMutableArray* m_arrAllMailContacts;
@property(assign, nonatomic) MMDelegateProxy<WebMailViewDelegate>* m_delegate;
-(void)dealloc;
-(void)didReceiveMemoryWarning;
-(void)viewDidBeDismissed:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)uploadAttachment:(id)attachment name:(id)name;
-(id)initWithMail:(id)mail withContent:(id)content mailType:(unsigned long)type;
-(id)initWithMail:(id)mail withContent:(id)content withSubject:(id)subject;
-(id)init;
-(id)getViewController;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)handleGetOffsetFromJS:(id)js;
-(void)updateCurrentOffset;
-(void)handleSetOffsetFromJS:(id)js;
-(id)decodeFromPercentEscapeString:(id)percentEscapeString;
-(id)getContent;
-(void)setContent:(id)content;
-(void)onMailContactSelectDone:(id)done userInfo:(id)info;
-(void)onMailContactChanged:(id)changed;
-(void)onTextFieldNextItem:(id)item;
-(void)onTextFieldFinishEdit:(id)edit;
-(void)onTextFieldChanged:(id)changed;
-(void)onFirstResponderResigned;
-(void)onMailReceiverEditViewHeightChanged:(id)changed;
-(void)onMailContactDoubleClicked:(id)clicked;
-(void)onAddMailContact:(id)contact;
-(int)indexForView:(id)view;
-(id)getFilterName:(id)name;
-(void)contactReturn:(id)aReturn;
-(void)OnGetAllMailContact:(id)contact ErrNo:(int)no;
-(void)onCancelButton;
-(void)staticReloadTableView;
-(void)reloadTableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)releaseAutoSaveTimer;
-(void)initAutoSaveTimer;
-(void)removeNotificationObservers;
-(void)initNotificationObservers;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)responderDidBecomeActive:(id)responder;
-(void)initView;
-(void)setMailTitle:(id)title;
-(void)SetWebViewMargin:(unsigned long)margin;
-(void)rebuildTableView;
-(float)calculateTableViewHeight;
-(void)initTableItemViews;
-(void)updateRightBarButton;
-(void)OnReturn;
-(void)ReleaseTextField;
-(void)CheckCancel;
-(void)initData;
-(BOOL)SendBtnEnable;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)composeSend;
-(void)onSend;
-(void)doSearch:(id)search;
-(void)fixFilterView;
-(void)onAutoSaveTimer;
-(void)deleteDraft;
-(void)loadDraft;
-(void)saveDraft;
-(void)setccBccFlodStatus:(int)status;
-(void)rewriteDataSource:(int)source;
-(void)setNextFirstRespondStatus:(int)status;
-(void)setFirstRespondStatus:(int)status;
-(int)getFirstResponderStatusForRow:(int)row;
-(int)getNextResponderStautsForFirstResponderStatus:(int)firstResponderStatus;
-(id)getViewForFirstResponderStatus:(int)firstResponderStatus;
-(id)getSelfWebMailContact;
@end

@interface WebviewJSEventHandler_imagePreview : WebviewJSEventHandlerBase {
	PhotoViewController* m_photoViewController;
}
-(void)dealloc;
-(void)showImageWithUrls:(id)urls current:(id)current;
-(void)uninitImageViewer;
-(void)OnWillAnimateRotationToInterfaceOrientation:(int)on duration:(double)duration;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface MemberListViewController : MMUIViewController <UITableViewDataSource, UITableViewDelegate, MMSearchBarDelegate, MMVoiceSearchDelegate, UIAlertViewDelegate> {
	MMLoadingView* m_loadingView;
	MMTableView* m_tableView;
	UILabel* m_countLabel;
	NSObject<MemberDataLogicProtocol>* m_memberData;
	MMDelegateProxy<MemberDataDelegate>* m_delegate;
	MMVoiceSearchBar* m_mmSearchBar;
	BOOL m_needIndexBar;
}
@property(assign, nonatomic) BOOL needIndexBar;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)usrNameConvertToOContacts:(id)ocontacts;
-(void)pushVoiceSearchResultsViewController:(id)controller Animation:(BOOL)animation;
-(BOOL)handleVoiceSearchResults:(id)results;
-(void)resetTableViewOffset:(id)offset;
-(void)cancelSearch;
-(void)doSearch:(id)search Pre:(BOOL)pre;
-(void)didSearchViewTableSelect:(id)select;
-(float)heightForSearchViewTable:(id)searchViewTable;
-(id)cellForSearchViewTable:(id)searchViewTable index:(id)index;
-(id)cellForHandleVoiceSearchViewTable:(id)handleVoiceSearchViewTable index:(id)index;
-(void)makeCell:(id)cell contact:(id)contact;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)showContactInfoView:(id)view;
-(void)openContactInfoView:(int)view;
-(void)setDelegate:(id)delegate;
-(void)setMemberLogic:(id)logic;
-(void)reloadTable;
-(void)initSearchBar;
-(BOOL)hasIndexBar;
-(void)initTableView;
-(void)initCountLabel:(id)label;
-(void)updateCount;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandler_addEmoticon : WebviewJSEventHandlerBase <EmoticonWebDownloadMgrExt> {
}
-(void)onDownloadFailedWithUrl:(id)url userData:(id)data errType:(int)type;
-(void)onDownloadFinishedWithUrl:(id)url userData:(id)data;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandler_cancelAddEmoticon : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_hasEmoticon : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_getInstallState : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_closeWindow : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_getNetworkType : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_sendEmail : WebviewJSEventHandlerBase <MFMailComposeViewControllerDelegate> {
}
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_hideToolbar : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_showToolbar : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_scanQRCode : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_hideOptionMenu : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface WebviewJSEventHandler_showOptionMenu : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface MMOperation : NSOperation {
	BOOL _bExecuting;
	BOOL _bFinished;
	BOOL _bCancelled;
	BOOL _bIsAsyncRun;
	id<IAsyncTask> _delegate;
	id<IOperationMgrDelegate> _mgrDelegate;
	BOOL _bIsStoped;
}
@property(assign, nonatomic) id<IOperationMgrDelegate> mgrDelegate;
@property(readonly, assign, nonatomic) BOOL bIsStoped;
@property(assign, nonatomic) BOOL bFinished;
@property(assign, nonatomic) BOOL bIsAsyncRun;
-(void)asyncOperationStart;
-(void)syncOperationStart;
-(void)cancel;
-(void)start;
-(void)emptyThreadTimer:(id)timer;
-(void)startRunloop:(double)runloop;
-(void)didOperationStoped;
-(void)main;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isConcurrent;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(id)init;
@end

@interface MMOperationMgr : NSOperationQueue <IOperationMgrDelegate> {
	NSMutableDictionary* _dictOperation;
}
+(id)shareInstance;
-(void)onOperationDidStoped:(id)onOperation;
-(id)getOperation:(id)operation;
-(void)startOperation:(id)operation;
-(void)stopAllOperation;
-(void)forceStopOperation:(id)operation;
-(void)cancelOperation:(id)operation;
-(void)addAsyncOperation:(id)operation;
-(void)dealloc;
-(id)init;
@end

@interface ProtobufEventHandler : NSObject {
}
-(void)OnProtocolReturn:(id)aReturn shouldContinue:(bool*)aContinue;
-(void)OnProtocolStart:(id)start shouldContinue:(bool*)aContinue;
@end

@interface CgiEvent : NSObject <IAsyncTask, NotifyFromPrtlDelegate> {
	BOOL m_bStart;
	unsigned long m_uiUin;
	unsigned long m_uiEventID;
	id<NotifyFromCgiEventDelegate> m_delNotifyFromEvent;
	NSRecursiveLock* m_oLock;
	BOOL m_bStop;
	BOOL m_bBackGround;
	BOOL m_bNeedNotify;
	BOOL m_bSyncRun;
	BOOL m_bSpeedy;
	BOOL m_hasInvokePreHandler;
	NSThread* m_oCurThread;
	ProtobufPrtlChannel* m_ptrl;
	ProtobufCGIWrap* m_pbCGIWrap;
	ProtobufEventHandler* m_pbEventHandler;
	id<CgiEventDelegate> m_delegate;
	unsigned long m_uiEventType;
}
@property(assign, nonatomic) id<CgiEventDelegate> m_delegate;
@property(readonly, assign) ProtobufCGIWrap* m_pbCGIWrap;
@property(assign, nonatomic) BOOL m_bSpeedy;
@property(assign, nonatomic) BOOL m_bStop;
@property(assign) NSThread* m_oCurThread;
@property(assign, nonatomic) BOOL m_bSyncRun;
@property(assign, nonatomic) BOOL m_bNeedNotify;
@property(assign, nonatomic) BOOL m_bBackGround;
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(assign, nonatomic) unsigned long m_uiEventID;
@property(assign, nonatomic) unsigned long m_uiUin;
@property(assign, nonatomic) id<NotifyFromCgiEventDelegate> m_delNotifyFromEvent;
@property(assign, nonatomic, getter=GetEventType) unsigned long m_uiEventType;
-(void)NotifyFromPrtl:(unsigned long)prtl MessageInfo:(id)info;
-(void)taskDidStoped;
-(void)asyncTaskDidStarted;
-(BOOL)doJob;
-(void)didEventStoped;
-(void)forceStop;
-(void)stopEvent;
-(BOOL)isStoped;
-(BOOL)startEvent;
-(void)dealloc;
-(id)initWithCGIWrap:(id)cgiwrap delegate:(id)delegate;
@end

@interface CgiEventMgr : MMService <MMService, CgiEventDelegate> {
	BOOL m_bStoping;
	NSMutableArray* m_arrRunningCgi;
	NSRecursiveLock* m_oLock;
	NSRecursiveLock* m_oEventLock;
	BOOL m_bIsClearing;
}
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
-(void)onDidEventStoped;
-(void)stopEvent:(id)event;
-(unsigned long)IsEventTypeExist:(unsigned long)exist;
-(void)clearStopedEvent;
-(void)stopService;
-(void)stopCgiEvent:(unsigned long)event;
-(unsigned long)addCgiEvent:(id)event cgiConfig:(const PBCGIHelperWrap*)config Flag:(unsigned long)flag EventHandler:(id)handler EventType:(unsigned long)type;
-(void)dealloc;
-(id)init;
@end

@interface WebviewJSEventHandler_log : WebviewJSEventHandlerBase {
}
-(int)getLogLevel:(id)level;
-(BOOL)isLevelParamValid:(id)valid;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface FavTextEditViewController : MMUIViewController <IFavoritesExt, UITextViewDelegate, UIAlertViewDelegate, UIScrollViewDelegate> {
	FavoritesItem* m_favItem;
	UIScrollView* m_scrollView;
	UITextView* _textView;
	UIImageView* m_textViewBkg;
	UILabel* m_wordCountLabel;
	BOOL m_isBeEditted;
	float m_fKeyboardHeight;
	MMDelegateProxy<FavTextEditDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<FavTextEditDelegate>* m_delegate;
-(void)onEditDone;
-(void)OnCancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)OnUpdateItemDescription:(id)description ErrCode:(int)code;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)updateWordCount;
-(void)didReceiveMemoryWarning;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)initTextBkg;
-(void)initWordCountLabel;
-(void)initTextView;
-(void)initRightBtn;
-(void)initLeftBtn;
-(id)initWithFavItem:(id)favItem;
-(void)dealloc;
-(void)removeNotificationObservers;
-(void)initNotificationObservers;
@end

@interface ChatRoomListViewController : MemberListViewController <MemberDataDelegate, IContactMgrExt> {
}
-(void)commitEditingStyle:(int)style ForIndexPath:(id)indexPath;
-(void)didSelectRowAtIndexPath:(id)indexPath;
-(int)getEditingStyleForIndexPath:(id)indexPath;
-(void)onContactListUpdate:(unsigned long)update;
-(void)onDeleteContact:(id)contact;
-(void)onModifyContact:(id)contact;
-(void)deleteContact:(id)contact;
-(void)showContactInfoView:(id)view;
-(void)updateCount;
-(BOOL)hasIndexBar;
-(void)dealloc;
-(void)viewDidLoad;
-(id)init;
@end

@interface WebviewJSEventHandler_saveImage : WebviewJSEventHandlerBase <UIActionSheetDelegate> {
	NSString* m_imgUrl;
	NSString* m_base64Data;
}
@property(copy, nonatomic) NSString* m_base64Data;
@property(copy, nonatomic) NSString* m_imgUrl;
-(void)dealloc;
-(id)init;
-(void)saveImageToAlbumWithUrl:(id)url OrBase64Data:(id)data;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

@interface WCGetLatestAddressControlLogic : WCBizControlLogic <WCAddressLogicMgrExt> {
	JSEvent* m_jsEvent;
	WCAddressAuthenticationSturct* m_oWCAddressAuthenticationSturct;
	WCAddressBaseAddress* m_oWCAddressBaseAddress;
	NSString* m_nsAppUserName;
}
-(void)OnNotAcceptGetLatestAddress;
-(void)OnAcceptGetLatestAddress;
-(void)OnGetLatestAddress:(id)address UserName:(id)name NickName:(id)name3 Error:(id)error;
-(void)stopLogic;
-(void)startLogic;
-(void)handleGetLatestAddress;
-(void)dealloc;
-(id)initWithJSEvent:(id)jsevent AuthenticationInfo:(id)info;
@end

@interface WebviewJSEventHandler_openSpecificView : WebviewJSEventHandlerBase <VerifyPhoneDelegate, BrandOpenSpecificViewHandlerDelegate> {
	BrandOpenSpecificViewHandler* _openSpecificViewHandler;
}
-(id)getCurrentController;
-(BOOL)shouldDismissCurrentViewController;
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
-(void)dealloc;
@end

@interface WebviewJSEventHandler_domReady : WebviewJSEventHandlerBase {
}
-(void)handleJSEvent:(id)event HandlerFacade:(id)facade ExtraData:(id)data;
@end

@interface MailAttachmentControlView : MMUIView <UIImagePickerControllerDelegate, UINavigationControllerDelegate, UIActionSheetDelegate, UIAlertViewDelegate, MailAttachmentsViewDelegate> {
	NSMutableArray* m_arrAttachmentViews;
	UILabel* m_labelCol;
	UIImageView* m_imgvAttach;
	UILabel* m_labelSize;
	UILabel* m_labTip;
	UIButton* m_blueButton;
	UIView* m_grayLineView;
	id<MailAttachmentControlViewDelegate> m_delegate;
	unsigned long m_uiLastAttachmentSize;
	NSString* m_nsLastAttachmentSuffix;
	MailAttachment* m_lastAttachment;
	unsigned long m_uiImageAttachIndex;
	unsigned long m_uiVideoAttachIndex;
	BOOL m_bIsNewMail;
}
@property(retain, nonatomic) MailAttachment* m_lastAttachment;
@property(assign, nonatomic) id<MailAttachmentControlViewDelegate> m_delegate;
-(void)dealloc;
-(void)OnDeleteAttachment:(id)attachment;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)doDeleteAttachment:(unsigned long)attachment;
-(void)addAttachmentView:(id)view name:(id)name;
-(void)handleUploadData:(id)data name:(id)name;
-(void)handleVideo:(id)video;
-(void)handleImage:(id)image;
-(void)showUploadAttachmentAlert:(BOOL)alert;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)takePhoto;
-(void)selectFromAlbum;
-(void)onButtonClicked:(id)clicked;
-(float)getContentTotalHeight;
-(void)initView;
-(id)initWithFrame:(CGRect)frame;
-(void)properInit;
-(unsigned)count;
-(id)NewDataMessage;
-(id)dataIDs;
-(BOOL)uploadSuccess;
-(void)updateViews;
-(id)getShowSize:(unsigned long)size;
-(void)setIsNewMail:(BOOL)mail;
@end

@interface MailAttachmentsView : MMUIView <IQQMailExt, INewQQMailExt> {
	UIActivityIndicatorView* m_loadingView;
	UILabel* m_labelName;
	UILabel* m_labelPercent;
	UILabel* m_labelUploadFail;
	UIButton* m_btnDelete;
	UIButton* m_btnResend;
	unsigned long m_uiPercent;
	MMDelegateProxy<MailAttachmentsViewDelegate>* m_delegate;
	MailAttachment* m_mailAttachment;
	BOOL m_bIsNewMail;
}
@property(assign, nonatomic) MMDelegateProxy<MailAttachmentsViewDelegate>* m_delegate;
-(void)dealloc;
-(void)OnNewUploadAttachmentData:(id)data fileName:(id)name uploadedDataSize:(unsigned long)size err:(int)err;
-(void)OnUploadData:(id)data filename:(id)filename ErrNo:(int)no;
-(void)startUploadData;
-(id)initWithMailAttachment:(id)mailAttachment frame:(CGRect)frame isNewMail:(BOOL)mail;
-(id)getDataName;
-(id)getDataID;
-(void)setData:(id)data;
-(void)setDataID:(id)anId;
-(BOOL)isFilenameEqualToString:(id)string;
-(unsigned)attachmentSize;
-(void)initView;
-(void)OnResend:(id)resend;
-(void)OnDelete:(id)aDelete;
-(void)setUploadSuccessStatusForNewQQMail:(unsigned long)newQQMail;
-(void)updateUploadPercentForNewQQMail:(unsigned long)newQQMail;
-(void)setUploadingStatus;
-(void)updateUploadPercent:(unsigned long)percent;
-(void)setUploadSuccessStatus;
-(void)setUploadFailStatus;
-(BOOL)isUploadSuccess;
-(void)initData;
@end

@interface MailContactButton : UIView {
	CMailContact* m_oMailContact;
	id<MailContactButtonDelegate> m_delegate;
	UIButton* m_btnMailContactButton;
}
@property(retain, nonatomic) CMailContact* m_oMailContact;
@property(assign, nonatomic) id<MailContactButtonDelegate> m_delegate;
-(void)dealloc;
-(BOOL)isHighlighted;
-(void)setHighlighted:(BOOL)highlighted;
-(void)onReceiverBtnRepeatClick:(id)click;
-(void)onReceiverBtnClick:(id)click;
-(void)createButton;
-(id)initWithMailContact:(id)mailContact;
@end

@interface MailContactFilterView : MMUIView <UITableViewDelegate, UITableViewDataSource> {
	MMTableView* m_tableView;
	NSMutableArray* m_filterArray;
	MMDelegateProxy<MailContactFilterViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MailContactFilterViewDelegate>* m_delegate;
@property(retain, nonatomic) NSMutableArray* m_filterArray;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)dealloc;
-(void)setFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(void)initView;
-(void)initData;
-(void)resetOffset;
-(void)reloadTableView;
@end

@interface HackUITextField : UITextField {
}
-(BOOL)becomeFirstResponder;
-(BOOL)resignFirstResponder;
@end

@interface MailReceiverEditView : MMUIView <MailContactButtonDelegate, UITextFieldDelegate, UIAlertViewDelegate> {
	NSMutableArray* m_arrReceiverButtons;
	int m_uiReceiverEditViewTag;
	MMDelegateProxy<MailReceiverEditViewDelegate>* m_delegate;
	HackUITextField* m_textField;
	UIButton* m_addContactButton;
	UILabel* m_textLabel;
}
@property(assign, nonatomic) MMDelegateProxy<MailReceiverEditViewDelegate>* m_delegate;
@property(assign, nonatomic) int m_uiReceiverEditViewTag;
-(int)count;
-(void)onMailContactClicked:(id)clicked sender:(id)sender;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)finishEditing;
-(BOOL)finishEditing:(id)editing;
-(void)ShowAlertForInvalidContact;
-(void)onTextFieldChanged:(id)changed;
-(void)deleteMailContactButton;
-(void)finishEdit:(id)edit;
-(void)beginEdit:(id)edit;
-(void)onMailContactDoubleClicked:(id)clicked;
-(void)onAddReceiver:(id)receiver;
-(id)text;
-(void)setText:(id)text;
-(void)removeAllContacts;
-(id)getMailContacts;
-(BOOL)isFirstResponder;
-(void)setAddButtonHide:(BOOL)hide;
-(void)resizeButtons;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)addMailContact:(id)contact;
-(void)updateBtnArray;
-(void)updateTextFieldPosition;
-(CGPoint)getNewBtnPointForNewBtn:(id)newBtn;
-(void)initView:(float)view;
-(void)initAddContactButton;
-(void)initTextField;
-(id)getDisplayName;
-(void)fixSize;
-(void)dealloc;
-(id)initWithReceiverTag:(int)receiverTag MaxWidth:(float)width;
-(id)initWithReceiverTag:(int)receiverTag;
-(void)properInit;
-(BOOL)isMailAddrFormatOK:(id)ok;
@end

@interface MailSubjectEditView : MMUIView <UITextFieldDelegate> {
	MMDelegateProxy<MailReceiverEditViewDelegate>* m_delegate;
	UITextField* m_textField;
	UILabel* m_textLabel;
}
@property(assign, nonatomic) MMDelegateProxy<MailReceiverEditViewDelegate>* m_delegate;
-(BOOL)textFieldShouldReturn:(id)textField;
-(id)text;
-(void)setText:(id)text;
-(BOOL)isFirstResponder;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)dealloc;
-(id)init;
-(void)initView;
@end

@interface MailUtil : NSObject {
}
+(BOOL)isMailAddrFormatOK:(id)ok;
+(id)getMailContactName:(id)name;
+(id)getFilterName:(id)name;
@end

@interface MMMailContactSelectViewController : MMSearchBarDisplayController <UITableViewDelegate, UITableViewDataSource> {
	NSMutableArray* arrMailContact;
	NSMutableArray* arrKeys;
	NSMutableDictionary* dicContacts;
	NSMutableArray* arrSelection;
	BOOL m_bSearching;
	MMTableView* m_tableView;
	NSMutableArray* m_arrFilteredContacts;
	NSMutableSet* setSelectedContacts;
	MMDelegateProxy<MMMailContactSelectViewDelegate>* _delegate;
	id _userInfo;
}
@property(retain, nonatomic) id userInfo;
@property(assign, nonatomic) MMDelegateProxy<MMMailContactSelectViewDelegate>* m_delegate;
@property(retain, nonatomic) NSMutableSet* setSelectedContacts;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)doSearch:(id)search;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)makeCell:(id)cell tableCell:(id)cell2 section:(unsigned)section row:(unsigned)row;
-(void)onDone:(id)done;
-(void)onCancel:(id)cancel;
-(void)initSearchBar;
-(void)initTableView;
-(void)initView;
-(void)initData;
-(void)viewDidLoad;
-(id)initWithMailContacts:(id)mailContacts;
-(void)dealloc;
-(id)init;
@end

@interface MMMailContactViewController : MMUIViewController <UITableViewDelegate, UITableViewDataSource, LongPressMenuViewDelegate> {
	NSString* _nsMailContactName;
	NSString* _nsMailContactAddress;
	BOOL _bShowSendBtn;
	MMTableView* _tableView;
	UIButton* _sendMailBtn;
	MMUILongPressMenuView* _nameView;
	MMUILongPressMenuView* _addressView;
}
@property(assign, nonatomic) BOOL bShowSendBtn;
@property(retain, nonatomic) NSString* nsMailContactAddress;
@property(retain, nonatomic) NSString* nsMailContactName;
-(void)MenuControllerWillHide:(id)menuController;
-(void)MenuControllerWillShow:(id)menuController;
-(void)onSendMail:(id)mail;
-(void)onLongPressMenuViewCopy:(id)copy;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface WeiboShareViewController : MMUIViewController <UITextViewDelegate, PBMessageObserverDelegate> {
	UITextView* m_textView;
	UILabel* m_wordCountLabel;
	id<WeiboShareViewControllerDelegate> m_delegate;
	NSDictionary* userData;
	WeiboShareData* shareData;
}
@property(retain, nonatomic) NSDictionary* userData;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidChange:(id)textView;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)updateWordCount:(int)count;
-(float)getWordCountLeft:(id)left;
-(float)getMaxWordCount;
-(void)onSend;
-(void)StopLoad:(BOOL)load;
-(void)StartLoad;
-(void)onCancel;
-(void)onBack;
-(void)dealloc;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithDelegate:(id)delegate ShareData:(id)data;
-(void)initView;
-(void)initData;
@end

@interface WeiboShareData : NSObject {
	int type;
	NSString* content;
	NSString* title;
	NSString* desc;
	NSString* imageUrl;
	NSString* linkUrl;
	NSString* dataUrl;
	NSString* extInfo;
}
@property(copy, nonatomic) NSString* extInfo;
@property(copy, nonatomic) NSString* dataUrl;
@property(copy, nonatomic) NSString* linkUrl;
@property(copy, nonatomic) NSString* imageUrl;
@property(copy, nonatomic) NSString* desc;
@property(copy, nonatomic) NSString* title;
@property(copy, nonatomic) NSString* content;
@property(assign, nonatomic) int type;
+(id)dataWithJsonDictionary:(id)jsonDictionary;
-(void)dealloc;
@end

@interface UploadPhoneWithoutBindViewController : MMUIViewController {
}
-(void)startUploadPhone;
-(void)viewDidLoad;
@end

@interface List3rdAppListViewController : MMUIViewController <IAppDataExt, scrollViewDelegate> {
	NSMutableArray* _appsArray;
	MMScrollView* _scrollView;
	UIView* _appsListView;
	UIButton* _viewMoreBtn;
	NSString* _username;
}
@property(retain, nonatomic) NSString* username;
-(void)handleLongPressEx:(id)ex;
-(void)OnCancelModalView:(id)view;
-(void)OnAppIconChanged:(id)changed;
-(void)OnAppSettingChanged;
-(void)OnAppRegisterInfoChanged;
-(void)updateView;
-(void)lauchApp:(id)app;
-(id)getButtonByInfo:(id)info tag:(int)tag;
-(void)initSubView;
-(void)initData;
-(void)onGetMoreApp:(id)app;
-(void)initViewMoreButton;
-(void)setOrigin;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

@interface MMExposeViewController : MMUIViewController <tableViewDelegate, PBMessageObserverDelegate, MMExposeResultViewControllerDelegate, UITableViewDelegate, UITableViewDataSource, UIAlertViewDelegate> {
	NSString* m_userName;
	unsigned long m_exposeScene;
	NSString* m_exposeContent;
	WCDataItem* m_wcDataItem;
	unsigned long m_exposeType;
	int m_uiCurIndex;
	NSMutableArray* m_arrTableData;
	MMTableView* m_tableView;
	BOOL m_bIsExposeWCData;
	MMDelegateProxy<MMExposeViewControllerDelegate>* m_delegate;
}
@property(retain, nonatomic) MMTableView* m_tableView;
@property(retain, nonatomic) NSMutableArray* m_arrTableData;
@property(assign, nonatomic) MMDelegateProxy<MMExposeViewControllerDelegate>* m_delegate;
@property(copy, nonatomic) NSString* m_exposeContent;
@property(assign, nonatomic) unsigned long m_exposeScene;
@property(copy, nonatomic) NSString* m_userName;
-(void)setWCDataItem:(id)item;
-(id)getXmlStrFromBottleID:(id)bottleID;
-(id)getXmlStrFromUrl:(id)url Scene:(unsigned long)scene;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)ExposeWCDataItem;
-(void)ExposeNormal;
-(void)onExpose;
-(void)onExposeResultOK;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)onCancel;
-(void)initView;
-(void)initData;
-(void)viewDidLoad;
-(id)init;
-(void)dealloc;
@end

@interface WCPayPayMoneyFromMallLogic : WCPayControlLogic <WCBaseControlMgrExt, WCPayPayMoneyLogicDelegate, WCPayLogicMgrExt> {
	WCPayMallPayStruct* m_oWCPayMallPayStruct;
	BOOL m_bEndFlag;
	WCPayPayMoneyLogic* m_payLogic;
}
-(void)OnGetMallPrepayRequest:(id)request AppSource:(id)source Error:(id)error;
-(void)OnHandleErrorAlertClickedCancelBtnDown;
-(void)onErrorAlertViewStopLogic:(id)logic;
-(BOOL)gotoViewController:(id)controller;
-(void)onWCBaseLogicDidStop:(unsigned long)onWCBaseLogic;
-(void)stopLogic;
-(void)startLogic;
-(void)dealloc;
-(void)setWCPayMallPayStruct:(id)aStruct;
@end

@interface WCBizMainViewController : WCBizBaseViewController <UIActionSheetDelegate, WCPayLogicMgrExt, WCPayPwdViewControllerDelegate, IWCPayControlLogicExt, IWCMallControlLogicExt, WCMallGlobalActivityViewDelegate> {
	unsigned long m_uiNewOrderCount;
	NSMutableArray* m_arrPayCardDetailView;
	WCMallControlData* m_oMallData;
	WCPayControlData* m_oPayData;
	BOOL m_bGetPayCardList;
}
@property(assign, nonatomic) unsigned long m_uiNewOrderCount;
-(void)OnGetFunctionList:(id)list;
-(void)OnFinishedWCPayLogic:(id)logic CompleteStatus:(int)status;
-(void)OnGetLocalCachePayCardList:(id)list;
-(void)OnPayCardListChanged:(id)changed;
-(void)OnWCPayPwdViewControllerBack;
-(void)OnStatusChangedOrderListCountChanged:(unsigned long)changed;
-(void)didReceiveMemoryWarning;
-(void)OnOrderHistory;
-(void)OnClickedActivitityButton:(unsigned long)button;
-(void)OnClickFunctionActivity:(id)activity;
-(void)onClickCardListButton:(id)button;
-(void)onClickCard:(id)card;
-(id)makeNewOrderRecord:(id)record;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onOperate;
-(void)onAddPayCardInUnregView;
-(void)onAddPayCard;
-(void)refreshViewWithMallControlData:(id)mallControlData;
-(void)refreshViewWithPayControlData:(id)payControlData;
-(void)refreshView;
-(id)getUnregView;
-(id)getMallFunctionActivityListView;
-(id)getCardHeaderView;
-(void)reloadNavigationItem;
-(void)viewDidLoad;
-(void)initView;
-(void)dealloc;
-(id)init;
@end

@interface FavoritesCommonUtil : NSObject {
}
+(id)getCellViewForItem:(id)item;
+(float)getHeightForItem:(id)item;
+(void)sortArrFavData:(id)data;
@end

@interface MyFavoritesListViewController : MMSearchBarDisplayController <UITableViewDataSource, UITableViewDelegate, IFavoritesExt, tableViewDelegate, UIAlertViewDelegate> {
	NSMutableArray* _arrFavData;
	NSMutableArray* _arrFilterItems;
	NSMutableDictionary* _cellViewCache;
	UIView* _emptyView;
	MMTableView* _tableView;
	UIView* _footerView;
	UIActivityIndicatorView* _activityView;
	BOOL _isSearching;
	BOOL _isReadyToLoad;
	unsigned long _curMinItemUpdateTime;
	MMDelegateProxy<MyFavoritesListViewControllerDelegate>* _delegate;
}
@property(assign, nonatomic) MMDelegateProxy<MyFavoritesListViewControllerDelegate>* delegate;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)OnSearch:(id)search;
-(void)OnGetNextPageFavoritesItemList:(id)list ErrCode:(int)code HasMoreItems:(BOOL)items;
-(void)OnGetFirstPageFavoritesItemList:(id)list ErrCode:(int)code HasMoreItems:(BOOL)items;
-(void)stopActivityLoading;
-(void)safeAddItemList:(id)list;
-(BOOL)isFavItemValid:(id)valid;
-(void)onLoadMore;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)genFilterCellView:(id)view indexPath:(id)path;
-(void)genNormalCell:(id)cell indexPath:(id)path;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)resetTableViewOffset:(id)offset;
-(void)cancelSearch;
-(void)viewDidLoad;
-(void)initEmptyView;
-(void)initTableFooterView;
-(void)updateTableFooterHasMore:(BOOL)more;
-(void)initHeaderView;
-(void)initTableView;
-(void)initData;
-(void)OnCancelModalView:(id)view;
-(void)initNavigationBar;
-(void)dealloc;
-(id)init;
-(void)clearFavCache;
@end

@interface TestWCPayCardViewController : WCPayBaseViewController <UIActionSheetDelegate, WCPayLogicMgrExt, WCPayPwdViewControllerDelegate, IWCPayControlLogicExt> {
	unsigned long m_uiNewOrderCount;
	NSMutableArray* m_arrPayCardDetailView;
}
@property(assign, nonatomic) unsigned long m_uiNewOrderCount;
-(void)OnGetBankPackage:(id)package Error:(id)error;
-(void)OnWCPayPwdViewControllerBack;
-(void)OnStatusChangedOrderListCountChanged:(unsigned long)changed;
-(void)OnFinishedWCPayLogic:(id)logic CompleteStatus:(int)status;
-(void)didReceiveMemoryWarning;
-(void)OnOrderHistory;
-(void)onClickCard:(id)card;
-(id)makeNewOrderRecord:(id)record;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onOperate;
-(void)onAddPayCard;
-(void)refreshViewWithData:(id)data;
-(void)reloadNavigationItem;
-(void)viewDidLoad;
-(void)initView;
-(void)dealloc;
-(id)init;
@end

@interface WCMallNetworkHelper : NSObject <PBMessageObserverDelegate> {
	id<WCMallNetworkHelperDelegate> m_oWCMallNetworkHelperDelegate;
}
@property(assign, nonatomic) id<WCMallNetworkHelperDelegate> m_oWCMallNetworkHelperDelegate;
-(void)OnGetWCMallLatestPayProductInfoMessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnGetWCMallFunctionProductListMessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)OnGetWCMallFunctionListMessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)MessageReturn:(id)aReturn Event:(unsigned long)event;
-(void)GetWCMallLatestPayProductInfo:(id)info;
-(void)GetWCMallFunctionProductList:(id)list;
-(void)GetWCMallFunctionList:(id)list;
-(void)dealloc;
-(id)init;
@end

@interface WCMallActivityInfo : NSObject {
	unsigned long m_uiActivityExpiredTime;
	NSString* m_nsActivityIconLink;
	NSString* m_nsActivityId;
	NSString* m_nsActivityLink;
	NSString* m_nsActivityMessageContent;
	unsigned long m_uiActivityJumpFunctionId;
}
@property(assign, nonatomic) unsigned long m_uiActivityJumpFunctionId;
@property(retain, nonatomic) NSString* m_nsActivityMessageContent;
@property(retain, nonatomic) NSString* m_nsActivityLink;
@property(retain, nonatomic) NSString* m_nsActivityId;
@property(retain, nonatomic) NSString* m_nsActivityIconLink;
@property(assign, nonatomic) unsigned long m_uiActivityExpiredTime;
-(void)dealloc;
@end

@interface WCMallGlobalActivity : NSObject {
	WCMallActivityInfo* m_oActivityInfo;
}
@property(retain, nonatomic) WCMallActivityInfo* m_oActivityInfo;
-(void)dealloc;
@end

@interface WCMallFunctionActivityRemarkInfo : NSObject {
	NSString* m_nsName;
	NSString* m_nsValue;
	int m_uiShowType;
}
@property(assign, nonatomic) int m_uiShowType;
@property(retain, nonatomic) NSString* m_nsValue;
@property(retain, nonatomic) NSString* m_nsName;
-(void)dealloc;
@end

@interface WCMallFunctionActivity : NSObject {
	unsigned long m_uiFunctionActivityId;
	NSString* m_nsFunctionActivityName;
	NSString* m_nsFunctionActivityIconLink;
	NSString* m_nsFunctionActivityNativeLink;
	NSString* m_nsFunctionActivityH5Link;
	BOOL m_bNeedGetLatestInfo;
	NSMutableArray* m_arrFunctionActivityInfo;
	NSMutableArray* m_arrFunctionActivityRemarkInfo;
	NSMutableArray* m_arrFunctionActivityAttributeInfo;
	NSMutableArray* m_arrFunctionActivityResponseRemarkInfo;
	NSMutableArray* m_arrFunctionActivityResponseAttributeInfo;
}
@property(retain, nonatomic) NSMutableArray* m_arrFunctionActivityResponseAttributeInfo;
@property(retain, nonatomic) NSMutableArray* m_arrFunctionActivityResponseRemarkInfo;
@property(retain, nonatomic) NSMutableArray* m_arrFunctionActivityAttributeInfo;
@property(retain, nonatomic) NSMutableArray* m_arrFunctionActivityRemarkInfo;
@property(retain, nonatomic) NSMutableArray* m_arrFunctionActivityInfo;
@property(assign, nonatomic) BOOL m_bNeedGetLatestInfo;
@property(retain, nonatomic) NSString* m_nsFunctionActivityH5Link;
@property(retain, nonatomic) NSString* m_nsFunctionActivityNativeLink;
@property(retain, nonatomic) NSString* m_nsFunctionActivityIconLink;
@property(retain, nonatomic) NSString* m_nsFunctionActivityName;
@property(assign, nonatomic) unsigned long m_uiFunctionActivityId;
-(void)dealloc;
@end

@interface WCMallPayProductInfo : NSObject {
	unsigned long m_uiProductId;
	NSString* m_nsAppId;
	NSString* m_nsProductName;
	NSString* m_nsProductDescrible;
	unsigned long m_uiProductMinPrice;
	unsigned long m_uiProductMaxPrice;
	unsigned long m_uiDiscount;
	BOOL m_bIsInfinite;
	unsigned long m_uiLeftCount;
	BOOL m_bIsShelved;
	BOOL m_bIsDefaultChoose;
	BOOL m_bNeedGetLatestInfo;
	BOOL m_bNeedGetAttribute;
	NSMutableArray* m_arrAttributeList;
}
@property(retain, nonatomic) NSMutableArray* m_arrAttributeList;
@property(assign, nonatomic) BOOL m_bNeedGetAttribute;
@property(assign, nonatomic) BOOL m_bNeedGetLatestInfo;
@property(assign, nonatomic) BOOL m_bIsDefaultChoose;
@property(assign, nonatomic) BOOL m_bIsShelved;
@property(assign, nonatomic) unsigned long m_uiLeftCount;
@property(assign, nonatomic) BOOL m_bIsInfinite;
@property(assign, nonatomic) unsigned long m_uiDiscount;
@property(assign, nonatomic) unsigned long m_uiProductMaxPrice;
@property(assign, nonatomic) unsigned long m_uiProductMinPrice;
@property(retain, nonatomic) NSString* m_nsProductDescrible;
@property(retain, nonatomic) NSString* m_nsProductName;
@property(retain, nonatomic) NSString* m_nsAppId;
@property(assign, nonatomic) unsigned long m_uiProductId;
-(void)dealloc;
@end

@interface WCMallPayProductLatestInfo : NSObject {
	unsigned long m_uiFunctionActivityId;
	unsigned long m_uiProductId;
	NSString* m_nsAppId;
	NSString* m_nsTicket;
	NSMutableDictionary* m_dicRemarks;
	NSMutableDictionary* m_dicResponseRemark;
}
@property(retain, nonatomic) NSMutableDictionary* m_dicResponseRemark;
@property(retain, nonatomic) NSMutableDictionary* m_dicRemarks;
@property(retain, nonatomic) NSString* m_nsTicket;
@property(retain, nonatomic) NSString* m_nsAppId;
@property(assign, nonatomic) unsigned long m_uiProductId;
@property(assign, nonatomic) unsigned long m_uiFunctionActivityId;
-(void)dealloc;
@end

@interface WCMallTelUserInfo : NSObject <NSCoding> {
	NSString* m_nsUserName;
	NSString* m_nsTelephoneNumber;
}
@property(retain, nonatomic) NSString* m_nsTelephoneNumber;
@property(retain, nonatomic) NSString* m_nsUserName;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)init;
@end

@interface WCMallLogicMgr : MMService <MMService, WCMallNetworkHelperDelegate, IMsgExt, JSEventExt> {
	WCMallNetworkHelper* m_oWCMallNetworkHelper;
	NSDictionary* m_oBufferFunctionList;
	BOOL m_bGetFunctionList;
}
-(void)jsJumpWCMall:(id)mall;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)HandleWCMallActivityUpdate:(id)update;
-(void)handleActivityType:(id)type ShowedType:(id)type2 FunctionId:(id)anId ActivityId:(id)anId4 Ticket:(id)ticket;
-(void)setNeedShowNewInActivityCell:(id)activityCell Showed:(BOOL)showed;
-(BOOL)isNeedShowNewInActivityCell:(id)activityCell;
-(void)setNeedShowRedCodeInMoreView:(BOOL)moreView;
-(void)setNeedShowNewInMoreView:(BOOL)moreView;
-(BOOL)isNeedShowRedCodeInMoreView;
-(BOOL)isNeedShowNewInMoreView;
-(void)setShowProductActivity:(id)activity Showed:(BOOL)showed;
-(BOOL)isNeedShowProductActivity:(id)activity;
-(id)getAllTicket;
-(void)saveAllTicket:(id)ticket;
-(void)ClearWCMallOldTelephone;
-(void)SetWCMallOldTelephone:(id)telephone UserName:(id)name;
-(id)GetWCMallOldTelehoneArray;
-(void)SetUsedWCMallPayTelephone;
-(BOOL)IsUsedWCMallPayTelephone;
-(void)GetWCMallFunctionProductLatestInfo:(id)info;
-(void)GetWCMallFunctionProductsList:(unsigned long)list;
-(void)GetWCMallFunctionList:(id)list;
-(void)GetWCMallFunctionList;
-(void)OnCallBackGetWCMallLatestPayProductInfo:(id)info Request:(id)request Error:(id)error;
-(void)OnCallBackGetWCMallFunctionProductList:(id)list Request:(id)request Error:(id)error;
-(void)OnCallBackGetWCMallFunctionList:(id)list Request:(id)request Error:(id)error;
-(void)OnHandlerFunctionListComeBack:(id)back Request:(id)request;
-(void)dealloc;
-(id)init;
@end

@interface MMGameAppInfoDebugViewController : MMUIViewController {
	UIScrollView* m_scrollView;
	RichTextView* m_textLabel;
	NSArray* m_appInfoList;
}
-(void)initTextLabel;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithAppInfoList:(id)appInfoList;
@end

@interface MMAsyncTaskUtil : NSObject {
}
+(void)waitUntilTaskStoped:(id)stoped;
+(void)stopAllTasks;
+(void)stopTaskForced:(id)forced;
+(void)stopTaskNormal:(id)normal;
+(void)startAsyncTask:(id)task;
@end

@interface NewQQMailQueueHelper : NSObject {
	NSMutableArray* m_newQQMailQueue;
	BOOL m_bChecked;
}
-(void)dealloc;
-(void)saveNewQQMailQueueCache;
-(BOOL)loadNewQQMailQueueCache;
-(void)checkQueue;
-(void)popQueue:(unsigned long)queue;
-(void)enQueue:(id)queue;
-(void)setChecked:(BOOL)checked;
-(id)init;
@end

@interface NewQQMailUtil : NSObject {
}
+(unsigned long)GetRealSize:(id)size imageInfoList:(id)list attachInfoList:(id)list3;
+(void)AddQQMailFailTipMsg:(id)msg;
@end

@interface WCMallCandidateTelephoneView : MMUIView <UITableViewDataSource, UITableViewDelegate> {
	UITableView* m_oTelFilterTableView;
	UIImageView* bgImageView;
	id<WCMallCandidateTelephoneViewDelegate> m_delegate;
}
@property(assign, nonatomic) id<WCMallCandidateTelephoneViewDelegate> m_delegate;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)reloadTelFilterTableView;
-(void)reloadCandidateTelephoneView;
-(void)dealloc;
-(void)resetWCMallTelListTableViewHeight:(float)height;
-(id)initWithFrame:(CGRect)frame;
-(void)initView;
-(void)initTableView;
@end

@interface BrandStyleUILogicController : MMObject {
	CContact* m_contact;
	MMDelegateProxy<BrandStyleUILogicControllerDelegate>* m_delegate;
}
-(id)getInnerToolView;
-(id)getOutterToolView;
-(id)getWholeView;
-(id)getBrandViewController;
-(id)getBrandLogicController;
-(id)getBrandContact;
-(void)removeCustomToolView;
-(void)addMsgForUsr:(id)usr;
-(void)processLocationDidFinish;
-(void)saveAchievedImageMd5:(id)a5;
-(void)processImageDidFinish;
-(void)processImageDidCancel;
-(BOOL)shouldSaveAchievedImageMd5;
-(BOOL)shouldHideOrginInputToolView;
-(float)getCustomizedAreaWidth;
-(void)setLastMenuMode:(BOOL)mode;
-(BOOL)getLastMenuMode;
-(void)adjustToolViewComponent;
-(void)updateIfCreateToolView:(id)view;
-(void)updateIfViewWillDisappear;
-(void)updateIfViewDidAppear;
-(void)updateIfViewWillAppear;
-(void)updateIfViewDidInit;
-(void)updateIfViewWillInit;
-(id)initWithContact:(id)contact WithDelegate:(id)delegate;
-(void)dealloc;
@end

@interface BrandCommStyleUILogicController : BrandStyleUILogicController {
}
-(void)updateIfCreateToolView:(id)view;
@end

@interface BrandCustomStyleUILogicController : BrandStyleUILogicController <CustomMenuToolViewDelegate, CustomSubMenuFloatViewDelegate, CameraScanLogicDelegate, CameraScanUIDelegate, UIActionSheetDelegate, IBrandCustomReportExt, BrandOpenSpecificViewHandlerDelegate, IUiUtilExt> {
	CustomMenuToolView* m_menuToolView;
	CustomSubMenuFloatView* m_subMenuFloatView;
	MMBizMenuInfo* m_menuData;
	BOOL m_isInMenuMode;
	BOOL m_isMsgReceiving;
	BrandOpenSpecificViewHandler* _openSpecificViewHandler;
	BOOL m_hasInit;
	ClickCommandRequestInfo* m_reportInfo;
	BOOL m_hasSendCgiSuccess;
	NSMutableArray* m_pickImageMd5List;
	CameraScanViewController* m_scanViewController;
}
@property(retain, nonatomic) CameraScanViewController* m_scanViewController;
@property(retain, nonatomic) NSMutableArray* m_pickImageMd5List;
@property(retain, nonatomic) ClickCommandRequestInfo* m_reportInfo;
@property(retain, nonatomic) MMBizMenuInfo* m_menuData;
@property(retain, nonatomic) CustomSubMenuFloatView* m_subMenuFloatView;
@property(retain, nonatomic) CustomMenuToolView* m_menuToolView;
-(void)updateIfCreateToolView:(id)view;
-(void)removeCustomToolView;
-(void)updateIfViewDidAppear;
-(void)updateIfViewWillAppear;
-(void)addMsgForUsr:(id)usr;
-(void)processLocationDidFinish;
-(void)saveAchievedImageMd5:(id)a5;
-(BOOL)shouldSaveAchievedImageMd5;
-(void)processImageDidFinish;
-(void)processImageDidCancel;
-(BOOL)shouldHideOrginInputToolView;
-(float)getCustomizedAreaWidth;
-(void)setLastMenuMode:(BOOL)mode;
-(BOOL)getLastMenuMode;
-(BOOL)canReloadViewIfMemoryWarning;
-(BOOL)CanRotateOrientation;
-(BOOL)isShakeEnabled;
-(void)onTopBarFrameChanged;
-(void)updateFloatContentView;
-(BOOL)hasDraft;
-(id)buttonListFromArr:(id)arr;
-(id)getSubMenuInfoByIndex:(int)index;
-(id)getMenuInfo;
-(void)stopReceiveMsg;
-(void)startReceiveMsg;
-(BOOL)shouldDismissCurrentViewController;
-(void)cleanPickImageMd5List;
-(void)addItem2PickImageMd5List:(id)list;
-(id)getPickImageMd5List;
-(void)createCameraScanViewController;
-(void)SendClickNotify:(id)notify ClickCommandRequestInfo:(id)info;
-(void)onReportActionEventAndContentXML:(id)xml;
-(void)onRecordActionEvent:(id)event toBrand:(id)brand;
-(void)onReportClickEvent:(id)event toBrand:(id)brand;
-(void)finishedChangeToInputMode;
-(void)onChangeToInputMode;
-(void)finishedChangeToMenuMode;
-(void)swichToolViewToCustomView;
-(void)changeToMenuMode;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(id)getScanQRCodeTitle;
-(BOOL)shouldDirectShowImagePicker;
-(void)obtainScanResultDidFinish:(id)obtainScanResult;
-(BOOL)shouldBackToSessionImmediately;
-(BOOL)shouldObtainScanResult;
-(void)onJumpToPOIView:(id)poiview;
-(void)onJumpToPicView:(id)picView;
-(void)onJumpToScanView:(id)scanView;
-(void)handleOpenSpecificView:(id)view;
-(BOOL)isOpenSpecificView:(id)view;
-(void)onJumpToWebView:(id)webView;
-(void)onRecordActionEvent:(id)event;
-(void)onReportClickEvent:(id)event;
-(void)onChangeToMenuMode:(id)menuMode;
-(void)onSubMenuDismiss;
-(void)onSubMenuPresentWithIndex:(int)index ArrowX:(float)x;
-(void)createMenuToolView;
-(void)loadMenuData;
-(id)initWithContact:(id)contact WithDelegate:(id)delegate;
-(void)dealloc;
@end

@interface BrandContentLogicController : WeixinContentLogicController <BrandStyleUILogicControllerDelegate, MsgDelegate> {
	BrandStyleUILogicController* m_uiLogicController;
	BrandActionReportLogicController* m_reportLogicController;
	BOOL m_isLastInMenuMode;
	int m_lastInputMode;
	int m_lastPoisitionMode;
	int m_lastContentMode;
	BOOL m_shouldRecordToolViewStatus;
	BOOL m_isShowKeyboardImmediately;
	unsigned m_stat_beforeUnread;
	unsigned long m_stat_timeStart;
}
-(id)GetPossibleContactByName:(id)name;
-(void)updateContactFromServer;
-(BOOL)showKeyboardImmediately;
-(BOOL)shouldHideOrginInputToolView;
-(float)getCustomizedAreaWidth;
-(void)updateToolViewStatus;
-(id)getLogicController;
-(id)getInputToolView;
-(void)recordToolViewStatus;
-(void)showKeyboardImmediatelyEnd;
-(void)showKeyboardImmediatelyStart;
-(void)onModifyContact:(id)contact;
-(void)resetUILogicController:(id)controller;
-(void)CustomToolViewEX:(id)ex;
-(void)ViewWillDisappear;
-(void)ViewDidAppear;
-(void)ViewWillAppear;
-(void)ViewDidInit;
-(void)createAllLogicForContact:(id)contact;
-(void)ViewWillInit;
-(void)onFinishSelectedLocation;
-(BOOL)CanSendVideoMsg;
-(BOOL)CanSendMultiImage;
-(BOOL)CanSendOriginalImage;
-(void)processImageDidFinish;
-(void)processImageDidCancel;
-(void)OnAddMsg:(id)msg MsgWrap:(id)wrap;
-(id)FormImageMsg:(id)msg withImage:(id)image withData:(id)data;
-(void)OpenDetailInfo;
-(void)OpenContactInfo:(id)info;
-(BOOL)isShowHeadImage:(id)image;
-(id)GetRightBarButtonImage;
-(unsigned long)getMsgCountToLoad;
-(BOOL)isShakeEnabled;
-(BOOL)canAutoplayWhenMessageDownloaded;
-(BOOL)CanSendVoipMsg;
-(BOOL)CanWXTalk;
-(BOOL)CanRemoteRecord;
-(void)dealloc;
-(id)init;
@end

@interface BrandActionReportLogicController : MMObject {
	CContact* m_contact;
	BrandServiceEnterConversationLogic* m_enterConversationLogic;
	BrandServiceContinueLocationReportLogic* m_continueLocationReporter;
}
@property(retain, nonatomic) BrandServiceEnterConversationLogic* m_enterConversationLogic;
@property(retain, nonatomic) BrandServiceContinueLocationReportLogic* m_continueLocationReporter;
@property(retain, nonatomic) CContact* m_contact;
-(void)resetContinueReportLogic;
-(void)updateContact:(id)contact;
-(void)creatContinueReportLogic;
-(void)createEnterReportLogic;
-(id)initWithContact:(id)contact;
-(void)dealloc;
@end

@interface WCMallControlData : NSObject {
	WCMallFunctionActivity* selectedFunctionActivity;
	WCMallPayProductLatestInfo* selectedPayProductLatestInfo;
	WCMallPayProductInfo* selectedPayProductInfo;
	NSMutableDictionary* selectedProductsFilledInfoDic;
	NSArray* m_arrGlobalActivityList;
	NSArray* m_arrFunctionActivityList;
	NSArray* m_arrFunctionProductsList;
	NSArray* m_arrOldTelephoneList;
	NSDictionary* m_dicAllTelephoneList;
	NSDictionary* m_dicCandidateTelephoneList;
	BOOL m_bNotShowTutorial;
}
@property(assign, nonatomic) BOOL m_bNotShowTutorial;
@property(retain, nonatomic) NSDictionary* m_dicCandidateTelephoneList;
@property(retain, nonatomic) NSDictionary* m_dicAllTelephoneList;
@property(retain, nonatomic) NSArray* m_arrOldTelephoneList;
@property(retain, nonatomic) NSArray* m_arrFunctionProductsList;
@property(retain, nonatomic) NSArray* m_arrFunctionActivityList;
@property(retain, nonatomic) NSArray* m_arrGlobalActivityList;
@property(retain, nonatomic) NSMutableDictionary* selectedProductsFilledInfoDic;
@property(retain, nonatomic) WCMallPayProductLatestInfo* selectedPayProductLatestInfo;
@property(retain, nonatomic) WCMallPayProductInfo* selectedPayProductInfo;
@property(retain, nonatomic) WCMallFunctionActivity* selectedFunctionActivity;
-(void)dealloc;
@end

@interface WCMallControlLogic : WCBizControlLogic <WCMallLogicMgrExt> {
	WCMallControlData* m_data;
}
-(void)onErrorAlertViewStopLogic:(id)logic;
-(BOOL)onError:(id)error;
-(void)stopLogic;
-(void)pause;
-(void)resume;
-(void)dealloc;
-(id)initWithData:(id)data;
-(id)init;
@end

@interface WCMallControlMgr : WCBaseControlMgr {
}
-(unsigned long)startFunctionJumpWCMall:(id)mall WithEvent:(id)event StepUrl:(id)url;
-(unsigned long)startFunctionActivityPay:(id)pay With:(id)with PayData:(id)data;
-(unsigned long)startFunctionActivityPay:(id)pay With:(id)with PayData:(id)data FirstStepToProductsView:(BOOL)productsView;
-(unsigned long)startFunctionActivityList:(id)list With:(id)with;
@end

@interface WCMallFunctionActivityPayControlLogic : WCMallControlLogic <WCMallMallProductsViewControllerDelegate, IWCPayControlLogicExt> {
	WCPayControlData* m_oPayData;
	BOOL m_bNeedFirstGotoWCMallProductView;
}
@property(assign, nonatomic) BOOL m_bNeedFirstGotoWCMallProductView;
-(void)OnFinishedWCPayLogic:(id)logic CompleteStatus:(int)status;
-(void)checkSuccessStopCurrentLogic;
-(void)OnGetWCMallLatestFunctionProductInfo:(id)info Remarks:(id)remarks ResponseRemarks:(id)remarks3 Error:(id)error;
-(void)OnGetWCMallFunctionProductList:(id)list FunctionId:(unsigned long)anId Error:(id)error;
-(void)OnWCMallTelephoneInputComplete:(id)complete;
-(void)OnWCmallMallProductsClearOldList;
-(unsigned long)GetWCMallMallProductsAllListCount;
-(id)GetWCMallMallProductsFiltedOldList;
-(BOOL)IsUsedWCMallMallProduct;
-(void)OnWCMallMallProductsViewControllerPay:(id)pay;
-(void)OnWCMallMallProductsViewControllerProductSelected:(id)selected;
-(void)OnWCMallMallProductsViewControllerRightActionBack;
-(void)OnWCMallMallProductsViewControllerBack;
-(void)dealloc;
-(void)stopLogic;
-(void)startLogic;
-(void)SetPayData:(id)data;
-(id)initWithData:(id)data;
-(id)init;
@end

@interface WCMallFunctionListControlLogic : WCMallControlLogic {
}
-(void)OnGetWCMallFunctionList:(id)list GlobalList:(id)list2 NotShowTutorial:(BOOL)tutorial Error:(id)error;
-(void)startLogic;
@end

@interface WCPayAreaItem : WCBaseTextFieldItem <MMRegionPickerViewControllerDelegate> {
	MMUIViewController* m_currentViewController;
	NSString* m_country;
	NSString* m_province;
	NSString* m_city;
	MMDelegateProxy<WCPayAreaItemDelegate>* m_payAreaItemDelegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCPayAreaItemDelegate>* m_payAreaItemDelegate;
-(void)dealloc;
-(void)MMRegionPickerDidChoosRegion:(id)mmregionPicker;
-(void)becomeFirstResponder;
-(id)getCity;
-(id)getProvince;
-(id)getCountry;
-(BOOL)isUSorCA;
-(void)setCurrentViewController:(id)controller;
@end

@interface WCMallFunctionActivityView : UIButton {
	WCMallFunctionActivity* m_oWCMallFunctionActivity;
}
@property(retain, nonatomic) WCMallFunctionActivity* m_oWCMallFunctionActivity;
-(void)initView;
-(void)dealloc;
-(id)initWithFunctionActivity:(id)functionActivity;
@end

@interface WCMallGlobalActivityView : MMUIButton {
	WCMallActivityInfo* m_oWCMallActivityInfo;
	MMDelegateProxy<WCMallGlobalActivityViewDelegate>* m_delegate;
}
@property(assign, nonatomic) MMDelegateProxy<WCMallGlobalActivityViewDelegate>* m_delegate;
@property(retain, nonatomic) WCMallActivityInfo* m_oWCMallActivityInfo;
-(void)OnClickedActivitityButton;
-(void)initView;
-(void)dealloc;
-(id)initWithActivityInfo:(id)activityInfo;
@end

@interface WCPayWordingItem : NSObject {
	BOOL needShow;
	NSString* entryTip;
	NSString* title;
	NSString* desc;
	NSString* subTitle;
	NSString* subDesc;
}
@property(retain, nonatomic) NSString* subDesc;
@property(retain, nonatomic) NSString* subTitle;
@property(retain, nonatomic) NSString* desc;
@property(retain, nonatomic) NSString* title;
@property(assign, nonatomic) BOOL needShow;
@property(retain, nonatomic) NSString* entryTip;
-(void)dealloc;
-(id)init;
@end

@interface WCPayWordingHelpMgr : MMService <MMService, MMPackageDownloadMgrExt, IMMLanguageMgrExt> {
	unsigned long _lastUpdateTime;
	NSMutableDictionary* _serverDefaultWordingDict;
	NSMutableDictionary* _validityDynamicWordingDict;
	NSMutableDictionary* _phoneNumberDynamicWordingDict;
	NSMutableDictionary* _cvvCodeDynamicWordingDict;
}
@property(retain, nonatomic) NSMutableDictionary* cvvCodeDynamicWordingDict;
@property(retain, nonatomic) NSMutableDictionary* phoneNumberDynamicWordingDict;
@property(retain, nonatomic) NSMutableDictionary* validityDynamicWordingDict;
@property(retain, nonatomic) NSMutableDictionary* serverDefaultWordingDict;
@property(assign, nonatomic) unsigned long lastUpdateTime;
-(id)getCVVCodeWoring:(id)woring;
-(BOOL)isShowCVVCode:(id)code;
-(id)getCardNumberInputSafetyInstructionDescWording;
-(id)getCardNumberInputSafetyTipWording;
-(BOOL)isShowCardNumberInputSafetyTip;
-(id)getCardNumberInputTipWording;
-(BOOL)isShowCardNumberInputTip;
-(id)getSmsVerifyCodeWording;
-(id)getSmsVerifyCodeTipWording;
-(BOOL)isShowSmsVerifyCode;
-(id)getPhoneNumberWording:(id)wording;
-(BOOL)isShowPhoneNumber:(id)number;
-(id)getValidityWording:(id)wording;
-(BOOL)isShowValidity:(id)validity;
-(id)getPersonalInfoWording;
-(BOOL)isShowPersonalInfo;
-(BOOL)writeToFile:(id)file data:(id)data;
-(void)saveWCPayWording:(id)wording;
-(BOOL)loadAndUpdateWCPayWording;
-(void)onPackageListUpdated:(id)updated;
-(void)tryDownloadWCPayWording;
-(void)receiveWordingContent:(id)content;
-(void)onLanguageChange;
-(void)dealloc;
-(void)initData;
-(id)init;
-(void)onServiceInit;
@end

@interface WCMallProductsPickerItem : WCBaseTextFieldItem <UIPickerViewDataSource, UIPickerViewDelegate, WCBizPickerViewDelegate> {
	NSArray* m_arrProductsList;
	unsigned long m_uiProduct;
	WCMallPayProductInfo* m_oSelectedPayProductInfo;
	UIPickerView* m_pickerView;
	UIImageView* m_oRightCrossImageView;
	UILabel* m_oPriceLabel;
}
-(void)textFieldDidEndEditing:(id)textField;
-(void)UIPickerViewDidFinish;
-(void)UIPickerViewDidCancel;
-(id)getValue;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(float)pickerView:(id)view widthForComponent:(int)component;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)SetText:(unsigned long)text;
-(void)SetText;
-(void)becomeFirstResponder;
-(void)dealloc;
-(void)initView:(CGRect)view;
-(id)getSelectedProductInfo;
-(void)setPriceLabelText:(id)text;
-(void)setSeletedProductLatestInfo:(id)info;
-(void)setSeletedProduct:(id)product;
-(void)setProductsList:(id)list;
@end

@interface WCMallTelephoneTextFieldItem : WCBaseTextFieldItem <ABPeoplePickerNavigationControllerDelegate> {
	MMDelegateProxy<MMUIViewControllerDelegate>* m_vcDelegate;
	UIButton* m_btnSelectContact;
	UILabel* m_labelName;
}
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(void)onSelectContact;
-(void)setViewController:(id)controller;
-(void)setTelephoneText:(id)text;
-(id)getValue;
-(void)dealloc;
-(id)getLabelName;
-(void)setLabelName:(id)name;
-(void)initView:(CGRect)view;
@end

@interface WCMallBaseViewController : WCBizBaseViewController <MMTableViewInfoDelegate, WCBaseInfoItemDelegate, UIAlertViewDelegate> {
	WCMallControlData* m_data;
}
-(void)dealloc;
-(void)refreshViewWithData:(id)data;
-(void)initWithData:(id)data;
@end

@interface WCMallMallProductsViewController : WCMallBaseViewController <WCMallOldTelephoneViewDelegate, WCMallCandidateTelephoneViewDelegate, UIAlertViewDelegate> {
	MMDelegateProxy<WCMallMallProductsViewControllerDelegate>* m_delegate;
	NSMutableDictionary* m_dicFunctionListView;
	WCBaseKeyboardToolBar* m_keyboardBar;
	UIButton* m_footerButton;
	UILabel* m_telphoneFooterLabel;
	UILabel* m_productFooterLabel;
	MMWebImageView* m_activityImageView;
	WCMallOldTelephoneView* m_oWCMallOldTelephoneView;
	WCMallCandidateTelephoneView* m_oWCMallCandidateTelephoneView;
	UIView* m_pickerBkgView;
	int m_eTelephoneNumberInputStatus;
}
-(id)GetCandidateTelephoneEnsureTip;
-(id)GetCandidateTelephoneDescription:(unsigned long)description DifferentIndex:(id)index;
-(unsigned long)GetNumberOfCandidateTelephoneListCount;
-(void)OnClickWCMallCandidateTelephoneEnsureCellClicked;
-(void)OnClickWCMallCandidateTelephoneCell:(unsigned long)cell;
-(id)GetOldTelephoneOwnerName:(unsigned long)name;
-(id)GetOldTelephoneNumber:(unsigned long)number;
-(unsigned long)GetNumberOfOldTelephoneListCount;
-(void)OnClickWCMallOldTelephoneClearButton;
-(void)OnClearTelphone;
-(void)OnClickWCMallOldTelephoneCell:(unsigned long)cell;
-(void)makeInfoCell:(id)cell cellInfo:(id)info;
-(void)WCBaseInfoItemEndEdit:(id)edit;
-(void)WCBaseInfoItemEditChanged:(id)changed;
-(void)WCBaseInfoItemBeginEdit:(id)edit;
-(void)WCBaseInfoItemCancelEdit:(id)edit;
-(void)WCBaseInfoItemPressReturnKey:(id)key;
-(void)checkData:(id)data;
-(BOOL)checkIsEmpty:(id)empty;
-(void)OnComfireEnsureAlert;
-(void)onNext;
-(BOOL)getData:(id)data;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)initOldTelphoneTableView:(CGRect)view;
-(void)initCandidateTelphoneTableView:(CGRect)view;
-(void)initNavigationBar;
-(void)initFooterView;
-(void)reloadTableView;
-(id)getClearHeaderView;
-(id)makeProductFooterView:(id)view;
-(id)makeTelphoneFooterView:(id)view;
-(void)initInfoTemplate;
-(void)clearPriceLabel;
-(void)updateTableView:(BOOL)view;
-(void)updateTableView;
-(void)setDelegate:(id)delegate;
-(void)reloadOldTelephoneListView;
-(void)reloadCandidateTelephoneView;
-(id)getCurrentTelephoneNumberOwnerName;
-(void)setTelephoneNumberOwnerName:(id)name Number:(id)number;
-(void)SetWCMallProductLatestInfo:(id)info;
-(void)editerBeginEditing:(id)editing;
-(void)editerEndEditing:(id)editing;
-(void)removeNotificationObservers;
-(void)initNotificationObservers;
-(void)OnActivityIconClick:(id)click;
-(void)OnActivityIconCancel:(id)cancel;
-(void)refreshViewWithData:(id)data;
-(BOOL)initFilledDefaultData;
-(void)dealloc;
-(id)init;
@end

@interface WCPayCardListViewController : WCPayBaseViewController <WCPayLogicMgrExt> {
	NSMutableArray* m_arrPayCardDetailView;
}
-(void)didReceiveMemoryWarning;
-(void)onClickCard:(id)card;
-(void)onAddPayCard;
-(void)refreshViewWithData:(id)data;
-(void)reloadNavigationItem;
-(void)viewDidLoad;
-(void)initView;
-(void)dealloc;
-(id)init;
@end

@interface ContactsGoogleNoWeChatViewController : MMUIViewController <UIActionSheetDelegate> {
	GoogleContact* m_googleContact;
	MMAnimationTipView* m_tipView;
	UIButton* m_inviteButton;
	MMDelegateProxy<GoogleContactViewDelegate>* m_googleContactViewDelegate;
}
@property(retain, nonatomic) UIButton* m_inviteButton;
@property(retain, nonatomic) MMAnimationTipView* m_tipView;
@property(retain, nonatomic) GoogleContact* m_googleContact;
@property(assign, nonatomic) MMDelegateProxy<GoogleContactViewDelegate>* m_googleContactViewDelegate;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)onInvite:(id)invite;
-(void)initDetailInfoView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithContact:(id)contact;
-(id)init;
@end

@interface AppJumpLogicHelper : NSObject {
}
-(int)getJumpFunctionTypeByAppId:(id)anId;
-(id)getAppIdByFunctionType:(int)type;
-(BOOL)isInnerFunctionEnabled:(id)enabled;
-(BOOL)isShowAppMessageBottom:(id)bottom;
-(BOOL)isShowTimelineSource:(id)source;
-(BOOL)innerJumpByAppId:(id)anId isMessage:(BOOL)message;
-(BOOL)jumpByAppIdInTimeline:(id)timeline;
-(BOOL)jumpByAppIdInMessage:(id)message;
-(BOOL)isCanJumpWithAppId:(id)appId;
-(BOOL)isShowTimeLineJumpLink:(id)link;
@end

@interface PluginContactInfoAssist : CBaseContactInfoAssist {
}
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)getPluginIntro;
-(id)getRealPluginIntro;
@end

@interface VoiceDetectResult : NSObject {
	BOOL isSilient_;
	BOOL isNoisy_;
	BOOL isToLoudly_;
}
@property(assign, nonatomic) BOOL isToLoudly;
@property(assign, nonatomic) BOOL isNoisy;
@property(assign, nonatomic) BOOL isSilient;
-(id)init;
@end

@interface QVIVoiceAnalysis : NSObject {
	TRSpeexEncodeContex mSpeexEncodeContex;
	TRSpeexDecodeContex mSpeexDecodeContex;
	int mEncodeBufferSize;
	char* mEncodeInBuffer;
	char* mEncodeOutBuffer;
	BOOL mSpeexEncodeInitialized;
	int mDecodeBufferSize;
	char* mDecodeInBuffer;
	char* mDecodeOutBuffer;
	BOOL mSpeexDecodeInitialized;
	BOOL mMfeInitialized;
}
+(void)releaseSharedInstance;
+(id)activeInstance;
+(id)sharedInstance;
-(id).cxx_construct;
-(void)stopMfeEngine;
-(BOOL)startMfeEngine;
-(void)releaseMfeEngine;
-(BOOL)initMfeEngineWithSilentTime:(int)silentTime andTimeout:(int)timeout;
-(void)mfeDetect:(id)detect withResult:(id)result;
-(void)mfeStop;
-(void)mfeStart;
-(void)mfeRelease;
-(void)mfeInitWithSilentTime:(int)silentTime andTimeout:(int)timeout;
-(id)speexDecode:(id)decode;
-(void)speexDecodeRelease;
-(void)speexDecodeInit;
-(id)speexEncode:(id)encode;
-(void)speexEncodeRelease;
-(void)speexEncodeInit;
-(id)init;
@end

@interface libspeex : NSObject {
}
@end

@interface TimerRuner : NSObject {
}
-(void)Run:(id)run;
@end

@interface Reachability : NSObject {
	BOOL localWiFiRef;
	SCNetworkReachabilityRef reachabilityRef;
}
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostName:(id)hostName;
-(int)currentReachabilityStatus;
-(BOOL)connectionRequired;
-(int)networkStatusForFlags:(unsigned)flags;
-(int)localWiFiStatusForFlags:(unsigned)flags;
-(void)dealloc;
-(void)stopNotifier;
-(BOOL)startNotifier;
@end

@interface __CThreadWarp : NSObject {
	/*function-pointer*/ void* m_funp;
	void* m_arg;
	/*function-pointer*/ void* m_fun;
}
@property(assign, nonatomic) void* m_arg;
@property(assign, nonatomic) /*function-pointer*/ void* m_fun;
@property(assign, nonatomic) /*function-pointer*/ void* m_funp;
-(void)Run;
-(id)init;
@end

@interface __ThreadWarp : NSObject {
	id m_target;
	SEL m_sel;
	id m_arg;
}
@property(retain, nonatomic) id m_arg;
@property(assign, nonatomic) SEL m_sel;
@property(retain, nonatomic) id m_target;
-(void)Run;
-(void)dealloc;
-(id)init;
@end

@interface ThreadQueue : NSObject {
}
+(BOOL)RunWithTarget:(id)target selector:(SEL)selector object:(id)object;
@end

@interface WTLoginApi : NSObject {
	NSString* _UserAccount;
	unsigned long long _uin;
	unsigned _dwBitmap;
	unsigned _loginFlag;
	unsigned _dwAppid;
	unsigned _dwSubAppid;
	BOOL _hasNewTGTGT;
	MemSig* _TGTGT;
	WloginProtocol* _wloginProtocol;
}
-(void)resetLoginProcess;
-(id)sigTypeToName:(unsigned)name;
-(void)setClientPicInfo:(unsigned short)info CapType:(unsigned char)type PicRetType:(unsigned char)type3;
-(id)initMemUserAppidSig;
-(void)clearPwdSig:(unsigned long long)sig;
-(BOOL)hasPwdSig:(unsigned long long)sig;
-(XXStruct_R2OYDB*)resolveSvrPkg:(id)pkg;
-(int)exchangeSig:(unsigned long long)sig andSig:(id)sig2 andSigBitmap:(unsigned)bitmap retData:(id)data;
-(int)refreshPicture:(id)picture;
-(int)checkPicture:(id)picture retData:(id)data;
-(int)loginWithPasswd:(unsigned long long)passwd andPasswd:(id)passwd2 andSigBitmap:(unsigned)bitmap andLoginFlag:(int)flag retData:(id)data;
-(id)initWithLogDelegate:(id)logDelegate;
-(void)dealloc;
-(id)init;
@end

@interface WloginErrInfo : NSObject {
	unsigned short wErrorCode;
	NSString* sErrorTitle;
	NSString* sErrorMsg;
	unsigned short wErrorAddType;
	NSString* sErrorAdd;
}
@property(copy) NSString* sErrorAdd;
@property(assign) unsigned short wErrorAddType;
@property(copy) NSString* sErrorMsg;
@property(copy) NSString* sErrorTitle;
@property(assign) unsigned short wErrorCode;
@end

@interface WloginPkgHead : NSObject <WloginProtocolBuff> {
	struct {
		unsigned short wVersion;
		unsigned short wCommand;
		unsigned short wSeq_num;
		unsigned dwUin;
		unsigned char cExtVer;
		unsigned char cCmdVer;
		unsigned char cRetryTimes;
		unsigned dwClientType;
		unsigned dwPubNo;
		unsigned dwInstanceID;
	} stClientPkgHead;
	struct {
		unsigned short wVersion;
		unsigned short wCommand;
		unsigned short wSeq_num;
		unsigned dwUin;
		unsigned short wFlag;
		unsigned char cRetryTimes;
	} stServerPkgHead;
}
-(unsigned short)pkgCmd;
-(void)setPkgCmd:(unsigned short)cmd;
-(unsigned)pkgUin;
-(void)setPkgUin:(unsigned)uin;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(BOOL)resetHead;
-(id)initWithVer:(unsigned short)ver andPubNo:(unsigned)no andClientType:(unsigned)type;
@end

@interface WloginProtocol : NSObject {
	WloginPkgHead* pkgHead;
	NSMutableDictionary* basicInfoTlvList;
	unsigned dwSrcSigAppid;
	unsigned dwSrcSigSubAppid;
	unsigned dwDstSigAppid;
	unsigned dwDstSigSubAppid;
	NSMutableDictionary* reslutSigTlvList;
	BOOL sKey[16];
	BOOL A1_Key[16];
	struct {
		int localRet;
		int svrRet;
		NSData* passwdSig;
		NSArray* sigArray;
		WloginUserInfo* userInfo;
		WloginErrInfo* errInfo;
		NSData* pictureData;
	} stRetValue;
}
@property(readonly, assign) NSMutableDictionary* reslutSigTlvList;
-(unsigned)pkgHeadUin;
-(void)setPkgHeadUin:(unsigned)uin;
-(BOOL)genEncryptBody_0x144:(id)a144 subCmd:(unsigned short)cmd;
-(BOOL)genTGTGTbyPasswd:(const char*)passwd andUin:(unsigned)uin andFlag:(int)flag outTGTGT:(id)tgtgt;
-(void)setSrcAppid:(unsigned)appid andSrcSubAppid:(unsigned)appid2 andDstAppid:(unsigned)appid3 andDstSubAppid:(unsigned)appid4;
-(BOOL)decodeTlvList:(const char*)list andLeftLen:(int*)len;
-(id)sigTlvDictByTag:(unsigned short)tag;
-(id)basicTlvByTag:(unsigned short)tag;
-(BOOL)addBasicTlv:(id)tlv;
-(XXStruct_R2OYDB*)resolveSvrPkg:(id)pkg;
-(void)recvPkgError;
-(int)exchangeSig:(id)sig retData:(id)data;
-(int)refreshPic:(id)pic;
-(int)checkPic:(id)pic;
-(int)loginWithPasswd:(id)passwd retData:(id)data;
-(void)dealloc;
-(BOOL)resetProtocol;
-(id)initWithClientVer:(unsigned short)clientVer andPubNo:(unsigned)no andClientType:(unsigned)type;
@end

@interface WloginTlv_0x2 : WloginTlv {
	unsigned short wPicSigVer;
	NSString* sCode;
	NSData* acEncryptKey;
}
@property(retain) NSData* acEncryptKey;
@property(copy) NSString* sCode;
@property(assign, nonatomic) unsigned short wPicSigVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0xa : WloginTlv {
	unsigned short wErrorVer;
	unsigned short wErrorCode;
	NSString* sErrorInfo;
}
@property(copy) NSString* sErrorInfo;
@property(assign, nonatomic) unsigned short wErrorCode;
@property(assign, nonatomic) unsigned short wErrorVer;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x17 : WloginTlv {
	unsigned short wDataVer;
	unsigned dwTime;
	unsigned dwClientIP;
	unsigned short wClientPort;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wClientPort;
@property(assign) unsigned dwClientIP;
@property(assign) unsigned dwTime;
@property(assign) unsigned short wDataVer;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x18 : WloginTlv {
	unsigned short wPingVer;
	unsigned dwSSOVer;
	unsigned dwAppID;
	unsigned dwAppClientVer;
	unsigned dwUin;
	unsigned short wRedirectCount;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wRedirectCount;
@property(assign) unsigned dwUin;
@property(assign) unsigned dwAppClientVer;
@property(assign) unsigned dwAppID;
@property(assign) unsigned dwSSOVer;
@property(assign) unsigned short wPingVer;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x11a : WloginTlv {
	unsigned short wFaceId;
	unsigned char cAge;
	unsigned char cGender;
	NSString* sNickName;
}
@property(copy) NSString* sNickName;
@property(assign) unsigned char cGender;
@property(assign) unsigned char cAge;
@property(assign) unsigned short wFaceId;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x100 : WloginTlv {
	unsigned short wDBBufVer;
	unsigned dwSSOVer;
	unsigned dwAppID;
	unsigned dwSubAppID;
	unsigned dwAppClientVer;
	unsigned dwGetSig;
}
@property(assign, nonatomic) unsigned dwGetSig;
@property(assign, nonatomic) unsigned dwAppClientVer;
@property(assign, nonatomic) unsigned dwSubAppID;
@property(assign, nonatomic) unsigned dwAppID;
@property(assign, nonatomic) unsigned dwSSOVer;
@property(assign, nonatomic) unsigned short wDBBufVer;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x105 : WloginTlv {
	NSData* acSig;
	NSData* acPicData;
}
@property(retain) NSData* acPicData;
@property(retain) NSData* acSig;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x107 : WloginTlv {
	unsigned short wPicType;
	unsigned char cCapType;
	unsigned short wPicSize;
	unsigned char cPicRetType;
}
@property(assign, nonatomic) unsigned char cPicRetType;
@property(assign, nonatomic) unsigned short wPicSize;
@property(assign, nonatomic) unsigned char cCapType;
@property(assign, nonatomic) unsigned short wPicType;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x113 : WloginTlv {
	unsigned dwUin;
	unsigned short wNameTag;
	NSString* sName;
}
@property(copy) NSString* sName;
@property(assign) unsigned short wNameTag;
@property(assign) unsigned dwUin;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x116 : WloginTlv {
	unsigned char cVer;
	unsigned dwMiscBitmap;
	unsigned dwGetAppSig;
	unsigned char cAppidNum;
	unsigned adwAppidList[10];
}
@property(assign, nonatomic) unsigned char cAppidNum;
@property(assign, nonatomic) unsigned dwGetAppSig;
@property(assign, nonatomic) unsigned dwMiscBitmap;
@property(assign, nonatomic) unsigned char cVer;
-(int)encode:(id)encode;
-(unsigned)adwAppidWithIndex:(unsigned char)index;
-(void)setAdwAppidList:(unsigned)list withIndex:(unsigned char)index;
@end

@interface WloginTlv_0x118 : WloginTlv {
	unsigned dwFlag;
	NSString* sName;
}
@property(copy) NSString* sName;
@property(assign) unsigned dwFlag;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x11d : WloginTlv {
	unsigned dwAppid;
	NSData* acSigKey;
	NSData* acSig;
}
@property(retain) NSData* acSig;
@property(retain) NSData* acSigKey;
@property(assign) unsigned dwAppid;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x11f : WloginTlv {
	unsigned dwExchangeTime;
	unsigned dwPriority;
}
@property(assign) unsigned dwPriority;
@property(assign) unsigned dwExchangeTime;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x122 : WloginTlv {
	NSData* G;
	NSData* N;
	NSData* Y;
	NSData* S;
}
@property(retain) NSData* S;
@property(retain) NSData* Y;
@property(retain) NSData* N;
@property(retain) NSData* G;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x123 : WloginTlv {
	NSData* G;
	NSData* N;
	NSData* Y;
	NSData* X;
	unsigned dwCalTime;
}
@property(assign) unsigned dwCalTime;
@property(retain) NSData* X;
@property(retain) NSData* Y;
@property(retain) NSData* N;
@property(retain) NSData* G;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x124 : WloginTlv {
	NSString* sOs;
	NSString* sOsVer;
	unsigned short wNetInfo;
	NSString* sNetDetail;
	NSString* sAddr;
}
@property(copy) NSString* sAddr;
@property(copy) NSString* sNetDetail;
@property(assign) unsigned short wNetInfo;
@property(copy) NSString* sOsVer;
@property(copy) NSString* sOs;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x125 : WloginTlv_Buff {
	NSData* openId;
}
@property(copy) NSData* openId;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x126 : WloginTlv {
	unsigned short wVer;
	NSData* randData;
}
@property(retain) NSData* randData;
@property(assign) unsigned short wVer;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x127 : WloginTlv {
	unsigned short wVer;
	NSString* msgCode;
	NSData* randData;
}
@property(copy) NSString* msgCode;
@property(retain) NSData* randData;
@property(assign) unsigned short wVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x128 : WloginTlv {
	unsigned short wVer;
	unsigned char cNewInstall;
	unsigned char cReadGuid;
	unsigned char cGuidChg;
	unsigned char cGUIDSrc;
	unsigned char cReadFailFlag;
	unsigned char cDevChgFlag;
	unsigned char cResvFlag;
	NSString* deviceType;
	NSData* guid;
}
@property(retain) NSData* guid;
@property(copy) NSString* deviceType;
@property(assign) unsigned char cResvFlag;
@property(assign) unsigned char cDevChgFlag;
@property(assign) unsigned char cReadFailFlag;
@property(assign) unsigned char cGUIDSrc;
@property(assign) unsigned char cGuidChg;
@property(assign) unsigned char cReadGuid;
@property(assign) unsigned char cNewInstall;
@property(assign) unsigned short wVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x129 : WloginTlv {
	unsigned dwHoldTime;
	unsigned dwTimeout;
	NSString* phoneNo;
}
@property(copy) NSString* phoneNo;
@property(assign) unsigned dwTimeout;
@property(assign) unsigned dwHoldTime;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x130 : WloginTlv {
	unsigned short wDataVer;
	unsigned dwTime;
	unsigned dwClientIP;
	unsigned short wClientPort;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wClientPort;
@property(assign) unsigned dwClientIP;
@property(assign) unsigned dwTime;
@property(assign) unsigned short wDataVer;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x132 : WloginTlv {
	NSData* accessToken;
	unsigned dwExpireTime;
	NSData* openId;
}
@property(copy) NSData* openId;
@property(assign) unsigned dwExpireTime;
@property(retain) NSData* accessToken;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(void)dealloc;
@end

@interface WloginTlv_0x138 : WloginTlv {
}
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x140 : WloginTlv {
	unsigned short wDataVer;
	NSString* sLoginHost;
	unsigned short wLoginPort;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wLoginPort;
@property(copy) NSString* sLoginHost;
@property(assign) unsigned short wDataVer;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x141 : WloginTlv {
	unsigned short wDataVer;
	NSString* sOperator;
	unsigned short wNetType;
	unsigned short wResvLen;
}
@property(assign) unsigned short wResvLen;
@property(assign) unsigned short wNetType;
@property(copy) NSString* sOperator;
@property(assign) unsigned short wDataVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x142 : WloginTlv {
	unsigned short wIDVer;
	NSString* sIdentifier;
}
@property(copy) NSString* sIdentifier;
@property(assign) unsigned short wIDVer;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x146 : WloginTlv {
	unsigned short wErrorVer;
	unsigned short wErrorCode;
	NSString* sErrorTitle;
	NSString* sErrorMsg;
	unsigned short wErrorInfoType;
	NSString* sErrorInfo;
}
@property(copy) NSString* sErrorInfo;
@property(assign) unsigned short wErrorInfoType;
@property(copy) NSString* sErrorMsg;
@property(copy) NSString* sErrorTitle;
@property(assign) unsigned short wErrorCode;
@property(assign) unsigned short wErrorVer;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x147 : WloginTlv {
	unsigned dwAppVerID;
	unsigned short wAppVerLen;
	NSString* sAppVer;
	unsigned short wAppSigLen;
	NSString* sAppSig;
}
@property(copy) NSString* sAppSig;
@property(assign) unsigned short wAppSigLen;
@property(copy) NSString* sAppVer;
@property(assign) unsigned short wAppVerLen;
@property(assign) unsigned dwAppVerID;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x149 : WloginTlv {
	unsigned short wTipsType;
	NSString* sTipsTitle;
	NSString* sTipsContent;
	NSString* sOtherInfo;
}
@property(copy) NSString* sOtherInfo;
@property(copy) NSString* sTipsContent;
@property(copy) NSString* sTipsTitle;
@property(assign) unsigned short wTipsType;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x150 : WloginTlv {
	unsigned dwBitmap;
	BOOL cNet;
}
@property(assign) BOOL cNet;
@property(assign) unsigned dwBitmap;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_Buff : WloginTlv {
	NSData* acSigBuff;
}
@property(retain) NSData* acSigBuff;
-(id)copy;
-(void)dealloc;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_String : WloginTlv {
	NSString* sString;
}
@property(copy) NSString* sString;
-(void)dealloc;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv : NSObject <WloginProtocolBuff> {
	unsigned short wTlvT;
}
@property(assign) unsigned short wTlvT;
-(id)copy;
-(id)getTlvTagString;
-(int)encode:(id)encode;
-(int)decode:(char**)decode andBuffLen:(int*)len;
-(id)initWithTag:(unsigned short)tag;
@end

@interface WloginTlvFactory : NSObject {
}
+(id)initTlvWithTag:(unsigned short)tag;
+(id)initTlvWithTag:(unsigned short)tag andUser:(id)user;
@end

@interface WtloginPlatformInfo : NSObject {
	NSString* macAddr;
	NSString* ipStr;
	unsigned clientIp;
	NSString* devType;
	NSString* iosVer;
	NSString* osName;
	char* if_names[32];
	char* ip_names[32];
	char* hw_addrs[32];
	unsigned long ip_addrs[32];
	int nextAddr;
	NSString* filePath;
	NSMutableDictionary* wtloginConfigDic;
	NSData* guid;
	unsigned char cIsNew;
	unsigned char cIsDiff;
	unsigned char cIsGetGuid;
	unsigned char cGUIDSrc;
	unsigned char cReadFailFlag;
	unsigned char cDevChgFlag;
	SafeSingleItemWrapper* ksidWrapper;
	MemSig* deviceSig;
	unsigned dwMyVer;
	unsigned dwMyPubNo;
	unsigned dwMyClientType;
	NSString* sigFilePath;
	NSMutableDictionary* sigDictionary;
	RemortServerList* stServerinfo;
	NSString* wtloginIosSdkVer;
	NSString* wtloginBuildTime;
	unsigned wtloginBigVer;
	int dwDiffTime;
	unsigned dwClientIP;
}
@property(assign) unsigned dwClientIP;
@property(assign) int dwDiffTime;
@property(readonly, assign) unsigned wtloginBigVer;
@property(readonly, assign) NSString* wtloginBuildTime;
@property(readonly, assign) NSString* wtloginIosSdkVer;
@property(readonly, assign) RemortServerList* stServerinfo;
@property(readonly, assign) NSMutableDictionary* sigDictionary;
@property(readonly, assign) NSMutableDictionary* nameDictionary;
@property(assign) unsigned dwMyClientType;
@property(assign) unsigned dwMyPubNo;
@property(assign) unsigned dwMyVer;
@property(retain) MemSig* deviceSig;
@property(readonly, assign) unsigned char cDevChgFlag;
@property(readonly, assign) unsigned char cReadFailFlag;
@property(readonly, assign) unsigned char cGUIDSrc;
@property(readonly, assign) unsigned char cIsGetGuid;
@property(readonly, assign) unsigned char cIsDiff;
@property(readonly, assign) unsigned char cIsNew;
@property(readonly, assign) NSData* guid;
@property(readonly, assign) NSString* osName;
@property(readonly, assign) NSString* iosVer;
@property(readonly, assign) NSString* devType;
@property(readonly, assign) unsigned clientIp;
@property(readonly, assign) NSString* ipStr;
@property(readonly, assign) NSString* macAddr;
+(id)wtloginCrtCarrierName;
+(int)wtloginNetState;
+(id)dataSafeFilePathWithName:(id)name;
-(void)_checkDevice;
-(id)guidForReport;
-(void)writeSigDataTofile;
-(void)printAllMemsig;
-(id)appMainBundleIndentify;
-(id)appBundleVersion;
-(id)appBundleShortVersionString;
-(id)lastLoginAppVer;
-(id)lastLoginSdkVer;
-(unsigned)lastLoginTime;
-(BOOL)resetLastLoginInfo;
-(unsigned)sigVailidateBySigType:(unsigned)type;
-(BOOL)setSigVailidateTime:(unsigned)time bySigType:(unsigned)type;
-(void)clearNameToUin:(id)uin;
-(BOOL)setNameToConfig:(id)config forUin:(unsigned)uin;
-(void)clearPwdSigUser:(unsigned)user;
-(id)pwdSigUser:(unsigned)user;
-(BOOL)setSavePwdSigToConfig:(id)config forAccount:(unsigned)account;
-(void)resetKeyChain;
-(id)ksidForUser:(id)user;
-(BOOL)setKsidToConfig:(id)config forAccount:(id)account;
-(BOOL)setKsidToKeyChain:(id)keyChain;
-(id)ksidFromKeyChain;
-(id)tgtgtKeyFromKeyChain;
-(id)crtCarrierName;
-(int)netState;
-(void)setConfigObject:(id)object forKey:(id)key;
-(id)configObjectForKey:(id)key;
-(void)dealloc;
-(void)wtloginPlatformDataInit;
-(id)init;
-(BOOL)tryDecrypt:(id)decrypt byKey:(id)key andOutData:(id)data;
-(id)getDeviceVersion;
-(int)writeGuidToPasteBoard:(id)pasteBoard;
-(int)readGuidArrayFromPasteBoard:(id)pasteBoard;
-(void)genGuid;
-(id)macaddress;
-(void)GetHWAddresses;
-(void)GetIPAddresses;
-(void)FreeAddresses;
-(void)InitAddresses;
@end

@interface Wl_Reachability : NSObject {
	BOOL localWiFiRef;
	SCNetworkReachabilityRef reachabilityRef;
}
+(id)reachabilityForLocalWiFi;
+(id)reachabilityForInternetConnection;
+(id)reachabilityWithAddress:(const sockaddr_in*)address;
+(id)reachabilityWithHostName:(id)hostName;
-(int)currentReachabilityStatus;
-(BOOL)connectionRequired;
-(int)networkStatusForFlags:(unsigned)flags;
-(int)localWiFiStatusForFlags:(unsigned)flags;
-(void)dealloc;
-(void)stopNotifier;
-(BOOL)startNotifier;
@end

@interface SingleItemWrapper : NSObject {
	NSMutableDictionary* keychainItemData;
	NSMutableDictionary* genericPasswordQuery;
}
@property(retain) NSMutableDictionary* genericPasswordQuery;
@property(retain) NSMutableDictionary* keychainItemData;
-(void)writeToKeychain;
-(id)secItemFormatToDictionary:(id)dictionary;
-(id)dictionaryToSecItemFormat:(id)secItemFormat;
-(void)resetKeychainItem;
-(id)objectForKey:(id)key;
-(BOOL)setObject:(id)object forKey:(id)key;
-(void)dealloc;
-(id)initWithIdentifier:(id)identifier accessGroup:(id)group;
@end

@interface SafeSingleItemWrapper : NSObject {
	SingleItemWrapper* wapper;
	NSMutableDictionary* wapperDict;
	NSString* filePath;
}
-(void)dealloc;
-(void)resetSafeKeychainItem;
-(id)keyChainStoreForKey:(id)key;
-(id)fileStoreForKey:(id)key;
-(BOOL)setFileStoreObject:(id)object forKey:(id)key;
-(id)initSafeWithIdentifier:(id)identifier accessGroup:(id)group;
-(id)dataSafeFilePathWithName:(id)name;
@end

@interface MemSig : NSObject <NSCoding> {
	NSString* sigName;
	unsigned dwAppid;
	NSData* sig;
	NSData* sigKey;
}
@property(assign, nonatomic) unsigned dwAppid;
@property(copy, nonatomic) NSString* sigName;
@property(retain, nonatomic) NSData* sigKey;
@property(retain, nonatomic) NSData* sig;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)dealloc;
-(id)description;
@end

@interface MemSigManager : NSObject <NSCoding> {
	NSMutableDictionary* sigDict;
}
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)printSig;
-(id)sigByName:(id)name;
-(void)addSig:(id)sig;
-(void)dealloc;
-(id)init;
@end

@interface MemAppidSig : NSObject <NSCoding> {
	unsigned dwAppid;
	unsigned dwPriority;
	unsigned dwTime;
	unsigned dwExpTime;
	MemSigManager* memSigManager;
}
@property(assign, nonatomic) unsigned dwExpTime;
@property(assign, nonatomic) unsigned dwTime;
@property(assign, nonatomic) unsigned dwPriority;
@property(assign, nonatomic) unsigned dwAppid;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)printAppidSig;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(id)appidSigByName:(id)name;
-(void)addAppidSig:(id)sig;
-(void)dealloc;
-(id)init;
@end

@interface MemAppidSigManager : NSObject <NSCoding> {
	NSMutableDictionary* appidSigDic;
}
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(void)printAppidSigAll;
-(unsigned)topPriorityAppid;
-(unsigned)sigTimeByAppid:(unsigned)appid;
-(unsigned)expireTimeByAppid:(unsigned)appid andAppExpTime:(unsigned)time;
-(void)setMemPriority:(unsigned)priority andTime:(unsigned)time byAppid:(unsigned)appid;
-(void)removeMemSigByAppid:(unsigned)appid;
-(id)memSigByAppid:(unsigned)appid andName:(id)name;
-(void)setMemSig:(id)sig;
-(void)dealloc;
-(id)init;
@end

@interface MemUserAppidSig : NSObject <NSCoding> {
	WloginUserInfo* userInfo;
	MemAppidSigManager* userSigList;
}
@property(readonly, assign, nonatomic) WloginUserInfo* userInfo;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(int)decodeUserPwdSigData:(id)data andSigAppId:(unsigned)anId byKey:(id)key outPwdSig:(id)sig;
-(BOOL)encodeUserPwdSig:(id)sig byKey:(id)key outDataBuff:(id)buff;
-(void)printUserAndSig;
-(unsigned)topPriorityAppid;
-(unsigned)userUin;
-(void)setUserUin:(unsigned)uin;
-(BOOL)hasExpireBySigType:(unsigned)type andAppid:(unsigned)appid;
-(BOOL)hasExpireByAppid:(unsigned)appid andAppExpTime:(unsigned)time;
-(void)setPriority:(unsigned)priority andTime:(unsigned)time byAppid:(unsigned)appid;
-(void)setSig:(id)sig;
-(void)removeSigByAppid:(unsigned)appid;
-(id)sigByAppid:(unsigned)appid andSigName:(id)name;
-(void)dealloc;
-(id)initWithBasicInfo:(unsigned)basicInfo andPubNo:(unsigned)no andClientType:(unsigned)type;
@end

@interface WloginUserInfo : NSObject <NSCoding> {
	unsigned dwUserUin;
	NSString* sUserMainAccount;
	unsigned short wFaceId;
	unsigned char cAge;
	unsigned char cGender;
	NSString* sNickName;
}
@property(retain) NSString* sNickName;
@property(assign) unsigned char cGender;
@property(assign) unsigned char cAge;
@property(assign) unsigned short wFaceId;
@property(retain) NSString* sUserMainAccount;
@property(assign) unsigned dwUserUin;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
-(id)userinfo;
-(id)description;
@end

@interface WloginTlv_0x11b : WloginTlv {
	unsigned char cCapPicCtrl;
}
@property(assign, nonatomic) unsigned char cCapPicCtrl;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x168 : WloginTlv {
	NSArray* guidArray;
}
@property(retain) NSArray* guidArray;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x148 : WloginTlv {
	NSString* sAppName;
	unsigned dwSSOVer;
	unsigned dwAppId;
	unsigned dwSubAppId;
	NSString* sAppVer;
	NSString* sAppSig;
}
@property(copy) NSString* sAppSig;
@property(copy) NSString* sAppVer;
@property(assign) unsigned dwSubAppId;
@property(assign) unsigned dwAppId;
@property(assign) unsigned dwSSOVer;
@property(copy) NSString* sAppName;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x153 : WloginTlv {
	unsigned short wIsRoot;
}
@property(assign) unsigned short wIsRoot;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x165 : WloginTlv {
	NSMutableDictionary* picWordings;
}
@property(readonly, assign) NSMutableDictionary* picWordings;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface WloginTlv_0x166 : WloginTlv {
	unsigned char cImgType;
}
@property(assign) unsigned char cImgType;
-(void)dealloc;
-(int)encode:(id)encode;
@end

@interface WloginTlv_0x167 : WloginTlv {
	unsigned char cImgType;
	unsigned char cImgFormat;
	NSString* sImgUrl;
}
@property(assign) unsigned char cImgType;
@property(assign) unsigned char cImgFormat;
@property(copy) NSString* sImgUrl;
-(void)dealloc;
-(int)decode:(char**)decode andBuffLen:(int*)len;
@end

@interface ClassMethodDispatchCenter : MMService <MMService> {
	NSDictionary* m_dictClsMethodObservers;
	NSDictionary* m_dictClsMethodKeyObservers;
}
-(id)getClsMethodKeyObserver:(id)observer withKey:(id)key;
-(id)getClsMethodObservers:(id)observers selector:(SEL)selector;
-(void)unregisterClsMethodKeyObserver:(Class)observer onProtocol:(id)protocol withKey:(id)key;
-(void)unregisterClsMethodObserver:(Class)observer onProtocol:(id)protocol;
-(void)registerClsMethodKeyObserver:(Class)observer onProtocol:(id)protocol withKey:(id)key;
-(void)registerClsMethodObserver:(Class)observer onProtocol:(id)protocol;
-(void)addObserver:(Class)observer toDict:(id)dict methods:(objc_method_description*)methods methodCnt:(unsigned)cnt;
-(void)initRegister;
-(void)dealloc;
-(void)onServiceInit;
@end

@interface MMExtensionObject : NSObject {
	id m_Obj;
	BOOL m_deleteMark;
}
@property(assign, nonatomic) BOOL m_deleteMark;
-(id)description;
-(id)initWithObject:(id)object;
-(BOOL)isObjectEqual:(id)equal;
-(id)getObject;
-(void)setObject:(id)object;
@end

@interface MMExtensionDictionary : NSObject {
	NSMutableDictionary* m_dic;
	BOOL m_needCleanUp;
}
-(void)cleanUp;
-(id)getKeyExtensionList:(id)list;
-(BOOL)unregisterKeyExtension:(id)extension;
-(BOOL)unregisterExtension:(id)extension forKey:(id)key;
-(BOOL)registerExtension:(id)extension forKey:(id)key;
-(void)dealloc;
-(id)init;
@end

@interface MMExtension : NSObject {
	Protocol* m_extKey;
	unsigned m_methodCount;
	objc_method_description* m_methods;
	MMExtensionDictionary* m_dicObserver;
	MMExtensionDictionary* m_dicKeyObserver;
}
-(id)description;
-(void)cleanUp;
-(id)getKeyExtensionList:(id)list;
-(id)getExtensionListForSelector:(SEL)selector;
-(void)unregisterKeyExtension:(id)extension;
-(void)unregisterExtension:(id)extension forKey:(id)key;
-(void)unregisterExtension:(id)extension;
-(BOOL)registerExtension:(id)extension forKey:(id)key;
-(BOOL)registerExtension:(id)extension;
-(void)dealloc;
-(id)initWithKey:(id)key;
@end

@interface MMExtensionCenter : MMService <MMService> {
	NSMutableDictionary* m_dicExtension;
}
-(void)cleanUp;
-(id)getExtension:(id)extension;
-(void)dealloc;
-(id)init;
@end

@interface LazyExtensionAgent : MMService <MMService> {
	NSMutableDictionary* m_dicExtensions;
}
-(void)ensureLazyListenerInitedForExtension:(id)extension withSelector:(SEL)selector;
-(void)registerLazyListener:(Class)listener onExtension:(id)extension;
-(void)addListener:(Class)listener toDic:(id)dic forMethods:(objc_method_description*)methods methodCount:(unsigned)count;
-(void)dealloc;
-(void)onServiceInit;
@end

@interface DeleagateProxyCatchUnImplementMethod : NSObject {
}
-(long long)catchUnImplementMethod;
@end

@interface MMWrapObjectId : NSObject {
	id m_objectId;
}
@property(assign, nonatomic) id m_objectId;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)getObjectId;
-(void)dealloc;
-(id)initWithObjectId:(id)objectId;
-(id)init;
@end

@interface MMDicDelegates : NSObject {
	id m_ownerId;
	BOOL m_ownerShouldBeNotify;
	NSMutableDictionary* m_dicDelegates;
}
-(void)clearOwner;
-(BOOL)clearOneDelegateInDic:(id)dic;
-(BOOL)setDelegateToDic:(id)dic;
-(id)getDelegateFromDic:(id)dic withProtocols:(id)protocols;
-(void)setOwnerId:(id)anId;
-(void)dealloc;
-(id)init;
@end

@interface MMDelegateCenter : MMService <MMService> {
	NSMutableDictionary* m_dicOwnerMapDelegate;
	NSMutableDictionary* m_dicDelegateMapOwner;
	DeleagateProxyCatchUnImplementMethod* m_catchUnimplementMethodObj;
	NSMethodSignature* m_unImplementMethodSignature;
}
+(id)generateProtocolArray:(id)array;
+(id)generateProtocolsKey:(id)key;
+(id)generateDelegateKey:(id)key withProtocols:(id)protocols;
+(id)generateDelegateKeyPrefix:(id)prefix;
+(id)generateDelegateIdKey:(id)key;
+(id)generateOwnerIdKey:(id)key;
+(BOOL)hasProtocol:(id)protocol theProtocol:(id)protocol2;
-(BOOL)onServiceMemoryWarning;
-(BOOL)checkObjectClass:(id)aClass;
-(BOOL)clearOwnersOnDelegateEx:(id)ex;
-(BOOL)wrapclearOwnersOnDelegate:(id)delegate;
-(BOOL)clearOwnersOnDelegate:(id)delegate;
-(BOOL)removeOneOwnerOndelegate:(id)ondelegate setOwners:(id)owners;
-(BOOL)unRegisterAllDelegateOnOwnerEx:(id)ex;
-(BOOL)wrapUnRegisterAllDelegateOnOwner:(id)owner;
-(BOOL)unRegisterAllDelegateOnOwner:(id)owner;
-(void)setOwnerOnDelegate:(id)delegate delegate:(id)delegate2;
-(id)setDelegateOnOwner:(id)owner delegate:(id)delegate protocols:(id)protocols;
-(id)getDelegateOnOwner:(id)owner delegateid:(id)delegateid protocols:(id)protocols;
-(id)registerDelegateOnOwner:(id)owner delegate:(id)delegate forProtocols:(id)protocols;
-(void)dealloc;
-(id)init;
-(id)m_dicDelegateMapOwner;
-(id)m_dicOwnerMapDelegate;
-(id)getCatchUmimplementMethodObj;
-(id)getUmimplementMethodSignature;
@end

@interface MMDelegateProxy : NSObject {
	NSObject* m_delegate;
	NSArray* m_arrProtocol;
}
@property(readonly, assign, nonatomic) NSArray* m_arrProtocol;
@property(readonly, assign, nonatomic) NSObject* m_delegate;
-(BOOL)respondsToSelector:(SEL)selector;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(id)forwardingTargetForSelector:(SEL)selector;
-(void)checkIllegalDelegate:(id)delegate;
-(id)description;
-(void)clearDelegateByDelegateCenter;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate forProtocols:(id)protocols;
@end

@interface MMObject : NSObject {
}
-(void)dealloc;
@end

@interface MMService : NSObject {
	BOOL m_isServiceRemoved;
	BOOL m_isServicePersistent;
}
@property(assign) BOOL m_isServicePersistent;
@property(assign) BOOL m_isServiceRemoved;
-(void)dealloc;
@end

@interface MMServiceCenter : NSObject {
	NSMutableDictionary* m_dicService;
	NSRecursiveLock* m_lock;
}
+(id)defaultCenter;
-(void)callClearData;
-(void)callReloadData;
-(void)callServiceMemoryWarning;
-(void)callTerminate;
-(void)callEnterBackground;
-(void)callEnterForeground;
-(void)removeService:(Class)service;
-(id)getService:(Class)service;
-(void)dealloc;
-(id)init;
@end

@interface CNetworkStatus : MMService <MMService> {
	unsigned long m_uiLastStatus;
	id<NetworkStatusDelegate> m_delNetworkStatus;
}
+(id)getCarrierName;
+(id)descriptionForNetType:(int)netType;
-(BOOL)isReachable;
-(int)getNetworkType;
-(BOOL)isOnWifi;
-(BOOL)isOnWWan;
-(void)ChangeReach;
-(void)Stop;
-(void)Start:(id)start;
-(void)PingReach;
-(void)dealloc;
-(id)init;
@end

@interface JKArray : NSMutableArray <NSCopying, NSMutableCopying, NSFastEnumeration> {
	id* objects;
	unsigned count;
	unsigned capacity;
	unsigned mutations;
}
+(id)allocWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)replaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(void)removeObjectAtIndex:(unsigned)index;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(id)objectAtIndex:(unsigned)index;
-(void)getObjects:(id*)objects range:(NSRange)range;
-(unsigned)count;
-(void)dealloc;
@end

@interface JKDictionaryEnumerator : NSEnumerator {
	id collection;
	unsigned nextObject;
}
-(id)nextObject;
-(id)allObjects;
-(void)dealloc;
-(id)initWithJKDictionary:(id)jkdictionary;
@end

@interface JKDictionary : NSMutableDictionary <NSCopying, NSMutableCopying, NSFastEnumeration> {
	unsigned count;
	unsigned capacity;
	unsigned mutations;
	JKHashTableEntry* entry;
}
+(id)allocWithZone:(NSZone*)zone;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)copyWithZone:(NSZone*)zone;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)keyEnumerator;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(void)getObjects:(id*)objects andKeys:(id*)keys;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)dealloc;
@end

@interface JSONDecoder : NSObject {
	JKParseState* parseState;
}
+(id)decoderWithParseOptions:(unsigned)parseOptions;
+(id)decoder;
-(id)mutableObjectWithData:(id)data error:(id*)error;
-(id)mutableObjectWithData:(id)data;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)mutableObjectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)objectWithData:(id)data error:(id*)error;
-(id)objectWithData:(id)data;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length error:(id*)error;
-(id)objectWithUTF8String:(const char*)utf8String length:(unsigned)length;
-(id)parseJSONData:(id)data error:(id*)error;
-(id)parseJSONData:(id)data;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length error:(id*)error;
-(id)parseUTF8String:(const char*)string length:(unsigned long)length;
-(void)clearCache;
-(void)dealloc;
-(id)initWithParseOptions:(unsigned)parseOptions;
-(id)init;
@end

@interface JKSerializer : NSObject {
	JKEncodeState* encodeState;
}
+(id)serializeObject:(id)object options:(unsigned)options encodeOption:(unsigned)option block:(id)block delegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(void)dealloc;
-(void)releaseState;
-(id)serializeObject:(id)object options:(unsigned)options encodeOption:(unsigned)option block:(id)block delegate:(id)delegate selector:(SEL)selector error:(id*)error;
@end

@interface SBJSON : SBJsonBase <SBJsonParser, SBJsonWriter> {
	SBJsonParser* jsonParser;
	SBJsonWriter* jsonWriter;
}
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
-(void)setMaxDepth:(unsigned)depth;
-(unsigned)maxDepth;
-(id)objectWithString:(id)string error:(id*)error;
-(id)fragmentWithString:(id)string error:(id*)error;
-(id)objectWithString:(id)string allowScalar:(BOOL)scalar error:(id*)error;
-(id)objectWithString:(id)string;
-(id)stringWithObject:(id)object error:(id*)error;
-(id)stringWithFragment:(id)fragment error:(id*)error;
-(id)stringWithObject:(id)object allowScalar:(BOOL)scalar error:(id*)error;
-(id)stringWithObject:(id)object;
-(void)dealloc;
-(id)init;
@end

@interface SBJsonBase : NSObject {
	NSMutableArray* errorTrace;
	unsigned depth;
	unsigned maxDepth;
}
@property(readonly, assign) NSArray* errorTrace;
@property(assign) unsigned maxDepth;
-(void)clearErrorTrace;
-(void)addErrorWithCode:(unsigned)code description:(id)description;
-(void)dealloc;
-(id)init;
@end

@interface SBJsonParser : SBJsonBase <SBJsonParser> {
	const char* c;
}
+(void)initialize;
-(BOOL)scanIsAtEnd;
-(BOOL)scanNumber:(id*)number;
-(BOOL)scanHexQuad:(unsigned short*)quad;
-(BOOL)scanUnicodeChar:(unsigned short*)aChar;
-(BOOL)scanRestOfString:(id*)string;
-(BOOL)scanRestOfDictionary:(id*)dictionary;
-(BOOL)scanRestOfArray:(id*)array;
-(BOOL)scanRestOfNull:(id*)null;
-(BOOL)scanRestOfFalse:(id*)aFalse;
-(BOOL)scanRestOfTrue:(id*)aTrue;
-(BOOL)scanValue:(id*)value;
-(id)objectWithString:(id)string;
-(id)fragmentWithString:(id)string;
@end

@interface SBJsonWriter : SBJsonBase <SBJsonWriter> {
	BOOL sortKeys;
	BOOL humanReadable;
}
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
+(void)initialize;
-(BOOL)appendString:(id)string into:(id)into;
-(BOOL)appendDictionary:(id)dictionary into:(id)into;
-(BOOL)appendArray:(id)array into:(id)into;
-(BOOL)appendValue:(id)value into:(id)into;
-(id)indent;
-(id)stringWithObject:(id)object;
-(id)stringWithFragment:(id)fragment;
@end

@interface CAESCrypt : NSObject {
}
+(id)AESECBDecryptWithKey:(id)key Data:(id)data Final:(BOOL)final;
+(id)AESECBEncryptWithKey:(id)key Data:(id)data Final:(BOOL)final;
+(id)AESDecryptWithKey:(id)key Data:(id)data;
+(id)AESEncryptWithKey:(id)key Data:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface BaseCoreObject : NSObject {
	NSDictionary* _dictionary;
}
-(id)valueArray:(id)array withSubObjectClass:(Class)subObjectClass;
-(unsigned long)valueUInt32:(id)a32;
-(id)valueString:(id)string;
-(void)dealloc;
-(id)initWithDictionary:(id)dictionary;
@end

@interface BaseXmlObject : BaseCoreObject {
	NSString* _xmlString;
}
-(id)xmlString;
-(void)dealloc;
-(id)initWithXml:(id)xml withRootKey:(id)rootKey;
-(id)initWithXml:(id)xml;
-(void)initData:(id)data;
-(id)XmlNode2Dictionary:(XmlReaderNode_t*)dictionary;
@end

@interface ConfigureReader : NSObject {
}
+(id)parseConfigure:(id)configure;
@end

@interface MTimeSpan : NSObject {
	NSDate* m_beginDate;
	NSDate* m_endDate;
}
@property(retain, nonatomic) NSDate* m_endDate;
@property(retain, nonatomic) NSDate* m_beginDate;
+(id)timeSpanOfMonthInDate:(id)date;
+(id)timeSpanOfWeekInDate:(id)date;
+(id)timeSpanOfThisMonth;
+(id)timeSpanOfThisWeek;
+(id)timeSpanOfToday;
+(id)timeSpanOfIntDate:(unsigned long)intDate;
+(id)timeSpanOfDate:(id)date;
-(unsigned long)endInIntDate;
-(unsigned long)beginInIntDate;
-(id)end;
-(id)begin;
-(id)description;
-(void)dealloc;
-(id)init;
@end

@interface FastStrUtil : NSObject {
}
+(unsigned long)decodeToInteger:(XmlReaderNode_t*)integer attribute:(const char*)attribute;
+(unsigned long)decodeToInteger:(XmlReaderNode_t*)integer key:(const char*)key;
+(id)decodeToString:(XmlReaderNode_t*)string key:(const char*)key;
+(BOOL)code:(CFastStr*)code key:(const char*)key integer:(unsigned long)integer;
+(BOOL)code:(CFastStr*)code key:(const char*)key string:(id)string;
@end

@interface FileQueue : NSObject {
	NSString* m_nsFilePath;
	int m_codingMethod;
	Class m_elementClass;
}
-(BOOL)clear;
-(id)getAll;
-(BOOL)pop;
-(id)getTop;
-(BOOL)modifyTop:(id)top;
-(BOOL)push:(id)push;
-(BOOL)syncToFile;
-(void)setUnArchiveResult:(id)result;
-(id)getArchiveTarget;
-(void)dealloc;
-(BOOL)upgradeFromNSCoding:(id)nscoding;
-(id)initWithPBCodingFilePath:(id)pbcodingFilePath withElementClass:(Class)elementClass;
-(id)initWithNSCodingFilePath:(id)nscodingFilePath;
@end

@interface FIFOFileQueue : FileQueue {
	NSMutableArray* m_arrItems;
}
-(id)description;
-(BOOL)clear;
-(id)getAll;
-(id)getTop;
-(BOOL)modifyTop:(id)top;
-(BOOL)pop;
-(BOOL)push:(id)push;
-(void)setUnArchiveResult:(id)result;
-(id)getArchiveTarget;
-(void)dealloc;
@end

@interface FILOFileQueue : FileQueue {
	NSMutableArray* m_arrItems;
}
-(BOOL)clear;
-(id)getAll;
-(id)getTop;
-(BOOL)modifyTop:(id)top;
-(BOOL)pop;
-(BOOL)push:(id)push;
-(void)setUnArchiveResult:(id)result;
-(id)getArchiveTarget;
-(void)dealloc;
@end

@interface MMCharacterSet : NSObject {
}
+(int)detectWritingDirection:(id)direction;
+(id)getHebrewUnicodeCharSet;
+(id)getArabicUnicodeCharSet;
@end

@interface MMDelayExecuter : NSObject {
	MMTimeChecker* m_timeCheck;
	id m_target;
	SEL m_seletor;
}
-(id)init;
-(void)dealloc;
-(id)debugDescription;
-(void)stopDelayExecute;
-(void)doDelayWork;
-(BOOL)delayExecuteOnceOnTarget:(id)target selector:(SEL)selector afterDelay:(double)delay;
@end

@interface MMRegexUtil : NSObject {
}
+(BOOL)isChinaBankPhoneNumber:(id)number;
+(BOOL)isChinaBankCvvCode:(id)code;
+(BOOL)isChinaBankCardNumber:(id)number;
+(BOOL)isChinaIDNumber:(id)number;
@end

@interface MMTimeChecker : NSObject {
	NSTimer* m_timer;
	id m_target;
	SEL m_seletor;
}
-(void)dealloc;
-(void)timeCheck;
-(void)stopTimeCheck;
-(void)startTimeCheckWithInterval:(double)interval target:(id)target selector:(SEL)selector;
@end

@interface CMMVector : NSObject {
	vector<id, std::allocator<id> > m_vecObject;
}
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)dealloc;
-(id)at:(unsigned long)at;
-(unsigned long)count;
-(void)removeAllObjects;
-(BOOL)containsObject:(id)object;
-(BOOL)removeObject:(id)object;
-(void)addObject:(id)object;
-(id)init;
@end

@interface MZipUtil : NSObject {
}
+(id)_dateFor1980;
+(BOOL)UnZipFile:(id)file toPath:(id)path overwrite:(BOOL)overwrite password:(id)password error:(id*)error;
+(BOOL)UnZipFile:(id)file toPath:(id)path;
+(id)getFileNameFromZipFile:(id)zipFile;
@end

@interface ObjcRuntimeUtil : NSObject {
}
+(id)getCallerMethod;
+(vector<objc_method_description, std::allocator<objc_method_description> >)getAllMethodOfProtocol:(id)protocol;
+(BOOL)isClass:(Class)aClass inheritsFromClass:(Class)aClass2;
@end

@interface OrderedDictionary : NSMutableDictionary {
	NSMutableDictionary* dictionary;
	NSMutableArray* array;
}
-(void)setObjectAsLastObject:(id)object forKey:(id)key;
-(id)descriptionWithLocale:(id)locale indent:(unsigned)indent;
-(id)lastKey;
-(id)keyAtIndex:(unsigned)index;
-(void)insertObject:(id)object forKey:(id)key atIndex:(unsigned)index;
-(id)reverseKeyEnumerator;
-(id)keyEnumerator;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)copy;
-(void)dealloc;
-(id)initWithCapacity:(unsigned)capacity;
-(id)init;
@end

@interface RandomString : NSObject {
}
+(id)genRandomStringFixSize:(unsigned long)size;
+(id)genRandomStringMaxSize:(unsigned long)size;
+(void)initialize;
@end

@interface RKLLowMemoryWarningObserver : NSObject {
}
+(void)lowMemoryWarning:(id)warning;
@end

@interface RKLBlockEnumerationHelper : NSObject {
	struct {
		CFStringRef regexString;
		unsigned regexHash;
		unsigned options;
		uregex* icu_regex;
		int captureCount;
		CFStringRef setToString;
		unsigned setToHash;
		int setToLength;
		unsigned setToIsImmutable : 1;
		unsigned setToNeedsConversion : 1;
		unsigned short* setToUniChar;
		NSRange setToRange;
		NSRange lastFindRange;
		NSRange lastMatchRange;
		CGPoint* buffer;
	} cachedRegex;
	struct {
		CFStringRef string;
		unsigned hash;
		int length;
		unsigned short* uniChar;
	} buffer;
	void* scratchBuffer[5];
	unsigned needToFreeBufferUniChar : 1;
}
-(void)dealloc;
-(id)initWithRegex:(id)regex options:(unsigned)options string:(id)string range:(NSRange)range error:(id*)error;
@end

@interface ZipArchive : NSObject {
	void* _zipFile;
	void* _unzFile;
	NSString* _password;
	id _delegate;
}
@property(retain, nonatomic) id delegate;
-(id)Date1980;
-(BOOL)OverWrite:(id)write;
-(void)OutputErrorMessage:(id)message;
-(BOOL)UnzipCloseFile;
-(BOOL)UnzipFileTo:(id)to overWrite:(BOOL)write;
-(BOOL)UnzipOpenFile:(id)file Password:(id)password;
-(BOOL)UnzipOpenFile:(id)file;
-(BOOL)CloseZipFile2;
-(BOOL)addFileToZip:(id)zip newname:(id)newname;
-(BOOL)addSingleFileToZip:(id)zip fileNameInZip:(id)zip2;
-(BOOL)CreateZipFile2:(id)a2 Password:(id)password;
-(BOOL)CreateZipFile2:(id)a2;
-(void)dealloc;
-(id)init;
@end

@interface CBaseFile : NSObject {
	NSFileHandle* m_fhFile;
	NSString* m_nsFilePath;
	unsigned long m_uiMode;
	BOOL m_bOpen;
}
@property(retain, nonatomic) NSFileHandle* m_fhFile;
@property(retain, nonatomic) NSString* m_nsFilePath;
+(id)GetFileCreateTime:(id)time;
+(BOOL)SysAppendData:(id)data toPath:(id)path;
+(BOOL)SysOverWriteDataToPath:(id)path Data:(id)data;
+(BOOL)OverWriteDataToPath:(id)path Data:(id)data;
+(BOOL)AppendData:(id)data toPath:(id)path;
+(BOOL)WriteDataToPath:(id)path Offset:(unsigned long)offset Data:(id)data;
+(id)LoadDataFromPathEx:(id)pathEx Offset:(unsigned long)offset MaxLen:(unsigned long)len;
+(id)LoadDataFromPath:(id)path Offset:(unsigned long)offset Len:(unsigned long)len;
+(BOOL)CreateSymbolLink:(id)link LinkName:(id)name;
+(void)ClearPath:(id)path WithOut:(id)anOut;
+(void)ClearPath:(id)path;
+(long long)GetFileSize:(id)size;
+(BOOL)RemoveFile:(id)file;
+(BOOL)LoadSubFolders:(id)folders SubFiles:(id)files fromFolderPath:(const char*)folderPath;
+(id)SubFilesName:(const char*)name;
+(id)SubFoldersName:(const char*)name;
+(long long)FolderSizeAtPath:(const char*)path;
+(long long)GetFiLeSize:(id)size;
+(long)GetFiLeModifyTime:(id)time;
+(BOOL)FileExist:(id)exist;
+(BOOL)CopyFile:(id)file To:(id)to;
+(BOOL)RenameFile:(id)file To:(id)to;
+(void)EnsureCreateParentDir:(id)dir;
+(BOOL)CreatePath:(id)path;
+(BOOL)CreateFile:(id)file;
-(BOOL)WriteLargeData:(id)data;
-(BOOL)WriteData:(id)data;
-(BOOL)ReadData:(id)data Len:(unsigned long)len;
-(unsigned long long)SeekToEndOfFile;
-(BOOL)Seek:(long long)seek;
-(BOOL)SetFileSize:(long long)size;
-(void)Close;
-(BOOL)Open;
-(BOOL)IsOpen;
-(BOOL)SetFileInfo:(id)info Mode:(unsigned long)mode;
-(void)dealloc;
-(id)init;
@end

@interface CBaseDB : MMDatabase {
	sqlite3* m_dbHandle;
	NSString* m_nsDBPath;
	NSRecursiveLock* m_oLock;
	NSMutableSet* m_stringColType;
	NSMutableSet* m_uintColType;
	NSMutableSet* m_byteColType;
	NSMutableSet* m_uint64ColType;
}
@property(retain, nonatomic) NSRecursiveLock* m_oLock;
@property(retain, nonatomic) NSString* m_nsDBPath;
+(BOOL)RebuildDB:(id)db SqlFile:(id)file;
+(BOOL)RecoverDB:(id)db SqlFile:(id)file;
-(BOOL)GetMultiRowInMultiTable_For_ContactDB:(id)multiTable_For_ContactDB Con:(id)con QryCol:(id)col RetResult:(id)result Limit:(unsigned long)limit;
-(BOOL)GetMultiRowInMultiTableEx:(id)multiTableEx Con:(id)con QryCol:(id)col RetResult:(id)result Limit:(unsigned long)limit specialTypeCol:(id)col6;
-(BOOL)GetMultiRowInMultiTable:(id)multiTable Con:(id)con QryCol:(id)col RetResult:(id)result Limit:(unsigned long)limit;
-(void)DumpTableName:(basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*)name TableName:(id)name2;
-(void)DumpColNameWithTableName:(basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*)tableName Col:(id)col;
-(void)ShowMasterTable;
-(void)DumpByteValue:(sqlite3_stmt*)value ColValue:(id)value2;
-(void)DumpColUpdateValue:(basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*)value ColValue:(id)value2;
-(void)DumpColValue:(basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*)value ColValue:(id)value2;
-(void)DumpColName:(basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*)name Col:(id)col;
-(void)RegisterColName:(id)name ofType:(unsigned long)type;
-(unsigned long)TypeOfCol:(id)col;
-(BOOL)DropTable:(id)table;
-(unsigned long)GetMaxInTable:(id)table Col:(id)col Where:(id)where;
-(unsigned long)GetMaxInTable:(id)table Col:(id)col;
-(unsigned long)GetCountInTable:(id)table Con:(id)con;
-(unsigned long)GetCountDistinctInTable:(id)table Con:(id)con Col:(id)col;
-(BOOL)DelRowInTable:(id)table Con:(id)con;
-(BOOL)GetMultiRowInTableNewEx:(id)tableNewEx GroupBy:(id)by Con:(id)con Order:(id)order QryCol:(id)col RetResult:(id)result Limit:(unsigned long)limit;
-(BOOL)GetMultiRowInTableNew:(id)tableNew Con:(id)con QryCol:(id)col RetResult:(id)result Limit:(unsigned long)limit;
-(BOOL)GetMultiRowInTableEx:(id)tableEx GroupBy:(id)by Con:(id)con Order:(id)order QryCol:(id)col RetArr:(id)arr Limit:(unsigned long)limit;
-(BOOL)GetMultiRowInTable:(id)table Con:(id)con QryCol:(id)col RetArr:(id)arr Limit:(unsigned long)limit;
-(BOOL)GetColValueInTable:(id)table Con:(id)con QryCol:(id)col RetCol:(id)col4 Limit:(unsigned long)limit;
-(BOOL)InsertOrUpdateRowInTable:(id)table ColValue:(id)value;
-(BOOL)SetColValueInTable:(id)table Con:(id)con ColValue:(id)value;
-(BOOL)InsertNewRowInTable:(id)table ColValue:(id)value;
-(BOOL)RollBackTransation;
-(BOOL)CommitTransation;
-(BOOL)BeginTransation;
-(void)Close;
-(BOOL)Open:(id)open;
-(void)dealloc;
-(id)init;
@end

@interface MMStatement : NSObject {
	sqlite3_stmt* statement;
	NSString* query;
	long useCount;
}
@property(assign) sqlite3_stmt* statement;
@property(retain) NSString* query;
@property(assign) long useCount;
-(id)description;
-(void)reset;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

@interface MMDatabase : NSObject {
	sqlite3* db;
	NSString* databasePath;
	BOOL logsErrors;
	BOOL crashOnErrors;
	BOOL inUse;
	BOOL inTransaction;
	BOOL traceExecution;
	BOOL checkedOut;
	int busyRetryTimeout;
	BOOL shouldCacheStatements;
	NSMutableDictionary* cachedStatements;
	NSMutableSet* openResultSets;
}
@property(retain) NSMutableDictionary* cachedStatements;
@property(assign) BOOL logsErrors;
@property(assign) BOOL crashOnErrors;
@property(assign) int busyRetryTimeout;
@property(assign) BOOL checkedOut;
@property(assign) BOOL traceExecution;
@property(assign) BOOL inTransaction;
+(BOOL)isThreadSafe;
+(id)sqliteLibVersion;
+(id)databaseWithPath:(id)path;
-(BOOL)tableExists:(id)exists;
-(id)dateForQuery:(id)query;
-(id)dataForQuery:(id)query;
-(double)doubleForQuery:(id)query;
-(BOOL)boolForQuery:(id)query;
-(long)longForQuery:(id)query;
-(int)intForQuery:(id)query;
-(id)stringForQuery:(id)query;
-(void)setShouldCacheStatements:(BOOL)cacheStatements;
-(BOOL)shouldCacheStatements;
-(void)setInUse:(BOOL)use;
-(BOOL)inUse;
-(BOOL)beginTransaction;
-(BOOL)beginDeferredTransaction;
-(BOOL)commit;
-(BOOL)rollback;
-(BOOL)update:(id)update error:(id*)error bind:(id)bind;
-(BOOL)executeUpdateWithFormat:(id)format;
-(BOOL)executeUpdate:(id)update withArgumentsInArray:(id)array;
-(BOOL)executeUpdate:(id)update;
-(BOOL)executeUpdate:(id)update error:(id*)error withArgumentsInArray:(id)array orVAList:(void*)list;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array;
-(id)executeQueryWithFormat:(id)format;
-(id)executeQuery:(id)query;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array orVAList:(void*)list;
-(void)_extractSQL:(id)sql argumentsList:(void*)list intoString:(id)string arguments:(id)arguments;
-(void)bindObject:(id)object toColumn:(int)column inStatement:(sqlite3_stmt*)statement;
-(int)changes;
-(long long)lastInsertRowId;
-(int)lastErrorCode;
-(BOOL)hadError;
-(id)lastErrorMessage;
-(BOOL)databaseExists;
-(void)warnInUse;
-(BOOL)goodConnection;
-(BOOL)setKey:(id)key;
-(BOOL)rekey:(id)rekey;
-(void)setCachedStatement:(id)statement forQuery:(id)query;
-(id)cachedStatementForQuery:(id)query;
-(void)resultSetDidClose:(id)resultSet;
-(void)closeOpenResultSets;
-(void)clearCachedStatements;
-(BOOL)close;
-(BOOL)openWithFlags:(int)flags;
-(BOOL)open;
-(sqlite3*)sqliteHandle;
-(id)databasePath;
-(void)dealloc;
-(void)finalize;
-(void)attachToDB:(sqlite3*)db withPath:(id)path;
-(id)initWithPath:(id)path;
@end

@interface CMMDBResultNew : NSObject {
	NSMutableDictionary* m_dicResult;
	NSMutableArray* m_arrRef;
}
-(BOOL)CheckValid;
-(unsigned)GetRowCount;
-(unsigned)GetColCount;
-(id)GetColValueInRow:(unsigned)row inCol:(unsigned)col;
-(id)GetColValue:(unsigned)value col:(id)col;
-(BOOL)SaveValueToCol:(id)col ColIndex:(unsigned)index;
-(void)dealloc;
-(void)SetSizeAndAlloc:(unsigned)alloc arrCol:(id)col;
-(id)init;
@end

@interface MMResultSet : NSObject {
	MMDatabase* parentDB;
	MMStatement* statement;
	NSString* query;
	NSMutableDictionary* columnNameToIndexMap;
	BOOL columnNamesSetup;
}
@property(retain) MMStatement* statement;
@property(retain) NSMutableDictionary* columnNameToIndexMap;
@property(retain) NSString* query;
+(id)resultSetWithStatement:(id)statement usingParentDatabase:(id)database;
-(void)setParentDB:(id)db;
-(id)columnNameForIndex:(int)index;
-(id)objectForColumnName:(id)columnName;
-(id)objectForColumnIndex:(int)columnIndex;
-(const char*)UTF8StringForColumnName:(id)columnName;
-(const char*)UTF8StringForColumnIndex:(int)columnIndex;
-(BOOL)columnIsNull:(id)null;
-(BOOL)columnIndexIsNull:(int)null;
-(id)dataNoCopyForColumnIndex:(int)columnIndex;
-(id)dataNoCopyForColumn:(id)column;
-(id)dataForColumnIndex:(int)columnIndex;
-(id)dataForColumn:(id)column;
-(id)dateForColumnIndex:(int)columnIndex;
-(id)dateForColumn:(id)column;
-(id)stringForColumn:(id)column;
-(id)stringForColumnIndex:(int)columnIndex;
-(double)doubleForColumnIndex:(int)columnIndex;
-(double)doubleForColumn:(id)column;
-(BOOL)boolForColumnIndex:(int)columnIndex;
-(BOOL)boolForColumn:(id)column;
-(long long)longLongIntForColumnIndex:(int)columnIndex;
-(long long)longLongIntForColumn:(id)column;
-(long)longForColumnIndex:(int)columnIndex;
-(long)longForColumn:(id)column;
-(int)intForColumnIndex:(int)columnIndex;
-(int)intForColumn:(id)column;
-(int)columnIndexForName:(id)name;
-(BOOL)hasAnotherRow;
-(BOOL)next;
-(id)resultDict;
-(void)kvcMagic:(id)magic;
-(void)setupColumnNames;
-(int)columnCount;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

@interface MMGlobalLogTime : NSObject {
	NSMutableDictionary* m_dic;
	NSMutableDictionary* m_dicProc;
}
+(id)sharedMMGlobalLogTime;
-(void)end:(id)end;
-(void)needreport:(id)needreport withEventId:(unsigned long)eventId;
-(void)start:(id)start withStep:(const char*)step;
-(void)dealloc;
-(id)init;
@end

@interface MMCommonLog : NSObject {
}
+(void)debugWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt;
+(void)infoWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt;
+(void)warnWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt;
+(void)errorWithModule:(const char*)module file:(const char*)file line:(int)line func:(const char*)func fmt:(id)fmt;
@end

@interface PBCoderPropertyType : NSObject {
	unsigned long m_index;
	int m_cType;
	Class m_cls;
	Class m_subCls;
	SEL m_getter;
	SEL m_setter;
	id m_blockGet;
	id m_blockSet;
	BOOL m_isSuperPlaceHolder;
}
@property(assign, nonatomic) BOOL m_isSuperPlaceHolder;
@property(retain, nonatomic) id m_blockSet;
@property(retain, nonatomic) id m_blockGet;
@property(readonly, assign, nonatomic) SEL m_setter;
@property(readonly, assign, nonatomic) SEL m_getter;
@property(readonly, assign, nonatomic) Class m_subCls;
@property(readonly, assign, nonatomic) Class m_cls;
@property(readonly, assign, nonatomic) int m_cType;
@property(assign, nonatomic) unsigned long m_index;
-(void)dealloc;
-(id)initWithCType:(int)ctype index:(unsigned long)index getter:(SEL)getter setter:(SEL)setter blockGet:(id)get blockSet:(id)set;
-(id)initWithClass:(Class)aClass subClass:(Class)aClass2 index:(unsigned long)index getter:(SEL)getter setter:(SEL)setter blockGet:(id)get blockSet:(id)set;
@end

@interface PBCoder : NSObject {
	id<PBCoding> m_obj;
	BOOL m_isTopObject;
	NSData* m_inputData;
	CodedInputData* m_inputStream;
	NSNumberFormatter* m_numberFormatter;
	NSMutableData* m_outputData;
	PBCodedOutputStream* m_outputStream;
	vector<PBEncodeItem, std::allocator<PBEncodeItem> >* m_encodeItems;
}
+(bool)appendDictionary:(id)dictionary toData:(id)data;
+(bool)appendSet:(id)set toData:(id)data;
+(bool)appendArray:(id)array toData:(id)data;
+(bool)appendOneDictionaryValue:(id)value forKey:(id)key toData:(id)data;
+(bool)appendOneSetValue:(id)value toData:(id)data;
+(bool)appendOneArrayValue:(id)value toData:(id)data;
+(bool)appendDictionary:(id)dictionary toFile:(id)file;
+(bool)appendSet:(id)set toFile:(id)file;
+(bool)appendArray:(id)array toFile:(id)file;
+(bool)appendOneDictionaryValue:(id)value forKey:(id)key toFile:(id)file;
+(bool)appendOneSetValue:(id)value toFile:(id)file;
+(bool)appendOneArrayValue:(id)value toFile:(id)file;
+(long long)getFiLeSize:(id)size;
+(bool)appendData:(id)data toPath:(id)path;
+(id)decodeContainerOfClass:(Class)aClass withValueClass:(Class)valueClass fromData:(id)data;
+(id)decodeContainerOfClass:(Class)aClass withValueClass:(Class)valueClass fromFile:(id)file;
+(bool)decodeObject:(id)object fromData:(id)data;
+(bool)decodeObject:(id)object fromFile:(id)file;
+(id)decodeObjectOfClass:(Class)aClass fromData:(id)data;
+(id)decodeObjectOfClass:(Class)aClass fromFile:(id)file;
+(bool)encodeObject:(id)object toFile:(id)file;
+(id)encodeDataWithSizeForObject:(id)object;
+(id)encodeDataWithObject:(id)object;
-(id)decodeOneObject:(id)object ofClass:(Class)aClass;
-(void)decodeObject:(id)object withProperty:(id)property andTagIndexMap:(const map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long> > >*)map;
-(void)decodeOneProperty:(id)property ofObject:(id)object;
-(void)decodeOne_C_Property:(id)property ofObject:(id)object;
-(id)decodeOneDictionaryOfValueClass:(Class)valueClass ignoreSize:(bool)size;
-(id)decodeOneSetOfValueClass:(Class)valueClass ignoreSize:(bool)size;
-(id)decodeOneArrayOfValueClass:(Class)valueClass ignoreSize:(bool)size;
-(id)getEncodeDataWithForceWriteSize:(bool)forceWriteSize;
-(unsigned long)prepareObjectForEncode:(id)encode;
-(unsigned long)preparePBObjectForEncode:(id)encode withPropertyTable:(id)propertyTable;
-(unsigned long)prepareBasicObjectForEncode:(id)encode;
-(unsigned long)prepareCPropertyForEndcode:(id)endcode withTarget:(id)target;
-(void)writeRootObject;
-(void)dealloc;
-(id)initForWritingWithTarget:(id)target;
-(id)initForReadingWithData:(id)data;
@end

@interface PBAbstractMessage : NSObject <PBMessage> {
}
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(id)builder;
-(id)unknownFields;
-(id)defaultInstance;
-(void)writeToOutputStream:(id)outputStream;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(int)serializedSize;
-(id)serializedData;
-(id)init;
@end

@interface PBAbstractMessage_Builder : NSObject <PBMessage_Builder> {
}
-(id)setUnknownFields:(id)fields;
-(id)unknownFields;
-(id)defaultInstance;
-(BOOL)isInitialized;
-(id)buildPartial;
-(id)build;
-(id)mergeFromData:(id)data;
-(id)mergeUnknownFields:(id)fields;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
@end

@interface PBCodedInputStream : NSObject {
	NSData* buffer;
	char* bufferPointer;
	int bufferSize;
	int bufferSizeAfterLimit;
	int bufferPos;
	int lastTag;
	int totalBytesRetired;
	int currentLimit;
	int recursionDepth;
	int recursionLimit;
	int sizeLimit;
}
@property(retain) NSData* buffer;
+(id)streamWithData:(id)data;
-(void)skipRawData:(int)data;
-(id)readRawData:(int)data;
-(BOOL)readRawByte;
-(BOOL)isAtEnd;
-(int)bytesUntilLimit;
-(void)popLimit:(int)limit;
-(void)recomputeBufferSizeAfterLimit;
-(int)pushLimit:(int)limit;
-(int)setSizeLimit:(int)limit;
-(long long)readRawLittleEndian64;
-(int)readRawLittleEndian32;
-(long long)readRawVarint64;
-(int)readRawVarint32;
-(long long)readSInt64;
-(int)readSInt32;
-(long long)readSFixed64;
-(int)readSFixed32;
-(int)readEnum;
-(int)readUInt32;
-(id)readData;
-(void)readMessage:(id)message;
-(void)readUnknownGroup:(int)group builder:(id)builder;
-(void)readGroup:(int)group builder:(id)builder;
-(id)readString;
-(BOOL)readBool;
-(int)readFixed32;
-(long long)readFixed64;
-(int)readInt32;
-(long long)readInt64;
-(long long)readUInt64;
-(float)readFloat;
-(double)readDouble;
-(void)skipMessage;
-(BOOL)skipField:(int)field;
-(void)checkLastTagWas:(int)was;
-(int)readTag;
-(id)initWithData:(id)data;
-(void)commonInit;
-(void)dealloc;
@end

@interface PBCodedOutputStream : NSObject {
	NSMutableData* buffer;
	char* bufferPointer;
	int position;
}
@property(assign) int position;
@property(retain) NSMutableData* buffer;
+(id)streamWithData:(id)data;
-(void)writeRawLittleEndian64:(long long)a64;
-(void)writeRawLittleEndian32:(int)a32;
-(void)writeRawVarint64:(long long)a64;
-(void)writeRawVarint32:(int)a32;
-(void)writeTag:(int)tag format:(int)format;
-(void)writeRawData:(id)data offset:(int)offset length:(int)length;
-(void)writeRawData:(id)data;
-(void)writeRawByte:(unsigned char)byte;
-(void)checkNoSpaceLeft;
-(int)spaceLeft;
-(void)writeRawMessageSetExtension:(int)extension value:(id)value;
-(void)writeMessageSetExtension:(int)extension value:(id)value;
-(void)writeSInt64:(int)a64 value:(long long)value;
-(void)writeSInt64NoTag:(long long)tag;
-(void)writeSInt32:(int)a32 value:(int)value;
-(void)writeSInt32NoTag:(int)tag;
-(void)writeSFixed64:(int)a64 value:(long long)value;
-(void)writeSFixed64NoTag:(long long)tag;
-(void)writeSFixed32:(int)a32 value:(int)value;
-(void)writeSFixed32NoTag:(int)tag;
-(void)writeEnum:(int)anEnum value:(int)value;
-(void)writeEnumNoTag:(int)tag;
-(void)writeUInt32:(int)a32 value:(int)value;
-(void)writeUInt32NoTag:(int)tag;
-(void)writeData:(int)data value:(id)value;
-(void)writeDataNoTag:(id)tag;
-(void)writeMessage:(int)message value:(id)value;
-(void)writeMessageNoTag:(id)tag;
-(void)writeUnknownGroup:(int)group value:(id)value;
-(void)writeUnknownGroupNoTag:(int)tag value:(id)value;
-(void)writeGroup:(int)group value:(id)value;
-(void)writeGroupNoTag:(int)tag value:(id)value;
-(void)writeString:(int)string value:(id)value;
-(void)writeStringNoTag:(id)tag withSize:(unsigned)size;
-(void)writeStringNoTag:(id)tag;
-(void)writeBool:(int)aBool value:(BOOL)value;
-(void)writeBoolNoTag:(BOOL)tag;
-(void)writeFixed32:(int)a32 value:(int)value;
-(void)writeFixed32NoTag:(int)tag;
-(void)writeFixed64:(int)a64 value:(long long)value;
-(void)writeFixed64NoTag:(long long)tag;
-(void)writeInt32:(int)a32 value:(int)value;
-(void)writeInt32NoTag:(int)tag;
-(void)writeInt64:(int)a64 value:(long long)value;
-(void)writeInt64NoTag:(long long)tag;
-(void)writeUInt64:(int)a64 value:(long long)value;
-(void)writeUInt64NoTag:(long long)tag;
-(void)writeFloat:(int)aFloat value:(float)value;
-(void)writeFloatNoTag:(float)tag;
-(void)writeDouble:(int)aDouble value:(double)value;
-(void)writeDoubleNoTag:(double)tag;
-(id)initWithOutputData:(id)outputData;
-(void)dealloc;
@end

@interface PBExtensionRegistry : NSObject {
	NSDictionary* classMap;
}
@property(retain) NSDictionary* classMap;
+(id)emptyRegistry;
+(void)initialize;
@end

@interface PBField : NSObject {
	NSMutableArray* mutableVarintList;
	NSMutableArray* mutableFixed32List;
	NSMutableArray* mutableFixed64List;
	NSMutableArray* mutableLengthDelimitedList;
	NSMutableArray* mutableGroupList;
}
@property(retain) NSMutableArray* mutableGroupList;
@property(retain) NSMutableArray* mutableLengthDelimitedList;
@property(retain) NSMutableArray* mutableFixed64List;
@property(retain) NSMutableArray* mutableFixed32List;
@property(retain) NSMutableArray* mutableVarintList;
+(id)defaultInstance;
+(void)initialize;
-(int)getSerializedSizeAsMessageSetExtension:(int)extension;
-(void)writeAsMessageSetExtensionTo:(int)to output:(id)output;
-(int)getSerializedSize:(int)size;
-(void)writeTo:(int)to output:(id)output;
-(id)groupList;
-(id)lengthDelimitedList;
-(id)fixed64List;
-(id)fixed32List;
-(id)varintList;
-(void)dealloc;
@end

@interface PBGeneratedMessage : PBAbstractMessage {
	PBUnknownFieldSet* unknownFields;
}
@property(retain) PBUnknownFieldSet* unknownFields;
-(unsigned long)continueFlag;
-(id)SetBaseRequest:(id)request;
-(BOOL)parseUnknownField:(id)field unknownFields:(id)fields tag:(int)tag;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(id)mergeFromData:(id)data;
-(id)init;
-(void)dealloc;
@end

@interface PBGeneratedMessage_Builder : PBAbstractMessage_Builder {
}
-(BOOL)parseUnknownField:(id)field unknownFields:(id)fields tag:(int)tag;
-(id)mergeUnknownFields:(id)fields;
-(id)setUnknownFields:(id)fields;
-(id)unknownFields;
-(id)internalGetResult;
@end

@interface PBMutableField : PBField {
}
+(id)field;
-(id)addGroup:(id)group;
-(id)addLengthDelimited:(id)delimited;
-(id)addFixed64:(long long)a64;
-(id)addFixed32:(int)a32;
-(id)addVarint:(long long)varint;
-(id)mergeFromField:(id)field;
-(id)clear;
-(id)init;
-(void)dealloc;
@end

@interface PBTextFormat : NSObject {
}
+(id)unescapeBytes:(id)bytes;
+(long long)parseUInt64:(id)a64;
+(long long)parseInt64:(id)a64;
+(int)parseUInt32:(id)a32;
+(int)parseInt32:(id)a32;
+(long long)parseInteger:(id)integer isSigned:(BOOL)aSigned isLong:(BOOL)aLong;
@end

@interface PBUnknownFieldSet : NSObject {
	NSDictionary* fields;
}
@property(retain) NSDictionary* fields;
+(id)builderWithUnknownFields:(id)unknownFields;
+(id)builder;
+(id)parseFromInputStream:(id)inputStream;
+(id)parseFromData:(id)data;
+(id)parseFromCodedInputStream:(id)codedInputStream;
+(id)setWithFields:(id)fields;
+(id)defaultInstance;
+(void)initialize;
-(id)serializedData;
-(int)serializedSizeAsMessageSet;
-(void)writeAsMessageSetTo:(id)to;
-(int)serializedSize;
-(void)writeToOutputStream:(id)outputStream;
-(void)writeToCodedOutputStream:(id)codedOutputStream;
-(id)getField:(int)field;
-(BOOL)hasField:(int)field;
-(id)initWithFields:(id)fields;
-(void)dealloc;
@end

@interface PBUnknownFieldSet_Builder : NSObject {
	NSMutableDictionary* fields;
	int lastFieldNumber;
	PBMutableField* lastField;
}
@property(retain) PBMutableField* lastField;
@property(assign) int lastFieldNumber;
@property(retain) NSMutableDictionary* fields;
+(id)newBuilder:(id)builder;
-(id)clear;
-(id)mergeFromCodedInputStream:(id)codedInputStream;
-(BOOL)mergeFieldFrom:(int)from input:(id)input;
-(id)mergeVarintField:(int)field value:(int)value;
-(id)mergeFromInputStream:(id)inputStream;
-(id)mergeFromData:(id)data;
-(id)mergeUnknownFields:(id)fields;
-(id)mergeField:(id)field forNumber:(int)number;
-(BOOL)hasField:(int)field;
-(id)build;
-(id)getFieldBuilder:(int)builder;
-(id)addField:(id)field forNumber:(int)number;
-(id)init;
-(void)dealloc;
@end

@interface CommonUtility : NSObject {
}
+(id)GetRootPathOfTrash;
+(id)GetRandomPathOfTrash;
+(unsigned long long)genCurrentTimeInMs;
+(id)GetTmpPath;
+(id)SafeUnarchive:(id)unarchive;
@end

@interface MMGifView : UIView {
	GifItem* m_refData;
	UIImageView* m_imageView;
	CGSize m_size;
}
@property(assign, nonatomic) CGSize m_size;
@property(retain, nonatomic) UIImageView* m_imageView;
@property(assign, nonatomic) GifItem* m_refData;
-(id).cxx_construct;
-(void)dealloc;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface GifItem : NSObject {
	MMGifView* view;
	MxGifImage* image;
	NSData* data;
	int lastID;
	unsigned long lastTick;
	NSString* cachePath;
	int filter;
	bool updated;
	NSMutableArray* imgCache;
}
@property(retain, nonatomic) NSMutableArray* imgCache;
@property(assign, nonatomic) bool updated;
@property(assign, nonatomic) int filter;
@property(retain, nonatomic) NSString* cachePath;
@property(assign, nonatomic) unsigned long lastTick;
@property(assign, nonatomic) int lastID;
@property(retain, nonatomic) NSData* data;
@property(assign, nonatomic) MxGifImage* image;
@property(assign, nonatomic) MMGifView* view;
-(void)dealloc;
-(id)init;
-(void)addToImgCache:(id)imgCache;
@end

@interface MMGifViewMgr : NSObject {
	NSMutableArray* m_gifs;
	NSTimer* m_timer;
	unsigned long m_tickCount;
	NSMutableArray* m_updateQueue;
	unsigned long m_emptyRoundTripCount;
}
@property(retain, nonatomic) NSMutableArray* m_updateQueue;
@property(retain, nonatomic) NSTimer* m_timer;
@property(retain, nonatomic) NSMutableArray* m_gifs;
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedMMGifViewMgr;
+(void)initialize;
-(void)onApplicationDidReceiveMemoryWarning:(id)onApplication;
-(void)onApplicationDidBecomeActive:(id)onApplication;
-(void)onApplicationWillResignActive:(id)onApplication;
-(void)onApplicationWillTerminate:(id)onApplication;
-(void)refreshGifViewUpdater:(id)updater;
-(void)unregisterGifViewForUpdate:(id)update;
-(id)findGifItemByView:(id)view;
-(id)createGifViewFromFile:(id)file;
-(id)createGifViewFromData:(id)data;
-(id)createGifViewFromData:(id)data withFilter:(int)filter;
-(void)stopUpdateGifViews;
-(void)startUpdateGifViews;
-(void)updateAllGifItem;
-(id)imageForGifItem:(id)gifItem;
-(unsigned long)getTickCount;
-(unsigned)countOfGifItem;
-(void)removeGifItem:(id)item;
-(void)addGifItem:(id)item;
-(void)removeFromUpdateQueue:(id)updateQueue;
-(void)addToUpdateQueue:(id)updateQueue;
-(unsigned)countOfUpdateQueue;
-(void)dealloc;
-(id)init;
-(void)UnRegisterSysNotifications;
-(void)RegisterSysNotifications;
@end

@interface QQPimEngineLoginModel : NSObject {
	TccLoginUtil* _tccLoginUtil;
	NSString* _uin;
	NSString* _sid;
	BOOL _isMobileAccount;
	id<QQPimEngineLoginModelDelegate> _delegate;
	NSURLConnection* _urlConnection;
	NSMutableData* _connectionReceieveData;
	int _currentOperationType;
}
@property(assign, nonatomic) int currentOperationType;
@property(retain, nonatomic) NSMutableData* connectionReceieveData;
@property(retain, nonatomic) NSURLConnection* urlConnection;
@property(assign, nonatomic) BOOL isMobileAccount;
@property(copy, nonatomic) NSString* sid;
@property(copy, nonatomic) NSString* uin;
@property(assign, nonatomic) id<QQPimEngineLoginModelDelegate> delegate;
-(void)notificationOnMainThreadMobileVerifyFailedWithReason:(id)reason;
-(void)notificationOnMainThreadMobileVerifySuccess;
-(void)notificationOnMainThreadMobileRegisterFailedWithReason:(id)reason;
-(void)notificationOnMainThreadMobileRegisterSuccess;
-(void)notificationOnMainThreadLoginNeedPimPassword;
-(void)notificationOnMainThreadLoginNeedVerifyWithURL:(id)url;
-(void)notificationOnMainThreadLoginFailedWithReason:(id)reason;
-(void)notificationOnMainThreadLoginSuccess;
-(void)solveVerifyMobileAccountResponse;
-(void)solveRegisterMobileAccountResponse;
-(void)solveMobileLoginResponse;
-(void)solveTccLoginResponse;
-(void)solveLoginResponse;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)loginWithMobileAccount:(id)mobileAccount password:(id)password verifyCode:(id)code pimPassword:(id)password4;
-(void)loginWithQQAccount:(id)qqaccount password:(id)password verifyCode:(id)code pimPassword:(id)password4;
-(void)verifyMobileAccountWithPhoneNumber:(id)phoneNumber withVerifyCode:(id)verifyCode;
-(void)registerMobileAccountWithPhoneNumber:(id)phoneNumber withPassword:(id)password;
-(void)loginWithAccount:(id)account password:(id)password verifyCode:(id)code pimPassword:(id)password4 isMobileAccount:(BOOL)account5;
-(void)dealloc;
-(id)init;
@end

@interface QQPimEngineConfigUtil : NSObject {
	NSString* lc;
	NSString* tccLoginServerURL;
	NSString* imei;
	NSString* mobileLoginServerURL;
	NSString* productName;
	int cryptMode;
	int majorVersionCode;
	int minorVersionCode;
	int buildVersionCode;
	NSString* _udid;
}
@property(copy, nonatomic) NSString* udid;
@property(assign, nonatomic) int buildVersionCode;
@property(assign, nonatomic) int minorVersionCode;
@property(assign, nonatomic) int majorVersionCode;
@property(readonly, assign, nonatomic) NSString* feedbackURL;
@property(assign, nonatomic) int cryptMode;
@property(copy, nonatomic) NSString* productName;
@property(copy, nonatomic) NSString* mobileLoginServerURL;
@property(copy, nonatomic) NSString* imei;
@property(copy, nonatomic) NSString* tccLoginServerURL;
@property(copy, nonatomic) NSString* lc;
+(id)macAddressWithSockAddr:(sockaddr_dl*)sockAddr;
+(id)deviceModel;
+(id)bytes2HexString:(id)string;
+(id)String2Md5:(id)a5;
+(id)udidWithWifiMacAddressAndDeviceModelMD5;
+(id)defaultConfigUtil;
-(int)TCCHTTPCryptMode;
-(id)mapPathForUIN:(id)uin withSyncType:(int)syncType;
-(id)saveDirection;
-(void)dealloc;
-(id)init;
@end

@interface QQPimEngineSyncModel : NSObject <SyncObserverDelegate> {
	TccRemoteSync* _tccSyncEngine;
	TccSyncDbAdapter* _tccSyncDBImpl;
	SyncObserver* _tccSyncObserver;
	NSString* _uin;
	NSString* _sid;
	int _syncType;
	int _syncMode;
	BOOL _isSyncing;
	id<QQPimEngineSyncModelDelegate> _delegate;
	QQPimEngineSyncStatics* _syncStatics;
	NSCondition* _mapLock;
	BOOL _isNetworkInterrupt;
}
@property(assign, nonatomic) BOOL isNetworkInterrupt;
@property(retain, nonatomic) NSCondition* mapLock;
@property(retain, nonatomic) QQPimEngineSyncStatics* syncStatics;
@property(assign) BOOL isSyncing;
@property(assign, nonatomic) int syncMode;
@property(assign, nonatomic) int syncType;
@property(copy, nonatomic) NSString* sid;
@property(copy, nonatomic) NSString* uin;
@property(assign, nonatomic) id<QQPimEngineSyncModelDelegate> delegate;
-(void)notificationSyncFailedOnMainThread:(id)thread;
-(void)notificationSyncSuccessOnMainThread;
-(void)notificationSyncInterrupOnMainThread;
-(void)notificationNewProgressOnMainThread:(id)thread;
-(void)notificationSyncBeginOnMainThread;
-(void)syncObserverNewProgress:(int)progress;
-(void)syncObserverSvrFailWithCount:(int)count;
-(void)syncObserverSvrDelWithCount:(int)count;
-(void)syncObserverSvrMdfWithCount:(int)count;
-(void)syncObserverSvrAddWithCount:(int)count;
-(void)syncObserverCltFailWithCount:(int)count;
-(void)syncObserverCltDelWithCount:(int)count;
-(void)syncObserverCltMdfWithCount:(int)count;
-(void)syncObserverCltAddWithCount:(int)count;
-(void)syncOnNewThread;
-(void)SyncEnd;
-(void)SyncDo;
-(BOOL)SyncInit;
-(void)giveupLastSyncOfNetworkFailed;
-(void)retryLastSyncOfNetworkFailed;
-(void)startPimEngineWithSyncMode:(int)syncMode;
-(void)dealloc;
-(id)init;
@end

@interface QQPimEngineSyncStatics : NSObject {
	int clientAdd;
	int clientMdf;
	int clientDel;
	int clientFail;
	int serverAdd;
	int serverMdf;
	int serverDel;
	int serverFail;
	int serverAll;
	int networkFlux;
}
@property(assign, nonatomic) int networkFlux;
@property(assign, nonatomic) int serverAll;
@property(assign, nonatomic) int serverFail;
@property(assign, nonatomic) int serverDel;
@property(assign, nonatomic) int serverMdf;
@property(assign, nonatomic) int serverAdd;
@property(assign, nonatomic) int clientFail;
@property(assign, nonatomic) int clientDel;
@property(assign, nonatomic) int clientMdf;
@property(assign, nonatomic) int clientAdd;
-(id)description;
-(void)reset;
-(id)init;
@end

@interface MapFileSyncUtil : NSObject {
}
+(int)parseMapFileSyncUploadResponseWithData:(id)data;
+(id)parseMapFileSyncDownloadResponseWithData:(id)data;
+(id)requestDataForMapFileSyncWithUserName:(id)userName withLoginKey:(id)loginKey withFileName:(id)fileName withFileData:(id)fileData withMode:(int)mode;
@end

@interface MobileLoginUtil : NSObject {
}
+(id)parseLoginKeyResponseWithData:(id)data;
+(id)requestDataForMobileLoginWithMobileNumber:(id)mobileNumber withPassword:(id)password;
+(int)parseMobileVerifyResponseWithData:(id)data;
+(id)requestDataForMobileVerifyWithMobileNumber:(id)mobileNumber withVerifyCode:(id)verifyCode;
+(int)parseMobileRegisterResponseWithData:(id)data;
+(id)requestDataForMobileRegisterWithMobileNumber:(id)mobileNumber withPassword:(id)password;
+(id)postRequestWithData:(id)data;
+(id)decodeResponseData:(id)data;
@end

@interface QQPimEngineQueryUtilModel : NSObject {
	TccRemoteSyncCheckUtil* _remoteCheckUtil;
	NSString* _uin;
	NSString* _sid;
	id<QQPimEngineQueryUtilModelDelegate> _delegate;
	NSURLConnection* _urlConnection;
	NSMutableData* _connectionReceieveData;
	NSCondition* _conditionLock;
}
@property(retain, nonatomic) NSCondition* conditionLock;
@property(retain, nonatomic) NSMutableData* connectionReceieveData;
@property(retain, nonatomic) NSURLConnection* urlConnection;
@property(copy, nonatomic) NSString* sid;
@property(copy, nonatomic) NSString* uin;
@property(assign, nonatomic) id<QQPimEngineQueryUtilModelDelegate> delegate;
-(void)notificationOnMainThreadServerQueryFailed;
-(void)notificationOnMainThreadServerQuerySuccessWithResult:(id)result;
-(void)notificationOnMainThreadLocalQuerySuccessWithResult:(id)result;
-(void)solveLoalCheckUtil;
-(void)solveRemoteCheckUtilPacket;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)startQueryLocalTotalCount;
-(void)startQueryServerTotalCount;
-(void)dealloc;
-(id)init;
@end

@interface QQPimEngineLogRecorder : NSObject {
	SQLiter* db;
}
+(id)allocWithZone:(NSZone*)zone;
+(id)sharedInstance;
-(id)autorelease;
-(void)release;
-(unsigned)retainCount;
-(id)retain;
-(id)copyWithZone:(NSZone*)zone;
-(void)dealloc;
-(BOOL)checkUINRestoreBefore:(id)before;
-(BOOL)checkUINBackupBefore:(id)before;
-(BOOL)deleteAllRecordOnUIN:(id)uin;
-(BOOL)deleteRecordOnUIN:(id)uin date:(id)date;
-(BOOL)addRecordOnUIN:(id)uin state:(int)state totalFlux:(int)flux addCount:(int)count deleteCount:(int)count5 modifyCount:(int)count6 faildCount:(int)count7;
-(id)getAllRecordOnUIN:(id)uin;
-(id)init;
@end

@interface SQLiter : NSObject {
	int busyRetryTimeout;
	NSString* filePath;
	sqlite3* _db;
}
@property(readonly, assign) NSString* filePath;
@property(assign) int busyRetryTimeout;
+(id)version;
+(id)createUuid;
-(id)columnName:(sqlite3_stmt*)name columnIndex:(int)index;
-(id)columnData:(sqlite3_stmt*)data columnIndex:(int)index;
-(BOOL)hasData:(sqlite3_stmt*)data;
-(void)bindObject:(id)object toColumn:(int)column inStatament:(sqlite3_stmt*)statament;
-(BOOL)executeStatament:(sqlite3_stmt*)statament;
-(BOOL)prepareSql:(id)sql inStatament:(sqlite3_stmt**)statament;
-(BOOL)beginDeferredTransaction;
-(BOOL)beginTransaction;
-(BOOL)rollback;
-(BOOL)commit;
-(BOOL)executeNonQuery:(id)query arguments:(id)arguments;
-(BOOL)executeNonQuery:(id)query;
-(id)executeQuery:(id)query arguments:(id)arguments;
-(id)executeQuery:(id)query;
-(id)errorMessage;
-(int)errorCode;
-(void)close;
-(BOOL)open:(id)open;
-(void)dealloc;
-(id)initWithFile:(id)file;
-(id)init;
@end

@interface QQPimEngine : NSObject <QQPimEngineLoginModelDelegate, QQPimEngineSyncModelDelegate, QQPimEngineQueryUtilModelDelegate> {
	id<QQPimEngineLoginDelegate> loginDelegate;
	id<QQPimEngineSyncDelegate> syncDelegate;
	id<QQPimEngineQueryUtilDelegate> queryUtilDelegate;
	int pimEngineSyncType;
	QQPimEngineLoginModel* loginModel;
	QQPimEngineSyncModel* syncModel;
	QQPimEngineQueryUtilModel* queryUtil;
	int pimEngineCallBackMode;
}
@property(retain, nonatomic) QQPimEngineQueryUtilModel* queryUtil;
@property(retain, nonatomic) QQPimEngineSyncModel* syncModel;
@property(retain, nonatomic) QQPimEngineLoginModel* loginModel;
@property(assign, nonatomic) int pimEngineSyncType;
@property(assign, nonatomic) int pimEngineCallBackMode;
@property(readonly, assign, nonatomic) NSString* wapPageURL;
@property(assign, nonatomic) id<QQPimEngineQueryUtilDelegate> queryUtilDelegate;
@property(assign, nonatomic) id<QQPimEngineSyncDelegate> syncDelegate;
@property(assign, nonatomic) id<QQPimEngineLoginDelegate> loginDelegate;
+(id)defaultPimEngine;
-(void)queryUtilTotalServerResultFailed:(id)failed;
-(void)queryUtil:(id)util totalServerResult:(id)result;
-(void)queryUtil:(id)util totalLocalResult:(id)result;
-(void)syncModelInterruptBecauseOfNetworkError:(id)networkError;
-(void)syncModelSyncFailed:(id)failed reason:(int)reason;
-(void)syncModelSyncSuccess:(id)success withStatics:(id)statics;
-(void)syncModelSyncProgressChanged:(id)changed currentProgress:(float)progress;
-(void)syncModelSyncBegin:(id)begin;
-(void)loginModelVerifyMobileAccountFailed:(id)failed withResultCode:(int)resultCode;
-(void)loginModelVerifyMobileAccountSuccess:(id)success;
-(void)loginModelRegisterMobileAccountFailed:(id)failed withResultCode:(int)resultCode;
-(void)loginModelRegisterMobileAccountSuccess:(id)success;
-(void)loginModelLoginFailed:(id)failed withResultCode:(int)resultCode;
-(void)loginModelLoginSuccess:(id)success;
-(void)loginModelNeedPimPassword:(id)password;
-(void)loginModelNeedVerifyCode:(id)code verifyCodeURL:(id)url;
-(void)startQueryLocalTotalCount;
-(void)startQueryServerTotalCount;
-(void)giveupLastSyncOfNetworkFailed;
-(void)retryLastSyncOfNetworkFailed;
-(void)startPimEngineWithSyncType:(int)syncType withMode:(int)mode;
-(void)verifyMobileAccountWithPhoneNumber:(id)phoneNumber withVerifyCode:(id)verifyCode;
-(void)registerMobileAccountWithPhoneNumber:(id)phoneNumber withPassword:(id)password;
-(void)loginPimEngineWithAccount:(id)account password:(id)password verifyCode:(id)code pimPassword:(id)password4 isMobileAccount:(BOOL)account5;
-(void)loginPimEngineWithAccount:(id)account password:(id)password verifyCode:(id)code pimPassword:(id)password4;
-(BOOL)cleanUpLocalAddressBookAndMapPath;
-(int)totalPersonCount;
-(int)lastSyncMode;
-(int)lastSyncType;
-(BOOL)isSyncing;
-(id)loginSID;
-(id)currentLogonAccount;
-(BOOL)isLogon;
-(BOOL)isSyncTypeSupport:(int)support;
-(void)dealloc;
-(id)init;
@end

@interface FBRequest : NSObject {
	id<FBRequestDelegate> _delegate;
	NSString* _url;
	NSURLConnection* _connection;
	NSMutableData* _responseText;
	unsigned _state;
	NSError* _error;
	BOOL _sessionDidExpire;
	id<FBGraphObject> _graphObject;
	NSMutableDictionary* _parameters;
	FBSession* _session;
	NSString* _graphPath;
	NSString* _restMethod;
	NSString* _HTTPMethod;
}
@property(retain, nonatomic) id<FBGraphObject> graphObject;
@property(copy, nonatomic) NSString* HTTPMethod;
@property(copy, nonatomic) NSString* restMethod;
@property(copy, nonatomic) NSString* graphPath;
@property(retain, nonatomic) FBSession* session;
@property(readonly, assign, nonatomic) NSMutableDictionary* parameters;
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) BOOL sessionDidExpire;
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) NSMutableData* responseText;
@property(retain, nonatomic) NSURLConnection* connection;
@property(retain, nonatomic) NSMutableDictionary* params;
@property(copy, nonatomic) NSString* httpMethod;
@property(copy, nonatomic) NSString* url;
@property(assign, nonatomic) id<FBRequestDelegate> delegate;
+(id)requestForPlacesSearchAtCoordinate:(XXStruct_zYrK5D)coordinate radiusInMeters:(int)meters resultsLimit:(int)limit searchText:(id)text;
+(id)requestWithGraphPath:(id)graphPath parameters:(id)parameters HTTPMethod:(id)method;
+(id)requestForPostStatusUpdate:(id)postStatusUpdate place:(id)place tags:(id)tags;
+(id)requestForPostStatusUpdate:(id)postStatusUpdate;
+(id)requestForPostWithGraphPath:(id)graphPath graphObject:(id)object;
+(id)requestForGraphPath:(id)graphPath;
+(id)requestForUploadPhoto:(id)uploadPhoto;
+(id)requestForMyFriends;
+(id)requestForMe;
+(id)serializeURL:(id)url params:(id)params httpMethod:(id)method;
+(id)serializeURL:(id)url params:(id)params;
-(id)startWithCompletionHandler:(id)completionHandler;
-(void)dealloc;
-(id)initWithSession:(id)session graphPath:(id)path parameters:(id)parameters HTTPMethod:(id)method;
-(id)initWithSession:(id)session restMethod:(id)method parameters:(id)parameters HTTPMethod:(id)method4;
-(id)initForPostWithSession:(id)session graphPath:(id)path graphObject:(id)object;
-(id)initWithSession:(id)session graphPath:(id)path;
-(id)init;
-(id)description;
-(BOOL)loading;
@end

@interface FBLoginDialog : FBDialog {
	id<FBLoginDialogDelegate> _loginDelegate;
}
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)dialogDidCancel:(id)dialog;
-(void)dialogDidSucceed:(id)dialog;
-(id)initWithURL:(id)url loginParams:(id)params delegate:(id)delegate;
@end

@interface FBDialog : UIView <UIWebViewDelegate> {
	id<FBDialogDelegate> _delegate;
	NSMutableDictionary* _params;
	NSString* _serverURL;
	NSURL* _loadingURL;
	UIWebView* _webView;
	UIActivityIndicatorView* _spinner;
	UIButton* _closeButton;
	int _orientation;
	BOOL _showingKeyboard;
	BOOL _isViewInvisible;
	FBFrictionlessRequestSettings* _frictionlessSettings;
	UIView* _modalBackgroundView;
}
@property(retain, nonatomic) NSMutableDictionary* params;
@property(assign, nonatomic) id<FBDialogDelegate> delegate;
-(void)dialogDidCancel:(id)dialog;
-(void)dialogDidSucceed:(id)dialog;
-(void)dialogWillDisappear;
-(void)dialogWillAppear;
-(void)dismissWithError:(id)error animated:(BOOL)animated;
-(void)dismissWithSuccess:(BOOL)success animated:(BOOL)animated;
-(void)show;
-(void)loadURL:(id)url get:(id)get;
-(void)load;
-(id)initWithURL:(id)url params:(id)params isViewInvisible:(BOOL)invisible frictionlessSettings:(id)settings delegate:(id)delegate;
-(id)getStringFromUrl:(id)url needle:(id)needle;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)deviceOrientationDidChange:(void*)deviceOrientation;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)hideSpinner;
-(void)showSpinner;
-(void)showWebView;
-(void)drawRect:(CGRect)rect;
-(void)dealloc;
-(id)init;
-(void)dialogSuccessHandleFrictionlessResponses:(id)responses;
-(BOOL)testBoolUrlParam:(id)param param:(id)param2;
-(void)cancel;
-(void)dismiss:(BOOL)dismiss;
-(void)postDismissCleanup;
-(void)removeObservers;
-(void)addObservers;
-(id)generateURL:(id)url params:(id)params;
-(void)bounce2AnimationStopped;
-(void)bounce1AnimationStopped;
-(void)updateWebOrientation;
-(void)sizeToFitOrientation:(BOOL)fitOrientation;
-(CGAffineTransform)transformForOrientation;
-(BOOL)shouldRotateToOrientation:(int)orientation;
-(void)strokeLines:(CGRect)lines stroke:(const float*)stroke;
-(void)drawRect:(CGRect)rect fill:(const float*)fill radius:(float)radius;
-(void)addRoundedRectToPath:(CGContextRef)path rect:(CGRect)rect radius:(float)radius;
@end

@interface FBSBJSON : FBSBJsonBase <FBSBJsonParser, FBSBJsonWriter> {
	FBSBJsonParser* jsonParser;
	FBSBJsonWriter* jsonWriter;
}
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
-(void)setMaxDepth:(unsigned)depth;
-(unsigned)maxDepth;
-(id)objectWithString:(id)string error:(id*)error;
-(id)fragmentWithString:(id)string error:(id*)error;
-(id)objectWithString:(id)string allowScalar:(BOOL)scalar error:(id*)error;
-(id)objectWithString:(id)string;
-(id)stringWithObject:(id)object error:(id*)error;
-(id)stringWithFragment:(id)fragment error:(id*)error;
-(id)stringWithObject:(id)object allowScalar:(BOOL)scalar error:(id*)error;
-(id)stringWithObject:(id)object;
-(void)dealloc;
-(id)init;
@end

@interface FBSBJsonBase : NSObject {
	NSMutableArray* errorTrace;
	unsigned depth;
	unsigned maxDepth;
}
@property(readonly, assign) NSArray* errorTrace;
@property(assign) unsigned maxDepth;
-(void)clearErrorTrace;
-(void)addErrorWithCode:(unsigned)code description:(id)description;
-(void)dealloc;
-(id)init;
@end

@interface FBSBJsonParser : FBSBJsonBase <FBSBJsonParser> {
	const char* c;
}
+(void)initialize;
-(BOOL)scanIsAtEnd;
-(BOOL)scanNumber:(id*)number;
-(BOOL)scanHexQuad:(unsigned short*)quad;
-(BOOL)scanUnicodeChar:(unsigned short*)aChar;
-(BOOL)scanRestOfString:(id*)string;
-(BOOL)scanRestOfDictionary:(id*)dictionary;
-(BOOL)scanRestOfArray:(id*)array;
-(BOOL)scanRestOfNull:(id*)null;
-(BOOL)scanRestOfFalse:(id*)aFalse;
-(BOOL)scanRestOfTrue:(id*)aTrue;
-(BOOL)scanValue:(id*)value;
-(id)objectWithString:(id)string;
-(id)fragmentWithString:(id)string;
@end

@interface FBSBJsonWriter : FBSBJsonBase <FBSBJsonWriter> {
	BOOL sortKeys;
	BOOL humanReadable;
}
@property(assign) BOOL sortKeys;
@property(assign) BOOL humanReadable;
+(void)initialize;
-(BOOL)appendString:(id)string into:(id)into;
-(BOOL)appendDictionary:(id)dictionary into:(id)into;
-(BOOL)appendArray:(id)array into:(id)into;
-(BOOL)appendValue:(id)value into:(id)into;
-(id)indent;
-(id)stringWithObject:(id)object;
-(id)stringWithFragment:(id)fragment;
@end

@interface FBProfilePictureView : UIView {
	NSString* _profileID;
	int _pictureCropping;
	FBURLConnection* _connection;
	UIImageView* _imageView;
	NSString* _previousImageQueryParamString;
}
@property(retain, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) FBURLConnection* connection;
@property(retain, nonatomic) NSString* previousImageQueryParamString;
@property(readonly, assign, nonatomic) NSString* imageQueryParamString;
@property(assign, nonatomic) int pictureCropping;
@property(copy, nonatomic) NSString* profileID;
-(void)layoutSubviews;
-(void)ensureImageViewContentMode;
-(void)refreshImage:(BOOL)image;
-(void)initialize;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithProfileID:(id)profileID pictureCropping:(int)cropping;
-(id)init;
-(void)dealloc;
@end

@interface FBRequestBody : NSObject {
	NSMutableData* _mutableData;
}
@property(readonly, assign, nonatomic) NSMutableData* mutableData;
@property(readonly, assign, nonatomic) NSData* data;
+(id)mimeContentType;
-(void)appendWithKey:(id)key dataValue:(id)value logger:(id)logger;
-(void)appendWithKey:(id)key imageValue:(id)value logger:(id)logger;
-(void)appendWithKey:(id)key formValue:(id)value logger:(id)logger;
-(void)appendRecordBoundary;
-(void)appendUTF8:(id)a8;
-(void)dealloc;
-(id)init;
@end

@interface FBRequestMetadata : NSObject {
	NSString* _batchEntryName;
	id _completionHandler;
	FBRequest* _request;
}
@property(copy, nonatomic) NSString* batchEntryName;
@property(copy, nonatomic) id completionHandler;
@property(retain, nonatomic) FBRequest* request;
-(id)description;
-(void)dealloc;
-(id)initWithRequest:(id)request completionHandler:(id)handler batchEntryName:(id)name;
@end

@interface FBRequestConnection : NSObject {
	FBURLConnection* _connection;
	NSMutableArray* _requests;
	int _state;
	double _timeout;
	NSMutableURLRequest* _internalUrlRequest;
	NSHTTPURLResponse* _urlResponse;
	FBRequest* _deprecatedRequest;
	FBLogger* _logger;
	unsigned long _requestStartTime;
	BOOL _isResultFromCache;
}
@property(readonly, assign, nonatomic) BOOL isResultFromCache;
@property(assign, nonatomic) unsigned long requestStartTime;
@property(retain, nonatomic) FBLogger* logger;
@property(retain, nonatomic) FBRequest* deprecatedRequest;
@property(retain, nonatomic) NSMutableURLRequest* internalUrlRequest;
@property(assign, nonatomic) double timeout;
@property(assign, nonatomic) int state;
@property(retain, nonatomic) NSMutableArray* requests;
@property(retain, nonatomic) FBURLConnection* connection;
@property(retain, nonatomic) NSHTTPURLResponse* urlResponse;
@property(retain, nonatomic) NSMutableURLRequest* urlRequest;
+(void)addRequestToExtendTokenForSession:(id)session connection:(id)connection;
+(id)userAgent;
+(void)processGraphObject:(id)object forPath:(id)path withAction:(id)action;
+(void)processGraphObjectPropertyKey:(id)key value:(id)value action:(id)action passByValue:(BOOL)value4;
+(id)startWithGraphPath:(id)graphPath parameters:(id)parameters HTTPMethod:(id)method completionHandler:(id)handler;
+(id)startForPostWithGraphPath:(id)graphPath graphObject:(id)object completionHandler:(id)handler;
+(id)startWithGraphPath:(id)graphPath completionHandler:(id)handler;
+(id)startForPlacesSearchAtCoordinate:(XXStruct_zYrK5D)coordinate radiusInMeters:(int)meters resultsLimit:(int)limit searchText:(id)text completionHandler:(id)handler;
+(id)startForPostStatusUpdate:(id)postStatusUpdate place:(id)place tags:(id)tags completionHandler:(id)handler;
+(id)startForPostStatusUpdate:(id)postStatusUpdate completionHandler:(id)handler;
+(id)startForUploadPhoto:(id)uploadPhoto completionHandler:(id)handler;
+(id)startForMyFriendsWithCompletionHandler:(id)completionHandler;
+(id)startForMeWithCompletionHandler:(id)completionHandler;
-(id)description;
-(void)addPiggybackRequests;
-(void)registerTokenToOmitFromLog:(id)log;
-(BOOL)isExpiredTokenError:(id)error resultIndex:(int)index;
-(BOOL)isPasswordChangeError:(id)error resultIndex:(int)index;
-(BOOL)isInvalidSessionError:(id)error resultIndex:(int)index;
-(BOOL)isInsufficientPermissionError:(id)error resultIndex:(int)index;
-(id)checkConnectionError:(id)error statusCode:(int)code parsedJSONResponse:(id)response;
-(id)errorWithCode:(int)code statusCode:(int)code2 parsedJSONResponse:(id)response innerError:(id)error message:(id)message;
-(id)errorFromResult:(id)result;
-(void)completeWithResults:(id)results orError:(id)error;
-(id)unpackIndividualJSONResponseError:(id)error;
-(void)completeDeprecatedWithData:(id)data results:(id)results orError:(id)error;
-(id)parseJSONOrOtherwise:(id)otherwise error:(id*)error;
-(id)parseJSONResponse:(id)response error:(id*)error statusCode:(int)code;
-(void)completeWithResponse:(id)response data:(id)data orError:(id)error;
-(void)appendAttachments:(id)attachments toBody:(id)body addFormData:(BOOL)data logger:(id)logger;
-(BOOL)isAttachment:(id)attachment;
-(void)addRequest:(id)request toBatch:(id)batch attachments:(id)attachments;
-(void)appendJSONRequests:(id)requests toBody:(id)body andNameAttachments:(id)attachments logger:(id)logger;
-(id)getBatchAppID:(id)anId;
-(id)urlStringForSingleRequest:(id)singleRequest forBatch:(BOOL)batch;
-(void)logRequest:(id)request bodyLength:(int)length bodyLogger:(id)logger attachmentLogger:(id)logger4;
-(id)requestWithBatch:(id)batch timeout:(double)timeout;
-(void)startWithCacheIdentity:(id)cacheIdentity skipRoundtripIfCached:(BOOL)cached;
-(void)cancel;
-(void)start;
-(void)addRequest:(id)request completionHandler:(id)handler batchEntryName:(id)name;
-(void)addRequest:(id)request completionHandler:(id)handler;
-(void)dealloc;
-(id)initWithTimeout:(double)timeout;
-(id)init;
@end

@interface FBURLConnection : NSObject {
	NSURLConnection* _connection;
	NSMutableData* _data;
	id _handler;
	unsigned _loggerSerialNumber;
	unsigned long _requestStartTime;
	NSURLResponse* _response;
	BOOL _skipRoundtripIfCached;
}
@property(assign, nonatomic) BOOL skipRoundtripIfCached;
@property(readonly, assign, nonatomic) unsigned loggerSerialNumber;
@property(assign, nonatomic) unsigned long requestStartTime;
@property(retain, nonatomic) NSURLResponse* response;
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) NSMutableData* data;
@property(retain, nonatomic) NSURLConnection* connection;
+(void)initialize;
-(BOOL)isCDNURL:(id)cdnurl;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)cancel;
-(void)dealloc;
-(void)invokeHandler:(id)handler error:(id)error response:(id)response responseData:(id)data;
-(id)initWithRequest:(id)request skipRoundTripIfCached:(BOOL)cached completionHandler:(id)handler;
-(id)initWithURL:(id)url completionHandler:(id)handler;
@end

@interface FBSession : NSObject <FBLoginDialogDelegate> {
	NSString* _urlSchemeSuffix;
	BOOL _isInStateTransition;
	int _loginTypeOfPendingOpenUrlCallback;
	int _defaultDefaultAudience;
	NSString* _appID;
	int _state;
	FBAccessTokenData* _accessTokenData;
	NSArray* _initializedPermissions;
	FBSessionTokenCachingStrategy* _tokenCachingStrategy;
	NSDate* _attemptedRefreshDate;
	FBLoginDialog* _loginDialog;
	NSThread* _affinitizedThread;
	id _loginHandler;
	id _reauthorizeHandler;
	NSArray* _reauthorizePermissions;
	int _lastRequestedSystemAudience;
	FBSessionInsightsState* _insightsState;
}
@property(retain) FBSessionInsightsState* insightsState;
@property(retain) NSThread* affinitizedThread;
@property(retain) FBLoginDialog* loginDialog;
@property(readonly, assign) NSString* appBaseUrl;
@property(copy) NSArray* reauthorizePermissions;
@property(copy) id reauthorizeHandler;
@property(copy) id loginHandler;
@property(copy) NSDate* attemptedRefreshDate;
@property(retain) FBSessionTokenCachingStrategy* tokenCachingStrategy;
@property(assign) int lastRequestedSystemAudience;
@property(copy) NSArray* initializedPermissions;
@property(copy) FBAccessTokenData* accessTokenData;
@property(readonly, assign) int loginType;
@property(readonly, assign) NSArray* permissions;
@property(readonly, assign) NSDate* expirationDate;
@property(readonly, assign) NSString* accessToken;
@property(copy) NSString* urlSchemeSuffix;
@property(copy) NSString* appID;
@property(assign) int state;
@property(readonly, assign) BOOL isOpen;
+(id)sessionStateDescription:(int)description;
+(void)deleteFacebookCookies;
+(BOOL)logIfFoundUnexpectedPermissions:(id)permissions isRead:(BOOL)read;
+(void)validateRequestForPermissions:(id)permissions defaultAudience:(int)audience allowSystemAccount:(BOOL)account isRead:(BOOL)read;
+(id)activeSessionIfOpen;
+(BOOL)openActiveSessionWithPermissions:(id)permissions allowLoginUI:(BOOL)ui allowSystemAccount:(BOOL)account isRead:(BOOL)read defaultAudience:(int)audience completionHandler:(id)handler;
+(BOOL)areRequiredPermissions:(id)permissions aSubsetOfPermissions:(id)permissions2;
+(BOOL)automaticallyNotifiesObserversForKey:(id)key;
+(void)renewSystemCredentials:(id)credentials;
+(id)defaultUrlSchemeSuffix;
+(void)setDefaultUrlSchemeSuffix:(id)suffix;
+(id)defaultAppID;
+(void)setDefaultAppID:(id)anId;
+(id)setActiveSession:(id)session;
+(id)activeSession;
+(BOOL)openActiveSessionWithPublishPermissions:(id)publishPermissions defaultAudience:(int)audience allowLoginUI:(BOOL)ui completionHandler:(id)handler;
+(BOOL)openActiveSessionWithReadPermissions:(id)readPermissions allowLoginUI:(BOOL)ui completionHandler:(id)handler;
+(BOOL)openActiveSessionWithPermissions:(id)permissions allowLoginUI:(BOOL)ui completionHandler:(id)handler;
+(BOOL)openActiveSessionWithAllowLoginUI:(BOOL)allowLoginUI;
-(id)description;
-(void)closeAndClearTokenInformation:(id)information;
-(id)errorLoginFailedWithReason:(id)reason errorCode:(id)code innerError:(id)error;
-(void)callReauthorizeHandlerAndClearState:(id)state;
-(void)transitionAndCallHandlerWithState:(int)state error:(id)error token:(id)token expirationDate:(id)date shouldCache:(BOOL)cache loginType:(int)type;
-(void)fbDialogNotLogin:(BOOL)login;
-(void)fbDialogLogin:(id)login expirationDate:(id)date;
-(void)checkThreadAffinity;
-(void)clearAffinitizedThread;
-(BOOL)shouldExtendAccessToken;
-(void)refreshAccessToken:(id)token expirationDate:(id)date;
-(void)completeReauthorizeWithAccessToken:(id)accessToken expirationDate:(id)date permissions:(id)permissions;
-(void)reauthorizeWithPermissions:(id)permissions isRead:(BOOL)read behavior:(int)behavior defaultAudience:(int)audience completionHandler:(id)handler;
-(BOOL)handleReauthorize:(id)reauthorize accessToken:(id)token;
-(BOOL)handleAuthorizationOpen:(id)open accessToken:(id)token loginType:(int)type;
-(void)authorizeUsingSystemAccountStore:(id)store defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize;
-(void)logIntegratedAuthInsights:(id)insights permissions:(id)permissions;
-(void)authorizeWithPermissions:(id)permissions defaultAudience:(int)audience integratedAuth:(BOOL)auth FBAppAuth:(BOOL)auth4 safariAuth:(BOOL)auth5 fallback:(BOOL)fallback isReauthorize:(BOOL)reauthorize;
-(void)authorizeWithPermissions:(id)permissions behavior:(int)behavior defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize;
-(BOOL)transitionToState:(int)state andUpdateToken:(id)token andExpirationDate:(id)date shouldCache:(BOOL)cache loginType:(int)type;
-(void)handleDidBecomeActive;
-(BOOL)openFromAccessTokenData:(id)accessTokenData completionHandler:(id)handler;
-(BOOL)handleOpenURL:(id)url;
-(BOOL)handleAuthorizationCallbacks:(id)callbacks params:(id)params loginType:(int)type;
-(void)closeAndClearTokenInformation;
-(void)close;
-(void)requestNewPublishPermissions:(id)permissions defaultAudience:(int)audience completionHandler:(id)handler;
-(void)requestNewReadPermissions:(id)permissions completionHandler:(id)handler;
-(void)reauthorizeWithPublishPermissions:(id)publishPermissions defaultAudience:(int)audience completionHandler:(id)handler;
-(void)reauthorizeWithReadPermissions:(id)readPermissions completionHandler:(id)handler;
-(void)reauthorizeWithPermissions:(id)permissions behavior:(int)behavior completionHandler:(id)handler;
-(void)openWithBehavior:(int)behavior completionHandler:(id)handler;
-(void)openWithCompletionHandler:(id)completionHandler;
-(id)refreshDate;
-(void)dealloc;
-(BOOL)initializeFromCachedToken:(id)cachedToken withPermissions:(id)permissions;
-(id)initWithAppID:(id)appID permissions:(id)permissions defaultAudience:(int)audience urlSchemeSuffix:(id)suffix tokenCacheStrategy:(id)strategy;
-(id)initWithAppID:(id)appID permissions:(id)permissions urlSchemeSuffix:(id)suffix tokenCacheStrategy:(id)strategy;
-(id)initWithPermissions:(id)permissions;
-(id)init;
@end

@interface FBSessionTokenCachingStrategyNoOpInstance : FBSessionTokenCachingStrategy {
}
-(void)clearToken;
-(id)fetchTokenInformation;
-(void)cacheTokenInformation:(id)information;
@end

@interface FBSessionTokenCachingStrategy : NSObject {
	NSString* _accessTokenInformationKeyName;
}
+(id)nullCacheInstance;
+(id)defaultInstance;
+(BOOL)isValidTokenInformation:(id)information;
-(id)fetchFBAccessTokenData;
-(void)cacheFBAccessTokenData:(id)data;
-(void)clearToken;
-(id)fetchTokenInformation;
-(void)cacheTokenInformation:(id)information;
-(void)dealloc;
-(id)initWithUserDefaultTokenInformationKeyName:(id)userDefaultTokenInformationKeyName;
-(id)init;
@end

@interface FBFrictionlessRequestSettings : NSObject <FBRequestDelegate> {
	NSArray* _allowedRecipients;
	FBRequest* _activeRequest;
	BOOL _enabled;
}
@property(retain) FBRequest* activeRequest;
@property(retain) NSArray* allowedRecipients;
@property(readonly, assign, nonatomic) BOOL enabled;
-(void)dealloc;
-(void)request:(id)request didFailWithError:(id)error;
-(void)request:(id)request didLoad:(id)load;
-(BOOL)isFrictionlessEnabledForRecipients:(id)recipients;
-(BOOL)isFrictionlessEnabledForRecipient:(id)recipient;
-(void)updateRecipientCacheWithRecipients:(id)recipients;
-(void)reloadRecipientCacheWithFacebook:(id)facebook;
-(void)enableWithFacebook:(id)facebook;
-(id)init;
@end

@interface FBCacheIndex : NSObject <NSCacheDelegate> {
	id<FBCacheIndexFileDelegate> _delegate;
	NSCache* _cachedEntries;
	unsigned _currentDiskUsage;
	unsigned _diskCapacity;
	sqlite3* _database;
	sqlite3_stmt* _insertStatement;
	sqlite3_stmt* _removeByKeyStatement;
	sqlite3_stmt* _selectByKeyStatement;
	sqlite3_stmt* _selectByKeyFragmentStatement;
	sqlite3_stmt* _selectExcludingKeyFragmentStatement;
	sqlite3_stmt* _trimStatement;
	sqlite3_stmt* _updateStatement;
	dispatch_queue_s* _databaseQueue;
}
@property(readonly, assign, nonatomic) dispatch_queue_s* databaseQueue;
@property(assign, nonatomic) unsigned entryCacheCountLimit;
@property(assign, nonatomic) unsigned diskCapacity;
@property(readonly, assign, nonatomic) unsigned currentDiskUsage;
@property(assign) id delegate;
-(void)_trimDatabase;
-(void)_flushOrphanedFiles;
-(void)_dropTrimmingTable;
-(void)_removeEntryFromDatabaseForKey:(id)key;
-(id)_entryForKey:(id)key;
-(void)_fetchCurrentDiskUsage;
-(id)_createCacheEntityInfo:(sqlite3_stmt*)info;
-(id)_readEntriesFromDatabase:(id)database excludingFragment:(BOOL)fragment;
-(id)_readEntryFromDatabase:(id)database;
-(void)_writeEntryInDatabase:(id)database;
-(void)_updateEntryInDatabaseForKey:(id)key entry:(id)entry;
-(void)cache:(id)cache willEvictObject:(id)object;
-(void)removeEntries:(id)entries excludingFragment:(BOOL)fragment;
-(void)removeEntryForKey:(id)key;
-(id)storeFileForKey:(id)key withData:(id)data;
-(id)fileNameForKey:(id)key;
-(void)dealloc;
-(id)initWithCacheFolder:(id)cacheFolder;
@end

@interface FBCacheEntityInfo : NSObject {
	NSString* _uuid;
	NSString* _key;
	double _accessTime;
	unsigned _fileSize;
	BOOL _dirty;
}
@property(assign, getter=isDirty) BOOL dirty;
@property(readonly, assign) unsigned fileSize;
@property(readonly, assign) double accessTime;
@property(readonly, assign) NSString* uuid;
@property(readonly, assign) NSString* key;
-(void)registerAccess;
-(void)dealloc;
-(id)initWithKey:(id)key uuid:(id)uuid accessTime:(double)time fileSize:(unsigned)size;
@end

@interface FBDataDiskCache : NSObject <FBCacheIndexFileDelegate> {
	NSCache* _inMemoryCache;
	FBCacheIndex* _cacheIndex;
	NSString* _dataCachePath;
	dispatch_queue_s* _fileQueue;
}
@property(copy, nonatomic) NSString* dataCachePath;
@property(readonly, assign, nonatomic) dispatch_queue_s* fileQueue;
@property(assign, nonatomic) unsigned cacheSizeMemory;
+(id)sharedCache;
-(void)setData:(id)data forURL:(id)url;
-(void)removeDataForSession:(id)session;
-(void)removeDataForUrl:(id)url;
-(id)dataForURL:(id)url;
-(BOOL)_doesFileExist:(id)exist;
-(void)cacheIndex:(id)index deleteFileWithName:(id)name;
-(void)cacheIndex:(id)index writeFileWithName:(id)name data:(id)data;
-(void)dealloc;
-(id)init;
@end

@interface FBSessionManualTokenCachingStrategy : FBSessionTokenCachingStrategy {
	NSString* _accessToken;
	NSDate* _expirationDate;
}
@property(copy) NSDate* expirationDate;
@property(copy) NSString* accessToken;
-(void)clearToken;
-(id)fetchTokenInformation;
-(void)cacheTokenInformation:(id)information;
-(void)dealloc;
@end

@interface FBGraphObjectTableCell : UITableViewCell {
	UIImageView* _pictureView;
	UILabel* _titleSuffixLabel;
	UIActivityIndicatorView* _activityIndicator;
	BOOL _boldTitle;
	BOOL _boldTitleSuffix;
}
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UILabel* titleSuffixLabel;
@property(retain, nonatomic) UIImageView* pictureView;
@property(retain, nonatomic) UIImage* picture;
@property(copy, nonatomic) NSString* subtitle;
@property(assign, nonatomic) BOOL boldTitleSuffix;
@property(assign, nonatomic) BOOL boldTitle;
@property(copy, nonatomic) NSString* titleSuffix;
@property(copy, nonatomic) NSString* title;
+(float)rowHeight;
-(void)createTitleSuffixLabel;
-(void)updateFonts;
-(void)stopAnimatingActivityIndicator;
-(void)startAnimatingActivityIndicator;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface FBGraphObject : NSMutableDictionary <FBGraphObject> {
	NSMutableDictionary* _jsonObject;
}
+(BOOL)isProtocolImplementationInferable:(id)inferable checkFBGraphObjectAdoption:(BOOL)adoption;
+(int)inferredImplTypeForSelector:(SEL)selector;
+(id)graphObjectWrappingObject:(id)object;
+(BOOL)isGraphObjectID:(id)anId sameAs:(id)as;
+(id)graphObjectWrappingDictionary:(id)dictionary;
+(id)graphObject;
-(void)removeObjectForKey:(id)key;
-(void)setObject:(id)object forKey:(id)key;
-(id)keyEnumerator;
-(id)objectForKey:(id)key;
-(unsigned)count;
-(void)graphObjectifyAll;
-(id)graphObjectifyAtKey:(id)key;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)respondsToSelector:(SEL)selector;
-(void)dealloc;
-(id)initWrappingDictionary:(id)dictionary;
@end

@interface FBGraphObjectArray : NSMutableArray {
	NSMutableArray* _jsonArray;
}
-(void)replaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(void)removeLastObject;
-(void)addObject:(id)object;
-(void)removeObjectAtIndex:(unsigned)index;
-(void)insertObject:(id)object atIndex:(unsigned)index;
-(id)reverseObjectEnumerator;
-(id)objectEnumerator;
-(id)objectAtIndex:(unsigned)index;
-(void)graphObjectifyAll;
-(id)graphObjectifyAtIndex:(unsigned)index;
-(unsigned)count;
-(void)dealloc;
-(id)initWrappingArray:(id)array;
@end

@interface Facebook : NSObject <FBRequestDelegate, FBLoginDialogDelegate> {
	id<FBSessionDelegate> _sessionDelegate;
	NSMutableSet* _requests;
	FBSession* _session;
	FBSessionManualTokenCachingStrategy* _tokenCaching;
	FBDialog* _fbDialog;
	NSString* _appId;
	NSString* _urlSchemeSuffix;
	BOOL _isExtendingAccessToken;
	FBRequest* _requestExtendingAccessToken;
	NSDate* _lastAccessTokenUpdate;
	FBFrictionlessRequestSettings* _frictionlessRequestSettings;
	BOOL _hasUpdatedAccessToken;
}
@property(retain, nonatomic) FBSessionManualTokenCachingStrategy* tokenCaching;
@property(assign, nonatomic) BOOL hasUpdatedAccessToken;
@property(copy, nonatomic) NSString* appId;
@property(retain, nonatomic) FBSession* session;
@property(readonly, assign, nonatomic) BOOL isFrictionlessRequestsEnabled;
@property(copy, nonatomic) NSString* urlSchemeSuffix;
@property(assign, nonatomic) id<FBSessionDelegate> sessionDelegate;
@property(copy, nonatomic) NSDate* expirationDate;
@property(copy, nonatomic) NSString* accessToken;
+(BOOL)automaticallyNotifiesObserversForKey:(id)key;
-(void)requestLoading:(id)loading;
-(void)request:(id)request didReceiveResponse:(id)response;
-(void)request:(id)request didLoadRawResponse:(id)response;
-(void)request:(id)request didLoad:(id)load;
-(void)request:(id)request didFailWithError:(id)error;
-(void)fbDialogNotLogin:(BOOL)login;
-(void)fbDialogLogin:(id)login expirationDate:(id)date;
-(BOOL)isSessionValid;
-(BOOL)isFrictionlessEnabledForRecipients:(id)recipients;
-(BOOL)isFrictionlessEnabledForRecipient:(id)recipient;
-(void)reloadFrictionlessRecipientCache;
-(void)enableFrictionlessRequests;
-(void)dialog:(id)dialog andParams:(id)params andDelegate:(id)delegate;
-(void)dialog:(id)dialog andDelegate:(id)delegate;
-(id)requestWithGraphPath:(id)graphPath andParams:(id)params andHttpMethod:(id)method andDelegate:(id)delegate;
-(id)requestWithGraphPath:(id)graphPath andParams:(id)params andDelegate:(id)delegate;
-(id)requestWithGraphPath:(id)graphPath andDelegate:(id)delegate;
-(id)requestWithMethodName:(id)methodName andParams:(id)params andHttpMethod:(id)method andDelegate:(id)delegate;
-(id)requestWithParams:(id)params andDelegate:(id)delegate;
-(void)logout:(id)logout;
-(void)logout;
-(BOOL)handleOpenURL:(id)url;
-(BOOL)shouldExtendAccessToken;
-(void)extendAccessTokenIfNeeded;
-(void)extendAccessToken;
-(void)authorize:(id)authorize;
-(void)updateSessionIfTokenUpdated;
-(id)parseURLParams:(id)params;
-(id)getOwnBaseUrl;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)observeTokenContextValueForKeyPath:(id)keyPath change:(id)change;
-(void)observeFinishedContextValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change;
-(void)invalidateSession;
-(void)dealloc;
-(id)initWithAppId:(id)appId urlSchemeSuffix:(id)suffix andDelegate:(id)delegate;
-(id)initWithAppId:(id)appId andDelegate:(id)delegate;
@end

@interface FBUtility : NSObject {
}
+(BOOL)isRetinaDisplay;
+(id)simpleJSONDecode:(id)decode;
+(id)simpleJSONEncode:(id)encode;
+(int)advertisingTrackingStatus;
+(id)advertiserID;
+(id)attributionID;
+(void)callTheFetchAppSettingsCallback:(id)callback;
+(void)fetchAppSettings:(id)settings callback:(id)callback;
+(id)addBasicInfoPermission:(id)permission;
+(BOOL)areAllPermissionsReadPermissions:(id)permissions;
+(BOOL)isPublishPermission:(id)permission;
+(id)localizedStringForKey:(id)key withDefault:(id)aDefault inBundle:(id)bundle;
+(id)localizedStringForKey:(id)key withDefault:(id)aDefault;
+(id)facebookSDKBundle;
+(id)expirationDateFromExpirationTimeString:(id)expirationTimeString;
+(id)stringAppBaseUrlFromAppId:(id)appId urlSchemeSuffix:(id)suffix;
+(id)stringFBIDFromObject:(id)object;
+(void)centerView:(id)view tableView:(id)view2;
+(id)graphObjectInArray:(id)array withSameIDAs:(id)sameIDAs;
+(double)randomTimeInterval:(double)interval withMaxValue:(double)maxValue;
+(unsigned long)currentTimeInMilliseconds;
+(id)stringByURLEncodingString:(id)string;
+(id)stringByURLDecodingString:(id)string;
+(id)dictionaryByParsingURLQueryPart:(id)part;
@end

@interface FBFriendPickerViewController : FBViewController <FBGraphObjectSelectionChangedDelegate, FBGraphObjectViewControllerDelegate, FBGraphObjectPagingLoaderDelegate> {
	BOOL _allowsMultipleSelection;
	FBGraphObjectTableDataSource* _dataSource;
	id<FBViewControllerDelegate> _delegate;
	NSSet* _fieldsForRequest;
	FBGraphObjectTableSelection* _selectionManager;
	UIActivityIndicatorView* _spinner;
	UITableView* _tableView;
	NSString* _userID;
	FBGraphObjectPagingLoader* _loader;
	int _sortOrdering;
	int _displayOrdering;
	BOOL _trackActiveSession;
	FBSession* _session;
}
@property(assign, nonatomic) BOOL trackActiveSession;
@property(retain, nonatomic) FBGraphObjectPagingLoader* loader;
@property(retain, nonatomic) FBGraphObjectTableSelection* selectionManager;
@property(retain, nonatomic) FBGraphObjectTableDataSource* dataSource;
@property(assign, nonatomic) int displayOrdering;
@property(assign, nonatomic) int sortOrdering;
@property(readonly, assign, nonatomic) NSArray* selection;
@property(copy, nonatomic) NSString* userID;
@property(retain, nonatomic) FBSession* session;
@property(copy, nonatomic) NSSet* fieldsForRequest;
@property(assign, nonatomic) BOOL itemPicturesEnabled;
@property(assign, nonatomic) BOOL allowsMultipleSelection;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) UIActivityIndicatorView* spinner;
+(id)requestWithUserID:(id)userID fields:(id)fields dataSource:(id)source session:(id)session;
+(id)cacheDescriptorWithUserID:(id)userID fieldsForRequest:(id)request;
+(id)cacheDescriptor;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)pagingLoaderWasCancelled:(id)cancelled;
-(void)pagingLoader:(id)loader handleError:(id)error;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)pagingLoader:(id)loader didLoadData:(id)data;
-(void)pagingLoader:(id)loader willLoadURL:(id)url;
-(void)graphObjectTableDataSource:(id)source customizeTableCell:(id)cell;
-(id)graphObjectTableDataSource:(id)source pictureUrlOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source titleSuffixOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source titleOfItem:(id)item;
-(BOOL)graphObjectTableDataSource:(id)source filterIncludesItem:(id)item;
-(void)graphObjectTableSelectionDidChange:(id)graphObjectTableSelection;
-(void)logInsights:(BOOL)insights;
-(void)centerAndStartSpinner;
-(void)loadDataSkippingRoundTripIfCached:(id)cached;
-(id)requestForLoadData;
-(void)clearData;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)removeSessionObserver:(id)observer;
-(void)addSessionObserver:(id)observer;
-(void)clearSelection;
-(void)updateView;
-(void)loadData;
-(void)configureUsingCachedDescriptor:(id)descriptor;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)dealloc;
-(void)initialize;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

@interface FBGraphObjectTableDataSource : NSObject <UITableViewDataSource> {
	NSArray* _data;
	UIImage* _defaultPicture;
	id<FBGraphObjectViewControllerDelegate> _controllerDelegate;
	NSString* _groupByField;
	BOOL _useCollation;
	BOOL _showSections;
	NSArray* _indexKeys;
	NSDictionary* _indexMap;
	BOOL _itemTitleSuffixEnabled;
	BOOL _itemPicturesEnabled;
	BOOL _itemSubtitleEnabled;
	NSMutableSet* _pendingURLConnections;
	id<FBGraphObjectSelectionQueryDelegate> _selectionDelegate;
	NSArray* _sortDescriptors;
	id<FBGraphObjectDataSourceDataNeededDelegate> _dataNeededDelegate;
	BOOL _expectingMoreGraphObjects;
	UILocalizedIndexedCollation* _collation;
}
@property(assign, nonatomic) BOOL showSections;
@property(retain, nonatomic) UILocalizedIndexedCollation* collation;
@property(assign, nonatomic) BOOL expectingMoreGraphObjects;
@property(retain, nonatomic) NSMutableSet* pendingURLConnections;
@property(retain, nonatomic) NSDictionary* indexMap;
@property(retain, nonatomic) NSArray* indexKeys;
@property(retain, nonatomic) NSArray* data;
@property(copy, nonatomic) NSArray* sortDescriptors;
@property(assign, nonatomic) id<FBGraphObjectDataSourceDataNeededDelegate> dataNeededDelegate;
@property(assign, nonatomic) id<FBGraphObjectSelectionQueryDelegate> selectionDelegate;
@property(assign, nonatomic) BOOL itemSubtitleEnabled;
@property(assign, nonatomic) BOOL itemPicturesEnabled;
@property(assign, nonatomic) BOOL itemTitleSuffixEnabled;
@property(assign, nonatomic) BOOL useCollation;
@property(copy, nonatomic) NSString* groupByField;
@property(assign, nonatomic) id<FBGraphObjectViewControllerDelegate> controllerDelegate;
@property(retain, nonatomic) UIImage* defaultPicture;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)addOrRemovePendingConnection:(id)connection;
-(id)tableView:(id)view imageForItem:(id)item;
-(id)sectionItemsForSection:(int)section;
-(id)titleForSection:(int)section;
-(BOOL)isActivityIndicatorIndexPath:(id)path;
-(BOOL)isLastSection:(int)section;
-(id)indexPathForItem:(id)item;
-(id)itemAtIndexPath:(id)indexPath;
-(id)indexKeyOfItem:(id)item;
-(id)cellWithTableView:(id)tableView;
-(void)setSortingBySingleField:(id)field ascending:(BOOL)ascending;
-(void)setSortingByFields:(id)fields ascending:(BOOL)ascending;
-(BOOL)filterIncludesItem:(id)item;
-(void)update;
-(void)cancelPendingRequests;
-(void)bindTableView:(id)view;
-(BOOL)hasGraphObjects;
-(void)appendGraphObjects:(id)objects;
-(void)clearGraphObjects;
-(void)prepareForNewRequest;
-(id)fieldsForRequestIncluding:(id)requestIncluding;
-(void)dealloc;
-(id)init;
@end

@interface FBGraphObjectTableSelection : NSObject <FBGraphObjectSelectionQueryDelegate, UITableViewDelegate> {
	FBGraphObjectTableDataSource* _dataSource;
	NSObject<FBGraphObjectSelectionChangedDelegate>* _delegate;
	NSArray* _selection;
	BOOL _allowMultipleSelection;
}
@property(retain, nonatomic) FBGraphObjectTableDataSource* dataSource;
@property(assign, nonatomic) BOOL allowsMultipleSelection;
@property(retain, nonatomic) NSArray* selection;
@property(assign, nonatomic) NSObject<FBGraphObjectSelectionChangedDelegate>* delegate;
-(id)description;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(BOOL)graphObjectTableDataSource:(id)source selectionIncludesItem:(id)item;
-(BOOL)selectionIncludesItem:(id)item;
-(void)selectionChanged;
-(void)deselectItems:(id)items tableView:(id)view;
-(void)deselectItem:(id)item cell:(id)cell raiseSelectionChanged:(BOOL)changed;
-(void)selectItem:(id)item cell:(id)cell;
-(void)clearSelectionInTableView:(id)tableView;
-(void)dealloc;
-(id)initWithDataSource:(id)dataSource;
@end

@interface FBLogger : NSObject {
	NSMutableString* _internalContents;
	BOOL _isActive;
	NSString* _loggingBehavior;
	unsigned _loggerSerialNumber;
}
@property(readonly, assign, nonatomic) NSMutableString* internalContents;
@property(readonly, assign, nonatomic) BOOL isActive;
@property(readonly, assign, nonatomic) NSString* loggingBehavior;
@property(readonly, assign, nonatomic) unsigned loggerSerialNumber;
@property(copy, nonatomic) NSString* contents;
+(void)registerStringToReplace:(id)replace replaceWith:(id)with;
+(void)registerCurrentTime:(id)time withTag:(id)tag;
+(void)singleShotLogEntry:(id)entry timestampTag:(id)tag formatString:(id)string;
+(void)singleShotLogEntry:(id)entry formatString:(id)string;
+(void)singleShotLogEntry:(id)entry logEntry:(id)entry2;
+(unsigned)newSerialNumber;
-(void)emitToNSLog;
-(void)appendKey:(id)key value:(id)value;
-(void)appendFormat:(id)format;
-(void)appendString:(id)string;
-(void)dealloc;
-(id)initWithLoggingBehavior:(id)loggingBehavior;
@end

@interface FBPlacePickerViewController : FBViewController <FBGraphObjectSelectionChangedDelegate, FBGraphObjectViewControllerDelegate, FBGraphObjectPagingLoaderDelegate> {
	BOOL _hasSearchTextChangedSinceLastQuery;
	FBGraphObjectTableDataSource* _dataSource;
	id<FBViewControllerDelegate> _delegate;
	NSSet* _fieldsForRequest;
	FBGraphObjectPagingLoader* _loader;
	XXStruct_zYrK5D _locationCoordinate;
	int _radiusInMeters;
	int _resultsLimit;
	NSString* _searchText;
	NSTimer* _searchTextChangedTimer;
	FBGraphObjectTableSelection* _selectionManager;
	UIActivityIndicatorView* _spinner;
	UITableView* _tableView;
	FBSession* _session;
	BOOL _trackActiveSession;
}
@property(assign, nonatomic) BOOL trackActiveSession;
@property(retain, nonatomic) NSTimer* searchTextChangedTimer;
@property(retain, nonatomic) FBGraphObjectPagingLoader* loader;
@property(retain, nonatomic) FBGraphObjectTableSelection* selectionManager;
@property(retain, nonatomic) FBGraphObjectTableDataSource* dataSource;
@property(readonly, assign, nonatomic) id<FBGraphPlace> selection;
@property(retain, nonatomic) FBSession* session;
@property(copy, nonatomic) NSString* searchText;
@property(assign, nonatomic) int resultsLimit;
@property(assign, nonatomic) int radiusInMeters;
@property(assign, nonatomic) XXStruct_zYrK5D locationCoordinate;
@property(assign, nonatomic) BOOL itemPicturesEnabled;
@property(copy, nonatomic) NSSet* fieldsForRequest;
@property(retain, nonatomic) UITableView* tableView;
@property(retain, nonatomic) UIActivityIndicatorView* spinner;
+(id)requestForPlacesSearchAtCoordinate:(XXStruct_zYrK5D)coordinate radiusInMeters:(int)meters resultsLimit:(int)limit searchText:(id)text fields:(id)fields datasource:(id)datasource session:(id)session;
+(id)cacheDescriptorWithLocationCoordinate:(XXStruct_zYrK5D)locationCoordinate radiusInMeters:(int)meters searchText:(id)text resultsLimit:(int)limit fieldsForRequest:(id)request;
-(void)setDelegate:(id)delegate;
-(id)delegate;
-(void)pagingLoaderWasCancelled:(id)cancelled;
-(void)pagingLoader:(id)loader handleError:(id)error;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)pagingLoader:(id)loader didLoadData:(id)data;
-(void)pagingLoader:(id)loader willLoadURL:(id)url;
-(id)graphObjectTableDataSource:(id)source pictureUrlOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source subtitleOfItem:(id)item;
-(id)graphObjectTableDataSource:(id)source titleOfItem:(id)item;
-(BOOL)graphObjectTableDataSource:(id)source filterIncludesItem:(id)item;
-(void)graphObjectTableSelectionDidChange:(id)graphObjectTableSelection;
-(void)logInsights:(BOOL)insights;
-(void)clearData;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)removeSessionObserver:(id)observer;
-(void)addSessionObserver:(id)observer;
-(void)centerAndStartSpinner;
-(void)searchTextChangedTimerFired:(id)fired;
-(id)createSearchTextChangedTimer;
-(void)updateView;
-(void)loadDataPostThrottleSkippingRoundTripIfCached:(id)cached;
-(void)viewDidUnload;
-(void)viewDidLoad;
-(void)clearSelection;
-(void)configureUsingCachedDescriptor:(id)descriptor;
-(void)loadData;
-(void)dealloc;
-(void)initialize;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

@interface FBGraphObjectPagingLoader : NSObject <FBGraphObjectDataSourceDataNeededDelegate> {
	UITableView* _tableView;
	FBGraphObjectTableDataSource* _dataSource;
	int _pagingMode;
	NSString* _nextLink;
	FBSession* _session;
	FBRequestConnection* _connection;
	id<FBGraphObjectPagingLoaderDelegate> _delegate;
	BOOL _isResultFromCache;
	NSString* _cacheIdentity;
	BOOL _skipRoundtripIfCached;
}
@property(assign, nonatomic) BOOL skipRoundtripIfCached;
@property(copy, nonatomic) NSString* cacheIdentity;
@property(retain, nonatomic) FBRequestConnection* connection;
@property(retain, nonatomic) NSString* nextLink;
@property(readonly, assign, nonatomic) BOOL isResultFromCache;
@property(assign, nonatomic) int pagingMode;
@property(assign, nonatomic) id<FBGraphObjectPagingLoaderDelegate> delegate;
@property(retain, nonatomic) FBSession* session;
@property(retain, nonatomic) FBGraphObjectTableDataSource* dataSource;
@property(retain, nonatomic) UITableView* tableView;
-(void)graphObjectTableDataSourceNeedsData:(id)data triggeredByIndexPath:(id)path;
-(void)requestCompleted:(id)completed result:(id)result error:(id)error;
-(void)reset;
-(void)cancel;
-(void)startLoadingWithRequest:(id)request cacheIdentity:(id)identity skipRoundtripIfCached:(BOOL)cached;
-(void)followNextLink;
-(void)addResultsAndUpdateView:(id)view;
-(void)updateView;
-(void)dealloc;
-(id)initWithDataSource:(id)dataSource pagingMode:(int)mode;
@end

@interface FBTestSession : FBSession {
	BOOL _forceAccessTokenRefresh;
	NSString* _appAccessToken;
	NSString* _testUserID;
	NSString* _testAppID;
	NSString* _testAppSecret;
	int _mode;
	NSString* _machineUniqueUserKey;
	NSString* _sessionUniqueUserTag;
}
@property(assign) int mode;
@property(readonly, assign) NSString* sharedTestUserIdentifier;
@property(readonly, assign) NSString* permissionsString;
@property(copy) NSString* sessionUniqueUserTag;
@property(copy) NSString* machineUniqueUserTag;
@property(copy) NSString* testAppSecret;
@property(copy) NSString* testAppID;
@property(copy) NSString* testUserID;
@property(copy) NSString* appAccessToken;
+(void)deleteUnitTestUser:(id)user accessToken:(id)token;
+(id)sessionForUnitTestingWithPermissions:(id)permissions mode:(int)mode sessionUniqueUserTag:(id)tag;
+(id)sessionWithPrivateUserWithPermissions:(id)permissions;
+(id)sessionWithSharedUserWithPermissions:(id)permissions;
+(id)sessionWithSharedUserWithPermissions:(id)permissions uniqueUserTag:(id)tag;
-(BOOL)shouldExtendAccessToken;
-(void)authorizeWithPermissions:(id)permissions behavior:(int)behavior defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize;
-(BOOL)transitionToState:(int)state andUpdateToken:(id)token andExpirationDate:(id)date shouldCache:(BOOL)cache loginType:(int)type;
-(BOOL)forceAccessTokenRefresh;
-(void)setForceAccessTokenRefresh:(BOOL)refresh;
-(void)findOrCreateSharedUser;
-(id)validNameStringFromInteger:(unsigned)integer;
-(void)retrieveTestUsersForApp;
-(void)populateTestUsers:(id)users testAccounts:(id)accounts;
-(void)raiseException:(id)exception;
-(void)transitionToOpenWithToken:(id)token;
-(void)createNewTestUser;
-(void)dealloc;
-(id)initWithAppID:(id)appID appSecret:(id)secret machineUniqueUserTag:(id)tag sessionUniqueUserTag:(id)tag4 mode:(int)mode permissions:(id)permissions tokenCachingStrategy:(id)strategy;
@end

@interface FBContentLink : NSObject {
	NSURL* targetURL;
	NSArray* actionTypes;
	NSString* source;
	NSArray* ref;
	NSDictionary* originalQueryParameters;
}
@property(copy) NSDictionary* originalQueryParameters;
@property(copy) NSArray* ref;
@property(copy) NSString* source;
@property(copy) NSArray* actionTypes;
@property(copy) NSURL* targetURL;
-(void)dealloc;
-(id)initWithURL:(id)url;
@end

@interface FBFriendPickerCacheDescriptor : FBCacheDescriptor <FBGraphObjectPagingLoaderDelegate> {
	NSSet* _fieldsForRequest;
	NSString* _userID;
	FBGraphObjectPagingLoader* _loader;
	BOOL _hasCompletedFetch;
	BOOL _usePageLimitOfOne;
}
@property(assign, nonatomic) BOOL usePageLimitOfOne;
@property(assign, nonatomic) BOOL hasCompletedFetch;
@property(retain, nonatomic) FBGraphObjectPagingLoader* loader;
@property(copy, nonatomic) NSString* userID;
@property(copy, nonatomic) NSSet* fieldsForRequest;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)setUsePageLimitOfOne;
-(void)prefetchAndCacheForSession:(id)session;
-(void)dealloc;
-(id)initWithUserID:(id)userID fieldsForRequest:(id)request;
-(id)initWithFieldsForRequest:(id)request;
-(id)initWithUserID:(id)userID;
-(id)init;
@end

@interface FBPlacePickerCacheDescriptor : FBCacheDescriptor <FBGraphObjectPagingLoaderDelegate> {
	XXStruct_zYrK5D _locationCoordinate;
	int _radiusInMeters;
	int _resultsLimit;
	NSString* _searchText;
	NSSet* _fieldsForRequest;
	FBGraphObjectPagingLoader* _loader;
	BOOL _hasCompletedFetch;
}
@property(assign, nonatomic) BOOL hasCompletedFetch;
@property(retain, nonatomic) FBGraphObjectPagingLoader* loader;
@property(copy, nonatomic) NSSet* fieldsForRequest;
@property(copy, nonatomic) NSString* searchText;
@property(assign, nonatomic) int resultsLimit;
@property(assign, nonatomic) int radiusInMeters;
@property(assign, nonatomic) XXStruct_zYrK5D locationCoordinate;
-(void)pagingLoaderDidFinishLoading:(id)pagingLoader;
-(void)prefetchAndCacheForSession:(id)session;
-(void)dealloc;
-(id)initWithLocationCoordinate:(XXStruct_zYrK5D)locationCoordinate radiusInMeters:(int)meters searchText:(id)text resultsLimit:(int)limit fieldsForRequest:(id)request;
@end

@interface FBCacheDescriptor : NSObject {
}
-(void)prefetchAndCacheForSession:(id)session;
@end

@interface FBLoginView : UIView <UIActionSheetDelegate> {
	id<FBLoginViewDelegate> _delegate;
	UILabel* _label;
	UIButton* _button;
	FBSession* _session;
	FBRequestConnection* _request;
	id<FBGraphUser> _user;
	NSArray* _permissions;
	NSArray* _readPermissions;
	NSArray* _publishPermissions;
	int _defaultAudience;
	NSNumber* _lastObservedStateWasOpen;
	id _sessionStateHandler;
	id _requestHandler;
}
@property(copy) NSNumber* lastObservedStateWasOpen;
@property(copy, nonatomic) id requestHandler;
@property(copy, nonatomic) id sessionStateHandler;
@property(retain, nonatomic) id<FBGraphUser> user;
@property(retain, nonatomic) FBRequestConnection* request;
@property(retain, nonatomic) FBSession* session;
@property(retain, nonatomic) UIButton* button;
@property(retain, nonatomic) UILabel* label;
@property(assign, nonatomic) id<FBLoginViewDelegate> delegate;
@property(assign, nonatomic) int defaultAudience;
@property(copy, nonatomic) NSArray* publishPermissions;
@property(copy, nonatomic) NSArray* readPermissions;
@property(copy) NSArray* permissions;
-(void)buttonPressed:(id)pressed;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)handleActiveSessionUnsetNotifications:(id)notifications;
-(void)handleActiveSessionSetNotifications:(id)notifications;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)unwireViewForSession;
-(void)wireViewForSession:(id)session;
-(void)wireViewForSessionWithoutOpening:(id)sessionWithoutOpening;
-(void)informDelegateOfError:(id)error;
-(void)informDelegate:(BOOL)delegate;
-(void)fetchMeInfo;
-(void)configureViewForStateLoggedIn:(BOOL)anIn;
-(id)logOutText;
-(id)logInText;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)initialize;
-(void)initializeBlocks;
-(void)dealloc;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithPublishPermissions:(id)publishPermissions defaultAudience:(int)audience;
-(id)initWithReadPermissions:(id)readPermissions;
-(id)initWithPermissions:(id)permissions;
-(id)init;
@end

@interface FBSettings : NSObject {
}
+(void)publishInstall:(id)install withHandler:(id)handler;
+(void)publishInstall:(id)install;
+(void)autoPublishInstall:(id)install;
+(void)setShouldAutoPublishInstall:(BOOL)autoPublishInstall;
+(BOOL)shouldAutoPublishInstall;
+(void)setClientToken:(id)token;
+(id)clientToken;
+(void)setLoggingBehavior:(id)behavior;
+(id)loggingBehavior;
@end

@interface FBUserSettingsViewController : FBViewController {
	FBProfilePictureView* _profilePicture;
	UILabel* _connectedStateLabel;
	id<FBGraphUser> _me;
	UIButton* _loginLogoutButton;
	NSArray* _permissions;
	NSArray* _readPermissions;
	NSArray* _publishPermissions;
	int _defaultAudience;
	BOOL _attemptingLogin;
	UIImageView* _backgroundImageView;
	NSBundle* _bundle;
	id _sessionStateHandler;
	id _requestHandler;
}
@property(copy, nonatomic) id requestHandler;
@property(copy, nonatomic) id sessionStateHandler;
@property(retain, nonatomic) NSBundle* bundle;
@property(assign, nonatomic) BOOL attemptingLogin;
@property(retain, nonatomic) UIButton* loginLogoutButton;
@property(retain, nonatomic) id<FBGraphUser> me;
@property(retain, nonatomic) UILabel* connectedStateLabel;
@property(retain, nonatomic) UIImageView* backgroundImageView;
@property(retain, nonatomic) FBProfilePictureView* profilePicture;
@property(assign, nonatomic) int defaultAudience;
@property(copy, nonatomic) NSArray* publishPermissions;
@property(copy, nonatomic) NSArray* readPermissions;
@property(copy, nonatomic) NSArray* permissions;
-(void)handleActiveSessionStateChanged:(id)changed;
-(void)loginLogoutButtonPressed:(id)pressed;
-(void)openSession;
-(void)sessionStateChanged:(id)changed state:(int)state error:(id)error;
-(void)updateControls;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)shouldAutorotate;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidUnload;
-(void)updateBackgroundImage;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
-(void)initializeBlocks;
@end

@interface FBViewController : UIViewController {
	UIBarButtonItem* _cancelButton;
	UIBarButtonItem* _doneButton;
	id<FBViewControllerDelegate> _delegate;
	UIToolbar* _toolbar;
	UIView* _canvasView;
	UIBarButtonItem* _titleLabel;
	id _handler;
	BOOL _autoDismiss;
	BOOL _dismissAnimated;
}
@property(assign, nonatomic) BOOL dismissAnimated;
@property(assign, nonatomic) BOOL autoDismiss;
@property(copy, nonatomic) id handler;
@property(retain, nonatomic) UIBarButtonItem* titleLabel;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(retain, nonatomic) UIView* canvasView;
@property(assign, nonatomic) id<FBViewControllerDelegate> delegate;
@property(retain, nonatomic) UIBarButtonItem* doneButton;
@property(retain, nonatomic) UIBarButtonItem* cancelButton;
-(void)logInsights:(BOOL)insights;
-(void)doneButtonPressed:(id)pressed;
-(void)cancelButtonPressed:(id)pressed;
-(id)compatiblePresentingViewController;
-(void)setTitle:(id)title;
-(void)updateBarForNavigationMode;
-(void)updateBarForPresentedMode;
-(void)updateBar;
-(void)presentModallyFromViewController:(id)viewController animated:(BOOL)animated handler:(id)handler;
-(BOOL)shouldAutorotateToInterfaceOrientation:(int)interfaceOrientation;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
-(void)commonInit;
@end

@interface FBNativeDialogs : NSObject {
}
+(id)createError:(id)error session:(id)session;
+(id)composeViewControllerWithSession:(id)session handler:(id)handler;
+(BOOL)canPresentShareDialogWithSession:(id)session;
+(BOOL)presentShareDialogModallyFrom:(id)from session:(id)session initialText:(id)text images:(id)images urls:(id)urls handler:(id)handler;
+(BOOL)presentShareDialogModallyFrom:(id)from initialText:(id)text images:(id)images urls:(id)urls handler:(id)handler;
+(BOOL)presentShareDialogModallyFrom:(id)from initialText:(id)text image:(id)image url:(id)url handler:(id)handler;
@end

@interface FBErrorUtility : NSObject {
}
+(id)fberrorForSystemPasswordChange:(id)systemPasswordChange;
+(id)fberrorForRetry:(id)retry;
+(void)fberrorGetCodeValueForError:(id)error index:(int)index code:(int*)code subcode:(int*)subcode;
+(BOOL)fberrorIsErrorFromSystemSession:(id)systemSession;
+(int)fberrorCategoryFromError:(id)error code:(int)code subcode:(int)subcode returningUserMessage:(id*)message andShouldNotifyUser:(BOOL*)anAnd;
@end

@interface FBSystemAccountStoreAdapter : NSObject {
	BOOL _forceBlockingRenew;
	ACAccountStore* _accountStore;
	ACAccountType* _accountTypeFB;
}
@property(readonly, assign, nonatomic) ACAccountType* accountTypeFB;
@property(readonly, assign, nonatomic) ACAccountStore* accountStore;
@property(readonly, assign) BOOL canRequestAccessWithoutUI;
@property(assign) BOOL forceBlockingRenew;
+(void)setSharedInstance:(id)instance;
+(id)sharedInstance;
-(void)renewSystemAuthorization:(id)authorization;
-(void)requestAccessToFacebookAccountStore:(id)facebookAccountStore defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize appID:(id)anId session:(id)session handler:(id)handler;
-(void)requestAccessToFacebookAccountStore:(id)facebookAccountStore handler:(id)handler;
-(void)dealloc;
-(id)init;
@end

@interface FBInsights : NSObject {
	NSString* _appVersion;
	int _flushBehavior;
	BOOL _haveOutstandingPersistedData;
	FBSession* _lastSessionLoggedTo;
	FBSession* _anonymousSession;
	FBSession* _appAuthSession;
	NSTimer* _flushTimer;
	NSTimer* _attributionIDRecheckTimer;
	NSSet* _eventsNotRequiringToken;
	int _appSupportsAttributionStatus;
	BOOL _appSupportsImplicitLogging;
	BOOL _haveFetchedAppSettings;
	NSMutableDictionary* _incompleteTimedEvents;
}
@property(retain) NSMutableDictionary* incompleteTimedEvents;
@property(assign) BOOL haveFetchedAppSettings;
@property(assign) BOOL appSupportsImplicitLogging;
@property(assign) int appSupportsAttributionStatus;
@property(retain) NSSet* eventsNotRequiringToken;
@property(retain) NSTimer* attributionIDRecheckTimer;
@property(retain) NSTimer* flushTimer;
@property(retain) FBSession* appAuthSession;
@property(retain) FBSession* anonymousSession;
@property(retain) FBSession* lastSessionLoggedTo;
@property(assign) BOOL haveOutstandingPersistedData;
@property(assign) int flushBehavior;
@property(copy) NSString* appVersion;
+(void)ensureOnMainThread;
+(id)persistenceFilePath;
+(void)clearPersistedInsightsData;
+(id)retrievePersistedInsightsData;
+(void)persistInsightsData:(id)data;
+(void)logAndNotify:(id)notify;
+(long)unixTimeNow;
+(id)unaffinitizedSessionFromToken:(id)token;
+(id)constructTimerKey:(id)key timerID:(id)anId;
+(id)singleton;
+(void)flush;
+(void)setFlushBehavior:(int)behavior;
+(int)flushBehavior;
+(void)logConversionPixel:(id)pixel valueOfPixel:(double)pixel2 session:(id)session;
+(void)logConversionPixel:(id)pixel valueOfPixel:(double)pixel2;
+(void)logTimedEvent:(id)event parameters:(id)parameters timerID:(id)anId session:(id)session;
+(void)logTimedEvent:(id)event parameters:(id)parameters timerID:(id)anId;
+(void)logTimedEvent:(id)event parameters:(id)parameters;
+(void)logTimedEvent:(id)event timerID:(id)anId;
+(void)logTimedEvent:(id)event;
+(void)startTimedEvent:(id)event parameters:(id)parameters timerID:(id)anId;
+(void)startTimedEvent:(id)event parameters:(id)parameters;
+(void)startTimedEvent:(id)event timerID:(id)anId;
+(void)startTimedEvent:(id)event;
+(void)logPurchase:(double)purchase currency:(id)currency parameters:(id)parameters session:(id)session;
+(void)logPurchase:(double)purchase currency:(id)currency parameters:(id)parameters;
+(void)logPurchase:(double)purchase currency:(id)currency;
+(void)logImplicitEvent:(id)event valueToSum:(double)sum parameters:(id)parameters session:(id)session;
+(void)logEvent:(id)event valueToSum:(double)sum parameters:(id)parameters session:(id)session;
+(void)logEvent:(id)event valueToSum:(double)sum parameters:(id)parameters;
+(void)logEvent:(id)event parameters:(id)parameters;
+(void)logEvent:(id)event valueToSum:(double)sum;
+(void)logEvent:(id)event;
+(void)setAppVersion:(id)version;
+(id)appVersion;
-(void)persistDataIfNotInFlight;
-(void)applicationTerminating;
-(void)applicationMovingFromActiveState;
-(BOOL)updateInsightsStateWithPersistedData:(id)persistedData;
-(void)applicationDidBecomeActive;
-(void)attributionIDRecheckTimerFired:(id)fired;
-(void)flushTimerFired:(id)fired;
-(void)handleActivitiesPostCompletion:(id)completion flushReason:(int)reason session:(id)session;
-(id)sessionToFlushTo:(id)to;
-(void)optionallyAppendAttributionAndAdvertiserIDs:(id)ids session:(id)session;
-(void)flushOnMainQueue:(int)queue session:(id)session;
-(void)flush:(int)flush session:(id)session;
-(void)instanceFlush:(int)flush;
-(void)instanceLogTimedEvent:(id)event parameters:(id)parameters timerID:(id)anId session:(id)session;
-(void)instanceStartTimedEvent:(id)event parameters:(id)parameters timerID:(id)anId;
-(void)instanceLogEvent:(id)event valueToSum:(double)sum parameters:(id)parameters isImplicitlyLogged:(BOOL)logged session:(id)session;
-(id)init;
@end

@interface FBSessionInsightsState : NSObject {
	NSMutableArray* _accumulatedEvents;
	NSMutableArray* _inFlightEvents;
	int numSkippedEventsDueToFullBuffer;
	int numAbandonedDueToSessionChange;
	BOOL requestInFlight;
}
@property(assign) BOOL requestInFlight;
@property(assign) int numAbandonedDueToSessionChange;
@property(assign) int numSkippedEventsDueToFullBuffer;
@property(retain) NSMutableArray* inFlightEvents;
@property(retain) NSMutableArray* accumulatedEvents;
-(id)jsonEncodeInFlightEvents:(BOOL)flightEvents;
-(void)clearInFlightAndStats;
-(void)abandonEvents;
-(int)getAccumulatedEventCount;
-(void)addEvent:(id)event isImplicit:(BOOL)implicit;
-(void)dealloc;
-(id)init;
@end

@interface FBAccessTokenData : NSObject <NSCopying> {
	NSString* _accessToken;
	NSArray* _permissions;
	NSDate* _expirationDate;
	int _loginType;
	NSDate* _refreshDate;
}
@property(copy, nonatomic) NSDate* refreshDate;
@property(readonly, assign, nonatomic) int loginType;
@property(readonly, assign, nonatomic) NSDate* expirationDate;
@property(copy, nonatomic) NSArray* permissions;
@property(readonly, assign, nonatomic) NSString* accessToken;
+(id)createTokenFromString:(id)string permissions:(id)permissions expirationDate:(id)date loginType:(int)type refreshDate:(id)date5;
+(id)createTokenFromDictionary:(id)dictionary;
+(id)createTokenFromFacebookURL:(id)facebookURL appID:(id)anId urlSchemeSuffix:(id)suffix;
-(id)description;
-(id)dictionary;
-(BOOL)isEqualToAccessTokenData:(id)accessTokenData;
-(id)copyWithZone:(NSZone*)zone;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(void)dealloc;
-(id)initWithToken:(id)token permissions:(id)permissions expirationDate:(id)date loginType:(int)type refreshDate:(id)date5;
@end

@interface FBFetchedAppSettings : NSObject {
	BOOL _supportsAttribution;
	BOOL _supportsImplicitSdkLogging;
}
@property(assign) BOOL supportsImplicitSdkLogging;
@property(assign) BOOL supportsAttribution;
@end

@interface FBWebDialogDelegate : NSObject <FBDialogDelegate> {
	BOOL _isSelfRetained;
	id _handler;
	FBDialog* _dialog;
}
@property(retain, nonatomic) FBDialog* dialog;
@property(copy, nonatomic) id handler;
-(void)dialog:(id)dialog didFailWithError:(id)error;
-(void)dialogDidNotComplete:(id)dialog;
-(void)dialogDidComplete:(id)dialog;
-(void)dialogDidNotCompleteWithUrl:(id)dialog;
-(void)dialogCompleteWithUrl:(id)url;
-(void)completeWithResult:(int)result url:(id)url error:(id)error;
-(void)releaseSelfIfNeeded;
-(void)goRetainYourself;
-(void)dealloc;
-(id)init;
@end

@interface FBWebDialogs : NSObject {
}
+(void)presentFeedDialogModallyWithSession:(id)session parameters:(id)parameters handler:(id)handler;
+(void)presentRequestsDialogModallyWithSession:(id)session message:(id)message title:(id)title parameters:(id)parameters handler:(id)handler;
+(void)presentDialogModallyWithSession:(id)session dialog:(id)dialog parameters:(id)parameters handler:(id)handler;
@end

@interface TenpaySecureCtrl : UITextField {
	TenpayDelegate* myDelegate;
	int nMaxLen;
	UIView* myKeyboard;
	BOOL bFormatBankCard;
	id<TenpaySecureCtrlDelegate> ctrlDelegate;
}
@property(assign, nonatomic) BOOL bFormatBankCard;
@property(assign, nonatomic) id<TenpaySecureCtrlDelegate> ctrlDelegate;
-(BOOL)isAreaIDCardNum:(int)num;
-(BOOL)isUserIDNum;
-(BOOL)isBankCardNum;
-(BOOL)isPhoneNum;
-(id)Get3DesEncryptData;
-(id)GetRsaEncryptData;
-(void)ClearInput;
-(void)SelectRsaKey:(int)key;
-(void)SetSalt:(id)salt;
-(long)GetInputInfo;
-(id)GetVersion;
-(void)numberKeyBoardClicked:(id)clicked;
-(void)numberKeyBoardTouchTouchCancel:(id)cancel;
-(void)numberKeyBoardTouchDown:(id)down;
-(void)UseKeyboardWithX:(BOOL)x ImageNumNormal:(id)normal ImageNumPress:(id)press ImageDelNormal:(id)normal4 ImageDelPess:(id)pess;
-(void)AppendString:(id)string;
-(void)SetMaxInputLen:(int)len;
-(int)GetInputLen;
-(id)text;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)dealloc;
-(void)onChange;
-(void)onReturn;
-(id)initWithFrame:(CGRect)frame;
@end

@interface TenpayDelegate : NSObject <UITextFieldDelegate> {
	NSMutableString* myPW;
	NSString* mySalt;
	NSString* myAppend;
	int myKeyIndex;
	int nMaxLen;
	id _objectId;
	SEL _callbackName1;
	SEL _callbackName2;
	BOOL bFormatBankCard;
}
@property(assign, nonatomic) BOOL bFormatBankCard;
-(id)GetUnEncryptCode;
-(id)GetEncryptCode;
-(id)GetAsteriskString:(id)string;
-(BOOL)isAreaIDCardNum:(int)num;
-(BOOL)isUserIDNum;
-(BOOL)isBankCardNum;
-(BOOL)isPhoneNum;
-(id)Get3DesEncryptData;
-(id)GetEncryptDataWithHash:(BOOL)hash;
-(void)ClearInput;
-(void)SelectRsaKey:(int)key;
-(void)SetSalt:(id)salt;
-(long)GetInputInfo;
-(id)GetVersion;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)ResetMyPW:(id)pw;
-(id)EncodeCard:(id)card;
-(id)DecodeCardWithAppend:(id)append;
-(id)DecodeCard:(id)card;
-(void)AppendString:(id)string;
-(void)SetMaxInputLen:(int)len;
-(void)SetChange:(id)change callback:(SEL)callback;
-(void)SetReturn:(id)aReturn callback:(SEL)callback;
-(void)dealloc;
-(id)init;
@end

@interface NSStringHelp : NSObject {
}
+(BOOL)ISMcID:(id)anId;
+(BOOL)ISTwID:(id)anId;
+(BOOL)ISHkID:(id)anId;
+(BOOL)isTaiBaoID:(id)anId;
+(BOOL)isHuiXiangID:(id)anId;
+(BOOL)invalidateID:(id)anId;
+(BOOL)isUserIDNum:(id)num;
+(BOOL)isBankCardNum:(id)num;
+(BOOL)isPhoneNum:(id)num;
+(BOOL)isDigit:(id)digit Length:(unsigned)length;
@end

@interface TenpayPasswordBgView : UIView {
	UIView* RoundCell1;
	UIView* RoundCell2;
	UIView* RoundCell3;
	UIView* RoundCell4;
	UIView* RoundCell5;
	UIView* RoundCell6;
}
-(void)SetInputNum:(int)num;
-(id)RoundCell:(int)cell;
-(id)initWithFrame:(CGRect)frame AndImage:(id)image;
@end

@interface TenpayPasswordInView : UITextField {
}
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(id)initWithFrame:(CGRect)frame;
@end

@interface TenpayPasswordCtrl : UIView <UITextFieldDelegate> {
	int nInputLen;
	NSMutableString* myPW;
	NSString* mySalt;
	UIView* myKeyboard;
	TenpayPasswordInView* inPassword;
	TenpayPasswordBgView* bgPassword;
	id<TenpayPasswordCtrlDelegate> _ctrlDelegate;
}
@property(assign, nonatomic) id<TenpayPasswordCtrlDelegate> ctrlDelegate;
-(id)GetHashData;
-(id)GetRsaEncryptData;
-(int)GetInputLen;
-(void)SetSalt:(id)salt;
-(void)ClearInput;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(void)onChange;
-(void)numberKeyBoardClicked:(id)clicked;
-(void)numberKeyBoardTouchTouchCancel:(id)cancel;
-(void)numberKeyBoardTouchDown:(id)down;
-(void)UseKeyboardWithImageNumNormal:(id)imageNumNormal ImageNumPress:(id)press ImageDelNormal:(id)normal ImageDelPess:(id)pess;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(id)initWithFrame:(CGRect)frame AndImage:(id)image;
-(void)dealloc;
@end

@interface TenpaySecureObject : NSObject {
}
+(id)EncryptWith3Des:(id)a3Des;
+(id)SignWith3Des:(id)a3Des;
@end

@interface TPIDKeyboardButton : UIButton {
	UILabel* _subtitleLabel;
}
@property(retain, nonatomic) UILabel* subtitleLabel;
@end

@interface TPIDKeyboardView : UIView {
	UITextField* curText;
	int maxInput;
}
@property(assign, nonatomic) int maxInput;
-(void)numberKeyBoardClicked:(id)clicked;
-(void)numberKeyBoardTouchTouchCancel:(id)cancel;
-(void)numberKeyBoardTouchDown:(id)down;
-(void)touchInput:(id)input;
-(void)addController:(id)controller;
-(id)initWithX:(BOOL)x ImageNumNormal:(id)normal ImageNumPress:(id)press ImageDelNormal:(id)normal4 ImageDelPess:(id)pess;
@end

@interface PLCrashSignalHandler : NSObject {
	darwin_sigaltstack _sigstk;
}
+(id)sharedHandler;
-(BOOL)registerHandlerWithCallback:(/*function-pointer*/ void*)callback context:(void*)context error:(id*)error;
-(BOOL)registerHandlerForSignal:(int)signal error:(id*)error;
-(id)init;
@end

@interface PLCrashReporter : NSObject {
	BOOL _enabled;
	NSString* _applicationIdentifier;
	NSString* _applicationVersion;
	NSString* _crashReportDirectory;
}
+(id)sharedReporter;
+(void)initialize;
-(void)setCrashCallbacks:(PLCrashReporterCallbacks*)callbacks;
-(id)generateLiveReportAndReturnError:(id*)error;
-(id)generateLiveReport;
-(BOOL)enableCrashReporterAndReturnError:(id*)error;
-(BOOL)enableCrashReporter;
-(BOOL)purgePendingCrashReportAndReturnError:(id*)error;
-(BOOL)purgePendingCrashReport;
-(id)loadPendingCrashReportDataAndReturnError:(id*)error;
-(id)loadPendingCrashReportData;
-(BOOL)hasPendingCrashReport;
-(id)crashReportPath;
-(id)queuedCrashReportDirectory;
-(id)crashReportDirectory;
-(BOOL)populateCrashReportDirectoryAndReturnError:(id*)error;
-(void)dealloc;
-(id)initWithBundle:(id)bundle;
-(id)initWithApplicationIdentifier:(id)applicationIdentifier appVersion:(id)version;
@end

@interface PLCrashReport : NSObject {
	PLCrashReportDecoder* _decoder;
	PLCrashReportSystemInfo* _systemInfo;
	PLCrashReportMachineInfo* _machineInfo;
	PLCrashReportApplicationInfo* _applicationInfo;
	PLCrashReportProcessInfo* _processInfo;
	PLCrashReportSignalInfo* _signalInfo;
	NSArray* _threads;
	NSArray* _images;
	PLCrashReportExceptionInfo* _exceptionInfo;
}
@property(readonly, assign, nonatomic) PLCrashReportExceptionInfo* exceptionInfo;
@property(readonly, assign, nonatomic) BOOL hasExceptionInfo;
@property(readonly, assign, nonatomic) NSArray* images;
@property(readonly, assign, nonatomic) NSArray* threads;
@property(readonly, assign, nonatomic) PLCrashReportSignalInfo* signalInfo;
@property(readonly, assign, nonatomic) PLCrashReportProcessInfo* processInfo;
@property(readonly, assign, nonatomic) BOOL hasProcessInfo;
@property(readonly, assign, nonatomic) PLCrashReportApplicationInfo* applicationInfo;
@property(readonly, assign, nonatomic) PLCrashReportMachineInfo* machineInfo;
@property(readonly, assign, nonatomic) BOOL hasMachineInfo;
@property(readonly, assign, nonatomic) PLCrashReportSystemInfo* systemInfo;
-(id)imageForAddress:(unsigned long long)address;
-(void)dealloc;
-(id)initWithData:(id)data error:(id*)error;
-(id)extractSignalInfo:(Plcrash__CrashReport__Signal*)info error:(id*)error;
-(id)extractExceptionInfo:(Plcrash__CrashReport__Exception*)info error:(id*)error;
-(id)extractImageInfo:(Plcrash__CrashReport*)info error:(id*)error;
-(id)extractThreadInfo:(Plcrash__CrashReport*)info error:(id*)error;
-(id)extractStackFrameInfo:(Plcrash__CrashReport__Thread__StackFrame*)info error:(id*)error;
-(id)extractProcessInfo:(Plcrash__CrashReport__ProcessInfo*)info error:(id*)error;
-(id)extractApplicationInfo:(Plcrash__CrashReport__ApplicationInfo*)info error:(id*)error;
-(id)extractMachineInfo:(Plcrash__CrashReport__MachineInfo*)info error:(id*)error;
-(id)extractProcessorInfo:(Plcrash__CrashReport__Processor*)info error:(id*)error;
-(id)extractSystemInfo:(Plcrash__CrashReport__SystemInfo*)info error:(id*)error;
-(Plcrash__CrashReport*)decodeCrashData:(id)data error:(id*)error;
@end

@interface PLCrashReportSystemInfo : NSObject {
	int _operatingSystem;
	NSString* _osVersion;
	NSString* _osBuild;
	int _architecture;
	NSDate* _timestamp;
}
@property(readonly, assign, nonatomic) NSDate* timestamp;
@property(readonly, assign, nonatomic) int architecture;
@property(readonly, assign, nonatomic) NSString* operatingSystemBuild;
@property(readonly, assign, nonatomic) NSString* operatingSystemVersion;
@property(readonly, assign, nonatomic) int operatingSystem;
-(void)dealloc;
-(id)initWithOperatingSystem:(int)operatingSystem operatingSystemVersion:(id)version operatingSystemBuild:(id)build architecture:(int)architecture timestamp:(id)timestamp;
-(id)initWithOperatingSystem:(int)operatingSystem operatingSystemVersion:(id)version architecture:(int)architecture timestamp:(id)timestamp;
@end

@interface PLCrashReportApplicationInfo : NSObject {
	NSString* _applicationIdentifier;
	NSString* _applicationVersion;
}
@property(readonly, assign, nonatomic) NSString* applicationVersion;
@property(readonly, assign, nonatomic) NSString* applicationIdentifier;
-(void)dealloc;
-(id)initWithApplicationIdentifier:(id)applicationIdentifier applicationVersion:(id)version;
@end

@interface PLCrashReportThreadInfo : NSObject {
	int _threadNumber;
	NSArray* _stackFrames;
	BOOL _crashed;
	NSArray* _registers;
}
@property(readonly, assign, nonatomic) NSArray* registers;
@property(readonly, assign, nonatomic) BOOL crashed;
@property(readonly, assign, nonatomic) NSArray* stackFrames;
@property(readonly, assign, nonatomic) int threadNumber;
-(void)dealloc;
-(id)initWithThreadNumber:(int)threadNumber stackFrames:(id)frames crashed:(BOOL)crashed registers:(id)registers;
@end

@interface PLCrashReportStackFrameInfo : NSObject {
	unsigned long long _instructionPointer;
}
@property(readonly, assign, nonatomic) unsigned long long instructionPointer;
-(id)initWithInstructionPointer:(unsigned long long)instructionPointer;
@end

@interface PLCrashReportRegisterInfo : NSObject {
	NSString* _registerName;
	unsigned long long _registerValue;
}
@property(readonly, assign, nonatomic) unsigned long long registerValue;
@property(readonly, assign, nonatomic) NSString* registerName;
-(void)dealloc;
-(id)initWithRegisterName:(id)registerName registerValue:(unsigned long long)value;
@end

@interface PLCrashReportBinaryImageInfo : NSObject {
	PLCrashReportProcessorInfo* _processorInfo;
	unsigned long long _baseAddress;
	unsigned long long _imageSize;
	NSString* _imageName;
	BOOL _hasImageUUID;
	NSString* _imageUUID;
}
@property(readonly, assign, nonatomic) NSString* imageUUID;
@property(readonly, assign, nonatomic) BOOL hasImageUUID;
@property(readonly, assign, nonatomic) NSString* imageName;
@property(readonly, assign, nonatomic) unsigned long long imageSize;
@property(readonly, assign, nonatomic) unsigned long long imageBaseAddress;
@property(readonly, assign, nonatomic) PLCrashReportProcessorInfo* codeType;
-(void)dealloc;
-(id)initWithCodeType:(id)codeType baseAddress:(unsigned long long)address size:(unsigned long long)size name:(id)name uuid:(id)uuid;
@end

@interface PLCrashReportExceptionInfo : NSObject {
	NSString* _name;
	NSString* _reason;
	NSArray* _stackFrames;
}
@property(readonly, assign, nonatomic) NSArray* stackFrames;
@property(readonly, assign, nonatomic) NSString* exceptionReason;
@property(readonly, assign, nonatomic) NSString* exceptionName;
-(void)dealloc;
-(id)initWithExceptionName:(id)exceptionName reason:(id)reason stackFrames:(id)frames;
-(id)initWithExceptionName:(id)exceptionName reason:(id)reason;
@end

@interface PLCrashReportSignalInfo : NSObject {
	NSString* _name;
	NSString* _code;
	unsigned long long _address;
}
@property(readonly, assign, nonatomic) unsigned long long address;
@property(readonly, assign, nonatomic) NSString* code;
@property(readonly, assign, nonatomic) NSString* name;
-(void)dealloc;
-(id)initWithSignalName:(id)signalName code:(id)code address:(unsigned long long)address;
@end

@interface PLCrashReportProcessInfo : NSObject {
	NSString* _processName;
	unsigned _processID;
	NSString* _processPath;
	NSString* _parentProcessName;
	unsigned _parentProcessID;
	BOOL _native;
}
@property(readonly, assign, nonatomic) BOOL native;
@property(readonly, assign, nonatomic) unsigned parentProcessID;
@property(readonly, assign, nonatomic) NSString* parentProcessName;
@property(readonly, assign, nonatomic) NSString* processPath;
@property(readonly, assign, nonatomic) unsigned processID;
@property(readonly, assign, nonatomic) NSString* processName;
-(void)dealloc;
-(id)initWithProcessName:(id)processName processID:(unsigned)anId processPath:(id)path parentProcessName:(id)name parentProcessID:(unsigned)anId5 native:(BOOL)native;
@end

@interface PLCrashReportTextFormatter : NSObject <PLCrashReportFormatter> {
	int _textFormat;
	unsigned _stringEncoding;
}
+(id)stringValueForCrashReport:(id)crashReport withTextFormat:(int)textFormat;
+(id)formatStackFrame:(id)frame frameIndex:(unsigned)index report:(id)report;
-(id)formatReport:(id)report error:(id*)error;
-(id)initWithTextFormat:(int)textFormat stringEncoding:(unsigned)encoding;
@end

@interface PLCrashReportProcessorInfo : NSObject {
	int _typeEncoding;
	unsigned long long _type;
	unsigned long long _subtype;
}
@property(readonly, assign, nonatomic) unsigned long long subtype;
@property(readonly, assign, nonatomic) unsigned long long type;
@property(readonly, assign, nonatomic) int typeEncoding;
-(id)initWithTypeEncoding:(int)typeEncoding type:(unsigned long long)type subtype:(unsigned long long)subtype;
@end

@interface PLCrashReportMachineInfo : NSObject {
	NSString* _modelName;
	PLCrashReportProcessorInfo* _processorInfo;
	unsigned _processorCount;
	unsigned _logicalProcessorCount;
}
@property(readonly, assign, nonatomic) unsigned logicalProcessorCount;
@property(readonly, assign, nonatomic) unsigned processorCount;
@property(readonly, assign, nonatomic) PLCrashReportProcessorInfo* processorInfo;
@property(readonly, assign, nonatomic) NSString* modelName;
-(void)dealloc;
-(id)initWithModelName:(id)modelName processorInfo:(id)info processorCount:(unsigned)count logicalProcessorCount:(unsigned)count4;
@end

@interface NSString (Compare)
-(int)compareByContactKey:(id)key;
@end

@interface NSDate (dateFormatHelper)
+(int)getNongliDayOfToday;
+(void)printNongliDateOfYear:(int)year andMonth:(int)month andDay:(int)day;
+(int)getHourOfToday;
@end

@interface UIView (ModalAnimationHelper)
+(void)commitModalAnimations;
@end

@interface NSMutableArray (Number)
-(void)removeNumberIdenticalTo:(id)to;
-(unsigned)messageWrapIndexOfNumberIdenticalTo:(id)to;
@end

@interface UIBarButtonItem (width)
-(void)setCustomWidth:(float)width;
-(float)width;
@end

@interface UINavigationController (Property)
@property(assign, nonatomic) BOOL m_bPoping;
@end

@interface UINavigationController (LogicController)
@property(assign, nonatomic) BOOL m_bAnimated;
-(void)PopNavStackIfNeed;
-(BOOL)PushToNavStackIfNeed:(id)navStackIfNeed operationType:(int)type bAnimated:(BOOL)animated;
-(void)onCheckNavStack;
-(BOOL)isCurrentViewController;
-(void)pushUniqueClassViewController:(id)controller animated:(BOOL)animated;
-(void)PopViewControllerCount:(unsigned long)count animated:(BOOL)animated;
-(id)PopViewControllerAnimated:(BOOL)animated;
-(id)DispatchPopViewControllerAnimated:(BOOL)animated;
-(id)PopToViewController:(id)viewController animated:(BOOL)animated;
-(id)PopToRootViewControllerAnimated:(BOOL)rootViewControllerAnimated;
-(void)PushViewController:(id)controller animated:(BOOL)animated;
-(void)popAnimationDidStop;
-(void)pushAnimationDidStop;
-(void)animationWillStart;
-(void)PopTimer;
-(void)onBackButtonClicked:(id)clicked;
-(id)getViewControllerImage:(id)image;
-(void)pushLogicController:(id)controller animated:(BOOL)animated;
-(id)FindViewControllerBefore:(id)before;
@end

@interface UINavigationController (Delegate) <UINavigationControllerDelegate>
-(int)positionForBar:(id)bar;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@interface UINavigationBar (CustomImage)
-(void)drawRect:(CGRect)rect;
@end

@interface UIView (Extend)
-(void)removeAllGestureRecognizer;
-(id)subviewsWithClass:(Class)aClass;
-(void)subviewsWithClass:(Class)aClass insertIntoArray:(id)array;
-(id)viewWithClass:(Class)aClass;
-(void)removeSubViewWithClass:(Class)aClass;
-(void)removeSubViewWithTag:(unsigned long)tag;
-(void)removeAllSubViews;
@end

@interface UIView (ViewFrameGeometry)
@property(assign) float y;
@property(assign) float x;
@property(assign) float right;
@property(assign) float bottom;
@property(assign) float left;
@property(assign) float top;
@property(assign) float width;
@property(assign) float height;
@property(readonly, assign) CGPoint topRight;
@property(readonly, assign) CGPoint bottomRight;
@property(readonly, assign) CGPoint bottomLeft;
@property(assign) CGSize size;
@property(assign) CGPoint origin;
-(void)ceilAllSubviews;
-(void)fitTheSubviews;
-(void)fitInSize:(CGSize)size;
-(void)scaleBy:(float)by;
-(void)moveBy:(CGPoint)by;
@end

@interface UIViewController (ModalView)
-(void)DismissMyselfAnimated:(BOOL)animated;
-(void)DismissModalViewControllerAnimated:(BOOL)animated;
-(void)PresentModalViewController:(id)controller animated:(BOOL)animated;
@end

@interface UIButton (Target)
-(void)removeAllTargets;
@end

@interface UIWebView (Background)
-(void)removeBackgroundView;
@end

@interface UILabel (Size)
-(void)autoFitAllowMultipleLines;
-(void)autoFit;
-(void)widthToFit;
-(void)heightToFit;
@end

@interface UINavigationController (iOS6OrientationFix)
-(int)preferredInterfaceOrientationForPresentation;
-(BOOL)shouldAutorotate;
-(unsigned)supportedInterfaceOrientations;
@end

@interface MKMapView (ZoomLevel)
-(unsigned)getCurrZoomLevel;
-(void)setCenterCoordinate:(XXStruct_zYrK5D)coordinate zoomLevel:(unsigned)level animated:(BOOL)animated;
-(XXStruct_zYrK5D)coordinateSpanWithMapView:(id)mapView centerCoordinate:(XXStruct_zYrK5D)coordinate andZoomLevel:(unsigned)level;
-(double)pixelSpaceYToLatitude:(double)latitude;
-(double)pixelSpaceXToLongitude:(double)longitude;
-(double)latitudeToPixelSpaceY:(double)pixelSpaceY;
-(double)longitudeToPixelSpaceX:(double)pixelSpaceX;
@end

@interface UIImage (MMCellBackgroundImage)
+(id)imageWithBackgroundImage:(id)backgroundImage andPosition:(int)position;
+(id)getImageWithBackgroundImage:(id)backgroundImage WithRect:(CGRect)rect;
+(BOOL)is2xScreen;
@end

@interface UIFont (Extend)
+(id)fontMonacoOfSize:(float)size;
+(id)fontBaskervilleSemiBoldOfSize:(float)size;
+(id)fontGeorgiaBoldOfSize:(float)size;
+(id)fontHiraKakuProNW3OfSize:(float)size;
+(id)fontCochinBoldOfSize:(float)size;
@end

@interface NSString (Compare)
-(int)compareByContactKey:(id)key;
-(int)getSpecialKeyValue;
@end

@interface NSURL (NSURL_WechatUrl)
-(int)getWechatWebviewType;
-(BOOL)isWechatRedirect;
-(id)getUrlPartAfterSharp;
@end

@interface UIGestureRecognizer (MMGridViewAdditions)
-(BOOL)hasRecognizedValidGesture;
-(void)end;
@end

@interface UIView (MMGridViewAdditions)
-(void)recursiveEnumerateSubviewsUsingBlock:(id)block;
-(void)shakeStatus:(BOOL)status;
@end

@interface ALAsset (Extend)
-(id)assetUrl;
@end

@interface UIView (Genie)
-(void)genieOutTransitionWithDuration:(double)duration startRect:(CGRect)rect startEdge:(unsigned)edge Completion:(id)completion;
-(void)genieInTransitionWithDuration:(double)duration destinationRect:(CGRect)rect destinationEdge:(unsigned)edge Completion:(id)completion;
-(void)genieTransitionWithDuration:(double)duration edge:(unsigned)edge destinationRect:(CGRect)rect reverse:(BOOL)reverse Completion:(id)completion;
-(id)transformationsForSlices:(id)slices edge:(unsigned)edge startPosition:(float)position totalSize:(float)size firstBezier:(BCSegment)bezier secondBezier:(BCSegment)bezier6 finalRectDepth:(float)depth;
-(id)transformRect:(CGRect)rect toTrapezoid:(BCTrapezoid)trapezoid;
-(id)sliceImage:(id)image toLayersAlongAxis:(int)layersAlongAxis;
-(id)renderSnapshotWithMarginForAxis:(int)axis;
@end

@interface UIView (setFrame)
-(void)setFrameNew:(CGRect)aNew;
@end

@interface UIAlertView (UIAlertViewHelp)
-(id)FindMessageLabel;
@end

@interface UIApplication (KeyboardView)
-(id)keyboardView;
@end

@interface UIDevice (Hardware)
+(int)getSysInfo:(unsigned)info;
+(id)getSysInfoByName:(char*)name;
-(int)L3CacheSize;
-(int)L2CacheSize;
-(int)L1DCacheSize;
-(int)L1ICacheSize;
-(int)cacheLine;
-(int)userMemory;
-(int)totalMemory;
-(int)busFrequency;
-(int)cpuFrequency;
-(int)cpuCount;
-(id)platform;
@end

@interface NSURLResponse (WebViewResposne)
+(void)load;
-(id)initWithCFURLResponse__:(void*)cfurlresponse__;
@end

@interface NSURLRequest (MutableCopyWorkaround)
-(id)mutableCopyWorkaround;
@end

@interface NSString (Emoji)
+(id)changeEmoji2Text:(id)text;
+(BOOL)isContainEmoji:(id)emoji;
+(BOOL)isEmoji:(id)emoji;
-(id)emojiUnifiedString;
-(id)emojiSoftBankString;
@end

@interface NSCache (SafeInsert)
-(void)safeRemoveObjectForKey:(id)key;
-(void)safeSetObject:(id)object forKey:(id)key;
@end

@interface NSMutableDictionary (SafeInsert)
-(void)safeRemoveObjectForKey:(id)key;
-(void)safeSetObject:(id)object forKey:(id)key;
@end

@interface NSMutableSet (SafeInsert)
-(void)safeRemoveObject:(id)object;
-(void)safeAddObject:(id)object;
@end

@interface NSMutableArray (SafeInsert)
-(void)removeFirstObject;
-(id)firstObject;
-(void)safeReplaceObjectAtIndex:(unsigned)index withObject:(id)object;
-(void)safeRemoveObjectAtIndex:(unsigned)index;
-(void)safeInsertObject:(id)object atIndex:(unsigned)index;
-(void)safeAddObject:(id)object;
@end

@interface NSArray (SafeInsert)
-(id)firstObject;
@end

@interface NSString (JSONKitDeserializing)
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONString;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONStringWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONString;
@end

@interface NSData (JSONKitDeserializing)
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)mutableObjectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)mutableObjectFromJSONData;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions error:(id*)error;
-(id)objectFromJSONDataWithParseOptions:(unsigned)parseOptions;
-(id)objectFromJSONData;
@end

@interface NSString (JSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options includeQuotes:(BOOL)quotes error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options includeQuotes:(BOOL)quotes error:(id*)error;
-(id)JSONData;
@end

@interface NSArray (JSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface NSDictionary (JSONKitSerializing)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONStringWithOptions:(unsigned)options error:(id*)error;
-(id)JSONString;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingDelegate:(id)delegate selector:(SEL)selector error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options error:(id*)error;
-(id)JSONData;
@end

@interface NSArray (JSONKitSerializingBlockAdditions)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
@end

@interface NSDictionary (JSONKitSerializingBlockAdditions)
-(id)JSONStringWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
-(id)JSONDataWithOptions:(unsigned)options serializeUnsupportedClassesUsingBlock:(id)block error:(id*)error;
@end

@interface NSObject (NSObject_SBJSON)
-(id)JSONRepresentation;
-(id)JSONFragment;
@end

@interface NSDictionary (NSDictionary_SafeJSON)
-(double)doubleForKey:(id)key;
-(float)floatForKey:(id)key;
-(int)integerForKey:(id)key;
-(id)dictionaryForKey:(id)key;
-(id)arrayForKey:(id)key;
-(id)stringForKey:(id)key;
@end

@interface NSArray (NSArray_SafeJSON)
-(double)doubleAtIndex:(unsigned)index;
-(float)floatAtIndex:(unsigned)index;
-(int)integerAtIndex:(unsigned)index;
-(id)dictionaryAtIndex:(unsigned)index;
-(id)arrayAtIndex:(unsigned)index;
-(id)stringAtIndex:(unsigned)index;
-(id)mm_safe_objectAtIndex:(int)index;
@end

@interface NSString (NSString_SBJSON)
-(id)JSONDictionary;
-(id)JSONArray;
-(id)JSONValue;
-(id)JSONFragmentValue;
@end

@interface NSString (GTMNSStringHTMLAdditions)
-(id)gtm_stringByUnescapingFromHTML;
-(id)gtm_stringByEscapingForXML;
-(id)gtm_stringByEscapingForAsciiHTML;
-(id)gtm_stringByEscapingForHTML;
-(id)gtm_stringByEscapingHTMLUsingTable:(XXStruct_c19r_A*)table ofSize:(unsigned)size escapingUnicode:(BOOL)unicode;
@end

@interface NSString (GTMNSStringURLArgumentsAdditions)
-(id)gtm_stringByEncodeByJsonAndUrlEncode;
-(id)gtm_stringByUnescapingFromURLArgument;
-(id)gtm_stringByEscapingForURLArgumentOnly;
-(id)gtm_stringByEscapingForURLArgument;
@end

@interface NSString (GTMNSStringXMLAdditions)
-(id)gtm_stringBySanitizingToXMLSpec;
-(id)gtm_stringBySanitizingAndEscapingForXML;
@end

@interface NSDataDetector (sharedObject)
+(id)linkDetector;
+(id)phonenumberDetector;
@end

@interface NSString (NSString_MMExtend)
+(id)safeStringWithUTF8String:(const char*)utf8String;
+(id)stringWithUInt64:(unsigned long long)uint64;
-(BOOL)containsSubstring:(id)substring option:(unsigned)option;
-(BOOL)containsSubstring:(id)substring;
-(int)compareWithUInt64:(id)uint64;
-(id)stringByEscapingAllLineBreak;
-(id)stringByTrimmingRight;
-(id)stringByTrimmingLeft;
-(id)stringByTrimming;
-(id)stringByTrimmingTrailingCharactersInSet:(id)set;
-(id)stringByTrimmingLeadingCharactersInSet:(id)set;
-(unsigned long long)uint64Value;
-(unsigned long long)unsignLongLongValue;
@end

@interface NSObject (ObjcRuntime)
-(void)removeAssociatedObjects;
-(void)detachObjectForKey:(id)key;
-(id)getAttachedObjectForKey:(id)key;
-(void)attachObject:(id)object forKey:(id)key;
-(const void*)computeKeyFromString:(id)string;
@end

@interface NSString (RegexKitLiteAdditions)
+(int)captureCountForRegex:(id)regex options:(unsigned)options error:(id*)error;
+(int)captureCountForRegex:(id)regex;
+(void)clearStringCache;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error enumerationOptions:(unsigned)options5 usingBlock:(id)block;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex usingBlock:(id)block;
-(BOOL)enumerateStringsSeparatedByRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error enumerationOptions:(unsigned)options5 usingBlock:(id)block;
-(BOOL)enumerateStringsSeparatedByRegex:(id)regex usingBlock:(id)block;
-(BOOL)enumerateStringsMatchedByRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error enumerationOptions:(unsigned)options5 usingBlock:(id)block;
-(BOOL)enumerateStringsMatchedByRegex:(id)regex usingBlock:(id)block;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex options:(unsigned)options range:(NSRange)range error:(id*)error withKeys:(id*)keys forCaptures:(int*)captures count:(unsigned)count;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex options:(unsigned)options range:(NSRange)range error:(id*)error withFirstKey:(id)firstKey arguments:(void*)arguments;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex options:(unsigned)options range:(NSRange)range error:(id*)error withKeysAndCaptures:(id)keysAndCaptures;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex range:(NSRange)range withKeysAndCaptures:(id)keysAndCaptures;
-(id)arrayOfDictionariesByMatchingRegex:(id)dictionariesByMatchingRegex withKeysAndCaptures:(id)keysAndCaptures;
-(id)dictionaryByMatchingRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error withKeys:(id*)keys forCaptures:(int*)captures count:(unsigned)count;
-(id)dictionaryByMatchingRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error withFirstKey:(id)firstKey arguments:(void*)arguments;
-(id)dictionaryByMatchingRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error withKeysAndCaptures:(id)keysAndCaptures;
-(id)dictionaryByMatchingRegex:(id)regex range:(NSRange)range withKeysAndCaptures:(id)keysAndCaptures;
-(id)dictionaryByMatchingRegex:(id)regex withKeysAndCaptures:(id)keysAndCaptures;
-(id)arrayOfCaptureComponentsMatchedByRegex:(id)captureComponentsMatchedByRegex options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)arrayOfCaptureComponentsMatchedByRegex:(id)captureComponentsMatchedByRegex range:(NSRange)range;
-(id)arrayOfCaptureComponentsMatchedByRegex:(id)captureComponentsMatchedByRegex;
-(id)captureComponentsMatchedByRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)captureComponentsMatchedByRegex:(id)regex range:(NSRange)range;
-(id)captureComponentsMatchedByRegex:(id)regex;
-(id)componentsMatchedByRegex:(id)regex options:(unsigned)options range:(NSRange)range capture:(int)capture error:(id*)error;
-(id)componentsMatchedByRegex:(id)regex range:(NSRange)range;
-(id)componentsMatchedByRegex:(id)regex capture:(int)capture;
-(id)componentsMatchedByRegex:(id)regex;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex withString:(id)string options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex withString:(id)string range:(NSRange)range;
-(id)stringByReplacingOccurrencesOfRegex:(id)regex withString:(id)string;
-(id)stringByMatching:(id)matching options:(unsigned)options inRange:(NSRange)range capture:(int)capture error:(id*)error;
-(id)stringByMatching:(id)matching inRange:(NSRange)range;
-(id)stringByMatching:(id)matching capture:(int)capture;
-(id)stringByMatching:(id)matching;
-(NSRange)rangeOfRegex:(id)regex options:(unsigned)options inRange:(NSRange)range capture:(int)capture error:(id*)error;
-(NSRange)rangeOfRegex:(id)regex inRange:(NSRange)range;
-(NSRange)rangeOfRegex:(id)regex capture:(int)capture;
-(NSRange)rangeOfRegex:(id)regex;
-(void)flushCachedRegexData;
-(BOOL)isRegexValidWithOptions:(unsigned)options error:(id*)error;
-(BOOL)isRegexValid;
-(BOOL)isMatchedByRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error;
-(BOOL)isMatchedByRegex:(id)regex inRange:(NSRange)range;
-(BOOL)isMatchedByRegex:(id)regex;
-(id)componentsSeparatedByRegex:(id)regex options:(unsigned)options range:(NSRange)range error:(id*)error;
-(id)componentsSeparatedByRegex:(id)regex range:(NSRange)range;
-(id)componentsSeparatedByRegex:(id)regex;
-(int)captureCountWithOptions:(unsigned)options error:(id*)error;
-(int)captureCount;
@end

@interface NSMutableString (RegexKitLiteAdditions)
-(int)replaceOccurrencesOfRegex:(id)regex options:(unsigned)options inRange:(NSRange)range error:(id*)error enumerationOptions:(unsigned)options5 usingBlock:(id)block;
-(int)replaceOccurrencesOfRegex:(id)regex usingBlock:(id)block;
-(int)replaceOccurrencesOfRegex:(id)regex withString:(id)string options:(unsigned)options range:(NSRange)range error:(id*)error;
-(int)replaceOccurrencesOfRegex:(id)regex withString:(id)string range:(NSRange)range;
-(int)replaceOccurrencesOfRegex:(id)regex withString:(id)string;
@end

@interface UIImage (Alpha)
-(CGImageRef)newBorderMask:(unsigned)mask size:(CGSize)size;
-(id)transparentBorderImage:(unsigned)image;
-(id)imageWithAlpha;
-(BOOL)hasAlpha;
@end

@interface UIImage (Resize2)
-(id)resizedImageExt:(CGSize)ext interpolationQuality:(int)quality;
-(id)resizeToMinSideLen:(int)minSideLen;
-(id)resizeToMaxWidth:(int)maxWidth andMaxHeight:(int)height;
-(id)croppedImage:(CGRect)image;
@end

@interface UIImage (Rotate)
-(id)rotate:(int)rotate;
@end

@interface UIImage (Color)
+(id)imageWithColor:(id)color;
-(id)greyScaleImage;
@end

@interface UIImage (resize)
+(id)imageFromRawGrayData:(char*)rawGrayData Width:(unsigned)width Height:(unsigned)height;
+(id)genRoundedImage:(id)image size:(CGSize)size conerSize:(unsigned long)size3;
+(id)genRoundedImage:(id)image size:(CGSize)size;
+(id)genBigThumbnailImage:(id)image;
+(id)genThumbnailImage:(id)image;
+(id)genNormalScaledImage:(id)image;
+(id)genScaledImageEx:(id)ex width:(float)width height:(float)height;
+(id)genScaledImage:(id)image size:(CGSize)size;
+(CGSize)calculateImageFitSizeForBigThumbnail:(id)bigThumbnail;
+(CGSize)calculateImageFitSizeForThumbnail:(id)thumbnail;
+(CGSize)calculateImageFitSizeForNormalScaled:(id)normalScaled;
+(CGSize)calculateImageFitSizeForPreview:(id)preview preWidth:(int)width preHeight:(int)height;
+(CGSize)calculateImageFitSizeInternal:(id)internal maxWidth:(int)width maxHeight:(int)height;
+(CGSize)calculateFitSize:(CGSize)size maxWidth:(int)width maxHeight:(int)height;
+(id)scaleAndRotateImage:(id)image withMaxResolution:(float)maxResolution;
@end

@interface UIImage (Resize)
-(CGAffineTransform)transformForOrientation:(CGSize)orientation;
-(id)resizedImage:(CGSize)image transform:(CGAffineTransform)transform drawTransposed:(BOOL)transposed interpolationQuality:(int)quality;
-(id)resizedImageWithContentMode:(int)contentMode bounds:(CGSize)bounds interpolationQuality:(int)quality;
-(id)resizedImage:(CGSize)image interpolationQuality:(int)quality;
-(id)thumbnailImage:(int)image transparentBorder:(unsigned)border cornerRadius:(unsigned)radius interpolationQuality:(int)quality;
-(id)croppedImage2:(CGRect)a2;
-(id)croppedImage:(CGRect)image;
@end

@interface UIImage (RoundedCorner)
-(void)addRoundedRectToPath:(CGRect)path context:(CGContextRef)context ovalWidth:(float)width ovalHeight:(float)height;
-(id)roundedCornerImage:(int)image borderSize:(int)size;
@end

@interface NSError (FBError)
@property(readonly, assign) NSString* fberrorUserMessage;
@property(readonly, assign) BOOL fberrorShouldNotifyUser;
@property(readonly, assign) int fberrorCategory;
@end

